
easy-phi_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f7b4  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008f7b4  0008f7b4  000177b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b8c  20070000  0008f7bc  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000125c  20070b8c  00090348  00018b8c  2**2
                  ALLOC
  4 .stack        00002000  20071de8  000915a4  00018b8c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00018b8c  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00018bb5  2**0
                  CONTENTS, READONLY
  7 .debug_info   00034f0e  00000000  00000000  00018c26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000964b  00000000  00000000  0004db34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001c077  00000000  00000000  0005717f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001d60  00000000  00000000  000731f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001fa8  00000000  00000000  00074f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00024e2a  00000000  00000000  00076f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00031d8d  00000000  00000000  0009bd2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007b6c9  00000000  00000000  000cdab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004208  00000000  00000000  00149180  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20073de8 	.word	0x20073de8
   80004:	00089ad9 	.word	0x00089ad9
   80008:	00089ad5 	.word	0x00089ad5
   8000c:	00085211 	.word	0x00085211
   80010:	00089ad5 	.word	0x00089ad5
   80014:	00089ad5 	.word	0x00089ad5
   80018:	00089ad5 	.word	0x00089ad5
	...
   8002c:	00089ad5 	.word	0x00089ad5
   80030:	00089ad5 	.word	0x00089ad5
   80034:	00000000 	.word	0x00000000
   80038:	00089ad5 	.word	0x00089ad5
   8003c:	00089ad5 	.word	0x00089ad5
   80040:	00089ad5 	.word	0x00089ad5
   80044:	00089ad5 	.word	0x00089ad5
   80048:	00089ad5 	.word	0x00089ad5
   8004c:	00089ad5 	.word	0x00089ad5
   80050:	00089ad5 	.word	0x00089ad5
   80054:	00089ad5 	.word	0x00089ad5
   80058:	00089ad5 	.word	0x00089ad5
   8005c:	00089ad5 	.word	0x00089ad5
   80060:	00089ad5 	.word	0x00089ad5
   80064:	00089ad5 	.word	0x00089ad5
   80068:	00000000 	.word	0x00000000
   8006c:	00087885 	.word	0x00087885
   80070:	000878a1 	.word	0x000878a1
   80074:	000878bd 	.word	0x000878bd
   80078:	000878d9 	.word	0x000878d9
	...
   80084:	00089ad5 	.word	0x00089ad5
   80088:	00089ad5 	.word	0x00089ad5
   8008c:	00089ad5 	.word	0x00089ad5
   80090:	00089ad5 	.word	0x00089ad5
   80094:	00089ad5 	.word	0x00089ad5
   80098:	00089ad5 	.word	0x00089ad5
   8009c:	00089ad5 	.word	0x00089ad5
   800a0:	00089ad5 	.word	0x00089ad5
   800a4:	00000000 	.word	0x00000000
   800a8:	00089ad5 	.word	0x00089ad5
   800ac:	00089ad5 	.word	0x00089ad5
   800b0:	00082001 	.word	0x00082001
   800b4:	00089ad5 	.word	0x00089ad5
   800b8:	00089ad5 	.word	0x00089ad5
   800bc:	00089ad5 	.word	0x00089ad5
   800c0:	00089ad5 	.word	0x00089ad5
   800c4:	00089ad5 	.word	0x00089ad5
   800c8:	00089ad5 	.word	0x00089ad5
   800cc:	00089ad5 	.word	0x00089ad5
   800d0:	00089ad5 	.word	0x00089ad5
   800d4:	00089ad5 	.word	0x00089ad5
   800d8:	00089ad5 	.word	0x00089ad5
   800dc:	00089ad5 	.word	0x00089ad5
   800e0:	00088401 	.word	0x00088401
   800e4:	00089ad5 	.word	0x00089ad5
   800e8:	00089ad5 	.word	0x00089ad5
   800ec:	00089ad5 	.word	0x00089ad5
   800f0:	00089ad5 	.word	0x00089ad5

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	0008f7bc 	.word	0x0008f7bc
   80110:	0008f7bf 	.word	0x0008f7bf
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	0008f7bc 	.word	0x0008f7bc
   8013c:	0008f7bc 	.word	0x0008f7bc
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070b8c 	.word	0x20070b8c
   80164:	00000000 	.word	0x00000000
   80168:	0008f7bc 	.word	0x0008f7bc

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	0008f7bc 	.word	0x0008f7bc
   80198:	20070b90 	.word	0x20070b90
   8019c:	0008f7bc 	.word	0x0008f7bc
   801a0:	00000000 	.word	0x00000000

000801a4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   801a4:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   801a6:	f640 33ac 	movw	r3, #2988	; 0xbac
   801aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   801ae:	681a      	ldr	r2, [r3, #0]
   801b0:	f892 4022 	ldrb.w	r4, [r2, #34]	; 0x22
   801b4:	f640 31b2 	movw	r1, #2994	; 0xbb2
   801b8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   801bc:	7808      	ldrb	r0, [r1, #0]
   801be:	6811      	ldr	r1, [r2, #0]
   801c0:	7c52      	ldrb	r2, [r2, #17]
   801c2:	1c23      	adds	r3, r4, #0
   801c4:	bf18      	it	ne
   801c6:	2301      	movne	r3, #1
   801c8:	f644 1419 	movw	r4, #18713	; 0x4919
   801cc:	f2c0 0408 	movt	r4, #8
   801d0:	47a0      	blx	r4
   801d2:	bd10      	pop	{r4, pc}

000801d4 <sdio_cmd53>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd53(uint8_t rw_flag, uint8_t func_nb, uint32_t reg_addr,
		uint8_t inc_addr, uint32_t size, bool access_block)
{
   801d4:	b570      	push	{r4, r5, r6, lr}
   801d6:	b082      	sub	sp, #8
   801d8:	9c06      	ldr	r4, [sp, #24]
	Assert(size != 0);
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
   801da:	f249 3635 	movw	r6, #37685	; 0x9335
   801de:	f2c0 0601 	movt	r6, #1
   801e2:	f241 3535 	movw	r5, #4917	; 0x1335
   801e6:	f2c0 0501 	movt	r5, #1
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
   801ea:	ea4f 7101 	mov.w	r1, r1, lsl #28

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
			SDIO_CMD53_IO_R_BYTE_EXTENDED :
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
   801ee:	ea41 2242 	orr.w	r2, r1, r2, lsl #9
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
   801f2:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
			SDIO_CMD53_IO_R_BYTE_EXTENDED :
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
   801f6:	ea4f 51c4 	mov.w	r1, r4, lsl #23
   801fa:	ea4f 51d1 	mov.w	r1, r1, lsr #23
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
   801fe:	4311      	orrs	r1, r2
		uint8_t inc_addr, uint32_t size, bool access_block)
{
	Assert(size != 0);
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
   80200:	f89d 201c 	ldrb.w	r2, [sp, #28]
   80204:	9200      	str	r2, [sp, #0]
   80206:	2800      	cmp	r0, #0
   80208:	bf14      	ite	ne
   8020a:	4630      	movne	r0, r6
   8020c:	4628      	moveq	r0, r5
   8020e:	ea41 6183 	orr.w	r1, r1, r3, lsl #26
   80212:	b2a2      	uxth	r2, r4
   80214:	f04f 0301 	mov.w	r3, #1
   80218:	f644 2445 	movw	r4, #19013	; 0x4a45
   8021c:	f2c0 0408 	movt	r4, #8
   80220:	47a0      	blx	r4
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
			| ((uint32_t)rw_flag << SDIO_CMD53_RW_FLAG),
			size, 1, access_block);
}
   80222:	b002      	add	sp, #8
   80224:	bd70      	pop	{r4, r5, r6, pc}
   80226:	bf00      	nop

00080228 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   80228:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   8022a:	f640 33b2 	movw	r3, #2994	; 0xbb2
   8022e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80232:	7818      	ldrb	r0, [r3, #0]
   80234:	b930      	cbnz	r0, 80244 <sd_mmc_deselect_slot+0x1c>
		driver_deselect_device(sd_mmc_slot_sel);
   80236:	f04f 0000 	mov.w	r0, #0
   8023a:	f644 118d 	movw	r1, #18829	; 0x498d
   8023e:	f2c0 0108 	movt	r1, #8
   80242:	4788      	blx	r1
   80244:	bd08      	pop	{r3, pc}
   80246:	bf00      	nop

00080248 <sdio_cmd52>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
   80248:	b510      	push	{r4, lr}
   8024a:	9c02      	ldr	r4, [sp, #8]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
   8024c:	ea4f 2242 	mov.w	r2, r2, lsl #9
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
   80250:	ea42 7101 	orr.w	r1, r2, r1, lsl #28
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
   80254:	ea41 70c0 	orr.w	r0, r1, r0, lsl #31
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
   80258:	ea40 63c3 	orr.w	r3, r0, r3, lsl #27
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
   8025c:	7822      	ldrb	r2, [r4, #0]
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
   8025e:	f241 3034 	movw	r0, #4916	; 0x1334
   80262:	ea43 0102 	orr.w	r1, r3, r2
   80266:	f644 13b5 	movw	r3, #18869	; 0x49b5
   8026a:	f2c0 0308 	movt	r3, #8
   8026e:	4798      	blx	r3
   80270:	b140      	cbz	r0, 80284 <sdio_cmd52+0x3c>
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
		return false;
	}
	*io_data = driver_get_response() & 0xFF;
   80272:	f644 11dd 	movw	r1, #18909	; 0x49dd
   80276:	f2c0 0108 	movt	r1, #8
   8027a:	4788      	blx	r1
   8027c:	7020      	strb	r0, [r4, #0]
	return true;
   8027e:	f04f 0001 	mov.w	r0, #1
   80282:	bd10      	pop	{r4, pc}
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
		return false;
   80284:	f04f 0000 	mov.w	r0, #0
	}
	*io_data = driver_get_response() & 0xFF;
	return true;
}
   80288:	bd10      	pop	{r4, pc}
   8028a:	bf00      	nop

0008028c <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
   8028c:	b508      	push	{r3, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
   8028e:	f640 33ac 	movw	r3, #2988	; 0xbac
   80292:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80296:	6818      	ldr	r0, [r3, #0]
   80298:	8981      	ldrh	r1, [r0, #12]
   8029a:	f641 3009 	movw	r0, #6921	; 0x1b09
   8029e:	ea4f 4101 	mov.w	r1, r1, lsl #16
   802a2:	f644 12b5 	movw	r2, #18869	; 0x49b5
   802a6:	f2c0 0208 	movt	r2, #8
   802aa:	4790      	blx	r2
   802ac:	b170      	cbz	r0, 802cc <sd_mmc_cmd9_mci+0x40>
		return false;
	}
	driver_get_response_128(sd_mmc_card->csd);
   802ae:	f640 33ac 	movw	r3, #2988	; 0xbac
   802b2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   802b6:	6818      	ldr	r0, [r3, #0]
   802b8:	f100 0012 	add.w	r0, r0, #18
   802bc:	f644 11e5 	movw	r1, #18917	; 0x49e5
   802c0:	f2c0 0108 	movt	r1, #8
   802c4:	4788      	blx	r1
	return true;
   802c6:	f04f 0001 	mov.w	r0, #1
   802ca:	bd08      	pop	{r3, pc}
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   802cc:	f04f 0000 	mov.w	r0, #0
	}
	driver_get_response_128(sd_mmc_card->csd);
	return true;
}
   802d0:	bd08      	pop	{r3, pc}
   802d2:	bf00      	nop

000802d4 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   802d4:	b510      	push	{r4, lr}
	if (slot >= SD_MMC_MEM_CNT) {
   802d6:	2800      	cmp	r0, #0
   802d8:	f040 80a8 	bne.w	8042c <sd_mmc_select_slot+0x158>
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
   802dc:	f240 030c 	movw	r3, #12
   802e0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   802e4:	6898      	ldr	r0, [r3, #8]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   802e6:	ea4f 1250 	mov.w	r2, r0, lsr #5
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   802ea:	f502 1100 	add.w	r1, r2, #2097152	; 0x200000
   802ee:	f201 7307 	addw	r3, r1, #1799	; 0x707
   802f2:	ea4f 2243 	mov.w	r2, r3, lsl #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   802f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   802f8:	f000 001f 	and.w	r0, r0, #31
   802fc:	f04f 0101 	mov.w	r1, #1
   80300:	fa01 f300 	lsl.w	r3, r1, r0
   80304:	4213      	tst	r3, r2
   80306:	d01d      	beq.n	80344 <sd_mmc_select_slot+0x70>
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
   80308:	f240 020c 	movw	r2, #12
   8030c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80310:	7b90      	ldrb	r0, [r2, #14]
   80312:	4288      	cmp	r0, r1
   80314:	d10c      	bne.n	80330 <sd_mmc_select_slot+0x5c>
	return false;
}

static inline void SD_MMC_STOP_TIMEOUT(void)
{
	if (sd_mmc_sam_systick_used) {
   80316:	f640 33aa 	movw	r3, #2986	; 0xbaa
   8031a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8031e:	7819      	ldrb	r1, [r3, #0]
   80320:	b131      	cbz	r1, 80330 <sd_mmc_select_slot+0x5c>
		SysTick->CTRL = 0;
   80322:	f24e 0010 	movw	r0, #57360	; 0xe010
   80326:	f2ce 0000 	movt	r0, #57344	; 0xe000
   8032a:	f04f 0200 	mov.w	r2, #0
   8032e:	6002      	str	r2, [r0, #0]
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
			SD_MMC_STOP_TIMEOUT();
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   80330:	f240 030c 	movw	r3, #12
   80334:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80338:	f04f 0104 	mov.w	r1, #4
   8033c:	7399      	strb	r1, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
   8033e:	f04f 0002 	mov.w	r0, #2
   80342:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
   80344:	f240 020c 	movw	r2, #12
   80348:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8034c:	7b90      	ldrb	r0, [r2, #14]
   8034e:	2804      	cmp	r0, #4
   80350:	d131      	bne.n	803b6 <sd_mmc_select_slot+0xe2>
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
   80352:	f240 010c 	movw	r1, #12
   80356:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8035a:	f04f 0201 	mov.w	r2, #1
   8035e:	738a      	strb	r2, [r1, #14]
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
   80360:	f24e 0310 	movw	r3, #57360	; 0xe010
   80364:	f2ce 0300 	movt	r3, #57344	; 0xe000
   80368:	6818      	ldr	r0, [r3, #0]
   8036a:	b988      	cbnz	r0, 80390 <sd_mmc_select_slot+0xbc>
		sd_mmc_sam_systick_used = true;
   8036c:	f640 30aa 	movw	r0, #2986	; 0xbaa
   80370:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80374:	7002      	strb	r2, [r0, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
   80376:	f24e 0310 	movw	r3, #57360	; 0xe010
   8037a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8037e:	f243 71a0 	movw	r1, #14240	; 0x37a0
   80382:	f2c0 01a0 	movt	r1, #160	; 0xa0
   80386:	6059      	str	r1, [r3, #4]
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
   80388:	601a      	str	r2, [r3, #0]
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
   8038a:	f04f 0002 	mov.w	r0, #2
   8038e:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = true;
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
	} else {
		sd_mmc_sam_systick_used = false;
   80390:	f640 31aa 	movw	r1, #2986	; 0xbaa
   80394:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80398:	f04f 0200 	mov.w	r2, #0
   8039c:	700a      	strb	r2, [r1, #0]
#ifdef FREERTOS_USED
		// Note: the define INCLUDE_vTaskDelay must be set to one
		// in FreeRTOSConfig.h file.
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
   8039e:	f648 5080 	movw	r0, #36224	; 0x8d80
   803a2:	f2c0 005b 	movt	r0, #91	; 0x5b
   803a6:	f240 0301 	movw	r3, #1
   803aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   803ae:	4798      	blx	r3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
   803b0:	f04f 0002 	mov.w	r0, #2
   803b4:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
   803b6:	2801      	cmp	r0, #1
   803b8:	d116      	bne.n	803e8 <sd_mmc_select_slot+0x114>
	}
}

static inline bool SD_MMC_IS_TIMEOUT(void)
{
	if (!sd_mmc_sam_systick_used) {
   803ba:	f640 31aa 	movw	r1, #2986	; 0xbaa
   803be:	f2c2 0107 	movt	r1, #8199	; 0x2007
   803c2:	780b      	ldrb	r3, [r1, #0]
   803c4:	2b00      	cmp	r3, #0
   803c6:	d03a      	beq.n	8043e <sd_mmc_select_slot+0x16a>
		return (xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE);
#else
		return true;
#endif
	}
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
   803c8:	f24e 0210 	movw	r2, #57360	; 0xe010
   803cc:	f2ce 0200 	movt	r2, #57344	; 0xe000
   803d0:	6810      	ldr	r0, [r2, #0]
   803d2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   803d6:	d02c      	beq.n	80432 <sd_mmc_select_slot+0x15e>
		SysTick->CTRL = 0;
   803d8:	f24e 0110 	movw	r1, #57360	; 0xe010
   803dc:	f2ce 0100 	movt	r1, #57344	; 0xe000
   803e0:	f04f 0300 	mov.w	r3, #0
   803e4:	600b      	str	r3, [r1, #0]
   803e6:	e02a      	b.n	8043e <sd_mmc_select_slot+0x16a>
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
   803e8:	f240 000c 	movw	r0, #12
   803ec:	f2c2 0007 	movt	r0, #8199	; 0x2007
   803f0:	7b81      	ldrb	r1, [r0, #14]
   803f2:	2903      	cmp	r1, #3
   803f4:	d020      	beq.n	80438 <sd_mmc_select_slot+0x164>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   803f6:	f640 34b2 	movw	r4, #2994	; 0xbb2
   803fa:	f2c2 0407 	movt	r4, #8199	; 0x2007
   803fe:	f04f 0300 	mov.w	r3, #0
   80402:	7023      	strb	r3, [r4, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   80404:	f240 040c 	movw	r4, #12
   80408:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8040c:	f640 32ac 	movw	r2, #2988	; 0xbac
   80410:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80414:	6014      	str	r4, [r2, #0]
	sd_mmc_configure_slot();
   80416:	f240 10a5 	movw	r0, #421	; 0x1a5
   8041a:	f2c0 0008 	movt	r0, #8
   8041e:	4780      	blx	r0
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   80420:	7ba0      	ldrb	r0, [r4, #14]

	// Initialize interface
	sd_mmc_slot_sel = slot;
	sd_mmc_card = &sd_mmc_cards[slot];
	sd_mmc_configure_slot();
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   80422:	2802      	cmp	r0, #2
   80424:	bf14      	ite	ne
   80426:	2000      	movne	r0, #0
   80428:	2001      	moveq	r0, #1
   8042a:	bd10      	pop	{r4, pc}
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
		return SD_MMC_ERR_SLOT;
   8042c:	f04f 0004 	mov.w	r0, #4
   80430:	bd10      	pop	{r4, pc}
		return SD_MMC_ERR_NO_CARD;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
   80432:	f04f 0002 	mov.w	r0, #2
   80436:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
   80438:	f04f 0003 	mov.w	r0, #3
   8043c:	bd10      	pop	{r4, pc}
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   8043e:	f240 000c 	movw	r0, #12
   80442:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80446:	f04f 0202 	mov.w	r2, #2
   8044a:	7382      	strb	r2, [r0, #14]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   8044c:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   80450:	f2c0 0106 	movt	r1, #6
   80454:	6001      	str	r1, [r0, #0]
		sd_mmc_cards[slot].bus_width = 1;
   80456:	f04f 0301 	mov.w	r3, #1
   8045a:	7443      	strb	r3, [r0, #17]
		sd_mmc_cards[slot].high_speed = 0;
   8045c:	f04f 0200 	mov.w	r2, #0
   80460:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
   80464:	e7c0      	b.n	803e8 <sd_mmc_select_slot+0x114>
   80466:	bf00      	nop

00080468 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   80468:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   8046a:	f240 030c 	movw	r3, #12
   8046e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80472:	f04f 0204 	mov.w	r2, #4
   80476:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   80478:	f640 30b2 	movw	r0, #2994	; 0xbb2
   8047c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80480:	f04f 01ff 	mov.w	r1, #255	; 0xff
   80484:	7001      	strb	r1, [r0, #0]
	driver_init();
   80486:	f644 03cd 	movw	r3, #18637	; 0x48cd
   8048a:	f2c0 0308 	movt	r3, #8
   8048e:	4798      	blx	r3
   80490:	bd08      	pop	{r3, pc}
   80492:	bf00      	nop

00080494 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   80494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80498:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   8049a:	f240 23d5 	movw	r3, #725	; 0x2d5
   8049e:	f2c0 0308 	movt	r3, #8
   804a2:	4798      	blx	r3
   804a4:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   804a6:	2801      	cmp	r0, #1
   804a8:	d006      	beq.n	804b8 <sd_mmc_check+0x24>
		sd_mmc_deselect_slot();
   804aa:	f240 2129 	movw	r1, #553	; 0x229
   804ae:	f2c0 0108 	movt	r1, #8
   804b2:	4788      	blx	r1
		return sd_mmc_err;
   804b4:	f000 bd5d 	b.w	80f72 <sd_mmc_check+0xade>
static bool sd_mmc_mci_card_init(void)
{
	uint8_t v2 = 0;

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   804b8:	f640 30ac 	movw	r0, #2988	; 0xbac
   804bc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   804c0:	6801      	ldr	r1, [r0, #0]
   804c2:	f04f 0201 	mov.w	r2, #1
   804c6:	73ca      	strb	r2, [r1, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   804c8:	f04f 0500 	mov.w	r5, #0
   804cc:	740d      	strb	r5, [r1, #16]
	sd_mmc_card->rca = 0;
   804ce:	818d      	strh	r5, [r1, #12]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   804d0:	f644 1391 	movw	r3, #18833	; 0x4991
   804d4:	f2c0 0308 	movt	r3, #8
   804d8:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
   804da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   804de:	4629      	mov	r1, r5
   804e0:	f644 12b5 	movw	r2, #18869	; 0x49b5
   804e4:	f2c0 0208 	movt	r2, #8
   804e8:	4790      	blx	r2
   804ea:	2800      	cmp	r0, #0
   804ec:	f000 84c1 	beq.w	80e72 <sd_mmc_check+0x9de>
{
	uint32_t resp;

	*v2 = 0;
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   804f0:	f245 5008 	movw	r0, #21768	; 0x5508
   804f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   804f8:	f644 13b5 	movw	r3, #18869	; 0x49b5
   804fc:	f2c0 0308 	movt	r3, #8
   80500:	4798      	blx	r3
   80502:	2800      	cmp	r0, #0
   80504:	f000 84c3 	beq.w	80e8e <sd_mmc_check+0x9fa>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
	}
	// Check R7 response
	resp = driver_get_response();
   80508:	f644 10dd 	movw	r0, #18909	; 0x49dd
   8050c:	f2c0 0008 	movt	r0, #8
   80510:	4780      	blx	r0
	if (resp == 0xFFFFFFFF) {
   80512:	f1b0 3fff 	cmp.w	r0, #4294967295
   80516:	f000 84bd 	beq.w	80e94 <sd_mmc_check+0xa00>
		// No compliance R7 value
		return true; // It is not a V2
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   8051a:	ea4f 5100 	mov.w	r1, r0, lsl #20
   8051e:	ea4f 5211 	mov.w	r2, r1, lsr #20
   80522:	f5b2 7fd5 	cmp.w	r2, #426	; 0x1aa
   80526:	f040 84a4 	bne.w	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   8052a:	f04f 0601 	mov.w	r6, #1
   8052e:	f000 bcb3 	b.w	80e98 <sd_mmc_check+0xa04>
	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
		sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
		return true; // No error but card type not updated
	}
	resp = driver_get_response();
   80532:	f644 10dd 	movw	r0, #18909	; 0x49dd
   80536:	f2c0 0008 	movt	r0, #8
   8053a:	4780      	blx	r0
   8053c:	4601      	mov	r1, r0
	if ((resp & OCR_SDIO_NF) == 0) {
   8053e:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
   80542:	f000 84b5 	beq.w	80eb0 <sd_mmc_check+0xa1c>
   80546:	f241 3989 	movw	r9, #5001	; 0x1389
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   8054a:	f244 5705 	movw	r7, #17669	; 0x4505
   8054e:	f644 15b5 	movw	r5, #18869	; 0x49b5
   80552:	f2c0 0508 	movt	r5, #8
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80556:	f644 18dd 	movw	r8, #18909	; 0x49dd
   8055a:	f2c0 0808 	movt	r8, #8
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   8055e:	4638      	mov	r0, r7
   80560:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   80564:	47a8      	blx	r5
   80566:	2800      	cmp	r0, #0
   80568:	f000 8483 	beq.w	80e72 <sd_mmc_check+0x9de>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   8056c:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   8056e:	1e01      	subs	r1, r0, #0
   80570:	db0a      	blt.n	80588 <sd_mmc_check+0xf4>
   80572:	f109 39ff 	add.w	r9, r9, #4294967295
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   80576:	4638      	mov	r0, r7
   80578:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   8057c:	47a8      	blx	r5
   8057e:	2800      	cmp	r0, #0
   80580:	f040 8539 	bne.w	80ff6 <sd_mmc_check+0xb62>
   80584:	f000 bc75 	b.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD5 Timeout on busy\n\r", __func__);
			return false;
		}
	}
	// Update card type at the end of busy
	if ((resp & OCR_SDIO_MP) > 0) {
   80588:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
   8058c:	f640 33ac 	movw	r3, #2988	; 0xbac
   80590:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80594:	6818      	ldr	r0, [r3, #0]
   80596:	bf14      	ite	ne
   80598:	2205      	movne	r2, #5
	} else {
		sd_mmc_card->type = CARD_TYPE_SDIO;
   8059a:	2204      	moveq	r2, #4
   8059c:	73c2      	strb	r2, [r0, #15]
   8059e:	f000 bc87 	b.w	80eb0 <sd_mmc_check+0xa1c>
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   805a2:	f241 1737 	movw	r7, #4407	; 0x1137
   805a6:	f04f 0800 	mov.w	r8, #0
   805aa:	f644 15b5 	movw	r5, #18869	; 0x49b5
   805ae:	f2c0 0508 	movt	r5, #8
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   805b2:	f44f 4900 	mov.w	r9, #32768	; 0x8000
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   805b6:	f644 1add 	movw	sl, #18909	; 0x49dd
   805ba:	f2c0 0a08 	movt	sl, #8
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   805be:	4638      	mov	r0, r7
   805c0:	4641      	mov	r1, r8
   805c2:	47a8      	blx	r5
   805c4:	2800      	cmp	r0, #0
   805c6:	f040 84ea 	bne.w	80f9e <sd_mmc_check+0xb0a>
   805ca:	f000 bc7d 	b.w	80ec8 <sd_mmc_check+0xa34>
   805ce:	4638      	mov	r0, r7
   805d0:	4641      	mov	r1, r8
   805d2:	47a8      	blx	r5
   805d4:	2800      	cmp	r0, #0
   805d6:	f000 8477 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   805da:	4649      	mov	r1, r9
   805dc:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   805e0:	f244 5029 	movw	r0, #17705	; 0x4529
   805e4:	2e00      	cmp	r6, #0
   805e6:	bf08      	it	eq
   805e8:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   805ec:	47a8      	blx	r5
   805ee:	2800      	cmp	r0, #0
   805f0:	f000 846a 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   805f4:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   805f6:	2800      	cmp	r0, #0
   805f8:	da0e      	bge.n	80618 <sd_mmc_check+0x184>
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
   805fa:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   805fe:	f000 848f 	beq.w	80f20 <sd_mmc_check+0xa8c>
				sd_mmc_card->type |= CARD_TYPE_HC;
   80602:	f640 30ac 	movw	r0, #2988	; 0xbac
   80606:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8060a:	6801      	ldr	r1, [r0, #0]
   8060c:	7bca      	ldrb	r2, [r1, #15]
   8060e:	f042 0308 	orr.w	r3, r2, #8
   80612:	73cb      	strb	r3, [r1, #15]
   80614:	f000 bc84 	b.w	80f20 <sd_mmc_check+0xa8c>
   80618:	f10b 3bff 	add.w	fp, fp, #4294967295
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   8061c:	4638      	mov	r0, r7
   8061e:	4641      	mov	r1, r8
   80620:	47a8      	blx	r5
   80622:	2800      	cmp	r0, #0
   80624:	f040 84d1 	bne.w	80fca <sd_mmc_check+0xb36>
   80628:	f000 bc4e 	b.w	80ec8 <sd_mmc_check+0xa34>
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   8062c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   80630:	f2c4 051f 	movt	r5, #16415	; 0x401f
   80634:	f244 5701 	movw	r7, #17665	; 0x4501
   80638:	f644 18b5 	movw	r8, #18869	; 0x49b5
   8063c:	f2c0 0808 	movt	r8, #8
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80640:	f644 19dd 	movw	r9, #18909	; 0x49dd
   80644:	f2c0 0908 	movt	r9, #8
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   80648:	4638      	mov	r0, r7
   8064a:	4629      	mov	r1, r5
   8064c:	47c0      	blx	r8
   8064e:	2800      	cmp	r0, #0
   80650:	f040 8493 	bne.w	80f7a <sd_mmc_check+0xae6>
   80654:	f000 bc79 	b.w	80f4a <sd_mmc_check+0xab6>
   80658:	4638      	mov	r0, r7
   8065a:	4629      	mov	r1, r5
   8065c:	47c0      	blx	r8
   8065e:	2800      	cmp	r0, #0
   80660:	f000 8473 	beq.w	80f4a <sd_mmc_check+0xab6>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80664:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80666:	2800      	cmp	r0, #0
   80668:	da0d      	bge.n	80686 <sd_mmc_check+0x1f2>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
   8066a:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
   8066e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   80672:	f040 8460 	bne.w	80f36 <sd_mmc_check+0xaa2>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
   80676:	49a6      	ldr	r1, [pc, #664]	; (80910 <sd_mmc_check+0x47c>)
   80678:	680b      	ldr	r3, [r1, #0]
   8067a:	7bda      	ldrb	r2, [r3, #15]
   8067c:	f042 0008 	orr.w	r0, r2, #8
   80680:	73d8      	strb	r0, [r3, #15]
   80682:	f000 bc58 	b.w	80f36 <sd_mmc_check+0xaa2>
   80686:	f106 36ff 	add.w	r6, r6, #4294967295
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   8068a:	4638      	mov	r0, r7
   8068c:	4629      	mov	r1, r5
   8068e:	47c0      	blx	r8
   80690:	2800      	cmp	r0, #0
   80692:	f040 847c 	bne.w	80f8e <sd_mmc_check+0xafa>
   80696:	f000 bc58 	b.w	80f4a <sd_mmc_check+0xab6>
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
		return false;
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
   8069a:	499d      	ldr	r1, [pc, #628]	; (80910 <sd_mmc_check+0x47c>)
   8069c:	6808      	ldr	r0, [r1, #0]
   8069e:	f04f 0201 	mov.w	r2, #1
   806a2:	8182      	strh	r2, [r0, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
   806a4:	f241 1003 	movw	r0, #4355	; 0x1103
   806a8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   806ac:	4b99      	ldr	r3, [pc, #612]	; (80914 <sd_mmc_check+0x480>)
   806ae:	4798      	blx	r3
   806b0:	2800      	cmp	r0, #0
   806b2:	f000 8121 	beq.w	808f8 <sd_mmc_check+0x464>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
   806b6:	4998      	ldr	r1, [pc, #608]	; (80918 <sd_mmc_check+0x484>)
   806b8:	4788      	blx	r1
   806ba:	2800      	cmp	r0, #0
   806bc:	f000 811f 	beq.w	808fe <sd_mmc_check+0x46a>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   806c0:	4893      	ldr	r0, [pc, #588]	; (80910 <sd_mmc_check+0x47c>)
   806c2:	6803      	ldr	r3, [r0, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   806c4:	7c9a      	ldrb	r2, [r3, #18]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   806c6:	f3c2 0183 	ubfx	r1, r2, #2, #4
   806ca:	f101 30ff 	add.w	r0, r1, #4294967295
   806ce:	2803      	cmp	r0, #3
   806d0:	d803      	bhi.n	806da <sd_mmc_check+0x246>
   806d2:	e8df f000 	tbb	[pc, r0]
   806d6:	0a06      	.short	0x0a06
   806d8:	120e      	.short	0x120e
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   806da:	f04f 0112 	mov.w	r1, #18
   806de:	7419      	strb	r1, [r3, #16]
   806e0:	e00e      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   806e2:	f04f 0214 	mov.w	r2, #20
   806e6:	741a      	strb	r2, [r3, #16]
   806e8:	e00a      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   806ea:	f04f 0022 	mov.w	r0, #34	; 0x22
   806ee:	7418      	strb	r0, [r3, #16]
   806f0:	e006      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   806f2:	f04f 0130 	mov.w	r1, #48	; 0x30
   806f6:	7419      	strb	r1, [r3, #16]
   806f8:	e002      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   806fa:	f04f 0240 	mov.w	r2, #64	; 0x40
   806fe:	741a      	strb	r2, [r3, #16]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80700:	7d5a      	ldrb	r2, [r3, #21]
		break;
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   80702:	f002 0007 	and.w	r0, r2, #7
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80706:	4985      	ldr	r1, [pc, #532]	; (8091c <sd_mmc_check+0x488>)
   80708:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   8070c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80710:	fb00 f101 	mul.w	r1, r0, r1
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   80714:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   80718:	4881      	ldr	r0, [pc, #516]	; (80920 <sd_mmc_check+0x48c>)
   8071a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   8071e:	fb02 f101 	mul.w	r1, r2, r1
   80722:	6019      	str	r1, [r3, #0]
   80724:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80726:	7e18      	ldrb	r0, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80728:	7e5a      	ldrb	r2, [r3, #25]
   8072a:	ea4f 0282 	mov.w	r2, r2, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   8072e:	ea42 2080 	orr.w	r0, r2, r0, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80732:	ea40 11a1 	orr.w	r1, r0, r1, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
   80736:	ea4f 5201 	mov.w	r2, r1, lsl #20
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   8073a:	ea4f 5112 	mov.w	r1, r2, lsr #20
   8073e:	f512 1f80 	cmn.w	r2, #1048576	; 0x100000
   80742:	d015      	beq.n	80770 <sd_mmc_check+0x2dc>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80744:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80746:	7eda      	ldrb	r2, [r3, #27]
   80748:	ea4f 0242 	mov.w	r2, r2, lsl #1
   8074c:	ea42 10e0 	orr.w	r0, r2, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   80750:	f101 0101 	add.w	r1, r1, #1
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80754:	f000 0207 	and.w	r2, r0, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   80758:	f102 0202 	add.w	r2, r2, #2
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   8075c:	fa01 f102 	lsl.w	r1, r1, r2
   80760:	7dd8      	ldrb	r0, [r3, #23]
   80762:	f000 020f 	and.w	r2, r0, #15
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80766:	fa01 f102 	lsl.w	r1, r1, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   8076a:	ea4f 2091 	mov.w	r0, r1, lsr #10
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   8076e:	6058      	str	r0, [r3, #4]
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
   80770:	899b      	ldrh	r3, [r3, #12]
	if (!sd_mmc_cmd9_mci()) {
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
   80772:	f243 1007 	movw	r0, #12551	; 0x3107
   80776:	ea4f 4103 	mov.w	r1, r3, lsl #16
   8077a:	4a66      	ldr	r2, [pc, #408]	; (80914 <sd_mmc_check+0x480>)
   8077c:	4790      	blx	r2
   8077e:	2800      	cmp	r0, #0
   80780:	f000 80c0 	beq.w	80904 <sd_mmc_check+0x470>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   80784:	4d62      	ldr	r5, [pc, #392]	; (80910 <sd_mmc_check+0x47c>)
   80786:	6829      	ldr	r1, [r5, #0]
   80788:	7c08      	ldrb	r0, [r1, #16]
   8078a:	283f      	cmp	r0, #63	; 0x3f
   8078c:	f240 809c 	bls.w	808c8 <sd_mmc_check+0x434>
{
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   80790:	f04f 0100 	mov.w	r1, #0
   80794:	9100      	str	r1, [sp, #0]
   80796:	f241 1008 	movw	r0, #4360	; 0x1108
   8079a:	f2c0 0008 	movt	r0, #8
   8079e:	f44f 7200 	mov.w	r2, #512	; 0x200
   807a2:	f04f 0301 	mov.w	r3, #1
   807a6:	4d5f      	ldr	r5, [pc, #380]	; (80924 <sd_mmc_check+0x490>)
   807a8:	47a8      	blx	r5
   807aa:	2800      	cmp	r0, #0
   807ac:	f000 83d0 	beq.w	80f50 <sd_mmc_check+0xabc>
   807b0:	f04f 0500 	mov.w	r5, #0
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
		if (!driver_read_word(&ext_csd)) {
   807b4:	4e5c      	ldr	r6, [pc, #368]	; (80928 <sd_mmc_check+0x494>)
   807b6:	a802      	add	r0, sp, #8
   807b8:	47b0      	blx	r6
   807ba:	2800      	cmp	r0, #0
   807bc:	f000 83c8 	beq.w	80f50 <sd_mmc_check+0xabc>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   807c0:	f105 0501 	add.w	r5, r5, #1
   807c4:	b2ad      	uxth	r5, r5
   807c6:	2d32      	cmp	r5, #50	; 0x32
   807c8:	d1f5      	bne.n	807b6 <sd_mmc_check+0x322>
		if (!driver_read_word(&ext_csd)) {
			return false;
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   807ca:	9e02      	ldr	r6, [sp, #8]
   807cc:	f006 0302 	and.w	r3, r6, #2
   807d0:	b2de      	uxtb	r6, r3
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   807d2:	4a4f      	ldr	r2, [pc, #316]	; (80910 <sd_mmc_check+0x47c>)
   807d4:	6810      	ldr	r0, [r2, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   807d6:	7e87      	ldrb	r7, [r0, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807d8:	7e01      	ldrb	r1, [r0, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   807da:	7e43      	ldrb	r3, [r0, #25]
   807dc:	ea4f 0283 	mov.w	r2, r3, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807e0:	ea42 2081 	orr.w	r0, r2, r1, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807e4:	ea40 17a7 	orr.w	r7, r0, r7, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
   807e8:	ea4f 5107 	mov.w	r1, r7, lsl #20
   807ec:	f511 1f80 	cmn.w	r1, #1048576	; 0x100000
   807f0:	d11a      	bne.n	80828 <sd_mmc_check+0x394>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
			if (!driver_read_word(&sec_count)) {
   807f2:	4f4d      	ldr	r7, [pc, #308]	; (80928 <sd_mmc_check+0x494>)
   807f4:	a803      	add	r0, sp, #12
   807f6:	47b8      	blx	r7
   807f8:	2800      	cmp	r0, #0
   807fa:	f000 83a9 	beq.w	80f50 <sd_mmc_check+0xabc>
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   807fe:	f105 0501 	add.w	r5, r5, #1
   80802:	b2ad      	uxth	r5, r5
   80804:	2d35      	cmp	r5, #53	; 0x35
   80806:	d9f5      	bls.n	807f4 <sd_mmc_check+0x360>
			if (!driver_read_word(&sec_count)) {
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   80808:	4b41      	ldr	r3, [pc, #260]	; (80910 <sd_mmc_check+0x47c>)
   8080a:	681a      	ldr	r2, [r3, #0]
   8080c:	9803      	ldr	r0, [sp, #12]
   8080e:	ea4f 0750 	mov.w	r7, r0, lsr #1
   80812:	6057      	str	r7, [r2, #4]
   80814:	e008      	b.n	80828 <sd_mmc_check+0x394>
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
		if (!driver_read_word(&sec_count)) {
   80816:	a803      	add	r0, sp, #12
   80818:	47b8      	blx	r7
   8081a:	2800      	cmp	r0, #0
   8081c:	f000 8398 	beq.w	80f50 <sd_mmc_check+0xabc>
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   80820:	f105 0501 	add.w	r5, r5, #1
   80824:	b2ad      	uxth	r5, r5
   80826:	e000      	b.n	8082a <sd_mmc_check+0x396>
		if (!driver_read_word(&sec_count)) {
   80828:	4f3f      	ldr	r7, [pc, #252]	; (80928 <sd_mmc_check+0x494>)
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   8082a:	2d7f      	cmp	r5, #127	; 0x7f
   8082c:	d9f3      	bls.n	80816 <sd_mmc_check+0x382>
   8082e:	e392      	b.n	80f56 <sd_mmc_check+0xac2>
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
   80830:	4d3e      	ldr	r5, [pc, #248]	; (8092c <sd_mmc_check+0x498>)
   80832:	7828      	ldrb	r0, [r5, #0]
   80834:	4a3e      	ldr	r2, [pc, #248]	; (80930 <sd_mmc_check+0x49c>)
   80836:	4790      	blx	r2
   80838:	4605      	mov	r5, r0
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
	uint32_t arg;

	switch (bus_width) {
   8083a:	2804      	cmp	r0, #4
   8083c:	d00b      	beq.n	80856 <sd_mmc_check+0x3c2>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
   8083e:	f44f 7100 	mov.w	r1, #512	; 0x200
   80842:	f2c0 11b7 	movt	r1, #439	; 0x1b7
   80846:	f04f 0000 	mov.w	r0, #0
   8084a:	f2c0 10b7 	movt	r0, #439	; 0x1b7
   8084e:	2d08      	cmp	r5, #8
   80850:	bf18      	it	ne
   80852:	4601      	movne	r1, r0
   80854:	e003      	b.n	8085e <sd_mmc_check+0x3ca>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
   80856:	f44f 7180 	mov.w	r1, #256	; 0x100
   8085a:	f2c0 11b7 	movt	r1, #439	; 0x1b7
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
   8085e:	f243 1006 	movw	r0, #12550	; 0x3106
   80862:	4b2c      	ldr	r3, [pc, #176]	; (80914 <sd_mmc_check+0x480>)
   80864:	4798      	blx	r3
   80866:	2800      	cmp	r0, #0
   80868:	f000 837d 	beq.w	80f66 <sd_mmc_check+0xad2>
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   8086c:	4931      	ldr	r1, [pc, #196]	; (80934 <sd_mmc_check+0x4a0>)
   8086e:	4788      	blx	r1
   80870:	f010 0f80 	tst.w	r0, #128	; 0x80
   80874:	f040 8377 	bne.w	80f66 <sd_mmc_check+0xad2>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->bus_width = bus_width;
   80878:	4a25      	ldr	r2, [pc, #148]	; (80910 <sd_mmc_check+0x47c>)
   8087a:	6810      	ldr	r0, [r2, #0]
   8087c:	7445      	strb	r5, [r0, #17]
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
   8087e:	4b2e      	ldr	r3, [pc, #184]	; (80938 <sd_mmc_check+0x4a4>)
   80880:	4798      	blx	r3
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
   80882:	492e      	ldr	r1, [pc, #184]	; (8093c <sd_mmc_check+0x4a8>)
   80884:	4788      	blx	r1
   80886:	b338      	cbz	r0, 808d8 <sd_mmc_check+0x444>
   80888:	b336      	cbz	r6, 808d8 <sd_mmc_check+0x444>
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
   8088a:	f243 1006 	movw	r0, #12550	; 0x3106
   8088e:	f44f 7180 	mov.w	r1, #256	; 0x100
   80892:	f2c0 31b9 	movt	r1, #953	; 0x3b9
   80896:	4a1f      	ldr	r2, [pc, #124]	; (80914 <sd_mmc_check+0x480>)
   80898:	4790      	blx	r2
   8089a:	2800      	cmp	r0, #0
   8089c:	f000 8366 	beq.w	80f6c <sd_mmc_check+0xad8>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   808a0:	4824      	ldr	r0, [pc, #144]	; (80934 <sd_mmc_check+0x4a0>)
   808a2:	4780      	blx	r0
   808a4:	f010 0f80 	tst.w	r0, #128	; 0x80
   808a8:	f040 8360 	bne.w	80f6c <sd_mmc_check+0xad8>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->high_speed = 1;
   808ac:	4e18      	ldr	r6, [pc, #96]	; (80910 <sd_mmc_check+0x47c>)
   808ae:	6837      	ldr	r7, [r6, #0]
   808b0:	f04f 0501 	mov.w	r5, #1
   808b4:	f887 5022 	strb.w	r5, [r7, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
   808b8:	f44f 43ea 	mov.w	r3, #29952	; 0x7500
   808bc:	f2c0 3319 	movt	r3, #793	; 0x319
   808c0:	603b      	str	r3, [r7, #0]
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
   808c2:	491d      	ldr	r1, [pc, #116]	; (80938 <sd_mmc_check+0x4a4>)
   808c4:	4788      	blx	r1
   808c6:	e007      	b.n	808d8 <sd_mmc_check+0x444>
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
   808c8:	4f1b      	ldr	r7, [pc, #108]	; (80938 <sd_mmc_check+0x4a4>)
   808ca:	47b8      	blx	r7
   808cc:	e004      	b.n	808d8 <sd_mmc_check+0x444>
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   808ce:	4640      	mov	r0, r8
   808d0:	4639      	mov	r1, r7
   808d2:	47b0      	blx	r6
   808d4:	b140      	cbz	r0, 808e8 <sd_mmc_check+0x454>
   808d6:	e018      	b.n	8090a <sd_mmc_check+0x476>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
   808d8:	f04f 050a 	mov.w	r5, #10
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   808dc:	f241 1810 	movw	r8, #4368	; 0x1110
   808e0:	f44f 7700 	mov.w	r7, #512	; 0x200
   808e4:	4e0b      	ldr	r6, [pc, #44]	; (80914 <sd_mmc_check+0x480>)
   808e6:	e7f2      	b.n	808ce <sd_mmc_check+0x43a>
   808e8:	f105 32ff 	add.w	r2, r5, #4294967295
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
	}

	uint8_t retry = 10;
	while (retry--) {
   808ec:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
   808f0:	d1ed      	bne.n	808ce <sd_mmc_check+0x43a>
		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return true;
		}
	}
	return false;
   808f2:	f04f 0000 	mov.w	r0, #0
   808f6:	e2ad      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   808f8:	f04f 0000 	mov.w	r0, #0
   808fc:	e2aa      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
		return false;
   808fe:	f04f 0000 	mov.w	r0, #0
   80902:	e2a7      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   80904:	f04f 0000 	mov.w	r0, #0
   80908:	e2a4      	b.n	80e54 <sd_mmc_check+0x9c0>
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return true;
   8090a:	f04f 0001 	mov.w	r0, #1
   8090e:	e2a1      	b.n	80e54 <sd_mmc_check+0x9c0>
   80910:	20070bac 	.word	0x20070bac
   80914:	000849b5 	.word	0x000849b5
   80918:	0008028d 	.word	0x0008028d
   8091c:	0008ea1c 	.word	0x0008ea1c
   80920:	0008ea38 	.word	0x0008ea38
   80924:	00084a45 	.word	0x00084a45
   80928:	00084b1d 	.word	0x00084b1d
   8092c:	20070bb2 	.word	0x20070bb2
   80930:	00084905 	.word	0x00084905
   80934:	000849dd 	.word	0x000849dd
   80938:	000801a5 	.word	0x000801a5
   8093c:	00084911 	.word	0x00084911
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
   80940:	f645 3002 	movw	r0, #23298	; 0x5b02
   80944:	f04f 0100 	mov.w	r1, #0
   80948:	f644 13b5 	movw	r3, #18869	; 0x49b5
   8094c:	f2c0 0308 	movt	r3, #8
   80950:	4798      	blx	r3
   80952:	2800      	cmp	r0, #0
   80954:	f000 828d 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
   80958:	f245 1003 	movw	r0, #20739	; 0x5103
   8095c:	f04f 0100 	mov.w	r1, #0
   80960:	f644 12b5 	movw	r2, #18869	; 0x49b5
   80964:	f2c0 0208 	movt	r2, #8
   80968:	4790      	blx	r2
   8096a:	2800      	cmp	r0, #0
   8096c:	f000 8281 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
   80970:	f640 35ac 	movw	r5, #2988	; 0xbac
   80974:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80978:	682e      	ldr	r6, [r5, #0]
   8097a:	f644 10dd 	movw	r0, #18909	; 0x49dd
   8097e:	f2c0 0008 	movt	r0, #8
   80982:	4780      	blx	r0
   80984:	ea4f 4110 	mov.w	r1, r0, lsr #16
   80988:	81b1      	strh	r1, [r6, #12]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   8098a:	682b      	ldr	r3, [r5, #0]
   8098c:	7bda      	ldrb	r2, [r3, #15]
   8098e:	f012 0f01 	tst.w	r2, #1
   80992:	d056      	beq.n	80a42 <sd_mmc_check+0x5ae>
		if (!sd_mmc_cmd9_mci()) {
   80994:	f240 208d 	movw	r0, #653	; 0x28d
   80998:	f2c0 0008 	movt	r0, #8
   8099c:	4780      	blx	r0
   8099e:	2800      	cmp	r0, #0
   809a0:	f000 8267 	beq.w	80e72 <sd_mmc_check+0x9de>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   809a4:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   809a6:	7d5a      	ldrb	r2, [r3, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   809a8:	f002 0007 	and.w	r0, r2, #7
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   809ac:	f64e 211c 	movw	r1, #59932	; 0xea1c
   809b0:	f2c0 0108 	movt	r1, #8
   809b4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   809b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   809bc:	fb00 f101 	mul.w	r1, r0, r1
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   809c0:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   809c4:	f64e 10dc 	movw	r0, #59868	; 0xe9dc
   809c8:	f2c0 0008 	movt	r0, #8
   809cc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   809d0:	fb02 f101 	mul.w	r1, r2, r1
   809d4:	6019      	str	r1, [r3, #0]
   809d6:	7c98      	ldrb	r0, [r3, #18]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   809d8:	0982      	lsrs	r2, r0, #6
   809da:	d00f      	beq.n	809fc <sd_mmc_check+0x568>
   809dc:	7eda      	ldrb	r2, [r3, #27]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   809de:	7e98      	ldrb	r0, [r3, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   809e0:	7e59      	ldrb	r1, [r3, #25]
   809e2:	ea4f 4101 	mov.w	r1, r1, lsl #16
   809e6:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   809ea:	4302      	orrs	r2, r0
   809ec:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
   809f0:	f101 0101 	add.w	r1, r1, #1
   809f4:	ea4f 2041 	mov.w	r0, r1, lsl #9
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
   809f8:	6058      	str	r0, [r3, #4]
   809fa:	e022      	b.n	80a42 <sd_mmc_check+0x5ae>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   809fc:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   809fe:	7e18      	ldrb	r0, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80a00:	7e5a      	ldrb	r2, [r3, #25]
   80a02:	ea4f 0282 	mov.w	r2, r2, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80a06:	ea42 2080 	orr.w	r0, r2, r0, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80a0a:	ea40 12a1 	orr.w	r2, r0, r1, asr #6
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80a0e:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80a10:	7ed9      	ldrb	r1, [r3, #27]
   80a12:	ea4f 0141 	mov.w	r1, r1, lsl #1
   80a16:	ea41 10e0 	orr.w	r0, r1, r0, asr #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80a1a:	ea4f 5202 	mov.w	r2, r2, lsl #20
   80a1e:	ea4f 5212 	mov.w	r2, r2, lsr #20
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   80a22:	f102 0201 	add.w	r2, r2, #1
   80a26:	f000 0107 	and.w	r1, r0, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   80a2a:	f101 0102 	add.w	r1, r1, #2
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   80a2e:	fa02 f001 	lsl.w	r0, r2, r1
   80a32:	7dda      	ldrb	r2, [r3, #23]
   80a34:	f002 010f 	and.w	r1, r2, #15
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80a38:	fa00 f001 	lsl.w	r0, r0, r1
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
   80a3c:	ea4f 2290 	mov.w	r2, r0, lsr #10
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80a40:	605a      	str	r2, [r3, #4]
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
   80a42:	f640 33ac 	movw	r3, #2988	; 0xbac
   80a46:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80a4a:	681a      	ldr	r2, [r3, #0]
   80a4c:	8991      	ldrh	r1, [r2, #12]
			return false;
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
   80a4e:	f243 1007 	movw	r0, #12551	; 0x3107
   80a52:	ea4f 4101 	mov.w	r1, r1, lsl #16
   80a56:	f644 13b5 	movw	r3, #18869	; 0x49b5
   80a5a:	f2c0 0308 	movt	r3, #8
   80a5e:	4798      	blx	r3
   80a60:	2800      	cmp	r0, #0
   80a62:	f000 8206 	beq.w	80e72 <sd_mmc_check+0x9de>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80a66:	f640 30ac 	movw	r0, #2988	; 0xbac
   80a6a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80a6e:	6801      	ldr	r1, [r0, #0]
   80a70:	7bca      	ldrb	r2, [r1, #15]
   80a72:	f012 0f01 	tst.w	r2, #1
   80a76:	d04e      	beq.n	80b16 <sd_mmc_check+0x682>
{
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   80a78:	898b      	ldrh	r3, [r1, #12]
   80a7a:	f241 1037 	movw	r0, #4407	; 0x1137
   80a7e:	ea4f 4103 	mov.w	r1, r3, lsl #16
   80a82:	f644 12b5 	movw	r2, #18869	; 0x49b5
   80a86:	f2c0 0208 	movt	r2, #8
   80a8a:	4790      	blx	r2
   80a8c:	2800      	cmp	r0, #0
   80a8e:	f000 81f0 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   80a92:	f04f 0301 	mov.w	r3, #1
   80a96:	9300      	str	r3, [sp, #0]
   80a98:	f241 1033 	movw	r0, #4403	; 0x1133
   80a9c:	f2c0 0008 	movt	r0, #8
   80aa0:	f04f 0100 	mov.w	r1, #0
   80aa4:	f04f 0208 	mov.w	r2, #8
   80aa8:	4d4c      	ldr	r5, [pc, #304]	; (80bdc <sd_mmc_check+0x748>)
   80aaa:	47a8      	blx	r5
   80aac:	2800      	cmp	r0, #0
   80aae:	f000 81e0 	beq.w	80e72 <sd_mmc_check+0x9de>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(scr, 1)) {
   80ab2:	a804      	add	r0, sp, #16
   80ab4:	f04f 0101 	mov.w	r1, #1
   80ab8:	4b49      	ldr	r3, [pc, #292]	; (80be0 <sd_mmc_check+0x74c>)
   80aba:	4798      	blx	r3
   80abc:	2800      	cmp	r0, #0
   80abe:	f000 81d8 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80ac2:	4848      	ldr	r0, [pc, #288]	; (80be4 <sd_mmc_check+0x750>)
   80ac4:	4780      	blx	r0
   80ac6:	2800      	cmp	r0, #0
   80ac8:	f000 81d3 	beq.w	80e72 <sd_mmc_check+0x9de>
   80acc:	f89d 1010 	ldrb.w	r1, [sp, #16]
		return false;
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   80ad0:	f001 030f 	and.w	r3, r1, #15
   80ad4:	2b01      	cmp	r3, #1
   80ad6:	d009      	beq.n	80aec <sd_mmc_check+0x658>
   80ad8:	b113      	cbz	r3, 80ae0 <sd_mmc_check+0x64c>
   80ada:	2b02      	cmp	r3, #2
   80adc:	d116      	bne.n	80b0c <sd_mmc_check+0x678>
   80ade:	e00b      	b.n	80af8 <sd_mmc_check+0x664>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   80ae0:	4a41      	ldr	r2, [pc, #260]	; (80be8 <sd_mmc_check+0x754>)
   80ae2:	6813      	ldr	r3, [r2, #0]
   80ae4:	f04f 0010 	mov.w	r0, #16
   80ae8:	7418      	strb	r0, [r3, #16]
   80aea:	e014      	b.n	80b16 <sd_mmc_check+0x682>
		break;

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   80aec:	493e      	ldr	r1, [pc, #248]	; (80be8 <sd_mmc_check+0x754>)
   80aee:	680b      	ldr	r3, [r1, #0]
   80af0:	f04f 021a 	mov.w	r2, #26
   80af4:	741a      	strb	r2, [r3, #16]
   80af6:	e00e      	b.n	80b16 <sd_mmc_check+0x682>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80af8:	f89d 3012 	ldrb.w	r3, [sp, #18]
		break;

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   80afc:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
   80afe:	483a      	ldr	r0, [pc, #232]	; (80be8 <sd_mmc_check+0x754>)
   80b00:	6801      	ldr	r1, [r0, #0]
   80b02:	bf14      	ite	ne
   80b04:	2230      	movne	r2, #48	; 0x30
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
   80b06:	2220      	moveq	r2, #32
   80b08:	740a      	strb	r2, [r1, #16]
   80b0a:	e004      	b.n	80b16 <sd_mmc_check+0x682>
		}
		break;

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   80b0c:	4a36      	ldr	r2, [pc, #216]	; (80be8 <sd_mmc_check+0x754>)
   80b0e:	6810      	ldr	r0, [r2, #0]
   80b10:	f04f 0110 	mov.w	r1, #16
   80b14:	7401      	strb	r1, [r0, #16]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
		if (!sd_acmd51()) {
			return false;
		}
	}
	if (IS_SDIO()) {
   80b16:	f640 30ac 	movw	r0, #2988	; 0xbac
   80b1a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80b1e:	6801      	ldr	r1, [r0, #0]
   80b20:	7bcb      	ldrb	r3, [r1, #15]
   80b22:	f003 0204 	and.w	r2, r3, #4
   80b26:	b2d0      	uxtb	r0, r2
   80b28:	2800      	cmp	r0, #0
   80b2a:	f000 8095 	beq.w	80c58 <sd_mmc_check+0x7c4>
 	uint32_t unit;
	uint32_t mul;
	uint8_t tplfe_max_tran_speed;

	// Read CIS area address in CCCR area
	addr_cis = 0; // Init all bytes, because the next function fill 3 bytes only
   80b2e:	f04f 0100 	mov.w	r1, #0
   80b32:	9103      	str	r1, [sp, #12]
	if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, SDIO_CCCR_CIS_PTR,
   80b34:	f04f 0503 	mov.w	r5, #3
   80b38:	9500      	str	r5, [sp, #0]
   80b3a:	f04f 0301 	mov.w	r3, #1
   80b3e:	9301      	str	r3, [sp, #4]
   80b40:	4608      	mov	r0, r1
   80b42:	f04f 0209 	mov.w	r2, #9
   80b46:	f240 15d5 	movw	r5, #469	; 0x1d5
   80b4a:	f2c0 0508 	movt	r5, #8
   80b4e:	47a8      	blx	r5
   80b50:	2800      	cmp	r0, #0
   80b52:	f000 818e 	beq.w	80e72 <sd_mmc_check+0x9de>
			1, 3, true)) {
		sd_mmc_debug("%s: CMD53 Read CIS Fail\n\r", __func__);
		return false;
	}
	if (!driver_start_read_blocks((uint8_t *)&addr_cis, 1)) {
   80b56:	a803      	add	r0, sp, #12
   80b58:	f04f 0101 	mov.w	r1, #1
   80b5c:	4b20      	ldr	r3, [pc, #128]	; (80be0 <sd_mmc_check+0x74c>)
   80b5e:	4798      	blx	r3
   80b60:	2800      	cmp	r0, #0
   80b62:	f000 8186 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80b66:	491f      	ldr	r1, [pc, #124]	; (80be4 <sd_mmc_check+0x750>)
   80b68:	4788      	blx	r1
   80b6a:	2800      	cmp	r0, #0
   80b6c:	f000 8181 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	addr_cis = le32_to_cpu(addr_cis);
   80b70:	9d03      	ldr	r5, [sp, #12]

	// Search Fun0 tuple in the CIA area
	addr = addr_cis;
	while (1) {
		// Read a sample of CIA area
		if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 3, true)) {
   80b72:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80bec <sd_mmc_check+0x758>
			sd_mmc_debug("%s: CMD53 Read CIA Fail\n\r", __func__);
			return false;
		}
		if (!driver_start_read_blocks(buf, 1)) {
   80b76:	4f1a      	ldr	r7, [pc, #104]	; (80be0 <sd_mmc_check+0x74c>)
			return false;
		}
		if (!driver_wait_end_of_read_blocks()) {
   80b78:	4e1a      	ldr	r6, [pc, #104]	; (80be4 <sd_mmc_check+0x750>)

	// Search Fun0 tuple in the CIA area
	addr = addr_cis;
	while (1) {
		// Read a sample of CIA area
		if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 3, true)) {
   80b7a:	f04f 0203 	mov.w	r2, #3
   80b7e:	9200      	str	r2, [sp, #0]
   80b80:	f04f 0301 	mov.w	r3, #1
   80b84:	9301      	str	r3, [sp, #4]
   80b86:	f04f 0000 	mov.w	r0, #0
   80b8a:	4601      	mov	r1, r0
   80b8c:	462a      	mov	r2, r5
   80b8e:	47c0      	blx	r8
   80b90:	2800      	cmp	r0, #0
   80b92:	f000 816e 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Read CIA Fail\n\r", __func__);
			return false;
		}
		if (!driver_start_read_blocks(buf, 1)) {
   80b96:	a804      	add	r0, sp, #16
   80b98:	f04f 0101 	mov.w	r1, #1
   80b9c:	47b8      	blx	r7
   80b9e:	2800      	cmp	r0, #0
   80ba0:	f000 8167 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
		if (!driver_wait_end_of_read_blocks()) {
   80ba4:	47b0      	blx	r6
   80ba6:	2800      	cmp	r0, #0
   80ba8:	f000 8163 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
		if (buf[0] == SDIO_CISTPL_END) {
   80bac:	f89d 0010 	ldrb.w	r0, [sp, #16]
   80bb0:	28ff      	cmp	r0, #255	; 0xff
   80bb2:	f000 815e 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Tuple error\n\r", __func__);
			return false; // Tuple error
		}
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
   80bb6:	2822      	cmp	r0, #34	; 0x22
   80bb8:	d102      	bne.n	80bc0 <sd_mmc_check+0x72c>
   80bba:	f89d 3012 	ldrb.w	r3, [sp, #18]
   80bbe:	b1bb      	cbz	r3, 80bf0 <sd_mmc_check+0x75c>
			break; // Fun0 tuple found
		}
		if (buf[1] == 0) {
   80bc0:	f89d 1011 	ldrb.w	r1, [sp, #17]
   80bc4:	2900      	cmp	r1, #0
   80bc6:	f000 8154 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Tuple error\n\r", __func__);
			return false; // Tuple error
		}

		// Next address
		addr += (buf[1] + 2);
   80bca:	f101 0102 	add.w	r1, r1, #2
   80bce:	186d      	adds	r5, r5, r1
		if (addr > (addr_cis + 256)) {
   80bd0:	9a03      	ldr	r2, [sp, #12]
   80bd2:	f502 7080 	add.w	r0, r2, #256	; 0x100
   80bd6:	4285      	cmp	r5, r0
   80bd8:	d9cf      	bls.n	80b7a <sd_mmc_check+0x6e6>
   80bda:	e14a      	b.n	80e72 <sd_mmc_check+0x9de>
   80bdc:	00084a45 	.word	0x00084a45
   80be0:	00084bb1 	.word	0x00084bb1
   80be4:	00084cc9 	.word	0x00084cc9
   80be8:	20070bac 	.word	0x20070bac
   80bec:	000801d5 	.word	0x000801d5
			return false; // Outoff CIS area
		}
	}

	// Read all Fun0 tuple fields: fn0_blk_siz & max_tran_speed
	if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 6, true)) {
   80bf0:	f04f 0306 	mov.w	r3, #6
   80bf4:	9300      	str	r3, [sp, #0]
   80bf6:	f04f 0301 	mov.w	r3, #1
   80bfa:	9301      	str	r3, [sp, #4]
   80bfc:	f04f 0000 	mov.w	r0, #0
   80c00:	4601      	mov	r1, r0
   80c02:	462a      	mov	r2, r5
   80c04:	4dbb      	ldr	r5, [pc, #748]	; (80ef4 <sd_mmc_check+0xa60>)
   80c06:	47a8      	blx	r5
   80c08:	2800      	cmp	r0, #0
   80c0a:	f000 8132 	beq.w	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD53 Read all Fun0 Fail\n\r", __func__);
		return false;
	}
	if (!driver_start_read_blocks(buf, 1)) {
   80c0e:	a804      	add	r0, sp, #16
   80c10:	f04f 0101 	mov.w	r1, #1
   80c14:	4ab8      	ldr	r2, [pc, #736]	; (80ef8 <sd_mmc_check+0xa64>)
   80c16:	4790      	blx	r2
   80c18:	2800      	cmp	r0, #0
   80c1a:	f000 812a 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80c1e:	49b7      	ldr	r1, [pc, #732]	; (80efc <sd_mmc_check+0xa68>)
   80c20:	4788      	blx	r1
   80c22:	2800      	cmp	r0, #0
   80c24:	f000 8125 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	tplfe_max_tran_speed = buf[5];
   80c28:	f89d 3015 	ldrb.w	r3, [sp, #21]
   80c2c:	2b32      	cmp	r3, #50	; 0x32
   80c2e:	bf28      	it	cs
   80c30:	2332      	movcs	r3, #50	; 0x32
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80c32:	48b3      	ldr	r0, [pc, #716]	; (80f00 <sd_mmc_check+0xa6c>)
   80c34:	6802      	ldr	r2, [r0, #0]
		 */
		tplfe_max_tran_speed = 0x32; // 25Mhz
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
   80c36:	f003 0007 	and.w	r0, r3, #7
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80c3a:	49b2      	ldr	r1, [pc, #712]	; (80f04 <sd_mmc_check+0xa70>)
   80c3c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   80c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80c44:	fb00 f101 	mul.w	r1, r0, r1
		tplfe_max_tran_speed = 0x32; // 25Mhz
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
   80c48:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   80c4c:	48ae      	ldr	r0, [pc, #696]	; (80f08 <sd_mmc_check+0xa74>)
   80c4e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   80c52:	fb03 f101 	mul.w	r1, r3, r1
   80c56:	6011      	str	r1, [r2, #0]
	if (IS_SDIO()) {
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
   80c58:	f640 32b2 	movw	r2, #2994	; 0xbb2
   80c5c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80c60:	7810      	ldrb	r0, [r2, #0]
   80c62:	f644 1305 	movw	r3, #18693	; 0x4905
   80c66:	f2c0 0308 	movt	r3, #8
   80c6a:	4798      	blx	r3
   80c6c:	2803      	cmp	r0, #3
   80c6e:	d959      	bls.n	80d24 <sd_mmc_check+0x890>
		// TRY to enable 4-bit mode
		if (IS_SDIO()) {
   80c70:	f640 30ac 	movw	r0, #2988	; 0xbac
   80c74:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80c78:	6801      	ldr	r1, [r0, #0]
   80c7a:	7bca      	ldrb	r2, [r1, #15]
   80c7c:	f002 0304 	and.w	r3, r2, #4
   80c80:	b2d8      	uxtb	r0, r3
   80c82:	b330      	cbz	r0, 80cd2 <sd_mmc_check+0x83e>
	 * A SDIO Low-Speed alone can supports 4bit (Optional)
	 */
	uint8_t u8_value;

	// Check 4bit support in 4BLS of "Card Capability" register
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
   80c84:	ad03      	add	r5, sp, #12
   80c86:	9500      	str	r5, [sp, #0]
   80c88:	f04f 0000 	mov.w	r0, #0
   80c8c:	4601      	mov	r1, r0
   80c8e:	f04f 0208 	mov.w	r2, #8
   80c92:	4603      	mov	r3, r0
   80c94:	4d9d      	ldr	r5, [pc, #628]	; (80f0c <sd_mmc_check+0xa78>)
   80c96:	47a8      	blx	r5
   80c98:	2800      	cmp	r0, #0
   80c9a:	f000 80ea 	beq.w	80e72 <sd_mmc_check+0x9de>
			0, &u8_value)) {
		return false;
	}
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
   80c9e:	f99d 100c 	ldrsb.w	r1, [sp, #12]
   80ca2:	2900      	cmp	r1, #0
   80ca4:	da15      	bge.n	80cd2 <sd_mmc_check+0x83e>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_BUSWIDTH_4B;
   80ca6:	ab14      	add	r3, sp, #80	; 0x50
   80ca8:	f04f 0202 	mov.w	r2, #2
   80cac:	f803 2d44 	strb.w	r2, [r3, #-68]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
   80cb0:	9300      	str	r3, [sp, #0]
   80cb2:	f04f 0001 	mov.w	r0, #1
   80cb6:	f04f 0100 	mov.w	r1, #0
   80cba:	f04f 0207 	mov.w	r2, #7
   80cbe:	4603      	mov	r3, r0
   80cc0:	47a8      	blx	r5
   80cc2:	2800      	cmp	r0, #0
   80cc4:	f000 80d5 	beq.w	80e72 <sd_mmc_check+0x9de>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->bus_width = 4;
   80cc8:	488d      	ldr	r0, [pc, #564]	; (80f00 <sd_mmc_check+0xa6c>)
   80cca:	6801      	ldr	r1, [r0, #0]
   80ccc:	f04f 0304 	mov.w	r3, #4
   80cd0:	744b      	strb	r3, [r1, #17]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_bus_width()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
   80cd2:	f640 32ac 	movw	r2, #2988	; 0xbac
   80cd6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80cda:	6810      	ldr	r0, [r2, #0]
   80cdc:	7bc1      	ldrb	r1, [r0, #15]
   80cde:	f011 0f01 	tst.w	r1, #1
   80ce2:	d01a      	beq.n	80d1a <sd_mmc_check+0x886>
 */
static bool sd_acmd6(void)
{
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   80ce4:	8983      	ldrh	r3, [r0, #12]
   80ce6:	f241 1037 	movw	r0, #4407	; 0x1137
   80cea:	ea4f 4103 	mov.w	r1, r3, lsl #16
   80cee:	f644 12b5 	movw	r2, #18869	; 0x49b5
   80cf2:	f2c0 0208 	movt	r2, #8
   80cf6:	4790      	blx	r2
   80cf8:	2800      	cmp	r0, #0
   80cfa:	f000 80ba 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
   80cfe:	f241 1006 	movw	r0, #4358	; 0x1106
   80d02:	f04f 0102 	mov.w	r1, #2
   80d06:	4b82      	ldr	r3, [pc, #520]	; (80f10 <sd_mmc_check+0xa7c>)
   80d08:	4798      	blx	r3
   80d0a:	2800      	cmp	r0, #0
   80d0c:	f000 80b1 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	sd_mmc_card->bus_width = 4;
   80d10:	487b      	ldr	r0, [pc, #492]	; (80f00 <sd_mmc_check+0xa6c>)
   80d12:	6801      	ldr	r1, [r0, #0]
   80d14:	f04f 0204 	mov.w	r2, #4
   80d18:	744a      	strb	r2, [r1, #17]
			if (!sd_acmd6()) {
				return false;
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
   80d1a:	f240 13a5 	movw	r3, #421	; 0x1a5
   80d1e:	f2c0 0308 	movt	r3, #8
   80d22:	4798      	blx	r3
	}
	if (driver_is_high_speed_capable()) {
   80d24:	f644 1011 	movw	r0, #18705	; 0x4911
   80d28:	f2c0 0008 	movt	r0, #8
   80d2c:	4780      	blx	r0
   80d2e:	2800      	cmp	r0, #0
   80d30:	f000 8081 	beq.w	80e36 <sd_mmc_check+0x9a2>
		// TRY to enable High-Speed Mode
		if (IS_SDIO()) {
   80d34:	f640 31ac 	movw	r1, #2988	; 0xbac
   80d38:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80d3c:	680a      	ldr	r2, [r1, #0]
   80d3e:	7bd3      	ldrb	r3, [r2, #15]
   80d40:	f003 0004 	and.w	r0, r3, #4
   80d44:	b2c1      	uxtb	r1, r0
   80d46:	b359      	cbz	r1, 80da0 <sd_mmc_check+0x90c>
static bool sdio_cmd52_set_high_speed(void)
{
	uint8_t u8_value;

	// Check CIA.HS
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
   80d48:	ad03      	add	r5, sp, #12
   80d4a:	9500      	str	r5, [sp, #0]
   80d4c:	f04f 0000 	mov.w	r0, #0
   80d50:	4601      	mov	r1, r0
   80d52:	f04f 0213 	mov.w	r2, #19
   80d56:	4603      	mov	r3, r0
   80d58:	4d6c      	ldr	r5, [pc, #432]	; (80f0c <sd_mmc_check+0xa78>)
   80d5a:	47a8      	blx	r5
   80d5c:	2800      	cmp	r0, #0
   80d5e:	f000 8088 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
   80d62:	f89d 200c 	ldrb.w	r2, [sp, #12]
   80d66:	f012 0f01 	tst.w	r2, #1
   80d6a:	d019      	beq.n	80da0 <sd_mmc_check+0x90c>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_EHS;
   80d6c:	ab14      	add	r3, sp, #80	; 0x50
   80d6e:	f04f 0002 	mov.w	r0, #2
   80d72:	f803 0d44 	strb.w	r0, [r3, #-68]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
   80d76:	9300      	str	r3, [sp, #0]
   80d78:	f04f 0001 	mov.w	r0, #1
   80d7c:	f04f 0100 	mov.w	r1, #0
   80d80:	f04f 0213 	mov.w	r2, #19
   80d84:	4603      	mov	r3, r0
   80d86:	47a8      	blx	r5
   80d88:	2800      	cmp	r0, #0
   80d8a:	d072      	beq.n	80e72 <sd_mmc_check+0x9de>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->high_speed = 1;
   80d8c:	495c      	ldr	r1, [pc, #368]	; (80f00 <sd_mmc_check+0xa6c>)
   80d8e:	680b      	ldr	r3, [r1, #0]
   80d90:	f04f 0201 	mov.w	r2, #1
   80d94:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
   80d98:	6818      	ldr	r0, [r3, #0]
   80d9a:	ea4f 0140 	mov.w	r1, r0, lsl #1
   80d9e:	6019      	str	r1, [r3, #0]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_high_speed()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
   80da0:	f640 33ac 	movw	r3, #2988	; 0xbac
   80da4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80da8:	6818      	ldr	r0, [r3, #0]
   80daa:	7bc2      	ldrb	r2, [r0, #15]
   80dac:	f012 0f01 	tst.w	r2, #1
   80db0:	d03c      	beq.n	80e2c <sd_mmc_check+0x998>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
   80db2:	7c01      	ldrb	r1, [r0, #16]
   80db4:	2910      	cmp	r1, #16
   80db6:	d939      	bls.n	80e2c <sd_mmc_check+0x998>
 */
static bool sd_cm6_set_high_speed(void)
{
	uint8_t switch_status[SD_SW_STATUS_BSIZE];

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
   80db8:	f04f 0301 	mov.w	r3, #1
   80dbc:	9300      	str	r3, [sp, #0]
   80dbe:	f241 1006 	movw	r0, #4358	; 0x1106
   80dc2:	f2c0 0008 	movt	r0, #8
   80dc6:	f64f 7101 	movw	r1, #65281	; 0xff01
   80dca:	f2c8 01ff 	movt	r1, #33023	; 0x80ff
   80dce:	f04f 0240 	mov.w	r2, #64	; 0x40
   80dd2:	4d50      	ldr	r5, [pc, #320]	; (80f14 <sd_mmc_check+0xa80>)
   80dd4:	47a8      	blx	r5
   80dd6:	2800      	cmp	r0, #0
   80dd8:	d04b      	beq.n	80e72 <sd_mmc_check+0x9de>
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
   80dda:	a804      	add	r0, sp, #16
   80ddc:	f04f 0101 	mov.w	r1, #1
   80de0:	4b45      	ldr	r3, [pc, #276]	; (80ef8 <sd_mmc_check+0xa64>)
   80de2:	4798      	blx	r3
   80de4:	2800      	cmp	r0, #0
   80de6:	d044      	beq.n	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80de8:	4844      	ldr	r0, [pc, #272]	; (80efc <sd_mmc_check+0xa68>)
   80dea:	4780      	blx	r0
   80dec:	2800      	cmp	r0, #0
   80dee:	d040      	beq.n	80e72 <sd_mmc_check+0x9de>
		return false;
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   80df0:	4a49      	ldr	r2, [pc, #292]	; (80f18 <sd_mmc_check+0xa84>)
   80df2:	4790      	blx	r2
   80df4:	f010 0f80 	tst.w	r0, #128	; 0x80
   80df8:	d13b      	bne.n	80e72 <sd_mmc_check+0x9de>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80dfa:	f89d 1020 	ldrb.w	r1, [sp, #32]
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
   80dfe:	f001 030f 	and.w	r3, r1, #15
   80e02:	2b0f      	cmp	r3, #15
   80e04:	d012      	beq.n	80e2c <sd_mmc_check+0x998>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80e06:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80e0a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
   80e0e:	ea50 2202 	orrs.w	r2, r0, r2, lsl #8
   80e12:	d12e      	bne.n	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
   80e14:	4941      	ldr	r1, [pc, #260]	; (80f1c <sd_mmc_check+0xa88>)
   80e16:	4788      	blx	r1
	sd_mmc_card->high_speed = 1;
   80e18:	4b39      	ldr	r3, [pc, #228]	; (80f00 <sd_mmc_check+0xa6c>)
   80e1a:	6818      	ldr	r0, [r3, #0]
   80e1c:	f04f 0201 	mov.w	r2, #1
   80e20:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
	sd_mmc_card->clock *= 2;
   80e24:	6801      	ldr	r1, [r0, #0]
   80e26:	ea4f 0341 	mov.w	r3, r1, lsl #1
   80e2a:	6003      	str	r3, [r0, #0]
					return false;
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
   80e2c:	f240 10a5 	movw	r0, #421	; 0x1a5
   80e30:	f2c0 0008 	movt	r0, #8
   80e34:	4780      	blx	r0
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80e36:	f640 32ac 	movw	r2, #2988	; 0xbac
   80e3a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80e3e:	6811      	ldr	r1, [r2, #0]
   80e40:	7bcb      	ldrb	r3, [r1, #15]
   80e42:	f013 0f01 	tst.w	r3, #1
   80e46:	d006      	beq.n	80e56 <sd_mmc_check+0x9c2>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   80e48:	f241 1010 	movw	r0, #4368	; 0x1110
   80e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
   80e50:	4a2f      	ldr	r2, [pc, #188]	; (80f10 <sd_mmc_check+0xa7c>)
   80e52:	4790      	blx	r2
		sd_mmc_deselect_slot();
		return sd_mmc_err;
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   80e54:	b168      	cbz	r0, 80e72 <sd_mmc_check+0x9de>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   80e56:	f640 30ac 	movw	r0, #2988	; 0xbac
   80e5a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80e5e:	6803      	ldr	r3, [r0, #0]
   80e60:	f04f 0100 	mov.w	r1, #0
   80e64:	7399      	strb	r1, [r3, #14]
		sd_mmc_deselect_slot();
   80e66:	f240 2229 	movw	r2, #553	; 0x229
   80e6a:	f2c0 0208 	movt	r2, #8
   80e6e:	4790      	blx	r2
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   80e70:	e07f      	b.n	80f72 <sd_mmc_check+0xade>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   80e72:	f640 34ac 	movw	r4, #2988	; 0xbac
   80e76:	f2c2 0407 	movt	r4, #8199	; 0x2007
   80e7a:	6820      	ldr	r0, [r4, #0]
   80e7c:	f04f 0403 	mov.w	r4, #3
   80e80:	7384      	strb	r4, [r0, #14]
	sd_mmc_deselect_slot();
   80e82:	f240 2329 	movw	r3, #553	; 0x229
   80e86:	f2c0 0308 	movt	r3, #8
   80e8a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   80e8c:	e071      	b.n	80f72 <sd_mmc_check+0xade>
 */
static bool sd_cmd8(uint8_t * v2)
{
	uint32_t resp;

	*v2 = 0;
   80e8e:	f04f 0600 	mov.w	r6, #0
   80e92:	e001      	b.n	80e98 <sd_mmc_check+0xa04>
   80e94:	f04f 0600 	mov.w	r6, #0
static bool sdio_op_cond(void)
{
	uint32_t resp;

	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
   80e98:	f244 5005 	movw	r0, #17669	; 0x4505
   80e9c:	f04f 0100 	mov.w	r1, #0
   80ea0:	f644 13b5 	movw	r3, #18869	; 0x49b5
   80ea4:	f2c0 0308 	movt	r3, #8
   80ea8:	4798      	blx	r3
   80eaa:	2800      	cmp	r0, #0
   80eac:	f47f ab41 	bne.w	80532 <sd_mmc_check+0x9e>
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
		return false;
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80eb0:	f640 32ac 	movw	r2, #2988	; 0xbac
   80eb4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80eb8:	6811      	ldr	r1, [r2, #0]
   80eba:	7bcb      	ldrb	r3, [r1, #15]
   80ebc:	f013 0f01 	tst.w	r3, #1
   80ec0:	f43f ad4a 	beq.w	80958 <sd_mmc_check+0x4c4>
   80ec4:	f7ff bb6d 	b.w	805a2 <sd_mmc_check+0x10e>
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   80ec8:	f640 30ac 	movw	r0, #2988	; 0xbac
   80ecc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80ed0:	6801      	ldr	r1, [r0, #0]
   80ed2:	f04f 0302 	mov.w	r3, #2
   80ed6:	73cb      	strb	r3, [r1, #15]
static bool sd_mmc_mci_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
   80ed8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80edc:	f04f 0100 	mov.w	r1, #0
   80ee0:	f644 12b5 	movw	r2, #18869	; 0x49b5
   80ee4:	f2c0 0208 	movt	r2, #8
   80ee8:	4790      	blx	r2
   80eea:	2800      	cmp	r0, #0
   80eec:	f47f ab9e 	bne.w	8062c <sd_mmc_check+0x198>
   80ef0:	e7b0      	b.n	80e54 <sd_mmc_check+0x9c0>
   80ef2:	bf00      	nop
   80ef4:	000801d5 	.word	0x000801d5
   80ef8:	00084bb1 	.word	0x00084bb1
   80efc:	00084cc9 	.word	0x00084cc9
   80f00:	20070bac 	.word	0x20070bac
   80f04:	0008ea1c 	.word	0x0008ea1c
   80f08:	0008e9dc 	.word	0x0008e9dc
   80f0c:	00080249 	.word	0x00080249
   80f10:	000849b5 	.word	0x000849b5
   80f14:	00084a45 	.word	0x00084a45
   80f18:	000849dd 	.word	0x000849dd
   80f1c:	00084991 	.word	0x00084991
			sd_mmc_card->type = CARD_TYPE_MMC;
			return sd_mmc_mci_install_mmc();
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80f20:	f640 30ac 	movw	r0, #2988	; 0xbac
   80f24:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80f28:	6801      	ldr	r1, [r0, #0]
   80f2a:	7bca      	ldrb	r2, [r1, #15]
   80f2c:	f012 0f01 	tst.w	r2, #1
   80f30:	f47f ad06 	bne.w	80940 <sd_mmc_check+0x4ac>
   80f34:	e510      	b.n	80958 <sd_mmc_check+0x4c4>
		return false;
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
   80f36:	f645 3002 	movw	r0, #23298	; 0x5b02
   80f3a:	f04f 0100 	mov.w	r1, #0
   80f3e:	4b38      	ldr	r3, [pc, #224]	; (81020 <sd_mmc_check+0xb8c>)
   80f40:	4798      	blx	r3
   80f42:	2800      	cmp	r0, #0
   80f44:	f47f aba9 	bne.w	8069a <sd_mmc_check+0x206>
   80f48:	e784      	b.n	80e54 <sd_mmc_check+0x9c0>
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
		return false;
	}

	if (!mmc_mci_op_cond()) {
		return false;
   80f4a:	f04f 0000 	mov.w	r0, #0
   80f4e:	e781      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
   80f50:	f04f 0000 	mov.w	r0, #0
   80f54:	e77e      	b.n	80e54 <sd_mmc_check+0x9c0>
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
   80f56:	4933      	ldr	r1, [pc, #204]	; (81024 <sd_mmc_check+0xb90>)
   80f58:	7808      	ldrb	r0, [r1, #0]
   80f5a:	4b33      	ldr	r3, [pc, #204]	; (81028 <sd_mmc_check+0xb94>)
   80f5c:	4798      	blx	r3
   80f5e:	2803      	cmp	r0, #3
   80f60:	f63f ac66 	bhi.w	80830 <sd_mmc_check+0x39c>
   80f64:	e48d      	b.n	80882 <sd_mmc_check+0x3ee>
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
   80f66:	f04f 0000 	mov.w	r0, #0
   80f6a:	e773      	b.n	80e54 <sd_mmc_check+0x9c0>
			sd_mmc_configure_slot();
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
   80f6c:	f04f 0000 	mov.w	r0, #0
   80f70:	e770      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
   80f72:	4620      	mov	r0, r4
   80f74:	b015      	add	sp, #84	; 0x54
   80f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80f7a:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80f7c:	2800      	cmp	r0, #0
   80f7e:	f6ff ab74 	blt.w	8066a <sd_mmc_check+0x1d6>
   80f82:	f241 0669 	movw	r6, #4201	; 0x1069
   80f86:	f106 36ff 	add.w	r6, r6, #4294967295
   80f8a:	f7ff bb65 	b.w	80658 <sd_mmc_check+0x1c4>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80f8e:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80f90:	2800      	cmp	r0, #0
   80f92:	f6ff ab6a 	blt.w	8066a <sd_mmc_check+0x1d6>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
			}
			break;
		}
		if (retry-- == 0) {
   80f96:	3e01      	subs	r6, #1
   80f98:	f47f ab5e 	bne.w	80658 <sd_mmc_check+0x1c4>
   80f9c:	e7d5      	b.n	80f4a <sd_mmc_check+0xab6>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   80f9e:	4649      	mov	r1, r9
   80fa0:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   80fa4:	f244 5029 	movw	r0, #17705	; 0x4529
   80fa8:	2e00      	cmp	r6, #0
   80faa:	bf08      	it	eq
   80fac:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   80fb0:	47a8      	blx	r5
   80fb2:	2800      	cmp	r0, #0
   80fb4:	d088      	beq.n	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80fb6:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   80fb8:	2800      	cmp	r0, #0
   80fba:	f6ff ab1e 	blt.w	805fa <sd_mmc_check+0x166>
   80fbe:	f640 0b35 	movw	fp, #2101	; 0x835
   80fc2:	f10b 3bff 	add.w	fp, fp, #4294967295
   80fc6:	f7ff bb02 	b.w	805ce <sd_mmc_check+0x13a>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   80fca:	4649      	mov	r1, r9
   80fcc:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   80fd0:	f244 5029 	movw	r0, #17705	; 0x4529
   80fd4:	2e00      	cmp	r6, #0
   80fd6:	bf08      	it	eq
   80fd8:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   80fdc:	47a8      	blx	r5
   80fde:	2800      	cmp	r0, #0
   80fe0:	f43f af72 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80fe4:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   80fe6:	2800      	cmp	r0, #0
   80fe8:	f6ff ab07 	blt.w	805fa <sd_mmc_check+0x166>
			if ((resp & OCR_CCS) != 0) {
				sd_mmc_card->type |= CARD_TYPE_HC;
			}
			break;
		}
		if (retry-- == 0) {
   80fec:	f1bb 0b01 	subs.w	fp, fp, #1
   80ff0:	f47f aaed 	bne.w	805ce <sd_mmc_check+0x13a>
   80ff4:	e768      	b.n	80ec8 <sd_mmc_check+0xa34>
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80ff6:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   80ff8:	1e01      	subs	r1, r0, #0
   80ffa:	f6ff aac5 	blt.w	80588 <sd_mmc_check+0xf4>
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   80ffe:	4638      	mov	r0, r7
   81000:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   81004:	47a8      	blx	r5
   81006:	2800      	cmp	r0, #0
   81008:	f43f af33 	beq.w	80e72 <sd_mmc_check+0x9de>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   8100c:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   8100e:	1e01      	subs	r1, r0, #0
   81010:	f6ff aaba 	blt.w	80588 <sd_mmc_check+0xf4>
			break;
		}
		if (cmd5_retry-- == 0) {
   81014:	f1b9 0902 	subs.w	r9, r9, #2
   81018:	f47f aaa1 	bne.w	8055e <sd_mmc_check+0xca>
   8101c:	e729      	b.n	80e72 <sd_mmc_check+0x9de>
   8101e:	bf00      	nop
   81020:	000849b5 	.word	0x000849b5
   81024:	20070bb2 	.word	0x20070bb2
   81028:	00084905 	.word	0x00084905

0008102c <sd_mmc_get_type>:
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
   8102c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   8102e:	f240 23d5 	movw	r3, #725	; 0x2d5
   81032:	f2c0 0308 	movt	r3, #8
   81036:	4798      	blx	r3
   81038:	b958      	cbnz	r0, 81052 <sd_mmc_get_type+0x26>
		return CARD_TYPE_UNKNOWN;
	}
	sd_mmc_deselect_slot();
   8103a:	f240 2029 	movw	r0, #553	; 0x229
   8103e:	f2c0 0008 	movt	r0, #8
   81042:	4780      	blx	r0
	return sd_mmc_card->type;
   81044:	f640 31ac 	movw	r1, #2988	; 0xbac
   81048:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8104c:	680a      	ldr	r2, [r1, #0]
   8104e:	7bd0      	ldrb	r0, [r2, #15]
   81050:	bd08      	pop	{r3, pc}
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
   81052:	f04f 0000 	mov.w	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
   81056:	bd08      	pop	{r3, pc}

00081058 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   81058:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   8105a:	f240 23d5 	movw	r3, #725	; 0x2d5
   8105e:	f2c0 0308 	movt	r3, #8
   81062:	4798      	blx	r3
   81064:	b958      	cbnz	r0, 8107e <sd_mmc_get_capacity+0x26>
		return 0;
	}
	sd_mmc_deselect_slot();
   81066:	f240 2029 	movw	r0, #553	; 0x229
   8106a:	f2c0 0008 	movt	r0, #8
   8106e:	4780      	blx	r0
	return sd_mmc_card->capacity;
   81070:	f640 31ac 	movw	r1, #2988	; 0xbac
   81074:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81078:	680a      	ldr	r2, [r1, #0]
   8107a:	6850      	ldr	r0, [r2, #4]
   8107c:	bd08      	pop	{r3, pc}
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
   8107e:	f04f 0000 	mov.w	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
   81082:	bd08      	pop	{r3, pc}

00081084 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
   81084:	f04f 0000 	mov.w	r0, #0
   81088:	4770      	bx	lr
   8108a:	bf00      	nop

0008108c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   8108c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81090:	b083      	sub	sp, #12
   81092:	468b      	mov	fp, r1
   81094:	4692      	mov	sl, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   81096:	f240 23d5 	movw	r3, #725	; 0x2d5
   8109a:	f2c0 0308 	movt	r3, #8
   8109e:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
   810a0:	4681      	mov	r9, r0
   810a2:	2800      	cmp	r0, #0
   810a4:	f040 8081 	bne.w	811aa <sd_mmc_init_read_blocks+0x11e>
   810a8:	f640 5841 	movw	r8, #3393	; 0xd41
   810ac:	f2c0 0803 	movt	r8, #3
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810b0:	f640 36ac 	movw	r6, #2988	; 0xbac
   810b4:	f2c2 0607 	movt	r6, #8199	; 0x2007
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810b8:	f241 150d 	movw	r5, #4365	; 0x110d
   810bc:	f644 14b5 	movw	r4, #18869	; 0x49b5
   810c0:	f2c0 0408 	movt	r4, #8
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   810c4:	f644 17dd 	movw	r7, #18909	; 0x49dd
   810c8:	f2c0 0708 	movt	r7, #8
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810cc:	6830      	ldr	r0, [r6, #0]
   810ce:	8981      	ldrh	r1, [r0, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810d0:	4628      	mov	r0, r5
   810d2:	ea4f 4101 	mov.w	r1, r1, lsl #16
   810d6:	47a0      	blx	r4
   810d8:	2800      	cmp	r0, #0
   810da:	d046      	beq.n	8116a <sd_mmc_init_read_blocks+0xde>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   810dc:	47b8      	blx	r7
   810de:	f410 7f80 	tst.w	r0, #256	; 0x100
   810e2:	d14a      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
   810e4:	f108 38ff 	add.w	r8, r8, #4294967295
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810e8:	6832      	ldr	r2, [r6, #0]
   810ea:	8993      	ldrh	r3, [r2, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810ec:	4628      	mov	r0, r5
   810ee:	ea4f 4103 	mov.w	r1, r3, lsl #16
   810f2:	47a0      	blx	r4
   810f4:	2800      	cmp	r0, #0
   810f6:	d15c      	bne.n	811b2 <sd_mmc_init_read_blocks+0x126>
   810f8:	e037      	b.n	8116a <sd_mmc_init_read_blocks+0xde>
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   810fa:	ea4f 214b 	mov.w	r1, fp, lsl #9
   810fe:	e000      	b.n	81102 <sd_mmc_init_read_blocks+0x76>
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
   81100:	4659      	mov	r1, fp
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   81102:	f04f 0301 	mov.w	r3, #1
   81106:	9300      	str	r3, [sp, #0]
   81108:	f44f 7200 	mov.w	r2, #512	; 0x200
   8110c:	4653      	mov	r3, sl
   8110e:	f644 2445 	movw	r4, #19013	; 0x4a45
   81112:	f2c0 0408 	movt	r4, #8
   81116:	47a0      	blx	r4
   81118:	b938      	cbnz	r0, 8112a <sd_mmc_init_read_blocks+0x9e>
		sd_mmc_deselect_slot();
   8111a:	f240 2129 	movw	r1, #553	; 0x229
   8111e:	f2c0 0108 	movt	r1, #8
   81122:	4788      	blx	r1
		return SD_MMC_ERR_COMM;
   81124:	f04f 0905 	mov.w	r9, #5
   81128:	e03f      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
   8112a:	f644 10dd 	movw	r0, #18909	; 0x49dd
   8112e:	f2c0 0008 	movt	r0, #8
   81132:	4780      	blx	r0
		if (resp & CARD_STATUS_ERR_RD_WR) {
   81134:	f04f 0100 	mov.w	r1, #0
   81138:	f2ce 4158 	movt	r1, #58456	; 0xe458
   8113c:	4001      	ands	r1, r0
   8113e:	b139      	cbz	r1, 81150 <sd_mmc_init_read_blocks+0xc4>
			sd_mmc_debug("%s: Read blocks %02d resp32 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
   81140:	f240 2029 	movw	r0, #553	; 0x229
   81144:	f2c0 0008 	movt	r0, #8
   81148:	4780      	blx	r0
			return SD_MMC_ERR_COMM;
   8114a:	f04f 0905 	mov.w	r9, #5
   8114e:	e02c      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   81150:	f640 32b0 	movw	r2, #2992	; 0xbb0
   81154:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81158:	f8a2 a000 	strh.w	sl, [r2]
	sd_mmc_nb_block_to_tranfer = nb_block;
   8115c:	f640 33a8 	movw	r3, #2984	; 0xba8
   81160:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81164:	f8a3 a000 	strh.w	sl, [r3]
	return SD_MMC_OK;
   81168:	e01f      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
		return sd_mmc_err;
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
		sd_mmc_deselect_slot();
   8116a:	f240 2229 	movw	r2, #553	; 0x229
   8116e:	f2c0 0208 	movt	r2, #8
   81172:	4790      	blx	r2
		return SD_MMC_ERR_COMM;
   81174:	f04f 0905 	mov.w	r9, #5
   81178:	e017      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   8117a:	f241 1011 	movw	r0, #4369	; 0x1111
   8117e:	f2c0 0008 	movt	r0, #8
   81182:	f241 1412 	movw	r4, #4370	; 0x1112
   81186:	f2c0 0410 	movt	r4, #16
   8118a:	f1ba 0f01 	cmp.w	sl, #1
   8118e:	bf88      	it	hi
   81190:	4620      	movhi	r0, r4
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   81192:	f640 32ac 	movw	r2, #2988	; 0xbac
   81196:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8119a:	6813      	ldr	r3, [r2, #0]
   8119c:	7bd9      	ldrb	r1, [r3, #15]
   8119e:	f001 0408 	and.w	r4, r1, #8
   811a2:	b2e2      	uxtb	r2, r4
   811a4:	2a00      	cmp	r2, #0
   811a6:	d1ab      	bne.n	81100 <sd_mmc_init_read_blocks+0x74>
   811a8:	e7a7      	b.n	810fa <sd_mmc_init_read_blocks+0x6e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
   811aa:	4648      	mov	r0, r9
   811ac:	b003      	add	sp, #12
   811ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   811b2:	47b8      	blx	r7
   811b4:	f410 7f80 	tst.w	r0, #256	; 0x100
   811b8:	d1df      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   811ba:	6830      	ldr	r0, [r6, #0]
   811bc:	8981      	ldrh	r1, [r0, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   811be:	4628      	mov	r0, r5
   811c0:	ea4f 4101 	mov.w	r1, r1, lsl #16
   811c4:	47a0      	blx	r4
   811c6:	2800      	cmp	r0, #0
   811c8:	d0cf      	beq.n	8116a <sd_mmc_init_read_blocks+0xde>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   811ca:	47b8      	blx	r7
   811cc:	f410 7f80 	tst.w	r0, #256	; 0x100
   811d0:	d1d3      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
				break;
			}
		}
		if (nec_timeout-- == 0) {
   811d2:	f1b8 0802 	subs.w	r8, r8, #2
   811d6:	f47f af79 	bne.w	810cc <sd_mmc_init_read_blocks+0x40>
   811da:	e7c6      	b.n	8116a <sd_mmc_init_read_blocks+0xde>

000811dc <sd_mmc_start_read_blocks>:
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   811dc:	b510      	push	{r4, lr}
   811de:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   811e0:	f644 33b1 	movw	r3, #19377	; 0x4bb1
   811e4:	f2c0 0308 	movt	r3, #8
   811e8:	4798      	blx	r3
   811ea:	b948      	cbnz	r0, 81200 <sd_mmc_start_read_blocks+0x24>
		sd_mmc_nb_block_remaining = 0;
   811ec:	f640 31b0 	movw	r1, #2992	; 0xbb0
   811f0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   811f4:	f04f 0300 	mov.w	r3, #0
   811f8:	800b      	strh	r3, [r1, #0]
		return SD_MMC_ERR_COMM;
   811fa:	f04f 0005 	mov.w	r0, #5
   811fe:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
   81200:	f640 30b0 	movw	r0, #2992	; 0xbb0
   81204:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81208:	8802      	ldrh	r2, [r0, #0]
   8120a:	1b14      	subs	r4, r2, r4
   8120c:	8004      	strh	r4, [r0, #0]
	return SD_MMC_OK;
   8120e:	f04f 0000 	mov.w	r0, #0
}
   81212:	bd10      	pop	{r4, pc}

00081214 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(void)
{
   81214:	b508      	push	{r3, lr}
	if (!driver_wait_end_of_read_blocks()) {
   81216:	f644 43c9 	movw	r3, #19657	; 0x4cc9
   8121a:	f2c0 0308 	movt	r3, #8
   8121e:	4798      	blx	r3
   81220:	2800      	cmp	r0, #0
   81222:	d030      	beq.n	81286 <sd_mmc_wait_end_of_read_blocks+0x72>
		return SD_MMC_ERR_COMM;
	}
	if (sd_mmc_nb_block_remaining) {
   81224:	f640 30b0 	movw	r0, #2992	; 0xbb0
   81228:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8122c:	8801      	ldrh	r1, [r0, #0]
   8122e:	2900      	cmp	r1, #0
   81230:	d12c      	bne.n	8128c <sd_mmc_wait_end_of_read_blocks+0x78>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   81232:	f640 32a8 	movw	r2, #2984	; 0xba8
   81236:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8123a:	8813      	ldrh	r3, [r2, #0]
   8123c:	2b01      	cmp	r3, #1
   8123e:	d107      	bne.n	81250 <sd_mmc_wait_end_of_read_blocks+0x3c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   81240:	f240 2129 	movw	r1, #553	; 0x229
   81244:	f2c0 0108 	movt	r1, #8
   81248:	4788      	blx	r1
		return SD_MMC_OK;
   8124a:	f04f 0000 	mov.w	r0, #0
   8124e:	bd08      	pop	{r3, pc}
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   81250:	f243 100c 	movw	r0, #12556	; 0x310c
   81254:	f04f 0100 	mov.w	r1, #0
   81258:	f644 12b5 	movw	r2, #18869	; 0x49b5
   8125c:	f2c0 0208 	movt	r2, #8
   81260:	4790      	blx	r2
   81262:	b940      	cbnz	r0, 81276 <sd_mmc_wait_end_of_read_blocks+0x62>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   81264:	f243 100c 	movw	r0, #12556	; 0x310c
   81268:	f04f 0100 	mov.w	r1, #0
   8126c:	f644 13b5 	movw	r3, #18869	; 0x49b5
   81270:	f2c0 0308 	movt	r3, #8
   81274:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   81276:	f240 2029 	movw	r0, #553	; 0x229
   8127a:	f2c0 0008 	movt	r0, #8
   8127e:	4780      	blx	r0
	return SD_MMC_OK;
   81280:	f04f 0000 	mov.w	r0, #0
   81284:	bd08      	pop	{r3, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(void)
{
	if (!driver_wait_end_of_read_blocks()) {
		return SD_MMC_ERR_COMM;
   81286:	f04f 0005 	mov.w	r0, #5
   8128a:	bd08      	pop	{r3, pc}
	}
	if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
   8128c:	f04f 0000 	mov.w	r0, #0
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   81290:	bd08      	pop	{r3, pc}
   81292:	bf00      	nop

00081294 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   81294:	b5f0      	push	{r4, r5, r6, r7, lr}
   81296:	b083      	sub	sp, #12
   81298:	4606      	mov	r6, r0
   8129a:	460f      	mov	r7, r1
   8129c:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   8129e:	f240 24d5 	movw	r4, #725	; 0x2d5
   812a2:	f2c0 0408 	movt	r4, #8
   812a6:	47a0      	blx	r4
	if (sd_mmc_err != SD_MMC_OK) {
   812a8:	4604      	mov	r4, r0
   812aa:	2800      	cmp	r0, #0
   812ac:	d158      	bne.n	81360 <sd_mmc_init_write_blocks+0xcc>
		return sd_mmc_err;
	}
	if (sd_mmc_is_write_protected(slot)) {
   812ae:	4630      	mov	r0, r6
   812b0:	f241 0385 	movw	r3, #4229	; 0x1085
   812b4:	f2c0 0308 	movt	r3, #8
   812b8:	4798      	blx	r3
   812ba:	b138      	cbz	r0, 812cc <sd_mmc_init_write_blocks+0x38>
		sd_mmc_deselect_slot();
   812bc:	f240 2329 	movw	r3, #553	; 0x229
   812c0:	f2c0 0308 	movt	r3, #8
   812c4:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   812c6:	f04f 0407 	mov.w	r4, #7
   812ca:	e049      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   812cc:	f249 1018 	movw	r0, #37144	; 0x9118
   812d0:	f2c0 0008 	movt	r0, #8
   812d4:	f249 1119 	movw	r1, #37145	; 0x9119
   812d8:	f2c0 0110 	movt	r1, #16
   812dc:	2d01      	cmp	r5, #1
   812de:	bf88      	it	hi
   812e0:	4608      	movhi	r0, r1
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   812e2:	f640 32ac 	movw	r2, #2988	; 0xbac
   812e6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   812ea:	6816      	ldr	r6, [r2, #0]
   812ec:	7bf3      	ldrb	r3, [r6, #15]
   812ee:	f003 0108 	and.w	r1, r3, #8
   812f2:	b2ca      	uxtb	r2, r1
   812f4:	b912      	cbnz	r2, 812fc <sd_mmc_init_write_blocks+0x68>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   812f6:	ea4f 2147 	mov.w	r1, r7, lsl #9
   812fa:	e000      	b.n	812fe <sd_mmc_init_write_blocks+0x6a>
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
   812fc:	4639      	mov	r1, r7
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   812fe:	f04f 0601 	mov.w	r6, #1
   81302:	9600      	str	r6, [sp, #0]
   81304:	f44f 7200 	mov.w	r2, #512	; 0x200
   81308:	462b      	mov	r3, r5
   8130a:	f644 2645 	movw	r6, #19013	; 0x4a45
   8130e:	f2c0 0608 	movt	r6, #8
   81312:	47b0      	blx	r6
   81314:	b938      	cbnz	r0, 81326 <sd_mmc_init_write_blocks+0x92>
		sd_mmc_deselect_slot();
   81316:	f240 2029 	movw	r0, #553	; 0x229
   8131a:	f2c0 0008 	movt	r0, #8
   8131e:	4780      	blx	r0
		return SD_MMC_ERR_COMM;
   81320:	f04f 0405 	mov.w	r4, #5
   81324:	e01c      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
   81326:	f644 10dd 	movw	r0, #18909	; 0x49dd
   8132a:	f2c0 0008 	movt	r0, #8
   8132e:	4780      	blx	r0
		if (resp & CARD_STATUS_ERR_RD_WR) {
   81330:	f04f 0300 	mov.w	r3, #0
   81334:	f2ce 4358 	movt	r3, #58456	; 0xe458
   81338:	4003      	ands	r3, r0
   8133a:	b13b      	cbz	r3, 8134c <sd_mmc_init_write_blocks+0xb8>
			sd_mmc_debug("%s: Write blocks %02d r1 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
   8133c:	f240 2429 	movw	r4, #553	; 0x229
   81340:	f2c0 0408 	movt	r4, #8
   81344:	47a0      	blx	r4
			return SD_MMC_ERR_COMM;
   81346:	f04f 0405 	mov.w	r4, #5
   8134a:	e009      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   8134c:	f640 31b0 	movw	r1, #2992	; 0xbb0
   81350:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81354:	800d      	strh	r5, [r1, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   81356:	f640 32a8 	movw	r2, #2984	; 0xba8
   8135a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8135e:	8015      	strh	r5, [r2, #0]
	return SD_MMC_OK;
}
   81360:	4620      	mov	r0, r4
   81362:	b003      	add	sp, #12
   81364:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81366:	bf00      	nop

00081368 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   81368:	b510      	push	{r4, lr}
   8136a:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   8136c:	f644 5341 	movw	r3, #19777	; 0x4d41
   81370:	f2c0 0308 	movt	r3, #8
   81374:	4798      	blx	r3
   81376:	b948      	cbnz	r0, 8138c <sd_mmc_start_write_blocks+0x24>
		sd_mmc_nb_block_remaining = 0;
   81378:	f640 31b0 	movw	r1, #2992	; 0xbb0
   8137c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81380:	f04f 0300 	mov.w	r3, #0
   81384:	800b      	strh	r3, [r1, #0]
		return SD_MMC_ERR_COMM;
   81386:	f04f 0005 	mov.w	r0, #5
   8138a:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
   8138c:	f640 30b0 	movw	r0, #2992	; 0xbb0
   81390:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81394:	8802      	ldrh	r2, [r0, #0]
   81396:	1b14      	subs	r4, r2, r4
   81398:	8004      	strh	r4, [r0, #0]
	return SD_MMC_OK;
   8139a:	f04f 0000 	mov.w	r0, #0
}
   8139e:	bd10      	pop	{r4, pc}

000813a0 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(void)
{
   813a0:	b508      	push	{r3, lr}
	if (!driver_wait_end_of_write_blocks()) {
   813a2:	f644 6339 	movw	r3, #20025	; 0x4e39
   813a6:	f2c0 0308 	movt	r3, #8
   813aa:	4798      	blx	r3
   813ac:	2800      	cmp	r0, #0
   813ae:	d02f      	beq.n	81410 <sd_mmc_wait_end_of_write_blocks+0x70>
		return SD_MMC_ERR_COMM;
	}
	if (sd_mmc_nb_block_remaining) {
   813b0:	f640 30b0 	movw	r0, #2992	; 0xbb0
   813b4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   813b8:	8801      	ldrh	r1, [r0, #0]
   813ba:	2900      	cmp	r1, #0
   813bc:	d12b      	bne.n	81416 <sd_mmc_wait_end_of_write_blocks+0x76>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   813be:	f640 32a8 	movw	r2, #2984	; 0xba8
   813c2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   813c6:	8813      	ldrh	r3, [r2, #0]
   813c8:	2b01      	cmp	r3, #1
   813ca:	d107      	bne.n	813dc <sd_mmc_wait_end_of_write_blocks+0x3c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   813cc:	f240 2329 	movw	r3, #553	; 0x229
   813d0:	f2c0 0308 	movt	r3, #8
   813d4:	4798      	blx	r3
		return SD_MMC_OK;
   813d6:	f04f 0000 	mov.w	r0, #0
   813da:	bd08      	pop	{r3, pc}
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   813dc:	f243 100c 	movw	r0, #12556	; 0x310c
   813e0:	f04f 0100 	mov.w	r1, #0
   813e4:	f644 12b5 	movw	r2, #18869	; 0x49b5
   813e8:	f2c0 0208 	movt	r2, #8
   813ec:	4790      	blx	r2
   813ee:	b938      	cbnz	r0, 81400 <sd_mmc_wait_end_of_write_blocks+0x60>
			sd_mmc_deselect_slot();
   813f0:	f240 2129 	movw	r1, #553	; 0x229
   813f4:	f2c0 0108 	movt	r1, #8
   813f8:	4788      	blx	r1
			return SD_MMC_ERR_COMM;
   813fa:	f04f 0005 	mov.w	r0, #5
   813fe:	bd08      	pop	{r3, pc}
		}
	}
	sd_mmc_deselect_slot();
   81400:	f240 2029 	movw	r0, #553	; 0x229
   81404:	f2c0 0008 	movt	r0, #8
   81408:	4780      	blx	r0
	return SD_MMC_OK;
   8140a:	f04f 0000 	mov.w	r0, #0
   8140e:	bd08      	pop	{r3, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(void)
{
	if (!driver_wait_end_of_write_blocks()) {
		return SD_MMC_ERR_COMM;
   81410:	f04f 0005 	mov.w	r0, #5
   81414:	bd08      	pop	{r3, pc}
	}
	if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
   81416:	f04f 0000 	mov.w	r0, #0
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   8141a:	bd08      	pop	{r3, pc}

0008141c <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   8141c:	b4f0      	push	{r4, r5, r6, r7}
   8141e:	b08c      	sub	sp, #48	; 0x30
   81420:	4606      	mov	r6, r0
   81422:	460f      	mov	r7, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   81424:	ac01      	add	r4, sp, #4
   81426:	f64e 2578 	movw	r5, #60024	; 0xea78
   8142a:	f2c0 0508 	movt	r5, #8
   8142e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81436:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   8143a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8143e:	9b01      	ldr	r3, [sp, #4]
   81440:	fbb7 f0f3 	udiv	r0, r7, r3
   81444:	fbb0 f1f6 	udiv	r1, r0, r6
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81448:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8144c:	d952      	bls.n	814f4 <pwm_clocks_generate+0xd8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8144e:	9902      	ldr	r1, [sp, #8]
   81450:	fbb7 f2f1 	udiv	r2, r7, r1
   81454:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81458:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8145c:	d94f      	bls.n	814fe <pwm_clocks_generate+0xe2>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8145e:	9b03      	ldr	r3, [sp, #12]
   81460:	fbb7 f0f3 	udiv	r0, r7, r3
   81464:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81468:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8146c:	d94a      	bls.n	81504 <pwm_clocks_generate+0xe8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8146e:	9904      	ldr	r1, [sp, #16]
   81470:	fbb7 f2f1 	udiv	r2, r7, r1
   81474:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81478:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8147c:	d945      	bls.n	8150a <pwm_clocks_generate+0xee>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8147e:	9b05      	ldr	r3, [sp, #20]
   81480:	fbb7 f0f3 	udiv	r0, r7, r3
   81484:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81488:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8148c:	d940      	bls.n	81510 <pwm_clocks_generate+0xf4>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8148e:	9906      	ldr	r1, [sp, #24]
   81490:	fbb7 f2f1 	udiv	r2, r7, r1
   81494:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81498:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8149c:	d93b      	bls.n	81516 <pwm_clocks_generate+0xfa>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8149e:	9b07      	ldr	r3, [sp, #28]
   814a0:	fbb7 f0f3 	udiv	r0, r7, r3
   814a4:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814a8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814ac:	d936      	bls.n	8151c <pwm_clocks_generate+0x100>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814ae:	9908      	ldr	r1, [sp, #32]
   814b0:	fbb7 f2f1 	udiv	r2, r7, r1
   814b4:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814b8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814bc:	d931      	bls.n	81522 <pwm_clocks_generate+0x106>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   814c0:	fbb7 f0f3 	udiv	r0, r7, r3
   814c4:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814c8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814cc:	d92c      	bls.n	81528 <pwm_clocks_generate+0x10c>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814ce:	990a      	ldr	r1, [sp, #40]	; 0x28
   814d0:	fbb7 f2f1 	udiv	r2, r7, r1
   814d4:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814d8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814dc:	d927      	bls.n	8152e <pwm_clocks_generate+0x112>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   814e0:	fbb7 f0f3 	udiv	r0, r7, r3
   814e4:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814e8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814ec:	d922      	bls.n	81534 <pwm_clocks_generate+0x118>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   814ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
   814f2:	e022      	b.n	8153a <pwm_clocks_generate+0x11e>
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   814f4:	f04f 0200 	mov.w	r2, #0
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	}

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
   814f8:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
   814fc:	e01d      	b.n	8153a <pwm_clocks_generate+0x11e>
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
		ul_pre++;
   814fe:	f04f 0201 	mov.w	r2, #1
   81502:	e7f9      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81504:	f04f 0202 	mov.w	r2, #2
   81508:	e7f6      	b.n	814f8 <pwm_clocks_generate+0xdc>
   8150a:	f04f 0203 	mov.w	r2, #3
   8150e:	e7f3      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81510:	f04f 0204 	mov.w	r2, #4
   81514:	e7f0      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81516:	f04f 0205 	mov.w	r2, #5
   8151a:	e7ed      	b.n	814f8 <pwm_clocks_generate+0xdc>
   8151c:	f04f 0206 	mov.w	r2, #6
   81520:	e7ea      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81522:	f04f 0207 	mov.w	r2, #7
   81526:	e7e7      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81528:	f04f 0208 	mov.w	r2, #8
   8152c:	e7e4      	b.n	814f8 <pwm_clocks_generate+0xdc>
   8152e:	f04f 0209 	mov.w	r2, #9
   81532:	e7e1      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81534:	f04f 020a 	mov.w	r2, #10
   81538:	e7de      	b.n	814f8 <pwm_clocks_generate+0xdc>
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
	}
}
   8153a:	b00c      	add	sp, #48	; 0x30
   8153c:	bcf0      	pop	{r4, r5, r6, r7}
   8153e:	4770      	bx	lr

00081540 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   81540:	b570      	push	{r4, r5, r6, lr}
   81542:	4606      	mov	r6, r0
   81544:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   81546:	6808      	ldr	r0, [r1, #0]
   81548:	b158      	cbz	r0, 81562 <pwm_init+0x22>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   8154a:	6889      	ldr	r1, [r1, #8]
   8154c:	f241 431d 	movw	r3, #5149	; 0x141d
   81550:	f2c0 0308 	movt	r3, #8
   81554:	4798      	blx	r3
		if (result == PWM_INVALID_ARGUMENT) {
   81556:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8155a:	4288      	cmp	r0, r1
   8155c:	d014      	beq.n	81588 <pwm_init+0x48>
			return result;
		}

		clock = result;
   8155e:	4605      	mov	r5, r0
   81560:	e001      	b.n	81566 <pwm_init+0x26>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   81562:	f04f 0500 	mov.w	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   81566:	6860      	ldr	r0, [r4, #4]
   81568:	b158      	cbz	r0, 81582 <pwm_init+0x42>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   8156a:	68a1      	ldr	r1, [r4, #8]
   8156c:	f241 421d 	movw	r2, #5149	; 0x141d
   81570:	f2c0 0208 	movt	r2, #8
   81574:	4790      	blx	r2

		if (result == PWM_INVALID_ARGUMENT) {
   81576:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8157a:	4298      	cmp	r0, r3
   8157c:	d004      	beq.n	81588 <pwm_init+0x48>
			return result;
		}

		clock |= (result << 16);
   8157e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   81582:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   81584:	f04f 0000 	mov.w	r0, #0
}
   81588:	bd70      	pop	{r4, r5, r6, pc}
   8158a:	bf00      	nop

0008158c <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   8158c:	b470      	push	{r4, r5, r6}
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
   8158e:	680b      	ldr	r3, [r1, #0]
	uint32_t channel = (1 << ch_num);
   81590:	f04f 0201 	mov.w	r2, #1
   81594:	fa02 f203 	lsl.w	r2, r2, r3

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81598:	8a8e      	ldrh	r6, [r1, #20]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   8159a:	684c      	ldr	r4, [r1, #4]
   8159c:	f004 050f 	and.w	r5, r4, #15
   815a0:	432e      	orrs	r6, r5
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   815a2:	890c      	ldrh	r4, [r1, #8]
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   815a4:	4326      	orrs	r6, r4
   815a6:	7a8d      	ldrb	r5, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   815a8:	ea46 2645 	orr.w	r6, r6, r5, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   815ac:	7d8c      	ldrb	r4, [r1, #22]
   815ae:	ea46 4504 	orr.w	r5, r6, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   815b2:	7dce      	ldrb	r6, [r1, #23]
   815b4:	ea45 4546 	orr.w	r5, r5, r6, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   815b8:	7e0c      	ldrb	r4, [r1, #24]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   815ba:	ea45 4684 	orr.w	r6, r5, r4, lsl #18
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = ch_mode_reg;
   815be:	f103 0510 	add.w	r5, r3, #16
   815c2:	ea4f 1445 	mov.w	r4, r5, lsl #5
   815c6:	1905      	adds	r5, r0, r4
   815c8:	5106      	str	r6, [r0, r4]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   815ca:	68cc      	ldr	r4, [r1, #12]
   815cc:	606c      	str	r4, [r5, #4]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   815ce:	690c      	ldr	r4, [r1, #16]
   815d0:	eb00 1543 	add.w	r5, r0, r3, lsl #5
   815d4:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   815d8:	7d8c      	ldrb	r4, [r1, #22]
   815da:	b13c      	cbz	r4, 815ec <pwm_channel_init+0x60>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   815dc:	8b8d      	ldrh	r5, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   815de:	8b4c      	ldrh	r4, [r1, #26]
   815e0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   815e4:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   815e8:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
   815ec:	7fcd      	ldrb	r5, [r1, #31]
   815ee:	fa05 f503 	lsl.w	r5, r5, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
   815f2:	7f8c      	ldrb	r4, [r1, #30]
   815f4:	fa04 f403 	lsl.w	r4, r4, r3
   815f8:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
   815fc:	6485      	str	r5, [r0, #72]	; 0x48
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
   815fe:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   81602:	fa05 f503 	lsl.w	r5, r5, r3
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
   81606:	f891 4020 	ldrb.w	r4, [r1, #32]
   8160a:	fa04 f403 	lsl.w	r4, r4, r3
   8160e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
   81612:	6444      	str	r4, [r0, #68]	; 0x44
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
					ch_num) << 16);

	/* Sync Channels Mode Register */
	if (p_channel->b_sync_ch) {
   81614:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   81618:	b11c      	cbz	r4, 81622 <pwm_channel_init+0x96>
		p_pwm->PWM_SCM |= channel;
   8161a:	6a04      	ldr	r4, [r0, #32]
   8161c:	4314      	orrs	r4, r2
   8161e:	6204      	str	r4, [r0, #32]
   81620:	e003      	b.n	8162a <pwm_channel_init+0x9e>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   81622:	6a04      	ldr	r4, [r0, #32]
   81624:	ea24 0402 	bic.w	r4, r4, r2
   81628:	6204      	str	r4, [r0, #32]
		p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
	} else {
		p_pwm->PWM_FPV1 &= (!((0x01 << ch_num) << 16));
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   8162a:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   8162e:	2c01      	cmp	r4, #1
   81630:	d103      	bne.n	8163a <pwm_channel_init+0xae>
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   81632:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81634:	4314      	orrs	r4, r2
   81636:	6684      	str	r4, [r0, #104]	; 0x68
   81638:	e006      	b.n	81648 <pwm_channel_init+0xbc>
	} else {
		p_pwm->PWM_FPV &= (!(0x01 << ch_num));
   8163a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8163c:	2a00      	cmp	r2, #0
   8163e:	bf14      	ite	ne
   81640:	2400      	movne	r4, #0
   81642:	f004 0401 	andeq.w	r4, r4, #1
   81646:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   81648:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   8164c:	2c01      	cmp	r4, #1
   8164e:	d104      	bne.n	8165a <pwm_channel_init+0xce>
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   81650:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81652:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
   81656:	6682      	str	r2, [r0, #104]	; 0x68
   81658:	e006      	b.n	81668 <pwm_channel_init+0xdc>
	} else {
		p_pwm->PWM_FPV &= (!((0x01 << ch_num) << 16));
   8165a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8165c:	0412      	lsls	r2, r2, #16
   8165e:	bf14      	ite	ne
   81660:	2200      	movne	r2, #0
   81662:	f004 0201 	andeq.w	r2, r4, #1
   81666:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   81668:	2b03      	cmp	r3, #3
   8166a:	d80f      	bhi.n	8168c <pwm_channel_init+0x100>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   8166c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   8166e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   81672:	f04f 02ff 	mov.w	r2, #255	; 0xff
   81676:	fa02 f203 	lsl.w	r2, r2, r3
   8167a:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   8167e:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   81682:	fa01 f303 	lsl.w	r3, r1, r3
   81686:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE1 = fault_enable_reg;
   81688:	66c2      	str	r2, [r0, #108]	; 0x6c
   8168a:	e010      	b.n	816ae <pwm_channel_init+0x122>
	} else {
		ch_num -= 4;
   8168c:	f1a3 0304 	sub.w	r3, r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   81690:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   81692:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   81696:	f04f 02ff 	mov.w	r2, #255	; 0xff
   8169a:	fa02 f203 	lsl.w	r2, r2, r3
   8169e:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   816a2:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   816a6:	fa01 f303 	lsl.w	r3, r1, r3
   816aa:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE2 = fault_enable_reg;
   816ac:	6702      	str	r2, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   816ae:	f04f 0000 	mov.w	r0, #0
   816b2:	bc70      	pop	{r4, r5, r6}
   816b4:	4770      	bx	lr
   816b6:	bf00      	nop

000816b8 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   816b8:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   816ba:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   816bc:	690b      	ldr	r3, [r1, #16]
   816be:	4293      	cmp	r3, r2
   816c0:	d307      	bcc.n	816d2 <pwm_channel_update_duty+0x1a>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   816c2:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   816c4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   816c8:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   816cc:	f04f 0000 	mov.w	r0, #0
   816d0:	e001      	b.n	816d6 <pwm_channel_update_duty+0x1e>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   816d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   816d6:	bc10      	pop	{r4}
   816d8:	4770      	bx	lr
   816da:	bf00      	nop

000816dc <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   816dc:	f04f 0301 	mov.w	r3, #1
   816e0:	fa03 f101 	lsl.w	r1, r3, r1
   816e4:	6041      	str	r1, [r0, #4]
   816e6:	4770      	bx	lr

000816e8 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   816e8:	f04f 0301 	mov.w	r3, #1
   816ec:	fa03 f101 	lsl.w	r1, r3, r1
   816f0:	6081      	str	r1, [r0, #8]
   816f2:	4770      	bx	lr

000816f4 <pwm_channel_disable_interrupt>:
#if (SAM3N || SAM4N)
	p_pwm->PWM_IDR = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IDR1 = (1 << ul_event) | (1 << (ul_fault + 16));
   816f4:	f102 0210 	add.w	r2, r2, #16
   816f8:	f04f 0301 	mov.w	r3, #1
   816fc:	fa03 f202 	lsl.w	r2, r3, r2
   81700:	fa03 f101 	lsl.w	r1, r3, r1
   81704:	430a      	orrs	r2, r1
   81706:	6142      	str	r2, [r0, #20]
   81708:	4770      	bx	lr
   8170a:	bf00      	nop

0008170c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   8170c:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA)
	if (p_spi == SPI0) {
   8170e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81712:	f2c4 0300 	movt	r3, #16384	; 0x4000
   81716:	4298      	cmp	r0, r3
   81718:	d106      	bne.n	81728 <spi_enable_clock+0x1c>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8171a:	f04f 0018 	mov.w	r0, #24
   8171e:	f647 2155 	movw	r1, #31317	; 0x7a55
   81722:	f2c0 0108 	movt	r1, #8
   81726:	4788      	blx	r1
   81728:	bd08      	pop	{r3, pc}
   8172a:	bf00      	nop

0008172c <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   8172c:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   8172e:	6903      	ldr	r3, [r0, #16]
   81730:	f013 0f01 	tst.w	r3, #1
   81734:	d020      	beq.n	81778 <spi_read+0x4c>
   81736:	e00a      	b.n	8174e <spi_read+0x22>
   81738:	f103 33ff 	add.w	r3, r3, #4294967295
   8173c:	6904      	ldr	r4, [r0, #16]
   8173e:	f014 0f01 	tst.w	r4, #1
   81742:	d01e      	beq.n	81782 <spi_read+0x56>
   81744:	e003      	b.n	8174e <spi_read+0x22>
   81746:	6904      	ldr	r4, [r0, #16]
   81748:	f014 0f01 	tst.w	r4, #1
   8174c:	d0f4      	beq.n	81738 <spi_read+0xc>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
   8174e:	6883      	ldr	r3, [r0, #8]
   81750:	f640 34b4 	movw	r4, #2996	; 0xbb4
   81754:	f2c2 0407 	movt	r4, #8199	; 0x2007
   81758:	6023      	str	r3, [r4, #0]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
   8175a:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
   8175c:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   81760:	bf1c      	itt	ne
   81762:	f3c3 4003 	ubfxne	r0, r3, #16, #4
   81766:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   81768:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
   8176a:	f04f 0000 	mov.w	r0, #0
   8176e:	e001      	b.n	81774 <spi_read+0x48>
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
   81770:	f04f 0001 	mov.w	r0, #1
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);

	return SPI_OK;
}
   81774:	bc10      	pop	{r4}
   81776:	4770      	bx	lr
   81778:	f643 2499 	movw	r4, #15001	; 0x3a99
   8177c:	f104 33ff 	add.w	r3, r4, #4294967295
   81780:	e7e1      	b.n	81746 <spi_read+0x1a>
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
		if (!timeout--) {
   81782:	3b01      	subs	r3, #1
   81784:	d1df      	bne.n	81746 <spi_read+0x1a>
   81786:	e7f3      	b.n	81770 <spi_read+0x44>

00081788 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   81788:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   8178a:	6904      	ldr	r4, [r0, #16]
   8178c:	f014 0f02 	tst.w	r4, #2
   81790:	d01f      	beq.n	817d2 <spi_write+0x4a>
   81792:	e00a      	b.n	817aa <spi_write+0x22>
   81794:	f104 34ff 	add.w	r4, r4, #4294967295
   81798:	6905      	ldr	r5, [r0, #16]
   8179a:	f015 0f02 	tst.w	r5, #2
   8179e:	d01d      	beq.n	817dc <spi_write+0x54>
   817a0:	e003      	b.n	817aa <spi_write+0x22>
   817a2:	6905      	ldr	r5, [r0, #16]
   817a4:	f015 0f02 	tst.w	r5, #2
   817a8:	d0f4      	beq.n	81794 <spi_write+0xc>
   817aa:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   817ac:	f014 0f02 	tst.w	r4, #2
   817b0:	d007      	beq.n	817c2 <spi_write+0x3a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   817b2:	ea4f 4202 	mov.w	r2, r2, lsl #16
   817b6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   817ba:	4311      	orrs	r1, r2
		if (uc_last) {
   817bc:	b10b      	cbz	r3, 817c2 <spi_write+0x3a>
			value |= SPI_TDR_LASTXFER;
   817be:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   817c2:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   817c4:	f04f 0000 	mov.w	r0, #0
   817c8:	e001      	b.n	817ce <spi_write+0x46>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
   817ca:	f04f 0001 	mov.w	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
   817ce:	bc30      	pop	{r4, r5}
   817d0:	4770      	bx	lr
   817d2:	f643 2599 	movw	r5, #15001	; 0x3a99
   817d6:	f105 34ff 	add.w	r4, r5, #4294967295
   817da:	e7e2      	b.n	817a2 <spi_write+0x1a>
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
   817dc:	3c01      	subs	r4, #1
   817de:	d1e0      	bne.n	817a2 <spi_write+0x1a>
   817e0:	e7f3      	b.n	817ca <spi_write+0x42>
   817e2:	bf00      	nop

000817e4 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   817e4:	b142      	cbz	r2, 817f8 <spi_set_clock_polarity+0x14>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   817e6:	f101 010c 	add.w	r1, r1, #12
   817ea:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   817ee:	f043 0201 	orr.w	r2, r3, #1
   817f2:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   817f6:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   817f8:	f101 010c 	add.w	r1, r1, #12
   817fc:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   81800:	f023 0201 	bic.w	r2, r3, #1
   81804:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   81808:	4770      	bx	lr
   8180a:	bf00      	nop

0008180c <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   8180c:	b142      	cbz	r2, 81820 <spi_set_clock_phase+0x14>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   8180e:	f101 010c 	add.w	r1, r1, #12
   81812:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   81816:	f043 0202 	orr.w	r2, r3, #2
   8181a:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   8181e:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   81820:	f101 010c 	add.w	r1, r1, #12
   81824:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   81828:	f023 0202 	bic.w	r2, r3, #2
   8182c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   81830:	4770      	bx	lr
   81832:	bf00      	nop

00081834 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
   81834:	2a04      	cmp	r2, #4
   81836:	d10e      	bne.n	81856 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   81838:	f101 010c 	add.w	r1, r1, #12
   8183c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   81840:	f023 0208 	bic.w	r2, r3, #8
   81844:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
   81848:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   8184c:	f043 0204 	orr.w	r2, r3, #4
   81850:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   81854:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
   81856:	b972      	cbnz	r2, 81876 <spi_configure_cs_behavior+0x42>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   81858:	f101 010c 	add.w	r1, r1, #12
   8185c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   81860:	f023 0208 	bic.w	r2, r3, #8
   81864:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
   81868:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   8186c:	f023 0204 	bic.w	r2, r3, #4
   81870:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   81874:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
   81876:	2a08      	cmp	r2, #8
   81878:	d107      	bne.n	8188a <spi_configure_cs_behavior+0x56>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
   8187a:	f101 010c 	add.w	r1, r1, #12
   8187e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   81882:	f043 0208 	orr.w	r2, r3, #8
   81886:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   8188a:	4770      	bx	lr

0008188c <spi_set_bits_per_transfer>:
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   8188c:	f101 010c 	add.w	r1, r1, #12
   81890:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   81894:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
   81898:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   8189c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   818a0:	431a      	orrs	r2, r3
   818a2:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   818a6:	4770      	bx	lr

000818a8 <spi_set_baudrate_div>:
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   818a8:	f101 010c 	add.w	r1, r1, #12
   818ac:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   818b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   818b4:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   818b8:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   818bc:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   818c0:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   818c4:	4770      	bx	lr
   818c6:	bf00      	nop

000818c8 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   818c8:	b410      	push	{r4}
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   818ca:	f101 010c 	add.w	r1, r1, #12
   818ce:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   818d2:	b2a4      	uxth	r4, r4
   818d4:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   818d8:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
   818dc:	ea4f 6303 	mov.w	r3, r3, lsl #24
   818e0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   818e4:	4314      	orrs	r4, r2
   818e6:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   818ea:	bc10      	pop	{r4}
   818ec:	4770      	bx	lr
   818ee:	bf00      	nop

000818f0 <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   818f0:	b410      	push	{r4}
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   818f2:	ea4f 1181 	mov.w	r1, r1, lsl #6
   818f6:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   818f8:	f04f 0402 	mov.w	r4, #2
   818fc:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   818fe:	f04f 30ff 	mov.w	r0, #4294967295
   81902:	6298      	str	r0, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   81904:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   81906:	605a      	str	r2, [r3, #4]
}
   81908:	bc10      	pop	{r4}
   8190a:	4770      	bx	lr

0008190c <tc_start>:
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   8190c:	ea4f 1181 	mov.w	r1, r1, lsl #6
   81910:	f04f 0305 	mov.w	r3, #5
   81914:	5043      	str	r3, [r0, r1]
   81916:	4770      	bx	lr

00081918 <tc_write_rc>:
		uint32_t ul_value)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   81918:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   8191c:	61ca      	str	r2, [r1, #28]
   8191e:	4770      	bx	lr

00081920 <tc_enable_interrupt>:
{
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81920:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   81924:	624a      	str	r2, [r1, #36]	; 0x24
   81926:	4770      	bx	lr

00081928 <tc_get_status>:
{
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81928:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   8192c:	6a08      	ldr	r0, [r1, #32]
}
   8192e:	4770      	bx	lr

00081930 <tc_find_mck_divisor>:
 *
 * \return 1 if a proper divisor has been found, otherwise 0.
 */
uint32_t tc_find_mck_divisor(uint32_t ul_freq, uint32_t ul_mck,
		uint32_t *p_uldiv, uint32_t *p_ultcclks, uint32_t ul_boardmck)
{
   81930:	b470      	push	{r4, r5, r6}
   81932:	b087      	sub	sp, #28
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   81934:	f04f 0402 	mov.w	r4, #2
   81938:	9401      	str	r4, [sp, #4]
   8193a:	f04f 0508 	mov.w	r5, #8
   8193e:	9502      	str	r5, [sp, #8]
   81940:	f04f 0420 	mov.w	r4, #32
   81944:	9403      	str	r4, [sp, #12]
   81946:	f04f 0580 	mov.w	r5, #128	; 0x80
   8194a:	9504      	str	r5, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
   8194c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8194e:	ea4f 34d4 	mov.w	r4, r4, lsr #15
 * \return 1 if a proper divisor has been found, otherwise 0.
 */
uint32_t tc_find_mck_divisor(uint32_t ul_freq, uint32_t ul_mck,
		uint32_t *p_uldiv, uint32_t *p_ultcclks, uint32_t ul_boardmck)
{
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   81952:	9405      	str	r4, [sp, #20]
	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
   81954:	ea4f 4551 	mov.w	r5, r1, lsr #17
		if (ul_freq > ul_high) {
   81958:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
   8195c:	d83e      	bhi.n	819dc <tc_find_mck_divisor+0xac>
			return 0;
		} else if (ul_freq >= ul_low) {
   8195e:	42a8      	cmp	r0, r5
   81960:	d251      	bcs.n	81a06 <tc_find_mck_divisor+0xd6>

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
   81962:	f04f 0608 	mov.w	r6, #8
   81966:	fbb1 f5f6 	udiv	r5, r1, r6
		ul_low  = ul_high / TC_DIV_FACTOR;
   8196a:	ea4f 4615 	mov.w	r6, r5, lsr #16
		if (ul_freq > ul_high) {
   8196e:	42a8      	cmp	r0, r5
   81970:	d837      	bhi.n	819e2 <tc_find_mck_divisor+0xb2>
			return 0;
		} else if (ul_freq >= ul_low) {
   81972:	42b0      	cmp	r0, r6
   81974:	d21e      	bcs.n	819b4 <tc_find_mck_divisor+0x84>

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
   81976:	f04f 0520 	mov.w	r5, #32
   8197a:	fbb1 f5f5 	udiv	r5, r1, r5
		ul_low  = ul_high / TC_DIV_FACTOR;
   8197e:	ea4f 4615 	mov.w	r6, r5, lsr #16
		if (ul_freq > ul_high) {
   81982:	42a8      	cmp	r0, r5
   81984:	d830      	bhi.n	819e8 <tc_find_mck_divisor+0xb8>
			return 0;
		} else if (ul_freq >= ul_low) {
   81986:	42b0      	cmp	r0, r6
   81988:	d217      	bcs.n	819ba <tc_find_mck_divisor+0x8a>

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
   8198a:	f04f 0680 	mov.w	r6, #128	; 0x80
   8198e:	fbb1 f5f6 	udiv	r5, r1, r6
		ul_low  = ul_high / TC_DIV_FACTOR;
   81992:	ea4f 4615 	mov.w	r6, r5, lsr #16
		if (ul_freq > ul_high) {
   81996:	42a8      	cmp	r0, r5
   81998:	d829      	bhi.n	819ee <tc_find_mck_divisor+0xbe>
			return 0;
		} else if (ul_freq >= ul_low) {
   8199a:	42b0      	cmp	r0, r6
   8199c:	d210      	bcs.n	819c0 <tc_find_mck_divisor+0x90>

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
   8199e:	fbb1 f1f4 	udiv	r1, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
   819a2:	ea4f 4411 	mov.w	r4, r1, lsr #16
		if (ul_freq > ul_high) {
   819a6:	4281      	cmp	r1, r0
   819a8:	d324      	bcc.n	819f4 <tc_find_mck_divisor+0xc4>
			return 0;
		} else if (ul_freq >= ul_low) {
   819aa:	4284      	cmp	r4, r0
   819ac:	bf98      	it	ls
   819ae:	2104      	movls	r1, #4
   819b0:	d92b      	bls.n	81a0a <tc_find_mck_divisor+0xda>
   819b2:	e022      	b.n	819fa <tc_find_mck_divisor+0xca>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
   819b4:	f04f 0101 	mov.w	r1, #1
   819b8:	e027      	b.n	81a0a <tc_find_mck_divisor+0xda>
   819ba:	f04f 0102 	mov.w	r1, #2
   819be:	e024      	b.n	81a0a <tc_find_mck_divisor+0xda>
   819c0:	f04f 0103 	mov.w	r1, #3
   819c4:	e021      	b.n	81a0a <tc_find_mck_divisor+0xda>
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
		*p_uldiv = divisors[ul_index];
   819c6:	ac06      	add	r4, sp, #24
   819c8:	eb04 0081 	add.w	r0, r4, r1, lsl #2
   819cc:	f850 0c14 	ldr.w	r0, [r0, #-20]
   819d0:	6010      	str	r0, [r2, #0]
	}

	if (p_ultcclks) {
   819d2:	b1ab      	cbz	r3, 81a00 <tc_find_mck_divisor+0xd0>
		*p_ultcclks = ul_index;
   819d4:	6019      	str	r1, [r3, #0]
	}

	return 1;
   819d6:	f04f 0001 	mov.w	r0, #1
   819da:	e019      	b.n	81a10 <tc_find_mck_divisor+0xe0>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
   819dc:	f04f 0000 	mov.w	r0, #0
   819e0:	e016      	b.n	81a10 <tc_find_mck_divisor+0xe0>
   819e2:	f04f 0000 	mov.w	r0, #0
   819e6:	e013      	b.n	81a10 <tc_find_mck_divisor+0xe0>
   819e8:	f04f 0000 	mov.w	r0, #0
   819ec:	e010      	b.n	81a10 <tc_find_mck_divisor+0xe0>
   819ee:	f04f 0000 	mov.w	r0, #0
   819f2:	e00d      	b.n	81a10 <tc_find_mck_divisor+0xe0>
   819f4:	f04f 0000 	mov.w	r0, #0
   819f8:	e00a      	b.n	81a10 <tc_find_mck_divisor+0xe0>
		} else if (ul_freq >= ul_low) {
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
   819fa:	f04f 0000 	mov.w	r0, #0
   819fe:	e007      	b.n	81a10 <tc_find_mck_divisor+0xe0>

	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
   81a00:	f04f 0001 	mov.w	r0, #1
   81a04:	e004      	b.n	81a10 <tc_find_mck_divisor+0xe0>
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
   81a06:	f04f 0100 	mov.w	r1, #0
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
   81a0a:	2a00      	cmp	r2, #0
   81a0c:	d1db      	bne.n	819c6 <tc_find_mck_divisor+0x96>
   81a0e:	e7e0      	b.n	819d2 <tc_find_mck_divisor+0xa2>
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
   81a10:	b007      	add	sp, #28
   81a12:	bc70      	pop	{r4, r5, r6}
   81a14:	4770      	bx	lr
   81a16:	bf00      	nop

00081a18 <twi_enable_master_mode>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   81a18:	f04f 0308 	mov.w	r3, #8
   81a1c:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   81a1e:	f04f 0120 	mov.w	r1, #32
   81a22:	6001      	str	r1, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   81a24:	f04f 0204 	mov.w	r2, #4
   81a28:	6002      	str	r2, [r0, #0]
   81a2a:	4770      	bx	lr

00081a2c <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   81a2c:	f44f 53d4 	mov.w	r3, #6784	; 0x1a80
   81a30:	f2c0 0306 	movt	r3, #6
   81a34:	4299      	cmp	r1, r3
   81a36:	d845      	bhi.n	81ac4 <twi_set_speed+0x98>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   81a38:	ea4f 0141 	mov.w	r1, r1, lsl #1
   81a3c:	fbb2 f2f1 	udiv	r2, r2, r1
   81a40:	f1a2 0204 	sub.w	r2, r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81a44:	2aff      	cmp	r2, #255	; 0xff
   81a46:	d92e      	bls.n	81aa6 <twi_set_speed+0x7a>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   81a48:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81a4c:	2aff      	cmp	r2, #255	; 0xff
   81a4e:	d918      	bls.n	81a82 <twi_set_speed+0x56>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   81a50:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81a54:	2aff      	cmp	r2, #255	; 0xff
   81a56:	d917      	bls.n	81a88 <twi_set_speed+0x5c>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   81a58:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81a5c:	2aff      	cmp	r2, #255	; 0xff
   81a5e:	d916      	bls.n	81a8e <twi_set_speed+0x62>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   81a60:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81a64:	2aff      	cmp	r2, #255	; 0xff
   81a66:	d915      	bls.n	81a94 <twi_set_speed+0x68>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   81a68:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81a6c:	2aff      	cmp	r2, #255	; 0xff
   81a6e:	d914      	bls.n	81a9a <twi_set_speed+0x6e>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   81a70:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81a74:	2aff      	cmp	r2, #255	; 0xff
   81a76:	d913      	bls.n	81aa0 <twi_set_speed+0x74>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   81a78:	ea4f 0252 	mov.w	r2, r2, lsr #1
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
   81a7c:	f04f 0307 	mov.w	r3, #7
   81a80:	e013      	b.n	81aaa <twi_set_speed+0x7e>
   81a82:	f04f 0301 	mov.w	r3, #1
   81a86:	e010      	b.n	81aaa <twi_set_speed+0x7e>
   81a88:	f04f 0302 	mov.w	r3, #2
   81a8c:	e00d      	b.n	81aaa <twi_set_speed+0x7e>
   81a8e:	f04f 0303 	mov.w	r3, #3
   81a92:	e00a      	b.n	81aaa <twi_set_speed+0x7e>
   81a94:	f04f 0304 	mov.w	r3, #4
   81a98:	e007      	b.n	81aaa <twi_set_speed+0x7e>
   81a9a:	f04f 0305 	mov.w	r3, #5
   81a9e:	e004      	b.n	81aaa <twi_set_speed+0x7e>
   81aa0:	f04f 0306 	mov.w	r3, #6
   81aa4:	e001      	b.n	81aaa <twi_set_speed+0x7e>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   81aa6:	f04f 0300 	mov.w	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   81aaa:	ea4f 6102 	mov.w	r1, r2, lsl #24
			TWI_CWGR_CKDIV(ckdiv);
   81aae:	ea4f 4303 	mov.w	r3, r3, lsl #16
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   81ab2:	ea43 4111 	orr.w	r1, r3, r1, lsr #16
   81ab6:	b2d2      	uxtb	r2, r2
   81ab8:	ea41 0302 	orr.w	r3, r1, r2
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   81abc:	6103      	str	r3, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   81abe:	f04f 0000 	mov.w	r0, #0
   81ac2:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   81ac4:	f04f 0001 	mov.w	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   81ac8:	4770      	bx	lr
   81aca:	bf00      	nop

00081acc <twi_reset>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   81acc:	f04f 0380 	mov.w	r3, #128	; 0x80
   81ad0:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   81ad2:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81ad4:	4770      	bx	lr
   81ad6:	bf00      	nop

00081ad8 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   81ad8:	b538      	push	{r3, r4, r5, lr}
   81ada:	4604      	mov	r4, r0
   81adc:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   81ade:	f04f 33ff 	mov.w	r3, #4294967295
   81ae2:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   81ae4:	6a03      	ldr	r3, [r0, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   81ae6:	f641 21cd 	movw	r1, #6861	; 0x1acd
   81aea:	f2c0 0108 	movt	r1, #8
   81aee:	4788      	blx	r1

	twi_enable_master_mode(p_twi);
   81af0:	4620      	mov	r0, r4
   81af2:	f641 2219 	movw	r2, #6681	; 0x1a19
   81af6:	f2c0 0208 	movt	r2, #8
   81afa:	4790      	blx	r2

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   81afc:	4620      	mov	r0, r4
   81afe:	6869      	ldr	r1, [r5, #4]
   81b00:	682a      	ldr	r2, [r5, #0]
   81b02:	f641 232d 	movw	r3, #6701	; 0x1a2d
   81b06:	f2c0 0308 	movt	r3, #8
   81b0a:	4798      	blx	r3
   81b0c:	2801      	cmp	r0, #1
   81b0e:	bf14      	ite	ne
   81b10:	2000      	movne	r0, #0
   81b12:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   81b14:	7a69      	ldrb	r1, [r5, #9]
   81b16:	2901      	cmp	r1, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   81b18:	bf04      	itt	eq
   81b1a:	2140      	moveq	r1, #64	; 0x40
   81b1c:	6021      	streq	r1, [r4, #0]
	}

	return status;
}
   81b1e:	bd38      	pop	{r3, r4, r5, pc}

00081b20 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
   81b20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81b24:	6043      	str	r3, [r0, #4]
   81b26:	4770      	bx	lr

00081b28 <init_board>:
 #include <asf.h>
 #include "init.h"
 
 
 void init_board(void)
 {
   81b28:	b570      	push	{r4, r5, r6, lr}
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81b2a:	f04f 002b 	mov.w	r0, #43	; 0x2b
   81b2e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b32:	f247 7431 	movw	r4, #30513	; 0x7731
   81b36:	f2c0 0408 	movt	r4, #8
   81b3a:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81b3c:	f04f 002a 	mov.w	r0, #42	; 0x2a
   81b40:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b44:	47a0      	blx	r4
	 
	/* Configure HSMCI pins */
	gpio_configure_pin(PIN_HSMCI_MCCDA_GPIO, PIN_HSMCI_MCCDA_FLAGS);
   81b46:	f04f 0014 	mov.w	r0, #20
   81b4a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b4e:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCCK_GPIO, PIN_HSMCI_MCCK_FLAGS);
   81b50:	f04f 0013 	mov.w	r0, #19
   81b54:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b58:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA0_GPIO, PIN_HSMCI_MCDA0_FLAGS);
   81b5a:	f04f 0015 	mov.w	r0, #21
   81b5e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b62:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA1_GPIO, PIN_HSMCI_MCDA1_FLAGS);
   81b64:	f04f 0016 	mov.w	r0, #22
   81b68:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b6c:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA2_GPIO, PIN_HSMCI_MCDA2_FLAGS);
   81b6e:	f04f 0017 	mov.w	r0, #23
   81b72:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b76:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA3_GPIO, PIN_HSMCI_MCDA3_FLAGS);
   81b78:	f04f 0018 	mov.w	r0, #24
   81b7c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b80:	47a0      	blx	r4
	/* Configure SD/MMC card detect pin */
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
   81b82:	f04f 0067 	mov.w	r0, #103	; 0x67
   81b86:	f04f 0108 	mov.w	r1, #8
   81b8a:	47a0      	blx	r4
	
	/* Configure EEPROM pins **/	
	pmc_enable_periph_clk(ID_TWI0);
   81b8c:	f04f 0016 	mov.w	r0, #22
   81b90:	f647 2655 	movw	r6, #31317	; 0x7a55
   81b94:	f2c0 0608 	movt	r6, #8
   81b98:	47b0      	blx	r6
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   81b9a:	f04f 0011 	mov.w	r0, #17
   81b9e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81ba2:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   81ba4:	f04f 0012 	mov.w	r0, #18
   81ba8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81bac:	47a0      	blx	r4
	 
	/* Enable power to the SD card slot */
	pmc_enable_periph_clk(VDD_MCI_PIO_ID);
   81bae:	f04f 000c 	mov.w	r0, #12
   81bb2:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81bb4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
   81bb8:	f2c4 050e 	movt	r5, #16398	; 0x400e
   81bbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   81bc0:	612b      	str	r3, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81bc2:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81bc6:	636b      	str	r3, [r5, #52]	; 0x34
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81bc8:	f44f 6460 	mov.w	r4, #3584	; 0xe00
   81bcc:	f2c4 040e 	movt	r4, #16398	; 0x400e
   81bd0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   81bd4:	6620      	str	r0, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81bd6:	6560      	str	r0, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   81bd8:	6260      	str	r0, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   81bda:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   81bde:	6f22      	ldr	r2, [r4, #112]	; 0x70
   81be0:	4302      	orrs	r2, r0
   81be2:	6722      	str	r2, [r4, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   81be4:	6060      	str	r0, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81be6:	f04f 0101 	mov.w	r1, #1
   81bea:	6621      	str	r1, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81bec:	6561      	str	r1, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   81bee:	6261      	str	r1, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   81bf0:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   81bf4:	6f23      	ldr	r3, [r4, #112]	; 0x70
   81bf6:	430b      	orrs	r3, r1
   81bf8:	6723      	str	r3, [r4, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   81bfa:	6061      	str	r1, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81bfc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   81c00:	6620      	str	r0, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81c02:	6560      	str	r0, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   81c04:	6260      	str	r0, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   81c06:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   81c0a:	6f22      	ldr	r2, [r4, #112]	; 0x70
   81c0c:	4302      	orrs	r2, r0
   81c0e:	6722      	str	r2, [r4, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   81c10:	6060      	str	r0, [r4, #4]
	ioport_disable_pin(PIN_LED2_GPIO);
	ioport_set_pin_mode(PIN_LED3_GPIO, PIN_LED3_FLAGS);
	ioport_disable_pin(PIN_LED3_GPIO);
	 	 
	/* User button */
	pmc_enable_periph_clk(USR_BUTTON_PIO_ID);
   81c12:	f04f 000c 	mov.w	r0, #12
   81c16:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   81c18:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   81c1c:	6169      	str	r1, [r5, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81c1e:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   81c22:	6669      	str	r1, [r5, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81c24:	6569      	str	r1, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   81c26:	6229      	str	r1, [r5, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   81c28:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81c2c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   81c2e:	f423 0000 	bic.w	r0, r3, #8388608	; 0x800000
   81c32:	6728      	str	r0, [r5, #112]	; 0x70
	ioport_set_pin_dir(GPIO_USR_BUTTON, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_USR_BUTTON, GPIO_USR_BUTTON_FLAGS);
	 
	/* Sync signals */
	pmc_enable_periph_clk(SYNC_PIO_ID);
   81c34:	f04f 000e 	mov.w	r0, #14
   81c38:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   81c3a:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
   81c3e:	f2c4 050e 	movt	r5, #16398	; 0x400e
   81c42:	f44f 6280 	mov.w	r2, #1024	; 0x400
   81c46:	616a      	str	r2, [r5, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81c48:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   81c4c:	666a      	str	r2, [r5, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81c4e:	656a      	str	r2, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   81c50:	622a      	str	r2, [r5, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   81c52:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81c56:	6f29      	ldr	r1, [r5, #112]	; 0x70
   81c58:	f421 6380 	bic.w	r3, r1, #1024	; 0x400
   81c5c:	672b      	str	r3, [r5, #112]	; 0x70
	ioport_set_pin_dir(GPIO_SYNC, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_SYNC, GPIO_SYNC_FLAGS);
	pmc_enable_periph_clk(SYNC_READ_PIO_ID);
   81c5e:	f04f 000b 	mov.w	r0, #11
   81c62:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81c64:	f04f 0020 	mov.w	r0, #32
   81c68:	6120      	str	r0, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81c6a:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81c6e:	6360      	str	r0, [r4, #52]	; 0x34
	ioport_set_pin_dir(SYNC_READ_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(SYNC_READ_GPIO, SYNC_READ_ACTIVE_LEVEL);
	pmc_enable_periph_clk(SYNC_WRITE_PIO_ID);
   81c70:	f04f 000b 	mov.w	r0, #11
   81c74:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81c76:	f04f 0280 	mov.w	r2, #128	; 0x80
   81c7a:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81c7c:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81c80:	6322      	str	r2, [r4, #48]	; 0x30
	ioport_set_pin_dir(SYNC_WRITE_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(SYNC_WRITE_GPIO, SYNC_WRITE_INACTIVE_LEVEL);
	
	/* 12v detect */
	pmc_enable_periph_clk(DET_12V_PIO_ID);
   81c82:	f04f 000b 	mov.w	r0, #11
   81c86:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   81c88:	f04f 0102 	mov.w	r1, #2
   81c8c:	6161      	str	r1, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81c8e:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81c92:	6621      	str	r1, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81c94:	6561      	str	r1, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   81c96:	6221      	str	r1, [r4, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   81c98:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81c9c:	6f23      	ldr	r3, [r4, #112]	; 0x70
   81c9e:	f023 0002 	bic.w	r0, r3, #2
   81ca2:	6720      	str	r0, [r4, #112]	; 0x70
	ioport_set_pin_dir(GPIO_DET_12V, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_DET_12V, GPIO_DET_12V_FLAGS);
	
	/* 12v power ok */
	pmc_enable_periph_clk(OK_12V_PIO_ID);
   81ca4:	f04f 000e 	mov.w	r0, #14
   81ca8:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   81caa:	f44f 7280 	mov.w	r2, #256	; 0x100
   81cae:	616a      	str	r2, [r5, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81cb0:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81cb4:	662a      	str	r2, [r5, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81cb6:	656a      	str	r2, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   81cb8:	622a      	str	r2, [r5, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   81cba:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81cbe:	6f29      	ldr	r1, [r5, #112]	; 0x70
   81cc0:	f421 7380 	bic.w	r3, r1, #256	; 0x100
   81cc4:	672b      	str	r3, [r5, #112]	; 0x70
	ioport_set_pin_dir(GPIO_OK_12V, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_OK_12V, GPIO_OK_12V_FLAGS);
	
	/* 12v enable */	
	pmc_enable_periph_clk(ENABLE_12V_PIO_ID);
   81cc6:	f04f 000e 	mov.w	r0, #14
   81cca:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81ccc:	f44f 7000 	mov.w	r0, #512	; 0x200
   81cd0:	6128      	str	r0, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81cd2:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81cd6:	6368      	str	r0, [r5, #52]	; 0x34
   81cd8:	bd70      	pop	{r4, r5, r6, pc}
   81cda:	bf00      	nop

00081cdc <switch_on_off_lights>:
uint16_t current_attenution = 127;


void switch_on_off_lights(uint16_t bool_lights)
{
	lights_off = bool_lights;
   81cdc:	f640 33c0 	movw	r3, #3008	; 0xbc0
   81ce0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81ce4:	8018      	strh	r0, [r3, #0]
   81ce6:	4770      	bx	lr

00081ce8 <led_activity_routine>:
}

void led_activity_routine(void)
{
   81ce8:	b508      	push	{r3, lr}
	
	if((get_ok_12v_status() == RETURN_NOK) || (lights_off == TRUE))
   81cea:	f642 2305 	movw	r3, #10757	; 0x2a05
   81cee:	f2c0 0308 	movt	r3, #8
   81cf2:	4798      	blx	r3
   81cf4:	b130      	cbz	r0, 81d04 <led_activity_routine+0x1c>
   81cf6:	f640 30c0 	movw	r0, #3008	; 0xbc0
   81cfa:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81cfe:	8801      	ldrh	r1, [r0, #0]
   81d00:	2901      	cmp	r1, #1
   81d02:	d130      	bne.n	81d66 <led_activity_routine+0x7e>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81d04:	f44f 6360 	mov.w	r3, #3584	; 0xe00
   81d08:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81d0c:	f04f 0040 	mov.w	r0, #64	; 0x40
   81d10:	6318      	str	r0, [r3, #48]	; 0x30
   81d12:	f04f 0108 	mov.w	r1, #8
   81d16:	6319      	str	r1, [r3, #48]	; 0x30
   81d18:	f04f 0210 	mov.w	r2, #16
   81d1c:	631a      	str	r2, [r3, #48]	; 0x30
   81d1e:	f04f 0004 	mov.w	r0, #4
   81d22:	6318      	str	r0, [r3, #48]	; 0x30
   81d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81d28:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81d2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   81d30:	6319      	str	r1, [r3, #48]	; 0x30
   81d32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81d36:	631a      	str	r2, [r3, #48]	; 0x30
   81d38:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81d3c:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81d40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   81d44:	6303      	str	r3, [r0, #48]	; 0x30
   81d46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   81d4a:	6301      	str	r1, [r0, #48]	; 0x30
   81d4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81d50:	6302      	str	r2, [r0, #48]	; 0x30
   81d52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   81d56:	6303      	str	r3, [r0, #48]	; 0x30
   81d58:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   81d5c:	6301      	str	r1, [r0, #48]	; 0x30
   81d5e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   81d62:	6302      	str	r2, [r0, #48]	; 0x30
   81d64:	bd08      	pop	{r3, pc}
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81d66:	f44f 6260 	mov.w	r2, #3584	; 0xe00
   81d6a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81d6e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
		ioport_set_pin_level(OUT_CH3_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
		ioport_set_pin_level(OUT_CH3_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);
		return;
	}
	
	if(ioport_get_pin_level(CLK_IN_DET_GPIO))
   81d70:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   81d74:	d03d      	beq.n	81df2 <led_activity_routine+0x10a>
	{		
		if(clk_in_color == GREEN)
   81d76:	f240 0034 	movw	r0, #52	; 0x34
   81d7a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81d7e:	8801      	ldrh	r1, [r0, #0]
   81d80:	2903      	cmp	r1, #3
   81d82:	d110      	bne.n	81da6 <led_activity_routine+0xbe>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81d84:	f44f 6260 	mov.w	r2, #3584	; 0xe00
   81d88:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81d8c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   81d8e:	f013 0f10 	tst.w	r3, #16
		port->PIO_CODR = mask;
   81d92:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   81d96:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81d9a:	f04f 0110 	mov.w	r1, #16
   81d9e:	bf14      	ite	ne
   81da0:	6341      	strne	r1, [r0, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81da2:	6301      	streq	r1, [r0, #48]	; 0x30
   81da4:	e032      	b.n	81e0c <led_activity_routine+0x124>
		{
			ioport_toggle_pin_level(IN_CLK_LED3_GPIO);
		}
		else if(clk_in_color == BLUE)
   81da6:	2902      	cmp	r1, #2
   81da8:	d110      	bne.n	81dcc <led_activity_routine+0xe4>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81daa:	f44f 6260 	mov.w	r2, #3584	; 0xe00
   81dae:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81db2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   81db4:	f013 0f08 	tst.w	r3, #8
		port->PIO_CODR = mask;
   81db8:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   81dbc:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81dc0:	f04f 0108 	mov.w	r1, #8
   81dc4:	bf14      	ite	ne
   81dc6:	6341      	strne	r1, [r0, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81dc8:	6301      	streq	r1, [r0, #48]	; 0x30
   81dca:	e01f      	b.n	81e0c <led_activity_routine+0x124>
		{
			ioport_toggle_pin_level(IN_CLK_LED2_GPIO);
		}
		else if(clk_in_color == RED)
   81dcc:	2901      	cmp	r1, #1
   81dce:	d11d      	bne.n	81e0c <led_activity_routine+0x124>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81dd0:	f44f 6260 	mov.w	r2, #3584	; 0xe00
   81dd4:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81dd8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   81dda:	f013 0f40 	tst.w	r3, #64	; 0x40
		port->PIO_CODR = mask;
   81dde:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   81de2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81de6:	f04f 0140 	mov.w	r1, #64	; 0x40
   81dea:	bf14      	ite	ne
   81dec:	6341      	strne	r1, [r0, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81dee:	6301      	streq	r1, [r0, #48]	; 0x30
   81df0:	e00c      	b.n	81e0c <led_activity_routine+0x124>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81df2:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   81df6:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81dfa:	f04f 0140 	mov.w	r1, #64	; 0x40
   81dfe:	6301      	str	r1, [r0, #48]	; 0x30
   81e00:	f04f 0208 	mov.w	r2, #8
   81e04:	6302      	str	r2, [r0, #48]	; 0x30
   81e06:	f04f 0310 	mov.w	r3, #16
   81e0a:	6303      	str	r3, [r0, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81e0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81e10:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81e14:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
		ioport_set_pin_level(IN_CLK_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
		ioport_set_pin_level(IN_CLK_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
		ioport_set_pin_level(IN_CLK_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);
	}	
	
	if(ioport_get_pin_level(DATA_IN_DET_GPIO))
   81e16:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   81e1a:	d03d      	beq.n	81e98 <led_activity_routine+0x1b0>
	{		
		if(data_in_color == GREEN)
   81e1c:	f240 0132 	movw	r1, #50	; 0x32
   81e20:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81e24:	880b      	ldrh	r3, [r1, #0]
   81e26:	2b03      	cmp	r3, #3
   81e28:	d110      	bne.n	81e4c <led_activity_routine+0x164>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81e2e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81e32:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
   81e34:	f410 5f80 	tst.w	r0, #4096	; 0x1000
		port->PIO_CODR = mask;
   81e38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81e3c:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81e44:	bf14      	ite	ne
   81e46:	634b      	strne	r3, [r1, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81e48:	630b      	streq	r3, [r1, #48]	; 0x30
   81e4a:	e036      	b.n	81eba <led_activity_routine+0x1d2>
		{
			ioport_toggle_pin_level(IN_DAT_LED3_GPIO);
		}
		else if(data_in_color == BLUE)
   81e4c:	2b02      	cmp	r3, #2
   81e4e:	d110      	bne.n	81e72 <led_activity_routine+0x18a>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81e50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81e54:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81e58:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
   81e5a:	f410 5f00 	tst.w	r0, #8192	; 0x2000
		port->PIO_CODR = mask;
   81e5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81e62:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81e6a:	bf14      	ite	ne
   81e6c:	634b      	strne	r3, [r1, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81e6e:	630b      	streq	r3, [r1, #48]	; 0x30
   81e70:	e023      	b.n	81eba <led_activity_routine+0x1d2>
		{
			ioport_toggle_pin_level(IN_DAT_LED2_GPIO);
		}
		else if(data_in_color == RED)
   81e72:	2b01      	cmp	r3, #1
   81e74:	d121      	bne.n	81eba <led_activity_routine+0x1d2>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81e76:	f44f 6260 	mov.w	r2, #3584	; 0xe00
   81e7a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81e7e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
   81e80:	f010 0f04 	tst.w	r0, #4
		port->PIO_CODR = mask;
   81e84:	f44f 6160 	mov.w	r1, #3584	; 0xe00
   81e88:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81e8c:	f04f 0304 	mov.w	r3, #4
   81e90:	bf14      	ite	ne
   81e92:	634b      	strne	r3, [r1, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81e94:	630b      	streq	r3, [r1, #48]	; 0x30
   81e96:	e010      	b.n	81eba <led_activity_routine+0x1d2>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81e98:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   81e9c:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81ea0:	f04f 0104 	mov.w	r1, #4
   81ea4:	6301      	str	r1, [r0, #48]	; 0x30
   81ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81eaa:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81eae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81eb2:	631a      	str	r2, [r3, #48]	; 0x30
   81eb4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   81eb8:	6318      	str	r0, [r3, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81eba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81ebe:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81ec2:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
		ioport_set_pin_level(IN_DAT_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
		ioport_set_pin_level(IN_DAT_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
		ioport_set_pin_level(IN_DAT_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);
	}
	
	if(!ioport_get_pin_level(OUT_PULSE_DET_GPIO)) // Signal are inverted for routing facility (OG 10.04.2014)
   81ec4:	f010 0f04 	tst.w	r0, #4
   81ec8:	d16d      	bne.n	81fa6 <led_activity_routine+0x2be>
	{		
		if(ch_out_color == GREEN)
   81eca:	f240 0136 	movw	r1, #54	; 0x36
   81ece:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81ed2:	880b      	ldrh	r3, [r1, #0]
   81ed4:	2b03      	cmp	r3, #3
   81ed6:	d120      	bne.n	81f1a <led_activity_routine+0x232>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81ed8:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   81edc:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81ee0:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
   81ee2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
		port->PIO_CODR = mask;
   81ee6:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   81eea:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81ef2:	bf14      	ite	ne
   81ef4:	634b      	strne	r3, [r1, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81ef6:	630b      	streq	r3, [r1, #48]	; 0x30
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81ef8:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   81efc:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81f00:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
   81f02:	f410 2f80 	tst.w	r0, #262144	; 0x40000
		port->PIO_CODR = mask;
   81f06:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   81f0a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81f0e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   81f12:	bf14      	ite	ne
   81f14:	634b      	strne	r3, [r1, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81f16:	630b      	streq	r3, [r1, #48]	; 0x30
   81f18:	e05b      	b.n	81fd2 <led_activity_routine+0x2ea>
		{
			ioport_toggle_pin_level(OUT_CH1_CH2_LED3_GPIO);
			ioport_toggle_pin_level(OUT_CH3_LED3_GPIO);
		}
		else if(ch_out_color == BLUE)
   81f1a:	2b02      	cmp	r3, #2
   81f1c:	d120      	bne.n	81f60 <led_activity_routine+0x278>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81f1e:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   81f22:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81f26:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
   81f28:	f410 4f80 	tst.w	r0, #16384	; 0x4000
		port->PIO_CODR = mask;
   81f2c:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   81f30:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81f34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   81f38:	bf14      	ite	ne
   81f3a:	634b      	strne	r3, [r1, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81f3c:	630b      	streq	r3, [r1, #48]	; 0x30
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81f3e:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   81f42:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81f46:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
   81f48:	f410 2f00 	tst.w	r0, #524288	; 0x80000
		port->PIO_CODR = mask;
   81f4c:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   81f50:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81f54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   81f58:	bf14      	ite	ne
   81f5a:	634b      	strne	r3, [r1, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81f5c:	630b      	streq	r3, [r1, #48]	; 0x30
   81f5e:	e038      	b.n	81fd2 <led_activity_routine+0x2ea>
		{
			ioport_toggle_pin_level(OUT_CH1_CH2_LED2_GPIO);
			ioport_toggle_pin_level(OUT_CH3_LED2_GPIO);
		}
		else if(ch_out_color == RED)
   81f60:	2b01      	cmp	r3, #1
   81f62:	d136      	bne.n	81fd2 <led_activity_routine+0x2ea>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81f64:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   81f68:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81f6c:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
   81f6e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		port->PIO_CODR = mask;
   81f72:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   81f76:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81f7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   81f7e:	bf14      	ite	ne
   81f80:	634b      	strne	r3, [r1, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81f82:	630b      	streq	r3, [r1, #48]	; 0x30
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81f84:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   81f88:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81f8c:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
   81f8e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
		port->PIO_CODR = mask;
   81f92:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   81f96:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   81f9e:	bf14      	ite	ne
   81fa0:	634b      	strne	r3, [r1, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81fa2:	630b      	streq	r3, [r1, #48]	; 0x30
   81fa4:	e015      	b.n	81fd2 <led_activity_routine+0x2ea>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81fa6:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   81faa:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81fae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   81fb2:	630b      	str	r3, [r1, #48]	; 0x30
   81fb4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   81fb8:	630a      	str	r2, [r1, #48]	; 0x30
   81fba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   81fbe:	6308      	str	r0, [r1, #48]	; 0x30
   81fc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   81fc4:	630b      	str	r3, [r1, #48]	; 0x30
   81fc6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81fca:	630a      	str	r2, [r1, #48]	; 0x30
   81fcc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   81fd0:	6308      	str	r0, [r1, #48]	; 0x30
   81fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81fd6:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81fda:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   81fde:	6318      	str	r0, [r3, #48]	; 0x30
   81fe0:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   81fe4:	6319      	str	r1, [r3, #48]	; 0x30
   81fe6:	f04f 0201 	mov.w	r2, #1
   81fea:	631a      	str	r2, [r3, #48]	; 0x30
	}
	
	ioport_set_pin_level(DATA_PULSE_RST_GPIO, IOPORT_PIN_LEVEL_HIGH);
	ioport_set_pin_level(CLK_PULSE_RST_GPIO, IOPORT_PIN_LEVEL_HIGH);
	ioport_set_pin_level(OUT_PULSE_RST_GPIO, IOPORT_PIN_LEVEL_HIGH);
	asm("NOP");asm("NOP");asm("NOP");asm("NOP");asm("NOP");
   81fec:	bf00      	nop
   81fee:	bf00      	nop
   81ff0:	bf00      	nop
   81ff2:	bf00      	nop
   81ff4:	bf00      	nop
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81ff6:	6358      	str	r0, [r3, #52]	; 0x34
   81ff8:	6359      	str	r1, [r3, #52]	; 0x34
   81ffa:	635a      	str	r2, [r3, #52]	; 0x34
   81ffc:	bd08      	pop	{r3, pc}
   81ffe:	bf00      	nop

00082000 <TC1_Handler>:

/**
 * \brief TC0,1 overflow interrupt
 */
void TC1_Handler(void)
{
   82000:	b508      	push	{r3, lr}
	tc_get_status(TC0, 1);
   82002:	f04f 0000 	mov.w	r0, #0
   82006:	f2c4 0008 	movt	r0, #16392	; 0x4008
   8200a:	f04f 0101 	mov.w	r1, #1
   8200e:	f641 1329 	movw	r3, #6441	; 0x1929
   82012:	f2c0 0308 	movt	r3, #8
   82016:	4798      	blx	r3
	led_activity_routine();
   82018:	f641 40e9 	movw	r0, #7401	; 0x1ce9
   8201c:	f2c0 0008 	movt	r0, #8
   82020:	4780      	blx	r0
   82022:	bd08      	pop	{r3, pc}

00082024 <init_module_peripherals_bp>:
}

// Here should be all the initialization functions for the module before 12v power
void init_module_peripherals_bp(void)
{
   82024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82028:	b085      	sub	sp, #20
	/* LEDs IO */
	pmc_enable_periph_clk(IN_CLK_LED1_PIO_ID);
   8202a:	f04f 000b 	mov.w	r0, #11
   8202e:	f647 2855 	movw	r8, #31317	; 0x7a55
   82032:	f2c0 0808 	movt	r8, #8
   82036:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82038:	f44f 6a60 	mov.w	sl, #3584	; 0xe00
   8203c:	f2c4 0a0e 	movt	sl, #16398	; 0x400e
   82040:	f04f 0340 	mov.w	r3, #64	; 0x40
   82044:	f8ca 3010 	str.w	r3, [sl, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82048:	f8ca 30a0 	str.w	r3, [sl, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8204c:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
	ioport_set_pin_dir(IN_CLK_LED1_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CLK_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(IN_CLK_LED2_PIO_ID);
   82050:	f04f 000b 	mov.w	r0, #11
   82054:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82056:	f04f 0108 	mov.w	r1, #8
   8205a:	f8ca 1010 	str.w	r1, [sl, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8205e:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82062:	f8ca 1030 	str.w	r1, [sl, #48]	; 0x30
	ioport_set_pin_dir(IN_CLK_LED2_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CLK_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(IN_CLK_LED3_PIO_ID);
   82066:	f04f 000b 	mov.w	r0, #11
   8206a:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8206c:	f04f 0210 	mov.w	r2, #16
   82070:	f8ca 2010 	str.w	r2, [sl, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82074:	f8ca 20a0 	str.w	r2, [sl, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82078:	f8ca 2030 	str.w	r2, [sl, #48]	; 0x30
	ioport_set_pin_dir(IN_CLK_LED3_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CLK_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);	
	pmc_enable_periph_clk(IN_DAT_LED1_PIO_ID);
   8207c:	f04f 000b 	mov.w	r0, #11
   82080:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82082:	f04f 0004 	mov.w	r0, #4
   82086:	f8ca 0010 	str.w	r0, [sl, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8208a:	f8ca 00a0 	str.w	r0, [sl, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8208e:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
	ioport_set_pin_dir(IN_DAT_LED1_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_DAT_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(IN_DAT_LED2_PIO_ID);
   82092:	f04f 000c 	mov.w	r0, #12
   82096:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82098:	f44f 5780 	mov.w	r7, #4096	; 0x1000
   8209c:	f2c4 070e 	movt	r7, #16398	; 0x400e
   820a0:	f44f 5400 	mov.w	r4, #8192	; 0x2000
   820a4:	613c      	str	r4, [r7, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   820a6:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   820aa:	633c      	str	r4, [r7, #48]	; 0x30
	ioport_set_pin_dir(IN_DAT_LED2_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_DAT_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(IN_DAT_LED3_PIO_ID);
   820ac:	f04f 000c 	mov.w	r0, #12
   820b0:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   820b2:	f44f 5580 	mov.w	r5, #4096	; 0x1000
   820b6:	613d      	str	r5, [r7, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   820b8:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   820bc:	633d      	str	r5, [r7, #48]	; 0x30
	ioport_set_pin_dir(IN_DAT_LED3_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_DAT_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);	
	pmc_enable_periph_clk(OUT_CH1_CH2_LED1_PIO_ID);
   820be:	f04f 000d 	mov.w	r0, #13
   820c2:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   820c4:	f44f 5990 	mov.w	r9, #4608	; 0x1200
   820c8:	f2c4 090e 	movt	r9, #16398	; 0x400e
   820cc:	f44f 3680 	mov.w	r6, #65536	; 0x10000
   820d0:	f8c9 6010 	str.w	r6, [r9, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   820d4:	f8c9 60a0 	str.w	r6, [r9, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   820d8:	f8c9 6030 	str.w	r6, [r9, #48]	; 0x30
	ioport_set_pin_dir(OUT_CH1_CH2_LED1_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(OUT_CH1_CH2_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(OUT_CH1_CH2_LED2_PIO_ID);
   820dc:	f04f 000d 	mov.w	r0, #13
   820e0:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   820e2:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   820e6:	f8c9 4010 	str.w	r4, [r9, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   820ea:	f8c9 40a0 	str.w	r4, [r9, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   820ee:	f8c9 4030 	str.w	r4, [r9, #48]	; 0x30
	ioport_set_pin_dir(OUT_CH1_CH2_LED2_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(OUT_CH1_CH2_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(OUT_CH1_CH2_LED3_PIO_ID);
   820f2:	f04f 000d 	mov.w	r0, #13
   820f6:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   820f8:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   820fc:	f8c9 5010 	str.w	r5, [r9, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82100:	f8c9 50a0 	str.w	r5, [r9, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82104:	f8c9 5030 	str.w	r5, [r9, #48]	; 0x30
	ioport_set_pin_dir(OUT_CH1_CH2_LED3_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(OUT_CH1_CH2_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);	
	pmc_enable_periph_clk(OUT_CH3_LED1_PIO_ID);
   82108:	f04f 000d 	mov.w	r0, #13
   8210c:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8210e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   82112:	f8c9 3010 	str.w	r3, [r9, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82116:	f8c9 30a0 	str.w	r3, [r9, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8211a:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
	ioport_set_pin_dir(OUT_CH3_LED1_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(OUT_CH3_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(OUT_CH3_LED2_PIO_ID);
   8211e:	f04f 000d 	mov.w	r0, #13
   82122:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82124:	f44f 2b00 	mov.w	fp, #524288	; 0x80000
   82128:	f8c9 b010 	str.w	fp, [r9, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8212c:	f8c9 b0a0 	str.w	fp, [r9, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82130:	f8c9 b030 	str.w	fp, [r9, #48]	; 0x30
	ioport_set_pin_dir(OUT_CH3_LED2_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(OUT_CH3_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(OUT_CH3_LED3_PIO_ID);
   82134:	f04f 000d 	mov.w	r0, #13
   82138:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8213a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   8213e:	f8c9 1010 	str.w	r1, [r9, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82142:	f8c9 10a0 	str.w	r1, [r9, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82146:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
	ioport_set_pin_dir(OUT_CH3_LED3_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(OUT_CH3_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);
	
	/* Pulse inputs/state & d reset output */
	pmc_enable_periph_clk(OUT_PULSE_DET_PIO_ID);
   8214a:	f04f 000c 	mov.w	r0, #12
   8214e:	47c0      	blx	r8
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   82150:	f04f 0204 	mov.w	r2, #4
   82154:	617a      	str	r2, [r7, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82156:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
	ioport_set_pin_dir(OUT_PULSE_DET_GPIO, IOPORT_DIR_INPUT);
	pmc_enable_periph_clk(DATA_IN_DET_PIO_ID);
   8215a:	f04f 000c 	mov.w	r0, #12
   8215e:	47c0      	blx	r8
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   82160:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   82164:	6178      	str	r0, [r7, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82166:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
	ioport_set_pin_dir(DATA_IN_DET_GPIO, IOPORT_DIR_INPUT);
	pmc_enable_periph_clk(CLK_IN_DET_PIO_ID);
   8216a:	f04f 000b 	mov.w	r0, #11
   8216e:	47c0      	blx	r8
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   82170:	f8ca 6014 	str.w	r6, [sl, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82174:	f8ca 60a0 	str.w	r6, [sl, #160]	; 0xa0
	ioport_set_pin_dir(CLK_IN_DET_GPIO, IOPORT_DIR_INPUT);	
	pmc_enable_periph_clk(OUT_PULSE_STATE_PIO_ID);
   82178:	f04f 000c 	mov.w	r0, #12
   8217c:	47c0      	blx	r8
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8217e:	f04f 0308 	mov.w	r3, #8
   82182:	617b      	str	r3, [r7, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82184:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	ioport_set_pin_dir(OUT_PULSE_STATE_GPIO, IOPORT_DIR_INPUT);
	pmc_enable_periph_clk(DATA_IN_STATE_PIO_ID);
   82188:	f04f 000c 	mov.w	r0, #12
   8218c:	47c0      	blx	r8
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8218e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   82192:	6179      	str	r1, [r7, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82194:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
	ioport_set_pin_dir(DATA_IN_STATE_GPIO, IOPORT_DIR_INPUT);
	pmc_enable_periph_clk(CLK_IN_STATE_PIO_ID);
   82198:	f04f 000c 	mov.w	r0, #12
   8219c:	47c0      	blx	r8
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8219e:	617e      	str	r6, [r7, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   821a0:	f8c7 60a0 	str.w	r6, [r7, #160]	; 0xa0
	ioport_set_pin_dir(CLK_IN_STATE_GPIO, IOPORT_DIR_INPUT);	
	pmc_enable_periph_clk(OUT_PULSE_RST_PIO_ID);
   821a4:	f04f 000c 	mov.w	r0, #12
   821a8:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   821aa:	f04f 0601 	mov.w	r6, #1
   821ae:	613e      	str	r6, [r7, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   821b0:	f8c7 60a0 	str.w	r6, [r7, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   821b4:	637e      	str	r6, [r7, #52]	; 0x34
	ioport_set_pin_dir(OUT_PULSE_RST_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(OUT_PULSE_RST_GPIO, IOPORT_PIN_LEVEL_LOW);	
	pmc_enable_periph_clk(DATA_PULSE_RST_PIO_ID);
   821b6:	f04f 000c 	mov.w	r0, #12
   821ba:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   821bc:	f8c7 b010 	str.w	fp, [r7, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   821c0:	f8c7 b0a0 	str.w	fp, [r7, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   821c4:	f8c7 b034 	str.w	fp, [r7, #52]	; 0x34
	ioport_set_pin_dir(DATA_PULSE_RST_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(DATA_PULSE_RST_GPIO, IOPORT_PIN_LEVEL_LOW);	
	pmc_enable_periph_clk(CLK_PULSE_RST_PIO_ID);
   821c8:	f04f 000c 	mov.w	r0, #12
   821cc:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   821ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   821d2:	613a      	str	r2, [r7, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   821d4:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   821d8:	637a      	str	r2, [r7, #52]	; 0x34
	ioport_set_pin_dir(CLK_PULSE_RST_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(CLK_PULSE_RST_GPIO, IOPORT_PIN_LEVEL_LOW);
	
	/* Sload */
	pmc_enable_periph_clk(DATA_DELAY_SLOAD_PIO_ID);
   821da:	f04f 000c 	mov.w	r0, #12
   821de:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   821e0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   821e4:	6138      	str	r0, [r7, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   821e6:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   821ea:	6378      	str	r0, [r7, #52]	; 0x34
	ioport_set_pin_dir(DATA_DELAY_SLOAD_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(DATA_DELAY_SLOAD_GPIO, IOPORT_PIN_LEVEL_LOW);
	pmc_enable_periph_clk(CLOCK_DELAY_SLOAD_PIO_ID);
   821ec:	f04f 000b 	mov.w	r0, #11
   821f0:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   821f2:	f04f 5b80 	mov.w	fp, #268435456	; 0x10000000
   821f6:	f8ca b010 	str.w	fp, [sl, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   821fa:	f8ca b0a0 	str.w	fp, [sl, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   821fe:	f8ca b034 	str.w	fp, [sl, #52]	; 0x34
	ioport_set_pin_dir(CLOCK_DELAY_SLOAD_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(CLOCK_DELAY_SLOAD_GPIO, IOPORT_PIN_LEVEL_LOW);
	pmc_enable_periph_clk(RESET_DELAY_SLOAD_PIO_ID);
   82202:	f04f 000b 	mov.w	r0, #11
   82206:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82208:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   8220c:	f8ca 3010 	str.w	r3, [sl, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82210:	f8ca 30a0 	str.w	r3, [sl, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82214:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
	ioport_set_pin_dir(RESET_DELAY_SLOAD_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(RESET_DELAY_SLOAD_GPIO, IOPORT_PIN_LEVEL_LOW);
	pmc_enable_periph_clk(RF_ATTEN_SLOAD_PIO_ID);
   82218:	f04f 000c 	mov.w	r0, #12
   8221c:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8221e:	f04f 0a02 	mov.w	sl, #2
   82222:	f8c7 a010 	str.w	sl, [r7, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82226:	f8c7 a0a0 	str.w	sl, [r7, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8222a:	f8c7 a034 	str.w	sl, [r7, #52]	; 0x34
	ioport_set_pin_dir(RF_ATTEN_SLOAD_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(RF_ATTEN_SLOAD_GPIO, IOPORT_PIN_LEVEL_LOW);

	/* Delay enables */
	pmc_enable_periph_clk(DATA_DELAY_EN_PIO_ID);
   8222e:	f04f 000d 	mov.w	r0, #13
   82232:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82234:	f44f 6700 	mov.w	r7, #2048	; 0x800
   82238:	f8c9 7010 	str.w	r7, [r9, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8223c:	f8c9 70a0 	str.w	r7, [r9, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82240:	f8c9 7030 	str.w	r7, [r9, #48]	; 0x30
	ioport_set_pin_dir(DATA_DELAY_EN_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(DATA_DELAY_EN_GPIO, IOPORT_PIN_LEVEL_HIGH);	// default state is HIGH (OG 10.04.2014)
	pmc_enable_periph_clk(CLOCK_DELAY_EN_PIO_ID);
   82244:	f04f 000d 	mov.w	r0, #13
   82248:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8224a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8224e:	f8c9 1010 	str.w	r1, [r9, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82252:	f8c9 10a0 	str.w	r1, [r9, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82256:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
	ioport_set_pin_dir(CLOCK_DELAY_EN_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(CLOCK_DELAY_EN_GPIO, IOPORT_PIN_LEVEL_HIGH);	// default state is HIGH (OG 10.04.2014)
	pmc_enable_periph_clk(RESET_DELAY_EN_PIO_ID);
   8225a:	f04f 000d 	mov.w	r0, #13
   8225e:	47c0      	blx	r8
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82260:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   82264:	f8c9 2010 	str.w	r2, [r9, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82268:	f8c9 20a0 	str.w	r2, [r9, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8226c:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
	uint32_t ul_div;
	uint32_t ul_tcclks;
	/* Get system clock. */
	uint32_t ul_sysclk = sysclk_get_cpu_hz();
	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC1);
   82270:	f04f 001c 	mov.w	r0, #28
   82274:	47c0      	blx	r8
	/* Configure TC for a TC_FREQ frequency and trigger on RC compare. */
	tc_find_mck_divisor(20, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
   82276:	f44f 483d 	mov.w	r8, #48384	; 0xbd00
   8227a:	f2c0 5801 	movt	r8, #1281	; 0x501
   8227e:	f8cd 8000 	str.w	r8, [sp]
   82282:	f04f 0014 	mov.w	r0, #20
   82286:	4641      	mov	r1, r8
   82288:	aa03      	add	r2, sp, #12
   8228a:	ab02      	add	r3, sp, #8
   8228c:	f641 1731 	movw	r7, #6449	; 0x1931
   82290:	f2c0 0708 	movt	r7, #8
   82294:	47b8      	blx	r7
	tc_init(TC0, 1, ul_tcclks | TC_CMR_CPCTRG);
   82296:	f04f 0700 	mov.w	r7, #0
   8229a:	f2c4 0708 	movt	r7, #16392	; 0x4008
   8229e:	4638      	mov	r0, r7
   822a0:	4631      	mov	r1, r6
   822a2:	9a02      	ldr	r2, [sp, #8]
   822a4:	4322      	orrs	r2, r4
   822a6:	f641 03f1 	movw	r3, #6385	; 0x18f1
   822aa:	f2c0 0308 	movt	r3, #8
   822ae:	4798      	blx	r3
	tc_write_rc(TC0, 1, (ul_sysclk / ul_div) / 20);
   822b0:	9803      	ldr	r0, [sp, #12]
   822b2:	fbb8 f1f0 	udiv	r1, r8, r0
   822b6:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   822ba:	f6cc 42cc 	movt	r2, #52428	; 0xcccc
   822be:	fba2 1301 	umull	r1, r3, r2, r1
   822c2:	4638      	mov	r0, r7
   822c4:	4631      	mov	r1, r6
   822c6:	ea4f 1213 	mov.w	r2, r3, lsr #4
   822ca:	f641 1319 	movw	r3, #6425	; 0x1919
   822ce:	f2c0 0308 	movt	r3, #8
   822d2:	4798      	blx	r3
	/* Configure and enable interrupt on RC compare. */
	tc_start(TC0, 1);
   822d4:	4638      	mov	r0, r7
   822d6:	4631      	mov	r1, r6
   822d8:	f641 120d 	movw	r2, #6413	; 0x190d
   822dc:	f2c0 0208 	movt	r2, #8
   822e0:	4790      	blx	r2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   822e2:	f44f 4061 	mov.w	r0, #57600	; 0xe100
   822e6:	f2ce 0000 	movt	r0, #57344	; 0xe000
   822ea:	f8c0 b080 	str.w	fp, [r0, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   822ee:	f8c0 b180 	str.w	fp, [r0, #384]	; 0x180

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   822f2:	f8c0 b000 	str.w	fp, [r0]
	NVIC_DisableIRQ(TC1_IRQn);
	NVIC_ClearPendingIRQ(TC1_IRQn);
	//NVIC_SetPriority(TC1_IRQn, 0);
	NVIC_EnableIRQ((IRQn_Type)ID_TC1);
	tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
   822f6:	4638      	mov	r0, r7
   822f8:	4631      	mov	r1, r6
   822fa:	f04f 0210 	mov.w	r2, #16
   822fe:	f641 1721 	movw	r7, #6433	; 0x1921
   82302:	f2c0 0708 	movt	r7, #8
   82306:	47b8      	blx	r7

	/* SPI interface */
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
   82308:	f04f 0019 	mov.w	r0, #25
   8230c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82310:	f247 7731 	movw	r7, #30513	; 0x7731
   82314:	f2c0 0708 	movt	r7, #8
   82318:	47b8      	blx	r7
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
   8231a:	f04f 001a 	mov.w	r0, #26
   8231e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82322:	47b8      	blx	r7
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
   82324:	f04f 001b 	mov.w	r0, #27
   82328:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8232c:	47b8      	blx	r7
	//gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS); // Controled by software
	
	/* Configure an SPI peripheral. */
	spi_enable_clock(SPI0);
   8232e:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
   82332:	f241 710d 	movw	r1, #5901	; 0x170d
   82336:	f2c0 0108 	movt	r1, #8
   8233a:	4788      	blx	r1
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   8233c:	462b      	mov	r3, r5
   8233e:	f364 431f 	bfi	r3, r4, #16, #16
   82342:	f8c3 a000 	str.w	sl, [r3]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
   82346:	4628      	mov	r0, r5
   82348:	f364 401f 	bfi	r0, r4, #16, #16
   8234c:	f04f 0280 	mov.w	r2, #128	; 0x80
   82350:	6002      	str	r2, [r0, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
   82352:	462f      	mov	r7, r5
   82354:	f364 471f 	bfi	r7, r4, #16, #16
   82358:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   8235c:	6039      	str	r1, [r7, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
   8235e:	462b      	mov	r3, r5
   82360:	f364 431f 	bfi	r3, r4, #16, #16
   82364:	6858      	ldr	r0, [r3, #4]
   82366:	4330      	orrs	r0, r6
   82368:	462a      	mov	r2, r5
   8236a:	f364 421f 	bfi	r2, r4, #16, #16
   8236e:	6050      	str	r0, [r2, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   82370:	462f      	mov	r7, r5
   82372:	f364 471f 	bfi	r7, r4, #16, #16
   82376:	6879      	ldr	r1, [r7, #4]
   82378:	f041 0010 	orr.w	r0, r1, #16
   8237c:	462b      	mov	r3, r5
   8237e:	f364 431f 	bfi	r3, r4, #16, #16
   82382:	6058      	str	r0, [r3, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_variable_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_PS;
   82384:	462a      	mov	r2, r5
   82386:	f364 421f 	bfi	r2, r4, #16, #16
   8238a:	6857      	ldr	r7, [r2, #4]
   8238c:	ea47 010a 	orr.w	r1, r7, sl
   82390:	4628      	mov	r0, r5
   82392:	f364 401f 	bfi	r0, r4, #16, #16
   82396:	6041      	str	r1, [r0, #4]
	
	/* Set variable chip select */
	spi_set_variable_peripheral_select(SPI0);
	
	/* Configure delay SPI channel */
	spi_set_clock_polarity(SPI0, SPI_CHIP_SEL, SPI_CLK_POLARITY);
   82398:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
   8239c:	f04f 0100 	mov.w	r1, #0
   823a0:	460a      	mov	r2, r1
   823a2:	f241 7be5 	movw	fp, #6117	; 0x17e5
   823a6:	f2c0 0b08 	movt	fp, #8
   823aa:	47d8      	blx	fp
	spi_set_clock_phase(SPI0, SPI_CHIP_SEL, SPI_CLK_PHASE);
   823ac:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
   823b0:	f04f 0100 	mov.w	r1, #0
   823b4:	4632      	mov	r2, r6
   823b6:	f641 0a0d 	movw	sl, #6157	; 0x180d
   823ba:	f2c0 0a08 	movt	sl, #8
   823be:	47d0      	blx	sl
	spi_set_bits_per_transfer(SPI0, SPI_CHIP_SEL, SPI_CSR_BITS_11_BIT);
   823c0:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
   823c4:	f04f 0100 	mov.w	r1, #0
   823c8:	f04f 0230 	mov.w	r2, #48	; 0x30
   823cc:	f641 088d 	movw	r8, #6285	; 0x188d
   823d0:	f2c0 0808 	movt	r8, #8
   823d4:	47c0      	blx	r8
	spi_configure_cs_behavior(SPI0, SPI_CHIP_SEL, SPI_CS_RISE_FORCED);
   823d6:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
   823da:	f04f 0100 	mov.w	r1, #0
   823de:	f04f 0204 	mov.w	r2, #4
   823e2:	f641 0335 	movw	r3, #6197	; 0x1835
   823e6:	f2c0 0308 	movt	r3, #8
   823ea:	4798      	blx	r3
	spi_set_baudrate_div(SPI0, SPI_CHIP_SEL, (sysclk_get_cpu_hz() / gs_ul_spi_clock));
   823ec:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
   823f0:	f04f 0100 	mov.w	r1, #0
   823f4:	f04f 0248 	mov.w	r2, #72	; 0x48
   823f8:	f641 07a9 	movw	r7, #6313	; 0x18a9
   823fc:	46b9      	mov	r9, r7
   823fe:	f2c0 0908 	movt	r9, #8
   82402:	47c8      	blx	r9
	spi_set_transfer_delay(SPI0, SPI_CHIP_SEL, SPI_DLYBS, SPI_DLYBCT);
   82404:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
   82408:	f04f 0100 	mov.w	r1, #0
   8240c:	460a      	mov	r2, r1
   8240e:	460b      	mov	r3, r1
   82410:	f641 07c9 	movw	r7, #6345	; 0x18c9
   82414:	f2c0 0708 	movt	r7, #8
   82418:	47b8      	blx	r7
	
	/* Configure RF atten SPI channel */
	spi_set_clock_polarity(SPI0, SPI_ALT_CHIP_SEL, SPI_CLK_POLARITY);
   8241a:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
   8241e:	4631      	mov	r1, r6
   82420:	f04f 0200 	mov.w	r2, #0
   82424:	47d8      	blx	fp
	spi_set_clock_phase(SPI0, SPI_ALT_CHIP_SEL, SPI_CLK_PHASE);
   82426:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
   8242a:	4631      	mov	r1, r6
   8242c:	4632      	mov	r2, r6
   8242e:	47d0      	blx	sl
	spi_set_bits_per_transfer(SPI0, SPI_ALT_CHIP_SEL, SPI_CSR_BITS_16_BIT);
   82430:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
   82434:	4631      	mov	r1, r6
   82436:	f04f 0280 	mov.w	r2, #128	; 0x80
   8243a:	47c0      	blx	r8
	spi_configure_cs_behavior(SPI0, SPI_ALT_CHIP_SEL, SPI_CS_RISE_FORCED);
   8243c:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
   82440:	4631      	mov	r1, r6
   82442:	f04f 0204 	mov.w	r2, #4
   82446:	f641 0335 	movw	r3, #6197	; 0x1835
   8244a:	f2c0 0308 	movt	r3, #8
   8244e:	4798      	blx	r3
	spi_set_baudrate_div(SPI0, SPI_ALT_CHIP_SEL, (sysclk_get_cpu_hz() / gs_ul_spi_clock));
   82450:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
   82454:	4631      	mov	r1, r6
   82456:	f04f 0248 	mov.w	r2, #72	; 0x48
   8245a:	47c8      	blx	r9
	spi_set_transfer_delay(SPI0, SPI_ALT_CHIP_SEL, SPI_DLYBS, SPI_DLYBCT);
   8245c:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
   82460:	4631      	mov	r1, r6
   82462:	f04f 0200 	mov.w	r2, #0
   82466:	4613      	mov	r3, r2
   82468:	47b8      	blx	r7
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
   8246a:	f364 451f 	bfi	r5, r4, #16, #16
   8246e:	602e      	str	r6, [r5, #0]
	
	/* Enable SPI */
	spi_enable(SPI0);
}
   82470:	b005      	add	sp, #20
   82472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82476:	bf00      	nop

00082478 <is_reset_delay_enabled>:

uint16_t is_reset_delay_enabled(void)
{
	return is_reset_delay_en;
}
   82478:	f640 33bc 	movw	r3, #3004	; 0xbbc
   8247c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82480:	8818      	ldrh	r0, [r3, #0]
   82482:	4770      	bx	lr

00082484 <is_data_delay_enabled>:

uint16_t is_data_delay_enabled(void)
{
	return is_data_delay_en;
}
   82484:	f640 33c4 	movw	r3, #3012	; 0xbc4
   82488:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8248c:	8818      	ldrh	r0, [r3, #0]
   8248e:	4770      	bx	lr

00082490 <is_clock_delay_enabled>:

uint16_t is_clock_delay_enabled(void)
{
	return is_clock_delay_en;
}
   82490:	f640 33c2 	movw	r3, #3010	; 0xbc2
   82494:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82498:	8818      	ldrh	r0, [r3, #0]
   8249a:	4770      	bx	lr

0008249c <enable_disable_reset_delay>:

void enable_disable_reset_delay(uint16_t status)
{
	if(status == TRUE)
   8249c:	2801      	cmp	r0, #1
   8249e:	d10e      	bne.n	824be <enable_disable_reset_delay+0x22>
	{
		is_reset_delay_en = TRUE;
   824a0:	f640 33bc 	movw	r3, #3004	; 0xbbc
   824a4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   824a8:	f04f 0201 	mov.w	r2, #1
   824ac:	801a      	strh	r2, [r3, #0]
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   824ae:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   824b2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   824b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   824ba:	6341      	str	r1, [r0, #52]	; 0x34
   824bc:	4770      	bx	lr
		ioport_set_pin_level(RESET_DELAY_EN_GPIO, IOPORT_PIN_LEVEL_LOW);
	}
	else
	{
		is_reset_delay_en = FALSE;
   824be:	f640 33bc 	movw	r3, #3004	; 0xbbc
   824c2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   824c6:	f04f 0200 	mov.w	r2, #0
   824ca:	801a      	strh	r2, [r3, #0]
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   824cc:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   824d0:	f2c4 000e 	movt	r0, #16398	; 0x400e
   824d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   824d8:	6301      	str	r1, [r0, #48]	; 0x30
   824da:	4770      	bx	lr

000824dc <enable_disable_data_delay>:
	}
}

void enable_disable_data_delay(uint16_t status)
{
	if(status == TRUE)
   824dc:	2801      	cmp	r0, #1
   824de:	d10e      	bne.n	824fe <enable_disable_data_delay+0x22>
	{
		is_data_delay_en = TRUE;
   824e0:	f640 33c4 	movw	r3, #3012	; 0xbc4
   824e4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   824e8:	f04f 0201 	mov.w	r2, #1
   824ec:	801a      	strh	r2, [r3, #0]
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   824ee:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   824f2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   824f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
   824fa:	6341      	str	r1, [r0, #52]	; 0x34
   824fc:	4770      	bx	lr
		ioport_set_pin_level(DATA_DELAY_EN_GPIO, IOPORT_PIN_LEVEL_LOW);
	}
	else
	{
		is_data_delay_en = FALSE;
   824fe:	f640 33c4 	movw	r3, #3012	; 0xbc4
   82502:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82506:	f04f 0200 	mov.w	r2, #0
   8250a:	801a      	strh	r2, [r3, #0]
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8250c:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   82510:	f2c4 000e 	movt	r0, #16398	; 0x400e
   82514:	f44f 6100 	mov.w	r1, #2048	; 0x800
   82518:	6301      	str	r1, [r0, #48]	; 0x30
   8251a:	4770      	bx	lr

0008251c <enable_disable_clock_delay>:
	}
}

void enable_disable_clock_delay(uint16_t status)
{
	if(status == TRUE)
   8251c:	2801      	cmp	r0, #1
   8251e:	d10e      	bne.n	8253e <enable_disable_clock_delay+0x22>
	{
		is_clock_delay_en = TRUE;
   82520:	f640 33c2 	movw	r3, #3010	; 0xbc2
   82524:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82528:	f04f 0201 	mov.w	r2, #1
   8252c:	801a      	strh	r2, [r3, #0]
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8252e:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   82532:	f2c4 000e 	movt	r0, #16398	; 0x400e
   82536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8253a:	6341      	str	r1, [r0, #52]	; 0x34
   8253c:	4770      	bx	lr
		ioport_set_pin_level(CLOCK_DELAY_EN_GPIO, IOPORT_PIN_LEVEL_LOW);
	}
	else
	{
		is_clock_delay_en = FALSE;
   8253e:	f640 33c2 	movw	r3, #3010	; 0xbc2
   82542:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82546:	f04f 0200 	mov.w	r2, #0
   8254a:	801a      	strh	r2, [r3, #0]
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8254c:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   82550:	f2c4 000e 	movt	r0, #16398	; 0x400e
   82554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82558:	6301      	str	r1, [r0, #48]	; 0x30
   8255a:	4770      	bx	lr

0008255c <setup_delay>:
		ioport_set_pin_level(CLOCK_DELAY_EN_GPIO, IOPORT_PIN_LEVEL_HIGH);
	}
}

void setup_delay(uint16_t channel, uint16_t PD1, uint16_t PD0)
{
   8255c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8255e:	b083      	sub	sp, #12
   82560:	4605      	mov	r5, r0
   82562:	460f      	mov	r7, r1
   82564:	4616      	mov	r6, r2
	__attribute__((unused)) uint16_t dummy;
	__attribute__((unused)) uint8_t dummy2;
		
	// Clear receive buffer
	//while((spi_read_status(SPI0) & SPI_SR_RDRF) == 0);
	spi_read(SPI0, &dummy, &dummy2);
   82566:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   8256a:	f2c4 0400 	movt	r4, #16384	; 0x4000
   8256e:	4620      	mov	r0, r4
   82570:	f10d 0102 	add.w	r1, sp, #2
   82574:	f10d 0201 	add.w	r2, sp, #1
   82578:	f241 732d 	movw	r3, #5933	; 0x172d
   8257c:	f2c0 0308 	movt	r3, #8
   82580:	4798      	blx	r3
		
	data = PD1 << 2;
   82582:	ea4f 0787 	mov.w	r7, r7, lsl #2
   82586:	9701      	str	r7, [sp, #4]
	data |= 0x03;
   82588:	9801      	ldr	r0, [sp, #4]
   8258a:	f040 0103 	orr.w	r1, r0, #3
   8258e:	9101      	str	r1, [sp, #4]
	data = __RBIT(data);
   82590:	9a01      	ldr	r2, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
   82592:	fa92 f3a2 	rbit	r3, r2
   82596:	9301      	str	r3, [sp, #4]
	data >>= (32-11);
   82598:	9801      	ldr	r0, [sp, #4]
   8259a:	ea4f 5150 	mov.w	r1, r0, lsr #21
   8259e:	9101      	str	r1, [sp, #4]
	spi_write(SPI0, data, SPI_CHIP_SEL, 0);
   825a0:	9a01      	ldr	r2, [sp, #4]
   825a2:	4620      	mov	r0, r4
   825a4:	b291      	uxth	r1, r2
   825a6:	f04f 0200 	mov.w	r2, #0
   825aa:	4613      	mov	r3, r2
   825ac:	f241 7489 	movw	r4, #6025	; 0x1789
   825b0:	f2c0 0408 	movt	r4, #8
   825b4:	47a0      	blx	r4
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
	return p_spi->SPI_SR;
   825b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   825ba:	f2c4 0000 	movt	r0, #16384	; 0x4000
   825be:	6903      	ldr	r3, [r0, #16]
	/* Wait transfer done. */
	while((spi_read_status(SPI0) & SPI_SR_RDRF) == 0);
   825c0:	f013 0f01 	tst.w	r3, #1
   825c4:	d0fb      	beq.n	825be <setup_delay+0x62>
	spi_read(SPI0, &dummy, &dummy2);
   825c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   825ca:	f2c4 0000 	movt	r0, #16384	; 0x4000
   825ce:	f10d 0102 	add.w	r1, sp, #2
   825d2:	f10d 0201 	add.w	r2, sp, #1
   825d6:	f241 742d 	movw	r4, #5933	; 0x172d
   825da:	f2c0 0408 	movt	r4, #8
   825de:	47a0      	blx	r4
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   825e0:	ea4f 1155 	mov.w	r1, r5, lsr #5
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   825e4:	f501 1200 	add.w	r2, r1, #2097152	; 0x200000
   825e8:	f202 7007 	addw	r0, r2, #1799	; 0x707
   825ec:	ea4f 2440 	mov.w	r4, r0, lsl #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   825f0:	f005 051f 	and.w	r5, r5, #31
   825f4:	f04f 0301 	mov.w	r3, #1
   825f8:	fa03 f505 	lsl.w	r5, r3, r5
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   825fc:	6325      	str	r5, [r4, #48]	; 0x30
   825fe:	f04f 021e 	mov.w	r2, #30
   82602:	f102 31ff 	add.w	r1, r2, #4294967295
	
	ioport_set_pin_level(channel, IOPORT_PIN_LEVEL_HIGH);
	for(int i=0;i<30;i++);
   82606:	1e4a      	subs	r2, r1, #1
   82608:	d1fb      	bne.n	82602 <setup_delay+0xa6>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8260a:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(channel, IOPORT_PIN_LEVEL_LOW);	
	
	data = PD0 << 2;
   8260c:	ea4f 0686 	mov.w	r6, r6, lsl #2
   82610:	9601      	str	r6, [sp, #4]
	data |= 0x02;
   82612:	9801      	ldr	r0, [sp, #4]
   82614:	f040 0302 	orr.w	r3, r0, #2
   82618:	9301      	str	r3, [sp, #4]
	data = __RBIT(data);
   8261a:	9901      	ldr	r1, [sp, #4]
   8261c:	fa91 f2a1 	rbit	r2, r1
   82620:	9201      	str	r2, [sp, #4]
	data >>= (32-11);
   82622:	9e01      	ldr	r6, [sp, #4]
   82624:	ea4f 5056 	mov.w	r0, r6, lsr #21
   82628:	9001      	str	r0, [sp, #4]
	spi_write(SPI0, data, SPI_CHIP_SEL, 0);
   8262a:	9b01      	ldr	r3, [sp, #4]
   8262c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   82630:	f2c4 0000 	movt	r0, #16384	; 0x4000
   82634:	b299      	uxth	r1, r3
   82636:	f04f 0200 	mov.w	r2, #0
   8263a:	4613      	mov	r3, r2
   8263c:	f241 7689 	movw	r6, #6025	; 0x1789
   82640:	f2c0 0608 	movt	r6, #8
   82644:	47b0      	blx	r6
   82646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   8264a:	f2c4 0100 	movt	r1, #16384	; 0x4000
   8264e:	690a      	ldr	r2, [r1, #16]
	/* Wait transfer done. */
	while((spi_read_status(SPI0) & SPI_SR_RDRF) == 0);
   82650:	f012 0f01 	tst.w	r2, #1
   82654:	d0fb      	beq.n	8264e <setup_delay+0xf2>
	spi_read(SPI0, &dummy, &dummy2);
   82656:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   8265a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   8265e:	f10d 0102 	add.w	r1, sp, #2
   82662:	f10d 0201 	add.w	r2, sp, #1
   82666:	f241 732d 	movw	r3, #5933	; 0x172d
   8266a:	f2c0 0308 	movt	r3, #8
   8266e:	4798      	blx	r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82670:	6325      	str	r5, [r4, #48]	; 0x30
   82672:	f04f 011e 	mov.w	r1, #30
   82676:	f101 30ff 	add.w	r0, r1, #4294967295
	
	ioport_set_pin_level(channel, IOPORT_PIN_LEVEL_HIGH);
	for(int i=0;i<30;i++);
   8267a:	1e41      	subs	r1, r0, #1
   8267c:	d1fb      	bne.n	82676 <setup_delay+0x11a>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8267e:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(channel, IOPORT_PIN_LEVEL_LOW);
}
   82680:	b003      	add	sp, #12
   82682:	bdf0      	pop	{r4, r5, r6, r7, pc}

00082684 <setup_rf_attenuator>:

void setup_rf_attenuator(uint16_t atten)
{	
   82684:	b530      	push	{r4, r5, lr}
   82686:	b083      	sub	sp, #12
   82688:	4605      	mov	r5, r0
	volatile uint32_t data;
	
	__attribute__((unused)) uint16_t dummy;
	__attribute__((unused)) uint8_t dummy2;
	
	current_attenution = atten;
   8268a:	f240 0330 	movw	r3, #48	; 0x30
   8268e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82692:	8018      	strh	r0, [r3, #0]
	
	// Clear receive buffer
	//while((spi_read_status(SPI0) & SPI_SR_RDRF) == 0);
	spi_read(SPI0, &dummy, &dummy2);
   82694:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   82698:	f2c4 0400 	movt	r4, #16384	; 0x4000
   8269c:	4620      	mov	r0, r4
   8269e:	f10d 0102 	add.w	r1, sp, #2
   826a2:	f10d 0201 	add.w	r2, sp, #1
   826a6:	f241 732d 	movw	r3, #5933	; 0x172d
   826aa:	f2c0 0308 	movt	r3, #8
   826ae:	4798      	blx	r3
	
	data = (uint32_t)atten & 0x007F;
   826b0:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   826b4:	9501      	str	r5, [sp, #4]
	data = __RBIT(data);
   826b6:	9801      	ldr	r0, [sp, #4]
   826b8:	fa90 f1a0 	rbit	r1, r0
   826bc:	9101      	str	r1, [sp, #4]
	data >>= 16;
   826be:	9a01      	ldr	r2, [sp, #4]
   826c0:	ea4f 4312 	mov.w	r3, r2, lsr #16
   826c4:	9301      	str	r3, [sp, #4]
	spi_write(SPI0, data, SPI_ALT_CHIP_SEL, 0);
   826c6:	9901      	ldr	r1, [sp, #4]
   826c8:	4620      	mov	r0, r4
   826ca:	b289      	uxth	r1, r1
   826cc:	f04f 0201 	mov.w	r2, #1
   826d0:	f04f 0300 	mov.w	r3, #0
   826d4:	f241 7489 	movw	r4, #6025	; 0x1789
   826d8:	f2c0 0408 	movt	r4, #8
   826dc:	47a0      	blx	r4
   826de:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   826e2:	f2c4 0000 	movt	r0, #16384	; 0x4000
   826e6:	6902      	ldr	r2, [r0, #16]
	/* Wait transfer done. */
	while((spi_read_status(SPI0) & SPI_SR_RDRF) == 0);
   826e8:	f012 0f01 	tst.w	r2, #1
   826ec:	d0fb      	beq.n	826e6 <setup_rf_attenuator+0x62>
	spi_read(SPI0, &dummy, &dummy2);
   826ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   826f2:	f2c4 0000 	movt	r0, #16384	; 0x4000
   826f6:	f10d 0102 	add.w	r1, sp, #2
   826fa:	f10d 0201 	add.w	r2, sp, #1
   826fe:	f241 732d 	movw	r3, #5933	; 0x172d
   82702:	f2c0 0308 	movt	r3, #8
   82706:	4798      	blx	r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82708:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8270c:	f2c4 010e 	movt	r1, #16398	; 0x400e
   82710:	f04f 0002 	mov.w	r0, #2
   82714:	6308      	str	r0, [r1, #48]	; 0x30
   82716:	f04f 031e 	mov.w	r3, #30
   8271a:	f103 32ff 	add.w	r2, r3, #4294967295
	
	ioport_set_pin_level(RF_ATTEN_SLOAD_GPIO, IOPORT_PIN_LEVEL_HIGH);
	for(int i=0;i<30;i++);
   8271e:	1e53      	subs	r3, r2, #1
   82720:	d1fb      	bne.n	8271a <setup_rf_attenuator+0x96>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82722:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82726:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8272a:	f04f 0002 	mov.w	r0, #2
   8272e:	6348      	str	r0, [r1, #52]	; 0x34
	ioport_set_pin_level(RF_ATTEN_SLOAD_GPIO, IOPORT_PIN_LEVEL_LOW);
}
   82730:	b003      	add	sp, #12
   82732:	bd30      	pop	{r4, r5, pc}

00082734 <get_current_attenuation>:

uint16_t get_current_attenuation(void)
{
	return current_attenution;
}
   82734:	f240 0330 	movw	r3, #48	; 0x30
   82738:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8273c:	8818      	ldrh	r0, [r3, #0]
   8273e:	4770      	bx	lr

00082740 <SetDelayClock>:

void SetDelayClock(uint16_t delay)
{
   82740:	b508      	push	{r3, lr}
	current_clock_delay = delay;
   82742:	f640 33b8 	movw	r3, #3000	; 0xbb8
   82746:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8274a:	8018      	strh	r0, [r3, #0]
	delay = (delay +5 ) / 11;
   8274c:	f100 0005 	add.w	r0, r0, #5
   82750:	f24a 22e9 	movw	r2, #41705	; 0xa2e9
   82754:	f6c2 628b 	movt	r2, #11915	; 0x2e8b
   82758:	fb82 1300 	smull	r1, r3, r2, r0
   8275c:	ea4f 0353 	mov.w	r3, r3, lsr #1
	setup_delay(CLOCK_DELAY_SLOAD_GPIO, delay < 512 ? 0:(delay-511), delay < 512 ? delay : 511);	
   82760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82764:	bf26      	itte	cs
   82766:	f2a3 11ff 	subwcs	r1, r3, #511	; 0x1ff
   8276a:	b289      	uxthcs	r1, r1
   8276c:	2100      	movcc	r1, #0
   8276e:	f04f 001c 	mov.w	r0, #28
   82772:	f240 12ff 	movw	r2, #511	; 0x1ff
   82776:	4293      	cmp	r3, r2
   82778:	bf38      	it	cc
   8277a:	461a      	movcc	r2, r3
   8277c:	f242 535d 	movw	r3, #9565	; 0x255d
   82780:	f2c0 0308 	movt	r3, #8
   82784:	4798      	blx	r3
   82786:	bd08      	pop	{r3, pc}

00082788 <GetDelayClock>:
}

uint16_t GetDelayClock(void)
{
	return current_clock_delay;
}
   82788:	f640 33b8 	movw	r3, #3000	; 0xbb8
   8278c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82790:	8818      	ldrh	r0, [r3, #0]
   82792:	4770      	bx	lr

00082794 <SetDelayReset>:

void SetDelayReset(uint16_t delay)
{
   82794:	b508      	push	{r3, lr}
	current_reset_delay = delay;
   82796:	f640 33ba 	movw	r3, #3002	; 0xbba
   8279a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8279e:	8018      	strh	r0, [r3, #0]
	delay = (delay +5 ) / 11;
   827a0:	f100 0005 	add.w	r0, r0, #5
   827a4:	f24a 22e9 	movw	r2, #41705	; 0xa2e9
   827a8:	f6c2 628b 	movt	r2, #11915	; 0x2e8b
   827ac:	fb82 1300 	smull	r1, r3, r2, r0
   827b0:	ea4f 0353 	mov.w	r3, r3, lsr #1
	setup_delay(RESET_DELAY_SLOAD_GPIO, delay < 512 ? 0:(delay-511), delay < 512 ? delay : 511);
   827b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   827b8:	bf26      	itte	cs
   827ba:	f2a3 11ff 	subwcs	r1, r3, #511	; 0x1ff
   827be:	b289      	uxthcs	r1, r1
   827c0:	2100      	movcc	r1, #0
   827c2:	f04f 001d 	mov.w	r0, #29
   827c6:	f240 12ff 	movw	r2, #511	; 0x1ff
   827ca:	4293      	cmp	r3, r2
   827cc:	bf38      	it	cc
   827ce:	461a      	movcc	r2, r3
   827d0:	f242 535d 	movw	r3, #9565	; 0x255d
   827d4:	f2c0 0308 	movt	r3, #8
   827d8:	4798      	blx	r3
   827da:	bd08      	pop	{r3, pc}

000827dc <GetDelayReset>:
}

uint16_t GetDelayReset(void)
{
	return current_reset_delay;
}
   827dc:	f640 33ba 	movw	r3, #3002	; 0xbba
   827e0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   827e4:	8818      	ldrh	r0, [r3, #0]
   827e6:	4770      	bx	lr

000827e8 <SetDelayData>:

void SetDelayData(uint16_t delay)
{
   827e8:	b508      	push	{r3, lr}
	current_data_delay = delay;
   827ea:	f640 33be 	movw	r3, #3006	; 0xbbe
   827ee:	f2c2 0307 	movt	r3, #8199	; 0x2007
   827f2:	8018      	strh	r0, [r3, #0]
	delay = (delay +5 ) / 11;
   827f4:	f100 0005 	add.w	r0, r0, #5
   827f8:	f24a 22e9 	movw	r2, #41705	; 0xa2e9
   827fc:	f6c2 628b 	movt	r2, #11915	; 0x2e8b
   82800:	fb82 1300 	smull	r1, r3, r2, r0
   82804:	ea4f 0353 	mov.w	r3, r3, lsr #1
	setup_delay(DATA_DELAY_SLOAD_GPIO, delay < 512 ? 0:(delay-511), delay < 512 ? delay : 511);
   82808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8280c:	bf26      	itte	cs
   8280e:	f2a3 11ff 	subwcs	r1, r3, #511	; 0x1ff
   82812:	b289      	uxthcs	r1, r1
   82814:	2100      	movcc	r1, #0
   82816:	f04f 0035 	mov.w	r0, #53	; 0x35
   8281a:	f240 12ff 	movw	r2, #511	; 0x1ff
   8281e:	4293      	cmp	r3, r2
   82820:	bf38      	it	cc
   82822:	461a      	movcc	r2, r3
   82824:	f242 535d 	movw	r3, #9565	; 0x255d
   82828:	f2c0 0308 	movt	r3, #8
   8282c:	4798      	blx	r3
   8282e:	bd08      	pop	{r3, pc}

00082830 <GetDelayData>:
}

uint16_t GetDelayData(void)
{
	return current_data_delay;
}
   82830:	f640 33be 	movw	r3, #3006	; 0xbbe
   82834:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82838:	8818      	ldrh	r0, [r3, #0]
   8283a:	4770      	bx	lr

0008283c <init_module_peripherals_ap>:

// Here should be all the initialization functions for the module after 12v power
void init_module_peripherals_ap(void)
{
   8283c:	4770      	bx	lr
   8283e:	bf00      	nop

00082840 <deinit_module_peripherals>:
	
}

// Here should be all the deinitialization functions for the module before 12v power removal
void deinit_module_peripherals(void)
{
   82840:	4770      	bx	lr
   82842:	bf00      	nop

00082844 <init_i2c>:
twi_options_t i2c_options;
twi_packet_t i2c_packet;


void init_i2c(void)
{	
   82844:	b538      	push	{r3, r4, r5, lr}
	i2c_options.master_clk = sysclk_get_cpu_hz();
   82846:	f241 7400 	movw	r4, #5888	; 0x1700
   8284a:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8284e:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
   82852:	f2c0 5301 	movt	r3, #1281	; 0x501
   82856:	6023      	str	r3, [r4, #0]
	i2c_options.speed = 400000;
   82858:	f44f 50d4 	mov.w	r0, #6784	; 0x1a80
   8285c:	f2c0 0006 	movt	r0, #6
   82860:	6060      	str	r0, [r4, #4]
	i2c_options.chip = EEPROM_ADDR;
   82862:	f04f 0150 	mov.w	r1, #80	; 0x50
   82866:	7221      	strb	r1, [r4, #8]
	i2c_options.smbus = 0;
   82868:	f04f 0200 	mov.w	r2, #0
   8286c:	7262      	strb	r2, [r4, #9]
	twi_enable_master_mode(TWI0);
   8286e:	f44f 4540 	mov.w	r5, #49152	; 0xc000
   82872:	f2c4 0508 	movt	r5, #16392	; 0x4008
   82876:	4628      	mov	r0, r5
   82878:	f641 2319 	movw	r3, #6681	; 0x1a19
   8287c:	f2c0 0308 	movt	r3, #8
   82880:	4798      	blx	r3
	twi_master_init(TWI0, &i2c_options);	
   82882:	4628      	mov	r0, r5
   82884:	4621      	mov	r1, r4
   82886:	f641 22d9 	movw	r2, #6873	; 0x1ad9
   8288a:	f2c0 0208 	movt	r2, #8
   8288e:	4790      	blx	r2
   82890:	bd38      	pop	{r3, r4, r5, pc}
   82892:	bf00      	nop

00082894 <init_pwm>:
	while(twi_probe(TWI0, EEPROM_ADDR) != TWI_SUCCESS);
	return (RET_TYPE)twi_master_read(TWI0, &i2c_packet);
}

void init_pwm(void)
{
   82894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82898:	b085      	sub	sp, #20
	/* Enable PWM peripheral clock */
	pmc_enable_periph_clk(ID_PWM);
   8289a:	f04f 0024 	mov.w	r0, #36	; 0x24
   8289e:	f647 2355 	movw	r3, #31317	; 0x7a55
   828a2:	f2c0 0308 	movt	r3, #8
   828a6:	4798      	blx	r3

	/* Disable PWM channels for LEDs */
	pwm_channel_disable(PWM, PIN_LED1_CHANNEL);
   828a8:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   828ac:	f2c4 0409 	movt	r4, #16393	; 0x4009
   828b0:	4620      	mov	r0, r4
   828b2:	f04f 0101 	mov.w	r1, #1
   828b6:	f241 65e9 	movw	r5, #5865	; 0x16e9
   828ba:	f2c0 0508 	movt	r5, #8
   828be:	47a8      	blx	r5
	pwm_channel_disable(PWM, PIN_LED2_CHANNEL);
   828c0:	4620      	mov	r0, r4
   828c2:	f04f 0103 	mov.w	r1, #3
   828c6:	47a8      	blx	r5
	pwm_channel_disable(PWM, PIN_LED3_CHANNEL);
   828c8:	4620      	mov	r0, r4
   828ca:	f04f 0102 	mov.w	r1, #2
   828ce:	47a8      	blx	r5

	/* Set PWM clock A as LED_PWM_FREQUENCY*PERIOD_VALUE */
	pwm_clock_t clock_setting = {
   828d0:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
   828d4:	9001      	str	r0, [sp, #4]
   828d6:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
   828da:	f2c0 5101 	movt	r1, #1281	; 0x501
   828de:	9102      	str	r1, [sp, #8]
   828e0:	9103      	str	r1, [sp, #12]
		.ul_clka = LED_PWM_FREQUENCY * LED_PWM_PERIOD_VALUE,
		.ul_clkb = sysclk_get_cpu_hz(),
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &clock_setting);
   828e2:	4620      	mov	r0, r4
   828e4:	a901      	add	r1, sp, #4
   828e6:	f241 5241 	movw	r2, #5441	; 0x1541
   828ea:	f2c0 0208 	movt	r2, #8
   828ee:	4790      	blx	r2

	/* Initialize PWM channel for LED1 */
	/* Period is left-aligned */
	g_pwm_channel_led1.alignment = PWM_ALIGN_LEFT;
   828f0:	f241 7120 	movw	r1, #5920	; 0x1720
   828f4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   828f8:	f04f 0500 	mov.w	r5, #0
   828fc:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a low level */
	g_pwm_channel_led1.polarity = PWM_HIGH;
   828fe:	f04f 0601 	mov.w	r6, #1
   82902:	728e      	strb	r6, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led1.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82904:	f04f 0b0b 	mov.w	fp, #11
   82908:	f8c1 b004 	str.w	fp, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led1.ul_period = LED_PWM_PERIOD_VALUE;
   8290c:	f44f 6a80 	mov.w	sl, #1024	; 0x400
   82910:	f8c1 a010 	str.w	sl, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led1.ul_duty = LED_INIT_DUTY_VALUE;
   82914:	60cd      	str	r5, [r1, #12]
	g_pwm_channel_led1.channel = PIN_LED1_CHANNEL;
   82916:	600e      	str	r6, [r1, #0]
	pwm_channel_init(PWM, &g_pwm_channel_led1);
   82918:	4620      	mov	r0, r4
   8291a:	f241 598d 	movw	r9, #5517	; 0x158d
   8291e:	f2c0 0908 	movt	r9, #8
   82922:	47c8      	blx	r9

	/* Enable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_LED1_CHANNEL, 0);
   82924:	4620      	mov	r0, r4
   82926:	4631      	mov	r1, r6
   82928:	462a      	mov	r2, r5
   8292a:	f241 68f5 	movw	r8, #5877	; 0x16f5
   8292e:	f2c0 0808 	movt	r8, #8
   82932:	47c0      	blx	r8
	//pwm_channel_enable_interrupt(PWM, PIN_LED1_CHANNEL, 0);

	/* Initialize PWM channel for LED2 */
	/* Period is center-aligned */
	g_pwm_channel_led2.alignment = PWM_ALIGN_LEFT;
   82934:	f241 7170 	movw	r1, #6000	; 0x1770
   82938:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8293c:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led2.polarity = PWM_HIGH;
   8293e:	728e      	strb	r6, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led2.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82940:	f8c1 b004 	str.w	fp, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led2.ul_period = LED_PWM_PERIOD_VALUE;
   82944:	f8c1 a010 	str.w	sl, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led2.ul_duty = LED_INIT_DUTY_VALUE;
   82948:	60cd      	str	r5, [r1, #12]
	g_pwm_channel_led2.channel = PIN_LED2_CHANNEL;
   8294a:	f04f 0703 	mov.w	r7, #3
   8294e:	600f      	str	r7, [r1, #0]
	pwm_channel_init(PWM, &g_pwm_channel_led2);
   82950:	4620      	mov	r0, r4
   82952:	47c8      	blx	r9

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_LED2_CHANNEL, 0);
   82954:	4620      	mov	r0, r4
   82956:	4639      	mov	r1, r7
   82958:	462a      	mov	r2, r5
   8295a:	47c0      	blx	r8

	/* Initialize PWM channel for LED3 */
	/* Period is center-aligned */
	g_pwm_channel_led3.alignment = PWM_ALIGN_LEFT;
   8295c:	f241 7348 	movw	r3, #5960	; 0x1748
   82960:	4619      	mov	r1, r3
   82962:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82966:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led3.polarity = PWM_LOW;
   82968:	f04f 0000 	mov.w	r0, #0
   8296c:	7288      	strb	r0, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led3.ul_prescaler = PWM_CMR_CPRE_CLKA;
   8296e:	f8c1 b004 	str.w	fp, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led3.ul_period = LED_PWM_PERIOD_VALUE;
   82972:	f8c1 a010 	str.w	sl, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led3.ul_duty = LED_INIT_DUTY_VALUE;
   82976:	60cd      	str	r5, [r1, #12]
	g_pwm_channel_led3.channel = PIN_LED3_CHANNEL;
   82978:	f04f 0a02 	mov.w	sl, #2
   8297c:	f8c1 a000 	str.w	sl, [r1]
	pwm_channel_init(PWM, &g_pwm_channel_led3);
   82980:	4620      	mov	r0, r4
   82982:	47c8      	blx	r9

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_LED3_CHANNEL, 0);
   82984:	4620      	mov	r0, r4
   82986:	4651      	mov	r1, sl
   82988:	462a      	mov	r2, r5
   8298a:	47c0      	blx	r8
	
	/* Enable PWM channels for LEDs */
	pwm_channel_enable(PWM, PIN_LED1_CHANNEL);
   8298c:	4620      	mov	r0, r4
   8298e:	4631      	mov	r1, r6
   82990:	f241 65dd 	movw	r5, #5853	; 0x16dd
   82994:	f2c0 0508 	movt	r5, #8
   82998:	47a8      	blx	r5
	pwm_channel_enable(PWM, PIN_LED2_CHANNEL);
   8299a:	4620      	mov	r0, r4
   8299c:	4639      	mov	r1, r7
   8299e:	47a8      	blx	r5
	pwm_channel_enable(PWM, PIN_LED3_CHANNEL);
   829a0:	4620      	mov	r0, r4
   829a2:	4651      	mov	r1, sl
   829a4:	47a8      	blx	r5
}
   829a6:	b005      	add	sp, #20
   829a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000829ac <set_user_led_colour>:

// Set user led colour
void set_user_led_colour(uint16_t red_val, uint16_t green_val, uint16_t blue_val)
{
   829ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   829ae:	4603      	mov	r3, r0
   829b0:	460e      	mov	r6, r1
   829b2:	4617      	mov	r7, r2
	pwm_channel_update_duty(PWM, &g_pwm_channel_led1, red_val);
   829b4:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   829b8:	f2c4 0409 	movt	r4, #16393	; 0x4009
   829bc:	4620      	mov	r0, r4
   829be:	f241 7120 	movw	r1, #5920	; 0x1720
   829c2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   829c6:	461a      	mov	r2, r3
   829c8:	f241 65b9 	movw	r5, #5817	; 0x16b9
   829cc:	f2c0 0508 	movt	r5, #8
   829d0:	47a8      	blx	r5
	pwm_channel_update_duty(PWM, &g_pwm_channel_led2, blue_val);
   829d2:	4620      	mov	r0, r4
   829d4:	f241 7170 	movw	r1, #6000	; 0x1770
   829d8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   829dc:	463a      	mov	r2, r7
   829de:	47a8      	blx	r5
	pwm_channel_update_duty(PWM, &g_pwm_channel_led3, green_val);
   829e0:	4620      	mov	r0, r4
   829e2:	f241 7148 	movw	r1, #5960	; 0x1748
   829e6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   829ea:	4632      	mov	r2, r6
   829ec:	47a8      	blx	r5
   829ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000829f0 <get_user_button_status>:
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   829f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   829f4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   829f8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
}

// To see if the user pressed the front panel button
RET_TYPE get_user_button_status(void)
{
	if(ioport_get_pin_level(GPIO_USR_BUTTON))
   829fa:	f480 0100 	eor.w	r1, r0, #8388608	; 0x800000
		return RETURN_NOK;
	else
		return RETURN_OK;
}
   829fe:	f3c1 50c0 	ubfx	r0, r1, #23, #1
   82a02:	4770      	bx	lr

00082a04 <get_ok_12v_status>:
   82a04:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   82a08:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82a0c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
{
	if(ioport_get_pin_level(GPIO_OK_12V))
		return RETURN_OK;
	else
		return RETURN_NOK;
}
   82a0e:	f3c0 2000 	ubfx	r0, r0, #8, #1
   82a12:	4770      	bx	lr

00082a14 <enable_12v>:
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82a14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   82a18:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
   82a20:	631a      	str	r2, [r3, #48]	; 0x30
   82a22:	4770      	bx	lr

00082a24 <disable_12v>:
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82a24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   82a28:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
   82a30:	635a      	str	r2, [r3, #52]	; 0x34
   82a32:	4770      	bx	lr

00082a34 <SCPI_ErrorInit>:
/* basic FIFO */
static fifo_t local_error_queue;



void SCPI_ErrorInit(scpi_t * context) {
   82a34:	b508      	push	{r3, lr}
     * // FreeRTOS
     * context->error_queue = (scpi_error_queue_t)xQueueCreate(100, sizeof(int16_t));
     */

    /* basic FIFO */
    context->error_queue = (scpi_error_queue_t)&local_error_queue;
   82a36:	f640 43d8 	movw	r3, #3288	; 0xcd8
   82a3a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82a3e:	62c3      	str	r3, [r0, #44]	; 0x2c
    fifo_init((fifo_t *)context->error_queue);
   82a40:	4618      	mov	r0, r3
   82a42:	f642 4165 	movw	r1, #11365	; 0x2c65
   82a46:	f2c0 0108 	movt	r1, #8
   82a4a:	4788      	blx	r1
   82a4c:	bd08      	pop	{r3, pc}
   82a4e:	bf00      	nop

00082a50 <SCPI_ErrorClear>:

/**
 * Clear error queue
 * @param context - scpi context
 */
void SCPI_ErrorClear(scpi_t * context) {
   82a50:	b508      	push	{r3, lr}
     * // FreeRTOS
     * xQueueReset((xQueueHandle)context->error_queue);
     */

    /* basic FIFO */
    fifo_clear((fifo_t *)context->error_queue);
   82a52:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   82a54:	f642 4375 	movw	r3, #11381	; 0x2c75
   82a58:	f2c0 0308 	movt	r3, #8
   82a5c:	4798      	blx	r3
   82a5e:	bd08      	pop	{r3, pc}

00082a60 <SCPI_ErrorPop>:
/**
 * Pop error from queue
 * @param context - scpi context
 * @return error number
 */
int16_t SCPI_ErrorPop(scpi_t * context) {
   82a60:	b500      	push	{lr}
   82a62:	b083      	sub	sp, #12
    int16_t result = 0;
   82a64:	a902      	add	r1, sp, #8
   82a66:	f04f 0300 	mov.w	r3, #0
   82a6a:	f821 3d02 	strh.w	r3, [r1, #-2]!
     *   result = 0;
     * }
     */

    /* basic FIFO */
    fifo_remove((fifo_t *)context->error_queue, &result);
   82a6e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   82a70:	f642 4281 	movw	r2, #11393	; 0x2c81
   82a74:	f2c0 0208 	movt	r2, #8
   82a78:	4790      	blx	r2

    return result;
}
   82a7a:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   82a7e:	b003      	add	sp, #12
   82a80:	bd00      	pop	{pc}
   82a82:	bf00      	nop

00082a84 <SCPI_ErrorCount>:
/**
 * Return number of errors/events in the queue
 * @param context
 * @return 
 */
int32_t SCPI_ErrorCount(scpi_t * context) {
   82a84:	b500      	push	{lr}
   82a86:	b083      	sub	sp, #12
    int16_t result = 0;
   82a88:	a902      	add	r1, sp, #8
   82a8a:	f04f 0300 	mov.w	r3, #0
   82a8e:	f821 3d02 	strh.w	r3, [r1, #-2]!
     * // FreeRTOS
     * result = uxQueueMessagesWaiting((xQueueHandle)context->error_queue);
     */

    /* basic FIFO */
    fifo_count((fifo_t *)context->error_queue, &result);
   82a92:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   82a94:	f642 521d 	movw	r2, #11549	; 0x2d1d
   82a98:	f2c0 0208 	movt	r2, #8
   82a9c:	4790      	blx	r2

    return result;
}
   82a9e:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   82aa2:	b003      	add	sp, #12
   82aa4:	bd00      	pop	{pc}
   82aa6:	bf00      	nop

00082aa8 <SCPI_ErrorPush>:
/**
 * Push error to queue
 * @param context - scpi context
 * @param err - error number
 */
void SCPI_ErrorPush(scpi_t * context, int16_t err) {
   82aa8:	b538      	push	{r3, r4, r5, lr}
   82aaa:	4605      	mov	r5, r0
   82aac:	460c      	mov	r4, r1
     * // FreeRTOS
     * xQueueSend((xQueueHandle)context->error_queue, &err, 0);
     */

    /* basic FIFO */
    fifo_add((fifo_t *)context->error_queue, err);
   82aae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   82ab0:	f642 43c1 	movw	r3, #11457	; 0x2cc1
   82ab4:	f2c0 0308 	movt	r3, #8
   82ab8:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82aba:	f114 0f63 	cmn.w	r4, #99	; 0x63
   82abe:	da0c      	bge.n	82ada <SCPI_ErrorPush+0x32>
   82ac0:	f114 0fc7 	cmn.w	r4, #199	; 0xc7
   82ac4:	db09      	blt.n	82ada <SCPI_ErrorPush+0x32>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82ac6:	4628      	mov	r0, r5
   82ac8:	f04f 0102 	mov.w	r1, #2
   82acc:	f04f 0220 	mov.w	r2, #32
   82ad0:	f642 63cd 	movw	r3, #11981	; 0x2ecd
   82ad4:	f2c0 0308 	movt	r3, #8
   82ad8:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82ada:	f114 0fc7 	cmn.w	r4, #199	; 0xc7
   82ade:	da0c      	bge.n	82afa <SCPI_ErrorPush+0x52>
   82ae0:	f514 7f96 	cmn.w	r4, #300	; 0x12c
   82ae4:	dd09      	ble.n	82afa <SCPI_ErrorPush+0x52>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82ae6:	4628      	mov	r0, r5
   82ae8:	f04f 0102 	mov.w	r1, #2
   82aec:	f04f 0210 	mov.w	r2, #16
   82af0:	f642 63cd 	movw	r3, #11981	; 0x2ecd
   82af4:	f2c0 0308 	movt	r3, #8
   82af8:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82afa:	f514 7f96 	cmn.w	r4, #300	; 0x12c
   82afe:	dc0c      	bgt.n	82b1a <SCPI_ErrorPush+0x72>
   82b00:	f514 7fc8 	cmn.w	r4, #400	; 0x190
   82b04:	dd09      	ble.n	82b1a <SCPI_ErrorPush+0x72>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82b06:	4628      	mov	r0, r5
   82b08:	f04f 0102 	mov.w	r1, #2
   82b0c:	f04f 0208 	mov.w	r2, #8
   82b10:	f642 63cd 	movw	r3, #11981	; 0x2ecd
   82b14:	f2c0 0308 	movt	r3, #8
   82b18:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82b1a:	f514 7fc8 	cmn.w	r4, #400	; 0x190
   82b1e:	dc0c      	bgt.n	82b3a <SCPI_ErrorPush+0x92>
   82b20:	f514 7ffa 	cmn.w	r4, #500	; 0x1f4
   82b24:	dd09      	ble.n	82b3a <SCPI_ErrorPush+0x92>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82b26:	4628      	mov	r0, r5
   82b28:	f04f 0102 	mov.w	r1, #2
   82b2c:	f04f 0204 	mov.w	r2, #4
   82b30:	f642 63cd 	movw	r3, #11981	; 0x2ecd
   82b34:	f2c0 0308 	movt	r3, #8
   82b38:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82b3a:	f514 7ffa 	cmn.w	r4, #500	; 0x1f4
   82b3e:	dc0c      	bgt.n	82b5a <SCPI_ErrorPush+0xb2>
   82b40:	f514 7f16 	cmn.w	r4, #600	; 0x258
   82b44:	dd09      	ble.n	82b5a <SCPI_ErrorPush+0xb2>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82b46:	4628      	mov	r0, r5
   82b48:	f04f 0102 	mov.w	r1, #2
   82b4c:	f04f 0280 	mov.w	r2, #128	; 0x80
   82b50:	f642 63cd 	movw	r3, #11981	; 0x2ecd
   82b54:	f2c0 0308 	movt	r3, #8
   82b58:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82b5a:	f514 7f16 	cmn.w	r4, #600	; 0x258
   82b5e:	dc0c      	bgt.n	82b7a <SCPI_ErrorPush+0xd2>
   82b60:	f514 7f2f 	cmn.w	r4, #700	; 0x2bc
   82b64:	dd09      	ble.n	82b7a <SCPI_ErrorPush+0xd2>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82b66:	4628      	mov	r0, r5
   82b68:	f04f 0102 	mov.w	r1, #2
   82b6c:	f04f 0240 	mov.w	r2, #64	; 0x40
   82b70:	f642 63cd 	movw	r3, #11981	; 0x2ecd
   82b74:	f2c0 0308 	movt	r3, #8
   82b78:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82b7a:	f514 7f2f 	cmn.w	r4, #700	; 0x2bc
   82b7e:	dc0b      	bgt.n	82b98 <SCPI_ErrorPush+0xf0>
   82b80:	f514 7f48 	cmn.w	r4, #800	; 0x320
   82b84:	dd08      	ble.n	82b98 <SCPI_ErrorPush+0xf0>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82b86:	4628      	mov	r0, r5
   82b88:	f04f 0102 	mov.w	r1, #2
   82b8c:	460a      	mov	r2, r1
   82b8e:	f642 63cd 	movw	r3, #11981	; 0x2ecd
   82b92:	f2c0 0308 	movt	r3, #8
   82b96:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82b98:	f514 7f48 	cmn.w	r4, #800	; 0x320
   82b9c:	dc0c      	bgt.n	82bb8 <SCPI_ErrorPush+0x110>
   82b9e:	f514 7f61 	cmn.w	r4, #900	; 0x384
   82ba2:	dd09      	ble.n	82bb8 <SCPI_ErrorPush+0x110>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82ba4:	4628      	mov	r0, r5
   82ba6:	f04f 0102 	mov.w	r1, #2
   82baa:	f04f 0201 	mov.w	r2, #1
   82bae:	f642 63cd 	movw	r3, #11981	; 0x2ecd
   82bb2:	f2c0 0308 	movt	r3, #8
   82bb6:	4798      	blx	r3
        }
    }

    if (context) {
   82bb8:	b155      	cbz	r5, 82bd0 <SCPI_ErrorPush+0x128>
        if (context->interface && context->interface->error) {
   82bba:	69e8      	ldr	r0, [r5, #28]
   82bbc:	b120      	cbz	r0, 82bc8 <SCPI_ErrorPush+0x120>
   82bbe:	6802      	ldr	r2, [r0, #0]
   82bc0:	b112      	cbz	r2, 82bc8 <SCPI_ErrorPush+0x120>
            context->interface->error(context, err);
   82bc2:	4628      	mov	r0, r5
   82bc4:	4621      	mov	r1, r4
   82bc6:	4790      	blx	r2
        }

        context->cmd_error = TRUE;
   82bc8:	f04f 0101 	mov.w	r1, #1
   82bcc:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
   82bd0:	bd38      	pop	{r3, r4, r5, pc}
   82bd2:	bf00      	nop

00082bd4 <SCPI_ErrorTranslate>:
 * Translate error number to string
 * @param err - error number
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
    switch (err) {
   82bd4:	f110 0f6d 	cmn.w	r0, #109	; 0x6d
   82bd8:	d02b      	beq.n	82c32 <SCPI_ErrorTranslate+0x5e>
   82bda:	dc09      	bgt.n	82bf0 <SCPI_ErrorTranslate+0x1c>
   82bdc:	f110 0f83 	cmn.w	r0, #131	; 0x83
   82be0:	d02c      	beq.n	82c3c <SCPI_ErrorTranslate+0x68>
   82be2:	f110 0f71 	cmn.w	r0, #113	; 0x71
   82be6:	d01a      	beq.n	82c1e <SCPI_ErrorTranslate+0x4a>
   82be8:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
   82bec:	d130      	bne.n	82c50 <SCPI_ErrorTranslate+0x7c>
   82bee:	e02a      	b.n	82c46 <SCPI_ErrorTranslate+0x72>
   82bf0:	f110 0f67 	cmn.w	r0, #103	; 0x67
   82bf4:	d00e      	beq.n	82c14 <SCPI_ErrorTranslate+0x40>
   82bf6:	dc03      	bgt.n	82c00 <SCPI_ErrorTranslate+0x2c>
   82bf8:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
   82bfc:	d128      	bne.n	82c50 <SCPI_ErrorTranslate+0x7c>
   82bfe:	e013      	b.n	82c28 <SCPI_ErrorTranslate+0x54>
   82c00:	f110 0f66 	cmn.w	r0, #102	; 0x66
   82c04:	d029      	beq.n	82c5a <SCPI_ErrorTranslate+0x86>
   82c06:	2800      	cmp	r0, #0
   82c08:	d122      	bne.n	82c50 <SCPI_ErrorTranslate+0x7c>
        case 0: return "No error";
   82c0a:	f24f 0024 	movw	r0, #61476	; 0xf024
   82c0e:	f2c0 0008 	movt	r0, #8
   82c12:	4770      	bx	lr
        case SCPI_ERROR_SYNTAX: return "Syntax error";
        case SCPI_ERROR_INVALID_SEPARATOR: return "Invalid separator";
   82c14:	f24f 0040 	movw	r0, #61504	; 0xf040
   82c18:	f2c0 0008 	movt	r0, #8
   82c1c:	4770      	bx	lr
        case SCPI_ERROR_UNDEFINED_HEADER: return "Undefined header";
   82c1e:	f24f 0054 	movw	r0, #61524	; 0xf054
   82c22:	f2c0 0008 	movt	r0, #8
   82c26:	4770      	bx	lr
        case SCPI_ERROR_PARAMETER_NOT_ALLOWED: return "Parameter not allowed";
   82c28:	f24f 0068 	movw	r0, #61544	; 0xf068
   82c2c:	f2c0 0008 	movt	r0, #8
   82c30:	4770      	bx	lr
        case SCPI_ERROR_MISSING_PARAMETER: return "Missing parameter";
   82c32:	f24f 0080 	movw	r0, #61568	; 0xf080
   82c36:	f2c0 0008 	movt	r0, #8
   82c3a:	4770      	bx	lr
        case SCPI_ERROR_INVALID_SUFFIX: return "Invalid suffix";
   82c3c:	f24f 0094 	movw	r0, #61588	; 0xf094
   82c40:	f2c0 0008 	movt	r0, #8
   82c44:	4770      	bx	lr
        case SCPI_ERROR_SUFFIX_NOT_ALLOWED: return "Suffix not allowed";
   82c46:	f24f 00a4 	movw	r0, #61604	; 0xf0a4
   82c4a:	f2c0 0008 	movt	r0, #8
   82c4e:	4770      	bx	lr
        default: return "Unknown error";
   82c50:	f24f 00b8 	movw	r0, #61624	; 0xf0b8
   82c54:	f2c0 0008 	movt	r0, #8
   82c58:	4770      	bx	lr
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
    switch (err) {
        case 0: return "No error";
        case SCPI_ERROR_SYNTAX: return "Syntax error";
   82c5a:	f24f 0030 	movw	r0, #61488	; 0xf030
   82c5e:	f2c0 0008 	movt	r0, #8
        case SCPI_ERROR_MISSING_PARAMETER: return "Missing parameter";
        case SCPI_ERROR_INVALID_SUFFIX: return "Invalid suffix";
        case SCPI_ERROR_SUFFIX_NOT_ALLOWED: return "Suffix not allowed";
        default: return "Unknown error";
    }
}
   82c62:	4770      	bx	lr

00082c64 <fifo_init>:

#include "fifo.h"

void fifo_init(fifo_t * fifo) {
    fifo->wr = 0;
   82c64:	f04f 0300 	mov.w	r3, #0
   82c68:	8003      	strh	r3, [r0, #0]
    fifo->rd = 0;
   82c6a:	8043      	strh	r3, [r0, #2]
    fifo->size = FIFO_SIZE;
   82c6c:	f04f 0110 	mov.w	r1, #16
   82c70:	8081      	strh	r1, [r0, #4]
   82c72:	4770      	bx	lr

00082c74 <fifo_clear>:
}

void fifo_clear(fifo_t * fifo) {
    fifo->wr = 0;
   82c74:	f04f 0300 	mov.w	r3, #0
   82c78:	8003      	strh	r3, [r0, #0]
    fifo->rd = 0;
   82c7a:	8043      	strh	r3, [r0, #2]
   82c7c:	4770      	bx	lr
   82c7e:	bf00      	nop

00082c80 <fifo_remove>:
    fifo->wr = (fifo->wr + 1) % (fifo->size + 1);

    return TRUE;
}

bool_t fifo_remove(fifo_t * fifo, int16_t * value) {
   82c80:	b410      	push	{r4}
    /* FIFO empty? */
    if (fifo->wr == fifo->rd) {
   82c82:	8843      	ldrh	r3, [r0, #2]
   82c84:	f9b0 4000 	ldrsh.w	r4, [r0]
   82c88:	b21a      	sxth	r2, r3
   82c8a:	4294      	cmp	r4, r2
   82c8c:	d014      	beq.n	82cb8 <fifo_remove+0x38>
        return FALSE;
    }

    if(value) {
   82c8e:	b119      	cbz	r1, 82c98 <fifo_remove+0x18>
        *value = fifo->data[fifo->rd];
   82c90:	eb00 0242 	add.w	r2, r0, r2, lsl #1
   82c94:	88d3      	ldrh	r3, [r2, #6]
   82c96:	800b      	strh	r3, [r1, #0]
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size + 1);
   82c98:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   82c9c:	f102 0201 	add.w	r2, r2, #1
   82ca0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   82ca4:	f103 0301 	add.w	r3, r3, #1
   82ca8:	fb92 f1f3 	sdiv	r1, r2, r3
   82cac:	fb03 2211 	mls	r2, r3, r1, r2
   82cb0:	8042      	strh	r2, [r0, #2]

    return TRUE;
   82cb2:	f04f 0001 	mov.w	r0, #1
   82cb6:	e001      	b.n	82cbc <fifo_remove+0x3c>
}

bool_t fifo_remove(fifo_t * fifo, int16_t * value) {
    /* FIFO empty? */
    if (fifo->wr == fifo->rd) {
        return FALSE;
   82cb8:	f04f 0000 	mov.w	r0, #0
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size + 1);

    return TRUE;
}
   82cbc:	bc10      	pop	{r4}
   82cbe:	4770      	bx	lr

00082cc0 <fifo_add>:
void fifo_clear(fifo_t * fifo) {
    fifo->wr = 0;
    fifo->rd = 0;
}

bool_t fifo_add(fifo_t * fifo, int16_t value) {
   82cc0:	b538      	push	{r3, r4, r5, lr}
   82cc2:	4604      	mov	r4, r0
   82cc4:	460d      	mov	r5, r1
    /* FIFO full? */
    if (fifo->wr == ((fifo->rd + fifo->size) % (fifo->size + 1))) {
   82cc6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   82cca:	f9b0 1000 	ldrsh.w	r1, [r0]
   82cce:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   82cd2:	18d2      	adds	r2, r2, r3
   82cd4:	f103 0301 	add.w	r3, r3, #1
   82cd8:	fb92 f0f3 	sdiv	r0, r2, r3
   82cdc:	fb03 2310 	mls	r3, r3, r0, r2
   82ce0:	4299      	cmp	r1, r3
   82ce2:	d107      	bne.n	82cf4 <fifo_add+0x34>
        fifo_remove(fifo, NULL);
   82ce4:	4620      	mov	r0, r4
   82ce6:	f04f 0100 	mov.w	r1, #0
   82cea:	f642 4281 	movw	r2, #11393	; 0x2c81
   82cee:	f2c0 0208 	movt	r2, #8
   82cf2:	4790      	blx	r2
    }

    fifo->data[fifo->wr] = value;
   82cf4:	f9b4 0000 	ldrsh.w	r0, [r4]
   82cf8:	eb04 0140 	add.w	r1, r4, r0, lsl #1
   82cfc:	80cd      	strh	r5, [r1, #6]
    fifo->wr = (fifo->wr + 1) % (fifo->size + 1);
   82cfe:	f100 0001 	add.w	r0, r0, #1
   82d02:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   82d06:	f103 0301 	add.w	r3, r3, #1
   82d0a:	fb90 f2f3 	sdiv	r2, r0, r3
   82d0e:	fb03 0012 	mls	r0, r3, r2, r0
   82d12:	8020      	strh	r0, [r4, #0]

    return TRUE;
}
   82d14:	f04f 0001 	mov.w	r0, #1
   82d18:	bd38      	pop	{r3, r4, r5, pc}
   82d1a:	bf00      	nop

00082d1c <fifo_count>:

    return TRUE;
}

bool_t fifo_count(fifo_t * fifo, int16_t * value) {
    *value = fifo->wr - fifo->rd;
   82d1c:	8802      	ldrh	r2, [r0, #0]
   82d1e:	8843      	ldrh	r3, [r0, #2]
   82d20:	1ad2      	subs	r2, r2, r3
   82d22:	b292      	uxth	r2, r2
   82d24:	b293      	uxth	r3, r2
   82d26:	800b      	strh	r3, [r1, #0]
    if (*value < 0) {
   82d28:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   82d2c:	d004      	beq.n	82d38 <fifo_count+0x1c>
        *value += (fifo->size + 1);
   82d2e:	8880      	ldrh	r0, [r0, #4]
   82d30:	f100 0001 	add.w	r0, r0, #1
   82d34:	1812      	adds	r2, r2, r0
   82d36:	800a      	strh	r2, [r1, #0]
    }
    return TRUE;
}
   82d38:	f04f 0001 	mov.w	r0, #1
   82d3c:	4770      	bx	lr
   82d3e:	bf00      	nop

00082d40 <SCPI_RegGet>:
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
    if ((name < SCPI_REG_COUNT) && (context->registers != NULL)) {
   82d40:	2907      	cmp	r1, #7
   82d42:	d804      	bhi.n	82d4e <SCPI_RegGet+0xe>
   82d44:	6b03      	ldr	r3, [r0, #48]	; 0x30
   82d46:	b12b      	cbz	r3, 82d54 <SCPI_RegGet+0x14>
        return context->registers[name];
   82d48:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
   82d4c:	4770      	bx	lr
    } else {
        return 0;
   82d4e:	f04f 0000 	mov.w	r0, #0
   82d52:	4770      	bx	lr
   82d54:	f04f 0000 	mov.w	r0, #0
    }
}
   82d58:	4770      	bx	lr
   82d5a:	bf00      	nop

00082d5c <SCPI_RegClearBits>:
/**
 * Clear register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegClearBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
   82d5c:	b570      	push	{r4, r5, r6, lr}
   82d5e:	4605      	mov	r5, r0
   82d60:	460c      	mov	r4, r1
   82d62:	4616      	mov	r6, r2
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
   82d64:	f642 5341 	movw	r3, #11585	; 0x2d41
   82d68:	f2c0 0308 	movt	r3, #8
   82d6c:	4798      	blx	r3
   82d6e:	ea20 0206 	bic.w	r2, r0, r6
   82d72:	4628      	mov	r0, r5
   82d74:	4621      	mov	r1, r4
   82d76:	b292      	uxth	r2, r2
   82d78:	f642 53b9 	movw	r3, #11705	; 0x2db9
   82d7c:	f2c0 0308 	movt	r3, #8
   82d80:	4798      	blx	r3
   82d82:	bd70      	pop	{r4, r5, r6, pc}

00082d84 <regUpdateSTB>:
 * @param context
 * @param val value of register
 * @param mask name of mask register (enable register)
 * @param stbBits bits to clear or set in STB
 */
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
   82d84:	b570      	push	{r4, r5, r6, lr}
   82d86:	4605      	mov	r5, r0
   82d88:	460e      	mov	r6, r1
   82d8a:	461c      	mov	r4, r3
    if (val & SCPI_RegGet(context, mask)) {
   82d8c:	4611      	mov	r1, r2
   82d8e:	f642 5341 	movw	r3, #11585	; 0x2d41
   82d92:	f2c0 0308 	movt	r3, #8
   82d96:	4798      	blx	r3
   82d98:	4230      	tst	r0, r6
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
   82d9a:	4628      	mov	r0, r5
   82d9c:	f04f 0100 	mov.w	r1, #0
   82da0:	4622      	mov	r2, r4
   82da2:	bf19      	ittee	ne
   82da4:	f642 63cd 	movwne	r3, #11981	; 0x2ecd
   82da8:	f2c0 0308 	movtne	r3, #8
    } else {
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
   82dac:	f642 535d 	movweq	r3, #11613	; 0x2d5d
   82db0:	f2c0 0308 	movteq	r3, #8
   82db4:	4798      	blx	r3
   82db6:	bd70      	pop	{r4, r5, r6, pc}

00082db8 <SCPI_RegSet>:
/**
 * Set register value
 * @param name - register name
 * @param val - new value
 */
void SCPI_RegSet(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t val) {
   82db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82dba:	4605      	mov	r5, r0
   82dbc:	460c      	mov	r4, r1
   82dbe:	4616      	mov	r6, r2
    bool_t srq = FALSE;
    scpi_reg_val_t mask;
    scpi_reg_val_t old_val;

    if ((name >= SCPI_REG_COUNT) || (context->registers == NULL)) {
   82dc0:	2907      	cmp	r1, #7
   82dc2:	f200 8081 	bhi.w	82ec8 <SCPI_RegSet+0x110>
   82dc6:	6b03      	ldr	r3, [r0, #48]	; 0x30
   82dc8:	2b00      	cmp	r3, #0
   82dca:	d07d      	beq.n	82ec8 <SCPI_RegSet+0x110>
        return;
    }
    
    /* store old register value */
    old_val = context->registers[name];
   82dcc:	f833 7011 	ldrh.w	r7, [r3, r1, lsl #1]

    /* set register value */
    context->registers[name] = val;
   82dd0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

    /** @TODO: remove recutsion */
    switch (name) {
   82dd4:	2907      	cmp	r1, #7
   82dd6:	d857      	bhi.n	82e88 <SCPI_RegSet+0xd0>
   82dd8:	e8df f001 	tbb	[pc, r1]
   82ddc:	281d1504 	.word	0x281d1504
   82de0:	3b304e43 	.word	0x3b304e43
        case SCPI_REG_STB:
            mask = SCPI_RegGet(context, SCPI_REG_SRE);
   82de4:	f04f 0101 	mov.w	r1, #1
   82de8:	f642 5241 	movw	r2, #11585	; 0x2d41
   82dec:	f2c0 0208 	movt	r2, #8
   82df0:	4790      	blx	r2
            mask &= ~STB_SRQ;
   82df2:	f64f 71bf 	movw	r1, #65471	; 0xffbf
   82df6:	4031      	ands	r1, r6
            if (val & mask) {
   82df8:	4201      	tst	r1, r0
   82dfa:	d052      	beq.n	82ea2 <SCPI_RegSet+0xea>
                val |= STB_SRQ;
   82dfc:	f046 0640 	orr.w	r6, r6, #64	; 0x40
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
   82e00:	42b7      	cmp	r7, r6
   82e02:	d153      	bne.n	82eac <SCPI_RegSet+0xf4>
   82e04:	e04e      	b.n	82ea4 <SCPI_RegSet+0xec>
            } else {
                val &= ~STB_SRQ;
            }
            break;
        case SCPI_REG_SRE:
            regUpdate(context, SCPI_REG_STB);
   82e06:	f04f 0100 	mov.w	r1, #0
   82e0a:	f642 63f5 	movw	r3, #12021	; 0x2ef5
   82e0e:	f2c0 0308 	movt	r3, #8
   82e12:	4798      	blx	r3
            break;
   82e14:	e046      	b.n	82ea4 <SCPI_RegSet+0xec>
        case SCPI_REG_ESR:
            regUpdateSTB(context, val, SCPI_REG_ESE, STB_ESR);
   82e16:	4611      	mov	r1, r2
   82e18:	f04f 0203 	mov.w	r2, #3
   82e1c:	f04f 0320 	mov.w	r3, #32
   82e20:	f642 5785 	movw	r7, #11653	; 0x2d85
   82e24:	f2c0 0708 	movt	r7, #8
   82e28:	47b8      	blx	r7
            break;
   82e2a:	e03b      	b.n	82ea4 <SCPI_RegSet+0xec>
        case SCPI_REG_ESE:
            regUpdate(context, SCPI_REG_ESR);
   82e2c:	f04f 0102 	mov.w	r1, #2
   82e30:	f642 62f5 	movw	r2, #12021	; 0x2ef5
   82e34:	f2c0 0208 	movt	r2, #8
   82e38:	4790      	blx	r2
            break;
   82e3a:	e033      	b.n	82ea4 <SCPI_RegSet+0xec>
        case SCPI_REG_QUES:
            regUpdateSTB(context, val, SCPI_REG_QUESE, STB_QES);
   82e3c:	4611      	mov	r1, r2
   82e3e:	f04f 0207 	mov.w	r2, #7
   82e42:	f04f 0308 	mov.w	r3, #8
   82e46:	f642 5785 	movw	r7, #11653	; 0x2d85
   82e4a:	f2c0 0708 	movt	r7, #8
   82e4e:	47b8      	blx	r7
            break;
   82e50:	e028      	b.n	82ea4 <SCPI_RegSet+0xec>
        case SCPI_REG_QUESE:
            regUpdate(context, SCPI_REG_QUES);
   82e52:	f04f 0106 	mov.w	r1, #6
   82e56:	f642 62f5 	movw	r2, #12021	; 0x2ef5
   82e5a:	f2c0 0208 	movt	r2, #8
   82e5e:	4790      	blx	r2
            break;
   82e60:	e020      	b.n	82ea4 <SCPI_RegSet+0xec>
        case SCPI_REG_OPER:
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
   82e62:	4611      	mov	r1, r2
   82e64:	f04f 0205 	mov.w	r2, #5
   82e68:	f04f 0380 	mov.w	r3, #128	; 0x80
   82e6c:	f642 5785 	movw	r7, #11653	; 0x2d85
   82e70:	f2c0 0708 	movt	r7, #8
   82e74:	47b8      	blx	r7
            break;
   82e76:	e015      	b.n	82ea4 <SCPI_RegSet+0xec>
        case SCPI_REG_OPERE:
            regUpdate(context, SCPI_REG_OPER);
   82e78:	f04f 0104 	mov.w	r1, #4
   82e7c:	f642 63f5 	movw	r3, #12021	; 0x2ef5
   82e80:	f2c0 0308 	movt	r3, #8
   82e84:	4798      	blx	r3
            break;
   82e86:	e00d      	b.n	82ea4 <SCPI_RegSet+0xec>
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
   82e88:	6b00      	ldr	r0, [r0, #48]	; 0x30
   82e8a:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
   82e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
    if (context && context->interface && context->interface->control) {
   82e90:	69e9      	ldr	r1, [r5, #28]
   82e92:	b1c9      	cbz	r1, 82ec8 <SCPI_RegSet+0x110>
   82e94:	688b      	ldr	r3, [r1, #8]
   82e96:	b1bb      	cbz	r3, 82ec8 <SCPI_RegSet+0x110>
        return context->interface->control(context, ctrl, val);
   82e98:	4628      	mov	r0, r5
   82e9a:	f04f 0101 	mov.w	r1, #1
   82e9e:	4798      	blx	r3
   82ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
                    srq = TRUE;
                }
            } else {
                val &= ~STB_SRQ;
   82ea2:	460e      	mov	r6, r1
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
   82ea4:	6b28      	ldr	r0, [r5, #48]	; 0x30
   82ea6:	f820 6014 	strh.w	r6, [r0, r4, lsl #1]
   82eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82eac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82eae:	f823 6014 	strh.w	r6, [r3, r4, lsl #1]

    if (srq) {
        writeControl(context, SCPI_CTRL_SRQ, SCPI_RegGet(context, SCPI_REG_STB));
   82eb2:	4628      	mov	r0, r5
   82eb4:	f04f 0100 	mov.w	r1, #0
   82eb8:	f642 5241 	movw	r2, #11585	; 0x2d41
   82ebc:	f2c0 0208 	movt	r2, #8
   82ec0:	4790      	blx	r2
   82ec2:	4602      	mov	r2, r0
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
    if (context && context->interface && context->interface->control) {
   82ec4:	2d00      	cmp	r5, #0
   82ec6:	d1e3      	bne.n	82e90 <SCPI_RegSet+0xd8>
   82ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82eca:	bf00      	nop

00082ecc <SCPI_RegSetBits>:
/**
 * Set register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegSetBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
   82ecc:	b570      	push	{r4, r5, r6, lr}
   82ece:	4605      	mov	r5, r0
   82ed0:	460c      	mov	r4, r1
   82ed2:	4616      	mov	r6, r2
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
   82ed4:	f642 5341 	movw	r3, #11585	; 0x2d41
   82ed8:	f2c0 0308 	movt	r3, #8
   82edc:	4798      	blx	r3
   82ede:	ea40 0206 	orr.w	r2, r0, r6
   82ee2:	4628      	mov	r0, r5
   82ee4:	4621      	mov	r1, r4
   82ee6:	b292      	uxth	r2, r2
   82ee8:	f642 53b9 	movw	r3, #11705	; 0x2db9
   82eec:	f2c0 0308 	movt	r3, #8
   82ef0:	4798      	blx	r3
   82ef2:	bd70      	pop	{r4, r5, r6, pc}

00082ef4 <regUpdate>:
/**
 * Update register value
 * @param context
 * @param name - register name
 */
static void regUpdate(scpi_t * context, scpi_reg_name_t name) {
   82ef4:	b538      	push	{r3, r4, r5, lr}
   82ef6:	4605      	mov	r5, r0
   82ef8:	460c      	mov	r4, r1
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
   82efa:	f642 5341 	movw	r3, #11585	; 0x2d41
   82efe:	f2c0 0308 	movt	r3, #8
   82f02:	4798      	blx	r3
   82f04:	4602      	mov	r2, r0
   82f06:	4628      	mov	r0, r5
   82f08:	4621      	mov	r1, r4
   82f0a:	f642 53b9 	movw	r3, #11705	; 0x2db9
   82f0e:	f2c0 0308 	movt	r3, #8
   82f12:	4798      	blx	r3
   82f14:	bd38      	pop	{r3, r4, r5, pc}
   82f16:	bf00      	nop

00082f18 <SCPI_EventClear>:

/**
 * Clear event register
 * @param context
 */
void SCPI_EventClear(scpi_t * context) {
   82f18:	b508      	push	{r3, lr}
    /* TODO */
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
   82f1a:	f04f 0102 	mov.w	r1, #2
   82f1e:	f04f 0200 	mov.w	r2, #0
   82f22:	f642 53b9 	movw	r3, #11705	; 0x2db9
   82f26:	f2c0 0308 	movt	r3, #8
   82f2a:	4798      	blx	r3
   82f2c:	bd08      	pop	{r3, pc}
   82f2e:	bf00      	nop

00082f30 <SCPI_CoreCls>:
 * *CLS - This command clears all status data structures in a device. 
 *        For a device which minimally complies with SCPI. (SCPI std 4.1.3.2)
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreCls(scpi_t * context) {
   82f30:	b538      	push	{r3, r4, r5, lr}
   82f32:	4604      	mov	r4, r0
    SCPI_EventClear(context);
   82f34:	f642 7319 	movw	r3, #12057	; 0x2f19
   82f38:	f2c0 0308 	movt	r3, #8
   82f3c:	4798      	blx	r3
    SCPI_ErrorClear(context);
   82f3e:	4620      	mov	r0, r4
   82f40:	f642 2151 	movw	r1, #10833	; 0x2a51
   82f44:	f2c0 0108 	movt	r1, #8
   82f48:	4788      	blx	r1
    SCPI_RegSet(context, SCPI_REG_OPER, 0);
   82f4a:	4620      	mov	r0, r4
   82f4c:	f04f 0104 	mov.w	r1, #4
   82f50:	f04f 0200 	mov.w	r2, #0
   82f54:	f642 55b9 	movw	r5, #11705	; 0x2db9
   82f58:	f2c0 0508 	movt	r5, #8
   82f5c:	47a8      	blx	r5
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
   82f5e:	4620      	mov	r0, r4
   82f60:	f04f 0106 	mov.w	r1, #6
   82f64:	f04f 0200 	mov.w	r2, #0
   82f68:	47a8      	blx	r5
    return SCPI_RES_OK;
}
   82f6a:	f04f 0001 	mov.w	r0, #1
   82f6e:	bd38      	pop	{r3, r4, r5, pc}

00082f70 <SCPI_CoreEse>:
/**
 * *ESE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEse(scpi_t * context) {
   82f70:	b510      	push	{r4, lr}
   82f72:	b082      	sub	sp, #8
   82f74:	4604      	mov	r4, r0
    int32_t new_ESE;
    if (SCPI_ParamInt(context, &new_ESE, TRUE)) {
   82f76:	a901      	add	r1, sp, #4
   82f78:	f04f 0201 	mov.w	r2, #1
   82f7c:	f243 7395 	movw	r3, #14229	; 0x3795
   82f80:	f2c0 0308 	movt	r3, #8
   82f84:	4798      	blx	r3
   82f86:	b148      	cbz	r0, 82f9c <SCPI_CoreEse+0x2c>
        SCPI_RegSet(context, SCPI_REG_ESE, new_ESE);
   82f88:	4620      	mov	r0, r4
   82f8a:	f04f 0103 	mov.w	r1, #3
   82f8e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   82f92:	f642 53b9 	movw	r3, #11705	; 0x2db9
   82f96:	f2c0 0308 	movt	r3, #8
   82f9a:	4798      	blx	r3
    }
    return SCPI_RES_OK;
}
   82f9c:	f04f 0001 	mov.w	r0, #1
   82fa0:	b002      	add	sp, #8
   82fa2:	bd10      	pop	{r4, pc}

00082fa4 <SCPI_CoreEseQ>:
/**
 * *ESE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEseQ(scpi_t * context) {
   82fa4:	b510      	push	{r4, lr}
   82fa6:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_ESE));
   82fa8:	f04f 0103 	mov.w	r1, #3
   82fac:	f642 5341 	movw	r3, #11585	; 0x2d41
   82fb0:	f2c0 0308 	movt	r3, #8
   82fb4:	4798      	blx	r3
   82fb6:	4601      	mov	r1, r0
   82fb8:	4620      	mov	r0, r4
   82fba:	f243 6221 	movw	r2, #13857	; 0x3621
   82fbe:	f2c0 0208 	movt	r2, #8
   82fc2:	4790      	blx	r2
    return SCPI_RES_OK;
}
   82fc4:	f04f 0001 	mov.w	r0, #1
   82fc8:	bd10      	pop	{r4, pc}
   82fca:	bf00      	nop

00082fcc <SCPI_CoreEsrQ>:
/**
 * *ESR?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEsrQ(scpi_t * context) {
   82fcc:	b510      	push	{r4, lr}
   82fce:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_ESR));
   82fd0:	f04f 0102 	mov.w	r1, #2
   82fd4:	f642 5341 	movw	r3, #11585	; 0x2d41
   82fd8:	f2c0 0308 	movt	r3, #8
   82fdc:	4798      	blx	r3
   82fde:	4601      	mov	r1, r0
   82fe0:	4620      	mov	r0, r4
   82fe2:	f243 6221 	movw	r2, #13857	; 0x3621
   82fe6:	f2c0 0208 	movt	r2, #8
   82fea:	4790      	blx	r2
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
   82fec:	4620      	mov	r0, r4
   82fee:	f04f 0102 	mov.w	r1, #2
   82ff2:	f04f 0200 	mov.w	r2, #0
   82ff6:	f642 53b9 	movw	r3, #11705	; 0x2db9
   82ffa:	f2c0 0308 	movt	r3, #8
   82ffe:	4798      	blx	r3
    return SCPI_RES_OK;
}
   83000:	f04f 0001 	mov.w	r0, #1
   83004:	bd10      	pop	{r4, pc}
   83006:	bf00      	nop

00083008 <SCPI_CoreIdnQ>:
/**
 * *IDN?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreIdnQ(scpi_t * context) {
   83008:	b538      	push	{r3, r4, r5, lr}
   8300a:	4605      	mov	r5, r0
    SCPI_ResultString(context, SCPI_MANUFACTURE);
   8300c:	f24f 01c8 	movw	r1, #61640	; 0xf0c8
   83010:	f2c0 0108 	movt	r1, #8
   83014:	f243 54e1 	movw	r4, #13793	; 0x35e1
   83018:	f2c0 0408 	movt	r4, #8
   8301c:	47a0      	blx	r4
    SCPI_ResultString(context, SCPI_DEV_NAME);
   8301e:	4628      	mov	r0, r5
   83020:	f24f 01d0 	movw	r1, #61648	; 0xf0d0
   83024:	f2c0 0108 	movt	r1, #8
   83028:	47a0      	blx	r4
    SCPI_ResultString(context, SCPI_DEV_VERSION);
   8302a:	4628      	mov	r0, r5
   8302c:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
   83030:	f2c0 0108 	movt	r1, #8
   83034:	47a0      	blx	r4
    return SCPI_RES_OK;
}
   83036:	f04f 0001 	mov.w	r0, #1
   8303a:	bd38      	pop	{r3, r4, r5, pc}

0008303c <SCPI_CoreOpc>:
/**
 * *OPC
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpc(scpi_t * context) {
   8303c:	b508      	push	{r3, lr}
    SCPI_RegSetBits(context, SCPI_REG_ESR, ESR_OPC);
   8303e:	f04f 0102 	mov.w	r1, #2
   83042:	f04f 0201 	mov.w	r2, #1
   83046:	f642 63cd 	movw	r3, #11981	; 0x2ecd
   8304a:	f2c0 0308 	movt	r3, #8
   8304e:	4798      	blx	r3
    return SCPI_RES_OK;
}
   83050:	f04f 0001 	mov.w	r0, #1
   83054:	bd08      	pop	{r3, pc}
   83056:	bf00      	nop

00083058 <SCPI_CoreOpcQ>:
/**
 * *OPC?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpcQ(scpi_t * context) {
   83058:	b508      	push	{r3, lr}
    /* Operation is always completed */
    SCPI_ResultInt(context, 1);
   8305a:	f04f 0101 	mov.w	r1, #1
   8305e:	f243 6321 	movw	r3, #13857	; 0x3621
   83062:	f2c0 0308 	movt	r3, #8
   83066:	4798      	blx	r3
    return SCPI_RES_OK;
}
   83068:	f04f 0001 	mov.w	r0, #1
   8306c:	bd08      	pop	{r3, pc}
   8306e:	bf00      	nop

00083070 <SCPI_CoreRst>:
/**
 * *RST
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreRst(scpi_t * context) {
   83070:	b508      	push	{r3, lr}
    if (context && context->interface && context->interface->reset) {
   83072:	b128      	cbz	r0, 83080 <SCPI_CoreRst+0x10>
   83074:	69c3      	ldr	r3, [r0, #28]
   83076:	b133      	cbz	r3, 83086 <SCPI_CoreRst+0x16>
   83078:	6919      	ldr	r1, [r3, #16]
   8307a:	b139      	cbz	r1, 8308c <SCPI_CoreRst+0x1c>
        return context->interface->reset(context);
   8307c:	4788      	blx	r1
   8307e:	e007      	b.n	83090 <SCPI_CoreRst+0x20>
    }
    return SCPI_RES_OK;
   83080:	f04f 0001 	mov.w	r0, #1
   83084:	e004      	b.n	83090 <SCPI_CoreRst+0x20>
   83086:	f04f 0001 	mov.w	r0, #1
   8308a:	e001      	b.n	83090 <SCPI_CoreRst+0x20>
   8308c:	f04f 0001 	mov.w	r0, #1
}
   83090:	b240      	sxtb	r0, r0
   83092:	bd08      	pop	{r3, pc}

00083094 <SCPI_CoreSre>:
/**
 * *SRE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSre(scpi_t * context) {
   83094:	b510      	push	{r4, lr}
   83096:	b082      	sub	sp, #8
   83098:	4604      	mov	r4, r0
    int32_t new_SRE;
    if (SCPI_ParamInt(context, &new_SRE, TRUE)) {
   8309a:	a901      	add	r1, sp, #4
   8309c:	f04f 0201 	mov.w	r2, #1
   830a0:	f243 7395 	movw	r3, #14229	; 0x3795
   830a4:	f2c0 0308 	movt	r3, #8
   830a8:	4798      	blx	r3
   830aa:	b148      	cbz	r0, 830c0 <SCPI_CoreSre+0x2c>
        SCPI_RegSet(context, SCPI_REG_SRE, new_SRE);
   830ac:	4620      	mov	r0, r4
   830ae:	f04f 0101 	mov.w	r1, #1
   830b2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   830b6:	f642 53b9 	movw	r3, #11705	; 0x2db9
   830ba:	f2c0 0308 	movt	r3, #8
   830be:	4798      	blx	r3
    }
    return SCPI_RES_OK;
}
   830c0:	f04f 0001 	mov.w	r0, #1
   830c4:	b002      	add	sp, #8
   830c6:	bd10      	pop	{r4, pc}

000830c8 <SCPI_CoreSreQ>:
/**
 * *SRE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSreQ(scpi_t * context) {
   830c8:	b510      	push	{r4, lr}
   830ca:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_SRE));
   830cc:	f04f 0101 	mov.w	r1, #1
   830d0:	f642 5341 	movw	r3, #11585	; 0x2d41
   830d4:	f2c0 0308 	movt	r3, #8
   830d8:	4798      	blx	r3
   830da:	4601      	mov	r1, r0
   830dc:	4620      	mov	r0, r4
   830de:	f243 6221 	movw	r2, #13857	; 0x3621
   830e2:	f2c0 0208 	movt	r2, #8
   830e6:	4790      	blx	r2
    return SCPI_RES_OK;
}
   830e8:	f04f 0001 	mov.w	r0, #1
   830ec:	bd10      	pop	{r4, pc}
   830ee:	bf00      	nop

000830f0 <SCPI_CoreStbQ>:
/**
 * *STB?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreStbQ(scpi_t * context) {
   830f0:	b510      	push	{r4, lr}
   830f2:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_STB));
   830f4:	f04f 0100 	mov.w	r1, #0
   830f8:	f642 5341 	movw	r3, #11585	; 0x2d41
   830fc:	f2c0 0308 	movt	r3, #8
   83100:	4798      	blx	r3
   83102:	4601      	mov	r1, r0
   83104:	4620      	mov	r0, r4
   83106:	f243 6221 	movw	r2, #13857	; 0x3621
   8310a:	f2c0 0208 	movt	r2, #8
   8310e:	4790      	blx	r2
    return SCPI_RES_OK;
}
   83110:	f04f 0001 	mov.w	r0, #1
   83114:	bd10      	pop	{r4, pc}
   83116:	bf00      	nop

00083118 <SCPI_CoreTstQ>:
/**
 * *TST?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreTstQ(scpi_t * context) {
   83118:	b510      	push	{r4, lr}
    int result = 0;
    if (context && context->interface && context->interface->test) {
   8311a:	4604      	mov	r4, r0
   8311c:	b130      	cbz	r0, 8312c <SCPI_CoreTstQ+0x14>
   8311e:	69c3      	ldr	r3, [r0, #28]
   83120:	b13b      	cbz	r3, 83132 <SCPI_CoreTstQ+0x1a>
   83122:	6959      	ldr	r1, [r3, #20]
   83124:	b141      	cbz	r1, 83138 <SCPI_CoreTstQ+0x20>
        result = context->interface->test(context);
   83126:	4788      	blx	r1
   83128:	4601      	mov	r1, r0
   8312a:	e007      	b.n	8313c <SCPI_CoreTstQ+0x24>
 * *TST?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreTstQ(scpi_t * context) {
    int result = 0;
   8312c:	f04f 0100 	mov.w	r1, #0
   83130:	e004      	b.n	8313c <SCPI_CoreTstQ+0x24>
   83132:	f04f 0100 	mov.w	r1, #0
   83136:	e001      	b.n	8313c <SCPI_CoreTstQ+0x24>
   83138:	f04f 0100 	mov.w	r1, #0
    if (context && context->interface && context->interface->test) {
        result = context->interface->test(context);
    }
    SCPI_ResultInt(context, result);
   8313c:	4620      	mov	r0, r4
   8313e:	f243 6221 	movw	r2, #13857	; 0x3621
   83142:	f2c0 0208 	movt	r2, #8
   83146:	4790      	blx	r2
    return SCPI_RES_OK;
}
   83148:	f04f 0001 	mov.w	r0, #1
   8314c:	bd10      	pop	{r4, pc}
   8314e:	bf00      	nop

00083150 <SCPI_CoreWai>:
 */
scpi_result_t SCPI_CoreWai(scpi_t * context) {
    (void) context;
    /* NOP */
    return SCPI_RES_OK;
}
   83150:	f04f 0001 	mov.w	r0, #1
   83154:	4770      	bx	lr
   83156:	bf00      	nop

00083158 <SCPI_SystemVersionQ>:
/**
 * SYSTem:VERSion?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemVersionQ(scpi_t * context) {
   83158:	b508      	push	{r3, lr}
    SCPI_ResultString(context, SCPI_DEV_VERSION);
   8315a:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
   8315e:	f2c0 0108 	movt	r1, #8
   83162:	f243 53e1 	movw	r3, #13793	; 0x35e1
   83166:	f2c0 0308 	movt	r3, #8
   8316a:	4798      	blx	r3
    return SCPI_RES_OK;
}
   8316c:	f04f 0001 	mov.w	r0, #1
   83170:	bd08      	pop	{r3, pc}
   83172:	bf00      	nop

00083174 <SCPI_SystemErrorNextQ>:
/**
 * SYSTem:ERRor[:NEXT]?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemErrorNextQ(scpi_t * context) {
   83174:	b538      	push	{r3, r4, r5, lr}
   83176:	4604      	mov	r4, r0
    int16_t err = SCPI_ErrorPop(context);
   83178:	f642 2361 	movw	r3, #10849	; 0x2a61
   8317c:	f2c0 0308 	movt	r3, #8
   83180:	4798      	blx	r3
   83182:	4605      	mov	r5, r0

    SCPI_ResultInt(context, err);
   83184:	4620      	mov	r0, r4
   83186:	4629      	mov	r1, r5
   83188:	f243 6221 	movw	r2, #13857	; 0x3621
   8318c:	f2c0 0208 	movt	r2, #8
   83190:	4790      	blx	r2
    SCPI_ResultText(context, SCPI_ErrorTranslate(err));
   83192:	4628      	mov	r0, r5
   83194:	f642 31d5 	movw	r1, #11221	; 0x2bd5
   83198:	f2c0 0108 	movt	r1, #8
   8319c:	4788      	blx	r1
   8319e:	4601      	mov	r1, r0
   831a0:	4620      	mov	r0, r4
   831a2:	f243 6369 	movw	r3, #13929	; 0x3669
   831a6:	f2c0 0308 	movt	r3, #8
   831aa:	4798      	blx	r3

    return SCPI_RES_OK;
}
   831ac:	f04f 0001 	mov.w	r0, #1
   831b0:	bd38      	pop	{r3, r4, r5, pc}
   831b2:	bf00      	nop

000831b4 <SCPI_SystemErrorCountQ>:
/**
 * SYSTem:ERRor:COUNt?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemErrorCountQ(scpi_t * context) {
   831b4:	b510      	push	{r4, lr}
   831b6:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_ErrorCount(context));
   831b8:	f642 2385 	movw	r3, #10885	; 0x2a85
   831bc:	f2c0 0308 	movt	r3, #8
   831c0:	4798      	blx	r3
   831c2:	4601      	mov	r1, r0
   831c4:	4620      	mov	r0, r4
   831c6:	f243 6221 	movw	r2, #13857	; 0x3621
   831ca:	f2c0 0208 	movt	r2, #8
   831ce:	4790      	blx	r2

    return SCPI_RES_OK;
}
   831d0:	f04f 0001 	mov.w	r0, #1
   831d4:	bd10      	pop	{r4, pc}
   831d6:	bf00      	nop

000831d8 <SCPI_StatusQuestionableEventQ>:
/**
 * STATus:QUEStionable[:EVENt]?
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusQuestionableEventQ(scpi_t * context) {
   831d8:	b510      	push	{r4, lr}
   831da:	4604      	mov	r4, r0
    /* return value */
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_QUES));
   831dc:	f04f 0106 	mov.w	r1, #6
   831e0:	f642 5341 	movw	r3, #11585	; 0x2d41
   831e4:	f2c0 0308 	movt	r3, #8
   831e8:	4798      	blx	r3
   831ea:	4601      	mov	r1, r0
   831ec:	4620      	mov	r0, r4
   831ee:	f243 6221 	movw	r2, #13857	; 0x3621
   831f2:	f2c0 0208 	movt	r2, #8
   831f6:	4790      	blx	r2

    /* clear register */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
   831f8:	4620      	mov	r0, r4
   831fa:	f04f 0106 	mov.w	r1, #6
   831fe:	f04f 0200 	mov.w	r2, #0
   83202:	f642 53b9 	movw	r3, #11705	; 0x2db9
   83206:	f2c0 0308 	movt	r3, #8
   8320a:	4798      	blx	r3

    return SCPI_RES_OK;
}
   8320c:	f04f 0001 	mov.w	r0, #1
   83210:	bd10      	pop	{r4, pc}
   83212:	bf00      	nop

00083214 <SCPI_StatusQuestionableEnableQ>:
/**
 * STATus:QUEStionable:ENABle?
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusQuestionableEnableQ(scpi_t * context) {
   83214:	b510      	push	{r4, lr}
   83216:	4604      	mov	r4, r0
    /* return value */
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_QUESE));
   83218:	f04f 0107 	mov.w	r1, #7
   8321c:	f642 5341 	movw	r3, #11585	; 0x2d41
   83220:	f2c0 0308 	movt	r3, #8
   83224:	4798      	blx	r3
   83226:	4601      	mov	r1, r0
   83228:	4620      	mov	r0, r4
   8322a:	f243 6221 	movw	r2, #13857	; 0x3621
   8322e:	f2c0 0208 	movt	r2, #8
   83232:	4790      	blx	r2

    return SCPI_RES_OK;
}
   83234:	f04f 0001 	mov.w	r0, #1
   83238:	bd10      	pop	{r4, pc}
   8323a:	bf00      	nop

0008323c <SCPI_StatusQuestionableEnable>:
/**
 * STATus:QUEStionable:ENABle
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusQuestionableEnable(scpi_t * context) {
   8323c:	b510      	push	{r4, lr}
   8323e:	b082      	sub	sp, #8
   83240:	4604      	mov	r4, r0
    int32_t new_QUESE;
    if (SCPI_ParamInt(context, &new_QUESE, TRUE)) {
   83242:	a901      	add	r1, sp, #4
   83244:	f04f 0201 	mov.w	r2, #1
   83248:	f243 7395 	movw	r3, #14229	; 0x3795
   8324c:	f2c0 0308 	movt	r3, #8
   83250:	4798      	blx	r3
   83252:	b148      	cbz	r0, 83268 <SCPI_StatusQuestionableEnable+0x2c>
        SCPI_RegSet(context, SCPI_REG_QUESE, new_QUESE);
   83254:	4620      	mov	r0, r4
   83256:	f04f 0107 	mov.w	r1, #7
   8325a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   8325e:	f642 53b9 	movw	r3, #11705	; 0x2db9
   83262:	f2c0 0308 	movt	r3, #8
   83266:	4798      	blx	r3
    }
    return SCPI_RES_OK;
}
   83268:	f04f 0001 	mov.w	r0, #1
   8326c:	b002      	add	sp, #8
   8326e:	bd10      	pop	{r4, pc}

00083270 <SCPI_StatusPreset>:
/**
 * STATus:PRESet
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusPreset(scpi_t * context) {
   83270:	b508      	push	{r3, lr}
    /* clear STATUS:... */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
   83272:	f04f 0106 	mov.w	r1, #6
   83276:	f04f 0200 	mov.w	r2, #0
   8327a:	f642 53b9 	movw	r3, #11705	; 0x2db9
   8327e:	f2c0 0308 	movt	r3, #8
   83282:	4798      	blx	r3
    return SCPI_RES_OK;
}
   83284:	f04f 0001 	mov.w	r0, #1
   83288:	bd08      	pop	{r3, pc}
   8328a:	bf00      	nop

0008328c <writeData>:
 * @param context
 * @param data
 * @param len - lenght of data to be written
 * @return number of bytes written
 */
static size_t writeData(scpi_t * context, const char * data, size_t len) {
   8328c:	b508      	push	{r3, lr}
    return context->interface->write(context, data, len);
   8328e:	69c3      	ldr	r3, [r0, #28]
   83290:	685b      	ldr	r3, [r3, #4]
   83292:	4798      	blx	r3
}
   83294:	bd08      	pop	{r3, pc}
   83296:	bf00      	nop

00083298 <writeDelimiter>:
/**
 * Write result delimiter to output
 * @param context
 * @return number of bytes written
 */
static size_t writeDelimiter(scpi_t * context) {
   83298:	b508      	push	{r3, lr}
    if (context->output_count > 0) {
   8329a:	6a03      	ldr	r3, [r0, #32]
   8329c:	2b00      	cmp	r3, #0
   8329e:	dd0b      	ble.n	832b8 <writeDelimiter+0x20>
        return writeData(context, ", ", 2);
   832a0:	f24f 01f8 	movw	r1, #61688	; 0xf0f8
   832a4:	f2c0 0108 	movt	r1, #8
   832a8:	f04f 0202 	mov.w	r2, #2
   832ac:	f243 238d 	movw	r3, #12941	; 0x328d
   832b0:	f2c0 0308 	movt	r3, #8
   832b4:	4798      	blx	r3
   832b6:	bd08      	pop	{r3, pc}
    } else {
        return 0;
   832b8:	f04f 0000 	mov.w	r0, #0
    }
}
   832bc:	bd08      	pop	{r3, pc}
   832be:	bf00      	nop

000832c0 <paramSkipBytes>:
 * Skip num bytes from the begginig of parameters
 * @param context
 * @param num
 */
void paramSkipBytes(scpi_t * context, size_t num) {
    if (context->paramlist.length < num) {
   832c0:	6983      	ldr	r3, [r0, #24]
   832c2:	4299      	cmp	r1, r3
   832c4:	bf28      	it	cs
   832c6:	4619      	movcs	r1, r3
        num = context->paramlist.length;
    }
    context->paramlist.parameters += num;
   832c8:	6942      	ldr	r2, [r0, #20]
   832ca:	1852      	adds	r2, r2, r1
   832cc:	6142      	str	r2, [r0, #20]
    context->paramlist.length -= num;
   832ce:	1a59      	subs	r1, r3, r1
   832d0:	6181      	str	r1, [r0, #24]
   832d2:	4770      	bx	lr

000832d4 <paramSkipWhitespace>:

/**
 * Skip white spaces from the beggining of parameters
 * @param context
 */
void paramSkipWhitespace(scpi_t * context) {
   832d4:	b510      	push	{r4, lr}
   832d6:	4604      	mov	r4, r0
    size_t ws = skipWhitespace(context->paramlist.parameters, context->paramlist.length);
   832d8:	6940      	ldr	r0, [r0, #20]
   832da:	69a1      	ldr	r1, [r4, #24]
   832dc:	f643 339d 	movw	r3, #15261	; 0x3b9d
   832e0:	f2c0 0308 	movt	r3, #8
   832e4:	4798      	blx	r3
   832e6:	4601      	mov	r1, r0
    paramSkipBytes(context, ws);
   832e8:	4620      	mov	r0, r4
   832ea:	f243 22c1 	movw	r2, #12993	; 0x32c1
   832ee:	f2c0 0208 	movt	r2, #8
   832f2:	4790      	blx	r2
   832f4:	bd10      	pop	{r4, pc}
   832f6:	bf00      	nop

000832f8 <paramNext>:
 * Find next parameter
 * @param context
 * @param mandatory
 * @return 
 */
bool_t paramNext(scpi_t * context, bool_t mandatory) {
   832f8:	b538      	push	{r3, r4, r5, lr}
   832fa:	4604      	mov	r4, r0
   832fc:	460d      	mov	r5, r1
    paramSkipWhitespace(context);
   832fe:	f243 23d5 	movw	r3, #13013	; 0x32d5
   83302:	f2c0 0308 	movt	r3, #8
   83306:	4798      	blx	r3
    if (context->paramlist.length == 0) {
   83308:	69a0      	ldr	r0, [r4, #24]
   8330a:	b960      	cbnz	r0, 83326 <paramNext+0x2e>
        if (mandatory) {
   8330c:	2d00      	cmp	r5, #0
   8330e:	d031      	beq.n	83374 <paramNext+0x7c>
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
   83310:	4620      	mov	r0, r4
   83312:	f06f 016c 	mvn.w	r1, #108	; 0x6c
   83316:	f642 22a9 	movw	r2, #10921	; 0x2aa9
   8331a:	f2c0 0208 	movt	r2, #8
   8331e:	4790      	blx	r2
        }
        return FALSE;
   83320:	f04f 0000 	mov.w	r0, #0
   83324:	bd38      	pop	{r3, r4, r5, pc}
    }
    if (context->input_count != 0) {
   83326:	6a61      	ldr	r1, [r4, #36]	; 0x24
   83328:	b1e9      	cbz	r1, 83366 <paramNext+0x6e>
        if (context->paramlist.parameters[0] == ',') {
   8332a:	6962      	ldr	r2, [r4, #20]
   8332c:	7813      	ldrb	r3, [r2, #0]
   8332e:	2b2c      	cmp	r3, #44	; 0x2c
   83330:	d10e      	bne.n	83350 <paramNext+0x58>
            paramSkipBytes(context, 1);
   83332:	4620      	mov	r0, r4
   83334:	f04f 0101 	mov.w	r1, #1
   83338:	f243 23c1 	movw	r3, #12993	; 0x32c1
   8333c:	f2c0 0308 	movt	r3, #8
   83340:	4798      	blx	r3
            paramSkipWhitespace(context);
   83342:	4620      	mov	r0, r4
   83344:	f243 21d5 	movw	r1, #13013	; 0x32d5
   83348:	f2c0 0108 	movt	r1, #8
   8334c:	4788      	blx	r1
   8334e:	e00a      	b.n	83366 <paramNext+0x6e>
        } else {
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SEPARATOR);
   83350:	4620      	mov	r0, r4
   83352:	f06f 0166 	mvn.w	r1, #102	; 0x66
   83356:	f642 22a9 	movw	r2, #10921	; 0x2aa9
   8335a:	f2c0 0208 	movt	r2, #8
   8335e:	4790      	blx	r2
            return FALSE;
   83360:	f04f 0000 	mov.w	r0, #0
   83364:	bd38      	pop	{r3, r4, r5, pc}
        }
    }
    context->input_count++;
   83366:	6a60      	ldr	r0, [r4, #36]	; 0x24
   83368:	f100 0001 	add.w	r0, r0, #1
   8336c:	6260      	str	r0, [r4, #36]	; 0x24
    return TRUE;
   8336e:	f04f 0001 	mov.w	r0, #1
   83372:	bd38      	pop	{r3, r4, r5, pc}
    paramSkipWhitespace(context);
    if (context->paramlist.length == 0) {
        if (mandatory) {
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
        }
        return FALSE;
   83374:	f04f 0000 	mov.w	r0, #0
            return FALSE;
        }
    }
    context->input_count++;
    return TRUE;
}
   83378:	bd38      	pop	{r3, r4, r5, pc}
   8337a:	bf00      	nop

0008337c <cmdlineSeparator>:
 * Find command line separator
 * @param cmd - input command
 * @param len - max search length
 * @return pointer to line separator or NULL
 */
const char * cmdlineSeparator(const char * cmd, size_t len) {
   8337c:	b508      	push	{r3, lr}
    return strnpbrk(cmd, len, ";\r\n");
   8337e:	f24f 02fc 	movw	r2, #61692	; 0xf0fc
   83382:	f2c0 0208 	movt	r2, #8
   83386:	f643 030d 	movw	r3, #14349	; 0x380d
   8338a:	f2c0 0308 	movt	r3, #8
   8338e:	4798      	blx	r3
}
   83390:	bd08      	pop	{r3, pc}
   83392:	bf00      	nop

00083394 <SCPI_Parse>:
 * @param context
 * @param data - complete command line
 * @param len - command line length
 * @return 1 if the last evaluated command was found
 */
int SCPI_Parse(scpi_t * context, const char * data, size_t len) {
   83394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83398:	b083      	sub	sp, #12
    int result = 0;
    const char * cmdline_end = data + len;
   8339a:	eb01 0b02 	add.w	fp, r1, r2
    const char * cmdline_ptr = data;
    size_t cmd_len;
    size_t cmdline_len;

    if (context == NULL) {
   8339e:	4607      	mov	r7, r0
   833a0:	2800      	cmp	r0, #0
   833a2:	f000 809e 	beq.w	834e2 <SCPI_Parse+0x14e>
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
   833a6:	4559      	cmp	r1, fp
   833a8:	f080 809e 	bcs.w	834e8 <SCPI_Parse+0x154>
   833ac:	460d      	mov	r5, r1
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
            } else {
                SCPI_ErrorPush(context, SCPI_ERROR_UNDEFINED_HEADER);
   833ae:	f642 23a9 	movw	r3, #10921	; 0x2aa9
   833b2:	f2c0 0308 	movt	r3, #8
   833b6:	9301      	str	r3, [sp, #4]
    }

	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
   833b8:	462c      	mov	r4, r5
   833ba:	ebc5 080b 	rsb	r8, r5, fp
 * @param cmd - input command
 * @param len - max search length
 * @return position of terminator or len
 */
size_t cmdTerminatorPos(const char * cmd, size_t len) {
    const char * terminator = strnpbrk(cmd, len, "; \r\n\t");
   833be:	4628      	mov	r0, r5
   833c0:	4641      	mov	r1, r8
   833c2:	4a51      	ldr	r2, [pc, #324]	; (83508 <SCPI_Parse+0x174>)
   833c4:	f643 060d 	movw	r6, #14349	; 0x380d
   833c8:	f2c0 0608 	movt	r6, #8
   833cc:	47b0      	blx	r6
    if (terminator == NULL) {
   833ce:	b108      	cbz	r0, 833d4 <SCPI_Parse+0x40>
        return len;
    } else {
        return terminator - cmd;
   833d0:	1b46      	subs	r6, r0, r5
   833d2:	e000      	b.n	833d6 <SCPI_Parse+0x42>
 * @return position of terminator or len
 */
size_t cmdTerminatorPos(const char * cmd, size_t len) {
    const char * terminator = strnpbrk(cmd, len, "; \r\n\t");
    if (terminator == NULL) {
        return len;
   833d4:	4646      	mov	r6, r8
 * @param cmd - input command
 * @param len - max search length
 * @return position of line separator or len
 */
size_t cmdlineSeparatorPos(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
   833d6:	4628      	mov	r0, r5
   833d8:	4641      	mov	r1, r8
   833da:	f243 327d 	movw	r2, #13181	; 0x337d
   833de:	f2c0 0208 	movt	r2, #8
   833e2:	4790      	blx	r2
    if (separator == NULL) {
   833e4:	b110      	cbz	r0, 833ec <SCPI_Parse+0x58>
        return len;
    } else {
        return separator - cmd;
   833e6:	1b00      	subs	r0, r0, r4
   833e8:	9000      	str	r0, [sp, #0]
   833ea:	e001      	b.n	833f0 <SCPI_Parse+0x5c>
 * @return position of line separator or len
 */
size_t cmdlineSeparatorPos(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
    if (separator == NULL) {
        return len;
   833ec:	f8cd 8000 	str.w	r8, [sp]
	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        if (cmd_len > 0) {
   833f0:	2e00      	cmp	r6, #0
   833f2:	d05f      	beq.n	834b4 <SCPI_Parse+0x120>
 */
static bool_t findCommand(scpi_t * context, const char * cmdline_ptr, size_t cmdline_len, size_t cmd_len) {
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
   833f4:	f8d7 9000 	ldr.w	r9, [r7]
   833f8:	f8d9 0000 	ldr.w	r0, [r9]
   833fc:	2800      	cmp	r0, #0
   833fe:	d076      	beq.n	834ee <SCPI_Parse+0x15a>
   83400:	f04f 0408 	mov.w	r4, #8
        cmd = &context->cmdlist[i];
        if (matchCommand(cmd->pattern, cmdline_ptr, cmd_len)) {
   83404:	f643 4af1 	movw	sl, #15601	; 0x3cf1
   83408:	f2c0 0a08 	movt	sl, #8
   8340c:	4629      	mov	r1, r5
   8340e:	4632      	mov	r2, r6
   83410:	47d0      	blx	sl
   83412:	b190      	cbz	r0, 8343a <SCPI_Parse+0xa6>
            context->paramlist.cmd = cmd;
   83414:	f8c7 9010 	str.w	r9, [r7, #16]
            context->paramlist.parameters = cmdline_ptr + cmd_len;
   83418:	19ab      	adds	r3, r5, r6
   8341a:	617b      	str	r3, [r7, #20]
            context->paramlist.length = cmdline_len - cmd_len;
   8341c:	9800      	ldr	r0, [sp, #0]
   8341e:	1b86      	subs	r6, r0, r6
   83420:	61be      	str	r6, [r7, #24]
 * @param context
 */
static void processCommand(scpi_t * context) {
    const scpi_command_t * cmd = context->paramlist.cmd;

    context->cmd_error = FALSE;
   83422:	f04f 0400 	mov.w	r4, #0
   83426:	f887 4028 	strb.w	r4, [r7, #40]	; 0x28
    context->output_count = 0;
   8342a:	f04f 0100 	mov.w	r1, #0
   8342e:	6239      	str	r1, [r7, #32]
    context->input_count = 0;
   83430:	6279      	str	r1, [r7, #36]	; 0x24

    SCPI_DEBUG_COMMAND(context);
    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
   83432:	f8d9 2004 	ldr.w	r2, [r9, #4]
   83436:	b94a      	cbnz	r2, 8344c <SCPI_Parse+0xb8>
   83438:	e014      	b.n	83464 <SCPI_Parse+0xd0>
 */
static bool_t findCommand(scpi_t * context, const char * cmdline_ptr, size_t cmdline_len, size_t cmd_len) {
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
   8343a:	6839      	ldr	r1, [r7, #0]
   8343c:	eb01 0904 	add.w	r9, r1, r4
   83440:	5908      	ldr	r0, [r1, r4]
   83442:	f104 0408 	add.w	r4, r4, #8
   83446:	2800      	cmp	r0, #0
   83448:	d1e0      	bne.n	8340c <SCPI_Parse+0x78>
   8344a:	e050      	b.n	834ee <SCPI_Parse+0x15a>
    context->input_count = 0;

    SCPI_DEBUG_COMMAND(context);
    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
        if ((cmd->callback(context) != SCPI_RES_OK) && !context->cmd_error) {
   8344c:	4638      	mov	r0, r7
   8344e:	4790      	blx	r2
   83450:	2801      	cmp	r0, #1
   83452:	d007      	beq.n	83464 <SCPI_Parse+0xd0>
   83454:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   83458:	b923      	cbnz	r3, 83464 <SCPI_Parse+0xd0>
            SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
   8345a:	4638      	mov	r0, r7
   8345c:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
   83460:	9c01      	ldr	r4, [sp, #4]
   83462:	47a0      	blx	r4
 * Conditionaly write "New Line"
 * @param context
 * @return number of characters written
 */
static size_t writeNewLine(scpi_t * context) {
    if (context->output_count > 0) {
   83464:	6a38      	ldr	r0, [r7, #32]
   83466:	2800      	cmp	r0, #0
   83468:	dd11      	ble.n	8348e <SCPI_Parse+0xfa>
        size_t len;
        len = writeData(context, "\r\n", 2);
   8346a:	4638      	mov	r0, r7
   8346c:	f24f 410c 	movw	r1, #62476	; 0xf40c
   83470:	f2c0 0108 	movt	r1, #8
   83474:	f04f 0202 	mov.w	r2, #2
   83478:	f243 238d 	movw	r3, #12941	; 0x328d
   8347c:	f2c0 0308 	movt	r3, #8
   83480:	4798      	blx	r3
 * Flush data to SCPI output
 * @param context
 * @return
 */
static int flushData(scpi_t * context) {
    if (context && context->interface && context->interface->flush) {
   83482:	69f9      	ldr	r1, [r7, #28]
   83484:	b119      	cbz	r1, 8348e <SCPI_Parse+0xfa>
   83486:	68ca      	ldr	r2, [r1, #12]
   83488:	b10a      	cbz	r2, 8348e <SCPI_Parse+0xfa>
        return context->interface->flush(context);
   8348a:	4638      	mov	r0, r7
   8348c:	4790      	blx	r2

    /* conditionaly write new line */
    writeNewLine(context);

    /* skip all whitespaces */
    paramSkipWhitespace(context);
   8348e:	4638      	mov	r0, r7
   83490:	f243 24d5 	movw	r4, #13013	; 0x32d5
   83494:	f2c0 0408 	movt	r4, #8
   83498:	47a0      	blx	r4

    /* set error if command callback did not read all parameters */
    if (context->paramlist.length != 0 && !context->cmd_error) {
   8349a:	69b8      	ldr	r0, [r7, #24]
   8349c:	b168      	cbz	r0, 834ba <SCPI_Parse+0x126>
   8349e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   834a2:	b96b      	cbnz	r3, 834c0 <SCPI_Parse+0x12c>
        SCPI_ErrorPush(context, SCPI_ERROR_PARAMETER_NOT_ALLOWED);
   834a4:	4638      	mov	r0, r7
   834a6:	f06f 016b 	mvn.w	r1, #107	; 0x6b
   834aa:	9a01      	ldr	r2, [sp, #4]
   834ac:	4790      	blx	r2
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
   834ae:	f04f 0401 	mov.w	r4, #1
   834b2:	e007      	b.n	834c4 <SCPI_Parse+0x130>
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
   834b4:	f04f 0400 	mov.w	r4, #0
   834b8:	e004      	b.n	834c4 <SCPI_Parse+0x130>
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
   834ba:	f04f 0401 	mov.w	r4, #1
   834be:	e001      	b.n	834c4 <SCPI_Parse+0x130>
   834c0:	f04f 0401 	mov.w	r4, #1
 * @param cmd - input command
 * @param len - max search length
 * @return Pointer to next part of command
 */
const char * cmdlineNext(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
   834c4:	4628      	mov	r0, r5
   834c6:	4641      	mov	r1, r8
   834c8:	f243 337d 	movw	r3, #13181	; 0x337d
   834cc:	f2c0 0308 	movt	r3, #8
   834d0:	4798      	blx	r3
    if (separator == NULL) {
        return cmd + len;
   834d2:	4445      	add	r5, r8
 * @param len - max search length
 * @return Pointer to next part of command
 */
const char * cmdlineNext(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
    if (separator == NULL) {
   834d4:	b108      	cbz	r0, 834da <SCPI_Parse+0x146>
        return cmd + len;
    } else {
        return separator + 1;
   834d6:	f100 0501 	add.w	r5, r0, #1
    if (context == NULL) {
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
   834da:	45ab      	cmp	fp, r5
   834dc:	f63f af6c 	bhi.w	833b8 <SCPI_Parse+0x24>
   834e0:	e00d      	b.n	834fe <SCPI_Parse+0x16a>
    const char * cmdline_ptr = data;
    size_t cmd_len;
    size_t cmdline_len;

    if (context == NULL) {
        return -1;
   834e2:	f04f 34ff 	mov.w	r4, #4294967295
   834e6:	e00a      	b.n	834fe <SCPI_Parse+0x16a>
    }

	
    while (cmdline_ptr < cmdline_end) {
   834e8:	f04f 0400 	mov.w	r4, #0
   834ec:	e007      	b.n	834fe <SCPI_Parse+0x16a>
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
            } else {
                SCPI_ErrorPush(context, SCPI_ERROR_UNDEFINED_HEADER);
   834ee:	4638      	mov	r0, r7
   834f0:	f06f 0170 	mvn.w	r1, #112	; 0x70
   834f4:	9a01      	ldr	r2, [sp, #4]
   834f6:	4790      	blx	r2
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
   834f8:	f04f 0400 	mov.w	r4, #0
   834fc:	e7e2      	b.n	834c4 <SCPI_Parse+0x130>
            }
        }
        cmdline_ptr = cmdlineNext(cmdline_ptr, cmdline_end - cmdline_ptr);
    }
    return result;
}
   834fe:	4620      	mov	r0, r4
   83500:	b003      	add	sp, #12
   83502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83506:	bf00      	nop
   83508:	0008f100 	.word	0x0008f100

0008350c <SCPI_Init>:
 * @param context
 * @param command_list
 * @param buffer
 * @param interface
 */
void SCPI_Init(scpi_t * context) {
   8350c:	b508      	push	{r3, lr}
    context->buffer.position = 0;
   8350e:	f04f 0200 	mov.w	r2, #0
   83512:	6082      	str	r2, [r0, #8]
    SCPI_ErrorInit(context);
   83514:	f642 2135 	movw	r1, #10805	; 0x2a35
   83518:	f2c0 0108 	movt	r1, #8
   8351c:	4788      	blx	r1
   8351e:	bd08      	pop	{r3, pc}

00083520 <SCPI_Input>:
 * @param context
 * @param data - data to process
 * @param len - length of data
 * @return 
 */
int SCPI_Input(scpi_t * context, const char * data, size_t len) {
   83520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83522:	4604      	mov	r4, r0
    int result = 0;
    const char * cmd_term;
	if (len == 0) {
   83524:	4615      	mov	r5, r2
   83526:	b972      	cbnz	r2, 83546 <SCPI_Input+0x26>
        context->buffer.data[context->buffer.position] = 0;
   83528:	68c1      	ldr	r1, [r0, #12]
   8352a:	6882      	ldr	r2, [r0, #8]
   8352c:	f04f 0600 	mov.w	r6, #0
   83530:	548e      	strb	r6, [r1, r2]
        result = SCPI_Parse(context, context->buffer.data, context->buffer.position);
   83532:	68e1      	ldr	r1, [r4, #12]
   83534:	68a2      	ldr	r2, [r4, #8]
   83536:	f243 3595 	movw	r5, #13205	; 0x3395
   8353a:	f2c0 0508 	movt	r5, #8
   8353e:	47a8      	blx	r5
   83540:	4605      	mov	r5, r0
        context->buffer.position = 0;
   83542:	60a6      	str	r6, [r4, #8]
   83544:	e049      	b.n	835da <SCPI_Input+0xba>
    } else {
        size_t buffer_free;
        int ws;
        buffer_free = context->buffer.length - context->buffer.position;
   83546:	6883      	ldr	r3, [r0, #8]
   83548:	6842      	ldr	r2, [r0, #4]
   8354a:	f102 30ff 	add.w	r0, r2, #4294967295
        if (len > (buffer_free - 1)) {
   8354e:	1ac2      	subs	r2, r0, r3
   83550:	4295      	cmp	r5, r2
   83552:	d83d      	bhi.n	835d0 <SCPI_Input+0xb0>
            return -1;
        }
        memcpy(&context->buffer.data[context->buffer.position], data, len);
   83554:	68e7      	ldr	r7, [r4, #12]
   83556:	18f8      	adds	r0, r7, r3
   83558:	462a      	mov	r2, r5
   8355a:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   8355e:	f2c0 0308 	movt	r3, #8
   83562:	4798      	blx	r3
        context->buffer.position += len;
   83564:	68a1      	ldr	r1, [r4, #8]
   83566:	186d      	adds	r5, r5, r1
   83568:	60a5      	str	r5, [r4, #8]
        context->buffer.data[context->buffer.position] = 0;
   8356a:	68e0      	ldr	r0, [r4, #12]
   8356c:	f04f 0200 	mov.w	r2, #0
   83570:	5542      	strb	r2, [r0, r5]

        ws = skipWhitespace(context->buffer.data, context->buffer.position);
   83572:	68e0      	ldr	r0, [r4, #12]
   83574:	68a1      	ldr	r1, [r4, #8]
   83576:	f643 379d 	movw	r7, #15261	; 0x3b9d
   8357a:	f2c0 0708 	movt	r7, #8
   8357e:	47b8      	blx	r7
   83580:	4605      	mov	r5, r0
        cmd_term = cmdlineTerminator(context->buffer.data + ws, context->buffer.position - ws);
   83582:	68e3      	ldr	r3, [r4, #12]
   83584:	68a1      	ldr	r1, [r4, #8]
 * @param cmd - input command
 * @param len - max search length
 * @return pointer to command line terminator or NULL
 */
const char * cmdlineTerminator(const char * cmd, size_t len) {
    return strnpbrk(cmd, len, "\r\n");
   83586:	1818      	adds	r0, r3, r0
   83588:	1b49      	subs	r1, r1, r5
   8358a:	f24f 420c 	movw	r2, #62476	; 0xf40c
   8358e:	f2c0 0208 	movt	r2, #8
   83592:	f643 070d 	movw	r7, #14349	; 0x380d
   83596:	f2c0 0708 	movt	r7, #8
   8359a:	47b8      	blx	r7
        context->buffer.position += len;
        context->buffer.data[context->buffer.position] = 0;

        ws = skipWhitespace(context->buffer.data, context->buffer.position);
        cmd_term = cmdlineTerminator(context->buffer.data + ws, context->buffer.position - ws);
        if (cmd_term != NULL) {
   8359c:	4607      	mov	r7, r0
   8359e:	b1d0      	cbz	r0, 835d6 <SCPI_Input+0xb6>
            int curr_len = cmd_term - context->buffer.data;
   835a0:	68e2      	ldr	r2, [r4, #12]
   835a2:	1a86      	subs	r6, r0, r2
            result = SCPI_Parse(context, context->buffer.data + ws, curr_len - ws);
   835a4:	4620      	mov	r0, r4
   835a6:	1951      	adds	r1, r2, r5
   835a8:	1b72      	subs	r2, r6, r5
   835aa:	f243 3595 	movw	r5, #13205	; 0x3395
   835ae:	f2c0 0508 	movt	r5, #8
   835b2:	47a8      	blx	r5
   835b4:	4605      	mov	r5, r0
            memmove(context->buffer.data, cmd_term, context->buffer.position - curr_len);
   835b6:	68a3      	ldr	r3, [r4, #8]
   835b8:	68e0      	ldr	r0, [r4, #12]
   835ba:	4639      	mov	r1, r7
   835bc:	1b9a      	subs	r2, r3, r6
   835be:	f64a 23c3 	movw	r3, #43715	; 0xaac3
   835c2:	f2c0 0308 	movt	r3, #8
   835c6:	4798      	blx	r3
            context->buffer.position -= curr_len;
   835c8:	68a0      	ldr	r0, [r4, #8]
   835ca:	1b86      	subs	r6, r0, r6
   835cc:	60a6      	str	r6, [r4, #8]
   835ce:	e004      	b.n	835da <SCPI_Input+0xba>
    } else {
        size_t buffer_free;
        int ws;
        buffer_free = context->buffer.length - context->buffer.position;
        if (len > (buffer_free - 1)) {
            return -1;
   835d0:	f04f 35ff 	mov.w	r5, #4294967295
   835d4:	e001      	b.n	835da <SCPI_Input+0xba>
 * @param data - data to process
 * @param len - length of data
 * @return 
 */
int SCPI_Input(scpi_t * context, const char * data, size_t len) {
    int result = 0;
   835d6:	f04f 0500 	mov.w	r5, #0
            context->buffer.position -= curr_len;
        }
    }

    return result;
}
   835da:	4628      	mov	r0, r5
   835dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   835de:	bf00      	nop

000835e0 <SCPI_ResultString>:
 * Write raw string result to the output
 * @param context
 * @param data
 * @return 
 */
size_t SCPI_ResultString(scpi_t * context, const char * data) {
   835e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   835e2:	4604      	mov	r4, r0
   835e4:	460d      	mov	r5, r1
    size_t len = strlen(data);
   835e6:	4608      	mov	r0, r1
   835e8:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   835ec:	f2c0 0308 	movt	r3, #8
   835f0:	4798      	blx	r3
   835f2:	4607      	mov	r7, r0
    size_t result = 0;
    result += writeDelimiter(context);
   835f4:	4620      	mov	r0, r4
   835f6:	f243 2199 	movw	r1, #12953	; 0x3299
   835fa:	f2c0 0108 	movt	r1, #8
   835fe:	4788      	blx	r1
   83600:	4606      	mov	r6, r0
    result += writeData(context, data, len);
   83602:	4620      	mov	r0, r4
   83604:	4629      	mov	r1, r5
   83606:	463a      	mov	r2, r7
   83608:	f243 238d 	movw	r3, #12941	; 0x328d
   8360c:	f2c0 0308 	movt	r3, #8
   83610:	4798      	blx	r3
    context->output_count++;
   83612:	6a22      	ldr	r2, [r4, #32]
   83614:	f102 0201 	add.w	r2, r2, #1
   83618:	6222      	str	r2, [r4, #32]
    return result;
}
   8361a:	1980      	adds	r0, r0, r6
   8361c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8361e:	bf00      	nop

00083620 <SCPI_ResultInt>:
 * Write integer value to the result
 * @param context
 * @param val
 * @return 
 */
size_t SCPI_ResultInt(scpi_t * context, int32_t val) {
   83620:	b570      	push	{r4, r5, r6, lr}
   83622:	b084      	sub	sp, #16
   83624:	4604      	mov	r4, r0
    char buffer[12];
    size_t result = 0;
    size_t len = longToStr(val, buffer, sizeof (buffer));
   83626:	4608      	mov	r0, r1
   83628:	a901      	add	r1, sp, #4
   8362a:	f04f 020c 	mov.w	r2, #12
   8362e:	f643 0359 	movw	r3, #14425	; 0x3859
   83632:	f2c0 0308 	movt	r3, #8
   83636:	4798      	blx	r3
   83638:	4606      	mov	r6, r0
    result += writeDelimiter(context);
   8363a:	4620      	mov	r0, r4
   8363c:	f243 2199 	movw	r1, #12953	; 0x3299
   83640:	f2c0 0108 	movt	r1, #8
   83644:	4788      	blx	r1
   83646:	4605      	mov	r5, r0
    result += writeData(context, buffer, len);
   83648:	4620      	mov	r0, r4
   8364a:	a901      	add	r1, sp, #4
   8364c:	4632      	mov	r2, r6
   8364e:	f243 238d 	movw	r3, #12941	; 0x328d
   83652:	f2c0 0308 	movt	r3, #8
   83656:	4798      	blx	r3
    context->output_count++;
   83658:	6a22      	ldr	r2, [r4, #32]
   8365a:	f102 0201 	add.w	r2, r2, #1
   8365e:	6222      	str	r2, [r4, #32]
    return result;
}
   83660:	1940      	adds	r0, r0, r5
   83662:	b004      	add	sp, #16
   83664:	bd70      	pop	{r4, r5, r6, pc}
   83666:	bf00      	nop

00083668 <SCPI_ResultText>:
 * Write string withn " to the result
 * @param context
 * @param data
 * @return 
 */
size_t SCPI_ResultText(scpi_t * context, const char * data) {
   83668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8366c:	4604      	mov	r4, r0
   8366e:	460f      	mov	r7, r1
    size_t result = 0;
    result += writeDelimiter(context);
   83670:	f243 2399 	movw	r3, #12953	; 0x3299
   83674:	f2c0 0308 	movt	r3, #8
   83678:	4798      	blx	r3
   8367a:	4680      	mov	r8, r0
    result += writeData(context, "\"", 1);
   8367c:	f24f 4660 	movw	r6, #62560	; 0xf460
   83680:	f2c0 0608 	movt	r6, #8
   83684:	4620      	mov	r0, r4
   83686:	4631      	mov	r1, r6
   83688:	f04f 0201 	mov.w	r2, #1
   8368c:	f243 258d 	movw	r5, #12941	; 0x328d
   83690:	f2c0 0508 	movt	r5, #8
   83694:	47a8      	blx	r5
   83696:	4480      	add	r8, r0
    result += writeData(context, data, strlen(data));
   83698:	4638      	mov	r0, r7
   8369a:	f64a 31cd 	movw	r1, #43981	; 0xabcd
   8369e:	f2c0 0108 	movt	r1, #8
   836a2:	4788      	blx	r1
   836a4:	4602      	mov	r2, r0
   836a6:	4620      	mov	r0, r4
   836a8:	4639      	mov	r1, r7
   836aa:	47a8      	blx	r5
   836ac:	eb08 0700 	add.w	r7, r8, r0
    result += writeData(context, "\"", 1);
   836b0:	4620      	mov	r0, r4
   836b2:	4631      	mov	r1, r6
   836b4:	f04f 0201 	mov.w	r2, #1
   836b8:	47a8      	blx	r5
    context->output_count++;
   836ba:	6a22      	ldr	r2, [r4, #32]
   836bc:	f102 0201 	add.w	r2, r2, #1
   836c0:	6222      	str	r2, [r4, #32]
    return result;
}
   836c2:	1838      	adds	r0, r7, r0
   836c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000836c8 <SCPI_ParamString>:
 * @param value
 * @param len
 * @param mandatory
 * @return 
 */
bool_t SCPI_ParamString(scpi_t * context, const char ** value, size_t * len, bool_t mandatory) {
   836c8:	b570      	push	{r4, r5, r6, lr}
   836ca:	b082      	sub	sp, #8
   836cc:	4604      	mov	r4, r0
   836ce:	4615      	mov	r5, r2
    size_t length;

    if (!value || !len) {
   836d0:	460e      	mov	r6, r1
   836d2:	b319      	cbz	r1, 8371c <SCPI_ParamString+0x54>
   836d4:	b32a      	cbz	r2, 83722 <SCPI_ParamString+0x5a>
        return FALSE;
    }

    if (!paramNext(context, mandatory)) {
   836d6:	4619      	mov	r1, r3
   836d8:	f243 23f9 	movw	r3, #13049	; 0x32f9
   836dc:	f2c0 0308 	movt	r3, #8
   836e0:	4798      	blx	r3
   836e2:	b308      	cbz	r0, 83728 <SCPI_ParamString+0x60>
        return FALSE;
    }

    if (locateStr(context->paramlist.parameters, context->paramlist.length, value, &length)) {
   836e4:	6960      	ldr	r0, [r4, #20]
   836e6:	69a1      	ldr	r1, [r4, #24]
   836e8:	4632      	mov	r2, r6
   836ea:	ab01      	add	r3, sp, #4
   836ec:	f643 16cd 	movw	r6, #14797	; 0x39cd
   836f0:	f2c0 0608 	movt	r6, #8
   836f4:	47b0      	blx	r6
   836f6:	b1d0      	cbz	r0, 8372e <SCPI_ParamString+0x66>
        paramSkipBytes(context, length);
   836f8:	4620      	mov	r0, r4
   836fa:	9901      	ldr	r1, [sp, #4]
   836fc:	f243 22c1 	movw	r2, #12993	; 0x32c1
   83700:	f2c0 0208 	movt	r2, #8
   83704:	4790      	blx	r2
        paramSkipWhitespace(context);
   83706:	4620      	mov	r0, r4
   83708:	f243 21d5 	movw	r1, #13013	; 0x32d5
   8370c:	f2c0 0108 	movt	r1, #8
   83710:	4788      	blx	r1
        if (len) {
            *len = length;
   83712:	9801      	ldr	r0, [sp, #4]
   83714:	6028      	str	r0, [r5, #0]
        }
        return TRUE;
   83716:	f04f 0001 	mov.w	r0, #1
   8371a:	e00a      	b.n	83732 <SCPI_ParamString+0x6a>
 */
bool_t SCPI_ParamString(scpi_t * context, const char ** value, size_t * len, bool_t mandatory) {
    size_t length;

    if (!value || !len) {
        return FALSE;
   8371c:	f04f 0000 	mov.w	r0, #0
   83720:	e007      	b.n	83732 <SCPI_ParamString+0x6a>
   83722:	f04f 0000 	mov.w	r0, #0
   83726:	e004      	b.n	83732 <SCPI_ParamString+0x6a>
    }

    if (!paramNext(context, mandatory)) {
        return FALSE;
   83728:	f04f 0000 	mov.w	r0, #0
   8372c:	e001      	b.n	83732 <SCPI_ParamString+0x6a>
            *len = length;
        }
        return TRUE;
    }

    return FALSE;
   8372e:	f04f 0000 	mov.w	r0, #0
}
   83732:	b002      	add	sp, #8
   83734:	bd70      	pop	{r4, r5, r6, pc}
   83736:	bf00      	nop

00083738 <SCPI_ParamDouble>:
 * @param context
 * @param value
 * @param mandatory
 * @return 
 */
bool_t SCPI_ParamDouble(scpi_t * context, double * value, bool_t mandatory) {
   83738:	b570      	push	{r4, r5, r6, lr}
   8373a:	b082      	sub	sp, #8
   8373c:	4604      	mov	r4, r0
   8373e:	4613      	mov	r3, r2
    const char * param;
    size_t param_len;
    size_t num_len;

    if (!value) {
   83740:	460e      	mov	r6, r1
   83742:	b1e1      	cbz	r1, 8377e <SCPI_ParamDouble+0x46>
        return FALSE;
    }

    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
   83744:	a901      	add	r1, sp, #4
   83746:	466a      	mov	r2, sp
   83748:	f243 65c9 	movw	r5, #14025	; 0x36c9
   8374c:	f2c0 0508 	movt	r5, #8
   83750:	47a8      	blx	r5
   83752:	b1b8      	cbz	r0, 83784 <SCPI_ParamDouble+0x4c>
        return FALSE;
    }

    num_len = strToDouble(param, value);
   83754:	9801      	ldr	r0, [sp, #4]
   83756:	4631      	mov	r1, r6
   83758:	f643 1385 	movw	r3, #14725	; 0x3985
   8375c:	f2c0 0308 	movt	r3, #8
   83760:	4798      	blx	r3

    if (num_len != param_len) {
   83762:	9900      	ldr	r1, [sp, #0]
   83764:	4288      	cmp	r0, r1
   83766:	d010      	beq.n	8378a <SCPI_ParamDouble+0x52>
        SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
   83768:	4620      	mov	r0, r4
   8376a:	f06f 0189 	mvn.w	r1, #137	; 0x89
   8376e:	f642 22a9 	movw	r2, #10921	; 0x2aa9
   83772:	f2c0 0208 	movt	r2, #8
   83776:	4790      	blx	r2
        return FALSE;
   83778:	f04f 0000 	mov.w	r0, #0
   8377c:	e007      	b.n	8378e <SCPI_ParamDouble+0x56>
    const char * param;
    size_t param_len;
    size_t num_len;

    if (!value) {
        return FALSE;
   8377e:	f04f 0000 	mov.w	r0, #0
   83782:	e004      	b.n	8378e <SCPI_ParamDouble+0x56>
    }

    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
        return FALSE;
   83784:	f04f 0000 	mov.w	r0, #0
   83788:	e001      	b.n	8378e <SCPI_ParamDouble+0x56>
    if (num_len != param_len) {
        SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
        return FALSE;
    }

    return TRUE;
   8378a:	f04f 0001 	mov.w	r0, #1
}
   8378e:	b002      	add	sp, #8
   83790:	bd70      	pop	{r4, r5, r6, pc}
   83792:	bf00      	nop

00083794 <SCPI_ParamInt>:
 * @param context
 * @param value
 * @param mandatory
 * @return 
 */
bool_t SCPI_ParamInt(scpi_t * context, int32_t * value, bool_t mandatory) {
   83794:	b570      	push	{r4, r5, r6, lr}
   83796:	b082      	sub	sp, #8
   83798:	4604      	mov	r4, r0
   8379a:	4613      	mov	r3, r2
    const char * param;
    size_t param_len;
    size_t num_len;

    if (!value) {
   8379c:	460e      	mov	r6, r1
   8379e:	b1e1      	cbz	r1, 837da <SCPI_ParamInt+0x46>
        return FALSE;
    }

    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
   837a0:	a901      	add	r1, sp, #4
   837a2:	466a      	mov	r2, sp
   837a4:	f243 65c9 	movw	r5, #14025	; 0x36c9
   837a8:	f2c0 0508 	movt	r5, #8
   837ac:	47a8      	blx	r5
   837ae:	b1b8      	cbz	r0, 837e0 <SCPI_ParamInt+0x4c>
        return FALSE;
    }

    num_len = strToLong(param, value);
   837b0:	9801      	ldr	r0, [sp, #4]
   837b2:	4631      	mov	r1, r6
   837b4:	f643 1361 	movw	r3, #14689	; 0x3961
   837b8:	f2c0 0308 	movt	r3, #8
   837bc:	4798      	blx	r3

    if (num_len != param_len) {
   837be:	9900      	ldr	r1, [sp, #0]
   837c0:	4288      	cmp	r0, r1
   837c2:	d010      	beq.n	837e6 <SCPI_ParamInt+0x52>
        SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
   837c4:	4620      	mov	r0, r4
   837c6:	f06f 0189 	mvn.w	r1, #137	; 0x89
   837ca:	f642 22a9 	movw	r2, #10921	; 0x2aa9
   837ce:	f2c0 0208 	movt	r2, #8
   837d2:	4790      	blx	r2
        return FALSE;
   837d4:	f04f 0000 	mov.w	r0, #0
   837d8:	e007      	b.n	837ea <SCPI_ParamInt+0x56>
    const char * param;
    size_t param_len;
    size_t num_len;

    if (!value) {
        return FALSE;
   837da:	f04f 0000 	mov.w	r0, #0
   837de:	e004      	b.n	837ea <SCPI_ParamInt+0x56>
    }

    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
        return FALSE;
   837e0:	f04f 0000 	mov.w	r0, #0
   837e4:	e001      	b.n	837ea <SCPI_ParamInt+0x56>
    if (num_len != param_len) {
        SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
        return FALSE;
    }

    return TRUE;
   837e6:	f04f 0001 	mov.w	r0, #1
}
   837ea:	b002      	add	sp, #8
   837ec:	bd70      	pop	{r4, r5, r6, pc}
   837ee:	bf00      	nop

000837f0 <isFinalState>:
 */
static bool_t isFinalState(locate_text_states state) {
    return (
        ((state) == STATE_COMMA)
        || ((state) == STATE_LAST_WHITESPACE)
        || ((state) == STATE_TEXT) ||
   837f0:	f1a0 0302 	sub.w	r3, r0, #2
   837f4:	b2d9      	uxtb	r1, r3
   837f6:	2902      	cmp	r1, #2
   837f8:	d904      	bls.n	83804 <isFinalState+0x14>
   837fa:	f1d0 0001 	rsbs	r0, r0, #1
   837fe:	bf38      	it	cc
   83800:	2000      	movcc	r0, #0
   83802:	4770      	bx	lr
   83804:	f04f 0001 	mov.w	r0, #1
        ((state) == STATE_FIRST_WHITESPACE)
    );
}
   83808:	4770      	bx	lr
   8380a:	bf00      	nop

0008380c <strnpbrk>:
 * @param str
 * @param size
 * @param set
 * @return 
 */
char * strnpbrk(const char *str, size_t size, const char *set) {
   8380c:	b470      	push	{r4, r5, r6}
    const char *scanp;
    long c, sc;
    const char * strend = str + size;
   8380e:	1841      	adds	r1, r0, r1

    while ((strend != str) && ((c = *str++) != 0)) {
   83810:	4288      	cmp	r0, r1
   83812:	d01a      	beq.n	8384a <strnpbrk+0x3e>
   83814:	4603      	mov	r3, r0
   83816:	f813 6b01 	ldrb.w	r6, [r3], #1
   8381a:	b936      	cbnz	r6, 8382a <strnpbrk+0x1e>
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
                return ((char *) (str - 1));
    }
    return (NULL);
   8381c:	f04f 0000 	mov.w	r0, #0
   83820:	e018      	b.n	83854 <strnpbrk+0x48>
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
   83822:	42b5      	cmp	r5, r6
   83824:	d102      	bne.n	8382c <strnpbrk+0x20>
   83826:	e015      	b.n	83854 <strnpbrk+0x48>
char * strnpbrk(const char *str, size_t size, const char *set) {
    const char *scanp;
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
   83828:	4623      	mov	r3, r4
   8382a:	4614      	mov	r4, r2
        for (scanp = set; (sc = *scanp++) != '\0';)
   8382c:	f814 5b01 	ldrb.w	r5, [r4], #1
   83830:	2d00      	cmp	r5, #0
   83832:	d1f6      	bne.n	83822 <strnpbrk+0x16>
char * strnpbrk(const char *str, size_t size, const char *set) {
    const char *scanp;
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
   83834:	428b      	cmp	r3, r1
   83836:	d00b      	beq.n	83850 <strnpbrk+0x44>
   83838:	461c      	mov	r4, r3
   8383a:	f814 6b01 	ldrb.w	r6, [r4], #1
   8383e:	4618      	mov	r0, r3
   83840:	2e00      	cmp	r6, #0
   83842:	d1f1      	bne.n	83828 <strnpbrk+0x1c>
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
                return ((char *) (str - 1));
    }
    return (NULL);
   83844:	f04f 0000 	mov.w	r0, #0
   83848:	e004      	b.n	83854 <strnpbrk+0x48>
   8384a:	f04f 0000 	mov.w	r0, #0
   8384e:	e001      	b.n	83854 <strnpbrk+0x48>
   83850:	f04f 0000 	mov.w	r0, #0
}
   83854:	bc70      	pop	{r4, r5, r6}
   83856:	4770      	bx	lr

00083858 <longToStr>:
 * @param val   integer value
 * @param str   converted textual representation
 * @param len   string buffer length
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
   83858:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t x = 1000000000L;
    int_fast8_t digit;
    size_t pos = 0;

    if (val == 0) {
   8385a:	4603      	mov	r3, r0
   8385c:	b938      	cbnz	r0, 8386e <longToStr+0x16>
        if (pos < len) str[pos++] = '0';
   8385e:	2a00      	cmp	r2, #0
   83860:	d055      	beq.n	8390e <longToStr+0xb6>
   83862:	f04f 0030 	mov.w	r0, #48	; 0x30
   83866:	7008      	strb	r0, [r1, #0]
   83868:	f04f 0001 	mov.w	r0, #1
   8386c:	e049      	b.n	83902 <longToStr+0xaa>
    } else {
        if (val < 0) {
   8386e:	2800      	cmp	r0, #0
   83870:	da08      	bge.n	83884 <longToStr+0x2c>
            val = -val;
   83872:	f1c0 0300 	rsb	r3, r0, #0
            if (pos < len) str[pos++] = '-';
   83876:	b142      	cbz	r2, 8388a <longToStr+0x32>
   83878:	f04f 002d 	mov.w	r0, #45	; 0x2d
   8387c:	7008      	strb	r0, [r1, #0]
   8387e:	f04f 0001 	mov.w	r0, #1
   83882:	e004      	b.n	8388e <longToStr+0x36>
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
    uint32_t x = 1000000000L;
    int_fast8_t digit;
    size_t pos = 0;
   83884:	f04f 0000 	mov.w	r0, #0
   83888:	e001      	b.n	8388e <longToStr+0x36>
   8388a:	f04f 0000 	mov.w	r0, #0
        if (val < 0) {
            val = -val;
            if (pos < len) str[pos++] = '-';
        }

        while ((val / x) == 0) {
   8388e:	461d      	mov	r5, r3
   83890:	f64c 14ff 	movw	r4, #51711	; 0xc9ff
   83894:	f6c3 349a 	movt	r4, #15258	; 0x3b9a
   83898:	42a3      	cmp	r3, r4
   8389a:	d810      	bhi.n	838be <longToStr+0x66>
   8389c:	f44f 434a 	mov.w	r3, #51712	; 0xca00
   838a0:	f6c3 339a 	movt	r3, #15258	; 0x3b9a
            x /= 10;
   838a4:	f64c 46cd 	movw	r6, #52429	; 0xcccd
   838a8:	f6cc 46cc 	movt	r6, #52428	; 0xcccc
   838ac:	fba6 4303 	umull	r4, r3, r6, r3
   838b0:	ea4f 03d3 	mov.w	r3, r3, lsr #3
        if (val < 0) {
            val = -val;
            if (pos < len) str[pos++] = '-';
        }

        while ((val / x) == 0) {
   838b4:	fbb5 f4f3 	udiv	r4, r5, r3
   838b8:	2c00      	cmp	r4, #0
   838ba:	d0f7      	beq.n	838ac <longToStr+0x54>
   838bc:	e003      	b.n	838c6 <longToStr+0x6e>
   838be:	f44f 434a 	mov.w	r3, #51712	; 0xca00
   838c2:	f6c3 339a 	movt	r3, #15258	; 0x3b9a
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   838c6:	4282      	cmp	r2, r0
   838c8:	d933      	bls.n	83932 <longToStr+0xda>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   838ca:	fbb5 f6f3 	udiv	r6, r5, r3
            break;
        }
    }
    
    return result;
}
   838ce:	b2f6      	uxtb	r6, r6

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
            val -= digit * x;
            x /= 10;
   838d0:	f64c 47cd 	movw	r7, #52429	; 0xcccd
   838d4:	f6cc 47cc 	movt	r7, #52428	; 0xcccc
   838d8:	ea6f 0400 	mvn.w	r4, r0
   838dc:	18a4      	adds	r4, r4, r2
   838de:	f014 0f01 	tst.w	r4, #1
   838e2:	d128      	bne.n	83936 <longToStr+0xde>
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   838e4:	f106 0430 	add.w	r4, r6, #48	; 0x30
   838e8:	540c      	strb	r4, [r1, r0]
   838ea:	f100 0401 	add.w	r4, r0, #1
   838ee:	4620      	mov	r0, r4
            val -= digit * x;
   838f0:	fb03 5516 	mls	r5, r3, r6, r5
            x /= 10;
   838f4:	fba7 6303 	umull	r6, r3, r7, r3
        } while (x && (pos < len));
   838f8:	08db      	lsrs	r3, r3, #3
   838fa:	d002      	beq.n	83902 <longToStr+0xaa>
   838fc:	42a2      	cmp	r2, r4
   838fe:	d809      	bhi.n	83914 <longToStr+0xbc>
   83900:	e017      	b.n	83932 <longToStr+0xda>
    }

    if (pos < len) str[pos] = 0;
   83902:	4290      	cmp	r0, r2
   83904:	d215      	bcs.n	83932 <longToStr+0xda>
   83906:	f04f 0200 	mov.w	r2, #0
   8390a:	540a      	strb	r2, [r1, r0]
   8390c:	e011      	b.n	83932 <longToStr+0xda>
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
    uint32_t x = 1000000000L;
    int_fast8_t digit;
    size_t pos = 0;
   8390e:	f04f 0000 	mov.w	r0, #0
   83912:	e00e      	b.n	83932 <longToStr+0xda>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   83914:	fbb5 f0f3 	udiv	r0, r5, r3
            break;
        }
    }
    
    return result;
}
   83918:	b2c6      	uxtb	r6, r0
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   8391a:	f106 0030 	add.w	r0, r6, #48	; 0x30
   8391e:	5508      	strb	r0, [r1, r4]
   83920:	f104 0001 	add.w	r0, r4, #1
            val -= digit * x;
   83924:	fb03 5516 	mls	r5, r3, r6, r5
            x /= 10;
   83928:	fba7 4303 	umull	r4, r3, r7, r3
        } while (x && (pos < len));
   8392c:	08db      	lsrs	r3, r3, #3
   8392e:	d113      	bne.n	83958 <longToStr+0x100>
   83930:	e7e7      	b.n	83902 <longToStr+0xaa>
    }

    if (pos < len) str[pos] = 0;
    return pos;
}
   83932:	bcf0      	pop	{r4, r5, r6, r7}
   83934:	4770      	bx	lr
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   83936:	f106 0430 	add.w	r4, r6, #48	; 0x30
   8393a:	540c      	strb	r4, [r1, r0]
   8393c:	f100 0001 	add.w	r0, r0, #1
            val -= digit * x;
   83940:	fb03 5516 	mls	r5, r3, r6, r5
            x /= 10;
   83944:	fba7 6303 	umull	r6, r3, r7, r3
        } while (x && (pos < len));
   83948:	08db      	lsrs	r3, r3, #3
   8394a:	d0da      	beq.n	83902 <longToStr+0xaa>
   8394c:	4282      	cmp	r2, r0
   8394e:	d9f0      	bls.n	83932 <longToStr+0xda>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   83950:	fbb5 f6f3 	udiv	r6, r5, r3
            break;
        }
    }
    
    return result;
}
   83954:	b2f6      	uxtb	r6, r6
   83956:	e7c5      	b.n	838e4 <longToStr+0x8c>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   83958:	fbb5 f6f3 	udiv	r6, r5, r3
            break;
        }
    }
    
    return result;
}
   8395c:	b2f6      	uxtb	r6, r6
   8395e:	e7c1      	b.n	838e4 <longToStr+0x8c>

00083960 <strToLong>:
 * Converts string to signed 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strToLong(const char * str, int32_t * val) {
   83960:	b530      	push	{r4, r5, lr}
   83962:	b083      	sub	sp, #12
   83964:	4604      	mov	r4, r0
   83966:	460d      	mov	r5, r1
    char * endptr;
    *val = strtol(str, &endptr, 0);
   83968:	a901      	add	r1, sp, #4
   8396a:	f04f 0200 	mov.w	r2, #0
   8396e:	f64b 1305 	movw	r3, #47365	; 0xb905
   83972:	f2c0 0308 	movt	r3, #8
   83976:	4798      	blx	r3
   83978:	6028      	str	r0, [r5, #0]
    return endptr - str;
}
   8397a:	9801      	ldr	r0, [sp, #4]
   8397c:	1b00      	subs	r0, r0, r4
   8397e:	b003      	add	sp, #12
   83980:	bd30      	pop	{r4, r5, pc}
   83982:	bf00      	nop

00083984 <strToDouble>:
 * Converts string to double representation
 * @param str   string value
 * @param val   double result
 * @return      number of bytes used in string
 */
size_t strToDouble(const char * str, double * val) {
   83984:	b530      	push	{r4, r5, lr}
   83986:	b083      	sub	sp, #12
   83988:	4604      	mov	r4, r0
   8398a:	460d      	mov	r5, r1
    char * endptr;
    *val = strtod(str, &endptr);
   8398c:	a901      	add	r1, sp, #4
   8398e:	f24b 73b1 	movw	r3, #47025	; 0xb7b1
   83992:	f2c0 0308 	movt	r3, #8
   83996:	4798      	blx	r3
   83998:	e9c5 0100 	strd	r0, r1, [r5]
    return endptr - str;
}
   8399c:	9801      	ldr	r0, [sp, #4]
   8399e:	1b00      	subs	r0, r0, r4
   839a0:	b003      	add	sp, #12
   839a2:	bd30      	pop	{r4, r5, pc}

000839a4 <compareStr>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
   839a4:	b510      	push	{r4, lr}
   839a6:	460c      	mov	r4, r1
    if (len1 != len2) {
   839a8:	4299      	cmp	r1, r3
   839aa:	d10b      	bne.n	839c4 <compareStr+0x20>
        return FALSE;
    }

    if (SCPI_strncasecmp(str1, str2, len2) == 0) {
   839ac:	4611      	mov	r1, r2
   839ae:	4622      	mov	r2, r4
   839b0:	f64a 33dd 	movw	r3, #43997	; 0xabdd
   839b4:	f2c0 0308 	movt	r3, #8
   839b8:	4798      	blx	r3
   839ba:	f1d0 0001 	rsbs	r0, r0, #1
   839be:	bf38      	it	cc
   839c0:	2000      	movcc	r0, #0
   839c2:	bd10      	pop	{r4, pc}
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
    if (len1 != len2) {
        return FALSE;
   839c4:	f04f 0000 	mov.w	r0, #0
    if (SCPI_strncasecmp(str1, str2, len2) == 0) {
        return TRUE;
    }

    return FALSE;
}
   839c8:	bd10      	pop	{r4, pc}
   839ca:	bf00      	nop

000839cc <locateStr>:
 * @param len1 length of string
 * @param str2 result
 * @param len2 length of result
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
   839cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   839d0:	b083      	sub	sp, #12
   839d2:	4606      	mov	r6, r0
   839d4:	9201      	str	r2, [sp, #4]
   839d6:	4699      	mov	r9, r3
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   839d8:	460b      	mov	r3, r1
   839da:	2900      	cmp	r1, #0
   839dc:	d03e      	beq.n	83a5c <locateStr+0x90>
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   839de:	f240 22a0 	movw	r2, #672	; 0x2a0
   839e2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   839e6:	f8d2 e000 	ldr.w	lr, [r2]
   839ea:	f04f 0501 	mov.w	r5, #1
   839ee:	f04f 0400 	mov.w	r4, #0
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;
   839f2:	4627      	mov	r7, r4
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
   839f4:	46a0      	mov	r8, r4
            } else if (c == ',') {
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
                nfa->stopIdx = nfa->i + 1;
                nfa->state = STATE_TEXT;
   839f6:	f04f 0b02 	mov.w	fp, #2
   839fa:	ea6f 0104 	mvn.w	r1, r4
   839fe:	18c9      	adds	r1, r1, r3
   83a00:	4029      	ands	r1, r5
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   83a02:	5d00      	ldrb	r0, [r0, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   83a04:	4622      	mov	r2, r4
   83a06:	2c00      	cmp	r4, #0
   83a08:	d04f      	beq.n	83aaa <locateStr+0xde>
   83a0a:	e062      	b.n	83ad2 <locateStr+0x106>
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   83a0c:	5d31      	ldrb	r1, [r6, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   83a0e:	b112      	cbz	r2, 83a16 <locateStr+0x4a>
   83a10:	2a02      	cmp	r2, #2
   83a12:	d11b      	bne.n	83a4c <locateStr+0x80>
   83a14:	e00f      	b.n	83a36 <locateStr+0x6a>
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   83a16:	eb0e 0001 	add.w	r0, lr, r1
   83a1a:	7840      	ldrb	r0, [r0, #1]
   83a1c:	f000 0008 	and.w	r0, r0, #8
   83a20:	b2c0      	uxtb	r0, r0
   83a22:	b110      	cbz	r0, 83a2a <locateStr+0x5e>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   83a24:	462f      	mov	r7, r5
   83a26:	46a8      	mov	r8, r5
   83a28:	e010      	b.n	83a4c <locateStr+0x80>
            } else if (c == ',') {
   83a2a:	292c      	cmp	r1, #44	; 0x2c
   83a2c:	d01b      	beq.n	83a66 <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   83a2e:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   83a30:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   83a32:	465a      	mov	r2, fp
   83a34:	e00a      	b.n	83a4c <locateStr+0x80>
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   83a36:	292c      	cmp	r1, #44	; 0x2c
   83a38:	d018      	beq.n	83a6c <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   83a3a:	eb0e 0001 	add.w	r0, lr, r1
   83a3e:	7841      	ldrb	r1, [r0, #1]
   83a40:	f001 0008 	and.w	r0, r1, #8
   83a44:	b2c1      	uxtb	r1, r0
                nfa->stopIdx = nfa->i + 1;
   83a46:	2900      	cmp	r1, #0
   83a48:	bf08      	it	eq
   83a4a:	462f      	moveq	r7, r5
   83a4c:	f104 0401 	add.w	r4, r4, #1
   83a50:	f105 0501 	add.w	r5, r5, #1
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   83a54:	5d31      	ldrb	r1, [r6, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   83a56:	2a00      	cmp	r2, #0
   83a58:	d076      	beq.n	83b48 <locateStr+0x17c>
   83a5a:	e089      	b.n	83b70 <locateStr+0x1a4>
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;
   83a5c:	f04f 0700 	mov.w	r7, #0
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
   83a60:	46b8      	mov	r8, r7
 * @param len2 length of result
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
   83a62:	463a      	mov	r2, r7
   83a64:	e004      	b.n	83a70 <locateStr+0xa4>
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   83a66:	f04f 0204 	mov.w	r2, #4
   83a6a:	e001      	b.n	83a70 <locateStr+0xa4>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   83a6c:	f04f 0204 	mov.w	r2, #4
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
            break;
        }
    }

    if (isFinalState(nfa.state)) {
   83a70:	4610      	mov	r0, r2
   83a72:	f243 73f1 	movw	r3, #14321	; 0x37f1
   83a76:	f2c0 0308 	movt	r3, #8
   83a7a:	4798      	blx	r3
   83a7c:	b168      	cbz	r0, 83a9a <locateStr+0xce>

        if (str2) {
   83a7e:	9a01      	ldr	r2, [sp, #4]
   83a80:	b10a      	cbz	r2, 83a86 <locateStr+0xba>
            *str2 = &str1[nfa.startIdx];
   83a82:	4446      	add	r6, r8
   83a84:	6016      	str	r6, [r2, #0]
        }

        if (len2) {
   83a86:	f1b9 0f00 	cmp.w	r9, #0
   83a8a:	d009      	beq.n	83aa0 <locateStr+0xd4>
            *len2 = nfa.stopIdx - nfa.startIdx;
   83a8c:	ebc8 0707 	rsb	r7, r8, r7
   83a90:	f8c9 7000 	str.w	r7, [r9]
        }
        return TRUE;
   83a94:	f04f 0001 	mov.w	r0, #1
   83a98:	e004      	b.n	83aa4 <locateStr+0xd8>
    }
    return FALSE;
   83a9a:	f04f 0000 	mov.w	r0, #0
   83a9e:	e001      	b.n	83aa4 <locateStr+0xd8>
        }

        if (len2) {
            *len2 = nfa.stopIdx - nfa.startIdx;
        }
        return TRUE;
   83aa0:	f04f 0001 	mov.w	r0, #1
    }
    return FALSE;
}
   83aa4:	b003      	add	sp, #12
   83aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   83aaa:	eb0e 0c00 	add.w	ip, lr, r0
   83aae:	f89c c001 	ldrb.w	ip, [ip, #1]
   83ab2:	f00c 0c08 	and.w	ip, ip, #8
   83ab6:	fa5f fc8c 	uxtb.w	ip, ip
   83aba:	f1bc 0f00 	cmp.w	ip, #0
   83abe:	d105      	bne.n	83acc <locateStr+0x100>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   83ac0:	282c      	cmp	r0, #44	; 0x2c
   83ac2:	d0d0      	beq.n	83a66 <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   83ac4:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   83ac6:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   83ac8:	465a      	mov	r2, fp
   83aca:	e00e      	b.n	83aea <locateStr+0x11e>
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   83acc:	462f      	mov	r7, r5
   83ace:	46a8      	mov	r8, r5
   83ad0:	e00b      	b.n	83aea <locateStr+0x11e>
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   83ad2:	2c02      	cmp	r4, #2
   83ad4:	d109      	bne.n	83aea <locateStr+0x11e>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   83ad6:	282c      	cmp	r0, #44	; 0x2c
   83ad8:	d0c8      	beq.n	83a6c <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   83ada:	4470      	add	r0, lr
   83adc:	7840      	ldrb	r0, [r0, #1]
   83ade:	f000 0008 	and.w	r0, r0, #8
   83ae2:	b2c0      	uxtb	r0, r0
                nfa->stopIdx = nfa->i + 1;
   83ae4:	2800      	cmp	r0, #0
   83ae6:	bf08      	it	eq
   83ae8:	462f      	moveq	r7, r5
   83aea:	f104 0401 	add.w	r4, r4, #1
   83aee:	f105 0501 	add.w	r5, r5, #1
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   83af2:	429c      	cmp	r4, r3
   83af4:	d0bc      	beq.n	83a70 <locateStr+0xa4>
   83af6:	2900      	cmp	r1, #0
   83af8:	d088      	beq.n	83a0c <locateStr+0x40>
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   83afa:	5d31      	ldrb	r1, [r6, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   83afc:	b97a      	cbnz	r2, 83b1e <locateStr+0x152>
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   83afe:	eb0e 0001 	add.w	r0, lr, r1
   83b02:	7840      	ldrb	r0, [r0, #1]
   83b04:	f000 0008 	and.w	r0, r0, #8
   83b08:	b2c0      	uxtb	r0, r0
   83b0a:	b928      	cbnz	r0, 83b18 <locateStr+0x14c>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   83b0c:	292c      	cmp	r1, #44	; 0x2c
   83b0e:	d0aa      	beq.n	83a66 <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   83b10:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   83b12:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   83b14:	465a      	mov	r2, fp
   83b16:	e00f      	b.n	83b38 <locateStr+0x16c>
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   83b18:	462f      	mov	r7, r5
   83b1a:	46a8      	mov	r8, r5
   83b1c:	e00c      	b.n	83b38 <locateStr+0x16c>
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   83b1e:	2a02      	cmp	r2, #2
   83b20:	d10a      	bne.n	83b38 <locateStr+0x16c>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   83b22:	292c      	cmp	r1, #44	; 0x2c
   83b24:	d0a2      	beq.n	83a6c <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   83b26:	eb0e 0001 	add.w	r0, lr, r1
   83b2a:	7841      	ldrb	r1, [r0, #1]
   83b2c:	f001 0008 	and.w	r0, r1, #8
   83b30:	b2c1      	uxtb	r1, r0
                nfa->stopIdx = nfa->i + 1;
   83b32:	2900      	cmp	r1, #0
   83b34:	bf08      	it	eq
   83b36:	462f      	moveq	r7, r5
   83b38:	f104 0401 	add.w	r4, r4, #1
   83b3c:	f105 0501 	add.w	r5, r5, #1
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   83b40:	429c      	cmp	r4, r3
   83b42:	f47f af63 	bne.w	83a0c <locateStr+0x40>
   83b46:	e793      	b.n	83a70 <locateStr+0xa4>
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   83b48:	eb0e 0a01 	add.w	sl, lr, r1
   83b4c:	f89a a001 	ldrb.w	sl, [sl, #1]
   83b50:	f00a 0a08 	and.w	sl, sl, #8
   83b54:	fa5f fa8a 	uxtb.w	sl, sl
   83b58:	f1ba 0f00 	cmp.w	sl, #0
   83b5c:	d105      	bne.n	83b6a <locateStr+0x19e>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   83b5e:	292c      	cmp	r1, #44	; 0x2c
   83b60:	d081      	beq.n	83a66 <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   83b62:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   83b64:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   83b66:	465a      	mov	r2, fp
   83b68:	e00f      	b.n	83b8a <locateStr+0x1be>
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   83b6a:	462f      	mov	r7, r5
   83b6c:	46a8      	mov	r8, r5
   83b6e:	e00c      	b.n	83b8a <locateStr+0x1be>
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   83b70:	2a02      	cmp	r2, #2
   83b72:	d10a      	bne.n	83b8a <locateStr+0x1be>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   83b74:	292c      	cmp	r1, #44	; 0x2c
   83b76:	f43f af79 	beq.w	83a6c <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   83b7a:	4471      	add	r1, lr
   83b7c:	7849      	ldrb	r1, [r1, #1]
   83b7e:	f001 0108 	and.w	r1, r1, #8
   83b82:	b2c9      	uxtb	r1, r1
                nfa->stopIdx = nfa->i + 1;
   83b84:	2900      	cmp	r1, #0
   83b86:	bf08      	it	eq
   83b88:	462f      	moveq	r7, r5
   83b8a:	f104 0401 	add.w	r4, r4, #1
   83b8e:	f105 0501 	add.w	r5, r5, #1
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   83b92:	429c      	cmp	r4, r3
   83b94:	f47f af3a 	bne.w	83a0c <locateStr+0x40>
   83b98:	e76a      	b.n	83a70 <locateStr+0xa4>
   83b9a:	bf00      	nop

00083b9c <skipWhitespace>:
 * Count white spaces from the beggining
 * @param cmd - command
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
   83b9c:	b470      	push	{r4, r5, r6}
    size_t i;
    for (i = 0; i < len; i++) {
   83b9e:	460e      	mov	r6, r1
   83ba0:	b311      	cbz	r1, 83be8 <skipWhitespace+0x4c>
        if (!isspace((unsigned char)cmd[i])) {
   83ba2:	f240 23a0 	movw	r3, #672	; 0x2a0
   83ba6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83baa:	681c      	ldr	r4, [r3, #0]
   83bac:	7801      	ldrb	r1, [r0, #0]
   83bae:	1862      	adds	r2, r4, r1
   83bb0:	7853      	ldrb	r3, [r2, #1]
   83bb2:	f003 0108 	and.w	r1, r3, #8
   83bb6:	b2ca      	uxtb	r2, r1
   83bb8:	b1c2      	cbz	r2, 83bec <skipWhitespace+0x50>
   83bba:	4603      	mov	r3, r0
   83bbc:	f04f 0000 	mov.w	r0, #0
   83bc0:	f016 0f01 	tst.w	r6, #1
   83bc4:	d109      	bne.n	83bda <skipWhitespace+0x3e>
   83bc6:	e015      	b.n	83bf4 <skipWhitespace+0x58>
   83bc8:	f813 5f01 	ldrb.w	r5, [r3, #1]!
   83bcc:	1961      	adds	r1, r4, r5
   83bce:	784d      	ldrb	r5, [r1, #1]
   83bd0:	f005 0108 	and.w	r1, r5, #8
   83bd4:	b2cd      	uxtb	r5, r1
   83bd6:	b9cd      	cbnz	r5, 83c0c <skipWhitespace+0x70>
   83bd8:	e00a      	b.n	83bf0 <skipWhitespace+0x54>
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   83bda:	f100 0201 	add.w	r2, r0, #1
   83bde:	4610      	mov	r0, r2
   83be0:	42b2      	cmp	r2, r6
   83be2:	d1f1      	bne.n	83bc8 <skipWhitespace+0x2c>
        if (!isspace((unsigned char)cmd[i])) {
            return i;
        }
    }
    return len;
   83be4:	4630      	mov	r0, r6
   83be6:	e003      	b.n	83bf0 <skipWhitespace+0x54>
   83be8:	4608      	mov	r0, r1
   83bea:	e001      	b.n	83bf0 <skipWhitespace+0x54>
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   83bec:	f04f 0000 	mov.w	r0, #0
        if (!isspace((unsigned char)cmd[i])) {
            return i;
        }
    }
    return len;
}
   83bf0:	bc70      	pop	{r4, r5, r6}
   83bf2:	4770      	bx	lr
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   83bf4:	f100 0001 	add.w	r0, r0, #1
        if (!isspace((unsigned char)cmd[i])) {
   83bf8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   83bfc:	1862      	adds	r2, r4, r1
   83bfe:	7851      	ldrb	r1, [r2, #1]
   83c00:	f001 0208 	and.w	r2, r1, #8
   83c04:	b2d1      	uxtb	r1, r2
   83c06:	2900      	cmp	r1, #0
   83c08:	d1e7      	bne.n	83bda <skipWhitespace+0x3e>
   83c0a:	e7f1      	b.n	83bf0 <skipWhitespace+0x54>
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   83c0c:	f102 0001 	add.w	r0, r2, #1
        if (!isspace((unsigned char)cmd[i])) {
   83c10:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   83c14:	18a1      	adds	r1, r4, r2
   83c16:	784a      	ldrb	r2, [r1, #1]
   83c18:	f002 0108 	and.w	r1, r2, #8
   83c1c:	b2ca      	uxtb	r2, r1
   83c1e:	2a00      	cmp	r2, #0
   83c20:	d1db      	bne.n	83bda <skipWhitespace+0x3e>
   83c22:	e7e5      	b.n	83bf0 <skipWhitespace+0x54>

00083c24 <matchPattern>:
 * @param pattern_len
 * @param str
 * @param str_len
 * @return 
 */
bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
   83c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83c28:	4680      	mov	r8, r0
   83c2a:	4691      	mov	r9, r2
   83c2c:	469a      	mov	sl, r3
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   83c2e:	468e      	mov	lr, r1
   83c30:	b321      	cbz	r1, 83c7c <matchPattern+0x58>
   83c32:	7803      	ldrb	r3, [r0, #0]
   83c34:	b32b      	cbz	r3, 83c82 <matchPattern+0x5e>
        if (islower((unsigned char)pattern[i])) {
   83c36:	f240 22a0 	movw	r2, #672	; 0x2a0
   83c3a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83c3e:	6810      	ldr	r0, [r2, #0]
   83c40:	18c1      	adds	r1, r0, r3
   83c42:	784c      	ldrb	r4, [r1, #1]
   83c44:	f004 0503 	and.w	r5, r4, #3
   83c48:	2d02      	cmp	r5, #2
   83c4a:	d01d      	beq.n	83c88 <matchPattern+0x64>
   83c4c:	4642      	mov	r2, r8
   83c4e:	f04f 0400 	mov.w	r4, #0
   83c52:	f01e 0f01 	tst.w	lr, #1
   83c56:	d107      	bne.n	83c68 <matchPattern+0x44>
   83c58:	e02f      	b.n	83cba <matchPattern+0x96>
   83c5a:	19c7      	adds	r7, r0, r7
   83c5c:	7879      	ldrb	r1, [r7, #1]
   83c5e:	f001 0503 	and.w	r5, r1, #3
   83c62:	2d02      	cmp	r5, #2
   83c64:	d136      	bne.n	83cd4 <matchPattern+0xb0>
   83c66:	e011      	b.n	83c8c <matchPattern+0x68>
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   83c68:	f104 0601 	add.w	r6, r4, #1
   83c6c:	4634      	mov	r4, r6
   83c6e:	4576      	cmp	r6, lr
   83c70:	d00c      	beq.n	83c8c <matchPattern+0x68>
   83c72:	f812 7f01 	ldrb.w	r7, [r2, #1]!
   83c76:	2f00      	cmp	r7, #0
   83c78:	d1ef      	bne.n	83c5a <matchPattern+0x36>
   83c7a:	e007      	b.n	83c8c <matchPattern+0x68>
   83c7c:	f04f 0400 	mov.w	r4, #0
   83c80:	e004      	b.n	83c8c <matchPattern+0x68>
   83c82:	f04f 0400 	mov.w	r4, #0
   83c86:	e001      	b.n	83c8c <matchPattern+0x68>
   83c88:	f04f 0400 	mov.w	r4, #0
 * @param str_len
 * @return 
 */
bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
    int pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
    return compareStr(pattern, pattern_len, str, str_len) ||
   83c8c:	4640      	mov	r0, r8
   83c8e:	4671      	mov	r1, lr
   83c90:	464a      	mov	r2, r9
   83c92:	4653      	mov	r3, sl
   83c94:	f643 15a5 	movw	r5, #14757	; 0x39a5
   83c98:	f2c0 0508 	movt	r5, #8
   83c9c:	47a8      	blx	r5
   83c9e:	b930      	cbnz	r0, 83cae <matchPattern+0x8a>
            compareStr(pattern, pattern_sep_pos_short, str, str_len);
   83ca0:	4640      	mov	r0, r8
   83ca2:	4621      	mov	r1, r4
   83ca4:	464a      	mov	r2, r9
   83ca6:	4653      	mov	r3, sl
   83ca8:	462c      	mov	r4, r5
   83caa:	47a8      	blx	r5
   83cac:	e001      	b.n	83cb2 <matchPattern+0x8e>
 * @param str_len
 * @return 
 */
bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
    int pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
    return compareStr(pattern, pattern_len, str, str_len) ||
   83cae:	f04f 0001 	mov.w	r0, #1
            compareStr(pattern, pattern_sep_pos_short, str, str_len);
}
   83cb2:	f000 0001 	and.w	r0, r0, #1
   83cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   83cba:	f104 0401 	add.w	r4, r4, #1
   83cbe:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   83cc2:	2b00      	cmp	r3, #0
   83cc4:	d0e2      	beq.n	83c8c <matchPattern+0x68>
        if (islower((unsigned char)pattern[i])) {
   83cc6:	18c1      	adds	r1, r0, r3
   83cc8:	784d      	ldrb	r5, [r1, #1]
   83cca:	f005 0303 	and.w	r3, r5, #3
   83cce:	2b02      	cmp	r3, #2
   83cd0:	d1ca      	bne.n	83c68 <matchPattern+0x44>
   83cd2:	e7db      	b.n	83c8c <matchPattern+0x68>
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   83cd4:	f106 0401 	add.w	r4, r6, #1
   83cd8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   83cdc:	2b00      	cmp	r3, #0
   83cde:	d0d5      	beq.n	83c8c <matchPattern+0x68>
        if (islower((unsigned char)pattern[i])) {
   83ce0:	18c1      	adds	r1, r0, r3
   83ce2:	784d      	ldrb	r5, [r1, #1]
   83ce4:	f005 0303 	and.w	r3, r5, #3
   83ce8:	2b02      	cmp	r3, #2
   83cea:	d1bd      	bne.n	83c68 <matchPattern+0x44>
   83cec:	e7ce      	b.n	83c8c <matchPattern+0x68>
   83cee:	bf00      	nop

00083cf0 <matchCommand>:
 * @param pattern
 * @param cmd - command
 * @param len - max search length
 * @return TRUE if pattern matches, FALSE otherwise
 */
bool_t matchCommand(const char * pattern, const char * cmd, size_t len) {
   83cf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83cf4:	4605      	mov	r5, r0
   83cf6:	460c      	mov	r4, r1
   83cf8:	4616      	mov	r6, r2
    int result = FALSE;
    
    const char * pattern_ptr = pattern;
    int pattern_len = strlen(pattern);
   83cfa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   83cfe:	f2c0 0308 	movt	r3, #8
   83d02:	4798      	blx	r3
    const char * pattern_end = pattern + pattern_len;
   83d04:	eb05 0900 	add.w	r9, r5, r0
    
    const char * cmd_ptr = cmd;
    size_t cmd_len = SCPI_strnlen(cmd, len);
   83d08:	4620      	mov	r0, r4
   83d0a:	4631      	mov	r1, r6
   83d0c:	f64a 424f 	movw	r2, #44111	; 0xac4f
   83d10:	f2c0 0208 	movt	r2, #8
   83d14:	4790      	blx	r2
    const char * cmd_end = cmd + cmd_len;
   83d16:	eb04 0a00 	add.w	sl, r4, r0
    
    /* TODO: now it is possible to send command ":*IDN?" which is incorrect */
    if (iscolon(cmd_ptr[0])) {
   83d1a:	7820      	ldrb	r0, [r4, #0]
   83d1c:	283a      	cmp	r0, #58	; 0x3a
        cmd_len --;
        cmd_ptr ++;
   83d1e:	bf08      	it	eq
   83d20:	3401      	addeq	r4, #1
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorPos(const char * pattern, size_t len) {
    
    char * separator = strnpbrk(pattern, len, "?:[]");
   83d22:	f24f 3b74 	movw	fp, #62324	; 0xf374
   83d26:	f2c0 0b08 	movt	fp, #8
   83d2a:	f643 080d 	movw	r8, #14349	; 0x380d
   83d2e:	f2c0 0808 	movt	r8, #8
        cmd_len --;
        cmd_ptr ++;
    }
    
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
   83d32:	ebc5 0709 	rsb	r7, r5, r9
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorPos(const char * pattern, size_t len) {
    
    char * separator = strnpbrk(pattern, len, "?:[]");
   83d36:	4628      	mov	r0, r5
   83d38:	4639      	mov	r1, r7
   83d3a:	465a      	mov	r2, fp
   83d3c:	47c0      	blx	r8
    if (separator == NULL) {
   83d3e:	b100      	cbz	r0, 83d42 <matchCommand+0x52>
        return len;
    } else {
        return separator - pattern;
   83d40:	1b47      	subs	r7, r0, r5
        cmd_ptr ++;
    }
    
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
        int cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_end - cmd_ptr);
   83d42:	ebc4 060a 	rsb	r6, r4, sl
 * @param cmd - input command
 * @param len - max search length
 * @return position of separator or len
 */
size_t cmdSeparatorPos(const char * cmd, size_t len) {
    char * separator = strnpbrk(cmd, len, ":?");
   83d46:	4620      	mov	r0, r4
   83d48:	4631      	mov	r1, r6
   83d4a:	4a1b      	ldr	r2, [pc, #108]	; (83db8 <matchCommand+0xc8>)
   83d4c:	47c0      	blx	r8
    size_t result;
    if (separator == NULL) {
   83d4e:	b100      	cbz	r0, 83d52 <matchCommand+0x62>
        result = len;
    } else {
        result = separator - cmd;
   83d50:	1b06      	subs	r6, r0, r4
    
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
        int cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_end - cmd_ptr);
        
        if (matchPattern(pattern_ptr, pattern_sep_pos, cmd_ptr, cmd_sep_pos)) {
   83d52:	4628      	mov	r0, r5
   83d54:	4639      	mov	r1, r7
   83d56:	4622      	mov	r2, r4
   83d58:	4633      	mov	r3, r6
   83d5a:	f643 4c25 	movw	ip, #15397	; 0x3c25
   83d5e:	f2c0 0c08 	movt	ip, #8
   83d62:	47e0      	blx	ip
   83d64:	b1c0      	cbz	r0, 83d98 <matchCommand+0xa8>
            pattern_ptr = pattern_ptr + pattern_sep_pos;
   83d66:	19ed      	adds	r5, r5, r7
            cmd_ptr = cmd_ptr + cmd_sep_pos;
   83d68:	19a4      	adds	r4, r4, r6
            result = TRUE;
            
            /* command is complete */
            if ((pattern_ptr == pattern_end) && (cmd_ptr >= cmd_end)) {
   83d6a:	454d      	cmp	r5, r9
   83d6c:	d105      	bne.n	83d7a <matchCommand+0x8a>
   83d6e:	45a2      	cmp	sl, r4
   83d70:	bf8c      	ite	hi
   83d72:	2000      	movhi	r0, #0
   83d74:	2001      	movls	r0, #1
   83d76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                result = FALSE;
                break;
            }
            
            /* command complete, but pattern not */
            if (cmd_ptr >= cmd_end) {
   83d7a:	45a2      	cmp	sl, r4
   83d7c:	d910      	bls.n	83da0 <matchCommand+0xb0>
                result = FALSE;
                break;
            }
            
            /* both command and patter contains command separator at this position */
            if ((pattern_ptr[0] == cmd_ptr[0]) && ((pattern_ptr[0] == ':') || (pattern_ptr[0] == '?'))) {
   83d7e:	7828      	ldrb	r0, [r5, #0]
   83d80:	7822      	ldrb	r2, [r4, #0]
   83d82:	4282      	cmp	r2, r0
   83d84:	d110      	bne.n	83da8 <matchCommand+0xb8>
   83d86:	283a      	cmp	r0, #58	; 0x3a
   83d88:	d001      	beq.n	83d8e <matchCommand+0x9e>
   83d8a:	283f      	cmp	r0, #63	; 0x3f
   83d8c:	d110      	bne.n	83db0 <matchCommand+0xc0>
                pattern_ptr = pattern_ptr + 1;
   83d8e:	f105 0501 	add.w	r5, r5, #1
                cmd_ptr = cmd_ptr + 1;
   83d92:	f104 0401 	add.w	r4, r4, #1
   83d96:	e7cc      	b.n	83d32 <matchCommand+0x42>
            } else {
                result = FALSE;
                break;
            }
        } else {
            result = FALSE;
   83d98:	f04f 0000 	mov.w	r0, #0
   83d9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                break;
            }
            
            /* command complete, but pattern not */
            if (cmd_ptr >= cmd_end) {
                result = FALSE;
   83da0:	f04f 0000 	mov.w	r0, #0
   83da4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            /* both command and patter contains command separator at this position */
            if ((pattern_ptr[0] == cmd_ptr[0]) && ((pattern_ptr[0] == ':') || (pattern_ptr[0] == '?'))) {
                pattern_ptr = pattern_ptr + 1;
                cmd_ptr = cmd_ptr + 1;
            } else {
                result = FALSE;
   83da8:	f04f 0000 	mov.w	r0, #0
   83dac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83db0:	f04f 0000 	mov.w	r0, #0
            break;
        }
    }
    
    return result;
}
   83db4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83db8:	0008f37c 	.word	0x0008f37c

00083dbc <SCPI_GetModuleType>:
 #include <string.h>
 #include <math.h>
 #include "asf.h"
 
 scpi_result_t SCPI_GetModuleType(scpi_t * context)
 {
   83dbc:	b538      	push	{r3, r4, r5, lr}
	 printf("High-Speed Pulse Generator\x0D");
   83dbe:	f641 3598 	movw	r5, #7064	; 0x1b98
   83dc2:	f2c2 0507 	movt	r5, #8199	; 0x2007
   83dc6:	f24f 3480 	movw	r4, #62336	; 0xf380
   83dca:	f2c0 0408 	movt	r4, #8
   83dce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   83dd0:	6028      	str	r0, [r5, #0]
   83dd2:	6069      	str	r1, [r5, #4]
   83dd4:	60aa      	str	r2, [r5, #8]
   83dd6:	60eb      	str	r3, [r5, #12]
   83dd8:	cc07      	ldmia	r4!, {r0, r1, r2}
   83dda:	6128      	str	r0, [r5, #16]
   83ddc:	6169      	str	r1, [r5, #20]
   83dde:	61aa      	str	r2, [r5, #24]
   83de0:	4628      	mov	r0, r5
   83de2:	f644 63b1 	movw	r3, #20145	; 0x4eb1
   83de6:	f2c0 0308 	movt	r3, #8
   83dea:	4798      	blx	r3
	 return SCPI_RES_OK;
 }
   83dec:	f04f 0001 	mov.w	r0, #1
   83df0:	bd38      	pop	{r3, r4, r5, pc}
   83df2:	bf00      	nop

00083df4 <SCPI_GetModuleName>:

scpi_result_t SCPI_GetModuleName(scpi_t * context)
{
   83df4:	b538      	push	{r3, r4, r5, lr}
	printf("High-Speed Pulse Generator\x0D");
   83df6:	f641 3598 	movw	r5, #7064	; 0x1b98
   83dfa:	f2c2 0507 	movt	r5, #8199	; 0x2007
   83dfe:	f24f 3480 	movw	r4, #62336	; 0xf380
   83e02:	f2c0 0408 	movt	r4, #8
   83e06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   83e08:	6028      	str	r0, [r5, #0]
   83e0a:	6069      	str	r1, [r5, #4]
   83e0c:	60aa      	str	r2, [r5, #8]
   83e0e:	60eb      	str	r3, [r5, #12]
   83e10:	cc07      	ldmia	r4!, {r0, r1, r2}
   83e12:	6128      	str	r0, [r5, #16]
   83e14:	6169      	str	r1, [r5, #20]
   83e16:	61aa      	str	r2, [r5, #24]
   83e18:	4628      	mov	r0, r5
   83e1a:	f644 63b1 	movw	r3, #20145	; 0x4eb1
   83e1e:	f2c0 0308 	movt	r3, #8
   83e22:	4798      	blx	r3
	return SCPI_RES_OK;
}
   83e24:	f04f 0001 	mov.w	r0, #1
   83e28:	bd38      	pop	{r3, r4, r5, pc}
   83e2a:	bf00      	nop

00083e2c <SCPI_GetModuleDescription>:

scpi_result_t SCPI_GetModuleDescription(scpi_t * context)
{
   83e2c:	b538      	push	{r3, r4, r5, lr}
	printf("High-Speed Pulse Generator\x0D");
   83e2e:	f641 3598 	movw	r5, #7064	; 0x1b98
   83e32:	f2c2 0507 	movt	r5, #8199	; 0x2007
   83e36:	f24f 3480 	movw	r4, #62336	; 0xf380
   83e3a:	f2c0 0408 	movt	r4, #8
   83e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   83e40:	6028      	str	r0, [r5, #0]
   83e42:	6069      	str	r1, [r5, #4]
   83e44:	60aa      	str	r2, [r5, #8]
   83e46:	60eb      	str	r3, [r5, #12]
   83e48:	cc07      	ldmia	r4!, {r0, r1, r2}
   83e4a:	6128      	str	r0, [r5, #16]
   83e4c:	6169      	str	r1, [r5, #20]
   83e4e:	61aa      	str	r2, [r5, #24]
   83e50:	4628      	mov	r0, r5
   83e52:	f644 63b1 	movw	r3, #20145	; 0x4eb1
   83e56:	f2c0 0308 	movt	r3, #8
   83e5a:	4798      	blx	r3
	return SCPI_RES_OK;
}
   83e5c:	f04f 0001 	mov.w	r0, #1
   83e60:	bd38      	pop	{r3, r4, r5, pc}
   83e62:	bf00      	nop

00083e64 <SCPI_GetModuleSN>:

scpi_result_t SCPI_GetModuleSN(scpi_t * context)
{
   83e64:	b508      	push	{r3, lr}
	printf("0x0000\x0D");
   83e66:	f641 3298 	movw	r2, #7064	; 0x1b98
   83e6a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83e6e:	f24f 339c 	movw	r3, #62364	; 0xf39c
   83e72:	f2c0 0308 	movt	r3, #8
   83e76:	cb03      	ldmia	r3!, {r0, r1}
   83e78:	6010      	str	r0, [r2, #0]
   83e7a:	6051      	str	r1, [r2, #4]
   83e7c:	4610      	mov	r0, r2
   83e7e:	f644 61b1 	movw	r1, #20145	; 0x4eb1
   83e82:	f2c0 0108 	movt	r1, #8
   83e86:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83e88:	f04f 0001 	mov.w	r0, #1
   83e8c:	bd08      	pop	{r3, pc}
   83e8e:	bf00      	nop

00083e90 <SCPI_GetDissipatedPower>:

scpi_result_t SCPI_GetDissipatedPower(scpi_t * context)
{
   83e90:	b508      	push	{r3, lr}
	printf("840mW\x0D");
   83e92:	f641 3398 	movw	r3, #7064	; 0x1b98
   83e96:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83e9a:	f24f 32a4 	movw	r2, #62372	; 0xf3a4
   83e9e:	f2c0 0208 	movt	r2, #8
   83ea2:	6810      	ldr	r0, [r2, #0]
   83ea4:	6018      	str	r0, [r3, #0]
   83ea6:	8891      	ldrh	r1, [r2, #4]
   83ea8:	7992      	ldrb	r2, [r2, #6]
   83eaa:	8099      	strh	r1, [r3, #4]
   83eac:	719a      	strb	r2, [r3, #6]
   83eae:	4618      	mov	r0, r3
   83eb0:	f644 63b1 	movw	r3, #20145	; 0x4eb1
   83eb4:	f2c0 0308 	movt	r3, #8
   83eb8:	4798      	blx	r3
	return SCPI_RES_OK;
}
   83eba:	f04f 0001 	mov.w	r0, #1
   83ebe:	bd08      	pop	{r3, pc}

00083ec0 <SCPI_GetMaxCurrent>:

scpi_result_t SCPI_GetMaxCurrent(scpi_t * context)
{
   83ec0:	b508      	push	{r3, lr}
	printf("0mA\x0D");
   83ec2:	f641 3398 	movw	r3, #7064	; 0x1b98
   83ec6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83eca:	f24f 32ac 	movw	r2, #62380	; 0xf3ac
   83ece:	f2c0 0208 	movt	r2, #8
   83ed2:	6810      	ldr	r0, [r2, #0]
   83ed4:	6018      	str	r0, [r3, #0]
   83ed6:	7911      	ldrb	r1, [r2, #4]
   83ed8:	7119      	strb	r1, [r3, #4]
   83eda:	4618      	mov	r0, r3
   83edc:	f644 63b1 	movw	r3, #20145	; 0x4eb1
   83ee0:	f2c0 0308 	movt	r3, #8
   83ee4:	4798      	blx	r3
	return SCPI_RES_OK;
}
   83ee6:	f04f 0001 	mov.w	r0, #1
   83eea:	bd08      	pop	{r3, pc}

00083eec <SCPI_GetNomCurrent>:

scpi_result_t SCPI_GetNomCurrent(scpi_t * context)
{
   83eec:	b508      	push	{r3, lr}
	printf("0mA\x0D");
   83eee:	f641 3398 	movw	r3, #7064	; 0x1b98
   83ef2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83ef6:	f24f 32ac 	movw	r2, #62380	; 0xf3ac
   83efa:	f2c0 0208 	movt	r2, #8
   83efe:	6810      	ldr	r0, [r2, #0]
   83f00:	6018      	str	r0, [r3, #0]
   83f02:	7911      	ldrb	r1, [r2, #4]
   83f04:	7119      	strb	r1, [r3, #4]
   83f06:	4618      	mov	r0, r3
   83f08:	f644 63b1 	movw	r3, #20145	; 0x4eb1
   83f0c:	f2c0 0308 	movt	r3, #8
   83f10:	4798      	blx	r3
	return SCPI_RES_OK;
}
   83f12:	f04f 0001 	mov.w	r0, #1
   83f16:	bd08      	pop	{r3, pc}

00083f18 <SCPI_GetSDCardStatus>:

scpi_result_t SCPI_GetSDCardStatus(scpi_t * context)
{
   83f18:	b508      	push	{r3, lr}
	printf("OK\x0D");
   83f1a:	f641 3398 	movw	r3, #7064	; 0x1b98
   83f1e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83f22:	f24f 32b4 	movw	r2, #62388	; 0xf3b4
   83f26:	f2c0 0208 	movt	r2, #8
   83f2a:	6810      	ldr	r0, [r2, #0]
   83f2c:	6018      	str	r0, [r3, #0]
   83f2e:	4618      	mov	r0, r3
   83f30:	f644 61b1 	movw	r1, #20145	; 0x4eb1
   83f34:	f2c0 0108 	movt	r1, #8
   83f38:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83f3a:	f04f 0001 	mov.w	r0, #1
   83f3e:	bd08      	pop	{r3, pc}

00083f40 <SCPI_LedStatus>:

scpi_result_t SCPI_LedStatus(scpi_t * context)
{
   83f40:	b508      	push	{r3, lr}
	printf("OK\x0D");
   83f42:	f641 3398 	movw	r3, #7064	; 0x1b98
   83f46:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83f4a:	f24f 32b4 	movw	r2, #62388	; 0xf3b4
   83f4e:	f2c0 0208 	movt	r2, #8
   83f52:	6810      	ldr	r0, [r2, #0]
   83f54:	6018      	str	r0, [r3, #0]
   83f56:	4618      	mov	r0, r3
   83f58:	f644 61b1 	movw	r1, #20145	; 0x4eb1
   83f5c:	f2c0 0108 	movt	r1, #8
   83f60:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83f62:	f04f 0001 	mov.w	r0, #1
   83f66:	bd08      	pop	{r3, pc}

00083f68 <SCPI_ButtonStatus>:

scpi_result_t SCPI_ButtonStatus(scpi_t * context)
{
   83f68:	b508      	push	{r3, lr}
	if(get_user_button_status() == RETURN_OK)
   83f6a:	f642 13f1 	movw	r3, #10737	; 0x29f1
   83f6e:	f2c0 0308 	movt	r3, #8
   83f72:	4798      	blx	r3
   83f74:	2801      	cmp	r0, #1
   83f76:	d111      	bne.n	83f9c <SCPI_ButtonStatus+0x34>
	{
		printf("pushed\x0D");
   83f78:	f641 3298 	movw	r2, #7064	; 0x1b98
   83f7c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83f80:	f24f 33b8 	movw	r3, #62392	; 0xf3b8
   83f84:	f2c0 0308 	movt	r3, #8
   83f88:	cb03      	ldmia	r3!, {r0, r1}
   83f8a:	6010      	str	r0, [r2, #0]
   83f8c:	6051      	str	r1, [r2, #4]
   83f8e:	4610      	mov	r0, r2
   83f90:	f644 61b1 	movw	r1, #20145	; 0x4eb1
   83f94:	f2c0 0108 	movt	r1, #8
   83f98:	4788      	blx	r1
   83f9a:	e012      	b.n	83fc2 <SCPI_ButtonStatus+0x5a>
	} 
	else
	{
		printf("released\x0D");
   83f9c:	f641 3298 	movw	r2, #7064	; 0x1b98
   83fa0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83fa4:	f24f 33c0 	movw	r3, #62400	; 0xf3c0
   83fa8:	f2c0 0308 	movt	r3, #8
   83fac:	cb03      	ldmia	r3!, {r0, r1}
   83fae:	6010      	str	r0, [r2, #0]
   83fb0:	6051      	str	r1, [r2, #4]
   83fb2:	8818      	ldrh	r0, [r3, #0]
   83fb4:	8110      	strh	r0, [r2, #8]
   83fb6:	4610      	mov	r0, r2
   83fb8:	f644 61b1 	movw	r1, #20145	; 0x4eb1
   83fbc:	f2c0 0108 	movt	r1, #8
   83fc0:	4788      	blx	r1
	}
	return SCPI_RES_OK;
}
   83fc2:	f04f 0001 	mov.w	r0, #1
   83fc6:	bd08      	pop	{r3, pc}

00083fc8 <SCPI_EEPROM_Read>:

scpi_result_t SCPI_EEPROM_Read(scpi_t * context)
{
	// TBD...
	return SCPI_RES_OK;
}
   83fc8:	f04f 0001 	mov.w	r0, #1
   83fcc:	4770      	bx	lr
   83fce:	bf00      	nop

00083fd0 <SCPI_EEPROM_Write>:

scpi_result_t SCPI_EEPROM_Write(scpi_t * context)
{
	// TBD...
	return SCPI_RES_OK;
}
   83fd0:	f04f 0001 	mov.w	r0, #1
   83fd4:	4770      	bx	lr
   83fd6:	bf00      	nop

00083fd8 <SCPI_SetPower>:

scpi_result_t SCPI_SetPower(scpi_t * context)
{
   83fd8:	b530      	push	{r4, r5, lr}
   83fda:	b083      	sub	sp, #12
	const char * param;
	size_t param_len;

	if(!SCPI_ParamString(context, &param, &param_len, true)) 
   83fdc:	a901      	add	r1, sp, #4
   83fde:	466a      	mov	r2, sp
   83fe0:	f04f 0301 	mov.w	r3, #1
   83fe4:	f243 64c9 	movw	r4, #14025	; 0x36c9
   83fe8:	f2c0 0408 	movt	r4, #8
   83fec:	47a0      	blx	r4
   83fee:	2800      	cmp	r0, #0
   83ff0:	d039      	beq.n	84066 <SCPI_SetPower+0x8e>
		return SCPI_RES_ERR;
		
	if(param_len >= 2)
   83ff2:	9c00      	ldr	r4, [sp, #0]
   83ff4:	2c01      	cmp	r4, #1
   83ff6:	d939      	bls.n	8406c <SCPI_SetPower+0x94>
	{
		if(strncmp(param, "ON", 2) == 0)
   83ff8:	9d01      	ldr	r5, [sp, #4]
   83ffa:	4628      	mov	r0, r5
   83ffc:	f24f 31cc 	movw	r1, #62412	; 0xf3cc
   84000:	f2c0 0108 	movt	r1, #8
   84004:	f04f 0202 	mov.w	r2, #2
   84008:	f64a 4321 	movw	r3, #44065	; 0xac21
   8400c:	f2c0 0308 	movt	r3, #8
   84010:	4798      	blx	r3
   84012:	b960      	cbnz	r0, 8402e <SCPI_SetPower+0x56>
		{
			enable_12v();
   84014:	f642 2315 	movw	r3, #10773	; 0x2a15
   84018:	f2c0 0308 	movt	r3, #8
   8401c:	4798      	blx	r3
			init_module_peripherals_ap();
   8401e:	f642 003d 	movw	r0, #10301	; 0x283d
   84022:	f2c0 0008 	movt	r0, #8
   84026:	4780      	blx	r0
			return SCPI_RES_OK;
   84028:	f04f 0001 	mov.w	r0, #1
   8402c:	e026      	b.n	8407c <SCPI_SetPower+0xa4>
		}
		else if((param_len > 2) && (strncmp(param, "OFF", 3) == 0))
   8402e:	2c02      	cmp	r4, #2
   84030:	d91f      	bls.n	84072 <SCPI_SetPower+0x9a>
   84032:	4628      	mov	r0, r5
   84034:	f24f 31d0 	movw	r1, #62416	; 0xf3d0
   84038:	f2c0 0108 	movt	r1, #8
   8403c:	f04f 0203 	mov.w	r2, #3
   84040:	f64a 4321 	movw	r3, #44065	; 0xac21
   84044:	f2c0 0308 	movt	r3, #8
   84048:	4798      	blx	r3
   8404a:	b9a8      	cbnz	r0, 84078 <SCPI_SetPower+0xa0>
		{
			deinit_module_peripherals();
   8404c:	f642 0141 	movw	r1, #10305	; 0x2841
   84050:	f2c0 0108 	movt	r1, #8
   84054:	4788      	blx	r1
			disable_12v();
   84056:	f642 2225 	movw	r2, #10789	; 0x2a25
   8405a:	f2c0 0208 	movt	r2, #8
   8405e:	4790      	blx	r2
			return SCPI_RES_OK;
   84060:	f04f 0001 	mov.w	r0, #1
   84064:	e00a      	b.n	8407c <SCPI_SetPower+0xa4>
{
	const char * param;
	size_t param_len;

	if(!SCPI_ParamString(context, &param, &param_len, true)) 
		return SCPI_RES_ERR;
   84066:	f04f 00ff 	mov.w	r0, #255	; 0xff
   8406a:	e007      	b.n	8407c <SCPI_SetPower+0xa4>
			return SCPI_RES_ERR;
		}
	}
	else
	{
		return SCPI_RES_OK;
   8406c:	f04f 0001 	mov.w	r0, #1
   84070:	e004      	b.n	8407c <SCPI_SetPower+0xa4>
			disable_12v();
			return SCPI_RES_OK;
		}
		else
		{
			return SCPI_RES_ERR;
   84072:	f04f 00ff 	mov.w	r0, #255	; 0xff
   84076:	e001      	b.n	8407c <SCPI_SetPower+0xa4>
   84078:	f04f 00ff 	mov.w	r0, #255	; 0xff
	{
		return SCPI_RES_OK;
	}
	
	return SCPI_RES_OK;
}
   8407c:	b240      	sxtb	r0, r0
   8407e:	b003      	add	sp, #12
   84080:	bd30      	pop	{r4, r5, pc}
   84082:	bf00      	nop

00084084 <SCPI_SetUserLed>:

scpi_result_t SCPI_SetUserLed(scpi_t * context)
{
   84084:	b510      	push	{r4, lr}
   84086:	b084      	sub	sp, #16
   84088:	4604      	mov	r4, r0
	int32_t param1, param2, param3;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
   8408a:	a903      	add	r1, sp, #12
   8408c:	f04f 0201 	mov.w	r2, #1
   84090:	f243 7395 	movw	r3, #14229	; 0x3795
   84094:	f2c0 0308 	movt	r3, #8
   84098:	4798      	blx	r3
   8409a:	b308      	cbz	r0, 840e0 <SCPI_SetUserLed+0x5c>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}

	// read second parameter if present
	if (!SCPI_ParamInt(context, &param2, true)) {
   8409c:	4620      	mov	r0, r4
   8409e:	a902      	add	r1, sp, #8
   840a0:	f04f 0201 	mov.w	r2, #1
   840a4:	f243 7395 	movw	r3, #14229	; 0x3795
   840a8:	f2c0 0308 	movt	r3, #8
   840ac:	4798      	blx	r3
   840ae:	b1d0      	cbz	r0, 840e6 <SCPI_SetUserLed+0x62>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}

	// read second parameter if present
	if (!SCPI_ParamInt(context, &param3, true)) {
   840b0:	4620      	mov	r0, r4
   840b2:	a901      	add	r1, sp, #4
   840b4:	f04f 0201 	mov.w	r2, #1
   840b8:	f243 7395 	movw	r3, #14229	; 0x3795
   840bc:	f2c0 0308 	movt	r3, #8
   840c0:	4798      	blx	r3
   840c2:	b198      	cbz	r0, 840ec <SCPI_SetUserLed+0x68>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}

	set_user_led_colour((uint16_t) param1, (uint16_t) param2, (uint16_t) param3);
   840c4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   840c8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   840cc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   840d0:	f642 13ad 	movw	r3, #10669	; 0x29ad
   840d4:	f2c0 0308 	movt	r3, #8
   840d8:	4798      	blx	r3
	return SCPI_RES_OK;
   840da:	f04f 0001 	mov.w	r0, #1
   840de:	e007      	b.n	840f0 <SCPI_SetUserLed+0x6c>
	int32_t param1, param2, param3;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   840e0:	f04f 00ff 	mov.w	r0, #255	; 0xff
   840e4:	e004      	b.n	840f0 <SCPI_SetUserLed+0x6c>
	}

	// read second parameter if present
	if (!SCPI_ParamInt(context, &param2, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   840e6:	f04f 00ff 	mov.w	r0, #255	; 0xff
   840ea:	e001      	b.n	840f0 <SCPI_SetUserLed+0x6c>
	}

	// read second parameter if present
	if (!SCPI_ParamInt(context, &param3, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   840ec:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}

	set_user_led_colour((uint16_t) param1, (uint16_t) param2, (uint16_t) param3);
	return SCPI_RES_OK;
   840f0:	b240      	sxtb	r0, r0
   840f2:	b004      	add	sp, #16
   840f4:	bd10      	pop	{r4, pc}
   840f6:	bf00      	nop

000840f8 <SCPI_SetDelayReset>:
#include <math.h>

#define MAX_DELAY 11242

scpi_result_t SCPI_SetDelayReset(scpi_t* context)
{
   840f8:	b500      	push	{lr}
   840fa:	b083      	sub	sp, #12
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   840fc:	a901      	add	r1, sp, #4
   840fe:	f04f 0201 	mov.w	r2, #1
   84102:	f243 7395 	movw	r3, #14229	; 0x3795
   84106:	f2c0 0308 	movt	r3, #8
   8410a:	4798      	blx	r3
   8410c:	b168      	cbz	r0, 8412a <SCPI_SetDelayReset+0x32>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if ((param < 0) || (param > MAX_DELAY))
   8410e:	9801      	ldr	r0, [sp, #4]
   84110:	f642 31ea 	movw	r1, #11242	; 0x2bea
   84114:	4288      	cmp	r0, r1
   84116:	d80b      	bhi.n	84130 <SCPI_SetDelayReset+0x38>
	{
		return SCPI_RES_ERR;
	}
	
	SetDelayReset((uint16_t)param);
   84118:	b280      	uxth	r0, r0
   8411a:	f242 7295 	movw	r2, #10133	; 0x2795
   8411e:	f2c0 0208 	movt	r2, #8
   84122:	4790      	blx	r2
	
	return SCPI_RES_OK;
   84124:	f04f 0301 	mov.w	r3, #1
   84128:	e004      	b.n	84134 <SCPI_SetDelayReset+0x3c>
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   8412a:	f04f 03ff 	mov.w	r3, #255	; 0xff
   8412e:	e001      	b.n	84134 <SCPI_SetDelayReset+0x3c>
	}
	
	if ((param < 0) || (param > MAX_DELAY))
	{
		return SCPI_RES_ERR;
   84130:	f04f 03ff 	mov.w	r3, #255	; 0xff
	}
	
	SetDelayReset((uint16_t)param);
	
	return SCPI_RES_OK;
}
   84134:	b258      	sxtb	r0, r3
   84136:	b003      	add	sp, #12
   84138:	bd00      	pop	{pc}
   8413a:	bf00      	nop

0008413c <SCPI_SetDelayData>:

scpi_result_t SCPI_SetDelayData(scpi_t* context)
{
   8413c:	b500      	push	{lr}
   8413e:	b083      	sub	sp, #12
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   84140:	a901      	add	r1, sp, #4
   84142:	f04f 0201 	mov.w	r2, #1
   84146:	f243 7395 	movw	r3, #14229	; 0x3795
   8414a:	f2c0 0308 	movt	r3, #8
   8414e:	4798      	blx	r3
   84150:	b168      	cbz	r0, 8416e <SCPI_SetDelayData+0x32>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if ((param < 0) || (param > MAX_DELAY))
   84152:	9801      	ldr	r0, [sp, #4]
   84154:	f642 31ea 	movw	r1, #11242	; 0x2bea
   84158:	4288      	cmp	r0, r1
   8415a:	d80b      	bhi.n	84174 <SCPI_SetDelayData+0x38>
	{
		return SCPI_RES_ERR;
	}
	
	SetDelayData((uint16_t)param);
   8415c:	b280      	uxth	r0, r0
   8415e:	f242 72e9 	movw	r2, #10217	; 0x27e9
   84162:	f2c0 0208 	movt	r2, #8
   84166:	4790      	blx	r2
	
	return SCPI_RES_OK;
   84168:	f04f 0301 	mov.w	r3, #1
   8416c:	e004      	b.n	84178 <SCPI_SetDelayData+0x3c>
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   8416e:	f04f 03ff 	mov.w	r3, #255	; 0xff
   84172:	e001      	b.n	84178 <SCPI_SetDelayData+0x3c>
	}
	
	if ((param < 0) || (param > MAX_DELAY))
	{
		return SCPI_RES_ERR;
   84174:	f04f 03ff 	mov.w	r3, #255	; 0xff
	}
	
	SetDelayData((uint16_t)param);
	
	return SCPI_RES_OK;
}
   84178:	b258      	sxtb	r0, r3
   8417a:	b003      	add	sp, #12
   8417c:	bd00      	pop	{pc}
   8417e:	bf00      	nop

00084180 <SCPI_SetDelayClock>:

scpi_result_t SCPI_SetDelayClock(scpi_t* context)
{
   84180:	b500      	push	{lr}
   84182:	b083      	sub	sp, #12
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   84184:	a901      	add	r1, sp, #4
   84186:	f04f 0201 	mov.w	r2, #1
   8418a:	f243 7395 	movw	r3, #14229	; 0x3795
   8418e:	f2c0 0308 	movt	r3, #8
   84192:	4798      	blx	r3
   84194:	b168      	cbz	r0, 841b2 <SCPI_SetDelayClock+0x32>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if ((param < 0) || (param > MAX_DELAY))
   84196:	9801      	ldr	r0, [sp, #4]
   84198:	f642 31ea 	movw	r1, #11242	; 0x2bea
   8419c:	4288      	cmp	r0, r1
   8419e:	d80b      	bhi.n	841b8 <SCPI_SetDelayClock+0x38>
	{
		return SCPI_RES_ERR;
	}
	
	SetDelayClock((uint16_t)param);
   841a0:	b280      	uxth	r0, r0
   841a2:	f242 7241 	movw	r2, #10049	; 0x2741
   841a6:	f2c0 0208 	movt	r2, #8
   841aa:	4790      	blx	r2
		
	return SCPI_RES_OK;
   841ac:	f04f 0301 	mov.w	r3, #1
   841b0:	e004      	b.n	841bc <SCPI_SetDelayClock+0x3c>
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   841b2:	f04f 03ff 	mov.w	r3, #255	; 0xff
   841b6:	e001      	b.n	841bc <SCPI_SetDelayClock+0x3c>
	}
	
	if ((param < 0) || (param > MAX_DELAY))
	{
		return SCPI_RES_ERR;
   841b8:	f04f 03ff 	mov.w	r3, #255	; 0xff
	}
	
	SetDelayClock((uint16_t)param);
		
	return SCPI_RES_OK;
}
   841bc:	b258      	sxtb	r0, r3
   841be:	b003      	add	sp, #12
   841c0:	bd00      	pop	{pc}
   841c2:	bf00      	nop

000841c4 <SCPI_GetDelayReset>:

scpi_result_t SCPI_GetDelayReset(scpi_t* context)
{
   841c4:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", GetDelayReset());
   841c6:	f242 73dd 	movw	r3, #10205	; 0x27dd
   841ca:	f2c0 0308 	movt	r3, #8
   841ce:	4798      	blx	r3
   841d0:	4603      	mov	r3, r0
   841d2:	f641 3498 	movw	r4, #7064	; 0x1b98
   841d6:	f2c2 0407 	movt	r4, #8199	; 0x2007
   841da:	4620      	mov	r0, r4
   841dc:	f04f 0164 	mov.w	r1, #100	; 0x64
   841e0:	f24f 32d4 	movw	r2, #62420	; 0xf3d4
   841e4:	f2c0 0208 	movt	r2, #8
   841e8:	f64a 3567 	movw	r5, #43879	; 0xab67
   841ec:	f2c0 0508 	movt	r5, #8
   841f0:	47a8      	blx	r5
   841f2:	4620      	mov	r0, r4
   841f4:	f644 61b1 	movw	r1, #20145	; 0x4eb1
   841f8:	f2c0 0108 	movt	r1, #8
   841fc:	4788      	blx	r1
	return SCPI_RES_OK;
}
   841fe:	f04f 0001 	mov.w	r0, #1
   84202:	bd38      	pop	{r3, r4, r5, pc}

00084204 <SCPI_GetDelayData>:

scpi_result_t SCPI_GetDelayData(scpi_t* context)
{
   84204:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", GetDelayData());
   84206:	f642 0331 	movw	r3, #10289	; 0x2831
   8420a:	f2c0 0308 	movt	r3, #8
   8420e:	4798      	blx	r3
   84210:	4603      	mov	r3, r0
   84212:	f641 3498 	movw	r4, #7064	; 0x1b98
   84216:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8421a:	4620      	mov	r0, r4
   8421c:	f04f 0164 	mov.w	r1, #100	; 0x64
   84220:	f24f 32d4 	movw	r2, #62420	; 0xf3d4
   84224:	f2c0 0208 	movt	r2, #8
   84228:	f64a 3567 	movw	r5, #43879	; 0xab67
   8422c:	f2c0 0508 	movt	r5, #8
   84230:	47a8      	blx	r5
   84232:	4620      	mov	r0, r4
   84234:	f644 61b1 	movw	r1, #20145	; 0x4eb1
   84238:	f2c0 0108 	movt	r1, #8
   8423c:	4788      	blx	r1
	return SCPI_RES_OK;
}
   8423e:	f04f 0001 	mov.w	r0, #1
   84242:	bd38      	pop	{r3, r4, r5, pc}

00084244 <SCPI_GetDelayClock>:

scpi_result_t SCPI_GetDelayClock(scpi_t* context)
{
   84244:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", GetDelayClock());
   84246:	f242 7389 	movw	r3, #10121	; 0x2789
   8424a:	f2c0 0308 	movt	r3, #8
   8424e:	4798      	blx	r3
   84250:	4603      	mov	r3, r0
   84252:	f641 3498 	movw	r4, #7064	; 0x1b98
   84256:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8425a:	4620      	mov	r0, r4
   8425c:	f04f 0164 	mov.w	r1, #100	; 0x64
   84260:	f24f 32d4 	movw	r2, #62420	; 0xf3d4
   84264:	f2c0 0208 	movt	r2, #8
   84268:	f64a 3567 	movw	r5, #43879	; 0xab67
   8426c:	f2c0 0508 	movt	r5, #8
   84270:	47a8      	blx	r5
   84272:	4620      	mov	r0, r4
   84274:	f644 61b1 	movw	r1, #20145	; 0x4eb1
   84278:	f2c0 0108 	movt	r1, #8
   8427c:	4788      	blx	r1
	return SCPI_RES_OK;
}
   8427e:	f04f 0001 	mov.w	r0, #1
   84282:	bd38      	pop	{r3, r4, r5, pc}

00084284 <SCPI_EnableReset>:

scpi_result_t SCPI_EnableReset(scpi_t* context)
{
   84284:	b500      	push	{lr}
   84286:	b083      	sub	sp, #12
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   84288:	a901      	add	r1, sp, #4
   8428a:	f04f 0201 	mov.w	r2, #1
   8428e:	f243 7395 	movw	r3, #14229	; 0x3795
   84292:	f2c0 0308 	movt	r3, #8
   84296:	4798      	blx	r3
   84298:	b1a8      	cbz	r0, 842c6 <SCPI_EnableReset+0x42>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if(param == 0)
   8429a:	9801      	ldr	r0, [sp, #4]
   8429c:	b948      	cbnz	r0, 842b2 <SCPI_EnableReset+0x2e>
		enable_disable_reset_delay(FALSE);
   8429e:	f04f 0000 	mov.w	r0, #0
   842a2:	f242 429d 	movw	r2, #9373	; 0x249d
   842a6:	f2c0 0208 	movt	r2, #8
   842aa:	4790      	blx	r2
	else
		enable_disable_reset_delay(TRUE);
	
	return SCPI_RES_OK;
   842ac:	f04f 0301 	mov.w	r3, #1
   842b0:	e00b      	b.n	842ca <SCPI_EnableReset+0x46>
	}
	
	if(param == 0)
		enable_disable_reset_delay(FALSE);
	else
		enable_disable_reset_delay(TRUE);
   842b2:	f04f 0001 	mov.w	r0, #1
   842b6:	f242 419d 	movw	r1, #9373	; 0x249d
   842ba:	f2c0 0108 	movt	r1, #8
   842be:	4788      	blx	r1
	
	return SCPI_RES_OK;
   842c0:	f04f 0301 	mov.w	r3, #1
   842c4:	e001      	b.n	842ca <SCPI_EnableReset+0x46>
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   842c6:	f04f 03ff 	mov.w	r3, #255	; 0xff
		enable_disable_reset_delay(FALSE);
	else
		enable_disable_reset_delay(TRUE);
	
	return SCPI_RES_OK;
}
   842ca:	b258      	sxtb	r0, r3
   842cc:	b003      	add	sp, #12
   842ce:	bd00      	pop	{pc}

000842d0 <SCPI_EnableData>:

scpi_result_t SCPI_EnableData(scpi_t* context)
{
   842d0:	b500      	push	{lr}
   842d2:	b083      	sub	sp, #12
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   842d4:	a901      	add	r1, sp, #4
   842d6:	f04f 0201 	mov.w	r2, #1
   842da:	f243 7395 	movw	r3, #14229	; 0x3795
   842de:	f2c0 0308 	movt	r3, #8
   842e2:	4798      	blx	r3
   842e4:	b1a8      	cbz	r0, 84312 <SCPI_EnableData+0x42>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if(param == 0)
   842e6:	9801      	ldr	r0, [sp, #4]
   842e8:	b948      	cbnz	r0, 842fe <SCPI_EnableData+0x2e>
	enable_disable_data_delay(FALSE);
   842ea:	f04f 0000 	mov.w	r0, #0
   842ee:	f242 42dd 	movw	r2, #9437	; 0x24dd
   842f2:	f2c0 0208 	movt	r2, #8
   842f6:	4790      	blx	r2
	else
	enable_disable_data_delay(TRUE);
	
	return SCPI_RES_OK;
   842f8:	f04f 0301 	mov.w	r3, #1
   842fc:	e00b      	b.n	84316 <SCPI_EnableData+0x46>
	}
	
	if(param == 0)
	enable_disable_data_delay(FALSE);
	else
	enable_disable_data_delay(TRUE);
   842fe:	f04f 0001 	mov.w	r0, #1
   84302:	f242 41dd 	movw	r1, #9437	; 0x24dd
   84306:	f2c0 0108 	movt	r1, #8
   8430a:	4788      	blx	r1
	
	return SCPI_RES_OK;
   8430c:	f04f 0301 	mov.w	r3, #1
   84310:	e001      	b.n	84316 <SCPI_EnableData+0x46>
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   84312:	f04f 03ff 	mov.w	r3, #255	; 0xff
	enable_disable_data_delay(FALSE);
	else
	enable_disable_data_delay(TRUE);
	
	return SCPI_RES_OK;
}
   84316:	b258      	sxtb	r0, r3
   84318:	b003      	add	sp, #12
   8431a:	bd00      	pop	{pc}

0008431c <SCPI_EnableClock>:

scpi_result_t SCPI_EnableClock(scpi_t* context)
{
   8431c:	b500      	push	{lr}
   8431e:	b083      	sub	sp, #12
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   84320:	a901      	add	r1, sp, #4
   84322:	f04f 0201 	mov.w	r2, #1
   84326:	f243 7395 	movw	r3, #14229	; 0x3795
   8432a:	f2c0 0308 	movt	r3, #8
   8432e:	4798      	blx	r3
   84330:	b1a8      	cbz	r0, 8435e <SCPI_EnableClock+0x42>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if(param == 0)
   84332:	9801      	ldr	r0, [sp, #4]
   84334:	b948      	cbnz	r0, 8434a <SCPI_EnableClock+0x2e>
	enable_disable_clock_delay(FALSE);
   84336:	f04f 0000 	mov.w	r0, #0
   8433a:	f242 521d 	movw	r2, #9501	; 0x251d
   8433e:	f2c0 0208 	movt	r2, #8
   84342:	4790      	blx	r2
	else
	enable_disable_clock_delay(TRUE);
	
	return SCPI_RES_OK;
   84344:	f04f 0301 	mov.w	r3, #1
   84348:	e00b      	b.n	84362 <SCPI_EnableClock+0x46>
	}
	
	if(param == 0)
	enable_disable_clock_delay(FALSE);
	else
	enable_disable_clock_delay(TRUE);
   8434a:	f04f 0001 	mov.w	r0, #1
   8434e:	f242 511d 	movw	r1, #9501	; 0x251d
   84352:	f2c0 0108 	movt	r1, #8
   84356:	4788      	blx	r1
	
	return SCPI_RES_OK;
   84358:	f04f 0301 	mov.w	r3, #1
   8435c:	e001      	b.n	84362 <SCPI_EnableClock+0x46>
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   8435e:	f04f 03ff 	mov.w	r3, #255	; 0xff
	enable_disable_clock_delay(FALSE);
	else
	enable_disable_clock_delay(TRUE);
	
	return SCPI_RES_OK;
}
   84362:	b258      	sxtb	r0, r3
   84364:	b003      	add	sp, #12
   84366:	bd00      	pop	{pc}

00084368 <SCPI_SetLightsOnOff>:

scpi_result_t SCPI_SetLightsOnOff(scpi_t * context)
{
   84368:	b500      	push	{lr}
   8436a:	b083      	sub	sp, #12
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   8436c:	a901      	add	r1, sp, #4
   8436e:	f04f 0201 	mov.w	r2, #1
   84372:	f243 7395 	movw	r3, #14229	; 0x3795
   84376:	f2c0 0308 	movt	r3, #8
   8437a:	4798      	blx	r3
   8437c:	b1a8      	cbz	r0, 843aa <SCPI_SetLightsOnOff+0x42>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if(param == 0)
   8437e:	9801      	ldr	r0, [sp, #4]
   84380:	b948      	cbnz	r0, 84396 <SCPI_SetLightsOnOff+0x2e>
		switch_on_off_lights(FALSE);
   84382:	f04f 0000 	mov.w	r0, #0
   84386:	f641 42dd 	movw	r2, #7389	; 0x1cdd
   8438a:	f2c0 0208 	movt	r2, #8
   8438e:	4790      	blx	r2
	else
		switch_on_off_lights(TRUE);
	
	return SCPI_RES_OK;	
   84390:	f04f 0301 	mov.w	r3, #1
   84394:	e00b      	b.n	843ae <SCPI_SetLightsOnOff+0x46>
	}
	
	if(param == 0)
		switch_on_off_lights(FALSE);
	else
		switch_on_off_lights(TRUE);
   84396:	f04f 0001 	mov.w	r0, #1
   8439a:	f641 41dd 	movw	r1, #7389	; 0x1cdd
   8439e:	f2c0 0108 	movt	r1, #8
   843a2:	4788      	blx	r1
	
	return SCPI_RES_OK;	
   843a4:	f04f 0301 	mov.w	r3, #1
   843a8:	e001      	b.n	843ae <SCPI_SetLightsOnOff+0x46>
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   843aa:	f04f 03ff 	mov.w	r3, #255	; 0xff
		switch_on_off_lights(FALSE);
	else
		switch_on_off_lights(TRUE);
	
	return SCPI_RES_OK;	
}
   843ae:	b258      	sxtb	r0, r3
   843b0:	b003      	add	sp, #12
   843b2:	bd00      	pop	{pc}

000843b4 <SCPI_GetEnableReset>:

scpi_result_t SCPI_GetEnableReset(scpi_t* context)
{
   843b4:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", is_reset_delay_enabled());
   843b6:	f242 4379 	movw	r3, #9337	; 0x2479
   843ba:	f2c0 0308 	movt	r3, #8
   843be:	4798      	blx	r3
   843c0:	4603      	mov	r3, r0
   843c2:	f641 3498 	movw	r4, #7064	; 0x1b98
   843c6:	f2c2 0407 	movt	r4, #8199	; 0x2007
   843ca:	4620      	mov	r0, r4
   843cc:	f04f 0164 	mov.w	r1, #100	; 0x64
   843d0:	f24f 32d4 	movw	r2, #62420	; 0xf3d4
   843d4:	f2c0 0208 	movt	r2, #8
   843d8:	f64a 3567 	movw	r5, #43879	; 0xab67
   843dc:	f2c0 0508 	movt	r5, #8
   843e0:	47a8      	blx	r5
   843e2:	4620      	mov	r0, r4
   843e4:	f644 61b1 	movw	r1, #20145	; 0x4eb1
   843e8:	f2c0 0108 	movt	r1, #8
   843ec:	4788      	blx	r1
	return SCPI_RES_OK;
}
   843ee:	f04f 0001 	mov.w	r0, #1
   843f2:	bd38      	pop	{r3, r4, r5, pc}

000843f4 <SCPI_GetEnableData>:

scpi_result_t SCPI_GetEnableData(scpi_t* context)
{
   843f4:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", is_data_delay_enabled());
   843f6:	f242 4385 	movw	r3, #9349	; 0x2485
   843fa:	f2c0 0308 	movt	r3, #8
   843fe:	4798      	blx	r3
   84400:	4603      	mov	r3, r0
   84402:	f641 3498 	movw	r4, #7064	; 0x1b98
   84406:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8440a:	4620      	mov	r0, r4
   8440c:	f04f 0164 	mov.w	r1, #100	; 0x64
   84410:	f24f 32d4 	movw	r2, #62420	; 0xf3d4
   84414:	f2c0 0208 	movt	r2, #8
   84418:	f64a 3567 	movw	r5, #43879	; 0xab67
   8441c:	f2c0 0508 	movt	r5, #8
   84420:	47a8      	blx	r5
   84422:	4620      	mov	r0, r4
   84424:	f644 61b1 	movw	r1, #20145	; 0x4eb1
   84428:	f2c0 0108 	movt	r1, #8
   8442c:	4788      	blx	r1
	return SCPI_RES_OK;
}
   8442e:	f04f 0001 	mov.w	r0, #1
   84432:	bd38      	pop	{r3, r4, r5, pc}

00084434 <SCPI_GetEnableClock>:

scpi_result_t SCPI_GetEnableClock(scpi_t* context)
{
   84434:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", is_clock_delay_enabled());
   84436:	f242 4391 	movw	r3, #9361	; 0x2491
   8443a:	f2c0 0308 	movt	r3, #8
   8443e:	4798      	blx	r3
   84440:	4603      	mov	r3, r0
   84442:	f641 3498 	movw	r4, #7064	; 0x1b98
   84446:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8444a:	4620      	mov	r0, r4
   8444c:	f04f 0164 	mov.w	r1, #100	; 0x64
   84450:	f24f 32d4 	movw	r2, #62420	; 0xf3d4
   84454:	f2c0 0208 	movt	r2, #8
   84458:	f64a 3567 	movw	r5, #43879	; 0xab67
   8445c:	f2c0 0508 	movt	r5, #8
   84460:	47a8      	blx	r5
   84462:	4620      	mov	r0, r4
   84464:	f644 61b1 	movw	r1, #20145	; 0x4eb1
   84468:	f2c0 0108 	movt	r1, #8
   8446c:	4788      	blx	r1
	return SCPI_RES_OK;
}
   8446e:	f04f 0001 	mov.w	r0, #1
   84472:	bd38      	pop	{r3, r4, r5, pc}

00084474 <SCPI_GetAttenuation>:

scpi_result_t SCPI_GetAttenuation(scpi_t* context)
{
   84474:	b530      	push	{r4, r5, lr}
   84476:	b083      	sub	sp, #12
	double return_val = (double)get_current_attenuation();
   84478:	f242 7335 	movw	r3, #10037	; 0x2735
   8447c:	f2c0 0308 	movt	r3, #8
   84480:	4798      	blx	r3
   84482:	f24a 313d 	movw	r1, #41789	; 0xa33d
   84486:	f2c0 0108 	movt	r1, #8
   8448a:	4788      	blx	r1
	return_val /= 4;
	printf("%lf\x0D", return_val);
   8448c:	f641 3498 	movw	r4, #7064	; 0x1b98
   84490:	f2c2 0407 	movt	r4, #8199	; 0x2007
}

scpi_result_t SCPI_GetAttenuation(scpi_t* context)
{
	double return_val = (double)get_current_attenuation();
	return_val /= 4;
   84494:	f04f 0200 	mov.w	r2, #0
   84498:	f04f 0300 	mov.w	r3, #0
   8449c:	f6c3 73d0 	movt	r3, #16336	; 0x3fd0
   844a0:	f24a 4529 	movw	r5, #42025	; 0xa429
   844a4:	f2c0 0508 	movt	r5, #8
   844a8:	47a8      	blx	r5
	printf("%lf\x0D", return_val);
   844aa:	e9cd 0100 	strd	r0, r1, [sp]
   844ae:	4620      	mov	r0, r4
   844b0:	f04f 0164 	mov.w	r1, #100	; 0x64
   844b4:	f24f 32d8 	movw	r2, #62424	; 0xf3d8
   844b8:	f2c0 0208 	movt	r2, #8
   844bc:	f64a 3367 	movw	r3, #43879	; 0xab67
   844c0:	f2c0 0308 	movt	r3, #8
   844c4:	4798      	blx	r3
   844c6:	4620      	mov	r0, r4
   844c8:	f644 62b1 	movw	r2, #20145	; 0x4eb1
   844cc:	f2c0 0208 	movt	r2, #8
   844d0:	4790      	blx	r2
	return SCPI_RES_OK;	
}
   844d2:	f04f 0001 	mov.w	r0, #1
   844d6:	b003      	add	sp, #12
   844d8:	bd30      	pop	{r4, r5, pc}
   844da:	bf00      	nop

000844dc <SCPI_SetAttenuation>:

scpi_result_t SCPI_SetAttenuation(scpi_t* context)
{
   844dc:	b510      	push	{r4, lr}
   844de:	b082      	sub	sp, #8
	double param;
	
	// read first parameter if present
	if (!SCPI_ParamDouble(context, &param, true)) {
   844e0:	4669      	mov	r1, sp
   844e2:	f04f 0201 	mov.w	r2, #1
   844e6:	f243 7339 	movw	r3, #14137	; 0x3739
   844ea:	f2c0 0308 	movt	r3, #8
   844ee:	4798      	blx	r3
   844f0:	b1f8      	cbz	r0, 84532 <SCPI_SetAttenuation+0x56>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	setup_rf_attenuator((uint16_t)round(param*4));
   844f2:	e9dd 0100 	ldrd	r0, r1, [sp]
   844f6:	f04f 0200 	mov.w	r2, #0
   844fa:	f04f 0300 	mov.w	r3, #0
   844fe:	f2c4 0310 	movt	r3, #16400	; 0x4010
   84502:	f24a 4429 	movw	r4, #42025	; 0xa429
   84506:	f2c0 0408 	movt	r4, #8
   8450a:	47a0      	blx	r4
   8450c:	f24a 0225 	movw	r2, #40997	; 0xa025
   84510:	f2c0 0208 	movt	r2, #8
   84514:	4790      	blx	r2
   84516:	f64a 135d 	movw	r3, #43357	; 0xa95d
   8451a:	f2c0 0308 	movt	r3, #8
   8451e:	4798      	blx	r3
   84520:	b280      	uxth	r0, r0
   84522:	f242 6185 	movw	r1, #9861	; 0x2685
   84526:	f2c0 0108 	movt	r1, #8
   8452a:	4788      	blx	r1
	return SCPI_RES_OK;
   8452c:	f04f 0001 	mov.w	r0, #1
   84530:	e001      	b.n	84536 <SCPI_SetAttenuation+0x5a>
	double param;
	
	// read first parameter if present
	if (!SCPI_ParamDouble(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   84532:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	
	setup_rf_attenuator((uint16_t)round(param*4));
	return SCPI_RES_OK;
}
   84536:	b240      	sxtb	r0, r0
   84538:	b002      	add	sp, #8
   8453a:	bd10      	pop	{r4, pc}

0008453c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   8453c:	b510      	push	{r4, lr}
   8453e:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
   84540:	f240 4395 	movw	r3, #1173	; 0x495
   84544:	f2c0 0308 	movt	r3, #8
   84548:	4798      	blx	r3
   8454a:	2801      	cmp	r0, #1
   8454c:	d003      	beq.n	84556 <sd_mmc_test_unit_ready+0x1a>
   8454e:	b128      	cbz	r0, 8455c <sd_mmc_test_unit_ready+0x20>
   84550:	2802      	cmp	r0, #2
   84552:	d120      	bne.n	84596 <sd_mmc_test_unit_ready+0x5a>
   84554:	e015      	b.n	84582 <sd_mmc_test_unit_ready+0x46>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   84556:	f04f 0003 	mov.w	r0, #3
   8455a:	bd10      	pop	{r4, pc}
Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   8455c:	f640 5100 	movw	r1, #3328	; 0xd00
   84560:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84564:	5d0b      	ldrb	r3, [r1, r4]
   84566:	b9cb      	cbnz	r3, 8459c <sd_mmc_test_unit_ready+0x60>
			return CTRL_NO_PRESENT;
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   84568:	4620      	mov	r0, r4
   8456a:	f241 022d 	movw	r2, #4141	; 0x102d
   8456e:	f2c0 0208 	movt	r2, #8
   84572:	4790      	blx	r2
   84574:	f000 0003 	and.w	r0, r0, #3
			return CTRL_GOOD;
   84578:	2800      	cmp	r0, #0
   8457a:	bf0c      	ite	eq
   8457c:	2002      	moveq	r0, #2
   8457e:	2000      	movne	r0, #0
   84580:	bd10      	pop	{r4, pc}

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   84582:	f640 5000 	movw	r0, #3328	; 0xd00
   84586:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8458a:	f04f 0200 	mov.w	r2, #0
   8458e:	5502      	strb	r2, [r0, r4]
		return CTRL_NO_PRESENT;
   84590:	f04f 0002 	mov.w	r0, #2
   84594:	bd10      	pop	{r4, pc}

	default:
		return CTRL_FAIL;
   84596:	f04f 0001 	mov.w	r0, #1
   8459a:	bd10      	pop	{r4, pc}
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
			return CTRL_NO_PRESENT;
   8459c:	f04f 0002 	mov.w	r0, #2
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
	}
}
   845a0:	bd10      	pop	{r4, pc}
   845a2:	bf00      	nop

000845a4 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   845a4:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
   845a6:	f04f 0000 	mov.w	r0, #0
   845aa:	f244 533d 	movw	r3, #17725	; 0x453d
   845ae:	f2c0 0308 	movt	r3, #8
   845b2:	4798      	blx	r3
}
   845b4:	bd08      	pop	{r3, pc}
   845b6:	bf00      	nop

000845b8 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   845b8:	b538      	push	{r3, r4, r5, lr}
   845ba:	4604      	mov	r4, r0
   845bc:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   845be:	f241 0359 	movw	r3, #4185	; 0x1059
   845c2:	f2c0 0308 	movt	r3, #8
   845c6:	4798      	blx	r3
   845c8:	ea4f 0040 	mov.w	r0, r0, lsl #1
   845cc:	f100 31ff 	add.w	r1, r0, #4294967295
   845d0:	6029      	str	r1, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
   845d2:	4620      	mov	r0, r4
   845d4:	f244 523d 	movw	r2, #17725	; 0x453d
   845d8:	f2c0 0208 	movt	r2, #8
   845dc:	4790      	blx	r2
}
   845de:	bd38      	pop	{r3, r4, r5, pc}

000845e0 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   845e0:	b508      	push	{r3, lr}
   845e2:	4601      	mov	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
   845e4:	f04f 0000 	mov.w	r0, #0
   845e8:	f244 53b9 	movw	r3, #17849	; 0x45b9
   845ec:	f2c0 0308 	movt	r3, #8
   845f0:	4798      	blx	r3
}
   845f2:	bd08      	pop	{r3, pc}

000845f4 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   845f4:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
   845f6:	f241 0385 	movw	r3, #4229	; 0x1085
   845fa:	f2c0 0308 	movt	r3, #8
   845fe:	4798      	blx	r3
}
   84600:	bd08      	pop	{r3, pc}
   84602:	bf00      	nop

00084604 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   84604:	b508      	push	{r3, lr}
	return sd_mmc_wr_protect(0);
   84606:	f04f 0000 	mov.w	r0, #0
   8460a:	f244 53f5 	movw	r3, #17909	; 0x45f5
   8460e:	f2c0 0308 	movt	r3, #8
   84612:	4798      	blx	r3
}
   84614:	bd08      	pop	{r3, pc}
   84616:	bf00      	nop

00084618 <sd_mmc_removal>:

bool sd_mmc_removal(uint8_t slot)
{
	UNUSED(slot);
	return true;
}
   84618:	f04f 0001 	mov.w	r0, #1
   8461c:	4770      	bx	lr
   8461e:	bf00      	nop

00084620 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   84620:	b508      	push	{r3, lr}
	return sd_mmc_removal(0);
   84622:	f04f 0000 	mov.w	r0, #0
   84626:	f244 6319 	movw	r3, #17945	; 0x4619
   8462a:	f2c0 0308 	movt	r3, #8
   8462e:	4798      	blx	r3
}
   84630:	bd08      	pop	{r3, pc}
   84632:	bf00      	nop

00084634 <sd_mmc_usb_read_10>:

COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
   84634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84638:	4614      	mov	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
   8463a:	f241 038d 	movw	r3, #4237	; 0x108d
   8463e:	f2c0 0308 	movt	r3, #8
   84642:	4798      	blx	r3
   84644:	4601      	mov	r1, r0
   84646:	b370      	cbz	r0, 846a6 <sd_mmc_usb_read_10+0x72>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   84648:	2802      	cmp	r0, #2
   8464a:	bf0c      	ite	eq
   8464c:	2002      	moveq	r0, #2
   8464e:	2001      	movne	r0, #1
   84650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (nb_step) { // Skip last step
   84654:	b144      	cbz	r4, 84668 <sd_mmc_usb_read_10+0x34>
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   84656:	f014 0f01 	tst.w	r4, #1
   8465a:	bf0c      	ite	eq
   8465c:	4638      	moveq	r0, r7
   8465e:	4640      	movne	r0, r8
   84660:	f04f 0101 	mov.w	r1, #1
   84664:	47b0      	blx	r6
   84666:	bba0      	cbnz	r0, 846d2 <sd_mmc_usb_read_10+0x9e>
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
			}
		}
		if (!b_first_step) { // Skip first step
   84668:	b985      	cbnz	r5, 8468c <sd_mmc_usb_read_10+0x58>
			// RAM -> USB
			if (!udi_msc_trans_block(true,
   8466a:	f014 0f01 	tst.w	r4, #1
   8466e:	bf0c      	ite	eq
   84670:	4641      	moveq	r1, r8
   84672:	4639      	movne	r1, r7
   84674:	f04f 0001 	mov.w	r0, #1
   84678:	f44f 7200 	mov.w	r2, #512	; 0x200
   8467c:	f04f 0300 	mov.w	r3, #0
   84680:	f646 259d 	movw	r5, #27293	; 0x6a9d
   84684:	f2c0 0508 	movt	r5, #8
   84688:	47a8      	blx	r5
   8468a:	b330      	cbz	r0, 846da <sd_mmc_usb_read_10+0xa6>
				return CTRL_FAIL;
			}
		} else {
			b_first_step = false;
		}
		if (nb_step) { // Skip last step
   8468c:	b12c      	cbz	r4, 8469a <sd_mmc_usb_read_10+0x66>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks()) {
   8468e:	f241 2015 	movw	r0, #4629	; 0x1215
   84692:	f2c0 0008 	movt	r0, #8
   84696:	4780      	blx	r0
   84698:	bb18      	cbnz	r0, 846e2 <sd_mmc_usb_read_10+0xae>
   8469a:	f104 34ff 	add.w	r4, r4, #4294967295
   8469e:	b2a4      	uxth	r4, r4
   846a0:	f04f 0500 	mov.w	r5, #0
   846a4:	e00d      	b.n	846c2 <sd_mmc_usb_read_10+0x8e>
COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
	bool b_first_step = true;
   846a6:	f04f 0501 	mov.w	r5, #1
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (nb_step) { // Skip last step
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   846aa:	f241 16dd 	movw	r6, #4573	; 0x11dd
   846ae:	f2c0 0608 	movt	r6, #8
   846b2:	f241 7898 	movw	r8, #6040	; 0x1798
   846b6:	f2c2 0807 	movt	r8, #8199	; 0x2007
   846ba:	f641 1798 	movw	r7, #6552	; 0x1998
   846be:	f2c2 0707 	movt	r7, #8199	; 0x2007
	default:
		return CTRL_FAIL;
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
   846c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   846c6:	4294      	cmp	r4, r2
   846c8:	d1c4      	bne.n	84654 <sd_mmc_usb_read_10+0x20>
				return CTRL_FAIL;
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
   846ca:	f04f 0000 	mov.w	r0, #0
   846ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (nb_step--) {
		if (nb_step) { // Skip last step
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
   846d2:	f04f 0001 	mov.w	r0, #1
   846d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!udi_msc_trans_block(true,
					((nb_step % 2) == 0) ?
					sector_buf_1 : sector_buf_0,
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
   846da:	f04f 0001 	mov.w	r0, #1
   846de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else {
			b_first_step = false;
		}
		if (nb_step) { // Skip last step
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks()) {
				return CTRL_FAIL;
   846e2:	f04f 0001 	mov.w	r0, #1
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
}
   846e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   846ea:	bf00      	nop

000846ec <sd_mmc_usb_read_10_0>:

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
   846ec:	b508      	push	{r3, lr}
   846ee:	4603      	mov	r3, r0
   846f0:	460a      	mov	r2, r1
	return sd_mmc_usb_read_10(0, addr, nb_sector);
   846f2:	f04f 0000 	mov.w	r0, #0
   846f6:	4619      	mov	r1, r3
   846f8:	f244 6335 	movw	r3, #17973	; 0x4635
   846fc:	f2c0 0308 	movt	r3, #8
   84700:	4798      	blx	r3
}
   84702:	bd08      	pop	{r3, pc}

00084704 <sd_mmc_usb_write_10>:
{
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
   84704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84708:	4614      	mov	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
   8470a:	f241 2395 	movw	r3, #4757	; 0x1295
   8470e:	f2c0 0308 	movt	r3, #8
   84712:	4798      	blx	r3
   84714:	4601      	mov	r1, r0
   84716:	b368      	cbz	r0, 84774 <sd_mmc_usb_write_10+0x70>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   84718:	2802      	cmp	r0, #2
   8471a:	bf0c      	ite	eq
   8471c:	2002      	moveq	r0, #2
   8471e:	2001      	movne	r0, #1
   84720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
   84724:	b945      	cbnz	r5, 84738 <sd_mmc_usb_write_10+0x34>
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   84726:	f014 0f01 	tst.w	r4, #1
   8472a:	bf0c      	ite	eq
   8472c:	4638      	moveq	r0, r7
   8472e:	4640      	movne	r0, r8
   84730:	f04f 0101 	mov.w	r1, #1
   84734:	47b0      	blx	r6
   84736:	bb98      	cbnz	r0, 847a0 <sd_mmc_usb_write_10+0x9c>
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
			}
		}
		if (nb_step) { // Skip last step
   84738:	b17c      	cbz	r4, 8475a <sd_mmc_usb_write_10+0x56>
			// USB -> RAM
			if (!udi_msc_trans_block(false,
   8473a:	f014 0f01 	tst.w	r4, #1
   8473e:	bf0c      	ite	eq
   84740:	4641      	moveq	r1, r8
   84742:	4639      	movne	r1, r7
   84744:	f04f 0000 	mov.w	r0, #0
   84748:	f44f 7200 	mov.w	r2, #512	; 0x200
   8474c:	4603      	mov	r3, r0
   8474e:	f646 2c9d 	movw	ip, #27293	; 0x6a9d
   84752:	f2c0 0c08 	movt	ip, #8
   84756:	47e0      	blx	ip
   84758:	b330      	cbz	r0, 847a8 <sd_mmc_usb_write_10+0xa4>
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
			}
		}
		if (!b_first_step) { // Skip first step
   8475a:	b92d      	cbnz	r5, 84768 <sd_mmc_usb_write_10+0x64>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks()) {
   8475c:	f241 30a1 	movw	r0, #5025	; 0x13a1
   84760:	f2c0 0008 	movt	r0, #8
   84764:	4780      	blx	r0
   84766:	bb18      	cbnz	r0, 847b0 <sd_mmc_usb_write_10+0xac>
   84768:	f104 34ff 	add.w	r4, r4, #4294967295
   8476c:	b2a4      	uxth	r4, r4
   8476e:	f04f 0500 	mov.w	r5, #0
   84772:	e00d      	b.n	84790 <sd_mmc_usb_write_10+0x8c>
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
	bool b_first_step = true;
   84774:	f04f 0501 	mov.w	r5, #1
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   84778:	f241 3669 	movw	r6, #4969	; 0x1369
   8477c:	f2c0 0608 	movt	r6, #8
   84780:	f241 7898 	movw	r8, #6040	; 0x1798
   84784:	f2c2 0807 	movt	r8, #8199	; 0x2007
   84788:	f641 1798 	movw	r7, #6552	; 0x1998
   8478c:	f2c2 0707 	movt	r7, #8199	; 0x2007
	default:
		return CTRL_FAIL;
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
   84790:	f64f 72ff 	movw	r2, #65535	; 0xffff
   84794:	4294      	cmp	r4, r2
   84796:	d1c5      	bne.n	84724 <sd_mmc_usb_write_10+0x20>
			}
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
   84798:	f04f 0000 	mov.w	r0, #0
   8479c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
   847a0:	f04f 0001 	mov.w	r0, #1
   847a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!udi_msc_trans_block(false,
					((nb_step % 2) == 0) ?
					sector_buf_1 : sector_buf_0,
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
   847a8:	f04f 0001 	mov.w	r0, #1
   847ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
		}
		if (!b_first_step) { // Skip first step
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks()) {
				return CTRL_FAIL;
   847b0:	f04f 0001 	mov.w	r0, #1
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
}
   847b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000847b8 <sd_mmc_usb_write_10_0>:

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
   847b8:	b508      	push	{r3, lr}
   847ba:	4603      	mov	r3, r0
   847bc:	460a      	mov	r2, r1
	return sd_mmc_usb_write_10(0, addr, nb_sector);
   847be:	f04f 0000 	mov.w	r0, #0
   847c2:	4619      	mov	r1, r3
   847c4:	f244 7305 	movw	r3, #18181	; 0x4705
   847c8:	f2c0 0308 	movt	r3, #8
   847cc:	4798      	blx	r3
}
   847ce:	bd08      	pop	{r3, pc}

000847d0 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
   847d0:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
   847d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   847d6:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
   847d8:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
   847da:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
   847dc:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
   847de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
   847e0:	f04f 0680 	mov.w	r6, #128	; 0x80
   847e4:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
   847e6:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
   847e8:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
   847ea:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
   847ec:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
   847ee:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
   847f0:	f04f 0000 	mov.w	r0, #0
   847f4:	6518      	str	r0, [r3, #80]	; 0x50
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
   847f6:	f04f 0105 	mov.w	r1, #5
   847fa:	6019      	str	r1, [r3, #0]
}
   847fc:	bc70      	pop	{r4, r5, r6}
   847fe:	4770      	bx	lr

00084800 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
   84800:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
   84802:	f001 033f 	and.w	r3, r1, #63	; 0x3f
   84806:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
   84808:	f411 7f80 	tst.w	r1, #256	; 0x100
   8480c:	d00c      	beq.n	84828 <hsmci_send_cmd_execute+0x28>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
   8480e:	f411 6f00 	tst.w	r1, #2048	; 0x800
   84812:	d002      	beq.n	8481a <hsmci_send_cmd_execute+0x1a>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
   84814:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
   84818:	e006      	b.n	84828 <hsmci_send_cmd_execute+0x28>
		} else if (cmd & SDMMC_RESP_BUSY) {
   8481a:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
   8481e:	bf14      	ite	ne
   84820:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
   84824:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
   84828:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
   8482c:	bf18      	it	ne
   8482e:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
   84832:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84836:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
   84838:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
   8483a:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
   8483c:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
   84840:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
   84842:	b152      	cbz	r2, 8485a <hsmci_send_cmd_execute+0x5a>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
   84844:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
   84848:	d012      	beq.n	84870 <hsmci_send_cmd_execute+0x70>
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
   8484a:	f244 72d1 	movw	r2, #18385	; 0x47d1
   8484e:	f2c0 0208 	movt	r2, #8
   84852:	4790      	blx	r2
				return false;
   84854:	f04f 0000 	mov.w	r0, #0
   84858:	bd08      	pop	{r3, pc}
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
   8485a:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
   8485e:	d007      	beq.n	84870 <hsmci_send_cmd_execute+0x70>
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
   84860:	f244 71d1 	movw	r1, #18385	; 0x47d1
   84864:	f2c0 0108 	movt	r1, #8
   84868:	4788      	blx	r1
				return false;
   8486a:	f04f 0000 	mov.w	r0, #0
   8486e:	bd08      	pop	{r3, pc}
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
   84870:	f013 0f01 	tst.w	r3, #1
   84874:	d0e4      	beq.n	84840 <hsmci_send_cmd_execute+0x40>

	if (cmd & SDMMC_RESP_BUSY) {
   84876:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   8487a:	d119      	bne.n	848b0 <hsmci_send_cmd_execute+0xb0>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
   8487c:	f04f 0001 	mov.w	r0, #1
   84880:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 1000000;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
   84882:	6c08      	ldr	r0, [r1, #64]	; 0x40
   84884:	f103 33ff 	add.w	r3, r3, #4294967295
		if (busy_wait-- == 0) {
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
			return false;
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
   84888:	f000 0230 	and.w	r2, r0, #48	; 0x30
   8488c:	2a20      	cmp	r2, #32
   8488e:	d119      	bne.n	848c4 <hsmci_send_cmd_execute+0xc4>
   84890:	e00b      	b.n	848aa <hsmci_send_cmd_execute+0xaa>

	do {
		sr = HSMCI->HSMCI_SR;
		if (busy_wait-- == 0) {
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
   84892:	f244 71d1 	movw	r1, #18385	; 0x47d1
   84896:	f2c0 0108 	movt	r1, #8
   8489a:	4788      	blx	r1
			return false;
   8489c:	f04f 0000 	mov.w	r0, #0
   848a0:	bd08      	pop	{r3, pc}
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
   848a2:	f000 0230 	and.w	r2, r0, #48	; 0x30
   848a6:	2a20      	cmp	r2, #32
   848a8:	d1eb      	bne.n	84882 <hsmci_send_cmd_execute+0x82>
	return true;
   848aa:	f04f 0001 	mov.w	r0, #1
   848ae:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 1000000;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
   848b0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   848b4:	6c00      	ldr	r0, [r0, #64]	; 0x40
   848b6:	f244 2340 	movw	r3, #16960	; 0x4240
   848ba:	f2c0 030f 	movt	r3, #15
   848be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   848c2:	e7ee      	b.n	848a2 <hsmci_send_cmd_execute+0xa2>
   848c4:	6c08      	ldr	r0, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
   848c6:	3b01      	subs	r3, #1
   848c8:	d1eb      	bne.n	848a2 <hsmci_send_cmd_execute+0xa2>
   848ca:	e7e2      	b.n	84892 <hsmci_send_cmd_execute+0x92>

000848cc <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
   848cc:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
   848ce:	f04f 0015 	mov.w	r0, #21
   848d2:	f647 2455 	movw	r4, #31317	; 0x7a55
   848d6:	f2c0 0408 	movt	r4, #8
   848da:	47a0      	blx	r4
#ifdef HSMCI_SR_DMADONE
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_DMAC);
   848dc:	f04f 0027 	mov.w	r0, #39	; 0x27
   848e0:	47a0      	blx	r4
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
   848e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   848e6:	f04f 0272 	mov.w	r2, #114	; 0x72
   848ea:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
   848ec:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
   848ee:	f04f 0011 	mov.w	r0, #17
   848f2:	6558      	str	r0, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
   848f4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
   848f8:	6059      	str	r1, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
   848fa:	f04f 0205 	mov.w	r2, #5
   848fe:	601a      	str	r2, [r3, #0]
   84900:	bd10      	pop	{r4, pc}
   84902:	bf00      	nop

00084904 <hsmci_get_bus_width>:
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
   84904:	2800      	cmp	r0, #0
   84906:	bf0c      	ite	eq
   84908:	2004      	moveq	r0, #4
   8490a:	2000      	movne	r0, #0
   8490c:	4770      	bx	lr
   8490e:	bf00      	nop

00084910 <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
   84910:	f04f 0001 	mov.w	r0, #1
   84914:	4770      	bx	lr
   84916:	bf00      	nop

00084918 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
   84918:	b133      	cbz	r3, 84928 <hsmci_select_device+0x10>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
   8491a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8491e:	6d58      	ldr	r0, [r3, #84]	; 0x54
   84920:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   84924:	6558      	str	r0, [r3, #84]	; 0x54
   84926:	e005      	b.n	84934 <hsmci_select_device+0x1c>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
   84928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8492c:	6d58      	ldr	r0, [r3, #84]	; 0x54
   8492e:	f420 7080 	bic.w	r0, r0, #256	; 0x100
   84932:	6558      	str	r0, [r3, #84]	; 0x54
{
	uint32_t clkdiv;
	uint32_t rest;

	// Speed = MCK clock / (2 * (CLKDIV + 1))
	if (speed > 0) {
   84934:	b181      	cbz	r1, 84958 <hsmci_select_device+0x40>
		clkdiv = mck / (2 * speed);
   84936:	ea4f 0141 	mov.w	r1, r1, lsl #1
   8493a:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
   8493e:	f2c0 5301 	movt	r3, #1281	; 0x501
   84942:	fbb3 f0f1 	udiv	r0, r3, r1
		rest = mck % (2 * speed);
   84946:	fb01 3110 	mls	r1, r1, r0, r3
		if (rest > 0) {
   8494a:	b109      	cbz	r1, 84950 <hsmci_select_device+0x38>
			// Ensure that the card speed not be higher than expected.
			clkdiv++;
   8494c:	f100 0001 	add.w	r0, r0, #1
		}
		if (clkdiv > 0) {
   84950:	b120      	cbz	r0, 8495c <hsmci_select_device+0x44>
			clkdiv -= 1;
   84952:	f100 30ff 	add.w	r0, r0, #4294967295
   84956:	e001      	b.n	8495c <hsmci_select_device+0x44>
		}
	} else {
		clkdiv = 0;
   84958:	f04f 0000 	mov.w	r0, #0
	}
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
   8495c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84960:	6859      	ldr	r1, [r3, #4]
   84962:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   84966:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
   84968:	6859      	ldr	r1, [r3, #4]
   8496a:	b2c0      	uxtb	r0, r0
   8496c:	4308      	orrs	r0, r1
   8496e:	6058      	str	r0, [r3, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
   84970:	2a04      	cmp	r2, #4
   84972:	d004      	beq.n	8497e <hsmci_select_device+0x66>
}

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
   84974:	2a08      	cmp	r2, #8
   84976:	bf0c      	ite	eq
   84978:	22c0      	moveq	r2, #192	; 0xc0
   8497a:	2200      	movne	r2, #0
   8497c:	e001      	b.n	84982 <hsmci_select_device+0x6a>
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
		break;

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
   8497e:	f04f 0280 	mov.w	r2, #128	; 0x80
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
   84982:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84986:	60da      	str	r2, [r3, #12]
   84988:	4770      	bx	lr
   8498a:	bf00      	nop

0008498c <hsmci_deselect_device>:
}

void hsmci_deselect_device(uint8_t slot)
{
   8498c:	4770      	bx	lr
   8498e:	bf00      	nop

00084990 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
   84990:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84994:	685a      	ldr	r2, [r3, #4]
   84996:	f422 5060 	bic.w	r0, r2, #14336	; 0x3800
   8499a:	6058      	str	r0, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
   8499c:	f04f 0100 	mov.w	r1, #0
   849a0:	6119      	str	r1, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
   849a2:	f44f 6210 	mov.w	r2, #2304	; 0x900
   849a6:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
   849a8:	4618      	mov	r0, r3
   849aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
   849ac:	f013 0f01 	tst.w	r3, #1
   849b0:	d0fb      	beq.n	849aa <hsmci_send_clock+0x1a>
}
   849b2:	4770      	bx	lr

000849b4 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   849b4:	b510      	push	{r4, lr}
   849b6:	4604      	mov	r4, r0
   849b8:	460a      	mov	r2, r1
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
   849ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   849be:	6859      	ldr	r1, [r3, #4]
   849c0:	f421 5060 	bic.w	r0, r1, #14336	; 0x3800
   849c4:	6058      	str	r0, [r3, #4]
#ifdef HSMCI_SR_DMADONE
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
   849c6:	f04f 0000 	mov.w	r0, #0
   849ca:	6518      	str	r0, [r3, #80]	; 0x50
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
	HSMCI->HSMCI_BLKR = 0;
   849cc:	6198      	str	r0, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
   849ce:	4621      	mov	r1, r4
   849d0:	f644 0301 	movw	r3, #18433	; 0x4801
   849d4:	f2c0 0308 	movt	r3, #8
   849d8:	4798      	blx	r3
}
   849da:	bd10      	pop	{r4, pc}

000849dc <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
   849dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   849e0:	6a18      	ldr	r0, [r3, #32]
}
   849e2:	4770      	bx	lr

000849e4 <hsmci_get_response_128>:
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   849e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   849e8:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   849ea:	ea4f 6112 	mov.w	r1, r2, lsr #24
   849ee:	7001      	strb	r1, [r0, #0]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   849f0:	ea4f 4112 	mov.w	r1, r2, lsr #16
   849f4:	7041      	strb	r1, [r0, #1]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   849f6:	ea4f 2112 	mov.w	r1, r2, lsr #8
   849fa:	7081      	strb	r1, [r0, #2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   849fc:	70c2      	strb	r2, [r0, #3]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   849fe:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   84a00:	ea4f 6112 	mov.w	r1, r2, lsr #24
   84a04:	7101      	strb	r1, [r0, #4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   84a06:	ea4f 4112 	mov.w	r1, r2, lsr #16
   84a0a:	7141      	strb	r1, [r0, #5]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   84a0c:	ea4f 2112 	mov.w	r1, r2, lsr #8
   84a10:	7181      	strb	r1, [r0, #6]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   84a12:	71c2      	strb	r2, [r0, #7]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   84a14:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   84a16:	ea4f 6112 	mov.w	r1, r2, lsr #24
   84a1a:	7201      	strb	r1, [r0, #8]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   84a1c:	ea4f 4112 	mov.w	r1, r2, lsr #16
   84a20:	7241      	strb	r1, [r0, #9]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   84a22:	ea4f 2112 	mov.w	r1, r2, lsr #8
   84a26:	7281      	strb	r1, [r0, #10]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   84a28:	72c2      	strb	r2, [r0, #11]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   84a2a:	6a1b      	ldr	r3, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   84a2c:	ea4f 6213 	mov.w	r2, r3, lsr #24
   84a30:	7302      	strb	r2, [r0, #12]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   84a32:	ea4f 4113 	mov.w	r1, r3, lsr #16
   84a36:	7341      	strb	r1, [r0, #13]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   84a38:	ea4f 2213 	mov.w	r2, r3, lsr #8
   84a3c:	7382      	strb	r2, [r0, #14]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   84a3e:	73c3      	strb	r3, [r0, #15]
   84a40:	4770      	bx	lr
   84a42:	bf00      	nop

00084a44 <hsmci_adtc_start>:
		response++;
	}
}

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
   84a44:	b570      	push	{r4, r5, r6, lr}
   84a46:	4604      	mov	r4, r0
   84a48:	460d      	mov	r5, r1
	uint32_t cmdr;

#ifdef HSMCI_SR_DMADONE
	if (access_block) {
   84a4a:	f89d 1010 	ldrb.w	r1, [sp, #16]
   84a4e:	b129      	cbz	r1, 84a5c <hsmci_adtc_start+0x18>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
   84a50:	f44f 7080 	mov.w	r0, #256	; 0x100
   84a54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   84a58:	6508      	str	r0, [r1, #80]	; 0x50
   84a5a:	e004      	b.n	84a66 <hsmci_adtc_start+0x22>
	} else {
		// Disable DMA for HSMCI
		HSMCI->HSMCI_DMA = 0;
   84a5c:	f04f 0000 	mov.w	r0, #0
   84a60:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   84a64:	6530      	str	r0, [r6, #80]	; 0x50
#endif

	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
   84a66:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   84a6a:	6870      	ldr	r0, [r6, #4]
   84a6c:	f440 51c0 	orr.w	r1, r0, #6144	; 0x1800
   84a70:	6071      	str	r1, [r6, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
   84a72:	f012 0f03 	tst.w	r2, #3
   84a76:	d004      	beq.n	84a82 <hsmci_adtc_start+0x3e>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
   84a78:	6870      	ldr	r0, [r6, #4]
   84a7a:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   84a7e:	6071      	str	r1, [r6, #4]
   84a80:	e005      	b.n	84a8e <hsmci_adtc_start+0x4a>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
   84a82:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   84a86:	6870      	ldr	r0, [r6, #4]
   84a88:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
   84a8c:	6071      	str	r1, [r6, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
   84a8e:	f404 4600 	and.w	r6, r4, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
   84a92:	2e00      	cmp	r6, #0
   84a94:	bf0c      	ite	eq
   84a96:	f44f 20a0 	moveq.w	r0, #327680	; 0x50000
   84a9a:	f44f 3080 	movne.w	r0, #65536	; 0x10000
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
   84a9e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   84aa2:	d009      	beq.n	84ab8 <hsmci_adtc_start+0x74>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
   84aa4:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
   84aa8:	ea4f 56c2 	mov.w	r6, r2, lsl #23
   84aac:	ea4f 51d6 	mov.w	r1, r6, lsr #23
   84ab0:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   84ab4:	61b1      	str	r1, [r6, #24]
   84ab6:	e018      	b.n	84aea <hsmci_adtc_start+0xa6>
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
   84ab8:	ea43 4602 	orr.w	r6, r3, r2, lsl #16
   84abc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   84ac0:	618e      	str	r6, [r1, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
   84ac2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   84ac6:	d002      	beq.n	84ace <hsmci_adtc_start+0x8a>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
   84ac8:	f440 1020 	orr.w	r0, r0, #2621440	; 0x280000
   84acc:	e00d      	b.n	84aea <hsmci_adtc_start+0xa6>
		} else if (cmd & SDMMC_CMD_STREAM) {
   84ace:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   84ad2:	d002      	beq.n	84ada <hsmci_adtc_start+0x96>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
   84ad4:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   84ad8:	e007      	b.n	84aea <hsmci_adtc_start+0xa6>
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
   84ada:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   84ade:	d104      	bne.n	84aea <hsmci_adtc_start+0xa6>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
   84ae0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
   84ae4:	bf18      	it	ne
   84ae6:	f440 2000 	orrne.w	r0, r0, #524288	; 0x80000
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
   84aea:	f640 5108 	movw	r1, #3336	; 0xd08
   84aee:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84af2:	f04f 0600 	mov.w	r6, #0
   84af6:	600e      	str	r6, [r1, #0]
	hsmci_block_size = block_size;
   84af8:	f640 5104 	movw	r1, #3332	; 0xd04
   84afc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84b00:	800a      	strh	r2, [r1, #0]
	hsmci_nb_block = nb_block;
   84b02:	f640 5206 	movw	r2, #3334	; 0xd06
   84b06:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84b0a:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
   84b0c:	4621      	mov	r1, r4
   84b0e:	462a      	mov	r2, r5
   84b10:	f644 0301 	movw	r3, #18433	; 0x4801
   84b14:	f2c0 0308 	movt	r3, #8
   84b18:	4798      	blx	r3
}
   84b1a:	bd70      	pop	{r4, r5, r6, pc}

00084b1c <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
   84b1c:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
   84b1e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84b22:	f04f 0200 	mov.w	r2, #0
   84b26:	f2cc 0260 	movt	r2, #49248	; 0xc060

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
   84b2a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84b2c:	4213      	tst	r3, r2
   84b2e:	d007      	beq.n	84b40 <hsmci_read_word+0x24>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   84b30:	f244 70d1 	movw	r0, #18385	; 0x47d1
   84b34:	f2c0 0008 	movt	r0, #8
   84b38:	4780      	blx	r0
			return false;
   84b3a:	f04f 0000 	mov.w	r0, #0
   84b3e:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_RXRDY));
   84b40:	f013 0f02 	tst.w	r3, #2
   84b44:	d0f1      	beq.n	84b2a <hsmci_read_word+0xe>

	// Read data
	*value = HSMCI->HSMCI_RDR;
   84b46:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   84b4a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   84b4c:	6002      	str	r2, [r0, #0]
	hsmci_transfert_pos += 4;
   84b4e:	f640 5008 	movw	r0, #3336	; 0xd08
   84b52:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84b56:	6803      	ldr	r3, [r0, #0]
   84b58:	f103 0304 	add.w	r3, r3, #4
   84b5c:	6003      	str	r3, [r0, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   84b5e:	f640 5106 	movw	r1, #3334	; 0xd06
   84b62:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84b66:	880a      	ldrh	r2, [r1, #0]
   84b68:	f640 5004 	movw	r0, #3332	; 0xd04
   84b6c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84b70:	8801      	ldrh	r1, [r0, #0]
   84b72:	fb01 f202 	mul.w	r2, r1, r2
   84b76:	4293      	cmp	r3, r2
   84b78:	d316      	bcc.n	84ba8 <hsmci_read_word+0x8c>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   84b7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84b7e:	f04f 0200 	mov.w	r2, #0
   84b82:	f2cc 0260 	movt	r2, #49248	; 0xc060
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   84b86:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84b88:	4213      	tst	r3, r2
   84b8a:	d007      	beq.n	84b9c <hsmci_read_word+0x80>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   84b8c:	f244 71d1 	movw	r1, #18385	; 0x47d1
   84b90:	f2c0 0108 	movt	r1, #8
   84b94:	4788      	blx	r1
			return false;
   84b96:	f04f 0000 	mov.w	r0, #0
   84b9a:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
   84b9c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   84ba0:	d0f1      	beq.n	84b86 <hsmci_read_word+0x6a>
	return true;
   84ba2:	f04f 0001 	mov.w	r0, #1
   84ba6:	bd08      	pop	{r3, pc}

	// Read data
	*value = HSMCI->HSMCI_RDR;
	hsmci_transfert_pos += 4;
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
		return true;
   84ba8:	f04f 0001 	mov.w	r0, #1
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
   84bac:	bd08      	pop	{r3, pc}
   84bae:	bf00      	nop

00084bb0 <hsmci_start_read_blocks>:
	return true;
}

#ifdef HSMCI_SR_DMADONE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
   84bb0:	b570      	push	{r4, r5, r6, lr}
   84bb2:	b086      	sub	sp, #24
   84bb4:	4604      	mov	r4, r0
	uint32_t cfg, nb_data;
	dma_transfer_descriptor_t desc;
	bool transfert_byte;

	nb_data = nb_block * hsmci_block_size;
   84bb6:	f640 5304 	movw	r3, #3332	; 0xd04
   84bba:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84bbe:	881e      	ldrh	r6, [r3, #0]
   84bc0:	fb06 f601 	mul.w	r6, r6, r1
	transfert_byte = ((HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) || (((uint32_t)dest & 0x3) > 0)) ? 1 : 0;
   84bc4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   84bc8:	6841      	ldr	r1, [r0, #4]
   84bca:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   84bce:	d12f      	bne.n	84c30 <hsmci_start_read_blocks+0x80>
	 * - Hardware Selection for the Source
	 * - Source with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   84bd0:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84bd4:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84bd8:	4628      	mov	r0, r5
   84bda:	f245 229d 	movw	r2, #21149	; 0x529d
   84bde:	f2c0 0208 	movt	r2, #8
   84be2:	4790      	blx	r2
	dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84be4:	4628      	mov	r0, r5
   84be6:	f04f 0100 	mov.w	r1, #0
   84bea:	f245 23b1 	movw	r3, #21169	; 0x52b1
   84bee:	f2c0 0308 	movt	r3, #8
   84bf2:	4798      	blx	r3
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_SRC_H2SEL |
			DMAC_CFG_SRC_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   84bf4:	4628      	mov	r0, r5
   84bf6:	f04f 0100 	mov.w	r1, #0
   84bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
   84bfe:	f2c0 1201 	movt	r2, #257	; 0x101
   84c02:	f245 25f9 	movw	r5, #21241	; 0x52f9
   84c06:	f2c0 0508 	movt	r5, #8
   84c0a:	47a8      	blx	r5

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
   84c0c:	f04f 0030 	mov.w	r0, #48	; 0x30
   84c10:	f2c4 0000 	movt	r0, #16384	; 0x4000
   84c14:	9001      	str	r0, [sp, #4]
	desc.ul_destination_addr = (uint32_t)dest;
   84c16:	9402      	str	r4, [sp, #8]
	if (transfert_byte) {
   84c18:	f014 0f03 	tst.w	r4, #3
   84c1c:	d002      	beq.n	84c24 <hsmci_start_read_blocks+0x74>
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
   84c1e:	b2b4      	uxth	r4, r6

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
	desc.ul_destination_addr = (uint32_t)dest;
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
   84c20:	9403      	str	r4, [sp, #12]
   84c22:	e02a      	b.n	84c7a <hsmci_start_read_blocks+0xca>
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   84c24:	f3c6 048f 	ubfx	r4, r6, #2, #16
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
   84c28:	f044 5108 	orr.w	r1, r4, #570425344	; 0x22000000
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   84c2c:	9103      	str	r1, [sp, #12]
   84c2e:	e024      	b.n	84c7a <hsmci_start_read_blocks+0xca>
	 * - Hardware Selection for the Source
	 * - Source with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   84c30:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84c34:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84c38:	4628      	mov	r0, r5
   84c3a:	f245 229d 	movw	r2, #21149	; 0x529d
   84c3e:	f2c0 0208 	movt	r2, #8
   84c42:	4790      	blx	r2
	dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84c44:	4628      	mov	r0, r5
   84c46:	f04f 0100 	mov.w	r1, #0
   84c4a:	f245 23b1 	movw	r3, #21169	; 0x52b1
   84c4e:	f2c0 0308 	movt	r3, #8
   84c52:	4798      	blx	r3
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_SRC_H2SEL |
			DMAC_CFG_SRC_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   84c54:	4628      	mov	r0, r5
   84c56:	f04f 0100 	mov.w	r1, #0
   84c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
   84c5e:	f2c0 1201 	movt	r2, #257	; 0x101
   84c62:	f245 25f9 	movw	r5, #21241	; 0x52f9
   84c66:	f2c0 0508 	movt	r5, #8
   84c6a:	47a8      	blx	r5

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
   84c6c:	f04f 0030 	mov.w	r0, #48	; 0x30
   84c70:	f2c4 0000 	movt	r0, #16384	; 0x4000
   84c74:	9001      	str	r0, [sp, #4]
	desc.ul_destination_addr = (uint32_t)dest;
   84c76:	9402      	str	r4, [sp, #8]
   84c78:	e7d1      	b.n	84c1e <hsmci_start_read_blocks+0x6e>
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
	}
	desc.ul_ctrlB = DMAC_CTRLB_SRC_DSCR_FETCH_DISABLE
   84c7a:	f04f 0100 	mov.w	r1, #0
   84c7e:	f2c4 2151 	movt	r1, #16977	; 0x4251
   84c82:	9104      	str	r1, [sp, #16]
			| DMAC_CTRLB_DST_DSCR_FETCH_DISABLE
			| DMAC_CTRLB_FC_PER2MEM_DMA_FC
			| DMAC_CTRLB_SRC_INCR_FIXED
			| DMAC_CTRLB_DST_INCR_INCREMENTING
			| DMAC_CTRLB_IEN;
	desc.ul_descriptor_addr = (uint32_t)NULL;
   84c84:	f04f 0400 	mov.w	r4, #0
   84c88:	9405      	str	r4, [sp, #20]
	dmac_channel_single_buf_transfer_init(DMAC, CONF_HSMCI_DMA_CHANNEL,
   84c8a:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84c8e:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84c92:	4628      	mov	r0, r5
   84c94:	4621      	mov	r1, r4
   84c96:	aa01      	add	r2, sp, #4
   84c98:	f245 3305 	movw	r3, #21253	; 0x5305
   84c9c:	f2c0 0308 	movt	r3, #8
   84ca0:	4798      	blx	r3
			&desc);

	// Start DMA transfer
	dmac_channel_enable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84ca2:	4628      	mov	r0, r5
   84ca4:	4621      	mov	r1, r4
   84ca6:	f245 22a5 	movw	r2, #21157	; 0x52a5
   84caa:	f2c0 0208 	movt	r2, #8
   84cae:	4790      	blx	r2
	hsmci_transfert_pos += nb_data;
   84cb0:	f640 5008 	movw	r0, #3336	; 0xd08
   84cb4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84cb8:	6801      	ldr	r1, [r0, #0]
   84cba:	1876      	adds	r6, r6, r1
   84cbc:	6006      	str	r6, [r0, #0]
	return true;
}
   84cbe:	f04f 0001 	mov.w	r0, #1
   84cc2:	b006      	add	sp, #24
   84cc4:	bd70      	pop	{r4, r5, r6, pc}
   84cc6:	bf00      	nop

00084cc8 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
   84cc8:	b510      	push	{r4, lr}
			hsmci_reset();
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   84cca:	f640 5306 	movw	r3, #3334	; 0xd06
   84cce:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84cd2:	8818      	ldrh	r0, [r3, #0]
   84cd4:	f640 5204 	movw	r2, #3332	; 0xd04
   84cd8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84cdc:	8814      	ldrh	r4, [r2, #0]
   84cde:	fb04 f400 	mul.w	r4, r4, r0
   84ce2:	f640 5108 	movw	r1, #3336	; 0xd08
   84ce6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84cea:	6808      	ldr	r0, [r1, #0]
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   84cec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84cf0:	f04f 0200 	mov.w	r2, #0
   84cf4:	f2cc 0260 	movt	r2, #49248	; 0xc060
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   84cf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84cfa:	4213      	tst	r3, r2
   84cfc:	d012      	beq.n	84d24 <hsmci_wait_end_of_read_blocks+0x5c>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   84cfe:	f244 70d1 	movw	r0, #18385	; 0x47d1
   84d02:	f2c0 0008 	movt	r0, #8
   84d06:	4780      	blx	r0
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84d08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   84d0c:	f2c4 000c 	movt	r0, #16396	; 0x400c
   84d10:	f04f 0100 	mov.w	r1, #0
   84d14:	f245 22b1 	movw	r2, #21169	; 0x52b1
   84d18:	f2c0 0208 	movt	r2, #8
   84d1c:	4790      	blx	r2
			return false;
   84d1e:	f04f 0000 	mov.w	r0, #0
   84d22:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   84d24:	4284      	cmp	r4, r0
   84d26:	d902      	bls.n	84d2e <hsmci_wait_end_of_read_blocks+0x66>
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
   84d28:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   84d2c:	d105      	bne.n	84d3a <hsmci_wait_end_of_read_blocks+0x72>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
   84d2e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   84d32:	d0e1      	beq.n	84cf8 <hsmci_wait_end_of_read_blocks+0x30>
	return true;
   84d34:	f04f 0001 	mov.w	r0, #1
   84d38:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
				return true;
   84d3a:	f04f 0001 	mov.w	r0, #1
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
   84d3e:	bd10      	pop	{r4, pc}

00084d40 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
   84d40:	b570      	push	{r4, r5, r6, lr}
   84d42:	b086      	sub	sp, #24
   84d44:	4604      	mov	r4, r0
	bool transfert_byte;
	uint32_t cfg, nb_data;
	dma_transfer_descriptor_t desc;

	nb_data = nb_block * hsmci_block_size;
   84d46:	f640 5304 	movw	r3, #3332	; 0xd04
   84d4a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84d4e:	881e      	ldrh	r6, [r3, #0]
   84d50:	fb06 f601 	mul.w	r6, r6, r1
	transfert_byte = ((HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) || (((uint32_t)src & 0x3) > 0)) ? 1 : 0;
   84d54:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   84d58:	6841      	ldr	r1, [r0, #4]
   84d5a:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   84d5e:	d127      	bne.n	84db0 <hsmci_start_write_blocks+0x70>
	 * - Hardware Selection for the Destination
	 * - Destination with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   84d60:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84d64:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84d68:	4628      	mov	r0, r5
   84d6a:	f245 229d 	movw	r2, #21149	; 0x529d
   84d6e:	f2c0 0208 	movt	r2, #8
   84d72:	4790      	blx	r2
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_DST_H2SEL |
			DMAC_CFG_DST_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   84d74:	4628      	mov	r0, r5
   84d76:	f04f 0100 	mov.w	r1, #0
   84d7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   84d7e:	f2c0 1201 	movt	r2, #257	; 0x101
   84d82:	f245 23f9 	movw	r3, #21241	; 0x52f9
   84d86:	f2c0 0308 	movt	r3, #8
   84d8a:	4798      	blx	r3

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
   84d8c:	9401      	str	r4, [sp, #4]
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
   84d8e:	f04f 0034 	mov.w	r0, #52	; 0x34
   84d92:	f2c4 0000 	movt	r0, #16384	; 0x4000
   84d96:	9002      	str	r0, [sp, #8]
	if (transfert_byte) {
   84d98:	f014 0f03 	tst.w	r4, #3
   84d9c:	d002      	beq.n	84da4 <hsmci_start_write_blocks+0x64>
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
   84d9e:	b2b4      	uxth	r4, r6

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
   84da0:	9403      	str	r4, [sp, #12]
   84da2:	e022      	b.n	84dea <hsmci_start_write_blocks+0xaa>
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   84da4:	f3c6 048f 	ubfx	r4, r6, #2, #16
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
   84da8:	f044 5108 	orr.w	r1, r4, #570425344	; 0x22000000
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   84dac:	9103      	str	r1, [sp, #12]
   84dae:	e01c      	b.n	84dea <hsmci_start_write_blocks+0xaa>
	 * - Hardware Selection for the Destination
	 * - Destination with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   84db0:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84db4:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84db8:	4628      	mov	r0, r5
   84dba:	f245 229d 	movw	r2, #21149	; 0x529d
   84dbe:	f2c0 0208 	movt	r2, #8
   84dc2:	4790      	blx	r2
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_DST_H2SEL |
			DMAC_CFG_DST_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   84dc4:	4628      	mov	r0, r5
   84dc6:	f04f 0100 	mov.w	r1, #0
   84dca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   84dce:	f2c0 1201 	movt	r2, #257	; 0x101
   84dd2:	f245 23f9 	movw	r3, #21241	; 0x52f9
   84dd6:	f2c0 0308 	movt	r3, #8
   84dda:	4798      	blx	r3

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
   84ddc:	9401      	str	r4, [sp, #4]
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
   84dde:	f04f 0034 	mov.w	r0, #52	; 0x34
   84de2:	f2c4 0000 	movt	r0, #16384	; 0x4000
   84de6:	9002      	str	r0, [sp, #8]
   84de8:	e7d9      	b.n	84d9e <hsmci_start_write_blocks+0x5e>
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
	}
	desc.ul_ctrlB = DMAC_CTRLB_SRC_DSCR_FETCH_DISABLE
   84dea:	f04f 0100 	mov.w	r1, #0
   84dee:	f2c6 0131 	movt	r1, #24625	; 0x6031
   84df2:	9104      	str	r1, [sp, #16]
			| DMAC_CTRLB_DST_DSCR_FETCH_DISABLE
			| DMAC_CTRLB_FC_MEM2PER_DMA_FC
			| DMAC_CTRLB_SRC_INCR_INCREMENTING
			| DMAC_CTRLB_DST_INCR_FIXED
			| DMAC_CTRLB_IEN;
	desc.ul_descriptor_addr = (uint32_t)NULL;
   84df4:	f04f 0400 	mov.w	r4, #0
   84df8:	9405      	str	r4, [sp, #20]
	dmac_channel_single_buf_transfer_init(DMAC, CONF_HSMCI_DMA_CHANNEL,
   84dfa:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84dfe:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84e02:	4628      	mov	r0, r5
   84e04:	4621      	mov	r1, r4
   84e06:	aa01      	add	r2, sp, #4
   84e08:	f245 3305 	movw	r3, #21253	; 0x5305
   84e0c:	f2c0 0308 	movt	r3, #8
   84e10:	4798      	blx	r3
			&desc);

	// Start DMA transfer
	dmac_channel_enable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84e12:	4628      	mov	r0, r5
   84e14:	4621      	mov	r1, r4
   84e16:	f245 22a5 	movw	r2, #21157	; 0x52a5
   84e1a:	f2c0 0208 	movt	r2, #8
   84e1e:	4790      	blx	r2
	hsmci_transfert_pos += nb_data;
   84e20:	f640 5008 	movw	r0, #3336	; 0xd08
   84e24:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84e28:	6801      	ldr	r1, [r0, #0]
   84e2a:	1876      	adds	r6, r6, r1
   84e2c:	6006      	str	r6, [r0, #0]
	return true;
}
   84e2e:	f04f 0001 	mov.w	r0, #1
   84e32:	b006      	add	sp, #24
   84e34:	bd70      	pop	{r4, r5, r6, pc}
   84e36:	bf00      	nop

00084e38 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
   84e38:	b510      	push	{r4, lr}
			hsmci_reset();
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   84e3a:	f640 5306 	movw	r3, #3334	; 0xd06
   84e3e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84e42:	8818      	ldrh	r0, [r3, #0]
   84e44:	f640 5204 	movw	r2, #3332	; 0xd04
   84e48:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84e4c:	8814      	ldrh	r4, [r2, #0]
   84e4e:	fb04 f400 	mul.w	r4, r4, r0
   84e52:	f640 5108 	movw	r1, #3336	; 0xd08
   84e56:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84e5a:	6808      	ldr	r0, [r1, #0]
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
   84e5c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84e60:	f04f 0200 	mov.w	r2, #0
   84e64:	f2cc 0260 	movt	r2, #49248	; 0xc060
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
   84e68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84e6a:	4213      	tst	r3, r2
   84e6c:	d012      	beq.n	84e94 <hsmci_wait_end_of_write_blocks+0x5c>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   84e6e:	f244 70d1 	movw	r0, #18385	; 0x47d1
   84e72:	f2c0 0008 	movt	r0, #8
   84e76:	4780      	blx	r0
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84e78:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   84e7c:	f2c4 000c 	movt	r0, #16396	; 0x400c
   84e80:	f04f 0100 	mov.w	r1, #0
   84e84:	f245 22b1 	movw	r2, #21169	; 0x52b1
   84e88:	f2c0 0208 	movt	r2, #8
   84e8c:	4790      	blx	r2
			return false;
   84e8e:	f04f 0000 	mov.w	r0, #0
   84e92:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   84e94:	4284      	cmp	r4, r0
   84e96:	d902      	bls.n	84e9e <hsmci_wait_end_of_write_blocks+0x66>
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
   84e98:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   84e9c:	d105      	bne.n	84eaa <hsmci_wait_end_of_write_blocks+0x72>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
   84e9e:	f013 0f20 	tst.w	r3, #32
   84ea2:	d0e1      	beq.n	84e68 <hsmci_wait_end_of_write_blocks+0x30>
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	return true;
   84ea4:	f04f 0001 	mov.w	r0, #1
   84ea8:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
				return true;
   84eaa:	f04f 0001 	mov.w	r0, #1
	} while (!(sr & HSMCI_SR_NOTBUSY));
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	return true;

}
   84eae:	bd10      	pop	{r4, pc}

00084eb0 <cdc_send_line>:
volatile Bool is_new_received_cdc_char = false;
volatile Bool is_terminal_open = false;


iram_size_t cdc_send_line(char* line_to_send)
{
   84eb0:	b510      	push	{r4, lr}
   84eb2:	4604      	mov	r4, r0
	if(is_terminal_open)
   84eb4:	f640 530c 	movw	r3, #3340	; 0xd0c
   84eb8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84ebc:	7818      	ldrb	r0, [r3, #0]
   84ebe:	b168      	cbz	r0, 84edc <cdc_send_line+0x2c>
		return udi_cdc_write_buf((const void*) line_to_send, strlen(line_to_send));
   84ec0:	4620      	mov	r0, r4
   84ec2:	f64a 32cd 	movw	r2, #43981	; 0xabcd
   84ec6:	f2c0 0208 	movt	r2, #8
   84eca:	4790      	blx	r2
   84ecc:	4601      	mov	r1, r0
   84ece:	4620      	mov	r0, r4
   84ed0:	f645 53a5 	movw	r3, #23973	; 0x5da5
   84ed4:	f2c0 0308 	movt	r3, #8
   84ed8:	4798      	blx	r3
   84eda:	bd10      	pop	{r4, pc}
	else
		return strlen(line_to_send);
   84edc:	4620      	mov	r0, r4
   84ede:	f64a 31cd 	movw	r1, #43981	; 0xabcd
   84ee2:	f2c0 0108 	movt	r1, #8
   84ee6:	4788      	blx	r1
}
   84ee8:	bd10      	pop	{r4, pc}
   84eea:	bf00      	nop

00084eec <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
	if (b_enable) 
   84eec:	b139      	cbz	r1, 84efe <main_cdc_set_dtr+0x12>
		is_terminal_open = true;
   84eee:	f640 500c 	movw	r0, #3340	; 0xd0c
   84ef2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84ef6:	f04f 0101 	mov.w	r1, #1
   84efa:	7001      	strb	r1, [r0, #0]
   84efc:	4770      	bx	lr
	else
		is_terminal_open = false;
   84efe:	f640 530c 	movw	r3, #3340	; 0xd0c
   84f02:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84f06:	f04f 0200 	mov.w	r2, #0
   84f0a:	701a      	strb	r2, [r3, #0]
   84f0c:	4770      	bx	lr
   84f0e:	bf00      	nop

00084f10 <uart_rx_notify>:
}

void uart_rx_notify(uint8_t port)
{
	UNUSED(port);
	is_new_received_cdc_char = true;
   84f10:	f640 530d 	movw	r3, #3341	; 0xd0d
   84f14:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84f18:	f04f 0201 	mov.w	r2, #1
   84f1c:	701a      	strb	r2, [r3, #0]
   84f1e:	4770      	bx	lr

00084f20 <main_suspend_action>:
	cpu_irq_restore(flags);	
	
	return true;
}

void main_suspend_action(void){}
   84f20:	4770      	bx	lr
   84f22:	bf00      	nop

00084f24 <main_resume_action>:
void main_resume_action(void){}
   84f24:	4770      	bx	lr
   84f26:	bf00      	nop

00084f28 <main_sof_action>:
void main_sof_action(void){}
   84f28:	4770      	bx	lr
   84f2a:	bf00      	nop

00084f2c <SCPI_Write>:
uint16_t current_input_line_pointer = 0;
char current_input_line[LINE_BUFFER_SIZE];


size_t SCPI_Write(scpi_t * context, const char * data, size_t len) 
{
   84f2c:	b530      	push	{r4, r5, lr}
   84f2e:	b083      	sub	sp, #12
   84f30:	4613      	mov	r3, r2
	(void) context;
	printf("%.*s", len, data);
   84f32:	f641 3498 	movw	r4, #7064	; 0x1b98
   84f36:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84f3a:	9100      	str	r1, [sp, #0]
   84f3c:	4620      	mov	r0, r4
   84f3e:	f04f 0164 	mov.w	r1, #100	; 0x64
   84f42:	f24f 32e0 	movw	r2, #62432	; 0xf3e0
   84f46:	f2c0 0208 	movt	r2, #8
   84f4a:	f64a 3567 	movw	r5, #43879	; 0xab67
   84f4e:	f2c0 0508 	movt	r5, #8
   84f52:	47a8      	blx	r5
   84f54:	4620      	mov	r0, r4
   84f56:	f644 63b1 	movw	r3, #20145	; 0x4eb1
   84f5a:	f2c0 0308 	movt	r3, #8
   84f5e:	4798      	blx	r3
	return SCPI_RES_OK;    
}
   84f60:	f04f 0001 	mov.w	r0, #1
   84f64:	b003      	add	sp, #12
   84f66:	bd30      	pop	{r4, r5, pc}

00084f68 <SCPI_Flush>:

scpi_result_t SCPI_Flush(scpi_t * context) 
{
	return SCPI_RES_OK;
}
   84f68:	f04f 0001 	mov.w	r0, #1
   84f6c:	4770      	bx	lr
   84f6e:	bf00      	nop

00084f70 <SCPI_Error>:

int SCPI_Error(scpi_t * context, int_fast16_t err) 
{
   84f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84f74:	b083      	sub	sp, #12
   84f76:	4605      	mov	r5, r0
   84f78:	4688      	mov	r8, r1
	uint16_t i = 0;
	
	#define ONLY_OUTPUT_READ_ERRORS
	#ifdef ONLY_OUTPUT_READ_ERRORS
		if (context->cmd_error == 1)
   84f7a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   84f7e:	2b00      	cmp	r3, #0
   84f80:	d030      	beq.n	84fe4 <SCPI_Error+0x74>
		{
			// If it's an unknown command 
			while(i < (context->buffer.position))
   84f82:	6880      	ldr	r0, [r0, #8]
   84f84:	b370      	cbz	r0, 84fe4 <SCPI_Error+0x74>
   84f86:	f04f 0600 	mov.w	r6, #0
   84f8a:	4634      	mov	r4, r6
			{
				if (context->buffer.data[i] == '?')
				{
					printf("**ERROR: %d, \"%s\"\r\n", (int32_t) err, SCPI_ErrorTranslate(err));
   84f8c:	f642 3bd5 	movw	fp, #11221	; 0x2bd5
   84f90:	465f      	mov	r7, fp
   84f92:	f2c0 0708 	movt	r7, #8
   84f96:	f641 3998 	movw	r9, #7064	; 0x1b98
   84f9a:	f2c2 0907 	movt	r9, #8199	; 0x2007
   84f9e:	f24f 3ae8 	movw	sl, #62440	; 0xf3e8
   84fa2:	f2c0 0a08 	movt	sl, #8
		if (context->cmd_error == 1)
		{
			// If it's an unknown command 
			while(i < (context->buffer.position))
			{
				if (context->buffer.data[i] == '?')
   84fa6:	68e9      	ldr	r1, [r5, #12]
   84fa8:	5d8a      	ldrb	r2, [r1, r6]
   84faa:	2a3f      	cmp	r2, #63	; 0x3f
   84fac:	d113      	bne.n	84fd6 <SCPI_Error+0x66>
				{
					printf("**ERROR: %d, \"%s\"\r\n", (int32_t) err, SCPI_ErrorTranslate(err));
   84fae:	fa0f f088 	sxth.w	r0, r8
   84fb2:	47b8      	blx	r7
   84fb4:	9000      	str	r0, [sp, #0]
   84fb6:	4648      	mov	r0, r9
   84fb8:	f04f 0164 	mov.w	r1, #100	; 0x64
   84fbc:	4652      	mov	r2, sl
   84fbe:	4643      	mov	r3, r8
   84fc0:	f64a 3667 	movw	r6, #43879	; 0xab67
   84fc4:	f2c0 0608 	movt	r6, #8
   84fc8:	47b0      	blx	r6
   84fca:	4648      	mov	r0, r9
   84fcc:	f644 63b1 	movw	r3, #20145	; 0x4eb1
   84fd0:	f2c0 0308 	movt	r3, #8
   84fd4:	4798      	blx	r3
				}
				i++;
   84fd6:	f104 0401 	add.w	r4, r4, #1
   84fda:	b2a4      	uxth	r4, r4
	#define ONLY_OUTPUT_READ_ERRORS
	#ifdef ONLY_OUTPUT_READ_ERRORS
		if (context->cmd_error == 1)
		{
			// If it's an unknown command 
			while(i < (context->buffer.position))
   84fdc:	4626      	mov	r6, r4
   84fde:	68a8      	ldr	r0, [r5, #8]
   84fe0:	4284      	cmp	r4, r0
   84fe2:	d3e0      	bcc.n	84fa6 <SCPI_Error+0x36>
		}
	#endif
	//(void) context;
	//printf("**ERROR: %d, \"%s\"\r\n", (int32_t) err, SCPI_ErrorTranslate(err));
	return 0;
}
   84fe4:	f04f 0000 	mov.w	r0, #0
   84fe8:	b003      	add	sp, #12
   84fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84fee:	bf00      	nop

00084ff0 <SCPI_Control>:

scpi_result_t SCPI_Control(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) 
{
   84ff0:	b530      	push	{r4, r5, lr}
   84ff2:	b083      	sub	sp, #12
   84ff4:	460b      	mov	r3, r1
   84ff6:	4614      	mov	r4, r2
	if (SCPI_CTRL_SRQ == ctrl) 
   84ff8:	2901      	cmp	r1, #1
   84ffa:	d118      	bne.n	8502e <SCPI_Control+0x3e>
	{
		printf("**SRQ: 0x%X (%d)\r\n", val, val);
   84ffc:	f641 3598 	movw	r5, #7064	; 0x1b98
   85000:	f2c2 0507 	movt	r5, #8199	; 0x2007
   85004:	9200      	str	r2, [sp, #0]
   85006:	4628      	mov	r0, r5
   85008:	f04f 0164 	mov.w	r1, #100	; 0x64
   8500c:	f24f 32fc 	movw	r2, #62460	; 0xf3fc
   85010:	f2c0 0208 	movt	r2, #8
   85014:	4623      	mov	r3, r4
   85016:	f64a 3467 	movw	r4, #43879	; 0xab67
   8501a:	f2c0 0408 	movt	r4, #8
   8501e:	47a0      	blx	r4
   85020:	4628      	mov	r0, r5
   85022:	f644 61b1 	movw	r1, #20145	; 0x4eb1
   85026:	f2c0 0108 	movt	r1, #8
   8502a:	4788      	blx	r1
   8502c:	e017      	b.n	8505e <SCPI_Control+0x6e>
	}
	else 
	{
		printf("**CTRL %02x: 0x%X (%d)\r\n", ctrl, val, val);
   8502e:	f641 3598 	movw	r5, #7064	; 0x1b98
   85032:	f2c2 0507 	movt	r5, #8199	; 0x2007
   85036:	9200      	str	r2, [sp, #0]
   85038:	9201      	str	r2, [sp, #4]
   8503a:	4628      	mov	r0, r5
   8503c:	f04f 0164 	mov.w	r1, #100	; 0x64
   85040:	f24f 4210 	movw	r2, #62480	; 0xf410
   85044:	f2c0 0208 	movt	r2, #8
   85048:	f64a 3467 	movw	r4, #43879	; 0xab67
   8504c:	f2c0 0408 	movt	r4, #8
   85050:	47a0      	blx	r4
   85052:	4628      	mov	r0, r5
   85054:	f644 63b1 	movw	r3, #20145	; 0x4eb1
   85058:	f2c0 0308 	movt	r3, #8
   8505c:	4798      	blx	r3
	}
	return SCPI_RES_OK;
}
   8505e:	f04f 0001 	mov.w	r0, #1
   85062:	b003      	add	sp, #12
   85064:	bd30      	pop	{r4, r5, pc}
   85066:	bf00      	nop

00085068 <SCPI_Test>:

scpi_result_t SCPI_Test(scpi_t * context) 
{
   85068:	b508      	push	{r3, lr}
	printf("**Test\r\n");
   8506a:	f641 3298 	movw	r2, #7064	; 0x1b98
   8506e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85072:	f24f 432c 	movw	r3, #62508	; 0xf42c
   85076:	f2c0 0308 	movt	r3, #8
   8507a:	cb03      	ldmia	r3!, {r0, r1}
   8507c:	6010      	str	r0, [r2, #0]
   8507e:	6051      	str	r1, [r2, #4]
   85080:	7818      	ldrb	r0, [r3, #0]
   85082:	7210      	strb	r0, [r2, #8]
   85084:	4610      	mov	r0, r2
   85086:	f644 61b1 	movw	r1, #20145	; 0x4eb1
   8508a:	f2c0 0108 	movt	r1, #8
   8508e:	4788      	blx	r1
	return SCPI_RES_OK;
}
   85090:	f04f 0001 	mov.w	r0, #1
   85094:	bd08      	pop	{r3, pc}
   85096:	bf00      	nop

00085098 <SCPI_Reset>:

scpi_result_t SCPI_Reset(scpi_t * context) 
{
   85098:	b508      	push	{r3, lr}
	printf("**Reset\r\n");
   8509a:	f641 3298 	movw	r2, #7064	; 0x1b98
   8509e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   850a2:	f24f 4338 	movw	r3, #62520	; 0xf438
   850a6:	f2c0 0308 	movt	r3, #8
   850aa:	cb03      	ldmia	r3!, {r0, r1}
   850ac:	6010      	str	r0, [r2, #0]
   850ae:	6051      	str	r1, [r2, #4]
   850b0:	8818      	ldrh	r0, [r3, #0]
   850b2:	8110      	strh	r0, [r2, #8]
   850b4:	4610      	mov	r0, r2
   850b6:	f644 61b1 	movw	r1, #20145	; 0x4eb1
   850ba:	f2c0 0108 	movt	r1, #8
   850be:	4788      	blx	r1
	return SCPI_RES_OK;
}
   850c0:	f04f 0001 	mov.w	r0, #1
   850c4:	bd08      	pop	{r3, pc}
   850c6:	bf00      	nop

000850c8 <console_init>:

void console_init(void)
{
   850c8:	b508      	push	{r3, lr}
	SCPI_Init(&scpi_context);
   850ca:	f240 0038 	movw	r0, #56	; 0x38
   850ce:	f2c2 0007 	movt	r0, #8199	; 0x2007
   850d2:	f243 530d 	movw	r3, #13581	; 0x350d
   850d6:	f2c0 0308 	movt	r3, #8
   850da:	4798      	blx	r3
   850dc:	bd08      	pop	{r3, pc}
   850de:	bf00      	nop

000850e0 <console_process>:
}

void console_process(void)
{
   850e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	iram_size_t data_remaining = 0;
	uint8_t temp_buffer[10];
	
	if(udi_cdc_get_nb_received_data() == 0)
   850e4:	f645 1309 	movw	r3, #22793	; 0x5909
   850e8:	f2c0 0308 	movt	r3, #8
   850ec:	4798      	blx	r3
   850ee:	2800      	cmp	r0, #0
   850f0:	d040      	beq.n	85174 <console_process+0x94>
		return;
	
	do 
	{
		data_remaining = udi_cdc_read_buf(current_input_line+current_input_line_pointer, 1);
   850f2:	f640 540e 	movw	r4, #3342	; 0xd0e
   850f6:	f2c2 0407 	movt	r4, #8199	; 0x2007
   850fa:	f641 35fc 	movw	r5, #7164	; 0x1bfc
   850fe:	f2c2 0507 	movt	r5, #8199	; 0x2007
   85102:	f04f 0601 	mov.w	r6, #1
   85106:	f645 4a1d 	movw	sl, #23581	; 0x5c1d
   8510a:	f2c0 0a08 	movt	sl, #8
		//udi_cdc_putc(current_input_line[current_input_line_pointer]);
		SCPI_Input(&scpi_context, current_input_line+current_input_line_pointer, 1);
   8510e:	f240 0938 	movw	r9, #56	; 0x38
   85112:	f2c2 0907 	movt	r9, #8199	; 0x2007
   85116:	f243 5821 	movw	r8, #13601	; 0x3521
   8511a:	f2c0 0808 	movt	r8, #8
	if(udi_cdc_get_nb_received_data() == 0)
		return;
	
	do 
	{
		data_remaining = udi_cdc_read_buf(current_input_line+current_input_line_pointer, 1);
   8511e:	8820      	ldrh	r0, [r4, #0]
   85120:	1940      	adds	r0, r0, r5
   85122:	4631      	mov	r1, r6
   85124:	47d0      	blx	sl
   85126:	4607      	mov	r7, r0
		//udi_cdc_putc(current_input_line[current_input_line_pointer]);
		SCPI_Input(&scpi_context, current_input_line+current_input_line_pointer, 1);
   85128:	8821      	ldrh	r1, [r4, #0]
   8512a:	4648      	mov	r0, r9
   8512c:	1949      	adds	r1, r1, r5
   8512e:	4632      	mov	r2, r6
   85130:	47c0      	blx	r8
		current_input_line_pointer++;
   85132:	8822      	ldrh	r2, [r4, #0]
   85134:	f102 0201 	add.w	r2, r2, #1
   85138:	b293      	uxth	r3, r2
   8513a:	8023      	strh	r3, [r4, #0]
		
		if((current_input_line[current_input_line_pointer-1] == 0x0D) || (current_input_line[current_input_line_pointer-1] == 0x0A))
   8513c:	18e8      	adds	r0, r5, r3
   8513e:	f810 1c01 	ldrb.w	r1, [r0, #-1]
   85142:	290d      	cmp	r1, #13
   85144:	d001      	beq.n	8514a <console_process+0x6a>
   85146:	290a      	cmp	r1, #10
   85148:	d102      	bne.n	85150 <console_process+0x70>
		{
			current_input_line_pointer = 0;
   8514a:	f04f 0200 	mov.w	r2, #0
   8514e:	8022      	strh	r2, [r4, #0]
			// should we do another parsing rather than scpi?
		}
	} 
	while((data_remaining > 0) && (current_input_line_pointer < LINE_BUFFER_SIZE));
   85150:	b117      	cbz	r7, 85158 <console_process+0x78>
   85152:	8823      	ldrh	r3, [r4, #0]
   85154:	2bc7      	cmp	r3, #199	; 0xc7
   85156:	d9e2      	bls.n	8511e <console_process+0x3e>
	
	if(current_input_line_pointer == LINE_BUFFER_SIZE)
   85158:	f640 500e 	movw	r0, #3342	; 0xd0e
   8515c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85160:	8801      	ldrh	r1, [r0, #0]
   85162:	29c8      	cmp	r1, #200	; 0xc8
   85164:	d106      	bne.n	85174 <console_process+0x94>
	{
		// We should return a message or smth...
		current_input_line_pointer = 0;
   85166:	f640 530e 	movw	r3, #3342	; 0xd0e
   8516a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8516e:	f04f 0200 	mov.w	r2, #0
   85172:	801a      	strh	r2, [r3, #0]
   85174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00085178 <main_extra_string>:
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   85178:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   8517c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85180:	7898      	ldrb	r0, [r3, #2]
   85182:	2804      	cmp	r0, #4
   85184:	d002      	beq.n	8518c <main_extra_string+0x14>
   85186:	2805      	cmp	r0, #5
   85188:	d13b      	bne.n	85202 <main_extra_string+0x8a>
   8518a:	e004      	b.n	85196 <main_extra_string+0x1e>
	case UDI_CDC_IAD_STRING_ID:
		str_lgt = sizeof(udi_cdc_name)-1;
		str = udi_cdc_name;
   8518c:	f240 0290 	movw	r2, #144	; 0x90
   85190:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85194:	e003      	b.n	8519e <main_extra_string+0x26>
		break;
	case UDI_MSC_STRING_ID:
		str_lgt = sizeof(udi_msc_name)-1;
		str = udi_msc_name;
   85196:	f240 02bc 	movw	r2, #188	; 0xbc
   8519a:	f2c2 0207 	movt	r2, #8199	; 0x2007
		return false;
	}

	if (str_lgt!=0) {
		for( i=0; i<str_lgt; i++) {
			extra_strings_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   8519e:	f240 03a0 	movw	r3, #160	; 0xa0
   851a2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   851a6:	7811      	ldrb	r1, [r2, #0]
   851a8:	8059      	strh	r1, [r3, #2]
   851aa:	7850      	ldrb	r0, [r2, #1]
   851ac:	8098      	strh	r0, [r3, #4]
   851ae:	7891      	ldrb	r1, [r2, #2]
   851b0:	80d9      	strh	r1, [r3, #6]
   851b2:	78d0      	ldrb	r0, [r2, #3]
   851b4:	8118      	strh	r0, [r3, #8]
   851b6:	7911      	ldrb	r1, [r2, #4]
   851b8:	8159      	strh	r1, [r3, #10]
   851ba:	7950      	ldrb	r0, [r2, #5]
   851bc:	8198      	strh	r0, [r3, #12]
   851be:	7991      	ldrb	r1, [r2, #6]
   851c0:	81d9      	strh	r1, [r3, #14]
   851c2:	79d0      	ldrb	r0, [r2, #7]
   851c4:	8218      	strh	r0, [r3, #16]
   851c6:	7a11      	ldrb	r1, [r2, #8]
   851c8:	8259      	strh	r1, [r3, #18]
   851ca:	7a50      	ldrb	r0, [r2, #9]
   851cc:	8298      	strh	r0, [r3, #20]
   851ce:	7a91      	ldrb	r1, [r2, #10]
   851d0:	82d9      	strh	r1, [r3, #22]
   851d2:	7ad0      	ldrb	r0, [r2, #11]
   851d4:	8318      	strh	r0, [r3, #24]
   851d6:	7b12      	ldrb	r2, [r2, #12]
   851d8:	835a      	strh	r2, [r3, #26]
		}
		extra_strings_desc.header.bLength = 2+ (str_lgt)*2;
   851da:	f04f 011c 	mov.w	r1, #28
   851de:	7019      	strb	r1, [r3, #0]
		udd_g_ctrlreq.payload_size = extra_strings_desc.header.bLength;
   851e0:	f641 40cc 	movw	r0, #7372	; 0x1ccc
   851e4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   851e8:	8181      	strh	r1, [r0, #12]
		udd_g_ctrlreq.payload = (uint8_t *) &extra_strings_desc;
   851ea:	6083      	str	r3, [r0, #8]
	}

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength) {
   851ec:	88c3      	ldrh	r3, [r0, #6]
   851ee:	2b1b      	cmp	r3, #27
   851f0:	d80a      	bhi.n	85208 <main_extra_string+0x90>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   851f2:	f641 42cc 	movw	r2, #7372	; 0x1ccc
   851f6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   851fa:	8193      	strh	r3, [r2, #12]
	}
	return true;
   851fc:	f04f 0001 	mov.w	r0, #1
   85200:	4770      	bx	lr
	case UDI_MSC_STRING_ID:
		str_lgt = sizeof(udi_msc_name)-1;
		str = udi_msc_name;
		break;
	default:
		return false;
   85202:	f04f 0000 	mov.w	r0, #0
   85206:	4770      	bx	lr

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
   85208:	f04f 0001 	mov.w	r0, #1
   8520c:	4770      	bx	lr
   8520e:	bf00      	nop

00085210 <HardFault_Handler>:
         * Get the appropriate stack pointer, depending on our mode,
         * and use it as the parameter to the C handler. This function
         * will never return
         */

        __asm(  ".syntax unified\n"
   85210:	2004      	movs	r0, #4
   85212:	4671      	mov	r1, lr
   85214:	4208      	tst	r0, r1
   85216:	f000 8004 	beq.w	85222 <_MSP>
   8521a:	f3ef 8009 	mrs	r0, PSP
   8521e:	f000 b805 	b.w	8522c <HardFault_HandlerC>

00085222 <_MSP>:
   85222:	f3ef 8008 	mrs	r0, MSP
   85226:	f000 b801 	b.w	8522c <HardFault_HandlerC>
   8522a:	bf00      	nop

0008522c <HardFault_HandlerC>:
 * into local variables for ease of reading.
 * We then read the various Fault Status and Address Registers to help decode
 * cause of the fault.
 * The function ends with a BKPT instruction to force control back into the debugger
 */
void HardFault_HandlerC(unsigned long *hardfault_args){
   8522c:	b08e      	sub	sp, #56	; 0x38
        volatile unsigned long _DFSR ;
        volatile unsigned long _AFSR ;
        volatile unsigned long _BFAR ;
        volatile unsigned long _MMAR ;

        stacked_r0 = ((unsigned long)hardfault_args[0]) ;
   8522e:	6803      	ldr	r3, [r0, #0]
   85230:	930d      	str	r3, [sp, #52]	; 0x34
        stacked_r1 = ((unsigned long)hardfault_args[1]) ;
   85232:	6841      	ldr	r1, [r0, #4]
   85234:	910c      	str	r1, [sp, #48]	; 0x30
        stacked_r2 = ((unsigned long)hardfault_args[2]) ;
   85236:	6882      	ldr	r2, [r0, #8]
   85238:	920b      	str	r2, [sp, #44]	; 0x2c
        stacked_r3 = ((unsigned long)hardfault_args[3]) ;
   8523a:	68c3      	ldr	r3, [r0, #12]
   8523c:	930a      	str	r3, [sp, #40]	; 0x28
        stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   8523e:	6901      	ldr	r1, [r0, #16]
   85240:	9109      	str	r1, [sp, #36]	; 0x24
        stacked_lr = ((unsigned long)hardfault_args[5]) ;
   85242:	6942      	ldr	r2, [r0, #20]
   85244:	9208      	str	r2, [sp, #32]
        stacked_pc = ((unsigned long)hardfault_args[6]) ;
   85246:	6983      	ldr	r3, [r0, #24]
   85248:	9307      	str	r3, [sp, #28]
        stacked_psr = ((unsigned long)hardfault_args[7]) ;
   8524a:	69c0      	ldr	r0, [r0, #28]
   8524c:	9006      	str	r0, [sp, #24]

        // Configurable Fault Status Register
        // Consists of MMSR, BFSR and UFSR
        _CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;   
   8524e:	f64e 5128 	movw	r1, #60712	; 0xed28
   85252:	f2ce 0100 	movt	r1, #57344	; 0xe000
   85256:	680a      	ldr	r2, [r1, #0]
   85258:	9205      	str	r2, [sp, #20]
                                                                                        
        // Hard Fault Status Register
        _HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   8525a:	f64e 532c 	movw	r3, #60716	; 0xed2c
   8525e:	f2ce 0300 	movt	r3, #57344	; 0xe000
   85262:	6818      	ldr	r0, [r3, #0]
   85264:	9004      	str	r0, [sp, #16]

        // Debug Fault Status Register
        _DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   85266:	f64e 5130 	movw	r1, #60720	; 0xed30
   8526a:	f2ce 0100 	movt	r1, #57344	; 0xe000
   8526e:	680a      	ldr	r2, [r1, #0]
   85270:	9203      	str	r2, [sp, #12]

        // Auxiliary Fault Status Register
        _AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   85272:	f64e 533c 	movw	r3, #60732	; 0xed3c
   85276:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8527a:	6818      	ldr	r0, [r3, #0]
   8527c:	9002      	str	r0, [sp, #8]

        // Read the Fault Address Registers. These may not contain valid values.
        // Check BFARVALID/MMARVALID to see if they are valid values
        // MemManage Fault Address Register
        _MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   8527e:	f64e 5134 	movw	r1, #60724	; 0xed34
   85282:	f2ce 0100 	movt	r1, #57344	; 0xe000
   85286:	680a      	ldr	r2, [r1, #0]
   85288:	9200      	str	r2, [sp, #0]
        // Bus Fault Address Register
        _BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   8528a:	f64e 5338 	movw	r3, #60728	; 0xed38
   8528e:	f2ce 0300 	movt	r3, #57344	; 0xe000
   85292:	6818      	ldr	r0, [r3, #0]
   85294:	9001      	str	r0, [sp, #4]

        __asm("BKPT #0\n") ; // Break into the debugger
   85296:	be00      	bkpt	0x0000
   85298:	e7fe      	b.n	85298 <HardFault_HandlerC+0x6c>
   8529a:	bf00      	nop

0008529c <dmac_enable>:
 *
 * \param p_dmac  Pointer to a DMAC peripheral instance.
 */
void dmac_enable(Dmac *p_dmac)
{
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   8529c:	f04f 0301 	mov.w	r3, #1
   852a0:	6043      	str	r3, [r0, #4]
   852a2:	4770      	bx	lr

000852a4 <dmac_channel_enable>:
 * \param p_dmac Pointer to a DMAC peripheral instance.
 * \param ul_num Channel number.
 */
void dmac_channel_enable(Dmac *p_dmac, uint32_t ul_num)
{
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   852a4:	f04f 0301 	mov.w	r3, #1
   852a8:	fa03 f101 	lsl.w	r1, r3, r1
   852ac:	6281      	str	r1, [r0, #40]	; 0x28
   852ae:	4770      	bx	lr

000852b0 <dmac_channel_disable>:
 * \param p_dmac Pointer to a DMAC peripheral instance.
 * \param ul_num Channel number.
 */
void dmac_channel_disable(Dmac *p_dmac, uint32_t ul_num)
{
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   852b0:	f04f 0301 	mov.w	r3, #1
   852b4:	fa03 f101 	lsl.w	r1, r3, r1
   852b8:	62c1      	str	r1, [r0, #44]	; 0x2c
   852ba:	4770      	bx	lr

000852bc <dmac_channel_set_source_addr>:
 * \note This register must be aligned with the source transfer width.
 */
void dmac_channel_set_source_addr(Dmac *p_dmac,
		uint32_t ul_num, uint32_t ul_addr)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   852bc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   852c0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   852c4:	63c2      	str	r2, [r0, #60]	; 0x3c
   852c6:	4770      	bx	lr

000852c8 <dmac_channel_set_destination_addr>:
 * \note This register must be aligned with the source transfer width.
 */
void dmac_channel_set_destination_addr(Dmac *p_dmac, uint32_t ul_num,
		uint32_t ul_addr)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   852c8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   852cc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   852d0:	6402      	str	r2, [r0, #64]	; 0x40
   852d2:	4770      	bx	lr

000852d4 <dmac_channel_set_descriptor_addr>:
 * \param ul_desc     Descriptor address.
 */
void dmac_channel_set_descriptor_addr(Dmac *p_dmac,
		uint32_t ul_num, uint32_t ul_desc)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   852d4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   852d8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   852dc:	6442      	str	r2, [r0, #68]	; 0x44
   852de:	4770      	bx	lr

000852e0 <dmac_channel_set_ctrlA>:
 * \param ul_num      Channel number.
 * \param ul_ctrlA    Configuration of control A register.
 */
void dmac_channel_set_ctrlA(Dmac *p_dmac, uint32_t ul_num, uint32_t ul_ctrlA)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   852e0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   852e4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   852e8:	6482      	str	r2, [r0, #72]	; 0x48
   852ea:	4770      	bx	lr

000852ec <dmac_channel_set_ctrlB>:
 * \param ul_num      Channel number.
 * \param ul_ctrlB    Configuration of control B register.
 */
void dmac_channel_set_ctrlB(Dmac *p_dmac, uint32_t ul_num, uint32_t ul_ctrlB)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   852ec:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   852f0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   852f4:	64c2      	str	r2, [r0, #76]	; 0x4c
   852f6:	4770      	bx	lr

000852f8 <dmac_channel_set_configuration>:
 * \param ul_cfg      Configuration of CFG register.
 */
void dmac_channel_set_configuration(Dmac *p_dmac, uint32_t ul_num,
		uint32_t ul_cfg)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   852f8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   852fc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   85300:	6502      	str	r2, [r0, #80]	; 0x50
   85302:	4770      	bx	lr

00085304 <dmac_channel_single_buf_transfer_init>:
 * \param ul_num      Channel number.
 * \param p_desc      Pointer to a transfer descriptor.
 */
void dmac_channel_single_buf_transfer_init(Dmac *p_dmac,
		uint32_t ul_num, dma_transfer_descriptor_t *p_desc)
{
   85304:	b570      	push	{r4, r5, r6, lr}
   85306:	4604      	mov	r4, r0
   85308:	460e      	mov	r6, r1
   8530a:	4615      	mov	r5, r2
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   8530c:	6a43      	ldr	r3, [r0, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   8530e:	6812      	ldr	r2, [r2, #0]
   85310:	f245 23bd 	movw	r3, #21181	; 0x52bd
   85314:	f2c0 0308 	movt	r3, #8
   85318:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   8531a:	4620      	mov	r0, r4
   8531c:	4631      	mov	r1, r6
   8531e:	686a      	ldr	r2, [r5, #4]
   85320:	f245 23c9 	movw	r3, #21193	; 0x52c9
   85324:	f2c0 0308 	movt	r3, #8
   85328:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   8532a:	4620      	mov	r0, r4
   8532c:	4631      	mov	r1, r6
   8532e:	f04f 0200 	mov.w	r2, #0
   85332:	f245 23d5 	movw	r3, #21205	; 0x52d5
   85336:	f2c0 0308 	movt	r3, #8
   8533a:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   8533c:	4620      	mov	r0, r4
   8533e:	4631      	mov	r1, r6
   85340:	68aa      	ldr	r2, [r5, #8]
   85342:	f245 23e1 	movw	r3, #21217	; 0x52e1
   85346:	f2c0 0308 	movt	r3, #8
   8534a:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   8534c:	4620      	mov	r0, r4
   8534e:	4631      	mov	r1, r6
   85350:	68ea      	ldr	r2, [r5, #12]
   85352:	f245 23ed 	movw	r3, #21229	; 0x52ed
   85356:	f2c0 0308 	movt	r3, #8
   8535a:	4798      	blx	r3
   8535c:	bd70      	pop	{r4, r5, r6, pc}
   8535e:	bf00      	nop

00085360 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   85360:	b508      	push	{r3, lr}
	}
#endif

	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_UPLL) {

		pmc_enable_upll_clock();
   85362:	f647 2335 	movw	r3, #31285	; 0x7a35
   85366:	f2c0 0308 	movt	r3, #8
   8536a:	4798      	blx	r3
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
   8536c:	f04f 0000 	mov.w	r0, #0
   85370:	f647 21d9 	movw	r1, #31449	; 0x7ad9
   85374:	f2c0 0108 	movt	r1, #8
   85378:	4788      	blx	r1
		pmc_enable_udpck();
   8537a:	f647 20f1 	movw	r0, #31473	; 0x7af1
   8537e:	f2c0 0008 	movt	r0, #8
   85382:	4780      	blx	r0
   85384:	bd08      	pop	{r3, pc}
   85386:	bf00      	nop

00085388 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   85388:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8538a:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   8538e:	f2c0 5001 	movt	r0, #1281	; 0x501
   85392:	f649 53d9 	movw	r3, #40409	; 0x9dd9
   85396:	f2c0 0308 	movt	r3, #8
   8539a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8539c:	f04f 0000 	mov.w	r0, #0
   853a0:	f04f 013e 	mov.w	r1, #62	; 0x3e
   853a4:	f647 1295 	movw	r2, #31125	; 0x7995
   853a8:	f2c0 0208 	movt	r2, #8
   853ac:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   853ae:	f647 2405 	movw	r4, #31237	; 0x7a05
   853b2:	f2c0 0408 	movt	r4, #8
   853b6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   853b8:	2800      	cmp	r0, #0
   853ba:	d0fc      	beq.n	853b6 <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   853bc:	f647 2015 	movw	r0, #31253	; 0x7a15
   853c0:	f2c0 0008 	movt	r0, #8
   853c4:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   853c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   853ca:	f2c4 010e 	movt	r1, #16398	; 0x400e
   853ce:	f643 7301 	movw	r3, #16129	; 0x3f01
   853d2:	f2c2 030d 	movt	r3, #8205	; 0x200d
   853d6:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   853d8:	f647 2425 	movw	r4, #31269	; 0x7a25
   853dc:	f2c0 0408 	movt	r4, #8
   853e0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   853e2:	2800      	cmp	r0, #0
   853e4:	d0fc      	beq.n	853e0 <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   853e6:	f04f 0010 	mov.w	r0, #16
   853ea:	f647 02f5 	movw	r2, #30965	; 0x78f5
   853ee:	f2c0 0208 	movt	r2, #8
   853f2:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   853f4:	f649 4011 	movw	r0, #39953	; 0x9c11
   853f8:	f2c0 0008 	movt	r0, #8
   853fc:	4780      	blx	r0
   853fe:	bd10      	pop	{r4, pc}

00085400 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
   85400:	f04f 0001 	mov.w	r0, #1
   85404:	4770      	bx	lr
   85406:	bf00      	nop

00085408 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   85408:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
   8540a:	b928      	cbnz	r0, 85418 <mem_test_unit_ready+0x10>
   8540c:	f244 53a5 	movw	r3, #17829	; 0x45a5
   85410:	f2c0 0308 	movt	r3, #8
   85414:	4798      	blx	r3
   85416:	bd08      	pop	{r3, pc}
   85418:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
   8541c:	bd08      	pop	{r3, pc}
   8541e:	bf00      	nop

00085420 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   85420:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
   85422:	b930      	cbnz	r0, 85432 <mem_read_capacity+0x12>
   85424:	4608      	mov	r0, r1
   85426:	f244 53e1 	movw	r3, #17889	; 0x45e1
   8542a:	f2c0 0308 	movt	r3, #8
   8542e:	4798      	blx	r3
   85430:	bd08      	pop	{r3, pc}
   85432:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
   85436:	bd08      	pop	{r3, pc}

00085438 <mem_unload>:

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
   85438:	b910      	cbnz	r0, 85440 <mem_unload+0x8>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
   8543a:	f081 0001 	eor.w	r0, r1, #1
   8543e:	4770      	bx	lr

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
   85440:	f04f 0000 	mov.w	r0, #0
#endif

  Ctrl_access_unlock();

  return unloaded;
}
   85444:	4770      	bx	lr
   85446:	bf00      	nop

00085448 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
   85448:	b508      	push	{r3, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   8544a:	b928      	cbnz	r0, 85458 <mem_wr_protect+0x10>
   8544c:	f244 6305 	movw	r3, #17925	; 0x4605
   85450:	f2c0 0308 	movt	r3, #8
   85454:	4798      	blx	r3
   85456:	bd08      	pop	{r3, pc}
   85458:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
   8545c:	bd08      	pop	{r3, pc}
   8545e:	bf00      	nop

00085460 <mem_removal>:


bool mem_removal(U8 lun)
{
   85460:	b508      	push	{r3, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
   85462:	b928      	cbnz	r0, 85470 <mem_removal+0x10>
   85464:	f244 6321 	movw	r3, #17953	; 0x4621
   85468:	f2c0 0308 	movt	r3, #8
   8546c:	4798      	blx	r3
   8546e:	bd08      	pop	{r3, pc}
   85470:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return removal;
}
   85474:	bd08      	pop	{r3, pc}
   85476:	bf00      	nop

00085478 <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
   85478:	b920      	cbnz	r0, 85484 <mem_name+0xc>
   8547a:	f24f 4044 	movw	r0, #62532	; 0xf444
   8547e:	f2c0 0008 	movt	r0, #8
   85482:	4770      	bx	lr
   85484:	f04f 0000 	mov.w	r0, #0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
   85488:	4770      	bx	lr
   8548a:	bf00      	nop

0008548c <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
   8548c:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  status =
   8548e:	b938      	cbnz	r0, 854a0 <memory_2_usb+0x14>
   85490:	4608      	mov	r0, r1
   85492:	4611      	mov	r1, r2
   85494:	f244 63ed 	movw	r3, #18157	; 0x46ed
   85498:	f2c0 0308 	movt	r3, #8
   8549c:	4798      	blx	r3
   8549e:	bd08      	pop	{r3, pc}
   854a0:	f04f 0001 	mov.w	r0, #1
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
   854a4:	bd08      	pop	{r3, pc}
   854a6:	bf00      	nop

000854a8 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
   854a8:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  status =
   854aa:	b938      	cbnz	r0, 854bc <usb_2_memory+0x14>
   854ac:	4608      	mov	r0, r1
   854ae:	4611      	mov	r1, r2
   854b0:	f244 73b9 	movw	r3, #18361	; 0x47b9
   854b4:	f2c0 0308 	movt	r3, #8
   854b8:	4798      	blx	r3
   854ba:	bd08      	pop	{r3, pc}
   854bc:	f04f 0001 	mov.w	r0, #1
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
   854c0:	bd08      	pop	{r3, pc}
   854c2:	bf00      	nop

000854c4 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   854c4:	f241 1328 	movw	r3, #4392	; 0x1128
   854c8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   854cc:	781a      	ldrb	r2, [r3, #0]
   854ce:	f102 30ff 	add.w	r0, r2, #4294967295
   854d2:	b2c1      	uxtb	r1, r0
   854d4:	7019      	strb	r1, [r3, #0]
   854d6:	4770      	bx	lr

000854d8 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   854d8:	f04f 0000 	mov.w	r0, #0
   854dc:	4770      	bx	lr
   854de:	bf00      	nop

000854e0 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   854e0:	f04f 0000 	mov.w	r0, #0
   854e4:	4770      	bx	lr
   854e6:	bf00      	nop

000854e8 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
   854e8:	4770      	bx	lr
   854ea:	bf00      	nop

000854ec <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
   854ec:	b530      	push	{r4, r5, lr}
   854ee:	b083      	sub	sp, #12

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   854f0:	f241 1340 	movw	r3, #4416	; 0x1140
   854f4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   854f8:	7818      	ldrb	r0, [r3, #0]
   854fa:	2800      	cmp	r0, #0
   854fc:	f040 80df 	bne.w	856be <udi_cdc_tx_send+0x1d2>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   85500:	f648 7171 	movw	r1, #36721	; 0x8f71
   85504:	f2c0 0108 	movt	r1, #8
   85508:	4788      	blx	r1
   8550a:	b160      	cbz	r0, 85526 <udi_cdc_tx_send+0x3a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   8550c:	f241 1434 	movw	r4, #4404	; 0x1134
   85510:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85514:	8824      	ldrh	r4, [r4, #0]
   85516:	f648 70d5 	movw	r0, #36821	; 0x8fd5
   8551a:	f2c0 0008 	movt	r0, #8
   8551e:	4780      	blx	r0
   85520:	4284      	cmp	r4, r0
   85522:	d10d      	bne.n	85540 <udi_cdc_tx_send+0x54>
   85524:	e0cb      	b.n	856be <udi_cdc_tx_send+0x1d2>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   85526:	f241 1234 	movw	r2, #4404	; 0x1134
   8552a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8552e:	8814      	ldrh	r4, [r2, #0]
   85530:	f648 73c5 	movw	r3, #36805	; 0x8fc5
   85534:	f2c0 0308 	movt	r3, #8
   85538:	4798      	blx	r3
   8553a:	4284      	cmp	r4, r0
   8553c:	f000 80bf 	beq.w	856be <udi_cdc_tx_send+0x1d2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85540:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   85544:	f1d5 0501 	rsbs	r5, r5, #1
   85548:	bf38      	it	cc
   8554a:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8554c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8554e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85552:	f240 2198 	movw	r1, #664	; 0x298
   85556:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8555a:	f04f 0200 	mov.w	r2, #0
   8555e:	700a      	strb	r2, [r1, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   85560:	f640 531c 	movw	r3, #3356	; 0xd1c
   85564:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85568:	781c      	ldrb	r4, [r3, #0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   8556a:	f640 5020 	movw	r0, #3360	; 0xd20
   8556e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85572:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
   85576:	bb79      	cbnz	r1, 855d8 <udi_cdc_tx_send+0xec>
		sof_zlp_counter++;
   85578:	f241 5354 	movw	r3, #5460	; 0x1554
   8557c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85580:	881a      	ldrh	r2, [r3, #0]
   85582:	f102 0201 	add.w	r2, r2, #1
   85586:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   85588:	f648 7071 	movw	r0, #36721	; 0x8f71
   8558c:	f2c0 0008 	movt	r0, #8
   85590:	4780      	blx	r0
   85592:	b930      	cbnz	r0, 855a2 <udi_cdc_tx_send+0xb6>
   85594:	f241 5154 	movw	r1, #5460	; 0x1554
   85598:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8559c:	880b      	ldrh	r3, [r1, #0]
   8559e:	2b63      	cmp	r3, #99	; 0x63
   855a0:	d90d      	bls.n	855be <udi_cdc_tx_send+0xd2>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   855a2:	f648 7271 	movw	r2, #36721	; 0x8f71
   855a6:	f2c0 0208 	movt	r2, #8
   855aa:	4790      	blx	r2
   855ac:	b1a0      	cbz	r0, 855d8 <udi_cdc_tx_send+0xec>
   855ae:	f241 5054 	movw	r0, #5460	; 0x1554
   855b2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   855b6:	8801      	ldrh	r1, [r0, #0]
   855b8:	f5b1 7f48 	cmp.w	r1, #800	; 0x320
   855bc:	d20c      	bcs.n	855d8 <udi_cdc_tx_send+0xec>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   855be:	2d00      	cmp	r5, #0
   855c0:	d07d      	beq.n	856be <udi_cdc_tx_send+0x1d2>
		cpu_irq_enable();
   855c2:	f240 2398 	movw	r3, #664	; 0x298
   855c6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   855ca:	f04f 0201 	mov.w	r2, #1
   855ce:	701a      	strb	r2, [r3, #0]
   855d0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   855d4:	b662      	cpsie	i
   855d6:	e072      	b.n	856be <udi_cdc_tx_send+0x1d2>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   855d8:	f241 5354 	movw	r3, #5460	; 0x1554
   855dc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   855e0:	f04f 0200 	mov.w	r2, #0
   855e4:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   855e6:	f241 1030 	movw	r0, #4400	; 0x1130
   855ea:	f2c2 0007 	movt	r0, #8199	; 0x2007
   855ee:	7801      	ldrb	r1, [r0, #0]
   855f0:	b949      	cbnz	r1, 85606 <udi_cdc_tx_send+0x11a>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   855f2:	4294      	cmp	r4, r2
   855f4:	bf14      	ite	ne
   855f6:	2200      	movne	r2, #0
   855f8:	2201      	moveq	r2, #1
   855fa:	f640 531c 	movw	r3, #3356	; 0xd1c
   855fe:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85602:	701a      	strb	r2, [r3, #0]
   85604:	e003      	b.n	8560e <udi_cdc_tx_send+0x122>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   85606:	f1d4 0401 	rsbs	r4, r4, #1
   8560a:	bf38      	it	cc
   8560c:	2400      	movcc	r4, #0
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   8560e:	f241 1040 	movw	r0, #4416	; 0x1140
   85612:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85616:	f04f 0201 	mov.w	r2, #1
   8561a:	7002      	strb	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8561c:	b13d      	cbz	r5, 8562e <udi_cdc_tx_send+0x142>
		cpu_irq_enable();
   8561e:	f240 2598 	movw	r5, #664	; 0x298
   85622:	f2c2 0507 	movt	r5, #8199	; 0x2007
   85626:	702a      	strb	r2, [r5, #0]
   85628:	f3bf 8f5f 	dmb	sy
   8562c:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   8562e:	4625      	mov	r5, r4
   85630:	f640 5120 	movw	r1, #3360	; 0xd20
   85634:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85638:	f831 4014 	ldrh.w	r4, [r1, r4, lsl #1]
   8563c:	f5b4 7400 	subs.w	r4, r4, #512	; 0x200
   85640:	bf18      	it	ne
   85642:	2401      	movne	r4, #1
	if (b_short_packet) {
   85644:	b1dc      	cbz	r4, 8567e <udi_cdc_tx_send+0x192>
		if (udd_is_high_speed()) {
   85646:	f648 7271 	movw	r2, #36721	; 0x8f71
   8564a:	f2c0 0208 	movt	r2, #8
   8564e:	4790      	blx	r2
   85650:	b150      	cbz	r0, 85668 <udi_cdc_tx_send+0x17c>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   85652:	f648 70d5 	movw	r0, #36821	; 0x8fd5
   85656:	f2c0 0008 	movt	r0, #8
   8565a:	4780      	blx	r0
   8565c:	f241 1234 	movw	r2, #4404	; 0x1134
   85660:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85664:	8010      	strh	r0, [r2, #0]
   85666:	e011      	b.n	8568c <udi_cdc_tx_send+0x1a0>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   85668:	f648 71c5 	movw	r1, #36805	; 0x8fc5
   8566c:	f2c0 0108 	movt	r1, #8
   85670:	4788      	blx	r1
   85672:	f241 1334 	movw	r3, #4404	; 0x1134
   85676:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8567a:	8018      	strh	r0, [r3, #0]
   8567c:	e006      	b.n	8568c <udi_cdc_tx_send+0x1a0>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   8567e:	f241 1334 	movw	r3, #4404	; 0x1134
   85682:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85686:	f04f 0000 	mov.w	r0, #0
   8568a:	8018      	strh	r0, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   8568c:	f640 5120 	movw	r1, #3360	; 0xd20
   85690:	f2c2 0107 	movt	r1, #8199	; 0x2007
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
   85694:	f831 3015 	ldrh.w	r3, [r1, r5, lsl #1]
   85698:	f245 60d9 	movw	r0, #22233	; 0x56d9
   8569c:	f2c0 0008 	movt	r0, #8
   856a0:	9000      	str	r0, [sp, #0]
   856a2:	f04f 0084 	mov.w	r0, #132	; 0x84
   856a6:	4621      	mov	r1, r4
   856a8:	f640 5424 	movw	r4, #3364	; 0xd24
   856ac:	f2c2 0407 	movt	r4, #8199	; 0x2007
   856b0:	eb04 2245 	add.w	r2, r4, r5, lsl #9
   856b4:	f249 2491 	movw	r4, #37521	; 0x9291
   856b8:	f2c0 0408 	movt	r4, #8
   856bc:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   856be:	b003      	add	sp, #12
   856c0:	bd30      	pop	{r4, r5, pc}
   856c2:	bf00      	nop

000856c4 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
   856c4:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
   856c6:	f04f 0000 	mov.w	r0, #0
   856ca:	f245 43ed 	movw	r3, #21741	; 0x54ed
   856ce:	f2c0 0308 	movt	r3, #8
   856d2:	4798      	blx	r3
   856d4:	bd08      	pop	{r3, pc}
   856d6:	bf00      	nop

000856d8 <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   856d8:	b508      	push	{r3, lr}
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   856da:	b9e8      	cbnz	r0, 85718 <udi_cdc_data_sent+0x40>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   856dc:	f640 531c 	movw	r3, #3356	; 0xd1c
   856e0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   856e4:	7819      	ldrb	r1, [r3, #0]
   856e6:	f1d1 0101 	rsbs	r1, r1, #1
   856ea:	bf38      	it	cc
   856ec:	2100      	movcc	r1, #0
   856ee:	f640 5320 	movw	r3, #3360	; 0xd20
   856f2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   856f6:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   856fa:	f241 1130 	movw	r1, #4400	; 0x1130
   856fe:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85702:	7008      	strb	r0, [r1, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   85704:	f241 1240 	movw	r2, #4416	; 0x1140
   85708:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8570c:	7010      	strb	r0, [r2, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
   8570e:	f245 43ed 	movw	r3, #21741	; 0x54ed
   85712:	f2c0 0308 	movt	r3, #8
   85716:	4798      	blx	r3
   85718:	bd08      	pop	{r3, pc}
   8571a:	bf00      	nop

0008571c <udi_cdc_comm_setup>:
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
}

bool udi_cdc_comm_setup(void)
{
   8571c:	b508      	push	{r3, lr}
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
   8571e:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   85722:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85726:	7818      	ldrb	r0, [r3, #0]
   85728:	f010 0f80 	tst.w	r0, #128	; 0x80
   8572c:	d020      	beq.n	85770 <udi_cdc_comm_setup+0x54>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8572e:	f000 0160 	and.w	r1, r0, #96	; 0x60
   85732:	2920      	cmp	r1, #32
   85734:	d156      	bne.n	857e4 <udi_cdc_comm_setup+0xc8>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   85736:	f641 42cc 	movw	r2, #7372	; 0x1ccc
   8573a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8573e:	7853      	ldrb	r3, [r2, #1]
   85740:	2b21      	cmp	r3, #33	; 0x21
   85742:	d152      	bne.n	857ea <udi_cdc_comm_setup+0xce>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   85744:	f641 40cc 	movw	r0, #7372	; 0x1ccc
   85748:	f2c2 0007 	movt	r0, #8199	; 0x2007
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   8574c:	88c1      	ldrh	r1, [r0, #6]
   8574e:	2907      	cmp	r1, #7
   85750:	d14e      	bne.n	857f0 <udi_cdc_comm_setup+0xd4>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
   85752:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   85756:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8575a:	f640 5210 	movw	r2, #3344	; 0xd10
   8575e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85762:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   85764:	f04f 0007 	mov.w	r0, #7
   85768:	8198      	strh	r0, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   8576a:	f04f 0001 	mov.w	r0, #1
   8576e:	bd08      	pop	{r3, pc}
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   85770:	f000 0160 	and.w	r1, r0, #96	; 0x60
   85774:	2920      	cmp	r1, #32
   85776:	d13e      	bne.n	857f6 <udi_cdc_comm_setup+0xda>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   85778:	f641 42cc 	movw	r2, #7372	; 0x1ccc
   8577c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85780:	7853      	ldrb	r3, [r2, #1]
   85782:	2b20      	cmp	r3, #32
   85784:	d002      	beq.n	8578c <udi_cdc_comm_setup+0x70>
   85786:	2b22      	cmp	r3, #34	; 0x22
   85788:	d138      	bne.n	857fc <udi_cdc_comm_setup+0xe0>
   8578a:	e01a      	b.n	857c2 <udi_cdc_comm_setup+0xa6>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   8578c:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   85790:	f2c2 0307 	movt	r3, #8199	; 0x2007
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   85794:	88d8      	ldrh	r0, [r3, #6]
   85796:	2807      	cmp	r0, #7
   85798:	d133      	bne.n	85802 <udi_cdc_comm_setup+0xe6>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
   8579a:	f641 41cc 	movw	r1, #7372	; 0x1ccc
   8579e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   857a2:	f245 42e9 	movw	r2, #21737	; 0x54e9
   857a6:	f2c0 0208 	movt	r2, #8
   857aa:	610a      	str	r2, [r1, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
   857ac:	f640 5310 	movw	r3, #3344	; 0xd10
   857b0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   857b4:	608b      	str	r3, [r1, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   857b6:	f04f 0007 	mov.w	r0, #7
   857ba:	8188      	strh	r0, [r1, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   857bc:	f04f 0001 	mov.w	r0, #1
   857c0:	bd08      	pop	{r3, pc}
			case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
				// According cdc spec 1.1 chapter 6.2.14
				UDI_CDC_SET_DTR_EXT(port, (0 !=
   857c2:	f641 40cc 	movw	r0, #7372	; 0x1ccc
   857c6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   857ca:	7881      	ldrb	r1, [r0, #2]
   857cc:	f04f 0000 	mov.w	r0, #0
   857d0:	f001 0101 	and.w	r1, r1, #1
   857d4:	f644 62ed 	movw	r2, #20205	; 0x4eed
   857d8:	f2c0 0208 	movt	r2, #8
   857dc:	4790      	blx	r2
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
   857de:	f04f 0001 	mov.w	r0, #1
   857e2:	bd08      	pop	{r3, pc}
			}
		}
	}
	return false;  // request Not supported
   857e4:	f04f 0000 	mov.w	r0, #0
   857e8:	bd08      	pop	{r3, pc}
   857ea:	f04f 0000 	mov.w	r0, #0
   857ee:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   857f0:	f04f 0000 	mov.w	r0, #0
   857f4:	bd08      	pop	{r3, pc}
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
   857f6:	f04f 0000 	mov.w	r0, #0
   857fa:	bd08      	pop	{r3, pc}
   857fc:	f04f 0000 	mov.w	r0, #0
   85800:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   85802:	f04f 0000 	mov.w	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
   85806:	bd08      	pop	{r3, pc}

00085808 <udi_cdc_data_disable>:
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
}

void udi_cdc_data_disable(void)
{
   85808:	b508      	push	{r3, lr}
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
   8580a:	f640 5318 	movw	r3, #3352	; 0xd18
   8580e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85812:	781a      	ldrb	r2, [r3, #0]
   85814:	f102 30ff 	add.w	r0, r2, #4294967295
   85818:	b2c1      	uxtb	r1, r0
   8581a:	7019      	strb	r1, [r3, #0]
	port = udi_cdc_nb_data_enabled;
   8581c:	7818      	ldrb	r0, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
   8581e:	f649 63fd 	movw	r3, #40701	; 0x9efd
   85822:	f2c0 0308 	movt	r3, #8
   85826:	4798      	blx	r3
	udi_cdc_data_running = false;
   85828:	f241 1038 	movw	r0, #4408	; 0x1138
   8582c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85830:	f04f 0200 	mov.w	r2, #0
   85834:	7002      	strb	r2, [r0, #0]
   85836:	bd08      	pop	{r3, pc}

00085838 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
   85838:	b508      	push	{r3, lr}
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
   8583a:	f04f 0000 	mov.w	r0, #0
   8583e:	f241 1328 	movw	r3, #4392	; 0x1128
   85842:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85846:	7018      	strb	r0, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
   85848:	f241 5158 	movw	r1, #5464	; 0x1558
   8584c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85850:	8008      	strh	r0, [r1, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
   85852:	f241 1344 	movw	r3, #4420	; 0x1144
   85856:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8585a:	f04f 01a1 	mov.w	r1, #161	; 0xa1
   8585e:	7019      	strb	r1, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   85860:	f04f 0120 	mov.w	r1, #32
   85864:	7059      	strb	r1, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   85866:	8058      	strh	r0, [r3, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   85868:	8098      	strh	r0, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   8586a:	f04f 0102 	mov.w	r1, #2
   8586e:	80d9      	strh	r1, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   85870:	8118      	strh	r0, [r3, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   85872:	f640 5310 	movw	r3, #3344	; 0xd10
   85876:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8587a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   8587e:	6019      	str	r1, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   85880:	7118      	strb	r0, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   85882:	7158      	strb	r0, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   85884:	f04f 0208 	mov.w	r2, #8
   85888:	719a      	strb	r2, [r3, #6]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
   8588a:	f649 63ed 	movw	r3, #40685	; 0x9eed
   8588e:	f2c0 0308 	movt	r3, #8
   85892:	4798      	blx	r3
   85894:	b158      	cbz	r0, 858ae <udi_cdc_comm_enable+0x76>
		return false;
	}
	udi_cdc_nb_comm_enabled++;
   85896:	f241 1028 	movw	r0, #4392	; 0x1128
   8589a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8589e:	7801      	ldrb	r1, [r0, #0]
   858a0:	f101 0101 	add.w	r1, r1, #1
   858a4:	b2ca      	uxtb	r2, r1
   858a6:	7002      	strb	r2, [r0, #0]
	return true;
   858a8:	f04f 0001 	mov.w	r0, #1
   858ac:	bd08      	pop	{r3, pc}
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
   858ae:	f04f 0000 	mov.w	r0, #0
	}
	udi_cdc_nb_comm_enabled++;
	return true;
}
   858b2:	bd08      	pop	{r3, pc}

000858b4 <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   858b4:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   858b8:	b672      	cpsid	i
   858ba:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   858be:	f240 2298 	movw	r2, #664	; 0x298
   858c2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   858c6:	f04f 0100 	mov.w	r1, #0
   858ca:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   858cc:	f241 102c 	movw	r0, #4396	; 0x112c
   858d0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   858d4:	8802      	ldrh	r2, [r0, #0]
   858d6:	b290      	uxth	r0, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   858d8:	f241 113c 	movw	r1, #4412	; 0x113c
   858dc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   858e0:	7809      	ldrb	r1, [r1, #0]
   858e2:	f241 1224 	movw	r2, #4388	; 0x1124
   858e6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   858ea:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   858ee:	1a08      	subs	r0, r1, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   858f0:	b94b      	cbnz	r3, 85906 <udi_cdc_multi_get_nb_received_data+0x52>
		cpu_irq_enable();
   858f2:	f240 2398 	movw	r3, #664	; 0x298
   858f6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   858fa:	f04f 0201 	mov.w	r2, #1
   858fe:	701a      	strb	r2, [r3, #0]
   85900:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   85904:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   85906:	4770      	bx	lr

00085908 <udi_cdc_get_nb_received_data>:

iram_size_t udi_cdc_get_nb_received_data(void)
{
   85908:	b508      	push	{r3, lr}
	return udi_cdc_multi_get_nb_received_data(0);
   8590a:	f04f 0000 	mov.w	r0, #0
   8590e:	f645 03b5 	movw	r3, #22709	; 0x58b5
   85912:	f2c0 0308 	movt	r3, #8
   85916:	4798      	blx	r3
}
   85918:	bd08      	pop	{r3, pc}
   8591a:	bf00      	nop

0008591c <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   8591c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   8591e:	f645 03b5 	movw	r3, #22709	; 0x58b5
   85922:	f2c0 0308 	movt	r3, #8
   85926:	4798      	blx	r3
}
   85928:	3000      	adds	r0, #0
   8592a:	bf18      	it	ne
   8592c:	2001      	movne	r0, #1
   8592e:	bd08      	pop	{r3, pc}

00085930 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
   85930:	b510      	push	{r4, lr}
   85932:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85934:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   85938:	f1d3 0001 	rsbs	r0, r3, #1
   8593c:	bf38      	it	cc
   8593e:	2000      	movcc	r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   85940:	b672      	cpsid	i
   85942:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85946:	f240 2298 	movw	r2, #664	; 0x298
   8594a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8594e:	f04f 0100 	mov.w	r1, #0
   85952:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   85954:	f241 143c 	movw	r4, #4412	; 0x113c
   85958:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8595c:	7824      	ldrb	r4, [r4, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   8595e:	f241 5350 	movw	r3, #5456	; 0x1550
   85962:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85966:	781a      	ldrb	r2, [r3, #0]
   85968:	b96a      	cbnz	r2, 85986 <udi_cdc_rx_start+0x56>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   8596a:	f241 112c 	movw	r1, #4396	; 0x112c
   8596e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85972:	880b      	ldrh	r3, [r1, #0]
   85974:	b29a      	uxth	r2, r3
   85976:	f241 1124 	movw	r1, #4388	; 0x1124
   8597a:	f2c2 0107 	movt	r1, #8199	; 0x2007
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
   8597e:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
   85982:	4293      	cmp	r3, r2
   85984:	d90e      	bls.n	859a4 <udi_cdc_rx_start+0x74>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85986:	2800      	cmp	r0, #0
   85988:	d052      	beq.n	85a30 <udi_cdc_rx_start+0x100>
		cpu_irq_enable();
   8598a:	f240 2198 	movw	r1, #664	; 0x298
   8598e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85992:	f04f 0201 	mov.w	r2, #1
   85996:	700a      	strb	r2, [r1, #0]
   85998:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8599c:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   8599e:	f04f 0000 	mov.w	r0, #0
   859a2:	e047      	b.n	85a34 <udi_cdc_rx_start+0x104>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
   859a4:	f241 122c 	movw	r2, #4396	; 0x112c
   859a8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   859ac:	f04f 0100 	mov.w	r1, #0
   859b0:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   859b2:	428c      	cmp	r4, r1
   859b4:	bf14      	ite	ne
   859b6:	2100      	movne	r1, #0
   859b8:	2101      	moveq	r1, #1
   859ba:	f241 133c 	movw	r3, #4412	; 0x113c
   859be:	f2c2 0307 	movt	r3, #8199	; 0x2007
   859c2:	7019      	strb	r1, [r3, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
   859c4:	f241 5250 	movw	r2, #5456	; 0x1550
   859c8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   859cc:	f04f 0101 	mov.w	r1, #1
   859d0:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   859d2:	b138      	cbz	r0, 859e4 <udi_cdc_rx_start+0xb4>
		cpu_irq_enable();
   859d4:	f240 2098 	movw	r0, #664	; 0x298
   859d8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   859dc:	7001      	strb	r1, [r0, #0]
   859de:	f3bf 8f5f 	dmb	sy
   859e2:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
   859e4:	f04f 0000 	mov.w	r0, #0
   859e8:	f645 121d 	movw	r2, #22813	; 0x591d
   859ec:	f2c0 0208 	movt	r2, #8
   859f0:	4790      	blx	r2
   859f2:	b130      	cbz	r0, 85a02 <udi_cdc_rx_start+0xd2>
		UDI_CDC_RX_NOTIFY(port);
   859f4:	f04f 0000 	mov.w	r0, #0
   859f8:	f644 7111 	movw	r1, #20241	; 0x4f11
   859fc:	f2c0 0108 	movt	r1, #8
   85a00:	4788      	blx	r1
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
   85a02:	f645 2039 	movw	r0, #23097	; 0x5a39
   85a06:	f2c0 0008 	movt	r0, #8
   85a0a:	9000      	str	r0, [sp, #0]
   85a0c:	f04f 0005 	mov.w	r0, #5
   85a10:	f04f 0101 	mov.w	r1, #1
   85a14:	f241 1350 	movw	r3, #4432	; 0x1150
   85a18:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85a1c:	eb03 2244 	add.w	r2, r3, r4, lsl #9
   85a20:	f44f 7300 	mov.w	r3, #512	; 0x200
   85a24:	f249 2491 	movw	r4, #37521	; 0x9291
   85a28:	f2c0 0408 	movt	r4, #8
   85a2c:	47a0      	blx	r4
   85a2e:	e001      	b.n	85a34 <udi_cdc_rx_start+0x104>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   85a30:	f04f 0000 	mov.w	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
   85a34:	b002      	add	sp, #8
   85a36:	bd10      	pop	{r4, pc}

00085a38 <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   85a38:	b510      	push	{r4, lr}
   85a3a:	b082      	sub	sp, #8
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   85a3c:	bb88      	cbnz	r0, 85aa2 <udi_cdc_data_received+0x6a>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   85a3e:	f241 133c 	movw	r3, #4412	; 0x113c
   85a42:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85a46:	7818      	ldrb	r0, [r3, #0]
   85a48:	f1d0 0301 	rsbs	r3, r0, #1
   85a4c:	bf38      	it	cc
   85a4e:	2300      	movcc	r3, #0
	if (!n) {
   85a50:	b9a9      	cbnz	r1, 85a7e <udi_cdc_data_received+0x46>
		udd_ep_run( ep,
   85a52:	f645 2439 	movw	r4, #23097	; 0x5a39
   85a56:	f2c0 0408 	movt	r4, #8
   85a5a:	9400      	str	r4, [sp, #0]
   85a5c:	4610      	mov	r0, r2
   85a5e:	f04f 0101 	mov.w	r1, #1
   85a62:	f241 1250 	movw	r2, #4432	; 0x1150
   85a66:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85a6a:	eb02 2243 	add.w	r2, r2, r3, lsl #9
   85a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
   85a72:	f249 2491 	movw	r4, #37521	; 0x9291
   85a76:	f2c0 0408 	movt	r4, #8
   85a7a:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
   85a7c:	e011      	b.n	85aa2 <udi_cdc_data_received+0x6a>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   85a7e:	f241 1224 	movw	r2, #4388	; 0x1124
   85a82:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85a86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   85a8a:	f04f 0000 	mov.w	r0, #0
   85a8e:	f241 5150 	movw	r1, #5456	; 0x1550
   85a92:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85a96:	7008      	strb	r0, [r1, #0]
	udi_cdc_rx_start(port);
   85a98:	f645 1331 	movw	r3, #22833	; 0x5931
   85a9c:	f2c0 0308 	movt	r3, #8
   85aa0:	4798      	blx	r3
}
   85aa2:	b002      	add	sp, #8
   85aa4:	bd10      	pop	{r4, pc}
   85aa6:	bf00      	nop

00085aa8 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
   85aa8:	b538      	push	{r3, r4, r5, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
   85aaa:	f04f 0400 	mov.w	r4, #0
   85aae:	f640 5318 	movw	r3, #3352	; 0xd18
   85ab2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85ab6:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
   85ab8:	f241 1040 	movw	r0, #4416	; 0x1140
   85abc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85ac0:	7004      	strb	r4, [r0, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   85ac2:	f241 1130 	movw	r1, #4400	; 0x1130
   85ac6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85aca:	700c      	strb	r4, [r1, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   85acc:	f640 521c 	movw	r2, #3356	; 0xd1c
   85ad0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85ad4:	7014      	strb	r4, [r2, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   85ad6:	f640 5320 	movw	r3, #3360	; 0xd20
   85ada:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85ade:	4625      	mov	r5, r4
   85ae0:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   85ae2:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   85ae4:	f241 1034 	movw	r0, #4404	; 0x1134
   85ae8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85aec:	8004      	strh	r4, [r0, #0]
	udi_cdc_tx_send(port);
   85aee:	4620      	mov	r0, r4
   85af0:	f245 41ed 	movw	r1, #21741	; 0x54ed
   85af4:	f2c0 0108 	movt	r1, #8
   85af8:	4788      	blx	r1

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
   85afa:	f241 5250 	movw	r2, #5456	; 0x1550
   85afe:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85b02:	7014      	strb	r4, [r2, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   85b04:	f241 133c 	movw	r3, #4412	; 0x113c
   85b08:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85b0c:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   85b0e:	f241 1024 	movw	r0, #4388	; 0x1124
   85b12:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85b16:	8004      	strh	r4, [r0, #0]
	udi_cdc_rx_pos[port] = 0;
   85b18:	f241 112c 	movw	r1, #4396	; 0x112c
   85b1c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85b20:	800c      	strh	r4, [r1, #0]
	if (!udi_cdc_rx_start(port)) {
   85b22:	4620      	mov	r0, r4
   85b24:	f645 1231 	movw	r2, #22833	; 0x5931
   85b28:	f2c0 0208 	movt	r2, #8
   85b2c:	4790      	blx	r2
   85b2e:	b198      	cbz	r0, 85b58 <udi_cdc_data_enable+0xb0>
		return false;
	}
	udi_cdc_nb_data_enabled++;
   85b30:	f640 5318 	movw	r3, #3352	; 0xd18
   85b34:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85b38:	7818      	ldrb	r0, [r3, #0]
   85b3a:	f100 0001 	add.w	r0, r0, #1
   85b3e:	b2c1      	uxtb	r1, r0
   85b40:	7019      	strb	r1, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   85b42:	781a      	ldrb	r2, [r3, #0]
   85b44:	2a01      	cmp	r2, #1
   85b46:	d10a      	bne.n	85b5e <udi_cdc_data_enable+0xb6>
		udi_cdc_data_running = true;
   85b48:	f04f 0001 	mov.w	r0, #1
   85b4c:	f241 1338 	movw	r3, #4408	; 0x1138
   85b50:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85b54:	7018      	strb	r0, [r3, #0]
   85b56:	bd38      	pop	{r3, r4, r5, pc}
	udi_cdc_rx_trans_ongoing[port] = false;
	udi_cdc_rx_buf_sel[port] = 0;
	udi_cdc_rx_buf_nb[port][0] = 0;
	udi_cdc_rx_pos[port] = 0;
	if (!udi_cdc_rx_start(port)) {
		return false;
   85b58:	f04f 0000 	mov.w	r0, #0
   85b5c:	bd38      	pop	{r3, r4, r5, pc}
	}
	udi_cdc_nb_data_enabled++;
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
		udi_cdc_data_running = true;
	}
	return true;
   85b5e:	f04f 0001 	mov.w	r0, #1
}
   85b62:	bd38      	pop	{r3, r4, r5, pc}

00085b64 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   85b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85b68:	b083      	sub	sp, #12
   85b6a:	4615      	mov	r5, r2
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
   85b6c:	4688      	mov	r8, r1
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   85b6e:	f240 2798 	movw	r7, #664	; 0x298
   85b72:	f2c2 0707 	movt	r7, #8199	; 0x2007
   85b76:	f04f 0b00 	mov.w	fp, #0
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   85b7a:	f241 162c 	movw	r6, #4396	; 0x112c
   85b7e:	f2c2 0607 	movt	r6, #8199	; 0x2007
	buf_sel = udi_cdc_rx_buf_sel[port];
   85b82:	f241 1a3c 	movw	sl, #4412	; 0x113c
   85b86:	f2c2 0a07 	movt	sl, #8199	; 0x2007
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
   85b8a:	f241 1924 	movw	r9, #4388	; 0x1124
   85b8e:	f2c2 0907 	movt	r9, #8199	; 0x2007
	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   85b92:	f241 1350 	movw	r3, #4432	; 0x1150
   85b96:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85b9a:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85b9c:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   85ba0:	b672      	cpsid	i
   85ba2:	f3bf 8f5f 	dmb	sy
   85ba6:	f887 b000 	strb.w	fp, [r7]
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   85baa:	8830      	ldrh	r0, [r6, #0]
   85bac:	b283      	uxth	r3, r0
	buf_sel = udi_cdc_rx_buf_sel[port];
   85bae:	f89a 1000 	ldrb.w	r1, [sl]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85bb2:	b92a      	cbnz	r2, 85bc0 <udi_cdc_multi_read_buf+0x5c>
		cpu_irq_enable();
   85bb4:	f04f 0401 	mov.w	r4, #1
   85bb8:	703c      	strb	r4, [r7, #0]
   85bba:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   85bbe:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
   85bc0:	f839 4011 	ldrh.w	r4, [r9, r1, lsl #1]
   85bc4:	42a3      	cmp	r3, r4
   85bc6:	d307      	bcc.n	85bd8 <udi_cdc_multi_read_buf+0x74>
		if (!udi_cdc_data_running) {
   85bc8:	f241 1038 	movw	r0, #4408	; 0x1138
   85bcc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85bd0:	7801      	ldrb	r1, [r0, #0]
   85bd2:	2900      	cmp	r1, #0
   85bd4:	d1e2      	bne.n	85b9c <udi_cdc_multi_read_buf+0x38>
   85bd6:	e01d      	b.n	85c14 <udi_cdc_multi_read_buf+0xb0>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   85bd8:	1ae4      	subs	r4, r4, r3
   85bda:	42a5      	cmp	r5, r4
   85bdc:	bf38      	it	cc
   85bde:	462c      	movcc	r4, r5
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   85be0:	eb03 2241 	add.w	r2, r3, r1, lsl #9
   85be4:	4640      	mov	r0, r8
   85be6:	9b01      	ldr	r3, [sp, #4]
   85be8:	1899      	adds	r1, r3, r2
   85bea:	4622      	mov	r2, r4
   85bec:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   85bf0:	f2c0 0308 	movt	r3, #8
   85bf4:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   85bf6:	8830      	ldrh	r0, [r6, #0]
   85bf8:	1821      	adds	r1, r4, r0
   85bfa:	b28a      	uxth	r2, r1
   85bfc:	8032      	strh	r2, [r6, #0]
	ptr_buf += copy_nb;
   85bfe:	44a0      	add	r8, r4
	size -= copy_nb;
   85c00:	1b2d      	subs	r5, r5, r4
	udi_cdc_rx_start(port);
   85c02:	f04f 0000 	mov.w	r0, #0
   85c06:	f645 1331 	movw	r3, #22833	; 0x5931
   85c0a:	f2c0 0308 	movt	r3, #8
   85c0e:	4798      	blx	r3

	if (size) {
   85c10:	2d00      	cmp	r5, #0
   85c12:	d1c3      	bne.n	85b9c <udi_cdc_multi_read_buf+0x38>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   85c14:	4628      	mov	r0, r5
   85c16:	b003      	add	sp, #12
   85c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085c1c <udi_cdc_read_buf>:

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
   85c1c:	b508      	push	{r3, lr}
   85c1e:	4603      	mov	r3, r0
   85c20:	460a      	mov	r2, r1
	return udi_cdc_multi_read_buf(0, buf, size);
   85c22:	f04f 0000 	mov.w	r0, #0
   85c26:	4619      	mov	r1, r3
   85c28:	f645 3365 	movw	r3, #23397	; 0x5b65
   85c2c:	f2c0 0308 	movt	r3, #8
   85c30:	4798      	blx	r3
}
   85c32:	bd08      	pop	{r3, pc}

00085c34 <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
   85c34:	b410      	push	{r4}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85c36:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   85c3a:	b672      	cpsid	i
   85c3c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   85c40:	f240 2398 	movw	r3, #664	; 0x298
   85c44:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85c48:	f04f 0200 	mov.w	r2, #0
   85c4c:	701a      	strb	r2, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   85c4e:	f640 501c 	movw	r0, #3356	; 0xd1c
   85c52:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85c56:	7801      	ldrb	r1, [r0, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   85c58:	f640 5220 	movw	r2, #3360	; 0xd20
   85c5c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85c60:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
   85c64:	f1d1 0101 	rsbs	r1, r1, #1
   85c68:	bf38      	it	cc
   85c6a:	2100      	movcc	r1, #0
   85c6c:	b2c8      	uxtb	r0, r1
   85c6e:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   85c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85c76:	d11b      	bne.n	85cb0 <udi_cdc_multi_get_free_tx_buffer+0x7c>
		if ((!udi_cdc_tx_trans_ongoing[port])
   85c78:	f241 1240 	movw	r2, #4416	; 0x1140
   85c7c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85c80:	7812      	ldrb	r2, [r2, #0]
   85c82:	b9aa      	cbnz	r2, 85cb0 <udi_cdc_multi_get_free_tx_buffer+0x7c>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   85c84:	f241 1230 	movw	r2, #4400	; 0x1130
   85c88:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85c8c:	7812      	ldrb	r2, [r2, #0]
   85c8e:	b97a      	cbnz	r2, 85cb0 <udi_cdc_multi_get_free_tx_buffer+0x7c>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
   85c90:	f241 1330 	movw	r3, #4400	; 0x1130
   85c94:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85c98:	f04f 0001 	mov.w	r0, #1
   85c9c:	7018      	strb	r0, [r3, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85c9e:	f640 521c 	movw	r2, #3356	; 0xd1c
   85ca2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85ca6:	7011      	strb	r1, [r2, #0]
			buf_sel_nb = 0;
			buf_nosel_nb = UDI_CDC_TX_BUFFERS;
   85ca8:	f44f 7000 	mov.w	r0, #512	; 0x200
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
   85cac:	f04f 0300 	mov.w	r3, #0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85cb0:	b94c      	cbnz	r4, 85cc6 <udi_cdc_multi_get_free_tx_buffer+0x92>
		cpu_irq_enable();
   85cb2:	f240 2298 	movw	r2, #664	; 0x298
   85cb6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85cba:	f04f 0101 	mov.w	r1, #1
   85cbe:	7011      	strb	r1, [r2, #0]
   85cc0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   85cc4:	b662      	cpsie	i
iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
   85cc6:	18c0      	adds	r0, r0, r3
		}
	}
	cpu_irq_restore(flags);

	return (UDI_CDC_TX_BUFFERS - buf_sel_nb) + (UDI_CDC_TX_BUFFERS - buf_nosel_nb);
}
   85cc8:	f5c0 6080 	rsb	r0, r0, #1024	; 0x400
   85ccc:	bc10      	pop	{r4}
   85cce:	4770      	bx	lr

00085cd0 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   85cd0:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   85cd2:	f645 4335 	movw	r3, #23605	; 0x5c35
   85cd6:	f2c0 0308 	movt	r3, #8
   85cda:	4798      	blx	r3
}
   85cdc:	3000      	adds	r0, #0
   85cde:	bf18      	it	ne
   85ce0:	2001      	movne	r0, #1
   85ce2:	bd08      	pop	{r3, pc}

00085ce4 <udi_cdc_multi_write_buf>:
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
   85ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85ce8:	b083      	sub	sp, #12
   85cea:	4615      	mov	r5, r2

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
   85cec:	f640 5310 	movw	r3, #3344	; 0xd10
   85cf0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85cf4:	7998      	ldrb	r0, [r3, #6]
   85cf6:	2809      	cmp	r0, #9
		size *=2;
   85cf8:	bf08      	it	eq
   85cfa:	0055      	lsleq	r5, r2, #1
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
   85cfc:	4689      	mov	r9, r1
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   85cfe:	f04f 0800 	mov.w	r8, #0
		if (!udi_cdc_data_running) {
   85d02:	f241 1138 	movw	r1, #4408	; 0x1138
   85d06:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85d0a:	9101      	str	r1, [sp, #4]
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   85d0c:	f240 2298 	movw	r2, #664	; 0x298
   85d10:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85d14:	9200      	str	r2, [sp, #0]
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   85d16:	4640      	mov	r0, r8
   85d18:	f645 43d1 	movw	r3, #23761	; 0x5cd1
   85d1c:	f2c0 0308 	movt	r3, #8
   85d20:	4798      	blx	r3
   85d22:	b920      	cbnz	r0, 85d2e <udi_cdc_multi_write_buf+0x4a>
		if (!udi_cdc_data_running) {
   85d24:	9801      	ldr	r0, [sp, #4]
   85d26:	7803      	ldrb	r3, [r0, #0]
   85d28:	2b00      	cmp	r3, #0
   85d2a:	d1f4      	bne.n	85d16 <udi_cdc_multi_write_buf+0x32>
   85d2c:	e035      	b.n	85d9a <udi_cdc_multi_write_buf+0xb6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85d2e:	f3ef 8b10 	mrs	fp, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   85d32:	b672      	cpsid	i
   85d34:	f3bf 8f5f 	dmb	sy
   85d38:	9c00      	ldr	r4, [sp, #0]
   85d3a:	f884 8000 	strb.w	r8, [r4]
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   85d3e:	f640 561c 	movw	r6, #3356	; 0xd1c
   85d42:	f2c2 0607 	movt	r6, #8199	; 0x2007
   85d46:	7836      	ldrb	r6, [r6, #0]
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   85d48:	f640 5a20 	movw	sl, #3360	; 0xd20
   85d4c:	f2c2 0a07 	movt	sl, #8199	; 0x2007
   85d50:	f83a 7016 	ldrh.w	r7, [sl, r6, lsl #1]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
   85d54:	f5c7 7400 	rsb	r4, r7, #512	; 0x200
   85d58:	42a5      	cmp	r5, r4
   85d5a:	bf38      	it	cc
   85d5c:	462c      	movcc	r4, r5
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
   85d5e:	eb07 2146 	add.w	r1, r7, r6, lsl #9
   85d62:	f640 5024 	movw	r0, #3364	; 0xd24
   85d66:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85d6a:	1840      	adds	r0, r0, r1
   85d6c:	4649      	mov	r1, r9
   85d6e:	4622      	mov	r2, r4
   85d70:	f64a 23b1 	movw	r3, #43697	; 0xaab1
   85d74:	f2c0 0308 	movt	r3, #8
   85d78:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
   85d7a:	193f      	adds	r7, r7, r4
   85d7c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85d80:	f1bb 0f00 	cmp.w	fp, #0
   85d84:	d106      	bne.n	85d94 <udi_cdc_multi_write_buf+0xb0>
		cpu_irq_enable();
   85d86:	f04f 0101 	mov.w	r1, #1
   85d8a:	9a00      	ldr	r2, [sp, #0]
   85d8c:	7011      	strb	r1, [r2, #0]
   85d8e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   85d92:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
   85d94:	44a1      	add	r9, r4
	size -= copy_nb;

	if (size) {
   85d96:	1b2d      	subs	r5, r5, r4
   85d98:	d1bd      	bne.n	85d16 <udi_cdc_multi_write_buf+0x32>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
}
   85d9a:	4628      	mov	r0, r5
   85d9c:	b003      	add	sp, #12
   85d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85da2:	bf00      	nop

00085da4 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
   85da4:	b508      	push	{r3, lr}
   85da6:	4603      	mov	r3, r0
   85da8:	460a      	mov	r2, r1
	return udi_cdc_multi_write_buf(0, buf, size);
   85daa:	f04f 0000 	mov.w	r0, #0
   85dae:	4619      	mov	r1, r3
   85db0:	f645 43e5 	movw	r3, #23781	; 0x5ce5
   85db4:	f2c0 0308 	movt	r3, #8
   85db8:	4798      	blx	r3
}
   85dba:	bd08      	pop	{r3, pc}

00085dbc <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
   85dbc:	f04f 0000 	mov.w	r0, #0
   85dc0:	4770      	bx	lr
   85dc2:	bf00      	nop

00085dc4 <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
   85dc4:	3000      	adds	r0, #0
   85dc6:	bf18      	it	ne
   85dc8:	2001      	movne	r0, #1
   85dca:	f641 43c9 	movw	r3, #7369	; 0x1cc9
   85dce:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85dd2:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
   85dd4:	f240 210c 	movw	r1, #524	; 0x20c
   85dd8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85ddc:	f04f 0201 	mov.w	r2, #1
   85de0:	700a      	strb	r2, [r1, #0]
   85de2:	4770      	bx	lr

00085de4 <udi_msc_clear_sense>:
//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
   85de4:	f241 52a0 	movw	r2, #5536	; 0x15a0
   85de8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85dec:	f04f 0300 	mov.w	r3, #0
   85df0:	4611      	mov	r1, r2
   85df2:	f841 3b04 	str.w	r3, [r1], #4
   85df6:	6053      	str	r3, [r2, #4]
   85df8:	f101 0104 	add.w	r1, r1, #4
   85dfc:	f841 3b04 	str.w	r3, [r1], #4
   85e00:	f841 3b04 	str.w	r3, [r1], #4
   85e04:	800b      	strh	r3, [r1, #0]
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
   85e06:	f04f 00f0 	mov.w	r0, #240	; 0xf0
   85e0a:	7010      	strb	r0, [r2, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
   85e0c:	f04f 030a 	mov.w	r3, #10
   85e10:	71d3      	strb	r3, [r2, #7]
   85e12:	4770      	bx	lr

00085e14 <udi_msc_sense_pass>:
	udi_msc_sense.AddSenseCode = add_sense >> 8;
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
}

static void udi_msc_sense_pass(void)
{
   85e14:	b508      	push	{r3, lr}
	udi_msc_clear_sense();
   85e16:	f645 53e5 	movw	r3, #24037	; 0x5de5
   85e1a:	f2c0 0308 	movt	r3, #8
   85e1e:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
   85e20:	f240 2048 	movw	r0, #584	; 0x248
   85e24:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85e28:	f04f 0200 	mov.w	r2, #0
   85e2c:	7302      	strb	r2, [r0, #12]
   85e2e:	bd08      	pop	{r3, pc}

00085e30 <udi_msc_sense_fail>:
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
}

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
   85e30:	b570      	push	{r4, r5, r6, lr}
   85e32:	4606      	mov	r6, r0
   85e34:	460d      	mov	r5, r1
   85e36:	4614      	mov	r4, r2
	udi_msc_clear_sense();
   85e38:	f645 53e5 	movw	r3, #24037	; 0x5de5
   85e3c:	f2c0 0308 	movt	r3, #8
   85e40:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
   85e42:	f240 2048 	movw	r0, #584	; 0x248
   85e46:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85e4a:	f04f 0201 	mov.w	r2, #1
   85e4e:	7302      	strb	r2, [r0, #12]
	udi_msc_sense.sense_flag_key = sense_key;
   85e50:	f241 51a0 	movw	r1, #5536	; 0x15a0
   85e54:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85e58:	708e      	strb	r6, [r1, #2]
	udi_msc_sense.information[0] = lba >> 24;
   85e5a:	ea4f 6314 	mov.w	r3, r4, lsr #24
   85e5e:	70cb      	strb	r3, [r1, #3]
	udi_msc_sense.information[1] = lba >> 16;
   85e60:	ea4f 4014 	mov.w	r0, r4, lsr #16
   85e64:	7108      	strb	r0, [r1, #4]
	udi_msc_sense.information[2] = lba >> 8;
   85e66:	ea4f 2214 	mov.w	r2, r4, lsr #8
   85e6a:	714a      	strb	r2, [r1, #5]
	udi_msc_sense.information[3] = lba;
   85e6c:	718c      	strb	r4, [r1, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
   85e6e:	ea4f 2315 	mov.w	r3, r5, lsr #8
   85e72:	730b      	strb	r3, [r1, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
   85e74:	734d      	strb	r5, [r1, #13]
   85e76:	bd70      	pop	{r4, r5, r6, pc}

00085e78 <udi_msc_sense_fail_busy_or_change>:
{
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
}

static void udi_msc_sense_fail_busy_or_change(void)
{
   85e78:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
   85e7a:	f04f 0006 	mov.w	r0, #6
   85e7e:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   85e82:	f04f 0200 	mov.w	r2, #0
   85e86:	f645 6331 	movw	r3, #24113	; 0x5e31
   85e8a:	f2c0 0308 	movt	r3, #8
   85e8e:	4798      	blx	r3
   85e90:	bd08      	pop	{r3, pc}
   85e92:	bf00      	nop

00085e94 <udi_msc_sense_fail_not_present>:
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
}


static void udi_msc_sense_fail_not_present(void)
{
   85e94:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
   85e96:	f04f 0002 	mov.w	r0, #2
   85e9a:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
   85e9e:	f04f 0200 	mov.w	r2, #0
   85ea2:	f645 6331 	movw	r3, #24113	; 0x5e31
   85ea6:	f2c0 0308 	movt	r3, #8
   85eaa:	4798      	blx	r3
   85eac:	bd08      	pop	{r3, pc}
   85eae:	bf00      	nop

00085eb0 <udi_msc_sense_fail_hardware>:
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}

static void udi_msc_sense_fail_hardware(void)
{
   85eb0:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
   85eb2:	f04f 0004 	mov.w	r0, #4
   85eb6:	f04f 0100 	mov.w	r1, #0
   85eba:	460a      	mov	r2, r1
   85ebc:	f645 6331 	movw	r3, #24113	; 0x5e31
   85ec0:	f2c0 0308 	movt	r3, #8
   85ec4:	4798      	blx	r3
   85ec6:	bd08      	pop	{r3, pc}

00085ec8 <udi_msc_sense_fail_cdb_invalid>:
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
}

static void udi_msc_sense_fail_cdb_invalid(void)
{
   85ec8:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
   85eca:	f04f 0005 	mov.w	r0, #5
   85ece:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   85ed2:	f04f 0200 	mov.w	r2, #0
   85ed6:	f645 6331 	movw	r3, #24113	; 0x5e31
   85eda:	f2c0 0308 	movt	r3, #8
   85ede:	4798      	blx	r3
   85ee0:	bd08      	pop	{r3, pc}
   85ee2:	bf00      	nop

00085ee4 <udi_msc_csw_send>:
	udi_msc_csw_send();
}


void udi_msc_csw_send(void)
{
   85ee4:	b510      	push	{r4, lr}
   85ee6:	b082      	sub	sp, #8
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
   85ee8:	f246 0371 	movw	r3, #24689	; 0x6071
   85eec:	f2c0 0308 	movt	r3, #8
   85ef0:	9300      	str	r3, [sp, #0]
   85ef2:	f04f 0081 	mov.w	r0, #129	; 0x81
   85ef6:	f04f 0100 	mov.w	r1, #0
   85efa:	f240 2248 	movw	r2, #584	; 0x248
   85efe:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85f02:	f04f 030d 	mov.w	r3, #13
   85f06:	f249 2491 	movw	r4, #37521	; 0x9291
   85f0a:	f2c0 0408 	movt	r4, #8
   85f0e:	47a0      	blx	r4
   85f10:	b950      	cbnz	r0, 85f28 <udi_msc_csw_send+0x44>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
   85f12:	f04f 0081 	mov.w	r0, #129	; 0x81
   85f16:	f645 61e5 	movw	r1, #24293	; 0x5ee5
   85f1a:	f2c0 0108 	movt	r1, #8
   85f1e:	f649 121d 	movw	r2, #39197	; 0x991d
   85f22:	f2c0 0208 	movt	r2, #8
   85f26:	4790      	blx	r2
	}
}
   85f28:	b002      	add	sp, #8
   85f2a:	bd10      	pop	{r4, pc}

00085f2c <udi_msc_csw_process>:

//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
   85f2c:	b508      	push	{r3, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
   85f2e:	f240 2348 	movw	r3, #584	; 0x248
   85f32:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85f36:	6899      	ldr	r1, [r3, #8]
   85f38:	b171      	cbz	r1, 85f58 <udi_msc_csw_process+0x2c>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
   85f3a:	f241 5264 	movw	r2, #5476	; 0x1564
   85f3e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85f42:	f992 300c 	ldrsb.w	r3, [r2, #12]
   85f46:	2b00      	cmp	r3, #0
			udd_ep_set_halt(UDI_MSC_EP_IN);
   85f48:	bfb4      	ite	lt
   85f4a:	2081      	movlt	r0, #129	; 0x81
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
   85f4c:	2002      	movge	r0, #2
   85f4e:	f249 0175 	movw	r1, #36981	; 0x9075
   85f52:	f2c0 0108 	movt	r1, #8
   85f56:	4788      	blx	r1
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
   85f58:	f241 5064 	movw	r0, #5476	; 0x1564
   85f5c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85f60:	6842      	ldr	r2, [r0, #4]
   85f62:	f240 2348 	movw	r3, #584	; 0x248
   85f66:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85f6a:	605a      	str	r2, [r3, #4]
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
	udi_msc_csw_send();
   85f6c:	f645 61e5 	movw	r1, #24293	; 0x5ee5
   85f70:	f2c0 0108 	movt	r1, #8
   85f74:	4788      	blx	r1
   85f76:	bd08      	pop	{r3, pc}

00085f78 <udi_msc_cbw_validate>:
	}
}


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
   85f78:	b508      	push	{r3, lr}
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
   85f7a:	f241 5364 	movw	r3, #5476	; 0x1564
   85f7e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85f82:	7b1a      	ldrb	r2, [r3, #12]
   85f84:	4051      	eors	r1, r2
   85f86:	f011 0f80 	tst.w	r1, #128	; 0x80
   85f8a:	d106      	bne.n	85f9a <udi_msc_cbw_validate+0x22>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
   85f8c:	f240 2148 	movw	r1, #584	; 0x248
   85f90:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85f94:	688b      	ldr	r3, [r1, #8]
   85f96:	4283      	cmp	r3, r0
   85f98:	d20c      	bcs.n	85fb4 <udi_msc_cbw_validate+0x3c>
		udi_msc_sense_fail_cdb_invalid();
   85f9a:	f645 60c9 	movw	r0, #24265	; 0x5ec9
   85f9e:	f2c0 0008 	movt	r0, #8
   85fa2:	4780      	blx	r0
		udi_msc_csw_process();
   85fa4:	f645 722d 	movw	r2, #24365	; 0x5f2d
   85fa8:	f2c0 0208 	movt	r2, #8
   85fac:	4790      	blx	r2
		return false;
   85fae:	f04f 0000 	mov.w	r0, #0
   85fb2:	bd08      	pop	{r3, pc}
	 *  - Case  4: Hi > Dn
	 *  - Case  5: Hi > Di
	 *  - Case  9: Ho > Dn
	 *  - Case 11: Ho > Do
	 */
	return true;
   85fb4:	f04f 0001 	mov.w	r0, #1
}
   85fb8:	bd08      	pop	{r3, pc}
   85fba:	bf00      	nop

00085fbc <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
   85fbc:	b510      	push	{r4, lr}
   85fbe:	b082      	sub	sp, #8
   85fc0:	4602      	mov	r2, r0
   85fc2:	460b      	mov	r3, r1
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
   85fc4:	f645 71fd 	movw	r1, #24573	; 0x5ffd
   85fc8:	f2c0 0108 	movt	r1, #8
   85fcc:	9100      	str	r1, [sp, #0]
   85fce:	f04f 0081 	mov.w	r0, #129	; 0x81
   85fd2:	f04f 0101 	mov.w	r1, #1
   85fd6:	f249 2491 	movw	r4, #37521	; 0x9291
   85fda:	f2c0 0408 	movt	r4, #8
   85fde:	47a0      	blx	r4
   85fe0:	b948      	cbnz	r0, 85ff6 <udi_msc_data_send+0x3a>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
   85fe2:	f645 63b1 	movw	r3, #24241	; 0x5eb1
   85fe6:	f2c0 0308 	movt	r3, #8
   85fea:	4798      	blx	r3
		udi_msc_csw_process();
   85fec:	f645 702d 	movw	r0, #24365	; 0x5f2d
   85ff0:	f2c0 0008 	movt	r0, #8
   85ff4:	4780      	blx	r0
	}
}
   85ff6:	b002      	add	sp, #8
   85ff8:	bd10      	pop	{r4, pc}
   85ffa:	bf00      	nop

00085ffc <udi_msc_data_sent>:


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
   85ffc:	b510      	push	{r4, lr}
   85ffe:	460c      	mov	r4, r1
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
   86000:	b980      	cbnz	r0, 86024 <udi_msc_data_sent+0x28>
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Update sense data
	udi_msc_sense_pass();
   86002:	f645 6315 	movw	r3, #24085	; 0x5e15
   86006:	f2c0 0308 	movt	r3, #8
   8600a:	4798      	blx	r3
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
   8600c:	f240 2048 	movw	r0, #584	; 0x248
   86010:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86014:	6882      	ldr	r2, [r0, #8]
   86016:	1b14      	subs	r4, r2, r4
   86018:	6084      	str	r4, [r0, #8]
	udi_msc_csw_process();
   8601a:	f645 712d 	movw	r1, #24365	; 0x5f2d
   8601e:	f2c0 0108 	movt	r1, #8
   86022:	4788      	blx	r1
   86024:	bd10      	pop	{r4, pc}
   86026:	bf00      	nop

00086028 <udi_msc_cbw_wait>:
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
}

static void udi_msc_cbw_wait(void)
{
   86028:	b510      	push	{r4, lr}
   8602a:	b082      	sub	sp, #8
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
   8602c:	f246 2385 	movw	r3, #25221	; 0x6285
   86030:	f2c0 0308 	movt	r3, #8
   86034:	9300      	str	r3, [sp, #0]
   86036:	f04f 0002 	mov.w	r0, #2
   8603a:	f04f 0101 	mov.w	r1, #1
   8603e:	f241 5264 	movw	r2, #5476	; 0x1564
   86042:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86046:	f04f 031f 	mov.w	r3, #31
   8604a:	f249 2491 	movw	r4, #37521	; 0x9291
   8604e:	f2c0 0408 	movt	r4, #8
   86052:	47a0      	blx	r4
   86054:	b950      	cbnz	r0, 8606c <udi_msc_cbw_wait+0x44>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
   86056:	f04f 0002 	mov.w	r0, #2
   8605a:	f246 0129 	movw	r1, #24617	; 0x6029
   8605e:	f2c0 0108 	movt	r1, #8
   86062:	f649 121d 	movw	r2, #39197	; 0x991d
   86066:	f2c0 0208 	movt	r2, #8
   8606a:	4790      	blx	r2
	}
}
   8606c:	b002      	add	sp, #8
   8606e:	bd10      	pop	{r4, pc}

00086070 <udi_msc_csw_sent>:
}


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
   86070:	b508      	push	{r3, lr}
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
   86072:	f246 0329 	movw	r3, #24617	; 0x6029
   86076:	f2c0 0308 	movt	r3, #8
   8607a:	4798      	blx	r3
   8607c:	bd08      	pop	{r3, pc}
   8607e:	bf00      	nop

00086080 <udi_msc_cbw_invalid>:

//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
   86080:	b508      	push	{r3, lr}
	if (!udi_msc_b_cbw_invalid)
   86082:	f241 5398 	movw	r3, #5528	; 0x1598
   86086:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8608a:	7818      	ldrb	r0, [r3, #0]
   8608c:	b188      	cbz	r0, 860b2 <udi_msc_cbw_invalid+0x32>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_OUT);
   8608e:	f04f 0002 	mov.w	r0, #2
   86092:	f249 0175 	movw	r1, #36981	; 0x9075
   86096:	f2c0 0108 	movt	r1, #8
   8609a:	4788      	blx	r1
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
   8609c:	f04f 0002 	mov.w	r0, #2
   860a0:	f246 0181 	movw	r1, #24705	; 0x6081
   860a4:	f2c0 0108 	movt	r1, #8
   860a8:	f649 121d 	movw	r2, #39197	; 0x991d
   860ac:	f2c0 0208 	movt	r2, #8
   860b0:	4790      	blx	r2
   860b2:	bd08      	pop	{r3, pc}

000860b4 <udi_msc_csw_invalid>:
}

static void udi_msc_csw_invalid(void)
{
   860b4:	b508      	push	{r3, lr}
	if (!udi_msc_b_cbw_invalid)
   860b6:	f241 5398 	movw	r3, #5528	; 0x1598
   860ba:	f2c2 0307 	movt	r3, #8199	; 0x2007
   860be:	7818      	ldrb	r0, [r3, #0]
   860c0:	b188      	cbz	r0, 860e6 <udi_msc_csw_invalid+0x32>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_IN);
   860c2:	f04f 0081 	mov.w	r0, #129	; 0x81
   860c6:	f249 0175 	movw	r1, #36981	; 0x9075
   860ca:	f2c0 0108 	movt	r1, #8
   860ce:	4788      	blx	r1
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
   860d0:	f04f 0081 	mov.w	r0, #129	; 0x81
   860d4:	f246 01b5 	movw	r1, #24757	; 0x60b5
   860d8:	f2c0 0108 	movt	r1, #8
   860dc:	f649 121d 	movw	r2, #39197	; 0x991d
   860e0:	f2c0 0208 	movt	r2, #8
   860e4:	4790      	blx	r2
   860e6:	bd08      	pop	{r3, pc}

000860e8 <udi_msc_spc_mode_sense>:
	udi_msc_csw_process();
}


static void udi_msc_spc_mode_sense(bool b_sense10)
{
   860e8:	b570      	push	{r4, r5, r6, lr}
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
   860ea:	f241 5184 	movw	r1, #5508	; 0x1584
   860ee:	f2c2 0107 	movt	r1, #8199	; 0x2007
   860f2:	f04f 0300 	mov.w	r3, #0
   860f6:	460a      	mov	r2, r1
   860f8:	f842 3b04 	str.w	r3, [r2], #4
   860fc:	604b      	str	r3, [r1, #4]
   860fe:	f102 0204 	add.w	r2, r2, #4
   86102:	f842 3b04 	str.w	r3, [r2], #4
   86106:	f842 3b04 	str.w	r3, [r2], #4
   8610a:	6013      	str	r3, [r2, #0]

	// Initialize process
	if (b_sense10) {
   8610c:	4606      	mov	r6, r0
   8610e:	b148      	cbz	r0, 86124 <udi_msc_spc_mode_sense+0x3c>
		request_lgt = udi_msc_cbw.CDB[8];
   86110:	f241 5464 	movw	r4, #5476	; 0x1564
   86114:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86118:	7de5      	ldrb	r5, [r4, #23]
		ptr_mode = &sense.s10.sense_data;
   8611a:	f101 0108 	add.w	r1, r1, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
   8611e:	f04f 0408 	mov.w	r4, #8
   86122:	e007      	b.n	86134 <udi_msc_spc_mode_sense+0x4c>
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
   86124:	f241 5064 	movw	r0, #5476	; 0x1564
   86128:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8612c:	7cc5      	ldrb	r5, [r0, #19]
		ptr_mode = &sense.s6.sense_data;
   8612e:	492b      	ldr	r1, [pc, #172]	; (861dc <udi_msc_spc_mode_sense+0xf4>)
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
   86130:	f04f 0404 	mov.w	r4, #4
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
   86134:	f241 5364 	movw	r3, #5476	; 0x1564
   86138:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8613c:	7c5a      	ldrb	r2, [r3, #17]
   8613e:	f002 003f 	and.w	r0, r2, #63	; 0x3f
	if ((SCSI_MS_MODE_INFEXP == mode)
   86142:	281c      	cmp	r0, #28
   86144:	d001      	beq.n	8614a <udi_msc_spc_mode_sense+0x62>
			|| (SCSI_MS_MODE_ALL == mode)) {
   86146:	283f      	cmp	r0, #63	; 0x3f
   86148:	d10b      	bne.n	86162 <udi_msc_spc_mode_sense+0x7a>
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
   8614a:	f04f 031c 	mov.w	r3, #28
   8614e:	700b      	strb	r3, [r1, #0]
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
   86150:	f04f 020a 	mov.w	r2, #10
   86154:	704a      	strb	r2, [r1, #1]
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
   86156:	f04f 0005 	mov.w	r0, #5
   8615a:	70c8      	strb	r0, [r1, #3]
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
   8615c:	f104 040c 	add.w	r4, r4, #12
   86160:	b2e4      	uxtb	r4, r4
   86162:	42ac      	cmp	r4, r5
   86164:	bf38      	it	cc
   86166:	4625      	movcc	r5, r4
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
		request_lgt = data_sense_lgt;
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
   86168:	4628      	mov	r0, r5
   8616a:	f04f 0180 	mov.w	r1, #128	; 0x80
   8616e:	f645 7379 	movw	r3, #24441	; 0x5f79
   86172:	f2c0 0308 	movt	r3, #8
   86176:	4798      	blx	r3
   86178:	b370      	cbz	r0, 861d8 <udi_msc_spc_mode_sense+0xf0>
		return;

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
   8617a:	f241 5164 	movw	r1, #5476	; 0x1564
   8617e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86182:	7b48      	ldrb	r0, [r1, #13]
   86184:	f245 4249 	movw	r2, #21577	; 0x5449
   86188:	f2c0 0208 	movt	r2, #8
   8618c:	4790      	blx	r2
   8618e:	2800      	cmp	r0, #0
   86190:	bf14      	ite	ne
   86192:	2080      	movne	r0, #128	; 0x80
   86194:	2000      	moveq	r0, #0

	if (b_sense10) {
   86196:	b16e      	cbz	r6, 861b4 <udi_msc_spc_mode_sense+0xcc>
		sense.s10.header.mode_data_length =
				cpu_to_be16((data_sense_lgt - 2));
   86198:	f1a4 0402 	sub.w	r4, r4, #2
   8619c:	b2a4      	uxth	r4, r4

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;

	if (b_sense10) {
		sense.s10.header.mode_data_length =
   8619e:	f241 5184 	movw	r1, #5508	; 0x1584
   861a2:	f2c2 0107 	movt	r1, #8199	; 0x2007
				cpu_to_be16((data_sense_lgt - 2));
   861a6:	ea4f 2214 	mov.w	r2, r4, lsr #8
   861aa:	ea42 2404 	orr.w	r4, r2, r4, lsl #8

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;

	if (b_sense10) {
		sense.s10.header.mode_data_length =
   861ae:	800c      	strh	r4, [r1, #0]
				cpu_to_be16((data_sense_lgt - 2));
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
   861b0:	70c8      	strb	r0, [r1, #3]
   861b2:	e007      	b.n	861c4 <udi_msc_spc_mode_sense+0xdc>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
   861b4:	f241 5384 	movw	r3, #5508	; 0x1584
   861b8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   861bc:	f104 34ff 	add.w	r4, r4, #4294967295
   861c0:	701c      	strb	r4, [r3, #0]
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
   861c2:	7098      	strb	r0, [r3, #2]
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
   861c4:	f241 5084 	movw	r0, #5508	; 0x1584
   861c8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   861cc:	4629      	mov	r1, r5
   861ce:	f645 73bd 	movw	r3, #24509	; 0x5fbd
   861d2:	f2c0 0308 	movt	r3, #8
   861d6:	4798      	blx	r3
   861d8:	bd70      	pop	{r4, r5, r6, pc}
   861da:	bf00      	nop
   861dc:	20071588 	.word	0x20071588

000861e0 <udi_msc_sbc_trans>:
			sizeof(udi_msc_capacity));
}


static void udi_msc_sbc_trans(bool b_read)
{
   861e0:	b510      	push	{r4, lr}
	uint32_t trans_size;

	if (!b_read) {
   861e2:	4604      	mov	r4, r0
   861e4:	b9d8      	cbnz	r0, 8621e <udi_msc_sbc_trans+0x3e>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
   861e6:	f241 5364 	movw	r3, #5476	; 0x1564
   861ea:	f2c2 0307 	movt	r3, #8199	; 0x2007
   861ee:	7b58      	ldrb	r0, [r3, #13]
   861f0:	f245 4149 	movw	r1, #21577	; 0x5449
   861f4:	f2c0 0108 	movt	r1, #8
   861f8:	4788      	blx	r1
   861fa:	b180      	cbz	r0, 8621e <udi_msc_sbc_trans+0x3e>
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}

static void udi_msc_sense_fail_protected(void)
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
   861fc:	f04f 0007 	mov.w	r0, #7
   86200:	f44f 511c 	mov.w	r1, #9984	; 0x2700
   86204:	f04f 0200 	mov.w	r2, #0
   86208:	f645 6331 	movw	r3, #24113	; 0x5e31
   8620c:	f2c0 0308 	movt	r3, #8
   86210:	4798      	blx	r3
	if (!b_read) {
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
			// Write not authorized
			udi_msc_sense_fail_protected();
			udi_msc_csw_process();
   86212:	f645 722d 	movw	r2, #24365	; 0x5f2d
   86216:	f2c0 0208 	movt	r2, #8
   8621a:	4790      	blx	r2
			return;
   8621c:	bd10      	pop	{r4, pc}
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
   8621e:	f241 529c 	movw	r2, #5532	; 0x159c
   86222:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86226:	f241 5064 	movw	r0, #5476	; 0x1564
   8622a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8622e:	7c43      	ldrb	r3, [r0, #17]
   86230:	70d3      	strb	r3, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
   86232:	7c81      	ldrb	r1, [r0, #18]
   86234:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
   86236:	7cc3      	ldrb	r3, [r0, #19]
   86238:	7053      	strb	r3, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
   8623a:	7d01      	ldrb	r1, [r0, #20]
   8623c:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
   8623e:	f241 529a 	movw	r2, #5530	; 0x159a
   86242:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86246:	7d83      	ldrb	r3, [r0, #22]
   86248:	7053      	strb	r3, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
   8624a:	7dc0      	ldrb	r0, [r0, #23]
   8624c:	7010      	strb	r0, [r2, #0]

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
   8624e:	8811      	ldrh	r1, [r2, #0]
	if (!udi_msc_cbw_validate(trans_size,
   86250:	ea4f 2041 	mov.w	r0, r1, lsl #9
   86254:	2c00      	cmp	r4, #0
   86256:	bf14      	ite	ne
   86258:	2180      	movne	r1, #128	; 0x80
   8625a:	2100      	moveq	r1, #0
   8625c:	f645 7279 	movw	r2, #24441	; 0x5f79
   86260:	f2c0 0208 	movt	r2, #8
   86264:	4790      	blx	r2
   86266:	b158      	cbz	r0, 86280 <udi_msc_sbc_trans+0xa0>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
   86268:	f241 53b4 	movw	r3, #5556	; 0x15b4
   8626c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86270:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
   86272:	f241 5060 	movw	r0, #5472	; 0x1560
   86276:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8627a:	f04f 0101 	mov.w	r1, #1
   8627e:	7001      	strb	r1, [r0, #0]
   86280:	bd10      	pop	{r4, pc}
   86282:	bf00      	nop

00086284 <udi_msc_cbw_received>:
}


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
   86284:	b570      	push	{r4, r5, r6, lr}
	UNUSED(ep);
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
   86286:	2800      	cmp	r0, #0
   86288:	f040 82b8 	bne.w	867fc <udi_msc_cbw_received+0x578>
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
   8628c:	291f      	cmp	r1, #31
   8628e:	d10a      	bne.n	862a6 <udi_msc_cbw_received+0x22>
			|| (udi_msc_cbw.dCBWSignature !=
   86290:	f245 3355 	movw	r3, #21333	; 0x5355
   86294:	f2c4 3342 	movt	r3, #17218	; 0x4342
   86298:	f241 5264 	movw	r2, #5476	; 0x1564
   8629c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   862a0:	6810      	ldr	r0, [r2, #0]
   862a2:	4298      	cmp	r0, r3
   862a4:	d011      	beq.n	862ca <udi_msc_cbw_received+0x46>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
   862a6:	f241 5398 	movw	r3, #5528	; 0x1598
   862aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   862ae:	f04f 0201 	mov.w	r2, #1
   862b2:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
   862b4:	f246 0181 	movw	r1, #24705	; 0x6081
   862b8:	f2c0 0108 	movt	r1, #8
   862bc:	4788      	blx	r1
		udi_msc_csw_invalid();
   862be:	f246 00b5 	movw	r0, #24757	; 0x60b5
   862c2:	f2c0 0008 	movt	r0, #8
   862c6:	4780      	blx	r0
		return;
   862c8:	bd70      	pop	{r4, r5, r6, pc}
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
   862ca:	f241 5164 	movw	r1, #5476	; 0x1564
   862ce:	f2c2 0107 	movt	r1, #8199	; 0x2007
   862d2:	7b4b      	ldrb	r3, [r1, #13]
   862d4:	f003 000f 	and.w	r0, r3, #15
   862d8:	7348      	strb	r0, [r1, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
   862da:	f241 525c 	movw	r2, #5468	; 0x155c
   862de:	f2c2 0207 	movt	r2, #8199	; 0x2007
   862e2:	7811      	ldrb	r1, [r2, #0]
   862e4:	4281      	cmp	r1, r0
   862e6:	d20a      	bcs.n	862fe <udi_msc_cbw_received+0x7a>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
   862e8:	f645 61c9 	movw	r1, #24265	; 0x5ec9
   862ec:	f2c0 0108 	movt	r1, #8
   862f0:	4788      	blx	r1
		udi_msc_csw_process();
   862f2:	f645 702d 	movw	r0, #24365	; 0x5f2d
   862f6:	f2c0 0008 	movt	r0, #8
   862fa:	4780      	blx	r0
		return;
   862fc:	bd70      	pop	{r4, r5, r6, pc}
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
   862fe:	f241 5364 	movw	r3, #5476	; 0x1564
   86302:	f2c2 0307 	movt	r3, #8199	; 0x2007
		udi_msc_sense_fail_cdb_invalid();
		udi_msc_csw_process();
		return;
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
   86306:	689a      	ldr	r2, [r3, #8]
   86308:	f240 2148 	movw	r1, #584	; 0x248
   8630c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86310:	608a      	str	r2, [r1, #8]
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
   86312:	7bdb      	ldrb	r3, [r3, #15]
   86314:	2b5a      	cmp	r3, #90	; 0x5a
   86316:	f200 825a 	bhi.w	867ce <udi_msc_cbw_received+0x54a>
   8631a:	e8df f013 	tbh	[pc, r3, lsl #1]
   8631e:	01a6      	.short	0x01a6
   86320:	02580258 	.word	0x02580258
   86324:	0258005b 	.word	0x0258005b
   86328:	02580258 	.word	0x02580258
   8632c:	02580258 	.word	0x02580258
   86330:	02580258 	.word	0x02580258
   86334:	02580258 	.word	0x02580258
   86338:	02580258 	.word	0x02580258
   8633c:	02580258 	.word	0x02580258
   86340:	00790258 	.word	0x00790258
   86344:	02580258 	.word	0x02580258
   86348:	02580258 	.word	0x02580258
   8634c:	02580258 	.word	0x02580258
   86350:	01960258 	.word	0x01960258
   86354:	02580209 	.word	0x02580209
   86358:	02260258 	.word	0x02260258
   8635c:	02580258 	.word	0x02580258
   86360:	02580258 	.word	0x02580258
   86364:	02580258 	.word	0x02580258
   86368:	025801ce 	.word	0x025801ce
   8636c:	02480258 	.word	0x02480258
   86370:	02500258 	.word	0x02500258
   86374:	02580258 	.word	0x02580258
   86378:	02580258 	.word	0x02580258
   8637c:	0258023d 	.word	0x0258023d
   86380:	02580258 	.word	0x02580258
   86384:	02580258 	.word	0x02580258
   86388:	02580258 	.word	0x02580258
   8638c:	02580258 	.word	0x02580258
   86390:	02580258 	.word	0x02580258
   86394:	02580258 	.word	0x02580258
   86398:	02580258 	.word	0x02580258
   8639c:	02580258 	.word	0x02580258
   863a0:	02580258 	.word	0x02580258
   863a4:	02580258 	.word	0x02580258
   863a8:	02580258 	.word	0x02580258
   863ac:	02580258 	.word	0x02580258
   863b0:	02580258 	.word	0x02580258
   863b4:	02580258 	.word	0x02580258
   863b8:	02580258 	.word	0x02580258
   863bc:	02580258 	.word	0x02580258
   863c0:	02580258 	.word	0x02580258
   863c4:	02580258 	.word	0x02580258
   863c8:	02580258 	.word	0x02580258
   863cc:	02580258 	.word	0x02580258
   863d0:	019e0258 	.word	0x019e0258
//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
	uint8_t length = udi_msc_cbw.CDB[4];
   863d4:	f241 5464 	movw	r4, #5476	; 0x1564
   863d8:	f2c2 0407 	movt	r4, #8199	; 0x2007
   863dc:	7ce4      	ldrb	r4, [r4, #19]
   863de:	2c12      	cmp	r4, #18
   863e0:	bf28      	it	cs
   863e2:	2412      	movcs	r4, #18

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
		length = sizeof(udi_msc_sense);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
   863e4:	4620      	mov	r0, r4
   863e6:	f04f 0180 	mov.w	r1, #128	; 0x80
   863ea:	f645 7279 	movw	r2, #24441	; 0x5f79
   863ee:	f2c0 0208 	movt	r2, #8
   863f2:	4790      	blx	r2
   863f4:	2800      	cmp	r0, #0
   863f6:	f000 8201 	beq.w	867fc <udi_msc_cbw_received+0x578>
		return;
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
   863fa:	f241 50a0 	movw	r0, #5536	; 0x15a0
   863fe:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86402:	4621      	mov	r1, r4
   86404:	f645 73bd 	movw	r3, #24509	; 0x5fbd
   86408:	f2c0 0308 	movt	r3, #8
   8640c:	4798      	blx	r3
   8640e:	bd70      	pop	{r4, r5, r6, pc}
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
   86410:	f241 5464 	movw	r4, #5476	; 0x1564
   86414:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86418:	7ce4      	ldrb	r4, [r4, #19]
   8641a:	2c24      	cmp	r4, #36	; 0x24
   8641c:	bf28      	it	cs
   8641e:	2424      	movcs	r4, #36	; 0x24

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
   86420:	4620      	mov	r0, r4
   86422:	f04f 0180 	mov.w	r1, #128	; 0x80
   86426:	f645 7279 	movw	r2, #24441	; 0x5f79
   8642a:	f2c0 0208 	movt	r2, #8
   8642e:	4790      	blx	r2
   86430:	2800      	cmp	r0, #0
   86432:	f000 81e3 	beq.w	867fc <udi_msc_cbw_received+0x578>
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
   86436:	f241 5064 	movw	r0, #5476	; 0x1564
   8643a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8643e:	7c01      	ldrb	r1, [r0, #16]
   86440:	f011 0f03 	tst.w	r1, #3
   86444:	d105      	bne.n	86452 <udi_msc_cbw_received+0x1ce>
			|| (0 != udi_msc_cbw.CDB[2])) {
   86446:	f241 5364 	movw	r3, #5476	; 0x1564
   8644a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8644e:	7c5a      	ldrb	r2, [r3, #17]
   86450:	b152      	cbz	r2, 86468 <udi_msc_cbw_received+0x1e4>
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
   86452:	f645 61c9 	movw	r1, #24265	; 0x5ec9
   86456:	f2c0 0108 	movt	r1, #8
   8645a:	4788      	blx	r1
		udi_msc_csw_process();
   8645c:	f645 732d 	movw	r3, #24365	; 0x5f2d
   86460:	f2c0 0308 	movt	r3, #8
   86464:	4798      	blx	r3
   86466:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
   86468:	f241 5564 	movw	r5, #5476	; 0x1564
   8646c:	f2c2 0507 	movt	r5, #8199	; 0x2007
   86470:	7b68      	ldrb	r0, [r5, #13]
   86472:	f245 4661 	movw	r6, #21601	; 0x5461
   86476:	f2c0 0608 	movt	r6, #8
   8647a:	47b0      	blx	r6
   8647c:	2800      	cmp	r0, #0
   8647e:	bf14      	ite	ne
   86480:	2080      	movne	r0, #128	; 0x80
   86482:	2000      	moveq	r0, #0
   86484:	f240 2624 	movw	r6, #548	; 0x224
   86488:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8648c:	7070      	strb	r0, [r6, #1]
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
   8648e:	f241 5164 	movw	r1, #5476	; 0x1564
   86492:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86496:	7b48      	ldrb	r0, [r1, #13]
   86498:	f245 4379 	movw	r3, #21625	; 0x5479
   8649c:	f2c0 0308 	movt	r3, #8
   864a0:	4798      	blx	r3
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
   864a2:	f106 0510 	add.w	r5, r6, #16
   864a6:	4603      	mov	r3, r0
   864a8:	f853 0f01 	ldr.w	r0, [r3, #1]!
   864ac:	6859      	ldr	r1, [r3, #4]
   864ae:	689a      	ldr	r2, [r3, #8]
   864b0:	68db      	ldr	r3, [r3, #12]
   864b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   864b4:	7c32      	ldrb	r2, [r6, #16]
   864b6:	2a00      	cmp	r2, #0
   864b8:	f000 819a 	beq.w	867f0 <udi_msc_cbw_received+0x56c>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   864bc:	2a22      	cmp	r2, #34	; 0x22
   864be:	f000 819a 	beq.w	867f6 <udi_msc_cbw_received+0x572>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   864c2:	7c71      	ldrb	r1, [r6, #17]
   864c4:	2900      	cmp	r1, #0
   864c6:	d03e      	beq.n	86546 <udi_msc_cbw_received+0x2c2>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   864c8:	2922      	cmp	r1, #34	; 0x22
   864ca:	d06b      	beq.n	865a4 <udi_msc_cbw_received+0x320>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   864cc:	7cb2      	ldrb	r2, [r6, #18]
   864ce:	2a00      	cmp	r2, #0
   864d0:	d03c      	beq.n	8654c <udi_msc_cbw_received+0x2c8>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   864d2:	2a22      	cmp	r2, #34	; 0x22
   864d4:	d069      	beq.n	865aa <udi_msc_cbw_received+0x326>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   864d6:	7cf1      	ldrb	r1, [r6, #19]
   864d8:	2900      	cmp	r1, #0
   864da:	d03a      	beq.n	86552 <udi_msc_cbw_received+0x2ce>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   864dc:	2922      	cmp	r1, #34	; 0x22
   864de:	d067      	beq.n	865b0 <udi_msc_cbw_received+0x32c>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   864e0:	7d32      	ldrb	r2, [r6, #20]
   864e2:	2a00      	cmp	r2, #0
   864e4:	d038      	beq.n	86558 <udi_msc_cbw_received+0x2d4>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   864e6:	2a22      	cmp	r2, #34	; 0x22
   864e8:	d065      	beq.n	865b6 <udi_msc_cbw_received+0x332>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   864ea:	7d71      	ldrb	r1, [r6, #21]
   864ec:	2900      	cmp	r1, #0
   864ee:	d036      	beq.n	8655e <udi_msc_cbw_received+0x2da>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   864f0:	2922      	cmp	r1, #34	; 0x22
   864f2:	d063      	beq.n	865bc <udi_msc_cbw_received+0x338>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   864f4:	7db2      	ldrb	r2, [r6, #22]
   864f6:	b3aa      	cbz	r2, 86564 <udi_msc_cbw_received+0x2e0>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   864f8:	2a22      	cmp	r2, #34	; 0x22
   864fa:	d062      	beq.n	865c2 <udi_msc_cbw_received+0x33e>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   864fc:	7df1      	ldrb	r1, [r6, #23]
   864fe:	b3a1      	cbz	r1, 8656a <udi_msc_cbw_received+0x2e6>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86500:	2922      	cmp	r1, #34	; 0x22
   86502:	d061      	beq.n	865c8 <udi_msc_cbw_received+0x344>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   86504:	7e32      	ldrb	r2, [r6, #24]
   86506:	b39a      	cbz	r2, 86570 <udi_msc_cbw_received+0x2ec>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86508:	2a22      	cmp	r2, #34	; 0x22
   8650a:	d060      	beq.n	865ce <udi_msc_cbw_received+0x34a>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   8650c:	7e71      	ldrb	r1, [r6, #25]
   8650e:	b391      	cbz	r1, 86576 <udi_msc_cbw_received+0x2f2>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86510:	2922      	cmp	r1, #34	; 0x22
   86512:	d05f      	beq.n	865d4 <udi_msc_cbw_received+0x350>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   86514:	7eb2      	ldrb	r2, [r6, #26]
   86516:	b38a      	cbz	r2, 8657c <udi_msc_cbw_received+0x2f8>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86518:	2a22      	cmp	r2, #34	; 0x22
   8651a:	d05e      	beq.n	865da <udi_msc_cbw_received+0x356>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   8651c:	7ef1      	ldrb	r1, [r6, #27]
   8651e:	b381      	cbz	r1, 86582 <udi_msc_cbw_received+0x2fe>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86520:	2922      	cmp	r1, #34	; 0x22
   86522:	d05d      	beq.n	865e0 <udi_msc_cbw_received+0x35c>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   86524:	7f32      	ldrb	r2, [r6, #28]
   86526:	b37a      	cbz	r2, 86588 <udi_msc_cbw_received+0x304>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86528:	2a22      	cmp	r2, #34	; 0x22
   8652a:	d05c      	beq.n	865e6 <udi_msc_cbw_received+0x362>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   8652c:	7f71      	ldrb	r1, [r6, #29]
   8652e:	b371      	cbz	r1, 8658e <udi_msc_cbw_received+0x30a>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86530:	2922      	cmp	r1, #34	; 0x22
   86532:	d05b      	beq.n	865ec <udi_msc_cbw_received+0x368>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   86534:	7fb2      	ldrb	r2, [r6, #30]
   86536:	b36a      	cbz	r2, 86594 <udi_msc_cbw_received+0x310>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86538:	2a22      	cmp	r2, #34	; 0x22
   8653a:	d05a      	beq.n	865f2 <udi_msc_cbw_received+0x36e>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   8653c:	7ff3      	ldrb	r3, [r6, #31]
   8653e:	bb63      	cbnz	r3, 8659a <udi_msc_cbw_received+0x316>
   86540:	f04f 030f 	mov.w	r3, #15
   86544:	e057      	b.n	865f6 <udi_msc_cbw_received+0x372>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
			break;
		}
		i++;
   86546:	f04f 0301 	mov.w	r3, #1
   8654a:	e054      	b.n	865f6 <udi_msc_cbw_received+0x372>
   8654c:	f04f 0302 	mov.w	r3, #2
   86550:	e051      	b.n	865f6 <udi_msc_cbw_received+0x372>
   86552:	f04f 0303 	mov.w	r3, #3
   86556:	e04e      	b.n	865f6 <udi_msc_cbw_received+0x372>
   86558:	f04f 0304 	mov.w	r3, #4
   8655c:	e04b      	b.n	865f6 <udi_msc_cbw_received+0x372>
   8655e:	f04f 0305 	mov.w	r3, #5
   86562:	e048      	b.n	865f6 <udi_msc_cbw_received+0x372>
   86564:	f04f 0306 	mov.w	r3, #6
   86568:	e045      	b.n	865f6 <udi_msc_cbw_received+0x372>
   8656a:	f04f 0307 	mov.w	r3, #7
   8656e:	e042      	b.n	865f6 <udi_msc_cbw_received+0x372>
   86570:	f04f 0308 	mov.w	r3, #8
   86574:	e03f      	b.n	865f6 <udi_msc_cbw_received+0x372>
   86576:	f04f 0309 	mov.w	r3, #9
   8657a:	e03c      	b.n	865f6 <udi_msc_cbw_received+0x372>
   8657c:	f04f 030a 	mov.w	r3, #10
   86580:	e039      	b.n	865f6 <udi_msc_cbw_received+0x372>
   86582:	f04f 030b 	mov.w	r3, #11
   86586:	e036      	b.n	865f6 <udi_msc_cbw_received+0x372>
   86588:	f04f 030c 	mov.w	r3, #12
   8658c:	e033      	b.n	865f6 <udi_msc_cbw_received+0x372>
   8658e:	f04f 030d 	mov.w	r3, #13
   86592:	e030      	b.n	865f6 <udi_msc_cbw_received+0x372>
   86594:	f04f 030e 	mov.w	r3, #14
   86598:	e02d      	b.n	865f6 <udi_msc_cbw_received+0x372>

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   8659a:	2b22      	cmp	r3, #34	; 0x22
   8659c:	bf08      	it	eq
   8659e:	230f      	moveq	r3, #15
   865a0:	d029      	beq.n	865f6 <udi_msc_cbw_received+0x372>
   865a2:	e047      	b.n	86634 <udi_msc_cbw_received+0x3b0>
			break;
		}
		i++;
   865a4:	f04f 0301 	mov.w	r3, #1
   865a8:	e025      	b.n	865f6 <udi_msc_cbw_received+0x372>
   865aa:	f04f 0302 	mov.w	r3, #2
   865ae:	e022      	b.n	865f6 <udi_msc_cbw_received+0x372>
   865b0:	f04f 0303 	mov.w	r3, #3
   865b4:	e01f      	b.n	865f6 <udi_msc_cbw_received+0x372>
   865b6:	f04f 0304 	mov.w	r3, #4
   865ba:	e01c      	b.n	865f6 <udi_msc_cbw_received+0x372>
   865bc:	f04f 0305 	mov.w	r3, #5
   865c0:	e019      	b.n	865f6 <udi_msc_cbw_received+0x372>
   865c2:	f04f 0306 	mov.w	r3, #6
   865c6:	e016      	b.n	865f6 <udi_msc_cbw_received+0x372>
   865c8:	f04f 0307 	mov.w	r3, #7
   865cc:	e013      	b.n	865f6 <udi_msc_cbw_received+0x372>
   865ce:	f04f 0308 	mov.w	r3, #8
   865d2:	e010      	b.n	865f6 <udi_msc_cbw_received+0x372>
   865d4:	f04f 0309 	mov.w	r3, #9
   865d8:	e00d      	b.n	865f6 <udi_msc_cbw_received+0x372>
   865da:	f04f 030a 	mov.w	r3, #10
   865de:	e00a      	b.n	865f6 <udi_msc_cbw_received+0x372>
   865e0:	f04f 030b 	mov.w	r3, #11
   865e4:	e007      	b.n	865f6 <udi_msc_cbw_received+0x372>
   865e6:	f04f 030c 	mov.w	r3, #12
   865ea:	e004      	b.n	865f6 <udi_msc_cbw_received+0x372>
   865ec:	f04f 030d 	mov.w	r3, #13
   865f0:	e001      	b.n	865f6 <udi_msc_cbw_received+0x372>
   865f2:	f04f 030e 	mov.w	r3, #14
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		udi_msc_inquiry_data.product_id[i] = ' ';
   865f6:	f240 2124 	movw	r1, #548	; 0x224
   865fa:	f2c2 0107 	movt	r1, #8199	; 0x2007
   865fe:	f04f 0220 	mov.w	r2, #32
   86602:	f1c3 050f 	rsb	r5, r3, #15
   86606:	f005 0001 	and.w	r0, r5, #1
   8660a:	18cd      	adds	r5, r1, r3
   8660c:	742a      	strb	r2, [r5, #16]
		i++;
   8660e:	f103 0301 	add.w	r3, r3, #1
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   86612:	2b10      	cmp	r3, #16
   86614:	f040 80f3 	bne.w	867fe <udi_msc_cbw_received+0x57a>
   86618:	e00c      	b.n	86634 <udi_msc_cbw_received+0x3b0>
		udi_msc_inquiry_data.product_id[i] = ' ';
   8661a:	18c8      	adds	r0, r1, r3
   8661c:	7402      	strb	r2, [r0, #16]
		i++;
   8661e:	f103 0301 	add.w	r3, r3, #1
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   86622:	f003 03ff 	and.w	r3, r3, #255	; 0xff
		udi_msc_inquiry_data.product_id[i] = ' ';
   86626:	18c8      	adds	r0, r1, r3
   86628:	7402      	strb	r2, [r0, #16]
		i++;
   8662a:	f103 0301 	add.w	r3, r3, #1
   8662e:	b2db      	uxtb	r3, r3
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   86630:	2b10      	cmp	r3, #16
   86632:	d1f2      	bne.n	8661a <udi_msc_cbw_received+0x396>
		udi_msc_inquiry_data.product_id[i] = ' ';
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
   86634:	f240 2024 	movw	r0, #548	; 0x224
   86638:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8663c:	4621      	mov	r1, r4
   8663e:	f645 72bd 	movw	r2, #24509	; 0x5fbd
   86642:	f2c0 0208 	movt	r2, #8
   86646:	4790      	blx	r2
   86648:	bd70      	pop	{r4, r5, r6, pc}
	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
		break;

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
   8664a:	f04f 0000 	mov.w	r0, #0
   8664e:	f246 03e9 	movw	r3, #24809	; 0x60e9
   86652:	f2c0 0308 	movt	r3, #8
   86656:	4798      	blx	r3
		break;
   86658:	bd70      	pop	{r4, r5, r6, pc}
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
   8665a:	f04f 0001 	mov.w	r0, #1
   8665e:	f246 02e9 	movw	r2, #24809	; 0x60e9
   86662:	f2c0 0208 	movt	r2, #8
   86666:	4790      	blx	r2
		break;
   86668:	bd70      	pop	{r4, r5, r6, pc}
}


static bool udi_msc_spc_testunitready_global(void)
{
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
   8666a:	f245 4109 	movw	r1, #21513	; 0x5409
   8666e:	f2c0 0108 	movt	r1, #8
   86672:	4788      	blx	r1
   86674:	2802      	cmp	r0, #2
   86676:	d009      	beq.n	8668c <udi_msc_cbw_received+0x408>
   86678:	2803      	cmp	r0, #3
   8667a:	d001      	beq.n	86680 <udi_msc_cbw_received+0x3fc>
   8667c:	b190      	cbz	r0, 866a4 <udi_msc_cbw_received+0x420>
   8667e:	e00b      	b.n	86698 <udi_msc_cbw_received+0x414>
	case CTRL_GOOD:
		return true;	// Don't change sense data
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   86680:	f645 6379 	movw	r3, #24185	; 0x5e79
   86684:	f2c0 0308 	movt	r3, #8
   86688:	4798      	blx	r3
   8668a:	e010      	b.n	866ae <udi_msc_cbw_received+0x42a>
		break;
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   8668c:	f645 6195 	movw	r1, #24213	; 0x5e95
   86690:	f2c0 0108 	movt	r1, #8
   86694:	4788      	blx	r1
   86696:	e00a      	b.n	866ae <udi_msc_cbw_received+0x42a>
		break;
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
   86698:	f645 60b1 	movw	r0, #24241	; 0x5eb1
   8669c:	f2c0 0008 	movt	r0, #8
   866a0:	4780      	blx	r0
   866a2:	e004      	b.n	866ae <udi_msc_cbw_received+0x42a>

static void udi_msc_spc_testunitready(void)
{
	if (udi_msc_spc_testunitready_global()) {
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
   866a4:	f645 6215 	movw	r2, #24085	; 0x5e15
   866a8:	f2c0 0208 	movt	r2, #8
   866ac:	4790      	blx	r2
	}
	// Send status in CSW packet
	udi_msc_csw_process();
   866ae:	f645 702d 	movw	r0, #24365	; 0x5f2d
   866b2:	f2c0 0008 	movt	r0, #8
   866b6:	4780      	blx	r0
   866b8:	bd70      	pop	{r4, r5, r6, pc}

static void udi_msc_sbc_read_capacity(void)
{
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
   866ba:	f04f 0008 	mov.w	r0, #8
   866be:	f04f 0180 	mov.w	r1, #128	; 0x80
   866c2:	f645 7379 	movw	r3, #24441	; 0x5f79
   866c6:	f2c0 0308 	movt	r3, #8
   866ca:	4798      	blx	r3
   866cc:	2800      	cmp	r0, #0
   866ce:	f000 8095 	beq.w	867fc <udi_msc_cbw_received+0x578>
					USB_CBW_DIRECTION_IN))
		return;

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
   866d2:	f241 5064 	movw	r0, #5476	; 0x1564
   866d6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   866da:	7b40      	ldrb	r0, [r0, #13]
   866dc:	f241 51b8 	movw	r1, #5560	; 0x15b8
   866e0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   866e4:	f245 4221 	movw	r2, #21537	; 0x5421
   866e8:	f2c0 0208 	movt	r2, #8
   866ec:	4790      	blx	r2
   866ee:	2802      	cmp	r0, #2
   866f0:	d008      	beq.n	86704 <udi_msc_cbw_received+0x480>
   866f2:	2803      	cmp	r0, #3
   866f4:	d001      	beq.n	866fa <udi_msc_cbw_received+0x476>
   866f6:	b178      	cbz	r0, 86718 <udi_msc_cbw_received+0x494>
   866f8:	e009      	b.n	8670e <udi_msc_cbw_received+0x48a>
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   866fa:	4847      	ldr	r0, [pc, #284]	; (86818 <udi_msc_cbw_received+0x594>)
   866fc:	4780      	blx	r0
		udi_msc_csw_process();
   866fe:	4947      	ldr	r1, [pc, #284]	; (8681c <udi_msc_cbw_received+0x598>)
   86700:	4788      	blx	r1
   86702:	bd70      	pop	{r4, r5, r6, pc}
		return;
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   86704:	4b46      	ldr	r3, [pc, #280]	; (86820 <udi_msc_cbw_received+0x59c>)
   86706:	4798      	blx	r3
		udi_msc_csw_process();
   86708:	4a44      	ldr	r2, [pc, #272]	; (8681c <udi_msc_cbw_received+0x598>)
   8670a:	4790      	blx	r2
   8670c:	bd70      	pop	{r4, r5, r6, pc}
		return;
	default:
		udi_msc_sense_fail_hardware();
   8670e:	4945      	ldr	r1, [pc, #276]	; (86824 <udi_msc_cbw_received+0x5a0>)
   86710:	4788      	blx	r1
		udi_msc_csw_process();
   86712:	4b42      	ldr	r3, [pc, #264]	; (8681c <udi_msc_cbw_received+0x598>)
   86714:	4798      	blx	r3
   86716:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
   86718:	4843      	ldr	r0, [pc, #268]	; (86828 <udi_msc_cbw_received+0x5a4>)
   8671a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   8671e:	6042      	str	r2, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
   86720:	6801      	ldr	r1, [r0, #0]
   86722:	ba0b      	rev	r3, r1
   86724:	6003      	str	r3, [r0, #0]
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
   86726:	f04f 0108 	mov.w	r1, #8
   8672a:	4a40      	ldr	r2, [pc, #256]	; (8682c <udi_msc_cbw_received+0x5a8>)
   8672c:	4790      	blx	r2
   8672e:	bd70      	pop	{r4, r5, r6, pc}
}


static void udi_msc_sbc_start_stop(void)
{
	bool start = 0x1 & udi_msc_cbw.CDB[4];
   86730:	f241 5164 	movw	r1, #5476	; 0x1564
   86734:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86738:	7ccb      	ldrb	r3, [r1, #19]
	bool loej = 0x2 & udi_msc_cbw.CDB[4];
	if (loej) {
   8673a:	f003 0202 	and.w	r2, r3, #2
   8673e:	b2d1      	uxtb	r1, r2
   86740:	b141      	cbz	r1, 86754 <udi_msc_cbw_received+0x4d0>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
   86742:	f083 0301 	eor.w	r3, r3, #1
   86746:	f003 0101 	and.w	r1, r3, #1
   8674a:	f245 4239 	movw	r2, #21561	; 0x5439
   8674e:	f2c0 0208 	movt	r2, #8
   86752:	4790      	blx	r2
	}
	udi_msc_sense_pass();
   86754:	f645 6015 	movw	r0, #24085	; 0x5e15
   86758:	f2c0 0008 	movt	r0, #8
   8675c:	4780      	blx	r0
	udi_msc_csw_process();
   8675e:	f645 712d 	movw	r1, #24365	; 0x5f2d
   86762:	f2c0 0108 	movt	r1, #8
   86766:	4788      	blx	r1
   86768:	bd70      	pop	{r4, r5, r6, pc}
}


static void udi_msc_spc_prevent_allow_medium_removal(void)
{
	uint8_t prevent = udi_msc_cbw.CDB[4];
   8676a:	f241 5064 	movw	r0, #5476	; 0x1564
   8676e:	f2c2 0007 	movt	r0, #8199	; 0x2007
	if (0 == prevent) {
   86772:	7cc1      	ldrb	r1, [r0, #19]
   86774:	b929      	cbnz	r1, 86782 <udi_msc_cbw_received+0x4fe>
		udi_msc_sense_pass();
   86776:	f645 6215 	movw	r2, #24085	; 0x5e15
   8677a:	f2c0 0208 	movt	r2, #8
   8677e:	4790      	blx	r2
   86780:	e004      	b.n	8678c <udi_msc_cbw_received+0x508>
	} else {
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
   86782:	f645 63c9 	movw	r3, #24265	; 0x5ec9
   86786:	f2c0 0308 	movt	r3, #8
   8678a:	4798      	blx	r3
	}
	udi_msc_csw_process();
   8678c:	f645 702d 	movw	r0, #24365	; 0x5f2d
   86790:	f2c0 0008 	movt	r0, #8
   86794:	4780      	blx	r0
   86796:	bd70      	pop	{r4, r5, r6, pc}
		udi_msc_spc_prevent_allow_medium_removal();
		break;

		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
   86798:	f645 6015 	movw	r0, #24085	; 0x5e15
   8679c:	f2c0 0008 	movt	r0, #8
   867a0:	4780      	blx	r0
		udi_msc_csw_process();
   867a2:	f645 712d 	movw	r1, #24365	; 0x5f2d
   867a6:	f2c0 0108 	movt	r1, #8
   867aa:	4788      	blx	r1
		break;
   867ac:	bd70      	pop	{r4, r5, r6, pc}

	case SBC_READ10:
		udi_msc_sbc_trans(true);
   867ae:	f04f 0001 	mov.w	r0, #1
   867b2:	f246 12e1 	movw	r2, #25057	; 0x61e1
   867b6:	f2c0 0208 	movt	r2, #8
   867ba:	4790      	blx	r2
		break;
   867bc:	bd70      	pop	{r4, r5, r6, pc}

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
   867be:	f04f 0000 	mov.w	r0, #0
   867c2:	f246 13e1 	movw	r3, #25057	; 0x61e1
   867c6:	f2c0 0308 	movt	r3, #8
   867ca:	4798      	blx	r3
		break;
   867cc:	bd70      	pop	{r4, r5, r6, pc}
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}

static void udi_msc_sense_command_invalid(void)
{
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
   867ce:	f04f 0005 	mov.w	r0, #5
   867d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   867d6:	f04f 0200 	mov.w	r2, #0
   867da:	f645 6331 	movw	r3, #24113	; 0x5e31
   867de:	f2c0 0308 	movt	r3, #8
   867e2:	4798      	blx	r3
		udi_msc_sbc_trans(false);
		break;

	default:
		udi_msc_sense_command_invalid();
		udi_msc_csw_process();
   867e4:	f645 722d 	movw	r2, #24365	; 0x5f2d
   867e8:	f2c0 0208 	movt	r2, #8
   867ec:	4790      	blx	r2
		break;
   867ee:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
   867f0:	f04f 0300 	mov.w	r3, #0
   867f4:	e6ff      	b.n	865f6 <udi_msc_cbw_received+0x372>
   867f6:	f04f 0300 	mov.w	r3, #0
   867fa:	e6fc      	b.n	865f6 <udi_msc_cbw_received+0x372>
   867fc:	bd70      	pop	{r4, r5, r6, pc}
   867fe:	b240      	sxtb	r0, r0
   86800:	2800      	cmp	r0, #0
   86802:	f43f af0a 	beq.w	8661a <udi_msc_cbw_received+0x396>
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		udi_msc_inquiry_data.product_id[i] = ' ';
   86806:	18c8      	adds	r0, r1, r3
   86808:	7402      	strb	r2, [r0, #16]
		i++;
   8680a:	f103 0301 	add.w	r3, r3, #1
   8680e:	b2db      	uxtb	r3, r3
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   86810:	2b10      	cmp	r3, #16
   86812:	f47f af02 	bne.w	8661a <udi_msc_cbw_received+0x396>
   86816:	e70d      	b.n	86634 <udi_msc_cbw_received+0x3b0>
   86818:	00085e79 	.word	0x00085e79
   8681c:	00085f2d 	.word	0x00085f2d
   86820:	00085e95 	.word	0x00085e95
   86824:	00085eb1 	.word	0x00085eb1
   86828:	200715b8 	.word	0x200715b8
   8682c:	00085fbd 	.word	0x00085fbd

00086830 <udi_msc_setup>:
	UDI_MSC_DISABLE_EXT();
}


bool udi_msc_setup(void)
{
   86830:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
   86832:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   86836:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8683a:	7818      	ldrb	r0, [r3, #0]
   8683c:	f010 0f80 	tst.w	r0, #128	; 0x80
   86840:	d025      	beq.n	8688e <udi_msc_setup+0x5e>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   86842:	f000 0260 	and.w	r2, r0, #96	; 0x60
   86846:	2a20      	cmp	r2, #32
   86848:	d156      	bne.n	868f8 <udi_msc_setup+0xc8>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   8684a:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   8684e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86852:	7858      	ldrb	r0, [r3, #1]
   86854:	28fe      	cmp	r0, #254	; 0xfe
   86856:	d152      	bne.n	868fe <udi_msc_setup+0xce>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
   86858:	f641 41cc 	movw	r1, #7372	; 0x1ccc
   8685c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86860:	88ca      	ldrh	r2, [r1, #6]
   86862:	2a01      	cmp	r2, #1
   86864:	d14e      	bne.n	86904 <udi_msc_setup+0xd4>
					return false;	// Error for USB host
				if (0 != udd_g_ctrlreq.req.wValue)
   86866:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   8686a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8686e:	8858      	ldrh	r0, [r3, #2]
   86870:	2800      	cmp	r0, #0
   86872:	d14a      	bne.n	8690a <udi_msc_setup+0xda>
					return false;
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
   86874:	f641 41cc 	movw	r1, #7372	; 0x1ccc
   86878:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8687c:	f241 525c 	movw	r2, #5468	; 0x155c
   86880:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86884:	608a      	str	r2, [r1, #8]
				udd_g_ctrlreq.payload_size = 1;
   86886:	f04f 0001 	mov.w	r0, #1
   8688a:	8188      	strh	r0, [r1, #12]
				return true;
   8688c:	bd10      	pop	{r4, pc}
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8688e:	f000 0160 	and.w	r1, r0, #96	; 0x60
   86892:	2920      	cmp	r1, #32
   86894:	d13c      	bne.n	86910 <udi_msc_setup+0xe0>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   86896:	f641 42cc 	movw	r2, #7372	; 0x1ccc
   8689a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8689e:	7853      	ldrb	r3, [r2, #1]
   868a0:	2bff      	cmp	r3, #255	; 0xff
   868a2:	d138      	bne.n	86916 <udi_msc_setup+0xe6>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
   868a4:	f641 40cc 	movw	r0, #7372	; 0x1ccc
   868a8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   868ac:	88c1      	ldrh	r1, [r0, #6]
   868ae:	2900      	cmp	r1, #0
   868b0:	d134      	bne.n	8691c <udi_msc_setup+0xec>
					return false;
				if (0 != udd_g_ctrlreq.req.wValue)
   868b2:	f641 42cc 	movw	r2, #7372	; 0x1ccc
   868b6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   868ba:	8853      	ldrh	r3, [r2, #2]
   868bc:	2b00      	cmp	r3, #0
   868be:	d130      	bne.n	86922 <udi_msc_setup+0xf2>
					return false;
				udi_msc_b_cbw_invalid = false;
   868c0:	f241 5498 	movw	r4, #5528	; 0x1598
   868c4:	f2c2 0407 	movt	r4, #8199	; 0x2007
   868c8:	7023      	strb	r3, [r4, #0]
				udi_msc_b_trans_req = false;
   868ca:	f241 5060 	movw	r0, #5472	; 0x1560
   868ce:	f2c2 0007 	movt	r0, #8199	; 0x2007
   868d2:	7003      	strb	r3, [r0, #0]
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
   868d4:	f04f 0002 	mov.w	r0, #2
   868d8:	f649 0499 	movw	r4, #39065	; 0x9899
   868dc:	f2c0 0408 	movt	r4, #8
   868e0:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
   868e2:	f04f 0081 	mov.w	r0, #129	; 0x81
   868e6:	47a0      	blx	r4
				// Restart by CBW wait
				udi_msc_cbw_wait();
   868e8:	f246 0129 	movw	r1, #24617	; 0x6029
   868ec:	f2c0 0108 	movt	r1, #8
   868f0:	4788      	blx	r1
				return true;
   868f2:	f04f 0001 	mov.w	r0, #1
   868f6:	bd10      	pop	{r4, pc}
			}
		}
	}
	return false;	// Not supported request
   868f8:	f04f 0000 	mov.w	r0, #0
   868fc:	bd10      	pop	{r4, pc}
   868fe:	f04f 0000 	mov.w	r0, #0
   86902:	bd10      	pop	{r4, pc}
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
   86904:	f04f 0000 	mov.w	r0, #0
   86908:	bd10      	pop	{r4, pc}
				if (0 != udd_g_ctrlreq.req.wValue)
					return false;
   8690a:	f04f 0000 	mov.w	r0, #0
   8690e:	bd10      	pop	{r4, pc}
				udi_msc_cbw_wait();
				return true;
			}
		}
	}
	return false;	// Not supported request
   86910:	f04f 0000 	mov.w	r0, #0
   86914:	bd10      	pop	{r4, pc}
   86916:	f04f 0000 	mov.w	r0, #0
   8691a:	bd10      	pop	{r4, pc}
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
   8691c:	f04f 0000 	mov.w	r0, #0
   86920:	bd10      	pop	{r4, pc}
				if (0 != udd_g_ctrlreq.req.wValue)
					return false;
   86922:	f04f 0000 	mov.w	r0, #0
				return true;
			}
		}
	}
	return false;	// Not supported request
}
   86926:	bd10      	pop	{r4, pc}

00086928 <udi_msc_disable>:
	return true;
}


void udi_msc_disable(void)
{
   86928:	b508      	push	{r3, lr}
	udi_msc_b_trans_req = false;
   8692a:	f241 5360 	movw	r3, #5472	; 0x1560
   8692e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86932:	f04f 0200 	mov.w	r2, #0
   86936:	701a      	strb	r2, [r3, #0]
	UDI_MSC_DISABLE_EXT();
   86938:	f649 60dd 	movw	r0, #40669	; 0x9edd
   8693c:	f2c0 0008 	movt	r0, #8
   86940:	4780      	blx	r0
   86942:	bd08      	pop	{r3, pc}

00086944 <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
   86944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t lun;
	udi_msc_b_trans_req = false;
   86946:	f04f 0300 	mov.w	r3, #0
   8694a:	f241 5260 	movw	r2, #5472	; 0x1560
   8694e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86952:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
   86954:	f241 5098 	movw	r0, #5528	; 0x1598
   86958:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8695c:	7003      	strb	r3, [r0, #0]
	udi_msc_nb_lun = get_nb_lun();
   8695e:	f245 4101 	movw	r1, #21505	; 0x5401
   86962:	f2c0 0108 	movt	r1, #8
   86966:	4788      	blx	r1
	if (0 == udi_msc_nb_lun)
   86968:	b928      	cbnz	r0, 86976 <udi_msc_enable+0x32>
bool udi_msc_enable(void)
{
	uint8_t lun;
	udi_msc_b_trans_req = false;
	udi_msc_b_cbw_invalid = false;
	udi_msc_nb_lun = get_nb_lun();
   8696a:	f241 525c 	movw	r2, #5468	; 0x155c
   8696e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86972:	7010      	strb	r0, [r2, #0]
   86974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (0 == udi_msc_nb_lun)
		return false; // No lun available, then not authorize to enable interface
	udi_msc_nb_lun--;
   86976:	f100 30ff 	add.w	r0, r0, #4294967295
   8697a:	f241 525c 	movw	r2, #5468	; 0x155c
   8697e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86982:	7010      	strb	r0, [r2, #0]
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
   86984:	f649 61cd 	movw	r1, #40653	; 0x9ecd
   86988:	f2c0 0108 	movt	r1, #8
   8698c:	4788      	blx	r1
   8698e:	b1d8      	cbz	r0, 869c8 <udi_msc_enable+0x84>
   86990:	f04f 0400 	mov.w	r4, #0
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
		mem_unload(lun, false);
   86994:	4627      	mov	r7, r4
   86996:	f245 4639 	movw	r6, #21561	; 0x5439
   8699a:	f2c0 0608 	movt	r6, #8
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
   8699e:	f241 555c 	movw	r5, #5468	; 0x155c
   869a2:	f2c2 0507 	movt	r5, #8199	; 0x2007
		mem_unload(lun, false);
   869a6:	4620      	mov	r0, r4
   869a8:	4639      	mov	r1, r7
   869aa:	47b0      	blx	r6
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
   869ac:	f104 0401 	add.w	r4, r4, #1
   869b0:	b2e4      	uxtb	r4, r4
   869b2:	782b      	ldrb	r3, [r5, #0]
   869b4:	42a3      	cmp	r3, r4
   869b6:	d2f6      	bcs.n	869a6 <udi_msc_enable+0x62>
		mem_unload(lun, false);
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
   869b8:	f246 0029 	movw	r0, #24617	; 0x6029
   869bc:	f2c0 0008 	movt	r0, #8
   869c0:	4780      	blx	r0
	return true;
   869c2:	f04f 0001 	mov.w	r0, #1
   869c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // No lun available, then not authorize to enable interface
	udi_msc_nb_lun--;
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
   869c8:	f04f 0000 	mov.w	r0, #0
		mem_unload(lun, false);
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
	return true;
}
   869cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   869ce:	bf00      	nop

000869d0 <udi_msc_process_trans>:
	UDI_MSC_NOTIFY_TRANS_EXT();
}


bool udi_msc_process_trans(void)
{
   869d0:	b508      	push	{r3, lr}
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
   869d2:	f241 5360 	movw	r3, #5472	; 0x1560
   869d6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   869da:	7818      	ldrb	r0, [r3, #0]
   869dc:	2800      	cmp	r0, #0
   869de:	d059      	beq.n	86a94 <udi_msc_process_trans+0xc4>
		return false;	// No Transfer request to do
	udi_msc_b_trans_req = false;
   869e0:	f241 5160 	movw	r1, #5472	; 0x1560
   869e4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   869e8:	f04f 0200 	mov.w	r2, #0
   869ec:	700a      	strb	r2, [r1, #0]

	// Start transfer
	if (udi_msc_b_read) {
   869ee:	f241 53b4 	movw	r3, #5556	; 0x15b4
   869f2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   869f6:	7818      	ldrb	r0, [r3, #0]
   869f8:	b1a0      	cbz	r0, 86a24 <udi_msc_process_trans+0x54>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
   869fa:	f241 5064 	movw	r0, #5476	; 0x1564
   869fe:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86a02:	7b40      	ldrb	r0, [r0, #13]
   86a04:	f241 519c 	movw	r1, #5532	; 0x159c
   86a08:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86a0c:	6809      	ldr	r1, [r1, #0]
   86a0e:	f241 529a 	movw	r2, #5530	; 0x159a
   86a12:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86a16:	8812      	ldrh	r2, [r2, #0]
   86a18:	f245 438d 	movw	r3, #21645	; 0x548d
   86a1c:	f2c0 0308 	movt	r3, #8
   86a20:	4798      	blx	r3
   86a22:	e013      	b.n	86a4c <udi_msc_process_trans+0x7c>
				udi_msc_nb_block);
	} else {
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
   86a24:	f241 5164 	movw	r1, #5476	; 0x1564
   86a28:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86a2c:	7b48      	ldrb	r0, [r1, #13]
   86a2e:	f241 529c 	movw	r2, #5532	; 0x159c
   86a32:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86a36:	6811      	ldr	r1, [r2, #0]
   86a38:	f241 539a 	movw	r3, #5530	; 0x159a
   86a3c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86a40:	881a      	ldrh	r2, [r3, #0]
   86a42:	f245 43a9 	movw	r3, #21673	; 0x54a9
   86a46:	f2c0 0308 	movt	r3, #8
   86a4a:	4798      	blx	r3
				udi_msc_nb_block);
	}

	// Check status of transfer
	switch (status) {
   86a4c:	2802      	cmp	r0, #2
   86a4e:	d00e      	beq.n	86a6e <udi_msc_process_trans+0x9e>
   86a50:	2803      	cmp	r0, #3
   86a52:	d006      	beq.n	86a62 <udi_msc_process_trans+0x92>
   86a54:	b988      	cbnz	r0, 86a7a <udi_msc_process_trans+0xaa>
	case CTRL_GOOD:
		udi_msc_sense_pass();
   86a56:	f645 6115 	movw	r1, #24085	; 0x5e15
   86a5a:	f2c0 0108 	movt	r1, #8
   86a5e:	4788      	blx	r1
		break;
   86a60:	e010      	b.n	86a84 <udi_msc_process_trans+0xb4>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   86a62:	f645 6279 	movw	r2, #24185	; 0x5e79
   86a66:	f2c0 0208 	movt	r2, #8
   86a6a:	4790      	blx	r2
		break;
   86a6c:	e00a      	b.n	86a84 <udi_msc_process_trans+0xb4>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   86a6e:	f645 6395 	movw	r3, #24213	; 0x5e95
   86a72:	f2c0 0308 	movt	r3, #8
   86a76:	4798      	blx	r3
		break;
   86a78:	e004      	b.n	86a84 <udi_msc_process_trans+0xb4>
	default:
	case CTRL_FAIL:
		udi_msc_sense_fail_hardware();
   86a7a:	f645 60b1 	movw	r0, #24241	; 0x5eb1
   86a7e:	f2c0 0008 	movt	r0, #8
   86a82:	4780      	blx	r0
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
   86a84:	f645 702d 	movw	r0, #24365	; 0x5f2d
   86a88:	f2c0 0008 	movt	r0, #8
   86a8c:	4780      	blx	r0
	return true;
   86a8e:	f04f 0001 	mov.w	r0, #1
   86a92:	bd08      	pop	{r3, pc}
bool udi_msc_process_trans(void)
{
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
		return false;	// No Transfer request to do
   86a94:	f04f 0000 	mov.w	r0, #0
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
	return true;
}
   86a98:	bd08      	pop	{r3, pc}
   86a9a:	bf00      	nop

00086a9c <udi_msc_trans_block>:
}


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
   86a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   86a9e:	b083      	sub	sp, #12
   86aa0:	460f      	mov	r7, r1
   86aa2:	4615      	mov	r5, r2
	if (!udi_msc_b_ack_trans)
   86aa4:	f240 240c 	movw	r4, #524	; 0x20c
   86aa8:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86aac:	7824      	ldrb	r4, [r4, #0]
   86aae:	2c00      	cmp	r4, #0
   86ab0:	d03d      	beq.n	86b2e <udi_msc_trans_block+0x92>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
   86ab2:	f240 210c 	movw	r1, #524	; 0x20c
   86ab6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86aba:	f04f 0600 	mov.w	r6, #0
   86abe:	700e      	strb	r6, [r1, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
   86ac0:	42b0      	cmp	r0, r6
   86ac2:	bf0c      	ite	eq
   86ac4:	2002      	moveq	r0, #2
   86ac6:	2081      	movne	r0, #129	; 0x81
   86ac8:	2b00      	cmp	r3, #0
   86aca:	d141      	bne.n	86b50 <udi_msc_trans_block+0xb4>
   86acc:	e035      	b.n	86b3a <udi_msc_trans_block+0x9e>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
   86ace:	f240 230c 	movw	r3, #524	; 0x20c
   86ad2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86ad6:	f04f 0001 	mov.w	r0, #1
   86ada:	7018      	strb	r0, [r3, #0]
		return false;
   86adc:	f04f 0000 	mov.w	r0, #0
   86ae0:	e040      	b.n	86b64 <udi_msc_trans_block+0xc8>
	}
	if (NULL == callback) {
		while (!udi_msc_b_ack_trans);
   86ae2:	f240 220c 	movw	r2, #524	; 0x20c
   86ae6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86aea:	7810      	ldrb	r0, [r2, #0]
   86aec:	2800      	cmp	r0, #0
   86aee:	d0fc      	beq.n	86aea <udi_msc_trans_block+0x4e>
		if (udi_msc_b_abort_trans) {
   86af0:	f641 41c9 	movw	r1, #7369	; 0x1cc9
   86af4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86af8:	780b      	ldrb	r3, [r1, #0]
   86afa:	b9db      	cbnz	r3, 86b34 <udi_msc_trans_block+0x98>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
   86afc:	f240 2048 	movw	r0, #584	; 0x248
   86b00:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86b04:	6882      	ldr	r2, [r0, #8]
   86b06:	1b51      	subs	r1, r2, r5
   86b08:	6081      	str	r1, [r0, #8]
		return (!udi_msc_b_abort_trans);
   86b0a:	f641 43c9 	movw	r3, #7369	; 0x1cc9
   86b0e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86b12:	7818      	ldrb	r0, [r3, #0]
   86b14:	f080 0001 	eor.w	r0, r0, #1
   86b18:	e024      	b.n	86b64 <udi_msc_trans_block+0xc8>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
   86b1a:	f240 2148 	movw	r1, #584	; 0x248
   86b1e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86b22:	688a      	ldr	r2, [r1, #8]
   86b24:	1b55      	subs	r5, r2, r5
   86b26:	608d      	str	r5, [r1, #8]
	return true;
   86b28:	f04f 0001 	mov.w	r0, #1
   86b2c:	e01a      	b.n	86b64 <udi_msc_trans_block+0xc8>

bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
	if (!udi_msc_b_ack_trans)
		return false;	// No possible, transfer on going
   86b2e:	f04f 0000 	mov.w	r0, #0
   86b32:	e017      	b.n	86b64 <udi_msc_trans_block+0xc8>
		return false;
	}
	if (NULL == callback) {
		while (!udi_msc_b_ack_trans);
		if (udi_msc_b_abort_trans) {
			return false;
   86b34:	f04f 0000 	mov.w	r0, #0
   86b38:	e014      	b.n	86b64 <udi_msc_trans_block+0xc8>
	if (!udi_msc_b_ack_trans)
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
   86b3a:	4b0b      	ldr	r3, [pc, #44]	; (86b68 <udi_msc_trans_block+0xcc>)
   86b3c:	9300      	str	r3, [sp, #0]
   86b3e:	f04f 0100 	mov.w	r1, #0
   86b42:	463a      	mov	r2, r7
   86b44:	462b      	mov	r3, r5
   86b46:	4c09      	ldr	r4, [pc, #36]	; (86b6c <udi_msc_trans_block+0xd0>)
   86b48:	47a0      	blx	r4
   86b4a:	2800      	cmp	r0, #0
   86b4c:	d1c9      	bne.n	86ae2 <udi_msc_trans_block+0x46>
   86b4e:	e7be      	b.n	86ace <udi_msc_trans_block+0x32>
   86b50:	9300      	str	r3, [sp, #0]
   86b52:	f04f 0100 	mov.w	r1, #0
   86b56:	463a      	mov	r2, r7
   86b58:	462b      	mov	r3, r5
   86b5a:	4c04      	ldr	r4, [pc, #16]	; (86b6c <udi_msc_trans_block+0xd0>)
   86b5c:	47a0      	blx	r4
   86b5e:	2800      	cmp	r0, #0
   86b60:	d1db      	bne.n	86b1a <udi_msc_trans_block+0x7e>
   86b62:	e7b4      	b.n	86ace <udi_msc_trans_block+0x32>
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
	return true;
}
   86b64:	b003      	add	sp, #12
   86b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86b68:	00085dc5 	.word	0x00085dc5
   86b6c:	00089291 	.word	0x00089291

00086b70 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   86b70:	f241 53c0 	movw	r3, #5568	; 0x15c0
   86b74:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86b78:	6818      	ldr	r0, [r3, #0]
   86b7a:	6801      	ldr	r1, [r0, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   86b7c:	884a      	ldrh	r2, [r1, #2]
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
   86b7e:	1888      	adds	r0, r1, r2
   86b80:	4770      	bx	lr
   86b82:	bf00      	nop

00086b84 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   86b84:	b538      	push	{r3, r4, r5, lr}
   86b86:	4605      	mov	r5, r0
   86b88:	460c      	mov	r4, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   86b8a:	f646 3371 	movw	r3, #27505	; 0x6b71
   86b8e:	f2c0 0308 	movt	r3, #8
   86b92:	4798      	blx	r3
   86b94:	4602      	mov	r2, r0
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   86b96:	7828      	ldrb	r0, [r5, #0]
   86b98:	1828      	adds	r0, r5, r0
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   86b9a:	4282      	cmp	r2, r0
   86b9c:	d911      	bls.n	86bc2 <udc_next_desc_in_iface+0x3e>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   86b9e:	7841      	ldrb	r1, [r0, #1]
   86ba0:	2904      	cmp	r1, #4
   86ba2:	d011      	beq.n	86bc8 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   86ba4:	42a1      	cmp	r1, r4
   86ba6:	d105      	bne.n	86bb4 <udc_next_desc_in_iface+0x30>
   86ba8:	bd38      	pop	{r3, r4, r5, pc}
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   86baa:	7841      	ldrb	r1, [r0, #1]
   86bac:	2904      	cmp	r1, #4
   86bae:	d00e      	beq.n	86bce <udc_next_desc_in_iface+0x4a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   86bb0:	42a1      	cmp	r1, r4
   86bb2:	d00e      	beq.n	86bd2 <udc_next_desc_in_iface+0x4e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   86bb4:	7803      	ldrb	r3, [r0, #0]
   86bb6:	18c0      	adds	r0, r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   86bb8:	4282      	cmp	r2, r0
   86bba:	d8f6      	bhi.n	86baa <udc_next_desc_in_iface+0x26>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
   86bbc:	f04f 0000 	mov.w	r0, #0
   86bc0:	bd38      	pop	{r3, r4, r5, pc}
   86bc2:	f04f 0000 	mov.w	r0, #0
   86bc6:	bd38      	pop	{r3, r4, r5, pc}
   86bc8:	f04f 0000 	mov.w	r0, #0
   86bcc:	bd38      	pop	{r3, r4, r5, pc}
   86bce:	f04f 0000 	mov.w	r0, #0
}
   86bd2:	bd38      	pop	{r3, r4, r5, pc}

00086bd4 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   86bd4:	b570      	push	{r4, r5, r6, lr}
   86bd6:	4605      	mov	r5, r0
   86bd8:	460e      	mov	r6, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   86bda:	f241 53ca 	movw	r3, #5578	; 0x15ca
   86bde:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86be2:	7818      	ldrb	r0, [r3, #0]
   86be4:	2800      	cmp	r0, #0
   86be6:	d031      	beq.n	86c4c <udc_update_iface_desc+0x78>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   86be8:	f241 51c0 	movw	r1, #5568	; 0x15c0
   86bec:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86bf0:	680a      	ldr	r2, [r1, #0]
   86bf2:	6814      	ldr	r4, [r2, #0]
   86bf4:	7923      	ldrb	r3, [r4, #4]
   86bf6:	42ab      	cmp	r3, r5
   86bf8:	d92b      	bls.n	86c52 <udc_update_iface_desc+0x7e>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   86bfa:	f241 50cc 	movw	r0, #5580	; 0x15cc
   86bfe:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86c02:	6004      	str	r4, [r0, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   86c04:	f646 3171 	movw	r1, #27505	; 0x6b71
   86c08:	f2c0 0108 	movt	r1, #8
   86c0c:	4788      	blx	r1
	while (ptr_end_desc >
   86c0e:	4284      	cmp	r4, r0
   86c10:	d222      	bcs.n	86c58 <udc_update_iface_desc+0x84>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   86c12:	7862      	ldrb	r2, [r4, #1]
   86c14:	2a04      	cmp	r2, #4
   86c16:	d10d      	bne.n	86c34 <udc_update_iface_desc+0x60>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   86c18:	78a3      	ldrb	r3, [r4, #2]
   86c1a:	42ab      	cmp	r3, r5
   86c1c:	d10a      	bne.n	86c34 <udc_update_iface_desc+0x60>
   86c1e:	78e1      	ldrb	r1, [r4, #3]
   86c20:	42b1      	cmp	r1, r6
   86c22:	d107      	bne.n	86c34 <udc_update_iface_desc+0x60>
   86c24:	f241 53cc 	movw	r3, #5580	; 0x15cc
   86c28:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86c2c:	601c      	str	r4, [r3, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
   86c2e:	f04f 0001 	mov.w	r0, #1
   86c32:	bd70      	pop	{r4, r5, r6, pc}
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   86c34:	7822      	ldrb	r2, [r4, #0]
   86c36:	18a4      	adds	r4, r4, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
   86c38:	42a0      	cmp	r0, r4
   86c3a:	d8ea      	bhi.n	86c12 <udc_update_iface_desc+0x3e>
   86c3c:	f241 50cc 	movw	r0, #5580	; 0x15cc
   86c40:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86c44:	6004      	str	r4, [r0, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   86c46:	f04f 0000 	mov.w	r0, #0
   86c4a:	bd70      	pop	{r4, r5, r6, pc}
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
   86c4c:	f04f 0000 	mov.w	r0, #0
   86c50:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   86c52:	f04f 0000 	mov.w	r0, #0
   86c56:	bd70      	pop	{r4, r5, r6, pc}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   86c58:	f04f 0000 	mov.w	r0, #0
}
   86c5c:	bd70      	pop	{r4, r5, r6, pc}
   86c5e:	bf00      	nop

00086c60 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   86c60:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   86c62:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   86c66:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86c6a:	8858      	ldrh	r0, [r3, #2]
   86c6c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   86c70:	f648 7189 	movw	r1, #36745	; 0x8f89
   86c74:	f2c0 0108 	movt	r1, #8
   86c78:	4788      	blx	r1
   86c7a:	bd08      	pop	{r3, pc}

00086c7c <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   86c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86c80:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   86c82:	f646 33d5 	movw	r3, #27605	; 0x6bd5
   86c86:	f2c0 0308 	movt	r3, #8
   86c8a:	4798      	blx	r3
   86c8c:	b338      	cbz	r0, 86cde <udc_iface_enable+0x62>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   86c8e:	f241 50cc 	movw	r0, #5580	; 0x15cc
   86c92:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86c96:	6804      	ldr	r4, [r0, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   86c98:	f04f 0605 	mov.w	r6, #5
   86c9c:	f646 3585 	movw	r5, #27525	; 0x6b85
   86ca0:	f2c0 0508 	movt	r5, #8
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   86ca4:	f249 3795 	movw	r7, #37781	; 0x9395
   86ca8:	f2c0 0708 	movt	r7, #8

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   86cac:	4620      	mov	r0, r4
   86cae:	4631      	mov	r1, r6
   86cb0:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   86cb2:	4604      	mov	r4, r0
   86cb4:	b138      	cbz	r0, 86cc6 <udc_iface_enable+0x4a>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   86cb6:	7880      	ldrb	r0, [r0, #2]
   86cb8:	78e1      	ldrb	r1, [r4, #3]
   86cba:	88a2      	ldrh	r2, [r4, #4]
   86cbc:	47b8      	blx	r7
   86cbe:	2800      	cmp	r0, #0
   86cc0:	d1f4      	bne.n	86cac <udc_iface_enable+0x30>
   86cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   86cc6:	f241 51c0 	movw	r1, #5568	; 0x15c0
   86cca:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86cce:	680a      	ldr	r2, [r1, #0]
   86cd0:	6853      	ldr	r3, [r2, #4]
   86cd2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
   86cd6:	6801      	ldr	r1, [r0, #0]
   86cd8:	4788      	blx	r1
   86cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
		return false;
   86cde:	f04f 0000 	mov.w	r0, #0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
   86ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86ce6:	bf00      	nop

00086ce8 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   86ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86cec:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   86cee:	f04f 0100 	mov.w	r1, #0
   86cf2:	f646 33d5 	movw	r3, #27605	; 0x6bd5
   86cf6:	f2c0 0308 	movt	r3, #8
   86cfa:	4798      	blx	r3
   86cfc:	2800      	cmp	r0, #0
   86cfe:	d030      	beq.n	86d62 <udc_iface_disable+0x7a>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   86d00:	f241 50c0 	movw	r0, #5568	; 0x15c0
   86d04:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86d08:	6801      	ldr	r1, [r0, #0]
   86d0a:	684a      	ldr	r2, [r1, #4]
   86d0c:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   86d10:	f8d8 300c 	ldr.w	r3, [r8, #12]
   86d14:	4798      	blx	r3
   86d16:	4601      	mov	r1, r0
   86d18:	4620      	mov	r0, r4
   86d1a:	f646 32d5 	movw	r2, #27605	; 0x6bd5
   86d1e:	f2c0 0208 	movt	r2, #8
   86d22:	4790      	blx	r2
   86d24:	b308      	cbz	r0, 86d6a <udc_iface_disable+0x82>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   86d26:	f241 54cc 	movw	r4, #5580	; 0x15cc
   86d2a:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86d2e:	6824      	ldr	r4, [r4, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   86d30:	f04f 0605 	mov.w	r6, #5
   86d34:	f646 3585 	movw	r5, #27525	; 0x6b85
   86d38:	f2c0 0508 	movt	r5, #8
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   86d3c:	f648 77f9 	movw	r7, #36857	; 0x8ff9
   86d40:	f2c0 0708 	movt	r7, #8
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   86d44:	4620      	mov	r0, r4
   86d46:	4631      	mov	r1, r6
   86d48:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   86d4a:	4604      	mov	r4, r0
   86d4c:	b110      	cbz	r0, 86d54 <udc_iface_disable+0x6c>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   86d4e:	7880      	ldrb	r0, [r0, #2]
   86d50:	47b8      	blx	r7
		}
   86d52:	e7f7      	b.n	86d44 <udc_iface_disable+0x5c>
	}
#endif

	// Disable interface
	udi_api->disable();
   86d54:	f8d8 0004 	ldr.w	r0, [r8, #4]
   86d58:	4780      	blx	r0
	return true;
   86d5a:	f04f 0001 	mov.w	r0, #1
   86d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
   86d62:	f04f 0000 	mov.w	r0, #0
   86d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
		return false;
   86d6a:	f04f 0000 	mov.w	r0, #0
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
   86d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86d72:	bf00      	nop

00086d74 <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   86d74:	b508      	push	{r3, lr}
	udd_enable();
   86d76:	f248 1331 	movw	r3, #33073	; 0x8131
   86d7a:	f2c0 0308 	movt	r3, #8
   86d7e:	4798      	blx	r3
   86d80:	bd08      	pop	{r3, pc}
   86d82:	bf00      	nop

00086d84 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   86d84:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   86d86:	f241 53ca 	movw	r3, #5578	; 0x15ca
   86d8a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86d8e:	7818      	ldrb	r0, [r3, #0]
   86d90:	b1d8      	cbz	r0, 86dca <udc_reset+0x46>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86d92:	f241 51c0 	movw	r1, #5568	; 0x15c0
   86d96:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86d9a:	680a      	ldr	r2, [r1, #0]
   86d9c:	6813      	ldr	r3, [r2, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   86d9e:	7918      	ldrb	r0, [r3, #4]
   86da0:	b198      	cbz	r0, 86dca <udc_reset+0x46>
   86da2:	f04f 0400 	mov.w	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   86da6:	f646 46e9 	movw	r6, #27881	; 0x6ce9
   86daa:	f2c0 0608 	movt	r6, #8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86dae:	f241 55c0 	movw	r5, #5568	; 0x15c0
   86db2:	f2c2 0507 	movt	r5, #8199	; 0x2007
				iface_num++) {
			udc_iface_disable(iface_num);
   86db6:	4620      	mov	r0, r4
   86db8:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   86dba:	f104 0401 	add.w	r4, r4, #1
   86dbe:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86dc0:	6829      	ldr	r1, [r5, #0]
   86dc2:	680a      	ldr	r2, [r1, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   86dc4:	7913      	ldrb	r3, [r2, #4]
   86dc6:	42a3      	cmp	r3, r4
   86dc8:	d8f5      	bhi.n	86db6 <udc_reset+0x32>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
   86dca:	f241 50ca 	movw	r0, #5578	; 0x15ca
   86dce:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86dd2:	f04f 0100 	mov.w	r1, #0
   86dd6:	7001      	strb	r1, [r0, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   86dd8:	f241 53c8 	movw	r3, #5576	; 0x15c8
   86ddc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86de0:	f04f 0201 	mov.w	r2, #1
   86de4:	801a      	strh	r2, [r3, #0]
   86de6:	bd70      	pop	{r4, r5, r6, pc}

00086de8 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
   86de8:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   86dea:	f241 53ca 	movw	r3, #5578	; 0x15ca
   86dee:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86df2:	7818      	ldrb	r0, [r3, #0]
   86df4:	b1d8      	cbz	r0, 86e2e <udc_sof_notify+0x46>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86df6:	f241 51c0 	movw	r1, #5568	; 0x15c0
   86dfa:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86dfe:	680b      	ldr	r3, [r1, #0]
   86e00:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   86e02:	7910      	ldrb	r0, [r2, #4]
   86e04:	b198      	cbz	r0, 86e2e <udc_sof_notify+0x46>
   86e06:	f04f 0400 	mov.w	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86e0a:	f241 55c0 	movw	r5, #5568	; 0x15c0
   86e0e:	f2c2 0507 	movt	r5, #8199	; 0x2007
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   86e12:	685b      	ldr	r3, [r3, #4]
   86e14:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   86e18:	690a      	ldr	r2, [r1, #16]
   86e1a:	b102      	cbz	r2, 86e1e <udc_sof_notify+0x36>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   86e1c:	4790      	blx	r2
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   86e1e:	f104 0401 	add.w	r4, r4, #1
   86e22:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86e24:	682b      	ldr	r3, [r5, #0]
   86e26:	6818      	ldr	r0, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   86e28:	7901      	ldrb	r1, [r0, #4]
   86e2a:	42a1      	cmp	r1, r4
   86e2c:	d8f1      	bhi.n	86e12 <udc_sof_notify+0x2a>
   86e2e:	bd38      	pop	{r3, r4, r5, pc}

00086e30 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   86e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   86e32:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   86e36:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86e3a:	f04f 0200 	mov.w	r2, #0
   86e3e:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   86e40:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   86e42:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   86e44:	7818      	ldrb	r0, [r3, #0]
   86e46:	f010 0f80 	tst.w	r0, #128	; 0x80
   86e4a:	f000 83da 	beq.w	87602 <udc_process_setup+0x7d2>
		if (udd_g_ctrlreq.req.wLength == 0) {
   86e4e:	f641 41cc 	movw	r1, #7372	; 0x1ccc
   86e52:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86e56:	88ca      	ldrh	r2, [r1, #6]
   86e58:	2a00      	cmp	r2, #0
   86e5a:	f040 83d7 	bne.w	8760c <udc_process_setup+0x7dc>
   86e5e:	e3c4      	b.n	875ea <udc_process_setup+0x7ba>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   86e60:	f010 031f 	ands.w	r3, r0, #31
   86e64:	f040 8115 	bne.w	87092 <udc_process_setup+0x262>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   86e68:	f641 40cc 	movw	r0, #7372	; 0x1ccc
   86e6c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86e70:	7841      	ldrb	r1, [r0, #1]
   86e72:	2906      	cmp	r1, #6
   86e74:	d018      	beq.n	86ea8 <udc_process_setup+0x78>
   86e76:	2908      	cmp	r1, #8
   86e78:	f000 80f8 	beq.w	8706c <udc_process_setup+0x23c>
   86e7c:	2900      	cmp	r1, #0
   86e7e:	f040 8108 	bne.w	87092 <udc_process_setup+0x262>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   86e82:	2a02      	cmp	r2, #2
   86e84:	d10d      	bne.n	86ea2 <udc_process_setup+0x72>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   86e86:	f241 50c8 	movw	r0, #5576	; 0x15c8
   86e8a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86e8e:	f04f 0102 	mov.w	r1, #2
   86e92:	f648 73e9 	movw	r3, #36841	; 0x8fe9
   86e96:	f2c0 0308 	movt	r3, #8
   86e9a:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   86e9c:	f04f 0001 	mov.w	r0, #1
   86ea0:	e328      	b.n	874f4 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
   86ea2:	f04f 0000 	mov.w	r0, #0
   86ea6:	e325      	b.n	874f4 <udc_process_setup+0x6c4>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   86ea8:	f641 44cc 	movw	r4, #7372	; 0x1ccc
   86eac:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86eb0:	8860      	ldrh	r0, [r4, #2]
   86eb2:	b2c4      	uxtb	r4, r0

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   86eb4:	ea4f 2110 	mov.w	r1, r0, lsr #8
   86eb8:	f101 33ff 	add.w	r3, r1, #4294967295
   86ebc:	2b06      	cmp	r3, #6
   86ebe:	f200 80c3 	bhi.w	87048 <udc_process_setup+0x218>
   86ec2:	e8df f013 	tbh	[pc, r3, lsl #1]
   86ec6:	0007      	.short	0x0007
   86ec8:	0078001b 	.word	0x0078001b
   86ecc:	00c100c1 	.word	0x00c100c1
   86ed0:	00510044 	.word	0x00510044
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   86ed4:	f648 7271 	movw	r2, #36721	; 0x8f71
   86ed8:	f2c0 0208 	movt	r2, #8
   86edc:	4790      	blx	r2
   86ede:	b930      	cbnz	r0, 86eee <udc_process_setup+0xbe>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
   86ee0:	48a3      	ldr	r0, [pc, #652]	; (87170 <udc_process_setup+0x340>)
   86ee2:	6883      	ldr	r3, [r0, #8]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
			udd_set_setup_payload(
   86ee4:	4618      	mov	r0, r3
   86ee6:	7819      	ldrb	r1, [r3, #0]
   86ee8:	4aa2      	ldr	r2, [pc, #648]	; (87174 <udc_process_setup+0x344>)
   86eea:	4790      	blx	r2
   86eec:	e09c      	b.n	87028 <udc_process_setup+0x1f8>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
   86eee:	4ba0      	ldr	r3, [pc, #640]	; (87170 <udc_process_setup+0x340>)
   86ef0:	6819      	ldr	r1, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
   86ef2:	4608      	mov	r0, r1
   86ef4:	7809      	ldrb	r1, [r1, #0]
   86ef6:	4a9f      	ldr	r2, [pc, #636]	; (87174 <udc_process_setup+0x344>)
   86ef8:	4790      	blx	r2
   86efa:	e095      	b.n	87028 <udc_process_setup+0x1f8>
		break;

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   86efc:	f648 7171 	movw	r1, #36721	; 0x8f71
   86f00:	f2c0 0108 	movt	r1, #8
   86f04:	4788      	blx	r1
   86f06:	b170      	cbz	r0, 86f26 <udc_process_setup+0xf6>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   86f08:	4899      	ldr	r0, [pc, #612]	; (87170 <udc_process_setup+0x340>)
   86f0a:	6881      	ldr	r1, [r0, #8]
   86f0c:	7c4a      	ldrb	r2, [r1, #17]
   86f0e:	42a2      	cmp	r2, r4
   86f10:	f240 809d 	bls.w	8704e <udc_process_setup+0x21e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   86f14:	4b96      	ldr	r3, [pc, #600]	; (87170 <udc_process_setup+0x340>)
   86f16:	6918      	ldr	r0, [r3, #16]
   86f18:	f850 1034 	ldr.w	r1, [r0, r4, lsl #3]
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   86f1c:	4608      	mov	r0, r1
   86f1e:	8849      	ldrh	r1, [r1, #2]
   86f20:	4a94      	ldr	r2, [pc, #592]	; (87174 <udc_process_setup+0x344>)
   86f22:	4790      	blx	r2
   86f24:	e00d      	b.n	86f42 <udc_process_setup+0x112>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   86f26:	4b92      	ldr	r3, [pc, #584]	; (87170 <udc_process_setup+0x340>)
   86f28:	681a      	ldr	r2, [r3, #0]
   86f2a:	7c50      	ldrb	r0, [r2, #17]
   86f2c:	42a0      	cmp	r0, r4
   86f2e:	f240 8091 	bls.w	87054 <udc_process_setup+0x224>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   86f32:	498f      	ldr	r1, [pc, #572]	; (87170 <udc_process_setup+0x340>)
   86f34:	684b      	ldr	r3, [r1, #4]
   86f36:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   86f3a:	4610      	mov	r0, r2
   86f3c:	8851      	ldrh	r1, [r2, #2]
   86f3e:	4b8d      	ldr	r3, [pc, #564]	; (87174 <udc_process_setup+0x344>)
   86f40:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   86f42:	4b8d      	ldr	r3, [pc, #564]	; (87178 <udc_process_setup+0x348>)
   86f44:	6898      	ldr	r0, [r3, #8]
   86f46:	f04f 0102 	mov.w	r1, #2
   86f4a:	7041      	strb	r1, [r0, #1]
   86f4c:	e06c      	b.n	87028 <udc_process_setup+0x1f8>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
				udc_config.qualifier->bLength);
   86f4e:	f240 1368 	movw	r3, #360	; 0x168
   86f52:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86f56:	68d9      	ldr	r1, [r3, #12]
		break;

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   86f58:	4608      	mov	r0, r1
   86f5a:	7809      	ldrb	r1, [r1, #0]
   86f5c:	f648 72e9 	movw	r2, #36841	; 0x8fe9
   86f60:	f2c0 0208 	movt	r2, #8
   86f64:	4790      	blx	r2
   86f66:	e05f      	b.n	87028 <udc_process_setup+0x1f8>
				udc_config.qualifier->bLength);
		break;

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   86f68:	f648 7271 	movw	r2, #36721	; 0x8f71
   86f6c:	f2c0 0208 	movt	r2, #8
   86f70:	4790      	blx	r2
   86f72:	b968      	cbnz	r0, 86f90 <udc_process_setup+0x160>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   86f74:	4a7e      	ldr	r2, [pc, #504]	; (87170 <udc_process_setup+0x340>)
   86f76:	6890      	ldr	r0, [r2, #8]
   86f78:	7c41      	ldrb	r1, [r0, #17]
   86f7a:	42a1      	cmp	r1, r4
   86f7c:	d96d      	bls.n	8705a <udc_process_setup+0x22a>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   86f7e:	4b7c      	ldr	r3, [pc, #496]	; (87170 <udc_process_setup+0x340>)
   86f80:	691a      	ldr	r2, [r3, #16]
   86f82:	f852 1034 	ldr.w	r1, [r2, r4, lsl #3]
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   86f86:	4608      	mov	r0, r1
   86f88:	8849      	ldrh	r1, [r1, #2]
   86f8a:	4b7a      	ldr	r3, [pc, #488]	; (87174 <udc_process_setup+0x344>)
   86f8c:	4798      	blx	r3
   86f8e:	e00c      	b.n	86faa <udc_process_setup+0x17a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   86f90:	4877      	ldr	r0, [pc, #476]	; (87170 <udc_process_setup+0x340>)
   86f92:	6801      	ldr	r1, [r0, #0]
   86f94:	7c4b      	ldrb	r3, [r1, #17]
   86f96:	42a3      	cmp	r3, r4
   86f98:	d962      	bls.n	87060 <udc_process_setup+0x230>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   86f9a:	4a75      	ldr	r2, [pc, #468]	; (87170 <udc_process_setup+0x340>)
   86f9c:	6850      	ldr	r0, [r2, #4]
   86f9e:	f850 1034 	ldr.w	r1, [r0, r4, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   86fa2:	4608      	mov	r0, r1
   86fa4:	8849      	ldrh	r1, [r1, #2]
   86fa6:	4b73      	ldr	r3, [pc, #460]	; (87174 <udc_process_setup+0x344>)
   86fa8:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   86faa:	4873      	ldr	r0, [pc, #460]	; (87178 <udc_process_setup+0x348>)
   86fac:	6881      	ldr	r1, [r0, #8]
   86fae:	f04f 0207 	mov.w	r2, #7
   86fb2:	704a      	strb	r2, [r1, #1]
   86fb4:	e038      	b.n	87028 <udc_process_setup+0x1f8>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   86fb6:	b2c0      	uxtb	r0, r0
   86fb8:	2803      	cmp	r0, #3
   86fba:	d80b      	bhi.n	86fd4 <udc_process_setup+0x1a4>
   86fbc:	e8df f010 	tbh	[pc, r0, lsl #1]
   86fc0:	000e0004 	.word	0x000e0004
   86fc4:	032f032b 	.word	0x032f032b
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   86fc8:	486c      	ldr	r0, [pc, #432]	; (8717c <udc_process_setup+0x34c>)
   86fca:	f04f 0104 	mov.w	r1, #4
   86fce:	4a69      	ldr	r2, [pc, #420]	; (87174 <udc_process_setup+0x344>)
   86fd0:	4790      	blx	r2
   86fd2:	e029      	b.n	87028 <udc_process_setup+0x1f8>
		str = udc_get_string_serial_name();
		break;
#endif
	default:
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
   86fd4:	486a      	ldr	r0, [pc, #424]	; (87180 <udc_process_setup+0x350>)
   86fd6:	4780      	blx	r0
   86fd8:	bb30      	cbnz	r0, 87028 <udc_process_setup+0x1f8>
   86fda:	e28b      	b.n	874f4 <udc_process_setup+0x6c4>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
   86fdc:	4969      	ldr	r1, [pc, #420]	; (87184 <udc_process_setup+0x354>)
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   86fde:	f04f 0008 	mov.w	r0, #8
   86fe2:	f04f 0300 	mov.w	r3, #0
   86fe6:	4a68      	ldr	r2, [pc, #416]	; (87188 <udc_process_setup+0x358>)
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   86fe8:	5ccc      	ldrb	r4, [r1, r3]
   86fea:	f822 4f02 	strh.w	r4, [r2, #2]!
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   86fee:	f103 0301 	add.w	r3, r3, #1
   86ff2:	2801      	cmp	r0, #1
   86ff4:	f200 8317 	bhi.w	87626 <udc_process_setup+0x7f6>
   86ff8:	e00e      	b.n	87018 <udc_process_setup+0x1e8>
   86ffa:	f102 0402 	add.w	r4, r2, #2
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   86ffe:	5ccd      	ldrb	r5, [r1, r3]
   87000:	8055      	strh	r5, [r2, #2]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   87002:	f103 0301 	add.w	r3, r3, #1
   87006:	f102 0204 	add.w	r2, r2, #4
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   8700a:	5ccd      	ldrb	r5, [r1, r3]
   8700c:	8065      	strh	r5, [r4, #2]
   8700e:	f103 0301 	add.w	r3, r3, #1
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   87012:	b2dc      	uxtb	r4, r3
   87014:	4284      	cmp	r4, r0
   87016:	d3f0      	bcc.n	86ffa <udc_process_setup+0x1ca>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   87018:	ea4f 0140 	mov.w	r1, r0, lsl #1
   8701c:	f101 0102 	add.w	r1, r1, #2
   87020:	4859      	ldr	r0, [pc, #356]	; (87188 <udc_process_setup+0x358>)
   87022:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   87024:	4b53      	ldr	r3, [pc, #332]	; (87174 <udc_process_setup+0x344>)
   87026:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   87028:	f641 41cc 	movw	r1, #7372	; 0x1ccc
   8702c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87030:	88c8      	ldrh	r0, [r1, #6]
   87032:	898b      	ldrh	r3, [r1, #12]
   87034:	4283      	cmp	r3, r0
   87036:	d916      	bls.n	87066 <udc_process_setup+0x236>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   87038:	f641 42cc 	movw	r2, #7372	; 0x1ccc
   8703c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87040:	8190      	strh	r0, [r2, #12]
	}
	return true;
   87042:	f04f 0001 	mov.w	r0, #1
   87046:	e255      	b.n	874f4 <udc_process_setup+0x6c4>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   87048:	f04f 0000 	mov.w	r0, #0
   8704c:	e252      	b.n	874f4 <udc_process_setup+0x6c4>
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
   8704e:	f04f 0000 	mov.w	r0, #0
   87052:	e24f      	b.n	874f4 <udc_process_setup+0x6c4>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
   87054:	f04f 0000 	mov.w	r0, #0
   87058:	e24c      	b.n	874f4 <udc_process_setup+0x6c4>
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
   8705a:	f04f 0000 	mov.w	r0, #0
   8705e:	e249      	b.n	874f4 <udc_process_setup+0x6c4>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
   87060:	f04f 0000 	mov.w	r0, #0
   87064:	e246      	b.n	874f4 <udc_process_setup+0x6c4>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
   87066:	f04f 0001 	mov.w	r0, #1
   8706a:	e243      	b.n	874f4 <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
   8706c:	2a01      	cmp	r2, #1
   8706e:	d10d      	bne.n	8708c <udc_process_setup+0x25c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   87070:	f241 50ca 	movw	r0, #5578	; 0x15ca
   87074:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87078:	f04f 0101 	mov.w	r1, #1
   8707c:	f648 72e9 	movw	r2, #36841	; 0x8fe9
   87080:	f2c0 0208 	movt	r2, #8
   87084:	4790      	blx	r2
	return true;
   87086:	f04f 0001 	mov.w	r0, #1
   8708a:	e233      	b.n	874f4 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
   8708c:	f04f 0000 	mov.w	r0, #0
   87090:	e230      	b.n	874f4 <udc_process_setup+0x6c4>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   87092:	2b01      	cmp	r3, #1
   87094:	d134      	bne.n	87100 <udc_process_setup+0x2d0>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   87096:	f641 40cc 	movw	r0, #7372	; 0x1ccc
   8709a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8709e:	7841      	ldrb	r1, [r0, #1]
   870a0:	290a      	cmp	r1, #10
   870a2:	d12d      	bne.n	87100 <udc_process_setup+0x2d0>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   870a4:	2a01      	cmp	r2, #1
   870a6:	d11f      	bne.n	870e8 <udc_process_setup+0x2b8>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   870a8:	4838      	ldr	r0, [pc, #224]	; (8718c <udc_process_setup+0x35c>)
   870aa:	7801      	ldrb	r1, [r0, #0]
   870ac:	b1f9      	cbz	r1, 870ee <udc_process_setup+0x2be>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   870ae:	4c32      	ldr	r4, [pc, #200]	; (87178 <udc_process_setup+0x348>)
   870b0:	7924      	ldrb	r4, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   870b2:	4d37      	ldr	r5, [pc, #220]	; (87190 <udc_process_setup+0x360>)
   870b4:	682d      	ldr	r5, [r5, #0]
   870b6:	682b      	ldr	r3, [r5, #0]
   870b8:	791a      	ldrb	r2, [r3, #4]
   870ba:	42a2      	cmp	r2, r4
   870bc:	d91a      	bls.n	870f4 <udc_process_setup+0x2c4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   870be:	4620      	mov	r0, r4
   870c0:	f04f 0100 	mov.w	r1, #0
   870c4:	4b33      	ldr	r3, [pc, #204]	; (87194 <udc_process_setup+0x364>)
   870c6:	4798      	blx	r3
   870c8:	b1b8      	cbz	r0, 870fa <udc_process_setup+0x2ca>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   870ca:	6868      	ldr	r0, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   870cc:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
   870d0:	68ca      	ldr	r2, [r1, #12]
   870d2:	4790      	blx	r2
   870d4:	4b30      	ldr	r3, [pc, #192]	; (87198 <udc_process_setup+0x368>)
   870d6:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   870d8:	4618      	mov	r0, r3
   870da:	f04f 0101 	mov.w	r1, #1
   870de:	4a25      	ldr	r2, [pc, #148]	; (87174 <udc_process_setup+0x344>)
   870e0:	4790      	blx	r2
	return true;
   870e2:	f04f 0001 	mov.w	r0, #1
   870e6:	e205      	b.n	874f4 <udc_process_setup+0x6c4>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
   870e8:	f04f 0000 	mov.w	r0, #0
   870ec:	e202      	b.n	874f4 <udc_process_setup+0x6c4>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
   870ee:	f04f 0000 	mov.w	r0, #0
   870f2:	e1ff      	b.n	874f4 <udc_process_setup+0x6c4>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   870f4:	f04f 0000 	mov.w	r0, #0
   870f8:	e1fc      	b.n	874f4 <udc_process_setup+0x6c4>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
   870fa:	f04f 0000 	mov.w	r0, #0
   870fe:	e1f9      	b.n	874f4 <udc_process_setup+0x6c4>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   87100:	2b02      	cmp	r3, #2
   87102:	f040 81f9 	bne.w	874f8 <udc_process_setup+0x6c8>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   87106:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   8710a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8710e:	7858      	ldrb	r0, [r3, #1]
   87110:	2800      	cmp	r0, #0
   87112:	f040 81d5 	bne.w	874c0 <udc_process_setup+0x690>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   87116:	2a02      	cmp	r2, #2
   87118:	d10d      	bne.n	87136 <udc_process_setup+0x306>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   8711a:	4a17      	ldr	r2, [pc, #92]	; (87178 <udc_process_setup+0x348>)
   8711c:	7910      	ldrb	r0, [r2, #4]
   8711e:	491f      	ldr	r1, [pc, #124]	; (8719c <udc_process_setup+0x36c>)
   87120:	4788      	blx	r1
   87122:	4b1f      	ldr	r3, [pc, #124]	; (871a0 <udc_process_setup+0x370>)
   87124:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   87126:	4618      	mov	r0, r3
   87128:	f04f 0102 	mov.w	r1, #2
   8712c:	4a11      	ldr	r2, [pc, #68]	; (87174 <udc_process_setup+0x344>)
   8712e:	4790      	blx	r2
			sizeof(udc_ep_status));
	return true;
   87130:	f04f 0001 	mov.w	r0, #1
   87134:	e1de      	b.n	874f4 <udc_process_setup+0x6c4>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
   87136:	f04f 0000 	mov.w	r0, #0
   8713a:	e1db      	b.n	874f4 <udc_process_setup+0x6c4>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   8713c:	f010 031f 	ands.w	r3, r0, #31
   87140:	f040 8142 	bne.w	873c8 <udc_process_setup+0x598>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   87144:	f641 41cc 	movw	r1, #7372	; 0x1ccc
   87148:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8714c:	784a      	ldrb	r2, [r1, #1]
   8714e:	f102 30ff 	add.w	r0, r2, #4294967295
   87152:	2808      	cmp	r0, #8
   87154:	f200 8138 	bhi.w	873c8 <udc_process_setup+0x598>
   87158:	e8df f010 	tbh	[pc, r0, lsl #1]
   8715c:	01360039 	.word	0x01360039
   87160:	01360057 	.word	0x01360057
   87164:	01360024 	.word	0x01360024
   87168:	01360136 	.word	0x01360136
   8716c:	00ae      	.short	0x00ae
   8716e:	bf00      	nop
   87170:	20070168 	.word	0x20070168
   87174:	00088fe9 	.word	0x00088fe9
   87178:	20071ccc 	.word	0x20071ccc
   8717c:	20070294 	.word	0x20070294
   87180:	00085179 	.word	0x00085179
   87184:	20070268 	.word	0x20070268
   87188:	20070274 	.word	0x20070274
   8718c:	200715ca 	.word	0x200715ca
   87190:	200715c0 	.word	0x200715c0
   87194:	00086bd5 	.word	0x00086bd5
   87198:	200715c6 	.word	0x200715c6
   8719c:	0008905d 	.word	0x0008905d
   871a0:	200715c4 	.word	0x200715c4
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   871a4:	f641 40cc 	movw	r0, #7372	; 0x1ccc
   871a8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   871ac:	88c1      	ldrh	r1, [r0, #6]
   871ae:	b959      	cbnz	r1, 871c8 <udc_process_setup+0x398>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   871b0:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   871b4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   871b8:	f646 4261 	movw	r2, #27745	; 0x6c61
   871bc:	f2c0 0208 	movt	r2, #8
   871c0:	611a      	str	r2, [r3, #16]
	return true;
   871c2:	f04f 0001 	mov.w	r0, #1
   871c6:	e195      	b.n	874f4 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   871c8:	f04f 0000 	mov.w	r0, #0
   871cc:	e192      	b.n	874f4 <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   871ce:	f641 42cc 	movw	r2, #7372	; 0x1ccc
   871d2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   871d6:	88d1      	ldrh	r1, [r2, #6]
   871d8:	b989      	cbnz	r1, 871fe <udc_process_setup+0x3ce>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   871da:	f641 40cc 	movw	r0, #7372	; 0x1ccc
   871de:	f2c2 0007 	movt	r0, #8199	; 0x2007
   871e2:	8843      	ldrh	r3, [r0, #2]
   871e4:	2b01      	cmp	r3, #1
   871e6:	d10d      	bne.n	87204 <udc_process_setup+0x3d4>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   871e8:	f241 51c8 	movw	r1, #5576	; 0x15c8
   871ec:	f2c2 0107 	movt	r1, #8199	; 0x2007
   871f0:	880a      	ldrh	r2, [r1, #0]
   871f2:	f022 0002 	bic.w	r0, r2, #2
   871f6:	8008      	strh	r0, [r1, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   871f8:	f04f 0001 	mov.w	r0, #1
   871fc:	e17a      	b.n	874f4 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   871fe:	f04f 0000 	mov.w	r0, #0
   87202:	e177      	b.n	874f4 <udc_process_setup+0x6c4>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
   87204:	f04f 0000 	mov.w	r0, #0
   87208:	e174      	b.n	874f4 <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   8720a:	f641 40cc 	movw	r0, #7372	; 0x1ccc
   8720e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87212:	88c1      	ldrh	r1, [r0, #6]
   87214:	2900      	cmp	r1, #0
   87216:	d140      	bne.n	8729a <udc_process_setup+0x46a>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
   87218:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   8721c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87220:	885a      	ldrh	r2, [r3, #2]
   87222:	2a02      	cmp	r2, #2
   87224:	d13c      	bne.n	872a0 <udc_process_setup+0x470>
		return false;
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
   87226:	f648 7071 	movw	r0, #36721	; 0x8f71
   8722a:	f2c0 0008 	movt	r0, #8
   8722e:	4780      	blx	r0
   87230:	2800      	cmp	r0, #0
   87232:	d038      	beq.n	872a6 <udc_process_setup+0x476>
			break;
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   87234:	f641 41cc 	movw	r1, #7372	; 0x1ccc
   87238:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8723c:	790b      	ldrb	r3, [r1, #4]
   8723e:	2b00      	cmp	r3, #0
   87240:	d134      	bne.n	872ac <udc_process_setup+0x47c>
			break;
		}
		// Unconfigure the device, terminating all ongoing requests
		udc_reset();
   87242:	f646 5285 	movw	r2, #28037	; 0x6d85
   87246:	f2c0 0208 	movt	r2, #8
   8724a:	4790      	blx	r2
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   8724c:	f641 40cc 	movw	r0, #7372	; 0x1ccc
   87250:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87254:	8881      	ldrh	r1, [r0, #4]
   87256:	ea4f 2311 	mov.w	r3, r1, lsr #8
   8725a:	f103 30ff 	add.w	r0, r3, #4294967295
   8725e:	2803      	cmp	r0, #3
   87260:	d827      	bhi.n	872b2 <udc_process_setup+0x482>
   87262:	e8df f000 	tbb	[pc, r0]
   87266:	0802      	.short	0x0802
   87268:	140e      	.short	0x140e
		case USB_DEV_TEST_MODE_J:
			udd_g_ctrlreq.callback = udd_test_mode_j;
   8726a:	4897      	ldr	r0, [pc, #604]	; (874c8 <udc_process_setup+0x698>)
   8726c:	4b97      	ldr	r3, [pc, #604]	; (874cc <udc_process_setup+0x69c>)
   8726e:	6118      	str	r0, [r3, #16]
			return true;
   87270:	f04f 0001 	mov.w	r0, #1
   87274:	e13e      	b.n	874f4 <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_K:
			udd_g_ctrlreq.callback = udd_test_mode_k;
   87276:	4a96      	ldr	r2, [pc, #600]	; (874d0 <udc_process_setup+0x6a0>)
   87278:	4994      	ldr	r1, [pc, #592]	; (874cc <udc_process_setup+0x69c>)
   8727a:	610a      	str	r2, [r1, #16]
			return true;
   8727c:	f04f 0001 	mov.w	r0, #1
   87280:	e138      	b.n	874f4 <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_SE0_NAK:
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   87282:	4894      	ldr	r0, [pc, #592]	; (874d4 <udc_process_setup+0x6a4>)
   87284:	4b91      	ldr	r3, [pc, #580]	; (874cc <udc_process_setup+0x69c>)
   87286:	6118      	str	r0, [r3, #16]
			return true;
   87288:	f04f 0001 	mov.w	r0, #1
   8728c:	e132      	b.n	874f4 <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_PACKET:
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   8728e:	4a92      	ldr	r2, [pc, #584]	; (874d8 <udc_process_setup+0x6a8>)
   87290:	498e      	ldr	r1, [pc, #568]	; (874cc <udc_process_setup+0x69c>)
   87292:	610a      	str	r2, [r1, #16]
			return true;
   87294:	f04f 0001 	mov.w	r0, #1
   87298:	e12c      	b.n	874f4 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   8729a:	f04f 0000 	mov.w	r0, #0
   8729e:	e129      	b.n	874f4 <udc_process_setup+0x6c4>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
   872a0:	f04f 0000 	mov.w	r0, #0
   872a4:	e126      	b.n	874f4 <udc_process_setup+0x6c4>
		break;
#endif
	default:
		break;
	}
	return false;
   872a6:	f04f 0000 	mov.w	r0, #0
   872aa:	e123      	b.n	874f4 <udc_process_setup+0x6c4>
   872ac:	f04f 0000 	mov.w	r0, #0
   872b0:	e120      	b.n	874f4 <udc_process_setup+0x6c4>
   872b2:	f04f 0000 	mov.w	r0, #0
   872b6:	e11d      	b.n	874f4 <udc_process_setup+0x6c4>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   872b8:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   872bc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   872c0:	88d9      	ldrh	r1, [r3, #6]
   872c2:	2900      	cmp	r1, #0
   872c4:	d16e      	bne.n	873a4 <udc_process_setup+0x574>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   872c6:	f648 72b5 	movw	r2, #36789	; 0x8fb5
   872ca:	f2c0 0208 	movt	r2, #8
   872ce:	4790      	blx	r2
   872d0:	2800      	cmp	r0, #0
   872d2:	d06a      	beq.n	873aa <udc_process_setup+0x57a>
		return false;
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   872d4:	f648 7071 	movw	r0, #36721	; 0x8f71
   872d8:	f2c0 0008 	movt	r0, #8
   872dc:	4780      	blx	r0
   872de:	b168      	cbz	r0, 872fc <udc_process_setup+0x4cc>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   872e0:	f641 41cc 	movw	r1, #7372	; 0x1ccc
   872e4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   872e8:	788a      	ldrb	r2, [r1, #2]
				udc_config.confdev_hs->bNumConfigurations) {
   872ea:	f240 1068 	movw	r0, #360	; 0x168
   872ee:	f2c2 0007 	movt	r0, #8199	; 0x2007
   872f2:	6883      	ldr	r3, [r0, #8]
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   872f4:	7c59      	ldrb	r1, [r3, #17]
   872f6:	428a      	cmp	r2, r1
   872f8:	dd0d      	ble.n	87316 <udc_process_setup+0x4e6>
   872fa:	e059      	b.n	873b0 <udc_process_setup+0x580>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   872fc:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   87300:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87304:	7899      	ldrb	r1, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   87306:	f240 1268 	movw	r2, #360	; 0x168
   8730a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8730e:	6810      	ldr	r0, [r2, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   87310:	7c43      	ldrb	r3, [r0, #17]
   87312:	4299      	cmp	r1, r3
   87314:	dc4f      	bgt.n	873b6 <udc_process_setup+0x586>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
   87316:	f646 5285 	movw	r2, #28037	; 0x6d85
   8731a:	f2c0 0208 	movt	r2, #8
   8731e:	4790      	blx	r2

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   87320:	f641 40cc 	movw	r0, #7372	; 0x1ccc
   87324:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87328:	7883      	ldrb	r3, [r0, #2]
   8732a:	f241 51ca 	movw	r1, #5578	; 0x15ca
   8732e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87332:	700b      	strb	r3, [r1, #0]
	if (udc_num_configuration == 0) {
   87334:	2b00      	cmp	r3, #0
   87336:	d041      	beq.n	873bc <udc_process_setup+0x58c>
		return true; // Default empty configuration requested
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   87338:	4a68      	ldr	r2, [pc, #416]	; (874dc <udc_process_setup+0x6ac>)
   8733a:	4790      	blx	r2
   8733c:	b198      	cbz	r0, 87366 <udc_process_setup+0x536>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   8733e:	4a68      	ldr	r2, [pc, #416]	; (874e0 <udc_process_setup+0x6b0>)
   87340:	7810      	ldrb	r0, [r2, #0]
   87342:	f100 31ff 	add.w	r1, r0, #4294967295
   87346:	4b67      	ldr	r3, [pc, #412]	; (874e4 <udc_process_setup+0x6b4>)
   87348:	691a      	ldr	r2, [r3, #16]
   8734a:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
   8734e:	4966      	ldr	r1, [pc, #408]	; (874e8 <udc_process_setup+0x6b8>)
   87350:	6008      	str	r0, [r1, #0]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   87352:	4b65      	ldr	r3, [pc, #404]	; (874e8 <udc_process_setup+0x6b8>)
   87354:	681a      	ldr	r2, [r3, #0]
   87356:	6810      	ldr	r0, [r2, #0]
   87358:	7901      	ldrb	r1, [r0, #4]
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
   8735a:	f04f 0001 	mov.w	r0, #1
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8735e:	2900      	cmp	r1, #0
   87360:	f000 80c8 	beq.w	874f4 <udc_process_setup+0x6c4>
   87364:	e00a      	b.n	8737c <udc_process_setup+0x54c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   87366:	485e      	ldr	r0, [pc, #376]	; (874e0 <udc_process_setup+0x6b0>)
   87368:	7803      	ldrb	r3, [r0, #0]
   8736a:	f103 31ff 	add.w	r1, r3, #4294967295
   8736e:	4a5d      	ldr	r2, [pc, #372]	; (874e4 <udc_process_setup+0x6b4>)
   87370:	6850      	ldr	r0, [r2, #4]
   87372:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   87376:	4b5c      	ldr	r3, [pc, #368]	; (874e8 <udc_process_setup+0x6b8>)
   87378:	6019      	str	r1, [r3, #0]
   8737a:	e7ea      	b.n	87352 <udc_process_setup+0x522>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8737c:	f04f 0400 	mov.w	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   87380:	4626      	mov	r6, r4
   87382:	4d5a      	ldr	r5, [pc, #360]	; (874ec <udc_process_setup+0x6bc>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   87384:	4f58      	ldr	r7, [pc, #352]	; (874e8 <udc_process_setup+0x6b8>)
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   87386:	4620      	mov	r0, r4
   87388:	4631      	mov	r1, r6
   8738a:	47a8      	blx	r5
   8738c:	b1c8      	cbz	r0, 873c2 <udc_process_setup+0x592>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   8738e:	f104 0401 	add.w	r4, r4, #1
   87392:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   87394:	683b      	ldr	r3, [r7, #0]
   87396:	681a      	ldr	r2, [r3, #0]
   87398:	7910      	ldrb	r0, [r2, #4]
   8739a:	42a0      	cmp	r0, r4
   8739c:	d8f3      	bhi.n	87386 <udc_process_setup+0x556>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
   8739e:	f04f 0001 	mov.w	r0, #1
   873a2:	e0a7      	b.n	874f4 <udc_process_setup+0x6c4>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   873a4:	f04f 0000 	mov.w	r0, #0
   873a8:	e0a4      	b.n	874f4 <udc_process_setup+0x6c4>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
   873aa:	f04f 0000 	mov.w	r0, #0
   873ae:	e0a1      	b.n	874f4 <udc_process_setup+0x6c4>
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
   873b0:	f04f 0000 	mov.w	r0, #0
   873b4:	e09e      	b.n	874f4 <udc_process_setup+0x6c4>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
   873b6:	f04f 0000 	mov.w	r0, #0
   873ba:	e09b      	b.n	874f4 <udc_process_setup+0x6c4>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
   873bc:	f04f 0001 	mov.w	r0, #1
   873c0:	e098      	b.n	874f4 <udc_process_setup+0x6c4>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
   873c2:	f04f 0000 	mov.w	r0, #0
   873c6:	e095      	b.n	874f4 <udc_process_setup+0x6c4>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   873c8:	2b01      	cmp	r3, #1
   873ca:	d12d      	bne.n	87428 <udc_process_setup+0x5f8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   873cc:	f641 41cc 	movw	r1, #7372	; 0x1ccc
   873d0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   873d4:	784a      	ldrb	r2, [r1, #1]
   873d6:	2a0b      	cmp	r2, #11
   873d8:	d126      	bne.n	87428 <udc_process_setup+0x5f8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   873da:	f641 40cc 	movw	r0, #7372	; 0x1ccc
   873de:	f2c2 0007 	movt	r0, #8199	; 0x2007
   873e2:	88c2      	ldrh	r2, [r0, #6]
   873e4:	b9ba      	cbnz	r2, 87416 <udc_process_setup+0x5e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   873e6:	f241 53ca 	movw	r3, #5578	; 0x15ca
   873ea:	f2c2 0307 	movt	r3, #8199	; 0x2007
   873ee:	7819      	ldrb	r1, [r3, #0]
   873f0:	b1a1      	cbz	r1, 8741c <udc_process_setup+0x5ec>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   873f2:	f641 45cc 	movw	r5, #7372	; 0x1ccc
   873f6:	f2c2 0507 	movt	r5, #8199	; 0x2007
   873fa:	792c      	ldrb	r4, [r5, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   873fc:	886d      	ldrh	r5, [r5, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   873fe:	4620      	mov	r0, r4
   87400:	f646 42e9 	movw	r2, #27881	; 0x6ce9
   87404:	f2c0 0208 	movt	r2, #8
   87408:	4790      	blx	r2
   8740a:	b150      	cbz	r0, 87422 <udc_process_setup+0x5f2>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   8740c:	4620      	mov	r0, r4
   8740e:	b2e9      	uxtb	r1, r5
   87410:	4b36      	ldr	r3, [pc, #216]	; (874ec <udc_process_setup+0x6bc>)
   87412:	4798      	blx	r3
   87414:	e06e      	b.n	874f4 <udc_process_setup+0x6c4>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
   87416:	f04f 0000 	mov.w	r0, #0
   8741a:	e06b      	b.n	874f4 <udc_process_setup+0x6c4>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
   8741c:	f04f 0000 	mov.w	r0, #0
   87420:	e068      	b.n	874f4 <udc_process_setup+0x6c4>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
		return false;
   87422:	f04f 0000 	mov.w	r0, #0
   87426:	e065      	b.n	874f4 <udc_process_setup+0x6c4>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   87428:	2b02      	cmp	r3, #2
   8742a:	d165      	bne.n	874f8 <udc_process_setup+0x6c8>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   8742c:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   87430:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87434:	7858      	ldrb	r0, [r3, #1]
   87436:	2801      	cmp	r0, #1
   87438:	d002      	beq.n	87440 <udc_process_setup+0x610>
   8743a:	2803      	cmp	r0, #3
   8743c:	d158      	bne.n	874f0 <udc_process_setup+0x6c0>
   8743e:	e01c      	b.n	8747a <udc_process_setup+0x64a>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   87440:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   87444:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87448:	88d8      	ldrh	r0, [r3, #6]
   8744a:	b980      	cbnz	r0, 8746e <udc_process_setup+0x63e>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   8744c:	f641 41cc 	movw	r1, #7372	; 0x1ccc
   87450:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87454:	884a      	ldrh	r2, [r1, #2]
   87456:	b96a      	cbnz	r2, 87474 <udc_process_setup+0x644>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   87458:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   8745c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87460:	7918      	ldrb	r0, [r3, #4]
   87462:	f249 119d 	movw	r1, #37277	; 0x919d
   87466:	f2c0 0108 	movt	r1, #8
   8746a:	4788      	blx	r1
   8746c:	e042      	b.n	874f4 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   8746e:	f04f 0000 	mov.w	r0, #0
   87472:	e03f      	b.n	874f4 <udc_process_setup+0x6c4>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
   87474:	f04f 0000 	mov.w	r0, #0
   87478:	e03c      	b.n	874f4 <udc_process_setup+0x6c4>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   8747a:	f641 41cc 	movw	r1, #7372	; 0x1ccc
   8747e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87482:	88ca      	ldrh	r2, [r1, #6]
   87484:	b9b2      	cbnz	r2, 874b4 <udc_process_setup+0x684>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   87486:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   8748a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8748e:	8858      	ldrh	r0, [r3, #2]
   87490:	b998      	cbnz	r0, 874ba <udc_process_setup+0x68a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   87492:	f641 44cc 	movw	r4, #7372	; 0x1ccc
   87496:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8749a:	7920      	ldrb	r0, [r4, #4]
   8749c:	f649 0199 	movw	r1, #39065	; 0x9899
   874a0:	f2c0 0108 	movt	r1, #8
   874a4:	4788      	blx	r1
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   874a6:	7920      	ldrb	r0, [r4, #4]
   874a8:	f249 0275 	movw	r2, #36981	; 0x9075
   874ac:	f2c0 0208 	movt	r2, #8
   874b0:	4790      	blx	r2
   874b2:	e01f      	b.n	874f4 <udc_process_setup+0x6c4>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   874b4:	f04f 0000 	mov.w	r0, #0
   874b8:	e01c      	b.n	874f4 <udc_process_setup+0x6c4>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
   874ba:	f04f 0000 	mov.w	r0, #0
   874be:	e019      	b.n	874f4 <udc_process_setup+0x6c4>
				break;
			}
		}
#endif
	}
	return false;
   874c0:	f04f 0000 	mov.w	r0, #0
   874c4:	e016      	b.n	874f4 <udc_process_setup+0x6c4>
   874c6:	bf00      	nop
   874c8:	0008999d 	.word	0x0008999d
   874cc:	20071ccc 	.word	0x20071ccc
   874d0:	000899bd 	.word	0x000899bd
   874d4:	000899dd 	.word	0x000899dd
   874d8:	000899f5 	.word	0x000899f5
   874dc:	00088f71 	.word	0x00088f71
   874e0:	200715ca 	.word	0x200715ca
   874e4:	20070168 	.word	0x20070168
   874e8:	200715c0 	.word	0x200715c0
   874ec:	00086c7d 	.word	0x00086c7d
   874f0:	f04f 0000 	mov.w	r0, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
   874f4:	2800      	cmp	r0, #0
   874f6:	d17b      	bne.n	875f0 <udc_process_setup+0x7c0>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   874f8:	f641 41cc 	movw	r1, #7372	; 0x1ccc
   874fc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87500:	7808      	ldrb	r0, [r1, #0]
   87502:	f000 031f 	and.w	r3, r0, #31
   87506:	2b01      	cmp	r3, #1
   87508:	d12d      	bne.n	87566 <udc_process_setup+0x736>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   8750a:	f241 52ca 	movw	r2, #5578	; 0x15ca
   8750e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87512:	7811      	ldrb	r1, [r2, #0]
   87514:	b339      	cbz	r1, 87566 <udc_process_setup+0x736>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   87516:	f641 44cc 	movw	r4, #7372	; 0x1ccc
   8751a:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8751e:	7924      	ldrb	r4, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   87520:	f241 55c0 	movw	r5, #5568	; 0x15c0
   87524:	f2c2 0507 	movt	r5, #8199	; 0x2007
   87528:	682d      	ldr	r5, [r5, #0]
   8752a:	6828      	ldr	r0, [r5, #0]
   8752c:	7903      	ldrb	r3, [r0, #4]
   8752e:	42a3      	cmp	r3, r4
   87530:	d919      	bls.n	87566 <udc_process_setup+0x736>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   87532:	4620      	mov	r0, r4
   87534:	f04f 0100 	mov.w	r1, #0
   87538:	f646 32d5 	movw	r2, #27605	; 0x6bd5
   8753c:	f2c0 0208 	movt	r2, #8
   87540:	4790      	blx	r2
   87542:	b180      	cbz	r0, 87566 <udc_process_setup+0x736>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   87544:	6869      	ldr	r1, [r5, #4]
   87546:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8754a:	68e8      	ldr	r0, [r5, #12]
   8754c:	4780      	blx	r0
   8754e:	4601      	mov	r1, r0
   87550:	4620      	mov	r0, r4
   87552:	f646 33d5 	movw	r3, #27605	; 0x6bd5
   87556:	f2c0 0308 	movt	r3, #8
   8755a:	4798      	blx	r3
   8755c:	b118      	cbz	r0, 87566 <udc_process_setup+0x736>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   8755e:	68aa      	ldr	r2, [r5, #8]
   87560:	4790      	blx	r2
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
   87562:	2800      	cmp	r0, #0
   87564:	d147      	bne.n	875f6 <udc_process_setup+0x7c6>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   87566:	f641 41cc 	movw	r1, #7372	; 0x1ccc
   8756a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8756e:	7808      	ldrb	r0, [r1, #0]
   87570:	f000 031f 	and.w	r3, r0, #31
   87574:	2b02      	cmp	r3, #2
   87576:	d141      	bne.n	875fc <udc_process_setup+0x7cc>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   87578:	f241 52ca 	movw	r2, #5578	; 0x15ca
   8757c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87580:	7811      	ldrb	r1, [r2, #0]
   87582:	b331      	cbz	r1, 875d2 <udc_process_setup+0x7a2>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   87584:	f241 50c0 	movw	r0, #5568	; 0x15c0
   87588:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8758c:	6803      	ldr	r3, [r0, #0]
   8758e:	681a      	ldr	r2, [r3, #0]
   87590:	7911      	ldrb	r1, [r2, #4]
   87592:	b309      	cbz	r1, 875d8 <udc_process_setup+0x7a8>
   87594:	f04f 0400 	mov.w	r4, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   87598:	f646 36d5 	movw	r6, #27605	; 0x6bd5
   8759c:	f2c0 0608 	movt	r6, #8
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   875a0:	f241 57c0 	movw	r7, #5568	; 0x15c0
   875a4:	f2c2 0707 	movt	r7, #8199	; 0x2007
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   875a8:	685d      	ldr	r5, [r3, #4]
   875aa:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   875ae:	68eb      	ldr	r3, [r5, #12]
   875b0:	4798      	blx	r3
   875b2:	4601      	mov	r1, r0
   875b4:	4620      	mov	r0, r4
   875b6:	47b0      	blx	r6
   875b8:	b188      	cbz	r0, 875de <udc_process_setup+0x7ae>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   875ba:	68a8      	ldr	r0, [r5, #8]
   875bc:	4780      	blx	r0
   875be:	b988      	cbnz	r0, 875e4 <udc_process_setup+0x7b4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   875c0:	f104 0401 	add.w	r4, r4, #1
   875c4:	b2e4      	uxtb	r4, r4
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   875c6:	683b      	ldr	r3, [r7, #0]
   875c8:	681a      	ldr	r2, [r3, #0]
   875ca:	7911      	ldrb	r1, [r2, #4]
   875cc:	42a1      	cmp	r1, r4
   875ce:	d8eb      	bhi.n	875a8 <udc_process_setup+0x778>
   875d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
   875d2:	f04f 0000 	mov.w	r0, #0
   875d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
   875d8:	f04f 0000 	mov.w	r0, #0
   875dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
			return false;
   875de:	f04f 0000 	mov.w	r0, #0
   875e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
   875e4:	f04f 0001 	mov.w	r0, #1
   875e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
   875ea:	f04f 0000 	mov.w	r0, #0
   875ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
   875f0:	f04f 0001 	mov.w	r0, #1
   875f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
			return true;
   875f6:	f04f 0001 	mov.w	r0, #1
   875fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   875fc:	f04f 0000 	mov.w	r0, #0
   87600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   87602:	f010 0f60 	tst.w	r0, #96	; 0x60
   87606:	f47f af77 	bne.w	874f8 <udc_process_setup+0x6c8>
   8760a:	e597      	b.n	8713c <udc_process_setup+0x30c>
   8760c:	f010 0f60 	tst.w	r0, #96	; 0x60
   87610:	f47f af72 	bne.w	874f8 <udc_process_setup+0x6c8>
   87614:	e424      	b.n	86e60 <udc_process_setup+0x30>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   87616:	f04f 000e 	mov.w	r0, #14
		str = udc_string_product_name;
   8761a:	490a      	ldr	r1, [pc, #40]	; (87644 <udc_process_setup+0x814>)
   8761c:	e4e1      	b.n	86fe2 <udc_process_setup+0x1b2>
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   8761e:	f04f 000c 	mov.w	r0, #12
		str = udc_get_string_serial_name();
   87622:	4909      	ldr	r1, [pc, #36]	; (87648 <udc_process_setup+0x818>)
   87624:	e4dd      	b.n	86fe2 <udc_process_setup+0x1b2>
   87626:	f04f 0401 	mov.w	r4, #1
   8762a:	2c00      	cmp	r4, #0
   8762c:	f43f ace5 	beq.w	86ffa <udc_process_setup+0x1ca>
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   87630:	5ccc      	ldrb	r4, [r1, r3]
   87632:	f822 4f02 	strh.w	r4, [r2, #2]!
   87636:	f103 0301 	add.w	r3, r3, #1
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   8763a:	b2dc      	uxtb	r4, r3
   8763c:	4284      	cmp	r4, r0
   8763e:	f4ff acdc 	bcc.w	86ffa <udc_process_setup+0x1ca>
   87642:	e4e9      	b.n	87018 <udc_process_setup+0x1e8>
   87644:	20070258 	.word	0x20070258
   87648:	0008f464 	.word	0x0008f464

0008764c <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8764c:	b10a      	cbz	r2, 87652 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   8764e:	6641      	str	r1, [r0, #100]	; 0x64
   87650:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   87652:	6601      	str	r1, [r0, #96]	; 0x60
   87654:	4770      	bx	lr
   87656:	bf00      	nop

00087658 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   87658:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8765a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8765e:	d016      	beq.n	8768e <pio_set_peripheral+0x36>
   87660:	d804      	bhi.n	8766c <pio_set_peripheral+0x14>
   87662:	b1c9      	cbz	r1, 87698 <pio_set_peripheral+0x40>
   87664:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   87668:	d115      	bne.n	87696 <pio_set_peripheral+0x3e>
   8766a:	e009      	b.n	87680 <pio_set_peripheral+0x28>
   8766c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   87670:	d012      	beq.n	87698 <pio_set_peripheral+0x40>
   87672:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   87676:	d00f      	beq.n	87698 <pio_set_peripheral+0x40>
   87678:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8767c:	d10b      	bne.n	87696 <pio_set_peripheral+0x3e>
   8767e:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   87680:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   87682:	6f01      	ldr	r1, [r0, #112]	; 0x70
   87684:	400b      	ands	r3, r1
   87686:	ea23 0302 	bic.w	r3, r3, r2
   8768a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8768c:	e003      	b.n	87696 <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8768e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   87690:	ea42 0103 	orr.w	r1, r2, r3
   87694:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   87696:	6042      	str	r2, [r0, #4]
   87698:	4770      	bx	lr
   8769a:	bf00      	nop

0008769c <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8769c:	6441      	str	r1, [r0, #68]	; 0x44
   8769e:	4770      	bx	lr

000876a0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   876a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   876a2:	4604      	mov	r4, r0
   876a4:	460d      	mov	r5, r1
   876a6:	4616      	mov	r6, r2
   876a8:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   876aa:	f247 639d 	movw	r3, #30365	; 0x769d
   876ae:	f2c0 0308 	movt	r3, #8
   876b2:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   876b4:	4620      	mov	r0, r4
   876b6:	4629      	mov	r1, r5
   876b8:	9a06      	ldr	r2, [sp, #24]
   876ba:	f247 634d 	movw	r3, #30285	; 0x764d
   876be:	f2c0 0308 	movt	r3, #8
   876c2:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   876c4:	b10f      	cbz	r7, 876ca <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   876c6:	6525      	str	r5, [r4, #80]	; 0x50
   876c8:	e000      	b.n	876cc <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   876ca:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   876cc:	b10e      	cbz	r6, 876d2 <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   876ce:	6325      	str	r5, [r4, #48]	; 0x30
   876d0:	e000      	b.n	876d4 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   876d2:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   876d4:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   876d6:	6025      	str	r5, [r4, #0]
   876d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   876da:	bf00      	nop

000876dc <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   876dc:	b570      	push	{r4, r5, r6, lr}
   876de:	4604      	mov	r4, r0
   876e0:	460d      	mov	r5, r1
   876e2:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   876e4:	f247 639d 	movw	r3, #30365	; 0x769d
   876e8:	f2c0 0308 	movt	r3, #8
   876ec:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   876ee:	4620      	mov	r0, r4
   876f0:	4629      	mov	r1, r5
   876f2:	f006 0201 	and.w	r2, r6, #1
   876f6:	f247 634d 	movw	r3, #30285	; 0x764d
   876fa:	f2c0 0308 	movt	r3, #8
   876fe:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   87700:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   87704:	bf14      	ite	ne
   87706:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   87708:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8770a:	f016 0f02 	tst.w	r6, #2
   8770e:	d002      	beq.n	87716 <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   87710:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   87714:	e004      	b.n	87720 <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   87716:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_SCIFSR = ul_mask;
   8771a:	bf18      	it	ne
   8771c:	f8c4 5080 	strne.w	r5, [r4, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   87720:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   87722:	6025      	str	r5, [r4, #0]
   87724:	bd70      	pop	{r4, r5, r6, pc}
   87726:	bf00      	nop

00087728 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   87728:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8772a:	4770      	bx	lr

0008772c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8772c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8772e:	4770      	bx	lr

00087730 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   87730:	b5f0      	push	{r4, r5, r6, r7, lr}
   87732:	b083      	sub	sp, #12
   87734:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   87736:	ea4f 1650 	mov.w	r6, r0, lsr #5
   8773a:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
   8773e:	f201 7207 	addw	r2, r1, #1799	; 0x707
   87742:	ea4f 2642 	mov.w	r6, r2, lsl #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   87746:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   8774a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8774e:	d042      	beq.n	877d6 <pio_configure_pin+0xa6>
   87750:	d806      	bhi.n	87760 <pio_configure_pin+0x30>
   87752:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   87756:	d00a      	beq.n	8776e <pio_configure_pin+0x3e>
   87758:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   8775c:	d164      	bne.n	87828 <pio_configure_pin+0xf8>
   8775e:	e020      	b.n	877a2 <pio_configure_pin+0x72>
   87760:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   87764:	d046      	beq.n	877f4 <pio_configure_pin+0xc4>
   87766:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8776a:	d15d      	bne.n	87828 <pio_configure_pin+0xf8>
   8776c:	e042      	b.n	877f4 <pio_configure_pin+0xc4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8776e:	f000 071f 	and.w	r7, r0, #31
   87772:	f04f 0401 	mov.w	r4, #1
   87776:	fa04 f707 	lsl.w	r7, r4, r7
   8777a:	4630      	mov	r0, r6
   8777c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   87780:	463a      	mov	r2, r7
   87782:	f247 6359 	movw	r3, #30297	; 0x7659
   87786:	f2c0 0308 	movt	r3, #8
   8778a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   8778c:	4630      	mov	r0, r6
   8778e:	4639      	mov	r1, r7
   87790:	ea05 0204 	and.w	r2, r5, r4
   87794:	f247 634d 	movw	r3, #30285	; 0x764d
   87798:	f2c0 0308 	movt	r3, #8
   8779c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8779e:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   877a0:	e044      	b.n	8782c <pio_configure_pin+0xfc>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   877a2:	f000 001f 	and.w	r0, r0, #31
   877a6:	f04f 0401 	mov.w	r4, #1
   877aa:	fa04 f700 	lsl.w	r7, r4, r0
   877ae:	4630      	mov	r0, r6
   877b0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   877b4:	463a      	mov	r2, r7
   877b6:	f247 6359 	movw	r3, #30297	; 0x7659
   877ba:	f2c0 0308 	movt	r3, #8
   877be:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   877c0:	4630      	mov	r0, r6
   877c2:	4639      	mov	r1, r7
   877c4:	ea05 0204 	and.w	r2, r5, r4
   877c8:	f247 634d 	movw	r3, #30285	; 0x764d
   877cc:	f2c0 0308 	movt	r3, #8
   877d0:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   877d2:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   877d4:	e02a      	b.n	8782c <pio_configure_pin+0xfc>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   877d6:	f000 021f 	and.w	r2, r0, #31
   877da:	f04f 0401 	mov.w	r4, #1
   877de:	4630      	mov	r0, r6
   877e0:	fa04 f102 	lsl.w	r1, r4, r2
   877e4:	462a      	mov	r2, r5
   877e6:	f247 63dd 	movw	r3, #30429	; 0x76dd
   877ea:	f2c0 0308 	movt	r3, #8
   877ee:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   877f0:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   877f2:	e01b      	b.n	8782c <pio_configure_pin+0xfc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   877f4:	f000 021f 	and.w	r2, r0, #31
   877f8:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   877fc:	f005 5360 	and.w	r3, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   87800:	ea05 0104 	and.w	r1, r5, r4
   87804:	9100      	str	r1, [sp, #0]
   87806:	4630      	mov	r0, r6
   87808:	fa04 f102 	lsl.w	r1, r4, r2
   8780c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   87810:	bf14      	ite	ne
   87812:	2200      	movne	r2, #0
   87814:	2201      	moveq	r2, #1
   87816:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8781a:	f247 65a1 	movw	r5, #30369	; 0x76a1
   8781e:	f2c0 0508 	movt	r5, #8
   87822:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   87824:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   87826:	e001      	b.n	8782c <pio_configure_pin+0xfc>

	default:
		return 0;
   87828:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   8782c:	b003      	add	sp, #12
   8782e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00087830 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   87830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87832:	4604      	mov	r4, r0
   87834:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   87836:	f247 7329 	movw	r3, #30505	; 0x7729
   8783a:	f2c0 0308 	movt	r3, #8
   8783e:	4798      	blx	r3
   87840:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   87842:	4620      	mov	r0, r4
   87844:	f247 712d 	movw	r1, #30509	; 0x772d
   87848:	f2c0 0108 	movt	r1, #8
   8784c:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   8784e:	4005      	ands	r5, r0
   87850:	d014      	beq.n	8787c <pio_handler_process+0x4c>
   87852:	4c0b      	ldr	r4, [pc, #44]	; (87880 <pio_handler_process+0x50>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
   87854:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   87856:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   8785a:	42b0      	cmp	r0, r6
   8785c:	d10a      	bne.n	87874 <pio_handler_process+0x44>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8785e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   87862:	4229      	tst	r1, r5
   87864:	d006      	beq.n	87874 <pio_handler_process+0x44>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   87866:	6822      	ldr	r2, [r4, #0]
   87868:	4630      	mov	r0, r6
   8786a:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8786c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   87870:	ea25 0503 	bic.w	r5, r5, r3
   87874:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   87878:	2d00      	cmp	r5, #0
   8787a:	d1eb      	bne.n	87854 <pio_handler_process+0x24>
   8787c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8787e:	bf00      	nop
   87880:	200715dc 	.word	0x200715dc

00087884 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   87884:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   87886:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   8788a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8788e:	f04f 010b 	mov.w	r1, #11
   87892:	f647 0331 	movw	r3, #30769	; 0x7831
   87896:	f2c0 0308 	movt	r3, #8
   8789a:	4798      	blx	r3
   8789c:	bd08      	pop	{r3, pc}
   8789e:	bf00      	nop

000878a0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   878a0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   878a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   878a6:	f2c4 000e 	movt	r0, #16398	; 0x400e
   878aa:	f04f 010c 	mov.w	r1, #12
   878ae:	f647 0331 	movw	r3, #30769	; 0x7831
   878b2:	f2c0 0308 	movt	r3, #8
   878b6:	4798      	blx	r3
   878b8:	bd08      	pop	{r3, pc}
   878ba:	bf00      	nop

000878bc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   878bc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   878be:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   878c2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   878c6:	f04f 010d 	mov.w	r1, #13
   878ca:	f647 0331 	movw	r3, #30769	; 0x7831
   878ce:	f2c0 0308 	movt	r3, #8
   878d2:	4798      	blx	r3
   878d4:	bd08      	pop	{r3, pc}
   878d6:	bf00      	nop

000878d8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   878d8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   878da:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   878de:	f2c4 000e 	movt	r0, #16398	; 0x400e
   878e2:	f04f 010e 	mov.w	r1, #14
   878e6:	f647 0331 	movw	r3, #30769	; 0x7831
   878ea:	f2c0 0308 	movt	r3, #8
   878ee:	4798      	blx	r3
   878f0:	bd08      	pop	{r3, pc}
   878f2:	bf00      	nop

000878f4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   878f4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   878f8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   878fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   878fe:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   87902:	4308      	orrs	r0, r1
   87904:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   87906:	6e98      	ldr	r0, [r3, #104]	; 0x68
   87908:	f010 0f08 	tst.w	r0, #8
   8790c:	d007      	beq.n	8791e <pmc_switch_mck_to_pllack+0x2a>
   8790e:	e010      	b.n	87932 <pmc_switch_mck_to_pllack+0x3e>
   87910:	f100 33ff 	add.w	r3, r0, #4294967295
   87914:	6e90      	ldr	r0, [r2, #104]	; 0x68
   87916:	f010 0f08 	tst.w	r0, #8
   8791a:	d038      	beq.n	8798e <pmc_switch_mck_to_pllack+0x9a>
   8791c:	e009      	b.n	87932 <pmc_switch_mck_to_pllack+0x3e>
   8791e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   87922:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   87926:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8792a:	6e91      	ldr	r1, [r2, #104]	; 0x68
   8792c:	f011 0f08 	tst.w	r1, #8
   87930:	d0ee      	beq.n	87910 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   87932:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   87936:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8793a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   8793c:	f022 0303 	bic.w	r3, r2, #3
   87940:	f043 0002 	orr.w	r0, r3, #2
   87944:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   87946:	6e89      	ldr	r1, [r1, #104]	; 0x68
   87948:	f011 0f08 	tst.w	r1, #8
   8794c:	d009      	beq.n	87962 <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   8794e:	f04f 0000 	mov.w	r0, #0
   87952:	4770      	bx	lr
   87954:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   87958:	6e91      	ldr	r1, [r2, #104]	; 0x68
   8795a:	f011 0f08 	tst.w	r1, #8
   8795e:	d013      	beq.n	87988 <pmc_switch_mck_to_pllack+0x94>
   87960:	e009      	b.n	87976 <pmc_switch_mck_to_pllack+0x82>
   87962:	f44f 6300 	mov.w	r3, #2048	; 0x800
   87966:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8796a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8796e:	6e90      	ldr	r0, [r2, #104]	; 0x68
   87970:	f010 0f08 	tst.w	r0, #8
   87974:	d0ee      	beq.n	87954 <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   87976:	f04f 0000 	mov.w	r0, #0
   8797a:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8797c:	f04f 0001 	mov.w	r0, #1
   87980:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   87982:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   87986:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   87988:	3b01      	subs	r3, #1
   8798a:	d1f0      	bne.n	8796e <pmc_switch_mck_to_pllack+0x7a>
   8798c:	e7f9      	b.n	87982 <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   8798e:	1e58      	subs	r0, r3, #1
   87990:	d1cb      	bne.n	8792a <pmc_switch_mck_to_pllack+0x36>
   87992:	e7f3      	b.n	8797c <pmc_switch_mck_to_pllack+0x88>

00087994 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   87994:	b188      	cbz	r0, 879ba <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   87996:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   8799a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8799e:	6a08      	ldr	r0, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   879a0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   879a4:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   879a8:	4002      	ands	r2, r0
   879aa:	f04f 0302 	mov.w	r3, #2
   879ae:	f2c0 1337 	movt	r3, #311	; 0x137
   879b2:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   879b6:	6208      	str	r0, [r1, #32]
   879b8:	4770      	bx	lr
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   879ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   879be:	f2c4 030e 	movt	r3, #16398	; 0x400e
   879c2:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   879c4:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   879c8:	f020 0203 	bic.w	r2, r0, #3
   879cc:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   879d0:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   879d4:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   879d8:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   879dc:	6218      	str	r0, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   879de:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   879e2:	f2c4 020e 	movt	r2, #16398	; 0x400e
   879e6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   879e8:	f013 0f01 	tst.w	r3, #1
   879ec:	d0fb      	beq.n	879e6 <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   879ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   879f2:	f2c4 010e 	movt	r1, #16398	; 0x400e
   879f6:	6a08      	ldr	r0, [r1, #32]
   879f8:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   879fc:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   87a00:	620b      	str	r3, [r1, #32]
   87a02:	4770      	bx	lr

00087a04 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   87a04:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87a08:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87a0c:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   87a0e:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   87a12:	4770      	bx	lr

00087a14 <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   87a14:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87a18:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87a1c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   87a20:	629a      	str	r2, [r3, #40]	; 0x28
   87a22:	4770      	bx	lr

00087a24 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   87a24:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87a28:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87a2c:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   87a2e:	f000 0002 	and.w	r0, r0, #2
   87a32:	4770      	bx	lr

00087a34 <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
   87a34:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87a38:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87a3c:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
   87a40:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   87a42:	f44f 60c0 	mov.w	r0, #1536	; 0x600
   87a46:	f2c4 000e 	movt	r0, #16398	; 0x400e
   87a4a:	6e81      	ldr	r1, [r0, #104]	; 0x68
   87a4c:	f011 0f40 	tst.w	r1, #64	; 0x40
   87a50:	d0fb      	beq.n	87a4a <pmc_enable_upll_clock+0x16>
}
   87a52:	4770      	bx	lr

00087a54 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   87a54:	282c      	cmp	r0, #44	; 0x2c
   87a56:	d835      	bhi.n	87ac4 <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   87a58:	281f      	cmp	r0, #31
   87a5a:	d817      	bhi.n	87a8c <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   87a5c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   87a60:	f2c4 010e 	movt	r1, #16398	; 0x400e
   87a64:	698a      	ldr	r2, [r1, #24]
   87a66:	f04f 0301 	mov.w	r3, #1
   87a6a:	fa03 f300 	lsl.w	r3, r3, r0
   87a6e:	401a      	ands	r2, r3
   87a70:	4293      	cmp	r3, r2
   87a72:	d02a      	beq.n	87aca <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   87a74:	f04f 0101 	mov.w	r1, #1
   87a78:	fa01 f000 	lsl.w	r0, r1, r0
   87a7c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   87a80:	f2c4 020e 	movt	r2, #16398	; 0x400e
   87a84:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   87a86:	f04f 0000 	mov.w	r0, #0
   87a8a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   87a8c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87a90:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87a94:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   87a98:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   87a9c:	f04f 0101 	mov.w	r1, #1
   87aa0:	fa01 f100 	lsl.w	r1, r1, r0
   87aa4:	400a      	ands	r2, r1
   87aa6:	4291      	cmp	r1, r2
   87aa8:	d012      	beq.n	87ad0 <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   87aaa:	f04f 0301 	mov.w	r3, #1
   87aae:	fa03 f000 	lsl.w	r0, r3, r0
   87ab2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   87ab6:	f2c4 020e 	movt	r2, #16398	; 0x400e
   87aba:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   87abe:	f04f 0000 	mov.w	r0, #0
   87ac2:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   87ac4:	f04f 0001 	mov.w	r0, #1
   87ac8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   87aca:	f04f 0000 	mov.w	r0, #0
   87ace:	4770      	bx	lr
   87ad0:	f04f 0000 	mov.w	r0, #0
}
   87ad4:	4770      	bx	lr
   87ad6:	bf00      	nop

00087ad8 <pmc_switch_udpck_to_upllck>:
 *
 * \param dw_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
   87ad8:	ea4f 2000 	mov.w	r0, r0, lsl #8
   87adc:	f400 6270 	and.w	r2, r0, #3840	; 0xf00
   87ae0:	f042 0101 	orr.w	r1, r2, #1
   87ae4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87ae8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87aec:	6399      	str	r1, [r3, #56]	; 0x38
   87aee:	4770      	bx	lr

00087af0 <pmc_enable_udpck>:
void pmc_enable_udpck(void)
{
# if (SAM3S || SAM4S || SAM4E)
	PMC->PMC_SCER = PMC_SCER_UDP;
# else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
   87af0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87af4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87af8:	f04f 0220 	mov.w	r2, #32
   87afc:	601a      	str	r2, [r3, #0]
   87afe:	4770      	bx	lr

00087b00 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   87b00:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87b04:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87b08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   87b0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   87b0e:	f420 0178 	bic.w	r1, r0, #16252928	; 0xf80000
	PMC->PMC_FSMR |= ul_inputs;
   87b12:	430a      	orrs	r2, r1
   87b14:	671a      	str	r2, [r3, #112]	; 0x70
   87b16:	4770      	bx	lr

00087b18 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_fastrc_used;
   87b18:	f241 6340 	movw	r3, #5696	; 0x1640
   87b1c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87b20:	7818      	ldrb	r0, [r3, #0]
}
   87b22:	f080 0001 	eor.w	r0, r0, #1
   87b26:	4770      	bx	lr

00087b28 <udd_sleep_mode>:
 *
 * \param b_enable true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   87b28:	4603      	mov	r3, r0
   87b2a:	2800      	cmp	r0, #0
   87b2c:	d149      	bne.n	87bc2 <udd_sleep_mode+0x9a>
   87b2e:	f241 6244 	movw	r2, #5700	; 0x1644
   87b32:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87b36:	7811      	ldrb	r1, [r2, #0]
   87b38:	2900      	cmp	r1, #0
   87b3a:	d03c      	beq.n	87bb6 <udd_sleep_mode+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87b3c:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87b40:	b672      	cpsid	i
   87b42:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87b46:	f240 2298 	movw	r2, #664	; 0x298
   87b4a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87b4e:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   87b50:	f641 42c4 	movw	r2, #7364	; 0x1cc4
   87b54:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87b58:	7890      	ldrb	r0, [r2, #2]
   87b5a:	f100 30ff 	add.w	r0, r0, #4294967295
   87b5e:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87b60:	bb49      	cbnz	r1, 87bb6 <udd_sleep_mode+0x8e>
		cpu_irq_enable();
   87b62:	f240 2298 	movw	r2, #664	; 0x298
   87b66:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87b6a:	f04f 0101 	mov.w	r1, #1
   87b6e:	7011      	strb	r1, [r2, #0]
   87b70:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87b74:	b662      	cpsie	i
   87b76:	e01e      	b.n	87bb6 <udd_sleep_mode+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87b78:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87b7c:	b672      	cpsid	i
   87b7e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87b82:	f240 2298 	movw	r2, #664	; 0x298
   87b86:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87b8a:	f04f 0000 	mov.w	r0, #0
   87b8e:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   87b90:	f641 42c4 	movw	r2, #7364	; 0x1cc4
   87b94:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87b98:	7890      	ldrb	r0, [r2, #2]
   87b9a:	f100 0001 	add.w	r0, r0, #1
   87b9e:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87ba0:	b949      	cbnz	r1, 87bb6 <udd_sleep_mode+0x8e>
		cpu_irq_enable();
   87ba2:	f240 2298 	movw	r2, #664	; 0x298
   87ba6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87baa:	f04f 0101 	mov.w	r1, #1
   87bae:	7011      	strb	r1, [r2, #0]
   87bb0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87bb4:	b662      	cpsie	i
	}
	if (b_idle && !udd_b_idle) {
		dbg_print("_W ");
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
   87bb6:	f241 6044 	movw	r0, #5700	; 0x1644
   87bba:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87bbe:	7003      	strb	r3, [r0, #0]
   87bc0:	4770      	bx	lr
{
	if (!b_idle && udd_b_idle) {
		dbg_print("_S ");
		sleepmgr_unlock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   87bc2:	f241 6244 	movw	r2, #5700	; 0x1644
   87bc6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87bca:	7810      	ldrb	r0, [r2, #0]
   87bcc:	2800      	cmp	r0, #0
   87bce:	d0d3      	beq.n	87b78 <udd_sleep_mode+0x50>
   87bd0:	e7f1      	b.n	87bb6 <udd_sleep_mode+0x8e>
   87bd2:	bf00      	nop

00087bd4 <udd_ctrl_init>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87bd4:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87bd8:	b672      	cpsid	i
   87bda:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87bde:	f240 2398 	movw	r3, #664	; 0x298
   87be2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87be6:	f04f 0100 	mov.w	r1, #0
   87bea:	7019      	strb	r1, [r3, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   87bec:	f24c 2020 	movw	r0, #49696	; 0xc220
   87bf0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87bf4:	f04f 0101 	mov.w	r1, #1
   87bf8:	6001      	str	r1, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87bfa:	b93a      	cbnz	r2, 87c0c <udd_ctrl_init+0x38>
		cpu_irq_enable();
   87bfc:	f240 2398 	movw	r3, #664	; 0x298
   87c00:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87c04:	7019      	strb	r1, [r3, #0]
   87c06:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87c0a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   87c0c:	f24c 1060 	movw	r0, #49504	; 0xc160
   87c10:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87c14:	f04f 0102 	mov.w	r1, #2
   87c18:	6001      	str	r1, [r0, #0]

	udd_g_ctrlreq.callback = NULL;
   87c1a:	f641 42cc 	movw	r2, #7372	; 0x1ccc
   87c1e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87c22:	f04f 0300 	mov.w	r3, #0
   87c26:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   87c28:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   87c2a:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   87c2c:	f241 61c0 	movw	r1, #5824	; 0x16c0
   87c30:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87c34:	700b      	strb	r3, [r1, #0]
   87c36:	4770      	bx	lr

00087c38 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   87c38:	f241 63c0 	movw	r3, #5824	; 0x16c0
   87c3c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87c40:	f04f 0205 	mov.w	r2, #5
   87c44:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   87c46:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   87c4a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87c4e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   87c52:	6001      	str	r1, [r0, #0]
   87c54:	4770      	bx	lr
   87c56:	bf00      	nop

00087c58 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   87c58:	f241 63c0 	movw	r3, #5824	; 0x16c0
   87c5c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87c60:	f04f 0203 	mov.w	r2, #3
   87c64:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87c66:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87c6a:	b672      	cpsid	i
   87c6c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87c70:	f240 2198 	movw	r1, #664	; 0x298
   87c74:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87c78:	f04f 0300 	mov.w	r3, #0
   87c7c:	700b      	strb	r3, [r1, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   87c7e:	f24c 1260 	movw	r2, #49504	; 0xc160
   87c82:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87c86:	f04f 0101 	mov.w	r1, #1
   87c8a:	6011      	str	r1, [r2, #0]
	udd_enable_in_send_interrupt(0);
   87c8c:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   87c90:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87c94:	6019      	str	r1, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   87c96:	f04f 0108 	mov.w	r1, #8
   87c9a:	6011      	str	r1, [r2, #0]
	udd_enable_nak_out_interrupt(0);
   87c9c:	6019      	str	r1, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87c9e:	b948      	cbnz	r0, 87cb4 <udd_ctrl_send_zlp_in+0x5c>
		cpu_irq_enable();
   87ca0:	f240 2098 	movw	r0, #664	; 0x298
   87ca4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87ca8:	f04f 0201 	mov.w	r2, #1
   87cac:	7002      	strb	r2, [r0, #0]
   87cae:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87cb2:	b662      	cpsie	i
   87cb4:	4770      	bx	lr
   87cb6:	bf00      	nop

00087cb8 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   87cb8:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   87cba:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   87cbe:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87cc2:	6918      	ldr	r0, [r3, #16]
   87cc4:	b100      	cbz	r0, 87cc8 <udd_ctrl_endofrequest+0x10>
		udd_g_ctrlreq.callback();
   87cc6:	4780      	blx	r0
   87cc8:	bd08      	pop	{r3, pc}
   87cca:	bf00      	nop

00087ccc <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
   87ccc:	b570      	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87cce:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87cd2:	b672      	cpsid	i
   87cd4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87cd8:	f240 2398 	movw	r3, #664	; 0x298
   87cdc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87ce0:	f04f 0100 	mov.w	r1, #0
   87ce4:	7019      	strb	r1, [r3, #0]
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
   87ce6:	f24c 2020 	movw	r0, #49696	; 0xc220
   87cea:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87cee:	f04f 0101 	mov.w	r1, #1
   87cf2:	6001      	str	r1, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87cf4:	b93a      	cbnz	r2, 87d06 <udd_ctrl_in_sent+0x3a>
		cpu_irq_enable();
   87cf6:	f240 2398 	movw	r3, #664	; 0x298
   87cfa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87cfe:	7019      	strb	r1, [r3, #0]
   87d00:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87d04:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   87d06:	f241 60c0 	movw	r0, #5824	; 0x16c0
   87d0a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87d0e:	7801      	ldrb	r1, [r0, #0]
   87d10:	2903      	cmp	r1, #3
   87d12:	d10a      	bne.n	87d2a <udd_ctrl_in_sent+0x5e>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   87d14:	f647 42b9 	movw	r2, #31929	; 0x7cb9
   87d18:	f2c0 0208 	movt	r2, #8
   87d1c:	4790      	blx	r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
   87d1e:	f647 30d5 	movw	r0, #31701	; 0x7bd5
   87d22:	f2c0 0008 	movt	r0, #8
   87d26:	4780      	blx	r0
		return;
   87d28:	bd70      	pop	{r4, r5, r6, pc}
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   87d2a:	f241 64c2 	movw	r4, #5826	; 0x16c2
   87d2e:	f2c2 0407 	movt	r4, #8199	; 0x2007
   87d32:	8823      	ldrh	r3, [r4, #0]
   87d34:	f641 42cc 	movw	r2, #7372	; 0x1ccc
   87d38:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87d3c:	8990      	ldrh	r0, [r2, #12]
   87d3e:	1ac1      	subs	r1, r0, r3
   87d40:	b28c      	uxth	r4, r1
	if (0 == nb_remain) {
   87d42:	2c00      	cmp	r4, #0
   87d44:	d155      	bne.n	87df2 <udd_ctrl_in_sent+0x126>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous playlaod buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   87d46:	f241 6242 	movw	r2, #5698	; 0x1642
   87d4a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87d4e:	8810      	ldrh	r0, [r2, #0]
   87d50:	181b      	adds	r3, r3, r0
   87d52:	b299      	uxth	r1, r3
   87d54:	8011      	strh	r1, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   87d56:	f641 42cc 	movw	r2, #7372	; 0x1ccc
   87d5a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87d5e:	88d0      	ldrh	r0, [r2, #6]
   87d60:	4288      	cmp	r0, r1
   87d62:	d005      	beq.n	87d70 <udd_ctrl_in_sent+0xa4>
					|| b_shortpacket) {
   87d64:	f241 6345 	movw	r3, #5701	; 0x1645
   87d68:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87d6c:	7819      	ldrb	r1, [r3, #0]
   87d6e:	b361      	cbz	r1, 87dca <udd_ctrl_in_sent+0xfe>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   87d70:	f241 60c0 	movw	r0, #5824	; 0x16c0
   87d74:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87d78:	f04f 0204 	mov.w	r2, #4
   87d7c:	7002      	strb	r2, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87d7e:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87d82:	b672      	cpsid	i
   87d84:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87d88:	f240 2398 	movw	r3, #664	; 0x298
   87d8c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87d90:	f04f 0000 	mov.w	r0, #0
   87d94:	7018      	strb	r0, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
   87d96:	f24c 1360 	movw	r3, #49504	; 0xc160
   87d9a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87d9e:	f04f 0210 	mov.w	r2, #16
   87da2:	601a      	str	r2, [r3, #0]
	udd_enable_nak_in_interrupt(0);
   87da4:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   87da8:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87dac:	6002      	str	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87dae:	2900      	cmp	r1, #0
   87db0:	f040 80a7 	bne.w	87f02 <udd_ctrl_in_sent+0x236>
		cpu_irq_enable();
   87db4:	f240 2198 	movw	r1, #664	; 0x298
   87db8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87dbc:	f04f 0301 	mov.w	r3, #1
   87dc0:	700b      	strb	r3, [r1, #0]
   87dc2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87dc6:	b662      	cpsie	i
   87dc8:	bd70      	pop	{r4, r5, r6, pc}
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   87dca:	f641 45cc 	movw	r5, #7372	; 0x1ccc
   87dce:	f2c2 0507 	movt	r5, #8199	; 0x2007
   87dd2:	696e      	ldr	r6, [r5, #20]
   87dd4:	b1ce      	cbz	r6, 87e0a <udd_ctrl_in_sent+0x13e>
				|| (!udd_g_ctrlreq.over_under_run())) {
   87dd6:	47b0      	blx	r6
   87dd8:	b1b8      	cbz	r0, 87e0a <udd_ctrl_in_sent+0x13e>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   87dda:	f241 64c2 	movw	r4, #5826	; 0x16c2
   87dde:	f2c2 0407 	movt	r4, #8199	; 0x2007
   87de2:	f04f 0200 	mov.w	r2, #0
   87de6:	8022      	strh	r2, [r4, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   87de8:	f641 40cc 	movw	r0, #7372	; 0x1ccc
   87dec:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87df0:	8984      	ldrh	r4, [r0, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   87df2:	2c3f      	cmp	r4, #63	; 0x3f
   87df4:	d909      	bls.n	87e0a <udd_ctrl_in_sent+0x13e>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
   87df6:	f241 6345 	movw	r3, #5701	; 0x1645
   87dfa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87dfe:	f04f 0100 	mov.w	r1, #0
   87e02:	7019      	strb	r1, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   87e04:	f04f 0440 	mov.w	r4, #64	; 0x40
   87e08:	e006      	b.n	87e18 <udd_ctrl_in_sent+0x14c>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
   87e0a:	f241 6545 	movw	r5, #5701	; 0x1645
   87e0e:	f2c2 0507 	movt	r5, #8199	; 0x2007
   87e12:	f04f 0601 	mov.w	r6, #1
   87e16:	702e      	strb	r6, [r5, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   87e18:	f641 42cc 	movw	r2, #7372	; 0x1ccc
   87e1c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87e20:	6890      	ldr	r0, [r2, #8]
   87e22:	f241 63c2 	movw	r3, #5826	; 0x16c2
   87e26:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87e2a:	881e      	ldrh	r6, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87e2c:	f3ef 8110 	mrs	r1, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   87e30:	f1d1 0501 	rsbs	r5, r1, #1
   87e34:	bf38      	it	cc
   87e36:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87e38:	b672      	cpsid	i
   87e3a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   87e3e:	f240 2298 	movw	r2, #664	; 0x298
   87e42:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87e46:	f04f 0300 	mov.w	r3, #0
   87e4a:	7013      	strb	r3, [r2, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
   87e4c:	f24c 1130 	movw	r1, #49456	; 0xc130
   87e50:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87e54:	680a      	ldr	r2, [r1, #0]
   87e56:	f012 0f02 	tst.w	r2, #2
   87e5a:	d101      	bne.n	87e60 <udd_ctrl_in_sent+0x194>
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   87e5c:	b99c      	cbnz	r4, 87e86 <udd_ctrl_in_sent+0x1ba>
   87e5e:	e035      	b.n	87ecc <udd_ctrl_in_sent+0x200>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87e60:	b14d      	cbz	r5, 87e76 <udd_ctrl_in_sent+0x1aa>
		cpu_irq_enable();
   87e62:	f240 2098 	movw	r0, #664	; 0x298
   87e66:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87e6a:	f04f 0201 	mov.w	r2, #1
   87e6e:	7002      	strb	r2, [r0, #0]
   87e70:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87e74:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   87e76:	f241 61c0 	movw	r1, #5824	; 0x16c0
   87e7a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87e7e:	f04f 0304 	mov.w	r3, #4
   87e82:	700b      	strb	r3, [r1, #0]
		return; // Exit of IN DATA phase
   87e84:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   87e86:	1982      	adds	r2, r0, r6
		cpu_irq_restore(flags);
	}
}


static void udd_ctrl_in_sent(void)
   87e88:	f04f 0300 	mov.w	r3, #0
   87e8c:	f2c2 0318 	movt	r3, #8216	; 0x2018
   87e90:	ea6f 0003 	mvn.w	r0, r3
   87e94:	1901      	adds	r1, r0, r4
   87e96:	f001 0001 	and.w	r0, r1, #1
   87e9a:	f102 32ff 	add.w	r2, r2, #4294967295
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
   87e9e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   87ea2:	f803 1b01 	strb.w	r1, [r3], #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   87ea6:	b2d9      	uxtb	r1, r3
   87ea8:	42a1      	cmp	r1, r4
   87eaa:	d32b      	bcc.n	87f04 <udd_ctrl_in_sent+0x238>
   87eac:	e00e      	b.n	87ecc <udd_ctrl_in_sent+0x200>
   87eae:	f102 0001 	add.w	r0, r2, #1
		*ptr_dest++ = *ptr_src++;
   87eb2:	7852      	ldrb	r2, [r2, #1]
   87eb4:	4619      	mov	r1, r3
   87eb6:	f801 2b01 	strb.w	r2, [r1], #1
   87eba:	f100 0201 	add.w	r2, r0, #1
   87ebe:	7840      	ldrb	r0, [r0, #1]
   87ec0:	7058      	strb	r0, [r3, #1]
   87ec2:	f101 0301 	add.w	r3, r1, #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   87ec6:	b2d9      	uxtb	r1, r3
   87ec8:	42a1      	cmp	r1, r4
   87eca:	d3f0      	bcc.n	87eae <udd_ctrl_in_sent+0x1e2>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   87ecc:	19a4      	adds	r4, r4, r6
   87ece:	f241 63c2 	movw	r3, #5826	; 0x16c2
   87ed2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87ed6:	801c      	strh	r4, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   87ed8:	f24c 1060 	movw	r0, #49504	; 0xc160
   87edc:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87ee0:	f04f 0201 	mov.w	r2, #1
   87ee4:	6002      	str	r2, [r0, #0]
	udd_enable_in_send_interrupt(0);
   87ee6:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   87eea:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87eee:	600a      	str	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87ef0:	b13d      	cbz	r5, 87f02 <udd_ctrl_in_sent+0x236>
		cpu_irq_enable();
   87ef2:	f240 2398 	movw	r3, #664	; 0x298
   87ef6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87efa:	701a      	strb	r2, [r3, #0]
   87efc:	f3bf 8f5f 	dmb	sy
   87f00:	b662      	cpsie	i
   87f02:	bd70      	pop	{r4, r5, r6, pc}
   87f04:	b240      	sxtb	r0, r0
   87f06:	2800      	cmp	r0, #0
   87f08:	d0d1      	beq.n	87eae <udd_ctrl_in_sent+0x1e2>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
   87f0a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   87f0e:	f803 1b01 	strb.w	r1, [r3], #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   87f12:	b2d8      	uxtb	r0, r3
   87f14:	42a0      	cmp	r0, r4
   87f16:	d3ca      	bcc.n	87eae <udd_ctrl_in_sent+0x1e2>
   87f18:	e7d8      	b.n	87ecc <udd_ctrl_in_sent+0x200>
   87f1a:	bf00      	nop

00087f1c <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   87f1c:	b538      	push	{r3, r4, r5, lr}
   87f1e:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
   87f20:	7d04      	ldrb	r4, [r0, #20]
   87f22:	f014 0f01 	tst.w	r4, #1
   87f26:	d013      	beq.n	87f50 <udd_ep_finish_job+0x34>
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
   87f28:	7d04      	ldrb	r4, [r0, #20]
   87f2a:	f36f 0400 	bfc	r4, #0, #1
   87f2e:	7504      	strb	r4, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   87f30:	6804      	ldr	r4, [r0, #0]
   87f32:	b16c      	cbz	r4, 87f50 <udd_ep_finish_job+0x34>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   87f34:	f44f 4541 	mov.w	r5, #49408	; 0xc100
   87f38:	f2c4 050a 	movt	r5, #16394	; 0x400a
   87f3c:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
   87f40:	f410 7f80 	tst.w	r0, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
   87f44:	bf18      	it	ne
   87f46:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   87f4a:	4608      	mov	r0, r1
   87f4c:	6899      	ldr	r1, [r3, #8]
   87f4e:	47a0      	blx	r4
   87f50:	bd38      	pop	{r3, r4, r5, pc}
   87f52:	bf00      	nop

00087f54 <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   87f54:	b508      	push	{r3, lr}
	ep &= USB_EP_ADDR_MASK;
   87f56:	f000 020f 	and.w	r2, r0, #15

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   87f5a:	f102 30ff 	add.w	r0, r2, #4294967295
   87f5e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   87f62:	f241 6348 	movw	r3, #5704	; 0x1648
   87f66:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87f6a:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
   87f6e:	f04f 0101 	mov.w	r1, #1
   87f72:	f647 731d 	movw	r3, #32541	; 0x7f1d
   87f76:	f2c0 0308 	movt	r3, #8
   87f7a:	4798      	blx	r3
   87f7c:	bd08      	pop	{r3, pc}
   87f7e:	bf00      	nop

00087f80 <udd_ep_trans_done>:
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

#ifdef UDD_EP_DMA_SUPPORTED
static void udd_ep_trans_done(udd_ep_id_t ep)
{
   87f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87f82:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   87f84:	f100 31ff 	add.w	r1, r0, #4294967295
   87f88:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   87f8c:	f241 6348 	movw	r3, #5704	; 0x1648
   87f90:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87f94:	eb03 03c0 	add.w	r3, r3, r0, lsl #3

	if (!ptr_job->busy) {
   87f98:	7d18      	ldrb	r0, [r3, #20]
   87f9a:	f010 0f01 	tst.w	r0, #1
   87f9e:	f000 80c6 	beq.w	8812e <udd_ep_trans_done+0x1ae>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   87fa2:	68dc      	ldr	r4, [r3, #12]
   87fa4:	689d      	ldr	r5, [r3, #8]
   87fa6:	42ac      	cmp	r4, r5
   87fa8:	f000 8082 	beq.w	880b0 <udd_ep_trans_done+0x130>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   87fac:	1b2d      	subs	r5, r5, r4

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   87fae:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   87fb2:	bf92      	itee	ls
   87fb4:	042e      	lslls	r6, r5, #16
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   87fb6:	f44f 3580 	movhi.w	r5, #65536	; 0x10000

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
   87fba:	2600      	movhi	r6, #0
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
		}
		if (Is_udd_endpoint_in(ep)) {
   87fbc:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   87fc0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87fc4:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   87fc8:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
   87fcc:	f417 7f80 	tst.w	r7, #256	; 0x100
   87fd0:	d011      	beq.n	87ff6 <udd_ep_trans_done+0x76>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   87fd2:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
   87fd6:	f3c7 1002 	ubfx	r0, r7, #4, #3
   87fda:	f04f 0708 	mov.w	r7, #8
   87fde:	fa07 f000 	lsl.w	r0, r7, r0
   87fe2:	f100 30ff 	add.w	r0, r0, #4294967295
   87fe6:	4205      	tst	r5, r0
   87fe8:	d017      	beq.n	8801a <udd_ep_trans_done+0x9a>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
   87fea:	433e      	orrs	r6, r7
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   87fec:	7d1f      	ldrb	r7, [r3, #20]
   87fee:	f36f 0741 	bfc	r7, #1, #1
   87ff2:	751f      	strb	r7, [r3, #20]
   87ff4:	e011      	b.n	8801a <udd_ep_trans_done+0x9a>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   87ff6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
   87ffa:	f3c0 27c1 	ubfx	r7, r0, #11, #2
   87ffe:	2f01      	cmp	r7, #1
   88000:	d109      	bne.n	88016 <udd_ep_trans_done+0x96>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   88002:	f8dc 0000 	ldr.w	r0, [ip]
   88006:	f3c0 1002 	ubfx	r0, r0, #4, #3
   8800a:	f04f 0708 	mov.w	r7, #8
   8800e:	fa07 f000 	lsl.w	r0, r7, r0
   88012:	4285      	cmp	r5, r0
   88014:	d801      	bhi.n	8801a <udd_ep_trans_done+0x9a>

				// Enable short packet reception
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   88016:	f046 0614 	orr.w	r6, r6, #20
						| UOTGHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   8801a:	f44f 4043 	mov.w	r0, #49920	; 0xc300
   8801e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88022:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   88026:	685f      	ldr	r7, [r3, #4]
   88028:	193c      	adds	r4, r7, r4
   8802a:	6044      	str	r4, [r0, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8802c:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   88030:	f1d7 0c01 	rsbs	ip, r7, #1
   88034:	bf38      	it	cc
   88036:	f04f 0c00 	movcc.w	ip, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8803a:	b672      	cpsid	i
   8803c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   88040:	f240 2498 	movw	r4, #664	; 0x298
   88044:	f2c2 0407 	movt	r4, #8199	; 0x2007
   88048:	f04f 0700 	mov.w	r7, #0
   8804c:	7027      	strb	r7, [r4, #0]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   8804e:	68c4      	ldr	r4, [r0, #12]
   88050:	f014 0f10 	tst.w	r4, #16
   88054:	d11d      	bne.n	88092 <udd_ep_trans_done+0x112>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   88056:	f046 0621 	orr.w	r6, r6, #33	; 0x21
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
				& UOTGHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   8805a:	6086      	str	r6, [r0, #8]
			ptr_job->buf_cnt += next_trans;
   8805c:	68da      	ldr	r2, [r3, #12]
   8805e:	1950      	adds	r0, r2, r5
   88060:	60d8      	str	r0, [r3, #12]
			ptr_job->buf_load = next_trans;
   88062:	611d      	str	r5, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   88064:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   88068:	fa03 f101 	lsl.w	r1, r3, r1
   8806c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   88070:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88074:	6191      	str	r1, [r2, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88076:	f1bc 0f00 	cmp.w	ip, #0
   8807a:	d058      	beq.n	8812e <udd_ep_trans_done+0x1ae>
		cpu_irq_enable();
   8807c:	f240 2098 	movw	r0, #664	; 0x298
   88080:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88084:	f04f 0301 	mov.w	r3, #1
   88088:	7003      	strb	r3, [r0, #0]
   8808a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8808e:	b662      	cpsie	i
   88090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88092:	f1bc 0f00 	cmp.w	ip, #0
   88096:	d009      	beq.n	880ac <udd_ep_trans_done+0x12c>
		cpu_irq_enable();
   88098:	f240 2198 	movw	r1, #664	; 0x298
   8809c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   880a0:	f04f 0001 	mov.w	r0, #1
   880a4:	7008      	strb	r0, [r1, #0]
   880a6:	f3bf 8f5f 	dmb	sy
   880aa:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   880ac:	68d9      	ldr	r1, [r3, #12]
   880ae:	6099      	str	r1, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   880b0:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   880b4:	f2c4 000a 	movt	r0, #16394	; 0x400a
   880b8:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
   880bc:	f411 7f80 	tst.w	r1, #256	; 0x100
   880c0:	d02d      	beq.n	8811e <udd_ep_trans_done+0x19e>
		if (ptr_job->b_shortpacket) {
   880c2:	7d18      	ldrb	r0, [r3, #20]
   880c4:	f000 0102 	and.w	r1, r0, #2
   880c8:	b2c8      	uxtb	r0, r1
   880ca:	b340      	cbz	r0, 8811e <udd_ep_trans_done+0x19e>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
   880cc:	f24c 1060 	movw	r0, #49504	; 0xc160
   880d0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   880d4:	f04f 0101 	mov.w	r1, #1
   880d8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			if (Is_udd_write_enabled(ep)) {
   880dc:	f24c 1330 	movw	r3, #49456	; 0xc130
   880e0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   880e4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   880e8:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   880ec:	d005      	beq.n	880fa <udd_ep_trans_done+0x17a>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
   880ee:	f24c 1390 	movw	r3, #49552	; 0xc190
   880f2:	f2c4 030a 	movt	r3, #16394	; 0x400a
   880f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
   880fa:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   880fe:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88102:	f04f 0101 	mov.w	r1, #1
   88106:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			udd_enable_endpoint_interrupt(ep);
   8810a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   8810e:	fa03 f202 	lsl.w	r2, r3, r2
   88112:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88116:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8811a:	6182      	str	r2, [r0, #24]
			return;
   8811c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   8811e:	4618      	mov	r0, r3
   88120:	f04f 0100 	mov.w	r1, #0
   88124:	f647 731d 	movw	r3, #32541	; 0x7f1d
   88128:	f2c0 0308 	movt	r3, #8
   8812c:	4798      	blx	r3
   8812e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00088130 <udd_enable>:
	return true;
}


void udd_enable(void)
{
   88130:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   88132:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   88136:	b672      	cpsid	i
   88138:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8813c:	f240 2398 	movw	r3, #664	; 0x298
   88140:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88144:	f04f 0200 	mov.w	r2, #0
   88148:	701a      	strb	r2, [r3, #0]
		cpu_irq_restore(flags);
		return;
	}
#else
	// SINGLE DEVICE MODE INITIALIZATION
	pmc_enable_periph_clk(ID_UOTGHS);
   8814a:	f04f 0028 	mov.w	r0, #40	; 0x28
   8814e:	f647 2155 	movw	r1, #31317	; 0x7a55
   88152:	f2c0 0108 	movt	r1, #8
   88156:	4788      	blx	r1
	sysclk_enable_usb();
   88158:	f245 3061 	movw	r0, #21345	; 0x5361
   8815c:	f2c0 0008 	movt	r0, #8
   88160:	4780      	blx	r0
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   88162:	f44f 4361 	mov.w	r3, #57600	; 0xe100
   88166:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8816a:	f04f 0250 	mov.w	r2, #80	; 0x50
   8816e:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   88172:	f44f 7180 	mov.w	r1, #256	; 0x100
   88176:	6059      	str	r1, [r3, #4]
	NVIC_SetPriority((IRQn_Type) ID_UOTGHS, UDD_USB_INT_LEVEL);
	NVIC_EnableIRQ((IRQn_Type) ID_UOTGHS);

	// Always authorize asynchrone USB interrupts to exit of sleep mode
	// For SAM USB wake up device except BACKUP mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   88178:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   8817c:	f647 3301 	movw	r3, #31489	; 0x7b01
   88180:	f2c0 0308 	movt	r3, #8
   88184:	4798      	blx	r3
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
#else
	// ID pin not used then force device mode
	otg_disable_id_pin();
   88186:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   8818a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8818e:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
   88192:	f022 7180 	bic.w	r1, r2, #16777216	; 0x1000000
   88196:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
	otg_force_device_mode();
   8819a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   8819e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
   881a2:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
   881a6:	f8d0 1800 	ldr.w	r1, [r0, #2048]	; 0x800
   881aa:	f021 7380 	bic.w	r3, r1, #16777216	; 0x1000000
   881ae:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
#endif
	// Enable USB hardware
	otg_enable_pad();
   881b2:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
   881b6:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
   881ba:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
	otg_enable();
   881be:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   881c2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
   881c6:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
   881ca:	6801      	ldr	r1, [r0, #0]
   881cc:	f421 5380 	bic.w	r3, r1, #4096	; 0x1000
   881d0:	6003      	str	r3, [r0, #0]
# ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   881d2:	6802      	ldr	r2, [r0, #0]
   881d4:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
   881d8:	6001      	str	r1, [r0, #0]
	udd_high_speed_disable();
# endif
#endif // USB_DEVICE_LOW_SPEED

	// Check USB clock
	otg_unfreeze_clock();
   881da:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   881de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
   881e2:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   881e6:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   881ea:	f2c4 000a 	movt	r0, #16394	; 0x400a
   881ee:	f8d0 1804 	ldr.w	r1, [r0, #2052]	; 0x804
   881f2:	f411 4f80 	tst.w	r1, #16384	; 0x4000
   881f6:	d0fa      	beq.n	881ee <udd_enable+0xbe>

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   881f8:	f241 6348 	movw	r3, #5704	; 0x1648
   881fc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88200:	7d1a      	ldrb	r2, [r3, #20]
		udd_ep_job[i].stall_requested = false;
   88202:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
   88206:	f36f 0082 	bfc	r0, #2, #1
   8820a:	7518      	strb	r0, [r3, #20]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   8820c:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
		udd_ep_job[i].stall_requested = false;
   88210:	f001 02fe 	and.w	r2, r1, #254	; 0xfe
   88214:	f36f 0282 	bfc	r2, #2, #1
   88218:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   8821c:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
		udd_ep_job[i].stall_requested = false;
   88220:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
   88224:	f36f 0182 	bfc	r1, #2, #1
   88228:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   8822c:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
		udd_ep_job[i].stall_requested = false;
   88230:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
   88234:	f36f 0082 	bfc	r0, #2, #1
   88238:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   8823c:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
		udd_ep_job[i].stall_requested = false;
   88240:	f001 02fe 	and.w	r2, r1, #254	; 0xfe
   88244:	f36f 0282 	bfc	r2, #2, #1
   88248:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
#endif

	otg_ack_vbus_transition();
   8824c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88250:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88254:	f04f 0002 	mov.w	r0, #2
   88258:	f8c3 0808 	str.w	r0, [r3, #2056]	; 0x808
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
   8825c:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
   88260:	f411 6f00 	tst.w	r1, #2048	; 0x800
   88264:	d005      	beq.n	88272 <udd_enable+0x142>
		otg_raise_vbus_transition();
   88266:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   8826a:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8826e:	f8c2 080c 	str.w	r0, [r2, #2060]	; 0x80c
	}
	otg_enable_vbus_interrupt();
   88272:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88276:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8827a:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
   8827e:	f040 0102 	orr.w	r1, r0, #2
   88282:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	otg_freeze_clock();
   88286:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8828a:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   8828e:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800

#ifndef UDD_NO_SLEEP_MGR
	if (!udd_b_sleep_initialized) {
   88292:	f241 6341 	movw	r3, #5697	; 0x1641
   88296:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8829a:	7819      	ldrb	r1, [r3, #0]
   8829c:	bb59      	cbnz	r1, 882f6 <udd_enable+0x1c6>
		udd_b_sleep_initialized = true;
   8829e:	f241 6041 	movw	r0, #5697	; 0x1641
   882a2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   882a6:	f04f 0301 	mov.w	r3, #1
   882aa:	7003      	strb	r3, [r0, #0]
		// Initialize the sleep mode authorized for the USB suspend mode
		udd_b_idle = false;
   882ac:	f04f 0000 	mov.w	r0, #0
   882b0:	f241 6144 	movw	r1, #5700	; 0x1644
   882b4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   882b8:	7008      	strb	r0, [r1, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   882ba:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   882be:	b672      	cpsid	i
   882c0:	f3bf 8f5f 	dmb	sy
   882c4:	f240 2398 	movw	r3, #664	; 0x298
   882c8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   882cc:	7018      	strb	r0, [r3, #0]
   882ce:	f641 40c4 	movw	r0, #7364	; 0x1cc4
   882d2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   882d6:	78c1      	ldrb	r1, [r0, #3]
   882d8:	f101 0101 	add.w	r1, r1, #1
   882dc:	70c1      	strb	r1, [r0, #3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   882de:	b98a      	cbnz	r2, 88304 <udd_enable+0x1d4>
		cpu_irq_enable();
   882e0:	f240 2398 	movw	r3, #664	; 0x298
   882e4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   882e8:	f04f 0201 	mov.w	r2, #1
   882ec:	701a      	strb	r2, [r3, #0]
   882ee:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   882f2:	b662      	cpsie	i
   882f4:	e006      	b.n	88304 <udd_enable+0x1d4>
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_SUSPEND);
	} else {
		udd_sleep_mode(false); // Enter idle mode
   882f6:	f04f 0000 	mov.w	r0, #0
   882fa:	f647 3229 	movw	r2, #31529	; 0x7b29
   882fe:	f2c0 0208 	movt	r2, #8
   88302:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88304:	b94c      	cbnz	r4, 8831a <udd_enable+0x1ea>
		cpu_irq_enable();
   88306:	f240 2098 	movw	r0, #664	; 0x298
   8830a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8830e:	f04f 0101 	mov.w	r1, #1
   88312:	7001      	strb	r1, [r0, #0]
   88314:	f3bf 8f5f 	dmb	sy
   88318:	b662      	cpsie	i
   8831a:	bd10      	pop	{r4, pc}

0008831c <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   8831c:	b570      	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8831e:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   88322:	b672      	cpsid	i
   88324:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   88328:	f240 2398 	movw	r3, #664	; 0x298
   8832c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88330:	f04f 0200 	mov.w	r2, #0
   88334:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   88336:	f04f 0001 	mov.w	r0, #1
   8833a:	f647 3129 	movw	r1, #31529	; 0x7b29
   8833e:	f2c0 0108 	movt	r1, #8
   88342:	4788      	blx	r1
	otg_unfreeze_clock();
   88344:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88348:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8834c:	f8d0 5800 	ldr.w	r5, [r0, #2048]	; 0x800
   88350:	f425 4680 	bic.w	r6, r5, #16384	; 0x4000
   88354:	f8c0 6800 	str.w	r6, [r0, #2048]	; 0x800

	// This section of clock check can be improved with a chek of
	// USB clock source via sysclk()
	// Check USB clock because the source can be a PLL
	while (!Is_otg_clock_usable());
   88358:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   8835c:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88360:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   88364:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   88368:	d0fa      	beq.n	88360 <udd_attach+0x44>

	// Authorize attach if Vbus is present
	udd_attach_device();
   8836a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8836e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88372:	6819      	ldr	r1, [r3, #0]
   88374:	f421 7080 	bic.w	r0, r1, #256	; 0x100
   88378:	6018      	str	r0, [r3, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   8837a:	f04f 0608 	mov.w	r6, #8
   8837e:	619e      	str	r6, [r3, #24]
	udd_enable_suspend_interrupt();
   88380:	f04f 0101 	mov.w	r1, #1
   88384:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
   88386:	f04f 0210 	mov.w	r2, #16
   8838a:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   8838c:	f04f 0504 	mov.w	r5, #4
   88390:	619d      	str	r5, [r3, #24]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   88392:	f04f 0002 	mov.w	r0, #2
   88396:	6198      	str	r0, [r3, #24]
#endif
	// Reset following interupts flag
	udd_ack_reset();
   88398:	609e      	str	r6, [r3, #8]
	udd_ack_sof();
   8839a:	609d      	str	r5, [r3, #8]
	udd_ack_msof();
   8839c:	6098      	str	r0, [r3, #8]

	// The first suspend interrupt must be forced
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
   8839e:	60d9      	str	r1, [r3, #12]

	udd_ack_wake_up();
   883a0:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   883a2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   883a6:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   883aa:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   883ae:	b93c      	cbnz	r4, 883c0 <udd_attach+0xa4>
		cpu_irq_enable();
   883b0:	f240 2398 	movw	r3, #664	; 0x298
   883b4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   883b8:	7019      	strb	r1, [r3, #0]
   883ba:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   883be:	b662      	cpsie	i
   883c0:	bd70      	pop	{r4, r5, r6, pc}
   883c2:	bf00      	nop

000883c4 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
   883c4:	b508      	push	{r3, lr}
	otg_unfreeze_clock();
   883c6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   883ca:	f2c4 030a 	movt	r3, #16394	; 0x400a
   883ce:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   883d2:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   883d6:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800

	// Detach device from the bus
	udd_detach_device();
   883da:	6819      	ldr	r1, [r3, #0]
   883dc:	f441 7280 	orr.w	r2, r1, #256	; 0x100
   883e0:	601a      	str	r2, [r3, #0]
	otg_freeze_clock();
   883e2:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
   883e6:	f440 4180 	orr.w	r1, r0, #16384	; 0x4000
   883ea:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	udd_sleep_mode(false);
   883ee:	f04f 0000 	mov.w	r0, #0
   883f2:	f647 3329 	movw	r3, #31529	; 0x7b29
   883f6:	f2c0 0308 	movt	r3, #8
   883fa:	4798      	blx	r3
   883fc:	bd08      	pop	{r3, pc}
   883fe:	bf00      	nop

00088400 <UOTGHS_Handler>:
void udd_interrupt(void);
void udd_interrupt(void)
#else
ISR(UDD_USB_INT_FUN)
#endif
{
   88400:	b570      	push	{r4, r5, r6, lr}
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   88402:	f647 3319 	movw	r3, #31513	; 0x7b19
   88406:	f2c0 0308 	movt	r3, #8
   8840a:	4798      	blx	r3
   8840c:	b990      	cbnz	r0, 88434 <UOTGHS_Handler+0x34>
   8840e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88412:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88416:	6841      	ldr	r1, [r0, #4]
   88418:	f011 0f01 	tst.w	r1, #1
   8841c:	d10a      	bne.n	88434 <UOTGHS_Handler+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8841e:	b672      	cpsid	i
   88420:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   88424:	f240 2098 	movw	r0, #664	; 0x298
   88428:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8842c:	f04f 0200 	mov.w	r2, #0
   88430:	7002      	strb	r2, [r0, #0]
		return;
   88432:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_sof()) {
   88434:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   88438:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8843c:	6853      	ldr	r3, [r2, #4]
   8843e:	f013 0f04 	tst.w	r3, #4
   88442:	d016      	beq.n	88472 <UOTGHS_Handler+0x72>
		udd_ack_sof();
   88444:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   88448:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8844c:	f04f 0004 	mov.w	r0, #4
   88450:	6088      	str	r0, [r1, #8]
		if (Is_udd_full_speed_mode()) {
   88452:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
   88456:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   8845a:	d104      	bne.n	88466 <UOTGHS_Handler+0x66>
			udc_sof_notify();
   8845c:	f646 53e9 	movw	r3, #28137	; 0x6de9
   88460:	f2c0 0308 	movt	r3, #8
   88464:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   88466:	f644 7129 	movw	r1, #20265	; 0x4f29
   8846a:	f2c0 0108 	movt	r1, #8
   8846e:	4788      	blx	r1
#endif
		goto udd_interrupt_sof_end;
   88470:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_msof()) {
   88472:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88476:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8847a:	6841      	ldr	r1, [r0, #4]
   8847c:	f011 0f02 	tst.w	r1, #2
   88480:	d00c      	beq.n	8849c <UOTGHS_Handler+0x9c>
		udd_ack_msof();
   88482:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88486:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8848a:	f04f 0202 	mov.w	r2, #2
   8848e:	6082      	str	r2, [r0, #8]
		udc_sof_notify();
   88490:	f646 53e9 	movw	r3, #28137	; 0x6de9
   88494:	f2c0 0308 	movt	r3, #8
   88498:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   8849a:	bd70      	pop	{r4, r5, r6, pc}


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0)) {
   8849c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   884a0:	f2c4 020a 	movt	r2, #16394	; 0x400a
   884a4:	6853      	ldr	r3, [r2, #4]
   884a6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   884aa:	f000 8459 	beq.w	88d60 <UOTGHS_Handler+0x960>
	}

	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   884ae:	f24c 2020 	movw	r0, #49696	; 0xc220
   884b2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   884b6:	f04f 0110 	mov.w	r1, #16
   884ba:	6001      	str	r1, [r0, #0]
	udd_disable_nak_out_interrupt(0);
   884bc:	f04f 0208 	mov.w	r2, #8
   884c0:	6002      	str	r2, [r0, #0]

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
   884c2:	f24c 1330 	movw	r3, #49456	; 0xc130
   884c6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   884ca:	6818      	ldr	r0, [r3, #0]
   884cc:	f010 0f04 	tst.w	r0, #4
   884d0:	f000 80d9 	beq.w	88686 <UOTGHS_Handler+0x286>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   884d4:	f241 61c0 	movw	r1, #5824	; 0x16c0
   884d8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   884dc:	780a      	ldrb	r2, [r1, #0]
   884de:	b14a      	cbz	r2, 884f4 <UOTGHS_Handler+0xf4>
		// May be a hidden DATA or ZLP phase or protocol abort
		udd_ctrl_endofrequest();
   884e0:	f647 40b9 	movw	r0, #31929	; 0x7cb9
   884e4:	f2c0 0008 	movt	r0, #8
   884e8:	4780      	blx	r0

		// Reinitializes control endpoint management
		udd_ctrl_init();
   884ea:	f647 33d5 	movw	r3, #31701	; 0x7bd5
   884ee:	f2c0 0308 	movt	r3, #8
   884f2:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   884f4:	f24c 1130 	movw	r1, #49456	; 0xc130
   884f8:	f2c4 010a 	movt	r1, #16394	; 0x400a
   884fc:	680a      	ldr	r2, [r1, #0]
   884fe:	f3c2 500a 	ubfx	r0, r2, #20, #11
   88502:	2808      	cmp	r0, #8
   88504:	d00c      	beq.n	88520 <UOTGHS_Handler+0x120>
		udd_ctrl_stall_data();
   88506:	f647 4139 	movw	r1, #31801	; 0x7c39
   8850a:	f2c0 0108 	movt	r1, #8
   8850e:	4788      	blx	r1
		udd_ack_setup_received(0);
   88510:	f24c 1360 	movw	r3, #49504	; 0xc160
   88514:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88518:	f04f 0204 	mov.w	r2, #4
   8851c:	601a      	str	r2, [r3, #0]
   8851e:	bd70      	pop	{r4, r5, r6, pc}
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   88520:	f04f 0300 	mov.w	r3, #0
   88524:	f2c2 0318 	movt	r3, #8216	; 0x2018
   88528:	7819      	ldrb	r1, [r3, #0]
   8852a:	f641 40cc 	movw	r0, #7372	; 0x1ccc
   8852e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88532:	7001      	strb	r1, [r0, #0]
   88534:	f04f 0201 	mov.w	r2, #1
   88538:	f2c2 0218 	movt	r2, #8216	; 0x2018
   8853c:	7813      	ldrb	r3, [r2, #0]
   8853e:	7043      	strb	r3, [r0, #1]
   88540:	f04f 0102 	mov.w	r1, #2
   88544:	f2c2 0118 	movt	r1, #8216	; 0x2018
   88548:	780a      	ldrb	r2, [r1, #0]
   8854a:	7082      	strb	r2, [r0, #2]
   8854c:	f04f 0303 	mov.w	r3, #3
   88550:	f2c2 0318 	movt	r3, #8216	; 0x2018
   88554:	7819      	ldrb	r1, [r3, #0]
   88556:	70c1      	strb	r1, [r0, #3]
   88558:	f04f 0204 	mov.w	r2, #4
   8855c:	f2c2 0218 	movt	r2, #8216	; 0x2018
   88560:	7813      	ldrb	r3, [r2, #0]
   88562:	7103      	strb	r3, [r0, #4]
   88564:	f04f 0105 	mov.w	r1, #5
   88568:	f2c2 0118 	movt	r1, #8216	; 0x2018
   8856c:	780a      	ldrb	r2, [r1, #0]
   8856e:	7142      	strb	r2, [r0, #5]
   88570:	f04f 0306 	mov.w	r3, #6
   88574:	f2c2 0318 	movt	r3, #8216	; 0x2018
   88578:	7819      	ldrb	r1, [r3, #0]
   8857a:	7181      	strb	r1, [r0, #6]
   8857c:	f04f 0207 	mov.w	r2, #7
   88580:	f2c2 0218 	movt	r2, #8216	; 0x2018
   88584:	7813      	ldrb	r3, [r2, #0]
   88586:	71c3      	strb	r3, [r0, #7]
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   88588:	f646 6031 	movw	r0, #28209	; 0x6e31
   8858c:	f2c0 0008 	movt	r0, #8
   88590:	4780      	blx	r0
   88592:	b960      	cbnz	r0, 885ae <UOTGHS_Handler+0x1ae>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
   88594:	f647 4239 	movw	r2, #31801	; 0x7c39
   88598:	f2c0 0208 	movt	r2, #8
   8859c:	4790      	blx	r2
		udd_ack_setup_received(0);
   8859e:	f24c 1360 	movw	r3, #49504	; 0xc160
   885a2:	f2c4 030a 	movt	r3, #16394	; 0x400a
   885a6:	f04f 0004 	mov.w	r0, #4
   885aa:	6018      	str	r0, [r3, #0]
   885ac:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}
	udd_ack_setup_received(0);
   885ae:	f24c 1160 	movw	r1, #49504	; 0xc160
   885b2:	f2c4 010a 	movt	r1, #16394	; 0x400a
   885b6:	f04f 0204 	mov.w	r2, #4
   885ba:	600a      	str	r2, [r1, #0]

	if (Udd_setup_is_in()) {
   885bc:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   885c0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   885c4:	f993 0000 	ldrsb.w	r0, [r3]
   885c8:	2800      	cmp	r0, #0
   885ca:	da18      	bge.n	885fe <UOTGHS_Handler+0x1fe>
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   885cc:	f04f 0000 	mov.w	r0, #0
   885d0:	f241 6142 	movw	r1, #5698	; 0x1642
   885d4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   885d8:	8008      	strh	r0, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   885da:	f241 62c2 	movw	r2, #5826	; 0x16c2
   885de:	f2c2 0207 	movt	r2, #8199	; 0x2007
   885e2:	8010      	strh	r0, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   885e4:	f241 63c0 	movw	r3, #5824	; 0x16c0
   885e8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   885ec:	f04f 0002 	mov.w	r0, #2
   885f0:	7018      	strb	r0, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   885f2:	f647 41cd 	movw	r1, #31949	; 0x7ccd
   885f6:	f2c0 0108 	movt	r1, #8
   885fa:	4788      	blx	r1
   885fc:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
   885fe:	f641 41cc 	movw	r1, #7372	; 0x1ccc
   88602:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88606:	88ca      	ldrh	r2, [r1, #6]
   88608:	b92a      	cbnz	r2, 88616 <UOTGHS_Handler+0x216>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   8860a:	f647 4359 	movw	r3, #31833	; 0x7c59
   8860e:	f2c0 0308 	movt	r3, #8
   88612:	4798      	blx	r3
   88614:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   88616:	f04f 0300 	mov.w	r3, #0
   8861a:	4618      	mov	r0, r3
   8861c:	f241 6142 	movw	r1, #5698	; 0x1642
   88620:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88624:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   88626:	f241 62c2 	movw	r2, #5826	; 0x16c2
   8862a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8862e:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   88630:	f241 63c0 	movw	r3, #5824	; 0x16c0
   88634:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88638:	f04f 0101 	mov.w	r1, #1
   8863c:	7019      	strb	r1, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   8863e:	f24c 1360 	movw	r3, #49504	; 0xc160
   88642:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88646:	f04f 0210 	mov.w	r2, #16
   8864a:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8864c:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   88650:	b672      	cpsid	i
   88652:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   88656:	f240 2398 	movw	r3, #664	; 0x298
   8865a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8865e:	7018      	strb	r0, [r3, #0]
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
   88660:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   88664:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88668:	6002      	str	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8866a:	2900      	cmp	r1, #0
   8866c:	f040 8471 	bne.w	88f52 <UOTGHS_Handler+0xb52>
		cpu_irq_enable();
   88670:	f240 2198 	movw	r1, #664	; 0x298
   88674:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88678:	f04f 0201 	mov.w	r2, #1
   8867c:	700a      	strb	r2, [r1, #0]
   8867e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   88682:	b662      	cpsie	i
   88684:	bd70      	pop	{r4, r5, r6, pc}
		dbg_print("stup ");
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   88686:	f24c 1130 	movw	r1, #49456	; 0xc130
   8868a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8868e:	680a      	ldr	r2, [r1, #0]
   88690:	f012 0f01 	tst.w	r2, #1
   88694:	d00d      	beq.n	886b2 <UOTGHS_Handler+0x2b2>
   88696:	f24c 13c0 	movw	r3, #49600	; 0xc1c0
   8869a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8869e:	6818      	ldr	r0, [r3, #0]
   886a0:	f010 0f01 	tst.w	r0, #1
   886a4:	d005      	beq.n	886b2 <UOTGHS_Handler+0x2b2>
		dbg_print("in ");
		// IN packet sent
		udd_ctrl_in_sent();
   886a6:	f647 43cd 	movw	r3, #31949	; 0x7ccd
   886aa:	f2c0 0308 	movt	r3, #8
   886ae:	4798      	blx	r3
   886b0:	bd70      	pop	{r4, r5, r6, pc}
		return true;
	}
	if (Is_udd_out_received(0)) {
   886b2:	f24c 1130 	movw	r1, #49456	; 0xc130
   886b6:	f2c4 010a 	movt	r1, #16394	; 0x400a
   886ba:	680a      	ldr	r2, [r1, #0]
   886bc:	f012 0f02 	tst.w	r2, #2
   886c0:	f000 80de 	beq.w	88880 <UOTGHS_Handler+0x480>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   886c4:	f241 60c0 	movw	r0, #5824	; 0x16c0
   886c8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   886cc:	7801      	ldrb	r1, [r0, #0]
   886ce:	2901      	cmp	r1, #1
   886d0:	d014      	beq.n	886fc <UOTGHS_Handler+0x2fc>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   886d2:	2902      	cmp	r1, #2
   886d4:	d001      	beq.n	886da <UOTGHS_Handler+0x2da>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   886d6:	2904      	cmp	r1, #4
   886d8:	d105      	bne.n	886e6 <UOTGHS_Handler+0x2e6>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
   886da:	f647 42b9 	movw	r2, #31929	; 0x7cb9
   886de:	f2c0 0208 	movt	r2, #8
   886e2:	4790      	blx	r2
   886e4:	e004      	b.n	886f0 <UOTGHS_Handler+0x2f0>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   886e6:	f647 4139 	movw	r1, #31801	; 0x7c39
   886ea:	f2c0 0108 	movt	r1, #8
   886ee:	4788      	blx	r1
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   886f0:	f647 30d5 	movw	r0, #31701	; 0x7bd5
   886f4:	f2c0 0008 	movt	r0, #8
   886f8:	4780      	blx	r0
   886fa:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   886fc:	f24c 1430 	movw	r4, #49456	; 0xc130
   88700:	f2c4 040a 	movt	r4, #16394	; 0x400a
   88704:	6826      	ldr	r6, [r4, #0]
   88706:	f3c6 540a 	ubfx	r4, r6, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   8870a:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   8870e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88712:	8998      	ldrh	r0, [r3, #12]
   88714:	f241 62c2 	movw	r2, #5826	; 0x16c2
   88718:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8871c:	8816      	ldrh	r6, [r2, #0]
   8871e:	1931      	adds	r1, r6, r4
   88720:	4288      	cmp	r0, r1
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   88722:	bfae      	itee	ge
   88724:	b2a4      	uxthge	r4, r4
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   88726:	ebc6 0000 	rsblt	r0, r6, r0
   8872a:	b284      	uxthlt	r4, r0
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   8872c:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   88730:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88734:	6898      	ldr	r0, [r3, #8]
   88736:	1982      	adds	r2, r0, r6
	for (i = 0; i < nb_data; i++) {
   88738:	b3b4      	cbz	r4, 887a8 <UOTGHS_Handler+0x3a8>
   8873a:	f04f 0300 	mov.w	r3, #0
   8873e:	f2c2 0318 	movt	r3, #8216	; 0x2018
   88742:	ea6f 0103 	mvn.w	r1, r3
   88746:	1908      	adds	r0, r1, r4
   88748:	f000 0101 	and.w	r1, r0, #1
		*ptr_dest++ = *ptr_src++;
   8874c:	f813 0b01 	ldrb.w	r0, [r3], #1
   88750:	f802 0b01 	strb.w	r0, [r2], #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   88754:	b2d8      	uxtb	r0, r3
   88756:	42a0      	cmp	r0, r4
   88758:	f0c0 83fc 	bcc.w	88f54 <UOTGHS_Handler+0xb54>
   8875c:	e00e      	b.n	8877c <UOTGHS_Handler+0x37c>
		*ptr_dest++ = *ptr_src++;
   8875e:	4618      	mov	r0, r3
   88760:	f810 5b01 	ldrb.w	r5, [r0], #1
   88764:	4611      	mov	r1, r2
   88766:	f801 5b01 	strb.w	r5, [r1], #1
   8876a:	785d      	ldrb	r5, [r3, #1]
   8876c:	f100 0301 	add.w	r3, r0, #1
   88770:	7055      	strb	r5, [r2, #1]
   88772:	f101 0201 	add.w	r2, r1, #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   88776:	b2d8      	uxtb	r0, r3
   88778:	42a0      	cmp	r0, r4
   8877a:	d3f0      	bcc.n	8875e <UOTGHS_Handler+0x35e>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   8877c:	19a6      	adds	r6, r4, r6
   8877e:	b2b6      	uxth	r6, r6
   88780:	f241 62c2 	movw	r2, #5826	; 0x16c2
   88784:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88788:	8016      	strh	r6, [r2, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   8878a:	2c40      	cmp	r4, #64	; 0x40
   8878c:	d10c      	bne.n	887a8 <UOTGHS_Handler+0x3a8>
			|| (udd_g_ctrlreq.req.wLength <=
   8878e:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   88792:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88796:	88d9      	ldrh	r1, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
   88798:	f241 6042 	movw	r0, #5698	; 0x1642
   8879c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   887a0:	8802      	ldrh	r2, [r0, #0]
   887a2:	1993      	adds	r3, r2, r6
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
   887a4:	4299      	cmp	r1, r3
   887a6:	dc22      	bgt.n	887ee <UOTGHS_Handler+0x3ee>
					(udd_ctrl_prev_payload_buf_cnt +
							udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   887a8:	f641 41cc 	movw	r1, #7372	; 0x1ccc
   887ac:	f2c2 0107 	movt	r1, #8199	; 0x2007
   887b0:	818e      	strh	r6, [r1, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   887b2:	694a      	ldr	r2, [r1, #20]
   887b4:	b172      	cbz	r2, 887d4 <UOTGHS_Handler+0x3d4>
			if (!udd_g_ctrlreq.over_under_run()) {
   887b6:	4790      	blx	r2
   887b8:	b960      	cbnz	r0, 887d4 <UOTGHS_Handler+0x3d4>
				// Stall ZLP
				udd_ctrl_stall_data();
   887ba:	f647 4239 	movw	r2, #31801	; 0x7c39
   887be:	f2c0 0208 	movt	r2, #8
   887c2:	4790      	blx	r2
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   887c4:	f24c 1060 	movw	r0, #49504	; 0xc160
   887c8:	f2c4 000a 	movt	r0, #16394	; 0x400a
   887cc:	f04f 0302 	mov.w	r3, #2
   887d0:	6003      	str	r3, [r0, #0]
   887d2:	bd70      	pop	{r4, r5, r6, pc}
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   887d4:	f24c 1060 	movw	r0, #49504	; 0xc160
   887d8:	f2c4 000a 	movt	r0, #16394	; 0x400a
   887dc:	f04f 0302 	mov.w	r3, #2
   887e0:	6003      	str	r3, [r0, #0]
		udd_ctrl_send_zlp_in();
   887e2:	f647 4159 	movw	r1, #31833	; 0x7c59
   887e6:	f2c0 0108 	movt	r1, #8
   887ea:	4788      	blx	r1
   887ec:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   887ee:	49ae      	ldr	r1, [pc, #696]	; (88aa8 <UOTGHS_Handler+0x6a8>)
   887f0:	8988      	ldrh	r0, [r1, #12]
   887f2:	42b0      	cmp	r0, r6
   887f4:	d121      	bne.n	8883a <UOTGHS_Handler+0x43a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   887f6:	4aac      	ldr	r2, [pc, #688]	; (88aa8 <UOTGHS_Handler+0x6a8>)
   887f8:	6953      	ldr	r3, [r2, #20]
   887fa:	b94b      	cbnz	r3, 88810 <UOTGHS_Handler+0x410>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
   887fc:	4aab      	ldr	r2, [pc, #684]	; (88aac <UOTGHS_Handler+0x6ac>)
   887fe:	4790      	blx	r2
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   88800:	f24c 1060 	movw	r0, #49504	; 0xc160
   88804:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88808:	f04f 0302 	mov.w	r3, #2
   8880c:	6003      	str	r3, [r0, #0]
   8880e:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   88810:	4798      	blx	r3
   88812:	b948      	cbnz	r0, 88828 <UOTGHS_Handler+0x428>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   88814:	48a5      	ldr	r0, [pc, #660]	; (88aac <UOTGHS_Handler+0x6ac>)
   88816:	4780      	blx	r0
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   88818:	f24c 1360 	movw	r3, #49504	; 0xc160
   8881c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88820:	f04f 0102 	mov.w	r1, #2
   88824:	6019      	str	r1, [r3, #0]
   88826:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   88828:	4aa1      	ldr	r2, [pc, #644]	; (88ab0 <UOTGHS_Handler+0x6b0>)
   8882a:	4ba2      	ldr	r3, [pc, #648]	; (88ab4 <UOTGHS_Handler+0x6b4>)
   8882c:	8818      	ldrh	r0, [r3, #0]
   8882e:	8811      	ldrh	r1, [r2, #0]
   88830:	1840      	adds	r0, r0, r1
   88832:	8010      	strh	r0, [r2, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   88834:	f04f 0200 	mov.w	r2, #0
   88838:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   8883a:	f24c 1360 	movw	r3, #49504	; 0xc160
   8883e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88842:	f04f 0102 	mov.w	r1, #2
   88846:	6019      	str	r1, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   88848:	f04f 0210 	mov.w	r2, #16
   8884c:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8884e:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   88852:	b672      	cpsid	i
   88854:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   88858:	4b97      	ldr	r3, [pc, #604]	; (88ab8 <UOTGHS_Handler+0x6b8>)
   8885a:	f04f 0000 	mov.w	r0, #0
   8885e:	7018      	strb	r0, [r3, #0]
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
   88860:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   88864:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88868:	601a      	str	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8886a:	2900      	cmp	r1, #0
   8886c:	f040 8371 	bne.w	88f52 <UOTGHS_Handler+0xb52>
		cpu_irq_enable();
   88870:	4991      	ldr	r1, [pc, #580]	; (88ab8 <UOTGHS_Handler+0x6b8>)
   88872:	f04f 0201 	mov.w	r2, #1
   88876:	700a      	strb	r2, [r1, #0]
   88878:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8887c:	b662      	cpsie	i
   8887e:	bd70      	pop	{r4, r5, r6, pc}
		dbg_print("out ");
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
   88880:	f24c 1330 	movw	r3, #49456	; 0xc130
   88884:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88888:	6818      	ldr	r0, [r3, #0]
   8888a:	f010 0f08 	tst.w	r0, #8
   8888e:	d01f      	beq.n	888d0 <UOTGHS_Handler+0x4d0>
		dbg_print("nako ");
		// Overflow on OUT packet
		udd_ack_nak_out(0);
   88890:	f24c 1060 	movw	r0, #49504	; 0xc160
   88894:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88898:	f04f 0108 	mov.w	r1, #8
   8889c:	6001      	str	r1, [r0, #0]
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
   8889e:	f24c 1230 	movw	r2, #49456	; 0xc130
   888a2:	f2c4 020a 	movt	r2, #16394	; 0x400a
   888a6:	6813      	ldr	r3, [r2, #0]
   888a8:	f013 0f01 	tst.w	r3, #1
   888ac:	f040 8351 	bne.w	88f52 <UOTGHS_Handler+0xb52>
		return; // Overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   888b0:	f241 60c0 	movw	r0, #5824	; 0x16c0
   888b4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   888b8:	7801      	ldrb	r1, [r0, #0]
   888ba:	2903      	cmp	r1, #3
   888bc:	f040 8349 	bne.w	88f52 <UOTGHS_Handler+0xb52>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   888c0:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   888c4:	f2c4 030a 	movt	r3, #16394	; 0x400a
   888c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   888cc:	601a      	str	r2, [r3, #0]
   888ce:	bd70      	pop	{r4, r5, r6, pc}
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
   888d0:	f24c 1130 	movw	r1, #49456	; 0xc130
   888d4:	f2c4 010a 	movt	r1, #16394	; 0x400a
   888d8:	680a      	ldr	r2, [r1, #0]
   888da:	f012 0f10 	tst.w	r2, #16
   888de:	f000 823f 	beq.w	88d60 <UOTGHS_Handler+0x960>
		dbg_print("naki ");
		// Underflow on IN packet
		udd_ack_nak_in(0);
   888e2:	f24c 1360 	movw	r3, #49504	; 0xc160
   888e6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   888ea:	f04f 0010 	mov.w	r0, #16
   888ee:	6018      	str	r0, [r3, #0]
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
   888f0:	f24c 1130 	movw	r1, #49456	; 0xc130
   888f4:	f2c4 010a 	movt	r1, #16394	; 0x400a
   888f8:	680a      	ldr	r2, [r1, #0]
   888fa:	f012 0f02 	tst.w	r2, #2
   888fe:	f040 8328 	bne.w	88f52 <UOTGHS_Handler+0xb52>
		return; // Underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   88902:	f241 63c0 	movw	r3, #5824	; 0x16c0
   88906:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8890a:	7818      	ldrb	r0, [r3, #0]
   8890c:	2801      	cmp	r0, #1
   8890e:	d105      	bne.n	8891c <UOTGHS_Handler+0x51c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   88910:	f647 4359 	movw	r3, #31833	; 0x7c59
   88914:	f2c0 0308 	movt	r3, #8
   88918:	4798      	blx	r3
   8891a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   8891c:	2804      	cmp	r0, #4
   8891e:	f040 8318 	bne.w	88f52 <UOTGHS_Handler+0xb52>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   88922:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   88926:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8892a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8892e:	600a      	str	r2, [r1, #0]
   88930:	bd70      	pop	{r4, r5, r6, pc}
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   88932:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88936:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8893a:	685a      	ldr	r2, [r3, #4]
   8893c:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   88940:	d03c      	beq.n	889bc <UOTGHS_Handler+0x5bc>
   88942:	f04f 0005 	mov.w	r0, #5
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88946:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8894a:	495c      	ldr	r1, [pc, #368]	; (88abc <UOTGHS_Handler+0x6bc>)
   8894c:	e019      	b.n	88982 <UOTGHS_Handler+0x582>

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   8894e:	f04f 0001 	mov.w	r0, #1
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88952:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88956:	f241 6148 	movw	r1, #5704	; 0x1648
   8895a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8895e:	e010      	b.n	88982 <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   88960:	f04f 0002 	mov.w	r0, #2
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88964:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88968:	4955      	ldr	r1, [pc, #340]	; (88ac0 <UOTGHS_Handler+0x6c0>)
   8896a:	e00a      	b.n	88982 <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8896c:	f04f 0003 	mov.w	r0, #3
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88970:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88974:	4953      	ldr	r1, [pc, #332]	; (88ac4 <UOTGHS_Handler+0x6c4>)
   88976:	e004      	b.n	88982 <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   88978:	f04f 0004 	mov.w	r0, #4
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   8897c:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88980:	4951      	ldr	r1, [pc, #324]	; (88ac8 <UOTGHS_Handler+0x6c8>)
#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   88982:	f44f 4243 	mov.w	r2, #49920	; 0xc300
   88986:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8898a:	eb02 1300 	add.w	r3, r2, r0, lsl #4
   8898e:	68da      	ldr	r2, [r3, #12]
   88990:	f012 0f01 	tst.w	r2, #1
   88994:	f040 82dd 	bne.w	88f52 <UOTGHS_Handler+0xb52>
					& UOTGHS_DEVDMASTATUS_CHANN_ENB) {
				return true; // Ignore EOT_STA interrupt
			}
			dbg_print("dma%x: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   88998:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   8899c:	f2c4 020a 	movt	r2, #16394	; 0x400a
   889a0:	6154      	str	r4, [r2, #20]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   889a2:	68db      	ldr	r3, [r3, #12]
					UOTGHS_DEVDMASTATUS_BUFF_COUNT_Msk)
					>> UOTGHS_DEVDMASTATUS_BUFF_COUNT_Pos;
			if (nb_remaining) {
   889a4:	0c1b      	lsrs	r3, r3, #16
   889a6:	d003      	beq.n	889b0 <UOTGHS_Handler+0x5b0>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   889a8:	68ca      	ldr	r2, [r1, #12]
   889aa:	1ad3      	subs	r3, r2, r3
   889ac:	60cb      	str	r3, [r1, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   889ae:	608b      	str	r3, [r1, #8]
			}
			udd_ep_trans_done(ep);
   889b0:	f647 7181 	movw	r1, #32641	; 0x7f81
   889b4:	f2c0 0108 	movt	r1, #8
   889b8:	4788      	blx	r1
   889ba:	bd70      	pop	{r4, r5, r6, pc}
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   889bc:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   889c0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   889c4:	6901      	ldr	r1, [r0, #16]
   889c6:	f411 3f00 	tst.w	r1, #131072	; 0x20000
   889ca:	f000 80a9 	beq.w	88b20 <UOTGHS_Handler+0x720>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   889ce:	f24c 13d4 	movw	r3, #49620	; 0xc1d4
   889d2:	f2c4 030a 	movt	r3, #16394	; 0x400a
   889d6:	681a      	ldr	r2, [r3, #0]
   889d8:	f012 0f01 	tst.w	r2, #1
   889dc:	d03b      	beq.n	88a56 <UOTGHS_Handler+0x656>
					&& Is_udd_in_send(ep)) {
   889de:	f24c 1044 	movw	r0, #49476	; 0xc144
   889e2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   889e6:	6801      	ldr	r1, [r0, #0]
   889e8:	f011 0f01 	tst.w	r1, #1
   889ec:	d033      	beq.n	88a56 <UOTGHS_Handler+0x656>
   889ee:	f04f 0205 	mov.w	r2, #5
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   889f2:	f04f 0314 	mov.w	r3, #20
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   889f6:	4831      	ldr	r0, [pc, #196]	; (88abc <UOTGHS_Handler+0x6bc>)
   889f8:	e016      	b.n	88a28 <UOTGHS_Handler+0x628>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   889fa:	f04f 0201 	mov.w	r2, #1
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   889fe:	f04f 0304 	mov.w	r3, #4
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88a02:	4832      	ldr	r0, [pc, #200]	; (88acc <UOTGHS_Handler+0x6cc>)
   88a04:	e010      	b.n	88a28 <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   88a06:	f04f 0202 	mov.w	r2, #2
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88a0a:	f04f 0308 	mov.w	r3, #8
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88a0e:	482c      	ldr	r0, [pc, #176]	; (88ac0 <UOTGHS_Handler+0x6c0>)
   88a10:	e00a      	b.n	88a28 <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   88a12:	f04f 0203 	mov.w	r2, #3
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88a16:	f04f 030c 	mov.w	r3, #12
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88a1a:	482a      	ldr	r0, [pc, #168]	; (88ac4 <UOTGHS_Handler+0x6c4>)
   88a1c:	e004      	b.n	88a28 <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   88a1e:	f04f 0204 	mov.w	r2, #4
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88a22:	f04f 0310 	mov.w	r3, #16
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88a26:	4828      	ldr	r0, [pc, #160]	; (88ac8 <UOTGHS_Handler+0x6c8>)
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
   88a28:	f24c 2120 	movw	r1, #49696	; 0xc220
   88a2c:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88a30:	f04f 0501 	mov.w	r5, #1
   88a34:	505d      	str	r5, [r3, r1]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
   88a36:	f24c 1460 	movw	r4, #49504	; 0xc160
   88a3a:	f2c4 040a 	movt	r4, #16394	; 0x400a
   88a3e:	511d      	str	r5, [r3, r4]
				udd_ack_fifocon(ep);
   88a40:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   88a44:	505c      	str	r4, [r3, r1]
				udd_ep_finish_job(ptr_job, false, ep);
   88a46:	f04f 0100 	mov.w	r1, #0
   88a4a:	f647 731d 	movw	r3, #32541	; 0x7f1d
   88a4e:	f2c0 0308 	movt	r3, #8
   88a52:	4798      	blx	r3
   88a54:	bd70      	pop	{r4, r5, r6, pc}
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   88a56:	f24c 13d4 	movw	r3, #49620	; 0xc1d4
   88a5a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88a5e:	681a      	ldr	r2, [r3, #0]
   88a60:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   88a64:	d05c      	beq.n	88b20 <UOTGHS_Handler+0x720>
					&& (0 == udd_nb_busy_bank(ep))) {
   88a66:	f24c 1044 	movw	r0, #49476	; 0xc144
   88a6a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88a6e:	6801      	ldr	r1, [r0, #0]
   88a70:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   88a74:	d154      	bne.n	88b20 <UOTGHS_Handler+0x720>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88a76:	f04f 0314 	mov.w	r3, #20
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88a7a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88a7e:	4a0f      	ldr	r2, [pc, #60]	; (88abc <UOTGHS_Handler+0x6bc>)
   88a80:	e02b      	b.n	88ada <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88a82:	f04f 0304 	mov.w	r3, #4
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88a86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88a8a:	4a10      	ldr	r2, [pc, #64]	; (88acc <UOTGHS_Handler+0x6cc>)
   88a8c:	e025      	b.n	88ada <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88a8e:	f04f 0308 	mov.w	r3, #8
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88a92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88a96:	4a0a      	ldr	r2, [pc, #40]	; (88ac0 <UOTGHS_Handler+0x6c0>)
   88a98:	e01f      	b.n	88ada <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88a9a:	f04f 030c 	mov.w	r3, #12
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88a9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88aa2:	4a08      	ldr	r2, [pc, #32]	; (88ac4 <UOTGHS_Handler+0x6c4>)
   88aa4:	e019      	b.n	88ada <UOTGHS_Handler+0x6da>
   88aa6:	bf00      	nop
   88aa8:	20071ccc 	.word	0x20071ccc
   88aac:	00087c39 	.word	0x00087c39
   88ab0:	20071642 	.word	0x20071642
   88ab4:	200716c2 	.word	0x200716c2
   88ab8:	20070298 	.word	0x20070298
   88abc:	200716a8 	.word	0x200716a8
   88ac0:	20071660 	.word	0x20071660
   88ac4:	20071678 	.word	0x20071678
   88ac8:	20071690 	.word	0x20071690
   88acc:	20071648 	.word	0x20071648
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88ad0:	f04f 0310 	mov.w	r3, #16
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88ad4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88ad8:	4abf      	ldr	r2, [pc, #764]	; (88dd8 <UOTGHS_Handler+0x9d8>)
			}
			if (Is_udd_bank_interrupt_enabled(ep)
					&& (0 == udd_nb_busy_bank(ep))) {
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   88ada:	f24c 2020 	movw	r0, #49696	; 0xc220
   88ade:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88ae2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
   88ae6:	501c      	str	r4, [r3, r0]
				udd_disable_endpoint_interrupt(ep);
   88ae8:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88aec:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88af0:	6141      	str	r1, [r0, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
   88af2:	7d11      	ldrb	r1, [r2, #20]
   88af4:	f36f 0182 	bfc	r1, #2, #1
   88af8:	7511      	strb	r1, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   88afa:	f44f 4241 	mov.w	r2, #49408	; 0xc100
   88afe:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88b02:	5898      	ldr	r0, [r3, r2]
   88b04:	f420 7100 	bic.w	r1, r0, #512	; 0x200
   88b08:	5099      	str	r1, [r3, r2]
				udd_enable_stall_handshake(ep);
   88b0a:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   88b0e:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88b12:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   88b16:	5098      	str	r0, [r3, r2]
				udd_reset_data_toggle(ep);
   88b18:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   88b1c:	5099      	str	r1, [r3, r2]
   88b1e:	bd70      	pop	{r4, r5, r6, pc}
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   88b20:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88b24:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88b28:	685a      	ldr	r2, [r3, #4]
   88b2a:	f012 0f08 	tst.w	r2, #8
   88b2e:	d07a      	beq.n	88c26 <UOTGHS_Handler+0x826>
		udd_ack_reset();
   88b30:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   88b34:	f2c4 040a 	movt	r4, #16394	; 0x400a
   88b38:	f04f 0508 	mov.w	r5, #8
   88b3c:	60a5      	str	r5, [r4, #8]
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   88b3e:	f241 6648 	movw	r6, #5704	; 0x1648
   88b42:	f2c2 0607 	movt	r6, #8199	; 0x2007
   88b46:	4630      	mov	r0, r6
   88b48:	f04f 0101 	mov.w	r1, #1
   88b4c:	460a      	mov	r2, r1
   88b4e:	f647 751d 	movw	r5, #32541	; 0x7f1d
   88b52:	f2c0 0508 	movt	r5, #8
   88b56:	47a8      	blx	r5
   88b58:	f106 0018 	add.w	r0, r6, #24
   88b5c:	f04f 0101 	mov.w	r1, #1
   88b60:	f04f 0202 	mov.w	r2, #2
   88b64:	47a8      	blx	r5
   88b66:	f106 0030 	add.w	r0, r6, #48	; 0x30
   88b6a:	f04f 0101 	mov.w	r1, #1
   88b6e:	f04f 0203 	mov.w	r2, #3
   88b72:	47a8      	blx	r5
   88b74:	f106 0048 	add.w	r0, r6, #72	; 0x48
   88b78:	f04f 0101 	mov.w	r1, #1
   88b7c:	f04f 0204 	mov.w	r2, #4
   88b80:	47a8      	blx	r5
   88b82:	f106 0060 	add.w	r0, r6, #96	; 0x60
   88b86:	f04f 0101 	mov.w	r1, #1
   88b8a:	f04f 0205 	mov.w	r2, #5
   88b8e:	47a8      	blx	r5
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
   88b90:	f646 5385 	movw	r3, #28037	; 0x6d85
   88b94:	f2c0 0308 	movt	r3, #8
   88b98:	4798      	blx	r3
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   88b9a:	6822      	ldr	r2, [r4, #0]
   88b9c:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   88ba0:	6021      	str	r1, [r4, #0]
	udd_enable_address();
   88ba2:	6820      	ldr	r0, [r4, #0]
   88ba4:	f040 0380 	orr.w	r3, r0, #128	; 0x80
   88ba8:	6023      	str	r3, [r4, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   88baa:	f44f 4141 	mov.w	r1, #49408	; 0xc100
   88bae:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88bb2:	680a      	ldr	r2, [r1, #0]
   88bb4:	f422 50cb 	bic.w	r0, r2, #6496	; 0x1960
   88bb8:	f020 031c 	bic.w	r3, r0, #28
   88bbc:	f043 0230 	orr.w	r2, r3, #48	; 0x30
   88bc0:	600a      	str	r2, [r1, #0]
		USB_EP_TYPE_CONTROL,
		0,
		USB_DEVICE_EP_CTRL_SIZE,
		UOTGHS_DEVEPTCFG_EPBK_1_BANK);

	udd_allocate_memory(0);
   88bc2:	6808      	ldr	r0, [r1, #0]
   88bc4:	f040 0302 	orr.w	r3, r0, #2
   88bc8:	600b      	str	r3, [r1, #0]
	udd_enable_endpoint(0);
   88bca:	69e1      	ldr	r1, [r4, #28]
   88bcc:	f041 0201 	orr.w	r2, r1, #1
   88bd0:	61e2      	str	r2, [r4, #28]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   88bd2:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   88bd6:	b672      	cpsid	i
   88bd8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   88bdc:	f240 2398 	movw	r3, #664	; 0x298
   88be0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88be4:	f04f 0100 	mov.w	r1, #0
   88be8:	7019      	strb	r1, [r3, #0]
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
   88bea:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   88bee:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88bf2:	f04f 0304 	mov.w	r3, #4
   88bf6:	6013      	str	r3, [r2, #0]
	udd_enable_out_received_interrupt(0);
   88bf8:	f04f 0102 	mov.w	r1, #2
   88bfc:	6011      	str	r1, [r2, #0]
	udd_enable_endpoint_interrupt(0);
   88bfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   88c02:	61a2      	str	r2, [r4, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88c04:	b948      	cbnz	r0, 88c1a <UOTGHS_Handler+0x81a>
		cpu_irq_enable();
   88c06:	f240 2098 	movw	r0, #664	; 0x298
   88c0a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88c0e:	f04f 0301 	mov.w	r3, #1
   88c12:	7003      	strb	r3, [r0, #0]
   88c14:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   88c18:	b662      	cpsie	i
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
   88c1a:	f647 31d5 	movw	r1, #31701	; 0x7bd5
   88c1e:	f2c0 0108 	movt	r1, #8
   88c22:	4788      	blx	r1
		goto udd_interrupt_end;
   88c24:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   88c26:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88c2a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88c2e:	6901      	ldr	r1, [r0, #16]
   88c30:	f011 0f01 	tst.w	r1, #1
   88c34:	d02a      	beq.n	88c8c <UOTGHS_Handler+0x88c>
   88c36:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88c3a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88c3e:	685a      	ldr	r2, [r3, #4]
   88c40:	f012 0f01 	tst.w	r2, #1
   88c44:	d022      	beq.n	88c8c <UOTGHS_Handler+0x88c>
		otg_unfreeze_clock();
   88c46:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   88c4a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88c4e:	f8d1 0800 	ldr.w	r0, [r1, #2048]	; 0x800
   88c52:	f420 4380 	bic.w	r3, r0, #16384	; 0x4000
   88c56:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   88c5a:	f04f 0201 	mov.w	r2, #1
   88c5e:	614a      	str	r2, [r1, #20]
		udd_enable_wake_up_interrupt();
   88c60:	f04f 0010 	mov.w	r0, #16
   88c64:	6188      	str	r0, [r1, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   88c66:	f8d1 3800 	ldr.w	r3, [r1, #2048]	; 0x800
   88c6a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
   88c6e:	f8c1 2800 	str.w	r2, [r1, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
   88c72:	f04f 0000 	mov.w	r0, #0
   88c76:	f647 3129 	movw	r1, #31529	; 0x7b29
   88c7a:	f2c0 0108 	movt	r1, #8
   88c7e:	4788      	blx	r1
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   88c80:	f644 7021 	movw	r0, #20257	; 0x4f21
   88c84:	f2c0 0008 	movt	r0, #8
   88c88:	4780      	blx	r0
#endif
		goto udd_interrupt_end;
   88c8a:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   88c8c:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88c90:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88c94:	6901      	ldr	r1, [r0, #16]
   88c96:	f011 0f10 	tst.w	r1, #16
   88c9a:	d034      	beq.n	88d06 <UOTGHS_Handler+0x906>
   88c9c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88ca0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88ca4:	685a      	ldr	r2, [r3, #4]
   88ca6:	f012 0f10 	tst.w	r2, #16
   88caa:	d02c      	beq.n	88d06 <UOTGHS_Handler+0x906>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
   88cac:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   88cb0:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88cb4:	f8d1 2800 	ldr.w	r2, [r1, #2048]	; 0x800
   88cb8:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   88cbc:	f8c1 0800 	str.w	r0, [r1, #2048]	; 0x800
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   88cc0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88cc4:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88cc8:	e003      	b.n	88cd2 <UOTGHS_Handler+0x8d2>
			if (Is_udd_suspend()) {
   88cca:	685a      	ldr	r2, [r3, #4]
   88ccc:	f012 0f01 	tst.w	r2, #1
   88cd0:	d104      	bne.n	88cdc <UOTGHS_Handler+0x8dc>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   88cd2:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
   88cd6:	f411 4f80 	tst.w	r1, #16384	; 0x4000
   88cda:	d0f6      	beq.n	88cca <UOTGHS_Handler+0x8ca>
			if (Is_udd_suspend()) {
				break; // In case of USB state change in HS
			}
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
   88cdc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   88ce0:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88ce4:	f04f 0010 	mov.w	r0, #16
   88ce8:	6148      	str	r0, [r1, #20]
		udd_enable_suspend_interrupt();
   88cea:	f04f 0001 	mov.w	r0, #1
   88cee:	6188      	str	r0, [r1, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
   88cf0:	f647 3329 	movw	r3, #31529	; 0x7b29
   88cf4:	f2c0 0308 	movt	r3, #8
   88cf8:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   88cfa:	f644 7225 	movw	r2, #20261	; 0x4f25
   88cfe:	f2c0 0208 	movt	r2, #8
   88d02:	4790      	blx	r2
#endif
		goto udd_interrupt_end;
   88d04:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_otg_vbus_transition()) {
   88d06:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88d0a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88d0e:	f8d0 1804 	ldr.w	r1, [r0, #2052]	; 0x804
   88d12:	f011 0f02 	tst.w	r1, #2
   88d16:	f000 811c 	beq.w	88f52 <UOTGHS_Handler+0xb52>
		dbg_print("VBus ");
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
   88d1a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88d1e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88d22:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   88d26:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   88d2a:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
		otg_ack_vbus_transition();
   88d2e:	f04f 0102 	mov.w	r1, #2
   88d32:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
		otg_freeze_clock();
   88d36:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   88d3a:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   88d3e:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
   88d42:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   88d46:	f413 6f00 	tst.w	r3, #2048	; 0x800
			udd_attach();
   88d4a:	bf19      	ittee	ne
   88d4c:	f248 331d 	movwne	r3, #33565	; 0x831d
   88d50:	f2c0 0308 	movtne	r3, #8
		} else {
			udd_detach();
   88d54:	f248 33c5 	movweq	r3, #33733	; 0x83c5
   88d58:	f2c0 0308 	movteq	r3, #8
   88d5c:	4798      	blx	r3
   88d5e:	bd70      	pop	{r4, r5, r6, pc}
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88d60:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88d64:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88d68:	6901      	ldr	r1, [r0, #16]
   88d6a:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
   88d6e:	d008      	beq.n	88d82 <UOTGHS_Handler+0x982>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   88d70:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88d74:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88d78:	685a      	ldr	r2, [r3, #4]
   88d7a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
   88d7e:	f47f ade6 	bne.w	8894e <UOTGHS_Handler+0x54e>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88d82:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88d86:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88d8a:	6901      	ldr	r1, [r0, #16]
   88d8c:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   88d90:	d024      	beq.n	88ddc <UOTGHS_Handler+0x9dc>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88d92:	f24c 13c4 	movw	r3, #49604	; 0xc1c4
   88d96:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88d9a:	681a      	ldr	r2, [r3, #0]
   88d9c:	f012 0f01 	tst.w	r2, #1
   88da0:	d110      	bne.n	88dc4 <UOTGHS_Handler+0x9c4>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   88da2:	f24c 13c4 	movw	r3, #49604	; 0xc1c4
   88da6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88daa:	681a      	ldr	r2, [r3, #0]
   88dac:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   88db0:	d014      	beq.n	88ddc <UOTGHS_Handler+0x9dc>
					&& (0 == udd_nb_busy_bank(ep))) {
   88db2:	f24c 1034 	movw	r0, #49460	; 0xc134
   88db6:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88dba:	6801      	ldr	r1, [r0, #0]
   88dbc:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   88dc0:	d10c      	bne.n	88ddc <UOTGHS_Handler+0x9dc>
   88dc2:	e65e      	b.n	88a82 <UOTGHS_Handler+0x682>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   88dc4:	f24c 1034 	movw	r0, #49460	; 0xc134
   88dc8:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88dcc:	6801      	ldr	r1, [r0, #0]
   88dce:	f011 0f01 	tst.w	r1, #1
   88dd2:	d0e6      	beq.n	88da2 <UOTGHS_Handler+0x9a2>
   88dd4:	e611      	b.n	889fa <UOTGHS_Handler+0x5fa>
   88dd6:	bf00      	nop
   88dd8:	20071690 	.word	0x20071690
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88ddc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88de0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88de4:	691a      	ldr	r2, [r3, #16]
   88de6:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
   88dea:	d008      	beq.n	88dfe <UOTGHS_Handler+0x9fe>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   88dec:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88df0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88df4:	6841      	ldr	r1, [r0, #4]
   88df6:	f011 6f80 	tst.w	r1, #67108864	; 0x4000000
   88dfa:	f47f adb1 	bne.w	88960 <UOTGHS_Handler+0x560>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88dfe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88e02:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88e06:	691a      	ldr	r2, [r3, #16]
   88e08:	f412 4f80 	tst.w	r2, #16384	; 0x4000
   88e0c:	d021      	beq.n	88e52 <UOTGHS_Handler+0xa52>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88e0e:	f24c 10c8 	movw	r0, #49608	; 0xc1c8
   88e12:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88e16:	6801      	ldr	r1, [r0, #0]
   88e18:	f011 0f01 	tst.w	r1, #1
   88e1c:	d110      	bne.n	88e40 <UOTGHS_Handler+0xa40>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   88e1e:	f24c 10c8 	movw	r0, #49608	; 0xc1c8
   88e22:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88e26:	6801      	ldr	r1, [r0, #0]
   88e28:	f411 5f80 	tst.w	r1, #4096	; 0x1000
   88e2c:	d011      	beq.n	88e52 <UOTGHS_Handler+0xa52>
					&& (0 == udd_nb_busy_bank(ep))) {
   88e2e:	f24c 1338 	movw	r3, #49464	; 0xc138
   88e32:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88e36:	681a      	ldr	r2, [r3, #0]
   88e38:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   88e3c:	d109      	bne.n	88e52 <UOTGHS_Handler+0xa52>
   88e3e:	e626      	b.n	88a8e <UOTGHS_Handler+0x68e>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   88e40:	f24c 1338 	movw	r3, #49464	; 0xc138
   88e44:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88e48:	681a      	ldr	r2, [r3, #0]
   88e4a:	f012 0f01 	tst.w	r2, #1
   88e4e:	d0e6      	beq.n	88e1e <UOTGHS_Handler+0xa1e>
   88e50:	e5d9      	b.n	88a06 <UOTGHS_Handler+0x606>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88e52:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88e56:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88e5a:	6901      	ldr	r1, [r0, #16]
   88e5c:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
   88e60:	d008      	beq.n	88e74 <UOTGHS_Handler+0xa74>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   88e62:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88e66:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88e6a:	685a      	ldr	r2, [r3, #4]
   88e6c:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
   88e70:	f47f ad7c 	bne.w	8896c <UOTGHS_Handler+0x56c>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88e74:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88e78:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88e7c:	6901      	ldr	r1, [r0, #16]
   88e7e:	f411 4f00 	tst.w	r1, #32768	; 0x8000
   88e82:	d021      	beq.n	88ec8 <UOTGHS_Handler+0xac8>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88e84:	f24c 13cc 	movw	r3, #49612	; 0xc1cc
   88e88:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88e8c:	681a      	ldr	r2, [r3, #0]
   88e8e:	f012 0f01 	tst.w	r2, #1
   88e92:	d110      	bne.n	88eb6 <UOTGHS_Handler+0xab6>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   88e94:	f24c 13cc 	movw	r3, #49612	; 0xc1cc
   88e98:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88e9c:	681a      	ldr	r2, [r3, #0]
   88e9e:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   88ea2:	d011      	beq.n	88ec8 <UOTGHS_Handler+0xac8>
					&& (0 == udd_nb_busy_bank(ep))) {
   88ea4:	f24c 103c 	movw	r0, #49468	; 0xc13c
   88ea8:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88eac:	6801      	ldr	r1, [r0, #0]
   88eae:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   88eb2:	d109      	bne.n	88ec8 <UOTGHS_Handler+0xac8>
   88eb4:	e5f1      	b.n	88a9a <UOTGHS_Handler+0x69a>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   88eb6:	f24c 103c 	movw	r0, #49468	; 0xc13c
   88eba:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88ebe:	6801      	ldr	r1, [r0, #0]
   88ec0:	f011 0f01 	tst.w	r1, #1
   88ec4:	d0e6      	beq.n	88e94 <UOTGHS_Handler+0xa94>
   88ec6:	e5a4      	b.n	88a12 <UOTGHS_Handler+0x612>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88ec8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88ecc:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88ed0:	691a      	ldr	r2, [r3, #16]
   88ed2:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
   88ed6:	d008      	beq.n	88eea <UOTGHS_Handler+0xaea>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   88ed8:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88edc:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88ee0:	6841      	ldr	r1, [r0, #4]
   88ee2:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
   88ee6:	f47f ad47 	bne.w	88978 <UOTGHS_Handler+0x578>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88eea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88eee:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88ef2:	691a      	ldr	r2, [r3, #16]
   88ef4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   88ef8:	d021      	beq.n	88f3e <UOTGHS_Handler+0xb3e>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88efa:	f24c 10d0 	movw	r0, #49616	; 0xc1d0
   88efe:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88f02:	6801      	ldr	r1, [r0, #0]
   88f04:	f011 0f01 	tst.w	r1, #1
   88f08:	d110      	bne.n	88f2c <UOTGHS_Handler+0xb2c>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   88f0a:	f24c 10d0 	movw	r0, #49616	; 0xc1d0
   88f0e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88f12:	6801      	ldr	r1, [r0, #0]
   88f14:	f411 5f80 	tst.w	r1, #4096	; 0x1000
   88f18:	d011      	beq.n	88f3e <UOTGHS_Handler+0xb3e>
					&& (0 == udd_nb_busy_bank(ep))) {
   88f1a:	f24c 1340 	movw	r3, #49472	; 0xc140
   88f1e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88f22:	681a      	ldr	r2, [r3, #0]
   88f24:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   88f28:	d109      	bne.n	88f3e <UOTGHS_Handler+0xb3e>
   88f2a:	e5d1      	b.n	88ad0 <UOTGHS_Handler+0x6d0>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   88f2c:	f24c 1340 	movw	r3, #49472	; 0xc140
   88f30:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88f34:	681a      	ldr	r2, [r3, #0]
   88f36:	f012 0f01 	tst.w	r2, #1
   88f3a:	d0e6      	beq.n	88f0a <UOTGHS_Handler+0xb0a>
   88f3c:	e56f      	b.n	88a1e <UOTGHS_Handler+0x61e>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88f3e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88f42:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88f46:	6901      	ldr	r1, [r0, #16]
   88f48:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
   88f4c:	f47f acf1 	bne.w	88932 <UOTGHS_Handler+0x532>
   88f50:	e534      	b.n	889bc <UOTGHS_Handler+0x5bc>
   88f52:	bd70      	pop	{r4, r5, r6, pc}
   88f54:	b249      	sxtb	r1, r1
   88f56:	2900      	cmp	r1, #0
   88f58:	f43f ac01 	beq.w	8875e <UOTGHS_Handler+0x35e>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
   88f5c:	f813 0b01 	ldrb.w	r0, [r3], #1
   88f60:	f802 0b01 	strb.w	r0, [r2], #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   88f64:	b2d9      	uxtb	r1, r3
   88f66:	42a1      	cmp	r1, r4
   88f68:	f4ff abf9 	bcc.w	8875e <UOTGHS_Handler+0x35e>
   88f6c:	e406      	b.n	8877c <UOTGHS_Handler+0x37c>
   88f6e:	bf00      	nop

00088f70 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   88f70:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88f74:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88f78:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
#else
	return false;
#endif
}
   88f7c:	f410 5040 	ands.w	r0, r0, #12288	; 0x3000
   88f80:	bf18      	it	ne
   88f82:	2001      	movne	r0, #1
   88f84:	4770      	bx	lr
   88f86:	bf00      	nop

00088f88 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
   88f88:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88f8c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88f90:	681a      	ldr	r2, [r3, #0]
   88f92:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   88f96:	6019      	str	r1, [r3, #0]
	udd_configure_address(address);
   88f98:	681a      	ldr	r2, [r3, #0]
   88f9a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   88f9e:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   88fa2:	ea40 0201 	orr.w	r2, r0, r1
   88fa6:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   88fa8:	6818      	ldr	r0, [r3, #0]
   88faa:	f040 0180 	orr.w	r1, r0, #128	; 0x80
   88fae:	6019      	str	r1, [r3, #0]
   88fb0:	4770      	bx	lr
   88fb2:	bf00      	nop

00088fb4 <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
   88fb4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88fb8:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88fbc:	6818      	ldr	r0, [r3, #0]
}
   88fbe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   88fc2:	4770      	bx	lr

00088fc4 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
   88fc4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88fc8:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88fcc:	6a18      	ldr	r0, [r3, #32]
}
   88fce:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   88fd2:	4770      	bx	lr

00088fd4 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
   88fd4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88fd8:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88fdc:	6a18      	ldr	r0, [r3, #32]
}
   88fde:	ea4f 4180 	mov.w	r1, r0, lsl #18
   88fe2:	ea4f 4091 	mov.w	r0, r1, lsr #18
   88fe6:	4770      	bx	lr

00088fe8 <udd_set_setup_payload>:
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
	udd_g_ctrlreq.payload = payload;
   88fe8:	f641 43cc 	movw	r3, #7372	; 0x1ccc
   88fec:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88ff0:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   88ff2:	8199      	strh	r1, [r3, #12]
   88ff4:	4770      	bx	lr
   88ff6:	bf00      	nop

00088ff8 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
   88ff8:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   88ffa:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   88ffe:	2c05      	cmp	r4, #5
   89000:	d82a      	bhi.n	89058 <udd_ep_free+0x60>
		return;
	}
	udd_disable_endpoint(ep_index);
   89002:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89006:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8900a:	69d9      	ldr	r1, [r3, #28]
   8900c:	f04f 0201 	mov.w	r2, #1
   89010:	fa02 f204 	lsl.w	r2, r2, r4
   89014:	ea21 0102 	bic.w	r1, r1, r2
   89018:	61d9      	str	r1, [r3, #28]
	udd_unallocate_memory(ep_index);
   8901a:	f44f 4341 	mov.w	r3, #49408	; 0xc100
   8901e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   89022:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   89026:	f022 0102 	bic.w	r1, r2, #2
   8902a:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	udd_ep_abort_job(ep);
   8902e:	f647 7355 	movw	r3, #32597	; 0x7f55
   89032:	f2c0 0308 	movt	r3, #8
   89036:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   89038:	f104 34ff 	add.w	r4, r4, #4294967295
   8903c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   89040:	f241 6248 	movw	r2, #5704	; 0x1648
   89044:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89048:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
   8904c:	7d21      	ldrb	r1, [r4, #20]
   8904e:	f36f 0182 	bfc	r1, #2, #1
   89052:	7521      	strb	r1, [r4, #20]
   89054:	f104 0410 	add.w	r4, r4, #16
   89058:	bd10      	pop	{r4, pc}
   8905a:	bf00      	nop

0008905c <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	return Is_udd_endpoint_stall_requested(ep_index);
   8905c:	f000 000f 	and.w	r0, r0, #15
   89060:	f24c 13c0 	movw	r3, #49600	; 0xc1c0
   89064:	f2c4 030a 	movt	r3, #16394	; 0x400a
   89068:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
}
   8906c:	f3c1 40c0 	ubfx	r0, r1, #19, #1
   89070:	4770      	bx	lr
   89072:	bf00      	nop

00089074 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   89074:	b430      	push	{r4, r5}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   89076:	f000 030f 	and.w	r3, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
   8907a:	2b05      	cmp	r3, #5
   8907c:	d87a      	bhi.n	89174 <udd_ep_set_halt+0x100>
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   8907e:	f24c 12c0 	movw	r2, #49600	; 0xc1c0
   89082:	f2c4 020a 	movt	r2, #16394	; 0x400a
   89086:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   8908a:	f411 2f00 	tst.w	r1, #524288	; 0x80000
   8908e:	d174      	bne.n	8917a <udd_ep_set_halt+0x106>


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   89090:	f103 34ff 	add.w	r4, r3, #4294967295
   89094:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   89098:	f241 6148 	movw	r1, #5704	; 0x1648
   8909c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   890a0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   890a4:	7d11      	ldrb	r1, [r2, #20]
   890a6:	f001 0404 	and.w	r4, r1, #4
   890aa:	b2e4      	uxtb	r4, r4
   890ac:	2c00      	cmp	r4, #0
   890ae:	d167      	bne.n	89180 <udd_ep_set_halt+0x10c>
		return true; // Already STALL
	}

	if (ptr_job->busy == true) {
   890b0:	f011 0f01 	tst.w	r1, #1
   890b4:	d167      	bne.n	89186 <udd_ep_set_halt+0x112>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   890b6:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   890ba:	f1d5 0501 	rsbs	r5, r5, #1
   890be:	bf38      	it	cc
   890c0:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   890c2:	b672      	cpsid	i
   890c4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   890c8:	f240 2198 	movw	r1, #664	; 0x298
   890cc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   890d0:	700c      	strb	r4, [r1, #0]
		return false; // Job on going, stall impossible
	}

	flags = cpu_irq_save();
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   890d2:	f010 0f80 	tst.w	r0, #128	; 0x80
   890d6:	d027      	beq.n	89128 <udd_ep_set_halt+0xb4>
   890d8:	f24c 1030 	movw	r0, #49456	; 0xc130
   890dc:	f2c4 000a 	movt	r0, #16394	; 0x400a
   890e0:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   890e4:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   890e8:	d01e      	beq.n	89128 <udd_ep_set_halt+0xb4>
		// Delay the stall after the end of IN transfer on USB line
		ptr_job->stall_requested = true;
   890ea:	7d10      	ldrb	r0, [r2, #20]
   890ec:	f040 0104 	orr.w	r1, r0, #4
   890f0:	7511      	strb	r1, [r2, #20]
#ifdef UDD_EP_FIFO_SUPPORTED
		udd_disable_in_send_interrupt(ep_index);
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
   890f2:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   890f6:	f2c4 000a 	movt	r0, #16394	; 0x400a
   890fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   890fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
   89102:	fa02 f303 	lsl.w	r3, r2, r3
   89106:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   8910a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8910e:	618b      	str	r3, [r1, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   89110:	b3e5      	cbz	r5, 8918c <udd_ep_set_halt+0x118>
		cpu_irq_enable();
   89112:	f04f 0001 	mov.w	r0, #1
   89116:	f240 2298 	movw	r2, #664	; 0x298
   8911a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8911e:	7010      	strb	r0, [r2, #0]
   89120:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   89124:	b662      	cpsie	i
   89126:	e036      	b.n	89196 <udd_ep_set_halt+0x122>
		cpu_irq_restore(flags);
		return true;
	}
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   89128:	f44f 4241 	mov.w	r2, #49408	; 0xc100
   8912c:	f2c4 020a 	movt	r2, #16394	; 0x400a
   89130:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   89134:	f420 7100 	bic.w	r1, r0, #512	; 0x200
   89138:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_ack_stall(ep_index);
   8913c:	f24c 1260 	movw	r2, #49504	; 0xc160
   89140:	f2c4 020a 	movt	r2, #16394	; 0x400a
   89144:	f04f 0040 	mov.w	r0, #64	; 0x40
   89148:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   8914c:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   89150:	f2c4 020a 	movt	r2, #16394	; 0x400a
   89154:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   89158:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8915c:	b1cd      	cbz	r5, 89192 <udd_ep_set_halt+0x11e>
		cpu_irq_enable();
   8915e:	f04f 0001 	mov.w	r0, #1
   89162:	f240 2398 	movw	r3, #664	; 0x298
   89166:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8916a:	7018      	strb	r0, [r3, #0]
   8916c:	f3bf 8f5f 	dmb	sy
   89170:	b662      	cpsie	i
   89172:	e010      	b.n	89196 <udd_ep_set_halt+0x122>
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
   89174:	f04f 0000 	mov.w	r0, #0
   89178:	e00d      	b.n	89196 <udd_ep_set_halt+0x122>
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
   8917a:	f04f 0001 	mov.w	r0, #1
   8917e:	e00a      	b.n	89196 <udd_ep_set_halt+0x122>
   89180:	f04f 0001 	mov.w	r0, #1
   89184:	e007      	b.n	89196 <udd_ep_set_halt+0x122>
	}

	if (ptr_job->busy == true) {
		return false; // Job on going, stall impossible
   89186:	f04f 0000 	mov.w	r0, #0
   8918a:	e004      	b.n	89196 <udd_ep_set_halt+0x122>
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
   8918c:	f04f 0001 	mov.w	r0, #1
   89190:	e001      	b.n	89196 <udd_ep_set_halt+0x122>
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
	udd_ack_stall(ep_index);
	udd_enable_stall_handshake(ep_index);
	cpu_irq_restore(flags);
	return true;
   89192:	f04f 0001 	mov.w	r0, #1
}
   89196:	bc30      	pop	{r4, r5}
   89198:	4770      	bx	lr
   8919a:	bf00      	nop

0008919c <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   8919c:	b508      	push	{r3, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8919e:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
   891a2:	2805      	cmp	r0, #5
   891a4:	d85f      	bhi.n	89266 <udd_ep_clear_halt+0xca>


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   891a6:	f100 33ff 	add.w	r3, r0, #4294967295
   891aa:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   891ae:	f241 6248 	movw	r2, #5704	; 0x1648
   891b2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   891b6:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;

	if (ptr_job->stall_requested) {
   891ba:	7d19      	ldrb	r1, [r3, #20]
   891bc:	f001 0204 	and.w	r2, r1, #4
   891c0:	b2d1      	uxtb	r1, r2
   891c2:	2900      	cmp	r1, #0
   891c4:	d055      	beq.n	89272 <udd_ep_clear_halt+0xd6>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
   891c6:	7d1a      	ldrb	r2, [r3, #20]
   891c8:	f36f 0282 	bfc	r2, #2, #1
   891cc:	751a      	strb	r2, [r3, #20]
		udd_disable_bank_interrupt(ep_index);
   891ce:	f24c 2120 	movw	r1, #49696	; 0xc220
   891d2:	f2c4 010a 	movt	r1, #16394	; 0x400a
   891d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   891da:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
   891de:	fa02 f100 	lsl.w	r1, r2, r0
   891e2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   891e6:	f2c4 020a 	movt	r2, #16394	; 0x400a
   891ea:	6151      	str	r1, [r2, #20]
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   891ec:	ea4f 0280 	mov.w	r2, r0, lsl #2
   891f0:	f24c 11c0 	movw	r1, #49600	; 0xc1c0
   891f4:	f2c4 010a 	movt	r1, #16394	; 0x400a
   891f8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   891fc:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   89200:	d024      	beq.n	8924c <udd_ep_clear_halt+0xb0>
		if (Is_udd_stall(ep_index)) {
   89202:	f24c 1130 	movw	r1, #49456	; 0xc130
   89206:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8920a:	5850      	ldr	r0, [r2, r1]
   8920c:	f010 0f40 	tst.w	r0, #64	; 0x40
   89210:	d00d      	beq.n	8922e <udd_ep_clear_halt+0x92>
			udd_ack_stall(ep_index);
   89212:	f24c 1160 	movw	r1, #49504	; 0xc160
   89216:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8921a:	f04f 0040 	mov.w	r0, #64	; 0x40
   8921e:	5050      	str	r0, [r2, r1]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep_index);
   89220:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   89224:	f2c4 010a 	movt	r1, #16394	; 0x400a
   89228:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   8922c:	5050      	str	r0, [r2, r1]
		}
		// Disable stall
		udd_disable_stall_handshake(ep_index);
   8922e:	f24c 2120 	movw	r1, #49696	; 0xc220
   89232:	f2c4 010a 	movt	r1, #16394	; 0x400a
   89236:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   8923a:	5050      	str	r0, [r2, r1]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   8923c:	f44f 4141 	mov.w	r1, #49408	; 0xc100
   89240:	f2c4 010a 	movt	r1, #16394	; 0x400a
   89244:	5850      	ldr	r0, [r2, r1]
   89246:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   8924a:	5050      	str	r0, [r2, r1]
		b_stall_cleared = true;
	}
	if (b_stall_cleared) {
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   8924c:	7d1a      	ldrb	r2, [r3, #20]
   8924e:	f012 0f01 	tst.w	r2, #1
   89252:	d00b      	beq.n	8926c <udd_ep_clear_halt+0xd0>
			ptr_job->busy = false;
   89254:	7d19      	ldrb	r1, [r3, #20]
   89256:	f36f 0100 	bfc	r1, #0, #1
   8925a:	7519      	strb	r1, [r3, #20]
			ptr_job->call_nohalt();
   8925c:	681b      	ldr	r3, [r3, #0]
   8925e:	4798      	blx	r3
		}
	}
	return true;
   89260:	f04f 0001 	mov.w	r0, #1
   89264:	bd08      	pop	{r3, pc}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;
   89266:	f04f 0000 	mov.w	r0, #0
   8926a:	bd08      	pop	{r3, pc}
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   8926c:	f04f 0001 	mov.w	r0, #1
   89270:	bd08      	pop	{r3, pc}
		ptr_job->stall_requested = false;
		udd_disable_bank_interrupt(ep_index);
		udd_disable_endpoint_interrupt(ep_index);
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   89272:	ea4f 0280 	mov.w	r2, r0, lsl #2
   89276:	f24c 11c0 	movw	r1, #49600	; 0xc1c0
   8927a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8927e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   89282:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   89286:	d1bc      	bne.n	89202 <udd_ep_clear_halt+0x66>
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   89288:	f04f 0001 	mov.w	r0, #1
}
   8928c:	bd08      	pop	{r3, pc}
   8928e:	bf00      	nop

00089290 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   89290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
#endif
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   89292:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   89296:	2805      	cmp	r0, #5
   89298:	d86c      	bhi.n	89374 <udd_ep_run+0xe4>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
   8929a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   8929e:	f2c4 040a 	movt	r4, #16394	; 0x400a
   892a2:	69e4      	ldr	r4, [r4, #28]
   892a4:	f04f 0501 	mov.w	r5, #1
   892a8:	fa05 f500 	lsl.w	r5, r5, r0
   892ac:	4225      	tst	r5, r4
   892ae:	d064      	beq.n	8937a <udd_ep_run+0xea>
			|| Is_udd_endpoint_stall_requested(ep)
   892b0:	f24c 14c0 	movw	r4, #49600	; 0xc1c0
   892b4:	f2c4 040a 	movt	r4, #16394	; 0x400a
   892b8:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   892bc:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   892c0:	d15e      	bne.n	89380 <udd_ep_run+0xf0>
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   892c2:	f100 35ff 	add.w	r5, r0, #4294967295
   892c6:	eb05 0645 	add.w	r6, r5, r5, lsl #1
   892ca:	f241 6448 	movw	r4, #5704	; 0x1648
   892ce:	f2c2 0407 	movt	r4, #8199	; 0x2007
   892d2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
   892d6:	7d25      	ldrb	r5, [r4, #20]
   892d8:	f005 0604 	and.w	r6, r5, #4
   892dc:	b2f6      	uxtb	r6, r6
   892de:	2e00      	cmp	r6, #0
   892e0:	d151      	bne.n	89386 <udd_ep_run+0xf6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   892e2:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   892e6:	f1d7 0601 	rsbs	r6, r7, #1
   892ea:	bf38      	it	cc
   892ec:	2600      	movcc	r6, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   892ee:	b672      	cpsid	i
   892f0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   892f4:	f240 2798 	movw	r7, #664	; 0x298
   892f8:	f2c2 0707 	movt	r7, #8199	; 0x2007
   892fc:	f04f 0c00 	mov.w	ip, #0
   89300:	f887 c000 	strb.w	ip, [r7]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
   89304:	f015 0f01 	tst.w	r5, #1
   89308:	d009      	beq.n	8931e <udd_ep_run+0x8e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8930a:	2e00      	cmp	r6, #0
   8930c:	d03e      	beq.n	8938c <udd_ep_run+0xfc>
		cpu_irq_enable();
   8930e:	f04f 0301 	mov.w	r3, #1
   89312:	703b      	strb	r3, [r7, #0]
   89314:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   89318:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
   8931a:	4660      	mov	r0, ip
   8931c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	ptr_job->busy = true;
   8931e:	7d25      	ldrb	r5, [r4, #20]
   89320:	f045 0501 	orr.w	r5, r5, #1
   89324:	7525      	strb	r5, [r4, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   89326:	b14e      	cbz	r6, 8933c <udd_ep_run+0xac>
		cpu_irq_enable();
   89328:	f240 2598 	movw	r5, #664	; 0x298
   8932c:	f2c2 0507 	movt	r5, #8199	; 0x2007
   89330:	f04f 0601 	mov.w	r6, #1
   89334:	702e      	strb	r6, [r5, #0]
   89336:	f3bf 8f5f 	dmb	sy
   8933a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   8933c:	6062      	str	r2, [r4, #4]
	ptr_job->buf_size = buf_size;
   8933e:	60a3      	str	r3, [r4, #8]
	ptr_job->buf_cnt = 0;
   89340:	f04f 0200 	mov.w	r2, #0
   89344:	60e2      	str	r2, [r4, #12]
	ptr_job->buf_load = 0;
   89346:	6122      	str	r2, [r4, #16]
	ptr_job->call_trans = callback;
   89348:	9a06      	ldr	r2, [sp, #24]
   8934a:	6022      	str	r2, [r4, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   8934c:	b921      	cbnz	r1, 89358 <udd_ep_run+0xc8>
   8934e:	f1d3 0301 	rsbs	r3, r3, #1
   89352:	bf38      	it	cc
   89354:	2300      	movcc	r3, #0
   89356:	e001      	b.n	8935c <udd_ep_run+0xcc>
   89358:	f04f 0301 	mov.w	r3, #1
   8935c:	7d21      	ldrb	r1, [r4, #20]
   8935e:	f363 0141 	bfi	r1, r3, #1, #1
   89362:	7521      	strb	r1, [r4, #20]
#endif // UDD_EP_FIFO_SUPPORTED

#ifdef UDD_EP_DMA_SUPPORTED
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
   89364:	f647 7281 	movw	r2, #32641	; 0x7f81
   89368:	f2c0 0208 	movt	r2, #8
   8936c:	4790      	blx	r2
	return true;
   8936e:	f04f 0001 	mov.w	r0, #1
   89372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
   89374:	f04f 0000 	mov.w	r0, #0
   89378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
   8937a:	f04f 0000 	mov.w	r0, #0
   8937e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89380:	f04f 0000 	mov.w	r0, #0
   89384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89386:	f04f 0000 	mov.w	r0, #0
   8938a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
   8938c:	f04f 0000 	mov.w	r0, #0
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
	return true;
#endif
}
   89390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89392:	bf00      	nop

00089394 <udd_ep_alloc>:


#if (0 != USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   89394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89398:	b085      	sub	sp, #20
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
   8939a:	f000 040f 	and.w	r4, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
   8939e:	2c05      	cmp	r4, #5
   893a0:	f200 8101 	bhi.w	895a6 <udd_ep_alloc+0x212>
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
   893a4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   893a8:	f2c4 030a 	movt	r3, #16394	; 0x400a
   893ac:	69db      	ldr	r3, [r3, #28]
   893ae:	f04f 0501 	mov.w	r5, #1
   893b2:	fa05 f504 	lsl.w	r5, r5, r4
   893b6:	421d      	tst	r5, r3
   893b8:	f040 80f8 	bne.w	895ac <udd_ep_alloc+0x218>
		return false;
	}
	dbg_print("alloc(%x, %d) ", ep, MaxEndpointSize);

	// Bank choise
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   893bc:	f001 0303 	and.w	r3, r1, #3
   893c0:	2b02      	cmp	r3, #2
   893c2:	d006      	beq.n	893d2 <udd_ep_alloc+0x3e>
   893c4:	2b03      	cmp	r3, #3
   893c6:	f000 80fd 	beq.w	895c4 <udd_ep_alloc+0x230>
   893ca:	2b01      	cmp	r3, #1
   893cc:	f040 80f1 	bne.w	895b2 <udd_ep_alloc+0x21e>
   893d0:	e007      	b.n	893e2 <udd_ep_alloc+0x4e>
		break;
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
		break;
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   893d2:	f1a4 0604 	sub.w	r6, r4, #4
   893d6:	b2f5      	uxtb	r5, r6
		Assert(false);
		return false;
	}
	switch (nb_bank) {
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   893d8:	2d01      	cmp	r5, #1
   893da:	bf94      	ite	ls
   893dc:	2500      	movls	r5, #0
   893de:	2501      	movhi	r5, #1
   893e0:	e001      	b.n	893e6 <udd_ep_alloc+0x52>
				UOTGHS_DEVEPTCFG_EPBK_Pos;
		break;
	case 2:
		bank = UOTGHS_DEVEPTCFG_EPBK_2_BANK >>
   893e2:	f04f 0501 	mov.w	r5, #1
	Assert((MaxEndpointSize == 1023)
		|| !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   893e6:	f44f 4741 	mov.w	r7, #49408	; 0xc100
   893ea:	f2c4 070a 	movt	r7, #16394	; 0x400a
   893ee:	eb07 0684 	add.w	r6, r7, r4, lsl #2
   893f2:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   893f6:	f423 57cb 	bic.w	r7, r3, #6496	; 0x1960
   893fa:	f027 071c 	bic.w	r7, r7, #28
   893fe:	ea4f 21c1 	mov.w	r1, r1, lsl #11
   89402:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
   89406:	f000 0080 	and.w	r0, r0, #128	; 0x80
   8940a:	2800      	cmp	r0, #0
   8940c:	bf14      	ite	ne
   8940e:	f44f 7080 	movne.w	r0, #256	; 0x100
   89412:	2000      	moveq	r0, #0
   89414:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
   89418:	b29b      	uxth	r3, r3
   8941a:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   8941e:	d306      	bcc.n	8942e <udd_ep_alloc+0x9a>
   89420:	2a08      	cmp	r2, #8
   89422:	d907      	bls.n	89434 <udd_ep_alloc+0xa0>
   89424:	ea4f 0342 	mov.w	r3, r2, lsl #1
   89428:	f103 32ff 	add.w	r2, r3, #4294967295
   8942c:	e004      	b.n	89438 <udd_ep_alloc+0xa4>
   8942e:	f240 72ff 	movw	r2, #2047	; 0x7ff
   89432:	e001      	b.n	89438 <udd_ep_alloc+0xa4>
   89434:	f04f 020f 	mov.w	r2, #15
   89438:	fab2 f282 	clz	r2, r2
   8943c:	ea41 0585 	orr.w	r5, r1, r5, lsl #2
   89440:	4305      	orrs	r5, r0
   89442:	f1c2 011c 	rsb	r1, r2, #28
   89446:	ea45 1001 	orr.w	r0, r5, r1, lsl #4
   8944a:	f641 1374 	movw	r3, #6516	; 0x1974
   8944e:	4003      	ands	r3, r0
   89450:	433b      	orrs	r3, r7
   89452:	6033      	str	r3, [r6, #0]
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
   89454:	f04f 0601 	mov.w	r6, #1
   89458:	fa06 f604 	lsl.w	r6, r6, r4
   8945c:	b2b7      	uxth	r7, r6

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   8945e:	2c04      	cmp	r4, #4
   89460:	f200 80b3 	bhi.w	895ca <udd_ep_alloc+0x236>
   89464:	f24c 1114 	movw	r1, #49428	; 0xc114
   89468:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8946c:	f04f 0305 	mov.w	r3, #5
		if (Is_udd_endpoint_enabled(i)) {
   89470:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   89474:	f2c4 020a 	movt	r2, #16394	; 0x400a
   89478:	f04f 0001 	mov.w	r0, #1
   8947c:	ea6f 0504 	mvn.w	r5, r4
   89480:	18ee      	adds	r6, r5, r3
   89482:	ea06 0c00 	and.w	ip, r6, r0
   89486:	69d6      	ldr	r6, [r2, #28]
   89488:	fa00 f503 	lsl.w	r5, r0, r3
   8948c:	4235      	tst	r5, r6
   8948e:	f000 81c3 	beq.w	89818 <udd_ep_alloc+0x484>
   89492:	e1b5      	b.n	89800 <udd_ep_alloc+0x46c>
   89494:	46a0      	mov	r8, r4
   89496:	e7ff      	b.n	89498 <udd_ep_alloc+0x104>
   89498:	69d4      	ldr	r4, [r2, #28]
   8949a:	fa00 f603 	lsl.w	r6, r0, r3
   8949e:	4226      	tst	r6, r4
   894a0:	d009      	beq.n	894b6 <udd_ep_alloc+0x122>
			ep_allocated |= 1 << i;
   894a2:	4337      	orrs	r7, r6
   894a4:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   894a6:	69d4      	ldr	r4, [r2, #28]
   894a8:	ea24 0606 	bic.w	r6, r4, r6
   894ac:	61d6      	str	r6, [r2, #28]
			udd_unallocate_memory(i);
   894ae:	680d      	ldr	r5, [r1, #0]
   894b0:	f025 0402 	bic.w	r4, r5, #2
   894b4:	600c      	str	r4, [r1, #0]
   894b6:	f103 33ff 	add.w	r3, r3, #4294967295
   894ba:	f1a1 0904 	sub.w	r9, r1, #4
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
   894be:	69d4      	ldr	r4, [r2, #28]
   894c0:	fa00 f503 	lsl.w	r5, r0, r3
   894c4:	4225      	tst	r5, r4
   894c6:	f000 81dc 	beq.w	89882 <udd_ep_alloc+0x4ee>
   894ca:	e1cc      	b.n	89866 <udd_ep_alloc+0x4d2>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
   894cc:	fa47 f004 	asr.w	r0, r7, r4
   894d0:	f010 0f01 	tst.w	r0, #1
   894d4:	d05a      	beq.n	8958c <udd_ep_alloc+0x1f8>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   894d6:	f104 33ff 	add.w	r3, r4, #4294967295
   894da:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   894de:	eb09 05cc 	add.w	r5, r9, ip, lsl #3
			bool b_restart = ptr_job->busy;
   894e2:	7d29      	ldrb	r1, [r5, #20]
   894e4:	f001 0201 	and.w	r2, r1, #1
   894e8:	9203      	str	r2, [sp, #12]
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   894ea:	f36f 0100 	bfc	r1, #0, #1
   894ee:	7529      	strb	r1, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   894f0:	ea4f 0184 	mov.w	r1, r4, lsl #2
   894f4:	198a      	adds	r2, r1, r6
   894f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   894fa:	f040 0302 	orr.w	r3, r0, #2
   894fe:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			udd_enable_endpoint(i);
   89502:	f8d8 301c 	ldr.w	r3, [r8, #28]
   89506:	f04f 0001 	mov.w	r0, #1
   8950a:	fa00 fb04 	lsl.w	fp, r0, r4
   8950e:	ea4b 0303 	orr.w	r3, fp, r3
   89512:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   89516:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
   8951a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   8951e:	d110      	bne.n	89542 <udd_ep_alloc+0x1ae>
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
   89520:	682b      	ldr	r3, [r5, #0]
   89522:	2b00      	cmp	r3, #0
   89524:	d048      	beq.n	895b8 <udd_ep_alloc+0x224>
					return false;
				}
				if (Is_udd_endpoint_in(i)) {
   89526:	6811      	ldr	r1, [r2, #0]
   89528:	f411 7f80 	tst.w	r1, #256	; 0x100
					i |= USB_EP_DIR_IN;
   8952c:	bf18      	it	ne
   8952e:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   89532:	f04f 0001 	mov.w	r0, #1
   89536:	68e9      	ldr	r1, [r5, #12]
   89538:	4622      	mov	r2, r4
   8953a:	4798      	blx	r3
						ptr_job->buf_cnt, i);
				return false;
   8953c:	f04f 0000 	mov.w	r0, #0
   89540:	e05d      	b.n	895fe <udd_ep_alloc+0x26a>
			}
			udd_enable_endpoint_bank_autoswitch(i);
   89542:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   89546:	f442 7300 	orr.w	r3, r2, #512	; 0x200
   8954a:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			if (b_restart) {
   8954e:	9a03      	ldr	r2, [sp, #12]
   89550:	b1e2      	cbz	r2, 8958c <udd_ep_alloc+0x1f8>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   89552:	68ea      	ldr	r2, [r5, #12]
   89554:	692b      	ldr	r3, [r5, #16]
   89556:	1ad3      	subs	r3, r2, r3
   89558:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8955a:	5989      	ldr	r1, [r1, r6]
   8955c:	f411 7f80 	tst.w	r1, #256	; 0x100
   89560:	bf14      	ite	ne
   89562:	f044 0080 	orrne.w	r0, r4, #128	; 0x80
   89566:	4620      	moveq	r0, r4
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   89568:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8956a:	f8d5 e004 	ldr.w	lr, [r5, #4]
   8956e:	68ad      	ldr	r5, [r5, #8]
   89570:	f859 203c 	ldr.w	r2, [r9, ip, lsl #3]
   89574:	9200      	str	r2, [sp, #0]
   89576:	f3c1 0140 	ubfx	r1, r1, #1, #1
   8957a:	eb0e 0203 	add.w	r2, lr, r3
   8957e:	1aeb      	subs	r3, r5, r3
   89580:	f249 2591 	movw	r5, #37521	; 0x9291
   89584:	f2c0 0508 	movt	r5, #8
   89588:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   8958a:	b1c0      	cbz	r0, 895be <udd_ep_alloc+0x22a>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   8958c:	f104 0401 	add.w	r4, r4, #1
   89590:	b2e4      	uxtb	r4, r4
		if (ep_allocated & (1 << i)) {
   89592:	fa47 f004 	asr.w	r0, r7, r4
   89596:	f010 0f01 	tst.w	r0, #1
   8959a:	f000 812a 	beq.w	897f2 <udd_ep_alloc+0x45e>
   8959e:	e0d9      	b.n	89754 <udd_ep_alloc+0x3c0>
					return false;
				}
			}
		}
	}
	return true;
   895a0:	f04f 0001 	mov.w	r0, #1
   895a4:	e02b      	b.n	895fe <udd_ep_alloc+0x26a>

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
   895a6:	f04f 0000 	mov.w	r0, #0
   895aa:	e028      	b.n	895fe <udd_ep_alloc+0x26a>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
   895ac:	f04f 0000 	mov.w	r0, #0
   895b0:	e025      	b.n	895fe <udd_ep_alloc+0x26a>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
		break;
	default:
		Assert(false);
		return false;
   895b2:	f04f 0000 	mov.w	r0, #0
   895b6:	e022      	b.n	895fe <udd_ep_alloc+0x26a>
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i)) {
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
					return false;
   895b8:	f04f 0000 	mov.w	r0, #0
   895bc:	e01f      	b.n	895fe <udd_ep_alloc+0x26a>
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
					dbg_print("ErrReRun%d ", i);
					return false;
   895be:	f04f 0000 	mov.w	r0, #0
   895c2:	e01c      	b.n	895fe <udd_ep_alloc+0x26a>
		Assert(false);
		return false;
	}
	switch (nb_bank) {
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   895c4:	f04f 0500 	mov.w	r5, #0
   895c8:	e70d      	b.n	893e6 <udd_ep_alloc+0x52>
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   895ca:	f241 6948 	movw	r9, #5704	; 0x1648
   895ce:	f2c2 0907 	movt	r9, #8199	; 0x2007
			bool b_restart = ptr_job->busy;
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
			// Re-allocate memory
			udd_allocate_memory(i);
   895d2:	f44f 4641 	mov.w	r6, #49408	; 0xc100
   895d6:	f2c4 060a 	movt	r6, #16394	; 0x400a
			udd_enable_endpoint(i);
   895da:	f44f 4840 	mov.w	r8, #49152	; 0xc000
   895de:	f2c4 080a 	movt	r8, #16394	; 0x400a
			if (!Is_udd_endpoint_configured(i)) {
   895e2:	f24c 1a30 	movw	sl, #49456	; 0xc130
   895e6:	f2c4 0a0a 	movt	sl, #16394	; 0x400a
   895ea:	f1c4 0b05 	rsb	fp, r4, #5
   895ee:	f00b 0b01 	and.w	fp, fp, #1
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
   895f2:	fa47 f204 	asr.w	r2, r7, r4
   895f6:	f012 0f01 	tst.w	r2, #1
   895fa:	d04c      	beq.n	89696 <udd_ep_alloc+0x302>
   895fc:	e002      	b.n	89604 <udd_ep_alloc+0x270>
				}
			}
		}
	}
	return true;
}
   895fe:	b005      	add	sp, #20
   89600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   89604:	f104 30ff 	add.w	r0, r4, #4294967295
   89608:	eb00 0540 	add.w	r5, r0, r0, lsl #1
   8960c:	eb09 05c5 	add.w	r5, r9, r5, lsl #3
			bool b_restart = ptr_job->busy;
   89610:	7d2b      	ldrb	r3, [r5, #20]
   89612:	f003 0c01 	and.w	ip, r3, #1
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   89616:	f36f 0300 	bfc	r3, #0, #1
   8961a:	752b      	strb	r3, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   8961c:	ea4f 0384 	mov.w	r3, r4, lsl #2
   89620:	199a      	adds	r2, r3, r6
   89622:	6811      	ldr	r1, [r2, #0]
   89624:	f041 0002 	orr.w	r0, r1, #2
   89628:	6010      	str	r0, [r2, #0]
			udd_enable_endpoint(i);
   8962a:	f8d8 101c 	ldr.w	r1, [r8, #28]
   8962e:	f04f 0001 	mov.w	r0, #1
   89632:	fa00 f004 	lsl.w	r0, r0, r4
   89636:	4301      	orrs	r1, r0
   89638:	f8c8 101c 	str.w	r1, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   8963c:	4453      	add	r3, sl
   8963e:	6818      	ldr	r0, [r3, #0]
   89640:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   89644:	f43f af6c 	beq.w	89520 <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   89648:	6811      	ldr	r1, [r2, #0]
   8964a:	f441 7300 	orr.w	r3, r1, #512	; 0x200
   8964e:	6013      	str	r3, [r2, #0]
			if (b_restart) {
   89650:	f1bc 0f00 	cmp.w	ip, #0
   89654:	d01f      	beq.n	89696 <udd_ep_alloc+0x302>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   89656:	68e8      	ldr	r0, [r5, #12]
   89658:	6929      	ldr	r1, [r5, #16]
   8965a:	1a43      	subs	r3, r0, r1
   8965c:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8965e:	6812      	ldr	r2, [r2, #0]
   89660:	f412 7f80 	tst.w	r2, #256	; 0x100
   89664:	d012      	beq.n	8968c <udd_ep_alloc+0x2f8>
   89666:	e013      	b.n	89690 <udd_ep_alloc+0x2fc>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   89668:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8966a:	686a      	ldr	r2, [r5, #4]
   8966c:	f8d5 e008 	ldr.w	lr, [r5, #8]
   89670:	682d      	ldr	r5, [r5, #0]
   89672:	9500      	str	r5, [sp, #0]
   89674:	f3c1 0140 	ubfx	r1, r1, #1, #1
   89678:	18d2      	adds	r2, r2, r3
   8967a:	ebc3 030e 	rsb	r3, r3, lr
   8967e:	f249 2591 	movw	r5, #37521	; 0x9291
   89682:	f2c0 0508 	movt	r5, #8
   89686:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   89688:	b928      	cbnz	r0, 89696 <udd_ep_alloc+0x302>
   8968a:	e798      	b.n	895be <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8968c:	4620      	mov	r0, r4
   8968e:	e7eb      	b.n	89668 <udd_ep_alloc+0x2d4>
   89690:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   89694:	e7e8      	b.n	89668 <udd_ep_alloc+0x2d4>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   89696:	f104 0401 	add.w	r4, r4, #1
   8969a:	b2e4      	uxtb	r4, r4
   8969c:	2c06      	cmp	r4, #6
   8969e:	f43f af7f 	beq.w	895a0 <udd_ep_alloc+0x20c>
   896a2:	fa4f f08b 	sxtb.w	r0, fp
   896a6:	2800      	cmp	r0, #0
   896a8:	f43f af10 	beq.w	894cc <udd_ep_alloc+0x138>
		if (ep_allocated & (1 << i)) {
   896ac:	fa47 f304 	asr.w	r3, r7, r4
   896b0:	f013 0f01 	tst.w	r3, #1
   896b4:	d047      	beq.n	89746 <udd_ep_alloc+0x3b2>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   896b6:	f104 31ff 	add.w	r1, r4, #4294967295
   896ba:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   896be:	eb09 05c2 	add.w	r5, r9, r2, lsl #3
			bool b_restart = ptr_job->busy;
   896c2:	7d28      	ldrb	r0, [r5, #20]
   896c4:	f000 0101 	and.w	r1, r0, #1
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   896c8:	f36f 0000 	bfc	r0, #0, #1
   896cc:	7528      	strb	r0, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   896ce:	ea4f 0384 	mov.w	r3, r4, lsl #2
   896d2:	199a      	adds	r2, r3, r6
   896d4:	6810      	ldr	r0, [r2, #0]
   896d6:	f040 0002 	orr.w	r0, r0, #2
   896da:	6010      	str	r0, [r2, #0]
			udd_enable_endpoint(i);
   896dc:	f8d8 001c 	ldr.w	r0, [r8, #28]
   896e0:	f04f 0b01 	mov.w	fp, #1
   896e4:	fa0b fc04 	lsl.w	ip, fp, r4
   896e8:	ea4c 0000 	orr.w	r0, ip, r0
   896ec:	f8c8 001c 	str.w	r0, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   896f0:	4453      	add	r3, sl
   896f2:	6818      	ldr	r0, [r3, #0]
   896f4:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   896f8:	f43f af12 	beq.w	89520 <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   896fc:	6813      	ldr	r3, [r2, #0]
   896fe:	f443 7000 	orr.w	r0, r3, #512	; 0x200
   89702:	6010      	str	r0, [r2, #0]
			if (b_restart) {
   89704:	b1f9      	cbz	r1, 89746 <udd_ep_alloc+0x3b2>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   89706:	68e9      	ldr	r1, [r5, #12]
   89708:	692b      	ldr	r3, [r5, #16]
   8970a:	1acb      	subs	r3, r1, r3
   8970c:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8970e:	6812      	ldr	r2, [r2, #0]
   89710:	f412 7f80 	tst.w	r2, #256	; 0x100
   89714:	d012      	beq.n	8973c <udd_ep_alloc+0x3a8>
   89716:	e013      	b.n	89740 <udd_ep_alloc+0x3ac>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   89718:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8971a:	686a      	ldr	r2, [r5, #4]
   8971c:	f8d5 e008 	ldr.w	lr, [r5, #8]
   89720:	682d      	ldr	r5, [r5, #0]
   89722:	9500      	str	r5, [sp, #0]
   89724:	f3c1 0140 	ubfx	r1, r1, #1, #1
   89728:	18d2      	adds	r2, r2, r3
   8972a:	ebc3 030e 	rsb	r3, r3, lr
   8972e:	f249 2591 	movw	r5, #37521	; 0x9291
   89732:	f2c0 0508 	movt	r5, #8
   89736:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   89738:	b928      	cbnz	r0, 89746 <udd_ep_alloc+0x3b2>
   8973a:	e740      	b.n	895be <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8973c:	4620      	mov	r0, r4
   8973e:	e7eb      	b.n	89718 <udd_ep_alloc+0x384>
   89740:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   89744:	e7e8      	b.n	89718 <udd_ep_alloc+0x384>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   89746:	f104 0401 	add.w	r4, r4, #1
   8974a:	b2e4      	uxtb	r4, r4
   8974c:	2c06      	cmp	r4, #6
   8974e:	f47f aebd 	bne.w	894cc <udd_ep_alloc+0x138>
   89752:	e725      	b.n	895a0 <udd_ep_alloc+0x20c>
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   89754:	f104 33ff 	add.w	r3, r4, #4294967295
   89758:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   8975c:	eb09 05cc 	add.w	r5, r9, ip, lsl #3
			bool b_restart = ptr_job->busy;
   89760:	7d29      	ldrb	r1, [r5, #20]
   89762:	f001 0201 	and.w	r2, r1, #1
   89766:	9203      	str	r2, [sp, #12]
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   89768:	f36f 0100 	bfc	r1, #0, #1
   8976c:	7529      	strb	r1, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   8976e:	ea4f 0184 	mov.w	r1, r4, lsl #2
   89772:	198a      	adds	r2, r1, r6
   89774:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   89778:	f040 0302 	orr.w	r3, r0, #2
   8977c:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			udd_enable_endpoint(i);
   89780:	f8d8 301c 	ldr.w	r3, [r8, #28]
   89784:	f04f 0001 	mov.w	r0, #1
   89788:	fa00 fb04 	lsl.w	fp, r0, r4
   8978c:	ea4b 0303 	orr.w	r3, fp, r3
   89790:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   89794:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
   89798:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   8979c:	f43f aec0 	beq.w	89520 <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   897a0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   897a4:	f442 7300 	orr.w	r3, r2, #512	; 0x200
   897a8:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			if (b_restart) {
   897ac:	9803      	ldr	r0, [sp, #12]
   897ae:	b300      	cbz	r0, 897f2 <udd_ep_alloc+0x45e>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   897b0:	68ea      	ldr	r2, [r5, #12]
   897b2:	692b      	ldr	r3, [r5, #16]
   897b4:	1ad3      	subs	r3, r2, r3
   897b6:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   897b8:	5989      	ldr	r1, [r1, r6]
   897ba:	f411 7f80 	tst.w	r1, #256	; 0x100
   897be:	d013      	beq.n	897e8 <udd_ep_alloc+0x454>
   897c0:	e014      	b.n	897ec <udd_ep_alloc+0x458>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   897c2:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   897c4:	f8d5 e004 	ldr.w	lr, [r5, #4]
   897c8:	68ad      	ldr	r5, [r5, #8]
   897ca:	f859 203c 	ldr.w	r2, [r9, ip, lsl #3]
   897ce:	9200      	str	r2, [sp, #0]
   897d0:	f3c1 0140 	ubfx	r1, r1, #1, #1
   897d4:	eb0e 0203 	add.w	r2, lr, r3
   897d8:	1aeb      	subs	r3, r5, r3
   897da:	f249 2591 	movw	r5, #37521	; 0x9291
   897de:	f2c0 0508 	movt	r5, #8
   897e2:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   897e4:	b928      	cbnz	r0, 897f2 <udd_ep_alloc+0x45e>
   897e6:	e6ea      	b.n	895be <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   897e8:	4620      	mov	r0, r4
   897ea:	e7ea      	b.n	897c2 <udd_ep_alloc+0x42e>
   897ec:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   897f0:	e7e7      	b.n	897c2 <udd_ep_alloc+0x42e>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   897f2:	f104 0401 	add.w	r4, r4, #1
   897f6:	b2e4      	uxtb	r4, r4
   897f8:	2c06      	cmp	r4, #6
   897fa:	f47f ae67 	bne.w	894cc <udd_ep_alloc+0x138>
   897fe:	e6cf      	b.n	895a0 <udd_ep_alloc+0x20c>
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
   89800:	fa00 f603 	lsl.w	r6, r0, r3
   89804:	4337      	orrs	r7, r6
   89806:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   89808:	69d6      	ldr	r6, [r2, #28]
   8980a:	ea26 0505 	bic.w	r5, r6, r5
   8980e:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   89810:	680e      	ldr	r6, [r1, #0]
   89812:	f026 0502 	bic.w	r5, r6, #2
   89816:	600d      	str	r5, [r1, #0]
   89818:	f103 33ff 	add.w	r3, r3, #4294967295
   8981c:	f1a1 0104 	sub.w	r1, r1, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   89820:	b2dd      	uxtb	r5, r3
   89822:	42a5      	cmp	r5, r4
   89824:	f67f aed1 	bls.w	895ca <udd_ep_alloc+0x236>
   89828:	fa4f f68c 	sxtb.w	r6, ip
   8982c:	2e00      	cmp	r6, #0
   8982e:	f43f ae31 	beq.w	89494 <udd_ep_alloc+0x100>
		if (Is_udd_endpoint_enabled(i)) {
   89832:	69d6      	ldr	r6, [r2, #28]
   89834:	fa00 f503 	lsl.w	r5, r0, r3
   89838:	4235      	tst	r5, r6
   8983a:	d009      	beq.n	89850 <udd_ep_alloc+0x4bc>
			ep_allocated |= 1 << i;
   8983c:	432f      	orrs	r7, r5
   8983e:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   89840:	69d6      	ldr	r6, [r2, #28]
   89842:	ea26 0505 	bic.w	r5, r6, r5
   89846:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   89848:	680e      	ldr	r6, [r1, #0]
   8984a:	f026 0502 	bic.w	r5, r6, #2
   8984e:	600d      	str	r5, [r1, #0]
   89850:	f103 33ff 	add.w	r3, r3, #4294967295
   89854:	f1a1 0104 	sub.w	r1, r1, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   89858:	b2dd      	uxtb	r5, r3
   8985a:	42a5      	cmp	r5, r4
   8985c:	bf88      	it	hi
   8985e:	46a0      	movhi	r8, r4
   89860:	f63f ae1a 	bhi.w	89498 <udd_ep_alloc+0x104>
   89864:	e6b1      	b.n	895ca <udd_ep_alloc+0x236>
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
   89866:	fa00 f603 	lsl.w	r6, r0, r3
   8986a:	4337      	orrs	r7, r6
   8986c:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   8986e:	69d4      	ldr	r4, [r2, #28]
   89870:	ea24 0505 	bic.w	r5, r4, r5
   89874:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   89876:	f851 6c04 	ldr.w	r6, [r1, #-4]
   8987a:	f026 0402 	bic.w	r4, r6, #2
   8987e:	f841 4c04 	str.w	r4, [r1, #-4]
   89882:	f103 33ff 	add.w	r3, r3, #4294967295
   89886:	f1a9 0104 	sub.w	r1, r9, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   8988a:	b2dd      	uxtb	r5, r3
   8988c:	4545      	cmp	r5, r8
   8988e:	f63f ae03 	bhi.w	89498 <udd_ep_alloc+0x104>
   89892:	4644      	mov	r4, r8
   89894:	e699      	b.n	895ca <udd_ep_alloc+0x236>
   89896:	bf00      	nop

00089898 <udd_ep_abort>:
#endif
}


void udd_ep_abort(udd_ep_id_t ep)
{
   89898:	b538      	push	{r3, r4, r5, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8989a:	f000 030f 	and.w	r3, r0, #15
		udd_disable_in_send_interrupt(ep_index);
	} else
#endif
	{
		// Stop DMA transfer
		udd_disable_endpoint_dma_interrupt(ep_index);
   8989e:	f103 32ff 	add.w	r2, r3, #4294967295
   898a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   898a6:	fa01 f102 	lsl.w	r1, r1, r2
   898aa:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   898ae:	f2c4 020a 	movt	r2, #16394	; 0x400a
   898b2:	6151      	str	r1, [r2, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   898b4:	f44f 4443 	mov.w	r4, #49920	; 0xc300
   898b8:	f2c4 040a 	movt	r4, #16394	; 0x400a
   898bc:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   898c0:	f04f 0400 	mov.w	r4, #0
   898c4:	608c      	str	r4, [r1, #8]
	}
	udd_disable_endpoint_interrupt(ep_index);
   898c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   898ca:	fa01 f103 	lsl.w	r1, r1, r3
   898ce:	6151      	str	r1, [r2, #20]
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
   898d0:	f010 0f80 	tst.w	r0, #128	; 0x80
   898d4:	d01c      	beq.n	89910 <udd_ep_abort+0x78>
		while(udd_nb_busy_bank(ep_index)) {
   898d6:	ea4f 0383 	mov.w	r3, r3, lsl #2
   898da:	f24c 1530 	movw	r5, #49456	; 0xc130
   898de:	f2c4 050a 	movt	r5, #16394	; 0x400a
   898e2:	1959      	adds	r1, r3, r5
			udd_kill_last_in_bank(ep_index);
   898e4:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   898e8:	f2c4 020a 	movt	r2, #16394	; 0x400a
   898ec:	189c      	adds	r4, r3, r2
   898ee:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
   898f2:	f24c 12c0 	movw	r2, #49600	; 0xc1c0
   898f6:	f2c4 020a 	movt	r2, #16394	; 0x400a
   898fa:	189a      	adds	r2, r3, r2
   898fc:	e004      	b.n	89908 <udd_ep_abort+0x70>
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
			udd_kill_last_in_bank(ep_index);
   898fe:	6025      	str	r5, [r4, #0]
			while(Is_udd_kill_last(ep_index));
   89900:	6813      	ldr	r3, [r2, #0]
   89902:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   89906:	d1fb      	bne.n	89900 <udd_ep_abort+0x68>
		udd_endpoint_dma_set_control(ep_index, 0);
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
   89908:	680b      	ldr	r3, [r1, #0]
   8990a:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   8990e:	d1f6      	bne.n	898fe <udd_ep_abort+0x66>
			udd_kill_last_in_bank(ep_index);
			while(Is_udd_kill_last(ep_index));
		}
	}
	udd_ep_abort_job(ep);
   89910:	f647 7155 	movw	r1, #32597	; 0x7f55
   89914:	f2c0 0108 	movt	r1, #8
   89918:	4788      	blx	r1
   8991a:	bd38      	pop	{r3, r4, r5, pc}

0008991c <udd_ep_wait_stall_clear>:
}


bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
   8991c:	b510      	push	{r4, lr}
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   8991e:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   89922:	2805      	cmp	r0, #5
   89924:	d831      	bhi.n	8998a <udd_ep_wait_stall_clear+0x6e>
		return false;
	}

	ptr_job = &udd_ep_job[ep - 1];

	if (!Is_udd_endpoint_enabled(ep)) {
   89926:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8992a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8992e:	69db      	ldr	r3, [r3, #28]
   89930:	f04f 0201 	mov.w	r2, #1
   89934:	fa02 f200 	lsl.w	r2, r2, r0
   89938:	421a      	tst	r2, r3
   8993a:	d029      	beq.n	89990 <udd_ep_wait_stall_clear+0x74>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	ptr_job = &udd_ep_job[ep - 1];
   8993c:	f100 33ff 	add.w	r3, r0, #4294967295
   89940:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   89944:	f241 6248 	movw	r2, #5704	; 0x1648
   89948:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8994c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (!Is_udd_endpoint_enabled(ep)) {
		return false; // Endpoint not enabled
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
   89950:	7d1a      	ldrb	r2, [r3, #20]
   89952:	f012 0f01 	tst.w	r2, #1
   89956:	d11e      	bne.n	89996 <udd_ep_wait_stall_clear+0x7a>
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
   89958:	f24c 14c0 	movw	r4, #49600	; 0xc1c0
   8995c:	f2c4 040a 	movt	r4, #16394	; 0x400a
   89960:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   89964:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   89968:	d103      	bne.n	89972 <udd_ep_wait_stall_clear+0x56>
			|| ptr_job->stall_requested) {
   8996a:	f002 0204 	and.w	r2, r2, #4
   8996e:	b2d0      	uxtb	r0, r2
   89970:	b138      	cbz	r0, 89982 <udd_ep_wait_stall_clear+0x66>
		// Endpoint halted then registes the callback
		ptr_job->busy = true;
   89972:	7d1a      	ldrb	r2, [r3, #20]
   89974:	f042 0001 	orr.w	r0, r2, #1
   89978:	7518      	strb	r0, [r3, #20]
		ptr_job->call_nohalt = callback;
   8997a:	6019      	str	r1, [r3, #0]
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
   8997c:	f04f 0001 	mov.w	r0, #1

	if (Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		// Endpoint halted then registes the callback
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
   89980:	bd10      	pop	{r4, pc}
	} else {
		// endpoint not halted then call directly callback
		callback();
   89982:	4788      	blx	r1
	}
	return true;
   89984:	f04f 0001 	mov.w	r0, #1
   89988:	bd10      	pop	{r4, pc}
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
   8998a:	f04f 0000 	mov.w	r0, #0
   8998e:	bd10      	pop	{r4, pc}
	}

	ptr_job = &udd_ep_job[ep - 1];

	if (!Is_udd_endpoint_enabled(ep)) {
		return false; // Endpoint not enabled
   89990:	f04f 0000 	mov.w	r0, #0
   89994:	bd10      	pop	{r4, pc}
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
   89996:	f04f 0000 	mov.w	r0, #0
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
   8999a:	bd10      	pop	{r4, pc}

0008999c <udd_test_mode_j>:

#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
	udd_enable_hs_test_mode();
   8999c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   899a0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   899a4:	681a      	ldr	r2, [r3, #0]
   899a6:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   899aa:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   899ae:	6019      	str	r1, [r3, #0]
	udd_enable_hs_test_mode_j();
   899b0:	681a      	ldr	r2, [r3, #0]
   899b2:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
   899b6:	6018      	str	r0, [r3, #0]
   899b8:	4770      	bx	lr
   899ba:	bf00      	nop

000899bc <udd_test_mode_k>:
}


void udd_test_mode_k(void)
{
	udd_enable_hs_test_mode();
   899bc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   899c0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   899c4:	681a      	ldr	r2, [r3, #0]
   899c6:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   899ca:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   899ce:	6019      	str	r1, [r3, #0]
	udd_enable_hs_test_mode_k();
   899d0:	681a      	ldr	r2, [r3, #0]
   899d2:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   899d6:	6018      	str	r0, [r3, #0]
   899d8:	4770      	bx	lr
   899da:	bf00      	nop

000899dc <udd_test_mode_se0_nak>:
}


void udd_test_mode_se0_nak(void)
{
	udd_enable_hs_test_mode();
   899dc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   899e0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   899e4:	681a      	ldr	r2, [r3, #0]
   899e6:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   899ea:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   899ee:	6019      	str	r1, [r3, #0]
   899f0:	4770      	bx	lr
   899f2:	bf00      	nop

000899f4 <udd_test_mode_packet>:
}


void udd_test_mode_packet(void)
{
   899f4:	b470      	push	{r4, r5, r6}
   899f6:	b08f      	sub	sp, #60	; 0x3c
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   899f8:	f24f 4574 	movw	r5, #62580	; 0xf474
   899fc:	f2c0 0508 	movt	r5, #8
   89a00:	ac00      	add	r4, sp, #0
   89a02:	6828      	ldr	r0, [r5, #0]
   89a04:	6869      	ldr	r1, [r5, #4]
   89a06:	68aa      	ldr	r2, [r5, #8]
   89a08:	68eb      	ldr	r3, [r5, #12]
   89a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   89a0c:	f105 0510 	add.w	r5, r5, #16
   89a10:	4626      	mov	r6, r4
   89a12:	6828      	ldr	r0, [r5, #0]
   89a14:	6869      	ldr	r1, [r5, #4]
   89a16:	68aa      	ldr	r2, [r5, #8]
   89a18:	68eb      	ldr	r3, [r5, #12]
   89a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   89a1c:	6928      	ldr	r0, [r5, #16]
   89a1e:	6969      	ldr	r1, [r5, #20]
   89a20:	69aa      	ldr	r2, [r5, #24]
   89a22:	69eb      	ldr	r3, [r5, #28]
   89a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   89a26:	6a28      	ldr	r0, [r5, #32]
   89a28:	f846 0f20 	str.w	r0, [r6, #32]!
   89a2c:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   89a30:	f105 0520 	add.w	r5, r5, #32
   89a34:	7131      	strb	r1, [r6, #4]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   89a36:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   89a3a:	f2c4 040a 	movt	r4, #16394	; 0x400a
   89a3e:	69e2      	ldr	r2, [r4, #28]
   89a40:	f022 0301 	bic.w	r3, r2, #1
   89a44:	61e3      	str	r3, [r4, #28]
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
   89a46:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   89a4a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   89a4e:	6801      	ldr	r1, [r0, #0]
   89a50:	f421 52cb 	bic.w	r2, r1, #6496	; 0x1960
   89a54:	f022 031c 	bic.w	r3, r2, #28
   89a58:	f443 5189 	orr.w	r1, r3, #4384	; 0x1120
   89a5c:	f041 0210 	orr.w	r2, r1, #16
   89a60:	6002      	str	r2, [r0, #0]
			64, UOTGHS_DEVEPTCFG_EPBK_1_BANK);
	udd_allocate_memory(0);
   89a62:	6803      	ldr	r3, [r0, #0]
   89a64:	f043 0102 	orr.w	r1, r3, #2
   89a68:	6001      	str	r1, [r0, #0]
	udd_enable_endpoint(0);
   89a6a:	69e0      	ldr	r0, [r4, #28]
   89a6c:	f040 0201 	orr.w	r2, r0, #1
   89a70:	61e2      	str	r2, [r4, #28]

	udd_enable_hs_test_mode();
   89a72:	6823      	ldr	r3, [r4, #0]
   89a74:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
   89a78:	f441 6000 	orr.w	r0, r1, #2048	; 0x800
   89a7c:	6020      	str	r0, [r4, #0]
	udd_enable_hs_test_mode_packet();
   89a7e:	6822      	ldr	r2, [r4, #0]
   89a80:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
   89a84:	6023      	str	r3, [r4, #0]

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
   89a86:	f04f 0435 	mov.w	r4, #53	; 0x35
   89a8a:	f2c2 0418 	movt	r4, #8216	; 0x2018
   89a8e:	f10d 31ff 	add.w	r1, sp, #4294967295
		*ptr_dest++ = *ptr_src++;
   89a92:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   89a96:	f04f 0300 	mov.w	r3, #0
   89a9a:	f2c2 0318 	movt	r3, #8216	; 0x2018
   89a9e:	f803 0b01 	strb.w	r0, [r3], #1
   89aa2:	f101 0001 	add.w	r0, r1, #1
   89aa6:	7849      	ldrb	r1, [r1, #1]
   89aa8:	461a      	mov	r2, r3
   89aaa:	f802 1b01 	strb.w	r1, [r2], #1
   89aae:	f100 0101 	add.w	r1, r0, #1
   89ab2:	7840      	ldrb	r0, [r0, #1]
   89ab4:	7058      	strb	r0, [r3, #1]
   89ab6:	f102 0301 	add.w	r3, r2, #1

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
   89aba:	42a3      	cmp	r3, r4
   89abc:	d1f1      	bne.n	89aa2 <udd_test_mode_packet+0xae>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ack_fifocon(0);
   89abe:	f24c 2120 	movw	r1, #49696	; 0xc220
   89ac2:	f2c4 010a 	movt	r1, #16394	; 0x400a
   89ac6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   89aca:	600a      	str	r2, [r1, #0]
}
   89acc:	b00f      	add	sp, #60	; 0x3c
   89ace:	bc70      	pop	{r4, r5, r6}
   89ad0:	4770      	bx	lr
   89ad2:	bf00      	nop

00089ad4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   89ad4:	e7fe      	b.n	89ad4 <Dummy_Handler>
   89ad6:	bf00      	nop

00089ad8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   89ad8:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   89ada:	f240 0300 	movw	r3, #0
   89ade:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89ae2:	f24f 72bc 	movw	r2, #63420	; 0xf7bc
   89ae6:	f2c0 0208 	movt	r2, #8
   89aea:	429a      	cmp	r2, r3
   89aec:	d003      	beq.n	89af6 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   89aee:	4840      	ldr	r0, [pc, #256]	; (89bf0 <Reset_Handler+0x118>)
   89af0:	4940      	ldr	r1, [pc, #256]	; (89bf4 <Reset_Handler+0x11c>)
   89af2:	4281      	cmp	r1, r0
   89af4:	d304      	bcc.n	89b00 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   89af6:	4b40      	ldr	r3, [pc, #256]	; (89bf8 <Reset_Handler+0x120>)
   89af8:	4a40      	ldr	r2, [pc, #256]	; (89bfc <Reset_Handler+0x124>)
   89afa:	429a      	cmp	r2, r3
   89afc:	d325      	bcc.n	89b4a <Reset_Handler+0x72>
   89afe:	e042      	b.n	89b86 <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   89b00:	4d3f      	ldr	r5, [pc, #252]	; (89c00 <Reset_Handler+0x128>)
   89b02:	4c40      	ldr	r4, [pc, #256]	; (89c04 <Reset_Handler+0x12c>)
   89b04:	1b63      	subs	r3, r4, r5
   89b06:	f023 0503 	bic.w	r5, r3, #3
   89b0a:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   89b0e:	f240 0200 	movw	r2, #0
   89b12:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89b16:	f24f 71bc 	movw	r1, #63420	; 0xf7bc
   89b1a:	f2c0 0108 	movt	r1, #8
   89b1e:	f105 0004 	add.w	r0, r5, #4
   89b22:	f3c5 0480 	ubfx	r4, r5, #2, #1
   89b26:	585d      	ldr	r5, [r3, r1]
   89b28:	509d      	str	r5, [r3, r2]
   89b2a:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   89b2e:	4283      	cmp	r3, r0
   89b30:	d155      	bne.n	89bde <Reset_Handler+0x106>
   89b32:	e7e0      	b.n	89af6 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   89b34:	585d      	ldr	r5, [r3, r1]
   89b36:	509d      	str	r5, [r3, r2]
   89b38:	f103 0304 	add.w	r3, r3, #4
   89b3c:	585c      	ldr	r4, [r3, r1]
   89b3e:	509c      	str	r4, [r3, r2]
   89b40:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   89b44:	4283      	cmp	r3, r0
   89b46:	d1f5      	bne.n	89b34 <Reset_Handler+0x5c>
   89b48:	e7d5      	b.n	89af6 <Reset_Handler+0x1e>
   89b4a:	4d2f      	ldr	r5, [pc, #188]	; (89c08 <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   89b4c:	492f      	ldr	r1, [pc, #188]	; (89c0c <Reset_Handler+0x134>)
   89b4e:	1b48      	subs	r0, r1, r5
   89b50:	f020 0403 	bic.w	r4, r0, #3
   89b54:	f640 338c 	movw	r3, #2956	; 0xb8c
   89b58:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89b5c:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   89b5e:	f04f 0100 	mov.w	r1, #0
   89b62:	1b50      	subs	r0, r2, r5
   89b64:	f1a0 0004 	sub.w	r0, r0, #4
   89b68:	f3c0 0480 	ubfx	r4, r0, #2, #1
   89b6c:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   89b70:	4295      	cmp	r5, r2
   89b72:	d12d      	bne.n	89bd0 <Reset_Handler+0xf8>
   89b74:	e007      	b.n	89b86 <Reset_Handler+0xae>
   89b76:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   89b7a:	6069      	str	r1, [r5, #4]
   89b7c:	f105 0508 	add.w	r5, r5, #8
   89b80:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   89b82:	4295      	cmp	r5, r2
   89b84:	d1f7      	bne.n	89b76 <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   89b86:	f240 0500 	movw	r5, #0
   89b8a:	f2c0 0508 	movt	r5, #8
   89b8e:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   89b92:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   89b96:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   89b9a:	f2ce 0000 	movt	r0, #57344	; 0xe000
   89b9e:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   89ba0:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   89ba4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   89ba8:	d207      	bcs.n	89bba <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   89baa:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   89bae:	f2ce 0300 	movt	r3, #57344	; 0xe000
   89bb2:	689d      	ldr	r5, [r3, #8]
   89bb4:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   89bb8:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   89bba:	f64a 2165 	movw	r1, #43621	; 0xaa65
   89bbe:	f2c0 0108 	movt	r1, #8
   89bc2:	4788      	blx	r1

	/* Branch to main function */
	main();
   89bc4:	f649 700d 	movw	r0, #40717	; 0x9f0d
   89bc8:	f2c0 0008 	movt	r0, #8
   89bcc:	4780      	blx	r0
   89bce:	e7fe      	b.n	89bce <Reset_Handler+0xf6>
   89bd0:	2c00      	cmp	r4, #0
   89bd2:	d0d0      	beq.n	89b76 <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   89bd4:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   89bd8:	4295      	cmp	r5, r2
   89bda:	d1cc      	bne.n	89b76 <Reset_Handler+0x9e>
   89bdc:	e7d3      	b.n	89b86 <Reset_Handler+0xae>
   89bde:	2c00      	cmp	r4, #0
   89be0:	d0a8      	beq.n	89b34 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   89be2:	585c      	ldr	r4, [r3, r1]
   89be4:	509c      	str	r4, [r3, r2]
   89be6:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   89bea:	4283      	cmp	r3, r0
   89bec:	d1a2      	bne.n	89b34 <Reset_Handler+0x5c>
   89bee:	e782      	b.n	89af6 <Reset_Handler+0x1e>
   89bf0:	20070b8c 	.word	0x20070b8c
   89bf4:	20070000 	.word	0x20070000
   89bf8:	20071de8 	.word	0x20071de8
   89bfc:	20070b8c 	.word	0x20070b8c
   89c00:	20070004 	.word	0x20070004
   89c04:	20070b8f 	.word	0x20070b8f
   89c08:	20070b88 	.word	0x20070b88
   89c0c:	20071de3 	.word	0x20071de3

00089c10 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   89c10:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   89c14:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89c18:	6b18      	ldr	r0, [r3, #48]	; 0x30
   89c1a:	f000 0103 	and.w	r1, r0, #3
   89c1e:	2903      	cmp	r1, #3
   89c20:	f200 80b1 	bhi.w	89d86 <SystemCoreClockUpdate+0x176>
   89c24:	e8df f001 	tbb	[pc, r1]
   89c28:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   89c2c:	f641 2010 	movw	r0, #6672	; 0x1a10
   89c30:	f2c4 000e 	movt	r0, #16398	; 0x400e
   89c34:	6941      	ldr	r1, [r0, #20]
   89c36:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   89c3a:	f240 239c 	movw	r3, #668	; 0x29c
   89c3e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89c42:	bf14      	ite	ne
   89c44:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   89c48:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   89c4c:	601a      	str	r2, [r3, #0]
   89c4e:	e09a      	b.n	89d86 <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   89c50:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   89c54:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89c58:	6a18      	ldr	r0, [r3, #32]
   89c5a:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   89c5e:	d009      	beq.n	89c74 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   89c60:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   89c64:	f2c0 03b7 	movt	r3, #183	; 0xb7
   89c68:	f240 229c 	movw	r2, #668	; 0x29c
   89c6c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89c70:	6013      	str	r3, [r2, #0]
   89c72:	e088      	b.n	89d86 <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   89c74:	f44f 6110 	mov.w	r1, #2304	; 0x900
   89c78:	f2c0 013d 	movt	r1, #61	; 0x3d
   89c7c:	f240 229c 	movw	r2, #668	; 0x29c
   89c80:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89c84:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   89c86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   89c8a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89c8e:	6a18      	ldr	r0, [r3, #32]
   89c90:	f000 0170 	and.w	r1, r0, #112	; 0x70
   89c94:	2910      	cmp	r1, #16
   89c96:	d002      	beq.n	89c9e <SystemCoreClockUpdate+0x8e>
   89c98:	2920      	cmp	r1, #32
   89c9a:	d174      	bne.n	89d86 <SystemCoreClockUpdate+0x176>
   89c9c:	e009      	b.n	89cb2 <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   89c9e:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   89ca2:	f2c0 007a 	movt	r0, #122	; 0x7a
   89ca6:	f240 219c 	movw	r1, #668	; 0x29c
   89caa:	f2c2 0107 	movt	r1, #8199	; 0x2007
   89cae:	6008      	str	r0, [r1, #0]
				break;
   89cb0:	e069      	b.n	89d86 <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   89cb2:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   89cb6:	f2c0 03b7 	movt	r3, #183	; 0xb7
   89cba:	f240 229c 	movw	r2, #668	; 0x29c
   89cbe:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89cc2:	6013      	str	r3, [r2, #0]
				break;
   89cc4:	e05f      	b.n	89d86 <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   89cc6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   89cca:	f2c4 020e 	movt	r2, #16398	; 0x400e
   89cce:	6a13      	ldr	r3, [r2, #32]
   89cd0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   89cd4:	d009      	beq.n	89cea <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   89cd6:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   89cda:	f2c0 01b7 	movt	r1, #183	; 0xb7
   89cde:	f240 229c 	movw	r2, #668	; 0x29c
   89ce2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89ce6:	6011      	str	r1, [r2, #0]
   89ce8:	e027      	b.n	89d3a <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   89cea:	f44f 6010 	mov.w	r0, #2304	; 0x900
   89cee:	f2c0 003d 	movt	r0, #61	; 0x3d
   89cf2:	f240 219c 	movw	r1, #668	; 0x29c
   89cf6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   89cfa:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   89cfc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   89d00:	f2c4 020e 	movt	r2, #16398	; 0x400e
   89d04:	6a13      	ldr	r3, [r2, #32]
   89d06:	f003 0070 	and.w	r0, r3, #112	; 0x70
   89d0a:	2810      	cmp	r0, #16
   89d0c:	d002      	beq.n	89d14 <SystemCoreClockUpdate+0x104>
   89d0e:	2820      	cmp	r0, #32
   89d10:	d113      	bne.n	89d3a <SystemCoreClockUpdate+0x12a>
   89d12:	e009      	b.n	89d28 <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   89d14:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   89d18:	f2c0 037a 	movt	r3, #122	; 0x7a
   89d1c:	f240 209c 	movw	r0, #668	; 0x29c
   89d20:	f2c2 0007 	movt	r0, #8199	; 0x2007
   89d24:	6003      	str	r3, [r0, #0]
				break;
   89d26:	e008      	b.n	89d3a <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   89d28:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   89d2c:	f2c0 01b7 	movt	r1, #183	; 0xb7
   89d30:	f240 229c 	movw	r2, #668	; 0x29c
   89d34:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89d38:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   89d3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   89d3e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89d42:	6b18      	ldr	r0, [r3, #48]	; 0x30
   89d44:	f000 0103 	and.w	r1, r0, #3
   89d48:	2902      	cmp	r1, #2
   89d4a:	d113      	bne.n	89d74 <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   89d4c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   89d50:	f2c4 010e 	movt	r1, #16398	; 0x400e
   89d54:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   89d56:	6a89      	ldr	r1, [r1, #40]	; 0x28
   89d58:	f240 239c 	movw	r3, #668	; 0x29c
   89d5c:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   89d60:	f3c0 400a 	ubfx	r0, r0, #16, #11
   89d64:	681a      	ldr	r2, [r3, #0]
   89d66:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   89d6a:	b2c9      	uxtb	r1, r1
   89d6c:	fbb0 f2f1 	udiv	r2, r0, r1
   89d70:	601a      	str	r2, [r3, #0]
   89d72:	e008      	b.n	89d86 <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   89d74:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   89d78:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   89d7c:	f240 229c 	movw	r2, #668	; 0x29c
   89d80:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89d84:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   89d86:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   89d8a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   89d8e:	6b10      	ldr	r0, [r2, #48]	; 0x30
   89d90:	f000 0170 	and.w	r1, r0, #112	; 0x70
   89d94:	2970      	cmp	r1, #112	; 0x70
   89d96:	d10e      	bne.n	89db6 <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   89d98:	f240 239c 	movw	r3, #668	; 0x29c
   89d9c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89da0:	6818      	ldr	r0, [r3, #0]
   89da2:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   89da6:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   89daa:	fba2 0100 	umull	r0, r1, r2, r0
   89dae:	ea4f 0051 	mov.w	r0, r1, lsr #1
   89db2:	6018      	str	r0, [r3, #0]
   89db4:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   89db6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   89dba:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   89dc0:	f240 209c 	movw	r0, #668	; 0x29c
   89dc4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   89dc8:	f3c2 1102 	ubfx	r1, r2, #4, #3
   89dcc:	6803      	ldr	r3, [r0, #0]
   89dce:	fa23 f301 	lsr.w	r3, r3, r1
   89dd2:	6003      	str	r3, [r0, #0]
   89dd4:	4770      	bx	lr
   89dd6:	bf00      	nop

00089dd8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   89dd8:	f64e 23bf 	movw	r3, #60095	; 0xeabf
   89ddc:	f2c0 1321 	movt	r3, #289	; 0x121
   89de0:	4298      	cmp	r0, r3
   89de2:	d80c      	bhi.n	89dfe <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   89de4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   89de8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89dec:	f04f 0000 	mov.w	r0, #0
   89df0:	6018      	str	r0, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   89df2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   89df6:	f2c4 010e 	movt	r1, #16398	; 0x400e
   89dfa:	6008      	str	r0, [r1, #0]
   89dfc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   89dfe:	f24f 017f 	movw	r1, #61567	; 0xf07f
   89e02:	f2c0 21fa 	movt	r1, #762	; 0x2fa
   89e06:	4288      	cmp	r0, r1
   89e08:	d80c      	bhi.n	89e24 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   89e0a:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   89e0e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   89e12:	f44f 7180 	mov.w	r1, #256	; 0x100
   89e16:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   89e18:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   89e1c:	f2c4 020e 	movt	r2, #16398	; 0x400e
   89e20:	6011      	str	r1, [r2, #0]
   89e22:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   89e24:	f648 73ff 	movw	r3, #36863	; 0x8fff
   89e28:	f2c0 33d0 	movt	r3, #976	; 0x3d0
   89e2c:	4298      	cmp	r0, r3
   89e2e:	d80c      	bhi.n	89e4a <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   89e30:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   89e34:	f2c4 010e 	movt	r1, #16398	; 0x400e
   89e38:	f44f 7200 	mov.w	r2, #512	; 0x200
   89e3c:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   89e3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   89e42:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89e46:	601a      	str	r2, [r3, #0]
   89e48:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   89e4a:	f24b 31ff 	movw	r1, #46079	; 0xb3ff
   89e4e:	f2c0 41c4 	movt	r1, #1220	; 0x4c4
   89e52:	4288      	cmp	r0, r1
   89e54:	d80c      	bhi.n	89e70 <system_init_flash+0x98>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   89e56:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   89e5a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89e5e:	f44f 7240 	mov.w	r2, #768	; 0x300
   89e62:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   89e64:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   89e68:	f2c4 000e 	movt	r0, #16398	; 0x400e
   89e6c:	6002      	str	r2, [r0, #0]
   89e6e:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   89e70:	f644 237f 	movw	r3, #19071	; 0x4a7f
   89e74:	f2c0 535d 	movt	r3, #1373	; 0x55d
   89e78:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   89e7a:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   89e7e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   89e82:	bf94      	ite	ls
   89e84:	f44f 6280 	movls.w	r2, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   89e88:	f44f 62a0 	movhi.w	r2, #1280	; 0x500
   89e8c:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   89e8e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   89e92:	f2c4 010e 	movt	r1, #16398	; 0x400e
   89e96:	600a      	str	r2, [r1, #0]
   89e98:	4770      	bx	lr
   89e9a:	bf00      	nop

00089e9c <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   89e9c:	f241 63c4 	movw	r3, #5828	; 0x16c4
   89ea0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89ea4:	6819      	ldr	r1, [r3, #0]
   89ea6:	b941      	cbnz	r1, 89eba <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
   89ea8:	f241 63c4 	movw	r3, #5828	; 0x16c4
   89eac:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89eb0:	f643 52e8 	movw	r2, #15848	; 0x3de8
   89eb4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89eb8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   89eba:	f241 61c4 	movw	r1, #5828	; 0x16c4
   89ebe:	f2c2 0107 	movt	r1, #8199	; 0x2007
   89ec2:	680b      	ldr	r3, [r1, #0]

	heap += incr;
   89ec4:	1818      	adds	r0, r3, r0
   89ec6:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
   89ec8:	4618      	mov	r0, r3
   89eca:	4770      	bx	lr

00089ecc <main_msc_enable>:
bool last_ok_12v_state = false;


bool main_msc_enable(void)
{
	main_b_msc_enable = true;
   89ecc:	f04f 0001 	mov.w	r0, #1
   89ed0:	f241 63c9 	movw	r3, #5833	; 0x16c9
   89ed4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89ed8:	7018      	strb	r0, [r3, #0]
	return true;
}
   89eda:	4770      	bx	lr

00089edc <main_msc_disable>:
void main_msc_disable(void)
{
	main_b_msc_enable = false;
   89edc:	f241 63c9 	movw	r3, #5833	; 0x16c9
   89ee0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89ee4:	f04f 0200 	mov.w	r2, #0
   89ee8:	701a      	strb	r2, [r3, #0]
   89eea:	4770      	bx	lr

00089eec <main_cdc_enable>:
}
bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
   89eec:	f04f 0001 	mov.w	r0, #1
   89ef0:	f241 63ca 	movw	r3, #5834	; 0x16ca
   89ef4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89ef8:	7018      	strb	r0, [r3, #0]
	return true;
}
   89efa:	4770      	bx	lr

00089efc <main_cdc_disable>:
void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
   89efc:	f241 63ca 	movw	r3, #5834	; 0x16ca
   89f00:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89f04:	f04f 0200 	mov.w	r2, #0
   89f08:	701a      	strb	r2, [r3, #0]
   89f0a:	4770      	bx	lr

00089f0c <main>:
}

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   89f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
   89f0e:	f04f 0401 	mov.w	r4, #1
   89f12:	f240 2398 	movw	r3, #664	; 0x298
   89f16:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89f1a:	701c      	strb	r4, [r3, #0]
   89f1c:	f3bf 8f5f 	dmb	sy
   89f20:	b662      	cpsie	i
	wdt_disable(WDT);
   89f22:	f641 2050 	movw	r0, #6736	; 0x1a50
   89f26:	f2c4 000e 	movt	r0, #16398	; 0x400e
   89f2a:	f641 3121 	movw	r1, #6945	; 0x1b21
   89f2e:	f2c0 0108 	movt	r1, #8
   89f32:	4788      	blx	r1
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
   89f34:	f641 40c4 	movw	r0, #7364	; 0x1cc4
   89f38:	f2c2 0007 	movt	r0, #8199	; 0x2007
   89f3c:	f04f 0200 	mov.w	r2, #0
   89f40:	7002      	strb	r2, [r0, #0]
   89f42:	7042      	strb	r2, [r0, #1]
   89f44:	7082      	strb	r2, [r0, #2]
   89f46:	70c2      	strb	r2, [r0, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   89f48:	7104      	strb	r4, [r0, #4]

	// Initialize the sleep manager
	sleepmgr_init();

	// Board initialization
	sysclk_init();
   89f4a:	f245 3589 	movw	r5, #21385	; 0x5389
   89f4e:	f2c0 0508 	movt	r5, #8
   89f52:	47a8      	blx	r5
	init_board();
   89f54:	f641 3629 	movw	r6, #6953	; 0x1b29
   89f58:	f2c0 0608 	movt	r6, #8
   89f5c:	47b0      	blx	r6
	init_pwm();
   89f5e:	f642 0795 	movw	r7, #10389	; 0x2895
   89f62:	f2c0 0708 	movt	r7, #8
   89f66:	47b8      	blx	r7
	init_i2c();
   89f68:	f642 0445 	movw	r4, #10309	; 0x2845
   89f6c:	f2c0 0408 	movt	r4, #8
   89f70:	47a0      	blx	r4

	// Module initialization	
	init_module_peripherals_bp();
   89f72:	f242 0325 	movw	r3, #8229	; 0x2025
   89f76:	f2c0 0308 	movt	r3, #8
   89f7a:	4798      	blx	r3

	/* Initialize SD MMC stack */
	delay_ms(200);
   89f7c:	f44f 409f 	mov.w	r0, #20352	; 0x4f80
   89f80:	f2c0 0012 	movt	r0, #18
   89f84:	f240 0101 	movw	r1, #1
   89f88:	f2c2 0107 	movt	r1, #8199	; 0x2007
   89f8c:	4788      	blx	r1
	sd_mmc_init();
   89f8e:	f240 4069 	movw	r0, #1129	; 0x469
   89f92:	f2c0 0008 	movt	r0, #8
   89f96:	4780      	blx	r0

	// Start USB stack to authorize VBus monitoring
	udc_start();
   89f98:	f646 5275 	movw	r2, #28021	; 0x6d75
   89f9c:	f2c0 0208 	movt	r2, #8
   89fa0:	4790      	blx	r2
	
	// Init SCPI parser
    console_init();
   89fa2:	f245 05c9 	movw	r5, #20681	; 0x50c9
   89fa6:	f2c0 0508 	movt	r5, #8
   89faa:	47a8      	blx	r5
	
	// Enable 12V
	enable_12v();
   89fac:	f642 2615 	movw	r6, #10773	; 0x2a15
   89fb0:	f2c0 0608 	movt	r6, #8
   89fb4:	47b0      	blx	r6
	
	while (true) 
	{
		console_process();
   89fb6:	f245 06e1 	movw	r6, #20705	; 0x50e1
   89fba:	f2c0 0608 	movt	r6, #8
		
 		if((get_ok_12v_status() == RETURN_OK) && (last_ok_12v_state == false))
   89fbe:	f642 2405 	movw	r4, #10757	; 0x2a05
   89fc2:	f2c0 0408 	movt	r4, #8
   89fc6:	f241 65c8 	movw	r5, #5832	; 0x16c8
   89fca:	f2c2 0507 	movt	r5, #8199	; 0x2007
 		{
 			set_user_led_colour(0, 100, 0);
   89fce:	f642 17ad 	movw	r7, #10669	; 0x29ad
   89fd2:	f2c0 0708 	movt	r7, #8
	// Enable 12V
	enable_12v();
	
	while (true) 
	{
		console_process();
   89fd6:	47b0      	blx	r6
		
 		if((get_ok_12v_status() == RETURN_OK) && (last_ok_12v_state == false))
   89fd8:	47a0      	blx	r4
   89fda:	2801      	cmp	r0, #1
   89fdc:	d10b      	bne.n	89ff6 <main+0xea>
   89fde:	782b      	ldrb	r3, [r5, #0]
   89fe0:	b94b      	cbnz	r3, 89ff6 <main+0xea>
 		{
 			set_user_led_colour(0, 100, 0);
   89fe2:	f04f 0000 	mov.w	r0, #0
   89fe6:	f04f 0164 	mov.w	r1, #100	; 0x64
   89fea:	4602      	mov	r2, r0
   89fec:	47b8      	blx	r7
			last_ok_12v_state = true;
   89fee:	f04f 0201 	mov.w	r2, #1
   89ff2:	702a      	strb	r2, [r5, #0]
   89ff4:	e009      	b.n	8a00a <main+0xfe>
 		}
		else if((get_ok_12v_status() == RETURN_NOK) && (last_ok_12v_state == true))
   89ff6:	47a0      	blx	r4
   89ff8:	b938      	cbnz	r0, 8a00a <main+0xfe>
   89ffa:	7829      	ldrb	r1, [r5, #0]
   89ffc:	b129      	cbz	r1, 8a00a <main+0xfe>
		{
			set_user_led_colour(0, 0, 0);
   89ffe:	4601      	mov	r1, r0
   8a000:	4602      	mov	r2, r0
   8a002:	47b8      	blx	r7
			last_ok_12v_state = false;			
   8a004:	f04f 0000 	mov.w	r0, #0
   8a008:	7028      	strb	r0, [r5, #0]
// 		else if(get_ok_12v_status() == RETURN_OK)
// 			set_user_led_colour(100, 0, 0);
// 		else
// 			set_user_led_colour(0, 0, 0);			

		if (main_b_msc_enable) 
   8a00a:	f241 63c9 	movw	r3, #5833	; 0x16c9
   8a00e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a012:	7819      	ldrb	r1, [r3, #0]
   8a014:	2900      	cmp	r1, #0
   8a016:	d0de      	beq.n	89fd6 <main+0xca>
		{
			if (!udi_msc_process_trans()) 
   8a018:	f646 10d1 	movw	r0, #27089	; 0x69d1
   8a01c:	f2c0 0008 	movt	r0, #8
   8a020:	4780      	blx	r0
   8a022:	e7d8      	b.n	89fd6 <main+0xca>

0008a024 <round>:
   8a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a026:	f3c1 570a 	ubfx	r7, r1, #20, #11
   8a02a:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
   8a02e:	2e13      	cmp	r6, #19
   8a030:	4602      	mov	r2, r0
   8a032:	460b      	mov	r3, r1
   8a034:	4604      	mov	r4, r0
   8a036:	460d      	mov	r5, r1
   8a038:	dc18      	bgt.n	8a06c <round+0x48>
   8a03a:	2e00      	cmp	r6, #0
   8a03c:	da08      	bge.n	8a050 <round+0x2c>
   8a03e:	1c73      	adds	r3, r6, #1
   8a040:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a044:	d130      	bne.n	8a0a8 <round+0x84>
   8a046:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
   8a04a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   8a04e:	e02b      	b.n	8a0a8 <round+0x84>
   8a050:	4818      	ldr	r0, [pc, #96]	; (8a0b4 <round+0x90>)
   8a052:	fa40 f006 	asr.w	r0, r0, r6
   8a056:	4208      	tst	r0, r1
   8a058:	d100      	bne.n	8a05c <round+0x38>
   8a05a:	b342      	cbz	r2, 8a0ae <round+0x8a>
   8a05c:	f44f 2400 	mov.w	r4, #524288	; 0x80000
   8a060:	fa44 f606 	asr.w	r6, r4, r6
   8a064:	19ad      	adds	r5, r5, r6
   8a066:	ea25 0500 	bic.w	r5, r5, r0
   8a06a:	e01d      	b.n	8a0a8 <round+0x84>
   8a06c:	2e33      	cmp	r6, #51	; 0x33
   8a06e:	dd07      	ble.n	8a080 <round+0x5c>
   8a070:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   8a074:	d11b      	bne.n	8a0ae <round+0x8a>
   8a076:	f000 f825 	bl	8a0c4 <__adddf3>
   8a07a:	4602      	mov	r2, r0
   8a07c:	460b      	mov	r3, r1
   8a07e:	e016      	b.n	8a0ae <round+0x8a>
   8a080:	f2a7 4113 	subw	r1, r7, #1043	; 0x413
   8a084:	f04f 30ff 	mov.w	r0, #4294967295
   8a088:	fa20 f101 	lsr.w	r1, r0, r1
   8a08c:	4211      	tst	r1, r2
   8a08e:	d00e      	beq.n	8a0ae <round+0x8a>
   8a090:	f5c7 6786 	rsb	r7, r7, #1072	; 0x430
   8a094:	2301      	movs	r3, #1
   8a096:	1cba      	adds	r2, r7, #2
   8a098:	fa03 f702 	lsl.w	r7, r3, r2
   8a09c:	193c      	adds	r4, r7, r4
   8a09e:	bf28      	it	cs
   8a0a0:	18ed      	addcs	r5, r5, r3
   8a0a2:	ea24 0401 	bic.w	r4, r4, r1
   8a0a6:	e000      	b.n	8a0aa <round+0x86>
   8a0a8:	2400      	movs	r4, #0
   8a0aa:	462b      	mov	r3, r5
   8a0ac:	4622      	mov	r2, r4
   8a0ae:	4610      	mov	r0, r2
   8a0b0:	4619      	mov	r1, r3
   8a0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a0b4:	000fffff 	.word	0x000fffff

0008a0b8 <__aeabi_drsub>:
   8a0b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8a0bc:	e002      	b.n	8a0c4 <__adddf3>
   8a0be:	bf00      	nop

0008a0c0 <__aeabi_dsub>:
   8a0c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008a0c4 <__adddf3>:
   8a0c4:	b530      	push	{r4, r5, lr}
   8a0c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8a0ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8a0ce:	ea94 0f05 	teq	r4, r5
   8a0d2:	bf08      	it	eq
   8a0d4:	ea90 0f02 	teqeq	r0, r2
   8a0d8:	bf1f      	itttt	ne
   8a0da:	ea54 0c00 	orrsne.w	ip, r4, r0
   8a0de:	ea55 0c02 	orrsne.w	ip, r5, r2
   8a0e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8a0e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8a0ea:	f000 80e2 	beq.w	8a2b2 <__adddf3+0x1ee>
   8a0ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8a0f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8a0f6:	bfb8      	it	lt
   8a0f8:	426d      	neglt	r5, r5
   8a0fa:	dd0c      	ble.n	8a116 <__adddf3+0x52>
   8a0fc:	442c      	add	r4, r5
   8a0fe:	ea80 0202 	eor.w	r2, r0, r2
   8a102:	ea81 0303 	eor.w	r3, r1, r3
   8a106:	ea82 0000 	eor.w	r0, r2, r0
   8a10a:	ea83 0101 	eor.w	r1, r3, r1
   8a10e:	ea80 0202 	eor.w	r2, r0, r2
   8a112:	ea81 0303 	eor.w	r3, r1, r3
   8a116:	2d36      	cmp	r5, #54	; 0x36
   8a118:	bf88      	it	hi
   8a11a:	bd30      	pophi	{r4, r5, pc}
   8a11c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8a120:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8a124:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8a128:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8a12c:	d002      	beq.n	8a134 <__adddf3+0x70>
   8a12e:	4240      	negs	r0, r0
   8a130:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8a134:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8a138:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8a13c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8a140:	d002      	beq.n	8a148 <__adddf3+0x84>
   8a142:	4252      	negs	r2, r2
   8a144:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8a148:	ea94 0f05 	teq	r4, r5
   8a14c:	f000 80a7 	beq.w	8a29e <__adddf3+0x1da>
   8a150:	f1a4 0401 	sub.w	r4, r4, #1
   8a154:	f1d5 0e20 	rsbs	lr, r5, #32
   8a158:	db0d      	blt.n	8a176 <__adddf3+0xb2>
   8a15a:	fa02 fc0e 	lsl.w	ip, r2, lr
   8a15e:	fa22 f205 	lsr.w	r2, r2, r5
   8a162:	1880      	adds	r0, r0, r2
   8a164:	f141 0100 	adc.w	r1, r1, #0
   8a168:	fa03 f20e 	lsl.w	r2, r3, lr
   8a16c:	1880      	adds	r0, r0, r2
   8a16e:	fa43 f305 	asr.w	r3, r3, r5
   8a172:	4159      	adcs	r1, r3
   8a174:	e00e      	b.n	8a194 <__adddf3+0xd0>
   8a176:	f1a5 0520 	sub.w	r5, r5, #32
   8a17a:	f10e 0e20 	add.w	lr, lr, #32
   8a17e:	2a01      	cmp	r2, #1
   8a180:	fa03 fc0e 	lsl.w	ip, r3, lr
   8a184:	bf28      	it	cs
   8a186:	f04c 0c02 	orrcs.w	ip, ip, #2
   8a18a:	fa43 f305 	asr.w	r3, r3, r5
   8a18e:	18c0      	adds	r0, r0, r3
   8a190:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8a194:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a198:	d507      	bpl.n	8a1aa <__adddf3+0xe6>
   8a19a:	f04f 0e00 	mov.w	lr, #0
   8a19e:	f1dc 0c00 	rsbs	ip, ip, #0
   8a1a2:	eb7e 0000 	sbcs.w	r0, lr, r0
   8a1a6:	eb6e 0101 	sbc.w	r1, lr, r1
   8a1aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8a1ae:	d31b      	bcc.n	8a1e8 <__adddf3+0x124>
   8a1b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8a1b4:	d30c      	bcc.n	8a1d0 <__adddf3+0x10c>
   8a1b6:	0849      	lsrs	r1, r1, #1
   8a1b8:	ea5f 0030 	movs.w	r0, r0, rrx
   8a1bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8a1c0:	f104 0401 	add.w	r4, r4, #1
   8a1c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8a1c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8a1cc:	f080 809a 	bcs.w	8a304 <__adddf3+0x240>
   8a1d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8a1d4:	bf08      	it	eq
   8a1d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8a1da:	f150 0000 	adcs.w	r0, r0, #0
   8a1de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8a1e2:	ea41 0105 	orr.w	r1, r1, r5
   8a1e6:	bd30      	pop	{r4, r5, pc}
   8a1e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8a1ec:	4140      	adcs	r0, r0
   8a1ee:	eb41 0101 	adc.w	r1, r1, r1
   8a1f2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8a1f6:	f1a4 0401 	sub.w	r4, r4, #1
   8a1fa:	d1e9      	bne.n	8a1d0 <__adddf3+0x10c>
   8a1fc:	f091 0f00 	teq	r1, #0
   8a200:	bf04      	itt	eq
   8a202:	4601      	moveq	r1, r0
   8a204:	2000      	moveq	r0, #0
   8a206:	fab1 f381 	clz	r3, r1
   8a20a:	bf08      	it	eq
   8a20c:	3320      	addeq	r3, #32
   8a20e:	f1a3 030b 	sub.w	r3, r3, #11
   8a212:	f1b3 0220 	subs.w	r2, r3, #32
   8a216:	da0c      	bge.n	8a232 <__adddf3+0x16e>
   8a218:	320c      	adds	r2, #12
   8a21a:	dd08      	ble.n	8a22e <__adddf3+0x16a>
   8a21c:	f102 0c14 	add.w	ip, r2, #20
   8a220:	f1c2 020c 	rsb	r2, r2, #12
   8a224:	fa01 f00c 	lsl.w	r0, r1, ip
   8a228:	fa21 f102 	lsr.w	r1, r1, r2
   8a22c:	e00c      	b.n	8a248 <__adddf3+0x184>
   8a22e:	f102 0214 	add.w	r2, r2, #20
   8a232:	bfd8      	it	le
   8a234:	f1c2 0c20 	rsble	ip, r2, #32
   8a238:	fa01 f102 	lsl.w	r1, r1, r2
   8a23c:	fa20 fc0c 	lsr.w	ip, r0, ip
   8a240:	bfdc      	itt	le
   8a242:	ea41 010c 	orrle.w	r1, r1, ip
   8a246:	4090      	lslle	r0, r2
   8a248:	1ae4      	subs	r4, r4, r3
   8a24a:	bfa2      	ittt	ge
   8a24c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8a250:	4329      	orrge	r1, r5
   8a252:	bd30      	popge	{r4, r5, pc}
   8a254:	ea6f 0404 	mvn.w	r4, r4
   8a258:	3c1f      	subs	r4, #31
   8a25a:	da1c      	bge.n	8a296 <__adddf3+0x1d2>
   8a25c:	340c      	adds	r4, #12
   8a25e:	dc0e      	bgt.n	8a27e <__adddf3+0x1ba>
   8a260:	f104 0414 	add.w	r4, r4, #20
   8a264:	f1c4 0220 	rsb	r2, r4, #32
   8a268:	fa20 f004 	lsr.w	r0, r0, r4
   8a26c:	fa01 f302 	lsl.w	r3, r1, r2
   8a270:	ea40 0003 	orr.w	r0, r0, r3
   8a274:	fa21 f304 	lsr.w	r3, r1, r4
   8a278:	ea45 0103 	orr.w	r1, r5, r3
   8a27c:	bd30      	pop	{r4, r5, pc}
   8a27e:	f1c4 040c 	rsb	r4, r4, #12
   8a282:	f1c4 0220 	rsb	r2, r4, #32
   8a286:	fa20 f002 	lsr.w	r0, r0, r2
   8a28a:	fa01 f304 	lsl.w	r3, r1, r4
   8a28e:	ea40 0003 	orr.w	r0, r0, r3
   8a292:	4629      	mov	r1, r5
   8a294:	bd30      	pop	{r4, r5, pc}
   8a296:	fa21 f004 	lsr.w	r0, r1, r4
   8a29a:	4629      	mov	r1, r5
   8a29c:	bd30      	pop	{r4, r5, pc}
   8a29e:	f094 0f00 	teq	r4, #0
   8a2a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8a2a6:	bf06      	itte	eq
   8a2a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8a2ac:	3401      	addeq	r4, #1
   8a2ae:	3d01      	subne	r5, #1
   8a2b0:	e74e      	b.n	8a150 <__adddf3+0x8c>
   8a2b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8a2b6:	bf18      	it	ne
   8a2b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8a2bc:	d029      	beq.n	8a312 <__adddf3+0x24e>
   8a2be:	ea94 0f05 	teq	r4, r5
   8a2c2:	bf08      	it	eq
   8a2c4:	ea90 0f02 	teqeq	r0, r2
   8a2c8:	d005      	beq.n	8a2d6 <__adddf3+0x212>
   8a2ca:	ea54 0c00 	orrs.w	ip, r4, r0
   8a2ce:	bf04      	itt	eq
   8a2d0:	4619      	moveq	r1, r3
   8a2d2:	4610      	moveq	r0, r2
   8a2d4:	bd30      	pop	{r4, r5, pc}
   8a2d6:	ea91 0f03 	teq	r1, r3
   8a2da:	bf1e      	ittt	ne
   8a2dc:	2100      	movne	r1, #0
   8a2de:	2000      	movne	r0, #0
   8a2e0:	bd30      	popne	{r4, r5, pc}
   8a2e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8a2e6:	d105      	bne.n	8a2f4 <__adddf3+0x230>
   8a2e8:	0040      	lsls	r0, r0, #1
   8a2ea:	4149      	adcs	r1, r1
   8a2ec:	bf28      	it	cs
   8a2ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8a2f2:	bd30      	pop	{r4, r5, pc}
   8a2f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8a2f8:	bf3c      	itt	cc
   8a2fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8a2fe:	bd30      	popcc	{r4, r5, pc}
   8a300:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a304:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8a308:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8a30c:	f04f 0000 	mov.w	r0, #0
   8a310:	bd30      	pop	{r4, r5, pc}
   8a312:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8a316:	bf1a      	itte	ne
   8a318:	4619      	movne	r1, r3
   8a31a:	4610      	movne	r0, r2
   8a31c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8a320:	bf1c      	itt	ne
   8a322:	460b      	movne	r3, r1
   8a324:	4602      	movne	r2, r0
   8a326:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8a32a:	bf06      	itte	eq
   8a32c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8a330:	ea91 0f03 	teqeq	r1, r3
   8a334:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8a338:	bd30      	pop	{r4, r5, pc}
   8a33a:	bf00      	nop

0008a33c <__aeabi_ui2d>:
   8a33c:	f090 0f00 	teq	r0, #0
   8a340:	bf04      	itt	eq
   8a342:	2100      	moveq	r1, #0
   8a344:	4770      	bxeq	lr
   8a346:	b530      	push	{r4, r5, lr}
   8a348:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8a34c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8a350:	f04f 0500 	mov.w	r5, #0
   8a354:	f04f 0100 	mov.w	r1, #0
   8a358:	e750      	b.n	8a1fc <__adddf3+0x138>
   8a35a:	bf00      	nop

0008a35c <__aeabi_i2d>:
   8a35c:	f090 0f00 	teq	r0, #0
   8a360:	bf04      	itt	eq
   8a362:	2100      	moveq	r1, #0
   8a364:	4770      	bxeq	lr
   8a366:	b530      	push	{r4, r5, lr}
   8a368:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8a36c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8a370:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8a374:	bf48      	it	mi
   8a376:	4240      	negmi	r0, r0
   8a378:	f04f 0100 	mov.w	r1, #0
   8a37c:	e73e      	b.n	8a1fc <__adddf3+0x138>
   8a37e:	bf00      	nop

0008a380 <__aeabi_f2d>:
   8a380:	0042      	lsls	r2, r0, #1
   8a382:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8a386:	ea4f 0131 	mov.w	r1, r1, rrx
   8a38a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8a38e:	bf1f      	itttt	ne
   8a390:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8a394:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8a398:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8a39c:	4770      	bxne	lr
   8a39e:	f092 0f00 	teq	r2, #0
   8a3a2:	bf14      	ite	ne
   8a3a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8a3a8:	4770      	bxeq	lr
   8a3aa:	b530      	push	{r4, r5, lr}
   8a3ac:	f44f 7460 	mov.w	r4, #896	; 0x380
   8a3b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a3b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8a3b8:	e720      	b.n	8a1fc <__adddf3+0x138>
   8a3ba:	bf00      	nop

0008a3bc <__aeabi_ul2d>:
   8a3bc:	ea50 0201 	orrs.w	r2, r0, r1
   8a3c0:	bf08      	it	eq
   8a3c2:	4770      	bxeq	lr
   8a3c4:	b530      	push	{r4, r5, lr}
   8a3c6:	f04f 0500 	mov.w	r5, #0
   8a3ca:	e00a      	b.n	8a3e2 <__aeabi_l2d+0x16>

0008a3cc <__aeabi_l2d>:
   8a3cc:	ea50 0201 	orrs.w	r2, r0, r1
   8a3d0:	bf08      	it	eq
   8a3d2:	4770      	bxeq	lr
   8a3d4:	b530      	push	{r4, r5, lr}
   8a3d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8a3da:	d502      	bpl.n	8a3e2 <__aeabi_l2d+0x16>
   8a3dc:	4240      	negs	r0, r0
   8a3de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8a3e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8a3e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8a3ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8a3ee:	f43f aedc 	beq.w	8a1aa <__adddf3+0xe6>
   8a3f2:	f04f 0203 	mov.w	r2, #3
   8a3f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8a3fa:	bf18      	it	ne
   8a3fc:	3203      	addne	r2, #3
   8a3fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8a402:	bf18      	it	ne
   8a404:	3203      	addne	r2, #3
   8a406:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8a40a:	f1c2 0320 	rsb	r3, r2, #32
   8a40e:	fa00 fc03 	lsl.w	ip, r0, r3
   8a412:	fa20 f002 	lsr.w	r0, r0, r2
   8a416:	fa01 fe03 	lsl.w	lr, r1, r3
   8a41a:	ea40 000e 	orr.w	r0, r0, lr
   8a41e:	fa21 f102 	lsr.w	r1, r1, r2
   8a422:	4414      	add	r4, r2
   8a424:	e6c1      	b.n	8a1aa <__adddf3+0xe6>
   8a426:	bf00      	nop

0008a428 <__aeabi_dmul>:
   8a428:	b570      	push	{r4, r5, r6, lr}
   8a42a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8a42e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8a432:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8a436:	bf1d      	ittte	ne
   8a438:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8a43c:	ea94 0f0c 	teqne	r4, ip
   8a440:	ea95 0f0c 	teqne	r5, ip
   8a444:	f000 f8de 	bleq	8a604 <__aeabi_dmul+0x1dc>
   8a448:	442c      	add	r4, r5
   8a44a:	ea81 0603 	eor.w	r6, r1, r3
   8a44e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8a452:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8a456:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8a45a:	bf18      	it	ne
   8a45c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8a460:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8a464:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8a468:	d038      	beq.n	8a4dc <__aeabi_dmul+0xb4>
   8a46a:	fba0 ce02 	umull	ip, lr, r0, r2
   8a46e:	f04f 0500 	mov.w	r5, #0
   8a472:	fbe1 e502 	umlal	lr, r5, r1, r2
   8a476:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8a47a:	fbe0 e503 	umlal	lr, r5, r0, r3
   8a47e:	f04f 0600 	mov.w	r6, #0
   8a482:	fbe1 5603 	umlal	r5, r6, r1, r3
   8a486:	f09c 0f00 	teq	ip, #0
   8a48a:	bf18      	it	ne
   8a48c:	f04e 0e01 	orrne.w	lr, lr, #1
   8a490:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8a494:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8a498:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8a49c:	d204      	bcs.n	8a4a8 <__aeabi_dmul+0x80>
   8a49e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8a4a2:	416d      	adcs	r5, r5
   8a4a4:	eb46 0606 	adc.w	r6, r6, r6
   8a4a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8a4ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8a4b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8a4b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8a4b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8a4bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8a4c0:	bf88      	it	hi
   8a4c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8a4c6:	d81e      	bhi.n	8a506 <__aeabi_dmul+0xde>
   8a4c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8a4cc:	bf08      	it	eq
   8a4ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8a4d2:	f150 0000 	adcs.w	r0, r0, #0
   8a4d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8a4da:	bd70      	pop	{r4, r5, r6, pc}
   8a4dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8a4e0:	ea46 0101 	orr.w	r1, r6, r1
   8a4e4:	ea40 0002 	orr.w	r0, r0, r2
   8a4e8:	ea81 0103 	eor.w	r1, r1, r3
   8a4ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8a4f0:	bfc2      	ittt	gt
   8a4f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   8a4f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8a4fa:	bd70      	popgt	{r4, r5, r6, pc}
   8a4fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8a500:	f04f 0e00 	mov.w	lr, #0
   8a504:	3c01      	subs	r4, #1
   8a506:	f300 80ab 	bgt.w	8a660 <__aeabi_dmul+0x238>
   8a50a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8a50e:	bfde      	ittt	le
   8a510:	2000      	movle	r0, #0
   8a512:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8a516:	bd70      	pople	{r4, r5, r6, pc}
   8a518:	f1c4 0400 	rsb	r4, r4, #0
   8a51c:	3c20      	subs	r4, #32
   8a51e:	da35      	bge.n	8a58c <__aeabi_dmul+0x164>
   8a520:	340c      	adds	r4, #12
   8a522:	dc1b      	bgt.n	8a55c <__aeabi_dmul+0x134>
   8a524:	f104 0414 	add.w	r4, r4, #20
   8a528:	f1c4 0520 	rsb	r5, r4, #32
   8a52c:	fa00 f305 	lsl.w	r3, r0, r5
   8a530:	fa20 f004 	lsr.w	r0, r0, r4
   8a534:	fa01 f205 	lsl.w	r2, r1, r5
   8a538:	ea40 0002 	orr.w	r0, r0, r2
   8a53c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8a540:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8a544:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8a548:	fa21 f604 	lsr.w	r6, r1, r4
   8a54c:	eb42 0106 	adc.w	r1, r2, r6
   8a550:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8a554:	bf08      	it	eq
   8a556:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8a55a:	bd70      	pop	{r4, r5, r6, pc}
   8a55c:	f1c4 040c 	rsb	r4, r4, #12
   8a560:	f1c4 0520 	rsb	r5, r4, #32
   8a564:	fa00 f304 	lsl.w	r3, r0, r4
   8a568:	fa20 f005 	lsr.w	r0, r0, r5
   8a56c:	fa01 f204 	lsl.w	r2, r1, r4
   8a570:	ea40 0002 	orr.w	r0, r0, r2
   8a574:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8a578:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8a57c:	f141 0100 	adc.w	r1, r1, #0
   8a580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8a584:	bf08      	it	eq
   8a586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8a58a:	bd70      	pop	{r4, r5, r6, pc}
   8a58c:	f1c4 0520 	rsb	r5, r4, #32
   8a590:	fa00 f205 	lsl.w	r2, r0, r5
   8a594:	ea4e 0e02 	orr.w	lr, lr, r2
   8a598:	fa20 f304 	lsr.w	r3, r0, r4
   8a59c:	fa01 f205 	lsl.w	r2, r1, r5
   8a5a0:	ea43 0302 	orr.w	r3, r3, r2
   8a5a4:	fa21 f004 	lsr.w	r0, r1, r4
   8a5a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8a5ac:	fa21 f204 	lsr.w	r2, r1, r4
   8a5b0:	ea20 0002 	bic.w	r0, r0, r2
   8a5b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8a5b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8a5bc:	bf08      	it	eq
   8a5be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8a5c2:	bd70      	pop	{r4, r5, r6, pc}
   8a5c4:	f094 0f00 	teq	r4, #0
   8a5c8:	d10f      	bne.n	8a5ea <__aeabi_dmul+0x1c2>
   8a5ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8a5ce:	0040      	lsls	r0, r0, #1
   8a5d0:	eb41 0101 	adc.w	r1, r1, r1
   8a5d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8a5d8:	bf08      	it	eq
   8a5da:	3c01      	subeq	r4, #1
   8a5dc:	d0f7      	beq.n	8a5ce <__aeabi_dmul+0x1a6>
   8a5de:	ea41 0106 	orr.w	r1, r1, r6
   8a5e2:	f095 0f00 	teq	r5, #0
   8a5e6:	bf18      	it	ne
   8a5e8:	4770      	bxne	lr
   8a5ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8a5ee:	0052      	lsls	r2, r2, #1
   8a5f0:	eb43 0303 	adc.w	r3, r3, r3
   8a5f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8a5f8:	bf08      	it	eq
   8a5fa:	3d01      	subeq	r5, #1
   8a5fc:	d0f7      	beq.n	8a5ee <__aeabi_dmul+0x1c6>
   8a5fe:	ea43 0306 	orr.w	r3, r3, r6
   8a602:	4770      	bx	lr
   8a604:	ea94 0f0c 	teq	r4, ip
   8a608:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8a60c:	bf18      	it	ne
   8a60e:	ea95 0f0c 	teqne	r5, ip
   8a612:	d00c      	beq.n	8a62e <__aeabi_dmul+0x206>
   8a614:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8a618:	bf18      	it	ne
   8a61a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8a61e:	d1d1      	bne.n	8a5c4 <__aeabi_dmul+0x19c>
   8a620:	ea81 0103 	eor.w	r1, r1, r3
   8a624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8a628:	f04f 0000 	mov.w	r0, #0
   8a62c:	bd70      	pop	{r4, r5, r6, pc}
   8a62e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8a632:	bf06      	itte	eq
   8a634:	4610      	moveq	r0, r2
   8a636:	4619      	moveq	r1, r3
   8a638:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8a63c:	d019      	beq.n	8a672 <__aeabi_dmul+0x24a>
   8a63e:	ea94 0f0c 	teq	r4, ip
   8a642:	d102      	bne.n	8a64a <__aeabi_dmul+0x222>
   8a644:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8a648:	d113      	bne.n	8a672 <__aeabi_dmul+0x24a>
   8a64a:	ea95 0f0c 	teq	r5, ip
   8a64e:	d105      	bne.n	8a65c <__aeabi_dmul+0x234>
   8a650:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8a654:	bf1c      	itt	ne
   8a656:	4610      	movne	r0, r2
   8a658:	4619      	movne	r1, r3
   8a65a:	d10a      	bne.n	8a672 <__aeabi_dmul+0x24a>
   8a65c:	ea81 0103 	eor.w	r1, r1, r3
   8a660:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8a664:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8a668:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8a66c:	f04f 0000 	mov.w	r0, #0
   8a670:	bd70      	pop	{r4, r5, r6, pc}
   8a672:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8a676:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8a67a:	bd70      	pop	{r4, r5, r6, pc}

0008a67c <__aeabi_ddiv>:
   8a67c:	b570      	push	{r4, r5, r6, lr}
   8a67e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8a682:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8a686:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8a68a:	bf1d      	ittte	ne
   8a68c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8a690:	ea94 0f0c 	teqne	r4, ip
   8a694:	ea95 0f0c 	teqne	r5, ip
   8a698:	f000 f8a7 	bleq	8a7ea <__aeabi_ddiv+0x16e>
   8a69c:	eba4 0405 	sub.w	r4, r4, r5
   8a6a0:	ea81 0e03 	eor.w	lr, r1, r3
   8a6a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8a6a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8a6ac:	f000 8088 	beq.w	8a7c0 <__aeabi_ddiv+0x144>
   8a6b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8a6b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8a6b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8a6bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8a6c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8a6c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8a6c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8a6cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8a6d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8a6d4:	429d      	cmp	r5, r3
   8a6d6:	bf08      	it	eq
   8a6d8:	4296      	cmpeq	r6, r2
   8a6da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8a6de:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8a6e2:	d202      	bcs.n	8a6ea <__aeabi_ddiv+0x6e>
   8a6e4:	085b      	lsrs	r3, r3, #1
   8a6e6:	ea4f 0232 	mov.w	r2, r2, rrx
   8a6ea:	1ab6      	subs	r6, r6, r2
   8a6ec:	eb65 0503 	sbc.w	r5, r5, r3
   8a6f0:	085b      	lsrs	r3, r3, #1
   8a6f2:	ea4f 0232 	mov.w	r2, r2, rrx
   8a6f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8a6fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8a6fe:	ebb6 0e02 	subs.w	lr, r6, r2
   8a702:	eb75 0e03 	sbcs.w	lr, r5, r3
   8a706:	bf22      	ittt	cs
   8a708:	1ab6      	subcs	r6, r6, r2
   8a70a:	4675      	movcs	r5, lr
   8a70c:	ea40 000c 	orrcs.w	r0, r0, ip
   8a710:	085b      	lsrs	r3, r3, #1
   8a712:	ea4f 0232 	mov.w	r2, r2, rrx
   8a716:	ebb6 0e02 	subs.w	lr, r6, r2
   8a71a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8a71e:	bf22      	ittt	cs
   8a720:	1ab6      	subcs	r6, r6, r2
   8a722:	4675      	movcs	r5, lr
   8a724:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8a728:	085b      	lsrs	r3, r3, #1
   8a72a:	ea4f 0232 	mov.w	r2, r2, rrx
   8a72e:	ebb6 0e02 	subs.w	lr, r6, r2
   8a732:	eb75 0e03 	sbcs.w	lr, r5, r3
   8a736:	bf22      	ittt	cs
   8a738:	1ab6      	subcs	r6, r6, r2
   8a73a:	4675      	movcs	r5, lr
   8a73c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8a740:	085b      	lsrs	r3, r3, #1
   8a742:	ea4f 0232 	mov.w	r2, r2, rrx
   8a746:	ebb6 0e02 	subs.w	lr, r6, r2
   8a74a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8a74e:	bf22      	ittt	cs
   8a750:	1ab6      	subcs	r6, r6, r2
   8a752:	4675      	movcs	r5, lr
   8a754:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8a758:	ea55 0e06 	orrs.w	lr, r5, r6
   8a75c:	d018      	beq.n	8a790 <__aeabi_ddiv+0x114>
   8a75e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8a762:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8a766:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8a76a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8a76e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8a772:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8a776:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8a77a:	d1c0      	bne.n	8a6fe <__aeabi_ddiv+0x82>
   8a77c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8a780:	d10b      	bne.n	8a79a <__aeabi_ddiv+0x11e>
   8a782:	ea41 0100 	orr.w	r1, r1, r0
   8a786:	f04f 0000 	mov.w	r0, #0
   8a78a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8a78e:	e7b6      	b.n	8a6fe <__aeabi_ddiv+0x82>
   8a790:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8a794:	bf04      	itt	eq
   8a796:	4301      	orreq	r1, r0
   8a798:	2000      	moveq	r0, #0
   8a79a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8a79e:	bf88      	it	hi
   8a7a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8a7a4:	f63f aeaf 	bhi.w	8a506 <__aeabi_dmul+0xde>
   8a7a8:	ebb5 0c03 	subs.w	ip, r5, r3
   8a7ac:	bf04      	itt	eq
   8a7ae:	ebb6 0c02 	subseq.w	ip, r6, r2
   8a7b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8a7b6:	f150 0000 	adcs.w	r0, r0, #0
   8a7ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8a7be:	bd70      	pop	{r4, r5, r6, pc}
   8a7c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8a7c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8a7c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8a7cc:	bfc2      	ittt	gt
   8a7ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   8a7d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8a7d6:	bd70      	popgt	{r4, r5, r6, pc}
   8a7d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8a7dc:	f04f 0e00 	mov.w	lr, #0
   8a7e0:	3c01      	subs	r4, #1
   8a7e2:	e690      	b.n	8a506 <__aeabi_dmul+0xde>
   8a7e4:	ea45 0e06 	orr.w	lr, r5, r6
   8a7e8:	e68d      	b.n	8a506 <__aeabi_dmul+0xde>
   8a7ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8a7ee:	ea94 0f0c 	teq	r4, ip
   8a7f2:	bf08      	it	eq
   8a7f4:	ea95 0f0c 	teqeq	r5, ip
   8a7f8:	f43f af3b 	beq.w	8a672 <__aeabi_dmul+0x24a>
   8a7fc:	ea94 0f0c 	teq	r4, ip
   8a800:	d10a      	bne.n	8a818 <__aeabi_ddiv+0x19c>
   8a802:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8a806:	f47f af34 	bne.w	8a672 <__aeabi_dmul+0x24a>
   8a80a:	ea95 0f0c 	teq	r5, ip
   8a80e:	f47f af25 	bne.w	8a65c <__aeabi_dmul+0x234>
   8a812:	4610      	mov	r0, r2
   8a814:	4619      	mov	r1, r3
   8a816:	e72c      	b.n	8a672 <__aeabi_dmul+0x24a>
   8a818:	ea95 0f0c 	teq	r5, ip
   8a81c:	d106      	bne.n	8a82c <__aeabi_ddiv+0x1b0>
   8a81e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8a822:	f43f aefd 	beq.w	8a620 <__aeabi_dmul+0x1f8>
   8a826:	4610      	mov	r0, r2
   8a828:	4619      	mov	r1, r3
   8a82a:	e722      	b.n	8a672 <__aeabi_dmul+0x24a>
   8a82c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8a830:	bf18      	it	ne
   8a832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8a836:	f47f aec5 	bne.w	8a5c4 <__aeabi_dmul+0x19c>
   8a83a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8a83e:	f47f af0d 	bne.w	8a65c <__aeabi_dmul+0x234>
   8a842:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8a846:	f47f aeeb 	bne.w	8a620 <__aeabi_dmul+0x1f8>
   8a84a:	e712      	b.n	8a672 <__aeabi_dmul+0x24a>

0008a84c <__gedf2>:
   8a84c:	f04f 3cff 	mov.w	ip, #4294967295
   8a850:	e006      	b.n	8a860 <__cmpdf2+0x4>
   8a852:	bf00      	nop

0008a854 <__ledf2>:
   8a854:	f04f 0c01 	mov.w	ip, #1
   8a858:	e002      	b.n	8a860 <__cmpdf2+0x4>
   8a85a:	bf00      	nop

0008a85c <__cmpdf2>:
   8a85c:	f04f 0c01 	mov.w	ip, #1
   8a860:	f84d cd04 	str.w	ip, [sp, #-4]!
   8a864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8a868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a86c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8a870:	bf18      	it	ne
   8a872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8a876:	d01b      	beq.n	8a8b0 <__cmpdf2+0x54>
   8a878:	b001      	add	sp, #4
   8a87a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8a87e:	bf0c      	ite	eq
   8a880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8a884:	ea91 0f03 	teqne	r1, r3
   8a888:	bf02      	ittt	eq
   8a88a:	ea90 0f02 	teqeq	r0, r2
   8a88e:	2000      	moveq	r0, #0
   8a890:	4770      	bxeq	lr
   8a892:	f110 0f00 	cmn.w	r0, #0
   8a896:	ea91 0f03 	teq	r1, r3
   8a89a:	bf58      	it	pl
   8a89c:	4299      	cmppl	r1, r3
   8a89e:	bf08      	it	eq
   8a8a0:	4290      	cmpeq	r0, r2
   8a8a2:	bf2c      	ite	cs
   8a8a4:	17d8      	asrcs	r0, r3, #31
   8a8a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8a8aa:	f040 0001 	orr.w	r0, r0, #1
   8a8ae:	4770      	bx	lr
   8a8b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8a8b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a8b8:	d102      	bne.n	8a8c0 <__cmpdf2+0x64>
   8a8ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8a8be:	d107      	bne.n	8a8d0 <__cmpdf2+0x74>
   8a8c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8a8c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a8c8:	d1d6      	bne.n	8a878 <__cmpdf2+0x1c>
   8a8ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8a8ce:	d0d3      	beq.n	8a878 <__cmpdf2+0x1c>
   8a8d0:	f85d 0b04 	ldr.w	r0, [sp], #4
   8a8d4:	4770      	bx	lr
   8a8d6:	bf00      	nop

0008a8d8 <__aeabi_cdrcmple>:
   8a8d8:	4684      	mov	ip, r0
   8a8da:	4610      	mov	r0, r2
   8a8dc:	4662      	mov	r2, ip
   8a8de:	468c      	mov	ip, r1
   8a8e0:	4619      	mov	r1, r3
   8a8e2:	4663      	mov	r3, ip
   8a8e4:	e000      	b.n	8a8e8 <__aeabi_cdcmpeq>
   8a8e6:	bf00      	nop

0008a8e8 <__aeabi_cdcmpeq>:
   8a8e8:	b501      	push	{r0, lr}
   8a8ea:	f7ff ffb7 	bl	8a85c <__cmpdf2>
   8a8ee:	2800      	cmp	r0, #0
   8a8f0:	bf48      	it	mi
   8a8f2:	f110 0f00 	cmnmi.w	r0, #0
   8a8f6:	bd01      	pop	{r0, pc}

0008a8f8 <__aeabi_dcmpeq>:
   8a8f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a8fc:	f7ff fff4 	bl	8a8e8 <__aeabi_cdcmpeq>
   8a900:	bf0c      	ite	eq
   8a902:	2001      	moveq	r0, #1
   8a904:	2000      	movne	r0, #0
   8a906:	f85d fb08 	ldr.w	pc, [sp], #8
   8a90a:	bf00      	nop

0008a90c <__aeabi_dcmplt>:
   8a90c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a910:	f7ff ffea 	bl	8a8e8 <__aeabi_cdcmpeq>
   8a914:	bf34      	ite	cc
   8a916:	2001      	movcc	r0, #1
   8a918:	2000      	movcs	r0, #0
   8a91a:	f85d fb08 	ldr.w	pc, [sp], #8
   8a91e:	bf00      	nop

0008a920 <__aeabi_dcmple>:
   8a920:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a924:	f7ff ffe0 	bl	8a8e8 <__aeabi_cdcmpeq>
   8a928:	bf94      	ite	ls
   8a92a:	2001      	movls	r0, #1
   8a92c:	2000      	movhi	r0, #0
   8a92e:	f85d fb08 	ldr.w	pc, [sp], #8
   8a932:	bf00      	nop

0008a934 <__aeabi_dcmpge>:
   8a934:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a938:	f7ff ffce 	bl	8a8d8 <__aeabi_cdrcmple>
   8a93c:	bf94      	ite	ls
   8a93e:	2001      	movls	r0, #1
   8a940:	2000      	movhi	r0, #0
   8a942:	f85d fb08 	ldr.w	pc, [sp], #8
   8a946:	bf00      	nop

0008a948 <__aeabi_dcmpgt>:
   8a948:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a94c:	f7ff ffc4 	bl	8a8d8 <__aeabi_cdrcmple>
   8a950:	bf34      	ite	cc
   8a952:	2001      	movcc	r0, #1
   8a954:	2000      	movcs	r0, #0
   8a956:	f85d fb08 	ldr.w	pc, [sp], #8
   8a95a:	bf00      	nop

0008a95c <__aeabi_d2uiz>:
   8a95c:	004a      	lsls	r2, r1, #1
   8a95e:	d211      	bcs.n	8a984 <__aeabi_d2uiz+0x28>
   8a960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8a964:	d211      	bcs.n	8a98a <__aeabi_d2uiz+0x2e>
   8a966:	d50d      	bpl.n	8a984 <__aeabi_d2uiz+0x28>
   8a968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8a96c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8a970:	d40e      	bmi.n	8a990 <__aeabi_d2uiz+0x34>
   8a972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8a976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8a97a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8a97e:	fa23 f002 	lsr.w	r0, r3, r2
   8a982:	4770      	bx	lr
   8a984:	f04f 0000 	mov.w	r0, #0
   8a988:	4770      	bx	lr
   8a98a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8a98e:	d102      	bne.n	8a996 <__aeabi_d2uiz+0x3a>
   8a990:	f04f 30ff 	mov.w	r0, #4294967295
   8a994:	4770      	bx	lr
   8a996:	f04f 0000 	mov.w	r0, #0
   8a99a:	4770      	bx	lr

0008a99c <__register_exitproc>:
   8a99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8a9a0:	4698      	mov	r8, r3
   8a9a2:	4b23      	ldr	r3, [pc, #140]	; (8aa30 <__register_exitproc+0x94>)
   8a9a4:	4606      	mov	r6, r0
   8a9a6:	681c      	ldr	r4, [r3, #0]
   8a9a8:	460f      	mov	r7, r1
   8a9aa:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   8a9ae:	4691      	mov	r9, r2
   8a9b0:	b918      	cbnz	r0, 8a9ba <__register_exitproc+0x1e>
   8a9b2:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   8a9b6:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   8a9ba:	6841      	ldr	r1, [r0, #4]
   8a9bc:	291f      	cmp	r1, #31
   8a9be:	dd16      	ble.n	8a9ee <__register_exitproc+0x52>
   8a9c0:	481c      	ldr	r0, [pc, #112]	; (8aa34 <__register_exitproc+0x98>)
   8a9c2:	b918      	cbnz	r0, 8a9cc <__register_exitproc+0x30>
   8a9c4:	f04f 30ff 	mov.w	r0, #4294967295
   8a9c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8a9cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8a9d0:	f3af 8000 	nop.w
   8a9d4:	2800      	cmp	r0, #0
   8a9d6:	d0f5      	beq.n	8a9c4 <__register_exitproc+0x28>
   8a9d8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   8a9dc:	2500      	movs	r5, #0
   8a9de:	6045      	str	r5, [r0, #4]
   8a9e0:	6002      	str	r2, [r0, #0]
   8a9e2:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   8a9e6:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   8a9ea:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   8a9ee:	b1b6      	cbz	r6, 8aa1e <__register_exitproc+0x82>
   8a9f0:	6844      	ldr	r4, [r0, #4]
   8a9f2:	2201      	movs	r2, #1
   8a9f4:	fa02 f204 	lsl.w	r2, r2, r4
   8a9f8:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   8a9fc:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   8aa00:	4311      	orrs	r1, r2
   8aa02:	2e02      	cmp	r6, #2
   8aa04:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   8aa08:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   8aa0c:	461c      	mov	r4, r3
   8aa0e:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   8aa12:	d104      	bne.n	8aa1e <__register_exitproc+0x82>
   8aa14:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   8aa18:	431a      	orrs	r2, r3
   8aa1a:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   8aa1e:	6841      	ldr	r1, [r0, #4]
   8aa20:	1c8b      	adds	r3, r1, #2
   8aa22:	1c4a      	adds	r2, r1, #1
   8aa24:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   8aa28:	6042      	str	r2, [r0, #4]
   8aa2a:	2000      	movs	r0, #0
   8aa2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8aa30:	0008f5b0 	.word	0x0008f5b0
   8aa34:	00000000 	.word	0x00000000

0008aa38 <__libc_fini_array>:
   8aa38:	b570      	push	{r4, r5, r6, lr}
   8aa3a:	4b08      	ldr	r3, [pc, #32]	; (8aa5c <__libc_fini_array+0x24>)
   8aa3c:	4c08      	ldr	r4, [pc, #32]	; (8aa60 <__libc_fini_array+0x28>)
   8aa3e:	2500      	movs	r5, #0
   8aa40:	1ae0      	subs	r0, r4, r3
   8aa42:	1084      	asrs	r4, r0, #2
   8aa44:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   8aa48:	3d04      	subs	r5, #4
   8aa4a:	b11c      	cbz	r4, 8aa54 <__libc_fini_array+0x1c>
   8aa4c:	5972      	ldr	r2, [r6, r5]
   8aa4e:	4790      	blx	r2
   8aa50:	3c01      	subs	r4, #1
   8aa52:	e7f9      	b.n	8aa48 <__libc_fini_array+0x10>
   8aa54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   8aa58:	f004 bea4 	b.w	8f7a4 <_fini>
   8aa5c:	0008f7b0 	.word	0x0008f7b0
   8aa60:	0008f7b4 	.word	0x0008f7b4

0008aa64 <__libc_init_array>:
   8aa64:	b538      	push	{r3, r4, r5, lr}
   8aa66:	4d0e      	ldr	r5, [pc, #56]	; (8aaa0 <__libc_init_array+0x3c>)
   8aa68:	4b0e      	ldr	r3, [pc, #56]	; (8aaa4 <__libc_init_array+0x40>)
   8aa6a:	2400      	movs	r4, #0
   8aa6c:	1ae8      	subs	r0, r5, r3
   8aa6e:	1085      	asrs	r5, r0, #2
   8aa70:	42ac      	cmp	r4, r5
   8aa72:	d005      	beq.n	8aa80 <__libc_init_array+0x1c>
   8aa74:	490b      	ldr	r1, [pc, #44]	; (8aaa4 <__libc_init_array+0x40>)
   8aa76:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   8aa7a:	4790      	blx	r2
   8aa7c:	3401      	adds	r4, #1
   8aa7e:	e7f7      	b.n	8aa70 <__libc_init_array+0xc>
   8aa80:	f004 fe86 	bl	8f790 <_init>
   8aa84:	4908      	ldr	r1, [pc, #32]	; (8aaa8 <__libc_init_array+0x44>)
   8aa86:	4a09      	ldr	r2, [pc, #36]	; (8aaac <__libc_init_array+0x48>)
   8aa88:	1a54      	subs	r4, r2, r1
   8aa8a:	10a5      	asrs	r5, r4, #2
   8aa8c:	2400      	movs	r4, #0
   8aa8e:	42ac      	cmp	r4, r5
   8aa90:	d005      	beq.n	8aa9e <__libc_init_array+0x3a>
   8aa92:	4b05      	ldr	r3, [pc, #20]	; (8aaa8 <__libc_init_array+0x44>)
   8aa94:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8aa98:	4780      	blx	r0
   8aa9a:	3401      	adds	r4, #1
   8aa9c:	e7f7      	b.n	8aa8e <__libc_init_array+0x2a>
   8aa9e:	bd38      	pop	{r3, r4, r5, pc}
   8aaa0:	0008f79c 	.word	0x0008f79c
   8aaa4:	0008f79c 	.word	0x0008f79c
   8aaa8:	0008f79c 	.word	0x0008f79c
   8aaac:	0008f7a4 	.word	0x0008f7a4

0008aab0 <memcpy>:
   8aab0:	b510      	push	{r4, lr}
   8aab2:	2300      	movs	r3, #0
   8aab4:	4293      	cmp	r3, r2
   8aab6:	d003      	beq.n	8aac0 <memcpy+0x10>
   8aab8:	5ccc      	ldrb	r4, [r1, r3]
   8aaba:	54c4      	strb	r4, [r0, r3]
   8aabc:	3301      	adds	r3, #1
   8aabe:	e7f9      	b.n	8aab4 <memcpy+0x4>
   8aac0:	bd10      	pop	{r4, pc}

0008aac2 <memmove>:
   8aac2:	4281      	cmp	r1, r0
   8aac4:	b570      	push	{r4, r5, r6, lr}
   8aac6:	d20e      	bcs.n	8aae6 <memmove+0x24>
   8aac8:	188c      	adds	r4, r1, r2
   8aaca:	42a0      	cmp	r0, r4
   8aacc:	d20b      	bcs.n	8aae6 <memmove+0x24>
   8aace:	1885      	adds	r5, r0, r2
   8aad0:	4613      	mov	r3, r2
   8aad2:	f113 33ff 	adds.w	r3, r3, #4294967295
   8aad6:	d305      	bcc.n	8aae4 <memmove+0x22>
   8aad8:	4251      	negs	r1, r2
   8aada:	1866      	adds	r6, r4, r1
   8aadc:	5cf6      	ldrb	r6, [r6, r3]
   8aade:	1869      	adds	r1, r5, r1
   8aae0:	54ce      	strb	r6, [r1, r3]
   8aae2:	e7f6      	b.n	8aad2 <memmove+0x10>
   8aae4:	bd70      	pop	{r4, r5, r6, pc}
   8aae6:	2300      	movs	r3, #0
   8aae8:	4293      	cmp	r3, r2
   8aaea:	d003      	beq.n	8aaf4 <memmove+0x32>
   8aaec:	5ccc      	ldrb	r4, [r1, r3]
   8aaee:	54c4      	strb	r4, [r0, r3]
   8aaf0:	3301      	adds	r3, #1
   8aaf2:	e7f9      	b.n	8aae8 <memmove+0x26>
   8aaf4:	bd70      	pop	{r4, r5, r6, pc}

0008aaf6 <memset>:
   8aaf6:	1882      	adds	r2, r0, r2
   8aaf8:	4603      	mov	r3, r0
   8aafa:	4293      	cmp	r3, r2
   8aafc:	d002      	beq.n	8ab04 <memset+0xe>
   8aafe:	f803 1b01 	strb.w	r1, [r3], #1
   8ab02:	e7fa      	b.n	8aafa <memset+0x4>
   8ab04:	4770      	bx	lr
	...

0008ab08 <_snprintf_r>:
   8ab08:	b408      	push	{r3}
   8ab0a:	b530      	push	{r4, r5, lr}
   8ab0c:	1e14      	subs	r4, r2, #0
   8ab0e:	b09c      	sub	sp, #112	; 0x70
   8ab10:	4605      	mov	r5, r0
   8ab12:	da04      	bge.n	8ab1e <_snprintf_r+0x16>
   8ab14:	208b      	movs	r0, #139	; 0x8b
   8ab16:	6028      	str	r0, [r5, #0]
   8ab18:	f04f 30ff 	mov.w	r0, #4294967295
   8ab1c:	e01e      	b.n	8ab5c <_snprintf_r+0x54>
   8ab1e:	f44f 7302 	mov.w	r3, #520	; 0x208
   8ab22:	f8ad 3014 	strh.w	r3, [sp, #20]
   8ab26:	9102      	str	r1, [sp, #8]
   8ab28:	9106      	str	r1, [sp, #24]
   8ab2a:	d001      	beq.n	8ab30 <_snprintf_r+0x28>
   8ab2c:	1e60      	subs	r0, r4, #1
   8ab2e:	e000      	b.n	8ab32 <_snprintf_r+0x2a>
   8ab30:	4620      	mov	r0, r4
   8ab32:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8ab36:	ab20      	add	r3, sp, #128	; 0x80
   8ab38:	9004      	str	r0, [sp, #16]
   8ab3a:	9007      	str	r0, [sp, #28]
   8ab3c:	f8ad 1016 	strh.w	r1, [sp, #22]
   8ab40:	4628      	mov	r0, r5
   8ab42:	a902      	add	r1, sp, #8
   8ab44:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   8ab46:	9301      	str	r3, [sp, #4]
   8ab48:	f000 feea 	bl	8b920 <_svfprintf_r>
   8ab4c:	1c43      	adds	r3, r0, #1
   8ab4e:	da01      	bge.n	8ab54 <_snprintf_r+0x4c>
   8ab50:	228b      	movs	r2, #139	; 0x8b
   8ab52:	602a      	str	r2, [r5, #0]
   8ab54:	b114      	cbz	r4, 8ab5c <_snprintf_r+0x54>
   8ab56:	9b02      	ldr	r3, [sp, #8]
   8ab58:	2100      	movs	r1, #0
   8ab5a:	7019      	strb	r1, [r3, #0]
   8ab5c:	b01c      	add	sp, #112	; 0x70
   8ab5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8ab62:	b001      	add	sp, #4
   8ab64:	4770      	bx	lr

0008ab66 <snprintf>:
   8ab66:	b40c      	push	{r2, r3}
   8ab68:	b530      	push	{r4, r5, lr}
   8ab6a:	4b17      	ldr	r3, [pc, #92]	; (8abc8 <snprintf+0x62>)
   8ab6c:	1e0c      	subs	r4, r1, #0
   8ab6e:	b09d      	sub	sp, #116	; 0x74
   8ab70:	681d      	ldr	r5, [r3, #0]
   8ab72:	da04      	bge.n	8ab7e <snprintf+0x18>
   8ab74:	208b      	movs	r0, #139	; 0x8b
   8ab76:	6028      	str	r0, [r5, #0]
   8ab78:	f04f 30ff 	mov.w	r0, #4294967295
   8ab7c:	e01e      	b.n	8abbc <snprintf+0x56>
   8ab7e:	f44f 7102 	mov.w	r1, #520	; 0x208
   8ab82:	f8ad 1014 	strh.w	r1, [sp, #20]
   8ab86:	9002      	str	r0, [sp, #8]
   8ab88:	9006      	str	r0, [sp, #24]
   8ab8a:	d001      	beq.n	8ab90 <snprintf+0x2a>
   8ab8c:	1e60      	subs	r0, r4, #1
   8ab8e:	e000      	b.n	8ab92 <snprintf+0x2c>
   8ab90:	4620      	mov	r0, r4
   8ab92:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8ab96:	9004      	str	r0, [sp, #16]
   8ab98:	9007      	str	r0, [sp, #28]
   8ab9a:	f8ad 2016 	strh.w	r2, [sp, #22]
   8ab9e:	ab21      	add	r3, sp, #132	; 0x84
   8aba0:	9a20      	ldr	r2, [sp, #128]	; 0x80
   8aba2:	4628      	mov	r0, r5
   8aba4:	a902      	add	r1, sp, #8
   8aba6:	9301      	str	r3, [sp, #4]
   8aba8:	f000 feba 	bl	8b920 <_svfprintf_r>
   8abac:	1c42      	adds	r2, r0, #1
   8abae:	da01      	bge.n	8abb4 <snprintf+0x4e>
   8abb0:	238b      	movs	r3, #139	; 0x8b
   8abb2:	602b      	str	r3, [r5, #0]
   8abb4:	b114      	cbz	r4, 8abbc <snprintf+0x56>
   8abb6:	9a02      	ldr	r2, [sp, #8]
   8abb8:	2100      	movs	r1, #0
   8abba:	7011      	strb	r1, [r2, #0]
   8abbc:	b01d      	add	sp, #116	; 0x74
   8abbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8abc2:	b002      	add	sp, #8
   8abc4:	4770      	bx	lr
   8abc6:	bf00      	nop
   8abc8:	200702a8 	.word	0x200702a8

0008abcc <strlen>:
   8abcc:	4603      	mov	r3, r0
   8abce:	f813 2b01 	ldrb.w	r2, [r3], #1
   8abd2:	2a00      	cmp	r2, #0
   8abd4:	d1fb      	bne.n	8abce <strlen+0x2>
   8abd6:	1a18      	subs	r0, r3, r0
   8abd8:	3801      	subs	r0, #1
   8abda:	4770      	bx	lr

0008abdc <strncasecmp>:
   8abdc:	4b0f      	ldr	r3, [pc, #60]	; (8ac1c <strncasecmp+0x40>)
   8abde:	b5f0      	push	{r4, r5, r6, r7, lr}
   8abe0:	681e      	ldr	r6, [r3, #0]
   8abe2:	2300      	movs	r3, #0
   8abe4:	4293      	cmp	r3, r2
   8abe6:	d015      	beq.n	8ac14 <strncasecmp+0x38>
   8abe8:	5cc5      	ldrb	r5, [r0, r3]
   8abea:	1974      	adds	r4, r6, r5
   8abec:	7867      	ldrb	r7, [r4, #1]
   8abee:	f007 0403 	and.w	r4, r7, #3
   8abf2:	2c01      	cmp	r4, #1
   8abf4:	5ccc      	ldrb	r4, [r1, r3]
   8abf6:	bf08      	it	eq
   8abf8:	3520      	addeq	r5, #32
   8abfa:	1937      	adds	r7, r6, r4
   8abfc:	787f      	ldrb	r7, [r7, #1]
   8abfe:	f007 0703 	and.w	r7, r7, #3
   8ac02:	2f01      	cmp	r7, #1
   8ac04:	bf08      	it	eq
   8ac06:	3420      	addeq	r4, #32
   8ac08:	1b2d      	subs	r5, r5, r4
   8ac0a:	d104      	bne.n	8ac16 <strncasecmp+0x3a>
   8ac0c:	3301      	adds	r3, #1
   8ac0e:	2c00      	cmp	r4, #0
   8ac10:	d1e8      	bne.n	8abe4 <strncasecmp+0x8>
   8ac12:	e000      	b.n	8ac16 <strncasecmp+0x3a>
   8ac14:	2500      	movs	r5, #0
   8ac16:	4628      	mov	r0, r5
   8ac18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8ac1a:	bf00      	nop
   8ac1c:	200702a0 	.word	0x200702a0

0008ac20 <strncmp>:
   8ac20:	b570      	push	{r4, r5, r6, lr}
   8ac22:	b192      	cbz	r2, 8ac4a <strncmp+0x2a>
   8ac24:	460b      	mov	r3, r1
   8ac26:	4605      	mov	r5, r0
   8ac28:	b91a      	cbnz	r2, 8ac32 <strncmp+0x12>
   8ac2a:	7828      	ldrb	r0, [r5, #0]
   8ac2c:	7819      	ldrb	r1, [r3, #0]
   8ac2e:	1a40      	subs	r0, r0, r1
   8ac30:	bd70      	pop	{r4, r5, r6, pc}
   8ac32:	f810 6b01 	ldrb.w	r6, [r0], #1
   8ac36:	781c      	ldrb	r4, [r3, #0]
   8ac38:	3101      	adds	r1, #1
   8ac3a:	42b4      	cmp	r4, r6
   8ac3c:	d1f5      	bne.n	8ac2a <strncmp+0xa>
   8ac3e:	2a01      	cmp	r2, #1
   8ac40:	d0f3      	beq.n	8ac2a <strncmp+0xa>
   8ac42:	3a01      	subs	r2, #1
   8ac44:	2c00      	cmp	r4, #0
   8ac46:	d1ed      	bne.n	8ac24 <strncmp+0x4>
   8ac48:	e7ef      	b.n	8ac2a <strncmp+0xa>
   8ac4a:	4610      	mov	r0, r2
   8ac4c:	bd70      	pop	{r4, r5, r6, pc}

0008ac4e <strnlen>:
   8ac4e:	b510      	push	{r4, lr}
   8ac50:	4603      	mov	r3, r0
   8ac52:	1841      	adds	r1, r0, r1
   8ac54:	428b      	cmp	r3, r1
   8ac56:	461a      	mov	r2, r3
   8ac58:	d101      	bne.n	8ac5e <strnlen+0x10>
   8ac5a:	1a10      	subs	r0, r2, r0
   8ac5c:	bd10      	pop	{r4, pc}
   8ac5e:	7814      	ldrb	r4, [r2, #0]
   8ac60:	3301      	adds	r3, #1
   8ac62:	2c00      	cmp	r4, #0
   8ac64:	d1f6      	bne.n	8ac54 <strnlen+0x6>
   8ac66:	e7f8      	b.n	8ac5a <strnlen+0xc>

0008ac68 <match>:
   8ac68:	b530      	push	{r4, r5, lr}
   8ac6a:	6805      	ldr	r5, [r0, #0]
   8ac6c:	f811 2b01 	ldrb.w	r2, [r1], #1
   8ac70:	462c      	mov	r4, r5
   8ac72:	1c6b      	adds	r3, r5, #1
   8ac74:	b152      	cbz	r2, 8ac8c <match+0x24>
   8ac76:	461d      	mov	r5, r3
   8ac78:	7863      	ldrb	r3, [r4, #1]
   8ac7a:	2b40      	cmp	r3, #64	; 0x40
   8ac7c:	dd02      	ble.n	8ac84 <match+0x1c>
   8ac7e:	2b5a      	cmp	r3, #90	; 0x5a
   8ac80:	bfd8      	it	le
   8ac82:	3320      	addle	r3, #32
   8ac84:	4293      	cmp	r3, r2
   8ac86:	d0f1      	beq.n	8ac6c <match+0x4>
   8ac88:	2000      	movs	r0, #0
   8ac8a:	bd30      	pop	{r4, r5, pc}
   8ac8c:	6003      	str	r3, [r0, #0]
   8ac8e:	2001      	movs	r0, #1
   8ac90:	bd30      	pop	{r4, r5, pc}

0008ac92 <_strtod_r>:
   8ac92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ac96:	b099      	sub	sp, #100	; 0x64
   8ac98:	4681      	mov	r9, r0
   8ac9a:	4688      	mov	r8, r1
   8ac9c:	9211      	str	r2, [sp, #68]	; 0x44
   8ac9e:	f04f 0a00 	mov.w	sl, #0
   8aca2:	f04f 0b00 	mov.w	fp, #0
   8aca6:	9113      	str	r1, [sp, #76]	; 0x4c
   8aca8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8acaa:	7813      	ldrb	r3, [r2, #0]
   8acac:	2b0d      	cmp	r3, #13
   8acae:	d805      	bhi.n	8acbc <_strtod_r+0x2a>
   8acb0:	2b09      	cmp	r3, #9
   8acb2:	d213      	bcs.n	8acdc <_strtod_r+0x4a>
   8acb4:	2b00      	cmp	r3, #0
   8acb6:	f000 81b6 	beq.w	8b026 <_strtod_r+0x394>
   8acba:	e012      	b.n	8ace2 <_strtod_r+0x50>
   8acbc:	2b2b      	cmp	r3, #43	; 0x2b
   8acbe:	d006      	beq.n	8acce <_strtod_r+0x3c>
   8acc0:	2b2d      	cmp	r3, #45	; 0x2d
   8acc2:	d002      	beq.n	8acca <_strtod_r+0x38>
   8acc4:	2b20      	cmp	r3, #32
   8acc6:	d10c      	bne.n	8ace2 <_strtod_r+0x50>
   8acc8:	e008      	b.n	8acdc <_strtod_r+0x4a>
   8acca:	2301      	movs	r3, #1
   8accc:	e000      	b.n	8acd0 <_strtod_r+0x3e>
   8acce:	2300      	movs	r3, #0
   8acd0:	1c54      	adds	r4, r2, #1
   8acd2:	9413      	str	r4, [sp, #76]	; 0x4c
   8acd4:	7852      	ldrb	r2, [r2, #1]
   8acd6:	930d      	str	r3, [sp, #52]	; 0x34
   8acd8:	b92a      	cbnz	r2, 8ace6 <_strtod_r+0x54>
   8acda:	e1a4      	b.n	8b026 <_strtod_r+0x394>
   8acdc:	1c51      	adds	r1, r2, #1
   8acde:	9113      	str	r1, [sp, #76]	; 0x4c
   8ace0:	e7e2      	b.n	8aca8 <_strtod_r+0x16>
   8ace2:	2400      	movs	r4, #0
   8ace4:	940d      	str	r4, [sp, #52]	; 0x34
   8ace6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   8ace8:	7821      	ldrb	r1, [r4, #0]
   8acea:	2930      	cmp	r1, #48	; 0x30
   8acec:	d15c      	bne.n	8ada8 <_strtod_r+0x116>
   8acee:	7863      	ldrb	r3, [r4, #1]
   8acf0:	2b58      	cmp	r3, #88	; 0x58
   8acf2:	d001      	beq.n	8acf8 <_strtod_r+0x66>
   8acf4:	2b78      	cmp	r3, #120	; 0x78
   8acf6:	d14b      	bne.n	8ad90 <_strtod_r+0xfe>
   8acf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8acfa:	4fa3      	ldr	r7, [pc, #652]	; (8af88 <_strtod_r+0x2f6>)
   8acfc:	ae14      	add	r6, sp, #80	; 0x50
   8acfe:	9600      	str	r6, [sp, #0]
   8ad00:	9201      	str	r2, [sp, #4]
   8ad02:	4648      	mov	r0, r9
   8ad04:	a913      	add	r1, sp, #76	; 0x4c
   8ad06:	463a      	mov	r2, r7
   8ad08:	ab15      	add	r3, sp, #84	; 0x54
   8ad0a:	f001 fb75 	bl	8c3f8 <__gethex>
   8ad0e:	f010 0607 	ands.w	r6, r0, #7
   8ad12:	4605      	mov	r5, r0
   8ad14:	f000 852a 	beq.w	8b76c <_strtod_r+0xada>
   8ad18:	2e06      	cmp	r6, #6
   8ad1a:	d103      	bne.n	8ad24 <_strtod_r+0x92>
   8ad1c:	1c62      	adds	r2, r4, #1
   8ad1e:	9213      	str	r2, [sp, #76]	; 0x4c
   8ad20:	f000 bd24 	b.w	8b76c <_strtod_r+0xada>
   8ad24:	9a14      	ldr	r2, [sp, #80]	; 0x50
   8ad26:	b13a      	cbz	r2, 8ad38 <_strtod_r+0xa6>
   8ad28:	a816      	add	r0, sp, #88	; 0x58
   8ad2a:	6839      	ldr	r1, [r7, #0]
   8ad2c:	f002 fc4a 	bl	8d5c4 <__copybits>
   8ad30:	4648      	mov	r0, r9
   8ad32:	9914      	ldr	r1, [sp, #80]	; 0x50
   8ad34:	f002 f8bc 	bl	8ceb0 <_Bfree>
   8ad38:	9815      	ldr	r0, [sp, #84]	; 0x54
   8ad3a:	2e06      	cmp	r6, #6
   8ad3c:	d821      	bhi.n	8ad82 <_strtod_r+0xf0>
   8ad3e:	e8df f006 	tbb	[pc, r6]
   8ad42:	0d04      	.short	0x0d04
   8ad44:	0d1c1708 	.word	0x0d1c1708
   8ad48:	04          	.byte	0x04
   8ad49:	00          	.byte	0x00
   8ad4a:	f04f 0b00 	mov.w	fp, #0
   8ad4e:	46da      	mov	sl, fp
   8ad50:	e017      	b.n	8ad82 <_strtod_r+0xf0>
   8ad52:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8ad56:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
   8ad5a:	e012      	b.n	8ad82 <_strtod_r+0xf0>
   8ad5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   8ad5e:	f200 4133 	addw	r1, r0, #1075	; 0x433
   8ad62:	f423 1480 	bic.w	r4, r3, #1048576	; 0x100000
   8ad66:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8ad6a:	ea44 5b01 	orr.w	fp, r4, r1, lsl #20
   8ad6e:	e008      	b.n	8ad82 <_strtod_r+0xf0>
   8ad70:	f8df b218 	ldr.w	fp, [pc, #536]	; 8af8c <_strtod_r+0x2fa>
   8ad74:	f04f 0a00 	mov.w	sl, #0
   8ad78:	e003      	b.n	8ad82 <_strtod_r+0xf0>
   8ad7a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   8ad7e:	f04f 3aff 	mov.w	sl, #4294967295
   8ad82:	0729      	lsls	r1, r5, #28
   8ad84:	f140 84f2 	bpl.w	8b76c <_strtod_r+0xada>
   8ad88:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   8ad8c:	f000 bcee 	b.w	8b76c <_strtod_r+0xada>
   8ad90:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   8ad92:	1c62      	adds	r2, r4, #1
   8ad94:	9213      	str	r2, [sp, #76]	; 0x4c
   8ad96:	7861      	ldrb	r1, [r4, #1]
   8ad98:	2930      	cmp	r1, #48	; 0x30
   8ad9a:	d0f9      	beq.n	8ad90 <_strtod_r+0xfe>
   8ad9c:	2900      	cmp	r1, #0
   8ad9e:	f000 84e5 	beq.w	8b76c <_strtod_r+0xada>
   8ada2:	2601      	movs	r6, #1
   8ada4:	9606      	str	r6, [sp, #24]
   8ada6:	e001      	b.n	8adac <_strtod_r+0x11a>
   8ada8:	2500      	movs	r5, #0
   8adaa:	9506      	str	r5, [sp, #24]
   8adac:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   8adae:	9707      	str	r7, [sp, #28]
   8adb0:	2700      	movs	r7, #0
   8adb2:	9704      	str	r7, [sp, #16]
   8adb4:	463e      	mov	r6, r7
   8adb6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   8adb8:	782c      	ldrb	r4, [r5, #0]
   8adba:	2c2f      	cmp	r4, #47	; 0x2f
   8adbc:	dc16      	bgt.n	8adec <_strtod_r+0x15a>
   8adbe:	4648      	mov	r0, r9
   8adc0:	f001 fe2c 	bl	8ca1c <_localeconv_r>
   8adc4:	6803      	ldr	r3, [r0, #0]
   8adc6:	4648      	mov	r0, r9
   8adc8:	9303      	str	r3, [sp, #12]
   8adca:	f001 fe27 	bl	8ca1c <_localeconv_r>
   8adce:	6800      	ldr	r0, [r0, #0]
   8add0:	f7ff fefc 	bl	8abcc <strlen>
   8add4:	9903      	ldr	r1, [sp, #12]
   8add6:	4602      	mov	r2, r0
   8add8:	4628      	mov	r0, r5
   8adda:	f7ff ff21 	bl	8ac20 <strncmp>
   8adde:	4602      	mov	r2, r0
   8ade0:	b1c8      	cbz	r0, 8ae16 <_strtod_r+0x184>
   8ade2:	2300      	movs	r3, #0
   8ade4:	4635      	mov	r5, r6
   8ade6:	461a      	mov	r2, r3
   8ade8:	9305      	str	r3, [sp, #20]
   8adea:	e077      	b.n	8aedc <_strtod_r+0x24a>
   8adec:	2c39      	cmp	r4, #57	; 0x39
   8adee:	dce6      	bgt.n	8adbe <_strtod_r+0x12c>
   8adf0:	2e0f      	cmp	r6, #15
   8adf2:	dc0c      	bgt.n	8ae0e <_strtod_r+0x17c>
   8adf4:	2e08      	cmp	r6, #8
   8adf6:	bfd8      	it	le
   8adf8:	9804      	ldrle	r0, [sp, #16]
   8adfa:	f04f 030a 	mov.w	r3, #10
   8adfe:	f1a4 0430 	sub.w	r4, r4, #48	; 0x30
   8ae02:	bfd6      	itet	le
   8ae04:	fb03 4000 	mlale	r0, r3, r0, r4
   8ae08:	fb03 4707 	mlagt	r7, r3, r7, r4
   8ae0c:	9004      	strle	r0, [sp, #16]
   8ae0e:	1c6c      	adds	r4, r5, #1
   8ae10:	3601      	adds	r6, #1
   8ae12:	9413      	str	r4, [sp, #76]	; 0x4c
   8ae14:	e7cf      	b.n	8adb6 <_strtod_r+0x124>
   8ae16:	4648      	mov	r0, r9
   8ae18:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   8ae1a:	9203      	str	r2, [sp, #12]
   8ae1c:	f001 fdfe 	bl	8ca1c <_localeconv_r>
   8ae20:	6800      	ldr	r0, [r0, #0]
   8ae22:	f7ff fed3 	bl	8abcc <strlen>
   8ae26:	1821      	adds	r1, r4, r0
   8ae28:	9113      	str	r1, [sp, #76]	; 0x4c
   8ae2a:	5c24      	ldrb	r4, [r4, r0]
   8ae2c:	9a03      	ldr	r2, [sp, #12]
   8ae2e:	b116      	cbz	r6, 8ae36 <_strtod_r+0x1a4>
   8ae30:	4635      	mov	r5, r6
   8ae32:	4613      	mov	r3, r2
   8ae34:	e047      	b.n	8aec6 <_strtod_r+0x234>
   8ae36:	4633      	mov	r3, r6
   8ae38:	2c30      	cmp	r4, #48	; 0x30
   8ae3a:	d105      	bne.n	8ae48 <_strtod_r+0x1b6>
   8ae3c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   8ae3e:	3301      	adds	r3, #1
   8ae40:	1c69      	adds	r1, r5, #1
   8ae42:	9113      	str	r1, [sp, #76]	; 0x4c
   8ae44:	786c      	ldrb	r4, [r5, #1]
   8ae46:	e7f7      	b.n	8ae38 <_strtod_r+0x1a6>
   8ae48:	f1a4 0031 	sub.w	r0, r4, #49	; 0x31
   8ae4c:	2808      	cmp	r0, #8
   8ae4e:	d841      	bhi.n	8aed4 <_strtod_r+0x242>
   8ae50:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   8ae52:	461a      	mov	r2, r3
   8ae54:	2300      	movs	r3, #0
   8ae56:	9507      	str	r5, [sp, #28]
   8ae58:	461d      	mov	r5, r3
   8ae5a:	1c59      	adds	r1, r3, #1
   8ae5c:	3c30      	subs	r4, #48	; 0x30
   8ae5e:	9405      	str	r4, [sp, #20]
   8ae60:	d02c      	beq.n	8aebc <_strtod_r+0x22a>
   8ae62:	1852      	adds	r2, r2, r1
   8ae64:	1c68      	adds	r0, r5, #1
   8ae66:	ebc5 0c00 	rsb	ip, r5, r0
   8ae6a:	458c      	cmp	ip, r1
   8ae6c:	da11      	bge.n	8ae92 <_strtod_r+0x200>
   8ae6e:	f100 3cff 	add.w	ip, r0, #4294967295
   8ae72:	f1bc 0f10 	cmp.w	ip, #16
   8ae76:	dc0a      	bgt.n	8ae8e <_strtod_r+0x1fc>
   8ae78:	2809      	cmp	r0, #9
   8ae7a:	bfd8      	it	le
   8ae7c:	9c04      	ldrle	r4, [sp, #16]
   8ae7e:	f04f 0e0a 	mov.w	lr, #10
   8ae82:	bfd6      	itet	le
   8ae84:	fb0e f404 	mulle.w	r4, lr, r4
   8ae88:	fb0e f707 	mulgt.w	r7, lr, r7
   8ae8c:	9404      	strle	r4, [sp, #16]
   8ae8e:	3001      	adds	r0, #1
   8ae90:	e7e9      	b.n	8ae66 <_strtod_r+0x1d4>
   8ae92:	2b00      	cmp	r3, #0
   8ae94:	bfac      	ite	ge
   8ae96:	18eb      	addge	r3, r5, r3
   8ae98:	1c2b      	addlt	r3, r5, #0
   8ae9a:	1c5d      	adds	r5, r3, #1
   8ae9c:	2b10      	cmp	r3, #16
   8ae9e:	dc0c      	bgt.n	8aeba <_strtod_r+0x228>
   8aea0:	2d09      	cmp	r5, #9
   8aea2:	f04f 030a 	mov.w	r3, #10
   8aea6:	dc05      	bgt.n	8aeb4 <_strtod_r+0x222>
   8aea8:	9904      	ldr	r1, [sp, #16]
   8aeaa:	9805      	ldr	r0, [sp, #20]
   8aeac:	fb03 0301 	mla	r3, r3, r1, r0
   8aeb0:	9304      	str	r3, [sp, #16]
   8aeb2:	e002      	b.n	8aeba <_strtod_r+0x228>
   8aeb4:	9c05      	ldr	r4, [sp, #20]
   8aeb6:	fb03 4707 	mla	r7, r3, r7, r4
   8aeba:	2100      	movs	r1, #0
   8aebc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   8aebe:	460b      	mov	r3, r1
   8aec0:	1c60      	adds	r0, r4, #1
   8aec2:	9013      	str	r0, [sp, #76]	; 0x4c
   8aec4:	7864      	ldrb	r4, [r4, #1]
   8aec6:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
   8aeca:	2909      	cmp	r1, #9
   8aecc:	d9c5      	bls.n	8ae5a <_strtod_r+0x1c8>
   8aece:	2001      	movs	r0, #1
   8aed0:	9005      	str	r0, [sp, #20]
   8aed2:	e003      	b.n	8aedc <_strtod_r+0x24a>
   8aed4:	2500      	movs	r5, #0
   8aed6:	2101      	movs	r1, #1
   8aed8:	462a      	mov	r2, r5
   8aeda:	9105      	str	r1, [sp, #20]
   8aedc:	2c65      	cmp	r4, #101	; 0x65
   8aede:	d001      	beq.n	8aee4 <_strtod_r+0x252>
   8aee0:	2c45      	cmp	r4, #69	; 0x45
   8aee2:	d157      	bne.n	8af94 <_strtod_r+0x302>
   8aee4:	b925      	cbnz	r5, 8aef0 <_strtod_r+0x25e>
   8aee6:	b91b      	cbnz	r3, 8aef0 <_strtod_r+0x25e>
   8aee8:	9c06      	ldr	r4, [sp, #24]
   8aeea:	2c00      	cmp	r4, #0
   8aeec:	f000 809b 	beq.w	8b026 <_strtod_r+0x394>
   8aef0:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   8aef4:	f108 0101 	add.w	r1, r8, #1
   8aef8:	9113      	str	r1, [sp, #76]	; 0x4c
   8aefa:	f898 4001 	ldrb.w	r4, [r8, #1]
   8aefe:	2c2b      	cmp	r4, #43	; 0x2b
   8af00:	d004      	beq.n	8af0c <_strtod_r+0x27a>
   8af02:	2c2d      	cmp	r4, #45	; 0x2d
   8af04:	d005      	beq.n	8af12 <_strtod_r+0x280>
   8af06:	2000      	movs	r0, #0
   8af08:	9008      	str	r0, [sp, #32]
   8af0a:	e009      	b.n	8af20 <_strtod_r+0x28e>
   8af0c:	2100      	movs	r1, #0
   8af0e:	9108      	str	r1, [sp, #32]
   8af10:	e001      	b.n	8af16 <_strtod_r+0x284>
   8af12:	2401      	movs	r4, #1
   8af14:	9408      	str	r4, [sp, #32]
   8af16:	f108 0002 	add.w	r0, r8, #2
   8af1a:	9013      	str	r0, [sp, #76]	; 0x4c
   8af1c:	f898 4002 	ldrb.w	r4, [r8, #2]
   8af20:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
   8af24:	2909      	cmp	r1, #9
   8af26:	d833      	bhi.n	8af90 <_strtod_r+0x2fe>
   8af28:	2c30      	cmp	r4, #48	; 0x30
   8af2a:	d104      	bne.n	8af36 <_strtod_r+0x2a4>
   8af2c:	9913      	ldr	r1, [sp, #76]	; 0x4c
   8af2e:	1c4c      	adds	r4, r1, #1
   8af30:	9413      	str	r4, [sp, #76]	; 0x4c
   8af32:	784c      	ldrb	r4, [r1, #1]
   8af34:	e7f8      	b.n	8af28 <_strtod_r+0x296>
   8af36:	f1a4 0031 	sub.w	r0, r4, #49	; 0x31
   8af3a:	2808      	cmp	r0, #8
   8af3c:	d82a      	bhi.n	8af94 <_strtod_r+0x302>
   8af3e:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
   8af42:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   8af44:	940a      	str	r4, [sp, #40]	; 0x28
   8af46:	9913      	ldr	r1, [sp, #76]	; 0x4c
   8af48:	f101 0c01 	add.w	ip, r1, #1
   8af4c:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
   8af50:	784c      	ldrb	r4, [r1, #1]
   8af52:	2c2f      	cmp	r4, #47	; 0x2f
   8af54:	dc0b      	bgt.n	8af6e <_strtod_r+0x2dc>
   8af56:	990a      	ldr	r1, [sp, #40]	; 0x28
   8af58:	ebc1 0e0c 	rsb	lr, r1, ip
   8af5c:	f1be 0f08 	cmp.w	lr, #8
   8af60:	f644 6e1f 	movw	lr, #19999	; 0x4e1f
   8af64:	dc0b      	bgt.n	8af7e <_strtod_r+0x2ec>
   8af66:	4570      	cmp	r0, lr
   8af68:	bfb8      	it	lt
   8af6a:	4686      	movlt	lr, r0
   8af6c:	e007      	b.n	8af7e <_strtod_r+0x2ec>
   8af6e:	2c39      	cmp	r4, #57	; 0x39
   8af70:	dcf1      	bgt.n	8af56 <_strtod_r+0x2c4>
   8af72:	f04f 0e0a 	mov.w	lr, #10
   8af76:	fb0e 4000 	mla	r0, lr, r0, r4
   8af7a:	3830      	subs	r0, #48	; 0x30
   8af7c:	e7e3      	b.n	8af46 <_strtod_r+0x2b4>
   8af7e:	9808      	ldr	r0, [sp, #32]
   8af80:	b150      	cbz	r0, 8af98 <_strtod_r+0x306>
   8af82:	f1ce 0e00 	rsb	lr, lr, #0
   8af86:	e007      	b.n	8af98 <_strtod_r+0x306>
   8af88:	200706d8 	.word	0x200706d8
   8af8c:	7ff00000 	.word	0x7ff00000
   8af90:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   8af94:	f04f 0e00 	mov.w	lr, #0
   8af98:	2d00      	cmp	r5, #0
   8af9a:	d149      	bne.n	8b030 <_strtod_r+0x39e>
   8af9c:	2b00      	cmp	r3, #0
   8af9e:	f040 83e5 	bne.w	8b76c <_strtod_r+0xada>
   8afa2:	9906      	ldr	r1, [sp, #24]
   8afa4:	2900      	cmp	r1, #0
   8afa6:	f040 83e1 	bne.w	8b76c <_strtod_r+0xada>
   8afaa:	9a05      	ldr	r2, [sp, #20]
   8afac:	2a00      	cmp	r2, #0
   8afae:	d13a      	bne.n	8b026 <_strtod_r+0x394>
   8afb0:	2c4e      	cmp	r4, #78	; 0x4e
   8afb2:	d01b      	beq.n	8afec <_strtod_r+0x35a>
   8afb4:	dc02      	bgt.n	8afbc <_strtod_r+0x32a>
   8afb6:	2c49      	cmp	r4, #73	; 0x49
   8afb8:	d135      	bne.n	8b026 <_strtod_r+0x394>
   8afba:	e004      	b.n	8afc6 <_strtod_r+0x334>
   8afbc:	2c69      	cmp	r4, #105	; 0x69
   8afbe:	d002      	beq.n	8afc6 <_strtod_r+0x334>
   8afc0:	2c6e      	cmp	r4, #110	; 0x6e
   8afc2:	d130      	bne.n	8b026 <_strtod_r+0x394>
   8afc4:	e012      	b.n	8afec <_strtod_r+0x35a>
   8afc6:	a813      	add	r0, sp, #76	; 0x4c
   8afc8:	49a3      	ldr	r1, [pc, #652]	; (8b258 <_strtod_r+0x5c6>)
   8afca:	f7ff fe4d 	bl	8ac68 <match>
   8afce:	b350      	cbz	r0, 8b026 <_strtod_r+0x394>
   8afd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8afd2:	49a2      	ldr	r1, [pc, #648]	; (8b25c <_strtod_r+0x5ca>)
   8afd4:	1e58      	subs	r0, r3, #1
   8afd6:	9013      	str	r0, [sp, #76]	; 0x4c
   8afd8:	a813      	add	r0, sp, #76	; 0x4c
   8afda:	f7ff fe45 	bl	8ac68 <match>
   8afde:	b910      	cbnz	r0, 8afe6 <_strtod_r+0x354>
   8afe0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   8afe2:	1c61      	adds	r1, r4, #1
   8afe4:	9113      	str	r1, [sp, #76]	; 0x4c
   8afe6:	f8df b288 	ldr.w	fp, [pc, #648]	; 8b270 <_strtod_r+0x5de>
   8afea:	e019      	b.n	8b020 <_strtod_r+0x38e>
   8afec:	a813      	add	r0, sp, #76	; 0x4c
   8afee:	499c      	ldr	r1, [pc, #624]	; (8b260 <_strtod_r+0x5ce>)
   8aff0:	f7ff fe3a 	bl	8ac68 <match>
   8aff4:	b1b8      	cbz	r0, 8b026 <_strtod_r+0x394>
   8aff6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8aff8:	7813      	ldrb	r3, [r2, #0]
   8affa:	2b28      	cmp	r3, #40	; 0x28
   8affc:	d10e      	bne.n	8b01c <_strtod_r+0x38a>
   8affe:	a813      	add	r0, sp, #76	; 0x4c
   8b000:	4998      	ldr	r1, [pc, #608]	; (8b264 <_strtod_r+0x5d2>)
   8b002:	aa16      	add	r2, sp, #88	; 0x58
   8b004:	f001 fc46 	bl	8c894 <__hexnan>
   8b008:	2805      	cmp	r0, #5
   8b00a:	d107      	bne.n	8b01c <_strtod_r+0x38a>
   8b00c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   8b00e:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8b012:	f040 44ff 	orr.w	r4, r0, #2139095040	; 0x7f800000
   8b016:	f444 0be0 	orr.w	fp, r4, #7340032	; 0x700000
   8b01a:	e3a7      	b.n	8b76c <_strtod_r+0xada>
   8b01c:	f8df b25c 	ldr.w	fp, [pc, #604]	; 8b27c <_strtod_r+0x5ea>
   8b020:	f04f 0a00 	mov.w	sl, #0
   8b024:	e3a2      	b.n	8b76c <_strtod_r+0xada>
   8b026:	2200      	movs	r2, #0
   8b028:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   8b02c:	920d      	str	r2, [sp, #52]	; 0x34
   8b02e:	e39d      	b.n	8b76c <_strtod_r+0xada>
   8b030:	ebc2 020e 	rsb	r2, r2, lr
   8b034:	9804      	ldr	r0, [sp, #16]
   8b036:	9206      	str	r2, [sp, #24]
   8b038:	f7ff f980 	bl	8a33c <__aeabi_ui2d>
   8b03c:	2d10      	cmp	r5, #16
   8b03e:	bfb4      	ite	lt
   8b040:	462c      	movlt	r4, r5
   8b042:	2410      	movge	r4, #16
   8b044:	2e00      	cmp	r6, #0
   8b046:	bf08      	it	eq
   8b048:	462e      	moveq	r6, r5
   8b04a:	2c09      	cmp	r4, #9
   8b04c:	4682      	mov	sl, r0
   8b04e:	468b      	mov	fp, r1
   8b050:	dd15      	ble.n	8b07e <_strtod_r+0x3ec>
   8b052:	4b85      	ldr	r3, [pc, #532]	; (8b268 <_strtod_r+0x5d6>)
   8b054:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   8b058:	f1a2 0348 	sub.w	r3, r2, #72	; 0x48
   8b05c:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b060:	f7ff f9e2 	bl	8a428 <__aeabi_dmul>
   8b064:	4682      	mov	sl, r0
   8b066:	4638      	mov	r0, r7
   8b068:	468b      	mov	fp, r1
   8b06a:	f7ff f967 	bl	8a33c <__aeabi_ui2d>
   8b06e:	4602      	mov	r2, r0
   8b070:	460b      	mov	r3, r1
   8b072:	4650      	mov	r0, sl
   8b074:	4659      	mov	r1, fp
   8b076:	f7ff f825 	bl	8a0c4 <__adddf3>
   8b07a:	4682      	mov	sl, r0
   8b07c:	468b      	mov	fp, r1
   8b07e:	2d0f      	cmp	r5, #15
   8b080:	dc37      	bgt.n	8b0f2 <_strtod_r+0x460>
   8b082:	9906      	ldr	r1, [sp, #24]
   8b084:	2900      	cmp	r1, #0
   8b086:	f000 8371 	beq.w	8b76c <_strtod_r+0xada>
   8b08a:	dd24      	ble.n	8b0d6 <_strtod_r+0x444>
   8b08c:	2916      	cmp	r1, #22
   8b08e:	dc07      	bgt.n	8b0a0 <_strtod_r+0x40e>
   8b090:	4875      	ldr	r0, [pc, #468]	; (8b268 <_strtod_r+0x5d6>)
   8b092:	4652      	mov	r2, sl
   8b094:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   8b098:	e9d4 0100 	ldrd	r0, r1, [r4]
   8b09c:	465b      	mov	r3, fp
   8b09e:	e015      	b.n	8b0cc <_strtod_r+0x43a>
   8b0a0:	9906      	ldr	r1, [sp, #24]
   8b0a2:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
   8b0a6:	4291      	cmp	r1, r2
   8b0a8:	dc23      	bgt.n	8b0f2 <_strtod_r+0x460>
   8b0aa:	4c6f      	ldr	r4, [pc, #444]	; (8b268 <_strtod_r+0x5d6>)
   8b0ac:	f1c5 050f 	rsb	r5, r5, #15
   8b0b0:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   8b0b4:	4652      	mov	r2, sl
   8b0b6:	465b      	mov	r3, fp
   8b0b8:	e9d1 0100 	ldrd	r0, r1, [r1]
   8b0bc:	f7ff f9b4 	bl	8a428 <__aeabi_dmul>
   8b0c0:	9a06      	ldr	r2, [sp, #24]
   8b0c2:	1b55      	subs	r5, r2, r5
   8b0c4:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   8b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b0cc:	f7ff f9ac 	bl	8a428 <__aeabi_dmul>
   8b0d0:	4682      	mov	sl, r0
   8b0d2:	468b      	mov	fp, r1
   8b0d4:	e34a      	b.n	8b76c <_strtod_r+0xada>
   8b0d6:	9806      	ldr	r0, [sp, #24]
   8b0d8:	f110 0f16 	cmn.w	r0, #22
   8b0dc:	db09      	blt.n	8b0f2 <_strtod_r+0x460>
   8b0de:	4c62      	ldr	r4, [pc, #392]	; (8b268 <_strtod_r+0x5d6>)
   8b0e0:	4659      	mov	r1, fp
   8b0e2:	eba4 03c0 	sub.w	r3, r4, r0, lsl #3
   8b0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b0ea:	4650      	mov	r0, sl
   8b0ec:	f7ff fac6 	bl	8a67c <__aeabi_ddiv>
   8b0f0:	e7ee      	b.n	8b0d0 <_strtod_r+0x43e>
   8b0f2:	9806      	ldr	r0, [sp, #24]
   8b0f4:	1b2c      	subs	r4, r5, r4
   8b0f6:	1904      	adds	r4, r0, r4
   8b0f8:	2c00      	cmp	r4, #0
   8b0fa:	dd51      	ble.n	8b1a0 <_strtod_r+0x50e>
   8b0fc:	f014 010f 	ands.w	r1, r4, #15
   8b100:	d009      	beq.n	8b116 <_strtod_r+0x484>
   8b102:	4a59      	ldr	r2, [pc, #356]	; (8b268 <_strtod_r+0x5d6>)
   8b104:	465b      	mov	r3, fp
   8b106:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
   8b10a:	c803      	ldmia	r0, {r0, r1}
   8b10c:	4652      	mov	r2, sl
   8b10e:	f7ff f98b 	bl	8a428 <__aeabi_dmul>
   8b112:	4682      	mov	sl, r0
   8b114:	468b      	mov	fp, r1
   8b116:	f034 030f 	bics.w	r3, r4, #15
   8b11a:	f000 80b3 	beq.w	8b284 <_strtod_r+0x5f2>
   8b11e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
   8b122:	dd0f      	ble.n	8b144 <_strtod_r+0x4b2>
   8b124:	f04f 0800 	mov.w	r8, #0
   8b128:	f8cd 8010 	str.w	r8, [sp, #16]
   8b12c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   8b130:	f8cd 801c 	str.w	r8, [sp, #28]
   8b134:	2022      	movs	r0, #34	; 0x22
   8b136:	f8c9 0000 	str.w	r0, [r9]
   8b13a:	f8df b134 	ldr.w	fp, [pc, #308]	; 8b270 <_strtod_r+0x5de>
   8b13e:	f04f 0a00 	mov.w	sl, #0
   8b142:	e16e      	b.n	8b422 <_strtod_r+0x790>
   8b144:	4650      	mov	r0, sl
   8b146:	111f      	asrs	r7, r3, #4
   8b148:	4659      	mov	r1, fp
   8b14a:	f04f 0a00 	mov.w	sl, #0
   8b14e:	2f01      	cmp	r7, #1
   8b150:	dd0b      	ble.n	8b16a <_strtod_r+0x4d8>
   8b152:	07fa      	lsls	r2, r7, #31
   8b154:	d505      	bpl.n	8b162 <_strtod_r+0x4d0>
   8b156:	4c45      	ldr	r4, [pc, #276]	; (8b26c <_strtod_r+0x5da>)
   8b158:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
   8b15c:	ca0c      	ldmia	r2, {r2, r3}
   8b15e:	f7ff f963 	bl	8a428 <__aeabi_dmul>
   8b162:	f10a 0a01 	add.w	sl, sl, #1
   8b166:	107f      	asrs	r7, r7, #1
   8b168:	e7f1      	b.n	8b14e <_strtod_r+0x4bc>
   8b16a:	f1a1 7354 	sub.w	r3, r1, #55574528	; 0x3500000
   8b16e:	493f      	ldr	r1, [pc, #252]	; (8b26c <_strtod_r+0x5da>)
   8b170:	4602      	mov	r2, r0
   8b172:	eb01 00ca 	add.w	r0, r1, sl, lsl #3
   8b176:	c803      	ldmia	r0, {r0, r1}
   8b178:	f7ff f956 	bl	8a428 <__aeabi_dmul>
   8b17c:	4b3c      	ldr	r3, [pc, #240]	; (8b270 <_strtod_r+0x5de>)
   8b17e:	4c3d      	ldr	r4, [pc, #244]	; (8b274 <_strtod_r+0x5e2>)
   8b180:	400b      	ands	r3, r1
   8b182:	42a3      	cmp	r3, r4
   8b184:	4682      	mov	sl, r0
   8b186:	468b      	mov	fp, r1
   8b188:	d8cc      	bhi.n	8b124 <_strtod_r+0x492>
   8b18a:	f5a4 1780 	sub.w	r7, r4, #1048576	; 0x100000
   8b18e:	42bb      	cmp	r3, r7
   8b190:	bf86      	itte	hi
   8b192:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; 8b280 <_strtod_r+0x5ee>
   8b196:	f04f 3aff 	movhi.w	sl, #4294967295
   8b19a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
   8b19e:	e071      	b.n	8b284 <_strtod_r+0x5f2>
   8b1a0:	d070      	beq.n	8b284 <_strtod_r+0x5f2>
   8b1a2:	4267      	negs	r7, r4
   8b1a4:	f017 030f 	ands.w	r3, r7, #15
   8b1a8:	d00a      	beq.n	8b1c0 <_strtod_r+0x52e>
   8b1aa:	4a2f      	ldr	r2, [pc, #188]	; (8b268 <_strtod_r+0x5d6>)
   8b1ac:	4650      	mov	r0, sl
   8b1ae:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   8b1b2:	4659      	mov	r1, fp
   8b1b4:	e9d4 2300 	ldrd	r2, r3, [r4]
   8b1b8:	f7ff fa60 	bl	8a67c <__aeabi_ddiv>
   8b1bc:	4682      	mov	sl, r0
   8b1be:	468b      	mov	fp, r1
   8b1c0:	113f      	asrs	r7, r7, #4
   8b1c2:	d05f      	beq.n	8b284 <_strtod_r+0x5f2>
   8b1c4:	2f1f      	cmp	r7, #31
   8b1c6:	dd08      	ble.n	8b1da <_strtod_r+0x548>
   8b1c8:	f04f 0800 	mov.w	r8, #0
   8b1cc:	f8cd 8010 	str.w	r8, [sp, #16]
   8b1d0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   8b1d4:	f8cd 801c 	str.w	r8, [sp, #28]
   8b1d8:	e11c      	b.n	8b414 <_strtod_r+0x782>
   8b1da:	f017 0f10 	tst.w	r7, #16
   8b1de:	bf14      	ite	ne
   8b1e0:	216a      	movne	r1, #106	; 0x6a
   8b1e2:	2100      	moveq	r1, #0
   8b1e4:	4c24      	ldr	r4, [pc, #144]	; (8b278 <_strtod_r+0x5e6>)
   8b1e6:	9105      	str	r1, [sp, #20]
   8b1e8:	4650      	mov	r0, sl
   8b1ea:	4659      	mov	r1, fp
   8b1ec:	2f00      	cmp	r7, #0
   8b1ee:	dd08      	ble.n	8b202 <_strtod_r+0x570>
   8b1f0:	07fb      	lsls	r3, r7, #31
   8b1f2:	d503      	bpl.n	8b1fc <_strtod_r+0x56a>
   8b1f4:	e9d4 2300 	ldrd	r2, r3, [r4]
   8b1f8:	f7ff f916 	bl	8a428 <__aeabi_dmul>
   8b1fc:	107f      	asrs	r7, r7, #1
   8b1fe:	3408      	adds	r4, #8
   8b200:	e7f4      	b.n	8b1ec <_strtod_r+0x55a>
   8b202:	4682      	mov	sl, r0
   8b204:	9805      	ldr	r0, [sp, #20]
   8b206:	468b      	mov	fp, r1
   8b208:	b1e0      	cbz	r0, 8b244 <_strtod_r+0x5b2>
   8b20a:	f3c1 530a 	ubfx	r3, r1, #20, #11
   8b20e:	f1c3 046b 	rsb	r4, r3, #107	; 0x6b
   8b212:	2c00      	cmp	r4, #0
   8b214:	dd16      	ble.n	8b244 <_strtod_r+0x5b2>
   8b216:	2c1f      	cmp	r4, #31
   8b218:	dd0e      	ble.n	8b238 <_strtod_r+0x5a6>
   8b21a:	2c34      	cmp	r4, #52	; 0x34
   8b21c:	f04f 0a00 	mov.w	sl, #0
   8b220:	dd02      	ble.n	8b228 <_strtod_r+0x596>
   8b222:	f04f 7b5c 	mov.w	fp, #57671680	; 0x3700000
   8b226:	e00d      	b.n	8b244 <_strtod_r+0x5b2>
   8b228:	3c20      	subs	r4, #32
   8b22a:	f04f 33ff 	mov.w	r3, #4294967295
   8b22e:	fa03 f404 	lsl.w	r4, r3, r4
   8b232:	ea04 0b01 	and.w	fp, r4, r1
   8b236:	e005      	b.n	8b244 <_strtod_r+0x5b2>
   8b238:	f04f 31ff 	mov.w	r1, #4294967295
   8b23c:	fa01 f004 	lsl.w	r0, r1, r4
   8b240:	ea00 0a0a 	and.w	sl, r0, sl
   8b244:	4650      	mov	r0, sl
   8b246:	4659      	mov	r1, fp
   8b248:	2200      	movs	r2, #0
   8b24a:	2300      	movs	r3, #0
   8b24c:	f7ff fb54 	bl	8a8f8 <__aeabi_dcmpeq>
   8b250:	2800      	cmp	r0, #0
   8b252:	d1b9      	bne.n	8b1c8 <_strtod_r+0x536>
   8b254:	e018      	b.n	8b288 <_strtod_r+0x5f6>
   8b256:	bf00      	nop
   8b258:	0008f5e0 	.word	0x0008f5e0
   8b25c:	0008f5e3 	.word	0x0008f5e3
   8b260:	0008f5e9 	.word	0x0008f5e9
   8b264:	200706ec 	.word	0x200706ec
   8b268:	0008f658 	.word	0x0008f658
   8b26c:	0008f748 	.word	0x0008f748
   8b270:	7ff00000 	.word	0x7ff00000
   8b274:	7ca00000 	.word	0x7ca00000
   8b278:	0008f5b8 	.word	0x0008f5b8
   8b27c:	fff80000 	.word	0xfff80000
   8b280:	7fefffff 	.word	0x7fefffff
   8b284:	2100      	movs	r1, #0
   8b286:	9105      	str	r1, [sp, #20]
   8b288:	9804      	ldr	r0, [sp, #16]
   8b28a:	4632      	mov	r2, r6
   8b28c:	9000      	str	r0, [sp, #0]
   8b28e:	9907      	ldr	r1, [sp, #28]
   8b290:	4648      	mov	r0, r9
   8b292:	462b      	mov	r3, r5
   8b294:	f001 fe51 	bl	8cf3a <__s2b>
   8b298:	9e06      	ldr	r6, [sp, #24]
   8b29a:	900a      	str	r0, [sp, #40]	; 0x28
   8b29c:	2e00      	cmp	r6, #0
   8b29e:	f2c0 80c5 	blt.w	8b42c <_strtod_r+0x79a>
   8b2a2:	2200      	movs	r2, #0
   8b2a4:	9210      	str	r2, [sp, #64]	; 0x40
   8b2a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8b2a8:	4648      	mov	r0, r9
   8b2aa:	6861      	ldr	r1, [r4, #4]
   8b2ac:	f001 fdda 	bl	8ce64 <_Balloc>
   8b2b0:	6923      	ldr	r3, [r4, #16]
   8b2b2:	4621      	mov	r1, r4
   8b2b4:	1c9f      	adds	r7, r3, #2
   8b2b6:	00ba      	lsls	r2, r7, #2
   8b2b8:	310c      	adds	r1, #12
   8b2ba:	9007      	str	r0, [sp, #28]
   8b2bc:	300c      	adds	r0, #12
   8b2be:	f7ff fbf7 	bl	8aab0 <memcpy>
   8b2c2:	a912      	add	r1, sp, #72	; 0x48
   8b2c4:	a815      	add	r0, sp, #84	; 0x54
   8b2c6:	4652      	mov	r2, sl
   8b2c8:	9100      	str	r1, [sp, #0]
   8b2ca:	9001      	str	r0, [sp, #4]
   8b2cc:	465b      	mov	r3, fp
   8b2ce:	4648      	mov	r0, r9
   8b2d0:	e9cd ab08 	strd	sl, fp, [sp, #32]
   8b2d4:	f002 f8e4 	bl	8d4a0 <__d2b>
   8b2d8:	2101      	movs	r1, #1
   8b2da:	9014      	str	r0, [sp, #80]	; 0x50
   8b2dc:	4648      	mov	r0, r9
   8b2de:	f001 feba 	bl	8d056 <__i2b>
   8b2e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8b2e4:	9e06      	ldr	r6, [sp, #24]
   8b2e6:	2a00      	cmp	r2, #0
   8b2e8:	9004      	str	r0, [sp, #16]
   8b2ea:	ea26 77e6 	bic.w	r7, r6, r6, asr #31
   8b2ee:	f2c0 80a0 	blt.w	8b432 <_strtod_r+0x7a0>
   8b2f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8b2f4:	463b      	mov	r3, r7
   8b2f6:	18ad      	adds	r5, r5, r2
   8b2f8:	9c05      	ldr	r4, [sp, #20]
   8b2fa:	9e15      	ldr	r6, [sp, #84]	; 0x54
   8b2fc:	1b14      	subs	r4, r2, r4
   8b2fe:	19a0      	adds	r0, r4, r6
   8b300:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
   8b304:	4288      	cmp	r0, r1
   8b306:	bfb4      	ite	lt
   8b308:	f204 4433 	addwlt	r4, r4, #1075	; 0x433
   8b30c:	f1c6 0436 	rsbge	r4, r6, #54	; 0x36
   8b310:	9a05      	ldr	r2, [sp, #20]
   8b312:	192e      	adds	r6, r5, r4
   8b314:	191b      	adds	r3, r3, r4
   8b316:	42ae      	cmp	r6, r5
   8b318:	bfb4      	ite	lt
   8b31a:	4630      	movlt	r0, r6
   8b31c:	4628      	movge	r0, r5
   8b31e:	189c      	adds	r4, r3, r2
   8b320:	42a0      	cmp	r0, r4
   8b322:	bfa8      	it	ge
   8b324:	4620      	movge	r0, r4
   8b326:	2800      	cmp	r0, #0
   8b328:	dd02      	ble.n	8b330 <_strtod_r+0x69e>
   8b32a:	1a36      	subs	r6, r6, r0
   8b32c:	1a24      	subs	r4, r4, r0
   8b32e:	1a2d      	subs	r5, r5, r0
   8b330:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8b332:	b18b      	cbz	r3, 8b358 <_strtod_r+0x6c6>
   8b334:	461a      	mov	r2, r3
   8b336:	9904      	ldr	r1, [sp, #16]
   8b338:	4648      	mov	r0, r9
   8b33a:	f001 ff26 	bl	8d18a <__pow5mult>
   8b33e:	9004      	str	r0, [sp, #16]
   8b340:	9904      	ldr	r1, [sp, #16]
   8b342:	9a14      	ldr	r2, [sp, #80]	; 0x50
   8b344:	4648      	mov	r0, r9
   8b346:	f001 fe8f 	bl	8d068 <__multiply>
   8b34a:	9914      	ldr	r1, [sp, #80]	; 0x50
   8b34c:	4680      	mov	r8, r0
   8b34e:	4648      	mov	r0, r9
   8b350:	f001 fdae 	bl	8ceb0 <_Bfree>
   8b354:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   8b358:	2e00      	cmp	r6, #0
   8b35a:	dd05      	ble.n	8b368 <_strtod_r+0x6d6>
   8b35c:	4648      	mov	r0, r9
   8b35e:	9914      	ldr	r1, [sp, #80]	; 0x50
   8b360:	4632      	mov	r2, r6
   8b362:	f001 ff55 	bl	8d210 <__lshift>
   8b366:	9014      	str	r0, [sp, #80]	; 0x50
   8b368:	b12f      	cbz	r7, 8b376 <_strtod_r+0x6e4>
   8b36a:	4648      	mov	r0, r9
   8b36c:	9907      	ldr	r1, [sp, #28]
   8b36e:	463a      	mov	r2, r7
   8b370:	f001 ff0b 	bl	8d18a <__pow5mult>
   8b374:	9007      	str	r0, [sp, #28]
   8b376:	2c00      	cmp	r4, #0
   8b378:	dd05      	ble.n	8b386 <_strtod_r+0x6f4>
   8b37a:	4648      	mov	r0, r9
   8b37c:	9907      	ldr	r1, [sp, #28]
   8b37e:	4622      	mov	r2, r4
   8b380:	f001 ff46 	bl	8d210 <__lshift>
   8b384:	9007      	str	r0, [sp, #28]
   8b386:	2d00      	cmp	r5, #0
   8b388:	dd05      	ble.n	8b396 <_strtod_r+0x704>
   8b38a:	4648      	mov	r0, r9
   8b38c:	9904      	ldr	r1, [sp, #16]
   8b38e:	462a      	mov	r2, r5
   8b390:	f001 ff3e 	bl	8d210 <__lshift>
   8b394:	9004      	str	r0, [sp, #16]
   8b396:	9914      	ldr	r1, [sp, #80]	; 0x50
   8b398:	9a07      	ldr	r2, [sp, #28]
   8b39a:	4648      	mov	r0, r9
   8b39c:	f001 ffa9 	bl	8d2f2 <__mdiff>
   8b3a0:	2100      	movs	r1, #0
   8b3a2:	68c4      	ldr	r4, [r0, #12]
   8b3a4:	60c1      	str	r1, [r0, #12]
   8b3a6:	9904      	ldr	r1, [sp, #16]
   8b3a8:	4680      	mov	r8, r0
   8b3aa:	940b      	str	r4, [sp, #44]	; 0x2c
   8b3ac:	f001 ff84 	bl	8d2b8 <__mcmp>
   8b3b0:	2800      	cmp	r0, #0
   8b3b2:	da46      	bge.n	8b442 <_strtod_r+0x7b0>
   8b3b4:	2c00      	cmp	r4, #0
   8b3b6:	f040 81b2 	bne.w	8b71e <_strtod_r+0xa8c>
   8b3ba:	f1ba 0f00 	cmp.w	sl, #0
   8b3be:	f040 81ae 	bne.w	8b71e <_strtod_r+0xa8c>
   8b3c2:	f3cb 0013 	ubfx	r0, fp, #0, #20
   8b3c6:	465c      	mov	r4, fp
   8b3c8:	2800      	cmp	r0, #0
   8b3ca:	f040 81a8 	bne.w	8b71e <_strtod_r+0xa8c>
   8b3ce:	4a9c      	ldr	r2, [pc, #624]	; (8b640 <_strtod_r+0x9ae>)
   8b3d0:	4022      	ands	r2, r4
   8b3d2:	f1b2 6fd6 	cmp.w	r2, #112197632	; 0x6b00000
   8b3d6:	f240 81a2 	bls.w	8b71e <_strtod_r+0xa8c>
   8b3da:	f8d8 3014 	ldr.w	r3, [r8, #20]
   8b3de:	b35b      	cbz	r3, 8b438 <_strtod_r+0x7a6>
   8b3e0:	4641      	mov	r1, r8
   8b3e2:	2201      	movs	r2, #1
   8b3e4:	4648      	mov	r0, r9
   8b3e6:	f001 ff13 	bl	8d210 <__lshift>
   8b3ea:	9904      	ldr	r1, [sp, #16]
   8b3ec:	4680      	mov	r8, r0
   8b3ee:	f001 ff63 	bl	8d2b8 <__mcmp>
   8b3f2:	2800      	cmp	r0, #0
   8b3f4:	f340 8193 	ble.w	8b71e <_strtod_r+0xa8c>
   8b3f8:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
   8b3fc:	9b05      	ldr	r3, [sp, #20]
   8b3fe:	0d20      	lsrs	r0, r4, #20
   8b400:	0502      	lsls	r2, r0, #20
   8b402:	2b00      	cmp	r3, #0
   8b404:	d04a      	beq.n	8b49c <_strtod_r+0x80a>
   8b406:	f1b2 6fd6 	cmp.w	r2, #112197632	; 0x6b00000
   8b40a:	d847      	bhi.n	8b49c <_strtod_r+0x80a>
   8b40c:	f1b2 7f5c 	cmp.w	r2, #57671680	; 0x3700000
   8b410:	f200 8187 	bhi.w	8b722 <_strtod_r+0xa90>
   8b414:	2422      	movs	r4, #34	; 0x22
   8b416:	f04f 0a00 	mov.w	sl, #0
   8b41a:	f04f 0b00 	mov.w	fp, #0
   8b41e:	f8c9 4000 	str.w	r4, [r9]
   8b422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8b424:	2b00      	cmp	r3, #0
   8b426:	f040 818d 	bne.w	8b744 <_strtod_r+0xab2>
   8b42a:	e19f      	b.n	8b76c <_strtod_r+0xada>
   8b42c:	9d06      	ldr	r5, [sp, #24]
   8b42e:	426a      	negs	r2, r5
   8b430:	e738      	b.n	8b2a4 <_strtod_r+0x612>
   8b432:	1abb      	subs	r3, r7, r2
   8b434:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8b436:	e75f      	b.n	8b2f8 <_strtod_r+0x666>
   8b438:	f8d8 1010 	ldr.w	r1, [r8, #16]
   8b43c:	2901      	cmp	r1, #1
   8b43e:	dccf      	bgt.n	8b3e0 <_strtod_r+0x74e>
   8b440:	e16d      	b.n	8b71e <_strtod_r+0xa8c>
   8b442:	d159      	bne.n	8b4f8 <_strtod_r+0x866>
   8b444:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8b446:	b314      	cbz	r4, 8b48e <_strtod_r+0x7fc>
   8b448:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
   8b44c:	4c7d      	ldr	r4, [pc, #500]	; (8b644 <_strtod_r+0x9b2>)
   8b44e:	f421 0070 	bic.w	r0, r1, #15728640	; 0xf00000
   8b452:	42a0      	cmp	r0, r4
   8b454:	465a      	mov	r2, fp
   8b456:	d12a      	bne.n	8b4ae <_strtod_r+0x81c>
   8b458:	9b05      	ldr	r3, [sp, #20]
   8b45a:	4651      	mov	r1, sl
   8b45c:	b163      	cbz	r3, 8b478 <_strtod_r+0x7e6>
   8b45e:	4878      	ldr	r0, [pc, #480]	; (8b640 <_strtod_r+0x9ae>)
   8b460:	4010      	ands	r0, r2
   8b462:	f1b0 6fd4 	cmp.w	r0, #111149056	; 0x6a00000
   8b466:	d807      	bhi.n	8b478 <_strtod_r+0x7e6>
   8b468:	0d03      	lsrs	r3, r0, #20
   8b46a:	f1c3 046b 	rsb	r4, r3, #107	; 0x6b
   8b46e:	f04f 30ff 	mov.w	r0, #4294967295
   8b472:	fa00 f404 	lsl.w	r4, r0, r4
   8b476:	e001      	b.n	8b47c <_strtod_r+0x7ea>
   8b478:	f04f 34ff 	mov.w	r4, #4294967295
   8b47c:	42a1      	cmp	r1, r4
   8b47e:	d116      	bne.n	8b4ae <_strtod_r+0x81c>
   8b480:	496f      	ldr	r1, [pc, #444]	; (8b640 <_strtod_r+0x9ae>)
   8b482:	f04f 0a00 	mov.w	sl, #0
   8b486:	4011      	ands	r1, r2
   8b488:	f501 1b80 	add.w	fp, r1, #1048576	; 0x100000
   8b48c:	e147      	b.n	8b71e <_strtod_r+0xa8c>
   8b48e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   8b492:	b963      	cbnz	r3, 8b4ae <_strtod_r+0x81c>
   8b494:	f1ba 0f00 	cmp.w	sl, #0
   8b498:	d109      	bne.n	8b4ae <_strtod_r+0x81c>
   8b49a:	e7ad      	b.n	8b3f8 <_strtod_r+0x766>
   8b49c:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
   8b4a0:	ea6f 5c11 	mvn.w	ip, r1, lsr #20
   8b4a4:	ea6f 5b0c 	mvn.w	fp, ip, lsl #20
   8b4a8:	f04f 3aff 	mov.w	sl, #4294967295
   8b4ac:	e137      	b.n	8b71e <_strtod_r+0xa8c>
   8b4ae:	f00a 0201 	and.w	r2, sl, #1
   8b4b2:	2a00      	cmp	r2, #0
   8b4b4:	f000 8133 	beq.w	8b71e <_strtod_r+0xa8c>
   8b4b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8b4ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8b4be:	b153      	cbz	r3, 8b4d6 <_strtod_r+0x844>
   8b4c0:	f001 ff79 	bl	8d3b6 <__ulp>
   8b4c4:	4602      	mov	r2, r0
   8b4c6:	460b      	mov	r3, r1
   8b4c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8b4cc:	f7fe fdfa 	bl	8a0c4 <__adddf3>
   8b4d0:	4682      	mov	sl, r0
   8b4d2:	468b      	mov	fp, r1
   8b4d4:	e123      	b.n	8b71e <_strtod_r+0xa8c>
   8b4d6:	f001 ff6e 	bl	8d3b6 <__ulp>
   8b4da:	4602      	mov	r2, r0
   8b4dc:	460b      	mov	r3, r1
   8b4de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8b4e2:	f7fe fded 	bl	8a0c0 <__aeabi_dsub>
   8b4e6:	2200      	movs	r2, #0
   8b4e8:	2300      	movs	r3, #0
   8b4ea:	4682      	mov	sl, r0
   8b4ec:	468b      	mov	fp, r1
   8b4ee:	f7ff fa03 	bl	8a8f8 <__aeabi_dcmpeq>
   8b4f2:	2800      	cmp	r0, #0
   8b4f4:	d18e      	bne.n	8b414 <_strtod_r+0x782>
   8b4f6:	e112      	b.n	8b71e <_strtod_r+0xa8c>
   8b4f8:	4640      	mov	r0, r8
   8b4fa:	9904      	ldr	r1, [sp, #16]
   8b4fc:	f002 f824 	bl	8d548 <__ratio>
   8b500:	2200      	movs	r2, #0
   8b502:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8b506:	4604      	mov	r4, r0
   8b508:	460d      	mov	r5, r1
   8b50a:	f7ff fa09 	bl	8a920 <__aeabi_dcmple>
   8b50e:	b368      	cbz	r0, 8b56c <_strtod_r+0x8da>
   8b510:	980b      	ldr	r0, [sp, #44]	; 0x2c
   8b512:	b110      	cbz	r0, 8b51a <_strtod_r+0x888>
   8b514:	2600      	movs	r6, #0
   8b516:	4f4c      	ldr	r7, [pc, #304]	; (8b648 <_strtod_r+0x9b6>)
   8b518:	e00f      	b.n	8b53a <_strtod_r+0x8a8>
   8b51a:	4653      	mov	r3, sl
   8b51c:	f1ba 0f00 	cmp.w	sl, #0
   8b520:	d103      	bne.n	8b52a <_strtod_r+0x898>
   8b522:	f3cb 0613 	ubfx	r6, fp, #0, #20
   8b526:	b936      	cbnz	r6, 8b536 <_strtod_r+0x8a4>
   8b528:	e00a      	b.n	8b540 <_strtod_r+0x8ae>
   8b52a:	2b01      	cmp	r3, #1
   8b52c:	d103      	bne.n	8b536 <_strtod_r+0x8a4>
   8b52e:	f1bb 0f00 	cmp.w	fp, #0
   8b532:	f43f af6f 	beq.w	8b414 <_strtod_r+0x782>
   8b536:	4f45      	ldr	r7, [pc, #276]	; (8b64c <_strtod_r+0x9ba>)
   8b538:	2600      	movs	r6, #0
   8b53a:	2500      	movs	r5, #0
   8b53c:	4c42      	ldr	r4, [pc, #264]	; (8b648 <_strtod_r+0x9b6>)
   8b53e:	e025      	b.n	8b58c <_strtod_r+0x8fa>
   8b540:	4620      	mov	r0, r4
   8b542:	4629      	mov	r1, r5
   8b544:	2200      	movs	r2, #0
   8b546:	4b40      	ldr	r3, [pc, #256]	; (8b648 <_strtod_r+0x9b6>)
   8b548:	f7ff f9e0 	bl	8a90c <__aeabi_dcmplt>
   8b54c:	b940      	cbnz	r0, 8b560 <_strtod_r+0x8ce>
   8b54e:	4620      	mov	r0, r4
   8b550:	4629      	mov	r1, r5
   8b552:	2200      	movs	r2, #0
   8b554:	4b3e      	ldr	r3, [pc, #248]	; (8b650 <_strtod_r+0x9be>)
   8b556:	f7fe ff67 	bl	8a428 <__aeabi_dmul>
   8b55a:	4605      	mov	r5, r0
   8b55c:	460c      	mov	r4, r1
   8b55e:	e001      	b.n	8b564 <_strtod_r+0x8d2>
   8b560:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8b562:	4c3b      	ldr	r4, [pc, #236]	; (8b650 <_strtod_r+0x9be>)
   8b564:	462e      	mov	r6, r5
   8b566:	f104 4700 	add.w	r7, r4, #2147483648	; 0x80000000
   8b56a:	e00f      	b.n	8b58c <_strtod_r+0x8fa>
   8b56c:	4620      	mov	r0, r4
   8b56e:	4629      	mov	r1, r5
   8b570:	2200      	movs	r2, #0
   8b572:	4b37      	ldr	r3, [pc, #220]	; (8b650 <_strtod_r+0x9be>)
   8b574:	f7fe ff58 	bl	8a428 <__aeabi_dmul>
   8b578:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   8b57a:	4605      	mov	r5, r0
   8b57c:	460c      	mov	r4, r1
   8b57e:	b917      	cbnz	r7, 8b586 <_strtod_r+0x8f4>
   8b580:	f101 4200 	add.w	r2, r1, #2147483648	; 0x80000000
   8b584:	e000      	b.n	8b588 <_strtod_r+0x8f6>
   8b586:	460a      	mov	r2, r1
   8b588:	462e      	mov	r6, r5
   8b58a:	4617      	mov	r7, r2
   8b58c:	492c      	ldr	r1, [pc, #176]	; (8b640 <_strtod_r+0x9ae>)
   8b58e:	465b      	mov	r3, fp
   8b590:	4019      	ands	r1, r3
   8b592:	910c      	str	r1, [sp, #48]	; 0x30
   8b594:	4a2f      	ldr	r2, [pc, #188]	; (8b654 <_strtod_r+0x9c2>)
   8b596:	980c      	ldr	r0, [sp, #48]	; 0x30
   8b598:	4290      	cmp	r0, r2
   8b59a:	d12c      	bne.n	8b5f6 <_strtod_r+0x964>
   8b59c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   8b5a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8b5a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   8b5a8:	4650      	mov	r0, sl
   8b5aa:	4659      	mov	r1, fp
   8b5ac:	f001 ff03 	bl	8d3b6 <__ulp>
   8b5b0:	4602      	mov	r2, r0
   8b5b2:	460b      	mov	r3, r1
   8b5b4:	4630      	mov	r0, r6
   8b5b6:	4639      	mov	r1, r7
   8b5b8:	f7fe ff36 	bl	8a428 <__aeabi_dmul>
   8b5bc:	460b      	mov	r3, r1
   8b5be:	4602      	mov	r2, r0
   8b5c0:	4659      	mov	r1, fp
   8b5c2:	4650      	mov	r0, sl
   8b5c4:	f7fe fd7e 	bl	8a0c4 <__adddf3>
   8b5c8:	4682      	mov	sl, r0
   8b5ca:	481d      	ldr	r0, [pc, #116]	; (8b640 <_strtod_r+0x9ae>)
   8b5cc:	460b      	mov	r3, r1
   8b5ce:	4008      	ands	r0, r1
   8b5d0:	4921      	ldr	r1, [pc, #132]	; (8b658 <_strtod_r+0x9c6>)
   8b5d2:	4288      	cmp	r0, r1
   8b5d4:	d90c      	bls.n	8b5f0 <_strtod_r+0x95e>
   8b5d6:	4a21      	ldr	r2, [pc, #132]	; (8b65c <_strtod_r+0x9ca>)
   8b5d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8b5da:	4291      	cmp	r1, r2
   8b5dc:	d103      	bne.n	8b5e6 <_strtod_r+0x954>
   8b5de:	980e      	ldr	r0, [sp, #56]	; 0x38
   8b5e0:	1c42      	adds	r2, r0, #1
   8b5e2:	f43f ada7 	beq.w	8b134 <_strtod_r+0x4a2>
   8b5e6:	f8df b074 	ldr.w	fp, [pc, #116]	; 8b65c <_strtod_r+0x9ca>
   8b5ea:	f04f 3aff 	mov.w	sl, #4294967295
   8b5ee:	e085      	b.n	8b6fc <_strtod_r+0xa6a>
   8b5f0:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   8b5f4:	e04c      	b.n	8b690 <_strtod_r+0x9fe>
   8b5f6:	9b05      	ldr	r3, [sp, #20]
   8b5f8:	2b00      	cmp	r3, #0
   8b5fa:	d037      	beq.n	8b66c <_strtod_r+0x9da>
   8b5fc:	990c      	ldr	r1, [sp, #48]	; 0x30
   8b5fe:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
   8b602:	d833      	bhi.n	8b66c <_strtod_r+0x9da>
   8b604:	4628      	mov	r0, r5
   8b606:	4621      	mov	r1, r4
   8b608:	a30b      	add	r3, pc, #44	; (adr r3, 8b638 <_strtod_r+0x9a6>)
   8b60a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b60e:	f7ff f987 	bl	8a920 <__aeabi_dcmple>
   8b612:	b338      	cbz	r0, 8b664 <_strtod_r+0x9d2>
   8b614:	4621      	mov	r1, r4
   8b616:	4628      	mov	r0, r5
   8b618:	f7ff f9a0 	bl	8a95c <__aeabi_d2uiz>
   8b61c:	2800      	cmp	r0, #0
   8b61e:	bf08      	it	eq
   8b620:	2001      	moveq	r0, #1
   8b622:	f7fe fe8b 	bl	8a33c <__aeabi_ui2d>
   8b626:	460c      	mov	r4, r1
   8b628:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8b62a:	4605      	mov	r5, r0
   8b62c:	b9c1      	cbnz	r1, 8b660 <_strtod_r+0x9ce>
   8b62e:	f104 4700 	add.w	r7, r4, #2147483648	; 0x80000000
   8b632:	e016      	b.n	8b662 <_strtod_r+0x9d0>
   8b634:	f3af 8000 	nop.w
   8b638:	ffc00000 	.word	0xffc00000
   8b63c:	41dfffff 	.word	0x41dfffff
   8b640:	7ff00000 	.word	0x7ff00000
   8b644:	000fffff 	.word	0x000fffff
   8b648:	3ff00000 	.word	0x3ff00000
   8b64c:	bff00000 	.word	0xbff00000
   8b650:	3fe00000 	.word	0x3fe00000
   8b654:	7fe00000 	.word	0x7fe00000
   8b658:	7c9fffff 	.word	0x7c9fffff
   8b65c:	7fefffff 	.word	0x7fefffff
   8b660:	4627      	mov	r7, r4
   8b662:	462e      	mov	r6, r5
   8b664:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8b666:	f107 60d6 	add.w	r0, r7, #112197632	; 0x6b00000
   8b66a:	1a87      	subs	r7, r0, r2
   8b66c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8b670:	f001 fea1 	bl	8d3b6 <__ulp>
   8b674:	4602      	mov	r2, r0
   8b676:	460b      	mov	r3, r1
   8b678:	4630      	mov	r0, r6
   8b67a:	4639      	mov	r1, r7
   8b67c:	f7fe fed4 	bl	8a428 <__aeabi_dmul>
   8b680:	4602      	mov	r2, r0
   8b682:	460b      	mov	r3, r1
   8b684:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8b688:	f7fe fd1c 	bl	8a0c4 <__adddf3>
   8b68c:	4682      	mov	sl, r0
   8b68e:	468b      	mov	fp, r1
   8b690:	9b05      	ldr	r3, [sp, #20]
   8b692:	465e      	mov	r6, fp
   8b694:	2b00      	cmp	r3, #0
   8b696:	d131      	bne.n	8b6fc <_strtod_r+0xa6a>
   8b698:	4a43      	ldr	r2, [pc, #268]	; (8b7a8 <_strtod_r+0xb16>)
   8b69a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8b69c:	4032      	ands	r2, r6
   8b69e:	4290      	cmp	r0, r2
   8b6a0:	d12c      	bne.n	8b6fc <_strtod_r+0xa6a>
   8b6a2:	4621      	mov	r1, r4
   8b6a4:	4628      	mov	r0, r5
   8b6a6:	f002 fe35 	bl	8e314 <__aeabi_d2iz>
   8b6aa:	f7fe fe57 	bl	8a35c <__aeabi_i2d>
   8b6ae:	460b      	mov	r3, r1
   8b6b0:	4602      	mov	r2, r0
   8b6b2:	4621      	mov	r1, r4
   8b6b4:	4628      	mov	r0, r5
   8b6b6:	f7fe fd03 	bl	8a0c0 <__aeabi_dsub>
   8b6ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8b6bc:	4604      	mov	r4, r0
   8b6be:	460d      	mov	r5, r1
   8b6c0:	b92b      	cbnz	r3, 8b6ce <_strtod_r+0xa3c>
   8b6c2:	f1ba 0f00 	cmp.w	sl, #0
   8b6c6:	d102      	bne.n	8b6ce <_strtod_r+0xa3c>
   8b6c8:	f3cb 0613 	ubfx	r6, fp, #0, #20
   8b6cc:	b186      	cbz	r6, 8b6f0 <_strtod_r+0xa5e>
   8b6ce:	4620      	mov	r0, r4
   8b6d0:	4629      	mov	r1, r5
   8b6d2:	a32f      	add	r3, pc, #188	; (adr r3, 8b790 <_strtod_r+0xafe>)
   8b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b6d8:	f7ff f918 	bl	8a90c <__aeabi_dcmplt>
   8b6dc:	2800      	cmp	r0, #0
   8b6de:	d131      	bne.n	8b744 <_strtod_r+0xab2>
   8b6e0:	4620      	mov	r0, r4
   8b6e2:	4629      	mov	r1, r5
   8b6e4:	a32c      	add	r3, pc, #176	; (adr r3, 8b798 <_strtod_r+0xb06>)
   8b6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b6ea:	f7ff f92d 	bl	8a948 <__aeabi_dcmpgt>
   8b6ee:	e004      	b.n	8b6fa <_strtod_r+0xa68>
   8b6f0:	a32b      	add	r3, pc, #172	; (adr r3, 8b7a0 <_strtod_r+0xb0e>)
   8b6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b6f6:	f7ff f909 	bl	8a90c <__aeabi_dcmplt>
   8b6fa:	bb18      	cbnz	r0, 8b744 <_strtod_r+0xab2>
   8b6fc:	4648      	mov	r0, r9
   8b6fe:	9914      	ldr	r1, [sp, #80]	; 0x50
   8b700:	f001 fbd6 	bl	8ceb0 <_Bfree>
   8b704:	4648      	mov	r0, r9
   8b706:	9907      	ldr	r1, [sp, #28]
   8b708:	f001 fbd2 	bl	8ceb0 <_Bfree>
   8b70c:	4648      	mov	r0, r9
   8b70e:	9904      	ldr	r1, [sp, #16]
   8b710:	f001 fbce 	bl	8ceb0 <_Bfree>
   8b714:	4648      	mov	r0, r9
   8b716:	4641      	mov	r1, r8
   8b718:	f001 fbca 	bl	8ceb0 <_Bfree>
   8b71c:	e5c3      	b.n	8b2a6 <_strtod_r+0x614>
   8b71e:	9805      	ldr	r0, [sp, #20]
   8b720:	b180      	cbz	r0, 8b744 <_strtod_r+0xab2>
   8b722:	4a22      	ldr	r2, [pc, #136]	; (8b7ac <_strtod_r+0xb1a>)
   8b724:	2300      	movs	r3, #0
   8b726:	920f      	str	r2, [sp, #60]	; 0x3c
   8b728:	930e      	str	r3, [sp, #56]	; 0x38
   8b72a:	4650      	mov	r0, sl
   8b72c:	4659      	mov	r1, fp
   8b72e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   8b732:	f7fe fe79 	bl	8a428 <__aeabi_dmul>
   8b736:	4682      	mov	sl, r0
   8b738:	468b      	mov	fp, r1
   8b73a:	b919      	cbnz	r1, 8b744 <_strtod_r+0xab2>
   8b73c:	b910      	cbnz	r0, 8b744 <_strtod_r+0xab2>
   8b73e:	2122      	movs	r1, #34	; 0x22
   8b740:	f8c9 1000 	str.w	r1, [r9]
   8b744:	4648      	mov	r0, r9
   8b746:	9914      	ldr	r1, [sp, #80]	; 0x50
   8b748:	f001 fbb2 	bl	8ceb0 <_Bfree>
   8b74c:	4648      	mov	r0, r9
   8b74e:	9907      	ldr	r1, [sp, #28]
   8b750:	f001 fbae 	bl	8ceb0 <_Bfree>
   8b754:	4648      	mov	r0, r9
   8b756:	9904      	ldr	r1, [sp, #16]
   8b758:	f001 fbaa 	bl	8ceb0 <_Bfree>
   8b75c:	4648      	mov	r0, r9
   8b75e:	990a      	ldr	r1, [sp, #40]	; 0x28
   8b760:	f001 fba6 	bl	8ceb0 <_Bfree>
   8b764:	4648      	mov	r0, r9
   8b766:	4641      	mov	r1, r8
   8b768:	f001 fba2 	bl	8ceb0 <_Bfree>
   8b76c:	9811      	ldr	r0, [sp, #68]	; 0x44
   8b76e:	b108      	cbz	r0, 8b774 <_strtod_r+0xae2>
   8b770:	9913      	ldr	r1, [sp, #76]	; 0x4c
   8b772:	6001      	str	r1, [r0, #0]
   8b774:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   8b776:	4652      	mov	r2, sl
   8b778:	b114      	cbz	r4, 8b780 <_strtod_r+0xaee>
   8b77a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   8b77e:	e000      	b.n	8b782 <_strtod_r+0xaf0>
   8b780:	465b      	mov	r3, fp
   8b782:	4610      	mov	r0, r2
   8b784:	4619      	mov	r1, r3
   8b786:	b019      	add	sp, #100	; 0x64
   8b788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b78c:	f3af 8000 	nop.w
   8b790:	94a03595 	.word	0x94a03595
   8b794:	3fdfffff 	.word	0x3fdfffff
   8b798:	35afe535 	.word	0x35afe535
   8b79c:	3fe00000 	.word	0x3fe00000
   8b7a0:	94a03595 	.word	0x94a03595
   8b7a4:	3fcfffff 	.word	0x3fcfffff
   8b7a8:	7ff00000 	.word	0x7ff00000
   8b7ac:	39500000 	.word	0x39500000

0008b7b0 <strtod>:
   8b7b0:	460a      	mov	r2, r1
   8b7b2:	4903      	ldr	r1, [pc, #12]	; (8b7c0 <strtod+0x10>)
   8b7b4:	4603      	mov	r3, r0
   8b7b6:	6808      	ldr	r0, [r1, #0]
   8b7b8:	4619      	mov	r1, r3
   8b7ba:	f7ff ba6a 	b.w	8ac92 <_strtod_r>
   8b7be:	bf00      	nop
   8b7c0:	200702a8 	.word	0x200702a8

0008b7c4 <strtof>:
   8b7c4:	460a      	mov	r2, r1
   8b7c6:	490a      	ldr	r1, [pc, #40]	; (8b7f0 <strtof+0x2c>)
   8b7c8:	b538      	push	{r3, r4, r5, lr}
   8b7ca:	4603      	mov	r3, r0
   8b7cc:	6808      	ldr	r0, [r1, #0]
   8b7ce:	4619      	mov	r1, r3
   8b7d0:	f7ff fa5f 	bl	8ac92 <_strtod_r>
   8b7d4:	4604      	mov	r4, r0
   8b7d6:	460d      	mov	r5, r1
   8b7d8:	f002 f8a2 	bl	8d920 <__fpclassifyd>
   8b7dc:	b918      	cbnz	r0, 8b7e6 <strtof+0x22>
   8b7de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8b7e2:	f002 b8df 	b.w	8d9a4 <nanf>
   8b7e6:	4620      	mov	r0, r4
   8b7e8:	4629      	mov	r1, r5
   8b7ea:	f002 fdbb 	bl	8e364 <__aeabi_d2f>
   8b7ee:	bd38      	pop	{r3, r4, r5, pc}
   8b7f0:	200702a8 	.word	0x200702a8
   8b7f4:	f3af 8000 	nop.w

0008b7f8 <_strtol_r>:
   8b7f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b7fc:	9001      	str	r0, [sp, #4]
   8b7fe:	4840      	ldr	r0, [pc, #256]	; (8b900 <_strtol_r+0x108>)
   8b800:	f8d0 9000 	ldr.w	r9, [r0]
   8b804:	4608      	mov	r0, r1
   8b806:	4604      	mov	r4, r0
   8b808:	f814 5b01 	ldrb.w	r5, [r4], #1
   8b80c:	eb09 0605 	add.w	r6, r9, r5
   8b810:	7877      	ldrb	r7, [r6, #1]
   8b812:	4620      	mov	r0, r4
   8b814:	f007 0608 	and.w	r6, r7, #8
   8b818:	b2f7      	uxtb	r7, r6
   8b81a:	2f00      	cmp	r7, #0
   8b81c:	d1f3      	bne.n	8b806 <_strtol_r+0xe>
   8b81e:	2d2d      	cmp	r5, #45	; 0x2d
   8b820:	d103      	bne.n	8b82a <_strtol_r+0x32>
   8b822:	f814 5b01 	ldrb.w	r5, [r4], #1
   8b826:	2701      	movs	r7, #1
   8b828:	e004      	b.n	8b834 <_strtol_r+0x3c>
   8b82a:	2d2b      	cmp	r5, #43	; 0x2b
   8b82c:	bf04      	itt	eq
   8b82e:	4624      	moveq	r4, r4
   8b830:	f814 5b01 	ldrbeq.w	r5, [r4], #1
   8b834:	2b00      	cmp	r3, #0
   8b836:	d05c      	beq.n	8b8f2 <_strtol_r+0xfa>
   8b838:	2b10      	cmp	r3, #16
   8b83a:	d107      	bne.n	8b84c <_strtol_r+0x54>
   8b83c:	2d30      	cmp	r5, #48	; 0x30
   8b83e:	d105      	bne.n	8b84c <_strtol_r+0x54>
   8b840:	7825      	ldrb	r5, [r4, #0]
   8b842:	2d78      	cmp	r5, #120	; 0x78
   8b844:	d14e      	bne.n	8b8e4 <_strtol_r+0xec>
   8b846:	7865      	ldrb	r5, [r4, #1]
   8b848:	2310      	movs	r3, #16
   8b84a:	3402      	adds	r4, #2
   8b84c:	2f00      	cmp	r7, #0
   8b84e:	bf0c      	ite	eq
   8b850:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8b854:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   8b858:	fbb0 faf3 	udiv	sl, r0, r3
   8b85c:	2600      	movs	r6, #0
   8b85e:	fb03 081a 	mls	r8, r3, sl, r0
   8b862:	4630      	mov	r0, r6
   8b864:	eb09 0c05 	add.w	ip, r9, r5
   8b868:	f89c c001 	ldrb.w	ip, [ip, #1]
   8b86c:	f00c 0b04 	and.w	fp, ip, #4
   8b870:	fa5f fb8b 	uxtb.w	fp, fp
   8b874:	f1bb 0f00 	cmp.w	fp, #0
   8b878:	d001      	beq.n	8b87e <_strtol_r+0x86>
   8b87a:	3d30      	subs	r5, #48	; 0x30
   8b87c:	e00b      	b.n	8b896 <_strtol_r+0x9e>
   8b87e:	f01c 0c03 	ands.w	ip, ip, #3
   8b882:	d01b      	beq.n	8b8bc <_strtol_r+0xc4>
   8b884:	f1bc 0f01 	cmp.w	ip, #1
   8b888:	bf14      	ite	ne
   8b88a:	f04f 0c57 	movne.w	ip, #87	; 0x57
   8b88e:	f04f 0c37 	moveq.w	ip, #55	; 0x37
   8b892:	ebcc 0505 	rsb	r5, ip, r5
   8b896:	429d      	cmp	r5, r3
   8b898:	da10      	bge.n	8b8bc <_strtol_r+0xc4>
   8b89a:	f1b6 3fff 	cmp.w	r6, #4294967295
   8b89e:	d00a      	beq.n	8b8b6 <_strtol_r+0xbe>
   8b8a0:	4550      	cmp	r0, sl
   8b8a2:	d806      	bhi.n	8b8b2 <_strtol_r+0xba>
   8b8a4:	d101      	bne.n	8b8aa <_strtol_r+0xb2>
   8b8a6:	4545      	cmp	r5, r8
   8b8a8:	dc03      	bgt.n	8b8b2 <_strtol_r+0xba>
   8b8aa:	fb03 5000 	mla	r0, r3, r0, r5
   8b8ae:	2601      	movs	r6, #1
   8b8b0:	e001      	b.n	8b8b6 <_strtol_r+0xbe>
   8b8b2:	f04f 36ff 	mov.w	r6, #4294967295
   8b8b6:	f814 5b01 	ldrb.w	r5, [r4], #1
   8b8ba:	e7d3      	b.n	8b864 <_strtol_r+0x6c>
   8b8bc:	1c73      	adds	r3, r6, #1
   8b8be:	d10a      	bne.n	8b8d6 <_strtol_r+0xde>
   8b8c0:	2f00      	cmp	r7, #0
   8b8c2:	9901      	ldr	r1, [sp, #4]
   8b8c4:	bf0c      	ite	eq
   8b8c6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8b8ca:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   8b8ce:	2322      	movs	r3, #34	; 0x22
   8b8d0:	600b      	str	r3, [r1, #0]
   8b8d2:	b922      	cbnz	r2, 8b8de <_strtol_r+0xe6>
   8b8d4:	e011      	b.n	8b8fa <_strtol_r+0x102>
   8b8d6:	b107      	cbz	r7, 8b8da <_strtol_r+0xe2>
   8b8d8:	4240      	negs	r0, r0
   8b8da:	b172      	cbz	r2, 8b8fa <_strtol_r+0x102>
   8b8dc:	b106      	cbz	r6, 8b8e0 <_strtol_r+0xe8>
   8b8de:	1e61      	subs	r1, r4, #1
   8b8e0:	6011      	str	r1, [r2, #0]
   8b8e2:	e00a      	b.n	8b8fa <_strtol_r+0x102>
   8b8e4:	2d58      	cmp	r5, #88	; 0x58
   8b8e6:	d0ae      	beq.n	8b846 <_strtol_r+0x4e>
   8b8e8:	2530      	movs	r5, #48	; 0x30
   8b8ea:	2b00      	cmp	r3, #0
   8b8ec:	d1ae      	bne.n	8b84c <_strtol_r+0x54>
   8b8ee:	2308      	movs	r3, #8
   8b8f0:	e7ac      	b.n	8b84c <_strtol_r+0x54>
   8b8f2:	2d30      	cmp	r5, #48	; 0x30
   8b8f4:	d0a4      	beq.n	8b840 <_strtol_r+0x48>
   8b8f6:	230a      	movs	r3, #10
   8b8f8:	e7a8      	b.n	8b84c <_strtol_r+0x54>
   8b8fa:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b8fe:	bf00      	nop
   8b900:	200702a0 	.word	0x200702a0

0008b904 <strtol>:
   8b904:	b530      	push	{r4, r5, lr}
   8b906:	4613      	mov	r3, r2
   8b908:	4a04      	ldr	r2, [pc, #16]	; (8b91c <strtol+0x18>)
   8b90a:	4605      	mov	r5, r0
   8b90c:	460c      	mov	r4, r1
   8b90e:	6810      	ldr	r0, [r2, #0]
   8b910:	4629      	mov	r1, r5
   8b912:	4622      	mov	r2, r4
   8b914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8b918:	f7ff bf6e 	b.w	8b7f8 <_strtol_r>
   8b91c:	200702a8 	.word	0x200702a8

0008b920 <_svfprintf_r>:
   8b920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b924:	461e      	mov	r6, r3
   8b926:	898b      	ldrh	r3, [r1, #12]
   8b928:	4689      	mov	r9, r1
   8b92a:	f003 0180 	and.w	r1, r3, #128	; 0x80
   8b92e:	4614      	mov	r4, r2
   8b930:	b20a      	sxth	r2, r1
   8b932:	b0a9      	sub	sp, #164	; 0xa4
   8b934:	4683      	mov	fp, r0
   8b936:	b19a      	cbz	r2, 8b960 <_svfprintf_r+0x40>
   8b938:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8b93c:	b983      	cbnz	r3, 8b960 <_svfprintf_r+0x40>
   8b93e:	2140      	movs	r1, #64	; 0x40
   8b940:	f001 f87e 	bl	8ca40 <_malloc_r>
   8b944:	f8c9 0000 	str.w	r0, [r9]
   8b948:	f8c9 0010 	str.w	r0, [r9, #16]
   8b94c:	b928      	cbnz	r0, 8b95a <_svfprintf_r+0x3a>
   8b94e:	220c      	movs	r2, #12
   8b950:	f8cb 2000 	str.w	r2, [fp]
   8b954:	f04f 30ff 	mov.w	r0, #4294967295
   8b958:	e3da      	b.n	8c110 <_svfprintf_r+0x7f0>
   8b95a:	2040      	movs	r0, #64	; 0x40
   8b95c:	f8c9 0014 	str.w	r0, [r9, #20]
   8b960:	2100      	movs	r1, #0
   8b962:	ad18      	add	r5, sp, #96	; 0x60
   8b964:	950b      	str	r5, [sp, #44]	; 0x2c
   8b966:	910d      	str	r1, [sp, #52]	; 0x34
   8b968:	910c      	str	r1, [sp, #48]	; 0x30
   8b96a:	9401      	str	r4, [sp, #4]
   8b96c:	9105      	str	r1, [sp, #20]
   8b96e:	9104      	str	r1, [sp, #16]
   8b970:	46a8      	mov	r8, r5
   8b972:	9b01      	ldr	r3, [sp, #4]
   8b974:	461c      	mov	r4, r3
   8b976:	f813 2b01 	ldrb.w	r2, [r3], #1
   8b97a:	b91a      	cbnz	r2, 8b984 <_svfprintf_r+0x64>
   8b97c:	9801      	ldr	r0, [sp, #4]
   8b97e:	1a25      	subs	r5, r4, r0
   8b980:	d103      	bne.n	8b98a <_svfprintf_r+0x6a>
   8b982:	e01d      	b.n	8b9c0 <_svfprintf_r+0xa0>
   8b984:	2a25      	cmp	r2, #37	; 0x25
   8b986:	d1f5      	bne.n	8b974 <_svfprintf_r+0x54>
   8b988:	e7f8      	b.n	8b97c <_svfprintf_r+0x5c>
   8b98a:	9a01      	ldr	r2, [sp, #4]
   8b98c:	990d      	ldr	r1, [sp, #52]	; 0x34
   8b98e:	e888 0024 	stmia.w	r8, {r2, r5}
   8b992:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8b994:	194b      	adds	r3, r1, r5
   8b996:	1c50      	adds	r0, r2, #1
   8b998:	2807      	cmp	r0, #7
   8b99a:	930d      	str	r3, [sp, #52]	; 0x34
   8b99c:	900c      	str	r0, [sp, #48]	; 0x30
   8b99e:	dc02      	bgt.n	8b9a6 <_svfprintf_r+0x86>
   8b9a0:	f108 0808 	add.w	r8, r8, #8
   8b9a4:	e009      	b.n	8b9ba <_svfprintf_r+0x9a>
   8b9a6:	4658      	mov	r0, fp
   8b9a8:	4649      	mov	r1, r9
   8b9aa:	aa0b      	add	r2, sp, #44	; 0x2c
   8b9ac:	f002 f80a 	bl	8d9c4 <__ssprint_r>
   8b9b0:	2800      	cmp	r0, #0
   8b9b2:	f040 83a2 	bne.w	8c0fa <_svfprintf_r+0x7da>
   8b9b6:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b9ba:	9904      	ldr	r1, [sp, #16]
   8b9bc:	194b      	adds	r3, r1, r5
   8b9be:	9304      	str	r3, [sp, #16]
   8b9c0:	7822      	ldrb	r2, [r4, #0]
   8b9c2:	2a00      	cmp	r2, #0
   8b9c4:	f000 8392 	beq.w	8c0ec <_svfprintf_r+0x7cc>
   8b9c8:	2200      	movs	r2, #0
   8b9ca:	3401      	adds	r4, #1
   8b9cc:	9401      	str	r4, [sp, #4]
   8b9ce:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b9d2:	f04f 3cff 	mov.w	ip, #4294967295
   8b9d6:	9203      	str	r2, [sp, #12]
   8b9d8:	4617      	mov	r7, r2
   8b9da:	9801      	ldr	r0, [sp, #4]
   8b9dc:	f810 3b01 	ldrb.w	r3, [r0], #1
   8b9e0:	9001      	str	r0, [sp, #4]
   8b9e2:	2b63      	cmp	r3, #99	; 0x63
   8b9e4:	f000 80b3 	beq.w	8bb4e <_svfprintf_r+0x22e>
   8b9e8:	dc33      	bgt.n	8ba52 <_svfprintf_r+0x132>
   8b9ea:	2b39      	cmp	r3, #57	; 0x39
   8b9ec:	dc1a      	bgt.n	8ba24 <_svfprintf_r+0x104>
   8b9ee:	2b31      	cmp	r3, #49	; 0x31
   8b9f0:	f280 8091 	bge.w	8bb16 <_svfprintf_r+0x1f6>
   8b9f4:	2b2b      	cmp	r3, #43	; 0x2b
   8b9f6:	d101      	bne.n	8b9fc <_svfprintf_r+0xdc>
   8b9f8:	461a      	mov	r2, r3
   8b9fa:	e7ee      	b.n	8b9da <_svfprintf_r+0xba>
   8b9fc:	dc0a      	bgt.n	8ba14 <_svfprintf_r+0xf4>
   8b9fe:	2b23      	cmp	r3, #35	; 0x23
   8ba00:	d055      	beq.n	8baae <_svfprintf_r+0x18e>
   8ba02:	2b2a      	cmp	r3, #42	; 0x2a
   8ba04:	d056      	beq.n	8bab4 <_svfprintf_r+0x194>
   8ba06:	2b20      	cmp	r3, #32
   8ba08:	f040 81f5 	bne.w	8bdf6 <_svfprintf_r+0x4d6>
   8ba0c:	2a00      	cmp	r2, #0
   8ba0e:	bf08      	it	eq
   8ba10:	2220      	moveq	r2, #32
   8ba12:	e7e2      	b.n	8b9da <_svfprintf_r+0xba>
   8ba14:	2b2e      	cmp	r3, #46	; 0x2e
   8ba16:	d058      	beq.n	8baca <_svfprintf_r+0x1aa>
   8ba18:	2b30      	cmp	r3, #48	; 0x30
   8ba1a:	d079      	beq.n	8bb10 <_svfprintf_r+0x1f0>
   8ba1c:	2b2d      	cmp	r3, #45	; 0x2d
   8ba1e:	f040 81ea 	bne.w	8bdf6 <_svfprintf_r+0x4d6>
   8ba22:	e04f      	b.n	8bac4 <_svfprintf_r+0x1a4>
   8ba24:	2b4f      	cmp	r3, #79	; 0x4f
   8ba26:	f000 80de 	beq.w	8bbe6 <_svfprintf_r+0x2c6>
   8ba2a:	dc07      	bgt.n	8ba3c <_svfprintf_r+0x11c>
   8ba2c:	2b44      	cmp	r3, #68	; 0x44
   8ba2e:	f040 81e2 	bne.w	8bdf6 <_svfprintf_r+0x4d6>
   8ba32:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8ba36:	f047 0710 	orr.w	r7, r7, #16
   8ba3a:	e090      	b.n	8bb5e <_svfprintf_r+0x23e>
   8ba3c:	2b55      	cmp	r3, #85	; 0x55
   8ba3e:	f000 811f 	beq.w	8bc80 <_svfprintf_r+0x360>
   8ba42:	2b58      	cmp	r3, #88	; 0x58
   8ba44:	f040 81d7 	bne.w	8bdf6 <_svfprintf_r+0x4d6>
   8ba48:	4dae      	ldr	r5, [pc, #696]	; (8bd04 <_svfprintf_r+0x3e4>)
   8ba4a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8ba4e:	9505      	str	r5, [sp, #20]
   8ba50:	e130      	b.n	8bcb4 <_svfprintf_r+0x394>
   8ba52:	2b6f      	cmp	r3, #111	; 0x6f
   8ba54:	f000 80c9 	beq.w	8bbea <_svfprintf_r+0x2ca>
   8ba58:	dc10      	bgt.n	8ba7c <_svfprintf_r+0x15c>
   8ba5a:	2b69      	cmp	r3, #105	; 0x69
   8ba5c:	d024      	beq.n	8baa8 <_svfprintf_r+0x188>
   8ba5e:	dc07      	bgt.n	8ba70 <_svfprintf_r+0x150>
   8ba60:	2b64      	cmp	r3, #100	; 0x64
   8ba62:	d021      	beq.n	8baa8 <_svfprintf_r+0x188>
   8ba64:	2b68      	cmp	r3, #104	; 0x68
   8ba66:	f040 81c6 	bne.w	8bdf6 <_svfprintf_r+0x4d6>
   8ba6a:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   8ba6e:	e7b4      	b.n	8b9da <_svfprintf_r+0xba>
   8ba70:	2b6c      	cmp	r3, #108	; 0x6c
   8ba72:	d05f      	beq.n	8bb34 <_svfprintf_r+0x214>
   8ba74:	2b6e      	cmp	r3, #110	; 0x6e
   8ba76:	f040 81be 	bne.w	8bdf6 <_svfprintf_r+0x4d6>
   8ba7a:	e096      	b.n	8bbaa <_svfprintf_r+0x28a>
   8ba7c:	2b73      	cmp	r3, #115	; 0x73
   8ba7e:	f000 80df 	beq.w	8bc40 <_svfprintf_r+0x320>
   8ba82:	dc06      	bgt.n	8ba92 <_svfprintf_r+0x172>
   8ba84:	2b70      	cmp	r3, #112	; 0x70
   8ba86:	f000 80cd 	beq.w	8bc24 <_svfprintf_r+0x304>
   8ba8a:	2b71      	cmp	r3, #113	; 0x71
   8ba8c:	f040 81b3 	bne.w	8bdf6 <_svfprintf_r+0x4d6>
   8ba90:	e05a      	b.n	8bb48 <_svfprintf_r+0x228>
   8ba92:	2b75      	cmp	r3, #117	; 0x75
   8ba94:	f000 80f6 	beq.w	8bc84 <_svfprintf_r+0x364>
   8ba98:	2b78      	cmp	r3, #120	; 0x78
   8ba9a:	f040 81ac 	bne.w	8bdf6 <_svfprintf_r+0x4d6>
   8ba9e:	4d9a      	ldr	r5, [pc, #616]	; (8bd08 <_svfprintf_r+0x3e8>)
   8baa0:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8baa4:	9505      	str	r5, [sp, #20]
   8baa6:	e105      	b.n	8bcb4 <_svfprintf_r+0x394>
   8baa8:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8baac:	e057      	b.n	8bb5e <_svfprintf_r+0x23e>
   8baae:	f047 0701 	orr.w	r7, r7, #1
   8bab2:	e792      	b.n	8b9da <_svfprintf_r+0xba>
   8bab4:	1d33      	adds	r3, r6, #4
   8bab6:	6836      	ldr	r6, [r6, #0]
   8bab8:	2e00      	cmp	r6, #0
   8baba:	9603      	str	r6, [sp, #12]
   8babc:	da15      	bge.n	8baea <_svfprintf_r+0x1ca>
   8babe:	4270      	negs	r0, r6
   8bac0:	9003      	str	r0, [sp, #12]
   8bac2:	461e      	mov	r6, r3
   8bac4:	f047 0704 	orr.w	r7, r7, #4
   8bac8:	e787      	b.n	8b9da <_svfprintf_r+0xba>
   8baca:	9901      	ldr	r1, [sp, #4]
   8bacc:	f811 3b01 	ldrb.w	r3, [r1], #1
   8bad0:	2b2a      	cmp	r3, #42	; 0x2a
   8bad2:	9101      	str	r1, [sp, #4]
   8bad4:	d10b      	bne.n	8baee <_svfprintf_r+0x1ce>
   8bad6:	f8d6 c000 	ldr.w	ip, [r6]
   8bada:	1d33      	adds	r3, r6, #4
   8badc:	f1bc 0f00 	cmp.w	ip, #0
   8bae0:	da03      	bge.n	8baea <_svfprintf_r+0x1ca>
   8bae2:	461e      	mov	r6, r3
   8bae4:	f04f 3cff 	mov.w	ip, #4294967295
   8bae8:	e777      	b.n	8b9da <_svfprintf_r+0xba>
   8baea:	461e      	mov	r6, r3
   8baec:	e775      	b.n	8b9da <_svfprintf_r+0xba>
   8baee:	f04f 0c00 	mov.w	ip, #0
   8baf2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8baf6:	2809      	cmp	r0, #9
   8baf8:	d807      	bhi.n	8bb0a <_svfprintf_r+0x1ea>
   8bafa:	9901      	ldr	r1, [sp, #4]
   8bafc:	230a      	movs	r3, #10
   8bafe:	fb03 0c0c 	mla	ip, r3, ip, r0
   8bb02:	f811 3b01 	ldrb.w	r3, [r1], #1
   8bb06:	9101      	str	r1, [sp, #4]
   8bb08:	e7f3      	b.n	8baf2 <_svfprintf_r+0x1d2>
   8bb0a:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   8bb0e:	e768      	b.n	8b9e2 <_svfprintf_r+0xc2>
   8bb10:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8bb14:	e761      	b.n	8b9da <_svfprintf_r+0xba>
   8bb16:	9801      	ldr	r0, [sp, #4]
   8bb18:	2100      	movs	r1, #0
   8bb1a:	3b30      	subs	r3, #48	; 0x30
   8bb1c:	240a      	movs	r4, #10
   8bb1e:	fb04 3101 	mla	r1, r4, r1, r3
   8bb22:	f810 3b01 	ldrb.w	r3, [r0], #1
   8bb26:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   8bb2a:	2c09      	cmp	r4, #9
   8bb2c:	9001      	str	r0, [sp, #4]
   8bb2e:	d9f4      	bls.n	8bb1a <_svfprintf_r+0x1fa>
   8bb30:	9103      	str	r1, [sp, #12]
   8bb32:	e756      	b.n	8b9e2 <_svfprintf_r+0xc2>
   8bb34:	9901      	ldr	r1, [sp, #4]
   8bb36:	780b      	ldrb	r3, [r1, #0]
   8bb38:	2b6c      	cmp	r3, #108	; 0x6c
   8bb3a:	d102      	bne.n	8bb42 <_svfprintf_r+0x222>
   8bb3c:	1c48      	adds	r0, r1, #1
   8bb3e:	9001      	str	r0, [sp, #4]
   8bb40:	e002      	b.n	8bb48 <_svfprintf_r+0x228>
   8bb42:	f047 0710 	orr.w	r7, r7, #16
   8bb46:	e748      	b.n	8b9da <_svfprintf_r+0xba>
   8bb48:	f047 0720 	orr.w	r7, r7, #32
   8bb4c:	e745      	b.n	8b9da <_svfprintf_r+0xba>
   8bb4e:	6832      	ldr	r2, [r6, #0]
   8bb50:	2500      	movs	r5, #0
   8bb52:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   8bb56:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8bb5a:	3604      	adds	r6, #4
   8bb5c:	e155      	b.n	8be0a <_svfprintf_r+0x4ea>
   8bb5e:	06ba      	lsls	r2, r7, #26
   8bb60:	d507      	bpl.n	8bb72 <_svfprintf_r+0x252>
   8bb62:	3607      	adds	r6, #7
   8bb64:	f026 0507 	bic.w	r5, r6, #7
   8bb68:	f105 0608 	add.w	r6, r5, #8
   8bb6c:	e9d5 4500 	ldrd	r4, r5, [r5]
   8bb70:	e00f      	b.n	8bb92 <_svfprintf_r+0x272>
   8bb72:	f017 0f10 	tst.w	r7, #16
   8bb76:	f106 0104 	add.w	r1, r6, #4
   8bb7a:	d001      	beq.n	8bb80 <_svfprintf_r+0x260>
   8bb7c:	6832      	ldr	r2, [r6, #0]
   8bb7e:	e005      	b.n	8bb8c <_svfprintf_r+0x26c>
   8bb80:	f017 0f40 	tst.w	r7, #64	; 0x40
   8bb84:	6832      	ldr	r2, [r6, #0]
   8bb86:	d001      	beq.n	8bb8c <_svfprintf_r+0x26c>
   8bb88:	b214      	sxth	r4, r2
   8bb8a:	e000      	b.n	8bb8e <_svfprintf_r+0x26e>
   8bb8c:	4614      	mov	r4, r2
   8bb8e:	17e5      	asrs	r5, r4, #31
   8bb90:	460e      	mov	r6, r1
   8bb92:	2c00      	cmp	r4, #0
   8bb94:	f175 0200 	sbcs.w	r2, r5, #0
   8bb98:	f280 80b8 	bge.w	8bd0c <_svfprintf_r+0x3ec>
   8bb9c:	232d      	movs	r3, #45	; 0x2d
   8bb9e:	4264      	negs	r4, r4
   8bba0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8bba4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   8bba8:	e0b0      	b.n	8bd0c <_svfprintf_r+0x3ec>
   8bbaa:	f017 0f20 	tst.w	r7, #32
   8bbae:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8bbb2:	f106 0204 	add.w	r2, r6, #4
   8bbb6:	d005      	beq.n	8bbc4 <_svfprintf_r+0x2a4>
   8bbb8:	9c04      	ldr	r4, [sp, #16]
   8bbba:	6835      	ldr	r5, [r6, #0]
   8bbbc:	17e0      	asrs	r0, r4, #31
   8bbbe:	602c      	str	r4, [r5, #0]
   8bbc0:	6068      	str	r0, [r5, #4]
   8bbc2:	e004      	b.n	8bbce <_svfprintf_r+0x2ae>
   8bbc4:	06fb      	lsls	r3, r7, #27
   8bbc6:	d504      	bpl.n	8bbd2 <_svfprintf_r+0x2b2>
   8bbc8:	6833      	ldr	r3, [r6, #0]
   8bbca:	9904      	ldr	r1, [sp, #16]
   8bbcc:	6019      	str	r1, [r3, #0]
   8bbce:	4616      	mov	r6, r2
   8bbd0:	e6cf      	b.n	8b972 <_svfprintf_r+0x52>
   8bbd2:	6830      	ldr	r0, [r6, #0]
   8bbd4:	9c04      	ldr	r4, [sp, #16]
   8bbd6:	f017 0f40 	tst.w	r7, #64	; 0x40
   8bbda:	f106 0604 	add.w	r6, r6, #4
   8bbde:	bf14      	ite	ne
   8bbe0:	8004      	strhne	r4, [r0, #0]
   8bbe2:	6004      	streq	r4, [r0, #0]
   8bbe4:	e6c5      	b.n	8b972 <_svfprintf_r+0x52>
   8bbe6:	f047 0710 	orr.w	r7, r7, #16
   8bbea:	f017 0020 	ands.w	r0, r7, #32
   8bbee:	d008      	beq.n	8bc02 <_svfprintf_r+0x2e2>
   8bbf0:	1df3      	adds	r3, r6, #7
   8bbf2:	f023 0507 	bic.w	r5, r3, #7
   8bbf6:	f105 0608 	add.w	r6, r5, #8
   8bbfa:	e9d5 4500 	ldrd	r4, r5, [r5]
   8bbfe:	2000      	movs	r0, #0
   8bc00:	e07c      	b.n	8bcfc <_svfprintf_r+0x3dc>
   8bc02:	f017 0110 	ands.w	r1, r7, #16
   8bc06:	f106 0204 	add.w	r2, r6, #4
   8bc0a:	d106      	bne.n	8bc1a <_svfprintf_r+0x2fa>
   8bc0c:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   8bc10:	d003      	beq.n	8bc1a <_svfprintf_r+0x2fa>
   8bc12:	8834      	ldrh	r4, [r6, #0]
   8bc14:	2500      	movs	r5, #0
   8bc16:	4616      	mov	r6, r2
   8bc18:	e7f1      	b.n	8bbfe <_svfprintf_r+0x2de>
   8bc1a:	6836      	ldr	r6, [r6, #0]
   8bc1c:	2500      	movs	r5, #0
   8bc1e:	4634      	mov	r4, r6
   8bc20:	4616      	mov	r6, r2
   8bc22:	e06b      	b.n	8bcfc <_svfprintf_r+0x3dc>
   8bc24:	4b38      	ldr	r3, [pc, #224]	; (8bd08 <_svfprintf_r+0x3e8>)
   8bc26:	2130      	movs	r1, #48	; 0x30
   8bc28:	2278      	movs	r2, #120	; 0x78
   8bc2a:	6834      	ldr	r4, [r6, #0]
   8bc2c:	2500      	movs	r5, #0
   8bc2e:	f047 0702 	orr.w	r7, r7, #2
   8bc32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   8bc36:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   8bc3a:	3604      	adds	r6, #4
   8bc3c:	9305      	str	r3, [sp, #20]
   8bc3e:	e05c      	b.n	8bcfa <_svfprintf_r+0x3da>
   8bc40:	4631      	mov	r1, r6
   8bc42:	2500      	movs	r5, #0
   8bc44:	f8d1 a000 	ldr.w	sl, [r1]
   8bc48:	3604      	adds	r6, #4
   8bc4a:	45ac      	cmp	ip, r5
   8bc4c:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8bc50:	4650      	mov	r0, sl
   8bc52:	db11      	blt.n	8bc78 <_svfprintf_r+0x358>
   8bc54:	4662      	mov	r2, ip
   8bc56:	4629      	mov	r1, r5
   8bc58:	f8cd c000 	str.w	ip, [sp]
   8bc5c:	f001 f8f2 	bl	8ce44 <memchr>
   8bc60:	f8dd c000 	ldr.w	ip, [sp]
   8bc64:	2800      	cmp	r0, #0
   8bc66:	f000 80d4 	beq.w	8be12 <_svfprintf_r+0x4f2>
   8bc6a:	ebca 0400 	rsb	r4, sl, r0
   8bc6e:	4564      	cmp	r4, ip
   8bc70:	f340 80d1 	ble.w	8be16 <_svfprintf_r+0x4f6>
   8bc74:	4664      	mov	r4, ip
   8bc76:	e0ce      	b.n	8be16 <_svfprintf_r+0x4f6>
   8bc78:	f7fe ffa8 	bl	8abcc <strlen>
   8bc7c:	4604      	mov	r4, r0
   8bc7e:	e0ca      	b.n	8be16 <_svfprintf_r+0x4f6>
   8bc80:	f047 0710 	orr.w	r7, r7, #16
   8bc84:	06bd      	lsls	r5, r7, #26
   8bc86:	d506      	bpl.n	8bc96 <_svfprintf_r+0x376>
   8bc88:	1df0      	adds	r0, r6, #7
   8bc8a:	f020 0407 	bic.w	r4, r0, #7
   8bc8e:	f104 0608 	add.w	r6, r4, #8
   8bc92:	cc30      	ldmia	r4, {r4, r5}
   8bc94:	e00c      	b.n	8bcb0 <_svfprintf_r+0x390>
   8bc96:	f017 0f10 	tst.w	r7, #16
   8bc9a:	f106 0304 	add.w	r3, r6, #4
   8bc9e:	d103      	bne.n	8bca8 <_svfprintf_r+0x388>
   8bca0:	067c      	lsls	r4, r7, #25
   8bca2:	d501      	bpl.n	8bca8 <_svfprintf_r+0x388>
   8bca4:	8834      	ldrh	r4, [r6, #0]
   8bca6:	e001      	b.n	8bcac <_svfprintf_r+0x38c>
   8bca8:	6835      	ldr	r5, [r6, #0]
   8bcaa:	462c      	mov	r4, r5
   8bcac:	2500      	movs	r5, #0
   8bcae:	461e      	mov	r6, r3
   8bcb0:	2001      	movs	r0, #1
   8bcb2:	e023      	b.n	8bcfc <_svfprintf_r+0x3dc>
   8bcb4:	06b8      	lsls	r0, r7, #26
   8bcb6:	d507      	bpl.n	8bcc8 <_svfprintf_r+0x3a8>
   8bcb8:	1df4      	adds	r4, r6, #7
   8bcba:	f024 0107 	bic.w	r1, r4, #7
   8bcbe:	f101 0608 	add.w	r6, r1, #8
   8bcc2:	e9d1 4500 	ldrd	r4, r5, [r1]
   8bcc6:	e00c      	b.n	8bce2 <_svfprintf_r+0x3c2>
   8bcc8:	f017 0f10 	tst.w	r7, #16
   8bccc:	f106 0004 	add.w	r0, r6, #4
   8bcd0:	d103      	bne.n	8bcda <_svfprintf_r+0x3ba>
   8bcd2:	0679      	lsls	r1, r7, #25
   8bcd4:	d501      	bpl.n	8bcda <_svfprintf_r+0x3ba>
   8bcd6:	8834      	ldrh	r4, [r6, #0]
   8bcd8:	e001      	b.n	8bcde <_svfprintf_r+0x3be>
   8bcda:	6836      	ldr	r6, [r6, #0]
   8bcdc:	4634      	mov	r4, r6
   8bcde:	2500      	movs	r5, #0
   8bce0:	4606      	mov	r6, r0
   8bce2:	07fa      	lsls	r2, r7, #31
   8bce4:	d509      	bpl.n	8bcfa <_svfprintf_r+0x3da>
   8bce6:	ea54 0205 	orrs.w	r2, r4, r5
   8bcea:	d006      	beq.n	8bcfa <_svfprintf_r+0x3da>
   8bcec:	2230      	movs	r2, #48	; 0x30
   8bcee:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   8bcf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   8bcf6:	f047 0702 	orr.w	r7, r7, #2
   8bcfa:	2002      	movs	r0, #2
   8bcfc:	2100      	movs	r1, #0
   8bcfe:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   8bd02:	e004      	b.n	8bd0e <_svfprintf_r+0x3ee>
   8bd04:	0008f60c 	.word	0x0008f60c
   8bd08:	0008f61d 	.word	0x0008f61d
   8bd0c:	2001      	movs	r0, #1
   8bd0e:	f1bc 0f00 	cmp.w	ip, #0
   8bd12:	bfa8      	it	ge
   8bd14:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   8bd18:	ea54 0105 	orrs.w	r1, r4, r5
   8bd1c:	d102      	bne.n	8bd24 <_svfprintf_r+0x404>
   8bd1e:	f1bc 0f00 	cmp.w	ip, #0
   8bd22:	d058      	beq.n	8bdd6 <_svfprintf_r+0x4b6>
   8bd24:	2801      	cmp	r0, #1
   8bd26:	d01d      	beq.n	8bd64 <_svfprintf_r+0x444>
   8bd28:	2802      	cmp	r0, #2
   8bd2a:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8bd2e:	d041      	beq.n	8bdb4 <_svfprintf_r+0x494>
   8bd30:	f004 0207 	and.w	r2, r4, #7
   8bd34:	08e4      	lsrs	r4, r4, #3
   8bd36:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   8bd3a:	08e9      	lsrs	r1, r5, #3
   8bd3c:	4604      	mov	r4, r0
   8bd3e:	460d      	mov	r5, r1
   8bd40:	3230      	adds	r2, #48	; 0x30
   8bd42:	ea54 0105 	orrs.w	r1, r4, r5
   8bd46:	469a      	mov	sl, r3
   8bd48:	701a      	strb	r2, [r3, #0]
   8bd4a:	f103 33ff 	add.w	r3, r3, #4294967295
   8bd4e:	d1ef      	bne.n	8bd30 <_svfprintf_r+0x410>
   8bd50:	07f8      	lsls	r0, r7, #31
   8bd52:	4655      	mov	r5, sl
   8bd54:	d54a      	bpl.n	8bdec <_svfprintf_r+0x4cc>
   8bd56:	2a30      	cmp	r2, #48	; 0x30
   8bd58:	d048      	beq.n	8bdec <_svfprintf_r+0x4cc>
   8bd5a:	2230      	movs	r2, #48	; 0x30
   8bd5c:	469a      	mov	sl, r3
   8bd5e:	f805 2c01 	strb.w	r2, [r5, #-1]
   8bd62:	e043      	b.n	8bdec <_svfprintf_r+0x4cc>
   8bd64:	2d00      	cmp	r5, #0
   8bd66:	bf08      	it	eq
   8bd68:	2c0a      	cmpeq	r4, #10
   8bd6a:	d203      	bcs.n	8bd74 <_svfprintf_r+0x454>
   8bd6c:	3430      	adds	r4, #48	; 0x30
   8bd6e:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   8bd72:	e036      	b.n	8bde2 <_svfprintf_r+0x4c2>
   8bd74:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8bd78:	9302      	str	r3, [sp, #8]
   8bd7a:	4620      	mov	r0, r4
   8bd7c:	4629      	mov	r1, r5
   8bd7e:	220a      	movs	r2, #10
   8bd80:	2300      	movs	r3, #0
   8bd82:	f8cd c000 	str.w	ip, [sp]
   8bd86:	f002 fb3d 	bl	8e404 <__aeabi_uldivmod>
   8bd8a:	9802      	ldr	r0, [sp, #8]
   8bd8c:	3230      	adds	r2, #48	; 0x30
   8bd8e:	f800 2901 	strb.w	r2, [r0], #-1
   8bd92:	4629      	mov	r1, r5
   8bd94:	220a      	movs	r2, #10
   8bd96:	2300      	movs	r3, #0
   8bd98:	f8dd a008 	ldr.w	sl, [sp, #8]
   8bd9c:	9002      	str	r0, [sp, #8]
   8bd9e:	4620      	mov	r0, r4
   8bda0:	f002 fb30 	bl	8e404 <__aeabi_uldivmod>
   8bda4:	4604      	mov	r4, r0
   8bda6:	460d      	mov	r5, r1
   8bda8:	ea54 0105 	orrs.w	r1, r4, r5
   8bdac:	f8dd c000 	ldr.w	ip, [sp]
   8bdb0:	d1e3      	bne.n	8bd7a <_svfprintf_r+0x45a>
   8bdb2:	e01b      	b.n	8bdec <_svfprintf_r+0x4cc>
   8bdb4:	9905      	ldr	r1, [sp, #20]
   8bdb6:	f004 000f 	and.w	r0, r4, #15
   8bdba:	0924      	lsrs	r4, r4, #4
   8bdbc:	5c0a      	ldrb	r2, [r1, r0]
   8bdbe:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   8bdc2:	0929      	lsrs	r1, r5, #4
   8bdc4:	4604      	mov	r4, r0
   8bdc6:	460d      	mov	r5, r1
   8bdc8:	469a      	mov	sl, r3
   8bdca:	f803 2901 	strb.w	r2, [r3], #-1
   8bdce:	ea54 0205 	orrs.w	r2, r4, r5
   8bdd2:	d1ef      	bne.n	8bdb4 <_svfprintf_r+0x494>
   8bdd4:	e00a      	b.n	8bdec <_svfprintf_r+0x4cc>
   8bdd6:	b938      	cbnz	r0, 8bde8 <_svfprintf_r+0x4c8>
   8bdd8:	07f9      	lsls	r1, r7, #31
   8bdda:	d505      	bpl.n	8bde8 <_svfprintf_r+0x4c8>
   8bddc:	2030      	movs	r0, #48	; 0x30
   8bdde:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   8bde2:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   8bde6:	e001      	b.n	8bdec <_svfprintf_r+0x4cc>
   8bde8:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   8bdec:	ad18      	add	r5, sp, #96	; 0x60
   8bdee:	ebca 0405 	rsb	r4, sl, r5
   8bdf2:	4665      	mov	r5, ip
   8bdf4:	e00f      	b.n	8be16 <_svfprintf_r+0x4f6>
   8bdf6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8bdfa:	2b00      	cmp	r3, #0
   8bdfc:	f000 8176 	beq.w	8c0ec <_svfprintf_r+0x7cc>
   8be00:	2500      	movs	r5, #0
   8be02:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   8be06:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8be0a:	2401      	movs	r4, #1
   8be0c:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   8be10:	e001      	b.n	8be16 <_svfprintf_r+0x4f6>
   8be12:	4664      	mov	r4, ip
   8be14:	4605      	mov	r5, r0
   8be16:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8be1a:	42ac      	cmp	r4, r5
   8be1c:	bfac      	ite	ge
   8be1e:	4621      	movge	r1, r4
   8be20:	4629      	movlt	r1, r5
   8be22:	9102      	str	r1, [sp, #8]
   8be24:	b113      	cbz	r3, 8be2c <_svfprintf_r+0x50c>
   8be26:	9802      	ldr	r0, [sp, #8]
   8be28:	1c42      	adds	r2, r0, #1
   8be2a:	9202      	str	r2, [sp, #8]
   8be2c:	f017 0102 	ands.w	r1, r7, #2
   8be30:	9106      	str	r1, [sp, #24]
   8be32:	d002      	beq.n	8be3a <_svfprintf_r+0x51a>
   8be34:	9b02      	ldr	r3, [sp, #8]
   8be36:	1c98      	adds	r0, r3, #2
   8be38:	9002      	str	r0, [sp, #8]
   8be3a:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   8be3e:	9207      	str	r2, [sp, #28]
   8be40:	d13c      	bne.n	8bebc <_svfprintf_r+0x59c>
   8be42:	9903      	ldr	r1, [sp, #12]
   8be44:	9b02      	ldr	r3, [sp, #8]
   8be46:	1acb      	subs	r3, r1, r3
   8be48:	2b00      	cmp	r3, #0
   8be4a:	dd37      	ble.n	8bebc <_svfprintf_r+0x59c>
   8be4c:	48a5      	ldr	r0, [pc, #660]	; (8c0e4 <_svfprintf_r+0x7c4>)
   8be4e:	2b10      	cmp	r3, #16
   8be50:	f8c8 0000 	str.w	r0, [r8]
   8be54:	dd1b      	ble.n	8be8e <_svfprintf_r+0x56e>
   8be56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8be58:	2110      	movs	r1, #16
   8be5a:	980d      	ldr	r0, [sp, #52]	; 0x34
   8be5c:	f8c8 1004 	str.w	r1, [r8, #4]
   8be60:	1c51      	adds	r1, r2, #1
   8be62:	3010      	adds	r0, #16
   8be64:	2907      	cmp	r1, #7
   8be66:	900d      	str	r0, [sp, #52]	; 0x34
   8be68:	910c      	str	r1, [sp, #48]	; 0x30
   8be6a:	dc02      	bgt.n	8be72 <_svfprintf_r+0x552>
   8be6c:	f108 0808 	add.w	r8, r8, #8
   8be70:	e00b      	b.n	8be8a <_svfprintf_r+0x56a>
   8be72:	4658      	mov	r0, fp
   8be74:	4649      	mov	r1, r9
   8be76:	aa0b      	add	r2, sp, #44	; 0x2c
   8be78:	9300      	str	r3, [sp, #0]
   8be7a:	f001 fda3 	bl	8d9c4 <__ssprint_r>
   8be7e:	9b00      	ldr	r3, [sp, #0]
   8be80:	2800      	cmp	r0, #0
   8be82:	f040 813a 	bne.w	8c0fa <_svfprintf_r+0x7da>
   8be86:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8be8a:	3b10      	subs	r3, #16
   8be8c:	e7de      	b.n	8be4c <_svfprintf_r+0x52c>
   8be8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8be90:	f8c8 3004 	str.w	r3, [r8, #4]
   8be94:	18d1      	adds	r1, r2, r3
   8be96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8be98:	910d      	str	r1, [sp, #52]	; 0x34
   8be9a:	1c58      	adds	r0, r3, #1
   8be9c:	2807      	cmp	r0, #7
   8be9e:	900c      	str	r0, [sp, #48]	; 0x30
   8bea0:	dc02      	bgt.n	8bea8 <_svfprintf_r+0x588>
   8bea2:	f108 0808 	add.w	r8, r8, #8
   8bea6:	e009      	b.n	8bebc <_svfprintf_r+0x59c>
   8bea8:	4658      	mov	r0, fp
   8beaa:	4649      	mov	r1, r9
   8beac:	aa0b      	add	r2, sp, #44	; 0x2c
   8beae:	f001 fd89 	bl	8d9c4 <__ssprint_r>
   8beb2:	2800      	cmp	r0, #0
   8beb4:	f040 8121 	bne.w	8c0fa <_svfprintf_r+0x7da>
   8beb8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8bebc:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   8bec0:	b1da      	cbz	r2, 8befa <_svfprintf_r+0x5da>
   8bec2:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   8bec6:	f8c8 1000 	str.w	r1, [r8]
   8beca:	990c      	ldr	r1, [sp, #48]	; 0x30
   8becc:	2301      	movs	r3, #1
   8bece:	980d      	ldr	r0, [sp, #52]	; 0x34
   8bed0:	f8c8 3004 	str.w	r3, [r8, #4]
   8bed4:	1c4b      	adds	r3, r1, #1
   8bed6:	1c42      	adds	r2, r0, #1
   8bed8:	2b07      	cmp	r3, #7
   8beda:	920d      	str	r2, [sp, #52]	; 0x34
   8bedc:	930c      	str	r3, [sp, #48]	; 0x30
   8bede:	dc02      	bgt.n	8bee6 <_svfprintf_r+0x5c6>
   8bee0:	f108 0808 	add.w	r8, r8, #8
   8bee4:	e009      	b.n	8befa <_svfprintf_r+0x5da>
   8bee6:	4658      	mov	r0, fp
   8bee8:	4649      	mov	r1, r9
   8beea:	aa0b      	add	r2, sp, #44	; 0x2c
   8beec:	f001 fd6a 	bl	8d9c4 <__ssprint_r>
   8bef0:	2800      	cmp	r0, #0
   8bef2:	f040 8102 	bne.w	8c0fa <_svfprintf_r+0x7da>
   8bef6:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8befa:	9806      	ldr	r0, [sp, #24]
   8befc:	b1d0      	cbz	r0, 8bf34 <_svfprintf_r+0x614>
   8befe:	aa0a      	add	r2, sp, #40	; 0x28
   8bf00:	f8c8 2000 	str.w	r2, [r8]
   8bf04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8bf06:	2102      	movs	r1, #2
   8bf08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8bf0a:	f8c8 1004 	str.w	r1, [r8, #4]
   8bf0e:	1c51      	adds	r1, r2, #1
   8bf10:	1c98      	adds	r0, r3, #2
   8bf12:	2907      	cmp	r1, #7
   8bf14:	900d      	str	r0, [sp, #52]	; 0x34
   8bf16:	910c      	str	r1, [sp, #48]	; 0x30
   8bf18:	dc02      	bgt.n	8bf20 <_svfprintf_r+0x600>
   8bf1a:	f108 0808 	add.w	r8, r8, #8
   8bf1e:	e009      	b.n	8bf34 <_svfprintf_r+0x614>
   8bf20:	4658      	mov	r0, fp
   8bf22:	4649      	mov	r1, r9
   8bf24:	aa0b      	add	r2, sp, #44	; 0x2c
   8bf26:	f001 fd4d 	bl	8d9c4 <__ssprint_r>
   8bf2a:	2800      	cmp	r0, #0
   8bf2c:	f040 80e5 	bne.w	8c0fa <_svfprintf_r+0x7da>
   8bf30:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8bf34:	9b07      	ldr	r3, [sp, #28]
   8bf36:	2b80      	cmp	r3, #128	; 0x80
   8bf38:	d13c      	bne.n	8bfb4 <_svfprintf_r+0x694>
   8bf3a:	9803      	ldr	r0, [sp, #12]
   8bf3c:	9a02      	ldr	r2, [sp, #8]
   8bf3e:	1a83      	subs	r3, r0, r2
   8bf40:	2b00      	cmp	r3, #0
   8bf42:	dd37      	ble.n	8bfb4 <_svfprintf_r+0x694>
   8bf44:	4968      	ldr	r1, [pc, #416]	; (8c0e8 <_svfprintf_r+0x7c8>)
   8bf46:	2b10      	cmp	r3, #16
   8bf48:	f8c8 1000 	str.w	r1, [r8]
   8bf4c:	dd1b      	ble.n	8bf86 <_svfprintf_r+0x666>
   8bf4e:	980c      	ldr	r0, [sp, #48]	; 0x30
   8bf50:	2210      	movs	r2, #16
   8bf52:	990d      	ldr	r1, [sp, #52]	; 0x34
   8bf54:	f8c8 2004 	str.w	r2, [r8, #4]
   8bf58:	1c42      	adds	r2, r0, #1
   8bf5a:	3110      	adds	r1, #16
   8bf5c:	2a07      	cmp	r2, #7
   8bf5e:	910d      	str	r1, [sp, #52]	; 0x34
   8bf60:	920c      	str	r2, [sp, #48]	; 0x30
   8bf62:	dc02      	bgt.n	8bf6a <_svfprintf_r+0x64a>
   8bf64:	f108 0808 	add.w	r8, r8, #8
   8bf68:	e00b      	b.n	8bf82 <_svfprintf_r+0x662>
   8bf6a:	4658      	mov	r0, fp
   8bf6c:	4649      	mov	r1, r9
   8bf6e:	aa0b      	add	r2, sp, #44	; 0x2c
   8bf70:	9300      	str	r3, [sp, #0]
   8bf72:	f001 fd27 	bl	8d9c4 <__ssprint_r>
   8bf76:	9b00      	ldr	r3, [sp, #0]
   8bf78:	2800      	cmp	r0, #0
   8bf7a:	f040 80be 	bne.w	8c0fa <_svfprintf_r+0x7da>
   8bf7e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8bf82:	3b10      	subs	r3, #16
   8bf84:	e7de      	b.n	8bf44 <_svfprintf_r+0x624>
   8bf86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8bf88:	980d      	ldr	r0, [sp, #52]	; 0x34
   8bf8a:	1c51      	adds	r1, r2, #1
   8bf8c:	f8c8 3004 	str.w	r3, [r8, #4]
   8bf90:	2907      	cmp	r1, #7
   8bf92:	4403      	add	r3, r0
   8bf94:	930d      	str	r3, [sp, #52]	; 0x34
   8bf96:	910c      	str	r1, [sp, #48]	; 0x30
   8bf98:	dc02      	bgt.n	8bfa0 <_svfprintf_r+0x680>
   8bf9a:	f108 0808 	add.w	r8, r8, #8
   8bf9e:	e009      	b.n	8bfb4 <_svfprintf_r+0x694>
   8bfa0:	4658      	mov	r0, fp
   8bfa2:	4649      	mov	r1, r9
   8bfa4:	aa0b      	add	r2, sp, #44	; 0x2c
   8bfa6:	f001 fd0d 	bl	8d9c4 <__ssprint_r>
   8bfaa:	2800      	cmp	r0, #0
   8bfac:	f040 80a5 	bne.w	8c0fa <_svfprintf_r+0x7da>
   8bfb0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8bfb4:	1b2d      	subs	r5, r5, r4
   8bfb6:	2d00      	cmp	r5, #0
   8bfb8:	dd34      	ble.n	8c024 <_svfprintf_r+0x704>
   8bfba:	484b      	ldr	r0, [pc, #300]	; (8c0e8 <_svfprintf_r+0x7c8>)
   8bfbc:	2d10      	cmp	r5, #16
   8bfbe:	f8c8 0000 	str.w	r0, [r8]
   8bfc2:	dd19      	ble.n	8bff8 <_svfprintf_r+0x6d8>
   8bfc4:	980c      	ldr	r0, [sp, #48]	; 0x30
   8bfc6:	990d      	ldr	r1, [sp, #52]	; 0x34
   8bfc8:	1c43      	adds	r3, r0, #1
   8bfca:	2210      	movs	r2, #16
   8bfcc:	3110      	adds	r1, #16
   8bfce:	2b07      	cmp	r3, #7
   8bfd0:	f8c8 2004 	str.w	r2, [r8, #4]
   8bfd4:	910d      	str	r1, [sp, #52]	; 0x34
   8bfd6:	930c      	str	r3, [sp, #48]	; 0x30
   8bfd8:	dc02      	bgt.n	8bfe0 <_svfprintf_r+0x6c0>
   8bfda:	f108 0808 	add.w	r8, r8, #8
   8bfde:	e009      	b.n	8bff4 <_svfprintf_r+0x6d4>
   8bfe0:	4658      	mov	r0, fp
   8bfe2:	4649      	mov	r1, r9
   8bfe4:	aa0b      	add	r2, sp, #44	; 0x2c
   8bfe6:	f001 fced 	bl	8d9c4 <__ssprint_r>
   8bfea:	2800      	cmp	r0, #0
   8bfec:	f040 8085 	bne.w	8c0fa <_svfprintf_r+0x7da>
   8bff0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8bff4:	3d10      	subs	r5, #16
   8bff6:	e7e0      	b.n	8bfba <_svfprintf_r+0x69a>
   8bff8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8bffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8bffc:	1c51      	adds	r1, r2, #1
   8bffe:	f8c8 5004 	str.w	r5, [r8, #4]
   8c002:	2907      	cmp	r1, #7
   8c004:	441d      	add	r5, r3
   8c006:	950d      	str	r5, [sp, #52]	; 0x34
   8c008:	910c      	str	r1, [sp, #48]	; 0x30
   8c00a:	dc02      	bgt.n	8c012 <_svfprintf_r+0x6f2>
   8c00c:	f108 0808 	add.w	r8, r8, #8
   8c010:	e008      	b.n	8c024 <_svfprintf_r+0x704>
   8c012:	4658      	mov	r0, fp
   8c014:	4649      	mov	r1, r9
   8c016:	aa0b      	add	r2, sp, #44	; 0x2c
   8c018:	f001 fcd4 	bl	8d9c4 <__ssprint_r>
   8c01c:	2800      	cmp	r0, #0
   8c01e:	d16c      	bne.n	8c0fa <_svfprintf_r+0x7da>
   8c020:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c024:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8c026:	980d      	ldr	r0, [sp, #52]	; 0x34
   8c028:	1c5a      	adds	r2, r3, #1
   8c02a:	f8c8 4004 	str.w	r4, [r8, #4]
   8c02e:	2a07      	cmp	r2, #7
   8c030:	4404      	add	r4, r0
   8c032:	f8c8 a000 	str.w	sl, [r8]
   8c036:	940d      	str	r4, [sp, #52]	; 0x34
   8c038:	920c      	str	r2, [sp, #48]	; 0x30
   8c03a:	dc02      	bgt.n	8c042 <_svfprintf_r+0x722>
   8c03c:	f108 0308 	add.w	r3, r8, #8
   8c040:	e007      	b.n	8c052 <_svfprintf_r+0x732>
   8c042:	4658      	mov	r0, fp
   8c044:	4649      	mov	r1, r9
   8c046:	aa0b      	add	r2, sp, #44	; 0x2c
   8c048:	f001 fcbc 	bl	8d9c4 <__ssprint_r>
   8c04c:	2800      	cmp	r0, #0
   8c04e:	d154      	bne.n	8c0fa <_svfprintf_r+0x7da>
   8c050:	ab18      	add	r3, sp, #96	; 0x60
   8c052:	077a      	lsls	r2, r7, #29
   8c054:	d40b      	bmi.n	8c06e <_svfprintf_r+0x74e>
   8c056:	9804      	ldr	r0, [sp, #16]
   8c058:	9b02      	ldr	r3, [sp, #8]
   8c05a:	9a03      	ldr	r2, [sp, #12]
   8c05c:	990d      	ldr	r1, [sp, #52]	; 0x34
   8c05e:	4293      	cmp	r3, r2
   8c060:	bfac      	ite	ge
   8c062:	18c0      	addge	r0, r0, r3
   8c064:	1880      	addlt	r0, r0, r2
   8c066:	9004      	str	r0, [sp, #16]
   8c068:	2900      	cmp	r1, #0
   8c06a:	d036      	beq.n	8c0da <_svfprintf_r+0x7ba>
   8c06c:	e02f      	b.n	8c0ce <_svfprintf_r+0x7ae>
   8c06e:	9c03      	ldr	r4, [sp, #12]
   8c070:	9902      	ldr	r1, [sp, #8]
   8c072:	1a64      	subs	r4, r4, r1
   8c074:	2c00      	cmp	r4, #0
   8c076:	ddee      	ble.n	8c056 <_svfprintf_r+0x736>
   8c078:	481a      	ldr	r0, [pc, #104]	; (8c0e4 <_svfprintf_r+0x7c4>)
   8c07a:	2c10      	cmp	r4, #16
   8c07c:	6018      	str	r0, [r3, #0]
   8c07e:	dd15      	ble.n	8c0ac <_svfprintf_r+0x78c>
   8c080:	990c      	ldr	r1, [sp, #48]	; 0x30
   8c082:	2010      	movs	r0, #16
   8c084:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8c086:	6058      	str	r0, [r3, #4]
   8c088:	1c48      	adds	r0, r1, #1
   8c08a:	3210      	adds	r2, #16
   8c08c:	2807      	cmp	r0, #7
   8c08e:	920d      	str	r2, [sp, #52]	; 0x34
   8c090:	900c      	str	r0, [sp, #48]	; 0x30
   8c092:	dc01      	bgt.n	8c098 <_svfprintf_r+0x778>
   8c094:	3308      	adds	r3, #8
   8c096:	e007      	b.n	8c0a8 <_svfprintf_r+0x788>
   8c098:	4658      	mov	r0, fp
   8c09a:	4649      	mov	r1, r9
   8c09c:	aa0b      	add	r2, sp, #44	; 0x2c
   8c09e:	f001 fc91 	bl	8d9c4 <__ssprint_r>
   8c0a2:	2800      	cmp	r0, #0
   8c0a4:	d129      	bne.n	8c0fa <_svfprintf_r+0x7da>
   8c0a6:	ab18      	add	r3, sp, #96	; 0x60
   8c0a8:	3c10      	subs	r4, #16
   8c0aa:	e7e5      	b.n	8c078 <_svfprintf_r+0x758>
   8c0ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c0ae:	605c      	str	r4, [r3, #4]
   8c0b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8c0b2:	1c51      	adds	r1, r2, #1
   8c0b4:	191c      	adds	r4, r3, r4
   8c0b6:	2907      	cmp	r1, #7
   8c0b8:	940d      	str	r4, [sp, #52]	; 0x34
   8c0ba:	910c      	str	r1, [sp, #48]	; 0x30
   8c0bc:	ddcb      	ble.n	8c056 <_svfprintf_r+0x736>
   8c0be:	4658      	mov	r0, fp
   8c0c0:	4649      	mov	r1, r9
   8c0c2:	aa0b      	add	r2, sp, #44	; 0x2c
   8c0c4:	f001 fc7e 	bl	8d9c4 <__ssprint_r>
   8c0c8:	2800      	cmp	r0, #0
   8c0ca:	d0c4      	beq.n	8c056 <_svfprintf_r+0x736>
   8c0cc:	e015      	b.n	8c0fa <_svfprintf_r+0x7da>
   8c0ce:	4658      	mov	r0, fp
   8c0d0:	4649      	mov	r1, r9
   8c0d2:	aa0b      	add	r2, sp, #44	; 0x2c
   8c0d4:	f001 fc76 	bl	8d9c4 <__ssprint_r>
   8c0d8:	b978      	cbnz	r0, 8c0fa <_svfprintf_r+0x7da>
   8c0da:	2500      	movs	r5, #0
   8c0dc:	950c      	str	r5, [sp, #48]	; 0x30
   8c0de:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c0e2:	e446      	b.n	8b972 <_svfprintf_r+0x52>
   8c0e4:	0008f5ec 	.word	0x0008f5ec
   8c0e8:	0008f5fc 	.word	0x0008f5fc
   8c0ec:	980d      	ldr	r0, [sp, #52]	; 0x34
   8c0ee:	b120      	cbz	r0, 8c0fa <_svfprintf_r+0x7da>
   8c0f0:	4658      	mov	r0, fp
   8c0f2:	4649      	mov	r1, r9
   8c0f4:	aa0b      	add	r2, sp, #44	; 0x2c
   8c0f6:	f001 fc65 	bl	8d9c4 <__ssprint_r>
   8c0fa:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   8c0fe:	9b04      	ldr	r3, [sp, #16]
   8c100:	f002 0140 	and.w	r1, r2, #64	; 0x40
   8c104:	b208      	sxth	r0, r1
   8c106:	2800      	cmp	r0, #0
   8c108:	bf18      	it	ne
   8c10a:	f04f 33ff 	movne.w	r3, #4294967295
   8c10e:	4618      	mov	r0, r3
   8c110:	b029      	add	sp, #164	; 0xa4
   8c112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c116:	bf00      	nop

0008c118 <register_fini>:
   8c118:	4b02      	ldr	r3, [pc, #8]	; (8c124 <register_fini+0xc>)
   8c11a:	b113      	cbz	r3, 8c122 <register_fini+0xa>
   8c11c:	4802      	ldr	r0, [pc, #8]	; (8c128 <register_fini+0x10>)
   8c11e:	f000 b805 	b.w	8c12c <atexit>
   8c122:	4770      	bx	lr
   8c124:	00000000 	.word	0x00000000
   8c128:	0008aa39 	.word	0x0008aa39

0008c12c <atexit>:
   8c12c:	4601      	mov	r1, r0
   8c12e:	2000      	movs	r0, #0
   8c130:	4602      	mov	r2, r0
   8c132:	4603      	mov	r3, r0
   8c134:	f7fe bc32 	b.w	8a99c <__register_exitproc>

0008c138 <_malloc_trim_r>:
   8c138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c13a:	4d23      	ldr	r5, [pc, #140]	; (8c1c8 <_malloc_trim_r+0x90>)
   8c13c:	460e      	mov	r6, r1
   8c13e:	4604      	mov	r4, r0
   8c140:	f000 fe8e 	bl	8ce60 <__malloc_lock>
   8c144:	68ab      	ldr	r3, [r5, #8]
   8c146:	685f      	ldr	r7, [r3, #4]
   8c148:	f027 0703 	bic.w	r7, r7, #3
   8c14c:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
   8c150:	1b81      	subs	r1, r0, r6
   8c152:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   8c156:	f022 060f 	bic.w	r6, r2, #15
   8c15a:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   8c15e:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   8c162:	da04      	bge.n	8c16e <_malloc_trim_r+0x36>
   8c164:	4620      	mov	r0, r4
   8c166:	f000 fe7c 	bl	8ce62 <__malloc_unlock>
   8c16a:	2000      	movs	r0, #0
   8c16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c16e:	2100      	movs	r1, #0
   8c170:	4620      	mov	r0, r4
   8c172:	f001 fc07 	bl	8d984 <_sbrk_r>
   8c176:	68ab      	ldr	r3, [r5, #8]
   8c178:	19d9      	adds	r1, r3, r7
   8c17a:	4288      	cmp	r0, r1
   8c17c:	d1f2      	bne.n	8c164 <_malloc_trim_r+0x2c>
   8c17e:	4271      	negs	r1, r6
   8c180:	4620      	mov	r0, r4
   8c182:	f001 fbff 	bl	8d984 <_sbrk_r>
   8c186:	3001      	adds	r0, #1
   8c188:	d110      	bne.n	8c1ac <_malloc_trim_r+0x74>
   8c18a:	2100      	movs	r1, #0
   8c18c:	4620      	mov	r0, r4
   8c18e:	f001 fbf9 	bl	8d984 <_sbrk_r>
   8c192:	68ab      	ldr	r3, [r5, #8]
   8c194:	1ac2      	subs	r2, r0, r3
   8c196:	2a0f      	cmp	r2, #15
   8c198:	dde4      	ble.n	8c164 <_malloc_trim_r+0x2c>
   8c19a:	490c      	ldr	r1, [pc, #48]	; (8c1cc <_malloc_trim_r+0x94>)
   8c19c:	f042 0201 	orr.w	r2, r2, #1
   8c1a0:	6809      	ldr	r1, [r1, #0]
   8c1a2:	605a      	str	r2, [r3, #4]
   8c1a4:	1a40      	subs	r0, r0, r1
   8c1a6:	490a      	ldr	r1, [pc, #40]	; (8c1d0 <_malloc_trim_r+0x98>)
   8c1a8:	6008      	str	r0, [r1, #0]
   8c1aa:	e7db      	b.n	8c164 <_malloc_trim_r+0x2c>
   8c1ac:	4b08      	ldr	r3, [pc, #32]	; (8c1d0 <_malloc_trim_r+0x98>)
   8c1ae:	68a8      	ldr	r0, [r5, #8]
   8c1b0:	681a      	ldr	r2, [r3, #0]
   8c1b2:	1bbf      	subs	r7, r7, r6
   8c1b4:	f047 0701 	orr.w	r7, r7, #1
   8c1b8:	6047      	str	r7, [r0, #4]
   8c1ba:	1b96      	subs	r6, r2, r6
   8c1bc:	4620      	mov	r0, r4
   8c1be:	601e      	str	r6, [r3, #0]
   8c1c0:	f000 fe4f 	bl	8ce62 <__malloc_unlock>
   8c1c4:	2001      	movs	r0, #1
   8c1c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c1c8:	2007077c 	.word	0x2007077c
   8c1cc:	20070b84 	.word	0x20070b84
   8c1d0:	200716d0 	.word	0x200716d0

0008c1d4 <_free_r>:
   8c1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c1d6:	4606      	mov	r6, r0
   8c1d8:	460d      	mov	r5, r1
   8c1da:	2900      	cmp	r1, #0
   8c1dc:	f000 80a6 	beq.w	8c32c <_free_r+0x158>
   8c1e0:	f000 fe3e 	bl	8ce60 <__malloc_lock>
   8c1e4:	f855 cc04 	ldr.w	ip, [r5, #-4]
   8c1e8:	4f51      	ldr	r7, [pc, #324]	; (8c330 <_free_r+0x15c>)
   8c1ea:	f1a5 0308 	sub.w	r3, r5, #8
   8c1ee:	f02c 0201 	bic.w	r2, ip, #1
   8c1f2:	189c      	adds	r4, r3, r2
   8c1f4:	68b9      	ldr	r1, [r7, #8]
   8c1f6:	6860      	ldr	r0, [r4, #4]
   8c1f8:	428c      	cmp	r4, r1
   8c1fa:	f020 0003 	bic.w	r0, r0, #3
   8c1fe:	f00c 0101 	and.w	r1, ip, #1
   8c202:	d11c      	bne.n	8c23e <_free_r+0x6a>
   8c204:	1882      	adds	r2, r0, r2
   8c206:	b939      	cbnz	r1, 8c218 <_free_r+0x44>
   8c208:	f855 1c08 	ldr.w	r1, [r5, #-8]
   8c20c:	1a5b      	subs	r3, r3, r1
   8c20e:	6898      	ldr	r0, [r3, #8]
   8c210:	1852      	adds	r2, r2, r1
   8c212:	68d9      	ldr	r1, [r3, #12]
   8c214:	60c1      	str	r1, [r0, #12]
   8c216:	6088      	str	r0, [r1, #8]
   8c218:	4845      	ldr	r0, [pc, #276]	; (8c330 <_free_r+0x15c>)
   8c21a:	f042 0101 	orr.w	r1, r2, #1
   8c21e:	6059      	str	r1, [r3, #4]
   8c220:	6083      	str	r3, [r0, #8]
   8c222:	4b44      	ldr	r3, [pc, #272]	; (8c334 <_free_r+0x160>)
   8c224:	6819      	ldr	r1, [r3, #0]
   8c226:	428a      	cmp	r2, r1
   8c228:	d304      	bcc.n	8c234 <_free_r+0x60>
   8c22a:	4a43      	ldr	r2, [pc, #268]	; (8c338 <_free_r+0x164>)
   8c22c:	4630      	mov	r0, r6
   8c22e:	6811      	ldr	r1, [r2, #0]
   8c230:	f7ff ff82 	bl	8c138 <_malloc_trim_r>
   8c234:	4630      	mov	r0, r6
   8c236:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8c23a:	f000 be12 	b.w	8ce62 <__malloc_unlock>
   8c23e:	6060      	str	r0, [r4, #4]
   8c240:	b959      	cbnz	r1, 8c25a <_free_r+0x86>
   8c242:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8c246:	3708      	adds	r7, #8
   8c248:	1b5b      	subs	r3, r3, r5
   8c24a:	1952      	adds	r2, r2, r5
   8c24c:	689d      	ldr	r5, [r3, #8]
   8c24e:	42bd      	cmp	r5, r7
   8c250:	d005      	beq.n	8c25e <_free_r+0x8a>
   8c252:	68df      	ldr	r7, [r3, #12]
   8c254:	60ef      	str	r7, [r5, #12]
   8c256:	60bd      	str	r5, [r7, #8]
   8c258:	e002      	b.n	8c260 <_free_r+0x8c>
   8c25a:	2100      	movs	r1, #0
   8c25c:	e000      	b.n	8c260 <_free_r+0x8c>
   8c25e:	2101      	movs	r1, #1
   8c260:	1825      	adds	r5, r4, r0
   8c262:	686d      	ldr	r5, [r5, #4]
   8c264:	f015 0f01 	tst.w	r5, #1
   8c268:	d10f      	bne.n	8c28a <_free_r+0xb6>
   8c26a:	1812      	adds	r2, r2, r0
   8c26c:	b949      	cbnz	r1, 8c282 <_free_r+0xae>
   8c26e:	68a0      	ldr	r0, [r4, #8]
   8c270:	4d32      	ldr	r5, [pc, #200]	; (8c33c <_free_r+0x168>)
   8c272:	42a8      	cmp	r0, r5
   8c274:	d105      	bne.n	8c282 <_free_r+0xae>
   8c276:	60eb      	str	r3, [r5, #12]
   8c278:	60ab      	str	r3, [r5, #8]
   8c27a:	60d8      	str	r0, [r3, #12]
   8c27c:	6098      	str	r0, [r3, #8]
   8c27e:	2101      	movs	r1, #1
   8c280:	e003      	b.n	8c28a <_free_r+0xb6>
   8c282:	68e0      	ldr	r0, [r4, #12]
   8c284:	68a4      	ldr	r4, [r4, #8]
   8c286:	60e0      	str	r0, [r4, #12]
   8c288:	6084      	str	r4, [r0, #8]
   8c28a:	f042 0001 	orr.w	r0, r2, #1
   8c28e:	6058      	str	r0, [r3, #4]
   8c290:	509a      	str	r2, [r3, r2]
   8c292:	2900      	cmp	r1, #0
   8c294:	d1ce      	bne.n	8c234 <_free_r+0x60>
   8c296:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8c29a:	d20c      	bcs.n	8c2b6 <_free_r+0xe2>
   8c29c:	08d2      	lsrs	r2, r2, #3
   8c29e:	1090      	asrs	r0, r2, #2
   8c2a0:	2401      	movs	r4, #1
   8c2a2:	fa04 f400 	lsl.w	r4, r4, r0
   8c2a6:	4922      	ldr	r1, [pc, #136]	; (8c330 <_free_r+0x15c>)
   8c2a8:	6848      	ldr	r0, [r1, #4]
   8c2aa:	4320      	orrs	r0, r4
   8c2ac:	6048      	str	r0, [r1, #4]
   8c2ae:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   8c2b2:	6881      	ldr	r1, [r0, #8]
   8c2b4:	e035      	b.n	8c322 <_free_r+0x14e>
   8c2b6:	0a54      	lsrs	r4, r2, #9
   8c2b8:	2c04      	cmp	r4, #4
   8c2ba:	d802      	bhi.n	8c2c2 <_free_r+0xee>
   8c2bc:	0994      	lsrs	r4, r2, #6
   8c2be:	3438      	adds	r4, #56	; 0x38
   8c2c0:	e016      	b.n	8c2f0 <_free_r+0x11c>
   8c2c2:	2c14      	cmp	r4, #20
   8c2c4:	d801      	bhi.n	8c2ca <_free_r+0xf6>
   8c2c6:	345b      	adds	r4, #91	; 0x5b
   8c2c8:	e012      	b.n	8c2f0 <_free_r+0x11c>
   8c2ca:	2c54      	cmp	r4, #84	; 0x54
   8c2cc:	d802      	bhi.n	8c2d4 <_free_r+0x100>
   8c2ce:	0b14      	lsrs	r4, r2, #12
   8c2d0:	346e      	adds	r4, #110	; 0x6e
   8c2d2:	e00d      	b.n	8c2f0 <_free_r+0x11c>
   8c2d4:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
   8c2d8:	d802      	bhi.n	8c2e0 <_free_r+0x10c>
   8c2da:	0bd4      	lsrs	r4, r2, #15
   8c2dc:	3477      	adds	r4, #119	; 0x77
   8c2de:	e007      	b.n	8c2f0 <_free_r+0x11c>
   8c2e0:	f240 5554 	movw	r5, #1364	; 0x554
   8c2e4:	42ac      	cmp	r4, r5
   8c2e6:	d802      	bhi.n	8c2ee <_free_r+0x11a>
   8c2e8:	0c94      	lsrs	r4, r2, #18
   8c2ea:	347c      	adds	r4, #124	; 0x7c
   8c2ec:	e000      	b.n	8c2f0 <_free_r+0x11c>
   8c2ee:	247e      	movs	r4, #126	; 0x7e
   8c2f0:	4d0f      	ldr	r5, [pc, #60]	; (8c330 <_free_r+0x15c>)
   8c2f2:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   8c2f6:	6881      	ldr	r1, [r0, #8]
   8c2f8:	4281      	cmp	r1, r0
   8c2fa:	d10c      	bne.n	8c316 <_free_r+0x142>
   8c2fc:	2201      	movs	r2, #1
   8c2fe:	10a4      	asrs	r4, r4, #2
   8c300:	fa02 f404 	lsl.w	r4, r2, r4
   8c304:	6868      	ldr	r0, [r5, #4]
   8c306:	ea44 0200 	orr.w	r2, r4, r0
   8c30a:	606a      	str	r2, [r5, #4]
   8c30c:	4608      	mov	r0, r1
   8c30e:	e008      	b.n	8c322 <_free_r+0x14e>
   8c310:	6889      	ldr	r1, [r1, #8]
   8c312:	4281      	cmp	r1, r0
   8c314:	d004      	beq.n	8c320 <_free_r+0x14c>
   8c316:	684c      	ldr	r4, [r1, #4]
   8c318:	f024 0403 	bic.w	r4, r4, #3
   8c31c:	42a2      	cmp	r2, r4
   8c31e:	d3f7      	bcc.n	8c310 <_free_r+0x13c>
   8c320:	68c8      	ldr	r0, [r1, #12]
   8c322:	60d8      	str	r0, [r3, #12]
   8c324:	6099      	str	r1, [r3, #8]
   8c326:	6083      	str	r3, [r0, #8]
   8c328:	60cb      	str	r3, [r1, #12]
   8c32a:	e783      	b.n	8c234 <_free_r+0x60>
   8c32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c32e:	bf00      	nop
   8c330:	2007077c 	.word	0x2007077c
   8c334:	20070b88 	.word	0x20070b88
   8c338:	200716cc 	.word	0x200716cc
   8c33c:	20070784 	.word	0x20070784

0008c340 <rshift>:
   8c340:	b5f0      	push	{r4, r5, r6, r7, lr}
   8c342:	6906      	ldr	r6, [r0, #16]
   8c344:	114b      	asrs	r3, r1, #5
   8c346:	42b3      	cmp	r3, r6
   8c348:	f100 0214 	add.w	r2, r0, #20
   8c34c:	da2a      	bge.n	8c3a4 <rshift+0x64>
   8c34e:	1d1d      	adds	r5, r3, #4
   8c350:	eb00 0686 	add.w	r6, r0, r6, lsl #2
   8c354:	eb00 0385 	add.w	r3, r0, r5, lsl #2
   8c358:	3614      	adds	r6, #20
   8c35a:	1d1d      	adds	r5, r3, #4
   8c35c:	f011 011f 	ands.w	r1, r1, #31
   8c360:	d101      	bne.n	8c366 <rshift+0x26>
   8c362:	4613      	mov	r3, r2
   8c364:	e017      	b.n	8c396 <rshift+0x56>
   8c366:	685c      	ldr	r4, [r3, #4]
   8c368:	f1c1 0c20 	rsb	ip, r1, #32
   8c36c:	fa24 f401 	lsr.w	r4, r4, r1
   8c370:	3504      	adds	r5, #4
   8c372:	4613      	mov	r3, r2
   8c374:	42b5      	cmp	r5, r6
   8c376:	d20a      	bcs.n	8c38e <rshift+0x4e>
   8c378:	682f      	ldr	r7, [r5, #0]
   8c37a:	fa07 f70c 	lsl.w	r7, r7, ip
   8c37e:	433c      	orrs	r4, r7
   8c380:	f843 4b04 	str.w	r4, [r3], #4
   8c384:	f855 4b04 	ldr.w	r4, [r5], #4
   8c388:	fa24 f401 	lsr.w	r4, r4, r1
   8c38c:	e7f2      	b.n	8c374 <rshift+0x34>
   8c38e:	601c      	str	r4, [r3, #0]
   8c390:	b14c      	cbz	r4, 8c3a6 <rshift+0x66>
   8c392:	3304      	adds	r3, #4
   8c394:	e007      	b.n	8c3a6 <rshift+0x66>
   8c396:	42b5      	cmp	r5, r6
   8c398:	d205      	bcs.n	8c3a6 <rshift+0x66>
   8c39a:	f855 1b04 	ldr.w	r1, [r5], #4
   8c39e:	f843 1b04 	str.w	r1, [r3], #4
   8c3a2:	e7f8      	b.n	8c396 <rshift+0x56>
   8c3a4:	4613      	mov	r3, r2
   8c3a6:	1a9b      	subs	r3, r3, r2
   8c3a8:	109a      	asrs	r2, r3, #2
   8c3aa:	6102      	str	r2, [r0, #16]
   8c3ac:	b902      	cbnz	r2, 8c3b0 <rshift+0x70>
   8c3ae:	6142      	str	r2, [r0, #20]
   8c3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0008c3b2 <htinit.constprop.0>:
   8c3b2:	b530      	push	{r4, r5, lr}
   8c3b4:	2300      	movs	r3, #0
   8c3b6:	5cc2      	ldrb	r2, [r0, r3]
   8c3b8:	b122      	cbz	r2, 8c3c4 <htinit.constprop.0+0x12>
   8c3ba:	4c03      	ldr	r4, [pc, #12]	; (8c3c8 <htinit.constprop.0+0x16>)
   8c3bc:	185d      	adds	r5, r3, r1
   8c3be:	5515      	strb	r5, [r2, r4]
   8c3c0:	3301      	adds	r3, #1
   8c3c2:	e7f8      	b.n	8c3b6 <htinit.constprop.0+0x4>
   8c3c4:	bd30      	pop	{r4, r5, pc}
   8c3c6:	bf00      	nop
   8c3c8:	20071ce4 	.word	0x20071ce4

0008c3cc <__hexdig_init>:
   8c3cc:	b508      	push	{r3, lr}
   8c3ce:	2110      	movs	r1, #16
   8c3d0:	4806      	ldr	r0, [pc, #24]	; (8c3ec <__hexdig_init+0x20>)
   8c3d2:	f7ff ffee 	bl	8c3b2 <htinit.constprop.0>
   8c3d6:	211a      	movs	r1, #26
   8c3d8:	4805      	ldr	r0, [pc, #20]	; (8c3f0 <__hexdig_init+0x24>)
   8c3da:	f7ff ffea 	bl	8c3b2 <htinit.constprop.0>
   8c3de:	4805      	ldr	r0, [pc, #20]	; (8c3f4 <__hexdig_init+0x28>)
   8c3e0:	211a      	movs	r1, #26
   8c3e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8c3e6:	f7ff bfe4 	b.w	8c3b2 <htinit.constprop.0>
   8c3ea:	bf00      	nop
   8c3ec:	0008f62e 	.word	0x0008f62e
   8c3f0:	0008f627 	.word	0x0008f627
   8c3f4:	0008f616 	.word	0x0008f616

0008c3f8 <__gethex>:
   8c3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c3fc:	b089      	sub	sp, #36	; 0x24
   8c3fe:	468a      	mov	sl, r1
   8c400:	4616      	mov	r6, r2
   8c402:	9306      	str	r3, [sp, #24]
   8c404:	9003      	str	r0, [sp, #12]
   8c406:	f000 fb09 	bl	8ca1c <_localeconv_r>
   8c40a:	6800      	ldr	r0, [r0, #0]
   8c40c:	9004      	str	r0, [sp, #16]
   8c40e:	f7fe fbdd 	bl	8abcc <strlen>
   8c412:	9904      	ldr	r1, [sp, #16]
   8c414:	4a9d      	ldr	r2, [pc, #628]	; (8c68c <__gethex+0x294>)
   8c416:	180b      	adds	r3, r1, r0
   8c418:	4680      	mov	r8, r0
   8c41a:	f892 4030 	ldrb.w	r4, [r2, #48]	; 0x30
   8c41e:	f813 0c01 	ldrb.w	r0, [r3, #-1]
   8c422:	9007      	str	r0, [sp, #28]
   8c424:	b90c      	cbnz	r4, 8c42a <__gethex+0x32>
   8c426:	f7ff ffd1 	bl	8c3cc <__hexdig_init>
   8c42a:	f8da 5000 	ldr.w	r5, [sl]
   8c42e:	f04f 0900 	mov.w	r9, #0
   8c432:	1cac      	adds	r4, r5, #2
   8c434:	46a3      	mov	fp, r4
   8c436:	f814 7b01 	ldrb.w	r7, [r4], #1
   8c43a:	2f30      	cmp	r7, #48	; 0x30
   8c43c:	d102      	bne.n	8c444 <__gethex+0x4c>
   8c43e:	f109 0901 	add.w	r9, r9, #1
   8c442:	e7f7      	b.n	8c434 <__gethex+0x3c>
   8c444:	4c91      	ldr	r4, [pc, #580]	; (8c68c <__gethex+0x294>)
   8c446:	5de5      	ldrb	r5, [r4, r7]
   8c448:	b9d5      	cbnz	r5, 8c480 <__gethex+0x88>
   8c44a:	4658      	mov	r0, fp
   8c44c:	9904      	ldr	r1, [sp, #16]
   8c44e:	4642      	mov	r2, r8
   8c450:	f7fe fbe6 	bl	8ac20 <strncmp>
   8c454:	2800      	cmp	r0, #0
   8c456:	d136      	bne.n	8c4c6 <__gethex+0xce>
   8c458:	f81b 1008 	ldrb.w	r1, [fp, r8]
   8c45c:	eb0b 0708 	add.w	r7, fp, r8
   8c460:	5c65      	ldrb	r5, [r4, r1]
   8c462:	2d00      	cmp	r5, #0
   8c464:	d030      	beq.n	8c4c8 <__gethex+0xd0>
   8c466:	463b      	mov	r3, r7
   8c468:	4618      	mov	r0, r3
   8c46a:	f813 2b01 	ldrb.w	r2, [r3], #1
   8c46e:	2a30      	cmp	r2, #48	; 0x30
   8c470:	d0fa      	beq.n	8c468 <__gethex+0x70>
   8c472:	4d86      	ldr	r5, [pc, #536]	; (8c68c <__gethex+0x294>)
   8c474:	4683      	mov	fp, r0
   8c476:	5cac      	ldrb	r4, [r5, r2]
   8c478:	463d      	mov	r5, r7
   8c47a:	b924      	cbnz	r4, 8c486 <__gethex+0x8e>
   8c47c:	2401      	movs	r4, #1
   8c47e:	e003      	b.n	8c488 <__gethex+0x90>
   8c480:	2400      	movs	r4, #0
   8c482:	4625      	mov	r5, r4
   8c484:	e002      	b.n	8c48c <__gethex+0x94>
   8c486:	2400      	movs	r4, #0
   8c488:	f04f 0901 	mov.w	r9, #1
   8c48c:	465b      	mov	r3, fp
   8c48e:	461f      	mov	r7, r3
   8c490:	7838      	ldrb	r0, [r7, #0]
   8c492:	497e      	ldr	r1, [pc, #504]	; (8c68c <__gethex+0x294>)
   8c494:	3301      	adds	r3, #1
   8c496:	5c0a      	ldrb	r2, [r1, r0]
   8c498:	2a00      	cmp	r2, #0
   8c49a:	d1f8      	bne.n	8c48e <__gethex+0x96>
   8c49c:	4638      	mov	r0, r7
   8c49e:	9904      	ldr	r1, [sp, #16]
   8c4a0:	4642      	mov	r2, r8
   8c4a2:	f7fe fbbd 	bl	8ac20 <strncmp>
   8c4a6:	b950      	cbnz	r0, 8c4be <__gethex+0xc6>
   8c4a8:	b955      	cbnz	r5, 8c4c0 <__gethex+0xc8>
   8c4aa:	eb07 0508 	add.w	r5, r7, r8
   8c4ae:	462b      	mov	r3, r5
   8c4b0:	461f      	mov	r7, r3
   8c4b2:	7838      	ldrb	r0, [r7, #0]
   8c4b4:	4975      	ldr	r1, [pc, #468]	; (8c68c <__gethex+0x294>)
   8c4b6:	3301      	adds	r3, #1
   8c4b8:	5c0a      	ldrb	r2, [r1, r0]
   8c4ba:	2a00      	cmp	r2, #0
   8c4bc:	d1f8      	bne.n	8c4b0 <__gethex+0xb8>
   8c4be:	b125      	cbz	r5, 8c4ca <__gethex+0xd2>
   8c4c0:	1bed      	subs	r5, r5, r7
   8c4c2:	00ad      	lsls	r5, r5, #2
   8c4c4:	e001      	b.n	8c4ca <__gethex+0xd2>
   8c4c6:	465f      	mov	r7, fp
   8c4c8:	2401      	movs	r4, #1
   8c4ca:	783b      	ldrb	r3, [r7, #0]
   8c4cc:	2b50      	cmp	r3, #80	; 0x50
   8c4ce:	d001      	beq.n	8c4d4 <__gethex+0xdc>
   8c4d0:	2b70      	cmp	r3, #112	; 0x70
   8c4d2:	d12e      	bne.n	8c532 <__gethex+0x13a>
   8c4d4:	7878      	ldrb	r0, [r7, #1]
   8c4d6:	282b      	cmp	r0, #43	; 0x2b
   8c4d8:	d005      	beq.n	8c4e6 <__gethex+0xee>
   8c4da:	282d      	cmp	r0, #45	; 0x2d
   8c4dc:	d006      	beq.n	8c4ec <__gethex+0xf4>
   8c4de:	2100      	movs	r1, #0
   8c4e0:	1c78      	adds	r0, r7, #1
   8c4e2:	9105      	str	r1, [sp, #20]
   8c4e4:	e005      	b.n	8c4f2 <__gethex+0xfa>
   8c4e6:	2300      	movs	r3, #0
   8c4e8:	9305      	str	r3, [sp, #20]
   8c4ea:	e001      	b.n	8c4f0 <__gethex+0xf8>
   8c4ec:	2201      	movs	r2, #1
   8c4ee:	9205      	str	r2, [sp, #20]
   8c4f0:	1cb8      	adds	r0, r7, #2
   8c4f2:	7801      	ldrb	r1, [r0, #0]
   8c4f4:	4a65      	ldr	r2, [pc, #404]	; (8c68c <__gethex+0x294>)
   8c4f6:	5c52      	ldrb	r2, [r2, r1]
   8c4f8:	b1da      	cbz	r2, 8c532 <__gethex+0x13a>
   8c4fa:	2a19      	cmp	r2, #25
   8c4fc:	dc19      	bgt.n	8c532 <__gethex+0x13a>
   8c4fe:	3a10      	subs	r2, #16
   8c500:	3001      	adds	r0, #1
   8c502:	4603      	mov	r3, r0
   8c504:	f893 c000 	ldrb.w	ip, [r3]
   8c508:	4960      	ldr	r1, [pc, #384]	; (8c68c <__gethex+0x294>)
   8c50a:	3001      	adds	r0, #1
   8c50c:	f811 100c 	ldrb.w	r1, [r1, ip]
   8c510:	9102      	str	r1, [sp, #8]
   8c512:	b919      	cbnz	r1, 8c51c <__gethex+0x124>
   8c514:	9805      	ldr	r0, [sp, #20]
   8c516:	b150      	cbz	r0, 8c52e <__gethex+0x136>
   8c518:	4252      	negs	r2, r2
   8c51a:	e008      	b.n	8c52e <__gethex+0x136>
   8c51c:	9902      	ldr	r1, [sp, #8]
   8c51e:	2919      	cmp	r1, #25
   8c520:	dcf8      	bgt.n	8c514 <__gethex+0x11c>
   8c522:	9b02      	ldr	r3, [sp, #8]
   8c524:	210a      	movs	r1, #10
   8c526:	fb01 3202 	mla	r2, r1, r2, r3
   8c52a:	3a10      	subs	r2, #16
   8c52c:	e7e9      	b.n	8c502 <__gethex+0x10a>
   8c52e:	18ad      	adds	r5, r5, r2
   8c530:	e000      	b.n	8c534 <__gethex+0x13c>
   8c532:	463b      	mov	r3, r7
   8c534:	f8ca 3000 	str.w	r3, [sl]
   8c538:	b13c      	cbz	r4, 8c54a <__gethex+0x152>
   8c53a:	f1b9 0f00 	cmp.w	r9, #0
   8c53e:	bf0c      	ite	eq
   8c540:	f04f 0906 	moveq.w	r9, #6
   8c544:	f04f 0900 	movne.w	r9, #0
   8c548:	e18b      	b.n	8c862 <__gethex+0x46a>
   8c54a:	ebcb 0007 	rsb	r0, fp, r7
   8c54e:	1e43      	subs	r3, r0, #1
   8c550:	4621      	mov	r1, r4
   8c552:	2b07      	cmp	r3, #7
   8c554:	dd02      	ble.n	8c55c <__gethex+0x164>
   8c556:	3101      	adds	r1, #1
   8c558:	105b      	asrs	r3, r3, #1
   8c55a:	e7fa      	b.n	8c552 <__gethex+0x15a>
   8c55c:	9803      	ldr	r0, [sp, #12]
   8c55e:	f000 fc81 	bl	8ce64 <_Balloc>
   8c562:	46b9      	mov	r9, r7
   8c564:	f100 0314 	add.w	r3, r0, #20
   8c568:	2700      	movs	r7, #0
   8c56a:	4604      	mov	r4, r0
   8c56c:	9302      	str	r3, [sp, #8]
   8c56e:	46ba      	mov	sl, r7
   8c570:	45d9      	cmp	r9, fp
   8c572:	d932      	bls.n	8c5da <__gethex+0x1e2>
   8c574:	f819 1c01 	ldrb.w	r1, [r9, #-1]
   8c578:	f8dd c01c 	ldr.w	ip, [sp, #28]
   8c57c:	f109 3eff 	add.w	lr, r9, #4294967295
   8c580:	4561      	cmp	r1, ip
   8c582:	f8cd e014 	str.w	lr, [sp, #20]
   8c586:	d007      	beq.n	8c598 <__gethex+0x1a0>
   8c588:	f1ba 0f20 	cmp.w	sl, #32
   8c58c:	d116      	bne.n	8c5bc <__gethex+0x1c4>
   8c58e:	f843 7b04 	str.w	r7, [r3], #4
   8c592:	2700      	movs	r7, #0
   8c594:	46ba      	mov	sl, r7
   8c596:	e011      	b.n	8c5bc <__gethex+0x1c4>
   8c598:	9a05      	ldr	r2, [sp, #20]
   8c59a:	f1c8 0001 	rsb	r0, r8, #1
   8c59e:	eb02 0c00 	add.w	ip, r2, r0
   8c5a2:	45dc      	cmp	ip, fp
   8c5a4:	d3f0      	bcc.n	8c588 <__gethex+0x190>
   8c5a6:	4660      	mov	r0, ip
   8c5a8:	9904      	ldr	r1, [sp, #16]
   8c5aa:	4642      	mov	r2, r8
   8c5ac:	e88d 1008 	stmia.w	sp, {r3, ip}
   8c5b0:	f7fe fb36 	bl	8ac20 <strncmp>
   8c5b4:	e89d 1008 	ldmia.w	sp, {r3, ip}
   8c5b8:	b168      	cbz	r0, 8c5d6 <__gethex+0x1de>
   8c5ba:	e7e5      	b.n	8c588 <__gethex+0x190>
   8c5bc:	f819 0c01 	ldrb.w	r0, [r9, #-1]
   8c5c0:	4932      	ldr	r1, [pc, #200]	; (8c68c <__gethex+0x294>)
   8c5c2:	f8dd c014 	ldr.w	ip, [sp, #20]
   8c5c6:	5c0a      	ldrb	r2, [r1, r0]
   8c5c8:	f002 000f 	and.w	r0, r2, #15
   8c5cc:	fa00 f10a 	lsl.w	r1, r0, sl
   8c5d0:	f10a 0a04 	add.w	sl, sl, #4
   8c5d4:	430f      	orrs	r7, r1
   8c5d6:	46e1      	mov	r9, ip
   8c5d8:	e7ca      	b.n	8c570 <__gethex+0x178>
   8c5da:	9a02      	ldr	r2, [sp, #8]
   8c5dc:	f843 7b04 	str.w	r7, [r3], #4
   8c5e0:	1a99      	subs	r1, r3, r2
   8c5e2:	108b      	asrs	r3, r1, #2
   8c5e4:	4638      	mov	r0, r7
   8c5e6:	6123      	str	r3, [r4, #16]
   8c5e8:	ea4f 1a43 	mov.w	sl, r3, lsl #5
   8c5ec:	f000 fce7 	bl	8cfbe <__hi0bits>
   8c5f0:	6837      	ldr	r7, [r6, #0]
   8c5f2:	ebc0 000a 	rsb	r0, r0, sl
   8c5f6:	42b8      	cmp	r0, r7
   8c5f8:	dd2a      	ble.n	8c650 <__gethex+0x258>
   8c5fa:	ebc7 0900 	rsb	r9, r7, r0
   8c5fe:	4649      	mov	r1, r9
   8c600:	4620      	mov	r0, r4
   8c602:	f000 fff8 	bl	8d5f6 <__any_on>
   8c606:	b1e0      	cbz	r0, 8c642 <__gethex+0x24a>
   8c608:	f109 33ff 	add.w	r3, r9, #4294967295
   8c60c:	f003 011f 	and.w	r1, r3, #31
   8c610:	f04f 0a01 	mov.w	sl, #1
   8c614:	fa0a f001 	lsl.w	r0, sl, r1
   8c618:	115a      	asrs	r2, r3, #5
   8c61a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
   8c61e:	694a      	ldr	r2, [r1, #20]
   8c620:	4210      	tst	r0, r2
   8c622:	d00f      	beq.n	8c644 <__gethex+0x24c>
   8c624:	4553      	cmp	r3, sl
   8c626:	dc02      	bgt.n	8c62e <__gethex+0x236>
   8c628:	f04f 0a02 	mov.w	sl, #2
   8c62c:	e00a      	b.n	8c644 <__gethex+0x24c>
   8c62e:	4620      	mov	r0, r4
   8c630:	f1a9 0102 	sub.w	r1, r9, #2
   8c634:	f000 ffdf 	bl	8d5f6 <__any_on>
   8c638:	2800      	cmp	r0, #0
   8c63a:	d0f5      	beq.n	8c628 <__gethex+0x230>
   8c63c:	f04f 0a03 	mov.w	sl, #3
   8c640:	e000      	b.n	8c644 <__gethex+0x24c>
   8c642:	4682      	mov	sl, r0
   8c644:	4620      	mov	r0, r4
   8c646:	4649      	mov	r1, r9
   8c648:	f7ff fe7a 	bl	8c340 <rshift>
   8c64c:	444d      	add	r5, r9
   8c64e:	e00f      	b.n	8c670 <__gethex+0x278>
   8c650:	da0c      	bge.n	8c66c <__gethex+0x274>
   8c652:	ebc0 0907 	rsb	r9, r0, r7
   8c656:	4621      	mov	r1, r4
   8c658:	464a      	mov	r2, r9
   8c65a:	9803      	ldr	r0, [sp, #12]
   8c65c:	f000 fdd8 	bl	8d210 <__lshift>
   8c660:	f100 0214 	add.w	r2, r0, #20
   8c664:	4604      	mov	r4, r0
   8c666:	ebc9 0505 	rsb	r5, r9, r5
   8c66a:	9202      	str	r2, [sp, #8]
   8c66c:	f04f 0a00 	mov.w	sl, #0
   8c670:	68b3      	ldr	r3, [r6, #8]
   8c672:	429d      	cmp	r5, r3
   8c674:	dd0c      	ble.n	8c690 <__gethex+0x298>
   8c676:	9803      	ldr	r0, [sp, #12]
   8c678:	4621      	mov	r1, r4
   8c67a:	f000 fc19 	bl	8ceb0 <_Bfree>
   8c67e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8c680:	2000      	movs	r0, #0
   8c682:	6010      	str	r0, [r2, #0]
   8c684:	f04f 09a3 	mov.w	r9, #163	; 0xa3
   8c688:	e0eb      	b.n	8c862 <__gethex+0x46a>
   8c68a:	bf00      	nop
   8c68c:	20071ce4 	.word	0x20071ce4
   8c690:	6870      	ldr	r0, [r6, #4]
   8c692:	4285      	cmp	r5, r0
   8c694:	da58      	bge.n	8c748 <__gethex+0x350>
   8c696:	1b45      	subs	r5, r0, r5
   8c698:	42bd      	cmp	r5, r7
   8c69a:	db2e      	blt.n	8c6fa <__gethex+0x302>
   8c69c:	68f2      	ldr	r2, [r6, #12]
   8c69e:	2a02      	cmp	r2, #2
   8c6a0:	d01a      	beq.n	8c6d8 <__gethex+0x2e0>
   8c6a2:	2a03      	cmp	r2, #3
   8c6a4:	d01c      	beq.n	8c6e0 <__gethex+0x2e8>
   8c6a6:	2a01      	cmp	r2, #1
   8c6a8:	d11d      	bne.n	8c6e6 <__gethex+0x2ee>
   8c6aa:	42bd      	cmp	r5, r7
   8c6ac:	d11b      	bne.n	8c6e6 <__gethex+0x2ee>
   8c6ae:	2f01      	cmp	r7, #1
   8c6b0:	dc0b      	bgt.n	8c6ca <__gethex+0x2d2>
   8c6b2:	6873      	ldr	r3, [r6, #4]
   8c6b4:	9806      	ldr	r0, [sp, #24]
   8c6b6:	9902      	ldr	r1, [sp, #8]
   8c6b8:	6003      	str	r3, [r0, #0]
   8c6ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8c6bc:	2201      	movs	r2, #1
   8c6be:	6122      	str	r2, [r4, #16]
   8c6c0:	f04f 0962 	mov.w	r9, #98	; 0x62
   8c6c4:	600a      	str	r2, [r1, #0]
   8c6c6:	601c      	str	r4, [r3, #0]
   8c6c8:	e0cb      	b.n	8c862 <__gethex+0x46a>
   8c6ca:	4620      	mov	r0, r4
   8c6cc:	1e79      	subs	r1, r7, #1
   8c6ce:	f000 ff92 	bl	8d5f6 <__any_on>
   8c6d2:	2800      	cmp	r0, #0
   8c6d4:	d1ed      	bne.n	8c6b2 <__gethex+0x2ba>
   8c6d6:	e006      	b.n	8c6e6 <__gethex+0x2ee>
   8c6d8:	9813      	ldr	r0, [sp, #76]	; 0x4c
   8c6da:	2800      	cmp	r0, #0
   8c6dc:	d0e9      	beq.n	8c6b2 <__gethex+0x2ba>
   8c6de:	e002      	b.n	8c6e6 <__gethex+0x2ee>
   8c6e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8c6e2:	2b00      	cmp	r3, #0
   8c6e4:	d1e5      	bne.n	8c6b2 <__gethex+0x2ba>
   8c6e6:	4621      	mov	r1, r4
   8c6e8:	9803      	ldr	r0, [sp, #12]
   8c6ea:	f000 fbe1 	bl	8ceb0 <_Bfree>
   8c6ee:	9912      	ldr	r1, [sp, #72]	; 0x48
   8c6f0:	2200      	movs	r2, #0
   8c6f2:	600a      	str	r2, [r1, #0]
   8c6f4:	f04f 0950 	mov.w	r9, #80	; 0x50
   8c6f8:	e0b3      	b.n	8c862 <__gethex+0x46a>
   8c6fa:	f105 39ff 	add.w	r9, r5, #4294967295
   8c6fe:	f1ba 0f00 	cmp.w	sl, #0
   8c702:	d108      	bne.n	8c716 <__gethex+0x31e>
   8c704:	f1b9 0f00 	cmp.w	r9, #0
   8c708:	dd07      	ble.n	8c71a <__gethex+0x322>
   8c70a:	4620      	mov	r0, r4
   8c70c:	4649      	mov	r1, r9
   8c70e:	f000 ff72 	bl	8d5f6 <__any_on>
   8c712:	4682      	mov	sl, r0
   8c714:	e001      	b.n	8c71a <__gethex+0x322>
   8c716:	f04f 0a01 	mov.w	sl, #1
   8c71a:	f009 031f 	and.w	r3, r9, #31
   8c71e:	2201      	movs	r2, #1
   8c720:	fa02 f003 	lsl.w	r0, r2, r3
   8c724:	9b02      	ldr	r3, [sp, #8]
   8c726:	ea4f 1169 	mov.w	r1, r9, asr #5
   8c72a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   8c72e:	1b7f      	subs	r7, r7, r5
   8c730:	4208      	tst	r0, r1
   8c732:	4629      	mov	r1, r5
   8c734:	4620      	mov	r0, r4
   8c736:	bf18      	it	ne
   8c738:	f04a 0a02 	orrne.w	sl, sl, #2
   8c73c:	f04f 0902 	mov.w	r9, #2
   8c740:	f7ff fdfe 	bl	8c340 <rshift>
   8c744:	6875      	ldr	r5, [r6, #4]
   8c746:	e001      	b.n	8c74c <__gethex+0x354>
   8c748:	f04f 0901 	mov.w	r9, #1
   8c74c:	f1ba 0f00 	cmp.w	sl, #0
   8c750:	f000 8083 	beq.w	8c85a <__gethex+0x462>
   8c754:	68f2      	ldr	r2, [r6, #12]
   8c756:	2a02      	cmp	r2, #2
   8c758:	d00e      	beq.n	8c778 <__gethex+0x380>
   8c75a:	2a03      	cmp	r2, #3
   8c75c:	d010      	beq.n	8c780 <__gethex+0x388>
   8c75e:	2a01      	cmp	r2, #1
   8c760:	d179      	bne.n	8c856 <__gethex+0x45e>
   8c762:	f01a 0f02 	tst.w	sl, #2
   8c766:	d076      	beq.n	8c856 <__gethex+0x45e>
   8c768:	9802      	ldr	r0, [sp, #8]
   8c76a:	6803      	ldr	r3, [r0, #0]
   8c76c:	ea4a 0a03 	orr.w	sl, sl, r3
   8c770:	f01a 0f01 	tst.w	sl, #1
   8c774:	d107      	bne.n	8c786 <__gethex+0x38e>
   8c776:	e06e      	b.n	8c856 <__gethex+0x45e>
   8c778:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8c77a:	f1c2 0101 	rsb	r1, r2, #1
   8c77e:	e000      	b.n	8c782 <__gethex+0x38a>
   8c780:	9913      	ldr	r1, [sp, #76]	; 0x4c
   8c782:	2900      	cmp	r1, #0
   8c784:	d067      	beq.n	8c856 <__gethex+0x45e>
   8c786:	f8d4 8010 	ldr.w	r8, [r4, #16]
   8c78a:	f104 0314 	add.w	r3, r4, #20
   8c78e:	eb04 0188 	add.w	r1, r4, r8, lsl #2
   8c792:	3114      	adds	r1, #20
   8c794:	4618      	mov	r0, r3
   8c796:	f853 2b04 	ldr.w	r2, [r3], #4
   8c79a:	f1b2 3fff 	cmp.w	r2, #4294967295
   8c79e:	d002      	beq.n	8c7a6 <__gethex+0x3ae>
   8c7a0:	3201      	adds	r2, #1
   8c7a2:	6002      	str	r2, [r0, #0]
   8c7a4:	e022      	b.n	8c7ec <__gethex+0x3f4>
   8c7a6:	2000      	movs	r0, #0
   8c7a8:	428b      	cmp	r3, r1
   8c7aa:	f843 0c04 	str.w	r0, [r3, #-4]
   8c7ae:	d3f1      	bcc.n	8c794 <__gethex+0x39c>
   8c7b0:	68a1      	ldr	r1, [r4, #8]
   8c7b2:	4588      	cmp	r8, r1
   8c7b4:	db13      	blt.n	8c7de <__gethex+0x3e6>
   8c7b6:	6863      	ldr	r3, [r4, #4]
   8c7b8:	9803      	ldr	r0, [sp, #12]
   8c7ba:	1c59      	adds	r1, r3, #1
   8c7bc:	f000 fb52 	bl	8ce64 <_Balloc>
   8c7c0:	6922      	ldr	r2, [r4, #16]
   8c7c2:	f104 010c 	add.w	r1, r4, #12
   8c7c6:	1c93      	adds	r3, r2, #2
   8c7c8:	4682      	mov	sl, r0
   8c7ca:	009a      	lsls	r2, r3, #2
   8c7cc:	f100 000c 	add.w	r0, r0, #12
   8c7d0:	f7fe f96e 	bl	8aab0 <memcpy>
   8c7d4:	4621      	mov	r1, r4
   8c7d6:	9803      	ldr	r0, [sp, #12]
   8c7d8:	f000 fb6a 	bl	8ceb0 <_Bfree>
   8c7dc:	4654      	mov	r4, sl
   8c7de:	6920      	ldr	r0, [r4, #16]
   8c7e0:	2101      	movs	r1, #1
   8c7e2:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   8c7e6:	1843      	adds	r3, r0, r1
   8c7e8:	6151      	str	r1, [r2, #20]
   8c7ea:	6123      	str	r3, [r4, #16]
   8c7ec:	f1b9 0f02 	cmp.w	r9, #2
   8c7f0:	d113      	bne.n	8c81a <__gethex+0x422>
   8c7f2:	6832      	ldr	r2, [r6, #0]
   8c7f4:	1e50      	subs	r0, r2, #1
   8c7f6:	4287      	cmp	r7, r0
   8c7f8:	d12a      	bne.n	8c850 <__gethex+0x458>
   8c7fa:	f007 011f 	and.w	r1, r7, #31
   8c7fe:	2201      	movs	r2, #1
   8c800:	fa02 f201 	lsl.w	r2, r2, r1
   8c804:	117f      	asrs	r7, r7, #5
   8c806:	eb04 0787 	add.w	r7, r4, r7, lsl #2
   8c80a:	697b      	ldr	r3, [r7, #20]
   8c80c:	421a      	tst	r2, r3
   8c80e:	bf0c      	ite	eq
   8c810:	f04f 0902 	moveq.w	r9, #2
   8c814:	f04f 0901 	movne.w	r9, #1
   8c818:	e01a      	b.n	8c850 <__gethex+0x458>
   8c81a:	6920      	ldr	r0, [r4, #16]
   8c81c:	4540      	cmp	r0, r8
   8c81e:	dd09      	ble.n	8c834 <__gethex+0x43c>
   8c820:	2101      	movs	r1, #1
   8c822:	4620      	mov	r0, r4
   8c824:	f7ff fd8c 	bl	8c340 <rshift>
   8c828:	68b3      	ldr	r3, [r6, #8]
   8c82a:	3501      	adds	r5, #1
   8c82c:	429d      	cmp	r5, r3
   8c82e:	f73f af22 	bgt.w	8c676 <__gethex+0x27e>
   8c832:	e00b      	b.n	8c84c <__gethex+0x454>
   8c834:	f017 071f 	ands.w	r7, r7, #31
   8c838:	d008      	beq.n	8c84c <__gethex+0x454>
   8c83a:	eb04 0188 	add.w	r1, r4, r8, lsl #2
   8c83e:	6908      	ldr	r0, [r1, #16]
   8c840:	f000 fbbd 	bl	8cfbe <__hi0bits>
   8c844:	f1c7 0720 	rsb	r7, r7, #32
   8c848:	42b8      	cmp	r0, r7
   8c84a:	dbe9      	blt.n	8c820 <__gethex+0x428>
   8c84c:	f04f 0901 	mov.w	r9, #1
   8c850:	f049 0920 	orr.w	r9, r9, #32
   8c854:	e001      	b.n	8c85a <__gethex+0x462>
   8c856:	f049 0910 	orr.w	r9, r9, #16
   8c85a:	9812      	ldr	r0, [sp, #72]	; 0x48
   8c85c:	9906      	ldr	r1, [sp, #24]
   8c85e:	6004      	str	r4, [r0, #0]
   8c860:	600d      	str	r5, [r1, #0]
   8c862:	4648      	mov	r0, r9
   8c864:	b009      	add	sp, #36	; 0x24
   8c866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c86a:	bf00      	nop

0008c86c <L_shift>:
   8c86c:	f1c2 0208 	rsb	r2, r2, #8
   8c870:	0092      	lsls	r2, r2, #2
   8c872:	b570      	push	{r4, r5, r6, lr}
   8c874:	f1c2 0420 	rsb	r4, r2, #32
   8c878:	6805      	ldr	r5, [r0, #0]
   8c87a:	f850 3f04 	ldr.w	r3, [r0, #4]!
   8c87e:	fa03 f604 	lsl.w	r6, r3, r4
   8c882:	fa23 f302 	lsr.w	r3, r3, r2
   8c886:	4335      	orrs	r5, r6
   8c888:	4288      	cmp	r0, r1
   8c88a:	f840 5c04 	str.w	r5, [r0, #-4]
   8c88e:	6003      	str	r3, [r0, #0]
   8c890:	d3f2      	bcc.n	8c878 <L_shift+0xc>
   8c892:	bd70      	pop	{r4, r5, r6, pc}

0008c894 <__hexnan>:
   8c894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c898:	4b46      	ldr	r3, [pc, #280]	; (8c9b4 <__hexnan+0x120>)
   8c89a:	4683      	mov	fp, r0
   8c89c:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
   8c8a0:	460c      	mov	r4, r1
   8c8a2:	4615      	mov	r5, r2
   8c8a4:	b908      	cbnz	r0, 8c8aa <__hexnan+0x16>
   8c8a6:	f7ff fd91 	bl	8c3cc <__hexdig_init>
   8c8aa:	6821      	ldr	r1, [r4, #0]
   8c8ac:	f8db 3000 	ldr.w	r3, [fp]
   8c8b0:	114e      	asrs	r6, r1, #5
   8c8b2:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   8c8b6:	f011 0a1f 	ands.w	sl, r1, #31
   8c8ba:	bf18      	it	ne
   8c8bc:	3604      	addne	r6, #4
   8c8be:	f1a6 0904 	sub.w	r9, r6, #4
   8c8c2:	2200      	movs	r2, #0
   8c8c4:	f846 2c04 	str.w	r2, [r6, #-4]
   8c8c8:	464f      	mov	r7, r9
   8c8ca:	464c      	mov	r4, r9
   8c8cc:	4694      	mov	ip, r2
   8c8ce:	4690      	mov	r8, r2
   8c8d0:	7859      	ldrb	r1, [r3, #1]
   8c8d2:	b3b9      	cbz	r1, 8c944 <__hexnan+0xb0>
   8c8d4:	4837      	ldr	r0, [pc, #220]	; (8c9b4 <__hexnan+0x120>)
   8c8d6:	5c40      	ldrb	r0, [r0, r1]
   8c8d8:	b9f0      	cbnz	r0, 8c918 <__hexnan+0x84>
   8c8da:	2920      	cmp	r1, #32
   8c8dc:	d816      	bhi.n	8c90c <__hexnan+0x78>
   8c8de:	45c4      	cmp	ip, r8
   8c8e0:	da2e      	bge.n	8c940 <__hexnan+0xac>
   8c8e2:	42bc      	cmp	r4, r7
   8c8e4:	d209      	bcs.n	8c8fa <__hexnan+0x66>
   8c8e6:	2a07      	cmp	r2, #7
   8c8e8:	dc07      	bgt.n	8c8fa <__hexnan+0x66>
   8c8ea:	4620      	mov	r0, r4
   8c8ec:	4639      	mov	r1, r7
   8c8ee:	e88d 1008 	stmia.w	sp, {r3, ip}
   8c8f2:	f7ff ffbb 	bl	8c86c <L_shift>
   8c8f6:	e89d 1008 	ldmia.w	sp, {r3, ip}
   8c8fa:	42ac      	cmp	r4, r5
   8c8fc:	d91f      	bls.n	8c93e <__hexnan+0xaa>
   8c8fe:	2200      	movs	r2, #0
   8c900:	f844 2c04 	str.w	r2, [r4, #-4]
   8c904:	3c04      	subs	r4, #4
   8c906:	46c4      	mov	ip, r8
   8c908:	4627      	mov	r7, r4
   8c90a:	e019      	b.n	8c940 <__hexnan+0xac>
   8c90c:	2929      	cmp	r1, #41	; 0x29
   8c90e:	d14c      	bne.n	8c9aa <__hexnan+0x116>
   8c910:	3302      	adds	r3, #2
   8c912:	f8cb 3000 	str.w	r3, [fp]
   8c916:	e015      	b.n	8c944 <__hexnan+0xb0>
   8c918:	3201      	adds	r2, #1
   8c91a:	2a08      	cmp	r2, #8
   8c91c:	f108 0801 	add.w	r8, r8, #1
   8c920:	dd06      	ble.n	8c930 <__hexnan+0x9c>
   8c922:	42ac      	cmp	r4, r5
   8c924:	d90c      	bls.n	8c940 <__hexnan+0xac>
   8c926:	2200      	movs	r2, #0
   8c928:	f844 2c04 	str.w	r2, [r4, #-4]
   8c92c:	3c04      	subs	r4, #4
   8c92e:	2201      	movs	r2, #1
   8c930:	6821      	ldr	r1, [r4, #0]
   8c932:	f000 000f 	and.w	r0, r0, #15
   8c936:	ea40 1101 	orr.w	r1, r0, r1, lsl #4
   8c93a:	6021      	str	r1, [r4, #0]
   8c93c:	e000      	b.n	8c940 <__hexnan+0xac>
   8c93e:	2208      	movs	r2, #8
   8c940:	3301      	adds	r3, #1
   8c942:	e7c5      	b.n	8c8d0 <__hexnan+0x3c>
   8c944:	f1b8 0f00 	cmp.w	r8, #0
   8c948:	d02f      	beq.n	8c9aa <__hexnan+0x116>
   8c94a:	42bc      	cmp	r4, r7
   8c94c:	d205      	bcs.n	8c95a <__hexnan+0xc6>
   8c94e:	2a07      	cmp	r2, #7
   8c950:	dc03      	bgt.n	8c95a <__hexnan+0xc6>
   8c952:	4620      	mov	r0, r4
   8c954:	4639      	mov	r1, r7
   8c956:	f7ff ff89 	bl	8c86c <L_shift>
   8c95a:	42ac      	cmp	r4, r5
   8c95c:	d90d      	bls.n	8c97a <__hexnan+0xe6>
   8c95e:	462a      	mov	r2, r5
   8c960:	f854 3b04 	ldr.w	r3, [r4], #4
   8c964:	f842 3b04 	str.w	r3, [r2], #4
   8c968:	45a1      	cmp	r9, r4
   8c96a:	4610      	mov	r0, r2
   8c96c:	d2f8      	bcs.n	8c960 <__hexnan+0xcc>
   8c96e:	2100      	movs	r1, #0
   8c970:	f840 1b04 	str.w	r1, [r0], #4
   8c974:	4548      	cmp	r0, r9
   8c976:	d9fa      	bls.n	8c96e <__hexnan+0xda>
   8c978:	e00e      	b.n	8c998 <__hexnan+0x104>
   8c97a:	f1ba 0f00 	cmp.w	sl, #0
   8c97e:	d00b      	beq.n	8c998 <__hexnan+0x104>
   8c980:	f1ca 0a20 	rsb	sl, sl, #32
   8c984:	f04f 32ff 	mov.w	r2, #4294967295
   8c988:	fa22 fa0a 	lsr.w	sl, r2, sl
   8c98c:	f856 0c04 	ldr.w	r0, [r6, #-4]
   8c990:	ea00 010a 	and.w	r1, r0, sl
   8c994:	f846 1c04 	str.w	r1, [r6, #-4]
   8c998:	f856 2c04 	ldr.w	r2, [r6, #-4]
   8c99c:	3e04      	subs	r6, #4
   8c99e:	b932      	cbnz	r2, 8c9ae <__hexnan+0x11a>
   8c9a0:	42b5      	cmp	r5, r6
   8c9a2:	d1f9      	bne.n	8c998 <__hexnan+0x104>
   8c9a4:	2301      	movs	r3, #1
   8c9a6:	602b      	str	r3, [r5, #0]
   8c9a8:	e001      	b.n	8c9ae <__hexnan+0x11a>
   8c9aa:	2004      	movs	r0, #4
   8c9ac:	e000      	b.n	8c9b0 <__hexnan+0x11c>
   8c9ae:	2005      	movs	r0, #5
   8c9b0:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c9b4:	20071ce4 	.word	0x20071ce4

0008c9b8 <_setlocale_r>:
   8c9b8:	b510      	push	{r4, lr}
   8c9ba:	4614      	mov	r4, r2
   8c9bc:	b90a      	cbnz	r2, 8c9c2 <_setlocale_r+0xa>
   8c9be:	480c      	ldr	r0, [pc, #48]	; (8c9f0 <_setlocale_r+0x38>)
   8c9c0:	bd10      	pop	{r4, pc}
   8c9c2:	4610      	mov	r0, r2
   8c9c4:	490b      	ldr	r1, [pc, #44]	; (8c9f4 <_setlocale_r+0x3c>)
   8c9c6:	f000 fff1 	bl	8d9ac <strcmp>
   8c9ca:	2800      	cmp	r0, #0
   8c9cc:	d0f7      	beq.n	8c9be <_setlocale_r+0x6>
   8c9ce:	4620      	mov	r0, r4
   8c9d0:	4907      	ldr	r1, [pc, #28]	; (8c9f0 <_setlocale_r+0x38>)
   8c9d2:	f000 ffeb 	bl	8d9ac <strcmp>
   8c9d6:	2800      	cmp	r0, #0
   8c9d8:	d0f1      	beq.n	8c9be <_setlocale_r+0x6>
   8c9da:	4620      	mov	r0, r4
   8c9dc:	4906      	ldr	r1, [pc, #24]	; (8c9f8 <_setlocale_r+0x40>)
   8c9de:	f000 ffe5 	bl	8d9ac <strcmp>
   8c9e2:	4b03      	ldr	r3, [pc, #12]	; (8c9f0 <_setlocale_r+0x38>)
   8c9e4:	2800      	cmp	r0, #0
   8c9e6:	bf0c      	ite	eq
   8c9e8:	4618      	moveq	r0, r3
   8c9ea:	2000      	movne	r0, #0
   8c9ec:	bd10      	pop	{r4, pc}
   8c9ee:	bf00      	nop
   8c9f0:	0008f5b4 	.word	0x0008f5b4
   8c9f4:	0008f639 	.word	0x0008f639
   8c9f8:	0008f640 	.word	0x0008f640

0008c9fc <__locale_charset>:
   8c9fc:	4800      	ldr	r0, [pc, #0]	; (8ca00 <__locale_charset+0x4>)
   8c9fe:	4770      	bx	lr
   8ca00:	20070700 	.word	0x20070700

0008ca04 <__locale_mb_cur_max>:
   8ca04:	4b01      	ldr	r3, [pc, #4]	; (8ca0c <__locale_mb_cur_max+0x8>)
   8ca06:	6a18      	ldr	r0, [r3, #32]
   8ca08:	4770      	bx	lr
   8ca0a:	bf00      	nop
   8ca0c:	20070700 	.word	0x20070700

0008ca10 <__locale_msgcharset>:
   8ca10:	4800      	ldr	r0, [pc, #0]	; (8ca14 <__locale_msgcharset+0x4>)
   8ca12:	4770      	bx	lr
   8ca14:	20070724 	.word	0x20070724

0008ca18 <__locale_cjk_lang>:
   8ca18:	2000      	movs	r0, #0
   8ca1a:	4770      	bx	lr

0008ca1c <_localeconv_r>:
   8ca1c:	4800      	ldr	r0, [pc, #0]	; (8ca20 <_localeconv_r+0x4>)
   8ca1e:	4770      	bx	lr
   8ca20:	20070744 	.word	0x20070744

0008ca24 <setlocale>:
   8ca24:	460a      	mov	r2, r1
   8ca26:	4903      	ldr	r1, [pc, #12]	; (8ca34 <setlocale+0x10>)
   8ca28:	4603      	mov	r3, r0
   8ca2a:	6808      	ldr	r0, [r1, #0]
   8ca2c:	4619      	mov	r1, r3
   8ca2e:	f7ff bfc3 	b.w	8c9b8 <_setlocale_r>
   8ca32:	bf00      	nop
   8ca34:	200702a8 	.word	0x200702a8

0008ca38 <localeconv>:
   8ca38:	4800      	ldr	r0, [pc, #0]	; (8ca3c <localeconv+0x4>)
   8ca3a:	4770      	bx	lr
   8ca3c:	20070744 	.word	0x20070744

0008ca40 <_malloc_r>:
   8ca40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8ca44:	f101 040b 	add.w	r4, r1, #11
   8ca48:	2c16      	cmp	r4, #22
   8ca4a:	4606      	mov	r6, r0
   8ca4c:	d903      	bls.n	8ca56 <_malloc_r+0x16>
   8ca4e:	f034 0407 	bics.w	r4, r4, #7
   8ca52:	d501      	bpl.n	8ca58 <_malloc_r+0x18>
   8ca54:	e002      	b.n	8ca5c <_malloc_r+0x1c>
   8ca56:	2410      	movs	r4, #16
   8ca58:	428c      	cmp	r4, r1
   8ca5a:	d202      	bcs.n	8ca62 <_malloc_r+0x22>
   8ca5c:	250c      	movs	r5, #12
   8ca5e:	6035      	str	r5, [r6, #0]
   8ca60:	e1d9      	b.n	8ce16 <_malloc_r+0x3d6>
   8ca62:	4630      	mov	r0, r6
   8ca64:	f000 f9fc 	bl	8ce60 <__malloc_lock>
   8ca68:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   8ca6c:	d214      	bcs.n	8ca98 <_malloc_r+0x58>
   8ca6e:	4da0      	ldr	r5, [pc, #640]	; (8ccf0 <_malloc_r+0x2b0>)
   8ca70:	08e1      	lsrs	r1, r4, #3
   8ca72:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   8ca76:	68c5      	ldr	r5, [r0, #12]
   8ca78:	4285      	cmp	r5, r0
   8ca7a:	d105      	bne.n	8ca88 <_malloc_r+0x48>
   8ca7c:	f105 0308 	add.w	r3, r5, #8
   8ca80:	696d      	ldr	r5, [r5, #20]
   8ca82:	1c8a      	adds	r2, r1, #2
   8ca84:	429d      	cmp	r5, r3
   8ca86:	d044      	beq.n	8cb12 <_malloc_r+0xd2>
   8ca88:	68e8      	ldr	r0, [r5, #12]
   8ca8a:	68a9      	ldr	r1, [r5, #8]
   8ca8c:	686a      	ldr	r2, [r5, #4]
   8ca8e:	60c8      	str	r0, [r1, #12]
   8ca90:	f022 0303 	bic.w	r3, r2, #3
   8ca94:	6081      	str	r1, [r0, #8]
   8ca96:	e059      	b.n	8cb4c <_malloc_r+0x10c>
   8ca98:	0a62      	lsrs	r2, r4, #9
   8ca9a:	d101      	bne.n	8caa0 <_malloc_r+0x60>
   8ca9c:	08e2      	lsrs	r2, r4, #3
   8ca9e:	e01b      	b.n	8cad8 <_malloc_r+0x98>
   8caa0:	2a04      	cmp	r2, #4
   8caa2:	d802      	bhi.n	8caaa <_malloc_r+0x6a>
   8caa4:	09a2      	lsrs	r2, r4, #6
   8caa6:	3238      	adds	r2, #56	; 0x38
   8caa8:	e016      	b.n	8cad8 <_malloc_r+0x98>
   8caaa:	2a14      	cmp	r2, #20
   8caac:	d801      	bhi.n	8cab2 <_malloc_r+0x72>
   8caae:	325b      	adds	r2, #91	; 0x5b
   8cab0:	e012      	b.n	8cad8 <_malloc_r+0x98>
   8cab2:	2a54      	cmp	r2, #84	; 0x54
   8cab4:	d802      	bhi.n	8cabc <_malloc_r+0x7c>
   8cab6:	0b22      	lsrs	r2, r4, #12
   8cab8:	326e      	adds	r2, #110	; 0x6e
   8caba:	e00d      	b.n	8cad8 <_malloc_r+0x98>
   8cabc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8cac0:	d802      	bhi.n	8cac8 <_malloc_r+0x88>
   8cac2:	0be2      	lsrs	r2, r4, #15
   8cac4:	3277      	adds	r2, #119	; 0x77
   8cac6:	e007      	b.n	8cad8 <_malloc_r+0x98>
   8cac8:	f240 5354 	movw	r3, #1364	; 0x554
   8cacc:	429a      	cmp	r2, r3
   8cace:	d802      	bhi.n	8cad6 <_malloc_r+0x96>
   8cad0:	0ca2      	lsrs	r2, r4, #18
   8cad2:	327c      	adds	r2, #124	; 0x7c
   8cad4:	e000      	b.n	8cad8 <_malloc_r+0x98>
   8cad6:	227e      	movs	r2, #126	; 0x7e
   8cad8:	4885      	ldr	r0, [pc, #532]	; (8ccf0 <_malloc_r+0x2b0>)
   8cada:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
   8cade:	68dd      	ldr	r5, [r3, #12]
   8cae0:	429d      	cmp	r5, r3
   8cae2:	d015      	beq.n	8cb10 <_malloc_r+0xd0>
   8cae4:	6869      	ldr	r1, [r5, #4]
   8cae6:	f021 0103 	bic.w	r1, r1, #3
   8caea:	1b08      	subs	r0, r1, r4
   8caec:	280f      	cmp	r0, #15
   8caee:	dd01      	ble.n	8caf4 <_malloc_r+0xb4>
   8caf0:	3a01      	subs	r2, #1
   8caf2:	e00d      	b.n	8cb10 <_malloc_r+0xd0>
   8caf4:	2800      	cmp	r0, #0
   8caf6:	db09      	blt.n	8cb0c <_malloc_r+0xcc>
   8caf8:	68eb      	ldr	r3, [r5, #12]
   8cafa:	68aa      	ldr	r2, [r5, #8]
   8cafc:	60d3      	str	r3, [r2, #12]
   8cafe:	609a      	str	r2, [r3, #8]
   8cb00:	186b      	adds	r3, r5, r1
   8cb02:	685a      	ldr	r2, [r3, #4]
   8cb04:	f042 0001 	orr.w	r0, r2, #1
   8cb08:	6058      	str	r0, [r3, #4]
   8cb0a:	e190      	b.n	8ce2e <_malloc_r+0x3ee>
   8cb0c:	68ed      	ldr	r5, [r5, #12]
   8cb0e:	e7e7      	b.n	8cae0 <_malloc_r+0xa0>
   8cb10:	3201      	adds	r2, #1
   8cb12:	4977      	ldr	r1, [pc, #476]	; (8ccf0 <_malloc_r+0x2b0>)
   8cb14:	690d      	ldr	r5, [r1, #16]
   8cb16:	f101 0708 	add.w	r7, r1, #8
   8cb1a:	42bd      	cmp	r5, r7
   8cb1c:	d068      	beq.n	8cbf0 <_malloc_r+0x1b0>
   8cb1e:	6868      	ldr	r0, [r5, #4]
   8cb20:	f020 0303 	bic.w	r3, r0, #3
   8cb24:	1b18      	subs	r0, r3, r4
   8cb26:	280f      	cmp	r0, #15
   8cb28:	dd0c      	ble.n	8cb44 <_malloc_r+0x104>
   8cb2a:	192b      	adds	r3, r5, r4
   8cb2c:	614b      	str	r3, [r1, #20]
   8cb2e:	610b      	str	r3, [r1, #16]
   8cb30:	f044 0401 	orr.w	r4, r4, #1
   8cb34:	f040 0101 	orr.w	r1, r0, #1
   8cb38:	606c      	str	r4, [r5, #4]
   8cb3a:	60df      	str	r7, [r3, #12]
   8cb3c:	609f      	str	r7, [r3, #8]
   8cb3e:	6059      	str	r1, [r3, #4]
   8cb40:	5018      	str	r0, [r3, r0]
   8cb42:	e174      	b.n	8ce2e <_malloc_r+0x3ee>
   8cb44:	2800      	cmp	r0, #0
   8cb46:	614f      	str	r7, [r1, #20]
   8cb48:	610f      	str	r7, [r1, #16]
   8cb4a:	db01      	blt.n	8cb50 <_malloc_r+0x110>
   8cb4c:	18eb      	adds	r3, r5, r3
   8cb4e:	e7d8      	b.n	8cb02 <_malloc_r+0xc2>
   8cb50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8cb54:	d20f      	bcs.n	8cb76 <_malloc_r+0x136>
   8cb56:	08db      	lsrs	r3, r3, #3
   8cb58:	1098      	asrs	r0, r3, #2
   8cb5a:	2701      	movs	r7, #1
   8cb5c:	fa07 f700 	lsl.w	r7, r7, r0
   8cb60:	6848      	ldr	r0, [r1, #4]
   8cb62:	4307      	orrs	r7, r0
   8cb64:	604f      	str	r7, [r1, #4]
   8cb66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   8cb6a:	688b      	ldr	r3, [r1, #8]
   8cb6c:	60e9      	str	r1, [r5, #12]
   8cb6e:	60ab      	str	r3, [r5, #8]
   8cb70:	60dd      	str	r5, [r3, #12]
   8cb72:	608d      	str	r5, [r1, #8]
   8cb74:	e03c      	b.n	8cbf0 <_malloc_r+0x1b0>
   8cb76:	0a58      	lsrs	r0, r3, #9
   8cb78:	2804      	cmp	r0, #4
   8cb7a:	d802      	bhi.n	8cb82 <_malloc_r+0x142>
   8cb7c:	0998      	lsrs	r0, r3, #6
   8cb7e:	3038      	adds	r0, #56	; 0x38
   8cb80:	e016      	b.n	8cbb0 <_malloc_r+0x170>
   8cb82:	2814      	cmp	r0, #20
   8cb84:	d801      	bhi.n	8cb8a <_malloc_r+0x14a>
   8cb86:	305b      	adds	r0, #91	; 0x5b
   8cb88:	e012      	b.n	8cbb0 <_malloc_r+0x170>
   8cb8a:	2854      	cmp	r0, #84	; 0x54
   8cb8c:	d802      	bhi.n	8cb94 <_malloc_r+0x154>
   8cb8e:	0b18      	lsrs	r0, r3, #12
   8cb90:	306e      	adds	r0, #110	; 0x6e
   8cb92:	e00d      	b.n	8cbb0 <_malloc_r+0x170>
   8cb94:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   8cb98:	d802      	bhi.n	8cba0 <_malloc_r+0x160>
   8cb9a:	0bd8      	lsrs	r0, r3, #15
   8cb9c:	3077      	adds	r0, #119	; 0x77
   8cb9e:	e007      	b.n	8cbb0 <_malloc_r+0x170>
   8cba0:	f240 5754 	movw	r7, #1364	; 0x554
   8cba4:	42b8      	cmp	r0, r7
   8cba6:	d802      	bhi.n	8cbae <_malloc_r+0x16e>
   8cba8:	0c98      	lsrs	r0, r3, #18
   8cbaa:	307c      	adds	r0, #124	; 0x7c
   8cbac:	e000      	b.n	8cbb0 <_malloc_r+0x170>
   8cbae:	207e      	movs	r0, #126	; 0x7e
   8cbb0:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8ccf0 <_malloc_r+0x2b0>
   8cbb4:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
   8cbb8:	68b9      	ldr	r1, [r7, #8]
   8cbba:	42b9      	cmp	r1, r7
   8cbbc:	d10e      	bne.n	8cbdc <_malloc_r+0x19c>
   8cbbe:	1087      	asrs	r7, r0, #2
   8cbc0:	2301      	movs	r3, #1
   8cbc2:	fa03 f007 	lsl.w	r0, r3, r7
   8cbc6:	f8de 7004 	ldr.w	r7, [lr, #4]
   8cbca:	ea40 0307 	orr.w	r3, r0, r7
   8cbce:	f8ce 3004 	str.w	r3, [lr, #4]
   8cbd2:	4608      	mov	r0, r1
   8cbd4:	e008      	b.n	8cbe8 <_malloc_r+0x1a8>
   8cbd6:	6889      	ldr	r1, [r1, #8]
   8cbd8:	42b9      	cmp	r1, r7
   8cbda:	d004      	beq.n	8cbe6 <_malloc_r+0x1a6>
   8cbdc:	6848      	ldr	r0, [r1, #4]
   8cbde:	f020 0003 	bic.w	r0, r0, #3
   8cbe2:	4283      	cmp	r3, r0
   8cbe4:	d3f7      	bcc.n	8cbd6 <_malloc_r+0x196>
   8cbe6:	68c8      	ldr	r0, [r1, #12]
   8cbe8:	60e8      	str	r0, [r5, #12]
   8cbea:	60a9      	str	r1, [r5, #8]
   8cbec:	60cd      	str	r5, [r1, #12]
   8cbee:	6085      	str	r5, [r0, #8]
   8cbf0:	1095      	asrs	r5, r2, #2
   8cbf2:	2001      	movs	r0, #1
   8cbf4:	fa00 f305 	lsl.w	r3, r0, r5
   8cbf8:	4f3d      	ldr	r7, [pc, #244]	; (8ccf0 <_malloc_r+0x2b0>)
   8cbfa:	6879      	ldr	r1, [r7, #4]
   8cbfc:	428b      	cmp	r3, r1
   8cbfe:	d85d      	bhi.n	8ccbc <_malloc_r+0x27c>
   8cc00:	420b      	tst	r3, r1
   8cc02:	d105      	bne.n	8cc10 <_malloc_r+0x1d0>
   8cc04:	f022 0203 	bic.w	r2, r2, #3
   8cc08:	005b      	lsls	r3, r3, #1
   8cc0a:	3204      	adds	r2, #4
   8cc0c:	420b      	tst	r3, r1
   8cc0e:	d0fb      	beq.n	8cc08 <_malloc_r+0x1c8>
   8cc10:	4d37      	ldr	r5, [pc, #220]	; (8ccf0 <_malloc_r+0x2b0>)
   8cc12:	4610      	mov	r0, r2
   8cc14:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
   8cc18:	4677      	mov	r7, lr
   8cc1a:	68fd      	ldr	r5, [r7, #12]
   8cc1c:	42bd      	cmp	r5, r7
   8cc1e:	d02d      	beq.n	8cc7c <_malloc_r+0x23c>
   8cc20:	6869      	ldr	r1, [r5, #4]
   8cc22:	f021 0c03 	bic.w	ip, r1, #3
   8cc26:	ebc4 010c 	rsb	r1, r4, ip
   8cc2a:	290f      	cmp	r1, #15
   8cc2c:	dd13      	ble.n	8cc56 <_malloc_r+0x216>
   8cc2e:	192b      	adds	r3, r5, r4
   8cc30:	f044 0401 	orr.w	r4, r4, #1
   8cc34:	68ea      	ldr	r2, [r5, #12]
   8cc36:	606c      	str	r4, [r5, #4]
   8cc38:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8cc3c:	5059      	str	r1, [r3, r1]
   8cc3e:	60c2      	str	r2, [r0, #12]
   8cc40:	6090      	str	r0, [r2, #8]
   8cc42:	4a2b      	ldr	r2, [pc, #172]	; (8ccf0 <_malloc_r+0x2b0>)
   8cc44:	f041 0001 	orr.w	r0, r1, #1
   8cc48:	6153      	str	r3, [r2, #20]
   8cc4a:	6113      	str	r3, [r2, #16]
   8cc4c:	3208      	adds	r2, #8
   8cc4e:	60da      	str	r2, [r3, #12]
   8cc50:	609a      	str	r2, [r3, #8]
   8cc52:	6058      	str	r0, [r3, #4]
   8cc54:	e00c      	b.n	8cc70 <_malloc_r+0x230>
   8cc56:	2900      	cmp	r1, #0
   8cc58:	db0e      	blt.n	8cc78 <_malloc_r+0x238>
   8cc5a:	eb05 000c 	add.w	r0, r5, ip
   8cc5e:	6842      	ldr	r2, [r0, #4]
   8cc60:	68e9      	ldr	r1, [r5, #12]
   8cc62:	f042 0301 	orr.w	r3, r2, #1
   8cc66:	6043      	str	r3, [r0, #4]
   8cc68:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8cc6c:	60c1      	str	r1, [r0, #12]
   8cc6e:	6088      	str	r0, [r1, #8]
   8cc70:	4630      	mov	r0, r6
   8cc72:	f000 f8f6 	bl	8ce62 <__malloc_unlock>
   8cc76:	e0de      	b.n	8ce36 <_malloc_r+0x3f6>
   8cc78:	68ed      	ldr	r5, [r5, #12]
   8cc7a:	e7cf      	b.n	8cc1c <_malloc_r+0x1dc>
   8cc7c:	3001      	adds	r0, #1
   8cc7e:	0781      	lsls	r1, r0, #30
   8cc80:	f105 0708 	add.w	r7, r5, #8
   8cc84:	d1c9      	bne.n	8cc1a <_malloc_r+0x1da>
   8cc86:	4671      	mov	r1, lr
   8cc88:	0795      	lsls	r5, r2, #30
   8cc8a:	d105      	bne.n	8cc98 <_malloc_r+0x258>
   8cc8c:	4a18      	ldr	r2, [pc, #96]	; (8ccf0 <_malloc_r+0x2b0>)
   8cc8e:	6855      	ldr	r5, [r2, #4]
   8cc90:	ea25 0503 	bic.w	r5, r5, r3
   8cc94:	6055      	str	r5, [r2, #4]
   8cc96:	e005      	b.n	8cca4 <_malloc_r+0x264>
   8cc98:	f1a1 0708 	sub.w	r7, r1, #8
   8cc9c:	6809      	ldr	r1, [r1, #0]
   8cc9e:	3a01      	subs	r2, #1
   8cca0:	42b9      	cmp	r1, r7
   8cca2:	d0f1      	beq.n	8cc88 <_malloc_r+0x248>
   8cca4:	4f12      	ldr	r7, [pc, #72]	; (8ccf0 <_malloc_r+0x2b0>)
   8cca6:	005b      	lsls	r3, r3, #1
   8cca8:	687f      	ldr	r7, [r7, #4]
   8ccaa:	42bb      	cmp	r3, r7
   8ccac:	d806      	bhi.n	8ccbc <_malloc_r+0x27c>
   8ccae:	b12b      	cbz	r3, 8ccbc <_malloc_r+0x27c>
   8ccb0:	4602      	mov	r2, r0
   8ccb2:	423b      	tst	r3, r7
   8ccb4:	d1ac      	bne.n	8cc10 <_malloc_r+0x1d0>
   8ccb6:	3204      	adds	r2, #4
   8ccb8:	005b      	lsls	r3, r3, #1
   8ccba:	e7fa      	b.n	8ccb2 <_malloc_r+0x272>
   8ccbc:	4b0c      	ldr	r3, [pc, #48]	; (8ccf0 <_malloc_r+0x2b0>)
   8ccbe:	689f      	ldr	r7, [r3, #8]
   8ccc0:	4619      	mov	r1, r3
   8ccc2:	6878      	ldr	r0, [r7, #4]
   8ccc4:	f020 0903 	bic.w	r9, r0, #3
   8ccc8:	45a1      	cmp	r9, r4
   8ccca:	d304      	bcc.n	8ccd6 <_malloc_r+0x296>
   8cccc:	ebc4 0009 	rsb	r0, r4, r9
   8ccd0:	280f      	cmp	r0, #15
   8ccd2:	f300 80a2 	bgt.w	8ce1a <_malloc_r+0x3da>
   8ccd6:	4a07      	ldr	r2, [pc, #28]	; (8ccf4 <_malloc_r+0x2b4>)
   8ccd8:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
   8ccdc:	6815      	ldr	r5, [r2, #0]
   8ccde:	3301      	adds	r3, #1
   8cce0:	eb07 0a09 	add.w	sl, r7, r9
   8cce4:	eb04 0805 	add.w	r8, r4, r5
   8cce8:	d106      	bne.n	8ccf8 <_malloc_r+0x2b8>
   8ccea:	f108 0810 	add.w	r8, r8, #16
   8ccee:	e00b      	b.n	8cd08 <_malloc_r+0x2c8>
   8ccf0:	2007077c 	.word	0x2007077c
   8ccf4:	200716cc 	.word	0x200716cc
   8ccf8:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   8ccfc:	f100 010f 	add.w	r1, r0, #15
   8cd00:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   8cd04:	f022 080f 	bic.w	r8, r2, #15
   8cd08:	4630      	mov	r0, r6
   8cd0a:	4641      	mov	r1, r8
   8cd0c:	f000 fe3a 	bl	8d984 <_sbrk_r>
   8cd10:	1c42      	adds	r2, r0, #1
   8cd12:	4605      	mov	r5, r0
   8cd14:	d071      	beq.n	8cdfa <_malloc_r+0x3ba>
   8cd16:	4550      	cmp	r0, sl
   8cd18:	d202      	bcs.n	8cd20 <_malloc_r+0x2e0>
   8cd1a:	4b48      	ldr	r3, [pc, #288]	; (8ce3c <_malloc_r+0x3fc>)
   8cd1c:	429f      	cmp	r7, r3
   8cd1e:	d16c      	bne.n	8cdfa <_malloc_r+0x3ba>
   8cd20:	4847      	ldr	r0, [pc, #284]	; (8ce40 <_malloc_r+0x400>)
   8cd22:	4555      	cmp	r5, sl
   8cd24:	6841      	ldr	r1, [r0, #4]
   8cd26:	4a45      	ldr	r2, [pc, #276]	; (8ce3c <_malloc_r+0x3fc>)
   8cd28:	eb08 0301 	add.w	r3, r8, r1
   8cd2c:	6043      	str	r3, [r0, #4]
   8cd2e:	d107      	bne.n	8cd40 <_malloc_r+0x300>
   8cd30:	0529      	lsls	r1, r5, #20
   8cd32:	d105      	bne.n	8cd40 <_malloc_r+0x300>
   8cd34:	6895      	ldr	r5, [r2, #8]
   8cd36:	44c8      	add	r8, r9
   8cd38:	f048 0001 	orr.w	r0, r8, #1
   8cd3c:	6068      	str	r0, [r5, #4]
   8cd3e:	e051      	b.n	8cde4 <_malloc_r+0x3a4>
   8cd40:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   8cd44:	1c42      	adds	r2, r0, #1
   8cd46:	d103      	bne.n	8cd50 <_malloc_r+0x310>
   8cd48:	4a3c      	ldr	r2, [pc, #240]	; (8ce3c <_malloc_r+0x3fc>)
   8cd4a:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
   8cd4e:	e005      	b.n	8cd5c <_malloc_r+0x31c>
   8cd50:	ebca 0a05 	rsb	sl, sl, r5
   8cd54:	eb03 010a 	add.w	r1, r3, sl
   8cd58:	4b39      	ldr	r3, [pc, #228]	; (8ce40 <_malloc_r+0x400>)
   8cd5a:	6059      	str	r1, [r3, #4]
   8cd5c:	f015 0007 	ands.w	r0, r5, #7
   8cd60:	bf1c      	itt	ne
   8cd62:	f1c0 0008 	rsbne	r0, r0, #8
   8cd66:	182d      	addne	r5, r5, r0
   8cd68:	eb05 0c08 	add.w	ip, r5, r8
   8cd6c:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   8cd70:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
   8cd74:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
   8cd78:	4641      	mov	r1, r8
   8cd7a:	4630      	mov	r0, r6
   8cd7c:	f000 fe02 	bl	8d984 <_sbrk_r>
   8cd80:	4a2f      	ldr	r2, [pc, #188]	; (8ce40 <_malloc_r+0x400>)
   8cd82:	1c43      	adds	r3, r0, #1
   8cd84:	6853      	ldr	r3, [r2, #4]
   8cd86:	bf08      	it	eq
   8cd88:	f04f 0800 	moveq.w	r8, #0
   8cd8c:	eb08 0103 	add.w	r1, r8, r3
   8cd90:	bf08      	it	eq
   8cd92:	4628      	moveq	r0, r5
   8cd94:	6051      	str	r1, [r2, #4]
   8cd96:	1b40      	subs	r0, r0, r5
   8cd98:	4a28      	ldr	r2, [pc, #160]	; (8ce3c <_malloc_r+0x3fc>)
   8cd9a:	eb00 0308 	add.w	r3, r0, r8
   8cd9e:	f043 0101 	orr.w	r1, r3, #1
   8cda2:	4297      	cmp	r7, r2
   8cda4:	6095      	str	r5, [r2, #8]
   8cda6:	6069      	str	r1, [r5, #4]
   8cda8:	d01c      	beq.n	8cde4 <_malloc_r+0x3a4>
   8cdaa:	f1b9 0f0f 	cmp.w	r9, #15
   8cdae:	d802      	bhi.n	8cdb6 <_malloc_r+0x376>
   8cdb0:	2201      	movs	r2, #1
   8cdb2:	606a      	str	r2, [r5, #4]
   8cdb4:	e021      	b.n	8cdfa <_malloc_r+0x3ba>
   8cdb6:	687d      	ldr	r5, [r7, #4]
   8cdb8:	f1a9 090c 	sub.w	r9, r9, #12
   8cdbc:	f029 0907 	bic.w	r9, r9, #7
   8cdc0:	f005 0201 	and.w	r2, r5, #1
   8cdc4:	2105      	movs	r1, #5
   8cdc6:	eb07 0309 	add.w	r3, r7, r9
   8cdca:	ea49 0002 	orr.w	r0, r9, r2
   8cdce:	f1b9 0f0f 	cmp.w	r9, #15
   8cdd2:	6078      	str	r0, [r7, #4]
   8cdd4:	6059      	str	r1, [r3, #4]
   8cdd6:	6099      	str	r1, [r3, #8]
   8cdd8:	d904      	bls.n	8cde4 <_malloc_r+0x3a4>
   8cdda:	4630      	mov	r0, r6
   8cddc:	f107 0108 	add.w	r1, r7, #8
   8cde0:	f7ff f9f8 	bl	8c1d4 <_free_r>
   8cde4:	4a16      	ldr	r2, [pc, #88]	; (8ce40 <_malloc_r+0x400>)
   8cde6:	6853      	ldr	r3, [r2, #4]
   8cde8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   8cdea:	6b15      	ldr	r5, [r2, #48]	; 0x30
   8cdec:	428b      	cmp	r3, r1
   8cdee:	bf88      	it	hi
   8cdf0:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   8cdf2:	42ab      	cmp	r3, r5
   8cdf4:	bf84      	itt	hi
   8cdf6:	4d12      	ldrhi	r5, [pc, #72]	; (8ce40 <_malloc_r+0x400>)
   8cdf8:	632b      	strhi	r3, [r5, #48]	; 0x30
   8cdfa:	4810      	ldr	r0, [pc, #64]	; (8ce3c <_malloc_r+0x3fc>)
   8cdfc:	6882      	ldr	r2, [r0, #8]
   8cdfe:	6853      	ldr	r3, [r2, #4]
   8ce00:	f023 0103 	bic.w	r1, r3, #3
   8ce04:	42a1      	cmp	r1, r4
   8ce06:	ebc4 0001 	rsb	r0, r4, r1
   8ce0a:	d301      	bcc.n	8ce10 <_malloc_r+0x3d0>
   8ce0c:	280f      	cmp	r0, #15
   8ce0e:	dc04      	bgt.n	8ce1a <_malloc_r+0x3da>
   8ce10:	4630      	mov	r0, r6
   8ce12:	f000 f826 	bl	8ce62 <__malloc_unlock>
   8ce16:	2500      	movs	r5, #0
   8ce18:	e00d      	b.n	8ce36 <_malloc_r+0x3f6>
   8ce1a:	4a08      	ldr	r2, [pc, #32]	; (8ce3c <_malloc_r+0x3fc>)
   8ce1c:	f044 0301 	orr.w	r3, r4, #1
   8ce20:	6895      	ldr	r5, [r2, #8]
   8ce22:	f040 0101 	orr.w	r1, r0, #1
   8ce26:	192c      	adds	r4, r5, r4
   8ce28:	606b      	str	r3, [r5, #4]
   8ce2a:	6094      	str	r4, [r2, #8]
   8ce2c:	6061      	str	r1, [r4, #4]
   8ce2e:	4630      	mov	r0, r6
   8ce30:	f000 f817 	bl	8ce62 <__malloc_unlock>
   8ce34:	3508      	adds	r5, #8
   8ce36:	4628      	mov	r0, r5
   8ce38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8ce3c:	2007077c 	.word	0x2007077c
   8ce40:	200716cc 	.word	0x200716cc

0008ce44 <memchr>:
   8ce44:	b510      	push	{r4, lr}
   8ce46:	b2c9      	uxtb	r1, r1
   8ce48:	4603      	mov	r3, r0
   8ce4a:	1882      	adds	r2, r0, r2
   8ce4c:	4293      	cmp	r3, r2
   8ce4e:	4618      	mov	r0, r3
   8ce50:	d004      	beq.n	8ce5c <memchr+0x18>
   8ce52:	7804      	ldrb	r4, [r0, #0]
   8ce54:	3301      	adds	r3, #1
   8ce56:	428c      	cmp	r4, r1
   8ce58:	d1f8      	bne.n	8ce4c <memchr+0x8>
   8ce5a:	e000      	b.n	8ce5e <memchr+0x1a>
   8ce5c:	2000      	movs	r0, #0
   8ce5e:	bd10      	pop	{r4, pc}

0008ce60 <__malloc_lock>:
   8ce60:	4770      	bx	lr

0008ce62 <__malloc_unlock>:
   8ce62:	4770      	bx	lr

0008ce64 <_Balloc>:
   8ce64:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8ce66:	b570      	push	{r4, r5, r6, lr}
   8ce68:	4605      	mov	r5, r0
   8ce6a:	460c      	mov	r4, r1
   8ce6c:	b13b      	cbz	r3, 8ce7e <_Balloc+0x1a>
   8ce6e:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   8ce70:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
   8ce74:	b160      	cbz	r0, 8ce90 <_Balloc+0x2c>
   8ce76:	6803      	ldr	r3, [r0, #0]
   8ce78:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
   8ce7c:	e014      	b.n	8cea8 <_Balloc+0x44>
   8ce7e:	2104      	movs	r1, #4
   8ce80:	2221      	movs	r2, #33	; 0x21
   8ce82:	f001 fa19 	bl	8e2b8 <_calloc_r>
   8ce86:	64e8      	str	r0, [r5, #76]	; 0x4c
   8ce88:	2800      	cmp	r0, #0
   8ce8a:	d1f0      	bne.n	8ce6e <_Balloc+0xa>
   8ce8c:	2000      	movs	r0, #0
   8ce8e:	bd70      	pop	{r4, r5, r6, pc}
   8ce90:	2101      	movs	r1, #1
   8ce92:	fa01 f604 	lsl.w	r6, r1, r4
   8ce96:	1d72      	adds	r2, r6, #5
   8ce98:	4628      	mov	r0, r5
   8ce9a:	0092      	lsls	r2, r2, #2
   8ce9c:	f001 fa0c 	bl	8e2b8 <_calloc_r>
   8cea0:	2800      	cmp	r0, #0
   8cea2:	d0f3      	beq.n	8ce8c <_Balloc+0x28>
   8cea4:	6044      	str	r4, [r0, #4]
   8cea6:	6086      	str	r6, [r0, #8]
   8cea8:	2100      	movs	r1, #0
   8ceaa:	6101      	str	r1, [r0, #16]
   8ceac:	60c1      	str	r1, [r0, #12]
   8ceae:	bd70      	pop	{r4, r5, r6, pc}

0008ceb0 <_Bfree>:
   8ceb0:	b131      	cbz	r1, 8cec0 <_Bfree+0x10>
   8ceb2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8ceb4:	684a      	ldr	r2, [r1, #4]
   8ceb6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8ceba:	6008      	str	r0, [r1, #0]
   8cebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8cec0:	4770      	bx	lr

0008cec2 <__multadd>:
   8cec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8cec6:	460c      	mov	r4, r1
   8cec8:	461e      	mov	r6, r3
   8ceca:	690d      	ldr	r5, [r1, #16]
   8cecc:	4607      	mov	r7, r0
   8cece:	f101 0114 	add.w	r1, r1, #20
   8ced2:	2300      	movs	r3, #0
   8ced4:	6808      	ldr	r0, [r1, #0]
   8ced6:	3301      	adds	r3, #1
   8ced8:	fa1f fc80 	uxth.w	ip, r0
   8cedc:	fb02 6c0c 	mla	ip, r2, ip, r6
   8cee0:	0c06      	lsrs	r6, r0, #16
   8cee2:	4356      	muls	r6, r2
   8cee4:	eb06 401c 	add.w	r0, r6, ip, lsr #16
   8cee8:	fa1f fc8c 	uxth.w	ip, ip
   8ceec:	0c06      	lsrs	r6, r0, #16
   8ceee:	eb0c 4000 	add.w	r0, ip, r0, lsl #16
   8cef2:	42ab      	cmp	r3, r5
   8cef4:	f841 0b04 	str.w	r0, [r1], #4
   8cef8:	dbec      	blt.n	8ced4 <__multadd+0x12>
   8cefa:	b1de      	cbz	r6, 8cf34 <__multadd+0x72>
   8cefc:	68a2      	ldr	r2, [r4, #8]
   8cefe:	4295      	cmp	r5, r2
   8cf00:	db13      	blt.n	8cf2a <__multadd+0x68>
   8cf02:	6861      	ldr	r1, [r4, #4]
   8cf04:	4638      	mov	r0, r7
   8cf06:	3101      	adds	r1, #1
   8cf08:	f7ff ffac 	bl	8ce64 <_Balloc>
   8cf0c:	4680      	mov	r8, r0
   8cf0e:	6920      	ldr	r0, [r4, #16]
   8cf10:	f104 010c 	add.w	r1, r4, #12
   8cf14:	1c83      	adds	r3, r0, #2
   8cf16:	009a      	lsls	r2, r3, #2
   8cf18:	f108 000c 	add.w	r0, r8, #12
   8cf1c:	f7fd fdc8 	bl	8aab0 <memcpy>
   8cf20:	4621      	mov	r1, r4
   8cf22:	4638      	mov	r0, r7
   8cf24:	f7ff ffc4 	bl	8ceb0 <_Bfree>
   8cf28:	4644      	mov	r4, r8
   8cf2a:	eb04 0285 	add.w	r2, r4, r5, lsl #2
   8cf2e:	3501      	adds	r5, #1
   8cf30:	6156      	str	r6, [r2, #20]
   8cf32:	6125      	str	r5, [r4, #16]
   8cf34:	4620      	mov	r0, r4
   8cf36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0008cf3a <__s2b>:
   8cf3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8cf3e:	4614      	mov	r4, r2
   8cf40:	4698      	mov	r8, r3
   8cf42:	f103 0208 	add.w	r2, r3, #8
   8cf46:	2309      	movs	r3, #9
   8cf48:	4605      	mov	r5, r0
   8cf4a:	460e      	mov	r6, r1
   8cf4c:	fb92 f0f3 	sdiv	r0, r2, r3
   8cf50:	2100      	movs	r1, #0
   8cf52:	2301      	movs	r3, #1
   8cf54:	4298      	cmp	r0, r3
   8cf56:	dd02      	ble.n	8cf5e <__s2b+0x24>
   8cf58:	005b      	lsls	r3, r3, #1
   8cf5a:	3101      	adds	r1, #1
   8cf5c:	e7fa      	b.n	8cf54 <__s2b+0x1a>
   8cf5e:	4628      	mov	r0, r5
   8cf60:	f7ff ff80 	bl	8ce64 <_Balloc>
   8cf64:	4601      	mov	r1, r0
   8cf66:	9808      	ldr	r0, [sp, #32]
   8cf68:	2701      	movs	r7, #1
   8cf6a:	2c09      	cmp	r4, #9
   8cf6c:	6148      	str	r0, [r1, #20]
   8cf6e:	610f      	str	r7, [r1, #16]
   8cf70:	dd12      	ble.n	8cf98 <__s2b+0x5e>
   8cf72:	f106 0909 	add.w	r9, r6, #9
   8cf76:	464f      	mov	r7, r9
   8cf78:	1936      	adds	r6, r6, r4
   8cf7a:	f817 3b01 	ldrb.w	r3, [r7], #1
   8cf7e:	220a      	movs	r2, #10
   8cf80:	3b30      	subs	r3, #48	; 0x30
   8cf82:	4628      	mov	r0, r5
   8cf84:	f7ff ff9d 	bl	8cec2 <__multadd>
   8cf88:	42b7      	cmp	r7, r6
   8cf8a:	4601      	mov	r1, r0
   8cf8c:	d1f5      	bne.n	8cf7a <__s2b+0x40>
   8cf8e:	eb09 0704 	add.w	r7, r9, r4
   8cf92:	3f08      	subs	r7, #8
   8cf94:	4626      	mov	r6, r4
   8cf96:	e002      	b.n	8cf9e <__s2b+0x64>
   8cf98:	f106 070a 	add.w	r7, r6, #10
   8cf9c:	2609      	movs	r6, #9
   8cf9e:	4634      	mov	r4, r6
   8cfa0:	4544      	cmp	r4, r8
   8cfa2:	da09      	bge.n	8cfb8 <__s2b+0x7e>
   8cfa4:	1bba      	subs	r2, r7, r6
   8cfa6:	5d13      	ldrb	r3, [r2, r4]
   8cfa8:	4628      	mov	r0, r5
   8cfaa:	220a      	movs	r2, #10
   8cfac:	3b30      	subs	r3, #48	; 0x30
   8cfae:	f7ff ff88 	bl	8cec2 <__multadd>
   8cfb2:	3401      	adds	r4, #1
   8cfb4:	4601      	mov	r1, r0
   8cfb6:	e7f3      	b.n	8cfa0 <__s2b+0x66>
   8cfb8:	4608      	mov	r0, r1
   8cfba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008cfbe <__hi0bits>:
   8cfbe:	0c02      	lsrs	r2, r0, #16
   8cfc0:	4603      	mov	r3, r0
   8cfc2:	0410      	lsls	r0, r2, #16
   8cfc4:	b910      	cbnz	r0, 8cfcc <__hi0bits+0xe>
   8cfc6:	041b      	lsls	r3, r3, #16
   8cfc8:	2010      	movs	r0, #16
   8cfca:	e000      	b.n	8cfce <__hi0bits+0x10>
   8cfcc:	2000      	movs	r0, #0
   8cfce:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8cfd2:	d101      	bne.n	8cfd8 <__hi0bits+0x1a>
   8cfd4:	3008      	adds	r0, #8
   8cfd6:	021b      	lsls	r3, r3, #8
   8cfd8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8cfdc:	d101      	bne.n	8cfe2 <__hi0bits+0x24>
   8cfde:	3004      	adds	r0, #4
   8cfe0:	011b      	lsls	r3, r3, #4
   8cfe2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8cfe6:	d101      	bne.n	8cfec <__hi0bits+0x2e>
   8cfe8:	3002      	adds	r0, #2
   8cfea:	009b      	lsls	r3, r3, #2
   8cfec:	2b00      	cmp	r3, #0
   8cfee:	db04      	blt.n	8cffa <__hi0bits+0x3c>
   8cff0:	005b      	lsls	r3, r3, #1
   8cff2:	d501      	bpl.n	8cff8 <__hi0bits+0x3a>
   8cff4:	3001      	adds	r0, #1
   8cff6:	4770      	bx	lr
   8cff8:	2020      	movs	r0, #32
   8cffa:	4770      	bx	lr

0008cffc <__lo0bits>:
   8cffc:	6803      	ldr	r3, [r0, #0]
   8cffe:	4602      	mov	r2, r0
   8d000:	f013 0007 	ands.w	r0, r3, #7
   8d004:	d00b      	beq.n	8d01e <__lo0bits+0x22>
   8d006:	07d9      	lsls	r1, r3, #31
   8d008:	d421      	bmi.n	8d04e <__lo0bits+0x52>
   8d00a:	0798      	lsls	r0, r3, #30
   8d00c:	d503      	bpl.n	8d016 <__lo0bits+0x1a>
   8d00e:	0859      	lsrs	r1, r3, #1
   8d010:	6011      	str	r1, [r2, #0]
   8d012:	2001      	movs	r0, #1
   8d014:	4770      	bx	lr
   8d016:	0898      	lsrs	r0, r3, #2
   8d018:	6010      	str	r0, [r2, #0]
   8d01a:	2002      	movs	r0, #2
   8d01c:	4770      	bx	lr
   8d01e:	b299      	uxth	r1, r3
   8d020:	b909      	cbnz	r1, 8d026 <__lo0bits+0x2a>
   8d022:	0c1b      	lsrs	r3, r3, #16
   8d024:	2010      	movs	r0, #16
   8d026:	f013 0fff 	tst.w	r3, #255	; 0xff
   8d02a:	d101      	bne.n	8d030 <__lo0bits+0x34>
   8d02c:	3008      	adds	r0, #8
   8d02e:	0a1b      	lsrs	r3, r3, #8
   8d030:	0719      	lsls	r1, r3, #28
   8d032:	d101      	bne.n	8d038 <__lo0bits+0x3c>
   8d034:	3004      	adds	r0, #4
   8d036:	091b      	lsrs	r3, r3, #4
   8d038:	0799      	lsls	r1, r3, #30
   8d03a:	d101      	bne.n	8d040 <__lo0bits+0x44>
   8d03c:	3002      	adds	r0, #2
   8d03e:	089b      	lsrs	r3, r3, #2
   8d040:	07d9      	lsls	r1, r3, #31
   8d042:	d402      	bmi.n	8d04a <__lo0bits+0x4e>
   8d044:	085b      	lsrs	r3, r3, #1
   8d046:	d004      	beq.n	8d052 <__lo0bits+0x56>
   8d048:	3001      	adds	r0, #1
   8d04a:	6013      	str	r3, [r2, #0]
   8d04c:	4770      	bx	lr
   8d04e:	2000      	movs	r0, #0
   8d050:	4770      	bx	lr
   8d052:	2020      	movs	r0, #32
   8d054:	4770      	bx	lr

0008d056 <__i2b>:
   8d056:	b510      	push	{r4, lr}
   8d058:	460c      	mov	r4, r1
   8d05a:	2101      	movs	r1, #1
   8d05c:	f7ff ff02 	bl	8ce64 <_Balloc>
   8d060:	2201      	movs	r2, #1
   8d062:	6144      	str	r4, [r0, #20]
   8d064:	6102      	str	r2, [r0, #16]
   8d066:	bd10      	pop	{r4, pc}

0008d068 <__multiply>:
   8d068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8d06c:	4616      	mov	r6, r2
   8d06e:	6933      	ldr	r3, [r6, #16]
   8d070:	690a      	ldr	r2, [r1, #16]
   8d072:	b085      	sub	sp, #20
   8d074:	429a      	cmp	r2, r3
   8d076:	460d      	mov	r5, r1
   8d078:	da01      	bge.n	8d07e <__multiply+0x16>
   8d07a:	4635      	mov	r5, r6
   8d07c:	460e      	mov	r6, r1
   8d07e:	f8d5 8010 	ldr.w	r8, [r5, #16]
   8d082:	6937      	ldr	r7, [r6, #16]
   8d084:	68aa      	ldr	r2, [r5, #8]
   8d086:	6869      	ldr	r1, [r5, #4]
   8d088:	eb08 0407 	add.w	r4, r8, r7
   8d08c:	4294      	cmp	r4, r2
   8d08e:	bfc8      	it	gt
   8d090:	3101      	addgt	r1, #1
   8d092:	f7ff fee7 	bl	8ce64 <_Balloc>
   8d096:	eb00 0184 	add.w	r1, r0, r4, lsl #2
   8d09a:	3114      	adds	r1, #20
   8d09c:	f100 0314 	add.w	r3, r0, #20
   8d0a0:	9101      	str	r1, [sp, #4]
   8d0a2:	9a01      	ldr	r2, [sp, #4]
   8d0a4:	4293      	cmp	r3, r2
   8d0a6:	d203      	bcs.n	8d0b0 <__multiply+0x48>
   8d0a8:	2200      	movs	r2, #0
   8d0aa:	f843 2b04 	str.w	r2, [r3], #4
   8d0ae:	e7f8      	b.n	8d0a2 <__multiply+0x3a>
   8d0b0:	eb06 0787 	add.w	r7, r6, r7, lsl #2
   8d0b4:	f105 0314 	add.w	r3, r5, #20
   8d0b8:	eb05 0c88 	add.w	ip, r5, r8, lsl #2
   8d0bc:	3714      	adds	r7, #20
   8d0be:	9302      	str	r3, [sp, #8]
   8d0c0:	f10c 0e14 	add.w	lr, ip, #20
   8d0c4:	9703      	str	r7, [sp, #12]
   8d0c6:	f100 0318 	add.w	r3, r0, #24
   8d0ca:	f106 0214 	add.w	r2, r6, #20
   8d0ce:	9d03      	ldr	r5, [sp, #12]
   8d0d0:	4611      	mov	r1, r2
   8d0d2:	42aa      	cmp	r2, r5
   8d0d4:	d24c      	bcs.n	8d170 <__multiply+0x108>
   8d0d6:	8809      	ldrh	r1, [r1, #0]
   8d0d8:	3204      	adds	r2, #4
   8d0da:	b309      	cbz	r1, 8d120 <__multiply+0xb8>
   8d0dc:	9f02      	ldr	r7, [sp, #8]
   8d0de:	1f1d      	subs	r5, r3, #4
   8d0e0:	2600      	movs	r6, #0
   8d0e2:	f857 9b04 	ldr.w	r9, [r7], #4
   8d0e6:	f8d5 8000 	ldr.w	r8, [r5]
   8d0ea:	fa1f fb89 	uxth.w	fp, r9
   8d0ee:	fa1f fa88 	uxth.w	sl, r8
   8d0f2:	fb01 ac0b 	mla	ip, r1, fp, sl
   8d0f6:	ea4f 4919 	mov.w	r9, r9, lsr #16
   8d0fa:	eb0c 0a06 	add.w	sl, ip, r6
   8d0fe:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8d102:	fb01 6809 	mla	r8, r1, r9, r6
   8d106:	fa1f fc8a 	uxth.w	ip, sl
   8d10a:	eb08 481a 	add.w	r8, r8, sl, lsr #16
   8d10e:	ea4c 4a08 	orr.w	sl, ip, r8, lsl #16
   8d112:	45be      	cmp	lr, r7
   8d114:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8d118:	f845 ab04 	str.w	sl, [r5], #4
   8d11c:	d8e1      	bhi.n	8d0e2 <__multiply+0x7a>
   8d11e:	602e      	str	r6, [r5, #0]
   8d120:	f832 1c02 	ldrh.w	r1, [r2, #-2]
   8d124:	b311      	cbz	r1, 8d16c <__multiply+0x104>
   8d126:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8d12a:	9f02      	ldr	r7, [sp, #8]
   8d12c:	461d      	mov	r5, r3
   8d12e:	f04f 0900 	mov.w	r9, #0
   8d132:	f835 ac02 	ldrh.w	sl, [r5, #-2]
   8d136:	f8b7 b000 	ldrh.w	fp, [r7]
   8d13a:	b2b6      	uxth	r6, r6
   8d13c:	fb01 ac0b 	mla	ip, r1, fp, sl
   8d140:	44e1      	add	r9, ip
   8d142:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
   8d146:	f845 6c04 	str.w	r6, [r5, #-4]
   8d14a:	46a8      	mov	r8, r5
   8d14c:	f857 6b04 	ldr.w	r6, [r7], #4
   8d150:	f8b8 a000 	ldrh.w	sl, [r8]
   8d154:	0c36      	lsrs	r6, r6, #16
   8d156:	fb01 a606 	mla	r6, r1, r6, sl
   8d15a:	3504      	adds	r5, #4
   8d15c:	eb06 4619 	add.w	r6, r6, r9, lsr #16
   8d160:	4577      	cmp	r7, lr
   8d162:	ea4f 4916 	mov.w	r9, r6, lsr #16
   8d166:	d3e4      	bcc.n	8d132 <__multiply+0xca>
   8d168:	f8c8 6000 	str.w	r6, [r8]
   8d16c:	3304      	adds	r3, #4
   8d16e:	e7ae      	b.n	8d0ce <__multiply+0x66>
   8d170:	9b01      	ldr	r3, [sp, #4]
   8d172:	2c00      	cmp	r4, #0
   8d174:	dc03      	bgt.n	8d17e <__multiply+0x116>
   8d176:	6104      	str	r4, [r0, #16]
   8d178:	b005      	add	sp, #20
   8d17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8d17e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   8d182:	2a00      	cmp	r2, #0
   8d184:	d1f7      	bne.n	8d176 <__multiply+0x10e>
   8d186:	3c01      	subs	r4, #1
   8d188:	e7f3      	b.n	8d172 <__multiply+0x10a>

0008d18a <__pow5mult>:
   8d18a:	f012 0303 	ands.w	r3, r2, #3
   8d18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8d192:	4605      	mov	r5, r0
   8d194:	460e      	mov	r6, r1
   8d196:	4617      	mov	r7, r2
   8d198:	d007      	beq.n	8d1aa <__pow5mult+0x20>
   8d19a:	4a1c      	ldr	r2, [pc, #112]	; (8d20c <__pow5mult+0x82>)
   8d19c:	1e5e      	subs	r6, r3, #1
   8d19e:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
   8d1a2:	2300      	movs	r3, #0
   8d1a4:	f7ff fe8d 	bl	8cec2 <__multadd>
   8d1a8:	4606      	mov	r6, r0
   8d1aa:	10bf      	asrs	r7, r7, #2
   8d1ac:	d02b      	beq.n	8d206 <__pow5mult+0x7c>
   8d1ae:	6cac      	ldr	r4, [r5, #72]	; 0x48
   8d1b0:	b994      	cbnz	r4, 8d1d8 <__pow5mult+0x4e>
   8d1b2:	4628      	mov	r0, r5
   8d1b4:	f240 2171 	movw	r1, #625	; 0x271
   8d1b8:	f7ff ff4d 	bl	8d056 <__i2b>
   8d1bc:	4604      	mov	r4, r0
   8d1be:	64a8      	str	r0, [r5, #72]	; 0x48
   8d1c0:	2000      	movs	r0, #0
   8d1c2:	6020      	str	r0, [r4, #0]
   8d1c4:	e008      	b.n	8d1d8 <__pow5mult+0x4e>
   8d1c6:	107f      	asrs	r7, r7, #1
   8d1c8:	d01d      	beq.n	8d206 <__pow5mult+0x7c>
   8d1ca:	f8d4 8000 	ldr.w	r8, [r4]
   8d1ce:	4640      	mov	r0, r8
   8d1d0:	f1b8 0f00 	cmp.w	r8, #0
   8d1d4:	d00e      	beq.n	8d1f4 <__pow5mult+0x6a>
   8d1d6:	4604      	mov	r4, r0
   8d1d8:	07f8      	lsls	r0, r7, #31
   8d1da:	d5f4      	bpl.n	8d1c6 <__pow5mult+0x3c>
   8d1dc:	4631      	mov	r1, r6
   8d1de:	4622      	mov	r2, r4
   8d1e0:	4628      	mov	r0, r5
   8d1e2:	f7ff ff41 	bl	8d068 <__multiply>
   8d1e6:	4631      	mov	r1, r6
   8d1e8:	4680      	mov	r8, r0
   8d1ea:	4628      	mov	r0, r5
   8d1ec:	f7ff fe60 	bl	8ceb0 <_Bfree>
   8d1f0:	4646      	mov	r6, r8
   8d1f2:	e7e8      	b.n	8d1c6 <__pow5mult+0x3c>
   8d1f4:	4628      	mov	r0, r5
   8d1f6:	4621      	mov	r1, r4
   8d1f8:	4622      	mov	r2, r4
   8d1fa:	f7ff ff35 	bl	8d068 <__multiply>
   8d1fe:	6020      	str	r0, [r4, #0]
   8d200:	f8c0 8000 	str.w	r8, [r0]
   8d204:	e7e7      	b.n	8d1d6 <__pow5mult+0x4c>
   8d206:	4630      	mov	r0, r6
   8d208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8d20c:	0008f648 	.word	0x0008f648

0008d210 <__lshift>:
   8d210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8d214:	460c      	mov	r4, r1
   8d216:	6923      	ldr	r3, [r4, #16]
   8d218:	ea4f 1862 	mov.w	r8, r2, asr #5
   8d21c:	eb08 0a03 	add.w	sl, r8, r3
   8d220:	6849      	ldr	r1, [r1, #4]
   8d222:	68a5      	ldr	r5, [r4, #8]
   8d224:	4681      	mov	r9, r0
   8d226:	4617      	mov	r7, r2
   8d228:	f10a 0601 	add.w	r6, sl, #1
   8d22c:	42ae      	cmp	r6, r5
   8d22e:	dd02      	ble.n	8d236 <__lshift+0x26>
   8d230:	3101      	adds	r1, #1
   8d232:	006d      	lsls	r5, r5, #1
   8d234:	e7fa      	b.n	8d22c <__lshift+0x1c>
   8d236:	4648      	mov	r0, r9
   8d238:	f7ff fe14 	bl	8ce64 <_Balloc>
   8d23c:	2200      	movs	r2, #0
   8d23e:	4605      	mov	r5, r0
   8d240:	f100 0014 	add.w	r0, r0, #20
   8d244:	4542      	cmp	r2, r8
   8d246:	da04      	bge.n	8d252 <__lshift+0x42>
   8d248:	2100      	movs	r1, #0
   8d24a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
   8d24e:	3201      	adds	r2, #1
   8d250:	e7f8      	b.n	8d244 <__lshift+0x34>
   8d252:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
   8d256:	6922      	ldr	r2, [r4, #16]
   8d258:	eb05 0380 	add.w	r3, r5, r0, lsl #2
   8d25c:	3314      	adds	r3, #20
   8d25e:	eb04 0082 	add.w	r0, r4, r2, lsl #2
   8d262:	f017 071f 	ands.w	r7, r7, #31
   8d266:	f104 0114 	add.w	r1, r4, #20
   8d26a:	f100 0e14 	add.w	lr, r0, #20
   8d26e:	d014      	beq.n	8d29a <__lshift+0x8a>
   8d270:	4618      	mov	r0, r3
   8d272:	f1c7 0c20 	rsb	ip, r7, #32
   8d276:	2300      	movs	r3, #0
   8d278:	680a      	ldr	r2, [r1, #0]
   8d27a:	fa02 f207 	lsl.w	r2, r2, r7
   8d27e:	4313      	orrs	r3, r2
   8d280:	f840 3b04 	str.w	r3, [r0], #4
   8d284:	f851 3b04 	ldr.w	r3, [r1], #4
   8d288:	4571      	cmp	r1, lr
   8d28a:	fa23 f30c 	lsr.w	r3, r3, ip
   8d28e:	d3f3      	bcc.n	8d278 <__lshift+0x68>
   8d290:	6003      	str	r3, [r0, #0]
   8d292:	b143      	cbz	r3, 8d2a6 <__lshift+0x96>
   8d294:	f10a 0602 	add.w	r6, sl, #2
   8d298:	e005      	b.n	8d2a6 <__lshift+0x96>
   8d29a:	f851 2b04 	ldr.w	r2, [r1], #4
   8d29e:	458e      	cmp	lr, r1
   8d2a0:	f843 2b04 	str.w	r2, [r3], #4
   8d2a4:	d8f9      	bhi.n	8d29a <__lshift+0x8a>
   8d2a6:	3e01      	subs	r6, #1
   8d2a8:	4648      	mov	r0, r9
   8d2aa:	612e      	str	r6, [r5, #16]
   8d2ac:	4621      	mov	r1, r4
   8d2ae:	f7ff fdff 	bl	8ceb0 <_Bfree>
   8d2b2:	4628      	mov	r0, r5
   8d2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0008d2b8 <__mcmp>:
   8d2b8:	4603      	mov	r3, r0
   8d2ba:	690a      	ldr	r2, [r1, #16]
   8d2bc:	6900      	ldr	r0, [r0, #16]
   8d2be:	b530      	push	{r4, r5, lr}
   8d2c0:	1a80      	subs	r0, r0, r2
   8d2c2:	d115      	bne.n	8d2f0 <__mcmp+0x38>
   8d2c4:	1d15      	adds	r5, r2, #4
   8d2c6:	00aa      	lsls	r2, r5, #2
   8d2c8:	f103 0414 	add.w	r4, r3, #20
   8d2cc:	1889      	adds	r1, r1, r2
   8d2ce:	189b      	adds	r3, r3, r2
   8d2d0:	3304      	adds	r3, #4
   8d2d2:	1d0a      	adds	r2, r1, #4
   8d2d4:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8d2d8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8d2dc:	428d      	cmp	r5, r1
   8d2de:	d003      	beq.n	8d2e8 <__mcmp+0x30>
   8d2e0:	d205      	bcs.n	8d2ee <__mcmp+0x36>
   8d2e2:	f04f 30ff 	mov.w	r0, #4294967295
   8d2e6:	bd30      	pop	{r4, r5, pc}
   8d2e8:	429c      	cmp	r4, r3
   8d2ea:	d3f3      	bcc.n	8d2d4 <__mcmp+0x1c>
   8d2ec:	bd30      	pop	{r4, r5, pc}
   8d2ee:	2001      	movs	r0, #1
   8d2f0:	bd30      	pop	{r4, r5, pc}

0008d2f2 <__mdiff>:
   8d2f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8d2f6:	4606      	mov	r6, r0
   8d2f8:	460c      	mov	r4, r1
   8d2fa:	4608      	mov	r0, r1
   8d2fc:	4611      	mov	r1, r2
   8d2fe:	4615      	mov	r5, r2
   8d300:	f7ff ffda 	bl	8d2b8 <__mcmp>
   8d304:	1e07      	subs	r7, r0, #0
   8d306:	d108      	bne.n	8d31a <__mdiff+0x28>
   8d308:	4639      	mov	r1, r7
   8d30a:	4630      	mov	r0, r6
   8d30c:	f7ff fdaa 	bl	8ce64 <_Balloc>
   8d310:	2101      	movs	r1, #1
   8d312:	6101      	str	r1, [r0, #16]
   8d314:	6147      	str	r7, [r0, #20]
   8d316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8d31a:	db01      	blt.n	8d320 <__mdiff+0x2e>
   8d31c:	2700      	movs	r7, #0
   8d31e:	e003      	b.n	8d328 <__mdiff+0x36>
   8d320:	4623      	mov	r3, r4
   8d322:	2701      	movs	r7, #1
   8d324:	462c      	mov	r4, r5
   8d326:	461d      	mov	r5, r3
   8d328:	6861      	ldr	r1, [r4, #4]
   8d32a:	4630      	mov	r0, r6
   8d32c:	f7ff fd9a 	bl	8ce64 <_Balloc>
   8d330:	692a      	ldr	r2, [r5, #16]
   8d332:	6923      	ldr	r3, [r4, #16]
   8d334:	eb05 0182 	add.w	r1, r5, r2, lsl #2
   8d338:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   8d33c:	60c7      	str	r7, [r0, #12]
   8d33e:	f10c 0c14 	add.w	ip, ip, #20
   8d342:	f101 0814 	add.w	r8, r1, #20
   8d346:	3414      	adds	r4, #20
   8d348:	3514      	adds	r5, #20
   8d34a:	f100 0714 	add.w	r7, r0, #20
   8d34e:	2200      	movs	r2, #0
   8d350:	f854 6b04 	ldr.w	r6, [r4], #4
   8d354:	f855 1b04 	ldr.w	r1, [r5], #4
   8d358:	fa1f f986 	uxth.w	r9, r6
   8d35c:	444a      	add	r2, r9
   8d35e:	fa1f fa81 	uxth.w	sl, r1
   8d362:	0c09      	lsrs	r1, r1, #16
   8d364:	ebca 0e02 	rsb	lr, sl, r2
   8d368:	ebc1 4616 	rsb	r6, r1, r6, lsr #16
   8d36c:	eb06 412e 	add.w	r1, r6, lr, asr #16
   8d370:	fa1f f98e 	uxth.w	r9, lr
   8d374:	140a      	asrs	r2, r1, #16
   8d376:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   8d37a:	f847 1b04 	str.w	r1, [r7], #4
   8d37e:	45a8      	cmp	r8, r5
   8d380:	4626      	mov	r6, r4
   8d382:	4639      	mov	r1, r7
   8d384:	d8e4      	bhi.n	8d350 <__mdiff+0x5e>
   8d386:	4566      	cmp	r6, ip
   8d388:	d20d      	bcs.n	8d3a6 <__mdiff+0xb4>
   8d38a:	f856 4b04 	ldr.w	r4, [r6], #4
   8d38e:	b2a5      	uxth	r5, r4
   8d390:	18ad      	adds	r5, r5, r2
   8d392:	0c22      	lsrs	r2, r4, #16
   8d394:	eb02 4425 	add.w	r4, r2, r5, asr #16
   8d398:	b2ad      	uxth	r5, r5
   8d39a:	1422      	asrs	r2, r4, #16
   8d39c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   8d3a0:	f841 4b04 	str.w	r4, [r1], #4
   8d3a4:	e7ef      	b.n	8d386 <__mdiff+0x94>
   8d3a6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8d3aa:	b90a      	cbnz	r2, 8d3b0 <__mdiff+0xbe>
   8d3ac:	3b01      	subs	r3, #1
   8d3ae:	e7fa      	b.n	8d3a6 <__mdiff+0xb4>
   8d3b0:	6103      	str	r3, [r0, #16]
   8d3b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0008d3b6 <__ulp>:
   8d3b6:	4b0f      	ldr	r3, [pc, #60]	; (8d3f4 <__ulp+0x3e>)
   8d3b8:	400b      	ands	r3, r1
   8d3ba:	f1a3 7050 	sub.w	r0, r3, #54525952	; 0x3400000
   8d3be:	2800      	cmp	r0, #0
   8d3c0:	dd01      	ble.n	8d3c6 <__ulp+0x10>
   8d3c2:	4601      	mov	r1, r0
   8d3c4:	e008      	b.n	8d3d8 <__ulp+0x22>
   8d3c6:	4241      	negs	r1, r0
   8d3c8:	150b      	asrs	r3, r1, #20
   8d3ca:	2100      	movs	r1, #0
   8d3cc:	2b13      	cmp	r3, #19
   8d3ce:	dc05      	bgt.n	8d3dc <__ulp+0x26>
   8d3d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   8d3d4:	fa40 f103 	asr.w	r1, r0, r3
   8d3d8:	2000      	movs	r0, #0
   8d3da:	4770      	bx	lr
   8d3dc:	2b32      	cmp	r3, #50	; 0x32
   8d3de:	f04f 0201 	mov.w	r2, #1
   8d3e2:	bfda      	itte	le
   8d3e4:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
   8d3e8:	fa02 f303 	lslle.w	r3, r2, r3
   8d3ec:	4613      	movgt	r3, r2
   8d3ee:	4618      	mov	r0, r3
   8d3f0:	4770      	bx	lr
   8d3f2:	bf00      	nop
   8d3f4:	7ff00000 	.word	0x7ff00000

0008d3f8 <__b2d>:
   8d3f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8d3fc:	6903      	ldr	r3, [r0, #16]
   8d3fe:	4689      	mov	r9, r1
   8d400:	1d19      	adds	r1, r3, #4
   8d402:	eb00 0881 	add.w	r8, r0, r1, lsl #2
   8d406:	4646      	mov	r6, r8
   8d408:	f856 4b04 	ldr.w	r4, [r6], #4
   8d40c:	f100 0714 	add.w	r7, r0, #20
   8d410:	4620      	mov	r0, r4
   8d412:	f7ff fdd4 	bl	8cfbe <__hi0bits>
   8d416:	f1c0 0220 	rsb	r2, r0, #32
   8d41a:	280a      	cmp	r0, #10
   8d41c:	4645      	mov	r5, r8
   8d41e:	f8c9 2000 	str.w	r2, [r9]
   8d422:	dc14      	bgt.n	8d44e <__b2d+0x56>
   8d424:	f1c0 010b 	rsb	r1, r0, #11
   8d428:	fa24 f501 	lsr.w	r5, r4, r1
   8d42c:	45b8      	cmp	r8, r7
   8d42e:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
   8d432:	f445 1340 	orr.w	r3, r5, #3145728	; 0x300000
   8d436:	bf8c      	ite	hi
   8d438:	f856 5c08 	ldrhi.w	r5, [r6, #-8]
   8d43c:	2500      	movls	r5, #0
   8d43e:	3015      	adds	r0, #21
   8d440:	fa25 f201 	lsr.w	r2, r5, r1
   8d444:	fa04 f400 	lsl.w	r4, r4, r0
   8d448:	ea42 0004 	orr.w	r0, r2, r4
   8d44c:	e025      	b.n	8d49a <__b2d+0xa2>
   8d44e:	45b8      	cmp	r8, r7
   8d450:	d903      	bls.n	8d45a <__b2d+0x62>
   8d452:	3d04      	subs	r5, #4
   8d454:	f856 1c08 	ldr.w	r1, [r6, #-8]
   8d458:	e000      	b.n	8d45c <__b2d+0x64>
   8d45a:	2100      	movs	r1, #0
   8d45c:	f1b0 060b 	subs.w	r6, r0, #11
   8d460:	d016      	beq.n	8d490 <__b2d+0x98>
   8d462:	fa04 f406 	lsl.w	r4, r4, r6
   8d466:	f1c0 022b 	rsb	r2, r0, #43	; 0x2b
   8d46a:	fa21 fc02 	lsr.w	ip, r1, r2
   8d46e:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   8d472:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   8d476:	42bd      	cmp	r5, r7
   8d478:	ea44 030c 	orr.w	r3, r4, ip
   8d47c:	bf8c      	ite	hi
   8d47e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
   8d482:	2400      	movls	r4, #0
   8d484:	fa24 f002 	lsr.w	r0, r4, r2
   8d488:	fa01 f106 	lsl.w	r1, r1, r6
   8d48c:	4308      	orrs	r0, r1
   8d48e:	e004      	b.n	8d49a <__b2d+0xa2>
   8d490:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   8d494:	f444 1340 	orr.w	r3, r4, #3145728	; 0x300000
   8d498:	4608      	mov	r0, r1
   8d49a:	4619      	mov	r1, r3
   8d49c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008d4a0 <__d2b>:
   8d4a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   8d4a4:	2101      	movs	r1, #1
   8d4a6:	461d      	mov	r5, r3
   8d4a8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8d4ac:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   8d4b0:	4614      	mov	r4, r2
   8d4b2:	f7ff fcd7 	bl	8ce64 <_Balloc>
   8d4b6:	f3c5 570a 	ubfx	r7, r5, #20, #11
   8d4ba:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
   8d4be:	4606      	mov	r6, r0
   8d4c0:	f423 0070 	bic.w	r0, r3, #15728640	; 0xf00000
   8d4c4:	b10f      	cbz	r7, 8d4ca <__d2b+0x2a>
   8d4c6:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   8d4ca:	9001      	str	r0, [sp, #4]
   8d4cc:	b1dc      	cbz	r4, 8d506 <__d2b+0x66>
   8d4ce:	aa02      	add	r2, sp, #8
   8d4d0:	4668      	mov	r0, sp
   8d4d2:	f842 4d08 	str.w	r4, [r2, #-8]!
   8d4d6:	f7ff fd91 	bl	8cffc <__lo0bits>
   8d4da:	9c00      	ldr	r4, [sp, #0]
   8d4dc:	b150      	cbz	r0, 8d4f4 <__d2b+0x54>
   8d4de:	9a01      	ldr	r2, [sp, #4]
   8d4e0:	f1c0 0320 	rsb	r3, r0, #32
   8d4e4:	fa02 f103 	lsl.w	r1, r2, r3
   8d4e8:	fa22 f200 	lsr.w	r2, r2, r0
   8d4ec:	430c      	orrs	r4, r1
   8d4ee:	6174      	str	r4, [r6, #20]
   8d4f0:	9201      	str	r2, [sp, #4]
   8d4f2:	e000      	b.n	8d4f6 <__d2b+0x56>
   8d4f4:	6174      	str	r4, [r6, #20]
   8d4f6:	9a01      	ldr	r2, [sp, #4]
   8d4f8:	2a00      	cmp	r2, #0
   8d4fa:	bf0c      	ite	eq
   8d4fc:	2401      	moveq	r4, #1
   8d4fe:	2402      	movne	r4, #2
   8d500:	61b2      	str	r2, [r6, #24]
   8d502:	6134      	str	r4, [r6, #16]
   8d504:	e007      	b.n	8d516 <__d2b+0x76>
   8d506:	a801      	add	r0, sp, #4
   8d508:	f7ff fd78 	bl	8cffc <__lo0bits>
   8d50c:	9901      	ldr	r1, [sp, #4]
   8d50e:	2401      	movs	r4, #1
   8d510:	6171      	str	r1, [r6, #20]
   8d512:	6134      	str	r4, [r6, #16]
   8d514:	3020      	adds	r0, #32
   8d516:	b13f      	cbz	r7, 8d528 <__d2b+0x88>
   8d518:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
   8d51c:	183f      	adds	r7, r7, r0
   8d51e:	f8c9 7000 	str.w	r7, [r9]
   8d522:	f1c0 0135 	rsb	r1, r0, #53	; 0x35
   8d526:	e00a      	b.n	8d53e <__d2b+0x9e>
   8d528:	eb06 0384 	add.w	r3, r6, r4, lsl #2
   8d52c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8d530:	f8c9 0000 	str.w	r0, [r9]
   8d534:	6918      	ldr	r0, [r3, #16]
   8d536:	f7ff fd42 	bl	8cfbe <__hi0bits>
   8d53a:	0164      	lsls	r4, r4, #5
   8d53c:	1a21      	subs	r1, r4, r0
   8d53e:	f8c8 1000 	str.w	r1, [r8]
   8d542:	4630      	mov	r0, r6
   8d544:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

0008d548 <__ratio>:
   8d548:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   8d54c:	460e      	mov	r6, r1
   8d54e:	4669      	mov	r1, sp
   8d550:	4680      	mov	r8, r0
   8d552:	f7ff ff51 	bl	8d3f8 <__b2d>
   8d556:	460d      	mov	r5, r1
   8d558:	4604      	mov	r4, r0
   8d55a:	a901      	add	r1, sp, #4
   8d55c:	4630      	mov	r0, r6
   8d55e:	f7ff ff4b 	bl	8d3f8 <__b2d>
   8d562:	9f00      	ldr	r7, [sp, #0]
   8d564:	460b      	mov	r3, r1
   8d566:	9901      	ldr	r1, [sp, #4]
   8d568:	4602      	mov	r2, r0
   8d56a:	1a7f      	subs	r7, r7, r1
   8d56c:	f8d8 0010 	ldr.w	r0, [r8, #16]
   8d570:	6931      	ldr	r1, [r6, #16]
   8d572:	1a40      	subs	r0, r0, r1
   8d574:	eb07 1140 	add.w	r1, r7, r0, lsl #5
   8d578:	2900      	cmp	r1, #0
   8d57a:	bfd6      	itet	le
   8d57c:	eba3 5101 	suble.w	r1, r3, r1, lsl #20
   8d580:	eb05 5501 	addgt.w	r5, r5, r1, lsl #20
   8d584:	460b      	movle	r3, r1
   8d586:	4620      	mov	r0, r4
   8d588:	4629      	mov	r1, r5
   8d58a:	f7fd f877 	bl	8a67c <__aeabi_ddiv>
   8d58e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0008d592 <_mprec_log10>:
   8d592:	2817      	cmp	r0, #23
   8d594:	b510      	push	{r4, lr}
   8d596:	4604      	mov	r4, r0
   8d598:	dc05      	bgt.n	8d5a6 <_mprec_log10+0x14>
   8d59a:	4b07      	ldr	r3, [pc, #28]	; (8d5b8 <_mprec_log10+0x26>)
   8d59c:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
   8d5a0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   8d5a4:	bd10      	pop	{r4, pc}
   8d5a6:	4905      	ldr	r1, [pc, #20]	; (8d5bc <_mprec_log10+0x2a>)
   8d5a8:	2000      	movs	r0, #0
   8d5aa:	2200      	movs	r2, #0
   8d5ac:	4b04      	ldr	r3, [pc, #16]	; (8d5c0 <_mprec_log10+0x2e>)
   8d5ae:	f7fc ff3b 	bl	8a428 <__aeabi_dmul>
   8d5b2:	3c01      	subs	r4, #1
   8d5b4:	d1f9      	bne.n	8d5aa <_mprec_log10+0x18>
   8d5b6:	bd10      	pop	{r4, pc}
   8d5b8:	0008f648 	.word	0x0008f648
   8d5bc:	3ff00000 	.word	0x3ff00000
   8d5c0:	40240000 	.word	0x40240000

0008d5c4 <__copybits>:
   8d5c4:	3901      	subs	r1, #1
   8d5c6:	114b      	asrs	r3, r1, #5
   8d5c8:	b510      	push	{r4, lr}
   8d5ca:	1c59      	adds	r1, r3, #1
   8d5cc:	6913      	ldr	r3, [r2, #16]
   8d5ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   8d5d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8d5d6:	3314      	adds	r3, #20
   8d5d8:	3214      	adds	r2, #20
   8d5da:	429a      	cmp	r2, r3
   8d5dc:	d204      	bcs.n	8d5e8 <__copybits+0x24>
   8d5de:	f852 4b04 	ldr.w	r4, [r2], #4
   8d5e2:	f840 4b04 	str.w	r4, [r0], #4
   8d5e6:	e7f8      	b.n	8d5da <__copybits+0x16>
   8d5e8:	4288      	cmp	r0, r1
   8d5ea:	d203      	bcs.n	8d5f4 <__copybits+0x30>
   8d5ec:	2200      	movs	r2, #0
   8d5ee:	f840 2b04 	str.w	r2, [r0], #4
   8d5f2:	e7f9      	b.n	8d5e8 <__copybits+0x24>
   8d5f4:	bd10      	pop	{r4, pc}

0008d5f6 <__any_on>:
   8d5f6:	6902      	ldr	r2, [r0, #16]
   8d5f8:	114b      	asrs	r3, r1, #5
   8d5fa:	4293      	cmp	r3, r2
   8d5fc:	b530      	push	{r4, r5, lr}
   8d5fe:	f100 0414 	add.w	r4, r0, #20
   8d602:	dc0d      	bgt.n	8d620 <__any_on+0x2a>
   8d604:	da0d      	bge.n	8d622 <__any_on+0x2c>
   8d606:	f011 011f 	ands.w	r1, r1, #31
   8d60a:	d00a      	beq.n	8d622 <__any_on+0x2c>
   8d60c:	eb00 0583 	add.w	r5, r0, r3, lsl #2
   8d610:	696a      	ldr	r2, [r5, #20]
   8d612:	fa22 f501 	lsr.w	r5, r2, r1
   8d616:	fa05 f101 	lsl.w	r1, r5, r1
   8d61a:	4291      	cmp	r1, r2
   8d61c:	d10f      	bne.n	8d63e <__any_on+0x48>
   8d61e:	e000      	b.n	8d622 <__any_on+0x2c>
   8d620:	4613      	mov	r3, r2
   8d622:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   8d626:	3014      	adds	r0, #20
   8d628:	42a0      	cmp	r0, r4
   8d62a:	4602      	mov	r2, r0
   8d62c:	d905      	bls.n	8d63a <__any_on+0x44>
   8d62e:	f852 1c04 	ldr.w	r1, [r2, #-4]
   8d632:	3804      	subs	r0, #4
   8d634:	2900      	cmp	r1, #0
   8d636:	d0f7      	beq.n	8d628 <__any_on+0x32>
   8d638:	e001      	b.n	8d63e <__any_on+0x48>
   8d63a:	2000      	movs	r0, #0
   8d63c:	bd30      	pop	{r4, r5, pc}
   8d63e:	2001      	movs	r0, #1
   8d640:	bd30      	pop	{r4, r5, pc}
   8d642:	bf00      	nop

0008d644 <_realloc_r>:
   8d644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8d648:	4681      	mov	r9, r0
   8d64a:	4616      	mov	r6, r2
   8d64c:	460c      	mov	r4, r1
   8d64e:	b921      	cbnz	r1, 8d65a <_realloc_r+0x16>
   8d650:	4611      	mov	r1, r2
   8d652:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8d656:	f7ff b9f3 	b.w	8ca40 <_malloc_r>
   8d65a:	f7ff fc01 	bl	8ce60 <__malloc_lock>
   8d65e:	f106 070b 	add.w	r7, r6, #11
   8d662:	f854 5c04 	ldr.w	r5, [r4, #-4]
   8d666:	2f16      	cmp	r7, #22
   8d668:	f1a4 0b08 	sub.w	fp, r4, #8
   8d66c:	f025 0803 	bic.w	r8, r5, #3
   8d670:	d903      	bls.n	8d67a <_realloc_r+0x36>
   8d672:	f037 0707 	bics.w	r7, r7, #7
   8d676:	d501      	bpl.n	8d67c <_realloc_r+0x38>
   8d678:	e002      	b.n	8d680 <_realloc_r+0x3c>
   8d67a:	2710      	movs	r7, #16
   8d67c:	42b7      	cmp	r7, r6
   8d67e:	d204      	bcs.n	8d68a <_realloc_r+0x46>
   8d680:	200c      	movs	r0, #12
   8d682:	f8c9 0000 	str.w	r0, [r9]
   8d686:	2600      	movs	r6, #0
   8d688:	e145      	b.n	8d916 <_realloc_r+0x2d2>
   8d68a:	45b8      	cmp	r8, r7
   8d68c:	f280 811a 	bge.w	8d8c4 <_realloc_r+0x280>
   8d690:	4aa2      	ldr	r2, [pc, #648]	; (8d91c <_realloc_r+0x2d8>)
   8d692:	eb0b 0308 	add.w	r3, fp, r8
   8d696:	6891      	ldr	r1, [r2, #8]
   8d698:	428b      	cmp	r3, r1
   8d69a:	d006      	beq.n	8d6aa <_realloc_r+0x66>
   8d69c:	6858      	ldr	r0, [r3, #4]
   8d69e:	f020 0201 	bic.w	r2, r0, #1
   8d6a2:	1898      	adds	r0, r3, r2
   8d6a4:	6842      	ldr	r2, [r0, #4]
   8d6a6:	07d0      	lsls	r0, r2, #31
   8d6a8:	d426      	bmi.n	8d6f8 <_realloc_r+0xb4>
   8d6aa:	685a      	ldr	r2, [r3, #4]
   8d6ac:	428b      	cmp	r3, r1
   8d6ae:	f022 0003 	bic.w	r0, r2, #3
   8d6b2:	eb00 0a08 	add.w	sl, r0, r8
   8d6b6:	d118      	bne.n	8d6ea <_realloc_r+0xa6>
   8d6b8:	f107 0210 	add.w	r2, r7, #16
   8d6bc:	4592      	cmp	sl, r2
   8d6be:	db1d      	blt.n	8d6fc <_realloc_r+0xb8>
   8d6c0:	ebc7 0a0a 	rsb	sl, r7, sl
   8d6c4:	eb0b 0507 	add.w	r5, fp, r7
   8d6c8:	f04a 0101 	orr.w	r1, sl, #1
   8d6cc:	6069      	str	r1, [r5, #4]
   8d6ce:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8d6d2:	4e92      	ldr	r6, [pc, #584]	; (8d91c <_realloc_r+0x2d8>)
   8d6d4:	f002 0301 	and.w	r3, r2, #1
   8d6d8:	431f      	orrs	r7, r3
   8d6da:	60b5      	str	r5, [r6, #8]
   8d6dc:	f844 7c04 	str.w	r7, [r4, #-4]
   8d6e0:	4648      	mov	r0, r9
   8d6e2:	f7ff fbbe 	bl	8ce62 <__malloc_unlock>
   8d6e6:	4626      	mov	r6, r4
   8d6e8:	e115      	b.n	8d916 <_realloc_r+0x2d2>
   8d6ea:	45ba      	cmp	sl, r7
   8d6ec:	db06      	blt.n	8d6fc <_realloc_r+0xb8>
   8d6ee:	68dd      	ldr	r5, [r3, #12]
   8d6f0:	689e      	ldr	r6, [r3, #8]
   8d6f2:	60f5      	str	r5, [r6, #12]
   8d6f4:	60ae      	str	r6, [r5, #8]
   8d6f6:	e0e6      	b.n	8d8c6 <_realloc_r+0x282>
   8d6f8:	2000      	movs	r0, #0
   8d6fa:	4603      	mov	r3, r0
   8d6fc:	07ea      	lsls	r2, r5, #31
   8d6fe:	f100 8091 	bmi.w	8d824 <_realloc_r+0x1e0>
   8d702:	f854 5c08 	ldr.w	r5, [r4, #-8]
   8d706:	ebc5 050b 	rsb	r5, r5, fp
   8d70a:	686a      	ldr	r2, [r5, #4]
   8d70c:	f022 0203 	bic.w	r2, r2, #3
   8d710:	2b00      	cmp	r3, #0
   8d712:	d051      	beq.n	8d7b8 <_realloc_r+0x174>
   8d714:	eb02 0a08 	add.w	sl, r2, r8
   8d718:	428b      	cmp	r3, r1
   8d71a:	4482      	add	sl, r0
   8d71c:	d145      	bne.n	8d7aa <_realloc_r+0x166>
   8d71e:	f107 0310 	add.w	r3, r7, #16
   8d722:	459a      	cmp	sl, r3
   8d724:	db48      	blt.n	8d7b8 <_realloc_r+0x174>
   8d726:	462e      	mov	r6, r5
   8d728:	68e9      	ldr	r1, [r5, #12]
   8d72a:	f856 3f08 	ldr.w	r3, [r6, #8]!
   8d72e:	f1a8 0204 	sub.w	r2, r8, #4
   8d732:	2a24      	cmp	r2, #36	; 0x24
   8d734:	60d9      	str	r1, [r3, #12]
   8d736:	608b      	str	r3, [r1, #8]
   8d738:	d825      	bhi.n	8d786 <_realloc_r+0x142>
   8d73a:	2a13      	cmp	r2, #19
   8d73c:	d91b      	bls.n	8d776 <_realloc_r+0x132>
   8d73e:	6821      	ldr	r1, [r4, #0]
   8d740:	2a1b      	cmp	r2, #27
   8d742:	60a9      	str	r1, [r5, #8]
   8d744:	6863      	ldr	r3, [r4, #4]
   8d746:	60eb      	str	r3, [r5, #12]
   8d748:	d803      	bhi.n	8d752 <_realloc_r+0x10e>
   8d74a:	f105 0010 	add.w	r0, r5, #16
   8d74e:	3408      	adds	r4, #8
   8d750:	e012      	b.n	8d778 <_realloc_r+0x134>
   8d752:	68a0      	ldr	r0, [r4, #8]
   8d754:	2a24      	cmp	r2, #36	; 0x24
   8d756:	6128      	str	r0, [r5, #16]
   8d758:	68e1      	ldr	r1, [r4, #12]
   8d75a:	6169      	str	r1, [r5, #20]
   8d75c:	d003      	beq.n	8d766 <_realloc_r+0x122>
   8d75e:	f105 0018 	add.w	r0, r5, #24
   8d762:	3410      	adds	r4, #16
   8d764:	e008      	b.n	8d778 <_realloc_r+0x134>
   8d766:	6922      	ldr	r2, [r4, #16]
   8d768:	f105 0020 	add.w	r0, r5, #32
   8d76c:	61aa      	str	r2, [r5, #24]
   8d76e:	6963      	ldr	r3, [r4, #20]
   8d770:	3418      	adds	r4, #24
   8d772:	61eb      	str	r3, [r5, #28]
   8d774:	e000      	b.n	8d778 <_realloc_r+0x134>
   8d776:	4630      	mov	r0, r6
   8d778:	6821      	ldr	r1, [r4, #0]
   8d77a:	6001      	str	r1, [r0, #0]
   8d77c:	6862      	ldr	r2, [r4, #4]
   8d77e:	6042      	str	r2, [r0, #4]
   8d780:	68a3      	ldr	r3, [r4, #8]
   8d782:	6083      	str	r3, [r0, #8]
   8d784:	e003      	b.n	8d78e <_realloc_r+0x14a>
   8d786:	4630      	mov	r0, r6
   8d788:	4621      	mov	r1, r4
   8d78a:	f7fd f99a 	bl	8aac2 <memmove>
   8d78e:	ebc7 0a0a 	rsb	sl, r7, sl
   8d792:	19e8      	adds	r0, r5, r7
   8d794:	f04a 0201 	orr.w	r2, sl, #1
   8d798:	6042      	str	r2, [r0, #4]
   8d79a:	686b      	ldr	r3, [r5, #4]
   8d79c:	495f      	ldr	r1, [pc, #380]	; (8d91c <_realloc_r+0x2d8>)
   8d79e:	6088      	str	r0, [r1, #8]
   8d7a0:	f003 0001 	and.w	r0, r3, #1
   8d7a4:	4307      	orrs	r7, r0
   8d7a6:	606f      	str	r7, [r5, #4]
   8d7a8:	e088      	b.n	8d8bc <_realloc_r+0x278>
   8d7aa:	45ba      	cmp	sl, r7
   8d7ac:	db04      	blt.n	8d7b8 <_realloc_r+0x174>
   8d7ae:	68d9      	ldr	r1, [r3, #12]
   8d7b0:	6898      	ldr	r0, [r3, #8]
   8d7b2:	60c1      	str	r1, [r0, #12]
   8d7b4:	6088      	str	r0, [r1, #8]
   8d7b6:	e003      	b.n	8d7c0 <_realloc_r+0x17c>
   8d7b8:	eb02 0a08 	add.w	sl, r2, r8
   8d7bc:	45ba      	cmp	sl, r7
   8d7be:	db31      	blt.n	8d824 <_realloc_r+0x1e0>
   8d7c0:	4628      	mov	r0, r5
   8d7c2:	68eb      	ldr	r3, [r5, #12]
   8d7c4:	f850 1f08 	ldr.w	r1, [r0, #8]!
   8d7c8:	f1a8 0204 	sub.w	r2, r8, #4
   8d7cc:	2a24      	cmp	r2, #36	; 0x24
   8d7ce:	60cb      	str	r3, [r1, #12]
   8d7d0:	6099      	str	r1, [r3, #8]
   8d7d2:	d823      	bhi.n	8d81c <_realloc_r+0x1d8>
   8d7d4:	2a13      	cmp	r2, #19
   8d7d6:	d91a      	bls.n	8d80e <_realloc_r+0x1ca>
   8d7d8:	6820      	ldr	r0, [r4, #0]
   8d7da:	2a1b      	cmp	r2, #27
   8d7dc:	60a8      	str	r0, [r5, #8]
   8d7de:	6866      	ldr	r6, [r4, #4]
   8d7e0:	60ee      	str	r6, [r5, #12]
   8d7e2:	d803      	bhi.n	8d7ec <_realloc_r+0x1a8>
   8d7e4:	f105 0010 	add.w	r0, r5, #16
   8d7e8:	3408      	adds	r4, #8
   8d7ea:	e010      	b.n	8d80e <_realloc_r+0x1ca>
   8d7ec:	68a3      	ldr	r3, [r4, #8]
   8d7ee:	2a24      	cmp	r2, #36	; 0x24
   8d7f0:	612b      	str	r3, [r5, #16]
   8d7f2:	68e1      	ldr	r1, [r4, #12]
   8d7f4:	6169      	str	r1, [r5, #20]
   8d7f6:	d003      	beq.n	8d800 <_realloc_r+0x1bc>
   8d7f8:	f105 0018 	add.w	r0, r5, #24
   8d7fc:	3410      	adds	r4, #16
   8d7fe:	e006      	b.n	8d80e <_realloc_r+0x1ca>
   8d800:	6922      	ldr	r2, [r4, #16]
   8d802:	61aa      	str	r2, [r5, #24]
   8d804:	6960      	ldr	r0, [r4, #20]
   8d806:	3418      	adds	r4, #24
   8d808:	61e8      	str	r0, [r5, #28]
   8d80a:	f105 0020 	add.w	r0, r5, #32
   8d80e:	6826      	ldr	r6, [r4, #0]
   8d810:	6006      	str	r6, [r0, #0]
   8d812:	6863      	ldr	r3, [r4, #4]
   8d814:	6043      	str	r3, [r0, #4]
   8d816:	68a1      	ldr	r1, [r4, #8]
   8d818:	6081      	str	r1, [r0, #8]
   8d81a:	e055      	b.n	8d8c8 <_realloc_r+0x284>
   8d81c:	4621      	mov	r1, r4
   8d81e:	f7fd f950 	bl	8aac2 <memmove>
   8d822:	e051      	b.n	8d8c8 <_realloc_r+0x284>
   8d824:	4631      	mov	r1, r6
   8d826:	4648      	mov	r0, r9
   8d828:	f7ff f90a 	bl	8ca40 <_malloc_r>
   8d82c:	4606      	mov	r6, r0
   8d82e:	2800      	cmp	r0, #0
   8d830:	d044      	beq.n	8d8bc <_realloc_r+0x278>
   8d832:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8d836:	f1a0 0208 	sub.w	r2, r0, #8
   8d83a:	f021 0301 	bic.w	r3, r1, #1
   8d83e:	eb0b 0103 	add.w	r1, fp, r3
   8d842:	428a      	cmp	r2, r1
   8d844:	d106      	bne.n	8d854 <_realloc_r+0x210>
   8d846:	f850 6c04 	ldr.w	r6, [r0, #-4]
   8d84a:	f026 0503 	bic.w	r5, r6, #3
   8d84e:	eb05 0a08 	add.w	sl, r5, r8
   8d852:	e038      	b.n	8d8c6 <_realloc_r+0x282>
   8d854:	f1a8 0204 	sub.w	r2, r8, #4
   8d858:	2a24      	cmp	r2, #36	; 0x24
   8d85a:	d828      	bhi.n	8d8ae <_realloc_r+0x26a>
   8d85c:	2a13      	cmp	r2, #19
   8d85e:	d91e      	bls.n	8d89e <_realloc_r+0x25a>
   8d860:	6823      	ldr	r3, [r4, #0]
   8d862:	2a1b      	cmp	r2, #27
   8d864:	6003      	str	r3, [r0, #0]
   8d866:	6861      	ldr	r1, [r4, #4]
   8d868:	6041      	str	r1, [r0, #4]
   8d86a:	d804      	bhi.n	8d876 <_realloc_r+0x232>
   8d86c:	f100 0008 	add.w	r0, r0, #8
   8d870:	f104 0208 	add.w	r2, r4, #8
   8d874:	e014      	b.n	8d8a0 <_realloc_r+0x25c>
   8d876:	68a0      	ldr	r0, [r4, #8]
   8d878:	2a24      	cmp	r2, #36	; 0x24
   8d87a:	60b0      	str	r0, [r6, #8]
   8d87c:	68e3      	ldr	r3, [r4, #12]
   8d87e:	60f3      	str	r3, [r6, #12]
   8d880:	d004      	beq.n	8d88c <_realloc_r+0x248>
   8d882:	f106 0010 	add.w	r0, r6, #16
   8d886:	f104 0210 	add.w	r2, r4, #16
   8d88a:	e009      	b.n	8d8a0 <_realloc_r+0x25c>
   8d88c:	6922      	ldr	r2, [r4, #16]
   8d88e:	f106 0018 	add.w	r0, r6, #24
   8d892:	6132      	str	r2, [r6, #16]
   8d894:	6961      	ldr	r1, [r4, #20]
   8d896:	f104 0218 	add.w	r2, r4, #24
   8d89a:	6171      	str	r1, [r6, #20]
   8d89c:	e000      	b.n	8d8a0 <_realloc_r+0x25c>
   8d89e:	4622      	mov	r2, r4
   8d8a0:	6813      	ldr	r3, [r2, #0]
   8d8a2:	6003      	str	r3, [r0, #0]
   8d8a4:	6851      	ldr	r1, [r2, #4]
   8d8a6:	6041      	str	r1, [r0, #4]
   8d8a8:	6892      	ldr	r2, [r2, #8]
   8d8aa:	6082      	str	r2, [r0, #8]
   8d8ac:	e002      	b.n	8d8b4 <_realloc_r+0x270>
   8d8ae:	4621      	mov	r1, r4
   8d8b0:	f7fd f907 	bl	8aac2 <memmove>
   8d8b4:	4648      	mov	r0, r9
   8d8b6:	4621      	mov	r1, r4
   8d8b8:	f7fe fc8c 	bl	8c1d4 <_free_r>
   8d8bc:	4648      	mov	r0, r9
   8d8be:	f7ff fad0 	bl	8ce62 <__malloc_unlock>
   8d8c2:	e028      	b.n	8d916 <_realloc_r+0x2d2>
   8d8c4:	46c2      	mov	sl, r8
   8d8c6:	465d      	mov	r5, fp
   8d8c8:	ebc7 000a 	rsb	r0, r7, sl
   8d8cc:	280f      	cmp	r0, #15
   8d8ce:	686a      	ldr	r2, [r5, #4]
   8d8d0:	d911      	bls.n	8d8f6 <_realloc_r+0x2b2>
   8d8d2:	f002 0601 	and.w	r6, r2, #1
   8d8d6:	19e9      	adds	r1, r5, r7
   8d8d8:	f040 0301 	orr.w	r3, r0, #1
   8d8dc:	4337      	orrs	r7, r6
   8d8de:	606f      	str	r7, [r5, #4]
   8d8e0:	1808      	adds	r0, r1, r0
   8d8e2:	604b      	str	r3, [r1, #4]
   8d8e4:	6842      	ldr	r2, [r0, #4]
   8d8e6:	3108      	adds	r1, #8
   8d8e8:	f042 0601 	orr.w	r6, r2, #1
   8d8ec:	6046      	str	r6, [r0, #4]
   8d8ee:	4648      	mov	r0, r9
   8d8f0:	f7fe fc70 	bl	8c1d4 <_free_r>
   8d8f4:	e00a      	b.n	8d90c <_realloc_r+0x2c8>
   8d8f6:	f002 0601 	and.w	r6, r2, #1
   8d8fa:	ea4a 0306 	orr.w	r3, sl, r6
   8d8fe:	606b      	str	r3, [r5, #4]
   8d900:	eb05 010a 	add.w	r1, r5, sl
   8d904:	6848      	ldr	r0, [r1, #4]
   8d906:	f040 0201 	orr.w	r2, r0, #1
   8d90a:	604a      	str	r2, [r1, #4]
   8d90c:	4648      	mov	r0, r9
   8d90e:	f7ff faa8 	bl	8ce62 <__malloc_unlock>
   8d912:	f105 0608 	add.w	r6, r5, #8
   8d916:	4630      	mov	r0, r6
   8d918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8d91c:	2007077c 	.word	0x2007077c

0008d920 <__fpclassifyd>:
   8d920:	460b      	mov	r3, r1
   8d922:	b111      	cbz	r1, 8d92a <__fpclassifyd+0xa>
   8d924:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   8d928:	d100      	bne.n	8d92c <__fpclassifyd+0xc>
   8d92a:	b1e0      	cbz	r0, 8d966 <__fpclassifyd+0x46>
   8d92c:	4a12      	ldr	r2, [pc, #72]	; (8d978 <__fpclassifyd+0x58>)
   8d92e:	f5a3 1180 	sub.w	r1, r3, #1048576	; 0x100000
   8d932:	4291      	cmp	r1, r2
   8d934:	d919      	bls.n	8d96a <__fpclassifyd+0x4a>
   8d936:	f103 41ff 	add.w	r1, r3, #2139095040	; 0x7f800000
   8d93a:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
   8d93e:	4291      	cmp	r1, r2
   8d940:	d913      	bls.n	8d96a <__fpclassifyd+0x4a>
   8d942:	4a0e      	ldr	r2, [pc, #56]	; (8d97c <__fpclassifyd+0x5c>)
   8d944:	4293      	cmp	r3, r2
   8d946:	d912      	bls.n	8d96e <__fpclassifyd+0x4e>
   8d948:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   8d94c:	4291      	cmp	r1, r2
   8d94e:	d90e      	bls.n	8d96e <__fpclassifyd+0x4e>
   8d950:	4a0b      	ldr	r2, [pc, #44]	; (8d980 <__fpclassifyd+0x60>)
   8d952:	4293      	cmp	r3, r2
   8d954:	d002      	beq.n	8d95c <__fpclassifyd+0x3c>
   8d956:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
   8d95a:	d10a      	bne.n	8d972 <__fpclassifyd+0x52>
   8d95c:	f1d0 0001 	rsbs	r0, r0, #1
   8d960:	bf38      	it	cc
   8d962:	2000      	movcc	r0, #0
   8d964:	4770      	bx	lr
   8d966:	2002      	movs	r0, #2
   8d968:	4770      	bx	lr
   8d96a:	2004      	movs	r0, #4
   8d96c:	4770      	bx	lr
   8d96e:	2003      	movs	r0, #3
   8d970:	4770      	bx	lr
   8d972:	2000      	movs	r0, #0
   8d974:	4770      	bx	lr
   8d976:	bf00      	nop
   8d978:	7fdfffff 	.word	0x7fdfffff
   8d97c:	000fffff 	.word	0x000fffff
   8d980:	7ff00000 	.word	0x7ff00000

0008d984 <_sbrk_r>:
   8d984:	b538      	push	{r3, r4, r5, lr}
   8d986:	4c06      	ldr	r4, [pc, #24]	; (8d9a0 <_sbrk_r+0x1c>)
   8d988:	2300      	movs	r3, #0
   8d98a:	4605      	mov	r5, r0
   8d98c:	4608      	mov	r0, r1
   8d98e:	6023      	str	r3, [r4, #0]
   8d990:	f7fc fa84 	bl	89e9c <_sbrk>
   8d994:	1c43      	adds	r3, r0, #1
   8d996:	d102      	bne.n	8d99e <_sbrk_r+0x1a>
   8d998:	6821      	ldr	r1, [r4, #0]
   8d99a:	b101      	cbz	r1, 8d99e <_sbrk_r+0x1a>
   8d99c:	6029      	str	r1, [r5, #0]
   8d99e:	bd38      	pop	{r3, r4, r5, pc}
   8d9a0:	20071de4 	.word	0x20071de4

0008d9a4 <nanf>:
   8d9a4:	4800      	ldr	r0, [pc, #0]	; (8d9a8 <nanf+0x4>)
   8d9a6:	4770      	bx	lr
   8d9a8:	7fc00000 	.word	0x7fc00000

0008d9ac <strcmp>:
   8d9ac:	f810 2b01 	ldrb.w	r2, [r0], #1
   8d9b0:	f811 3b01 	ldrb.w	r3, [r1], #1
   8d9b4:	2a01      	cmp	r2, #1
   8d9b6:	bf28      	it	cs
   8d9b8:	429a      	cmpcs	r2, r3
   8d9ba:	d0f7      	beq.n	8d9ac <strcmp>
   8d9bc:	eba2 0003 	sub.w	r0, r2, r3
   8d9c0:	4770      	bx	lr
	...

0008d9c4 <__ssprint_r>:
   8d9c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8d9c8:	4607      	mov	r7, r0
   8d9ca:	6890      	ldr	r0, [r2, #8]
   8d9cc:	460c      	mov	r4, r1
   8d9ce:	4615      	mov	r5, r2
   8d9d0:	f8d2 8000 	ldr.w	r8, [r2]
   8d9d4:	b908      	cbnz	r0, 8d9da <__ssprint_r+0x16>
   8d9d6:	6050      	str	r0, [r2, #4]
   8d9d8:	e06f      	b.n	8daba <__ssprint_r+0xf6>
   8d9da:	f04f 0b00 	mov.w	fp, #0
   8d9de:	465e      	mov	r6, fp
   8d9e0:	b936      	cbnz	r6, 8d9f0 <__ssprint_r+0x2c>
   8d9e2:	f8d8 b000 	ldr.w	fp, [r8]
   8d9e6:	f8d8 6004 	ldr.w	r6, [r8, #4]
   8d9ea:	f108 0808 	add.w	r8, r8, #8
   8d9ee:	e7f7      	b.n	8d9e0 <__ssprint_r+0x1c>
   8d9f0:	68a3      	ldr	r3, [r4, #8]
   8d9f2:	429e      	cmp	r6, r3
   8d9f4:	d34c      	bcc.n	8da90 <__ssprint_r+0xcc>
   8d9f6:	89a2      	ldrh	r2, [r4, #12]
   8d9f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
   8d9fc:	d046      	beq.n	8da8c <__ssprint_r+0xc8>
   8d9fe:	6823      	ldr	r3, [r4, #0]
   8da00:	6960      	ldr	r0, [r4, #20]
   8da02:	6921      	ldr	r1, [r4, #16]
   8da04:	f04f 0a03 	mov.w	sl, #3
   8da08:	ebc1 0903 	rsb	r9, r1, r3
   8da0c:	fb0a f300 	mul.w	r3, sl, r0
   8da10:	2002      	movs	r0, #2
   8da12:	fb93 faf0 	sdiv	sl, r3, r0
   8da16:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   8da1a:	f109 0301 	add.w	r3, r9, #1
   8da1e:	1998      	adds	r0, r3, r6
   8da20:	b213      	sxth	r3, r2
   8da22:	4582      	cmp	sl, r0
   8da24:	bf38      	it	cc
   8da26:	4682      	movcc	sl, r0
   8da28:	4638      	mov	r0, r7
   8da2a:	b183      	cbz	r3, 8da4e <__ssprint_r+0x8a>
   8da2c:	4651      	mov	r1, sl
   8da2e:	f7ff f807 	bl	8ca40 <_malloc_r>
   8da32:	b1a8      	cbz	r0, 8da60 <__ssprint_r+0x9c>
   8da34:	6921      	ldr	r1, [r4, #16]
   8da36:	464a      	mov	r2, r9
   8da38:	9001      	str	r0, [sp, #4]
   8da3a:	f7fd f839 	bl	8aab0 <memcpy>
   8da3e:	89a0      	ldrh	r0, [r4, #12]
   8da40:	f420 6290 	bic.w	r2, r0, #1152	; 0x480
   8da44:	f042 0180 	orr.w	r1, r2, #128	; 0x80
   8da48:	81a1      	strh	r1, [r4, #12]
   8da4a:	9901      	ldr	r1, [sp, #4]
   8da4c:	e014      	b.n	8da78 <__ssprint_r+0xb4>
   8da4e:	4652      	mov	r2, sl
   8da50:	f7ff fdf8 	bl	8d644 <_realloc_r>
   8da54:	4601      	mov	r1, r0
   8da56:	b978      	cbnz	r0, 8da78 <__ssprint_r+0xb4>
   8da58:	4638      	mov	r0, r7
   8da5a:	6921      	ldr	r1, [r4, #16]
   8da5c:	f7fe fbba 	bl	8c1d4 <_free_r>
   8da60:	89a3      	ldrh	r3, [r4, #12]
   8da62:	200c      	movs	r0, #12
   8da64:	2100      	movs	r1, #0
   8da66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   8da6a:	6038      	str	r0, [r7, #0]
   8da6c:	81a2      	strh	r2, [r4, #12]
   8da6e:	f04f 30ff 	mov.w	r0, #4294967295
   8da72:	60a9      	str	r1, [r5, #8]
   8da74:	6069      	str	r1, [r5, #4]
   8da76:	e020      	b.n	8daba <__ssprint_r+0xf6>
   8da78:	eb01 0309 	add.w	r3, r1, r9
   8da7c:	ebc9 000a 	rsb	r0, r9, sl
   8da80:	6023      	str	r3, [r4, #0]
   8da82:	6121      	str	r1, [r4, #16]
   8da84:	f8c4 a014 	str.w	sl, [r4, #20]
   8da88:	4633      	mov	r3, r6
   8da8a:	60a0      	str	r0, [r4, #8]
   8da8c:	429e      	cmp	r6, r3
   8da8e:	d200      	bcs.n	8da92 <__ssprint_r+0xce>
   8da90:	4633      	mov	r3, r6
   8da92:	461a      	mov	r2, r3
   8da94:	4659      	mov	r1, fp
   8da96:	6820      	ldr	r0, [r4, #0]
   8da98:	9301      	str	r3, [sp, #4]
   8da9a:	f7fd f812 	bl	8aac2 <memmove>
   8da9e:	68a2      	ldr	r2, [r4, #8]
   8daa0:	9901      	ldr	r1, [sp, #4]
   8daa2:	6823      	ldr	r3, [r4, #0]
   8daa4:	1a50      	subs	r0, r2, r1
   8daa6:	185a      	adds	r2, r3, r1
   8daa8:	68a9      	ldr	r1, [r5, #8]
   8daaa:	60a0      	str	r0, [r4, #8]
   8daac:	1b8e      	subs	r6, r1, r6
   8daae:	6022      	str	r2, [r4, #0]
   8dab0:	60ae      	str	r6, [r5, #8]
   8dab2:	2e00      	cmp	r6, #0
   8dab4:	d195      	bne.n	8d9e2 <__ssprint_r+0x1e>
   8dab6:	606e      	str	r6, [r5, #4]
   8dab8:	4630      	mov	r0, r6
   8daba:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008dabe <_svfiprintf_r>:
   8dabe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8dac2:	461e      	mov	r6, r3
   8dac4:	898b      	ldrh	r3, [r1, #12]
   8dac6:	4689      	mov	r9, r1
   8dac8:	f003 0180 	and.w	r1, r3, #128	; 0x80
   8dacc:	4614      	mov	r4, r2
   8dace:	b20a      	sxth	r2, r1
   8dad0:	b0a9      	sub	sp, #164	; 0xa4
   8dad2:	4683      	mov	fp, r0
   8dad4:	b19a      	cbz	r2, 8dafe <_svfiprintf_r+0x40>
   8dad6:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8dada:	b983      	cbnz	r3, 8dafe <_svfiprintf_r+0x40>
   8dadc:	2140      	movs	r1, #64	; 0x40
   8dade:	f7fe ffaf 	bl	8ca40 <_malloc_r>
   8dae2:	f8c9 0000 	str.w	r0, [r9]
   8dae6:	f8c9 0010 	str.w	r0, [r9, #16]
   8daea:	b928      	cbnz	r0, 8daf8 <_svfiprintf_r+0x3a>
   8daec:	220c      	movs	r2, #12
   8daee:	f8cb 2000 	str.w	r2, [fp]
   8daf2:	f04f 30ff 	mov.w	r0, #4294967295
   8daf6:	e3db      	b.n	8e2b0 <_svfiprintf_r+0x7f2>
   8daf8:	2040      	movs	r0, #64	; 0x40
   8dafa:	f8c9 0014 	str.w	r0, [r9, #20]
   8dafe:	2100      	movs	r1, #0
   8db00:	ad18      	add	r5, sp, #96	; 0x60
   8db02:	950b      	str	r5, [sp, #44]	; 0x2c
   8db04:	910d      	str	r1, [sp, #52]	; 0x34
   8db06:	910c      	str	r1, [sp, #48]	; 0x30
   8db08:	9401      	str	r4, [sp, #4]
   8db0a:	9105      	str	r1, [sp, #20]
   8db0c:	9104      	str	r1, [sp, #16]
   8db0e:	46a8      	mov	r8, r5
   8db10:	9b01      	ldr	r3, [sp, #4]
   8db12:	461c      	mov	r4, r3
   8db14:	f813 2b01 	ldrb.w	r2, [r3], #1
   8db18:	b91a      	cbnz	r2, 8db22 <_svfiprintf_r+0x64>
   8db1a:	9801      	ldr	r0, [sp, #4]
   8db1c:	1a25      	subs	r5, r4, r0
   8db1e:	d103      	bne.n	8db28 <_svfiprintf_r+0x6a>
   8db20:	e01d      	b.n	8db5e <_svfiprintf_r+0xa0>
   8db22:	2a25      	cmp	r2, #37	; 0x25
   8db24:	d1f5      	bne.n	8db12 <_svfiprintf_r+0x54>
   8db26:	e7f8      	b.n	8db1a <_svfiprintf_r+0x5c>
   8db28:	9a01      	ldr	r2, [sp, #4]
   8db2a:	990d      	ldr	r1, [sp, #52]	; 0x34
   8db2c:	e888 0024 	stmia.w	r8, {r2, r5}
   8db30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8db32:	194b      	adds	r3, r1, r5
   8db34:	1c50      	adds	r0, r2, #1
   8db36:	2807      	cmp	r0, #7
   8db38:	930d      	str	r3, [sp, #52]	; 0x34
   8db3a:	900c      	str	r0, [sp, #48]	; 0x30
   8db3c:	dc02      	bgt.n	8db44 <_svfiprintf_r+0x86>
   8db3e:	f108 0808 	add.w	r8, r8, #8
   8db42:	e009      	b.n	8db58 <_svfiprintf_r+0x9a>
   8db44:	4658      	mov	r0, fp
   8db46:	4649      	mov	r1, r9
   8db48:	aa0b      	add	r2, sp, #44	; 0x2c
   8db4a:	f7ff ff3b 	bl	8d9c4 <__ssprint_r>
   8db4e:	2800      	cmp	r0, #0
   8db50:	f040 83a3 	bne.w	8e29a <_svfiprintf_r+0x7dc>
   8db54:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8db58:	9904      	ldr	r1, [sp, #16]
   8db5a:	194b      	adds	r3, r1, r5
   8db5c:	9304      	str	r3, [sp, #16]
   8db5e:	7822      	ldrb	r2, [r4, #0]
   8db60:	2a00      	cmp	r2, #0
   8db62:	f000 8393 	beq.w	8e28c <_svfiprintf_r+0x7ce>
   8db66:	2200      	movs	r2, #0
   8db68:	3401      	adds	r4, #1
   8db6a:	9401      	str	r4, [sp, #4]
   8db6c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8db70:	f04f 3cff 	mov.w	ip, #4294967295
   8db74:	9203      	str	r2, [sp, #12]
   8db76:	4617      	mov	r7, r2
   8db78:	9801      	ldr	r0, [sp, #4]
   8db7a:	f810 3b01 	ldrb.w	r3, [r0], #1
   8db7e:	9001      	str	r0, [sp, #4]
   8db80:	2b63      	cmp	r3, #99	; 0x63
   8db82:	f000 80b3 	beq.w	8dcec <_svfiprintf_r+0x22e>
   8db86:	dc33      	bgt.n	8dbf0 <_svfiprintf_r+0x132>
   8db88:	2b39      	cmp	r3, #57	; 0x39
   8db8a:	dc1a      	bgt.n	8dbc2 <_svfiprintf_r+0x104>
   8db8c:	2b31      	cmp	r3, #49	; 0x31
   8db8e:	f280 8091 	bge.w	8dcb4 <_svfiprintf_r+0x1f6>
   8db92:	2b2b      	cmp	r3, #43	; 0x2b
   8db94:	d101      	bne.n	8db9a <_svfiprintf_r+0xdc>
   8db96:	461a      	mov	r2, r3
   8db98:	e7ee      	b.n	8db78 <_svfiprintf_r+0xba>
   8db9a:	dc0a      	bgt.n	8dbb2 <_svfiprintf_r+0xf4>
   8db9c:	2b23      	cmp	r3, #35	; 0x23
   8db9e:	d055      	beq.n	8dc4c <_svfiprintf_r+0x18e>
   8dba0:	2b2a      	cmp	r3, #42	; 0x2a
   8dba2:	d056      	beq.n	8dc52 <_svfiprintf_r+0x194>
   8dba4:	2b20      	cmp	r3, #32
   8dba6:	f040 81f6 	bne.w	8df96 <_svfiprintf_r+0x4d8>
   8dbaa:	2a00      	cmp	r2, #0
   8dbac:	bf08      	it	eq
   8dbae:	2220      	moveq	r2, #32
   8dbb0:	e7e2      	b.n	8db78 <_svfiprintf_r+0xba>
   8dbb2:	2b2e      	cmp	r3, #46	; 0x2e
   8dbb4:	d058      	beq.n	8dc68 <_svfiprintf_r+0x1aa>
   8dbb6:	2b30      	cmp	r3, #48	; 0x30
   8dbb8:	d079      	beq.n	8dcae <_svfiprintf_r+0x1f0>
   8dbba:	2b2d      	cmp	r3, #45	; 0x2d
   8dbbc:	f040 81eb 	bne.w	8df96 <_svfiprintf_r+0x4d8>
   8dbc0:	e04f      	b.n	8dc62 <_svfiprintf_r+0x1a4>
   8dbc2:	2b4f      	cmp	r3, #79	; 0x4f
   8dbc4:	f000 80de 	beq.w	8dd84 <_svfiprintf_r+0x2c6>
   8dbc8:	dc07      	bgt.n	8dbda <_svfiprintf_r+0x11c>
   8dbca:	2b44      	cmp	r3, #68	; 0x44
   8dbcc:	f040 81e3 	bne.w	8df96 <_svfiprintf_r+0x4d8>
   8dbd0:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8dbd4:	f047 0710 	orr.w	r7, r7, #16
   8dbd8:	e090      	b.n	8dcfc <_svfiprintf_r+0x23e>
   8dbda:	2b55      	cmp	r3, #85	; 0x55
   8dbdc:	f000 811f 	beq.w	8de1e <_svfiprintf_r+0x360>
   8dbe0:	2b58      	cmp	r3, #88	; 0x58
   8dbe2:	f040 81d8 	bne.w	8df96 <_svfiprintf_r+0x4d8>
   8dbe6:	4daf      	ldr	r5, [pc, #700]	; (8dea4 <_svfiprintf_r+0x3e6>)
   8dbe8:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8dbec:	9505      	str	r5, [sp, #20]
   8dbee:	e130      	b.n	8de52 <_svfiprintf_r+0x394>
   8dbf0:	2b6f      	cmp	r3, #111	; 0x6f
   8dbf2:	f000 80c9 	beq.w	8dd88 <_svfiprintf_r+0x2ca>
   8dbf6:	dc10      	bgt.n	8dc1a <_svfiprintf_r+0x15c>
   8dbf8:	2b69      	cmp	r3, #105	; 0x69
   8dbfa:	d024      	beq.n	8dc46 <_svfiprintf_r+0x188>
   8dbfc:	dc07      	bgt.n	8dc0e <_svfiprintf_r+0x150>
   8dbfe:	2b64      	cmp	r3, #100	; 0x64
   8dc00:	d021      	beq.n	8dc46 <_svfiprintf_r+0x188>
   8dc02:	2b68      	cmp	r3, #104	; 0x68
   8dc04:	f040 81c7 	bne.w	8df96 <_svfiprintf_r+0x4d8>
   8dc08:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   8dc0c:	e7b4      	b.n	8db78 <_svfiprintf_r+0xba>
   8dc0e:	2b6c      	cmp	r3, #108	; 0x6c
   8dc10:	d05f      	beq.n	8dcd2 <_svfiprintf_r+0x214>
   8dc12:	2b6e      	cmp	r3, #110	; 0x6e
   8dc14:	f040 81bf 	bne.w	8df96 <_svfiprintf_r+0x4d8>
   8dc18:	e096      	b.n	8dd48 <_svfiprintf_r+0x28a>
   8dc1a:	2b73      	cmp	r3, #115	; 0x73
   8dc1c:	f000 80df 	beq.w	8ddde <_svfiprintf_r+0x320>
   8dc20:	dc06      	bgt.n	8dc30 <_svfiprintf_r+0x172>
   8dc22:	2b70      	cmp	r3, #112	; 0x70
   8dc24:	f000 80cd 	beq.w	8ddc2 <_svfiprintf_r+0x304>
   8dc28:	2b71      	cmp	r3, #113	; 0x71
   8dc2a:	f040 81b4 	bne.w	8df96 <_svfiprintf_r+0x4d8>
   8dc2e:	e05a      	b.n	8dce6 <_svfiprintf_r+0x228>
   8dc30:	2b75      	cmp	r3, #117	; 0x75
   8dc32:	f000 80f6 	beq.w	8de22 <_svfiprintf_r+0x364>
   8dc36:	2b78      	cmp	r3, #120	; 0x78
   8dc38:	f040 81ad 	bne.w	8df96 <_svfiprintf_r+0x4d8>
   8dc3c:	4d9a      	ldr	r5, [pc, #616]	; (8dea8 <_svfiprintf_r+0x3ea>)
   8dc3e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8dc42:	9505      	str	r5, [sp, #20]
   8dc44:	e105      	b.n	8de52 <_svfiprintf_r+0x394>
   8dc46:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8dc4a:	e057      	b.n	8dcfc <_svfiprintf_r+0x23e>
   8dc4c:	f047 0701 	orr.w	r7, r7, #1
   8dc50:	e792      	b.n	8db78 <_svfiprintf_r+0xba>
   8dc52:	1d33      	adds	r3, r6, #4
   8dc54:	6836      	ldr	r6, [r6, #0]
   8dc56:	2e00      	cmp	r6, #0
   8dc58:	9603      	str	r6, [sp, #12]
   8dc5a:	da15      	bge.n	8dc88 <_svfiprintf_r+0x1ca>
   8dc5c:	4270      	negs	r0, r6
   8dc5e:	9003      	str	r0, [sp, #12]
   8dc60:	461e      	mov	r6, r3
   8dc62:	f047 0704 	orr.w	r7, r7, #4
   8dc66:	e787      	b.n	8db78 <_svfiprintf_r+0xba>
   8dc68:	9901      	ldr	r1, [sp, #4]
   8dc6a:	f811 3b01 	ldrb.w	r3, [r1], #1
   8dc6e:	2b2a      	cmp	r3, #42	; 0x2a
   8dc70:	9101      	str	r1, [sp, #4]
   8dc72:	d10b      	bne.n	8dc8c <_svfiprintf_r+0x1ce>
   8dc74:	f8d6 c000 	ldr.w	ip, [r6]
   8dc78:	1d33      	adds	r3, r6, #4
   8dc7a:	f1bc 0f00 	cmp.w	ip, #0
   8dc7e:	da03      	bge.n	8dc88 <_svfiprintf_r+0x1ca>
   8dc80:	461e      	mov	r6, r3
   8dc82:	f04f 3cff 	mov.w	ip, #4294967295
   8dc86:	e777      	b.n	8db78 <_svfiprintf_r+0xba>
   8dc88:	461e      	mov	r6, r3
   8dc8a:	e775      	b.n	8db78 <_svfiprintf_r+0xba>
   8dc8c:	f04f 0c00 	mov.w	ip, #0
   8dc90:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8dc94:	2809      	cmp	r0, #9
   8dc96:	d807      	bhi.n	8dca8 <_svfiprintf_r+0x1ea>
   8dc98:	9901      	ldr	r1, [sp, #4]
   8dc9a:	230a      	movs	r3, #10
   8dc9c:	fb03 0c0c 	mla	ip, r3, ip, r0
   8dca0:	f811 3b01 	ldrb.w	r3, [r1], #1
   8dca4:	9101      	str	r1, [sp, #4]
   8dca6:	e7f3      	b.n	8dc90 <_svfiprintf_r+0x1d2>
   8dca8:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   8dcac:	e768      	b.n	8db80 <_svfiprintf_r+0xc2>
   8dcae:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8dcb2:	e761      	b.n	8db78 <_svfiprintf_r+0xba>
   8dcb4:	9801      	ldr	r0, [sp, #4]
   8dcb6:	2100      	movs	r1, #0
   8dcb8:	3b30      	subs	r3, #48	; 0x30
   8dcba:	240a      	movs	r4, #10
   8dcbc:	fb04 3101 	mla	r1, r4, r1, r3
   8dcc0:	f810 3b01 	ldrb.w	r3, [r0], #1
   8dcc4:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   8dcc8:	2c09      	cmp	r4, #9
   8dcca:	9001      	str	r0, [sp, #4]
   8dccc:	d9f4      	bls.n	8dcb8 <_svfiprintf_r+0x1fa>
   8dcce:	9103      	str	r1, [sp, #12]
   8dcd0:	e756      	b.n	8db80 <_svfiprintf_r+0xc2>
   8dcd2:	9901      	ldr	r1, [sp, #4]
   8dcd4:	780b      	ldrb	r3, [r1, #0]
   8dcd6:	2b6c      	cmp	r3, #108	; 0x6c
   8dcd8:	d102      	bne.n	8dce0 <_svfiprintf_r+0x222>
   8dcda:	1c48      	adds	r0, r1, #1
   8dcdc:	9001      	str	r0, [sp, #4]
   8dcde:	e002      	b.n	8dce6 <_svfiprintf_r+0x228>
   8dce0:	f047 0710 	orr.w	r7, r7, #16
   8dce4:	e748      	b.n	8db78 <_svfiprintf_r+0xba>
   8dce6:	f047 0720 	orr.w	r7, r7, #32
   8dcea:	e745      	b.n	8db78 <_svfiprintf_r+0xba>
   8dcec:	6832      	ldr	r2, [r6, #0]
   8dcee:	2500      	movs	r5, #0
   8dcf0:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   8dcf4:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8dcf8:	3604      	adds	r6, #4
   8dcfa:	e156      	b.n	8dfaa <_svfiprintf_r+0x4ec>
   8dcfc:	06ba      	lsls	r2, r7, #26
   8dcfe:	d507      	bpl.n	8dd10 <_svfiprintf_r+0x252>
   8dd00:	3607      	adds	r6, #7
   8dd02:	f026 0507 	bic.w	r5, r6, #7
   8dd06:	f105 0608 	add.w	r6, r5, #8
   8dd0a:	e9d5 4500 	ldrd	r4, r5, [r5]
   8dd0e:	e00f      	b.n	8dd30 <_svfiprintf_r+0x272>
   8dd10:	f017 0f10 	tst.w	r7, #16
   8dd14:	f106 0104 	add.w	r1, r6, #4
   8dd18:	d001      	beq.n	8dd1e <_svfiprintf_r+0x260>
   8dd1a:	6832      	ldr	r2, [r6, #0]
   8dd1c:	e005      	b.n	8dd2a <_svfiprintf_r+0x26c>
   8dd1e:	f017 0f40 	tst.w	r7, #64	; 0x40
   8dd22:	6832      	ldr	r2, [r6, #0]
   8dd24:	d001      	beq.n	8dd2a <_svfiprintf_r+0x26c>
   8dd26:	b214      	sxth	r4, r2
   8dd28:	e000      	b.n	8dd2c <_svfiprintf_r+0x26e>
   8dd2a:	4614      	mov	r4, r2
   8dd2c:	17e5      	asrs	r5, r4, #31
   8dd2e:	460e      	mov	r6, r1
   8dd30:	2c00      	cmp	r4, #0
   8dd32:	f175 0200 	sbcs.w	r2, r5, #0
   8dd36:	f280 80b9 	bge.w	8deac <_svfiprintf_r+0x3ee>
   8dd3a:	232d      	movs	r3, #45	; 0x2d
   8dd3c:	4264      	negs	r4, r4
   8dd3e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8dd42:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   8dd46:	e0b1      	b.n	8deac <_svfiprintf_r+0x3ee>
   8dd48:	f017 0f20 	tst.w	r7, #32
   8dd4c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8dd50:	f106 0204 	add.w	r2, r6, #4
   8dd54:	d005      	beq.n	8dd62 <_svfiprintf_r+0x2a4>
   8dd56:	9c04      	ldr	r4, [sp, #16]
   8dd58:	6835      	ldr	r5, [r6, #0]
   8dd5a:	17e0      	asrs	r0, r4, #31
   8dd5c:	602c      	str	r4, [r5, #0]
   8dd5e:	6068      	str	r0, [r5, #4]
   8dd60:	e004      	b.n	8dd6c <_svfiprintf_r+0x2ae>
   8dd62:	06fb      	lsls	r3, r7, #27
   8dd64:	d504      	bpl.n	8dd70 <_svfiprintf_r+0x2b2>
   8dd66:	6833      	ldr	r3, [r6, #0]
   8dd68:	9904      	ldr	r1, [sp, #16]
   8dd6a:	6019      	str	r1, [r3, #0]
   8dd6c:	4616      	mov	r6, r2
   8dd6e:	e6cf      	b.n	8db10 <_svfiprintf_r+0x52>
   8dd70:	6830      	ldr	r0, [r6, #0]
   8dd72:	9c04      	ldr	r4, [sp, #16]
   8dd74:	f017 0f40 	tst.w	r7, #64	; 0x40
   8dd78:	f106 0604 	add.w	r6, r6, #4
   8dd7c:	bf14      	ite	ne
   8dd7e:	8004      	strhne	r4, [r0, #0]
   8dd80:	6004      	streq	r4, [r0, #0]
   8dd82:	e6c5      	b.n	8db10 <_svfiprintf_r+0x52>
   8dd84:	f047 0710 	orr.w	r7, r7, #16
   8dd88:	f017 0020 	ands.w	r0, r7, #32
   8dd8c:	d008      	beq.n	8dda0 <_svfiprintf_r+0x2e2>
   8dd8e:	1df3      	adds	r3, r6, #7
   8dd90:	f023 0507 	bic.w	r5, r3, #7
   8dd94:	f105 0608 	add.w	r6, r5, #8
   8dd98:	e9d5 4500 	ldrd	r4, r5, [r5]
   8dd9c:	2000      	movs	r0, #0
   8dd9e:	e07c      	b.n	8de9a <_svfiprintf_r+0x3dc>
   8dda0:	f017 0110 	ands.w	r1, r7, #16
   8dda4:	f106 0204 	add.w	r2, r6, #4
   8dda8:	d106      	bne.n	8ddb8 <_svfiprintf_r+0x2fa>
   8ddaa:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   8ddae:	d003      	beq.n	8ddb8 <_svfiprintf_r+0x2fa>
   8ddb0:	8834      	ldrh	r4, [r6, #0]
   8ddb2:	2500      	movs	r5, #0
   8ddb4:	4616      	mov	r6, r2
   8ddb6:	e7f1      	b.n	8dd9c <_svfiprintf_r+0x2de>
   8ddb8:	6836      	ldr	r6, [r6, #0]
   8ddba:	2500      	movs	r5, #0
   8ddbc:	4634      	mov	r4, r6
   8ddbe:	4616      	mov	r6, r2
   8ddc0:	e06b      	b.n	8de9a <_svfiprintf_r+0x3dc>
   8ddc2:	4b39      	ldr	r3, [pc, #228]	; (8dea8 <_svfiprintf_r+0x3ea>)
   8ddc4:	2130      	movs	r1, #48	; 0x30
   8ddc6:	2278      	movs	r2, #120	; 0x78
   8ddc8:	6834      	ldr	r4, [r6, #0]
   8ddca:	2500      	movs	r5, #0
   8ddcc:	f047 0702 	orr.w	r7, r7, #2
   8ddd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   8ddd4:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   8ddd8:	3604      	adds	r6, #4
   8ddda:	9305      	str	r3, [sp, #20]
   8dddc:	e05c      	b.n	8de98 <_svfiprintf_r+0x3da>
   8ddde:	4631      	mov	r1, r6
   8dde0:	2500      	movs	r5, #0
   8dde2:	f8d1 a000 	ldr.w	sl, [r1]
   8dde6:	3604      	adds	r6, #4
   8dde8:	45ac      	cmp	ip, r5
   8ddea:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8ddee:	4650      	mov	r0, sl
   8ddf0:	db11      	blt.n	8de16 <_svfiprintf_r+0x358>
   8ddf2:	4662      	mov	r2, ip
   8ddf4:	4629      	mov	r1, r5
   8ddf6:	f8cd c000 	str.w	ip, [sp]
   8ddfa:	f7ff f823 	bl	8ce44 <memchr>
   8ddfe:	f8dd c000 	ldr.w	ip, [sp]
   8de02:	2800      	cmp	r0, #0
   8de04:	f000 80d5 	beq.w	8dfb2 <_svfiprintf_r+0x4f4>
   8de08:	ebca 0400 	rsb	r4, sl, r0
   8de0c:	4564      	cmp	r4, ip
   8de0e:	f340 80d2 	ble.w	8dfb6 <_svfiprintf_r+0x4f8>
   8de12:	4664      	mov	r4, ip
   8de14:	e0cf      	b.n	8dfb6 <_svfiprintf_r+0x4f8>
   8de16:	f7fc fed9 	bl	8abcc <strlen>
   8de1a:	4604      	mov	r4, r0
   8de1c:	e0cb      	b.n	8dfb6 <_svfiprintf_r+0x4f8>
   8de1e:	f047 0710 	orr.w	r7, r7, #16
   8de22:	06bd      	lsls	r5, r7, #26
   8de24:	d506      	bpl.n	8de34 <_svfiprintf_r+0x376>
   8de26:	1df0      	adds	r0, r6, #7
   8de28:	f020 0407 	bic.w	r4, r0, #7
   8de2c:	f104 0608 	add.w	r6, r4, #8
   8de30:	cc30      	ldmia	r4, {r4, r5}
   8de32:	e00c      	b.n	8de4e <_svfiprintf_r+0x390>
   8de34:	f017 0f10 	tst.w	r7, #16
   8de38:	f106 0304 	add.w	r3, r6, #4
   8de3c:	d103      	bne.n	8de46 <_svfiprintf_r+0x388>
   8de3e:	067c      	lsls	r4, r7, #25
   8de40:	d501      	bpl.n	8de46 <_svfiprintf_r+0x388>
   8de42:	8834      	ldrh	r4, [r6, #0]
   8de44:	e001      	b.n	8de4a <_svfiprintf_r+0x38c>
   8de46:	6835      	ldr	r5, [r6, #0]
   8de48:	462c      	mov	r4, r5
   8de4a:	2500      	movs	r5, #0
   8de4c:	461e      	mov	r6, r3
   8de4e:	2001      	movs	r0, #1
   8de50:	e023      	b.n	8de9a <_svfiprintf_r+0x3dc>
   8de52:	06b8      	lsls	r0, r7, #26
   8de54:	d507      	bpl.n	8de66 <_svfiprintf_r+0x3a8>
   8de56:	1df4      	adds	r4, r6, #7
   8de58:	f024 0107 	bic.w	r1, r4, #7
   8de5c:	f101 0608 	add.w	r6, r1, #8
   8de60:	e9d1 4500 	ldrd	r4, r5, [r1]
   8de64:	e00c      	b.n	8de80 <_svfiprintf_r+0x3c2>
   8de66:	f017 0f10 	tst.w	r7, #16
   8de6a:	f106 0004 	add.w	r0, r6, #4
   8de6e:	d103      	bne.n	8de78 <_svfiprintf_r+0x3ba>
   8de70:	0679      	lsls	r1, r7, #25
   8de72:	d501      	bpl.n	8de78 <_svfiprintf_r+0x3ba>
   8de74:	8834      	ldrh	r4, [r6, #0]
   8de76:	e001      	b.n	8de7c <_svfiprintf_r+0x3be>
   8de78:	6836      	ldr	r6, [r6, #0]
   8de7a:	4634      	mov	r4, r6
   8de7c:	2500      	movs	r5, #0
   8de7e:	4606      	mov	r6, r0
   8de80:	07fa      	lsls	r2, r7, #31
   8de82:	d509      	bpl.n	8de98 <_svfiprintf_r+0x3da>
   8de84:	ea54 0205 	orrs.w	r2, r4, r5
   8de88:	d006      	beq.n	8de98 <_svfiprintf_r+0x3da>
   8de8a:	2230      	movs	r2, #48	; 0x30
   8de8c:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   8de90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   8de94:	f047 0702 	orr.w	r7, r7, #2
   8de98:	2002      	movs	r0, #2
   8de9a:	2100      	movs	r1, #0
   8de9c:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   8dea0:	e005      	b.n	8deae <_svfiprintf_r+0x3f0>
   8dea2:	bf00      	nop
   8dea4:	0008f60c 	.word	0x0008f60c
   8dea8:	0008f61d 	.word	0x0008f61d
   8deac:	2001      	movs	r0, #1
   8deae:	f1bc 0f00 	cmp.w	ip, #0
   8deb2:	bfa8      	it	ge
   8deb4:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   8deb8:	ea54 0105 	orrs.w	r1, r4, r5
   8debc:	d102      	bne.n	8dec4 <_svfiprintf_r+0x406>
   8debe:	f1bc 0f00 	cmp.w	ip, #0
   8dec2:	d058      	beq.n	8df76 <_svfiprintf_r+0x4b8>
   8dec4:	2801      	cmp	r0, #1
   8dec6:	d01d      	beq.n	8df04 <_svfiprintf_r+0x446>
   8dec8:	2802      	cmp	r0, #2
   8deca:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8dece:	d041      	beq.n	8df54 <_svfiprintf_r+0x496>
   8ded0:	f004 0207 	and.w	r2, r4, #7
   8ded4:	08e4      	lsrs	r4, r4, #3
   8ded6:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   8deda:	08e9      	lsrs	r1, r5, #3
   8dedc:	4604      	mov	r4, r0
   8dede:	460d      	mov	r5, r1
   8dee0:	3230      	adds	r2, #48	; 0x30
   8dee2:	ea54 0105 	orrs.w	r1, r4, r5
   8dee6:	469a      	mov	sl, r3
   8dee8:	701a      	strb	r2, [r3, #0]
   8deea:	f103 33ff 	add.w	r3, r3, #4294967295
   8deee:	d1ef      	bne.n	8ded0 <_svfiprintf_r+0x412>
   8def0:	07f8      	lsls	r0, r7, #31
   8def2:	4655      	mov	r5, sl
   8def4:	d54a      	bpl.n	8df8c <_svfiprintf_r+0x4ce>
   8def6:	2a30      	cmp	r2, #48	; 0x30
   8def8:	d048      	beq.n	8df8c <_svfiprintf_r+0x4ce>
   8defa:	2230      	movs	r2, #48	; 0x30
   8defc:	469a      	mov	sl, r3
   8defe:	f805 2c01 	strb.w	r2, [r5, #-1]
   8df02:	e043      	b.n	8df8c <_svfiprintf_r+0x4ce>
   8df04:	2d00      	cmp	r5, #0
   8df06:	bf08      	it	eq
   8df08:	2c0a      	cmpeq	r4, #10
   8df0a:	d203      	bcs.n	8df14 <_svfiprintf_r+0x456>
   8df0c:	3430      	adds	r4, #48	; 0x30
   8df0e:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   8df12:	e036      	b.n	8df82 <_svfiprintf_r+0x4c4>
   8df14:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8df18:	9302      	str	r3, [sp, #8]
   8df1a:	4620      	mov	r0, r4
   8df1c:	4629      	mov	r1, r5
   8df1e:	220a      	movs	r2, #10
   8df20:	2300      	movs	r3, #0
   8df22:	f8cd c000 	str.w	ip, [sp]
   8df26:	f000 fa6d 	bl	8e404 <__aeabi_uldivmod>
   8df2a:	9802      	ldr	r0, [sp, #8]
   8df2c:	3230      	adds	r2, #48	; 0x30
   8df2e:	f800 2901 	strb.w	r2, [r0], #-1
   8df32:	4629      	mov	r1, r5
   8df34:	220a      	movs	r2, #10
   8df36:	2300      	movs	r3, #0
   8df38:	f8dd a008 	ldr.w	sl, [sp, #8]
   8df3c:	9002      	str	r0, [sp, #8]
   8df3e:	4620      	mov	r0, r4
   8df40:	f000 fa60 	bl	8e404 <__aeabi_uldivmod>
   8df44:	4604      	mov	r4, r0
   8df46:	460d      	mov	r5, r1
   8df48:	ea54 0105 	orrs.w	r1, r4, r5
   8df4c:	f8dd c000 	ldr.w	ip, [sp]
   8df50:	d1e3      	bne.n	8df1a <_svfiprintf_r+0x45c>
   8df52:	e01b      	b.n	8df8c <_svfiprintf_r+0x4ce>
   8df54:	9905      	ldr	r1, [sp, #20]
   8df56:	f004 000f 	and.w	r0, r4, #15
   8df5a:	0924      	lsrs	r4, r4, #4
   8df5c:	5c0a      	ldrb	r2, [r1, r0]
   8df5e:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   8df62:	0929      	lsrs	r1, r5, #4
   8df64:	4604      	mov	r4, r0
   8df66:	460d      	mov	r5, r1
   8df68:	469a      	mov	sl, r3
   8df6a:	f803 2901 	strb.w	r2, [r3], #-1
   8df6e:	ea54 0205 	orrs.w	r2, r4, r5
   8df72:	d1ef      	bne.n	8df54 <_svfiprintf_r+0x496>
   8df74:	e00a      	b.n	8df8c <_svfiprintf_r+0x4ce>
   8df76:	b938      	cbnz	r0, 8df88 <_svfiprintf_r+0x4ca>
   8df78:	07f9      	lsls	r1, r7, #31
   8df7a:	d505      	bpl.n	8df88 <_svfiprintf_r+0x4ca>
   8df7c:	2030      	movs	r0, #48	; 0x30
   8df7e:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   8df82:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   8df86:	e001      	b.n	8df8c <_svfiprintf_r+0x4ce>
   8df88:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   8df8c:	ad18      	add	r5, sp, #96	; 0x60
   8df8e:	ebca 0405 	rsb	r4, sl, r5
   8df92:	4665      	mov	r5, ip
   8df94:	e00f      	b.n	8dfb6 <_svfiprintf_r+0x4f8>
   8df96:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8df9a:	2b00      	cmp	r3, #0
   8df9c:	f000 8176 	beq.w	8e28c <_svfiprintf_r+0x7ce>
   8dfa0:	2500      	movs	r5, #0
   8dfa2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   8dfa6:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8dfaa:	2401      	movs	r4, #1
   8dfac:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   8dfb0:	e001      	b.n	8dfb6 <_svfiprintf_r+0x4f8>
   8dfb2:	4664      	mov	r4, ip
   8dfb4:	4605      	mov	r5, r0
   8dfb6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8dfba:	42ac      	cmp	r4, r5
   8dfbc:	bfac      	ite	ge
   8dfbe:	4621      	movge	r1, r4
   8dfc0:	4629      	movlt	r1, r5
   8dfc2:	9102      	str	r1, [sp, #8]
   8dfc4:	b113      	cbz	r3, 8dfcc <_svfiprintf_r+0x50e>
   8dfc6:	9802      	ldr	r0, [sp, #8]
   8dfc8:	1c42      	adds	r2, r0, #1
   8dfca:	9202      	str	r2, [sp, #8]
   8dfcc:	f017 0102 	ands.w	r1, r7, #2
   8dfd0:	9106      	str	r1, [sp, #24]
   8dfd2:	d002      	beq.n	8dfda <_svfiprintf_r+0x51c>
   8dfd4:	9b02      	ldr	r3, [sp, #8]
   8dfd6:	1c98      	adds	r0, r3, #2
   8dfd8:	9002      	str	r0, [sp, #8]
   8dfda:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   8dfde:	9207      	str	r2, [sp, #28]
   8dfe0:	d13c      	bne.n	8e05c <_svfiprintf_r+0x59e>
   8dfe2:	9903      	ldr	r1, [sp, #12]
   8dfe4:	9b02      	ldr	r3, [sp, #8]
   8dfe6:	1acb      	subs	r3, r1, r3
   8dfe8:	2b00      	cmp	r3, #0
   8dfea:	dd37      	ble.n	8e05c <_svfiprintf_r+0x59e>
   8dfec:	48a5      	ldr	r0, [pc, #660]	; (8e284 <_svfiprintf_r+0x7c6>)
   8dfee:	2b10      	cmp	r3, #16
   8dff0:	f8c8 0000 	str.w	r0, [r8]
   8dff4:	dd1b      	ble.n	8e02e <_svfiprintf_r+0x570>
   8dff6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8dff8:	2110      	movs	r1, #16
   8dffa:	980d      	ldr	r0, [sp, #52]	; 0x34
   8dffc:	f8c8 1004 	str.w	r1, [r8, #4]
   8e000:	1c51      	adds	r1, r2, #1
   8e002:	3010      	adds	r0, #16
   8e004:	2907      	cmp	r1, #7
   8e006:	900d      	str	r0, [sp, #52]	; 0x34
   8e008:	910c      	str	r1, [sp, #48]	; 0x30
   8e00a:	dc02      	bgt.n	8e012 <_svfiprintf_r+0x554>
   8e00c:	f108 0808 	add.w	r8, r8, #8
   8e010:	e00b      	b.n	8e02a <_svfiprintf_r+0x56c>
   8e012:	4658      	mov	r0, fp
   8e014:	4649      	mov	r1, r9
   8e016:	aa0b      	add	r2, sp, #44	; 0x2c
   8e018:	9300      	str	r3, [sp, #0]
   8e01a:	f7ff fcd3 	bl	8d9c4 <__ssprint_r>
   8e01e:	9b00      	ldr	r3, [sp, #0]
   8e020:	2800      	cmp	r0, #0
   8e022:	f040 813a 	bne.w	8e29a <_svfiprintf_r+0x7dc>
   8e026:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8e02a:	3b10      	subs	r3, #16
   8e02c:	e7de      	b.n	8dfec <_svfiprintf_r+0x52e>
   8e02e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8e030:	f8c8 3004 	str.w	r3, [r8, #4]
   8e034:	18d1      	adds	r1, r2, r3
   8e036:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8e038:	910d      	str	r1, [sp, #52]	; 0x34
   8e03a:	1c58      	adds	r0, r3, #1
   8e03c:	2807      	cmp	r0, #7
   8e03e:	900c      	str	r0, [sp, #48]	; 0x30
   8e040:	dc02      	bgt.n	8e048 <_svfiprintf_r+0x58a>
   8e042:	f108 0808 	add.w	r8, r8, #8
   8e046:	e009      	b.n	8e05c <_svfiprintf_r+0x59e>
   8e048:	4658      	mov	r0, fp
   8e04a:	4649      	mov	r1, r9
   8e04c:	aa0b      	add	r2, sp, #44	; 0x2c
   8e04e:	f7ff fcb9 	bl	8d9c4 <__ssprint_r>
   8e052:	2800      	cmp	r0, #0
   8e054:	f040 8121 	bne.w	8e29a <_svfiprintf_r+0x7dc>
   8e058:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8e05c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   8e060:	b1da      	cbz	r2, 8e09a <_svfiprintf_r+0x5dc>
   8e062:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   8e066:	f8c8 1000 	str.w	r1, [r8]
   8e06a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8e06c:	2301      	movs	r3, #1
   8e06e:	980d      	ldr	r0, [sp, #52]	; 0x34
   8e070:	f8c8 3004 	str.w	r3, [r8, #4]
   8e074:	1c4b      	adds	r3, r1, #1
   8e076:	1c42      	adds	r2, r0, #1
   8e078:	2b07      	cmp	r3, #7
   8e07a:	920d      	str	r2, [sp, #52]	; 0x34
   8e07c:	930c      	str	r3, [sp, #48]	; 0x30
   8e07e:	dc02      	bgt.n	8e086 <_svfiprintf_r+0x5c8>
   8e080:	f108 0808 	add.w	r8, r8, #8
   8e084:	e009      	b.n	8e09a <_svfiprintf_r+0x5dc>
   8e086:	4658      	mov	r0, fp
   8e088:	4649      	mov	r1, r9
   8e08a:	aa0b      	add	r2, sp, #44	; 0x2c
   8e08c:	f7ff fc9a 	bl	8d9c4 <__ssprint_r>
   8e090:	2800      	cmp	r0, #0
   8e092:	f040 8102 	bne.w	8e29a <_svfiprintf_r+0x7dc>
   8e096:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8e09a:	9806      	ldr	r0, [sp, #24]
   8e09c:	b1d0      	cbz	r0, 8e0d4 <_svfiprintf_r+0x616>
   8e09e:	aa0a      	add	r2, sp, #40	; 0x28
   8e0a0:	f8c8 2000 	str.w	r2, [r8]
   8e0a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8e0a6:	2102      	movs	r1, #2
   8e0a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8e0aa:	f8c8 1004 	str.w	r1, [r8, #4]
   8e0ae:	1c51      	adds	r1, r2, #1
   8e0b0:	1c98      	adds	r0, r3, #2
   8e0b2:	2907      	cmp	r1, #7
   8e0b4:	900d      	str	r0, [sp, #52]	; 0x34
   8e0b6:	910c      	str	r1, [sp, #48]	; 0x30
   8e0b8:	dc02      	bgt.n	8e0c0 <_svfiprintf_r+0x602>
   8e0ba:	f108 0808 	add.w	r8, r8, #8
   8e0be:	e009      	b.n	8e0d4 <_svfiprintf_r+0x616>
   8e0c0:	4658      	mov	r0, fp
   8e0c2:	4649      	mov	r1, r9
   8e0c4:	aa0b      	add	r2, sp, #44	; 0x2c
   8e0c6:	f7ff fc7d 	bl	8d9c4 <__ssprint_r>
   8e0ca:	2800      	cmp	r0, #0
   8e0cc:	f040 80e5 	bne.w	8e29a <_svfiprintf_r+0x7dc>
   8e0d0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8e0d4:	9b07      	ldr	r3, [sp, #28]
   8e0d6:	2b80      	cmp	r3, #128	; 0x80
   8e0d8:	d13c      	bne.n	8e154 <_svfiprintf_r+0x696>
   8e0da:	9803      	ldr	r0, [sp, #12]
   8e0dc:	9a02      	ldr	r2, [sp, #8]
   8e0de:	1a83      	subs	r3, r0, r2
   8e0e0:	2b00      	cmp	r3, #0
   8e0e2:	dd37      	ble.n	8e154 <_svfiprintf_r+0x696>
   8e0e4:	4968      	ldr	r1, [pc, #416]	; (8e288 <_svfiprintf_r+0x7ca>)
   8e0e6:	2b10      	cmp	r3, #16
   8e0e8:	f8c8 1000 	str.w	r1, [r8]
   8e0ec:	dd1b      	ble.n	8e126 <_svfiprintf_r+0x668>
   8e0ee:	980c      	ldr	r0, [sp, #48]	; 0x30
   8e0f0:	2210      	movs	r2, #16
   8e0f2:	990d      	ldr	r1, [sp, #52]	; 0x34
   8e0f4:	f8c8 2004 	str.w	r2, [r8, #4]
   8e0f8:	1c42      	adds	r2, r0, #1
   8e0fa:	3110      	adds	r1, #16
   8e0fc:	2a07      	cmp	r2, #7
   8e0fe:	910d      	str	r1, [sp, #52]	; 0x34
   8e100:	920c      	str	r2, [sp, #48]	; 0x30
   8e102:	dc02      	bgt.n	8e10a <_svfiprintf_r+0x64c>
   8e104:	f108 0808 	add.w	r8, r8, #8
   8e108:	e00b      	b.n	8e122 <_svfiprintf_r+0x664>
   8e10a:	4658      	mov	r0, fp
   8e10c:	4649      	mov	r1, r9
   8e10e:	aa0b      	add	r2, sp, #44	; 0x2c
   8e110:	9300      	str	r3, [sp, #0]
   8e112:	f7ff fc57 	bl	8d9c4 <__ssprint_r>
   8e116:	9b00      	ldr	r3, [sp, #0]
   8e118:	2800      	cmp	r0, #0
   8e11a:	f040 80be 	bne.w	8e29a <_svfiprintf_r+0x7dc>
   8e11e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8e122:	3b10      	subs	r3, #16
   8e124:	e7de      	b.n	8e0e4 <_svfiprintf_r+0x626>
   8e126:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8e128:	980d      	ldr	r0, [sp, #52]	; 0x34
   8e12a:	1c51      	adds	r1, r2, #1
   8e12c:	f8c8 3004 	str.w	r3, [r8, #4]
   8e130:	2907      	cmp	r1, #7
   8e132:	4403      	add	r3, r0
   8e134:	930d      	str	r3, [sp, #52]	; 0x34
   8e136:	910c      	str	r1, [sp, #48]	; 0x30
   8e138:	dc02      	bgt.n	8e140 <_svfiprintf_r+0x682>
   8e13a:	f108 0808 	add.w	r8, r8, #8
   8e13e:	e009      	b.n	8e154 <_svfiprintf_r+0x696>
   8e140:	4658      	mov	r0, fp
   8e142:	4649      	mov	r1, r9
   8e144:	aa0b      	add	r2, sp, #44	; 0x2c
   8e146:	f7ff fc3d 	bl	8d9c4 <__ssprint_r>
   8e14a:	2800      	cmp	r0, #0
   8e14c:	f040 80a5 	bne.w	8e29a <_svfiprintf_r+0x7dc>
   8e150:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8e154:	1b2d      	subs	r5, r5, r4
   8e156:	2d00      	cmp	r5, #0
   8e158:	dd34      	ble.n	8e1c4 <_svfiprintf_r+0x706>
   8e15a:	484b      	ldr	r0, [pc, #300]	; (8e288 <_svfiprintf_r+0x7ca>)
   8e15c:	2d10      	cmp	r5, #16
   8e15e:	f8c8 0000 	str.w	r0, [r8]
   8e162:	dd19      	ble.n	8e198 <_svfiprintf_r+0x6da>
   8e164:	980c      	ldr	r0, [sp, #48]	; 0x30
   8e166:	990d      	ldr	r1, [sp, #52]	; 0x34
   8e168:	1c43      	adds	r3, r0, #1
   8e16a:	2210      	movs	r2, #16
   8e16c:	3110      	adds	r1, #16
   8e16e:	2b07      	cmp	r3, #7
   8e170:	f8c8 2004 	str.w	r2, [r8, #4]
   8e174:	910d      	str	r1, [sp, #52]	; 0x34
   8e176:	930c      	str	r3, [sp, #48]	; 0x30
   8e178:	dc02      	bgt.n	8e180 <_svfiprintf_r+0x6c2>
   8e17a:	f108 0808 	add.w	r8, r8, #8
   8e17e:	e009      	b.n	8e194 <_svfiprintf_r+0x6d6>
   8e180:	4658      	mov	r0, fp
   8e182:	4649      	mov	r1, r9
   8e184:	aa0b      	add	r2, sp, #44	; 0x2c
   8e186:	f7ff fc1d 	bl	8d9c4 <__ssprint_r>
   8e18a:	2800      	cmp	r0, #0
   8e18c:	f040 8085 	bne.w	8e29a <_svfiprintf_r+0x7dc>
   8e190:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8e194:	3d10      	subs	r5, #16
   8e196:	e7e0      	b.n	8e15a <_svfiprintf_r+0x69c>
   8e198:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8e19a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8e19c:	1c51      	adds	r1, r2, #1
   8e19e:	f8c8 5004 	str.w	r5, [r8, #4]
   8e1a2:	2907      	cmp	r1, #7
   8e1a4:	441d      	add	r5, r3
   8e1a6:	950d      	str	r5, [sp, #52]	; 0x34
   8e1a8:	910c      	str	r1, [sp, #48]	; 0x30
   8e1aa:	dc02      	bgt.n	8e1b2 <_svfiprintf_r+0x6f4>
   8e1ac:	f108 0808 	add.w	r8, r8, #8
   8e1b0:	e008      	b.n	8e1c4 <_svfiprintf_r+0x706>
   8e1b2:	4658      	mov	r0, fp
   8e1b4:	4649      	mov	r1, r9
   8e1b6:	aa0b      	add	r2, sp, #44	; 0x2c
   8e1b8:	f7ff fc04 	bl	8d9c4 <__ssprint_r>
   8e1bc:	2800      	cmp	r0, #0
   8e1be:	d16c      	bne.n	8e29a <_svfiprintf_r+0x7dc>
   8e1c0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8e1c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8e1c6:	980d      	ldr	r0, [sp, #52]	; 0x34
   8e1c8:	1c5a      	adds	r2, r3, #1
   8e1ca:	f8c8 4004 	str.w	r4, [r8, #4]
   8e1ce:	2a07      	cmp	r2, #7
   8e1d0:	4404      	add	r4, r0
   8e1d2:	f8c8 a000 	str.w	sl, [r8]
   8e1d6:	940d      	str	r4, [sp, #52]	; 0x34
   8e1d8:	920c      	str	r2, [sp, #48]	; 0x30
   8e1da:	dc02      	bgt.n	8e1e2 <_svfiprintf_r+0x724>
   8e1dc:	f108 0308 	add.w	r3, r8, #8
   8e1e0:	e007      	b.n	8e1f2 <_svfiprintf_r+0x734>
   8e1e2:	4658      	mov	r0, fp
   8e1e4:	4649      	mov	r1, r9
   8e1e6:	aa0b      	add	r2, sp, #44	; 0x2c
   8e1e8:	f7ff fbec 	bl	8d9c4 <__ssprint_r>
   8e1ec:	2800      	cmp	r0, #0
   8e1ee:	d154      	bne.n	8e29a <_svfiprintf_r+0x7dc>
   8e1f0:	ab18      	add	r3, sp, #96	; 0x60
   8e1f2:	077a      	lsls	r2, r7, #29
   8e1f4:	d40b      	bmi.n	8e20e <_svfiprintf_r+0x750>
   8e1f6:	9804      	ldr	r0, [sp, #16]
   8e1f8:	9b02      	ldr	r3, [sp, #8]
   8e1fa:	9a03      	ldr	r2, [sp, #12]
   8e1fc:	990d      	ldr	r1, [sp, #52]	; 0x34
   8e1fe:	4293      	cmp	r3, r2
   8e200:	bfac      	ite	ge
   8e202:	18c0      	addge	r0, r0, r3
   8e204:	1880      	addlt	r0, r0, r2
   8e206:	9004      	str	r0, [sp, #16]
   8e208:	2900      	cmp	r1, #0
   8e20a:	d036      	beq.n	8e27a <_svfiprintf_r+0x7bc>
   8e20c:	e02f      	b.n	8e26e <_svfiprintf_r+0x7b0>
   8e20e:	9c03      	ldr	r4, [sp, #12]
   8e210:	9902      	ldr	r1, [sp, #8]
   8e212:	1a64      	subs	r4, r4, r1
   8e214:	2c00      	cmp	r4, #0
   8e216:	ddee      	ble.n	8e1f6 <_svfiprintf_r+0x738>
   8e218:	481a      	ldr	r0, [pc, #104]	; (8e284 <_svfiprintf_r+0x7c6>)
   8e21a:	2c10      	cmp	r4, #16
   8e21c:	6018      	str	r0, [r3, #0]
   8e21e:	dd15      	ble.n	8e24c <_svfiprintf_r+0x78e>
   8e220:	990c      	ldr	r1, [sp, #48]	; 0x30
   8e222:	2010      	movs	r0, #16
   8e224:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8e226:	6058      	str	r0, [r3, #4]
   8e228:	1c48      	adds	r0, r1, #1
   8e22a:	3210      	adds	r2, #16
   8e22c:	2807      	cmp	r0, #7
   8e22e:	920d      	str	r2, [sp, #52]	; 0x34
   8e230:	900c      	str	r0, [sp, #48]	; 0x30
   8e232:	dc01      	bgt.n	8e238 <_svfiprintf_r+0x77a>
   8e234:	3308      	adds	r3, #8
   8e236:	e007      	b.n	8e248 <_svfiprintf_r+0x78a>
   8e238:	4658      	mov	r0, fp
   8e23a:	4649      	mov	r1, r9
   8e23c:	aa0b      	add	r2, sp, #44	; 0x2c
   8e23e:	f7ff fbc1 	bl	8d9c4 <__ssprint_r>
   8e242:	2800      	cmp	r0, #0
   8e244:	d129      	bne.n	8e29a <_svfiprintf_r+0x7dc>
   8e246:	ab18      	add	r3, sp, #96	; 0x60
   8e248:	3c10      	subs	r4, #16
   8e24a:	e7e5      	b.n	8e218 <_svfiprintf_r+0x75a>
   8e24c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8e24e:	605c      	str	r4, [r3, #4]
   8e250:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8e252:	1c51      	adds	r1, r2, #1
   8e254:	191c      	adds	r4, r3, r4
   8e256:	2907      	cmp	r1, #7
   8e258:	940d      	str	r4, [sp, #52]	; 0x34
   8e25a:	910c      	str	r1, [sp, #48]	; 0x30
   8e25c:	ddcb      	ble.n	8e1f6 <_svfiprintf_r+0x738>
   8e25e:	4658      	mov	r0, fp
   8e260:	4649      	mov	r1, r9
   8e262:	aa0b      	add	r2, sp, #44	; 0x2c
   8e264:	f7ff fbae 	bl	8d9c4 <__ssprint_r>
   8e268:	2800      	cmp	r0, #0
   8e26a:	d0c4      	beq.n	8e1f6 <_svfiprintf_r+0x738>
   8e26c:	e015      	b.n	8e29a <_svfiprintf_r+0x7dc>
   8e26e:	4658      	mov	r0, fp
   8e270:	4649      	mov	r1, r9
   8e272:	aa0b      	add	r2, sp, #44	; 0x2c
   8e274:	f7ff fba6 	bl	8d9c4 <__ssprint_r>
   8e278:	b978      	cbnz	r0, 8e29a <_svfiprintf_r+0x7dc>
   8e27a:	2500      	movs	r5, #0
   8e27c:	950c      	str	r5, [sp, #48]	; 0x30
   8e27e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8e282:	e445      	b.n	8db10 <_svfiprintf_r+0x52>
   8e284:	0008f770 	.word	0x0008f770
   8e288:	0008f780 	.word	0x0008f780
   8e28c:	980d      	ldr	r0, [sp, #52]	; 0x34
   8e28e:	b120      	cbz	r0, 8e29a <_svfiprintf_r+0x7dc>
   8e290:	4658      	mov	r0, fp
   8e292:	4649      	mov	r1, r9
   8e294:	aa0b      	add	r2, sp, #44	; 0x2c
   8e296:	f7ff fb95 	bl	8d9c4 <__ssprint_r>
   8e29a:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   8e29e:	9b04      	ldr	r3, [sp, #16]
   8e2a0:	f002 0140 	and.w	r1, r2, #64	; 0x40
   8e2a4:	b208      	sxth	r0, r1
   8e2a6:	2800      	cmp	r0, #0
   8e2a8:	bf18      	it	ne
   8e2aa:	f04f 33ff 	movne.w	r3, #4294967295
   8e2ae:	4618      	mov	r0, r3
   8e2b0:	b029      	add	sp, #164	; 0xa4
   8e2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8e2b6:	bf00      	nop

0008e2b8 <_calloc_r>:
   8e2b8:	b510      	push	{r4, lr}
   8e2ba:	4351      	muls	r1, r2
   8e2bc:	f7fe fbc0 	bl	8ca40 <_malloc_r>
   8e2c0:	4604      	mov	r4, r0
   8e2c2:	b320      	cbz	r0, 8e30e <_calloc_r+0x56>
   8e2c4:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8e2c8:	f022 0103 	bic.w	r1, r2, #3
   8e2cc:	1f0a      	subs	r2, r1, #4
   8e2ce:	2a24      	cmp	r2, #36	; 0x24
   8e2d0:	d81a      	bhi.n	8e308 <_calloc_r+0x50>
   8e2d2:	2a13      	cmp	r2, #19
   8e2d4:	d912      	bls.n	8e2fc <_calloc_r+0x44>
   8e2d6:	2300      	movs	r3, #0
   8e2d8:	2a1b      	cmp	r2, #27
   8e2da:	6003      	str	r3, [r0, #0]
   8e2dc:	6043      	str	r3, [r0, #4]
   8e2de:	d802      	bhi.n	8e2e6 <_calloc_r+0x2e>
   8e2e0:	f100 0308 	add.w	r3, r0, #8
   8e2e4:	e00b      	b.n	8e2fe <_calloc_r+0x46>
   8e2e6:	2a24      	cmp	r2, #36	; 0x24
   8e2e8:	6083      	str	r3, [r0, #8]
   8e2ea:	60c3      	str	r3, [r0, #12]
   8e2ec:	bf05      	ittet	eq
   8e2ee:	6103      	streq	r3, [r0, #16]
   8e2f0:	6143      	streq	r3, [r0, #20]
   8e2f2:	f100 0310 	addne.w	r3, r0, #16
   8e2f6:	f100 0318 	addeq.w	r3, r0, #24
   8e2fa:	e000      	b.n	8e2fe <_calloc_r+0x46>
   8e2fc:	4603      	mov	r3, r0
   8e2fe:	2000      	movs	r0, #0
   8e300:	6018      	str	r0, [r3, #0]
   8e302:	6058      	str	r0, [r3, #4]
   8e304:	6098      	str	r0, [r3, #8]
   8e306:	e002      	b.n	8e30e <_calloc_r+0x56>
   8e308:	2100      	movs	r1, #0
   8e30a:	f7fc fbf4 	bl	8aaf6 <memset>
   8e30e:	4620      	mov	r0, r4
   8e310:	bd10      	pop	{r4, pc}
	...

0008e314 <__aeabi_d2iz>:
   8e314:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8e318:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8e31c:	d215      	bcs.n	8e34a <__aeabi_d2iz+0x36>
   8e31e:	d511      	bpl.n	8e344 <__aeabi_d2iz+0x30>
   8e320:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8e324:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8e328:	d912      	bls.n	8e350 <__aeabi_d2iz+0x3c>
   8e32a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8e32e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8e332:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8e336:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8e33a:	fa23 f002 	lsr.w	r0, r3, r2
   8e33e:	bf18      	it	ne
   8e340:	4240      	negne	r0, r0
   8e342:	4770      	bx	lr
   8e344:	f04f 0000 	mov.w	r0, #0
   8e348:	4770      	bx	lr
   8e34a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8e34e:	d105      	bne.n	8e35c <__aeabi_d2iz+0x48>
   8e350:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8e354:	bf08      	it	eq
   8e356:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8e35a:	4770      	bx	lr
   8e35c:	f04f 0000 	mov.w	r0, #0
   8e360:	4770      	bx	lr
   8e362:	bf00      	nop

0008e364 <__aeabi_d2f>:
   8e364:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8e368:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   8e36c:	bf24      	itt	cs
   8e36e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   8e372:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   8e376:	d90d      	bls.n	8e394 <__aeabi_d2f+0x30>
   8e378:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8e37c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   8e380:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   8e384:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   8e388:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   8e38c:	bf08      	it	eq
   8e38e:	f020 0001 	biceq.w	r0, r0, #1
   8e392:	4770      	bx	lr
   8e394:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   8e398:	d121      	bne.n	8e3de <__aeabi_d2f+0x7a>
   8e39a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   8e39e:	bfbc      	itt	lt
   8e3a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   8e3a4:	4770      	bxlt	lr
   8e3a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8e3aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   8e3ae:	f1c2 0218 	rsb	r2, r2, #24
   8e3b2:	f1c2 0c20 	rsb	ip, r2, #32
   8e3b6:	fa10 f30c 	lsls.w	r3, r0, ip
   8e3ba:	fa20 f002 	lsr.w	r0, r0, r2
   8e3be:	bf18      	it	ne
   8e3c0:	f040 0001 	orrne.w	r0, r0, #1
   8e3c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8e3c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   8e3cc:	fa03 fc0c 	lsl.w	ip, r3, ip
   8e3d0:	ea40 000c 	orr.w	r0, r0, ip
   8e3d4:	fa23 f302 	lsr.w	r3, r3, r2
   8e3d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   8e3dc:	e7cc      	b.n	8e378 <__aeabi_d2f+0x14>
   8e3de:	ea7f 5362 	mvns.w	r3, r2, asr #21
   8e3e2:	d107      	bne.n	8e3f4 <__aeabi_d2f+0x90>
   8e3e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   8e3e8:	bf1e      	ittt	ne
   8e3ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   8e3ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   8e3f2:	4770      	bxne	lr
   8e3f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   8e3f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8e3fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8e400:	4770      	bx	lr
   8e402:	bf00      	nop

0008e404 <__aeabi_uldivmod>:
   8e404:	b94b      	cbnz	r3, 8e41a <__aeabi_uldivmod+0x16>
   8e406:	b942      	cbnz	r2, 8e41a <__aeabi_uldivmod+0x16>
   8e408:	2900      	cmp	r1, #0
   8e40a:	bf08      	it	eq
   8e40c:	2800      	cmpeq	r0, #0
   8e40e:	d002      	beq.n	8e416 <__aeabi_uldivmod+0x12>
   8e410:	f04f 31ff 	mov.w	r1, #4294967295
   8e414:	4608      	mov	r0, r1
   8e416:	f000 b83b 	b.w	8e490 <__aeabi_idiv0>
   8e41a:	b082      	sub	sp, #8
   8e41c:	46ec      	mov	ip, sp
   8e41e:	e92d 5000 	stmdb	sp!, {ip, lr}
   8e422:	f000 f81d 	bl	8e460 <__gnu_uldivmod_helper>
   8e426:	f8dd e004 	ldr.w	lr, [sp, #4]
   8e42a:	b002      	add	sp, #8
   8e42c:	bc0c      	pop	{r2, r3}
   8e42e:	4770      	bx	lr

0008e430 <__gnu_ldivmod_helper>:
   8e430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8e434:	4616      	mov	r6, r2
   8e436:	4698      	mov	r8, r3
   8e438:	4604      	mov	r4, r0
   8e43a:	460d      	mov	r5, r1
   8e43c:	f000 f82a 	bl	8e494 <__divdi3>
   8e440:	fb06 fc01 	mul.w	ip, r6, r1
   8e444:	fba6 2300 	umull	r2, r3, r6, r0
   8e448:	fb00 c708 	mla	r7, r0, r8, ip
   8e44c:	18fb      	adds	r3, r7, r3
   8e44e:	1aa2      	subs	r2, r4, r2
   8e450:	eb65 0303 	sbc.w	r3, r5, r3
   8e454:	9c06      	ldr	r4, [sp, #24]
   8e456:	e9c4 2300 	strd	r2, r3, [r4]
   8e45a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8e45e:	bf00      	nop

0008e460 <__gnu_uldivmod_helper>:
   8e460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8e464:	4690      	mov	r8, r2
   8e466:	4606      	mov	r6, r0
   8e468:	460f      	mov	r7, r1
   8e46a:	461d      	mov	r5, r3
   8e46c:	f000 f970 	bl	8e750 <__udivdi3>
   8e470:	fb00 f305 	mul.w	r3, r0, r5
   8e474:	fba0 4508 	umull	r4, r5, r0, r8
   8e478:	fb08 3801 	mla	r8, r8, r1, r3
   8e47c:	9b06      	ldr	r3, [sp, #24]
   8e47e:	4445      	add	r5, r8
   8e480:	1b34      	subs	r4, r6, r4
   8e482:	eb67 0505 	sbc.w	r5, r7, r5
   8e486:	e9c3 4500 	strd	r4, r5, [r3]
   8e48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8e48e:	bf00      	nop

0008e490 <__aeabi_idiv0>:
   8e490:	4770      	bx	lr
   8e492:	bf00      	nop

0008e494 <__divdi3>:
   8e494:	2900      	cmp	r1, #0
   8e496:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8e49a:	461d      	mov	r5, r3
   8e49c:	f2c0 809d 	blt.w	8e5da <__divdi3+0x146>
   8e4a0:	2400      	movs	r4, #0
   8e4a2:	2d00      	cmp	r5, #0
   8e4a4:	f2c0 8094 	blt.w	8e5d0 <__divdi3+0x13c>
   8e4a8:	4680      	mov	r8, r0
   8e4aa:	460f      	mov	r7, r1
   8e4ac:	4694      	mov	ip, r2
   8e4ae:	461e      	mov	r6, r3
   8e4b0:	bbe3      	cbnz	r3, 8e52c <__divdi3+0x98>
   8e4b2:	428a      	cmp	r2, r1
   8e4b4:	d955      	bls.n	8e562 <__divdi3+0xce>
   8e4b6:	fab2 f782 	clz	r7, r2
   8e4ba:	b147      	cbz	r7, 8e4ce <__divdi3+0x3a>
   8e4bc:	f1c7 0520 	rsb	r5, r7, #32
   8e4c0:	fa20 f605 	lsr.w	r6, r0, r5
   8e4c4:	fa01 f107 	lsl.w	r1, r1, r7
   8e4c8:	40ba      	lsls	r2, r7
   8e4ca:	40b8      	lsls	r0, r7
   8e4cc:	4331      	orrs	r1, r6
   8e4ce:	0c17      	lsrs	r7, r2, #16
   8e4d0:	fbb1 f6f7 	udiv	r6, r1, r7
   8e4d4:	fa1f fc82 	uxth.w	ip, r2
   8e4d8:	fb07 1116 	mls	r1, r7, r6, r1
   8e4dc:	fb0c f506 	mul.w	r5, ip, r6
   8e4e0:	0c03      	lsrs	r3, r0, #16
   8e4e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8e4e6:	429d      	cmp	r5, r3
   8e4e8:	d908      	bls.n	8e4fc <__divdi3+0x68>
   8e4ea:	1e71      	subs	r1, r6, #1
   8e4ec:	189b      	adds	r3, r3, r2
   8e4ee:	f080 8113 	bcs.w	8e718 <__divdi3+0x284>
   8e4f2:	429d      	cmp	r5, r3
   8e4f4:	f240 8110 	bls.w	8e718 <__divdi3+0x284>
   8e4f8:	3e02      	subs	r6, #2
   8e4fa:	189b      	adds	r3, r3, r2
   8e4fc:	1b59      	subs	r1, r3, r5
   8e4fe:	fbb1 f5f7 	udiv	r5, r1, r7
   8e502:	fb07 1315 	mls	r3, r7, r5, r1
   8e506:	fb0c fc05 	mul.w	ip, ip, r5
   8e50a:	b280      	uxth	r0, r0
   8e50c:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
   8e510:	458c      	cmp	ip, r1
   8e512:	d907      	bls.n	8e524 <__divdi3+0x90>
   8e514:	1e6b      	subs	r3, r5, #1
   8e516:	188a      	adds	r2, r1, r2
   8e518:	f080 8100 	bcs.w	8e71c <__divdi3+0x288>
   8e51c:	4594      	cmp	ip, r2
   8e51e:	f240 80fd 	bls.w	8e71c <__divdi3+0x288>
   8e522:	3d02      	subs	r5, #2
   8e524:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
   8e528:	2500      	movs	r5, #0
   8e52a:	e003      	b.n	8e534 <__divdi3+0xa0>
   8e52c:	428b      	cmp	r3, r1
   8e52e:	d90c      	bls.n	8e54a <__divdi3+0xb6>
   8e530:	2500      	movs	r5, #0
   8e532:	4629      	mov	r1, r5
   8e534:	460a      	mov	r2, r1
   8e536:	462b      	mov	r3, r5
   8e538:	b114      	cbz	r4, 8e540 <__divdi3+0xac>
   8e53a:	4252      	negs	r2, r2
   8e53c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8e540:	4610      	mov	r0, r2
   8e542:	4619      	mov	r1, r3
   8e544:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8e548:	4770      	bx	lr
   8e54a:	fab3 f583 	clz	r5, r3
   8e54e:	2d00      	cmp	r5, #0
   8e550:	f040 8087 	bne.w	8e662 <__divdi3+0x1ce>
   8e554:	428b      	cmp	r3, r1
   8e556:	d301      	bcc.n	8e55c <__divdi3+0xc8>
   8e558:	4282      	cmp	r2, r0
   8e55a:	d8ea      	bhi.n	8e532 <__divdi3+0x9e>
   8e55c:	2500      	movs	r5, #0
   8e55e:	2101      	movs	r1, #1
   8e560:	e7e8      	b.n	8e534 <__divdi3+0xa0>
   8e562:	b912      	cbnz	r2, 8e56a <__divdi3+0xd6>
   8e564:	2601      	movs	r6, #1
   8e566:	fbb6 f2f2 	udiv	r2, r6, r2
   8e56a:	fab2 f682 	clz	r6, r2
   8e56e:	2e00      	cmp	r6, #0
   8e570:	d139      	bne.n	8e5e6 <__divdi3+0x152>
   8e572:	1a8e      	subs	r6, r1, r2
   8e574:	0c13      	lsrs	r3, r2, #16
   8e576:	fa1f fc82 	uxth.w	ip, r2
   8e57a:	2501      	movs	r5, #1
   8e57c:	fbb6 f7f3 	udiv	r7, r6, r3
   8e580:	fb03 6117 	mls	r1, r3, r7, r6
   8e584:	fb0c f807 	mul.w	r8, ip, r7
   8e588:	ea4f 4910 	mov.w	r9, r0, lsr #16
   8e58c:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
   8e590:	45b0      	cmp	r8, r6
   8e592:	d906      	bls.n	8e5a2 <__divdi3+0x10e>
   8e594:	1e79      	subs	r1, r7, #1
   8e596:	18b6      	adds	r6, r6, r2
   8e598:	d202      	bcs.n	8e5a0 <__divdi3+0x10c>
   8e59a:	45b0      	cmp	r8, r6
   8e59c:	f200 80d3 	bhi.w	8e746 <__divdi3+0x2b2>
   8e5a0:	460f      	mov	r7, r1
   8e5a2:	ebc8 0606 	rsb	r6, r8, r6
   8e5a6:	fbb6 f1f3 	udiv	r1, r6, r3
   8e5aa:	fb03 6311 	mls	r3, r3, r1, r6
   8e5ae:	fb0c fc01 	mul.w	ip, ip, r1
   8e5b2:	b280      	uxth	r0, r0
   8e5b4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   8e5b8:	459c      	cmp	ip, r3
   8e5ba:	d906      	bls.n	8e5ca <__divdi3+0x136>
   8e5bc:	1e4e      	subs	r6, r1, #1
   8e5be:	189a      	adds	r2, r3, r2
   8e5c0:	d202      	bcs.n	8e5c8 <__divdi3+0x134>
   8e5c2:	4594      	cmp	ip, r2
   8e5c4:	f200 80c2 	bhi.w	8e74c <__divdi3+0x2b8>
   8e5c8:	4631      	mov	r1, r6
   8e5ca:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   8e5ce:	e7b1      	b.n	8e534 <__divdi3+0xa0>
   8e5d0:	43e4      	mvns	r4, r4
   8e5d2:	4252      	negs	r2, r2
   8e5d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8e5d8:	e766      	b.n	8e4a8 <__divdi3+0x14>
   8e5da:	4240      	negs	r0, r0
   8e5dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8e5e0:	f04f 34ff 	mov.w	r4, #4294967295
   8e5e4:	e75d      	b.n	8e4a2 <__divdi3+0xe>
   8e5e6:	40b2      	lsls	r2, r6
   8e5e8:	f1c6 0920 	rsb	r9, r6, #32
   8e5ec:	fa21 f709 	lsr.w	r7, r1, r9
   8e5f0:	fa20 f909 	lsr.w	r9, r0, r9
   8e5f4:	fa01 f106 	lsl.w	r1, r1, r6
   8e5f8:	0c13      	lsrs	r3, r2, #16
   8e5fa:	fbb7 f8f3 	udiv	r8, r7, r3
   8e5fe:	fa1f fc82 	uxth.w	ip, r2
   8e602:	fb03 7718 	mls	r7, r3, r8, r7
   8e606:	fb0c f508 	mul.w	r5, ip, r8
   8e60a:	ea49 0901 	orr.w	r9, r9, r1
   8e60e:	ea4f 4119 	mov.w	r1, r9, lsr #16
   8e612:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
   8e616:	40b0      	lsls	r0, r6
   8e618:	42bd      	cmp	r5, r7
   8e61a:	d90a      	bls.n	8e632 <__divdi3+0x19e>
   8e61c:	18bf      	adds	r7, r7, r2
   8e61e:	f108 36ff 	add.w	r6, r8, #4294967295
   8e622:	f080 808e 	bcs.w	8e742 <__divdi3+0x2ae>
   8e626:	42bd      	cmp	r5, r7
   8e628:	f240 808b 	bls.w	8e742 <__divdi3+0x2ae>
   8e62c:	f1a8 0802 	sub.w	r8, r8, #2
   8e630:	18bf      	adds	r7, r7, r2
   8e632:	1b79      	subs	r1, r7, r5
   8e634:	fbb1 f5f3 	udiv	r5, r1, r3
   8e638:	fb03 1715 	mls	r7, r3, r5, r1
   8e63c:	fb0c f605 	mul.w	r6, ip, r5
   8e640:	fa1f f989 	uxth.w	r9, r9
   8e644:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
   8e648:	428e      	cmp	r6, r1
   8e64a:	d906      	bls.n	8e65a <__divdi3+0x1c6>
   8e64c:	1e6f      	subs	r7, r5, #1
   8e64e:	1889      	adds	r1, r1, r2
   8e650:	d271      	bcs.n	8e736 <__divdi3+0x2a2>
   8e652:	428e      	cmp	r6, r1
   8e654:	d96f      	bls.n	8e736 <__divdi3+0x2a2>
   8e656:	3d02      	subs	r5, #2
   8e658:	1889      	adds	r1, r1, r2
   8e65a:	1b8e      	subs	r6, r1, r6
   8e65c:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
   8e660:	e78c      	b.n	8e57c <__divdi3+0xe8>
   8e662:	f1c5 0120 	rsb	r1, r5, #32
   8e666:	fa22 f301 	lsr.w	r3, r2, r1
   8e66a:	fa06 f605 	lsl.w	r6, r6, r5
   8e66e:	fa27 f201 	lsr.w	r2, r7, r1
   8e672:	fa07 f705 	lsl.w	r7, r7, r5
   8e676:	fa20 f101 	lsr.w	r1, r0, r1
   8e67a:	431e      	orrs	r6, r3
   8e67c:	ea4f 4916 	mov.w	r9, r6, lsr #16
   8e680:	fbb2 f8f9 	udiv	r8, r2, r9
   8e684:	fa1f fa86 	uxth.w	sl, r6
   8e688:	fb09 2218 	mls	r2, r9, r8, r2
   8e68c:	fb0a fb08 	mul.w	fp, sl, r8
   8e690:	430f      	orrs	r7, r1
   8e692:	0c3b      	lsrs	r3, r7, #16
   8e694:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8e698:	4593      	cmp	fp, r2
   8e69a:	fa0c fc05 	lsl.w	ip, ip, r5
   8e69e:	d908      	bls.n	8e6b2 <__divdi3+0x21e>
   8e6a0:	1992      	adds	r2, r2, r6
   8e6a2:	f108 31ff 	add.w	r1, r8, #4294967295
   8e6a6:	d24a      	bcs.n	8e73e <__divdi3+0x2aa>
   8e6a8:	4593      	cmp	fp, r2
   8e6aa:	d948      	bls.n	8e73e <__divdi3+0x2aa>
   8e6ac:	f1a8 0802 	sub.w	r8, r8, #2
   8e6b0:	1992      	adds	r2, r2, r6
   8e6b2:	ebcb 0302 	rsb	r3, fp, r2
   8e6b6:	fbb3 f1f9 	udiv	r1, r3, r9
   8e6ba:	fb09 3211 	mls	r2, r9, r1, r3
   8e6be:	fb0a fa01 	mul.w	sl, sl, r1
   8e6c2:	b2bf      	uxth	r7, r7
   8e6c4:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
   8e6c8:	459a      	cmp	sl, r3
   8e6ca:	d906      	bls.n	8e6da <__divdi3+0x246>
   8e6cc:	1e4a      	subs	r2, r1, #1
   8e6ce:	199b      	adds	r3, r3, r6
   8e6d0:	d233      	bcs.n	8e73a <__divdi3+0x2a6>
   8e6d2:	459a      	cmp	sl, r3
   8e6d4:	d931      	bls.n	8e73a <__divdi3+0x2a6>
   8e6d6:	3902      	subs	r1, #2
   8e6d8:	199b      	adds	r3, r3, r6
   8e6da:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
   8e6de:	0c0f      	lsrs	r7, r1, #16
   8e6e0:	fa1f f88c 	uxth.w	r8, ip
   8e6e4:	fb08 f607 	mul.w	r6, r8, r7
   8e6e8:	b28a      	uxth	r2, r1
   8e6ea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   8e6ee:	fb08 f802 	mul.w	r8, r8, r2
   8e6f2:	fb0c 6202 	mla	r2, ip, r2, r6
   8e6f6:	fb0c fc07 	mul.w	ip, ip, r7
   8e6fa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   8e6fe:	4296      	cmp	r6, r2
   8e700:	bf88      	it	hi
   8e702:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
   8e706:	ebca 0303 	rsb	r3, sl, r3
   8e70a:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
   8e70e:	4563      	cmp	r3, ip
   8e710:	d30e      	bcc.n	8e730 <__divdi3+0x29c>
   8e712:	d005      	beq.n	8e720 <__divdi3+0x28c>
   8e714:	2500      	movs	r5, #0
   8e716:	e70d      	b.n	8e534 <__divdi3+0xa0>
   8e718:	460e      	mov	r6, r1
   8e71a:	e6ef      	b.n	8e4fc <__divdi3+0x68>
   8e71c:	461d      	mov	r5, r3
   8e71e:	e701      	b.n	8e524 <__divdi3+0x90>
   8e720:	fa00 f005 	lsl.w	r0, r0, r5
   8e724:	fa1f f888 	uxth.w	r8, r8
   8e728:	eb08 4502 	add.w	r5, r8, r2, lsl #16
   8e72c:	42a8      	cmp	r0, r5
   8e72e:	d2f1      	bcs.n	8e714 <__divdi3+0x280>
   8e730:	3901      	subs	r1, #1
   8e732:	2500      	movs	r5, #0
   8e734:	e6fe      	b.n	8e534 <__divdi3+0xa0>
   8e736:	463d      	mov	r5, r7
   8e738:	e78f      	b.n	8e65a <__divdi3+0x1c6>
   8e73a:	4611      	mov	r1, r2
   8e73c:	e7cd      	b.n	8e6da <__divdi3+0x246>
   8e73e:	4688      	mov	r8, r1
   8e740:	e7b7      	b.n	8e6b2 <__divdi3+0x21e>
   8e742:	46b0      	mov	r8, r6
   8e744:	e775      	b.n	8e632 <__divdi3+0x19e>
   8e746:	3f02      	subs	r7, #2
   8e748:	18b6      	adds	r6, r6, r2
   8e74a:	e72a      	b.n	8e5a2 <__divdi3+0x10e>
   8e74c:	3902      	subs	r1, #2
   8e74e:	e73c      	b.n	8e5ca <__divdi3+0x136>

0008e750 <__udivdi3>:
   8e750:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8e754:	4614      	mov	r4, r2
   8e756:	4605      	mov	r5, r0
   8e758:	460e      	mov	r6, r1
   8e75a:	2b00      	cmp	r3, #0
   8e75c:	d13d      	bne.n	8e7da <__udivdi3+0x8a>
   8e75e:	428a      	cmp	r2, r1
   8e760:	d949      	bls.n	8e7f6 <__udivdi3+0xa6>
   8e762:	fab2 f782 	clz	r7, r2
   8e766:	b147      	cbz	r7, 8e77a <__udivdi3+0x2a>
   8e768:	f1c7 0120 	rsb	r1, r7, #32
   8e76c:	fa20 f201 	lsr.w	r2, r0, r1
   8e770:	fa06 f607 	lsl.w	r6, r6, r7
   8e774:	40bc      	lsls	r4, r7
   8e776:	40bd      	lsls	r5, r7
   8e778:	4316      	orrs	r6, r2
   8e77a:	0c22      	lsrs	r2, r4, #16
   8e77c:	fbb6 f0f2 	udiv	r0, r6, r2
   8e780:	b2a1      	uxth	r1, r4
   8e782:	fb02 6610 	mls	r6, r2, r0, r6
   8e786:	fb01 f300 	mul.w	r3, r1, r0
   8e78a:	0c2f      	lsrs	r7, r5, #16
   8e78c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   8e790:	42b3      	cmp	r3, r6
   8e792:	d908      	bls.n	8e7a6 <__udivdi3+0x56>
   8e794:	1e47      	subs	r7, r0, #1
   8e796:	1936      	adds	r6, r6, r4
   8e798:	f080 80fa 	bcs.w	8e990 <__udivdi3+0x240>
   8e79c:	42b3      	cmp	r3, r6
   8e79e:	f240 80f7 	bls.w	8e990 <__udivdi3+0x240>
   8e7a2:	3802      	subs	r0, #2
   8e7a4:	1936      	adds	r6, r6, r4
   8e7a6:	1af6      	subs	r6, r6, r3
   8e7a8:	fbb6 f3f2 	udiv	r3, r6, r2
   8e7ac:	fb02 6213 	mls	r2, r2, r3, r6
   8e7b0:	fb01 f103 	mul.w	r1, r1, r3
   8e7b4:	b2ad      	uxth	r5, r5
   8e7b6:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
   8e7ba:	4291      	cmp	r1, r2
   8e7bc:	d907      	bls.n	8e7ce <__udivdi3+0x7e>
   8e7be:	1e5e      	subs	r6, r3, #1
   8e7c0:	1912      	adds	r2, r2, r4
   8e7c2:	f080 80e7 	bcs.w	8e994 <__udivdi3+0x244>
   8e7c6:	4291      	cmp	r1, r2
   8e7c8:	f240 80e4 	bls.w	8e994 <__udivdi3+0x244>
   8e7cc:	3b02      	subs	r3, #2
   8e7ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   8e7d2:	2100      	movs	r1, #0
   8e7d4:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8e7d8:	4770      	bx	lr
   8e7da:	428b      	cmp	r3, r1
   8e7dc:	d843      	bhi.n	8e866 <__udivdi3+0x116>
   8e7de:	fab3 f483 	clz	r4, r3
   8e7e2:	2c00      	cmp	r4, #0
   8e7e4:	d142      	bne.n	8e86c <__udivdi3+0x11c>
   8e7e6:	428b      	cmp	r3, r1
   8e7e8:	d302      	bcc.n	8e7f0 <__udivdi3+0xa0>
   8e7ea:	4282      	cmp	r2, r0
   8e7ec:	f200 80e1 	bhi.w	8e9b2 <__udivdi3+0x262>
   8e7f0:	2100      	movs	r1, #0
   8e7f2:	2001      	movs	r0, #1
   8e7f4:	e7ee      	b.n	8e7d4 <__udivdi3+0x84>
   8e7f6:	b912      	cbnz	r2, 8e7fe <__udivdi3+0xae>
   8e7f8:	2701      	movs	r7, #1
   8e7fa:	fbb7 f4f2 	udiv	r4, r7, r2
   8e7fe:	fab4 f284 	clz	r2, r4
   8e802:	2a00      	cmp	r2, #0
   8e804:	f040 8089 	bne.w	8e91a <__udivdi3+0x1ca>
   8e808:	1b0a      	subs	r2, r1, r4
   8e80a:	0c23      	lsrs	r3, r4, #16
   8e80c:	b2a7      	uxth	r7, r4
   8e80e:	2101      	movs	r1, #1
   8e810:	fbb2 f6f3 	udiv	r6, r2, r3
   8e814:	fb03 2216 	mls	r2, r3, r6, r2
   8e818:	fb07 f006 	mul.w	r0, r7, r6
   8e81c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   8e820:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   8e824:	4290      	cmp	r0, r2
   8e826:	d907      	bls.n	8e838 <__udivdi3+0xe8>
   8e828:	1912      	adds	r2, r2, r4
   8e82a:	f106 3cff 	add.w	ip, r6, #4294967295
   8e82e:	d202      	bcs.n	8e836 <__udivdi3+0xe6>
   8e830:	4290      	cmp	r0, r2
   8e832:	f200 80d0 	bhi.w	8e9d6 <__udivdi3+0x286>
   8e836:	4666      	mov	r6, ip
   8e838:	1a12      	subs	r2, r2, r0
   8e83a:	fbb2 f0f3 	udiv	r0, r2, r3
   8e83e:	fb03 2310 	mls	r3, r3, r0, r2
   8e842:	fb07 f700 	mul.w	r7, r7, r0
   8e846:	b2ad      	uxth	r5, r5
   8e848:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   8e84c:	429f      	cmp	r7, r3
   8e84e:	d907      	bls.n	8e860 <__udivdi3+0x110>
   8e850:	1e42      	subs	r2, r0, #1
   8e852:	191b      	adds	r3, r3, r4
   8e854:	f080 80a0 	bcs.w	8e998 <__udivdi3+0x248>
   8e858:	429f      	cmp	r7, r3
   8e85a:	f240 809d 	bls.w	8e998 <__udivdi3+0x248>
   8e85e:	3802      	subs	r0, #2
   8e860:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   8e864:	e7b6      	b.n	8e7d4 <__udivdi3+0x84>
   8e866:	2100      	movs	r1, #0
   8e868:	4608      	mov	r0, r1
   8e86a:	e7b3      	b.n	8e7d4 <__udivdi3+0x84>
   8e86c:	f1c4 0620 	rsb	r6, r4, #32
   8e870:	fa22 f706 	lsr.w	r7, r2, r6
   8e874:	fa03 f304 	lsl.w	r3, r3, r4
   8e878:	fa21 f506 	lsr.w	r5, r1, r6
   8e87c:	fa01 f104 	lsl.w	r1, r1, r4
   8e880:	fa20 f606 	lsr.w	r6, r0, r6
   8e884:	433b      	orrs	r3, r7
   8e886:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8e88a:	fbb5 f7fc 	udiv	r7, r5, ip
   8e88e:	fa1f f883 	uxth.w	r8, r3
   8e892:	fb0c 5517 	mls	r5, ip, r7, r5
   8e896:	fb08 f907 	mul.w	r9, r8, r7
   8e89a:	ea46 0a01 	orr.w	sl, r6, r1
   8e89e:	ea4f 411a 	mov.w	r1, sl, lsr #16
   8e8a2:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   8e8a6:	45a9      	cmp	r9, r5
   8e8a8:	fa02 f204 	lsl.w	r2, r2, r4
   8e8ac:	d904      	bls.n	8e8b8 <__udivdi3+0x168>
   8e8ae:	1e7e      	subs	r6, r7, #1
   8e8b0:	18ed      	adds	r5, r5, r3
   8e8b2:	f0c0 8081 	bcc.w	8e9b8 <__udivdi3+0x268>
   8e8b6:	4637      	mov	r7, r6
   8e8b8:	ebc9 0105 	rsb	r1, r9, r5
   8e8bc:	fbb1 f6fc 	udiv	r6, r1, ip
   8e8c0:	fb0c 1516 	mls	r5, ip, r6, r1
   8e8c4:	fb08 f806 	mul.w	r8, r8, r6
   8e8c8:	fa1f fa8a 	uxth.w	sl, sl
   8e8cc:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
   8e8d0:	4588      	cmp	r8, r1
   8e8d2:	d903      	bls.n	8e8dc <__udivdi3+0x18c>
   8e8d4:	1e75      	subs	r5, r6, #1
   8e8d6:	18c9      	adds	r1, r1, r3
   8e8d8:	d374      	bcc.n	8e9c4 <__udivdi3+0x274>
   8e8da:	462e      	mov	r6, r5
   8e8dc:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   8e8e0:	0c37      	lsrs	r7, r6, #16
   8e8e2:	fa1f fc82 	uxth.w	ip, r2
   8e8e6:	fb0c f507 	mul.w	r5, ip, r7
   8e8ea:	0c12      	lsrs	r2, r2, #16
   8e8ec:	b2b3      	uxth	r3, r6
   8e8ee:	fb0c fc03 	mul.w	ip, ip, r3
   8e8f2:	fb02 5303 	mla	r3, r2, r3, r5
   8e8f6:	fb02 f207 	mul.w	r2, r2, r7
   8e8fa:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8e8fe:	429d      	cmp	r5, r3
   8e900:	bf88      	it	hi
   8e902:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
   8e906:	ebc8 0101 	rsb	r1, r8, r1
   8e90a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8e90e:	4291      	cmp	r1, r2
   8e910:	d34c      	bcc.n	8e9ac <__udivdi3+0x25c>
   8e912:	d043      	beq.n	8e99c <__udivdi3+0x24c>
   8e914:	4630      	mov	r0, r6
   8e916:	2100      	movs	r1, #0
   8e918:	e75c      	b.n	8e7d4 <__udivdi3+0x84>
   8e91a:	4094      	lsls	r4, r2
   8e91c:	f1c2 0520 	rsb	r5, r2, #32
   8e920:	fa21 f605 	lsr.w	r6, r1, r5
   8e924:	fa20 f505 	lsr.w	r5, r0, r5
   8e928:	fa01 f102 	lsl.w	r1, r1, r2
   8e92c:	0c23      	lsrs	r3, r4, #16
   8e92e:	fbb6 fcf3 	udiv	ip, r6, r3
   8e932:	b2a7      	uxth	r7, r4
   8e934:	fb03 661c 	mls	r6, r3, ip, r6
   8e938:	fb07 f80c 	mul.w	r8, r7, ip
   8e93c:	4329      	orrs	r1, r5
   8e93e:	0c0d      	lsrs	r5, r1, #16
   8e940:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   8e944:	45b0      	cmp	r8, r6
   8e946:	fa00 f502 	lsl.w	r5, r0, r2
   8e94a:	d908      	bls.n	8e95e <__udivdi3+0x20e>
   8e94c:	1936      	adds	r6, r6, r4
   8e94e:	f10c 30ff 	add.w	r0, ip, #4294967295
   8e952:	d23e      	bcs.n	8e9d2 <__udivdi3+0x282>
   8e954:	45b0      	cmp	r8, r6
   8e956:	d93c      	bls.n	8e9d2 <__udivdi3+0x282>
   8e958:	f1ac 0c02 	sub.w	ip, ip, #2
   8e95c:	1936      	adds	r6, r6, r4
   8e95e:	ebc8 0206 	rsb	r2, r8, r6
   8e962:	fbb2 f0f3 	udiv	r0, r2, r3
   8e966:	fb03 2610 	mls	r6, r3, r0, r2
   8e96a:	fb07 f800 	mul.w	r8, r7, r0
   8e96e:	b289      	uxth	r1, r1
   8e970:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   8e974:	4590      	cmp	r8, r2
   8e976:	d906      	bls.n	8e986 <__udivdi3+0x236>
   8e978:	1e46      	subs	r6, r0, #1
   8e97a:	1912      	adds	r2, r2, r4
   8e97c:	d227      	bcs.n	8e9ce <__udivdi3+0x27e>
   8e97e:	4590      	cmp	r8, r2
   8e980:	d925      	bls.n	8e9ce <__udivdi3+0x27e>
   8e982:	3802      	subs	r0, #2
   8e984:	1912      	adds	r2, r2, r4
   8e986:	ebc8 0202 	rsb	r2, r8, r2
   8e98a:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
   8e98e:	e73f      	b.n	8e810 <__udivdi3+0xc0>
   8e990:	4638      	mov	r0, r7
   8e992:	e708      	b.n	8e7a6 <__udivdi3+0x56>
   8e994:	4633      	mov	r3, r6
   8e996:	e71a      	b.n	8e7ce <__udivdi3+0x7e>
   8e998:	4610      	mov	r0, r2
   8e99a:	e761      	b.n	8e860 <__udivdi3+0x110>
   8e99c:	fa00 f004 	lsl.w	r0, r0, r4
   8e9a0:	fa1f fc8c 	uxth.w	ip, ip
   8e9a4:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
   8e9a8:	4298      	cmp	r0, r3
   8e9aa:	d2b3      	bcs.n	8e914 <__udivdi3+0x1c4>
   8e9ac:	1e70      	subs	r0, r6, #1
   8e9ae:	2100      	movs	r1, #0
   8e9b0:	e710      	b.n	8e7d4 <__udivdi3+0x84>
   8e9b2:	4621      	mov	r1, r4
   8e9b4:	4620      	mov	r0, r4
   8e9b6:	e70d      	b.n	8e7d4 <__udivdi3+0x84>
   8e9b8:	45a9      	cmp	r9, r5
   8e9ba:	f67f af7c 	bls.w	8e8b6 <__udivdi3+0x166>
   8e9be:	3f02      	subs	r7, #2
   8e9c0:	18ed      	adds	r5, r5, r3
   8e9c2:	e779      	b.n	8e8b8 <__udivdi3+0x168>
   8e9c4:	4588      	cmp	r8, r1
   8e9c6:	d988      	bls.n	8e8da <__udivdi3+0x18a>
   8e9c8:	3e02      	subs	r6, #2
   8e9ca:	18c9      	adds	r1, r1, r3
   8e9cc:	e786      	b.n	8e8dc <__udivdi3+0x18c>
   8e9ce:	4630      	mov	r0, r6
   8e9d0:	e7d9      	b.n	8e986 <__udivdi3+0x236>
   8e9d2:	4684      	mov	ip, r0
   8e9d4:	e7c3      	b.n	8e95e <__udivdi3+0x20e>
   8e9d6:	3e02      	subs	r6, #2
   8e9d8:	1912      	adds	r2, r2, r4
   8e9da:	e72d      	b.n	8e838 <__udivdi3+0xe8>

0008e9dc <sd_trans_multipliers>:
   8e9dc:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   8e9ec:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   8e9fc:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   8ea0c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0008ea1c <sd_mmc_trans_units>:
   8ea1c:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0008ea38 <mmc_trans_multipliers>:
   8ea38:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   8ea48:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   8ea58:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   8ea68:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   8ea78:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   8ea88:	0010 0000 0020 0000 0040 0000 0080 0000     .... ...@.......
   8ea98:	0100 0000 0200 0000 0400 0000 432a 534c     ............*CLS
   8eaa8:	0000 0000 452a 4553 0000 0000 452a 4553     ....*ESE....*ESE
   8eab8:	003f 0000 452a 5253 003f 0000 492a 4e44     ?...*ESR?...*IDN
   8eac8:	003f 0000 4f2a 4350 0000 0000 4f2a 4350     ?...*OPC....*OPC
   8ead8:	003f 0000 522a 5453 0000 0000 532a 4552     ?...*RST....*SRE
   8eae8:	0000 0000 532a 4552 003f 0000 532a 4254     ....*SRE?...*STB
   8eaf8:	003f 0000 542a 5453 003f 0000 572a 4941     ?...*TST?...*WAI
   8eb08:	0000 0000 5953 5453 6d65 453a 5252 726f     ....SYSTem:ERRor
   8eb18:	003f 0000 5953 5453 6d65 453a 5252 726f     ?...SYSTem:ERRor
   8eb28:	4e3a 5845 3f54 0000 5953 5453 6d65 453a     :NEXT?..SYSTem:E
   8eb38:	5252 726f 433a 554f 744e 003f 5953 5453     RRor:COUNt?.SYST
   8eb48:	6d65 563a 5245 6953 6e6f 003f 5953 5453     em:VERSion?.SYST
   8eb58:	6d65 543a 5059 3f45 0000 0000 5953 5453     em:TYPE?....SYST
   8eb68:	6d65 4e3a 4d41 3f45 0000 0000 5953 5453     em:NAME?....SYST
   8eb78:	6d65 443a 5345 3f43 0000 0000 5953 5453     em:DESC?....SYST
   8eb88:	6d65 533a 3f4e 0000 5953 5453 6d65 443a     em:SN?..SYSTem:D
   8eb98:	4f50 6557 3f72 0000 5953 5453 6d65 4d3a     POWer?..SYSTem:M
   8eba8:	5841 7543 7272 6e65 3f74 0000 5953 5453     AXCurrent?..SYST
   8ebb8:	6d65 4e3a 4d4f 7543 7272 6e65 3f74 0000     em:NOMCurrent?..
   8ebc8:	5453 5441 7375 533a 4344 7261 7364 6174     STATus:SDCardsta
   8ebd8:	7574 3f73 0000 0000 5453 5441 7375 4c3a     tus?....STATus:L
   8ebe8:	4445 7453 7461 7375 003f 0000 5453 5441     EDStatus?...STAT
   8ebf8:	7375 423a 5455 6f74 736e 6174 7574 3f73     us:BUTtonstatus?
   8ec08:	0000 0000 4f43 464e 6769 7275 3a65 454c     ....CONFigure:LE
   8ec18:	0044 0000 4f43 464e 6769 7275 3a65 494c     D...CONFigure:LI
   8ec28:	6847 7374 0000 0000 4f43 464e 6769 7275     Ghts....CONFigur
   8ec38:	3a65 4f50 6557 0072 4f43 464e 6769 7275     e:POWer.CONFigur
   8ec48:	3a65 4545 5250 4d4f 0000 0000 454d 5341     e:EEPROM....MEAS
   8ec58:	7275 3a65 4545 5250 4d4f 003f 4f43 464e     ure:EEPROM?.CONF
   8ec68:	6769 7275 3a65 4544 614c 3a79 6552 6573     igure:DELay:Rese
   8ec78:	3a74 4156 754c 0065 4f43 464e 6769 7275     t:VALue.CONFigur
   8ec88:	3a65 4544 614c 3a79 6144 6174 563a 4c41     e:DELay:Data:VAL
   8ec98:	6575 0000 4f43 464e 6769 7275 3a65 4544     ue..CONFigure:DE
   8eca8:	614c 3a79 6c43 636f 3a6b 4156 754c 0065     Lay:Clock:VALue.
   8ecb8:	4f43 464e 6769 7275 3a65 4544 614c 3a79     CONFigure:DELay:
   8ecc8:	6552 6573 3a74 4156 754c 3f65 0000 0000     Reset:VALue?....
   8ecd8:	4f43 464e 6769 7275 3a65 4544 614c 3a79     CONFigure:DELay:
   8ece8:	6144 6174 563a 4c41 6575 003f 4f43 464e     Data:VALue?.CONF
   8ecf8:	6769 7275 3a65 4544 614c 3a79 6c43 636f     igure:DELay:Cloc
   8ed08:	3a6b 4156 754c 3f65 0000 0000 4f43 464e     k:VALue?....CONF
   8ed18:	6769 7275 3a65 4544 614c 3a79 6552 6573     igure:DELay:Rese
   8ed28:	3a74 4e45 6261 656c 0000 0000 4f43 464e     t:ENable....CONF
   8ed38:	6769 7275 3a65 4544 614c 3a79 6144 6174     igure:DELay:Data
   8ed48:	453a 614e 6c62 0065 4f43 464e 6769 7275     :ENable.CONFigur
   8ed58:	3a65 4544 614c 3a79 6c43 636f 3a6b 4e45     e:DELay:Clock:EN
   8ed68:	6261 656c 0000 0000 4f43 464e 6769 7275     able....CONFigur
   8ed78:	3a65 4544 614c 3a79 6552 6573 3a74 4e45     e:DELay:Reset:EN
   8ed88:	6261 656c 003f 0000 4f43 464e 6769 7275     able?...CONFigur
   8ed98:	3a65 4544 614c 3a79 6144 6174 453a 614e     e:DELay:Data:ENa
   8eda8:	6c62 3f65 0000 0000 4f43 464e 6769 7275     ble?....CONFigur
   8edb8:	3a65 4544 614c 3a79 6c43 636f 3a6b 4e45     e:DELay:Clock:EN
   8edc8:	6261 656c 003f 0000 4f43 464e 6769 7275     able?...CONFigur
   8edd8:	3a65 4652 413a 5454 6e65 6175 6974 6e6f     e:RF:ATTenuation
   8ede8:	003f 0000 4f43 464e 6769 7275 3a65 4652     ?...CONFigure:RF
   8edf8:	413a 5454 6e65 6175 6974 6e6f 0000 0000     :ATTenuation....
   8ee08:	5453 5441 7375 513a 4555 7453 6f69 616e     STATus:QUEStiona
   8ee18:	6c62 3f65 0000 0000 5453 5441 7375 513a     ble?....STATus:Q
   8ee28:	4555 7453 6f69 616e 6c62 3a65 5645 4e45     UEStionable:EVEN
   8ee38:	3f74 0000 5453 5441 7375 513a 4555 7453     t?..STATus:QUESt
   8ee48:	6f69 616e 6c62 3a65 4e45 4241 656c 0000     ionable:ENABle..
   8ee58:	5453 5441 7375 513a 4555 7453 6f69 616e     STATus:QUEStiona
   8ee68:	6c62 3a65 4e45 4241 656c 003f 5453 5441     ble:ENABle?.STAT
   8ee78:	7375 503a 4552 6553 0074 0000               us:PRESet...

0008ee84 <scpi_commands>:
   8ee84:	eaa4 0008 2f31 0008 eaac 0008 2f71 0008     ....1/......q/..
   8ee94:	eab4 0008 2fa5 0008 eabc 0008 2fcd 0008     ...../......./..
   8eea4:	eac4 0008 3009 0008 eacc 0008 303d 0008     .....0......=0..
   8eeb4:	ead4 0008 3059 0008 eadc 0008 3071 0008     ....Y0......q0..
   8eec4:	eae4 0008 3095 0008 eaec 0008 30c9 0008     .....0.......0..
   8eed4:	eaf4 0008 30f1 0008 eafc 0008 3119 0008     .....0.......1..
   8eee4:	eb04 0008 3151 0008 eb0c 0008 3175 0008     ....Q1......u1..
   8eef4:	eb1c 0008 3175 0008 eb30 0008 31b5 0008     ....u1..0....1..
   8ef04:	eb44 0008 3159 0008 eb54 0008 3dbd 0008     D...Y1..T....=..
   8ef14:	eb64 0008 3df5 0008 eb74 0008 3e2d 0008     d....=..t...->..
   8ef24:	eb84 0008 3e65 0008 eb90 0008 3e91 0008     ....e>.......>..
   8ef34:	eba0 0008 3ec1 0008 ebb4 0008 3eed 0008     .....>.......>..
   8ef44:	ebc8 0008 3f19 0008 ebe0 0008 3f41 0008     .....?......A?..
   8ef54:	ebf4 0008 3f69 0008 ec0c 0008 4085 0008     ....i?.......@..
   8ef64:	ec1c 0008 4369 0008 ec30 0008 3fd9 0008     ....iC..0....?..
   8ef74:	ec40 0008 3fd1 0008 ec54 0008 3fc9 0008     @....?..T....?..
   8ef84:	ec64 0008 40f9 0008 ec80 0008 413d 0008     d....@......=A..
   8ef94:	ec9c 0008 4181 0008 ecb8 0008 41c5 0008     .....A.......A..
   8efa4:	ecd8 0008 4205 0008 ecf4 0008 4245 0008     .....B......EB..
   8efb4:	ed14 0008 4285 0008 ed34 0008 42d1 0008     .....B..4....B..
   8efc4:	ed50 0008 431d 0008 ed70 0008 43b5 0008     P....C..p....C..
   8efd4:	ed90 0008 43f5 0008 edb0 0008 4435 0008     .....C......5D..
   8efe4:	edd0 0008 4475 0008 edec 0008 44dd 0008     ....uD.......D..
   8eff4:	ee08 0008 31d9 0008 ee20 0008 31d9 0008     .....1.. ....1..
   8f004:	ee3c 0008 323d 0008 ee58 0008 3215 0008     <...=2..X....2..
   8f014:	ee74 0008 3271 0008 0000 0000 0000 0000     t...q2..........
   8f024:	6f4e 6520 7272 726f 0000 0000 7953 746e     No error....Synt
   8f034:	7861 6520 7272 726f 0000 0000 6e49 6176     ax error....Inva
   8f044:	696c 2064 6573 6170 6172 6f74 0072 0000     lid separator...
   8f054:	6e55 6564 6966 656e 2064 6568 6461 7265     Undefined header
   8f064:	0000 0000 6150 6172 656d 6574 2072 6f6e     ....Parameter no
   8f074:	2074 6c61 6f6c 6577 0064 0000 694d 7373     t allowed...Miss
   8f084:	6e69 2067 6170 6172 656d 6574 0072 0000     ing parameter...
   8f094:	6e49 6176 696c 2064 7573 6666 7869 0000     Invalid suffix..
   8f0a4:	7553 6666 7869 6e20 746f 6120 6c6c 776f     Suffix not allow
   8f0b4:	6465 0000 6e55 6e6b 776f 206e 7265 6f72     ed..Unknown erro
   8f0c4:	0072 0000 5443 2055 4546 0045 4554 5453     r...CTU FEE.TEST
   8f0d4:	5320 5043 2049 4e49 5453 5552 454d 544e      SCPI INSTRUMENT
   8f0e4:	5420 4953 3233 3532 0000 0000 3176 302e      TSI3225....v1.0
   8f0f4:	0000 0000 202c 0000 0d3b 000a 203b 0a0d     ...., ..;...; ..
   8f104:	0009 0000 0020 0000 494d 694e 756d 006d     .... ...MINimum.
   8f114:	414d 6958 756d 006d 4544 6146 6c75 0074     MAXimum.DEFault.
   8f124:	5055 0000 4f44 4e57 0000 0000 414e 004e     UP..DOWN....NAN.
   8f134:	4e49 0046 494e 464e 0000 0000 5655 0000     INF.NINF....UV..
   8f144:	564d 0000 0056 0000 564b 0000 4155 0000     MV..V...KV..UA..
   8f154:	414d 0000 0041 0000 414b 0000 484f 004d     MA..A...KA..OHM.
   8f164:	4f4b 4d48 0000 0000 4f4d 4d48 0000 0000     KOHM....MOHM....
   8f174:	5a48 0000 484b 005a 484d 005a 4847 005a     HZ..KHZ.MHZ.GHZ.
   8f184:	4543 004c 5350 0000 534e 0000 5355 0000     CEL.PS..NS..US..
   8f194:	534d 0000 0053 0000 494d 004e 5248 0000     MS..S...MIN.HR..
   8f1a4:	0000 0000                                   ....

0008f1a8 <scpi_units_def>:
   8f1a8:	f140 0008 0001 0000 ed8d a0b5 c6f7 3eb0     @..............>
   8f1b8:	f144 0008 0001 0000 a9fc d2f1 624d 3f50     D...........MbP?
   8f1c8:	f148 0008 0001 0000 0000 0000 0000 3ff0     H..............?
   8f1d8:	f14c 0008 0001 0000 0000 0000 4000 408f     L............@.@
   8f1e8:	f150 0008 0002 0000 ed8d a0b5 c6f7 3eb0     P..............>
   8f1f8:	f154 0008 0002 0000 a9fc d2f1 624d 3f50     T...........MbP?
   8f208:	f158 0008 0002 0000 0000 0000 0000 3ff0     X..............?
   8f218:	f15c 0008 0002 0000 0000 0000 4000 408f     \............@.@
   8f228:	f160 0008 0003 0000 0000 0000 0000 3ff0     `..............?
   8f238:	f164 0008 0003 0000 0000 0000 4000 408f     d............@.@
   8f248:	f16c 0008 0003 0000 0000 0000 8480 412e     l..............A
   8f258:	f174 0008 0004 0000 0000 0000 0000 3ff0     t..............?
   8f268:	f178 0008 0004 0000 0000 0000 4000 408f     x............@.@
   8f278:	f17c 0008 0004 0000 0000 0000 8480 412e     |..............A
   8f288:	f180 0008 0004 0000 0000 0000 cd65 41cd     ............e..A
   8f298:	f184 0008 0005 0000 0000 0000 0000 3ff0     ...............?
   8f2a8:	f188 0008 0006 0000 ea11 812d 9799 3d71     ..........-...q=
   8f2b8:	f18c 0008 0006 0000 d695 e826 2e0b 3e11     ..........&....>
   8f2c8:	f190 0008 0006 0000 ed8d a0b5 c6f7 3eb0     ...............>
   8f2d8:	f194 0008 0006 0000 a9fc d2f1 624d 3f50     ............MbP?
   8f2e8:	f198 0008 0006 0000 0000 0000 0000 3ff0     ...............?
   8f2f8:	f19c 0008 0006 0000 0000 0000 0000 404e     ..............N@
   8f308:	f1a0 0008 0006 0000 0000 0000 2000 40ac     ............. .@
	...

0008f328 <scpi_special_numbers_def>:
   8f328:	f10c 0008 0001 0000 f114 0008 0002 0000     ................
   8f338:	f11c 0008 0003 0000 f124 0008 0004 0000     ........$.......
   8f348:	f128 0008 0005 0000 f130 0008 0006 0000     (.......0.......
   8f358:	f134 0008 0007 0000 f138 0008 0008 0000     4.......8.......
	...
   8f370:	6c25 0067 3a3f 5d5b 0000 0000 3f3a 0000     %lg.?:[]....:?..
   8f380:	6948 6867 532d 6570 6465 5020 6c75 6573     High-Speed Pulse
   8f390:	4720 6e65 7265 7461 726f 000d 7830 3030      Generator..0x00
   8f3a0:	3030 000d 3438 6d30 0d57 0000 6d30 0d41     00..840mW...0mA.
   8f3b0:	0000 0000 4b4f 000d 7570 6873 6465 000d     ....OK..pushed..
   8f3c0:	6572 656c 7361 6465 000d 0000 4e4f 0000     released....ON..
   8f3d0:	464f 0046 7525 000d 6c25 0d66 0000 0000     OFF.%u..%lf.....
   8f3e0:	2e25 732a 0000 0000 2a2a 5245 4f52 3a52     %.*s....**ERROR:
   8f3f0:	2520 2c64 2220 7325 0d22 000a 2a2a 5253      %d, "%s"...**SR
   8f400:	3a51 3020 2578 2058 2528 2964 0a0d 0000     Q: 0x%X (%d)....
   8f410:	2a2a 5443 4c52 2520 3230 3a78 3020 2578     **CTRL %02x: 0x%
   8f420:	2058 2528 2964 0a0d 0000 0000 2a2a 6554     X (%d)......**Te
   8f430:	7473 0a0d 0000 0000 2a2a 6552 6573 0d74     st......**Reset.
   8f440:	000a 0000 5322 2f44 4d4d 2043 6143 6472     ...."SD/MMC Card
   8f450:	6f20 6576 2072 434d 2049 6c53 746f 3020      over MCI Slot 0
   8f460:	0022 0000 3231 3133 3332 3231 3133 3332     "...123123123123
	...
   8f47c:	aa00 aaaa aaaa aaaa eeaa eeee eeee eeee     ................
   8f48c:	feee ffff ffff ffff ffff ffff 7fff dfbf     ................
   8f49c:	f7ef fdfb 7efc dfbf f7ef fdfb 007e 0000     .....~......~...

0008f4ac <_ctype_>:
   8f4ac:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   8f4bc:	2020 2020 2020 2020 2020 2020 2020 2020                     
   8f4cc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   8f4dc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   8f4ec:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   8f4fc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   8f50c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   8f51c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   8f52c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0008f5b0 <_global_impure_ptr>:
   8f5b0:	02b0 2007 0043 0000                         ... C...

0008f5b8 <tinytens>:
   8f5b8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   8f5c8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   8f5d8:	6f43 64ac 0628 0e18 666e 6900 696e 7974     Co.d(...nf.inity
   8f5e8:	6100 006e                                   .an.

0008f5ec <blanks.6650>:
   8f5ec:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008f5fc <zeroes.6651>:
   8f5fc:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   8f60c:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   8f61c:	3000 3231 3433 3635 3837 6139 6362 6564     .0123456789abcde
   8f62c:	0066 3130 3332 3534 3736 3938 5000 534f     f.0123456789.POS
   8f63c:	5849 2e00 0000 0000 0000 0000               IX..........

0008f648 <p05.5242>:
   8f648:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

0008f658 <__mprec_tens>:
   8f658:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   8f668:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   8f678:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   8f688:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   8f698:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   8f6a8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   8f6b8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   8f6c8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   8f6d8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   8f6e8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   8f6f8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   8f708:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   8f718:	9db4 79d9 7843 44ea                         ...yCx.D

0008f720 <__mprec_tinytens>:
   8f720:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   8f730:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   8f740:	6f43 64ac 0628 0ac8                         Co.d(...

0008f748 <__mprec_bigtens>:
   8f748:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   8f758:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   8f768:	bf3c 7f73 4fdd 7515                         <.s..O.u

0008f770 <blanks.6664>:
   8f770:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008f780 <zeroes.6665>:
   8f780:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0008f790 <_init>:
   8f790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8f792:	bf00      	nop
   8f794:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8f796:	bc08      	pop	{r3}
   8f798:	469e      	mov	lr, r3
   8f79a:	4770      	bx	lr

0008f79c <__init_array_start>:
   8f79c:	0008c119 	.word	0x0008c119

0008f7a0 <__frame_dummy_init_array_entry>:
   8f7a0:	0008016d                                m...

0008f7a4 <_fini>:
   8f7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8f7a6:	bf00      	nop
   8f7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8f7aa:	bc08      	pop	{r3}
   8f7ac:	469e      	mov	lr, r3
   8f7ae:	4770      	bx	lr

0008f7b0 <__fini_array_start>:
   8f7b0:	00080145 	.word	0x00080145

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <sd_mmc_cards>:
	...
20070014:	0067 0000 0000 0000 0000 0000 0000 0000     g...............
	...

20070030 <current_attenution>:
20070030:	007f                                        ..

20070032 <data_in_color>:
20070032:	0003                                        ..

20070034 <clk_in_color>:
20070034:	0003                                        ..

20070036 <ch_out_color>:
20070036:	0002                                        ..

20070038 <scpi_context>:
20070038:	ee84 0008 0100 0000 0000 0000 0bd8 2007     ............... 
	...
20070054:	0078 2007 0000 0000 0000 0000 0000 0000     x.. ............
20070064:	0000 0000 0bc8 2007 f1a8 0008 f328 0008     ....... ....(...
20070074:	0000 0000                                   ....

20070078 <scpi_interface>:
20070078:	4f71 0008 4f2d 0008 4ff1 0008 4f69 0008     qO..-O...O..iO..
20070088:	5099 0008 5069 0008                         .P..iP..

20070090 <udi_cdc_name.9558>:
20070090:	4443 2043 6e69 6574 6672 6361 0065 0000     CDC interface...

200700a0 <extra_strings_desc.9563>:
200700a0:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

200700bc <udi_msc_name.9559>:
200700bc:	534d 2043 6e69 6574 6672 6361 0065 0000     MSC interface...

200700cc <udi_api_cdc_data>:
200700cc:	5aa9 0008 5809 0008 54d9 0008 54e1 0008     .Z...X...T...T..
200700dc:	56c5 0008                                   .V..

200700e0 <udi_api_cdc_comm>:
200700e0:	5839 0008 54c5 0008 571d 0008 54e1 0008     9X...T...W...T..
200700f0:	0000 0000                                   ....

200700f4 <udc_config_hs>:
200700f4:	0104 2007 0188 2007                         ... ... 

200700fc <udc_config_lsfs>:
200700fc:	01a8 2007 0188 2007                         ... ... 

20070104 <udc_desc_hs>:
20070104:	0209 0062 0103 c000 0832 000b 0202 0102     ..b.....2.......
20070114:	0900 0004 0100 0202 0001 2405 1000 0401     ...........$....
20070124:	0224 0502 0624 0100 2405 0301 0701 8305     $...$....$......
20070134:	4003 1000 0409 0001 0a02 0000 0700 8405     .@..............
20070144:	0002 0002 0507 0205 0200 0900 0204 0200     ................
20070154:	0608 0550 0507 0281 0200 0700 0205 0002     ..P.............
20070164:	0002 0000                                   ....

20070168 <udc_config>:
20070168:	0194 2007 00fc 2007 0194 2007 017c 2007     ... ... ... |.. 
20070178:	00f4 2007                                   ... 

2007017c <udc_device_qual>:
2007017c:	060a 0200 0000 4000 0001 0000               .......@....

20070188 <udi_apis>:
20070188:	00e0 2007 00cc 2007 0210 2007               ... ... ... 

20070194 <udc_device_desc>:
20070194:	0112 0200 0000 4000 03eb 2424 0100 0201     .......@..$$....
200701a4:	0103 0000                                   ....

200701a8 <udc_desc_fs>:
200701a8:	0209 0062 0103 c000 0832 000b 0202 0102     ..b.....2.......
200701b8:	0900 0004 0100 0202 0001 2405 1000 0401     ...........$....
200701c8:	0224 0502 0624 0100 2405 0301 0701 8305     $...$....$......
200701d8:	4003 1000 0409 0001 0a02 0000 0700 8405     .@..............
200701e8:	4002 0000 0507 0205 0040 0900 0204 0200     .@......@.......
200701f8:	0608 0550 0507 0281 0040 0700 0205 4002     ..P.....@......@
20070208:	0000 0000                                   ....

2007020c <udi_msc_b_ack_trans>:
2007020c:	0001 0000                                   ....

20070210 <udi_api_msc>:
20070210:	6945 0008 6929 0008 6831 0008 5dbd 0008     Ei..)i..1h...]..
20070220:	0000 0000                                   ....

20070224 <udi_msc_inquiry_data.10038>:
20070224:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
20070244:	2e31 3030                                   1.00

20070248 <udi_msc_csw>:
20070248:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

20070258 <udc_string_product_name>:
20070258:	6554 706d 616c 6574 4220 616f 6472 0000     Template Board..

20070268 <udc_string_manufacturer_name>:
20070268:	6145 7973 702d 6968 0000 0000               Easy-phi....

20070274 <udc_string_desc>:
20070274:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20070294 <udc_string_desc_languageid>:
20070294:	0304 0409                                   ....

20070298 <g_interrupt_enabled>:
20070298:	0001 0000                                   ....

2007029c <SystemCoreClock>:
2007029c:	0900 003d                                   ..=.

200702a0 <__ctype_ptr__>:
200702a0:	f4ac 0008 0000 0000                         ........

200702a8 <_impure_ptr>:
200702a8:	02b0 2007 0000 0000                         ... ....

200702b0 <impure_data>:
200702b0:	0000 0000 059c 2007 0604 2007 066c 2007     ....... ... l.. 
	...
200702e4:	f5b4 0008 0000 0000 0000 0000 0000 0000     ................
	...
20070358:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20070368:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200706d8 <fpi.5202>:
200706d8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
200706e8:	0000 0000                                   ....

200706ec <fpinan.5238>:
200706ec:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
200706fc:	0000 0000                                   ....

20070700 <lc_ctype_charset>:
20070700:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20070720 <__mb_cur_max>:
20070720:	0001 0000                                   ....

20070724 <lc_message_charset>:
20070724:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20070744 <lconv>:
20070744:	f63f 0008 f640 0008 f640 0008 f640 0008     ?...@...@...@...
20070754:	f640 0008 f640 0008 f640 0008 f640 0008     @...@...@...@...
20070764:	f640 0008 f640 0008 ffff ffff ffff ffff     @...@...........
20070774:	ffff ffff ffff 0000                         ........

2007077c <__malloc_av_>:
	...
20070784:	077c 2007 077c 2007 0784 2007 0784 2007     |.. |.. ... ... 
20070794:	078c 2007 078c 2007 0794 2007 0794 2007     ... ... ... ... 
200707a4:	079c 2007 079c 2007 07a4 2007 07a4 2007     ... ... ... ... 
200707b4:	07ac 2007 07ac 2007 07b4 2007 07b4 2007     ... ... ... ... 
200707c4:	07bc 2007 07bc 2007 07c4 2007 07c4 2007     ... ... ... ... 
200707d4:	07cc 2007 07cc 2007 07d4 2007 07d4 2007     ... ... ... ... 
200707e4:	07dc 2007 07dc 2007 07e4 2007 07e4 2007     ... ... ... ... 
200707f4:	07ec 2007 07ec 2007 07f4 2007 07f4 2007     ... ... ... ... 
20070804:	07fc 2007 07fc 2007 0804 2007 0804 2007     ... ... ... ... 
20070814:	080c 2007 080c 2007 0814 2007 0814 2007     ... ... ... ... 
20070824:	081c 2007 081c 2007 0824 2007 0824 2007     ... ... $.. $.. 
20070834:	082c 2007 082c 2007 0834 2007 0834 2007     ,.. ,.. 4.. 4.. 
20070844:	083c 2007 083c 2007 0844 2007 0844 2007     <.. <.. D.. D.. 
20070854:	084c 2007 084c 2007 0854 2007 0854 2007     L.. L.. T.. T.. 
20070864:	085c 2007 085c 2007 0864 2007 0864 2007     \.. \.. d.. d.. 
20070874:	086c 2007 086c 2007 0874 2007 0874 2007     l.. l.. t.. t.. 
20070884:	087c 2007 087c 2007 0884 2007 0884 2007     |.. |.. ... ... 
20070894:	088c 2007 088c 2007 0894 2007 0894 2007     ... ... ... ... 
200708a4:	089c 2007 089c 2007 08a4 2007 08a4 2007     ... ... ... ... 
200708b4:	08ac 2007 08ac 2007 08b4 2007 08b4 2007     ... ... ... ... 
200708c4:	08bc 2007 08bc 2007 08c4 2007 08c4 2007     ... ... ... ... 
200708d4:	08cc 2007 08cc 2007 08d4 2007 08d4 2007     ... ... ... ... 
200708e4:	08dc 2007 08dc 2007 08e4 2007 08e4 2007     ... ... ... ... 
200708f4:	08ec 2007 08ec 2007 08f4 2007 08f4 2007     ... ... ... ... 
20070904:	08fc 2007 08fc 2007 0904 2007 0904 2007     ... ... ... ... 
20070914:	090c 2007 090c 2007 0914 2007 0914 2007     ... ... ... ... 
20070924:	091c 2007 091c 2007 0924 2007 0924 2007     ... ... $.. $.. 
20070934:	092c 2007 092c 2007 0934 2007 0934 2007     ,.. ,.. 4.. 4.. 
20070944:	093c 2007 093c 2007 0944 2007 0944 2007     <.. <.. D.. D.. 
20070954:	094c 2007 094c 2007 0954 2007 0954 2007     L.. L.. T.. T.. 
20070964:	095c 2007 095c 2007 0964 2007 0964 2007     \.. \.. d.. d.. 
20070974:	096c 2007 096c 2007 0974 2007 0974 2007     l.. l.. t.. t.. 
20070984:	097c 2007 097c 2007 0984 2007 0984 2007     |.. |.. ... ... 
20070994:	098c 2007 098c 2007 0994 2007 0994 2007     ... ... ... ... 
200709a4:	099c 2007 099c 2007 09a4 2007 09a4 2007     ... ... ... ... 
200709b4:	09ac 2007 09ac 2007 09b4 2007 09b4 2007     ... ... ... ... 
200709c4:	09bc 2007 09bc 2007 09c4 2007 09c4 2007     ... ... ... ... 
200709d4:	09cc 2007 09cc 2007 09d4 2007 09d4 2007     ... ... ... ... 
200709e4:	09dc 2007 09dc 2007 09e4 2007 09e4 2007     ... ... ... ... 
200709f4:	09ec 2007 09ec 2007 09f4 2007 09f4 2007     ... ... ... ... 
20070a04:	09fc 2007 09fc 2007 0a04 2007 0a04 2007     ... ... ... ... 
20070a14:	0a0c 2007 0a0c 2007 0a14 2007 0a14 2007     ... ... ... ... 
20070a24:	0a1c 2007 0a1c 2007 0a24 2007 0a24 2007     ... ... $.. $.. 
20070a34:	0a2c 2007 0a2c 2007 0a34 2007 0a34 2007     ,.. ,.. 4.. 4.. 
20070a44:	0a3c 2007 0a3c 2007 0a44 2007 0a44 2007     <.. <.. D.. D.. 
20070a54:	0a4c 2007 0a4c 2007 0a54 2007 0a54 2007     L.. L.. T.. T.. 
20070a64:	0a5c 2007 0a5c 2007 0a64 2007 0a64 2007     \.. \.. d.. d.. 
20070a74:	0a6c 2007 0a6c 2007 0a74 2007 0a74 2007     l.. l.. t.. t.. 
20070a84:	0a7c 2007 0a7c 2007 0a84 2007 0a84 2007     |.. |.. ... ... 
20070a94:	0a8c 2007 0a8c 2007 0a94 2007 0a94 2007     ... ... ... ... 
20070aa4:	0a9c 2007 0a9c 2007 0aa4 2007 0aa4 2007     ... ... ... ... 
20070ab4:	0aac 2007 0aac 2007 0ab4 2007 0ab4 2007     ... ... ... ... 
20070ac4:	0abc 2007 0abc 2007 0ac4 2007 0ac4 2007     ... ... ... ... 
20070ad4:	0acc 2007 0acc 2007 0ad4 2007 0ad4 2007     ... ... ... ... 
20070ae4:	0adc 2007 0adc 2007 0ae4 2007 0ae4 2007     ... ... ... ... 
20070af4:	0aec 2007 0aec 2007 0af4 2007 0af4 2007     ... ... ... ... 
20070b04:	0afc 2007 0afc 2007 0b04 2007 0b04 2007     ... ... ... ... 
20070b14:	0b0c 2007 0b0c 2007 0b14 2007 0b14 2007     ... ... ... ... 
20070b24:	0b1c 2007 0b1c 2007 0b24 2007 0b24 2007     ... ... $.. $.. 
20070b34:	0b2c 2007 0b2c 2007 0b34 2007 0b34 2007     ,.. ,.. 4.. 4.. 
20070b44:	0b3c 2007 0b3c 2007 0b44 2007 0b44 2007     <.. <.. D.. D.. 
20070b54:	0b4c 2007 0b4c 2007 0b54 2007 0b54 2007     L.. L.. T.. T.. 
20070b64:	0b5c 2007 0b5c 2007 0b64 2007 0b64 2007     \.. \.. d.. d.. 
20070b74:	0b6c 2007 0b6c 2007 0b74 2007 0b74 2007     l.. l.. t.. t.. 

20070b84 <__malloc_sbrk_base>:
20070b84:	ffff ffff                                   ....

20070b88 <__malloc_trim_threshold>:
20070b88:	0000 0002                                   ....
