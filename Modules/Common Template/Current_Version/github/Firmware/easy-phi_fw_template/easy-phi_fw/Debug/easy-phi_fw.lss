
easy-phi_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c168  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008c168  0008c168  00014168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae0  20070000  0008c170  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001150  20070ae0  0008cc50  00018ae0  2**2
                  ALLOC
  4 .stack        00002000  20071c30  0008dda0  00018ae0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00018ae0  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00018b09  2**0
                  CONTENTS, READONLY
  7 .debug_info   00029817  00000000  00000000  00018b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007cc3  00000000  00000000  00042391  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001619f  00000000  00000000  0004a054  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001948  00000000  00000000  000601f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001d70  00000000  00000000  00061b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00023e6e  00000000  00000000  000638b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002d119  00000000  00000000  0008771e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000795f5  00000000  00000000  000b4837  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000037a4  00000000  00000000  0012de2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20073c30 	.word	0x20073c30
   80004:	00088875 	.word	0x00088875
   80008:	00088871 	.word	0x00088871
   8000c:	00083fad 	.word	0x00083fad
   80010:	00088871 	.word	0x00088871
   80014:	00088871 	.word	0x00088871
   80018:	00088871 	.word	0x00088871
	...
   8002c:	00088871 	.word	0x00088871
   80030:	00088871 	.word	0x00088871
   80034:	00000000 	.word	0x00000000
   80038:	00088871 	.word	0x00088871
   8003c:	00088871 	.word	0x00088871
   80040:	00088871 	.word	0x00088871
   80044:	00088871 	.word	0x00088871
   80048:	00088871 	.word	0x00088871
   8004c:	00088871 	.word	0x00088871
   80050:	00088871 	.word	0x00088871
   80054:	00088871 	.word	0x00088871
   80058:	00088871 	.word	0x00088871
   8005c:	00088871 	.word	0x00088871
   80060:	00088871 	.word	0x00088871
   80064:	00088871 	.word	0x00088871
   80068:	00000000 	.word	0x00000000
   8006c:	00086621 	.word	0x00086621
   80070:	0008663d 	.word	0x0008663d
   80074:	00086659 	.word	0x00086659
   80078:	00086675 	.word	0x00086675
	...
   80084:	00088871 	.word	0x00088871
   80088:	00088871 	.word	0x00088871
   8008c:	00088871 	.word	0x00088871
   80090:	00088871 	.word	0x00088871
   80094:	00088871 	.word	0x00088871
   80098:	00088871 	.word	0x00088871
   8009c:	00088871 	.word	0x00088871
   800a0:	00088871 	.word	0x00088871
   800a4:	00000000 	.word	0x00000000
   800a8:	00088871 	.word	0x00088871
   800ac:	00088871 	.word	0x00088871
   800b0:	00088871 	.word	0x00088871
   800b4:	00088871 	.word	0x00088871
   800b8:	00088871 	.word	0x00088871
   800bc:	00088871 	.word	0x00088871
   800c0:	00088871 	.word	0x00088871
   800c4:	00088871 	.word	0x00088871
   800c8:	00088871 	.word	0x00088871
   800cc:	00088871 	.word	0x00088871
   800d0:	00088871 	.word	0x00088871
   800d4:	00088871 	.word	0x00088871
   800d8:	00088871 	.word	0x00088871
   800dc:	00088871 	.word	0x00088871
   800e0:	0008719d 	.word	0x0008719d
   800e4:	00088871 	.word	0x00088871
   800e8:	00088871 	.word	0x00088871
   800ec:	00088871 	.word	0x00088871
   800f0:	00088871 	.word	0x00088871

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	0008c170 	.word	0x0008c170
   80110:	0008c173 	.word	0x0008c173
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	0008c170 	.word	0x0008c170
   8013c:	0008c170 	.word	0x0008c170
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070ae0 	.word	0x20070ae0
   80164:	00000000 	.word	0x00000000
   80168:	0008c170 	.word	0x0008c170

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	0008c170 	.word	0x0008c170
   80198:	20070ae4 	.word	0x20070ae4
   8019c:	0008c170 	.word	0x0008c170
   801a0:	00000000 	.word	0x00000000

000801a4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   801a4:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   801a6:	f640 3300 	movw	r3, #2816	; 0xb00
   801aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   801ae:	681a      	ldr	r2, [r3, #0]
   801b0:	f892 4022 	ldrb.w	r4, [r2, #34]	; 0x22
   801b4:	f640 3106 	movw	r1, #2822	; 0xb06
   801b8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   801bc:	7808      	ldrb	r0, [r1, #0]
   801be:	6811      	ldr	r1, [r2, #0]
   801c0:	7c52      	ldrb	r2, [r2, #17]
   801c2:	1c23      	adds	r3, r4, #0
   801c4:	bf18      	it	ne
   801c6:	2301      	movne	r3, #1
   801c8:	f243 64b5 	movw	r4, #14005	; 0x36b5
   801cc:	f2c0 0408 	movt	r4, #8
   801d0:	47a0      	blx	r4
   801d2:	bd10      	pop	{r4, pc}

000801d4 <sdio_cmd53>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd53(uint8_t rw_flag, uint8_t func_nb, uint32_t reg_addr,
		uint8_t inc_addr, uint32_t size, bool access_block)
{
   801d4:	b570      	push	{r4, r5, r6, lr}
   801d6:	b082      	sub	sp, #8
   801d8:	9c06      	ldr	r4, [sp, #24]
	Assert(size != 0);
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
   801da:	f249 3635 	movw	r6, #37685	; 0x9335
   801de:	f2c0 0601 	movt	r6, #1
   801e2:	f241 3535 	movw	r5, #4917	; 0x1335
   801e6:	f2c0 0501 	movt	r5, #1
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
   801ea:	ea4f 7101 	mov.w	r1, r1, lsl #28

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
			SDIO_CMD53_IO_R_BYTE_EXTENDED :
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
   801ee:	ea41 2242 	orr.w	r2, r1, r2, lsl #9
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
   801f2:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
			SDIO_CMD53_IO_R_BYTE_EXTENDED :
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
   801f6:	ea4f 51c4 	mov.w	r1, r4, lsl #23
   801fa:	ea4f 51d1 	mov.w	r1, r1, lsr #23
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
   801fe:	4311      	orrs	r1, r2
		uint8_t inc_addr, uint32_t size, bool access_block)
{
	Assert(size != 0);
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
   80200:	f89d 201c 	ldrb.w	r2, [sp, #28]
   80204:	9200      	str	r2, [sp, #0]
   80206:	2800      	cmp	r0, #0
   80208:	bf14      	ite	ne
   8020a:	4630      	movne	r0, r6
   8020c:	4628      	moveq	r0, r5
   8020e:	ea41 6183 	orr.w	r1, r1, r3, lsl #26
   80212:	b2a2      	uxth	r2, r4
   80214:	f04f 0301 	mov.w	r3, #1
   80218:	f243 74e1 	movw	r4, #14305	; 0x37e1
   8021c:	f2c0 0408 	movt	r4, #8
   80220:	47a0      	blx	r4
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
			| ((uint32_t)rw_flag << SDIO_CMD53_RW_FLAG),
			size, 1, access_block);
}
   80222:	b002      	add	sp, #8
   80224:	bd70      	pop	{r4, r5, r6, pc}
   80226:	bf00      	nop

00080228 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   80228:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   8022a:	f640 3306 	movw	r3, #2822	; 0xb06
   8022e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80232:	7818      	ldrb	r0, [r3, #0]
   80234:	b930      	cbnz	r0, 80244 <sd_mmc_deselect_slot+0x1c>
		driver_deselect_device(sd_mmc_slot_sel);
   80236:	f04f 0000 	mov.w	r0, #0
   8023a:	f243 7129 	movw	r1, #14121	; 0x3729
   8023e:	f2c0 0108 	movt	r1, #8
   80242:	4788      	blx	r1
   80244:	bd08      	pop	{r3, pc}
   80246:	bf00      	nop

00080248 <sdio_cmd52>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
   80248:	b510      	push	{r4, lr}
   8024a:	9c02      	ldr	r4, [sp, #8]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
   8024c:	ea4f 2242 	mov.w	r2, r2, lsl #9
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
   80250:	ea42 7101 	orr.w	r1, r2, r1, lsl #28
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
   80254:	ea41 70c0 	orr.w	r0, r1, r0, lsl #31
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
   80258:	ea40 63c3 	orr.w	r3, r0, r3, lsl #27
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
   8025c:	7822      	ldrb	r2, [r4, #0]
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
   8025e:	f241 3034 	movw	r0, #4916	; 0x1334
   80262:	ea43 0102 	orr.w	r1, r3, r2
   80266:	f243 7351 	movw	r3, #14161	; 0x3751
   8026a:	f2c0 0308 	movt	r3, #8
   8026e:	4798      	blx	r3
   80270:	b140      	cbz	r0, 80284 <sdio_cmd52+0x3c>
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
		return false;
	}
	*io_data = driver_get_response() & 0xFF;
   80272:	f243 7179 	movw	r1, #14201	; 0x3779
   80276:	f2c0 0108 	movt	r1, #8
   8027a:	4788      	blx	r1
   8027c:	7020      	strb	r0, [r4, #0]
	return true;
   8027e:	f04f 0001 	mov.w	r0, #1
   80282:	bd10      	pop	{r4, pc}
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
		return false;
   80284:	f04f 0000 	mov.w	r0, #0
	}
	*io_data = driver_get_response() & 0xFF;
	return true;
}
   80288:	bd10      	pop	{r4, pc}
   8028a:	bf00      	nop

0008028c <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
   8028c:	b508      	push	{r3, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
   8028e:	f640 3300 	movw	r3, #2816	; 0xb00
   80292:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80296:	6818      	ldr	r0, [r3, #0]
   80298:	8981      	ldrh	r1, [r0, #12]
   8029a:	f641 3009 	movw	r0, #6921	; 0x1b09
   8029e:	ea4f 4101 	mov.w	r1, r1, lsl #16
   802a2:	f243 7251 	movw	r2, #14161	; 0x3751
   802a6:	f2c0 0208 	movt	r2, #8
   802aa:	4790      	blx	r2
   802ac:	b170      	cbz	r0, 802cc <sd_mmc_cmd9_mci+0x40>
		return false;
	}
	driver_get_response_128(sd_mmc_card->csd);
   802ae:	f640 3300 	movw	r3, #2816	; 0xb00
   802b2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   802b6:	6818      	ldr	r0, [r3, #0]
   802b8:	f100 0012 	add.w	r0, r0, #18
   802bc:	f243 7181 	movw	r1, #14209	; 0x3781
   802c0:	f2c0 0108 	movt	r1, #8
   802c4:	4788      	blx	r1
	return true;
   802c6:	f04f 0001 	mov.w	r0, #1
   802ca:	bd08      	pop	{r3, pc}
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   802cc:	f04f 0000 	mov.w	r0, #0
	}
	driver_get_response_128(sd_mmc_card->csd);
	return true;
}
   802d0:	bd08      	pop	{r3, pc}
   802d2:	bf00      	nop

000802d4 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   802d4:	b510      	push	{r4, lr}
	if (slot >= SD_MMC_MEM_CNT) {
   802d6:	2800      	cmp	r0, #0
   802d8:	f040 80a8 	bne.w	8042c <sd_mmc_select_slot+0x158>
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
   802dc:	f240 030c 	movw	r3, #12
   802e0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   802e4:	6898      	ldr	r0, [r3, #8]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   802e6:	ea4f 1250 	mov.w	r2, r0, lsr #5
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   802ea:	f502 1100 	add.w	r1, r2, #2097152	; 0x200000
   802ee:	f201 7307 	addw	r3, r1, #1799	; 0x707
   802f2:	ea4f 2243 	mov.w	r2, r3, lsl #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   802f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   802f8:	f000 001f 	and.w	r0, r0, #31
   802fc:	f04f 0101 	mov.w	r1, #1
   80300:	fa01 f300 	lsl.w	r3, r1, r0
   80304:	4213      	tst	r3, r2
   80306:	d01d      	beq.n	80344 <sd_mmc_select_slot+0x70>
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
   80308:	f240 020c 	movw	r2, #12
   8030c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80310:	7b90      	ldrb	r0, [r2, #14]
   80312:	4288      	cmp	r0, r1
   80314:	d10c      	bne.n	80330 <sd_mmc_select_slot+0x5c>
	return false;
}

static inline void SD_MMC_STOP_TIMEOUT(void)
{
	if (sd_mmc_sam_systick_used) {
   80316:	f640 23fe 	movw	r3, #2814	; 0xafe
   8031a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8031e:	7819      	ldrb	r1, [r3, #0]
   80320:	b131      	cbz	r1, 80330 <sd_mmc_select_slot+0x5c>
		SysTick->CTRL = 0;
   80322:	f24e 0010 	movw	r0, #57360	; 0xe010
   80326:	f2ce 0000 	movt	r0, #57344	; 0xe000
   8032a:	f04f 0200 	mov.w	r2, #0
   8032e:	6002      	str	r2, [r0, #0]
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
			SD_MMC_STOP_TIMEOUT();
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   80330:	f240 030c 	movw	r3, #12
   80334:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80338:	f04f 0104 	mov.w	r1, #4
   8033c:	7399      	strb	r1, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
   8033e:	f04f 0002 	mov.w	r0, #2
   80342:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
   80344:	f240 020c 	movw	r2, #12
   80348:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8034c:	7b90      	ldrb	r0, [r2, #14]
   8034e:	2804      	cmp	r0, #4
   80350:	d131      	bne.n	803b6 <sd_mmc_select_slot+0xe2>
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
   80352:	f240 010c 	movw	r1, #12
   80356:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8035a:	f04f 0201 	mov.w	r2, #1
   8035e:	738a      	strb	r2, [r1, #14]
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
   80360:	f24e 0310 	movw	r3, #57360	; 0xe010
   80364:	f2ce 0300 	movt	r3, #57344	; 0xe000
   80368:	6818      	ldr	r0, [r3, #0]
   8036a:	b988      	cbnz	r0, 80390 <sd_mmc_select_slot+0xbc>
		sd_mmc_sam_systick_used = true;
   8036c:	f640 20fe 	movw	r0, #2814	; 0xafe
   80370:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80374:	7002      	strb	r2, [r0, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
   80376:	f24e 0310 	movw	r3, #57360	; 0xe010
   8037a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8037e:	f243 71a0 	movw	r1, #14240	; 0x37a0
   80382:	f2c0 01a0 	movt	r1, #160	; 0xa0
   80386:	6059      	str	r1, [r3, #4]
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
   80388:	601a      	str	r2, [r3, #0]
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
   8038a:	f04f 0002 	mov.w	r0, #2
   8038e:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = true;
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
	} else {
		sd_mmc_sam_systick_used = false;
   80390:	f640 21fe 	movw	r1, #2814	; 0xafe
   80394:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80398:	f04f 0200 	mov.w	r2, #0
   8039c:	700a      	strb	r2, [r1, #0]
#ifdef FREERTOS_USED
		// Note: the define INCLUDE_vTaskDelay must be set to one
		// in FreeRTOSConfig.h file.
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
   8039e:	f648 5080 	movw	r0, #36224	; 0x8d80
   803a2:	f2c0 005b 	movt	r0, #91	; 0x5b
   803a6:	f240 0301 	movw	r3, #1
   803aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   803ae:	4798      	blx	r3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
   803b0:	f04f 0002 	mov.w	r0, #2
   803b4:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
   803b6:	2801      	cmp	r0, #1
   803b8:	d116      	bne.n	803e8 <sd_mmc_select_slot+0x114>
	}
}

static inline bool SD_MMC_IS_TIMEOUT(void)
{
	if (!sd_mmc_sam_systick_used) {
   803ba:	f640 21fe 	movw	r1, #2814	; 0xafe
   803be:	f2c2 0107 	movt	r1, #8199	; 0x2007
   803c2:	780b      	ldrb	r3, [r1, #0]
   803c4:	2b00      	cmp	r3, #0
   803c6:	d03a      	beq.n	8043e <sd_mmc_select_slot+0x16a>
		return (xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE);
#else
		return true;
#endif
	}
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
   803c8:	f24e 0210 	movw	r2, #57360	; 0xe010
   803cc:	f2ce 0200 	movt	r2, #57344	; 0xe000
   803d0:	6810      	ldr	r0, [r2, #0]
   803d2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   803d6:	d02c      	beq.n	80432 <sd_mmc_select_slot+0x15e>
		SysTick->CTRL = 0;
   803d8:	f24e 0110 	movw	r1, #57360	; 0xe010
   803dc:	f2ce 0100 	movt	r1, #57344	; 0xe000
   803e0:	f04f 0300 	mov.w	r3, #0
   803e4:	600b      	str	r3, [r1, #0]
   803e6:	e02a      	b.n	8043e <sd_mmc_select_slot+0x16a>
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
   803e8:	f240 000c 	movw	r0, #12
   803ec:	f2c2 0007 	movt	r0, #8199	; 0x2007
   803f0:	7b81      	ldrb	r1, [r0, #14]
   803f2:	2903      	cmp	r1, #3
   803f4:	d020      	beq.n	80438 <sd_mmc_select_slot+0x164>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   803f6:	f640 3406 	movw	r4, #2822	; 0xb06
   803fa:	f2c2 0407 	movt	r4, #8199	; 0x2007
   803fe:	f04f 0300 	mov.w	r3, #0
   80402:	7023      	strb	r3, [r4, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   80404:	f240 040c 	movw	r4, #12
   80408:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8040c:	f640 3200 	movw	r2, #2816	; 0xb00
   80410:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80414:	6014      	str	r4, [r2, #0]
	sd_mmc_configure_slot();
   80416:	f240 10a5 	movw	r0, #421	; 0x1a5
   8041a:	f2c0 0008 	movt	r0, #8
   8041e:	4780      	blx	r0
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   80420:	7ba0      	ldrb	r0, [r4, #14]

	// Initialize interface
	sd_mmc_slot_sel = slot;
	sd_mmc_card = &sd_mmc_cards[slot];
	sd_mmc_configure_slot();
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   80422:	2802      	cmp	r0, #2
   80424:	bf14      	ite	ne
   80426:	2000      	movne	r0, #0
   80428:	2001      	moveq	r0, #1
   8042a:	bd10      	pop	{r4, pc}
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
		return SD_MMC_ERR_SLOT;
   8042c:	f04f 0004 	mov.w	r0, #4
   80430:	bd10      	pop	{r4, pc}
		return SD_MMC_ERR_NO_CARD;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
   80432:	f04f 0002 	mov.w	r0, #2
   80436:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
   80438:	f04f 0003 	mov.w	r0, #3
   8043c:	bd10      	pop	{r4, pc}
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   8043e:	f240 000c 	movw	r0, #12
   80442:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80446:	f04f 0202 	mov.w	r2, #2
   8044a:	7382      	strb	r2, [r0, #14]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   8044c:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   80450:	f2c0 0106 	movt	r1, #6
   80454:	6001      	str	r1, [r0, #0]
		sd_mmc_cards[slot].bus_width = 1;
   80456:	f04f 0301 	mov.w	r3, #1
   8045a:	7443      	strb	r3, [r0, #17]
		sd_mmc_cards[slot].high_speed = 0;
   8045c:	f04f 0200 	mov.w	r2, #0
   80460:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
   80464:	e7c0      	b.n	803e8 <sd_mmc_select_slot+0x114>
   80466:	bf00      	nop

00080468 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   80468:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   8046a:	f240 030c 	movw	r3, #12
   8046e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80472:	f04f 0204 	mov.w	r2, #4
   80476:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   80478:	f640 3006 	movw	r0, #2822	; 0xb06
   8047c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80480:	f04f 01ff 	mov.w	r1, #255	; 0xff
   80484:	7001      	strb	r1, [r0, #0]
	driver_init();
   80486:	f243 6369 	movw	r3, #13929	; 0x3669
   8048a:	f2c0 0308 	movt	r3, #8
   8048e:	4798      	blx	r3
   80490:	bd08      	pop	{r3, pc}
   80492:	bf00      	nop

00080494 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   80494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80498:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   8049a:	f240 23d5 	movw	r3, #725	; 0x2d5
   8049e:	f2c0 0308 	movt	r3, #8
   804a2:	4798      	blx	r3
   804a4:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   804a6:	2801      	cmp	r0, #1
   804a8:	d006      	beq.n	804b8 <sd_mmc_check+0x24>
		sd_mmc_deselect_slot();
   804aa:	f240 2129 	movw	r1, #553	; 0x229
   804ae:	f2c0 0108 	movt	r1, #8
   804b2:	4788      	blx	r1
		return sd_mmc_err;
   804b4:	f000 bd5d 	b.w	80f72 <sd_mmc_check+0xade>
static bool sd_mmc_mci_card_init(void)
{
	uint8_t v2 = 0;

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   804b8:	f640 3000 	movw	r0, #2816	; 0xb00
   804bc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   804c0:	6801      	ldr	r1, [r0, #0]
   804c2:	f04f 0201 	mov.w	r2, #1
   804c6:	73ca      	strb	r2, [r1, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   804c8:	f04f 0500 	mov.w	r5, #0
   804cc:	740d      	strb	r5, [r1, #16]
	sd_mmc_card->rca = 0;
   804ce:	818d      	strh	r5, [r1, #12]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   804d0:	f243 732d 	movw	r3, #14125	; 0x372d
   804d4:	f2c0 0308 	movt	r3, #8
   804d8:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
   804da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   804de:	4629      	mov	r1, r5
   804e0:	f243 7251 	movw	r2, #14161	; 0x3751
   804e4:	f2c0 0208 	movt	r2, #8
   804e8:	4790      	blx	r2
   804ea:	2800      	cmp	r0, #0
   804ec:	f000 84c1 	beq.w	80e72 <sd_mmc_check+0x9de>
{
	uint32_t resp;

	*v2 = 0;
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   804f0:	f245 5008 	movw	r0, #21768	; 0x5508
   804f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   804f8:	f243 7351 	movw	r3, #14161	; 0x3751
   804fc:	f2c0 0308 	movt	r3, #8
   80500:	4798      	blx	r3
   80502:	2800      	cmp	r0, #0
   80504:	f000 84c3 	beq.w	80e8e <sd_mmc_check+0x9fa>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
	}
	// Check R7 response
	resp = driver_get_response();
   80508:	f243 7079 	movw	r0, #14201	; 0x3779
   8050c:	f2c0 0008 	movt	r0, #8
   80510:	4780      	blx	r0
	if (resp == 0xFFFFFFFF) {
   80512:	f1b0 3fff 	cmp.w	r0, #4294967295
   80516:	f000 84bd 	beq.w	80e94 <sd_mmc_check+0xa00>
		// No compliance R7 value
		return true; // It is not a V2
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   8051a:	ea4f 5100 	mov.w	r1, r0, lsl #20
   8051e:	ea4f 5211 	mov.w	r2, r1, lsr #20
   80522:	f5b2 7fd5 	cmp.w	r2, #426	; 0x1aa
   80526:	f040 84a4 	bne.w	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   8052a:	f04f 0601 	mov.w	r6, #1
   8052e:	f000 bcb3 	b.w	80e98 <sd_mmc_check+0xa04>
	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
		sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
		return true; // No error but card type not updated
	}
	resp = driver_get_response();
   80532:	f243 7079 	movw	r0, #14201	; 0x3779
   80536:	f2c0 0008 	movt	r0, #8
   8053a:	4780      	blx	r0
   8053c:	4601      	mov	r1, r0
	if ((resp & OCR_SDIO_NF) == 0) {
   8053e:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
   80542:	f000 84b5 	beq.w	80eb0 <sd_mmc_check+0xa1c>
   80546:	f241 3989 	movw	r9, #5001	; 0x1389
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   8054a:	f244 5705 	movw	r7, #17669	; 0x4505
   8054e:	f243 7551 	movw	r5, #14161	; 0x3751
   80552:	f2c0 0508 	movt	r5, #8
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80556:	f243 7879 	movw	r8, #14201	; 0x3779
   8055a:	f2c0 0808 	movt	r8, #8
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   8055e:	4638      	mov	r0, r7
   80560:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   80564:	47a8      	blx	r5
   80566:	2800      	cmp	r0, #0
   80568:	f000 8483 	beq.w	80e72 <sd_mmc_check+0x9de>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   8056c:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   8056e:	1e01      	subs	r1, r0, #0
   80570:	db0a      	blt.n	80588 <sd_mmc_check+0xf4>
   80572:	f109 39ff 	add.w	r9, r9, #4294967295
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   80576:	4638      	mov	r0, r7
   80578:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   8057c:	47a8      	blx	r5
   8057e:	2800      	cmp	r0, #0
   80580:	f040 8539 	bne.w	80ff6 <sd_mmc_check+0xb62>
   80584:	f000 bc75 	b.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD5 Timeout on busy\n\r", __func__);
			return false;
		}
	}
	// Update card type at the end of busy
	if ((resp & OCR_SDIO_MP) > 0) {
   80588:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
   8058c:	f640 3300 	movw	r3, #2816	; 0xb00
   80590:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80594:	6818      	ldr	r0, [r3, #0]
   80596:	bf14      	ite	ne
   80598:	2205      	movne	r2, #5
	} else {
		sd_mmc_card->type = CARD_TYPE_SDIO;
   8059a:	2204      	moveq	r2, #4
   8059c:	73c2      	strb	r2, [r0, #15]
   8059e:	f000 bc87 	b.w	80eb0 <sd_mmc_check+0xa1c>
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   805a2:	f241 1737 	movw	r7, #4407	; 0x1137
   805a6:	f04f 0800 	mov.w	r8, #0
   805aa:	f243 7551 	movw	r5, #14161	; 0x3751
   805ae:	f2c0 0508 	movt	r5, #8
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   805b2:	f44f 4900 	mov.w	r9, #32768	; 0x8000
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   805b6:	f243 7a79 	movw	sl, #14201	; 0x3779
   805ba:	f2c0 0a08 	movt	sl, #8
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   805be:	4638      	mov	r0, r7
   805c0:	4641      	mov	r1, r8
   805c2:	47a8      	blx	r5
   805c4:	2800      	cmp	r0, #0
   805c6:	f040 84ea 	bne.w	80f9e <sd_mmc_check+0xb0a>
   805ca:	f000 bc7d 	b.w	80ec8 <sd_mmc_check+0xa34>
   805ce:	4638      	mov	r0, r7
   805d0:	4641      	mov	r1, r8
   805d2:	47a8      	blx	r5
   805d4:	2800      	cmp	r0, #0
   805d6:	f000 8477 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   805da:	4649      	mov	r1, r9
   805dc:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   805e0:	f244 5029 	movw	r0, #17705	; 0x4529
   805e4:	2e00      	cmp	r6, #0
   805e6:	bf08      	it	eq
   805e8:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   805ec:	47a8      	blx	r5
   805ee:	2800      	cmp	r0, #0
   805f0:	f000 846a 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   805f4:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   805f6:	2800      	cmp	r0, #0
   805f8:	da0e      	bge.n	80618 <sd_mmc_check+0x184>
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
   805fa:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   805fe:	f000 848f 	beq.w	80f20 <sd_mmc_check+0xa8c>
				sd_mmc_card->type |= CARD_TYPE_HC;
   80602:	f640 3000 	movw	r0, #2816	; 0xb00
   80606:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8060a:	6801      	ldr	r1, [r0, #0]
   8060c:	7bca      	ldrb	r2, [r1, #15]
   8060e:	f042 0308 	orr.w	r3, r2, #8
   80612:	73cb      	strb	r3, [r1, #15]
   80614:	f000 bc84 	b.w	80f20 <sd_mmc_check+0xa8c>
   80618:	f10b 3bff 	add.w	fp, fp, #4294967295
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   8061c:	4638      	mov	r0, r7
   8061e:	4641      	mov	r1, r8
   80620:	47a8      	blx	r5
   80622:	2800      	cmp	r0, #0
   80624:	f040 84d1 	bne.w	80fca <sd_mmc_check+0xb36>
   80628:	f000 bc4e 	b.w	80ec8 <sd_mmc_check+0xa34>
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   8062c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   80630:	f2c4 051f 	movt	r5, #16415	; 0x401f
   80634:	f244 5701 	movw	r7, #17665	; 0x4501
   80638:	f243 7851 	movw	r8, #14161	; 0x3751
   8063c:	f2c0 0808 	movt	r8, #8
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80640:	f243 7979 	movw	r9, #14201	; 0x3779
   80644:	f2c0 0908 	movt	r9, #8
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   80648:	4638      	mov	r0, r7
   8064a:	4629      	mov	r1, r5
   8064c:	47c0      	blx	r8
   8064e:	2800      	cmp	r0, #0
   80650:	f040 8493 	bne.w	80f7a <sd_mmc_check+0xae6>
   80654:	f000 bc79 	b.w	80f4a <sd_mmc_check+0xab6>
   80658:	4638      	mov	r0, r7
   8065a:	4629      	mov	r1, r5
   8065c:	47c0      	blx	r8
   8065e:	2800      	cmp	r0, #0
   80660:	f000 8473 	beq.w	80f4a <sd_mmc_check+0xab6>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80664:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80666:	2800      	cmp	r0, #0
   80668:	da0d      	bge.n	80686 <sd_mmc_check+0x1f2>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
   8066a:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
   8066e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   80672:	f040 8460 	bne.w	80f36 <sd_mmc_check+0xaa2>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
   80676:	49a6      	ldr	r1, [pc, #664]	; (80910 <sd_mmc_check+0x47c>)
   80678:	680b      	ldr	r3, [r1, #0]
   8067a:	7bda      	ldrb	r2, [r3, #15]
   8067c:	f042 0008 	orr.w	r0, r2, #8
   80680:	73d8      	strb	r0, [r3, #15]
   80682:	f000 bc58 	b.w	80f36 <sd_mmc_check+0xaa2>
   80686:	f106 36ff 	add.w	r6, r6, #4294967295
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   8068a:	4638      	mov	r0, r7
   8068c:	4629      	mov	r1, r5
   8068e:	47c0      	blx	r8
   80690:	2800      	cmp	r0, #0
   80692:	f040 847c 	bne.w	80f8e <sd_mmc_check+0xafa>
   80696:	f000 bc58 	b.w	80f4a <sd_mmc_check+0xab6>
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
		return false;
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
   8069a:	499d      	ldr	r1, [pc, #628]	; (80910 <sd_mmc_check+0x47c>)
   8069c:	6808      	ldr	r0, [r1, #0]
   8069e:	f04f 0201 	mov.w	r2, #1
   806a2:	8182      	strh	r2, [r0, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
   806a4:	f241 1003 	movw	r0, #4355	; 0x1103
   806a8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   806ac:	4b99      	ldr	r3, [pc, #612]	; (80914 <sd_mmc_check+0x480>)
   806ae:	4798      	blx	r3
   806b0:	2800      	cmp	r0, #0
   806b2:	f000 8121 	beq.w	808f8 <sd_mmc_check+0x464>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
   806b6:	4998      	ldr	r1, [pc, #608]	; (80918 <sd_mmc_check+0x484>)
   806b8:	4788      	blx	r1
   806ba:	2800      	cmp	r0, #0
   806bc:	f000 811f 	beq.w	808fe <sd_mmc_check+0x46a>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   806c0:	4893      	ldr	r0, [pc, #588]	; (80910 <sd_mmc_check+0x47c>)
   806c2:	6803      	ldr	r3, [r0, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   806c4:	7c9a      	ldrb	r2, [r3, #18]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   806c6:	f3c2 0183 	ubfx	r1, r2, #2, #4
   806ca:	f101 30ff 	add.w	r0, r1, #4294967295
   806ce:	2803      	cmp	r0, #3
   806d0:	d803      	bhi.n	806da <sd_mmc_check+0x246>
   806d2:	e8df f000 	tbb	[pc, r0]
   806d6:	0a06      	.short	0x0a06
   806d8:	120e      	.short	0x120e
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   806da:	f04f 0112 	mov.w	r1, #18
   806de:	7419      	strb	r1, [r3, #16]
   806e0:	e00e      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   806e2:	f04f 0214 	mov.w	r2, #20
   806e6:	741a      	strb	r2, [r3, #16]
   806e8:	e00a      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   806ea:	f04f 0022 	mov.w	r0, #34	; 0x22
   806ee:	7418      	strb	r0, [r3, #16]
   806f0:	e006      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   806f2:	f04f 0130 	mov.w	r1, #48	; 0x30
   806f6:	7419      	strb	r1, [r3, #16]
   806f8:	e002      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   806fa:	f04f 0240 	mov.w	r2, #64	; 0x40
   806fe:	741a      	strb	r2, [r3, #16]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80700:	7d5a      	ldrb	r2, [r3, #21]
		break;
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   80702:	f002 0007 	and.w	r0, r2, #7
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80706:	4985      	ldr	r1, [pc, #532]	; (8091c <sd_mmc_check+0x488>)
   80708:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   8070c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80710:	fb00 f101 	mul.w	r1, r0, r1
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   80714:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   80718:	4881      	ldr	r0, [pc, #516]	; (80920 <sd_mmc_check+0x48c>)
   8071a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   8071e:	fb02 f101 	mul.w	r1, r2, r1
   80722:	6019      	str	r1, [r3, #0]
   80724:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80726:	7e18      	ldrb	r0, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80728:	7e5a      	ldrb	r2, [r3, #25]
   8072a:	ea4f 0282 	mov.w	r2, r2, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   8072e:	ea42 2080 	orr.w	r0, r2, r0, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80732:	ea40 11a1 	orr.w	r1, r0, r1, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
   80736:	ea4f 5201 	mov.w	r2, r1, lsl #20
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   8073a:	ea4f 5112 	mov.w	r1, r2, lsr #20
   8073e:	f512 1f80 	cmn.w	r2, #1048576	; 0x100000
   80742:	d015      	beq.n	80770 <sd_mmc_check+0x2dc>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80744:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80746:	7eda      	ldrb	r2, [r3, #27]
   80748:	ea4f 0242 	mov.w	r2, r2, lsl #1
   8074c:	ea42 10e0 	orr.w	r0, r2, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   80750:	f101 0101 	add.w	r1, r1, #1
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80754:	f000 0207 	and.w	r2, r0, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   80758:	f102 0202 	add.w	r2, r2, #2
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   8075c:	fa01 f102 	lsl.w	r1, r1, r2
   80760:	7dd8      	ldrb	r0, [r3, #23]
   80762:	f000 020f 	and.w	r2, r0, #15
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80766:	fa01 f102 	lsl.w	r1, r1, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   8076a:	ea4f 2091 	mov.w	r0, r1, lsr #10
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   8076e:	6058      	str	r0, [r3, #4]
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
   80770:	899b      	ldrh	r3, [r3, #12]
	if (!sd_mmc_cmd9_mci()) {
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
   80772:	f243 1007 	movw	r0, #12551	; 0x3107
   80776:	ea4f 4103 	mov.w	r1, r3, lsl #16
   8077a:	4a66      	ldr	r2, [pc, #408]	; (80914 <sd_mmc_check+0x480>)
   8077c:	4790      	blx	r2
   8077e:	2800      	cmp	r0, #0
   80780:	f000 80c0 	beq.w	80904 <sd_mmc_check+0x470>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   80784:	4d62      	ldr	r5, [pc, #392]	; (80910 <sd_mmc_check+0x47c>)
   80786:	6829      	ldr	r1, [r5, #0]
   80788:	7c08      	ldrb	r0, [r1, #16]
   8078a:	283f      	cmp	r0, #63	; 0x3f
   8078c:	f240 809c 	bls.w	808c8 <sd_mmc_check+0x434>
{
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   80790:	f04f 0100 	mov.w	r1, #0
   80794:	9100      	str	r1, [sp, #0]
   80796:	f241 1008 	movw	r0, #4360	; 0x1108
   8079a:	f2c0 0008 	movt	r0, #8
   8079e:	f44f 7200 	mov.w	r2, #512	; 0x200
   807a2:	f04f 0301 	mov.w	r3, #1
   807a6:	4d5f      	ldr	r5, [pc, #380]	; (80924 <sd_mmc_check+0x490>)
   807a8:	47a8      	blx	r5
   807aa:	2800      	cmp	r0, #0
   807ac:	f000 83d0 	beq.w	80f50 <sd_mmc_check+0xabc>
   807b0:	f04f 0500 	mov.w	r5, #0
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
		if (!driver_read_word(&ext_csd)) {
   807b4:	4e5c      	ldr	r6, [pc, #368]	; (80928 <sd_mmc_check+0x494>)
   807b6:	a802      	add	r0, sp, #8
   807b8:	47b0      	blx	r6
   807ba:	2800      	cmp	r0, #0
   807bc:	f000 83c8 	beq.w	80f50 <sd_mmc_check+0xabc>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   807c0:	f105 0501 	add.w	r5, r5, #1
   807c4:	b2ad      	uxth	r5, r5
   807c6:	2d32      	cmp	r5, #50	; 0x32
   807c8:	d1f5      	bne.n	807b6 <sd_mmc_check+0x322>
		if (!driver_read_word(&ext_csd)) {
			return false;
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   807ca:	9e02      	ldr	r6, [sp, #8]
   807cc:	f006 0302 	and.w	r3, r6, #2
   807d0:	b2de      	uxtb	r6, r3
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   807d2:	4a4f      	ldr	r2, [pc, #316]	; (80910 <sd_mmc_check+0x47c>)
   807d4:	6810      	ldr	r0, [r2, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   807d6:	7e87      	ldrb	r7, [r0, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807d8:	7e01      	ldrb	r1, [r0, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   807da:	7e43      	ldrb	r3, [r0, #25]
   807dc:	ea4f 0283 	mov.w	r2, r3, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807e0:	ea42 2081 	orr.w	r0, r2, r1, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807e4:	ea40 17a7 	orr.w	r7, r0, r7, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
   807e8:	ea4f 5107 	mov.w	r1, r7, lsl #20
   807ec:	f511 1f80 	cmn.w	r1, #1048576	; 0x100000
   807f0:	d11a      	bne.n	80828 <sd_mmc_check+0x394>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
			if (!driver_read_word(&sec_count)) {
   807f2:	4f4d      	ldr	r7, [pc, #308]	; (80928 <sd_mmc_check+0x494>)
   807f4:	a803      	add	r0, sp, #12
   807f6:	47b8      	blx	r7
   807f8:	2800      	cmp	r0, #0
   807fa:	f000 83a9 	beq.w	80f50 <sd_mmc_check+0xabc>
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   807fe:	f105 0501 	add.w	r5, r5, #1
   80802:	b2ad      	uxth	r5, r5
   80804:	2d35      	cmp	r5, #53	; 0x35
   80806:	d9f5      	bls.n	807f4 <sd_mmc_check+0x360>
			if (!driver_read_word(&sec_count)) {
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   80808:	4b41      	ldr	r3, [pc, #260]	; (80910 <sd_mmc_check+0x47c>)
   8080a:	681a      	ldr	r2, [r3, #0]
   8080c:	9803      	ldr	r0, [sp, #12]
   8080e:	ea4f 0750 	mov.w	r7, r0, lsr #1
   80812:	6057      	str	r7, [r2, #4]
   80814:	e008      	b.n	80828 <sd_mmc_check+0x394>
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
		if (!driver_read_word(&sec_count)) {
   80816:	a803      	add	r0, sp, #12
   80818:	47b8      	blx	r7
   8081a:	2800      	cmp	r0, #0
   8081c:	f000 8398 	beq.w	80f50 <sd_mmc_check+0xabc>
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   80820:	f105 0501 	add.w	r5, r5, #1
   80824:	b2ad      	uxth	r5, r5
   80826:	e000      	b.n	8082a <sd_mmc_check+0x396>
		if (!driver_read_word(&sec_count)) {
   80828:	4f3f      	ldr	r7, [pc, #252]	; (80928 <sd_mmc_check+0x494>)
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   8082a:	2d7f      	cmp	r5, #127	; 0x7f
   8082c:	d9f3      	bls.n	80816 <sd_mmc_check+0x382>
   8082e:	e392      	b.n	80f56 <sd_mmc_check+0xac2>
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
   80830:	4d3e      	ldr	r5, [pc, #248]	; (8092c <sd_mmc_check+0x498>)
   80832:	7828      	ldrb	r0, [r5, #0]
   80834:	4a3e      	ldr	r2, [pc, #248]	; (80930 <sd_mmc_check+0x49c>)
   80836:	4790      	blx	r2
   80838:	4605      	mov	r5, r0
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
	uint32_t arg;

	switch (bus_width) {
   8083a:	2804      	cmp	r0, #4
   8083c:	d00b      	beq.n	80856 <sd_mmc_check+0x3c2>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
   8083e:	f44f 7100 	mov.w	r1, #512	; 0x200
   80842:	f2c0 11b7 	movt	r1, #439	; 0x1b7
   80846:	f04f 0000 	mov.w	r0, #0
   8084a:	f2c0 10b7 	movt	r0, #439	; 0x1b7
   8084e:	2d08      	cmp	r5, #8
   80850:	bf18      	it	ne
   80852:	4601      	movne	r1, r0
   80854:	e003      	b.n	8085e <sd_mmc_check+0x3ca>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
   80856:	f44f 7180 	mov.w	r1, #256	; 0x100
   8085a:	f2c0 11b7 	movt	r1, #439	; 0x1b7
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
   8085e:	f243 1006 	movw	r0, #12550	; 0x3106
   80862:	4b2c      	ldr	r3, [pc, #176]	; (80914 <sd_mmc_check+0x480>)
   80864:	4798      	blx	r3
   80866:	2800      	cmp	r0, #0
   80868:	f000 837d 	beq.w	80f66 <sd_mmc_check+0xad2>
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   8086c:	4931      	ldr	r1, [pc, #196]	; (80934 <sd_mmc_check+0x4a0>)
   8086e:	4788      	blx	r1
   80870:	f010 0f80 	tst.w	r0, #128	; 0x80
   80874:	f040 8377 	bne.w	80f66 <sd_mmc_check+0xad2>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->bus_width = bus_width;
   80878:	4a25      	ldr	r2, [pc, #148]	; (80910 <sd_mmc_check+0x47c>)
   8087a:	6810      	ldr	r0, [r2, #0]
   8087c:	7445      	strb	r5, [r0, #17]
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
   8087e:	4b2e      	ldr	r3, [pc, #184]	; (80938 <sd_mmc_check+0x4a4>)
   80880:	4798      	blx	r3
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
   80882:	492e      	ldr	r1, [pc, #184]	; (8093c <sd_mmc_check+0x4a8>)
   80884:	4788      	blx	r1
   80886:	b338      	cbz	r0, 808d8 <sd_mmc_check+0x444>
   80888:	b336      	cbz	r6, 808d8 <sd_mmc_check+0x444>
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
   8088a:	f243 1006 	movw	r0, #12550	; 0x3106
   8088e:	f44f 7180 	mov.w	r1, #256	; 0x100
   80892:	f2c0 31b9 	movt	r1, #953	; 0x3b9
   80896:	4a1f      	ldr	r2, [pc, #124]	; (80914 <sd_mmc_check+0x480>)
   80898:	4790      	blx	r2
   8089a:	2800      	cmp	r0, #0
   8089c:	f000 8366 	beq.w	80f6c <sd_mmc_check+0xad8>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   808a0:	4824      	ldr	r0, [pc, #144]	; (80934 <sd_mmc_check+0x4a0>)
   808a2:	4780      	blx	r0
   808a4:	f010 0f80 	tst.w	r0, #128	; 0x80
   808a8:	f040 8360 	bne.w	80f6c <sd_mmc_check+0xad8>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->high_speed = 1;
   808ac:	4e18      	ldr	r6, [pc, #96]	; (80910 <sd_mmc_check+0x47c>)
   808ae:	6837      	ldr	r7, [r6, #0]
   808b0:	f04f 0501 	mov.w	r5, #1
   808b4:	f887 5022 	strb.w	r5, [r7, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
   808b8:	f44f 43ea 	mov.w	r3, #29952	; 0x7500
   808bc:	f2c0 3319 	movt	r3, #793	; 0x319
   808c0:	603b      	str	r3, [r7, #0]
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
   808c2:	491d      	ldr	r1, [pc, #116]	; (80938 <sd_mmc_check+0x4a4>)
   808c4:	4788      	blx	r1
   808c6:	e007      	b.n	808d8 <sd_mmc_check+0x444>
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
   808c8:	4f1b      	ldr	r7, [pc, #108]	; (80938 <sd_mmc_check+0x4a4>)
   808ca:	47b8      	blx	r7
   808cc:	e004      	b.n	808d8 <sd_mmc_check+0x444>
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   808ce:	4640      	mov	r0, r8
   808d0:	4639      	mov	r1, r7
   808d2:	47b0      	blx	r6
   808d4:	b140      	cbz	r0, 808e8 <sd_mmc_check+0x454>
   808d6:	e018      	b.n	8090a <sd_mmc_check+0x476>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
   808d8:	f04f 050a 	mov.w	r5, #10
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   808dc:	f241 1810 	movw	r8, #4368	; 0x1110
   808e0:	f44f 7700 	mov.w	r7, #512	; 0x200
   808e4:	4e0b      	ldr	r6, [pc, #44]	; (80914 <sd_mmc_check+0x480>)
   808e6:	e7f2      	b.n	808ce <sd_mmc_check+0x43a>
   808e8:	f105 32ff 	add.w	r2, r5, #4294967295
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
	}

	uint8_t retry = 10;
	while (retry--) {
   808ec:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
   808f0:	d1ed      	bne.n	808ce <sd_mmc_check+0x43a>
		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return true;
		}
	}
	return false;
   808f2:	f04f 0000 	mov.w	r0, #0
   808f6:	e2ad      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   808f8:	f04f 0000 	mov.w	r0, #0
   808fc:	e2aa      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
		return false;
   808fe:	f04f 0000 	mov.w	r0, #0
   80902:	e2a7      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   80904:	f04f 0000 	mov.w	r0, #0
   80908:	e2a4      	b.n	80e54 <sd_mmc_check+0x9c0>
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return true;
   8090a:	f04f 0001 	mov.w	r0, #1
   8090e:	e2a1      	b.n	80e54 <sd_mmc_check+0x9c0>
   80910:	20070b00 	.word	0x20070b00
   80914:	00083751 	.word	0x00083751
   80918:	0008028d 	.word	0x0008028d
   8091c:	0008b648 	.word	0x0008b648
   80920:	0008b664 	.word	0x0008b664
   80924:	000837e1 	.word	0x000837e1
   80928:	000838b9 	.word	0x000838b9
   8092c:	20070b06 	.word	0x20070b06
   80930:	000836a1 	.word	0x000836a1
   80934:	00083779 	.word	0x00083779
   80938:	000801a5 	.word	0x000801a5
   8093c:	000836ad 	.word	0x000836ad
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
   80940:	f645 3002 	movw	r0, #23298	; 0x5b02
   80944:	f04f 0100 	mov.w	r1, #0
   80948:	f243 7351 	movw	r3, #14161	; 0x3751
   8094c:	f2c0 0308 	movt	r3, #8
   80950:	4798      	blx	r3
   80952:	2800      	cmp	r0, #0
   80954:	f000 828d 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
   80958:	f245 1003 	movw	r0, #20739	; 0x5103
   8095c:	f04f 0100 	mov.w	r1, #0
   80960:	f243 7251 	movw	r2, #14161	; 0x3751
   80964:	f2c0 0208 	movt	r2, #8
   80968:	4790      	blx	r2
   8096a:	2800      	cmp	r0, #0
   8096c:	f000 8281 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
   80970:	f640 3500 	movw	r5, #2816	; 0xb00
   80974:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80978:	682e      	ldr	r6, [r5, #0]
   8097a:	f243 7079 	movw	r0, #14201	; 0x3779
   8097e:	f2c0 0008 	movt	r0, #8
   80982:	4780      	blx	r0
   80984:	ea4f 4110 	mov.w	r1, r0, lsr #16
   80988:	81b1      	strh	r1, [r6, #12]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   8098a:	682b      	ldr	r3, [r5, #0]
   8098c:	7bda      	ldrb	r2, [r3, #15]
   8098e:	f012 0f01 	tst.w	r2, #1
   80992:	d056      	beq.n	80a42 <sd_mmc_check+0x5ae>
		if (!sd_mmc_cmd9_mci()) {
   80994:	f240 208d 	movw	r0, #653	; 0x28d
   80998:	f2c0 0008 	movt	r0, #8
   8099c:	4780      	blx	r0
   8099e:	2800      	cmp	r0, #0
   809a0:	f000 8267 	beq.w	80e72 <sd_mmc_check+0x9de>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   809a4:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   809a6:	7d5a      	ldrb	r2, [r3, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   809a8:	f002 0007 	and.w	r0, r2, #7
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   809ac:	f24b 6148 	movw	r1, #46664	; 0xb648
   809b0:	f2c0 0108 	movt	r1, #8
   809b4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   809b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   809bc:	fb00 f101 	mul.w	r1, r0, r1
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   809c0:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   809c4:	f24b 6008 	movw	r0, #46600	; 0xb608
   809c8:	f2c0 0008 	movt	r0, #8
   809cc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   809d0:	fb02 f101 	mul.w	r1, r2, r1
   809d4:	6019      	str	r1, [r3, #0]
   809d6:	7c98      	ldrb	r0, [r3, #18]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   809d8:	0982      	lsrs	r2, r0, #6
   809da:	d00f      	beq.n	809fc <sd_mmc_check+0x568>
   809dc:	7eda      	ldrb	r2, [r3, #27]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   809de:	7e98      	ldrb	r0, [r3, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   809e0:	7e59      	ldrb	r1, [r3, #25]
   809e2:	ea4f 4101 	mov.w	r1, r1, lsl #16
   809e6:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   809ea:	4302      	orrs	r2, r0
   809ec:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
   809f0:	f101 0101 	add.w	r1, r1, #1
   809f4:	ea4f 2041 	mov.w	r0, r1, lsl #9
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
   809f8:	6058      	str	r0, [r3, #4]
   809fa:	e022      	b.n	80a42 <sd_mmc_check+0x5ae>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   809fc:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   809fe:	7e18      	ldrb	r0, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80a00:	7e5a      	ldrb	r2, [r3, #25]
   80a02:	ea4f 0282 	mov.w	r2, r2, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80a06:	ea42 2080 	orr.w	r0, r2, r0, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80a0a:	ea40 12a1 	orr.w	r2, r0, r1, asr #6
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80a0e:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80a10:	7ed9      	ldrb	r1, [r3, #27]
   80a12:	ea4f 0141 	mov.w	r1, r1, lsl #1
   80a16:	ea41 10e0 	orr.w	r0, r1, r0, asr #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80a1a:	ea4f 5202 	mov.w	r2, r2, lsl #20
   80a1e:	ea4f 5212 	mov.w	r2, r2, lsr #20
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   80a22:	f102 0201 	add.w	r2, r2, #1
   80a26:	f000 0107 	and.w	r1, r0, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   80a2a:	f101 0102 	add.w	r1, r1, #2
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   80a2e:	fa02 f001 	lsl.w	r0, r2, r1
   80a32:	7dda      	ldrb	r2, [r3, #23]
   80a34:	f002 010f 	and.w	r1, r2, #15
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80a38:	fa00 f001 	lsl.w	r0, r0, r1
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
   80a3c:	ea4f 2290 	mov.w	r2, r0, lsr #10
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80a40:	605a      	str	r2, [r3, #4]
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
   80a42:	f640 3300 	movw	r3, #2816	; 0xb00
   80a46:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80a4a:	681a      	ldr	r2, [r3, #0]
   80a4c:	8991      	ldrh	r1, [r2, #12]
			return false;
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
   80a4e:	f243 1007 	movw	r0, #12551	; 0x3107
   80a52:	ea4f 4101 	mov.w	r1, r1, lsl #16
   80a56:	f243 7351 	movw	r3, #14161	; 0x3751
   80a5a:	f2c0 0308 	movt	r3, #8
   80a5e:	4798      	blx	r3
   80a60:	2800      	cmp	r0, #0
   80a62:	f000 8206 	beq.w	80e72 <sd_mmc_check+0x9de>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80a66:	f640 3000 	movw	r0, #2816	; 0xb00
   80a6a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80a6e:	6801      	ldr	r1, [r0, #0]
   80a70:	7bca      	ldrb	r2, [r1, #15]
   80a72:	f012 0f01 	tst.w	r2, #1
   80a76:	d04e      	beq.n	80b16 <sd_mmc_check+0x682>
{
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   80a78:	898b      	ldrh	r3, [r1, #12]
   80a7a:	f241 1037 	movw	r0, #4407	; 0x1137
   80a7e:	ea4f 4103 	mov.w	r1, r3, lsl #16
   80a82:	f243 7251 	movw	r2, #14161	; 0x3751
   80a86:	f2c0 0208 	movt	r2, #8
   80a8a:	4790      	blx	r2
   80a8c:	2800      	cmp	r0, #0
   80a8e:	f000 81f0 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   80a92:	f04f 0301 	mov.w	r3, #1
   80a96:	9300      	str	r3, [sp, #0]
   80a98:	f241 1033 	movw	r0, #4403	; 0x1133
   80a9c:	f2c0 0008 	movt	r0, #8
   80aa0:	f04f 0100 	mov.w	r1, #0
   80aa4:	f04f 0208 	mov.w	r2, #8
   80aa8:	4d4c      	ldr	r5, [pc, #304]	; (80bdc <sd_mmc_check+0x748>)
   80aaa:	47a8      	blx	r5
   80aac:	2800      	cmp	r0, #0
   80aae:	f000 81e0 	beq.w	80e72 <sd_mmc_check+0x9de>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(scr, 1)) {
   80ab2:	a804      	add	r0, sp, #16
   80ab4:	f04f 0101 	mov.w	r1, #1
   80ab8:	4b49      	ldr	r3, [pc, #292]	; (80be0 <sd_mmc_check+0x74c>)
   80aba:	4798      	blx	r3
   80abc:	2800      	cmp	r0, #0
   80abe:	f000 81d8 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80ac2:	4848      	ldr	r0, [pc, #288]	; (80be4 <sd_mmc_check+0x750>)
   80ac4:	4780      	blx	r0
   80ac6:	2800      	cmp	r0, #0
   80ac8:	f000 81d3 	beq.w	80e72 <sd_mmc_check+0x9de>
   80acc:	f89d 1010 	ldrb.w	r1, [sp, #16]
		return false;
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   80ad0:	f001 030f 	and.w	r3, r1, #15
   80ad4:	2b01      	cmp	r3, #1
   80ad6:	d009      	beq.n	80aec <sd_mmc_check+0x658>
   80ad8:	b113      	cbz	r3, 80ae0 <sd_mmc_check+0x64c>
   80ada:	2b02      	cmp	r3, #2
   80adc:	d116      	bne.n	80b0c <sd_mmc_check+0x678>
   80ade:	e00b      	b.n	80af8 <sd_mmc_check+0x664>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   80ae0:	4a41      	ldr	r2, [pc, #260]	; (80be8 <sd_mmc_check+0x754>)
   80ae2:	6813      	ldr	r3, [r2, #0]
   80ae4:	f04f 0010 	mov.w	r0, #16
   80ae8:	7418      	strb	r0, [r3, #16]
   80aea:	e014      	b.n	80b16 <sd_mmc_check+0x682>
		break;

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   80aec:	493e      	ldr	r1, [pc, #248]	; (80be8 <sd_mmc_check+0x754>)
   80aee:	680b      	ldr	r3, [r1, #0]
   80af0:	f04f 021a 	mov.w	r2, #26
   80af4:	741a      	strb	r2, [r3, #16]
   80af6:	e00e      	b.n	80b16 <sd_mmc_check+0x682>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80af8:	f89d 3012 	ldrb.w	r3, [sp, #18]
		break;

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   80afc:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
   80afe:	483a      	ldr	r0, [pc, #232]	; (80be8 <sd_mmc_check+0x754>)
   80b00:	6801      	ldr	r1, [r0, #0]
   80b02:	bf14      	ite	ne
   80b04:	2230      	movne	r2, #48	; 0x30
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
   80b06:	2220      	moveq	r2, #32
   80b08:	740a      	strb	r2, [r1, #16]
   80b0a:	e004      	b.n	80b16 <sd_mmc_check+0x682>
		}
		break;

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   80b0c:	4a36      	ldr	r2, [pc, #216]	; (80be8 <sd_mmc_check+0x754>)
   80b0e:	6810      	ldr	r0, [r2, #0]
   80b10:	f04f 0110 	mov.w	r1, #16
   80b14:	7401      	strb	r1, [r0, #16]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
		if (!sd_acmd51()) {
			return false;
		}
	}
	if (IS_SDIO()) {
   80b16:	f640 3000 	movw	r0, #2816	; 0xb00
   80b1a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80b1e:	6801      	ldr	r1, [r0, #0]
   80b20:	7bcb      	ldrb	r3, [r1, #15]
   80b22:	f003 0204 	and.w	r2, r3, #4
   80b26:	b2d0      	uxtb	r0, r2
   80b28:	2800      	cmp	r0, #0
   80b2a:	f000 8095 	beq.w	80c58 <sd_mmc_check+0x7c4>
 	uint32_t unit;
	uint32_t mul;
	uint8_t tplfe_max_tran_speed;

	// Read CIS area address in CCCR area
	addr_cis = 0; // Init all bytes, because the next function fill 3 bytes only
   80b2e:	f04f 0100 	mov.w	r1, #0
   80b32:	9103      	str	r1, [sp, #12]
	if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, SDIO_CCCR_CIS_PTR,
   80b34:	f04f 0503 	mov.w	r5, #3
   80b38:	9500      	str	r5, [sp, #0]
   80b3a:	f04f 0301 	mov.w	r3, #1
   80b3e:	9301      	str	r3, [sp, #4]
   80b40:	4608      	mov	r0, r1
   80b42:	f04f 0209 	mov.w	r2, #9
   80b46:	f240 15d5 	movw	r5, #469	; 0x1d5
   80b4a:	f2c0 0508 	movt	r5, #8
   80b4e:	47a8      	blx	r5
   80b50:	2800      	cmp	r0, #0
   80b52:	f000 818e 	beq.w	80e72 <sd_mmc_check+0x9de>
			1, 3, true)) {
		sd_mmc_debug("%s: CMD53 Read CIS Fail\n\r", __func__);
		return false;
	}
	if (!driver_start_read_blocks((uint8_t *)&addr_cis, 1)) {
   80b56:	a803      	add	r0, sp, #12
   80b58:	f04f 0101 	mov.w	r1, #1
   80b5c:	4b20      	ldr	r3, [pc, #128]	; (80be0 <sd_mmc_check+0x74c>)
   80b5e:	4798      	blx	r3
   80b60:	2800      	cmp	r0, #0
   80b62:	f000 8186 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80b66:	491f      	ldr	r1, [pc, #124]	; (80be4 <sd_mmc_check+0x750>)
   80b68:	4788      	blx	r1
   80b6a:	2800      	cmp	r0, #0
   80b6c:	f000 8181 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	addr_cis = le32_to_cpu(addr_cis);
   80b70:	9d03      	ldr	r5, [sp, #12]

	// Search Fun0 tuple in the CIA area
	addr = addr_cis;
	while (1) {
		// Read a sample of CIA area
		if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 3, true)) {
   80b72:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80bec <sd_mmc_check+0x758>
			sd_mmc_debug("%s: CMD53 Read CIA Fail\n\r", __func__);
			return false;
		}
		if (!driver_start_read_blocks(buf, 1)) {
   80b76:	4f1a      	ldr	r7, [pc, #104]	; (80be0 <sd_mmc_check+0x74c>)
			return false;
		}
		if (!driver_wait_end_of_read_blocks()) {
   80b78:	4e1a      	ldr	r6, [pc, #104]	; (80be4 <sd_mmc_check+0x750>)

	// Search Fun0 tuple in the CIA area
	addr = addr_cis;
	while (1) {
		// Read a sample of CIA area
		if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 3, true)) {
   80b7a:	f04f 0203 	mov.w	r2, #3
   80b7e:	9200      	str	r2, [sp, #0]
   80b80:	f04f 0301 	mov.w	r3, #1
   80b84:	9301      	str	r3, [sp, #4]
   80b86:	f04f 0000 	mov.w	r0, #0
   80b8a:	4601      	mov	r1, r0
   80b8c:	462a      	mov	r2, r5
   80b8e:	47c0      	blx	r8
   80b90:	2800      	cmp	r0, #0
   80b92:	f000 816e 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Read CIA Fail\n\r", __func__);
			return false;
		}
		if (!driver_start_read_blocks(buf, 1)) {
   80b96:	a804      	add	r0, sp, #16
   80b98:	f04f 0101 	mov.w	r1, #1
   80b9c:	47b8      	blx	r7
   80b9e:	2800      	cmp	r0, #0
   80ba0:	f000 8167 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
		if (!driver_wait_end_of_read_blocks()) {
   80ba4:	47b0      	blx	r6
   80ba6:	2800      	cmp	r0, #0
   80ba8:	f000 8163 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
		if (buf[0] == SDIO_CISTPL_END) {
   80bac:	f89d 0010 	ldrb.w	r0, [sp, #16]
   80bb0:	28ff      	cmp	r0, #255	; 0xff
   80bb2:	f000 815e 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Tuple error\n\r", __func__);
			return false; // Tuple error
		}
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
   80bb6:	2822      	cmp	r0, #34	; 0x22
   80bb8:	d102      	bne.n	80bc0 <sd_mmc_check+0x72c>
   80bba:	f89d 3012 	ldrb.w	r3, [sp, #18]
   80bbe:	b1bb      	cbz	r3, 80bf0 <sd_mmc_check+0x75c>
			break; // Fun0 tuple found
		}
		if (buf[1] == 0) {
   80bc0:	f89d 1011 	ldrb.w	r1, [sp, #17]
   80bc4:	2900      	cmp	r1, #0
   80bc6:	f000 8154 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Tuple error\n\r", __func__);
			return false; // Tuple error
		}

		// Next address
		addr += (buf[1] + 2);
   80bca:	f101 0102 	add.w	r1, r1, #2
   80bce:	186d      	adds	r5, r5, r1
		if (addr > (addr_cis + 256)) {
   80bd0:	9a03      	ldr	r2, [sp, #12]
   80bd2:	f502 7080 	add.w	r0, r2, #256	; 0x100
   80bd6:	4285      	cmp	r5, r0
   80bd8:	d9cf      	bls.n	80b7a <sd_mmc_check+0x6e6>
   80bda:	e14a      	b.n	80e72 <sd_mmc_check+0x9de>
   80bdc:	000837e1 	.word	0x000837e1
   80be0:	0008394d 	.word	0x0008394d
   80be4:	00083a65 	.word	0x00083a65
   80be8:	20070b00 	.word	0x20070b00
   80bec:	000801d5 	.word	0x000801d5
			return false; // Outoff CIS area
		}
	}

	// Read all Fun0 tuple fields: fn0_blk_siz & max_tran_speed
	if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 6, true)) {
   80bf0:	f04f 0306 	mov.w	r3, #6
   80bf4:	9300      	str	r3, [sp, #0]
   80bf6:	f04f 0301 	mov.w	r3, #1
   80bfa:	9301      	str	r3, [sp, #4]
   80bfc:	f04f 0000 	mov.w	r0, #0
   80c00:	4601      	mov	r1, r0
   80c02:	462a      	mov	r2, r5
   80c04:	4dbb      	ldr	r5, [pc, #748]	; (80ef4 <sd_mmc_check+0xa60>)
   80c06:	47a8      	blx	r5
   80c08:	2800      	cmp	r0, #0
   80c0a:	f000 8132 	beq.w	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD53 Read all Fun0 Fail\n\r", __func__);
		return false;
	}
	if (!driver_start_read_blocks(buf, 1)) {
   80c0e:	a804      	add	r0, sp, #16
   80c10:	f04f 0101 	mov.w	r1, #1
   80c14:	4ab8      	ldr	r2, [pc, #736]	; (80ef8 <sd_mmc_check+0xa64>)
   80c16:	4790      	blx	r2
   80c18:	2800      	cmp	r0, #0
   80c1a:	f000 812a 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80c1e:	49b7      	ldr	r1, [pc, #732]	; (80efc <sd_mmc_check+0xa68>)
   80c20:	4788      	blx	r1
   80c22:	2800      	cmp	r0, #0
   80c24:	f000 8125 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	tplfe_max_tran_speed = buf[5];
   80c28:	f89d 3015 	ldrb.w	r3, [sp, #21]
   80c2c:	2b32      	cmp	r3, #50	; 0x32
   80c2e:	bf28      	it	cs
   80c30:	2332      	movcs	r3, #50	; 0x32
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80c32:	48b3      	ldr	r0, [pc, #716]	; (80f00 <sd_mmc_check+0xa6c>)
   80c34:	6802      	ldr	r2, [r0, #0]
		 */
		tplfe_max_tran_speed = 0x32; // 25Mhz
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
   80c36:	f003 0007 	and.w	r0, r3, #7
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80c3a:	49b2      	ldr	r1, [pc, #712]	; (80f04 <sd_mmc_check+0xa70>)
   80c3c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   80c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80c44:	fb00 f101 	mul.w	r1, r0, r1
		tplfe_max_tran_speed = 0x32; // 25Mhz
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
   80c48:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   80c4c:	48ae      	ldr	r0, [pc, #696]	; (80f08 <sd_mmc_check+0xa74>)
   80c4e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   80c52:	fb03 f101 	mul.w	r1, r3, r1
   80c56:	6011      	str	r1, [r2, #0]
	if (IS_SDIO()) {
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
   80c58:	f640 3206 	movw	r2, #2822	; 0xb06
   80c5c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80c60:	7810      	ldrb	r0, [r2, #0]
   80c62:	f243 63a1 	movw	r3, #13985	; 0x36a1
   80c66:	f2c0 0308 	movt	r3, #8
   80c6a:	4798      	blx	r3
   80c6c:	2803      	cmp	r0, #3
   80c6e:	d959      	bls.n	80d24 <sd_mmc_check+0x890>
		// TRY to enable 4-bit mode
		if (IS_SDIO()) {
   80c70:	f640 3000 	movw	r0, #2816	; 0xb00
   80c74:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80c78:	6801      	ldr	r1, [r0, #0]
   80c7a:	7bca      	ldrb	r2, [r1, #15]
   80c7c:	f002 0304 	and.w	r3, r2, #4
   80c80:	b2d8      	uxtb	r0, r3
   80c82:	b330      	cbz	r0, 80cd2 <sd_mmc_check+0x83e>
	 * A SDIO Low-Speed alone can supports 4bit (Optional)
	 */
	uint8_t u8_value;

	// Check 4bit support in 4BLS of "Card Capability" register
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
   80c84:	ad03      	add	r5, sp, #12
   80c86:	9500      	str	r5, [sp, #0]
   80c88:	f04f 0000 	mov.w	r0, #0
   80c8c:	4601      	mov	r1, r0
   80c8e:	f04f 0208 	mov.w	r2, #8
   80c92:	4603      	mov	r3, r0
   80c94:	4d9d      	ldr	r5, [pc, #628]	; (80f0c <sd_mmc_check+0xa78>)
   80c96:	47a8      	blx	r5
   80c98:	2800      	cmp	r0, #0
   80c9a:	f000 80ea 	beq.w	80e72 <sd_mmc_check+0x9de>
			0, &u8_value)) {
		return false;
	}
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
   80c9e:	f99d 100c 	ldrsb.w	r1, [sp, #12]
   80ca2:	2900      	cmp	r1, #0
   80ca4:	da15      	bge.n	80cd2 <sd_mmc_check+0x83e>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_BUSWIDTH_4B;
   80ca6:	ab14      	add	r3, sp, #80	; 0x50
   80ca8:	f04f 0202 	mov.w	r2, #2
   80cac:	f803 2d44 	strb.w	r2, [r3, #-68]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
   80cb0:	9300      	str	r3, [sp, #0]
   80cb2:	f04f 0001 	mov.w	r0, #1
   80cb6:	f04f 0100 	mov.w	r1, #0
   80cba:	f04f 0207 	mov.w	r2, #7
   80cbe:	4603      	mov	r3, r0
   80cc0:	47a8      	blx	r5
   80cc2:	2800      	cmp	r0, #0
   80cc4:	f000 80d5 	beq.w	80e72 <sd_mmc_check+0x9de>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->bus_width = 4;
   80cc8:	488d      	ldr	r0, [pc, #564]	; (80f00 <sd_mmc_check+0xa6c>)
   80cca:	6801      	ldr	r1, [r0, #0]
   80ccc:	f04f 0304 	mov.w	r3, #4
   80cd0:	744b      	strb	r3, [r1, #17]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_bus_width()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
   80cd2:	f640 3200 	movw	r2, #2816	; 0xb00
   80cd6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80cda:	6810      	ldr	r0, [r2, #0]
   80cdc:	7bc1      	ldrb	r1, [r0, #15]
   80cde:	f011 0f01 	tst.w	r1, #1
   80ce2:	d01a      	beq.n	80d1a <sd_mmc_check+0x886>
 */
static bool sd_acmd6(void)
{
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   80ce4:	8983      	ldrh	r3, [r0, #12]
   80ce6:	f241 1037 	movw	r0, #4407	; 0x1137
   80cea:	ea4f 4103 	mov.w	r1, r3, lsl #16
   80cee:	f243 7251 	movw	r2, #14161	; 0x3751
   80cf2:	f2c0 0208 	movt	r2, #8
   80cf6:	4790      	blx	r2
   80cf8:	2800      	cmp	r0, #0
   80cfa:	f000 80ba 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
   80cfe:	f241 1006 	movw	r0, #4358	; 0x1106
   80d02:	f04f 0102 	mov.w	r1, #2
   80d06:	4b82      	ldr	r3, [pc, #520]	; (80f10 <sd_mmc_check+0xa7c>)
   80d08:	4798      	blx	r3
   80d0a:	2800      	cmp	r0, #0
   80d0c:	f000 80b1 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	sd_mmc_card->bus_width = 4;
   80d10:	487b      	ldr	r0, [pc, #492]	; (80f00 <sd_mmc_check+0xa6c>)
   80d12:	6801      	ldr	r1, [r0, #0]
   80d14:	f04f 0204 	mov.w	r2, #4
   80d18:	744a      	strb	r2, [r1, #17]
			if (!sd_acmd6()) {
				return false;
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
   80d1a:	f240 13a5 	movw	r3, #421	; 0x1a5
   80d1e:	f2c0 0308 	movt	r3, #8
   80d22:	4798      	blx	r3
	}
	if (driver_is_high_speed_capable()) {
   80d24:	f243 60ad 	movw	r0, #13997	; 0x36ad
   80d28:	f2c0 0008 	movt	r0, #8
   80d2c:	4780      	blx	r0
   80d2e:	2800      	cmp	r0, #0
   80d30:	f000 8081 	beq.w	80e36 <sd_mmc_check+0x9a2>
		// TRY to enable High-Speed Mode
		if (IS_SDIO()) {
   80d34:	f640 3100 	movw	r1, #2816	; 0xb00
   80d38:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80d3c:	680a      	ldr	r2, [r1, #0]
   80d3e:	7bd3      	ldrb	r3, [r2, #15]
   80d40:	f003 0004 	and.w	r0, r3, #4
   80d44:	b2c1      	uxtb	r1, r0
   80d46:	b359      	cbz	r1, 80da0 <sd_mmc_check+0x90c>
static bool sdio_cmd52_set_high_speed(void)
{
	uint8_t u8_value;

	// Check CIA.HS
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
   80d48:	ad03      	add	r5, sp, #12
   80d4a:	9500      	str	r5, [sp, #0]
   80d4c:	f04f 0000 	mov.w	r0, #0
   80d50:	4601      	mov	r1, r0
   80d52:	f04f 0213 	mov.w	r2, #19
   80d56:	4603      	mov	r3, r0
   80d58:	4d6c      	ldr	r5, [pc, #432]	; (80f0c <sd_mmc_check+0xa78>)
   80d5a:	47a8      	blx	r5
   80d5c:	2800      	cmp	r0, #0
   80d5e:	f000 8088 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
   80d62:	f89d 200c 	ldrb.w	r2, [sp, #12]
   80d66:	f012 0f01 	tst.w	r2, #1
   80d6a:	d019      	beq.n	80da0 <sd_mmc_check+0x90c>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_EHS;
   80d6c:	ab14      	add	r3, sp, #80	; 0x50
   80d6e:	f04f 0002 	mov.w	r0, #2
   80d72:	f803 0d44 	strb.w	r0, [r3, #-68]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
   80d76:	9300      	str	r3, [sp, #0]
   80d78:	f04f 0001 	mov.w	r0, #1
   80d7c:	f04f 0100 	mov.w	r1, #0
   80d80:	f04f 0213 	mov.w	r2, #19
   80d84:	4603      	mov	r3, r0
   80d86:	47a8      	blx	r5
   80d88:	2800      	cmp	r0, #0
   80d8a:	d072      	beq.n	80e72 <sd_mmc_check+0x9de>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->high_speed = 1;
   80d8c:	495c      	ldr	r1, [pc, #368]	; (80f00 <sd_mmc_check+0xa6c>)
   80d8e:	680b      	ldr	r3, [r1, #0]
   80d90:	f04f 0201 	mov.w	r2, #1
   80d94:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
   80d98:	6818      	ldr	r0, [r3, #0]
   80d9a:	ea4f 0140 	mov.w	r1, r0, lsl #1
   80d9e:	6019      	str	r1, [r3, #0]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_high_speed()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
   80da0:	f640 3300 	movw	r3, #2816	; 0xb00
   80da4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80da8:	6818      	ldr	r0, [r3, #0]
   80daa:	7bc2      	ldrb	r2, [r0, #15]
   80dac:	f012 0f01 	tst.w	r2, #1
   80db0:	d03c      	beq.n	80e2c <sd_mmc_check+0x998>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
   80db2:	7c01      	ldrb	r1, [r0, #16]
   80db4:	2910      	cmp	r1, #16
   80db6:	d939      	bls.n	80e2c <sd_mmc_check+0x998>
 */
static bool sd_cm6_set_high_speed(void)
{
	uint8_t switch_status[SD_SW_STATUS_BSIZE];

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
   80db8:	f04f 0301 	mov.w	r3, #1
   80dbc:	9300      	str	r3, [sp, #0]
   80dbe:	f241 1006 	movw	r0, #4358	; 0x1106
   80dc2:	f2c0 0008 	movt	r0, #8
   80dc6:	f64f 7101 	movw	r1, #65281	; 0xff01
   80dca:	f2c8 01ff 	movt	r1, #33023	; 0x80ff
   80dce:	f04f 0240 	mov.w	r2, #64	; 0x40
   80dd2:	4d50      	ldr	r5, [pc, #320]	; (80f14 <sd_mmc_check+0xa80>)
   80dd4:	47a8      	blx	r5
   80dd6:	2800      	cmp	r0, #0
   80dd8:	d04b      	beq.n	80e72 <sd_mmc_check+0x9de>
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
   80dda:	a804      	add	r0, sp, #16
   80ddc:	f04f 0101 	mov.w	r1, #1
   80de0:	4b45      	ldr	r3, [pc, #276]	; (80ef8 <sd_mmc_check+0xa64>)
   80de2:	4798      	blx	r3
   80de4:	2800      	cmp	r0, #0
   80de6:	d044      	beq.n	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80de8:	4844      	ldr	r0, [pc, #272]	; (80efc <sd_mmc_check+0xa68>)
   80dea:	4780      	blx	r0
   80dec:	2800      	cmp	r0, #0
   80dee:	d040      	beq.n	80e72 <sd_mmc_check+0x9de>
		return false;
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   80df0:	4a49      	ldr	r2, [pc, #292]	; (80f18 <sd_mmc_check+0xa84>)
   80df2:	4790      	blx	r2
   80df4:	f010 0f80 	tst.w	r0, #128	; 0x80
   80df8:	d13b      	bne.n	80e72 <sd_mmc_check+0x9de>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80dfa:	f89d 1020 	ldrb.w	r1, [sp, #32]
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
   80dfe:	f001 030f 	and.w	r3, r1, #15
   80e02:	2b0f      	cmp	r3, #15
   80e04:	d012      	beq.n	80e2c <sd_mmc_check+0x998>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80e06:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80e0a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
   80e0e:	ea50 2202 	orrs.w	r2, r0, r2, lsl #8
   80e12:	d12e      	bne.n	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
   80e14:	4941      	ldr	r1, [pc, #260]	; (80f1c <sd_mmc_check+0xa88>)
   80e16:	4788      	blx	r1
	sd_mmc_card->high_speed = 1;
   80e18:	4b39      	ldr	r3, [pc, #228]	; (80f00 <sd_mmc_check+0xa6c>)
   80e1a:	6818      	ldr	r0, [r3, #0]
   80e1c:	f04f 0201 	mov.w	r2, #1
   80e20:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
	sd_mmc_card->clock *= 2;
   80e24:	6801      	ldr	r1, [r0, #0]
   80e26:	ea4f 0341 	mov.w	r3, r1, lsl #1
   80e2a:	6003      	str	r3, [r0, #0]
					return false;
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
   80e2c:	f240 10a5 	movw	r0, #421	; 0x1a5
   80e30:	f2c0 0008 	movt	r0, #8
   80e34:	4780      	blx	r0
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80e36:	f640 3200 	movw	r2, #2816	; 0xb00
   80e3a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80e3e:	6811      	ldr	r1, [r2, #0]
   80e40:	7bcb      	ldrb	r3, [r1, #15]
   80e42:	f013 0f01 	tst.w	r3, #1
   80e46:	d006      	beq.n	80e56 <sd_mmc_check+0x9c2>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   80e48:	f241 1010 	movw	r0, #4368	; 0x1110
   80e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
   80e50:	4a2f      	ldr	r2, [pc, #188]	; (80f10 <sd_mmc_check+0xa7c>)
   80e52:	4790      	blx	r2
		sd_mmc_deselect_slot();
		return sd_mmc_err;
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   80e54:	b168      	cbz	r0, 80e72 <sd_mmc_check+0x9de>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   80e56:	f640 3000 	movw	r0, #2816	; 0xb00
   80e5a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80e5e:	6803      	ldr	r3, [r0, #0]
   80e60:	f04f 0100 	mov.w	r1, #0
   80e64:	7399      	strb	r1, [r3, #14]
		sd_mmc_deselect_slot();
   80e66:	f240 2229 	movw	r2, #553	; 0x229
   80e6a:	f2c0 0208 	movt	r2, #8
   80e6e:	4790      	blx	r2
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   80e70:	e07f      	b.n	80f72 <sd_mmc_check+0xade>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   80e72:	f640 3400 	movw	r4, #2816	; 0xb00
   80e76:	f2c2 0407 	movt	r4, #8199	; 0x2007
   80e7a:	6820      	ldr	r0, [r4, #0]
   80e7c:	f04f 0403 	mov.w	r4, #3
   80e80:	7384      	strb	r4, [r0, #14]
	sd_mmc_deselect_slot();
   80e82:	f240 2329 	movw	r3, #553	; 0x229
   80e86:	f2c0 0308 	movt	r3, #8
   80e8a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   80e8c:	e071      	b.n	80f72 <sd_mmc_check+0xade>
 */
static bool sd_cmd8(uint8_t * v2)
{
	uint32_t resp;

	*v2 = 0;
   80e8e:	f04f 0600 	mov.w	r6, #0
   80e92:	e001      	b.n	80e98 <sd_mmc_check+0xa04>
   80e94:	f04f 0600 	mov.w	r6, #0
static bool sdio_op_cond(void)
{
	uint32_t resp;

	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
   80e98:	f244 5005 	movw	r0, #17669	; 0x4505
   80e9c:	f04f 0100 	mov.w	r1, #0
   80ea0:	f243 7351 	movw	r3, #14161	; 0x3751
   80ea4:	f2c0 0308 	movt	r3, #8
   80ea8:	4798      	blx	r3
   80eaa:	2800      	cmp	r0, #0
   80eac:	f47f ab41 	bne.w	80532 <sd_mmc_check+0x9e>
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
		return false;
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80eb0:	f640 3200 	movw	r2, #2816	; 0xb00
   80eb4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80eb8:	6811      	ldr	r1, [r2, #0]
   80eba:	7bcb      	ldrb	r3, [r1, #15]
   80ebc:	f013 0f01 	tst.w	r3, #1
   80ec0:	f43f ad4a 	beq.w	80958 <sd_mmc_check+0x4c4>
   80ec4:	f7ff bb6d 	b.w	805a2 <sd_mmc_check+0x10e>
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   80ec8:	f640 3000 	movw	r0, #2816	; 0xb00
   80ecc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80ed0:	6801      	ldr	r1, [r0, #0]
   80ed2:	f04f 0302 	mov.w	r3, #2
   80ed6:	73cb      	strb	r3, [r1, #15]
static bool sd_mmc_mci_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
   80ed8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80edc:	f04f 0100 	mov.w	r1, #0
   80ee0:	f243 7251 	movw	r2, #14161	; 0x3751
   80ee4:	f2c0 0208 	movt	r2, #8
   80ee8:	4790      	blx	r2
   80eea:	2800      	cmp	r0, #0
   80eec:	f47f ab9e 	bne.w	8062c <sd_mmc_check+0x198>
   80ef0:	e7b0      	b.n	80e54 <sd_mmc_check+0x9c0>
   80ef2:	bf00      	nop
   80ef4:	000801d5 	.word	0x000801d5
   80ef8:	0008394d 	.word	0x0008394d
   80efc:	00083a65 	.word	0x00083a65
   80f00:	20070b00 	.word	0x20070b00
   80f04:	0008b648 	.word	0x0008b648
   80f08:	0008b608 	.word	0x0008b608
   80f0c:	00080249 	.word	0x00080249
   80f10:	00083751 	.word	0x00083751
   80f14:	000837e1 	.word	0x000837e1
   80f18:	00083779 	.word	0x00083779
   80f1c:	0008372d 	.word	0x0008372d
			sd_mmc_card->type = CARD_TYPE_MMC;
			return sd_mmc_mci_install_mmc();
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80f20:	f640 3000 	movw	r0, #2816	; 0xb00
   80f24:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80f28:	6801      	ldr	r1, [r0, #0]
   80f2a:	7bca      	ldrb	r2, [r1, #15]
   80f2c:	f012 0f01 	tst.w	r2, #1
   80f30:	f47f ad06 	bne.w	80940 <sd_mmc_check+0x4ac>
   80f34:	e510      	b.n	80958 <sd_mmc_check+0x4c4>
		return false;
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
   80f36:	f645 3002 	movw	r0, #23298	; 0x5b02
   80f3a:	f04f 0100 	mov.w	r1, #0
   80f3e:	4b38      	ldr	r3, [pc, #224]	; (81020 <sd_mmc_check+0xb8c>)
   80f40:	4798      	blx	r3
   80f42:	2800      	cmp	r0, #0
   80f44:	f47f aba9 	bne.w	8069a <sd_mmc_check+0x206>
   80f48:	e784      	b.n	80e54 <sd_mmc_check+0x9c0>
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
		return false;
	}

	if (!mmc_mci_op_cond()) {
		return false;
   80f4a:	f04f 0000 	mov.w	r0, #0
   80f4e:	e781      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
   80f50:	f04f 0000 	mov.w	r0, #0
   80f54:	e77e      	b.n	80e54 <sd_mmc_check+0x9c0>
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
   80f56:	4933      	ldr	r1, [pc, #204]	; (81024 <sd_mmc_check+0xb90>)
   80f58:	7808      	ldrb	r0, [r1, #0]
   80f5a:	4b33      	ldr	r3, [pc, #204]	; (81028 <sd_mmc_check+0xb94>)
   80f5c:	4798      	blx	r3
   80f5e:	2803      	cmp	r0, #3
   80f60:	f63f ac66 	bhi.w	80830 <sd_mmc_check+0x39c>
   80f64:	e48d      	b.n	80882 <sd_mmc_check+0x3ee>
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
   80f66:	f04f 0000 	mov.w	r0, #0
   80f6a:	e773      	b.n	80e54 <sd_mmc_check+0x9c0>
			sd_mmc_configure_slot();
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
   80f6c:	f04f 0000 	mov.w	r0, #0
   80f70:	e770      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
   80f72:	4620      	mov	r0, r4
   80f74:	b015      	add	sp, #84	; 0x54
   80f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80f7a:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80f7c:	2800      	cmp	r0, #0
   80f7e:	f6ff ab74 	blt.w	8066a <sd_mmc_check+0x1d6>
   80f82:	f241 0669 	movw	r6, #4201	; 0x1069
   80f86:	f106 36ff 	add.w	r6, r6, #4294967295
   80f8a:	f7ff bb65 	b.w	80658 <sd_mmc_check+0x1c4>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80f8e:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80f90:	2800      	cmp	r0, #0
   80f92:	f6ff ab6a 	blt.w	8066a <sd_mmc_check+0x1d6>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
			}
			break;
		}
		if (retry-- == 0) {
   80f96:	3e01      	subs	r6, #1
   80f98:	f47f ab5e 	bne.w	80658 <sd_mmc_check+0x1c4>
   80f9c:	e7d5      	b.n	80f4a <sd_mmc_check+0xab6>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   80f9e:	4649      	mov	r1, r9
   80fa0:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   80fa4:	f244 5029 	movw	r0, #17705	; 0x4529
   80fa8:	2e00      	cmp	r6, #0
   80faa:	bf08      	it	eq
   80fac:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   80fb0:	47a8      	blx	r5
   80fb2:	2800      	cmp	r0, #0
   80fb4:	d088      	beq.n	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80fb6:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   80fb8:	2800      	cmp	r0, #0
   80fba:	f6ff ab1e 	blt.w	805fa <sd_mmc_check+0x166>
   80fbe:	f640 0b35 	movw	fp, #2101	; 0x835
   80fc2:	f10b 3bff 	add.w	fp, fp, #4294967295
   80fc6:	f7ff bb02 	b.w	805ce <sd_mmc_check+0x13a>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   80fca:	4649      	mov	r1, r9
   80fcc:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   80fd0:	f244 5029 	movw	r0, #17705	; 0x4529
   80fd4:	2e00      	cmp	r6, #0
   80fd6:	bf08      	it	eq
   80fd8:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   80fdc:	47a8      	blx	r5
   80fde:	2800      	cmp	r0, #0
   80fe0:	f43f af72 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80fe4:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   80fe6:	2800      	cmp	r0, #0
   80fe8:	f6ff ab07 	blt.w	805fa <sd_mmc_check+0x166>
			if ((resp & OCR_CCS) != 0) {
				sd_mmc_card->type |= CARD_TYPE_HC;
			}
			break;
		}
		if (retry-- == 0) {
   80fec:	f1bb 0b01 	subs.w	fp, fp, #1
   80ff0:	f47f aaed 	bne.w	805ce <sd_mmc_check+0x13a>
   80ff4:	e768      	b.n	80ec8 <sd_mmc_check+0xa34>
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80ff6:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   80ff8:	1e01      	subs	r1, r0, #0
   80ffa:	f6ff aac5 	blt.w	80588 <sd_mmc_check+0xf4>
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   80ffe:	4638      	mov	r0, r7
   81000:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   81004:	47a8      	blx	r5
   81006:	2800      	cmp	r0, #0
   81008:	f43f af33 	beq.w	80e72 <sd_mmc_check+0x9de>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   8100c:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   8100e:	1e01      	subs	r1, r0, #0
   81010:	f6ff aaba 	blt.w	80588 <sd_mmc_check+0xf4>
			break;
		}
		if (cmd5_retry-- == 0) {
   81014:	f1b9 0902 	subs.w	r9, r9, #2
   81018:	f47f aaa1 	bne.w	8055e <sd_mmc_check+0xca>
   8101c:	e729      	b.n	80e72 <sd_mmc_check+0x9de>
   8101e:	bf00      	nop
   81020:	00083751 	.word	0x00083751
   81024:	20070b06 	.word	0x20070b06
   81028:	000836a1 	.word	0x000836a1

0008102c <sd_mmc_get_type>:
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
   8102c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   8102e:	f240 23d5 	movw	r3, #725	; 0x2d5
   81032:	f2c0 0308 	movt	r3, #8
   81036:	4798      	blx	r3
   81038:	b958      	cbnz	r0, 81052 <sd_mmc_get_type+0x26>
		return CARD_TYPE_UNKNOWN;
	}
	sd_mmc_deselect_slot();
   8103a:	f240 2029 	movw	r0, #553	; 0x229
   8103e:	f2c0 0008 	movt	r0, #8
   81042:	4780      	blx	r0
	return sd_mmc_card->type;
   81044:	f640 3100 	movw	r1, #2816	; 0xb00
   81048:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8104c:	680a      	ldr	r2, [r1, #0]
   8104e:	7bd0      	ldrb	r0, [r2, #15]
   81050:	bd08      	pop	{r3, pc}
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
   81052:	f04f 0000 	mov.w	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
   81056:	bd08      	pop	{r3, pc}

00081058 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   81058:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   8105a:	f240 23d5 	movw	r3, #725	; 0x2d5
   8105e:	f2c0 0308 	movt	r3, #8
   81062:	4798      	blx	r3
   81064:	b958      	cbnz	r0, 8107e <sd_mmc_get_capacity+0x26>
		return 0;
	}
	sd_mmc_deselect_slot();
   81066:	f240 2029 	movw	r0, #553	; 0x229
   8106a:	f2c0 0008 	movt	r0, #8
   8106e:	4780      	blx	r0
	return sd_mmc_card->capacity;
   81070:	f640 3100 	movw	r1, #2816	; 0xb00
   81074:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81078:	680a      	ldr	r2, [r1, #0]
   8107a:	6850      	ldr	r0, [r2, #4]
   8107c:	bd08      	pop	{r3, pc}
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
   8107e:	f04f 0000 	mov.w	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
   81082:	bd08      	pop	{r3, pc}

00081084 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
   81084:	f04f 0000 	mov.w	r0, #0
   81088:	4770      	bx	lr
   8108a:	bf00      	nop

0008108c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   8108c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81090:	b083      	sub	sp, #12
   81092:	468b      	mov	fp, r1
   81094:	4692      	mov	sl, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   81096:	f240 23d5 	movw	r3, #725	; 0x2d5
   8109a:	f2c0 0308 	movt	r3, #8
   8109e:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
   810a0:	4681      	mov	r9, r0
   810a2:	2800      	cmp	r0, #0
   810a4:	f040 8081 	bne.w	811aa <sd_mmc_init_read_blocks+0x11e>
   810a8:	f640 5841 	movw	r8, #3393	; 0xd41
   810ac:	f2c0 0803 	movt	r8, #3
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810b0:	f640 3600 	movw	r6, #2816	; 0xb00
   810b4:	f2c2 0607 	movt	r6, #8199	; 0x2007
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810b8:	f241 150d 	movw	r5, #4365	; 0x110d
   810bc:	f243 7451 	movw	r4, #14161	; 0x3751
   810c0:	f2c0 0408 	movt	r4, #8
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   810c4:	f243 7779 	movw	r7, #14201	; 0x3779
   810c8:	f2c0 0708 	movt	r7, #8
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810cc:	6830      	ldr	r0, [r6, #0]
   810ce:	8981      	ldrh	r1, [r0, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810d0:	4628      	mov	r0, r5
   810d2:	ea4f 4101 	mov.w	r1, r1, lsl #16
   810d6:	47a0      	blx	r4
   810d8:	2800      	cmp	r0, #0
   810da:	d046      	beq.n	8116a <sd_mmc_init_read_blocks+0xde>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   810dc:	47b8      	blx	r7
   810de:	f410 7f80 	tst.w	r0, #256	; 0x100
   810e2:	d14a      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
   810e4:	f108 38ff 	add.w	r8, r8, #4294967295
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810e8:	6832      	ldr	r2, [r6, #0]
   810ea:	8993      	ldrh	r3, [r2, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810ec:	4628      	mov	r0, r5
   810ee:	ea4f 4103 	mov.w	r1, r3, lsl #16
   810f2:	47a0      	blx	r4
   810f4:	2800      	cmp	r0, #0
   810f6:	d15c      	bne.n	811b2 <sd_mmc_init_read_blocks+0x126>
   810f8:	e037      	b.n	8116a <sd_mmc_init_read_blocks+0xde>
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   810fa:	ea4f 214b 	mov.w	r1, fp, lsl #9
   810fe:	e000      	b.n	81102 <sd_mmc_init_read_blocks+0x76>
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
   81100:	4659      	mov	r1, fp
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   81102:	f04f 0301 	mov.w	r3, #1
   81106:	9300      	str	r3, [sp, #0]
   81108:	f44f 7200 	mov.w	r2, #512	; 0x200
   8110c:	4653      	mov	r3, sl
   8110e:	f243 74e1 	movw	r4, #14305	; 0x37e1
   81112:	f2c0 0408 	movt	r4, #8
   81116:	47a0      	blx	r4
   81118:	b938      	cbnz	r0, 8112a <sd_mmc_init_read_blocks+0x9e>
		sd_mmc_deselect_slot();
   8111a:	f240 2129 	movw	r1, #553	; 0x229
   8111e:	f2c0 0108 	movt	r1, #8
   81122:	4788      	blx	r1
		return SD_MMC_ERR_COMM;
   81124:	f04f 0905 	mov.w	r9, #5
   81128:	e03f      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
   8112a:	f243 7079 	movw	r0, #14201	; 0x3779
   8112e:	f2c0 0008 	movt	r0, #8
   81132:	4780      	blx	r0
		if (resp & CARD_STATUS_ERR_RD_WR) {
   81134:	f04f 0100 	mov.w	r1, #0
   81138:	f2ce 4158 	movt	r1, #58456	; 0xe458
   8113c:	4001      	ands	r1, r0
   8113e:	b139      	cbz	r1, 81150 <sd_mmc_init_read_blocks+0xc4>
			sd_mmc_debug("%s: Read blocks %02d resp32 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
   81140:	f240 2029 	movw	r0, #553	; 0x229
   81144:	f2c0 0008 	movt	r0, #8
   81148:	4780      	blx	r0
			return SD_MMC_ERR_COMM;
   8114a:	f04f 0905 	mov.w	r9, #5
   8114e:	e02c      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   81150:	f640 3204 	movw	r2, #2820	; 0xb04
   81154:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81158:	f8a2 a000 	strh.w	sl, [r2]
	sd_mmc_nb_block_to_tranfer = nb_block;
   8115c:	f640 23fc 	movw	r3, #2812	; 0xafc
   81160:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81164:	f8a3 a000 	strh.w	sl, [r3]
	return SD_MMC_OK;
   81168:	e01f      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
		return sd_mmc_err;
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
		sd_mmc_deselect_slot();
   8116a:	f240 2229 	movw	r2, #553	; 0x229
   8116e:	f2c0 0208 	movt	r2, #8
   81172:	4790      	blx	r2
		return SD_MMC_ERR_COMM;
   81174:	f04f 0905 	mov.w	r9, #5
   81178:	e017      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   8117a:	f241 1011 	movw	r0, #4369	; 0x1111
   8117e:	f2c0 0008 	movt	r0, #8
   81182:	f241 1412 	movw	r4, #4370	; 0x1112
   81186:	f2c0 0410 	movt	r4, #16
   8118a:	f1ba 0f01 	cmp.w	sl, #1
   8118e:	bf88      	it	hi
   81190:	4620      	movhi	r0, r4
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   81192:	f640 3200 	movw	r2, #2816	; 0xb00
   81196:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8119a:	6813      	ldr	r3, [r2, #0]
   8119c:	7bd9      	ldrb	r1, [r3, #15]
   8119e:	f001 0408 	and.w	r4, r1, #8
   811a2:	b2e2      	uxtb	r2, r4
   811a4:	2a00      	cmp	r2, #0
   811a6:	d1ab      	bne.n	81100 <sd_mmc_init_read_blocks+0x74>
   811a8:	e7a7      	b.n	810fa <sd_mmc_init_read_blocks+0x6e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
   811aa:	4648      	mov	r0, r9
   811ac:	b003      	add	sp, #12
   811ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   811b2:	47b8      	blx	r7
   811b4:	f410 7f80 	tst.w	r0, #256	; 0x100
   811b8:	d1df      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   811ba:	6830      	ldr	r0, [r6, #0]
   811bc:	8981      	ldrh	r1, [r0, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   811be:	4628      	mov	r0, r5
   811c0:	ea4f 4101 	mov.w	r1, r1, lsl #16
   811c4:	47a0      	blx	r4
   811c6:	2800      	cmp	r0, #0
   811c8:	d0cf      	beq.n	8116a <sd_mmc_init_read_blocks+0xde>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   811ca:	47b8      	blx	r7
   811cc:	f410 7f80 	tst.w	r0, #256	; 0x100
   811d0:	d1d3      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
				break;
			}
		}
		if (nec_timeout-- == 0) {
   811d2:	f1b8 0802 	subs.w	r8, r8, #2
   811d6:	f47f af79 	bne.w	810cc <sd_mmc_init_read_blocks+0x40>
   811da:	e7c6      	b.n	8116a <sd_mmc_init_read_blocks+0xde>

000811dc <sd_mmc_start_read_blocks>:
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   811dc:	b510      	push	{r4, lr}
   811de:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   811e0:	f643 134d 	movw	r3, #14669	; 0x394d
   811e4:	f2c0 0308 	movt	r3, #8
   811e8:	4798      	blx	r3
   811ea:	b948      	cbnz	r0, 81200 <sd_mmc_start_read_blocks+0x24>
		sd_mmc_nb_block_remaining = 0;
   811ec:	f640 3104 	movw	r1, #2820	; 0xb04
   811f0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   811f4:	f04f 0300 	mov.w	r3, #0
   811f8:	800b      	strh	r3, [r1, #0]
		return SD_MMC_ERR_COMM;
   811fa:	f04f 0005 	mov.w	r0, #5
   811fe:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
   81200:	f640 3004 	movw	r0, #2820	; 0xb04
   81204:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81208:	8802      	ldrh	r2, [r0, #0]
   8120a:	1b14      	subs	r4, r2, r4
   8120c:	8004      	strh	r4, [r0, #0]
	return SD_MMC_OK;
   8120e:	f04f 0000 	mov.w	r0, #0
}
   81212:	bd10      	pop	{r4, pc}

00081214 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(void)
{
   81214:	b508      	push	{r3, lr}
	if (!driver_wait_end_of_read_blocks()) {
   81216:	f643 2365 	movw	r3, #14949	; 0x3a65
   8121a:	f2c0 0308 	movt	r3, #8
   8121e:	4798      	blx	r3
   81220:	2800      	cmp	r0, #0
   81222:	d030      	beq.n	81286 <sd_mmc_wait_end_of_read_blocks+0x72>
		return SD_MMC_ERR_COMM;
	}
	if (sd_mmc_nb_block_remaining) {
   81224:	f640 3004 	movw	r0, #2820	; 0xb04
   81228:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8122c:	8801      	ldrh	r1, [r0, #0]
   8122e:	2900      	cmp	r1, #0
   81230:	d12c      	bne.n	8128c <sd_mmc_wait_end_of_read_blocks+0x78>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   81232:	f640 22fc 	movw	r2, #2812	; 0xafc
   81236:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8123a:	8813      	ldrh	r3, [r2, #0]
   8123c:	2b01      	cmp	r3, #1
   8123e:	d107      	bne.n	81250 <sd_mmc_wait_end_of_read_blocks+0x3c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   81240:	f240 2129 	movw	r1, #553	; 0x229
   81244:	f2c0 0108 	movt	r1, #8
   81248:	4788      	blx	r1
		return SD_MMC_OK;
   8124a:	f04f 0000 	mov.w	r0, #0
   8124e:	bd08      	pop	{r3, pc}
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   81250:	f243 100c 	movw	r0, #12556	; 0x310c
   81254:	f04f 0100 	mov.w	r1, #0
   81258:	f243 7251 	movw	r2, #14161	; 0x3751
   8125c:	f2c0 0208 	movt	r2, #8
   81260:	4790      	blx	r2
   81262:	b940      	cbnz	r0, 81276 <sd_mmc_wait_end_of_read_blocks+0x62>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   81264:	f243 100c 	movw	r0, #12556	; 0x310c
   81268:	f04f 0100 	mov.w	r1, #0
   8126c:	f243 7351 	movw	r3, #14161	; 0x3751
   81270:	f2c0 0308 	movt	r3, #8
   81274:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   81276:	f240 2029 	movw	r0, #553	; 0x229
   8127a:	f2c0 0008 	movt	r0, #8
   8127e:	4780      	blx	r0
	return SD_MMC_OK;
   81280:	f04f 0000 	mov.w	r0, #0
   81284:	bd08      	pop	{r3, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(void)
{
	if (!driver_wait_end_of_read_blocks()) {
		return SD_MMC_ERR_COMM;
   81286:	f04f 0005 	mov.w	r0, #5
   8128a:	bd08      	pop	{r3, pc}
	}
	if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
   8128c:	f04f 0000 	mov.w	r0, #0
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   81290:	bd08      	pop	{r3, pc}
   81292:	bf00      	nop

00081294 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   81294:	b5f0      	push	{r4, r5, r6, r7, lr}
   81296:	b083      	sub	sp, #12
   81298:	4606      	mov	r6, r0
   8129a:	460f      	mov	r7, r1
   8129c:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   8129e:	f240 24d5 	movw	r4, #725	; 0x2d5
   812a2:	f2c0 0408 	movt	r4, #8
   812a6:	47a0      	blx	r4
	if (sd_mmc_err != SD_MMC_OK) {
   812a8:	4604      	mov	r4, r0
   812aa:	2800      	cmp	r0, #0
   812ac:	d158      	bne.n	81360 <sd_mmc_init_write_blocks+0xcc>
		return sd_mmc_err;
	}
	if (sd_mmc_is_write_protected(slot)) {
   812ae:	4630      	mov	r0, r6
   812b0:	f241 0385 	movw	r3, #4229	; 0x1085
   812b4:	f2c0 0308 	movt	r3, #8
   812b8:	4798      	blx	r3
   812ba:	b138      	cbz	r0, 812cc <sd_mmc_init_write_blocks+0x38>
		sd_mmc_deselect_slot();
   812bc:	f240 2329 	movw	r3, #553	; 0x229
   812c0:	f2c0 0308 	movt	r3, #8
   812c4:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   812c6:	f04f 0407 	mov.w	r4, #7
   812ca:	e049      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   812cc:	f249 1018 	movw	r0, #37144	; 0x9118
   812d0:	f2c0 0008 	movt	r0, #8
   812d4:	f249 1119 	movw	r1, #37145	; 0x9119
   812d8:	f2c0 0110 	movt	r1, #16
   812dc:	2d01      	cmp	r5, #1
   812de:	bf88      	it	hi
   812e0:	4608      	movhi	r0, r1
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   812e2:	f640 3200 	movw	r2, #2816	; 0xb00
   812e6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   812ea:	6816      	ldr	r6, [r2, #0]
   812ec:	7bf3      	ldrb	r3, [r6, #15]
   812ee:	f003 0108 	and.w	r1, r3, #8
   812f2:	b2ca      	uxtb	r2, r1
   812f4:	b912      	cbnz	r2, 812fc <sd_mmc_init_write_blocks+0x68>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   812f6:	ea4f 2147 	mov.w	r1, r7, lsl #9
   812fa:	e000      	b.n	812fe <sd_mmc_init_write_blocks+0x6a>
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
   812fc:	4639      	mov	r1, r7
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   812fe:	f04f 0601 	mov.w	r6, #1
   81302:	9600      	str	r6, [sp, #0]
   81304:	f44f 7200 	mov.w	r2, #512	; 0x200
   81308:	462b      	mov	r3, r5
   8130a:	f243 76e1 	movw	r6, #14305	; 0x37e1
   8130e:	f2c0 0608 	movt	r6, #8
   81312:	47b0      	blx	r6
   81314:	b938      	cbnz	r0, 81326 <sd_mmc_init_write_blocks+0x92>
		sd_mmc_deselect_slot();
   81316:	f240 2029 	movw	r0, #553	; 0x229
   8131a:	f2c0 0008 	movt	r0, #8
   8131e:	4780      	blx	r0
		return SD_MMC_ERR_COMM;
   81320:	f04f 0405 	mov.w	r4, #5
   81324:	e01c      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
   81326:	f243 7079 	movw	r0, #14201	; 0x3779
   8132a:	f2c0 0008 	movt	r0, #8
   8132e:	4780      	blx	r0
		if (resp & CARD_STATUS_ERR_RD_WR) {
   81330:	f04f 0300 	mov.w	r3, #0
   81334:	f2ce 4358 	movt	r3, #58456	; 0xe458
   81338:	4003      	ands	r3, r0
   8133a:	b13b      	cbz	r3, 8134c <sd_mmc_init_write_blocks+0xb8>
			sd_mmc_debug("%s: Write blocks %02d r1 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
   8133c:	f240 2429 	movw	r4, #553	; 0x229
   81340:	f2c0 0408 	movt	r4, #8
   81344:	47a0      	blx	r4
			return SD_MMC_ERR_COMM;
   81346:	f04f 0405 	mov.w	r4, #5
   8134a:	e009      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   8134c:	f640 3104 	movw	r1, #2820	; 0xb04
   81350:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81354:	800d      	strh	r5, [r1, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   81356:	f640 22fc 	movw	r2, #2812	; 0xafc
   8135a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8135e:	8015      	strh	r5, [r2, #0]
	return SD_MMC_OK;
}
   81360:	4620      	mov	r0, r4
   81362:	b003      	add	sp, #12
   81364:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81366:	bf00      	nop

00081368 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   81368:	b510      	push	{r4, lr}
   8136a:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   8136c:	f643 23dd 	movw	r3, #15069	; 0x3add
   81370:	f2c0 0308 	movt	r3, #8
   81374:	4798      	blx	r3
   81376:	b948      	cbnz	r0, 8138c <sd_mmc_start_write_blocks+0x24>
		sd_mmc_nb_block_remaining = 0;
   81378:	f640 3104 	movw	r1, #2820	; 0xb04
   8137c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81380:	f04f 0300 	mov.w	r3, #0
   81384:	800b      	strh	r3, [r1, #0]
		return SD_MMC_ERR_COMM;
   81386:	f04f 0005 	mov.w	r0, #5
   8138a:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
   8138c:	f640 3004 	movw	r0, #2820	; 0xb04
   81390:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81394:	8802      	ldrh	r2, [r0, #0]
   81396:	1b14      	subs	r4, r2, r4
   81398:	8004      	strh	r4, [r0, #0]
	return SD_MMC_OK;
   8139a:	f04f 0000 	mov.w	r0, #0
}
   8139e:	bd10      	pop	{r4, pc}

000813a0 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(void)
{
   813a0:	b508      	push	{r3, lr}
	if (!driver_wait_end_of_write_blocks()) {
   813a2:	f643 33d5 	movw	r3, #15317	; 0x3bd5
   813a6:	f2c0 0308 	movt	r3, #8
   813aa:	4798      	blx	r3
   813ac:	2800      	cmp	r0, #0
   813ae:	d02f      	beq.n	81410 <sd_mmc_wait_end_of_write_blocks+0x70>
		return SD_MMC_ERR_COMM;
	}
	if (sd_mmc_nb_block_remaining) {
   813b0:	f640 3004 	movw	r0, #2820	; 0xb04
   813b4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   813b8:	8801      	ldrh	r1, [r0, #0]
   813ba:	2900      	cmp	r1, #0
   813bc:	d12b      	bne.n	81416 <sd_mmc_wait_end_of_write_blocks+0x76>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   813be:	f640 22fc 	movw	r2, #2812	; 0xafc
   813c2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   813c6:	8813      	ldrh	r3, [r2, #0]
   813c8:	2b01      	cmp	r3, #1
   813ca:	d107      	bne.n	813dc <sd_mmc_wait_end_of_write_blocks+0x3c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   813cc:	f240 2329 	movw	r3, #553	; 0x229
   813d0:	f2c0 0308 	movt	r3, #8
   813d4:	4798      	blx	r3
		return SD_MMC_OK;
   813d6:	f04f 0000 	mov.w	r0, #0
   813da:	bd08      	pop	{r3, pc}
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   813dc:	f243 100c 	movw	r0, #12556	; 0x310c
   813e0:	f04f 0100 	mov.w	r1, #0
   813e4:	f243 7251 	movw	r2, #14161	; 0x3751
   813e8:	f2c0 0208 	movt	r2, #8
   813ec:	4790      	blx	r2
   813ee:	b938      	cbnz	r0, 81400 <sd_mmc_wait_end_of_write_blocks+0x60>
			sd_mmc_deselect_slot();
   813f0:	f240 2129 	movw	r1, #553	; 0x229
   813f4:	f2c0 0108 	movt	r1, #8
   813f8:	4788      	blx	r1
			return SD_MMC_ERR_COMM;
   813fa:	f04f 0005 	mov.w	r0, #5
   813fe:	bd08      	pop	{r3, pc}
		}
	}
	sd_mmc_deselect_slot();
   81400:	f240 2029 	movw	r0, #553	; 0x229
   81404:	f2c0 0008 	movt	r0, #8
   81408:	4780      	blx	r0
	return SD_MMC_OK;
   8140a:	f04f 0000 	mov.w	r0, #0
   8140e:	bd08      	pop	{r3, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(void)
{
	if (!driver_wait_end_of_write_blocks()) {
		return SD_MMC_ERR_COMM;
   81410:	f04f 0005 	mov.w	r0, #5
   81414:	bd08      	pop	{r3, pc}
	}
	if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
   81416:	f04f 0000 	mov.w	r0, #0
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   8141a:	bd08      	pop	{r3, pc}

0008141c <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   8141c:	b4f0      	push	{r4, r5, r6, r7}
   8141e:	b08c      	sub	sp, #48	; 0x30
   81420:	4606      	mov	r6, r0
   81422:	460f      	mov	r7, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   81424:	ac01      	add	r4, sp, #4
   81426:	f24b 65a4 	movw	r5, #46756	; 0xb6a4
   8142a:	f2c0 0508 	movt	r5, #8
   8142e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81436:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   8143a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8143e:	9b01      	ldr	r3, [sp, #4]
   81440:	fbb7 f0f3 	udiv	r0, r7, r3
   81444:	fbb0 f1f6 	udiv	r1, r0, r6
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81448:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8144c:	d952      	bls.n	814f4 <pwm_clocks_generate+0xd8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8144e:	9902      	ldr	r1, [sp, #8]
   81450:	fbb7 f2f1 	udiv	r2, r7, r1
   81454:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81458:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8145c:	d94f      	bls.n	814fe <pwm_clocks_generate+0xe2>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8145e:	9b03      	ldr	r3, [sp, #12]
   81460:	fbb7 f0f3 	udiv	r0, r7, r3
   81464:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81468:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8146c:	d94a      	bls.n	81504 <pwm_clocks_generate+0xe8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8146e:	9904      	ldr	r1, [sp, #16]
   81470:	fbb7 f2f1 	udiv	r2, r7, r1
   81474:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81478:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8147c:	d945      	bls.n	8150a <pwm_clocks_generate+0xee>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8147e:	9b05      	ldr	r3, [sp, #20]
   81480:	fbb7 f0f3 	udiv	r0, r7, r3
   81484:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81488:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8148c:	d940      	bls.n	81510 <pwm_clocks_generate+0xf4>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8148e:	9906      	ldr	r1, [sp, #24]
   81490:	fbb7 f2f1 	udiv	r2, r7, r1
   81494:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81498:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8149c:	d93b      	bls.n	81516 <pwm_clocks_generate+0xfa>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8149e:	9b07      	ldr	r3, [sp, #28]
   814a0:	fbb7 f0f3 	udiv	r0, r7, r3
   814a4:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814a8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814ac:	d936      	bls.n	8151c <pwm_clocks_generate+0x100>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814ae:	9908      	ldr	r1, [sp, #32]
   814b0:	fbb7 f2f1 	udiv	r2, r7, r1
   814b4:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814b8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814bc:	d931      	bls.n	81522 <pwm_clocks_generate+0x106>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   814c0:	fbb7 f0f3 	udiv	r0, r7, r3
   814c4:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814c8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814cc:	d92c      	bls.n	81528 <pwm_clocks_generate+0x10c>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814ce:	990a      	ldr	r1, [sp, #40]	; 0x28
   814d0:	fbb7 f2f1 	udiv	r2, r7, r1
   814d4:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814d8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814dc:	d927      	bls.n	8152e <pwm_clocks_generate+0x112>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   814e0:	fbb7 f0f3 	udiv	r0, r7, r3
   814e4:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814e8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814ec:	d922      	bls.n	81534 <pwm_clocks_generate+0x118>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   814ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
   814f2:	e022      	b.n	8153a <pwm_clocks_generate+0x11e>
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   814f4:	f04f 0200 	mov.w	r2, #0
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	}

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
   814f8:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
   814fc:	e01d      	b.n	8153a <pwm_clocks_generate+0x11e>
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
		ul_pre++;
   814fe:	f04f 0201 	mov.w	r2, #1
   81502:	e7f9      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81504:	f04f 0202 	mov.w	r2, #2
   81508:	e7f6      	b.n	814f8 <pwm_clocks_generate+0xdc>
   8150a:	f04f 0203 	mov.w	r2, #3
   8150e:	e7f3      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81510:	f04f 0204 	mov.w	r2, #4
   81514:	e7f0      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81516:	f04f 0205 	mov.w	r2, #5
   8151a:	e7ed      	b.n	814f8 <pwm_clocks_generate+0xdc>
   8151c:	f04f 0206 	mov.w	r2, #6
   81520:	e7ea      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81522:	f04f 0207 	mov.w	r2, #7
   81526:	e7e7      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81528:	f04f 0208 	mov.w	r2, #8
   8152c:	e7e4      	b.n	814f8 <pwm_clocks_generate+0xdc>
   8152e:	f04f 0209 	mov.w	r2, #9
   81532:	e7e1      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81534:	f04f 020a 	mov.w	r2, #10
   81538:	e7de      	b.n	814f8 <pwm_clocks_generate+0xdc>
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
	}
}
   8153a:	b00c      	add	sp, #48	; 0x30
   8153c:	bcf0      	pop	{r4, r5, r6, r7}
   8153e:	4770      	bx	lr

00081540 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   81540:	b570      	push	{r4, r5, r6, lr}
   81542:	4606      	mov	r6, r0
   81544:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   81546:	6808      	ldr	r0, [r1, #0]
   81548:	b158      	cbz	r0, 81562 <pwm_init+0x22>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   8154a:	6889      	ldr	r1, [r1, #8]
   8154c:	f241 431d 	movw	r3, #5149	; 0x141d
   81550:	f2c0 0308 	movt	r3, #8
   81554:	4798      	blx	r3
		if (result == PWM_INVALID_ARGUMENT) {
   81556:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8155a:	4288      	cmp	r0, r1
   8155c:	d014      	beq.n	81588 <pwm_init+0x48>
			return result;
		}

		clock = result;
   8155e:	4605      	mov	r5, r0
   81560:	e001      	b.n	81566 <pwm_init+0x26>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   81562:	f04f 0500 	mov.w	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   81566:	6860      	ldr	r0, [r4, #4]
   81568:	b158      	cbz	r0, 81582 <pwm_init+0x42>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   8156a:	68a1      	ldr	r1, [r4, #8]
   8156c:	f241 421d 	movw	r2, #5149	; 0x141d
   81570:	f2c0 0208 	movt	r2, #8
   81574:	4790      	blx	r2

		if (result == PWM_INVALID_ARGUMENT) {
   81576:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8157a:	4298      	cmp	r0, r3
   8157c:	d004      	beq.n	81588 <pwm_init+0x48>
			return result;
		}

		clock |= (result << 16);
   8157e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   81582:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   81584:	f04f 0000 	mov.w	r0, #0
}
   81588:	bd70      	pop	{r4, r5, r6, pc}
   8158a:	bf00      	nop

0008158c <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   8158c:	b470      	push	{r4, r5, r6}
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
   8158e:	680b      	ldr	r3, [r1, #0]
	uint32_t channel = (1 << ch_num);
   81590:	f04f 0201 	mov.w	r2, #1
   81594:	fa02 f203 	lsl.w	r2, r2, r3

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81598:	8a8e      	ldrh	r6, [r1, #20]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   8159a:	684c      	ldr	r4, [r1, #4]
   8159c:	f004 050f 	and.w	r5, r4, #15
   815a0:	432e      	orrs	r6, r5
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   815a2:	890c      	ldrh	r4, [r1, #8]
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   815a4:	4326      	orrs	r6, r4
   815a6:	7a8d      	ldrb	r5, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   815a8:	ea46 2645 	orr.w	r6, r6, r5, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   815ac:	7d8c      	ldrb	r4, [r1, #22]
   815ae:	ea46 4504 	orr.w	r5, r6, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   815b2:	7dce      	ldrb	r6, [r1, #23]
   815b4:	ea45 4546 	orr.w	r5, r5, r6, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   815b8:	7e0c      	ldrb	r4, [r1, #24]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   815ba:	ea45 4684 	orr.w	r6, r5, r4, lsl #18
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = ch_mode_reg;
   815be:	f103 0510 	add.w	r5, r3, #16
   815c2:	ea4f 1445 	mov.w	r4, r5, lsl #5
   815c6:	1905      	adds	r5, r0, r4
   815c8:	5106      	str	r6, [r0, r4]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   815ca:	68cc      	ldr	r4, [r1, #12]
   815cc:	606c      	str	r4, [r5, #4]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   815ce:	690c      	ldr	r4, [r1, #16]
   815d0:	eb00 1543 	add.w	r5, r0, r3, lsl #5
   815d4:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   815d8:	7d8c      	ldrb	r4, [r1, #22]
   815da:	b13c      	cbz	r4, 815ec <pwm_channel_init+0x60>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   815dc:	8b8d      	ldrh	r5, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   815de:	8b4c      	ldrh	r4, [r1, #26]
   815e0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   815e4:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   815e8:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
   815ec:	7fcd      	ldrb	r5, [r1, #31]
   815ee:	fa05 f503 	lsl.w	r5, r5, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
   815f2:	7f8c      	ldrb	r4, [r1, #30]
   815f4:	fa04 f403 	lsl.w	r4, r4, r3
   815f8:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
   815fc:	6485      	str	r5, [r0, #72]	; 0x48
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
   815fe:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   81602:	fa05 f503 	lsl.w	r5, r5, r3
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
   81606:	f891 4020 	ldrb.w	r4, [r1, #32]
   8160a:	fa04 f403 	lsl.w	r4, r4, r3
   8160e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
   81612:	6444      	str	r4, [r0, #68]	; 0x44
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
					ch_num) << 16);

	/* Sync Channels Mode Register */
	if (p_channel->b_sync_ch) {
   81614:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   81618:	b11c      	cbz	r4, 81622 <pwm_channel_init+0x96>
		p_pwm->PWM_SCM |= channel;
   8161a:	6a04      	ldr	r4, [r0, #32]
   8161c:	4314      	orrs	r4, r2
   8161e:	6204      	str	r4, [r0, #32]
   81620:	e003      	b.n	8162a <pwm_channel_init+0x9e>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   81622:	6a04      	ldr	r4, [r0, #32]
   81624:	ea24 0402 	bic.w	r4, r4, r2
   81628:	6204      	str	r4, [r0, #32]
		p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
	} else {
		p_pwm->PWM_FPV1 &= (!((0x01 << ch_num) << 16));
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   8162a:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   8162e:	2c01      	cmp	r4, #1
   81630:	d103      	bne.n	8163a <pwm_channel_init+0xae>
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   81632:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81634:	4314      	orrs	r4, r2
   81636:	6684      	str	r4, [r0, #104]	; 0x68
   81638:	e006      	b.n	81648 <pwm_channel_init+0xbc>
	} else {
		p_pwm->PWM_FPV &= (!(0x01 << ch_num));
   8163a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8163c:	2a00      	cmp	r2, #0
   8163e:	bf14      	ite	ne
   81640:	2400      	movne	r4, #0
   81642:	f004 0401 	andeq.w	r4, r4, #1
   81646:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   81648:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   8164c:	2c01      	cmp	r4, #1
   8164e:	d104      	bne.n	8165a <pwm_channel_init+0xce>
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   81650:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81652:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
   81656:	6682      	str	r2, [r0, #104]	; 0x68
   81658:	e006      	b.n	81668 <pwm_channel_init+0xdc>
	} else {
		p_pwm->PWM_FPV &= (!((0x01 << ch_num) << 16));
   8165a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8165c:	0412      	lsls	r2, r2, #16
   8165e:	bf14      	ite	ne
   81660:	2200      	movne	r2, #0
   81662:	f004 0201 	andeq.w	r2, r4, #1
   81666:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   81668:	2b03      	cmp	r3, #3
   8166a:	d80f      	bhi.n	8168c <pwm_channel_init+0x100>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   8166c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   8166e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   81672:	f04f 02ff 	mov.w	r2, #255	; 0xff
   81676:	fa02 f203 	lsl.w	r2, r2, r3
   8167a:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   8167e:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   81682:	fa01 f303 	lsl.w	r3, r1, r3
   81686:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE1 = fault_enable_reg;
   81688:	66c2      	str	r2, [r0, #108]	; 0x6c
   8168a:	e010      	b.n	816ae <pwm_channel_init+0x122>
	} else {
		ch_num -= 4;
   8168c:	f1a3 0304 	sub.w	r3, r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   81690:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   81692:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   81696:	f04f 02ff 	mov.w	r2, #255	; 0xff
   8169a:	fa02 f203 	lsl.w	r2, r2, r3
   8169e:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   816a2:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   816a6:	fa01 f303 	lsl.w	r3, r1, r3
   816aa:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE2 = fault_enable_reg;
   816ac:	6702      	str	r2, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   816ae:	f04f 0000 	mov.w	r0, #0
   816b2:	bc70      	pop	{r4, r5, r6}
   816b4:	4770      	bx	lr
   816b6:	bf00      	nop

000816b8 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   816b8:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   816ba:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   816bc:	690b      	ldr	r3, [r1, #16]
   816be:	4293      	cmp	r3, r2
   816c0:	d307      	bcc.n	816d2 <pwm_channel_update_duty+0x1a>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   816c2:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   816c4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   816c8:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   816cc:	f04f 0000 	mov.w	r0, #0
   816d0:	e001      	b.n	816d6 <pwm_channel_update_duty+0x1e>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   816d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   816d6:	bc10      	pop	{r4}
   816d8:	4770      	bx	lr
   816da:	bf00      	nop

000816dc <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   816dc:	f04f 0301 	mov.w	r3, #1
   816e0:	fa03 f101 	lsl.w	r1, r3, r1
   816e4:	6041      	str	r1, [r0, #4]
   816e6:	4770      	bx	lr

000816e8 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   816e8:	f04f 0301 	mov.w	r3, #1
   816ec:	fa03 f101 	lsl.w	r1, r3, r1
   816f0:	6081      	str	r1, [r0, #8]
   816f2:	4770      	bx	lr

000816f4 <pwm_channel_disable_interrupt>:
#if (SAM3N || SAM4N)
	p_pwm->PWM_IDR = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IDR1 = (1 << ul_event) | (1 << (ul_fault + 16));
   816f4:	f102 0210 	add.w	r2, r2, #16
   816f8:	f04f 0301 	mov.w	r3, #1
   816fc:	fa03 f202 	lsl.w	r2, r3, r2
   81700:	fa03 f101 	lsl.w	r1, r3, r1
   81704:	430a      	orrs	r2, r1
   81706:	6142      	str	r2, [r0, #20]
   81708:	4770      	bx	lr
   8170a:	bf00      	nop

0008170c <twi_enable_master_mode>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   8170c:	f04f 0308 	mov.w	r3, #8
   81710:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   81712:	f04f 0120 	mov.w	r1, #32
   81716:	6001      	str	r1, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   81718:	f04f 0204 	mov.w	r2, #4
   8171c:	6002      	str	r2, [r0, #0]
   8171e:	4770      	bx	lr

00081720 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   81720:	f44f 53d4 	mov.w	r3, #6784	; 0x1a80
   81724:	f2c0 0306 	movt	r3, #6
   81728:	4299      	cmp	r1, r3
   8172a:	d845      	bhi.n	817b8 <twi_set_speed+0x98>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8172c:	ea4f 0141 	mov.w	r1, r1, lsl #1
   81730:	fbb2 f2f1 	udiv	r2, r2, r1
   81734:	f1a2 0204 	sub.w	r2, r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81738:	2aff      	cmp	r2, #255	; 0xff
   8173a:	d92e      	bls.n	8179a <twi_set_speed+0x7a>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   8173c:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81740:	2aff      	cmp	r2, #255	; 0xff
   81742:	d918      	bls.n	81776 <twi_set_speed+0x56>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   81744:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81748:	2aff      	cmp	r2, #255	; 0xff
   8174a:	d917      	bls.n	8177c <twi_set_speed+0x5c>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   8174c:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81750:	2aff      	cmp	r2, #255	; 0xff
   81752:	d916      	bls.n	81782 <twi_set_speed+0x62>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   81754:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81758:	2aff      	cmp	r2, #255	; 0xff
   8175a:	d915      	bls.n	81788 <twi_set_speed+0x68>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   8175c:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81760:	2aff      	cmp	r2, #255	; 0xff
   81762:	d914      	bls.n	8178e <twi_set_speed+0x6e>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   81764:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81768:	2aff      	cmp	r2, #255	; 0xff
   8176a:	d913      	bls.n	81794 <twi_set_speed+0x74>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   8176c:	ea4f 0252 	mov.w	r2, r2, lsr #1
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
   81770:	f04f 0307 	mov.w	r3, #7
   81774:	e013      	b.n	8179e <twi_set_speed+0x7e>
   81776:	f04f 0301 	mov.w	r3, #1
   8177a:	e010      	b.n	8179e <twi_set_speed+0x7e>
   8177c:	f04f 0302 	mov.w	r3, #2
   81780:	e00d      	b.n	8179e <twi_set_speed+0x7e>
   81782:	f04f 0303 	mov.w	r3, #3
   81786:	e00a      	b.n	8179e <twi_set_speed+0x7e>
   81788:	f04f 0304 	mov.w	r3, #4
   8178c:	e007      	b.n	8179e <twi_set_speed+0x7e>
   8178e:	f04f 0305 	mov.w	r3, #5
   81792:	e004      	b.n	8179e <twi_set_speed+0x7e>
   81794:	f04f 0306 	mov.w	r3, #6
   81798:	e001      	b.n	8179e <twi_set_speed+0x7e>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   8179a:	f04f 0300 	mov.w	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   8179e:	ea4f 6102 	mov.w	r1, r2, lsl #24
			TWI_CWGR_CKDIV(ckdiv);
   817a2:	ea4f 4303 	mov.w	r3, r3, lsl #16
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   817a6:	ea43 4111 	orr.w	r1, r3, r1, lsr #16
   817aa:	b2d2      	uxtb	r2, r2
   817ac:	ea41 0302 	orr.w	r3, r1, r2
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   817b0:	6103      	str	r3, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   817b2:	f04f 0000 	mov.w	r0, #0
   817b6:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   817b8:	f04f 0001 	mov.w	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   817bc:	4770      	bx	lr
   817be:	bf00      	nop

000817c0 <twi_reset>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   817c0:	f04f 0380 	mov.w	r3, #128	; 0x80
   817c4:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   817c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
   817c8:	4770      	bx	lr
   817ca:	bf00      	nop

000817cc <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   817cc:	b538      	push	{r3, r4, r5, lr}
   817ce:	4604      	mov	r4, r0
   817d0:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   817d2:	f04f 33ff 	mov.w	r3, #4294967295
   817d6:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   817d8:	6a03      	ldr	r3, [r0, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   817da:	f241 71c1 	movw	r1, #6081	; 0x17c1
   817de:	f2c0 0108 	movt	r1, #8
   817e2:	4788      	blx	r1

	twi_enable_master_mode(p_twi);
   817e4:	4620      	mov	r0, r4
   817e6:	f241 720d 	movw	r2, #5901	; 0x170d
   817ea:	f2c0 0208 	movt	r2, #8
   817ee:	4790      	blx	r2

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   817f0:	4620      	mov	r0, r4
   817f2:	6869      	ldr	r1, [r5, #4]
   817f4:	682a      	ldr	r2, [r5, #0]
   817f6:	f241 7321 	movw	r3, #5921	; 0x1721
   817fa:	f2c0 0308 	movt	r3, #8
   817fe:	4798      	blx	r3
   81800:	2801      	cmp	r0, #1
   81802:	bf14      	ite	ne
   81804:	2000      	movne	r0, #0
   81806:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   81808:	7a69      	ldrb	r1, [r5, #9]
   8180a:	2901      	cmp	r1, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   8180c:	bf04      	itt	eq
   8180e:	2140      	moveq	r1, #64	; 0x40
   81810:	6021      	streq	r1, [r4, #0]
	}

	return status;
}
   81812:	bd38      	pop	{r3, r4, r5, pc}

00081814 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
   81814:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81818:	6043      	str	r3, [r0, #4]
   8181a:	4770      	bx	lr

0008181c <init_board>:
 #include <asf.h>
 #include "init.h"
 
 
 void init_board(void)
 {
   8181c:	b570      	push	{r4, r5, r6, lr}
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8181e:	f04f 002b 	mov.w	r0, #43	; 0x2b
   81822:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81826:	f246 44cd 	movw	r4, #25805	; 0x64cd
   8182a:	f2c0 0408 	movt	r4, #8
   8182e:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81830:	f04f 002a 	mov.w	r0, #42	; 0x2a
   81834:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81838:	47a0      	blx	r4
	 
	/* Configure HSMCI pins */
	gpio_configure_pin(PIN_HSMCI_MCCDA_GPIO, PIN_HSMCI_MCCDA_FLAGS);
   8183a:	f04f 0014 	mov.w	r0, #20
   8183e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81842:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCCK_GPIO, PIN_HSMCI_MCCK_FLAGS);
   81844:	f04f 0013 	mov.w	r0, #19
   81848:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8184c:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA0_GPIO, PIN_HSMCI_MCDA0_FLAGS);
   8184e:	f04f 0015 	mov.w	r0, #21
   81852:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81856:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA1_GPIO, PIN_HSMCI_MCDA1_FLAGS);
   81858:	f04f 0016 	mov.w	r0, #22
   8185c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81860:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA2_GPIO, PIN_HSMCI_MCDA2_FLAGS);
   81862:	f04f 0017 	mov.w	r0, #23
   81866:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8186a:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA3_GPIO, PIN_HSMCI_MCDA3_FLAGS);
   8186c:	f04f 0018 	mov.w	r0, #24
   81870:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81874:	47a0      	blx	r4
	/* Configure SD/MMC card detect pin */
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
   81876:	f04f 0067 	mov.w	r0, #103	; 0x67
   8187a:	f04f 0108 	mov.w	r1, #8
   8187e:	47a0      	blx	r4
	
	/* Configure EEPROM pins **/	
	pmc_enable_periph_clk(ID_TWI0);
   81880:	f04f 0016 	mov.w	r0, #22
   81884:	f246 76f1 	movw	r6, #26609	; 0x67f1
   81888:	f2c0 0608 	movt	r6, #8
   8188c:	47b0      	blx	r6
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   8188e:	f04f 0011 	mov.w	r0, #17
   81892:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81896:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   81898:	f04f 0012 	mov.w	r0, #18
   8189c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   818a0:	47a0      	blx	r4
	 
	/* Enable power to the SD card slot */
	pmc_enable_periph_clk(VDD_MCI_PIO_ID);
   818a2:	f04f 000c 	mov.w	r0, #12
   818a6:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   818a8:	f44f 5580 	mov.w	r5, #4096	; 0x1000
   818ac:	f2c4 050e 	movt	r5, #16398	; 0x400e
   818b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   818b4:	612b      	str	r3, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   818b6:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   818ba:	636b      	str	r3, [r5, #52]	; 0x34
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   818bc:	f44f 6460 	mov.w	r4, #3584	; 0xe00
   818c0:	f2c4 040e 	movt	r4, #16398	; 0x400e
   818c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   818c8:	6620      	str	r0, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   818ca:	6560      	str	r0, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   818cc:	6260      	str	r0, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   818ce:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   818d2:	6f22      	ldr	r2, [r4, #112]	; 0x70
   818d4:	4302      	orrs	r2, r0
   818d6:	6722      	str	r2, [r4, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   818d8:	6060      	str	r0, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   818da:	f04f 0101 	mov.w	r1, #1
   818de:	6621      	str	r1, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   818e0:	6561      	str	r1, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   818e2:	6261      	str	r1, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   818e4:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   818e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
   818ea:	430b      	orrs	r3, r1
   818ec:	6723      	str	r3, [r4, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   818ee:	6061      	str	r1, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   818f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   818f4:	6620      	str	r0, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   818f6:	6560      	str	r0, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   818f8:	6260      	str	r0, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   818fa:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   818fe:	6f22      	ldr	r2, [r4, #112]	; 0x70
   81900:	4302      	orrs	r2, r0
   81902:	6722      	str	r2, [r4, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   81904:	6060      	str	r0, [r4, #4]
	ioport_disable_pin(PIN_LED2_GPIO);
	ioport_set_pin_mode(PIN_LED3_GPIO, PIN_LED3_FLAGS);
	ioport_disable_pin(PIN_LED3_GPIO);
	 	 
	/* User button */
	pmc_enable_periph_clk(USR_BUTTON_PIO_ID);
   81906:	f04f 000c 	mov.w	r0, #12
   8190a:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8190c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   81910:	6169      	str	r1, [r5, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81912:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   81916:	6669      	str	r1, [r5, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81918:	6569      	str	r1, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   8191a:	6229      	str	r1, [r5, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   8191c:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81920:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   81922:	f423 0000 	bic.w	r0, r3, #8388608	; 0x800000
   81926:	6728      	str	r0, [r5, #112]	; 0x70
	ioport_set_pin_dir(GPIO_USR_BUTTON, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_USR_BUTTON, GPIO_USR_BUTTON_FLAGS);
	 
	/* Sync signals */
	pmc_enable_periph_clk(SYNC_PIO_ID);
   81928:	f04f 000e 	mov.w	r0, #14
   8192c:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8192e:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
   81932:	f2c4 050e 	movt	r5, #16398	; 0x400e
   81936:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8193a:	616a      	str	r2, [r5, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8193c:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   81940:	666a      	str	r2, [r5, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81942:	656a      	str	r2, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   81944:	622a      	str	r2, [r5, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   81946:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   8194a:	6f29      	ldr	r1, [r5, #112]	; 0x70
   8194c:	f421 6380 	bic.w	r3, r1, #1024	; 0x400
   81950:	672b      	str	r3, [r5, #112]	; 0x70
	ioport_set_pin_dir(GPIO_SYNC, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_SYNC, GPIO_SYNC_FLAGS);
	pmc_enable_periph_clk(SYNC_READ_PIO_ID);
   81952:	f04f 000b 	mov.w	r0, #11
   81956:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81958:	f04f 0020 	mov.w	r0, #32
   8195c:	6120      	str	r0, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8195e:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81962:	6360      	str	r0, [r4, #52]	; 0x34
	ioport_set_pin_dir(SYNC_READ_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(SYNC_READ_GPIO, SYNC_READ_ACTIVE_LEVEL);
	pmc_enable_periph_clk(SYNC_WRITE_PIO_ID);
   81964:	f04f 000b 	mov.w	r0, #11
   81968:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8196a:	f04f 0280 	mov.w	r2, #128	; 0x80
   8196e:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81970:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81974:	6322      	str	r2, [r4, #48]	; 0x30
	ioport_set_pin_dir(SYNC_WRITE_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(SYNC_WRITE_GPIO, SYNC_WRITE_INACTIVE_LEVEL);
	
	/* 12v detect */
	pmc_enable_periph_clk(DET_12V_PIO_ID);
   81976:	f04f 000b 	mov.w	r0, #11
   8197a:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8197c:	f04f 0102 	mov.w	r1, #2
   81980:	6161      	str	r1, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81982:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81986:	6621      	str	r1, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81988:	6561      	str	r1, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   8198a:	6221      	str	r1, [r4, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   8198c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81990:	6f23      	ldr	r3, [r4, #112]	; 0x70
   81992:	f023 0002 	bic.w	r0, r3, #2
   81996:	6720      	str	r0, [r4, #112]	; 0x70
	ioport_set_pin_dir(GPIO_DET_12V, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_DET_12V, GPIO_DET_12V_FLAGS);
	
	/* 12v power ok */
	pmc_enable_periph_clk(OK_12V_PIO_ID);
   81998:	f04f 000e 	mov.w	r0, #14
   8199c:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8199e:	f44f 7280 	mov.w	r2, #256	; 0x100
   819a2:	616a      	str	r2, [r5, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   819a4:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   819a8:	662a      	str	r2, [r5, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   819aa:	656a      	str	r2, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   819ac:	622a      	str	r2, [r5, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   819ae:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   819b2:	6f29      	ldr	r1, [r5, #112]	; 0x70
   819b4:	f421 7380 	bic.w	r3, r1, #256	; 0x100
   819b8:	672b      	str	r3, [r5, #112]	; 0x70
	ioport_set_pin_dir(GPIO_OK_12V, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_OK_12V, GPIO_OK_12V_FLAGS);
	
	/* 12v enable */	
	pmc_enable_periph_clk(ENABLE_12V_PIO_ID);
   819ba:	f04f 000e 	mov.w	r0, #14
   819be:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   819c0:	f44f 7000 	mov.w	r0, #512	; 0x200
   819c4:	6128      	str	r0, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   819c6:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   819ca:	6368      	str	r0, [r5, #52]	; 0x34
   819cc:	bd70      	pop	{r4, r5, r6, pc}
   819ce:	bf00      	nop

000819d0 <switch_on_off_lights>:
uint16_t lights_off = FALSE;


void switch_on_off_lights(uint16_t bool_lights)
{
	lights_off = bool_lights;
   819d0:	f640 3308 	movw	r3, #2824	; 0xb08
   819d4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   819d8:	8018      	strh	r0, [r3, #0]
   819da:	4770      	bx	lr

000819dc <init_module_peripherals_bp>:
}

// Here should be all the initialization functions for the module before 12v power
void init_module_peripherals_bp(void)
{
   819dc:	4770      	bx	lr
   819de:	bf00      	nop

000819e0 <init_module_peripherals_ap>:
	
}

// Here should be all the initialization functions for the module after 12v power
void init_module_peripherals_ap(void)
{
   819e0:	4770      	bx	lr
   819e2:	bf00      	nop

000819e4 <deinit_module_peripherals>:
	
}

// Here should be all the deinitialization functions for the module before 12v power removal
void deinit_module_peripherals(void)
{
   819e4:	4770      	bx	lr
   819e6:	bf00      	nop

000819e8 <init_i2c>:
twi_options_t i2c_options;
twi_packet_t i2c_packet;


void init_i2c(void)
{	
   819e8:	b538      	push	{r3, r4, r5, lr}
	i2c_options.master_clk = sysclk_get_cpu_hz();
   819ea:	f241 6448 	movw	r4, #5704	; 0x1648
   819ee:	f2c2 0407 	movt	r4, #8199	; 0x2007
   819f2:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
   819f6:	f2c0 5301 	movt	r3, #1281	; 0x501
   819fa:	6023      	str	r3, [r4, #0]
	i2c_options.speed = 400000;
   819fc:	f44f 50d4 	mov.w	r0, #6784	; 0x1a80
   81a00:	f2c0 0006 	movt	r0, #6
   81a04:	6060      	str	r0, [r4, #4]
	i2c_options.chip = EEPROM_ADDR;
   81a06:	f04f 0150 	mov.w	r1, #80	; 0x50
   81a0a:	7221      	strb	r1, [r4, #8]
	i2c_options.smbus = 0;
   81a0c:	f04f 0200 	mov.w	r2, #0
   81a10:	7262      	strb	r2, [r4, #9]
	twi_enable_master_mode(TWI0);
   81a12:	f44f 4540 	mov.w	r5, #49152	; 0xc000
   81a16:	f2c4 0508 	movt	r5, #16392	; 0x4008
   81a1a:	4628      	mov	r0, r5
   81a1c:	f241 730d 	movw	r3, #5901	; 0x170d
   81a20:	f2c0 0308 	movt	r3, #8
   81a24:	4798      	blx	r3
	twi_master_init(TWI0, &i2c_options);	
   81a26:	4628      	mov	r0, r5
   81a28:	4621      	mov	r1, r4
   81a2a:	f241 72cd 	movw	r2, #6093	; 0x17cd
   81a2e:	f2c0 0208 	movt	r2, #8
   81a32:	4790      	blx	r2
   81a34:	bd38      	pop	{r3, r4, r5, pc}
   81a36:	bf00      	nop

00081a38 <init_pwm>:
	while(twi_probe(TWI0, EEPROM_ADDR) != TWI_SUCCESS);
	return (RET_TYPE)twi_master_read(TWI0, &i2c_packet);
}

void init_pwm(void)
{
   81a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81a3c:	b085      	sub	sp, #20
	/* Enable PWM peripheral clock */
	pmc_enable_periph_clk(ID_PWM);
   81a3e:	f04f 0024 	mov.w	r0, #36	; 0x24
   81a42:	f246 73f1 	movw	r3, #26609	; 0x67f1
   81a46:	f2c0 0308 	movt	r3, #8
   81a4a:	4798      	blx	r3

	/* Disable PWM channels for LEDs */
	pwm_channel_disable(PWM, PIN_LED1_CHANNEL);
   81a4c:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   81a50:	f2c4 0409 	movt	r4, #16393	; 0x4009
   81a54:	4620      	mov	r0, r4
   81a56:	f04f 0101 	mov.w	r1, #1
   81a5a:	f241 65e9 	movw	r5, #5865	; 0x16e9
   81a5e:	f2c0 0508 	movt	r5, #8
   81a62:	47a8      	blx	r5
	pwm_channel_disable(PWM, PIN_LED2_CHANNEL);
   81a64:	4620      	mov	r0, r4
   81a66:	f04f 0103 	mov.w	r1, #3
   81a6a:	47a8      	blx	r5
	pwm_channel_disable(PWM, PIN_LED3_CHANNEL);
   81a6c:	4620      	mov	r0, r4
   81a6e:	f04f 0102 	mov.w	r1, #2
   81a72:	47a8      	blx	r5

	/* Set PWM clock A as LED_PWM_FREQUENCY*PERIOD_VALUE */
	pwm_clock_t clock_setting = {
   81a74:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
   81a78:	9001      	str	r0, [sp, #4]
   81a7a:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
   81a7e:	f2c0 5101 	movt	r1, #1281	; 0x501
   81a82:	9102      	str	r1, [sp, #8]
   81a84:	9103      	str	r1, [sp, #12]
		.ul_clka = LED_PWM_FREQUENCY * LED_PWM_PERIOD_VALUE,
		.ul_clkb = sysclk_get_cpu_hz(),
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &clock_setting);
   81a86:	4620      	mov	r0, r4
   81a88:	a901      	add	r1, sp, #4
   81a8a:	f241 5241 	movw	r2, #5441	; 0x1541
   81a8e:	f2c0 0208 	movt	r2, #8
   81a92:	4790      	blx	r2

	/* Initialize PWM channel for LED1 */
	/* Period is left-aligned */
	g_pwm_channel_led1.alignment = PWM_ALIGN_LEFT;
   81a94:	f241 6168 	movw	r1, #5736	; 0x1668
   81a98:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81a9c:	f04f 0500 	mov.w	r5, #0
   81aa0:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a low level */
	g_pwm_channel_led1.polarity = PWM_HIGH;
   81aa2:	f04f 0601 	mov.w	r6, #1
   81aa6:	728e      	strb	r6, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led1.ul_prescaler = PWM_CMR_CPRE_CLKA;
   81aa8:	f04f 0b0b 	mov.w	fp, #11
   81aac:	f8c1 b004 	str.w	fp, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led1.ul_period = LED_PWM_PERIOD_VALUE;
   81ab0:	f44f 6a80 	mov.w	sl, #1024	; 0x400
   81ab4:	f8c1 a010 	str.w	sl, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led1.ul_duty = LED_INIT_DUTY_VALUE;
   81ab8:	60cd      	str	r5, [r1, #12]
	g_pwm_channel_led1.channel = PIN_LED1_CHANNEL;
   81aba:	600e      	str	r6, [r1, #0]
	pwm_channel_init(PWM, &g_pwm_channel_led1);
   81abc:	4620      	mov	r0, r4
   81abe:	f241 598d 	movw	r9, #5517	; 0x158d
   81ac2:	f2c0 0908 	movt	r9, #8
   81ac6:	47c8      	blx	r9

	/* Enable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_LED1_CHANNEL, 0);
   81ac8:	4620      	mov	r0, r4
   81aca:	4631      	mov	r1, r6
   81acc:	462a      	mov	r2, r5
   81ace:	f241 68f5 	movw	r8, #5877	; 0x16f5
   81ad2:	f2c0 0808 	movt	r8, #8
   81ad6:	47c0      	blx	r8
	//pwm_channel_enable_interrupt(PWM, PIN_LED1_CHANNEL, 0);

	/* Initialize PWM channel for LED2 */
	/* Period is center-aligned */
	g_pwm_channel_led2.alignment = PWM_ALIGN_LEFT;
   81ad8:	f241 61b8 	movw	r1, #5816	; 0x16b8
   81adc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81ae0:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led2.polarity = PWM_HIGH;
   81ae2:	728e      	strb	r6, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led2.ul_prescaler = PWM_CMR_CPRE_CLKA;
   81ae4:	f8c1 b004 	str.w	fp, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led2.ul_period = LED_PWM_PERIOD_VALUE;
   81ae8:	f8c1 a010 	str.w	sl, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led2.ul_duty = LED_INIT_DUTY_VALUE;
   81aec:	60cd      	str	r5, [r1, #12]
	g_pwm_channel_led2.channel = PIN_LED2_CHANNEL;
   81aee:	f04f 0703 	mov.w	r7, #3
   81af2:	600f      	str	r7, [r1, #0]
	pwm_channel_init(PWM, &g_pwm_channel_led2);
   81af4:	4620      	mov	r0, r4
   81af6:	47c8      	blx	r9

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_LED2_CHANNEL, 0);
   81af8:	4620      	mov	r0, r4
   81afa:	4639      	mov	r1, r7
   81afc:	462a      	mov	r2, r5
   81afe:	47c0      	blx	r8

	/* Initialize PWM channel for LED3 */
	/* Period is center-aligned */
	g_pwm_channel_led3.alignment = PWM_ALIGN_LEFT;
   81b00:	f241 6390 	movw	r3, #5776	; 0x1690
   81b04:	4619      	mov	r1, r3
   81b06:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81b0a:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led3.polarity = PWM_LOW;
   81b0c:	f04f 0000 	mov.w	r0, #0
   81b10:	7288      	strb	r0, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led3.ul_prescaler = PWM_CMR_CPRE_CLKA;
   81b12:	f8c1 b004 	str.w	fp, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led3.ul_period = LED_PWM_PERIOD_VALUE;
   81b16:	f8c1 a010 	str.w	sl, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led3.ul_duty = LED_INIT_DUTY_VALUE;
   81b1a:	60cd      	str	r5, [r1, #12]
	g_pwm_channel_led3.channel = PIN_LED3_CHANNEL;
   81b1c:	f04f 0a02 	mov.w	sl, #2
   81b20:	f8c1 a000 	str.w	sl, [r1]
	pwm_channel_init(PWM, &g_pwm_channel_led3);
   81b24:	4620      	mov	r0, r4
   81b26:	47c8      	blx	r9

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_LED3_CHANNEL, 0);
   81b28:	4620      	mov	r0, r4
   81b2a:	4651      	mov	r1, sl
   81b2c:	462a      	mov	r2, r5
   81b2e:	47c0      	blx	r8
	
	/* Enable PWM channels for LEDs */
	pwm_channel_enable(PWM, PIN_LED1_CHANNEL);
   81b30:	4620      	mov	r0, r4
   81b32:	4631      	mov	r1, r6
   81b34:	f241 65dd 	movw	r5, #5853	; 0x16dd
   81b38:	f2c0 0508 	movt	r5, #8
   81b3c:	47a8      	blx	r5
	pwm_channel_enable(PWM, PIN_LED2_CHANNEL);
   81b3e:	4620      	mov	r0, r4
   81b40:	4639      	mov	r1, r7
   81b42:	47a8      	blx	r5
	pwm_channel_enable(PWM, PIN_LED3_CHANNEL);
   81b44:	4620      	mov	r0, r4
   81b46:	4651      	mov	r1, sl
   81b48:	47a8      	blx	r5
}
   81b4a:	b005      	add	sp, #20
   81b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00081b50 <set_user_led_colour>:

// Set user led colour
void set_user_led_colour(uint16_t red_val, uint16_t green_val, uint16_t blue_val)
{
   81b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81b52:	4603      	mov	r3, r0
   81b54:	460e      	mov	r6, r1
   81b56:	4617      	mov	r7, r2
	pwm_channel_update_duty(PWM, &g_pwm_channel_led1, red_val);
   81b58:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   81b5c:	f2c4 0409 	movt	r4, #16393	; 0x4009
   81b60:	4620      	mov	r0, r4
   81b62:	f241 6168 	movw	r1, #5736	; 0x1668
   81b66:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81b6a:	461a      	mov	r2, r3
   81b6c:	f241 65b9 	movw	r5, #5817	; 0x16b9
   81b70:	f2c0 0508 	movt	r5, #8
   81b74:	47a8      	blx	r5
	pwm_channel_update_duty(PWM, &g_pwm_channel_led2, blue_val);
   81b76:	4620      	mov	r0, r4
   81b78:	f241 61b8 	movw	r1, #5816	; 0x16b8
   81b7c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81b80:	463a      	mov	r2, r7
   81b82:	47a8      	blx	r5
	pwm_channel_update_duty(PWM, &g_pwm_channel_led3, green_val);
   81b84:	4620      	mov	r0, r4
   81b86:	f241 6190 	movw	r1, #5776	; 0x1690
   81b8a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81b8e:	4632      	mov	r2, r6
   81b90:	47a8      	blx	r5
   81b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00081b94 <get_user_button_status>:
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81b98:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81b9c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
}

// To see if the user pressed the front panel button
RET_TYPE get_user_button_status(void)
{
	if(ioport_get_pin_level(GPIO_USR_BUTTON))
   81b9e:	f480 0100 	eor.w	r1, r0, #8388608	; 0x800000
		return RETURN_NOK;
	else
		return RETURN_OK;
}
   81ba2:	f3c1 50c0 	ubfx	r0, r1, #23, #1
   81ba6:	4770      	bx	lr

00081ba8 <get_ok_12v_status>:
   81ba8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   81bac:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81bb0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
{
	if(ioport_get_pin_level(GPIO_OK_12V))
		return RETURN_OK;
	else
		return RETURN_NOK;
}
   81bb2:	f3c0 2000 	ubfx	r0, r0, #8, #1
   81bb6:	4770      	bx	lr

00081bb8 <enable_12v>:
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81bb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   81bbc:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
   81bc4:	631a      	str	r2, [r3, #48]	; 0x30
   81bc6:	4770      	bx	lr

00081bc8 <disable_12v>:
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81bc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   81bcc:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
   81bd4:	635a      	str	r2, [r3, #52]	; 0x34
   81bd6:	4770      	bx	lr

00081bd8 <SCPI_ErrorInit>:
/* basic FIFO */
static fifo_t local_error_queue;



void SCPI_ErrorInit(scpi_t * context) {
   81bd8:	b508      	push	{r3, lr}
     * // FreeRTOS
     * context->error_queue = (scpi_error_queue_t)xQueueCreate(100, sizeof(int16_t));
     */

    /* basic FIFO */
    context->error_queue = (scpi_error_queue_t)&local_error_queue;
   81bda:	f640 431c 	movw	r3, #3100	; 0xc1c
   81bde:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81be2:	62c3      	str	r3, [r0, #44]	; 0x2c
    fifo_init((fifo_t *)context->error_queue);
   81be4:	4618      	mov	r0, r3
   81be6:	f641 6109 	movw	r1, #7689	; 0x1e09
   81bea:	f2c0 0108 	movt	r1, #8
   81bee:	4788      	blx	r1
   81bf0:	bd08      	pop	{r3, pc}
   81bf2:	bf00      	nop

00081bf4 <SCPI_ErrorClear>:

/**
 * Clear error queue
 * @param context - scpi context
 */
void SCPI_ErrorClear(scpi_t * context) {
   81bf4:	b508      	push	{r3, lr}
     * // FreeRTOS
     * xQueueReset((xQueueHandle)context->error_queue);
     */

    /* basic FIFO */
    fifo_clear((fifo_t *)context->error_queue);
   81bf6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   81bf8:	f641 6319 	movw	r3, #7705	; 0x1e19
   81bfc:	f2c0 0308 	movt	r3, #8
   81c00:	4798      	blx	r3
   81c02:	bd08      	pop	{r3, pc}

00081c04 <SCPI_ErrorPop>:
/**
 * Pop error from queue
 * @param context - scpi context
 * @return error number
 */
int16_t SCPI_ErrorPop(scpi_t * context) {
   81c04:	b500      	push	{lr}
   81c06:	b083      	sub	sp, #12
    int16_t result = 0;
   81c08:	a902      	add	r1, sp, #8
   81c0a:	f04f 0300 	mov.w	r3, #0
   81c0e:	f821 3d02 	strh.w	r3, [r1, #-2]!
     *   result = 0;
     * }
     */

    /* basic FIFO */
    fifo_remove((fifo_t *)context->error_queue, &result);
   81c12:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   81c14:	f641 6225 	movw	r2, #7717	; 0x1e25
   81c18:	f2c0 0208 	movt	r2, #8
   81c1c:	4790      	blx	r2

    return result;
}
   81c1e:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   81c22:	b003      	add	sp, #12
   81c24:	bd00      	pop	{pc}
   81c26:	bf00      	nop

00081c28 <SCPI_ErrorCount>:
/**
 * Return number of errors/events in the queue
 * @param context
 * @return 
 */
int32_t SCPI_ErrorCount(scpi_t * context) {
   81c28:	b500      	push	{lr}
   81c2a:	b083      	sub	sp, #12
    int16_t result = 0;
   81c2c:	a902      	add	r1, sp, #8
   81c2e:	f04f 0300 	mov.w	r3, #0
   81c32:	f821 3d02 	strh.w	r3, [r1, #-2]!
     * // FreeRTOS
     * result = uxQueueMessagesWaiting((xQueueHandle)context->error_queue);
     */

    /* basic FIFO */
    fifo_count((fifo_t *)context->error_queue, &result);
   81c36:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   81c38:	f641 62c1 	movw	r2, #7873	; 0x1ec1
   81c3c:	f2c0 0208 	movt	r2, #8
   81c40:	4790      	blx	r2

    return result;
}
   81c42:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   81c46:	b003      	add	sp, #12
   81c48:	bd00      	pop	{pc}
   81c4a:	bf00      	nop

00081c4c <SCPI_ErrorPush>:
/**
 * Push error to queue
 * @param context - scpi context
 * @param err - error number
 */
void SCPI_ErrorPush(scpi_t * context, int16_t err) {
   81c4c:	b538      	push	{r3, r4, r5, lr}
   81c4e:	4605      	mov	r5, r0
   81c50:	460c      	mov	r4, r1
     * // FreeRTOS
     * xQueueSend((xQueueHandle)context->error_queue, &err, 0);
     */

    /* basic FIFO */
    fifo_add((fifo_t *)context->error_queue, err);
   81c52:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   81c54:	f641 6365 	movw	r3, #7781	; 0x1e65
   81c58:	f2c0 0308 	movt	r3, #8
   81c5c:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   81c5e:	f114 0f63 	cmn.w	r4, #99	; 0x63
   81c62:	da0c      	bge.n	81c7e <SCPI_ErrorPush+0x32>
   81c64:	f114 0fc7 	cmn.w	r4, #199	; 0xc7
   81c68:	db09      	blt.n	81c7e <SCPI_ErrorPush+0x32>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   81c6a:	4628      	mov	r0, r5
   81c6c:	f04f 0102 	mov.w	r1, #2
   81c70:	f04f 0220 	mov.w	r2, #32
   81c74:	f242 0371 	movw	r3, #8305	; 0x2071
   81c78:	f2c0 0308 	movt	r3, #8
   81c7c:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   81c7e:	f114 0fc7 	cmn.w	r4, #199	; 0xc7
   81c82:	da0c      	bge.n	81c9e <SCPI_ErrorPush+0x52>
   81c84:	f514 7f96 	cmn.w	r4, #300	; 0x12c
   81c88:	dd09      	ble.n	81c9e <SCPI_ErrorPush+0x52>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   81c8a:	4628      	mov	r0, r5
   81c8c:	f04f 0102 	mov.w	r1, #2
   81c90:	f04f 0210 	mov.w	r2, #16
   81c94:	f242 0371 	movw	r3, #8305	; 0x2071
   81c98:	f2c0 0308 	movt	r3, #8
   81c9c:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   81c9e:	f514 7f96 	cmn.w	r4, #300	; 0x12c
   81ca2:	dc0c      	bgt.n	81cbe <SCPI_ErrorPush+0x72>
   81ca4:	f514 7fc8 	cmn.w	r4, #400	; 0x190
   81ca8:	dd09      	ble.n	81cbe <SCPI_ErrorPush+0x72>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   81caa:	4628      	mov	r0, r5
   81cac:	f04f 0102 	mov.w	r1, #2
   81cb0:	f04f 0208 	mov.w	r2, #8
   81cb4:	f242 0371 	movw	r3, #8305	; 0x2071
   81cb8:	f2c0 0308 	movt	r3, #8
   81cbc:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   81cbe:	f514 7fc8 	cmn.w	r4, #400	; 0x190
   81cc2:	dc0c      	bgt.n	81cde <SCPI_ErrorPush+0x92>
   81cc4:	f514 7ffa 	cmn.w	r4, #500	; 0x1f4
   81cc8:	dd09      	ble.n	81cde <SCPI_ErrorPush+0x92>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   81cca:	4628      	mov	r0, r5
   81ccc:	f04f 0102 	mov.w	r1, #2
   81cd0:	f04f 0204 	mov.w	r2, #4
   81cd4:	f242 0371 	movw	r3, #8305	; 0x2071
   81cd8:	f2c0 0308 	movt	r3, #8
   81cdc:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   81cde:	f514 7ffa 	cmn.w	r4, #500	; 0x1f4
   81ce2:	dc0c      	bgt.n	81cfe <SCPI_ErrorPush+0xb2>
   81ce4:	f514 7f16 	cmn.w	r4, #600	; 0x258
   81ce8:	dd09      	ble.n	81cfe <SCPI_ErrorPush+0xb2>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   81cea:	4628      	mov	r0, r5
   81cec:	f04f 0102 	mov.w	r1, #2
   81cf0:	f04f 0280 	mov.w	r2, #128	; 0x80
   81cf4:	f242 0371 	movw	r3, #8305	; 0x2071
   81cf8:	f2c0 0308 	movt	r3, #8
   81cfc:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   81cfe:	f514 7f16 	cmn.w	r4, #600	; 0x258
   81d02:	dc0c      	bgt.n	81d1e <SCPI_ErrorPush+0xd2>
   81d04:	f514 7f2f 	cmn.w	r4, #700	; 0x2bc
   81d08:	dd09      	ble.n	81d1e <SCPI_ErrorPush+0xd2>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   81d0a:	4628      	mov	r0, r5
   81d0c:	f04f 0102 	mov.w	r1, #2
   81d10:	f04f 0240 	mov.w	r2, #64	; 0x40
   81d14:	f242 0371 	movw	r3, #8305	; 0x2071
   81d18:	f2c0 0308 	movt	r3, #8
   81d1c:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   81d1e:	f514 7f2f 	cmn.w	r4, #700	; 0x2bc
   81d22:	dc0b      	bgt.n	81d3c <SCPI_ErrorPush+0xf0>
   81d24:	f514 7f48 	cmn.w	r4, #800	; 0x320
   81d28:	dd08      	ble.n	81d3c <SCPI_ErrorPush+0xf0>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   81d2a:	4628      	mov	r0, r5
   81d2c:	f04f 0102 	mov.w	r1, #2
   81d30:	460a      	mov	r2, r1
   81d32:	f242 0371 	movw	r3, #8305	; 0x2071
   81d36:	f2c0 0308 	movt	r3, #8
   81d3a:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   81d3c:	f514 7f48 	cmn.w	r4, #800	; 0x320
   81d40:	dc0c      	bgt.n	81d5c <SCPI_ErrorPush+0x110>
   81d42:	f514 7f61 	cmn.w	r4, #900	; 0x384
   81d46:	dd09      	ble.n	81d5c <SCPI_ErrorPush+0x110>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   81d48:	4628      	mov	r0, r5
   81d4a:	f04f 0102 	mov.w	r1, #2
   81d4e:	f04f 0201 	mov.w	r2, #1
   81d52:	f242 0371 	movw	r3, #8305	; 0x2071
   81d56:	f2c0 0308 	movt	r3, #8
   81d5a:	4798      	blx	r3
        }
    }

    if (context) {
   81d5c:	b155      	cbz	r5, 81d74 <SCPI_ErrorPush+0x128>
        if (context->interface && context->interface->error) {
   81d5e:	69e8      	ldr	r0, [r5, #28]
   81d60:	b120      	cbz	r0, 81d6c <SCPI_ErrorPush+0x120>
   81d62:	6802      	ldr	r2, [r0, #0]
   81d64:	b112      	cbz	r2, 81d6c <SCPI_ErrorPush+0x120>
            context->interface->error(context, err);
   81d66:	4628      	mov	r0, r5
   81d68:	4621      	mov	r1, r4
   81d6a:	4790      	blx	r2
        }

        context->cmd_error = TRUE;
   81d6c:	f04f 0101 	mov.w	r1, #1
   81d70:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
   81d74:	bd38      	pop	{r3, r4, r5, pc}
   81d76:	bf00      	nop

00081d78 <SCPI_ErrorTranslate>:
 * Translate error number to string
 * @param err - error number
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
    switch (err) {
   81d78:	f110 0f6d 	cmn.w	r0, #109	; 0x6d
   81d7c:	d02b      	beq.n	81dd6 <SCPI_ErrorTranslate+0x5e>
   81d7e:	dc09      	bgt.n	81d94 <SCPI_ErrorTranslate+0x1c>
   81d80:	f110 0f83 	cmn.w	r0, #131	; 0x83
   81d84:	d02c      	beq.n	81de0 <SCPI_ErrorTranslate+0x68>
   81d86:	f110 0f71 	cmn.w	r0, #113	; 0x71
   81d8a:	d01a      	beq.n	81dc2 <SCPI_ErrorTranslate+0x4a>
   81d8c:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
   81d90:	d130      	bne.n	81df4 <SCPI_ErrorTranslate+0x7c>
   81d92:	e02a      	b.n	81dea <SCPI_ErrorTranslate+0x72>
   81d94:	f110 0f67 	cmn.w	r0, #103	; 0x67
   81d98:	d00e      	beq.n	81db8 <SCPI_ErrorTranslate+0x40>
   81d9a:	dc03      	bgt.n	81da4 <SCPI_ErrorTranslate+0x2c>
   81d9c:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
   81da0:	d128      	bne.n	81df4 <SCPI_ErrorTranslate+0x7c>
   81da2:	e013      	b.n	81dcc <SCPI_ErrorTranslate+0x54>
   81da4:	f110 0f66 	cmn.w	r0, #102	; 0x66
   81da8:	d029      	beq.n	81dfe <SCPI_ErrorTranslate+0x86>
   81daa:	2800      	cmp	r0, #0
   81dac:	d122      	bne.n	81df4 <SCPI_ErrorTranslate+0x7c>
        case 0: return "No error";
   81dae:	f64b 3060 	movw	r0, #47968	; 0xbb60
   81db2:	f2c0 0008 	movt	r0, #8
   81db6:	4770      	bx	lr
        case SCPI_ERROR_SYNTAX: return "Syntax error";
        case SCPI_ERROR_INVALID_SEPARATOR: return "Invalid separator";
   81db8:	f64b 307c 	movw	r0, #47996	; 0xbb7c
   81dbc:	f2c0 0008 	movt	r0, #8
   81dc0:	4770      	bx	lr
        case SCPI_ERROR_UNDEFINED_HEADER: return "Undefined header";
   81dc2:	f64b 3090 	movw	r0, #48016	; 0xbb90
   81dc6:	f2c0 0008 	movt	r0, #8
   81dca:	4770      	bx	lr
        case SCPI_ERROR_PARAMETER_NOT_ALLOWED: return "Parameter not allowed";
   81dcc:	f64b 30a4 	movw	r0, #48036	; 0xbba4
   81dd0:	f2c0 0008 	movt	r0, #8
   81dd4:	4770      	bx	lr
        case SCPI_ERROR_MISSING_PARAMETER: return "Missing parameter";
   81dd6:	f64b 30bc 	movw	r0, #48060	; 0xbbbc
   81dda:	f2c0 0008 	movt	r0, #8
   81dde:	4770      	bx	lr
        case SCPI_ERROR_INVALID_SUFFIX: return "Invalid suffix";
   81de0:	f64b 30d0 	movw	r0, #48080	; 0xbbd0
   81de4:	f2c0 0008 	movt	r0, #8
   81de8:	4770      	bx	lr
        case SCPI_ERROR_SUFFIX_NOT_ALLOWED: return "Suffix not allowed";
   81dea:	f64b 30e0 	movw	r0, #48096	; 0xbbe0
   81dee:	f2c0 0008 	movt	r0, #8
   81df2:	4770      	bx	lr
        default: return "Unknown error";
   81df4:	f64b 30f4 	movw	r0, #48116	; 0xbbf4
   81df8:	f2c0 0008 	movt	r0, #8
   81dfc:	4770      	bx	lr
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
    switch (err) {
        case 0: return "No error";
        case SCPI_ERROR_SYNTAX: return "Syntax error";
   81dfe:	f64b 306c 	movw	r0, #47980	; 0xbb6c
   81e02:	f2c0 0008 	movt	r0, #8
        case SCPI_ERROR_MISSING_PARAMETER: return "Missing parameter";
        case SCPI_ERROR_INVALID_SUFFIX: return "Invalid suffix";
        case SCPI_ERROR_SUFFIX_NOT_ALLOWED: return "Suffix not allowed";
        default: return "Unknown error";
    }
}
   81e06:	4770      	bx	lr

00081e08 <fifo_init>:

#include "fifo.h"

void fifo_init(fifo_t * fifo) {
    fifo->wr = 0;
   81e08:	f04f 0300 	mov.w	r3, #0
   81e0c:	8003      	strh	r3, [r0, #0]
    fifo->rd = 0;
   81e0e:	8043      	strh	r3, [r0, #2]
    fifo->size = FIFO_SIZE;
   81e10:	f04f 0110 	mov.w	r1, #16
   81e14:	8081      	strh	r1, [r0, #4]
   81e16:	4770      	bx	lr

00081e18 <fifo_clear>:
}

void fifo_clear(fifo_t * fifo) {
    fifo->wr = 0;
   81e18:	f04f 0300 	mov.w	r3, #0
   81e1c:	8003      	strh	r3, [r0, #0]
    fifo->rd = 0;
   81e1e:	8043      	strh	r3, [r0, #2]
   81e20:	4770      	bx	lr
   81e22:	bf00      	nop

00081e24 <fifo_remove>:
    fifo->wr = (fifo->wr + 1) % (fifo->size + 1);

    return TRUE;
}

bool_t fifo_remove(fifo_t * fifo, int16_t * value) {
   81e24:	b410      	push	{r4}
    /* FIFO empty? */
    if (fifo->wr == fifo->rd) {
   81e26:	8843      	ldrh	r3, [r0, #2]
   81e28:	f9b0 4000 	ldrsh.w	r4, [r0]
   81e2c:	b21a      	sxth	r2, r3
   81e2e:	4294      	cmp	r4, r2
   81e30:	d014      	beq.n	81e5c <fifo_remove+0x38>
        return FALSE;
    }

    if(value) {
   81e32:	b119      	cbz	r1, 81e3c <fifo_remove+0x18>
        *value = fifo->data[fifo->rd];
   81e34:	eb00 0242 	add.w	r2, r0, r2, lsl #1
   81e38:	88d3      	ldrh	r3, [r2, #6]
   81e3a:	800b      	strh	r3, [r1, #0]
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size + 1);
   81e3c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   81e40:	f102 0201 	add.w	r2, r2, #1
   81e44:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   81e48:	f103 0301 	add.w	r3, r3, #1
   81e4c:	fb92 f1f3 	sdiv	r1, r2, r3
   81e50:	fb03 2211 	mls	r2, r3, r1, r2
   81e54:	8042      	strh	r2, [r0, #2]

    return TRUE;
   81e56:	f04f 0001 	mov.w	r0, #1
   81e5a:	e001      	b.n	81e60 <fifo_remove+0x3c>
}

bool_t fifo_remove(fifo_t * fifo, int16_t * value) {
    /* FIFO empty? */
    if (fifo->wr == fifo->rd) {
        return FALSE;
   81e5c:	f04f 0000 	mov.w	r0, #0
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size + 1);

    return TRUE;
}
   81e60:	bc10      	pop	{r4}
   81e62:	4770      	bx	lr

00081e64 <fifo_add>:
void fifo_clear(fifo_t * fifo) {
    fifo->wr = 0;
    fifo->rd = 0;
}

bool_t fifo_add(fifo_t * fifo, int16_t value) {
   81e64:	b538      	push	{r3, r4, r5, lr}
   81e66:	4604      	mov	r4, r0
   81e68:	460d      	mov	r5, r1
    /* FIFO full? */
    if (fifo->wr == ((fifo->rd + fifo->size) % (fifo->size + 1))) {
   81e6a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   81e6e:	f9b0 1000 	ldrsh.w	r1, [r0]
   81e72:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   81e76:	18d2      	adds	r2, r2, r3
   81e78:	f103 0301 	add.w	r3, r3, #1
   81e7c:	fb92 f0f3 	sdiv	r0, r2, r3
   81e80:	fb03 2310 	mls	r3, r3, r0, r2
   81e84:	4299      	cmp	r1, r3
   81e86:	d107      	bne.n	81e98 <fifo_add+0x34>
        fifo_remove(fifo, NULL);
   81e88:	4620      	mov	r0, r4
   81e8a:	f04f 0100 	mov.w	r1, #0
   81e8e:	f641 6225 	movw	r2, #7717	; 0x1e25
   81e92:	f2c0 0208 	movt	r2, #8
   81e96:	4790      	blx	r2
    }

    fifo->data[fifo->wr] = value;
   81e98:	f9b4 0000 	ldrsh.w	r0, [r4]
   81e9c:	eb04 0140 	add.w	r1, r4, r0, lsl #1
   81ea0:	80cd      	strh	r5, [r1, #6]
    fifo->wr = (fifo->wr + 1) % (fifo->size + 1);
   81ea2:	f100 0001 	add.w	r0, r0, #1
   81ea6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   81eaa:	f103 0301 	add.w	r3, r3, #1
   81eae:	fb90 f2f3 	sdiv	r2, r0, r3
   81eb2:	fb03 0012 	mls	r0, r3, r2, r0
   81eb6:	8020      	strh	r0, [r4, #0]

    return TRUE;
}
   81eb8:	f04f 0001 	mov.w	r0, #1
   81ebc:	bd38      	pop	{r3, r4, r5, pc}
   81ebe:	bf00      	nop

00081ec0 <fifo_count>:

    return TRUE;
}

bool_t fifo_count(fifo_t * fifo, int16_t * value) {
    *value = fifo->wr - fifo->rd;
   81ec0:	8802      	ldrh	r2, [r0, #0]
   81ec2:	8843      	ldrh	r3, [r0, #2]
   81ec4:	1ad2      	subs	r2, r2, r3
   81ec6:	b292      	uxth	r2, r2
   81ec8:	b293      	uxth	r3, r2
   81eca:	800b      	strh	r3, [r1, #0]
    if (*value < 0) {
   81ecc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   81ed0:	d004      	beq.n	81edc <fifo_count+0x1c>
        *value += (fifo->size + 1);
   81ed2:	8880      	ldrh	r0, [r0, #4]
   81ed4:	f100 0001 	add.w	r0, r0, #1
   81ed8:	1812      	adds	r2, r2, r0
   81eda:	800a      	strh	r2, [r1, #0]
    }
    return TRUE;
}
   81edc:	f04f 0001 	mov.w	r0, #1
   81ee0:	4770      	bx	lr
   81ee2:	bf00      	nop

00081ee4 <SCPI_RegGet>:
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
    if ((name < SCPI_REG_COUNT) && (context->registers != NULL)) {
   81ee4:	2907      	cmp	r1, #7
   81ee6:	d804      	bhi.n	81ef2 <SCPI_RegGet+0xe>
   81ee8:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81eea:	b12b      	cbz	r3, 81ef8 <SCPI_RegGet+0x14>
        return context->registers[name];
   81eec:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
   81ef0:	4770      	bx	lr
    } else {
        return 0;
   81ef2:	f04f 0000 	mov.w	r0, #0
   81ef6:	4770      	bx	lr
   81ef8:	f04f 0000 	mov.w	r0, #0
    }
}
   81efc:	4770      	bx	lr
   81efe:	bf00      	nop

00081f00 <SCPI_RegClearBits>:
/**
 * Clear register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegClearBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
   81f00:	b570      	push	{r4, r5, r6, lr}
   81f02:	4605      	mov	r5, r0
   81f04:	460c      	mov	r4, r1
   81f06:	4616      	mov	r6, r2
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
   81f08:	f641 63e5 	movw	r3, #7909	; 0x1ee5
   81f0c:	f2c0 0308 	movt	r3, #8
   81f10:	4798      	blx	r3
   81f12:	ea20 0206 	bic.w	r2, r0, r6
   81f16:	4628      	mov	r0, r5
   81f18:	4621      	mov	r1, r4
   81f1a:	b292      	uxth	r2, r2
   81f1c:	f641 735d 	movw	r3, #8029	; 0x1f5d
   81f20:	f2c0 0308 	movt	r3, #8
   81f24:	4798      	blx	r3
   81f26:	bd70      	pop	{r4, r5, r6, pc}

00081f28 <regUpdateSTB>:
 * @param context
 * @param val value of register
 * @param mask name of mask register (enable register)
 * @param stbBits bits to clear or set in STB
 */
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
   81f28:	b570      	push	{r4, r5, r6, lr}
   81f2a:	4605      	mov	r5, r0
   81f2c:	460e      	mov	r6, r1
   81f2e:	461c      	mov	r4, r3
    if (val & SCPI_RegGet(context, mask)) {
   81f30:	4611      	mov	r1, r2
   81f32:	f641 63e5 	movw	r3, #7909	; 0x1ee5
   81f36:	f2c0 0308 	movt	r3, #8
   81f3a:	4798      	blx	r3
   81f3c:	4230      	tst	r0, r6
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
   81f3e:	4628      	mov	r0, r5
   81f40:	f04f 0100 	mov.w	r1, #0
   81f44:	4622      	mov	r2, r4
   81f46:	bf19      	ittee	ne
   81f48:	f242 0371 	movwne	r3, #8305	; 0x2071
   81f4c:	f2c0 0308 	movtne	r3, #8
    } else {
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
   81f50:	f641 7301 	movweq	r3, #7937	; 0x1f01
   81f54:	f2c0 0308 	movteq	r3, #8
   81f58:	4798      	blx	r3
   81f5a:	bd70      	pop	{r4, r5, r6, pc}

00081f5c <SCPI_RegSet>:
/**
 * Set register value
 * @param name - register name
 * @param val - new value
 */
void SCPI_RegSet(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t val) {
   81f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81f5e:	4605      	mov	r5, r0
   81f60:	460c      	mov	r4, r1
   81f62:	4616      	mov	r6, r2
    bool_t srq = FALSE;
    scpi_reg_val_t mask;
    scpi_reg_val_t old_val;

    if ((name >= SCPI_REG_COUNT) || (context->registers == NULL)) {
   81f64:	2907      	cmp	r1, #7
   81f66:	f200 8081 	bhi.w	8206c <SCPI_RegSet+0x110>
   81f6a:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81f6c:	2b00      	cmp	r3, #0
   81f6e:	d07d      	beq.n	8206c <SCPI_RegSet+0x110>
        return;
    }
    
    /* store old register value */
    old_val = context->registers[name];
   81f70:	f833 7011 	ldrh.w	r7, [r3, r1, lsl #1]

    /* set register value */
    context->registers[name] = val;
   81f74:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

    /** @TODO: remove recutsion */
    switch (name) {
   81f78:	2907      	cmp	r1, #7
   81f7a:	d857      	bhi.n	8202c <SCPI_RegSet+0xd0>
   81f7c:	e8df f001 	tbb	[pc, r1]
   81f80:	281d1504 	.word	0x281d1504
   81f84:	3b304e43 	.word	0x3b304e43
        case SCPI_REG_STB:
            mask = SCPI_RegGet(context, SCPI_REG_SRE);
   81f88:	f04f 0101 	mov.w	r1, #1
   81f8c:	f641 62e5 	movw	r2, #7909	; 0x1ee5
   81f90:	f2c0 0208 	movt	r2, #8
   81f94:	4790      	blx	r2
            mask &= ~STB_SRQ;
   81f96:	f64f 71bf 	movw	r1, #65471	; 0xffbf
   81f9a:	4031      	ands	r1, r6
            if (val & mask) {
   81f9c:	4201      	tst	r1, r0
   81f9e:	d052      	beq.n	82046 <SCPI_RegSet+0xea>
                val |= STB_SRQ;
   81fa0:	f046 0640 	orr.w	r6, r6, #64	; 0x40
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
   81fa4:	42b7      	cmp	r7, r6
   81fa6:	d153      	bne.n	82050 <SCPI_RegSet+0xf4>
   81fa8:	e04e      	b.n	82048 <SCPI_RegSet+0xec>
            } else {
                val &= ~STB_SRQ;
            }
            break;
        case SCPI_REG_SRE:
            regUpdate(context, SCPI_REG_STB);
   81faa:	f04f 0100 	mov.w	r1, #0
   81fae:	f242 0399 	movw	r3, #8345	; 0x2099
   81fb2:	f2c0 0308 	movt	r3, #8
   81fb6:	4798      	blx	r3
            break;
   81fb8:	e046      	b.n	82048 <SCPI_RegSet+0xec>
        case SCPI_REG_ESR:
            regUpdateSTB(context, val, SCPI_REG_ESE, STB_ESR);
   81fba:	4611      	mov	r1, r2
   81fbc:	f04f 0203 	mov.w	r2, #3
   81fc0:	f04f 0320 	mov.w	r3, #32
   81fc4:	f641 7729 	movw	r7, #7977	; 0x1f29
   81fc8:	f2c0 0708 	movt	r7, #8
   81fcc:	47b8      	blx	r7
            break;
   81fce:	e03b      	b.n	82048 <SCPI_RegSet+0xec>
        case SCPI_REG_ESE:
            regUpdate(context, SCPI_REG_ESR);
   81fd0:	f04f 0102 	mov.w	r1, #2
   81fd4:	f242 0299 	movw	r2, #8345	; 0x2099
   81fd8:	f2c0 0208 	movt	r2, #8
   81fdc:	4790      	blx	r2
            break;
   81fde:	e033      	b.n	82048 <SCPI_RegSet+0xec>
        case SCPI_REG_QUES:
            regUpdateSTB(context, val, SCPI_REG_QUESE, STB_QES);
   81fe0:	4611      	mov	r1, r2
   81fe2:	f04f 0207 	mov.w	r2, #7
   81fe6:	f04f 0308 	mov.w	r3, #8
   81fea:	f641 7729 	movw	r7, #7977	; 0x1f29
   81fee:	f2c0 0708 	movt	r7, #8
   81ff2:	47b8      	blx	r7
            break;
   81ff4:	e028      	b.n	82048 <SCPI_RegSet+0xec>
        case SCPI_REG_QUESE:
            regUpdate(context, SCPI_REG_QUES);
   81ff6:	f04f 0106 	mov.w	r1, #6
   81ffa:	f242 0299 	movw	r2, #8345	; 0x2099
   81ffe:	f2c0 0208 	movt	r2, #8
   82002:	4790      	blx	r2
            break;
   82004:	e020      	b.n	82048 <SCPI_RegSet+0xec>
        case SCPI_REG_OPER:
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
   82006:	4611      	mov	r1, r2
   82008:	f04f 0205 	mov.w	r2, #5
   8200c:	f04f 0380 	mov.w	r3, #128	; 0x80
   82010:	f641 7729 	movw	r7, #7977	; 0x1f29
   82014:	f2c0 0708 	movt	r7, #8
   82018:	47b8      	blx	r7
            break;
   8201a:	e015      	b.n	82048 <SCPI_RegSet+0xec>
        case SCPI_REG_OPERE:
            regUpdate(context, SCPI_REG_OPER);
   8201c:	f04f 0104 	mov.w	r1, #4
   82020:	f242 0399 	movw	r3, #8345	; 0x2099
   82024:	f2c0 0308 	movt	r3, #8
   82028:	4798      	blx	r3
            break;
   8202a:	e00d      	b.n	82048 <SCPI_RegSet+0xec>
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
   8202c:	6b00      	ldr	r0, [r0, #48]	; 0x30
   8202e:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
   82032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
    if (context && context->interface && context->interface->control) {
   82034:	69e9      	ldr	r1, [r5, #28]
   82036:	b1c9      	cbz	r1, 8206c <SCPI_RegSet+0x110>
   82038:	688b      	ldr	r3, [r1, #8]
   8203a:	b1bb      	cbz	r3, 8206c <SCPI_RegSet+0x110>
        return context->interface->control(context, ctrl, val);
   8203c:	4628      	mov	r0, r5
   8203e:	f04f 0101 	mov.w	r1, #1
   82042:	4798      	blx	r3
   82044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
                    srq = TRUE;
                }
            } else {
                val &= ~STB_SRQ;
   82046:	460e      	mov	r6, r1
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
   82048:	6b28      	ldr	r0, [r5, #48]	; 0x30
   8204a:	f820 6014 	strh.w	r6, [r0, r4, lsl #1]
   8204e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82050:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82052:	f823 6014 	strh.w	r6, [r3, r4, lsl #1]

    if (srq) {
        writeControl(context, SCPI_CTRL_SRQ, SCPI_RegGet(context, SCPI_REG_STB));
   82056:	4628      	mov	r0, r5
   82058:	f04f 0100 	mov.w	r1, #0
   8205c:	f641 62e5 	movw	r2, #7909	; 0x1ee5
   82060:	f2c0 0208 	movt	r2, #8
   82064:	4790      	blx	r2
   82066:	4602      	mov	r2, r0
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
    if (context && context->interface && context->interface->control) {
   82068:	2d00      	cmp	r5, #0
   8206a:	d1e3      	bne.n	82034 <SCPI_RegSet+0xd8>
   8206c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8206e:	bf00      	nop

00082070 <SCPI_RegSetBits>:
/**
 * Set register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegSetBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
   82070:	b570      	push	{r4, r5, r6, lr}
   82072:	4605      	mov	r5, r0
   82074:	460c      	mov	r4, r1
   82076:	4616      	mov	r6, r2
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
   82078:	f641 63e5 	movw	r3, #7909	; 0x1ee5
   8207c:	f2c0 0308 	movt	r3, #8
   82080:	4798      	blx	r3
   82082:	ea40 0206 	orr.w	r2, r0, r6
   82086:	4628      	mov	r0, r5
   82088:	4621      	mov	r1, r4
   8208a:	b292      	uxth	r2, r2
   8208c:	f641 735d 	movw	r3, #8029	; 0x1f5d
   82090:	f2c0 0308 	movt	r3, #8
   82094:	4798      	blx	r3
   82096:	bd70      	pop	{r4, r5, r6, pc}

00082098 <regUpdate>:
/**
 * Update register value
 * @param context
 * @param name - register name
 */
static void regUpdate(scpi_t * context, scpi_reg_name_t name) {
   82098:	b538      	push	{r3, r4, r5, lr}
   8209a:	4605      	mov	r5, r0
   8209c:	460c      	mov	r4, r1
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
   8209e:	f641 63e5 	movw	r3, #7909	; 0x1ee5
   820a2:	f2c0 0308 	movt	r3, #8
   820a6:	4798      	blx	r3
   820a8:	4602      	mov	r2, r0
   820aa:	4628      	mov	r0, r5
   820ac:	4621      	mov	r1, r4
   820ae:	f641 735d 	movw	r3, #8029	; 0x1f5d
   820b2:	f2c0 0308 	movt	r3, #8
   820b6:	4798      	blx	r3
   820b8:	bd38      	pop	{r3, r4, r5, pc}
   820ba:	bf00      	nop

000820bc <SCPI_EventClear>:

/**
 * Clear event register
 * @param context
 */
void SCPI_EventClear(scpi_t * context) {
   820bc:	b508      	push	{r3, lr}
    /* TODO */
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
   820be:	f04f 0102 	mov.w	r1, #2
   820c2:	f04f 0200 	mov.w	r2, #0
   820c6:	f641 735d 	movw	r3, #8029	; 0x1f5d
   820ca:	f2c0 0308 	movt	r3, #8
   820ce:	4798      	blx	r3
   820d0:	bd08      	pop	{r3, pc}
   820d2:	bf00      	nop

000820d4 <SCPI_CoreCls>:
 * *CLS - This command clears all status data structures in a device. 
 *        For a device which minimally complies with SCPI. (SCPI std 4.1.3.2)
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreCls(scpi_t * context) {
   820d4:	b538      	push	{r3, r4, r5, lr}
   820d6:	4604      	mov	r4, r0
    SCPI_EventClear(context);
   820d8:	f242 03bd 	movw	r3, #8381	; 0x20bd
   820dc:	f2c0 0308 	movt	r3, #8
   820e0:	4798      	blx	r3
    SCPI_ErrorClear(context);
   820e2:	4620      	mov	r0, r4
   820e4:	f641 31f5 	movw	r1, #7157	; 0x1bf5
   820e8:	f2c0 0108 	movt	r1, #8
   820ec:	4788      	blx	r1
    SCPI_RegSet(context, SCPI_REG_OPER, 0);
   820ee:	4620      	mov	r0, r4
   820f0:	f04f 0104 	mov.w	r1, #4
   820f4:	f04f 0200 	mov.w	r2, #0
   820f8:	f641 755d 	movw	r5, #8029	; 0x1f5d
   820fc:	f2c0 0508 	movt	r5, #8
   82100:	47a8      	blx	r5
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
   82102:	4620      	mov	r0, r4
   82104:	f04f 0106 	mov.w	r1, #6
   82108:	f04f 0200 	mov.w	r2, #0
   8210c:	47a8      	blx	r5
    return SCPI_RES_OK;
}
   8210e:	f04f 0001 	mov.w	r0, #1
   82112:	bd38      	pop	{r3, r4, r5, pc}

00082114 <SCPI_CoreEse>:
/**
 * *ESE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEse(scpi_t * context) {
   82114:	b510      	push	{r4, lr}
   82116:	b082      	sub	sp, #8
   82118:	4604      	mov	r4, r0
    int32_t new_ESE;
    if (SCPI_ParamInt(context, &new_ESE, TRUE)) {
   8211a:	a901      	add	r1, sp, #4
   8211c:	f04f 0201 	mov.w	r2, #1
   82120:	f642 03f9 	movw	r3, #10489	; 0x28f9
   82124:	f2c0 0308 	movt	r3, #8
   82128:	4798      	blx	r3
   8212a:	b148      	cbz	r0, 82140 <SCPI_CoreEse+0x2c>
        SCPI_RegSet(context, SCPI_REG_ESE, new_ESE);
   8212c:	4620      	mov	r0, r4
   8212e:	f04f 0103 	mov.w	r1, #3
   82132:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   82136:	f641 735d 	movw	r3, #8029	; 0x1f5d
   8213a:	f2c0 0308 	movt	r3, #8
   8213e:	4798      	blx	r3
    }
    return SCPI_RES_OK;
}
   82140:	f04f 0001 	mov.w	r0, #1
   82144:	b002      	add	sp, #8
   82146:	bd10      	pop	{r4, pc}

00082148 <SCPI_CoreEseQ>:
/**
 * *ESE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEseQ(scpi_t * context) {
   82148:	b510      	push	{r4, lr}
   8214a:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_ESE));
   8214c:	f04f 0103 	mov.w	r1, #3
   82150:	f641 63e5 	movw	r3, #7909	; 0x1ee5
   82154:	f2c0 0308 	movt	r3, #8
   82158:	4798      	blx	r3
   8215a:	4601      	mov	r1, r0
   8215c:	4620      	mov	r0, r4
   8215e:	f242 72e1 	movw	r2, #10209	; 0x27e1
   82162:	f2c0 0208 	movt	r2, #8
   82166:	4790      	blx	r2
    return SCPI_RES_OK;
}
   82168:	f04f 0001 	mov.w	r0, #1
   8216c:	bd10      	pop	{r4, pc}
   8216e:	bf00      	nop

00082170 <SCPI_CoreEsrQ>:
/**
 * *ESR?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEsrQ(scpi_t * context) {
   82170:	b510      	push	{r4, lr}
   82172:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_ESR));
   82174:	f04f 0102 	mov.w	r1, #2
   82178:	f641 63e5 	movw	r3, #7909	; 0x1ee5
   8217c:	f2c0 0308 	movt	r3, #8
   82180:	4798      	blx	r3
   82182:	4601      	mov	r1, r0
   82184:	4620      	mov	r0, r4
   82186:	f242 72e1 	movw	r2, #10209	; 0x27e1
   8218a:	f2c0 0208 	movt	r2, #8
   8218e:	4790      	blx	r2
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
   82190:	4620      	mov	r0, r4
   82192:	f04f 0102 	mov.w	r1, #2
   82196:	f04f 0200 	mov.w	r2, #0
   8219a:	f641 735d 	movw	r3, #8029	; 0x1f5d
   8219e:	f2c0 0308 	movt	r3, #8
   821a2:	4798      	blx	r3
    return SCPI_RES_OK;
}
   821a4:	f04f 0001 	mov.w	r0, #1
   821a8:	bd10      	pop	{r4, pc}
   821aa:	bf00      	nop

000821ac <SCPI_CoreIdnQ>:
/**
 * *IDN?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreIdnQ(scpi_t * context) {
   821ac:	b538      	push	{r3, r4, r5, lr}
   821ae:	4605      	mov	r5, r0
    SCPI_ResultString(context, SCPI_MANUFACTURE);
   821b0:	f64b 4104 	movw	r1, #48132	; 0xbc04
   821b4:	f2c0 0108 	movt	r1, #8
   821b8:	f242 74a1 	movw	r4, #10145	; 0x27a1
   821bc:	f2c0 0408 	movt	r4, #8
   821c0:	47a0      	blx	r4
    SCPI_ResultString(context, SCPI_DEV_NAME);
   821c2:	4628      	mov	r0, r5
   821c4:	f64b 410c 	movw	r1, #48140	; 0xbc0c
   821c8:	f2c0 0108 	movt	r1, #8
   821cc:	47a0      	blx	r4
    SCPI_ResultString(context, SCPI_DEV_VERSION);
   821ce:	4628      	mov	r0, r5
   821d0:	f64b 412c 	movw	r1, #48172	; 0xbc2c
   821d4:	f2c0 0108 	movt	r1, #8
   821d8:	47a0      	blx	r4
    return SCPI_RES_OK;
}
   821da:	f04f 0001 	mov.w	r0, #1
   821de:	bd38      	pop	{r3, r4, r5, pc}

000821e0 <SCPI_CoreOpc>:
/**
 * *OPC
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpc(scpi_t * context) {
   821e0:	b508      	push	{r3, lr}
    SCPI_RegSetBits(context, SCPI_REG_ESR, ESR_OPC);
   821e2:	f04f 0102 	mov.w	r1, #2
   821e6:	f04f 0201 	mov.w	r2, #1
   821ea:	f242 0371 	movw	r3, #8305	; 0x2071
   821ee:	f2c0 0308 	movt	r3, #8
   821f2:	4798      	blx	r3
    return SCPI_RES_OK;
}
   821f4:	f04f 0001 	mov.w	r0, #1
   821f8:	bd08      	pop	{r3, pc}
   821fa:	bf00      	nop

000821fc <SCPI_CoreOpcQ>:
/**
 * *OPC?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpcQ(scpi_t * context) {
   821fc:	b508      	push	{r3, lr}
    /* Operation is always completed */
    SCPI_ResultInt(context, 1);
   821fe:	f04f 0101 	mov.w	r1, #1
   82202:	f242 73e1 	movw	r3, #10209	; 0x27e1
   82206:	f2c0 0308 	movt	r3, #8
   8220a:	4798      	blx	r3
    return SCPI_RES_OK;
}
   8220c:	f04f 0001 	mov.w	r0, #1
   82210:	bd08      	pop	{r3, pc}
   82212:	bf00      	nop

00082214 <SCPI_CoreRst>:
/**
 * *RST
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreRst(scpi_t * context) {
   82214:	b508      	push	{r3, lr}
    if (context && context->interface && context->interface->reset) {
   82216:	b128      	cbz	r0, 82224 <SCPI_CoreRst+0x10>
   82218:	69c3      	ldr	r3, [r0, #28]
   8221a:	b133      	cbz	r3, 8222a <SCPI_CoreRst+0x16>
   8221c:	6919      	ldr	r1, [r3, #16]
   8221e:	b139      	cbz	r1, 82230 <SCPI_CoreRst+0x1c>
        return context->interface->reset(context);
   82220:	4788      	blx	r1
   82222:	e007      	b.n	82234 <SCPI_CoreRst+0x20>
    }
    return SCPI_RES_OK;
   82224:	f04f 0001 	mov.w	r0, #1
   82228:	e004      	b.n	82234 <SCPI_CoreRst+0x20>
   8222a:	f04f 0001 	mov.w	r0, #1
   8222e:	e001      	b.n	82234 <SCPI_CoreRst+0x20>
   82230:	f04f 0001 	mov.w	r0, #1
}
   82234:	b240      	sxtb	r0, r0
   82236:	bd08      	pop	{r3, pc}

00082238 <SCPI_CoreSre>:
/**
 * *SRE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSre(scpi_t * context) {
   82238:	b510      	push	{r4, lr}
   8223a:	b082      	sub	sp, #8
   8223c:	4604      	mov	r4, r0
    int32_t new_SRE;
    if (SCPI_ParamInt(context, &new_SRE, TRUE)) {
   8223e:	a901      	add	r1, sp, #4
   82240:	f04f 0201 	mov.w	r2, #1
   82244:	f642 03f9 	movw	r3, #10489	; 0x28f9
   82248:	f2c0 0308 	movt	r3, #8
   8224c:	4798      	blx	r3
   8224e:	b148      	cbz	r0, 82264 <SCPI_CoreSre+0x2c>
        SCPI_RegSet(context, SCPI_REG_SRE, new_SRE);
   82250:	4620      	mov	r0, r4
   82252:	f04f 0101 	mov.w	r1, #1
   82256:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   8225a:	f641 735d 	movw	r3, #8029	; 0x1f5d
   8225e:	f2c0 0308 	movt	r3, #8
   82262:	4798      	blx	r3
    }
    return SCPI_RES_OK;
}
   82264:	f04f 0001 	mov.w	r0, #1
   82268:	b002      	add	sp, #8
   8226a:	bd10      	pop	{r4, pc}

0008226c <SCPI_CoreSreQ>:
/**
 * *SRE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSreQ(scpi_t * context) {
   8226c:	b510      	push	{r4, lr}
   8226e:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_SRE));
   82270:	f04f 0101 	mov.w	r1, #1
   82274:	f641 63e5 	movw	r3, #7909	; 0x1ee5
   82278:	f2c0 0308 	movt	r3, #8
   8227c:	4798      	blx	r3
   8227e:	4601      	mov	r1, r0
   82280:	4620      	mov	r0, r4
   82282:	f242 72e1 	movw	r2, #10209	; 0x27e1
   82286:	f2c0 0208 	movt	r2, #8
   8228a:	4790      	blx	r2
    return SCPI_RES_OK;
}
   8228c:	f04f 0001 	mov.w	r0, #1
   82290:	bd10      	pop	{r4, pc}
   82292:	bf00      	nop

00082294 <SCPI_CoreStbQ>:
/**
 * *STB?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreStbQ(scpi_t * context) {
   82294:	b510      	push	{r4, lr}
   82296:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_STB));
   82298:	f04f 0100 	mov.w	r1, #0
   8229c:	f641 63e5 	movw	r3, #7909	; 0x1ee5
   822a0:	f2c0 0308 	movt	r3, #8
   822a4:	4798      	blx	r3
   822a6:	4601      	mov	r1, r0
   822a8:	4620      	mov	r0, r4
   822aa:	f242 72e1 	movw	r2, #10209	; 0x27e1
   822ae:	f2c0 0208 	movt	r2, #8
   822b2:	4790      	blx	r2
    return SCPI_RES_OK;
}
   822b4:	f04f 0001 	mov.w	r0, #1
   822b8:	bd10      	pop	{r4, pc}
   822ba:	bf00      	nop

000822bc <SCPI_CoreTstQ>:
/**
 * *TST?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreTstQ(scpi_t * context) {
   822bc:	b510      	push	{r4, lr}
    int result = 0;
    if (context && context->interface && context->interface->test) {
   822be:	4604      	mov	r4, r0
   822c0:	b130      	cbz	r0, 822d0 <SCPI_CoreTstQ+0x14>
   822c2:	69c3      	ldr	r3, [r0, #28]
   822c4:	b13b      	cbz	r3, 822d6 <SCPI_CoreTstQ+0x1a>
   822c6:	6959      	ldr	r1, [r3, #20]
   822c8:	b141      	cbz	r1, 822dc <SCPI_CoreTstQ+0x20>
        result = context->interface->test(context);
   822ca:	4788      	blx	r1
   822cc:	4601      	mov	r1, r0
   822ce:	e007      	b.n	822e0 <SCPI_CoreTstQ+0x24>
 * *TST?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreTstQ(scpi_t * context) {
    int result = 0;
   822d0:	f04f 0100 	mov.w	r1, #0
   822d4:	e004      	b.n	822e0 <SCPI_CoreTstQ+0x24>
   822d6:	f04f 0100 	mov.w	r1, #0
   822da:	e001      	b.n	822e0 <SCPI_CoreTstQ+0x24>
   822dc:	f04f 0100 	mov.w	r1, #0
    if (context && context->interface && context->interface->test) {
        result = context->interface->test(context);
    }
    SCPI_ResultInt(context, result);
   822e0:	4620      	mov	r0, r4
   822e2:	f242 72e1 	movw	r2, #10209	; 0x27e1
   822e6:	f2c0 0208 	movt	r2, #8
   822ea:	4790      	blx	r2
    return SCPI_RES_OK;
}
   822ec:	f04f 0001 	mov.w	r0, #1
   822f0:	bd10      	pop	{r4, pc}
   822f2:	bf00      	nop

000822f4 <SCPI_CoreWai>:
 */
scpi_result_t SCPI_CoreWai(scpi_t * context) {
    (void) context;
    /* NOP */
    return SCPI_RES_OK;
}
   822f4:	f04f 0001 	mov.w	r0, #1
   822f8:	4770      	bx	lr
   822fa:	bf00      	nop

000822fc <SCPI_StubQ>:
/**
 * Query command stub function
 * @param context
 * @return 
 */
scpi_result_t SCPI_StubQ(scpi_t * context) {
   822fc:	b508      	push	{r3, lr}
    SCPI_ResultString(context, "");
   822fe:	f64b 7154 	movw	r1, #48980	; 0xbf54
   82302:	f2c0 0108 	movt	r1, #8
   82306:	f242 73a1 	movw	r3, #10145	; 0x27a1
   8230a:	f2c0 0308 	movt	r3, #8
   8230e:	4798      	blx	r3
    return SCPI_RES_OK;
}
   82310:	f04f 0001 	mov.w	r0, #1
   82314:	bd08      	pop	{r3, pc}
   82316:	bf00      	nop

00082318 <SCPI_SystemVersionQ>:
/**
 * SYSTem:VERSion?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemVersionQ(scpi_t * context) {
   82318:	b508      	push	{r3, lr}
    SCPI_ResultString(context, SCPI_DEV_VERSION);
   8231a:	f64b 412c 	movw	r1, #48172	; 0xbc2c
   8231e:	f2c0 0108 	movt	r1, #8
   82322:	f242 73a1 	movw	r3, #10145	; 0x27a1
   82326:	f2c0 0308 	movt	r3, #8
   8232a:	4798      	blx	r3
    return SCPI_RES_OK;
}
   8232c:	f04f 0001 	mov.w	r0, #1
   82330:	bd08      	pop	{r3, pc}
   82332:	bf00      	nop

00082334 <SCPI_SystemErrorNextQ>:
/**
 * SYSTem:ERRor[:NEXT]?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemErrorNextQ(scpi_t * context) {
   82334:	b538      	push	{r3, r4, r5, lr}
   82336:	4604      	mov	r4, r0
    int16_t err = SCPI_ErrorPop(context);
   82338:	f641 4305 	movw	r3, #7173	; 0x1c05
   8233c:	f2c0 0308 	movt	r3, #8
   82340:	4798      	blx	r3
   82342:	4605      	mov	r5, r0

    SCPI_ResultInt(context, err);
   82344:	4620      	mov	r0, r4
   82346:	4629      	mov	r1, r5
   82348:	f242 72e1 	movw	r2, #10209	; 0x27e1
   8234c:	f2c0 0208 	movt	r2, #8
   82350:	4790      	blx	r2
    SCPI_ResultText(context, SCPI_ErrorTranslate(err));
   82352:	4628      	mov	r0, r5
   82354:	f641 5179 	movw	r1, #7545	; 0x1d79
   82358:	f2c0 0108 	movt	r1, #8
   8235c:	4788      	blx	r1
   8235e:	4601      	mov	r1, r0
   82360:	4620      	mov	r0, r4
   82362:	f642 0329 	movw	r3, #10281	; 0x2829
   82366:	f2c0 0308 	movt	r3, #8
   8236a:	4798      	blx	r3

    return SCPI_RES_OK;
}
   8236c:	f04f 0001 	mov.w	r0, #1
   82370:	bd38      	pop	{r3, r4, r5, pc}
   82372:	bf00      	nop

00082374 <SCPI_SystemErrorCountQ>:
/**
 * SYSTem:ERRor:COUNt?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemErrorCountQ(scpi_t * context) {
   82374:	b510      	push	{r4, lr}
   82376:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_ErrorCount(context));
   82378:	f641 4329 	movw	r3, #7209	; 0x1c29
   8237c:	f2c0 0308 	movt	r3, #8
   82380:	4798      	blx	r3
   82382:	4601      	mov	r1, r0
   82384:	4620      	mov	r0, r4
   82386:	f242 72e1 	movw	r2, #10209	; 0x27e1
   8238a:	f2c0 0208 	movt	r2, #8
   8238e:	4790      	blx	r2

    return SCPI_RES_OK;
}
   82390:	f04f 0001 	mov.w	r0, #1
   82394:	bd10      	pop	{r4, pc}
   82396:	bf00      	nop

00082398 <SCPI_StatusQuestionableEventQ>:
/**
 * STATus:QUEStionable[:EVENt]?
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusQuestionableEventQ(scpi_t * context) {
   82398:	b510      	push	{r4, lr}
   8239a:	4604      	mov	r4, r0
    /* return value */
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_QUES));
   8239c:	f04f 0106 	mov.w	r1, #6
   823a0:	f641 63e5 	movw	r3, #7909	; 0x1ee5
   823a4:	f2c0 0308 	movt	r3, #8
   823a8:	4798      	blx	r3
   823aa:	4601      	mov	r1, r0
   823ac:	4620      	mov	r0, r4
   823ae:	f242 72e1 	movw	r2, #10209	; 0x27e1
   823b2:	f2c0 0208 	movt	r2, #8
   823b6:	4790      	blx	r2

    /* clear register */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
   823b8:	4620      	mov	r0, r4
   823ba:	f04f 0106 	mov.w	r1, #6
   823be:	f04f 0200 	mov.w	r2, #0
   823c2:	f641 735d 	movw	r3, #8029	; 0x1f5d
   823c6:	f2c0 0308 	movt	r3, #8
   823ca:	4798      	blx	r3

    return SCPI_RES_OK;
}
   823cc:	f04f 0001 	mov.w	r0, #1
   823d0:	bd10      	pop	{r4, pc}
   823d2:	bf00      	nop

000823d4 <SCPI_StatusQuestionableEnableQ>:
/**
 * STATus:QUEStionable:ENABle?
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusQuestionableEnableQ(scpi_t * context) {
   823d4:	b510      	push	{r4, lr}
   823d6:	4604      	mov	r4, r0
    /* return value */
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_QUESE));
   823d8:	f04f 0107 	mov.w	r1, #7
   823dc:	f641 63e5 	movw	r3, #7909	; 0x1ee5
   823e0:	f2c0 0308 	movt	r3, #8
   823e4:	4798      	blx	r3
   823e6:	4601      	mov	r1, r0
   823e8:	4620      	mov	r0, r4
   823ea:	f242 72e1 	movw	r2, #10209	; 0x27e1
   823ee:	f2c0 0208 	movt	r2, #8
   823f2:	4790      	blx	r2

    return SCPI_RES_OK;
}
   823f4:	f04f 0001 	mov.w	r0, #1
   823f8:	bd10      	pop	{r4, pc}
   823fa:	bf00      	nop

000823fc <SCPI_StatusQuestionableEnable>:
/**
 * STATus:QUEStionable:ENABle
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusQuestionableEnable(scpi_t * context) {
   823fc:	b510      	push	{r4, lr}
   823fe:	b082      	sub	sp, #8
   82400:	4604      	mov	r4, r0
    int32_t new_QUESE;
    if (SCPI_ParamInt(context, &new_QUESE, TRUE)) {
   82402:	a901      	add	r1, sp, #4
   82404:	f04f 0201 	mov.w	r2, #1
   82408:	f642 03f9 	movw	r3, #10489	; 0x28f9
   8240c:	f2c0 0308 	movt	r3, #8
   82410:	4798      	blx	r3
   82412:	b148      	cbz	r0, 82428 <SCPI_StatusQuestionableEnable+0x2c>
        SCPI_RegSet(context, SCPI_REG_QUESE, new_QUESE);
   82414:	4620      	mov	r0, r4
   82416:	f04f 0107 	mov.w	r1, #7
   8241a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   8241e:	f641 735d 	movw	r3, #8029	; 0x1f5d
   82422:	f2c0 0308 	movt	r3, #8
   82426:	4798      	blx	r3
    }
    return SCPI_RES_OK;
}
   82428:	f04f 0001 	mov.w	r0, #1
   8242c:	b002      	add	sp, #8
   8242e:	bd10      	pop	{r4, pc}

00082430 <SCPI_StatusPreset>:
/**
 * STATus:PRESet
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusPreset(scpi_t * context) {
   82430:	b508      	push	{r3, lr}
    /* clear STATUS:... */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
   82432:	f04f 0106 	mov.w	r1, #6
   82436:	f04f 0200 	mov.w	r2, #0
   8243a:	f641 735d 	movw	r3, #8029	; 0x1f5d
   8243e:	f2c0 0308 	movt	r3, #8
   82442:	4798      	blx	r3
    return SCPI_RES_OK;
}
   82444:	f04f 0001 	mov.w	r0, #1
   82448:	bd08      	pop	{r3, pc}
   8244a:	bf00      	nop

0008244c <writeData>:
 * @param context
 * @param data
 * @param len - lenght of data to be written
 * @return number of bytes written
 */
static size_t writeData(scpi_t * context, const char * data, size_t len) {
   8244c:	b508      	push	{r3, lr}
    return context->interface->write(context, data, len);
   8244e:	69c3      	ldr	r3, [r0, #28]
   82450:	685b      	ldr	r3, [r3, #4]
   82452:	4798      	blx	r3
}
   82454:	bd08      	pop	{r3, pc}
   82456:	bf00      	nop

00082458 <writeDelimiter>:
/**
 * Write result delimiter to output
 * @param context
 * @return number of bytes written
 */
static size_t writeDelimiter(scpi_t * context) {
   82458:	b508      	push	{r3, lr}
    if (context->output_count > 0) {
   8245a:	6a03      	ldr	r3, [r0, #32]
   8245c:	2b00      	cmp	r3, #0
   8245e:	dd0b      	ble.n	82478 <writeDelimiter+0x20>
        return writeData(context, ", ", 2);
   82460:	f64b 4134 	movw	r1, #48180	; 0xbc34
   82464:	f2c0 0108 	movt	r1, #8
   82468:	f04f 0202 	mov.w	r2, #2
   8246c:	f242 434d 	movw	r3, #9293	; 0x244d
   82470:	f2c0 0308 	movt	r3, #8
   82474:	4798      	blx	r3
   82476:	bd08      	pop	{r3, pc}
    } else {
        return 0;
   82478:	f04f 0000 	mov.w	r0, #0
    }
}
   8247c:	bd08      	pop	{r3, pc}
   8247e:	bf00      	nop

00082480 <paramSkipBytes>:
 * Skip num bytes from the begginig of parameters
 * @param context
 * @param num
 */
void paramSkipBytes(scpi_t * context, size_t num) {
    if (context->paramlist.length < num) {
   82480:	6983      	ldr	r3, [r0, #24]
   82482:	4299      	cmp	r1, r3
   82484:	bf28      	it	cs
   82486:	4619      	movcs	r1, r3
        num = context->paramlist.length;
    }
    context->paramlist.parameters += num;
   82488:	6942      	ldr	r2, [r0, #20]
   8248a:	1852      	adds	r2, r2, r1
   8248c:	6142      	str	r2, [r0, #20]
    context->paramlist.length -= num;
   8248e:	1a59      	subs	r1, r3, r1
   82490:	6181      	str	r1, [r0, #24]
   82492:	4770      	bx	lr

00082494 <paramSkipWhitespace>:

/**
 * Skip white spaces from the beggining of parameters
 * @param context
 */
void paramSkipWhitespace(scpi_t * context) {
   82494:	b510      	push	{r4, lr}
   82496:	4604      	mov	r4, r0
    size_t ws = skipWhitespace(context->paramlist.parameters, context->paramlist.length);
   82498:	6940      	ldr	r0, [r0, #20]
   8249a:	69a1      	ldr	r1, [r4, #24]
   8249c:	f642 43e1 	movw	r3, #11489	; 0x2ce1
   824a0:	f2c0 0308 	movt	r3, #8
   824a4:	4798      	blx	r3
   824a6:	4601      	mov	r1, r0
    paramSkipBytes(context, ws);
   824a8:	4620      	mov	r0, r4
   824aa:	f242 4281 	movw	r2, #9345	; 0x2481
   824ae:	f2c0 0208 	movt	r2, #8
   824b2:	4790      	blx	r2
   824b4:	bd10      	pop	{r4, pc}
   824b6:	bf00      	nop

000824b8 <paramNext>:
 * Find next parameter
 * @param context
 * @param mandatory
 * @return 
 */
bool_t paramNext(scpi_t * context, bool_t mandatory) {
   824b8:	b538      	push	{r3, r4, r5, lr}
   824ba:	4604      	mov	r4, r0
   824bc:	460d      	mov	r5, r1
    paramSkipWhitespace(context);
   824be:	f242 4395 	movw	r3, #9365	; 0x2495
   824c2:	f2c0 0308 	movt	r3, #8
   824c6:	4798      	blx	r3
    if (context->paramlist.length == 0) {
   824c8:	69a0      	ldr	r0, [r4, #24]
   824ca:	b960      	cbnz	r0, 824e6 <paramNext+0x2e>
        if (mandatory) {
   824cc:	2d00      	cmp	r5, #0
   824ce:	d031      	beq.n	82534 <paramNext+0x7c>
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
   824d0:	4620      	mov	r0, r4
   824d2:	f06f 016c 	mvn.w	r1, #108	; 0x6c
   824d6:	f641 424d 	movw	r2, #7245	; 0x1c4d
   824da:	f2c0 0208 	movt	r2, #8
   824de:	4790      	blx	r2
        }
        return FALSE;
   824e0:	f04f 0000 	mov.w	r0, #0
   824e4:	bd38      	pop	{r3, r4, r5, pc}
    }
    if (context->input_count != 0) {
   824e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   824e8:	b1e9      	cbz	r1, 82526 <paramNext+0x6e>
        if (context->paramlist.parameters[0] == ',') {
   824ea:	6962      	ldr	r2, [r4, #20]
   824ec:	7813      	ldrb	r3, [r2, #0]
   824ee:	2b2c      	cmp	r3, #44	; 0x2c
   824f0:	d10e      	bne.n	82510 <paramNext+0x58>
            paramSkipBytes(context, 1);
   824f2:	4620      	mov	r0, r4
   824f4:	f04f 0101 	mov.w	r1, #1
   824f8:	f242 4381 	movw	r3, #9345	; 0x2481
   824fc:	f2c0 0308 	movt	r3, #8
   82500:	4798      	blx	r3
            paramSkipWhitespace(context);
   82502:	4620      	mov	r0, r4
   82504:	f242 4195 	movw	r1, #9365	; 0x2495
   82508:	f2c0 0108 	movt	r1, #8
   8250c:	4788      	blx	r1
   8250e:	e00a      	b.n	82526 <paramNext+0x6e>
        } else {
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SEPARATOR);
   82510:	4620      	mov	r0, r4
   82512:	f06f 0166 	mvn.w	r1, #102	; 0x66
   82516:	f641 424d 	movw	r2, #7245	; 0x1c4d
   8251a:	f2c0 0208 	movt	r2, #8
   8251e:	4790      	blx	r2
            return FALSE;
   82520:	f04f 0000 	mov.w	r0, #0
   82524:	bd38      	pop	{r3, r4, r5, pc}
        }
    }
    context->input_count++;
   82526:	6a60      	ldr	r0, [r4, #36]	; 0x24
   82528:	f100 0001 	add.w	r0, r0, #1
   8252c:	6260      	str	r0, [r4, #36]	; 0x24
    return TRUE;
   8252e:	f04f 0001 	mov.w	r0, #1
   82532:	bd38      	pop	{r3, r4, r5, pc}
    paramSkipWhitespace(context);
    if (context->paramlist.length == 0) {
        if (mandatory) {
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
        }
        return FALSE;
   82534:	f04f 0000 	mov.w	r0, #0
            return FALSE;
        }
    }
    context->input_count++;
    return TRUE;
}
   82538:	bd38      	pop	{r3, r4, r5, pc}
   8253a:	bf00      	nop

0008253c <cmdlineSeparator>:
 * Find command line separator
 * @param cmd - input command
 * @param len - max search length
 * @return pointer to line separator or NULL
 */
const char * cmdlineSeparator(const char * cmd, size_t len) {
   8253c:	b508      	push	{r3, lr}
    return strnpbrk(cmd, len, ";\r\n");
   8253e:	f64b 4238 	movw	r2, #48184	; 0xbc38
   82542:	f2c0 0208 	movt	r2, #8
   82546:	f642 1371 	movw	r3, #10609	; 0x2971
   8254a:	f2c0 0308 	movt	r3, #8
   8254e:	4798      	blx	r3
}
   82550:	bd08      	pop	{r3, pc}
   82552:	bf00      	nop

00082554 <SCPI_Parse>:
 * @param context
 * @param data - complete command line
 * @param len - command line length
 * @return 1 if the last evaluated command was found
 */
int SCPI_Parse(scpi_t * context, const char * data, size_t len) {
   82554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82558:	b083      	sub	sp, #12
    int result = 0;
    const char * cmdline_end = data + len;
   8255a:	eb01 0b02 	add.w	fp, r1, r2
    const char * cmdline_ptr = data;
    size_t cmd_len;
    size_t cmdline_len;

    if (context == NULL) {
   8255e:	4607      	mov	r7, r0
   82560:	2800      	cmp	r0, #0
   82562:	f000 809e 	beq.w	826a2 <SCPI_Parse+0x14e>
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
   82566:	4559      	cmp	r1, fp
   82568:	f080 809e 	bcs.w	826a8 <SCPI_Parse+0x154>
   8256c:	460d      	mov	r5, r1
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
            } else {
                SCPI_ErrorPush(context, SCPI_ERROR_UNDEFINED_HEADER);
   8256e:	f641 434d 	movw	r3, #7245	; 0x1c4d
   82572:	f2c0 0308 	movt	r3, #8
   82576:	9301      	str	r3, [sp, #4]
    }

	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
   82578:	462c      	mov	r4, r5
   8257a:	ebc5 080b 	rsb	r8, r5, fp
 * @param cmd - input command
 * @param len - max search length
 * @return position of terminator or len
 */
size_t cmdTerminatorPos(const char * cmd, size_t len) {
    const char * terminator = strnpbrk(cmd, len, "; \r\n\t");
   8257e:	4628      	mov	r0, r5
   82580:	4641      	mov	r1, r8
   82582:	4a51      	ldr	r2, [pc, #324]	; (826c8 <SCPI_Parse+0x174>)
   82584:	f642 1671 	movw	r6, #10609	; 0x2971
   82588:	f2c0 0608 	movt	r6, #8
   8258c:	47b0      	blx	r6
    if (terminator == NULL) {
   8258e:	b108      	cbz	r0, 82594 <SCPI_Parse+0x40>
        return len;
    } else {
        return terminator - cmd;
   82590:	1b46      	subs	r6, r0, r5
   82592:	e000      	b.n	82596 <SCPI_Parse+0x42>
 * @return position of terminator or len
 */
size_t cmdTerminatorPos(const char * cmd, size_t len) {
    const char * terminator = strnpbrk(cmd, len, "; \r\n\t");
    if (terminator == NULL) {
        return len;
   82594:	4646      	mov	r6, r8
 * @param cmd - input command
 * @param len - max search length
 * @return position of line separator or len
 */
size_t cmdlineSeparatorPos(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
   82596:	4628      	mov	r0, r5
   82598:	4641      	mov	r1, r8
   8259a:	f242 523d 	movw	r2, #9533	; 0x253d
   8259e:	f2c0 0208 	movt	r2, #8
   825a2:	4790      	blx	r2
    if (separator == NULL) {
   825a4:	b110      	cbz	r0, 825ac <SCPI_Parse+0x58>
        return len;
    } else {
        return separator - cmd;
   825a6:	1b00      	subs	r0, r0, r4
   825a8:	9000      	str	r0, [sp, #0]
   825aa:	e001      	b.n	825b0 <SCPI_Parse+0x5c>
 * @return position of line separator or len
 */
size_t cmdlineSeparatorPos(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
    if (separator == NULL) {
        return len;
   825ac:	f8cd 8000 	str.w	r8, [sp]
	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        if (cmd_len > 0) {
   825b0:	2e00      	cmp	r6, #0
   825b2:	d05f      	beq.n	82674 <SCPI_Parse+0x120>
 */
static bool_t findCommand(scpi_t * context, const char * cmdline_ptr, size_t cmdline_len, size_t cmd_len) {
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
   825b4:	f8d7 9000 	ldr.w	r9, [r7]
   825b8:	f8d9 0000 	ldr.w	r0, [r9]
   825bc:	2800      	cmp	r0, #0
   825be:	d076      	beq.n	826ae <SCPI_Parse+0x15a>
   825c0:	f04f 0408 	mov.w	r4, #8
        cmd = &context->cmdlist[i];
        if (matchCommand(cmd->pattern, cmdline_ptr, cmd_len)) {
   825c4:	f642 6a35 	movw	sl, #11829	; 0x2e35
   825c8:	f2c0 0a08 	movt	sl, #8
   825cc:	4629      	mov	r1, r5
   825ce:	4632      	mov	r2, r6
   825d0:	47d0      	blx	sl
   825d2:	b190      	cbz	r0, 825fa <SCPI_Parse+0xa6>
            context->paramlist.cmd = cmd;
   825d4:	f8c7 9010 	str.w	r9, [r7, #16]
            context->paramlist.parameters = cmdline_ptr + cmd_len;
   825d8:	19ab      	adds	r3, r5, r6
   825da:	617b      	str	r3, [r7, #20]
            context->paramlist.length = cmdline_len - cmd_len;
   825dc:	9800      	ldr	r0, [sp, #0]
   825de:	1b86      	subs	r6, r0, r6
   825e0:	61be      	str	r6, [r7, #24]
 * @param context
 */
static void processCommand(scpi_t * context) {
    const scpi_command_t * cmd = context->paramlist.cmd;

    context->cmd_error = FALSE;
   825e2:	f04f 0400 	mov.w	r4, #0
   825e6:	f887 4028 	strb.w	r4, [r7, #40]	; 0x28
    context->output_count = 0;
   825ea:	f04f 0100 	mov.w	r1, #0
   825ee:	6239      	str	r1, [r7, #32]
    context->input_count = 0;
   825f0:	6279      	str	r1, [r7, #36]	; 0x24

    SCPI_DEBUG_COMMAND(context);
    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
   825f2:	f8d9 2004 	ldr.w	r2, [r9, #4]
   825f6:	b94a      	cbnz	r2, 8260c <SCPI_Parse+0xb8>
   825f8:	e014      	b.n	82624 <SCPI_Parse+0xd0>
 */
static bool_t findCommand(scpi_t * context, const char * cmdline_ptr, size_t cmdline_len, size_t cmd_len) {
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
   825fa:	6839      	ldr	r1, [r7, #0]
   825fc:	eb01 0904 	add.w	r9, r1, r4
   82600:	5908      	ldr	r0, [r1, r4]
   82602:	f104 0408 	add.w	r4, r4, #8
   82606:	2800      	cmp	r0, #0
   82608:	d1e0      	bne.n	825cc <SCPI_Parse+0x78>
   8260a:	e050      	b.n	826ae <SCPI_Parse+0x15a>
    context->input_count = 0;

    SCPI_DEBUG_COMMAND(context);
    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
        if ((cmd->callback(context) != SCPI_RES_OK) && !context->cmd_error) {
   8260c:	4638      	mov	r0, r7
   8260e:	4790      	blx	r2
   82610:	2801      	cmp	r0, #1
   82612:	d007      	beq.n	82624 <SCPI_Parse+0xd0>
   82614:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   82618:	b923      	cbnz	r3, 82624 <SCPI_Parse+0xd0>
            SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
   8261a:	4638      	mov	r0, r7
   8261c:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
   82620:	9c01      	ldr	r4, [sp, #4]
   82622:	47a0      	blx	r4
 * Conditionaly write "New Line"
 * @param context
 * @return number of characters written
 */
static size_t writeNewLine(scpi_t * context) {
    if (context->output_count > 0) {
   82624:	6a38      	ldr	r0, [r7, #32]
   82626:	2800      	cmp	r0, #0
   82628:	dd11      	ble.n	8264e <SCPI_Parse+0xfa>
        size_t len;
        len = writeData(context, "\r\n", 2);
   8262a:	4638      	mov	r0, r7
   8262c:	f64b 7138 	movw	r1, #48952	; 0xbf38
   82630:	f2c0 0108 	movt	r1, #8
   82634:	f04f 0202 	mov.w	r2, #2
   82638:	f242 434d 	movw	r3, #9293	; 0x244d
   8263c:	f2c0 0308 	movt	r3, #8
   82640:	4798      	blx	r3
 * Flush data to SCPI output
 * @param context
 * @return
 */
static int flushData(scpi_t * context) {
    if (context && context->interface && context->interface->flush) {
   82642:	69f9      	ldr	r1, [r7, #28]
   82644:	b119      	cbz	r1, 8264e <SCPI_Parse+0xfa>
   82646:	68ca      	ldr	r2, [r1, #12]
   82648:	b10a      	cbz	r2, 8264e <SCPI_Parse+0xfa>
        return context->interface->flush(context);
   8264a:	4638      	mov	r0, r7
   8264c:	4790      	blx	r2

    /* conditionaly write new line */
    writeNewLine(context);

    /* skip all whitespaces */
    paramSkipWhitespace(context);
   8264e:	4638      	mov	r0, r7
   82650:	f242 4495 	movw	r4, #9365	; 0x2495
   82654:	f2c0 0408 	movt	r4, #8
   82658:	47a0      	blx	r4

    /* set error if command callback did not read all parameters */
    if (context->paramlist.length != 0 && !context->cmd_error) {
   8265a:	69b8      	ldr	r0, [r7, #24]
   8265c:	b168      	cbz	r0, 8267a <SCPI_Parse+0x126>
   8265e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   82662:	b96b      	cbnz	r3, 82680 <SCPI_Parse+0x12c>
        SCPI_ErrorPush(context, SCPI_ERROR_PARAMETER_NOT_ALLOWED);
   82664:	4638      	mov	r0, r7
   82666:	f06f 016b 	mvn.w	r1, #107	; 0x6b
   8266a:	9a01      	ldr	r2, [sp, #4]
   8266c:	4790      	blx	r2
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
   8266e:	f04f 0401 	mov.w	r4, #1
   82672:	e007      	b.n	82684 <SCPI_Parse+0x130>
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
   82674:	f04f 0400 	mov.w	r4, #0
   82678:	e004      	b.n	82684 <SCPI_Parse+0x130>
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
   8267a:	f04f 0401 	mov.w	r4, #1
   8267e:	e001      	b.n	82684 <SCPI_Parse+0x130>
   82680:	f04f 0401 	mov.w	r4, #1
 * @param cmd - input command
 * @param len - max search length
 * @return Pointer to next part of command
 */
const char * cmdlineNext(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
   82684:	4628      	mov	r0, r5
   82686:	4641      	mov	r1, r8
   82688:	f242 533d 	movw	r3, #9533	; 0x253d
   8268c:	f2c0 0308 	movt	r3, #8
   82690:	4798      	blx	r3
    if (separator == NULL) {
        return cmd + len;
   82692:	4445      	add	r5, r8
 * @param len - max search length
 * @return Pointer to next part of command
 */
const char * cmdlineNext(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
    if (separator == NULL) {
   82694:	b108      	cbz	r0, 8269a <SCPI_Parse+0x146>
        return cmd + len;
    } else {
        return separator + 1;
   82696:	f100 0501 	add.w	r5, r0, #1
    if (context == NULL) {
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
   8269a:	45ab      	cmp	fp, r5
   8269c:	f63f af6c 	bhi.w	82578 <SCPI_Parse+0x24>
   826a0:	e00d      	b.n	826be <SCPI_Parse+0x16a>
    const char * cmdline_ptr = data;
    size_t cmd_len;
    size_t cmdline_len;

    if (context == NULL) {
        return -1;
   826a2:	f04f 34ff 	mov.w	r4, #4294967295
   826a6:	e00a      	b.n	826be <SCPI_Parse+0x16a>
    }

	
    while (cmdline_ptr < cmdline_end) {
   826a8:	f04f 0400 	mov.w	r4, #0
   826ac:	e007      	b.n	826be <SCPI_Parse+0x16a>
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
            } else {
                SCPI_ErrorPush(context, SCPI_ERROR_UNDEFINED_HEADER);
   826ae:	4638      	mov	r0, r7
   826b0:	f06f 0170 	mvn.w	r1, #112	; 0x70
   826b4:	9a01      	ldr	r2, [sp, #4]
   826b6:	4790      	blx	r2
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
   826b8:	f04f 0400 	mov.w	r4, #0
   826bc:	e7e2      	b.n	82684 <SCPI_Parse+0x130>
            }
        }
        cmdline_ptr = cmdlineNext(cmdline_ptr, cmdline_end - cmdline_ptr);
    }
    return result;
}
   826be:	4620      	mov	r0, r4
   826c0:	b003      	add	sp, #12
   826c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   826c6:	bf00      	nop
   826c8:	0008bc3c 	.word	0x0008bc3c

000826cc <SCPI_Init>:
 * @param context
 * @param command_list
 * @param buffer
 * @param interface
 */
void SCPI_Init(scpi_t * context) {
   826cc:	b508      	push	{r3, lr}
    context->buffer.position = 0;
   826ce:	f04f 0200 	mov.w	r2, #0
   826d2:	6082      	str	r2, [r0, #8]
    SCPI_ErrorInit(context);
   826d4:	f641 31d9 	movw	r1, #7129	; 0x1bd9
   826d8:	f2c0 0108 	movt	r1, #8
   826dc:	4788      	blx	r1
   826de:	bd08      	pop	{r3, pc}

000826e0 <SCPI_Input>:
 * @param context
 * @param data - data to process
 * @param len - length of data
 * @return 
 */
int SCPI_Input(scpi_t * context, const char * data, size_t len) {
   826e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   826e2:	4604      	mov	r4, r0
    int result = 0;
    const char * cmd_term;
	if (len == 0) {
   826e4:	4615      	mov	r5, r2
   826e6:	b972      	cbnz	r2, 82706 <SCPI_Input+0x26>
        context->buffer.data[context->buffer.position] = 0;
   826e8:	68c1      	ldr	r1, [r0, #12]
   826ea:	6882      	ldr	r2, [r0, #8]
   826ec:	f04f 0600 	mov.w	r6, #0
   826f0:	548e      	strb	r6, [r1, r2]
        result = SCPI_Parse(context, context->buffer.data, context->buffer.position);
   826f2:	68e1      	ldr	r1, [r4, #12]
   826f4:	68a2      	ldr	r2, [r4, #8]
   826f6:	f242 5555 	movw	r5, #9557	; 0x2555
   826fa:	f2c0 0508 	movt	r5, #8
   826fe:	47a8      	blx	r5
   82700:	4605      	mov	r5, r0
        context->buffer.position = 0;
   82702:	60a6      	str	r6, [r4, #8]
   82704:	e049      	b.n	8279a <SCPI_Input+0xba>
    } else {
        size_t buffer_free;
        int ws;
        buffer_free = context->buffer.length - context->buffer.position;
   82706:	6883      	ldr	r3, [r0, #8]
   82708:	6842      	ldr	r2, [r0, #4]
   8270a:	f102 30ff 	add.w	r0, r2, #4294967295
        if (len > (buffer_free - 1)) {
   8270e:	1ac2      	subs	r2, r0, r3
   82710:	4295      	cmp	r5, r2
   82712:	d83d      	bhi.n	82790 <SCPI_Input+0xb0>
            return -1;
        }
        memcpy(&context->buffer.data[context->buffer.position], data, len);
   82714:	68e7      	ldr	r7, [r4, #12]
   82716:	18f8      	adds	r0, r7, r3
   82718:	462a      	mov	r2, r5
   8271a:	f249 332d 	movw	r3, #37677	; 0x932d
   8271e:	f2c0 0308 	movt	r3, #8
   82722:	4798      	blx	r3
        context->buffer.position += len;
   82724:	68a1      	ldr	r1, [r4, #8]
   82726:	186d      	adds	r5, r5, r1
   82728:	60a5      	str	r5, [r4, #8]
        context->buffer.data[context->buffer.position] = 0;
   8272a:	68e0      	ldr	r0, [r4, #12]
   8272c:	f04f 0200 	mov.w	r2, #0
   82730:	5542      	strb	r2, [r0, r5]

        ws = skipWhitespace(context->buffer.data, context->buffer.position);
   82732:	68e0      	ldr	r0, [r4, #12]
   82734:	68a1      	ldr	r1, [r4, #8]
   82736:	f642 47e1 	movw	r7, #11489	; 0x2ce1
   8273a:	f2c0 0708 	movt	r7, #8
   8273e:	47b8      	blx	r7
   82740:	4605      	mov	r5, r0
        cmd_term = cmdlineTerminator(context->buffer.data + ws, context->buffer.position - ws);
   82742:	68e3      	ldr	r3, [r4, #12]
   82744:	68a1      	ldr	r1, [r4, #8]
 * @param cmd - input command
 * @param len - max search length
 * @return pointer to command line terminator or NULL
 */
const char * cmdlineTerminator(const char * cmd, size_t len) {
    return strnpbrk(cmd, len, "\r\n");
   82746:	1818      	adds	r0, r3, r0
   82748:	1b49      	subs	r1, r1, r5
   8274a:	f64b 7238 	movw	r2, #48952	; 0xbf38
   8274e:	f2c0 0208 	movt	r2, #8
   82752:	f642 1771 	movw	r7, #10609	; 0x2971
   82756:	f2c0 0708 	movt	r7, #8
   8275a:	47b8      	blx	r7
        context->buffer.position += len;
        context->buffer.data[context->buffer.position] = 0;

        ws = skipWhitespace(context->buffer.data, context->buffer.position);
        cmd_term = cmdlineTerminator(context->buffer.data + ws, context->buffer.position - ws);
        if (cmd_term != NULL) {
   8275c:	4607      	mov	r7, r0
   8275e:	b1d0      	cbz	r0, 82796 <SCPI_Input+0xb6>
            int curr_len = cmd_term - context->buffer.data;
   82760:	68e2      	ldr	r2, [r4, #12]
   82762:	1a86      	subs	r6, r0, r2
            result = SCPI_Parse(context, context->buffer.data + ws, curr_len - ws);
   82764:	4620      	mov	r0, r4
   82766:	1951      	adds	r1, r2, r5
   82768:	1b72      	subs	r2, r6, r5
   8276a:	f242 5555 	movw	r5, #9557	; 0x2555
   8276e:	f2c0 0508 	movt	r5, #8
   82772:	47a8      	blx	r5
   82774:	4605      	mov	r5, r0
            memmove(context->buffer.data, cmd_term, context->buffer.position - curr_len);
   82776:	68a3      	ldr	r3, [r4, #8]
   82778:	68e0      	ldr	r0, [r4, #12]
   8277a:	4639      	mov	r1, r7
   8277c:	1b9a      	subs	r2, r3, r6
   8277e:	f249 333f 	movw	r3, #37695	; 0x933f
   82782:	f2c0 0308 	movt	r3, #8
   82786:	4798      	blx	r3
            context->buffer.position -= curr_len;
   82788:	68a0      	ldr	r0, [r4, #8]
   8278a:	1b86      	subs	r6, r0, r6
   8278c:	60a6      	str	r6, [r4, #8]
   8278e:	e004      	b.n	8279a <SCPI_Input+0xba>
    } else {
        size_t buffer_free;
        int ws;
        buffer_free = context->buffer.length - context->buffer.position;
        if (len > (buffer_free - 1)) {
            return -1;
   82790:	f04f 35ff 	mov.w	r5, #4294967295
   82794:	e001      	b.n	8279a <SCPI_Input+0xba>
 * @param data - data to process
 * @param len - length of data
 * @return 
 */
int SCPI_Input(scpi_t * context, const char * data, size_t len) {
    int result = 0;
   82796:	f04f 0500 	mov.w	r5, #0
            context->buffer.position -= curr_len;
        }
    }

    return result;
}
   8279a:	4628      	mov	r0, r5
   8279c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8279e:	bf00      	nop

000827a0 <SCPI_ResultString>:
 * Write raw string result to the output
 * @param context
 * @param data
 * @return 
 */
size_t SCPI_ResultString(scpi_t * context, const char * data) {
   827a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   827a2:	4604      	mov	r4, r0
   827a4:	460d      	mov	r5, r1
    size_t len = strlen(data);
   827a6:	4608      	mov	r0, r1
   827a8:	f249 4339 	movw	r3, #37945	; 0x9439
   827ac:	f2c0 0308 	movt	r3, #8
   827b0:	4798      	blx	r3
   827b2:	4607      	mov	r7, r0
    size_t result = 0;
    result += writeDelimiter(context);
   827b4:	4620      	mov	r0, r4
   827b6:	f242 4159 	movw	r1, #9305	; 0x2459
   827ba:	f2c0 0108 	movt	r1, #8
   827be:	4788      	blx	r1
   827c0:	4606      	mov	r6, r0
    result += writeData(context, data, len);
   827c2:	4620      	mov	r0, r4
   827c4:	4629      	mov	r1, r5
   827c6:	463a      	mov	r2, r7
   827c8:	f242 434d 	movw	r3, #9293	; 0x244d
   827cc:	f2c0 0308 	movt	r3, #8
   827d0:	4798      	blx	r3
    context->output_count++;
   827d2:	6a22      	ldr	r2, [r4, #32]
   827d4:	f102 0201 	add.w	r2, r2, #1
   827d8:	6222      	str	r2, [r4, #32]
    return result;
}
   827da:	1980      	adds	r0, r0, r6
   827dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   827de:	bf00      	nop

000827e0 <SCPI_ResultInt>:
 * Write integer value to the result
 * @param context
 * @param val
 * @return 
 */
size_t SCPI_ResultInt(scpi_t * context, int32_t val) {
   827e0:	b570      	push	{r4, r5, r6, lr}
   827e2:	b084      	sub	sp, #16
   827e4:	4604      	mov	r4, r0
    char buffer[12];
    size_t result = 0;
    size_t len = longToStr(val, buffer, sizeof (buffer));
   827e6:	4608      	mov	r0, r1
   827e8:	a901      	add	r1, sp, #4
   827ea:	f04f 020c 	mov.w	r2, #12
   827ee:	f642 13bd 	movw	r3, #10685	; 0x29bd
   827f2:	f2c0 0308 	movt	r3, #8
   827f6:	4798      	blx	r3
   827f8:	4606      	mov	r6, r0
    result += writeDelimiter(context);
   827fa:	4620      	mov	r0, r4
   827fc:	f242 4159 	movw	r1, #9305	; 0x2459
   82800:	f2c0 0108 	movt	r1, #8
   82804:	4788      	blx	r1
   82806:	4605      	mov	r5, r0
    result += writeData(context, buffer, len);
   82808:	4620      	mov	r0, r4
   8280a:	a901      	add	r1, sp, #4
   8280c:	4632      	mov	r2, r6
   8280e:	f242 434d 	movw	r3, #9293	; 0x244d
   82812:	f2c0 0308 	movt	r3, #8
   82816:	4798      	blx	r3
    context->output_count++;
   82818:	6a22      	ldr	r2, [r4, #32]
   8281a:	f102 0201 	add.w	r2, r2, #1
   8281e:	6222      	str	r2, [r4, #32]
    return result;
}
   82820:	1940      	adds	r0, r0, r5
   82822:	b004      	add	sp, #16
   82824:	bd70      	pop	{r4, r5, r6, pc}
   82826:	bf00      	nop

00082828 <SCPI_ResultText>:
 * Write string withn " to the result
 * @param context
 * @param data
 * @return 
 */
size_t SCPI_ResultText(scpi_t * context, const char * data) {
   82828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8282c:	4604      	mov	r4, r0
   8282e:	460f      	mov	r7, r1
    size_t result = 0;
    result += writeDelimiter(context);
   82830:	f242 4359 	movw	r3, #9305	; 0x2459
   82834:	f2c0 0308 	movt	r3, #8
   82838:	4798      	blx	r3
   8283a:	4680      	mov	r8, r0
    result += writeData(context, "\"", 1);
   8283c:	f64b 768c 	movw	r6, #49036	; 0xbf8c
   82840:	f2c0 0608 	movt	r6, #8
   82844:	4620      	mov	r0, r4
   82846:	4631      	mov	r1, r6
   82848:	f04f 0201 	mov.w	r2, #1
   8284c:	f242 454d 	movw	r5, #9293	; 0x244d
   82850:	f2c0 0508 	movt	r5, #8
   82854:	47a8      	blx	r5
   82856:	4480      	add	r8, r0
    result += writeData(context, data, strlen(data));
   82858:	4638      	mov	r0, r7
   8285a:	f249 4139 	movw	r1, #37945	; 0x9439
   8285e:	f2c0 0108 	movt	r1, #8
   82862:	4788      	blx	r1
   82864:	4602      	mov	r2, r0
   82866:	4620      	mov	r0, r4
   82868:	4639      	mov	r1, r7
   8286a:	47a8      	blx	r5
   8286c:	eb08 0700 	add.w	r7, r8, r0
    result += writeData(context, "\"", 1);
   82870:	4620      	mov	r0, r4
   82872:	4631      	mov	r1, r6
   82874:	f04f 0201 	mov.w	r2, #1
   82878:	47a8      	blx	r5
    context->output_count++;
   8287a:	6a22      	ldr	r2, [r4, #32]
   8287c:	f102 0201 	add.w	r2, r2, #1
   82880:	6222      	str	r2, [r4, #32]
    return result;
}
   82882:	1838      	adds	r0, r7, r0
   82884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082888 <SCPI_ParamString>:
 * @param value
 * @param len
 * @param mandatory
 * @return 
 */
bool_t SCPI_ParamString(scpi_t * context, const char ** value, size_t * len, bool_t mandatory) {
   82888:	b570      	push	{r4, r5, r6, lr}
   8288a:	b082      	sub	sp, #8
   8288c:	4604      	mov	r4, r0
   8288e:	4615      	mov	r5, r2
    size_t length;

    if (!value || !len) {
   82890:	460e      	mov	r6, r1
   82892:	b319      	cbz	r1, 828dc <SCPI_ParamString+0x54>
   82894:	b32a      	cbz	r2, 828e2 <SCPI_ParamString+0x5a>
        return FALSE;
    }

    if (!paramNext(context, mandatory)) {
   82896:	4619      	mov	r1, r3
   82898:	f242 43b9 	movw	r3, #9401	; 0x24b9
   8289c:	f2c0 0308 	movt	r3, #8
   828a0:	4798      	blx	r3
   828a2:	b308      	cbz	r0, 828e8 <SCPI_ParamString+0x60>
        return FALSE;
    }

    if (locateStr(context->paramlist.parameters, context->paramlist.length, value, &length)) {
   828a4:	6960      	ldr	r0, [r4, #20]
   828a6:	69a1      	ldr	r1, [r4, #24]
   828a8:	4632      	mov	r2, r6
   828aa:	ab01      	add	r3, sp, #4
   828ac:	f642 3611 	movw	r6, #11025	; 0x2b11
   828b0:	f2c0 0608 	movt	r6, #8
   828b4:	47b0      	blx	r6
   828b6:	b1d0      	cbz	r0, 828ee <SCPI_ParamString+0x66>
        paramSkipBytes(context, length);
   828b8:	4620      	mov	r0, r4
   828ba:	9901      	ldr	r1, [sp, #4]
   828bc:	f242 4281 	movw	r2, #9345	; 0x2481
   828c0:	f2c0 0208 	movt	r2, #8
   828c4:	4790      	blx	r2
        paramSkipWhitespace(context);
   828c6:	4620      	mov	r0, r4
   828c8:	f242 4195 	movw	r1, #9365	; 0x2495
   828cc:	f2c0 0108 	movt	r1, #8
   828d0:	4788      	blx	r1
        if (len) {
            *len = length;
   828d2:	9801      	ldr	r0, [sp, #4]
   828d4:	6028      	str	r0, [r5, #0]
        }
        return TRUE;
   828d6:	f04f 0001 	mov.w	r0, #1
   828da:	e00a      	b.n	828f2 <SCPI_ParamString+0x6a>
 */
bool_t SCPI_ParamString(scpi_t * context, const char ** value, size_t * len, bool_t mandatory) {
    size_t length;

    if (!value || !len) {
        return FALSE;
   828dc:	f04f 0000 	mov.w	r0, #0
   828e0:	e007      	b.n	828f2 <SCPI_ParamString+0x6a>
   828e2:	f04f 0000 	mov.w	r0, #0
   828e6:	e004      	b.n	828f2 <SCPI_ParamString+0x6a>
    }

    if (!paramNext(context, mandatory)) {
        return FALSE;
   828e8:	f04f 0000 	mov.w	r0, #0
   828ec:	e001      	b.n	828f2 <SCPI_ParamString+0x6a>
            *len = length;
        }
        return TRUE;
    }

    return FALSE;
   828ee:	f04f 0000 	mov.w	r0, #0
}
   828f2:	b002      	add	sp, #8
   828f4:	bd70      	pop	{r4, r5, r6, pc}
   828f6:	bf00      	nop

000828f8 <SCPI_ParamInt>:
 * @param context
 * @param value
 * @param mandatory
 * @return 
 */
bool_t SCPI_ParamInt(scpi_t * context, int32_t * value, bool_t mandatory) {
   828f8:	b570      	push	{r4, r5, r6, lr}
   828fa:	b082      	sub	sp, #8
   828fc:	4604      	mov	r4, r0
   828fe:	4613      	mov	r3, r2
    const char * param;
    size_t param_len;
    size_t num_len;

    if (!value) {
   82900:	460e      	mov	r6, r1
   82902:	b1e1      	cbz	r1, 8293e <SCPI_ParamInt+0x46>
        return FALSE;
    }

    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
   82904:	a901      	add	r1, sp, #4
   82906:	466a      	mov	r2, sp
   82908:	f642 0589 	movw	r5, #10377	; 0x2889
   8290c:	f2c0 0508 	movt	r5, #8
   82910:	47a8      	blx	r5
   82912:	b1b8      	cbz	r0, 82944 <SCPI_ParamInt+0x4c>
        return FALSE;
    }

    num_len = strToLong(param, value);
   82914:	9801      	ldr	r0, [sp, #4]
   82916:	4631      	mov	r1, r6
   82918:	f642 23c5 	movw	r3, #10949	; 0x2ac5
   8291c:	f2c0 0308 	movt	r3, #8
   82920:	4798      	blx	r3

    if (num_len != param_len) {
   82922:	9900      	ldr	r1, [sp, #0]
   82924:	4288      	cmp	r0, r1
   82926:	d010      	beq.n	8294a <SCPI_ParamInt+0x52>
        SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
   82928:	4620      	mov	r0, r4
   8292a:	f06f 0189 	mvn.w	r1, #137	; 0x89
   8292e:	f641 424d 	movw	r2, #7245	; 0x1c4d
   82932:	f2c0 0208 	movt	r2, #8
   82936:	4790      	blx	r2
        return FALSE;
   82938:	f04f 0000 	mov.w	r0, #0
   8293c:	e007      	b.n	8294e <SCPI_ParamInt+0x56>
    const char * param;
    size_t param_len;
    size_t num_len;

    if (!value) {
        return FALSE;
   8293e:	f04f 0000 	mov.w	r0, #0
   82942:	e004      	b.n	8294e <SCPI_ParamInt+0x56>
    }

    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
        return FALSE;
   82944:	f04f 0000 	mov.w	r0, #0
   82948:	e001      	b.n	8294e <SCPI_ParamInt+0x56>
    if (num_len != param_len) {
        SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
        return FALSE;
    }

    return TRUE;
   8294a:	f04f 0001 	mov.w	r0, #1
}
   8294e:	b002      	add	sp, #8
   82950:	bd70      	pop	{r4, r5, r6, pc}
   82952:	bf00      	nop

00082954 <isFinalState>:
 */
static bool_t isFinalState(locate_text_states state) {
    return (
        ((state) == STATE_COMMA)
        || ((state) == STATE_LAST_WHITESPACE)
        || ((state) == STATE_TEXT) ||
   82954:	f1a0 0302 	sub.w	r3, r0, #2
   82958:	b2d9      	uxtb	r1, r3
   8295a:	2902      	cmp	r1, #2
   8295c:	d904      	bls.n	82968 <isFinalState+0x14>
   8295e:	f1d0 0001 	rsbs	r0, r0, #1
   82962:	bf38      	it	cc
   82964:	2000      	movcc	r0, #0
   82966:	4770      	bx	lr
   82968:	f04f 0001 	mov.w	r0, #1
        ((state) == STATE_FIRST_WHITESPACE)
    );
}
   8296c:	4770      	bx	lr
   8296e:	bf00      	nop

00082970 <strnpbrk>:
 * @param str
 * @param size
 * @param set
 * @return 
 */
char * strnpbrk(const char *str, size_t size, const char *set) {
   82970:	b470      	push	{r4, r5, r6}
    const char *scanp;
    long c, sc;
    const char * strend = str + size;
   82972:	1841      	adds	r1, r0, r1

    while ((strend != str) && ((c = *str++) != 0)) {
   82974:	4288      	cmp	r0, r1
   82976:	d01a      	beq.n	829ae <strnpbrk+0x3e>
   82978:	4603      	mov	r3, r0
   8297a:	f813 6b01 	ldrb.w	r6, [r3], #1
   8297e:	b936      	cbnz	r6, 8298e <strnpbrk+0x1e>
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
                return ((char *) (str - 1));
    }
    return (NULL);
   82980:	f04f 0000 	mov.w	r0, #0
   82984:	e018      	b.n	829b8 <strnpbrk+0x48>
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
   82986:	42b5      	cmp	r5, r6
   82988:	d102      	bne.n	82990 <strnpbrk+0x20>
   8298a:	e015      	b.n	829b8 <strnpbrk+0x48>
char * strnpbrk(const char *str, size_t size, const char *set) {
    const char *scanp;
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
   8298c:	4623      	mov	r3, r4
   8298e:	4614      	mov	r4, r2
        for (scanp = set; (sc = *scanp++) != '\0';)
   82990:	f814 5b01 	ldrb.w	r5, [r4], #1
   82994:	2d00      	cmp	r5, #0
   82996:	d1f6      	bne.n	82986 <strnpbrk+0x16>
char * strnpbrk(const char *str, size_t size, const char *set) {
    const char *scanp;
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
   82998:	428b      	cmp	r3, r1
   8299a:	d00b      	beq.n	829b4 <strnpbrk+0x44>
   8299c:	461c      	mov	r4, r3
   8299e:	f814 6b01 	ldrb.w	r6, [r4], #1
   829a2:	4618      	mov	r0, r3
   829a4:	2e00      	cmp	r6, #0
   829a6:	d1f1      	bne.n	8298c <strnpbrk+0x1c>
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
                return ((char *) (str - 1));
    }
    return (NULL);
   829a8:	f04f 0000 	mov.w	r0, #0
   829ac:	e004      	b.n	829b8 <strnpbrk+0x48>
   829ae:	f04f 0000 	mov.w	r0, #0
   829b2:	e001      	b.n	829b8 <strnpbrk+0x48>
   829b4:	f04f 0000 	mov.w	r0, #0
}
   829b8:	bc70      	pop	{r4, r5, r6}
   829ba:	4770      	bx	lr

000829bc <longToStr>:
 * @param val   integer value
 * @param str   converted textual representation
 * @param len   string buffer length
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
   829bc:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t x = 1000000000L;
    int_fast8_t digit;
    size_t pos = 0;

    if (val == 0) {
   829be:	4603      	mov	r3, r0
   829c0:	b938      	cbnz	r0, 829d2 <longToStr+0x16>
        if (pos < len) str[pos++] = '0';
   829c2:	2a00      	cmp	r2, #0
   829c4:	d055      	beq.n	82a72 <longToStr+0xb6>
   829c6:	f04f 0030 	mov.w	r0, #48	; 0x30
   829ca:	7008      	strb	r0, [r1, #0]
   829cc:	f04f 0001 	mov.w	r0, #1
   829d0:	e049      	b.n	82a66 <longToStr+0xaa>
    } else {
        if (val < 0) {
   829d2:	2800      	cmp	r0, #0
   829d4:	da08      	bge.n	829e8 <longToStr+0x2c>
            val = -val;
   829d6:	f1c0 0300 	rsb	r3, r0, #0
            if (pos < len) str[pos++] = '-';
   829da:	b142      	cbz	r2, 829ee <longToStr+0x32>
   829dc:	f04f 002d 	mov.w	r0, #45	; 0x2d
   829e0:	7008      	strb	r0, [r1, #0]
   829e2:	f04f 0001 	mov.w	r0, #1
   829e6:	e004      	b.n	829f2 <longToStr+0x36>
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
    uint32_t x = 1000000000L;
    int_fast8_t digit;
    size_t pos = 0;
   829e8:	f04f 0000 	mov.w	r0, #0
   829ec:	e001      	b.n	829f2 <longToStr+0x36>
   829ee:	f04f 0000 	mov.w	r0, #0
        if (val < 0) {
            val = -val;
            if (pos < len) str[pos++] = '-';
        }

        while ((val / x) == 0) {
   829f2:	461d      	mov	r5, r3
   829f4:	f64c 14ff 	movw	r4, #51711	; 0xc9ff
   829f8:	f6c3 349a 	movt	r4, #15258	; 0x3b9a
   829fc:	42a3      	cmp	r3, r4
   829fe:	d810      	bhi.n	82a22 <longToStr+0x66>
   82a00:	f44f 434a 	mov.w	r3, #51712	; 0xca00
   82a04:	f6c3 339a 	movt	r3, #15258	; 0x3b9a
            x /= 10;
   82a08:	f64c 46cd 	movw	r6, #52429	; 0xcccd
   82a0c:	f6cc 46cc 	movt	r6, #52428	; 0xcccc
   82a10:	fba6 4303 	umull	r4, r3, r6, r3
   82a14:	ea4f 03d3 	mov.w	r3, r3, lsr #3
        if (val < 0) {
            val = -val;
            if (pos < len) str[pos++] = '-';
        }

        while ((val / x) == 0) {
   82a18:	fbb5 f4f3 	udiv	r4, r5, r3
   82a1c:	2c00      	cmp	r4, #0
   82a1e:	d0f7      	beq.n	82a10 <longToStr+0x54>
   82a20:	e003      	b.n	82a2a <longToStr+0x6e>
   82a22:	f44f 434a 	mov.w	r3, #51712	; 0xca00
   82a26:	f6c3 339a 	movt	r3, #15258	; 0x3b9a
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   82a2a:	4282      	cmp	r2, r0
   82a2c:	d933      	bls.n	82a96 <longToStr+0xda>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   82a2e:	fbb5 f6f3 	udiv	r6, r5, r3
            break;
        }
    }
    
    return result;
}
   82a32:	b2f6      	uxtb	r6, r6

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
            val -= digit * x;
            x /= 10;
   82a34:	f64c 47cd 	movw	r7, #52429	; 0xcccd
   82a38:	f6cc 47cc 	movt	r7, #52428	; 0xcccc
   82a3c:	ea6f 0400 	mvn.w	r4, r0
   82a40:	18a4      	adds	r4, r4, r2
   82a42:	f014 0f01 	tst.w	r4, #1
   82a46:	d128      	bne.n	82a9a <longToStr+0xde>
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   82a48:	f106 0430 	add.w	r4, r6, #48	; 0x30
   82a4c:	540c      	strb	r4, [r1, r0]
   82a4e:	f100 0401 	add.w	r4, r0, #1
   82a52:	4620      	mov	r0, r4
            val -= digit * x;
   82a54:	fb03 5516 	mls	r5, r3, r6, r5
            x /= 10;
   82a58:	fba7 6303 	umull	r6, r3, r7, r3
        } while (x && (pos < len));
   82a5c:	08db      	lsrs	r3, r3, #3
   82a5e:	d002      	beq.n	82a66 <longToStr+0xaa>
   82a60:	42a2      	cmp	r2, r4
   82a62:	d809      	bhi.n	82a78 <longToStr+0xbc>
   82a64:	e017      	b.n	82a96 <longToStr+0xda>
    }

    if (pos < len) str[pos] = 0;
   82a66:	4290      	cmp	r0, r2
   82a68:	d215      	bcs.n	82a96 <longToStr+0xda>
   82a6a:	f04f 0200 	mov.w	r2, #0
   82a6e:	540a      	strb	r2, [r1, r0]
   82a70:	e011      	b.n	82a96 <longToStr+0xda>
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
    uint32_t x = 1000000000L;
    int_fast8_t digit;
    size_t pos = 0;
   82a72:	f04f 0000 	mov.w	r0, #0
   82a76:	e00e      	b.n	82a96 <longToStr+0xda>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   82a78:	fbb5 f0f3 	udiv	r0, r5, r3
            break;
        }
    }
    
    return result;
}
   82a7c:	b2c6      	uxtb	r6, r0
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   82a7e:	f106 0030 	add.w	r0, r6, #48	; 0x30
   82a82:	5508      	strb	r0, [r1, r4]
   82a84:	f104 0001 	add.w	r0, r4, #1
            val -= digit * x;
   82a88:	fb03 5516 	mls	r5, r3, r6, r5
            x /= 10;
   82a8c:	fba7 4303 	umull	r4, r3, r7, r3
        } while (x && (pos < len));
   82a90:	08db      	lsrs	r3, r3, #3
   82a92:	d113      	bne.n	82abc <longToStr+0x100>
   82a94:	e7e7      	b.n	82a66 <longToStr+0xaa>
    }

    if (pos < len) str[pos] = 0;
    return pos;
}
   82a96:	bcf0      	pop	{r4, r5, r6, r7}
   82a98:	4770      	bx	lr
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   82a9a:	f106 0430 	add.w	r4, r6, #48	; 0x30
   82a9e:	540c      	strb	r4, [r1, r0]
   82aa0:	f100 0001 	add.w	r0, r0, #1
            val -= digit * x;
   82aa4:	fb03 5516 	mls	r5, r3, r6, r5
            x /= 10;
   82aa8:	fba7 6303 	umull	r6, r3, r7, r3
        } while (x && (pos < len));
   82aac:	08db      	lsrs	r3, r3, #3
   82aae:	d0da      	beq.n	82a66 <longToStr+0xaa>
   82ab0:	4282      	cmp	r2, r0
   82ab2:	d9f0      	bls.n	82a96 <longToStr+0xda>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   82ab4:	fbb5 f6f3 	udiv	r6, r5, r3
            break;
        }
    }
    
    return result;
}
   82ab8:	b2f6      	uxtb	r6, r6
   82aba:	e7c5      	b.n	82a48 <longToStr+0x8c>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   82abc:	fbb5 f6f3 	udiv	r6, r5, r3
            break;
        }
    }
    
    return result;
}
   82ac0:	b2f6      	uxtb	r6, r6
   82ac2:	e7c1      	b.n	82a48 <longToStr+0x8c>

00082ac4 <strToLong>:
 * Converts string to signed 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strToLong(const char * str, int32_t * val) {
   82ac4:	b530      	push	{r4, r5, lr}
   82ac6:	b083      	sub	sp, #12
   82ac8:	4604      	mov	r4, r0
   82aca:	460d      	mov	r5, r1
    char * endptr;
    *val = strtol(str, &endptr, 0);
   82acc:	a901      	add	r1, sp, #4
   82ace:	f04f 0200 	mov.w	r2, #0
   82ad2:	f249 53e1 	movw	r3, #38369	; 0x95e1
   82ad6:	f2c0 0308 	movt	r3, #8
   82ada:	4798      	blx	r3
   82adc:	6028      	str	r0, [r5, #0]
    return endptr - str;
}
   82ade:	9801      	ldr	r0, [sp, #4]
   82ae0:	1b00      	subs	r0, r0, r4
   82ae2:	b003      	add	sp, #12
   82ae4:	bd30      	pop	{r4, r5, pc}
   82ae6:	bf00      	nop

00082ae8 <compareStr>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
   82ae8:	b510      	push	{r4, lr}
   82aea:	460c      	mov	r4, r1
    if (len1 != len2) {
   82aec:	4299      	cmp	r1, r3
   82aee:	d10b      	bne.n	82b08 <compareStr+0x20>
        return FALSE;
    }

    if (SCPI_strncasecmp(str1, str2, len2) == 0) {
   82af0:	4611      	mov	r1, r2
   82af2:	4622      	mov	r2, r4
   82af4:	f249 4349 	movw	r3, #37961	; 0x9449
   82af8:	f2c0 0308 	movt	r3, #8
   82afc:	4798      	blx	r3
   82afe:	f1d0 0001 	rsbs	r0, r0, #1
   82b02:	bf38      	it	cc
   82b04:	2000      	movcc	r0, #0
   82b06:	bd10      	pop	{r4, pc}
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
    if (len1 != len2) {
        return FALSE;
   82b08:	f04f 0000 	mov.w	r0, #0
    if (SCPI_strncasecmp(str1, str2, len2) == 0) {
        return TRUE;
    }

    return FALSE;
}
   82b0c:	bd10      	pop	{r4, pc}
   82b0e:	bf00      	nop

00082b10 <locateStr>:
 * @param len1 length of string
 * @param str2 result
 * @param len2 length of result
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
   82b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82b14:	b083      	sub	sp, #12
   82b16:	4606      	mov	r6, r0
   82b18:	9201      	str	r2, [sp, #4]
   82b1a:	4699      	mov	r9, r3
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   82b1c:	460b      	mov	r3, r1
   82b1e:	2900      	cmp	r1, #0
   82b20:	d03e      	beq.n	82ba0 <locateStr+0x90>
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   82b22:	f240 2298 	movw	r2, #664	; 0x298
   82b26:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82b2a:	f8d2 e000 	ldr.w	lr, [r2]
   82b2e:	f04f 0501 	mov.w	r5, #1
   82b32:	f04f 0400 	mov.w	r4, #0
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;
   82b36:	4627      	mov	r7, r4
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
   82b38:	46a0      	mov	r8, r4
            } else if (c == ',') {
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
                nfa->stopIdx = nfa->i + 1;
                nfa->state = STATE_TEXT;
   82b3a:	f04f 0b02 	mov.w	fp, #2
   82b3e:	ea6f 0104 	mvn.w	r1, r4
   82b42:	18c9      	adds	r1, r1, r3
   82b44:	4029      	ands	r1, r5
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   82b46:	5d00      	ldrb	r0, [r0, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   82b48:	4622      	mov	r2, r4
   82b4a:	2c00      	cmp	r4, #0
   82b4c:	d04f      	beq.n	82bee <locateStr+0xde>
   82b4e:	e062      	b.n	82c16 <locateStr+0x106>
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   82b50:	5d31      	ldrb	r1, [r6, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   82b52:	b112      	cbz	r2, 82b5a <locateStr+0x4a>
   82b54:	2a02      	cmp	r2, #2
   82b56:	d11b      	bne.n	82b90 <locateStr+0x80>
   82b58:	e00f      	b.n	82b7a <locateStr+0x6a>
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   82b5a:	eb0e 0001 	add.w	r0, lr, r1
   82b5e:	7840      	ldrb	r0, [r0, #1]
   82b60:	f000 0008 	and.w	r0, r0, #8
   82b64:	b2c0      	uxtb	r0, r0
   82b66:	b110      	cbz	r0, 82b6e <locateStr+0x5e>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   82b68:	462f      	mov	r7, r5
   82b6a:	46a8      	mov	r8, r5
   82b6c:	e010      	b.n	82b90 <locateStr+0x80>
            } else if (c == ',') {
   82b6e:	292c      	cmp	r1, #44	; 0x2c
   82b70:	d01b      	beq.n	82baa <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   82b72:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   82b74:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   82b76:	465a      	mov	r2, fp
   82b78:	e00a      	b.n	82b90 <locateStr+0x80>
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   82b7a:	292c      	cmp	r1, #44	; 0x2c
   82b7c:	d018      	beq.n	82bb0 <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   82b7e:	eb0e 0001 	add.w	r0, lr, r1
   82b82:	7841      	ldrb	r1, [r0, #1]
   82b84:	f001 0008 	and.w	r0, r1, #8
   82b88:	b2c1      	uxtb	r1, r0
                nfa->stopIdx = nfa->i + 1;
   82b8a:	2900      	cmp	r1, #0
   82b8c:	bf08      	it	eq
   82b8e:	462f      	moveq	r7, r5
   82b90:	f104 0401 	add.w	r4, r4, #1
   82b94:	f105 0501 	add.w	r5, r5, #1
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   82b98:	5d31      	ldrb	r1, [r6, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   82b9a:	2a00      	cmp	r2, #0
   82b9c:	d076      	beq.n	82c8c <locateStr+0x17c>
   82b9e:	e089      	b.n	82cb4 <locateStr+0x1a4>
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;
   82ba0:	f04f 0700 	mov.w	r7, #0
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
   82ba4:	46b8      	mov	r8, r7
 * @param len2 length of result
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
   82ba6:	463a      	mov	r2, r7
   82ba8:	e004      	b.n	82bb4 <locateStr+0xa4>
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   82baa:	f04f 0204 	mov.w	r2, #4
   82bae:	e001      	b.n	82bb4 <locateStr+0xa4>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   82bb0:	f04f 0204 	mov.w	r2, #4
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
            break;
        }
    }

    if (isFinalState(nfa.state)) {
   82bb4:	4610      	mov	r0, r2
   82bb6:	f642 1355 	movw	r3, #10581	; 0x2955
   82bba:	f2c0 0308 	movt	r3, #8
   82bbe:	4798      	blx	r3
   82bc0:	b168      	cbz	r0, 82bde <locateStr+0xce>

        if (str2) {
   82bc2:	9a01      	ldr	r2, [sp, #4]
   82bc4:	b10a      	cbz	r2, 82bca <locateStr+0xba>
            *str2 = &str1[nfa.startIdx];
   82bc6:	4446      	add	r6, r8
   82bc8:	6016      	str	r6, [r2, #0]
        }

        if (len2) {
   82bca:	f1b9 0f00 	cmp.w	r9, #0
   82bce:	d009      	beq.n	82be4 <locateStr+0xd4>
            *len2 = nfa.stopIdx - nfa.startIdx;
   82bd0:	ebc8 0707 	rsb	r7, r8, r7
   82bd4:	f8c9 7000 	str.w	r7, [r9]
        }
        return TRUE;
   82bd8:	f04f 0001 	mov.w	r0, #1
   82bdc:	e004      	b.n	82be8 <locateStr+0xd8>
    }
    return FALSE;
   82bde:	f04f 0000 	mov.w	r0, #0
   82be2:	e001      	b.n	82be8 <locateStr+0xd8>
        }

        if (len2) {
            *len2 = nfa.stopIdx - nfa.startIdx;
        }
        return TRUE;
   82be4:	f04f 0001 	mov.w	r0, #1
    }
    return FALSE;
}
   82be8:	b003      	add	sp, #12
   82bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   82bee:	eb0e 0c00 	add.w	ip, lr, r0
   82bf2:	f89c c001 	ldrb.w	ip, [ip, #1]
   82bf6:	f00c 0c08 	and.w	ip, ip, #8
   82bfa:	fa5f fc8c 	uxtb.w	ip, ip
   82bfe:	f1bc 0f00 	cmp.w	ip, #0
   82c02:	d105      	bne.n	82c10 <locateStr+0x100>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   82c04:	282c      	cmp	r0, #44	; 0x2c
   82c06:	d0d0      	beq.n	82baa <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   82c08:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   82c0a:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   82c0c:	465a      	mov	r2, fp
   82c0e:	e00e      	b.n	82c2e <locateStr+0x11e>
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   82c10:	462f      	mov	r7, r5
   82c12:	46a8      	mov	r8, r5
   82c14:	e00b      	b.n	82c2e <locateStr+0x11e>
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   82c16:	2c02      	cmp	r4, #2
   82c18:	d109      	bne.n	82c2e <locateStr+0x11e>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   82c1a:	282c      	cmp	r0, #44	; 0x2c
   82c1c:	d0c8      	beq.n	82bb0 <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   82c1e:	4470      	add	r0, lr
   82c20:	7840      	ldrb	r0, [r0, #1]
   82c22:	f000 0008 	and.w	r0, r0, #8
   82c26:	b2c0      	uxtb	r0, r0
                nfa->stopIdx = nfa->i + 1;
   82c28:	2800      	cmp	r0, #0
   82c2a:	bf08      	it	eq
   82c2c:	462f      	moveq	r7, r5
   82c2e:	f104 0401 	add.w	r4, r4, #1
   82c32:	f105 0501 	add.w	r5, r5, #1
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   82c36:	429c      	cmp	r4, r3
   82c38:	d0bc      	beq.n	82bb4 <locateStr+0xa4>
   82c3a:	2900      	cmp	r1, #0
   82c3c:	d088      	beq.n	82b50 <locateStr+0x40>
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   82c3e:	5d31      	ldrb	r1, [r6, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   82c40:	b97a      	cbnz	r2, 82c62 <locateStr+0x152>
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   82c42:	eb0e 0001 	add.w	r0, lr, r1
   82c46:	7840      	ldrb	r0, [r0, #1]
   82c48:	f000 0008 	and.w	r0, r0, #8
   82c4c:	b2c0      	uxtb	r0, r0
   82c4e:	b928      	cbnz	r0, 82c5c <locateStr+0x14c>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   82c50:	292c      	cmp	r1, #44	; 0x2c
   82c52:	d0aa      	beq.n	82baa <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   82c54:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   82c56:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   82c58:	465a      	mov	r2, fp
   82c5a:	e00f      	b.n	82c7c <locateStr+0x16c>
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   82c5c:	462f      	mov	r7, r5
   82c5e:	46a8      	mov	r8, r5
   82c60:	e00c      	b.n	82c7c <locateStr+0x16c>
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   82c62:	2a02      	cmp	r2, #2
   82c64:	d10a      	bne.n	82c7c <locateStr+0x16c>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   82c66:	292c      	cmp	r1, #44	; 0x2c
   82c68:	d0a2      	beq.n	82bb0 <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   82c6a:	eb0e 0001 	add.w	r0, lr, r1
   82c6e:	7841      	ldrb	r1, [r0, #1]
   82c70:	f001 0008 	and.w	r0, r1, #8
   82c74:	b2c1      	uxtb	r1, r0
                nfa->stopIdx = nfa->i + 1;
   82c76:	2900      	cmp	r1, #0
   82c78:	bf08      	it	eq
   82c7a:	462f      	moveq	r7, r5
   82c7c:	f104 0401 	add.w	r4, r4, #1
   82c80:	f105 0501 	add.w	r5, r5, #1
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   82c84:	429c      	cmp	r4, r3
   82c86:	f47f af63 	bne.w	82b50 <locateStr+0x40>
   82c8a:	e793      	b.n	82bb4 <locateStr+0xa4>
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   82c8c:	eb0e 0a01 	add.w	sl, lr, r1
   82c90:	f89a a001 	ldrb.w	sl, [sl, #1]
   82c94:	f00a 0a08 	and.w	sl, sl, #8
   82c98:	fa5f fa8a 	uxtb.w	sl, sl
   82c9c:	f1ba 0f00 	cmp.w	sl, #0
   82ca0:	d105      	bne.n	82cae <locateStr+0x19e>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   82ca2:	292c      	cmp	r1, #44	; 0x2c
   82ca4:	d081      	beq.n	82baa <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   82ca6:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   82ca8:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   82caa:	465a      	mov	r2, fp
   82cac:	e00f      	b.n	82cce <locateStr+0x1be>
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   82cae:	462f      	mov	r7, r5
   82cb0:	46a8      	mov	r8, r5
   82cb2:	e00c      	b.n	82cce <locateStr+0x1be>
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   82cb4:	2a02      	cmp	r2, #2
   82cb6:	d10a      	bne.n	82cce <locateStr+0x1be>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   82cb8:	292c      	cmp	r1, #44	; 0x2c
   82cba:	f43f af79 	beq.w	82bb0 <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   82cbe:	4471      	add	r1, lr
   82cc0:	7849      	ldrb	r1, [r1, #1]
   82cc2:	f001 0108 	and.w	r1, r1, #8
   82cc6:	b2c9      	uxtb	r1, r1
                nfa->stopIdx = nfa->i + 1;
   82cc8:	2900      	cmp	r1, #0
   82cca:	bf08      	it	eq
   82ccc:	462f      	moveq	r7, r5
   82cce:	f104 0401 	add.w	r4, r4, #1
   82cd2:	f105 0501 	add.w	r5, r5, #1
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   82cd6:	429c      	cmp	r4, r3
   82cd8:	f47f af3a 	bne.w	82b50 <locateStr+0x40>
   82cdc:	e76a      	b.n	82bb4 <locateStr+0xa4>
   82cde:	bf00      	nop

00082ce0 <skipWhitespace>:
 * Count white spaces from the beggining
 * @param cmd - command
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
   82ce0:	b470      	push	{r4, r5, r6}
    size_t i;
    for (i = 0; i < len; i++) {
   82ce2:	460e      	mov	r6, r1
   82ce4:	b311      	cbz	r1, 82d2c <skipWhitespace+0x4c>
        if (!isspace((unsigned char)cmd[i])) {
   82ce6:	f240 2398 	movw	r3, #664	; 0x298
   82cea:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82cee:	681c      	ldr	r4, [r3, #0]
   82cf0:	7801      	ldrb	r1, [r0, #0]
   82cf2:	1862      	adds	r2, r4, r1
   82cf4:	7853      	ldrb	r3, [r2, #1]
   82cf6:	f003 0108 	and.w	r1, r3, #8
   82cfa:	b2ca      	uxtb	r2, r1
   82cfc:	b1c2      	cbz	r2, 82d30 <skipWhitespace+0x50>
   82cfe:	4603      	mov	r3, r0
   82d00:	f04f 0000 	mov.w	r0, #0
   82d04:	f016 0f01 	tst.w	r6, #1
   82d08:	d109      	bne.n	82d1e <skipWhitespace+0x3e>
   82d0a:	e015      	b.n	82d38 <skipWhitespace+0x58>
   82d0c:	f813 5f01 	ldrb.w	r5, [r3, #1]!
   82d10:	1961      	adds	r1, r4, r5
   82d12:	784d      	ldrb	r5, [r1, #1]
   82d14:	f005 0108 	and.w	r1, r5, #8
   82d18:	b2cd      	uxtb	r5, r1
   82d1a:	b9cd      	cbnz	r5, 82d50 <skipWhitespace+0x70>
   82d1c:	e00a      	b.n	82d34 <skipWhitespace+0x54>
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   82d1e:	f100 0201 	add.w	r2, r0, #1
   82d22:	4610      	mov	r0, r2
   82d24:	42b2      	cmp	r2, r6
   82d26:	d1f1      	bne.n	82d0c <skipWhitespace+0x2c>
        if (!isspace((unsigned char)cmd[i])) {
            return i;
        }
    }
    return len;
   82d28:	4630      	mov	r0, r6
   82d2a:	e003      	b.n	82d34 <skipWhitespace+0x54>
   82d2c:	4608      	mov	r0, r1
   82d2e:	e001      	b.n	82d34 <skipWhitespace+0x54>
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   82d30:	f04f 0000 	mov.w	r0, #0
        if (!isspace((unsigned char)cmd[i])) {
            return i;
        }
    }
    return len;
}
   82d34:	bc70      	pop	{r4, r5, r6}
   82d36:	4770      	bx	lr
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   82d38:	f100 0001 	add.w	r0, r0, #1
        if (!isspace((unsigned char)cmd[i])) {
   82d3c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   82d40:	1862      	adds	r2, r4, r1
   82d42:	7851      	ldrb	r1, [r2, #1]
   82d44:	f001 0208 	and.w	r2, r1, #8
   82d48:	b2d1      	uxtb	r1, r2
   82d4a:	2900      	cmp	r1, #0
   82d4c:	d1e7      	bne.n	82d1e <skipWhitespace+0x3e>
   82d4e:	e7f1      	b.n	82d34 <skipWhitespace+0x54>
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   82d50:	f102 0001 	add.w	r0, r2, #1
        if (!isspace((unsigned char)cmd[i])) {
   82d54:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   82d58:	18a1      	adds	r1, r4, r2
   82d5a:	784a      	ldrb	r2, [r1, #1]
   82d5c:	f002 0108 	and.w	r1, r2, #8
   82d60:	b2ca      	uxtb	r2, r1
   82d62:	2a00      	cmp	r2, #0
   82d64:	d1db      	bne.n	82d1e <skipWhitespace+0x3e>
   82d66:	e7e5      	b.n	82d34 <skipWhitespace+0x54>

00082d68 <matchPattern>:
 * @param pattern_len
 * @param str
 * @param str_len
 * @return 
 */
bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
   82d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82d6c:	4680      	mov	r8, r0
   82d6e:	4691      	mov	r9, r2
   82d70:	469a      	mov	sl, r3
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   82d72:	468e      	mov	lr, r1
   82d74:	b321      	cbz	r1, 82dc0 <matchPattern+0x58>
   82d76:	7803      	ldrb	r3, [r0, #0]
   82d78:	b32b      	cbz	r3, 82dc6 <matchPattern+0x5e>
        if (islower((unsigned char)pattern[i])) {
   82d7a:	f240 2298 	movw	r2, #664	; 0x298
   82d7e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82d82:	6810      	ldr	r0, [r2, #0]
   82d84:	18c1      	adds	r1, r0, r3
   82d86:	784c      	ldrb	r4, [r1, #1]
   82d88:	f004 0503 	and.w	r5, r4, #3
   82d8c:	2d02      	cmp	r5, #2
   82d8e:	d01d      	beq.n	82dcc <matchPattern+0x64>
   82d90:	4642      	mov	r2, r8
   82d92:	f04f 0400 	mov.w	r4, #0
   82d96:	f01e 0f01 	tst.w	lr, #1
   82d9a:	d107      	bne.n	82dac <matchPattern+0x44>
   82d9c:	e02f      	b.n	82dfe <matchPattern+0x96>
   82d9e:	19c7      	adds	r7, r0, r7
   82da0:	7879      	ldrb	r1, [r7, #1]
   82da2:	f001 0503 	and.w	r5, r1, #3
   82da6:	2d02      	cmp	r5, #2
   82da8:	d136      	bne.n	82e18 <matchPattern+0xb0>
   82daa:	e011      	b.n	82dd0 <matchPattern+0x68>
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   82dac:	f104 0601 	add.w	r6, r4, #1
   82db0:	4634      	mov	r4, r6
   82db2:	4576      	cmp	r6, lr
   82db4:	d00c      	beq.n	82dd0 <matchPattern+0x68>
   82db6:	f812 7f01 	ldrb.w	r7, [r2, #1]!
   82dba:	2f00      	cmp	r7, #0
   82dbc:	d1ef      	bne.n	82d9e <matchPattern+0x36>
   82dbe:	e007      	b.n	82dd0 <matchPattern+0x68>
   82dc0:	f04f 0400 	mov.w	r4, #0
   82dc4:	e004      	b.n	82dd0 <matchPattern+0x68>
   82dc6:	f04f 0400 	mov.w	r4, #0
   82dca:	e001      	b.n	82dd0 <matchPattern+0x68>
   82dcc:	f04f 0400 	mov.w	r4, #0
 * @param str_len
 * @return 
 */
bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
    int pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
    return compareStr(pattern, pattern_len, str, str_len) ||
   82dd0:	4640      	mov	r0, r8
   82dd2:	4671      	mov	r1, lr
   82dd4:	464a      	mov	r2, r9
   82dd6:	4653      	mov	r3, sl
   82dd8:	f642 25e9 	movw	r5, #10985	; 0x2ae9
   82ddc:	f2c0 0508 	movt	r5, #8
   82de0:	47a8      	blx	r5
   82de2:	b930      	cbnz	r0, 82df2 <matchPattern+0x8a>
            compareStr(pattern, pattern_sep_pos_short, str, str_len);
   82de4:	4640      	mov	r0, r8
   82de6:	4621      	mov	r1, r4
   82de8:	464a      	mov	r2, r9
   82dea:	4653      	mov	r3, sl
   82dec:	462c      	mov	r4, r5
   82dee:	47a8      	blx	r5
   82df0:	e001      	b.n	82df6 <matchPattern+0x8e>
 * @param str_len
 * @return 
 */
bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
    int pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
    return compareStr(pattern, pattern_len, str, str_len) ||
   82df2:	f04f 0001 	mov.w	r0, #1
            compareStr(pattern, pattern_sep_pos_short, str, str_len);
}
   82df6:	f000 0001 	and.w	r0, r0, #1
   82dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   82dfe:	f104 0401 	add.w	r4, r4, #1
   82e02:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   82e06:	2b00      	cmp	r3, #0
   82e08:	d0e2      	beq.n	82dd0 <matchPattern+0x68>
        if (islower((unsigned char)pattern[i])) {
   82e0a:	18c1      	adds	r1, r0, r3
   82e0c:	784d      	ldrb	r5, [r1, #1]
   82e0e:	f005 0303 	and.w	r3, r5, #3
   82e12:	2b02      	cmp	r3, #2
   82e14:	d1ca      	bne.n	82dac <matchPattern+0x44>
   82e16:	e7db      	b.n	82dd0 <matchPattern+0x68>
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   82e18:	f106 0401 	add.w	r4, r6, #1
   82e1c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   82e20:	2b00      	cmp	r3, #0
   82e22:	d0d5      	beq.n	82dd0 <matchPattern+0x68>
        if (islower((unsigned char)pattern[i])) {
   82e24:	18c1      	adds	r1, r0, r3
   82e26:	784d      	ldrb	r5, [r1, #1]
   82e28:	f005 0303 	and.w	r3, r5, #3
   82e2c:	2b02      	cmp	r3, #2
   82e2e:	d1bd      	bne.n	82dac <matchPattern+0x44>
   82e30:	e7ce      	b.n	82dd0 <matchPattern+0x68>
   82e32:	bf00      	nop

00082e34 <matchCommand>:
 * @param pattern
 * @param cmd - command
 * @param len - max search length
 * @return TRUE if pattern matches, FALSE otherwise
 */
bool_t matchCommand(const char * pattern, const char * cmd, size_t len) {
   82e34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82e38:	4605      	mov	r5, r0
   82e3a:	460c      	mov	r4, r1
   82e3c:	4616      	mov	r6, r2
    int result = FALSE;
    
    const char * pattern_ptr = pattern;
    int pattern_len = strlen(pattern);
   82e3e:	f249 4339 	movw	r3, #37945	; 0x9439
   82e42:	f2c0 0308 	movt	r3, #8
   82e46:	4798      	blx	r3
    const char * pattern_end = pattern + pattern_len;
   82e48:	eb05 0900 	add.w	r9, r5, r0
    
    const char * cmd_ptr = cmd;
    size_t cmd_len = SCPI_strnlen(cmd, len);
   82e4c:	4620      	mov	r0, r4
   82e4e:	4631      	mov	r1, r6
   82e50:	f249 42bb 	movw	r2, #38075	; 0x94bb
   82e54:	f2c0 0208 	movt	r2, #8
   82e58:	4790      	blx	r2
    const char * cmd_end = cmd + cmd_len;
   82e5a:	eb04 0a00 	add.w	sl, r4, r0
    
    /* TODO: now it is possible to send command ":*IDN?" which is incorrect */
    if (iscolon(cmd_ptr[0])) {
   82e5e:	7820      	ldrb	r0, [r4, #0]
   82e60:	283a      	cmp	r0, #58	; 0x3a
        cmd_len --;
        cmd_ptr ++;
   82e62:	bf08      	it	eq
   82e64:	3401      	addeq	r4, #1
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorPos(const char * pattern, size_t len) {
    
    char * separator = strnpbrk(pattern, len, "?:[]");
   82e66:	f64b 6bac 	movw	fp, #48812	; 0xbeac
   82e6a:	f2c0 0b08 	movt	fp, #8
   82e6e:	f642 1871 	movw	r8, #10609	; 0x2971
   82e72:	f2c0 0808 	movt	r8, #8
        cmd_len --;
        cmd_ptr ++;
    }
    
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
   82e76:	ebc5 0709 	rsb	r7, r5, r9
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorPos(const char * pattern, size_t len) {
    
    char * separator = strnpbrk(pattern, len, "?:[]");
   82e7a:	4628      	mov	r0, r5
   82e7c:	4639      	mov	r1, r7
   82e7e:	465a      	mov	r2, fp
   82e80:	47c0      	blx	r8
    if (separator == NULL) {
   82e82:	b100      	cbz	r0, 82e86 <matchCommand+0x52>
        return len;
    } else {
        return separator - pattern;
   82e84:	1b47      	subs	r7, r0, r5
        cmd_ptr ++;
    }
    
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
        int cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_end - cmd_ptr);
   82e86:	ebc4 060a 	rsb	r6, r4, sl
 * @param cmd - input command
 * @param len - max search length
 * @return position of separator or len
 */
size_t cmdSeparatorPos(const char * cmd, size_t len) {
    char * separator = strnpbrk(cmd, len, ":?");
   82e8a:	4620      	mov	r0, r4
   82e8c:	4631      	mov	r1, r6
   82e8e:	4a1b      	ldr	r2, [pc, #108]	; (82efc <matchCommand+0xc8>)
   82e90:	47c0      	blx	r8
    size_t result;
    if (separator == NULL) {
   82e92:	b100      	cbz	r0, 82e96 <matchCommand+0x62>
        result = len;
    } else {
        result = separator - cmd;
   82e94:	1b06      	subs	r6, r0, r4
    
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
        int cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_end - cmd_ptr);
        
        if (matchPattern(pattern_ptr, pattern_sep_pos, cmd_ptr, cmd_sep_pos)) {
   82e96:	4628      	mov	r0, r5
   82e98:	4639      	mov	r1, r7
   82e9a:	4622      	mov	r2, r4
   82e9c:	4633      	mov	r3, r6
   82e9e:	f642 5c69 	movw	ip, #11625	; 0x2d69
   82ea2:	f2c0 0c08 	movt	ip, #8
   82ea6:	47e0      	blx	ip
   82ea8:	b1c0      	cbz	r0, 82edc <matchCommand+0xa8>
            pattern_ptr = pattern_ptr + pattern_sep_pos;
   82eaa:	19ed      	adds	r5, r5, r7
            cmd_ptr = cmd_ptr + cmd_sep_pos;
   82eac:	19a4      	adds	r4, r4, r6
            result = TRUE;
            
            /* command is complete */
            if ((pattern_ptr == pattern_end) && (cmd_ptr >= cmd_end)) {
   82eae:	454d      	cmp	r5, r9
   82eb0:	d105      	bne.n	82ebe <matchCommand+0x8a>
   82eb2:	45a2      	cmp	sl, r4
   82eb4:	bf8c      	ite	hi
   82eb6:	2000      	movhi	r0, #0
   82eb8:	2001      	movls	r0, #1
   82eba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                result = FALSE;
                break;
            }
            
            /* command complete, but pattern not */
            if (cmd_ptr >= cmd_end) {
   82ebe:	45a2      	cmp	sl, r4
   82ec0:	d910      	bls.n	82ee4 <matchCommand+0xb0>
                result = FALSE;
                break;
            }
            
            /* both command and patter contains command separator at this position */
            if ((pattern_ptr[0] == cmd_ptr[0]) && ((pattern_ptr[0] == ':') || (pattern_ptr[0] == '?'))) {
   82ec2:	7828      	ldrb	r0, [r5, #0]
   82ec4:	7822      	ldrb	r2, [r4, #0]
   82ec6:	4282      	cmp	r2, r0
   82ec8:	d110      	bne.n	82eec <matchCommand+0xb8>
   82eca:	283a      	cmp	r0, #58	; 0x3a
   82ecc:	d001      	beq.n	82ed2 <matchCommand+0x9e>
   82ece:	283f      	cmp	r0, #63	; 0x3f
   82ed0:	d110      	bne.n	82ef4 <matchCommand+0xc0>
                pattern_ptr = pattern_ptr + 1;
   82ed2:	f105 0501 	add.w	r5, r5, #1
                cmd_ptr = cmd_ptr + 1;
   82ed6:	f104 0401 	add.w	r4, r4, #1
   82eda:	e7cc      	b.n	82e76 <matchCommand+0x42>
            } else {
                result = FALSE;
                break;
            }
        } else {
            result = FALSE;
   82edc:	f04f 0000 	mov.w	r0, #0
   82ee0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                break;
            }
            
            /* command complete, but pattern not */
            if (cmd_ptr >= cmd_end) {
                result = FALSE;
   82ee4:	f04f 0000 	mov.w	r0, #0
   82ee8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            /* both command and patter contains command separator at this position */
            if ((pattern_ptr[0] == cmd_ptr[0]) && ((pattern_ptr[0] == ':') || (pattern_ptr[0] == '?'))) {
                pattern_ptr = pattern_ptr + 1;
                cmd_ptr = cmd_ptr + 1;
            } else {
                result = FALSE;
   82eec:	f04f 0000 	mov.w	r0, #0
   82ef0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ef4:	f04f 0000 	mov.w	r0, #0
            break;
        }
    }
    
    return result;
}
   82ef8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82efc:	0008beb4 	.word	0x0008beb4

00082f00 <SCPI_GetModuleType>:
 #include <string.h>
 #include <math.h>
 #include "asf.h"
 
 scpi_result_t SCPI_GetModuleType(scpi_t * context)
 {
   82f00:	b538      	push	{r3, r4, r5, lr}
	 printf("Easy-phi template module\x0D");
   82f02:	f641 25e0 	movw	r5, #6880	; 0x1ae0
   82f06:	f2c2 0507 	movt	r5, #8199	; 0x2007
   82f0a:	f64b 64b8 	movw	r4, #48824	; 0xbeb8
   82f0e:	f2c0 0408 	movt	r4, #8
   82f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   82f14:	6028      	str	r0, [r5, #0]
   82f16:	6069      	str	r1, [r5, #4]
   82f18:	60aa      	str	r2, [r5, #8]
   82f1a:	60eb      	str	r3, [r5, #12]
   82f1c:	cc03      	ldmia	r4!, {r0, r1}
   82f1e:	6128      	str	r0, [r5, #16]
   82f20:	6169      	str	r1, [r5, #20]
   82f22:	8823      	ldrh	r3, [r4, #0]
   82f24:	832b      	strh	r3, [r5, #24]
   82f26:	4628      	mov	r0, r5
   82f28:	f643 414d 	movw	r1, #15437	; 0x3c4d
   82f2c:	f2c0 0108 	movt	r1, #8
   82f30:	4788      	blx	r1
	 return SCPI_RES_OK;
 }
   82f32:	f04f 0001 	mov.w	r0, #1
   82f36:	bd38      	pop	{r3, r4, r5, pc}

00082f38 <SCPI_GetModuleName>:

scpi_result_t SCPI_GetModuleName(scpi_t * context)
{
   82f38:	b538      	push	{r3, r4, r5, lr}
	printf("Easy-phi template module\x0D");
   82f3a:	f641 25e0 	movw	r5, #6880	; 0x1ae0
   82f3e:	f2c2 0507 	movt	r5, #8199	; 0x2007
   82f42:	f64b 64b8 	movw	r4, #48824	; 0xbeb8
   82f46:	f2c0 0408 	movt	r4, #8
   82f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   82f4c:	6028      	str	r0, [r5, #0]
   82f4e:	6069      	str	r1, [r5, #4]
   82f50:	60aa      	str	r2, [r5, #8]
   82f52:	60eb      	str	r3, [r5, #12]
   82f54:	cc03      	ldmia	r4!, {r0, r1}
   82f56:	6128      	str	r0, [r5, #16]
   82f58:	6169      	str	r1, [r5, #20]
   82f5a:	8823      	ldrh	r3, [r4, #0]
   82f5c:	832b      	strh	r3, [r5, #24]
   82f5e:	4628      	mov	r0, r5
   82f60:	f643 414d 	movw	r1, #15437	; 0x3c4d
   82f64:	f2c0 0108 	movt	r1, #8
   82f68:	4788      	blx	r1
	return SCPI_RES_OK;
}
   82f6a:	f04f 0001 	mov.w	r0, #1
   82f6e:	bd38      	pop	{r3, r4, r5, pc}

00082f70 <SCPI_GetModuleDescription>:

scpi_result_t SCPI_GetModuleDescription(scpi_t * context)
{
   82f70:	b538      	push	{r3, r4, r5, lr}
	printf("Easy-phi template module\x0D");
   82f72:	f641 25e0 	movw	r5, #6880	; 0x1ae0
   82f76:	f2c2 0507 	movt	r5, #8199	; 0x2007
   82f7a:	f64b 64b8 	movw	r4, #48824	; 0xbeb8
   82f7e:	f2c0 0408 	movt	r4, #8
   82f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   82f84:	6028      	str	r0, [r5, #0]
   82f86:	6069      	str	r1, [r5, #4]
   82f88:	60aa      	str	r2, [r5, #8]
   82f8a:	60eb      	str	r3, [r5, #12]
   82f8c:	cc03      	ldmia	r4!, {r0, r1}
   82f8e:	6128      	str	r0, [r5, #16]
   82f90:	6169      	str	r1, [r5, #20]
   82f92:	8823      	ldrh	r3, [r4, #0]
   82f94:	832b      	strh	r3, [r5, #24]
   82f96:	4628      	mov	r0, r5
   82f98:	f643 414d 	movw	r1, #15437	; 0x3c4d
   82f9c:	f2c0 0108 	movt	r1, #8
   82fa0:	4788      	blx	r1
	return SCPI_RES_OK;
}
   82fa2:	f04f 0001 	mov.w	r0, #1
   82fa6:	bd38      	pop	{r3, r4, r5, pc}

00082fa8 <SCPI_GetModuleSN>:

scpi_result_t SCPI_GetModuleSN(scpi_t * context)
{
   82fa8:	b508      	push	{r3, lr}
	printf("0x0000\x0D");
   82faa:	f641 22e0 	movw	r2, #6880	; 0x1ae0
   82fae:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82fb2:	f64b 63d4 	movw	r3, #48852	; 0xbed4
   82fb6:	f2c0 0308 	movt	r3, #8
   82fba:	cb03      	ldmia	r3!, {r0, r1}
   82fbc:	6010      	str	r0, [r2, #0]
   82fbe:	6051      	str	r1, [r2, #4]
   82fc0:	4610      	mov	r0, r2
   82fc2:	f643 414d 	movw	r1, #15437	; 0x3c4d
   82fc6:	f2c0 0108 	movt	r1, #8
   82fca:	4788      	blx	r1
	return SCPI_RES_OK;
}
   82fcc:	f04f 0001 	mov.w	r0, #1
   82fd0:	bd08      	pop	{r3, pc}
   82fd2:	bf00      	nop

00082fd4 <SCPI_GetDissipatedPower>:

scpi_result_t SCPI_GetDissipatedPower(scpi_t * context)
{
   82fd4:	b508      	push	{r3, lr}
	printf("840mW\x0D");
   82fd6:	f641 23e0 	movw	r3, #6880	; 0x1ae0
   82fda:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82fde:	f64b 62dc 	movw	r2, #48860	; 0xbedc
   82fe2:	f2c0 0208 	movt	r2, #8
   82fe6:	6810      	ldr	r0, [r2, #0]
   82fe8:	6018      	str	r0, [r3, #0]
   82fea:	8891      	ldrh	r1, [r2, #4]
   82fec:	7992      	ldrb	r2, [r2, #6]
   82fee:	8099      	strh	r1, [r3, #4]
   82ff0:	719a      	strb	r2, [r3, #6]
   82ff2:	4618      	mov	r0, r3
   82ff4:	f643 434d 	movw	r3, #15437	; 0x3c4d
   82ff8:	f2c0 0308 	movt	r3, #8
   82ffc:	4798      	blx	r3
	return SCPI_RES_OK;
}
   82ffe:	f04f 0001 	mov.w	r0, #1
   83002:	bd08      	pop	{r3, pc}

00083004 <SCPI_GetMaxCurrent>:

scpi_result_t SCPI_GetMaxCurrent(scpi_t * context)
{
   83004:	b508      	push	{r3, lr}
	printf("0mA\x0D");
   83006:	f641 23e0 	movw	r3, #6880	; 0x1ae0
   8300a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8300e:	f64b 62e4 	movw	r2, #48868	; 0xbee4
   83012:	f2c0 0208 	movt	r2, #8
   83016:	6810      	ldr	r0, [r2, #0]
   83018:	6018      	str	r0, [r3, #0]
   8301a:	7911      	ldrb	r1, [r2, #4]
   8301c:	7119      	strb	r1, [r3, #4]
   8301e:	4618      	mov	r0, r3
   83020:	f643 434d 	movw	r3, #15437	; 0x3c4d
   83024:	f2c0 0308 	movt	r3, #8
   83028:	4798      	blx	r3
	return SCPI_RES_OK;
}
   8302a:	f04f 0001 	mov.w	r0, #1
   8302e:	bd08      	pop	{r3, pc}

00083030 <SCPI_GetNomCurrent>:

scpi_result_t SCPI_GetNomCurrent(scpi_t * context)
{
   83030:	b508      	push	{r3, lr}
	printf("0mA\x0D");
   83032:	f641 23e0 	movw	r3, #6880	; 0x1ae0
   83036:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8303a:	f64b 62e4 	movw	r2, #48868	; 0xbee4
   8303e:	f2c0 0208 	movt	r2, #8
   83042:	6810      	ldr	r0, [r2, #0]
   83044:	6018      	str	r0, [r3, #0]
   83046:	7911      	ldrb	r1, [r2, #4]
   83048:	7119      	strb	r1, [r3, #4]
   8304a:	4618      	mov	r0, r3
   8304c:	f643 434d 	movw	r3, #15437	; 0x3c4d
   83050:	f2c0 0308 	movt	r3, #8
   83054:	4798      	blx	r3
	return SCPI_RES_OK;
}
   83056:	f04f 0001 	mov.w	r0, #1
   8305a:	bd08      	pop	{r3, pc}

0008305c <SCPI_GetSDCardStatus>:

scpi_result_t SCPI_GetSDCardStatus(scpi_t * context)
{
   8305c:	b508      	push	{r3, lr}
	printf("OK\x0D");
   8305e:	f641 23e0 	movw	r3, #6880	; 0x1ae0
   83062:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83066:	f64b 62ec 	movw	r2, #48876	; 0xbeec
   8306a:	f2c0 0208 	movt	r2, #8
   8306e:	6810      	ldr	r0, [r2, #0]
   83070:	6018      	str	r0, [r3, #0]
   83072:	4618      	mov	r0, r3
   83074:	f643 414d 	movw	r1, #15437	; 0x3c4d
   83078:	f2c0 0108 	movt	r1, #8
   8307c:	4788      	blx	r1
	return SCPI_RES_OK;
}
   8307e:	f04f 0001 	mov.w	r0, #1
   83082:	bd08      	pop	{r3, pc}

00083084 <SCPI_LedStatus>:

scpi_result_t SCPI_LedStatus(scpi_t * context)
{
   83084:	b508      	push	{r3, lr}
	printf("OK\x0D");
   83086:	f641 23e0 	movw	r3, #6880	; 0x1ae0
   8308a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8308e:	f64b 62ec 	movw	r2, #48876	; 0xbeec
   83092:	f2c0 0208 	movt	r2, #8
   83096:	6810      	ldr	r0, [r2, #0]
   83098:	6018      	str	r0, [r3, #0]
   8309a:	4618      	mov	r0, r3
   8309c:	f643 414d 	movw	r1, #15437	; 0x3c4d
   830a0:	f2c0 0108 	movt	r1, #8
   830a4:	4788      	blx	r1
	return SCPI_RES_OK;
}
   830a6:	f04f 0001 	mov.w	r0, #1
   830aa:	bd08      	pop	{r3, pc}

000830ac <SCPI_ButtonStatus>:

scpi_result_t SCPI_ButtonStatus(scpi_t * context)
{
   830ac:	b508      	push	{r3, lr}
	if(get_user_button_status() == RETURN_OK)
   830ae:	f641 3395 	movw	r3, #7061	; 0x1b95
   830b2:	f2c0 0308 	movt	r3, #8
   830b6:	4798      	blx	r3
   830b8:	2801      	cmp	r0, #1
   830ba:	d111      	bne.n	830e0 <SCPI_ButtonStatus+0x34>
	{
		printf("pushed\x0D");
   830bc:	f641 22e0 	movw	r2, #6880	; 0x1ae0
   830c0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   830c4:	f64b 63f0 	movw	r3, #48880	; 0xbef0
   830c8:	f2c0 0308 	movt	r3, #8
   830cc:	cb03      	ldmia	r3!, {r0, r1}
   830ce:	6010      	str	r0, [r2, #0]
   830d0:	6051      	str	r1, [r2, #4]
   830d2:	4610      	mov	r0, r2
   830d4:	f643 414d 	movw	r1, #15437	; 0x3c4d
   830d8:	f2c0 0108 	movt	r1, #8
   830dc:	4788      	blx	r1
   830de:	e012      	b.n	83106 <SCPI_ButtonStatus+0x5a>
	} 
	else
	{
		printf("released\x0D");
   830e0:	f641 22e0 	movw	r2, #6880	; 0x1ae0
   830e4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   830e8:	f64b 63f8 	movw	r3, #48888	; 0xbef8
   830ec:	f2c0 0308 	movt	r3, #8
   830f0:	cb03      	ldmia	r3!, {r0, r1}
   830f2:	6010      	str	r0, [r2, #0]
   830f4:	6051      	str	r1, [r2, #4]
   830f6:	8818      	ldrh	r0, [r3, #0]
   830f8:	8110      	strh	r0, [r2, #8]
   830fa:	4610      	mov	r0, r2
   830fc:	f643 414d 	movw	r1, #15437	; 0x3c4d
   83100:	f2c0 0108 	movt	r1, #8
   83104:	4788      	blx	r1
	}
	return SCPI_RES_OK;
}
   83106:	f04f 0001 	mov.w	r0, #1
   8310a:	bd08      	pop	{r3, pc}

0008310c <SCPI_EEPROM_Read>:

scpi_result_t SCPI_EEPROM_Read(scpi_t * context)
{
	// TBD...
	return SCPI_RES_OK;
}
   8310c:	f04f 0001 	mov.w	r0, #1
   83110:	4770      	bx	lr
   83112:	bf00      	nop

00083114 <SCPI_EEPROM_Write>:

scpi_result_t SCPI_EEPROM_Write(scpi_t * context)
{
	// TBD...
	return SCPI_RES_OK;
}
   83114:	f04f 0001 	mov.w	r0, #1
   83118:	4770      	bx	lr
   8311a:	bf00      	nop

0008311c <SCPI_SetPower>:

scpi_result_t SCPI_SetPower(scpi_t * context)
{
   8311c:	b530      	push	{r4, r5, lr}
   8311e:	b083      	sub	sp, #12
	const char * param;
	size_t param_len;

	if(!SCPI_ParamString(context, &param, &param_len, true)) 
   83120:	a901      	add	r1, sp, #4
   83122:	466a      	mov	r2, sp
   83124:	f04f 0301 	mov.w	r3, #1
   83128:	f642 0489 	movw	r4, #10377	; 0x2889
   8312c:	f2c0 0408 	movt	r4, #8
   83130:	47a0      	blx	r4
   83132:	2800      	cmp	r0, #0
   83134:	d039      	beq.n	831aa <SCPI_SetPower+0x8e>
		return SCPI_RES_ERR;
		
	if(param_len >= 2)
   83136:	9c00      	ldr	r4, [sp, #0]
   83138:	2c01      	cmp	r4, #1
   8313a:	d939      	bls.n	831b0 <SCPI_SetPower+0x94>
	{
		if(strncmp(param, "ON", 2) == 0)
   8313c:	9d01      	ldr	r5, [sp, #4]
   8313e:	4628      	mov	r0, r5
   83140:	f64b 7104 	movw	r1, #48900	; 0xbf04
   83144:	f2c0 0108 	movt	r1, #8
   83148:	f04f 0202 	mov.w	r2, #2
   8314c:	f249 438d 	movw	r3, #38029	; 0x948d
   83150:	f2c0 0308 	movt	r3, #8
   83154:	4798      	blx	r3
   83156:	b960      	cbnz	r0, 83172 <SCPI_SetPower+0x56>
		{
			enable_12v();
   83158:	f641 33b9 	movw	r3, #7097	; 0x1bb9
   8315c:	f2c0 0308 	movt	r3, #8
   83160:	4798      	blx	r3
			init_module_peripherals_ap();
   83162:	f641 10e1 	movw	r0, #6625	; 0x19e1
   83166:	f2c0 0008 	movt	r0, #8
   8316a:	4780      	blx	r0
			return SCPI_RES_OK;
   8316c:	f04f 0001 	mov.w	r0, #1
   83170:	e026      	b.n	831c0 <SCPI_SetPower+0xa4>
		}
		else if((param_len > 2) && (strncmp(param, "OFF", 3) == 0))
   83172:	2c02      	cmp	r4, #2
   83174:	d91f      	bls.n	831b6 <SCPI_SetPower+0x9a>
   83176:	4628      	mov	r0, r5
   83178:	f64b 7108 	movw	r1, #48904	; 0xbf08
   8317c:	f2c0 0108 	movt	r1, #8
   83180:	f04f 0203 	mov.w	r2, #3
   83184:	f249 438d 	movw	r3, #38029	; 0x948d
   83188:	f2c0 0308 	movt	r3, #8
   8318c:	4798      	blx	r3
   8318e:	b9a8      	cbnz	r0, 831bc <SCPI_SetPower+0xa0>
		{
			deinit_module_peripherals();
   83190:	f641 11e5 	movw	r1, #6629	; 0x19e5
   83194:	f2c0 0108 	movt	r1, #8
   83198:	4788      	blx	r1
			disable_12v();
   8319a:	f641 32c9 	movw	r2, #7113	; 0x1bc9
   8319e:	f2c0 0208 	movt	r2, #8
   831a2:	4790      	blx	r2
			return SCPI_RES_OK;
   831a4:	f04f 0001 	mov.w	r0, #1
   831a8:	e00a      	b.n	831c0 <SCPI_SetPower+0xa4>
{
	const char * param;
	size_t param_len;

	if(!SCPI_ParamString(context, &param, &param_len, true)) 
		return SCPI_RES_ERR;
   831aa:	f04f 00ff 	mov.w	r0, #255	; 0xff
   831ae:	e007      	b.n	831c0 <SCPI_SetPower+0xa4>
			return SCPI_RES_ERR;
		}
	}
	else
	{
		return SCPI_RES_OK;
   831b0:	f04f 0001 	mov.w	r0, #1
   831b4:	e004      	b.n	831c0 <SCPI_SetPower+0xa4>
			disable_12v();
			return SCPI_RES_OK;
		}
		else
		{
			return SCPI_RES_ERR;
   831b6:	f04f 00ff 	mov.w	r0, #255	; 0xff
   831ba:	e001      	b.n	831c0 <SCPI_SetPower+0xa4>
   831bc:	f04f 00ff 	mov.w	r0, #255	; 0xff
	{
		return SCPI_RES_OK;
	}
	
	return SCPI_RES_OK;
}
   831c0:	b240      	sxtb	r0, r0
   831c2:	b003      	add	sp, #12
   831c4:	bd30      	pop	{r4, r5, pc}
   831c6:	bf00      	nop

000831c8 <SCPI_SetUserLed>:

scpi_result_t SCPI_SetUserLed(scpi_t * context)
{
   831c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   831cc:	b084      	sub	sp, #16
   831ce:	4604      	mov	r4, r0
	uint32_t param1, param2, param3;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
   831d0:	a903      	add	r1, sp, #12
   831d2:	f04f 0201 	mov.w	r2, #1
   831d6:	f642 03f9 	movw	r3, #10489	; 0x28f9
   831da:	f2c0 0308 	movt	r3, #8
   831de:	4798      	blx	r3
   831e0:	2800      	cmp	r0, #0
   831e2:	d046      	beq.n	83272 <SCPI_SetUserLed+0xaa>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}

	// read second paraeter if present
	if (!SCPI_ParamInt(context, &param2, true)) {
   831e4:	4620      	mov	r0, r4
   831e6:	a902      	add	r1, sp, #8
   831e8:	f04f 0201 	mov.w	r2, #1
   831ec:	f642 03f9 	movw	r3, #10489	; 0x28f9
   831f0:	f2c0 0308 	movt	r3, #8
   831f4:	4798      	blx	r3
   831f6:	2800      	cmp	r0, #0
   831f8:	d03e      	beq.n	83278 <SCPI_SetUserLed+0xb0>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}

	// read second paraeter if present
	if (!SCPI_ParamInt(context, &param3, true)) {
   831fa:	4620      	mov	r0, r4
   831fc:	a901      	add	r1, sp, #4
   831fe:	f04f 0201 	mov.w	r2, #1
   83202:	f642 03f9 	movw	r3, #10489	; 0x28f9
   83206:	f2c0 0308 	movt	r3, #8
   8320a:	4798      	blx	r3
   8320c:	2800      	cmp	r0, #0
   8320e:	d036      	beq.n	8327e <SCPI_SetUserLed+0xb6>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}

	set_user_led_colour((uint16_t)round(param1), (uint16_t)round(param2), (uint16_t)round(param3));
   83210:	f249 09ed 	movw	r9, #37101	; 0x90ed
   83214:	f2c0 0908 	movt	r9, #8
   83218:	9803      	ldr	r0, [sp, #12]
   8321a:	47c8      	blx	r9
   8321c:	f648 58d5 	movw	r8, #36309	; 0x8dd5
   83220:	f2c0 0808 	movt	r8, #8
   83224:	47c0      	blx	r8
   83226:	4606      	mov	r6, r0
   83228:	460f      	mov	r7, r1
   8322a:	9802      	ldr	r0, [sp, #8]
   8322c:	47c8      	blx	r9
   8322e:	47c0      	blx	r8
   83230:	4604      	mov	r4, r0
   83232:	460d      	mov	r5, r1
   83234:	9801      	ldr	r0, [sp, #4]
   83236:	47c8      	blx	r9
   83238:	47c0      	blx	r8
   8323a:	4680      	mov	r8, r0
   8323c:	4689      	mov	r9, r1
   8323e:	f249 1ad9 	movw	sl, #37337	; 0x91d9
   83242:	f2c0 0a08 	movt	sl, #8
   83246:	4630      	mov	r0, r6
   83248:	4639      	mov	r1, r7
   8324a:	47d0      	blx	sl
   8324c:	b286      	uxth	r6, r0
   8324e:	4620      	mov	r0, r4
   83250:	4629      	mov	r1, r5
   83252:	47d0      	blx	sl
   83254:	b284      	uxth	r4, r0
   83256:	4640      	mov	r0, r8
   83258:	4649      	mov	r1, r9
   8325a:	47d0      	blx	sl
   8325c:	b282      	uxth	r2, r0
   8325e:	4630      	mov	r0, r6
   83260:	4621      	mov	r1, r4
   83262:	f641 3351 	movw	r3, #6993	; 0x1b51
   83266:	f2c0 0308 	movt	r3, #8
   8326a:	4798      	blx	r3
	return SCPI_RES_OK;
   8326c:	f04f 0001 	mov.w	r0, #1
   83270:	e007      	b.n	83282 <SCPI_SetUserLed+0xba>
	uint32_t param1, param2, param3;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83272:	f04f 00ff 	mov.w	r0, #255	; 0xff
   83276:	e004      	b.n	83282 <SCPI_SetUserLed+0xba>
	}

	// read second paraeter if present
	if (!SCPI_ParamInt(context, &param2, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83278:	f04f 00ff 	mov.w	r0, #255	; 0xff
   8327c:	e001      	b.n	83282 <SCPI_SetUserLed+0xba>
	}

	// read second paraeter if present
	if (!SCPI_ParamInt(context, &param3, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   8327e:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}

	set_user_led_colour((uint16_t)round(param1), (uint16_t)round(param2), (uint16_t)round(param3));
	return SCPI_RES_OK;
   83282:	b240      	sxtb	r0, r0
   83284:	b004      	add	sp, #16
   83286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8328a:	bf00      	nop

0008328c <SCPI_SetLightsOnOff>:
#include "peripherals_template.h"
#include "peripherals_module.h"


scpi_result_t SCPI_SetLightsOnOff(scpi_t * context)
{
   8328c:	b500      	push	{lr}
   8328e:	b083      	sub	sp, #12
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   83290:	a901      	add	r1, sp, #4
   83292:	f04f 0201 	mov.w	r2, #1
   83296:	f642 03f9 	movw	r3, #10489	; 0x28f9
   8329a:	f2c0 0308 	movt	r3, #8
   8329e:	4798      	blx	r3
   832a0:	b1a8      	cbz	r0, 832ce <SCPI_SetLightsOnOff+0x42>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if(param == 0)
   832a2:	9801      	ldr	r0, [sp, #4]
   832a4:	b948      	cbnz	r0, 832ba <SCPI_SetLightsOnOff+0x2e>
	switch_on_off_lights(FALSE);
   832a6:	f04f 0000 	mov.w	r0, #0
   832aa:	f641 12d1 	movw	r2, #6609	; 0x19d1
   832ae:	f2c0 0208 	movt	r2, #8
   832b2:	4790      	blx	r2
	else
	switch_on_off_lights(TRUE);
	
	return SCPI_RES_OK;
   832b4:	f04f 0301 	mov.w	r3, #1
   832b8:	e00b      	b.n	832d2 <SCPI_SetLightsOnOff+0x46>
	}
	
	if(param == 0)
	switch_on_off_lights(FALSE);
	else
	switch_on_off_lights(TRUE);
   832ba:	f04f 0001 	mov.w	r0, #1
   832be:	f641 11d1 	movw	r1, #6609	; 0x19d1
   832c2:	f2c0 0108 	movt	r1, #8
   832c6:	4788      	blx	r1
	
	return SCPI_RES_OK;
   832c8:	f04f 0301 	mov.w	r3, #1
   832cc:	e001      	b.n	832d2 <SCPI_SetLightsOnOff+0x46>
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   832ce:	f04f 03ff 	mov.w	r3, #255	; 0xff
	switch_on_off_lights(FALSE);
	else
	switch_on_off_lights(TRUE);
	
	return SCPI_RES_OK;
   832d2:	b258      	sxtb	r0, r3
   832d4:	b003      	add	sp, #12
   832d6:	bd00      	pop	{pc}

000832d8 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   832d8:	b510      	push	{r4, lr}
   832da:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
   832dc:	f240 4395 	movw	r3, #1173	; 0x495
   832e0:	f2c0 0308 	movt	r3, #8
   832e4:	4798      	blx	r3
   832e6:	2801      	cmp	r0, #1
   832e8:	d003      	beq.n	832f2 <sd_mmc_test_unit_ready+0x1a>
   832ea:	b128      	cbz	r0, 832f8 <sd_mmc_test_unit_ready+0x20>
   832ec:	2802      	cmp	r0, #2
   832ee:	d120      	bne.n	83332 <sd_mmc_test_unit_ready+0x5a>
   832f0:	e015      	b.n	8331e <sd_mmc_test_unit_ready+0x46>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   832f2:	f04f 0003 	mov.w	r0, #3
   832f6:	bd10      	pop	{r4, pc}
Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   832f8:	f640 4144 	movw	r1, #3140	; 0xc44
   832fc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83300:	5d0b      	ldrb	r3, [r1, r4]
   83302:	b9cb      	cbnz	r3, 83338 <sd_mmc_test_unit_ready+0x60>
			return CTRL_NO_PRESENT;
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   83304:	4620      	mov	r0, r4
   83306:	f241 022d 	movw	r2, #4141	; 0x102d
   8330a:	f2c0 0208 	movt	r2, #8
   8330e:	4790      	blx	r2
   83310:	f000 0003 	and.w	r0, r0, #3
			return CTRL_GOOD;
   83314:	2800      	cmp	r0, #0
   83316:	bf0c      	ite	eq
   83318:	2002      	moveq	r0, #2
   8331a:	2000      	movne	r0, #0
   8331c:	bd10      	pop	{r4, pc}

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   8331e:	f640 4044 	movw	r0, #3140	; 0xc44
   83322:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83326:	f04f 0200 	mov.w	r2, #0
   8332a:	5502      	strb	r2, [r0, r4]
		return CTRL_NO_PRESENT;
   8332c:	f04f 0002 	mov.w	r0, #2
   83330:	bd10      	pop	{r4, pc}

	default:
		return CTRL_FAIL;
   83332:	f04f 0001 	mov.w	r0, #1
   83336:	bd10      	pop	{r4, pc}
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
			return CTRL_NO_PRESENT;
   83338:	f04f 0002 	mov.w	r0, #2
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
	}
}
   8333c:	bd10      	pop	{r4, pc}
   8333e:	bf00      	nop

00083340 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   83340:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
   83342:	f04f 0000 	mov.w	r0, #0
   83346:	f243 23d9 	movw	r3, #13017	; 0x32d9
   8334a:	f2c0 0308 	movt	r3, #8
   8334e:	4798      	blx	r3
}
   83350:	bd08      	pop	{r3, pc}
   83352:	bf00      	nop

00083354 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   83354:	b538      	push	{r3, r4, r5, lr}
   83356:	4604      	mov	r4, r0
   83358:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   8335a:	f241 0359 	movw	r3, #4185	; 0x1059
   8335e:	f2c0 0308 	movt	r3, #8
   83362:	4798      	blx	r3
   83364:	ea4f 0040 	mov.w	r0, r0, lsl #1
   83368:	f100 31ff 	add.w	r1, r0, #4294967295
   8336c:	6029      	str	r1, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
   8336e:	4620      	mov	r0, r4
   83370:	f243 22d9 	movw	r2, #13017	; 0x32d9
   83374:	f2c0 0208 	movt	r2, #8
   83378:	4790      	blx	r2
}
   8337a:	bd38      	pop	{r3, r4, r5, pc}

0008337c <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   8337c:	b508      	push	{r3, lr}
   8337e:	4601      	mov	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
   83380:	f04f 0000 	mov.w	r0, #0
   83384:	f243 3355 	movw	r3, #13141	; 0x3355
   83388:	f2c0 0308 	movt	r3, #8
   8338c:	4798      	blx	r3
}
   8338e:	bd08      	pop	{r3, pc}

00083390 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   83390:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
   83392:	f241 0385 	movw	r3, #4229	; 0x1085
   83396:	f2c0 0308 	movt	r3, #8
   8339a:	4798      	blx	r3
}
   8339c:	bd08      	pop	{r3, pc}
   8339e:	bf00      	nop

000833a0 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   833a0:	b508      	push	{r3, lr}
	return sd_mmc_wr_protect(0);
   833a2:	f04f 0000 	mov.w	r0, #0
   833a6:	f243 3391 	movw	r3, #13201	; 0x3391
   833aa:	f2c0 0308 	movt	r3, #8
   833ae:	4798      	blx	r3
}
   833b0:	bd08      	pop	{r3, pc}
   833b2:	bf00      	nop

000833b4 <sd_mmc_removal>:

bool sd_mmc_removal(uint8_t slot)
{
	UNUSED(slot);
	return true;
}
   833b4:	f04f 0001 	mov.w	r0, #1
   833b8:	4770      	bx	lr
   833ba:	bf00      	nop

000833bc <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   833bc:	b508      	push	{r3, lr}
	return sd_mmc_removal(0);
   833be:	f04f 0000 	mov.w	r0, #0
   833c2:	f243 33b5 	movw	r3, #13237	; 0x33b5
   833c6:	f2c0 0308 	movt	r3, #8
   833ca:	4798      	blx	r3
}
   833cc:	bd08      	pop	{r3, pc}
   833ce:	bf00      	nop

000833d0 <sd_mmc_usb_read_10>:

COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
   833d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   833d4:	4614      	mov	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
   833d6:	f241 038d 	movw	r3, #4237	; 0x108d
   833da:	f2c0 0308 	movt	r3, #8
   833de:	4798      	blx	r3
   833e0:	4601      	mov	r1, r0
   833e2:	b370      	cbz	r0, 83442 <sd_mmc_usb_read_10+0x72>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   833e4:	2802      	cmp	r0, #2
   833e6:	bf0c      	ite	eq
   833e8:	2002      	moveq	r0, #2
   833ea:	2001      	movne	r0, #1
   833ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (nb_step) { // Skip last step
   833f0:	b144      	cbz	r4, 83404 <sd_mmc_usb_read_10+0x34>
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   833f2:	f014 0f01 	tst.w	r4, #1
   833f6:	bf0c      	ite	eq
   833f8:	4638      	moveq	r0, r7
   833fa:	4640      	movne	r0, r8
   833fc:	f04f 0101 	mov.w	r1, #1
   83400:	47b0      	blx	r6
   83402:	bba0      	cbnz	r0, 8346e <sd_mmc_usb_read_10+0x9e>
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
			}
		}
		if (!b_first_step) { // Skip first step
   83404:	b985      	cbnz	r5, 83428 <sd_mmc_usb_read_10+0x58>
			// RAM -> USB
			if (!udi_msc_trans_block(true,
   83406:	f014 0f01 	tst.w	r4, #1
   8340a:	bf0c      	ite	eq
   8340c:	4641      	moveq	r1, r8
   8340e:	4639      	movne	r1, r7
   83410:	f04f 0001 	mov.w	r0, #1
   83414:	f44f 7200 	mov.w	r2, #512	; 0x200
   83418:	f04f 0300 	mov.w	r3, #0
   8341c:	f645 0539 	movw	r5, #22585	; 0x5839
   83420:	f2c0 0508 	movt	r5, #8
   83424:	47a8      	blx	r5
   83426:	b330      	cbz	r0, 83476 <sd_mmc_usb_read_10+0xa6>
				return CTRL_FAIL;
			}
		} else {
			b_first_step = false;
		}
		if (nb_step) { // Skip last step
   83428:	b12c      	cbz	r4, 83436 <sd_mmc_usb_read_10+0x66>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks()) {
   8342a:	f241 2015 	movw	r0, #4629	; 0x1215
   8342e:	f2c0 0008 	movt	r0, #8
   83432:	4780      	blx	r0
   83434:	bb18      	cbnz	r0, 8347e <sd_mmc_usb_read_10+0xae>
   83436:	f104 34ff 	add.w	r4, r4, #4294967295
   8343a:	b2a4      	uxth	r4, r4
   8343c:	f04f 0500 	mov.w	r5, #0
   83440:	e00d      	b.n	8345e <sd_mmc_usb_read_10+0x8e>
COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
	bool b_first_step = true;
   83442:	f04f 0501 	mov.w	r5, #1
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (nb_step) { // Skip last step
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   83446:	f241 16dd 	movw	r6, #4573	; 0x11dd
   8344a:	f2c0 0608 	movt	r6, #8
   8344e:	f241 68e0 	movw	r8, #5856	; 0x16e0
   83452:	f2c2 0807 	movt	r8, #8199	; 0x2007
   83456:	f641 07e0 	movw	r7, #6368	; 0x18e0
   8345a:	f2c2 0707 	movt	r7, #8199	; 0x2007
	default:
		return CTRL_FAIL;
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
   8345e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   83462:	4294      	cmp	r4, r2
   83464:	d1c4      	bne.n	833f0 <sd_mmc_usb_read_10+0x20>
				return CTRL_FAIL;
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
   83466:	f04f 0000 	mov.w	r0, #0
   8346a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (nb_step--) {
		if (nb_step) { // Skip last step
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
   8346e:	f04f 0001 	mov.w	r0, #1
   83472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!udi_msc_trans_block(true,
					((nb_step % 2) == 0) ?
					sector_buf_1 : sector_buf_0,
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
   83476:	f04f 0001 	mov.w	r0, #1
   8347a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else {
			b_first_step = false;
		}
		if (nb_step) { // Skip last step
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks()) {
				return CTRL_FAIL;
   8347e:	f04f 0001 	mov.w	r0, #1
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
}
   83482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83486:	bf00      	nop

00083488 <sd_mmc_usb_read_10_0>:

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
   83488:	b508      	push	{r3, lr}
   8348a:	4603      	mov	r3, r0
   8348c:	460a      	mov	r2, r1
	return sd_mmc_usb_read_10(0, addr, nb_sector);
   8348e:	f04f 0000 	mov.w	r0, #0
   83492:	4619      	mov	r1, r3
   83494:	f243 33d1 	movw	r3, #13265	; 0x33d1
   83498:	f2c0 0308 	movt	r3, #8
   8349c:	4798      	blx	r3
}
   8349e:	bd08      	pop	{r3, pc}

000834a0 <sd_mmc_usb_write_10>:
{
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
   834a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   834a4:	4614      	mov	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
   834a6:	f241 2395 	movw	r3, #4757	; 0x1295
   834aa:	f2c0 0308 	movt	r3, #8
   834ae:	4798      	blx	r3
   834b0:	4601      	mov	r1, r0
   834b2:	b368      	cbz	r0, 83510 <sd_mmc_usb_write_10+0x70>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   834b4:	2802      	cmp	r0, #2
   834b6:	bf0c      	ite	eq
   834b8:	2002      	moveq	r0, #2
   834ba:	2001      	movne	r0, #1
   834bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
   834c0:	b945      	cbnz	r5, 834d4 <sd_mmc_usb_write_10+0x34>
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   834c2:	f014 0f01 	tst.w	r4, #1
   834c6:	bf0c      	ite	eq
   834c8:	4638      	moveq	r0, r7
   834ca:	4640      	movne	r0, r8
   834cc:	f04f 0101 	mov.w	r1, #1
   834d0:	47b0      	blx	r6
   834d2:	bb98      	cbnz	r0, 8353c <sd_mmc_usb_write_10+0x9c>
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
			}
		}
		if (nb_step) { // Skip last step
   834d4:	b17c      	cbz	r4, 834f6 <sd_mmc_usb_write_10+0x56>
			// USB -> RAM
			if (!udi_msc_trans_block(false,
   834d6:	f014 0f01 	tst.w	r4, #1
   834da:	bf0c      	ite	eq
   834dc:	4641      	moveq	r1, r8
   834de:	4639      	movne	r1, r7
   834e0:	f04f 0000 	mov.w	r0, #0
   834e4:	f44f 7200 	mov.w	r2, #512	; 0x200
   834e8:	4603      	mov	r3, r0
   834ea:	f645 0c39 	movw	ip, #22585	; 0x5839
   834ee:	f2c0 0c08 	movt	ip, #8
   834f2:	47e0      	blx	ip
   834f4:	b330      	cbz	r0, 83544 <sd_mmc_usb_write_10+0xa4>
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
			}
		}
		if (!b_first_step) { // Skip first step
   834f6:	b92d      	cbnz	r5, 83504 <sd_mmc_usb_write_10+0x64>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks()) {
   834f8:	f241 30a1 	movw	r0, #5025	; 0x13a1
   834fc:	f2c0 0008 	movt	r0, #8
   83500:	4780      	blx	r0
   83502:	bb18      	cbnz	r0, 8354c <sd_mmc_usb_write_10+0xac>
   83504:	f104 34ff 	add.w	r4, r4, #4294967295
   83508:	b2a4      	uxth	r4, r4
   8350a:	f04f 0500 	mov.w	r5, #0
   8350e:	e00d      	b.n	8352c <sd_mmc_usb_write_10+0x8c>
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
	bool b_first_step = true;
   83510:	f04f 0501 	mov.w	r5, #1
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   83514:	f241 3669 	movw	r6, #4969	; 0x1369
   83518:	f2c0 0608 	movt	r6, #8
   8351c:	f241 68e0 	movw	r8, #5856	; 0x16e0
   83520:	f2c2 0807 	movt	r8, #8199	; 0x2007
   83524:	f641 07e0 	movw	r7, #6368	; 0x18e0
   83528:	f2c2 0707 	movt	r7, #8199	; 0x2007
	default:
		return CTRL_FAIL;
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
   8352c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   83530:	4294      	cmp	r4, r2
   83532:	d1c5      	bne.n	834c0 <sd_mmc_usb_write_10+0x20>
			}
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
   83534:	f04f 0000 	mov.w	r0, #0
   83538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
   8353c:	f04f 0001 	mov.w	r0, #1
   83540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!udi_msc_trans_block(false,
					((nb_step % 2) == 0) ?
					sector_buf_1 : sector_buf_0,
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
   83544:	f04f 0001 	mov.w	r0, #1
   83548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
		}
		if (!b_first_step) { // Skip first step
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks()) {
				return CTRL_FAIL;
   8354c:	f04f 0001 	mov.w	r0, #1
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
}
   83550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083554 <sd_mmc_usb_write_10_0>:

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
   83554:	b508      	push	{r3, lr}
   83556:	4603      	mov	r3, r0
   83558:	460a      	mov	r2, r1
	return sd_mmc_usb_write_10(0, addr, nb_sector);
   8355a:	f04f 0000 	mov.w	r0, #0
   8355e:	4619      	mov	r1, r3
   83560:	f243 43a1 	movw	r3, #13473	; 0x34a1
   83564:	f2c0 0308 	movt	r3, #8
   83568:	4798      	blx	r3
}
   8356a:	bd08      	pop	{r3, pc}

0008356c <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
   8356c:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
   8356e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   83572:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
   83574:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
   83576:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
   83578:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
   8357a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
   8357c:	f04f 0680 	mov.w	r6, #128	; 0x80
   83580:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
   83582:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
   83584:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
   83586:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
   83588:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
   8358a:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
   8358c:	f04f 0000 	mov.w	r0, #0
   83590:	6518      	str	r0, [r3, #80]	; 0x50
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
   83592:	f04f 0105 	mov.w	r1, #5
   83596:	6019      	str	r1, [r3, #0]
}
   83598:	bc70      	pop	{r4, r5, r6}
   8359a:	4770      	bx	lr

0008359c <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
   8359c:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
   8359e:	f001 033f 	and.w	r3, r1, #63	; 0x3f
   835a2:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
   835a4:	f411 7f80 	tst.w	r1, #256	; 0x100
   835a8:	d00c      	beq.n	835c4 <hsmci_send_cmd_execute+0x28>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
   835aa:	f411 6f00 	tst.w	r1, #2048	; 0x800
   835ae:	d002      	beq.n	835b6 <hsmci_send_cmd_execute+0x1a>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
   835b0:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
   835b4:	e006      	b.n	835c4 <hsmci_send_cmd_execute+0x28>
		} else if (cmd & SDMMC_RESP_BUSY) {
   835b6:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
   835ba:	bf14      	ite	ne
   835bc:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
   835c0:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
   835c4:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
   835c8:	bf18      	it	ne
   835ca:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
   835ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   835d2:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
   835d4:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
   835d6:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
   835d8:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
   835dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
   835de:	b152      	cbz	r2, 835f6 <hsmci_send_cmd_execute+0x5a>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
   835e0:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
   835e4:	d012      	beq.n	8360c <hsmci_send_cmd_execute+0x70>
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
   835e6:	f243 526d 	movw	r2, #13677	; 0x356d
   835ea:	f2c0 0208 	movt	r2, #8
   835ee:	4790      	blx	r2
				return false;
   835f0:	f04f 0000 	mov.w	r0, #0
   835f4:	bd08      	pop	{r3, pc}
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
   835f6:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
   835fa:	d007      	beq.n	8360c <hsmci_send_cmd_execute+0x70>
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
   835fc:	f243 516d 	movw	r1, #13677	; 0x356d
   83600:	f2c0 0108 	movt	r1, #8
   83604:	4788      	blx	r1
				return false;
   83606:	f04f 0000 	mov.w	r0, #0
   8360a:	bd08      	pop	{r3, pc}
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
   8360c:	f013 0f01 	tst.w	r3, #1
   83610:	d0e4      	beq.n	835dc <hsmci_send_cmd_execute+0x40>

	if (cmd & SDMMC_RESP_BUSY) {
   83612:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   83616:	d119      	bne.n	8364c <hsmci_send_cmd_execute+0xb0>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
   83618:	f04f 0001 	mov.w	r0, #1
   8361c:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 1000000;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
   8361e:	6c08      	ldr	r0, [r1, #64]	; 0x40
   83620:	f103 33ff 	add.w	r3, r3, #4294967295
		if (busy_wait-- == 0) {
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
			return false;
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
   83624:	f000 0230 	and.w	r2, r0, #48	; 0x30
   83628:	2a20      	cmp	r2, #32
   8362a:	d119      	bne.n	83660 <hsmci_send_cmd_execute+0xc4>
   8362c:	e00b      	b.n	83646 <hsmci_send_cmd_execute+0xaa>

	do {
		sr = HSMCI->HSMCI_SR;
		if (busy_wait-- == 0) {
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
   8362e:	f243 516d 	movw	r1, #13677	; 0x356d
   83632:	f2c0 0108 	movt	r1, #8
   83636:	4788      	blx	r1
			return false;
   83638:	f04f 0000 	mov.w	r0, #0
   8363c:	bd08      	pop	{r3, pc}
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
   8363e:	f000 0230 	and.w	r2, r0, #48	; 0x30
   83642:	2a20      	cmp	r2, #32
   83644:	d1eb      	bne.n	8361e <hsmci_send_cmd_execute+0x82>
	return true;
   83646:	f04f 0001 	mov.w	r0, #1
   8364a:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 1000000;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
   8364c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   83650:	6c00      	ldr	r0, [r0, #64]	; 0x40
   83652:	f244 2340 	movw	r3, #16960	; 0x4240
   83656:	f2c0 030f 	movt	r3, #15
   8365a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8365e:	e7ee      	b.n	8363e <hsmci_send_cmd_execute+0xa2>
   83660:	6c08      	ldr	r0, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
   83662:	3b01      	subs	r3, #1
   83664:	d1eb      	bne.n	8363e <hsmci_send_cmd_execute+0xa2>
   83666:	e7e2      	b.n	8362e <hsmci_send_cmd_execute+0x92>

00083668 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
   83668:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
   8366a:	f04f 0015 	mov.w	r0, #21
   8366e:	f246 74f1 	movw	r4, #26609	; 0x67f1
   83672:	f2c0 0408 	movt	r4, #8
   83676:	47a0      	blx	r4
#ifdef HSMCI_SR_DMADONE
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_DMAC);
   83678:	f04f 0027 	mov.w	r0, #39	; 0x27
   8367c:	47a0      	blx	r4
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
   8367e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   83682:	f04f 0272 	mov.w	r2, #114	; 0x72
   83686:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
   83688:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
   8368a:	f04f 0011 	mov.w	r0, #17
   8368e:	6558      	str	r0, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
   83690:	f44f 61e0 	mov.w	r1, #1792	; 0x700
   83694:	6059      	str	r1, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
   83696:	f04f 0205 	mov.w	r2, #5
   8369a:	601a      	str	r2, [r3, #0]
   8369c:	bd10      	pop	{r4, pc}
   8369e:	bf00      	nop

000836a0 <hsmci_get_bus_width>:
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
   836a0:	2800      	cmp	r0, #0
   836a2:	bf0c      	ite	eq
   836a4:	2004      	moveq	r0, #4
   836a6:	2000      	movne	r0, #0
   836a8:	4770      	bx	lr
   836aa:	bf00      	nop

000836ac <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
   836ac:	f04f 0001 	mov.w	r0, #1
   836b0:	4770      	bx	lr
   836b2:	bf00      	nop

000836b4 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
   836b4:	b133      	cbz	r3, 836c4 <hsmci_select_device+0x10>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
   836b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   836ba:	6d58      	ldr	r0, [r3, #84]	; 0x54
   836bc:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   836c0:	6558      	str	r0, [r3, #84]	; 0x54
   836c2:	e005      	b.n	836d0 <hsmci_select_device+0x1c>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
   836c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   836c8:	6d58      	ldr	r0, [r3, #84]	; 0x54
   836ca:	f420 7080 	bic.w	r0, r0, #256	; 0x100
   836ce:	6558      	str	r0, [r3, #84]	; 0x54
{
	uint32_t clkdiv;
	uint32_t rest;

	// Speed = MCK clock / (2 * (CLKDIV + 1))
	if (speed > 0) {
   836d0:	b181      	cbz	r1, 836f4 <hsmci_select_device+0x40>
		clkdiv = mck / (2 * speed);
   836d2:	ea4f 0141 	mov.w	r1, r1, lsl #1
   836d6:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
   836da:	f2c0 5301 	movt	r3, #1281	; 0x501
   836de:	fbb3 f0f1 	udiv	r0, r3, r1
		rest = mck % (2 * speed);
   836e2:	fb01 3110 	mls	r1, r1, r0, r3
		if (rest > 0) {
   836e6:	b109      	cbz	r1, 836ec <hsmci_select_device+0x38>
			// Ensure that the card speed not be higher than expected.
			clkdiv++;
   836e8:	f100 0001 	add.w	r0, r0, #1
		}
		if (clkdiv > 0) {
   836ec:	b120      	cbz	r0, 836f8 <hsmci_select_device+0x44>
			clkdiv -= 1;
   836ee:	f100 30ff 	add.w	r0, r0, #4294967295
   836f2:	e001      	b.n	836f8 <hsmci_select_device+0x44>
		}
	} else {
		clkdiv = 0;
   836f4:	f04f 0000 	mov.w	r0, #0
	}
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
   836f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   836fc:	6859      	ldr	r1, [r3, #4]
   836fe:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   83702:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
   83704:	6859      	ldr	r1, [r3, #4]
   83706:	b2c0      	uxtb	r0, r0
   83708:	4308      	orrs	r0, r1
   8370a:	6058      	str	r0, [r3, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
   8370c:	2a04      	cmp	r2, #4
   8370e:	d004      	beq.n	8371a <hsmci_select_device+0x66>
}

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
   83710:	2a08      	cmp	r2, #8
   83712:	bf0c      	ite	eq
   83714:	22c0      	moveq	r2, #192	; 0xc0
   83716:	2200      	movne	r2, #0
   83718:	e001      	b.n	8371e <hsmci_select_device+0x6a>
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
		break;

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
   8371a:	f04f 0280 	mov.w	r2, #128	; 0x80
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
   8371e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   83722:	60da      	str	r2, [r3, #12]
   83724:	4770      	bx	lr
   83726:	bf00      	nop

00083728 <hsmci_deselect_device>:
}

void hsmci_deselect_device(uint8_t slot)
{
   83728:	4770      	bx	lr
   8372a:	bf00      	nop

0008372c <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
   8372c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   83730:	685a      	ldr	r2, [r3, #4]
   83732:	f422 5060 	bic.w	r0, r2, #14336	; 0x3800
   83736:	6058      	str	r0, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
   83738:	f04f 0100 	mov.w	r1, #0
   8373c:	6119      	str	r1, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
   8373e:	f44f 6210 	mov.w	r2, #2304	; 0x900
   83742:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
   83744:	4618      	mov	r0, r3
   83746:	6c03      	ldr	r3, [r0, #64]	; 0x40
   83748:	f013 0f01 	tst.w	r3, #1
   8374c:	d0fb      	beq.n	83746 <hsmci_send_clock+0x1a>
}
   8374e:	4770      	bx	lr

00083750 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   83750:	b510      	push	{r4, lr}
   83752:	4604      	mov	r4, r0
   83754:	460a      	mov	r2, r1
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
   83756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8375a:	6859      	ldr	r1, [r3, #4]
   8375c:	f421 5060 	bic.w	r0, r1, #14336	; 0x3800
   83760:	6058      	str	r0, [r3, #4]
#ifdef HSMCI_SR_DMADONE
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
   83762:	f04f 0000 	mov.w	r0, #0
   83766:	6518      	str	r0, [r3, #80]	; 0x50
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
	HSMCI->HSMCI_BLKR = 0;
   83768:	6198      	str	r0, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
   8376a:	4621      	mov	r1, r4
   8376c:	f243 539d 	movw	r3, #13725	; 0x359d
   83770:	f2c0 0308 	movt	r3, #8
   83774:	4798      	blx	r3
}
   83776:	bd10      	pop	{r4, pc}

00083778 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
   83778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8377c:	6a18      	ldr	r0, [r3, #32]
}
   8377e:	4770      	bx	lr

00083780 <hsmci_get_response_128>:
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   83780:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   83784:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   83786:	ea4f 6112 	mov.w	r1, r2, lsr #24
   8378a:	7001      	strb	r1, [r0, #0]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   8378c:	ea4f 4112 	mov.w	r1, r2, lsr #16
   83790:	7041      	strb	r1, [r0, #1]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   83792:	ea4f 2112 	mov.w	r1, r2, lsr #8
   83796:	7081      	strb	r1, [r0, #2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   83798:	70c2      	strb	r2, [r0, #3]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   8379a:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   8379c:	ea4f 6112 	mov.w	r1, r2, lsr #24
   837a0:	7101      	strb	r1, [r0, #4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   837a2:	ea4f 4112 	mov.w	r1, r2, lsr #16
   837a6:	7141      	strb	r1, [r0, #5]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   837a8:	ea4f 2112 	mov.w	r1, r2, lsr #8
   837ac:	7181      	strb	r1, [r0, #6]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   837ae:	71c2      	strb	r2, [r0, #7]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   837b0:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   837b2:	ea4f 6112 	mov.w	r1, r2, lsr #24
   837b6:	7201      	strb	r1, [r0, #8]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   837b8:	ea4f 4112 	mov.w	r1, r2, lsr #16
   837bc:	7241      	strb	r1, [r0, #9]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   837be:	ea4f 2112 	mov.w	r1, r2, lsr #8
   837c2:	7281      	strb	r1, [r0, #10]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   837c4:	72c2      	strb	r2, [r0, #11]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   837c6:	6a1b      	ldr	r3, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   837c8:	ea4f 6213 	mov.w	r2, r3, lsr #24
   837cc:	7302      	strb	r2, [r0, #12]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   837ce:	ea4f 4113 	mov.w	r1, r3, lsr #16
   837d2:	7341      	strb	r1, [r0, #13]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   837d4:	ea4f 2213 	mov.w	r2, r3, lsr #8
   837d8:	7382      	strb	r2, [r0, #14]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   837da:	73c3      	strb	r3, [r0, #15]
   837dc:	4770      	bx	lr
   837de:	bf00      	nop

000837e0 <hsmci_adtc_start>:
		response++;
	}
}

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
   837e0:	b570      	push	{r4, r5, r6, lr}
   837e2:	4604      	mov	r4, r0
   837e4:	460d      	mov	r5, r1
	uint32_t cmdr;

#ifdef HSMCI_SR_DMADONE
	if (access_block) {
   837e6:	f89d 1010 	ldrb.w	r1, [sp, #16]
   837ea:	b129      	cbz	r1, 837f8 <hsmci_adtc_start+0x18>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
   837ec:	f44f 7080 	mov.w	r0, #256	; 0x100
   837f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   837f4:	6508      	str	r0, [r1, #80]	; 0x50
   837f6:	e004      	b.n	83802 <hsmci_adtc_start+0x22>
	} else {
		// Disable DMA for HSMCI
		HSMCI->HSMCI_DMA = 0;
   837f8:	f04f 0000 	mov.w	r0, #0
   837fc:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   83800:	6530      	str	r0, [r6, #80]	; 0x50
#endif

	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
   83802:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   83806:	6870      	ldr	r0, [r6, #4]
   83808:	f440 51c0 	orr.w	r1, r0, #6144	; 0x1800
   8380c:	6071      	str	r1, [r6, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
   8380e:	f012 0f03 	tst.w	r2, #3
   83812:	d004      	beq.n	8381e <hsmci_adtc_start+0x3e>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
   83814:	6870      	ldr	r0, [r6, #4]
   83816:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   8381a:	6071      	str	r1, [r6, #4]
   8381c:	e005      	b.n	8382a <hsmci_adtc_start+0x4a>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
   8381e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   83822:	6870      	ldr	r0, [r6, #4]
   83824:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
   83828:	6071      	str	r1, [r6, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
   8382a:	f404 4600 	and.w	r6, r4, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
   8382e:	2e00      	cmp	r6, #0
   83830:	bf0c      	ite	eq
   83832:	f44f 20a0 	moveq.w	r0, #327680	; 0x50000
   83836:	f44f 3080 	movne.w	r0, #65536	; 0x10000
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
   8383a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   8383e:	d009      	beq.n	83854 <hsmci_adtc_start+0x74>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
   83840:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
   83844:	ea4f 56c2 	mov.w	r6, r2, lsl #23
   83848:	ea4f 51d6 	mov.w	r1, r6, lsr #23
   8384c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   83850:	61b1      	str	r1, [r6, #24]
   83852:	e018      	b.n	83886 <hsmci_adtc_start+0xa6>
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
   83854:	ea43 4602 	orr.w	r6, r3, r2, lsl #16
   83858:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8385c:	618e      	str	r6, [r1, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
   8385e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   83862:	d002      	beq.n	8386a <hsmci_adtc_start+0x8a>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
   83864:	f440 1020 	orr.w	r0, r0, #2621440	; 0x280000
   83868:	e00d      	b.n	83886 <hsmci_adtc_start+0xa6>
		} else if (cmd & SDMMC_CMD_STREAM) {
   8386a:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   8386e:	d002      	beq.n	83876 <hsmci_adtc_start+0x96>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
   83870:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   83874:	e007      	b.n	83886 <hsmci_adtc_start+0xa6>
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
   83876:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   8387a:	d104      	bne.n	83886 <hsmci_adtc_start+0xa6>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
   8387c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
   83880:	bf18      	it	ne
   83882:	f440 2000 	orrne.w	r0, r0, #524288	; 0x80000
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
   83886:	f640 414c 	movw	r1, #3148	; 0xc4c
   8388a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8388e:	f04f 0600 	mov.w	r6, #0
   83892:	600e      	str	r6, [r1, #0]
	hsmci_block_size = block_size;
   83894:	f640 4148 	movw	r1, #3144	; 0xc48
   83898:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8389c:	800a      	strh	r2, [r1, #0]
	hsmci_nb_block = nb_block;
   8389e:	f640 424a 	movw	r2, #3146	; 0xc4a
   838a2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   838a6:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
   838a8:	4621      	mov	r1, r4
   838aa:	462a      	mov	r2, r5
   838ac:	f243 539d 	movw	r3, #13725	; 0x359d
   838b0:	f2c0 0308 	movt	r3, #8
   838b4:	4798      	blx	r3
}
   838b6:	bd70      	pop	{r4, r5, r6, pc}

000838b8 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
   838b8:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
   838ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   838be:	f04f 0200 	mov.w	r2, #0
   838c2:	f2cc 0260 	movt	r2, #49248	; 0xc060

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
   838c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   838c8:	4213      	tst	r3, r2
   838ca:	d007      	beq.n	838dc <hsmci_read_word+0x24>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   838cc:	f243 506d 	movw	r0, #13677	; 0x356d
   838d0:	f2c0 0008 	movt	r0, #8
   838d4:	4780      	blx	r0
			return false;
   838d6:	f04f 0000 	mov.w	r0, #0
   838da:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_RXRDY));
   838dc:	f013 0f02 	tst.w	r3, #2
   838e0:	d0f1      	beq.n	838c6 <hsmci_read_word+0xe>

	// Read data
	*value = HSMCI->HSMCI_RDR;
   838e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   838e6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   838e8:	6002      	str	r2, [r0, #0]
	hsmci_transfert_pos += 4;
   838ea:	f640 404c 	movw	r0, #3148	; 0xc4c
   838ee:	f2c2 0007 	movt	r0, #8199	; 0x2007
   838f2:	6803      	ldr	r3, [r0, #0]
   838f4:	f103 0304 	add.w	r3, r3, #4
   838f8:	6003      	str	r3, [r0, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   838fa:	f640 414a 	movw	r1, #3146	; 0xc4a
   838fe:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83902:	880a      	ldrh	r2, [r1, #0]
   83904:	f640 4048 	movw	r0, #3144	; 0xc48
   83908:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8390c:	8801      	ldrh	r1, [r0, #0]
   8390e:	fb01 f202 	mul.w	r2, r1, r2
   83912:	4293      	cmp	r3, r2
   83914:	d316      	bcc.n	83944 <hsmci_read_word+0x8c>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   83916:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   8391a:	f04f 0200 	mov.w	r2, #0
   8391e:	f2cc 0260 	movt	r2, #49248	; 0xc060
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   83922:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   83924:	4213      	tst	r3, r2
   83926:	d007      	beq.n	83938 <hsmci_read_word+0x80>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   83928:	f243 516d 	movw	r1, #13677	; 0x356d
   8392c:	f2c0 0108 	movt	r1, #8
   83930:	4788      	blx	r1
			return false;
   83932:	f04f 0000 	mov.w	r0, #0
   83936:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
   83938:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   8393c:	d0f1      	beq.n	83922 <hsmci_read_word+0x6a>
	return true;
   8393e:	f04f 0001 	mov.w	r0, #1
   83942:	bd08      	pop	{r3, pc}

	// Read data
	*value = HSMCI->HSMCI_RDR;
	hsmci_transfert_pos += 4;
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
		return true;
   83944:	f04f 0001 	mov.w	r0, #1
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
   83948:	bd08      	pop	{r3, pc}
   8394a:	bf00      	nop

0008394c <hsmci_start_read_blocks>:
	return true;
}

#ifdef HSMCI_SR_DMADONE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
   8394c:	b570      	push	{r4, r5, r6, lr}
   8394e:	b086      	sub	sp, #24
   83950:	4604      	mov	r4, r0
	uint32_t cfg, nb_data;
	dma_transfer_descriptor_t desc;
	bool transfert_byte;

	nb_data = nb_block * hsmci_block_size;
   83952:	f640 4348 	movw	r3, #3144	; 0xc48
   83956:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8395a:	881e      	ldrh	r6, [r3, #0]
   8395c:	fb06 f601 	mul.w	r6, r6, r1
	transfert_byte = ((HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) || (((uint32_t)dest & 0x3) > 0)) ? 1 : 0;
   83960:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   83964:	6841      	ldr	r1, [r0, #4]
   83966:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   8396a:	d12f      	bne.n	839cc <hsmci_start_read_blocks+0x80>
	 * - Hardware Selection for the Source
	 * - Source with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   8396c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   83970:	f2c4 050c 	movt	r5, #16396	; 0x400c
   83974:	4628      	mov	r0, r5
   83976:	f244 0239 	movw	r2, #16441	; 0x4039
   8397a:	f2c0 0208 	movt	r2, #8
   8397e:	4790      	blx	r2
	dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   83980:	4628      	mov	r0, r5
   83982:	f04f 0100 	mov.w	r1, #0
   83986:	f244 034d 	movw	r3, #16461	; 0x404d
   8398a:	f2c0 0308 	movt	r3, #8
   8398e:	4798      	blx	r3
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_SRC_H2SEL |
			DMAC_CFG_SRC_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   83990:	4628      	mov	r0, r5
   83992:	f04f 0100 	mov.w	r1, #0
   83996:	f44f 7200 	mov.w	r2, #512	; 0x200
   8399a:	f2c0 1201 	movt	r2, #257	; 0x101
   8399e:	f244 0595 	movw	r5, #16533	; 0x4095
   839a2:	f2c0 0508 	movt	r5, #8
   839a6:	47a8      	blx	r5

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
   839a8:	f04f 0030 	mov.w	r0, #48	; 0x30
   839ac:	f2c4 0000 	movt	r0, #16384	; 0x4000
   839b0:	9001      	str	r0, [sp, #4]
	desc.ul_destination_addr = (uint32_t)dest;
   839b2:	9402      	str	r4, [sp, #8]
	if (transfert_byte) {
   839b4:	f014 0f03 	tst.w	r4, #3
   839b8:	d002      	beq.n	839c0 <hsmci_start_read_blocks+0x74>
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
   839ba:	b2b4      	uxth	r4, r6

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
	desc.ul_destination_addr = (uint32_t)dest;
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
   839bc:	9403      	str	r4, [sp, #12]
   839be:	e02a      	b.n	83a16 <hsmci_start_read_blocks+0xca>
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   839c0:	f3c6 048f 	ubfx	r4, r6, #2, #16
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
   839c4:	f044 5108 	orr.w	r1, r4, #570425344	; 0x22000000
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   839c8:	9103      	str	r1, [sp, #12]
   839ca:	e024      	b.n	83a16 <hsmci_start_read_blocks+0xca>
	 * - Hardware Selection for the Source
	 * - Source with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   839cc:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   839d0:	f2c4 050c 	movt	r5, #16396	; 0x400c
   839d4:	4628      	mov	r0, r5
   839d6:	f244 0239 	movw	r2, #16441	; 0x4039
   839da:	f2c0 0208 	movt	r2, #8
   839de:	4790      	blx	r2
	dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   839e0:	4628      	mov	r0, r5
   839e2:	f04f 0100 	mov.w	r1, #0
   839e6:	f244 034d 	movw	r3, #16461	; 0x404d
   839ea:	f2c0 0308 	movt	r3, #8
   839ee:	4798      	blx	r3
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_SRC_H2SEL |
			DMAC_CFG_SRC_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   839f0:	4628      	mov	r0, r5
   839f2:	f04f 0100 	mov.w	r1, #0
   839f6:	f44f 7200 	mov.w	r2, #512	; 0x200
   839fa:	f2c0 1201 	movt	r2, #257	; 0x101
   839fe:	f244 0595 	movw	r5, #16533	; 0x4095
   83a02:	f2c0 0508 	movt	r5, #8
   83a06:	47a8      	blx	r5

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
   83a08:	f04f 0030 	mov.w	r0, #48	; 0x30
   83a0c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   83a10:	9001      	str	r0, [sp, #4]
	desc.ul_destination_addr = (uint32_t)dest;
   83a12:	9402      	str	r4, [sp, #8]
   83a14:	e7d1      	b.n	839ba <hsmci_start_read_blocks+0x6e>
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
	}
	desc.ul_ctrlB = DMAC_CTRLB_SRC_DSCR_FETCH_DISABLE
   83a16:	f04f 0100 	mov.w	r1, #0
   83a1a:	f2c4 2151 	movt	r1, #16977	; 0x4251
   83a1e:	9104      	str	r1, [sp, #16]
			| DMAC_CTRLB_DST_DSCR_FETCH_DISABLE
			| DMAC_CTRLB_FC_PER2MEM_DMA_FC
			| DMAC_CTRLB_SRC_INCR_FIXED
			| DMAC_CTRLB_DST_INCR_INCREMENTING
			| DMAC_CTRLB_IEN;
	desc.ul_descriptor_addr = (uint32_t)NULL;
   83a20:	f04f 0400 	mov.w	r4, #0
   83a24:	9405      	str	r4, [sp, #20]
	dmac_channel_single_buf_transfer_init(DMAC, CONF_HSMCI_DMA_CHANNEL,
   83a26:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   83a2a:	f2c4 050c 	movt	r5, #16396	; 0x400c
   83a2e:	4628      	mov	r0, r5
   83a30:	4621      	mov	r1, r4
   83a32:	aa01      	add	r2, sp, #4
   83a34:	f244 03a1 	movw	r3, #16545	; 0x40a1
   83a38:	f2c0 0308 	movt	r3, #8
   83a3c:	4798      	blx	r3
			&desc);

	// Start DMA transfer
	dmac_channel_enable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   83a3e:	4628      	mov	r0, r5
   83a40:	4621      	mov	r1, r4
   83a42:	f244 0241 	movw	r2, #16449	; 0x4041
   83a46:	f2c0 0208 	movt	r2, #8
   83a4a:	4790      	blx	r2
	hsmci_transfert_pos += nb_data;
   83a4c:	f640 404c 	movw	r0, #3148	; 0xc4c
   83a50:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83a54:	6801      	ldr	r1, [r0, #0]
   83a56:	1876      	adds	r6, r6, r1
   83a58:	6006      	str	r6, [r0, #0]
	return true;
}
   83a5a:	f04f 0001 	mov.w	r0, #1
   83a5e:	b006      	add	sp, #24
   83a60:	bd70      	pop	{r4, r5, r6, pc}
   83a62:	bf00      	nop

00083a64 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
   83a64:	b510      	push	{r4, lr}
			hsmci_reset();
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   83a66:	f640 434a 	movw	r3, #3146	; 0xc4a
   83a6a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83a6e:	8818      	ldrh	r0, [r3, #0]
   83a70:	f640 4248 	movw	r2, #3144	; 0xc48
   83a74:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83a78:	8814      	ldrh	r4, [r2, #0]
   83a7a:	fb04 f400 	mul.w	r4, r4, r0
   83a7e:	f640 414c 	movw	r1, #3148	; 0xc4c
   83a82:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83a86:	6808      	ldr	r0, [r1, #0]
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   83a88:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   83a8c:	f04f 0200 	mov.w	r2, #0
   83a90:	f2cc 0260 	movt	r2, #49248	; 0xc060
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   83a94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   83a96:	4213      	tst	r3, r2
   83a98:	d012      	beq.n	83ac0 <hsmci_wait_end_of_read_blocks+0x5c>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   83a9a:	f243 506d 	movw	r0, #13677	; 0x356d
   83a9e:	f2c0 0008 	movt	r0, #8
   83aa2:	4780      	blx	r0
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   83aa4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   83aa8:	f2c4 000c 	movt	r0, #16396	; 0x400c
   83aac:	f04f 0100 	mov.w	r1, #0
   83ab0:	f244 024d 	movw	r2, #16461	; 0x404d
   83ab4:	f2c0 0208 	movt	r2, #8
   83ab8:	4790      	blx	r2
			return false;
   83aba:	f04f 0000 	mov.w	r0, #0
   83abe:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   83ac0:	4284      	cmp	r4, r0
   83ac2:	d902      	bls.n	83aca <hsmci_wait_end_of_read_blocks+0x66>
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
   83ac4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   83ac8:	d105      	bne.n	83ad6 <hsmci_wait_end_of_read_blocks+0x72>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
   83aca:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   83ace:	d0e1      	beq.n	83a94 <hsmci_wait_end_of_read_blocks+0x30>
	return true;
   83ad0:	f04f 0001 	mov.w	r0, #1
   83ad4:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
				return true;
   83ad6:	f04f 0001 	mov.w	r0, #1
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
   83ada:	bd10      	pop	{r4, pc}

00083adc <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
   83adc:	b570      	push	{r4, r5, r6, lr}
   83ade:	b086      	sub	sp, #24
   83ae0:	4604      	mov	r4, r0
	bool transfert_byte;
	uint32_t cfg, nb_data;
	dma_transfer_descriptor_t desc;

	nb_data = nb_block * hsmci_block_size;
   83ae2:	f640 4348 	movw	r3, #3144	; 0xc48
   83ae6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83aea:	881e      	ldrh	r6, [r3, #0]
   83aec:	fb06 f601 	mul.w	r6, r6, r1
	transfert_byte = ((HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) || (((uint32_t)src & 0x3) > 0)) ? 1 : 0;
   83af0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   83af4:	6841      	ldr	r1, [r0, #4]
   83af6:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   83afa:	d127      	bne.n	83b4c <hsmci_start_write_blocks+0x70>
	 * - Hardware Selection for the Destination
	 * - Destination with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   83afc:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   83b00:	f2c4 050c 	movt	r5, #16396	; 0x400c
   83b04:	4628      	mov	r0, r5
   83b06:	f244 0239 	movw	r2, #16441	; 0x4039
   83b0a:	f2c0 0208 	movt	r2, #8
   83b0e:	4790      	blx	r2
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_DST_H2SEL |
			DMAC_CFG_DST_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   83b10:	4628      	mov	r0, r5
   83b12:	f04f 0100 	mov.w	r1, #0
   83b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83b1a:	f2c0 1201 	movt	r2, #257	; 0x101
   83b1e:	f244 0395 	movw	r3, #16533	; 0x4095
   83b22:	f2c0 0308 	movt	r3, #8
   83b26:	4798      	blx	r3

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
   83b28:	9401      	str	r4, [sp, #4]
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
   83b2a:	f04f 0034 	mov.w	r0, #52	; 0x34
   83b2e:	f2c4 0000 	movt	r0, #16384	; 0x4000
   83b32:	9002      	str	r0, [sp, #8]
	if (transfert_byte) {
   83b34:	f014 0f03 	tst.w	r4, #3
   83b38:	d002      	beq.n	83b40 <hsmci_start_write_blocks+0x64>
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
   83b3a:	b2b4      	uxth	r4, r6

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
   83b3c:	9403      	str	r4, [sp, #12]
   83b3e:	e022      	b.n	83b86 <hsmci_start_write_blocks+0xaa>
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   83b40:	f3c6 048f 	ubfx	r4, r6, #2, #16
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
   83b44:	f044 5108 	orr.w	r1, r4, #570425344	; 0x22000000
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   83b48:	9103      	str	r1, [sp, #12]
   83b4a:	e01c      	b.n	83b86 <hsmci_start_write_blocks+0xaa>
	 * - Hardware Selection for the Destination
	 * - Destination with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   83b4c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   83b50:	f2c4 050c 	movt	r5, #16396	; 0x400c
   83b54:	4628      	mov	r0, r5
   83b56:	f244 0239 	movw	r2, #16441	; 0x4039
   83b5a:	f2c0 0208 	movt	r2, #8
   83b5e:	4790      	blx	r2
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_DST_H2SEL |
			DMAC_CFG_DST_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   83b60:	4628      	mov	r0, r5
   83b62:	f04f 0100 	mov.w	r1, #0
   83b66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83b6a:	f2c0 1201 	movt	r2, #257	; 0x101
   83b6e:	f244 0395 	movw	r3, #16533	; 0x4095
   83b72:	f2c0 0308 	movt	r3, #8
   83b76:	4798      	blx	r3

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
   83b78:	9401      	str	r4, [sp, #4]
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
   83b7a:	f04f 0034 	mov.w	r0, #52	; 0x34
   83b7e:	f2c4 0000 	movt	r0, #16384	; 0x4000
   83b82:	9002      	str	r0, [sp, #8]
   83b84:	e7d9      	b.n	83b3a <hsmci_start_write_blocks+0x5e>
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
	}
	desc.ul_ctrlB = DMAC_CTRLB_SRC_DSCR_FETCH_DISABLE
   83b86:	f04f 0100 	mov.w	r1, #0
   83b8a:	f2c6 0131 	movt	r1, #24625	; 0x6031
   83b8e:	9104      	str	r1, [sp, #16]
			| DMAC_CTRLB_DST_DSCR_FETCH_DISABLE
			| DMAC_CTRLB_FC_MEM2PER_DMA_FC
			| DMAC_CTRLB_SRC_INCR_INCREMENTING
			| DMAC_CTRLB_DST_INCR_FIXED
			| DMAC_CTRLB_IEN;
	desc.ul_descriptor_addr = (uint32_t)NULL;
   83b90:	f04f 0400 	mov.w	r4, #0
   83b94:	9405      	str	r4, [sp, #20]
	dmac_channel_single_buf_transfer_init(DMAC, CONF_HSMCI_DMA_CHANNEL,
   83b96:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   83b9a:	f2c4 050c 	movt	r5, #16396	; 0x400c
   83b9e:	4628      	mov	r0, r5
   83ba0:	4621      	mov	r1, r4
   83ba2:	aa01      	add	r2, sp, #4
   83ba4:	f244 03a1 	movw	r3, #16545	; 0x40a1
   83ba8:	f2c0 0308 	movt	r3, #8
   83bac:	4798      	blx	r3
			&desc);

	// Start DMA transfer
	dmac_channel_enable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   83bae:	4628      	mov	r0, r5
   83bb0:	4621      	mov	r1, r4
   83bb2:	f244 0241 	movw	r2, #16449	; 0x4041
   83bb6:	f2c0 0208 	movt	r2, #8
   83bba:	4790      	blx	r2
	hsmci_transfert_pos += nb_data;
   83bbc:	f640 404c 	movw	r0, #3148	; 0xc4c
   83bc0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83bc4:	6801      	ldr	r1, [r0, #0]
   83bc6:	1876      	adds	r6, r6, r1
   83bc8:	6006      	str	r6, [r0, #0]
	return true;
}
   83bca:	f04f 0001 	mov.w	r0, #1
   83bce:	b006      	add	sp, #24
   83bd0:	bd70      	pop	{r4, r5, r6, pc}
   83bd2:	bf00      	nop

00083bd4 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
   83bd4:	b510      	push	{r4, lr}
			hsmci_reset();
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   83bd6:	f640 434a 	movw	r3, #3146	; 0xc4a
   83bda:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83bde:	8818      	ldrh	r0, [r3, #0]
   83be0:	f640 4248 	movw	r2, #3144	; 0xc48
   83be4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83be8:	8814      	ldrh	r4, [r2, #0]
   83bea:	fb04 f400 	mul.w	r4, r4, r0
   83bee:	f640 414c 	movw	r1, #3148	; 0xc4c
   83bf2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83bf6:	6808      	ldr	r0, [r1, #0]
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
   83bf8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   83bfc:	f04f 0200 	mov.w	r2, #0
   83c00:	f2cc 0260 	movt	r2, #49248	; 0xc060
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
   83c04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   83c06:	4213      	tst	r3, r2
   83c08:	d012      	beq.n	83c30 <hsmci_wait_end_of_write_blocks+0x5c>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   83c0a:	f243 506d 	movw	r0, #13677	; 0x356d
   83c0e:	f2c0 0008 	movt	r0, #8
   83c12:	4780      	blx	r0
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   83c14:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   83c18:	f2c4 000c 	movt	r0, #16396	; 0x400c
   83c1c:	f04f 0100 	mov.w	r1, #0
   83c20:	f244 024d 	movw	r2, #16461	; 0x404d
   83c24:	f2c0 0208 	movt	r2, #8
   83c28:	4790      	blx	r2
			return false;
   83c2a:	f04f 0000 	mov.w	r0, #0
   83c2e:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   83c30:	4284      	cmp	r4, r0
   83c32:	d902      	bls.n	83c3a <hsmci_wait_end_of_write_blocks+0x66>
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
   83c34:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   83c38:	d105      	bne.n	83c46 <hsmci_wait_end_of_write_blocks+0x72>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
   83c3a:	f013 0f20 	tst.w	r3, #32
   83c3e:	d0e1      	beq.n	83c04 <hsmci_wait_end_of_write_blocks+0x30>
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	return true;
   83c40:	f04f 0001 	mov.w	r0, #1
   83c44:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
				return true;
   83c46:	f04f 0001 	mov.w	r0, #1
	} while (!(sr & HSMCI_SR_NOTBUSY));
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	return true;

}
   83c4a:	bd10      	pop	{r4, pc}

00083c4c <cdc_send_line>:
volatile Bool is_new_received_cdc_char = false;
volatile Bool is_terminal_open = false;


iram_size_t cdc_send_line(char* line_to_send)
{
   83c4c:	b510      	push	{r4, lr}
   83c4e:	4604      	mov	r4, r0
	if(is_terminal_open)
   83c50:	f640 4350 	movw	r3, #3152	; 0xc50
   83c54:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83c58:	7818      	ldrb	r0, [r3, #0]
   83c5a:	b168      	cbz	r0, 83c78 <cdc_send_line+0x2c>
		return udi_cdc_write_buf((const void*) line_to_send, strlen(line_to_send));
   83c5c:	4620      	mov	r0, r4
   83c5e:	f249 4239 	movw	r2, #37945	; 0x9439
   83c62:	f2c0 0208 	movt	r2, #8
   83c66:	4790      	blx	r2
   83c68:	4601      	mov	r1, r0
   83c6a:	4620      	mov	r0, r4
   83c6c:	f644 3341 	movw	r3, #19265	; 0x4b41
   83c70:	f2c0 0308 	movt	r3, #8
   83c74:	4798      	blx	r3
   83c76:	bd10      	pop	{r4, pc}
	else
		return strlen(line_to_send);
   83c78:	4620      	mov	r0, r4
   83c7a:	f249 4139 	movw	r1, #37945	; 0x9439
   83c7e:	f2c0 0108 	movt	r1, #8
   83c82:	4788      	blx	r1
}
   83c84:	bd10      	pop	{r4, pc}
   83c86:	bf00      	nop

00083c88 <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
	if (b_enable) 
   83c88:	b139      	cbz	r1, 83c9a <main_cdc_set_dtr+0x12>
		is_terminal_open = true;
   83c8a:	f640 4050 	movw	r0, #3152	; 0xc50
   83c8e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83c92:	f04f 0101 	mov.w	r1, #1
   83c96:	7001      	strb	r1, [r0, #0]
   83c98:	4770      	bx	lr
	else
		is_terminal_open = false;
   83c9a:	f640 4350 	movw	r3, #3152	; 0xc50
   83c9e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83ca2:	f04f 0200 	mov.w	r2, #0
   83ca6:	701a      	strb	r2, [r3, #0]
   83ca8:	4770      	bx	lr
   83caa:	bf00      	nop

00083cac <uart_rx_notify>:
}

void uart_rx_notify(uint8_t port)
{
	UNUSED(port);
	is_new_received_cdc_char = true;
   83cac:	f640 4351 	movw	r3, #3153	; 0xc51
   83cb0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83cb4:	f04f 0201 	mov.w	r2, #1
   83cb8:	701a      	strb	r2, [r3, #0]
   83cba:	4770      	bx	lr

00083cbc <main_suspend_action>:
	cpu_irq_restore(flags);	
	
	return true;
}

void main_suspend_action(void){}
   83cbc:	4770      	bx	lr
   83cbe:	bf00      	nop

00083cc0 <main_resume_action>:
void main_resume_action(void){}
   83cc0:	4770      	bx	lr
   83cc2:	bf00      	nop

00083cc4 <main_sof_action>:
void main_sof_action(void){}
   83cc4:	4770      	bx	lr
   83cc6:	bf00      	nop

00083cc8 <SCPI_Write>:
uint16_t current_input_line_pointer = 0;
char current_input_line[LINE_BUFFER_SIZE];


size_t SCPI_Write(scpi_t * context, const char * data, size_t len) 
{
   83cc8:	b530      	push	{r4, r5, lr}
   83cca:	b083      	sub	sp, #12
   83ccc:	4613      	mov	r3, r2
	(void) context;
	printf("%.*s", len, data);
   83cce:	f641 24e0 	movw	r4, #6880	; 0x1ae0
   83cd2:	f2c2 0407 	movt	r4, #8199	; 0x2007
   83cd6:	9100      	str	r1, [sp, #0]
   83cd8:	4620      	mov	r0, r4
   83cda:	f04f 0164 	mov.w	r1, #100	; 0x64
   83cde:	f64b 720c 	movw	r2, #48908	; 0xbf0c
   83ce2:	f2c0 0208 	movt	r2, #8
   83ce6:	f249 35d3 	movw	r5, #37843	; 0x93d3
   83cea:	f2c0 0508 	movt	r5, #8
   83cee:	47a8      	blx	r5
   83cf0:	4620      	mov	r0, r4
   83cf2:	f643 434d 	movw	r3, #15437	; 0x3c4d
   83cf6:	f2c0 0308 	movt	r3, #8
   83cfa:	4798      	blx	r3
	return SCPI_RES_OK;    
}
   83cfc:	f04f 0001 	mov.w	r0, #1
   83d00:	b003      	add	sp, #12
   83d02:	bd30      	pop	{r4, r5, pc}

00083d04 <SCPI_Flush>:

scpi_result_t SCPI_Flush(scpi_t * context) 
{
	return SCPI_RES_OK;
}
   83d04:	f04f 0001 	mov.w	r0, #1
   83d08:	4770      	bx	lr
   83d0a:	bf00      	nop

00083d0c <SCPI_Error>:

int SCPI_Error(scpi_t * context, int_fast16_t err) 
{
   83d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83d10:	b083      	sub	sp, #12
   83d12:	4605      	mov	r5, r0
   83d14:	4688      	mov	r8, r1
	uint16_t i = 0;
	
	#define ONLY_OUTPUT_READ_ERRORS
	#ifdef ONLY_OUTPUT_READ_ERRORS
		if (context->cmd_error == 1)
   83d16:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   83d1a:	2b00      	cmp	r3, #0
   83d1c:	d030      	beq.n	83d80 <SCPI_Error+0x74>
		{
			// If it's an unknown command 
			while(i < (context->buffer.position))
   83d1e:	6880      	ldr	r0, [r0, #8]
   83d20:	b370      	cbz	r0, 83d80 <SCPI_Error+0x74>
   83d22:	f04f 0600 	mov.w	r6, #0
   83d26:	4634      	mov	r4, r6
			{
				if (context->buffer.data[i] == '?')
				{
					printf("**ERROR: %d, \"%s\"\r\n", (int32_t) err, SCPI_ErrorTranslate(err));
   83d28:	f641 5b79 	movw	fp, #7545	; 0x1d79
   83d2c:	465f      	mov	r7, fp
   83d2e:	f2c0 0708 	movt	r7, #8
   83d32:	f641 29e0 	movw	r9, #6880	; 0x1ae0
   83d36:	f2c2 0907 	movt	r9, #8199	; 0x2007
   83d3a:	f64b 7a14 	movw	sl, #48916	; 0xbf14
   83d3e:	f2c0 0a08 	movt	sl, #8
		if (context->cmd_error == 1)
		{
			// If it's an unknown command 
			while(i < (context->buffer.position))
			{
				if (context->buffer.data[i] == '?')
   83d42:	68e9      	ldr	r1, [r5, #12]
   83d44:	5d8a      	ldrb	r2, [r1, r6]
   83d46:	2a3f      	cmp	r2, #63	; 0x3f
   83d48:	d113      	bne.n	83d72 <SCPI_Error+0x66>
				{
					printf("**ERROR: %d, \"%s\"\r\n", (int32_t) err, SCPI_ErrorTranslate(err));
   83d4a:	fa0f f088 	sxth.w	r0, r8
   83d4e:	47b8      	blx	r7
   83d50:	9000      	str	r0, [sp, #0]
   83d52:	4648      	mov	r0, r9
   83d54:	f04f 0164 	mov.w	r1, #100	; 0x64
   83d58:	4652      	mov	r2, sl
   83d5a:	4643      	mov	r3, r8
   83d5c:	f249 36d3 	movw	r6, #37843	; 0x93d3
   83d60:	f2c0 0608 	movt	r6, #8
   83d64:	47b0      	blx	r6
   83d66:	4648      	mov	r0, r9
   83d68:	f643 434d 	movw	r3, #15437	; 0x3c4d
   83d6c:	f2c0 0308 	movt	r3, #8
   83d70:	4798      	blx	r3
				}
				i++;
   83d72:	f104 0401 	add.w	r4, r4, #1
   83d76:	b2a4      	uxth	r4, r4
	#define ONLY_OUTPUT_READ_ERRORS
	#ifdef ONLY_OUTPUT_READ_ERRORS
		if (context->cmd_error == 1)
		{
			// If it's an unknown command 
			while(i < (context->buffer.position))
   83d78:	4626      	mov	r6, r4
   83d7a:	68a8      	ldr	r0, [r5, #8]
   83d7c:	4284      	cmp	r4, r0
   83d7e:	d3e0      	bcc.n	83d42 <SCPI_Error+0x36>
		}
	#endif
	//(void) context;
	//printf("**ERROR: %d, \"%s\"\r\n", (int32_t) err, SCPI_ErrorTranslate(err));
	return 0;
}
   83d80:	f04f 0000 	mov.w	r0, #0
   83d84:	b003      	add	sp, #12
   83d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d8a:	bf00      	nop

00083d8c <SCPI_Control>:

scpi_result_t SCPI_Control(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) 
{
   83d8c:	b530      	push	{r4, r5, lr}
   83d8e:	b083      	sub	sp, #12
   83d90:	460b      	mov	r3, r1
   83d92:	4614      	mov	r4, r2
	if (SCPI_CTRL_SRQ == ctrl) 
   83d94:	2901      	cmp	r1, #1
   83d96:	d118      	bne.n	83dca <SCPI_Control+0x3e>
	{
		printf("**SRQ: 0x%X (%d)\r\n", val, val);
   83d98:	f641 25e0 	movw	r5, #6880	; 0x1ae0
   83d9c:	f2c2 0507 	movt	r5, #8199	; 0x2007
   83da0:	9200      	str	r2, [sp, #0]
   83da2:	4628      	mov	r0, r5
   83da4:	f04f 0164 	mov.w	r1, #100	; 0x64
   83da8:	f64b 7228 	movw	r2, #48936	; 0xbf28
   83dac:	f2c0 0208 	movt	r2, #8
   83db0:	4623      	mov	r3, r4
   83db2:	f249 34d3 	movw	r4, #37843	; 0x93d3
   83db6:	f2c0 0408 	movt	r4, #8
   83dba:	47a0      	blx	r4
   83dbc:	4628      	mov	r0, r5
   83dbe:	f643 414d 	movw	r1, #15437	; 0x3c4d
   83dc2:	f2c0 0108 	movt	r1, #8
   83dc6:	4788      	blx	r1
   83dc8:	e017      	b.n	83dfa <SCPI_Control+0x6e>
	}
	else 
	{
		printf("**CTRL %02x: 0x%X (%d)\r\n", ctrl, val, val);
   83dca:	f641 25e0 	movw	r5, #6880	; 0x1ae0
   83dce:	f2c2 0507 	movt	r5, #8199	; 0x2007
   83dd2:	9200      	str	r2, [sp, #0]
   83dd4:	9201      	str	r2, [sp, #4]
   83dd6:	4628      	mov	r0, r5
   83dd8:	f04f 0164 	mov.w	r1, #100	; 0x64
   83ddc:	f64b 723c 	movw	r2, #48956	; 0xbf3c
   83de0:	f2c0 0208 	movt	r2, #8
   83de4:	f249 34d3 	movw	r4, #37843	; 0x93d3
   83de8:	f2c0 0408 	movt	r4, #8
   83dec:	47a0      	blx	r4
   83dee:	4628      	mov	r0, r5
   83df0:	f643 434d 	movw	r3, #15437	; 0x3c4d
   83df4:	f2c0 0308 	movt	r3, #8
   83df8:	4798      	blx	r3
	}
	return SCPI_RES_OK;
}
   83dfa:	f04f 0001 	mov.w	r0, #1
   83dfe:	b003      	add	sp, #12
   83e00:	bd30      	pop	{r4, r5, pc}
   83e02:	bf00      	nop

00083e04 <SCPI_Test>:

scpi_result_t SCPI_Test(scpi_t * context) 
{
   83e04:	b508      	push	{r3, lr}
	printf("**Test\r\n");
   83e06:	f641 22e0 	movw	r2, #6880	; 0x1ae0
   83e0a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83e0e:	f64b 7358 	movw	r3, #48984	; 0xbf58
   83e12:	f2c0 0308 	movt	r3, #8
   83e16:	cb03      	ldmia	r3!, {r0, r1}
   83e18:	6010      	str	r0, [r2, #0]
   83e1a:	6051      	str	r1, [r2, #4]
   83e1c:	7818      	ldrb	r0, [r3, #0]
   83e1e:	7210      	strb	r0, [r2, #8]
   83e20:	4610      	mov	r0, r2
   83e22:	f643 414d 	movw	r1, #15437	; 0x3c4d
   83e26:	f2c0 0108 	movt	r1, #8
   83e2a:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83e2c:	f04f 0001 	mov.w	r0, #1
   83e30:	bd08      	pop	{r3, pc}
   83e32:	bf00      	nop

00083e34 <SCPI_Reset>:

scpi_result_t SCPI_Reset(scpi_t * context) 
{
   83e34:	b508      	push	{r3, lr}
	printf("**Reset\r\n");
   83e36:	f641 22e0 	movw	r2, #6880	; 0x1ae0
   83e3a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83e3e:	f64b 7364 	movw	r3, #48996	; 0xbf64
   83e42:	f2c0 0308 	movt	r3, #8
   83e46:	cb03      	ldmia	r3!, {r0, r1}
   83e48:	6010      	str	r0, [r2, #0]
   83e4a:	6051      	str	r1, [r2, #4]
   83e4c:	8818      	ldrh	r0, [r3, #0]
   83e4e:	8110      	strh	r0, [r2, #8]
   83e50:	4610      	mov	r0, r2
   83e52:	f643 414d 	movw	r1, #15437	; 0x3c4d
   83e56:	f2c0 0108 	movt	r1, #8
   83e5a:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83e5c:	f04f 0001 	mov.w	r0, #1
   83e60:	bd08      	pop	{r3, pc}
   83e62:	bf00      	nop

00083e64 <console_init>:

void console_init(void)
{
   83e64:	b508      	push	{r3, lr}
	SCPI_Init(&scpi_context);
   83e66:	f240 0030 	movw	r0, #48	; 0x30
   83e6a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83e6e:	f242 63cd 	movw	r3, #9933	; 0x26cd
   83e72:	f2c0 0308 	movt	r3, #8
   83e76:	4798      	blx	r3
   83e78:	bd08      	pop	{r3, pc}
   83e7a:	bf00      	nop

00083e7c <console_process>:
}

void console_process(void)
{
   83e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	iram_size_t data_remaining = 0;
	uint8_t temp_buffer[10];
	
	if(udi_cdc_get_nb_received_data() == 0)
   83e80:	f244 63a5 	movw	r3, #18085	; 0x46a5
   83e84:	f2c0 0308 	movt	r3, #8
   83e88:	4798      	blx	r3
   83e8a:	2800      	cmp	r0, #0
   83e8c:	d040      	beq.n	83f10 <console_process+0x94>
		return;
	
	do 
	{
		data_remaining = udi_cdc_read_buf(current_input_line+current_input_line_pointer, 1);
   83e8e:	f640 4452 	movw	r4, #3154	; 0xc52
   83e92:	f2c2 0407 	movt	r4, #8199	; 0x2007
   83e96:	f641 3544 	movw	r5, #6980	; 0x1b44
   83e9a:	f2c2 0507 	movt	r5, #8199	; 0x2007
   83e9e:	f04f 0601 	mov.w	r6, #1
   83ea2:	f644 1ab9 	movw	sl, #18873	; 0x49b9
   83ea6:	f2c0 0a08 	movt	sl, #8
		//udi_cdc_putc(current_input_line[current_input_line_pointer]);
		SCPI_Input(&scpi_context, current_input_line+current_input_line_pointer, 1);
   83eaa:	f240 0930 	movw	r9, #48	; 0x30
   83eae:	f2c2 0907 	movt	r9, #8199	; 0x2007
   83eb2:	f242 68e1 	movw	r8, #9953	; 0x26e1
   83eb6:	f2c0 0808 	movt	r8, #8
	if(udi_cdc_get_nb_received_data() == 0)
		return;
	
	do 
	{
		data_remaining = udi_cdc_read_buf(current_input_line+current_input_line_pointer, 1);
   83eba:	8820      	ldrh	r0, [r4, #0]
   83ebc:	1940      	adds	r0, r0, r5
   83ebe:	4631      	mov	r1, r6
   83ec0:	47d0      	blx	sl
   83ec2:	4607      	mov	r7, r0
		//udi_cdc_putc(current_input_line[current_input_line_pointer]);
		SCPI_Input(&scpi_context, current_input_line+current_input_line_pointer, 1);
   83ec4:	8821      	ldrh	r1, [r4, #0]
   83ec6:	4648      	mov	r0, r9
   83ec8:	1949      	adds	r1, r1, r5
   83eca:	4632      	mov	r2, r6
   83ecc:	47c0      	blx	r8
		current_input_line_pointer++;
   83ece:	8822      	ldrh	r2, [r4, #0]
   83ed0:	f102 0201 	add.w	r2, r2, #1
   83ed4:	b293      	uxth	r3, r2
   83ed6:	8023      	strh	r3, [r4, #0]
		
		if((current_input_line[current_input_line_pointer-1] == 0x0D) || (current_input_line[current_input_line_pointer-1] == 0x0A))
   83ed8:	18e8      	adds	r0, r5, r3
   83eda:	f810 1c01 	ldrb.w	r1, [r0, #-1]
   83ede:	290d      	cmp	r1, #13
   83ee0:	d001      	beq.n	83ee6 <console_process+0x6a>
   83ee2:	290a      	cmp	r1, #10
   83ee4:	d102      	bne.n	83eec <console_process+0x70>
		{
			current_input_line_pointer = 0;
   83ee6:	f04f 0200 	mov.w	r2, #0
   83eea:	8022      	strh	r2, [r4, #0]
			// should we do another parsing rather than scpi?
		}
	} 
	while((data_remaining > 0) && (current_input_line_pointer < LINE_BUFFER_SIZE));
   83eec:	b117      	cbz	r7, 83ef4 <console_process+0x78>
   83eee:	8823      	ldrh	r3, [r4, #0]
   83ef0:	2bc7      	cmp	r3, #199	; 0xc7
   83ef2:	d9e2      	bls.n	83eba <console_process+0x3e>
	
	if(current_input_line_pointer == LINE_BUFFER_SIZE)
   83ef4:	f640 4052 	movw	r0, #3154	; 0xc52
   83ef8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83efc:	8801      	ldrh	r1, [r0, #0]
   83efe:	29c8      	cmp	r1, #200	; 0xc8
   83f00:	d106      	bne.n	83f10 <console_process+0x94>
	{
		// We should return a message or smth...
		current_input_line_pointer = 0;
   83f02:	f640 4352 	movw	r3, #3154	; 0xc52
   83f06:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83f0a:	f04f 0200 	mov.w	r2, #0
   83f0e:	801a      	strh	r2, [r3, #0]
   83f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00083f14 <main_extra_string>:
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   83f14:	f641 4314 	movw	r3, #7188	; 0x1c14
   83f18:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83f1c:	7898      	ldrb	r0, [r3, #2]
   83f1e:	2804      	cmp	r0, #4
   83f20:	d002      	beq.n	83f28 <main_extra_string+0x14>
   83f22:	2805      	cmp	r0, #5
   83f24:	d13b      	bne.n	83f9e <main_extra_string+0x8a>
   83f26:	e004      	b.n	83f32 <main_extra_string+0x1e>
	case UDI_CDC_IAD_STRING_ID:
		str_lgt = sizeof(udi_cdc_name)-1;
		str = udi_cdc_name;
   83f28:	f240 02b4 	movw	r2, #180	; 0xb4
   83f2c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83f30:	e003      	b.n	83f3a <main_extra_string+0x26>
		break;
	case UDI_MSC_STRING_ID:
		str_lgt = sizeof(udi_msc_name)-1;
		str = udi_msc_name;
   83f32:	f240 02a4 	movw	r2, #164	; 0xa4
   83f36:	f2c2 0207 	movt	r2, #8199	; 0x2007
		return false;
	}

	if (str_lgt!=0) {
		for( i=0; i<str_lgt; i++) {
			extra_strings_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   83f3a:	f240 0388 	movw	r3, #136	; 0x88
   83f3e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83f42:	7811      	ldrb	r1, [r2, #0]
   83f44:	8059      	strh	r1, [r3, #2]
   83f46:	7850      	ldrb	r0, [r2, #1]
   83f48:	8098      	strh	r0, [r3, #4]
   83f4a:	7891      	ldrb	r1, [r2, #2]
   83f4c:	80d9      	strh	r1, [r3, #6]
   83f4e:	78d0      	ldrb	r0, [r2, #3]
   83f50:	8118      	strh	r0, [r3, #8]
   83f52:	7911      	ldrb	r1, [r2, #4]
   83f54:	8159      	strh	r1, [r3, #10]
   83f56:	7950      	ldrb	r0, [r2, #5]
   83f58:	8198      	strh	r0, [r3, #12]
   83f5a:	7991      	ldrb	r1, [r2, #6]
   83f5c:	81d9      	strh	r1, [r3, #14]
   83f5e:	79d0      	ldrb	r0, [r2, #7]
   83f60:	8218      	strh	r0, [r3, #16]
   83f62:	7a11      	ldrb	r1, [r2, #8]
   83f64:	8259      	strh	r1, [r3, #18]
   83f66:	7a50      	ldrb	r0, [r2, #9]
   83f68:	8298      	strh	r0, [r3, #20]
   83f6a:	7a91      	ldrb	r1, [r2, #10]
   83f6c:	82d9      	strh	r1, [r3, #22]
   83f6e:	7ad0      	ldrb	r0, [r2, #11]
   83f70:	8318      	strh	r0, [r3, #24]
   83f72:	7b12      	ldrb	r2, [r2, #12]
   83f74:	835a      	strh	r2, [r3, #26]
		}
		extra_strings_desc.header.bLength = 2+ (str_lgt)*2;
   83f76:	f04f 011c 	mov.w	r1, #28
   83f7a:	7019      	strb	r1, [r3, #0]
		udd_g_ctrlreq.payload_size = extra_strings_desc.header.bLength;
   83f7c:	f641 4014 	movw	r0, #7188	; 0x1c14
   83f80:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83f84:	8181      	strh	r1, [r0, #12]
		udd_g_ctrlreq.payload = (uint8_t *) &extra_strings_desc;
   83f86:	6083      	str	r3, [r0, #8]
	}

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength) {
   83f88:	88c3      	ldrh	r3, [r0, #6]
   83f8a:	2b1b      	cmp	r3, #27
   83f8c:	d80a      	bhi.n	83fa4 <main_extra_string+0x90>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   83f8e:	f641 4214 	movw	r2, #7188	; 0x1c14
   83f92:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83f96:	8193      	strh	r3, [r2, #12]
	}
	return true;
   83f98:	f04f 0001 	mov.w	r0, #1
   83f9c:	4770      	bx	lr
	case UDI_MSC_STRING_ID:
		str_lgt = sizeof(udi_msc_name)-1;
		str = udi_msc_name;
		break;
	default:
		return false;
   83f9e:	f04f 0000 	mov.w	r0, #0
   83fa2:	4770      	bx	lr

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
   83fa4:	f04f 0001 	mov.w	r0, #1
   83fa8:	4770      	bx	lr
   83faa:	bf00      	nop

00083fac <HardFault_Handler>:
         * Get the appropriate stack pointer, depending on our mode,
         * and use it as the parameter to the C handler. This function
         * will never return
         */

        __asm(  ".syntax unified\n"
   83fac:	2004      	movs	r0, #4
   83fae:	4671      	mov	r1, lr
   83fb0:	4208      	tst	r0, r1
   83fb2:	f000 8004 	beq.w	83fbe <_MSP>
   83fb6:	f3ef 8009 	mrs	r0, PSP
   83fba:	f000 b805 	b.w	83fc8 <HardFault_HandlerC>

00083fbe <_MSP>:
   83fbe:	f3ef 8008 	mrs	r0, MSP
   83fc2:	f000 b801 	b.w	83fc8 <HardFault_HandlerC>
   83fc6:	bf00      	nop

00083fc8 <HardFault_HandlerC>:
 * into local variables for ease of reading.
 * We then read the various Fault Status and Address Registers to help decode
 * cause of the fault.
 * The function ends with a BKPT instruction to force control back into the debugger
 */
void HardFault_HandlerC(unsigned long *hardfault_args){
   83fc8:	b08e      	sub	sp, #56	; 0x38
        volatile unsigned long _DFSR ;
        volatile unsigned long _AFSR ;
        volatile unsigned long _BFAR ;
        volatile unsigned long _MMAR ;

        stacked_r0 = ((unsigned long)hardfault_args[0]) ;
   83fca:	6803      	ldr	r3, [r0, #0]
   83fcc:	930d      	str	r3, [sp, #52]	; 0x34
        stacked_r1 = ((unsigned long)hardfault_args[1]) ;
   83fce:	6841      	ldr	r1, [r0, #4]
   83fd0:	910c      	str	r1, [sp, #48]	; 0x30
        stacked_r2 = ((unsigned long)hardfault_args[2]) ;
   83fd2:	6882      	ldr	r2, [r0, #8]
   83fd4:	920b      	str	r2, [sp, #44]	; 0x2c
        stacked_r3 = ((unsigned long)hardfault_args[3]) ;
   83fd6:	68c3      	ldr	r3, [r0, #12]
   83fd8:	930a      	str	r3, [sp, #40]	; 0x28
        stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   83fda:	6901      	ldr	r1, [r0, #16]
   83fdc:	9109      	str	r1, [sp, #36]	; 0x24
        stacked_lr = ((unsigned long)hardfault_args[5]) ;
   83fde:	6942      	ldr	r2, [r0, #20]
   83fe0:	9208      	str	r2, [sp, #32]
        stacked_pc = ((unsigned long)hardfault_args[6]) ;
   83fe2:	6983      	ldr	r3, [r0, #24]
   83fe4:	9307      	str	r3, [sp, #28]
        stacked_psr = ((unsigned long)hardfault_args[7]) ;
   83fe6:	69c0      	ldr	r0, [r0, #28]
   83fe8:	9006      	str	r0, [sp, #24]

        // Configurable Fault Status Register
        // Consists of MMSR, BFSR and UFSR
        _CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;   
   83fea:	f64e 5128 	movw	r1, #60712	; 0xed28
   83fee:	f2ce 0100 	movt	r1, #57344	; 0xe000
   83ff2:	680a      	ldr	r2, [r1, #0]
   83ff4:	9205      	str	r2, [sp, #20]
                                                                                        
        // Hard Fault Status Register
        _HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   83ff6:	f64e 532c 	movw	r3, #60716	; 0xed2c
   83ffa:	f2ce 0300 	movt	r3, #57344	; 0xe000
   83ffe:	6818      	ldr	r0, [r3, #0]
   84000:	9004      	str	r0, [sp, #16]

        // Debug Fault Status Register
        _DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   84002:	f64e 5130 	movw	r1, #60720	; 0xed30
   84006:	f2ce 0100 	movt	r1, #57344	; 0xe000
   8400a:	680a      	ldr	r2, [r1, #0]
   8400c:	9203      	str	r2, [sp, #12]

        // Auxiliary Fault Status Register
        _AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   8400e:	f64e 533c 	movw	r3, #60732	; 0xed3c
   84012:	f2ce 0300 	movt	r3, #57344	; 0xe000
   84016:	6818      	ldr	r0, [r3, #0]
   84018:	9002      	str	r0, [sp, #8]

        // Read the Fault Address Registers. These may not contain valid values.
        // Check BFARVALID/MMARVALID to see if they are valid values
        // MemManage Fault Address Register
        _MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   8401a:	f64e 5134 	movw	r1, #60724	; 0xed34
   8401e:	f2ce 0100 	movt	r1, #57344	; 0xe000
   84022:	680a      	ldr	r2, [r1, #0]
   84024:	9200      	str	r2, [sp, #0]
        // Bus Fault Address Register
        _BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   84026:	f64e 5338 	movw	r3, #60728	; 0xed38
   8402a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8402e:	6818      	ldr	r0, [r3, #0]
   84030:	9001      	str	r0, [sp, #4]

        __asm("BKPT #0\n") ; // Break into the debugger
   84032:	be00      	bkpt	0x0000
   84034:	e7fe      	b.n	84034 <HardFault_HandlerC+0x6c>
   84036:	bf00      	nop

00084038 <dmac_enable>:
 *
 * \param p_dmac  Pointer to a DMAC peripheral instance.
 */
void dmac_enable(Dmac *p_dmac)
{
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   84038:	f04f 0301 	mov.w	r3, #1
   8403c:	6043      	str	r3, [r0, #4]
   8403e:	4770      	bx	lr

00084040 <dmac_channel_enable>:
 * \param p_dmac Pointer to a DMAC peripheral instance.
 * \param ul_num Channel number.
 */
void dmac_channel_enable(Dmac *p_dmac, uint32_t ul_num)
{
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   84040:	f04f 0301 	mov.w	r3, #1
   84044:	fa03 f101 	lsl.w	r1, r3, r1
   84048:	6281      	str	r1, [r0, #40]	; 0x28
   8404a:	4770      	bx	lr

0008404c <dmac_channel_disable>:
 * \param p_dmac Pointer to a DMAC peripheral instance.
 * \param ul_num Channel number.
 */
void dmac_channel_disable(Dmac *p_dmac, uint32_t ul_num)
{
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   8404c:	f04f 0301 	mov.w	r3, #1
   84050:	fa03 f101 	lsl.w	r1, r3, r1
   84054:	62c1      	str	r1, [r0, #44]	; 0x2c
   84056:	4770      	bx	lr

00084058 <dmac_channel_set_source_addr>:
 * \note This register must be aligned with the source transfer width.
 */
void dmac_channel_set_source_addr(Dmac *p_dmac,
		uint32_t ul_num, uint32_t ul_addr)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   84058:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8405c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   84060:	63c2      	str	r2, [r0, #60]	; 0x3c
   84062:	4770      	bx	lr

00084064 <dmac_channel_set_destination_addr>:
 * \note This register must be aligned with the source transfer width.
 */
void dmac_channel_set_destination_addr(Dmac *p_dmac, uint32_t ul_num,
		uint32_t ul_addr)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   84064:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84068:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   8406c:	6402      	str	r2, [r0, #64]	; 0x40
   8406e:	4770      	bx	lr

00084070 <dmac_channel_set_descriptor_addr>:
 * \param ul_desc     Descriptor address.
 */
void dmac_channel_set_descriptor_addr(Dmac *p_dmac,
		uint32_t ul_num, uint32_t ul_desc)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   84070:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84074:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   84078:	6442      	str	r2, [r0, #68]	; 0x44
   8407a:	4770      	bx	lr

0008407c <dmac_channel_set_ctrlA>:
 * \param ul_num      Channel number.
 * \param ul_ctrlA    Configuration of control A register.
 */
void dmac_channel_set_ctrlA(Dmac *p_dmac, uint32_t ul_num, uint32_t ul_ctrlA)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   8407c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84080:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   84084:	6482      	str	r2, [r0, #72]	; 0x48
   84086:	4770      	bx	lr

00084088 <dmac_channel_set_ctrlB>:
 * \param ul_num      Channel number.
 * \param ul_ctrlB    Configuration of control B register.
 */
void dmac_channel_set_ctrlB(Dmac *p_dmac, uint32_t ul_num, uint32_t ul_ctrlB)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   84088:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8408c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   84090:	64c2      	str	r2, [r0, #76]	; 0x4c
   84092:	4770      	bx	lr

00084094 <dmac_channel_set_configuration>:
 * \param ul_cfg      Configuration of CFG register.
 */
void dmac_channel_set_configuration(Dmac *p_dmac, uint32_t ul_num,
		uint32_t ul_cfg)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   84094:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84098:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   8409c:	6502      	str	r2, [r0, #80]	; 0x50
   8409e:	4770      	bx	lr

000840a0 <dmac_channel_single_buf_transfer_init>:
 * \param ul_num      Channel number.
 * \param p_desc      Pointer to a transfer descriptor.
 */
void dmac_channel_single_buf_transfer_init(Dmac *p_dmac,
		uint32_t ul_num, dma_transfer_descriptor_t *p_desc)
{
   840a0:	b570      	push	{r4, r5, r6, lr}
   840a2:	4604      	mov	r4, r0
   840a4:	460e      	mov	r6, r1
   840a6:	4615      	mov	r5, r2
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   840a8:	6a43      	ldr	r3, [r0, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   840aa:	6812      	ldr	r2, [r2, #0]
   840ac:	f244 0359 	movw	r3, #16473	; 0x4059
   840b0:	f2c0 0308 	movt	r3, #8
   840b4:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   840b6:	4620      	mov	r0, r4
   840b8:	4631      	mov	r1, r6
   840ba:	686a      	ldr	r2, [r5, #4]
   840bc:	f244 0365 	movw	r3, #16485	; 0x4065
   840c0:	f2c0 0308 	movt	r3, #8
   840c4:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   840c6:	4620      	mov	r0, r4
   840c8:	4631      	mov	r1, r6
   840ca:	f04f 0200 	mov.w	r2, #0
   840ce:	f244 0371 	movw	r3, #16497	; 0x4071
   840d2:	f2c0 0308 	movt	r3, #8
   840d6:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   840d8:	4620      	mov	r0, r4
   840da:	4631      	mov	r1, r6
   840dc:	68aa      	ldr	r2, [r5, #8]
   840de:	f244 037d 	movw	r3, #16509	; 0x407d
   840e2:	f2c0 0308 	movt	r3, #8
   840e6:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   840e8:	4620      	mov	r0, r4
   840ea:	4631      	mov	r1, r6
   840ec:	68ea      	ldr	r2, [r5, #12]
   840ee:	f244 0389 	movw	r3, #16521	; 0x4089
   840f2:	f2c0 0308 	movt	r3, #8
   840f6:	4798      	blx	r3
   840f8:	bd70      	pop	{r4, r5, r6, pc}
   840fa:	bf00      	nop

000840fc <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   840fc:	b508      	push	{r3, lr}
	}
#endif

	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_UPLL) {

		pmc_enable_upll_clock();
   840fe:	f246 73d1 	movw	r3, #26577	; 0x67d1
   84102:	f2c0 0308 	movt	r3, #8
   84106:	4798      	blx	r3
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
   84108:	f04f 0000 	mov.w	r0, #0
   8410c:	f646 0175 	movw	r1, #26741	; 0x6875
   84110:	f2c0 0108 	movt	r1, #8
   84114:	4788      	blx	r1
		pmc_enable_udpck();
   84116:	f646 008d 	movw	r0, #26765	; 0x688d
   8411a:	f2c0 0008 	movt	r0, #8
   8411e:	4780      	blx	r0
   84120:	bd08      	pop	{r3, pc}
   84122:	bf00      	nop

00084124 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   84124:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   84126:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   8412a:	f2c0 5001 	movt	r0, #1281	; 0x501
   8412e:	f648 3375 	movw	r3, #35701	; 0x8b75
   84132:	f2c0 0308 	movt	r3, #8
   84136:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   84138:	f04f 0000 	mov.w	r0, #0
   8413c:	f04f 013e 	mov.w	r1, #62	; 0x3e
   84140:	f246 7231 	movw	r2, #26417	; 0x6731
   84144:	f2c0 0208 	movt	r2, #8
   84148:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8414a:	f246 74a1 	movw	r4, #26529	; 0x67a1
   8414e:	f2c0 0408 	movt	r4, #8
   84152:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   84154:	2800      	cmp	r0, #0
   84156:	d0fc      	beq.n	84152 <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   84158:	f246 70b1 	movw	r0, #26545	; 0x67b1
   8415c:	f2c0 0008 	movt	r0, #8
   84160:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   84162:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   84166:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8416a:	f643 7301 	movw	r3, #16129	; 0x3f01
   8416e:	f2c2 030d 	movt	r3, #8205	; 0x200d
   84172:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   84174:	f246 74c1 	movw	r4, #26561	; 0x67c1
   84178:	f2c0 0408 	movt	r4, #8
   8417c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8417e:	2800      	cmp	r0, #0
   84180:	d0fc      	beq.n	8417c <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   84182:	f04f 0010 	mov.w	r0, #16
   84186:	f246 6291 	movw	r2, #26257	; 0x6691
   8418a:	f2c0 0208 	movt	r2, #8
   8418e:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   84190:	f648 10ad 	movw	r0, #35245	; 0x89ad
   84194:	f2c0 0008 	movt	r0, #8
   84198:	4780      	blx	r0
   8419a:	bd10      	pop	{r4, pc}

0008419c <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
   8419c:	f04f 0001 	mov.w	r0, #1
   841a0:	4770      	bx	lr
   841a2:	bf00      	nop

000841a4 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   841a4:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
   841a6:	b928      	cbnz	r0, 841b4 <mem_test_unit_ready+0x10>
   841a8:	f243 3341 	movw	r3, #13121	; 0x3341
   841ac:	f2c0 0308 	movt	r3, #8
   841b0:	4798      	blx	r3
   841b2:	bd08      	pop	{r3, pc}
   841b4:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
   841b8:	bd08      	pop	{r3, pc}
   841ba:	bf00      	nop

000841bc <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   841bc:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
   841be:	b930      	cbnz	r0, 841ce <mem_read_capacity+0x12>
   841c0:	4608      	mov	r0, r1
   841c2:	f243 337d 	movw	r3, #13181	; 0x337d
   841c6:	f2c0 0308 	movt	r3, #8
   841ca:	4798      	blx	r3
   841cc:	bd08      	pop	{r3, pc}
   841ce:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
   841d2:	bd08      	pop	{r3, pc}

000841d4 <mem_unload>:

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
   841d4:	b910      	cbnz	r0, 841dc <mem_unload+0x8>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
   841d6:	f081 0001 	eor.w	r0, r1, #1
   841da:	4770      	bx	lr

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
   841dc:	f04f 0000 	mov.w	r0, #0
#endif

  Ctrl_access_unlock();

  return unloaded;
}
   841e0:	4770      	bx	lr
   841e2:	bf00      	nop

000841e4 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
   841e4:	b508      	push	{r3, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   841e6:	b928      	cbnz	r0, 841f4 <mem_wr_protect+0x10>
   841e8:	f243 33a1 	movw	r3, #13217	; 0x33a1
   841ec:	f2c0 0308 	movt	r3, #8
   841f0:	4798      	blx	r3
   841f2:	bd08      	pop	{r3, pc}
   841f4:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
   841f8:	bd08      	pop	{r3, pc}
   841fa:	bf00      	nop

000841fc <mem_removal>:


bool mem_removal(U8 lun)
{
   841fc:	b508      	push	{r3, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
   841fe:	b928      	cbnz	r0, 8420c <mem_removal+0x10>
   84200:	f243 33bd 	movw	r3, #13245	; 0x33bd
   84204:	f2c0 0308 	movt	r3, #8
   84208:	4798      	blx	r3
   8420a:	bd08      	pop	{r3, pc}
   8420c:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return removal;
}
   84210:	bd08      	pop	{r3, pc}
   84212:	bf00      	nop

00084214 <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
   84214:	b920      	cbnz	r0, 84220 <mem_name+0xc>
   84216:	f64b 7070 	movw	r0, #49008	; 0xbf70
   8421a:	f2c0 0008 	movt	r0, #8
   8421e:	4770      	bx	lr
   84220:	f04f 0000 	mov.w	r0, #0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
   84224:	4770      	bx	lr
   84226:	bf00      	nop

00084228 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
   84228:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  status =
   8422a:	b938      	cbnz	r0, 8423c <memory_2_usb+0x14>
   8422c:	4608      	mov	r0, r1
   8422e:	4611      	mov	r1, r2
   84230:	f243 4389 	movw	r3, #13449	; 0x3489
   84234:	f2c0 0308 	movt	r3, #8
   84238:	4798      	blx	r3
   8423a:	bd08      	pop	{r3, pc}
   8423c:	f04f 0001 	mov.w	r0, #1
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
   84240:	bd08      	pop	{r3, pc}
   84242:	bf00      	nop

00084244 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
   84244:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  status =
   84246:	b938      	cbnz	r0, 84258 <usb_2_memory+0x14>
   84248:	4608      	mov	r0, r1
   8424a:	4611      	mov	r1, r2
   8424c:	f243 5355 	movw	r3, #13653	; 0x3555
   84250:	f2c0 0308 	movt	r3, #8
   84254:	4798      	blx	r3
   84256:	bd08      	pop	{r3, pc}
   84258:	f04f 0001 	mov.w	r0, #1
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
   8425c:	bd08      	pop	{r3, pc}
   8425e:	bf00      	nop

00084260 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   84260:	f241 036c 	movw	r3, #4204	; 0x106c
   84264:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84268:	781a      	ldrb	r2, [r3, #0]
   8426a:	f102 30ff 	add.w	r0, r2, #4294967295
   8426e:	b2c1      	uxtb	r1, r0
   84270:	7019      	strb	r1, [r3, #0]
   84272:	4770      	bx	lr

00084274 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   84274:	f04f 0000 	mov.w	r0, #0
   84278:	4770      	bx	lr
   8427a:	bf00      	nop

0008427c <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   8427c:	f04f 0000 	mov.w	r0, #0
   84280:	4770      	bx	lr
   84282:	bf00      	nop

00084284 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
   84284:	4770      	bx	lr
   84286:	bf00      	nop

00084288 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
   84288:	b530      	push	{r4, r5, lr}
   8428a:	b083      	sub	sp, #12

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   8428c:	f241 0380 	movw	r3, #4224	; 0x1080
   84290:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84294:	7818      	ldrb	r0, [r3, #0]
   84296:	2800      	cmp	r0, #0
   84298:	f040 80df 	bne.w	8445a <udi_cdc_tx_send+0x1d2>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   8429c:	f647 510d 	movw	r1, #32013	; 0x7d0d
   842a0:	f2c0 0108 	movt	r1, #8
   842a4:	4788      	blx	r1
   842a6:	b160      	cbz	r0, 842c2 <udi_cdc_tx_send+0x3a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   842a8:	f241 0474 	movw	r4, #4212	; 0x1074
   842ac:	f2c2 0407 	movt	r4, #8199	; 0x2007
   842b0:	8824      	ldrh	r4, [r4, #0]
   842b2:	f647 5071 	movw	r0, #32113	; 0x7d71
   842b6:	f2c0 0008 	movt	r0, #8
   842ba:	4780      	blx	r0
   842bc:	4284      	cmp	r4, r0
   842be:	d10d      	bne.n	842dc <udi_cdc_tx_send+0x54>
   842c0:	e0cb      	b.n	8445a <udi_cdc_tx_send+0x1d2>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   842c2:	f241 0274 	movw	r2, #4212	; 0x1074
   842c6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   842ca:	8814      	ldrh	r4, [r2, #0]
   842cc:	f647 5361 	movw	r3, #32097	; 0x7d61
   842d0:	f2c0 0308 	movt	r3, #8
   842d4:	4798      	blx	r3
   842d6:	4284      	cmp	r4, r0
   842d8:	f000 80bf 	beq.w	8445a <udi_cdc_tx_send+0x1d2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   842dc:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   842e0:	f1d5 0501 	rsbs	r5, r5, #1
   842e4:	bf38      	it	cc
   842e6:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   842e8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   842ea:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   842ee:	f240 2190 	movw	r1, #656	; 0x290
   842f2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   842f6:	f04f 0200 	mov.w	r2, #0
   842fa:	700a      	strb	r2, [r1, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   842fc:	f640 4360 	movw	r3, #3168	; 0xc60
   84300:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84304:	781c      	ldrb	r4, [r3, #0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   84306:	f640 4064 	movw	r0, #3172	; 0xc64
   8430a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8430e:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
   84312:	bb79      	cbnz	r1, 84374 <udi_cdc_tx_send+0xec>
		sof_zlp_counter++;
   84314:	f241 439c 	movw	r3, #5276	; 0x149c
   84318:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8431c:	881a      	ldrh	r2, [r3, #0]
   8431e:	f102 0201 	add.w	r2, r2, #1
   84322:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   84324:	f647 500d 	movw	r0, #32013	; 0x7d0d
   84328:	f2c0 0008 	movt	r0, #8
   8432c:	4780      	blx	r0
   8432e:	b930      	cbnz	r0, 8433e <udi_cdc_tx_send+0xb6>
   84330:	f241 419c 	movw	r1, #5276	; 0x149c
   84334:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84338:	880b      	ldrh	r3, [r1, #0]
   8433a:	2b63      	cmp	r3, #99	; 0x63
   8433c:	d90d      	bls.n	8435a <udi_cdc_tx_send+0xd2>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   8433e:	f647 520d 	movw	r2, #32013	; 0x7d0d
   84342:	f2c0 0208 	movt	r2, #8
   84346:	4790      	blx	r2
   84348:	b1a0      	cbz	r0, 84374 <udi_cdc_tx_send+0xec>
   8434a:	f241 409c 	movw	r0, #5276	; 0x149c
   8434e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84352:	8801      	ldrh	r1, [r0, #0]
   84354:	f5b1 7f48 	cmp.w	r1, #800	; 0x320
   84358:	d20c      	bcs.n	84374 <udi_cdc_tx_send+0xec>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8435a:	2d00      	cmp	r5, #0
   8435c:	d07d      	beq.n	8445a <udi_cdc_tx_send+0x1d2>
		cpu_irq_enable();
   8435e:	f240 2390 	movw	r3, #656	; 0x290
   84362:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84366:	f04f 0201 	mov.w	r2, #1
   8436a:	701a      	strb	r2, [r3, #0]
   8436c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   84370:	b662      	cpsie	i
   84372:	e072      	b.n	8445a <udi_cdc_tx_send+0x1d2>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   84374:	f241 439c 	movw	r3, #5276	; 0x149c
   84378:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8437c:	f04f 0200 	mov.w	r2, #0
   84380:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   84382:	f241 4094 	movw	r0, #5268	; 0x1494
   84386:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8438a:	7801      	ldrb	r1, [r0, #0]
   8438c:	b949      	cbnz	r1, 843a2 <udi_cdc_tx_send+0x11a>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8438e:	4294      	cmp	r4, r2
   84390:	bf14      	ite	ne
   84392:	2200      	movne	r2, #0
   84394:	2201      	moveq	r2, #1
   84396:	f640 4360 	movw	r3, #3168	; 0xc60
   8439a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8439e:	701a      	strb	r2, [r3, #0]
   843a0:	e003      	b.n	843aa <udi_cdc_tx_send+0x122>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   843a2:	f1d4 0401 	rsbs	r4, r4, #1
   843a6:	bf38      	it	cc
   843a8:	2400      	movcc	r4, #0
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   843aa:	f241 0080 	movw	r0, #4224	; 0x1080
   843ae:	f2c2 0007 	movt	r0, #8199	; 0x2007
   843b2:	f04f 0201 	mov.w	r2, #1
   843b6:	7002      	strb	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   843b8:	b13d      	cbz	r5, 843ca <udi_cdc_tx_send+0x142>
		cpu_irq_enable();
   843ba:	f240 2590 	movw	r5, #656	; 0x290
   843be:	f2c2 0507 	movt	r5, #8199	; 0x2007
   843c2:	702a      	strb	r2, [r5, #0]
   843c4:	f3bf 8f5f 	dmb	sy
   843c8:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   843ca:	4625      	mov	r5, r4
   843cc:	f640 4164 	movw	r1, #3172	; 0xc64
   843d0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   843d4:	f831 4014 	ldrh.w	r4, [r1, r4, lsl #1]
   843d8:	f5b4 7400 	subs.w	r4, r4, #512	; 0x200
   843dc:	bf18      	it	ne
   843de:	2401      	movne	r4, #1
	if (b_short_packet) {
   843e0:	b1dc      	cbz	r4, 8441a <udi_cdc_tx_send+0x192>
		if (udd_is_high_speed()) {
   843e2:	f647 520d 	movw	r2, #32013	; 0x7d0d
   843e6:	f2c0 0208 	movt	r2, #8
   843ea:	4790      	blx	r2
   843ec:	b150      	cbz	r0, 84404 <udi_cdc_tx_send+0x17c>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   843ee:	f647 5071 	movw	r0, #32113	; 0x7d71
   843f2:	f2c0 0008 	movt	r0, #8
   843f6:	4780      	blx	r0
   843f8:	f241 0274 	movw	r2, #4212	; 0x1074
   843fc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84400:	8010      	strh	r0, [r2, #0]
   84402:	e011      	b.n	84428 <udi_cdc_tx_send+0x1a0>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   84404:	f647 5161 	movw	r1, #32097	; 0x7d61
   84408:	f2c0 0108 	movt	r1, #8
   8440c:	4788      	blx	r1
   8440e:	f241 0374 	movw	r3, #4212	; 0x1074
   84412:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84416:	8018      	strh	r0, [r3, #0]
   84418:	e006      	b.n	84428 <udi_cdc_tx_send+0x1a0>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   8441a:	f241 0374 	movw	r3, #4212	; 0x1074
   8441e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84422:	f04f 0000 	mov.w	r0, #0
   84426:	8018      	strh	r0, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   84428:	f640 4164 	movw	r1, #3172	; 0xc64
   8442c:	f2c2 0107 	movt	r1, #8199	; 0x2007
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
   84430:	f831 3015 	ldrh.w	r3, [r1, r5, lsl #1]
   84434:	f244 4075 	movw	r0, #17525	; 0x4475
   84438:	f2c0 0008 	movt	r0, #8
   8443c:	9000      	str	r0, [sp, #0]
   8443e:	f04f 0084 	mov.w	r0, #132	; 0x84
   84442:	4621      	mov	r1, r4
   84444:	f640 4468 	movw	r4, #3176	; 0xc68
   84448:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8444c:	eb04 2245 	add.w	r2, r4, r5, lsl #9
   84450:	f248 042d 	movw	r4, #32813	; 0x802d
   84454:	f2c0 0408 	movt	r4, #8
   84458:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   8445a:	b003      	add	sp, #12
   8445c:	bd30      	pop	{r4, r5, pc}
   8445e:	bf00      	nop

00084460 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
   84460:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
   84462:	f04f 0000 	mov.w	r0, #0
   84466:	f244 2389 	movw	r3, #17033	; 0x4289
   8446a:	f2c0 0308 	movt	r3, #8
   8446e:	4798      	blx	r3
   84470:	bd08      	pop	{r3, pc}
   84472:	bf00      	nop

00084474 <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   84474:	b508      	push	{r3, lr}
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   84476:	b9e8      	cbnz	r0, 844b4 <udi_cdc_data_sent+0x40>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   84478:	f640 4360 	movw	r3, #3168	; 0xc60
   8447c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84480:	7819      	ldrb	r1, [r3, #0]
   84482:	f1d1 0101 	rsbs	r1, r1, #1
   84486:	bf38      	it	cc
   84488:	2100      	movcc	r1, #0
   8448a:	f640 4364 	movw	r3, #3172	; 0xc64
   8448e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84492:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   84496:	f241 4194 	movw	r1, #5268	; 0x1494
   8449a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8449e:	7008      	strb	r0, [r1, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   844a0:	f241 0280 	movw	r2, #4224	; 0x1080
   844a4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   844a8:	7010      	strb	r0, [r2, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
   844aa:	f244 2389 	movw	r3, #17033	; 0x4289
   844ae:	f2c0 0308 	movt	r3, #8
   844b2:	4798      	blx	r3
   844b4:	bd08      	pop	{r3, pc}
   844b6:	bf00      	nop

000844b8 <udi_cdc_comm_setup>:
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
}

bool udi_cdc_comm_setup(void)
{
   844b8:	b508      	push	{r3, lr}
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
   844ba:	f641 4314 	movw	r3, #7188	; 0x1c14
   844be:	f2c2 0307 	movt	r3, #8199	; 0x2007
   844c2:	7818      	ldrb	r0, [r3, #0]
   844c4:	f010 0f80 	tst.w	r0, #128	; 0x80
   844c8:	d020      	beq.n	8450c <udi_cdc_comm_setup+0x54>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   844ca:	f000 0160 	and.w	r1, r0, #96	; 0x60
   844ce:	2920      	cmp	r1, #32
   844d0:	d156      	bne.n	84580 <udi_cdc_comm_setup+0xc8>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   844d2:	f641 4214 	movw	r2, #7188	; 0x1c14
   844d6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   844da:	7853      	ldrb	r3, [r2, #1]
   844dc:	2b21      	cmp	r3, #33	; 0x21
   844de:	d152      	bne.n	84586 <udi_cdc_comm_setup+0xce>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   844e0:	f641 4014 	movw	r0, #7188	; 0x1c14
   844e4:	f2c2 0007 	movt	r0, #8199	; 0x2007
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   844e8:	88c1      	ldrh	r1, [r0, #6]
   844ea:	2907      	cmp	r1, #7
   844ec:	d14e      	bne.n	8458c <udi_cdc_comm_setup+0xd4>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
   844ee:	f641 4314 	movw	r3, #7188	; 0x1c14
   844f2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   844f6:	f640 4254 	movw	r2, #3156	; 0xc54
   844fa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   844fe:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   84500:	f04f 0007 	mov.w	r0, #7
   84504:	8198      	strh	r0, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   84506:	f04f 0001 	mov.w	r0, #1
   8450a:	bd08      	pop	{r3, pc}
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8450c:	f000 0160 	and.w	r1, r0, #96	; 0x60
   84510:	2920      	cmp	r1, #32
   84512:	d13e      	bne.n	84592 <udi_cdc_comm_setup+0xda>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   84514:	f641 4214 	movw	r2, #7188	; 0x1c14
   84518:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8451c:	7853      	ldrb	r3, [r2, #1]
   8451e:	2b20      	cmp	r3, #32
   84520:	d002      	beq.n	84528 <udi_cdc_comm_setup+0x70>
   84522:	2b22      	cmp	r3, #34	; 0x22
   84524:	d138      	bne.n	84598 <udi_cdc_comm_setup+0xe0>
   84526:	e01a      	b.n	8455e <udi_cdc_comm_setup+0xa6>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   84528:	f641 4314 	movw	r3, #7188	; 0x1c14
   8452c:	f2c2 0307 	movt	r3, #8199	; 0x2007
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   84530:	88d8      	ldrh	r0, [r3, #6]
   84532:	2807      	cmp	r0, #7
   84534:	d133      	bne.n	8459e <udi_cdc_comm_setup+0xe6>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
   84536:	f641 4114 	movw	r1, #7188	; 0x1c14
   8453a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8453e:	f244 2285 	movw	r2, #17029	; 0x4285
   84542:	f2c0 0208 	movt	r2, #8
   84546:	610a      	str	r2, [r1, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
   84548:	f640 4354 	movw	r3, #3156	; 0xc54
   8454c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84550:	608b      	str	r3, [r1, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   84552:	f04f 0007 	mov.w	r0, #7
   84556:	8188      	strh	r0, [r1, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   84558:	f04f 0001 	mov.w	r0, #1
   8455c:	bd08      	pop	{r3, pc}
			case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
				// According cdc spec 1.1 chapter 6.2.14
				UDI_CDC_SET_DTR_EXT(port, (0 !=
   8455e:	f641 4014 	movw	r0, #7188	; 0x1c14
   84562:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84566:	7881      	ldrb	r1, [r0, #2]
   84568:	f04f 0000 	mov.w	r0, #0
   8456c:	f001 0101 	and.w	r1, r1, #1
   84570:	f643 4289 	movw	r2, #15497	; 0x3c89
   84574:	f2c0 0208 	movt	r2, #8
   84578:	4790      	blx	r2
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
   8457a:	f04f 0001 	mov.w	r0, #1
   8457e:	bd08      	pop	{r3, pc}
			}
		}
	}
	return false;  // request Not supported
   84580:	f04f 0000 	mov.w	r0, #0
   84584:	bd08      	pop	{r3, pc}
   84586:	f04f 0000 	mov.w	r0, #0
   8458a:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   8458c:	f04f 0000 	mov.w	r0, #0
   84590:	bd08      	pop	{r3, pc}
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
   84592:	f04f 0000 	mov.w	r0, #0
   84596:	bd08      	pop	{r3, pc}
   84598:	f04f 0000 	mov.w	r0, #0
   8459c:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   8459e:	f04f 0000 	mov.w	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
   845a2:	bd08      	pop	{r3, pc}

000845a4 <udi_cdc_data_disable>:
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
}

void udi_cdc_data_disable(void)
{
   845a4:	b508      	push	{r3, lr}
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
   845a6:	f640 435c 	movw	r3, #3164	; 0xc5c
   845aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   845ae:	781a      	ldrb	r2, [r3, #0]
   845b0:	f102 30ff 	add.w	r0, r2, #4294967295
   845b4:	b2c1      	uxtb	r1, r0
   845b6:	7019      	strb	r1, [r3, #0]
	port = udi_cdc_nb_data_enabled;
   845b8:	7818      	ldrb	r0, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
   845ba:	f648 4399 	movw	r3, #35993	; 0x8c99
   845be:	f2c0 0308 	movt	r3, #8
   845c2:	4798      	blx	r3
	udi_cdc_data_running = false;
   845c4:	f241 0078 	movw	r0, #4216	; 0x1078
   845c8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   845cc:	f04f 0200 	mov.w	r2, #0
   845d0:	7002      	strb	r2, [r0, #0]
   845d2:	bd08      	pop	{r3, pc}

000845d4 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
   845d4:	b508      	push	{r3, lr}
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
   845d6:	f04f 0000 	mov.w	r0, #0
   845da:	f241 036c 	movw	r3, #4204	; 0x106c
   845de:	f2c2 0307 	movt	r3, #8199	; 0x2007
   845e2:	7018      	strb	r0, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
   845e4:	f241 4198 	movw	r1, #5272	; 0x1498
   845e8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   845ec:	8008      	strh	r0, [r1, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
   845ee:	f241 0384 	movw	r3, #4228	; 0x1084
   845f2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   845f6:	f04f 01a1 	mov.w	r1, #161	; 0xa1
   845fa:	7019      	strb	r1, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   845fc:	f04f 0120 	mov.w	r1, #32
   84600:	7059      	strb	r1, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   84602:	8058      	strh	r0, [r3, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   84604:	8098      	strh	r0, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   84606:	f04f 0102 	mov.w	r1, #2
   8460a:	80d9      	strh	r1, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   8460c:	8118      	strh	r0, [r3, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   8460e:	f640 4354 	movw	r3, #3156	; 0xc54
   84612:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84616:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   8461a:	6019      	str	r1, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   8461c:	7118      	strb	r0, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   8461e:	7158      	strb	r0, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   84620:	f04f 0208 	mov.w	r2, #8
   84624:	719a      	strb	r2, [r3, #6]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
   84626:	f648 4389 	movw	r3, #35977	; 0x8c89
   8462a:	f2c0 0308 	movt	r3, #8
   8462e:	4798      	blx	r3
   84630:	b158      	cbz	r0, 8464a <udi_cdc_comm_enable+0x76>
		return false;
	}
	udi_cdc_nb_comm_enabled++;
   84632:	f241 006c 	movw	r0, #4204	; 0x106c
   84636:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8463a:	7801      	ldrb	r1, [r0, #0]
   8463c:	f101 0101 	add.w	r1, r1, #1
   84640:	b2ca      	uxtb	r2, r1
   84642:	7002      	strb	r2, [r0, #0]
	return true;
   84644:	f04f 0001 	mov.w	r0, #1
   84648:	bd08      	pop	{r3, pc}
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
   8464a:	f04f 0000 	mov.w	r0, #0
	}
	udi_cdc_nb_comm_enabled++;
	return true;
}
   8464e:	bd08      	pop	{r3, pc}

00084650 <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84650:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   84654:	b672      	cpsid	i
   84656:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8465a:	f240 2290 	movw	r2, #656	; 0x290
   8465e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84662:	f04f 0100 	mov.w	r1, #0
   84666:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   84668:	f241 0070 	movw	r0, #4208	; 0x1070
   8466c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84670:	8802      	ldrh	r2, [r0, #0]
   84672:	b290      	uxth	r0, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   84674:	f241 017c 	movw	r1, #4220	; 0x107c
   84678:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8467c:	7809      	ldrb	r1, [r1, #0]
   8467e:	f241 0268 	movw	r2, #4200	; 0x1068
   84682:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84686:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   8468a:	1a08      	subs	r0, r1, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8468c:	b94b      	cbnz	r3, 846a2 <udi_cdc_multi_get_nb_received_data+0x52>
		cpu_irq_enable();
   8468e:	f240 2390 	movw	r3, #656	; 0x290
   84692:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84696:	f04f 0201 	mov.w	r2, #1
   8469a:	701a      	strb	r2, [r3, #0]
   8469c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   846a0:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   846a2:	4770      	bx	lr

000846a4 <udi_cdc_get_nb_received_data>:

iram_size_t udi_cdc_get_nb_received_data(void)
{
   846a4:	b508      	push	{r3, lr}
	return udi_cdc_multi_get_nb_received_data(0);
   846a6:	f04f 0000 	mov.w	r0, #0
   846aa:	f244 6351 	movw	r3, #18001	; 0x4651
   846ae:	f2c0 0308 	movt	r3, #8
   846b2:	4798      	blx	r3
}
   846b4:	bd08      	pop	{r3, pc}
   846b6:	bf00      	nop

000846b8 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   846b8:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   846ba:	f244 6351 	movw	r3, #18001	; 0x4651
   846be:	f2c0 0308 	movt	r3, #8
   846c2:	4798      	blx	r3
}
   846c4:	3000      	adds	r0, #0
   846c6:	bf18      	it	ne
   846c8:	2001      	movne	r0, #1
   846ca:	bd08      	pop	{r3, pc}

000846cc <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
   846cc:	b510      	push	{r4, lr}
   846ce:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   846d0:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   846d4:	f1d3 0001 	rsbs	r0, r3, #1
   846d8:	bf38      	it	cc
   846da:	2000      	movcc	r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   846dc:	b672      	cpsid	i
   846de:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   846e2:	f240 2290 	movw	r2, #656	; 0x290
   846e6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   846ea:	f04f 0100 	mov.w	r1, #0
   846ee:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   846f0:	f241 047c 	movw	r4, #4220	; 0x107c
   846f4:	f2c2 0407 	movt	r4, #8199	; 0x2007
   846f8:	7824      	ldrb	r4, [r4, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   846fa:	f241 4390 	movw	r3, #5264	; 0x1490
   846fe:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84702:	781a      	ldrb	r2, [r3, #0]
   84704:	b96a      	cbnz	r2, 84722 <udi_cdc_rx_start+0x56>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   84706:	f241 0170 	movw	r1, #4208	; 0x1070
   8470a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8470e:	880b      	ldrh	r3, [r1, #0]
   84710:	b29a      	uxth	r2, r3
   84712:	f241 0168 	movw	r1, #4200	; 0x1068
   84716:	f2c2 0107 	movt	r1, #8199	; 0x2007
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
   8471a:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
   8471e:	4293      	cmp	r3, r2
   84720:	d90e      	bls.n	84740 <udi_cdc_rx_start+0x74>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   84722:	2800      	cmp	r0, #0
   84724:	d052      	beq.n	847cc <udi_cdc_rx_start+0x100>
		cpu_irq_enable();
   84726:	f240 2190 	movw	r1, #656	; 0x290
   8472a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8472e:	f04f 0201 	mov.w	r2, #1
   84732:	700a      	strb	r2, [r1, #0]
   84734:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   84738:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   8473a:	f04f 0000 	mov.w	r0, #0
   8473e:	e047      	b.n	847d0 <udi_cdc_rx_start+0x104>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
   84740:	f241 0270 	movw	r2, #4208	; 0x1070
   84744:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84748:	f04f 0100 	mov.w	r1, #0
   8474c:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8474e:	428c      	cmp	r4, r1
   84750:	bf14      	ite	ne
   84752:	2100      	movne	r1, #0
   84754:	2101      	moveq	r1, #1
   84756:	f241 037c 	movw	r3, #4220	; 0x107c
   8475a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8475e:	7019      	strb	r1, [r3, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
   84760:	f241 4290 	movw	r2, #5264	; 0x1490
   84764:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84768:	f04f 0101 	mov.w	r1, #1
   8476c:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8476e:	b138      	cbz	r0, 84780 <udi_cdc_rx_start+0xb4>
		cpu_irq_enable();
   84770:	f240 2090 	movw	r0, #656	; 0x290
   84774:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84778:	7001      	strb	r1, [r0, #0]
   8477a:	f3bf 8f5f 	dmb	sy
   8477e:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
   84780:	f04f 0000 	mov.w	r0, #0
   84784:	f244 62b9 	movw	r2, #18105	; 0x46b9
   84788:	f2c0 0208 	movt	r2, #8
   8478c:	4790      	blx	r2
   8478e:	b130      	cbz	r0, 8479e <udi_cdc_rx_start+0xd2>
		UDI_CDC_RX_NOTIFY(port);
   84790:	f04f 0000 	mov.w	r0, #0
   84794:	f643 41ad 	movw	r1, #15533	; 0x3cad
   84798:	f2c0 0108 	movt	r1, #8
   8479c:	4788      	blx	r1
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
   8479e:	f244 70d5 	movw	r0, #18389	; 0x47d5
   847a2:	f2c0 0008 	movt	r0, #8
   847a6:	9000      	str	r0, [sp, #0]
   847a8:	f04f 0005 	mov.w	r0, #5
   847ac:	f04f 0101 	mov.w	r1, #1
   847b0:	f241 0390 	movw	r3, #4240	; 0x1090
   847b4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   847b8:	eb03 2244 	add.w	r2, r3, r4, lsl #9
   847bc:	f44f 7300 	mov.w	r3, #512	; 0x200
   847c0:	f248 042d 	movw	r4, #32813	; 0x802d
   847c4:	f2c0 0408 	movt	r4, #8
   847c8:	47a0      	blx	r4
   847ca:	e001      	b.n	847d0 <udi_cdc_rx_start+0x104>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   847cc:	f04f 0000 	mov.w	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
   847d0:	b002      	add	sp, #8
   847d2:	bd10      	pop	{r4, pc}

000847d4 <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   847d4:	b510      	push	{r4, lr}
   847d6:	b082      	sub	sp, #8
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   847d8:	bb88      	cbnz	r0, 8483e <udi_cdc_data_received+0x6a>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   847da:	f241 037c 	movw	r3, #4220	; 0x107c
   847de:	f2c2 0307 	movt	r3, #8199	; 0x2007
   847e2:	7818      	ldrb	r0, [r3, #0]
   847e4:	f1d0 0301 	rsbs	r3, r0, #1
   847e8:	bf38      	it	cc
   847ea:	2300      	movcc	r3, #0
	if (!n) {
   847ec:	b9a9      	cbnz	r1, 8481a <udi_cdc_data_received+0x46>
		udd_ep_run( ep,
   847ee:	f244 74d5 	movw	r4, #18389	; 0x47d5
   847f2:	f2c0 0408 	movt	r4, #8
   847f6:	9400      	str	r4, [sp, #0]
   847f8:	4610      	mov	r0, r2
   847fa:	f04f 0101 	mov.w	r1, #1
   847fe:	f241 0290 	movw	r2, #4240	; 0x1090
   84802:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84806:	eb02 2243 	add.w	r2, r2, r3, lsl #9
   8480a:	f44f 7300 	mov.w	r3, #512	; 0x200
   8480e:	f248 042d 	movw	r4, #32813	; 0x802d
   84812:	f2c0 0408 	movt	r4, #8
   84816:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
   84818:	e011      	b.n	8483e <udi_cdc_data_received+0x6a>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   8481a:	f241 0268 	movw	r2, #4200	; 0x1068
   8481e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84822:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   84826:	f04f 0000 	mov.w	r0, #0
   8482a:	f241 4190 	movw	r1, #5264	; 0x1490
   8482e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84832:	7008      	strb	r0, [r1, #0]
	udi_cdc_rx_start(port);
   84834:	f244 63cd 	movw	r3, #18125	; 0x46cd
   84838:	f2c0 0308 	movt	r3, #8
   8483c:	4798      	blx	r3
}
   8483e:	b002      	add	sp, #8
   84840:	bd10      	pop	{r4, pc}
   84842:	bf00      	nop

00084844 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
   84844:	b538      	push	{r3, r4, r5, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
   84846:	f04f 0400 	mov.w	r4, #0
   8484a:	f640 435c 	movw	r3, #3164	; 0xc5c
   8484e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84852:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
   84854:	f241 0080 	movw	r0, #4224	; 0x1080
   84858:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8485c:	7004      	strb	r4, [r0, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   8485e:	f241 4194 	movw	r1, #5268	; 0x1494
   84862:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84866:	700c      	strb	r4, [r1, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   84868:	f640 4260 	movw	r2, #3168	; 0xc60
   8486c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84870:	7014      	strb	r4, [r2, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   84872:	f640 4364 	movw	r3, #3172	; 0xc64
   84876:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8487a:	4625      	mov	r5, r4
   8487c:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   8487e:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   84880:	f241 0074 	movw	r0, #4212	; 0x1074
   84884:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84888:	8004      	strh	r4, [r0, #0]
	udi_cdc_tx_send(port);
   8488a:	4620      	mov	r0, r4
   8488c:	f244 2189 	movw	r1, #17033	; 0x4289
   84890:	f2c0 0108 	movt	r1, #8
   84894:	4788      	blx	r1

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
   84896:	f241 4290 	movw	r2, #5264	; 0x1490
   8489a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8489e:	7014      	strb	r4, [r2, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   848a0:	f241 037c 	movw	r3, #4220	; 0x107c
   848a4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   848a8:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   848aa:	f241 0068 	movw	r0, #4200	; 0x1068
   848ae:	f2c2 0007 	movt	r0, #8199	; 0x2007
   848b2:	8004      	strh	r4, [r0, #0]
	udi_cdc_rx_pos[port] = 0;
   848b4:	f241 0170 	movw	r1, #4208	; 0x1070
   848b8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   848bc:	800c      	strh	r4, [r1, #0]
	if (!udi_cdc_rx_start(port)) {
   848be:	4620      	mov	r0, r4
   848c0:	f244 62cd 	movw	r2, #18125	; 0x46cd
   848c4:	f2c0 0208 	movt	r2, #8
   848c8:	4790      	blx	r2
   848ca:	b198      	cbz	r0, 848f4 <udi_cdc_data_enable+0xb0>
		return false;
	}
	udi_cdc_nb_data_enabled++;
   848cc:	f640 435c 	movw	r3, #3164	; 0xc5c
   848d0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   848d4:	7818      	ldrb	r0, [r3, #0]
   848d6:	f100 0001 	add.w	r0, r0, #1
   848da:	b2c1      	uxtb	r1, r0
   848dc:	7019      	strb	r1, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   848de:	781a      	ldrb	r2, [r3, #0]
   848e0:	2a01      	cmp	r2, #1
   848e2:	d10a      	bne.n	848fa <udi_cdc_data_enable+0xb6>
		udi_cdc_data_running = true;
   848e4:	f04f 0001 	mov.w	r0, #1
   848e8:	f241 0378 	movw	r3, #4216	; 0x1078
   848ec:	f2c2 0307 	movt	r3, #8199	; 0x2007
   848f0:	7018      	strb	r0, [r3, #0]
   848f2:	bd38      	pop	{r3, r4, r5, pc}
	udi_cdc_rx_trans_ongoing[port] = false;
	udi_cdc_rx_buf_sel[port] = 0;
	udi_cdc_rx_buf_nb[port][0] = 0;
	udi_cdc_rx_pos[port] = 0;
	if (!udi_cdc_rx_start(port)) {
		return false;
   848f4:	f04f 0000 	mov.w	r0, #0
   848f8:	bd38      	pop	{r3, r4, r5, pc}
	}
	udi_cdc_nb_data_enabled++;
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
		udi_cdc_data_running = true;
	}
	return true;
   848fa:	f04f 0001 	mov.w	r0, #1
}
   848fe:	bd38      	pop	{r3, r4, r5, pc}

00084900 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   84900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84904:	b083      	sub	sp, #12
   84906:	4615      	mov	r5, r2
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
   84908:	4688      	mov	r8, r1
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8490a:	f240 2790 	movw	r7, #656	; 0x290
   8490e:	f2c2 0707 	movt	r7, #8199	; 0x2007
   84912:	f04f 0b00 	mov.w	fp, #0
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   84916:	f241 0670 	movw	r6, #4208	; 0x1070
   8491a:	f2c2 0607 	movt	r6, #8199	; 0x2007
	buf_sel = udi_cdc_rx_buf_sel[port];
   8491e:	f241 0a7c 	movw	sl, #4220	; 0x107c
   84922:	f2c2 0a07 	movt	sl, #8199	; 0x2007
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
   84926:	f241 0968 	movw	r9, #4200	; 0x1068
   8492a:	f2c2 0907 	movt	r9, #8199	; 0x2007
	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   8492e:	f241 0390 	movw	r3, #4240	; 0x1090
   84932:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84936:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84938:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8493c:	b672      	cpsid	i
   8493e:	f3bf 8f5f 	dmb	sy
   84942:	f887 b000 	strb.w	fp, [r7]
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   84946:	8830      	ldrh	r0, [r6, #0]
   84948:	b283      	uxth	r3, r0
	buf_sel = udi_cdc_rx_buf_sel[port];
   8494a:	f89a 1000 	ldrb.w	r1, [sl]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8494e:	b92a      	cbnz	r2, 8495c <udi_cdc_multi_read_buf+0x5c>
		cpu_irq_enable();
   84950:	f04f 0401 	mov.w	r4, #1
   84954:	703c      	strb	r4, [r7, #0]
   84956:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8495a:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
   8495c:	f839 4011 	ldrh.w	r4, [r9, r1, lsl #1]
   84960:	42a3      	cmp	r3, r4
   84962:	d307      	bcc.n	84974 <udi_cdc_multi_read_buf+0x74>
		if (!udi_cdc_data_running) {
   84964:	f241 0078 	movw	r0, #4216	; 0x1078
   84968:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8496c:	7801      	ldrb	r1, [r0, #0]
   8496e:	2900      	cmp	r1, #0
   84970:	d1e2      	bne.n	84938 <udi_cdc_multi_read_buf+0x38>
   84972:	e01d      	b.n	849b0 <udi_cdc_multi_read_buf+0xb0>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   84974:	1ae4      	subs	r4, r4, r3
   84976:	42a5      	cmp	r5, r4
   84978:	bf38      	it	cc
   8497a:	462c      	movcc	r4, r5
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   8497c:	eb03 2241 	add.w	r2, r3, r1, lsl #9
   84980:	4640      	mov	r0, r8
   84982:	9b01      	ldr	r3, [sp, #4]
   84984:	1899      	adds	r1, r3, r2
   84986:	4622      	mov	r2, r4
   84988:	f249 332d 	movw	r3, #37677	; 0x932d
   8498c:	f2c0 0308 	movt	r3, #8
   84990:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   84992:	8830      	ldrh	r0, [r6, #0]
   84994:	1821      	adds	r1, r4, r0
   84996:	b28a      	uxth	r2, r1
   84998:	8032      	strh	r2, [r6, #0]
	ptr_buf += copy_nb;
   8499a:	44a0      	add	r8, r4
	size -= copy_nb;
   8499c:	1b2d      	subs	r5, r5, r4
	udi_cdc_rx_start(port);
   8499e:	f04f 0000 	mov.w	r0, #0
   849a2:	f244 63cd 	movw	r3, #18125	; 0x46cd
   849a6:	f2c0 0308 	movt	r3, #8
   849aa:	4798      	blx	r3

	if (size) {
   849ac:	2d00      	cmp	r5, #0
   849ae:	d1c3      	bne.n	84938 <udi_cdc_multi_read_buf+0x38>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   849b0:	4628      	mov	r0, r5
   849b2:	b003      	add	sp, #12
   849b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000849b8 <udi_cdc_read_buf>:

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
   849b8:	b508      	push	{r3, lr}
   849ba:	4603      	mov	r3, r0
   849bc:	460a      	mov	r2, r1
	return udi_cdc_multi_read_buf(0, buf, size);
   849be:	f04f 0000 	mov.w	r0, #0
   849c2:	4619      	mov	r1, r3
   849c4:	f644 1301 	movw	r3, #18689	; 0x4901
   849c8:	f2c0 0308 	movt	r3, #8
   849cc:	4798      	blx	r3
}
   849ce:	bd08      	pop	{r3, pc}

000849d0 <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
   849d0:	b410      	push	{r4}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   849d2:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   849d6:	b672      	cpsid	i
   849d8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   849dc:	f240 2390 	movw	r3, #656	; 0x290
   849e0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   849e4:	f04f 0200 	mov.w	r2, #0
   849e8:	701a      	strb	r2, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   849ea:	f640 4060 	movw	r0, #3168	; 0xc60
   849ee:	f2c2 0007 	movt	r0, #8199	; 0x2007
   849f2:	7801      	ldrb	r1, [r0, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   849f4:	f640 4264 	movw	r2, #3172	; 0xc64
   849f8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   849fc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
   84a00:	f1d1 0101 	rsbs	r1, r1, #1
   84a04:	bf38      	it	cc
   84a06:	2100      	movcc	r1, #0
   84a08:	b2c8      	uxtb	r0, r1
   84a0a:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   84a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84a12:	d11b      	bne.n	84a4c <udi_cdc_multi_get_free_tx_buffer+0x7c>
		if ((!udi_cdc_tx_trans_ongoing[port])
   84a14:	f241 0280 	movw	r2, #4224	; 0x1080
   84a18:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84a1c:	7812      	ldrb	r2, [r2, #0]
   84a1e:	b9aa      	cbnz	r2, 84a4c <udi_cdc_multi_get_free_tx_buffer+0x7c>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   84a20:	f241 4294 	movw	r2, #5268	; 0x1494
   84a24:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84a28:	7812      	ldrb	r2, [r2, #0]
   84a2a:	b97a      	cbnz	r2, 84a4c <udi_cdc_multi_get_free_tx_buffer+0x7c>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
   84a2c:	f241 4394 	movw	r3, #5268	; 0x1494
   84a30:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84a34:	f04f 0001 	mov.w	r0, #1
   84a38:	7018      	strb	r0, [r3, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   84a3a:	f640 4260 	movw	r2, #3168	; 0xc60
   84a3e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84a42:	7011      	strb	r1, [r2, #0]
			buf_sel_nb = 0;
			buf_nosel_nb = UDI_CDC_TX_BUFFERS;
   84a44:	f44f 7000 	mov.w	r0, #512	; 0x200
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
   84a48:	f04f 0300 	mov.w	r3, #0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   84a4c:	b94c      	cbnz	r4, 84a62 <udi_cdc_multi_get_free_tx_buffer+0x92>
		cpu_irq_enable();
   84a4e:	f240 2290 	movw	r2, #656	; 0x290
   84a52:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84a56:	f04f 0101 	mov.w	r1, #1
   84a5a:	7011      	strb	r1, [r2, #0]
   84a5c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   84a60:	b662      	cpsie	i
iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
   84a62:	18c0      	adds	r0, r0, r3
		}
	}
	cpu_irq_restore(flags);

	return (UDI_CDC_TX_BUFFERS - buf_sel_nb) + (UDI_CDC_TX_BUFFERS - buf_nosel_nb);
}
   84a64:	f5c0 6080 	rsb	r0, r0, #1024	; 0x400
   84a68:	bc10      	pop	{r4}
   84a6a:	4770      	bx	lr

00084a6c <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   84a6c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   84a6e:	f644 13d1 	movw	r3, #18897	; 0x49d1
   84a72:	f2c0 0308 	movt	r3, #8
   84a76:	4798      	blx	r3
}
   84a78:	3000      	adds	r0, #0
   84a7a:	bf18      	it	ne
   84a7c:	2001      	movne	r0, #1
   84a7e:	bd08      	pop	{r3, pc}

00084a80 <udi_cdc_multi_write_buf>:
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
   84a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84a84:	b083      	sub	sp, #12
   84a86:	4615      	mov	r5, r2

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
   84a88:	f640 4354 	movw	r3, #3156	; 0xc54
   84a8c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84a90:	7998      	ldrb	r0, [r3, #6]
   84a92:	2809      	cmp	r0, #9
		size *=2;
   84a94:	bf08      	it	eq
   84a96:	0055      	lsleq	r5, r2, #1
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
   84a98:	4689      	mov	r9, r1
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   84a9a:	f04f 0800 	mov.w	r8, #0
		if (!udi_cdc_data_running) {
   84a9e:	f241 0178 	movw	r1, #4216	; 0x1078
   84aa2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84aa6:	9101      	str	r1, [sp, #4]
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   84aa8:	f240 2290 	movw	r2, #656	; 0x290
   84aac:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84ab0:	9200      	str	r2, [sp, #0]
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   84ab2:	4640      	mov	r0, r8
   84ab4:	f644 236d 	movw	r3, #19053	; 0x4a6d
   84ab8:	f2c0 0308 	movt	r3, #8
   84abc:	4798      	blx	r3
   84abe:	b920      	cbnz	r0, 84aca <udi_cdc_multi_write_buf+0x4a>
		if (!udi_cdc_data_running) {
   84ac0:	9801      	ldr	r0, [sp, #4]
   84ac2:	7803      	ldrb	r3, [r0, #0]
   84ac4:	2b00      	cmp	r3, #0
   84ac6:	d1f4      	bne.n	84ab2 <udi_cdc_multi_write_buf+0x32>
   84ac8:	e035      	b.n	84b36 <udi_cdc_multi_write_buf+0xb6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84aca:	f3ef 8b10 	mrs	fp, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   84ace:	b672      	cpsid	i
   84ad0:	f3bf 8f5f 	dmb	sy
   84ad4:	9c00      	ldr	r4, [sp, #0]
   84ad6:	f884 8000 	strb.w	r8, [r4]
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   84ada:	f640 4660 	movw	r6, #3168	; 0xc60
   84ade:	f2c2 0607 	movt	r6, #8199	; 0x2007
   84ae2:	7836      	ldrb	r6, [r6, #0]
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   84ae4:	f640 4a64 	movw	sl, #3172	; 0xc64
   84ae8:	f2c2 0a07 	movt	sl, #8199	; 0x2007
   84aec:	f83a 7016 	ldrh.w	r7, [sl, r6, lsl #1]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
   84af0:	f5c7 7400 	rsb	r4, r7, #512	; 0x200
   84af4:	42a5      	cmp	r5, r4
   84af6:	bf38      	it	cc
   84af8:	462c      	movcc	r4, r5
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
   84afa:	eb07 2146 	add.w	r1, r7, r6, lsl #9
   84afe:	f640 4068 	movw	r0, #3176	; 0xc68
   84b02:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84b06:	1840      	adds	r0, r0, r1
   84b08:	4649      	mov	r1, r9
   84b0a:	4622      	mov	r2, r4
   84b0c:	f249 332d 	movw	r3, #37677	; 0x932d
   84b10:	f2c0 0308 	movt	r3, #8
   84b14:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
   84b16:	193f      	adds	r7, r7, r4
   84b18:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   84b1c:	f1bb 0f00 	cmp.w	fp, #0
   84b20:	d106      	bne.n	84b30 <udi_cdc_multi_write_buf+0xb0>
		cpu_irq_enable();
   84b22:	f04f 0101 	mov.w	r1, #1
   84b26:	9a00      	ldr	r2, [sp, #0]
   84b28:	7011      	strb	r1, [r2, #0]
   84b2a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   84b2e:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
   84b30:	44a1      	add	r9, r4
	size -= copy_nb;

	if (size) {
   84b32:	1b2d      	subs	r5, r5, r4
   84b34:	d1bd      	bne.n	84ab2 <udi_cdc_multi_write_buf+0x32>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
}
   84b36:	4628      	mov	r0, r5
   84b38:	b003      	add	sp, #12
   84b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84b3e:	bf00      	nop

00084b40 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
   84b40:	b508      	push	{r3, lr}
   84b42:	4603      	mov	r3, r0
   84b44:	460a      	mov	r2, r1
	return udi_cdc_multi_write_buf(0, buf, size);
   84b46:	f04f 0000 	mov.w	r0, #0
   84b4a:	4619      	mov	r1, r3
   84b4c:	f644 2381 	movw	r3, #19073	; 0x4a81
   84b50:	f2c0 0308 	movt	r3, #8
   84b54:	4798      	blx	r3
}
   84b56:	bd08      	pop	{r3, pc}

00084b58 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
   84b58:	f04f 0000 	mov.w	r0, #0
   84b5c:	4770      	bx	lr
   84b5e:	bf00      	nop

00084b60 <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
   84b60:	3000      	adds	r0, #0
   84b62:	bf18      	it	ne
   84b64:	2001      	movne	r0, #1
   84b66:	f641 4311 	movw	r3, #7185	; 0x1c11
   84b6a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84b6e:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
   84b70:	f240 2104 	movw	r1, #516	; 0x204
   84b74:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84b78:	f04f 0201 	mov.w	r2, #1
   84b7c:	700a      	strb	r2, [r1, #0]
   84b7e:	4770      	bx	lr

00084b80 <udi_msc_clear_sense>:
//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
   84b80:	f241 42e4 	movw	r2, #5348	; 0x14e4
   84b84:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84b88:	f04f 0300 	mov.w	r3, #0
   84b8c:	4611      	mov	r1, r2
   84b8e:	f841 3b04 	str.w	r3, [r1], #4
   84b92:	6053      	str	r3, [r2, #4]
   84b94:	f101 0104 	add.w	r1, r1, #4
   84b98:	f841 3b04 	str.w	r3, [r1], #4
   84b9c:	f841 3b04 	str.w	r3, [r1], #4
   84ba0:	800b      	strh	r3, [r1, #0]
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
   84ba2:	f04f 00f0 	mov.w	r0, #240	; 0xf0
   84ba6:	7010      	strb	r0, [r2, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
   84ba8:	f04f 030a 	mov.w	r3, #10
   84bac:	71d3      	strb	r3, [r2, #7]
   84bae:	4770      	bx	lr

00084bb0 <udi_msc_sense_pass>:
	udi_msc_sense.AddSenseCode = add_sense >> 8;
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
}

static void udi_msc_sense_pass(void)
{
   84bb0:	b508      	push	{r3, lr}
	udi_msc_clear_sense();
   84bb2:	f644 3381 	movw	r3, #19329	; 0x4b81
   84bb6:	f2c0 0308 	movt	r3, #8
   84bba:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
   84bbc:	f240 2040 	movw	r0, #576	; 0x240
   84bc0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84bc4:	f04f 0200 	mov.w	r2, #0
   84bc8:	7302      	strb	r2, [r0, #12]
   84bca:	bd08      	pop	{r3, pc}

00084bcc <udi_msc_sense_fail>:
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
}

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
   84bcc:	b570      	push	{r4, r5, r6, lr}
   84bce:	4606      	mov	r6, r0
   84bd0:	460d      	mov	r5, r1
   84bd2:	4614      	mov	r4, r2
	udi_msc_clear_sense();
   84bd4:	f644 3381 	movw	r3, #19329	; 0x4b81
   84bd8:	f2c0 0308 	movt	r3, #8
   84bdc:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
   84bde:	f240 2040 	movw	r0, #576	; 0x240
   84be2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84be6:	f04f 0201 	mov.w	r2, #1
   84bea:	7302      	strb	r2, [r0, #12]
	udi_msc_sense.sense_flag_key = sense_key;
   84bec:	f241 41e4 	movw	r1, #5348	; 0x14e4
   84bf0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84bf4:	708e      	strb	r6, [r1, #2]
	udi_msc_sense.information[0] = lba >> 24;
   84bf6:	ea4f 6314 	mov.w	r3, r4, lsr #24
   84bfa:	70cb      	strb	r3, [r1, #3]
	udi_msc_sense.information[1] = lba >> 16;
   84bfc:	ea4f 4014 	mov.w	r0, r4, lsr #16
   84c00:	7108      	strb	r0, [r1, #4]
	udi_msc_sense.information[2] = lba >> 8;
   84c02:	ea4f 2214 	mov.w	r2, r4, lsr #8
   84c06:	714a      	strb	r2, [r1, #5]
	udi_msc_sense.information[3] = lba;
   84c08:	718c      	strb	r4, [r1, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
   84c0a:	ea4f 2315 	mov.w	r3, r5, lsr #8
   84c0e:	730b      	strb	r3, [r1, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
   84c10:	734d      	strb	r5, [r1, #13]
   84c12:	bd70      	pop	{r4, r5, r6, pc}

00084c14 <udi_msc_sense_fail_busy_or_change>:
{
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
}

static void udi_msc_sense_fail_busy_or_change(void)
{
   84c14:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
   84c16:	f04f 0006 	mov.w	r0, #6
   84c1a:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   84c1e:	f04f 0200 	mov.w	r2, #0
   84c22:	f644 33cd 	movw	r3, #19405	; 0x4bcd
   84c26:	f2c0 0308 	movt	r3, #8
   84c2a:	4798      	blx	r3
   84c2c:	bd08      	pop	{r3, pc}
   84c2e:	bf00      	nop

00084c30 <udi_msc_sense_fail_not_present>:
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
}


static void udi_msc_sense_fail_not_present(void)
{
   84c30:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
   84c32:	f04f 0002 	mov.w	r0, #2
   84c36:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
   84c3a:	f04f 0200 	mov.w	r2, #0
   84c3e:	f644 33cd 	movw	r3, #19405	; 0x4bcd
   84c42:	f2c0 0308 	movt	r3, #8
   84c46:	4798      	blx	r3
   84c48:	bd08      	pop	{r3, pc}
   84c4a:	bf00      	nop

00084c4c <udi_msc_sense_fail_hardware>:
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}

static void udi_msc_sense_fail_hardware(void)
{
   84c4c:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
   84c4e:	f04f 0004 	mov.w	r0, #4
   84c52:	f04f 0100 	mov.w	r1, #0
   84c56:	460a      	mov	r2, r1
   84c58:	f644 33cd 	movw	r3, #19405	; 0x4bcd
   84c5c:	f2c0 0308 	movt	r3, #8
   84c60:	4798      	blx	r3
   84c62:	bd08      	pop	{r3, pc}

00084c64 <udi_msc_sense_fail_cdb_invalid>:
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
}

static void udi_msc_sense_fail_cdb_invalid(void)
{
   84c64:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
   84c66:	f04f 0005 	mov.w	r0, #5
   84c6a:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   84c6e:	f04f 0200 	mov.w	r2, #0
   84c72:	f644 33cd 	movw	r3, #19405	; 0x4bcd
   84c76:	f2c0 0308 	movt	r3, #8
   84c7a:	4798      	blx	r3
   84c7c:	bd08      	pop	{r3, pc}
   84c7e:	bf00      	nop

00084c80 <udi_msc_csw_send>:
	udi_msc_csw_send();
}


void udi_msc_csw_send(void)
{
   84c80:	b510      	push	{r4, lr}
   84c82:	b082      	sub	sp, #8
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
   84c84:	f644 630d 	movw	r3, #19981	; 0x4e0d
   84c88:	f2c0 0308 	movt	r3, #8
   84c8c:	9300      	str	r3, [sp, #0]
   84c8e:	f04f 0081 	mov.w	r0, #129	; 0x81
   84c92:	f04f 0100 	mov.w	r1, #0
   84c96:	f240 2240 	movw	r2, #576	; 0x240
   84c9a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84c9e:	f04f 030d 	mov.w	r3, #13
   84ca2:	f248 042d 	movw	r4, #32813	; 0x802d
   84ca6:	f2c0 0408 	movt	r4, #8
   84caa:	47a0      	blx	r4
   84cac:	b950      	cbnz	r0, 84cc4 <udi_msc_csw_send+0x44>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
   84cae:	f04f 0081 	mov.w	r0, #129	; 0x81
   84cb2:	f644 4181 	movw	r1, #19585	; 0x4c81
   84cb6:	f2c0 0108 	movt	r1, #8
   84cba:	f248 62b9 	movw	r2, #34489	; 0x86b9
   84cbe:	f2c0 0208 	movt	r2, #8
   84cc2:	4790      	blx	r2
	}
}
   84cc4:	b002      	add	sp, #8
   84cc6:	bd10      	pop	{r4, pc}

00084cc8 <udi_msc_csw_process>:

//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
   84cc8:	b508      	push	{r3, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
   84cca:	f240 2340 	movw	r3, #576	; 0x240
   84cce:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84cd2:	6899      	ldr	r1, [r3, #8]
   84cd4:	b171      	cbz	r1, 84cf4 <udi_msc_csw_process+0x2c>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
   84cd6:	f241 42b4 	movw	r2, #5300	; 0x14b4
   84cda:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84cde:	f992 300c 	ldrsb.w	r3, [r2, #12]
   84ce2:	2b00      	cmp	r3, #0
			udd_ep_set_halt(UDI_MSC_EP_IN);
   84ce4:	bfb4      	ite	lt
   84ce6:	2081      	movlt	r0, #129	; 0x81
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
   84ce8:	2002      	movge	r0, #2
   84cea:	f647 6111 	movw	r1, #32273	; 0x7e11
   84cee:	f2c0 0108 	movt	r1, #8
   84cf2:	4788      	blx	r1
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
   84cf4:	f241 40b4 	movw	r0, #5300	; 0x14b4
   84cf8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84cfc:	6842      	ldr	r2, [r0, #4]
   84cfe:	f240 2340 	movw	r3, #576	; 0x240
   84d02:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84d06:	605a      	str	r2, [r3, #4]
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
	udi_msc_csw_send();
   84d08:	f644 4181 	movw	r1, #19585	; 0x4c81
   84d0c:	f2c0 0108 	movt	r1, #8
   84d10:	4788      	blx	r1
   84d12:	bd08      	pop	{r3, pc}

00084d14 <udi_msc_cbw_validate>:
	}
}


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
   84d14:	b508      	push	{r3, lr}
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
   84d16:	f241 43b4 	movw	r3, #5300	; 0x14b4
   84d1a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84d1e:	7b1a      	ldrb	r2, [r3, #12]
   84d20:	4051      	eors	r1, r2
   84d22:	f011 0f80 	tst.w	r1, #128	; 0x80
   84d26:	d106      	bne.n	84d36 <udi_msc_cbw_validate+0x22>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
   84d28:	f240 2140 	movw	r1, #576	; 0x240
   84d2c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84d30:	688b      	ldr	r3, [r1, #8]
   84d32:	4283      	cmp	r3, r0
   84d34:	d20c      	bcs.n	84d50 <udi_msc_cbw_validate+0x3c>
		udi_msc_sense_fail_cdb_invalid();
   84d36:	f644 4065 	movw	r0, #19557	; 0x4c65
   84d3a:	f2c0 0008 	movt	r0, #8
   84d3e:	4780      	blx	r0
		udi_msc_csw_process();
   84d40:	f644 42c9 	movw	r2, #19657	; 0x4cc9
   84d44:	f2c0 0208 	movt	r2, #8
   84d48:	4790      	blx	r2
		return false;
   84d4a:	f04f 0000 	mov.w	r0, #0
   84d4e:	bd08      	pop	{r3, pc}
	 *  - Case  4: Hi > Dn
	 *  - Case  5: Hi > Di
	 *  - Case  9: Ho > Dn
	 *  - Case 11: Ho > Do
	 */
	return true;
   84d50:	f04f 0001 	mov.w	r0, #1
}
   84d54:	bd08      	pop	{r3, pc}
   84d56:	bf00      	nop

00084d58 <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
   84d58:	b510      	push	{r4, lr}
   84d5a:	b082      	sub	sp, #8
   84d5c:	4602      	mov	r2, r0
   84d5e:	460b      	mov	r3, r1
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
   84d60:	f644 5199 	movw	r1, #19865	; 0x4d99
   84d64:	f2c0 0108 	movt	r1, #8
   84d68:	9100      	str	r1, [sp, #0]
   84d6a:	f04f 0081 	mov.w	r0, #129	; 0x81
   84d6e:	f04f 0101 	mov.w	r1, #1
   84d72:	f248 042d 	movw	r4, #32813	; 0x802d
   84d76:	f2c0 0408 	movt	r4, #8
   84d7a:	47a0      	blx	r4
   84d7c:	b948      	cbnz	r0, 84d92 <udi_msc_data_send+0x3a>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
   84d7e:	f644 434d 	movw	r3, #19533	; 0x4c4d
   84d82:	f2c0 0308 	movt	r3, #8
   84d86:	4798      	blx	r3
		udi_msc_csw_process();
   84d88:	f644 40c9 	movw	r0, #19657	; 0x4cc9
   84d8c:	f2c0 0008 	movt	r0, #8
   84d90:	4780      	blx	r0
	}
}
   84d92:	b002      	add	sp, #8
   84d94:	bd10      	pop	{r4, pc}
   84d96:	bf00      	nop

00084d98 <udi_msc_data_sent>:


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
   84d98:	b510      	push	{r4, lr}
   84d9a:	460c      	mov	r4, r1
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
   84d9c:	b980      	cbnz	r0, 84dc0 <udi_msc_data_sent+0x28>
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Update sense data
	udi_msc_sense_pass();
   84d9e:	f644 33b1 	movw	r3, #19377	; 0x4bb1
   84da2:	f2c0 0308 	movt	r3, #8
   84da6:	4798      	blx	r3
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
   84da8:	f240 2040 	movw	r0, #576	; 0x240
   84dac:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84db0:	6882      	ldr	r2, [r0, #8]
   84db2:	1b14      	subs	r4, r2, r4
   84db4:	6084      	str	r4, [r0, #8]
	udi_msc_csw_process();
   84db6:	f644 41c9 	movw	r1, #19657	; 0x4cc9
   84dba:	f2c0 0108 	movt	r1, #8
   84dbe:	4788      	blx	r1
   84dc0:	bd10      	pop	{r4, pc}
   84dc2:	bf00      	nop

00084dc4 <udi_msc_cbw_wait>:
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
}

static void udi_msc_cbw_wait(void)
{
   84dc4:	b510      	push	{r4, lr}
   84dc6:	b082      	sub	sp, #8
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
   84dc8:	f245 0321 	movw	r3, #20513	; 0x5021
   84dcc:	f2c0 0308 	movt	r3, #8
   84dd0:	9300      	str	r3, [sp, #0]
   84dd2:	f04f 0002 	mov.w	r0, #2
   84dd6:	f04f 0101 	mov.w	r1, #1
   84dda:	f241 42b4 	movw	r2, #5300	; 0x14b4
   84dde:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84de2:	f04f 031f 	mov.w	r3, #31
   84de6:	f248 042d 	movw	r4, #32813	; 0x802d
   84dea:	f2c0 0408 	movt	r4, #8
   84dee:	47a0      	blx	r4
   84df0:	b950      	cbnz	r0, 84e08 <udi_msc_cbw_wait+0x44>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
   84df2:	f04f 0002 	mov.w	r0, #2
   84df6:	f644 51c5 	movw	r1, #19909	; 0x4dc5
   84dfa:	f2c0 0108 	movt	r1, #8
   84dfe:	f248 62b9 	movw	r2, #34489	; 0x86b9
   84e02:	f2c0 0208 	movt	r2, #8
   84e06:	4790      	blx	r2
	}
}
   84e08:	b002      	add	sp, #8
   84e0a:	bd10      	pop	{r4, pc}

00084e0c <udi_msc_csw_sent>:
}


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
   84e0c:	b508      	push	{r3, lr}
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
   84e0e:	f644 53c5 	movw	r3, #19909	; 0x4dc5
   84e12:	f2c0 0308 	movt	r3, #8
   84e16:	4798      	blx	r3
   84e18:	bd08      	pop	{r3, pc}
   84e1a:	bf00      	nop

00084e1c <udi_msc_cbw_invalid>:

//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
   84e1c:	b508      	push	{r3, lr}
	if (!udi_msc_b_cbw_invalid)
   84e1e:	f241 43d4 	movw	r3, #5332	; 0x14d4
   84e22:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84e26:	7818      	ldrb	r0, [r3, #0]
   84e28:	b188      	cbz	r0, 84e4e <udi_msc_cbw_invalid+0x32>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_OUT);
   84e2a:	f04f 0002 	mov.w	r0, #2
   84e2e:	f647 6111 	movw	r1, #32273	; 0x7e11
   84e32:	f2c0 0108 	movt	r1, #8
   84e36:	4788      	blx	r1
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
   84e38:	f04f 0002 	mov.w	r0, #2
   84e3c:	f644 611d 	movw	r1, #19997	; 0x4e1d
   84e40:	f2c0 0108 	movt	r1, #8
   84e44:	f248 62b9 	movw	r2, #34489	; 0x86b9
   84e48:	f2c0 0208 	movt	r2, #8
   84e4c:	4790      	blx	r2
   84e4e:	bd08      	pop	{r3, pc}

00084e50 <udi_msc_csw_invalid>:
}

static void udi_msc_csw_invalid(void)
{
   84e50:	b508      	push	{r3, lr}
	if (!udi_msc_b_cbw_invalid)
   84e52:	f241 43d4 	movw	r3, #5332	; 0x14d4
   84e56:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84e5a:	7818      	ldrb	r0, [r3, #0]
   84e5c:	b188      	cbz	r0, 84e82 <udi_msc_csw_invalid+0x32>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_IN);
   84e5e:	f04f 0081 	mov.w	r0, #129	; 0x81
   84e62:	f647 6111 	movw	r1, #32273	; 0x7e11
   84e66:	f2c0 0108 	movt	r1, #8
   84e6a:	4788      	blx	r1
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
   84e6c:	f04f 0081 	mov.w	r0, #129	; 0x81
   84e70:	f644 6151 	movw	r1, #20049	; 0x4e51
   84e74:	f2c0 0108 	movt	r1, #8
   84e78:	f248 62b9 	movw	r2, #34489	; 0x86b9
   84e7c:	f2c0 0208 	movt	r2, #8
   84e80:	4790      	blx	r2
   84e82:	bd08      	pop	{r3, pc}

00084e84 <udi_msc_spc_mode_sense>:
	udi_msc_csw_process();
}


static void udi_msc_spc_mode_sense(bool b_sense10)
{
   84e84:	b570      	push	{r4, r5, r6, lr}
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
   84e86:	f241 41a0 	movw	r1, #5280	; 0x14a0
   84e8a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84e8e:	f04f 0300 	mov.w	r3, #0
   84e92:	460a      	mov	r2, r1
   84e94:	f842 3b04 	str.w	r3, [r2], #4
   84e98:	604b      	str	r3, [r1, #4]
   84e9a:	f102 0204 	add.w	r2, r2, #4
   84e9e:	f842 3b04 	str.w	r3, [r2], #4
   84ea2:	f842 3b04 	str.w	r3, [r2], #4
   84ea6:	6013      	str	r3, [r2, #0]

	// Initialize process
	if (b_sense10) {
   84ea8:	4606      	mov	r6, r0
   84eaa:	b148      	cbz	r0, 84ec0 <udi_msc_spc_mode_sense+0x3c>
		request_lgt = udi_msc_cbw.CDB[8];
   84eac:	f241 44b4 	movw	r4, #5300	; 0x14b4
   84eb0:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84eb4:	7de5      	ldrb	r5, [r4, #23]
		ptr_mode = &sense.s10.sense_data;
   84eb6:	f101 0108 	add.w	r1, r1, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
   84eba:	f04f 0408 	mov.w	r4, #8
   84ebe:	e007      	b.n	84ed0 <udi_msc_spc_mode_sense+0x4c>
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
   84ec0:	f241 40b4 	movw	r0, #5300	; 0x14b4
   84ec4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84ec8:	7cc5      	ldrb	r5, [r0, #19]
		ptr_mode = &sense.s6.sense_data;
   84eca:	492b      	ldr	r1, [pc, #172]	; (84f78 <udi_msc_spc_mode_sense+0xf4>)
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
   84ecc:	f04f 0404 	mov.w	r4, #4
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
   84ed0:	f241 43b4 	movw	r3, #5300	; 0x14b4
   84ed4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84ed8:	7c5a      	ldrb	r2, [r3, #17]
   84eda:	f002 003f 	and.w	r0, r2, #63	; 0x3f
	if ((SCSI_MS_MODE_INFEXP == mode)
   84ede:	281c      	cmp	r0, #28
   84ee0:	d001      	beq.n	84ee6 <udi_msc_spc_mode_sense+0x62>
			|| (SCSI_MS_MODE_ALL == mode)) {
   84ee2:	283f      	cmp	r0, #63	; 0x3f
   84ee4:	d10b      	bne.n	84efe <udi_msc_spc_mode_sense+0x7a>
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
   84ee6:	f04f 031c 	mov.w	r3, #28
   84eea:	700b      	strb	r3, [r1, #0]
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
   84eec:	f04f 020a 	mov.w	r2, #10
   84ef0:	704a      	strb	r2, [r1, #1]
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
   84ef2:	f04f 0005 	mov.w	r0, #5
   84ef6:	70c8      	strb	r0, [r1, #3]
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
   84ef8:	f104 040c 	add.w	r4, r4, #12
   84efc:	b2e4      	uxtb	r4, r4
   84efe:	42ac      	cmp	r4, r5
   84f00:	bf38      	it	cc
   84f02:	4625      	movcc	r5, r4
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
		request_lgt = data_sense_lgt;
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
   84f04:	4628      	mov	r0, r5
   84f06:	f04f 0180 	mov.w	r1, #128	; 0x80
   84f0a:	f644 5315 	movw	r3, #19733	; 0x4d15
   84f0e:	f2c0 0308 	movt	r3, #8
   84f12:	4798      	blx	r3
   84f14:	b370      	cbz	r0, 84f74 <udi_msc_spc_mode_sense+0xf0>
		return;

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
   84f16:	f241 41b4 	movw	r1, #5300	; 0x14b4
   84f1a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84f1e:	7b48      	ldrb	r0, [r1, #13]
   84f20:	f244 12e5 	movw	r2, #16869	; 0x41e5
   84f24:	f2c0 0208 	movt	r2, #8
   84f28:	4790      	blx	r2
   84f2a:	2800      	cmp	r0, #0
   84f2c:	bf14      	ite	ne
   84f2e:	2080      	movne	r0, #128	; 0x80
   84f30:	2000      	moveq	r0, #0

	if (b_sense10) {
   84f32:	b16e      	cbz	r6, 84f50 <udi_msc_spc_mode_sense+0xcc>
		sense.s10.header.mode_data_length =
				cpu_to_be16((data_sense_lgt - 2));
   84f34:	f1a4 0402 	sub.w	r4, r4, #2
   84f38:	b2a4      	uxth	r4, r4

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;

	if (b_sense10) {
		sense.s10.header.mode_data_length =
   84f3a:	f241 41a0 	movw	r1, #5280	; 0x14a0
   84f3e:	f2c2 0107 	movt	r1, #8199	; 0x2007
				cpu_to_be16((data_sense_lgt - 2));
   84f42:	ea4f 2214 	mov.w	r2, r4, lsr #8
   84f46:	ea42 2404 	orr.w	r4, r2, r4, lsl #8

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;

	if (b_sense10) {
		sense.s10.header.mode_data_length =
   84f4a:	800c      	strh	r4, [r1, #0]
				cpu_to_be16((data_sense_lgt - 2));
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
   84f4c:	70c8      	strb	r0, [r1, #3]
   84f4e:	e007      	b.n	84f60 <udi_msc_spc_mode_sense+0xdc>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
   84f50:	f241 43a0 	movw	r3, #5280	; 0x14a0
   84f54:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84f58:	f104 34ff 	add.w	r4, r4, #4294967295
   84f5c:	701c      	strb	r4, [r3, #0]
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
   84f5e:	7098      	strb	r0, [r3, #2]
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
   84f60:	f241 40a0 	movw	r0, #5280	; 0x14a0
   84f64:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84f68:	4629      	mov	r1, r5
   84f6a:	f644 5359 	movw	r3, #19801	; 0x4d59
   84f6e:	f2c0 0308 	movt	r3, #8
   84f72:	4798      	blx	r3
   84f74:	bd70      	pop	{r4, r5, r6, pc}
   84f76:	bf00      	nop
   84f78:	200714a4 	.word	0x200714a4

00084f7c <udi_msc_sbc_trans>:
			sizeof(udi_msc_capacity));
}


static void udi_msc_sbc_trans(bool b_read)
{
   84f7c:	b510      	push	{r4, lr}
	uint32_t trans_size;

	if (!b_read) {
   84f7e:	4604      	mov	r4, r0
   84f80:	b9d8      	cbnz	r0, 84fba <udi_msc_sbc_trans+0x3e>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
   84f82:	f241 43b4 	movw	r3, #5300	; 0x14b4
   84f86:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84f8a:	7b58      	ldrb	r0, [r3, #13]
   84f8c:	f244 11e5 	movw	r1, #16869	; 0x41e5
   84f90:	f2c0 0108 	movt	r1, #8
   84f94:	4788      	blx	r1
   84f96:	b180      	cbz	r0, 84fba <udi_msc_sbc_trans+0x3e>
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}

static void udi_msc_sense_fail_protected(void)
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
   84f98:	f04f 0007 	mov.w	r0, #7
   84f9c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
   84fa0:	f04f 0200 	mov.w	r2, #0
   84fa4:	f644 33cd 	movw	r3, #19405	; 0x4bcd
   84fa8:	f2c0 0308 	movt	r3, #8
   84fac:	4798      	blx	r3
	if (!b_read) {
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
			// Write not authorized
			udi_msc_sense_fail_protected();
			udi_msc_csw_process();
   84fae:	f644 42c9 	movw	r2, #19657	; 0x4cc9
   84fb2:	f2c0 0208 	movt	r2, #8
   84fb6:	4790      	blx	r2
			return;
   84fb8:	bd10      	pop	{r4, pc}
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
   84fba:	f241 42e0 	movw	r2, #5344	; 0x14e0
   84fbe:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84fc2:	f241 40b4 	movw	r0, #5300	; 0x14b4
   84fc6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84fca:	7c43      	ldrb	r3, [r0, #17]
   84fcc:	70d3      	strb	r3, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
   84fce:	7c81      	ldrb	r1, [r0, #18]
   84fd0:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
   84fd2:	7cc3      	ldrb	r3, [r0, #19]
   84fd4:	7053      	strb	r3, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
   84fd6:	7d01      	ldrb	r1, [r0, #20]
   84fd8:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
   84fda:	f241 42dc 	movw	r2, #5340	; 0x14dc
   84fde:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84fe2:	7d83      	ldrb	r3, [r0, #22]
   84fe4:	7053      	strb	r3, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
   84fe6:	7dc0      	ldrb	r0, [r0, #23]
   84fe8:	7010      	strb	r0, [r2, #0]

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
   84fea:	8811      	ldrh	r1, [r2, #0]
	if (!udi_msc_cbw_validate(trans_size,
   84fec:	ea4f 2041 	mov.w	r0, r1, lsl #9
   84ff0:	2c00      	cmp	r4, #0
   84ff2:	bf14      	ite	ne
   84ff4:	2180      	movne	r1, #128	; 0x80
   84ff6:	2100      	moveq	r1, #0
   84ff8:	f644 5215 	movw	r2, #19733	; 0x4d15
   84ffc:	f2c0 0208 	movt	r2, #8
   85000:	4790      	blx	r2
   85002:	b158      	cbz	r0, 8501c <udi_msc_sbc_trans+0xa0>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
   85004:	f241 43f8 	movw	r3, #5368	; 0x14f8
   85008:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8500c:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
   8500e:	f241 409e 	movw	r0, #5278	; 0x149e
   85012:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85016:	f04f 0101 	mov.w	r1, #1
   8501a:	7001      	strb	r1, [r0, #0]
   8501c:	bd10      	pop	{r4, pc}
   8501e:	bf00      	nop

00085020 <udi_msc_cbw_received>:
}


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
   85020:	b570      	push	{r4, r5, r6, lr}
	UNUSED(ep);
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
   85022:	2800      	cmp	r0, #0
   85024:	f040 82b8 	bne.w	85598 <udi_msc_cbw_received+0x578>
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
   85028:	291f      	cmp	r1, #31
   8502a:	d10a      	bne.n	85042 <udi_msc_cbw_received+0x22>
			|| (udi_msc_cbw.dCBWSignature !=
   8502c:	f245 3355 	movw	r3, #21333	; 0x5355
   85030:	f2c4 3342 	movt	r3, #17218	; 0x4342
   85034:	f241 42b4 	movw	r2, #5300	; 0x14b4
   85038:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8503c:	6810      	ldr	r0, [r2, #0]
   8503e:	4298      	cmp	r0, r3
   85040:	d011      	beq.n	85066 <udi_msc_cbw_received+0x46>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
   85042:	f241 43d4 	movw	r3, #5332	; 0x14d4
   85046:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8504a:	f04f 0201 	mov.w	r2, #1
   8504e:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
   85050:	f644 611d 	movw	r1, #19997	; 0x4e1d
   85054:	f2c0 0108 	movt	r1, #8
   85058:	4788      	blx	r1
		udi_msc_csw_invalid();
   8505a:	f644 6051 	movw	r0, #20049	; 0x4e51
   8505e:	f2c0 0008 	movt	r0, #8
   85062:	4780      	blx	r0
		return;
   85064:	bd70      	pop	{r4, r5, r6, pc}
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
   85066:	f241 41b4 	movw	r1, #5300	; 0x14b4
   8506a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8506e:	7b4b      	ldrb	r3, [r1, #13]
   85070:	f003 000f 	and.w	r0, r3, #15
   85074:	7348      	strb	r0, [r1, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
   85076:	f241 42d8 	movw	r2, #5336	; 0x14d8
   8507a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8507e:	7811      	ldrb	r1, [r2, #0]
   85080:	4281      	cmp	r1, r0
   85082:	d20a      	bcs.n	8509a <udi_msc_cbw_received+0x7a>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
   85084:	f644 4165 	movw	r1, #19557	; 0x4c65
   85088:	f2c0 0108 	movt	r1, #8
   8508c:	4788      	blx	r1
		udi_msc_csw_process();
   8508e:	f644 40c9 	movw	r0, #19657	; 0x4cc9
   85092:	f2c0 0008 	movt	r0, #8
   85096:	4780      	blx	r0
		return;
   85098:	bd70      	pop	{r4, r5, r6, pc}
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
   8509a:	f241 43b4 	movw	r3, #5300	; 0x14b4
   8509e:	f2c2 0307 	movt	r3, #8199	; 0x2007
		udi_msc_sense_fail_cdb_invalid();
		udi_msc_csw_process();
		return;
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
   850a2:	689a      	ldr	r2, [r3, #8]
   850a4:	f240 2140 	movw	r1, #576	; 0x240
   850a8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   850ac:	608a      	str	r2, [r1, #8]
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
   850ae:	7bdb      	ldrb	r3, [r3, #15]
   850b0:	2b5a      	cmp	r3, #90	; 0x5a
   850b2:	f200 825a 	bhi.w	8556a <udi_msc_cbw_received+0x54a>
   850b6:	e8df f013 	tbh	[pc, r3, lsl #1]
   850ba:	01a6      	.short	0x01a6
   850bc:	02580258 	.word	0x02580258
   850c0:	0258005b 	.word	0x0258005b
   850c4:	02580258 	.word	0x02580258
   850c8:	02580258 	.word	0x02580258
   850cc:	02580258 	.word	0x02580258
   850d0:	02580258 	.word	0x02580258
   850d4:	02580258 	.word	0x02580258
   850d8:	02580258 	.word	0x02580258
   850dc:	00790258 	.word	0x00790258
   850e0:	02580258 	.word	0x02580258
   850e4:	02580258 	.word	0x02580258
   850e8:	02580258 	.word	0x02580258
   850ec:	01960258 	.word	0x01960258
   850f0:	02580209 	.word	0x02580209
   850f4:	02260258 	.word	0x02260258
   850f8:	02580258 	.word	0x02580258
   850fc:	02580258 	.word	0x02580258
   85100:	02580258 	.word	0x02580258
   85104:	025801ce 	.word	0x025801ce
   85108:	02480258 	.word	0x02480258
   8510c:	02500258 	.word	0x02500258
   85110:	02580258 	.word	0x02580258
   85114:	02580258 	.word	0x02580258
   85118:	0258023d 	.word	0x0258023d
   8511c:	02580258 	.word	0x02580258
   85120:	02580258 	.word	0x02580258
   85124:	02580258 	.word	0x02580258
   85128:	02580258 	.word	0x02580258
   8512c:	02580258 	.word	0x02580258
   85130:	02580258 	.word	0x02580258
   85134:	02580258 	.word	0x02580258
   85138:	02580258 	.word	0x02580258
   8513c:	02580258 	.word	0x02580258
   85140:	02580258 	.word	0x02580258
   85144:	02580258 	.word	0x02580258
   85148:	02580258 	.word	0x02580258
   8514c:	02580258 	.word	0x02580258
   85150:	02580258 	.word	0x02580258
   85154:	02580258 	.word	0x02580258
   85158:	02580258 	.word	0x02580258
   8515c:	02580258 	.word	0x02580258
   85160:	02580258 	.word	0x02580258
   85164:	02580258 	.word	0x02580258
   85168:	02580258 	.word	0x02580258
   8516c:	019e0258 	.word	0x019e0258
//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
	uint8_t length = udi_msc_cbw.CDB[4];
   85170:	f241 44b4 	movw	r4, #5300	; 0x14b4
   85174:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85178:	7ce4      	ldrb	r4, [r4, #19]
   8517a:	2c12      	cmp	r4, #18
   8517c:	bf28      	it	cs
   8517e:	2412      	movcs	r4, #18

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
		length = sizeof(udi_msc_sense);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
   85180:	4620      	mov	r0, r4
   85182:	f04f 0180 	mov.w	r1, #128	; 0x80
   85186:	f644 5215 	movw	r2, #19733	; 0x4d15
   8518a:	f2c0 0208 	movt	r2, #8
   8518e:	4790      	blx	r2
   85190:	2800      	cmp	r0, #0
   85192:	f000 8201 	beq.w	85598 <udi_msc_cbw_received+0x578>
		return;
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
   85196:	f241 40e4 	movw	r0, #5348	; 0x14e4
   8519a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8519e:	4621      	mov	r1, r4
   851a0:	f644 5359 	movw	r3, #19801	; 0x4d59
   851a4:	f2c0 0308 	movt	r3, #8
   851a8:	4798      	blx	r3
   851aa:	bd70      	pop	{r4, r5, r6, pc}
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
   851ac:	f241 44b4 	movw	r4, #5300	; 0x14b4
   851b0:	f2c2 0407 	movt	r4, #8199	; 0x2007
   851b4:	7ce4      	ldrb	r4, [r4, #19]
   851b6:	2c24      	cmp	r4, #36	; 0x24
   851b8:	bf28      	it	cs
   851ba:	2424      	movcs	r4, #36	; 0x24

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
   851bc:	4620      	mov	r0, r4
   851be:	f04f 0180 	mov.w	r1, #128	; 0x80
   851c2:	f644 5215 	movw	r2, #19733	; 0x4d15
   851c6:	f2c0 0208 	movt	r2, #8
   851ca:	4790      	blx	r2
   851cc:	2800      	cmp	r0, #0
   851ce:	f000 81e3 	beq.w	85598 <udi_msc_cbw_received+0x578>
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
   851d2:	f241 40b4 	movw	r0, #5300	; 0x14b4
   851d6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   851da:	7c01      	ldrb	r1, [r0, #16]
   851dc:	f011 0f03 	tst.w	r1, #3
   851e0:	d105      	bne.n	851ee <udi_msc_cbw_received+0x1ce>
			|| (0 != udi_msc_cbw.CDB[2])) {
   851e2:	f241 43b4 	movw	r3, #5300	; 0x14b4
   851e6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   851ea:	7c5a      	ldrb	r2, [r3, #17]
   851ec:	b152      	cbz	r2, 85204 <udi_msc_cbw_received+0x1e4>
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
   851ee:	f644 4165 	movw	r1, #19557	; 0x4c65
   851f2:	f2c0 0108 	movt	r1, #8
   851f6:	4788      	blx	r1
		udi_msc_csw_process();
   851f8:	f644 43c9 	movw	r3, #19657	; 0x4cc9
   851fc:	f2c0 0308 	movt	r3, #8
   85200:	4798      	blx	r3
   85202:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
   85204:	f241 45b4 	movw	r5, #5300	; 0x14b4
   85208:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8520c:	7b68      	ldrb	r0, [r5, #13]
   8520e:	f244 16fd 	movw	r6, #16893	; 0x41fd
   85212:	f2c0 0608 	movt	r6, #8
   85216:	47b0      	blx	r6
   85218:	2800      	cmp	r0, #0
   8521a:	bf14      	ite	ne
   8521c:	2080      	movne	r0, #128	; 0x80
   8521e:	2000      	moveq	r0, #0
   85220:	f240 261c 	movw	r6, #540	; 0x21c
   85224:	f2c2 0607 	movt	r6, #8199	; 0x2007
   85228:	7070      	strb	r0, [r6, #1]
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
   8522a:	f241 41b4 	movw	r1, #5300	; 0x14b4
   8522e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85232:	7b48      	ldrb	r0, [r1, #13]
   85234:	f244 2315 	movw	r3, #16917	; 0x4215
   85238:	f2c0 0308 	movt	r3, #8
   8523c:	4798      	blx	r3
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
   8523e:	f106 0510 	add.w	r5, r6, #16
   85242:	4603      	mov	r3, r0
   85244:	f853 0f01 	ldr.w	r0, [r3, #1]!
   85248:	6859      	ldr	r1, [r3, #4]
   8524a:	689a      	ldr	r2, [r3, #8]
   8524c:	68db      	ldr	r3, [r3, #12]
   8524e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85250:	7c32      	ldrb	r2, [r6, #16]
   85252:	2a00      	cmp	r2, #0
   85254:	f000 819a 	beq.w	8558c <udi_msc_cbw_received+0x56c>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85258:	2a22      	cmp	r2, #34	; 0x22
   8525a:	f000 819a 	beq.w	85592 <udi_msc_cbw_received+0x572>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   8525e:	7c71      	ldrb	r1, [r6, #17]
   85260:	2900      	cmp	r1, #0
   85262:	d03e      	beq.n	852e2 <udi_msc_cbw_received+0x2c2>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85264:	2922      	cmp	r1, #34	; 0x22
   85266:	d06b      	beq.n	85340 <udi_msc_cbw_received+0x320>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85268:	7cb2      	ldrb	r2, [r6, #18]
   8526a:	2a00      	cmp	r2, #0
   8526c:	d03c      	beq.n	852e8 <udi_msc_cbw_received+0x2c8>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   8526e:	2a22      	cmp	r2, #34	; 0x22
   85270:	d069      	beq.n	85346 <udi_msc_cbw_received+0x326>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85272:	7cf1      	ldrb	r1, [r6, #19]
   85274:	2900      	cmp	r1, #0
   85276:	d03a      	beq.n	852ee <udi_msc_cbw_received+0x2ce>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85278:	2922      	cmp	r1, #34	; 0x22
   8527a:	d067      	beq.n	8534c <udi_msc_cbw_received+0x32c>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   8527c:	7d32      	ldrb	r2, [r6, #20]
   8527e:	2a00      	cmp	r2, #0
   85280:	d038      	beq.n	852f4 <udi_msc_cbw_received+0x2d4>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85282:	2a22      	cmp	r2, #34	; 0x22
   85284:	d065      	beq.n	85352 <udi_msc_cbw_received+0x332>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85286:	7d71      	ldrb	r1, [r6, #21]
   85288:	2900      	cmp	r1, #0
   8528a:	d036      	beq.n	852fa <udi_msc_cbw_received+0x2da>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   8528c:	2922      	cmp	r1, #34	; 0x22
   8528e:	d063      	beq.n	85358 <udi_msc_cbw_received+0x338>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85290:	7db2      	ldrb	r2, [r6, #22]
   85292:	b3aa      	cbz	r2, 85300 <udi_msc_cbw_received+0x2e0>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85294:	2a22      	cmp	r2, #34	; 0x22
   85296:	d062      	beq.n	8535e <udi_msc_cbw_received+0x33e>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85298:	7df1      	ldrb	r1, [r6, #23]
   8529a:	b3a1      	cbz	r1, 85306 <udi_msc_cbw_received+0x2e6>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   8529c:	2922      	cmp	r1, #34	; 0x22
   8529e:	d061      	beq.n	85364 <udi_msc_cbw_received+0x344>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   852a0:	7e32      	ldrb	r2, [r6, #24]
   852a2:	b39a      	cbz	r2, 8530c <udi_msc_cbw_received+0x2ec>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   852a4:	2a22      	cmp	r2, #34	; 0x22
   852a6:	d060      	beq.n	8536a <udi_msc_cbw_received+0x34a>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   852a8:	7e71      	ldrb	r1, [r6, #25]
   852aa:	b391      	cbz	r1, 85312 <udi_msc_cbw_received+0x2f2>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   852ac:	2922      	cmp	r1, #34	; 0x22
   852ae:	d05f      	beq.n	85370 <udi_msc_cbw_received+0x350>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   852b0:	7eb2      	ldrb	r2, [r6, #26]
   852b2:	b38a      	cbz	r2, 85318 <udi_msc_cbw_received+0x2f8>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   852b4:	2a22      	cmp	r2, #34	; 0x22
   852b6:	d05e      	beq.n	85376 <udi_msc_cbw_received+0x356>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   852b8:	7ef1      	ldrb	r1, [r6, #27]
   852ba:	b381      	cbz	r1, 8531e <udi_msc_cbw_received+0x2fe>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   852bc:	2922      	cmp	r1, #34	; 0x22
   852be:	d05d      	beq.n	8537c <udi_msc_cbw_received+0x35c>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   852c0:	7f32      	ldrb	r2, [r6, #28]
   852c2:	b37a      	cbz	r2, 85324 <udi_msc_cbw_received+0x304>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   852c4:	2a22      	cmp	r2, #34	; 0x22
   852c6:	d05c      	beq.n	85382 <udi_msc_cbw_received+0x362>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   852c8:	7f71      	ldrb	r1, [r6, #29]
   852ca:	b371      	cbz	r1, 8532a <udi_msc_cbw_received+0x30a>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   852cc:	2922      	cmp	r1, #34	; 0x22
   852ce:	d05b      	beq.n	85388 <udi_msc_cbw_received+0x368>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   852d0:	7fb2      	ldrb	r2, [r6, #30]
   852d2:	b36a      	cbz	r2, 85330 <udi_msc_cbw_received+0x310>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   852d4:	2a22      	cmp	r2, #34	; 0x22
   852d6:	d05a      	beq.n	8538e <udi_msc_cbw_received+0x36e>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   852d8:	7ff3      	ldrb	r3, [r6, #31]
   852da:	bb63      	cbnz	r3, 85336 <udi_msc_cbw_received+0x316>
   852dc:	f04f 030f 	mov.w	r3, #15
   852e0:	e057      	b.n	85392 <udi_msc_cbw_received+0x372>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
			break;
		}
		i++;
   852e2:	f04f 0301 	mov.w	r3, #1
   852e6:	e054      	b.n	85392 <udi_msc_cbw_received+0x372>
   852e8:	f04f 0302 	mov.w	r3, #2
   852ec:	e051      	b.n	85392 <udi_msc_cbw_received+0x372>
   852ee:	f04f 0303 	mov.w	r3, #3
   852f2:	e04e      	b.n	85392 <udi_msc_cbw_received+0x372>
   852f4:	f04f 0304 	mov.w	r3, #4
   852f8:	e04b      	b.n	85392 <udi_msc_cbw_received+0x372>
   852fa:	f04f 0305 	mov.w	r3, #5
   852fe:	e048      	b.n	85392 <udi_msc_cbw_received+0x372>
   85300:	f04f 0306 	mov.w	r3, #6
   85304:	e045      	b.n	85392 <udi_msc_cbw_received+0x372>
   85306:	f04f 0307 	mov.w	r3, #7
   8530a:	e042      	b.n	85392 <udi_msc_cbw_received+0x372>
   8530c:	f04f 0308 	mov.w	r3, #8
   85310:	e03f      	b.n	85392 <udi_msc_cbw_received+0x372>
   85312:	f04f 0309 	mov.w	r3, #9
   85316:	e03c      	b.n	85392 <udi_msc_cbw_received+0x372>
   85318:	f04f 030a 	mov.w	r3, #10
   8531c:	e039      	b.n	85392 <udi_msc_cbw_received+0x372>
   8531e:	f04f 030b 	mov.w	r3, #11
   85322:	e036      	b.n	85392 <udi_msc_cbw_received+0x372>
   85324:	f04f 030c 	mov.w	r3, #12
   85328:	e033      	b.n	85392 <udi_msc_cbw_received+0x372>
   8532a:	f04f 030d 	mov.w	r3, #13
   8532e:	e030      	b.n	85392 <udi_msc_cbw_received+0x372>
   85330:	f04f 030e 	mov.w	r3, #14
   85334:	e02d      	b.n	85392 <udi_msc_cbw_received+0x372>

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85336:	2b22      	cmp	r3, #34	; 0x22
   85338:	bf08      	it	eq
   8533a:	230f      	moveq	r3, #15
   8533c:	d029      	beq.n	85392 <udi_msc_cbw_received+0x372>
   8533e:	e047      	b.n	853d0 <udi_msc_cbw_received+0x3b0>
			break;
		}
		i++;
   85340:	f04f 0301 	mov.w	r3, #1
   85344:	e025      	b.n	85392 <udi_msc_cbw_received+0x372>
   85346:	f04f 0302 	mov.w	r3, #2
   8534a:	e022      	b.n	85392 <udi_msc_cbw_received+0x372>
   8534c:	f04f 0303 	mov.w	r3, #3
   85350:	e01f      	b.n	85392 <udi_msc_cbw_received+0x372>
   85352:	f04f 0304 	mov.w	r3, #4
   85356:	e01c      	b.n	85392 <udi_msc_cbw_received+0x372>
   85358:	f04f 0305 	mov.w	r3, #5
   8535c:	e019      	b.n	85392 <udi_msc_cbw_received+0x372>
   8535e:	f04f 0306 	mov.w	r3, #6
   85362:	e016      	b.n	85392 <udi_msc_cbw_received+0x372>
   85364:	f04f 0307 	mov.w	r3, #7
   85368:	e013      	b.n	85392 <udi_msc_cbw_received+0x372>
   8536a:	f04f 0308 	mov.w	r3, #8
   8536e:	e010      	b.n	85392 <udi_msc_cbw_received+0x372>
   85370:	f04f 0309 	mov.w	r3, #9
   85374:	e00d      	b.n	85392 <udi_msc_cbw_received+0x372>
   85376:	f04f 030a 	mov.w	r3, #10
   8537a:	e00a      	b.n	85392 <udi_msc_cbw_received+0x372>
   8537c:	f04f 030b 	mov.w	r3, #11
   85380:	e007      	b.n	85392 <udi_msc_cbw_received+0x372>
   85382:	f04f 030c 	mov.w	r3, #12
   85386:	e004      	b.n	85392 <udi_msc_cbw_received+0x372>
   85388:	f04f 030d 	mov.w	r3, #13
   8538c:	e001      	b.n	85392 <udi_msc_cbw_received+0x372>
   8538e:	f04f 030e 	mov.w	r3, #14
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		udi_msc_inquiry_data.product_id[i] = ' ';
   85392:	f240 211c 	movw	r1, #540	; 0x21c
   85396:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8539a:	f04f 0220 	mov.w	r2, #32
   8539e:	f1c3 050f 	rsb	r5, r3, #15
   853a2:	f005 0001 	and.w	r0, r5, #1
   853a6:	18cd      	adds	r5, r1, r3
   853a8:	742a      	strb	r2, [r5, #16]
		i++;
   853aa:	f103 0301 	add.w	r3, r3, #1
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   853ae:	2b10      	cmp	r3, #16
   853b0:	f040 80f3 	bne.w	8559a <udi_msc_cbw_received+0x57a>
   853b4:	e00c      	b.n	853d0 <udi_msc_cbw_received+0x3b0>
		udi_msc_inquiry_data.product_id[i] = ' ';
   853b6:	18c8      	adds	r0, r1, r3
   853b8:	7402      	strb	r2, [r0, #16]
		i++;
   853ba:	f103 0301 	add.w	r3, r3, #1
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   853be:	f003 03ff 	and.w	r3, r3, #255	; 0xff
		udi_msc_inquiry_data.product_id[i] = ' ';
   853c2:	18c8      	adds	r0, r1, r3
   853c4:	7402      	strb	r2, [r0, #16]
		i++;
   853c6:	f103 0301 	add.w	r3, r3, #1
   853ca:	b2db      	uxtb	r3, r3
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   853cc:	2b10      	cmp	r3, #16
   853ce:	d1f2      	bne.n	853b6 <udi_msc_cbw_received+0x396>
		udi_msc_inquiry_data.product_id[i] = ' ';
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
   853d0:	f240 201c 	movw	r0, #540	; 0x21c
   853d4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   853d8:	4621      	mov	r1, r4
   853da:	f644 5259 	movw	r2, #19801	; 0x4d59
   853de:	f2c0 0208 	movt	r2, #8
   853e2:	4790      	blx	r2
   853e4:	bd70      	pop	{r4, r5, r6, pc}
	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
		break;

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
   853e6:	f04f 0000 	mov.w	r0, #0
   853ea:	f644 6385 	movw	r3, #20101	; 0x4e85
   853ee:	f2c0 0308 	movt	r3, #8
   853f2:	4798      	blx	r3
		break;
   853f4:	bd70      	pop	{r4, r5, r6, pc}
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
   853f6:	f04f 0001 	mov.w	r0, #1
   853fa:	f644 6285 	movw	r2, #20101	; 0x4e85
   853fe:	f2c0 0208 	movt	r2, #8
   85402:	4790      	blx	r2
		break;
   85404:	bd70      	pop	{r4, r5, r6, pc}
}


static bool udi_msc_spc_testunitready_global(void)
{
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
   85406:	f244 11a5 	movw	r1, #16805	; 0x41a5
   8540a:	f2c0 0108 	movt	r1, #8
   8540e:	4788      	blx	r1
   85410:	2802      	cmp	r0, #2
   85412:	d009      	beq.n	85428 <udi_msc_cbw_received+0x408>
   85414:	2803      	cmp	r0, #3
   85416:	d001      	beq.n	8541c <udi_msc_cbw_received+0x3fc>
   85418:	b190      	cbz	r0, 85440 <udi_msc_cbw_received+0x420>
   8541a:	e00b      	b.n	85434 <udi_msc_cbw_received+0x414>
	case CTRL_GOOD:
		return true;	// Don't change sense data
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   8541c:	f644 4315 	movw	r3, #19477	; 0x4c15
   85420:	f2c0 0308 	movt	r3, #8
   85424:	4798      	blx	r3
   85426:	e010      	b.n	8544a <udi_msc_cbw_received+0x42a>
		break;
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   85428:	f644 4131 	movw	r1, #19505	; 0x4c31
   8542c:	f2c0 0108 	movt	r1, #8
   85430:	4788      	blx	r1
   85432:	e00a      	b.n	8544a <udi_msc_cbw_received+0x42a>
		break;
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
   85434:	f644 404d 	movw	r0, #19533	; 0x4c4d
   85438:	f2c0 0008 	movt	r0, #8
   8543c:	4780      	blx	r0
   8543e:	e004      	b.n	8544a <udi_msc_cbw_received+0x42a>

static void udi_msc_spc_testunitready(void)
{
	if (udi_msc_spc_testunitready_global()) {
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
   85440:	f644 32b1 	movw	r2, #19377	; 0x4bb1
   85444:	f2c0 0208 	movt	r2, #8
   85448:	4790      	blx	r2
	}
	// Send status in CSW packet
	udi_msc_csw_process();
   8544a:	f644 40c9 	movw	r0, #19657	; 0x4cc9
   8544e:	f2c0 0008 	movt	r0, #8
   85452:	4780      	blx	r0
   85454:	bd70      	pop	{r4, r5, r6, pc}

static void udi_msc_sbc_read_capacity(void)
{
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
   85456:	f04f 0008 	mov.w	r0, #8
   8545a:	f04f 0180 	mov.w	r1, #128	; 0x80
   8545e:	f644 5315 	movw	r3, #19733	; 0x4d15
   85462:	f2c0 0308 	movt	r3, #8
   85466:	4798      	blx	r3
   85468:	2800      	cmp	r0, #0
   8546a:	f000 8095 	beq.w	85598 <udi_msc_cbw_received+0x578>
					USB_CBW_DIRECTION_IN))
		return;

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
   8546e:	f241 40b4 	movw	r0, #5300	; 0x14b4
   85472:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85476:	7b40      	ldrb	r0, [r0, #13]
   85478:	f241 41fc 	movw	r1, #5372	; 0x14fc
   8547c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85480:	f244 12bd 	movw	r2, #16829	; 0x41bd
   85484:	f2c0 0208 	movt	r2, #8
   85488:	4790      	blx	r2
   8548a:	2802      	cmp	r0, #2
   8548c:	d008      	beq.n	854a0 <udi_msc_cbw_received+0x480>
   8548e:	2803      	cmp	r0, #3
   85490:	d001      	beq.n	85496 <udi_msc_cbw_received+0x476>
   85492:	b178      	cbz	r0, 854b4 <udi_msc_cbw_received+0x494>
   85494:	e009      	b.n	854aa <udi_msc_cbw_received+0x48a>
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   85496:	4847      	ldr	r0, [pc, #284]	; (855b4 <udi_msc_cbw_received+0x594>)
   85498:	4780      	blx	r0
		udi_msc_csw_process();
   8549a:	4947      	ldr	r1, [pc, #284]	; (855b8 <udi_msc_cbw_received+0x598>)
   8549c:	4788      	blx	r1
   8549e:	bd70      	pop	{r4, r5, r6, pc}
		return;
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   854a0:	4b46      	ldr	r3, [pc, #280]	; (855bc <udi_msc_cbw_received+0x59c>)
   854a2:	4798      	blx	r3
		udi_msc_csw_process();
   854a4:	4a44      	ldr	r2, [pc, #272]	; (855b8 <udi_msc_cbw_received+0x598>)
   854a6:	4790      	blx	r2
   854a8:	bd70      	pop	{r4, r5, r6, pc}
		return;
	default:
		udi_msc_sense_fail_hardware();
   854aa:	4945      	ldr	r1, [pc, #276]	; (855c0 <udi_msc_cbw_received+0x5a0>)
   854ac:	4788      	blx	r1
		udi_msc_csw_process();
   854ae:	4b42      	ldr	r3, [pc, #264]	; (855b8 <udi_msc_cbw_received+0x598>)
   854b0:	4798      	blx	r3
   854b2:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
   854b4:	4843      	ldr	r0, [pc, #268]	; (855c4 <udi_msc_cbw_received+0x5a4>)
   854b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   854ba:	6042      	str	r2, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
   854bc:	6801      	ldr	r1, [r0, #0]
   854be:	ba0b      	rev	r3, r1
   854c0:	6003      	str	r3, [r0, #0]
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
   854c2:	f04f 0108 	mov.w	r1, #8
   854c6:	4a40      	ldr	r2, [pc, #256]	; (855c8 <udi_msc_cbw_received+0x5a8>)
   854c8:	4790      	blx	r2
   854ca:	bd70      	pop	{r4, r5, r6, pc}
}


static void udi_msc_sbc_start_stop(void)
{
	bool start = 0x1 & udi_msc_cbw.CDB[4];
   854cc:	f241 41b4 	movw	r1, #5300	; 0x14b4
   854d0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   854d4:	7ccb      	ldrb	r3, [r1, #19]
	bool loej = 0x2 & udi_msc_cbw.CDB[4];
	if (loej) {
   854d6:	f003 0202 	and.w	r2, r3, #2
   854da:	b2d1      	uxtb	r1, r2
   854dc:	b141      	cbz	r1, 854f0 <udi_msc_cbw_received+0x4d0>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
   854de:	f083 0301 	eor.w	r3, r3, #1
   854e2:	f003 0101 	and.w	r1, r3, #1
   854e6:	f244 12d5 	movw	r2, #16853	; 0x41d5
   854ea:	f2c0 0208 	movt	r2, #8
   854ee:	4790      	blx	r2
	}
	udi_msc_sense_pass();
   854f0:	f644 30b1 	movw	r0, #19377	; 0x4bb1
   854f4:	f2c0 0008 	movt	r0, #8
   854f8:	4780      	blx	r0
	udi_msc_csw_process();
   854fa:	f644 41c9 	movw	r1, #19657	; 0x4cc9
   854fe:	f2c0 0108 	movt	r1, #8
   85502:	4788      	blx	r1
   85504:	bd70      	pop	{r4, r5, r6, pc}
}


static void udi_msc_spc_prevent_allow_medium_removal(void)
{
	uint8_t prevent = udi_msc_cbw.CDB[4];
   85506:	f241 40b4 	movw	r0, #5300	; 0x14b4
   8550a:	f2c2 0007 	movt	r0, #8199	; 0x2007
	if (0 == prevent) {
   8550e:	7cc1      	ldrb	r1, [r0, #19]
   85510:	b929      	cbnz	r1, 8551e <udi_msc_cbw_received+0x4fe>
		udi_msc_sense_pass();
   85512:	f644 32b1 	movw	r2, #19377	; 0x4bb1
   85516:	f2c0 0208 	movt	r2, #8
   8551a:	4790      	blx	r2
   8551c:	e004      	b.n	85528 <udi_msc_cbw_received+0x508>
	} else {
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
   8551e:	f644 4365 	movw	r3, #19557	; 0x4c65
   85522:	f2c0 0308 	movt	r3, #8
   85526:	4798      	blx	r3
	}
	udi_msc_csw_process();
   85528:	f644 40c9 	movw	r0, #19657	; 0x4cc9
   8552c:	f2c0 0008 	movt	r0, #8
   85530:	4780      	blx	r0
   85532:	bd70      	pop	{r4, r5, r6, pc}
		udi_msc_spc_prevent_allow_medium_removal();
		break;

		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
   85534:	f644 30b1 	movw	r0, #19377	; 0x4bb1
   85538:	f2c0 0008 	movt	r0, #8
   8553c:	4780      	blx	r0
		udi_msc_csw_process();
   8553e:	f644 41c9 	movw	r1, #19657	; 0x4cc9
   85542:	f2c0 0108 	movt	r1, #8
   85546:	4788      	blx	r1
		break;
   85548:	bd70      	pop	{r4, r5, r6, pc}

	case SBC_READ10:
		udi_msc_sbc_trans(true);
   8554a:	f04f 0001 	mov.w	r0, #1
   8554e:	f644 727d 	movw	r2, #20349	; 0x4f7d
   85552:	f2c0 0208 	movt	r2, #8
   85556:	4790      	blx	r2
		break;
   85558:	bd70      	pop	{r4, r5, r6, pc}

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
   8555a:	f04f 0000 	mov.w	r0, #0
   8555e:	f644 737d 	movw	r3, #20349	; 0x4f7d
   85562:	f2c0 0308 	movt	r3, #8
   85566:	4798      	blx	r3
		break;
   85568:	bd70      	pop	{r4, r5, r6, pc}
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}

static void udi_msc_sense_command_invalid(void)
{
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
   8556a:	f04f 0005 	mov.w	r0, #5
   8556e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   85572:	f04f 0200 	mov.w	r2, #0
   85576:	f644 33cd 	movw	r3, #19405	; 0x4bcd
   8557a:	f2c0 0308 	movt	r3, #8
   8557e:	4798      	blx	r3
		udi_msc_sbc_trans(false);
		break;

	default:
		udi_msc_sense_command_invalid();
		udi_msc_csw_process();
   85580:	f644 42c9 	movw	r2, #19657	; 0x4cc9
   85584:	f2c0 0208 	movt	r2, #8
   85588:	4790      	blx	r2
		break;
   8558a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
   8558c:	f04f 0300 	mov.w	r3, #0
   85590:	e6ff      	b.n	85392 <udi_msc_cbw_received+0x372>
   85592:	f04f 0300 	mov.w	r3, #0
   85596:	e6fc      	b.n	85392 <udi_msc_cbw_received+0x372>
   85598:	bd70      	pop	{r4, r5, r6, pc}
   8559a:	b240      	sxtb	r0, r0
   8559c:	2800      	cmp	r0, #0
   8559e:	f43f af0a 	beq.w	853b6 <udi_msc_cbw_received+0x396>
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		udi_msc_inquiry_data.product_id[i] = ' ';
   855a2:	18c8      	adds	r0, r1, r3
   855a4:	7402      	strb	r2, [r0, #16]
		i++;
   855a6:	f103 0301 	add.w	r3, r3, #1
   855aa:	b2db      	uxtb	r3, r3
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   855ac:	2b10      	cmp	r3, #16
   855ae:	f47f af02 	bne.w	853b6 <udi_msc_cbw_received+0x396>
   855b2:	e70d      	b.n	853d0 <udi_msc_cbw_received+0x3b0>
   855b4:	00084c15 	.word	0x00084c15
   855b8:	00084cc9 	.word	0x00084cc9
   855bc:	00084c31 	.word	0x00084c31
   855c0:	00084c4d 	.word	0x00084c4d
   855c4:	200714fc 	.word	0x200714fc
   855c8:	00084d59 	.word	0x00084d59

000855cc <udi_msc_setup>:
	UDI_MSC_DISABLE_EXT();
}


bool udi_msc_setup(void)
{
   855cc:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
   855ce:	f641 4314 	movw	r3, #7188	; 0x1c14
   855d2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   855d6:	7818      	ldrb	r0, [r3, #0]
   855d8:	f010 0f80 	tst.w	r0, #128	; 0x80
   855dc:	d025      	beq.n	8562a <udi_msc_setup+0x5e>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   855de:	f000 0260 	and.w	r2, r0, #96	; 0x60
   855e2:	2a20      	cmp	r2, #32
   855e4:	d156      	bne.n	85694 <udi_msc_setup+0xc8>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   855e6:	f641 4314 	movw	r3, #7188	; 0x1c14
   855ea:	f2c2 0307 	movt	r3, #8199	; 0x2007
   855ee:	7858      	ldrb	r0, [r3, #1]
   855f0:	28fe      	cmp	r0, #254	; 0xfe
   855f2:	d152      	bne.n	8569a <udi_msc_setup+0xce>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
   855f4:	f641 4114 	movw	r1, #7188	; 0x1c14
   855f8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   855fc:	88ca      	ldrh	r2, [r1, #6]
   855fe:	2a01      	cmp	r2, #1
   85600:	d14e      	bne.n	856a0 <udi_msc_setup+0xd4>
					return false;	// Error for USB host
				if (0 != udd_g_ctrlreq.req.wValue)
   85602:	f641 4314 	movw	r3, #7188	; 0x1c14
   85606:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8560a:	8858      	ldrh	r0, [r3, #2]
   8560c:	2800      	cmp	r0, #0
   8560e:	d14a      	bne.n	856a6 <udi_msc_setup+0xda>
					return false;
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
   85610:	f641 4114 	movw	r1, #7188	; 0x1c14
   85614:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85618:	f241 42d8 	movw	r2, #5336	; 0x14d8
   8561c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85620:	608a      	str	r2, [r1, #8]
				udd_g_ctrlreq.payload_size = 1;
   85622:	f04f 0001 	mov.w	r0, #1
   85626:	8188      	strh	r0, [r1, #12]
				return true;
   85628:	bd10      	pop	{r4, pc}
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8562a:	f000 0160 	and.w	r1, r0, #96	; 0x60
   8562e:	2920      	cmp	r1, #32
   85630:	d13c      	bne.n	856ac <udi_msc_setup+0xe0>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   85632:	f641 4214 	movw	r2, #7188	; 0x1c14
   85636:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8563a:	7853      	ldrb	r3, [r2, #1]
   8563c:	2bff      	cmp	r3, #255	; 0xff
   8563e:	d138      	bne.n	856b2 <udi_msc_setup+0xe6>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
   85640:	f641 4014 	movw	r0, #7188	; 0x1c14
   85644:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85648:	88c1      	ldrh	r1, [r0, #6]
   8564a:	2900      	cmp	r1, #0
   8564c:	d134      	bne.n	856b8 <udi_msc_setup+0xec>
					return false;
				if (0 != udd_g_ctrlreq.req.wValue)
   8564e:	f641 4214 	movw	r2, #7188	; 0x1c14
   85652:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85656:	8853      	ldrh	r3, [r2, #2]
   85658:	2b00      	cmp	r3, #0
   8565a:	d130      	bne.n	856be <udi_msc_setup+0xf2>
					return false;
				udi_msc_b_cbw_invalid = false;
   8565c:	f241 44d4 	movw	r4, #5332	; 0x14d4
   85660:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85664:	7023      	strb	r3, [r4, #0]
				udi_msc_b_trans_req = false;
   85666:	f241 409e 	movw	r0, #5278	; 0x149e
   8566a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8566e:	7003      	strb	r3, [r0, #0]
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
   85670:	f04f 0002 	mov.w	r0, #2
   85674:	f248 6435 	movw	r4, #34357	; 0x8635
   85678:	f2c0 0408 	movt	r4, #8
   8567c:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
   8567e:	f04f 0081 	mov.w	r0, #129	; 0x81
   85682:	47a0      	blx	r4
				// Restart by CBW wait
				udi_msc_cbw_wait();
   85684:	f644 51c5 	movw	r1, #19909	; 0x4dc5
   85688:	f2c0 0108 	movt	r1, #8
   8568c:	4788      	blx	r1
				return true;
   8568e:	f04f 0001 	mov.w	r0, #1
   85692:	bd10      	pop	{r4, pc}
			}
		}
	}
	return false;	// Not supported request
   85694:	f04f 0000 	mov.w	r0, #0
   85698:	bd10      	pop	{r4, pc}
   8569a:	f04f 0000 	mov.w	r0, #0
   8569e:	bd10      	pop	{r4, pc}
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
   856a0:	f04f 0000 	mov.w	r0, #0
   856a4:	bd10      	pop	{r4, pc}
				if (0 != udd_g_ctrlreq.req.wValue)
					return false;
   856a6:	f04f 0000 	mov.w	r0, #0
   856aa:	bd10      	pop	{r4, pc}
				udi_msc_cbw_wait();
				return true;
			}
		}
	}
	return false;	// Not supported request
   856ac:	f04f 0000 	mov.w	r0, #0
   856b0:	bd10      	pop	{r4, pc}
   856b2:	f04f 0000 	mov.w	r0, #0
   856b6:	bd10      	pop	{r4, pc}
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
   856b8:	f04f 0000 	mov.w	r0, #0
   856bc:	bd10      	pop	{r4, pc}
				if (0 != udd_g_ctrlreq.req.wValue)
					return false;
   856be:	f04f 0000 	mov.w	r0, #0
				return true;
			}
		}
	}
	return false;	// Not supported request
}
   856c2:	bd10      	pop	{r4, pc}

000856c4 <udi_msc_disable>:
	return true;
}


void udi_msc_disable(void)
{
   856c4:	b508      	push	{r3, lr}
	udi_msc_b_trans_req = false;
   856c6:	f241 439e 	movw	r3, #5278	; 0x149e
   856ca:	f2c2 0307 	movt	r3, #8199	; 0x2007
   856ce:	f04f 0200 	mov.w	r2, #0
   856d2:	701a      	strb	r2, [r3, #0]
	UDI_MSC_DISABLE_EXT();
   856d4:	f648 4079 	movw	r0, #35961	; 0x8c79
   856d8:	f2c0 0008 	movt	r0, #8
   856dc:	4780      	blx	r0
   856de:	bd08      	pop	{r3, pc}

000856e0 <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
   856e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t lun;
	udi_msc_b_trans_req = false;
   856e2:	f04f 0300 	mov.w	r3, #0
   856e6:	f241 429e 	movw	r2, #5278	; 0x149e
   856ea:	f2c2 0207 	movt	r2, #8199	; 0x2007
   856ee:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
   856f0:	f241 40d4 	movw	r0, #5332	; 0x14d4
   856f4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   856f8:	7003      	strb	r3, [r0, #0]
	udi_msc_nb_lun = get_nb_lun();
   856fa:	f244 119d 	movw	r1, #16797	; 0x419d
   856fe:	f2c0 0108 	movt	r1, #8
   85702:	4788      	blx	r1
	if (0 == udi_msc_nb_lun)
   85704:	b928      	cbnz	r0, 85712 <udi_msc_enable+0x32>
bool udi_msc_enable(void)
{
	uint8_t lun;
	udi_msc_b_trans_req = false;
	udi_msc_b_cbw_invalid = false;
	udi_msc_nb_lun = get_nb_lun();
   85706:	f241 42d8 	movw	r2, #5336	; 0x14d8
   8570a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8570e:	7010      	strb	r0, [r2, #0]
   85710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (0 == udi_msc_nb_lun)
		return false; // No lun available, then not authorize to enable interface
	udi_msc_nb_lun--;
   85712:	f100 30ff 	add.w	r0, r0, #4294967295
   85716:	f241 42d8 	movw	r2, #5336	; 0x14d8
   8571a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8571e:	7010      	strb	r0, [r2, #0]
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
   85720:	f648 4169 	movw	r1, #35945	; 0x8c69
   85724:	f2c0 0108 	movt	r1, #8
   85728:	4788      	blx	r1
   8572a:	b1d8      	cbz	r0, 85764 <udi_msc_enable+0x84>
   8572c:	f04f 0400 	mov.w	r4, #0
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
		mem_unload(lun, false);
   85730:	4627      	mov	r7, r4
   85732:	f244 16d5 	movw	r6, #16853	; 0x41d5
   85736:	f2c0 0608 	movt	r6, #8
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
   8573a:	f241 45d8 	movw	r5, #5336	; 0x14d8
   8573e:	f2c2 0507 	movt	r5, #8199	; 0x2007
		mem_unload(lun, false);
   85742:	4620      	mov	r0, r4
   85744:	4639      	mov	r1, r7
   85746:	47b0      	blx	r6
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
   85748:	f104 0401 	add.w	r4, r4, #1
   8574c:	b2e4      	uxtb	r4, r4
   8574e:	782b      	ldrb	r3, [r5, #0]
   85750:	42a3      	cmp	r3, r4
   85752:	d2f6      	bcs.n	85742 <udi_msc_enable+0x62>
		mem_unload(lun, false);
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
   85754:	f644 50c5 	movw	r0, #19909	; 0x4dc5
   85758:	f2c0 0008 	movt	r0, #8
   8575c:	4780      	blx	r0
	return true;
   8575e:	f04f 0001 	mov.w	r0, #1
   85762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // No lun available, then not authorize to enable interface
	udi_msc_nb_lun--;
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
   85764:	f04f 0000 	mov.w	r0, #0
		mem_unload(lun, false);
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
	return true;
}
   85768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8576a:	bf00      	nop

0008576c <udi_msc_process_trans>:
	UDI_MSC_NOTIFY_TRANS_EXT();
}


bool udi_msc_process_trans(void)
{
   8576c:	b508      	push	{r3, lr}
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
   8576e:	f241 439e 	movw	r3, #5278	; 0x149e
   85772:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85776:	7818      	ldrb	r0, [r3, #0]
   85778:	2800      	cmp	r0, #0
   8577a:	d059      	beq.n	85830 <udi_msc_process_trans+0xc4>
		return false;	// No Transfer request to do
	udi_msc_b_trans_req = false;
   8577c:	f241 419e 	movw	r1, #5278	; 0x149e
   85780:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85784:	f04f 0200 	mov.w	r2, #0
   85788:	700a      	strb	r2, [r1, #0]

	// Start transfer
	if (udi_msc_b_read) {
   8578a:	f241 43f8 	movw	r3, #5368	; 0x14f8
   8578e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85792:	7818      	ldrb	r0, [r3, #0]
   85794:	b1a0      	cbz	r0, 857c0 <udi_msc_process_trans+0x54>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
   85796:	f241 40b4 	movw	r0, #5300	; 0x14b4
   8579a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8579e:	7b40      	ldrb	r0, [r0, #13]
   857a0:	f241 41e0 	movw	r1, #5344	; 0x14e0
   857a4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   857a8:	6809      	ldr	r1, [r1, #0]
   857aa:	f241 42dc 	movw	r2, #5340	; 0x14dc
   857ae:	f2c2 0207 	movt	r2, #8199	; 0x2007
   857b2:	8812      	ldrh	r2, [r2, #0]
   857b4:	f244 2329 	movw	r3, #16937	; 0x4229
   857b8:	f2c0 0308 	movt	r3, #8
   857bc:	4798      	blx	r3
   857be:	e013      	b.n	857e8 <udi_msc_process_trans+0x7c>
				udi_msc_nb_block);
	} else {
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
   857c0:	f241 41b4 	movw	r1, #5300	; 0x14b4
   857c4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   857c8:	7b48      	ldrb	r0, [r1, #13]
   857ca:	f241 42e0 	movw	r2, #5344	; 0x14e0
   857ce:	f2c2 0207 	movt	r2, #8199	; 0x2007
   857d2:	6811      	ldr	r1, [r2, #0]
   857d4:	f241 43dc 	movw	r3, #5340	; 0x14dc
   857d8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   857dc:	881a      	ldrh	r2, [r3, #0]
   857de:	f244 2345 	movw	r3, #16965	; 0x4245
   857e2:	f2c0 0308 	movt	r3, #8
   857e6:	4798      	blx	r3
				udi_msc_nb_block);
	}

	// Check status of transfer
	switch (status) {
   857e8:	2802      	cmp	r0, #2
   857ea:	d00e      	beq.n	8580a <udi_msc_process_trans+0x9e>
   857ec:	2803      	cmp	r0, #3
   857ee:	d006      	beq.n	857fe <udi_msc_process_trans+0x92>
   857f0:	b988      	cbnz	r0, 85816 <udi_msc_process_trans+0xaa>
	case CTRL_GOOD:
		udi_msc_sense_pass();
   857f2:	f644 31b1 	movw	r1, #19377	; 0x4bb1
   857f6:	f2c0 0108 	movt	r1, #8
   857fa:	4788      	blx	r1
		break;
   857fc:	e010      	b.n	85820 <udi_msc_process_trans+0xb4>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   857fe:	f644 4215 	movw	r2, #19477	; 0x4c15
   85802:	f2c0 0208 	movt	r2, #8
   85806:	4790      	blx	r2
		break;
   85808:	e00a      	b.n	85820 <udi_msc_process_trans+0xb4>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   8580a:	f644 4331 	movw	r3, #19505	; 0x4c31
   8580e:	f2c0 0308 	movt	r3, #8
   85812:	4798      	blx	r3
		break;
   85814:	e004      	b.n	85820 <udi_msc_process_trans+0xb4>
	default:
	case CTRL_FAIL:
		udi_msc_sense_fail_hardware();
   85816:	f644 404d 	movw	r0, #19533	; 0x4c4d
   8581a:	f2c0 0008 	movt	r0, #8
   8581e:	4780      	blx	r0
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
   85820:	f644 40c9 	movw	r0, #19657	; 0x4cc9
   85824:	f2c0 0008 	movt	r0, #8
   85828:	4780      	blx	r0
	return true;
   8582a:	f04f 0001 	mov.w	r0, #1
   8582e:	bd08      	pop	{r3, pc}
bool udi_msc_process_trans(void)
{
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
		return false;	// No Transfer request to do
   85830:	f04f 0000 	mov.w	r0, #0
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
	return true;
}
   85834:	bd08      	pop	{r3, pc}
   85836:	bf00      	nop

00085838 <udi_msc_trans_block>:
}


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
   85838:	b5f0      	push	{r4, r5, r6, r7, lr}
   8583a:	b083      	sub	sp, #12
   8583c:	460f      	mov	r7, r1
   8583e:	4615      	mov	r5, r2
	if (!udi_msc_b_ack_trans)
   85840:	f240 2404 	movw	r4, #516	; 0x204
   85844:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85848:	7824      	ldrb	r4, [r4, #0]
   8584a:	2c00      	cmp	r4, #0
   8584c:	d03d      	beq.n	858ca <udi_msc_trans_block+0x92>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
   8584e:	f240 2104 	movw	r1, #516	; 0x204
   85852:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85856:	f04f 0600 	mov.w	r6, #0
   8585a:	700e      	strb	r6, [r1, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
   8585c:	42b0      	cmp	r0, r6
   8585e:	bf0c      	ite	eq
   85860:	2002      	moveq	r0, #2
   85862:	2081      	movne	r0, #129	; 0x81
   85864:	2b00      	cmp	r3, #0
   85866:	d141      	bne.n	858ec <udi_msc_trans_block+0xb4>
   85868:	e035      	b.n	858d6 <udi_msc_trans_block+0x9e>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
   8586a:	f240 2304 	movw	r3, #516	; 0x204
   8586e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85872:	f04f 0001 	mov.w	r0, #1
   85876:	7018      	strb	r0, [r3, #0]
		return false;
   85878:	f04f 0000 	mov.w	r0, #0
   8587c:	e040      	b.n	85900 <udi_msc_trans_block+0xc8>
	}
	if (NULL == callback) {
		while (!udi_msc_b_ack_trans);
   8587e:	f240 2204 	movw	r2, #516	; 0x204
   85882:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85886:	7810      	ldrb	r0, [r2, #0]
   85888:	2800      	cmp	r0, #0
   8588a:	d0fc      	beq.n	85886 <udi_msc_trans_block+0x4e>
		if (udi_msc_b_abort_trans) {
   8588c:	f641 4111 	movw	r1, #7185	; 0x1c11
   85890:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85894:	780b      	ldrb	r3, [r1, #0]
   85896:	b9db      	cbnz	r3, 858d0 <udi_msc_trans_block+0x98>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
   85898:	f240 2040 	movw	r0, #576	; 0x240
   8589c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   858a0:	6882      	ldr	r2, [r0, #8]
   858a2:	1b51      	subs	r1, r2, r5
   858a4:	6081      	str	r1, [r0, #8]
		return (!udi_msc_b_abort_trans);
   858a6:	f641 4311 	movw	r3, #7185	; 0x1c11
   858aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   858ae:	7818      	ldrb	r0, [r3, #0]
   858b0:	f080 0001 	eor.w	r0, r0, #1
   858b4:	e024      	b.n	85900 <udi_msc_trans_block+0xc8>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
   858b6:	f240 2140 	movw	r1, #576	; 0x240
   858ba:	f2c2 0107 	movt	r1, #8199	; 0x2007
   858be:	688a      	ldr	r2, [r1, #8]
   858c0:	1b55      	subs	r5, r2, r5
   858c2:	608d      	str	r5, [r1, #8]
	return true;
   858c4:	f04f 0001 	mov.w	r0, #1
   858c8:	e01a      	b.n	85900 <udi_msc_trans_block+0xc8>

bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
	if (!udi_msc_b_ack_trans)
		return false;	// No possible, transfer on going
   858ca:	f04f 0000 	mov.w	r0, #0
   858ce:	e017      	b.n	85900 <udi_msc_trans_block+0xc8>
		return false;
	}
	if (NULL == callback) {
		while (!udi_msc_b_ack_trans);
		if (udi_msc_b_abort_trans) {
			return false;
   858d0:	f04f 0000 	mov.w	r0, #0
   858d4:	e014      	b.n	85900 <udi_msc_trans_block+0xc8>
	if (!udi_msc_b_ack_trans)
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
   858d6:	4b0b      	ldr	r3, [pc, #44]	; (85904 <udi_msc_trans_block+0xcc>)
   858d8:	9300      	str	r3, [sp, #0]
   858da:	f04f 0100 	mov.w	r1, #0
   858de:	463a      	mov	r2, r7
   858e0:	462b      	mov	r3, r5
   858e2:	4c09      	ldr	r4, [pc, #36]	; (85908 <udi_msc_trans_block+0xd0>)
   858e4:	47a0      	blx	r4
   858e6:	2800      	cmp	r0, #0
   858e8:	d1c9      	bne.n	8587e <udi_msc_trans_block+0x46>
   858ea:	e7be      	b.n	8586a <udi_msc_trans_block+0x32>
   858ec:	9300      	str	r3, [sp, #0]
   858ee:	f04f 0100 	mov.w	r1, #0
   858f2:	463a      	mov	r2, r7
   858f4:	462b      	mov	r3, r5
   858f6:	4c04      	ldr	r4, [pc, #16]	; (85908 <udi_msc_trans_block+0xd0>)
   858f8:	47a0      	blx	r4
   858fa:	2800      	cmp	r0, #0
   858fc:	d1db      	bne.n	858b6 <udi_msc_trans_block+0x7e>
   858fe:	e7b4      	b.n	8586a <udi_msc_trans_block+0x32>
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
	return true;
}
   85900:	b003      	add	sp, #12
   85902:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85904:	00084b61 	.word	0x00084b61
   85908:	0008802d 	.word	0x0008802d

0008590c <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   8590c:	f241 5308 	movw	r3, #5384	; 0x1508
   85910:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85914:	6818      	ldr	r0, [r3, #0]
   85916:	6801      	ldr	r1, [r0, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   85918:	884a      	ldrh	r2, [r1, #2]
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
   8591a:	1888      	adds	r0, r1, r2
   8591c:	4770      	bx	lr
   8591e:	bf00      	nop

00085920 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   85920:	b538      	push	{r3, r4, r5, lr}
   85922:	4605      	mov	r5, r0
   85924:	460c      	mov	r4, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   85926:	f645 130d 	movw	r3, #22797	; 0x590d
   8592a:	f2c0 0308 	movt	r3, #8
   8592e:	4798      	blx	r3
   85930:	4602      	mov	r2, r0
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   85932:	7828      	ldrb	r0, [r5, #0]
   85934:	1828      	adds	r0, r5, r0
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   85936:	4282      	cmp	r2, r0
   85938:	d911      	bls.n	8595e <udc_next_desc_in_iface+0x3e>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   8593a:	7841      	ldrb	r1, [r0, #1]
   8593c:	2904      	cmp	r1, #4
   8593e:	d011      	beq.n	85964 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   85940:	42a1      	cmp	r1, r4
   85942:	d105      	bne.n	85950 <udc_next_desc_in_iface+0x30>
   85944:	bd38      	pop	{r3, r4, r5, pc}
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   85946:	7841      	ldrb	r1, [r0, #1]
   85948:	2904      	cmp	r1, #4
   8594a:	d00e      	beq.n	8596a <udc_next_desc_in_iface+0x4a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   8594c:	42a1      	cmp	r1, r4
   8594e:	d00e      	beq.n	8596e <udc_next_desc_in_iface+0x4e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   85950:	7803      	ldrb	r3, [r0, #0]
   85952:	18c0      	adds	r0, r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   85954:	4282      	cmp	r2, r0
   85956:	d8f6      	bhi.n	85946 <udc_next_desc_in_iface+0x26>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
   85958:	f04f 0000 	mov.w	r0, #0
   8595c:	bd38      	pop	{r3, r4, r5, pc}
   8595e:	f04f 0000 	mov.w	r0, #0
   85962:	bd38      	pop	{r3, r4, r5, pc}
   85964:	f04f 0000 	mov.w	r0, #0
   85968:	bd38      	pop	{r3, r4, r5, pc}
   8596a:	f04f 0000 	mov.w	r0, #0
}
   8596e:	bd38      	pop	{r3, r4, r5, pc}

00085970 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   85970:	b570      	push	{r4, r5, r6, lr}
   85972:	4605      	mov	r5, r0
   85974:	460e      	mov	r6, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   85976:	f241 5310 	movw	r3, #5392	; 0x1510
   8597a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8597e:	7818      	ldrb	r0, [r3, #0]
   85980:	2800      	cmp	r0, #0
   85982:	d031      	beq.n	859e8 <udc_update_iface_desc+0x78>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   85984:	f241 5108 	movw	r1, #5384	; 0x1508
   85988:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8598c:	680a      	ldr	r2, [r1, #0]
   8598e:	6814      	ldr	r4, [r2, #0]
   85990:	7923      	ldrb	r3, [r4, #4]
   85992:	42ab      	cmp	r3, r5
   85994:	d92b      	bls.n	859ee <udc_update_iface_desc+0x7e>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   85996:	f241 5014 	movw	r0, #5396	; 0x1514
   8599a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8599e:	6004      	str	r4, [r0, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   859a0:	f645 110d 	movw	r1, #22797	; 0x590d
   859a4:	f2c0 0108 	movt	r1, #8
   859a8:	4788      	blx	r1
	while (ptr_end_desc >
   859aa:	4284      	cmp	r4, r0
   859ac:	d222      	bcs.n	859f4 <udc_update_iface_desc+0x84>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   859ae:	7862      	ldrb	r2, [r4, #1]
   859b0:	2a04      	cmp	r2, #4
   859b2:	d10d      	bne.n	859d0 <udc_update_iface_desc+0x60>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   859b4:	78a3      	ldrb	r3, [r4, #2]
   859b6:	42ab      	cmp	r3, r5
   859b8:	d10a      	bne.n	859d0 <udc_update_iface_desc+0x60>
   859ba:	78e1      	ldrb	r1, [r4, #3]
   859bc:	42b1      	cmp	r1, r6
   859be:	d107      	bne.n	859d0 <udc_update_iface_desc+0x60>
   859c0:	f241 5314 	movw	r3, #5396	; 0x1514
   859c4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   859c8:	601c      	str	r4, [r3, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
   859ca:	f04f 0001 	mov.w	r0, #1
   859ce:	bd70      	pop	{r4, r5, r6, pc}
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   859d0:	7822      	ldrb	r2, [r4, #0]
   859d2:	18a4      	adds	r4, r4, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
   859d4:	42a0      	cmp	r0, r4
   859d6:	d8ea      	bhi.n	859ae <udc_update_iface_desc+0x3e>
   859d8:	f241 5014 	movw	r0, #5396	; 0x1514
   859dc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   859e0:	6004      	str	r4, [r0, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   859e2:	f04f 0000 	mov.w	r0, #0
   859e6:	bd70      	pop	{r4, r5, r6, pc}
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
   859e8:	f04f 0000 	mov.w	r0, #0
   859ec:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   859ee:	f04f 0000 	mov.w	r0, #0
   859f2:	bd70      	pop	{r4, r5, r6, pc}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   859f4:	f04f 0000 	mov.w	r0, #0
}
   859f8:	bd70      	pop	{r4, r5, r6, pc}
   859fa:	bf00      	nop

000859fc <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   859fc:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   859fe:	f641 4314 	movw	r3, #7188	; 0x1c14
   85a02:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85a06:	8858      	ldrh	r0, [r3, #2]
   85a08:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   85a0c:	f647 5125 	movw	r1, #32037	; 0x7d25
   85a10:	f2c0 0108 	movt	r1, #8
   85a14:	4788      	blx	r1
   85a16:	bd08      	pop	{r3, pc}

00085a18 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   85a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85a1c:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   85a1e:	f645 1371 	movw	r3, #22897	; 0x5971
   85a22:	f2c0 0308 	movt	r3, #8
   85a26:	4798      	blx	r3
   85a28:	b338      	cbz	r0, 85a7a <udc_iface_enable+0x62>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   85a2a:	f241 5014 	movw	r0, #5396	; 0x1514
   85a2e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85a32:	6804      	ldr	r4, [r0, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   85a34:	f04f 0605 	mov.w	r6, #5
   85a38:	f645 1521 	movw	r5, #22817	; 0x5921
   85a3c:	f2c0 0508 	movt	r5, #8
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   85a40:	f248 1731 	movw	r7, #33073	; 0x8131
   85a44:	f2c0 0708 	movt	r7, #8

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   85a48:	4620      	mov	r0, r4
   85a4a:	4631      	mov	r1, r6
   85a4c:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   85a4e:	4604      	mov	r4, r0
   85a50:	b138      	cbz	r0, 85a62 <udc_iface_enable+0x4a>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   85a52:	7880      	ldrb	r0, [r0, #2]
   85a54:	78e1      	ldrb	r1, [r4, #3]
   85a56:	88a2      	ldrh	r2, [r4, #4]
   85a58:	47b8      	blx	r7
   85a5a:	2800      	cmp	r0, #0
   85a5c:	d1f4      	bne.n	85a48 <udc_iface_enable+0x30>
   85a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   85a62:	f241 5108 	movw	r1, #5384	; 0x1508
   85a66:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85a6a:	680a      	ldr	r2, [r1, #0]
   85a6c:	6853      	ldr	r3, [r2, #4]
   85a6e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
   85a72:	6801      	ldr	r1, [r0, #0]
   85a74:	4788      	blx	r1
   85a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
		return false;
   85a7a:	f04f 0000 	mov.w	r0, #0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
   85a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85a82:	bf00      	nop

00085a84 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   85a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85a88:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   85a8a:	f04f 0100 	mov.w	r1, #0
   85a8e:	f645 1371 	movw	r3, #22897	; 0x5971
   85a92:	f2c0 0308 	movt	r3, #8
   85a96:	4798      	blx	r3
   85a98:	2800      	cmp	r0, #0
   85a9a:	d030      	beq.n	85afe <udc_iface_disable+0x7a>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   85a9c:	f241 5008 	movw	r0, #5384	; 0x1508
   85aa0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85aa4:	6801      	ldr	r1, [r0, #0]
   85aa6:	684a      	ldr	r2, [r1, #4]
   85aa8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   85aac:	f8d8 300c 	ldr.w	r3, [r8, #12]
   85ab0:	4798      	blx	r3
   85ab2:	4601      	mov	r1, r0
   85ab4:	4620      	mov	r0, r4
   85ab6:	f645 1271 	movw	r2, #22897	; 0x5971
   85aba:	f2c0 0208 	movt	r2, #8
   85abe:	4790      	blx	r2
   85ac0:	b308      	cbz	r0, 85b06 <udc_iface_disable+0x82>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   85ac2:	f241 5414 	movw	r4, #5396	; 0x1514
   85ac6:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85aca:	6824      	ldr	r4, [r4, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   85acc:	f04f 0605 	mov.w	r6, #5
   85ad0:	f645 1521 	movw	r5, #22817	; 0x5921
   85ad4:	f2c0 0508 	movt	r5, #8
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   85ad8:	f647 5795 	movw	r7, #32149	; 0x7d95
   85adc:	f2c0 0708 	movt	r7, #8
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   85ae0:	4620      	mov	r0, r4
   85ae2:	4631      	mov	r1, r6
   85ae4:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   85ae6:	4604      	mov	r4, r0
   85ae8:	b110      	cbz	r0, 85af0 <udc_iface_disable+0x6c>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   85aea:	7880      	ldrb	r0, [r0, #2]
   85aec:	47b8      	blx	r7
		}
   85aee:	e7f7      	b.n	85ae0 <udc_iface_disable+0x5c>
	}
#endif

	// Disable interface
	udi_api->disable();
   85af0:	f8d8 0004 	ldr.w	r0, [r8, #4]
   85af4:	4780      	blx	r0
	return true;
   85af6:	f04f 0001 	mov.w	r0, #1
   85afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
   85afe:	f04f 0000 	mov.w	r0, #0
   85b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
		return false;
   85b06:	f04f 0000 	mov.w	r0, #0
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
   85b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85b0e:	bf00      	nop

00085b10 <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   85b10:	b508      	push	{r3, lr}
	udd_enable();
   85b12:	f646 63cd 	movw	r3, #28365	; 0x6ecd
   85b16:	f2c0 0308 	movt	r3, #8
   85b1a:	4798      	blx	r3
   85b1c:	bd08      	pop	{r3, pc}
   85b1e:	bf00      	nop

00085b20 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   85b20:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   85b22:	f241 5310 	movw	r3, #5392	; 0x1510
   85b26:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85b2a:	7818      	ldrb	r0, [r3, #0]
   85b2c:	b1d8      	cbz	r0, 85b66 <udc_reset+0x46>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85b2e:	f241 5108 	movw	r1, #5384	; 0x1508
   85b32:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85b36:	680a      	ldr	r2, [r1, #0]
   85b38:	6813      	ldr	r3, [r2, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   85b3a:	7918      	ldrb	r0, [r3, #4]
   85b3c:	b198      	cbz	r0, 85b66 <udc_reset+0x46>
   85b3e:	f04f 0400 	mov.w	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   85b42:	f645 2685 	movw	r6, #23173	; 0x5a85
   85b46:	f2c0 0608 	movt	r6, #8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85b4a:	f241 5508 	movw	r5, #5384	; 0x1508
   85b4e:	f2c2 0507 	movt	r5, #8199	; 0x2007
				iface_num++) {
			udc_iface_disable(iface_num);
   85b52:	4620      	mov	r0, r4
   85b54:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   85b56:	f104 0401 	add.w	r4, r4, #1
   85b5a:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85b5c:	6829      	ldr	r1, [r5, #0]
   85b5e:	680a      	ldr	r2, [r1, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   85b60:	7913      	ldrb	r3, [r2, #4]
   85b62:	42a3      	cmp	r3, r4
   85b64:	d8f5      	bhi.n	85b52 <udc_reset+0x32>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
   85b66:	f241 5010 	movw	r0, #5392	; 0x1510
   85b6a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85b6e:	f04f 0100 	mov.w	r1, #0
   85b72:	7001      	strb	r1, [r0, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   85b74:	f241 530e 	movw	r3, #5390	; 0x150e
   85b78:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85b7c:	f04f 0201 	mov.w	r2, #1
   85b80:	801a      	strh	r2, [r3, #0]
   85b82:	bd70      	pop	{r4, r5, r6, pc}

00085b84 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
   85b84:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   85b86:	f241 5310 	movw	r3, #5392	; 0x1510
   85b8a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85b8e:	7818      	ldrb	r0, [r3, #0]
   85b90:	b1d8      	cbz	r0, 85bca <udc_sof_notify+0x46>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85b92:	f241 5108 	movw	r1, #5384	; 0x1508
   85b96:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85b9a:	680b      	ldr	r3, [r1, #0]
   85b9c:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   85b9e:	7910      	ldrb	r0, [r2, #4]
   85ba0:	b198      	cbz	r0, 85bca <udc_sof_notify+0x46>
   85ba2:	f04f 0400 	mov.w	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85ba6:	f241 5508 	movw	r5, #5384	; 0x1508
   85baa:	f2c2 0507 	movt	r5, #8199	; 0x2007
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   85bae:	685b      	ldr	r3, [r3, #4]
   85bb0:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   85bb4:	690a      	ldr	r2, [r1, #16]
   85bb6:	b102      	cbz	r2, 85bba <udc_sof_notify+0x36>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   85bb8:	4790      	blx	r2
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   85bba:	f104 0401 	add.w	r4, r4, #1
   85bbe:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85bc0:	682b      	ldr	r3, [r5, #0]
   85bc2:	6818      	ldr	r0, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   85bc4:	7901      	ldrb	r1, [r0, #4]
   85bc6:	42a1      	cmp	r1, r4
   85bc8:	d8f1      	bhi.n	85bae <udc_sof_notify+0x2a>
   85bca:	bd38      	pop	{r3, r4, r5, pc}

00085bcc <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   85bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   85bce:	f641 4314 	movw	r3, #7188	; 0x1c14
   85bd2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85bd6:	f04f 0200 	mov.w	r2, #0
   85bda:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   85bdc:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   85bde:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   85be0:	7818      	ldrb	r0, [r3, #0]
   85be2:	f010 0f80 	tst.w	r0, #128	; 0x80
   85be6:	f000 83da 	beq.w	8639e <udc_process_setup+0x7d2>
		if (udd_g_ctrlreq.req.wLength == 0) {
   85bea:	f641 4114 	movw	r1, #7188	; 0x1c14
   85bee:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85bf2:	88ca      	ldrh	r2, [r1, #6]
   85bf4:	2a00      	cmp	r2, #0
   85bf6:	f040 83d7 	bne.w	863a8 <udc_process_setup+0x7dc>
   85bfa:	e3c4      	b.n	86386 <udc_process_setup+0x7ba>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   85bfc:	f010 031f 	ands.w	r3, r0, #31
   85c00:	f040 8115 	bne.w	85e2e <udc_process_setup+0x262>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   85c04:	f641 4014 	movw	r0, #7188	; 0x1c14
   85c08:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85c0c:	7841      	ldrb	r1, [r0, #1]
   85c0e:	2906      	cmp	r1, #6
   85c10:	d018      	beq.n	85c44 <udc_process_setup+0x78>
   85c12:	2908      	cmp	r1, #8
   85c14:	f000 80f8 	beq.w	85e08 <udc_process_setup+0x23c>
   85c18:	2900      	cmp	r1, #0
   85c1a:	f040 8108 	bne.w	85e2e <udc_process_setup+0x262>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   85c1e:	2a02      	cmp	r2, #2
   85c20:	d10d      	bne.n	85c3e <udc_process_setup+0x72>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   85c22:	f241 500e 	movw	r0, #5390	; 0x150e
   85c26:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85c2a:	f04f 0102 	mov.w	r1, #2
   85c2e:	f647 5385 	movw	r3, #32133	; 0x7d85
   85c32:	f2c0 0308 	movt	r3, #8
   85c36:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   85c38:	f04f 0001 	mov.w	r0, #1
   85c3c:	e328      	b.n	86290 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
   85c3e:	f04f 0000 	mov.w	r0, #0
   85c42:	e325      	b.n	86290 <udc_process_setup+0x6c4>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   85c44:	f641 4414 	movw	r4, #7188	; 0x1c14
   85c48:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85c4c:	8860      	ldrh	r0, [r4, #2]
   85c4e:	b2c4      	uxtb	r4, r0

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   85c50:	ea4f 2110 	mov.w	r1, r0, lsr #8
   85c54:	f101 33ff 	add.w	r3, r1, #4294967295
   85c58:	2b06      	cmp	r3, #6
   85c5a:	f200 80c3 	bhi.w	85de4 <udc_process_setup+0x218>
   85c5e:	e8df f013 	tbh	[pc, r3, lsl #1]
   85c62:	0007      	.short	0x0007
   85c64:	0078001b 	.word	0x0078001b
   85c68:	00c100c1 	.word	0x00c100c1
   85c6c:	00510044 	.word	0x00510044
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   85c70:	f647 520d 	movw	r2, #32013	; 0x7d0d
   85c74:	f2c0 0208 	movt	r2, #8
   85c78:	4790      	blx	r2
   85c7a:	b930      	cbnz	r0, 85c8a <udc_process_setup+0xbe>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
   85c7c:	48a3      	ldr	r0, [pc, #652]	; (85f0c <udc_process_setup+0x340>)
   85c7e:	6883      	ldr	r3, [r0, #8]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
			udd_set_setup_payload(
   85c80:	4618      	mov	r0, r3
   85c82:	7819      	ldrb	r1, [r3, #0]
   85c84:	4aa2      	ldr	r2, [pc, #648]	; (85f10 <udc_process_setup+0x344>)
   85c86:	4790      	blx	r2
   85c88:	e09c      	b.n	85dc4 <udc_process_setup+0x1f8>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
   85c8a:	4ba0      	ldr	r3, [pc, #640]	; (85f0c <udc_process_setup+0x340>)
   85c8c:	6819      	ldr	r1, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
   85c8e:	4608      	mov	r0, r1
   85c90:	7809      	ldrb	r1, [r1, #0]
   85c92:	4a9f      	ldr	r2, [pc, #636]	; (85f10 <udc_process_setup+0x344>)
   85c94:	4790      	blx	r2
   85c96:	e095      	b.n	85dc4 <udc_process_setup+0x1f8>
		break;

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   85c98:	f647 510d 	movw	r1, #32013	; 0x7d0d
   85c9c:	f2c0 0108 	movt	r1, #8
   85ca0:	4788      	blx	r1
   85ca2:	b170      	cbz	r0, 85cc2 <udc_process_setup+0xf6>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   85ca4:	4899      	ldr	r0, [pc, #612]	; (85f0c <udc_process_setup+0x340>)
   85ca6:	6881      	ldr	r1, [r0, #8]
   85ca8:	7c4a      	ldrb	r2, [r1, #17]
   85caa:	42a2      	cmp	r2, r4
   85cac:	f240 809d 	bls.w	85dea <udc_process_setup+0x21e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   85cb0:	4b96      	ldr	r3, [pc, #600]	; (85f0c <udc_process_setup+0x340>)
   85cb2:	6918      	ldr	r0, [r3, #16]
   85cb4:	f850 1034 	ldr.w	r1, [r0, r4, lsl #3]
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   85cb8:	4608      	mov	r0, r1
   85cba:	8849      	ldrh	r1, [r1, #2]
   85cbc:	4a94      	ldr	r2, [pc, #592]	; (85f10 <udc_process_setup+0x344>)
   85cbe:	4790      	blx	r2
   85cc0:	e00d      	b.n	85cde <udc_process_setup+0x112>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   85cc2:	4b92      	ldr	r3, [pc, #584]	; (85f0c <udc_process_setup+0x340>)
   85cc4:	681a      	ldr	r2, [r3, #0]
   85cc6:	7c50      	ldrb	r0, [r2, #17]
   85cc8:	42a0      	cmp	r0, r4
   85cca:	f240 8091 	bls.w	85df0 <udc_process_setup+0x224>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   85cce:	498f      	ldr	r1, [pc, #572]	; (85f0c <udc_process_setup+0x340>)
   85cd0:	684b      	ldr	r3, [r1, #4]
   85cd2:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   85cd6:	4610      	mov	r0, r2
   85cd8:	8851      	ldrh	r1, [r2, #2]
   85cda:	4b8d      	ldr	r3, [pc, #564]	; (85f10 <udc_process_setup+0x344>)
   85cdc:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   85cde:	4b8d      	ldr	r3, [pc, #564]	; (85f14 <udc_process_setup+0x348>)
   85ce0:	6898      	ldr	r0, [r3, #8]
   85ce2:	f04f 0102 	mov.w	r1, #2
   85ce6:	7041      	strb	r1, [r0, #1]
   85ce8:	e06c      	b.n	85dc4 <udc_process_setup+0x1f8>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
				udc_config.qualifier->bLength);
   85cea:	f240 1360 	movw	r3, #352	; 0x160
   85cee:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85cf2:	68d9      	ldr	r1, [r3, #12]
		break;

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   85cf4:	4608      	mov	r0, r1
   85cf6:	7809      	ldrb	r1, [r1, #0]
   85cf8:	f647 5285 	movw	r2, #32133	; 0x7d85
   85cfc:	f2c0 0208 	movt	r2, #8
   85d00:	4790      	blx	r2
   85d02:	e05f      	b.n	85dc4 <udc_process_setup+0x1f8>
				udc_config.qualifier->bLength);
		break;

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   85d04:	f647 520d 	movw	r2, #32013	; 0x7d0d
   85d08:	f2c0 0208 	movt	r2, #8
   85d0c:	4790      	blx	r2
   85d0e:	b968      	cbnz	r0, 85d2c <udc_process_setup+0x160>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   85d10:	4a7e      	ldr	r2, [pc, #504]	; (85f0c <udc_process_setup+0x340>)
   85d12:	6890      	ldr	r0, [r2, #8]
   85d14:	7c41      	ldrb	r1, [r0, #17]
   85d16:	42a1      	cmp	r1, r4
   85d18:	d96d      	bls.n	85df6 <udc_process_setup+0x22a>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   85d1a:	4b7c      	ldr	r3, [pc, #496]	; (85f0c <udc_process_setup+0x340>)
   85d1c:	691a      	ldr	r2, [r3, #16]
   85d1e:	f852 1034 	ldr.w	r1, [r2, r4, lsl #3]
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   85d22:	4608      	mov	r0, r1
   85d24:	8849      	ldrh	r1, [r1, #2]
   85d26:	4b7a      	ldr	r3, [pc, #488]	; (85f10 <udc_process_setup+0x344>)
   85d28:	4798      	blx	r3
   85d2a:	e00c      	b.n	85d46 <udc_process_setup+0x17a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   85d2c:	4877      	ldr	r0, [pc, #476]	; (85f0c <udc_process_setup+0x340>)
   85d2e:	6801      	ldr	r1, [r0, #0]
   85d30:	7c4b      	ldrb	r3, [r1, #17]
   85d32:	42a3      	cmp	r3, r4
   85d34:	d962      	bls.n	85dfc <udc_process_setup+0x230>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   85d36:	4a75      	ldr	r2, [pc, #468]	; (85f0c <udc_process_setup+0x340>)
   85d38:	6850      	ldr	r0, [r2, #4]
   85d3a:	f850 1034 	ldr.w	r1, [r0, r4, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   85d3e:	4608      	mov	r0, r1
   85d40:	8849      	ldrh	r1, [r1, #2]
   85d42:	4b73      	ldr	r3, [pc, #460]	; (85f10 <udc_process_setup+0x344>)
   85d44:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   85d46:	4873      	ldr	r0, [pc, #460]	; (85f14 <udc_process_setup+0x348>)
   85d48:	6881      	ldr	r1, [r0, #8]
   85d4a:	f04f 0207 	mov.w	r2, #7
   85d4e:	704a      	strb	r2, [r1, #1]
   85d50:	e038      	b.n	85dc4 <udc_process_setup+0x1f8>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   85d52:	b2c0      	uxtb	r0, r0
   85d54:	2803      	cmp	r0, #3
   85d56:	d80b      	bhi.n	85d70 <udc_process_setup+0x1a4>
   85d58:	e8df f010 	tbh	[pc, r0, lsl #1]
   85d5c:	000e0004 	.word	0x000e0004
   85d60:	032f032b 	.word	0x032f032b
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   85d64:	486c      	ldr	r0, [pc, #432]	; (85f18 <udc_process_setup+0x34c>)
   85d66:	f04f 0104 	mov.w	r1, #4
   85d6a:	4a69      	ldr	r2, [pc, #420]	; (85f10 <udc_process_setup+0x344>)
   85d6c:	4790      	blx	r2
   85d6e:	e029      	b.n	85dc4 <udc_process_setup+0x1f8>
		str = udc_get_string_serial_name();
		break;
#endif
	default:
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
   85d70:	486a      	ldr	r0, [pc, #424]	; (85f1c <udc_process_setup+0x350>)
   85d72:	4780      	blx	r0
   85d74:	bb30      	cbnz	r0, 85dc4 <udc_process_setup+0x1f8>
   85d76:	e28b      	b.n	86290 <udc_process_setup+0x6c4>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
   85d78:	4969      	ldr	r1, [pc, #420]	; (85f20 <udc_process_setup+0x354>)
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   85d7a:	f04f 0008 	mov.w	r0, #8
   85d7e:	f04f 0300 	mov.w	r3, #0
   85d82:	4a68      	ldr	r2, [pc, #416]	; (85f24 <udc_process_setup+0x358>)
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   85d84:	5ccc      	ldrb	r4, [r1, r3]
   85d86:	f822 4f02 	strh.w	r4, [r2, #2]!
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   85d8a:	f103 0301 	add.w	r3, r3, #1
   85d8e:	2801      	cmp	r0, #1
   85d90:	f200 8317 	bhi.w	863c2 <udc_process_setup+0x7f6>
   85d94:	e00e      	b.n	85db4 <udc_process_setup+0x1e8>
   85d96:	f102 0402 	add.w	r4, r2, #2
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   85d9a:	5ccd      	ldrb	r5, [r1, r3]
   85d9c:	8055      	strh	r5, [r2, #2]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   85d9e:	f103 0301 	add.w	r3, r3, #1
   85da2:	f102 0204 	add.w	r2, r2, #4
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   85da6:	5ccd      	ldrb	r5, [r1, r3]
   85da8:	8065      	strh	r5, [r4, #2]
   85daa:	f103 0301 	add.w	r3, r3, #1
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   85dae:	b2dc      	uxtb	r4, r3
   85db0:	4284      	cmp	r4, r0
   85db2:	d3f0      	bcc.n	85d96 <udc_process_setup+0x1ca>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   85db4:	ea4f 0140 	mov.w	r1, r0, lsl #1
   85db8:	f101 0102 	add.w	r1, r1, #2
   85dbc:	4859      	ldr	r0, [pc, #356]	; (85f24 <udc_process_setup+0x358>)
   85dbe:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   85dc0:	4b53      	ldr	r3, [pc, #332]	; (85f10 <udc_process_setup+0x344>)
   85dc2:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   85dc4:	f641 4114 	movw	r1, #7188	; 0x1c14
   85dc8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85dcc:	88c8      	ldrh	r0, [r1, #6]
   85dce:	898b      	ldrh	r3, [r1, #12]
   85dd0:	4283      	cmp	r3, r0
   85dd2:	d916      	bls.n	85e02 <udc_process_setup+0x236>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   85dd4:	f641 4214 	movw	r2, #7188	; 0x1c14
   85dd8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85ddc:	8190      	strh	r0, [r2, #12]
	}
	return true;
   85dde:	f04f 0001 	mov.w	r0, #1
   85de2:	e255      	b.n	86290 <udc_process_setup+0x6c4>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   85de4:	f04f 0000 	mov.w	r0, #0
   85de8:	e252      	b.n	86290 <udc_process_setup+0x6c4>
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
   85dea:	f04f 0000 	mov.w	r0, #0
   85dee:	e24f      	b.n	86290 <udc_process_setup+0x6c4>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
   85df0:	f04f 0000 	mov.w	r0, #0
   85df4:	e24c      	b.n	86290 <udc_process_setup+0x6c4>
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
   85df6:	f04f 0000 	mov.w	r0, #0
   85dfa:	e249      	b.n	86290 <udc_process_setup+0x6c4>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
   85dfc:	f04f 0000 	mov.w	r0, #0
   85e00:	e246      	b.n	86290 <udc_process_setup+0x6c4>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
   85e02:	f04f 0001 	mov.w	r0, #1
   85e06:	e243      	b.n	86290 <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
   85e08:	2a01      	cmp	r2, #1
   85e0a:	d10d      	bne.n	85e28 <udc_process_setup+0x25c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   85e0c:	f241 5010 	movw	r0, #5392	; 0x1510
   85e10:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85e14:	f04f 0101 	mov.w	r1, #1
   85e18:	f647 5285 	movw	r2, #32133	; 0x7d85
   85e1c:	f2c0 0208 	movt	r2, #8
   85e20:	4790      	blx	r2
	return true;
   85e22:	f04f 0001 	mov.w	r0, #1
   85e26:	e233      	b.n	86290 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
   85e28:	f04f 0000 	mov.w	r0, #0
   85e2c:	e230      	b.n	86290 <udc_process_setup+0x6c4>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   85e2e:	2b01      	cmp	r3, #1
   85e30:	d134      	bne.n	85e9c <udc_process_setup+0x2d0>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   85e32:	f641 4014 	movw	r0, #7188	; 0x1c14
   85e36:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85e3a:	7841      	ldrb	r1, [r0, #1]
   85e3c:	290a      	cmp	r1, #10
   85e3e:	d12d      	bne.n	85e9c <udc_process_setup+0x2d0>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   85e40:	2a01      	cmp	r2, #1
   85e42:	d11f      	bne.n	85e84 <udc_process_setup+0x2b8>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   85e44:	4838      	ldr	r0, [pc, #224]	; (85f28 <udc_process_setup+0x35c>)
   85e46:	7801      	ldrb	r1, [r0, #0]
   85e48:	b1f9      	cbz	r1, 85e8a <udc_process_setup+0x2be>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   85e4a:	4c32      	ldr	r4, [pc, #200]	; (85f14 <udc_process_setup+0x348>)
   85e4c:	7924      	ldrb	r4, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   85e4e:	4d37      	ldr	r5, [pc, #220]	; (85f2c <udc_process_setup+0x360>)
   85e50:	682d      	ldr	r5, [r5, #0]
   85e52:	682b      	ldr	r3, [r5, #0]
   85e54:	791a      	ldrb	r2, [r3, #4]
   85e56:	42a2      	cmp	r2, r4
   85e58:	d91a      	bls.n	85e90 <udc_process_setup+0x2c4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   85e5a:	4620      	mov	r0, r4
   85e5c:	f04f 0100 	mov.w	r1, #0
   85e60:	4b33      	ldr	r3, [pc, #204]	; (85f30 <udc_process_setup+0x364>)
   85e62:	4798      	blx	r3
   85e64:	b1b8      	cbz	r0, 85e96 <udc_process_setup+0x2ca>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   85e66:	6868      	ldr	r0, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   85e68:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
   85e6c:	68ca      	ldr	r2, [r1, #12]
   85e6e:	4790      	blx	r2
   85e70:	4b30      	ldr	r3, [pc, #192]	; (85f34 <udc_process_setup+0x368>)
   85e72:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   85e74:	4618      	mov	r0, r3
   85e76:	f04f 0101 	mov.w	r1, #1
   85e7a:	4a25      	ldr	r2, [pc, #148]	; (85f10 <udc_process_setup+0x344>)
   85e7c:	4790      	blx	r2
	return true;
   85e7e:	f04f 0001 	mov.w	r0, #1
   85e82:	e205      	b.n	86290 <udc_process_setup+0x6c4>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
   85e84:	f04f 0000 	mov.w	r0, #0
   85e88:	e202      	b.n	86290 <udc_process_setup+0x6c4>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
   85e8a:	f04f 0000 	mov.w	r0, #0
   85e8e:	e1ff      	b.n	86290 <udc_process_setup+0x6c4>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   85e90:	f04f 0000 	mov.w	r0, #0
   85e94:	e1fc      	b.n	86290 <udc_process_setup+0x6c4>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
   85e96:	f04f 0000 	mov.w	r0, #0
   85e9a:	e1f9      	b.n	86290 <udc_process_setup+0x6c4>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   85e9c:	2b02      	cmp	r3, #2
   85e9e:	f040 81f9 	bne.w	86294 <udc_process_setup+0x6c8>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   85ea2:	f641 4314 	movw	r3, #7188	; 0x1c14
   85ea6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85eaa:	7858      	ldrb	r0, [r3, #1]
   85eac:	2800      	cmp	r0, #0
   85eae:	f040 81d5 	bne.w	8625c <udc_process_setup+0x690>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   85eb2:	2a02      	cmp	r2, #2
   85eb4:	d10d      	bne.n	85ed2 <udc_process_setup+0x306>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   85eb6:	4a17      	ldr	r2, [pc, #92]	; (85f14 <udc_process_setup+0x348>)
   85eb8:	7910      	ldrb	r0, [r2, #4]
   85eba:	491f      	ldr	r1, [pc, #124]	; (85f38 <udc_process_setup+0x36c>)
   85ebc:	4788      	blx	r1
   85ebe:	4b1f      	ldr	r3, [pc, #124]	; (85f3c <udc_process_setup+0x370>)
   85ec0:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   85ec2:	4618      	mov	r0, r3
   85ec4:	f04f 0102 	mov.w	r1, #2
   85ec8:	4a11      	ldr	r2, [pc, #68]	; (85f10 <udc_process_setup+0x344>)
   85eca:	4790      	blx	r2
			sizeof(udc_ep_status));
	return true;
   85ecc:	f04f 0001 	mov.w	r0, #1
   85ed0:	e1de      	b.n	86290 <udc_process_setup+0x6c4>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
   85ed2:	f04f 0000 	mov.w	r0, #0
   85ed6:	e1db      	b.n	86290 <udc_process_setup+0x6c4>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   85ed8:	f010 031f 	ands.w	r3, r0, #31
   85edc:	f040 8142 	bne.w	86164 <udc_process_setup+0x598>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   85ee0:	f641 4114 	movw	r1, #7188	; 0x1c14
   85ee4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85ee8:	784a      	ldrb	r2, [r1, #1]
   85eea:	f102 30ff 	add.w	r0, r2, #4294967295
   85eee:	2808      	cmp	r0, #8
   85ef0:	f200 8138 	bhi.w	86164 <udc_process_setup+0x598>
   85ef4:	e8df f010 	tbh	[pc, r0, lsl #1]
   85ef8:	01360039 	.word	0x01360039
   85efc:	01360057 	.word	0x01360057
   85f00:	01360024 	.word	0x01360024
   85f04:	01360136 	.word	0x01360136
   85f08:	00ae      	.short	0x00ae
   85f0a:	bf00      	nop
   85f0c:	20070160 	.word	0x20070160
   85f10:	00087d85 	.word	0x00087d85
   85f14:	20071c14 	.word	0x20071c14
   85f18:	2007028c 	.word	0x2007028c
   85f1c:	00083f15 	.word	0x00083f15
   85f20:	20070260 	.word	0x20070260
   85f24:	2007026c 	.word	0x2007026c
   85f28:	20071510 	.word	0x20071510
   85f2c:	20071508 	.word	0x20071508
   85f30:	00085971 	.word	0x00085971
   85f34:	2007150c 	.word	0x2007150c
   85f38:	00087df9 	.word	0x00087df9
   85f3c:	20071504 	.word	0x20071504
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   85f40:	f641 4014 	movw	r0, #7188	; 0x1c14
   85f44:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85f48:	88c1      	ldrh	r1, [r0, #6]
   85f4a:	b959      	cbnz	r1, 85f64 <udc_process_setup+0x398>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   85f4c:	f641 4314 	movw	r3, #7188	; 0x1c14
   85f50:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85f54:	f645 12fd 	movw	r2, #23037	; 0x59fd
   85f58:	f2c0 0208 	movt	r2, #8
   85f5c:	611a      	str	r2, [r3, #16]
	return true;
   85f5e:	f04f 0001 	mov.w	r0, #1
   85f62:	e195      	b.n	86290 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   85f64:	f04f 0000 	mov.w	r0, #0
   85f68:	e192      	b.n	86290 <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   85f6a:	f641 4214 	movw	r2, #7188	; 0x1c14
   85f6e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85f72:	88d1      	ldrh	r1, [r2, #6]
   85f74:	b989      	cbnz	r1, 85f9a <udc_process_setup+0x3ce>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   85f76:	f641 4014 	movw	r0, #7188	; 0x1c14
   85f7a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85f7e:	8843      	ldrh	r3, [r0, #2]
   85f80:	2b01      	cmp	r3, #1
   85f82:	d10d      	bne.n	85fa0 <udc_process_setup+0x3d4>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   85f84:	f241 510e 	movw	r1, #5390	; 0x150e
   85f88:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85f8c:	880a      	ldrh	r2, [r1, #0]
   85f8e:	f022 0002 	bic.w	r0, r2, #2
   85f92:	8008      	strh	r0, [r1, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   85f94:	f04f 0001 	mov.w	r0, #1
   85f98:	e17a      	b.n	86290 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   85f9a:	f04f 0000 	mov.w	r0, #0
   85f9e:	e177      	b.n	86290 <udc_process_setup+0x6c4>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
   85fa0:	f04f 0000 	mov.w	r0, #0
   85fa4:	e174      	b.n	86290 <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   85fa6:	f641 4014 	movw	r0, #7188	; 0x1c14
   85faa:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85fae:	88c1      	ldrh	r1, [r0, #6]
   85fb0:	2900      	cmp	r1, #0
   85fb2:	d140      	bne.n	86036 <udc_process_setup+0x46a>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
   85fb4:	f641 4314 	movw	r3, #7188	; 0x1c14
   85fb8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85fbc:	885a      	ldrh	r2, [r3, #2]
   85fbe:	2a02      	cmp	r2, #2
   85fc0:	d13c      	bne.n	8603c <udc_process_setup+0x470>
		return false;
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
   85fc2:	f647 500d 	movw	r0, #32013	; 0x7d0d
   85fc6:	f2c0 0008 	movt	r0, #8
   85fca:	4780      	blx	r0
   85fcc:	2800      	cmp	r0, #0
   85fce:	d038      	beq.n	86042 <udc_process_setup+0x476>
			break;
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   85fd0:	f641 4114 	movw	r1, #7188	; 0x1c14
   85fd4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85fd8:	790b      	ldrb	r3, [r1, #4]
   85fda:	2b00      	cmp	r3, #0
   85fdc:	d134      	bne.n	86048 <udc_process_setup+0x47c>
			break;
		}
		// Unconfigure the device, terminating all ongoing requests
		udc_reset();
   85fde:	f645 3221 	movw	r2, #23329	; 0x5b21
   85fe2:	f2c0 0208 	movt	r2, #8
   85fe6:	4790      	blx	r2
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   85fe8:	f641 4014 	movw	r0, #7188	; 0x1c14
   85fec:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85ff0:	8881      	ldrh	r1, [r0, #4]
   85ff2:	ea4f 2311 	mov.w	r3, r1, lsr #8
   85ff6:	f103 30ff 	add.w	r0, r3, #4294967295
   85ffa:	2803      	cmp	r0, #3
   85ffc:	d827      	bhi.n	8604e <udc_process_setup+0x482>
   85ffe:	e8df f000 	tbb	[pc, r0]
   86002:	0802      	.short	0x0802
   86004:	140e      	.short	0x140e
		case USB_DEV_TEST_MODE_J:
			udd_g_ctrlreq.callback = udd_test_mode_j;
   86006:	4897      	ldr	r0, [pc, #604]	; (86264 <udc_process_setup+0x698>)
   86008:	4b97      	ldr	r3, [pc, #604]	; (86268 <udc_process_setup+0x69c>)
   8600a:	6118      	str	r0, [r3, #16]
			return true;
   8600c:	f04f 0001 	mov.w	r0, #1
   86010:	e13e      	b.n	86290 <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_K:
			udd_g_ctrlreq.callback = udd_test_mode_k;
   86012:	4a96      	ldr	r2, [pc, #600]	; (8626c <udc_process_setup+0x6a0>)
   86014:	4994      	ldr	r1, [pc, #592]	; (86268 <udc_process_setup+0x69c>)
   86016:	610a      	str	r2, [r1, #16]
			return true;
   86018:	f04f 0001 	mov.w	r0, #1
   8601c:	e138      	b.n	86290 <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_SE0_NAK:
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   8601e:	4894      	ldr	r0, [pc, #592]	; (86270 <udc_process_setup+0x6a4>)
   86020:	4b91      	ldr	r3, [pc, #580]	; (86268 <udc_process_setup+0x69c>)
   86022:	6118      	str	r0, [r3, #16]
			return true;
   86024:	f04f 0001 	mov.w	r0, #1
   86028:	e132      	b.n	86290 <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_PACKET:
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   8602a:	4a92      	ldr	r2, [pc, #584]	; (86274 <udc_process_setup+0x6a8>)
   8602c:	498e      	ldr	r1, [pc, #568]	; (86268 <udc_process_setup+0x69c>)
   8602e:	610a      	str	r2, [r1, #16]
			return true;
   86030:	f04f 0001 	mov.w	r0, #1
   86034:	e12c      	b.n	86290 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   86036:	f04f 0000 	mov.w	r0, #0
   8603a:	e129      	b.n	86290 <udc_process_setup+0x6c4>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
   8603c:	f04f 0000 	mov.w	r0, #0
   86040:	e126      	b.n	86290 <udc_process_setup+0x6c4>
		break;
#endif
	default:
		break;
	}
	return false;
   86042:	f04f 0000 	mov.w	r0, #0
   86046:	e123      	b.n	86290 <udc_process_setup+0x6c4>
   86048:	f04f 0000 	mov.w	r0, #0
   8604c:	e120      	b.n	86290 <udc_process_setup+0x6c4>
   8604e:	f04f 0000 	mov.w	r0, #0
   86052:	e11d      	b.n	86290 <udc_process_setup+0x6c4>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   86054:	f641 4314 	movw	r3, #7188	; 0x1c14
   86058:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8605c:	88d9      	ldrh	r1, [r3, #6]
   8605e:	2900      	cmp	r1, #0
   86060:	d16e      	bne.n	86140 <udc_process_setup+0x574>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   86062:	f647 5251 	movw	r2, #32081	; 0x7d51
   86066:	f2c0 0208 	movt	r2, #8
   8606a:	4790      	blx	r2
   8606c:	2800      	cmp	r0, #0
   8606e:	d06a      	beq.n	86146 <udc_process_setup+0x57a>
		return false;
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   86070:	f647 500d 	movw	r0, #32013	; 0x7d0d
   86074:	f2c0 0008 	movt	r0, #8
   86078:	4780      	blx	r0
   8607a:	b168      	cbz	r0, 86098 <udc_process_setup+0x4cc>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8607c:	f641 4114 	movw	r1, #7188	; 0x1c14
   86080:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86084:	788a      	ldrb	r2, [r1, #2]
				udc_config.confdev_hs->bNumConfigurations) {
   86086:	f240 1060 	movw	r0, #352	; 0x160
   8608a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8608e:	6883      	ldr	r3, [r0, #8]
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   86090:	7c59      	ldrb	r1, [r3, #17]
   86092:	428a      	cmp	r2, r1
   86094:	dd0d      	ble.n	860b2 <udc_process_setup+0x4e6>
   86096:	e059      	b.n	8614c <udc_process_setup+0x580>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   86098:	f641 4314 	movw	r3, #7188	; 0x1c14
   8609c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   860a0:	7899      	ldrb	r1, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   860a2:	f240 1260 	movw	r2, #352	; 0x160
   860a6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   860aa:	6810      	ldr	r0, [r2, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   860ac:	7c43      	ldrb	r3, [r0, #17]
   860ae:	4299      	cmp	r1, r3
   860b0:	dc4f      	bgt.n	86152 <udc_process_setup+0x586>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
   860b2:	f645 3221 	movw	r2, #23329	; 0x5b21
   860b6:	f2c0 0208 	movt	r2, #8
   860ba:	4790      	blx	r2

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   860bc:	f641 4014 	movw	r0, #7188	; 0x1c14
   860c0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   860c4:	7883      	ldrb	r3, [r0, #2]
   860c6:	f241 5110 	movw	r1, #5392	; 0x1510
   860ca:	f2c2 0107 	movt	r1, #8199	; 0x2007
   860ce:	700b      	strb	r3, [r1, #0]
	if (udc_num_configuration == 0) {
   860d0:	2b00      	cmp	r3, #0
   860d2:	d041      	beq.n	86158 <udc_process_setup+0x58c>
		return true; // Default empty configuration requested
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   860d4:	4a68      	ldr	r2, [pc, #416]	; (86278 <udc_process_setup+0x6ac>)
   860d6:	4790      	blx	r2
   860d8:	b198      	cbz	r0, 86102 <udc_process_setup+0x536>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   860da:	4a68      	ldr	r2, [pc, #416]	; (8627c <udc_process_setup+0x6b0>)
   860dc:	7810      	ldrb	r0, [r2, #0]
   860de:	f100 31ff 	add.w	r1, r0, #4294967295
   860e2:	4b67      	ldr	r3, [pc, #412]	; (86280 <udc_process_setup+0x6b4>)
   860e4:	691a      	ldr	r2, [r3, #16]
   860e6:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
   860ea:	4966      	ldr	r1, [pc, #408]	; (86284 <udc_process_setup+0x6b8>)
   860ec:	6008      	str	r0, [r1, #0]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   860ee:	4b65      	ldr	r3, [pc, #404]	; (86284 <udc_process_setup+0x6b8>)
   860f0:	681a      	ldr	r2, [r3, #0]
   860f2:	6810      	ldr	r0, [r2, #0]
   860f4:	7901      	ldrb	r1, [r0, #4]
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
   860f6:	f04f 0001 	mov.w	r0, #1
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   860fa:	2900      	cmp	r1, #0
   860fc:	f000 80c8 	beq.w	86290 <udc_process_setup+0x6c4>
   86100:	e00a      	b.n	86118 <udc_process_setup+0x54c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   86102:	485e      	ldr	r0, [pc, #376]	; (8627c <udc_process_setup+0x6b0>)
   86104:	7803      	ldrb	r3, [r0, #0]
   86106:	f103 31ff 	add.w	r1, r3, #4294967295
   8610a:	4a5d      	ldr	r2, [pc, #372]	; (86280 <udc_process_setup+0x6b4>)
   8610c:	6850      	ldr	r0, [r2, #4]
   8610e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   86112:	4b5c      	ldr	r3, [pc, #368]	; (86284 <udc_process_setup+0x6b8>)
   86114:	6019      	str	r1, [r3, #0]
   86116:	e7ea      	b.n	860ee <udc_process_setup+0x522>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86118:	f04f 0400 	mov.w	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   8611c:	4626      	mov	r6, r4
   8611e:	4d5a      	ldr	r5, [pc, #360]	; (86288 <udc_process_setup+0x6bc>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86120:	4f58      	ldr	r7, [pc, #352]	; (86284 <udc_process_setup+0x6b8>)
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   86122:	4620      	mov	r0, r4
   86124:	4631      	mov	r1, r6
   86126:	47a8      	blx	r5
   86128:	b1c8      	cbz	r0, 8615e <udc_process_setup+0x592>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   8612a:	f104 0401 	add.w	r4, r4, #1
   8612e:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86130:	683b      	ldr	r3, [r7, #0]
   86132:	681a      	ldr	r2, [r3, #0]
   86134:	7910      	ldrb	r0, [r2, #4]
   86136:	42a0      	cmp	r0, r4
   86138:	d8f3      	bhi.n	86122 <udc_process_setup+0x556>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
   8613a:	f04f 0001 	mov.w	r0, #1
   8613e:	e0a7      	b.n	86290 <udc_process_setup+0x6c4>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   86140:	f04f 0000 	mov.w	r0, #0
   86144:	e0a4      	b.n	86290 <udc_process_setup+0x6c4>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
   86146:	f04f 0000 	mov.w	r0, #0
   8614a:	e0a1      	b.n	86290 <udc_process_setup+0x6c4>
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
   8614c:	f04f 0000 	mov.w	r0, #0
   86150:	e09e      	b.n	86290 <udc_process_setup+0x6c4>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
   86152:	f04f 0000 	mov.w	r0, #0
   86156:	e09b      	b.n	86290 <udc_process_setup+0x6c4>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
   86158:	f04f 0001 	mov.w	r0, #1
   8615c:	e098      	b.n	86290 <udc_process_setup+0x6c4>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
   8615e:	f04f 0000 	mov.w	r0, #0
   86162:	e095      	b.n	86290 <udc_process_setup+0x6c4>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   86164:	2b01      	cmp	r3, #1
   86166:	d12d      	bne.n	861c4 <udc_process_setup+0x5f8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   86168:	f641 4114 	movw	r1, #7188	; 0x1c14
   8616c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86170:	784a      	ldrb	r2, [r1, #1]
   86172:	2a0b      	cmp	r2, #11
   86174:	d126      	bne.n	861c4 <udc_process_setup+0x5f8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   86176:	f641 4014 	movw	r0, #7188	; 0x1c14
   8617a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8617e:	88c2      	ldrh	r2, [r0, #6]
   86180:	b9ba      	cbnz	r2, 861b2 <udc_process_setup+0x5e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   86182:	f241 5310 	movw	r3, #5392	; 0x1510
   86186:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8618a:	7819      	ldrb	r1, [r3, #0]
   8618c:	b1a1      	cbz	r1, 861b8 <udc_process_setup+0x5ec>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8618e:	f641 4514 	movw	r5, #7188	; 0x1c14
   86192:	f2c2 0507 	movt	r5, #8199	; 0x2007
   86196:	792c      	ldrb	r4, [r5, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   86198:	886d      	ldrh	r5, [r5, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   8619a:	4620      	mov	r0, r4
   8619c:	f645 2285 	movw	r2, #23173	; 0x5a85
   861a0:	f2c0 0208 	movt	r2, #8
   861a4:	4790      	blx	r2
   861a6:	b150      	cbz	r0, 861be <udc_process_setup+0x5f2>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   861a8:	4620      	mov	r0, r4
   861aa:	b2e9      	uxtb	r1, r5
   861ac:	4b36      	ldr	r3, [pc, #216]	; (86288 <udc_process_setup+0x6bc>)
   861ae:	4798      	blx	r3
   861b0:	e06e      	b.n	86290 <udc_process_setup+0x6c4>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
   861b2:	f04f 0000 	mov.w	r0, #0
   861b6:	e06b      	b.n	86290 <udc_process_setup+0x6c4>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
   861b8:	f04f 0000 	mov.w	r0, #0
   861bc:	e068      	b.n	86290 <udc_process_setup+0x6c4>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
		return false;
   861be:	f04f 0000 	mov.w	r0, #0
   861c2:	e065      	b.n	86290 <udc_process_setup+0x6c4>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   861c4:	2b02      	cmp	r3, #2
   861c6:	d165      	bne.n	86294 <udc_process_setup+0x6c8>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   861c8:	f641 4314 	movw	r3, #7188	; 0x1c14
   861cc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   861d0:	7858      	ldrb	r0, [r3, #1]
   861d2:	2801      	cmp	r0, #1
   861d4:	d002      	beq.n	861dc <udc_process_setup+0x610>
   861d6:	2803      	cmp	r0, #3
   861d8:	d158      	bne.n	8628c <udc_process_setup+0x6c0>
   861da:	e01c      	b.n	86216 <udc_process_setup+0x64a>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   861dc:	f641 4314 	movw	r3, #7188	; 0x1c14
   861e0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   861e4:	88d8      	ldrh	r0, [r3, #6]
   861e6:	b980      	cbnz	r0, 8620a <udc_process_setup+0x63e>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   861e8:	f641 4114 	movw	r1, #7188	; 0x1c14
   861ec:	f2c2 0107 	movt	r1, #8199	; 0x2007
   861f0:	884a      	ldrh	r2, [r1, #2]
   861f2:	b96a      	cbnz	r2, 86210 <udc_process_setup+0x644>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   861f4:	f641 4314 	movw	r3, #7188	; 0x1c14
   861f8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   861fc:	7918      	ldrb	r0, [r3, #4]
   861fe:	f647 7139 	movw	r1, #32569	; 0x7f39
   86202:	f2c0 0108 	movt	r1, #8
   86206:	4788      	blx	r1
   86208:	e042      	b.n	86290 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   8620a:	f04f 0000 	mov.w	r0, #0
   8620e:	e03f      	b.n	86290 <udc_process_setup+0x6c4>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
   86210:	f04f 0000 	mov.w	r0, #0
   86214:	e03c      	b.n	86290 <udc_process_setup+0x6c4>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   86216:	f641 4114 	movw	r1, #7188	; 0x1c14
   8621a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8621e:	88ca      	ldrh	r2, [r1, #6]
   86220:	b9b2      	cbnz	r2, 86250 <udc_process_setup+0x684>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   86222:	f641 4314 	movw	r3, #7188	; 0x1c14
   86226:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8622a:	8858      	ldrh	r0, [r3, #2]
   8622c:	b998      	cbnz	r0, 86256 <udc_process_setup+0x68a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   8622e:	f641 4414 	movw	r4, #7188	; 0x1c14
   86232:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86236:	7920      	ldrb	r0, [r4, #4]
   86238:	f248 6135 	movw	r1, #34357	; 0x8635
   8623c:	f2c0 0108 	movt	r1, #8
   86240:	4788      	blx	r1
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   86242:	7920      	ldrb	r0, [r4, #4]
   86244:	f647 6211 	movw	r2, #32273	; 0x7e11
   86248:	f2c0 0208 	movt	r2, #8
   8624c:	4790      	blx	r2
   8624e:	e01f      	b.n	86290 <udc_process_setup+0x6c4>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   86250:	f04f 0000 	mov.w	r0, #0
   86254:	e01c      	b.n	86290 <udc_process_setup+0x6c4>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
   86256:	f04f 0000 	mov.w	r0, #0
   8625a:	e019      	b.n	86290 <udc_process_setup+0x6c4>
				break;
			}
		}
#endif
	}
	return false;
   8625c:	f04f 0000 	mov.w	r0, #0
   86260:	e016      	b.n	86290 <udc_process_setup+0x6c4>
   86262:	bf00      	nop
   86264:	00088739 	.word	0x00088739
   86268:	20071c14 	.word	0x20071c14
   8626c:	00088759 	.word	0x00088759
   86270:	00088779 	.word	0x00088779
   86274:	00088791 	.word	0x00088791
   86278:	00087d0d 	.word	0x00087d0d
   8627c:	20071510 	.word	0x20071510
   86280:	20070160 	.word	0x20070160
   86284:	20071508 	.word	0x20071508
   86288:	00085a19 	.word	0x00085a19
   8628c:	f04f 0000 	mov.w	r0, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
   86290:	2800      	cmp	r0, #0
   86292:	d17b      	bne.n	8638c <udc_process_setup+0x7c0>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   86294:	f641 4114 	movw	r1, #7188	; 0x1c14
   86298:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8629c:	7808      	ldrb	r0, [r1, #0]
   8629e:	f000 031f 	and.w	r3, r0, #31
   862a2:	2b01      	cmp	r3, #1
   862a4:	d12d      	bne.n	86302 <udc_process_setup+0x736>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   862a6:	f241 5210 	movw	r2, #5392	; 0x1510
   862aa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   862ae:	7811      	ldrb	r1, [r2, #0]
   862b0:	b339      	cbz	r1, 86302 <udc_process_setup+0x736>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   862b2:	f641 4414 	movw	r4, #7188	; 0x1c14
   862b6:	f2c2 0407 	movt	r4, #8199	; 0x2007
   862ba:	7924      	ldrb	r4, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   862bc:	f241 5508 	movw	r5, #5384	; 0x1508
   862c0:	f2c2 0507 	movt	r5, #8199	; 0x2007
   862c4:	682d      	ldr	r5, [r5, #0]
   862c6:	6828      	ldr	r0, [r5, #0]
   862c8:	7903      	ldrb	r3, [r0, #4]
   862ca:	42a3      	cmp	r3, r4
   862cc:	d919      	bls.n	86302 <udc_process_setup+0x736>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   862ce:	4620      	mov	r0, r4
   862d0:	f04f 0100 	mov.w	r1, #0
   862d4:	f645 1271 	movw	r2, #22897	; 0x5971
   862d8:	f2c0 0208 	movt	r2, #8
   862dc:	4790      	blx	r2
   862de:	b180      	cbz	r0, 86302 <udc_process_setup+0x736>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   862e0:	6869      	ldr	r1, [r5, #4]
   862e2:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   862e6:	68e8      	ldr	r0, [r5, #12]
   862e8:	4780      	blx	r0
   862ea:	4601      	mov	r1, r0
   862ec:	4620      	mov	r0, r4
   862ee:	f645 1371 	movw	r3, #22897	; 0x5971
   862f2:	f2c0 0308 	movt	r3, #8
   862f6:	4798      	blx	r3
   862f8:	b118      	cbz	r0, 86302 <udc_process_setup+0x736>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   862fa:	68aa      	ldr	r2, [r5, #8]
   862fc:	4790      	blx	r2
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
   862fe:	2800      	cmp	r0, #0
   86300:	d147      	bne.n	86392 <udc_process_setup+0x7c6>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   86302:	f641 4114 	movw	r1, #7188	; 0x1c14
   86306:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8630a:	7808      	ldrb	r0, [r1, #0]
   8630c:	f000 031f 	and.w	r3, r0, #31
   86310:	2b02      	cmp	r3, #2
   86312:	d141      	bne.n	86398 <udc_process_setup+0x7cc>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   86314:	f241 5210 	movw	r2, #5392	; 0x1510
   86318:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8631c:	7811      	ldrb	r1, [r2, #0]
   8631e:	b331      	cbz	r1, 8636e <udc_process_setup+0x7a2>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86320:	f241 5008 	movw	r0, #5384	; 0x1508
   86324:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86328:	6803      	ldr	r3, [r0, #0]
   8632a:	681a      	ldr	r2, [r3, #0]
   8632c:	7911      	ldrb	r1, [r2, #4]
   8632e:	b309      	cbz	r1, 86374 <udc_process_setup+0x7a8>
   86330:	f04f 0400 	mov.w	r4, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   86334:	f645 1671 	movw	r6, #22897	; 0x5971
   86338:	f2c0 0608 	movt	r6, #8
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8633c:	f241 5708 	movw	r7, #5384	; 0x1508
   86340:	f2c2 0707 	movt	r7, #8199	; 0x2007
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   86344:	685d      	ldr	r5, [r3, #4]
   86346:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8634a:	68eb      	ldr	r3, [r5, #12]
   8634c:	4798      	blx	r3
   8634e:	4601      	mov	r1, r0
   86350:	4620      	mov	r0, r4
   86352:	47b0      	blx	r6
   86354:	b188      	cbz	r0, 8637a <udc_process_setup+0x7ae>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   86356:	68a8      	ldr	r0, [r5, #8]
   86358:	4780      	blx	r0
   8635a:	b988      	cbnz	r0, 86380 <udc_process_setup+0x7b4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   8635c:	f104 0401 	add.w	r4, r4, #1
   86360:	b2e4      	uxtb	r4, r4
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86362:	683b      	ldr	r3, [r7, #0]
   86364:	681a      	ldr	r2, [r3, #0]
   86366:	7911      	ldrb	r1, [r2, #4]
   86368:	42a1      	cmp	r1, r4
   8636a:	d8eb      	bhi.n	86344 <udc_process_setup+0x778>
   8636c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
   8636e:	f04f 0000 	mov.w	r0, #0
   86372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
   86374:	f04f 0000 	mov.w	r0, #0
   86378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
			return false;
   8637a:	f04f 0000 	mov.w	r0, #0
   8637e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
   86380:	f04f 0001 	mov.w	r0, #1
   86384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
   86386:	f04f 0000 	mov.w	r0, #0
   8638a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
   8638c:	f04f 0001 	mov.w	r0, #1
   86390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
			return true;
   86392:	f04f 0001 	mov.w	r0, #1
   86396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   86398:	f04f 0000 	mov.w	r0, #0
   8639c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   8639e:	f010 0f60 	tst.w	r0, #96	; 0x60
   863a2:	f47f af77 	bne.w	86294 <udc_process_setup+0x6c8>
   863a6:	e597      	b.n	85ed8 <udc_process_setup+0x30c>
   863a8:	f010 0f60 	tst.w	r0, #96	; 0x60
   863ac:	f47f af72 	bne.w	86294 <udc_process_setup+0x6c8>
   863b0:	e424      	b.n	85bfc <udc_process_setup+0x30>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   863b2:	f04f 000e 	mov.w	r0, #14
		str = udc_string_product_name;
   863b6:	490a      	ldr	r1, [pc, #40]	; (863e0 <udc_process_setup+0x814>)
   863b8:	e4e1      	b.n	85d7e <udc_process_setup+0x1b2>
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   863ba:	f04f 000c 	mov.w	r0, #12
		str = udc_get_string_serial_name();
   863be:	4909      	ldr	r1, [pc, #36]	; (863e4 <udc_process_setup+0x818>)
   863c0:	e4dd      	b.n	85d7e <udc_process_setup+0x1b2>
   863c2:	f04f 0401 	mov.w	r4, #1
   863c6:	2c00      	cmp	r4, #0
   863c8:	f43f ace5 	beq.w	85d96 <udc_process_setup+0x1ca>
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   863cc:	5ccc      	ldrb	r4, [r1, r3]
   863ce:	f822 4f02 	strh.w	r4, [r2, #2]!
   863d2:	f103 0301 	add.w	r3, r3, #1
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   863d6:	b2dc      	uxtb	r4, r3
   863d8:	4284      	cmp	r4, r0
   863da:	f4ff acdc 	bcc.w	85d96 <udc_process_setup+0x1ca>
   863de:	e4e9      	b.n	85db4 <udc_process_setup+0x1e8>
   863e0:	20070250 	.word	0x20070250
   863e4:	0008bf90 	.word	0x0008bf90

000863e8 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   863e8:	b10a      	cbz	r2, 863ee <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   863ea:	6641      	str	r1, [r0, #100]	; 0x64
   863ec:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   863ee:	6601      	str	r1, [r0, #96]	; 0x60
   863f0:	4770      	bx	lr
   863f2:	bf00      	nop

000863f4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   863f4:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   863f6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   863fa:	d016      	beq.n	8642a <pio_set_peripheral+0x36>
   863fc:	d804      	bhi.n	86408 <pio_set_peripheral+0x14>
   863fe:	b1c9      	cbz	r1, 86434 <pio_set_peripheral+0x40>
   86400:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   86404:	d115      	bne.n	86432 <pio_set_peripheral+0x3e>
   86406:	e009      	b.n	8641c <pio_set_peripheral+0x28>
   86408:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8640c:	d012      	beq.n	86434 <pio_set_peripheral+0x40>
   8640e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   86412:	d00f      	beq.n	86434 <pio_set_peripheral+0x40>
   86414:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   86418:	d10b      	bne.n	86432 <pio_set_peripheral+0x3e>
   8641a:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8641c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8641e:	6f01      	ldr	r1, [r0, #112]	; 0x70
   86420:	400b      	ands	r3, r1
   86422:	ea23 0302 	bic.w	r3, r3, r2
   86426:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   86428:	e003      	b.n	86432 <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8642a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8642c:	ea42 0103 	orr.w	r1, r2, r3
   86430:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   86432:	6042      	str	r2, [r0, #4]
   86434:	4770      	bx	lr
   86436:	bf00      	nop

00086438 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   86438:	6441      	str	r1, [r0, #68]	; 0x44
   8643a:	4770      	bx	lr

0008643c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8643e:	4604      	mov	r4, r0
   86440:	460d      	mov	r5, r1
   86442:	4616      	mov	r6, r2
   86444:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   86446:	f246 4339 	movw	r3, #25657	; 0x6439
   8644a:	f2c0 0308 	movt	r3, #8
   8644e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   86450:	4620      	mov	r0, r4
   86452:	4629      	mov	r1, r5
   86454:	9a06      	ldr	r2, [sp, #24]
   86456:	f246 33e9 	movw	r3, #25577	; 0x63e9
   8645a:	f2c0 0308 	movt	r3, #8
   8645e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   86460:	b10f      	cbz	r7, 86466 <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   86462:	6525      	str	r5, [r4, #80]	; 0x50
   86464:	e000      	b.n	86468 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   86466:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   86468:	b10e      	cbz	r6, 8646e <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   8646a:	6325      	str	r5, [r4, #48]	; 0x30
   8646c:	e000      	b.n	86470 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8646e:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   86470:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   86472:	6025      	str	r5, [r4, #0]
   86474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86476:	bf00      	nop

00086478 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   86478:	b570      	push	{r4, r5, r6, lr}
   8647a:	4604      	mov	r4, r0
   8647c:	460d      	mov	r5, r1
   8647e:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   86480:	f246 4339 	movw	r3, #25657	; 0x6439
   86484:	f2c0 0308 	movt	r3, #8
   86488:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   8648a:	4620      	mov	r0, r4
   8648c:	4629      	mov	r1, r5
   8648e:	f006 0201 	and.w	r2, r6, #1
   86492:	f246 33e9 	movw	r3, #25577	; 0x63e9
   86496:	f2c0 0308 	movt	r3, #8
   8649a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8649c:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   864a0:	bf14      	ite	ne
   864a2:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   864a4:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   864a6:	f016 0f02 	tst.w	r6, #2
   864aa:	d002      	beq.n	864b2 <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   864ac:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   864b0:	e004      	b.n	864bc <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   864b2:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_SCIFSR = ul_mask;
   864b6:	bf18      	it	ne
   864b8:	f8c4 5080 	strne.w	r5, [r4, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   864bc:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   864be:	6025      	str	r5, [r4, #0]
   864c0:	bd70      	pop	{r4, r5, r6, pc}
   864c2:	bf00      	nop

000864c4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   864c4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   864c6:	4770      	bx	lr

000864c8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   864c8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   864ca:	4770      	bx	lr

000864cc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   864cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   864ce:	b083      	sub	sp, #12
   864d0:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   864d2:	ea4f 1650 	mov.w	r6, r0, lsr #5
   864d6:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
   864da:	f201 7207 	addw	r2, r1, #1799	; 0x707
   864de:	ea4f 2642 	mov.w	r6, r2, lsl #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   864e2:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   864e6:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   864ea:	d042      	beq.n	86572 <pio_configure_pin+0xa6>
   864ec:	d806      	bhi.n	864fc <pio_configure_pin+0x30>
   864ee:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   864f2:	d00a      	beq.n	8650a <pio_configure_pin+0x3e>
   864f4:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   864f8:	d164      	bne.n	865c4 <pio_configure_pin+0xf8>
   864fa:	e020      	b.n	8653e <pio_configure_pin+0x72>
   864fc:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   86500:	d046      	beq.n	86590 <pio_configure_pin+0xc4>
   86502:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   86506:	d15d      	bne.n	865c4 <pio_configure_pin+0xf8>
   86508:	e042      	b.n	86590 <pio_configure_pin+0xc4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8650a:	f000 071f 	and.w	r7, r0, #31
   8650e:	f04f 0401 	mov.w	r4, #1
   86512:	fa04 f707 	lsl.w	r7, r4, r7
   86516:	4630      	mov	r0, r6
   86518:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8651c:	463a      	mov	r2, r7
   8651e:	f246 33f5 	movw	r3, #25589	; 0x63f5
   86522:	f2c0 0308 	movt	r3, #8
   86526:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   86528:	4630      	mov	r0, r6
   8652a:	4639      	mov	r1, r7
   8652c:	ea05 0204 	and.w	r2, r5, r4
   86530:	f246 33e9 	movw	r3, #25577	; 0x63e9
   86534:	f2c0 0308 	movt	r3, #8
   86538:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8653a:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   8653c:	e044      	b.n	865c8 <pio_configure_pin+0xfc>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8653e:	f000 001f 	and.w	r0, r0, #31
   86542:	f04f 0401 	mov.w	r4, #1
   86546:	fa04 f700 	lsl.w	r7, r4, r0
   8654a:	4630      	mov	r0, r6
   8654c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   86550:	463a      	mov	r2, r7
   86552:	f246 33f5 	movw	r3, #25589	; 0x63f5
   86556:	f2c0 0308 	movt	r3, #8
   8655a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   8655c:	4630      	mov	r0, r6
   8655e:	4639      	mov	r1, r7
   86560:	ea05 0204 	and.w	r2, r5, r4
   86564:	f246 33e9 	movw	r3, #25577	; 0x63e9
   86568:	f2c0 0308 	movt	r3, #8
   8656c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8656e:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   86570:	e02a      	b.n	865c8 <pio_configure_pin+0xfc>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   86572:	f000 021f 	and.w	r2, r0, #31
   86576:	f04f 0401 	mov.w	r4, #1
   8657a:	4630      	mov	r0, r6
   8657c:	fa04 f102 	lsl.w	r1, r4, r2
   86580:	462a      	mov	r2, r5
   86582:	f246 4379 	movw	r3, #25721	; 0x6479
   86586:	f2c0 0308 	movt	r3, #8
   8658a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8658c:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8658e:	e01b      	b.n	865c8 <pio_configure_pin+0xfc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   86590:	f000 021f 	and.w	r2, r0, #31
   86594:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   86598:	f005 5360 	and.w	r3, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8659c:	ea05 0104 	and.w	r1, r5, r4
   865a0:	9100      	str	r1, [sp, #0]
   865a2:	4630      	mov	r0, r6
   865a4:	fa04 f102 	lsl.w	r1, r4, r2
   865a8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   865ac:	bf14      	ite	ne
   865ae:	2200      	movne	r2, #0
   865b0:	2201      	moveq	r2, #1
   865b2:	f3c5 0380 	ubfx	r3, r5, #2, #1
   865b6:	f246 453d 	movw	r5, #25661	; 0x643d
   865ba:	f2c0 0508 	movt	r5, #8
   865be:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   865c0:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   865c2:	e001      	b.n	865c8 <pio_configure_pin+0xfc>

	default:
		return 0;
   865c4:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   865c8:	b003      	add	sp, #12
   865ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000865cc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   865cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   865ce:	4604      	mov	r4, r0
   865d0:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   865d2:	f246 43c5 	movw	r3, #25797	; 0x64c5
   865d6:	f2c0 0308 	movt	r3, #8
   865da:	4798      	blx	r3
   865dc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   865de:	4620      	mov	r0, r4
   865e0:	f246 41c9 	movw	r1, #25801	; 0x64c9
   865e4:	f2c0 0108 	movt	r1, #8
   865e8:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   865ea:	4005      	ands	r5, r0
   865ec:	d014      	beq.n	86618 <pio_handler_process+0x4c>
   865ee:	4c0b      	ldr	r4, [pc, #44]	; (8661c <pio_handler_process+0x50>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
   865f0:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   865f2:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   865f6:	42b0      	cmp	r0, r6
   865f8:	d10a      	bne.n	86610 <pio_handler_process+0x44>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   865fa:	f854 1c08 	ldr.w	r1, [r4, #-8]
   865fe:	4229      	tst	r1, r5
   86600:	d006      	beq.n	86610 <pio_handler_process+0x44>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   86602:	6822      	ldr	r2, [r4, #0]
   86604:	4630      	mov	r0, r6
   86606:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   86608:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8660c:	ea25 0503 	bic.w	r5, r5, r3
   86610:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   86614:	2d00      	cmp	r5, #0
   86616:	d1eb      	bne.n	865f0 <pio_handler_process+0x24>
   86618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8661a:	bf00      	nop
   8661c:	20071524 	.word	0x20071524

00086620 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   86620:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   86622:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   86626:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8662a:	f04f 010b 	mov.w	r1, #11
   8662e:	f246 53cd 	movw	r3, #26061	; 0x65cd
   86632:	f2c0 0308 	movt	r3, #8
   86636:	4798      	blx	r3
   86638:	bd08      	pop	{r3, pc}
   8663a:	bf00      	nop

0008663c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8663c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8663e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   86642:	f2c4 000e 	movt	r0, #16398	; 0x400e
   86646:	f04f 010c 	mov.w	r1, #12
   8664a:	f246 53cd 	movw	r3, #26061	; 0x65cd
   8664e:	f2c0 0308 	movt	r3, #8
   86652:	4798      	blx	r3
   86654:	bd08      	pop	{r3, pc}
   86656:	bf00      	nop

00086658 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   86658:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8665a:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   8665e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   86662:	f04f 010d 	mov.w	r1, #13
   86666:	f246 53cd 	movw	r3, #26061	; 0x65cd
   8666a:	f2c0 0308 	movt	r3, #8
   8666e:	4798      	blx	r3
   86670:	bd08      	pop	{r3, pc}
   86672:	bf00      	nop

00086674 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   86674:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   86676:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   8667a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8667e:	f04f 010e 	mov.w	r1, #14
   86682:	f246 53cd 	movw	r3, #26061	; 0x65cd
   86686:	f2c0 0308 	movt	r3, #8
   8668a:	4798      	blx	r3
   8668c:	bd08      	pop	{r3, pc}
   8668e:	bf00      	nop

00086690 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   86690:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   86694:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8669a:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   8669e:	4308      	orrs	r0, r1
   866a0:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   866a2:	6e98      	ldr	r0, [r3, #104]	; 0x68
   866a4:	f010 0f08 	tst.w	r0, #8
   866a8:	d007      	beq.n	866ba <pmc_switch_mck_to_pllack+0x2a>
   866aa:	e010      	b.n	866ce <pmc_switch_mck_to_pllack+0x3e>
   866ac:	f100 33ff 	add.w	r3, r0, #4294967295
   866b0:	6e90      	ldr	r0, [r2, #104]	; 0x68
   866b2:	f010 0f08 	tst.w	r0, #8
   866b6:	d038      	beq.n	8672a <pmc_switch_mck_to_pllack+0x9a>
   866b8:	e009      	b.n	866ce <pmc_switch_mck_to_pllack+0x3e>
   866ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
   866be:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   866c2:	f2c4 020e 	movt	r2, #16398	; 0x400e
   866c6:	6e91      	ldr	r1, [r2, #104]	; 0x68
   866c8:	f011 0f08 	tst.w	r1, #8
   866cc:	d0ee      	beq.n	866ac <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   866ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   866d2:	f2c4 010e 	movt	r1, #16398	; 0x400e
   866d6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   866d8:	f022 0303 	bic.w	r3, r2, #3
   866dc:	f043 0002 	orr.w	r0, r3, #2
   866e0:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   866e2:	6e89      	ldr	r1, [r1, #104]	; 0x68
   866e4:	f011 0f08 	tst.w	r1, #8
   866e8:	d009      	beq.n	866fe <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   866ea:	f04f 0000 	mov.w	r0, #0
   866ee:	4770      	bx	lr
   866f0:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   866f4:	6e91      	ldr	r1, [r2, #104]	; 0x68
   866f6:	f011 0f08 	tst.w	r1, #8
   866fa:	d013      	beq.n	86724 <pmc_switch_mck_to_pllack+0x94>
   866fc:	e009      	b.n	86712 <pmc_switch_mck_to_pllack+0x82>
   866fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
   86702:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   86706:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8670a:	6e90      	ldr	r0, [r2, #104]	; 0x68
   8670c:	f010 0f08 	tst.w	r0, #8
   86710:	d0ee      	beq.n	866f0 <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   86712:	f04f 0000 	mov.w	r0, #0
   86716:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   86718:	f04f 0001 	mov.w	r0, #1
   8671c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8671e:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   86722:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   86724:	3b01      	subs	r3, #1
   86726:	d1f0      	bne.n	8670a <pmc_switch_mck_to_pllack+0x7a>
   86728:	e7f9      	b.n	8671e <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   8672a:	1e58      	subs	r0, r3, #1
   8672c:	d1cb      	bne.n	866c6 <pmc_switch_mck_to_pllack+0x36>
   8672e:	e7f3      	b.n	86718 <pmc_switch_mck_to_pllack+0x88>

00086730 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   86730:	b188      	cbz	r0, 86756 <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   86732:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   86736:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8673a:	6a08      	ldr	r0, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   8673c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   86740:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   86744:	4002      	ands	r2, r0
   86746:	f04f 0302 	mov.w	r3, #2
   8674a:	f2c0 1337 	movt	r3, #311	; 0x137
   8674e:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   86752:	6208      	str	r0, [r1, #32]
   86754:	4770      	bx	lr
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   86756:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8675a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8675e:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   86760:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   86764:	f020 0203 	bic.w	r2, r0, #3
   86768:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   8676c:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   86770:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   86774:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   86778:	6218      	str	r0, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8677a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8677e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   86782:	6e93      	ldr	r3, [r2, #104]	; 0x68
   86784:	f013 0f01 	tst.w	r3, #1
   86788:	d0fb      	beq.n	86782 <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   8678a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   8678e:	f2c4 010e 	movt	r1, #16398	; 0x400e
   86792:	6a08      	ldr	r0, [r1, #32]
   86794:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   86798:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   8679c:	620b      	str	r3, [r1, #32]
   8679e:	4770      	bx	lr

000867a0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   867a0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   867a4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   867a8:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   867aa:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   867ae:	4770      	bx	lr

000867b0 <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   867b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   867b4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   867b8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   867bc:	629a      	str	r2, [r3, #40]	; 0x28
   867be:	4770      	bx	lr

000867c0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   867c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   867c4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   867c8:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   867ca:	f000 0002 	and.w	r0, r0, #2
   867ce:	4770      	bx	lr

000867d0 <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
   867d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   867d4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   867d8:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
   867dc:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   867de:	f44f 60c0 	mov.w	r0, #1536	; 0x600
   867e2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   867e6:	6e81      	ldr	r1, [r0, #104]	; 0x68
   867e8:	f011 0f40 	tst.w	r1, #64	; 0x40
   867ec:	d0fb      	beq.n	867e6 <pmc_enable_upll_clock+0x16>
}
   867ee:	4770      	bx	lr

000867f0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   867f0:	282c      	cmp	r0, #44	; 0x2c
   867f2:	d835      	bhi.n	86860 <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   867f4:	281f      	cmp	r0, #31
   867f6:	d817      	bhi.n	86828 <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   867f8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   867fc:	f2c4 010e 	movt	r1, #16398	; 0x400e
   86800:	698a      	ldr	r2, [r1, #24]
   86802:	f04f 0301 	mov.w	r3, #1
   86806:	fa03 f300 	lsl.w	r3, r3, r0
   8680a:	401a      	ands	r2, r3
   8680c:	4293      	cmp	r3, r2
   8680e:	d02a      	beq.n	86866 <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   86810:	f04f 0101 	mov.w	r1, #1
   86814:	fa01 f000 	lsl.w	r0, r1, r0
   86818:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8681c:	f2c4 020e 	movt	r2, #16398	; 0x400e
   86820:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   86822:	f04f 0000 	mov.w	r0, #0
   86826:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   86828:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8682c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86830:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   86834:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   86838:	f04f 0101 	mov.w	r1, #1
   8683c:	fa01 f100 	lsl.w	r1, r1, r0
   86840:	400a      	ands	r2, r1
   86842:	4291      	cmp	r1, r2
   86844:	d012      	beq.n	8686c <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   86846:	f04f 0301 	mov.w	r3, #1
   8684a:	fa03 f000 	lsl.w	r0, r3, r0
   8684e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   86852:	f2c4 020e 	movt	r2, #16398	; 0x400e
   86856:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   8685a:	f04f 0000 	mov.w	r0, #0
   8685e:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   86860:	f04f 0001 	mov.w	r0, #1
   86864:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   86866:	f04f 0000 	mov.w	r0, #0
   8686a:	4770      	bx	lr
   8686c:	f04f 0000 	mov.w	r0, #0
}
   86870:	4770      	bx	lr
   86872:	bf00      	nop

00086874 <pmc_switch_udpck_to_upllck>:
 *
 * \param dw_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
   86874:	ea4f 2000 	mov.w	r0, r0, lsl #8
   86878:	f400 6270 	and.w	r2, r0, #3840	; 0xf00
   8687c:	f042 0101 	orr.w	r1, r2, #1
   86880:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   86884:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86888:	6399      	str	r1, [r3, #56]	; 0x38
   8688a:	4770      	bx	lr

0008688c <pmc_enable_udpck>:
void pmc_enable_udpck(void)
{
# if (SAM3S || SAM4S || SAM4E)
	PMC->PMC_SCER = PMC_SCER_UDP;
# else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
   8688c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   86890:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86894:	f04f 0220 	mov.w	r2, #32
   86898:	601a      	str	r2, [r3, #0]
   8689a:	4770      	bx	lr

0008689c <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   8689c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   868a0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   868a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   868a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   868aa:	f420 0178 	bic.w	r1, r0, #16252928	; 0xf80000
	PMC->PMC_FSMR |= ul_inputs;
   868ae:	430a      	orrs	r2, r1
   868b0:	671a      	str	r2, [r3, #112]	; 0x70
   868b2:	4770      	bx	lr

000868b4 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_fastrc_used;
   868b4:	f241 5388 	movw	r3, #5512	; 0x1588
   868b8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   868bc:	7818      	ldrb	r0, [r3, #0]
}
   868be:	f080 0001 	eor.w	r0, r0, #1
   868c2:	4770      	bx	lr

000868c4 <udd_sleep_mode>:
 *
 * \param b_enable true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   868c4:	4603      	mov	r3, r0
   868c6:	2800      	cmp	r0, #0
   868c8:	d149      	bne.n	8695e <udd_sleep_mode+0x9a>
   868ca:	f241 528c 	movw	r2, #5516	; 0x158c
   868ce:	f2c2 0207 	movt	r2, #8199	; 0x2007
   868d2:	7811      	ldrb	r1, [r2, #0]
   868d4:	2900      	cmp	r1, #0
   868d6:	d03c      	beq.n	86952 <udd_sleep_mode+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   868d8:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   868dc:	b672      	cpsid	i
   868de:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   868e2:	f240 2290 	movw	r2, #656	; 0x290
   868e6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   868ea:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   868ec:	f641 420c 	movw	r2, #7180	; 0x1c0c
   868f0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   868f4:	7890      	ldrb	r0, [r2, #2]
   868f6:	f100 30ff 	add.w	r0, r0, #4294967295
   868fa:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   868fc:	bb49      	cbnz	r1, 86952 <udd_sleep_mode+0x8e>
		cpu_irq_enable();
   868fe:	f240 2290 	movw	r2, #656	; 0x290
   86902:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86906:	f04f 0101 	mov.w	r1, #1
   8690a:	7011      	strb	r1, [r2, #0]
   8690c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   86910:	b662      	cpsie	i
   86912:	e01e      	b.n	86952 <udd_sleep_mode+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86914:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   86918:	b672      	cpsid	i
   8691a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8691e:	f240 2290 	movw	r2, #656	; 0x290
   86922:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86926:	f04f 0000 	mov.w	r0, #0
   8692a:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   8692c:	f641 420c 	movw	r2, #7180	; 0x1c0c
   86930:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86934:	7890      	ldrb	r0, [r2, #2]
   86936:	f100 0001 	add.w	r0, r0, #1
   8693a:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8693c:	b949      	cbnz	r1, 86952 <udd_sleep_mode+0x8e>
		cpu_irq_enable();
   8693e:	f240 2290 	movw	r2, #656	; 0x290
   86942:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86946:	f04f 0101 	mov.w	r1, #1
   8694a:	7011      	strb	r1, [r2, #0]
   8694c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   86950:	b662      	cpsie	i
	}
	if (b_idle && !udd_b_idle) {
		dbg_print("_W ");
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
   86952:	f241 508c 	movw	r0, #5516	; 0x158c
   86956:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8695a:	7003      	strb	r3, [r0, #0]
   8695c:	4770      	bx	lr
{
	if (!b_idle && udd_b_idle) {
		dbg_print("_S ");
		sleepmgr_unlock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   8695e:	f241 528c 	movw	r2, #5516	; 0x158c
   86962:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86966:	7810      	ldrb	r0, [r2, #0]
   86968:	2800      	cmp	r0, #0
   8696a:	d0d3      	beq.n	86914 <udd_sleep_mode+0x50>
   8696c:	e7f1      	b.n	86952 <udd_sleep_mode+0x8e>
   8696e:	bf00      	nop

00086970 <udd_ctrl_init>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86970:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   86974:	b672      	cpsid	i
   86976:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8697a:	f240 2390 	movw	r3, #656	; 0x290
   8697e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86982:	f04f 0100 	mov.w	r1, #0
   86986:	7019      	strb	r1, [r3, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   86988:	f24c 2020 	movw	r0, #49696	; 0xc220
   8698c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86990:	f04f 0101 	mov.w	r1, #1
   86994:	6001      	str	r1, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   86996:	b93a      	cbnz	r2, 869a8 <udd_ctrl_init+0x38>
		cpu_irq_enable();
   86998:	f240 2390 	movw	r3, #656	; 0x290
   8699c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   869a0:	7019      	strb	r1, [r3, #0]
   869a2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   869a6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   869a8:	f24c 1060 	movw	r0, #49504	; 0xc160
   869ac:	f2c4 000a 	movt	r0, #16394	; 0x400a
   869b0:	f04f 0102 	mov.w	r1, #2
   869b4:	6001      	str	r1, [r0, #0]

	udd_g_ctrlreq.callback = NULL;
   869b6:	f641 4214 	movw	r2, #7188	; 0x1c14
   869ba:	f2c2 0207 	movt	r2, #8199	; 0x2007
   869be:	f04f 0300 	mov.w	r3, #0
   869c2:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   869c4:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   869c6:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   869c8:	f241 6108 	movw	r1, #5640	; 0x1608
   869cc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   869d0:	700b      	strb	r3, [r1, #0]
   869d2:	4770      	bx	lr

000869d4 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   869d4:	f241 6308 	movw	r3, #5640	; 0x1608
   869d8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   869dc:	f04f 0205 	mov.w	r2, #5
   869e0:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   869e2:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   869e6:	f2c4 000a 	movt	r0, #16394	; 0x400a
   869ea:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   869ee:	6001      	str	r1, [r0, #0]
   869f0:	4770      	bx	lr
   869f2:	bf00      	nop

000869f4 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   869f4:	f241 6308 	movw	r3, #5640	; 0x1608
   869f8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   869fc:	f04f 0203 	mov.w	r2, #3
   86a00:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86a02:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   86a06:	b672      	cpsid	i
   86a08:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   86a0c:	f240 2190 	movw	r1, #656	; 0x290
   86a10:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86a14:	f04f 0300 	mov.w	r3, #0
   86a18:	700b      	strb	r3, [r1, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   86a1a:	f24c 1260 	movw	r2, #49504	; 0xc160
   86a1e:	f2c4 020a 	movt	r2, #16394	; 0x400a
   86a22:	f04f 0101 	mov.w	r1, #1
   86a26:	6011      	str	r1, [r2, #0]
	udd_enable_in_send_interrupt(0);
   86a28:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   86a2c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   86a30:	6019      	str	r1, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   86a32:	f04f 0108 	mov.w	r1, #8
   86a36:	6011      	str	r1, [r2, #0]
	udd_enable_nak_out_interrupt(0);
   86a38:	6019      	str	r1, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   86a3a:	b948      	cbnz	r0, 86a50 <udd_ctrl_send_zlp_in+0x5c>
		cpu_irq_enable();
   86a3c:	f240 2090 	movw	r0, #656	; 0x290
   86a40:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86a44:	f04f 0201 	mov.w	r2, #1
   86a48:	7002      	strb	r2, [r0, #0]
   86a4a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   86a4e:	b662      	cpsie	i
   86a50:	4770      	bx	lr
   86a52:	bf00      	nop

00086a54 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   86a54:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   86a56:	f641 4314 	movw	r3, #7188	; 0x1c14
   86a5a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86a5e:	6918      	ldr	r0, [r3, #16]
   86a60:	b100      	cbz	r0, 86a64 <udd_ctrl_endofrequest+0x10>
		udd_g_ctrlreq.callback();
   86a62:	4780      	blx	r0
   86a64:	bd08      	pop	{r3, pc}
   86a66:	bf00      	nop

00086a68 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
   86a68:	b570      	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86a6a:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   86a6e:	b672      	cpsid	i
   86a70:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   86a74:	f240 2390 	movw	r3, #656	; 0x290
   86a78:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86a7c:	f04f 0100 	mov.w	r1, #0
   86a80:	7019      	strb	r1, [r3, #0]
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
   86a82:	f24c 2020 	movw	r0, #49696	; 0xc220
   86a86:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86a8a:	f04f 0101 	mov.w	r1, #1
   86a8e:	6001      	str	r1, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   86a90:	b93a      	cbnz	r2, 86aa2 <udd_ctrl_in_sent+0x3a>
		cpu_irq_enable();
   86a92:	f240 2390 	movw	r3, #656	; 0x290
   86a96:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86a9a:	7019      	strb	r1, [r3, #0]
   86a9c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   86aa0:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   86aa2:	f241 6008 	movw	r0, #5640	; 0x1608
   86aa6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86aaa:	7801      	ldrb	r1, [r0, #0]
   86aac:	2903      	cmp	r1, #3
   86aae:	d10a      	bne.n	86ac6 <udd_ctrl_in_sent+0x5e>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   86ab0:	f646 2255 	movw	r2, #27221	; 0x6a55
   86ab4:	f2c0 0208 	movt	r2, #8
   86ab8:	4790      	blx	r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
   86aba:	f646 1071 	movw	r0, #26993	; 0x6971
   86abe:	f2c0 0008 	movt	r0, #8
   86ac2:	4780      	blx	r0
		return;
   86ac4:	bd70      	pop	{r4, r5, r6, pc}
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   86ac6:	f241 640a 	movw	r4, #5642	; 0x160a
   86aca:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86ace:	8823      	ldrh	r3, [r4, #0]
   86ad0:	f641 4214 	movw	r2, #7188	; 0x1c14
   86ad4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86ad8:	8990      	ldrh	r0, [r2, #12]
   86ada:	1ac1      	subs	r1, r0, r3
   86adc:	b28c      	uxth	r4, r1
	if (0 == nb_remain) {
   86ade:	2c00      	cmp	r4, #0
   86ae0:	d155      	bne.n	86b8e <udd_ctrl_in_sent+0x126>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous playlaod buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   86ae2:	f241 528a 	movw	r2, #5514	; 0x158a
   86ae6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86aea:	8810      	ldrh	r0, [r2, #0]
   86aec:	181b      	adds	r3, r3, r0
   86aee:	b299      	uxth	r1, r3
   86af0:	8011      	strh	r1, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   86af2:	f641 4214 	movw	r2, #7188	; 0x1c14
   86af6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86afa:	88d0      	ldrh	r0, [r2, #6]
   86afc:	4288      	cmp	r0, r1
   86afe:	d005      	beq.n	86b0c <udd_ctrl_in_sent+0xa4>
					|| b_shortpacket) {
   86b00:	f241 538d 	movw	r3, #5517	; 0x158d
   86b04:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86b08:	7819      	ldrb	r1, [r3, #0]
   86b0a:	b361      	cbz	r1, 86b66 <udd_ctrl_in_sent+0xfe>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   86b0c:	f241 6008 	movw	r0, #5640	; 0x1608
   86b10:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86b14:	f04f 0204 	mov.w	r2, #4
   86b18:	7002      	strb	r2, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86b1a:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   86b1e:	b672      	cpsid	i
   86b20:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   86b24:	f240 2390 	movw	r3, #656	; 0x290
   86b28:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86b2c:	f04f 0000 	mov.w	r0, #0
   86b30:	7018      	strb	r0, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
   86b32:	f24c 1360 	movw	r3, #49504	; 0xc160
   86b36:	f2c4 030a 	movt	r3, #16394	; 0x400a
   86b3a:	f04f 0210 	mov.w	r2, #16
   86b3e:	601a      	str	r2, [r3, #0]
	udd_enable_nak_in_interrupt(0);
   86b40:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   86b44:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86b48:	6002      	str	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   86b4a:	2900      	cmp	r1, #0
   86b4c:	f040 80a7 	bne.w	86c9e <udd_ctrl_in_sent+0x236>
		cpu_irq_enable();
   86b50:	f240 2190 	movw	r1, #656	; 0x290
   86b54:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86b58:	f04f 0301 	mov.w	r3, #1
   86b5c:	700b      	strb	r3, [r1, #0]
   86b5e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   86b62:	b662      	cpsie	i
   86b64:	bd70      	pop	{r4, r5, r6, pc}
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   86b66:	f641 4514 	movw	r5, #7188	; 0x1c14
   86b6a:	f2c2 0507 	movt	r5, #8199	; 0x2007
   86b6e:	696e      	ldr	r6, [r5, #20]
   86b70:	b1ce      	cbz	r6, 86ba6 <udd_ctrl_in_sent+0x13e>
				|| (!udd_g_ctrlreq.over_under_run())) {
   86b72:	47b0      	blx	r6
   86b74:	b1b8      	cbz	r0, 86ba6 <udd_ctrl_in_sent+0x13e>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   86b76:	f241 640a 	movw	r4, #5642	; 0x160a
   86b7a:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86b7e:	f04f 0200 	mov.w	r2, #0
   86b82:	8022      	strh	r2, [r4, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   86b84:	f641 4014 	movw	r0, #7188	; 0x1c14
   86b88:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86b8c:	8984      	ldrh	r4, [r0, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   86b8e:	2c3f      	cmp	r4, #63	; 0x3f
   86b90:	d909      	bls.n	86ba6 <udd_ctrl_in_sent+0x13e>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
   86b92:	f241 538d 	movw	r3, #5517	; 0x158d
   86b96:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86b9a:	f04f 0100 	mov.w	r1, #0
   86b9e:	7019      	strb	r1, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   86ba0:	f04f 0440 	mov.w	r4, #64	; 0x40
   86ba4:	e006      	b.n	86bb4 <udd_ctrl_in_sent+0x14c>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
   86ba6:	f241 558d 	movw	r5, #5517	; 0x158d
   86baa:	f2c2 0507 	movt	r5, #8199	; 0x2007
   86bae:	f04f 0601 	mov.w	r6, #1
   86bb2:	702e      	strb	r6, [r5, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   86bb4:	f641 4214 	movw	r2, #7188	; 0x1c14
   86bb8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86bbc:	6890      	ldr	r0, [r2, #8]
   86bbe:	f241 630a 	movw	r3, #5642	; 0x160a
   86bc2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86bc6:	881e      	ldrh	r6, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86bc8:	f3ef 8110 	mrs	r1, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   86bcc:	f1d1 0501 	rsbs	r5, r1, #1
   86bd0:	bf38      	it	cc
   86bd2:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   86bd4:	b672      	cpsid	i
   86bd6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   86bda:	f240 2290 	movw	r2, #656	; 0x290
   86bde:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86be2:	f04f 0300 	mov.w	r3, #0
   86be6:	7013      	strb	r3, [r2, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
   86be8:	f24c 1130 	movw	r1, #49456	; 0xc130
   86bec:	f2c4 010a 	movt	r1, #16394	; 0x400a
   86bf0:	680a      	ldr	r2, [r1, #0]
   86bf2:	f012 0f02 	tst.w	r2, #2
   86bf6:	d101      	bne.n	86bfc <udd_ctrl_in_sent+0x194>
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   86bf8:	b99c      	cbnz	r4, 86c22 <udd_ctrl_in_sent+0x1ba>
   86bfa:	e035      	b.n	86c68 <udd_ctrl_in_sent+0x200>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   86bfc:	b14d      	cbz	r5, 86c12 <udd_ctrl_in_sent+0x1aa>
		cpu_irq_enable();
   86bfe:	f240 2090 	movw	r0, #656	; 0x290
   86c02:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86c06:	f04f 0201 	mov.w	r2, #1
   86c0a:	7002      	strb	r2, [r0, #0]
   86c0c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   86c10:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   86c12:	f241 6108 	movw	r1, #5640	; 0x1608
   86c16:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86c1a:	f04f 0304 	mov.w	r3, #4
   86c1e:	700b      	strb	r3, [r1, #0]
		return; // Exit of IN DATA phase
   86c20:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   86c22:	1982      	adds	r2, r0, r6
		cpu_irq_restore(flags);
	}
}


static void udd_ctrl_in_sent(void)
   86c24:	f04f 0300 	mov.w	r3, #0
   86c28:	f2c2 0318 	movt	r3, #8216	; 0x2018
   86c2c:	ea6f 0003 	mvn.w	r0, r3
   86c30:	1901      	adds	r1, r0, r4
   86c32:	f001 0001 	and.w	r0, r1, #1
   86c36:	f102 32ff 	add.w	r2, r2, #4294967295
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
   86c3a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   86c3e:	f803 1b01 	strb.w	r1, [r3], #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   86c42:	b2d9      	uxtb	r1, r3
   86c44:	42a1      	cmp	r1, r4
   86c46:	d32b      	bcc.n	86ca0 <udd_ctrl_in_sent+0x238>
   86c48:	e00e      	b.n	86c68 <udd_ctrl_in_sent+0x200>
   86c4a:	f102 0001 	add.w	r0, r2, #1
		*ptr_dest++ = *ptr_src++;
   86c4e:	7852      	ldrb	r2, [r2, #1]
   86c50:	4619      	mov	r1, r3
   86c52:	f801 2b01 	strb.w	r2, [r1], #1
   86c56:	f100 0201 	add.w	r2, r0, #1
   86c5a:	7840      	ldrb	r0, [r0, #1]
   86c5c:	7058      	strb	r0, [r3, #1]
   86c5e:	f101 0301 	add.w	r3, r1, #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   86c62:	b2d9      	uxtb	r1, r3
   86c64:	42a1      	cmp	r1, r4
   86c66:	d3f0      	bcc.n	86c4a <udd_ctrl_in_sent+0x1e2>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   86c68:	19a4      	adds	r4, r4, r6
   86c6a:	f241 630a 	movw	r3, #5642	; 0x160a
   86c6e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86c72:	801c      	strh	r4, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   86c74:	f24c 1060 	movw	r0, #49504	; 0xc160
   86c78:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86c7c:	f04f 0201 	mov.w	r2, #1
   86c80:	6002      	str	r2, [r0, #0]
	udd_enable_in_send_interrupt(0);
   86c82:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   86c86:	f2c4 010a 	movt	r1, #16394	; 0x400a
   86c8a:	600a      	str	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   86c8c:	b13d      	cbz	r5, 86c9e <udd_ctrl_in_sent+0x236>
		cpu_irq_enable();
   86c8e:	f240 2390 	movw	r3, #656	; 0x290
   86c92:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86c96:	701a      	strb	r2, [r3, #0]
   86c98:	f3bf 8f5f 	dmb	sy
   86c9c:	b662      	cpsie	i
   86c9e:	bd70      	pop	{r4, r5, r6, pc}
   86ca0:	b240      	sxtb	r0, r0
   86ca2:	2800      	cmp	r0, #0
   86ca4:	d0d1      	beq.n	86c4a <udd_ctrl_in_sent+0x1e2>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
   86ca6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   86caa:	f803 1b01 	strb.w	r1, [r3], #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   86cae:	b2d8      	uxtb	r0, r3
   86cb0:	42a0      	cmp	r0, r4
   86cb2:	d3ca      	bcc.n	86c4a <udd_ctrl_in_sent+0x1e2>
   86cb4:	e7d8      	b.n	86c68 <udd_ctrl_in_sent+0x200>
   86cb6:	bf00      	nop

00086cb8 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   86cb8:	b538      	push	{r3, r4, r5, lr}
   86cba:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
   86cbc:	7d04      	ldrb	r4, [r0, #20]
   86cbe:	f014 0f01 	tst.w	r4, #1
   86cc2:	d013      	beq.n	86cec <udd_ep_finish_job+0x34>
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
   86cc4:	7d04      	ldrb	r4, [r0, #20]
   86cc6:	f36f 0400 	bfc	r4, #0, #1
   86cca:	7504      	strb	r4, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   86ccc:	6804      	ldr	r4, [r0, #0]
   86cce:	b16c      	cbz	r4, 86cec <udd_ep_finish_job+0x34>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   86cd0:	f44f 4541 	mov.w	r5, #49408	; 0xc100
   86cd4:	f2c4 050a 	movt	r5, #16394	; 0x400a
   86cd8:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
   86cdc:	f410 7f80 	tst.w	r0, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
   86ce0:	bf18      	it	ne
   86ce2:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   86ce6:	4608      	mov	r0, r1
   86ce8:	6899      	ldr	r1, [r3, #8]
   86cea:	47a0      	blx	r4
   86cec:	bd38      	pop	{r3, r4, r5, pc}
   86cee:	bf00      	nop

00086cf0 <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   86cf0:	b508      	push	{r3, lr}
	ep &= USB_EP_ADDR_MASK;
   86cf2:	f000 020f 	and.w	r2, r0, #15

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   86cf6:	f102 30ff 	add.w	r0, r2, #4294967295
   86cfa:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   86cfe:	f241 5390 	movw	r3, #5520	; 0x1590
   86d02:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86d06:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
   86d0a:	f04f 0101 	mov.w	r1, #1
   86d0e:	f646 43b9 	movw	r3, #27833	; 0x6cb9
   86d12:	f2c0 0308 	movt	r3, #8
   86d16:	4798      	blx	r3
   86d18:	bd08      	pop	{r3, pc}
   86d1a:	bf00      	nop

00086d1c <udd_ep_trans_done>:
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

#ifdef UDD_EP_DMA_SUPPORTED
static void udd_ep_trans_done(udd_ep_id_t ep)
{
   86d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86d1e:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   86d20:	f100 31ff 	add.w	r1, r0, #4294967295
   86d24:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   86d28:	f241 5390 	movw	r3, #5520	; 0x1590
   86d2c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86d30:	eb03 03c0 	add.w	r3, r3, r0, lsl #3

	if (!ptr_job->busy) {
   86d34:	7d18      	ldrb	r0, [r3, #20]
   86d36:	f010 0f01 	tst.w	r0, #1
   86d3a:	f000 80c6 	beq.w	86eca <udd_ep_trans_done+0x1ae>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   86d3e:	68dc      	ldr	r4, [r3, #12]
   86d40:	689d      	ldr	r5, [r3, #8]
   86d42:	42ac      	cmp	r4, r5
   86d44:	f000 8082 	beq.w	86e4c <udd_ep_trans_done+0x130>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   86d48:	1b2d      	subs	r5, r5, r4

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   86d4a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   86d4e:	bf92      	itee	ls
   86d50:	042e      	lslls	r6, r5, #16
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   86d52:	f44f 3580 	movhi.w	r5, #65536	; 0x10000

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
   86d56:	2600      	movhi	r6, #0
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
		}
		if (Is_udd_endpoint_in(ep)) {
   86d58:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   86d5c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86d60:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   86d64:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
   86d68:	f417 7f80 	tst.w	r7, #256	; 0x100
   86d6c:	d011      	beq.n	86d92 <udd_ep_trans_done+0x76>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   86d6e:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
   86d72:	f3c7 1002 	ubfx	r0, r7, #4, #3
   86d76:	f04f 0708 	mov.w	r7, #8
   86d7a:	fa07 f000 	lsl.w	r0, r7, r0
   86d7e:	f100 30ff 	add.w	r0, r0, #4294967295
   86d82:	4205      	tst	r5, r0
   86d84:	d017      	beq.n	86db6 <udd_ep_trans_done+0x9a>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
   86d86:	433e      	orrs	r6, r7
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   86d88:	7d1f      	ldrb	r7, [r3, #20]
   86d8a:	f36f 0741 	bfc	r7, #1, #1
   86d8e:	751f      	strb	r7, [r3, #20]
   86d90:	e011      	b.n	86db6 <udd_ep_trans_done+0x9a>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   86d92:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
   86d96:	f3c0 27c1 	ubfx	r7, r0, #11, #2
   86d9a:	2f01      	cmp	r7, #1
   86d9c:	d109      	bne.n	86db2 <udd_ep_trans_done+0x96>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   86d9e:	f8dc 0000 	ldr.w	r0, [ip]
   86da2:	f3c0 1002 	ubfx	r0, r0, #4, #3
   86da6:	f04f 0708 	mov.w	r7, #8
   86daa:	fa07 f000 	lsl.w	r0, r7, r0
   86dae:	4285      	cmp	r5, r0
   86db0:	d801      	bhi.n	86db6 <udd_ep_trans_done+0x9a>

				// Enable short packet reception
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   86db2:	f046 0614 	orr.w	r6, r6, #20
						| UOTGHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   86db6:	f44f 4043 	mov.w	r0, #49920	; 0xc300
   86dba:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86dbe:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   86dc2:	685f      	ldr	r7, [r3, #4]
   86dc4:	193c      	adds	r4, r7, r4
   86dc6:	6044      	str	r4, [r0, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86dc8:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   86dcc:	f1d7 0c01 	rsbs	ip, r7, #1
   86dd0:	bf38      	it	cc
   86dd2:	f04f 0c00 	movcc.w	ip, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   86dd6:	b672      	cpsid	i
   86dd8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   86ddc:	f240 2490 	movw	r4, #656	; 0x290
   86de0:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86de4:	f04f 0700 	mov.w	r7, #0
   86de8:	7027      	strb	r7, [r4, #0]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   86dea:	68c4      	ldr	r4, [r0, #12]
   86dec:	f014 0f10 	tst.w	r4, #16
   86df0:	d11d      	bne.n	86e2e <udd_ep_trans_done+0x112>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   86df2:	f046 0621 	orr.w	r6, r6, #33	; 0x21
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
				& UOTGHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   86df6:	6086      	str	r6, [r0, #8]
			ptr_job->buf_cnt += next_trans;
   86df8:	68da      	ldr	r2, [r3, #12]
   86dfa:	1950      	adds	r0, r2, r5
   86dfc:	60d8      	str	r0, [r3, #12]
			ptr_job->buf_load = next_trans;
   86dfe:	611d      	str	r5, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   86e00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   86e04:	fa03 f101 	lsl.w	r1, r3, r1
   86e08:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   86e0c:	f2c4 020a 	movt	r2, #16394	; 0x400a
   86e10:	6191      	str	r1, [r2, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   86e12:	f1bc 0f00 	cmp.w	ip, #0
   86e16:	d058      	beq.n	86eca <udd_ep_trans_done+0x1ae>
		cpu_irq_enable();
   86e18:	f240 2090 	movw	r0, #656	; 0x290
   86e1c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86e20:	f04f 0301 	mov.w	r3, #1
   86e24:	7003      	strb	r3, [r0, #0]
   86e26:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   86e2a:	b662      	cpsie	i
   86e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   86e2e:	f1bc 0f00 	cmp.w	ip, #0
   86e32:	d009      	beq.n	86e48 <udd_ep_trans_done+0x12c>
		cpu_irq_enable();
   86e34:	f240 2190 	movw	r1, #656	; 0x290
   86e38:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86e3c:	f04f 0001 	mov.w	r0, #1
   86e40:	7008      	strb	r0, [r1, #0]
   86e42:	f3bf 8f5f 	dmb	sy
   86e46:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   86e48:	68d9      	ldr	r1, [r3, #12]
   86e4a:	6099      	str	r1, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   86e4c:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   86e50:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86e54:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
   86e58:	f411 7f80 	tst.w	r1, #256	; 0x100
   86e5c:	d02d      	beq.n	86eba <udd_ep_trans_done+0x19e>
		if (ptr_job->b_shortpacket) {
   86e5e:	7d18      	ldrb	r0, [r3, #20]
   86e60:	f000 0102 	and.w	r1, r0, #2
   86e64:	b2c8      	uxtb	r0, r1
   86e66:	b340      	cbz	r0, 86eba <udd_ep_trans_done+0x19e>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
   86e68:	f24c 1060 	movw	r0, #49504	; 0xc160
   86e6c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86e70:	f04f 0101 	mov.w	r1, #1
   86e74:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			if (Is_udd_write_enabled(ep)) {
   86e78:	f24c 1330 	movw	r3, #49456	; 0xc130
   86e7c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   86e80:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   86e84:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   86e88:	d005      	beq.n	86e96 <udd_ep_trans_done+0x17a>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
   86e8a:	f24c 1390 	movw	r3, #49552	; 0xc190
   86e8e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   86e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
   86e96:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   86e9a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86e9e:	f04f 0101 	mov.w	r1, #1
   86ea2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			udd_enable_endpoint_interrupt(ep);
   86ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   86eaa:	fa03 f202 	lsl.w	r2, r3, r2
   86eae:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   86eb2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86eb6:	6182      	str	r2, [r0, #24]
			return;
   86eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   86eba:	4618      	mov	r0, r3
   86ebc:	f04f 0100 	mov.w	r1, #0
   86ec0:	f646 43b9 	movw	r3, #27833	; 0x6cb9
   86ec4:	f2c0 0308 	movt	r3, #8
   86ec8:	4798      	blx	r3
   86eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00086ecc <udd_enable>:
	return true;
}


void udd_enable(void)
{
   86ecc:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86ece:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   86ed2:	b672      	cpsid	i
   86ed4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   86ed8:	f240 2390 	movw	r3, #656	; 0x290
   86edc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86ee0:	f04f 0200 	mov.w	r2, #0
   86ee4:	701a      	strb	r2, [r3, #0]
		cpu_irq_restore(flags);
		return;
	}
#else
	// SINGLE DEVICE MODE INITIALIZATION
	pmc_enable_periph_clk(ID_UOTGHS);
   86ee6:	f04f 0028 	mov.w	r0, #40	; 0x28
   86eea:	f246 71f1 	movw	r1, #26609	; 0x67f1
   86eee:	f2c0 0108 	movt	r1, #8
   86ef2:	4788      	blx	r1
	sysclk_enable_usb();
   86ef4:	f244 00fd 	movw	r0, #16637	; 0x40fd
   86ef8:	f2c0 0008 	movt	r0, #8
   86efc:	4780      	blx	r0
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   86efe:	f44f 4361 	mov.w	r3, #57600	; 0xe100
   86f02:	f2ce 0300 	movt	r3, #57344	; 0xe000
   86f06:	f04f 0250 	mov.w	r2, #80	; 0x50
   86f0a:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   86f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
   86f12:	6059      	str	r1, [r3, #4]
	NVIC_SetPriority((IRQn_Type) ID_UOTGHS, UDD_USB_INT_LEVEL);
	NVIC_EnableIRQ((IRQn_Type) ID_UOTGHS);

	// Always authorize asynchrone USB interrupts to exit of sleep mode
	// For SAM USB wake up device except BACKUP mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   86f14:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   86f18:	f646 039d 	movw	r3, #26781	; 0x689d
   86f1c:	f2c0 0308 	movt	r3, #8
   86f20:	4798      	blx	r3
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
#else
	// ID pin not used then force device mode
	otg_disable_id_pin();
   86f22:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   86f26:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86f2a:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
   86f2e:	f022 7180 	bic.w	r1, r2, #16777216	; 0x1000000
   86f32:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
	otg_force_device_mode();
   86f36:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   86f3a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
   86f3e:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
   86f42:	f8d0 1800 	ldr.w	r1, [r0, #2048]	; 0x800
   86f46:	f021 7380 	bic.w	r3, r1, #16777216	; 0x1000000
   86f4a:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
#endif
	// Enable USB hardware
	otg_enable_pad();
   86f4e:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
   86f52:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
   86f56:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
	otg_enable();
   86f5a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   86f5e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
   86f62:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
   86f66:	6801      	ldr	r1, [r0, #0]
   86f68:	f421 5380 	bic.w	r3, r1, #4096	; 0x1000
   86f6c:	6003      	str	r3, [r0, #0]
# ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   86f6e:	6802      	ldr	r2, [r0, #0]
   86f70:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
   86f74:	6001      	str	r1, [r0, #0]
	udd_high_speed_disable();
# endif
#endif // USB_DEVICE_LOW_SPEED

	// Check USB clock
	otg_unfreeze_clock();
   86f76:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   86f7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
   86f7e:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   86f82:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   86f86:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86f8a:	f8d0 1804 	ldr.w	r1, [r0, #2052]	; 0x804
   86f8e:	f411 4f80 	tst.w	r1, #16384	; 0x4000
   86f92:	d0fa      	beq.n	86f8a <udd_enable+0xbe>

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   86f94:	f241 5390 	movw	r3, #5520	; 0x1590
   86f98:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86f9c:	7d1a      	ldrb	r2, [r3, #20]
		udd_ep_job[i].stall_requested = false;
   86f9e:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
   86fa2:	f36f 0082 	bfc	r0, #2, #1
   86fa6:	7518      	strb	r0, [r3, #20]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   86fa8:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
		udd_ep_job[i].stall_requested = false;
   86fac:	f001 02fe 	and.w	r2, r1, #254	; 0xfe
   86fb0:	f36f 0282 	bfc	r2, #2, #1
   86fb4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   86fb8:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
		udd_ep_job[i].stall_requested = false;
   86fbc:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
   86fc0:	f36f 0182 	bfc	r1, #2, #1
   86fc4:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   86fc8:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
		udd_ep_job[i].stall_requested = false;
   86fcc:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
   86fd0:	f36f 0082 	bfc	r0, #2, #1
   86fd4:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   86fd8:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
		udd_ep_job[i].stall_requested = false;
   86fdc:	f001 02fe 	and.w	r2, r1, #254	; 0xfe
   86fe0:	f36f 0282 	bfc	r2, #2, #1
   86fe4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
#endif

	otg_ack_vbus_transition();
   86fe8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   86fec:	f2c4 030a 	movt	r3, #16394	; 0x400a
   86ff0:	f04f 0002 	mov.w	r0, #2
   86ff4:	f8c3 0808 	str.w	r0, [r3, #2056]	; 0x808
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
   86ff8:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
   86ffc:	f411 6f00 	tst.w	r1, #2048	; 0x800
   87000:	d005      	beq.n	8700e <udd_enable+0x142>
		otg_raise_vbus_transition();
   87002:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   87006:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8700a:	f8c2 080c 	str.w	r0, [r2, #2060]	; 0x80c
	}
	otg_enable_vbus_interrupt();
   8700e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87012:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87016:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
   8701a:	f040 0102 	orr.w	r1, r0, #2
   8701e:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	otg_freeze_clock();
   87022:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   87026:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   8702a:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800

#ifndef UDD_NO_SLEEP_MGR
	if (!udd_b_sleep_initialized) {
   8702e:	f241 5389 	movw	r3, #5513	; 0x1589
   87032:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87036:	7819      	ldrb	r1, [r3, #0]
   87038:	bb59      	cbnz	r1, 87092 <udd_enable+0x1c6>
		udd_b_sleep_initialized = true;
   8703a:	f241 5089 	movw	r0, #5513	; 0x1589
   8703e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87042:	f04f 0301 	mov.w	r3, #1
   87046:	7003      	strb	r3, [r0, #0]
		// Initialize the sleep mode authorized for the USB suspend mode
		udd_b_idle = false;
   87048:	f04f 0000 	mov.w	r0, #0
   8704c:	f241 518c 	movw	r1, #5516	; 0x158c
   87050:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87054:	7008      	strb	r0, [r1, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87056:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8705a:	b672      	cpsid	i
   8705c:	f3bf 8f5f 	dmb	sy
   87060:	f240 2390 	movw	r3, #656	; 0x290
   87064:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87068:	7018      	strb	r0, [r3, #0]
   8706a:	f641 400c 	movw	r0, #7180	; 0x1c0c
   8706e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87072:	78c1      	ldrb	r1, [r0, #3]
   87074:	f101 0101 	add.w	r1, r1, #1
   87078:	70c1      	strb	r1, [r0, #3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8707a:	b98a      	cbnz	r2, 870a0 <udd_enable+0x1d4>
		cpu_irq_enable();
   8707c:	f240 2390 	movw	r3, #656	; 0x290
   87080:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87084:	f04f 0201 	mov.w	r2, #1
   87088:	701a      	strb	r2, [r3, #0]
   8708a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8708e:	b662      	cpsie	i
   87090:	e006      	b.n	870a0 <udd_enable+0x1d4>
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_SUSPEND);
	} else {
		udd_sleep_mode(false); // Enter idle mode
   87092:	f04f 0000 	mov.w	r0, #0
   87096:	f646 02c5 	movw	r2, #26821	; 0x68c5
   8709a:	f2c0 0208 	movt	r2, #8
   8709e:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   870a0:	b94c      	cbnz	r4, 870b6 <udd_enable+0x1ea>
		cpu_irq_enable();
   870a2:	f240 2090 	movw	r0, #656	; 0x290
   870a6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   870aa:	f04f 0101 	mov.w	r1, #1
   870ae:	7001      	strb	r1, [r0, #0]
   870b0:	f3bf 8f5f 	dmb	sy
   870b4:	b662      	cpsie	i
   870b6:	bd10      	pop	{r4, pc}

000870b8 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   870b8:	b570      	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   870ba:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   870be:	b672      	cpsid	i
   870c0:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   870c4:	f240 2390 	movw	r3, #656	; 0x290
   870c8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   870cc:	f04f 0200 	mov.w	r2, #0
   870d0:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   870d2:	f04f 0001 	mov.w	r0, #1
   870d6:	f646 01c5 	movw	r1, #26821	; 0x68c5
   870da:	f2c0 0108 	movt	r1, #8
   870de:	4788      	blx	r1
	otg_unfreeze_clock();
   870e0:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   870e4:	f2c4 000a 	movt	r0, #16394	; 0x400a
   870e8:	f8d0 5800 	ldr.w	r5, [r0, #2048]	; 0x800
   870ec:	f425 4680 	bic.w	r6, r5, #16384	; 0x4000
   870f0:	f8c0 6800 	str.w	r6, [r0, #2048]	; 0x800

	// This section of clock check can be improved with a chek of
	// USB clock source via sysclk()
	// Check USB clock because the source can be a PLL
	while (!Is_otg_clock_usable());
   870f4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   870f8:	f2c4 020a 	movt	r2, #16394	; 0x400a
   870fc:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   87100:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   87104:	d0fa      	beq.n	870fc <udd_attach+0x44>

	// Authorize attach if Vbus is present
	udd_attach_device();
   87106:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8710a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8710e:	6819      	ldr	r1, [r3, #0]
   87110:	f421 7080 	bic.w	r0, r1, #256	; 0x100
   87114:	6018      	str	r0, [r3, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   87116:	f04f 0608 	mov.w	r6, #8
   8711a:	619e      	str	r6, [r3, #24]
	udd_enable_suspend_interrupt();
   8711c:	f04f 0101 	mov.w	r1, #1
   87120:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
   87122:	f04f 0210 	mov.w	r2, #16
   87126:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   87128:	f04f 0504 	mov.w	r5, #4
   8712c:	619d      	str	r5, [r3, #24]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   8712e:	f04f 0002 	mov.w	r0, #2
   87132:	6198      	str	r0, [r3, #24]
#endif
	// Reset following interupts flag
	udd_ack_reset();
   87134:	609e      	str	r6, [r3, #8]
	udd_ack_sof();
   87136:	609d      	str	r5, [r3, #8]
	udd_ack_msof();
   87138:	6098      	str	r0, [r3, #8]

	// The first suspend interrupt must be forced
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
   8713a:	60d9      	str	r1, [r3, #12]

	udd_ack_wake_up();
   8713c:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   8713e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   87142:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   87146:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8714a:	b93c      	cbnz	r4, 8715c <udd_attach+0xa4>
		cpu_irq_enable();
   8714c:	f240 2390 	movw	r3, #656	; 0x290
   87150:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87154:	7019      	strb	r1, [r3, #0]
   87156:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8715a:	b662      	cpsie	i
   8715c:	bd70      	pop	{r4, r5, r6, pc}
   8715e:	bf00      	nop

00087160 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
   87160:	b508      	push	{r3, lr}
	otg_unfreeze_clock();
   87162:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87166:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8716a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8716e:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   87172:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800

	// Detach device from the bus
	udd_detach_device();
   87176:	6819      	ldr	r1, [r3, #0]
   87178:	f441 7280 	orr.w	r2, r1, #256	; 0x100
   8717c:	601a      	str	r2, [r3, #0]
	otg_freeze_clock();
   8717e:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
   87182:	f440 4180 	orr.w	r1, r0, #16384	; 0x4000
   87186:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	udd_sleep_mode(false);
   8718a:	f04f 0000 	mov.w	r0, #0
   8718e:	f646 03c5 	movw	r3, #26821	; 0x68c5
   87192:	f2c0 0308 	movt	r3, #8
   87196:	4798      	blx	r3
   87198:	bd08      	pop	{r3, pc}
   8719a:	bf00      	nop

0008719c <UOTGHS_Handler>:
void udd_interrupt(void);
void udd_interrupt(void)
#else
ISR(UDD_USB_INT_FUN)
#endif
{
   8719c:	b570      	push	{r4, r5, r6, lr}
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   8719e:	f646 03b5 	movw	r3, #26805	; 0x68b5
   871a2:	f2c0 0308 	movt	r3, #8
   871a6:	4798      	blx	r3
   871a8:	b990      	cbnz	r0, 871d0 <UOTGHS_Handler+0x34>
   871aa:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   871ae:	f2c4 000a 	movt	r0, #16394	; 0x400a
   871b2:	6841      	ldr	r1, [r0, #4]
   871b4:	f011 0f01 	tst.w	r1, #1
   871b8:	d10a      	bne.n	871d0 <UOTGHS_Handler+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   871ba:	b672      	cpsid	i
   871bc:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   871c0:	f240 2090 	movw	r0, #656	; 0x290
   871c4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   871c8:	f04f 0200 	mov.w	r2, #0
   871cc:	7002      	strb	r2, [r0, #0]
		return;
   871ce:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_sof()) {
   871d0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   871d4:	f2c4 020a 	movt	r2, #16394	; 0x400a
   871d8:	6853      	ldr	r3, [r2, #4]
   871da:	f013 0f04 	tst.w	r3, #4
   871de:	d016      	beq.n	8720e <UOTGHS_Handler+0x72>
		udd_ack_sof();
   871e0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   871e4:	f2c4 010a 	movt	r1, #16394	; 0x400a
   871e8:	f04f 0004 	mov.w	r0, #4
   871ec:	6088      	str	r0, [r1, #8]
		if (Is_udd_full_speed_mode()) {
   871ee:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
   871f2:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   871f6:	d104      	bne.n	87202 <UOTGHS_Handler+0x66>
			udc_sof_notify();
   871f8:	f645 3385 	movw	r3, #23429	; 0x5b85
   871fc:	f2c0 0308 	movt	r3, #8
   87200:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   87202:	f643 41c5 	movw	r1, #15557	; 0x3cc5
   87206:	f2c0 0108 	movt	r1, #8
   8720a:	4788      	blx	r1
#endif
		goto udd_interrupt_sof_end;
   8720c:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_msof()) {
   8720e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87212:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87216:	6841      	ldr	r1, [r0, #4]
   87218:	f011 0f02 	tst.w	r1, #2
   8721c:	d00c      	beq.n	87238 <UOTGHS_Handler+0x9c>
		udd_ack_msof();
   8721e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87222:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87226:	f04f 0202 	mov.w	r2, #2
   8722a:	6082      	str	r2, [r0, #8]
		udc_sof_notify();
   8722c:	f645 3385 	movw	r3, #23429	; 0x5b85
   87230:	f2c0 0308 	movt	r3, #8
   87234:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   87236:	bd70      	pop	{r4, r5, r6, pc}


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0)) {
   87238:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   8723c:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87240:	6853      	ldr	r3, [r2, #4]
   87242:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   87246:	f000 8459 	beq.w	87afc <UOTGHS_Handler+0x960>
	}

	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   8724a:	f24c 2020 	movw	r0, #49696	; 0xc220
   8724e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87252:	f04f 0110 	mov.w	r1, #16
   87256:	6001      	str	r1, [r0, #0]
	udd_disable_nak_out_interrupt(0);
   87258:	f04f 0208 	mov.w	r2, #8
   8725c:	6002      	str	r2, [r0, #0]

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
   8725e:	f24c 1330 	movw	r3, #49456	; 0xc130
   87262:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87266:	6818      	ldr	r0, [r3, #0]
   87268:	f010 0f04 	tst.w	r0, #4
   8726c:	f000 80d9 	beq.w	87422 <UOTGHS_Handler+0x286>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   87270:	f241 6108 	movw	r1, #5640	; 0x1608
   87274:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87278:	780a      	ldrb	r2, [r1, #0]
   8727a:	b14a      	cbz	r2, 87290 <UOTGHS_Handler+0xf4>
		// May be a hidden DATA or ZLP phase or protocol abort
		udd_ctrl_endofrequest();
   8727c:	f646 2055 	movw	r0, #27221	; 0x6a55
   87280:	f2c0 0008 	movt	r0, #8
   87284:	4780      	blx	r0

		// Reinitializes control endpoint management
		udd_ctrl_init();
   87286:	f646 1371 	movw	r3, #26993	; 0x6971
   8728a:	f2c0 0308 	movt	r3, #8
   8728e:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   87290:	f24c 1130 	movw	r1, #49456	; 0xc130
   87294:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87298:	680a      	ldr	r2, [r1, #0]
   8729a:	f3c2 500a 	ubfx	r0, r2, #20, #11
   8729e:	2808      	cmp	r0, #8
   872a0:	d00c      	beq.n	872bc <UOTGHS_Handler+0x120>
		udd_ctrl_stall_data();
   872a2:	f646 11d5 	movw	r1, #27093	; 0x69d5
   872a6:	f2c0 0108 	movt	r1, #8
   872aa:	4788      	blx	r1
		udd_ack_setup_received(0);
   872ac:	f24c 1360 	movw	r3, #49504	; 0xc160
   872b0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   872b4:	f04f 0204 	mov.w	r2, #4
   872b8:	601a      	str	r2, [r3, #0]
   872ba:	bd70      	pop	{r4, r5, r6, pc}
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   872bc:	f04f 0300 	mov.w	r3, #0
   872c0:	f2c2 0318 	movt	r3, #8216	; 0x2018
   872c4:	7819      	ldrb	r1, [r3, #0]
   872c6:	f641 4014 	movw	r0, #7188	; 0x1c14
   872ca:	f2c2 0007 	movt	r0, #8199	; 0x2007
   872ce:	7001      	strb	r1, [r0, #0]
   872d0:	f04f 0201 	mov.w	r2, #1
   872d4:	f2c2 0218 	movt	r2, #8216	; 0x2018
   872d8:	7813      	ldrb	r3, [r2, #0]
   872da:	7043      	strb	r3, [r0, #1]
   872dc:	f04f 0102 	mov.w	r1, #2
   872e0:	f2c2 0118 	movt	r1, #8216	; 0x2018
   872e4:	780a      	ldrb	r2, [r1, #0]
   872e6:	7082      	strb	r2, [r0, #2]
   872e8:	f04f 0303 	mov.w	r3, #3
   872ec:	f2c2 0318 	movt	r3, #8216	; 0x2018
   872f0:	7819      	ldrb	r1, [r3, #0]
   872f2:	70c1      	strb	r1, [r0, #3]
   872f4:	f04f 0204 	mov.w	r2, #4
   872f8:	f2c2 0218 	movt	r2, #8216	; 0x2018
   872fc:	7813      	ldrb	r3, [r2, #0]
   872fe:	7103      	strb	r3, [r0, #4]
   87300:	f04f 0105 	mov.w	r1, #5
   87304:	f2c2 0118 	movt	r1, #8216	; 0x2018
   87308:	780a      	ldrb	r2, [r1, #0]
   8730a:	7142      	strb	r2, [r0, #5]
   8730c:	f04f 0306 	mov.w	r3, #6
   87310:	f2c2 0318 	movt	r3, #8216	; 0x2018
   87314:	7819      	ldrb	r1, [r3, #0]
   87316:	7181      	strb	r1, [r0, #6]
   87318:	f04f 0207 	mov.w	r2, #7
   8731c:	f2c2 0218 	movt	r2, #8216	; 0x2018
   87320:	7813      	ldrb	r3, [r2, #0]
   87322:	71c3      	strb	r3, [r0, #7]
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   87324:	f645 30cd 	movw	r0, #23501	; 0x5bcd
   87328:	f2c0 0008 	movt	r0, #8
   8732c:	4780      	blx	r0
   8732e:	b960      	cbnz	r0, 8734a <UOTGHS_Handler+0x1ae>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
   87330:	f646 12d5 	movw	r2, #27093	; 0x69d5
   87334:	f2c0 0208 	movt	r2, #8
   87338:	4790      	blx	r2
		udd_ack_setup_received(0);
   8733a:	f24c 1360 	movw	r3, #49504	; 0xc160
   8733e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87342:	f04f 0004 	mov.w	r0, #4
   87346:	6018      	str	r0, [r3, #0]
   87348:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}
	udd_ack_setup_received(0);
   8734a:	f24c 1160 	movw	r1, #49504	; 0xc160
   8734e:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87352:	f04f 0204 	mov.w	r2, #4
   87356:	600a      	str	r2, [r1, #0]

	if (Udd_setup_is_in()) {
   87358:	f641 4314 	movw	r3, #7188	; 0x1c14
   8735c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87360:	f993 0000 	ldrsb.w	r0, [r3]
   87364:	2800      	cmp	r0, #0
   87366:	da18      	bge.n	8739a <UOTGHS_Handler+0x1fe>
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   87368:	f04f 0000 	mov.w	r0, #0
   8736c:	f241 518a 	movw	r1, #5514	; 0x158a
   87370:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87374:	8008      	strh	r0, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   87376:	f241 620a 	movw	r2, #5642	; 0x160a
   8737a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8737e:	8010      	strh	r0, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   87380:	f241 6308 	movw	r3, #5640	; 0x1608
   87384:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87388:	f04f 0002 	mov.w	r0, #2
   8738c:	7018      	strb	r0, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   8738e:	f646 2169 	movw	r1, #27241	; 0x6a69
   87392:	f2c0 0108 	movt	r1, #8
   87396:	4788      	blx	r1
   87398:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
   8739a:	f641 4114 	movw	r1, #7188	; 0x1c14
   8739e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   873a2:	88ca      	ldrh	r2, [r1, #6]
   873a4:	b92a      	cbnz	r2, 873b2 <UOTGHS_Handler+0x216>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   873a6:	f646 13f5 	movw	r3, #27125	; 0x69f5
   873aa:	f2c0 0308 	movt	r3, #8
   873ae:	4798      	blx	r3
   873b0:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   873b2:	f04f 0300 	mov.w	r3, #0
   873b6:	4618      	mov	r0, r3
   873b8:	f241 518a 	movw	r1, #5514	; 0x158a
   873bc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   873c0:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   873c2:	f241 620a 	movw	r2, #5642	; 0x160a
   873c6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   873ca:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   873cc:	f241 6308 	movw	r3, #5640	; 0x1608
   873d0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   873d4:	f04f 0101 	mov.w	r1, #1
   873d8:	7019      	strb	r1, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   873da:	f24c 1360 	movw	r3, #49504	; 0xc160
   873de:	f2c4 030a 	movt	r3, #16394	; 0x400a
   873e2:	f04f 0210 	mov.w	r2, #16
   873e6:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   873e8:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   873ec:	b672      	cpsid	i
   873ee:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   873f2:	f240 2390 	movw	r3, #656	; 0x290
   873f6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   873fa:	7018      	strb	r0, [r3, #0]
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
   873fc:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   87400:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87404:	6002      	str	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87406:	2900      	cmp	r1, #0
   87408:	f040 8471 	bne.w	87cee <UOTGHS_Handler+0xb52>
		cpu_irq_enable();
   8740c:	f240 2190 	movw	r1, #656	; 0x290
   87410:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87414:	f04f 0201 	mov.w	r2, #1
   87418:	700a      	strb	r2, [r1, #0]
   8741a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8741e:	b662      	cpsie	i
   87420:	bd70      	pop	{r4, r5, r6, pc}
		dbg_print("stup ");
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   87422:	f24c 1130 	movw	r1, #49456	; 0xc130
   87426:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8742a:	680a      	ldr	r2, [r1, #0]
   8742c:	f012 0f01 	tst.w	r2, #1
   87430:	d00d      	beq.n	8744e <UOTGHS_Handler+0x2b2>
   87432:	f24c 13c0 	movw	r3, #49600	; 0xc1c0
   87436:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8743a:	6818      	ldr	r0, [r3, #0]
   8743c:	f010 0f01 	tst.w	r0, #1
   87440:	d005      	beq.n	8744e <UOTGHS_Handler+0x2b2>
		dbg_print("in ");
		// IN packet sent
		udd_ctrl_in_sent();
   87442:	f646 2369 	movw	r3, #27241	; 0x6a69
   87446:	f2c0 0308 	movt	r3, #8
   8744a:	4798      	blx	r3
   8744c:	bd70      	pop	{r4, r5, r6, pc}
		return true;
	}
	if (Is_udd_out_received(0)) {
   8744e:	f24c 1130 	movw	r1, #49456	; 0xc130
   87452:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87456:	680a      	ldr	r2, [r1, #0]
   87458:	f012 0f02 	tst.w	r2, #2
   8745c:	f000 80de 	beq.w	8761c <UOTGHS_Handler+0x480>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   87460:	f241 6008 	movw	r0, #5640	; 0x1608
   87464:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87468:	7801      	ldrb	r1, [r0, #0]
   8746a:	2901      	cmp	r1, #1
   8746c:	d014      	beq.n	87498 <UOTGHS_Handler+0x2fc>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   8746e:	2902      	cmp	r1, #2
   87470:	d001      	beq.n	87476 <UOTGHS_Handler+0x2da>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   87472:	2904      	cmp	r1, #4
   87474:	d105      	bne.n	87482 <UOTGHS_Handler+0x2e6>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
   87476:	f646 2255 	movw	r2, #27221	; 0x6a55
   8747a:	f2c0 0208 	movt	r2, #8
   8747e:	4790      	blx	r2
   87480:	e004      	b.n	8748c <UOTGHS_Handler+0x2f0>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   87482:	f646 11d5 	movw	r1, #27093	; 0x69d5
   87486:	f2c0 0108 	movt	r1, #8
   8748a:	4788      	blx	r1
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   8748c:	f646 1071 	movw	r0, #26993	; 0x6971
   87490:	f2c0 0008 	movt	r0, #8
   87494:	4780      	blx	r0
   87496:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   87498:	f24c 1430 	movw	r4, #49456	; 0xc130
   8749c:	f2c4 040a 	movt	r4, #16394	; 0x400a
   874a0:	6826      	ldr	r6, [r4, #0]
   874a2:	f3c6 540a 	ubfx	r4, r6, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   874a6:	f641 4314 	movw	r3, #7188	; 0x1c14
   874aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   874ae:	8998      	ldrh	r0, [r3, #12]
   874b0:	f241 620a 	movw	r2, #5642	; 0x160a
   874b4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   874b8:	8816      	ldrh	r6, [r2, #0]
   874ba:	1931      	adds	r1, r6, r4
   874bc:	4288      	cmp	r0, r1
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   874be:	bfae      	itee	ge
   874c0:	b2a4      	uxthge	r4, r4
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   874c2:	ebc6 0000 	rsblt	r0, r6, r0
   874c6:	b284      	uxthlt	r4, r0
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   874c8:	f641 4314 	movw	r3, #7188	; 0x1c14
   874cc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   874d0:	6898      	ldr	r0, [r3, #8]
   874d2:	1982      	adds	r2, r0, r6
	for (i = 0; i < nb_data; i++) {
   874d4:	b3b4      	cbz	r4, 87544 <UOTGHS_Handler+0x3a8>
   874d6:	f04f 0300 	mov.w	r3, #0
   874da:	f2c2 0318 	movt	r3, #8216	; 0x2018
   874de:	ea6f 0103 	mvn.w	r1, r3
   874e2:	1908      	adds	r0, r1, r4
   874e4:	f000 0101 	and.w	r1, r0, #1
		*ptr_dest++ = *ptr_src++;
   874e8:	f813 0b01 	ldrb.w	r0, [r3], #1
   874ec:	f802 0b01 	strb.w	r0, [r2], #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   874f0:	b2d8      	uxtb	r0, r3
   874f2:	42a0      	cmp	r0, r4
   874f4:	f0c0 83fc 	bcc.w	87cf0 <UOTGHS_Handler+0xb54>
   874f8:	e00e      	b.n	87518 <UOTGHS_Handler+0x37c>
		*ptr_dest++ = *ptr_src++;
   874fa:	4618      	mov	r0, r3
   874fc:	f810 5b01 	ldrb.w	r5, [r0], #1
   87500:	4611      	mov	r1, r2
   87502:	f801 5b01 	strb.w	r5, [r1], #1
   87506:	785d      	ldrb	r5, [r3, #1]
   87508:	f100 0301 	add.w	r3, r0, #1
   8750c:	7055      	strb	r5, [r2, #1]
   8750e:	f101 0201 	add.w	r2, r1, #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   87512:	b2d8      	uxtb	r0, r3
   87514:	42a0      	cmp	r0, r4
   87516:	d3f0      	bcc.n	874fa <UOTGHS_Handler+0x35e>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   87518:	19a6      	adds	r6, r4, r6
   8751a:	b2b6      	uxth	r6, r6
   8751c:	f241 620a 	movw	r2, #5642	; 0x160a
   87520:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87524:	8016      	strh	r6, [r2, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   87526:	2c40      	cmp	r4, #64	; 0x40
   87528:	d10c      	bne.n	87544 <UOTGHS_Handler+0x3a8>
			|| (udd_g_ctrlreq.req.wLength <=
   8752a:	f641 4314 	movw	r3, #7188	; 0x1c14
   8752e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87532:	88d9      	ldrh	r1, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
   87534:	f241 508a 	movw	r0, #5514	; 0x158a
   87538:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8753c:	8802      	ldrh	r2, [r0, #0]
   8753e:	1993      	adds	r3, r2, r6
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
   87540:	4299      	cmp	r1, r3
   87542:	dc22      	bgt.n	8758a <UOTGHS_Handler+0x3ee>
					(udd_ctrl_prev_payload_buf_cnt +
							udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   87544:	f641 4114 	movw	r1, #7188	; 0x1c14
   87548:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8754c:	818e      	strh	r6, [r1, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   8754e:	694a      	ldr	r2, [r1, #20]
   87550:	b172      	cbz	r2, 87570 <UOTGHS_Handler+0x3d4>
			if (!udd_g_ctrlreq.over_under_run()) {
   87552:	4790      	blx	r2
   87554:	b960      	cbnz	r0, 87570 <UOTGHS_Handler+0x3d4>
				// Stall ZLP
				udd_ctrl_stall_data();
   87556:	f646 12d5 	movw	r2, #27093	; 0x69d5
   8755a:	f2c0 0208 	movt	r2, #8
   8755e:	4790      	blx	r2
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   87560:	f24c 1060 	movw	r0, #49504	; 0xc160
   87564:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87568:	f04f 0302 	mov.w	r3, #2
   8756c:	6003      	str	r3, [r0, #0]
   8756e:	bd70      	pop	{r4, r5, r6, pc}
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   87570:	f24c 1060 	movw	r0, #49504	; 0xc160
   87574:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87578:	f04f 0302 	mov.w	r3, #2
   8757c:	6003      	str	r3, [r0, #0]
		udd_ctrl_send_zlp_in();
   8757e:	f646 11f5 	movw	r1, #27125	; 0x69f5
   87582:	f2c0 0108 	movt	r1, #8
   87586:	4788      	blx	r1
   87588:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   8758a:	49ae      	ldr	r1, [pc, #696]	; (87844 <UOTGHS_Handler+0x6a8>)
   8758c:	8988      	ldrh	r0, [r1, #12]
   8758e:	42b0      	cmp	r0, r6
   87590:	d121      	bne.n	875d6 <UOTGHS_Handler+0x43a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   87592:	4aac      	ldr	r2, [pc, #688]	; (87844 <UOTGHS_Handler+0x6a8>)
   87594:	6953      	ldr	r3, [r2, #20]
   87596:	b94b      	cbnz	r3, 875ac <UOTGHS_Handler+0x410>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
   87598:	4aab      	ldr	r2, [pc, #684]	; (87848 <UOTGHS_Handler+0x6ac>)
   8759a:	4790      	blx	r2
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   8759c:	f24c 1060 	movw	r0, #49504	; 0xc160
   875a0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   875a4:	f04f 0302 	mov.w	r3, #2
   875a8:	6003      	str	r3, [r0, #0]
   875aa:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   875ac:	4798      	blx	r3
   875ae:	b948      	cbnz	r0, 875c4 <UOTGHS_Handler+0x428>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   875b0:	48a5      	ldr	r0, [pc, #660]	; (87848 <UOTGHS_Handler+0x6ac>)
   875b2:	4780      	blx	r0
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   875b4:	f24c 1360 	movw	r3, #49504	; 0xc160
   875b8:	f2c4 030a 	movt	r3, #16394	; 0x400a
   875bc:	f04f 0102 	mov.w	r1, #2
   875c0:	6019      	str	r1, [r3, #0]
   875c2:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   875c4:	4aa1      	ldr	r2, [pc, #644]	; (8784c <UOTGHS_Handler+0x6b0>)
   875c6:	4ba2      	ldr	r3, [pc, #648]	; (87850 <UOTGHS_Handler+0x6b4>)
   875c8:	8818      	ldrh	r0, [r3, #0]
   875ca:	8811      	ldrh	r1, [r2, #0]
   875cc:	1840      	adds	r0, r0, r1
   875ce:	8010      	strh	r0, [r2, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   875d0:	f04f 0200 	mov.w	r2, #0
   875d4:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   875d6:	f24c 1360 	movw	r3, #49504	; 0xc160
   875da:	f2c4 030a 	movt	r3, #16394	; 0x400a
   875de:	f04f 0102 	mov.w	r1, #2
   875e2:	6019      	str	r1, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   875e4:	f04f 0210 	mov.w	r2, #16
   875e8:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   875ea:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   875ee:	b672      	cpsid	i
   875f0:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   875f4:	4b97      	ldr	r3, [pc, #604]	; (87854 <UOTGHS_Handler+0x6b8>)
   875f6:	f04f 0000 	mov.w	r0, #0
   875fa:	7018      	strb	r0, [r3, #0]
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
   875fc:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   87600:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87604:	601a      	str	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87606:	2900      	cmp	r1, #0
   87608:	f040 8371 	bne.w	87cee <UOTGHS_Handler+0xb52>
		cpu_irq_enable();
   8760c:	4991      	ldr	r1, [pc, #580]	; (87854 <UOTGHS_Handler+0x6b8>)
   8760e:	f04f 0201 	mov.w	r2, #1
   87612:	700a      	strb	r2, [r1, #0]
   87614:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87618:	b662      	cpsie	i
   8761a:	bd70      	pop	{r4, r5, r6, pc}
		dbg_print("out ");
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
   8761c:	f24c 1330 	movw	r3, #49456	; 0xc130
   87620:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87624:	6818      	ldr	r0, [r3, #0]
   87626:	f010 0f08 	tst.w	r0, #8
   8762a:	d01f      	beq.n	8766c <UOTGHS_Handler+0x4d0>
		dbg_print("nako ");
		// Overflow on OUT packet
		udd_ack_nak_out(0);
   8762c:	f24c 1060 	movw	r0, #49504	; 0xc160
   87630:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87634:	f04f 0108 	mov.w	r1, #8
   87638:	6001      	str	r1, [r0, #0]
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
   8763a:	f24c 1230 	movw	r2, #49456	; 0xc130
   8763e:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87642:	6813      	ldr	r3, [r2, #0]
   87644:	f013 0f01 	tst.w	r3, #1
   87648:	f040 8351 	bne.w	87cee <UOTGHS_Handler+0xb52>
		return; // Overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   8764c:	f241 6008 	movw	r0, #5640	; 0x1608
   87650:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87654:	7801      	ldrb	r1, [r0, #0]
   87656:	2903      	cmp	r1, #3
   87658:	f040 8349 	bne.w	87cee <UOTGHS_Handler+0xb52>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   8765c:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   87660:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87664:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   87668:	601a      	str	r2, [r3, #0]
   8766a:	bd70      	pop	{r4, r5, r6, pc}
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
   8766c:	f24c 1130 	movw	r1, #49456	; 0xc130
   87670:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87674:	680a      	ldr	r2, [r1, #0]
   87676:	f012 0f10 	tst.w	r2, #16
   8767a:	f000 823f 	beq.w	87afc <UOTGHS_Handler+0x960>
		dbg_print("naki ");
		// Underflow on IN packet
		udd_ack_nak_in(0);
   8767e:	f24c 1360 	movw	r3, #49504	; 0xc160
   87682:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87686:	f04f 0010 	mov.w	r0, #16
   8768a:	6018      	str	r0, [r3, #0]
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
   8768c:	f24c 1130 	movw	r1, #49456	; 0xc130
   87690:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87694:	680a      	ldr	r2, [r1, #0]
   87696:	f012 0f02 	tst.w	r2, #2
   8769a:	f040 8328 	bne.w	87cee <UOTGHS_Handler+0xb52>
		return; // Underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   8769e:	f241 6308 	movw	r3, #5640	; 0x1608
   876a2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   876a6:	7818      	ldrb	r0, [r3, #0]
   876a8:	2801      	cmp	r0, #1
   876aa:	d105      	bne.n	876b8 <UOTGHS_Handler+0x51c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   876ac:	f646 13f5 	movw	r3, #27125	; 0x69f5
   876b0:	f2c0 0308 	movt	r3, #8
   876b4:	4798      	blx	r3
   876b6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   876b8:	2804      	cmp	r0, #4
   876ba:	f040 8318 	bne.w	87cee <UOTGHS_Handler+0xb52>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   876be:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   876c2:	f2c4 010a 	movt	r1, #16394	; 0x400a
   876c6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   876ca:	600a      	str	r2, [r1, #0]
   876cc:	bd70      	pop	{r4, r5, r6, pc}
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   876ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   876d2:	f2c4 030a 	movt	r3, #16394	; 0x400a
   876d6:	685a      	ldr	r2, [r3, #4]
   876d8:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   876dc:	d03c      	beq.n	87758 <UOTGHS_Handler+0x5bc>
   876de:	f04f 0005 	mov.w	r0, #5
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   876e2:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   876e6:	495c      	ldr	r1, [pc, #368]	; (87858 <UOTGHS_Handler+0x6bc>)
   876e8:	e019      	b.n	8771e <UOTGHS_Handler+0x582>

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   876ea:	f04f 0001 	mov.w	r0, #1
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   876ee:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   876f2:	f241 5190 	movw	r1, #5520	; 0x1590
   876f6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   876fa:	e010      	b.n	8771e <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   876fc:	f04f 0002 	mov.w	r0, #2
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   87700:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87704:	4955      	ldr	r1, [pc, #340]	; (8785c <UOTGHS_Handler+0x6c0>)
   87706:	e00a      	b.n	8771e <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   87708:	f04f 0003 	mov.w	r0, #3
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   8770c:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87710:	4953      	ldr	r1, [pc, #332]	; (87860 <UOTGHS_Handler+0x6c4>)
   87712:	e004      	b.n	8771e <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   87714:	f04f 0004 	mov.w	r0, #4
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   87718:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8771c:	4951      	ldr	r1, [pc, #324]	; (87864 <UOTGHS_Handler+0x6c8>)
#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   8771e:	f44f 4243 	mov.w	r2, #49920	; 0xc300
   87722:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87726:	eb02 1300 	add.w	r3, r2, r0, lsl #4
   8772a:	68da      	ldr	r2, [r3, #12]
   8772c:	f012 0f01 	tst.w	r2, #1
   87730:	f040 82dd 	bne.w	87cee <UOTGHS_Handler+0xb52>
					& UOTGHS_DEVDMASTATUS_CHANN_ENB) {
				return true; // Ignore EOT_STA interrupt
			}
			dbg_print("dma%x: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   87734:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   87738:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8773c:	6154      	str	r4, [r2, #20]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   8773e:	68db      	ldr	r3, [r3, #12]
					UOTGHS_DEVDMASTATUS_BUFF_COUNT_Msk)
					>> UOTGHS_DEVDMASTATUS_BUFF_COUNT_Pos;
			if (nb_remaining) {
   87740:	0c1b      	lsrs	r3, r3, #16
   87742:	d003      	beq.n	8774c <UOTGHS_Handler+0x5b0>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   87744:	68ca      	ldr	r2, [r1, #12]
   87746:	1ad3      	subs	r3, r2, r3
   87748:	60cb      	str	r3, [r1, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   8774a:	608b      	str	r3, [r1, #8]
			}
			udd_ep_trans_done(ep);
   8774c:	f646 511d 	movw	r1, #27933	; 0x6d1d
   87750:	f2c0 0108 	movt	r1, #8
   87754:	4788      	blx	r1
   87756:	bd70      	pop	{r4, r5, r6, pc}
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   87758:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   8775c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87760:	6901      	ldr	r1, [r0, #16]
   87762:	f411 3f00 	tst.w	r1, #131072	; 0x20000
   87766:	f000 80a9 	beq.w	878bc <UOTGHS_Handler+0x720>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8776a:	f24c 13d4 	movw	r3, #49620	; 0xc1d4
   8776e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87772:	681a      	ldr	r2, [r3, #0]
   87774:	f012 0f01 	tst.w	r2, #1
   87778:	d03b      	beq.n	877f2 <UOTGHS_Handler+0x656>
					&& Is_udd_in_send(ep)) {
   8777a:	f24c 1044 	movw	r0, #49476	; 0xc144
   8777e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87782:	6801      	ldr	r1, [r0, #0]
   87784:	f011 0f01 	tst.w	r1, #1
   87788:	d033      	beq.n	877f2 <UOTGHS_Handler+0x656>
   8778a:	f04f 0205 	mov.w	r2, #5
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8778e:	f04f 0314 	mov.w	r3, #20
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87792:	4831      	ldr	r0, [pc, #196]	; (87858 <UOTGHS_Handler+0x6bc>)
   87794:	e016      	b.n	877c4 <UOTGHS_Handler+0x628>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   87796:	f04f 0201 	mov.w	r2, #1
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8779a:	f04f 0304 	mov.w	r3, #4
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8779e:	4832      	ldr	r0, [pc, #200]	; (87868 <UOTGHS_Handler+0x6cc>)
   877a0:	e010      	b.n	877c4 <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   877a2:	f04f 0202 	mov.w	r2, #2
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   877a6:	f04f 0308 	mov.w	r3, #8
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   877aa:	482c      	ldr	r0, [pc, #176]	; (8785c <UOTGHS_Handler+0x6c0>)
   877ac:	e00a      	b.n	877c4 <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   877ae:	f04f 0203 	mov.w	r2, #3
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   877b2:	f04f 030c 	mov.w	r3, #12
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   877b6:	482a      	ldr	r0, [pc, #168]	; (87860 <UOTGHS_Handler+0x6c4>)
   877b8:	e004      	b.n	877c4 <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   877ba:	f04f 0204 	mov.w	r2, #4
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   877be:	f04f 0310 	mov.w	r3, #16
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   877c2:	4828      	ldr	r0, [pc, #160]	; (87864 <UOTGHS_Handler+0x6c8>)
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
   877c4:	f24c 2120 	movw	r1, #49696	; 0xc220
   877c8:	f2c4 010a 	movt	r1, #16394	; 0x400a
   877cc:	f04f 0501 	mov.w	r5, #1
   877d0:	505d      	str	r5, [r3, r1]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
   877d2:	f24c 1460 	movw	r4, #49504	; 0xc160
   877d6:	f2c4 040a 	movt	r4, #16394	; 0x400a
   877da:	511d      	str	r5, [r3, r4]
				udd_ack_fifocon(ep);
   877dc:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   877e0:	505c      	str	r4, [r3, r1]
				udd_ep_finish_job(ptr_job, false, ep);
   877e2:	f04f 0100 	mov.w	r1, #0
   877e6:	f646 43b9 	movw	r3, #27833	; 0x6cb9
   877ea:	f2c0 0308 	movt	r3, #8
   877ee:	4798      	blx	r3
   877f0:	bd70      	pop	{r4, r5, r6, pc}
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   877f2:	f24c 13d4 	movw	r3, #49620	; 0xc1d4
   877f6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   877fa:	681a      	ldr	r2, [r3, #0]
   877fc:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   87800:	d05c      	beq.n	878bc <UOTGHS_Handler+0x720>
					&& (0 == udd_nb_busy_bank(ep))) {
   87802:	f24c 1044 	movw	r0, #49476	; 0xc144
   87806:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8780a:	6801      	ldr	r1, [r0, #0]
   8780c:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   87810:	d154      	bne.n	878bc <UOTGHS_Handler+0x720>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87812:	f04f 0314 	mov.w	r3, #20
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   87816:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8781a:	4a0f      	ldr	r2, [pc, #60]	; (87858 <UOTGHS_Handler+0x6bc>)
   8781c:	e02b      	b.n	87876 <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8781e:	f04f 0304 	mov.w	r3, #4
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   87822:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87826:	4a10      	ldr	r2, [pc, #64]	; (87868 <UOTGHS_Handler+0x6cc>)
   87828:	e025      	b.n	87876 <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8782a:	f04f 0308 	mov.w	r3, #8
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8782e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87832:	4a0a      	ldr	r2, [pc, #40]	; (8785c <UOTGHS_Handler+0x6c0>)
   87834:	e01f      	b.n	87876 <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87836:	f04f 030c 	mov.w	r3, #12
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8783a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8783e:	4a08      	ldr	r2, [pc, #32]	; (87860 <UOTGHS_Handler+0x6c4>)
   87840:	e019      	b.n	87876 <UOTGHS_Handler+0x6da>
   87842:	bf00      	nop
   87844:	20071c14 	.word	0x20071c14
   87848:	000869d5 	.word	0x000869d5
   8784c:	2007158a 	.word	0x2007158a
   87850:	2007160a 	.word	0x2007160a
   87854:	20070290 	.word	0x20070290
   87858:	200715f0 	.word	0x200715f0
   8785c:	200715a8 	.word	0x200715a8
   87860:	200715c0 	.word	0x200715c0
   87864:	200715d8 	.word	0x200715d8
   87868:	20071590 	.word	0x20071590
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8786c:	f04f 0310 	mov.w	r3, #16
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   87870:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87874:	4abf      	ldr	r2, [pc, #764]	; (87b74 <UOTGHS_Handler+0x9d8>)
			}
			if (Is_udd_bank_interrupt_enabled(ep)
					&& (0 == udd_nb_busy_bank(ep))) {
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   87876:	f24c 2020 	movw	r0, #49696	; 0xc220
   8787a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8787e:	f44f 5480 	mov.w	r4, #4096	; 0x1000
   87882:	501c      	str	r4, [r3, r0]
				udd_disable_endpoint_interrupt(ep);
   87884:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87888:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8788c:	6141      	str	r1, [r0, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
   8788e:	7d11      	ldrb	r1, [r2, #20]
   87890:	f36f 0182 	bfc	r1, #2, #1
   87894:	7511      	strb	r1, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   87896:	f44f 4241 	mov.w	r2, #49408	; 0xc100
   8789a:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8789e:	5898      	ldr	r0, [r3, r2]
   878a0:	f420 7100 	bic.w	r1, r0, #512	; 0x200
   878a4:	5099      	str	r1, [r3, r2]
				udd_enable_stall_handshake(ep);
   878a6:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   878aa:	f2c4 020a 	movt	r2, #16394	; 0x400a
   878ae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   878b2:	5098      	str	r0, [r3, r2]
				udd_reset_data_toggle(ep);
   878b4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   878b8:	5099      	str	r1, [r3, r2]
   878ba:	bd70      	pop	{r4, r5, r6, pc}
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   878bc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   878c0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   878c4:	685a      	ldr	r2, [r3, #4]
   878c6:	f012 0f08 	tst.w	r2, #8
   878ca:	d07a      	beq.n	879c2 <UOTGHS_Handler+0x826>
		udd_ack_reset();
   878cc:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   878d0:	f2c4 040a 	movt	r4, #16394	; 0x400a
   878d4:	f04f 0508 	mov.w	r5, #8
   878d8:	60a5      	str	r5, [r4, #8]
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   878da:	f241 5690 	movw	r6, #5520	; 0x1590
   878de:	f2c2 0607 	movt	r6, #8199	; 0x2007
   878e2:	4630      	mov	r0, r6
   878e4:	f04f 0101 	mov.w	r1, #1
   878e8:	460a      	mov	r2, r1
   878ea:	f646 45b9 	movw	r5, #27833	; 0x6cb9
   878ee:	f2c0 0508 	movt	r5, #8
   878f2:	47a8      	blx	r5
   878f4:	f106 0018 	add.w	r0, r6, #24
   878f8:	f04f 0101 	mov.w	r1, #1
   878fc:	f04f 0202 	mov.w	r2, #2
   87900:	47a8      	blx	r5
   87902:	f106 0030 	add.w	r0, r6, #48	; 0x30
   87906:	f04f 0101 	mov.w	r1, #1
   8790a:	f04f 0203 	mov.w	r2, #3
   8790e:	47a8      	blx	r5
   87910:	f106 0048 	add.w	r0, r6, #72	; 0x48
   87914:	f04f 0101 	mov.w	r1, #1
   87918:	f04f 0204 	mov.w	r2, #4
   8791c:	47a8      	blx	r5
   8791e:	f106 0060 	add.w	r0, r6, #96	; 0x60
   87922:	f04f 0101 	mov.w	r1, #1
   87926:	f04f 0205 	mov.w	r2, #5
   8792a:	47a8      	blx	r5
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
   8792c:	f645 3321 	movw	r3, #23329	; 0x5b21
   87930:	f2c0 0308 	movt	r3, #8
   87934:	4798      	blx	r3
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   87936:	6822      	ldr	r2, [r4, #0]
   87938:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   8793c:	6021      	str	r1, [r4, #0]
	udd_enable_address();
   8793e:	6820      	ldr	r0, [r4, #0]
   87940:	f040 0380 	orr.w	r3, r0, #128	; 0x80
   87944:	6023      	str	r3, [r4, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   87946:	f44f 4141 	mov.w	r1, #49408	; 0xc100
   8794a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8794e:	680a      	ldr	r2, [r1, #0]
   87950:	f422 50cb 	bic.w	r0, r2, #6496	; 0x1960
   87954:	f020 031c 	bic.w	r3, r0, #28
   87958:	f043 0230 	orr.w	r2, r3, #48	; 0x30
   8795c:	600a      	str	r2, [r1, #0]
		USB_EP_TYPE_CONTROL,
		0,
		USB_DEVICE_EP_CTRL_SIZE,
		UOTGHS_DEVEPTCFG_EPBK_1_BANK);

	udd_allocate_memory(0);
   8795e:	6808      	ldr	r0, [r1, #0]
   87960:	f040 0302 	orr.w	r3, r0, #2
   87964:	600b      	str	r3, [r1, #0]
	udd_enable_endpoint(0);
   87966:	69e1      	ldr	r1, [r4, #28]
   87968:	f041 0201 	orr.w	r2, r1, #1
   8796c:	61e2      	str	r2, [r4, #28]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8796e:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87972:	b672      	cpsid	i
   87974:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87978:	f240 2390 	movw	r3, #656	; 0x290
   8797c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87980:	f04f 0100 	mov.w	r1, #0
   87984:	7019      	strb	r1, [r3, #0]
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
   87986:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   8798a:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8798e:	f04f 0304 	mov.w	r3, #4
   87992:	6013      	str	r3, [r2, #0]
	udd_enable_out_received_interrupt(0);
   87994:	f04f 0102 	mov.w	r1, #2
   87998:	6011      	str	r1, [r2, #0]
	udd_enable_endpoint_interrupt(0);
   8799a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8799e:	61a2      	str	r2, [r4, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   879a0:	b948      	cbnz	r0, 879b6 <UOTGHS_Handler+0x81a>
		cpu_irq_enable();
   879a2:	f240 2090 	movw	r0, #656	; 0x290
   879a6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   879aa:	f04f 0301 	mov.w	r3, #1
   879ae:	7003      	strb	r3, [r0, #0]
   879b0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   879b4:	b662      	cpsie	i
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
   879b6:	f646 1171 	movw	r1, #26993	; 0x6971
   879ba:	f2c0 0108 	movt	r1, #8
   879be:	4788      	blx	r1
		goto udd_interrupt_end;
   879c0:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   879c2:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   879c6:	f2c4 000a 	movt	r0, #16394	; 0x400a
   879ca:	6901      	ldr	r1, [r0, #16]
   879cc:	f011 0f01 	tst.w	r1, #1
   879d0:	d02a      	beq.n	87a28 <UOTGHS_Handler+0x88c>
   879d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   879d6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   879da:	685a      	ldr	r2, [r3, #4]
   879dc:	f012 0f01 	tst.w	r2, #1
   879e0:	d022      	beq.n	87a28 <UOTGHS_Handler+0x88c>
		otg_unfreeze_clock();
   879e2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   879e6:	f2c4 010a 	movt	r1, #16394	; 0x400a
   879ea:	f8d1 0800 	ldr.w	r0, [r1, #2048]	; 0x800
   879ee:	f420 4380 	bic.w	r3, r0, #16384	; 0x4000
   879f2:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   879f6:	f04f 0201 	mov.w	r2, #1
   879fa:	614a      	str	r2, [r1, #20]
		udd_enable_wake_up_interrupt();
   879fc:	f04f 0010 	mov.w	r0, #16
   87a00:	6188      	str	r0, [r1, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   87a02:	f8d1 3800 	ldr.w	r3, [r1, #2048]	; 0x800
   87a06:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
   87a0a:	f8c1 2800 	str.w	r2, [r1, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
   87a0e:	f04f 0000 	mov.w	r0, #0
   87a12:	f646 01c5 	movw	r1, #26821	; 0x68c5
   87a16:	f2c0 0108 	movt	r1, #8
   87a1a:	4788      	blx	r1
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   87a1c:	f643 40bd 	movw	r0, #15549	; 0x3cbd
   87a20:	f2c0 0008 	movt	r0, #8
   87a24:	4780      	blx	r0
#endif
		goto udd_interrupt_end;
   87a26:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   87a28:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87a2c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87a30:	6901      	ldr	r1, [r0, #16]
   87a32:	f011 0f10 	tst.w	r1, #16
   87a36:	d034      	beq.n	87aa2 <UOTGHS_Handler+0x906>
   87a38:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87a3c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87a40:	685a      	ldr	r2, [r3, #4]
   87a42:	f012 0f10 	tst.w	r2, #16
   87a46:	d02c      	beq.n	87aa2 <UOTGHS_Handler+0x906>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
   87a48:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   87a4c:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87a50:	f8d1 2800 	ldr.w	r2, [r1, #2048]	; 0x800
   87a54:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   87a58:	f8c1 0800 	str.w	r0, [r1, #2048]	; 0x800
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   87a5c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87a60:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87a64:	e003      	b.n	87a6e <UOTGHS_Handler+0x8d2>
			if (Is_udd_suspend()) {
   87a66:	685a      	ldr	r2, [r3, #4]
   87a68:	f012 0f01 	tst.w	r2, #1
   87a6c:	d104      	bne.n	87a78 <UOTGHS_Handler+0x8dc>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   87a6e:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
   87a72:	f411 4f80 	tst.w	r1, #16384	; 0x4000
   87a76:	d0f6      	beq.n	87a66 <UOTGHS_Handler+0x8ca>
			if (Is_udd_suspend()) {
				break; // In case of USB state change in HS
			}
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
   87a78:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   87a7c:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87a80:	f04f 0010 	mov.w	r0, #16
   87a84:	6148      	str	r0, [r1, #20]
		udd_enable_suspend_interrupt();
   87a86:	f04f 0001 	mov.w	r0, #1
   87a8a:	6188      	str	r0, [r1, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
   87a8c:	f646 03c5 	movw	r3, #26821	; 0x68c5
   87a90:	f2c0 0308 	movt	r3, #8
   87a94:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   87a96:	f643 42c1 	movw	r2, #15553	; 0x3cc1
   87a9a:	f2c0 0208 	movt	r2, #8
   87a9e:	4790      	blx	r2
#endif
		goto udd_interrupt_end;
   87aa0:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_otg_vbus_transition()) {
   87aa2:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87aa6:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87aaa:	f8d0 1804 	ldr.w	r1, [r0, #2052]	; 0x804
   87aae:	f011 0f02 	tst.w	r1, #2
   87ab2:	f000 811c 	beq.w	87cee <UOTGHS_Handler+0xb52>
		dbg_print("VBus ");
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
   87ab6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87aba:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87abe:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   87ac2:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   87ac6:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
		otg_ack_vbus_transition();
   87aca:	f04f 0102 	mov.w	r1, #2
   87ace:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
		otg_freeze_clock();
   87ad2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   87ad6:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   87ada:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
   87ade:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   87ae2:	f413 6f00 	tst.w	r3, #2048	; 0x800
			udd_attach();
   87ae6:	bf19      	ittee	ne
   87ae8:	f247 03b9 	movwne	r3, #28857	; 0x70b9
   87aec:	f2c0 0308 	movtne	r3, #8
		} else {
			udd_detach();
   87af0:	f247 1361 	movweq	r3, #29025	; 0x7161
   87af4:	f2c0 0308 	movteq	r3, #8
   87af8:	4798      	blx	r3
   87afa:	bd70      	pop	{r4, r5, r6, pc}
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   87afc:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87b00:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87b04:	6901      	ldr	r1, [r0, #16]
   87b06:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
   87b0a:	d008      	beq.n	87b1e <UOTGHS_Handler+0x982>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   87b0c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87b10:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87b14:	685a      	ldr	r2, [r3, #4]
   87b16:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
   87b1a:	f47f ade6 	bne.w	876ea <UOTGHS_Handler+0x54e>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   87b1e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87b22:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87b26:	6901      	ldr	r1, [r0, #16]
   87b28:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   87b2c:	d024      	beq.n	87b78 <UOTGHS_Handler+0x9dc>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87b2e:	f24c 13c4 	movw	r3, #49604	; 0xc1c4
   87b32:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87b36:	681a      	ldr	r2, [r3, #0]
   87b38:	f012 0f01 	tst.w	r2, #1
   87b3c:	d110      	bne.n	87b60 <UOTGHS_Handler+0x9c4>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   87b3e:	f24c 13c4 	movw	r3, #49604	; 0xc1c4
   87b42:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87b46:	681a      	ldr	r2, [r3, #0]
   87b48:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   87b4c:	d014      	beq.n	87b78 <UOTGHS_Handler+0x9dc>
					&& (0 == udd_nb_busy_bank(ep))) {
   87b4e:	f24c 1034 	movw	r0, #49460	; 0xc134
   87b52:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87b56:	6801      	ldr	r1, [r0, #0]
   87b58:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   87b5c:	d10c      	bne.n	87b78 <UOTGHS_Handler+0x9dc>
   87b5e:	e65e      	b.n	8781e <UOTGHS_Handler+0x682>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   87b60:	f24c 1034 	movw	r0, #49460	; 0xc134
   87b64:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87b68:	6801      	ldr	r1, [r0, #0]
   87b6a:	f011 0f01 	tst.w	r1, #1
   87b6e:	d0e6      	beq.n	87b3e <UOTGHS_Handler+0x9a2>
   87b70:	e611      	b.n	87796 <UOTGHS_Handler+0x5fa>
   87b72:	bf00      	nop
   87b74:	200715d8 	.word	0x200715d8
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   87b78:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87b7c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87b80:	691a      	ldr	r2, [r3, #16]
   87b82:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
   87b86:	d008      	beq.n	87b9a <UOTGHS_Handler+0x9fe>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   87b88:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87b8c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87b90:	6841      	ldr	r1, [r0, #4]
   87b92:	f011 6f80 	tst.w	r1, #67108864	; 0x4000000
   87b96:	f47f adb1 	bne.w	876fc <UOTGHS_Handler+0x560>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   87b9a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87b9e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87ba2:	691a      	ldr	r2, [r3, #16]
   87ba4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
   87ba8:	d021      	beq.n	87bee <UOTGHS_Handler+0xa52>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87baa:	f24c 10c8 	movw	r0, #49608	; 0xc1c8
   87bae:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87bb2:	6801      	ldr	r1, [r0, #0]
   87bb4:	f011 0f01 	tst.w	r1, #1
   87bb8:	d110      	bne.n	87bdc <UOTGHS_Handler+0xa40>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   87bba:	f24c 10c8 	movw	r0, #49608	; 0xc1c8
   87bbe:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87bc2:	6801      	ldr	r1, [r0, #0]
   87bc4:	f411 5f80 	tst.w	r1, #4096	; 0x1000
   87bc8:	d011      	beq.n	87bee <UOTGHS_Handler+0xa52>
					&& (0 == udd_nb_busy_bank(ep))) {
   87bca:	f24c 1338 	movw	r3, #49464	; 0xc138
   87bce:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87bd2:	681a      	ldr	r2, [r3, #0]
   87bd4:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   87bd8:	d109      	bne.n	87bee <UOTGHS_Handler+0xa52>
   87bda:	e626      	b.n	8782a <UOTGHS_Handler+0x68e>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   87bdc:	f24c 1338 	movw	r3, #49464	; 0xc138
   87be0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87be4:	681a      	ldr	r2, [r3, #0]
   87be6:	f012 0f01 	tst.w	r2, #1
   87bea:	d0e6      	beq.n	87bba <UOTGHS_Handler+0xa1e>
   87bec:	e5d9      	b.n	877a2 <UOTGHS_Handler+0x606>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   87bee:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87bf2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87bf6:	6901      	ldr	r1, [r0, #16]
   87bf8:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
   87bfc:	d008      	beq.n	87c10 <UOTGHS_Handler+0xa74>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   87bfe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87c02:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87c06:	685a      	ldr	r2, [r3, #4]
   87c08:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
   87c0c:	f47f ad7c 	bne.w	87708 <UOTGHS_Handler+0x56c>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   87c10:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87c14:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87c18:	6901      	ldr	r1, [r0, #16]
   87c1a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
   87c1e:	d021      	beq.n	87c64 <UOTGHS_Handler+0xac8>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87c20:	f24c 13cc 	movw	r3, #49612	; 0xc1cc
   87c24:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87c28:	681a      	ldr	r2, [r3, #0]
   87c2a:	f012 0f01 	tst.w	r2, #1
   87c2e:	d110      	bne.n	87c52 <UOTGHS_Handler+0xab6>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   87c30:	f24c 13cc 	movw	r3, #49612	; 0xc1cc
   87c34:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87c38:	681a      	ldr	r2, [r3, #0]
   87c3a:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   87c3e:	d011      	beq.n	87c64 <UOTGHS_Handler+0xac8>
					&& (0 == udd_nb_busy_bank(ep))) {
   87c40:	f24c 103c 	movw	r0, #49468	; 0xc13c
   87c44:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87c48:	6801      	ldr	r1, [r0, #0]
   87c4a:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   87c4e:	d109      	bne.n	87c64 <UOTGHS_Handler+0xac8>
   87c50:	e5f1      	b.n	87836 <UOTGHS_Handler+0x69a>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   87c52:	f24c 103c 	movw	r0, #49468	; 0xc13c
   87c56:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87c5a:	6801      	ldr	r1, [r0, #0]
   87c5c:	f011 0f01 	tst.w	r1, #1
   87c60:	d0e6      	beq.n	87c30 <UOTGHS_Handler+0xa94>
   87c62:	e5a4      	b.n	877ae <UOTGHS_Handler+0x612>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   87c64:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87c68:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87c6c:	691a      	ldr	r2, [r3, #16]
   87c6e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
   87c72:	d008      	beq.n	87c86 <UOTGHS_Handler+0xaea>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   87c74:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87c78:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87c7c:	6841      	ldr	r1, [r0, #4]
   87c7e:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
   87c82:	f47f ad47 	bne.w	87714 <UOTGHS_Handler+0x578>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   87c86:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87c8a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87c8e:	691a      	ldr	r2, [r3, #16]
   87c90:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   87c94:	d021      	beq.n	87cda <UOTGHS_Handler+0xb3e>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87c96:	f24c 10d0 	movw	r0, #49616	; 0xc1d0
   87c9a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87c9e:	6801      	ldr	r1, [r0, #0]
   87ca0:	f011 0f01 	tst.w	r1, #1
   87ca4:	d110      	bne.n	87cc8 <UOTGHS_Handler+0xb2c>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   87ca6:	f24c 10d0 	movw	r0, #49616	; 0xc1d0
   87caa:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87cae:	6801      	ldr	r1, [r0, #0]
   87cb0:	f411 5f80 	tst.w	r1, #4096	; 0x1000
   87cb4:	d011      	beq.n	87cda <UOTGHS_Handler+0xb3e>
					&& (0 == udd_nb_busy_bank(ep))) {
   87cb6:	f24c 1340 	movw	r3, #49472	; 0xc140
   87cba:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87cbe:	681a      	ldr	r2, [r3, #0]
   87cc0:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   87cc4:	d109      	bne.n	87cda <UOTGHS_Handler+0xb3e>
   87cc6:	e5d1      	b.n	8786c <UOTGHS_Handler+0x6d0>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   87cc8:	f24c 1340 	movw	r3, #49472	; 0xc140
   87ccc:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87cd0:	681a      	ldr	r2, [r3, #0]
   87cd2:	f012 0f01 	tst.w	r2, #1
   87cd6:	d0e6      	beq.n	87ca6 <UOTGHS_Handler+0xb0a>
   87cd8:	e56f      	b.n	877ba <UOTGHS_Handler+0x61e>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   87cda:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87cde:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87ce2:	6901      	ldr	r1, [r0, #16]
   87ce4:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
   87ce8:	f47f acf1 	bne.w	876ce <UOTGHS_Handler+0x532>
   87cec:	e534      	b.n	87758 <UOTGHS_Handler+0x5bc>
   87cee:	bd70      	pop	{r4, r5, r6, pc}
   87cf0:	b249      	sxtb	r1, r1
   87cf2:	2900      	cmp	r1, #0
   87cf4:	f43f ac01 	beq.w	874fa <UOTGHS_Handler+0x35e>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
   87cf8:	f813 0b01 	ldrb.w	r0, [r3], #1
   87cfc:	f802 0b01 	strb.w	r0, [r2], #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   87d00:	b2d9      	uxtb	r1, r3
   87d02:	42a1      	cmp	r1, r4
   87d04:	f4ff abf9 	bcc.w	874fa <UOTGHS_Handler+0x35e>
   87d08:	e406      	b.n	87518 <UOTGHS_Handler+0x37c>
   87d0a:	bf00      	nop

00087d0c <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   87d0c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87d10:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87d14:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
#else
	return false;
#endif
}
   87d18:	f410 5040 	ands.w	r0, r0, #12288	; 0x3000
   87d1c:	bf18      	it	ne
   87d1e:	2001      	movne	r0, #1
   87d20:	4770      	bx	lr
   87d22:	bf00      	nop

00087d24 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
   87d24:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87d28:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87d2c:	681a      	ldr	r2, [r3, #0]
   87d2e:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   87d32:	6019      	str	r1, [r3, #0]
	udd_configure_address(address);
   87d34:	681a      	ldr	r2, [r3, #0]
   87d36:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   87d3a:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   87d3e:	ea40 0201 	orr.w	r2, r0, r1
   87d42:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   87d44:	6818      	ldr	r0, [r3, #0]
   87d46:	f040 0180 	orr.w	r1, r0, #128	; 0x80
   87d4a:	6019      	str	r1, [r3, #0]
   87d4c:	4770      	bx	lr
   87d4e:	bf00      	nop

00087d50 <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
   87d50:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87d54:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87d58:	6818      	ldr	r0, [r3, #0]
}
   87d5a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   87d5e:	4770      	bx	lr

00087d60 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
   87d60:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87d64:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87d68:	6a18      	ldr	r0, [r3, #32]
}
   87d6a:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   87d6e:	4770      	bx	lr

00087d70 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
   87d70:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87d74:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87d78:	6a18      	ldr	r0, [r3, #32]
}
   87d7a:	ea4f 4180 	mov.w	r1, r0, lsl #18
   87d7e:	ea4f 4091 	mov.w	r0, r1, lsr #18
   87d82:	4770      	bx	lr

00087d84 <udd_set_setup_payload>:
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
	udd_g_ctrlreq.payload = payload;
   87d84:	f641 4314 	movw	r3, #7188	; 0x1c14
   87d88:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87d8c:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   87d8e:	8199      	strh	r1, [r3, #12]
   87d90:	4770      	bx	lr
   87d92:	bf00      	nop

00087d94 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
   87d94:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   87d96:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   87d9a:	2c05      	cmp	r4, #5
   87d9c:	d82a      	bhi.n	87df4 <udd_ep_free+0x60>
		return;
	}
	udd_disable_endpoint(ep_index);
   87d9e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87da2:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87da6:	69d9      	ldr	r1, [r3, #28]
   87da8:	f04f 0201 	mov.w	r2, #1
   87dac:	fa02 f204 	lsl.w	r2, r2, r4
   87db0:	ea21 0102 	bic.w	r1, r1, r2
   87db4:	61d9      	str	r1, [r3, #28]
	udd_unallocate_memory(ep_index);
   87db6:	f44f 4341 	mov.w	r3, #49408	; 0xc100
   87dba:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87dbe:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   87dc2:	f022 0102 	bic.w	r1, r2, #2
   87dc6:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	udd_ep_abort_job(ep);
   87dca:	f646 43f1 	movw	r3, #27889	; 0x6cf1
   87dce:	f2c0 0308 	movt	r3, #8
   87dd2:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   87dd4:	f104 34ff 	add.w	r4, r4, #4294967295
   87dd8:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   87ddc:	f241 5290 	movw	r2, #5520	; 0x1590
   87de0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87de4:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
   87de8:	7d21      	ldrb	r1, [r4, #20]
   87dea:	f36f 0182 	bfc	r1, #2, #1
   87dee:	7521      	strb	r1, [r4, #20]
   87df0:	f104 0410 	add.w	r4, r4, #16
   87df4:	bd10      	pop	{r4, pc}
   87df6:	bf00      	nop

00087df8 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	return Is_udd_endpoint_stall_requested(ep_index);
   87df8:	f000 000f 	and.w	r0, r0, #15
   87dfc:	f24c 13c0 	movw	r3, #49600	; 0xc1c0
   87e00:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87e04:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
}
   87e08:	f3c1 40c0 	ubfx	r0, r1, #19, #1
   87e0c:	4770      	bx	lr
   87e0e:	bf00      	nop

00087e10 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   87e10:	b430      	push	{r4, r5}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   87e12:	f000 030f 	and.w	r3, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
   87e16:	2b05      	cmp	r3, #5
   87e18:	d87a      	bhi.n	87f10 <udd_ep_set_halt+0x100>
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   87e1a:	f24c 12c0 	movw	r2, #49600	; 0xc1c0
   87e1e:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87e22:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   87e26:	f411 2f00 	tst.w	r1, #524288	; 0x80000
   87e2a:	d174      	bne.n	87f16 <udd_ep_set_halt+0x106>


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   87e2c:	f103 34ff 	add.w	r4, r3, #4294967295
   87e30:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   87e34:	f241 5190 	movw	r1, #5520	; 0x1590
   87e38:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87e3c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   87e40:	7d11      	ldrb	r1, [r2, #20]
   87e42:	f001 0404 	and.w	r4, r1, #4
   87e46:	b2e4      	uxtb	r4, r4
   87e48:	2c00      	cmp	r4, #0
   87e4a:	d167      	bne.n	87f1c <udd_ep_set_halt+0x10c>
		return true; // Already STALL
	}

	if (ptr_job->busy == true) {
   87e4c:	f011 0f01 	tst.w	r1, #1
   87e50:	d167      	bne.n	87f22 <udd_ep_set_halt+0x112>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87e52:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   87e56:	f1d5 0501 	rsbs	r5, r5, #1
   87e5a:	bf38      	it	cc
   87e5c:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87e5e:	b672      	cpsid	i
   87e60:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   87e64:	f240 2190 	movw	r1, #656	; 0x290
   87e68:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87e6c:	700c      	strb	r4, [r1, #0]
		return false; // Job on going, stall impossible
	}

	flags = cpu_irq_save();
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   87e6e:	f010 0f80 	tst.w	r0, #128	; 0x80
   87e72:	d027      	beq.n	87ec4 <udd_ep_set_halt+0xb4>
   87e74:	f24c 1030 	movw	r0, #49456	; 0xc130
   87e78:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87e7c:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   87e80:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   87e84:	d01e      	beq.n	87ec4 <udd_ep_set_halt+0xb4>
		// Delay the stall after the end of IN transfer on USB line
		ptr_job->stall_requested = true;
   87e86:	7d10      	ldrb	r0, [r2, #20]
   87e88:	f040 0104 	orr.w	r1, r0, #4
   87e8c:	7511      	strb	r1, [r2, #20]
#ifdef UDD_EP_FIFO_SUPPORTED
		udd_disable_in_send_interrupt(ep_index);
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
   87e8e:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   87e92:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87e96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   87e9a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
   87e9e:	fa02 f303 	lsl.w	r3, r2, r3
   87ea2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   87ea6:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87eaa:	618b      	str	r3, [r1, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87eac:	b3e5      	cbz	r5, 87f28 <udd_ep_set_halt+0x118>
		cpu_irq_enable();
   87eae:	f04f 0001 	mov.w	r0, #1
   87eb2:	f240 2290 	movw	r2, #656	; 0x290
   87eb6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87eba:	7010      	strb	r0, [r2, #0]
   87ebc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87ec0:	b662      	cpsie	i
   87ec2:	e036      	b.n	87f32 <udd_ep_set_halt+0x122>
		cpu_irq_restore(flags);
		return true;
	}
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   87ec4:	f44f 4241 	mov.w	r2, #49408	; 0xc100
   87ec8:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87ecc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   87ed0:	f420 7100 	bic.w	r1, r0, #512	; 0x200
   87ed4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_ack_stall(ep_index);
   87ed8:	f24c 1260 	movw	r2, #49504	; 0xc160
   87edc:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87ee0:	f04f 0040 	mov.w	r0, #64	; 0x40
   87ee4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   87ee8:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   87eec:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87ef0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   87ef4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87ef8:	b1cd      	cbz	r5, 87f2e <udd_ep_set_halt+0x11e>
		cpu_irq_enable();
   87efa:	f04f 0001 	mov.w	r0, #1
   87efe:	f240 2390 	movw	r3, #656	; 0x290
   87f02:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87f06:	7018      	strb	r0, [r3, #0]
   87f08:	f3bf 8f5f 	dmb	sy
   87f0c:	b662      	cpsie	i
   87f0e:	e010      	b.n	87f32 <udd_ep_set_halt+0x122>
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
   87f10:	f04f 0000 	mov.w	r0, #0
   87f14:	e00d      	b.n	87f32 <udd_ep_set_halt+0x122>
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
   87f16:	f04f 0001 	mov.w	r0, #1
   87f1a:	e00a      	b.n	87f32 <udd_ep_set_halt+0x122>
   87f1c:	f04f 0001 	mov.w	r0, #1
   87f20:	e007      	b.n	87f32 <udd_ep_set_halt+0x122>
	}

	if (ptr_job->busy == true) {
		return false; // Job on going, stall impossible
   87f22:	f04f 0000 	mov.w	r0, #0
   87f26:	e004      	b.n	87f32 <udd_ep_set_halt+0x122>
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
   87f28:	f04f 0001 	mov.w	r0, #1
   87f2c:	e001      	b.n	87f32 <udd_ep_set_halt+0x122>
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
	udd_ack_stall(ep_index);
	udd_enable_stall_handshake(ep_index);
	cpu_irq_restore(flags);
	return true;
   87f2e:	f04f 0001 	mov.w	r0, #1
}
   87f32:	bc30      	pop	{r4, r5}
   87f34:	4770      	bx	lr
   87f36:	bf00      	nop

00087f38 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   87f38:	b508      	push	{r3, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   87f3a:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
   87f3e:	2805      	cmp	r0, #5
   87f40:	d85f      	bhi.n	88002 <udd_ep_clear_halt+0xca>


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   87f42:	f100 33ff 	add.w	r3, r0, #4294967295
   87f46:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   87f4a:	f241 5290 	movw	r2, #5520	; 0x1590
   87f4e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87f52:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;

	if (ptr_job->stall_requested) {
   87f56:	7d19      	ldrb	r1, [r3, #20]
   87f58:	f001 0204 	and.w	r2, r1, #4
   87f5c:	b2d1      	uxtb	r1, r2
   87f5e:	2900      	cmp	r1, #0
   87f60:	d055      	beq.n	8800e <udd_ep_clear_halt+0xd6>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
   87f62:	7d1a      	ldrb	r2, [r3, #20]
   87f64:	f36f 0282 	bfc	r2, #2, #1
   87f68:	751a      	strb	r2, [r3, #20]
		udd_disable_bank_interrupt(ep_index);
   87f6a:	f24c 2120 	movw	r1, #49696	; 0xc220
   87f6e:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87f72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   87f76:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
   87f7a:	fa02 f100 	lsl.w	r1, r2, r0
   87f7e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   87f82:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87f86:	6151      	str	r1, [r2, #20]
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   87f88:	ea4f 0280 	mov.w	r2, r0, lsl #2
   87f8c:	f24c 11c0 	movw	r1, #49600	; 0xc1c0
   87f90:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87f94:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   87f98:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   87f9c:	d024      	beq.n	87fe8 <udd_ep_clear_halt+0xb0>
		if (Is_udd_stall(ep_index)) {
   87f9e:	f24c 1130 	movw	r1, #49456	; 0xc130
   87fa2:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87fa6:	5850      	ldr	r0, [r2, r1]
   87fa8:	f010 0f40 	tst.w	r0, #64	; 0x40
   87fac:	d00d      	beq.n	87fca <udd_ep_clear_halt+0x92>
			udd_ack_stall(ep_index);
   87fae:	f24c 1160 	movw	r1, #49504	; 0xc160
   87fb2:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87fb6:	f04f 0040 	mov.w	r0, #64	; 0x40
   87fba:	5050      	str	r0, [r2, r1]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep_index);
   87fbc:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   87fc0:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87fc4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   87fc8:	5050      	str	r0, [r2, r1]
		}
		// Disable stall
		udd_disable_stall_handshake(ep_index);
   87fca:	f24c 2120 	movw	r1, #49696	; 0xc220
   87fce:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87fd2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   87fd6:	5050      	str	r0, [r2, r1]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   87fd8:	f44f 4141 	mov.w	r1, #49408	; 0xc100
   87fdc:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87fe0:	5850      	ldr	r0, [r2, r1]
   87fe2:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   87fe6:	5050      	str	r0, [r2, r1]
		b_stall_cleared = true;
	}
	if (b_stall_cleared) {
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   87fe8:	7d1a      	ldrb	r2, [r3, #20]
   87fea:	f012 0f01 	tst.w	r2, #1
   87fee:	d00b      	beq.n	88008 <udd_ep_clear_halt+0xd0>
			ptr_job->busy = false;
   87ff0:	7d19      	ldrb	r1, [r3, #20]
   87ff2:	f36f 0100 	bfc	r1, #0, #1
   87ff6:	7519      	strb	r1, [r3, #20]
			ptr_job->call_nohalt();
   87ff8:	681b      	ldr	r3, [r3, #0]
   87ffa:	4798      	blx	r3
		}
	}
	return true;
   87ffc:	f04f 0001 	mov.w	r0, #1
   88000:	bd08      	pop	{r3, pc}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;
   88002:	f04f 0000 	mov.w	r0, #0
   88006:	bd08      	pop	{r3, pc}
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   88008:	f04f 0001 	mov.w	r0, #1
   8800c:	bd08      	pop	{r3, pc}
		ptr_job->stall_requested = false;
		udd_disable_bank_interrupt(ep_index);
		udd_disable_endpoint_interrupt(ep_index);
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   8800e:	ea4f 0280 	mov.w	r2, r0, lsl #2
   88012:	f24c 11c0 	movw	r1, #49600	; 0xc1c0
   88016:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8801a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   8801e:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   88022:	d1bc      	bne.n	87f9e <udd_ep_clear_halt+0x66>
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   88024:	f04f 0001 	mov.w	r0, #1
}
   88028:	bd08      	pop	{r3, pc}
   8802a:	bf00      	nop

0008802c <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   8802c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
#endif
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   8802e:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   88032:	2805      	cmp	r0, #5
   88034:	d86c      	bhi.n	88110 <udd_ep_run+0xe4>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
   88036:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   8803a:	f2c4 040a 	movt	r4, #16394	; 0x400a
   8803e:	69e4      	ldr	r4, [r4, #28]
   88040:	f04f 0501 	mov.w	r5, #1
   88044:	fa05 f500 	lsl.w	r5, r5, r0
   88048:	4225      	tst	r5, r4
   8804a:	d064      	beq.n	88116 <udd_ep_run+0xea>
			|| Is_udd_endpoint_stall_requested(ep)
   8804c:	f24c 14c0 	movw	r4, #49600	; 0xc1c0
   88050:	f2c4 040a 	movt	r4, #16394	; 0x400a
   88054:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   88058:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   8805c:	d15e      	bne.n	8811c <udd_ep_run+0xf0>
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   8805e:	f100 35ff 	add.w	r5, r0, #4294967295
   88062:	eb05 0645 	add.w	r6, r5, r5, lsl #1
   88066:	f241 5490 	movw	r4, #5520	; 0x1590
   8806a:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8806e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
   88072:	7d25      	ldrb	r5, [r4, #20]
   88074:	f005 0604 	and.w	r6, r5, #4
   88078:	b2f6      	uxtb	r6, r6
   8807a:	2e00      	cmp	r6, #0
   8807c:	d151      	bne.n	88122 <udd_ep_run+0xf6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8807e:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   88082:	f1d7 0601 	rsbs	r6, r7, #1
   88086:	bf38      	it	cc
   88088:	2600      	movcc	r6, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8808a:	b672      	cpsid	i
   8808c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   88090:	f240 2790 	movw	r7, #656	; 0x290
   88094:	f2c2 0707 	movt	r7, #8199	; 0x2007
   88098:	f04f 0c00 	mov.w	ip, #0
   8809c:	f887 c000 	strb.w	ip, [r7]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
   880a0:	f015 0f01 	tst.w	r5, #1
   880a4:	d009      	beq.n	880ba <udd_ep_run+0x8e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   880a6:	2e00      	cmp	r6, #0
   880a8:	d03e      	beq.n	88128 <udd_ep_run+0xfc>
		cpu_irq_enable();
   880aa:	f04f 0301 	mov.w	r3, #1
   880ae:	703b      	strb	r3, [r7, #0]
   880b0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   880b4:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
   880b6:	4660      	mov	r0, ip
   880b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	ptr_job->busy = true;
   880ba:	7d25      	ldrb	r5, [r4, #20]
   880bc:	f045 0501 	orr.w	r5, r5, #1
   880c0:	7525      	strb	r5, [r4, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   880c2:	b14e      	cbz	r6, 880d8 <udd_ep_run+0xac>
		cpu_irq_enable();
   880c4:	f240 2590 	movw	r5, #656	; 0x290
   880c8:	f2c2 0507 	movt	r5, #8199	; 0x2007
   880cc:	f04f 0601 	mov.w	r6, #1
   880d0:	702e      	strb	r6, [r5, #0]
   880d2:	f3bf 8f5f 	dmb	sy
   880d6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   880d8:	6062      	str	r2, [r4, #4]
	ptr_job->buf_size = buf_size;
   880da:	60a3      	str	r3, [r4, #8]
	ptr_job->buf_cnt = 0;
   880dc:	f04f 0200 	mov.w	r2, #0
   880e0:	60e2      	str	r2, [r4, #12]
	ptr_job->buf_load = 0;
   880e2:	6122      	str	r2, [r4, #16]
	ptr_job->call_trans = callback;
   880e4:	9a06      	ldr	r2, [sp, #24]
   880e6:	6022      	str	r2, [r4, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   880e8:	b921      	cbnz	r1, 880f4 <udd_ep_run+0xc8>
   880ea:	f1d3 0301 	rsbs	r3, r3, #1
   880ee:	bf38      	it	cc
   880f0:	2300      	movcc	r3, #0
   880f2:	e001      	b.n	880f8 <udd_ep_run+0xcc>
   880f4:	f04f 0301 	mov.w	r3, #1
   880f8:	7d21      	ldrb	r1, [r4, #20]
   880fa:	f363 0141 	bfi	r1, r3, #1, #1
   880fe:	7521      	strb	r1, [r4, #20]
#endif // UDD_EP_FIFO_SUPPORTED

#ifdef UDD_EP_DMA_SUPPORTED
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
   88100:	f646 521d 	movw	r2, #27933	; 0x6d1d
   88104:	f2c0 0208 	movt	r2, #8
   88108:	4790      	blx	r2
	return true;
   8810a:	f04f 0001 	mov.w	r0, #1
   8810e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
   88110:	f04f 0000 	mov.w	r0, #0
   88114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
   88116:	f04f 0000 	mov.w	r0, #0
   8811a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8811c:	f04f 0000 	mov.w	r0, #0
   88120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88122:	f04f 0000 	mov.w	r0, #0
   88126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
   88128:	f04f 0000 	mov.w	r0, #0
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
	return true;
#endif
}
   8812c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8812e:	bf00      	nop

00088130 <udd_ep_alloc>:


#if (0 != USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   88130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88134:	b085      	sub	sp, #20
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
   88136:	f000 040f 	and.w	r4, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
   8813a:	2c05      	cmp	r4, #5
   8813c:	f200 8101 	bhi.w	88342 <udd_ep_alloc+0x212>
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
   88140:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88144:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88148:	69db      	ldr	r3, [r3, #28]
   8814a:	f04f 0501 	mov.w	r5, #1
   8814e:	fa05 f504 	lsl.w	r5, r5, r4
   88152:	421d      	tst	r5, r3
   88154:	f040 80f8 	bne.w	88348 <udd_ep_alloc+0x218>
		return false;
	}
	dbg_print("alloc(%x, %d) ", ep, MaxEndpointSize);

	// Bank choise
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   88158:	f001 0303 	and.w	r3, r1, #3
   8815c:	2b02      	cmp	r3, #2
   8815e:	d006      	beq.n	8816e <udd_ep_alloc+0x3e>
   88160:	2b03      	cmp	r3, #3
   88162:	f000 80fd 	beq.w	88360 <udd_ep_alloc+0x230>
   88166:	2b01      	cmp	r3, #1
   88168:	f040 80f1 	bne.w	8834e <udd_ep_alloc+0x21e>
   8816c:	e007      	b.n	8817e <udd_ep_alloc+0x4e>
		break;
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
		break;
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   8816e:	f1a4 0604 	sub.w	r6, r4, #4
   88172:	b2f5      	uxtb	r5, r6
		Assert(false);
		return false;
	}
	switch (nb_bank) {
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   88174:	2d01      	cmp	r5, #1
   88176:	bf94      	ite	ls
   88178:	2500      	movls	r5, #0
   8817a:	2501      	movhi	r5, #1
   8817c:	e001      	b.n	88182 <udd_ep_alloc+0x52>
				UOTGHS_DEVEPTCFG_EPBK_Pos;
		break;
	case 2:
		bank = UOTGHS_DEVEPTCFG_EPBK_2_BANK >>
   8817e:	f04f 0501 	mov.w	r5, #1
	Assert((MaxEndpointSize == 1023)
		|| !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   88182:	f44f 4741 	mov.w	r7, #49408	; 0xc100
   88186:	f2c4 070a 	movt	r7, #16394	; 0x400a
   8818a:	eb07 0684 	add.w	r6, r7, r4, lsl #2
   8818e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   88192:	f423 57cb 	bic.w	r7, r3, #6496	; 0x1960
   88196:	f027 071c 	bic.w	r7, r7, #28
   8819a:	ea4f 21c1 	mov.w	r1, r1, lsl #11
   8819e:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
   881a2:	f000 0080 	and.w	r0, r0, #128	; 0x80
   881a6:	2800      	cmp	r0, #0
   881a8:	bf14      	ite	ne
   881aa:	f44f 7080 	movne.w	r0, #256	; 0x100
   881ae:	2000      	moveq	r0, #0
   881b0:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
   881b4:	b29b      	uxth	r3, r3
   881b6:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   881ba:	d306      	bcc.n	881ca <udd_ep_alloc+0x9a>
   881bc:	2a08      	cmp	r2, #8
   881be:	d907      	bls.n	881d0 <udd_ep_alloc+0xa0>
   881c0:	ea4f 0342 	mov.w	r3, r2, lsl #1
   881c4:	f103 32ff 	add.w	r2, r3, #4294967295
   881c8:	e004      	b.n	881d4 <udd_ep_alloc+0xa4>
   881ca:	f240 72ff 	movw	r2, #2047	; 0x7ff
   881ce:	e001      	b.n	881d4 <udd_ep_alloc+0xa4>
   881d0:	f04f 020f 	mov.w	r2, #15
   881d4:	fab2 f282 	clz	r2, r2
   881d8:	ea41 0585 	orr.w	r5, r1, r5, lsl #2
   881dc:	4305      	orrs	r5, r0
   881de:	f1c2 011c 	rsb	r1, r2, #28
   881e2:	ea45 1001 	orr.w	r0, r5, r1, lsl #4
   881e6:	f641 1374 	movw	r3, #6516	; 0x1974
   881ea:	4003      	ands	r3, r0
   881ec:	433b      	orrs	r3, r7
   881ee:	6033      	str	r3, [r6, #0]
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
   881f0:	f04f 0601 	mov.w	r6, #1
   881f4:	fa06 f604 	lsl.w	r6, r6, r4
   881f8:	b2b7      	uxth	r7, r6

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   881fa:	2c04      	cmp	r4, #4
   881fc:	f200 80b3 	bhi.w	88366 <udd_ep_alloc+0x236>
   88200:	f24c 1114 	movw	r1, #49428	; 0xc114
   88204:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88208:	f04f 0305 	mov.w	r3, #5
		if (Is_udd_endpoint_enabled(i)) {
   8820c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   88210:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88214:	f04f 0001 	mov.w	r0, #1
   88218:	ea6f 0504 	mvn.w	r5, r4
   8821c:	18ee      	adds	r6, r5, r3
   8821e:	ea06 0c00 	and.w	ip, r6, r0
   88222:	69d6      	ldr	r6, [r2, #28]
   88224:	fa00 f503 	lsl.w	r5, r0, r3
   88228:	4235      	tst	r5, r6
   8822a:	f000 81c3 	beq.w	885b4 <udd_ep_alloc+0x484>
   8822e:	e1b5      	b.n	8859c <udd_ep_alloc+0x46c>
   88230:	46a0      	mov	r8, r4
   88232:	e7ff      	b.n	88234 <udd_ep_alloc+0x104>
   88234:	69d4      	ldr	r4, [r2, #28]
   88236:	fa00 f603 	lsl.w	r6, r0, r3
   8823a:	4226      	tst	r6, r4
   8823c:	d009      	beq.n	88252 <udd_ep_alloc+0x122>
			ep_allocated |= 1 << i;
   8823e:	4337      	orrs	r7, r6
   88240:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   88242:	69d4      	ldr	r4, [r2, #28]
   88244:	ea24 0606 	bic.w	r6, r4, r6
   88248:	61d6      	str	r6, [r2, #28]
			udd_unallocate_memory(i);
   8824a:	680d      	ldr	r5, [r1, #0]
   8824c:	f025 0402 	bic.w	r4, r5, #2
   88250:	600c      	str	r4, [r1, #0]
   88252:	f103 33ff 	add.w	r3, r3, #4294967295
   88256:	f1a1 0904 	sub.w	r9, r1, #4
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
   8825a:	69d4      	ldr	r4, [r2, #28]
   8825c:	fa00 f503 	lsl.w	r5, r0, r3
   88260:	4225      	tst	r5, r4
   88262:	f000 81dc 	beq.w	8861e <udd_ep_alloc+0x4ee>
   88266:	e1cc      	b.n	88602 <udd_ep_alloc+0x4d2>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
   88268:	fa47 f004 	asr.w	r0, r7, r4
   8826c:	f010 0f01 	tst.w	r0, #1
   88270:	d05a      	beq.n	88328 <udd_ep_alloc+0x1f8>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   88272:	f104 33ff 	add.w	r3, r4, #4294967295
   88276:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   8827a:	eb09 05cc 	add.w	r5, r9, ip, lsl #3
			bool b_restart = ptr_job->busy;
   8827e:	7d29      	ldrb	r1, [r5, #20]
   88280:	f001 0201 	and.w	r2, r1, #1
   88284:	9203      	str	r2, [sp, #12]
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   88286:	f36f 0100 	bfc	r1, #0, #1
   8828a:	7529      	strb	r1, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   8828c:	ea4f 0184 	mov.w	r1, r4, lsl #2
   88290:	198a      	adds	r2, r1, r6
   88292:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   88296:	f040 0302 	orr.w	r3, r0, #2
   8829a:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			udd_enable_endpoint(i);
   8829e:	f8d8 301c 	ldr.w	r3, [r8, #28]
   882a2:	f04f 0001 	mov.w	r0, #1
   882a6:	fa00 fb04 	lsl.w	fp, r0, r4
   882aa:	ea4b 0303 	orr.w	r3, fp, r3
   882ae:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   882b2:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
   882b6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   882ba:	d110      	bne.n	882de <udd_ep_alloc+0x1ae>
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
   882bc:	682b      	ldr	r3, [r5, #0]
   882be:	2b00      	cmp	r3, #0
   882c0:	d048      	beq.n	88354 <udd_ep_alloc+0x224>
					return false;
				}
				if (Is_udd_endpoint_in(i)) {
   882c2:	6811      	ldr	r1, [r2, #0]
   882c4:	f411 7f80 	tst.w	r1, #256	; 0x100
					i |= USB_EP_DIR_IN;
   882c8:	bf18      	it	ne
   882ca:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   882ce:	f04f 0001 	mov.w	r0, #1
   882d2:	68e9      	ldr	r1, [r5, #12]
   882d4:	4622      	mov	r2, r4
   882d6:	4798      	blx	r3
						ptr_job->buf_cnt, i);
				return false;
   882d8:	f04f 0000 	mov.w	r0, #0
   882dc:	e05d      	b.n	8839a <udd_ep_alloc+0x26a>
			}
			udd_enable_endpoint_bank_autoswitch(i);
   882de:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   882e2:	f442 7300 	orr.w	r3, r2, #512	; 0x200
   882e6:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			if (b_restart) {
   882ea:	9a03      	ldr	r2, [sp, #12]
   882ec:	b1e2      	cbz	r2, 88328 <udd_ep_alloc+0x1f8>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   882ee:	68ea      	ldr	r2, [r5, #12]
   882f0:	692b      	ldr	r3, [r5, #16]
   882f2:	1ad3      	subs	r3, r2, r3
   882f4:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   882f6:	5989      	ldr	r1, [r1, r6]
   882f8:	f411 7f80 	tst.w	r1, #256	; 0x100
   882fc:	bf14      	ite	ne
   882fe:	f044 0080 	orrne.w	r0, r4, #128	; 0x80
   88302:	4620      	moveq	r0, r4
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   88304:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88306:	f8d5 e004 	ldr.w	lr, [r5, #4]
   8830a:	68ad      	ldr	r5, [r5, #8]
   8830c:	f859 203c 	ldr.w	r2, [r9, ip, lsl #3]
   88310:	9200      	str	r2, [sp, #0]
   88312:	f3c1 0140 	ubfx	r1, r1, #1, #1
   88316:	eb0e 0203 	add.w	r2, lr, r3
   8831a:	1aeb      	subs	r3, r5, r3
   8831c:	f248 052d 	movw	r5, #32813	; 0x802d
   88320:	f2c0 0508 	movt	r5, #8
   88324:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   88326:	b1c0      	cbz	r0, 8835a <udd_ep_alloc+0x22a>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   88328:	f104 0401 	add.w	r4, r4, #1
   8832c:	b2e4      	uxtb	r4, r4
		if (ep_allocated & (1 << i)) {
   8832e:	fa47 f004 	asr.w	r0, r7, r4
   88332:	f010 0f01 	tst.w	r0, #1
   88336:	f000 812a 	beq.w	8858e <udd_ep_alloc+0x45e>
   8833a:	e0d9      	b.n	884f0 <udd_ep_alloc+0x3c0>
					return false;
				}
			}
		}
	}
	return true;
   8833c:	f04f 0001 	mov.w	r0, #1
   88340:	e02b      	b.n	8839a <udd_ep_alloc+0x26a>

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
   88342:	f04f 0000 	mov.w	r0, #0
   88346:	e028      	b.n	8839a <udd_ep_alloc+0x26a>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
   88348:	f04f 0000 	mov.w	r0, #0
   8834c:	e025      	b.n	8839a <udd_ep_alloc+0x26a>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
		break;
	default:
		Assert(false);
		return false;
   8834e:	f04f 0000 	mov.w	r0, #0
   88352:	e022      	b.n	8839a <udd_ep_alloc+0x26a>
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i)) {
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
					return false;
   88354:	f04f 0000 	mov.w	r0, #0
   88358:	e01f      	b.n	8839a <udd_ep_alloc+0x26a>
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
					dbg_print("ErrReRun%d ", i);
					return false;
   8835a:	f04f 0000 	mov.w	r0, #0
   8835e:	e01c      	b.n	8839a <udd_ep_alloc+0x26a>
		Assert(false);
		return false;
	}
	switch (nb_bank) {
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   88360:	f04f 0500 	mov.w	r5, #0
   88364:	e70d      	b.n	88182 <udd_ep_alloc+0x52>
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   88366:	f241 5990 	movw	r9, #5520	; 0x1590
   8836a:	f2c2 0907 	movt	r9, #8199	; 0x2007
			bool b_restart = ptr_job->busy;
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
			// Re-allocate memory
			udd_allocate_memory(i);
   8836e:	f44f 4641 	mov.w	r6, #49408	; 0xc100
   88372:	f2c4 060a 	movt	r6, #16394	; 0x400a
			udd_enable_endpoint(i);
   88376:	f44f 4840 	mov.w	r8, #49152	; 0xc000
   8837a:	f2c4 080a 	movt	r8, #16394	; 0x400a
			if (!Is_udd_endpoint_configured(i)) {
   8837e:	f24c 1a30 	movw	sl, #49456	; 0xc130
   88382:	f2c4 0a0a 	movt	sl, #16394	; 0x400a
   88386:	f1c4 0b05 	rsb	fp, r4, #5
   8838a:	f00b 0b01 	and.w	fp, fp, #1
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
   8838e:	fa47 f204 	asr.w	r2, r7, r4
   88392:	f012 0f01 	tst.w	r2, #1
   88396:	d04c      	beq.n	88432 <udd_ep_alloc+0x302>
   88398:	e002      	b.n	883a0 <udd_ep_alloc+0x270>
				}
			}
		}
	}
	return true;
}
   8839a:	b005      	add	sp, #20
   8839c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   883a0:	f104 30ff 	add.w	r0, r4, #4294967295
   883a4:	eb00 0540 	add.w	r5, r0, r0, lsl #1
   883a8:	eb09 05c5 	add.w	r5, r9, r5, lsl #3
			bool b_restart = ptr_job->busy;
   883ac:	7d2b      	ldrb	r3, [r5, #20]
   883ae:	f003 0c01 	and.w	ip, r3, #1
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   883b2:	f36f 0300 	bfc	r3, #0, #1
   883b6:	752b      	strb	r3, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   883b8:	ea4f 0384 	mov.w	r3, r4, lsl #2
   883bc:	199a      	adds	r2, r3, r6
   883be:	6811      	ldr	r1, [r2, #0]
   883c0:	f041 0002 	orr.w	r0, r1, #2
   883c4:	6010      	str	r0, [r2, #0]
			udd_enable_endpoint(i);
   883c6:	f8d8 101c 	ldr.w	r1, [r8, #28]
   883ca:	f04f 0001 	mov.w	r0, #1
   883ce:	fa00 f004 	lsl.w	r0, r0, r4
   883d2:	4301      	orrs	r1, r0
   883d4:	f8c8 101c 	str.w	r1, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   883d8:	4453      	add	r3, sl
   883da:	6818      	ldr	r0, [r3, #0]
   883dc:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   883e0:	f43f af6c 	beq.w	882bc <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   883e4:	6811      	ldr	r1, [r2, #0]
   883e6:	f441 7300 	orr.w	r3, r1, #512	; 0x200
   883ea:	6013      	str	r3, [r2, #0]
			if (b_restart) {
   883ec:	f1bc 0f00 	cmp.w	ip, #0
   883f0:	d01f      	beq.n	88432 <udd_ep_alloc+0x302>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   883f2:	68e8      	ldr	r0, [r5, #12]
   883f4:	6929      	ldr	r1, [r5, #16]
   883f6:	1a43      	subs	r3, r0, r1
   883f8:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   883fa:	6812      	ldr	r2, [r2, #0]
   883fc:	f412 7f80 	tst.w	r2, #256	; 0x100
   88400:	d012      	beq.n	88428 <udd_ep_alloc+0x2f8>
   88402:	e013      	b.n	8842c <udd_ep_alloc+0x2fc>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   88404:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88406:	686a      	ldr	r2, [r5, #4]
   88408:	f8d5 e008 	ldr.w	lr, [r5, #8]
   8840c:	682d      	ldr	r5, [r5, #0]
   8840e:	9500      	str	r5, [sp, #0]
   88410:	f3c1 0140 	ubfx	r1, r1, #1, #1
   88414:	18d2      	adds	r2, r2, r3
   88416:	ebc3 030e 	rsb	r3, r3, lr
   8841a:	f248 052d 	movw	r5, #32813	; 0x802d
   8841e:	f2c0 0508 	movt	r5, #8
   88422:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   88424:	b928      	cbnz	r0, 88432 <udd_ep_alloc+0x302>
   88426:	e798      	b.n	8835a <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88428:	4620      	mov	r0, r4
   8842a:	e7eb      	b.n	88404 <udd_ep_alloc+0x2d4>
   8842c:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   88430:	e7e8      	b.n	88404 <udd_ep_alloc+0x2d4>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   88432:	f104 0401 	add.w	r4, r4, #1
   88436:	b2e4      	uxtb	r4, r4
   88438:	2c06      	cmp	r4, #6
   8843a:	f43f af7f 	beq.w	8833c <udd_ep_alloc+0x20c>
   8843e:	fa4f f08b 	sxtb.w	r0, fp
   88442:	2800      	cmp	r0, #0
   88444:	f43f af10 	beq.w	88268 <udd_ep_alloc+0x138>
		if (ep_allocated & (1 << i)) {
   88448:	fa47 f304 	asr.w	r3, r7, r4
   8844c:	f013 0f01 	tst.w	r3, #1
   88450:	d047      	beq.n	884e2 <udd_ep_alloc+0x3b2>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   88452:	f104 31ff 	add.w	r1, r4, #4294967295
   88456:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   8845a:	eb09 05c2 	add.w	r5, r9, r2, lsl #3
			bool b_restart = ptr_job->busy;
   8845e:	7d28      	ldrb	r0, [r5, #20]
   88460:	f000 0101 	and.w	r1, r0, #1
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   88464:	f36f 0000 	bfc	r0, #0, #1
   88468:	7528      	strb	r0, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   8846a:	ea4f 0384 	mov.w	r3, r4, lsl #2
   8846e:	199a      	adds	r2, r3, r6
   88470:	6810      	ldr	r0, [r2, #0]
   88472:	f040 0002 	orr.w	r0, r0, #2
   88476:	6010      	str	r0, [r2, #0]
			udd_enable_endpoint(i);
   88478:	f8d8 001c 	ldr.w	r0, [r8, #28]
   8847c:	f04f 0b01 	mov.w	fp, #1
   88480:	fa0b fc04 	lsl.w	ip, fp, r4
   88484:	ea4c 0000 	orr.w	r0, ip, r0
   88488:	f8c8 001c 	str.w	r0, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   8848c:	4453      	add	r3, sl
   8848e:	6818      	ldr	r0, [r3, #0]
   88490:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   88494:	f43f af12 	beq.w	882bc <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   88498:	6813      	ldr	r3, [r2, #0]
   8849a:	f443 7000 	orr.w	r0, r3, #512	; 0x200
   8849e:	6010      	str	r0, [r2, #0]
			if (b_restart) {
   884a0:	b1f9      	cbz	r1, 884e2 <udd_ep_alloc+0x3b2>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   884a2:	68e9      	ldr	r1, [r5, #12]
   884a4:	692b      	ldr	r3, [r5, #16]
   884a6:	1acb      	subs	r3, r1, r3
   884a8:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   884aa:	6812      	ldr	r2, [r2, #0]
   884ac:	f412 7f80 	tst.w	r2, #256	; 0x100
   884b0:	d012      	beq.n	884d8 <udd_ep_alloc+0x3a8>
   884b2:	e013      	b.n	884dc <udd_ep_alloc+0x3ac>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   884b4:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   884b6:	686a      	ldr	r2, [r5, #4]
   884b8:	f8d5 e008 	ldr.w	lr, [r5, #8]
   884bc:	682d      	ldr	r5, [r5, #0]
   884be:	9500      	str	r5, [sp, #0]
   884c0:	f3c1 0140 	ubfx	r1, r1, #1, #1
   884c4:	18d2      	adds	r2, r2, r3
   884c6:	ebc3 030e 	rsb	r3, r3, lr
   884ca:	f248 052d 	movw	r5, #32813	; 0x802d
   884ce:	f2c0 0508 	movt	r5, #8
   884d2:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   884d4:	b928      	cbnz	r0, 884e2 <udd_ep_alloc+0x3b2>
   884d6:	e740      	b.n	8835a <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   884d8:	4620      	mov	r0, r4
   884da:	e7eb      	b.n	884b4 <udd_ep_alloc+0x384>
   884dc:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   884e0:	e7e8      	b.n	884b4 <udd_ep_alloc+0x384>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   884e2:	f104 0401 	add.w	r4, r4, #1
   884e6:	b2e4      	uxtb	r4, r4
   884e8:	2c06      	cmp	r4, #6
   884ea:	f47f aebd 	bne.w	88268 <udd_ep_alloc+0x138>
   884ee:	e725      	b.n	8833c <udd_ep_alloc+0x20c>
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   884f0:	f104 33ff 	add.w	r3, r4, #4294967295
   884f4:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   884f8:	eb09 05cc 	add.w	r5, r9, ip, lsl #3
			bool b_restart = ptr_job->busy;
   884fc:	7d29      	ldrb	r1, [r5, #20]
   884fe:	f001 0201 	and.w	r2, r1, #1
   88502:	9203      	str	r2, [sp, #12]
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   88504:	f36f 0100 	bfc	r1, #0, #1
   88508:	7529      	strb	r1, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   8850a:	ea4f 0184 	mov.w	r1, r4, lsl #2
   8850e:	198a      	adds	r2, r1, r6
   88510:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   88514:	f040 0302 	orr.w	r3, r0, #2
   88518:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			udd_enable_endpoint(i);
   8851c:	f8d8 301c 	ldr.w	r3, [r8, #28]
   88520:	f04f 0001 	mov.w	r0, #1
   88524:	fa00 fb04 	lsl.w	fp, r0, r4
   88528:	ea4b 0303 	orr.w	r3, fp, r3
   8852c:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   88530:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
   88534:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   88538:	f43f aec0 	beq.w	882bc <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   8853c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   88540:	f442 7300 	orr.w	r3, r2, #512	; 0x200
   88544:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			if (b_restart) {
   88548:	9803      	ldr	r0, [sp, #12]
   8854a:	b300      	cbz	r0, 8858e <udd_ep_alloc+0x45e>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   8854c:	68ea      	ldr	r2, [r5, #12]
   8854e:	692b      	ldr	r3, [r5, #16]
   88550:	1ad3      	subs	r3, r2, r3
   88552:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88554:	5989      	ldr	r1, [r1, r6]
   88556:	f411 7f80 	tst.w	r1, #256	; 0x100
   8855a:	d013      	beq.n	88584 <udd_ep_alloc+0x454>
   8855c:	e014      	b.n	88588 <udd_ep_alloc+0x458>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   8855e:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88560:	f8d5 e004 	ldr.w	lr, [r5, #4]
   88564:	68ad      	ldr	r5, [r5, #8]
   88566:	f859 203c 	ldr.w	r2, [r9, ip, lsl #3]
   8856a:	9200      	str	r2, [sp, #0]
   8856c:	f3c1 0140 	ubfx	r1, r1, #1, #1
   88570:	eb0e 0203 	add.w	r2, lr, r3
   88574:	1aeb      	subs	r3, r5, r3
   88576:	f248 052d 	movw	r5, #32813	; 0x802d
   8857a:	f2c0 0508 	movt	r5, #8
   8857e:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   88580:	b928      	cbnz	r0, 8858e <udd_ep_alloc+0x45e>
   88582:	e6ea      	b.n	8835a <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88584:	4620      	mov	r0, r4
   88586:	e7ea      	b.n	8855e <udd_ep_alloc+0x42e>
   88588:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   8858c:	e7e7      	b.n	8855e <udd_ep_alloc+0x42e>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   8858e:	f104 0401 	add.w	r4, r4, #1
   88592:	b2e4      	uxtb	r4, r4
   88594:	2c06      	cmp	r4, #6
   88596:	f47f ae67 	bne.w	88268 <udd_ep_alloc+0x138>
   8859a:	e6cf      	b.n	8833c <udd_ep_alloc+0x20c>
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
   8859c:	fa00 f603 	lsl.w	r6, r0, r3
   885a0:	4337      	orrs	r7, r6
   885a2:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   885a4:	69d6      	ldr	r6, [r2, #28]
   885a6:	ea26 0505 	bic.w	r5, r6, r5
   885aa:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   885ac:	680e      	ldr	r6, [r1, #0]
   885ae:	f026 0502 	bic.w	r5, r6, #2
   885b2:	600d      	str	r5, [r1, #0]
   885b4:	f103 33ff 	add.w	r3, r3, #4294967295
   885b8:	f1a1 0104 	sub.w	r1, r1, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   885bc:	b2dd      	uxtb	r5, r3
   885be:	42a5      	cmp	r5, r4
   885c0:	f67f aed1 	bls.w	88366 <udd_ep_alloc+0x236>
   885c4:	fa4f f68c 	sxtb.w	r6, ip
   885c8:	2e00      	cmp	r6, #0
   885ca:	f43f ae31 	beq.w	88230 <udd_ep_alloc+0x100>
		if (Is_udd_endpoint_enabled(i)) {
   885ce:	69d6      	ldr	r6, [r2, #28]
   885d0:	fa00 f503 	lsl.w	r5, r0, r3
   885d4:	4235      	tst	r5, r6
   885d6:	d009      	beq.n	885ec <udd_ep_alloc+0x4bc>
			ep_allocated |= 1 << i;
   885d8:	432f      	orrs	r7, r5
   885da:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   885dc:	69d6      	ldr	r6, [r2, #28]
   885de:	ea26 0505 	bic.w	r5, r6, r5
   885e2:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   885e4:	680e      	ldr	r6, [r1, #0]
   885e6:	f026 0502 	bic.w	r5, r6, #2
   885ea:	600d      	str	r5, [r1, #0]
   885ec:	f103 33ff 	add.w	r3, r3, #4294967295
   885f0:	f1a1 0104 	sub.w	r1, r1, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   885f4:	b2dd      	uxtb	r5, r3
   885f6:	42a5      	cmp	r5, r4
   885f8:	bf88      	it	hi
   885fa:	46a0      	movhi	r8, r4
   885fc:	f63f ae1a 	bhi.w	88234 <udd_ep_alloc+0x104>
   88600:	e6b1      	b.n	88366 <udd_ep_alloc+0x236>
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
   88602:	fa00 f603 	lsl.w	r6, r0, r3
   88606:	4337      	orrs	r7, r6
   88608:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   8860a:	69d4      	ldr	r4, [r2, #28]
   8860c:	ea24 0505 	bic.w	r5, r4, r5
   88610:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   88612:	f851 6c04 	ldr.w	r6, [r1, #-4]
   88616:	f026 0402 	bic.w	r4, r6, #2
   8861a:	f841 4c04 	str.w	r4, [r1, #-4]
   8861e:	f103 33ff 	add.w	r3, r3, #4294967295
   88622:	f1a9 0104 	sub.w	r1, r9, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   88626:	b2dd      	uxtb	r5, r3
   88628:	4545      	cmp	r5, r8
   8862a:	f63f ae03 	bhi.w	88234 <udd_ep_alloc+0x104>
   8862e:	4644      	mov	r4, r8
   88630:	e699      	b.n	88366 <udd_ep_alloc+0x236>
   88632:	bf00      	nop

00088634 <udd_ep_abort>:
#endif
}


void udd_ep_abort(udd_ep_id_t ep)
{
   88634:	b538      	push	{r3, r4, r5, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   88636:	f000 030f 	and.w	r3, r0, #15
		udd_disable_in_send_interrupt(ep_index);
	} else
#endif
	{
		// Stop DMA transfer
		udd_disable_endpoint_dma_interrupt(ep_index);
   8863a:	f103 32ff 	add.w	r2, r3, #4294967295
   8863e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   88642:	fa01 f102 	lsl.w	r1, r1, r2
   88646:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   8864a:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8864e:	6151      	str	r1, [r2, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   88650:	f44f 4443 	mov.w	r4, #49920	; 0xc300
   88654:	f2c4 040a 	movt	r4, #16394	; 0x400a
   88658:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   8865c:	f04f 0400 	mov.w	r4, #0
   88660:	608c      	str	r4, [r1, #8]
	}
	udd_disable_endpoint_interrupt(ep_index);
   88662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   88666:	fa01 f103 	lsl.w	r1, r1, r3
   8866a:	6151      	str	r1, [r2, #20]
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
   8866c:	f010 0f80 	tst.w	r0, #128	; 0x80
   88670:	d01c      	beq.n	886ac <udd_ep_abort+0x78>
		while(udd_nb_busy_bank(ep_index)) {
   88672:	ea4f 0383 	mov.w	r3, r3, lsl #2
   88676:	f24c 1530 	movw	r5, #49456	; 0xc130
   8867a:	f2c4 050a 	movt	r5, #16394	; 0x400a
   8867e:	1959      	adds	r1, r3, r5
			udd_kill_last_in_bank(ep_index);
   88680:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   88684:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88688:	189c      	adds	r4, r3, r2
   8868a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
   8868e:	f24c 12c0 	movw	r2, #49600	; 0xc1c0
   88692:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88696:	189a      	adds	r2, r3, r2
   88698:	e004      	b.n	886a4 <udd_ep_abort+0x70>
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
			udd_kill_last_in_bank(ep_index);
   8869a:	6025      	str	r5, [r4, #0]
			while(Is_udd_kill_last(ep_index));
   8869c:	6813      	ldr	r3, [r2, #0]
   8869e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   886a2:	d1fb      	bne.n	8869c <udd_ep_abort+0x68>
		udd_endpoint_dma_set_control(ep_index, 0);
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
   886a4:	680b      	ldr	r3, [r1, #0]
   886a6:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   886aa:	d1f6      	bne.n	8869a <udd_ep_abort+0x66>
			udd_kill_last_in_bank(ep_index);
			while(Is_udd_kill_last(ep_index));
		}
	}
	udd_ep_abort_job(ep);
   886ac:	f646 41f1 	movw	r1, #27889	; 0x6cf1
   886b0:	f2c0 0108 	movt	r1, #8
   886b4:	4788      	blx	r1
   886b6:	bd38      	pop	{r3, r4, r5, pc}

000886b8 <udd_ep_wait_stall_clear>:
}


bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
   886b8:	b510      	push	{r4, lr}
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   886ba:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   886be:	2805      	cmp	r0, #5
   886c0:	d831      	bhi.n	88726 <udd_ep_wait_stall_clear+0x6e>
		return false;
	}

	ptr_job = &udd_ep_job[ep - 1];

	if (!Is_udd_endpoint_enabled(ep)) {
   886c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   886c6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   886ca:	69db      	ldr	r3, [r3, #28]
   886cc:	f04f 0201 	mov.w	r2, #1
   886d0:	fa02 f200 	lsl.w	r2, r2, r0
   886d4:	421a      	tst	r2, r3
   886d6:	d029      	beq.n	8872c <udd_ep_wait_stall_clear+0x74>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	ptr_job = &udd_ep_job[ep - 1];
   886d8:	f100 33ff 	add.w	r3, r0, #4294967295
   886dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   886e0:	f241 5290 	movw	r2, #5520	; 0x1590
   886e4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   886e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (!Is_udd_endpoint_enabled(ep)) {
		return false; // Endpoint not enabled
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
   886ec:	7d1a      	ldrb	r2, [r3, #20]
   886ee:	f012 0f01 	tst.w	r2, #1
   886f2:	d11e      	bne.n	88732 <udd_ep_wait_stall_clear+0x7a>
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
   886f4:	f24c 14c0 	movw	r4, #49600	; 0xc1c0
   886f8:	f2c4 040a 	movt	r4, #16394	; 0x400a
   886fc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   88700:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   88704:	d103      	bne.n	8870e <udd_ep_wait_stall_clear+0x56>
			|| ptr_job->stall_requested) {
   88706:	f002 0204 	and.w	r2, r2, #4
   8870a:	b2d0      	uxtb	r0, r2
   8870c:	b138      	cbz	r0, 8871e <udd_ep_wait_stall_clear+0x66>
		// Endpoint halted then registes the callback
		ptr_job->busy = true;
   8870e:	7d1a      	ldrb	r2, [r3, #20]
   88710:	f042 0001 	orr.w	r0, r2, #1
   88714:	7518      	strb	r0, [r3, #20]
		ptr_job->call_nohalt = callback;
   88716:	6019      	str	r1, [r3, #0]
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
   88718:	f04f 0001 	mov.w	r0, #1

	if (Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		// Endpoint halted then registes the callback
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
   8871c:	bd10      	pop	{r4, pc}
	} else {
		// endpoint not halted then call directly callback
		callback();
   8871e:	4788      	blx	r1
	}
	return true;
   88720:	f04f 0001 	mov.w	r0, #1
   88724:	bd10      	pop	{r4, pc}
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
   88726:	f04f 0000 	mov.w	r0, #0
   8872a:	bd10      	pop	{r4, pc}
	}

	ptr_job = &udd_ep_job[ep - 1];

	if (!Is_udd_endpoint_enabled(ep)) {
		return false; // Endpoint not enabled
   8872c:	f04f 0000 	mov.w	r0, #0
   88730:	bd10      	pop	{r4, pc}
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
   88732:	f04f 0000 	mov.w	r0, #0
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
   88736:	bd10      	pop	{r4, pc}

00088738 <udd_test_mode_j>:

#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
	udd_enable_hs_test_mode();
   88738:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8873c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88740:	681a      	ldr	r2, [r3, #0]
   88742:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   88746:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   8874a:	6019      	str	r1, [r3, #0]
	udd_enable_hs_test_mode_j();
   8874c:	681a      	ldr	r2, [r3, #0]
   8874e:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
   88752:	6018      	str	r0, [r3, #0]
   88754:	4770      	bx	lr
   88756:	bf00      	nop

00088758 <udd_test_mode_k>:
}


void udd_test_mode_k(void)
{
	udd_enable_hs_test_mode();
   88758:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8875c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88760:	681a      	ldr	r2, [r3, #0]
   88762:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   88766:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   8876a:	6019      	str	r1, [r3, #0]
	udd_enable_hs_test_mode_k();
   8876c:	681a      	ldr	r2, [r3, #0]
   8876e:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   88772:	6018      	str	r0, [r3, #0]
   88774:	4770      	bx	lr
   88776:	bf00      	nop

00088778 <udd_test_mode_se0_nak>:
}


void udd_test_mode_se0_nak(void)
{
	udd_enable_hs_test_mode();
   88778:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8877c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88780:	681a      	ldr	r2, [r3, #0]
   88782:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   88786:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   8878a:	6019      	str	r1, [r3, #0]
   8878c:	4770      	bx	lr
   8878e:	bf00      	nop

00088790 <udd_test_mode_packet>:
}


void udd_test_mode_packet(void)
{
   88790:	b470      	push	{r4, r5, r6}
   88792:	b08f      	sub	sp, #60	; 0x3c
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   88794:	f64b 75a0 	movw	r5, #49056	; 0xbfa0
   88798:	f2c0 0508 	movt	r5, #8
   8879c:	ac00      	add	r4, sp, #0
   8879e:	6828      	ldr	r0, [r5, #0]
   887a0:	6869      	ldr	r1, [r5, #4]
   887a2:	68aa      	ldr	r2, [r5, #8]
   887a4:	68eb      	ldr	r3, [r5, #12]
   887a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   887a8:	f105 0510 	add.w	r5, r5, #16
   887ac:	4626      	mov	r6, r4
   887ae:	6828      	ldr	r0, [r5, #0]
   887b0:	6869      	ldr	r1, [r5, #4]
   887b2:	68aa      	ldr	r2, [r5, #8]
   887b4:	68eb      	ldr	r3, [r5, #12]
   887b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   887b8:	6928      	ldr	r0, [r5, #16]
   887ba:	6969      	ldr	r1, [r5, #20]
   887bc:	69aa      	ldr	r2, [r5, #24]
   887be:	69eb      	ldr	r3, [r5, #28]
   887c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   887c2:	6a28      	ldr	r0, [r5, #32]
   887c4:	f846 0f20 	str.w	r0, [r6, #32]!
   887c8:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   887cc:	f105 0520 	add.w	r5, r5, #32
   887d0:	7131      	strb	r1, [r6, #4]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   887d2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   887d6:	f2c4 040a 	movt	r4, #16394	; 0x400a
   887da:	69e2      	ldr	r2, [r4, #28]
   887dc:	f022 0301 	bic.w	r3, r2, #1
   887e0:	61e3      	str	r3, [r4, #28]
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
   887e2:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   887e6:	f2c4 000a 	movt	r0, #16394	; 0x400a
   887ea:	6801      	ldr	r1, [r0, #0]
   887ec:	f421 52cb 	bic.w	r2, r1, #6496	; 0x1960
   887f0:	f022 031c 	bic.w	r3, r2, #28
   887f4:	f443 5189 	orr.w	r1, r3, #4384	; 0x1120
   887f8:	f041 0210 	orr.w	r2, r1, #16
   887fc:	6002      	str	r2, [r0, #0]
			64, UOTGHS_DEVEPTCFG_EPBK_1_BANK);
	udd_allocate_memory(0);
   887fe:	6803      	ldr	r3, [r0, #0]
   88800:	f043 0102 	orr.w	r1, r3, #2
   88804:	6001      	str	r1, [r0, #0]
	udd_enable_endpoint(0);
   88806:	69e0      	ldr	r0, [r4, #28]
   88808:	f040 0201 	orr.w	r2, r0, #1
   8880c:	61e2      	str	r2, [r4, #28]

	udd_enable_hs_test_mode();
   8880e:	6823      	ldr	r3, [r4, #0]
   88810:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
   88814:	f441 6000 	orr.w	r0, r1, #2048	; 0x800
   88818:	6020      	str	r0, [r4, #0]
	udd_enable_hs_test_mode_packet();
   8881a:	6822      	ldr	r2, [r4, #0]
   8881c:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
   88820:	6023      	str	r3, [r4, #0]

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
   88822:	f04f 0435 	mov.w	r4, #53	; 0x35
   88826:	f2c2 0418 	movt	r4, #8216	; 0x2018
   8882a:	f10d 31ff 	add.w	r1, sp, #4294967295
		*ptr_dest++ = *ptr_src++;
   8882e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   88832:	f04f 0300 	mov.w	r3, #0
   88836:	f2c2 0318 	movt	r3, #8216	; 0x2018
   8883a:	f803 0b01 	strb.w	r0, [r3], #1
   8883e:	f101 0001 	add.w	r0, r1, #1
   88842:	7849      	ldrb	r1, [r1, #1]
   88844:	461a      	mov	r2, r3
   88846:	f802 1b01 	strb.w	r1, [r2], #1
   8884a:	f100 0101 	add.w	r1, r0, #1
   8884e:	7840      	ldrb	r0, [r0, #1]
   88850:	7058      	strb	r0, [r3, #1]
   88852:	f102 0301 	add.w	r3, r2, #1

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
   88856:	42a3      	cmp	r3, r4
   88858:	d1f1      	bne.n	8883e <udd_test_mode_packet+0xae>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ack_fifocon(0);
   8885a:	f24c 2120 	movw	r1, #49696	; 0xc220
   8885e:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   88866:	600a      	str	r2, [r1, #0]
}
   88868:	b00f      	add	sp, #60	; 0x3c
   8886a:	bc70      	pop	{r4, r5, r6}
   8886c:	4770      	bx	lr
   8886e:	bf00      	nop

00088870 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   88870:	e7fe      	b.n	88870 <Dummy_Handler>
   88872:	bf00      	nop

00088874 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   88874:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   88876:	f240 0300 	movw	r3, #0
   8887a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8887e:	f24c 1270 	movw	r2, #49520	; 0xc170
   88882:	f2c0 0208 	movt	r2, #8
   88886:	429a      	cmp	r2, r3
   88888:	d003      	beq.n	88892 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   8888a:	4840      	ldr	r0, [pc, #256]	; (8898c <Reset_Handler+0x118>)
   8888c:	4940      	ldr	r1, [pc, #256]	; (88990 <Reset_Handler+0x11c>)
   8888e:	4281      	cmp	r1, r0
   88890:	d304      	bcc.n	8889c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   88892:	4b40      	ldr	r3, [pc, #256]	; (88994 <Reset_Handler+0x120>)
   88894:	4a40      	ldr	r2, [pc, #256]	; (88998 <Reset_Handler+0x124>)
   88896:	429a      	cmp	r2, r3
   88898:	d325      	bcc.n	888e6 <Reset_Handler+0x72>
   8889a:	e042      	b.n	88922 <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   8889c:	4d3f      	ldr	r5, [pc, #252]	; (8899c <Reset_Handler+0x128>)
   8889e:	4c40      	ldr	r4, [pc, #256]	; (889a0 <Reset_Handler+0x12c>)
   888a0:	1b63      	subs	r3, r4, r5
   888a2:	f023 0503 	bic.w	r5, r3, #3
   888a6:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   888aa:	f240 0200 	movw	r2, #0
   888ae:	f2c2 0207 	movt	r2, #8199	; 0x2007
   888b2:	f24c 1170 	movw	r1, #49520	; 0xc170
   888b6:	f2c0 0108 	movt	r1, #8
   888ba:	f105 0004 	add.w	r0, r5, #4
   888be:	f3c5 0480 	ubfx	r4, r5, #2, #1
   888c2:	585d      	ldr	r5, [r3, r1]
   888c4:	509d      	str	r5, [r3, r2]
   888c6:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   888ca:	4283      	cmp	r3, r0
   888cc:	d155      	bne.n	8897a <Reset_Handler+0x106>
   888ce:	e7e0      	b.n	88892 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   888d0:	585d      	ldr	r5, [r3, r1]
   888d2:	509d      	str	r5, [r3, r2]
   888d4:	f103 0304 	add.w	r3, r3, #4
   888d8:	585c      	ldr	r4, [r3, r1]
   888da:	509c      	str	r4, [r3, r2]
   888dc:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   888e0:	4283      	cmp	r3, r0
   888e2:	d1f5      	bne.n	888d0 <Reset_Handler+0x5c>
   888e4:	e7d5      	b.n	88892 <Reset_Handler+0x1e>
   888e6:	4d2f      	ldr	r5, [pc, #188]	; (889a4 <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   888e8:	492f      	ldr	r1, [pc, #188]	; (889a8 <Reset_Handler+0x134>)
   888ea:	1b48      	subs	r0, r1, r5
   888ec:	f020 0403 	bic.w	r4, r0, #3
   888f0:	f640 23e0 	movw	r3, #2784	; 0xae0
   888f4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   888f8:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   888fa:	f04f 0100 	mov.w	r1, #0
   888fe:	1b50      	subs	r0, r2, r5
   88900:	f1a0 0004 	sub.w	r0, r0, #4
   88904:	f3c0 0480 	ubfx	r4, r0, #2, #1
   88908:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8890c:	4295      	cmp	r5, r2
   8890e:	d12d      	bne.n	8896c <Reset_Handler+0xf8>
   88910:	e007      	b.n	88922 <Reset_Handler+0xae>
   88912:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   88916:	6069      	str	r1, [r5, #4]
   88918:	f105 0508 	add.w	r5, r5, #8
   8891c:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8891e:	4295      	cmp	r5, r2
   88920:	d1f7      	bne.n	88912 <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   88922:	f240 0500 	movw	r5, #0
   88926:	f2c0 0508 	movt	r5, #8
   8892a:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   8892e:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   88932:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   88936:	f2ce 0000 	movt	r0, #57344	; 0xe000
   8893a:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8893c:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   88940:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   88944:	d207      	bcs.n	88956 <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   88946:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   8894a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8894e:	689d      	ldr	r5, [r3, #8]
   88950:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   88954:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   88956:	f249 21e1 	movw	r1, #37601	; 0x92e1
   8895a:	f2c0 0108 	movt	r1, #8
   8895e:	4788      	blx	r1

	/* Branch to main function */
	main();
   88960:	f648 40a9 	movw	r0, #36009	; 0x8ca9
   88964:	f2c0 0008 	movt	r0, #8
   88968:	4780      	blx	r0
   8896a:	e7fe      	b.n	8896a <Reset_Handler+0xf6>
   8896c:	2c00      	cmp	r4, #0
   8896e:	d0d0      	beq.n	88912 <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   88970:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   88974:	4295      	cmp	r5, r2
   88976:	d1cc      	bne.n	88912 <Reset_Handler+0x9e>
   88978:	e7d3      	b.n	88922 <Reset_Handler+0xae>
   8897a:	2c00      	cmp	r4, #0
   8897c:	d0a8      	beq.n	888d0 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   8897e:	585c      	ldr	r4, [r3, r1]
   88980:	509c      	str	r4, [r3, r2]
   88982:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   88986:	4283      	cmp	r3, r0
   88988:	d1a2      	bne.n	888d0 <Reset_Handler+0x5c>
   8898a:	e782      	b.n	88892 <Reset_Handler+0x1e>
   8898c:	20070ae0 	.word	0x20070ae0
   88990:	20070000 	.word	0x20070000
   88994:	20071c30 	.word	0x20071c30
   88998:	20070ae0 	.word	0x20070ae0
   8899c:	20070004 	.word	0x20070004
   889a0:	20070ae3 	.word	0x20070ae3
   889a4:	20070adc 	.word	0x20070adc
   889a8:	20071c2b 	.word	0x20071c2b

000889ac <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   889ac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   889b0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   889b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
   889b6:	f000 0103 	and.w	r1, r0, #3
   889ba:	2903      	cmp	r1, #3
   889bc:	f200 80b1 	bhi.w	88b22 <SystemCoreClockUpdate+0x176>
   889c0:	e8df f001 	tbb	[pc, r1]
   889c4:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   889c8:	f641 2010 	movw	r0, #6672	; 0x1a10
   889cc:	f2c4 000e 	movt	r0, #16398	; 0x400e
   889d0:	6941      	ldr	r1, [r0, #20]
   889d2:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   889d6:	f240 2394 	movw	r3, #660	; 0x294
   889da:	f2c2 0307 	movt	r3, #8199	; 0x2007
   889de:	bf14      	ite	ne
   889e0:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   889e4:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   889e8:	601a      	str	r2, [r3, #0]
   889ea:	e09a      	b.n	88b22 <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   889ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   889f0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   889f4:	6a18      	ldr	r0, [r3, #32]
   889f6:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   889fa:	d009      	beq.n	88a10 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   889fc:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   88a00:	f2c0 03b7 	movt	r3, #183	; 0xb7
   88a04:	f240 2294 	movw	r2, #660	; 0x294
   88a08:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88a0c:	6013      	str	r3, [r2, #0]
   88a0e:	e088      	b.n	88b22 <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   88a10:	f44f 6110 	mov.w	r1, #2304	; 0x900
   88a14:	f2c0 013d 	movt	r1, #61	; 0x3d
   88a18:	f240 2294 	movw	r2, #660	; 0x294
   88a1c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88a20:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   88a22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   88a26:	f2c4 030e 	movt	r3, #16398	; 0x400e
   88a2a:	6a18      	ldr	r0, [r3, #32]
   88a2c:	f000 0170 	and.w	r1, r0, #112	; 0x70
   88a30:	2910      	cmp	r1, #16
   88a32:	d002      	beq.n	88a3a <SystemCoreClockUpdate+0x8e>
   88a34:	2920      	cmp	r1, #32
   88a36:	d174      	bne.n	88b22 <SystemCoreClockUpdate+0x176>
   88a38:	e009      	b.n	88a4e <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   88a3a:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   88a3e:	f2c0 007a 	movt	r0, #122	; 0x7a
   88a42:	f240 2194 	movw	r1, #660	; 0x294
   88a46:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88a4a:	6008      	str	r0, [r1, #0]
				break;
   88a4c:	e069      	b.n	88b22 <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   88a4e:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   88a52:	f2c0 03b7 	movt	r3, #183	; 0xb7
   88a56:	f240 2294 	movw	r2, #660	; 0x294
   88a5a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88a5e:	6013      	str	r3, [r2, #0]
				break;
   88a60:	e05f      	b.n	88b22 <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   88a62:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   88a66:	f2c4 020e 	movt	r2, #16398	; 0x400e
   88a6a:	6a13      	ldr	r3, [r2, #32]
   88a6c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   88a70:	d009      	beq.n	88a86 <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   88a72:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   88a76:	f2c0 01b7 	movt	r1, #183	; 0xb7
   88a7a:	f240 2294 	movw	r2, #660	; 0x294
   88a7e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88a82:	6011      	str	r1, [r2, #0]
   88a84:	e027      	b.n	88ad6 <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   88a86:	f44f 6010 	mov.w	r0, #2304	; 0x900
   88a8a:	f2c0 003d 	movt	r0, #61	; 0x3d
   88a8e:	f240 2194 	movw	r1, #660	; 0x294
   88a92:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88a96:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   88a98:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   88a9c:	f2c4 020e 	movt	r2, #16398	; 0x400e
   88aa0:	6a13      	ldr	r3, [r2, #32]
   88aa2:	f003 0070 	and.w	r0, r3, #112	; 0x70
   88aa6:	2810      	cmp	r0, #16
   88aa8:	d002      	beq.n	88ab0 <SystemCoreClockUpdate+0x104>
   88aaa:	2820      	cmp	r0, #32
   88aac:	d113      	bne.n	88ad6 <SystemCoreClockUpdate+0x12a>
   88aae:	e009      	b.n	88ac4 <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   88ab0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   88ab4:	f2c0 037a 	movt	r3, #122	; 0x7a
   88ab8:	f240 2094 	movw	r0, #660	; 0x294
   88abc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88ac0:	6003      	str	r3, [r0, #0]
				break;
   88ac2:	e008      	b.n	88ad6 <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   88ac4:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   88ac8:	f2c0 01b7 	movt	r1, #183	; 0xb7
   88acc:	f240 2294 	movw	r2, #660	; 0x294
   88ad0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88ad4:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   88ad6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   88ada:	f2c4 030e 	movt	r3, #16398	; 0x400e
   88ade:	6b18      	ldr	r0, [r3, #48]	; 0x30
   88ae0:	f000 0103 	and.w	r1, r0, #3
   88ae4:	2902      	cmp	r1, #2
   88ae6:	d113      	bne.n	88b10 <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   88ae8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   88aec:	f2c4 010e 	movt	r1, #16398	; 0x400e
   88af0:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   88af2:	6a89      	ldr	r1, [r1, #40]	; 0x28
   88af4:	f240 2394 	movw	r3, #660	; 0x294
   88af8:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   88afc:	f3c0 400a 	ubfx	r0, r0, #16, #11
   88b00:	681a      	ldr	r2, [r3, #0]
   88b02:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   88b06:	b2c9      	uxtb	r1, r1
   88b08:	fbb0 f2f1 	udiv	r2, r0, r1
   88b0c:	601a      	str	r2, [r3, #0]
   88b0e:	e008      	b.n	88b22 <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   88b10:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   88b14:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   88b18:	f240 2294 	movw	r2, #660	; 0x294
   88b1c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88b20:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   88b22:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   88b26:	f2c4 020e 	movt	r2, #16398	; 0x400e
   88b2a:	6b10      	ldr	r0, [r2, #48]	; 0x30
   88b2c:	f000 0170 	and.w	r1, r0, #112	; 0x70
   88b30:	2970      	cmp	r1, #112	; 0x70
   88b32:	d10e      	bne.n	88b52 <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   88b34:	f240 2394 	movw	r3, #660	; 0x294
   88b38:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88b3c:	6818      	ldr	r0, [r3, #0]
   88b3e:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   88b42:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   88b46:	fba2 0100 	umull	r0, r1, r2, r0
   88b4a:	ea4f 0051 	mov.w	r0, r1, lsr #1
   88b4e:	6018      	str	r0, [r3, #0]
   88b50:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   88b52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   88b56:	f2c4 030e 	movt	r3, #16398	; 0x400e
   88b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   88b5c:	f240 2094 	movw	r0, #660	; 0x294
   88b60:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88b64:	f3c2 1102 	ubfx	r1, r2, #4, #3
   88b68:	6803      	ldr	r3, [r0, #0]
   88b6a:	fa23 f301 	lsr.w	r3, r3, r1
   88b6e:	6003      	str	r3, [r0, #0]
   88b70:	4770      	bx	lr
   88b72:	bf00      	nop

00088b74 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   88b74:	f64e 23bf 	movw	r3, #60095	; 0xeabf
   88b78:	f2c0 1321 	movt	r3, #289	; 0x121
   88b7c:	4298      	cmp	r0, r3
   88b7e:	d80c      	bhi.n	88b9a <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   88b80:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   88b84:	f2c4 030e 	movt	r3, #16398	; 0x400e
   88b88:	f04f 0000 	mov.w	r0, #0
   88b8c:	6018      	str	r0, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   88b8e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   88b92:	f2c4 010e 	movt	r1, #16398	; 0x400e
   88b96:	6008      	str	r0, [r1, #0]
   88b98:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   88b9a:	f24f 017f 	movw	r1, #61567	; 0xf07f
   88b9e:	f2c0 21fa 	movt	r1, #762	; 0x2fa
   88ba2:	4288      	cmp	r0, r1
   88ba4:	d80c      	bhi.n	88bc0 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   88ba6:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   88baa:	f2c4 000e 	movt	r0, #16398	; 0x400e
   88bae:	f44f 7180 	mov.w	r1, #256	; 0x100
   88bb2:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   88bb4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   88bb8:	f2c4 020e 	movt	r2, #16398	; 0x400e
   88bbc:	6011      	str	r1, [r2, #0]
   88bbe:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   88bc0:	f648 73ff 	movw	r3, #36863	; 0x8fff
   88bc4:	f2c0 33d0 	movt	r3, #976	; 0x3d0
   88bc8:	4298      	cmp	r0, r3
   88bca:	d80c      	bhi.n	88be6 <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   88bcc:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   88bd0:	f2c4 010e 	movt	r1, #16398	; 0x400e
   88bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
   88bd8:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   88bda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   88bde:	f2c4 030e 	movt	r3, #16398	; 0x400e
   88be2:	601a      	str	r2, [r3, #0]
   88be4:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   88be6:	f24b 31ff 	movw	r1, #46079	; 0xb3ff
   88bea:	f2c0 41c4 	movt	r1, #1220	; 0x4c4
   88bee:	4288      	cmp	r0, r1
   88bf0:	d80c      	bhi.n	88c0c <system_init_flash+0x98>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   88bf2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   88bf6:	f2c4 030e 	movt	r3, #16398	; 0x400e
   88bfa:	f44f 7240 	mov.w	r2, #768	; 0x300
   88bfe:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   88c00:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   88c04:	f2c4 000e 	movt	r0, #16398	; 0x400e
   88c08:	6002      	str	r2, [r0, #0]
   88c0a:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   88c0c:	f644 237f 	movw	r3, #19071	; 0x4a7f
   88c10:	f2c0 535d 	movt	r3, #1373	; 0x55d
   88c14:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   88c16:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   88c1a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   88c1e:	bf94      	ite	ls
   88c20:	f44f 6280 	movls.w	r2, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   88c24:	f44f 62a0 	movhi.w	r2, #1280	; 0x500
   88c28:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   88c2a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   88c2e:	f2c4 010e 	movt	r1, #16398	; 0x400e
   88c32:	600a      	str	r2, [r1, #0]
   88c34:	4770      	bx	lr
   88c36:	bf00      	nop

00088c38 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   88c38:	f241 630c 	movw	r3, #5644	; 0x160c
   88c3c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88c40:	6819      	ldr	r1, [r3, #0]
   88c42:	b941      	cbnz	r1, 88c56 <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
   88c44:	f241 630c 	movw	r3, #5644	; 0x160c
   88c48:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88c4c:	f643 4230 	movw	r2, #15408	; 0x3c30
   88c50:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88c54:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   88c56:	f241 610c 	movw	r1, #5644	; 0x160c
   88c5a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88c5e:	680b      	ldr	r3, [r1, #0]

	heap += incr;
   88c60:	1818      	adds	r0, r3, r0
   88c62:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
   88c64:	4618      	mov	r0, r3
   88c66:	4770      	bx	lr

00088c68 <main_msc_enable>:
bool last_ok_12v_state = false;


bool main_msc_enable(void)
{
	main_b_msc_enable = true;
   88c68:	f04f 0001 	mov.w	r0, #1
   88c6c:	f241 6311 	movw	r3, #5649	; 0x1611
   88c70:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88c74:	7018      	strb	r0, [r3, #0]
	return true;
}
   88c76:	4770      	bx	lr

00088c78 <main_msc_disable>:
void main_msc_disable(void)
{
	main_b_msc_enable = false;
   88c78:	f241 6311 	movw	r3, #5649	; 0x1611
   88c7c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88c80:	f04f 0200 	mov.w	r2, #0
   88c84:	701a      	strb	r2, [r3, #0]
   88c86:	4770      	bx	lr

00088c88 <main_cdc_enable>:
}
bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
   88c88:	f04f 0001 	mov.w	r0, #1
   88c8c:	f241 6312 	movw	r3, #5650	; 0x1612
   88c90:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88c94:	7018      	strb	r0, [r3, #0]
	return true;
}
   88c96:	4770      	bx	lr

00088c98 <main_cdc_disable>:
void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
   88c98:	f241 6312 	movw	r3, #5650	; 0x1612
   88c9c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88ca0:	f04f 0200 	mov.w	r2, #0
   88ca4:	701a      	strb	r2, [r3, #0]
   88ca6:	4770      	bx	lr

00088ca8 <main>:
}

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   88ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
   88caa:	f04f 0401 	mov.w	r4, #1
   88cae:	f240 2390 	movw	r3, #656	; 0x290
   88cb2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88cb6:	701c      	strb	r4, [r3, #0]
   88cb8:	f3bf 8f5f 	dmb	sy
   88cbc:	b662      	cpsie	i
	wdt_disable(WDT);
   88cbe:	f641 2050 	movw	r0, #6736	; 0x1a50
   88cc2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   88cc6:	f641 0115 	movw	r1, #6165	; 0x1815
   88cca:	f2c0 0108 	movt	r1, #8
   88cce:	4788      	blx	r1
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
   88cd0:	f641 400c 	movw	r0, #7180	; 0x1c0c
   88cd4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88cd8:	f04f 0200 	mov.w	r2, #0
   88cdc:	7002      	strb	r2, [r0, #0]
   88cde:	7042      	strb	r2, [r0, #1]
   88ce0:	7082      	strb	r2, [r0, #2]
   88ce2:	70c2      	strb	r2, [r0, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   88ce4:	7104      	strb	r4, [r0, #4]

	// Initialize the sleep manager
	sleepmgr_init();

	// Board initialization
	sysclk_init();
   88ce6:	f244 1525 	movw	r5, #16677	; 0x4125
   88cea:	f2c0 0508 	movt	r5, #8
   88cee:	47a8      	blx	r5
	init_board();
   88cf0:	f641 061d 	movw	r6, #6173	; 0x181d
   88cf4:	f2c0 0608 	movt	r6, #8
   88cf8:	47b0      	blx	r6
	init_pwm();
   88cfa:	f641 2739 	movw	r7, #6713	; 0x1a39
   88cfe:	f2c0 0708 	movt	r7, #8
   88d02:	47b8      	blx	r7
	init_i2c();
   88d04:	f641 14e9 	movw	r4, #6633	; 0x19e9
   88d08:	f2c0 0408 	movt	r4, #8
   88d0c:	47a0      	blx	r4

	// Module initialization	
	init_module_peripherals_bp();
   88d0e:	f641 13dd 	movw	r3, #6621	; 0x19dd
   88d12:	f2c0 0308 	movt	r3, #8
   88d16:	4798      	blx	r3

	/* Initialize SD MMC stack */
	delay_ms(200);
   88d18:	f44f 409f 	mov.w	r0, #20352	; 0x4f80
   88d1c:	f2c0 0012 	movt	r0, #18
   88d20:	f240 0101 	movw	r1, #1
   88d24:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88d28:	4788      	blx	r1
	sd_mmc_init();
   88d2a:	f240 4069 	movw	r0, #1129	; 0x469
   88d2e:	f2c0 0008 	movt	r0, #8
   88d32:	4780      	blx	r0

	// Start USB stack to authorize VBus monitoring
	udc_start();
   88d34:	f645 3211 	movw	r2, #23313	; 0x5b11
   88d38:	f2c0 0208 	movt	r2, #8
   88d3c:	4790      	blx	r2
	
	// Init SCPI parser
    console_init();
   88d3e:	f643 6565 	movw	r5, #15973	; 0x3e65
   88d42:	f2c0 0508 	movt	r5, #8
   88d46:	47a8      	blx	r5
	
    // Enable 12V
    enable_12v();
   88d48:	f641 36b9 	movw	r6, #7097	; 0x1bb9
   88d4c:	f2c0 0608 	movt	r6, #8
   88d50:	47b0      	blx	r6
	init_module_peripherals_ap();
   88d52:	f641 17e1 	movw	r7, #6625	; 0x19e1
   88d56:	f2c0 0708 	movt	r7, #8
   88d5a:	47b8      	blx	r7
	
	while (true) 
	{
		console_process();
   88d5c:	f643 667d 	movw	r6, #15997	; 0x3e7d
   88d60:	f2c0 0608 	movt	r6, #8
		
		if((get_ok_12v_status() == RETURN_OK) && (last_ok_12v_state == false))
   88d64:	f641 34a9 	movw	r4, #7081	; 0x1ba9
   88d68:	f2c0 0408 	movt	r4, #8
   88d6c:	f241 6510 	movw	r5, #5648	; 0x1610
   88d70:	f2c2 0507 	movt	r5, #8199	; 0x2007
		{
			set_user_led_colour(0, 100, 0);
   88d74:	f641 3751 	movw	r7, #6993	; 0x1b51
   88d78:	f2c0 0708 	movt	r7, #8
    enable_12v();
	init_module_peripherals_ap();
	
	while (true) 
	{
		console_process();
   88d7c:	47b0      	blx	r6
		
		if((get_ok_12v_status() == RETURN_OK) && (last_ok_12v_state == false))
   88d7e:	47a0      	blx	r4
   88d80:	2801      	cmp	r0, #1
   88d82:	d10b      	bne.n	88d9c <main+0xf4>
   88d84:	782b      	ldrb	r3, [r5, #0]
   88d86:	b94b      	cbnz	r3, 88d9c <main+0xf4>
		{
			set_user_led_colour(0, 100, 0);
   88d88:	f04f 0000 	mov.w	r0, #0
   88d8c:	f04f 0164 	mov.w	r1, #100	; 0x64
   88d90:	4602      	mov	r2, r0
   88d92:	47b8      	blx	r7
			last_ok_12v_state = true;
   88d94:	f04f 0301 	mov.w	r3, #1
   88d98:	702b      	strb	r3, [r5, #0]
   88d9a:	e00e      	b.n	88dba <main+0x112>
		}
		else if((get_ok_12v_status() == RETURN_NOK) && (last_ok_12v_state == true))
   88d9c:	47a0      	blx	r4
   88d9e:	b960      	cbnz	r0, 88dba <main+0x112>
   88da0:	7829      	ldrb	r1, [r5, #0]
   88da2:	b151      	cbz	r1, 88dba <main+0x112>
		{
			set_user_led_colour(0, 0, 0);
   88da4:	4601      	mov	r1, r0
   88da6:	4602      	mov	r2, r0
   88da8:	47b8      	blx	r7
			deinit_module_peripherals();
   88daa:	f641 10e5 	movw	r0, #6629	; 0x19e5
   88dae:	f2c0 0008 	movt	r0, #8
   88db2:	4780      	blx	r0
			last_ok_12v_state = false;
   88db4:	f04f 0200 	mov.w	r2, #0
   88db8:	702a      	strb	r2, [r5, #0]
		}		

		if (main_b_msc_enable) 
   88dba:	f241 6111 	movw	r1, #5649	; 0x1611
   88dbe:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88dc2:	7808      	ldrb	r0, [r1, #0]
   88dc4:	2800      	cmp	r0, #0
   88dc6:	d0d9      	beq.n	88d7c <main+0xd4>
		{
			if (!udi_msc_process_trans()) 
   88dc8:	f245 726d 	movw	r2, #22381	; 0x576d
   88dcc:	f2c0 0208 	movt	r2, #8
   88dd0:	4790      	blx	r2
   88dd2:	e7d3      	b.n	88d7c <main+0xd4>

00088dd4 <round>:
   88dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88dd6:	f3c1 570a 	ubfx	r7, r1, #20, #11
   88dda:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
   88dde:	2e13      	cmp	r6, #19
   88de0:	4602      	mov	r2, r0
   88de2:	460b      	mov	r3, r1
   88de4:	4604      	mov	r4, r0
   88de6:	460d      	mov	r5, r1
   88de8:	dc18      	bgt.n	88e1c <round+0x48>
   88dea:	2e00      	cmp	r6, #0
   88dec:	da08      	bge.n	88e00 <round+0x2c>
   88dee:	1c73      	adds	r3, r6, #1
   88df0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   88df4:	d130      	bne.n	88e58 <round+0x84>
   88df6:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
   88dfa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   88dfe:	e02b      	b.n	88e58 <round+0x84>
   88e00:	4818      	ldr	r0, [pc, #96]	; (88e64 <round+0x90>)
   88e02:	fa40 f006 	asr.w	r0, r0, r6
   88e06:	4208      	tst	r0, r1
   88e08:	d100      	bne.n	88e0c <round+0x38>
   88e0a:	b342      	cbz	r2, 88e5e <round+0x8a>
   88e0c:	f44f 2400 	mov.w	r4, #524288	; 0x80000
   88e10:	fa44 f606 	asr.w	r6, r4, r6
   88e14:	19ad      	adds	r5, r5, r6
   88e16:	ea25 0500 	bic.w	r5, r5, r0
   88e1a:	e01d      	b.n	88e58 <round+0x84>
   88e1c:	2e33      	cmp	r6, #51	; 0x33
   88e1e:	dd07      	ble.n	88e30 <round+0x5c>
   88e20:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   88e24:	d11b      	bne.n	88e5e <round+0x8a>
   88e26:	f000 f825 	bl	88e74 <__adddf3>
   88e2a:	4602      	mov	r2, r0
   88e2c:	460b      	mov	r3, r1
   88e2e:	e016      	b.n	88e5e <round+0x8a>
   88e30:	f2a7 4113 	subw	r1, r7, #1043	; 0x413
   88e34:	f04f 30ff 	mov.w	r0, #4294967295
   88e38:	fa20 f101 	lsr.w	r1, r0, r1
   88e3c:	4211      	tst	r1, r2
   88e3e:	d00e      	beq.n	88e5e <round+0x8a>
   88e40:	f5c7 6786 	rsb	r7, r7, #1072	; 0x430
   88e44:	2301      	movs	r3, #1
   88e46:	1cba      	adds	r2, r7, #2
   88e48:	fa03 f702 	lsl.w	r7, r3, r2
   88e4c:	193c      	adds	r4, r7, r4
   88e4e:	bf28      	it	cs
   88e50:	18ed      	addcs	r5, r5, r3
   88e52:	ea24 0401 	bic.w	r4, r4, r1
   88e56:	e000      	b.n	88e5a <round+0x86>
   88e58:	2400      	movs	r4, #0
   88e5a:	462b      	mov	r3, r5
   88e5c:	4622      	mov	r2, r4
   88e5e:	4610      	mov	r0, r2
   88e60:	4619      	mov	r1, r3
   88e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88e64:	000fffff 	.word	0x000fffff

00088e68 <__aeabi_drsub>:
   88e68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   88e6c:	e002      	b.n	88e74 <__adddf3>
   88e6e:	bf00      	nop

00088e70 <__aeabi_dsub>:
   88e70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00088e74 <__adddf3>:
   88e74:	b530      	push	{r4, r5, lr}
   88e76:	ea4f 0441 	mov.w	r4, r1, lsl #1
   88e7a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   88e7e:	ea94 0f05 	teq	r4, r5
   88e82:	bf08      	it	eq
   88e84:	ea90 0f02 	teqeq	r0, r2
   88e88:	bf1f      	itttt	ne
   88e8a:	ea54 0c00 	orrsne.w	ip, r4, r0
   88e8e:	ea55 0c02 	orrsne.w	ip, r5, r2
   88e92:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   88e96:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   88e9a:	f000 80e2 	beq.w	89062 <__adddf3+0x1ee>
   88e9e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   88ea2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   88ea6:	bfb8      	it	lt
   88ea8:	426d      	neglt	r5, r5
   88eaa:	dd0c      	ble.n	88ec6 <__adddf3+0x52>
   88eac:	442c      	add	r4, r5
   88eae:	ea80 0202 	eor.w	r2, r0, r2
   88eb2:	ea81 0303 	eor.w	r3, r1, r3
   88eb6:	ea82 0000 	eor.w	r0, r2, r0
   88eba:	ea83 0101 	eor.w	r1, r3, r1
   88ebe:	ea80 0202 	eor.w	r2, r0, r2
   88ec2:	ea81 0303 	eor.w	r3, r1, r3
   88ec6:	2d36      	cmp	r5, #54	; 0x36
   88ec8:	bf88      	it	hi
   88eca:	bd30      	pophi	{r4, r5, pc}
   88ecc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   88ed0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   88ed4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   88ed8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   88edc:	d002      	beq.n	88ee4 <__adddf3+0x70>
   88ede:	4240      	negs	r0, r0
   88ee0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   88ee4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   88ee8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   88eec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   88ef0:	d002      	beq.n	88ef8 <__adddf3+0x84>
   88ef2:	4252      	negs	r2, r2
   88ef4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   88ef8:	ea94 0f05 	teq	r4, r5
   88efc:	f000 80a7 	beq.w	8904e <__adddf3+0x1da>
   88f00:	f1a4 0401 	sub.w	r4, r4, #1
   88f04:	f1d5 0e20 	rsbs	lr, r5, #32
   88f08:	db0d      	blt.n	88f26 <__adddf3+0xb2>
   88f0a:	fa02 fc0e 	lsl.w	ip, r2, lr
   88f0e:	fa22 f205 	lsr.w	r2, r2, r5
   88f12:	1880      	adds	r0, r0, r2
   88f14:	f141 0100 	adc.w	r1, r1, #0
   88f18:	fa03 f20e 	lsl.w	r2, r3, lr
   88f1c:	1880      	adds	r0, r0, r2
   88f1e:	fa43 f305 	asr.w	r3, r3, r5
   88f22:	4159      	adcs	r1, r3
   88f24:	e00e      	b.n	88f44 <__adddf3+0xd0>
   88f26:	f1a5 0520 	sub.w	r5, r5, #32
   88f2a:	f10e 0e20 	add.w	lr, lr, #32
   88f2e:	2a01      	cmp	r2, #1
   88f30:	fa03 fc0e 	lsl.w	ip, r3, lr
   88f34:	bf28      	it	cs
   88f36:	f04c 0c02 	orrcs.w	ip, ip, #2
   88f3a:	fa43 f305 	asr.w	r3, r3, r5
   88f3e:	18c0      	adds	r0, r0, r3
   88f40:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   88f44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   88f48:	d507      	bpl.n	88f5a <__adddf3+0xe6>
   88f4a:	f04f 0e00 	mov.w	lr, #0
   88f4e:	f1dc 0c00 	rsbs	ip, ip, #0
   88f52:	eb7e 0000 	sbcs.w	r0, lr, r0
   88f56:	eb6e 0101 	sbc.w	r1, lr, r1
   88f5a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   88f5e:	d31b      	bcc.n	88f98 <__adddf3+0x124>
   88f60:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   88f64:	d30c      	bcc.n	88f80 <__adddf3+0x10c>
   88f66:	0849      	lsrs	r1, r1, #1
   88f68:	ea5f 0030 	movs.w	r0, r0, rrx
   88f6c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   88f70:	f104 0401 	add.w	r4, r4, #1
   88f74:	ea4f 5244 	mov.w	r2, r4, lsl #21
   88f78:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   88f7c:	f080 809a 	bcs.w	890b4 <__adddf3+0x240>
   88f80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   88f84:	bf08      	it	eq
   88f86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   88f8a:	f150 0000 	adcs.w	r0, r0, #0
   88f8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   88f92:	ea41 0105 	orr.w	r1, r1, r5
   88f96:	bd30      	pop	{r4, r5, pc}
   88f98:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   88f9c:	4140      	adcs	r0, r0
   88f9e:	eb41 0101 	adc.w	r1, r1, r1
   88fa2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   88fa6:	f1a4 0401 	sub.w	r4, r4, #1
   88faa:	d1e9      	bne.n	88f80 <__adddf3+0x10c>
   88fac:	f091 0f00 	teq	r1, #0
   88fb0:	bf04      	itt	eq
   88fb2:	4601      	moveq	r1, r0
   88fb4:	2000      	moveq	r0, #0
   88fb6:	fab1 f381 	clz	r3, r1
   88fba:	bf08      	it	eq
   88fbc:	3320      	addeq	r3, #32
   88fbe:	f1a3 030b 	sub.w	r3, r3, #11
   88fc2:	f1b3 0220 	subs.w	r2, r3, #32
   88fc6:	da0c      	bge.n	88fe2 <__adddf3+0x16e>
   88fc8:	320c      	adds	r2, #12
   88fca:	dd08      	ble.n	88fde <__adddf3+0x16a>
   88fcc:	f102 0c14 	add.w	ip, r2, #20
   88fd0:	f1c2 020c 	rsb	r2, r2, #12
   88fd4:	fa01 f00c 	lsl.w	r0, r1, ip
   88fd8:	fa21 f102 	lsr.w	r1, r1, r2
   88fdc:	e00c      	b.n	88ff8 <__adddf3+0x184>
   88fde:	f102 0214 	add.w	r2, r2, #20
   88fe2:	bfd8      	it	le
   88fe4:	f1c2 0c20 	rsble	ip, r2, #32
   88fe8:	fa01 f102 	lsl.w	r1, r1, r2
   88fec:	fa20 fc0c 	lsr.w	ip, r0, ip
   88ff0:	bfdc      	itt	le
   88ff2:	ea41 010c 	orrle.w	r1, r1, ip
   88ff6:	4090      	lslle	r0, r2
   88ff8:	1ae4      	subs	r4, r4, r3
   88ffa:	bfa2      	ittt	ge
   88ffc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   89000:	4329      	orrge	r1, r5
   89002:	bd30      	popge	{r4, r5, pc}
   89004:	ea6f 0404 	mvn.w	r4, r4
   89008:	3c1f      	subs	r4, #31
   8900a:	da1c      	bge.n	89046 <__adddf3+0x1d2>
   8900c:	340c      	adds	r4, #12
   8900e:	dc0e      	bgt.n	8902e <__adddf3+0x1ba>
   89010:	f104 0414 	add.w	r4, r4, #20
   89014:	f1c4 0220 	rsb	r2, r4, #32
   89018:	fa20 f004 	lsr.w	r0, r0, r4
   8901c:	fa01 f302 	lsl.w	r3, r1, r2
   89020:	ea40 0003 	orr.w	r0, r0, r3
   89024:	fa21 f304 	lsr.w	r3, r1, r4
   89028:	ea45 0103 	orr.w	r1, r5, r3
   8902c:	bd30      	pop	{r4, r5, pc}
   8902e:	f1c4 040c 	rsb	r4, r4, #12
   89032:	f1c4 0220 	rsb	r2, r4, #32
   89036:	fa20 f002 	lsr.w	r0, r0, r2
   8903a:	fa01 f304 	lsl.w	r3, r1, r4
   8903e:	ea40 0003 	orr.w	r0, r0, r3
   89042:	4629      	mov	r1, r5
   89044:	bd30      	pop	{r4, r5, pc}
   89046:	fa21 f004 	lsr.w	r0, r1, r4
   8904a:	4629      	mov	r1, r5
   8904c:	bd30      	pop	{r4, r5, pc}
   8904e:	f094 0f00 	teq	r4, #0
   89052:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   89056:	bf06      	itte	eq
   89058:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8905c:	3401      	addeq	r4, #1
   8905e:	3d01      	subne	r5, #1
   89060:	e74e      	b.n	88f00 <__adddf3+0x8c>
   89062:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   89066:	bf18      	it	ne
   89068:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8906c:	d029      	beq.n	890c2 <__adddf3+0x24e>
   8906e:	ea94 0f05 	teq	r4, r5
   89072:	bf08      	it	eq
   89074:	ea90 0f02 	teqeq	r0, r2
   89078:	d005      	beq.n	89086 <__adddf3+0x212>
   8907a:	ea54 0c00 	orrs.w	ip, r4, r0
   8907e:	bf04      	itt	eq
   89080:	4619      	moveq	r1, r3
   89082:	4610      	moveq	r0, r2
   89084:	bd30      	pop	{r4, r5, pc}
   89086:	ea91 0f03 	teq	r1, r3
   8908a:	bf1e      	ittt	ne
   8908c:	2100      	movne	r1, #0
   8908e:	2000      	movne	r0, #0
   89090:	bd30      	popne	{r4, r5, pc}
   89092:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   89096:	d105      	bne.n	890a4 <__adddf3+0x230>
   89098:	0040      	lsls	r0, r0, #1
   8909a:	4149      	adcs	r1, r1
   8909c:	bf28      	it	cs
   8909e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   890a2:	bd30      	pop	{r4, r5, pc}
   890a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   890a8:	bf3c      	itt	cc
   890aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   890ae:	bd30      	popcc	{r4, r5, pc}
   890b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   890b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   890b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   890bc:	f04f 0000 	mov.w	r0, #0
   890c0:	bd30      	pop	{r4, r5, pc}
   890c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   890c6:	bf1a      	itte	ne
   890c8:	4619      	movne	r1, r3
   890ca:	4610      	movne	r0, r2
   890cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   890d0:	bf1c      	itt	ne
   890d2:	460b      	movne	r3, r1
   890d4:	4602      	movne	r2, r0
   890d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   890da:	bf06      	itte	eq
   890dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   890e0:	ea91 0f03 	teqeq	r1, r3
   890e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   890e8:	bd30      	pop	{r4, r5, pc}
   890ea:	bf00      	nop

000890ec <__aeabi_ui2d>:
   890ec:	f090 0f00 	teq	r0, #0
   890f0:	bf04      	itt	eq
   890f2:	2100      	moveq	r1, #0
   890f4:	4770      	bxeq	lr
   890f6:	b530      	push	{r4, r5, lr}
   890f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   890fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   89100:	f04f 0500 	mov.w	r5, #0
   89104:	f04f 0100 	mov.w	r1, #0
   89108:	e750      	b.n	88fac <__adddf3+0x138>
   8910a:	bf00      	nop

0008910c <__aeabi_i2d>:
   8910c:	f090 0f00 	teq	r0, #0
   89110:	bf04      	itt	eq
   89112:	2100      	moveq	r1, #0
   89114:	4770      	bxeq	lr
   89116:	b530      	push	{r4, r5, lr}
   89118:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8911c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   89120:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   89124:	bf48      	it	mi
   89126:	4240      	negmi	r0, r0
   89128:	f04f 0100 	mov.w	r1, #0
   8912c:	e73e      	b.n	88fac <__adddf3+0x138>
   8912e:	bf00      	nop

00089130 <__aeabi_f2d>:
   89130:	0042      	lsls	r2, r0, #1
   89132:	ea4f 01e2 	mov.w	r1, r2, asr #3
   89136:	ea4f 0131 	mov.w	r1, r1, rrx
   8913a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8913e:	bf1f      	itttt	ne
   89140:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   89144:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   89148:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8914c:	4770      	bxne	lr
   8914e:	f092 0f00 	teq	r2, #0
   89152:	bf14      	ite	ne
   89154:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   89158:	4770      	bxeq	lr
   8915a:	b530      	push	{r4, r5, lr}
   8915c:	f44f 7460 	mov.w	r4, #896	; 0x380
   89160:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   89164:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   89168:	e720      	b.n	88fac <__adddf3+0x138>
   8916a:	bf00      	nop

0008916c <__aeabi_ul2d>:
   8916c:	ea50 0201 	orrs.w	r2, r0, r1
   89170:	bf08      	it	eq
   89172:	4770      	bxeq	lr
   89174:	b530      	push	{r4, r5, lr}
   89176:	f04f 0500 	mov.w	r5, #0
   8917a:	e00a      	b.n	89192 <__aeabi_l2d+0x16>

0008917c <__aeabi_l2d>:
   8917c:	ea50 0201 	orrs.w	r2, r0, r1
   89180:	bf08      	it	eq
   89182:	4770      	bxeq	lr
   89184:	b530      	push	{r4, r5, lr}
   89186:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8918a:	d502      	bpl.n	89192 <__aeabi_l2d+0x16>
   8918c:	4240      	negs	r0, r0
   8918e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   89192:	f44f 6480 	mov.w	r4, #1024	; 0x400
   89196:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8919a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8919e:	f43f aedc 	beq.w	88f5a <__adddf3+0xe6>
   891a2:	f04f 0203 	mov.w	r2, #3
   891a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   891aa:	bf18      	it	ne
   891ac:	3203      	addne	r2, #3
   891ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   891b2:	bf18      	it	ne
   891b4:	3203      	addne	r2, #3
   891b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   891ba:	f1c2 0320 	rsb	r3, r2, #32
   891be:	fa00 fc03 	lsl.w	ip, r0, r3
   891c2:	fa20 f002 	lsr.w	r0, r0, r2
   891c6:	fa01 fe03 	lsl.w	lr, r1, r3
   891ca:	ea40 000e 	orr.w	r0, r0, lr
   891ce:	fa21 f102 	lsr.w	r1, r1, r2
   891d2:	4414      	add	r4, r2
   891d4:	e6c1      	b.n	88f5a <__adddf3+0xe6>
   891d6:	bf00      	nop

000891d8 <__aeabi_d2uiz>:
   891d8:	004a      	lsls	r2, r1, #1
   891da:	d211      	bcs.n	89200 <__aeabi_d2uiz+0x28>
   891dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   891e0:	d211      	bcs.n	89206 <__aeabi_d2uiz+0x2e>
   891e2:	d50d      	bpl.n	89200 <__aeabi_d2uiz+0x28>
   891e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   891e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   891ec:	d40e      	bmi.n	8920c <__aeabi_d2uiz+0x34>
   891ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   891f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   891f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   891fa:	fa23 f002 	lsr.w	r0, r3, r2
   891fe:	4770      	bx	lr
   89200:	f04f 0000 	mov.w	r0, #0
   89204:	4770      	bx	lr
   89206:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8920a:	d102      	bne.n	89212 <__aeabi_d2uiz+0x3a>
   8920c:	f04f 30ff 	mov.w	r0, #4294967295
   89210:	4770      	bx	lr
   89212:	f04f 0000 	mov.w	r0, #0
   89216:	4770      	bx	lr

00089218 <__register_exitproc>:
   89218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8921c:	4698      	mov	r8, r3
   8921e:	4b23      	ldr	r3, [pc, #140]	; (892ac <__register_exitproc+0x94>)
   89220:	4606      	mov	r6, r0
   89222:	681c      	ldr	r4, [r3, #0]
   89224:	460f      	mov	r7, r1
   89226:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   8922a:	4691      	mov	r9, r2
   8922c:	b918      	cbnz	r0, 89236 <__register_exitproc+0x1e>
   8922e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   89232:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   89236:	6841      	ldr	r1, [r0, #4]
   89238:	291f      	cmp	r1, #31
   8923a:	dd16      	ble.n	8926a <__register_exitproc+0x52>
   8923c:	481c      	ldr	r0, [pc, #112]	; (892b0 <__register_exitproc+0x98>)
   8923e:	b918      	cbnz	r0, 89248 <__register_exitproc+0x30>
   89240:	f04f 30ff 	mov.w	r0, #4294967295
   89244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   89248:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8924c:	f3af 8000 	nop.w
   89250:	2800      	cmp	r0, #0
   89252:	d0f5      	beq.n	89240 <__register_exitproc+0x28>
   89254:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   89258:	2500      	movs	r5, #0
   8925a:	6045      	str	r5, [r0, #4]
   8925c:	6002      	str	r2, [r0, #0]
   8925e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   89262:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   89266:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   8926a:	b1b6      	cbz	r6, 8929a <__register_exitproc+0x82>
   8926c:	6844      	ldr	r4, [r0, #4]
   8926e:	2201      	movs	r2, #1
   89270:	fa02 f204 	lsl.w	r2, r2, r4
   89274:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   89278:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   8927c:	4311      	orrs	r1, r2
   8927e:	2e02      	cmp	r6, #2
   89280:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   89284:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   89288:	461c      	mov	r4, r3
   8928a:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   8928e:	d104      	bne.n	8929a <__register_exitproc+0x82>
   89290:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   89294:	431a      	orrs	r2, r3
   89296:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   8929a:	6841      	ldr	r1, [r0, #4]
   8929c:	1c8b      	adds	r3, r1, #2
   8929e:	1c4a      	adds	r2, r1, #1
   892a0:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   892a4:	6042      	str	r2, [r0, #4]
   892a6:	2000      	movs	r0, #0
   892a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   892ac:	0008c0dc 	.word	0x0008c0dc
   892b0:	00000000 	.word	0x00000000

000892b4 <__libc_fini_array>:
   892b4:	b570      	push	{r4, r5, r6, lr}
   892b6:	4b08      	ldr	r3, [pc, #32]	; (892d8 <__libc_fini_array+0x24>)
   892b8:	4c08      	ldr	r4, [pc, #32]	; (892dc <__libc_fini_array+0x28>)
   892ba:	2500      	movs	r5, #0
   892bc:	1ae0      	subs	r0, r4, r3
   892be:	1084      	asrs	r4, r0, #2
   892c0:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   892c4:	3d04      	subs	r5, #4
   892c6:	b11c      	cbz	r4, 892d0 <__libc_fini_array+0x1c>
   892c8:	5972      	ldr	r2, [r6, r5]
   892ca:	4790      	blx	r2
   892cc:	3c01      	subs	r4, #1
   892ce:	e7f9      	b.n	892c4 <__libc_fini_array+0x10>
   892d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   892d4:	f002 bf40 	b.w	8c158 <_fini>
   892d8:	0008c164 	.word	0x0008c164
   892dc:	0008c168 	.word	0x0008c168

000892e0 <__libc_init_array>:
   892e0:	b538      	push	{r3, r4, r5, lr}
   892e2:	4d0e      	ldr	r5, [pc, #56]	; (8931c <__libc_init_array+0x3c>)
   892e4:	4b0e      	ldr	r3, [pc, #56]	; (89320 <__libc_init_array+0x40>)
   892e6:	2400      	movs	r4, #0
   892e8:	1ae8      	subs	r0, r5, r3
   892ea:	1085      	asrs	r5, r0, #2
   892ec:	42ac      	cmp	r4, r5
   892ee:	d005      	beq.n	892fc <__libc_init_array+0x1c>
   892f0:	490b      	ldr	r1, [pc, #44]	; (89320 <__libc_init_array+0x40>)
   892f2:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   892f6:	4790      	blx	r2
   892f8:	3401      	adds	r4, #1
   892fa:	e7f7      	b.n	892ec <__libc_init_array+0xc>
   892fc:	f002 ff22 	bl	8c144 <_init>
   89300:	4908      	ldr	r1, [pc, #32]	; (89324 <__libc_init_array+0x44>)
   89302:	4a09      	ldr	r2, [pc, #36]	; (89328 <__libc_init_array+0x48>)
   89304:	1a54      	subs	r4, r2, r1
   89306:	10a5      	asrs	r5, r4, #2
   89308:	2400      	movs	r4, #0
   8930a:	42ac      	cmp	r4, r5
   8930c:	d005      	beq.n	8931a <__libc_init_array+0x3a>
   8930e:	4b05      	ldr	r3, [pc, #20]	; (89324 <__libc_init_array+0x44>)
   89310:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   89314:	4780      	blx	r0
   89316:	3401      	adds	r4, #1
   89318:	e7f7      	b.n	8930a <__libc_init_array+0x2a>
   8931a:	bd38      	pop	{r3, r4, r5, pc}
   8931c:	0008c150 	.word	0x0008c150
   89320:	0008c150 	.word	0x0008c150
   89324:	0008c150 	.word	0x0008c150
   89328:	0008c158 	.word	0x0008c158

0008932c <memcpy>:
   8932c:	b510      	push	{r4, lr}
   8932e:	2300      	movs	r3, #0
   89330:	4293      	cmp	r3, r2
   89332:	d003      	beq.n	8933c <memcpy+0x10>
   89334:	5ccc      	ldrb	r4, [r1, r3]
   89336:	54c4      	strb	r4, [r0, r3]
   89338:	3301      	adds	r3, #1
   8933a:	e7f9      	b.n	89330 <memcpy+0x4>
   8933c:	bd10      	pop	{r4, pc}

0008933e <memmove>:
   8933e:	4281      	cmp	r1, r0
   89340:	b570      	push	{r4, r5, r6, lr}
   89342:	d20e      	bcs.n	89362 <memmove+0x24>
   89344:	188c      	adds	r4, r1, r2
   89346:	42a0      	cmp	r0, r4
   89348:	d20b      	bcs.n	89362 <memmove+0x24>
   8934a:	1885      	adds	r5, r0, r2
   8934c:	4613      	mov	r3, r2
   8934e:	f113 33ff 	adds.w	r3, r3, #4294967295
   89352:	d305      	bcc.n	89360 <memmove+0x22>
   89354:	4251      	negs	r1, r2
   89356:	1866      	adds	r6, r4, r1
   89358:	5cf6      	ldrb	r6, [r6, r3]
   8935a:	1869      	adds	r1, r5, r1
   8935c:	54ce      	strb	r6, [r1, r3]
   8935e:	e7f6      	b.n	8934e <memmove+0x10>
   89360:	bd70      	pop	{r4, r5, r6, pc}
   89362:	2300      	movs	r3, #0
   89364:	4293      	cmp	r3, r2
   89366:	d003      	beq.n	89370 <memmove+0x32>
   89368:	5ccc      	ldrb	r4, [r1, r3]
   8936a:	54c4      	strb	r4, [r0, r3]
   8936c:	3301      	adds	r3, #1
   8936e:	e7f9      	b.n	89364 <memmove+0x26>
   89370:	bd70      	pop	{r4, r5, r6, pc}
	...

00089374 <_snprintf_r>:
   89374:	b408      	push	{r3}
   89376:	b530      	push	{r4, r5, lr}
   89378:	1e14      	subs	r4, r2, #0
   8937a:	b09c      	sub	sp, #112	; 0x70
   8937c:	4605      	mov	r5, r0
   8937e:	da04      	bge.n	8938a <_snprintf_r+0x16>
   89380:	208b      	movs	r0, #139	; 0x8b
   89382:	6028      	str	r0, [r5, #0]
   89384:	f04f 30ff 	mov.w	r0, #4294967295
   89388:	e01e      	b.n	893c8 <_snprintf_r+0x54>
   8938a:	f44f 7302 	mov.w	r3, #520	; 0x208
   8938e:	f8ad 3014 	strh.w	r3, [sp, #20]
   89392:	9102      	str	r1, [sp, #8]
   89394:	9106      	str	r1, [sp, #24]
   89396:	d001      	beq.n	8939c <_snprintf_r+0x28>
   89398:	1e60      	subs	r0, r4, #1
   8939a:	e000      	b.n	8939e <_snprintf_r+0x2a>
   8939c:	4620      	mov	r0, r4
   8939e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   893a2:	ab20      	add	r3, sp, #128	; 0x80
   893a4:	9004      	str	r0, [sp, #16]
   893a6:	9007      	str	r0, [sp, #28]
   893a8:	f8ad 1016 	strh.w	r1, [sp, #22]
   893ac:	4628      	mov	r0, r5
   893ae:	a902      	add	r1, sp, #8
   893b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   893b2:	9301      	str	r3, [sp, #4]
   893b4:	f000 f922 	bl	895fc <_svfprintf_r>
   893b8:	1c43      	adds	r3, r0, #1
   893ba:	da01      	bge.n	893c0 <_snprintf_r+0x4c>
   893bc:	228b      	movs	r2, #139	; 0x8b
   893be:	602a      	str	r2, [r5, #0]
   893c0:	b114      	cbz	r4, 893c8 <_snprintf_r+0x54>
   893c2:	9b02      	ldr	r3, [sp, #8]
   893c4:	2100      	movs	r1, #0
   893c6:	7019      	strb	r1, [r3, #0]
   893c8:	b01c      	add	sp, #112	; 0x70
   893ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   893ce:	b001      	add	sp, #4
   893d0:	4770      	bx	lr

000893d2 <snprintf>:
   893d2:	b40c      	push	{r2, r3}
   893d4:	b530      	push	{r4, r5, lr}
   893d6:	4b17      	ldr	r3, [pc, #92]	; (89434 <snprintf+0x62>)
   893d8:	1e0c      	subs	r4, r1, #0
   893da:	b09d      	sub	sp, #116	; 0x74
   893dc:	681d      	ldr	r5, [r3, #0]
   893de:	da04      	bge.n	893ea <snprintf+0x18>
   893e0:	208b      	movs	r0, #139	; 0x8b
   893e2:	6028      	str	r0, [r5, #0]
   893e4:	f04f 30ff 	mov.w	r0, #4294967295
   893e8:	e01e      	b.n	89428 <snprintf+0x56>
   893ea:	f44f 7102 	mov.w	r1, #520	; 0x208
   893ee:	f8ad 1014 	strh.w	r1, [sp, #20]
   893f2:	9002      	str	r0, [sp, #8]
   893f4:	9006      	str	r0, [sp, #24]
   893f6:	d001      	beq.n	893fc <snprintf+0x2a>
   893f8:	1e60      	subs	r0, r4, #1
   893fa:	e000      	b.n	893fe <snprintf+0x2c>
   893fc:	4620      	mov	r0, r4
   893fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   89402:	9004      	str	r0, [sp, #16]
   89404:	9007      	str	r0, [sp, #28]
   89406:	f8ad 2016 	strh.w	r2, [sp, #22]
   8940a:	ab21      	add	r3, sp, #132	; 0x84
   8940c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   8940e:	4628      	mov	r0, r5
   89410:	a902      	add	r1, sp, #8
   89412:	9301      	str	r3, [sp, #4]
   89414:	f000 f8f2 	bl	895fc <_svfprintf_r>
   89418:	1c42      	adds	r2, r0, #1
   8941a:	da01      	bge.n	89420 <snprintf+0x4e>
   8941c:	238b      	movs	r3, #139	; 0x8b
   8941e:	602b      	str	r3, [r5, #0]
   89420:	b114      	cbz	r4, 89428 <snprintf+0x56>
   89422:	9a02      	ldr	r2, [sp, #8]
   89424:	2100      	movs	r1, #0
   89426:	7011      	strb	r1, [r2, #0]
   89428:	b01d      	add	sp, #116	; 0x74
   8942a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8942e:	b002      	add	sp, #8
   89430:	4770      	bx	lr
   89432:	bf00      	nop
   89434:	200702a0 	.word	0x200702a0

00089438 <strlen>:
   89438:	4603      	mov	r3, r0
   8943a:	f813 2b01 	ldrb.w	r2, [r3], #1
   8943e:	2a00      	cmp	r2, #0
   89440:	d1fb      	bne.n	8943a <strlen+0x2>
   89442:	1a18      	subs	r0, r3, r0
   89444:	3801      	subs	r0, #1
   89446:	4770      	bx	lr

00089448 <strncasecmp>:
   89448:	4b0f      	ldr	r3, [pc, #60]	; (89488 <strncasecmp+0x40>)
   8944a:	b5f0      	push	{r4, r5, r6, r7, lr}
   8944c:	681e      	ldr	r6, [r3, #0]
   8944e:	2300      	movs	r3, #0
   89450:	4293      	cmp	r3, r2
   89452:	d015      	beq.n	89480 <strncasecmp+0x38>
   89454:	5cc5      	ldrb	r5, [r0, r3]
   89456:	1974      	adds	r4, r6, r5
   89458:	7867      	ldrb	r7, [r4, #1]
   8945a:	f007 0403 	and.w	r4, r7, #3
   8945e:	2c01      	cmp	r4, #1
   89460:	5ccc      	ldrb	r4, [r1, r3]
   89462:	bf08      	it	eq
   89464:	3520      	addeq	r5, #32
   89466:	1937      	adds	r7, r6, r4
   89468:	787f      	ldrb	r7, [r7, #1]
   8946a:	f007 0703 	and.w	r7, r7, #3
   8946e:	2f01      	cmp	r7, #1
   89470:	bf08      	it	eq
   89472:	3420      	addeq	r4, #32
   89474:	1b2d      	subs	r5, r5, r4
   89476:	d104      	bne.n	89482 <strncasecmp+0x3a>
   89478:	3301      	adds	r3, #1
   8947a:	2c00      	cmp	r4, #0
   8947c:	d1e8      	bne.n	89450 <strncasecmp+0x8>
   8947e:	e000      	b.n	89482 <strncasecmp+0x3a>
   89480:	2500      	movs	r5, #0
   89482:	4628      	mov	r0, r5
   89484:	bdf0      	pop	{r4, r5, r6, r7, pc}
   89486:	bf00      	nop
   89488:	20070298 	.word	0x20070298

0008948c <strncmp>:
   8948c:	b570      	push	{r4, r5, r6, lr}
   8948e:	b192      	cbz	r2, 894b6 <strncmp+0x2a>
   89490:	460b      	mov	r3, r1
   89492:	4605      	mov	r5, r0
   89494:	b91a      	cbnz	r2, 8949e <strncmp+0x12>
   89496:	7828      	ldrb	r0, [r5, #0]
   89498:	7819      	ldrb	r1, [r3, #0]
   8949a:	1a40      	subs	r0, r0, r1
   8949c:	bd70      	pop	{r4, r5, r6, pc}
   8949e:	f810 6b01 	ldrb.w	r6, [r0], #1
   894a2:	781c      	ldrb	r4, [r3, #0]
   894a4:	3101      	adds	r1, #1
   894a6:	42b4      	cmp	r4, r6
   894a8:	d1f5      	bne.n	89496 <strncmp+0xa>
   894aa:	2a01      	cmp	r2, #1
   894ac:	d0f3      	beq.n	89496 <strncmp+0xa>
   894ae:	3a01      	subs	r2, #1
   894b0:	2c00      	cmp	r4, #0
   894b2:	d1ed      	bne.n	89490 <strncmp+0x4>
   894b4:	e7ef      	b.n	89496 <strncmp+0xa>
   894b6:	4610      	mov	r0, r2
   894b8:	bd70      	pop	{r4, r5, r6, pc}

000894ba <strnlen>:
   894ba:	b510      	push	{r4, lr}
   894bc:	4603      	mov	r3, r0
   894be:	1841      	adds	r1, r0, r1
   894c0:	428b      	cmp	r3, r1
   894c2:	461a      	mov	r2, r3
   894c4:	d101      	bne.n	894ca <strnlen+0x10>
   894c6:	1a10      	subs	r0, r2, r0
   894c8:	bd10      	pop	{r4, pc}
   894ca:	7814      	ldrb	r4, [r2, #0]
   894cc:	3301      	adds	r3, #1
   894ce:	2c00      	cmp	r4, #0
   894d0:	d1f6      	bne.n	894c0 <strnlen+0x6>
   894d2:	e7f8      	b.n	894c6 <strnlen+0xc>

000894d4 <_strtol_r>:
   894d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   894d8:	9001      	str	r0, [sp, #4]
   894da:	4840      	ldr	r0, [pc, #256]	; (895dc <_strtol_r+0x108>)
   894dc:	f8d0 9000 	ldr.w	r9, [r0]
   894e0:	4608      	mov	r0, r1
   894e2:	4604      	mov	r4, r0
   894e4:	f814 5b01 	ldrb.w	r5, [r4], #1
   894e8:	eb09 0605 	add.w	r6, r9, r5
   894ec:	7877      	ldrb	r7, [r6, #1]
   894ee:	4620      	mov	r0, r4
   894f0:	f007 0608 	and.w	r6, r7, #8
   894f4:	b2f7      	uxtb	r7, r6
   894f6:	2f00      	cmp	r7, #0
   894f8:	d1f3      	bne.n	894e2 <_strtol_r+0xe>
   894fa:	2d2d      	cmp	r5, #45	; 0x2d
   894fc:	d103      	bne.n	89506 <_strtol_r+0x32>
   894fe:	f814 5b01 	ldrb.w	r5, [r4], #1
   89502:	2701      	movs	r7, #1
   89504:	e004      	b.n	89510 <_strtol_r+0x3c>
   89506:	2d2b      	cmp	r5, #43	; 0x2b
   89508:	bf04      	itt	eq
   8950a:	4624      	moveq	r4, r4
   8950c:	f814 5b01 	ldrbeq.w	r5, [r4], #1
   89510:	2b00      	cmp	r3, #0
   89512:	d05c      	beq.n	895ce <_strtol_r+0xfa>
   89514:	2b10      	cmp	r3, #16
   89516:	d107      	bne.n	89528 <_strtol_r+0x54>
   89518:	2d30      	cmp	r5, #48	; 0x30
   8951a:	d105      	bne.n	89528 <_strtol_r+0x54>
   8951c:	7825      	ldrb	r5, [r4, #0]
   8951e:	2d78      	cmp	r5, #120	; 0x78
   89520:	d14e      	bne.n	895c0 <_strtol_r+0xec>
   89522:	7865      	ldrb	r5, [r4, #1]
   89524:	2310      	movs	r3, #16
   89526:	3402      	adds	r4, #2
   89528:	2f00      	cmp	r7, #0
   8952a:	bf0c      	ite	eq
   8952c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   89530:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   89534:	fbb0 faf3 	udiv	sl, r0, r3
   89538:	2600      	movs	r6, #0
   8953a:	fb03 081a 	mls	r8, r3, sl, r0
   8953e:	4630      	mov	r0, r6
   89540:	eb09 0c05 	add.w	ip, r9, r5
   89544:	f89c c001 	ldrb.w	ip, [ip, #1]
   89548:	f00c 0b04 	and.w	fp, ip, #4
   8954c:	fa5f fb8b 	uxtb.w	fp, fp
   89550:	f1bb 0f00 	cmp.w	fp, #0
   89554:	d001      	beq.n	8955a <_strtol_r+0x86>
   89556:	3d30      	subs	r5, #48	; 0x30
   89558:	e00b      	b.n	89572 <_strtol_r+0x9e>
   8955a:	f01c 0c03 	ands.w	ip, ip, #3
   8955e:	d01b      	beq.n	89598 <_strtol_r+0xc4>
   89560:	f1bc 0f01 	cmp.w	ip, #1
   89564:	bf14      	ite	ne
   89566:	f04f 0c57 	movne.w	ip, #87	; 0x57
   8956a:	f04f 0c37 	moveq.w	ip, #55	; 0x37
   8956e:	ebcc 0505 	rsb	r5, ip, r5
   89572:	429d      	cmp	r5, r3
   89574:	da10      	bge.n	89598 <_strtol_r+0xc4>
   89576:	f1b6 3fff 	cmp.w	r6, #4294967295
   8957a:	d00a      	beq.n	89592 <_strtol_r+0xbe>
   8957c:	4550      	cmp	r0, sl
   8957e:	d806      	bhi.n	8958e <_strtol_r+0xba>
   89580:	d101      	bne.n	89586 <_strtol_r+0xb2>
   89582:	4545      	cmp	r5, r8
   89584:	dc03      	bgt.n	8958e <_strtol_r+0xba>
   89586:	fb03 5000 	mla	r0, r3, r0, r5
   8958a:	2601      	movs	r6, #1
   8958c:	e001      	b.n	89592 <_strtol_r+0xbe>
   8958e:	f04f 36ff 	mov.w	r6, #4294967295
   89592:	f814 5b01 	ldrb.w	r5, [r4], #1
   89596:	e7d3      	b.n	89540 <_strtol_r+0x6c>
   89598:	1c73      	adds	r3, r6, #1
   8959a:	d10a      	bne.n	895b2 <_strtol_r+0xde>
   8959c:	2f00      	cmp	r7, #0
   8959e:	9901      	ldr	r1, [sp, #4]
   895a0:	bf0c      	ite	eq
   895a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   895a6:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   895aa:	2322      	movs	r3, #34	; 0x22
   895ac:	600b      	str	r3, [r1, #0]
   895ae:	b922      	cbnz	r2, 895ba <_strtol_r+0xe6>
   895b0:	e011      	b.n	895d6 <_strtol_r+0x102>
   895b2:	b107      	cbz	r7, 895b6 <_strtol_r+0xe2>
   895b4:	4240      	negs	r0, r0
   895b6:	b172      	cbz	r2, 895d6 <_strtol_r+0x102>
   895b8:	b106      	cbz	r6, 895bc <_strtol_r+0xe8>
   895ba:	1e61      	subs	r1, r4, #1
   895bc:	6011      	str	r1, [r2, #0]
   895be:	e00a      	b.n	895d6 <_strtol_r+0x102>
   895c0:	2d58      	cmp	r5, #88	; 0x58
   895c2:	d0ae      	beq.n	89522 <_strtol_r+0x4e>
   895c4:	2530      	movs	r5, #48	; 0x30
   895c6:	2b00      	cmp	r3, #0
   895c8:	d1ae      	bne.n	89528 <_strtol_r+0x54>
   895ca:	2308      	movs	r3, #8
   895cc:	e7ac      	b.n	89528 <_strtol_r+0x54>
   895ce:	2d30      	cmp	r5, #48	; 0x30
   895d0:	d0a4      	beq.n	8951c <_strtol_r+0x48>
   895d2:	230a      	movs	r3, #10
   895d4:	e7a8      	b.n	89528 <_strtol_r+0x54>
   895d6:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   895da:	bf00      	nop
   895dc:	20070298 	.word	0x20070298

000895e0 <strtol>:
   895e0:	b530      	push	{r4, r5, lr}
   895e2:	4613      	mov	r3, r2
   895e4:	4a04      	ldr	r2, [pc, #16]	; (895f8 <strtol+0x18>)
   895e6:	4605      	mov	r5, r0
   895e8:	460c      	mov	r4, r1
   895ea:	6810      	ldr	r0, [r2, #0]
   895ec:	4629      	mov	r1, r5
   895ee:	4622      	mov	r2, r4
   895f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   895f4:	f7ff bf6e 	b.w	894d4 <_strtol_r>
   895f8:	200702a0 	.word	0x200702a0

000895fc <_svfprintf_r>:
   895fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89600:	461e      	mov	r6, r3
   89602:	898b      	ldrh	r3, [r1, #12]
   89604:	4689      	mov	r9, r1
   89606:	f003 0180 	and.w	r1, r3, #128	; 0x80
   8960a:	4614      	mov	r4, r2
   8960c:	b20a      	sxth	r2, r1
   8960e:	b0a9      	sub	sp, #164	; 0xa4
   89610:	4683      	mov	fp, r0
   89612:	b19a      	cbz	r2, 8963c <_svfprintf_r+0x40>
   89614:	f8d9 3010 	ldr.w	r3, [r9, #16]
   89618:	b983      	cbnz	r3, 8963c <_svfprintf_r+0x40>
   8961a:	2140      	movs	r1, #64	; 0x40
   8961c:	f000 fcfe 	bl	8a01c <_malloc_r>
   89620:	f8c9 0000 	str.w	r0, [r9]
   89624:	f8c9 0010 	str.w	r0, [r9, #16]
   89628:	b928      	cbnz	r0, 89636 <_svfprintf_r+0x3a>
   8962a:	220c      	movs	r2, #12
   8962c:	f8cb 2000 	str.w	r2, [fp]
   89630:	f04f 30ff 	mov.w	r0, #4294967295
   89634:	e3da      	b.n	89dec <_svfprintf_r+0x7f0>
   89636:	2040      	movs	r0, #64	; 0x40
   89638:	f8c9 0014 	str.w	r0, [r9, #20]
   8963c:	2100      	movs	r1, #0
   8963e:	ad18      	add	r5, sp, #96	; 0x60
   89640:	950b      	str	r5, [sp, #44]	; 0x2c
   89642:	910d      	str	r1, [sp, #52]	; 0x34
   89644:	910c      	str	r1, [sp, #48]	; 0x30
   89646:	9401      	str	r4, [sp, #4]
   89648:	9105      	str	r1, [sp, #20]
   8964a:	9104      	str	r1, [sp, #16]
   8964c:	46a8      	mov	r8, r5
   8964e:	9b01      	ldr	r3, [sp, #4]
   89650:	461c      	mov	r4, r3
   89652:	f813 2b01 	ldrb.w	r2, [r3], #1
   89656:	b91a      	cbnz	r2, 89660 <_svfprintf_r+0x64>
   89658:	9801      	ldr	r0, [sp, #4]
   8965a:	1a25      	subs	r5, r4, r0
   8965c:	d103      	bne.n	89666 <_svfprintf_r+0x6a>
   8965e:	e01d      	b.n	8969c <_svfprintf_r+0xa0>
   89660:	2a25      	cmp	r2, #37	; 0x25
   89662:	d1f5      	bne.n	89650 <_svfprintf_r+0x54>
   89664:	e7f8      	b.n	89658 <_svfprintf_r+0x5c>
   89666:	9a01      	ldr	r2, [sp, #4]
   89668:	990d      	ldr	r1, [sp, #52]	; 0x34
   8966a:	e888 0024 	stmia.w	r8, {r2, r5}
   8966e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89670:	194b      	adds	r3, r1, r5
   89672:	1c50      	adds	r0, r2, #1
   89674:	2807      	cmp	r0, #7
   89676:	930d      	str	r3, [sp, #52]	; 0x34
   89678:	900c      	str	r0, [sp, #48]	; 0x30
   8967a:	dc02      	bgt.n	89682 <_svfprintf_r+0x86>
   8967c:	f108 0808 	add.w	r8, r8, #8
   89680:	e009      	b.n	89696 <_svfprintf_r+0x9a>
   89682:	4658      	mov	r0, fp
   89684:	4649      	mov	r1, r9
   89686:	aa0b      	add	r2, sp, #44	; 0x2c
   89688:	f001 f858 	bl	8a73c <__ssprint_r>
   8968c:	2800      	cmp	r0, #0
   8968e:	f040 83a2 	bne.w	89dd6 <_svfprintf_r+0x7da>
   89692:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89696:	9904      	ldr	r1, [sp, #16]
   89698:	194b      	adds	r3, r1, r5
   8969a:	9304      	str	r3, [sp, #16]
   8969c:	7822      	ldrb	r2, [r4, #0]
   8969e:	2a00      	cmp	r2, #0
   896a0:	f000 8392 	beq.w	89dc8 <_svfprintf_r+0x7cc>
   896a4:	2200      	movs	r2, #0
   896a6:	3401      	adds	r4, #1
   896a8:	9401      	str	r4, [sp, #4]
   896aa:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   896ae:	f04f 3cff 	mov.w	ip, #4294967295
   896b2:	9203      	str	r2, [sp, #12]
   896b4:	4617      	mov	r7, r2
   896b6:	9801      	ldr	r0, [sp, #4]
   896b8:	f810 3b01 	ldrb.w	r3, [r0], #1
   896bc:	9001      	str	r0, [sp, #4]
   896be:	2b63      	cmp	r3, #99	; 0x63
   896c0:	f000 80b3 	beq.w	8982a <_svfprintf_r+0x22e>
   896c4:	dc33      	bgt.n	8972e <_svfprintf_r+0x132>
   896c6:	2b39      	cmp	r3, #57	; 0x39
   896c8:	dc1a      	bgt.n	89700 <_svfprintf_r+0x104>
   896ca:	2b31      	cmp	r3, #49	; 0x31
   896cc:	f280 8091 	bge.w	897f2 <_svfprintf_r+0x1f6>
   896d0:	2b2b      	cmp	r3, #43	; 0x2b
   896d2:	d101      	bne.n	896d8 <_svfprintf_r+0xdc>
   896d4:	461a      	mov	r2, r3
   896d6:	e7ee      	b.n	896b6 <_svfprintf_r+0xba>
   896d8:	dc0a      	bgt.n	896f0 <_svfprintf_r+0xf4>
   896da:	2b23      	cmp	r3, #35	; 0x23
   896dc:	d055      	beq.n	8978a <_svfprintf_r+0x18e>
   896de:	2b2a      	cmp	r3, #42	; 0x2a
   896e0:	d056      	beq.n	89790 <_svfprintf_r+0x194>
   896e2:	2b20      	cmp	r3, #32
   896e4:	f040 81f5 	bne.w	89ad2 <_svfprintf_r+0x4d6>
   896e8:	2a00      	cmp	r2, #0
   896ea:	bf08      	it	eq
   896ec:	2220      	moveq	r2, #32
   896ee:	e7e2      	b.n	896b6 <_svfprintf_r+0xba>
   896f0:	2b2e      	cmp	r3, #46	; 0x2e
   896f2:	d058      	beq.n	897a6 <_svfprintf_r+0x1aa>
   896f4:	2b30      	cmp	r3, #48	; 0x30
   896f6:	d079      	beq.n	897ec <_svfprintf_r+0x1f0>
   896f8:	2b2d      	cmp	r3, #45	; 0x2d
   896fa:	f040 81ea 	bne.w	89ad2 <_svfprintf_r+0x4d6>
   896fe:	e04f      	b.n	897a0 <_svfprintf_r+0x1a4>
   89700:	2b4f      	cmp	r3, #79	; 0x4f
   89702:	f000 80de 	beq.w	898c2 <_svfprintf_r+0x2c6>
   89706:	dc07      	bgt.n	89718 <_svfprintf_r+0x11c>
   89708:	2b44      	cmp	r3, #68	; 0x44
   8970a:	f040 81e2 	bne.w	89ad2 <_svfprintf_r+0x4d6>
   8970e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   89712:	f047 0710 	orr.w	r7, r7, #16
   89716:	e090      	b.n	8983a <_svfprintf_r+0x23e>
   89718:	2b55      	cmp	r3, #85	; 0x55
   8971a:	f000 811f 	beq.w	8995c <_svfprintf_r+0x360>
   8971e:	2b58      	cmp	r3, #88	; 0x58
   89720:	f040 81d7 	bne.w	89ad2 <_svfprintf_r+0x4d6>
   89724:	4dae      	ldr	r5, [pc, #696]	; (899e0 <_svfprintf_r+0x3e4>)
   89726:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8972a:	9505      	str	r5, [sp, #20]
   8972c:	e130      	b.n	89990 <_svfprintf_r+0x394>
   8972e:	2b6f      	cmp	r3, #111	; 0x6f
   89730:	f000 80c9 	beq.w	898c6 <_svfprintf_r+0x2ca>
   89734:	dc10      	bgt.n	89758 <_svfprintf_r+0x15c>
   89736:	2b69      	cmp	r3, #105	; 0x69
   89738:	d024      	beq.n	89784 <_svfprintf_r+0x188>
   8973a:	dc07      	bgt.n	8974c <_svfprintf_r+0x150>
   8973c:	2b64      	cmp	r3, #100	; 0x64
   8973e:	d021      	beq.n	89784 <_svfprintf_r+0x188>
   89740:	2b68      	cmp	r3, #104	; 0x68
   89742:	f040 81c6 	bne.w	89ad2 <_svfprintf_r+0x4d6>
   89746:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   8974a:	e7b4      	b.n	896b6 <_svfprintf_r+0xba>
   8974c:	2b6c      	cmp	r3, #108	; 0x6c
   8974e:	d05f      	beq.n	89810 <_svfprintf_r+0x214>
   89750:	2b6e      	cmp	r3, #110	; 0x6e
   89752:	f040 81be 	bne.w	89ad2 <_svfprintf_r+0x4d6>
   89756:	e096      	b.n	89886 <_svfprintf_r+0x28a>
   89758:	2b73      	cmp	r3, #115	; 0x73
   8975a:	f000 80df 	beq.w	8991c <_svfprintf_r+0x320>
   8975e:	dc06      	bgt.n	8976e <_svfprintf_r+0x172>
   89760:	2b70      	cmp	r3, #112	; 0x70
   89762:	f000 80cd 	beq.w	89900 <_svfprintf_r+0x304>
   89766:	2b71      	cmp	r3, #113	; 0x71
   89768:	f040 81b3 	bne.w	89ad2 <_svfprintf_r+0x4d6>
   8976c:	e05a      	b.n	89824 <_svfprintf_r+0x228>
   8976e:	2b75      	cmp	r3, #117	; 0x75
   89770:	f000 80f6 	beq.w	89960 <_svfprintf_r+0x364>
   89774:	2b78      	cmp	r3, #120	; 0x78
   89776:	f040 81ac 	bne.w	89ad2 <_svfprintf_r+0x4d6>
   8977a:	4d9a      	ldr	r5, [pc, #616]	; (899e4 <_svfprintf_r+0x3e8>)
   8977c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   89780:	9505      	str	r5, [sp, #20]
   89782:	e105      	b.n	89990 <_svfprintf_r+0x394>
   89784:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   89788:	e057      	b.n	8983a <_svfprintf_r+0x23e>
   8978a:	f047 0701 	orr.w	r7, r7, #1
   8978e:	e792      	b.n	896b6 <_svfprintf_r+0xba>
   89790:	1d33      	adds	r3, r6, #4
   89792:	6836      	ldr	r6, [r6, #0]
   89794:	2e00      	cmp	r6, #0
   89796:	9603      	str	r6, [sp, #12]
   89798:	da15      	bge.n	897c6 <_svfprintf_r+0x1ca>
   8979a:	4270      	negs	r0, r6
   8979c:	9003      	str	r0, [sp, #12]
   8979e:	461e      	mov	r6, r3
   897a0:	f047 0704 	orr.w	r7, r7, #4
   897a4:	e787      	b.n	896b6 <_svfprintf_r+0xba>
   897a6:	9901      	ldr	r1, [sp, #4]
   897a8:	f811 3b01 	ldrb.w	r3, [r1], #1
   897ac:	2b2a      	cmp	r3, #42	; 0x2a
   897ae:	9101      	str	r1, [sp, #4]
   897b0:	d10b      	bne.n	897ca <_svfprintf_r+0x1ce>
   897b2:	f8d6 c000 	ldr.w	ip, [r6]
   897b6:	1d33      	adds	r3, r6, #4
   897b8:	f1bc 0f00 	cmp.w	ip, #0
   897bc:	da03      	bge.n	897c6 <_svfprintf_r+0x1ca>
   897be:	461e      	mov	r6, r3
   897c0:	f04f 3cff 	mov.w	ip, #4294967295
   897c4:	e777      	b.n	896b6 <_svfprintf_r+0xba>
   897c6:	461e      	mov	r6, r3
   897c8:	e775      	b.n	896b6 <_svfprintf_r+0xba>
   897ca:	f04f 0c00 	mov.w	ip, #0
   897ce:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   897d2:	2809      	cmp	r0, #9
   897d4:	d807      	bhi.n	897e6 <_svfprintf_r+0x1ea>
   897d6:	9901      	ldr	r1, [sp, #4]
   897d8:	230a      	movs	r3, #10
   897da:	fb03 0c0c 	mla	ip, r3, ip, r0
   897de:	f811 3b01 	ldrb.w	r3, [r1], #1
   897e2:	9101      	str	r1, [sp, #4]
   897e4:	e7f3      	b.n	897ce <_svfprintf_r+0x1d2>
   897e6:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   897ea:	e768      	b.n	896be <_svfprintf_r+0xc2>
   897ec:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   897f0:	e761      	b.n	896b6 <_svfprintf_r+0xba>
   897f2:	9801      	ldr	r0, [sp, #4]
   897f4:	2100      	movs	r1, #0
   897f6:	3b30      	subs	r3, #48	; 0x30
   897f8:	240a      	movs	r4, #10
   897fa:	fb04 3101 	mla	r1, r4, r1, r3
   897fe:	f810 3b01 	ldrb.w	r3, [r0], #1
   89802:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   89806:	2c09      	cmp	r4, #9
   89808:	9001      	str	r0, [sp, #4]
   8980a:	d9f4      	bls.n	897f6 <_svfprintf_r+0x1fa>
   8980c:	9103      	str	r1, [sp, #12]
   8980e:	e756      	b.n	896be <_svfprintf_r+0xc2>
   89810:	9901      	ldr	r1, [sp, #4]
   89812:	780b      	ldrb	r3, [r1, #0]
   89814:	2b6c      	cmp	r3, #108	; 0x6c
   89816:	d102      	bne.n	8981e <_svfprintf_r+0x222>
   89818:	1c48      	adds	r0, r1, #1
   8981a:	9001      	str	r0, [sp, #4]
   8981c:	e002      	b.n	89824 <_svfprintf_r+0x228>
   8981e:	f047 0710 	orr.w	r7, r7, #16
   89822:	e748      	b.n	896b6 <_svfprintf_r+0xba>
   89824:	f047 0720 	orr.w	r7, r7, #32
   89828:	e745      	b.n	896b6 <_svfprintf_r+0xba>
   8982a:	6832      	ldr	r2, [r6, #0]
   8982c:	2500      	movs	r5, #0
   8982e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   89832:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   89836:	3604      	adds	r6, #4
   89838:	e155      	b.n	89ae6 <_svfprintf_r+0x4ea>
   8983a:	06ba      	lsls	r2, r7, #26
   8983c:	d507      	bpl.n	8984e <_svfprintf_r+0x252>
   8983e:	3607      	adds	r6, #7
   89840:	f026 0507 	bic.w	r5, r6, #7
   89844:	f105 0608 	add.w	r6, r5, #8
   89848:	e9d5 4500 	ldrd	r4, r5, [r5]
   8984c:	e00f      	b.n	8986e <_svfprintf_r+0x272>
   8984e:	f017 0f10 	tst.w	r7, #16
   89852:	f106 0104 	add.w	r1, r6, #4
   89856:	d001      	beq.n	8985c <_svfprintf_r+0x260>
   89858:	6832      	ldr	r2, [r6, #0]
   8985a:	e005      	b.n	89868 <_svfprintf_r+0x26c>
   8985c:	f017 0f40 	tst.w	r7, #64	; 0x40
   89860:	6832      	ldr	r2, [r6, #0]
   89862:	d001      	beq.n	89868 <_svfprintf_r+0x26c>
   89864:	b214      	sxth	r4, r2
   89866:	e000      	b.n	8986a <_svfprintf_r+0x26e>
   89868:	4614      	mov	r4, r2
   8986a:	17e5      	asrs	r5, r4, #31
   8986c:	460e      	mov	r6, r1
   8986e:	2c00      	cmp	r4, #0
   89870:	f175 0200 	sbcs.w	r2, r5, #0
   89874:	f280 80b8 	bge.w	899e8 <_svfprintf_r+0x3ec>
   89878:	232d      	movs	r3, #45	; 0x2d
   8987a:	4264      	negs	r4, r4
   8987c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   89880:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   89884:	e0b0      	b.n	899e8 <_svfprintf_r+0x3ec>
   89886:	f017 0f20 	tst.w	r7, #32
   8988a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8988e:	f106 0204 	add.w	r2, r6, #4
   89892:	d005      	beq.n	898a0 <_svfprintf_r+0x2a4>
   89894:	9c04      	ldr	r4, [sp, #16]
   89896:	6835      	ldr	r5, [r6, #0]
   89898:	17e0      	asrs	r0, r4, #31
   8989a:	602c      	str	r4, [r5, #0]
   8989c:	6068      	str	r0, [r5, #4]
   8989e:	e004      	b.n	898aa <_svfprintf_r+0x2ae>
   898a0:	06fb      	lsls	r3, r7, #27
   898a2:	d504      	bpl.n	898ae <_svfprintf_r+0x2b2>
   898a4:	6833      	ldr	r3, [r6, #0]
   898a6:	9904      	ldr	r1, [sp, #16]
   898a8:	6019      	str	r1, [r3, #0]
   898aa:	4616      	mov	r6, r2
   898ac:	e6cf      	b.n	8964e <_svfprintf_r+0x52>
   898ae:	6830      	ldr	r0, [r6, #0]
   898b0:	9c04      	ldr	r4, [sp, #16]
   898b2:	f017 0f40 	tst.w	r7, #64	; 0x40
   898b6:	f106 0604 	add.w	r6, r6, #4
   898ba:	bf14      	ite	ne
   898bc:	8004      	strhne	r4, [r0, #0]
   898be:	6004      	streq	r4, [r0, #0]
   898c0:	e6c5      	b.n	8964e <_svfprintf_r+0x52>
   898c2:	f047 0710 	orr.w	r7, r7, #16
   898c6:	f017 0020 	ands.w	r0, r7, #32
   898ca:	d008      	beq.n	898de <_svfprintf_r+0x2e2>
   898cc:	1df3      	adds	r3, r6, #7
   898ce:	f023 0507 	bic.w	r5, r3, #7
   898d2:	f105 0608 	add.w	r6, r5, #8
   898d6:	e9d5 4500 	ldrd	r4, r5, [r5]
   898da:	2000      	movs	r0, #0
   898dc:	e07c      	b.n	899d8 <_svfprintf_r+0x3dc>
   898de:	f017 0110 	ands.w	r1, r7, #16
   898e2:	f106 0204 	add.w	r2, r6, #4
   898e6:	d106      	bne.n	898f6 <_svfprintf_r+0x2fa>
   898e8:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   898ec:	d003      	beq.n	898f6 <_svfprintf_r+0x2fa>
   898ee:	8834      	ldrh	r4, [r6, #0]
   898f0:	2500      	movs	r5, #0
   898f2:	4616      	mov	r6, r2
   898f4:	e7f1      	b.n	898da <_svfprintf_r+0x2de>
   898f6:	6836      	ldr	r6, [r6, #0]
   898f8:	2500      	movs	r5, #0
   898fa:	4634      	mov	r4, r6
   898fc:	4616      	mov	r6, r2
   898fe:	e06b      	b.n	899d8 <_svfprintf_r+0x3dc>
   89900:	4b38      	ldr	r3, [pc, #224]	; (899e4 <_svfprintf_r+0x3e8>)
   89902:	2130      	movs	r1, #48	; 0x30
   89904:	2278      	movs	r2, #120	; 0x78
   89906:	6834      	ldr	r4, [r6, #0]
   89908:	2500      	movs	r5, #0
   8990a:	f047 0702 	orr.w	r7, r7, #2
   8990e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   89912:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   89916:	3604      	adds	r6, #4
   89918:	9305      	str	r3, [sp, #20]
   8991a:	e05c      	b.n	899d6 <_svfprintf_r+0x3da>
   8991c:	4631      	mov	r1, r6
   8991e:	2500      	movs	r5, #0
   89920:	f8d1 a000 	ldr.w	sl, [r1]
   89924:	3604      	adds	r6, #4
   89926:	45ac      	cmp	ip, r5
   89928:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8992c:	4650      	mov	r0, sl
   8992e:	db11      	blt.n	89954 <_svfprintf_r+0x358>
   89930:	4662      	mov	r2, ip
   89932:	4629      	mov	r1, r5
   89934:	f8cd c000 	str.w	ip, [sp]
   89938:	f000 fd72 	bl	8a420 <memchr>
   8993c:	f8dd c000 	ldr.w	ip, [sp]
   89940:	2800      	cmp	r0, #0
   89942:	f000 80d4 	beq.w	89aee <_svfprintf_r+0x4f2>
   89946:	ebca 0400 	rsb	r4, sl, r0
   8994a:	4564      	cmp	r4, ip
   8994c:	f340 80d1 	ble.w	89af2 <_svfprintf_r+0x4f6>
   89950:	4664      	mov	r4, ip
   89952:	e0ce      	b.n	89af2 <_svfprintf_r+0x4f6>
   89954:	f7ff fd70 	bl	89438 <strlen>
   89958:	4604      	mov	r4, r0
   8995a:	e0ca      	b.n	89af2 <_svfprintf_r+0x4f6>
   8995c:	f047 0710 	orr.w	r7, r7, #16
   89960:	06bd      	lsls	r5, r7, #26
   89962:	d506      	bpl.n	89972 <_svfprintf_r+0x376>
   89964:	1df0      	adds	r0, r6, #7
   89966:	f020 0407 	bic.w	r4, r0, #7
   8996a:	f104 0608 	add.w	r6, r4, #8
   8996e:	cc30      	ldmia	r4, {r4, r5}
   89970:	e00c      	b.n	8998c <_svfprintf_r+0x390>
   89972:	f017 0f10 	tst.w	r7, #16
   89976:	f106 0304 	add.w	r3, r6, #4
   8997a:	d103      	bne.n	89984 <_svfprintf_r+0x388>
   8997c:	067c      	lsls	r4, r7, #25
   8997e:	d501      	bpl.n	89984 <_svfprintf_r+0x388>
   89980:	8834      	ldrh	r4, [r6, #0]
   89982:	e001      	b.n	89988 <_svfprintf_r+0x38c>
   89984:	6835      	ldr	r5, [r6, #0]
   89986:	462c      	mov	r4, r5
   89988:	2500      	movs	r5, #0
   8998a:	461e      	mov	r6, r3
   8998c:	2001      	movs	r0, #1
   8998e:	e023      	b.n	899d8 <_svfprintf_r+0x3dc>
   89990:	06b8      	lsls	r0, r7, #26
   89992:	d507      	bpl.n	899a4 <_svfprintf_r+0x3a8>
   89994:	1df4      	adds	r4, r6, #7
   89996:	f024 0107 	bic.w	r1, r4, #7
   8999a:	f101 0608 	add.w	r6, r1, #8
   8999e:	e9d1 4500 	ldrd	r4, r5, [r1]
   899a2:	e00c      	b.n	899be <_svfprintf_r+0x3c2>
   899a4:	f017 0f10 	tst.w	r7, #16
   899a8:	f106 0004 	add.w	r0, r6, #4
   899ac:	d103      	bne.n	899b6 <_svfprintf_r+0x3ba>
   899ae:	0679      	lsls	r1, r7, #25
   899b0:	d501      	bpl.n	899b6 <_svfprintf_r+0x3ba>
   899b2:	8834      	ldrh	r4, [r6, #0]
   899b4:	e001      	b.n	899ba <_svfprintf_r+0x3be>
   899b6:	6836      	ldr	r6, [r6, #0]
   899b8:	4634      	mov	r4, r6
   899ba:	2500      	movs	r5, #0
   899bc:	4606      	mov	r6, r0
   899be:	07fa      	lsls	r2, r7, #31
   899c0:	d509      	bpl.n	899d6 <_svfprintf_r+0x3da>
   899c2:	ea54 0205 	orrs.w	r2, r4, r5
   899c6:	d006      	beq.n	899d6 <_svfprintf_r+0x3da>
   899c8:	2230      	movs	r2, #48	; 0x30
   899ca:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   899ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   899d2:	f047 0702 	orr.w	r7, r7, #2
   899d6:	2002      	movs	r0, #2
   899d8:	2100      	movs	r1, #0
   899da:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   899de:	e004      	b.n	899ea <_svfprintf_r+0x3ee>
   899e0:	0008c102 	.word	0x0008c102
   899e4:	0008c113 	.word	0x0008c113
   899e8:	2001      	movs	r0, #1
   899ea:	f1bc 0f00 	cmp.w	ip, #0
   899ee:	bfa8      	it	ge
   899f0:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   899f4:	ea54 0105 	orrs.w	r1, r4, r5
   899f8:	d102      	bne.n	89a00 <_svfprintf_r+0x404>
   899fa:	f1bc 0f00 	cmp.w	ip, #0
   899fe:	d058      	beq.n	89ab2 <_svfprintf_r+0x4b6>
   89a00:	2801      	cmp	r0, #1
   89a02:	d01d      	beq.n	89a40 <_svfprintf_r+0x444>
   89a04:	2802      	cmp	r0, #2
   89a06:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   89a0a:	d041      	beq.n	89a90 <_svfprintf_r+0x494>
   89a0c:	f004 0207 	and.w	r2, r4, #7
   89a10:	08e4      	lsrs	r4, r4, #3
   89a12:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   89a16:	08e9      	lsrs	r1, r5, #3
   89a18:	4604      	mov	r4, r0
   89a1a:	460d      	mov	r5, r1
   89a1c:	3230      	adds	r2, #48	; 0x30
   89a1e:	ea54 0105 	orrs.w	r1, r4, r5
   89a22:	469a      	mov	sl, r3
   89a24:	701a      	strb	r2, [r3, #0]
   89a26:	f103 33ff 	add.w	r3, r3, #4294967295
   89a2a:	d1ef      	bne.n	89a0c <_svfprintf_r+0x410>
   89a2c:	07f8      	lsls	r0, r7, #31
   89a2e:	4655      	mov	r5, sl
   89a30:	d54a      	bpl.n	89ac8 <_svfprintf_r+0x4cc>
   89a32:	2a30      	cmp	r2, #48	; 0x30
   89a34:	d048      	beq.n	89ac8 <_svfprintf_r+0x4cc>
   89a36:	2230      	movs	r2, #48	; 0x30
   89a38:	469a      	mov	sl, r3
   89a3a:	f805 2c01 	strb.w	r2, [r5, #-1]
   89a3e:	e043      	b.n	89ac8 <_svfprintf_r+0x4cc>
   89a40:	2d00      	cmp	r5, #0
   89a42:	bf08      	it	eq
   89a44:	2c0a      	cmpeq	r4, #10
   89a46:	d203      	bcs.n	89a50 <_svfprintf_r+0x454>
   89a48:	3430      	adds	r4, #48	; 0x30
   89a4a:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   89a4e:	e036      	b.n	89abe <_svfprintf_r+0x4c2>
   89a50:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   89a54:	9302      	str	r3, [sp, #8]
   89a56:	4620      	mov	r0, r4
   89a58:	4629      	mov	r1, r5
   89a5a:	220a      	movs	r2, #10
   89a5c:	2300      	movs	r3, #0
   89a5e:	f8cd c000 	str.w	ip, [sp]
   89a62:	f001 fae5 	bl	8b030 <__aeabi_uldivmod>
   89a66:	9802      	ldr	r0, [sp, #8]
   89a68:	3230      	adds	r2, #48	; 0x30
   89a6a:	f800 2901 	strb.w	r2, [r0], #-1
   89a6e:	4629      	mov	r1, r5
   89a70:	220a      	movs	r2, #10
   89a72:	2300      	movs	r3, #0
   89a74:	f8dd a008 	ldr.w	sl, [sp, #8]
   89a78:	9002      	str	r0, [sp, #8]
   89a7a:	4620      	mov	r0, r4
   89a7c:	f001 fad8 	bl	8b030 <__aeabi_uldivmod>
   89a80:	4604      	mov	r4, r0
   89a82:	460d      	mov	r5, r1
   89a84:	ea54 0105 	orrs.w	r1, r4, r5
   89a88:	f8dd c000 	ldr.w	ip, [sp]
   89a8c:	d1e3      	bne.n	89a56 <_svfprintf_r+0x45a>
   89a8e:	e01b      	b.n	89ac8 <_svfprintf_r+0x4cc>
   89a90:	9905      	ldr	r1, [sp, #20]
   89a92:	f004 000f 	and.w	r0, r4, #15
   89a96:	0924      	lsrs	r4, r4, #4
   89a98:	5c0a      	ldrb	r2, [r1, r0]
   89a9a:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   89a9e:	0929      	lsrs	r1, r5, #4
   89aa0:	4604      	mov	r4, r0
   89aa2:	460d      	mov	r5, r1
   89aa4:	469a      	mov	sl, r3
   89aa6:	f803 2901 	strb.w	r2, [r3], #-1
   89aaa:	ea54 0205 	orrs.w	r2, r4, r5
   89aae:	d1ef      	bne.n	89a90 <_svfprintf_r+0x494>
   89ab0:	e00a      	b.n	89ac8 <_svfprintf_r+0x4cc>
   89ab2:	b938      	cbnz	r0, 89ac4 <_svfprintf_r+0x4c8>
   89ab4:	07f9      	lsls	r1, r7, #31
   89ab6:	d505      	bpl.n	89ac4 <_svfprintf_r+0x4c8>
   89ab8:	2030      	movs	r0, #48	; 0x30
   89aba:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   89abe:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   89ac2:	e001      	b.n	89ac8 <_svfprintf_r+0x4cc>
   89ac4:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   89ac8:	ad18      	add	r5, sp, #96	; 0x60
   89aca:	ebca 0405 	rsb	r4, sl, r5
   89ace:	4665      	mov	r5, ip
   89ad0:	e00f      	b.n	89af2 <_svfprintf_r+0x4f6>
   89ad2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   89ad6:	2b00      	cmp	r3, #0
   89ad8:	f000 8176 	beq.w	89dc8 <_svfprintf_r+0x7cc>
   89adc:	2500      	movs	r5, #0
   89ade:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   89ae2:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   89ae6:	2401      	movs	r4, #1
   89ae8:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   89aec:	e001      	b.n	89af2 <_svfprintf_r+0x4f6>
   89aee:	4664      	mov	r4, ip
   89af0:	4605      	mov	r5, r0
   89af2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   89af6:	42ac      	cmp	r4, r5
   89af8:	bfac      	ite	ge
   89afa:	4621      	movge	r1, r4
   89afc:	4629      	movlt	r1, r5
   89afe:	9102      	str	r1, [sp, #8]
   89b00:	b113      	cbz	r3, 89b08 <_svfprintf_r+0x50c>
   89b02:	9802      	ldr	r0, [sp, #8]
   89b04:	1c42      	adds	r2, r0, #1
   89b06:	9202      	str	r2, [sp, #8]
   89b08:	f017 0102 	ands.w	r1, r7, #2
   89b0c:	9106      	str	r1, [sp, #24]
   89b0e:	d002      	beq.n	89b16 <_svfprintf_r+0x51a>
   89b10:	9b02      	ldr	r3, [sp, #8]
   89b12:	1c98      	adds	r0, r3, #2
   89b14:	9002      	str	r0, [sp, #8]
   89b16:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   89b1a:	9207      	str	r2, [sp, #28]
   89b1c:	d13c      	bne.n	89b98 <_svfprintf_r+0x59c>
   89b1e:	9903      	ldr	r1, [sp, #12]
   89b20:	9b02      	ldr	r3, [sp, #8]
   89b22:	1acb      	subs	r3, r1, r3
   89b24:	2b00      	cmp	r3, #0
   89b26:	dd37      	ble.n	89b98 <_svfprintf_r+0x59c>
   89b28:	48a5      	ldr	r0, [pc, #660]	; (89dc0 <_svfprintf_r+0x7c4>)
   89b2a:	2b10      	cmp	r3, #16
   89b2c:	f8c8 0000 	str.w	r0, [r8]
   89b30:	dd1b      	ble.n	89b6a <_svfprintf_r+0x56e>
   89b32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89b34:	2110      	movs	r1, #16
   89b36:	980d      	ldr	r0, [sp, #52]	; 0x34
   89b38:	f8c8 1004 	str.w	r1, [r8, #4]
   89b3c:	1c51      	adds	r1, r2, #1
   89b3e:	3010      	adds	r0, #16
   89b40:	2907      	cmp	r1, #7
   89b42:	900d      	str	r0, [sp, #52]	; 0x34
   89b44:	910c      	str	r1, [sp, #48]	; 0x30
   89b46:	dc02      	bgt.n	89b4e <_svfprintf_r+0x552>
   89b48:	f108 0808 	add.w	r8, r8, #8
   89b4c:	e00b      	b.n	89b66 <_svfprintf_r+0x56a>
   89b4e:	4658      	mov	r0, fp
   89b50:	4649      	mov	r1, r9
   89b52:	aa0b      	add	r2, sp, #44	; 0x2c
   89b54:	9300      	str	r3, [sp, #0]
   89b56:	f000 fdf1 	bl	8a73c <__ssprint_r>
   89b5a:	9b00      	ldr	r3, [sp, #0]
   89b5c:	2800      	cmp	r0, #0
   89b5e:	f040 813a 	bne.w	89dd6 <_svfprintf_r+0x7da>
   89b62:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89b66:	3b10      	subs	r3, #16
   89b68:	e7de      	b.n	89b28 <_svfprintf_r+0x52c>
   89b6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   89b6c:	f8c8 3004 	str.w	r3, [r8, #4]
   89b70:	18d1      	adds	r1, r2, r3
   89b72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89b74:	910d      	str	r1, [sp, #52]	; 0x34
   89b76:	1c58      	adds	r0, r3, #1
   89b78:	2807      	cmp	r0, #7
   89b7a:	900c      	str	r0, [sp, #48]	; 0x30
   89b7c:	dc02      	bgt.n	89b84 <_svfprintf_r+0x588>
   89b7e:	f108 0808 	add.w	r8, r8, #8
   89b82:	e009      	b.n	89b98 <_svfprintf_r+0x59c>
   89b84:	4658      	mov	r0, fp
   89b86:	4649      	mov	r1, r9
   89b88:	aa0b      	add	r2, sp, #44	; 0x2c
   89b8a:	f000 fdd7 	bl	8a73c <__ssprint_r>
   89b8e:	2800      	cmp	r0, #0
   89b90:	f040 8121 	bne.w	89dd6 <_svfprintf_r+0x7da>
   89b94:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89b98:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   89b9c:	b1da      	cbz	r2, 89bd6 <_svfprintf_r+0x5da>
   89b9e:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   89ba2:	f8c8 1000 	str.w	r1, [r8]
   89ba6:	990c      	ldr	r1, [sp, #48]	; 0x30
   89ba8:	2301      	movs	r3, #1
   89baa:	980d      	ldr	r0, [sp, #52]	; 0x34
   89bac:	f8c8 3004 	str.w	r3, [r8, #4]
   89bb0:	1c4b      	adds	r3, r1, #1
   89bb2:	1c42      	adds	r2, r0, #1
   89bb4:	2b07      	cmp	r3, #7
   89bb6:	920d      	str	r2, [sp, #52]	; 0x34
   89bb8:	930c      	str	r3, [sp, #48]	; 0x30
   89bba:	dc02      	bgt.n	89bc2 <_svfprintf_r+0x5c6>
   89bbc:	f108 0808 	add.w	r8, r8, #8
   89bc0:	e009      	b.n	89bd6 <_svfprintf_r+0x5da>
   89bc2:	4658      	mov	r0, fp
   89bc4:	4649      	mov	r1, r9
   89bc6:	aa0b      	add	r2, sp, #44	; 0x2c
   89bc8:	f000 fdb8 	bl	8a73c <__ssprint_r>
   89bcc:	2800      	cmp	r0, #0
   89bce:	f040 8102 	bne.w	89dd6 <_svfprintf_r+0x7da>
   89bd2:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89bd6:	9806      	ldr	r0, [sp, #24]
   89bd8:	b1d0      	cbz	r0, 89c10 <_svfprintf_r+0x614>
   89bda:	aa0a      	add	r2, sp, #40	; 0x28
   89bdc:	f8c8 2000 	str.w	r2, [r8]
   89be0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89be2:	2102      	movs	r1, #2
   89be4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89be6:	f8c8 1004 	str.w	r1, [r8, #4]
   89bea:	1c51      	adds	r1, r2, #1
   89bec:	1c98      	adds	r0, r3, #2
   89bee:	2907      	cmp	r1, #7
   89bf0:	900d      	str	r0, [sp, #52]	; 0x34
   89bf2:	910c      	str	r1, [sp, #48]	; 0x30
   89bf4:	dc02      	bgt.n	89bfc <_svfprintf_r+0x600>
   89bf6:	f108 0808 	add.w	r8, r8, #8
   89bfa:	e009      	b.n	89c10 <_svfprintf_r+0x614>
   89bfc:	4658      	mov	r0, fp
   89bfe:	4649      	mov	r1, r9
   89c00:	aa0b      	add	r2, sp, #44	; 0x2c
   89c02:	f000 fd9b 	bl	8a73c <__ssprint_r>
   89c06:	2800      	cmp	r0, #0
   89c08:	f040 80e5 	bne.w	89dd6 <_svfprintf_r+0x7da>
   89c0c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89c10:	9b07      	ldr	r3, [sp, #28]
   89c12:	2b80      	cmp	r3, #128	; 0x80
   89c14:	d13c      	bne.n	89c90 <_svfprintf_r+0x694>
   89c16:	9803      	ldr	r0, [sp, #12]
   89c18:	9a02      	ldr	r2, [sp, #8]
   89c1a:	1a83      	subs	r3, r0, r2
   89c1c:	2b00      	cmp	r3, #0
   89c1e:	dd37      	ble.n	89c90 <_svfprintf_r+0x694>
   89c20:	4968      	ldr	r1, [pc, #416]	; (89dc4 <_svfprintf_r+0x7c8>)
   89c22:	2b10      	cmp	r3, #16
   89c24:	f8c8 1000 	str.w	r1, [r8]
   89c28:	dd1b      	ble.n	89c62 <_svfprintf_r+0x666>
   89c2a:	980c      	ldr	r0, [sp, #48]	; 0x30
   89c2c:	2210      	movs	r2, #16
   89c2e:	990d      	ldr	r1, [sp, #52]	; 0x34
   89c30:	f8c8 2004 	str.w	r2, [r8, #4]
   89c34:	1c42      	adds	r2, r0, #1
   89c36:	3110      	adds	r1, #16
   89c38:	2a07      	cmp	r2, #7
   89c3a:	910d      	str	r1, [sp, #52]	; 0x34
   89c3c:	920c      	str	r2, [sp, #48]	; 0x30
   89c3e:	dc02      	bgt.n	89c46 <_svfprintf_r+0x64a>
   89c40:	f108 0808 	add.w	r8, r8, #8
   89c44:	e00b      	b.n	89c5e <_svfprintf_r+0x662>
   89c46:	4658      	mov	r0, fp
   89c48:	4649      	mov	r1, r9
   89c4a:	aa0b      	add	r2, sp, #44	; 0x2c
   89c4c:	9300      	str	r3, [sp, #0]
   89c4e:	f000 fd75 	bl	8a73c <__ssprint_r>
   89c52:	9b00      	ldr	r3, [sp, #0]
   89c54:	2800      	cmp	r0, #0
   89c56:	f040 80be 	bne.w	89dd6 <_svfprintf_r+0x7da>
   89c5a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89c5e:	3b10      	subs	r3, #16
   89c60:	e7de      	b.n	89c20 <_svfprintf_r+0x624>
   89c62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89c64:	980d      	ldr	r0, [sp, #52]	; 0x34
   89c66:	1c51      	adds	r1, r2, #1
   89c68:	f8c8 3004 	str.w	r3, [r8, #4]
   89c6c:	2907      	cmp	r1, #7
   89c6e:	4403      	add	r3, r0
   89c70:	930d      	str	r3, [sp, #52]	; 0x34
   89c72:	910c      	str	r1, [sp, #48]	; 0x30
   89c74:	dc02      	bgt.n	89c7c <_svfprintf_r+0x680>
   89c76:	f108 0808 	add.w	r8, r8, #8
   89c7a:	e009      	b.n	89c90 <_svfprintf_r+0x694>
   89c7c:	4658      	mov	r0, fp
   89c7e:	4649      	mov	r1, r9
   89c80:	aa0b      	add	r2, sp, #44	; 0x2c
   89c82:	f000 fd5b 	bl	8a73c <__ssprint_r>
   89c86:	2800      	cmp	r0, #0
   89c88:	f040 80a5 	bne.w	89dd6 <_svfprintf_r+0x7da>
   89c8c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89c90:	1b2d      	subs	r5, r5, r4
   89c92:	2d00      	cmp	r5, #0
   89c94:	dd34      	ble.n	89d00 <_svfprintf_r+0x704>
   89c96:	484b      	ldr	r0, [pc, #300]	; (89dc4 <_svfprintf_r+0x7c8>)
   89c98:	2d10      	cmp	r5, #16
   89c9a:	f8c8 0000 	str.w	r0, [r8]
   89c9e:	dd19      	ble.n	89cd4 <_svfprintf_r+0x6d8>
   89ca0:	980c      	ldr	r0, [sp, #48]	; 0x30
   89ca2:	990d      	ldr	r1, [sp, #52]	; 0x34
   89ca4:	1c43      	adds	r3, r0, #1
   89ca6:	2210      	movs	r2, #16
   89ca8:	3110      	adds	r1, #16
   89caa:	2b07      	cmp	r3, #7
   89cac:	f8c8 2004 	str.w	r2, [r8, #4]
   89cb0:	910d      	str	r1, [sp, #52]	; 0x34
   89cb2:	930c      	str	r3, [sp, #48]	; 0x30
   89cb4:	dc02      	bgt.n	89cbc <_svfprintf_r+0x6c0>
   89cb6:	f108 0808 	add.w	r8, r8, #8
   89cba:	e009      	b.n	89cd0 <_svfprintf_r+0x6d4>
   89cbc:	4658      	mov	r0, fp
   89cbe:	4649      	mov	r1, r9
   89cc0:	aa0b      	add	r2, sp, #44	; 0x2c
   89cc2:	f000 fd3b 	bl	8a73c <__ssprint_r>
   89cc6:	2800      	cmp	r0, #0
   89cc8:	f040 8085 	bne.w	89dd6 <_svfprintf_r+0x7da>
   89ccc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89cd0:	3d10      	subs	r5, #16
   89cd2:	e7e0      	b.n	89c96 <_svfprintf_r+0x69a>
   89cd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89cd8:	1c51      	adds	r1, r2, #1
   89cda:	f8c8 5004 	str.w	r5, [r8, #4]
   89cde:	2907      	cmp	r1, #7
   89ce0:	441d      	add	r5, r3
   89ce2:	950d      	str	r5, [sp, #52]	; 0x34
   89ce4:	910c      	str	r1, [sp, #48]	; 0x30
   89ce6:	dc02      	bgt.n	89cee <_svfprintf_r+0x6f2>
   89ce8:	f108 0808 	add.w	r8, r8, #8
   89cec:	e008      	b.n	89d00 <_svfprintf_r+0x704>
   89cee:	4658      	mov	r0, fp
   89cf0:	4649      	mov	r1, r9
   89cf2:	aa0b      	add	r2, sp, #44	; 0x2c
   89cf4:	f000 fd22 	bl	8a73c <__ssprint_r>
   89cf8:	2800      	cmp	r0, #0
   89cfa:	d16c      	bne.n	89dd6 <_svfprintf_r+0x7da>
   89cfc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89d00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89d02:	980d      	ldr	r0, [sp, #52]	; 0x34
   89d04:	1c5a      	adds	r2, r3, #1
   89d06:	f8c8 4004 	str.w	r4, [r8, #4]
   89d0a:	2a07      	cmp	r2, #7
   89d0c:	4404      	add	r4, r0
   89d0e:	f8c8 a000 	str.w	sl, [r8]
   89d12:	940d      	str	r4, [sp, #52]	; 0x34
   89d14:	920c      	str	r2, [sp, #48]	; 0x30
   89d16:	dc02      	bgt.n	89d1e <_svfprintf_r+0x722>
   89d18:	f108 0308 	add.w	r3, r8, #8
   89d1c:	e007      	b.n	89d2e <_svfprintf_r+0x732>
   89d1e:	4658      	mov	r0, fp
   89d20:	4649      	mov	r1, r9
   89d22:	aa0b      	add	r2, sp, #44	; 0x2c
   89d24:	f000 fd0a 	bl	8a73c <__ssprint_r>
   89d28:	2800      	cmp	r0, #0
   89d2a:	d154      	bne.n	89dd6 <_svfprintf_r+0x7da>
   89d2c:	ab18      	add	r3, sp, #96	; 0x60
   89d2e:	077a      	lsls	r2, r7, #29
   89d30:	d40b      	bmi.n	89d4a <_svfprintf_r+0x74e>
   89d32:	9804      	ldr	r0, [sp, #16]
   89d34:	9b02      	ldr	r3, [sp, #8]
   89d36:	9a03      	ldr	r2, [sp, #12]
   89d38:	990d      	ldr	r1, [sp, #52]	; 0x34
   89d3a:	4293      	cmp	r3, r2
   89d3c:	bfac      	ite	ge
   89d3e:	18c0      	addge	r0, r0, r3
   89d40:	1880      	addlt	r0, r0, r2
   89d42:	9004      	str	r0, [sp, #16]
   89d44:	2900      	cmp	r1, #0
   89d46:	d036      	beq.n	89db6 <_svfprintf_r+0x7ba>
   89d48:	e02f      	b.n	89daa <_svfprintf_r+0x7ae>
   89d4a:	9c03      	ldr	r4, [sp, #12]
   89d4c:	9902      	ldr	r1, [sp, #8]
   89d4e:	1a64      	subs	r4, r4, r1
   89d50:	2c00      	cmp	r4, #0
   89d52:	ddee      	ble.n	89d32 <_svfprintf_r+0x736>
   89d54:	481a      	ldr	r0, [pc, #104]	; (89dc0 <_svfprintf_r+0x7c4>)
   89d56:	2c10      	cmp	r4, #16
   89d58:	6018      	str	r0, [r3, #0]
   89d5a:	dd15      	ble.n	89d88 <_svfprintf_r+0x78c>
   89d5c:	990c      	ldr	r1, [sp, #48]	; 0x30
   89d5e:	2010      	movs	r0, #16
   89d60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   89d62:	6058      	str	r0, [r3, #4]
   89d64:	1c48      	adds	r0, r1, #1
   89d66:	3210      	adds	r2, #16
   89d68:	2807      	cmp	r0, #7
   89d6a:	920d      	str	r2, [sp, #52]	; 0x34
   89d6c:	900c      	str	r0, [sp, #48]	; 0x30
   89d6e:	dc01      	bgt.n	89d74 <_svfprintf_r+0x778>
   89d70:	3308      	adds	r3, #8
   89d72:	e007      	b.n	89d84 <_svfprintf_r+0x788>
   89d74:	4658      	mov	r0, fp
   89d76:	4649      	mov	r1, r9
   89d78:	aa0b      	add	r2, sp, #44	; 0x2c
   89d7a:	f000 fcdf 	bl	8a73c <__ssprint_r>
   89d7e:	2800      	cmp	r0, #0
   89d80:	d129      	bne.n	89dd6 <_svfprintf_r+0x7da>
   89d82:	ab18      	add	r3, sp, #96	; 0x60
   89d84:	3c10      	subs	r4, #16
   89d86:	e7e5      	b.n	89d54 <_svfprintf_r+0x758>
   89d88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89d8a:	605c      	str	r4, [r3, #4]
   89d8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89d8e:	1c51      	adds	r1, r2, #1
   89d90:	191c      	adds	r4, r3, r4
   89d92:	2907      	cmp	r1, #7
   89d94:	940d      	str	r4, [sp, #52]	; 0x34
   89d96:	910c      	str	r1, [sp, #48]	; 0x30
   89d98:	ddcb      	ble.n	89d32 <_svfprintf_r+0x736>
   89d9a:	4658      	mov	r0, fp
   89d9c:	4649      	mov	r1, r9
   89d9e:	aa0b      	add	r2, sp, #44	; 0x2c
   89da0:	f000 fccc 	bl	8a73c <__ssprint_r>
   89da4:	2800      	cmp	r0, #0
   89da6:	d0c4      	beq.n	89d32 <_svfprintf_r+0x736>
   89da8:	e015      	b.n	89dd6 <_svfprintf_r+0x7da>
   89daa:	4658      	mov	r0, fp
   89dac:	4649      	mov	r1, r9
   89dae:	aa0b      	add	r2, sp, #44	; 0x2c
   89db0:	f000 fcc4 	bl	8a73c <__ssprint_r>
   89db4:	b978      	cbnz	r0, 89dd6 <_svfprintf_r+0x7da>
   89db6:	2500      	movs	r5, #0
   89db8:	950c      	str	r5, [sp, #48]	; 0x30
   89dba:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89dbe:	e446      	b.n	8964e <_svfprintf_r+0x52>
   89dc0:	0008c0e2 	.word	0x0008c0e2
   89dc4:	0008c0f2 	.word	0x0008c0f2
   89dc8:	980d      	ldr	r0, [sp, #52]	; 0x34
   89dca:	b120      	cbz	r0, 89dd6 <_svfprintf_r+0x7da>
   89dcc:	4658      	mov	r0, fp
   89dce:	4649      	mov	r1, r9
   89dd0:	aa0b      	add	r2, sp, #44	; 0x2c
   89dd2:	f000 fcb3 	bl	8a73c <__ssprint_r>
   89dd6:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   89dda:	9b04      	ldr	r3, [sp, #16]
   89ddc:	f002 0140 	and.w	r1, r2, #64	; 0x40
   89de0:	b208      	sxth	r0, r1
   89de2:	2800      	cmp	r0, #0
   89de4:	bf18      	it	ne
   89de6:	f04f 33ff 	movne.w	r3, #4294967295
   89dea:	4618      	mov	r0, r3
   89dec:	b029      	add	sp, #164	; 0xa4
   89dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89df2:	bf00      	nop

00089df4 <register_fini>:
   89df4:	4b02      	ldr	r3, [pc, #8]	; (89e00 <register_fini+0xc>)
   89df6:	b113      	cbz	r3, 89dfe <register_fini+0xa>
   89df8:	4802      	ldr	r0, [pc, #8]	; (89e04 <register_fini+0x10>)
   89dfa:	f000 b805 	b.w	89e08 <atexit>
   89dfe:	4770      	bx	lr
   89e00:	00000000 	.word	0x00000000
   89e04:	000892b5 	.word	0x000892b5

00089e08 <atexit>:
   89e08:	4601      	mov	r1, r0
   89e0a:	2000      	movs	r0, #0
   89e0c:	4602      	mov	r2, r0
   89e0e:	4603      	mov	r3, r0
   89e10:	f7ff ba02 	b.w	89218 <__register_exitproc>

00089e14 <_malloc_trim_r>:
   89e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89e16:	4d23      	ldr	r5, [pc, #140]	; (89ea4 <_malloc_trim_r+0x90>)
   89e18:	460e      	mov	r6, r1
   89e1a:	4604      	mov	r4, r0
   89e1c:	f000 fb0e 	bl	8a43c <__malloc_lock>
   89e20:	68ab      	ldr	r3, [r5, #8]
   89e22:	685f      	ldr	r7, [r3, #4]
   89e24:	f027 0703 	bic.w	r7, r7, #3
   89e28:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
   89e2c:	1b81      	subs	r1, r0, r6
   89e2e:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   89e32:	f022 060f 	bic.w	r6, r2, #15
   89e36:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   89e3a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   89e3e:	da04      	bge.n	89e4a <_malloc_trim_r+0x36>
   89e40:	4620      	mov	r0, r4
   89e42:	f000 fafc 	bl	8a43e <__malloc_unlock>
   89e46:	2000      	movs	r0, #0
   89e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89e4a:	2100      	movs	r1, #0
   89e4c:	4620      	mov	r0, r4
   89e4e:	f000 fc65 	bl	8a71c <_sbrk_r>
   89e52:	68ab      	ldr	r3, [r5, #8]
   89e54:	19d9      	adds	r1, r3, r7
   89e56:	4288      	cmp	r0, r1
   89e58:	d1f2      	bne.n	89e40 <_malloc_trim_r+0x2c>
   89e5a:	4271      	negs	r1, r6
   89e5c:	4620      	mov	r0, r4
   89e5e:	f000 fc5d 	bl	8a71c <_sbrk_r>
   89e62:	3001      	adds	r0, #1
   89e64:	d110      	bne.n	89e88 <_malloc_trim_r+0x74>
   89e66:	2100      	movs	r1, #0
   89e68:	4620      	mov	r0, r4
   89e6a:	f000 fc57 	bl	8a71c <_sbrk_r>
   89e6e:	68ab      	ldr	r3, [r5, #8]
   89e70:	1ac2      	subs	r2, r0, r3
   89e72:	2a0f      	cmp	r2, #15
   89e74:	dde4      	ble.n	89e40 <_malloc_trim_r+0x2c>
   89e76:	490c      	ldr	r1, [pc, #48]	; (89ea8 <_malloc_trim_r+0x94>)
   89e78:	f042 0201 	orr.w	r2, r2, #1
   89e7c:	6809      	ldr	r1, [r1, #0]
   89e7e:	605a      	str	r2, [r3, #4]
   89e80:	1a40      	subs	r0, r0, r1
   89e82:	490a      	ldr	r1, [pc, #40]	; (89eac <_malloc_trim_r+0x98>)
   89e84:	6008      	str	r0, [r1, #0]
   89e86:	e7db      	b.n	89e40 <_malloc_trim_r+0x2c>
   89e88:	4b08      	ldr	r3, [pc, #32]	; (89eac <_malloc_trim_r+0x98>)
   89e8a:	68a8      	ldr	r0, [r5, #8]
   89e8c:	681a      	ldr	r2, [r3, #0]
   89e8e:	1bbf      	subs	r7, r7, r6
   89e90:	f047 0701 	orr.w	r7, r7, #1
   89e94:	6047      	str	r7, [r0, #4]
   89e96:	1b96      	subs	r6, r2, r6
   89e98:	4620      	mov	r0, r4
   89e9a:	601e      	str	r6, [r3, #0]
   89e9c:	f000 facf 	bl	8a43e <__malloc_unlock>
   89ea0:	2001      	movs	r0, #1
   89ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89ea4:	200706d0 	.word	0x200706d0
   89ea8:	20070ad8 	.word	0x20070ad8
   89eac:	20071618 	.word	0x20071618

00089eb0 <_free_r>:
   89eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89eb2:	4606      	mov	r6, r0
   89eb4:	460d      	mov	r5, r1
   89eb6:	2900      	cmp	r1, #0
   89eb8:	f000 80a6 	beq.w	8a008 <_free_r+0x158>
   89ebc:	f000 fabe 	bl	8a43c <__malloc_lock>
   89ec0:	f855 cc04 	ldr.w	ip, [r5, #-4]
   89ec4:	4f51      	ldr	r7, [pc, #324]	; (8a00c <_free_r+0x15c>)
   89ec6:	f1a5 0308 	sub.w	r3, r5, #8
   89eca:	f02c 0201 	bic.w	r2, ip, #1
   89ece:	189c      	adds	r4, r3, r2
   89ed0:	68b9      	ldr	r1, [r7, #8]
   89ed2:	6860      	ldr	r0, [r4, #4]
   89ed4:	428c      	cmp	r4, r1
   89ed6:	f020 0003 	bic.w	r0, r0, #3
   89eda:	f00c 0101 	and.w	r1, ip, #1
   89ede:	d11c      	bne.n	89f1a <_free_r+0x6a>
   89ee0:	1882      	adds	r2, r0, r2
   89ee2:	b939      	cbnz	r1, 89ef4 <_free_r+0x44>
   89ee4:	f855 1c08 	ldr.w	r1, [r5, #-8]
   89ee8:	1a5b      	subs	r3, r3, r1
   89eea:	6898      	ldr	r0, [r3, #8]
   89eec:	1852      	adds	r2, r2, r1
   89eee:	68d9      	ldr	r1, [r3, #12]
   89ef0:	60c1      	str	r1, [r0, #12]
   89ef2:	6088      	str	r0, [r1, #8]
   89ef4:	4845      	ldr	r0, [pc, #276]	; (8a00c <_free_r+0x15c>)
   89ef6:	f042 0101 	orr.w	r1, r2, #1
   89efa:	6059      	str	r1, [r3, #4]
   89efc:	6083      	str	r3, [r0, #8]
   89efe:	4b44      	ldr	r3, [pc, #272]	; (8a010 <_free_r+0x160>)
   89f00:	6819      	ldr	r1, [r3, #0]
   89f02:	428a      	cmp	r2, r1
   89f04:	d304      	bcc.n	89f10 <_free_r+0x60>
   89f06:	4a43      	ldr	r2, [pc, #268]	; (8a014 <_free_r+0x164>)
   89f08:	4630      	mov	r0, r6
   89f0a:	6811      	ldr	r1, [r2, #0]
   89f0c:	f7ff ff82 	bl	89e14 <_malloc_trim_r>
   89f10:	4630      	mov	r0, r6
   89f12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   89f16:	f000 ba92 	b.w	8a43e <__malloc_unlock>
   89f1a:	6060      	str	r0, [r4, #4]
   89f1c:	b959      	cbnz	r1, 89f36 <_free_r+0x86>
   89f1e:	f855 5c08 	ldr.w	r5, [r5, #-8]
   89f22:	3708      	adds	r7, #8
   89f24:	1b5b      	subs	r3, r3, r5
   89f26:	1952      	adds	r2, r2, r5
   89f28:	689d      	ldr	r5, [r3, #8]
   89f2a:	42bd      	cmp	r5, r7
   89f2c:	d005      	beq.n	89f3a <_free_r+0x8a>
   89f2e:	68df      	ldr	r7, [r3, #12]
   89f30:	60ef      	str	r7, [r5, #12]
   89f32:	60bd      	str	r5, [r7, #8]
   89f34:	e002      	b.n	89f3c <_free_r+0x8c>
   89f36:	2100      	movs	r1, #0
   89f38:	e000      	b.n	89f3c <_free_r+0x8c>
   89f3a:	2101      	movs	r1, #1
   89f3c:	1825      	adds	r5, r4, r0
   89f3e:	686d      	ldr	r5, [r5, #4]
   89f40:	f015 0f01 	tst.w	r5, #1
   89f44:	d10f      	bne.n	89f66 <_free_r+0xb6>
   89f46:	1812      	adds	r2, r2, r0
   89f48:	b949      	cbnz	r1, 89f5e <_free_r+0xae>
   89f4a:	68a0      	ldr	r0, [r4, #8]
   89f4c:	4d32      	ldr	r5, [pc, #200]	; (8a018 <_free_r+0x168>)
   89f4e:	42a8      	cmp	r0, r5
   89f50:	d105      	bne.n	89f5e <_free_r+0xae>
   89f52:	60eb      	str	r3, [r5, #12]
   89f54:	60ab      	str	r3, [r5, #8]
   89f56:	60d8      	str	r0, [r3, #12]
   89f58:	6098      	str	r0, [r3, #8]
   89f5a:	2101      	movs	r1, #1
   89f5c:	e003      	b.n	89f66 <_free_r+0xb6>
   89f5e:	68e0      	ldr	r0, [r4, #12]
   89f60:	68a4      	ldr	r4, [r4, #8]
   89f62:	60e0      	str	r0, [r4, #12]
   89f64:	6084      	str	r4, [r0, #8]
   89f66:	f042 0001 	orr.w	r0, r2, #1
   89f6a:	6058      	str	r0, [r3, #4]
   89f6c:	509a      	str	r2, [r3, r2]
   89f6e:	2900      	cmp	r1, #0
   89f70:	d1ce      	bne.n	89f10 <_free_r+0x60>
   89f72:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   89f76:	d20c      	bcs.n	89f92 <_free_r+0xe2>
   89f78:	08d2      	lsrs	r2, r2, #3
   89f7a:	1090      	asrs	r0, r2, #2
   89f7c:	2401      	movs	r4, #1
   89f7e:	fa04 f400 	lsl.w	r4, r4, r0
   89f82:	4922      	ldr	r1, [pc, #136]	; (8a00c <_free_r+0x15c>)
   89f84:	6848      	ldr	r0, [r1, #4]
   89f86:	4320      	orrs	r0, r4
   89f88:	6048      	str	r0, [r1, #4]
   89f8a:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   89f8e:	6881      	ldr	r1, [r0, #8]
   89f90:	e035      	b.n	89ffe <_free_r+0x14e>
   89f92:	0a54      	lsrs	r4, r2, #9
   89f94:	2c04      	cmp	r4, #4
   89f96:	d802      	bhi.n	89f9e <_free_r+0xee>
   89f98:	0994      	lsrs	r4, r2, #6
   89f9a:	3438      	adds	r4, #56	; 0x38
   89f9c:	e016      	b.n	89fcc <_free_r+0x11c>
   89f9e:	2c14      	cmp	r4, #20
   89fa0:	d801      	bhi.n	89fa6 <_free_r+0xf6>
   89fa2:	345b      	adds	r4, #91	; 0x5b
   89fa4:	e012      	b.n	89fcc <_free_r+0x11c>
   89fa6:	2c54      	cmp	r4, #84	; 0x54
   89fa8:	d802      	bhi.n	89fb0 <_free_r+0x100>
   89faa:	0b14      	lsrs	r4, r2, #12
   89fac:	346e      	adds	r4, #110	; 0x6e
   89fae:	e00d      	b.n	89fcc <_free_r+0x11c>
   89fb0:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
   89fb4:	d802      	bhi.n	89fbc <_free_r+0x10c>
   89fb6:	0bd4      	lsrs	r4, r2, #15
   89fb8:	3477      	adds	r4, #119	; 0x77
   89fba:	e007      	b.n	89fcc <_free_r+0x11c>
   89fbc:	f240 5554 	movw	r5, #1364	; 0x554
   89fc0:	42ac      	cmp	r4, r5
   89fc2:	d802      	bhi.n	89fca <_free_r+0x11a>
   89fc4:	0c94      	lsrs	r4, r2, #18
   89fc6:	347c      	adds	r4, #124	; 0x7c
   89fc8:	e000      	b.n	89fcc <_free_r+0x11c>
   89fca:	247e      	movs	r4, #126	; 0x7e
   89fcc:	4d0f      	ldr	r5, [pc, #60]	; (8a00c <_free_r+0x15c>)
   89fce:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   89fd2:	6881      	ldr	r1, [r0, #8]
   89fd4:	4281      	cmp	r1, r0
   89fd6:	d10c      	bne.n	89ff2 <_free_r+0x142>
   89fd8:	2201      	movs	r2, #1
   89fda:	10a4      	asrs	r4, r4, #2
   89fdc:	fa02 f404 	lsl.w	r4, r2, r4
   89fe0:	6868      	ldr	r0, [r5, #4]
   89fe2:	ea44 0200 	orr.w	r2, r4, r0
   89fe6:	606a      	str	r2, [r5, #4]
   89fe8:	4608      	mov	r0, r1
   89fea:	e008      	b.n	89ffe <_free_r+0x14e>
   89fec:	6889      	ldr	r1, [r1, #8]
   89fee:	4281      	cmp	r1, r0
   89ff0:	d004      	beq.n	89ffc <_free_r+0x14c>
   89ff2:	684c      	ldr	r4, [r1, #4]
   89ff4:	f024 0403 	bic.w	r4, r4, #3
   89ff8:	42a2      	cmp	r2, r4
   89ffa:	d3f7      	bcc.n	89fec <_free_r+0x13c>
   89ffc:	68c8      	ldr	r0, [r1, #12]
   89ffe:	60d8      	str	r0, [r3, #12]
   8a000:	6099      	str	r1, [r3, #8]
   8a002:	6083      	str	r3, [r0, #8]
   8a004:	60cb      	str	r3, [r1, #12]
   8a006:	e783      	b.n	89f10 <_free_r+0x60>
   8a008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a00a:	bf00      	nop
   8a00c:	200706d0 	.word	0x200706d0
   8a010:	20070adc 	.word	0x20070adc
   8a014:	20071614 	.word	0x20071614
   8a018:	200706d8 	.word	0x200706d8

0008a01c <_malloc_r>:
   8a01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8a020:	f101 040b 	add.w	r4, r1, #11
   8a024:	2c16      	cmp	r4, #22
   8a026:	4606      	mov	r6, r0
   8a028:	d903      	bls.n	8a032 <_malloc_r+0x16>
   8a02a:	f034 0407 	bics.w	r4, r4, #7
   8a02e:	d501      	bpl.n	8a034 <_malloc_r+0x18>
   8a030:	e002      	b.n	8a038 <_malloc_r+0x1c>
   8a032:	2410      	movs	r4, #16
   8a034:	428c      	cmp	r4, r1
   8a036:	d202      	bcs.n	8a03e <_malloc_r+0x22>
   8a038:	250c      	movs	r5, #12
   8a03a:	6035      	str	r5, [r6, #0]
   8a03c:	e1d9      	b.n	8a3f2 <_malloc_r+0x3d6>
   8a03e:	4630      	mov	r0, r6
   8a040:	f000 f9fc 	bl	8a43c <__malloc_lock>
   8a044:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   8a048:	d214      	bcs.n	8a074 <_malloc_r+0x58>
   8a04a:	4da0      	ldr	r5, [pc, #640]	; (8a2cc <_malloc_r+0x2b0>)
   8a04c:	08e1      	lsrs	r1, r4, #3
   8a04e:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   8a052:	68c5      	ldr	r5, [r0, #12]
   8a054:	4285      	cmp	r5, r0
   8a056:	d105      	bne.n	8a064 <_malloc_r+0x48>
   8a058:	f105 0308 	add.w	r3, r5, #8
   8a05c:	696d      	ldr	r5, [r5, #20]
   8a05e:	1c8a      	adds	r2, r1, #2
   8a060:	429d      	cmp	r5, r3
   8a062:	d044      	beq.n	8a0ee <_malloc_r+0xd2>
   8a064:	68e8      	ldr	r0, [r5, #12]
   8a066:	68a9      	ldr	r1, [r5, #8]
   8a068:	686a      	ldr	r2, [r5, #4]
   8a06a:	60c8      	str	r0, [r1, #12]
   8a06c:	f022 0303 	bic.w	r3, r2, #3
   8a070:	6081      	str	r1, [r0, #8]
   8a072:	e059      	b.n	8a128 <_malloc_r+0x10c>
   8a074:	0a62      	lsrs	r2, r4, #9
   8a076:	d101      	bne.n	8a07c <_malloc_r+0x60>
   8a078:	08e2      	lsrs	r2, r4, #3
   8a07a:	e01b      	b.n	8a0b4 <_malloc_r+0x98>
   8a07c:	2a04      	cmp	r2, #4
   8a07e:	d802      	bhi.n	8a086 <_malloc_r+0x6a>
   8a080:	09a2      	lsrs	r2, r4, #6
   8a082:	3238      	adds	r2, #56	; 0x38
   8a084:	e016      	b.n	8a0b4 <_malloc_r+0x98>
   8a086:	2a14      	cmp	r2, #20
   8a088:	d801      	bhi.n	8a08e <_malloc_r+0x72>
   8a08a:	325b      	adds	r2, #91	; 0x5b
   8a08c:	e012      	b.n	8a0b4 <_malloc_r+0x98>
   8a08e:	2a54      	cmp	r2, #84	; 0x54
   8a090:	d802      	bhi.n	8a098 <_malloc_r+0x7c>
   8a092:	0b22      	lsrs	r2, r4, #12
   8a094:	326e      	adds	r2, #110	; 0x6e
   8a096:	e00d      	b.n	8a0b4 <_malloc_r+0x98>
   8a098:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8a09c:	d802      	bhi.n	8a0a4 <_malloc_r+0x88>
   8a09e:	0be2      	lsrs	r2, r4, #15
   8a0a0:	3277      	adds	r2, #119	; 0x77
   8a0a2:	e007      	b.n	8a0b4 <_malloc_r+0x98>
   8a0a4:	f240 5354 	movw	r3, #1364	; 0x554
   8a0a8:	429a      	cmp	r2, r3
   8a0aa:	d802      	bhi.n	8a0b2 <_malloc_r+0x96>
   8a0ac:	0ca2      	lsrs	r2, r4, #18
   8a0ae:	327c      	adds	r2, #124	; 0x7c
   8a0b0:	e000      	b.n	8a0b4 <_malloc_r+0x98>
   8a0b2:	227e      	movs	r2, #126	; 0x7e
   8a0b4:	4885      	ldr	r0, [pc, #532]	; (8a2cc <_malloc_r+0x2b0>)
   8a0b6:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
   8a0ba:	68dd      	ldr	r5, [r3, #12]
   8a0bc:	429d      	cmp	r5, r3
   8a0be:	d015      	beq.n	8a0ec <_malloc_r+0xd0>
   8a0c0:	6869      	ldr	r1, [r5, #4]
   8a0c2:	f021 0103 	bic.w	r1, r1, #3
   8a0c6:	1b08      	subs	r0, r1, r4
   8a0c8:	280f      	cmp	r0, #15
   8a0ca:	dd01      	ble.n	8a0d0 <_malloc_r+0xb4>
   8a0cc:	3a01      	subs	r2, #1
   8a0ce:	e00d      	b.n	8a0ec <_malloc_r+0xd0>
   8a0d0:	2800      	cmp	r0, #0
   8a0d2:	db09      	blt.n	8a0e8 <_malloc_r+0xcc>
   8a0d4:	68eb      	ldr	r3, [r5, #12]
   8a0d6:	68aa      	ldr	r2, [r5, #8]
   8a0d8:	60d3      	str	r3, [r2, #12]
   8a0da:	609a      	str	r2, [r3, #8]
   8a0dc:	186b      	adds	r3, r5, r1
   8a0de:	685a      	ldr	r2, [r3, #4]
   8a0e0:	f042 0001 	orr.w	r0, r2, #1
   8a0e4:	6058      	str	r0, [r3, #4]
   8a0e6:	e190      	b.n	8a40a <_malloc_r+0x3ee>
   8a0e8:	68ed      	ldr	r5, [r5, #12]
   8a0ea:	e7e7      	b.n	8a0bc <_malloc_r+0xa0>
   8a0ec:	3201      	adds	r2, #1
   8a0ee:	4977      	ldr	r1, [pc, #476]	; (8a2cc <_malloc_r+0x2b0>)
   8a0f0:	690d      	ldr	r5, [r1, #16]
   8a0f2:	f101 0708 	add.w	r7, r1, #8
   8a0f6:	42bd      	cmp	r5, r7
   8a0f8:	d068      	beq.n	8a1cc <_malloc_r+0x1b0>
   8a0fa:	6868      	ldr	r0, [r5, #4]
   8a0fc:	f020 0303 	bic.w	r3, r0, #3
   8a100:	1b18      	subs	r0, r3, r4
   8a102:	280f      	cmp	r0, #15
   8a104:	dd0c      	ble.n	8a120 <_malloc_r+0x104>
   8a106:	192b      	adds	r3, r5, r4
   8a108:	614b      	str	r3, [r1, #20]
   8a10a:	610b      	str	r3, [r1, #16]
   8a10c:	f044 0401 	orr.w	r4, r4, #1
   8a110:	f040 0101 	orr.w	r1, r0, #1
   8a114:	606c      	str	r4, [r5, #4]
   8a116:	60df      	str	r7, [r3, #12]
   8a118:	609f      	str	r7, [r3, #8]
   8a11a:	6059      	str	r1, [r3, #4]
   8a11c:	5018      	str	r0, [r3, r0]
   8a11e:	e174      	b.n	8a40a <_malloc_r+0x3ee>
   8a120:	2800      	cmp	r0, #0
   8a122:	614f      	str	r7, [r1, #20]
   8a124:	610f      	str	r7, [r1, #16]
   8a126:	db01      	blt.n	8a12c <_malloc_r+0x110>
   8a128:	18eb      	adds	r3, r5, r3
   8a12a:	e7d8      	b.n	8a0de <_malloc_r+0xc2>
   8a12c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8a130:	d20f      	bcs.n	8a152 <_malloc_r+0x136>
   8a132:	08db      	lsrs	r3, r3, #3
   8a134:	1098      	asrs	r0, r3, #2
   8a136:	2701      	movs	r7, #1
   8a138:	fa07 f700 	lsl.w	r7, r7, r0
   8a13c:	6848      	ldr	r0, [r1, #4]
   8a13e:	4307      	orrs	r7, r0
   8a140:	604f      	str	r7, [r1, #4]
   8a142:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   8a146:	688b      	ldr	r3, [r1, #8]
   8a148:	60e9      	str	r1, [r5, #12]
   8a14a:	60ab      	str	r3, [r5, #8]
   8a14c:	60dd      	str	r5, [r3, #12]
   8a14e:	608d      	str	r5, [r1, #8]
   8a150:	e03c      	b.n	8a1cc <_malloc_r+0x1b0>
   8a152:	0a58      	lsrs	r0, r3, #9
   8a154:	2804      	cmp	r0, #4
   8a156:	d802      	bhi.n	8a15e <_malloc_r+0x142>
   8a158:	0998      	lsrs	r0, r3, #6
   8a15a:	3038      	adds	r0, #56	; 0x38
   8a15c:	e016      	b.n	8a18c <_malloc_r+0x170>
   8a15e:	2814      	cmp	r0, #20
   8a160:	d801      	bhi.n	8a166 <_malloc_r+0x14a>
   8a162:	305b      	adds	r0, #91	; 0x5b
   8a164:	e012      	b.n	8a18c <_malloc_r+0x170>
   8a166:	2854      	cmp	r0, #84	; 0x54
   8a168:	d802      	bhi.n	8a170 <_malloc_r+0x154>
   8a16a:	0b18      	lsrs	r0, r3, #12
   8a16c:	306e      	adds	r0, #110	; 0x6e
   8a16e:	e00d      	b.n	8a18c <_malloc_r+0x170>
   8a170:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   8a174:	d802      	bhi.n	8a17c <_malloc_r+0x160>
   8a176:	0bd8      	lsrs	r0, r3, #15
   8a178:	3077      	adds	r0, #119	; 0x77
   8a17a:	e007      	b.n	8a18c <_malloc_r+0x170>
   8a17c:	f240 5754 	movw	r7, #1364	; 0x554
   8a180:	42b8      	cmp	r0, r7
   8a182:	d802      	bhi.n	8a18a <_malloc_r+0x16e>
   8a184:	0c98      	lsrs	r0, r3, #18
   8a186:	307c      	adds	r0, #124	; 0x7c
   8a188:	e000      	b.n	8a18c <_malloc_r+0x170>
   8a18a:	207e      	movs	r0, #126	; 0x7e
   8a18c:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8a2cc <_malloc_r+0x2b0>
   8a190:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
   8a194:	68b9      	ldr	r1, [r7, #8]
   8a196:	42b9      	cmp	r1, r7
   8a198:	d10e      	bne.n	8a1b8 <_malloc_r+0x19c>
   8a19a:	1087      	asrs	r7, r0, #2
   8a19c:	2301      	movs	r3, #1
   8a19e:	fa03 f007 	lsl.w	r0, r3, r7
   8a1a2:	f8de 7004 	ldr.w	r7, [lr, #4]
   8a1a6:	ea40 0307 	orr.w	r3, r0, r7
   8a1aa:	f8ce 3004 	str.w	r3, [lr, #4]
   8a1ae:	4608      	mov	r0, r1
   8a1b0:	e008      	b.n	8a1c4 <_malloc_r+0x1a8>
   8a1b2:	6889      	ldr	r1, [r1, #8]
   8a1b4:	42b9      	cmp	r1, r7
   8a1b6:	d004      	beq.n	8a1c2 <_malloc_r+0x1a6>
   8a1b8:	6848      	ldr	r0, [r1, #4]
   8a1ba:	f020 0003 	bic.w	r0, r0, #3
   8a1be:	4283      	cmp	r3, r0
   8a1c0:	d3f7      	bcc.n	8a1b2 <_malloc_r+0x196>
   8a1c2:	68c8      	ldr	r0, [r1, #12]
   8a1c4:	60e8      	str	r0, [r5, #12]
   8a1c6:	60a9      	str	r1, [r5, #8]
   8a1c8:	60cd      	str	r5, [r1, #12]
   8a1ca:	6085      	str	r5, [r0, #8]
   8a1cc:	1095      	asrs	r5, r2, #2
   8a1ce:	2001      	movs	r0, #1
   8a1d0:	fa00 f305 	lsl.w	r3, r0, r5
   8a1d4:	4f3d      	ldr	r7, [pc, #244]	; (8a2cc <_malloc_r+0x2b0>)
   8a1d6:	6879      	ldr	r1, [r7, #4]
   8a1d8:	428b      	cmp	r3, r1
   8a1da:	d85d      	bhi.n	8a298 <_malloc_r+0x27c>
   8a1dc:	420b      	tst	r3, r1
   8a1de:	d105      	bne.n	8a1ec <_malloc_r+0x1d0>
   8a1e0:	f022 0203 	bic.w	r2, r2, #3
   8a1e4:	005b      	lsls	r3, r3, #1
   8a1e6:	3204      	adds	r2, #4
   8a1e8:	420b      	tst	r3, r1
   8a1ea:	d0fb      	beq.n	8a1e4 <_malloc_r+0x1c8>
   8a1ec:	4d37      	ldr	r5, [pc, #220]	; (8a2cc <_malloc_r+0x2b0>)
   8a1ee:	4610      	mov	r0, r2
   8a1f0:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
   8a1f4:	4677      	mov	r7, lr
   8a1f6:	68fd      	ldr	r5, [r7, #12]
   8a1f8:	42bd      	cmp	r5, r7
   8a1fa:	d02d      	beq.n	8a258 <_malloc_r+0x23c>
   8a1fc:	6869      	ldr	r1, [r5, #4]
   8a1fe:	f021 0c03 	bic.w	ip, r1, #3
   8a202:	ebc4 010c 	rsb	r1, r4, ip
   8a206:	290f      	cmp	r1, #15
   8a208:	dd13      	ble.n	8a232 <_malloc_r+0x216>
   8a20a:	192b      	adds	r3, r5, r4
   8a20c:	f044 0401 	orr.w	r4, r4, #1
   8a210:	68ea      	ldr	r2, [r5, #12]
   8a212:	606c      	str	r4, [r5, #4]
   8a214:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8a218:	5059      	str	r1, [r3, r1]
   8a21a:	60c2      	str	r2, [r0, #12]
   8a21c:	6090      	str	r0, [r2, #8]
   8a21e:	4a2b      	ldr	r2, [pc, #172]	; (8a2cc <_malloc_r+0x2b0>)
   8a220:	f041 0001 	orr.w	r0, r1, #1
   8a224:	6153      	str	r3, [r2, #20]
   8a226:	6113      	str	r3, [r2, #16]
   8a228:	3208      	adds	r2, #8
   8a22a:	60da      	str	r2, [r3, #12]
   8a22c:	609a      	str	r2, [r3, #8]
   8a22e:	6058      	str	r0, [r3, #4]
   8a230:	e00c      	b.n	8a24c <_malloc_r+0x230>
   8a232:	2900      	cmp	r1, #0
   8a234:	db0e      	blt.n	8a254 <_malloc_r+0x238>
   8a236:	eb05 000c 	add.w	r0, r5, ip
   8a23a:	6842      	ldr	r2, [r0, #4]
   8a23c:	68e9      	ldr	r1, [r5, #12]
   8a23e:	f042 0301 	orr.w	r3, r2, #1
   8a242:	6043      	str	r3, [r0, #4]
   8a244:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8a248:	60c1      	str	r1, [r0, #12]
   8a24a:	6088      	str	r0, [r1, #8]
   8a24c:	4630      	mov	r0, r6
   8a24e:	f000 f8f6 	bl	8a43e <__malloc_unlock>
   8a252:	e0de      	b.n	8a412 <_malloc_r+0x3f6>
   8a254:	68ed      	ldr	r5, [r5, #12]
   8a256:	e7cf      	b.n	8a1f8 <_malloc_r+0x1dc>
   8a258:	3001      	adds	r0, #1
   8a25a:	0781      	lsls	r1, r0, #30
   8a25c:	f105 0708 	add.w	r7, r5, #8
   8a260:	d1c9      	bne.n	8a1f6 <_malloc_r+0x1da>
   8a262:	4671      	mov	r1, lr
   8a264:	0795      	lsls	r5, r2, #30
   8a266:	d105      	bne.n	8a274 <_malloc_r+0x258>
   8a268:	4a18      	ldr	r2, [pc, #96]	; (8a2cc <_malloc_r+0x2b0>)
   8a26a:	6855      	ldr	r5, [r2, #4]
   8a26c:	ea25 0503 	bic.w	r5, r5, r3
   8a270:	6055      	str	r5, [r2, #4]
   8a272:	e005      	b.n	8a280 <_malloc_r+0x264>
   8a274:	f1a1 0708 	sub.w	r7, r1, #8
   8a278:	6809      	ldr	r1, [r1, #0]
   8a27a:	3a01      	subs	r2, #1
   8a27c:	42b9      	cmp	r1, r7
   8a27e:	d0f1      	beq.n	8a264 <_malloc_r+0x248>
   8a280:	4f12      	ldr	r7, [pc, #72]	; (8a2cc <_malloc_r+0x2b0>)
   8a282:	005b      	lsls	r3, r3, #1
   8a284:	687f      	ldr	r7, [r7, #4]
   8a286:	42bb      	cmp	r3, r7
   8a288:	d806      	bhi.n	8a298 <_malloc_r+0x27c>
   8a28a:	b12b      	cbz	r3, 8a298 <_malloc_r+0x27c>
   8a28c:	4602      	mov	r2, r0
   8a28e:	423b      	tst	r3, r7
   8a290:	d1ac      	bne.n	8a1ec <_malloc_r+0x1d0>
   8a292:	3204      	adds	r2, #4
   8a294:	005b      	lsls	r3, r3, #1
   8a296:	e7fa      	b.n	8a28e <_malloc_r+0x272>
   8a298:	4b0c      	ldr	r3, [pc, #48]	; (8a2cc <_malloc_r+0x2b0>)
   8a29a:	689f      	ldr	r7, [r3, #8]
   8a29c:	4619      	mov	r1, r3
   8a29e:	6878      	ldr	r0, [r7, #4]
   8a2a0:	f020 0903 	bic.w	r9, r0, #3
   8a2a4:	45a1      	cmp	r9, r4
   8a2a6:	d304      	bcc.n	8a2b2 <_malloc_r+0x296>
   8a2a8:	ebc4 0009 	rsb	r0, r4, r9
   8a2ac:	280f      	cmp	r0, #15
   8a2ae:	f300 80a2 	bgt.w	8a3f6 <_malloc_r+0x3da>
   8a2b2:	4a07      	ldr	r2, [pc, #28]	; (8a2d0 <_malloc_r+0x2b4>)
   8a2b4:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
   8a2b8:	6815      	ldr	r5, [r2, #0]
   8a2ba:	3301      	adds	r3, #1
   8a2bc:	eb07 0a09 	add.w	sl, r7, r9
   8a2c0:	eb04 0805 	add.w	r8, r4, r5
   8a2c4:	d106      	bne.n	8a2d4 <_malloc_r+0x2b8>
   8a2c6:	f108 0810 	add.w	r8, r8, #16
   8a2ca:	e00b      	b.n	8a2e4 <_malloc_r+0x2c8>
   8a2cc:	200706d0 	.word	0x200706d0
   8a2d0:	20071614 	.word	0x20071614
   8a2d4:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   8a2d8:	f100 010f 	add.w	r1, r0, #15
   8a2dc:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   8a2e0:	f022 080f 	bic.w	r8, r2, #15
   8a2e4:	4630      	mov	r0, r6
   8a2e6:	4641      	mov	r1, r8
   8a2e8:	f000 fa18 	bl	8a71c <_sbrk_r>
   8a2ec:	1c42      	adds	r2, r0, #1
   8a2ee:	4605      	mov	r5, r0
   8a2f0:	d071      	beq.n	8a3d6 <_malloc_r+0x3ba>
   8a2f2:	4550      	cmp	r0, sl
   8a2f4:	d202      	bcs.n	8a2fc <_malloc_r+0x2e0>
   8a2f6:	4b48      	ldr	r3, [pc, #288]	; (8a418 <_malloc_r+0x3fc>)
   8a2f8:	429f      	cmp	r7, r3
   8a2fa:	d16c      	bne.n	8a3d6 <_malloc_r+0x3ba>
   8a2fc:	4847      	ldr	r0, [pc, #284]	; (8a41c <_malloc_r+0x400>)
   8a2fe:	4555      	cmp	r5, sl
   8a300:	6841      	ldr	r1, [r0, #4]
   8a302:	4a45      	ldr	r2, [pc, #276]	; (8a418 <_malloc_r+0x3fc>)
   8a304:	eb08 0301 	add.w	r3, r8, r1
   8a308:	6043      	str	r3, [r0, #4]
   8a30a:	d107      	bne.n	8a31c <_malloc_r+0x300>
   8a30c:	0529      	lsls	r1, r5, #20
   8a30e:	d105      	bne.n	8a31c <_malloc_r+0x300>
   8a310:	6895      	ldr	r5, [r2, #8]
   8a312:	44c8      	add	r8, r9
   8a314:	f048 0001 	orr.w	r0, r8, #1
   8a318:	6068      	str	r0, [r5, #4]
   8a31a:	e051      	b.n	8a3c0 <_malloc_r+0x3a4>
   8a31c:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   8a320:	1c42      	adds	r2, r0, #1
   8a322:	d103      	bne.n	8a32c <_malloc_r+0x310>
   8a324:	4a3c      	ldr	r2, [pc, #240]	; (8a418 <_malloc_r+0x3fc>)
   8a326:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
   8a32a:	e005      	b.n	8a338 <_malloc_r+0x31c>
   8a32c:	ebca 0a05 	rsb	sl, sl, r5
   8a330:	eb03 010a 	add.w	r1, r3, sl
   8a334:	4b39      	ldr	r3, [pc, #228]	; (8a41c <_malloc_r+0x400>)
   8a336:	6059      	str	r1, [r3, #4]
   8a338:	f015 0007 	ands.w	r0, r5, #7
   8a33c:	bf1c      	itt	ne
   8a33e:	f1c0 0008 	rsbne	r0, r0, #8
   8a342:	182d      	addne	r5, r5, r0
   8a344:	eb05 0c08 	add.w	ip, r5, r8
   8a348:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   8a34c:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
   8a350:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
   8a354:	4641      	mov	r1, r8
   8a356:	4630      	mov	r0, r6
   8a358:	f000 f9e0 	bl	8a71c <_sbrk_r>
   8a35c:	4a2f      	ldr	r2, [pc, #188]	; (8a41c <_malloc_r+0x400>)
   8a35e:	1c43      	adds	r3, r0, #1
   8a360:	6853      	ldr	r3, [r2, #4]
   8a362:	bf08      	it	eq
   8a364:	f04f 0800 	moveq.w	r8, #0
   8a368:	eb08 0103 	add.w	r1, r8, r3
   8a36c:	bf08      	it	eq
   8a36e:	4628      	moveq	r0, r5
   8a370:	6051      	str	r1, [r2, #4]
   8a372:	1b40      	subs	r0, r0, r5
   8a374:	4a28      	ldr	r2, [pc, #160]	; (8a418 <_malloc_r+0x3fc>)
   8a376:	eb00 0308 	add.w	r3, r0, r8
   8a37a:	f043 0101 	orr.w	r1, r3, #1
   8a37e:	4297      	cmp	r7, r2
   8a380:	6095      	str	r5, [r2, #8]
   8a382:	6069      	str	r1, [r5, #4]
   8a384:	d01c      	beq.n	8a3c0 <_malloc_r+0x3a4>
   8a386:	f1b9 0f0f 	cmp.w	r9, #15
   8a38a:	d802      	bhi.n	8a392 <_malloc_r+0x376>
   8a38c:	2201      	movs	r2, #1
   8a38e:	606a      	str	r2, [r5, #4]
   8a390:	e021      	b.n	8a3d6 <_malloc_r+0x3ba>
   8a392:	687d      	ldr	r5, [r7, #4]
   8a394:	f1a9 090c 	sub.w	r9, r9, #12
   8a398:	f029 0907 	bic.w	r9, r9, #7
   8a39c:	f005 0201 	and.w	r2, r5, #1
   8a3a0:	2105      	movs	r1, #5
   8a3a2:	eb07 0309 	add.w	r3, r7, r9
   8a3a6:	ea49 0002 	orr.w	r0, r9, r2
   8a3aa:	f1b9 0f0f 	cmp.w	r9, #15
   8a3ae:	6078      	str	r0, [r7, #4]
   8a3b0:	6059      	str	r1, [r3, #4]
   8a3b2:	6099      	str	r1, [r3, #8]
   8a3b4:	d904      	bls.n	8a3c0 <_malloc_r+0x3a4>
   8a3b6:	4630      	mov	r0, r6
   8a3b8:	f107 0108 	add.w	r1, r7, #8
   8a3bc:	f7ff fd78 	bl	89eb0 <_free_r>
   8a3c0:	4a16      	ldr	r2, [pc, #88]	; (8a41c <_malloc_r+0x400>)
   8a3c2:	6853      	ldr	r3, [r2, #4]
   8a3c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   8a3c6:	6b15      	ldr	r5, [r2, #48]	; 0x30
   8a3c8:	428b      	cmp	r3, r1
   8a3ca:	bf88      	it	hi
   8a3cc:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   8a3ce:	42ab      	cmp	r3, r5
   8a3d0:	bf84      	itt	hi
   8a3d2:	4d12      	ldrhi	r5, [pc, #72]	; (8a41c <_malloc_r+0x400>)
   8a3d4:	632b      	strhi	r3, [r5, #48]	; 0x30
   8a3d6:	4810      	ldr	r0, [pc, #64]	; (8a418 <_malloc_r+0x3fc>)
   8a3d8:	6882      	ldr	r2, [r0, #8]
   8a3da:	6853      	ldr	r3, [r2, #4]
   8a3dc:	f023 0103 	bic.w	r1, r3, #3
   8a3e0:	42a1      	cmp	r1, r4
   8a3e2:	ebc4 0001 	rsb	r0, r4, r1
   8a3e6:	d301      	bcc.n	8a3ec <_malloc_r+0x3d0>
   8a3e8:	280f      	cmp	r0, #15
   8a3ea:	dc04      	bgt.n	8a3f6 <_malloc_r+0x3da>
   8a3ec:	4630      	mov	r0, r6
   8a3ee:	f000 f826 	bl	8a43e <__malloc_unlock>
   8a3f2:	2500      	movs	r5, #0
   8a3f4:	e00d      	b.n	8a412 <_malloc_r+0x3f6>
   8a3f6:	4a08      	ldr	r2, [pc, #32]	; (8a418 <_malloc_r+0x3fc>)
   8a3f8:	f044 0301 	orr.w	r3, r4, #1
   8a3fc:	6895      	ldr	r5, [r2, #8]
   8a3fe:	f040 0101 	orr.w	r1, r0, #1
   8a402:	192c      	adds	r4, r5, r4
   8a404:	606b      	str	r3, [r5, #4]
   8a406:	6094      	str	r4, [r2, #8]
   8a408:	6061      	str	r1, [r4, #4]
   8a40a:	4630      	mov	r0, r6
   8a40c:	f000 f817 	bl	8a43e <__malloc_unlock>
   8a410:	3508      	adds	r5, #8
   8a412:	4628      	mov	r0, r5
   8a414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8a418:	200706d0 	.word	0x200706d0
   8a41c:	20071614 	.word	0x20071614

0008a420 <memchr>:
   8a420:	b510      	push	{r4, lr}
   8a422:	b2c9      	uxtb	r1, r1
   8a424:	4603      	mov	r3, r0
   8a426:	1882      	adds	r2, r0, r2
   8a428:	4293      	cmp	r3, r2
   8a42a:	4618      	mov	r0, r3
   8a42c:	d004      	beq.n	8a438 <memchr+0x18>
   8a42e:	7804      	ldrb	r4, [r0, #0]
   8a430:	3301      	adds	r3, #1
   8a432:	428c      	cmp	r4, r1
   8a434:	d1f8      	bne.n	8a428 <memchr+0x8>
   8a436:	e000      	b.n	8a43a <memchr+0x1a>
   8a438:	2000      	movs	r0, #0
   8a43a:	bd10      	pop	{r4, pc}

0008a43c <__malloc_lock>:
   8a43c:	4770      	bx	lr

0008a43e <__malloc_unlock>:
   8a43e:	4770      	bx	lr

0008a440 <_realloc_r>:
   8a440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a444:	4681      	mov	r9, r0
   8a446:	4616      	mov	r6, r2
   8a448:	460c      	mov	r4, r1
   8a44a:	b921      	cbnz	r1, 8a456 <_realloc_r+0x16>
   8a44c:	4611      	mov	r1, r2
   8a44e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a452:	f7ff bde3 	b.w	8a01c <_malloc_r>
   8a456:	f7ff fff1 	bl	8a43c <__malloc_lock>
   8a45a:	f106 070b 	add.w	r7, r6, #11
   8a45e:	f854 5c04 	ldr.w	r5, [r4, #-4]
   8a462:	2f16      	cmp	r7, #22
   8a464:	f1a4 0b08 	sub.w	fp, r4, #8
   8a468:	f025 0803 	bic.w	r8, r5, #3
   8a46c:	d903      	bls.n	8a476 <_realloc_r+0x36>
   8a46e:	f037 0707 	bics.w	r7, r7, #7
   8a472:	d501      	bpl.n	8a478 <_realloc_r+0x38>
   8a474:	e002      	b.n	8a47c <_realloc_r+0x3c>
   8a476:	2710      	movs	r7, #16
   8a478:	42b7      	cmp	r7, r6
   8a47a:	d204      	bcs.n	8a486 <_realloc_r+0x46>
   8a47c:	200c      	movs	r0, #12
   8a47e:	f8c9 0000 	str.w	r0, [r9]
   8a482:	2600      	movs	r6, #0
   8a484:	e145      	b.n	8a712 <_realloc_r+0x2d2>
   8a486:	45b8      	cmp	r8, r7
   8a488:	f280 811a 	bge.w	8a6c0 <_realloc_r+0x280>
   8a48c:	4aa2      	ldr	r2, [pc, #648]	; (8a718 <_realloc_r+0x2d8>)
   8a48e:	eb0b 0308 	add.w	r3, fp, r8
   8a492:	6891      	ldr	r1, [r2, #8]
   8a494:	428b      	cmp	r3, r1
   8a496:	d006      	beq.n	8a4a6 <_realloc_r+0x66>
   8a498:	6858      	ldr	r0, [r3, #4]
   8a49a:	f020 0201 	bic.w	r2, r0, #1
   8a49e:	1898      	adds	r0, r3, r2
   8a4a0:	6842      	ldr	r2, [r0, #4]
   8a4a2:	07d0      	lsls	r0, r2, #31
   8a4a4:	d426      	bmi.n	8a4f4 <_realloc_r+0xb4>
   8a4a6:	685a      	ldr	r2, [r3, #4]
   8a4a8:	428b      	cmp	r3, r1
   8a4aa:	f022 0003 	bic.w	r0, r2, #3
   8a4ae:	eb00 0a08 	add.w	sl, r0, r8
   8a4b2:	d118      	bne.n	8a4e6 <_realloc_r+0xa6>
   8a4b4:	f107 0210 	add.w	r2, r7, #16
   8a4b8:	4592      	cmp	sl, r2
   8a4ba:	db1d      	blt.n	8a4f8 <_realloc_r+0xb8>
   8a4bc:	ebc7 0a0a 	rsb	sl, r7, sl
   8a4c0:	eb0b 0507 	add.w	r5, fp, r7
   8a4c4:	f04a 0101 	orr.w	r1, sl, #1
   8a4c8:	6069      	str	r1, [r5, #4]
   8a4ca:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8a4ce:	4e92      	ldr	r6, [pc, #584]	; (8a718 <_realloc_r+0x2d8>)
   8a4d0:	f002 0301 	and.w	r3, r2, #1
   8a4d4:	431f      	orrs	r7, r3
   8a4d6:	60b5      	str	r5, [r6, #8]
   8a4d8:	f844 7c04 	str.w	r7, [r4, #-4]
   8a4dc:	4648      	mov	r0, r9
   8a4de:	f7ff ffae 	bl	8a43e <__malloc_unlock>
   8a4e2:	4626      	mov	r6, r4
   8a4e4:	e115      	b.n	8a712 <_realloc_r+0x2d2>
   8a4e6:	45ba      	cmp	sl, r7
   8a4e8:	db06      	blt.n	8a4f8 <_realloc_r+0xb8>
   8a4ea:	68dd      	ldr	r5, [r3, #12]
   8a4ec:	689e      	ldr	r6, [r3, #8]
   8a4ee:	60f5      	str	r5, [r6, #12]
   8a4f0:	60ae      	str	r6, [r5, #8]
   8a4f2:	e0e6      	b.n	8a6c2 <_realloc_r+0x282>
   8a4f4:	2000      	movs	r0, #0
   8a4f6:	4603      	mov	r3, r0
   8a4f8:	07ea      	lsls	r2, r5, #31
   8a4fa:	f100 8091 	bmi.w	8a620 <_realloc_r+0x1e0>
   8a4fe:	f854 5c08 	ldr.w	r5, [r4, #-8]
   8a502:	ebc5 050b 	rsb	r5, r5, fp
   8a506:	686a      	ldr	r2, [r5, #4]
   8a508:	f022 0203 	bic.w	r2, r2, #3
   8a50c:	2b00      	cmp	r3, #0
   8a50e:	d051      	beq.n	8a5b4 <_realloc_r+0x174>
   8a510:	eb02 0a08 	add.w	sl, r2, r8
   8a514:	428b      	cmp	r3, r1
   8a516:	4482      	add	sl, r0
   8a518:	d145      	bne.n	8a5a6 <_realloc_r+0x166>
   8a51a:	f107 0310 	add.w	r3, r7, #16
   8a51e:	459a      	cmp	sl, r3
   8a520:	db48      	blt.n	8a5b4 <_realloc_r+0x174>
   8a522:	462e      	mov	r6, r5
   8a524:	68e9      	ldr	r1, [r5, #12]
   8a526:	f856 3f08 	ldr.w	r3, [r6, #8]!
   8a52a:	f1a8 0204 	sub.w	r2, r8, #4
   8a52e:	2a24      	cmp	r2, #36	; 0x24
   8a530:	60d9      	str	r1, [r3, #12]
   8a532:	608b      	str	r3, [r1, #8]
   8a534:	d825      	bhi.n	8a582 <_realloc_r+0x142>
   8a536:	2a13      	cmp	r2, #19
   8a538:	d91b      	bls.n	8a572 <_realloc_r+0x132>
   8a53a:	6821      	ldr	r1, [r4, #0]
   8a53c:	2a1b      	cmp	r2, #27
   8a53e:	60a9      	str	r1, [r5, #8]
   8a540:	6863      	ldr	r3, [r4, #4]
   8a542:	60eb      	str	r3, [r5, #12]
   8a544:	d803      	bhi.n	8a54e <_realloc_r+0x10e>
   8a546:	f105 0010 	add.w	r0, r5, #16
   8a54a:	3408      	adds	r4, #8
   8a54c:	e012      	b.n	8a574 <_realloc_r+0x134>
   8a54e:	68a0      	ldr	r0, [r4, #8]
   8a550:	2a24      	cmp	r2, #36	; 0x24
   8a552:	6128      	str	r0, [r5, #16]
   8a554:	68e1      	ldr	r1, [r4, #12]
   8a556:	6169      	str	r1, [r5, #20]
   8a558:	d003      	beq.n	8a562 <_realloc_r+0x122>
   8a55a:	f105 0018 	add.w	r0, r5, #24
   8a55e:	3410      	adds	r4, #16
   8a560:	e008      	b.n	8a574 <_realloc_r+0x134>
   8a562:	6922      	ldr	r2, [r4, #16]
   8a564:	f105 0020 	add.w	r0, r5, #32
   8a568:	61aa      	str	r2, [r5, #24]
   8a56a:	6963      	ldr	r3, [r4, #20]
   8a56c:	3418      	adds	r4, #24
   8a56e:	61eb      	str	r3, [r5, #28]
   8a570:	e000      	b.n	8a574 <_realloc_r+0x134>
   8a572:	4630      	mov	r0, r6
   8a574:	6821      	ldr	r1, [r4, #0]
   8a576:	6001      	str	r1, [r0, #0]
   8a578:	6862      	ldr	r2, [r4, #4]
   8a57a:	6042      	str	r2, [r0, #4]
   8a57c:	68a3      	ldr	r3, [r4, #8]
   8a57e:	6083      	str	r3, [r0, #8]
   8a580:	e003      	b.n	8a58a <_realloc_r+0x14a>
   8a582:	4630      	mov	r0, r6
   8a584:	4621      	mov	r1, r4
   8a586:	f7fe feda 	bl	8933e <memmove>
   8a58a:	ebc7 0a0a 	rsb	sl, r7, sl
   8a58e:	19e8      	adds	r0, r5, r7
   8a590:	f04a 0201 	orr.w	r2, sl, #1
   8a594:	6042      	str	r2, [r0, #4]
   8a596:	686b      	ldr	r3, [r5, #4]
   8a598:	495f      	ldr	r1, [pc, #380]	; (8a718 <_realloc_r+0x2d8>)
   8a59a:	6088      	str	r0, [r1, #8]
   8a59c:	f003 0001 	and.w	r0, r3, #1
   8a5a0:	4307      	orrs	r7, r0
   8a5a2:	606f      	str	r7, [r5, #4]
   8a5a4:	e088      	b.n	8a6b8 <_realloc_r+0x278>
   8a5a6:	45ba      	cmp	sl, r7
   8a5a8:	db04      	blt.n	8a5b4 <_realloc_r+0x174>
   8a5aa:	68d9      	ldr	r1, [r3, #12]
   8a5ac:	6898      	ldr	r0, [r3, #8]
   8a5ae:	60c1      	str	r1, [r0, #12]
   8a5b0:	6088      	str	r0, [r1, #8]
   8a5b2:	e003      	b.n	8a5bc <_realloc_r+0x17c>
   8a5b4:	eb02 0a08 	add.w	sl, r2, r8
   8a5b8:	45ba      	cmp	sl, r7
   8a5ba:	db31      	blt.n	8a620 <_realloc_r+0x1e0>
   8a5bc:	4628      	mov	r0, r5
   8a5be:	68eb      	ldr	r3, [r5, #12]
   8a5c0:	f850 1f08 	ldr.w	r1, [r0, #8]!
   8a5c4:	f1a8 0204 	sub.w	r2, r8, #4
   8a5c8:	2a24      	cmp	r2, #36	; 0x24
   8a5ca:	60cb      	str	r3, [r1, #12]
   8a5cc:	6099      	str	r1, [r3, #8]
   8a5ce:	d823      	bhi.n	8a618 <_realloc_r+0x1d8>
   8a5d0:	2a13      	cmp	r2, #19
   8a5d2:	d91a      	bls.n	8a60a <_realloc_r+0x1ca>
   8a5d4:	6820      	ldr	r0, [r4, #0]
   8a5d6:	2a1b      	cmp	r2, #27
   8a5d8:	60a8      	str	r0, [r5, #8]
   8a5da:	6866      	ldr	r6, [r4, #4]
   8a5dc:	60ee      	str	r6, [r5, #12]
   8a5de:	d803      	bhi.n	8a5e8 <_realloc_r+0x1a8>
   8a5e0:	f105 0010 	add.w	r0, r5, #16
   8a5e4:	3408      	adds	r4, #8
   8a5e6:	e010      	b.n	8a60a <_realloc_r+0x1ca>
   8a5e8:	68a3      	ldr	r3, [r4, #8]
   8a5ea:	2a24      	cmp	r2, #36	; 0x24
   8a5ec:	612b      	str	r3, [r5, #16]
   8a5ee:	68e1      	ldr	r1, [r4, #12]
   8a5f0:	6169      	str	r1, [r5, #20]
   8a5f2:	d003      	beq.n	8a5fc <_realloc_r+0x1bc>
   8a5f4:	f105 0018 	add.w	r0, r5, #24
   8a5f8:	3410      	adds	r4, #16
   8a5fa:	e006      	b.n	8a60a <_realloc_r+0x1ca>
   8a5fc:	6922      	ldr	r2, [r4, #16]
   8a5fe:	61aa      	str	r2, [r5, #24]
   8a600:	6960      	ldr	r0, [r4, #20]
   8a602:	3418      	adds	r4, #24
   8a604:	61e8      	str	r0, [r5, #28]
   8a606:	f105 0020 	add.w	r0, r5, #32
   8a60a:	6826      	ldr	r6, [r4, #0]
   8a60c:	6006      	str	r6, [r0, #0]
   8a60e:	6863      	ldr	r3, [r4, #4]
   8a610:	6043      	str	r3, [r0, #4]
   8a612:	68a1      	ldr	r1, [r4, #8]
   8a614:	6081      	str	r1, [r0, #8]
   8a616:	e055      	b.n	8a6c4 <_realloc_r+0x284>
   8a618:	4621      	mov	r1, r4
   8a61a:	f7fe fe90 	bl	8933e <memmove>
   8a61e:	e051      	b.n	8a6c4 <_realloc_r+0x284>
   8a620:	4631      	mov	r1, r6
   8a622:	4648      	mov	r0, r9
   8a624:	f7ff fcfa 	bl	8a01c <_malloc_r>
   8a628:	4606      	mov	r6, r0
   8a62a:	2800      	cmp	r0, #0
   8a62c:	d044      	beq.n	8a6b8 <_realloc_r+0x278>
   8a62e:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8a632:	f1a0 0208 	sub.w	r2, r0, #8
   8a636:	f021 0301 	bic.w	r3, r1, #1
   8a63a:	eb0b 0103 	add.w	r1, fp, r3
   8a63e:	428a      	cmp	r2, r1
   8a640:	d106      	bne.n	8a650 <_realloc_r+0x210>
   8a642:	f850 6c04 	ldr.w	r6, [r0, #-4]
   8a646:	f026 0503 	bic.w	r5, r6, #3
   8a64a:	eb05 0a08 	add.w	sl, r5, r8
   8a64e:	e038      	b.n	8a6c2 <_realloc_r+0x282>
   8a650:	f1a8 0204 	sub.w	r2, r8, #4
   8a654:	2a24      	cmp	r2, #36	; 0x24
   8a656:	d828      	bhi.n	8a6aa <_realloc_r+0x26a>
   8a658:	2a13      	cmp	r2, #19
   8a65a:	d91e      	bls.n	8a69a <_realloc_r+0x25a>
   8a65c:	6823      	ldr	r3, [r4, #0]
   8a65e:	2a1b      	cmp	r2, #27
   8a660:	6003      	str	r3, [r0, #0]
   8a662:	6861      	ldr	r1, [r4, #4]
   8a664:	6041      	str	r1, [r0, #4]
   8a666:	d804      	bhi.n	8a672 <_realloc_r+0x232>
   8a668:	f100 0008 	add.w	r0, r0, #8
   8a66c:	f104 0208 	add.w	r2, r4, #8
   8a670:	e014      	b.n	8a69c <_realloc_r+0x25c>
   8a672:	68a0      	ldr	r0, [r4, #8]
   8a674:	2a24      	cmp	r2, #36	; 0x24
   8a676:	60b0      	str	r0, [r6, #8]
   8a678:	68e3      	ldr	r3, [r4, #12]
   8a67a:	60f3      	str	r3, [r6, #12]
   8a67c:	d004      	beq.n	8a688 <_realloc_r+0x248>
   8a67e:	f106 0010 	add.w	r0, r6, #16
   8a682:	f104 0210 	add.w	r2, r4, #16
   8a686:	e009      	b.n	8a69c <_realloc_r+0x25c>
   8a688:	6922      	ldr	r2, [r4, #16]
   8a68a:	f106 0018 	add.w	r0, r6, #24
   8a68e:	6132      	str	r2, [r6, #16]
   8a690:	6961      	ldr	r1, [r4, #20]
   8a692:	f104 0218 	add.w	r2, r4, #24
   8a696:	6171      	str	r1, [r6, #20]
   8a698:	e000      	b.n	8a69c <_realloc_r+0x25c>
   8a69a:	4622      	mov	r2, r4
   8a69c:	6813      	ldr	r3, [r2, #0]
   8a69e:	6003      	str	r3, [r0, #0]
   8a6a0:	6851      	ldr	r1, [r2, #4]
   8a6a2:	6041      	str	r1, [r0, #4]
   8a6a4:	6892      	ldr	r2, [r2, #8]
   8a6a6:	6082      	str	r2, [r0, #8]
   8a6a8:	e002      	b.n	8a6b0 <_realloc_r+0x270>
   8a6aa:	4621      	mov	r1, r4
   8a6ac:	f7fe fe47 	bl	8933e <memmove>
   8a6b0:	4648      	mov	r0, r9
   8a6b2:	4621      	mov	r1, r4
   8a6b4:	f7ff fbfc 	bl	89eb0 <_free_r>
   8a6b8:	4648      	mov	r0, r9
   8a6ba:	f7ff fec0 	bl	8a43e <__malloc_unlock>
   8a6be:	e028      	b.n	8a712 <_realloc_r+0x2d2>
   8a6c0:	46c2      	mov	sl, r8
   8a6c2:	465d      	mov	r5, fp
   8a6c4:	ebc7 000a 	rsb	r0, r7, sl
   8a6c8:	280f      	cmp	r0, #15
   8a6ca:	686a      	ldr	r2, [r5, #4]
   8a6cc:	d911      	bls.n	8a6f2 <_realloc_r+0x2b2>
   8a6ce:	f002 0601 	and.w	r6, r2, #1
   8a6d2:	19e9      	adds	r1, r5, r7
   8a6d4:	f040 0301 	orr.w	r3, r0, #1
   8a6d8:	4337      	orrs	r7, r6
   8a6da:	606f      	str	r7, [r5, #4]
   8a6dc:	1808      	adds	r0, r1, r0
   8a6de:	604b      	str	r3, [r1, #4]
   8a6e0:	6842      	ldr	r2, [r0, #4]
   8a6e2:	3108      	adds	r1, #8
   8a6e4:	f042 0601 	orr.w	r6, r2, #1
   8a6e8:	6046      	str	r6, [r0, #4]
   8a6ea:	4648      	mov	r0, r9
   8a6ec:	f7ff fbe0 	bl	89eb0 <_free_r>
   8a6f0:	e00a      	b.n	8a708 <_realloc_r+0x2c8>
   8a6f2:	f002 0601 	and.w	r6, r2, #1
   8a6f6:	ea4a 0306 	orr.w	r3, sl, r6
   8a6fa:	606b      	str	r3, [r5, #4]
   8a6fc:	eb05 010a 	add.w	r1, r5, sl
   8a700:	6848      	ldr	r0, [r1, #4]
   8a702:	f040 0201 	orr.w	r2, r0, #1
   8a706:	604a      	str	r2, [r1, #4]
   8a708:	4648      	mov	r0, r9
   8a70a:	f7ff fe98 	bl	8a43e <__malloc_unlock>
   8a70e:	f105 0608 	add.w	r6, r5, #8
   8a712:	4630      	mov	r0, r6
   8a714:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a718:	200706d0 	.word	0x200706d0

0008a71c <_sbrk_r>:
   8a71c:	b538      	push	{r3, r4, r5, lr}
   8a71e:	4c06      	ldr	r4, [pc, #24]	; (8a738 <_sbrk_r+0x1c>)
   8a720:	2300      	movs	r3, #0
   8a722:	4605      	mov	r5, r0
   8a724:	4608      	mov	r0, r1
   8a726:	6023      	str	r3, [r4, #0]
   8a728:	f7fe fa86 	bl	88c38 <_sbrk>
   8a72c:	1c43      	adds	r3, r0, #1
   8a72e:	d102      	bne.n	8a736 <_sbrk_r+0x1a>
   8a730:	6821      	ldr	r1, [r4, #0]
   8a732:	b101      	cbz	r1, 8a736 <_sbrk_r+0x1a>
   8a734:	6029      	str	r1, [r5, #0]
   8a736:	bd38      	pop	{r3, r4, r5, pc}
   8a738:	20071c2c 	.word	0x20071c2c

0008a73c <__ssprint_r>:
   8a73c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a740:	4607      	mov	r7, r0
   8a742:	6890      	ldr	r0, [r2, #8]
   8a744:	460c      	mov	r4, r1
   8a746:	4615      	mov	r5, r2
   8a748:	f8d2 8000 	ldr.w	r8, [r2]
   8a74c:	b908      	cbnz	r0, 8a752 <__ssprint_r+0x16>
   8a74e:	6050      	str	r0, [r2, #4]
   8a750:	e06f      	b.n	8a832 <__ssprint_r+0xf6>
   8a752:	f04f 0b00 	mov.w	fp, #0
   8a756:	465e      	mov	r6, fp
   8a758:	b936      	cbnz	r6, 8a768 <__ssprint_r+0x2c>
   8a75a:	f8d8 b000 	ldr.w	fp, [r8]
   8a75e:	f8d8 6004 	ldr.w	r6, [r8, #4]
   8a762:	f108 0808 	add.w	r8, r8, #8
   8a766:	e7f7      	b.n	8a758 <__ssprint_r+0x1c>
   8a768:	68a3      	ldr	r3, [r4, #8]
   8a76a:	429e      	cmp	r6, r3
   8a76c:	d34c      	bcc.n	8a808 <__ssprint_r+0xcc>
   8a76e:	89a2      	ldrh	r2, [r4, #12]
   8a770:	f412 6f90 	tst.w	r2, #1152	; 0x480
   8a774:	d046      	beq.n	8a804 <__ssprint_r+0xc8>
   8a776:	6823      	ldr	r3, [r4, #0]
   8a778:	6960      	ldr	r0, [r4, #20]
   8a77a:	6921      	ldr	r1, [r4, #16]
   8a77c:	f04f 0a03 	mov.w	sl, #3
   8a780:	ebc1 0903 	rsb	r9, r1, r3
   8a784:	fb0a f300 	mul.w	r3, sl, r0
   8a788:	2002      	movs	r0, #2
   8a78a:	fb93 faf0 	sdiv	sl, r3, r0
   8a78e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   8a792:	f109 0301 	add.w	r3, r9, #1
   8a796:	1998      	adds	r0, r3, r6
   8a798:	b213      	sxth	r3, r2
   8a79a:	4582      	cmp	sl, r0
   8a79c:	bf38      	it	cc
   8a79e:	4682      	movcc	sl, r0
   8a7a0:	4638      	mov	r0, r7
   8a7a2:	b183      	cbz	r3, 8a7c6 <__ssprint_r+0x8a>
   8a7a4:	4651      	mov	r1, sl
   8a7a6:	f7ff fc39 	bl	8a01c <_malloc_r>
   8a7aa:	b1a8      	cbz	r0, 8a7d8 <__ssprint_r+0x9c>
   8a7ac:	6921      	ldr	r1, [r4, #16]
   8a7ae:	464a      	mov	r2, r9
   8a7b0:	9001      	str	r0, [sp, #4]
   8a7b2:	f7fe fdbb 	bl	8932c <memcpy>
   8a7b6:	89a0      	ldrh	r0, [r4, #12]
   8a7b8:	f420 6290 	bic.w	r2, r0, #1152	; 0x480
   8a7bc:	f042 0180 	orr.w	r1, r2, #128	; 0x80
   8a7c0:	81a1      	strh	r1, [r4, #12]
   8a7c2:	9901      	ldr	r1, [sp, #4]
   8a7c4:	e014      	b.n	8a7f0 <__ssprint_r+0xb4>
   8a7c6:	4652      	mov	r2, sl
   8a7c8:	f7ff fe3a 	bl	8a440 <_realloc_r>
   8a7cc:	4601      	mov	r1, r0
   8a7ce:	b978      	cbnz	r0, 8a7f0 <__ssprint_r+0xb4>
   8a7d0:	4638      	mov	r0, r7
   8a7d2:	6921      	ldr	r1, [r4, #16]
   8a7d4:	f7ff fb6c 	bl	89eb0 <_free_r>
   8a7d8:	89a3      	ldrh	r3, [r4, #12]
   8a7da:	200c      	movs	r0, #12
   8a7dc:	2100      	movs	r1, #0
   8a7de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   8a7e2:	6038      	str	r0, [r7, #0]
   8a7e4:	81a2      	strh	r2, [r4, #12]
   8a7e6:	f04f 30ff 	mov.w	r0, #4294967295
   8a7ea:	60a9      	str	r1, [r5, #8]
   8a7ec:	6069      	str	r1, [r5, #4]
   8a7ee:	e020      	b.n	8a832 <__ssprint_r+0xf6>
   8a7f0:	eb01 0309 	add.w	r3, r1, r9
   8a7f4:	ebc9 000a 	rsb	r0, r9, sl
   8a7f8:	6023      	str	r3, [r4, #0]
   8a7fa:	6121      	str	r1, [r4, #16]
   8a7fc:	f8c4 a014 	str.w	sl, [r4, #20]
   8a800:	4633      	mov	r3, r6
   8a802:	60a0      	str	r0, [r4, #8]
   8a804:	429e      	cmp	r6, r3
   8a806:	d200      	bcs.n	8a80a <__ssprint_r+0xce>
   8a808:	4633      	mov	r3, r6
   8a80a:	461a      	mov	r2, r3
   8a80c:	4659      	mov	r1, fp
   8a80e:	6820      	ldr	r0, [r4, #0]
   8a810:	9301      	str	r3, [sp, #4]
   8a812:	f7fe fd94 	bl	8933e <memmove>
   8a816:	68a2      	ldr	r2, [r4, #8]
   8a818:	9901      	ldr	r1, [sp, #4]
   8a81a:	6823      	ldr	r3, [r4, #0]
   8a81c:	1a50      	subs	r0, r2, r1
   8a81e:	185a      	adds	r2, r3, r1
   8a820:	68a9      	ldr	r1, [r5, #8]
   8a822:	60a0      	str	r0, [r4, #8]
   8a824:	1b8e      	subs	r6, r1, r6
   8a826:	6022      	str	r2, [r4, #0]
   8a828:	60ae      	str	r6, [r5, #8]
   8a82a:	2e00      	cmp	r6, #0
   8a82c:	d195      	bne.n	8a75a <__ssprint_r+0x1e>
   8a82e:	606e      	str	r6, [r5, #4]
   8a830:	4630      	mov	r0, r6
   8a832:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008a836 <_svfiprintf_r>:
   8a836:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a83a:	461e      	mov	r6, r3
   8a83c:	898b      	ldrh	r3, [r1, #12]
   8a83e:	4689      	mov	r9, r1
   8a840:	f003 0180 	and.w	r1, r3, #128	; 0x80
   8a844:	4614      	mov	r4, r2
   8a846:	b20a      	sxth	r2, r1
   8a848:	b0a9      	sub	sp, #164	; 0xa4
   8a84a:	4683      	mov	fp, r0
   8a84c:	b19a      	cbz	r2, 8a876 <_svfiprintf_r+0x40>
   8a84e:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8a852:	b983      	cbnz	r3, 8a876 <_svfiprintf_r+0x40>
   8a854:	2140      	movs	r1, #64	; 0x40
   8a856:	f7ff fbe1 	bl	8a01c <_malloc_r>
   8a85a:	f8c9 0000 	str.w	r0, [r9]
   8a85e:	f8c9 0010 	str.w	r0, [r9, #16]
   8a862:	b928      	cbnz	r0, 8a870 <_svfiprintf_r+0x3a>
   8a864:	220c      	movs	r2, #12
   8a866:	f8cb 2000 	str.w	r2, [fp]
   8a86a:	f04f 30ff 	mov.w	r0, #4294967295
   8a86e:	e3db      	b.n	8b028 <_svfiprintf_r+0x7f2>
   8a870:	2040      	movs	r0, #64	; 0x40
   8a872:	f8c9 0014 	str.w	r0, [r9, #20]
   8a876:	2100      	movs	r1, #0
   8a878:	ad18      	add	r5, sp, #96	; 0x60
   8a87a:	950b      	str	r5, [sp, #44]	; 0x2c
   8a87c:	910d      	str	r1, [sp, #52]	; 0x34
   8a87e:	910c      	str	r1, [sp, #48]	; 0x30
   8a880:	9401      	str	r4, [sp, #4]
   8a882:	9105      	str	r1, [sp, #20]
   8a884:	9104      	str	r1, [sp, #16]
   8a886:	46a8      	mov	r8, r5
   8a888:	9b01      	ldr	r3, [sp, #4]
   8a88a:	461c      	mov	r4, r3
   8a88c:	f813 2b01 	ldrb.w	r2, [r3], #1
   8a890:	b91a      	cbnz	r2, 8a89a <_svfiprintf_r+0x64>
   8a892:	9801      	ldr	r0, [sp, #4]
   8a894:	1a25      	subs	r5, r4, r0
   8a896:	d103      	bne.n	8a8a0 <_svfiprintf_r+0x6a>
   8a898:	e01d      	b.n	8a8d6 <_svfiprintf_r+0xa0>
   8a89a:	2a25      	cmp	r2, #37	; 0x25
   8a89c:	d1f5      	bne.n	8a88a <_svfiprintf_r+0x54>
   8a89e:	e7f8      	b.n	8a892 <_svfiprintf_r+0x5c>
   8a8a0:	9a01      	ldr	r2, [sp, #4]
   8a8a2:	990d      	ldr	r1, [sp, #52]	; 0x34
   8a8a4:	e888 0024 	stmia.w	r8, {r2, r5}
   8a8a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8a8aa:	194b      	adds	r3, r1, r5
   8a8ac:	1c50      	adds	r0, r2, #1
   8a8ae:	2807      	cmp	r0, #7
   8a8b0:	930d      	str	r3, [sp, #52]	; 0x34
   8a8b2:	900c      	str	r0, [sp, #48]	; 0x30
   8a8b4:	dc02      	bgt.n	8a8bc <_svfiprintf_r+0x86>
   8a8b6:	f108 0808 	add.w	r8, r8, #8
   8a8ba:	e009      	b.n	8a8d0 <_svfiprintf_r+0x9a>
   8a8bc:	4658      	mov	r0, fp
   8a8be:	4649      	mov	r1, r9
   8a8c0:	aa0b      	add	r2, sp, #44	; 0x2c
   8a8c2:	f7ff ff3b 	bl	8a73c <__ssprint_r>
   8a8c6:	2800      	cmp	r0, #0
   8a8c8:	f040 83a3 	bne.w	8b012 <_svfiprintf_r+0x7dc>
   8a8cc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8a8d0:	9904      	ldr	r1, [sp, #16]
   8a8d2:	194b      	adds	r3, r1, r5
   8a8d4:	9304      	str	r3, [sp, #16]
   8a8d6:	7822      	ldrb	r2, [r4, #0]
   8a8d8:	2a00      	cmp	r2, #0
   8a8da:	f000 8393 	beq.w	8b004 <_svfiprintf_r+0x7ce>
   8a8de:	2200      	movs	r2, #0
   8a8e0:	3401      	adds	r4, #1
   8a8e2:	9401      	str	r4, [sp, #4]
   8a8e4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8a8e8:	f04f 3cff 	mov.w	ip, #4294967295
   8a8ec:	9203      	str	r2, [sp, #12]
   8a8ee:	4617      	mov	r7, r2
   8a8f0:	9801      	ldr	r0, [sp, #4]
   8a8f2:	f810 3b01 	ldrb.w	r3, [r0], #1
   8a8f6:	9001      	str	r0, [sp, #4]
   8a8f8:	2b63      	cmp	r3, #99	; 0x63
   8a8fa:	f000 80b3 	beq.w	8aa64 <_svfiprintf_r+0x22e>
   8a8fe:	dc33      	bgt.n	8a968 <_svfiprintf_r+0x132>
   8a900:	2b39      	cmp	r3, #57	; 0x39
   8a902:	dc1a      	bgt.n	8a93a <_svfiprintf_r+0x104>
   8a904:	2b31      	cmp	r3, #49	; 0x31
   8a906:	f280 8091 	bge.w	8aa2c <_svfiprintf_r+0x1f6>
   8a90a:	2b2b      	cmp	r3, #43	; 0x2b
   8a90c:	d101      	bne.n	8a912 <_svfiprintf_r+0xdc>
   8a90e:	461a      	mov	r2, r3
   8a910:	e7ee      	b.n	8a8f0 <_svfiprintf_r+0xba>
   8a912:	dc0a      	bgt.n	8a92a <_svfiprintf_r+0xf4>
   8a914:	2b23      	cmp	r3, #35	; 0x23
   8a916:	d055      	beq.n	8a9c4 <_svfiprintf_r+0x18e>
   8a918:	2b2a      	cmp	r3, #42	; 0x2a
   8a91a:	d056      	beq.n	8a9ca <_svfiprintf_r+0x194>
   8a91c:	2b20      	cmp	r3, #32
   8a91e:	f040 81f6 	bne.w	8ad0e <_svfiprintf_r+0x4d8>
   8a922:	2a00      	cmp	r2, #0
   8a924:	bf08      	it	eq
   8a926:	2220      	moveq	r2, #32
   8a928:	e7e2      	b.n	8a8f0 <_svfiprintf_r+0xba>
   8a92a:	2b2e      	cmp	r3, #46	; 0x2e
   8a92c:	d058      	beq.n	8a9e0 <_svfiprintf_r+0x1aa>
   8a92e:	2b30      	cmp	r3, #48	; 0x30
   8a930:	d079      	beq.n	8aa26 <_svfiprintf_r+0x1f0>
   8a932:	2b2d      	cmp	r3, #45	; 0x2d
   8a934:	f040 81eb 	bne.w	8ad0e <_svfiprintf_r+0x4d8>
   8a938:	e04f      	b.n	8a9da <_svfiprintf_r+0x1a4>
   8a93a:	2b4f      	cmp	r3, #79	; 0x4f
   8a93c:	f000 80de 	beq.w	8aafc <_svfiprintf_r+0x2c6>
   8a940:	dc07      	bgt.n	8a952 <_svfiprintf_r+0x11c>
   8a942:	2b44      	cmp	r3, #68	; 0x44
   8a944:	f040 81e3 	bne.w	8ad0e <_svfiprintf_r+0x4d8>
   8a948:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8a94c:	f047 0710 	orr.w	r7, r7, #16
   8a950:	e090      	b.n	8aa74 <_svfiprintf_r+0x23e>
   8a952:	2b55      	cmp	r3, #85	; 0x55
   8a954:	f000 811f 	beq.w	8ab96 <_svfiprintf_r+0x360>
   8a958:	2b58      	cmp	r3, #88	; 0x58
   8a95a:	f040 81d8 	bne.w	8ad0e <_svfiprintf_r+0x4d8>
   8a95e:	4daf      	ldr	r5, [pc, #700]	; (8ac1c <_svfiprintf_r+0x3e6>)
   8a960:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8a964:	9505      	str	r5, [sp, #20]
   8a966:	e130      	b.n	8abca <_svfiprintf_r+0x394>
   8a968:	2b6f      	cmp	r3, #111	; 0x6f
   8a96a:	f000 80c9 	beq.w	8ab00 <_svfiprintf_r+0x2ca>
   8a96e:	dc10      	bgt.n	8a992 <_svfiprintf_r+0x15c>
   8a970:	2b69      	cmp	r3, #105	; 0x69
   8a972:	d024      	beq.n	8a9be <_svfiprintf_r+0x188>
   8a974:	dc07      	bgt.n	8a986 <_svfiprintf_r+0x150>
   8a976:	2b64      	cmp	r3, #100	; 0x64
   8a978:	d021      	beq.n	8a9be <_svfiprintf_r+0x188>
   8a97a:	2b68      	cmp	r3, #104	; 0x68
   8a97c:	f040 81c7 	bne.w	8ad0e <_svfiprintf_r+0x4d8>
   8a980:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   8a984:	e7b4      	b.n	8a8f0 <_svfiprintf_r+0xba>
   8a986:	2b6c      	cmp	r3, #108	; 0x6c
   8a988:	d05f      	beq.n	8aa4a <_svfiprintf_r+0x214>
   8a98a:	2b6e      	cmp	r3, #110	; 0x6e
   8a98c:	f040 81bf 	bne.w	8ad0e <_svfiprintf_r+0x4d8>
   8a990:	e096      	b.n	8aac0 <_svfiprintf_r+0x28a>
   8a992:	2b73      	cmp	r3, #115	; 0x73
   8a994:	f000 80df 	beq.w	8ab56 <_svfiprintf_r+0x320>
   8a998:	dc06      	bgt.n	8a9a8 <_svfiprintf_r+0x172>
   8a99a:	2b70      	cmp	r3, #112	; 0x70
   8a99c:	f000 80cd 	beq.w	8ab3a <_svfiprintf_r+0x304>
   8a9a0:	2b71      	cmp	r3, #113	; 0x71
   8a9a2:	f040 81b4 	bne.w	8ad0e <_svfiprintf_r+0x4d8>
   8a9a6:	e05a      	b.n	8aa5e <_svfiprintf_r+0x228>
   8a9a8:	2b75      	cmp	r3, #117	; 0x75
   8a9aa:	f000 80f6 	beq.w	8ab9a <_svfiprintf_r+0x364>
   8a9ae:	2b78      	cmp	r3, #120	; 0x78
   8a9b0:	f040 81ad 	bne.w	8ad0e <_svfiprintf_r+0x4d8>
   8a9b4:	4d9a      	ldr	r5, [pc, #616]	; (8ac20 <_svfiprintf_r+0x3ea>)
   8a9b6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8a9ba:	9505      	str	r5, [sp, #20]
   8a9bc:	e105      	b.n	8abca <_svfiprintf_r+0x394>
   8a9be:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8a9c2:	e057      	b.n	8aa74 <_svfiprintf_r+0x23e>
   8a9c4:	f047 0701 	orr.w	r7, r7, #1
   8a9c8:	e792      	b.n	8a8f0 <_svfiprintf_r+0xba>
   8a9ca:	1d33      	adds	r3, r6, #4
   8a9cc:	6836      	ldr	r6, [r6, #0]
   8a9ce:	2e00      	cmp	r6, #0
   8a9d0:	9603      	str	r6, [sp, #12]
   8a9d2:	da15      	bge.n	8aa00 <_svfiprintf_r+0x1ca>
   8a9d4:	4270      	negs	r0, r6
   8a9d6:	9003      	str	r0, [sp, #12]
   8a9d8:	461e      	mov	r6, r3
   8a9da:	f047 0704 	orr.w	r7, r7, #4
   8a9de:	e787      	b.n	8a8f0 <_svfiprintf_r+0xba>
   8a9e0:	9901      	ldr	r1, [sp, #4]
   8a9e2:	f811 3b01 	ldrb.w	r3, [r1], #1
   8a9e6:	2b2a      	cmp	r3, #42	; 0x2a
   8a9e8:	9101      	str	r1, [sp, #4]
   8a9ea:	d10b      	bne.n	8aa04 <_svfiprintf_r+0x1ce>
   8a9ec:	f8d6 c000 	ldr.w	ip, [r6]
   8a9f0:	1d33      	adds	r3, r6, #4
   8a9f2:	f1bc 0f00 	cmp.w	ip, #0
   8a9f6:	da03      	bge.n	8aa00 <_svfiprintf_r+0x1ca>
   8a9f8:	461e      	mov	r6, r3
   8a9fa:	f04f 3cff 	mov.w	ip, #4294967295
   8a9fe:	e777      	b.n	8a8f0 <_svfiprintf_r+0xba>
   8aa00:	461e      	mov	r6, r3
   8aa02:	e775      	b.n	8a8f0 <_svfiprintf_r+0xba>
   8aa04:	f04f 0c00 	mov.w	ip, #0
   8aa08:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8aa0c:	2809      	cmp	r0, #9
   8aa0e:	d807      	bhi.n	8aa20 <_svfiprintf_r+0x1ea>
   8aa10:	9901      	ldr	r1, [sp, #4]
   8aa12:	230a      	movs	r3, #10
   8aa14:	fb03 0c0c 	mla	ip, r3, ip, r0
   8aa18:	f811 3b01 	ldrb.w	r3, [r1], #1
   8aa1c:	9101      	str	r1, [sp, #4]
   8aa1e:	e7f3      	b.n	8aa08 <_svfiprintf_r+0x1d2>
   8aa20:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   8aa24:	e768      	b.n	8a8f8 <_svfiprintf_r+0xc2>
   8aa26:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8aa2a:	e761      	b.n	8a8f0 <_svfiprintf_r+0xba>
   8aa2c:	9801      	ldr	r0, [sp, #4]
   8aa2e:	2100      	movs	r1, #0
   8aa30:	3b30      	subs	r3, #48	; 0x30
   8aa32:	240a      	movs	r4, #10
   8aa34:	fb04 3101 	mla	r1, r4, r1, r3
   8aa38:	f810 3b01 	ldrb.w	r3, [r0], #1
   8aa3c:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   8aa40:	2c09      	cmp	r4, #9
   8aa42:	9001      	str	r0, [sp, #4]
   8aa44:	d9f4      	bls.n	8aa30 <_svfiprintf_r+0x1fa>
   8aa46:	9103      	str	r1, [sp, #12]
   8aa48:	e756      	b.n	8a8f8 <_svfiprintf_r+0xc2>
   8aa4a:	9901      	ldr	r1, [sp, #4]
   8aa4c:	780b      	ldrb	r3, [r1, #0]
   8aa4e:	2b6c      	cmp	r3, #108	; 0x6c
   8aa50:	d102      	bne.n	8aa58 <_svfiprintf_r+0x222>
   8aa52:	1c48      	adds	r0, r1, #1
   8aa54:	9001      	str	r0, [sp, #4]
   8aa56:	e002      	b.n	8aa5e <_svfiprintf_r+0x228>
   8aa58:	f047 0710 	orr.w	r7, r7, #16
   8aa5c:	e748      	b.n	8a8f0 <_svfiprintf_r+0xba>
   8aa5e:	f047 0720 	orr.w	r7, r7, #32
   8aa62:	e745      	b.n	8a8f0 <_svfiprintf_r+0xba>
   8aa64:	6832      	ldr	r2, [r6, #0]
   8aa66:	2500      	movs	r5, #0
   8aa68:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   8aa6c:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8aa70:	3604      	adds	r6, #4
   8aa72:	e156      	b.n	8ad22 <_svfiprintf_r+0x4ec>
   8aa74:	06ba      	lsls	r2, r7, #26
   8aa76:	d507      	bpl.n	8aa88 <_svfiprintf_r+0x252>
   8aa78:	3607      	adds	r6, #7
   8aa7a:	f026 0507 	bic.w	r5, r6, #7
   8aa7e:	f105 0608 	add.w	r6, r5, #8
   8aa82:	e9d5 4500 	ldrd	r4, r5, [r5]
   8aa86:	e00f      	b.n	8aaa8 <_svfiprintf_r+0x272>
   8aa88:	f017 0f10 	tst.w	r7, #16
   8aa8c:	f106 0104 	add.w	r1, r6, #4
   8aa90:	d001      	beq.n	8aa96 <_svfiprintf_r+0x260>
   8aa92:	6832      	ldr	r2, [r6, #0]
   8aa94:	e005      	b.n	8aaa2 <_svfiprintf_r+0x26c>
   8aa96:	f017 0f40 	tst.w	r7, #64	; 0x40
   8aa9a:	6832      	ldr	r2, [r6, #0]
   8aa9c:	d001      	beq.n	8aaa2 <_svfiprintf_r+0x26c>
   8aa9e:	b214      	sxth	r4, r2
   8aaa0:	e000      	b.n	8aaa4 <_svfiprintf_r+0x26e>
   8aaa2:	4614      	mov	r4, r2
   8aaa4:	17e5      	asrs	r5, r4, #31
   8aaa6:	460e      	mov	r6, r1
   8aaa8:	2c00      	cmp	r4, #0
   8aaaa:	f175 0200 	sbcs.w	r2, r5, #0
   8aaae:	f280 80b9 	bge.w	8ac24 <_svfiprintf_r+0x3ee>
   8aab2:	232d      	movs	r3, #45	; 0x2d
   8aab4:	4264      	negs	r4, r4
   8aab6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8aaba:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   8aabe:	e0b1      	b.n	8ac24 <_svfiprintf_r+0x3ee>
   8aac0:	f017 0f20 	tst.w	r7, #32
   8aac4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8aac8:	f106 0204 	add.w	r2, r6, #4
   8aacc:	d005      	beq.n	8aada <_svfiprintf_r+0x2a4>
   8aace:	9c04      	ldr	r4, [sp, #16]
   8aad0:	6835      	ldr	r5, [r6, #0]
   8aad2:	17e0      	asrs	r0, r4, #31
   8aad4:	602c      	str	r4, [r5, #0]
   8aad6:	6068      	str	r0, [r5, #4]
   8aad8:	e004      	b.n	8aae4 <_svfiprintf_r+0x2ae>
   8aada:	06fb      	lsls	r3, r7, #27
   8aadc:	d504      	bpl.n	8aae8 <_svfiprintf_r+0x2b2>
   8aade:	6833      	ldr	r3, [r6, #0]
   8aae0:	9904      	ldr	r1, [sp, #16]
   8aae2:	6019      	str	r1, [r3, #0]
   8aae4:	4616      	mov	r6, r2
   8aae6:	e6cf      	b.n	8a888 <_svfiprintf_r+0x52>
   8aae8:	6830      	ldr	r0, [r6, #0]
   8aaea:	9c04      	ldr	r4, [sp, #16]
   8aaec:	f017 0f40 	tst.w	r7, #64	; 0x40
   8aaf0:	f106 0604 	add.w	r6, r6, #4
   8aaf4:	bf14      	ite	ne
   8aaf6:	8004      	strhne	r4, [r0, #0]
   8aaf8:	6004      	streq	r4, [r0, #0]
   8aafa:	e6c5      	b.n	8a888 <_svfiprintf_r+0x52>
   8aafc:	f047 0710 	orr.w	r7, r7, #16
   8ab00:	f017 0020 	ands.w	r0, r7, #32
   8ab04:	d008      	beq.n	8ab18 <_svfiprintf_r+0x2e2>
   8ab06:	1df3      	adds	r3, r6, #7
   8ab08:	f023 0507 	bic.w	r5, r3, #7
   8ab0c:	f105 0608 	add.w	r6, r5, #8
   8ab10:	e9d5 4500 	ldrd	r4, r5, [r5]
   8ab14:	2000      	movs	r0, #0
   8ab16:	e07c      	b.n	8ac12 <_svfiprintf_r+0x3dc>
   8ab18:	f017 0110 	ands.w	r1, r7, #16
   8ab1c:	f106 0204 	add.w	r2, r6, #4
   8ab20:	d106      	bne.n	8ab30 <_svfiprintf_r+0x2fa>
   8ab22:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   8ab26:	d003      	beq.n	8ab30 <_svfiprintf_r+0x2fa>
   8ab28:	8834      	ldrh	r4, [r6, #0]
   8ab2a:	2500      	movs	r5, #0
   8ab2c:	4616      	mov	r6, r2
   8ab2e:	e7f1      	b.n	8ab14 <_svfiprintf_r+0x2de>
   8ab30:	6836      	ldr	r6, [r6, #0]
   8ab32:	2500      	movs	r5, #0
   8ab34:	4634      	mov	r4, r6
   8ab36:	4616      	mov	r6, r2
   8ab38:	e06b      	b.n	8ac12 <_svfiprintf_r+0x3dc>
   8ab3a:	4b39      	ldr	r3, [pc, #228]	; (8ac20 <_svfiprintf_r+0x3ea>)
   8ab3c:	2130      	movs	r1, #48	; 0x30
   8ab3e:	2278      	movs	r2, #120	; 0x78
   8ab40:	6834      	ldr	r4, [r6, #0]
   8ab42:	2500      	movs	r5, #0
   8ab44:	f047 0702 	orr.w	r7, r7, #2
   8ab48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   8ab4c:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   8ab50:	3604      	adds	r6, #4
   8ab52:	9305      	str	r3, [sp, #20]
   8ab54:	e05c      	b.n	8ac10 <_svfiprintf_r+0x3da>
   8ab56:	4631      	mov	r1, r6
   8ab58:	2500      	movs	r5, #0
   8ab5a:	f8d1 a000 	ldr.w	sl, [r1]
   8ab5e:	3604      	adds	r6, #4
   8ab60:	45ac      	cmp	ip, r5
   8ab62:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8ab66:	4650      	mov	r0, sl
   8ab68:	db11      	blt.n	8ab8e <_svfiprintf_r+0x358>
   8ab6a:	4662      	mov	r2, ip
   8ab6c:	4629      	mov	r1, r5
   8ab6e:	f8cd c000 	str.w	ip, [sp]
   8ab72:	f7ff fc55 	bl	8a420 <memchr>
   8ab76:	f8dd c000 	ldr.w	ip, [sp]
   8ab7a:	2800      	cmp	r0, #0
   8ab7c:	f000 80d5 	beq.w	8ad2a <_svfiprintf_r+0x4f4>
   8ab80:	ebca 0400 	rsb	r4, sl, r0
   8ab84:	4564      	cmp	r4, ip
   8ab86:	f340 80d2 	ble.w	8ad2e <_svfiprintf_r+0x4f8>
   8ab8a:	4664      	mov	r4, ip
   8ab8c:	e0cf      	b.n	8ad2e <_svfiprintf_r+0x4f8>
   8ab8e:	f7fe fc53 	bl	89438 <strlen>
   8ab92:	4604      	mov	r4, r0
   8ab94:	e0cb      	b.n	8ad2e <_svfiprintf_r+0x4f8>
   8ab96:	f047 0710 	orr.w	r7, r7, #16
   8ab9a:	06bd      	lsls	r5, r7, #26
   8ab9c:	d506      	bpl.n	8abac <_svfiprintf_r+0x376>
   8ab9e:	1df0      	adds	r0, r6, #7
   8aba0:	f020 0407 	bic.w	r4, r0, #7
   8aba4:	f104 0608 	add.w	r6, r4, #8
   8aba8:	cc30      	ldmia	r4, {r4, r5}
   8abaa:	e00c      	b.n	8abc6 <_svfiprintf_r+0x390>
   8abac:	f017 0f10 	tst.w	r7, #16
   8abb0:	f106 0304 	add.w	r3, r6, #4
   8abb4:	d103      	bne.n	8abbe <_svfiprintf_r+0x388>
   8abb6:	067c      	lsls	r4, r7, #25
   8abb8:	d501      	bpl.n	8abbe <_svfiprintf_r+0x388>
   8abba:	8834      	ldrh	r4, [r6, #0]
   8abbc:	e001      	b.n	8abc2 <_svfiprintf_r+0x38c>
   8abbe:	6835      	ldr	r5, [r6, #0]
   8abc0:	462c      	mov	r4, r5
   8abc2:	2500      	movs	r5, #0
   8abc4:	461e      	mov	r6, r3
   8abc6:	2001      	movs	r0, #1
   8abc8:	e023      	b.n	8ac12 <_svfiprintf_r+0x3dc>
   8abca:	06b8      	lsls	r0, r7, #26
   8abcc:	d507      	bpl.n	8abde <_svfiprintf_r+0x3a8>
   8abce:	1df4      	adds	r4, r6, #7
   8abd0:	f024 0107 	bic.w	r1, r4, #7
   8abd4:	f101 0608 	add.w	r6, r1, #8
   8abd8:	e9d1 4500 	ldrd	r4, r5, [r1]
   8abdc:	e00c      	b.n	8abf8 <_svfiprintf_r+0x3c2>
   8abde:	f017 0f10 	tst.w	r7, #16
   8abe2:	f106 0004 	add.w	r0, r6, #4
   8abe6:	d103      	bne.n	8abf0 <_svfiprintf_r+0x3ba>
   8abe8:	0679      	lsls	r1, r7, #25
   8abea:	d501      	bpl.n	8abf0 <_svfiprintf_r+0x3ba>
   8abec:	8834      	ldrh	r4, [r6, #0]
   8abee:	e001      	b.n	8abf4 <_svfiprintf_r+0x3be>
   8abf0:	6836      	ldr	r6, [r6, #0]
   8abf2:	4634      	mov	r4, r6
   8abf4:	2500      	movs	r5, #0
   8abf6:	4606      	mov	r6, r0
   8abf8:	07fa      	lsls	r2, r7, #31
   8abfa:	d509      	bpl.n	8ac10 <_svfiprintf_r+0x3da>
   8abfc:	ea54 0205 	orrs.w	r2, r4, r5
   8ac00:	d006      	beq.n	8ac10 <_svfiprintf_r+0x3da>
   8ac02:	2230      	movs	r2, #48	; 0x30
   8ac04:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   8ac08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   8ac0c:	f047 0702 	orr.w	r7, r7, #2
   8ac10:	2002      	movs	r0, #2
   8ac12:	2100      	movs	r1, #0
   8ac14:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   8ac18:	e005      	b.n	8ac26 <_svfiprintf_r+0x3f0>
   8ac1a:	bf00      	nop
   8ac1c:	0008c102 	.word	0x0008c102
   8ac20:	0008c113 	.word	0x0008c113
   8ac24:	2001      	movs	r0, #1
   8ac26:	f1bc 0f00 	cmp.w	ip, #0
   8ac2a:	bfa8      	it	ge
   8ac2c:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   8ac30:	ea54 0105 	orrs.w	r1, r4, r5
   8ac34:	d102      	bne.n	8ac3c <_svfiprintf_r+0x406>
   8ac36:	f1bc 0f00 	cmp.w	ip, #0
   8ac3a:	d058      	beq.n	8acee <_svfiprintf_r+0x4b8>
   8ac3c:	2801      	cmp	r0, #1
   8ac3e:	d01d      	beq.n	8ac7c <_svfiprintf_r+0x446>
   8ac40:	2802      	cmp	r0, #2
   8ac42:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8ac46:	d041      	beq.n	8accc <_svfiprintf_r+0x496>
   8ac48:	f004 0207 	and.w	r2, r4, #7
   8ac4c:	08e4      	lsrs	r4, r4, #3
   8ac4e:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   8ac52:	08e9      	lsrs	r1, r5, #3
   8ac54:	4604      	mov	r4, r0
   8ac56:	460d      	mov	r5, r1
   8ac58:	3230      	adds	r2, #48	; 0x30
   8ac5a:	ea54 0105 	orrs.w	r1, r4, r5
   8ac5e:	469a      	mov	sl, r3
   8ac60:	701a      	strb	r2, [r3, #0]
   8ac62:	f103 33ff 	add.w	r3, r3, #4294967295
   8ac66:	d1ef      	bne.n	8ac48 <_svfiprintf_r+0x412>
   8ac68:	07f8      	lsls	r0, r7, #31
   8ac6a:	4655      	mov	r5, sl
   8ac6c:	d54a      	bpl.n	8ad04 <_svfiprintf_r+0x4ce>
   8ac6e:	2a30      	cmp	r2, #48	; 0x30
   8ac70:	d048      	beq.n	8ad04 <_svfiprintf_r+0x4ce>
   8ac72:	2230      	movs	r2, #48	; 0x30
   8ac74:	469a      	mov	sl, r3
   8ac76:	f805 2c01 	strb.w	r2, [r5, #-1]
   8ac7a:	e043      	b.n	8ad04 <_svfiprintf_r+0x4ce>
   8ac7c:	2d00      	cmp	r5, #0
   8ac7e:	bf08      	it	eq
   8ac80:	2c0a      	cmpeq	r4, #10
   8ac82:	d203      	bcs.n	8ac8c <_svfiprintf_r+0x456>
   8ac84:	3430      	adds	r4, #48	; 0x30
   8ac86:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   8ac8a:	e036      	b.n	8acfa <_svfiprintf_r+0x4c4>
   8ac8c:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8ac90:	9302      	str	r3, [sp, #8]
   8ac92:	4620      	mov	r0, r4
   8ac94:	4629      	mov	r1, r5
   8ac96:	220a      	movs	r2, #10
   8ac98:	2300      	movs	r3, #0
   8ac9a:	f8cd c000 	str.w	ip, [sp]
   8ac9e:	f000 f9c7 	bl	8b030 <__aeabi_uldivmod>
   8aca2:	9802      	ldr	r0, [sp, #8]
   8aca4:	3230      	adds	r2, #48	; 0x30
   8aca6:	f800 2901 	strb.w	r2, [r0], #-1
   8acaa:	4629      	mov	r1, r5
   8acac:	220a      	movs	r2, #10
   8acae:	2300      	movs	r3, #0
   8acb0:	f8dd a008 	ldr.w	sl, [sp, #8]
   8acb4:	9002      	str	r0, [sp, #8]
   8acb6:	4620      	mov	r0, r4
   8acb8:	f000 f9ba 	bl	8b030 <__aeabi_uldivmod>
   8acbc:	4604      	mov	r4, r0
   8acbe:	460d      	mov	r5, r1
   8acc0:	ea54 0105 	orrs.w	r1, r4, r5
   8acc4:	f8dd c000 	ldr.w	ip, [sp]
   8acc8:	d1e3      	bne.n	8ac92 <_svfiprintf_r+0x45c>
   8acca:	e01b      	b.n	8ad04 <_svfiprintf_r+0x4ce>
   8accc:	9905      	ldr	r1, [sp, #20]
   8acce:	f004 000f 	and.w	r0, r4, #15
   8acd2:	0924      	lsrs	r4, r4, #4
   8acd4:	5c0a      	ldrb	r2, [r1, r0]
   8acd6:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   8acda:	0929      	lsrs	r1, r5, #4
   8acdc:	4604      	mov	r4, r0
   8acde:	460d      	mov	r5, r1
   8ace0:	469a      	mov	sl, r3
   8ace2:	f803 2901 	strb.w	r2, [r3], #-1
   8ace6:	ea54 0205 	orrs.w	r2, r4, r5
   8acea:	d1ef      	bne.n	8accc <_svfiprintf_r+0x496>
   8acec:	e00a      	b.n	8ad04 <_svfiprintf_r+0x4ce>
   8acee:	b938      	cbnz	r0, 8ad00 <_svfiprintf_r+0x4ca>
   8acf0:	07f9      	lsls	r1, r7, #31
   8acf2:	d505      	bpl.n	8ad00 <_svfiprintf_r+0x4ca>
   8acf4:	2030      	movs	r0, #48	; 0x30
   8acf6:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   8acfa:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   8acfe:	e001      	b.n	8ad04 <_svfiprintf_r+0x4ce>
   8ad00:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   8ad04:	ad18      	add	r5, sp, #96	; 0x60
   8ad06:	ebca 0405 	rsb	r4, sl, r5
   8ad0a:	4665      	mov	r5, ip
   8ad0c:	e00f      	b.n	8ad2e <_svfiprintf_r+0x4f8>
   8ad0e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8ad12:	2b00      	cmp	r3, #0
   8ad14:	f000 8176 	beq.w	8b004 <_svfiprintf_r+0x7ce>
   8ad18:	2500      	movs	r5, #0
   8ad1a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   8ad1e:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8ad22:	2401      	movs	r4, #1
   8ad24:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   8ad28:	e001      	b.n	8ad2e <_svfiprintf_r+0x4f8>
   8ad2a:	4664      	mov	r4, ip
   8ad2c:	4605      	mov	r5, r0
   8ad2e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8ad32:	42ac      	cmp	r4, r5
   8ad34:	bfac      	ite	ge
   8ad36:	4621      	movge	r1, r4
   8ad38:	4629      	movlt	r1, r5
   8ad3a:	9102      	str	r1, [sp, #8]
   8ad3c:	b113      	cbz	r3, 8ad44 <_svfiprintf_r+0x50e>
   8ad3e:	9802      	ldr	r0, [sp, #8]
   8ad40:	1c42      	adds	r2, r0, #1
   8ad42:	9202      	str	r2, [sp, #8]
   8ad44:	f017 0102 	ands.w	r1, r7, #2
   8ad48:	9106      	str	r1, [sp, #24]
   8ad4a:	d002      	beq.n	8ad52 <_svfiprintf_r+0x51c>
   8ad4c:	9b02      	ldr	r3, [sp, #8]
   8ad4e:	1c98      	adds	r0, r3, #2
   8ad50:	9002      	str	r0, [sp, #8]
   8ad52:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   8ad56:	9207      	str	r2, [sp, #28]
   8ad58:	d13c      	bne.n	8add4 <_svfiprintf_r+0x59e>
   8ad5a:	9903      	ldr	r1, [sp, #12]
   8ad5c:	9b02      	ldr	r3, [sp, #8]
   8ad5e:	1acb      	subs	r3, r1, r3
   8ad60:	2b00      	cmp	r3, #0
   8ad62:	dd37      	ble.n	8add4 <_svfiprintf_r+0x59e>
   8ad64:	48a5      	ldr	r0, [pc, #660]	; (8affc <_svfiprintf_r+0x7c6>)
   8ad66:	2b10      	cmp	r3, #16
   8ad68:	f8c8 0000 	str.w	r0, [r8]
   8ad6c:	dd1b      	ble.n	8ada6 <_svfiprintf_r+0x570>
   8ad6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8ad70:	2110      	movs	r1, #16
   8ad72:	980d      	ldr	r0, [sp, #52]	; 0x34
   8ad74:	f8c8 1004 	str.w	r1, [r8, #4]
   8ad78:	1c51      	adds	r1, r2, #1
   8ad7a:	3010      	adds	r0, #16
   8ad7c:	2907      	cmp	r1, #7
   8ad7e:	900d      	str	r0, [sp, #52]	; 0x34
   8ad80:	910c      	str	r1, [sp, #48]	; 0x30
   8ad82:	dc02      	bgt.n	8ad8a <_svfiprintf_r+0x554>
   8ad84:	f108 0808 	add.w	r8, r8, #8
   8ad88:	e00b      	b.n	8ada2 <_svfiprintf_r+0x56c>
   8ad8a:	4658      	mov	r0, fp
   8ad8c:	4649      	mov	r1, r9
   8ad8e:	aa0b      	add	r2, sp, #44	; 0x2c
   8ad90:	9300      	str	r3, [sp, #0]
   8ad92:	f7ff fcd3 	bl	8a73c <__ssprint_r>
   8ad96:	9b00      	ldr	r3, [sp, #0]
   8ad98:	2800      	cmp	r0, #0
   8ad9a:	f040 813a 	bne.w	8b012 <_svfiprintf_r+0x7dc>
   8ad9e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8ada2:	3b10      	subs	r3, #16
   8ada4:	e7de      	b.n	8ad64 <_svfiprintf_r+0x52e>
   8ada6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8ada8:	f8c8 3004 	str.w	r3, [r8, #4]
   8adac:	18d1      	adds	r1, r2, r3
   8adae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8adb0:	910d      	str	r1, [sp, #52]	; 0x34
   8adb2:	1c58      	adds	r0, r3, #1
   8adb4:	2807      	cmp	r0, #7
   8adb6:	900c      	str	r0, [sp, #48]	; 0x30
   8adb8:	dc02      	bgt.n	8adc0 <_svfiprintf_r+0x58a>
   8adba:	f108 0808 	add.w	r8, r8, #8
   8adbe:	e009      	b.n	8add4 <_svfiprintf_r+0x59e>
   8adc0:	4658      	mov	r0, fp
   8adc2:	4649      	mov	r1, r9
   8adc4:	aa0b      	add	r2, sp, #44	; 0x2c
   8adc6:	f7ff fcb9 	bl	8a73c <__ssprint_r>
   8adca:	2800      	cmp	r0, #0
   8adcc:	f040 8121 	bne.w	8b012 <_svfiprintf_r+0x7dc>
   8add0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8add4:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   8add8:	b1da      	cbz	r2, 8ae12 <_svfiprintf_r+0x5dc>
   8adda:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   8adde:	f8c8 1000 	str.w	r1, [r8]
   8ade2:	990c      	ldr	r1, [sp, #48]	; 0x30
   8ade4:	2301      	movs	r3, #1
   8ade6:	980d      	ldr	r0, [sp, #52]	; 0x34
   8ade8:	f8c8 3004 	str.w	r3, [r8, #4]
   8adec:	1c4b      	adds	r3, r1, #1
   8adee:	1c42      	adds	r2, r0, #1
   8adf0:	2b07      	cmp	r3, #7
   8adf2:	920d      	str	r2, [sp, #52]	; 0x34
   8adf4:	930c      	str	r3, [sp, #48]	; 0x30
   8adf6:	dc02      	bgt.n	8adfe <_svfiprintf_r+0x5c8>
   8adf8:	f108 0808 	add.w	r8, r8, #8
   8adfc:	e009      	b.n	8ae12 <_svfiprintf_r+0x5dc>
   8adfe:	4658      	mov	r0, fp
   8ae00:	4649      	mov	r1, r9
   8ae02:	aa0b      	add	r2, sp, #44	; 0x2c
   8ae04:	f7ff fc9a 	bl	8a73c <__ssprint_r>
   8ae08:	2800      	cmp	r0, #0
   8ae0a:	f040 8102 	bne.w	8b012 <_svfiprintf_r+0x7dc>
   8ae0e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8ae12:	9806      	ldr	r0, [sp, #24]
   8ae14:	b1d0      	cbz	r0, 8ae4c <_svfiprintf_r+0x616>
   8ae16:	aa0a      	add	r2, sp, #40	; 0x28
   8ae18:	f8c8 2000 	str.w	r2, [r8]
   8ae1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8ae1e:	2102      	movs	r1, #2
   8ae20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8ae22:	f8c8 1004 	str.w	r1, [r8, #4]
   8ae26:	1c51      	adds	r1, r2, #1
   8ae28:	1c98      	adds	r0, r3, #2
   8ae2a:	2907      	cmp	r1, #7
   8ae2c:	900d      	str	r0, [sp, #52]	; 0x34
   8ae2e:	910c      	str	r1, [sp, #48]	; 0x30
   8ae30:	dc02      	bgt.n	8ae38 <_svfiprintf_r+0x602>
   8ae32:	f108 0808 	add.w	r8, r8, #8
   8ae36:	e009      	b.n	8ae4c <_svfiprintf_r+0x616>
   8ae38:	4658      	mov	r0, fp
   8ae3a:	4649      	mov	r1, r9
   8ae3c:	aa0b      	add	r2, sp, #44	; 0x2c
   8ae3e:	f7ff fc7d 	bl	8a73c <__ssprint_r>
   8ae42:	2800      	cmp	r0, #0
   8ae44:	f040 80e5 	bne.w	8b012 <_svfiprintf_r+0x7dc>
   8ae48:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8ae4c:	9b07      	ldr	r3, [sp, #28]
   8ae4e:	2b80      	cmp	r3, #128	; 0x80
   8ae50:	d13c      	bne.n	8aecc <_svfiprintf_r+0x696>
   8ae52:	9803      	ldr	r0, [sp, #12]
   8ae54:	9a02      	ldr	r2, [sp, #8]
   8ae56:	1a83      	subs	r3, r0, r2
   8ae58:	2b00      	cmp	r3, #0
   8ae5a:	dd37      	ble.n	8aecc <_svfiprintf_r+0x696>
   8ae5c:	4968      	ldr	r1, [pc, #416]	; (8b000 <_svfiprintf_r+0x7ca>)
   8ae5e:	2b10      	cmp	r3, #16
   8ae60:	f8c8 1000 	str.w	r1, [r8]
   8ae64:	dd1b      	ble.n	8ae9e <_svfiprintf_r+0x668>
   8ae66:	980c      	ldr	r0, [sp, #48]	; 0x30
   8ae68:	2210      	movs	r2, #16
   8ae6a:	990d      	ldr	r1, [sp, #52]	; 0x34
   8ae6c:	f8c8 2004 	str.w	r2, [r8, #4]
   8ae70:	1c42      	adds	r2, r0, #1
   8ae72:	3110      	adds	r1, #16
   8ae74:	2a07      	cmp	r2, #7
   8ae76:	910d      	str	r1, [sp, #52]	; 0x34
   8ae78:	920c      	str	r2, [sp, #48]	; 0x30
   8ae7a:	dc02      	bgt.n	8ae82 <_svfiprintf_r+0x64c>
   8ae7c:	f108 0808 	add.w	r8, r8, #8
   8ae80:	e00b      	b.n	8ae9a <_svfiprintf_r+0x664>
   8ae82:	4658      	mov	r0, fp
   8ae84:	4649      	mov	r1, r9
   8ae86:	aa0b      	add	r2, sp, #44	; 0x2c
   8ae88:	9300      	str	r3, [sp, #0]
   8ae8a:	f7ff fc57 	bl	8a73c <__ssprint_r>
   8ae8e:	9b00      	ldr	r3, [sp, #0]
   8ae90:	2800      	cmp	r0, #0
   8ae92:	f040 80be 	bne.w	8b012 <_svfiprintf_r+0x7dc>
   8ae96:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8ae9a:	3b10      	subs	r3, #16
   8ae9c:	e7de      	b.n	8ae5c <_svfiprintf_r+0x626>
   8ae9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8aea0:	980d      	ldr	r0, [sp, #52]	; 0x34
   8aea2:	1c51      	adds	r1, r2, #1
   8aea4:	f8c8 3004 	str.w	r3, [r8, #4]
   8aea8:	2907      	cmp	r1, #7
   8aeaa:	4403      	add	r3, r0
   8aeac:	930d      	str	r3, [sp, #52]	; 0x34
   8aeae:	910c      	str	r1, [sp, #48]	; 0x30
   8aeb0:	dc02      	bgt.n	8aeb8 <_svfiprintf_r+0x682>
   8aeb2:	f108 0808 	add.w	r8, r8, #8
   8aeb6:	e009      	b.n	8aecc <_svfiprintf_r+0x696>
   8aeb8:	4658      	mov	r0, fp
   8aeba:	4649      	mov	r1, r9
   8aebc:	aa0b      	add	r2, sp, #44	; 0x2c
   8aebe:	f7ff fc3d 	bl	8a73c <__ssprint_r>
   8aec2:	2800      	cmp	r0, #0
   8aec4:	f040 80a5 	bne.w	8b012 <_svfiprintf_r+0x7dc>
   8aec8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8aecc:	1b2d      	subs	r5, r5, r4
   8aece:	2d00      	cmp	r5, #0
   8aed0:	dd34      	ble.n	8af3c <_svfiprintf_r+0x706>
   8aed2:	484b      	ldr	r0, [pc, #300]	; (8b000 <_svfiprintf_r+0x7ca>)
   8aed4:	2d10      	cmp	r5, #16
   8aed6:	f8c8 0000 	str.w	r0, [r8]
   8aeda:	dd19      	ble.n	8af10 <_svfiprintf_r+0x6da>
   8aedc:	980c      	ldr	r0, [sp, #48]	; 0x30
   8aede:	990d      	ldr	r1, [sp, #52]	; 0x34
   8aee0:	1c43      	adds	r3, r0, #1
   8aee2:	2210      	movs	r2, #16
   8aee4:	3110      	adds	r1, #16
   8aee6:	2b07      	cmp	r3, #7
   8aee8:	f8c8 2004 	str.w	r2, [r8, #4]
   8aeec:	910d      	str	r1, [sp, #52]	; 0x34
   8aeee:	930c      	str	r3, [sp, #48]	; 0x30
   8aef0:	dc02      	bgt.n	8aef8 <_svfiprintf_r+0x6c2>
   8aef2:	f108 0808 	add.w	r8, r8, #8
   8aef6:	e009      	b.n	8af0c <_svfiprintf_r+0x6d6>
   8aef8:	4658      	mov	r0, fp
   8aefa:	4649      	mov	r1, r9
   8aefc:	aa0b      	add	r2, sp, #44	; 0x2c
   8aefe:	f7ff fc1d 	bl	8a73c <__ssprint_r>
   8af02:	2800      	cmp	r0, #0
   8af04:	f040 8085 	bne.w	8b012 <_svfiprintf_r+0x7dc>
   8af08:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8af0c:	3d10      	subs	r5, #16
   8af0e:	e7e0      	b.n	8aed2 <_svfiprintf_r+0x69c>
   8af10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8af12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8af14:	1c51      	adds	r1, r2, #1
   8af16:	f8c8 5004 	str.w	r5, [r8, #4]
   8af1a:	2907      	cmp	r1, #7
   8af1c:	441d      	add	r5, r3
   8af1e:	950d      	str	r5, [sp, #52]	; 0x34
   8af20:	910c      	str	r1, [sp, #48]	; 0x30
   8af22:	dc02      	bgt.n	8af2a <_svfiprintf_r+0x6f4>
   8af24:	f108 0808 	add.w	r8, r8, #8
   8af28:	e008      	b.n	8af3c <_svfiprintf_r+0x706>
   8af2a:	4658      	mov	r0, fp
   8af2c:	4649      	mov	r1, r9
   8af2e:	aa0b      	add	r2, sp, #44	; 0x2c
   8af30:	f7ff fc04 	bl	8a73c <__ssprint_r>
   8af34:	2800      	cmp	r0, #0
   8af36:	d16c      	bne.n	8b012 <_svfiprintf_r+0x7dc>
   8af38:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8af3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8af3e:	980d      	ldr	r0, [sp, #52]	; 0x34
   8af40:	1c5a      	adds	r2, r3, #1
   8af42:	f8c8 4004 	str.w	r4, [r8, #4]
   8af46:	2a07      	cmp	r2, #7
   8af48:	4404      	add	r4, r0
   8af4a:	f8c8 a000 	str.w	sl, [r8]
   8af4e:	940d      	str	r4, [sp, #52]	; 0x34
   8af50:	920c      	str	r2, [sp, #48]	; 0x30
   8af52:	dc02      	bgt.n	8af5a <_svfiprintf_r+0x724>
   8af54:	f108 0308 	add.w	r3, r8, #8
   8af58:	e007      	b.n	8af6a <_svfiprintf_r+0x734>
   8af5a:	4658      	mov	r0, fp
   8af5c:	4649      	mov	r1, r9
   8af5e:	aa0b      	add	r2, sp, #44	; 0x2c
   8af60:	f7ff fbec 	bl	8a73c <__ssprint_r>
   8af64:	2800      	cmp	r0, #0
   8af66:	d154      	bne.n	8b012 <_svfiprintf_r+0x7dc>
   8af68:	ab18      	add	r3, sp, #96	; 0x60
   8af6a:	077a      	lsls	r2, r7, #29
   8af6c:	d40b      	bmi.n	8af86 <_svfiprintf_r+0x750>
   8af6e:	9804      	ldr	r0, [sp, #16]
   8af70:	9b02      	ldr	r3, [sp, #8]
   8af72:	9a03      	ldr	r2, [sp, #12]
   8af74:	990d      	ldr	r1, [sp, #52]	; 0x34
   8af76:	4293      	cmp	r3, r2
   8af78:	bfac      	ite	ge
   8af7a:	18c0      	addge	r0, r0, r3
   8af7c:	1880      	addlt	r0, r0, r2
   8af7e:	9004      	str	r0, [sp, #16]
   8af80:	2900      	cmp	r1, #0
   8af82:	d036      	beq.n	8aff2 <_svfiprintf_r+0x7bc>
   8af84:	e02f      	b.n	8afe6 <_svfiprintf_r+0x7b0>
   8af86:	9c03      	ldr	r4, [sp, #12]
   8af88:	9902      	ldr	r1, [sp, #8]
   8af8a:	1a64      	subs	r4, r4, r1
   8af8c:	2c00      	cmp	r4, #0
   8af8e:	ddee      	ble.n	8af6e <_svfiprintf_r+0x738>
   8af90:	481a      	ldr	r0, [pc, #104]	; (8affc <_svfiprintf_r+0x7c6>)
   8af92:	2c10      	cmp	r4, #16
   8af94:	6018      	str	r0, [r3, #0]
   8af96:	dd15      	ble.n	8afc4 <_svfiprintf_r+0x78e>
   8af98:	990c      	ldr	r1, [sp, #48]	; 0x30
   8af9a:	2010      	movs	r0, #16
   8af9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8af9e:	6058      	str	r0, [r3, #4]
   8afa0:	1c48      	adds	r0, r1, #1
   8afa2:	3210      	adds	r2, #16
   8afa4:	2807      	cmp	r0, #7
   8afa6:	920d      	str	r2, [sp, #52]	; 0x34
   8afa8:	900c      	str	r0, [sp, #48]	; 0x30
   8afaa:	dc01      	bgt.n	8afb0 <_svfiprintf_r+0x77a>
   8afac:	3308      	adds	r3, #8
   8afae:	e007      	b.n	8afc0 <_svfiprintf_r+0x78a>
   8afb0:	4658      	mov	r0, fp
   8afb2:	4649      	mov	r1, r9
   8afb4:	aa0b      	add	r2, sp, #44	; 0x2c
   8afb6:	f7ff fbc1 	bl	8a73c <__ssprint_r>
   8afba:	2800      	cmp	r0, #0
   8afbc:	d129      	bne.n	8b012 <_svfiprintf_r+0x7dc>
   8afbe:	ab18      	add	r3, sp, #96	; 0x60
   8afc0:	3c10      	subs	r4, #16
   8afc2:	e7e5      	b.n	8af90 <_svfiprintf_r+0x75a>
   8afc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8afc6:	605c      	str	r4, [r3, #4]
   8afc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8afca:	1c51      	adds	r1, r2, #1
   8afcc:	191c      	adds	r4, r3, r4
   8afce:	2907      	cmp	r1, #7
   8afd0:	940d      	str	r4, [sp, #52]	; 0x34
   8afd2:	910c      	str	r1, [sp, #48]	; 0x30
   8afd4:	ddcb      	ble.n	8af6e <_svfiprintf_r+0x738>
   8afd6:	4658      	mov	r0, fp
   8afd8:	4649      	mov	r1, r9
   8afda:	aa0b      	add	r2, sp, #44	; 0x2c
   8afdc:	f7ff fbae 	bl	8a73c <__ssprint_r>
   8afe0:	2800      	cmp	r0, #0
   8afe2:	d0c4      	beq.n	8af6e <_svfiprintf_r+0x738>
   8afe4:	e015      	b.n	8b012 <_svfiprintf_r+0x7dc>
   8afe6:	4658      	mov	r0, fp
   8afe8:	4649      	mov	r1, r9
   8afea:	aa0b      	add	r2, sp, #44	; 0x2c
   8afec:	f7ff fba6 	bl	8a73c <__ssprint_r>
   8aff0:	b978      	cbnz	r0, 8b012 <_svfiprintf_r+0x7dc>
   8aff2:	2500      	movs	r5, #0
   8aff4:	950c      	str	r5, [sp, #48]	; 0x30
   8aff6:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8affa:	e445      	b.n	8a888 <_svfiprintf_r+0x52>
   8affc:	0008c124 	.word	0x0008c124
   8b000:	0008c134 	.word	0x0008c134
   8b004:	980d      	ldr	r0, [sp, #52]	; 0x34
   8b006:	b120      	cbz	r0, 8b012 <_svfiprintf_r+0x7dc>
   8b008:	4658      	mov	r0, fp
   8b00a:	4649      	mov	r1, r9
   8b00c:	aa0b      	add	r2, sp, #44	; 0x2c
   8b00e:	f7ff fb95 	bl	8a73c <__ssprint_r>
   8b012:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   8b016:	9b04      	ldr	r3, [sp, #16]
   8b018:	f002 0140 	and.w	r1, r2, #64	; 0x40
   8b01c:	b208      	sxth	r0, r1
   8b01e:	2800      	cmp	r0, #0
   8b020:	bf18      	it	ne
   8b022:	f04f 33ff 	movne.w	r3, #4294967295
   8b026:	4618      	mov	r0, r3
   8b028:	b029      	add	sp, #164	; 0xa4
   8b02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b02e:	bf00      	nop

0008b030 <__aeabi_uldivmod>:
   8b030:	b94b      	cbnz	r3, 8b046 <__aeabi_uldivmod+0x16>
   8b032:	b942      	cbnz	r2, 8b046 <__aeabi_uldivmod+0x16>
   8b034:	2900      	cmp	r1, #0
   8b036:	bf08      	it	eq
   8b038:	2800      	cmpeq	r0, #0
   8b03a:	d002      	beq.n	8b042 <__aeabi_uldivmod+0x12>
   8b03c:	f04f 31ff 	mov.w	r1, #4294967295
   8b040:	4608      	mov	r0, r1
   8b042:	f000 b83b 	b.w	8b0bc <__aeabi_idiv0>
   8b046:	b082      	sub	sp, #8
   8b048:	46ec      	mov	ip, sp
   8b04a:	e92d 5000 	stmdb	sp!, {ip, lr}
   8b04e:	f000 f81d 	bl	8b08c <__gnu_uldivmod_helper>
   8b052:	f8dd e004 	ldr.w	lr, [sp, #4]
   8b056:	b002      	add	sp, #8
   8b058:	bc0c      	pop	{r2, r3}
   8b05a:	4770      	bx	lr

0008b05c <__gnu_ldivmod_helper>:
   8b05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b060:	4616      	mov	r6, r2
   8b062:	4698      	mov	r8, r3
   8b064:	4604      	mov	r4, r0
   8b066:	460d      	mov	r5, r1
   8b068:	f000 f82a 	bl	8b0c0 <__divdi3>
   8b06c:	fb06 fc01 	mul.w	ip, r6, r1
   8b070:	fba6 2300 	umull	r2, r3, r6, r0
   8b074:	fb00 c708 	mla	r7, r0, r8, ip
   8b078:	18fb      	adds	r3, r7, r3
   8b07a:	1aa2      	subs	r2, r4, r2
   8b07c:	eb65 0303 	sbc.w	r3, r5, r3
   8b080:	9c06      	ldr	r4, [sp, #24]
   8b082:	e9c4 2300 	strd	r2, r3, [r4]
   8b086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b08a:	bf00      	nop

0008b08c <__gnu_uldivmod_helper>:
   8b08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b090:	4690      	mov	r8, r2
   8b092:	4606      	mov	r6, r0
   8b094:	460f      	mov	r7, r1
   8b096:	461d      	mov	r5, r3
   8b098:	f000 f970 	bl	8b37c <__udivdi3>
   8b09c:	fb00 f305 	mul.w	r3, r0, r5
   8b0a0:	fba0 4508 	umull	r4, r5, r0, r8
   8b0a4:	fb08 3801 	mla	r8, r8, r1, r3
   8b0a8:	9b06      	ldr	r3, [sp, #24]
   8b0aa:	4445      	add	r5, r8
   8b0ac:	1b34      	subs	r4, r6, r4
   8b0ae:	eb67 0505 	sbc.w	r5, r7, r5
   8b0b2:	e9c3 4500 	strd	r4, r5, [r3]
   8b0b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b0ba:	bf00      	nop

0008b0bc <__aeabi_idiv0>:
   8b0bc:	4770      	bx	lr
   8b0be:	bf00      	nop

0008b0c0 <__divdi3>:
   8b0c0:	2900      	cmp	r1, #0
   8b0c2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8b0c6:	461d      	mov	r5, r3
   8b0c8:	f2c0 809d 	blt.w	8b206 <__divdi3+0x146>
   8b0cc:	2400      	movs	r4, #0
   8b0ce:	2d00      	cmp	r5, #0
   8b0d0:	f2c0 8094 	blt.w	8b1fc <__divdi3+0x13c>
   8b0d4:	4680      	mov	r8, r0
   8b0d6:	460f      	mov	r7, r1
   8b0d8:	4694      	mov	ip, r2
   8b0da:	461e      	mov	r6, r3
   8b0dc:	bbe3      	cbnz	r3, 8b158 <__divdi3+0x98>
   8b0de:	428a      	cmp	r2, r1
   8b0e0:	d955      	bls.n	8b18e <__divdi3+0xce>
   8b0e2:	fab2 f782 	clz	r7, r2
   8b0e6:	b147      	cbz	r7, 8b0fa <__divdi3+0x3a>
   8b0e8:	f1c7 0520 	rsb	r5, r7, #32
   8b0ec:	fa20 f605 	lsr.w	r6, r0, r5
   8b0f0:	fa01 f107 	lsl.w	r1, r1, r7
   8b0f4:	40ba      	lsls	r2, r7
   8b0f6:	40b8      	lsls	r0, r7
   8b0f8:	4331      	orrs	r1, r6
   8b0fa:	0c17      	lsrs	r7, r2, #16
   8b0fc:	fbb1 f6f7 	udiv	r6, r1, r7
   8b100:	fa1f fc82 	uxth.w	ip, r2
   8b104:	fb07 1116 	mls	r1, r7, r6, r1
   8b108:	fb0c f506 	mul.w	r5, ip, r6
   8b10c:	0c03      	lsrs	r3, r0, #16
   8b10e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8b112:	429d      	cmp	r5, r3
   8b114:	d908      	bls.n	8b128 <__divdi3+0x68>
   8b116:	1e71      	subs	r1, r6, #1
   8b118:	189b      	adds	r3, r3, r2
   8b11a:	f080 8113 	bcs.w	8b344 <__divdi3+0x284>
   8b11e:	429d      	cmp	r5, r3
   8b120:	f240 8110 	bls.w	8b344 <__divdi3+0x284>
   8b124:	3e02      	subs	r6, #2
   8b126:	189b      	adds	r3, r3, r2
   8b128:	1b59      	subs	r1, r3, r5
   8b12a:	fbb1 f5f7 	udiv	r5, r1, r7
   8b12e:	fb07 1315 	mls	r3, r7, r5, r1
   8b132:	fb0c fc05 	mul.w	ip, ip, r5
   8b136:	b280      	uxth	r0, r0
   8b138:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
   8b13c:	458c      	cmp	ip, r1
   8b13e:	d907      	bls.n	8b150 <__divdi3+0x90>
   8b140:	1e6b      	subs	r3, r5, #1
   8b142:	188a      	adds	r2, r1, r2
   8b144:	f080 8100 	bcs.w	8b348 <__divdi3+0x288>
   8b148:	4594      	cmp	ip, r2
   8b14a:	f240 80fd 	bls.w	8b348 <__divdi3+0x288>
   8b14e:	3d02      	subs	r5, #2
   8b150:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
   8b154:	2500      	movs	r5, #0
   8b156:	e003      	b.n	8b160 <__divdi3+0xa0>
   8b158:	428b      	cmp	r3, r1
   8b15a:	d90c      	bls.n	8b176 <__divdi3+0xb6>
   8b15c:	2500      	movs	r5, #0
   8b15e:	4629      	mov	r1, r5
   8b160:	460a      	mov	r2, r1
   8b162:	462b      	mov	r3, r5
   8b164:	b114      	cbz	r4, 8b16c <__divdi3+0xac>
   8b166:	4252      	negs	r2, r2
   8b168:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8b16c:	4610      	mov	r0, r2
   8b16e:	4619      	mov	r1, r3
   8b170:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8b174:	4770      	bx	lr
   8b176:	fab3 f583 	clz	r5, r3
   8b17a:	2d00      	cmp	r5, #0
   8b17c:	f040 8087 	bne.w	8b28e <__divdi3+0x1ce>
   8b180:	428b      	cmp	r3, r1
   8b182:	d301      	bcc.n	8b188 <__divdi3+0xc8>
   8b184:	4282      	cmp	r2, r0
   8b186:	d8ea      	bhi.n	8b15e <__divdi3+0x9e>
   8b188:	2500      	movs	r5, #0
   8b18a:	2101      	movs	r1, #1
   8b18c:	e7e8      	b.n	8b160 <__divdi3+0xa0>
   8b18e:	b912      	cbnz	r2, 8b196 <__divdi3+0xd6>
   8b190:	2601      	movs	r6, #1
   8b192:	fbb6 f2f2 	udiv	r2, r6, r2
   8b196:	fab2 f682 	clz	r6, r2
   8b19a:	2e00      	cmp	r6, #0
   8b19c:	d139      	bne.n	8b212 <__divdi3+0x152>
   8b19e:	1a8e      	subs	r6, r1, r2
   8b1a0:	0c13      	lsrs	r3, r2, #16
   8b1a2:	fa1f fc82 	uxth.w	ip, r2
   8b1a6:	2501      	movs	r5, #1
   8b1a8:	fbb6 f7f3 	udiv	r7, r6, r3
   8b1ac:	fb03 6117 	mls	r1, r3, r7, r6
   8b1b0:	fb0c f807 	mul.w	r8, ip, r7
   8b1b4:	ea4f 4910 	mov.w	r9, r0, lsr #16
   8b1b8:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
   8b1bc:	45b0      	cmp	r8, r6
   8b1be:	d906      	bls.n	8b1ce <__divdi3+0x10e>
   8b1c0:	1e79      	subs	r1, r7, #1
   8b1c2:	18b6      	adds	r6, r6, r2
   8b1c4:	d202      	bcs.n	8b1cc <__divdi3+0x10c>
   8b1c6:	45b0      	cmp	r8, r6
   8b1c8:	f200 80d3 	bhi.w	8b372 <__divdi3+0x2b2>
   8b1cc:	460f      	mov	r7, r1
   8b1ce:	ebc8 0606 	rsb	r6, r8, r6
   8b1d2:	fbb6 f1f3 	udiv	r1, r6, r3
   8b1d6:	fb03 6311 	mls	r3, r3, r1, r6
   8b1da:	fb0c fc01 	mul.w	ip, ip, r1
   8b1de:	b280      	uxth	r0, r0
   8b1e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   8b1e4:	459c      	cmp	ip, r3
   8b1e6:	d906      	bls.n	8b1f6 <__divdi3+0x136>
   8b1e8:	1e4e      	subs	r6, r1, #1
   8b1ea:	189a      	adds	r2, r3, r2
   8b1ec:	d202      	bcs.n	8b1f4 <__divdi3+0x134>
   8b1ee:	4594      	cmp	ip, r2
   8b1f0:	f200 80c2 	bhi.w	8b378 <__divdi3+0x2b8>
   8b1f4:	4631      	mov	r1, r6
   8b1f6:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   8b1fa:	e7b1      	b.n	8b160 <__divdi3+0xa0>
   8b1fc:	43e4      	mvns	r4, r4
   8b1fe:	4252      	negs	r2, r2
   8b200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8b204:	e766      	b.n	8b0d4 <__divdi3+0x14>
   8b206:	4240      	negs	r0, r0
   8b208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8b20c:	f04f 34ff 	mov.w	r4, #4294967295
   8b210:	e75d      	b.n	8b0ce <__divdi3+0xe>
   8b212:	40b2      	lsls	r2, r6
   8b214:	f1c6 0920 	rsb	r9, r6, #32
   8b218:	fa21 f709 	lsr.w	r7, r1, r9
   8b21c:	fa20 f909 	lsr.w	r9, r0, r9
   8b220:	fa01 f106 	lsl.w	r1, r1, r6
   8b224:	0c13      	lsrs	r3, r2, #16
   8b226:	fbb7 f8f3 	udiv	r8, r7, r3
   8b22a:	fa1f fc82 	uxth.w	ip, r2
   8b22e:	fb03 7718 	mls	r7, r3, r8, r7
   8b232:	fb0c f508 	mul.w	r5, ip, r8
   8b236:	ea49 0901 	orr.w	r9, r9, r1
   8b23a:	ea4f 4119 	mov.w	r1, r9, lsr #16
   8b23e:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
   8b242:	40b0      	lsls	r0, r6
   8b244:	42bd      	cmp	r5, r7
   8b246:	d90a      	bls.n	8b25e <__divdi3+0x19e>
   8b248:	18bf      	adds	r7, r7, r2
   8b24a:	f108 36ff 	add.w	r6, r8, #4294967295
   8b24e:	f080 808e 	bcs.w	8b36e <__divdi3+0x2ae>
   8b252:	42bd      	cmp	r5, r7
   8b254:	f240 808b 	bls.w	8b36e <__divdi3+0x2ae>
   8b258:	f1a8 0802 	sub.w	r8, r8, #2
   8b25c:	18bf      	adds	r7, r7, r2
   8b25e:	1b79      	subs	r1, r7, r5
   8b260:	fbb1 f5f3 	udiv	r5, r1, r3
   8b264:	fb03 1715 	mls	r7, r3, r5, r1
   8b268:	fb0c f605 	mul.w	r6, ip, r5
   8b26c:	fa1f f989 	uxth.w	r9, r9
   8b270:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
   8b274:	428e      	cmp	r6, r1
   8b276:	d906      	bls.n	8b286 <__divdi3+0x1c6>
   8b278:	1e6f      	subs	r7, r5, #1
   8b27a:	1889      	adds	r1, r1, r2
   8b27c:	d271      	bcs.n	8b362 <__divdi3+0x2a2>
   8b27e:	428e      	cmp	r6, r1
   8b280:	d96f      	bls.n	8b362 <__divdi3+0x2a2>
   8b282:	3d02      	subs	r5, #2
   8b284:	1889      	adds	r1, r1, r2
   8b286:	1b8e      	subs	r6, r1, r6
   8b288:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
   8b28c:	e78c      	b.n	8b1a8 <__divdi3+0xe8>
   8b28e:	f1c5 0120 	rsb	r1, r5, #32
   8b292:	fa22 f301 	lsr.w	r3, r2, r1
   8b296:	fa06 f605 	lsl.w	r6, r6, r5
   8b29a:	fa27 f201 	lsr.w	r2, r7, r1
   8b29e:	fa07 f705 	lsl.w	r7, r7, r5
   8b2a2:	fa20 f101 	lsr.w	r1, r0, r1
   8b2a6:	431e      	orrs	r6, r3
   8b2a8:	ea4f 4916 	mov.w	r9, r6, lsr #16
   8b2ac:	fbb2 f8f9 	udiv	r8, r2, r9
   8b2b0:	fa1f fa86 	uxth.w	sl, r6
   8b2b4:	fb09 2218 	mls	r2, r9, r8, r2
   8b2b8:	fb0a fb08 	mul.w	fp, sl, r8
   8b2bc:	430f      	orrs	r7, r1
   8b2be:	0c3b      	lsrs	r3, r7, #16
   8b2c0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8b2c4:	4593      	cmp	fp, r2
   8b2c6:	fa0c fc05 	lsl.w	ip, ip, r5
   8b2ca:	d908      	bls.n	8b2de <__divdi3+0x21e>
   8b2cc:	1992      	adds	r2, r2, r6
   8b2ce:	f108 31ff 	add.w	r1, r8, #4294967295
   8b2d2:	d24a      	bcs.n	8b36a <__divdi3+0x2aa>
   8b2d4:	4593      	cmp	fp, r2
   8b2d6:	d948      	bls.n	8b36a <__divdi3+0x2aa>
   8b2d8:	f1a8 0802 	sub.w	r8, r8, #2
   8b2dc:	1992      	adds	r2, r2, r6
   8b2de:	ebcb 0302 	rsb	r3, fp, r2
   8b2e2:	fbb3 f1f9 	udiv	r1, r3, r9
   8b2e6:	fb09 3211 	mls	r2, r9, r1, r3
   8b2ea:	fb0a fa01 	mul.w	sl, sl, r1
   8b2ee:	b2bf      	uxth	r7, r7
   8b2f0:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
   8b2f4:	459a      	cmp	sl, r3
   8b2f6:	d906      	bls.n	8b306 <__divdi3+0x246>
   8b2f8:	1e4a      	subs	r2, r1, #1
   8b2fa:	199b      	adds	r3, r3, r6
   8b2fc:	d233      	bcs.n	8b366 <__divdi3+0x2a6>
   8b2fe:	459a      	cmp	sl, r3
   8b300:	d931      	bls.n	8b366 <__divdi3+0x2a6>
   8b302:	3902      	subs	r1, #2
   8b304:	199b      	adds	r3, r3, r6
   8b306:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
   8b30a:	0c0f      	lsrs	r7, r1, #16
   8b30c:	fa1f f88c 	uxth.w	r8, ip
   8b310:	fb08 f607 	mul.w	r6, r8, r7
   8b314:	b28a      	uxth	r2, r1
   8b316:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   8b31a:	fb08 f802 	mul.w	r8, r8, r2
   8b31e:	fb0c 6202 	mla	r2, ip, r2, r6
   8b322:	fb0c fc07 	mul.w	ip, ip, r7
   8b326:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   8b32a:	4296      	cmp	r6, r2
   8b32c:	bf88      	it	hi
   8b32e:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
   8b332:	ebca 0303 	rsb	r3, sl, r3
   8b336:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
   8b33a:	4563      	cmp	r3, ip
   8b33c:	d30e      	bcc.n	8b35c <__divdi3+0x29c>
   8b33e:	d005      	beq.n	8b34c <__divdi3+0x28c>
   8b340:	2500      	movs	r5, #0
   8b342:	e70d      	b.n	8b160 <__divdi3+0xa0>
   8b344:	460e      	mov	r6, r1
   8b346:	e6ef      	b.n	8b128 <__divdi3+0x68>
   8b348:	461d      	mov	r5, r3
   8b34a:	e701      	b.n	8b150 <__divdi3+0x90>
   8b34c:	fa00 f005 	lsl.w	r0, r0, r5
   8b350:	fa1f f888 	uxth.w	r8, r8
   8b354:	eb08 4502 	add.w	r5, r8, r2, lsl #16
   8b358:	42a8      	cmp	r0, r5
   8b35a:	d2f1      	bcs.n	8b340 <__divdi3+0x280>
   8b35c:	3901      	subs	r1, #1
   8b35e:	2500      	movs	r5, #0
   8b360:	e6fe      	b.n	8b160 <__divdi3+0xa0>
   8b362:	463d      	mov	r5, r7
   8b364:	e78f      	b.n	8b286 <__divdi3+0x1c6>
   8b366:	4611      	mov	r1, r2
   8b368:	e7cd      	b.n	8b306 <__divdi3+0x246>
   8b36a:	4688      	mov	r8, r1
   8b36c:	e7b7      	b.n	8b2de <__divdi3+0x21e>
   8b36e:	46b0      	mov	r8, r6
   8b370:	e775      	b.n	8b25e <__divdi3+0x19e>
   8b372:	3f02      	subs	r7, #2
   8b374:	18b6      	adds	r6, r6, r2
   8b376:	e72a      	b.n	8b1ce <__divdi3+0x10e>
   8b378:	3902      	subs	r1, #2
   8b37a:	e73c      	b.n	8b1f6 <__divdi3+0x136>

0008b37c <__udivdi3>:
   8b37c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8b380:	4614      	mov	r4, r2
   8b382:	4605      	mov	r5, r0
   8b384:	460e      	mov	r6, r1
   8b386:	2b00      	cmp	r3, #0
   8b388:	d13d      	bne.n	8b406 <__udivdi3+0x8a>
   8b38a:	428a      	cmp	r2, r1
   8b38c:	d949      	bls.n	8b422 <__udivdi3+0xa6>
   8b38e:	fab2 f782 	clz	r7, r2
   8b392:	b147      	cbz	r7, 8b3a6 <__udivdi3+0x2a>
   8b394:	f1c7 0120 	rsb	r1, r7, #32
   8b398:	fa20 f201 	lsr.w	r2, r0, r1
   8b39c:	fa06 f607 	lsl.w	r6, r6, r7
   8b3a0:	40bc      	lsls	r4, r7
   8b3a2:	40bd      	lsls	r5, r7
   8b3a4:	4316      	orrs	r6, r2
   8b3a6:	0c22      	lsrs	r2, r4, #16
   8b3a8:	fbb6 f0f2 	udiv	r0, r6, r2
   8b3ac:	b2a1      	uxth	r1, r4
   8b3ae:	fb02 6610 	mls	r6, r2, r0, r6
   8b3b2:	fb01 f300 	mul.w	r3, r1, r0
   8b3b6:	0c2f      	lsrs	r7, r5, #16
   8b3b8:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   8b3bc:	42b3      	cmp	r3, r6
   8b3be:	d908      	bls.n	8b3d2 <__udivdi3+0x56>
   8b3c0:	1e47      	subs	r7, r0, #1
   8b3c2:	1936      	adds	r6, r6, r4
   8b3c4:	f080 80fa 	bcs.w	8b5bc <__udivdi3+0x240>
   8b3c8:	42b3      	cmp	r3, r6
   8b3ca:	f240 80f7 	bls.w	8b5bc <__udivdi3+0x240>
   8b3ce:	3802      	subs	r0, #2
   8b3d0:	1936      	adds	r6, r6, r4
   8b3d2:	1af6      	subs	r6, r6, r3
   8b3d4:	fbb6 f3f2 	udiv	r3, r6, r2
   8b3d8:	fb02 6213 	mls	r2, r2, r3, r6
   8b3dc:	fb01 f103 	mul.w	r1, r1, r3
   8b3e0:	b2ad      	uxth	r5, r5
   8b3e2:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
   8b3e6:	4291      	cmp	r1, r2
   8b3e8:	d907      	bls.n	8b3fa <__udivdi3+0x7e>
   8b3ea:	1e5e      	subs	r6, r3, #1
   8b3ec:	1912      	adds	r2, r2, r4
   8b3ee:	f080 80e7 	bcs.w	8b5c0 <__udivdi3+0x244>
   8b3f2:	4291      	cmp	r1, r2
   8b3f4:	f240 80e4 	bls.w	8b5c0 <__udivdi3+0x244>
   8b3f8:	3b02      	subs	r3, #2
   8b3fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   8b3fe:	2100      	movs	r1, #0
   8b400:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8b404:	4770      	bx	lr
   8b406:	428b      	cmp	r3, r1
   8b408:	d843      	bhi.n	8b492 <__udivdi3+0x116>
   8b40a:	fab3 f483 	clz	r4, r3
   8b40e:	2c00      	cmp	r4, #0
   8b410:	d142      	bne.n	8b498 <__udivdi3+0x11c>
   8b412:	428b      	cmp	r3, r1
   8b414:	d302      	bcc.n	8b41c <__udivdi3+0xa0>
   8b416:	4282      	cmp	r2, r0
   8b418:	f200 80e1 	bhi.w	8b5de <__udivdi3+0x262>
   8b41c:	2100      	movs	r1, #0
   8b41e:	2001      	movs	r0, #1
   8b420:	e7ee      	b.n	8b400 <__udivdi3+0x84>
   8b422:	b912      	cbnz	r2, 8b42a <__udivdi3+0xae>
   8b424:	2701      	movs	r7, #1
   8b426:	fbb7 f4f2 	udiv	r4, r7, r2
   8b42a:	fab4 f284 	clz	r2, r4
   8b42e:	2a00      	cmp	r2, #0
   8b430:	f040 8089 	bne.w	8b546 <__udivdi3+0x1ca>
   8b434:	1b0a      	subs	r2, r1, r4
   8b436:	0c23      	lsrs	r3, r4, #16
   8b438:	b2a7      	uxth	r7, r4
   8b43a:	2101      	movs	r1, #1
   8b43c:	fbb2 f6f3 	udiv	r6, r2, r3
   8b440:	fb03 2216 	mls	r2, r3, r6, r2
   8b444:	fb07 f006 	mul.w	r0, r7, r6
   8b448:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   8b44c:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   8b450:	4290      	cmp	r0, r2
   8b452:	d907      	bls.n	8b464 <__udivdi3+0xe8>
   8b454:	1912      	adds	r2, r2, r4
   8b456:	f106 3cff 	add.w	ip, r6, #4294967295
   8b45a:	d202      	bcs.n	8b462 <__udivdi3+0xe6>
   8b45c:	4290      	cmp	r0, r2
   8b45e:	f200 80d0 	bhi.w	8b602 <__udivdi3+0x286>
   8b462:	4666      	mov	r6, ip
   8b464:	1a12      	subs	r2, r2, r0
   8b466:	fbb2 f0f3 	udiv	r0, r2, r3
   8b46a:	fb03 2310 	mls	r3, r3, r0, r2
   8b46e:	fb07 f700 	mul.w	r7, r7, r0
   8b472:	b2ad      	uxth	r5, r5
   8b474:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   8b478:	429f      	cmp	r7, r3
   8b47a:	d907      	bls.n	8b48c <__udivdi3+0x110>
   8b47c:	1e42      	subs	r2, r0, #1
   8b47e:	191b      	adds	r3, r3, r4
   8b480:	f080 80a0 	bcs.w	8b5c4 <__udivdi3+0x248>
   8b484:	429f      	cmp	r7, r3
   8b486:	f240 809d 	bls.w	8b5c4 <__udivdi3+0x248>
   8b48a:	3802      	subs	r0, #2
   8b48c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   8b490:	e7b6      	b.n	8b400 <__udivdi3+0x84>
   8b492:	2100      	movs	r1, #0
   8b494:	4608      	mov	r0, r1
   8b496:	e7b3      	b.n	8b400 <__udivdi3+0x84>
   8b498:	f1c4 0620 	rsb	r6, r4, #32
   8b49c:	fa22 f706 	lsr.w	r7, r2, r6
   8b4a0:	fa03 f304 	lsl.w	r3, r3, r4
   8b4a4:	fa21 f506 	lsr.w	r5, r1, r6
   8b4a8:	fa01 f104 	lsl.w	r1, r1, r4
   8b4ac:	fa20 f606 	lsr.w	r6, r0, r6
   8b4b0:	433b      	orrs	r3, r7
   8b4b2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8b4b6:	fbb5 f7fc 	udiv	r7, r5, ip
   8b4ba:	fa1f f883 	uxth.w	r8, r3
   8b4be:	fb0c 5517 	mls	r5, ip, r7, r5
   8b4c2:	fb08 f907 	mul.w	r9, r8, r7
   8b4c6:	ea46 0a01 	orr.w	sl, r6, r1
   8b4ca:	ea4f 411a 	mov.w	r1, sl, lsr #16
   8b4ce:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   8b4d2:	45a9      	cmp	r9, r5
   8b4d4:	fa02 f204 	lsl.w	r2, r2, r4
   8b4d8:	d904      	bls.n	8b4e4 <__udivdi3+0x168>
   8b4da:	1e7e      	subs	r6, r7, #1
   8b4dc:	18ed      	adds	r5, r5, r3
   8b4de:	f0c0 8081 	bcc.w	8b5e4 <__udivdi3+0x268>
   8b4e2:	4637      	mov	r7, r6
   8b4e4:	ebc9 0105 	rsb	r1, r9, r5
   8b4e8:	fbb1 f6fc 	udiv	r6, r1, ip
   8b4ec:	fb0c 1516 	mls	r5, ip, r6, r1
   8b4f0:	fb08 f806 	mul.w	r8, r8, r6
   8b4f4:	fa1f fa8a 	uxth.w	sl, sl
   8b4f8:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
   8b4fc:	4588      	cmp	r8, r1
   8b4fe:	d903      	bls.n	8b508 <__udivdi3+0x18c>
   8b500:	1e75      	subs	r5, r6, #1
   8b502:	18c9      	adds	r1, r1, r3
   8b504:	d374      	bcc.n	8b5f0 <__udivdi3+0x274>
   8b506:	462e      	mov	r6, r5
   8b508:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   8b50c:	0c37      	lsrs	r7, r6, #16
   8b50e:	fa1f fc82 	uxth.w	ip, r2
   8b512:	fb0c f507 	mul.w	r5, ip, r7
   8b516:	0c12      	lsrs	r2, r2, #16
   8b518:	b2b3      	uxth	r3, r6
   8b51a:	fb0c fc03 	mul.w	ip, ip, r3
   8b51e:	fb02 5303 	mla	r3, r2, r3, r5
   8b522:	fb02 f207 	mul.w	r2, r2, r7
   8b526:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8b52a:	429d      	cmp	r5, r3
   8b52c:	bf88      	it	hi
   8b52e:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
   8b532:	ebc8 0101 	rsb	r1, r8, r1
   8b536:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8b53a:	4291      	cmp	r1, r2
   8b53c:	d34c      	bcc.n	8b5d8 <__udivdi3+0x25c>
   8b53e:	d043      	beq.n	8b5c8 <__udivdi3+0x24c>
   8b540:	4630      	mov	r0, r6
   8b542:	2100      	movs	r1, #0
   8b544:	e75c      	b.n	8b400 <__udivdi3+0x84>
   8b546:	4094      	lsls	r4, r2
   8b548:	f1c2 0520 	rsb	r5, r2, #32
   8b54c:	fa21 f605 	lsr.w	r6, r1, r5
   8b550:	fa20 f505 	lsr.w	r5, r0, r5
   8b554:	fa01 f102 	lsl.w	r1, r1, r2
   8b558:	0c23      	lsrs	r3, r4, #16
   8b55a:	fbb6 fcf3 	udiv	ip, r6, r3
   8b55e:	b2a7      	uxth	r7, r4
   8b560:	fb03 661c 	mls	r6, r3, ip, r6
   8b564:	fb07 f80c 	mul.w	r8, r7, ip
   8b568:	4329      	orrs	r1, r5
   8b56a:	0c0d      	lsrs	r5, r1, #16
   8b56c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   8b570:	45b0      	cmp	r8, r6
   8b572:	fa00 f502 	lsl.w	r5, r0, r2
   8b576:	d908      	bls.n	8b58a <__udivdi3+0x20e>
   8b578:	1936      	adds	r6, r6, r4
   8b57a:	f10c 30ff 	add.w	r0, ip, #4294967295
   8b57e:	d23e      	bcs.n	8b5fe <__udivdi3+0x282>
   8b580:	45b0      	cmp	r8, r6
   8b582:	d93c      	bls.n	8b5fe <__udivdi3+0x282>
   8b584:	f1ac 0c02 	sub.w	ip, ip, #2
   8b588:	1936      	adds	r6, r6, r4
   8b58a:	ebc8 0206 	rsb	r2, r8, r6
   8b58e:	fbb2 f0f3 	udiv	r0, r2, r3
   8b592:	fb03 2610 	mls	r6, r3, r0, r2
   8b596:	fb07 f800 	mul.w	r8, r7, r0
   8b59a:	b289      	uxth	r1, r1
   8b59c:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   8b5a0:	4590      	cmp	r8, r2
   8b5a2:	d906      	bls.n	8b5b2 <__udivdi3+0x236>
   8b5a4:	1e46      	subs	r6, r0, #1
   8b5a6:	1912      	adds	r2, r2, r4
   8b5a8:	d227      	bcs.n	8b5fa <__udivdi3+0x27e>
   8b5aa:	4590      	cmp	r8, r2
   8b5ac:	d925      	bls.n	8b5fa <__udivdi3+0x27e>
   8b5ae:	3802      	subs	r0, #2
   8b5b0:	1912      	adds	r2, r2, r4
   8b5b2:	ebc8 0202 	rsb	r2, r8, r2
   8b5b6:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
   8b5ba:	e73f      	b.n	8b43c <__udivdi3+0xc0>
   8b5bc:	4638      	mov	r0, r7
   8b5be:	e708      	b.n	8b3d2 <__udivdi3+0x56>
   8b5c0:	4633      	mov	r3, r6
   8b5c2:	e71a      	b.n	8b3fa <__udivdi3+0x7e>
   8b5c4:	4610      	mov	r0, r2
   8b5c6:	e761      	b.n	8b48c <__udivdi3+0x110>
   8b5c8:	fa00 f004 	lsl.w	r0, r0, r4
   8b5cc:	fa1f fc8c 	uxth.w	ip, ip
   8b5d0:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
   8b5d4:	4298      	cmp	r0, r3
   8b5d6:	d2b3      	bcs.n	8b540 <__udivdi3+0x1c4>
   8b5d8:	1e70      	subs	r0, r6, #1
   8b5da:	2100      	movs	r1, #0
   8b5dc:	e710      	b.n	8b400 <__udivdi3+0x84>
   8b5de:	4621      	mov	r1, r4
   8b5e0:	4620      	mov	r0, r4
   8b5e2:	e70d      	b.n	8b400 <__udivdi3+0x84>
   8b5e4:	45a9      	cmp	r9, r5
   8b5e6:	f67f af7c 	bls.w	8b4e2 <__udivdi3+0x166>
   8b5ea:	3f02      	subs	r7, #2
   8b5ec:	18ed      	adds	r5, r5, r3
   8b5ee:	e779      	b.n	8b4e4 <__udivdi3+0x168>
   8b5f0:	4588      	cmp	r8, r1
   8b5f2:	d988      	bls.n	8b506 <__udivdi3+0x18a>
   8b5f4:	3e02      	subs	r6, #2
   8b5f6:	18c9      	adds	r1, r1, r3
   8b5f8:	e786      	b.n	8b508 <__udivdi3+0x18c>
   8b5fa:	4630      	mov	r0, r6
   8b5fc:	e7d9      	b.n	8b5b2 <__udivdi3+0x236>
   8b5fe:	4684      	mov	ip, r0
   8b600:	e7c3      	b.n	8b58a <__udivdi3+0x20e>
   8b602:	3e02      	subs	r6, #2
   8b604:	1912      	adds	r2, r2, r4
   8b606:	e72d      	b.n	8b464 <__udivdi3+0xe8>

0008b608 <sd_trans_multipliers>:
   8b608:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   8b618:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   8b628:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   8b638:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0008b648 <sd_mmc_trans_units>:
   8b648:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0008b664 <mmc_trans_multipliers>:
   8b664:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   8b674:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   8b684:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   8b694:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   8b6a4:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   8b6b4:	0010 0000 0020 0000 0040 0000 0080 0000     .... ...@.......
   8b6c4:	0100 0000 0200 0000 0400 0000 432a 534c     ............*CLS
   8b6d4:	0000 0000 452a 4553 0000 0000 452a 4553     ....*ESE....*ESE
   8b6e4:	003f 0000 452a 5253 003f 0000 492a 4e44     ?...*ESR?...*IDN
   8b6f4:	003f 0000 4f2a 4350 0000 0000 4f2a 4350     ?...*OPC....*OPC
   8b704:	003f 0000 522a 5453 0000 0000 532a 4552     ?...*RST....*SRE
   8b714:	0000 0000 532a 4552 003f 0000 532a 4254     ....*SRE?...*STB
   8b724:	003f 0000 542a 5453 003f 0000 572a 4941     ?...*TST?...*WAI
   8b734:	0000 0000 5953 5453 6d65 453a 5252 726f     ....SYSTem:ERRor
   8b744:	003f 0000 5953 5453 6d65 453a 5252 726f     ?...SYSTem:ERRor
   8b754:	4e3a 5845 3f54 0000 5953 5453 6d65 453a     :NEXT?..SYSTem:E
   8b764:	5252 726f 433a 554f 744e 003f 5953 5453     RRor:COUNt?.SYST
   8b774:	6d65 563a 5245 6953 6e6f 003f 5953 5453     em:VERSion?.SYST
   8b784:	6d65 543a 5059 3f45 0000 0000 5953 5453     em:TYPE?....SYST
   8b794:	6d65 4e3a 4d41 3f45 0000 0000 5953 5453     em:NAME?....SYST
   8b7a4:	6d65 443a 5345 3f43 0000 0000 5953 5453     em:DESC?....SYST
   8b7b4:	6d65 533a 3f4e 0000 5953 5453 6d65 443a     em:SN?..SYSTem:D
   8b7c4:	4f50 6557 3f72 0000 5953 5453 6d65 4d3a     POWer?..SYSTem:M
   8b7d4:	5841 7543 7272 6e65 3f74 0000 5953 5453     AXCurrent?..SYST
   8b7e4:	6d65 4e3a 4d4f 7543 7272 6e65 3f74 0000     em:NOMCurrent?..
   8b7f4:	5453 5441 7375 533a 4344 7261 7364 6174     STATus:SDCardsta
   8b804:	7574 3f73 0000 0000 5453 5441 7375 4c3a     tus?....STATus:L
   8b814:	4445 7453 7461 7375 003f 0000 5453 5441     EDStatus?...STAT
   8b824:	7375 423a 5455 6f74 736e 6174 7574 3f73     us:BUTtonstatus?
   8b834:	0000 0000 4f43 464e 6769 7275 3a65 454c     ....CONFigure:LE
   8b844:	0044 0000 4f43 464e 6769 7275 3a65 494c     D...CONFigure:LI
   8b854:	6847 7374 0000 0000 4f43 464e 6769 7275     Ghts....CONFigur
   8b864:	3a65 4f50 6557 0072 4f43 464e 6769 7275     e:POWer.CONFigur
   8b874:	3a65 4545 5250 4d4f 0000 0000 454d 5341     e:EEPROM....MEAS
   8b884:	7275 3a65 4545 5250 4d4f 003f 5453 5441     ure:EEPROM?.STAT
   8b894:	7375 513a 4555 7453 6f69 616e 6c62 3f65     us:QUEStionable?
   8b8a4:	0000 0000 5453 5441 7375 513a 4555 7453     ....STATus:QUESt
   8b8b4:	6f69 616e 6c62 3a65 5645 4e45 3f74 0000     ionable:EVENt?..
   8b8c4:	5453 5441 7375 513a 4555 7453 6f69 616e     STATus:QUEStiona
   8b8d4:	6c62 3a65 4e45 4241 656c 0000 5453 5441     ble:ENABle..STAT
   8b8e4:	7375 513a 4555 7453 6f69 616e 6c62 3a65     us:QUEStionable:
   8b8f4:	4e45 4241 656c 003f 5453 5441 7375 503a     ENABle?.STATus:P
   8b904:	4552 6553 0074 0000 454d 5341 7275 3a65     RESet...MEASure:
   8b914:	4f56 544c 6761 3a65 4344 003f 4f43 464e     VOLTage:DC?.CONF
   8b924:	6769 7275 3a65 4f56 544c 6761 3a65 4344     igure:VOLTage:DC
   8b934:	0000 0000 454d 5341 7275 3a65 4f56 544c     ....MEASure:VOLT
   8b944:	6761 3a65 4344 523a 5441 6f69 003f 0000     age:DC:RATio?...
   8b954:	454d 5341 7275 3a65 4f56 544c 6761 3a65     MEASure:VOLTage:
   8b964:	4341 003f 454d 5341 7275 3a65 5543 5252     AC?.MEASure:CURR
   8b974:	6e65 3a74 4344 003f 454d 5341 7275 3a65     ent:DC?.MEASure:
   8b984:	5543 5252 6e65 3a74 4341 003f 454d 5341     CURRent:AC?.MEAS
   8b994:	7275 3a65 4552 6953 7473 6e61 6563 003f     ure:RESistance?.
   8b9a4:	454d 5341 7275 3a65 5246 5345 7369 6174     MEASure:FRESista
   8b9b4:	636e 3f65 0000 0000 454d 5341 7275 3a65     nce?....MEASure:
   8b9c4:	5246 5145 6575 636e 3f79 0000 454d 5341     FREQuency?..MEAS
   8b9d4:	7275 3a65 4550 6952 646f 003f               ure:PERiod?.

0008b9e0 <scpi_commands>:
   8b9e0:	b6d0 0008 20d5 0008 b6d8 0008 2115 0008     ..... .......!..
   8b9f0:	b6e0 0008 2149 0008 b6e8 0008 2171 0008     ....I!......q!..
   8ba00:	b6f0 0008 21ad 0008 b6f8 0008 21e1 0008     .....!.......!..
   8ba10:	b700 0008 21fd 0008 b708 0008 2215 0008     .....!......."..
   8ba20:	b710 0008 2239 0008 b718 0008 226d 0008     ....9"......m"..
   8ba30:	b720 0008 2295 0008 b728 0008 22bd 0008      ...."..(...."..
   8ba40:	b730 0008 22f5 0008 b738 0008 2335 0008     0...."..8...5#..
   8ba50:	b748 0008 2335 0008 b75c 0008 2375 0008     H...5#..\...u#..
   8ba60:	b770 0008 2319 0008 b780 0008 2f01 0008     p....#......./..
   8ba70:	b790 0008 2f39 0008 b7a0 0008 2f71 0008     ....9/......q/..
   8ba80:	b7b0 0008 2fa9 0008 b7bc 0008 2fd5 0008     ...../......./..
   8ba90:	b7cc 0008 3005 0008 b7e0 0008 3031 0008     .....0......10..
   8baa0:	b7f4 0008 305d 0008 b80c 0008 3085 0008     ....]0.......0..
   8bab0:	b820 0008 30ad 0008 b838 0008 31c9 0008      ....0..8....1..
   8bac0:	b848 0008 328d 0008 b85c 0008 311d 0008     H....2..\....1..
   8bad0:	b86c 0008 3115 0008 b880 0008 310d 0008     l....1.......1..
   8bae0:	b890 0008 2399 0008 b8a8 0008 2399 0008     .....#.......#..
   8baf0:	b8c4 0008 23fd 0008 b8e0 0008 23d5 0008     .....#.......#..
   8bb00:	b8fc 0008 2431 0008 b90c 0008 22fd 0008     ....1$......."..
   8bb10:	b920 0008 22fd 0008 b938 0008 22fd 0008      ...."..8...."..
   8bb20:	b954 0008 22fd 0008 b968 0008 22fd 0008     T...."..h...."..
   8bb30:	b97c 0008 22fd 0008 b990 0008 22fd 0008     |...."......."..
   8bb40:	b9a4 0008 22fd 0008 b9bc 0008 22fd 0008     ....."......."..
   8bb50:	b9d0 0008 22fd 0008 0000 0000 0000 0000     ....."..........
   8bb60:	6f4e 6520 7272 726f 0000 0000 7953 746e     No error....Synt
   8bb70:	7861 6520 7272 726f 0000 0000 6e49 6176     ax error....Inva
   8bb80:	696c 2064 6573 6170 6172 6f74 0072 0000     lid separator...
   8bb90:	6e55 6564 6966 656e 2064 6568 6461 7265     Undefined header
   8bba0:	0000 0000 6150 6172 656d 6574 2072 6f6e     ....Parameter no
   8bbb0:	2074 6c61 6f6c 6577 0064 0000 694d 7373     t allowed...Miss
   8bbc0:	6e69 2067 6170 6172 656d 6574 0072 0000     ing parameter...
   8bbd0:	6e49 6176 696c 2064 7573 6666 7869 0000     Invalid suffix..
   8bbe0:	7553 6666 7869 6e20 746f 6120 6c6c 776f     Suffix not allow
   8bbf0:	6465 0000 6e55 6e6b 776f 206e 7265 6f72     ed..Unknown erro
   8bc00:	0072 0000 5443 2055 4546 0045 4554 5453     r...CTU FEE.TEST
   8bc10:	5320 5043 2049 4e49 5453 5552 454d 544e      SCPI INSTRUMENT
   8bc20:	5420 4953 3233 3532 0000 0000 3176 302e      TSI3225....v1.0
   8bc30:	0000 0000 202c 0000 0d3b 000a 203b 0a0d     ...., ..;...; ..
   8bc40:	0009 0000 0020 0000 494d 694e 756d 006d     .... ...MINimum.
   8bc50:	414d 6958 756d 006d 4544 6146 6c75 0074     MAXimum.DEFault.
   8bc60:	5055 0000 4f44 4e57 0000 0000 414e 004e     UP..DOWN....NAN.
   8bc70:	4e49 0046 494e 464e 0000 0000 5655 0000     INF.NINF....UV..
   8bc80:	564d 0000 0056 0000 564b 0000 4155 0000     MV..V...KV..UA..
   8bc90:	414d 0000 0041 0000 414b 0000 484f 004d     MA..A...KA..OHM.
   8bca0:	4f4b 4d48 0000 0000 4f4d 4d48 0000 0000     KOHM....MOHM....
   8bcb0:	5a48 0000 484b 005a 484d 005a 4847 005a     HZ..KHZ.MHZ.GHZ.
   8bcc0:	4543 004c 5350 0000 534e 0000 5355 0000     CEL.PS..NS..US..
   8bcd0:	534d 0000 0053 0000 494d 004e 5248 0000     MS..S...MIN.HR..

0008bce0 <scpi_units_def>:
   8bce0:	bc7c 0008 0001 0000 ed8d a0b5 c6f7 3eb0     |..............>
   8bcf0:	bc80 0008 0001 0000 a9fc d2f1 624d 3f50     ............MbP?
   8bd00:	bc84 0008 0001 0000 0000 0000 0000 3ff0     ...............?
   8bd10:	bc88 0008 0001 0000 0000 0000 4000 408f     .............@.@
   8bd20:	bc8c 0008 0002 0000 ed8d a0b5 c6f7 3eb0     ...............>
   8bd30:	bc90 0008 0002 0000 a9fc d2f1 624d 3f50     ............MbP?
   8bd40:	bc94 0008 0002 0000 0000 0000 0000 3ff0     ...............?
   8bd50:	bc98 0008 0002 0000 0000 0000 4000 408f     .............@.@
   8bd60:	bc9c 0008 0003 0000 0000 0000 0000 3ff0     ...............?
   8bd70:	bca0 0008 0003 0000 0000 0000 4000 408f     .............@.@
   8bd80:	bca8 0008 0003 0000 0000 0000 8480 412e     ...............A
   8bd90:	bcb0 0008 0004 0000 0000 0000 0000 3ff0     ...............?
   8bda0:	bcb4 0008 0004 0000 0000 0000 4000 408f     .............@.@
   8bdb0:	bcb8 0008 0004 0000 0000 0000 8480 412e     ...............A
   8bdc0:	bcbc 0008 0004 0000 0000 0000 cd65 41cd     ............e..A
   8bdd0:	bcc0 0008 0005 0000 0000 0000 0000 3ff0     ...............?
   8bde0:	bcc4 0008 0006 0000 ea11 812d 9799 3d71     ..........-...q=
   8bdf0:	bcc8 0008 0006 0000 d695 e826 2e0b 3e11     ..........&....>
   8be00:	bccc 0008 0006 0000 ed8d a0b5 c6f7 3eb0     ...............>
   8be10:	bcd0 0008 0006 0000 a9fc d2f1 624d 3f50     ............MbP?
   8be20:	bcd4 0008 0006 0000 0000 0000 0000 3ff0     ...............?
   8be30:	bcd8 0008 0006 0000 0000 0000 0000 404e     ..............N@
   8be40:	bcdc 0008 0006 0000 0000 0000 2000 40ac     ............. .@
	...

0008be60 <scpi_special_numbers_def>:
   8be60:	bc48 0008 0001 0000 bc50 0008 0002 0000     H.......P.......
   8be70:	bc58 0008 0003 0000 bc60 0008 0004 0000     X.......`.......
   8be80:	bc64 0008 0005 0000 bc6c 0008 0006 0000     d.......l.......
   8be90:	bc70 0008 0007 0000 bc74 0008 0008 0000     p.......t.......
	...
   8bea8:	6c25 0067 3a3f 5d5b 0000 0000 3f3a 0000     %lg.?:[]....:?..
   8beb8:	6145 7973 702d 6968 7420 6d65 6c70 7461     Easy-phi templat
   8bec8:	2065 6f6d 7564 656c 000d 0000 7830 3030     e module....0x00
   8bed8:	3030 000d 3438 6d30 0d57 0000 6d30 0d41     00..840mW...0mA.
   8bee8:	0000 0000 4b4f 000d 7570 6873 6465 000d     ....OK..pushed..
   8bef8:	6572 656c 7361 6465 000d 0000 4e4f 0000     released....ON..
   8bf08:	464f 0046 2e25 732a 0000 0000 2a2a 5245     OFF.%.*s....**ER
   8bf18:	4f52 3a52 2520 2c64 2220 7325 0d22 000a     ROR: %d, "%s"...
   8bf28:	2a2a 5253 3a51 3020 2578 2058 2528 2964     **SRQ: 0x%X (%d)
   8bf38:	0a0d 0000 2a2a 5443 4c52 2520 3230 3a78     ....**CTRL %02x:
   8bf48:	3020 2578 2058 2528 2964 0a0d 0000 0000      0x%X (%d)......
   8bf58:	2a2a 6554 7473 0a0d 0000 0000 2a2a 6552     **Test......**Re
   8bf68:	6573 0d74 000a 0000 5322 2f44 4d4d 2043     set....."SD/MMC 
   8bf78:	6143 6472 6f20 6576 2072 434d 2049 6c53     Card over MCI Sl
   8bf88:	746f 3020 0022 0000 3231 3133 3332 3231     ot 0"...12312312
   8bf98:	3133 3332 0000 0000 0000 0000 0000 0000     3123............
   8bfa8:	aa00 aaaa aaaa aaaa eeaa eeee eeee eeee     ................
   8bfb8:	feee ffff ffff ffff ffff ffff 7fff dfbf     ................
   8bfc8:	f7ef fdfb 7efc dfbf f7ef fdfb 007e 0000     .....~......~...

0008bfd8 <_ctype_>:
   8bfd8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   8bfe8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   8bff8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   8c008:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   8c018:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   8c028:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   8c038:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   8c048:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   8c058:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0008c0dc <_global_impure_ptr>:
   8c0dc:	02a8 2007 0043                              ... C.

0008c0e2 <blanks.6650>:
   8c0e2:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008c0f2 <zeroes.6651>:
   8c0f2:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   8c102:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   8c112:	3000 3231 3433 3635 3837 6139 6362 6564     .0123456789abcde
   8c122:	0066                                        f.

0008c124 <blanks.6664>:
   8c124:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008c134 <zeroes.6665>:
   8c134:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0008c144 <_init>:
   8c144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c146:	bf00      	nop
   8c148:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8c14a:	bc08      	pop	{r3}
   8c14c:	469e      	mov	lr, r3
   8c14e:	4770      	bx	lr

0008c150 <__init_array_start>:
   8c150:	00089df5 	.word	0x00089df5

0008c154 <__frame_dummy_init_array_entry>:
   8c154:	0008016d                                m...

0008c158 <_fini>:
   8c158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c15a:	bf00      	nop
   8c15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8c15e:	bc08      	pop	{r3}
   8c160:	469e      	mov	lr, r3
   8c162:	4770      	bx	lr

0008c164 <__fini_array_start>:
   8c164:	00080145 	.word	0x00080145

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <sd_mmc_cards>:
	...
20070014:	0067 0000 0000 0000 0000 0000 0000 0000     g...............
	...

20070030 <scpi_context>:
20070030:	b9e0 0008 0100 0000 0000 0000 0b1c 2007     ............... 
	...
2007004c:	0070 2007 0000 0000 0000 0000 0000 0000     p.. ............
2007005c:	0000 0000 0b0c 2007 bce0 0008 be60 0008     ....... ....`...
2007006c:	0000 0000                                   ....

20070070 <scpi_interface>:
20070070:	3d0d 0008 3cc9 0008 3d8d 0008 3d05 0008     .=...<...=...=..
20070080:	3e35 0008 3e05 0008                         5>...>..

20070088 <extra_strings_desc.9282>:
20070088:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

200700a4 <udi_msc_name.9278>:
200700a4:	534d 2043 6e69 6574 6672 6361 0065 0000     MSC interface...

200700b4 <udi_cdc_name.9277>:
200700b4:	4443 2043 6e69 6574 6672 6361 0065 0000     CDC interface...

200700c4 <udi_api_cdc_data>:
200700c4:	4845 0008 45a5 0008 4275 0008 427d 0008     EH...E..uB..}B..
200700d4:	4461 0008                                   aD..

200700d8 <udi_api_cdc_comm>:
200700d8:	45d5 0008 4261 0008 44b9 0008 427d 0008     .E..aB...D..}B..
200700e8:	0000 0000                                   ....

200700ec <udc_config_hs>:
200700ec:	00fc 2007 0180 2007                         ... ... 

200700f4 <udc_config_lsfs>:
200700f4:	01a0 2007 0180 2007                         ... ... 

200700fc <udc_desc_hs>:
200700fc:	0209 0062 0103 c000 0832 000b 0202 0102     ..b.....2.......
2007010c:	0900 0004 0100 0202 0001 2405 1000 0401     ...........$....
2007011c:	0224 0502 0624 0100 2405 0301 0701 8305     $...$....$......
2007012c:	4003 1000 0409 0001 0a02 0000 0700 8405     .@..............
2007013c:	0002 0002 0507 0205 0200 0900 0204 0200     ................
2007014c:	0608 0550 0507 0281 0200 0700 0205 0002     ..P.............
2007015c:	0002 0000                                   ....

20070160 <udc_config>:
20070160:	018c 2007 00f4 2007 018c 2007 0174 2007     ... ... ... t.. 
20070170:	00ec 2007                                   ... 

20070174 <udc_device_qual>:
20070174:	060a 0200 0000 4000 0001 0000               .......@....

20070180 <udi_apis>:
20070180:	00d8 2007 00c4 2007 0208 2007               ... ... ... 

2007018c <udc_device_desc>:
2007018c:	0112 0200 0000 4000 03eb 2424 0100 0201     .......@..$$....
2007019c:	0103 0000                                   ....

200701a0 <udc_desc_fs>:
200701a0:	0209 0062 0103 c000 0832 000b 0202 0102     ..b.....2.......
200701b0:	0900 0004 0100 0202 0001 2405 1000 0401     ...........$....
200701c0:	0224 0502 0624 0100 2405 0301 0701 8305     $...$....$......
200701d0:	4003 1000 0409 0001 0a02 0000 0700 8405     .@..............
200701e0:	4002 0000 0507 0205 0040 0900 0204 0200     .@......@.......
200701f0:	0608 0550 0507 0281 0040 0700 0205 4002     ..P.....@......@
20070200:	0000 0000                                   ....

20070204 <udi_msc_b_ack_trans>:
20070204:	0001 0000                                   ....

20070208 <udi_api_msc>:
20070208:	56e1 0008 56c5 0008 55cd 0008 4b59 0008     .V...V...U..YK..
20070218:	0000 0000                                   ....

2007021c <udi_msc_inquiry_data.9757>:
2007021c:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
2007023c:	2e31 3030                                   1.00

20070240 <udi_msc_csw>:
20070240:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

20070250 <udc_string_product_name>:
20070250:	6554 706d 616c 6574 4220 616f 6472 0000     Template Board..

20070260 <udc_string_manufacturer_name>:
20070260:	6145 7973 702d 6968 0000 0000               Easy-phi....

2007026c <udc_string_desc>:
2007026c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

2007028c <udc_string_desc_languageid>:
2007028c:	0304 0409                                   ....

20070290 <g_interrupt_enabled>:
20070290:	0001 0000                                   ....

20070294 <SystemCoreClock>:
20070294:	0900 003d                                   ..=.

20070298 <__ctype_ptr__>:
20070298:	bfd8 0008 0000 0000                         ........

200702a0 <_impure_ptr>:
200702a0:	02a8 2007 0000 0000                         ... ....

200702a8 <impure_data>:
200702a8:	0000 0000 0594 2007 05fc 2007 0664 2007     ....... ... d.. 
	...
200702dc:	c0e0 0008 0000 0000 0000 0000 0000 0000     ................
	...
20070350:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20070360:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200706d0 <__malloc_av_>:
	...
200706d8:	06d0 2007 06d0 2007 06d8 2007 06d8 2007     ... ... ... ... 
200706e8:	06e0 2007 06e0 2007 06e8 2007 06e8 2007     ... ... ... ... 
200706f8:	06f0 2007 06f0 2007 06f8 2007 06f8 2007     ... ... ... ... 
20070708:	0700 2007 0700 2007 0708 2007 0708 2007     ... ... ... ... 
20070718:	0710 2007 0710 2007 0718 2007 0718 2007     ... ... ... ... 
20070728:	0720 2007 0720 2007 0728 2007 0728 2007      ..  .. (.. (.. 
20070738:	0730 2007 0730 2007 0738 2007 0738 2007     0.. 0.. 8.. 8.. 
20070748:	0740 2007 0740 2007 0748 2007 0748 2007     @.. @.. H.. H.. 
20070758:	0750 2007 0750 2007 0758 2007 0758 2007     P.. P.. X.. X.. 
20070768:	0760 2007 0760 2007 0768 2007 0768 2007     `.. `.. h.. h.. 
20070778:	0770 2007 0770 2007 0778 2007 0778 2007     p.. p.. x.. x.. 
20070788:	0780 2007 0780 2007 0788 2007 0788 2007     ... ... ... ... 
20070798:	0790 2007 0790 2007 0798 2007 0798 2007     ... ... ... ... 
200707a8:	07a0 2007 07a0 2007 07a8 2007 07a8 2007     ... ... ... ... 
200707b8:	07b0 2007 07b0 2007 07b8 2007 07b8 2007     ... ... ... ... 
200707c8:	07c0 2007 07c0 2007 07c8 2007 07c8 2007     ... ... ... ... 
200707d8:	07d0 2007 07d0 2007 07d8 2007 07d8 2007     ... ... ... ... 
200707e8:	07e0 2007 07e0 2007 07e8 2007 07e8 2007     ... ... ... ... 
200707f8:	07f0 2007 07f0 2007 07f8 2007 07f8 2007     ... ... ... ... 
20070808:	0800 2007 0800 2007 0808 2007 0808 2007     ... ... ... ... 
20070818:	0810 2007 0810 2007 0818 2007 0818 2007     ... ... ... ... 
20070828:	0820 2007 0820 2007 0828 2007 0828 2007      ..  .. (.. (.. 
20070838:	0830 2007 0830 2007 0838 2007 0838 2007     0.. 0.. 8.. 8.. 
20070848:	0840 2007 0840 2007 0848 2007 0848 2007     @.. @.. H.. H.. 
20070858:	0850 2007 0850 2007 0858 2007 0858 2007     P.. P.. X.. X.. 
20070868:	0860 2007 0860 2007 0868 2007 0868 2007     `.. `.. h.. h.. 
20070878:	0870 2007 0870 2007 0878 2007 0878 2007     p.. p.. x.. x.. 
20070888:	0880 2007 0880 2007 0888 2007 0888 2007     ... ... ... ... 
20070898:	0890 2007 0890 2007 0898 2007 0898 2007     ... ... ... ... 
200708a8:	08a0 2007 08a0 2007 08a8 2007 08a8 2007     ... ... ... ... 
200708b8:	08b0 2007 08b0 2007 08b8 2007 08b8 2007     ... ... ... ... 
200708c8:	08c0 2007 08c0 2007 08c8 2007 08c8 2007     ... ... ... ... 
200708d8:	08d0 2007 08d0 2007 08d8 2007 08d8 2007     ... ... ... ... 
200708e8:	08e0 2007 08e0 2007 08e8 2007 08e8 2007     ... ... ... ... 
200708f8:	08f0 2007 08f0 2007 08f8 2007 08f8 2007     ... ... ... ... 
20070908:	0900 2007 0900 2007 0908 2007 0908 2007     ... ... ... ... 
20070918:	0910 2007 0910 2007 0918 2007 0918 2007     ... ... ... ... 
20070928:	0920 2007 0920 2007 0928 2007 0928 2007      ..  .. (.. (.. 
20070938:	0930 2007 0930 2007 0938 2007 0938 2007     0.. 0.. 8.. 8.. 
20070948:	0940 2007 0940 2007 0948 2007 0948 2007     @.. @.. H.. H.. 
20070958:	0950 2007 0950 2007 0958 2007 0958 2007     P.. P.. X.. X.. 
20070968:	0960 2007 0960 2007 0968 2007 0968 2007     `.. `.. h.. h.. 
20070978:	0970 2007 0970 2007 0978 2007 0978 2007     p.. p.. x.. x.. 
20070988:	0980 2007 0980 2007 0988 2007 0988 2007     ... ... ... ... 
20070998:	0990 2007 0990 2007 0998 2007 0998 2007     ... ... ... ... 
200709a8:	09a0 2007 09a0 2007 09a8 2007 09a8 2007     ... ... ... ... 
200709b8:	09b0 2007 09b0 2007 09b8 2007 09b8 2007     ... ... ... ... 
200709c8:	09c0 2007 09c0 2007 09c8 2007 09c8 2007     ... ... ... ... 
200709d8:	09d0 2007 09d0 2007 09d8 2007 09d8 2007     ... ... ... ... 
200709e8:	09e0 2007 09e0 2007 09e8 2007 09e8 2007     ... ... ... ... 
200709f8:	09f0 2007 09f0 2007 09f8 2007 09f8 2007     ... ... ... ... 
20070a08:	0a00 2007 0a00 2007 0a08 2007 0a08 2007     ... ... ... ... 
20070a18:	0a10 2007 0a10 2007 0a18 2007 0a18 2007     ... ... ... ... 
20070a28:	0a20 2007 0a20 2007 0a28 2007 0a28 2007      ..  .. (.. (.. 
20070a38:	0a30 2007 0a30 2007 0a38 2007 0a38 2007     0.. 0.. 8.. 8.. 
20070a48:	0a40 2007 0a40 2007 0a48 2007 0a48 2007     @.. @.. H.. H.. 
20070a58:	0a50 2007 0a50 2007 0a58 2007 0a58 2007     P.. P.. X.. X.. 
20070a68:	0a60 2007 0a60 2007 0a68 2007 0a68 2007     `.. `.. h.. h.. 
20070a78:	0a70 2007 0a70 2007 0a78 2007 0a78 2007     p.. p.. x.. x.. 
20070a88:	0a80 2007 0a80 2007 0a88 2007 0a88 2007     ... ... ... ... 
20070a98:	0a90 2007 0a90 2007 0a98 2007 0a98 2007     ... ... ... ... 
20070aa8:	0aa0 2007 0aa0 2007 0aa8 2007 0aa8 2007     ... ... ... ... 
20070ab8:	0ab0 2007 0ab0 2007 0ab8 2007 0ab8 2007     ... ... ... ... 
20070ac8:	0ac0 2007 0ac0 2007 0ac8 2007 0ac8 2007     ... ... ... ... 

20070ad8 <__malloc_sbrk_base>:
20070ad8:	ffff ffff                                   ....

20070adc <__malloc_trim_threshold>:
20070adc:	0000 0002                                   ....
