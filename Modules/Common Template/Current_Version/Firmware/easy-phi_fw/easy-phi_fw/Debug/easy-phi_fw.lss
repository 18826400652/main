
easy-phi_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000bc44  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008bc44  0008bc44  00013c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a80  20070000  0008bc4c  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000192c  20070a80  0008c6cc  00018a80  2**2
                  ALLOC
  4 .stack        00002004  200723ac  0008dff8  00018a80  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00018a80  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00018aa9  2**0
                  CONTENTS, READONLY
  7 .debug_info   00022677  00000000  00000000  00018b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006681  00000000  00000000  0003b191  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00016be4  00000000  00000000  00041812  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000014e0  00000000  00000000  000583f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001a30  00000000  00000000  000598d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00021030  00000000  00000000  0005b308  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00024ecd  00000000  00000000  0007c338  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00076b60  00000000  00000000  000a1205  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002f6c  00000000  00000000  00117d68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200743b0 	.word	0x200743b0
   80004:	00088df9 	.word	0x00088df9
   80008:	00088df5 	.word	0x00088df5
   8000c:	0008258d 	.word	0x0008258d
   80010:	00088df5 	.word	0x00088df5
   80014:	00088df5 	.word	0x00088df5
   80018:	00088df5 	.word	0x00088df5
	...
   8002c:	00088df5 	.word	0x00088df5
   80030:	00088df5 	.word	0x00088df5
   80034:	00000000 	.word	0x00000000
   80038:	00088df5 	.word	0x00088df5
   8003c:	00088df5 	.word	0x00088df5
   80040:	00088df5 	.word	0x00088df5
   80044:	00088df5 	.word	0x00088df5
   80048:	00088df5 	.word	0x00088df5
   8004c:	00088df5 	.word	0x00088df5
   80050:	00088df5 	.word	0x00088df5
   80054:	00088df5 	.word	0x00088df5
   80058:	00088df5 	.word	0x00088df5
   8005c:	00088df5 	.word	0x00088df5
   80060:	00088df5 	.word	0x00088df5
   80064:	00088df5 	.word	0x00088df5
   80068:	00000000 	.word	0x00000000
   8006c:	00086ba5 	.word	0x00086ba5
   80070:	00086bc1 	.word	0x00086bc1
   80074:	00086bdd 	.word	0x00086bdd
   80078:	00086bf9 	.word	0x00086bf9
	...
   80084:	00088df5 	.word	0x00088df5
   80088:	00088df5 	.word	0x00088df5
   8008c:	00088df5 	.word	0x00088df5
   80090:	00088df5 	.word	0x00088df5
   80094:	00088df5 	.word	0x00088df5
   80098:	00088df5 	.word	0x00088df5
   8009c:	00088df5 	.word	0x00088df5
   800a0:	00088df5 	.word	0x00088df5
   800a4:	00000000 	.word	0x00000000
   800a8:	00088df5 	.word	0x00088df5
   800ac:	00088df5 	.word	0x00088df5
   800b0:	00088df5 	.word	0x00088df5
   800b4:	00088df5 	.word	0x00088df5
   800b8:	00088df5 	.word	0x00088df5
   800bc:	00088df5 	.word	0x00088df5
   800c0:	00088df5 	.word	0x00088df5
   800c4:	00088df5 	.word	0x00088df5
   800c8:	00088df5 	.word	0x00088df5
   800cc:	00088df5 	.word	0x00088df5
   800d0:	00088df5 	.word	0x00088df5
   800d4:	00088df5 	.word	0x00088df5
   800d8:	00088df5 	.word	0x00088df5
   800dc:	00088df5 	.word	0x00088df5
   800e0:	00087721 	.word	0x00087721
   800e4:	00088df5 	.word	0x00088df5
   800e8:	00088df5 	.word	0x00088df5
   800ec:	00088df5 	.word	0x00088df5
   800f0:	00088df5 	.word	0x00088df5

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	0008bc4c 	.word	0x0008bc4c
   80110:	0008bc4f 	.word	0x0008bc4f
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	0008bc4c 	.word	0x0008bc4c
   8013c:	0008bc4c 	.word	0x0008bc4c
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070a80 	.word	0x20070a80
   80164:	00000000 	.word	0x00000000
   80168:	0008bc4c 	.word	0x0008bc4c

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	0008bc4c 	.word	0x0008bc4c
   80198:	20070a84 	.word	0x20070a84
   8019c:	0008bc4c 	.word	0x0008bc4c
   801a0:	00000000 	.word	0x00000000

000801a4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   801a4:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   801a6:	f640 23a0 	movw	r3, #2720	; 0xaa0
   801aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   801ae:	681a      	ldr	r2, [r3, #0]
   801b0:	f892 4022 	ldrb.w	r4, [r2, #34]	; 0x22
   801b4:	f640 21a6 	movw	r1, #2726	; 0xaa6
   801b8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   801bc:	7808      	ldrb	r0, [r1, #0]
   801be:	6811      	ldr	r1, [r2, #0]
   801c0:	7c52      	ldrb	r2, [r2, #17]
   801c2:	1c23      	adds	r3, r4, #0
   801c4:	bf18      	it	ne
   801c6:	2301      	movne	r3, #1
   801c8:	f641 04b9 	movw	r4, #6329	; 0x18b9
   801cc:	f2c0 0408 	movt	r4, #8
   801d0:	47a0      	blx	r4
   801d2:	bd10      	pop	{r4, pc}

000801d4 <sdio_cmd53>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd53(uint8_t rw_flag, uint8_t func_nb, uint32_t reg_addr,
		uint8_t inc_addr, uint32_t size, bool access_block)
{
   801d4:	b570      	push	{r4, r5, r6, lr}
   801d6:	b082      	sub	sp, #8
   801d8:	9c06      	ldr	r4, [sp, #24]
	Assert(size != 0);
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
   801da:	f249 3635 	movw	r6, #37685	; 0x9335
   801de:	f2c0 0601 	movt	r6, #1
   801e2:	f241 3535 	movw	r5, #4917	; 0x1335
   801e6:	f2c0 0501 	movt	r5, #1
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
   801ea:	ea4f 7101 	mov.w	r1, r1, lsl #28

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
			SDIO_CMD53_IO_R_BYTE_EXTENDED :
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
   801ee:	ea41 2242 	orr.w	r2, r1, r2, lsl #9
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
   801f2:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
			SDIO_CMD53_IO_R_BYTE_EXTENDED :
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
   801f6:	ea4f 51c4 	mov.w	r1, r4, lsl #23
   801fa:	ea4f 51d1 	mov.w	r1, r1, lsr #23
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
   801fe:	4311      	orrs	r1, r2
		uint8_t inc_addr, uint32_t size, bool access_block)
{
	Assert(size != 0);
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
   80200:	f89d 201c 	ldrb.w	r2, [sp, #28]
   80204:	9200      	str	r2, [sp, #0]
   80206:	2800      	cmp	r0, #0
   80208:	bf14      	ite	ne
   8020a:	4630      	movne	r0, r6
   8020c:	4628      	moveq	r0, r5
   8020e:	ea41 6183 	orr.w	r1, r1, r3, lsl #26
   80212:	b2a2      	uxth	r2, r4
   80214:	f04f 0301 	mov.w	r3, #1
   80218:	f641 14e5 	movw	r4, #6629	; 0x19e5
   8021c:	f2c0 0408 	movt	r4, #8
   80220:	47a0      	blx	r4
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
			| ((uint32_t)rw_flag << SDIO_CMD53_RW_FLAG),
			size, 1, access_block);
}
   80222:	b002      	add	sp, #8
   80224:	bd70      	pop	{r4, r5, r6, pc}
   80226:	bf00      	nop

00080228 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   80228:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   8022a:	f640 23a6 	movw	r3, #2726	; 0xaa6
   8022e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80232:	7818      	ldrb	r0, [r3, #0]
   80234:	b930      	cbnz	r0, 80244 <sd_mmc_deselect_slot+0x1c>
		driver_deselect_device(sd_mmc_slot_sel);
   80236:	f04f 0000 	mov.w	r0, #0
   8023a:	f641 112d 	movw	r1, #6445	; 0x192d
   8023e:	f2c0 0108 	movt	r1, #8
   80242:	4788      	blx	r1
   80244:	bd08      	pop	{r3, pc}
   80246:	bf00      	nop

00080248 <sdio_cmd52>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
   80248:	b510      	push	{r4, lr}
   8024a:	9c02      	ldr	r4, [sp, #8]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
   8024c:	ea4f 2242 	mov.w	r2, r2, lsl #9
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
   80250:	ea42 7101 	orr.w	r1, r2, r1, lsl #28
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
   80254:	ea41 70c0 	orr.w	r0, r1, r0, lsl #31
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
   80258:	ea40 63c3 	orr.w	r3, r0, r3, lsl #27
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
   8025c:	7822      	ldrb	r2, [r4, #0]
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
   8025e:	f241 3034 	movw	r0, #4916	; 0x1334
   80262:	ea43 0102 	orr.w	r1, r3, r2
   80266:	f641 1355 	movw	r3, #6485	; 0x1955
   8026a:	f2c0 0308 	movt	r3, #8
   8026e:	4798      	blx	r3
   80270:	b140      	cbz	r0, 80284 <sdio_cmd52+0x3c>
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
		return false;
	}
	*io_data = driver_get_response() & 0xFF;
   80272:	f641 117d 	movw	r1, #6525	; 0x197d
   80276:	f2c0 0108 	movt	r1, #8
   8027a:	4788      	blx	r1
   8027c:	7020      	strb	r0, [r4, #0]
	return true;
   8027e:	f04f 0001 	mov.w	r0, #1
   80282:	bd10      	pop	{r4, pc}
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
		return false;
   80284:	f04f 0000 	mov.w	r0, #0
	}
	*io_data = driver_get_response() & 0xFF;
	return true;
}
   80288:	bd10      	pop	{r4, pc}
   8028a:	bf00      	nop

0008028c <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
   8028c:	b508      	push	{r3, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
   8028e:	f640 23a0 	movw	r3, #2720	; 0xaa0
   80292:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80296:	6818      	ldr	r0, [r3, #0]
   80298:	8981      	ldrh	r1, [r0, #12]
   8029a:	f641 3009 	movw	r0, #6921	; 0x1b09
   8029e:	ea4f 4101 	mov.w	r1, r1, lsl #16
   802a2:	f641 1255 	movw	r2, #6485	; 0x1955
   802a6:	f2c0 0208 	movt	r2, #8
   802aa:	4790      	blx	r2
   802ac:	b170      	cbz	r0, 802cc <sd_mmc_cmd9_mci+0x40>
		return false;
	}
	driver_get_response_128(sd_mmc_card->csd);
   802ae:	f640 23a0 	movw	r3, #2720	; 0xaa0
   802b2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   802b6:	6818      	ldr	r0, [r3, #0]
   802b8:	f100 0012 	add.w	r0, r0, #18
   802bc:	f641 1185 	movw	r1, #6533	; 0x1985
   802c0:	f2c0 0108 	movt	r1, #8
   802c4:	4788      	blx	r1
	return true;
   802c6:	f04f 0001 	mov.w	r0, #1
   802ca:	bd08      	pop	{r3, pc}
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   802cc:	f04f 0000 	mov.w	r0, #0
	}
	driver_get_response_128(sd_mmc_card->csd);
	return true;
}
   802d0:	bd08      	pop	{r3, pc}
   802d2:	bf00      	nop

000802d4 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   802d4:	b510      	push	{r4, lr}
	if (slot >= SD_MMC_MEM_CNT) {
   802d6:	2800      	cmp	r0, #0
   802d8:	f040 80a8 	bne.w	8042c <sd_mmc_select_slot+0x158>
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
   802dc:	f240 030c 	movw	r3, #12
   802e0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   802e4:	6898      	ldr	r0, [r3, #8]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   802e6:	ea4f 1250 	mov.w	r2, r0, lsr #5
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   802ea:	f502 1100 	add.w	r1, r2, #2097152	; 0x200000
   802ee:	f201 7307 	addw	r3, r1, #1799	; 0x707
   802f2:	ea4f 2243 	mov.w	r2, r3, lsl #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   802f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   802f8:	f000 001f 	and.w	r0, r0, #31
   802fc:	f04f 0101 	mov.w	r1, #1
   80300:	fa01 f300 	lsl.w	r3, r1, r0
   80304:	4213      	tst	r3, r2
   80306:	d01d      	beq.n	80344 <sd_mmc_select_slot+0x70>
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
   80308:	f240 020c 	movw	r2, #12
   8030c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80310:	7b90      	ldrb	r0, [r2, #14]
   80312:	4288      	cmp	r0, r1
   80314:	d10c      	bne.n	80330 <sd_mmc_select_slot+0x5c>
	return false;
}

static inline void SD_MMC_STOP_TIMEOUT(void)
{
	if (sd_mmc_sam_systick_used) {
   80316:	f640 239e 	movw	r3, #2718	; 0xa9e
   8031a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8031e:	7819      	ldrb	r1, [r3, #0]
   80320:	b131      	cbz	r1, 80330 <sd_mmc_select_slot+0x5c>
		SysTick->CTRL = 0;
   80322:	f24e 0010 	movw	r0, #57360	; 0xe010
   80326:	f2ce 0000 	movt	r0, #57344	; 0xe000
   8032a:	f04f 0200 	mov.w	r2, #0
   8032e:	6002      	str	r2, [r0, #0]
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
			SD_MMC_STOP_TIMEOUT();
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   80330:	f240 030c 	movw	r3, #12
   80334:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80338:	f04f 0104 	mov.w	r1, #4
   8033c:	7399      	strb	r1, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
   8033e:	f04f 0002 	mov.w	r0, #2
   80342:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
   80344:	f240 020c 	movw	r2, #12
   80348:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8034c:	7b90      	ldrb	r0, [r2, #14]
   8034e:	2804      	cmp	r0, #4
   80350:	d131      	bne.n	803b6 <sd_mmc_select_slot+0xe2>
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
   80352:	f240 010c 	movw	r1, #12
   80356:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8035a:	f04f 0201 	mov.w	r2, #1
   8035e:	738a      	strb	r2, [r1, #14]
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
   80360:	f24e 0310 	movw	r3, #57360	; 0xe010
   80364:	f2ce 0300 	movt	r3, #57344	; 0xe000
   80368:	6818      	ldr	r0, [r3, #0]
   8036a:	b988      	cbnz	r0, 80390 <sd_mmc_select_slot+0xbc>
		sd_mmc_sam_systick_used = true;
   8036c:	f640 209e 	movw	r0, #2718	; 0xa9e
   80370:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80374:	7002      	strb	r2, [r0, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
   80376:	f24e 0310 	movw	r3, #57360	; 0xe010
   8037a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8037e:	f243 71a0 	movw	r1, #14240	; 0x37a0
   80382:	f2c0 01a0 	movt	r1, #160	; 0xa0
   80386:	6059      	str	r1, [r3, #4]
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
   80388:	601a      	str	r2, [r3, #0]
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
   8038a:	f04f 0002 	mov.w	r0, #2
   8038e:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = true;
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
	} else {
		sd_mmc_sam_systick_used = false;
   80390:	f640 219e 	movw	r1, #2718	; 0xa9e
   80394:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80398:	f04f 0200 	mov.w	r2, #0
   8039c:	700a      	strb	r2, [r1, #0]
#ifdef FREERTOS_USED
		// Note: the define INCLUDE_vTaskDelay must be set to one
		// in FreeRTOSConfig.h file.
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
   8039e:	f648 5080 	movw	r0, #36224	; 0x8d80
   803a2:	f2c0 005b 	movt	r0, #91	; 0x5b
   803a6:	f240 0301 	movw	r3, #1
   803aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   803ae:	4798      	blx	r3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
   803b0:	f04f 0002 	mov.w	r0, #2
   803b4:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
   803b6:	2801      	cmp	r0, #1
   803b8:	d116      	bne.n	803e8 <sd_mmc_select_slot+0x114>
	}
}

static inline bool SD_MMC_IS_TIMEOUT(void)
{
	if (!sd_mmc_sam_systick_used) {
   803ba:	f640 219e 	movw	r1, #2718	; 0xa9e
   803be:	f2c2 0107 	movt	r1, #8199	; 0x2007
   803c2:	780b      	ldrb	r3, [r1, #0]
   803c4:	2b00      	cmp	r3, #0
   803c6:	d03a      	beq.n	8043e <sd_mmc_select_slot+0x16a>
		return (xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE);
#else
		return true;
#endif
	}
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
   803c8:	f24e 0210 	movw	r2, #57360	; 0xe010
   803cc:	f2ce 0200 	movt	r2, #57344	; 0xe000
   803d0:	6810      	ldr	r0, [r2, #0]
   803d2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   803d6:	d02c      	beq.n	80432 <sd_mmc_select_slot+0x15e>
		SysTick->CTRL = 0;
   803d8:	f24e 0110 	movw	r1, #57360	; 0xe010
   803dc:	f2ce 0100 	movt	r1, #57344	; 0xe000
   803e0:	f04f 0300 	mov.w	r3, #0
   803e4:	600b      	str	r3, [r1, #0]
   803e6:	e02a      	b.n	8043e <sd_mmc_select_slot+0x16a>
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
   803e8:	f240 000c 	movw	r0, #12
   803ec:	f2c2 0007 	movt	r0, #8199	; 0x2007
   803f0:	7b81      	ldrb	r1, [r0, #14]
   803f2:	2903      	cmp	r1, #3
   803f4:	d020      	beq.n	80438 <sd_mmc_select_slot+0x164>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   803f6:	f640 24a6 	movw	r4, #2726	; 0xaa6
   803fa:	f2c2 0407 	movt	r4, #8199	; 0x2007
   803fe:	f04f 0300 	mov.w	r3, #0
   80402:	7023      	strb	r3, [r4, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   80404:	f240 040c 	movw	r4, #12
   80408:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8040c:	f640 22a0 	movw	r2, #2720	; 0xaa0
   80410:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80414:	6014      	str	r4, [r2, #0]
	sd_mmc_configure_slot();
   80416:	f240 10a5 	movw	r0, #421	; 0x1a5
   8041a:	f2c0 0008 	movt	r0, #8
   8041e:	4780      	blx	r0
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   80420:	7ba0      	ldrb	r0, [r4, #14]

	// Initialize interface
	sd_mmc_slot_sel = slot;
	sd_mmc_card = &sd_mmc_cards[slot];
	sd_mmc_configure_slot();
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   80422:	2802      	cmp	r0, #2
   80424:	bf14      	ite	ne
   80426:	2000      	movne	r0, #0
   80428:	2001      	moveq	r0, #1
   8042a:	bd10      	pop	{r4, pc}
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
		return SD_MMC_ERR_SLOT;
   8042c:	f04f 0004 	mov.w	r0, #4
   80430:	bd10      	pop	{r4, pc}
		return SD_MMC_ERR_NO_CARD;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
   80432:	f04f 0002 	mov.w	r0, #2
   80436:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
   80438:	f04f 0003 	mov.w	r0, #3
   8043c:	bd10      	pop	{r4, pc}
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   8043e:	f240 000c 	movw	r0, #12
   80442:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80446:	f04f 0202 	mov.w	r2, #2
   8044a:	7382      	strb	r2, [r0, #14]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   8044c:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   80450:	f2c0 0106 	movt	r1, #6
   80454:	6001      	str	r1, [r0, #0]
		sd_mmc_cards[slot].bus_width = 1;
   80456:	f04f 0301 	mov.w	r3, #1
   8045a:	7443      	strb	r3, [r0, #17]
		sd_mmc_cards[slot].high_speed = 0;
   8045c:	f04f 0200 	mov.w	r2, #0
   80460:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
   80464:	e7c0      	b.n	803e8 <sd_mmc_select_slot+0x114>
   80466:	bf00      	nop

00080468 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   80468:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   8046a:	f240 030c 	movw	r3, #12
   8046e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80472:	f04f 0204 	mov.w	r2, #4
   80476:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   80478:	f640 20a6 	movw	r0, #2726	; 0xaa6
   8047c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80480:	f04f 01ff 	mov.w	r1, #255	; 0xff
   80484:	7001      	strb	r1, [r0, #0]
	driver_init();
   80486:	f641 036d 	movw	r3, #6253	; 0x186d
   8048a:	f2c0 0308 	movt	r3, #8
   8048e:	4798      	blx	r3
   80490:	bd08      	pop	{r3, pc}
   80492:	bf00      	nop

00080494 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   80494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80498:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   8049a:	f240 23d5 	movw	r3, #725	; 0x2d5
   8049e:	f2c0 0308 	movt	r3, #8
   804a2:	4798      	blx	r3
   804a4:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   804a6:	2801      	cmp	r0, #1
   804a8:	d006      	beq.n	804b8 <sd_mmc_check+0x24>
		sd_mmc_deselect_slot();
   804aa:	f240 2129 	movw	r1, #553	; 0x229
   804ae:	f2c0 0108 	movt	r1, #8
   804b2:	4788      	blx	r1
		return sd_mmc_err;
   804b4:	f000 bd5d 	b.w	80f72 <sd_mmc_check+0xade>
static bool sd_mmc_mci_card_init(void)
{
	uint8_t v2 = 0;

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   804b8:	f640 20a0 	movw	r0, #2720	; 0xaa0
   804bc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   804c0:	6801      	ldr	r1, [r0, #0]
   804c2:	f04f 0201 	mov.w	r2, #1
   804c6:	73ca      	strb	r2, [r1, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   804c8:	f04f 0500 	mov.w	r5, #0
   804cc:	740d      	strb	r5, [r1, #16]
	sd_mmc_card->rca = 0;
   804ce:	818d      	strh	r5, [r1, #12]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   804d0:	f641 1331 	movw	r3, #6449	; 0x1931
   804d4:	f2c0 0308 	movt	r3, #8
   804d8:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
   804da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   804de:	4629      	mov	r1, r5
   804e0:	f641 1255 	movw	r2, #6485	; 0x1955
   804e4:	f2c0 0208 	movt	r2, #8
   804e8:	4790      	blx	r2
   804ea:	2800      	cmp	r0, #0
   804ec:	f000 84c1 	beq.w	80e72 <sd_mmc_check+0x9de>
{
	uint32_t resp;

	*v2 = 0;
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   804f0:	f245 5008 	movw	r0, #21768	; 0x5508
   804f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   804f8:	f641 1355 	movw	r3, #6485	; 0x1955
   804fc:	f2c0 0308 	movt	r3, #8
   80500:	4798      	blx	r3
   80502:	2800      	cmp	r0, #0
   80504:	f000 84c3 	beq.w	80e8e <sd_mmc_check+0x9fa>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
	}
	// Check R7 response
	resp = driver_get_response();
   80508:	f641 107d 	movw	r0, #6525	; 0x197d
   8050c:	f2c0 0008 	movt	r0, #8
   80510:	4780      	blx	r0
	if (resp == 0xFFFFFFFF) {
   80512:	f1b0 3fff 	cmp.w	r0, #4294967295
   80516:	f000 84bd 	beq.w	80e94 <sd_mmc_check+0xa00>
		// No compliance R7 value
		return true; // It is not a V2
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   8051a:	ea4f 5100 	mov.w	r1, r0, lsl #20
   8051e:	ea4f 5211 	mov.w	r2, r1, lsr #20
   80522:	f5b2 7fd5 	cmp.w	r2, #426	; 0x1aa
   80526:	f040 84a4 	bne.w	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   8052a:	f04f 0601 	mov.w	r6, #1
   8052e:	f000 bcb3 	b.w	80e98 <sd_mmc_check+0xa04>
	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
		sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
		return true; // No error but card type not updated
	}
	resp = driver_get_response();
   80532:	f641 107d 	movw	r0, #6525	; 0x197d
   80536:	f2c0 0008 	movt	r0, #8
   8053a:	4780      	blx	r0
   8053c:	4601      	mov	r1, r0
	if ((resp & OCR_SDIO_NF) == 0) {
   8053e:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
   80542:	f000 84b5 	beq.w	80eb0 <sd_mmc_check+0xa1c>
   80546:	f241 3989 	movw	r9, #5001	; 0x1389
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   8054a:	f244 5705 	movw	r7, #17669	; 0x4505
   8054e:	f641 1555 	movw	r5, #6485	; 0x1955
   80552:	f2c0 0508 	movt	r5, #8
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80556:	f641 187d 	movw	r8, #6525	; 0x197d
   8055a:	f2c0 0808 	movt	r8, #8
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   8055e:	4638      	mov	r0, r7
   80560:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   80564:	47a8      	blx	r5
   80566:	2800      	cmp	r0, #0
   80568:	f000 8483 	beq.w	80e72 <sd_mmc_check+0x9de>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   8056c:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   8056e:	1e01      	subs	r1, r0, #0
   80570:	db0a      	blt.n	80588 <sd_mmc_check+0xf4>
   80572:	f109 39ff 	add.w	r9, r9, #4294967295
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   80576:	4638      	mov	r0, r7
   80578:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   8057c:	47a8      	blx	r5
   8057e:	2800      	cmp	r0, #0
   80580:	f040 8539 	bne.w	80ff6 <sd_mmc_check+0xb62>
   80584:	f000 bc75 	b.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD5 Timeout on busy\n\r", __func__);
			return false;
		}
	}
	// Update card type at the end of busy
	if ((resp & OCR_SDIO_MP) > 0) {
   80588:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
   8058c:	f640 23a0 	movw	r3, #2720	; 0xaa0
   80590:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80594:	6818      	ldr	r0, [r3, #0]
   80596:	bf14      	ite	ne
   80598:	2205      	movne	r2, #5
	} else {
		sd_mmc_card->type = CARD_TYPE_SDIO;
   8059a:	2204      	moveq	r2, #4
   8059c:	73c2      	strb	r2, [r0, #15]
   8059e:	f000 bc87 	b.w	80eb0 <sd_mmc_check+0xa1c>
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   805a2:	f241 1737 	movw	r7, #4407	; 0x1137
   805a6:	f04f 0800 	mov.w	r8, #0
   805aa:	f641 1555 	movw	r5, #6485	; 0x1955
   805ae:	f2c0 0508 	movt	r5, #8
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   805b2:	f44f 4900 	mov.w	r9, #32768	; 0x8000
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   805b6:	f641 1a7d 	movw	sl, #6525	; 0x197d
   805ba:	f2c0 0a08 	movt	sl, #8
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   805be:	4638      	mov	r0, r7
   805c0:	4641      	mov	r1, r8
   805c2:	47a8      	blx	r5
   805c4:	2800      	cmp	r0, #0
   805c6:	f040 84ea 	bne.w	80f9e <sd_mmc_check+0xb0a>
   805ca:	f000 bc7d 	b.w	80ec8 <sd_mmc_check+0xa34>
   805ce:	4638      	mov	r0, r7
   805d0:	4641      	mov	r1, r8
   805d2:	47a8      	blx	r5
   805d4:	2800      	cmp	r0, #0
   805d6:	f000 8477 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   805da:	4649      	mov	r1, r9
   805dc:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   805e0:	f244 5029 	movw	r0, #17705	; 0x4529
   805e4:	2e00      	cmp	r6, #0
   805e6:	bf08      	it	eq
   805e8:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   805ec:	47a8      	blx	r5
   805ee:	2800      	cmp	r0, #0
   805f0:	f000 846a 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   805f4:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   805f6:	2800      	cmp	r0, #0
   805f8:	da0e      	bge.n	80618 <sd_mmc_check+0x184>
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
   805fa:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   805fe:	f000 848f 	beq.w	80f20 <sd_mmc_check+0xa8c>
				sd_mmc_card->type |= CARD_TYPE_HC;
   80602:	f640 20a0 	movw	r0, #2720	; 0xaa0
   80606:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8060a:	6801      	ldr	r1, [r0, #0]
   8060c:	7bca      	ldrb	r2, [r1, #15]
   8060e:	f042 0308 	orr.w	r3, r2, #8
   80612:	73cb      	strb	r3, [r1, #15]
   80614:	f000 bc84 	b.w	80f20 <sd_mmc_check+0xa8c>
   80618:	f10b 3bff 	add.w	fp, fp, #4294967295
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   8061c:	4638      	mov	r0, r7
   8061e:	4641      	mov	r1, r8
   80620:	47a8      	blx	r5
   80622:	2800      	cmp	r0, #0
   80624:	f040 84d1 	bne.w	80fca <sd_mmc_check+0xb36>
   80628:	f000 bc4e 	b.w	80ec8 <sd_mmc_check+0xa34>
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   8062c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   80630:	f2c4 051f 	movt	r5, #16415	; 0x401f
   80634:	f244 5701 	movw	r7, #17665	; 0x4501
   80638:	f641 1855 	movw	r8, #6485	; 0x1955
   8063c:	f2c0 0808 	movt	r8, #8
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80640:	f641 197d 	movw	r9, #6525	; 0x197d
   80644:	f2c0 0908 	movt	r9, #8
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   80648:	4638      	mov	r0, r7
   8064a:	4629      	mov	r1, r5
   8064c:	47c0      	blx	r8
   8064e:	2800      	cmp	r0, #0
   80650:	f040 8493 	bne.w	80f7a <sd_mmc_check+0xae6>
   80654:	f000 bc79 	b.w	80f4a <sd_mmc_check+0xab6>
   80658:	4638      	mov	r0, r7
   8065a:	4629      	mov	r1, r5
   8065c:	47c0      	blx	r8
   8065e:	2800      	cmp	r0, #0
   80660:	f000 8473 	beq.w	80f4a <sd_mmc_check+0xab6>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80664:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80666:	2800      	cmp	r0, #0
   80668:	da0d      	bge.n	80686 <sd_mmc_check+0x1f2>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
   8066a:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
   8066e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   80672:	f040 8460 	bne.w	80f36 <sd_mmc_check+0xaa2>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
   80676:	49a6      	ldr	r1, [pc, #664]	; (80910 <sd_mmc_check+0x47c>)
   80678:	680b      	ldr	r3, [r1, #0]
   8067a:	7bda      	ldrb	r2, [r3, #15]
   8067c:	f042 0008 	orr.w	r0, r2, #8
   80680:	73d8      	strb	r0, [r3, #15]
   80682:	f000 bc58 	b.w	80f36 <sd_mmc_check+0xaa2>
   80686:	f106 36ff 	add.w	r6, r6, #4294967295
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   8068a:	4638      	mov	r0, r7
   8068c:	4629      	mov	r1, r5
   8068e:	47c0      	blx	r8
   80690:	2800      	cmp	r0, #0
   80692:	f040 847c 	bne.w	80f8e <sd_mmc_check+0xafa>
   80696:	f000 bc58 	b.w	80f4a <sd_mmc_check+0xab6>
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
		return false;
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
   8069a:	499d      	ldr	r1, [pc, #628]	; (80910 <sd_mmc_check+0x47c>)
   8069c:	6808      	ldr	r0, [r1, #0]
   8069e:	f04f 0201 	mov.w	r2, #1
   806a2:	8182      	strh	r2, [r0, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
   806a4:	f241 1003 	movw	r0, #4355	; 0x1103
   806a8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   806ac:	4b99      	ldr	r3, [pc, #612]	; (80914 <sd_mmc_check+0x480>)
   806ae:	4798      	blx	r3
   806b0:	2800      	cmp	r0, #0
   806b2:	f000 8121 	beq.w	808f8 <sd_mmc_check+0x464>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
   806b6:	4998      	ldr	r1, [pc, #608]	; (80918 <sd_mmc_check+0x484>)
   806b8:	4788      	blx	r1
   806ba:	2800      	cmp	r0, #0
   806bc:	f000 811f 	beq.w	808fe <sd_mmc_check+0x46a>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   806c0:	4893      	ldr	r0, [pc, #588]	; (80910 <sd_mmc_check+0x47c>)
   806c2:	6803      	ldr	r3, [r0, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   806c4:	7c9a      	ldrb	r2, [r3, #18]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   806c6:	f3c2 0183 	ubfx	r1, r2, #2, #4
   806ca:	f101 30ff 	add.w	r0, r1, #4294967295
   806ce:	2803      	cmp	r0, #3
   806d0:	d803      	bhi.n	806da <sd_mmc_check+0x246>
   806d2:	e8df f000 	tbb	[pc, r0]
   806d6:	0a06      	.short	0x0a06
   806d8:	120e      	.short	0x120e
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   806da:	f04f 0112 	mov.w	r1, #18
   806de:	7419      	strb	r1, [r3, #16]
   806e0:	e00e      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   806e2:	f04f 0214 	mov.w	r2, #20
   806e6:	741a      	strb	r2, [r3, #16]
   806e8:	e00a      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   806ea:	f04f 0022 	mov.w	r0, #34	; 0x22
   806ee:	7418      	strb	r0, [r3, #16]
   806f0:	e006      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   806f2:	f04f 0130 	mov.w	r1, #48	; 0x30
   806f6:	7419      	strb	r1, [r3, #16]
   806f8:	e002      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   806fa:	f04f 0240 	mov.w	r2, #64	; 0x40
   806fe:	741a      	strb	r2, [r3, #16]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80700:	7d5a      	ldrb	r2, [r3, #21]
		break;
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   80702:	f002 0007 	and.w	r0, r2, #7
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80706:	4985      	ldr	r1, [pc, #532]	; (8091c <sd_mmc_check+0x488>)
   80708:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   8070c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80710:	fb00 f101 	mul.w	r1, r0, r1
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   80714:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   80718:	4881      	ldr	r0, [pc, #516]	; (80920 <sd_mmc_check+0x48c>)
   8071a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   8071e:	fb02 f101 	mul.w	r1, r2, r1
   80722:	6019      	str	r1, [r3, #0]
   80724:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80726:	7e18      	ldrb	r0, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80728:	7e5a      	ldrb	r2, [r3, #25]
   8072a:	ea4f 0282 	mov.w	r2, r2, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   8072e:	ea42 2080 	orr.w	r0, r2, r0, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80732:	ea40 11a1 	orr.w	r1, r0, r1, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
   80736:	ea4f 5201 	mov.w	r2, r1, lsl #20
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   8073a:	ea4f 5112 	mov.w	r1, r2, lsr #20
   8073e:	f512 1f80 	cmn.w	r2, #1048576	; 0x100000
   80742:	d015      	beq.n	80770 <sd_mmc_check+0x2dc>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80744:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80746:	7eda      	ldrb	r2, [r3, #27]
   80748:	ea4f 0242 	mov.w	r2, r2, lsl #1
   8074c:	ea42 10e0 	orr.w	r0, r2, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   80750:	f101 0101 	add.w	r1, r1, #1
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80754:	f000 0207 	and.w	r2, r0, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   80758:	f102 0202 	add.w	r2, r2, #2
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   8075c:	fa01 f102 	lsl.w	r1, r1, r2
   80760:	7dd8      	ldrb	r0, [r3, #23]
   80762:	f000 020f 	and.w	r2, r0, #15
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80766:	fa01 f102 	lsl.w	r1, r1, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   8076a:	ea4f 2091 	mov.w	r0, r1, lsr #10
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   8076e:	6058      	str	r0, [r3, #4]
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
   80770:	899b      	ldrh	r3, [r3, #12]
	if (!sd_mmc_cmd9_mci()) {
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
   80772:	f243 1007 	movw	r0, #12551	; 0x3107
   80776:	ea4f 4103 	mov.w	r1, r3, lsl #16
   8077a:	4a66      	ldr	r2, [pc, #408]	; (80914 <sd_mmc_check+0x480>)
   8077c:	4790      	blx	r2
   8077e:	2800      	cmp	r0, #0
   80780:	f000 80c0 	beq.w	80904 <sd_mmc_check+0x470>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   80784:	4d62      	ldr	r5, [pc, #392]	; (80910 <sd_mmc_check+0x47c>)
   80786:	6829      	ldr	r1, [r5, #0]
   80788:	7c08      	ldrb	r0, [r1, #16]
   8078a:	283f      	cmp	r0, #63	; 0x3f
   8078c:	f240 809c 	bls.w	808c8 <sd_mmc_check+0x434>
{
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   80790:	f04f 0100 	mov.w	r1, #0
   80794:	9100      	str	r1, [sp, #0]
   80796:	f241 1008 	movw	r0, #4360	; 0x1108
   8079a:	f2c0 0008 	movt	r0, #8
   8079e:	f44f 7200 	mov.w	r2, #512	; 0x200
   807a2:	f04f 0301 	mov.w	r3, #1
   807a6:	4d5f      	ldr	r5, [pc, #380]	; (80924 <sd_mmc_check+0x490>)
   807a8:	47a8      	blx	r5
   807aa:	2800      	cmp	r0, #0
   807ac:	f000 83d0 	beq.w	80f50 <sd_mmc_check+0xabc>
   807b0:	f04f 0500 	mov.w	r5, #0
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
		if (!driver_read_word(&ext_csd)) {
   807b4:	4e5c      	ldr	r6, [pc, #368]	; (80928 <sd_mmc_check+0x494>)
   807b6:	a802      	add	r0, sp, #8
   807b8:	47b0      	blx	r6
   807ba:	2800      	cmp	r0, #0
   807bc:	f000 83c8 	beq.w	80f50 <sd_mmc_check+0xabc>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   807c0:	f105 0501 	add.w	r5, r5, #1
   807c4:	b2ad      	uxth	r5, r5
   807c6:	2d32      	cmp	r5, #50	; 0x32
   807c8:	d1f5      	bne.n	807b6 <sd_mmc_check+0x322>
		if (!driver_read_word(&ext_csd)) {
			return false;
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   807ca:	9e02      	ldr	r6, [sp, #8]
   807cc:	f006 0302 	and.w	r3, r6, #2
   807d0:	b2de      	uxtb	r6, r3
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   807d2:	4a4f      	ldr	r2, [pc, #316]	; (80910 <sd_mmc_check+0x47c>)
   807d4:	6810      	ldr	r0, [r2, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   807d6:	7e87      	ldrb	r7, [r0, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807d8:	7e01      	ldrb	r1, [r0, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   807da:	7e43      	ldrb	r3, [r0, #25]
   807dc:	ea4f 0283 	mov.w	r2, r3, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807e0:	ea42 2081 	orr.w	r0, r2, r1, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807e4:	ea40 17a7 	orr.w	r7, r0, r7, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
   807e8:	ea4f 5107 	mov.w	r1, r7, lsl #20
   807ec:	f511 1f80 	cmn.w	r1, #1048576	; 0x100000
   807f0:	d11a      	bne.n	80828 <sd_mmc_check+0x394>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
			if (!driver_read_word(&sec_count)) {
   807f2:	4f4d      	ldr	r7, [pc, #308]	; (80928 <sd_mmc_check+0x494>)
   807f4:	a803      	add	r0, sp, #12
   807f6:	47b8      	blx	r7
   807f8:	2800      	cmp	r0, #0
   807fa:	f000 83a9 	beq.w	80f50 <sd_mmc_check+0xabc>
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   807fe:	f105 0501 	add.w	r5, r5, #1
   80802:	b2ad      	uxth	r5, r5
   80804:	2d35      	cmp	r5, #53	; 0x35
   80806:	d9f5      	bls.n	807f4 <sd_mmc_check+0x360>
			if (!driver_read_word(&sec_count)) {
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   80808:	4b41      	ldr	r3, [pc, #260]	; (80910 <sd_mmc_check+0x47c>)
   8080a:	681a      	ldr	r2, [r3, #0]
   8080c:	9803      	ldr	r0, [sp, #12]
   8080e:	ea4f 0750 	mov.w	r7, r0, lsr #1
   80812:	6057      	str	r7, [r2, #4]
   80814:	e008      	b.n	80828 <sd_mmc_check+0x394>
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
		if (!driver_read_word(&sec_count)) {
   80816:	a803      	add	r0, sp, #12
   80818:	47b8      	blx	r7
   8081a:	2800      	cmp	r0, #0
   8081c:	f000 8398 	beq.w	80f50 <sd_mmc_check+0xabc>
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   80820:	f105 0501 	add.w	r5, r5, #1
   80824:	b2ad      	uxth	r5, r5
   80826:	e000      	b.n	8082a <sd_mmc_check+0x396>
		if (!driver_read_word(&sec_count)) {
   80828:	4f3f      	ldr	r7, [pc, #252]	; (80928 <sd_mmc_check+0x494>)
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   8082a:	2d7f      	cmp	r5, #127	; 0x7f
   8082c:	d9f3      	bls.n	80816 <sd_mmc_check+0x382>
   8082e:	e392      	b.n	80f56 <sd_mmc_check+0xac2>
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
   80830:	4d3e      	ldr	r5, [pc, #248]	; (8092c <sd_mmc_check+0x498>)
   80832:	7828      	ldrb	r0, [r5, #0]
   80834:	4a3e      	ldr	r2, [pc, #248]	; (80930 <sd_mmc_check+0x49c>)
   80836:	4790      	blx	r2
   80838:	4605      	mov	r5, r0
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
	uint32_t arg;

	switch (bus_width) {
   8083a:	2804      	cmp	r0, #4
   8083c:	d00b      	beq.n	80856 <sd_mmc_check+0x3c2>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
   8083e:	f44f 7100 	mov.w	r1, #512	; 0x200
   80842:	f2c0 11b7 	movt	r1, #439	; 0x1b7
   80846:	f04f 0000 	mov.w	r0, #0
   8084a:	f2c0 10b7 	movt	r0, #439	; 0x1b7
   8084e:	2d08      	cmp	r5, #8
   80850:	bf18      	it	ne
   80852:	4601      	movne	r1, r0
   80854:	e003      	b.n	8085e <sd_mmc_check+0x3ca>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
   80856:	f44f 7180 	mov.w	r1, #256	; 0x100
   8085a:	f2c0 11b7 	movt	r1, #439	; 0x1b7
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
   8085e:	f243 1006 	movw	r0, #12550	; 0x3106
   80862:	4b2c      	ldr	r3, [pc, #176]	; (80914 <sd_mmc_check+0x480>)
   80864:	4798      	blx	r3
   80866:	2800      	cmp	r0, #0
   80868:	f000 837d 	beq.w	80f66 <sd_mmc_check+0xad2>
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   8086c:	4931      	ldr	r1, [pc, #196]	; (80934 <sd_mmc_check+0x4a0>)
   8086e:	4788      	blx	r1
   80870:	f010 0f80 	tst.w	r0, #128	; 0x80
   80874:	f040 8377 	bne.w	80f66 <sd_mmc_check+0xad2>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->bus_width = bus_width;
   80878:	4a25      	ldr	r2, [pc, #148]	; (80910 <sd_mmc_check+0x47c>)
   8087a:	6810      	ldr	r0, [r2, #0]
   8087c:	7445      	strb	r5, [r0, #17]
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
   8087e:	4b2e      	ldr	r3, [pc, #184]	; (80938 <sd_mmc_check+0x4a4>)
   80880:	4798      	blx	r3
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
   80882:	492e      	ldr	r1, [pc, #184]	; (8093c <sd_mmc_check+0x4a8>)
   80884:	4788      	blx	r1
   80886:	b338      	cbz	r0, 808d8 <sd_mmc_check+0x444>
   80888:	b336      	cbz	r6, 808d8 <sd_mmc_check+0x444>
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
   8088a:	f243 1006 	movw	r0, #12550	; 0x3106
   8088e:	f44f 7180 	mov.w	r1, #256	; 0x100
   80892:	f2c0 31b9 	movt	r1, #953	; 0x3b9
   80896:	4a1f      	ldr	r2, [pc, #124]	; (80914 <sd_mmc_check+0x480>)
   80898:	4790      	blx	r2
   8089a:	2800      	cmp	r0, #0
   8089c:	f000 8366 	beq.w	80f6c <sd_mmc_check+0xad8>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   808a0:	4824      	ldr	r0, [pc, #144]	; (80934 <sd_mmc_check+0x4a0>)
   808a2:	4780      	blx	r0
   808a4:	f010 0f80 	tst.w	r0, #128	; 0x80
   808a8:	f040 8360 	bne.w	80f6c <sd_mmc_check+0xad8>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->high_speed = 1;
   808ac:	4e18      	ldr	r6, [pc, #96]	; (80910 <sd_mmc_check+0x47c>)
   808ae:	6837      	ldr	r7, [r6, #0]
   808b0:	f04f 0501 	mov.w	r5, #1
   808b4:	f887 5022 	strb.w	r5, [r7, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
   808b8:	f44f 43ea 	mov.w	r3, #29952	; 0x7500
   808bc:	f2c0 3319 	movt	r3, #793	; 0x319
   808c0:	603b      	str	r3, [r7, #0]
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
   808c2:	491d      	ldr	r1, [pc, #116]	; (80938 <sd_mmc_check+0x4a4>)
   808c4:	4788      	blx	r1
   808c6:	e007      	b.n	808d8 <sd_mmc_check+0x444>
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
   808c8:	4f1b      	ldr	r7, [pc, #108]	; (80938 <sd_mmc_check+0x4a4>)
   808ca:	47b8      	blx	r7
   808cc:	e004      	b.n	808d8 <sd_mmc_check+0x444>
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   808ce:	4640      	mov	r0, r8
   808d0:	4639      	mov	r1, r7
   808d2:	47b0      	blx	r6
   808d4:	b140      	cbz	r0, 808e8 <sd_mmc_check+0x454>
   808d6:	e018      	b.n	8090a <sd_mmc_check+0x476>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
   808d8:	f04f 050a 	mov.w	r5, #10
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   808dc:	f241 1810 	movw	r8, #4368	; 0x1110
   808e0:	f44f 7700 	mov.w	r7, #512	; 0x200
   808e4:	4e0b      	ldr	r6, [pc, #44]	; (80914 <sd_mmc_check+0x480>)
   808e6:	e7f2      	b.n	808ce <sd_mmc_check+0x43a>
   808e8:	f105 32ff 	add.w	r2, r5, #4294967295
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
	}

	uint8_t retry = 10;
	while (retry--) {
   808ec:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
   808f0:	d1ed      	bne.n	808ce <sd_mmc_check+0x43a>
		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return true;
		}
	}
	return false;
   808f2:	f04f 0000 	mov.w	r0, #0
   808f6:	e2ad      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   808f8:	f04f 0000 	mov.w	r0, #0
   808fc:	e2aa      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
		return false;
   808fe:	f04f 0000 	mov.w	r0, #0
   80902:	e2a7      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   80904:	f04f 0000 	mov.w	r0, #0
   80908:	e2a4      	b.n	80e54 <sd_mmc_check+0x9c0>
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return true;
   8090a:	f04f 0001 	mov.w	r0, #1
   8090e:	e2a1      	b.n	80e54 <sd_mmc_check+0x9c0>
   80910:	20070aa0 	.word	0x20070aa0
   80914:	00081955 	.word	0x00081955
   80918:	0008028d 	.word	0x0008028d
   8091c:	0008b53c 	.word	0x0008b53c
   80920:	0008b558 	.word	0x0008b558
   80924:	000819e5 	.word	0x000819e5
   80928:	00081abd 	.word	0x00081abd
   8092c:	20070aa6 	.word	0x20070aa6
   80930:	000818a5 	.word	0x000818a5
   80934:	0008197d 	.word	0x0008197d
   80938:	000801a5 	.word	0x000801a5
   8093c:	000818b1 	.word	0x000818b1
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
   80940:	f645 3002 	movw	r0, #23298	; 0x5b02
   80944:	f04f 0100 	mov.w	r1, #0
   80948:	f641 1355 	movw	r3, #6485	; 0x1955
   8094c:	f2c0 0308 	movt	r3, #8
   80950:	4798      	blx	r3
   80952:	2800      	cmp	r0, #0
   80954:	f000 828d 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
   80958:	f245 1003 	movw	r0, #20739	; 0x5103
   8095c:	f04f 0100 	mov.w	r1, #0
   80960:	f641 1255 	movw	r2, #6485	; 0x1955
   80964:	f2c0 0208 	movt	r2, #8
   80968:	4790      	blx	r2
   8096a:	2800      	cmp	r0, #0
   8096c:	f000 8281 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
   80970:	f640 25a0 	movw	r5, #2720	; 0xaa0
   80974:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80978:	682e      	ldr	r6, [r5, #0]
   8097a:	f641 107d 	movw	r0, #6525	; 0x197d
   8097e:	f2c0 0008 	movt	r0, #8
   80982:	4780      	blx	r0
   80984:	ea4f 4110 	mov.w	r1, r0, lsr #16
   80988:	81b1      	strh	r1, [r6, #12]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   8098a:	682b      	ldr	r3, [r5, #0]
   8098c:	7bda      	ldrb	r2, [r3, #15]
   8098e:	f012 0f01 	tst.w	r2, #1
   80992:	d056      	beq.n	80a42 <sd_mmc_check+0x5ae>
		if (!sd_mmc_cmd9_mci()) {
   80994:	f240 208d 	movw	r0, #653	; 0x28d
   80998:	f2c0 0008 	movt	r0, #8
   8099c:	4780      	blx	r0
   8099e:	2800      	cmp	r0, #0
   809a0:	f000 8267 	beq.w	80e72 <sd_mmc_check+0x9de>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   809a4:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   809a6:	7d5a      	ldrb	r2, [r3, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   809a8:	f002 0007 	and.w	r0, r2, #7
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   809ac:	f24b 513c 	movw	r1, #46396	; 0xb53c
   809b0:	f2c0 0108 	movt	r1, #8
   809b4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   809b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   809bc:	fb00 f101 	mul.w	r1, r0, r1
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   809c0:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   809c4:	f24b 40fc 	movw	r0, #46332	; 0xb4fc
   809c8:	f2c0 0008 	movt	r0, #8
   809cc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   809d0:	fb02 f101 	mul.w	r1, r2, r1
   809d4:	6019      	str	r1, [r3, #0]
   809d6:	7c98      	ldrb	r0, [r3, #18]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   809d8:	0982      	lsrs	r2, r0, #6
   809da:	d00f      	beq.n	809fc <sd_mmc_check+0x568>
   809dc:	7eda      	ldrb	r2, [r3, #27]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   809de:	7e98      	ldrb	r0, [r3, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   809e0:	7e59      	ldrb	r1, [r3, #25]
   809e2:	ea4f 4101 	mov.w	r1, r1, lsl #16
   809e6:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   809ea:	4302      	orrs	r2, r0
   809ec:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
   809f0:	f101 0101 	add.w	r1, r1, #1
   809f4:	ea4f 2041 	mov.w	r0, r1, lsl #9
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
   809f8:	6058      	str	r0, [r3, #4]
   809fa:	e022      	b.n	80a42 <sd_mmc_check+0x5ae>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   809fc:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   809fe:	7e18      	ldrb	r0, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80a00:	7e5a      	ldrb	r2, [r3, #25]
   80a02:	ea4f 0282 	mov.w	r2, r2, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80a06:	ea42 2080 	orr.w	r0, r2, r0, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80a0a:	ea40 12a1 	orr.w	r2, r0, r1, asr #6
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80a0e:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80a10:	7ed9      	ldrb	r1, [r3, #27]
   80a12:	ea4f 0141 	mov.w	r1, r1, lsl #1
   80a16:	ea41 10e0 	orr.w	r0, r1, r0, asr #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80a1a:	ea4f 5202 	mov.w	r2, r2, lsl #20
   80a1e:	ea4f 5212 	mov.w	r2, r2, lsr #20
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   80a22:	f102 0201 	add.w	r2, r2, #1
   80a26:	f000 0107 	and.w	r1, r0, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   80a2a:	f101 0102 	add.w	r1, r1, #2
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   80a2e:	fa02 f001 	lsl.w	r0, r2, r1
   80a32:	7dda      	ldrb	r2, [r3, #23]
   80a34:	f002 010f 	and.w	r1, r2, #15
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80a38:	fa00 f001 	lsl.w	r0, r0, r1
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
   80a3c:	ea4f 2290 	mov.w	r2, r0, lsr #10
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80a40:	605a      	str	r2, [r3, #4]
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
   80a42:	f640 23a0 	movw	r3, #2720	; 0xaa0
   80a46:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80a4a:	681a      	ldr	r2, [r3, #0]
   80a4c:	8991      	ldrh	r1, [r2, #12]
			return false;
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
   80a4e:	f243 1007 	movw	r0, #12551	; 0x3107
   80a52:	ea4f 4101 	mov.w	r1, r1, lsl #16
   80a56:	f641 1355 	movw	r3, #6485	; 0x1955
   80a5a:	f2c0 0308 	movt	r3, #8
   80a5e:	4798      	blx	r3
   80a60:	2800      	cmp	r0, #0
   80a62:	f000 8206 	beq.w	80e72 <sd_mmc_check+0x9de>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80a66:	f640 20a0 	movw	r0, #2720	; 0xaa0
   80a6a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80a6e:	6801      	ldr	r1, [r0, #0]
   80a70:	7bca      	ldrb	r2, [r1, #15]
   80a72:	f012 0f01 	tst.w	r2, #1
   80a76:	d04e      	beq.n	80b16 <sd_mmc_check+0x682>
{
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   80a78:	898b      	ldrh	r3, [r1, #12]
   80a7a:	f241 1037 	movw	r0, #4407	; 0x1137
   80a7e:	ea4f 4103 	mov.w	r1, r3, lsl #16
   80a82:	f641 1255 	movw	r2, #6485	; 0x1955
   80a86:	f2c0 0208 	movt	r2, #8
   80a8a:	4790      	blx	r2
   80a8c:	2800      	cmp	r0, #0
   80a8e:	f000 81f0 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   80a92:	f04f 0301 	mov.w	r3, #1
   80a96:	9300      	str	r3, [sp, #0]
   80a98:	f241 1033 	movw	r0, #4403	; 0x1133
   80a9c:	f2c0 0008 	movt	r0, #8
   80aa0:	f04f 0100 	mov.w	r1, #0
   80aa4:	f04f 0208 	mov.w	r2, #8
   80aa8:	4d4c      	ldr	r5, [pc, #304]	; (80bdc <sd_mmc_check+0x748>)
   80aaa:	47a8      	blx	r5
   80aac:	2800      	cmp	r0, #0
   80aae:	f000 81e0 	beq.w	80e72 <sd_mmc_check+0x9de>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(scr, 1)) {
   80ab2:	a804      	add	r0, sp, #16
   80ab4:	f04f 0101 	mov.w	r1, #1
   80ab8:	4b49      	ldr	r3, [pc, #292]	; (80be0 <sd_mmc_check+0x74c>)
   80aba:	4798      	blx	r3
   80abc:	2800      	cmp	r0, #0
   80abe:	f000 81d8 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80ac2:	4848      	ldr	r0, [pc, #288]	; (80be4 <sd_mmc_check+0x750>)
   80ac4:	4780      	blx	r0
   80ac6:	2800      	cmp	r0, #0
   80ac8:	f000 81d3 	beq.w	80e72 <sd_mmc_check+0x9de>
   80acc:	f89d 1010 	ldrb.w	r1, [sp, #16]
		return false;
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   80ad0:	f001 030f 	and.w	r3, r1, #15
   80ad4:	2b01      	cmp	r3, #1
   80ad6:	d009      	beq.n	80aec <sd_mmc_check+0x658>
   80ad8:	b113      	cbz	r3, 80ae0 <sd_mmc_check+0x64c>
   80ada:	2b02      	cmp	r3, #2
   80adc:	d116      	bne.n	80b0c <sd_mmc_check+0x678>
   80ade:	e00b      	b.n	80af8 <sd_mmc_check+0x664>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   80ae0:	4a41      	ldr	r2, [pc, #260]	; (80be8 <sd_mmc_check+0x754>)
   80ae2:	6813      	ldr	r3, [r2, #0]
   80ae4:	f04f 0010 	mov.w	r0, #16
   80ae8:	7418      	strb	r0, [r3, #16]
   80aea:	e014      	b.n	80b16 <sd_mmc_check+0x682>
		break;

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   80aec:	493e      	ldr	r1, [pc, #248]	; (80be8 <sd_mmc_check+0x754>)
   80aee:	680b      	ldr	r3, [r1, #0]
   80af0:	f04f 021a 	mov.w	r2, #26
   80af4:	741a      	strb	r2, [r3, #16]
   80af6:	e00e      	b.n	80b16 <sd_mmc_check+0x682>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80af8:	f89d 3012 	ldrb.w	r3, [sp, #18]
		break;

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   80afc:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
   80afe:	483a      	ldr	r0, [pc, #232]	; (80be8 <sd_mmc_check+0x754>)
   80b00:	6801      	ldr	r1, [r0, #0]
   80b02:	bf14      	ite	ne
   80b04:	2230      	movne	r2, #48	; 0x30
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
   80b06:	2220      	moveq	r2, #32
   80b08:	740a      	strb	r2, [r1, #16]
   80b0a:	e004      	b.n	80b16 <sd_mmc_check+0x682>
		}
		break;

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   80b0c:	4a36      	ldr	r2, [pc, #216]	; (80be8 <sd_mmc_check+0x754>)
   80b0e:	6810      	ldr	r0, [r2, #0]
   80b10:	f04f 0110 	mov.w	r1, #16
   80b14:	7401      	strb	r1, [r0, #16]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
		if (!sd_acmd51()) {
			return false;
		}
	}
	if (IS_SDIO()) {
   80b16:	f640 20a0 	movw	r0, #2720	; 0xaa0
   80b1a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80b1e:	6801      	ldr	r1, [r0, #0]
   80b20:	7bcb      	ldrb	r3, [r1, #15]
   80b22:	f003 0204 	and.w	r2, r3, #4
   80b26:	b2d0      	uxtb	r0, r2
   80b28:	2800      	cmp	r0, #0
   80b2a:	f000 8095 	beq.w	80c58 <sd_mmc_check+0x7c4>
 	uint32_t unit;
	uint32_t mul;
	uint8_t tplfe_max_tran_speed;

	// Read CIS area address in CCCR area
	addr_cis = 0; // Init all bytes, because the next function fill 3 bytes only
   80b2e:	f04f 0100 	mov.w	r1, #0
   80b32:	9103      	str	r1, [sp, #12]
	if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, SDIO_CCCR_CIS_PTR,
   80b34:	f04f 0503 	mov.w	r5, #3
   80b38:	9500      	str	r5, [sp, #0]
   80b3a:	f04f 0301 	mov.w	r3, #1
   80b3e:	9301      	str	r3, [sp, #4]
   80b40:	4608      	mov	r0, r1
   80b42:	f04f 0209 	mov.w	r2, #9
   80b46:	f240 15d5 	movw	r5, #469	; 0x1d5
   80b4a:	f2c0 0508 	movt	r5, #8
   80b4e:	47a8      	blx	r5
   80b50:	2800      	cmp	r0, #0
   80b52:	f000 818e 	beq.w	80e72 <sd_mmc_check+0x9de>
			1, 3, true)) {
		sd_mmc_debug("%s: CMD53 Read CIS Fail\n\r", __func__);
		return false;
	}
	if (!driver_start_read_blocks((uint8_t *)&addr_cis, 1)) {
   80b56:	a803      	add	r0, sp, #12
   80b58:	f04f 0101 	mov.w	r1, #1
   80b5c:	4b20      	ldr	r3, [pc, #128]	; (80be0 <sd_mmc_check+0x74c>)
   80b5e:	4798      	blx	r3
   80b60:	2800      	cmp	r0, #0
   80b62:	f000 8186 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80b66:	491f      	ldr	r1, [pc, #124]	; (80be4 <sd_mmc_check+0x750>)
   80b68:	4788      	blx	r1
   80b6a:	2800      	cmp	r0, #0
   80b6c:	f000 8181 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	addr_cis = le32_to_cpu(addr_cis);
   80b70:	9d03      	ldr	r5, [sp, #12]

	// Search Fun0 tuple in the CIA area
	addr = addr_cis;
	while (1) {
		// Read a sample of CIA area
		if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 3, true)) {
   80b72:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80bec <sd_mmc_check+0x758>
			sd_mmc_debug("%s: CMD53 Read CIA Fail\n\r", __func__);
			return false;
		}
		if (!driver_start_read_blocks(buf, 1)) {
   80b76:	4f1a      	ldr	r7, [pc, #104]	; (80be0 <sd_mmc_check+0x74c>)
			return false;
		}
		if (!driver_wait_end_of_read_blocks()) {
   80b78:	4e1a      	ldr	r6, [pc, #104]	; (80be4 <sd_mmc_check+0x750>)

	// Search Fun0 tuple in the CIA area
	addr = addr_cis;
	while (1) {
		// Read a sample of CIA area
		if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 3, true)) {
   80b7a:	f04f 0203 	mov.w	r2, #3
   80b7e:	9200      	str	r2, [sp, #0]
   80b80:	f04f 0301 	mov.w	r3, #1
   80b84:	9301      	str	r3, [sp, #4]
   80b86:	f04f 0000 	mov.w	r0, #0
   80b8a:	4601      	mov	r1, r0
   80b8c:	462a      	mov	r2, r5
   80b8e:	47c0      	blx	r8
   80b90:	2800      	cmp	r0, #0
   80b92:	f000 816e 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Read CIA Fail\n\r", __func__);
			return false;
		}
		if (!driver_start_read_blocks(buf, 1)) {
   80b96:	a804      	add	r0, sp, #16
   80b98:	f04f 0101 	mov.w	r1, #1
   80b9c:	47b8      	blx	r7
   80b9e:	2800      	cmp	r0, #0
   80ba0:	f000 8167 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
		if (!driver_wait_end_of_read_blocks()) {
   80ba4:	47b0      	blx	r6
   80ba6:	2800      	cmp	r0, #0
   80ba8:	f000 8163 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
		if (buf[0] == SDIO_CISTPL_END) {
   80bac:	f89d 0010 	ldrb.w	r0, [sp, #16]
   80bb0:	28ff      	cmp	r0, #255	; 0xff
   80bb2:	f000 815e 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Tuple error\n\r", __func__);
			return false; // Tuple error
		}
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
   80bb6:	2822      	cmp	r0, #34	; 0x22
   80bb8:	d102      	bne.n	80bc0 <sd_mmc_check+0x72c>
   80bba:	f89d 3012 	ldrb.w	r3, [sp, #18]
   80bbe:	b1bb      	cbz	r3, 80bf0 <sd_mmc_check+0x75c>
			break; // Fun0 tuple found
		}
		if (buf[1] == 0) {
   80bc0:	f89d 1011 	ldrb.w	r1, [sp, #17]
   80bc4:	2900      	cmp	r1, #0
   80bc6:	f000 8154 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Tuple error\n\r", __func__);
			return false; // Tuple error
		}

		// Next address
		addr += (buf[1] + 2);
   80bca:	f101 0102 	add.w	r1, r1, #2
   80bce:	186d      	adds	r5, r5, r1
		if (addr > (addr_cis + 256)) {
   80bd0:	9a03      	ldr	r2, [sp, #12]
   80bd2:	f502 7080 	add.w	r0, r2, #256	; 0x100
   80bd6:	4285      	cmp	r5, r0
   80bd8:	d9cf      	bls.n	80b7a <sd_mmc_check+0x6e6>
   80bda:	e14a      	b.n	80e72 <sd_mmc_check+0x9de>
   80bdc:	000819e5 	.word	0x000819e5
   80be0:	00081b51 	.word	0x00081b51
   80be4:	00081c69 	.word	0x00081c69
   80be8:	20070aa0 	.word	0x20070aa0
   80bec:	000801d5 	.word	0x000801d5
			return false; // Outoff CIS area
		}
	}

	// Read all Fun0 tuple fields: fn0_blk_siz & max_tran_speed
	if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 6, true)) {
   80bf0:	f04f 0306 	mov.w	r3, #6
   80bf4:	9300      	str	r3, [sp, #0]
   80bf6:	f04f 0301 	mov.w	r3, #1
   80bfa:	9301      	str	r3, [sp, #4]
   80bfc:	f04f 0000 	mov.w	r0, #0
   80c00:	4601      	mov	r1, r0
   80c02:	462a      	mov	r2, r5
   80c04:	4dbb      	ldr	r5, [pc, #748]	; (80ef4 <sd_mmc_check+0xa60>)
   80c06:	47a8      	blx	r5
   80c08:	2800      	cmp	r0, #0
   80c0a:	f000 8132 	beq.w	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD53 Read all Fun0 Fail\n\r", __func__);
		return false;
	}
	if (!driver_start_read_blocks(buf, 1)) {
   80c0e:	a804      	add	r0, sp, #16
   80c10:	f04f 0101 	mov.w	r1, #1
   80c14:	4ab8      	ldr	r2, [pc, #736]	; (80ef8 <sd_mmc_check+0xa64>)
   80c16:	4790      	blx	r2
   80c18:	2800      	cmp	r0, #0
   80c1a:	f000 812a 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80c1e:	49b7      	ldr	r1, [pc, #732]	; (80efc <sd_mmc_check+0xa68>)
   80c20:	4788      	blx	r1
   80c22:	2800      	cmp	r0, #0
   80c24:	f000 8125 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	tplfe_max_tran_speed = buf[5];
   80c28:	f89d 3015 	ldrb.w	r3, [sp, #21]
   80c2c:	2b32      	cmp	r3, #50	; 0x32
   80c2e:	bf28      	it	cs
   80c30:	2332      	movcs	r3, #50	; 0x32
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80c32:	48b3      	ldr	r0, [pc, #716]	; (80f00 <sd_mmc_check+0xa6c>)
   80c34:	6802      	ldr	r2, [r0, #0]
		 */
		tplfe_max_tran_speed = 0x32; // 25Mhz
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
   80c36:	f003 0007 	and.w	r0, r3, #7
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80c3a:	49b2      	ldr	r1, [pc, #712]	; (80f04 <sd_mmc_check+0xa70>)
   80c3c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   80c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80c44:	fb00 f101 	mul.w	r1, r0, r1
		tplfe_max_tran_speed = 0x32; // 25Mhz
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
   80c48:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   80c4c:	48ae      	ldr	r0, [pc, #696]	; (80f08 <sd_mmc_check+0xa74>)
   80c4e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   80c52:	fb03 f101 	mul.w	r1, r3, r1
   80c56:	6011      	str	r1, [r2, #0]
	if (IS_SDIO()) {
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
   80c58:	f640 22a6 	movw	r2, #2726	; 0xaa6
   80c5c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80c60:	7810      	ldrb	r0, [r2, #0]
   80c62:	f641 03a5 	movw	r3, #6309	; 0x18a5
   80c66:	f2c0 0308 	movt	r3, #8
   80c6a:	4798      	blx	r3
   80c6c:	2803      	cmp	r0, #3
   80c6e:	d959      	bls.n	80d24 <sd_mmc_check+0x890>
		// TRY to enable 4-bit mode
		if (IS_SDIO()) {
   80c70:	f640 20a0 	movw	r0, #2720	; 0xaa0
   80c74:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80c78:	6801      	ldr	r1, [r0, #0]
   80c7a:	7bca      	ldrb	r2, [r1, #15]
   80c7c:	f002 0304 	and.w	r3, r2, #4
   80c80:	b2d8      	uxtb	r0, r3
   80c82:	b330      	cbz	r0, 80cd2 <sd_mmc_check+0x83e>
	 * A SDIO Low-Speed alone can supports 4bit (Optional)
	 */
	uint8_t u8_value;

	// Check 4bit support in 4BLS of "Card Capability" register
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
   80c84:	ad03      	add	r5, sp, #12
   80c86:	9500      	str	r5, [sp, #0]
   80c88:	f04f 0000 	mov.w	r0, #0
   80c8c:	4601      	mov	r1, r0
   80c8e:	f04f 0208 	mov.w	r2, #8
   80c92:	4603      	mov	r3, r0
   80c94:	4d9d      	ldr	r5, [pc, #628]	; (80f0c <sd_mmc_check+0xa78>)
   80c96:	47a8      	blx	r5
   80c98:	2800      	cmp	r0, #0
   80c9a:	f000 80ea 	beq.w	80e72 <sd_mmc_check+0x9de>
			0, &u8_value)) {
		return false;
	}
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
   80c9e:	f99d 100c 	ldrsb.w	r1, [sp, #12]
   80ca2:	2900      	cmp	r1, #0
   80ca4:	da15      	bge.n	80cd2 <sd_mmc_check+0x83e>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_BUSWIDTH_4B;
   80ca6:	ab14      	add	r3, sp, #80	; 0x50
   80ca8:	f04f 0202 	mov.w	r2, #2
   80cac:	f803 2d44 	strb.w	r2, [r3, #-68]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
   80cb0:	9300      	str	r3, [sp, #0]
   80cb2:	f04f 0001 	mov.w	r0, #1
   80cb6:	f04f 0100 	mov.w	r1, #0
   80cba:	f04f 0207 	mov.w	r2, #7
   80cbe:	4603      	mov	r3, r0
   80cc0:	47a8      	blx	r5
   80cc2:	2800      	cmp	r0, #0
   80cc4:	f000 80d5 	beq.w	80e72 <sd_mmc_check+0x9de>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->bus_width = 4;
   80cc8:	488d      	ldr	r0, [pc, #564]	; (80f00 <sd_mmc_check+0xa6c>)
   80cca:	6801      	ldr	r1, [r0, #0]
   80ccc:	f04f 0304 	mov.w	r3, #4
   80cd0:	744b      	strb	r3, [r1, #17]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_bus_width()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
   80cd2:	f640 22a0 	movw	r2, #2720	; 0xaa0
   80cd6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80cda:	6810      	ldr	r0, [r2, #0]
   80cdc:	7bc1      	ldrb	r1, [r0, #15]
   80cde:	f011 0f01 	tst.w	r1, #1
   80ce2:	d01a      	beq.n	80d1a <sd_mmc_check+0x886>
 */
static bool sd_acmd6(void)
{
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   80ce4:	8983      	ldrh	r3, [r0, #12]
   80ce6:	f241 1037 	movw	r0, #4407	; 0x1137
   80cea:	ea4f 4103 	mov.w	r1, r3, lsl #16
   80cee:	f641 1255 	movw	r2, #6485	; 0x1955
   80cf2:	f2c0 0208 	movt	r2, #8
   80cf6:	4790      	blx	r2
   80cf8:	2800      	cmp	r0, #0
   80cfa:	f000 80ba 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
   80cfe:	f241 1006 	movw	r0, #4358	; 0x1106
   80d02:	f04f 0102 	mov.w	r1, #2
   80d06:	4b82      	ldr	r3, [pc, #520]	; (80f10 <sd_mmc_check+0xa7c>)
   80d08:	4798      	blx	r3
   80d0a:	2800      	cmp	r0, #0
   80d0c:	f000 80b1 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	sd_mmc_card->bus_width = 4;
   80d10:	487b      	ldr	r0, [pc, #492]	; (80f00 <sd_mmc_check+0xa6c>)
   80d12:	6801      	ldr	r1, [r0, #0]
   80d14:	f04f 0204 	mov.w	r2, #4
   80d18:	744a      	strb	r2, [r1, #17]
			if (!sd_acmd6()) {
				return false;
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
   80d1a:	f240 13a5 	movw	r3, #421	; 0x1a5
   80d1e:	f2c0 0308 	movt	r3, #8
   80d22:	4798      	blx	r3
	}
	if (driver_is_high_speed_capable()) {
   80d24:	f641 00b1 	movw	r0, #6321	; 0x18b1
   80d28:	f2c0 0008 	movt	r0, #8
   80d2c:	4780      	blx	r0
   80d2e:	2800      	cmp	r0, #0
   80d30:	f000 8081 	beq.w	80e36 <sd_mmc_check+0x9a2>
		// TRY to enable High-Speed Mode
		if (IS_SDIO()) {
   80d34:	f640 21a0 	movw	r1, #2720	; 0xaa0
   80d38:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80d3c:	680a      	ldr	r2, [r1, #0]
   80d3e:	7bd3      	ldrb	r3, [r2, #15]
   80d40:	f003 0004 	and.w	r0, r3, #4
   80d44:	b2c1      	uxtb	r1, r0
   80d46:	b359      	cbz	r1, 80da0 <sd_mmc_check+0x90c>
static bool sdio_cmd52_set_high_speed(void)
{
	uint8_t u8_value;

	// Check CIA.HS
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
   80d48:	ad03      	add	r5, sp, #12
   80d4a:	9500      	str	r5, [sp, #0]
   80d4c:	f04f 0000 	mov.w	r0, #0
   80d50:	4601      	mov	r1, r0
   80d52:	f04f 0213 	mov.w	r2, #19
   80d56:	4603      	mov	r3, r0
   80d58:	4d6c      	ldr	r5, [pc, #432]	; (80f0c <sd_mmc_check+0xa78>)
   80d5a:	47a8      	blx	r5
   80d5c:	2800      	cmp	r0, #0
   80d5e:	f000 8088 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
   80d62:	f89d 200c 	ldrb.w	r2, [sp, #12]
   80d66:	f012 0f01 	tst.w	r2, #1
   80d6a:	d019      	beq.n	80da0 <sd_mmc_check+0x90c>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_EHS;
   80d6c:	ab14      	add	r3, sp, #80	; 0x50
   80d6e:	f04f 0002 	mov.w	r0, #2
   80d72:	f803 0d44 	strb.w	r0, [r3, #-68]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
   80d76:	9300      	str	r3, [sp, #0]
   80d78:	f04f 0001 	mov.w	r0, #1
   80d7c:	f04f 0100 	mov.w	r1, #0
   80d80:	f04f 0213 	mov.w	r2, #19
   80d84:	4603      	mov	r3, r0
   80d86:	47a8      	blx	r5
   80d88:	2800      	cmp	r0, #0
   80d8a:	d072      	beq.n	80e72 <sd_mmc_check+0x9de>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->high_speed = 1;
   80d8c:	495c      	ldr	r1, [pc, #368]	; (80f00 <sd_mmc_check+0xa6c>)
   80d8e:	680b      	ldr	r3, [r1, #0]
   80d90:	f04f 0201 	mov.w	r2, #1
   80d94:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
   80d98:	6818      	ldr	r0, [r3, #0]
   80d9a:	ea4f 0140 	mov.w	r1, r0, lsl #1
   80d9e:	6019      	str	r1, [r3, #0]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_high_speed()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
   80da0:	f640 23a0 	movw	r3, #2720	; 0xaa0
   80da4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80da8:	6818      	ldr	r0, [r3, #0]
   80daa:	7bc2      	ldrb	r2, [r0, #15]
   80dac:	f012 0f01 	tst.w	r2, #1
   80db0:	d03c      	beq.n	80e2c <sd_mmc_check+0x998>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
   80db2:	7c01      	ldrb	r1, [r0, #16]
   80db4:	2910      	cmp	r1, #16
   80db6:	d939      	bls.n	80e2c <sd_mmc_check+0x998>
 */
static bool sd_cm6_set_high_speed(void)
{
	uint8_t switch_status[SD_SW_STATUS_BSIZE];

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
   80db8:	f04f 0301 	mov.w	r3, #1
   80dbc:	9300      	str	r3, [sp, #0]
   80dbe:	f241 1006 	movw	r0, #4358	; 0x1106
   80dc2:	f2c0 0008 	movt	r0, #8
   80dc6:	f64f 7101 	movw	r1, #65281	; 0xff01
   80dca:	f2c8 01ff 	movt	r1, #33023	; 0x80ff
   80dce:	f04f 0240 	mov.w	r2, #64	; 0x40
   80dd2:	4d50      	ldr	r5, [pc, #320]	; (80f14 <sd_mmc_check+0xa80>)
   80dd4:	47a8      	blx	r5
   80dd6:	2800      	cmp	r0, #0
   80dd8:	d04b      	beq.n	80e72 <sd_mmc_check+0x9de>
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
   80dda:	a804      	add	r0, sp, #16
   80ddc:	f04f 0101 	mov.w	r1, #1
   80de0:	4b45      	ldr	r3, [pc, #276]	; (80ef8 <sd_mmc_check+0xa64>)
   80de2:	4798      	blx	r3
   80de4:	2800      	cmp	r0, #0
   80de6:	d044      	beq.n	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80de8:	4844      	ldr	r0, [pc, #272]	; (80efc <sd_mmc_check+0xa68>)
   80dea:	4780      	blx	r0
   80dec:	2800      	cmp	r0, #0
   80dee:	d040      	beq.n	80e72 <sd_mmc_check+0x9de>
		return false;
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   80df0:	4a49      	ldr	r2, [pc, #292]	; (80f18 <sd_mmc_check+0xa84>)
   80df2:	4790      	blx	r2
   80df4:	f010 0f80 	tst.w	r0, #128	; 0x80
   80df8:	d13b      	bne.n	80e72 <sd_mmc_check+0x9de>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80dfa:	f89d 1020 	ldrb.w	r1, [sp, #32]
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
   80dfe:	f001 030f 	and.w	r3, r1, #15
   80e02:	2b0f      	cmp	r3, #15
   80e04:	d012      	beq.n	80e2c <sd_mmc_check+0x998>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80e06:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80e0a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
   80e0e:	ea50 2202 	orrs.w	r2, r0, r2, lsl #8
   80e12:	d12e      	bne.n	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
   80e14:	4941      	ldr	r1, [pc, #260]	; (80f1c <sd_mmc_check+0xa88>)
   80e16:	4788      	blx	r1
	sd_mmc_card->high_speed = 1;
   80e18:	4b39      	ldr	r3, [pc, #228]	; (80f00 <sd_mmc_check+0xa6c>)
   80e1a:	6818      	ldr	r0, [r3, #0]
   80e1c:	f04f 0201 	mov.w	r2, #1
   80e20:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
	sd_mmc_card->clock *= 2;
   80e24:	6801      	ldr	r1, [r0, #0]
   80e26:	ea4f 0341 	mov.w	r3, r1, lsl #1
   80e2a:	6003      	str	r3, [r0, #0]
					return false;
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
   80e2c:	f240 10a5 	movw	r0, #421	; 0x1a5
   80e30:	f2c0 0008 	movt	r0, #8
   80e34:	4780      	blx	r0
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80e36:	f640 22a0 	movw	r2, #2720	; 0xaa0
   80e3a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80e3e:	6811      	ldr	r1, [r2, #0]
   80e40:	7bcb      	ldrb	r3, [r1, #15]
   80e42:	f013 0f01 	tst.w	r3, #1
   80e46:	d006      	beq.n	80e56 <sd_mmc_check+0x9c2>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   80e48:	f241 1010 	movw	r0, #4368	; 0x1110
   80e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
   80e50:	4a2f      	ldr	r2, [pc, #188]	; (80f10 <sd_mmc_check+0xa7c>)
   80e52:	4790      	blx	r2
		sd_mmc_deselect_slot();
		return sd_mmc_err;
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   80e54:	b168      	cbz	r0, 80e72 <sd_mmc_check+0x9de>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   80e56:	f640 20a0 	movw	r0, #2720	; 0xaa0
   80e5a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80e5e:	6803      	ldr	r3, [r0, #0]
   80e60:	f04f 0100 	mov.w	r1, #0
   80e64:	7399      	strb	r1, [r3, #14]
		sd_mmc_deselect_slot();
   80e66:	f240 2229 	movw	r2, #553	; 0x229
   80e6a:	f2c0 0208 	movt	r2, #8
   80e6e:	4790      	blx	r2
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   80e70:	e07f      	b.n	80f72 <sd_mmc_check+0xade>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   80e72:	f640 24a0 	movw	r4, #2720	; 0xaa0
   80e76:	f2c2 0407 	movt	r4, #8199	; 0x2007
   80e7a:	6820      	ldr	r0, [r4, #0]
   80e7c:	f04f 0403 	mov.w	r4, #3
   80e80:	7384      	strb	r4, [r0, #14]
	sd_mmc_deselect_slot();
   80e82:	f240 2329 	movw	r3, #553	; 0x229
   80e86:	f2c0 0308 	movt	r3, #8
   80e8a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   80e8c:	e071      	b.n	80f72 <sd_mmc_check+0xade>
 */
static bool sd_cmd8(uint8_t * v2)
{
	uint32_t resp;

	*v2 = 0;
   80e8e:	f04f 0600 	mov.w	r6, #0
   80e92:	e001      	b.n	80e98 <sd_mmc_check+0xa04>
   80e94:	f04f 0600 	mov.w	r6, #0
static bool sdio_op_cond(void)
{
	uint32_t resp;

	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
   80e98:	f244 5005 	movw	r0, #17669	; 0x4505
   80e9c:	f04f 0100 	mov.w	r1, #0
   80ea0:	f641 1355 	movw	r3, #6485	; 0x1955
   80ea4:	f2c0 0308 	movt	r3, #8
   80ea8:	4798      	blx	r3
   80eaa:	2800      	cmp	r0, #0
   80eac:	f47f ab41 	bne.w	80532 <sd_mmc_check+0x9e>
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
		return false;
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80eb0:	f640 22a0 	movw	r2, #2720	; 0xaa0
   80eb4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80eb8:	6811      	ldr	r1, [r2, #0]
   80eba:	7bcb      	ldrb	r3, [r1, #15]
   80ebc:	f013 0f01 	tst.w	r3, #1
   80ec0:	f43f ad4a 	beq.w	80958 <sd_mmc_check+0x4c4>
   80ec4:	f7ff bb6d 	b.w	805a2 <sd_mmc_check+0x10e>
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   80ec8:	f640 20a0 	movw	r0, #2720	; 0xaa0
   80ecc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80ed0:	6801      	ldr	r1, [r0, #0]
   80ed2:	f04f 0302 	mov.w	r3, #2
   80ed6:	73cb      	strb	r3, [r1, #15]
static bool sd_mmc_mci_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
   80ed8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80edc:	f04f 0100 	mov.w	r1, #0
   80ee0:	f641 1255 	movw	r2, #6485	; 0x1955
   80ee4:	f2c0 0208 	movt	r2, #8
   80ee8:	4790      	blx	r2
   80eea:	2800      	cmp	r0, #0
   80eec:	f47f ab9e 	bne.w	8062c <sd_mmc_check+0x198>
   80ef0:	e7b0      	b.n	80e54 <sd_mmc_check+0x9c0>
   80ef2:	bf00      	nop
   80ef4:	000801d5 	.word	0x000801d5
   80ef8:	00081b51 	.word	0x00081b51
   80efc:	00081c69 	.word	0x00081c69
   80f00:	20070aa0 	.word	0x20070aa0
   80f04:	0008b53c 	.word	0x0008b53c
   80f08:	0008b4fc 	.word	0x0008b4fc
   80f0c:	00080249 	.word	0x00080249
   80f10:	00081955 	.word	0x00081955
   80f14:	000819e5 	.word	0x000819e5
   80f18:	0008197d 	.word	0x0008197d
   80f1c:	00081931 	.word	0x00081931
			sd_mmc_card->type = CARD_TYPE_MMC;
			return sd_mmc_mci_install_mmc();
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80f20:	f640 20a0 	movw	r0, #2720	; 0xaa0
   80f24:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80f28:	6801      	ldr	r1, [r0, #0]
   80f2a:	7bca      	ldrb	r2, [r1, #15]
   80f2c:	f012 0f01 	tst.w	r2, #1
   80f30:	f47f ad06 	bne.w	80940 <sd_mmc_check+0x4ac>
   80f34:	e510      	b.n	80958 <sd_mmc_check+0x4c4>
		return false;
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
   80f36:	f645 3002 	movw	r0, #23298	; 0x5b02
   80f3a:	f04f 0100 	mov.w	r1, #0
   80f3e:	4b38      	ldr	r3, [pc, #224]	; (81020 <sd_mmc_check+0xb8c>)
   80f40:	4798      	blx	r3
   80f42:	2800      	cmp	r0, #0
   80f44:	f47f aba9 	bne.w	8069a <sd_mmc_check+0x206>
   80f48:	e784      	b.n	80e54 <sd_mmc_check+0x9c0>
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
		return false;
	}

	if (!mmc_mci_op_cond()) {
		return false;
   80f4a:	f04f 0000 	mov.w	r0, #0
   80f4e:	e781      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
   80f50:	f04f 0000 	mov.w	r0, #0
   80f54:	e77e      	b.n	80e54 <sd_mmc_check+0x9c0>
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
   80f56:	4933      	ldr	r1, [pc, #204]	; (81024 <sd_mmc_check+0xb90>)
   80f58:	7808      	ldrb	r0, [r1, #0]
   80f5a:	4b33      	ldr	r3, [pc, #204]	; (81028 <sd_mmc_check+0xb94>)
   80f5c:	4798      	blx	r3
   80f5e:	2803      	cmp	r0, #3
   80f60:	f63f ac66 	bhi.w	80830 <sd_mmc_check+0x39c>
   80f64:	e48d      	b.n	80882 <sd_mmc_check+0x3ee>
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
   80f66:	f04f 0000 	mov.w	r0, #0
   80f6a:	e773      	b.n	80e54 <sd_mmc_check+0x9c0>
			sd_mmc_configure_slot();
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
   80f6c:	f04f 0000 	mov.w	r0, #0
   80f70:	e770      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
   80f72:	4620      	mov	r0, r4
   80f74:	b015      	add	sp, #84	; 0x54
   80f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80f7a:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80f7c:	2800      	cmp	r0, #0
   80f7e:	f6ff ab74 	blt.w	8066a <sd_mmc_check+0x1d6>
   80f82:	f241 0669 	movw	r6, #4201	; 0x1069
   80f86:	f106 36ff 	add.w	r6, r6, #4294967295
   80f8a:	f7ff bb65 	b.w	80658 <sd_mmc_check+0x1c4>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80f8e:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80f90:	2800      	cmp	r0, #0
   80f92:	f6ff ab6a 	blt.w	8066a <sd_mmc_check+0x1d6>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
			}
			break;
		}
		if (retry-- == 0) {
   80f96:	3e01      	subs	r6, #1
   80f98:	f47f ab5e 	bne.w	80658 <sd_mmc_check+0x1c4>
   80f9c:	e7d5      	b.n	80f4a <sd_mmc_check+0xab6>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   80f9e:	4649      	mov	r1, r9
   80fa0:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   80fa4:	f244 5029 	movw	r0, #17705	; 0x4529
   80fa8:	2e00      	cmp	r6, #0
   80faa:	bf08      	it	eq
   80fac:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   80fb0:	47a8      	blx	r5
   80fb2:	2800      	cmp	r0, #0
   80fb4:	d088      	beq.n	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80fb6:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   80fb8:	2800      	cmp	r0, #0
   80fba:	f6ff ab1e 	blt.w	805fa <sd_mmc_check+0x166>
   80fbe:	f640 0b35 	movw	fp, #2101	; 0x835
   80fc2:	f10b 3bff 	add.w	fp, fp, #4294967295
   80fc6:	f7ff bb02 	b.w	805ce <sd_mmc_check+0x13a>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   80fca:	4649      	mov	r1, r9
   80fcc:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   80fd0:	f244 5029 	movw	r0, #17705	; 0x4529
   80fd4:	2e00      	cmp	r6, #0
   80fd6:	bf08      	it	eq
   80fd8:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   80fdc:	47a8      	blx	r5
   80fde:	2800      	cmp	r0, #0
   80fe0:	f43f af72 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80fe4:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   80fe6:	2800      	cmp	r0, #0
   80fe8:	f6ff ab07 	blt.w	805fa <sd_mmc_check+0x166>
			if ((resp & OCR_CCS) != 0) {
				sd_mmc_card->type |= CARD_TYPE_HC;
			}
			break;
		}
		if (retry-- == 0) {
   80fec:	f1bb 0b01 	subs.w	fp, fp, #1
   80ff0:	f47f aaed 	bne.w	805ce <sd_mmc_check+0x13a>
   80ff4:	e768      	b.n	80ec8 <sd_mmc_check+0xa34>
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80ff6:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   80ff8:	1e01      	subs	r1, r0, #0
   80ffa:	f6ff aac5 	blt.w	80588 <sd_mmc_check+0xf4>
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   80ffe:	4638      	mov	r0, r7
   81000:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   81004:	47a8      	blx	r5
   81006:	2800      	cmp	r0, #0
   81008:	f43f af33 	beq.w	80e72 <sd_mmc_check+0x9de>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   8100c:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   8100e:	1e01      	subs	r1, r0, #0
   81010:	f6ff aaba 	blt.w	80588 <sd_mmc_check+0xf4>
			break;
		}
		if (cmd5_retry-- == 0) {
   81014:	f1b9 0902 	subs.w	r9, r9, #2
   81018:	f47f aaa1 	bne.w	8055e <sd_mmc_check+0xca>
   8101c:	e729      	b.n	80e72 <sd_mmc_check+0x9de>
   8101e:	bf00      	nop
   81020:	00081955 	.word	0x00081955
   81024:	20070aa6 	.word	0x20070aa6
   81028:	000818a5 	.word	0x000818a5

0008102c <sd_mmc_get_type>:
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
   8102c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   8102e:	f240 23d5 	movw	r3, #725	; 0x2d5
   81032:	f2c0 0308 	movt	r3, #8
   81036:	4798      	blx	r3
   81038:	b958      	cbnz	r0, 81052 <sd_mmc_get_type+0x26>
		return CARD_TYPE_UNKNOWN;
	}
	sd_mmc_deselect_slot();
   8103a:	f240 2029 	movw	r0, #553	; 0x229
   8103e:	f2c0 0008 	movt	r0, #8
   81042:	4780      	blx	r0
	return sd_mmc_card->type;
   81044:	f640 21a0 	movw	r1, #2720	; 0xaa0
   81048:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8104c:	680a      	ldr	r2, [r1, #0]
   8104e:	7bd0      	ldrb	r0, [r2, #15]
   81050:	bd08      	pop	{r3, pc}
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
   81052:	f04f 0000 	mov.w	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
   81056:	bd08      	pop	{r3, pc}

00081058 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   81058:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   8105a:	f240 23d5 	movw	r3, #725	; 0x2d5
   8105e:	f2c0 0308 	movt	r3, #8
   81062:	4798      	blx	r3
   81064:	b958      	cbnz	r0, 8107e <sd_mmc_get_capacity+0x26>
		return 0;
	}
	sd_mmc_deselect_slot();
   81066:	f240 2029 	movw	r0, #553	; 0x229
   8106a:	f2c0 0008 	movt	r0, #8
   8106e:	4780      	blx	r0
	return sd_mmc_card->capacity;
   81070:	f640 21a0 	movw	r1, #2720	; 0xaa0
   81074:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81078:	680a      	ldr	r2, [r1, #0]
   8107a:	6850      	ldr	r0, [r2, #4]
   8107c:	bd08      	pop	{r3, pc}
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
   8107e:	f04f 0000 	mov.w	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
   81082:	bd08      	pop	{r3, pc}

00081084 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
   81084:	f04f 0000 	mov.w	r0, #0
   81088:	4770      	bx	lr
   8108a:	bf00      	nop

0008108c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   8108c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81090:	b083      	sub	sp, #12
   81092:	468b      	mov	fp, r1
   81094:	4692      	mov	sl, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   81096:	f240 23d5 	movw	r3, #725	; 0x2d5
   8109a:	f2c0 0308 	movt	r3, #8
   8109e:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
   810a0:	4681      	mov	r9, r0
   810a2:	2800      	cmp	r0, #0
   810a4:	f040 8081 	bne.w	811aa <sd_mmc_init_read_blocks+0x11e>
   810a8:	f640 5841 	movw	r8, #3393	; 0xd41
   810ac:	f2c0 0803 	movt	r8, #3
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810b0:	f640 26a0 	movw	r6, #2720	; 0xaa0
   810b4:	f2c2 0607 	movt	r6, #8199	; 0x2007
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810b8:	f241 150d 	movw	r5, #4365	; 0x110d
   810bc:	f641 1455 	movw	r4, #6485	; 0x1955
   810c0:	f2c0 0408 	movt	r4, #8
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   810c4:	f641 177d 	movw	r7, #6525	; 0x197d
   810c8:	f2c0 0708 	movt	r7, #8
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810cc:	6830      	ldr	r0, [r6, #0]
   810ce:	8981      	ldrh	r1, [r0, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810d0:	4628      	mov	r0, r5
   810d2:	ea4f 4101 	mov.w	r1, r1, lsl #16
   810d6:	47a0      	blx	r4
   810d8:	2800      	cmp	r0, #0
   810da:	d046      	beq.n	8116a <sd_mmc_init_read_blocks+0xde>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   810dc:	47b8      	blx	r7
   810de:	f410 7f80 	tst.w	r0, #256	; 0x100
   810e2:	d14a      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
   810e4:	f108 38ff 	add.w	r8, r8, #4294967295
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810e8:	6832      	ldr	r2, [r6, #0]
   810ea:	8993      	ldrh	r3, [r2, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810ec:	4628      	mov	r0, r5
   810ee:	ea4f 4103 	mov.w	r1, r3, lsl #16
   810f2:	47a0      	blx	r4
   810f4:	2800      	cmp	r0, #0
   810f6:	d15c      	bne.n	811b2 <sd_mmc_init_read_blocks+0x126>
   810f8:	e037      	b.n	8116a <sd_mmc_init_read_blocks+0xde>
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   810fa:	ea4f 214b 	mov.w	r1, fp, lsl #9
   810fe:	e000      	b.n	81102 <sd_mmc_init_read_blocks+0x76>
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
   81100:	4659      	mov	r1, fp
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   81102:	f04f 0301 	mov.w	r3, #1
   81106:	9300      	str	r3, [sp, #0]
   81108:	f44f 7200 	mov.w	r2, #512	; 0x200
   8110c:	4653      	mov	r3, sl
   8110e:	f641 14e5 	movw	r4, #6629	; 0x19e5
   81112:	f2c0 0408 	movt	r4, #8
   81116:	47a0      	blx	r4
   81118:	b938      	cbnz	r0, 8112a <sd_mmc_init_read_blocks+0x9e>
		sd_mmc_deselect_slot();
   8111a:	f240 2129 	movw	r1, #553	; 0x229
   8111e:	f2c0 0108 	movt	r1, #8
   81122:	4788      	blx	r1
		return SD_MMC_ERR_COMM;
   81124:	f04f 0905 	mov.w	r9, #5
   81128:	e03f      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
   8112a:	f641 107d 	movw	r0, #6525	; 0x197d
   8112e:	f2c0 0008 	movt	r0, #8
   81132:	4780      	blx	r0
		if (resp & CARD_STATUS_ERR_RD_WR) {
   81134:	f04f 0100 	mov.w	r1, #0
   81138:	f2ce 4158 	movt	r1, #58456	; 0xe458
   8113c:	4001      	ands	r1, r0
   8113e:	b139      	cbz	r1, 81150 <sd_mmc_init_read_blocks+0xc4>
			sd_mmc_debug("%s: Read blocks %02d resp32 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
   81140:	f240 2029 	movw	r0, #553	; 0x229
   81144:	f2c0 0008 	movt	r0, #8
   81148:	4780      	blx	r0
			return SD_MMC_ERR_COMM;
   8114a:	f04f 0905 	mov.w	r9, #5
   8114e:	e02c      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   81150:	f640 22a4 	movw	r2, #2724	; 0xaa4
   81154:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81158:	f8a2 a000 	strh.w	sl, [r2]
	sd_mmc_nb_block_to_tranfer = nb_block;
   8115c:	f640 239c 	movw	r3, #2716	; 0xa9c
   81160:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81164:	f8a3 a000 	strh.w	sl, [r3]
	return SD_MMC_OK;
   81168:	e01f      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
		return sd_mmc_err;
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
		sd_mmc_deselect_slot();
   8116a:	f240 2229 	movw	r2, #553	; 0x229
   8116e:	f2c0 0208 	movt	r2, #8
   81172:	4790      	blx	r2
		return SD_MMC_ERR_COMM;
   81174:	f04f 0905 	mov.w	r9, #5
   81178:	e017      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   8117a:	f241 1011 	movw	r0, #4369	; 0x1111
   8117e:	f2c0 0008 	movt	r0, #8
   81182:	f241 1412 	movw	r4, #4370	; 0x1112
   81186:	f2c0 0410 	movt	r4, #16
   8118a:	f1ba 0f01 	cmp.w	sl, #1
   8118e:	bf88      	it	hi
   81190:	4620      	movhi	r0, r4
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   81192:	f640 22a0 	movw	r2, #2720	; 0xaa0
   81196:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8119a:	6813      	ldr	r3, [r2, #0]
   8119c:	7bd9      	ldrb	r1, [r3, #15]
   8119e:	f001 0408 	and.w	r4, r1, #8
   811a2:	b2e2      	uxtb	r2, r4
   811a4:	2a00      	cmp	r2, #0
   811a6:	d1ab      	bne.n	81100 <sd_mmc_init_read_blocks+0x74>
   811a8:	e7a7      	b.n	810fa <sd_mmc_init_read_blocks+0x6e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
   811aa:	4648      	mov	r0, r9
   811ac:	b003      	add	sp, #12
   811ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   811b2:	47b8      	blx	r7
   811b4:	f410 7f80 	tst.w	r0, #256	; 0x100
   811b8:	d1df      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   811ba:	6830      	ldr	r0, [r6, #0]
   811bc:	8981      	ldrh	r1, [r0, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   811be:	4628      	mov	r0, r5
   811c0:	ea4f 4101 	mov.w	r1, r1, lsl #16
   811c4:	47a0      	blx	r4
   811c6:	2800      	cmp	r0, #0
   811c8:	d0cf      	beq.n	8116a <sd_mmc_init_read_blocks+0xde>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   811ca:	47b8      	blx	r7
   811cc:	f410 7f80 	tst.w	r0, #256	; 0x100
   811d0:	d1d3      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
				break;
			}
		}
		if (nec_timeout-- == 0) {
   811d2:	f1b8 0802 	subs.w	r8, r8, #2
   811d6:	f47f af79 	bne.w	810cc <sd_mmc_init_read_blocks+0x40>
   811da:	e7c6      	b.n	8116a <sd_mmc_init_read_blocks+0xde>

000811dc <sd_mmc_start_read_blocks>:
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   811dc:	b510      	push	{r4, lr}
   811de:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   811e0:	f641 3351 	movw	r3, #6993	; 0x1b51
   811e4:	f2c0 0308 	movt	r3, #8
   811e8:	4798      	blx	r3
   811ea:	b948      	cbnz	r0, 81200 <sd_mmc_start_read_blocks+0x24>
		sd_mmc_nb_block_remaining = 0;
   811ec:	f640 21a4 	movw	r1, #2724	; 0xaa4
   811f0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   811f4:	f04f 0300 	mov.w	r3, #0
   811f8:	800b      	strh	r3, [r1, #0]
		return SD_MMC_ERR_COMM;
   811fa:	f04f 0005 	mov.w	r0, #5
   811fe:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
   81200:	f640 20a4 	movw	r0, #2724	; 0xaa4
   81204:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81208:	8802      	ldrh	r2, [r0, #0]
   8120a:	1b14      	subs	r4, r2, r4
   8120c:	8004      	strh	r4, [r0, #0]
	return SD_MMC_OK;
   8120e:	f04f 0000 	mov.w	r0, #0
}
   81212:	bd10      	pop	{r4, pc}

00081214 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(void)
{
   81214:	b508      	push	{r3, lr}
	if (!driver_wait_end_of_read_blocks()) {
   81216:	f641 4369 	movw	r3, #7273	; 0x1c69
   8121a:	f2c0 0308 	movt	r3, #8
   8121e:	4798      	blx	r3
   81220:	2800      	cmp	r0, #0
   81222:	d030      	beq.n	81286 <sd_mmc_wait_end_of_read_blocks+0x72>
		return SD_MMC_ERR_COMM;
	}
	if (sd_mmc_nb_block_remaining) {
   81224:	f640 20a4 	movw	r0, #2724	; 0xaa4
   81228:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8122c:	8801      	ldrh	r1, [r0, #0]
   8122e:	2900      	cmp	r1, #0
   81230:	d12c      	bne.n	8128c <sd_mmc_wait_end_of_read_blocks+0x78>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   81232:	f640 229c 	movw	r2, #2716	; 0xa9c
   81236:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8123a:	8813      	ldrh	r3, [r2, #0]
   8123c:	2b01      	cmp	r3, #1
   8123e:	d107      	bne.n	81250 <sd_mmc_wait_end_of_read_blocks+0x3c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   81240:	f240 2129 	movw	r1, #553	; 0x229
   81244:	f2c0 0108 	movt	r1, #8
   81248:	4788      	blx	r1
		return SD_MMC_OK;
   8124a:	f04f 0000 	mov.w	r0, #0
   8124e:	bd08      	pop	{r3, pc}
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   81250:	f243 100c 	movw	r0, #12556	; 0x310c
   81254:	f04f 0100 	mov.w	r1, #0
   81258:	f641 1255 	movw	r2, #6485	; 0x1955
   8125c:	f2c0 0208 	movt	r2, #8
   81260:	4790      	blx	r2
   81262:	b940      	cbnz	r0, 81276 <sd_mmc_wait_end_of_read_blocks+0x62>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   81264:	f243 100c 	movw	r0, #12556	; 0x310c
   81268:	f04f 0100 	mov.w	r1, #0
   8126c:	f641 1355 	movw	r3, #6485	; 0x1955
   81270:	f2c0 0308 	movt	r3, #8
   81274:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   81276:	f240 2029 	movw	r0, #553	; 0x229
   8127a:	f2c0 0008 	movt	r0, #8
   8127e:	4780      	blx	r0
	return SD_MMC_OK;
   81280:	f04f 0000 	mov.w	r0, #0
   81284:	bd08      	pop	{r3, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(void)
{
	if (!driver_wait_end_of_read_blocks()) {
		return SD_MMC_ERR_COMM;
   81286:	f04f 0005 	mov.w	r0, #5
   8128a:	bd08      	pop	{r3, pc}
	}
	if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
   8128c:	f04f 0000 	mov.w	r0, #0
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   81290:	bd08      	pop	{r3, pc}
   81292:	bf00      	nop

00081294 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   81294:	b5f0      	push	{r4, r5, r6, r7, lr}
   81296:	b083      	sub	sp, #12
   81298:	4606      	mov	r6, r0
   8129a:	460f      	mov	r7, r1
   8129c:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   8129e:	f240 24d5 	movw	r4, #725	; 0x2d5
   812a2:	f2c0 0408 	movt	r4, #8
   812a6:	47a0      	blx	r4
	if (sd_mmc_err != SD_MMC_OK) {
   812a8:	4604      	mov	r4, r0
   812aa:	2800      	cmp	r0, #0
   812ac:	d158      	bne.n	81360 <sd_mmc_init_write_blocks+0xcc>
		return sd_mmc_err;
	}
	if (sd_mmc_is_write_protected(slot)) {
   812ae:	4630      	mov	r0, r6
   812b0:	f241 0385 	movw	r3, #4229	; 0x1085
   812b4:	f2c0 0308 	movt	r3, #8
   812b8:	4798      	blx	r3
   812ba:	b138      	cbz	r0, 812cc <sd_mmc_init_write_blocks+0x38>
		sd_mmc_deselect_slot();
   812bc:	f240 2329 	movw	r3, #553	; 0x229
   812c0:	f2c0 0308 	movt	r3, #8
   812c4:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   812c6:	f04f 0407 	mov.w	r4, #7
   812ca:	e049      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   812cc:	f249 1018 	movw	r0, #37144	; 0x9118
   812d0:	f2c0 0008 	movt	r0, #8
   812d4:	f249 1119 	movw	r1, #37145	; 0x9119
   812d8:	f2c0 0110 	movt	r1, #16
   812dc:	2d01      	cmp	r5, #1
   812de:	bf88      	it	hi
   812e0:	4608      	movhi	r0, r1
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   812e2:	f640 22a0 	movw	r2, #2720	; 0xaa0
   812e6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   812ea:	6816      	ldr	r6, [r2, #0]
   812ec:	7bf3      	ldrb	r3, [r6, #15]
   812ee:	f003 0108 	and.w	r1, r3, #8
   812f2:	b2ca      	uxtb	r2, r1
   812f4:	b912      	cbnz	r2, 812fc <sd_mmc_init_write_blocks+0x68>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   812f6:	ea4f 2147 	mov.w	r1, r7, lsl #9
   812fa:	e000      	b.n	812fe <sd_mmc_init_write_blocks+0x6a>
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
   812fc:	4639      	mov	r1, r7
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   812fe:	f04f 0601 	mov.w	r6, #1
   81302:	9600      	str	r6, [sp, #0]
   81304:	f44f 7200 	mov.w	r2, #512	; 0x200
   81308:	462b      	mov	r3, r5
   8130a:	f641 16e5 	movw	r6, #6629	; 0x19e5
   8130e:	f2c0 0608 	movt	r6, #8
   81312:	47b0      	blx	r6
   81314:	b938      	cbnz	r0, 81326 <sd_mmc_init_write_blocks+0x92>
		sd_mmc_deselect_slot();
   81316:	f240 2029 	movw	r0, #553	; 0x229
   8131a:	f2c0 0008 	movt	r0, #8
   8131e:	4780      	blx	r0
		return SD_MMC_ERR_COMM;
   81320:	f04f 0405 	mov.w	r4, #5
   81324:	e01c      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
   81326:	f641 107d 	movw	r0, #6525	; 0x197d
   8132a:	f2c0 0008 	movt	r0, #8
   8132e:	4780      	blx	r0
		if (resp & CARD_STATUS_ERR_RD_WR) {
   81330:	f04f 0300 	mov.w	r3, #0
   81334:	f2ce 4358 	movt	r3, #58456	; 0xe458
   81338:	4003      	ands	r3, r0
   8133a:	b13b      	cbz	r3, 8134c <sd_mmc_init_write_blocks+0xb8>
			sd_mmc_debug("%s: Write blocks %02d r1 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
   8133c:	f240 2429 	movw	r4, #553	; 0x229
   81340:	f2c0 0408 	movt	r4, #8
   81344:	47a0      	blx	r4
			return SD_MMC_ERR_COMM;
   81346:	f04f 0405 	mov.w	r4, #5
   8134a:	e009      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   8134c:	f640 21a4 	movw	r1, #2724	; 0xaa4
   81350:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81354:	800d      	strh	r5, [r1, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   81356:	f640 229c 	movw	r2, #2716	; 0xa9c
   8135a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8135e:	8015      	strh	r5, [r2, #0]
	return SD_MMC_OK;
}
   81360:	4620      	mov	r0, r4
   81362:	b003      	add	sp, #12
   81364:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81366:	bf00      	nop

00081368 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   81368:	b510      	push	{r4, lr}
   8136a:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   8136c:	f641 43e1 	movw	r3, #7393	; 0x1ce1
   81370:	f2c0 0308 	movt	r3, #8
   81374:	4798      	blx	r3
   81376:	b948      	cbnz	r0, 8138c <sd_mmc_start_write_blocks+0x24>
		sd_mmc_nb_block_remaining = 0;
   81378:	f640 21a4 	movw	r1, #2724	; 0xaa4
   8137c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81380:	f04f 0300 	mov.w	r3, #0
   81384:	800b      	strh	r3, [r1, #0]
		return SD_MMC_ERR_COMM;
   81386:	f04f 0005 	mov.w	r0, #5
   8138a:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
   8138c:	f640 20a4 	movw	r0, #2724	; 0xaa4
   81390:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81394:	8802      	ldrh	r2, [r0, #0]
   81396:	1b14      	subs	r4, r2, r4
   81398:	8004      	strh	r4, [r0, #0]
	return SD_MMC_OK;
   8139a:	f04f 0000 	mov.w	r0, #0
}
   8139e:	bd10      	pop	{r4, pc}

000813a0 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(void)
{
   813a0:	b508      	push	{r3, lr}
	if (!driver_wait_end_of_write_blocks()) {
   813a2:	f641 53d9 	movw	r3, #7641	; 0x1dd9
   813a6:	f2c0 0308 	movt	r3, #8
   813aa:	4798      	blx	r3
   813ac:	2800      	cmp	r0, #0
   813ae:	d02f      	beq.n	81410 <sd_mmc_wait_end_of_write_blocks+0x70>
		return SD_MMC_ERR_COMM;
	}
	if (sd_mmc_nb_block_remaining) {
   813b0:	f640 20a4 	movw	r0, #2724	; 0xaa4
   813b4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   813b8:	8801      	ldrh	r1, [r0, #0]
   813ba:	2900      	cmp	r1, #0
   813bc:	d12b      	bne.n	81416 <sd_mmc_wait_end_of_write_blocks+0x76>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   813be:	f640 229c 	movw	r2, #2716	; 0xa9c
   813c2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   813c6:	8813      	ldrh	r3, [r2, #0]
   813c8:	2b01      	cmp	r3, #1
   813ca:	d107      	bne.n	813dc <sd_mmc_wait_end_of_write_blocks+0x3c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   813cc:	f240 2329 	movw	r3, #553	; 0x229
   813d0:	f2c0 0308 	movt	r3, #8
   813d4:	4798      	blx	r3
		return SD_MMC_OK;
   813d6:	f04f 0000 	mov.w	r0, #0
   813da:	bd08      	pop	{r3, pc}
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   813dc:	f243 100c 	movw	r0, #12556	; 0x310c
   813e0:	f04f 0100 	mov.w	r1, #0
   813e4:	f641 1255 	movw	r2, #6485	; 0x1955
   813e8:	f2c0 0208 	movt	r2, #8
   813ec:	4790      	blx	r2
   813ee:	b938      	cbnz	r0, 81400 <sd_mmc_wait_end_of_write_blocks+0x60>
			sd_mmc_deselect_slot();
   813f0:	f240 2129 	movw	r1, #553	; 0x229
   813f4:	f2c0 0108 	movt	r1, #8
   813f8:	4788      	blx	r1
			return SD_MMC_ERR_COMM;
   813fa:	f04f 0005 	mov.w	r0, #5
   813fe:	bd08      	pop	{r3, pc}
		}
	}
	sd_mmc_deselect_slot();
   81400:	f240 2029 	movw	r0, #553	; 0x229
   81404:	f2c0 0008 	movt	r0, #8
   81408:	4780      	blx	r0
	return SD_MMC_OK;
   8140a:	f04f 0000 	mov.w	r0, #0
   8140e:	bd08      	pop	{r3, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(void)
{
	if (!driver_wait_end_of_write_blocks()) {
		return SD_MMC_ERR_COMM;
   81410:	f04f 0005 	mov.w	r0, #5
   81414:	bd08      	pop	{r3, pc}
	}
	if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
   81416:	f04f 0000 	mov.w	r0, #0
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   8141a:	bd08      	pop	{r3, pc}

0008141c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   8141c:	b510      	push	{r4, lr}
   8141e:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
   81420:	f240 4395 	movw	r3, #1173	; 0x495
   81424:	f2c0 0308 	movt	r3, #8
   81428:	4798      	blx	r3
   8142a:	2801      	cmp	r0, #1
   8142c:	d003      	beq.n	81436 <sd_mmc_test_unit_ready+0x1a>
   8142e:	b128      	cbz	r0, 8143c <sd_mmc_test_unit_ready+0x20>
   81430:	2802      	cmp	r0, #2
   81432:	d120      	bne.n	81476 <sd_mmc_test_unit_ready+0x5a>
   81434:	e015      	b.n	81462 <sd_mmc_test_unit_ready+0x46>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   81436:	f04f 0003 	mov.w	r0, #3
   8143a:	bd10      	pop	{r4, pc}
Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   8143c:	f640 21a8 	movw	r1, #2728	; 0xaa8
   81440:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81444:	5d0b      	ldrb	r3, [r1, r4]
   81446:	b9cb      	cbnz	r3, 8147c <sd_mmc_test_unit_ready+0x60>
			return CTRL_NO_PRESENT;
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   81448:	4620      	mov	r0, r4
   8144a:	f241 022d 	movw	r2, #4141	; 0x102d
   8144e:	f2c0 0208 	movt	r2, #8
   81452:	4790      	blx	r2
   81454:	f000 0003 	and.w	r0, r0, #3
			return CTRL_GOOD;
   81458:	2800      	cmp	r0, #0
   8145a:	bf0c      	ite	eq
   8145c:	2002      	moveq	r0, #2
   8145e:	2000      	movne	r0, #0
   81460:	bd10      	pop	{r4, pc}

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   81462:	f640 20a8 	movw	r0, #2728	; 0xaa8
   81466:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8146a:	f04f 0200 	mov.w	r2, #0
   8146e:	5502      	strb	r2, [r0, r4]
		return CTRL_NO_PRESENT;
   81470:	f04f 0002 	mov.w	r0, #2
   81474:	bd10      	pop	{r4, pc}

	default:
		return CTRL_FAIL;
   81476:	f04f 0001 	mov.w	r0, #1
   8147a:	bd10      	pop	{r4, pc}
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
			return CTRL_NO_PRESENT;
   8147c:	f04f 0002 	mov.w	r0, #2
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
	}
}
   81480:	bd10      	pop	{r4, pc}
   81482:	bf00      	nop

00081484 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   81484:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
   81486:	f04f 0000 	mov.w	r0, #0
   8148a:	f241 431d 	movw	r3, #5149	; 0x141d
   8148e:	f2c0 0308 	movt	r3, #8
   81492:	4798      	blx	r3
}
   81494:	bd08      	pop	{r3, pc}
   81496:	bf00      	nop

00081498 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   81498:	b538      	push	{r3, r4, r5, lr}
   8149a:	4604      	mov	r4, r0
   8149c:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   8149e:	f241 0359 	movw	r3, #4185	; 0x1059
   814a2:	f2c0 0308 	movt	r3, #8
   814a6:	4798      	blx	r3
   814a8:	ea4f 0040 	mov.w	r0, r0, lsl #1
   814ac:	f100 31ff 	add.w	r1, r0, #4294967295
   814b0:	6029      	str	r1, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
   814b2:	4620      	mov	r0, r4
   814b4:	f241 421d 	movw	r2, #5149	; 0x141d
   814b8:	f2c0 0208 	movt	r2, #8
   814bc:	4790      	blx	r2
}
   814be:	bd38      	pop	{r3, r4, r5, pc}

000814c0 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   814c0:	b508      	push	{r3, lr}
   814c2:	4601      	mov	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
   814c4:	f04f 0000 	mov.w	r0, #0
   814c8:	f241 4399 	movw	r3, #5273	; 0x1499
   814cc:	f2c0 0308 	movt	r3, #8
   814d0:	4798      	blx	r3
}
   814d2:	bd08      	pop	{r3, pc}

000814d4 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   814d4:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
   814d6:	f241 0385 	movw	r3, #4229	; 0x1085
   814da:	f2c0 0308 	movt	r3, #8
   814de:	4798      	blx	r3
}
   814e0:	bd08      	pop	{r3, pc}
   814e2:	bf00      	nop

000814e4 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   814e4:	b508      	push	{r3, lr}
	return sd_mmc_wr_protect(0);
   814e6:	f04f 0000 	mov.w	r0, #0
   814ea:	f241 43d5 	movw	r3, #5333	; 0x14d5
   814ee:	f2c0 0308 	movt	r3, #8
   814f2:	4798      	blx	r3
}
   814f4:	bd08      	pop	{r3, pc}
   814f6:	bf00      	nop

000814f8 <sd_mmc_removal>:

bool sd_mmc_removal(uint8_t slot)
{
	UNUSED(slot);
	return true;
}
   814f8:	f04f 0001 	mov.w	r0, #1
   814fc:	4770      	bx	lr
   814fe:	bf00      	nop

00081500 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   81500:	b508      	push	{r3, lr}
	return sd_mmc_removal(0);
   81502:	f04f 0000 	mov.w	r0, #0
   81506:	f241 43f9 	movw	r3, #5369	; 0x14f9
   8150a:	f2c0 0308 	movt	r3, #8
   8150e:	4798      	blx	r3
}
   81510:	bd08      	pop	{r3, pc}
   81512:	bf00      	nop

00081514 <sd_mmc_usb_read_10>:

COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
   81514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81518:	4614      	mov	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
   8151a:	f241 038d 	movw	r3, #4237	; 0x108d
   8151e:	f2c0 0308 	movt	r3, #8
   81522:	4798      	blx	r3
   81524:	4601      	mov	r1, r0
   81526:	b370      	cbz	r0, 81586 <sd_mmc_usb_read_10+0x72>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   81528:	2802      	cmp	r0, #2
   8152a:	bf0c      	ite	eq
   8152c:	2002      	moveq	r0, #2
   8152e:	2001      	movne	r0, #1
   81530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (nb_step) { // Skip last step
   81534:	b144      	cbz	r4, 81548 <sd_mmc_usb_read_10+0x34>
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   81536:	f014 0f01 	tst.w	r4, #1
   8153a:	bf0c      	ite	eq
   8153c:	4638      	moveq	r0, r7
   8153e:	4640      	movne	r0, r8
   81540:	f04f 0101 	mov.w	r1, #1
   81544:	47b0      	blx	r6
   81546:	bba0      	cbnz	r0, 815b2 <sd_mmc_usb_read_10+0x9e>
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
			}
		}
		if (!b_first_step) { // Skip first step
   81548:	b985      	cbnz	r5, 8156c <sd_mmc_usb_read_10+0x58>
			// RAM -> USB
			if (!udi_msc_trans_block(true,
   8154a:	f014 0f01 	tst.w	r4, #1
   8154e:	bf0c      	ite	eq
   81550:	4641      	moveq	r1, r8
   81552:	4639      	movne	r1, r7
   81554:	f04f 0001 	mov.w	r0, #1
   81558:	f44f 7200 	mov.w	r2, #512	; 0x200
   8155c:	f04f 0300 	mov.w	r3, #0
   81560:	f645 4549 	movw	r5, #23625	; 0x5c49
   81564:	f2c0 0508 	movt	r5, #8
   81568:	47a8      	blx	r5
   8156a:	b330      	cbz	r0, 815ba <sd_mmc_usb_read_10+0xa6>
				return CTRL_FAIL;
			}
		} else {
			b_first_step = false;
		}
		if (nb_step) { // Skip last step
   8156c:	b12c      	cbz	r4, 8157a <sd_mmc_usb_read_10+0x66>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks()) {
   8156e:	f241 2015 	movw	r0, #4629	; 0x1215
   81572:	f2c0 0008 	movt	r0, #8
   81576:	4780      	blx	r0
   81578:	bb18      	cbnz	r0, 815c2 <sd_mmc_usb_read_10+0xae>
   8157a:	f104 34ff 	add.w	r4, r4, #4294967295
   8157e:	b2a4      	uxth	r4, r4
   81580:	f04f 0500 	mov.w	r5, #0
   81584:	e00d      	b.n	815a2 <sd_mmc_usb_read_10+0x8e>
COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
	bool b_first_step = true;
   81586:	f04f 0501 	mov.w	r5, #1
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (nb_step) { // Skip last step
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   8158a:	f241 16dd 	movw	r6, #4573	; 0x11dd
   8158e:	f2c0 0608 	movt	r6, #8
   81592:	f241 48b4 	movw	r8, #5300	; 0x14b4
   81596:	f2c2 0807 	movt	r8, #8199	; 0x2007
   8159a:	f241 67b4 	movw	r7, #5812	; 0x16b4
   8159e:	f2c2 0707 	movt	r7, #8199	; 0x2007
	default:
		return CTRL_FAIL;
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
   815a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   815a6:	4294      	cmp	r4, r2
   815a8:	d1c4      	bne.n	81534 <sd_mmc_usb_read_10+0x20>
				return CTRL_FAIL;
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
   815aa:	f04f 0000 	mov.w	r0, #0
   815ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (nb_step--) {
		if (nb_step) { // Skip last step
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
   815b2:	f04f 0001 	mov.w	r0, #1
   815b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!udi_msc_trans_block(true,
					((nb_step % 2) == 0) ?
					sector_buf_1 : sector_buf_0,
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
   815ba:	f04f 0001 	mov.w	r0, #1
   815be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else {
			b_first_step = false;
		}
		if (nb_step) { // Skip last step
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks()) {
				return CTRL_FAIL;
   815c2:	f04f 0001 	mov.w	r0, #1
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
}
   815c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   815ca:	bf00      	nop

000815cc <sd_mmc_usb_read_10_0>:

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
   815cc:	b508      	push	{r3, lr}
   815ce:	4603      	mov	r3, r0
   815d0:	460a      	mov	r2, r1
	return sd_mmc_usb_read_10(0, addr, nb_sector);
   815d2:	f04f 0000 	mov.w	r0, #0
   815d6:	4619      	mov	r1, r3
   815d8:	f241 5315 	movw	r3, #5397	; 0x1515
   815dc:	f2c0 0308 	movt	r3, #8
   815e0:	4798      	blx	r3
}
   815e2:	bd08      	pop	{r3, pc}

000815e4 <sd_mmc_usb_write_10>:
{
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
   815e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   815e8:	4614      	mov	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
   815ea:	f241 2395 	movw	r3, #4757	; 0x1295
   815ee:	f2c0 0308 	movt	r3, #8
   815f2:	4798      	blx	r3
   815f4:	4601      	mov	r1, r0
   815f6:	b368      	cbz	r0, 81654 <sd_mmc_usb_write_10+0x70>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   815f8:	2802      	cmp	r0, #2
   815fa:	bf0c      	ite	eq
   815fc:	2002      	moveq	r0, #2
   815fe:	2001      	movne	r0, #1
   81600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
   81604:	b945      	cbnz	r5, 81618 <sd_mmc_usb_write_10+0x34>
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   81606:	f014 0f01 	tst.w	r4, #1
   8160a:	bf0c      	ite	eq
   8160c:	4638      	moveq	r0, r7
   8160e:	4640      	movne	r0, r8
   81610:	f04f 0101 	mov.w	r1, #1
   81614:	47b0      	blx	r6
   81616:	bb98      	cbnz	r0, 81680 <sd_mmc_usb_write_10+0x9c>
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
			}
		}
		if (nb_step) { // Skip last step
   81618:	b17c      	cbz	r4, 8163a <sd_mmc_usb_write_10+0x56>
			// USB -> RAM
			if (!udi_msc_trans_block(false,
   8161a:	f014 0f01 	tst.w	r4, #1
   8161e:	bf0c      	ite	eq
   81620:	4641      	moveq	r1, r8
   81622:	4639      	movne	r1, r7
   81624:	f04f 0000 	mov.w	r0, #0
   81628:	f44f 7200 	mov.w	r2, #512	; 0x200
   8162c:	4603      	mov	r3, r0
   8162e:	f645 4c49 	movw	ip, #23625	; 0x5c49
   81632:	f2c0 0c08 	movt	ip, #8
   81636:	47e0      	blx	ip
   81638:	b330      	cbz	r0, 81688 <sd_mmc_usb_write_10+0xa4>
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
			}
		}
		if (!b_first_step) { // Skip first step
   8163a:	b92d      	cbnz	r5, 81648 <sd_mmc_usb_write_10+0x64>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks()) {
   8163c:	f241 30a1 	movw	r0, #5025	; 0x13a1
   81640:	f2c0 0008 	movt	r0, #8
   81644:	4780      	blx	r0
   81646:	bb18      	cbnz	r0, 81690 <sd_mmc_usb_write_10+0xac>
   81648:	f104 34ff 	add.w	r4, r4, #4294967295
   8164c:	b2a4      	uxth	r4, r4
   8164e:	f04f 0500 	mov.w	r5, #0
   81652:	e00d      	b.n	81670 <sd_mmc_usb_write_10+0x8c>
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
	bool b_first_step = true;
   81654:	f04f 0501 	mov.w	r5, #1
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   81658:	f241 3669 	movw	r6, #4969	; 0x1369
   8165c:	f2c0 0608 	movt	r6, #8
   81660:	f241 48b4 	movw	r8, #5300	; 0x14b4
   81664:	f2c2 0807 	movt	r8, #8199	; 0x2007
   81668:	f241 67b4 	movw	r7, #5812	; 0x16b4
   8166c:	f2c2 0707 	movt	r7, #8199	; 0x2007
	default:
		return CTRL_FAIL;
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
   81670:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81674:	4294      	cmp	r4, r2
   81676:	d1c5      	bne.n	81604 <sd_mmc_usb_write_10+0x20>
			}
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
   81678:	f04f 0000 	mov.w	r0, #0
   8167c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
   81680:	f04f 0001 	mov.w	r0, #1
   81684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!udi_msc_trans_block(false,
					((nb_step % 2) == 0) ?
					sector_buf_1 : sector_buf_0,
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
   81688:	f04f 0001 	mov.w	r0, #1
   8168c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
		}
		if (!b_first_step) { // Skip first step
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks()) {
				return CTRL_FAIL;
   81690:	f04f 0001 	mov.w	r0, #1
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
}
   81694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00081698 <sd_mmc_usb_write_10_0>:

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
   81698:	b508      	push	{r3, lr}
   8169a:	4603      	mov	r3, r0
   8169c:	460a      	mov	r2, r1
	return sd_mmc_usb_write_10(0, addr, nb_sector);
   8169e:	f04f 0000 	mov.w	r0, #0
   816a2:	4619      	mov	r1, r3
   816a4:	f241 53e5 	movw	r3, #5605	; 0x15e5
   816a8:	f2c0 0308 	movt	r3, #8
   816ac:	4798      	blx	r3
}
   816ae:	bd08      	pop	{r3, pc}

000816b0 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   816b0:	b510      	push	{r4, lr}
   816b2:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   816b4:	f04f 0201 	mov.w	r2, #1
   816b8:	f241 038d 	movw	r3, #4237	; 0x108d
   816bc:	f2c0 0308 	movt	r3, #8
   816c0:	4798      	blx	r3
   816c2:	b120      	cbz	r0, 816ce <sd_mmc_mem_2_ram+0x1e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   816c4:	2802      	cmp	r0, #2
   816c6:	bf0c      	ite	eq
   816c8:	2002      	moveq	r0, #2
   816ca:	2001      	movne	r0, #1
   816cc:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   816ce:	4620      	mov	r0, r4
   816d0:	f04f 0101 	mov.w	r1, #1
   816d4:	f241 12dd 	movw	r2, #4573	; 0x11dd
   816d8:	f2c0 0208 	movt	r2, #8
   816dc:	4790      	blx	r2
   816de:	b940      	cbnz	r0, 816f2 <sd_mmc_mem_2_ram+0x42>
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks()) {
   816e0:	f241 2015 	movw	r0, #4629	; 0x1215
   816e4:	f2c0 0008 	movt	r0, #8
   816e8:	4780      	blx	r0
{
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   816ea:	3000      	adds	r0, #0
   816ec:	bf18      	it	ne
   816ee:	2001      	movne	r0, #1
   816f0:	bd10      	pop	{r4, pc}
	default:
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
		return CTRL_FAIL;
   816f2:	f04f 0001 	mov.w	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks()) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
   816f6:	bd10      	pop	{r4, pc}

000816f8 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   816f8:	b508      	push	{r3, lr}
   816fa:	4603      	mov	r3, r0
   816fc:	460a      	mov	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
   816fe:	f04f 0000 	mov.w	r0, #0
   81702:	4619      	mov	r1, r3
   81704:	f241 63b1 	movw	r3, #5809	; 0x16b1
   81708:	f2c0 0308 	movt	r3, #8
   8170c:	4798      	blx	r3
}
   8170e:	bd08      	pop	{r3, pc}

00081710 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   81710:	b510      	push	{r4, lr}
   81712:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   81714:	f04f 0201 	mov.w	r2, #1
   81718:	f241 2395 	movw	r3, #4757	; 0x1295
   8171c:	f2c0 0308 	movt	r3, #8
   81720:	4798      	blx	r3
   81722:	b120      	cbz	r0, 8172e <sd_mmc_ram_2_mem+0x1e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   81724:	2802      	cmp	r0, #2
   81726:	bf0c      	ite	eq
   81728:	2002      	moveq	r0, #2
   8172a:	2001      	movne	r0, #1
   8172c:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   8172e:	4620      	mov	r0, r4
   81730:	f04f 0101 	mov.w	r1, #1
   81734:	f241 3269 	movw	r2, #4969	; 0x1369
   81738:	f2c0 0208 	movt	r2, #8
   8173c:	4790      	blx	r2
   8173e:	b940      	cbnz	r0, 81752 <sd_mmc_ram_2_mem+0x42>
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks()) {
   81740:	f241 30a1 	movw	r0, #5025	; 0x13a1
   81744:	f2c0 0008 	movt	r0, #8
   81748:	4780      	blx	r0
{
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   8174a:	3000      	adds	r0, #0
   8174c:	bf18      	it	ne
   8174e:	2001      	movne	r0, #1
   81750:	bd10      	pop	{r4, pc}
	default:
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
		return CTRL_FAIL;
   81752:	f04f 0001 	mov.w	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks()) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
   81756:	bd10      	pop	{r4, pc}

00081758 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   81758:	b508      	push	{r3, lr}
   8175a:	4603      	mov	r3, r0
   8175c:	460a      	mov	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
   8175e:	f04f 0000 	mov.w	r0, #0
   81762:	4619      	mov	r1, r3
   81764:	f241 7311 	movw	r3, #5905	; 0x1711
   81768:	f2c0 0308 	movt	r3, #8
   8176c:	4798      	blx	r3
}
   8176e:	bd08      	pop	{r3, pc}

00081770 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
   81770:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
   81772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   81776:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
   81778:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
   8177a:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
   8177c:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
   8177e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
   81780:	f04f 0680 	mov.w	r6, #128	; 0x80
   81784:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
   81786:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
   81788:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
   8178a:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
   8178c:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
   8178e:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
   81790:	f04f 0000 	mov.w	r0, #0
   81794:	6518      	str	r0, [r3, #80]	; 0x50
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
   81796:	f04f 0105 	mov.w	r1, #5
   8179a:	6019      	str	r1, [r3, #0]
}
   8179c:	bc70      	pop	{r4, r5, r6}
   8179e:	4770      	bx	lr

000817a0 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
   817a0:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
   817a2:	f001 033f 	and.w	r3, r1, #63	; 0x3f
   817a6:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
   817a8:	f411 7f80 	tst.w	r1, #256	; 0x100
   817ac:	d00c      	beq.n	817c8 <hsmci_send_cmd_execute+0x28>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
   817ae:	f411 6f00 	tst.w	r1, #2048	; 0x800
   817b2:	d002      	beq.n	817ba <hsmci_send_cmd_execute+0x1a>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
   817b4:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
   817b8:	e006      	b.n	817c8 <hsmci_send_cmd_execute+0x28>
		} else if (cmd & SDMMC_RESP_BUSY) {
   817ba:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
   817be:	bf14      	ite	ne
   817c0:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
   817c4:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
   817c8:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
   817cc:	bf18      	it	ne
   817ce:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
   817d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   817d6:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
   817d8:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
   817da:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
   817dc:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
   817e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
   817e2:	b152      	cbz	r2, 817fa <hsmci_send_cmd_execute+0x5a>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
   817e4:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
   817e8:	d012      	beq.n	81810 <hsmci_send_cmd_execute+0x70>
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
   817ea:	f241 7271 	movw	r2, #6001	; 0x1771
   817ee:	f2c0 0208 	movt	r2, #8
   817f2:	4790      	blx	r2
				return false;
   817f4:	f04f 0000 	mov.w	r0, #0
   817f8:	bd08      	pop	{r3, pc}
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
   817fa:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
   817fe:	d007      	beq.n	81810 <hsmci_send_cmd_execute+0x70>
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
   81800:	f241 7171 	movw	r1, #6001	; 0x1771
   81804:	f2c0 0108 	movt	r1, #8
   81808:	4788      	blx	r1
				return false;
   8180a:	f04f 0000 	mov.w	r0, #0
   8180e:	bd08      	pop	{r3, pc}
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
   81810:	f013 0f01 	tst.w	r3, #1
   81814:	d0e4      	beq.n	817e0 <hsmci_send_cmd_execute+0x40>

	if (cmd & SDMMC_RESP_BUSY) {
   81816:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   8181a:	d119      	bne.n	81850 <hsmci_send_cmd_execute+0xb0>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
   8181c:	f04f 0001 	mov.w	r0, #1
   81820:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 1000000;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
   81822:	6c08      	ldr	r0, [r1, #64]	; 0x40
   81824:	f103 33ff 	add.w	r3, r3, #4294967295
		if (busy_wait-- == 0) {
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
			return false;
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
   81828:	f000 0230 	and.w	r2, r0, #48	; 0x30
   8182c:	2a20      	cmp	r2, #32
   8182e:	d119      	bne.n	81864 <hsmci_send_cmd_execute+0xc4>
   81830:	e00b      	b.n	8184a <hsmci_send_cmd_execute+0xaa>

	do {
		sr = HSMCI->HSMCI_SR;
		if (busy_wait-- == 0) {
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
   81832:	f241 7171 	movw	r1, #6001	; 0x1771
   81836:	f2c0 0108 	movt	r1, #8
   8183a:	4788      	blx	r1
			return false;
   8183c:	f04f 0000 	mov.w	r0, #0
   81840:	bd08      	pop	{r3, pc}
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
   81842:	f000 0230 	and.w	r2, r0, #48	; 0x30
   81846:	2a20      	cmp	r2, #32
   81848:	d1eb      	bne.n	81822 <hsmci_send_cmd_execute+0x82>
	return true;
   8184a:	f04f 0001 	mov.w	r0, #1
   8184e:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 1000000;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
   81850:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   81854:	6c00      	ldr	r0, [r0, #64]	; 0x40
   81856:	f244 2340 	movw	r3, #16960	; 0x4240
   8185a:	f2c0 030f 	movt	r3, #15
   8185e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   81862:	e7ee      	b.n	81842 <hsmci_send_cmd_execute+0xa2>
   81864:	6c08      	ldr	r0, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
   81866:	3b01      	subs	r3, #1
   81868:	d1eb      	bne.n	81842 <hsmci_send_cmd_execute+0xa2>
   8186a:	e7e2      	b.n	81832 <hsmci_send_cmd_execute+0x92>

0008186c <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
   8186c:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
   8186e:	f04f 0015 	mov.w	r0, #21
   81872:	f646 5475 	movw	r4, #28021	; 0x6d75
   81876:	f2c0 0408 	movt	r4, #8
   8187a:	47a0      	blx	r4
#ifdef HSMCI_SR_DMADONE
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_DMAC);
   8187c:	f04f 0027 	mov.w	r0, #39	; 0x27
   81880:	47a0      	blx	r4
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
   81882:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   81886:	f04f 0272 	mov.w	r2, #114	; 0x72
   8188a:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
   8188c:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
   8188e:	f04f 0011 	mov.w	r0, #17
   81892:	6558      	str	r0, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
   81894:	f44f 61e0 	mov.w	r1, #1792	; 0x700
   81898:	6059      	str	r1, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
   8189a:	f04f 0205 	mov.w	r2, #5
   8189e:	601a      	str	r2, [r3, #0]
   818a0:	bd10      	pop	{r4, pc}
   818a2:	bf00      	nop

000818a4 <hsmci_get_bus_width>:
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
   818a4:	2800      	cmp	r0, #0
   818a6:	bf0c      	ite	eq
   818a8:	2004      	moveq	r0, #4
   818aa:	2000      	movne	r0, #0
   818ac:	4770      	bx	lr
   818ae:	bf00      	nop

000818b0 <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
   818b0:	f04f 0001 	mov.w	r0, #1
   818b4:	4770      	bx	lr
   818b6:	bf00      	nop

000818b8 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
   818b8:	b133      	cbz	r3, 818c8 <hsmci_select_device+0x10>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
   818ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   818be:	6d58      	ldr	r0, [r3, #84]	; 0x54
   818c0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   818c4:	6558      	str	r0, [r3, #84]	; 0x54
   818c6:	e005      	b.n	818d4 <hsmci_select_device+0x1c>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
   818c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   818cc:	6d58      	ldr	r0, [r3, #84]	; 0x54
   818ce:	f420 7080 	bic.w	r0, r0, #256	; 0x100
   818d2:	6558      	str	r0, [r3, #84]	; 0x54
{
	uint32_t clkdiv;
	uint32_t rest;

	// Speed = MCK clock / (2 * (CLKDIV + 1))
	if (speed > 0) {
   818d4:	b181      	cbz	r1, 818f8 <hsmci_select_device+0x40>
		clkdiv = mck / (2 * speed);
   818d6:	ea4f 0141 	mov.w	r1, r1, lsl #1
   818da:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
   818de:	f2c0 5301 	movt	r3, #1281	; 0x501
   818e2:	fbb3 f0f1 	udiv	r0, r3, r1
		rest = mck % (2 * speed);
   818e6:	fb01 3110 	mls	r1, r1, r0, r3
		if (rest > 0) {
   818ea:	b109      	cbz	r1, 818f0 <hsmci_select_device+0x38>
			// Ensure that the card speed not be higher than expected.
			clkdiv++;
   818ec:	f100 0001 	add.w	r0, r0, #1
		}
		if (clkdiv > 0) {
   818f0:	b120      	cbz	r0, 818fc <hsmci_select_device+0x44>
			clkdiv -= 1;
   818f2:	f100 30ff 	add.w	r0, r0, #4294967295
   818f6:	e001      	b.n	818fc <hsmci_select_device+0x44>
		}
	} else {
		clkdiv = 0;
   818f8:	f04f 0000 	mov.w	r0, #0
	}
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
   818fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   81900:	6859      	ldr	r1, [r3, #4]
   81902:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   81906:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
   81908:	6859      	ldr	r1, [r3, #4]
   8190a:	b2c0      	uxtb	r0, r0
   8190c:	4308      	orrs	r0, r1
   8190e:	6058      	str	r0, [r3, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
   81910:	2a04      	cmp	r2, #4
   81912:	d004      	beq.n	8191e <hsmci_select_device+0x66>
}

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
   81914:	2a08      	cmp	r2, #8
   81916:	bf0c      	ite	eq
   81918:	22c0      	moveq	r2, #192	; 0xc0
   8191a:	2200      	movne	r2, #0
   8191c:	e001      	b.n	81922 <hsmci_select_device+0x6a>
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
		break;

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
   8191e:	f04f 0280 	mov.w	r2, #128	; 0x80
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
   81922:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   81926:	60da      	str	r2, [r3, #12]
   81928:	4770      	bx	lr
   8192a:	bf00      	nop

0008192c <hsmci_deselect_device>:
}

void hsmci_deselect_device(uint8_t slot)
{
   8192c:	4770      	bx	lr
   8192e:	bf00      	nop

00081930 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
   81930:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   81934:	685a      	ldr	r2, [r3, #4]
   81936:	f422 5060 	bic.w	r0, r2, #14336	; 0x3800
   8193a:	6058      	str	r0, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
   8193c:	f04f 0100 	mov.w	r1, #0
   81940:	6119      	str	r1, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
   81942:	f44f 6210 	mov.w	r2, #2304	; 0x900
   81946:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
   81948:	4618      	mov	r0, r3
   8194a:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8194c:	f013 0f01 	tst.w	r3, #1
   81950:	d0fb      	beq.n	8194a <hsmci_send_clock+0x1a>
}
   81952:	4770      	bx	lr

00081954 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   81954:	b510      	push	{r4, lr}
   81956:	4604      	mov	r4, r0
   81958:	460a      	mov	r2, r1
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
   8195a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8195e:	6859      	ldr	r1, [r3, #4]
   81960:	f421 5060 	bic.w	r0, r1, #14336	; 0x3800
   81964:	6058      	str	r0, [r3, #4]
#ifdef HSMCI_SR_DMADONE
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
   81966:	f04f 0000 	mov.w	r0, #0
   8196a:	6518      	str	r0, [r3, #80]	; 0x50
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
	HSMCI->HSMCI_BLKR = 0;
   8196c:	6198      	str	r0, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
   8196e:	4621      	mov	r1, r4
   81970:	f241 73a1 	movw	r3, #6049	; 0x17a1
   81974:	f2c0 0308 	movt	r3, #8
   81978:	4798      	blx	r3
}
   8197a:	bd10      	pop	{r4, pc}

0008197c <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
   8197c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   81980:	6a18      	ldr	r0, [r3, #32]
}
   81982:	4770      	bx	lr

00081984 <hsmci_get_response_128>:
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   81984:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   81988:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   8198a:	ea4f 6112 	mov.w	r1, r2, lsr #24
   8198e:	7001      	strb	r1, [r0, #0]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   81990:	ea4f 4112 	mov.w	r1, r2, lsr #16
   81994:	7041      	strb	r1, [r0, #1]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   81996:	ea4f 2112 	mov.w	r1, r2, lsr #8
   8199a:	7081      	strb	r1, [r0, #2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   8199c:	70c2      	strb	r2, [r0, #3]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   8199e:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   819a0:	ea4f 6112 	mov.w	r1, r2, lsr #24
   819a4:	7101      	strb	r1, [r0, #4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   819a6:	ea4f 4112 	mov.w	r1, r2, lsr #16
   819aa:	7141      	strb	r1, [r0, #5]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   819ac:	ea4f 2112 	mov.w	r1, r2, lsr #8
   819b0:	7181      	strb	r1, [r0, #6]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   819b2:	71c2      	strb	r2, [r0, #7]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   819b4:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   819b6:	ea4f 6112 	mov.w	r1, r2, lsr #24
   819ba:	7201      	strb	r1, [r0, #8]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   819bc:	ea4f 4112 	mov.w	r1, r2, lsr #16
   819c0:	7241      	strb	r1, [r0, #9]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   819c2:	ea4f 2112 	mov.w	r1, r2, lsr #8
   819c6:	7281      	strb	r1, [r0, #10]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   819c8:	72c2      	strb	r2, [r0, #11]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   819ca:	6a1b      	ldr	r3, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   819cc:	ea4f 6213 	mov.w	r2, r3, lsr #24
   819d0:	7302      	strb	r2, [r0, #12]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   819d2:	ea4f 4113 	mov.w	r1, r3, lsr #16
   819d6:	7341      	strb	r1, [r0, #13]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   819d8:	ea4f 2213 	mov.w	r2, r3, lsr #8
   819dc:	7382      	strb	r2, [r0, #14]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   819de:	73c3      	strb	r3, [r0, #15]
   819e0:	4770      	bx	lr
   819e2:	bf00      	nop

000819e4 <hsmci_adtc_start>:
		response++;
	}
}

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
   819e4:	b570      	push	{r4, r5, r6, lr}
   819e6:	4604      	mov	r4, r0
   819e8:	460d      	mov	r5, r1
	uint32_t cmdr;

#ifdef HSMCI_SR_DMADONE
	if (access_block) {
   819ea:	f89d 1010 	ldrb.w	r1, [sp, #16]
   819ee:	b129      	cbz	r1, 819fc <hsmci_adtc_start+0x18>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
   819f0:	f44f 7080 	mov.w	r0, #256	; 0x100
   819f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   819f8:	6508      	str	r0, [r1, #80]	; 0x50
   819fa:	e004      	b.n	81a06 <hsmci_adtc_start+0x22>
	} else {
		// Disable DMA for HSMCI
		HSMCI->HSMCI_DMA = 0;
   819fc:	f04f 0000 	mov.w	r0, #0
   81a00:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   81a04:	6530      	str	r0, [r6, #80]	; 0x50
#endif

	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
   81a06:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   81a0a:	6870      	ldr	r0, [r6, #4]
   81a0c:	f440 51c0 	orr.w	r1, r0, #6144	; 0x1800
   81a10:	6071      	str	r1, [r6, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
   81a12:	f012 0f03 	tst.w	r2, #3
   81a16:	d004      	beq.n	81a22 <hsmci_adtc_start+0x3e>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
   81a18:	6870      	ldr	r0, [r6, #4]
   81a1a:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   81a1e:	6071      	str	r1, [r6, #4]
   81a20:	e005      	b.n	81a2e <hsmci_adtc_start+0x4a>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
   81a22:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   81a26:	6870      	ldr	r0, [r6, #4]
   81a28:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
   81a2c:	6071      	str	r1, [r6, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
   81a2e:	f404 4600 	and.w	r6, r4, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
   81a32:	2e00      	cmp	r6, #0
   81a34:	bf0c      	ite	eq
   81a36:	f44f 20a0 	moveq.w	r0, #327680	; 0x50000
   81a3a:	f44f 3080 	movne.w	r0, #65536	; 0x10000
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
   81a3e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   81a42:	d009      	beq.n	81a58 <hsmci_adtc_start+0x74>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
   81a44:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
   81a48:	ea4f 56c2 	mov.w	r6, r2, lsl #23
   81a4c:	ea4f 51d6 	mov.w	r1, r6, lsr #23
   81a50:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   81a54:	61b1      	str	r1, [r6, #24]
   81a56:	e018      	b.n	81a8a <hsmci_adtc_start+0xa6>
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
   81a58:	ea43 4602 	orr.w	r6, r3, r2, lsl #16
   81a5c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   81a60:	618e      	str	r6, [r1, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
   81a62:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   81a66:	d002      	beq.n	81a6e <hsmci_adtc_start+0x8a>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
   81a68:	f440 1020 	orr.w	r0, r0, #2621440	; 0x280000
   81a6c:	e00d      	b.n	81a8a <hsmci_adtc_start+0xa6>
		} else if (cmd & SDMMC_CMD_STREAM) {
   81a6e:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   81a72:	d002      	beq.n	81a7a <hsmci_adtc_start+0x96>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
   81a74:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   81a78:	e007      	b.n	81a8a <hsmci_adtc_start+0xa6>
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
   81a7a:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   81a7e:	d104      	bne.n	81a8a <hsmci_adtc_start+0xa6>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
   81a80:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
   81a84:	bf18      	it	ne
   81a86:	f440 2000 	orrne.w	r0, r0, #524288	; 0x80000
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
   81a8a:	f640 21b0 	movw	r1, #2736	; 0xab0
   81a8e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81a92:	f04f 0600 	mov.w	r6, #0
   81a96:	600e      	str	r6, [r1, #0]
	hsmci_block_size = block_size;
   81a98:	f640 21ac 	movw	r1, #2732	; 0xaac
   81a9c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81aa0:	800a      	strh	r2, [r1, #0]
	hsmci_nb_block = nb_block;
   81aa2:	f640 22ae 	movw	r2, #2734	; 0xaae
   81aa6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81aaa:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
   81aac:	4621      	mov	r1, r4
   81aae:	462a      	mov	r2, r5
   81ab0:	f241 73a1 	movw	r3, #6049	; 0x17a1
   81ab4:	f2c0 0308 	movt	r3, #8
   81ab8:	4798      	blx	r3
}
   81aba:	bd70      	pop	{r4, r5, r6, pc}

00081abc <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
   81abc:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
   81abe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   81ac2:	f04f 0200 	mov.w	r2, #0
   81ac6:	f2cc 0260 	movt	r2, #49248	; 0xc060

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
   81aca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   81acc:	4213      	tst	r3, r2
   81ace:	d007      	beq.n	81ae0 <hsmci_read_word+0x24>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   81ad0:	f241 7071 	movw	r0, #6001	; 0x1771
   81ad4:	f2c0 0008 	movt	r0, #8
   81ad8:	4780      	blx	r0
			return false;
   81ada:	f04f 0000 	mov.w	r0, #0
   81ade:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_RXRDY));
   81ae0:	f013 0f02 	tst.w	r3, #2
   81ae4:	d0f1      	beq.n	81aca <hsmci_read_word+0xe>

	// Read data
	*value = HSMCI->HSMCI_RDR;
   81ae6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   81aea:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   81aec:	6002      	str	r2, [r0, #0]
	hsmci_transfert_pos += 4;
   81aee:	f640 20b0 	movw	r0, #2736	; 0xab0
   81af2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81af6:	6803      	ldr	r3, [r0, #0]
   81af8:	f103 0304 	add.w	r3, r3, #4
   81afc:	6003      	str	r3, [r0, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   81afe:	f640 21ae 	movw	r1, #2734	; 0xaae
   81b02:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81b06:	880a      	ldrh	r2, [r1, #0]
   81b08:	f640 20ac 	movw	r0, #2732	; 0xaac
   81b0c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81b10:	8801      	ldrh	r1, [r0, #0]
   81b12:	fb01 f202 	mul.w	r2, r1, r2
   81b16:	4293      	cmp	r3, r2
   81b18:	d316      	bcc.n	81b48 <hsmci_read_word+0x8c>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   81b1a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   81b1e:	f04f 0200 	mov.w	r2, #0
   81b22:	f2cc 0260 	movt	r2, #49248	; 0xc060
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   81b26:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   81b28:	4213      	tst	r3, r2
   81b2a:	d007      	beq.n	81b3c <hsmci_read_word+0x80>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   81b2c:	f241 7171 	movw	r1, #6001	; 0x1771
   81b30:	f2c0 0108 	movt	r1, #8
   81b34:	4788      	blx	r1
			return false;
   81b36:	f04f 0000 	mov.w	r0, #0
   81b3a:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
   81b3c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   81b40:	d0f1      	beq.n	81b26 <hsmci_read_word+0x6a>
	return true;
   81b42:	f04f 0001 	mov.w	r0, #1
   81b46:	bd08      	pop	{r3, pc}

	// Read data
	*value = HSMCI->HSMCI_RDR;
	hsmci_transfert_pos += 4;
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
		return true;
   81b48:	f04f 0001 	mov.w	r0, #1
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
   81b4c:	bd08      	pop	{r3, pc}
   81b4e:	bf00      	nop

00081b50 <hsmci_start_read_blocks>:
	return true;
}

#ifdef HSMCI_SR_DMADONE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
   81b50:	b570      	push	{r4, r5, r6, lr}
   81b52:	b086      	sub	sp, #24
   81b54:	4604      	mov	r4, r0
	uint32_t cfg, nb_data;
	dma_transfer_descriptor_t desc;
	bool transfert_byte;

	nb_data = nb_block * hsmci_block_size;
   81b56:	f640 23ac 	movw	r3, #2732	; 0xaac
   81b5a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81b5e:	881e      	ldrh	r6, [r3, #0]
   81b60:	fb06 f601 	mul.w	r6, r6, r1
	transfert_byte = ((HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) || (((uint32_t)dest & 0x3) > 0)) ? 1 : 0;
   81b64:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   81b68:	6841      	ldr	r1, [r0, #4]
   81b6a:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   81b6e:	d12f      	bne.n	81bd0 <hsmci_start_read_blocks+0x80>
	 * - Hardware Selection for the Source
	 * - Source with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   81b70:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   81b74:	f2c4 050c 	movt	r5, #16396	; 0x400c
   81b78:	4628      	mov	r0, r5
   81b7a:	f242 6219 	movw	r2, #9753	; 0x2619
   81b7e:	f2c0 0208 	movt	r2, #8
   81b82:	4790      	blx	r2
	dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   81b84:	4628      	mov	r0, r5
   81b86:	f04f 0100 	mov.w	r1, #0
   81b8a:	f242 632d 	movw	r3, #9773	; 0x262d
   81b8e:	f2c0 0308 	movt	r3, #8
   81b92:	4798      	blx	r3
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_SRC_H2SEL |
			DMAC_CFG_SRC_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   81b94:	4628      	mov	r0, r5
   81b96:	f04f 0100 	mov.w	r1, #0
   81b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
   81b9e:	f2c0 1201 	movt	r2, #257	; 0x101
   81ba2:	f242 6575 	movw	r5, #9845	; 0x2675
   81ba6:	f2c0 0508 	movt	r5, #8
   81baa:	47a8      	blx	r5

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
   81bac:	f04f 0030 	mov.w	r0, #48	; 0x30
   81bb0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   81bb4:	9001      	str	r0, [sp, #4]
	desc.ul_destination_addr = (uint32_t)dest;
   81bb6:	9402      	str	r4, [sp, #8]
	if (transfert_byte) {
   81bb8:	f014 0f03 	tst.w	r4, #3
   81bbc:	d002      	beq.n	81bc4 <hsmci_start_read_blocks+0x74>
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
   81bbe:	b2b4      	uxth	r4, r6

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
	desc.ul_destination_addr = (uint32_t)dest;
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
   81bc0:	9403      	str	r4, [sp, #12]
   81bc2:	e02a      	b.n	81c1a <hsmci_start_read_blocks+0xca>
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   81bc4:	f3c6 048f 	ubfx	r4, r6, #2, #16
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
   81bc8:	f044 5108 	orr.w	r1, r4, #570425344	; 0x22000000
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   81bcc:	9103      	str	r1, [sp, #12]
   81bce:	e024      	b.n	81c1a <hsmci_start_read_blocks+0xca>
	 * - Hardware Selection for the Source
	 * - Source with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   81bd0:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   81bd4:	f2c4 050c 	movt	r5, #16396	; 0x400c
   81bd8:	4628      	mov	r0, r5
   81bda:	f242 6219 	movw	r2, #9753	; 0x2619
   81bde:	f2c0 0208 	movt	r2, #8
   81be2:	4790      	blx	r2
	dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   81be4:	4628      	mov	r0, r5
   81be6:	f04f 0100 	mov.w	r1, #0
   81bea:	f242 632d 	movw	r3, #9773	; 0x262d
   81bee:	f2c0 0308 	movt	r3, #8
   81bf2:	4798      	blx	r3
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_SRC_H2SEL |
			DMAC_CFG_SRC_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   81bf4:	4628      	mov	r0, r5
   81bf6:	f04f 0100 	mov.w	r1, #0
   81bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
   81bfe:	f2c0 1201 	movt	r2, #257	; 0x101
   81c02:	f242 6575 	movw	r5, #9845	; 0x2675
   81c06:	f2c0 0508 	movt	r5, #8
   81c0a:	47a8      	blx	r5

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
   81c0c:	f04f 0030 	mov.w	r0, #48	; 0x30
   81c10:	f2c4 0000 	movt	r0, #16384	; 0x4000
   81c14:	9001      	str	r0, [sp, #4]
	desc.ul_destination_addr = (uint32_t)dest;
   81c16:	9402      	str	r4, [sp, #8]
   81c18:	e7d1      	b.n	81bbe <hsmci_start_read_blocks+0x6e>
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
	}
	desc.ul_ctrlB = DMAC_CTRLB_SRC_DSCR_FETCH_DISABLE
   81c1a:	f04f 0100 	mov.w	r1, #0
   81c1e:	f2c4 2151 	movt	r1, #16977	; 0x4251
   81c22:	9104      	str	r1, [sp, #16]
			| DMAC_CTRLB_DST_DSCR_FETCH_DISABLE
			| DMAC_CTRLB_FC_PER2MEM_DMA_FC
			| DMAC_CTRLB_SRC_INCR_FIXED
			| DMAC_CTRLB_DST_INCR_INCREMENTING
			| DMAC_CTRLB_IEN;
	desc.ul_descriptor_addr = (uint32_t)NULL;
   81c24:	f04f 0400 	mov.w	r4, #0
   81c28:	9405      	str	r4, [sp, #20]
	dmac_channel_single_buf_transfer_init(DMAC, CONF_HSMCI_DMA_CHANNEL,
   81c2a:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   81c2e:	f2c4 050c 	movt	r5, #16396	; 0x400c
   81c32:	4628      	mov	r0, r5
   81c34:	4621      	mov	r1, r4
   81c36:	aa01      	add	r2, sp, #4
   81c38:	f242 6381 	movw	r3, #9857	; 0x2681
   81c3c:	f2c0 0308 	movt	r3, #8
   81c40:	4798      	blx	r3
			&desc);

	// Start DMA transfer
	dmac_channel_enable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   81c42:	4628      	mov	r0, r5
   81c44:	4621      	mov	r1, r4
   81c46:	f242 6221 	movw	r2, #9761	; 0x2621
   81c4a:	f2c0 0208 	movt	r2, #8
   81c4e:	4790      	blx	r2
	hsmci_transfert_pos += nb_data;
   81c50:	f640 20b0 	movw	r0, #2736	; 0xab0
   81c54:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81c58:	6801      	ldr	r1, [r0, #0]
   81c5a:	1876      	adds	r6, r6, r1
   81c5c:	6006      	str	r6, [r0, #0]
	return true;
}
   81c5e:	f04f 0001 	mov.w	r0, #1
   81c62:	b006      	add	sp, #24
   81c64:	bd70      	pop	{r4, r5, r6, pc}
   81c66:	bf00      	nop

00081c68 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
   81c68:	b510      	push	{r4, lr}
			hsmci_reset();
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   81c6a:	f640 23ae 	movw	r3, #2734	; 0xaae
   81c6e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81c72:	8818      	ldrh	r0, [r3, #0]
   81c74:	f640 22ac 	movw	r2, #2732	; 0xaac
   81c78:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81c7c:	8814      	ldrh	r4, [r2, #0]
   81c7e:	fb04 f400 	mul.w	r4, r4, r0
   81c82:	f640 21b0 	movw	r1, #2736	; 0xab0
   81c86:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81c8a:	6808      	ldr	r0, [r1, #0]
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   81c8c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   81c90:	f04f 0200 	mov.w	r2, #0
   81c94:	f2cc 0260 	movt	r2, #49248	; 0xc060
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   81c98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   81c9a:	4213      	tst	r3, r2
   81c9c:	d012      	beq.n	81cc4 <hsmci_wait_end_of_read_blocks+0x5c>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   81c9e:	f241 7071 	movw	r0, #6001	; 0x1771
   81ca2:	f2c0 0008 	movt	r0, #8
   81ca6:	4780      	blx	r0
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   81ca8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   81cac:	f2c4 000c 	movt	r0, #16396	; 0x400c
   81cb0:	f04f 0100 	mov.w	r1, #0
   81cb4:	f242 622d 	movw	r2, #9773	; 0x262d
   81cb8:	f2c0 0208 	movt	r2, #8
   81cbc:	4790      	blx	r2
			return false;
   81cbe:	f04f 0000 	mov.w	r0, #0
   81cc2:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   81cc4:	4284      	cmp	r4, r0
   81cc6:	d902      	bls.n	81cce <hsmci_wait_end_of_read_blocks+0x66>
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
   81cc8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   81ccc:	d105      	bne.n	81cda <hsmci_wait_end_of_read_blocks+0x72>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
   81cce:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   81cd2:	d0e1      	beq.n	81c98 <hsmci_wait_end_of_read_blocks+0x30>
	return true;
   81cd4:	f04f 0001 	mov.w	r0, #1
   81cd8:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
				return true;
   81cda:	f04f 0001 	mov.w	r0, #1
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
   81cde:	bd10      	pop	{r4, pc}

00081ce0 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
   81ce0:	b570      	push	{r4, r5, r6, lr}
   81ce2:	b086      	sub	sp, #24
   81ce4:	4604      	mov	r4, r0
	bool transfert_byte;
	uint32_t cfg, nb_data;
	dma_transfer_descriptor_t desc;

	nb_data = nb_block * hsmci_block_size;
   81ce6:	f640 23ac 	movw	r3, #2732	; 0xaac
   81cea:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81cee:	881e      	ldrh	r6, [r3, #0]
   81cf0:	fb06 f601 	mul.w	r6, r6, r1
	transfert_byte = ((HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) || (((uint32_t)src & 0x3) > 0)) ? 1 : 0;
   81cf4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   81cf8:	6841      	ldr	r1, [r0, #4]
   81cfa:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   81cfe:	d127      	bne.n	81d50 <hsmci_start_write_blocks+0x70>
	 * - Hardware Selection for the Destination
	 * - Destination with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   81d00:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   81d04:	f2c4 050c 	movt	r5, #16396	; 0x400c
   81d08:	4628      	mov	r0, r5
   81d0a:	f242 6219 	movw	r2, #9753	; 0x2619
   81d0e:	f2c0 0208 	movt	r2, #8
   81d12:	4790      	blx	r2
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_DST_H2SEL |
			DMAC_CFG_DST_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   81d14:	4628      	mov	r0, r5
   81d16:	f04f 0100 	mov.w	r1, #0
   81d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81d1e:	f2c0 1201 	movt	r2, #257	; 0x101
   81d22:	f242 6375 	movw	r3, #9845	; 0x2675
   81d26:	f2c0 0308 	movt	r3, #8
   81d2a:	4798      	blx	r3

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
   81d2c:	9401      	str	r4, [sp, #4]
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
   81d2e:	f04f 0034 	mov.w	r0, #52	; 0x34
   81d32:	f2c4 0000 	movt	r0, #16384	; 0x4000
   81d36:	9002      	str	r0, [sp, #8]
	if (transfert_byte) {
   81d38:	f014 0f03 	tst.w	r4, #3
   81d3c:	d002      	beq.n	81d44 <hsmci_start_write_blocks+0x64>
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
   81d3e:	b2b4      	uxth	r4, r6

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
   81d40:	9403      	str	r4, [sp, #12]
   81d42:	e022      	b.n	81d8a <hsmci_start_write_blocks+0xaa>
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   81d44:	f3c6 048f 	ubfx	r4, r6, #2, #16
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
   81d48:	f044 5108 	orr.w	r1, r4, #570425344	; 0x22000000
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   81d4c:	9103      	str	r1, [sp, #12]
   81d4e:	e01c      	b.n	81d8a <hsmci_start_write_blocks+0xaa>
	 * - Hardware Selection for the Destination
	 * - Destination with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   81d50:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   81d54:	f2c4 050c 	movt	r5, #16396	; 0x400c
   81d58:	4628      	mov	r0, r5
   81d5a:	f242 6219 	movw	r2, #9753	; 0x2619
   81d5e:	f2c0 0208 	movt	r2, #8
   81d62:	4790      	blx	r2
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_DST_H2SEL |
			DMAC_CFG_DST_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   81d64:	4628      	mov	r0, r5
   81d66:	f04f 0100 	mov.w	r1, #0
   81d6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81d6e:	f2c0 1201 	movt	r2, #257	; 0x101
   81d72:	f242 6375 	movw	r3, #9845	; 0x2675
   81d76:	f2c0 0308 	movt	r3, #8
   81d7a:	4798      	blx	r3

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
   81d7c:	9401      	str	r4, [sp, #4]
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
   81d7e:	f04f 0034 	mov.w	r0, #52	; 0x34
   81d82:	f2c4 0000 	movt	r0, #16384	; 0x4000
   81d86:	9002      	str	r0, [sp, #8]
   81d88:	e7d9      	b.n	81d3e <hsmci_start_write_blocks+0x5e>
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
	}
	desc.ul_ctrlB = DMAC_CTRLB_SRC_DSCR_FETCH_DISABLE
   81d8a:	f04f 0100 	mov.w	r1, #0
   81d8e:	f2c6 0131 	movt	r1, #24625	; 0x6031
   81d92:	9104      	str	r1, [sp, #16]
			| DMAC_CTRLB_DST_DSCR_FETCH_DISABLE
			| DMAC_CTRLB_FC_MEM2PER_DMA_FC
			| DMAC_CTRLB_SRC_INCR_INCREMENTING
			| DMAC_CTRLB_DST_INCR_FIXED
			| DMAC_CTRLB_IEN;
	desc.ul_descriptor_addr = (uint32_t)NULL;
   81d94:	f04f 0400 	mov.w	r4, #0
   81d98:	9405      	str	r4, [sp, #20]
	dmac_channel_single_buf_transfer_init(DMAC, CONF_HSMCI_DMA_CHANNEL,
   81d9a:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   81d9e:	f2c4 050c 	movt	r5, #16396	; 0x400c
   81da2:	4628      	mov	r0, r5
   81da4:	4621      	mov	r1, r4
   81da6:	aa01      	add	r2, sp, #4
   81da8:	f242 6381 	movw	r3, #9857	; 0x2681
   81dac:	f2c0 0308 	movt	r3, #8
   81db0:	4798      	blx	r3
			&desc);

	// Start DMA transfer
	dmac_channel_enable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   81db2:	4628      	mov	r0, r5
   81db4:	4621      	mov	r1, r4
   81db6:	f242 6221 	movw	r2, #9761	; 0x2621
   81dba:	f2c0 0208 	movt	r2, #8
   81dbe:	4790      	blx	r2
	hsmci_transfert_pos += nb_data;
   81dc0:	f640 20b0 	movw	r0, #2736	; 0xab0
   81dc4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81dc8:	6801      	ldr	r1, [r0, #0]
   81dca:	1876      	adds	r6, r6, r1
   81dcc:	6006      	str	r6, [r0, #0]
	return true;
}
   81dce:	f04f 0001 	mov.w	r0, #1
   81dd2:	b006      	add	sp, #24
   81dd4:	bd70      	pop	{r4, r5, r6, pc}
   81dd6:	bf00      	nop

00081dd8 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
   81dd8:	b510      	push	{r4, lr}
			hsmci_reset();
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   81dda:	f640 23ae 	movw	r3, #2734	; 0xaae
   81dde:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81de2:	8818      	ldrh	r0, [r3, #0]
   81de4:	f640 22ac 	movw	r2, #2732	; 0xaac
   81de8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81dec:	8814      	ldrh	r4, [r2, #0]
   81dee:	fb04 f400 	mul.w	r4, r4, r0
   81df2:	f640 21b0 	movw	r1, #2736	; 0xab0
   81df6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81dfa:	6808      	ldr	r0, [r1, #0]
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
   81dfc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   81e00:	f04f 0200 	mov.w	r2, #0
   81e04:	f2cc 0260 	movt	r2, #49248	; 0xc060
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
   81e08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   81e0a:	4213      	tst	r3, r2
   81e0c:	d012      	beq.n	81e34 <hsmci_wait_end_of_write_blocks+0x5c>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   81e0e:	f241 7071 	movw	r0, #6001	; 0x1771
   81e12:	f2c0 0008 	movt	r0, #8
   81e16:	4780      	blx	r0
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   81e18:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   81e1c:	f2c4 000c 	movt	r0, #16396	; 0x400c
   81e20:	f04f 0100 	mov.w	r1, #0
   81e24:	f242 622d 	movw	r2, #9773	; 0x262d
   81e28:	f2c0 0208 	movt	r2, #8
   81e2c:	4790      	blx	r2
			return false;
   81e2e:	f04f 0000 	mov.w	r0, #0
   81e32:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   81e34:	4284      	cmp	r4, r0
   81e36:	d902      	bls.n	81e3e <hsmci_wait_end_of_write_blocks+0x66>
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
   81e38:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   81e3c:	d105      	bne.n	81e4a <hsmci_wait_end_of_write_blocks+0x72>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
   81e3e:	f013 0f20 	tst.w	r3, #32
   81e42:	d0e1      	beq.n	81e08 <hsmci_wait_end_of_write_blocks+0x30>
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	return true;
   81e44:	f04f 0001 	mov.w	r0, #1
   81e48:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
				return true;
   81e4a:	f04f 0001 	mov.w	r0, #1
	} while (!(sr & HSMCI_SR_NOTBUSY));
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	return true;

}
   81e4e:	bd10      	pop	{r4, pc}

00081e50 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   81e50:	b510      	push	{r4, lr}
   81e52:	4604      	mov	r4, r0
	int i;
	Ctrl_status mem_status;

#if (SAM3S || SAM3U || SAM3N || SAM3XA || SAM4S)
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
   81e54:	f44f 50d3 	mov.w	r0, #6752	; 0x1a60
   81e58:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81e5c:	f04f 0100 	mov.w	r1, #0
   81e60:	f242 63dd 	movw	r3, #9949	; 0x26dd
   81e64:	f2c0 0308 	movt	r3, #8
   81e68:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   81e6a:	2c01      	cmp	r4, #1
   81e6c:	d81b      	bhi.n	81ea6 <disk_initialize+0x56>
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
   81e6e:	4620      	mov	r0, r4
   81e70:	f244 415d 	movw	r1, #17501	; 0x445d
   81e74:	f2c0 0108 	movt	r1, #8
   81e78:	4788      	blx	r1
		if (CTRL_BUSY != mem_status) {
   81e7a:	2803      	cmp	r0, #3
   81e7c:	d107      	bne.n	81e8e <disk_initialize+0x3e>
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
   81e7e:	4620      	mov	r0, r4
   81e80:	f244 425d 	movw	r2, #17501	; 0x445d
   81e84:	f2c0 0208 	movt	r2, #8
   81e88:	4790      	blx	r2
		if (CTRL_BUSY != mem_status) {
   81e8a:	2803      	cmp	r0, #3
   81e8c:	d00e      	beq.n	81eac <disk_initialize+0x5c>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
   81e8e:	b980      	cbnz	r0, 81eb2 <disk_initialize+0x62>
		return STA_NOINIT;
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   81e90:	4620      	mov	r0, r4
   81e92:	f244 43a9 	movw	r3, #17577	; 0x44a9
   81e96:	f2c0 0308 	movt	r3, #8
   81e9a:	4798      	blx	r3
		return STA_PROTECT;
   81e9c:	2800      	cmp	r0, #0
   81e9e:	bf14      	ite	ne
   81ea0:	2004      	movne	r0, #4
   81ea2:	2000      	moveq	r0, #0
   81ea4:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   81ea6:	f04f 0001 	mov.w	r0, #1
   81eaa:	bd10      	pop	{r4, pc}
		if (CTRL_BUSY != mem_status) {
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
   81eac:	f04f 0001 	mov.w	r0, #1
   81eb0:	bd10      	pop	{r4, pc}
   81eb2:	f04f 0001 	mov.w	r0, #1
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
   81eb6:	bd10      	pop	{r4, pc}

00081eb8 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   81eb8:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
   81eba:	f244 435d 	movw	r3, #17501	; 0x445d
   81ebe:	f2c0 0308 	movt	r3, #8
   81ec2:	4798      	blx	r3
   81ec4:	b120      	cbz	r0, 81ed0 <disk_status+0x18>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
   81ec6:	2802      	cmp	r0, #2
   81ec8:	bf0c      	ite	eq
   81eca:	2003      	moveq	r0, #3
   81ecc:	2001      	movne	r0, #1
   81ece:	bd08      	pop	{r3, pc}
 */
DSTATUS disk_status(BYTE drv)
{
	switch (mem_test_unit_ready(drv)) {
	case CTRL_GOOD:
		return 0;
   81ed0:	f04f 0000 	mov.w	r0, #0
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
	}
}
   81ed4:	bd08      	pop	{r3, pc}
   81ed6:	bf00      	nop

00081ed8 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   81ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81edc:	b085      	sub	sp, #20
   81ede:	4604      	mov	r4, r0
   81ee0:	460e      	mov	r6, r1
   81ee2:	4617      	mov	r7, r2
   81ee4:	461d      	mov	r5, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   81ee6:	f244 428d 	movw	r2, #17549	; 0x448d
   81eea:	f2c0 0208 	movt	r2, #8
   81eee:	4790      	blx	r2
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   81ef0:	4682      	mov	sl, r0
   81ef2:	2800      	cmp	r0, #0
   81ef4:	d035      	beq.n	81f62 <disk_read+0x8a>
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   81ef6:	4620      	mov	r0, r4
   81ef8:	a903      	add	r1, sp, #12
   81efa:	f244 4375 	movw	r3, #17525	; 0x4475
   81efe:	f2c0 0308 	movt	r3, #8
   81f02:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
   81f04:	46d0      	mov	r8, sl
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
   81f06:	fb0a 7005 	mla	r0, sl, r5, r7
			(ul_last_sector_num + 1) * uc_sector_size) {
   81f0a:	9903      	ldr	r1, [sp, #12]
   81f0c:	fb01 a20a 	mla	r2, r1, sl, sl
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
   81f10:	4290      	cmp	r0, r2
   81f12:	d829      	bhi.n	81f68 <disk_read+0x90>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   81f14:	46ab      	mov	fp, r5
   81f16:	b355      	cbz	r5, 81f6e <disk_read+0x96>
 * \param sector Sector address (LBA).
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
   81f18:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   81f1c:	f244 595d 	movw	r9, #17757	; 0x455d
   81f20:	f2c0 0908 	movt	r9, #8
   81f24:	f105 33ff 	add.w	r3, r5, #4294967295
   81f28:	f003 0001 	and.w	r0, r3, #1
   81f2c:	9001      	str	r0, [sp, #4]
   81f2e:	4620      	mov	r0, r4
   81f30:	4639      	mov	r1, r7
   81f32:	4632      	mov	r2, r6
   81f34:	47c8      	blx	r9
   81f36:	2800      	cmp	r0, #0
   81f38:	d021      	beq.n	81f7e <disk_read+0xa6>
   81f3a:	e01b      	b.n	81f74 <disk_read+0x9c>
   81f3c:	4620      	mov	r0, r4
   81f3e:	4639      	mov	r1, r7
   81f40:	4632      	mov	r2, r6
   81f42:	47c8      	blx	r9
   81f44:	b9b0      	cbnz	r0, 81f74 <disk_read+0x9c>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   81f46:	f105 0501 	add.w	r5, r5, #1
   81f4a:	4447      	add	r7, r8
   81f4c:	4456      	add	r6, sl
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   81f4e:	4620      	mov	r0, r4
   81f50:	4639      	mov	r1, r7
   81f52:	4632      	mov	r2, r6
   81f54:	47c8      	blx	r9
   81f56:	2800      	cmp	r0, #0
   81f58:	d029      	beq.n	81fae <disk_read+0xd6>
   81f5a:	e00b      	b.n	81f74 <disk_read+0x9c>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
   81f5c:	f04f 0000 	mov.w	r0, #0
   81f60:	e00a      	b.n	81f78 <disk_read+0xa0>
	uint8_t uc_sector_size = mem_sector_size(drv);
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   81f62:	f04f 0001 	mov.w	r0, #1
   81f66:	e007      	b.n	81f78 <disk_read+0xa0>

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
   81f68:	f04f 0004 	mov.w	r0, #4
   81f6c:	e004      	b.n	81f78 <disk_read+0xa0>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
   81f6e:	f04f 0000 	mov.w	r0, #0
   81f72:	e001      	b.n	81f78 <disk_read+0xa0>
	/* Read the data */
	for (i = 0; i < count; i++) {
		if (memory_2_ram(drv, sector + uc_sector_size * i,
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
				CTRL_GOOD) {
			return RES_ERROR;
   81f74:	f04f 0001 	mov.w	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   81f78:	b005      	add	sp, #20
   81f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   81f7e:	f04f 0500 	mov.w	r5, #0
   81f82:	f105 0501 	add.w	r5, r5, #1
   81f86:	4447      	add	r7, r8
   81f88:	4456      	add	r6, sl
   81f8a:	455d      	cmp	r5, fp
   81f8c:	d2e6      	bcs.n	81f5c <disk_read+0x84>
   81f8e:	9901      	ldr	r1, [sp, #4]
   81f90:	2900      	cmp	r1, #0
   81f92:	d0d3      	beq.n	81f3c <disk_read+0x64>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   81f94:	4620      	mov	r0, r4
   81f96:	4639      	mov	r1, r7
   81f98:	4632      	mov	r2, r6
   81f9a:	47c8      	blx	r9
   81f9c:	2800      	cmp	r0, #0
   81f9e:	d1e9      	bne.n	81f74 <disk_read+0x9c>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   81fa0:	f105 0501 	add.w	r5, r5, #1
   81fa4:	4447      	add	r7, r8
   81fa6:	4456      	add	r6, sl
   81fa8:	455d      	cmp	r5, fp
   81faa:	d3c7      	bcc.n	81f3c <disk_read+0x64>
   81fac:	e7d6      	b.n	81f5c <disk_read+0x84>
   81fae:	f105 0501 	add.w	r5, r5, #1
   81fb2:	4447      	add	r7, r8
   81fb4:	4456      	add	r6, sl
   81fb6:	455d      	cmp	r5, fp
   81fb8:	d3c0      	bcc.n	81f3c <disk_read+0x64>
   81fba:	e7cf      	b.n	81f5c <disk_read+0x84>

00081fbc <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   81fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81fc0:	b085      	sub	sp, #20
   81fc2:	4604      	mov	r4, r0
   81fc4:	460e      	mov	r6, r1
   81fc6:	4617      	mov	r7, r2
   81fc8:	461d      	mov	r5, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   81fca:	f244 428d 	movw	r2, #17549	; 0x448d
   81fce:	f2c0 0208 	movt	r2, #8
   81fd2:	4790      	blx	r2
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   81fd4:	4682      	mov	sl, r0
   81fd6:	2800      	cmp	r0, #0
   81fd8:	d035      	beq.n	82046 <disk_write+0x8a>
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   81fda:	4620      	mov	r0, r4
   81fdc:	a903      	add	r1, sp, #12
   81fde:	f244 4375 	movw	r3, #17525	; 0x4475
   81fe2:	f2c0 0308 	movt	r3, #8
   81fe6:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
   81fe8:	46d0      	mov	r8, sl
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
   81fea:	fb0a 7005 	mla	r0, sl, r5, r7
			(ul_last_sector_num + 1) * uc_sector_size) {
   81fee:	9903      	ldr	r1, [sp, #12]
   81ff0:	fb01 a20a 	mla	r2, r1, sl, sl
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
   81ff4:	4290      	cmp	r0, r2
   81ff6:	d829      	bhi.n	8204c <disk_write+0x90>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   81ff8:	46ab      	mov	fp, r5
   81ffa:	b355      	cbz	r5, 82052 <disk_write+0x96>
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
   81ffc:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   82000:	f244 5995 	movw	r9, #17813	; 0x4595
   82004:	f2c0 0908 	movt	r9, #8
   82008:	f105 33ff 	add.w	r3, r5, #4294967295
   8200c:	f003 0001 	and.w	r0, r3, #1
   82010:	9001      	str	r0, [sp, #4]
   82012:	4620      	mov	r0, r4
   82014:	4639      	mov	r1, r7
   82016:	4632      	mov	r2, r6
   82018:	47c8      	blx	r9
   8201a:	2800      	cmp	r0, #0
   8201c:	d021      	beq.n	82062 <disk_write+0xa6>
   8201e:	e01b      	b.n	82058 <disk_write+0x9c>
   82020:	4620      	mov	r0, r4
   82022:	4639      	mov	r1, r7
   82024:	4632      	mov	r2, r6
   82026:	47c8      	blx	r9
   82028:	b9b0      	cbnz	r0, 82058 <disk_write+0x9c>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   8202a:	f105 0501 	add.w	r5, r5, #1
   8202e:	4447      	add	r7, r8
   82030:	4456      	add	r6, sl
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   82032:	4620      	mov	r0, r4
   82034:	4639      	mov	r1, r7
   82036:	4632      	mov	r2, r6
   82038:	47c8      	blx	r9
   8203a:	2800      	cmp	r0, #0
   8203c:	d029      	beq.n	82092 <disk_write+0xd6>
   8203e:	e00b      	b.n	82058 <disk_write+0x9c>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
   82040:	f04f 0000 	mov.w	r0, #0
   82044:	e00a      	b.n	8205c <disk_write+0xa0>
	uint8_t uc_sector_size = mem_sector_size(drv);
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   82046:	f04f 0001 	mov.w	r0, #1
   8204a:	e007      	b.n	8205c <disk_write+0xa0>

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
   8204c:	f04f 0004 	mov.w	r0, #4
   82050:	e004      	b.n	8205c <disk_write+0xa0>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
   82052:	f04f 0000 	mov.w	r0, #0
   82056:	e001      	b.n	8205c <disk_write+0xa0>
	/* Write the data */
	for (i = 0; i < count; i++) {
		if (ram_2_memory(drv, sector + uc_sector_size * i,
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
				CTRL_GOOD) {
			return RES_ERROR;
   82058:	f04f 0001 	mov.w	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   8205c:	b005      	add	sp, #20
   8205e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   82062:	f04f 0500 	mov.w	r5, #0
   82066:	f105 0501 	add.w	r5, r5, #1
   8206a:	4447      	add	r7, r8
   8206c:	4456      	add	r6, sl
   8206e:	455d      	cmp	r5, fp
   82070:	d2e6      	bcs.n	82040 <disk_write+0x84>
   82072:	9901      	ldr	r1, [sp, #4]
   82074:	2900      	cmp	r1, #0
   82076:	d0d3      	beq.n	82020 <disk_write+0x64>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   82078:	4620      	mov	r0, r4
   8207a:	4639      	mov	r1, r7
   8207c:	4632      	mov	r2, r6
   8207e:	47c8      	blx	r9
   82080:	2800      	cmp	r0, #0
   82082:	d1e9      	bne.n	82058 <disk_write+0x9c>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   82084:	f105 0501 	add.w	r5, r5, #1
   82088:	4447      	add	r7, r8
   8208a:	4456      	add	r6, sl
   8208c:	455d      	cmp	r5, fp
   8208e:	d3c7      	bcc.n	82020 <disk_write+0x64>
   82090:	e7d6      	b.n	82040 <disk_write+0x84>
   82092:	f105 0501 	add.w	r5, r5, #1
   82096:	4447      	add	r7, r8
   82098:	4456      	add	r6, sl
   8209a:	455d      	cmp	r5, fp
   8209c:	d3c0      	bcc.n	82020 <disk_write+0x64>
   8209e:	e7cf      	b.n	82040 <disk_write+0x84>

000820a0 <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   820a0:	287f      	cmp	r0, #127	; 0x7f
   820a2:	d92d      	bls.n	82100 <ff_convert+0x60>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
   820a4:	b911      	cbnz	r1, 820ac <ff_convert+0xc>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
   820a6:	28c7      	cmp	r0, #199	; 0xc7
   820a8:	d10b      	bne.n	820c2 <ff_convert+0x22>
   820aa:	e021      	b.n	820f0 <ff_convert+0x50>
	if (src < 0x80) {	/* ASCII */
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   820ac:	28ff      	cmp	r0, #255	; 0xff
   820ae:	d825      	bhi.n	820fc <ff_convert+0x5c>
   820b0:	f1a0 0080 	sub.w	r0, r0, #128	; 0x80
   820b4:	f24b 7278 	movw	r2, #46968	; 0xb778
   820b8:	f2c0 0208 	movt	r2, #8
   820bc:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   820c0:	4770      	bx	lr

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   820c2:	f04f 0301 	mov.w	r3, #1
				if (src == Tbl[c]) break;
   820c6:	f24b 7278 	movw	r2, #46968	; 0xb778
   820ca:	f2c0 0208 	movt	r2, #8
   820ce:	f832 1f02 	ldrh.w	r1, [r2, #2]!
   820d2:	4281      	cmp	r1, r0
   820d4:	d115      	bne.n	82102 <ff_convert+0x62>
   820d6:	e00d      	b.n	820f4 <ff_convert+0x54>
   820d8:	f832 1f02 	ldrh.w	r1, [r2, #2]!
   820dc:	4281      	cmp	r1, r0
   820de:	d009      	beq.n	820f4 <ff_convert+0x54>
	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   820e0:	f103 0301 	add.w	r3, r3, #1
   820e4:	b29b      	uxth	r3, r3
				if (src == Tbl[c]) break;
   820e6:	f832 1f02 	ldrh.w	r1, [r2, #2]!
   820ea:	4281      	cmp	r1, r0
   820ec:	d10d      	bne.n	8210a <ff_convert+0x6a>
   820ee:	e001      	b.n	820f4 <ff_convert+0x54>
   820f0:	f04f 0300 	mov.w	r3, #0
			}
			c = (c + 0x80) & 0xFF;
   820f4:	f103 0080 	add.w	r0, r3, #128	; 0x80
   820f8:	b2c0      	uxtb	r0, r0
   820fa:	4770      	bx	lr
	if (src < 0x80) {	/* ASCII */
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   820fc:	f04f 0000 	mov.w	r0, #0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
   82100:	4770      	bx	lr
	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   82102:	f103 0301 	add.w	r3, r3, #1
   82106:	b29b      	uxth	r3, r3
   82108:	e7e6      	b.n	820d8 <ff_convert+0x38>
   8210a:	f103 0301 	add.w	r3, r3, #1
   8210e:	b29b      	uxth	r3, r3
   82110:	2b80      	cmp	r3, #128	; 0x80
   82112:	d1e1      	bne.n	820d8 <ff_convert+0x38>
   82114:	e7ee      	b.n	820f4 <ff_convert+0x54>
   82116:	bf00      	nop

00082118 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   82118:	2861      	cmp	r0, #97	; 0x61
   8211a:	d00e      	beq.n	8213a <ff_wtoupper+0x22>
   8211c:	f24b 5198 	movw	r1, #46488	; 0xb598
   82120:	f2c0 0108 	movt	r1, #8
   82124:	f04f 0200 	mov.w	r2, #0
   82128:	f102 0201 	add.w	r2, r2, #1
   8212c:	f831 3f02 	ldrh.w	r3, [r1, #2]!
   82130:	b15b      	cbz	r3, 8214a <ff_wtoupper+0x32>
   82132:	4283      	cmp	r3, r0
   82134:	d1f8      	bne.n	82128 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   82136:	b913      	cbnz	r3, 8213e <ff_wtoupper+0x26>
   82138:	4770      	bx	lr
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   8213a:	f04f 0200 	mov.w	r2, #0

	return tbl_lower[i] ? tbl_upper[i] : chr;
   8213e:	f64b 0078 	movw	r0, #47224	; 0xb878
   82142:	f2c0 0008 	movt	r0, #8
   82146:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
}
   8214a:	4770      	bx	lr

0008214c <main_cdc_set_dtr>:
		return strlen(line_to_send);
}

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
	if (b_enable) 
   8214c:	b139      	cbz	r1, 8215e <main_cdc_set_dtr+0x12>
		is_terminal_open = true;
   8214e:	f640 20b4 	movw	r0, #2740	; 0xab4
   82152:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82156:	f04f 0101 	mov.w	r1, #1
   8215a:	7001      	strb	r1, [r0, #0]
   8215c:	4770      	bx	lr
	else
		is_terminal_open = false;
   8215e:	f640 23b4 	movw	r3, #2740	; 0xab4
   82162:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82166:	f04f 0200 	mov.w	r2, #0
   8216a:	701a      	strb	r2, [r3, #0]
   8216c:	4770      	bx	lr
   8216e:	bf00      	nop

00082170 <uart_rx_notify>:
}

void uart_rx_notify(uint8_t port)
{
	UNUSED(port);
	is_new_received_cdc_char = true;
   82170:	f640 23b5 	movw	r3, #2741	; 0xab5
   82174:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82178:	f04f 0201 	mov.w	r2, #1
   8217c:	701a      	strb	r2, [r3, #0]
   8217e:	4770      	bx	lr

00082180 <is_new_cdc_char_received>:

Bool is_new_cdc_char_received()
{
	irqflags_t flags;
	
	if(is_new_received_cdc_char == false)
   82180:	f640 23b5 	movw	r3, #2741	; 0xab5
   82184:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82188:	7818      	ldrb	r0, [r3, #0]
   8218a:	b1e0      	cbz	r0, 821c6 <is_new_cdc_char_received+0x46>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8218c:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   82190:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   82192:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   82196:	f04f 0300 	mov.w	r3, #0
   8219a:	f240 2138 	movw	r1, #568	; 0x238
   8219e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   821a2:	700b      	strb	r3, [r1, #0]
		return false;

	flags = cpu_irq_save();
	is_new_received_cdc_char = false;
   821a4:	f640 20b5 	movw	r0, #2741	; 0xab5
   821a8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   821ac:	7003      	strb	r3, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   821ae:	b96a      	cbnz	r2, 821cc <is_new_cdc_char_received+0x4c>
		cpu_irq_enable();
   821b0:	f04f 0001 	mov.w	r0, #1
   821b4:	f240 2238 	movw	r2, #568	; 0x238
   821b8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   821bc:	7010      	strb	r0, [r2, #0]
   821be:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   821c2:	b662      	cpsie	i
   821c4:	4770      	bx	lr
Bool is_new_cdc_char_received()
{
	irqflags_t flags;
	
	if(is_new_received_cdc_char == false)
		return false;
   821c6:	f04f 0000 	mov.w	r0, #0
   821ca:	4770      	bx	lr

	flags = cpu_irq_save();
	is_new_received_cdc_char = false;
	cpu_irq_restore(flags);	
	
	return true;
   821cc:	f04f 0001 	mov.w	r0, #1
}
   821d0:	4770      	bx	lr
   821d2:	bf00      	nop

000821d4 <main_suspend_action>:

void main_suspend_action(void){}
   821d4:	4770      	bx	lr
   821d6:	bf00      	nop

000821d8 <main_resume_action>:
void main_resume_action(void){}
   821d8:	4770      	bx	lr
   821da:	bf00      	nop

000821dc <main_sof_action>:
void main_sof_action(void){}
   821dc:	4770      	bx	lr
   821de:	bf00      	nop

000821e0 <mount_chanfat_filesystem>:

char temp_fs_string[1024];


RET_TYPE mount_chanfat_filesystem(void)
{
   821e0:	b510      	push	{r4, lr}
	chanfat_status = sd_mmc_test_unit_ready(0);
   821e2:	f04f 0000 	mov.w	r0, #0
   821e6:	f241 431d 	movw	r3, #5149	; 0x141d
   821ea:	f2c0 0308 	movt	r3, #8
   821ee:	4798      	blx	r3
   821f0:	f641 514c 	movw	r1, #7500	; 0x1d4c
   821f4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   821f8:	7008      	strb	r0, [r1, #0]
	
	if (CTRL_FAIL == chanfat_status)
   821fa:	2801      	cmp	r0, #1
   821fc:	d01e      	beq.n	8223c <mount_chanfat_filesystem+0x5c>
		return RETURN_NOK;
	
	memset(&chanfat_fs, 0, sizeof(FATFS));
   821fe:	f641 24d8 	movw	r4, #6872	; 0x1ad8
   82202:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82206:	4620      	mov	r0, r4
   82208:	f04f 0100 	mov.w	r1, #0
   8220c:	f44f 720c 	mov.w	r2, #560	; 0x230
   82210:	f249 4313 	movw	r3, #37907	; 0x9413
   82214:	f2c0 0308 	movt	r3, #8
   82218:	4798      	blx	r3
	
	chanfat_res = f_mount(LUN_ID_SD_MMC_MCI_0_MEM, &chanfat_fs);
   8221a:	f04f 0000 	mov.w	r0, #0
   8221e:	4621      	mov	r1, r4
   82220:	f244 12c5 	movw	r2, #16837	; 0x41c5
   82224:	f2c0 0208 	movt	r2, #8
   82228:	4790      	blx	r2
   8222a:	f242 3150 	movw	r1, #9040	; 0x2350
   8222e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82232:	7008      	strb	r0, [r1, #0]
RET_TYPE mount_chanfat_filesystem(void)
{
	chanfat_status = sd_mmc_test_unit_ready(0);
	
	if (CTRL_FAIL == chanfat_status)
		return RETURN_NOK;
   82234:	380b      	subs	r0, #11
   82236:	bf18      	it	ne
   82238:	2001      	movne	r0, #1
   8223a:	bd10      	pop	{r4, pc}
   8223c:	f04f 0000 	mov.w	r0, #0
	chanfat_res = f_mount(LUN_ID_SD_MMC_MCI_0_MEM, &chanfat_fs);
	if (FR_INVALID_DRIVE == chanfat_res) 
		return RETURN_NOK;
		
	return RETURN_OK;
}
   82240:	bd10      	pop	{r4, pc}
   82242:	bf00      	nop

00082244 <list_folder_contents>:
	f_close(&chanfat_file_object);
	return RETURN_OK;
}

RET_TYPE list_folder_contents(char* ptr, bool to_cdc_serial)
{
   82244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82248:	b08d      	sub	sp, #52	; 0x34
   8224a:	4602      	mov	r2, r0
   8224c:	910b      	str	r1, [sp, #44]	; 0x2c
	uint32_t p1, s1, s2, str_ptr;
	
	while(*ptr == ' ') ptr++;
   8224e:	7803      	ldrb	r3, [r0, #0]
   82250:	2b20      	cmp	r3, #32
   82252:	d107      	bne.n	82264 <list_folder_contents+0x20>
{
	f_close(&chanfat_file_object);
	return RETURN_OK;
}

RET_TYPE list_folder_contents(char* ptr, bool to_cdc_serial)
   82254:	f100 0001 	add.w	r0, r0, #1
{
	uint32_t p1, s1, s2, str_ptr;
	
	while(*ptr == ' ') ptr++;
   82258:	4602      	mov	r2, r0
   8225a:	f100 0001 	add.w	r0, r0, #1
   8225e:	7811      	ldrb	r1, [r2, #0]
   82260:	2920      	cmp	r1, #32
   82262:	d0f9      	beq.n	82258 <list_folder_contents+0x14>
	chanfat_res = f_opendir(&chanfat_dir, ptr);
   82264:	f641 5028 	movw	r0, #7464	; 0x1d28
   82268:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8226c:	4611      	mov	r1, r2
   8226e:	f244 13f9 	movw	r3, #16889	; 0x41f9
   82272:	f2c0 0308 	movt	r3, #8
   82276:	4798      	blx	r3
   82278:	f242 3250 	movw	r2, #9040	; 0x2350
   8227c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82280:	7010      	strb	r0, [r2, #0]
	
	if(chanfat_res) 
   82282:	2800      	cmp	r0, #0
   82284:	f040 80c4 	bne.w	82410 <list_folder_contents+0x1cc>
   82288:	f04f 0800 	mov.w	r8, #0
   8228c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   82290:	46c3      	mov	fp, r8
	
	p1 = s1 = s2 = 0;	
	for(;;) 
	{
		#if _USE_LFN
		chanfat_Finfo.lfname = Lfname;
   82292:	f641 5408 	movw	r4, #7432	; 0x1d08
   82296:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8229a:	f242 1750 	movw	r7, #8528	; 0x2150
   8229e:	f2c2 0707 	movt	r7, #8199	; 0x2007
		chanfat_Finfo.lfsize = sizeof(Lfname);
		#endif
		
		chanfat_res = f_readdir(&chanfat_dir, &chanfat_Finfo);
   822a2:	f641 5928 	movw	r9, #7464	; 0x1d28
   822a6:	f2c2 0907 	movt	r9, #8199	; 0x2007
   822aa:	f242 3550 	movw	r5, #9040	; 0x2350
   822ae:	46aa      	mov	sl, r5
   822b0:	f2c2 0a07 	movt	sl, #8199	; 0x2007
	
	p1 = s1 = s2 = 0;	
	for(;;) 
	{
		#if _USE_LFN
		chanfat_Finfo.lfname = Lfname;
   822b4:	61a7      	str	r7, [r4, #24]
		chanfat_Finfo.lfsize = sizeof(Lfname);
   822b6:	f44f 7000 	mov.w	r0, #512	; 0x200
   822ba:	61e0      	str	r0, [r4, #28]
		#endif
		
		chanfat_res = f_readdir(&chanfat_dir, &chanfat_Finfo);
   822bc:	4648      	mov	r0, r9
   822be:	4621      	mov	r1, r4
   822c0:	f244 238d 	movw	r3, #17037	; 0x428d
   822c4:	f2c0 0308 	movt	r3, #8
   822c8:	4798      	blx	r3
   822ca:	f88a 0000 	strb.w	r0, [sl]
		if ((chanfat_res != FR_OK) || !chanfat_Finfo.fname[0]) break;
   822ce:	2800      	cmp	r0, #0
   822d0:	d17c      	bne.n	823cc <list_folder_contents+0x188>
   822d2:	7a61      	ldrb	r1, [r4, #9]
   822d4:	2900      	cmp	r1, #0
   822d6:	d079      	beq.n	823cc <list_folder_contents+0x188>
		if (chanfat_Finfo.fattrib & AM_DIR) 
   822d8:	7a26      	ldrb	r6, [r4, #8]
   822da:	f006 0210 	and.w	r2, r6, #16
   822de:	b2d5      	uxtb	r5, r2
   822e0:	b125      	cbz	r5, 822ec <list_folder_contents+0xa8>
		{
			s2++;
   822e2:	f108 0801 	add.w	r8, r8, #1
		{
			s1++; 
			p1 += chanfat_Finfo.fsize;
		}
		
		str_ptr= sprintf(temp_fs_string, "%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
   822e6:	f04f 0244 	mov.w	r2, #68	; 0x44
   822ea:	e007      	b.n	822fc <list_folder_contents+0xb8>
		{
			s2++;
		} 
		else 
		{
			s1++; 
   822ec:	980a      	ldr	r0, [sp, #40]	; 0x28
   822ee:	f100 0001 	add.w	r0, r0, #1
   822f2:	900a      	str	r0, [sp, #40]	; 0x28
			p1 += chanfat_Finfo.fsize;
   822f4:	6823      	ldr	r3, [r4, #0]
   822f6:	449b      	add	fp, r3
		}
		
		str_ptr= sprintf(temp_fs_string, "%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
   822f8:	f04f 022d 	mov.w	r2, #45	; 0x2d
   822fc:	f006 0301 	and.w	r3, r6, #1
   82300:	f006 0c02 	and.w	ip, r6, #2
   82304:	fa5f f18c 	uxtb.w	r1, ip
   82308:	2900      	cmp	r1, #0
   8230a:	bf0c      	ite	eq
   8230c:	f04f 0c2d 	moveq.w	ip, #45	; 0x2d
   82310:	f04f 0c48 	movne.w	ip, #72	; 0x48
   82314:	f006 0e04 	and.w	lr, r6, #4
   82318:	fa5f f58e 	uxtb.w	r5, lr
   8231c:	2d00      	cmp	r5, #0
   8231e:	bf0c      	ite	eq
   82320:	f04f 0e2d 	moveq.w	lr, #45	; 0x2d
   82324:	f04f 0e53 	movne.w	lr, #83	; 0x53
   82328:	f006 0620 	and.w	r6, r6, #32
   8232c:	b2f0      	uxtb	r0, r6
   8232e:	2800      	cmp	r0, #0
   82330:	bf0c      	ite	eq
   82332:	212d      	moveq	r1, #45	; 0x2d
   82334:	2141      	movne	r1, #65	; 0x41
		(chanfat_Finfo.fattrib & AM_DIR) ? 'D' : '-',
		(chanfat_Finfo.fattrib & AM_RDO) ? 'R' : '-',
		(chanfat_Finfo.fattrib & AM_HID) ? 'H' : '-',
		(chanfat_Finfo.fattrib & AM_SYS) ? 'S' : '-',
		(chanfat_Finfo.fattrib & AM_ARC) ? 'A' : '-',
		(chanfat_Finfo.fdate >> 9) + 1980, (chanfat_Finfo.fdate >> 5) & 15, chanfat_Finfo.fdate & 31,
   82336:	88a0      	ldrh	r0, [r4, #4]
		(chanfat_Finfo.ftime >> 11), (chanfat_Finfo.ftime >> 5) & 63,
   82338:	88e6      	ldrh	r6, [r4, #6]
		{
			s1++; 
			p1 += chanfat_Finfo.fsize;
		}
		
		str_ptr= sprintf(temp_fs_string, "%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
   8233a:	f641 5550 	movw	r5, #7504	; 0x1d50
   8233e:	f2c2 0507 	movt	r5, #8199	; 0x2007
   82342:	f8cd c000 	str.w	ip, [sp]
   82346:	f8cd e004 	str.w	lr, [sp, #4]
   8234a:	9102      	str	r1, [sp, #8]
		(chanfat_Finfo.fattrib & AM_DIR) ? 'D' : '-',
		(chanfat_Finfo.fattrib & AM_RDO) ? 'R' : '-',
		(chanfat_Finfo.fattrib & AM_HID) ? 'H' : '-',
		(chanfat_Finfo.fattrib & AM_SYS) ? 'S' : '-',
		(chanfat_Finfo.fattrib & AM_ARC) ? 'A' : '-',
		(chanfat_Finfo.fdate >> 9) + 1980, (chanfat_Finfo.fdate >> 5) & 15, chanfat_Finfo.fdate & 31,
   8234c:	ea4f 2150 	mov.w	r1, r0, lsr #9
		{
			s1++; 
			p1 += chanfat_Finfo.fsize;
		}
		
		str_ptr= sprintf(temp_fs_string, "%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
   82350:	f201 71bc 	addw	r1, r1, #1980	; 0x7bc
   82354:	9103      	str	r1, [sp, #12]
   82356:	f3c0 1143 	ubfx	r1, r0, #5, #4
   8235a:	9104      	str	r1, [sp, #16]
   8235c:	f000 001f 	and.w	r0, r0, #31
   82360:	9005      	str	r0, [sp, #20]
   82362:	ea4f 21d6 	mov.w	r1, r6, lsr #11
   82366:	9106      	str	r1, [sp, #24]
   82368:	f3c6 1645 	ubfx	r6, r6, #5, #6
   8236c:	9607      	str	r6, [sp, #28]
   8236e:	4621      	mov	r1, r4
   82370:	f851 0b09 	ldr.w	r0, [r1], #9
   82374:	9008      	str	r0, [sp, #32]
   82376:	9109      	str	r1, [sp, #36]	; 0x24
   82378:	4628      	mov	r0, r5
   8237a:	f64b 2158 	movw	r1, #47704	; 0xba58
   8237e:	f2c0 0108 	movt	r1, #8
   82382:	2b00      	cmp	r3, #0
   82384:	bf0c      	ite	eq
   82386:	232d      	moveq	r3, #45	; 0x2d
   82388:	2352      	movne	r3, #82	; 0x52
   8238a:	f249 4665 	movw	r6, #37989	; 0x9465
   8238e:	f2c0 0608 	movt	r6, #8
   82392:	47b0      	blx	r6
		(chanfat_Finfo.fattrib & AM_ARC) ? 'A' : '-',
		(chanfat_Finfo.fdate >> 9) + 1980, (chanfat_Finfo.fdate >> 5) & 15, chanfat_Finfo.fdate & 31,
		(chanfat_Finfo.ftime >> 11), (chanfat_Finfo.ftime >> 5) & 63,
		chanfat_Finfo.fsize, &(chanfat_Finfo.fname[0]));
		#if _USE_LFN
		sprintf(temp_fs_string+str_ptr, "  %s\r\n", Lfname);
   82394:	1940      	adds	r0, r0, r5
   82396:	f64b 2184 	movw	r1, #47748	; 0xba84
   8239a:	f2c0 0108 	movt	r1, #8
   8239e:	463a      	mov	r2, r7
   823a0:	47b0      	blx	r6
		#else
		sprintf(temp_fs_string+str_ptr, "\r\n");
		#endif
		
		if(to_cdc_serial)
   823a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   823a4:	2a00      	cmp	r2, #0
   823a6:	d085      	beq.n	822b4 <list_folder_contents+0x70>
		{
			udi_cdc_write_buf(temp_fs_string, strlen(temp_fs_string));
   823a8:	f641 5550 	movw	r5, #7504	; 0x1d50
   823ac:	f2c2 0507 	movt	r5, #8199	; 0x2007
   823b0:	4628      	mov	r0, r5
   823b2:	f249 43ad 	movw	r3, #38061	; 0x94ad
   823b6:	f2c0 0308 	movt	r3, #8
   823ba:	4798      	blx	r3
   823bc:	4601      	mov	r1, r0
   823be:	4628      	mov	r0, r5
   823c0:	f644 7251 	movw	r2, #20305	; 0x4f51
   823c4:	f2c0 0208 	movt	r2, #8
   823c8:	4790      	blx	r2
   823ca:	e773      	b.n	822b4 <list_folder_contents+0x70>
		}
	}
	sprintf(temp_fs_string, "%4u File(s),%10lu bytes total\n%4u Dir(s)\r\n", s1, p1, s2);
   823cc:	f641 5450 	movw	r4, #7504	; 0x1d50
   823d0:	f2c2 0407 	movt	r4, #8199	; 0x2007
   823d4:	f8cd 8000 	str.w	r8, [sp]
   823d8:	4620      	mov	r0, r4
   823da:	f64b 218c 	movw	r1, #47756	; 0xba8c
   823de:	f2c0 0108 	movt	r1, #8
   823e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   823e4:	465b      	mov	r3, fp
   823e6:	f249 4565 	movw	r5, #37989	; 0x9465
   823ea:	f2c0 0508 	movt	r5, #8
   823ee:	47a8      	blx	r5
	udi_cdc_write_buf(temp_fs_string, strlen(temp_fs_string));
   823f0:	4620      	mov	r0, r4
   823f2:	f249 41ad 	movw	r1, #38061	; 0x94ad
   823f6:	f2c0 0108 	movt	r1, #8
   823fa:	4788      	blx	r1
   823fc:	4601      	mov	r1, r0
   823fe:	4620      	mov	r0, r4
   82400:	f644 7351 	movw	r3, #20305	; 0x4f51
   82404:	f2c0 0308 	movt	r3, #8
   82408:	4798      	blx	r3
	
	return RETURN_OK;
   8240a:	f04f 0001 	mov.w	r0, #1
   8240e:	e001      	b.n	82414 <list_folder_contents+0x1d0>
	while(*ptr == ' ') ptr++;
	chanfat_res = f_opendir(&chanfat_dir, ptr);
	
	if(chanfat_res) 
	{ 
		return RETURN_NOK;
   82410:	f04f 0000 	mov.w	r0, #0
	}
	sprintf(temp_fs_string, "%4u File(s),%10lu bytes total\n%4u Dir(s)\r\n", s1, p1, s2);
	udi_cdc_write_buf(temp_fs_string, strlen(temp_fs_string));
	
	return RETURN_OK;
}
   82414:	b00d      	add	sp, #52	; 0x34
   82416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8241a:	bf00      	nop

0008241c <console_process>:
char current_input_line[LINE_BUFFER_SIZE];
uint16_t current_input_line_pointer = 0;


void console_process(void)
{
   8241c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	iram_size_t data_remaining = 0;
	//uint32_t temp_uint32;
	char temp_char;
	
	if(is_new_cdc_char_received() == false)
   82420:	f242 1381 	movw	r3, #8577	; 0x2181
   82424:	f2c0 0308 	movt	r3, #8
   82428:	4798      	blx	r3
   8242a:	2800      	cmp	r0, #0
   8242c:	d05f      	beq.n	824ee <console_process+0xd2>
		return;
	
	data_remaining = udi_cdc_read_buf(current_input_line+current_input_line_pointer, 1);
   8242e:	f640 24b6 	movw	r4, #2742	; 0xab6
   82432:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82436:	8820      	ldrh	r0, [r4, #0]
   82438:	f242 3554 	movw	r5, #9044	; 0x2354
   8243c:	f2c2 0507 	movt	r5, #8199	; 0x2007
   82440:	1940      	adds	r0, r0, r5
   82442:	f04f 0101 	mov.w	r1, #1
   82446:	f644 5211 	movw	r2, #19729	; 0x4d11
   8244a:	f2c0 0208 	movt	r2, #8
   8244e:	4790      	blx	r2
   82450:	4606      	mov	r6, r0
	udi_cdc_putc(current_input_line[current_input_line_pointer]);
   82452:	8821      	ldrh	r1, [r4, #0]
   82454:	5c68      	ldrb	r0, [r5, r1]
   82456:	f644 637d 	movw	r3, #20093	; 0x4e7d
   8245a:	f2c0 0308 	movt	r3, #8
   8245e:	4798      	blx	r3
	//usart_putchar(USART0, current_input_line[current_input_line_pointer]);
	current_input_line_pointer++;
   82460:	8820      	ldrh	r0, [r4, #0]
   82462:	f100 0001 	add.w	r0, r0, #1
   82466:	b283      	uxth	r3, r0
   82468:	8023      	strh	r3, [r4, #0]
	
	while(data_remaining && (current_input_line_pointer < LINE_BUFFER_SIZE))
   8246a:	b316      	cbz	r6, 824b2 <console_process+0x96>
   8246c:	2b31      	cmp	r3, #49	; 0x31
   8246e:	d820      	bhi.n	824b2 <console_process+0x96>
	{
		data_remaining = udi_cdc_read_buf(current_input_line+current_input_line_pointer, 1);
   82470:	f242 3554 	movw	r5, #9044	; 0x2354
   82474:	f2c2 0507 	movt	r5, #8199	; 0x2007
   82478:	f04f 0901 	mov.w	r9, #1
   8247c:	f644 5811 	movw	r8, #19729	; 0x4d11
   82480:	f2c0 0808 	movt	r8, #8
		udi_cdc_putc(current_input_line[current_input_line_pointer]);
   82484:	f640 24b6 	movw	r4, #2742	; 0xab6
   82488:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8248c:	f644 677d 	movw	r7, #20093	; 0x4e7d
   82490:	f2c0 0708 	movt	r7, #8
	//usart_putchar(USART0, current_input_line[current_input_line_pointer]);
	current_input_line_pointer++;
	
	while(data_remaining && (current_input_line_pointer < LINE_BUFFER_SIZE))
	{
		data_remaining = udi_cdc_read_buf(current_input_line+current_input_line_pointer, 1);
   82494:	1958      	adds	r0, r3, r5
   82496:	4649      	mov	r1, r9
   82498:	47c0      	blx	r8
   8249a:	4606      	mov	r6, r0
		udi_cdc_putc(current_input_line[current_input_line_pointer]);
   8249c:	8822      	ldrh	r2, [r4, #0]
   8249e:	5ca8      	ldrb	r0, [r5, r2]
   824a0:	47b8      	blx	r7
		//usart_putchar(USART0, current_input_line[current_input_line_pointer]);
		current_input_line_pointer++;
   824a2:	8821      	ldrh	r1, [r4, #0]
   824a4:	f101 0101 	add.w	r1, r1, #1
   824a8:	b28b      	uxth	r3, r1
   824aa:	8023      	strh	r3, [r4, #0]
	data_remaining = udi_cdc_read_buf(current_input_line+current_input_line_pointer, 1);
	udi_cdc_putc(current_input_line[current_input_line_pointer]);
	//usart_putchar(USART0, current_input_line[current_input_line_pointer]);
	current_input_line_pointer++;
	
	while(data_remaining && (current_input_line_pointer < LINE_BUFFER_SIZE))
   824ac:	b10e      	cbz	r6, 824b2 <console_process+0x96>
   824ae:	2b31      	cmp	r3, #49	; 0x31
   824b0:	d9f0      	bls.n	82494 <console_process+0x78>
		udi_cdc_putc(current_input_line[current_input_line_pointer]);
		//usart_putchar(USART0, current_input_line[current_input_line_pointer]);
		current_input_line_pointer++;
	}
	
	if(current_input_line[current_input_line_pointer-1] == 'x')
   824b2:	f640 20b6 	movw	r0, #2742	; 0xab6
   824b6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   824ba:	8802      	ldrh	r2, [r0, #0]
   824bc:	f242 3154 	movw	r1, #9044	; 0x2354
   824c0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   824c4:	188b      	adds	r3, r1, r2
   824c6:	f813 0c01 	ldrb.w	r0, [r3, #-1]
   824ca:	2878      	cmp	r0, #120	; 0x78
   824cc:	d10f      	bne.n	824ee <console_process+0xd2>
	{
		mount_chanfat_filesystem();
   824ce:	f242 12e1 	movw	r2, #8673	; 0x21e1
   824d2:	f2c0 0208 	movt	r2, #8
   824d6:	4790      	blx	r2
		list_folder_contents("/", true);
   824d8:	f64b 20b8 	movw	r0, #47800	; 0xbab8
   824dc:	f2c0 0008 	movt	r0, #8
   824e0:	f04f 0101 	mov.w	r1, #1
   824e4:	f242 2345 	movw	r3, #8773	; 0x2245
   824e8:	f2c0 0308 	movt	r3, #8
   824ec:	4798      	blx	r3
   824ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   824f2:	bf00      	nop

000824f4 <main_extra_string>:
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   824f4:	f242 3390 	movw	r3, #9104	; 0x2390
   824f8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   824fc:	7898      	ldrb	r0, [r3, #2]
   824fe:	2804      	cmp	r0, #4
   82500:	d002      	beq.n	82508 <main_extra_string+0x14>
   82502:	2805      	cmp	r0, #5
   82504:	d13b      	bne.n	8257e <main_extra_string+0x8a>
   82506:	e004      	b.n	82512 <main_extra_string+0x1e>
	case UDI_CDC_IAD_STRING_ID:
		str_lgt = sizeof(udi_cdc_name)-1;
		str = udi_cdc_name;
   82508:	f240 024c 	movw	r2, #76	; 0x4c
   8250c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82510:	e003      	b.n	8251a <main_extra_string+0x26>
		break;
	case UDI_MSC_STRING_ID:
		str_lgt = sizeof(udi_msc_name)-1;
		str = udi_msc_name;
   82512:	f240 025c 	movw	r2, #92	; 0x5c
   82516:	f2c2 0207 	movt	r2, #8199	; 0x2007
		return false;
	}

	if (str_lgt!=0) {
		for( i=0; i<str_lgt; i++) {
			extra_strings_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   8251a:	f240 0330 	movw	r3, #48	; 0x30
   8251e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82522:	7811      	ldrb	r1, [r2, #0]
   82524:	8059      	strh	r1, [r3, #2]
   82526:	7850      	ldrb	r0, [r2, #1]
   82528:	8098      	strh	r0, [r3, #4]
   8252a:	7891      	ldrb	r1, [r2, #2]
   8252c:	80d9      	strh	r1, [r3, #6]
   8252e:	78d0      	ldrb	r0, [r2, #3]
   82530:	8118      	strh	r0, [r3, #8]
   82532:	7911      	ldrb	r1, [r2, #4]
   82534:	8159      	strh	r1, [r3, #10]
   82536:	7950      	ldrb	r0, [r2, #5]
   82538:	8198      	strh	r0, [r3, #12]
   8253a:	7991      	ldrb	r1, [r2, #6]
   8253c:	81d9      	strh	r1, [r3, #14]
   8253e:	79d0      	ldrb	r0, [r2, #7]
   82540:	8218      	strh	r0, [r3, #16]
   82542:	7a11      	ldrb	r1, [r2, #8]
   82544:	8259      	strh	r1, [r3, #18]
   82546:	7a50      	ldrb	r0, [r2, #9]
   82548:	8298      	strh	r0, [r3, #20]
   8254a:	7a91      	ldrb	r1, [r2, #10]
   8254c:	82d9      	strh	r1, [r3, #22]
   8254e:	7ad0      	ldrb	r0, [r2, #11]
   82550:	8318      	strh	r0, [r3, #24]
   82552:	7b12      	ldrb	r2, [r2, #12]
   82554:	835a      	strh	r2, [r3, #26]
		}
		extra_strings_desc.header.bLength = 2+ (str_lgt)*2;
   82556:	f04f 011c 	mov.w	r1, #28
   8255a:	7019      	strb	r1, [r3, #0]
		udd_g_ctrlreq.payload_size = extra_strings_desc.header.bLength;
   8255c:	f242 3090 	movw	r0, #9104	; 0x2390
   82560:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82564:	8181      	strh	r1, [r0, #12]
		udd_g_ctrlreq.payload = (uint8_t *) &extra_strings_desc;
   82566:	6083      	str	r3, [r0, #8]
	}

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength) {
   82568:	88c3      	ldrh	r3, [r0, #6]
   8256a:	2b1b      	cmp	r3, #27
   8256c:	d80a      	bhi.n	82584 <main_extra_string+0x90>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   8256e:	f242 3290 	movw	r2, #9104	; 0x2390
   82572:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82576:	8193      	strh	r3, [r2, #12]
	}
	return true;
   82578:	f04f 0001 	mov.w	r0, #1
   8257c:	4770      	bx	lr
	case UDI_MSC_STRING_ID:
		str_lgt = sizeof(udi_msc_name)-1;
		str = udi_msc_name;
		break;
	default:
		return false;
   8257e:	f04f 0000 	mov.w	r0, #0
   82582:	4770      	bx	lr

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
   82584:	f04f 0001 	mov.w	r0, #1
   82588:	4770      	bx	lr
   8258a:	bf00      	nop

0008258c <HardFault_Handler>:
         * Get the appropriate stack pointer, depending on our mode,
         * and use it as the parameter to the C handler. This function
         * will never return
         */

        __asm(  ".syntax unified\n"
   8258c:	2004      	movs	r0, #4
   8258e:	4671      	mov	r1, lr
   82590:	4208      	tst	r0, r1
   82592:	f000 8004 	beq.w	8259e <_MSP>
   82596:	f3ef 8009 	mrs	r0, PSP
   8259a:	f000 b805 	b.w	825a8 <HardFault_HandlerC>

0008259e <_MSP>:
   8259e:	f3ef 8008 	mrs	r0, MSP
   825a2:	f000 b801 	b.w	825a8 <HardFault_HandlerC>
   825a6:	bf00      	nop

000825a8 <HardFault_HandlerC>:
 * into local variables for ease of reading.
 * We then read the various Fault Status and Address Registers to help decode
 * cause of the fault.
 * The function ends with a BKPT instruction to force control back into the debugger
 */
void HardFault_HandlerC(unsigned long *hardfault_args){
   825a8:	b08e      	sub	sp, #56	; 0x38
        volatile unsigned long _DFSR ;
        volatile unsigned long _AFSR ;
        volatile unsigned long _BFAR ;
        volatile unsigned long _MMAR ;

        stacked_r0 = ((unsigned long)hardfault_args[0]) ;
   825aa:	6803      	ldr	r3, [r0, #0]
   825ac:	930d      	str	r3, [sp, #52]	; 0x34
        stacked_r1 = ((unsigned long)hardfault_args[1]) ;
   825ae:	6841      	ldr	r1, [r0, #4]
   825b0:	910c      	str	r1, [sp, #48]	; 0x30
        stacked_r2 = ((unsigned long)hardfault_args[2]) ;
   825b2:	6882      	ldr	r2, [r0, #8]
   825b4:	920b      	str	r2, [sp, #44]	; 0x2c
        stacked_r3 = ((unsigned long)hardfault_args[3]) ;
   825b6:	68c3      	ldr	r3, [r0, #12]
   825b8:	930a      	str	r3, [sp, #40]	; 0x28
        stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   825ba:	6901      	ldr	r1, [r0, #16]
   825bc:	9109      	str	r1, [sp, #36]	; 0x24
        stacked_lr = ((unsigned long)hardfault_args[5]) ;
   825be:	6942      	ldr	r2, [r0, #20]
   825c0:	9208      	str	r2, [sp, #32]
        stacked_pc = ((unsigned long)hardfault_args[6]) ;
   825c2:	6983      	ldr	r3, [r0, #24]
   825c4:	9307      	str	r3, [sp, #28]
        stacked_psr = ((unsigned long)hardfault_args[7]) ;
   825c6:	69c0      	ldr	r0, [r0, #28]
   825c8:	9006      	str	r0, [sp, #24]

        // Configurable Fault Status Register
        // Consists of MMSR, BFSR and UFSR
        _CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;   
   825ca:	f64e 5128 	movw	r1, #60712	; 0xed28
   825ce:	f2ce 0100 	movt	r1, #57344	; 0xe000
   825d2:	680a      	ldr	r2, [r1, #0]
   825d4:	9205      	str	r2, [sp, #20]
                                                                                        
        // Hard Fault Status Register
        _HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   825d6:	f64e 532c 	movw	r3, #60716	; 0xed2c
   825da:	f2ce 0300 	movt	r3, #57344	; 0xe000
   825de:	6818      	ldr	r0, [r3, #0]
   825e0:	9004      	str	r0, [sp, #16]

        // Debug Fault Status Register
        _DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   825e2:	f64e 5130 	movw	r1, #60720	; 0xed30
   825e6:	f2ce 0100 	movt	r1, #57344	; 0xe000
   825ea:	680a      	ldr	r2, [r1, #0]
   825ec:	9203      	str	r2, [sp, #12]

        // Auxiliary Fault Status Register
        _AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   825ee:	f64e 533c 	movw	r3, #60732	; 0xed3c
   825f2:	f2ce 0300 	movt	r3, #57344	; 0xe000
   825f6:	6818      	ldr	r0, [r3, #0]
   825f8:	9002      	str	r0, [sp, #8]

        // Read the Fault Address Registers. These may not contain valid values.
        // Check BFARVALID/MMARVALID to see if they are valid values
        // MemManage Fault Address Register
        _MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   825fa:	f64e 5134 	movw	r1, #60724	; 0xed34
   825fe:	f2ce 0100 	movt	r1, #57344	; 0xe000
   82602:	680a      	ldr	r2, [r1, #0]
   82604:	9200      	str	r2, [sp, #0]
        // Bus Fault Address Register
        _BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   82606:	f64e 5338 	movw	r3, #60728	; 0xed38
   8260a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8260e:	6818      	ldr	r0, [r3, #0]
   82610:	9001      	str	r0, [sp, #4]

        __asm("BKPT #0\n") ; // Break into the debugger
   82612:	be00      	bkpt	0x0000
   82614:	e7fe      	b.n	82614 <HardFault_HandlerC+0x6c>
   82616:	bf00      	nop

00082618 <dmac_enable>:
 *
 * \param p_dmac  Pointer to a DMAC peripheral instance.
 */
void dmac_enable(Dmac *p_dmac)
{
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   82618:	f04f 0301 	mov.w	r3, #1
   8261c:	6043      	str	r3, [r0, #4]
   8261e:	4770      	bx	lr

00082620 <dmac_channel_enable>:
 * \param p_dmac Pointer to a DMAC peripheral instance.
 * \param ul_num Channel number.
 */
void dmac_channel_enable(Dmac *p_dmac, uint32_t ul_num)
{
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   82620:	f04f 0301 	mov.w	r3, #1
   82624:	fa03 f101 	lsl.w	r1, r3, r1
   82628:	6281      	str	r1, [r0, #40]	; 0x28
   8262a:	4770      	bx	lr

0008262c <dmac_channel_disable>:
 * \param p_dmac Pointer to a DMAC peripheral instance.
 * \param ul_num Channel number.
 */
void dmac_channel_disable(Dmac *p_dmac, uint32_t ul_num)
{
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   8262c:	f04f 0301 	mov.w	r3, #1
   82630:	fa03 f101 	lsl.w	r1, r3, r1
   82634:	62c1      	str	r1, [r0, #44]	; 0x2c
   82636:	4770      	bx	lr

00082638 <dmac_channel_set_source_addr>:
 * \note This register must be aligned with the source transfer width.
 */
void dmac_channel_set_source_addr(Dmac *p_dmac,
		uint32_t ul_num, uint32_t ul_addr)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   82638:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8263c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   82640:	63c2      	str	r2, [r0, #60]	; 0x3c
   82642:	4770      	bx	lr

00082644 <dmac_channel_set_destination_addr>:
 * \note This register must be aligned with the source transfer width.
 */
void dmac_channel_set_destination_addr(Dmac *p_dmac, uint32_t ul_num,
		uint32_t ul_addr)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   82644:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82648:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   8264c:	6402      	str	r2, [r0, #64]	; 0x40
   8264e:	4770      	bx	lr

00082650 <dmac_channel_set_descriptor_addr>:
 * \param ul_desc     Descriptor address.
 */
void dmac_channel_set_descriptor_addr(Dmac *p_dmac,
		uint32_t ul_num, uint32_t ul_desc)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   82650:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82654:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   82658:	6442      	str	r2, [r0, #68]	; 0x44
   8265a:	4770      	bx	lr

0008265c <dmac_channel_set_ctrlA>:
 * \param ul_num      Channel number.
 * \param ul_ctrlA    Configuration of control A register.
 */
void dmac_channel_set_ctrlA(Dmac *p_dmac, uint32_t ul_num, uint32_t ul_ctrlA)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   8265c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82660:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   82664:	6482      	str	r2, [r0, #72]	; 0x48
   82666:	4770      	bx	lr

00082668 <dmac_channel_set_ctrlB>:
 * \param ul_num      Channel number.
 * \param ul_ctrlB    Configuration of control B register.
 */
void dmac_channel_set_ctrlB(Dmac *p_dmac, uint32_t ul_num, uint32_t ul_ctrlB)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   82668:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8266c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   82670:	64c2      	str	r2, [r0, #76]	; 0x4c
   82672:	4770      	bx	lr

00082674 <dmac_channel_set_configuration>:
 * \param ul_cfg      Configuration of CFG register.
 */
void dmac_channel_set_configuration(Dmac *p_dmac, uint32_t ul_num,
		uint32_t ul_cfg)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   82674:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82678:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   8267c:	6502      	str	r2, [r0, #80]	; 0x50
   8267e:	4770      	bx	lr

00082680 <dmac_channel_single_buf_transfer_init>:
 * \param ul_num      Channel number.
 * \param p_desc      Pointer to a transfer descriptor.
 */
void dmac_channel_single_buf_transfer_init(Dmac *p_dmac,
		uint32_t ul_num, dma_transfer_descriptor_t *p_desc)
{
   82680:	b570      	push	{r4, r5, r6, lr}
   82682:	4604      	mov	r4, r0
   82684:	460e      	mov	r6, r1
   82686:	4615      	mov	r5, r2
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   82688:	6a43      	ldr	r3, [r0, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   8268a:	6812      	ldr	r2, [r2, #0]
   8268c:	f242 6339 	movw	r3, #9785	; 0x2639
   82690:	f2c0 0308 	movt	r3, #8
   82694:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   82696:	4620      	mov	r0, r4
   82698:	4631      	mov	r1, r6
   8269a:	686a      	ldr	r2, [r5, #4]
   8269c:	f242 6345 	movw	r3, #9797	; 0x2645
   826a0:	f2c0 0308 	movt	r3, #8
   826a4:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   826a6:	4620      	mov	r0, r4
   826a8:	4631      	mov	r1, r6
   826aa:	f04f 0200 	mov.w	r2, #0
   826ae:	f242 6351 	movw	r3, #9809	; 0x2651
   826b2:	f2c0 0308 	movt	r3, #8
   826b6:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   826b8:	4620      	mov	r0, r4
   826ba:	4631      	mov	r1, r6
   826bc:	68aa      	ldr	r2, [r5, #8]
   826be:	f242 635d 	movw	r3, #9821	; 0x265d
   826c2:	f2c0 0308 	movt	r3, #8
   826c6:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   826c8:	4620      	mov	r0, r4
   826ca:	4631      	mov	r1, r6
   826cc:	68ea      	ldr	r2, [r5, #12]
   826ce:	f242 6369 	movw	r3, #9833	; 0x2669
   826d2:	f2c0 0308 	movt	r3, #8
   826d6:	4798      	blx	r3
   826d8:	bd70      	pop	{r4, r5, r6, pc}
   826da:	bf00      	nop

000826dc <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode. 
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
   826dc:	b121      	cbz	r1, 826e8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
   826de:	6842      	ldr	r2, [r0, #4]
   826e0:	f042 0301 	orr.w	r3, r2, #1
   826e4:	6043      	str	r3, [r0, #4]
   826e6:	4770      	bx	lr
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
   826e8:	6843      	ldr	r3, [r0, #4]
   826ea:	f023 0101 	bic.w	r1, r3, #1
   826ee:	6041      	str	r1, [r0, #4]
   826f0:	4770      	bx	lr
   826f2:	bf00      	nop

000826f4 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
   826f4:	b192      	cbz	r2, 8271c <mem_set+0x28>
		*d++ = *s++;
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   826f6:	1882      	adds	r2, r0, r2
   826f8:	ea6f 0300 	mvn.w	r3, r0
   826fc:	18d3      	adds	r3, r2, r3
   826fe:	f003 0301 	and.w	r3, r3, #1
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
   82702:	f800 1b01 	strb.w	r1, [r0], #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
   82706:	4290      	cmp	r0, r2
   82708:	d109      	bne.n	8271e <mem_set+0x2a>
   8270a:	4770      	bx	lr
		*d++ = (BYTE)val;
   8270c:	4603      	mov	r3, r0
   8270e:	f803 1b01 	strb.w	r1, [r3], #1
   82712:	7041      	strb	r1, [r0, #1]
   82714:	f103 0001 	add.w	r0, r3, #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
   82718:	4290      	cmp	r0, r2
   8271a:	d1f7      	bne.n	8270c <mem_set+0x18>
   8271c:	4770      	bx	lr
   8271e:	2b00      	cmp	r3, #0
   82720:	d0f4      	beq.n	8270c <mem_set+0x18>
		*d++ = (BYTE)val;
   82722:	f800 1b01 	strb.w	r1, [r0], #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
   82726:	4290      	cmp	r0, r2
   82728:	d1f0      	bne.n	8270c <mem_set+0x18>
   8272a:	4770      	bx	lr

0008272c <chk_chr>:
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
   8272c:	7803      	ldrb	r3, [r0, #0]
   8272e:	b133      	cbz	r3, 8273e <chk_chr+0x12>
   82730:	428b      	cmp	r3, r1
   82732:	d004      	beq.n	8273e <chk_chr+0x12>
   82734:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   82738:	b10b      	cbz	r3, 8273e <chk_chr+0x12>
   8273a:	428b      	cmp	r3, r1
   8273c:	d1fa      	bne.n	82734 <chk_chr+0x8>
	return *str;
}
   8273e:	4618      	mov	r0, r3
   82740:	4770      	bx	lr
   82742:	bf00      	nop

00082744 <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
   82744:	f1a1 0102 	sub.w	r1, r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   82748:	6983      	ldr	r3, [r0, #24]
   8274a:	f1a3 0302 	sub.w	r3, r3, #2
   8274e:	4299      	cmp	r1, r3
   82750:	d204      	bcs.n	8275c <clust2sect+0x18>
	return clst * fs->csize + fs->database;
   82752:	7882      	ldrb	r2, [r0, #2]
   82754:	6a80      	ldr	r0, [r0, #40]	; 0x28
   82756:	fb02 0001 	mla	r0, r2, r1, r0
   8275a:	4770      	bx	lr
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   8275c:	f04f 0000 	mov.w	r0, #0
	return clst * fs->csize + fs->database;
}
   82760:	4770      	bx	lr
   82762:	bf00      	nop

00082764 <sum_sfn>:
)
{
	BYTE sum = 0;
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   82764:	7803      	ldrb	r3, [r0, #0]
   82766:	ea4f 12c3 	mov.w	r2, r3, lsl #7
   8276a:	ea42 0153 	orr.w	r1, r2, r3, lsr #1
   8276e:	7843      	ldrb	r3, [r0, #1]
   82770:	18ca      	adds	r2, r1, r3
   82772:	b2d1      	uxtb	r1, r2
   82774:	ea4f 13c1 	mov.w	r3, r1, lsl #7
   82778:	ea43 0151 	orr.w	r1, r3, r1, lsr #1
   8277c:	7882      	ldrb	r2, [r0, #2]
   8277e:	188b      	adds	r3, r1, r2
   82780:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   82784:	ea4f 12c1 	mov.w	r2, r1, lsl #7
   82788:	ea42 0351 	orr.w	r3, r2, r1, lsr #1
   8278c:	78c1      	ldrb	r1, [r0, #3]
   8278e:	185a      	adds	r2, r3, r1
   82790:	f002 03ff 	and.w	r3, r2, #255	; 0xff
   82794:	ea4f 11c3 	mov.w	r1, r3, lsl #7
   82798:	ea41 0353 	orr.w	r3, r1, r3, lsr #1
   8279c:	7902      	ldrb	r2, [r0, #4]
   8279e:	1899      	adds	r1, r3, r2
   827a0:	f001 03ff 	and.w	r3, r1, #255	; 0xff
   827a4:	ea4f 12c3 	mov.w	r2, r3, lsl #7
   827a8:	ea42 0153 	orr.w	r1, r2, r3, lsr #1
   827ac:	7943      	ldrb	r3, [r0, #5]
   827ae:	18ca      	adds	r2, r1, r3
   827b0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   827b4:	ea4f 13c1 	mov.w	r3, r1, lsl #7
   827b8:	ea43 0151 	orr.w	r1, r3, r1, lsr #1
   827bc:	7982      	ldrb	r2, [r0, #6]
   827be:	188b      	adds	r3, r1, r2
   827c0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   827c4:	ea4f 12c1 	mov.w	r2, r1, lsl #7
   827c8:	ea42 0351 	orr.w	r3, r2, r1, lsr #1
   827cc:	79c1      	ldrb	r1, [r0, #7]
   827ce:	185a      	adds	r2, r3, r1
   827d0:	f002 03ff 	and.w	r3, r2, #255	; 0xff
   827d4:	ea4f 11c3 	mov.w	r1, r3, lsl #7
   827d8:	ea41 0353 	orr.w	r3, r1, r3, lsr #1
   827dc:	7a02      	ldrb	r2, [r0, #8]
   827de:	1899      	adds	r1, r3, r2
   827e0:	f001 03ff 	and.w	r3, r1, #255	; 0xff
   827e4:	ea4f 12c3 	mov.w	r2, r3, lsl #7
   827e8:	ea42 0153 	orr.w	r1, r2, r3, lsr #1
   827ec:	7a43      	ldrb	r3, [r0, #9]
   827ee:	18ca      	adds	r2, r1, r3
   827f0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   827f4:	ea4f 13c1 	mov.w	r3, r1, lsl #7
   827f8:	ea43 0151 	orr.w	r1, r3, r1, lsr #1
   827fc:	7a80      	ldrb	r0, [r0, #10]
   827fe:	180a      	adds	r2, r1, r0
	return sum;
}
   82800:	b2d0      	uxtb	r0, r2
   82802:	4770      	bx	lr

00082804 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   82804:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
   82806:	4603      	mov	r3, r0
   82808:	b188      	cbz	r0, 8282e <validate+0x2a>
   8280a:	7802      	ldrb	r2, [r0, #0]
   8280c:	b192      	cbz	r2, 82834 <validate+0x30>
   8280e:	88c0      	ldrh	r0, [r0, #6]
   82810:	4288      	cmp	r0, r1
   82812:	d112      	bne.n	8283a <validate+0x36>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   82814:	7858      	ldrb	r0, [r3, #1]
   82816:	f641 61b9 	movw	r1, #7865	; 0x1eb9
   8281a:	f2c0 0108 	movt	r1, #8
   8281e:	4788      	blx	r1
   82820:	f000 0301 	and.w	r3, r0, #1
		return FR_NOT_READY;
   82824:	2b00      	cmp	r3, #0
   82826:	bf14      	ite	ne
   82828:	2003      	movne	r0, #3
   8282a:	2000      	moveq	r0, #0
   8282c:	bd08      	pop	{r3, pc}
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
   8282e:	f04f 0009 	mov.w	r0, #9
   82832:	bd08      	pop	{r3, pc}
   82834:	f04f 0009 	mov.w	r0, #9
   82838:	bd08      	pop	{r3, pc}
   8283a:	f04f 0009 	mov.w	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
   8283e:	bd08      	pop	{r3, pc}

00082840 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   82840:	b538      	push	{r3, r4, r5, lr}
   82842:	4604      	mov	r4, r0
   82844:	460a      	mov	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   82846:	7840      	ldrb	r0, [r0, #1]
   82848:	f104 0130 	add.w	r1, r4, #48	; 0x30
   8284c:	f04f 0301 	mov.w	r3, #1
   82850:	f641 65d9 	movw	r5, #7897	; 0x1ed9
   82854:	f2c0 0508 	movt	r5, #8
   82858:	47a8      	blx	r5
   8285a:	2800      	cmp	r0, #0
   8285c:	d13e      	bne.n	828dc <check_fs+0x9c>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   8285e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
   82862:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
   82866:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
   8286a:	b201      	sxth	r1, r0
   8286c:	f64a 2255 	movw	r2, #43605	; 0xaa55
   82870:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   82874:	4291      	cmp	r1, r2
   82876:	d134      	bne.n	828e2 <check_fs+0xa2>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   82878:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
   8287c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   82880:	ea4f 4103 	mov.w	r1, r3, lsl #16
   82884:	ea41 6200 	orr.w	r2, r1, r0, lsl #24
   82888:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
   8288c:	ea42 0300 	orr.w	r3, r2, r0
   82890:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
   82894:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
   82898:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
   8289c:	f244 1346 	movw	r3, #16710	; 0x4146
   828a0:	f2c0 0354 	movt	r3, #84	; 0x54
   828a4:	4298      	cmp	r0, r3
   828a6:	d01f      	beq.n	828e8 <check_fs+0xa8>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   828a8:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
   828ac:	f894 2084 	ldrb.w	r2, [r4, #132]	; 0x84
   828b0:	ea4f 4002 	mov.w	r0, r2, lsl #16
   828b4:	ea40 6101 	orr.w	r1, r0, r1, lsl #24
   828b8:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
   828bc:	ea41 0203 	orr.w	r2, r1, r3
   828c0:	f894 0083 	ldrb.w	r0, [r4, #131]	; 0x83
   828c4:	ea42 2100 	orr.w	r1, r2, r0, lsl #8
   828c8:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
   828cc:	f244 1346 	movw	r3, #16710	; 0x4146
   828d0:	f2c0 0354 	movt	r3, #84	; 0x54
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
   828d4:	1ad0      	subs	r0, r2, r3
   828d6:	bf18      	it	ne
   828d8:	2001      	movne	r0, #1
   828da:	bd38      	pop	{r3, r4, r5, pc}
   828dc:	f04f 0003 	mov.w	r0, #3
   828e0:	bd38      	pop	{r3, r4, r5, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
   828e2:	f04f 0002 	mov.w	r0, #2
   828e6:	bd38      	pop	{r3, r4, r5, pc}

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
   828e8:	f04f 0000 	mov.w	r0, #0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
   828ec:	bd38      	pop	{r3, r4, r5, pc}
   828ee:	bf00      	nop

000828f0 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   828f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   828f4:	4615      	mov	r5, r2
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   828f6:	6803      	ldr	r3, [r0, #0]
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   828f8:	781c      	ldrb	r4, [r3, #0]
   828fa:	f1a4 0430 	sub.w	r4, r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   828fe:	2c09      	cmp	r4, #9
   82900:	d808      	bhi.n	82914 <chk_mounted+0x24>
   82902:	785a      	ldrb	r2, [r3, #1]
   82904:	2a3a      	cmp	r2, #58	; 0x3a
   82906:	d105      	bne.n	82914 <chk_mounted+0x24>
		p += 2; *path = p;				/* Return pointer to the path name */
   82908:	f103 0302 	add.w	r3, r3, #2
   8290c:	6003      	str	r3, [r0, #0]
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   8290e:	2c00      	cmp	r4, #0
   82910:	f040 8197 	bne.w	82c42 <chk_mounted+0x352>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   82914:	f640 20bc 	movw	r0, #2748	; 0xabc
   82918:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8291c:	6804      	ldr	r4, [r0, #0]
   8291e:	600c      	str	r4, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   82920:	2c00      	cmp	r4, #0
   82922:	f000 8192 	beq.w	82c4a <chk_mounted+0x35a>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   82926:	7821      	ldrb	r1, [r4, #0]
   82928:	b1a1      	cbz	r1, 82954 <chk_mounted+0x64>
		stat = disk_status(fs->drv);
   8292a:	7860      	ldrb	r0, [r4, #1]
   8292c:	f641 63b9 	movw	r3, #7865	; 0x1eb9
   82930:	f2c0 0308 	movt	r3, #8
   82934:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   82936:	f010 0f01 	tst.w	r0, #1
   8293a:	d10b      	bne.n	82954 <chk_mounted+0x64>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   8293c:	2d00      	cmp	r5, #0
   8293e:	f000 8188 	beq.w	82c52 <chk_mounted+0x362>
   82942:	f000 0104 	and.w	r1, r0, #4
   82946:	b2c8      	uxtb	r0, r1
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
   82948:	2800      	cmp	r0, #0
   8294a:	bf14      	ite	ne
   8294c:	200a      	movne	r0, #10
   8294e:	2000      	moveq	r0, #0
   82950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   82954:	f04f 0000 	mov.w	r0, #0
   82958:	7020      	strb	r0, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   8295a:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   8295c:	f641 6251 	movw	r2, #7761	; 0x1e51
   82960:	f2c0 0208 	movt	r2, #8
   82964:	4790      	blx	r2
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   82966:	f010 0f01 	tst.w	r0, #1
   8296a:	f040 8176 	bne.w	82c5a <chk_mounted+0x36a>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   8296e:	b12d      	cbz	r5, 8297c <chk_mounted+0x8c>
   82970:	f000 0004 	and.w	r0, r0, #4
   82974:	b2c1      	uxtb	r1, r0
   82976:	2900      	cmp	r1, #0
   82978:	f040 8173 	bne.w	82c62 <chk_mounted+0x372>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   8297c:	4620      	mov	r0, r4
   8297e:	f04f 0100 	mov.w	r1, #0
   82982:	f642 0341 	movw	r3, #10305	; 0x2841
   82986:	f2c0 0308 	movt	r3, #8
   8298a:	4798      	blx	r3
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   8298c:	2801      	cmp	r0, #1
   8298e:	d11c      	bne.n	829ca <chk_mounted+0xda>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
   82990:	f894 21f2 	ldrb.w	r2, [r4, #498]	; 0x1f2
   82994:	2a00      	cmp	r2, #0
   82996:	f000 8168 	beq.w	82c6a <chk_mounted+0x37a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   8299a:	f894 51f9 	ldrb.w	r5, [r4, #505]	; 0x1f9
   8299e:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
   829a2:	ea4f 4100 	mov.w	r1, r0, lsl #16
   829a6:	ea41 6205 	orr.w	r2, r1, r5, lsl #24
   829aa:	f894 31f6 	ldrb.w	r3, [r4, #502]	; 0x1f6
   829ae:	ea42 0003 	orr.w	r0, r2, r3
   829b2:	f894 51f7 	ldrb.w	r5, [r4, #503]	; 0x1f7
   829b6:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
   829ba:	4620      	mov	r0, r4
   829bc:	4629      	mov	r1, r5
   829be:	f642 0241 	movw	r2, #10305	; 0x2841
   829c2:	f2c0 0208 	movt	r2, #8
   829c6:	4790      	blx	r2
   829c8:	e001      	b.n	829ce <chk_mounted+0xde>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   829ca:	f04f 0500 	mov.w	r5, #0
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   829ce:	2803      	cmp	r0, #3
   829d0:	f000 814f 	beq.w	82c72 <chk_mounted+0x382>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   829d4:	2800      	cmp	r0, #0
   829d6:	f040 8150 	bne.w	82c7a <chk_mounted+0x38a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   829da:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
   829de:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   829e2:	ea43 2001 	orr.w	r0, r3, r1, lsl #8
   829e6:	b202      	sxth	r2, r0
   829e8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   829ec:	f040 8149 	bne.w	82c82 <chk_mounted+0x392>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   829f0:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
   829f4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   829f8:	ea53 2101 	orrs.w	r1, r3, r1, lsl #8
   829fc:	d10f      	bne.n	82a1e <chk_mounted+0x12e>
   829fe:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
   82a02:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
   82a06:	ea4f 4102 	mov.w	r1, r2, lsl #16
   82a0a:	ea41 6000 	orr.w	r0, r1, r0, lsl #24
   82a0e:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
   82a12:	ea40 0203 	orr.w	r2, r0, r3
   82a16:	f894 1055 	ldrb.w	r1, [r4, #85]	; 0x55
   82a1a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	fs->fsize = fasize;
   82a1e:	61e1      	str	r1, [r4, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   82a20:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   82a24:	70e2      	strb	r2, [r4, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   82a26:	f102 30ff 	add.w	r0, r2, #4294967295
   82a2a:	b2c3      	uxtb	r3, r0
   82a2c:	2b01      	cmp	r3, #1
   82a2e:	f200 812c 	bhi.w	82c8a <chk_mounted+0x39a>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   82a32:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   82a36:	70a3      	strb	r3, [r4, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   82a38:	2b00      	cmp	r3, #0
   82a3a:	f000 812a 	beq.w	82c92 <chk_mounted+0x3a2>
   82a3e:	f103 30ff 	add.w	r0, r3, #4294967295
   82a42:	4218      	tst	r0, r3
   82a44:	f040 8129 	bne.w	82c9a <chk_mounted+0x3aa>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   82a48:	f894 6042 	ldrb.w	r6, [r4, #66]	; 0x42
   82a4c:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
   82a50:	ea40 2606 	orr.w	r6, r0, r6, lsl #8
   82a54:	b2b0      	uxth	r0, r6
   82a56:	8120      	strh	r0, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   82a58:	f016 0f0f 	tst.w	r6, #15
   82a5c:	f040 8121 	bne.w	82ca2 <chk_mounted+0x3b2>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   82a60:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
   82a64:	f894 6043 	ldrb.w	r6, [r4, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   82a68:	ea56 2607 	orrs.w	r6, r6, r7, lsl #8
   82a6c:	d10e      	bne.n	82a8c <chk_mounted+0x19c>
   82a6e:	f894 7053 	ldrb.w	r7, [r4, #83]	; 0x53
   82a72:	f894 6052 	ldrb.w	r6, [r4, #82]	; 0x52
   82a76:	ea4f 4606 	mov.w	r6, r6, lsl #16
   82a7a:	ea46 6707 	orr.w	r7, r6, r7, lsl #24
   82a7e:	f894 6050 	ldrb.w	r6, [r4, #80]	; 0x50
   82a82:	433e      	orrs	r6, r7
   82a84:	f894 7051 	ldrb.w	r7, [r4, #81]	; 0x51
   82a88:	ea46 2607 	orr.w	r6, r6, r7, lsl #8

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   82a8c:	f894 c03f 	ldrb.w	ip, [r4, #63]	; 0x3f
   82a90:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   82a94:	ea57 270c 	orrs.w	r7, r7, ip, lsl #8
   82a98:	f000 8107 	beq.w	82caa <chk_mounted+0x3ba>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
   82a9c:	fb02 fc01 	mul.w	ip, r2, r1

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   82aa0:	eb07 1210 	add.w	r2, r7, r0, lsr #4
   82aa4:	4462      	add	r2, ip
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   82aa6:	4296      	cmp	r6, r2
   82aa8:	f0c0 8103 	bcc.w	82cb2 <chk_mounted+0x3c2>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   82aac:	1ab6      	subs	r6, r6, r2
   82aae:	fbb6 f3f3 	udiv	r3, r6, r3
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   82ab2:	2b00      	cmp	r3, #0
   82ab4:	f000 8101 	beq.w	82cba <chk_mounted+0x3ca>
	fmt = FS_FAT12;
   82ab8:	f640 76f5 	movw	r6, #4085	; 0xff5
   82abc:	42b3      	cmp	r3, r6
   82abe:	bf8c      	ite	hi
   82ac0:	2602      	movhi	r6, #2
   82ac2:	2601      	movls	r6, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   82ac4:	f64f 78f5 	movw	r8, #65525	; 0xfff5
   82ac8:	4543      	cmp	r3, r8
   82aca:	f200 8106 	bhi.w	82cda <chk_mounted+0x3ea>

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   82ace:	f103 0302 	add.w	r3, r3, #2
   82ad2:	61a3      	str	r3, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   82ad4:	1952      	adds	r2, r2, r5
   82ad6:	62a2      	str	r2, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   82ad8:	19ef      	adds	r7, r5, r7
   82ada:	6227      	str	r7, [r4, #32]
	if (fmt == FS_FAT32) {
   82adc:	2e03      	cmp	r6, #3
   82ade:	d115      	bne.n	82b0c <chk_mounted+0x21c>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   82ae0:	2800      	cmp	r0, #0
   82ae2:	f040 80ee 	bne.w	82cc2 <chk_mounted+0x3d2>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   82ae6:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
   82aea:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
   82aee:	ea4f 4202 	mov.w	r2, r2, lsl #16
   82af2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
   82af6:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
   82afa:	4302      	orrs	r2, r0
   82afc:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
   82b00:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   82b04:	6262      	str	r2, [r4, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   82b06:	ea4f 0083 	mov.w	r0, r3, lsl #2
   82b0a:	e011      	b.n	82b30 <chk_mounted+0x240>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   82b0c:	2800      	cmp	r0, #0
   82b0e:	f000 80dc 	beq.w	82cca <chk_mounted+0x3da>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   82b12:	4467      	add	r7, ip
   82b14:	6267      	str	r7, [r4, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   82b16:	2e02      	cmp	r6, #2
   82b18:	d102      	bne.n	82b20 <chk_mounted+0x230>
   82b1a:	ea4f 0043 	mov.w	r0, r3, lsl #1
   82b1e:	e007      	b.n	82b30 <chk_mounted+0x240>
   82b20:	f04f 0003 	mov.w	r0, #3
   82b24:	fb00 f203 	mul.w	r2, r0, r3
   82b28:	f003 0301 	and.w	r3, r3, #1
   82b2c:	eb03 0052 	add.w	r0, r3, r2, lsr #1
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   82b30:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
   82b34:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
   82b38:	f0c0 80cb 	bcc.w	82cd2 <chk_mounted+0x3e2>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   82b3c:	f04f 31ff 	mov.w	r1, #4294967295
   82b40:	6121      	str	r1, [r4, #16]
	fs->last_clust = 0;
   82b42:	f04f 0000 	mov.w	r0, #0
   82b46:	60e0      	str	r0, [r4, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   82b48:	2e03      	cmp	r6, #3
   82b4a:	d16c      	bne.n	82c26 <chk_mounted+0x336>
	 	fs->fsi_flag = 0;
   82b4c:	7160      	strb	r0, [r4, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   82b4e:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
   82b52:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   82b56:	ea43 2102 	orr.w	r1, r3, r2, lsl #8
   82b5a:	186a      	adds	r2, r5, r1
   82b5c:	6162      	str	r2, [r4, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   82b5e:	7860      	ldrb	r0, [r4, #1]
   82b60:	f104 0130 	add.w	r1, r4, #48	; 0x30
   82b64:	f04f 0301 	mov.w	r3, #1
   82b68:	4d61      	ldr	r5, [pc, #388]	; (82cf0 <chk_mounted+0x400>)
   82b6a:	47a8      	blx	r5
   82b6c:	2800      	cmp	r0, #0
   82b6e:	d15a      	bne.n	82c26 <chk_mounted+0x336>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   82b70:	f894 022f 	ldrb.w	r0, [r4, #559]	; 0x22f
   82b74:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
   82b78:	ea42 2300 	orr.w	r3, r2, r0, lsl #8

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   82b7c:	b219      	sxth	r1, r3
   82b7e:	f64a 2055 	movw	r0, #43605	; 0xaa55
   82b82:	f6cf 70ff 	movt	r0, #65535	; 0xffff
   82b86:	4281      	cmp	r1, r0
   82b88:	d14d      	bne.n	82c26 <chk_mounted+0x336>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   82b8a:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
   82b8e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   82b92:	ea4f 4103 	mov.w	r1, r3, lsl #16
   82b96:	ea41 6002 	orr.w	r0, r1, r2, lsl #24
   82b9a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   82b9e:	ea40 0302 	orr.w	r3, r0, r2
   82ba2:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
   82ba6:	ea43 2001 	orr.w	r0, r3, r1, lsl #8
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   82baa:	f245 2252 	movw	r2, #21074	; 0x5252
   82bae:	f2c4 1261 	movt	r2, #16737	; 0x4161
   82bb2:	4290      	cmp	r0, r2
   82bb4:	d137      	bne.n	82c26 <chk_mounted+0x336>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   82bb6:	f894 1217 	ldrb.w	r1, [r4, #535]	; 0x217
   82bba:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
   82bbe:	ea4f 4003 	mov.w	r0, r3, lsl #16
   82bc2:	ea40 6201 	orr.w	r2, r0, r1, lsl #24
   82bc6:	f894 1214 	ldrb.w	r1, [r4, #532]	; 0x214
   82bca:	ea42 0301 	orr.w	r3, r2, r1
   82bce:	f894 0215 	ldrb.w	r0, [r4, #533]	; 0x215
   82bd2:	ea43 2200 	orr.w	r2, r3, r0, lsl #8
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   82bd6:	f247 2172 	movw	r1, #29298	; 0x7272
   82bda:	f2c6 1141 	movt	r1, #24897	; 0x6141
   82bde:	428a      	cmp	r2, r1
   82be0:	d121      	bne.n	82c26 <chk_mounted+0x336>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   82be2:	f894 021f 	ldrb.w	r0, [r4, #543]	; 0x21f
   82be6:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
   82bea:	ea4f 4203 	mov.w	r2, r3, lsl #16
   82bee:	ea42 6100 	orr.w	r1, r2, r0, lsl #24
   82bf2:	f894 021c 	ldrb.w	r0, [r4, #540]	; 0x21c
   82bf6:	ea41 0300 	orr.w	r3, r1, r0
   82bfa:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
   82bfe:	ea43 2102 	orr.w	r1, r3, r2, lsl #8
   82c02:	60e1      	str	r1, [r4, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   82c04:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
   82c08:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
   82c0c:	ea4f 4203 	mov.w	r2, r3, lsl #16
   82c10:	ea42 6100 	orr.w	r1, r2, r0, lsl #24
   82c14:	f894 0218 	ldrb.w	r0, [r4, #536]	; 0x218
   82c18:	ea41 0300 	orr.w	r3, r1, r0
   82c1c:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
   82c20:	ea43 2102 	orr.w	r1, r3, r2, lsl #8
   82c24:	6121      	str	r1, [r4, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   82c26:	7026      	strb	r6, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   82c28:	4832      	ldr	r0, [pc, #200]	; (82cf4 <chk_mounted+0x404>)
   82c2a:	8803      	ldrh	r3, [r0, #0]
   82c2c:	f103 0301 	add.w	r3, r3, #1
   82c30:	b29a      	uxth	r2, r3
   82c32:	8002      	strh	r2, [r0, #0]
   82c34:	80e2      	strh	r2, [r4, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   82c36:	f04f 0000 	mov.w	r0, #0
   82c3a:	62e0      	str	r0, [r4, #44]	; 0x2c
	fs->wflag = 0;
   82c3c:	7120      	strb	r0, [r4, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   82c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
   82c42:	f04f 000b 	mov.w	r0, #11
   82c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   82c4a:	f04f 000c 	mov.w	r0, #12
   82c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fs->fs_type) {					/* If the logical drive has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
   82c52:	f04f 0000 	mov.w	r0, #0
   82c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   82c5a:	f04f 0003 	mov.w	r0, #3
   82c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
   82c62:	f04f 000a 	mov.w	r0, #10
   82c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   82c6a:	f04f 000d 	mov.w	r0, #13
   82c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   82c72:	f04f 0001 	mov.w	r0, #1
   82c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   82c7a:	f04f 000d 	mov.w	r0, #13
   82c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;
   82c82:	f04f 000d 	mov.w	r0, #13
   82c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   82c8a:	f04f 000d 	mov.w	r0, #13
   82c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   82c92:	f04f 000d 	mov.w	r0, #13
   82c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82c9a:	f04f 000d 	mov.w	r0, #13
   82c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   82ca2:	f04f 000d 	mov.w	r0, #13
   82ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   82caa:	f04f 000d 	mov.w	r0, #13
   82cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   82cb2:	f04f 000d 	mov.w	r0, #13
   82cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   82cba:	f04f 000d 	mov.w	r0, #13
   82cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->database = bsect + sysect;						/* Data start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   82cc2:	f04f 000d 	mov.w	r0, #13
   82cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   82cca:	f04f 000d 	mov.w	r0, #13
   82cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;
   82cd2:	f04f 000d 	mov.w	r0, #13
   82cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   82cda:	f103 0302 	add.w	r3, r3, #2
   82cde:	61a3      	str	r3, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   82ce0:	1956      	adds	r6, r2, r5
   82ce2:	62a6      	str	r6, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   82ce4:	19ef      	adds	r7, r5, r7
   82ce6:	6227      	str	r7, [r4, #32]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   82ce8:	f04f 0603 	mov.w	r6, #3
   82cec:	e6f8      	b.n	82ae0 <chk_mounted+0x1f0>
   82cee:	bf00      	nop
   82cf0:	00081ed9 	.word	0x00081ed9
   82cf4:	20070ab8 	.word	0x20070ab8

00082cf8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
   82cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82cfc:	460c      	mov	r4, r1
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
   82cfe:	f101 0209 	add.w	r2, r1, #9
	if (dj->sect) {
   82d02:	6903      	ldr	r3, [r0, #16]
   82d04:	2b00      	cmp	r3, #0
   82d06:	f000 80e2 	beq.w	82ece <get_fileinfo+0x1d6>
		dir = dj->dir;
   82d0a:	6943      	ldr	r3, [r0, #20]
		nt = dir[DIR_NTres];		/* NT flag */
   82d0c:	7b1e      	ldrb	r6, [r3, #12]
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
   82d0e:	7819      	ldrb	r1, [r3, #0]
			if (c == ' ') break;
   82d10:	2920      	cmp	r1, #32
   82d12:	f000 808a 	beq.w	82e2a <get_fileinfo+0x132>
			if (c == NDDE) c = (TCHAR)DDE;
   82d16:	2905      	cmp	r1, #5
   82d18:	bf14      	ite	ne
   82d1a:	460a      	movne	r2, r1
   82d1c:	22e5      	moveq	r2, #229	; 0xe5
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
   82d1e:	f006 0508 	and.w	r5, r6, #8
   82d22:	f005 01ff 	and.w	r1, r5, #255	; 0xff
   82d26:	b135      	cbz	r5, 82d36 <get_fileinfo+0x3e>
   82d28:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   82d2c:	b2ed      	uxtb	r5, r5
   82d2e:	2d19      	cmp	r5, #25
   82d30:	bf9c      	itt	ls
   82d32:	3220      	addls	r2, #32
   82d34:	b2d2      	uxtbls	r2, r2
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
   82d36:	7262      	strb	r2, [r4, #9]
   82d38:	f104 020a 	add.w	r2, r4, #10
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
   82d3c:	785d      	ldrb	r5, [r3, #1]
			if (c == ' ') break;
   82d3e:	2d20      	cmp	r5, #32
   82d40:	d073      	beq.n	82e2a <get_fileinfo+0x132>
			if (c == NDDE) c = (TCHAR)DDE;
   82d42:	2d05      	cmp	r5, #5
   82d44:	bf08      	it	eq
   82d46:	25e5      	moveq	r5, #229	; 0xe5
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
   82d48:	b131      	cbz	r1, 82d58 <get_fileinfo+0x60>
   82d4a:	f1a5 0241 	sub.w	r2, r5, #65	; 0x41
   82d4e:	b2d2      	uxtb	r2, r2
   82d50:	2a19      	cmp	r2, #25
   82d52:	bf9c      	itt	ls
   82d54:	3520      	addls	r5, #32
   82d56:	b2ed      	uxtbls	r5, r5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
   82d58:	72a5      	strb	r5, [r4, #10]
   82d5a:	f104 020b 	add.w	r2, r4, #11
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
   82d5e:	789d      	ldrb	r5, [r3, #2]
			if (c == ' ') break;
   82d60:	2d20      	cmp	r5, #32
   82d62:	d062      	beq.n	82e2a <get_fileinfo+0x132>
			if (c == NDDE) c = (TCHAR)DDE;
   82d64:	2d05      	cmp	r5, #5
   82d66:	bf08      	it	eq
   82d68:	25e5      	moveq	r5, #229	; 0xe5
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
   82d6a:	b131      	cbz	r1, 82d7a <get_fileinfo+0x82>
   82d6c:	f1a5 0241 	sub.w	r2, r5, #65	; 0x41
   82d70:	b2d2      	uxtb	r2, r2
   82d72:	2a19      	cmp	r2, #25
   82d74:	bf9c      	itt	ls
   82d76:	3520      	addls	r5, #32
   82d78:	b2ed      	uxtbls	r5, r5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
   82d7a:	72e5      	strb	r5, [r4, #11]
   82d7c:	f104 020c 	add.w	r2, r4, #12
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
   82d80:	78dd      	ldrb	r5, [r3, #3]
			if (c == ' ') break;
   82d82:	2d20      	cmp	r5, #32
   82d84:	d051      	beq.n	82e2a <get_fileinfo+0x132>
			if (c == NDDE) c = (TCHAR)DDE;
   82d86:	2d05      	cmp	r5, #5
   82d88:	bf08      	it	eq
   82d8a:	25e5      	moveq	r5, #229	; 0xe5
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
   82d8c:	b131      	cbz	r1, 82d9c <get_fileinfo+0xa4>
   82d8e:	f1a5 0241 	sub.w	r2, r5, #65	; 0x41
   82d92:	b2d2      	uxtb	r2, r2
   82d94:	2a19      	cmp	r2, #25
   82d96:	bf9c      	itt	ls
   82d98:	3520      	addls	r5, #32
   82d9a:	b2ed      	uxtbls	r5, r5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
   82d9c:	7325      	strb	r5, [r4, #12]
   82d9e:	f104 020d 	add.w	r2, r4, #13
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
   82da2:	791d      	ldrb	r5, [r3, #4]
			if (c == ' ') break;
   82da4:	2d20      	cmp	r5, #32
   82da6:	d040      	beq.n	82e2a <get_fileinfo+0x132>
			if (c == NDDE) c = (TCHAR)DDE;
   82da8:	2d05      	cmp	r5, #5
   82daa:	bf08      	it	eq
   82dac:	25e5      	moveq	r5, #229	; 0xe5
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
   82dae:	b131      	cbz	r1, 82dbe <get_fileinfo+0xc6>
   82db0:	f1a5 0241 	sub.w	r2, r5, #65	; 0x41
   82db4:	b2d2      	uxtb	r2, r2
   82db6:	2a19      	cmp	r2, #25
   82db8:	bf9c      	itt	ls
   82dba:	3520      	addls	r5, #32
   82dbc:	b2ed      	uxtbls	r5, r5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
   82dbe:	7365      	strb	r5, [r4, #13]
   82dc0:	f104 020e 	add.w	r2, r4, #14
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
   82dc4:	795d      	ldrb	r5, [r3, #5]
			if (c == ' ') break;
   82dc6:	2d20      	cmp	r5, #32
   82dc8:	d02f      	beq.n	82e2a <get_fileinfo+0x132>
			if (c == NDDE) c = (TCHAR)DDE;
   82dca:	2d05      	cmp	r5, #5
   82dcc:	bf08      	it	eq
   82dce:	25e5      	moveq	r5, #229	; 0xe5
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
   82dd0:	b131      	cbz	r1, 82de0 <get_fileinfo+0xe8>
   82dd2:	f1a5 0241 	sub.w	r2, r5, #65	; 0x41
   82dd6:	b2d2      	uxtb	r2, r2
   82dd8:	2a19      	cmp	r2, #25
   82dda:	bf9c      	itt	ls
   82ddc:	3520      	addls	r5, #32
   82dde:	b2ed      	uxtbls	r5, r5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
   82de0:	73a5      	strb	r5, [r4, #14]
   82de2:	f104 020f 	add.w	r2, r4, #15
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
   82de6:	799d      	ldrb	r5, [r3, #6]
			if (c == ' ') break;
   82de8:	2d20      	cmp	r5, #32
   82dea:	d01e      	beq.n	82e2a <get_fileinfo+0x132>
			if (c == NDDE) c = (TCHAR)DDE;
   82dec:	2d05      	cmp	r5, #5
   82dee:	bf08      	it	eq
   82df0:	25e5      	moveq	r5, #229	; 0xe5
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
   82df2:	b131      	cbz	r1, 82e02 <get_fileinfo+0x10a>
   82df4:	f1a5 0241 	sub.w	r2, r5, #65	; 0x41
   82df8:	b2d2      	uxtb	r2, r2
   82dfa:	2a19      	cmp	r2, #25
   82dfc:	bf9c      	itt	ls
   82dfe:	3520      	addls	r5, #32
   82e00:	b2ed      	uxtbls	r5, r5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
   82e02:	73e5      	strb	r5, [r4, #15]
   82e04:	f104 0210 	add.w	r2, r4, #16
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
   82e08:	79dd      	ldrb	r5, [r3, #7]
			if (c == ' ') break;
   82e0a:	2d20      	cmp	r5, #32
   82e0c:	d00d      	beq.n	82e2a <get_fileinfo+0x132>
			if (c == NDDE) c = (TCHAR)DDE;
   82e0e:	2d05      	cmp	r5, #5
   82e10:	bf08      	it	eq
   82e12:	25e5      	moveq	r5, #229	; 0xe5
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
   82e14:	b131      	cbz	r1, 82e24 <get_fileinfo+0x12c>
   82e16:	f1a5 0141 	sub.w	r1, r5, #65	; 0x41
   82e1a:	b2ca      	uxtb	r2, r1
   82e1c:	2a19      	cmp	r2, #25
   82e1e:	bf9c      	itt	ls
   82e20:	3520      	addls	r5, #32
   82e22:	b2ed      	uxtbls	r5, r5
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
   82e24:	7425      	strb	r5, [r4, #16]
   82e26:	f104 0211 	add.w	r2, r4, #17
		}
		if (dir[8] != ' ') {		/* Copy name extension */
   82e2a:	7a1d      	ldrb	r5, [r3, #8]
   82e2c:	2d20      	cmp	r5, #32
   82e2e:	d036      	beq.n	82e9e <get_fileinfo+0x1a6>
			*p++ = '.';
   82e30:	4615      	mov	r5, r2
   82e32:	f04f 012e 	mov.w	r1, #46	; 0x2e
   82e36:	f805 1b01 	strb.w	r1, [r5], #1
			for (i = 8; i < 11; i++) {
				c = dir[i];
   82e3a:	7a19      	ldrb	r1, [r3, #8]
				if (c == ' ') break;
   82e3c:	2920      	cmp	r1, #32
   82e3e:	d02d      	beq.n	82e9c <get_fileinfo+0x1a4>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
   82e40:	f006 0610 	and.w	r6, r6, #16
   82e44:	f006 05ff 	and.w	r5, r6, #255	; 0xff
   82e48:	b136      	cbz	r6, 82e58 <get_fileinfo+0x160>
   82e4a:	f1a1 0641 	sub.w	r6, r1, #65	; 0x41
   82e4e:	b2f6      	uxtb	r6, r6
   82e50:	2e19      	cmp	r6, #25
   82e52:	bf9c      	itt	ls
   82e54:	3120      	addls	r1, #32
   82e56:	b2c9      	uxtbls	r1, r1
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
   82e58:	7051      	strb	r1, [r2, #1]
   82e5a:	f102 0602 	add.w	r6, r2, #2
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
   82e5e:	7a59      	ldrb	r1, [r3, #9]
				if (c == ' ') break;
   82e60:	2920      	cmp	r1, #32
   82e62:	d00d      	beq.n	82e80 <get_fileinfo+0x188>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
   82e64:	b135      	cbz	r5, 82e74 <get_fileinfo+0x17c>
   82e66:	f1a1 0641 	sub.w	r6, r1, #65	; 0x41
   82e6a:	b2f6      	uxtb	r6, r6
   82e6c:	2e19      	cmp	r6, #25
   82e6e:	bf9c      	itt	ls
   82e70:	3120      	addls	r1, #32
   82e72:	b2c9      	uxtbls	r1, r1
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
   82e74:	7091      	strb	r1, [r2, #2]
   82e76:	f102 0603 	add.w	r6, r2, #3
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
   82e7a:	7a99      	ldrb	r1, [r3, #10]
				if (c == ' ') break;
   82e7c:	2920      	cmp	r1, #32
   82e7e:	d101      	bne.n	82e84 <get_fileinfo+0x18c>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
   82e80:	4632      	mov	r2, r6
   82e82:	e00c      	b.n	82e9e <get_fileinfo+0x1a6>
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
   82e84:	b135      	cbz	r5, 82e94 <get_fileinfo+0x19c>
   82e86:	f1a1 0541 	sub.w	r5, r1, #65	; 0x41
   82e8a:	b2ee      	uxtb	r6, r5
   82e8c:	2e19      	cmp	r6, #25
   82e8e:	bf9c      	itt	ls
   82e90:	3120      	addls	r1, #32
   82e92:	b2c9      	uxtbls	r1, r1
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
   82e94:	70d1      	strb	r1, [r2, #3]
   82e96:	f102 0204 	add.w	r2, r2, #4
   82e9a:	e000      	b.n	82e9e <get_fileinfo+0x1a6>
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
   82e9c:	462a      	mov	r2, r5
				if (!c) c = '?';
#endif
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
   82e9e:	7ad9      	ldrb	r1, [r3, #11]
   82ea0:	7221      	strb	r1, [r4, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
   82ea2:	7fdd      	ldrb	r5, [r3, #31]
   82ea4:	7f9e      	ldrb	r6, [r3, #30]
   82ea6:	ea4f 4106 	mov.w	r1, r6, lsl #16
   82eaa:	ea41 6605 	orr.w	r6, r1, r5, lsl #24
   82eae:	7f1d      	ldrb	r5, [r3, #28]
   82eb0:	432e      	orrs	r6, r5
   82eb2:	7f59      	ldrb	r1, [r3, #29]
   82eb4:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
   82eb8:	6026      	str	r6, [r4, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
   82eba:	7e5d      	ldrb	r5, [r3, #25]
   82ebc:	7e19      	ldrb	r1, [r3, #24]
   82ebe:	ea41 2605 	orr.w	r6, r1, r5, lsl #8
   82ec2:	80a6      	strh	r6, [r4, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
   82ec4:	7dd9      	ldrb	r1, [r3, #23]
   82ec6:	7d9b      	ldrb	r3, [r3, #22]
   82ec8:	ea43 2601 	orr.w	r6, r3, r1, lsl #8
   82ecc:	80e6      	strh	r6, [r4, #6]
	}
	*p = 0;		/* Terminate SFN str by a \0 */
   82ece:	f04f 0100 	mov.w	r1, #0
   82ed2:	7011      	strb	r1, [r2, #0]

#if _USE_LFN
	if (fno->lfname && fno->lfsize) {
   82ed4:	69a6      	ldr	r6, [r4, #24]
   82ed6:	2e00      	cmp	r6, #0
   82ed8:	d034      	beq.n	82f44 <get_fileinfo+0x24c>
   82eda:	69e2      	ldr	r2, [r4, #28]
   82edc:	b392      	cbz	r2, 82f44 <get_fileinfo+0x24c>
		TCHAR *tp = fno->lfname;
		WCHAR w, *lfn;

		i = 0;
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
   82ede:	6905      	ldr	r5, [r0, #16]
   82ee0:	b1fd      	cbz	r5, 82f22 <get_fileinfo+0x22a>
   82ee2:	8c01      	ldrh	r1, [r0, #32]
   82ee4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   82ee8:	4299      	cmp	r1, r3
   82eea:	d01d      	beq.n	82f28 <get_fileinfo+0x230>
			lfn = dj->lfn;
   82eec:	69c7      	ldr	r7, [r0, #28]
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
   82eee:	8838      	ldrh	r0, [r7, #0]
   82ef0:	b1e8      	cbz	r0, 82f2e <get_fileinfo+0x236>
#if _USE_LFN
	if (fno->lfname && fno->lfsize) {
		TCHAR *tp = fno->lfname;
		WCHAR w, *lfn;

		i = 0;
   82ef2:	f04f 0500 	mov.w	r5, #0
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
			lfn = dj->lfn;
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
#if !_LFN_UNICODE
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
   82ef6:	46a9      	mov	r9, r5
   82ef8:	f242 08a1 	movw	r8, #8353	; 0x20a1
   82efc:	f2c0 0808 	movt	r8, #8
   82f00:	4649      	mov	r1, r9
   82f02:	47c0      	blx	r8
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
   82f04:	4601      	mov	r1, r0
   82f06:	b1a8      	cbz	r0, 82f34 <get_fileinfo+0x23c>
				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					tp[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
   82f08:	69e0      	ldr	r0, [r4, #28]
   82f0a:	f100 32ff 	add.w	r2, r0, #4294967295
   82f0e:	42aa      	cmp	r2, r5
   82f10:	d913      	bls.n	82f3a <get_fileinfo+0x242>
				tp[i++] = (TCHAR)w;
   82f12:	5571      	strb	r1, [r6, r5]
   82f14:	f105 0501 	add.w	r5, r5, #1
		WCHAR w, *lfn;

		i = 0;
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
			lfn = dj->lfn;
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
   82f18:	f837 0f02 	ldrh.w	r0, [r7, #2]!
   82f1c:	2800      	cmp	r0, #0
   82f1e:	d1ef      	bne.n	82f00 <get_fileinfo+0x208>
   82f20:	e00d      	b.n	82f3e <get_fileinfo+0x246>
#if _USE_LFN
	if (fno->lfname && fno->lfsize) {
		TCHAR *tp = fno->lfname;
		WCHAR w, *lfn;

		i = 0;
   82f22:	f04f 0500 	mov.w	r5, #0
   82f26:	e00a      	b.n	82f3e <get_fileinfo+0x246>
   82f28:	f04f 0500 	mov.w	r5, #0
   82f2c:	e007      	b.n	82f3e <get_fileinfo+0x246>
   82f2e:	f04f 0500 	mov.w	r5, #0
   82f32:	e004      	b.n	82f3e <get_fileinfo+0x246>
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
			lfn = dj->lfn;
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
#if !_LFN_UNICODE
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
   82f34:	f04f 0500 	mov.w	r5, #0
   82f38:	e001      	b.n	82f3e <get_fileinfo+0x246>
				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					tp[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
   82f3a:	f04f 0500 	mov.w	r5, #0
				tp[i++] = (TCHAR)w;
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
   82f3e:	f04f 0300 	mov.w	r3, #0
   82f42:	5573      	strb	r3, [r6, r5]
   82f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082f48 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   82f48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82f4c:	4604      	mov	r4, r0
   82f4e:	460d      	mov	r5, r1
	DWORD wsect;


	wsect = fs->winsect;
   82f50:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
   82f52:	428e      	cmp	r6, r1
   82f54:	d05b      	beq.n	8300e <move_window+0xc6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   82f56:	7903      	ldrb	r3, [r0, #4]
   82f58:	2b00      	cmp	r3, #0
   82f5a:	d048      	beq.n	82fee <move_window+0xa6>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   82f5c:	f100 0730 	add.w	r7, r0, #48	; 0x30
   82f60:	7840      	ldrb	r0, [r0, #1]
   82f62:	4639      	mov	r1, r7
   82f64:	4632      	mov	r2, r6
   82f66:	f04f 0301 	mov.w	r3, #1
   82f6a:	f641 7cbd 	movw	ip, #8125	; 0x1fbd
   82f6e:	f2c0 0c08 	movt	ip, #8
   82f72:	47e0      	blx	ip
   82f74:	2800      	cmp	r0, #0
   82f76:	d14e      	bne.n	83016 <move_window+0xce>
				return FR_DISK_ERR;
			fs->wflag = 0;
   82f78:	f04f 0000 	mov.w	r0, #0
   82f7c:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   82f7e:	69e2      	ldr	r2, [r4, #28]
   82f80:	6a21      	ldr	r1, [r4, #32]
   82f82:	1853      	adds	r3, r2, r1
   82f84:	429e      	cmp	r6, r3
   82f86:	d232      	bcs.n	82fee <move_window+0xa6>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   82f88:	f894 a003 	ldrb.w	sl, [r4, #3]
   82f8c:	f1ba 0f01 	cmp.w	sl, #1
   82f90:	d92d      	bls.n	82fee <move_window+0xa6>
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
   82f92:	f04f 0901 	mov.w	r9, #1
   82f96:	f641 78bd 	movw	r8, #8125	; 0x1fbd
   82f9a:	f2c0 0808 	movt	r8, #8
   82f9e:	ea0a 0b09 	and.w	fp, sl, r9
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
   82fa2:	18b6      	adds	r6, r6, r2
					disk_write(fs->drv, fs->win, wsect, 1);
   82fa4:	7860      	ldrb	r0, [r4, #1]
   82fa6:	4639      	mov	r1, r7
   82fa8:	4632      	mov	r2, r6
   82faa:	464b      	mov	r3, r9
   82fac:	47c0      	blx	r8
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   82fae:	f10a 3aff 	add.w	sl, sl, #4294967295
   82fb2:	fa5f fa8a 	uxtb.w	sl, sl
   82fb6:	45ca      	cmp	sl, r9
   82fb8:	d139      	bne.n	8302e <move_window+0xe6>
   82fba:	e018      	b.n	82fee <move_window+0xa6>
					wsect += fs->fsize;
   82fbc:	69e0      	ldr	r0, [r4, #28]
   82fbe:	1836      	adds	r6, r6, r0
					disk_write(fs->drv, fs->win, wsect, 1);
   82fc0:	7860      	ldrb	r0, [r4, #1]
   82fc2:	4639      	mov	r1, r7
   82fc4:	4632      	mov	r2, r6
   82fc6:	464b      	mov	r3, r9
   82fc8:	47c0      	blx	r8
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   82fca:	f10a 3cff 	add.w	ip, sl, #4294967295
   82fce:	f00c 0aff 	and.w	sl, ip, #255	; 0xff
					wsect += fs->fsize;
   82fd2:	69e2      	ldr	r2, [r4, #28]
   82fd4:	18b6      	adds	r6, r6, r2
					disk_write(fs->drv, fs->win, wsect, 1);
   82fd6:	7860      	ldrb	r0, [r4, #1]
   82fd8:	4639      	mov	r1, r7
   82fda:	4632      	mov	r2, r6
   82fdc:	464b      	mov	r3, r9
   82fde:	47c0      	blx	r8
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   82fe0:	f10a 31ff 	add.w	r1, sl, #4294967295
   82fe4:	fa5f fa81 	uxtb.w	sl, r1
   82fe8:	f1ba 0f01 	cmp.w	sl, #1
   82fec:	d1e6      	bne.n	82fbc <move_window+0x74>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
   82fee:	b1b5      	cbz	r5, 8301e <move_window+0xd6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   82ff0:	7860      	ldrb	r0, [r4, #1]
   82ff2:	f104 0130 	add.w	r1, r4, #48	; 0x30
   82ff6:	462a      	mov	r2, r5
   82ff8:	f04f 0301 	mov.w	r3, #1
   82ffc:	f641 66d9 	movw	r6, #7897	; 0x1ed9
   83000:	f2c0 0608 	movt	r6, #8
   83004:	47b0      	blx	r6
   83006:	b970      	cbnz	r0, 83026 <move_window+0xde>
				return FR_DISK_ERR;
			fs->winsect = sector;
   83008:	62e5      	str	r5, [r4, #44]	; 0x2c
   8300a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
	}

	return FR_OK;
   8300e:	f04f 0000 	mov.w	r0, #0
   83012:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
   83016:	f04f 0001 	mov.w	r0, #1
   8301a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
   8301e:	f04f 0000 	mov.w	r0, #0
   83022:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
   83026:	f04f 0001 	mov.w	r0, #1
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
   8302a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8302e:	fa4f f28b 	sxtb.w	r2, fp
   83032:	2a00      	cmp	r2, #0
   83034:	d0c2      	beq.n	82fbc <move_window+0x74>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
   83036:	69e1      	ldr	r1, [r4, #28]
   83038:	1876      	adds	r6, r6, r1
					disk_write(fs->drv, fs->win, wsect, 1);
   8303a:	7860      	ldrb	r0, [r4, #1]
   8303c:	4639      	mov	r1, r7
   8303e:	4632      	mov	r2, r6
   83040:	464b      	mov	r3, r9
   83042:	47c0      	blx	r8
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   83044:	f10a 33ff 	add.w	r3, sl, #4294967295
   83048:	fa5f fa83 	uxtb.w	sl, r3
   8304c:	f1ba 0f01 	cmp.w	sl, #1
   83050:	d1b4      	bne.n	82fbc <move_window+0x74>
   83052:	e7cc      	b.n	82fee <move_window+0xa6>

00083054 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   83054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83056:	4605      	mov	r5, r0
   83058:	460c      	mov	r4, r1
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   8305a:	2901      	cmp	r1, #1
   8305c:	d978      	bls.n	83150 <get_fat+0xfc>
   8305e:	6983      	ldr	r3, [r0, #24]
   83060:	4299      	cmp	r1, r3
   83062:	d278      	bcs.n	83156 <get_fat+0x102>
		return 1;

	switch (fs->fs_type) {
   83064:	7800      	ldrb	r0, [r0, #0]
   83066:	2802      	cmp	r0, #2
   83068:	d038      	beq.n	830dc <get_fat+0x88>
   8306a:	2803      	cmp	r0, #3
   8306c:	d04e      	beq.n	8310c <get_fat+0xb8>
   8306e:	2801      	cmp	r0, #1
   83070:	d174      	bne.n	8315c <get_fat+0x108>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   83072:	eb01 0651 	add.w	r6, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   83076:	6a29      	ldr	r1, [r5, #32]
   83078:	4628      	mov	r0, r5
   8307a:	eb01 2156 	add.w	r1, r1, r6, lsr #9
   8307e:	f642 7249 	movw	r2, #12105	; 0x2f49
   83082:	f2c0 0208 	movt	r2, #8
   83086:	4790      	blx	r2
   83088:	2800      	cmp	r0, #0
   8308a:	d16a      	bne.n	83162 <get_fat+0x10e>
		wc = fs->win[bc % SS(fs)]; bc++;
   8308c:	ea4f 57c6 	mov.w	r7, r6, lsl #23
   83090:	ea4f 53d7 	mov.w	r3, r7, lsr #23
   83094:	18e8      	adds	r0, r5, r3
   83096:	f890 7030 	ldrb.w	r7, [r0, #48]	; 0x30
   8309a:	f106 0601 	add.w	r6, r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   8309e:	6a29      	ldr	r1, [r5, #32]
   830a0:	4628      	mov	r0, r5
   830a2:	eb01 2156 	add.w	r1, r1, r6, lsr #9
   830a6:	f642 7249 	movw	r2, #12105	; 0x2f49
   830aa:	f2c0 0208 	movt	r2, #8
   830ae:	4790      	blx	r2
   830b0:	2800      	cmp	r0, #0
   830b2:	d159      	bne.n	83168 <get_fat+0x114>
		wc |= fs->win[bc % SS(fs)] << 8;
   830b4:	ea4f 56c6 	mov.w	r6, r6, lsl #23
   830b8:	ea4f 56d6 	mov.w	r6, r6, lsr #23
   830bc:	19ad      	adds	r5, r5, r6
   830be:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   830c2:	ea47 2003 	orr.w	r0, r7, r3, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   830c6:	f014 0f01 	tst.w	r4, #1
   830ca:	d002      	beq.n	830d2 <get_fat+0x7e>
   830cc:	ea4f 1010 	mov.w	r0, r0, lsr #4
   830d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   830d2:	ea4f 5100 	mov.w	r1, r0, lsl #20
   830d6:	ea4f 5011 	mov.w	r0, r1, lsr #20
   830da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   830dc:	6a2b      	ldr	r3, [r5, #32]
   830de:	4628      	mov	r0, r5
   830e0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
   830e4:	f642 7249 	movw	r2, #12105	; 0x2f49
   830e8:	f2c0 0208 	movt	r2, #8
   830ec:	4790      	blx	r2
   830ee:	2800      	cmp	r0, #0
   830f0:	d13d      	bne.n	8316e <get_fat+0x11a>
		p = &fs->win[clst * 2 % SS(fs)];
   830f2:	ea4f 6004 	mov.w	r0, r4, lsl #24
   830f6:	ea4f 54d0 	mov.w	r4, r0, lsr #23
		return LD_WORD(p);
   830fa:	1929      	adds	r1, r5, r4
   830fc:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
   83100:	192c      	adds	r4, r5, r4
   83102:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
   83106:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
   8310a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   8310c:	6a2a      	ldr	r2, [r5, #32]
   8310e:	4628      	mov	r0, r5
   83110:	eb02 11d1 	add.w	r1, r2, r1, lsr #7
   83114:	f642 7349 	movw	r3, #12105	; 0x2f49
   83118:	f2c0 0308 	movt	r3, #8
   8311c:	4798      	blx	r3
   8311e:	2800      	cmp	r0, #0
   83120:	d128      	bne.n	83174 <get_fat+0x120>
		p = &fs->win[clst * 4 % SS(fs)];
   83122:	ea4f 6444 	mov.w	r4, r4, lsl #25
   83126:	ea4f 51d4 	mov.w	r1, r4, lsr #23
   8312a:	f101 0030 	add.w	r0, r1, #48	; 0x30
   8312e:	182b      	adds	r3, r5, r0
		return LD_DWORD(p) & 0x0FFFFFFF;
   83130:	789c      	ldrb	r4, [r3, #2]
   83132:	78da      	ldrb	r2, [r3, #3]
   83134:	ea4f 6002 	mov.w	r0, r2, lsl #24
   83138:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
   8313c:	785b      	ldrb	r3, [r3, #1]
   8313e:	ea44 2203 	orr.w	r2, r4, r3, lsl #8
   83142:	186c      	adds	r4, r5, r1
   83144:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   83148:	430a      	orrs	r2, r1
   8314a:	f022 4070 	bic.w	r0, r2, #4026531840	; 0xf0000000
   8314e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
		return 1;
   83150:	f04f 0001 	mov.w	r0, #1
   83154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83156:	f04f 0001 	mov.w	r0, #1
   8315a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   8315c:	f04f 30ff 	mov.w	r0, #4294967295
   83160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83162:	f04f 30ff 	mov.w	r0, #4294967295
   83166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83168:	f04f 30ff 	mov.w	r0, #4294967295
   8316c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8316e:	f04f 30ff 	mov.w	r0, #4294967295
   83172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83174:	f04f 30ff 	mov.w	r0, #4294967295
}
   83178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8317a:	bf00      	nop

0008317c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   8317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8317e:	4604      	mov	r4, r0
   83180:	460d      	mov	r5, r1
	DWORD clst;
	WORD ic;


	dj->index = idx;
   83182:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
   83184:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   83186:	2901      	cmp	r1, #1
   83188:	d043      	beq.n	83212 <dir_sdi+0x96>
   8318a:	6803      	ldr	r3, [r0, #0]
   8318c:	699a      	ldr	r2, [r3, #24]
   8318e:	4291      	cmp	r1, r2
   83190:	d242      	bcs.n	83218 <dir_sdi+0x9c>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   83192:	b979      	cbnz	r1, 831b4 <dir_sdi+0x38>
   83194:	7818      	ldrb	r0, [r3, #0]
   83196:	2803      	cmp	r0, #3
   83198:	d101      	bne.n	8319e <dir_sdi+0x22>
		clst = dj->fs->dirbase;
   8319a:	6a59      	ldr	r1, [r3, #36]	; 0x24

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   8319c:	b951      	cbnz	r1, 831b4 <dir_sdi+0x38>
		dj->clust = clst;
   8319e:	f04f 0000 	mov.w	r0, #0
   831a2:	60e0      	str	r0, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   831a4:	891a      	ldrh	r2, [r3, #8]
   831a6:	42aa      	cmp	r2, r5
   831a8:	d939      	bls.n	8321e <dir_sdi+0xa2>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   831aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   831ac:	eb03 1115 	add.w	r1, r3, r5, lsr #4
   831b0:	6121      	str	r1, [r4, #16]
   831b2:	e022      	b.n	831fa <dir_sdi+0x7e>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   831b4:	789e      	ldrb	r6, [r3, #2]
   831b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
		while (idx >= ic) {	/* Follow cluster chain */
   831ba:	42b5      	cmp	r5, r6
   831bc:	d313      	bcc.n	831e6 <dir_sdi+0x6a>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   831be:	f243 0755 	movw	r7, #12373	; 0x3055
   831c2:	f2c0 0708 	movt	r7, #8
   831c6:	6820      	ldr	r0, [r4, #0]
   831c8:	47b8      	blx	r7
   831ca:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   831cc:	f1b0 3fff 	cmp.w	r0, #4294967295
   831d0:	d028      	beq.n	83224 <dir_sdi+0xa8>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   831d2:	2801      	cmp	r0, #1
   831d4:	d929      	bls.n	8322a <dir_sdi+0xae>
   831d6:	6823      	ldr	r3, [r4, #0]
   831d8:	699a      	ldr	r2, [r3, #24]
   831da:	4290      	cmp	r0, r2
   831dc:	d228      	bcs.n	83230 <dir_sdi+0xb4>
				return FR_INT_ERR;
			idx -= ic;
   831de:	1bad      	subs	r5, r5, r6
   831e0:	b2ad      	uxth	r5, r5
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
   831e2:	42ae      	cmp	r6, r5
   831e4:	d9ef      	bls.n	831c6 <dir_sdi+0x4a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
   831e6:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   831e8:	6820      	ldr	r0, [r4, #0]
   831ea:	f242 7345 	movw	r3, #10053	; 0x2745
   831ee:	f2c0 0308 	movt	r3, #8
   831f2:	4798      	blx	r3
   831f4:	eb00 1115 	add.w	r1, r0, r5, lsr #4
   831f8:	6121      	str	r1, [r4, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   831fa:	f005 000f 	and.w	r0, r5, #15
   831fe:	ea4f 1240 	mov.w	r2, r0, lsl #5
   83202:	f102 0230 	add.w	r2, r2, #48	; 0x30
   83206:	6823      	ldr	r3, [r4, #0]
   83208:	1899      	adds	r1, r3, r2
   8320a:	6161      	str	r1, [r4, #20]

	return FR_OK;	/* Seek succeeded */
   8320c:	f04f 0000 	mov.w	r0, #0
   83210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
   83212:	f04f 0002 	mov.w	r0, #2
   83216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83218:	f04f 0002 	mov.w	r0, #2
   8321c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
		dj->clust = clst;
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
			return FR_INT_ERR;
   8321e:	f04f 0002 	mov.w	r0, #2
   83222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   83224:	f04f 0001 	mov.w	r0, #1
   83228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
   8322a:	f04f 0002 	mov.w	r0, #2
   8322e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83230:	f04f 0002 	mov.w	r0, #2
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
   83234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83236:	bf00      	nop

00083238 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   83238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8323a:	4605      	mov	r5, r0
   8323c:	460c      	mov	r4, r1
   8323e:	4616      	mov	r6, r2
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   83240:	2901      	cmp	r1, #1
   83242:	f240 8097 	bls.w	83374 <put_fat+0x13c>
   83246:	6983      	ldr	r3, [r0, #24]
   83248:	4299      	cmp	r1, r3
   8324a:	f080 8096 	bcs.w	8337a <put_fat+0x142>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
   8324e:	7800      	ldrb	r0, [r0, #0]
   83250:	2802      	cmp	r0, #2
   83252:	d04c      	beq.n	832ee <put_fat+0xb6>
   83254:	2803      	cmp	r0, #3
   83256:	d062      	beq.n	8331e <put_fat+0xe6>
   83258:	2801      	cmp	r0, #1
   8325a:	f040 8085 	bne.w	83368 <put_fat+0x130>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   8325e:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   83262:	6a29      	ldr	r1, [r5, #32]
   83264:	4628      	mov	r0, r5
   83266:	eb01 2157 	add.w	r1, r1, r7, lsr #9
   8326a:	f642 7249 	movw	r2, #12105	; 0x2f49
   8326e:	f2c0 0208 	movt	r2, #8
   83272:	4790      	blx	r2
			if (res != FR_OK) break;
   83274:	4603      	mov	r3, r0
   83276:	2800      	cmp	r0, #0
   83278:	d178      	bne.n	8336c <put_fat+0x134>
			p = &fs->win[bc % SS(fs)];
   8327a:	ea4f 53c7 	mov.w	r3, r7, lsl #23
   8327e:	ea4f 50d3 	mov.w	r0, r3, lsr #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   83282:	f014 0401 	ands.w	r4, r4, #1
   83286:	d009      	beq.n	8329c <put_fat+0x64>
   83288:	182a      	adds	r2, r5, r0
   8328a:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   8328e:	f003 020f 	and.w	r2, r3, #15
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
}
   83292:	b2f1      	uxtb	r1, r6
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   83294:	ea42 1301 	orr.w	r3, r2, r1, lsl #4
   83298:	b2d9      	uxtb	r1, r3
   8329a:	e000      	b.n	8329e <put_fat+0x66>
   8329c:	b2f1      	uxtb	r1, r6
   8329e:	1828      	adds	r0, r5, r0
   832a0:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
			bc++;
   832a4:	f107 0701 	add.w	r7, r7, #1
			fs->wflag = 1;
   832a8:	f04f 0201 	mov.w	r2, #1
   832ac:	712a      	strb	r2, [r5, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   832ae:	6a29      	ldr	r1, [r5, #32]
   832b0:	4628      	mov	r0, r5
   832b2:	eb01 2157 	add.w	r1, r1, r7, lsr #9
   832b6:	f642 7349 	movw	r3, #12105	; 0x2f49
   832ba:	f2c0 0308 	movt	r3, #8
   832be:	4798      	blx	r3
			if (res != FR_OK) break;
   832c0:	4603      	mov	r3, r0
   832c2:	2800      	cmp	r0, #0
   832c4:	d152      	bne.n	8336c <put_fat+0x134>
			p = &fs->win[bc % SS(fs)];
   832c6:	ea4f 57c7 	mov.w	r7, r7, lsl #23
   832ca:	ea4f 50d7 	mov.w	r0, r7, lsr #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   832ce:	b114      	cbz	r4, 832d6 <put_fat+0x9e>
   832d0:	f3c6 1607 	ubfx	r6, r6, #4, #8
   832d4:	e007      	b.n	832e6 <put_fat+0xae>
   832d6:	182a      	adds	r2, r5, r0
   832d8:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
   832dc:	f021 070f 	bic.w	r7, r1, #15
   832e0:	f3c6 2603 	ubfx	r6, r6, #8, #4
   832e4:	433e      	orrs	r6, r7
   832e6:	182f      	adds	r7, r5, r0
   832e8:	f887 6030 	strb.w	r6, [r7, #48]	; 0x30
			break;
   832ec:	e03e      	b.n	8336c <put_fat+0x134>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   832ee:	6a2b      	ldr	r3, [r5, #32]
   832f0:	4628      	mov	r0, r5
   832f2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
   832f6:	f642 7249 	movw	r2, #12105	; 0x2f49
   832fa:	f2c0 0208 	movt	r2, #8
   832fe:	4790      	blx	r2
			if (res != FR_OK) break;
   83300:	4603      	mov	r3, r0
   83302:	bb98      	cbnz	r0, 8336c <put_fat+0x134>
			p = &fs->win[clst * 2 % SS(fs)];
   83304:	ea4f 6404 	mov.w	r4, r4, lsl #24
   83308:	ea4f 51d4 	mov.w	r1, r4, lsr #23
			ST_WORD(p, (WORD)val);
   8330c:	1868      	adds	r0, r5, r1
   8330e:	f880 6030 	strb.w	r6, [r0, #48]	; 0x30
   83312:	4604      	mov	r4, r0
   83314:	f3c6 2607 	ubfx	r6, r6, #8, #8
   83318:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
			break;
   8331c:	e026      	b.n	8336c <put_fat+0x134>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   8331e:	6a2b      	ldr	r3, [r5, #32]
   83320:	4628      	mov	r0, r5
   83322:	eb03 11d1 	add.w	r1, r3, r1, lsr #7
   83326:	f642 7249 	movw	r2, #12105	; 0x2f49
   8332a:	f2c0 0208 	movt	r2, #8
   8332e:	4790      	blx	r2
			if (res != FR_OK) break;
   83330:	4603      	mov	r3, r0
   83332:	b9d8      	cbnz	r0, 8336c <put_fat+0x134>
			p = &fs->win[clst * 4 % SS(fs)];
   83334:	ea4f 6444 	mov.w	r4, r4, lsl #25
   83338:	ea4f 50d4 	mov.w	r0, r4, lsr #23
   8333c:	f100 0130 	add.w	r1, r0, #48	; 0x30
   83340:	186a      	adds	r2, r5, r1
			val |= LD_DWORD(p) & 0xF0000000;
   83342:	78d4      	ldrb	r4, [r2, #3]
   83344:	ea4f 6104 	mov.w	r1, r4, lsl #24
   83348:	182c      	adds	r4, r5, r0
   8334a:	f001 4070 	and.w	r0, r1, #4026531840	; 0xf0000000
   8334e:	4306      	orrs	r6, r0
			ST_DWORD(p, val);
   83350:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
   83354:	f3c6 2107 	ubfx	r1, r6, #8, #8
   83358:	7051      	strb	r1, [r2, #1]
   8335a:	ea4f 4016 	mov.w	r0, r6, lsr #16
   8335e:	7090      	strb	r0, [r2, #2]
   83360:	ea4f 6616 	mov.w	r6, r6, lsr #24
   83364:	70d6      	strb	r6, [r2, #3]
			break;
   83366:	e001      	b.n	8336c <put_fat+0x134>

		default :
			res = FR_INT_ERR;
   83368:	f04f 0302 	mov.w	r3, #2
		}
		fs->wflag = 1;
   8336c:	f04f 0201 	mov.w	r2, #1
   83370:	712a      	strb	r2, [r5, #4]
   83372:	e004      	b.n	8337e <put_fat+0x146>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
   83374:	f04f 0302 	mov.w	r3, #2
   83378:	e001      	b.n	8337e <put_fat+0x146>
   8337a:	f04f 0302 	mov.w	r3, #2
		}
		fs->wflag = 1;
	}

	return res;
}
   8337e:	4618      	mov	r0, r3
   83380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83382:	bf00      	nop

00083384 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   83384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83388:	4605      	mov	r5, r0
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   8338a:	4689      	mov	r9, r1
   8338c:	b931      	cbnz	r1, 8339c <create_chain+0x18>
		scl = fs->last_clust;			/* Get suggested start point */
   8338e:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   83390:	b18e      	cbz	r6, 833b6 <create_chain+0x32>
   83392:	6980      	ldr	r0, [r0, #24]
   83394:	4286      	cmp	r6, r0
   83396:	bf28      	it	cs
   83398:	2601      	movcs	r6, #1
   8339a:	e00e      	b.n	833ba <create_chain+0x36>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   8339c:	f243 0355 	movw	r3, #12373	; 0x3055
   833a0:	f2c0 0308 	movt	r3, #8
   833a4:	4798      	blx	r3
   833a6:	4601      	mov	r1, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
   833a8:	2801      	cmp	r0, #1
   833aa:	d94e      	bls.n	8344a <create_chain+0xc6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   833ac:	69aa      	ldr	r2, [r5, #24]
   833ae:	4290      	cmp	r0, r2
   833b0:	d355      	bcc.n	8345e <create_chain+0xda>
		scl = clst;
   833b2:	464e      	mov	r6, r9
   833b4:	e001      	b.n	833ba <create_chain+0x36>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
   833b6:	f04f 0601 	mov.w	r6, #1
		if (cs < 2) return 1;			/* It is an invalid cluster */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
   833ba:	4634      	mov	r4, r6
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
   833bc:	f04f 0802 	mov.w	r8, #2
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   833c0:	f243 0755 	movw	r7, #12373	; 0x3055
   833c4:	f2c0 0708 	movt	r7, #8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
   833c8:	f104 0401 	add.w	r4, r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   833cc:	69a9      	ldr	r1, [r5, #24]
   833ce:	428c      	cmp	r4, r1
   833d0:	d302      	bcc.n	833d8 <create_chain+0x54>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
   833d2:	2e01      	cmp	r6, #1
   833d4:	d93c      	bls.n	83450 <create_chain+0xcc>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
   833d6:	4644      	mov	r4, r8
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   833d8:	4628      	mov	r0, r5
   833da:	4621      	mov	r1, r4
   833dc:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
   833de:	4601      	mov	r1, r0
   833e0:	b138      	cbz	r0, 833f2 <create_chain+0x6e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   833e2:	f1b0 3fff 	cmp.w	r0, #4294967295
   833e6:	d03a      	beq.n	8345e <create_chain+0xda>
   833e8:	2801      	cmp	r0, #1
   833ea:	d038      	beq.n	8345e <create_chain+0xda>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
   833ec:	42b4      	cmp	r4, r6
   833ee:	d1eb      	bne.n	833c8 <create_chain+0x44>
   833f0:	e031      	b.n	83456 <create_chain+0xd2>
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
   833f2:	4626      	mov	r6, r4
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   833f4:	4628      	mov	r0, r5
   833f6:	4621      	mov	r1, r4
   833f8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   833fc:	f243 2339 	movw	r3, #12857	; 0x3239
   83400:	f2c0 0308 	movt	r3, #8
   83404:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
   83406:	4602      	mov	r2, r0
   83408:	b9c8      	cbnz	r0, 8343e <create_chain+0xba>
   8340a:	f1b9 0f00 	cmp.w	r9, #0
   8340e:	d009      	beq.n	83424 <create_chain+0xa0>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   83410:	4628      	mov	r0, r5
   83412:	4649      	mov	r1, r9
   83414:	4622      	mov	r2, r4
   83416:	f243 2339 	movw	r3, #12857	; 0x3239
   8341a:	f2c0 0308 	movt	r3, #8
   8341e:	4798      	blx	r3
	}
	if (res == FR_OK) {
   83420:	4602      	mov	r2, r0
   83422:	b960      	cbnz	r0, 8343e <create_chain+0xba>
		fs->last_clust = ncl;			/* Update FSINFO */
   83424:	60ee      	str	r6, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   83426:	6928      	ldr	r0, [r5, #16]
   83428:	f1b0 3fff 	cmp.w	r0, #4294967295
   8342c:	d016      	beq.n	8345c <create_chain+0xd8>
			fs->free_clust--;
   8342e:	f100 33ff 	add.w	r3, r0, #4294967295
   83432:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
   83434:	f04f 0201 	mov.w	r2, #1
   83438:	716a      	strb	r2, [r5, #5]
   8343a:	4621      	mov	r1, r4
   8343c:	e00f      	b.n	8345e <create_chain+0xda>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   8343e:	2a01      	cmp	r2, #1
   83440:	bf14      	ite	ne
   83442:	2101      	movne	r1, #1
   83444:	f04f 31ff 	moveq.w	r1, #4294967295
   83448:	e009      	b.n	8345e <create_chain+0xda>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
   8344a:	f04f 0101 	mov.w	r1, #1
   8344e:	e006      	b.n	8345e <create_chain+0xda>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
   83450:	f04f 0100 	mov.w	r1, #0
   83454:	e003      	b.n	8345e <create_chain+0xda>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
   83456:	f04f 0100 	mov.w	r1, #0
   8345a:	e000      	b.n	8345e <create_chain+0xda>
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
   8345c:	4621      	mov	r1, r4
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
	}

	return ncl;		/* Return new cluster number or error code */
}
   8345e:	4608      	mov	r0, r1
   83460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00083464 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   83464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83468:	4604      	mov	r4, r0
   8346a:	460e      	mov	r6, r1
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   8346c:	88c5      	ldrh	r5, [r0, #6]
   8346e:	f105 0501 	add.w	r5, r5, #1
   83472:	b2ad      	uxth	r5, r5
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   83474:	2d00      	cmp	r5, #0
   83476:	d07c      	beq.n	83572 <dir_next+0x10e>
   83478:	6903      	ldr	r3, [r0, #16]
   8347a:	2b00      	cmp	r3, #0
   8347c:	d07d      	beq.n	8357a <dir_next+0x116>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   8347e:	f015 070f 	ands.w	r7, r5, #15
   83482:	d16a      	bne.n	8355a <dir_next+0xf6>
		dj->sect++;					/* Next sector */
   83484:	f103 0301 	add.w	r3, r3, #1
   83488:	6103      	str	r3, [r0, #16]

		if (dj->clust == 0) {	/* Static table */
   8348a:	68c1      	ldr	r1, [r0, #12]
   8348c:	b921      	cbnz	r1, 83498 <dir_next+0x34>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   8348e:	6803      	ldr	r3, [r0, #0]
   83490:	891a      	ldrh	r2, [r3, #8]
   83492:	42aa      	cmp	r2, r5
   83494:	d975      	bls.n	83582 <dir_next+0x11e>
   83496:	e060      	b.n	8355a <dir_next+0xf6>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   83498:	6800      	ldr	r0, [r0, #0]
   8349a:	7882      	ldrb	r2, [r0, #2]
   8349c:	f102 33ff 	add.w	r3, r2, #4294967295
   834a0:	ea13 1315 	ands.w	r3, r3, r5, lsr #4
   834a4:	d159      	bne.n	8355a <dir_next+0xf6>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   834a6:	f243 0255 	movw	r2, #12373	; 0x3055
   834aa:	f2c0 0208 	movt	r2, #8
   834ae:	4790      	blx	r2
   834b0:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
   834b2:	2801      	cmp	r0, #1
   834b4:	d969      	bls.n	8358a <dir_next+0x126>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   834b6:	f1b0 3fff 	cmp.w	r0, #4294967295
   834ba:	d06a      	beq.n	83592 <dir_next+0x12e>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   834bc:	6820      	ldr	r0, [r4, #0]
   834be:	6981      	ldr	r1, [r0, #24]
   834c0:	4588      	cmp	r8, r1
   834c2:	d340      	bcc.n	83546 <dir_next+0xe2>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   834c4:	2e00      	cmp	r6, #0
   834c6:	d068      	beq.n	8359a <dir_next+0x136>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   834c8:	68e1      	ldr	r1, [r4, #12]
   834ca:	4b40      	ldr	r3, [pc, #256]	; (835cc <dir_next+0x168>)
   834cc:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   834ce:	4680      	mov	r8, r0
   834d0:	2800      	cmp	r0, #0
   834d2:	d066      	beq.n	835a2 <dir_next+0x13e>
					if (clst == 1) return FR_INT_ERR;
   834d4:	2801      	cmp	r0, #1
   834d6:	d068      	beq.n	835aa <dir_next+0x146>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   834d8:	f1b0 3fff 	cmp.w	r0, #4294967295
   834dc:	d069      	beq.n	835b2 <dir_next+0x14e>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   834de:	6820      	ldr	r0, [r4, #0]
   834e0:	f04f 0100 	mov.w	r1, #0
   834e4:	4a3a      	ldr	r2, [pc, #232]	; (835d0 <dir_next+0x16c>)
   834e6:	4790      	blx	r2
   834e8:	2800      	cmp	r0, #0
   834ea:	d166      	bne.n	835ba <dir_next+0x156>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   834ec:	6820      	ldr	r0, [r4, #0]
   834ee:	f100 0030 	add.w	r0, r0, #48	; 0x30
   834f2:	f04f 0100 	mov.w	r1, #0
   834f6:	f44f 7200 	mov.w	r2, #512	; 0x200
   834fa:	4e36      	ldr	r6, [pc, #216]	; (835d4 <dir_next+0x170>)
   834fc:	47b0      	blx	r6
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   834fe:	6826      	ldr	r6, [r4, #0]
   83500:	4630      	mov	r0, r6
   83502:	4641      	mov	r1, r8
   83504:	4b34      	ldr	r3, [pc, #208]	; (835d8 <dir_next+0x174>)
   83506:	4798      	blx	r3
   83508:	62f0      	str	r0, [r6, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   8350a:	f04f 0600 	mov.w	r6, #0
						dj->fs->wflag = 1;
   8350e:	f04f 0a01 	mov.w	sl, #1
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   83512:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 835d0 <dir_next+0x16c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   83516:	e00f      	b.n	83538 <dir_next+0xd4>
						dj->fs->wflag = 1;
   83518:	f880 a004 	strb.w	sl, [r0, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   8351c:	6820      	ldr	r0, [r4, #0]
   8351e:	f04f 0100 	mov.w	r1, #0
   83522:	47c8      	blx	r9
   83524:	2800      	cmp	r0, #0
   83526:	d14c      	bne.n	835c2 <dir_next+0x15e>
						dj->fs->winsect++;
   83528:	6820      	ldr	r0, [r4, #0]
   8352a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   8352c:	f101 0101 	add.w	r1, r1, #1
   83530:	62c1      	str	r1, [r0, #44]	; 0x2c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   83532:	f106 0601 	add.w	r6, r6, #1
   83536:	b2f6      	uxtb	r6, r6
   83538:	6820      	ldr	r0, [r4, #0]
   8353a:	7881      	ldrb	r1, [r0, #2]
   8353c:	42b1      	cmp	r1, r6
   8353e:	d8eb      	bhi.n	83518 <dir_next+0xb4>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   83540:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   83542:	1b93      	subs	r3, r2, r6
   83544:	62c3      	str	r3, [r0, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   83546:	f8c4 800c 	str.w	r8, [r4, #12]
				dj->sect = clust2sect(dj->fs, clst);
   8354a:	6820      	ldr	r0, [r4, #0]
   8354c:	4641      	mov	r1, r8
   8354e:	f242 7245 	movw	r2, #10053	; 0x2745
   83552:	f2c0 0208 	movt	r2, #8
   83556:	4790      	blx	r2
   83558:	6120      	str	r0, [r4, #16]
			}
		}
	}

	dj->index = i;
   8355a:	80e5      	strh	r5, [r4, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   8355c:	ea4f 1747 	mov.w	r7, r7, lsl #5
   83560:	f107 0730 	add.w	r7, r7, #48	; 0x30
   83564:	6820      	ldr	r0, [r4, #0]
   83566:	19c1      	adds	r1, r0, r7
   83568:	6161      	str	r1, [r4, #20]

	return FR_OK;
   8356a:	f04f 0000 	mov.w	r0, #0
   8356e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
   83572:	f04f 0004 	mov.w	r0, #4
   83576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8357a:	f04f 0004 	mov.w	r0, #4
   8357e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
   83582:	f04f 0004 	mov.w	r0, #4
   83586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
   8358a:	f04f 0002 	mov.w	r0, #2
   8358e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   83592:	f04f 0001 	mov.w	r0, #1
   83596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   8359a:	f04f 0004 	mov.w	r0, #4
   8359e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   835a2:	f04f 0007 	mov.w	r0, #7
   835a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst == 1) return FR_INT_ERR;
   835aa:	f04f 0002 	mov.w	r0, #2
   835ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   835b2:	f04f 0001 	mov.w	r0, #1
   835b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   835ba:	f04f 0001 	mov.w	r0, #1
   835be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   835c2:	f04f 0001 	mov.w	r0, #1

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
   835c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   835ca:	bf00      	nop
   835cc:	00083385 	.word	0x00083385
   835d0:	00082f49 	.word	0x00082f49
   835d4:	000826f5 	.word	0x000826f5
   835d8:	00082745 	.word	0x00082745

000835dc <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   835dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   835e0:	b085      	sub	sp, #20
   835e2:	4604      	mov	r4, r0
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   835e4:	f04f 0100 	mov.w	r1, #0
   835e8:	f243 137d 	movw	r3, #12669	; 0x317d
   835ec:	f2c0 0308 	movt	r3, #8
   835f0:	4798      	blx	r3
	if (res != FR_OK) return res;
   835f2:	4607      	mov	r7, r0
   835f4:	2800      	cmp	r0, #0
   835f6:	f040 823b 	bne.w	83a70 <dir_find+0x494>
   835fa:	f04f 0bff 	mov.w	fp, #255	; 0xff
   835fe:	46d8      	mov	r8, fp

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   83600:	f642 7949 	movw	r9, #12105	; 0x2f49
   83604:	f2c0 0908 	movt	r9, #8
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
			ord = 0xFF;
   83608:	46da      	mov	sl, fp
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   8360a:	f242 1019 	movw	r0, #8473	; 0x2119
   8360e:	f2c0 0008 	movt	r0, #8
   83612:	9001      	str	r0, [sp, #4]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   83614:	f242 7165 	movw	r1, #10085	; 0x2765
   83618:	f2c0 0108 	movt	r1, #8
   8361c:	9100      	str	r1, [sp, #0]

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   8361e:	6820      	ldr	r0, [r4, #0]
   83620:	6921      	ldr	r1, [r4, #16]
   83622:	47c8      	blx	r9
		if (res != FR_OK) break;
   83624:	4607      	mov	r7, r0
   83626:	2800      	cmp	r0, #0
   83628:	f040 8222 	bne.w	83a70 <dir_find+0x494>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   8362c:	6965      	ldr	r5, [r4, #20]
		c = dir[DIR_Name];
   8362e:	782e      	ldrb	r6, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   83630:	2e00      	cmp	r6, #0
   83632:	f000 820f 	beq.w	83a54 <dir_find+0x478>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   83636:	7aeb      	ldrb	r3, [r5, #11]
   83638:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   8363c:	2ee5      	cmp	r6, #229	; 0xe5
   8363e:	f000 81e1 	beq.w	83a04 <dir_find+0x428>
   83642:	f003 0008 	and.w	r0, r3, #8
   83646:	b2c1      	uxtb	r1, r0
   83648:	b119      	cbz	r1, 83652 <dir_find+0x76>
   8364a:	2a0f      	cmp	r2, #15
   8364c:	f040 81dc 	bne.w	83a08 <dir_find+0x42c>
   83650:	e002      	b.n	83658 <dir_find+0x7c>
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   83652:	2a0f      	cmp	r2, #15
   83654:	f040 8198 	bne.w	83988 <dir_find+0x3ac>
				if (dj->lfn) {
   83658:	69e7      	ldr	r7, [r4, #28]
   8365a:	2f00      	cmp	r7, #0
   8365c:	f000 81ed 	beq.w	83a3a <dir_find+0x45e>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   83660:	f006 0140 	and.w	r1, r6, #64	; 0x40
   83664:	b2cb      	uxtb	r3, r1
   83666:	b133      	cbz	r3, 83676 <dir_find+0x9a>
						sum = dir[LDIR_Chksum];
   83668:	f895 b00d 	ldrb.w	fp, [r5, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
   8366c:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dj->lfn_idx = dj->index;
   83670:	88e2      	ldrh	r2, [r4, #6]
   83672:	8422      	strh	r2, [r4, #32]
   83674:	e004      	b.n	83680 <dir_find+0xa4>
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   83676:	45b0      	cmp	r8, r6
   83678:	bf18      	it	ne
   8367a:	46d0      	movne	r8, sl
   8367c:	f040 81dd 	bne.w	83a3a <dir_find+0x45e>
   83680:	7b68      	ldrb	r0, [r5, #13]
   83682:	9002      	str	r0, [sp, #8]
   83684:	4558      	cmp	r0, fp
   83686:	f040 81c1 	bne.w	83a0c <dir_find+0x430>
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   8368a:	7829      	ldrb	r1, [r5, #0]
   8368c:	f021 0340 	bic.w	r3, r1, #64	; 0x40
   83690:	f103 30ff 	add.w	r0, r3, #4294967295
   83694:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   83698:	eb00 0182 	add.w	r1, r0, r2, lsl #2
   8369c:	9103      	str	r1, [sp, #12]
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   8369e:	78a8      	ldrb	r0, [r5, #2]
   836a0:	786b      	ldrb	r3, [r5, #1]
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   836a2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   836a6:	9a01      	ldr	r2, [sp, #4]
   836a8:	4790      	blx	r2
   836aa:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   836ac:	9903      	ldr	r1, [sp, #12]
   836ae:	29fe      	cmp	r1, #254	; 0xfe
   836b0:	f200 81da 	bhi.w	83a68 <dir_find+0x48c>
   836b4:	f101 0b01 	add.w	fp, r1, #1
   836b8:	f837 0011 	ldrh.w	r0, [r7, r1, lsl #1]
   836bc:	9b01      	ldr	r3, [sp, #4]
   836be:	4798      	blx	r3
   836c0:	4580      	cmp	r8, r0
   836c2:	f040 81d1 	bne.w	83a68 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   836c6:	7928      	ldrb	r0, [r5, #4]
   836c8:	78ea      	ldrb	r2, [r5, #3]
   836ca:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
   836ce:	f1b8 0f00 	cmp.w	r8, #0
   836d2:	d104      	bne.n	836de <dir_find+0x102>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   836d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   836d8:	4288      	cmp	r0, r1
   836da:	d011      	beq.n	83700 <dir_find+0x124>
   836dc:	e1c4      	b.n	83a68 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   836de:	9b01      	ldr	r3, [sp, #4]
   836e0:	4798      	blx	r3
   836e2:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   836e4:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
   836e8:	f200 81be 	bhi.w	83a68 <dir_find+0x48c>
   836ec:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
   836f0:	9a03      	ldr	r2, [sp, #12]
   836f2:	f102 0b02 	add.w	fp, r2, #2
   836f6:	9901      	ldr	r1, [sp, #4]
   836f8:	4788      	blx	r1
   836fa:	4580      	cmp	r8, r0
   836fc:	f040 81b4 	bne.w	83a68 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   83700:	79a8      	ldrb	r0, [r5, #6]
   83702:	796b      	ldrb	r3, [r5, #5]
   83704:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
   83708:	f1b8 0f00 	cmp.w	r8, #0
   8370c:	d104      	bne.n	83718 <dir_find+0x13c>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   8370e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   83712:	4290      	cmp	r0, r2
   83714:	d010      	beq.n	83738 <dir_find+0x15c>
   83716:	e1a7      	b.n	83a68 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   83718:	9901      	ldr	r1, [sp, #4]
   8371a:	4788      	blx	r1
   8371c:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   8371e:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
   83722:	f200 81a1 	bhi.w	83a68 <dir_find+0x48c>
   83726:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
   8372a:	f10b 0b01 	add.w	fp, fp, #1
   8372e:	9b01      	ldr	r3, [sp, #4]
   83730:	4798      	blx	r3
   83732:	4580      	cmp	r8, r0
   83734:	f040 8198 	bne.w	83a68 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   83738:	7a28      	ldrb	r0, [r5, #8]
   8373a:	79ea      	ldrb	r2, [r5, #7]
   8373c:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
   83740:	f1b8 0f00 	cmp.w	r8, #0
   83744:	d104      	bne.n	83750 <dir_find+0x174>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   83746:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8374a:	4288      	cmp	r0, r1
   8374c:	d010      	beq.n	83770 <dir_find+0x194>
   8374e:	e18b      	b.n	83a68 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   83750:	9b01      	ldr	r3, [sp, #4]
   83752:	4798      	blx	r3
   83754:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   83756:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
   8375a:	f200 8185 	bhi.w	83a68 <dir_find+0x48c>
   8375e:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
   83762:	f10b 0b01 	add.w	fp, fp, #1
   83766:	9a01      	ldr	r2, [sp, #4]
   83768:	4790      	blx	r2
   8376a:	4580      	cmp	r8, r0
   8376c:	f040 817c 	bne.w	83a68 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   83770:	7aa8      	ldrb	r0, [r5, #10]
   83772:	7a69      	ldrb	r1, [r5, #9]
   83774:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
   83778:	f1b8 0f00 	cmp.w	r8, #0
   8377c:	d104      	bne.n	83788 <dir_find+0x1ac>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   8377e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   83782:	4298      	cmp	r0, r3
   83784:	d010      	beq.n	837a8 <dir_find+0x1cc>
   83786:	e16f      	b.n	83a68 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   83788:	9a01      	ldr	r2, [sp, #4]
   8378a:	4790      	blx	r2
   8378c:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   8378e:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
   83792:	f200 8169 	bhi.w	83a68 <dir_find+0x48c>
   83796:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
   8379a:	f10b 0b01 	add.w	fp, fp, #1
   8379e:	9901      	ldr	r1, [sp, #4]
   837a0:	4788      	blx	r1
   837a2:	4580      	cmp	r8, r0
   837a4:	f040 8160 	bne.w	83a68 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   837a8:	7be8      	ldrb	r0, [r5, #15]
   837aa:	7bab      	ldrb	r3, [r5, #14]
   837ac:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
   837b0:	f1b8 0f00 	cmp.w	r8, #0
   837b4:	d104      	bne.n	837c0 <dir_find+0x1e4>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   837b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   837ba:	4290      	cmp	r0, r2
   837bc:	d010      	beq.n	837e0 <dir_find+0x204>
   837be:	e153      	b.n	83a68 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   837c0:	9901      	ldr	r1, [sp, #4]
   837c2:	4788      	blx	r1
   837c4:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   837c6:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
   837ca:	f200 814d 	bhi.w	83a68 <dir_find+0x48c>
   837ce:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
   837d2:	f10b 0b01 	add.w	fp, fp, #1
   837d6:	9b01      	ldr	r3, [sp, #4]
   837d8:	4798      	blx	r3
   837da:	4580      	cmp	r8, r0
   837dc:	f040 8144 	bne.w	83a68 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   837e0:	7c68      	ldrb	r0, [r5, #17]
   837e2:	7c2a      	ldrb	r2, [r5, #16]
   837e4:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
   837e8:	f1b8 0f00 	cmp.w	r8, #0
   837ec:	d104      	bne.n	837f8 <dir_find+0x21c>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   837ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
   837f2:	4288      	cmp	r0, r1
   837f4:	d010      	beq.n	83818 <dir_find+0x23c>
   837f6:	e137      	b.n	83a68 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   837f8:	9b01      	ldr	r3, [sp, #4]
   837fa:	4798      	blx	r3
   837fc:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   837fe:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
   83802:	f200 8131 	bhi.w	83a68 <dir_find+0x48c>
   83806:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
   8380a:	f10b 0b01 	add.w	fp, fp, #1
   8380e:	9a01      	ldr	r2, [sp, #4]
   83810:	4790      	blx	r2
   83812:	4580      	cmp	r8, r0
   83814:	f040 8128 	bne.w	83a68 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   83818:	7ce8      	ldrb	r0, [r5, #19]
   8381a:	7ca9      	ldrb	r1, [r5, #18]
   8381c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
   83820:	f1b8 0f00 	cmp.w	r8, #0
   83824:	d104      	bne.n	83830 <dir_find+0x254>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   83826:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8382a:	4298      	cmp	r0, r3
   8382c:	d010      	beq.n	83850 <dir_find+0x274>
   8382e:	e11b      	b.n	83a68 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   83830:	9a01      	ldr	r2, [sp, #4]
   83832:	4790      	blx	r2
   83834:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   83836:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
   8383a:	f200 8115 	bhi.w	83a68 <dir_find+0x48c>
   8383e:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
   83842:	f10b 0b01 	add.w	fp, fp, #1
   83846:	9901      	ldr	r1, [sp, #4]
   83848:	4788      	blx	r1
   8384a:	4580      	cmp	r8, r0
   8384c:	f040 810c 	bne.w	83a68 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   83850:	7d68      	ldrb	r0, [r5, #21]
   83852:	7d2b      	ldrb	r3, [r5, #20]
   83854:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
   83858:	f1b8 0f00 	cmp.w	r8, #0
   8385c:	d104      	bne.n	83868 <dir_find+0x28c>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   8385e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   83862:	4290      	cmp	r0, r2
   83864:	d010      	beq.n	83888 <dir_find+0x2ac>
   83866:	e0ff      	b.n	83a68 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   83868:	9901      	ldr	r1, [sp, #4]
   8386a:	4788      	blx	r1
   8386c:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   8386e:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
   83872:	f200 80f9 	bhi.w	83a68 <dir_find+0x48c>
   83876:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
   8387a:	f10b 0b01 	add.w	fp, fp, #1
   8387e:	9b01      	ldr	r3, [sp, #4]
   83880:	4798      	blx	r3
   83882:	4580      	cmp	r8, r0
   83884:	f040 80f0 	bne.w	83a68 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   83888:	7de8      	ldrb	r0, [r5, #23]
   8388a:	7daa      	ldrb	r2, [r5, #22]
   8388c:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
   83890:	f1b8 0f00 	cmp.w	r8, #0
   83894:	d104      	bne.n	838a0 <dir_find+0x2c4>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   83896:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8389a:	4288      	cmp	r0, r1
   8389c:	d010      	beq.n	838c0 <dir_find+0x2e4>
   8389e:	e0e3      	b.n	83a68 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   838a0:	9b01      	ldr	r3, [sp, #4]
   838a2:	4798      	blx	r3
   838a4:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   838a6:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
   838aa:	f200 80dd 	bhi.w	83a68 <dir_find+0x48c>
   838ae:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
   838b2:	f10b 0b01 	add.w	fp, fp, #1
   838b6:	9a01      	ldr	r2, [sp, #4]
   838b8:	4790      	blx	r2
   838ba:	4580      	cmp	r8, r0
   838bc:	f040 80d4 	bne.w	83a68 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   838c0:	7e68      	ldrb	r0, [r5, #25]
   838c2:	7e29      	ldrb	r1, [r5, #24]
   838c4:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
   838c8:	f1b8 0f00 	cmp.w	r8, #0
   838cc:	d104      	bne.n	838d8 <dir_find+0x2fc>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   838ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
   838d2:	4298      	cmp	r0, r3
   838d4:	d010      	beq.n	838f8 <dir_find+0x31c>
   838d6:	e0c7      	b.n	83a68 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   838d8:	9a01      	ldr	r2, [sp, #4]
   838da:	4790      	blx	r2
   838dc:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   838de:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
   838e2:	f200 80c1 	bhi.w	83a68 <dir_find+0x48c>
   838e6:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
   838ea:	f10b 0b01 	add.w	fp, fp, #1
   838ee:	9901      	ldr	r1, [sp, #4]
   838f0:	4788      	blx	r1
   838f2:	4580      	cmp	r8, r0
   838f4:	f040 80b8 	bne.w	83a68 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   838f8:	7f68      	ldrb	r0, [r5, #29]
   838fa:	7f2b      	ldrb	r3, [r5, #28]
   838fc:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
   83900:	f1b8 0f00 	cmp.w	r8, #0
   83904:	d104      	bne.n	83910 <dir_find+0x334>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   83906:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8390a:	4290      	cmp	r0, r2
   8390c:	d010      	beq.n	83930 <dir_find+0x354>
   8390e:	e0ab      	b.n	83a68 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   83910:	9901      	ldr	r1, [sp, #4]
   83912:	4788      	blx	r1
   83914:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   83916:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
   8391a:	f200 80a5 	bhi.w	83a68 <dir_find+0x48c>
   8391e:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
   83922:	f10b 0b01 	add.w	fp, fp, #1
   83926:	9b01      	ldr	r3, [sp, #4]
   83928:	4798      	blx	r3
   8392a:	4580      	cmp	r8, r0
   8392c:	f040 809c 	bne.w	83a68 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   83930:	7fe8      	ldrb	r0, [r5, #31]
   83932:	7faa      	ldrb	r2, [r5, #30]
   83934:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
   83938:	f1b8 0f00 	cmp.w	r8, #0
   8393c:	d010      	beq.n	83960 <dir_find+0x384>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   8393e:	9901      	ldr	r1, [sp, #4]
   83940:	4788      	blx	r1
   83942:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   83944:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
   83948:	f200 808e 	bhi.w	83a68 <dir_find+0x48c>
   8394c:	f10b 0301 	add.w	r3, fp, #1
   83950:	9303      	str	r3, [sp, #12]
   83952:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
   83956:	9a01      	ldr	r2, [sp, #4]
   83958:	4790      	blx	r2
   8395a:	4580      	cmp	r8, r0
   8395c:	d005      	beq.n	8396a <dir_find+0x38e>
   8395e:	e083      	b.n	83a68 <dir_find+0x48c>
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   83960:	f64f 77ff 	movw	r7, #65535	; 0xffff
   83964:	42b8      	cmp	r0, r7
   83966:	d078      	beq.n	83a5a <dir_find+0x47e>
   83968:	e07e      	b.n	83a68 <dir_find+0x48c>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   8396a:	7828      	ldrb	r0, [r5, #0]
   8396c:	f000 0140 	and.w	r1, r0, #64	; 0x40
   83970:	b2cb      	uxtb	r3, r1
   83972:	2b00      	cmp	r3, #0
   83974:	d071      	beq.n	83a5a <dir_find+0x47e>
   83976:	f1b8 0f00 	cmp.w	r8, #0
   8397a:	d06e      	beq.n	83a5a <dir_find+0x47e>
   8397c:	9a03      	ldr	r2, [sp, #12]
   8397e:	f837 7012 	ldrh.w	r7, [r7, r2, lsl #1]
   83982:	2f00      	cmp	r7, #0
   83984:	d069      	beq.n	83a5a <dir_find+0x47e>
   83986:	e06f      	b.n	83a68 <dir_find+0x48c>
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   83988:	f1b8 0f00 	cmp.w	r8, #0
   8398c:	d104      	bne.n	83998 <dir_find+0x3bc>
   8398e:	4628      	mov	r0, r5
   83990:	9b00      	ldr	r3, [sp, #0]
   83992:	4798      	blx	r3
   83994:	4558      	cmp	r0, fp
   83996:	d06b      	beq.n	83a70 <dir_find+0x494>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   83998:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8399c:	8422      	strh	r2, [r4, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   8399e:	69a0      	ldr	r0, [r4, #24]
   839a0:	7ac1      	ldrb	r1, [r0, #11]
   839a2:	f011 0f01 	tst.w	r1, #1
   839a6:	d133      	bne.n	83a10 <dir_find+0x434>
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   839a8:	782b      	ldrb	r3, [r5, #0]
   839aa:	7802      	ldrb	r2, [r0, #0]
   839ac:	4293      	cmp	r3, r2
   839ae:	d131      	bne.n	83a14 <dir_find+0x438>
   839b0:	7869      	ldrb	r1, [r5, #1]
   839b2:	7843      	ldrb	r3, [r0, #1]
   839b4:	4299      	cmp	r1, r3
   839b6:	d12f      	bne.n	83a18 <dir_find+0x43c>
   839b8:	78a9      	ldrb	r1, [r5, #2]
   839ba:	7882      	ldrb	r2, [r0, #2]
   839bc:	4291      	cmp	r1, r2
   839be:	d12d      	bne.n	83a1c <dir_find+0x440>
   839c0:	78eb      	ldrb	r3, [r5, #3]
   839c2:	78c1      	ldrb	r1, [r0, #3]
   839c4:	428b      	cmp	r3, r1
   839c6:	d12b      	bne.n	83a20 <dir_find+0x444>
   839c8:	792b      	ldrb	r3, [r5, #4]
   839ca:	7902      	ldrb	r2, [r0, #4]
   839cc:	4293      	cmp	r3, r2
   839ce:	d129      	bne.n	83a24 <dir_find+0x448>
   839d0:	7969      	ldrb	r1, [r5, #5]
   839d2:	7943      	ldrb	r3, [r0, #5]
   839d4:	4299      	cmp	r1, r3
   839d6:	d127      	bne.n	83a28 <dir_find+0x44c>
   839d8:	79a9      	ldrb	r1, [r5, #6]
   839da:	7982      	ldrb	r2, [r0, #6]
   839dc:	4291      	cmp	r1, r2
   839de:	d125      	bne.n	83a2c <dir_find+0x450>
   839e0:	79eb      	ldrb	r3, [r5, #7]
   839e2:	79c1      	ldrb	r1, [r0, #7]
   839e4:	428b      	cmp	r3, r1
   839e6:	d123      	bne.n	83a30 <dir_find+0x454>
   839e8:	7a2b      	ldrb	r3, [r5, #8]
   839ea:	7a02      	ldrb	r2, [r0, #8]
   839ec:	4293      	cmp	r3, r2
   839ee:	d121      	bne.n	83a34 <dir_find+0x458>
   839f0:	7a69      	ldrb	r1, [r5, #9]
   839f2:	7a43      	ldrb	r3, [r0, #9]
   839f4:	4299      	cmp	r1, r3
   839f6:	d11f      	bne.n	83a38 <dir_find+0x45c>
   839f8:	7aaa      	ldrb	r2, [r5, #10]
   839fa:	7a80      	ldrb	r0, [r0, #10]
   839fc:	4282      	cmp	r2, r0
   839fe:	d037      	beq.n	83a70 <dir_find+0x494>
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   83a00:	46d0      	mov	r8, sl
   83a02:	e01a      	b.n	83a3a <dir_find+0x45e>
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
			ord = 0xFF;
   83a04:	46d0      	mov	r8, sl
   83a06:	e018      	b.n	83a3a <dir_find+0x45e>
   83a08:	46d0      	mov	r8, sl
   83a0a:	e016      	b.n	83a3a <dir_find+0x45e>
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   83a0c:	46d0      	mov	r8, sl
   83a0e:	e014      	b.n	83a3a <dir_find+0x45e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   83a10:	46d0      	mov	r8, sl
   83a12:	e012      	b.n	83a3a <dir_find+0x45e>
   83a14:	46d0      	mov	r8, sl
   83a16:	e010      	b.n	83a3a <dir_find+0x45e>
   83a18:	46d0      	mov	r8, sl
   83a1a:	e00e      	b.n	83a3a <dir_find+0x45e>
   83a1c:	46d0      	mov	r8, sl
   83a1e:	e00c      	b.n	83a3a <dir_find+0x45e>
   83a20:	46d0      	mov	r8, sl
   83a22:	e00a      	b.n	83a3a <dir_find+0x45e>
   83a24:	46d0      	mov	r8, sl
   83a26:	e008      	b.n	83a3a <dir_find+0x45e>
   83a28:	46d0      	mov	r8, sl
   83a2a:	e006      	b.n	83a3a <dir_find+0x45e>
   83a2c:	46d0      	mov	r8, sl
   83a2e:	e004      	b.n	83a3a <dir_find+0x45e>
   83a30:	46d0      	mov	r8, sl
   83a32:	e002      	b.n	83a3a <dir_find+0x45e>
   83a34:	46d0      	mov	r8, sl
   83a36:	e000      	b.n	83a3a <dir_find+0x45e>
   83a38:	46d0      	mov	r8, sl
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   83a3a:	4620      	mov	r0, r4
   83a3c:	f04f 0100 	mov.w	r1, #0
   83a40:	f243 4365 	movw	r3, #13413	; 0x3465
   83a44:	f2c0 0308 	movt	r3, #8
   83a48:	4798      	blx	r3
	} while (res == FR_OK);
   83a4a:	4607      	mov	r7, r0
   83a4c:	2800      	cmp	r0, #0
   83a4e:	f43f ade6 	beq.w	8361e <dir_find+0x42>
   83a52:	e00d      	b.n	83a70 <dir_find+0x494>
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   83a54:	f04f 0704 	mov.w	r7, #4
   83a58:	e00a      	b.n	83a70 <dir_find+0x494>
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   83a5a:	f106 36ff 	add.w	r6, r6, #4294967295
   83a5e:	fa5f f886 	uxtb.w	r8, r6
   83a62:	f8dd b008 	ldr.w	fp, [sp, #8]
   83a66:	e7e8      	b.n	83a3a <dir_find+0x45e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   83a68:	f8dd b008 	ldr.w	fp, [sp, #8]
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   83a6c:	46d0      	mov	r8, sl
   83a6e:	e7e4      	b.n	83a3a <dir_find+0x45e>
#endif
		res = dir_next(dj, 0);		/* Next entry */
	} while (res == FR_OK);

	return res;
}
   83a70:	4638      	mov	r0, r7
   83a72:	b005      	add	sp, #20
   83a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00083a78 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   83a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83a7c:	b087      	sub	sp, #28
   83a7e:	9000      	str	r0, [sp, #0]
   83a80:	468b      	mov	fp, r1
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   83a82:	780b      	ldrb	r3, [r1, #0]
   83a84:	2b2f      	cmp	r3, #47	; 0x2f
   83a86:	d001      	beq.n	83a8c <follow_path+0x14>
   83a88:	2b5c      	cmp	r3, #92	; 0x5c
   83a8a:	d101      	bne.n	83a90 <follow_path+0x18>
		path++;
   83a8c:	f10b 0b01 	add.w	fp, fp, #1
	dj->sclust = 0;						/* Start from the root dir */
   83a90:	f04f 0000 	mov.w	r0, #0
   83a94:	9900      	ldr	r1, [sp, #0]
   83a96:	6088      	str	r0, [r1, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   83a98:	f89b 2000 	ldrb.w	r2, [fp]
   83a9c:	2a1f      	cmp	r2, #31
   83a9e:	d80d      	bhi.n	83abc <follow_path+0x44>
		res = dir_sdi(dj, 0);
   83aa0:	4608      	mov	r0, r1
   83aa2:	f04f 0100 	mov.w	r1, #0
   83aa6:	f243 137d 	movw	r3, #12669	; 0x317d
   83aaa:	f2c0 0308 	movt	r3, #8
   83aae:	4798      	blx	r3
   83ab0:	4602      	mov	r2, r0
		dj->dir = 0;
   83ab2:	f04f 0000 	mov.w	r0, #0
   83ab6:	9900      	ldr	r1, [sp, #0]
   83ab8:	6148      	str	r0, [r1, #20]
   83aba:	e1b7      	b.n	83e2c <follow_path+0x3b4>
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   83abc:	f242 04a1 	movw	r4, #8353	; 0x20a1
   83ac0:	f2c0 0408 	movt	r4, #8
   83ac4:	9405      	str	r4, [sp, #20]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   83ac6:	f64b 363c 	movw	r6, #47932	; 0xbb3c
   83aca:	f2c0 0608 	movt	r6, #8
   83ace:	9603      	str	r6, [sp, #12]
   83ad0:	f242 772d 	movw	r7, #10029	; 0x272d
   83ad4:	f2c0 0708 	movt	r7, #8
   83ad8:	9702      	str	r7, [sp, #8]
   83ada:	465e      	mov	r6, fp
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   83adc:	f81b 3b01 	ldrb.w	r3, [fp], #1
   83ae0:	2b2f      	cmp	r3, #47	; 0x2f
   83ae2:	d0fa      	beq.n	83ada <follow_path+0x62>
   83ae4:	2b5c      	cmp	r3, #92	; 0x5c
   83ae6:	d0f8      	beq.n	83ada <follow_path+0x62>
	lfn = dj->lfn;
   83ae8:	9800      	ldr	r0, [sp, #0]
   83aea:	69c1      	ldr	r1, [r0, #28]
   83aec:	9101      	str	r1, [sp, #4]
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
   83aee:	7830      	ldrb	r0, [r6, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   83af0:	281f      	cmp	r0, #31
   83af2:	f240 8173 	bls.w	83ddc <follow_path+0x364>
   83af6:	282f      	cmp	r0, #47	; 0x2f
   83af8:	f000 815a 	beq.w	83db0 <follow_path+0x338>
   83afc:	285c      	cmp	r0, #92	; 0x5c
   83afe:	f000 815c 	beq.w	83dba <follow_path+0x342>
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
   83b02:	460f      	mov	r7, r1
   83b04:	f1a7 0702 	sub.w	r7, r7, #2
   83b08:	4635      	mov	r5, r6
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
   83b0a:	f04f 0401 	mov.w	r4, #1
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   83b0e:	46a3      	mov	fp, r4
   83b10:	9604      	str	r6, [sp, #16]
   83b12:	f8dd a014 	ldr.w	sl, [sp, #20]
   83b16:	e012      	b.n	83b3e <follow_path+0xc6>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   83b18:	2b2f      	cmp	r3, #47	; 0x2f
   83b1a:	f000 8153 	beq.w	83dc4 <follow_path+0x34c>
   83b1e:	2b5c      	cmp	r3, #92	; 0x5c
   83b20:	f000 8152 	beq.w	83dc8 <follow_path+0x350>
		if (di >= _MAX_LFN)				/* Reject too long name */
   83b24:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   83b28:	f000 8175 	beq.w	83e16 <follow_path+0x39e>
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
   83b2c:	4689      	mov	r9, r1
   83b2e:	460c      	mov	r4, r1
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   83b30:	4659      	mov	r1, fp
   83b32:	47d0      	blx	sl
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   83b34:	4606      	mov	r6, r0
   83b36:	2800      	cmp	r0, #0
   83b38:	f040 81aa 	bne.w	83e90 <follow_path+0x418>
   83b3c:	e16b      	b.n	83e16 <follow_path+0x39e>
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   83b3e:	4659      	mov	r1, fp
   83b40:	47d0      	blx	sl
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   83b42:	4606      	mov	r6, r0
   83b44:	2800      	cmp	r0, #0
   83b46:	f000 8166 	beq.w	83e16 <follow_path+0x39e>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   83b4a:	287f      	cmp	r0, #127	; 0x7f
   83b4c:	d806      	bhi.n	83b5c <follow_path+0xe4>
   83b4e:	9803      	ldr	r0, [sp, #12]
   83b50:	4631      	mov	r1, r6
   83b52:	9a02      	ldr	r2, [sp, #8]
   83b54:	4790      	blx	r2
   83b56:	2800      	cmp	r0, #0
   83b58:	f040 815d 	bne.w	83e16 <follow_path+0x39e>
   83b5c:	f107 0802 	add.w	r8, r7, #2
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
   83b60:	807e      	strh	r6, [r7, #2]
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
   83b62:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   83b66:	4618      	mov	r0, r3
   83b68:	f104 0101 	add.w	r1, r4, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   83b6c:	2b1f      	cmp	r3, #31
   83b6e:	d8d3      	bhi.n	83b18 <follow_path+0xa0>
   83b70:	9e04      	ldr	r6, [sp, #16]
   83b72:	e139      	b.n	83de8 <follow_path+0x370>
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   83b74:	2c00      	cmp	r4, #0
   83b76:	f000 814e 	beq.w	83e16 <follow_path+0x39e>
   83b7a:	f104 30ff 	add.w	r0, r4, #4294967295
   83b7e:	f000 0101 	and.w	r1, r0, #1
		w = lfn[di-1];
   83b82:	9b01      	ldr	r3, [sp, #4]
   83b84:	eb03 0244 	add.w	r2, r3, r4, lsl #1
   83b88:	f832 0d02 	ldrh.w	r0, [r2, #-2]!
		if (w != ' ' && w != '.') break;
   83b8c:	2820      	cmp	r0, #32
   83b8e:	f040 8165 	bne.w	83e5c <follow_path+0x3e4>
   83b92:	e166      	b.n	83e62 <follow_path+0x3ea>
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
   83b94:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
   83b98:	2b20      	cmp	r3, #32
   83b9a:	d001      	beq.n	83ba0 <follow_path+0x128>
   83b9c:	2b2e      	cmp	r3, #46	; 0x2e
   83b9e:	d108      	bne.n	83bb2 <follow_path+0x13a>
		di--;
   83ba0:	f104 30ff 	add.w	r0, r4, #4294967295
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   83ba4:	1e04      	subs	r4, r0, #0
		w = lfn[di-1];
   83ba6:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
		if (w != ' ' && w != '.') break;
   83baa:	2920      	cmp	r1, #32
   83bac:	f040 8169 	bne.w	83e82 <follow_path+0x40a>
   83bb0:	e16a      	b.n	83e88 <follow_path+0x410>
   83bb2:	4626      	mov	r6, r4
		di--;
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   83bb4:	2c00      	cmp	r4, #0
   83bb6:	f000 812e 	beq.w	83e16 <follow_path+0x39e>

	lfn[di] = 0;						/* LFN is created */
   83bba:	9a01      	ldr	r2, [sp, #4]
   83bbc:	eb02 0844 	add.w	r8, r2, r4, lsl #1
   83bc0:	f04f 0500 	mov.w	r5, #0
   83bc4:	f822 5014 	strh.w	r5, [r2, r4, lsl #1]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   83bc8:	9b00      	ldr	r3, [sp, #0]
   83bca:	6998      	ldr	r0, [r3, #24]
   83bcc:	f04f 0120 	mov.w	r1, #32
   83bd0:	f04f 020b 	mov.w	r2, #11
   83bd4:	f242 63f5 	movw	r3, #9973	; 0x26f5
   83bd8:	f2c0 0308 	movt	r3, #8
   83bdc:	4798      	blx	r3
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
   83bde:	9a01      	ldr	r2, [sp, #4]
   83be0:	f1a2 0202 	sub.w	r2, r2, #2
   83be4:	e001      	b.n	83bea <follow_path+0x172>

	lfn[di] = 0;						/* LFN is created */

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   83be6:	f105 0501 	add.w	r5, r5, #1
   83bea:	f832 0f02 	ldrh.w	r0, [r2, #2]!
   83bee:	2820      	cmp	r0, #32
   83bf0:	d0f9      	beq.n	83be6 <follow_path+0x16e>
   83bf2:	282e      	cmp	r0, #46	; 0x2e
   83bf4:	d0f7      	beq.n	83be6 <follow_path+0x16e>
	if (si) cf |= NS_LOSS | NS_LFN;
   83bf6:	2d00      	cmp	r5, #0
   83bf8:	f000 80fb 	beq.w	83df2 <follow_path+0x37a>
   83bfc:	f047 0703 	orr.w	r7, r7, #3
   83c00:	e0f7      	b.n	83df2 <follow_path+0x37a>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   83c02:	f104 30ff 	add.w	r0, r4, #4294967295
   83c06:	4604      	mov	r4, r0
   83c08:	b950      	cbnz	r0, 83c20 <follow_path+0x1a8>
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
			si = di; i = 8; ni = 11;	/* Enter extension section */
   83c0a:	f04f 0908 	mov.w	r9, #8
   83c0e:	f04f 0800 	mov.w	r8, #0
   83c12:	46c2      	mov	sl, r8
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   83c14:	f64b 3348 	movw	r3, #47944	; 0xbb48
   83c18:	f2c0 0308 	movt	r3, #8
   83c1c:	9304      	str	r3, [sp, #16]
   83c1e:	e007      	b.n	83c30 <follow_path+0x1b8>
   83c20:	f1a8 0602 	sub.w	r6, r8, #2

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   83c24:	f836 1c02 	ldrh.w	r1, [r6, #-2]
   83c28:	292e      	cmp	r1, #46	; 0x2e
   83c2a:	f040 810d 	bne.w	83e48 <follow_path+0x3d0>
   83c2e:	e7ec      	b.n	83c0a <follow_path+0x192>

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   83c30:	9801      	ldr	r0, [sp, #4]
   83c32:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]
   83c36:	f105 0501 	add.w	r5, r5, #1
		if (!w) break;					/* Break on end of the LFN */
   83c3a:	2e00      	cmp	r6, #0
   83c3c:	d05c      	beq.n	83cf8 <follow_path+0x280>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   83c3e:	2e20      	cmp	r6, #32
   83c40:	d004      	beq.n	83c4c <follow_path+0x1d4>
   83c42:	2e2e      	cmp	r6, #46	; 0x2e
   83c44:	d105      	bne.n	83c52 <follow_path+0x1da>
   83c46:	42ac      	cmp	r4, r5
   83c48:	f000 80e8 	beq.w	83e1c <follow_path+0x3a4>
			cf |= NS_LOSS | NS_LFN; continue;
   83c4c:	f047 0703 	orr.w	r7, r7, #3
   83c50:	e7ee      	b.n	83c30 <follow_path+0x1b8>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   83c52:	45c8      	cmp	r8, r9
   83c54:	d202      	bcs.n	83c5c <follow_path+0x1e4>
   83c56:	42ac      	cmp	r4, r5
   83c58:	d117      	bne.n	83c8a <follow_path+0x212>
   83c5a:	e0d7      	b.n	83e0c <follow_path+0x394>
			if (ni == 11) {				/* Long extension */
   83c5c:	f1b9 0f0b 	cmp.w	r9, #11
   83c60:	d103      	bne.n	83c6a <follow_path+0x1f2>
				cf |= NS_LOSS | NS_LFN; break;
   83c62:	f047 0703 	orr.w	r7, r7, #3
   83c66:	4650      	mov	r0, sl
   83c68:	e049      	b.n	83cfe <follow_path+0x286>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   83c6a:	42ac      	cmp	r4, r5
   83c6c:	d003      	beq.n	83c76 <follow_path+0x1fe>
   83c6e:	f047 0703 	orr.w	r7, r7, #3
			if (si > di) break;			/* No extension */
   83c72:	42a5      	cmp	r5, r4
   83c74:	d842      	bhi.n	83cfc <follow_path+0x284>
			si = di; i = 8; ni = 11;	/* Enter extension section */
			b <<= 2; continue;
   83c76:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
   83c7a:	fa5f fa8a 	uxtb.w	sl, sl
   83c7e:	4625      	mov	r5, r4
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
			si = di; i = 8; ni = 11;	/* Enter extension section */
   83c80:	f04f 090b 	mov.w	r9, #11
   83c84:	f04f 0808 	mov.w	r8, #8
   83c88:	e7d2      	b.n	83c30 <follow_path+0x1b8>
			b <<= 2; continue;
		}

		if (w >= 0x80) {				/* Non ASCII char */
   83c8a:	2e7f      	cmp	r6, #127	; 0x7f
   83c8c:	d911      	bls.n	83cb2 <follow_path+0x23a>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   83c8e:	4630      	mov	r0, r6
   83c90:	f04f 0100 	mov.w	r1, #0
   83c94:	9e05      	ldr	r6, [sp, #20]
   83c96:	47b0      	blx	r6
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   83c98:	2800      	cmp	r0, #0
   83c9a:	f000 80c4 	beq.w	83e26 <follow_path+0x3ae>
   83c9e:	f64b 22bc 	movw	r2, #47804	; 0xbabc
   83ca2:	f2c0 0208 	movt	r2, #8
   83ca6:	1813      	adds	r3, r2, r0
   83ca8:	f813 6c80 	ldrb.w	r6, [r3, #-128]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   83cac:	f047 0702 	orr.w	r7, r7, #2
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   83cb0:	b126      	cbz	r6, 83cbc <follow_path+0x244>
   83cb2:	9804      	ldr	r0, [sp, #16]
   83cb4:	4631      	mov	r1, r6
   83cb6:	9a02      	ldr	r2, [sp, #8]
   83cb8:	4790      	blx	r2
   83cba:	b120      	cbz	r0, 83cc6 <follow_path+0x24e>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   83cbc:	f047 0703 	orr.w	r7, r7, #3
   83cc0:	f04f 065f 	mov.w	r6, #95	; 0x5f
   83cc4:	e011      	b.n	83cea <follow_path+0x272>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   83cc6:	f1a6 0041 	sub.w	r0, r6, #65	; 0x41
   83cca:	b281      	uxth	r1, r0
   83ccc:	2919      	cmp	r1, #25
   83cce:	d802      	bhi.n	83cd6 <follow_path+0x25e>
					b |= 2;
   83cd0:	f04a 0a02 	orr.w	sl, sl, #2
   83cd4:	e009      	b.n	83cea <follow_path+0x272>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   83cd6:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
   83cda:	b29a      	uxth	r2, r3
   83cdc:	2a19      	cmp	r2, #25
   83cde:	d804      	bhi.n	83cea <follow_path+0x272>
						b |= 1; w -= 0x20;
   83ce0:	f04a 0a01 	orr.w	sl, sl, #1
   83ce4:	f1a6 0620 	sub.w	r6, r6, #32
   83ce8:	b2b6      	uxth	r6, r6
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   83cea:	9800      	ldr	r0, [sp, #0]
   83cec:	6981      	ldr	r1, [r0, #24]
   83cee:	f801 6008 	strb.w	r6, [r1, r8]
   83cf2:	f108 0801 	add.w	r8, r8, #1
   83cf6:	e79b      	b.n	83c30 <follow_path+0x1b8>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
		if (!w) break;					/* Break on end of the LFN */
   83cf8:	4650      	mov	r0, sl
   83cfa:	e000      	b.n	83cfe <follow_path+0x286>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
   83cfc:	4650      	mov	r0, sl
			}
		}
		dj->fn[i++] = (BYTE)w;
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   83cfe:	9b00      	ldr	r3, [sp, #0]
   83d00:	6999      	ldr	r1, [r3, #24]
   83d02:	780a      	ldrb	r2, [r1, #0]
   83d04:	2ae5      	cmp	r2, #229	; 0xe5
   83d06:	bf04      	itt	eq
   83d08:	2205      	moveq	r2, #5
   83d0a:	700a      	strbeq	r2, [r1, #0]

	if (ni == 8) b <<= 2;
   83d0c:	f1b9 0f08 	cmp.w	r9, #8
   83d10:	bf04      	itt	eq
   83d12:	0080      	lsleq	r0, r0, #2
   83d14:	fa5f fa80 	uxtbeq.w	sl, r0
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   83d18:	f00a 000c 	and.w	r0, sl, #12
   83d1c:	280c      	cmp	r0, #12
   83d1e:	d003      	beq.n	83d28 <follow_path+0x2b0>
   83d20:	f00a 0303 	and.w	r3, sl, #3
   83d24:	2b03      	cmp	r3, #3
   83d26:	d101      	bne.n	83d2c <follow_path+0x2b4>
		cf |= NS_LFN;
   83d28:	f047 0702 	orr.w	r7, r7, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   83d2c:	f007 0102 	and.w	r1, r7, #2
   83d30:	b2ca      	uxtb	r2, r1
   83d32:	b952      	cbnz	r2, 83d4a <follow_path+0x2d2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   83d34:	f00a 0a03 	and.w	sl, sl, #3
   83d38:	f1ba 0f01 	cmp.w	sl, #1
   83d3c:	bf08      	it	eq
   83d3e:	f047 0710 	orreq.w	r7, r7, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   83d42:	2804      	cmp	r0, #4
   83d44:	bf08      	it	eq
   83d46:	f047 0708 	orreq.w	r7, r7, #8
	}

	dj->fn[NS] = cf;	/* SFN is created */
   83d4a:	9800      	ldr	r0, [sp, #0]
   83d4c:	6983      	ldr	r3, [r0, #24]
   83d4e:	72df      	strb	r7, [r3, #11]

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
   83d50:	f243 51dd 	movw	r1, #13789	; 0x35dd
   83d54:	f2c0 0108 	movt	r1, #8
   83d58:	4788      	blx	r1
			ns = *(dj->fn+NS);
   83d5a:	9a00      	ldr	r2, [sp, #0]
   83d5c:	6993      	ldr	r3, [r2, #24]
   83d5e:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
   83d60:	4602      	mov	r2, r0
   83d62:	b148      	cbz	r0, 83d78 <follow_path+0x300>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   83d64:	2a04      	cmp	r2, #4
   83d66:	d161      	bne.n	83e2c <follow_path+0x3b4>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   83d68:	f003 0304 	and.w	r3, r3, #4
   83d6c:	b2d9      	uxtb	r1, r3

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
   83d6e:	2900      	cmp	r1, #0
   83d70:	bf14      	ite	ne
   83d72:	4602      	movne	r2, r0
   83d74:	2205      	moveq	r2, #5
   83d76:	e059      	b.n	83e2c <follow_path+0x3b4>
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   83d78:	f003 0004 	and.w	r0, r3, #4
   83d7c:	b2c1      	uxtb	r1, r0
   83d7e:	2900      	cmp	r1, #0
   83d80:	d154      	bne.n	83e2c <follow_path+0x3b4>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   83d82:	9a00      	ldr	r2, [sp, #0]
   83d84:	6953      	ldr	r3, [r2, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   83d86:	7ad8      	ldrb	r0, [r3, #11]
   83d88:	f000 0110 	and.w	r1, r0, #16
   83d8c:	b2ca      	uxtb	r2, r1
   83d8e:	b162      	cbz	r2, 83daa <follow_path+0x332>
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
   83d90:	7d5c      	ldrb	r4, [r3, #21]
   83d92:	7d1f      	ldrb	r7, [r3, #20]
   83d94:	ea47 2604 	orr.w	r6, r7, r4, lsl #8
   83d98:	7ed8      	ldrb	r0, [r3, #27]
   83d9a:	7e9b      	ldrb	r3, [r3, #26]
   83d9c:	ea43 2100 	orr.w	r1, r3, r0, lsl #8
   83da0:	ea41 4406 	orr.w	r4, r1, r6, lsl #16
   83da4:	9a00      	ldr	r2, [sp, #0]
   83da6:	6094      	str	r4, [r2, #8]
		}
   83da8:	e697      	b.n	83ada <follow_path+0x62>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
   83daa:	f04f 0205 	mov.w	r2, #5
   83dae:	e03d      	b.n	83e2c <follow_path+0x3b4>
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
   83db0:	f04f 0400 	mov.w	r4, #0
	for (;;) {
		w = p[si++];					/* Get a character */
   83db4:	f04f 0101 	mov.w	r1, #1
   83db8:	e00b      	b.n	83dd2 <follow_path+0x35a>
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
   83dba:	f04f 0400 	mov.w	r4, #0
	for (;;) {
		w = p[si++];					/* Get a character */
   83dbe:	f04f 0101 	mov.w	r1, #1
   83dc2:	e006      	b.n	83dd2 <follow_path+0x35a>
   83dc4:	9e04      	ldr	r6, [sp, #16]
   83dc6:	e004      	b.n	83dd2 <follow_path+0x35a>
   83dc8:	9e04      	ldr	r6, [sp, #16]
   83dca:	e002      	b.n	83dd2 <follow_path+0x35a>
   83dcc:	9e04      	ldr	r6, [sp, #16]
   83dce:	e000      	b.n	83dd2 <follow_path+0x35a>
   83dd0:	9e04      	ldr	r6, [sp, #16]
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
	}
	*path = &p[si];						/* Return pointer to the next segment */
   83dd2:	eb06 0b01 	add.w	fp, r6, r1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   83dd6:	f04f 0700 	mov.w	r7, #0
   83dda:	e6cb      	b.n	83b74 <follow_path+0xfc>
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
   83ddc:	f04f 0400 	mov.w	r4, #0
	for (;;) {
		w = p[si++];					/* Get a character */
   83de0:	f04f 0101 	mov.w	r1, #1
   83de4:	e000      	b.n	83de8 <follow_path+0x370>
   83de6:	9e04      	ldr	r6, [sp, #16]
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
	}
	*path = &p[si];						/* Return pointer to the next segment */
   83de8:	eb06 0b01 	add.w	fp, r6, r1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   83dec:	f04f 0704 	mov.w	r7, #4
   83df0:	e6c0      	b.n	83b74 <follow_path+0xfc>

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   83df2:	f106 36ff 	add.w	r6, r6, #4294967295
   83df6:	9901      	ldr	r1, [sp, #4]
   83df8:	f831 2016 	ldrh.w	r2, [r1, r6, lsl #1]
   83dfc:	2a2e      	cmp	r2, #46	; 0x2e
   83dfe:	f43f af04 	beq.w	83c0a <follow_path+0x192>
   83e02:	f014 0f01 	tst.w	r4, #1
   83e06:	f47f aefc 	bne.w	83c02 <follow_path+0x18a>
   83e0a:	e013      	b.n	83e34 <follow_path+0x3bc>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
			cf |= NS_LOSS | NS_LFN; continue;
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
   83e0c:	f1b9 0f0b 	cmp.w	r9, #11
   83e10:	f47f af31 	bne.w	83c76 <follow_path+0x1fe>
   83e14:	e725      	b.n	83c62 <follow_path+0x1ea>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
   83e16:	f04f 0206 	mov.w	r2, #6
   83e1a:	e007      	b.n	83e2c <follow_path+0x3b4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
			cf |= NS_LOSS | NS_LFN; continue;
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
   83e1c:	f1b9 0f0b 	cmp.w	r9, #11
   83e20:	f47f af29 	bne.w	83c76 <follow_path+0x1fe>
   83e24:	e71d      	b.n	83c62 <follow_path+0x1ea>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   83e26:	f047 0702 	orr.w	r7, r7, #2
   83e2a:	e747      	b.n	83cbc <follow_path+0x244>
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
   83e2c:	4610      	mov	r0, r2
   83e2e:	b007      	add	sp, #28
   83e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   83e34:	f104 34ff 	add.w	r4, r4, #4294967295
   83e38:	f1a8 0802 	sub.w	r8, r8, #2
   83e3c:	f838 3c02 	ldrh.w	r3, [r8, #-2]
   83e40:	2b2e      	cmp	r3, #46	; 0x2e
   83e42:	f47f aede 	bne.w	83c02 <follow_path+0x18a>
   83e46:	e6e0      	b.n	83c0a <follow_path+0x192>
   83e48:	f100 34ff 	add.w	r4, r0, #4294967295
   83e4c:	f1a6 0802 	sub.w	r8, r6, #2
   83e50:	f838 2c02 	ldrh.w	r2, [r8, #-2]
   83e54:	2a2e      	cmp	r2, #46	; 0x2e
   83e56:	f47f aed4 	bne.w	83c02 <follow_path+0x18a>
   83e5a:	e6d6      	b.n	83c0a <follow_path+0x192>
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
		if (w != ' ' && w != '.') break;
   83e5c:	282e      	cmp	r0, #46	; 0x2e
   83e5e:	f47f aea8 	bne.w	83bb2 <follow_path+0x13a>
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   83e62:	3c01      	subs	r4, #1
   83e64:	d0d7      	beq.n	83e16 <follow_path+0x39e>
   83e66:	2900      	cmp	r1, #0
   83e68:	f43f ae94 	beq.w	83b94 <follow_path+0x11c>
		w = lfn[di-1];
   83e6c:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
		if (w != ' ' && w != '.') break;
   83e70:	2920      	cmp	r1, #32
   83e72:	d002      	beq.n	83e7a <follow_path+0x402>
   83e74:	292e      	cmp	r1, #46	; 0x2e
   83e76:	f47f ae9c 	bne.w	83bb2 <follow_path+0x13a>
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   83e7a:	3c01      	subs	r4, #1
   83e7c:	f47f ae8a 	bne.w	83b94 <follow_path+0x11c>
   83e80:	e7c9      	b.n	83e16 <follow_path+0x39e>
		w = lfn[di-1];
		if (w != ' ' && w != '.') break;
   83e82:	292e      	cmp	r1, #46	; 0x2e
   83e84:	f47f ae95 	bne.w	83bb2 <follow_path+0x13a>
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   83e88:	1e44      	subs	r4, r0, #1
   83e8a:	f47f ae83 	bne.w	83b94 <follow_path+0x11c>
   83e8e:	e7c2      	b.n	83e16 <follow_path+0x39e>
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   83e90:	287f      	cmp	r0, #127	; 0x7f
   83e92:	d805      	bhi.n	83ea0 <follow_path+0x428>
   83e94:	9803      	ldr	r0, [sp, #12]
   83e96:	4631      	mov	r1, r6
   83e98:	9a02      	ldr	r2, [sp, #8]
   83e9a:	4790      	blx	r2
   83e9c:	2800      	cmp	r0, #0
   83e9e:	d1ba      	bne.n	83e16 <follow_path+0x39e>
   83ea0:	f108 0702 	add.w	r7, r8, #2
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
   83ea4:	f8a8 6002 	strh.w	r6, [r8, #2]
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
   83ea8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   83eac:	4630      	mov	r0, r6
   83eae:	f104 0101 	add.w	r1, r4, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   83eb2:	2e1f      	cmp	r6, #31
   83eb4:	d997      	bls.n	83de6 <follow_path+0x36e>
   83eb6:	2e2f      	cmp	r6, #47	; 0x2f
   83eb8:	d088      	beq.n	83dcc <follow_path+0x354>
   83eba:	2e5c      	cmp	r6, #92	; 0x5c
   83ebc:	d088      	beq.n	83dd0 <follow_path+0x358>
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
   83ebe:	f109 0401 	add.w	r4, r9, #1
   83ec2:	e63c      	b.n	83b3e <follow_path+0xc6>

00083ec4 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
   83ec4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83ec8:	4604      	mov	r4, r0
	FRESULT res;
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
   83eca:	f04f 0bff 	mov.w	fp, #255	; 0xff
   83ece:	465e      	mov	r6, fp
#endif

	res = FR_NO_FILE;
   83ed0:	f04f 0504 	mov.w	r5, #4
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
   83ed4:	f642 7749 	movw	r7, #12105	; 0x2f49
   83ed8:	f2c0 0708 	movt	r7, #8
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
			ord = 0xFF;
   83edc:	46da      	mov	sl, fp
		}
	} while (++s < 13);						/* Read all character in the entry */

	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
		lfnbuf[i] = 0;
   83ede:	f04f 0800 	mov.w	r8, #0
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
   83ee2:	f243 4965 	movw	r9, #13413	; 0x3465
   83ee6:	f2c0 0908 	movt	r9, #8
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
   83eea:	e154      	b.n	84196 <dir_read+0x2d2>
		res = move_window(dj->fs, dj->sect);
   83eec:	6820      	ldr	r0, [r4, #0]
   83eee:	47b8      	blx	r7
		if (res != FR_OK) break;
   83ef0:	4605      	mov	r5, r0
   83ef2:	2800      	cmp	r0, #0
   83ef4:	f040 8154 	bne.w	841a0 <dir_read+0x2dc>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   83ef8:	6960      	ldr	r0, [r4, #20]
		c = dir[DIR_Name];
   83efa:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   83efc:	2b00      	cmp	r3, #0
   83efe:	f000 815b 	beq.w	841b8 <dir_read+0x2f4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   83f02:	7ac2      	ldrb	r2, [r0, #11]
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   83f04:	2be5      	cmp	r3, #229	; 0xe5
   83f06:	f000 813a 	beq.w	8417e <dir_read+0x2ba>
   83f0a:	2b2e      	cmp	r3, #46	; 0x2e
   83f0c:	f000 8139 	beq.w	84182 <dir_read+0x2be>
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   83f10:	f002 013f 	and.w	r1, r2, #63	; 0x3f
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   83f14:	f002 0208 	and.w	r2, r2, #8
   83f18:	b2d2      	uxtb	r2, r2
   83f1a:	b11a      	cbz	r2, 83f24 <dir_read+0x60>
   83f1c:	290f      	cmp	r1, #15
   83f1e:	f040 8132 	bne.w	84186 <dir_read+0x2c2>
   83f22:	e002      	b.n	83f2a <dir_read+0x66>
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   83f24:	290f      	cmp	r1, #15
   83f26:	f040 811e 	bne.w	84166 <dir_read+0x2a2>
				if (c & LLE) {			/* Is it start of LFN sequence? */
   83f2a:	f003 0540 	and.w	r5, r3, #64	; 0x40
   83f2e:	b2e9      	uxtb	r1, r5
   83f30:	b131      	cbz	r1, 83f40 <dir_read+0x7c>
					sum = dir[LDIR_Chksum];
   83f32:	f890 b00d 	ldrb.w	fp, [r0, #13]
					c &= ~LLE; ord = c;
   83f36:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
					dj->lfn_idx = dj->index;
   83f3a:	88e6      	ldrh	r6, [r4, #6]
   83f3c:	8426      	strh	r6, [r4, #32]
   83f3e:	e004      	b.n	83f4a <dir_read+0x86>
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   83f40:	429e      	cmp	r6, r3
   83f42:	bf18      	it	ne
   83f44:	4656      	movne	r6, sl
   83f46:	f040 8121 	bne.w	8418c <dir_read+0x2c8>
   83f4a:	7b41      	ldrb	r1, [r0, #13]
   83f4c:	4559      	cmp	r1, fp
   83f4e:	f040 811c 	bne.w	8418a <dir_read+0x2c6>
   83f52:	69e6      	ldr	r6, [r4, #28]
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
   83f54:	7802      	ldrb	r2, [r0, #0]
   83f56:	f002 053f 	and.w	r5, r2, #63	; 0x3f
   83f5a:	f105 32ff 	add.w	r2, r5, #4294967295
   83f5e:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
   83f62:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   83f66:	7885      	ldrb	r5, [r0, #2]
   83f68:	7842      	ldrb	r2, [r0, #1]
   83f6a:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   83f6e:	f1be 0ffe 	cmp.w	lr, #254	; 0xfe
   83f72:	f200 8119 	bhi.w	841a8 <dir_read+0x2e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
   83f76:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
   83f7a:	f10e 0201 	add.w	r2, lr, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   83f7e:	f890 b004 	ldrb.w	fp, [r0, #4]
   83f82:	f890 c003 	ldrb.w	ip, [r0, #3]
   83f86:	ea4c 2b0b 	orr.w	fp, ip, fp, lsl #8
		if (wc) {	/* Last char has not been processed */
   83f8a:	b925      	cbnz	r5, 83f96 <dir_read+0xd2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
   83f8c:	f64f 7eff 	movw	lr, #65535	; 0xffff
   83f90:	45f3      	cmp	fp, lr
   83f92:	d008      	beq.n	83fa6 <dir_read+0xe2>
   83f94:	e108      	b.n	841a8 <dir_read+0x2e4>

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   83f96:	2afe      	cmp	r2, #254	; 0xfe
   83f98:	f200 8106 	bhi.w	841a8 <dir_read+0x2e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
   83f9c:	f826 b012 	strh.w	fp, [r6, r2, lsl #1]
   83fa0:	f10e 0202 	add.w	r2, lr, #2

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   83fa4:	465d      	mov	r5, fp
   83fa6:	f890 c006 	ldrb.w	ip, [r0, #6]
   83faa:	f890 b005 	ldrb.w	fp, [r0, #5]
   83fae:	ea4b 2e0c 	orr.w	lr, fp, ip, lsl #8
		if (wc) {	/* Last char has not been processed */
   83fb2:	b925      	cbnz	r5, 83fbe <dir_read+0xfa>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
   83fb4:	f64f 7cff 	movw	ip, #65535	; 0xffff
   83fb8:	45e6      	cmp	lr, ip
   83fba:	d008      	beq.n	83fce <dir_read+0x10a>
   83fbc:	e0f4      	b.n	841a8 <dir_read+0x2e4>

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   83fbe:	2afe      	cmp	r2, #254	; 0xfe
   83fc0:	f200 80f2 	bhi.w	841a8 <dir_read+0x2e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
   83fc4:	f826 e012 	strh.w	lr, [r6, r2, lsl #1]
   83fc8:	f102 0201 	add.w	r2, r2, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   83fcc:	4675      	mov	r5, lr
   83fce:	f890 b008 	ldrb.w	fp, [r0, #8]
   83fd2:	f890 e007 	ldrb.w	lr, [r0, #7]
   83fd6:	ea4e 2b0b 	orr.w	fp, lr, fp, lsl #8
		if (wc) {	/* Last char has not been processed */
   83fda:	b925      	cbnz	r5, 83fe6 <dir_read+0x122>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
   83fdc:	f64f 7cff 	movw	ip, #65535	; 0xffff
   83fe0:	45e3      	cmp	fp, ip
   83fe2:	d008      	beq.n	83ff6 <dir_read+0x132>
   83fe4:	e0e0      	b.n	841a8 <dir_read+0x2e4>

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   83fe6:	2afe      	cmp	r2, #254	; 0xfe
   83fe8:	f200 80de 	bhi.w	841a8 <dir_read+0x2e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
   83fec:	f826 b012 	strh.w	fp, [r6, r2, lsl #1]
   83ff0:	f102 0201 	add.w	r2, r2, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   83ff4:	465d      	mov	r5, fp
   83ff6:	f890 b00a 	ldrb.w	fp, [r0, #10]
   83ffa:	f890 e009 	ldrb.w	lr, [r0, #9]
   83ffe:	ea4e 2b0b 	orr.w	fp, lr, fp, lsl #8
		if (wc) {	/* Last char has not been processed */
   84002:	b925      	cbnz	r5, 8400e <dir_read+0x14a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
   84004:	f64f 7cff 	movw	ip, #65535	; 0xffff
   84008:	45e3      	cmp	fp, ip
   8400a:	d008      	beq.n	8401e <dir_read+0x15a>
   8400c:	e0cc      	b.n	841a8 <dir_read+0x2e4>

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   8400e:	2afe      	cmp	r2, #254	; 0xfe
   84010:	f200 80ca 	bhi.w	841a8 <dir_read+0x2e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
   84014:	f826 b012 	strh.w	fp, [r6, r2, lsl #1]
   84018:	f102 0201 	add.w	r2, r2, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   8401c:	465d      	mov	r5, fp
   8401e:	f890 b00f 	ldrb.w	fp, [r0, #15]
   84022:	f890 e00e 	ldrb.w	lr, [r0, #14]
   84026:	ea4e 2b0b 	orr.w	fp, lr, fp, lsl #8
		if (wc) {	/* Last char has not been processed */
   8402a:	b925      	cbnz	r5, 84036 <dir_read+0x172>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
   8402c:	f64f 7cff 	movw	ip, #65535	; 0xffff
   84030:	45e3      	cmp	fp, ip
   84032:	d008      	beq.n	84046 <dir_read+0x182>
   84034:	e0b8      	b.n	841a8 <dir_read+0x2e4>

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   84036:	2afe      	cmp	r2, #254	; 0xfe
   84038:	f200 80b6 	bhi.w	841a8 <dir_read+0x2e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
   8403c:	f826 b012 	strh.w	fp, [r6, r2, lsl #1]
   84040:	f102 0201 	add.w	r2, r2, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   84044:	465d      	mov	r5, fp
   84046:	f890 b011 	ldrb.w	fp, [r0, #17]
   8404a:	f890 e010 	ldrb.w	lr, [r0, #16]
   8404e:	ea4e 2b0b 	orr.w	fp, lr, fp, lsl #8
		if (wc) {	/* Last char has not been processed */
   84052:	b925      	cbnz	r5, 8405e <dir_read+0x19a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
   84054:	f64f 7cff 	movw	ip, #65535	; 0xffff
   84058:	45e3      	cmp	fp, ip
   8405a:	d008      	beq.n	8406e <dir_read+0x1aa>
   8405c:	e0a4      	b.n	841a8 <dir_read+0x2e4>

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   8405e:	2afe      	cmp	r2, #254	; 0xfe
   84060:	f200 80a2 	bhi.w	841a8 <dir_read+0x2e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
   84064:	f826 b012 	strh.w	fp, [r6, r2, lsl #1]
   84068:	f102 0201 	add.w	r2, r2, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   8406c:	465d      	mov	r5, fp
   8406e:	f890 b013 	ldrb.w	fp, [r0, #19]
   84072:	f890 e012 	ldrb.w	lr, [r0, #18]
   84076:	ea4e 2b0b 	orr.w	fp, lr, fp, lsl #8
		if (wc) {	/* Last char has not been processed */
   8407a:	b925      	cbnz	r5, 84086 <dir_read+0x1c2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
   8407c:	f64f 7cff 	movw	ip, #65535	; 0xffff
   84080:	45e3      	cmp	fp, ip
   84082:	d008      	beq.n	84096 <dir_read+0x1d2>
   84084:	e090      	b.n	841a8 <dir_read+0x2e4>

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   84086:	2afe      	cmp	r2, #254	; 0xfe
   84088:	f200 808e 	bhi.w	841a8 <dir_read+0x2e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
   8408c:	f826 b012 	strh.w	fp, [r6, r2, lsl #1]
   84090:	f102 0201 	add.w	r2, r2, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   84094:	465d      	mov	r5, fp
   84096:	f890 b015 	ldrb.w	fp, [r0, #21]
   8409a:	f890 e014 	ldrb.w	lr, [r0, #20]
   8409e:	ea4e 2b0b 	orr.w	fp, lr, fp, lsl #8
		if (wc) {	/* Last char has not been processed */
   840a2:	b925      	cbnz	r5, 840ae <dir_read+0x1ea>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
   840a4:	f64f 7cff 	movw	ip, #65535	; 0xffff
   840a8:	45e3      	cmp	fp, ip
   840aa:	d007      	beq.n	840bc <dir_read+0x1f8>
   840ac:	e07c      	b.n	841a8 <dir_read+0x2e4>

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   840ae:	2afe      	cmp	r2, #254	; 0xfe
   840b0:	d87a      	bhi.n	841a8 <dir_read+0x2e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
   840b2:	f826 b012 	strh.w	fp, [r6, r2, lsl #1]
   840b6:	f102 0201 	add.w	r2, r2, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   840ba:	465d      	mov	r5, fp
   840bc:	f890 b017 	ldrb.w	fp, [r0, #23]
   840c0:	f890 e016 	ldrb.w	lr, [r0, #22]
   840c4:	ea4e 2b0b 	orr.w	fp, lr, fp, lsl #8
		if (wc) {	/* Last char has not been processed */
   840c8:	b925      	cbnz	r5, 840d4 <dir_read+0x210>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
   840ca:	f64f 7cff 	movw	ip, #65535	; 0xffff
   840ce:	45e3      	cmp	fp, ip
   840d0:	d007      	beq.n	840e2 <dir_read+0x21e>
   840d2:	e069      	b.n	841a8 <dir_read+0x2e4>

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   840d4:	2afe      	cmp	r2, #254	; 0xfe
   840d6:	d867      	bhi.n	841a8 <dir_read+0x2e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
   840d8:	f826 b012 	strh.w	fp, [r6, r2, lsl #1]
   840dc:	f102 0201 	add.w	r2, r2, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   840e0:	465d      	mov	r5, fp
   840e2:	f890 b019 	ldrb.w	fp, [r0, #25]
   840e6:	f890 e018 	ldrb.w	lr, [r0, #24]
   840ea:	ea4e 2b0b 	orr.w	fp, lr, fp, lsl #8
		if (wc) {	/* Last char has not been processed */
   840ee:	b925      	cbnz	r5, 840fa <dir_read+0x236>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
   840f0:	f64f 7cff 	movw	ip, #65535	; 0xffff
   840f4:	45e3      	cmp	fp, ip
   840f6:	d007      	beq.n	84108 <dir_read+0x244>
   840f8:	e056      	b.n	841a8 <dir_read+0x2e4>

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   840fa:	2afe      	cmp	r2, #254	; 0xfe
   840fc:	d854      	bhi.n	841a8 <dir_read+0x2e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
   840fe:	f826 b012 	strh.w	fp, [r6, r2, lsl #1]
   84102:	f102 0201 	add.w	r2, r2, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   84106:	465d      	mov	r5, fp
   84108:	f890 b01d 	ldrb.w	fp, [r0, #29]
   8410c:	f890 e01c 	ldrb.w	lr, [r0, #28]
   84110:	ea4e 2b0b 	orr.w	fp, lr, fp, lsl #8
		if (wc) {	/* Last char has not been processed */
   84114:	b925      	cbnz	r5, 84120 <dir_read+0x25c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
   84116:	f64f 7cff 	movw	ip, #65535	; 0xffff
   8411a:	45e3      	cmp	fp, ip
   8411c:	d007      	beq.n	8412e <dir_read+0x26a>
   8411e:	e043      	b.n	841a8 <dir_read+0x2e4>

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   84120:	2afe      	cmp	r2, #254	; 0xfe
   84122:	d841      	bhi.n	841a8 <dir_read+0x2e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
   84124:	f826 b012 	strh.w	fp, [r6, r2, lsl #1]
   84128:	f102 0201 	add.w	r2, r2, #1

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   8412c:	465d      	mov	r5, fp
   8412e:	f890 b01f 	ldrb.w	fp, [r0, #31]
   84132:	f890 e01e 	ldrb.w	lr, [r0, #30]
   84136:	ea4e 2c0b 	orr.w	ip, lr, fp, lsl #8
		if (wc) {	/* Last char has not been processed */
   8413a:	b135      	cbz	r5, 8414a <dir_read+0x286>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   8413c:	2afe      	cmp	r2, #254	; 0xfe
   8413e:	d833      	bhi.n	841a8 <dir_read+0x2e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
   84140:	f826 c012 	strh.w	ip, [r6, r2, lsl #1]
   84144:	f102 0201 	add.w	r2, r2, #1
   84148:	e003      	b.n	84152 <dir_read+0x28e>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
   8414a:	f64f 75ff 	movw	r5, #65535	; 0xffff
   8414e:	45ac      	cmp	ip, r5
   84150:	d12a      	bne.n	841a8 <dir_read+0x2e4>
		}
	} while (++s < 13);						/* Read all character in the entry */

	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
   84152:	7800      	ldrb	r0, [r0, #0]
   84154:	f000 0540 	and.w	r5, r0, #64	; 0x40
   84158:	b2e8      	uxtb	r0, r5
   8415a:	b340      	cbz	r0, 841ae <dir_read+0x2ea>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
   8415c:	2afe      	cmp	r2, #254	; 0xfe
   8415e:	d823      	bhi.n	841a8 <dir_read+0x2e4>
		lfnbuf[i] = 0;
   84160:	f826 8012 	strh.w	r8, [r6, r2, lsl #1]
   84164:	e023      	b.n	841ae <dir_read+0x2ea>
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
   84166:	b936      	cbnz	r6, 84176 <dir_read+0x2b2>
   84168:	f242 7365 	movw	r3, #10085	; 0x2765
   8416c:	f2c0 0308 	movt	r3, #8
   84170:	4798      	blx	r3
   84172:	4558      	cmp	r0, fp
   84174:	d023      	beq.n	841be <dir_read+0x2fa>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
   84176:	f64f 70ff 	movw	r0, #65535	; 0xffff
   8417a:	8420      	strh	r0, [r4, #32]
   8417c:	e01f      	b.n	841be <dir_read+0x2fa>
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
			ord = 0xFF;
   8417e:	4656      	mov	r6, sl
   84180:	e004      	b.n	8418c <dir_read+0x2c8>
   84182:	4656      	mov	r6, sl
   84184:	e002      	b.n	8418c <dir_read+0x2c8>
   84186:	4656      	mov	r6, sl
   84188:	e000      	b.n	8418c <dir_read+0x2c8>
					sum = dir[LDIR_Chksum];
					c &= ~LLE; ord = c;
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   8418a:	4656      	mov	r6, sl
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
   8418c:	4620      	mov	r0, r4
   8418e:	4641      	mov	r1, r8
   84190:	47c8      	blx	r9
		if (res != FR_OK) break;
   84192:	4605      	mov	r5, r0
   84194:	b920      	cbnz	r0, 841a0 <dir_read+0x2dc>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
   84196:	6921      	ldr	r1, [r4, #16]
   84198:	2900      	cmp	r1, #0
   8419a:	f47f aea7 	bne.w	83eec <dir_read+0x28>
#endif
		res = dir_next(dj, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
   8419e:	b175      	cbz	r5, 841be <dir_read+0x2fa>
   841a0:	f04f 0100 	mov.w	r1, #0
   841a4:	6121      	str	r1, [r4, #16]
   841a6:	e00a      	b.n	841be <dir_read+0x2fa>
					sum = dir[LDIR_Chksum];
					c &= ~LLE; ord = c;
					dj->lfn_idx = dj->index;
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   841a8:	468b      	mov	fp, r1
   841aa:	4656      	mov	r6, sl
   841ac:	e7ee      	b.n	8418c <dir_read+0x2c8>
   841ae:	f103 33ff 	add.w	r3, r3, #4294967295
   841b2:	b2de      	uxtb	r6, r3
   841b4:	468b      	mov	fp, r1
   841b6:	e7e9      	b.n	8418c <dir_read+0x2c8>
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   841b8:	f04f 0504 	mov.w	r5, #4
   841bc:	e7f0      	b.n	841a0 <dir_read+0x2dc>
	}

	if (res != FR_OK) dj->sect = 0;

	return res;
}
   841be:	4628      	mov	r0, r5
   841c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000841c4 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   841c4:	b9a0      	cbnz	r0, 841f0 <f_mount+0x2c>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */
   841c6:	f640 23bc 	movw	r3, #2748	; 0xabc
   841ca:	f2c2 0307 	movt	r3, #8199	; 0x2007
   841ce:	6818      	ldr	r0, [r3, #0]

	if (rfs) {
   841d0:	b110      	cbz	r0, 841d8 <f_mount+0x14>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   841d2:	f04f 0200 	mov.w	r2, #0
   841d6:	7002      	strb	r2, [r0, #0]
	}

	if (fs) {
   841d8:	b111      	cbz	r1, 841e0 <f_mount+0x1c>
		fs->fs_type = 0;		/* Clear new fs object */
   841da:	f04f 0300 	mov.w	r3, #0
   841de:	700b      	strb	r3, [r1, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   841e0:	f640 20bc 	movw	r0, #2748	; 0xabc
   841e4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   841e8:	6001      	str	r1, [r0, #0]

	return FR_OK;
   841ea:	f04f 0000 	mov.w	r0, #0
   841ee:	4770      	bx	lr
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
   841f0:	f04f 000b 	mov.w	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
   841f4:	4770      	bx	lr
   841f6:	bf00      	nop

000841f8 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
   841f8:	b510      	push	{r4, lr}
   841fa:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
   841fe:	4604      	mov	r4, r0
   84200:	9101      	str	r1, [sp, #4]
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
   84202:	a801      	add	r0, sp, #4
   84204:	4621      	mov	r1, r4
   84206:	f04f 0200 	mov.w	r2, #0
   8420a:	f642 03f1 	movw	r3, #10481	; 0x28f1
   8420e:	f2c0 0308 	movt	r3, #8
   84212:	4798      	blx	r3
	if (res == FR_OK) {
   84214:	4601      	mov	r1, r0
   84216:	2800      	cmp	r0, #0
   84218:	d133      	bne.n	84282 <f_opendir+0x8a>
		INIT_BUF(*dj);
   8421a:	a883      	add	r0, sp, #524	; 0x20c
   8421c:	61a0      	str	r0, [r4, #24]
   8421e:	a903      	add	r1, sp, #12
   84220:	61e1      	str	r1, [r4, #28]
		res = follow_path(dj, path);			/* Follow the path to the directory */
   84222:	4620      	mov	r0, r4
   84224:	9901      	ldr	r1, [sp, #4]
   84226:	f643 2279 	movw	r2, #14969	; 0x3a79
   8422a:	f2c0 0208 	movt	r2, #8
   8422e:	4790      	blx	r2
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
   84230:	4601      	mov	r1, r0
   84232:	b990      	cbnz	r0, 8425a <f_opendir+0x62>
			if (dj->dir) {						/* It is not the root dir */
   84234:	6963      	ldr	r3, [r4, #20]
   84236:	b1bb      	cbz	r3, 84268 <f_opendir+0x70>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
   84238:	7ad8      	ldrb	r0, [r3, #11]
   8423a:	f000 0110 	and.w	r1, r0, #16
   8423e:	b2ca      	uxtb	r2, r1
   84240:	b17a      	cbz	r2, 84262 <f_opendir+0x6a>
					dj->sclust = LD_CLUST(dj->dir);
   84242:	7d58      	ldrb	r0, [r3, #21]
   84244:	7d19      	ldrb	r1, [r3, #20]
   84246:	ea41 2200 	orr.w	r2, r1, r0, lsl #8
   8424a:	7ed8      	ldrb	r0, [r3, #27]
   8424c:	7e9b      	ldrb	r3, [r3, #26]
   8424e:	ea43 2100 	orr.w	r1, r3, r0, lsl #8
   84252:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   84256:	60a2      	str	r2, [r4, #8]
   84258:	e006      	b.n	84268 <f_opendir+0x70>
			if (res == FR_OK) {
				dj->id = dj->fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
   8425a:	2904      	cmp	r1, #4
   8425c:	bf08      	it	eq
   8425e:	2105      	moveq	r1, #5
   84260:	e00f      	b.n	84282 <f_opendir+0x8a>
		if (res == FR_OK) {						/* Follow completed */
			if (dj->dir) {						/* It is not the root dir */
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust = LD_CLUST(dj->dir);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
   84262:	f04f 0105 	mov.w	r1, #5
   84266:	e00c      	b.n	84282 <f_opendir+0x8a>
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
   84268:	6820      	ldr	r0, [r4, #0]
   8426a:	88c3      	ldrh	r3, [r0, #6]
   8426c:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dj, 0);			/* Rewind dir */
   8426e:	4620      	mov	r0, r4
   84270:	f04f 0100 	mov.w	r1, #0
   84274:	f243 127d 	movw	r2, #12669	; 0x317d
   84278:	f2c0 0208 	movt	r2, #8
   8427c:	4790      	blx	r2
   8427e:	4601      	mov	r1, r0
   84280:	e7eb      	b.n	8425a <f_opendir+0x62>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
}
   84282:	4608      	mov	r0, r1
   84284:	f50d 7d06 	add.w	sp, sp, #536	; 0x218
   84288:	bd10      	pop	{r4, pc}
   8428a:	bf00      	nop

0008428c <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
   8428c:	b570      	push	{r4, r5, r6, lr}
   8428e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
   84292:	4604      	mov	r4, r0
   84294:	460e      	mov	r6, r1
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
   84296:	6800      	ldr	r0, [r0, #0]
   84298:	88a1      	ldrh	r1, [r4, #4]
   8429a:	f642 0305 	movw	r3, #10245	; 0x2805
   8429e:	f2c0 0308 	movt	r3, #8
   842a2:	4798      	blx	r3
	if (res == FR_OK) {
   842a4:	4605      	mov	r5, r0
   842a6:	2800      	cmp	r0, #0
   842a8:	d133      	bne.n	84312 <f_readdir+0x86>
		if (!fno) {
   842aa:	b94e      	cbnz	r6, 842c0 <f_readdir+0x34>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
   842ac:	4620      	mov	r0, r4
   842ae:	f04f 0100 	mov.w	r1, #0
   842b2:	f243 157d 	movw	r5, #12669	; 0x317d
   842b6:	f2c0 0508 	movt	r5, #8
   842ba:	47a8      	blx	r5
   842bc:	4605      	mov	r5, r0
   842be:	e028      	b.n	84312 <f_readdir+0x86>
		} else {
			INIT_BUF(*dj);
   842c0:	a881      	add	r0, sp, #516	; 0x204
   842c2:	61a0      	str	r0, [r4, #24]
   842c4:	a901      	add	r1, sp, #4
   842c6:	61e1      	str	r1, [r4, #28]
			res = dir_read(dj);				/* Read an directory item */
   842c8:	4620      	mov	r0, r4
   842ca:	f643 62c5 	movw	r2, #16069	; 0x3ec5
   842ce:	f2c0 0208 	movt	r2, #8
   842d2:	4790      	blx	r2
			if (res == FR_NO_FILE) {		/* Reached end of dir */
   842d4:	2804      	cmp	r0, #4
   842d6:	d103      	bne.n	842e0 <f_readdir+0x54>
				dj->sect = 0;
   842d8:	f04f 0300 	mov.w	r3, #0
   842dc:	6123      	str	r3, [r4, #16]
   842de:	e000      	b.n	842e2 <f_readdir+0x56>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
   842e0:	b9a0      	cbnz	r0, 8430c <f_readdir+0x80>
				get_fileinfo(dj, fno);		/* Get the object information */
   842e2:	4620      	mov	r0, r4
   842e4:	4631      	mov	r1, r6
   842e6:	f642 42f9 	movw	r2, #11513	; 0x2cf9
   842ea:	f2c0 0208 	movt	r2, #8
   842ee:	4790      	blx	r2
				res = dir_next(dj, 0);		/* Increment index for next */
   842f0:	4620      	mov	r0, r4
   842f2:	f04f 0100 	mov.w	r1, #0
   842f6:	f243 4365 	movw	r3, #13413	; 0x3465
   842fa:	f2c0 0308 	movt	r3, #8
   842fe:	4798      	blx	r3
				if (res == FR_NO_FILE) {
   84300:	2804      	cmp	r0, #4
   84302:	d105      	bne.n	84310 <f_readdir+0x84>
					dj->sect = 0;
   84304:	f04f 0000 	mov.w	r0, #0
   84308:	6120      	str	r0, [r4, #16]
   8430a:	e002      	b.n	84312 <f_readdir+0x86>
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dj);
			res = dir_read(dj);				/* Read an directory item */
   8430c:	4605      	mov	r5, r0
   8430e:	e000      	b.n	84312 <f_readdir+0x86>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, 0);		/* Increment index for next */
   84310:	4605      	mov	r5, r0
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
   84312:	4628      	mov	r0, r5
   84314:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
   84318:	bd70      	pop	{r4, r5, r6, pc}
   8431a:	bf00      	nop

0008431c <ui_init>:
#include "board.h"
#include "led.h"
#include "ui.h"

void ui_init(void)
{
   8431c:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_On(LED0_GPIO);
   8431e:	f04f 003b 	mov.w	r0, #59	; 0x3b
   84322:	f646 03dd 	movw	r3, #26845	; 0x68dd
   84326:	f2c0 0308 	movt	r3, #8
   8432a:	4798      	blx	r3
	LED_Off(LED1_GPIO);
   8432c:	f04f 0055 	mov.w	r0, #85	; 0x55
   84330:	f646 048d 	movw	r4, #26765	; 0x688d
   84334:	f2c0 0408 	movt	r4, #8
   84338:	47a0      	blx	r4
	LED_Off(LED2_GPIO);
   8433a:	f04f 0056 	mov.w	r0, #86	; 0x56
   8433e:	47a0      	blx	r4
   84340:	bd10      	pop	{r4, pc}
   84342:	bf00      	nop

00084344 <ui_powerdown>:
}

void ui_powerdown(void)
{
   84344:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   84346:	f04f 003b 	mov.w	r0, #59	; 0x3b
   8434a:	f646 048d 	movw	r4, #26765	; 0x688d
   8434e:	f2c0 0408 	movt	r4, #8
   84352:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   84354:	f04f 0055 	mov.w	r0, #85	; 0x55
   84358:	47a0      	blx	r4
	LED_Off(LED2_GPIO);
   8435a:	f04f 0056 	mov.w	r0, #86	; 0x56
   8435e:	47a0      	blx	r4
   84360:	bd10      	pop	{r4, pc}
   84362:	bf00      	nop

00084364 <ui_start_read>:
void ui_com_overflow(void)
{
}

void ui_start_read(void)
{
   84364:	b508      	push	{r3, lr}
	LED_On(LED1_GPIO);
   84366:	f04f 0055 	mov.w	r0, #85	; 0x55
   8436a:	f646 03dd 	movw	r3, #26845	; 0x68dd
   8436e:	f2c0 0308 	movt	r3, #8
   84372:	4798      	blx	r3
   84374:	bd08      	pop	{r3, pc}
   84376:	bf00      	nop

00084378 <ui_stop_read>:
}

void ui_stop_read(void)
{
   84378:	b508      	push	{r3, lr}
	LED_Off(LED1_GPIO);
   8437a:	f04f 0055 	mov.w	r0, #85	; 0x55
   8437e:	f646 038d 	movw	r3, #26765	; 0x688d
   84382:	f2c0 0308 	movt	r3, #8
   84386:	4798      	blx	r3
   84388:	bd08      	pop	{r3, pc}
   8438a:	bf00      	nop

0008438c <ui_start_write>:
}

void ui_start_write(void)
{
   8438c:	b508      	push	{r3, lr}
	LED_On(LED1_GPIO);
   8438e:	f04f 0055 	mov.w	r0, #85	; 0x55
   84392:	f646 03dd 	movw	r3, #26845	; 0x68dd
   84396:	f2c0 0308 	movt	r3, #8
   8439a:	4798      	blx	r3
   8439c:	bd08      	pop	{r3, pc}
   8439e:	bf00      	nop

000843a0 <ui_stop_write>:
}

void ui_stop_write(void)
{
   843a0:	b508      	push	{r3, lr}
	LED_Off(LED1_GPIO);
   843a2:	f04f 0055 	mov.w	r0, #85	; 0x55
   843a6:	f646 038d 	movw	r3, #26765	; 0x688d
   843aa:	f2c0 0308 	movt	r3, #8
   843ae:	4798      	blx	r3
   843b0:	bd08      	pop	{r3, pc}
   843b2:	bf00      	nop

000843b4 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   843b4:	b508      	push	{r3, lr}
	}
#endif

	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_UPLL) {

		pmc_enable_upll_clock();
   843b6:	f646 5355 	movw	r3, #27989	; 0x6d55
   843ba:	f2c0 0308 	movt	r3, #8
   843be:	4798      	blx	r3
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
   843c0:	f04f 0000 	mov.w	r0, #0
   843c4:	f646 51f9 	movw	r1, #28153	; 0x6df9
   843c8:	f2c0 0108 	movt	r1, #8
   843cc:	4788      	blx	r1
		pmc_enable_udpck();
   843ce:	f646 6011 	movw	r0, #28177	; 0x6e11
   843d2:	f2c0 0008 	movt	r0, #8
   843d6:	4780      	blx	r0
   843d8:	bd08      	pop	{r3, pc}
   843da:	bf00      	nop

000843dc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   843dc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   843de:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   843e2:	f2c0 5001 	movt	r0, #1281	; 0x501
   843e6:	f249 03f9 	movw	r3, #37113	; 0x90f9
   843ea:	f2c0 0308 	movt	r3, #8
   843ee:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   843f0:	f04f 0000 	mov.w	r0, #0
   843f4:	f04f 013e 	mov.w	r1, #62	; 0x3e
   843f8:	f646 42b5 	movw	r2, #27829	; 0x6cb5
   843fc:	f2c0 0208 	movt	r2, #8
   84400:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   84402:	f646 5425 	movw	r4, #27941	; 0x6d25
   84406:	f2c0 0408 	movt	r4, #8
   8440a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8440c:	2800      	cmp	r0, #0
   8440e:	d0fc      	beq.n	8440a <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   84410:	f646 5035 	movw	r0, #27957	; 0x6d35
   84414:	f2c0 0008 	movt	r0, #8
   84418:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8441a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   8441e:	f2c4 010e 	movt	r1, #16398	; 0x400e
   84422:	f643 7301 	movw	r3, #16129	; 0x3f01
   84426:	f2c2 030d 	movt	r3, #8205	; 0x200d
   8442a:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8442c:	f646 5445 	movw	r4, #27973	; 0x6d45
   84430:	f2c0 0408 	movt	r4, #8
   84434:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   84436:	2800      	cmp	r0, #0
   84438:	d0fc      	beq.n	84434 <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8443a:	f04f 0010 	mov.w	r0, #16
   8443e:	f646 4215 	movw	r2, #27669	; 0x6c15
   84442:	f2c0 0208 	movt	r2, #8
   84446:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   84448:	f648 7031 	movw	r0, #36657	; 0x8f31
   8444c:	f2c0 0008 	movt	r0, #8
   84450:	4780      	blx	r0
   84452:	bd10      	pop	{r4, pc}

00084454 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
   84454:	f04f 0001 	mov.w	r0, #1
   84458:	4770      	bx	lr
   8445a:	bf00      	nop

0008445c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   8445c:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
   8445e:	b928      	cbnz	r0, 8446c <mem_test_unit_ready+0x10>
   84460:	f241 4385 	movw	r3, #5253	; 0x1485
   84464:	f2c0 0308 	movt	r3, #8
   84468:	4798      	blx	r3
   8446a:	bd08      	pop	{r3, pc}
   8446c:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
   84470:	bd08      	pop	{r3, pc}
   84472:	bf00      	nop

00084474 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   84474:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
   84476:	b930      	cbnz	r0, 84486 <mem_read_capacity+0x12>
   84478:	4608      	mov	r0, r1
   8447a:	f241 43c1 	movw	r3, #5313	; 0x14c1
   8447e:	f2c0 0308 	movt	r3, #8
   84482:	4798      	blx	r3
   84484:	bd08      	pop	{r3, pc}
   84486:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
   8448a:	bd08      	pop	{r3, pc}

0008448c <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
   8448c:	f1d0 0001 	rsbs	r0, r0, #1
   84490:	bf38      	it	cc
   84492:	2000      	movcc	r0, #0
   84494:	4770      	bx	lr
   84496:	bf00      	nop

00084498 <mem_unload>:

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
   84498:	b910      	cbnz	r0, 844a0 <mem_unload+0x8>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
   8449a:	f081 0001 	eor.w	r0, r1, #1
   8449e:	4770      	bx	lr

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
   844a0:	f04f 0000 	mov.w	r0, #0
#endif

  Ctrl_access_unlock();

  return unloaded;
}
   844a4:	4770      	bx	lr
   844a6:	bf00      	nop

000844a8 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
   844a8:	b508      	push	{r3, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   844aa:	b928      	cbnz	r0, 844b8 <mem_wr_protect+0x10>
   844ac:	f241 43e5 	movw	r3, #5349	; 0x14e5
   844b0:	f2c0 0308 	movt	r3, #8
   844b4:	4798      	blx	r3
   844b6:	bd08      	pop	{r3, pc}
   844b8:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
   844bc:	bd08      	pop	{r3, pc}
   844be:	bf00      	nop

000844c0 <mem_removal>:


bool mem_removal(U8 lun)
{
   844c0:	b508      	push	{r3, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
   844c2:	b928      	cbnz	r0, 844d0 <mem_removal+0x10>
   844c4:	f241 5301 	movw	r3, #5377	; 0x1501
   844c8:	f2c0 0308 	movt	r3, #8
   844cc:	4798      	blx	r3
   844ce:	bd08      	pop	{r3, pc}
   844d0:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return removal;
}
   844d4:	bd08      	pop	{r3, pc}
   844d6:	bf00      	nop

000844d8 <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
   844d8:	b920      	cbnz	r0, 844e4 <mem_name+0xc>
   844da:	f64b 3050 	movw	r0, #47952	; 0xbb50
   844de:	f2c0 0008 	movt	r0, #8
   844e2:	4770      	bx	lr
   844e4:	f04f 0000 	mov.w	r0, #0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
   844e8:	4770      	bx	lr
   844ea:	bf00      	nop

000844ec <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
   844ec:	b570      	push	{r4, r5, r6, lr}
   844ee:	4604      	mov	r4, r0
   844f0:	460e      	mov	r6, r1
   844f2:	4615      	mov	r5, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
   844f4:	f244 3365 	movw	r3, #17253	; 0x4365
   844f8:	f2c0 0308 	movt	r3, #8
   844fc:	4798      	blx	r3
  status =
   844fe:	b944      	cbnz	r4, 84512 <memory_2_usb+0x26>
   84500:	4630      	mov	r0, r6
   84502:	4629      	mov	r1, r5
   84504:	f241 52cd 	movw	r2, #5581	; 0x15cd
   84508:	f2c0 0208 	movt	r2, #8
   8450c:	4790      	blx	r2
   8450e:	4604      	mov	r4, r0
   84510:	e001      	b.n	84516 <memory_2_usb+0x2a>
   84512:	f04f 0401 	mov.w	r4, #1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
   84516:	f244 3079 	movw	r0, #17273	; 0x4379
   8451a:	f2c0 0008 	movt	r0, #8
   8451e:	4780      	blx	r0

  Ctrl_access_unlock();

  return status;
}
   84520:	4620      	mov	r0, r4
   84522:	bd70      	pop	{r4, r5, r6, pc}

00084524 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
   84524:	b570      	push	{r4, r5, r6, lr}
   84526:	4604      	mov	r4, r0
   84528:	460e      	mov	r6, r1
   8452a:	4615      	mov	r5, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
   8452c:	f244 338d 	movw	r3, #17293	; 0x438d
   84530:	f2c0 0308 	movt	r3, #8
   84534:	4798      	blx	r3
  status =
   84536:	b944      	cbnz	r4, 8454a <usb_2_memory+0x26>
   84538:	4630      	mov	r0, r6
   8453a:	4629      	mov	r1, r5
   8453c:	f241 6299 	movw	r2, #5785	; 0x1699
   84540:	f2c0 0208 	movt	r2, #8
   84544:	4790      	blx	r2
   84546:	4604      	mov	r4, r0
   84548:	e001      	b.n	8454e <usb_2_memory+0x2a>
   8454a:	f04f 0401 	mov.w	r4, #1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
   8454e:	f244 30a1 	movw	r0, #17313	; 0x43a1
   84552:	f2c0 0008 	movt	r0, #8
   84556:	4780      	blx	r0

  Ctrl_access_unlock();

  return status;
}
   84558:	4620      	mov	r0, r4
   8455a:	bd70      	pop	{r4, r5, r6, pc}

0008455c <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   8455c:	b570      	push	{r4, r5, r6, lr}
   8455e:	4604      	mov	r4, r0
   84560:	460e      	mov	r6, r1
   84562:	4615      	mov	r5, r2
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
   84564:	f244 3365 	movw	r3, #17253	; 0x4365
   84568:	f2c0 0308 	movt	r3, #8
   8456c:	4798      	blx	r3
  status =
   8456e:	b944      	cbnz	r4, 84582 <memory_2_ram+0x26>
   84570:	4630      	mov	r0, r6
   84572:	4629      	mov	r1, r5
   84574:	f241 62f9 	movw	r2, #5881	; 0x16f9
   84578:	f2c0 0208 	movt	r2, #8
   8457c:	4790      	blx	r2
   8457e:	4604      	mov	r4, r0
   84580:	e001      	b.n	84586 <memory_2_ram+0x2a>
   84582:	f04f 0401 	mov.w	r4, #1
#if LUN_USB == ENABLE
                             Lun_usb_mem_2_ram(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_read_action();
   84586:	f244 3079 	movw	r0, #17273	; 0x4379
   8458a:	f2c0 0008 	movt	r0, #8
   8458e:	4780      	blx	r0

  Ctrl_access_unlock();

  return status;
}
   84590:	4620      	mov	r0, r4
   84592:	bd70      	pop	{r4, r5, r6, pc}

00084594 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   84594:	b570      	push	{r4, r5, r6, lr}
   84596:	4604      	mov	r4, r0
   84598:	460e      	mov	r6, r1
   8459a:	4615      	mov	r5, r2
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
   8459c:	f244 338d 	movw	r3, #17293	; 0x438d
   845a0:	f2c0 0308 	movt	r3, #8
   845a4:	4798      	blx	r3
  status =
   845a6:	b944      	cbnz	r4, 845ba <ram_2_memory+0x26>
   845a8:	4630      	mov	r0, r6
   845aa:	4629      	mov	r1, r5
   845ac:	f241 7259 	movw	r2, #5977	; 0x1759
   845b0:	f2c0 0208 	movt	r2, #8
   845b4:	4790      	blx	r2
   845b6:	4604      	mov	r4, r0
   845b8:	e001      	b.n	845be <ram_2_memory+0x2a>
   845ba:	f04f 0401 	mov.w	r4, #1
#if LUN_USB == ENABLE
                             Lun_usb_ram_2_mem(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_write_action();
   845be:	f244 30a1 	movw	r0, #17313	; 0x43a1
   845c2:	f2c0 0008 	movt	r0, #8
   845c6:	4780      	blx	r0

  Ctrl_access_unlock();

  return status;
}
   845c8:	4620      	mov	r0, r4
   845ca:	bd70      	pop	{r4, r5, r6, pc}

000845cc <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   845cc:	f640 63d8 	movw	r3, #3800	; 0xed8
   845d0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   845d4:	781a      	ldrb	r2, [r3, #0]
   845d6:	f102 30ff 	add.w	r0, r2, #4294967295
   845da:	b2c1      	uxtb	r1, r0
   845dc:	7019      	strb	r1, [r3, #0]
   845de:	4770      	bx	lr

000845e0 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   845e0:	f04f 0000 	mov.w	r0, #0
   845e4:	4770      	bx	lr
   845e6:	bf00      	nop

000845e8 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   845e8:	f04f 0000 	mov.w	r0, #0
   845ec:	4770      	bx	lr
   845ee:	bf00      	nop

000845f0 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
   845f0:	4770      	bx	lr
   845f2:	bf00      	nop

000845f4 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
   845f4:	b530      	push	{r4, r5, lr}
   845f6:	b083      	sub	sp, #12

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   845f8:	f640 63ec 	movw	r3, #3820	; 0xeec
   845fc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84600:	7818      	ldrb	r0, [r3, #0]
   84602:	2800      	cmp	r0, #0
   84604:	f040 80df 	bne.w	847c6 <udi_cdc_tx_send+0x1d2>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   84608:	f248 2191 	movw	r1, #33425	; 0x8291
   8460c:	f2c0 0108 	movt	r1, #8
   84610:	4788      	blx	r1
   84612:	b160      	cbz	r0, 8462e <udi_cdc_tx_send+0x3a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   84614:	f640 64e0 	movw	r4, #3808	; 0xee0
   84618:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8461c:	8824      	ldrh	r4, [r4, #0]
   8461e:	f248 20f5 	movw	r0, #33525	; 0x82f5
   84622:	f2c0 0008 	movt	r0, #8
   84626:	4780      	blx	r0
   84628:	4284      	cmp	r4, r0
   8462a:	d10d      	bne.n	84648 <udi_cdc_tx_send+0x54>
   8462c:	e0cb      	b.n	847c6 <udi_cdc_tx_send+0x1d2>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   8462e:	f640 62e0 	movw	r2, #3808	; 0xee0
   84632:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84636:	8814      	ldrh	r4, [r2, #0]
   84638:	f248 23e5 	movw	r3, #33509	; 0x82e5
   8463c:	f2c0 0308 	movt	r3, #8
   84640:	4798      	blx	r3
   84642:	4284      	cmp	r4, r0
   84644:	f000 80bf 	beq.w	847c6 <udi_cdc_tx_send+0x1d2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84648:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   8464c:	f1d5 0501 	rsbs	r5, r5, #1
   84650:	bf38      	it	cc
   84652:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   84654:	b672      	cpsid	i
   84656:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8465a:	f240 2138 	movw	r1, #568	; 0x238
   8465e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84662:	f04f 0200 	mov.w	r2, #0
   84666:	700a      	strb	r2, [r1, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   84668:	f640 23cc 	movw	r3, #2764	; 0xacc
   8466c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84670:	781c      	ldrb	r4, [r3, #0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   84672:	f640 20d0 	movw	r0, #2768	; 0xad0
   84676:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8467a:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
   8467e:	bb79      	cbnz	r1, 846e0 <udi_cdc_tx_send+0xec>
		sof_zlp_counter++;
   84680:	f640 23c8 	movw	r3, #2760	; 0xac8
   84684:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84688:	881a      	ldrh	r2, [r3, #0]
   8468a:	f102 0201 	add.w	r2, r2, #1
   8468e:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   84690:	f248 2091 	movw	r0, #33425	; 0x8291
   84694:	f2c0 0008 	movt	r0, #8
   84698:	4780      	blx	r0
   8469a:	b930      	cbnz	r0, 846aa <udi_cdc_tx_send+0xb6>
   8469c:	f640 21c8 	movw	r1, #2760	; 0xac8
   846a0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   846a4:	880b      	ldrh	r3, [r1, #0]
   846a6:	2b63      	cmp	r3, #99	; 0x63
   846a8:	d90d      	bls.n	846c6 <udi_cdc_tx_send+0xd2>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   846aa:	f248 2291 	movw	r2, #33425	; 0x8291
   846ae:	f2c0 0208 	movt	r2, #8
   846b2:	4790      	blx	r2
   846b4:	b1a0      	cbz	r0, 846e0 <udi_cdc_tx_send+0xec>
   846b6:	f640 20c8 	movw	r0, #2760	; 0xac8
   846ba:	f2c2 0007 	movt	r0, #8199	; 0x2007
   846be:	8801      	ldrh	r1, [r0, #0]
   846c0:	f5b1 7f48 	cmp.w	r1, #800	; 0x320
   846c4:	d20c      	bcs.n	846e0 <udi_cdc_tx_send+0xec>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   846c6:	2d00      	cmp	r5, #0
   846c8:	d07d      	beq.n	847c6 <udi_cdc_tx_send+0x1d2>
		cpu_irq_enable();
   846ca:	f240 2338 	movw	r3, #568	; 0x238
   846ce:	f2c2 0307 	movt	r3, #8199	; 0x2007
   846d2:	f04f 0201 	mov.w	r2, #1
   846d6:	701a      	strb	r2, [r3, #0]
   846d8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   846dc:	b662      	cpsie	i
   846de:	e072      	b.n	847c6 <udi_cdc_tx_send+0x1d2>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   846e0:	f640 23c8 	movw	r3, #2760	; 0xac8
   846e4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   846e8:	f04f 0200 	mov.w	r2, #0
   846ec:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   846ee:	f241 3000 	movw	r0, #4864	; 0x1300
   846f2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   846f6:	7801      	ldrb	r1, [r0, #0]
   846f8:	b949      	cbnz	r1, 8470e <udi_cdc_tx_send+0x11a>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   846fa:	4294      	cmp	r4, r2
   846fc:	bf14      	ite	ne
   846fe:	2200      	movne	r2, #0
   84700:	2201      	moveq	r2, #1
   84702:	f640 23cc 	movw	r3, #2764	; 0xacc
   84706:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8470a:	701a      	strb	r2, [r3, #0]
   8470c:	e003      	b.n	84716 <udi_cdc_tx_send+0x122>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   8470e:	f1d4 0401 	rsbs	r4, r4, #1
   84712:	bf38      	it	cc
   84714:	2400      	movcc	r4, #0
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   84716:	f640 60ec 	movw	r0, #3820	; 0xeec
   8471a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8471e:	f04f 0201 	mov.w	r2, #1
   84722:	7002      	strb	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   84724:	b13d      	cbz	r5, 84736 <udi_cdc_tx_send+0x142>
		cpu_irq_enable();
   84726:	f240 2538 	movw	r5, #568	; 0x238
   8472a:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8472e:	702a      	strb	r2, [r5, #0]
   84730:	f3bf 8f5f 	dmb	sy
   84734:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   84736:	4625      	mov	r5, r4
   84738:	f640 21d0 	movw	r1, #2768	; 0xad0
   8473c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84740:	f831 4014 	ldrh.w	r4, [r1, r4, lsl #1]
   84744:	f5b4 7400 	subs.w	r4, r4, #512	; 0x200
   84748:	bf18      	it	ne
   8474a:	2401      	movne	r4, #1
	if (b_short_packet) {
   8474c:	b1dc      	cbz	r4, 84786 <udi_cdc_tx_send+0x192>
		if (udd_is_high_speed()) {
   8474e:	f248 2291 	movw	r2, #33425	; 0x8291
   84752:	f2c0 0208 	movt	r2, #8
   84756:	4790      	blx	r2
   84758:	b150      	cbz	r0, 84770 <udi_cdc_tx_send+0x17c>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   8475a:	f248 20f5 	movw	r0, #33525	; 0x82f5
   8475e:	f2c0 0008 	movt	r0, #8
   84762:	4780      	blx	r0
   84764:	f640 62e0 	movw	r2, #3808	; 0xee0
   84768:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8476c:	8010      	strh	r0, [r2, #0]
   8476e:	e011      	b.n	84794 <udi_cdc_tx_send+0x1a0>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   84770:	f248 21e5 	movw	r1, #33509	; 0x82e5
   84774:	f2c0 0108 	movt	r1, #8
   84778:	4788      	blx	r1
   8477a:	f640 63e0 	movw	r3, #3808	; 0xee0
   8477e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84782:	8018      	strh	r0, [r3, #0]
   84784:	e006      	b.n	84794 <udi_cdc_tx_send+0x1a0>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   84786:	f640 63e0 	movw	r3, #3808	; 0xee0
   8478a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8478e:	f04f 0000 	mov.w	r0, #0
   84792:	8018      	strh	r0, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   84794:	f640 21d0 	movw	r1, #2768	; 0xad0
   84798:	f2c2 0107 	movt	r1, #8199	; 0x2007
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
   8479c:	f831 3015 	ldrh.w	r3, [r1, r5, lsl #1]
   847a0:	f244 70e1 	movw	r0, #18401	; 0x47e1
   847a4:	f2c0 0008 	movt	r0, #8
   847a8:	9000      	str	r0, [sp, #0]
   847aa:	f04f 0084 	mov.w	r0, #132	; 0x84
   847ae:	4621      	mov	r1, r4
   847b0:	f640 24d4 	movw	r4, #2772	; 0xad4
   847b4:	f2c2 0407 	movt	r4, #8199	; 0x2007
   847b8:	eb04 2245 	add.w	r2, r4, r5, lsl #9
   847bc:	f248 54b1 	movw	r4, #34225	; 0x85b1
   847c0:	f2c0 0408 	movt	r4, #8
   847c4:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   847c6:	b003      	add	sp, #12
   847c8:	bd30      	pop	{r4, r5, pc}
   847ca:	bf00      	nop

000847cc <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
   847cc:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
   847ce:	f04f 0000 	mov.w	r0, #0
   847d2:	f244 53f5 	movw	r3, #17909	; 0x45f5
   847d6:	f2c0 0308 	movt	r3, #8
   847da:	4798      	blx	r3
   847dc:	bd08      	pop	{r3, pc}
   847de:	bf00      	nop

000847e0 <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   847e0:	b508      	push	{r3, lr}
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   847e2:	b9e8      	cbnz	r0, 84820 <udi_cdc_data_sent+0x40>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   847e4:	f640 23cc 	movw	r3, #2764	; 0xacc
   847e8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   847ec:	7819      	ldrb	r1, [r3, #0]
   847ee:	f1d1 0101 	rsbs	r1, r1, #1
   847f2:	bf38      	it	cc
   847f4:	2100      	movcc	r1, #0
   847f6:	f640 23d0 	movw	r3, #2768	; 0xad0
   847fa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   847fe:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   84802:	f241 3100 	movw	r1, #4864	; 0x1300
   84806:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8480a:	7008      	strb	r0, [r1, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   8480c:	f640 62ec 	movw	r2, #3820	; 0xeec
   84810:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84814:	7010      	strb	r0, [r2, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
   84816:	f244 53f5 	movw	r3, #17909	; 0x45f5
   8481a:	f2c0 0308 	movt	r3, #8
   8481e:	4798      	blx	r3
   84820:	bd08      	pop	{r3, pc}
   84822:	bf00      	nop

00084824 <udi_cdc_comm_setup>:
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
}

bool udi_cdc_comm_setup(void)
{
   84824:	b508      	push	{r3, lr}
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
   84826:	f242 3390 	movw	r3, #9104	; 0x2390
   8482a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8482e:	7818      	ldrb	r0, [r3, #0]
   84830:	f010 0f80 	tst.w	r0, #128	; 0x80
   84834:	d020      	beq.n	84878 <udi_cdc_comm_setup+0x54>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   84836:	f000 0160 	and.w	r1, r0, #96	; 0x60
   8483a:	2920      	cmp	r1, #32
   8483c:	d156      	bne.n	848ec <udi_cdc_comm_setup+0xc8>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   8483e:	f242 3290 	movw	r2, #9104	; 0x2390
   84842:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84846:	7853      	ldrb	r3, [r2, #1]
   84848:	2b21      	cmp	r3, #33	; 0x21
   8484a:	d152      	bne.n	848f2 <udi_cdc_comm_setup+0xce>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   8484c:	f242 3090 	movw	r0, #9104	; 0x2390
   84850:	f2c2 0007 	movt	r0, #8199	; 0x2007
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   84854:	88c1      	ldrh	r1, [r0, #6]
   84856:	2907      	cmp	r1, #7
   84858:	d14e      	bne.n	848f8 <udi_cdc_comm_setup+0xd4>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
   8485a:	f242 3390 	movw	r3, #9104	; 0x2390
   8485e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84862:	f640 22c0 	movw	r2, #2752	; 0xac0
   84866:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8486a:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   8486c:	f04f 0007 	mov.w	r0, #7
   84870:	8198      	strh	r0, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   84872:	f04f 0001 	mov.w	r0, #1
   84876:	bd08      	pop	{r3, pc}
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   84878:	f000 0160 	and.w	r1, r0, #96	; 0x60
   8487c:	2920      	cmp	r1, #32
   8487e:	d13e      	bne.n	848fe <udi_cdc_comm_setup+0xda>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   84880:	f242 3290 	movw	r2, #9104	; 0x2390
   84884:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84888:	7853      	ldrb	r3, [r2, #1]
   8488a:	2b20      	cmp	r3, #32
   8488c:	d002      	beq.n	84894 <udi_cdc_comm_setup+0x70>
   8488e:	2b22      	cmp	r3, #34	; 0x22
   84890:	d138      	bne.n	84904 <udi_cdc_comm_setup+0xe0>
   84892:	e01a      	b.n	848ca <udi_cdc_comm_setup+0xa6>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   84894:	f242 3390 	movw	r3, #9104	; 0x2390
   84898:	f2c2 0307 	movt	r3, #8199	; 0x2007
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   8489c:	88d8      	ldrh	r0, [r3, #6]
   8489e:	2807      	cmp	r0, #7
   848a0:	d133      	bne.n	8490a <udi_cdc_comm_setup+0xe6>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
   848a2:	f242 3190 	movw	r1, #9104	; 0x2390
   848a6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   848aa:	f244 52f1 	movw	r2, #17905	; 0x45f1
   848ae:	f2c0 0208 	movt	r2, #8
   848b2:	610a      	str	r2, [r1, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
   848b4:	f640 23c0 	movw	r3, #2752	; 0xac0
   848b8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   848bc:	608b      	str	r3, [r1, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   848be:	f04f 0007 	mov.w	r0, #7
   848c2:	8188      	strh	r0, [r1, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   848c4:	f04f 0001 	mov.w	r0, #1
   848c8:	bd08      	pop	{r3, pc}
			case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
				// According cdc spec 1.1 chapter 6.2.14
				UDI_CDC_SET_DTR_EXT(port, (0 !=
   848ca:	f242 3090 	movw	r0, #9104	; 0x2390
   848ce:	f2c2 0007 	movt	r0, #8199	; 0x2007
   848d2:	7881      	ldrb	r1, [r0, #2]
   848d4:	f04f 0000 	mov.w	r0, #0
   848d8:	f001 0101 	and.w	r1, r1, #1
   848dc:	f242 124d 	movw	r2, #8525	; 0x214d
   848e0:	f2c0 0208 	movt	r2, #8
   848e4:	4790      	blx	r2
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
   848e6:	f04f 0001 	mov.w	r0, #1
   848ea:	bd08      	pop	{r3, pc}
			}
		}
	}
	return false;  // request Not supported
   848ec:	f04f 0000 	mov.w	r0, #0
   848f0:	bd08      	pop	{r3, pc}
   848f2:	f04f 0000 	mov.w	r0, #0
   848f6:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   848f8:	f04f 0000 	mov.w	r0, #0
   848fc:	bd08      	pop	{r3, pc}
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
   848fe:	f04f 0000 	mov.w	r0, #0
   84902:	bd08      	pop	{r3, pc}
   84904:	f04f 0000 	mov.w	r0, #0
   84908:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   8490a:	f04f 0000 	mov.w	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
   8490e:	bd08      	pop	{r3, pc}

00084910 <udi_cdc_data_disable>:
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
}

void udi_cdc_data_disable(void)
{
   84910:	b508      	push	{r3, lr}
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
   84912:	f640 23ca 	movw	r3, #2762	; 0xaca
   84916:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8491a:	781a      	ldrb	r2, [r3, #0]
   8491c:	f102 30ff 	add.w	r0, r2, #4294967295
   84920:	b2c1      	uxtb	r1, r0
   84922:	7019      	strb	r1, [r3, #0]
	port = udi_cdc_nb_data_enabled;
   84924:	7818      	ldrb	r0, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
   84926:	f249 231d 	movw	r3, #37405	; 0x921d
   8492a:	f2c0 0308 	movt	r3, #8
   8492e:	4798      	blx	r3
	udi_cdc_data_running = false;
   84930:	f640 60e4 	movw	r0, #3812	; 0xee4
   84934:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84938:	f04f 0200 	mov.w	r2, #0
   8493c:	7002      	strb	r2, [r0, #0]
   8493e:	bd08      	pop	{r3, pc}

00084940 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
   84940:	b508      	push	{r3, lr}
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
   84942:	f04f 0000 	mov.w	r0, #0
   84946:	f640 63d8 	movw	r3, #3800	; 0xed8
   8494a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8494e:	7018      	strb	r0, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
   84950:	f241 3104 	movw	r1, #4868	; 0x1304
   84954:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84958:	8008      	strh	r0, [r1, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
   8495a:	f640 63f0 	movw	r3, #3824	; 0xef0
   8495e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84962:	f04f 01a1 	mov.w	r1, #161	; 0xa1
   84966:	7019      	strb	r1, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   84968:	f04f 0120 	mov.w	r1, #32
   8496c:	7059      	strb	r1, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   8496e:	8058      	strh	r0, [r3, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   84970:	8098      	strh	r0, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   84972:	f04f 0102 	mov.w	r1, #2
   84976:	80d9      	strh	r1, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   84978:	8118      	strh	r0, [r3, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   8497a:	f640 23c0 	movw	r3, #2752	; 0xac0
   8497e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84982:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   84986:	6019      	str	r1, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   84988:	7118      	strb	r0, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   8498a:	7158      	strb	r0, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   8498c:	f04f 0208 	mov.w	r2, #8
   84990:	719a      	strb	r2, [r3, #6]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
   84992:	f249 230d 	movw	r3, #37389	; 0x920d
   84996:	f2c0 0308 	movt	r3, #8
   8499a:	4798      	blx	r3
   8499c:	b158      	cbz	r0, 849b6 <udi_cdc_comm_enable+0x76>
		return false;
	}
	udi_cdc_nb_comm_enabled++;
   8499e:	f640 60d8 	movw	r0, #3800	; 0xed8
   849a2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   849a6:	7801      	ldrb	r1, [r0, #0]
   849a8:	f101 0101 	add.w	r1, r1, #1
   849ac:	b2ca      	uxtb	r2, r1
   849ae:	7002      	strb	r2, [r0, #0]
	return true;
   849b0:	f04f 0001 	mov.w	r0, #1
   849b4:	bd08      	pop	{r3, pc}
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
   849b6:	f04f 0000 	mov.w	r0, #0
	}
	udi_cdc_nb_comm_enabled++;
	return true;
}
   849ba:	bd08      	pop	{r3, pc}

000849bc <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   849bc:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   849c0:	b672      	cpsid	i
   849c2:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   849c6:	f240 2238 	movw	r2, #568	; 0x238
   849ca:	f2c2 0207 	movt	r2, #8199	; 0x2007
   849ce:	f04f 0100 	mov.w	r1, #0
   849d2:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   849d4:	f640 60dc 	movw	r0, #3804	; 0xedc
   849d8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   849dc:	8802      	ldrh	r2, [r0, #0]
   849de:	b290      	uxth	r0, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   849e0:	f640 61e8 	movw	r1, #3816	; 0xee8
   849e4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   849e8:	7809      	ldrb	r1, [r1, #0]
   849ea:	f640 62d4 	movw	r2, #3796	; 0xed4
   849ee:	f2c2 0207 	movt	r2, #8199	; 0x2007
   849f2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   849f6:	1a08      	subs	r0, r1, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   849f8:	b94b      	cbnz	r3, 84a0e <udi_cdc_multi_get_nb_received_data+0x52>
		cpu_irq_enable();
   849fa:	f240 2338 	movw	r3, #568	; 0x238
   849fe:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84a02:	f04f 0201 	mov.w	r2, #1
   84a06:	701a      	strb	r2, [r3, #0]
   84a08:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   84a0c:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   84a0e:	4770      	bx	lr

00084a10 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   84a10:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   84a12:	f644 13bd 	movw	r3, #18877	; 0x49bd
   84a16:	f2c0 0308 	movt	r3, #8
   84a1a:	4798      	blx	r3
}
   84a1c:	3000      	adds	r0, #0
   84a1e:	bf18      	it	ne
   84a20:	2001      	movne	r0, #1
   84a22:	bd08      	pop	{r3, pc}

00084a24 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
   84a24:	b510      	push	{r4, lr}
   84a26:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84a28:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   84a2c:	f1d3 0001 	rsbs	r0, r3, #1
   84a30:	bf38      	it	cc
   84a32:	2000      	movcc	r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   84a34:	b672      	cpsid	i
   84a36:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84a3a:	f240 2238 	movw	r2, #568	; 0x238
   84a3e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84a42:	f04f 0100 	mov.w	r1, #0
   84a46:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   84a48:	f640 64e8 	movw	r4, #3816	; 0xee8
   84a4c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84a50:	7824      	ldrb	r4, [r4, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   84a52:	f241 23fc 	movw	r3, #4860	; 0x12fc
   84a56:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84a5a:	781a      	ldrb	r2, [r3, #0]
   84a5c:	b96a      	cbnz	r2, 84a7a <udi_cdc_rx_start+0x56>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   84a5e:	f640 61dc 	movw	r1, #3804	; 0xedc
   84a62:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84a66:	880b      	ldrh	r3, [r1, #0]
   84a68:	b29a      	uxth	r2, r3
   84a6a:	f640 61d4 	movw	r1, #3796	; 0xed4
   84a6e:	f2c2 0107 	movt	r1, #8199	; 0x2007
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
   84a72:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
   84a76:	4293      	cmp	r3, r2
   84a78:	d90e      	bls.n	84a98 <udi_cdc_rx_start+0x74>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   84a7a:	2800      	cmp	r0, #0
   84a7c:	d052      	beq.n	84b24 <udi_cdc_rx_start+0x100>
		cpu_irq_enable();
   84a7e:	f240 2138 	movw	r1, #568	; 0x238
   84a82:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84a86:	f04f 0201 	mov.w	r2, #1
   84a8a:	700a      	strb	r2, [r1, #0]
   84a8c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   84a90:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   84a92:	f04f 0000 	mov.w	r0, #0
   84a96:	e047      	b.n	84b28 <udi_cdc_rx_start+0x104>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
   84a98:	f640 62dc 	movw	r2, #3804	; 0xedc
   84a9c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84aa0:	f04f 0100 	mov.w	r1, #0
   84aa4:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   84aa6:	428c      	cmp	r4, r1
   84aa8:	bf14      	ite	ne
   84aaa:	2100      	movne	r1, #0
   84aac:	2101      	moveq	r1, #1
   84aae:	f640 63e8 	movw	r3, #3816	; 0xee8
   84ab2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84ab6:	7019      	strb	r1, [r3, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
   84ab8:	f241 22fc 	movw	r2, #4860	; 0x12fc
   84abc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84ac0:	f04f 0101 	mov.w	r1, #1
   84ac4:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   84ac6:	b138      	cbz	r0, 84ad8 <udi_cdc_rx_start+0xb4>
		cpu_irq_enable();
   84ac8:	f240 2038 	movw	r0, #568	; 0x238
   84acc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84ad0:	7001      	strb	r1, [r0, #0]
   84ad2:	f3bf 8f5f 	dmb	sy
   84ad6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
   84ad8:	f04f 0000 	mov.w	r0, #0
   84adc:	f644 2211 	movw	r2, #18961	; 0x4a11
   84ae0:	f2c0 0208 	movt	r2, #8
   84ae4:	4790      	blx	r2
   84ae6:	b130      	cbz	r0, 84af6 <udi_cdc_rx_start+0xd2>
		UDI_CDC_RX_NOTIFY(port);
   84ae8:	f04f 0000 	mov.w	r0, #0
   84aec:	f242 1171 	movw	r1, #8561	; 0x2171
   84af0:	f2c0 0108 	movt	r1, #8
   84af4:	4788      	blx	r1
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
   84af6:	f644 302d 	movw	r0, #19245	; 0x4b2d
   84afa:	f2c0 0008 	movt	r0, #8
   84afe:	9000      	str	r0, [sp, #0]
   84b00:	f04f 0005 	mov.w	r0, #5
   84b04:	f04f 0101 	mov.w	r1, #1
   84b08:	f640 63fc 	movw	r3, #3836	; 0xefc
   84b0c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84b10:	eb03 2244 	add.w	r2, r3, r4, lsl #9
   84b14:	f44f 7300 	mov.w	r3, #512	; 0x200
   84b18:	f248 54b1 	movw	r4, #34225	; 0x85b1
   84b1c:	f2c0 0408 	movt	r4, #8
   84b20:	47a0      	blx	r4
   84b22:	e001      	b.n	84b28 <udi_cdc_rx_start+0x104>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   84b24:	f04f 0000 	mov.w	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
   84b28:	b002      	add	sp, #8
   84b2a:	bd10      	pop	{r4, pc}

00084b2c <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   84b2c:	b510      	push	{r4, lr}
   84b2e:	b082      	sub	sp, #8
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   84b30:	bb88      	cbnz	r0, 84b96 <udi_cdc_data_received+0x6a>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   84b32:	f640 63e8 	movw	r3, #3816	; 0xee8
   84b36:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84b3a:	7818      	ldrb	r0, [r3, #0]
   84b3c:	f1d0 0301 	rsbs	r3, r0, #1
   84b40:	bf38      	it	cc
   84b42:	2300      	movcc	r3, #0
	if (!n) {
   84b44:	b9a9      	cbnz	r1, 84b72 <udi_cdc_data_received+0x46>
		udd_ep_run( ep,
   84b46:	f644 342d 	movw	r4, #19245	; 0x4b2d
   84b4a:	f2c0 0408 	movt	r4, #8
   84b4e:	9400      	str	r4, [sp, #0]
   84b50:	4610      	mov	r0, r2
   84b52:	f04f 0101 	mov.w	r1, #1
   84b56:	f640 62fc 	movw	r2, #3836	; 0xefc
   84b5a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84b5e:	eb02 2243 	add.w	r2, r2, r3, lsl #9
   84b62:	f44f 7300 	mov.w	r3, #512	; 0x200
   84b66:	f248 54b1 	movw	r4, #34225	; 0x85b1
   84b6a:	f2c0 0408 	movt	r4, #8
   84b6e:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
   84b70:	e011      	b.n	84b96 <udi_cdc_data_received+0x6a>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   84b72:	f640 62d4 	movw	r2, #3796	; 0xed4
   84b76:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84b7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   84b7e:	f04f 0000 	mov.w	r0, #0
   84b82:	f241 21fc 	movw	r1, #4860	; 0x12fc
   84b86:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84b8a:	7008      	strb	r0, [r1, #0]
	udi_cdc_rx_start(port);
   84b8c:	f644 2325 	movw	r3, #18981	; 0x4a25
   84b90:	f2c0 0308 	movt	r3, #8
   84b94:	4798      	blx	r3
}
   84b96:	b002      	add	sp, #8
   84b98:	bd10      	pop	{r4, pc}
   84b9a:	bf00      	nop

00084b9c <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
   84b9c:	b538      	push	{r3, r4, r5, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
   84b9e:	f04f 0400 	mov.w	r4, #0
   84ba2:	f640 23ca 	movw	r3, #2762	; 0xaca
   84ba6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84baa:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
   84bac:	f640 60ec 	movw	r0, #3820	; 0xeec
   84bb0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84bb4:	7004      	strb	r4, [r0, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   84bb6:	f241 3100 	movw	r1, #4864	; 0x1300
   84bba:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84bbe:	700c      	strb	r4, [r1, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   84bc0:	f640 22cc 	movw	r2, #2764	; 0xacc
   84bc4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84bc8:	7014      	strb	r4, [r2, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   84bca:	f640 23d0 	movw	r3, #2768	; 0xad0
   84bce:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84bd2:	4625      	mov	r5, r4
   84bd4:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   84bd6:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   84bd8:	f640 60e0 	movw	r0, #3808	; 0xee0
   84bdc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84be0:	8004      	strh	r4, [r0, #0]
	udi_cdc_tx_send(port);
   84be2:	4620      	mov	r0, r4
   84be4:	f244 51f5 	movw	r1, #17909	; 0x45f5
   84be8:	f2c0 0108 	movt	r1, #8
   84bec:	4788      	blx	r1

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
   84bee:	f241 22fc 	movw	r2, #4860	; 0x12fc
   84bf2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84bf6:	7014      	strb	r4, [r2, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   84bf8:	f640 63e8 	movw	r3, #3816	; 0xee8
   84bfc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84c00:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   84c02:	f640 60d4 	movw	r0, #3796	; 0xed4
   84c06:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84c0a:	8004      	strh	r4, [r0, #0]
	udi_cdc_rx_pos[port] = 0;
   84c0c:	f640 61dc 	movw	r1, #3804	; 0xedc
   84c10:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84c14:	800c      	strh	r4, [r1, #0]
	if (!udi_cdc_rx_start(port)) {
   84c16:	4620      	mov	r0, r4
   84c18:	f644 2225 	movw	r2, #18981	; 0x4a25
   84c1c:	f2c0 0208 	movt	r2, #8
   84c20:	4790      	blx	r2
   84c22:	b198      	cbz	r0, 84c4c <udi_cdc_data_enable+0xb0>
		return false;
	}
	udi_cdc_nb_data_enabled++;
   84c24:	f640 23ca 	movw	r3, #2762	; 0xaca
   84c28:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84c2c:	7818      	ldrb	r0, [r3, #0]
   84c2e:	f100 0001 	add.w	r0, r0, #1
   84c32:	b2c1      	uxtb	r1, r0
   84c34:	7019      	strb	r1, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   84c36:	781a      	ldrb	r2, [r3, #0]
   84c38:	2a01      	cmp	r2, #1
   84c3a:	d10a      	bne.n	84c52 <udi_cdc_data_enable+0xb6>
		udi_cdc_data_running = true;
   84c3c:	f04f 0001 	mov.w	r0, #1
   84c40:	f640 63e4 	movw	r3, #3812	; 0xee4
   84c44:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84c48:	7018      	strb	r0, [r3, #0]
   84c4a:	bd38      	pop	{r3, r4, r5, pc}
	udi_cdc_rx_trans_ongoing[port] = false;
	udi_cdc_rx_buf_sel[port] = 0;
	udi_cdc_rx_buf_nb[port][0] = 0;
	udi_cdc_rx_pos[port] = 0;
	if (!udi_cdc_rx_start(port)) {
		return false;
   84c4c:	f04f 0000 	mov.w	r0, #0
   84c50:	bd38      	pop	{r3, r4, r5, pc}
	}
	udi_cdc_nb_data_enabled++;
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
		udi_cdc_data_running = true;
	}
	return true;
   84c52:	f04f 0001 	mov.w	r0, #1
}
   84c56:	bd38      	pop	{r3, r4, r5, pc}

00084c58 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   84c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84c5c:	b083      	sub	sp, #12
   84c5e:	4615      	mov	r5, r2
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
   84c60:	4688      	mov	r8, r1
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   84c62:	f240 2738 	movw	r7, #568	; 0x238
   84c66:	f2c2 0707 	movt	r7, #8199	; 0x2007
   84c6a:	f04f 0b00 	mov.w	fp, #0
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   84c6e:	f640 66dc 	movw	r6, #3804	; 0xedc
   84c72:	f2c2 0607 	movt	r6, #8199	; 0x2007
	buf_sel = udi_cdc_rx_buf_sel[port];
   84c76:	f640 6ae8 	movw	sl, #3816	; 0xee8
   84c7a:	f2c2 0a07 	movt	sl, #8199	; 0x2007
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
   84c7e:	f640 69d4 	movw	r9, #3796	; 0xed4
   84c82:	f2c2 0907 	movt	r9, #8199	; 0x2007
	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   84c86:	f640 63fc 	movw	r3, #3836	; 0xefc
   84c8a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84c8e:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84c90:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   84c94:	b672      	cpsid	i
   84c96:	f3bf 8f5f 	dmb	sy
   84c9a:	f887 b000 	strb.w	fp, [r7]
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   84c9e:	8830      	ldrh	r0, [r6, #0]
   84ca0:	b283      	uxth	r3, r0
	buf_sel = udi_cdc_rx_buf_sel[port];
   84ca2:	f89a 1000 	ldrb.w	r1, [sl]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   84ca6:	b92a      	cbnz	r2, 84cb4 <udi_cdc_multi_read_buf+0x5c>
		cpu_irq_enable();
   84ca8:	f04f 0401 	mov.w	r4, #1
   84cac:	703c      	strb	r4, [r7, #0]
   84cae:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   84cb2:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
   84cb4:	f839 4011 	ldrh.w	r4, [r9, r1, lsl #1]
   84cb8:	42a3      	cmp	r3, r4
   84cba:	d307      	bcc.n	84ccc <udi_cdc_multi_read_buf+0x74>
		if (!udi_cdc_data_running) {
   84cbc:	f640 60e4 	movw	r0, #3812	; 0xee4
   84cc0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84cc4:	7801      	ldrb	r1, [r0, #0]
   84cc6:	2900      	cmp	r1, #0
   84cc8:	d1e2      	bne.n	84c90 <udi_cdc_multi_read_buf+0x38>
   84cca:	e01d      	b.n	84d08 <udi_cdc_multi_read_buf+0xb0>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   84ccc:	1ae4      	subs	r4, r4, r3
   84cce:	42a5      	cmp	r5, r4
   84cd0:	bf38      	it	cc
   84cd2:	462c      	movcc	r4, r5
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   84cd4:	eb03 2241 	add.w	r2, r3, r1, lsl #9
   84cd8:	4640      	mov	r0, r8
   84cda:	9b01      	ldr	r3, [sp, #4]
   84cdc:	1899      	adds	r1, r3, r2
   84cde:	4622      	mov	r2, r4
   84ce0:	f249 4301 	movw	r3, #37889	; 0x9401
   84ce4:	f2c0 0308 	movt	r3, #8
   84ce8:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   84cea:	8830      	ldrh	r0, [r6, #0]
   84cec:	1821      	adds	r1, r4, r0
   84cee:	b28a      	uxth	r2, r1
   84cf0:	8032      	strh	r2, [r6, #0]
	ptr_buf += copy_nb;
   84cf2:	44a0      	add	r8, r4
	size -= copy_nb;
   84cf4:	1b2d      	subs	r5, r5, r4
	udi_cdc_rx_start(port);
   84cf6:	f04f 0000 	mov.w	r0, #0
   84cfa:	f644 2325 	movw	r3, #18981	; 0x4a25
   84cfe:	f2c0 0308 	movt	r3, #8
   84d02:	4798      	blx	r3

	if (size) {
   84d04:	2d00      	cmp	r5, #0
   84d06:	d1c3      	bne.n	84c90 <udi_cdc_multi_read_buf+0x38>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   84d08:	4628      	mov	r0, r5
   84d0a:	b003      	add	sp, #12
   84d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00084d10 <udi_cdc_read_buf>:

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
   84d10:	b508      	push	{r3, lr}
   84d12:	4603      	mov	r3, r0
   84d14:	460a      	mov	r2, r1
	return udi_cdc_multi_read_buf(0, buf, size);
   84d16:	f04f 0000 	mov.w	r0, #0
   84d1a:	4619      	mov	r1, r3
   84d1c:	f644 4359 	movw	r3, #19545	; 0x4c59
   84d20:	f2c0 0308 	movt	r3, #8
   84d24:	4798      	blx	r3
}
   84d26:	bd08      	pop	{r3, pc}

00084d28 <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
   84d28:	b410      	push	{r4}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84d2a:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   84d2e:	b672      	cpsid	i
   84d30:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   84d34:	f240 2338 	movw	r3, #568	; 0x238
   84d38:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84d3c:	f04f 0200 	mov.w	r2, #0
   84d40:	701a      	strb	r2, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   84d42:	f640 20cc 	movw	r0, #2764	; 0xacc
   84d46:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84d4a:	7801      	ldrb	r1, [r0, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   84d4c:	f640 22d0 	movw	r2, #2768	; 0xad0
   84d50:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84d54:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
   84d58:	f1d1 0101 	rsbs	r1, r1, #1
   84d5c:	bf38      	it	cc
   84d5e:	2100      	movcc	r1, #0
   84d60:	b2c8      	uxtb	r0, r1
   84d62:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   84d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84d6a:	d11b      	bne.n	84da4 <udi_cdc_multi_get_free_tx_buffer+0x7c>
		if ((!udi_cdc_tx_trans_ongoing[port])
   84d6c:	f640 62ec 	movw	r2, #3820	; 0xeec
   84d70:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84d74:	7812      	ldrb	r2, [r2, #0]
   84d76:	b9aa      	cbnz	r2, 84da4 <udi_cdc_multi_get_free_tx_buffer+0x7c>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   84d78:	f241 3200 	movw	r2, #4864	; 0x1300
   84d7c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84d80:	7812      	ldrb	r2, [r2, #0]
   84d82:	b97a      	cbnz	r2, 84da4 <udi_cdc_multi_get_free_tx_buffer+0x7c>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
   84d84:	f241 3300 	movw	r3, #4864	; 0x1300
   84d88:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84d8c:	f04f 0001 	mov.w	r0, #1
   84d90:	7018      	strb	r0, [r3, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   84d92:	f640 22cc 	movw	r2, #2764	; 0xacc
   84d96:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84d9a:	7011      	strb	r1, [r2, #0]
			buf_sel_nb = 0;
			buf_nosel_nb = UDI_CDC_TX_BUFFERS;
   84d9c:	f44f 7000 	mov.w	r0, #512	; 0x200
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
   84da0:	f04f 0300 	mov.w	r3, #0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   84da4:	b94c      	cbnz	r4, 84dba <udi_cdc_multi_get_free_tx_buffer+0x92>
		cpu_irq_enable();
   84da6:	f240 2238 	movw	r2, #568	; 0x238
   84daa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84dae:	f04f 0101 	mov.w	r1, #1
   84db2:	7011      	strb	r1, [r2, #0]
   84db4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   84db8:	b662      	cpsie	i
iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
   84dba:	18c0      	adds	r0, r0, r3
		}
	}
	cpu_irq_restore(flags);

	return (UDI_CDC_TX_BUFFERS - buf_sel_nb) + (UDI_CDC_TX_BUFFERS - buf_nosel_nb);
}
   84dbc:	f5c0 6080 	rsb	r0, r0, #1024	; 0x400
   84dc0:	bc10      	pop	{r4}
   84dc2:	4770      	bx	lr

00084dc4 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   84dc4:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   84dc6:	f644 5329 	movw	r3, #19753	; 0x4d29
   84dca:	f2c0 0308 	movt	r3, #8
   84dce:	4798      	blx	r3
}
   84dd0:	3000      	adds	r0, #0
   84dd2:	bf18      	it	ne
   84dd4:	2001      	movne	r0, #1
   84dd6:	bd08      	pop	{r3, pc}

00084dd8 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   84dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   84ddc:	460d      	mov	r5, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   84dde:	f640 23c0 	movw	r3, #2752	; 0xac0
   84de2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84de6:	799f      	ldrb	r7, [r3, #6]
   84de8:	2f09      	cmp	r7, #9
   84dea:	bf14      	ite	ne
   84dec:	2700      	movne	r7, #0
   84dee:	2701      	moveq	r7, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   84df0:	f04f 0400 	mov.w	r4, #0
   84df4:	f644 56c5 	movw	r6, #19909	; 0x4dc5
   84df8:	f2c0 0608 	movt	r6, #8
		if (!udi_cdc_data_running) {
   84dfc:	f640 69e4 	movw	r9, #3812	; 0xee4
   84e00:	f2c2 0907 	movt	r9, #8199	; 0x2007
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   84e04:	f240 2838 	movw	r8, #568	; 0x238
   84e08:	f2c2 0807 	movt	r8, #8199	; 0x2007

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   84e0c:	4620      	mov	r0, r4
   84e0e:	47b0      	blx	r6
   84e10:	b928      	cbnz	r0, 84e1e <udi_cdc_multi_putc+0x46>
		if (!udi_cdc_data_running) {
   84e12:	f899 3000 	ldrb.w	r3, [r9]
   84e16:	2b00      	cmp	r3, #0
   84e18:	d1f8      	bne.n	84e0c <udi_cdc_multi_putc+0x34>
   84e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84e1e:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   84e22:	b672      	cpsid	i
   84e24:	f3bf 8f5f 	dmb	sy
   84e28:	f888 4000 	strb.w	r4, [r8]
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   84e2c:	f640 21cc 	movw	r1, #2764	; 0xacc
   84e30:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84e34:	780b      	ldrb	r3, [r1, #0]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   84e36:	f640 22d0 	movw	r2, #2768	; 0xad0
   84e3a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84e3e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   84e42:	eb01 2c43 	add.w	ip, r1, r3, lsl #9
   84e46:	f640 2ad4 	movw	sl, #2772	; 0xad4
   84e4a:	f2c2 0a07 	movt	sl, #8199	; 0x2007
   84e4e:	f80a 500c 	strb.w	r5, [sl, ip]
   84e52:	f101 0101 	add.w	r1, r1, #1
   84e56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   84e5a:	b930      	cbnz	r0, 84e6a <udi_cdc_multi_putc+0x92>
		cpu_irq_enable();
   84e5c:	f04f 0001 	mov.w	r0, #1
   84e60:	f888 0000 	strb.w	r0, [r8]
   84e64:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   84e68:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
   84e6a:	b11f      	cbz	r7, 84e74 <udi_cdc_multi_putc+0x9c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
   84e6c:	ea4f 2525 	mov.w	r5, r5, asr #8
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
   84e70:	4627      	mov	r7, r4
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
   84e72:	e7cb      	b.n	84e0c <udi_cdc_multi_putc+0x34>
	}
	return true;
   84e74:	f04f 0001 	mov.w	r0, #1
}
   84e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00084e7c <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
   84e7c:	b508      	push	{r3, lr}
   84e7e:	4601      	mov	r1, r0
	return udi_cdc_multi_putc(0, value);
   84e80:	f04f 0000 	mov.w	r0, #0
   84e84:	f644 53d9 	movw	r3, #19929	; 0x4dd9
   84e88:	f2c0 0308 	movt	r3, #8
   84e8c:	4798      	blx	r3
}
   84e8e:	bd08      	pop	{r3, pc}

00084e90 <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
   84e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84e94:	b083      	sub	sp, #12
   84e96:	4615      	mov	r5, r2

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
   84e98:	f640 23c0 	movw	r3, #2752	; 0xac0
   84e9c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84ea0:	7998      	ldrb	r0, [r3, #6]
   84ea2:	2809      	cmp	r0, #9
		size *=2;
   84ea4:	bf08      	it	eq
   84ea6:	0055      	lsleq	r5, r2, #1
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
   84ea8:	4689      	mov	r9, r1
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   84eaa:	f04f 0800 	mov.w	r8, #0
		if (!udi_cdc_data_running) {
   84eae:	f640 61e4 	movw	r1, #3812	; 0xee4
   84eb2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84eb6:	9101      	str	r1, [sp, #4]
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   84eb8:	f240 2238 	movw	r2, #568	; 0x238
   84ebc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84ec0:	9200      	str	r2, [sp, #0]
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   84ec2:	4640      	mov	r0, r8
   84ec4:	f644 53c5 	movw	r3, #19909	; 0x4dc5
   84ec8:	f2c0 0308 	movt	r3, #8
   84ecc:	4798      	blx	r3
   84ece:	b920      	cbnz	r0, 84eda <udi_cdc_multi_write_buf+0x4a>
		if (!udi_cdc_data_running) {
   84ed0:	9801      	ldr	r0, [sp, #4]
   84ed2:	7803      	ldrb	r3, [r0, #0]
   84ed4:	2b00      	cmp	r3, #0
   84ed6:	d1f4      	bne.n	84ec2 <udi_cdc_multi_write_buf+0x32>
   84ed8:	e035      	b.n	84f46 <udi_cdc_multi_write_buf+0xb6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84eda:	f3ef 8b10 	mrs	fp, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   84ede:	b672      	cpsid	i
   84ee0:	f3bf 8f5f 	dmb	sy
   84ee4:	9c00      	ldr	r4, [sp, #0]
   84ee6:	f884 8000 	strb.w	r8, [r4]
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   84eea:	f640 26cc 	movw	r6, #2764	; 0xacc
   84eee:	f2c2 0607 	movt	r6, #8199	; 0x2007
   84ef2:	7836      	ldrb	r6, [r6, #0]
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   84ef4:	f640 2ad0 	movw	sl, #2768	; 0xad0
   84ef8:	f2c2 0a07 	movt	sl, #8199	; 0x2007
   84efc:	f83a 7016 	ldrh.w	r7, [sl, r6, lsl #1]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
   84f00:	f5c7 7400 	rsb	r4, r7, #512	; 0x200
   84f04:	42a5      	cmp	r5, r4
   84f06:	bf38      	it	cc
   84f08:	462c      	movcc	r4, r5
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
   84f0a:	eb07 2146 	add.w	r1, r7, r6, lsl #9
   84f0e:	f640 20d4 	movw	r0, #2772	; 0xad4
   84f12:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84f16:	1840      	adds	r0, r0, r1
   84f18:	4649      	mov	r1, r9
   84f1a:	4622      	mov	r2, r4
   84f1c:	f249 4301 	movw	r3, #37889	; 0x9401
   84f20:	f2c0 0308 	movt	r3, #8
   84f24:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
   84f26:	193f      	adds	r7, r7, r4
   84f28:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   84f2c:	f1bb 0f00 	cmp.w	fp, #0
   84f30:	d106      	bne.n	84f40 <udi_cdc_multi_write_buf+0xb0>
		cpu_irq_enable();
   84f32:	f04f 0101 	mov.w	r1, #1
   84f36:	9a00      	ldr	r2, [sp, #0]
   84f38:	7011      	strb	r1, [r2, #0]
   84f3a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   84f3e:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
   84f40:	44a1      	add	r9, r4
	size -= copy_nb;

	if (size) {
   84f42:	1b2d      	subs	r5, r5, r4
   84f44:	d1bd      	bne.n	84ec2 <udi_cdc_multi_write_buf+0x32>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
}
   84f46:	4628      	mov	r0, r5
   84f48:	b003      	add	sp, #12
   84f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84f4e:	bf00      	nop

00084f50 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
   84f50:	b508      	push	{r3, lr}
   84f52:	4603      	mov	r3, r0
   84f54:	460a      	mov	r2, r1
	return udi_cdc_multi_write_buf(0, buf, size);
   84f56:	f04f 0000 	mov.w	r0, #0
   84f5a:	4619      	mov	r1, r3
   84f5c:	f644 6391 	movw	r3, #20113	; 0x4e91
   84f60:	f2c0 0308 	movt	r3, #8
   84f64:	4798      	blx	r3
}
   84f66:	bd08      	pop	{r3, pc}

00084f68 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
   84f68:	f04f 0000 	mov.w	r0, #0
   84f6c:	4770      	bx	lr
   84f6e:	bf00      	nop

00084f70 <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
   84f70:	3000      	adds	r0, #0
   84f72:	bf18      	it	ne
   84f74:	2001      	movne	r0, #1
   84f76:	f242 338d 	movw	r3, #9101	; 0x238d
   84f7a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84f7e:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
   84f80:	f240 11ac 	movw	r1, #428	; 0x1ac
   84f84:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84f88:	f04f 0201 	mov.w	r2, #1
   84f8c:	700a      	strb	r2, [r1, #0]
   84f8e:	4770      	bx	lr

00084f90 <udi_msc_clear_sense>:
//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
   84f90:	f241 3250 	movw	r2, #4944	; 0x1350
   84f94:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84f98:	f04f 0300 	mov.w	r3, #0
   84f9c:	4611      	mov	r1, r2
   84f9e:	f841 3b04 	str.w	r3, [r1], #4
   84fa2:	6053      	str	r3, [r2, #4]
   84fa4:	f101 0104 	add.w	r1, r1, #4
   84fa8:	f841 3b04 	str.w	r3, [r1], #4
   84fac:	f841 3b04 	str.w	r3, [r1], #4
   84fb0:	800b      	strh	r3, [r1, #0]
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
   84fb2:	f04f 00f0 	mov.w	r0, #240	; 0xf0
   84fb6:	7010      	strb	r0, [r2, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
   84fb8:	f04f 030a 	mov.w	r3, #10
   84fbc:	71d3      	strb	r3, [r2, #7]
   84fbe:	4770      	bx	lr

00084fc0 <udi_msc_sense_pass>:
	udi_msc_sense.AddSenseCode = add_sense >> 8;
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
}

static void udi_msc_sense_pass(void)
{
   84fc0:	b508      	push	{r3, lr}
	udi_msc_clear_sense();
   84fc2:	f644 7391 	movw	r3, #20369	; 0x4f91
   84fc6:	f2c0 0308 	movt	r3, #8
   84fca:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
   84fcc:	f240 10e8 	movw	r0, #488	; 0x1e8
   84fd0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84fd4:	f04f 0200 	mov.w	r2, #0
   84fd8:	7302      	strb	r2, [r0, #12]
   84fda:	bd08      	pop	{r3, pc}

00084fdc <udi_msc_sense_fail>:
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
}

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
   84fdc:	b570      	push	{r4, r5, r6, lr}
   84fde:	4606      	mov	r6, r0
   84fe0:	460d      	mov	r5, r1
   84fe2:	4614      	mov	r4, r2
	udi_msc_clear_sense();
   84fe4:	f644 7391 	movw	r3, #20369	; 0x4f91
   84fe8:	f2c0 0308 	movt	r3, #8
   84fec:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
   84fee:	f240 10e8 	movw	r0, #488	; 0x1e8
   84ff2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84ff6:	f04f 0201 	mov.w	r2, #1
   84ffa:	7302      	strb	r2, [r0, #12]
	udi_msc_sense.sense_flag_key = sense_key;
   84ffc:	f241 3150 	movw	r1, #4944	; 0x1350
   85000:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85004:	708e      	strb	r6, [r1, #2]
	udi_msc_sense.information[0] = lba >> 24;
   85006:	ea4f 6314 	mov.w	r3, r4, lsr #24
   8500a:	70cb      	strb	r3, [r1, #3]
	udi_msc_sense.information[1] = lba >> 16;
   8500c:	ea4f 4014 	mov.w	r0, r4, lsr #16
   85010:	7108      	strb	r0, [r1, #4]
	udi_msc_sense.information[2] = lba >> 8;
   85012:	ea4f 2214 	mov.w	r2, r4, lsr #8
   85016:	714a      	strb	r2, [r1, #5]
	udi_msc_sense.information[3] = lba;
   85018:	718c      	strb	r4, [r1, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
   8501a:	ea4f 2315 	mov.w	r3, r5, lsr #8
   8501e:	730b      	strb	r3, [r1, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
   85020:	734d      	strb	r5, [r1, #13]
   85022:	bd70      	pop	{r4, r5, r6, pc}

00085024 <udi_msc_sense_fail_busy_or_change>:
{
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
}

static void udi_msc_sense_fail_busy_or_change(void)
{
   85024:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
   85026:	f04f 0006 	mov.w	r0, #6
   8502a:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   8502e:	f04f 0200 	mov.w	r2, #0
   85032:	f644 73dd 	movw	r3, #20445	; 0x4fdd
   85036:	f2c0 0308 	movt	r3, #8
   8503a:	4798      	blx	r3
   8503c:	bd08      	pop	{r3, pc}
   8503e:	bf00      	nop

00085040 <udi_msc_sense_fail_not_present>:
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
}


static void udi_msc_sense_fail_not_present(void)
{
   85040:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
   85042:	f04f 0002 	mov.w	r0, #2
   85046:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
   8504a:	f04f 0200 	mov.w	r2, #0
   8504e:	f644 73dd 	movw	r3, #20445	; 0x4fdd
   85052:	f2c0 0308 	movt	r3, #8
   85056:	4798      	blx	r3
   85058:	bd08      	pop	{r3, pc}
   8505a:	bf00      	nop

0008505c <udi_msc_sense_fail_hardware>:
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}

static void udi_msc_sense_fail_hardware(void)
{
   8505c:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
   8505e:	f04f 0004 	mov.w	r0, #4
   85062:	f04f 0100 	mov.w	r1, #0
   85066:	460a      	mov	r2, r1
   85068:	f644 73dd 	movw	r3, #20445	; 0x4fdd
   8506c:	f2c0 0308 	movt	r3, #8
   85070:	4798      	blx	r3
   85072:	bd08      	pop	{r3, pc}

00085074 <udi_msc_sense_fail_cdb_invalid>:
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
}

static void udi_msc_sense_fail_cdb_invalid(void)
{
   85074:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
   85076:	f04f 0005 	mov.w	r0, #5
   8507a:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   8507e:	f04f 0200 	mov.w	r2, #0
   85082:	f644 73dd 	movw	r3, #20445	; 0x4fdd
   85086:	f2c0 0308 	movt	r3, #8
   8508a:	4798      	blx	r3
   8508c:	bd08      	pop	{r3, pc}
   8508e:	bf00      	nop

00085090 <udi_msc_csw_send>:
	udi_msc_csw_send();
}


void udi_msc_csw_send(void)
{
   85090:	b510      	push	{r4, lr}
   85092:	b082      	sub	sp, #8
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
   85094:	f245 231d 	movw	r3, #21021	; 0x521d
   85098:	f2c0 0308 	movt	r3, #8
   8509c:	9300      	str	r3, [sp, #0]
   8509e:	f04f 0081 	mov.w	r0, #129	; 0x81
   850a2:	f04f 0100 	mov.w	r1, #0
   850a6:	f240 12e8 	movw	r2, #488	; 0x1e8
   850aa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   850ae:	f04f 030d 	mov.w	r3, #13
   850b2:	f248 54b1 	movw	r4, #34225	; 0x85b1
   850b6:	f2c0 0408 	movt	r4, #8
   850ba:	47a0      	blx	r4
   850bc:	b950      	cbnz	r0, 850d4 <udi_msc_csw_send+0x44>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
   850be:	f04f 0081 	mov.w	r0, #129	; 0x81
   850c2:	f245 0191 	movw	r1, #20625	; 0x5091
   850c6:	f2c0 0108 	movt	r1, #8
   850ca:	f648 423d 	movw	r2, #35901	; 0x8c3d
   850ce:	f2c0 0208 	movt	r2, #8
   850d2:	4790      	blx	r2
	}
}
   850d4:	b002      	add	sp, #8
   850d6:	bd10      	pop	{r4, pc}

000850d8 <udi_msc_csw_process>:

//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
   850d8:	b508      	push	{r3, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
   850da:	f240 13e8 	movw	r3, #488	; 0x1e8
   850de:	f2c2 0307 	movt	r3, #8199	; 0x2007
   850e2:	6899      	ldr	r1, [r3, #8]
   850e4:	b171      	cbz	r1, 85104 <udi_msc_csw_process+0x2c>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
   850e6:	f241 3210 	movw	r2, #4880	; 0x1310
   850ea:	f2c2 0207 	movt	r2, #8199	; 0x2007
   850ee:	f992 300c 	ldrsb.w	r3, [r2, #12]
   850f2:	2b00      	cmp	r3, #0
			udd_ep_set_halt(UDI_MSC_EP_IN);
   850f4:	bfb4      	ite	lt
   850f6:	2081      	movlt	r0, #129	; 0x81
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
   850f8:	2002      	movge	r0, #2
   850fa:	f248 3195 	movw	r1, #33685	; 0x8395
   850fe:	f2c0 0108 	movt	r1, #8
   85102:	4788      	blx	r1
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
   85104:	f241 3010 	movw	r0, #4880	; 0x1310
   85108:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8510c:	6842      	ldr	r2, [r0, #4]
   8510e:	f240 13e8 	movw	r3, #488	; 0x1e8
   85112:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85116:	605a      	str	r2, [r3, #4]
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
	udi_msc_csw_send();
   85118:	f245 0191 	movw	r1, #20625	; 0x5091
   8511c:	f2c0 0108 	movt	r1, #8
   85120:	4788      	blx	r1
   85122:	bd08      	pop	{r3, pc}

00085124 <udi_msc_cbw_validate>:
	}
}


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
   85124:	b508      	push	{r3, lr}
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
   85126:	f241 3310 	movw	r3, #4880	; 0x1310
   8512a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8512e:	7b1a      	ldrb	r2, [r3, #12]
   85130:	4051      	eors	r1, r2
   85132:	f011 0f80 	tst.w	r1, #128	; 0x80
   85136:	d106      	bne.n	85146 <udi_msc_cbw_validate+0x22>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
   85138:	f240 11e8 	movw	r1, #488	; 0x1e8
   8513c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85140:	688b      	ldr	r3, [r1, #8]
   85142:	4283      	cmp	r3, r0
   85144:	d20c      	bcs.n	85160 <udi_msc_cbw_validate+0x3c>
		udi_msc_sense_fail_cdb_invalid();
   85146:	f245 0075 	movw	r0, #20597	; 0x5075
   8514a:	f2c0 0008 	movt	r0, #8
   8514e:	4780      	blx	r0
		udi_msc_csw_process();
   85150:	f245 02d9 	movw	r2, #20697	; 0x50d9
   85154:	f2c0 0208 	movt	r2, #8
   85158:	4790      	blx	r2
		return false;
   8515a:	f04f 0000 	mov.w	r0, #0
   8515e:	bd08      	pop	{r3, pc}
	 *  - Case  4: Hi > Dn
	 *  - Case  5: Hi > Di
	 *  - Case  9: Ho > Dn
	 *  - Case 11: Ho > Do
	 */
	return true;
   85160:	f04f 0001 	mov.w	r0, #1
}
   85164:	bd08      	pop	{r3, pc}
   85166:	bf00      	nop

00085168 <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
   85168:	b510      	push	{r4, lr}
   8516a:	b082      	sub	sp, #8
   8516c:	4602      	mov	r2, r0
   8516e:	460b      	mov	r3, r1
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
   85170:	f245 11a9 	movw	r1, #20905	; 0x51a9
   85174:	f2c0 0108 	movt	r1, #8
   85178:	9100      	str	r1, [sp, #0]
   8517a:	f04f 0081 	mov.w	r0, #129	; 0x81
   8517e:	f04f 0101 	mov.w	r1, #1
   85182:	f248 54b1 	movw	r4, #34225	; 0x85b1
   85186:	f2c0 0408 	movt	r4, #8
   8518a:	47a0      	blx	r4
   8518c:	b948      	cbnz	r0, 851a2 <udi_msc_data_send+0x3a>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
   8518e:	f245 035d 	movw	r3, #20573	; 0x505d
   85192:	f2c0 0308 	movt	r3, #8
   85196:	4798      	blx	r3
		udi_msc_csw_process();
   85198:	f245 00d9 	movw	r0, #20697	; 0x50d9
   8519c:	f2c0 0008 	movt	r0, #8
   851a0:	4780      	blx	r0
	}
}
   851a2:	b002      	add	sp, #8
   851a4:	bd10      	pop	{r4, pc}
   851a6:	bf00      	nop

000851a8 <udi_msc_data_sent>:


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
   851a8:	b510      	push	{r4, lr}
   851aa:	460c      	mov	r4, r1
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
   851ac:	b980      	cbnz	r0, 851d0 <udi_msc_data_sent+0x28>
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Update sense data
	udi_msc_sense_pass();
   851ae:	f644 73c1 	movw	r3, #20417	; 0x4fc1
   851b2:	f2c0 0308 	movt	r3, #8
   851b6:	4798      	blx	r3
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
   851b8:	f240 10e8 	movw	r0, #488	; 0x1e8
   851bc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   851c0:	6882      	ldr	r2, [r0, #8]
   851c2:	1b14      	subs	r4, r2, r4
   851c4:	6084      	str	r4, [r0, #8]
	udi_msc_csw_process();
   851c6:	f245 01d9 	movw	r1, #20697	; 0x50d9
   851ca:	f2c0 0108 	movt	r1, #8
   851ce:	4788      	blx	r1
   851d0:	bd10      	pop	{r4, pc}
   851d2:	bf00      	nop

000851d4 <udi_msc_cbw_wait>:
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
}

static void udi_msc_cbw_wait(void)
{
   851d4:	b510      	push	{r4, lr}
   851d6:	b082      	sub	sp, #8
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
   851d8:	f245 4331 	movw	r3, #21553	; 0x5431
   851dc:	f2c0 0308 	movt	r3, #8
   851e0:	9300      	str	r3, [sp, #0]
   851e2:	f04f 0002 	mov.w	r0, #2
   851e6:	f04f 0101 	mov.w	r1, #1
   851ea:	f241 3210 	movw	r2, #4880	; 0x1310
   851ee:	f2c2 0207 	movt	r2, #8199	; 0x2007
   851f2:	f04f 031f 	mov.w	r3, #31
   851f6:	f248 54b1 	movw	r4, #34225	; 0x85b1
   851fa:	f2c0 0408 	movt	r4, #8
   851fe:	47a0      	blx	r4
   85200:	b950      	cbnz	r0, 85218 <udi_msc_cbw_wait+0x44>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
   85202:	f04f 0002 	mov.w	r0, #2
   85206:	f245 11d5 	movw	r1, #20949	; 0x51d5
   8520a:	f2c0 0108 	movt	r1, #8
   8520e:	f648 423d 	movw	r2, #35901	; 0x8c3d
   85212:	f2c0 0208 	movt	r2, #8
   85216:	4790      	blx	r2
	}
}
   85218:	b002      	add	sp, #8
   8521a:	bd10      	pop	{r4, pc}

0008521c <udi_msc_csw_sent>:
}


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
   8521c:	b508      	push	{r3, lr}
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
   8521e:	f245 13d5 	movw	r3, #20949	; 0x51d5
   85222:	f2c0 0308 	movt	r3, #8
   85226:	4798      	blx	r3
   85228:	bd08      	pop	{r3, pc}
   8522a:	bf00      	nop

0008522c <udi_msc_cbw_invalid>:

//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
   8522c:	b508      	push	{r3, lr}
	if (!udi_msc_b_cbw_invalid)
   8522e:	f241 3330 	movw	r3, #4912	; 0x1330
   85232:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85236:	7818      	ldrb	r0, [r3, #0]
   85238:	b188      	cbz	r0, 8525e <udi_msc_cbw_invalid+0x32>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_OUT);
   8523a:	f04f 0002 	mov.w	r0, #2
   8523e:	f248 3195 	movw	r1, #33685	; 0x8395
   85242:	f2c0 0108 	movt	r1, #8
   85246:	4788      	blx	r1
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
   85248:	f04f 0002 	mov.w	r0, #2
   8524c:	f245 212d 	movw	r1, #21037	; 0x522d
   85250:	f2c0 0108 	movt	r1, #8
   85254:	f648 423d 	movw	r2, #35901	; 0x8c3d
   85258:	f2c0 0208 	movt	r2, #8
   8525c:	4790      	blx	r2
   8525e:	bd08      	pop	{r3, pc}

00085260 <udi_msc_csw_invalid>:
}

static void udi_msc_csw_invalid(void)
{
   85260:	b508      	push	{r3, lr}
	if (!udi_msc_b_cbw_invalid)
   85262:	f241 3330 	movw	r3, #4912	; 0x1330
   85266:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8526a:	7818      	ldrb	r0, [r3, #0]
   8526c:	b188      	cbz	r0, 85292 <udi_msc_csw_invalid+0x32>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_IN);
   8526e:	f04f 0081 	mov.w	r0, #129	; 0x81
   85272:	f248 3195 	movw	r1, #33685	; 0x8395
   85276:	f2c0 0108 	movt	r1, #8
   8527a:	4788      	blx	r1
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
   8527c:	f04f 0081 	mov.w	r0, #129	; 0x81
   85280:	f245 2161 	movw	r1, #21089	; 0x5261
   85284:	f2c0 0108 	movt	r1, #8
   85288:	f648 423d 	movw	r2, #35901	; 0x8c3d
   8528c:	f2c0 0208 	movt	r2, #8
   85290:	4790      	blx	r2
   85292:	bd08      	pop	{r3, pc}

00085294 <udi_msc_spc_mode_sense>:
	udi_msc_csw_process();
}


static void udi_msc_spc_mode_sense(bool b_sense10)
{
   85294:	b570      	push	{r4, r5, r6, lr}
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
   85296:	f241 3134 	movw	r1, #4916	; 0x1334
   8529a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8529e:	f04f 0300 	mov.w	r3, #0
   852a2:	460a      	mov	r2, r1
   852a4:	f842 3b04 	str.w	r3, [r2], #4
   852a8:	604b      	str	r3, [r1, #4]
   852aa:	f102 0204 	add.w	r2, r2, #4
   852ae:	f842 3b04 	str.w	r3, [r2], #4
   852b2:	f842 3b04 	str.w	r3, [r2], #4
   852b6:	6013      	str	r3, [r2, #0]

	// Initialize process
	if (b_sense10) {
   852b8:	4606      	mov	r6, r0
   852ba:	b148      	cbz	r0, 852d0 <udi_msc_spc_mode_sense+0x3c>
		request_lgt = udi_msc_cbw.CDB[8];
   852bc:	f241 3410 	movw	r4, #4880	; 0x1310
   852c0:	f2c2 0407 	movt	r4, #8199	; 0x2007
   852c4:	7de5      	ldrb	r5, [r4, #23]
		ptr_mode = &sense.s10.sense_data;
   852c6:	f101 0108 	add.w	r1, r1, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
   852ca:	f04f 0408 	mov.w	r4, #8
   852ce:	e007      	b.n	852e0 <udi_msc_spc_mode_sense+0x4c>
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
   852d0:	f241 3010 	movw	r0, #4880	; 0x1310
   852d4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   852d8:	7cc5      	ldrb	r5, [r0, #19]
		ptr_mode = &sense.s6.sense_data;
   852da:	492b      	ldr	r1, [pc, #172]	; (85388 <udi_msc_spc_mode_sense+0xf4>)
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
   852dc:	f04f 0404 	mov.w	r4, #4
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
   852e0:	f241 3310 	movw	r3, #4880	; 0x1310
   852e4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   852e8:	7c5a      	ldrb	r2, [r3, #17]
   852ea:	f002 003f 	and.w	r0, r2, #63	; 0x3f
	if ((SCSI_MS_MODE_INFEXP == mode)
   852ee:	281c      	cmp	r0, #28
   852f0:	d001      	beq.n	852f6 <udi_msc_spc_mode_sense+0x62>
			|| (SCSI_MS_MODE_ALL == mode)) {
   852f2:	283f      	cmp	r0, #63	; 0x3f
   852f4:	d10b      	bne.n	8530e <udi_msc_spc_mode_sense+0x7a>
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
   852f6:	f04f 031c 	mov.w	r3, #28
   852fa:	700b      	strb	r3, [r1, #0]
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
   852fc:	f04f 020a 	mov.w	r2, #10
   85300:	704a      	strb	r2, [r1, #1]
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
   85302:	f04f 0005 	mov.w	r0, #5
   85306:	70c8      	strb	r0, [r1, #3]
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
   85308:	f104 040c 	add.w	r4, r4, #12
   8530c:	b2e4      	uxtb	r4, r4
   8530e:	42ac      	cmp	r4, r5
   85310:	bf38      	it	cc
   85312:	4625      	movcc	r5, r4
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
		request_lgt = data_sense_lgt;
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
   85314:	4628      	mov	r0, r5
   85316:	f04f 0180 	mov.w	r1, #128	; 0x80
   8531a:	f245 1325 	movw	r3, #20773	; 0x5125
   8531e:	f2c0 0308 	movt	r3, #8
   85322:	4798      	blx	r3
   85324:	b370      	cbz	r0, 85384 <udi_msc_spc_mode_sense+0xf0>
		return;

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
   85326:	f241 3110 	movw	r1, #4880	; 0x1310
   8532a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8532e:	7b48      	ldrb	r0, [r1, #13]
   85330:	f244 42a9 	movw	r2, #17577	; 0x44a9
   85334:	f2c0 0208 	movt	r2, #8
   85338:	4790      	blx	r2
   8533a:	2800      	cmp	r0, #0
   8533c:	bf14      	ite	ne
   8533e:	2080      	movne	r0, #128	; 0x80
   85340:	2000      	moveq	r0, #0

	if (b_sense10) {
   85342:	b16e      	cbz	r6, 85360 <udi_msc_spc_mode_sense+0xcc>
		sense.s10.header.mode_data_length =
				cpu_to_be16((data_sense_lgt - 2));
   85344:	f1a4 0402 	sub.w	r4, r4, #2
   85348:	b2a4      	uxth	r4, r4

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;

	if (b_sense10) {
		sense.s10.header.mode_data_length =
   8534a:	f241 3134 	movw	r1, #4916	; 0x1334
   8534e:	f2c2 0107 	movt	r1, #8199	; 0x2007
				cpu_to_be16((data_sense_lgt - 2));
   85352:	ea4f 2214 	mov.w	r2, r4, lsr #8
   85356:	ea42 2404 	orr.w	r4, r2, r4, lsl #8

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;

	if (b_sense10) {
		sense.s10.header.mode_data_length =
   8535a:	800c      	strh	r4, [r1, #0]
				cpu_to_be16((data_sense_lgt - 2));
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
   8535c:	70c8      	strb	r0, [r1, #3]
   8535e:	e007      	b.n	85370 <udi_msc_spc_mode_sense+0xdc>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
   85360:	f241 3334 	movw	r3, #4916	; 0x1334
   85364:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85368:	f104 34ff 	add.w	r4, r4, #4294967295
   8536c:	701c      	strb	r4, [r3, #0]
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
   8536e:	7098      	strb	r0, [r3, #2]
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
   85370:	f241 3034 	movw	r0, #4916	; 0x1334
   85374:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85378:	4629      	mov	r1, r5
   8537a:	f245 1369 	movw	r3, #20841	; 0x5169
   8537e:	f2c0 0308 	movt	r3, #8
   85382:	4798      	blx	r3
   85384:	bd70      	pop	{r4, r5, r6, pc}
   85386:	bf00      	nop
   85388:	20071338 	.word	0x20071338

0008538c <udi_msc_sbc_trans>:
			sizeof(udi_msc_capacity));
}


static void udi_msc_sbc_trans(bool b_read)
{
   8538c:	b510      	push	{r4, lr}
	uint32_t trans_size;

	if (!b_read) {
   8538e:	4604      	mov	r4, r0
   85390:	b9d8      	cbnz	r0, 853ca <udi_msc_sbc_trans+0x3e>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
   85392:	f241 3310 	movw	r3, #4880	; 0x1310
   85396:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8539a:	7b58      	ldrb	r0, [r3, #13]
   8539c:	f244 41a9 	movw	r1, #17577	; 0x44a9
   853a0:	f2c0 0108 	movt	r1, #8
   853a4:	4788      	blx	r1
   853a6:	b180      	cbz	r0, 853ca <udi_msc_sbc_trans+0x3e>
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}

static void udi_msc_sense_fail_protected(void)
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
   853a8:	f04f 0007 	mov.w	r0, #7
   853ac:	f44f 511c 	mov.w	r1, #9984	; 0x2700
   853b0:	f04f 0200 	mov.w	r2, #0
   853b4:	f644 73dd 	movw	r3, #20445	; 0x4fdd
   853b8:	f2c0 0308 	movt	r3, #8
   853bc:	4798      	blx	r3
	if (!b_read) {
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
			// Write not authorized
			udi_msc_sense_fail_protected();
			udi_msc_csw_process();
   853be:	f245 02d9 	movw	r2, #20697	; 0x50d9
   853c2:	f2c0 0208 	movt	r2, #8
   853c6:	4790      	blx	r2
			return;
   853c8:	bd10      	pop	{r4, pc}
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
   853ca:	f241 324c 	movw	r2, #4940	; 0x134c
   853ce:	f2c2 0207 	movt	r2, #8199	; 0x2007
   853d2:	f241 3010 	movw	r0, #4880	; 0x1310
   853d6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   853da:	7c43      	ldrb	r3, [r0, #17]
   853dc:	70d3      	strb	r3, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
   853de:	7c81      	ldrb	r1, [r0, #18]
   853e0:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
   853e2:	7cc3      	ldrb	r3, [r0, #19]
   853e4:	7053      	strb	r3, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
   853e6:	7d01      	ldrb	r1, [r0, #20]
   853e8:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
   853ea:	f241 3248 	movw	r2, #4936	; 0x1348
   853ee:	f2c2 0207 	movt	r2, #8199	; 0x2007
   853f2:	7d83      	ldrb	r3, [r0, #22]
   853f4:	7053      	strb	r3, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
   853f6:	7dc0      	ldrb	r0, [r0, #23]
   853f8:	7010      	strb	r0, [r2, #0]

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
   853fa:	8811      	ldrh	r1, [r2, #0]
	if (!udi_msc_cbw_validate(trans_size,
   853fc:	ea4f 2041 	mov.w	r0, r1, lsl #9
   85400:	2c00      	cmp	r4, #0
   85402:	bf14      	ite	ne
   85404:	2180      	movne	r1, #128	; 0x80
   85406:	2100      	moveq	r1, #0
   85408:	f245 1225 	movw	r2, #20773	; 0x5125
   8540c:	f2c0 0208 	movt	r2, #8
   85410:	4790      	blx	r2
   85412:	b158      	cbz	r0, 8542c <udi_msc_sbc_trans+0xa0>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
   85414:	f241 3364 	movw	r3, #4964	; 0x1364
   85418:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8541c:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
   8541e:	f241 300c 	movw	r0, #4876	; 0x130c
   85422:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85426:	f04f 0101 	mov.w	r1, #1
   8542a:	7001      	strb	r1, [r0, #0]
   8542c:	bd10      	pop	{r4, pc}
   8542e:	bf00      	nop

00085430 <udi_msc_cbw_received>:
}


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
   85430:	b570      	push	{r4, r5, r6, lr}
	UNUSED(ep);
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
   85432:	2800      	cmp	r0, #0
   85434:	f040 82b8 	bne.w	859a8 <udi_msc_cbw_received+0x578>
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
   85438:	291f      	cmp	r1, #31
   8543a:	d10a      	bne.n	85452 <udi_msc_cbw_received+0x22>
			|| (udi_msc_cbw.dCBWSignature !=
   8543c:	f245 3355 	movw	r3, #21333	; 0x5355
   85440:	f2c4 3342 	movt	r3, #17218	; 0x4342
   85444:	f241 3210 	movw	r2, #4880	; 0x1310
   85448:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8544c:	6810      	ldr	r0, [r2, #0]
   8544e:	4298      	cmp	r0, r3
   85450:	d011      	beq.n	85476 <udi_msc_cbw_received+0x46>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
   85452:	f241 3330 	movw	r3, #4912	; 0x1330
   85456:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8545a:	f04f 0201 	mov.w	r2, #1
   8545e:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
   85460:	f245 212d 	movw	r1, #21037	; 0x522d
   85464:	f2c0 0108 	movt	r1, #8
   85468:	4788      	blx	r1
		udi_msc_csw_invalid();
   8546a:	f245 2061 	movw	r0, #21089	; 0x5261
   8546e:	f2c0 0008 	movt	r0, #8
   85472:	4780      	blx	r0
		return;
   85474:	bd70      	pop	{r4, r5, r6, pc}
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
   85476:	f241 3110 	movw	r1, #4880	; 0x1310
   8547a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8547e:	7b4b      	ldrb	r3, [r1, #13]
   85480:	f003 000f 	and.w	r0, r3, #15
   85484:	7348      	strb	r0, [r1, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
   85486:	f241 3208 	movw	r2, #4872	; 0x1308
   8548a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8548e:	7811      	ldrb	r1, [r2, #0]
   85490:	4281      	cmp	r1, r0
   85492:	d20a      	bcs.n	854aa <udi_msc_cbw_received+0x7a>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
   85494:	f245 0175 	movw	r1, #20597	; 0x5075
   85498:	f2c0 0108 	movt	r1, #8
   8549c:	4788      	blx	r1
		udi_msc_csw_process();
   8549e:	f245 00d9 	movw	r0, #20697	; 0x50d9
   854a2:	f2c0 0008 	movt	r0, #8
   854a6:	4780      	blx	r0
		return;
   854a8:	bd70      	pop	{r4, r5, r6, pc}
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
   854aa:	f241 3310 	movw	r3, #4880	; 0x1310
   854ae:	f2c2 0307 	movt	r3, #8199	; 0x2007
		udi_msc_sense_fail_cdb_invalid();
		udi_msc_csw_process();
		return;
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
   854b2:	689a      	ldr	r2, [r3, #8]
   854b4:	f240 11e8 	movw	r1, #488	; 0x1e8
   854b8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   854bc:	608a      	str	r2, [r1, #8]
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
   854be:	7bdb      	ldrb	r3, [r3, #15]
   854c0:	2b5a      	cmp	r3, #90	; 0x5a
   854c2:	f200 825a 	bhi.w	8597a <udi_msc_cbw_received+0x54a>
   854c6:	e8df f013 	tbh	[pc, r3, lsl #1]
   854ca:	01a6      	.short	0x01a6
   854cc:	02580258 	.word	0x02580258
   854d0:	0258005b 	.word	0x0258005b
   854d4:	02580258 	.word	0x02580258
   854d8:	02580258 	.word	0x02580258
   854dc:	02580258 	.word	0x02580258
   854e0:	02580258 	.word	0x02580258
   854e4:	02580258 	.word	0x02580258
   854e8:	02580258 	.word	0x02580258
   854ec:	00790258 	.word	0x00790258
   854f0:	02580258 	.word	0x02580258
   854f4:	02580258 	.word	0x02580258
   854f8:	02580258 	.word	0x02580258
   854fc:	01960258 	.word	0x01960258
   85500:	02580209 	.word	0x02580209
   85504:	02260258 	.word	0x02260258
   85508:	02580258 	.word	0x02580258
   8550c:	02580258 	.word	0x02580258
   85510:	02580258 	.word	0x02580258
   85514:	025801ce 	.word	0x025801ce
   85518:	02480258 	.word	0x02480258
   8551c:	02500258 	.word	0x02500258
   85520:	02580258 	.word	0x02580258
   85524:	02580258 	.word	0x02580258
   85528:	0258023d 	.word	0x0258023d
   8552c:	02580258 	.word	0x02580258
   85530:	02580258 	.word	0x02580258
   85534:	02580258 	.word	0x02580258
   85538:	02580258 	.word	0x02580258
   8553c:	02580258 	.word	0x02580258
   85540:	02580258 	.word	0x02580258
   85544:	02580258 	.word	0x02580258
   85548:	02580258 	.word	0x02580258
   8554c:	02580258 	.word	0x02580258
   85550:	02580258 	.word	0x02580258
   85554:	02580258 	.word	0x02580258
   85558:	02580258 	.word	0x02580258
   8555c:	02580258 	.word	0x02580258
   85560:	02580258 	.word	0x02580258
   85564:	02580258 	.word	0x02580258
   85568:	02580258 	.word	0x02580258
   8556c:	02580258 	.word	0x02580258
   85570:	02580258 	.word	0x02580258
   85574:	02580258 	.word	0x02580258
   85578:	02580258 	.word	0x02580258
   8557c:	019e0258 	.word	0x019e0258
//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
	uint8_t length = udi_msc_cbw.CDB[4];
   85580:	f241 3410 	movw	r4, #4880	; 0x1310
   85584:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85588:	7ce4      	ldrb	r4, [r4, #19]
   8558a:	2c12      	cmp	r4, #18
   8558c:	bf28      	it	cs
   8558e:	2412      	movcs	r4, #18

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
		length = sizeof(udi_msc_sense);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
   85590:	4620      	mov	r0, r4
   85592:	f04f 0180 	mov.w	r1, #128	; 0x80
   85596:	f245 1225 	movw	r2, #20773	; 0x5125
   8559a:	f2c0 0208 	movt	r2, #8
   8559e:	4790      	blx	r2
   855a0:	2800      	cmp	r0, #0
   855a2:	f000 8201 	beq.w	859a8 <udi_msc_cbw_received+0x578>
		return;
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
   855a6:	f241 3050 	movw	r0, #4944	; 0x1350
   855aa:	f2c2 0007 	movt	r0, #8199	; 0x2007
   855ae:	4621      	mov	r1, r4
   855b0:	f245 1369 	movw	r3, #20841	; 0x5169
   855b4:	f2c0 0308 	movt	r3, #8
   855b8:	4798      	blx	r3
   855ba:	bd70      	pop	{r4, r5, r6, pc}
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
   855bc:	f241 3410 	movw	r4, #4880	; 0x1310
   855c0:	f2c2 0407 	movt	r4, #8199	; 0x2007
   855c4:	7ce4      	ldrb	r4, [r4, #19]
   855c6:	2c24      	cmp	r4, #36	; 0x24
   855c8:	bf28      	it	cs
   855ca:	2424      	movcs	r4, #36	; 0x24

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
   855cc:	4620      	mov	r0, r4
   855ce:	f04f 0180 	mov.w	r1, #128	; 0x80
   855d2:	f245 1225 	movw	r2, #20773	; 0x5125
   855d6:	f2c0 0208 	movt	r2, #8
   855da:	4790      	blx	r2
   855dc:	2800      	cmp	r0, #0
   855de:	f000 81e3 	beq.w	859a8 <udi_msc_cbw_received+0x578>
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
   855e2:	f241 3010 	movw	r0, #4880	; 0x1310
   855e6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   855ea:	7c01      	ldrb	r1, [r0, #16]
   855ec:	f011 0f03 	tst.w	r1, #3
   855f0:	d105      	bne.n	855fe <udi_msc_cbw_received+0x1ce>
			|| (0 != udi_msc_cbw.CDB[2])) {
   855f2:	f241 3310 	movw	r3, #4880	; 0x1310
   855f6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   855fa:	7c5a      	ldrb	r2, [r3, #17]
   855fc:	b152      	cbz	r2, 85614 <udi_msc_cbw_received+0x1e4>
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
   855fe:	f245 0175 	movw	r1, #20597	; 0x5075
   85602:	f2c0 0108 	movt	r1, #8
   85606:	4788      	blx	r1
		udi_msc_csw_process();
   85608:	f245 03d9 	movw	r3, #20697	; 0x50d9
   8560c:	f2c0 0308 	movt	r3, #8
   85610:	4798      	blx	r3
   85612:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
   85614:	f241 3510 	movw	r5, #4880	; 0x1310
   85618:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8561c:	7b68      	ldrb	r0, [r5, #13]
   8561e:	f244 46c1 	movw	r6, #17601	; 0x44c1
   85622:	f2c0 0608 	movt	r6, #8
   85626:	47b0      	blx	r6
   85628:	2800      	cmp	r0, #0
   8562a:	bf14      	ite	ne
   8562c:	2080      	movne	r0, #128	; 0x80
   8562e:	2000      	moveq	r0, #0
   85630:	f240 16c4 	movw	r6, #452	; 0x1c4
   85634:	f2c2 0607 	movt	r6, #8199	; 0x2007
   85638:	7070      	strb	r0, [r6, #1]
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
   8563a:	f241 3110 	movw	r1, #4880	; 0x1310
   8563e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85642:	7b48      	ldrb	r0, [r1, #13]
   85644:	f244 43d9 	movw	r3, #17625	; 0x44d9
   85648:	f2c0 0308 	movt	r3, #8
   8564c:	4798      	blx	r3
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
   8564e:	f106 0510 	add.w	r5, r6, #16
   85652:	4603      	mov	r3, r0
   85654:	f853 0f01 	ldr.w	r0, [r3, #1]!
   85658:	6859      	ldr	r1, [r3, #4]
   8565a:	689a      	ldr	r2, [r3, #8]
   8565c:	68db      	ldr	r3, [r3, #12]
   8565e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85660:	7c32      	ldrb	r2, [r6, #16]
   85662:	2a00      	cmp	r2, #0
   85664:	f000 819a 	beq.w	8599c <udi_msc_cbw_received+0x56c>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85668:	2a22      	cmp	r2, #34	; 0x22
   8566a:	f000 819a 	beq.w	859a2 <udi_msc_cbw_received+0x572>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   8566e:	7c71      	ldrb	r1, [r6, #17]
   85670:	2900      	cmp	r1, #0
   85672:	d03e      	beq.n	856f2 <udi_msc_cbw_received+0x2c2>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85674:	2922      	cmp	r1, #34	; 0x22
   85676:	d06b      	beq.n	85750 <udi_msc_cbw_received+0x320>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85678:	7cb2      	ldrb	r2, [r6, #18]
   8567a:	2a00      	cmp	r2, #0
   8567c:	d03c      	beq.n	856f8 <udi_msc_cbw_received+0x2c8>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   8567e:	2a22      	cmp	r2, #34	; 0x22
   85680:	d069      	beq.n	85756 <udi_msc_cbw_received+0x326>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85682:	7cf1      	ldrb	r1, [r6, #19]
   85684:	2900      	cmp	r1, #0
   85686:	d03a      	beq.n	856fe <udi_msc_cbw_received+0x2ce>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85688:	2922      	cmp	r1, #34	; 0x22
   8568a:	d067      	beq.n	8575c <udi_msc_cbw_received+0x32c>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   8568c:	7d32      	ldrb	r2, [r6, #20]
   8568e:	2a00      	cmp	r2, #0
   85690:	d038      	beq.n	85704 <udi_msc_cbw_received+0x2d4>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85692:	2a22      	cmp	r2, #34	; 0x22
   85694:	d065      	beq.n	85762 <udi_msc_cbw_received+0x332>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85696:	7d71      	ldrb	r1, [r6, #21]
   85698:	2900      	cmp	r1, #0
   8569a:	d036      	beq.n	8570a <udi_msc_cbw_received+0x2da>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   8569c:	2922      	cmp	r1, #34	; 0x22
   8569e:	d063      	beq.n	85768 <udi_msc_cbw_received+0x338>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   856a0:	7db2      	ldrb	r2, [r6, #22]
   856a2:	b3aa      	cbz	r2, 85710 <udi_msc_cbw_received+0x2e0>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   856a4:	2a22      	cmp	r2, #34	; 0x22
   856a6:	d062      	beq.n	8576e <udi_msc_cbw_received+0x33e>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   856a8:	7df1      	ldrb	r1, [r6, #23]
   856aa:	b3a1      	cbz	r1, 85716 <udi_msc_cbw_received+0x2e6>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   856ac:	2922      	cmp	r1, #34	; 0x22
   856ae:	d061      	beq.n	85774 <udi_msc_cbw_received+0x344>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   856b0:	7e32      	ldrb	r2, [r6, #24]
   856b2:	b39a      	cbz	r2, 8571c <udi_msc_cbw_received+0x2ec>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   856b4:	2a22      	cmp	r2, #34	; 0x22
   856b6:	d060      	beq.n	8577a <udi_msc_cbw_received+0x34a>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   856b8:	7e71      	ldrb	r1, [r6, #25]
   856ba:	b391      	cbz	r1, 85722 <udi_msc_cbw_received+0x2f2>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   856bc:	2922      	cmp	r1, #34	; 0x22
   856be:	d05f      	beq.n	85780 <udi_msc_cbw_received+0x350>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   856c0:	7eb2      	ldrb	r2, [r6, #26]
   856c2:	b38a      	cbz	r2, 85728 <udi_msc_cbw_received+0x2f8>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   856c4:	2a22      	cmp	r2, #34	; 0x22
   856c6:	d05e      	beq.n	85786 <udi_msc_cbw_received+0x356>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   856c8:	7ef1      	ldrb	r1, [r6, #27]
   856ca:	b381      	cbz	r1, 8572e <udi_msc_cbw_received+0x2fe>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   856cc:	2922      	cmp	r1, #34	; 0x22
   856ce:	d05d      	beq.n	8578c <udi_msc_cbw_received+0x35c>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   856d0:	7f32      	ldrb	r2, [r6, #28]
   856d2:	b37a      	cbz	r2, 85734 <udi_msc_cbw_received+0x304>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   856d4:	2a22      	cmp	r2, #34	; 0x22
   856d6:	d05c      	beq.n	85792 <udi_msc_cbw_received+0x362>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   856d8:	7f71      	ldrb	r1, [r6, #29]
   856da:	b371      	cbz	r1, 8573a <udi_msc_cbw_received+0x30a>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   856dc:	2922      	cmp	r1, #34	; 0x22
   856de:	d05b      	beq.n	85798 <udi_msc_cbw_received+0x368>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   856e0:	7fb2      	ldrb	r2, [r6, #30]
   856e2:	b36a      	cbz	r2, 85740 <udi_msc_cbw_received+0x310>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   856e4:	2a22      	cmp	r2, #34	; 0x22
   856e6:	d05a      	beq.n	8579e <udi_msc_cbw_received+0x36e>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   856e8:	7ff3      	ldrb	r3, [r6, #31]
   856ea:	bb63      	cbnz	r3, 85746 <udi_msc_cbw_received+0x316>
   856ec:	f04f 030f 	mov.w	r3, #15
   856f0:	e057      	b.n	857a2 <udi_msc_cbw_received+0x372>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
			break;
		}
		i++;
   856f2:	f04f 0301 	mov.w	r3, #1
   856f6:	e054      	b.n	857a2 <udi_msc_cbw_received+0x372>
   856f8:	f04f 0302 	mov.w	r3, #2
   856fc:	e051      	b.n	857a2 <udi_msc_cbw_received+0x372>
   856fe:	f04f 0303 	mov.w	r3, #3
   85702:	e04e      	b.n	857a2 <udi_msc_cbw_received+0x372>
   85704:	f04f 0304 	mov.w	r3, #4
   85708:	e04b      	b.n	857a2 <udi_msc_cbw_received+0x372>
   8570a:	f04f 0305 	mov.w	r3, #5
   8570e:	e048      	b.n	857a2 <udi_msc_cbw_received+0x372>
   85710:	f04f 0306 	mov.w	r3, #6
   85714:	e045      	b.n	857a2 <udi_msc_cbw_received+0x372>
   85716:	f04f 0307 	mov.w	r3, #7
   8571a:	e042      	b.n	857a2 <udi_msc_cbw_received+0x372>
   8571c:	f04f 0308 	mov.w	r3, #8
   85720:	e03f      	b.n	857a2 <udi_msc_cbw_received+0x372>
   85722:	f04f 0309 	mov.w	r3, #9
   85726:	e03c      	b.n	857a2 <udi_msc_cbw_received+0x372>
   85728:	f04f 030a 	mov.w	r3, #10
   8572c:	e039      	b.n	857a2 <udi_msc_cbw_received+0x372>
   8572e:	f04f 030b 	mov.w	r3, #11
   85732:	e036      	b.n	857a2 <udi_msc_cbw_received+0x372>
   85734:	f04f 030c 	mov.w	r3, #12
   85738:	e033      	b.n	857a2 <udi_msc_cbw_received+0x372>
   8573a:	f04f 030d 	mov.w	r3, #13
   8573e:	e030      	b.n	857a2 <udi_msc_cbw_received+0x372>
   85740:	f04f 030e 	mov.w	r3, #14
   85744:	e02d      	b.n	857a2 <udi_msc_cbw_received+0x372>

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85746:	2b22      	cmp	r3, #34	; 0x22
   85748:	bf08      	it	eq
   8574a:	230f      	moveq	r3, #15
   8574c:	d029      	beq.n	857a2 <udi_msc_cbw_received+0x372>
   8574e:	e047      	b.n	857e0 <udi_msc_cbw_received+0x3b0>
			break;
		}
		i++;
   85750:	f04f 0301 	mov.w	r3, #1
   85754:	e025      	b.n	857a2 <udi_msc_cbw_received+0x372>
   85756:	f04f 0302 	mov.w	r3, #2
   8575a:	e022      	b.n	857a2 <udi_msc_cbw_received+0x372>
   8575c:	f04f 0303 	mov.w	r3, #3
   85760:	e01f      	b.n	857a2 <udi_msc_cbw_received+0x372>
   85762:	f04f 0304 	mov.w	r3, #4
   85766:	e01c      	b.n	857a2 <udi_msc_cbw_received+0x372>
   85768:	f04f 0305 	mov.w	r3, #5
   8576c:	e019      	b.n	857a2 <udi_msc_cbw_received+0x372>
   8576e:	f04f 0306 	mov.w	r3, #6
   85772:	e016      	b.n	857a2 <udi_msc_cbw_received+0x372>
   85774:	f04f 0307 	mov.w	r3, #7
   85778:	e013      	b.n	857a2 <udi_msc_cbw_received+0x372>
   8577a:	f04f 0308 	mov.w	r3, #8
   8577e:	e010      	b.n	857a2 <udi_msc_cbw_received+0x372>
   85780:	f04f 0309 	mov.w	r3, #9
   85784:	e00d      	b.n	857a2 <udi_msc_cbw_received+0x372>
   85786:	f04f 030a 	mov.w	r3, #10
   8578a:	e00a      	b.n	857a2 <udi_msc_cbw_received+0x372>
   8578c:	f04f 030b 	mov.w	r3, #11
   85790:	e007      	b.n	857a2 <udi_msc_cbw_received+0x372>
   85792:	f04f 030c 	mov.w	r3, #12
   85796:	e004      	b.n	857a2 <udi_msc_cbw_received+0x372>
   85798:	f04f 030d 	mov.w	r3, #13
   8579c:	e001      	b.n	857a2 <udi_msc_cbw_received+0x372>
   8579e:	f04f 030e 	mov.w	r3, #14
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		udi_msc_inquiry_data.product_id[i] = ' ';
   857a2:	f240 11c4 	movw	r1, #452	; 0x1c4
   857a6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   857aa:	f04f 0220 	mov.w	r2, #32
   857ae:	f1c3 050f 	rsb	r5, r3, #15
   857b2:	f005 0001 	and.w	r0, r5, #1
   857b6:	18cd      	adds	r5, r1, r3
   857b8:	742a      	strb	r2, [r5, #16]
		i++;
   857ba:	f103 0301 	add.w	r3, r3, #1
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   857be:	2b10      	cmp	r3, #16
   857c0:	f040 80f3 	bne.w	859aa <udi_msc_cbw_received+0x57a>
   857c4:	e00c      	b.n	857e0 <udi_msc_cbw_received+0x3b0>
		udi_msc_inquiry_data.product_id[i] = ' ';
   857c6:	18c8      	adds	r0, r1, r3
   857c8:	7402      	strb	r2, [r0, #16]
		i++;
   857ca:	f103 0301 	add.w	r3, r3, #1
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   857ce:	f003 03ff 	and.w	r3, r3, #255	; 0xff
		udi_msc_inquiry_data.product_id[i] = ' ';
   857d2:	18c8      	adds	r0, r1, r3
   857d4:	7402      	strb	r2, [r0, #16]
		i++;
   857d6:	f103 0301 	add.w	r3, r3, #1
   857da:	b2db      	uxtb	r3, r3
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   857dc:	2b10      	cmp	r3, #16
   857de:	d1f2      	bne.n	857c6 <udi_msc_cbw_received+0x396>
		udi_msc_inquiry_data.product_id[i] = ' ';
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
   857e0:	f240 10c4 	movw	r0, #452	; 0x1c4
   857e4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   857e8:	4621      	mov	r1, r4
   857ea:	f245 1269 	movw	r2, #20841	; 0x5169
   857ee:	f2c0 0208 	movt	r2, #8
   857f2:	4790      	blx	r2
   857f4:	bd70      	pop	{r4, r5, r6, pc}
	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
		break;

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
   857f6:	f04f 0000 	mov.w	r0, #0
   857fa:	f245 2395 	movw	r3, #21141	; 0x5295
   857fe:	f2c0 0308 	movt	r3, #8
   85802:	4798      	blx	r3
		break;
   85804:	bd70      	pop	{r4, r5, r6, pc}
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
   85806:	f04f 0001 	mov.w	r0, #1
   8580a:	f245 2295 	movw	r2, #21141	; 0x5295
   8580e:	f2c0 0208 	movt	r2, #8
   85812:	4790      	blx	r2
		break;
   85814:	bd70      	pop	{r4, r5, r6, pc}
}


static bool udi_msc_spc_testunitready_global(void)
{
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
   85816:	f244 415d 	movw	r1, #17501	; 0x445d
   8581a:	f2c0 0108 	movt	r1, #8
   8581e:	4788      	blx	r1
   85820:	2802      	cmp	r0, #2
   85822:	d009      	beq.n	85838 <udi_msc_cbw_received+0x408>
   85824:	2803      	cmp	r0, #3
   85826:	d001      	beq.n	8582c <udi_msc_cbw_received+0x3fc>
   85828:	b190      	cbz	r0, 85850 <udi_msc_cbw_received+0x420>
   8582a:	e00b      	b.n	85844 <udi_msc_cbw_received+0x414>
	case CTRL_GOOD:
		return true;	// Don't change sense data
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   8582c:	f245 0325 	movw	r3, #20517	; 0x5025
   85830:	f2c0 0308 	movt	r3, #8
   85834:	4798      	blx	r3
   85836:	e010      	b.n	8585a <udi_msc_cbw_received+0x42a>
		break;
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   85838:	f245 0141 	movw	r1, #20545	; 0x5041
   8583c:	f2c0 0108 	movt	r1, #8
   85840:	4788      	blx	r1
   85842:	e00a      	b.n	8585a <udi_msc_cbw_received+0x42a>
		break;
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
   85844:	f245 005d 	movw	r0, #20573	; 0x505d
   85848:	f2c0 0008 	movt	r0, #8
   8584c:	4780      	blx	r0
   8584e:	e004      	b.n	8585a <udi_msc_cbw_received+0x42a>

static void udi_msc_spc_testunitready(void)
{
	if (udi_msc_spc_testunitready_global()) {
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
   85850:	f644 72c1 	movw	r2, #20417	; 0x4fc1
   85854:	f2c0 0208 	movt	r2, #8
   85858:	4790      	blx	r2
	}
	// Send status in CSW packet
	udi_msc_csw_process();
   8585a:	f245 00d9 	movw	r0, #20697	; 0x50d9
   8585e:	f2c0 0008 	movt	r0, #8
   85862:	4780      	blx	r0
   85864:	bd70      	pop	{r4, r5, r6, pc}

static void udi_msc_sbc_read_capacity(void)
{
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
   85866:	f04f 0008 	mov.w	r0, #8
   8586a:	f04f 0180 	mov.w	r1, #128	; 0x80
   8586e:	f245 1325 	movw	r3, #20773	; 0x5125
   85872:	f2c0 0308 	movt	r3, #8
   85876:	4798      	blx	r3
   85878:	2800      	cmp	r0, #0
   8587a:	f000 8095 	beq.w	859a8 <udi_msc_cbw_received+0x578>
					USB_CBW_DIRECTION_IN))
		return;

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
   8587e:	f241 3010 	movw	r0, #4880	; 0x1310
   85882:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85886:	7b40      	ldrb	r0, [r0, #13]
   85888:	f241 3168 	movw	r1, #4968	; 0x1368
   8588c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85890:	f244 4275 	movw	r2, #17525	; 0x4475
   85894:	f2c0 0208 	movt	r2, #8
   85898:	4790      	blx	r2
   8589a:	2802      	cmp	r0, #2
   8589c:	d008      	beq.n	858b0 <udi_msc_cbw_received+0x480>
   8589e:	2803      	cmp	r0, #3
   858a0:	d001      	beq.n	858a6 <udi_msc_cbw_received+0x476>
   858a2:	b178      	cbz	r0, 858c4 <udi_msc_cbw_received+0x494>
   858a4:	e009      	b.n	858ba <udi_msc_cbw_received+0x48a>
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   858a6:	4847      	ldr	r0, [pc, #284]	; (859c4 <udi_msc_cbw_received+0x594>)
   858a8:	4780      	blx	r0
		udi_msc_csw_process();
   858aa:	4947      	ldr	r1, [pc, #284]	; (859c8 <udi_msc_cbw_received+0x598>)
   858ac:	4788      	blx	r1
   858ae:	bd70      	pop	{r4, r5, r6, pc}
		return;
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   858b0:	4b46      	ldr	r3, [pc, #280]	; (859cc <udi_msc_cbw_received+0x59c>)
   858b2:	4798      	blx	r3
		udi_msc_csw_process();
   858b4:	4a44      	ldr	r2, [pc, #272]	; (859c8 <udi_msc_cbw_received+0x598>)
   858b6:	4790      	blx	r2
   858b8:	bd70      	pop	{r4, r5, r6, pc}
		return;
	default:
		udi_msc_sense_fail_hardware();
   858ba:	4945      	ldr	r1, [pc, #276]	; (859d0 <udi_msc_cbw_received+0x5a0>)
   858bc:	4788      	blx	r1
		udi_msc_csw_process();
   858be:	4b42      	ldr	r3, [pc, #264]	; (859c8 <udi_msc_cbw_received+0x598>)
   858c0:	4798      	blx	r3
   858c2:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
   858c4:	4843      	ldr	r0, [pc, #268]	; (859d4 <udi_msc_cbw_received+0x5a4>)
   858c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   858ca:	6042      	str	r2, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
   858cc:	6801      	ldr	r1, [r0, #0]
   858ce:	ba0b      	rev	r3, r1
   858d0:	6003      	str	r3, [r0, #0]
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
   858d2:	f04f 0108 	mov.w	r1, #8
   858d6:	4a40      	ldr	r2, [pc, #256]	; (859d8 <udi_msc_cbw_received+0x5a8>)
   858d8:	4790      	blx	r2
   858da:	bd70      	pop	{r4, r5, r6, pc}
}


static void udi_msc_sbc_start_stop(void)
{
	bool start = 0x1 & udi_msc_cbw.CDB[4];
   858dc:	f241 3110 	movw	r1, #4880	; 0x1310
   858e0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   858e4:	7ccb      	ldrb	r3, [r1, #19]
	bool loej = 0x2 & udi_msc_cbw.CDB[4];
	if (loej) {
   858e6:	f003 0202 	and.w	r2, r3, #2
   858ea:	b2d1      	uxtb	r1, r2
   858ec:	b141      	cbz	r1, 85900 <udi_msc_cbw_received+0x4d0>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
   858ee:	f083 0301 	eor.w	r3, r3, #1
   858f2:	f003 0101 	and.w	r1, r3, #1
   858f6:	f244 4299 	movw	r2, #17561	; 0x4499
   858fa:	f2c0 0208 	movt	r2, #8
   858fe:	4790      	blx	r2
	}
	udi_msc_sense_pass();
   85900:	f644 70c1 	movw	r0, #20417	; 0x4fc1
   85904:	f2c0 0008 	movt	r0, #8
   85908:	4780      	blx	r0
	udi_msc_csw_process();
   8590a:	f245 01d9 	movw	r1, #20697	; 0x50d9
   8590e:	f2c0 0108 	movt	r1, #8
   85912:	4788      	blx	r1
   85914:	bd70      	pop	{r4, r5, r6, pc}
}


static void udi_msc_spc_prevent_allow_medium_removal(void)
{
	uint8_t prevent = udi_msc_cbw.CDB[4];
   85916:	f241 3010 	movw	r0, #4880	; 0x1310
   8591a:	f2c2 0007 	movt	r0, #8199	; 0x2007
	if (0 == prevent) {
   8591e:	7cc1      	ldrb	r1, [r0, #19]
   85920:	b929      	cbnz	r1, 8592e <udi_msc_cbw_received+0x4fe>
		udi_msc_sense_pass();
   85922:	f644 72c1 	movw	r2, #20417	; 0x4fc1
   85926:	f2c0 0208 	movt	r2, #8
   8592a:	4790      	blx	r2
   8592c:	e004      	b.n	85938 <udi_msc_cbw_received+0x508>
	} else {
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
   8592e:	f245 0375 	movw	r3, #20597	; 0x5075
   85932:	f2c0 0308 	movt	r3, #8
   85936:	4798      	blx	r3
	}
	udi_msc_csw_process();
   85938:	f245 00d9 	movw	r0, #20697	; 0x50d9
   8593c:	f2c0 0008 	movt	r0, #8
   85940:	4780      	blx	r0
   85942:	bd70      	pop	{r4, r5, r6, pc}
		udi_msc_spc_prevent_allow_medium_removal();
		break;

		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
   85944:	f644 70c1 	movw	r0, #20417	; 0x4fc1
   85948:	f2c0 0008 	movt	r0, #8
   8594c:	4780      	blx	r0
		udi_msc_csw_process();
   8594e:	f245 01d9 	movw	r1, #20697	; 0x50d9
   85952:	f2c0 0108 	movt	r1, #8
   85956:	4788      	blx	r1
		break;
   85958:	bd70      	pop	{r4, r5, r6, pc}

	case SBC_READ10:
		udi_msc_sbc_trans(true);
   8595a:	f04f 0001 	mov.w	r0, #1
   8595e:	f245 328d 	movw	r2, #21389	; 0x538d
   85962:	f2c0 0208 	movt	r2, #8
   85966:	4790      	blx	r2
		break;
   85968:	bd70      	pop	{r4, r5, r6, pc}

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
   8596a:	f04f 0000 	mov.w	r0, #0
   8596e:	f245 338d 	movw	r3, #21389	; 0x538d
   85972:	f2c0 0308 	movt	r3, #8
   85976:	4798      	blx	r3
		break;
   85978:	bd70      	pop	{r4, r5, r6, pc}
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}

static void udi_msc_sense_command_invalid(void)
{
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
   8597a:	f04f 0005 	mov.w	r0, #5
   8597e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   85982:	f04f 0200 	mov.w	r2, #0
   85986:	f644 73dd 	movw	r3, #20445	; 0x4fdd
   8598a:	f2c0 0308 	movt	r3, #8
   8598e:	4798      	blx	r3
		udi_msc_sbc_trans(false);
		break;

	default:
		udi_msc_sense_command_invalid();
		udi_msc_csw_process();
   85990:	f245 02d9 	movw	r2, #20697	; 0x50d9
   85994:	f2c0 0208 	movt	r2, #8
   85998:	4790      	blx	r2
		break;
   8599a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
   8599c:	f04f 0300 	mov.w	r3, #0
   859a0:	e6ff      	b.n	857a2 <udi_msc_cbw_received+0x372>
   859a2:	f04f 0300 	mov.w	r3, #0
   859a6:	e6fc      	b.n	857a2 <udi_msc_cbw_received+0x372>
   859a8:	bd70      	pop	{r4, r5, r6, pc}
   859aa:	b240      	sxtb	r0, r0
   859ac:	2800      	cmp	r0, #0
   859ae:	f43f af0a 	beq.w	857c6 <udi_msc_cbw_received+0x396>
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		udi_msc_inquiry_data.product_id[i] = ' ';
   859b2:	18c8      	adds	r0, r1, r3
   859b4:	7402      	strb	r2, [r0, #16]
		i++;
   859b6:	f103 0301 	add.w	r3, r3, #1
   859ba:	b2db      	uxtb	r3, r3
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   859bc:	2b10      	cmp	r3, #16
   859be:	f47f af02 	bne.w	857c6 <udi_msc_cbw_received+0x396>
   859c2:	e70d      	b.n	857e0 <udi_msc_cbw_received+0x3b0>
   859c4:	00085025 	.word	0x00085025
   859c8:	000850d9 	.word	0x000850d9
   859cc:	00085041 	.word	0x00085041
   859d0:	0008505d 	.word	0x0008505d
   859d4:	20071368 	.word	0x20071368
   859d8:	00085169 	.word	0x00085169

000859dc <udi_msc_setup>:
	UDI_MSC_DISABLE_EXT();
}


bool udi_msc_setup(void)
{
   859dc:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
   859de:	f242 3390 	movw	r3, #9104	; 0x2390
   859e2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   859e6:	7818      	ldrb	r0, [r3, #0]
   859e8:	f010 0f80 	tst.w	r0, #128	; 0x80
   859ec:	d025      	beq.n	85a3a <udi_msc_setup+0x5e>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   859ee:	f000 0260 	and.w	r2, r0, #96	; 0x60
   859f2:	2a20      	cmp	r2, #32
   859f4:	d156      	bne.n	85aa4 <udi_msc_setup+0xc8>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   859f6:	f242 3390 	movw	r3, #9104	; 0x2390
   859fa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   859fe:	7858      	ldrb	r0, [r3, #1]
   85a00:	28fe      	cmp	r0, #254	; 0xfe
   85a02:	d152      	bne.n	85aaa <udi_msc_setup+0xce>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
   85a04:	f242 3190 	movw	r1, #9104	; 0x2390
   85a08:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85a0c:	88ca      	ldrh	r2, [r1, #6]
   85a0e:	2a01      	cmp	r2, #1
   85a10:	d14e      	bne.n	85ab0 <udi_msc_setup+0xd4>
					return false;	// Error for USB host
				if (0 != udd_g_ctrlreq.req.wValue)
   85a12:	f242 3390 	movw	r3, #9104	; 0x2390
   85a16:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85a1a:	8858      	ldrh	r0, [r3, #2]
   85a1c:	2800      	cmp	r0, #0
   85a1e:	d14a      	bne.n	85ab6 <udi_msc_setup+0xda>
					return false;
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
   85a20:	f242 3190 	movw	r1, #9104	; 0x2390
   85a24:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85a28:	f241 3208 	movw	r2, #4872	; 0x1308
   85a2c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85a30:	608a      	str	r2, [r1, #8]
				udd_g_ctrlreq.payload_size = 1;
   85a32:	f04f 0001 	mov.w	r0, #1
   85a36:	8188      	strh	r0, [r1, #12]
				return true;
   85a38:	bd10      	pop	{r4, pc}
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   85a3a:	f000 0160 	and.w	r1, r0, #96	; 0x60
   85a3e:	2920      	cmp	r1, #32
   85a40:	d13c      	bne.n	85abc <udi_msc_setup+0xe0>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   85a42:	f242 3290 	movw	r2, #9104	; 0x2390
   85a46:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85a4a:	7853      	ldrb	r3, [r2, #1]
   85a4c:	2bff      	cmp	r3, #255	; 0xff
   85a4e:	d138      	bne.n	85ac2 <udi_msc_setup+0xe6>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
   85a50:	f242 3090 	movw	r0, #9104	; 0x2390
   85a54:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85a58:	88c1      	ldrh	r1, [r0, #6]
   85a5a:	2900      	cmp	r1, #0
   85a5c:	d134      	bne.n	85ac8 <udi_msc_setup+0xec>
					return false;
				if (0 != udd_g_ctrlreq.req.wValue)
   85a5e:	f242 3290 	movw	r2, #9104	; 0x2390
   85a62:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85a66:	8853      	ldrh	r3, [r2, #2]
   85a68:	2b00      	cmp	r3, #0
   85a6a:	d130      	bne.n	85ace <udi_msc_setup+0xf2>
					return false;
				udi_msc_b_cbw_invalid = false;
   85a6c:	f241 3430 	movw	r4, #4912	; 0x1330
   85a70:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85a74:	7023      	strb	r3, [r4, #0]
				udi_msc_b_trans_req = false;
   85a76:	f241 300c 	movw	r0, #4876	; 0x130c
   85a7a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85a7e:	7003      	strb	r3, [r0, #0]
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
   85a80:	f04f 0002 	mov.w	r0, #2
   85a84:	f648 34b9 	movw	r4, #35769	; 0x8bb9
   85a88:	f2c0 0408 	movt	r4, #8
   85a8c:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
   85a8e:	f04f 0081 	mov.w	r0, #129	; 0x81
   85a92:	47a0      	blx	r4
				// Restart by CBW wait
				udi_msc_cbw_wait();
   85a94:	f245 11d5 	movw	r1, #20949	; 0x51d5
   85a98:	f2c0 0108 	movt	r1, #8
   85a9c:	4788      	blx	r1
				return true;
   85a9e:	f04f 0001 	mov.w	r0, #1
   85aa2:	bd10      	pop	{r4, pc}
			}
		}
	}
	return false;	// Not supported request
   85aa4:	f04f 0000 	mov.w	r0, #0
   85aa8:	bd10      	pop	{r4, pc}
   85aaa:	f04f 0000 	mov.w	r0, #0
   85aae:	bd10      	pop	{r4, pc}
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
   85ab0:	f04f 0000 	mov.w	r0, #0
   85ab4:	bd10      	pop	{r4, pc}
				if (0 != udd_g_ctrlreq.req.wValue)
					return false;
   85ab6:	f04f 0000 	mov.w	r0, #0
   85aba:	bd10      	pop	{r4, pc}
				udi_msc_cbw_wait();
				return true;
			}
		}
	}
	return false;	// Not supported request
   85abc:	f04f 0000 	mov.w	r0, #0
   85ac0:	bd10      	pop	{r4, pc}
   85ac2:	f04f 0000 	mov.w	r0, #0
   85ac6:	bd10      	pop	{r4, pc}
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
   85ac8:	f04f 0000 	mov.w	r0, #0
   85acc:	bd10      	pop	{r4, pc}
				if (0 != udd_g_ctrlreq.req.wValue)
					return false;
   85ace:	f04f 0000 	mov.w	r0, #0
				return true;
			}
		}
	}
	return false;	// Not supported request
}
   85ad2:	bd10      	pop	{r4, pc}

00085ad4 <udi_msc_disable>:
	return true;
}


void udi_msc_disable(void)
{
   85ad4:	b508      	push	{r3, lr}
	udi_msc_b_trans_req = false;
   85ad6:	f241 330c 	movw	r3, #4876	; 0x130c
   85ada:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85ade:	f04f 0200 	mov.w	r2, #0
   85ae2:	701a      	strb	r2, [r3, #0]
	UDI_MSC_DISABLE_EXT();
   85ae4:	f249 10fd 	movw	r0, #37373	; 0x91fd
   85ae8:	f2c0 0008 	movt	r0, #8
   85aec:	4780      	blx	r0
   85aee:	bd08      	pop	{r3, pc}

00085af0 <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
   85af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t lun;
	udi_msc_b_trans_req = false;
   85af2:	f04f 0300 	mov.w	r3, #0
   85af6:	f241 320c 	movw	r2, #4876	; 0x130c
   85afa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85afe:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
   85b00:	f241 3030 	movw	r0, #4912	; 0x1330
   85b04:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85b08:	7003      	strb	r3, [r0, #0]
	udi_msc_nb_lun = get_nb_lun();
   85b0a:	f244 4155 	movw	r1, #17493	; 0x4455
   85b0e:	f2c0 0108 	movt	r1, #8
   85b12:	4788      	blx	r1
	if (0 == udi_msc_nb_lun)
   85b14:	b928      	cbnz	r0, 85b22 <udi_msc_enable+0x32>
bool udi_msc_enable(void)
{
	uint8_t lun;
	udi_msc_b_trans_req = false;
	udi_msc_b_cbw_invalid = false;
	udi_msc_nb_lun = get_nb_lun();
   85b16:	f241 3208 	movw	r2, #4872	; 0x1308
   85b1a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85b1e:	7010      	strb	r0, [r2, #0]
   85b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (0 == udi_msc_nb_lun)
		return false; // No lun available, then not authorize to enable interface
	udi_msc_nb_lun--;
   85b22:	f100 30ff 	add.w	r0, r0, #4294967295
   85b26:	f241 3208 	movw	r2, #4872	; 0x1308
   85b2a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85b2e:	7010      	strb	r0, [r2, #0]
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
   85b30:	f249 11ed 	movw	r1, #37357	; 0x91ed
   85b34:	f2c0 0108 	movt	r1, #8
   85b38:	4788      	blx	r1
   85b3a:	b1d8      	cbz	r0, 85b74 <udi_msc_enable+0x84>
   85b3c:	f04f 0400 	mov.w	r4, #0
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
		mem_unload(lun, false);
   85b40:	4627      	mov	r7, r4
   85b42:	f244 4699 	movw	r6, #17561	; 0x4499
   85b46:	f2c0 0608 	movt	r6, #8
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
   85b4a:	f241 3508 	movw	r5, #4872	; 0x1308
   85b4e:	f2c2 0507 	movt	r5, #8199	; 0x2007
		mem_unload(lun, false);
   85b52:	4620      	mov	r0, r4
   85b54:	4639      	mov	r1, r7
   85b56:	47b0      	blx	r6
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
   85b58:	f104 0401 	add.w	r4, r4, #1
   85b5c:	b2e4      	uxtb	r4, r4
   85b5e:	782b      	ldrb	r3, [r5, #0]
   85b60:	42a3      	cmp	r3, r4
   85b62:	d2f6      	bcs.n	85b52 <udi_msc_enable+0x62>
		mem_unload(lun, false);
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
   85b64:	f245 10d5 	movw	r0, #20949	; 0x51d5
   85b68:	f2c0 0008 	movt	r0, #8
   85b6c:	4780      	blx	r0
	return true;
   85b6e:	f04f 0001 	mov.w	r0, #1
   85b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // No lun available, then not authorize to enable interface
	udi_msc_nb_lun--;
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
   85b74:	f04f 0000 	mov.w	r0, #0
		mem_unload(lun, false);
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
	return true;
}
   85b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85b7a:	bf00      	nop

00085b7c <udi_msc_process_trans>:
	UDI_MSC_NOTIFY_TRANS_EXT();
}


bool udi_msc_process_trans(void)
{
   85b7c:	b508      	push	{r3, lr}
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
   85b7e:	f241 330c 	movw	r3, #4876	; 0x130c
   85b82:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85b86:	7818      	ldrb	r0, [r3, #0]
   85b88:	2800      	cmp	r0, #0
   85b8a:	d059      	beq.n	85c40 <udi_msc_process_trans+0xc4>
		return false;	// No Transfer request to do
	udi_msc_b_trans_req = false;
   85b8c:	f241 310c 	movw	r1, #4876	; 0x130c
   85b90:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85b94:	f04f 0200 	mov.w	r2, #0
   85b98:	700a      	strb	r2, [r1, #0]

	// Start transfer
	if (udi_msc_b_read) {
   85b9a:	f241 3364 	movw	r3, #4964	; 0x1364
   85b9e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85ba2:	7818      	ldrb	r0, [r3, #0]
   85ba4:	b1a0      	cbz	r0, 85bd0 <udi_msc_process_trans+0x54>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
   85ba6:	f241 3010 	movw	r0, #4880	; 0x1310
   85baa:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85bae:	7b40      	ldrb	r0, [r0, #13]
   85bb0:	f241 314c 	movw	r1, #4940	; 0x134c
   85bb4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85bb8:	6809      	ldr	r1, [r1, #0]
   85bba:	f241 3248 	movw	r2, #4936	; 0x1348
   85bbe:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85bc2:	8812      	ldrh	r2, [r2, #0]
   85bc4:	f244 43ed 	movw	r3, #17645	; 0x44ed
   85bc8:	f2c0 0308 	movt	r3, #8
   85bcc:	4798      	blx	r3
   85bce:	e013      	b.n	85bf8 <udi_msc_process_trans+0x7c>
				udi_msc_nb_block);
	} else {
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
   85bd0:	f241 3110 	movw	r1, #4880	; 0x1310
   85bd4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85bd8:	7b48      	ldrb	r0, [r1, #13]
   85bda:	f241 324c 	movw	r2, #4940	; 0x134c
   85bde:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85be2:	6811      	ldr	r1, [r2, #0]
   85be4:	f241 3348 	movw	r3, #4936	; 0x1348
   85be8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85bec:	881a      	ldrh	r2, [r3, #0]
   85bee:	f244 5325 	movw	r3, #17701	; 0x4525
   85bf2:	f2c0 0308 	movt	r3, #8
   85bf6:	4798      	blx	r3
				udi_msc_nb_block);
	}

	// Check status of transfer
	switch (status) {
   85bf8:	2802      	cmp	r0, #2
   85bfa:	d00e      	beq.n	85c1a <udi_msc_process_trans+0x9e>
   85bfc:	2803      	cmp	r0, #3
   85bfe:	d006      	beq.n	85c0e <udi_msc_process_trans+0x92>
   85c00:	b988      	cbnz	r0, 85c26 <udi_msc_process_trans+0xaa>
	case CTRL_GOOD:
		udi_msc_sense_pass();
   85c02:	f644 71c1 	movw	r1, #20417	; 0x4fc1
   85c06:	f2c0 0108 	movt	r1, #8
   85c0a:	4788      	blx	r1
		break;
   85c0c:	e010      	b.n	85c30 <udi_msc_process_trans+0xb4>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   85c0e:	f245 0225 	movw	r2, #20517	; 0x5025
   85c12:	f2c0 0208 	movt	r2, #8
   85c16:	4790      	blx	r2
		break;
   85c18:	e00a      	b.n	85c30 <udi_msc_process_trans+0xb4>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   85c1a:	f245 0341 	movw	r3, #20545	; 0x5041
   85c1e:	f2c0 0308 	movt	r3, #8
   85c22:	4798      	blx	r3
		break;
   85c24:	e004      	b.n	85c30 <udi_msc_process_trans+0xb4>
	default:
	case CTRL_FAIL:
		udi_msc_sense_fail_hardware();
   85c26:	f245 005d 	movw	r0, #20573	; 0x505d
   85c2a:	f2c0 0008 	movt	r0, #8
   85c2e:	4780      	blx	r0
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
   85c30:	f245 00d9 	movw	r0, #20697	; 0x50d9
   85c34:	f2c0 0008 	movt	r0, #8
   85c38:	4780      	blx	r0
	return true;
   85c3a:	f04f 0001 	mov.w	r0, #1
   85c3e:	bd08      	pop	{r3, pc}
bool udi_msc_process_trans(void)
{
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
		return false;	// No Transfer request to do
   85c40:	f04f 0000 	mov.w	r0, #0
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
	return true;
}
   85c44:	bd08      	pop	{r3, pc}
   85c46:	bf00      	nop

00085c48 <udi_msc_trans_block>:
}


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
   85c48:	b5f0      	push	{r4, r5, r6, r7, lr}
   85c4a:	b083      	sub	sp, #12
   85c4c:	460f      	mov	r7, r1
   85c4e:	4615      	mov	r5, r2
	if (!udi_msc_b_ack_trans)
   85c50:	f240 14ac 	movw	r4, #428	; 0x1ac
   85c54:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85c58:	7824      	ldrb	r4, [r4, #0]
   85c5a:	2c00      	cmp	r4, #0
   85c5c:	d03d      	beq.n	85cda <udi_msc_trans_block+0x92>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
   85c5e:	f240 11ac 	movw	r1, #428	; 0x1ac
   85c62:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85c66:	f04f 0600 	mov.w	r6, #0
   85c6a:	700e      	strb	r6, [r1, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
   85c6c:	42b0      	cmp	r0, r6
   85c6e:	bf0c      	ite	eq
   85c70:	2002      	moveq	r0, #2
   85c72:	2081      	movne	r0, #129	; 0x81
   85c74:	2b00      	cmp	r3, #0
   85c76:	d141      	bne.n	85cfc <udi_msc_trans_block+0xb4>
   85c78:	e035      	b.n	85ce6 <udi_msc_trans_block+0x9e>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
   85c7a:	f240 13ac 	movw	r3, #428	; 0x1ac
   85c7e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85c82:	f04f 0001 	mov.w	r0, #1
   85c86:	7018      	strb	r0, [r3, #0]
		return false;
   85c88:	f04f 0000 	mov.w	r0, #0
   85c8c:	e040      	b.n	85d10 <udi_msc_trans_block+0xc8>
	}
	if (NULL == callback) {
		while (!udi_msc_b_ack_trans);
   85c8e:	f240 12ac 	movw	r2, #428	; 0x1ac
   85c92:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85c96:	7810      	ldrb	r0, [r2, #0]
   85c98:	2800      	cmp	r0, #0
   85c9a:	d0fc      	beq.n	85c96 <udi_msc_trans_block+0x4e>
		if (udi_msc_b_abort_trans) {
   85c9c:	f242 318d 	movw	r1, #9101	; 0x238d
   85ca0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85ca4:	780b      	ldrb	r3, [r1, #0]
   85ca6:	b9db      	cbnz	r3, 85ce0 <udi_msc_trans_block+0x98>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
   85ca8:	f240 10e8 	movw	r0, #488	; 0x1e8
   85cac:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85cb0:	6882      	ldr	r2, [r0, #8]
   85cb2:	1b51      	subs	r1, r2, r5
   85cb4:	6081      	str	r1, [r0, #8]
		return (!udi_msc_b_abort_trans);
   85cb6:	f242 338d 	movw	r3, #9101	; 0x238d
   85cba:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85cbe:	7818      	ldrb	r0, [r3, #0]
   85cc0:	f080 0001 	eor.w	r0, r0, #1
   85cc4:	e024      	b.n	85d10 <udi_msc_trans_block+0xc8>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
   85cc6:	f240 11e8 	movw	r1, #488	; 0x1e8
   85cca:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85cce:	688a      	ldr	r2, [r1, #8]
   85cd0:	1b55      	subs	r5, r2, r5
   85cd2:	608d      	str	r5, [r1, #8]
	return true;
   85cd4:	f04f 0001 	mov.w	r0, #1
   85cd8:	e01a      	b.n	85d10 <udi_msc_trans_block+0xc8>

bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
	if (!udi_msc_b_ack_trans)
		return false;	// No possible, transfer on going
   85cda:	f04f 0000 	mov.w	r0, #0
   85cde:	e017      	b.n	85d10 <udi_msc_trans_block+0xc8>
		return false;
	}
	if (NULL == callback) {
		while (!udi_msc_b_ack_trans);
		if (udi_msc_b_abort_trans) {
			return false;
   85ce0:	f04f 0000 	mov.w	r0, #0
   85ce4:	e014      	b.n	85d10 <udi_msc_trans_block+0xc8>
	if (!udi_msc_b_ack_trans)
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
   85ce6:	4b0b      	ldr	r3, [pc, #44]	; (85d14 <udi_msc_trans_block+0xcc>)
   85ce8:	9300      	str	r3, [sp, #0]
   85cea:	f04f 0100 	mov.w	r1, #0
   85cee:	463a      	mov	r2, r7
   85cf0:	462b      	mov	r3, r5
   85cf2:	4c09      	ldr	r4, [pc, #36]	; (85d18 <udi_msc_trans_block+0xd0>)
   85cf4:	47a0      	blx	r4
   85cf6:	2800      	cmp	r0, #0
   85cf8:	d1c9      	bne.n	85c8e <udi_msc_trans_block+0x46>
   85cfa:	e7be      	b.n	85c7a <udi_msc_trans_block+0x32>
   85cfc:	9300      	str	r3, [sp, #0]
   85cfe:	f04f 0100 	mov.w	r1, #0
   85d02:	463a      	mov	r2, r7
   85d04:	462b      	mov	r3, r5
   85d06:	4c04      	ldr	r4, [pc, #16]	; (85d18 <udi_msc_trans_block+0xd0>)
   85d08:	47a0      	blx	r4
   85d0a:	2800      	cmp	r0, #0
   85d0c:	d1db      	bne.n	85cc6 <udi_msc_trans_block+0x7e>
   85d0e:	e7b4      	b.n	85c7a <udi_msc_trans_block+0x32>
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
	return true;
}
   85d10:	b003      	add	sp, #12
   85d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85d14:	00084f71 	.word	0x00084f71
   85d18:	000885b1 	.word	0x000885b1

00085d1c <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   85d1c:	f241 3370 	movw	r3, #4976	; 0x1370
   85d20:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85d24:	6818      	ldr	r0, [r3, #0]
   85d26:	6801      	ldr	r1, [r0, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   85d28:	884a      	ldrh	r2, [r1, #2]
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
   85d2a:	1888      	adds	r0, r1, r2
   85d2c:	4770      	bx	lr
   85d2e:	bf00      	nop

00085d30 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   85d30:	b538      	push	{r3, r4, r5, lr}
   85d32:	4605      	mov	r5, r0
   85d34:	460c      	mov	r4, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   85d36:	f645 531d 	movw	r3, #23837	; 0x5d1d
   85d3a:	f2c0 0308 	movt	r3, #8
   85d3e:	4798      	blx	r3
   85d40:	4602      	mov	r2, r0
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   85d42:	7828      	ldrb	r0, [r5, #0]
   85d44:	1828      	adds	r0, r5, r0
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   85d46:	4282      	cmp	r2, r0
   85d48:	d911      	bls.n	85d6e <udc_next_desc_in_iface+0x3e>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   85d4a:	7841      	ldrb	r1, [r0, #1]
   85d4c:	2904      	cmp	r1, #4
   85d4e:	d011      	beq.n	85d74 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   85d50:	42a1      	cmp	r1, r4
   85d52:	d105      	bne.n	85d60 <udc_next_desc_in_iface+0x30>
   85d54:	bd38      	pop	{r3, r4, r5, pc}
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   85d56:	7841      	ldrb	r1, [r0, #1]
   85d58:	2904      	cmp	r1, #4
   85d5a:	d00e      	beq.n	85d7a <udc_next_desc_in_iface+0x4a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   85d5c:	42a1      	cmp	r1, r4
   85d5e:	d00e      	beq.n	85d7e <udc_next_desc_in_iface+0x4e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   85d60:	7803      	ldrb	r3, [r0, #0]
   85d62:	18c0      	adds	r0, r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   85d64:	4282      	cmp	r2, r0
   85d66:	d8f6      	bhi.n	85d56 <udc_next_desc_in_iface+0x26>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
   85d68:	f04f 0000 	mov.w	r0, #0
   85d6c:	bd38      	pop	{r3, r4, r5, pc}
   85d6e:	f04f 0000 	mov.w	r0, #0
   85d72:	bd38      	pop	{r3, r4, r5, pc}
   85d74:	f04f 0000 	mov.w	r0, #0
   85d78:	bd38      	pop	{r3, r4, r5, pc}
   85d7a:	f04f 0000 	mov.w	r0, #0
}
   85d7e:	bd38      	pop	{r3, r4, r5, pc}

00085d80 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   85d80:	b570      	push	{r4, r5, r6, lr}
   85d82:	4605      	mov	r5, r0
   85d84:	460e      	mov	r6, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   85d86:	f241 337a 	movw	r3, #4986	; 0x137a
   85d8a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85d8e:	7818      	ldrb	r0, [r3, #0]
   85d90:	2800      	cmp	r0, #0
   85d92:	d031      	beq.n	85df8 <udc_update_iface_desc+0x78>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   85d94:	f241 3170 	movw	r1, #4976	; 0x1370
   85d98:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85d9c:	680a      	ldr	r2, [r1, #0]
   85d9e:	6814      	ldr	r4, [r2, #0]
   85da0:	7923      	ldrb	r3, [r4, #4]
   85da2:	42ab      	cmp	r3, r5
   85da4:	d92b      	bls.n	85dfe <udc_update_iface_desc+0x7e>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   85da6:	f241 307c 	movw	r0, #4988	; 0x137c
   85daa:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85dae:	6004      	str	r4, [r0, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   85db0:	f645 511d 	movw	r1, #23837	; 0x5d1d
   85db4:	f2c0 0108 	movt	r1, #8
   85db8:	4788      	blx	r1
	while (ptr_end_desc >
   85dba:	4284      	cmp	r4, r0
   85dbc:	d222      	bcs.n	85e04 <udc_update_iface_desc+0x84>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   85dbe:	7862      	ldrb	r2, [r4, #1]
   85dc0:	2a04      	cmp	r2, #4
   85dc2:	d10d      	bne.n	85de0 <udc_update_iface_desc+0x60>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   85dc4:	78a3      	ldrb	r3, [r4, #2]
   85dc6:	42ab      	cmp	r3, r5
   85dc8:	d10a      	bne.n	85de0 <udc_update_iface_desc+0x60>
   85dca:	78e1      	ldrb	r1, [r4, #3]
   85dcc:	42b1      	cmp	r1, r6
   85dce:	d107      	bne.n	85de0 <udc_update_iface_desc+0x60>
   85dd0:	f241 337c 	movw	r3, #4988	; 0x137c
   85dd4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85dd8:	601c      	str	r4, [r3, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
   85dda:	f04f 0001 	mov.w	r0, #1
   85dde:	bd70      	pop	{r4, r5, r6, pc}
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   85de0:	7822      	ldrb	r2, [r4, #0]
   85de2:	18a4      	adds	r4, r4, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
   85de4:	42a0      	cmp	r0, r4
   85de6:	d8ea      	bhi.n	85dbe <udc_update_iface_desc+0x3e>
   85de8:	f241 307c 	movw	r0, #4988	; 0x137c
   85dec:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85df0:	6004      	str	r4, [r0, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   85df2:	f04f 0000 	mov.w	r0, #0
   85df6:	bd70      	pop	{r4, r5, r6, pc}
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
   85df8:	f04f 0000 	mov.w	r0, #0
   85dfc:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   85dfe:	f04f 0000 	mov.w	r0, #0
   85e02:	bd70      	pop	{r4, r5, r6, pc}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   85e04:	f04f 0000 	mov.w	r0, #0
}
   85e08:	bd70      	pop	{r4, r5, r6, pc}
   85e0a:	bf00      	nop

00085e0c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   85e0c:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   85e0e:	f242 3390 	movw	r3, #9104	; 0x2390
   85e12:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85e16:	8858      	ldrh	r0, [r3, #2]
   85e18:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   85e1c:	f248 21a9 	movw	r1, #33449	; 0x82a9
   85e20:	f2c0 0108 	movt	r1, #8
   85e24:	4788      	blx	r1
   85e26:	bd08      	pop	{r3, pc}

00085e28 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   85e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85e2c:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   85e2e:	f645 5381 	movw	r3, #23937	; 0x5d81
   85e32:	f2c0 0308 	movt	r3, #8
   85e36:	4798      	blx	r3
   85e38:	b338      	cbz	r0, 85e8a <udc_iface_enable+0x62>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   85e3a:	f241 307c 	movw	r0, #4988	; 0x137c
   85e3e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85e42:	6804      	ldr	r4, [r0, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   85e44:	f04f 0605 	mov.w	r6, #5
   85e48:	f645 5531 	movw	r5, #23857	; 0x5d31
   85e4c:	f2c0 0508 	movt	r5, #8
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   85e50:	f248 67b5 	movw	r7, #34485	; 0x86b5
   85e54:	f2c0 0708 	movt	r7, #8

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   85e58:	4620      	mov	r0, r4
   85e5a:	4631      	mov	r1, r6
   85e5c:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   85e5e:	4604      	mov	r4, r0
   85e60:	b138      	cbz	r0, 85e72 <udc_iface_enable+0x4a>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   85e62:	7880      	ldrb	r0, [r0, #2]
   85e64:	78e1      	ldrb	r1, [r4, #3]
   85e66:	88a2      	ldrh	r2, [r4, #4]
   85e68:	47b8      	blx	r7
   85e6a:	2800      	cmp	r0, #0
   85e6c:	d1f4      	bne.n	85e58 <udc_iface_enable+0x30>
   85e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   85e72:	f241 3170 	movw	r1, #4976	; 0x1370
   85e76:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85e7a:	680a      	ldr	r2, [r1, #0]
   85e7c:	6853      	ldr	r3, [r2, #4]
   85e7e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
   85e82:	6801      	ldr	r1, [r0, #0]
   85e84:	4788      	blx	r1
   85e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
		return false;
   85e8a:	f04f 0000 	mov.w	r0, #0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
   85e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85e92:	bf00      	nop

00085e94 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   85e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85e98:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   85e9a:	f04f 0100 	mov.w	r1, #0
   85e9e:	f645 5381 	movw	r3, #23937	; 0x5d81
   85ea2:	f2c0 0308 	movt	r3, #8
   85ea6:	4798      	blx	r3
   85ea8:	2800      	cmp	r0, #0
   85eaa:	d030      	beq.n	85f0e <udc_iface_disable+0x7a>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   85eac:	f241 3070 	movw	r0, #4976	; 0x1370
   85eb0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85eb4:	6801      	ldr	r1, [r0, #0]
   85eb6:	684a      	ldr	r2, [r1, #4]
   85eb8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   85ebc:	f8d8 300c 	ldr.w	r3, [r8, #12]
   85ec0:	4798      	blx	r3
   85ec2:	4601      	mov	r1, r0
   85ec4:	4620      	mov	r0, r4
   85ec6:	f645 5281 	movw	r2, #23937	; 0x5d81
   85eca:	f2c0 0208 	movt	r2, #8
   85ece:	4790      	blx	r2
   85ed0:	b308      	cbz	r0, 85f16 <udc_iface_disable+0x82>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   85ed2:	f241 347c 	movw	r4, #4988	; 0x137c
   85ed6:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85eda:	6824      	ldr	r4, [r4, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   85edc:	f04f 0605 	mov.w	r6, #5
   85ee0:	f645 5531 	movw	r5, #23857	; 0x5d31
   85ee4:	f2c0 0508 	movt	r5, #8
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   85ee8:	f248 3719 	movw	r7, #33561	; 0x8319
   85eec:	f2c0 0708 	movt	r7, #8
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   85ef0:	4620      	mov	r0, r4
   85ef2:	4631      	mov	r1, r6
   85ef4:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   85ef6:	4604      	mov	r4, r0
   85ef8:	b110      	cbz	r0, 85f00 <udc_iface_disable+0x6c>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   85efa:	7880      	ldrb	r0, [r0, #2]
   85efc:	47b8      	blx	r7
		}
   85efe:	e7f7      	b.n	85ef0 <udc_iface_disable+0x5c>
	}
#endif

	// Disable interface
	udi_api->disable();
   85f00:	f8d8 0004 	ldr.w	r0, [r8, #4]
   85f04:	4780      	blx	r0
	return true;
   85f06:	f04f 0001 	mov.w	r0, #1
   85f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
   85f0e:	f04f 0000 	mov.w	r0, #0
   85f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
		return false;
   85f16:	f04f 0000 	mov.w	r0, #0
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
   85f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85f1e:	bf00      	nop

00085f20 <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   85f20:	b508      	push	{r3, lr}
	udd_enable();
   85f22:	f247 4351 	movw	r3, #29777	; 0x7451
   85f26:	f2c0 0308 	movt	r3, #8
   85f2a:	4798      	blx	r3
   85f2c:	bd08      	pop	{r3, pc}
   85f2e:	bf00      	nop

00085f30 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   85f30:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   85f32:	f241 337a 	movw	r3, #4986	; 0x137a
   85f36:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85f3a:	7818      	ldrb	r0, [r3, #0]
   85f3c:	b1d8      	cbz	r0, 85f76 <udc_reset+0x46>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85f3e:	f241 3170 	movw	r1, #4976	; 0x1370
   85f42:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85f46:	680a      	ldr	r2, [r1, #0]
   85f48:	6813      	ldr	r3, [r2, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   85f4a:	7918      	ldrb	r0, [r3, #4]
   85f4c:	b198      	cbz	r0, 85f76 <udc_reset+0x46>
   85f4e:	f04f 0400 	mov.w	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   85f52:	f645 6695 	movw	r6, #24213	; 0x5e95
   85f56:	f2c0 0608 	movt	r6, #8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85f5a:	f241 3570 	movw	r5, #4976	; 0x1370
   85f5e:	f2c2 0507 	movt	r5, #8199	; 0x2007
				iface_num++) {
			udc_iface_disable(iface_num);
   85f62:	4620      	mov	r0, r4
   85f64:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   85f66:	f104 0401 	add.w	r4, r4, #1
   85f6a:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85f6c:	6829      	ldr	r1, [r5, #0]
   85f6e:	680a      	ldr	r2, [r1, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   85f70:	7913      	ldrb	r3, [r2, #4]
   85f72:	42a3      	cmp	r3, r4
   85f74:	d8f5      	bhi.n	85f62 <udc_reset+0x32>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
   85f76:	f241 307a 	movw	r0, #4986	; 0x137a
   85f7a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85f7e:	f04f 0100 	mov.w	r1, #0
   85f82:	7001      	strb	r1, [r0, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   85f84:	f241 3378 	movw	r3, #4984	; 0x1378
   85f88:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85f8c:	f04f 0201 	mov.w	r2, #1
   85f90:	801a      	strh	r2, [r3, #0]
   85f92:	bd70      	pop	{r4, r5, r6, pc}

00085f94 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
   85f94:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   85f96:	f241 337a 	movw	r3, #4986	; 0x137a
   85f9a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85f9e:	7818      	ldrb	r0, [r3, #0]
   85fa0:	b1d8      	cbz	r0, 85fda <udc_sof_notify+0x46>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85fa2:	f241 3170 	movw	r1, #4976	; 0x1370
   85fa6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85faa:	680b      	ldr	r3, [r1, #0]
   85fac:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   85fae:	7910      	ldrb	r0, [r2, #4]
   85fb0:	b198      	cbz	r0, 85fda <udc_sof_notify+0x46>
   85fb2:	f04f 0400 	mov.w	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85fb6:	f241 3570 	movw	r5, #4976	; 0x1370
   85fba:	f2c2 0507 	movt	r5, #8199	; 0x2007
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   85fbe:	685b      	ldr	r3, [r3, #4]
   85fc0:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   85fc4:	690a      	ldr	r2, [r1, #16]
   85fc6:	b102      	cbz	r2, 85fca <udc_sof_notify+0x36>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   85fc8:	4790      	blx	r2
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   85fca:	f104 0401 	add.w	r4, r4, #1
   85fce:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85fd0:	682b      	ldr	r3, [r5, #0]
   85fd2:	6818      	ldr	r0, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   85fd4:	7901      	ldrb	r1, [r0, #4]
   85fd6:	42a1      	cmp	r1, r4
   85fd8:	d8f1      	bhi.n	85fbe <udc_sof_notify+0x2a>
   85fda:	bd38      	pop	{r3, r4, r5, pc}

00085fdc <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   85fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   85fde:	f242 3390 	movw	r3, #9104	; 0x2390
   85fe2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85fe6:	f04f 0200 	mov.w	r2, #0
   85fea:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   85fec:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   85fee:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   85ff0:	7818      	ldrb	r0, [r3, #0]
   85ff2:	f010 0f80 	tst.w	r0, #128	; 0x80
   85ff6:	f000 83da 	beq.w	867ae <udc_process_setup+0x7d2>
		if (udd_g_ctrlreq.req.wLength == 0) {
   85ffa:	f242 3190 	movw	r1, #9104	; 0x2390
   85ffe:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86002:	88ca      	ldrh	r2, [r1, #6]
   86004:	2a00      	cmp	r2, #0
   86006:	f040 83d7 	bne.w	867b8 <udc_process_setup+0x7dc>
   8600a:	e3c4      	b.n	86796 <udc_process_setup+0x7ba>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   8600c:	f010 031f 	ands.w	r3, r0, #31
   86010:	f040 8115 	bne.w	8623e <udc_process_setup+0x262>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   86014:	f242 3090 	movw	r0, #9104	; 0x2390
   86018:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8601c:	7841      	ldrb	r1, [r0, #1]
   8601e:	2906      	cmp	r1, #6
   86020:	d018      	beq.n	86054 <udc_process_setup+0x78>
   86022:	2908      	cmp	r1, #8
   86024:	f000 80f8 	beq.w	86218 <udc_process_setup+0x23c>
   86028:	2900      	cmp	r1, #0
   8602a:	f040 8108 	bne.w	8623e <udc_process_setup+0x262>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   8602e:	2a02      	cmp	r2, #2
   86030:	d10d      	bne.n	8604e <udc_process_setup+0x72>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   86032:	f241 3078 	movw	r0, #4984	; 0x1378
   86036:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8603a:	f04f 0102 	mov.w	r1, #2
   8603e:	f248 3309 	movw	r3, #33545	; 0x8309
   86042:	f2c0 0308 	movt	r3, #8
   86046:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   86048:	f04f 0001 	mov.w	r0, #1
   8604c:	e328      	b.n	866a0 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
   8604e:	f04f 0000 	mov.w	r0, #0
   86052:	e325      	b.n	866a0 <udc_process_setup+0x6c4>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   86054:	f242 3490 	movw	r4, #9104	; 0x2390
   86058:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8605c:	8860      	ldrh	r0, [r4, #2]
   8605e:	b2c4      	uxtb	r4, r0

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   86060:	ea4f 2110 	mov.w	r1, r0, lsr #8
   86064:	f101 33ff 	add.w	r3, r1, #4294967295
   86068:	2b06      	cmp	r3, #6
   8606a:	f200 80c3 	bhi.w	861f4 <udc_process_setup+0x218>
   8606e:	e8df f013 	tbh	[pc, r3, lsl #1]
   86072:	0007      	.short	0x0007
   86074:	0078001b 	.word	0x0078001b
   86078:	00c100c1 	.word	0x00c100c1
   8607c:	00510044 	.word	0x00510044
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   86080:	f248 2291 	movw	r2, #33425	; 0x8291
   86084:	f2c0 0208 	movt	r2, #8
   86088:	4790      	blx	r2
   8608a:	b930      	cbnz	r0, 8609a <udc_process_setup+0xbe>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
   8608c:	48a3      	ldr	r0, [pc, #652]	; (8631c <udc_process_setup+0x340>)
   8608e:	6883      	ldr	r3, [r0, #8]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
			udd_set_setup_payload(
   86090:	4618      	mov	r0, r3
   86092:	7819      	ldrb	r1, [r3, #0]
   86094:	4aa2      	ldr	r2, [pc, #648]	; (86320 <udc_process_setup+0x344>)
   86096:	4790      	blx	r2
   86098:	e09c      	b.n	861d4 <udc_process_setup+0x1f8>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
   8609a:	4ba0      	ldr	r3, [pc, #640]	; (8631c <udc_process_setup+0x340>)
   8609c:	6819      	ldr	r1, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
   8609e:	4608      	mov	r0, r1
   860a0:	7809      	ldrb	r1, [r1, #0]
   860a2:	4a9f      	ldr	r2, [pc, #636]	; (86320 <udc_process_setup+0x344>)
   860a4:	4790      	blx	r2
   860a6:	e095      	b.n	861d4 <udc_process_setup+0x1f8>
		break;

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   860a8:	f248 2191 	movw	r1, #33425	; 0x8291
   860ac:	f2c0 0108 	movt	r1, #8
   860b0:	4788      	blx	r1
   860b2:	b170      	cbz	r0, 860d2 <udc_process_setup+0xf6>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   860b4:	4899      	ldr	r0, [pc, #612]	; (8631c <udc_process_setup+0x340>)
   860b6:	6881      	ldr	r1, [r0, #8]
   860b8:	7c4a      	ldrb	r2, [r1, #17]
   860ba:	42a2      	cmp	r2, r4
   860bc:	f240 809d 	bls.w	861fa <udc_process_setup+0x21e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   860c0:	4b96      	ldr	r3, [pc, #600]	; (8631c <udc_process_setup+0x340>)
   860c2:	6918      	ldr	r0, [r3, #16]
   860c4:	f850 1034 	ldr.w	r1, [r0, r4, lsl #3]
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   860c8:	4608      	mov	r0, r1
   860ca:	8849      	ldrh	r1, [r1, #2]
   860cc:	4a94      	ldr	r2, [pc, #592]	; (86320 <udc_process_setup+0x344>)
   860ce:	4790      	blx	r2
   860d0:	e00d      	b.n	860ee <udc_process_setup+0x112>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   860d2:	4b92      	ldr	r3, [pc, #584]	; (8631c <udc_process_setup+0x340>)
   860d4:	681a      	ldr	r2, [r3, #0]
   860d6:	7c50      	ldrb	r0, [r2, #17]
   860d8:	42a0      	cmp	r0, r4
   860da:	f240 8091 	bls.w	86200 <udc_process_setup+0x224>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   860de:	498f      	ldr	r1, [pc, #572]	; (8631c <udc_process_setup+0x340>)
   860e0:	684b      	ldr	r3, [r1, #4]
   860e2:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   860e6:	4610      	mov	r0, r2
   860e8:	8851      	ldrh	r1, [r2, #2]
   860ea:	4b8d      	ldr	r3, [pc, #564]	; (86320 <udc_process_setup+0x344>)
   860ec:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   860ee:	4b8d      	ldr	r3, [pc, #564]	; (86324 <udc_process_setup+0x348>)
   860f0:	6898      	ldr	r0, [r3, #8]
   860f2:	f04f 0102 	mov.w	r1, #2
   860f6:	7041      	strb	r1, [r0, #1]
   860f8:	e06c      	b.n	861d4 <udc_process_setup+0x1f8>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
				udc_config.qualifier->bLength);
   860fa:	f240 1308 	movw	r3, #264	; 0x108
   860fe:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86102:	68d9      	ldr	r1, [r3, #12]
		break;

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   86104:	4608      	mov	r0, r1
   86106:	7809      	ldrb	r1, [r1, #0]
   86108:	f248 3209 	movw	r2, #33545	; 0x8309
   8610c:	f2c0 0208 	movt	r2, #8
   86110:	4790      	blx	r2
   86112:	e05f      	b.n	861d4 <udc_process_setup+0x1f8>
				udc_config.qualifier->bLength);
		break;

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   86114:	f248 2291 	movw	r2, #33425	; 0x8291
   86118:	f2c0 0208 	movt	r2, #8
   8611c:	4790      	blx	r2
   8611e:	b968      	cbnz	r0, 8613c <udc_process_setup+0x160>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   86120:	4a7e      	ldr	r2, [pc, #504]	; (8631c <udc_process_setup+0x340>)
   86122:	6890      	ldr	r0, [r2, #8]
   86124:	7c41      	ldrb	r1, [r0, #17]
   86126:	42a1      	cmp	r1, r4
   86128:	d96d      	bls.n	86206 <udc_process_setup+0x22a>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   8612a:	4b7c      	ldr	r3, [pc, #496]	; (8631c <udc_process_setup+0x340>)
   8612c:	691a      	ldr	r2, [r3, #16]
   8612e:	f852 1034 	ldr.w	r1, [r2, r4, lsl #3]
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   86132:	4608      	mov	r0, r1
   86134:	8849      	ldrh	r1, [r1, #2]
   86136:	4b7a      	ldr	r3, [pc, #488]	; (86320 <udc_process_setup+0x344>)
   86138:	4798      	blx	r3
   8613a:	e00c      	b.n	86156 <udc_process_setup+0x17a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   8613c:	4877      	ldr	r0, [pc, #476]	; (8631c <udc_process_setup+0x340>)
   8613e:	6801      	ldr	r1, [r0, #0]
   86140:	7c4b      	ldrb	r3, [r1, #17]
   86142:	42a3      	cmp	r3, r4
   86144:	d962      	bls.n	8620c <udc_process_setup+0x230>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   86146:	4a75      	ldr	r2, [pc, #468]	; (8631c <udc_process_setup+0x340>)
   86148:	6850      	ldr	r0, [r2, #4]
   8614a:	f850 1034 	ldr.w	r1, [r0, r4, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   8614e:	4608      	mov	r0, r1
   86150:	8849      	ldrh	r1, [r1, #2]
   86152:	4b73      	ldr	r3, [pc, #460]	; (86320 <udc_process_setup+0x344>)
   86154:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   86156:	4873      	ldr	r0, [pc, #460]	; (86324 <udc_process_setup+0x348>)
   86158:	6881      	ldr	r1, [r0, #8]
   8615a:	f04f 0207 	mov.w	r2, #7
   8615e:	704a      	strb	r2, [r1, #1]
   86160:	e038      	b.n	861d4 <udc_process_setup+0x1f8>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   86162:	b2c0      	uxtb	r0, r0
   86164:	2803      	cmp	r0, #3
   86166:	d80b      	bhi.n	86180 <udc_process_setup+0x1a4>
   86168:	e8df f010 	tbh	[pc, r0, lsl #1]
   8616c:	000e0004 	.word	0x000e0004
   86170:	032f032b 	.word	0x032f032b
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   86174:	486c      	ldr	r0, [pc, #432]	; (86328 <udc_process_setup+0x34c>)
   86176:	f04f 0104 	mov.w	r1, #4
   8617a:	4a69      	ldr	r2, [pc, #420]	; (86320 <udc_process_setup+0x344>)
   8617c:	4790      	blx	r2
   8617e:	e029      	b.n	861d4 <udc_process_setup+0x1f8>
		str = udc_get_string_serial_name();
		break;
#endif
	default:
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
   86180:	486a      	ldr	r0, [pc, #424]	; (8632c <udc_process_setup+0x350>)
   86182:	4780      	blx	r0
   86184:	bb30      	cbnz	r0, 861d4 <udc_process_setup+0x1f8>
   86186:	e28b      	b.n	866a0 <udc_process_setup+0x6c4>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
   86188:	4969      	ldr	r1, [pc, #420]	; (86330 <udc_process_setup+0x354>)
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   8618a:	f04f 0008 	mov.w	r0, #8
   8618e:	f04f 0300 	mov.w	r3, #0
   86192:	4a68      	ldr	r2, [pc, #416]	; (86334 <udc_process_setup+0x358>)
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   86194:	5ccc      	ldrb	r4, [r1, r3]
   86196:	f822 4f02 	strh.w	r4, [r2, #2]!
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   8619a:	f103 0301 	add.w	r3, r3, #1
   8619e:	2801      	cmp	r0, #1
   861a0:	f200 8317 	bhi.w	867d2 <udc_process_setup+0x7f6>
   861a4:	e00e      	b.n	861c4 <udc_process_setup+0x1e8>
   861a6:	f102 0402 	add.w	r4, r2, #2
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   861aa:	5ccd      	ldrb	r5, [r1, r3]
   861ac:	8055      	strh	r5, [r2, #2]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   861ae:	f103 0301 	add.w	r3, r3, #1
   861b2:	f102 0204 	add.w	r2, r2, #4
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   861b6:	5ccd      	ldrb	r5, [r1, r3]
   861b8:	8065      	strh	r5, [r4, #2]
   861ba:	f103 0301 	add.w	r3, r3, #1
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   861be:	b2dc      	uxtb	r4, r3
   861c0:	4284      	cmp	r4, r0
   861c2:	d3f0      	bcc.n	861a6 <udc_process_setup+0x1ca>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   861c4:	ea4f 0140 	mov.w	r1, r0, lsl #1
   861c8:	f101 0102 	add.w	r1, r1, #2
   861cc:	4859      	ldr	r0, [pc, #356]	; (86334 <udc_process_setup+0x358>)
   861ce:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   861d0:	4b53      	ldr	r3, [pc, #332]	; (86320 <udc_process_setup+0x344>)
   861d2:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   861d4:	f242 3190 	movw	r1, #9104	; 0x2390
   861d8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   861dc:	88c8      	ldrh	r0, [r1, #6]
   861de:	898b      	ldrh	r3, [r1, #12]
   861e0:	4283      	cmp	r3, r0
   861e2:	d916      	bls.n	86212 <udc_process_setup+0x236>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   861e4:	f242 3290 	movw	r2, #9104	; 0x2390
   861e8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   861ec:	8190      	strh	r0, [r2, #12]
	}
	return true;
   861ee:	f04f 0001 	mov.w	r0, #1
   861f2:	e255      	b.n	866a0 <udc_process_setup+0x6c4>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   861f4:	f04f 0000 	mov.w	r0, #0
   861f8:	e252      	b.n	866a0 <udc_process_setup+0x6c4>
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
   861fa:	f04f 0000 	mov.w	r0, #0
   861fe:	e24f      	b.n	866a0 <udc_process_setup+0x6c4>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
   86200:	f04f 0000 	mov.w	r0, #0
   86204:	e24c      	b.n	866a0 <udc_process_setup+0x6c4>
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
   86206:	f04f 0000 	mov.w	r0, #0
   8620a:	e249      	b.n	866a0 <udc_process_setup+0x6c4>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
   8620c:	f04f 0000 	mov.w	r0, #0
   86210:	e246      	b.n	866a0 <udc_process_setup+0x6c4>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
   86212:	f04f 0001 	mov.w	r0, #1
   86216:	e243      	b.n	866a0 <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
   86218:	2a01      	cmp	r2, #1
   8621a:	d10d      	bne.n	86238 <udc_process_setup+0x25c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   8621c:	f241 307a 	movw	r0, #4986	; 0x137a
   86220:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86224:	f04f 0101 	mov.w	r1, #1
   86228:	f248 3209 	movw	r2, #33545	; 0x8309
   8622c:	f2c0 0208 	movt	r2, #8
   86230:	4790      	blx	r2
	return true;
   86232:	f04f 0001 	mov.w	r0, #1
   86236:	e233      	b.n	866a0 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
   86238:	f04f 0000 	mov.w	r0, #0
   8623c:	e230      	b.n	866a0 <udc_process_setup+0x6c4>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8623e:	2b01      	cmp	r3, #1
   86240:	d134      	bne.n	862ac <udc_process_setup+0x2d0>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   86242:	f242 3090 	movw	r0, #9104	; 0x2390
   86246:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8624a:	7841      	ldrb	r1, [r0, #1]
   8624c:	290a      	cmp	r1, #10
   8624e:	d12d      	bne.n	862ac <udc_process_setup+0x2d0>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   86250:	2a01      	cmp	r2, #1
   86252:	d11f      	bne.n	86294 <udc_process_setup+0x2b8>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   86254:	4838      	ldr	r0, [pc, #224]	; (86338 <udc_process_setup+0x35c>)
   86256:	7801      	ldrb	r1, [r0, #0]
   86258:	b1f9      	cbz	r1, 8629a <udc_process_setup+0x2be>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8625a:	4c32      	ldr	r4, [pc, #200]	; (86324 <udc_process_setup+0x348>)
   8625c:	7924      	ldrb	r4, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8625e:	4d37      	ldr	r5, [pc, #220]	; (8633c <udc_process_setup+0x360>)
   86260:	682d      	ldr	r5, [r5, #0]
   86262:	682b      	ldr	r3, [r5, #0]
   86264:	791a      	ldrb	r2, [r3, #4]
   86266:	42a2      	cmp	r2, r4
   86268:	d91a      	bls.n	862a0 <udc_process_setup+0x2c4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   8626a:	4620      	mov	r0, r4
   8626c:	f04f 0100 	mov.w	r1, #0
   86270:	4b33      	ldr	r3, [pc, #204]	; (86340 <udc_process_setup+0x364>)
   86272:	4798      	blx	r3
   86274:	b1b8      	cbz	r0, 862a6 <udc_process_setup+0x2ca>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   86276:	6868      	ldr	r0, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   86278:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
   8627c:	68ca      	ldr	r2, [r1, #12]
   8627e:	4790      	blx	r2
   86280:	4b30      	ldr	r3, [pc, #192]	; (86344 <udc_process_setup+0x368>)
   86282:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   86284:	4618      	mov	r0, r3
   86286:	f04f 0101 	mov.w	r1, #1
   8628a:	4a25      	ldr	r2, [pc, #148]	; (86320 <udc_process_setup+0x344>)
   8628c:	4790      	blx	r2
	return true;
   8628e:	f04f 0001 	mov.w	r0, #1
   86292:	e205      	b.n	866a0 <udc_process_setup+0x6c4>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
   86294:	f04f 0000 	mov.w	r0, #0
   86298:	e202      	b.n	866a0 <udc_process_setup+0x6c4>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
   8629a:	f04f 0000 	mov.w	r0, #0
   8629e:	e1ff      	b.n	866a0 <udc_process_setup+0x6c4>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   862a0:	f04f 0000 	mov.w	r0, #0
   862a4:	e1fc      	b.n	866a0 <udc_process_setup+0x6c4>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
   862a6:	f04f 0000 	mov.w	r0, #0
   862aa:	e1f9      	b.n	866a0 <udc_process_setup+0x6c4>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   862ac:	2b02      	cmp	r3, #2
   862ae:	f040 81f9 	bne.w	866a4 <udc_process_setup+0x6c8>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   862b2:	f242 3390 	movw	r3, #9104	; 0x2390
   862b6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   862ba:	7858      	ldrb	r0, [r3, #1]
   862bc:	2800      	cmp	r0, #0
   862be:	f040 81d5 	bne.w	8666c <udc_process_setup+0x690>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   862c2:	2a02      	cmp	r2, #2
   862c4:	d10d      	bne.n	862e2 <udc_process_setup+0x306>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   862c6:	4a17      	ldr	r2, [pc, #92]	; (86324 <udc_process_setup+0x348>)
   862c8:	7910      	ldrb	r0, [r2, #4]
   862ca:	491f      	ldr	r1, [pc, #124]	; (86348 <udc_process_setup+0x36c>)
   862cc:	4788      	blx	r1
   862ce:	4b1f      	ldr	r3, [pc, #124]	; (8634c <udc_process_setup+0x370>)
   862d0:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   862d2:	4618      	mov	r0, r3
   862d4:	f04f 0102 	mov.w	r1, #2
   862d8:	4a11      	ldr	r2, [pc, #68]	; (86320 <udc_process_setup+0x344>)
   862da:	4790      	blx	r2
			sizeof(udc_ep_status));
	return true;
   862dc:	f04f 0001 	mov.w	r0, #1
   862e0:	e1de      	b.n	866a0 <udc_process_setup+0x6c4>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
   862e2:	f04f 0000 	mov.w	r0, #0
   862e6:	e1db      	b.n	866a0 <udc_process_setup+0x6c4>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   862e8:	f010 031f 	ands.w	r3, r0, #31
   862ec:	f040 8142 	bne.w	86574 <udc_process_setup+0x598>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   862f0:	f242 3190 	movw	r1, #9104	; 0x2390
   862f4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   862f8:	784a      	ldrb	r2, [r1, #1]
   862fa:	f102 30ff 	add.w	r0, r2, #4294967295
   862fe:	2808      	cmp	r0, #8
   86300:	f200 8138 	bhi.w	86574 <udc_process_setup+0x598>
   86304:	e8df f010 	tbh	[pc, r0, lsl #1]
   86308:	01360039 	.word	0x01360039
   8630c:	01360057 	.word	0x01360057
   86310:	01360024 	.word	0x01360024
   86314:	01360136 	.word	0x01360136
   86318:	00ae      	.short	0x00ae
   8631a:	bf00      	nop
   8631c:	20070108 	.word	0x20070108
   86320:	00088309 	.word	0x00088309
   86324:	20072390 	.word	0x20072390
   86328:	20070234 	.word	0x20070234
   8632c:	000824f5 	.word	0x000824f5
   86330:	20070208 	.word	0x20070208
   86334:	20070214 	.word	0x20070214
   86338:	2007137a 	.word	0x2007137a
   8633c:	20071370 	.word	0x20071370
   86340:	00085d81 	.word	0x00085d81
   86344:	20071376 	.word	0x20071376
   86348:	0008837d 	.word	0x0008837d
   8634c:	20071374 	.word	0x20071374
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   86350:	f242 3090 	movw	r0, #9104	; 0x2390
   86354:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86358:	88c1      	ldrh	r1, [r0, #6]
   8635a:	b959      	cbnz	r1, 86374 <udc_process_setup+0x398>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   8635c:	f242 3390 	movw	r3, #9104	; 0x2390
   86360:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86364:	f645 620d 	movw	r2, #24077	; 0x5e0d
   86368:	f2c0 0208 	movt	r2, #8
   8636c:	611a      	str	r2, [r3, #16]
	return true;
   8636e:	f04f 0001 	mov.w	r0, #1
   86372:	e195      	b.n	866a0 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   86374:	f04f 0000 	mov.w	r0, #0
   86378:	e192      	b.n	866a0 <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   8637a:	f242 3290 	movw	r2, #9104	; 0x2390
   8637e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86382:	88d1      	ldrh	r1, [r2, #6]
   86384:	b989      	cbnz	r1, 863aa <udc_process_setup+0x3ce>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   86386:	f242 3090 	movw	r0, #9104	; 0x2390
   8638a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8638e:	8843      	ldrh	r3, [r0, #2]
   86390:	2b01      	cmp	r3, #1
   86392:	d10d      	bne.n	863b0 <udc_process_setup+0x3d4>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   86394:	f241 3178 	movw	r1, #4984	; 0x1378
   86398:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8639c:	880a      	ldrh	r2, [r1, #0]
   8639e:	f022 0002 	bic.w	r0, r2, #2
   863a2:	8008      	strh	r0, [r1, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   863a4:	f04f 0001 	mov.w	r0, #1
   863a8:	e17a      	b.n	866a0 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   863aa:	f04f 0000 	mov.w	r0, #0
   863ae:	e177      	b.n	866a0 <udc_process_setup+0x6c4>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
   863b0:	f04f 0000 	mov.w	r0, #0
   863b4:	e174      	b.n	866a0 <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   863b6:	f242 3090 	movw	r0, #9104	; 0x2390
   863ba:	f2c2 0007 	movt	r0, #8199	; 0x2007
   863be:	88c1      	ldrh	r1, [r0, #6]
   863c0:	2900      	cmp	r1, #0
   863c2:	d140      	bne.n	86446 <udc_process_setup+0x46a>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
   863c4:	f242 3390 	movw	r3, #9104	; 0x2390
   863c8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   863cc:	885a      	ldrh	r2, [r3, #2]
   863ce:	2a02      	cmp	r2, #2
   863d0:	d13c      	bne.n	8644c <udc_process_setup+0x470>
		return false;
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
   863d2:	f248 2091 	movw	r0, #33425	; 0x8291
   863d6:	f2c0 0008 	movt	r0, #8
   863da:	4780      	blx	r0
   863dc:	2800      	cmp	r0, #0
   863de:	d038      	beq.n	86452 <udc_process_setup+0x476>
			break;
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   863e0:	f242 3190 	movw	r1, #9104	; 0x2390
   863e4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   863e8:	790b      	ldrb	r3, [r1, #4]
   863ea:	2b00      	cmp	r3, #0
   863ec:	d134      	bne.n	86458 <udc_process_setup+0x47c>
			break;
		}
		// Unconfigure the device, terminating all ongoing requests
		udc_reset();
   863ee:	f645 7231 	movw	r2, #24369	; 0x5f31
   863f2:	f2c0 0208 	movt	r2, #8
   863f6:	4790      	blx	r2
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   863f8:	f242 3090 	movw	r0, #9104	; 0x2390
   863fc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86400:	8881      	ldrh	r1, [r0, #4]
   86402:	ea4f 2311 	mov.w	r3, r1, lsr #8
   86406:	f103 30ff 	add.w	r0, r3, #4294967295
   8640a:	2803      	cmp	r0, #3
   8640c:	d827      	bhi.n	8645e <udc_process_setup+0x482>
   8640e:	e8df f000 	tbb	[pc, r0]
   86412:	0802      	.short	0x0802
   86414:	140e      	.short	0x140e
		case USB_DEV_TEST_MODE_J:
			udd_g_ctrlreq.callback = udd_test_mode_j;
   86416:	4897      	ldr	r0, [pc, #604]	; (86674 <udc_process_setup+0x698>)
   86418:	4b97      	ldr	r3, [pc, #604]	; (86678 <udc_process_setup+0x69c>)
   8641a:	6118      	str	r0, [r3, #16]
			return true;
   8641c:	f04f 0001 	mov.w	r0, #1
   86420:	e13e      	b.n	866a0 <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_K:
			udd_g_ctrlreq.callback = udd_test_mode_k;
   86422:	4a96      	ldr	r2, [pc, #600]	; (8667c <udc_process_setup+0x6a0>)
   86424:	4994      	ldr	r1, [pc, #592]	; (86678 <udc_process_setup+0x69c>)
   86426:	610a      	str	r2, [r1, #16]
			return true;
   86428:	f04f 0001 	mov.w	r0, #1
   8642c:	e138      	b.n	866a0 <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_SE0_NAK:
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   8642e:	4894      	ldr	r0, [pc, #592]	; (86680 <udc_process_setup+0x6a4>)
   86430:	4b91      	ldr	r3, [pc, #580]	; (86678 <udc_process_setup+0x69c>)
   86432:	6118      	str	r0, [r3, #16]
			return true;
   86434:	f04f 0001 	mov.w	r0, #1
   86438:	e132      	b.n	866a0 <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_PACKET:
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   8643a:	4a92      	ldr	r2, [pc, #584]	; (86684 <udc_process_setup+0x6a8>)
   8643c:	498e      	ldr	r1, [pc, #568]	; (86678 <udc_process_setup+0x69c>)
   8643e:	610a      	str	r2, [r1, #16]
			return true;
   86440:	f04f 0001 	mov.w	r0, #1
   86444:	e12c      	b.n	866a0 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   86446:	f04f 0000 	mov.w	r0, #0
   8644a:	e129      	b.n	866a0 <udc_process_setup+0x6c4>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
   8644c:	f04f 0000 	mov.w	r0, #0
   86450:	e126      	b.n	866a0 <udc_process_setup+0x6c4>
		break;
#endif
	default:
		break;
	}
	return false;
   86452:	f04f 0000 	mov.w	r0, #0
   86456:	e123      	b.n	866a0 <udc_process_setup+0x6c4>
   86458:	f04f 0000 	mov.w	r0, #0
   8645c:	e120      	b.n	866a0 <udc_process_setup+0x6c4>
   8645e:	f04f 0000 	mov.w	r0, #0
   86462:	e11d      	b.n	866a0 <udc_process_setup+0x6c4>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   86464:	f242 3390 	movw	r3, #9104	; 0x2390
   86468:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8646c:	88d9      	ldrh	r1, [r3, #6]
   8646e:	2900      	cmp	r1, #0
   86470:	d16e      	bne.n	86550 <udc_process_setup+0x574>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   86472:	f248 22d5 	movw	r2, #33493	; 0x82d5
   86476:	f2c0 0208 	movt	r2, #8
   8647a:	4790      	blx	r2
   8647c:	2800      	cmp	r0, #0
   8647e:	d06a      	beq.n	86556 <udc_process_setup+0x57a>
		return false;
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   86480:	f248 2091 	movw	r0, #33425	; 0x8291
   86484:	f2c0 0008 	movt	r0, #8
   86488:	4780      	blx	r0
   8648a:	b168      	cbz	r0, 864a8 <udc_process_setup+0x4cc>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8648c:	f242 3190 	movw	r1, #9104	; 0x2390
   86490:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86494:	788a      	ldrb	r2, [r1, #2]
				udc_config.confdev_hs->bNumConfigurations) {
   86496:	f240 1008 	movw	r0, #264	; 0x108
   8649a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8649e:	6883      	ldr	r3, [r0, #8]
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   864a0:	7c59      	ldrb	r1, [r3, #17]
   864a2:	428a      	cmp	r2, r1
   864a4:	dd0d      	ble.n	864c2 <udc_process_setup+0x4e6>
   864a6:	e059      	b.n	8655c <udc_process_setup+0x580>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   864a8:	f242 3390 	movw	r3, #9104	; 0x2390
   864ac:	f2c2 0307 	movt	r3, #8199	; 0x2007
   864b0:	7899      	ldrb	r1, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   864b2:	f240 1208 	movw	r2, #264	; 0x108
   864b6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   864ba:	6810      	ldr	r0, [r2, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   864bc:	7c43      	ldrb	r3, [r0, #17]
   864be:	4299      	cmp	r1, r3
   864c0:	dc4f      	bgt.n	86562 <udc_process_setup+0x586>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
   864c2:	f645 7231 	movw	r2, #24369	; 0x5f31
   864c6:	f2c0 0208 	movt	r2, #8
   864ca:	4790      	blx	r2

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   864cc:	f242 3090 	movw	r0, #9104	; 0x2390
   864d0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   864d4:	7883      	ldrb	r3, [r0, #2]
   864d6:	f241 317a 	movw	r1, #4986	; 0x137a
   864da:	f2c2 0107 	movt	r1, #8199	; 0x2007
   864de:	700b      	strb	r3, [r1, #0]
	if (udc_num_configuration == 0) {
   864e0:	2b00      	cmp	r3, #0
   864e2:	d041      	beq.n	86568 <udc_process_setup+0x58c>
		return true; // Default empty configuration requested
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   864e4:	4a68      	ldr	r2, [pc, #416]	; (86688 <udc_process_setup+0x6ac>)
   864e6:	4790      	blx	r2
   864e8:	b198      	cbz	r0, 86512 <udc_process_setup+0x536>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   864ea:	4a68      	ldr	r2, [pc, #416]	; (8668c <udc_process_setup+0x6b0>)
   864ec:	7810      	ldrb	r0, [r2, #0]
   864ee:	f100 31ff 	add.w	r1, r0, #4294967295
   864f2:	4b67      	ldr	r3, [pc, #412]	; (86690 <udc_process_setup+0x6b4>)
   864f4:	691a      	ldr	r2, [r3, #16]
   864f6:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
   864fa:	4966      	ldr	r1, [pc, #408]	; (86694 <udc_process_setup+0x6b8>)
   864fc:	6008      	str	r0, [r1, #0]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   864fe:	4b65      	ldr	r3, [pc, #404]	; (86694 <udc_process_setup+0x6b8>)
   86500:	681a      	ldr	r2, [r3, #0]
   86502:	6810      	ldr	r0, [r2, #0]
   86504:	7901      	ldrb	r1, [r0, #4]
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
   86506:	f04f 0001 	mov.w	r0, #1
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8650a:	2900      	cmp	r1, #0
   8650c:	f000 80c8 	beq.w	866a0 <udc_process_setup+0x6c4>
   86510:	e00a      	b.n	86528 <udc_process_setup+0x54c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   86512:	485e      	ldr	r0, [pc, #376]	; (8668c <udc_process_setup+0x6b0>)
   86514:	7803      	ldrb	r3, [r0, #0]
   86516:	f103 31ff 	add.w	r1, r3, #4294967295
   8651a:	4a5d      	ldr	r2, [pc, #372]	; (86690 <udc_process_setup+0x6b4>)
   8651c:	6850      	ldr	r0, [r2, #4]
   8651e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   86522:	4b5c      	ldr	r3, [pc, #368]	; (86694 <udc_process_setup+0x6b8>)
   86524:	6019      	str	r1, [r3, #0]
   86526:	e7ea      	b.n	864fe <udc_process_setup+0x522>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86528:	f04f 0400 	mov.w	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   8652c:	4626      	mov	r6, r4
   8652e:	4d5a      	ldr	r5, [pc, #360]	; (86698 <udc_process_setup+0x6bc>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86530:	4f58      	ldr	r7, [pc, #352]	; (86694 <udc_process_setup+0x6b8>)
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   86532:	4620      	mov	r0, r4
   86534:	4631      	mov	r1, r6
   86536:	47a8      	blx	r5
   86538:	b1c8      	cbz	r0, 8656e <udc_process_setup+0x592>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   8653a:	f104 0401 	add.w	r4, r4, #1
   8653e:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86540:	683b      	ldr	r3, [r7, #0]
   86542:	681a      	ldr	r2, [r3, #0]
   86544:	7910      	ldrb	r0, [r2, #4]
   86546:	42a0      	cmp	r0, r4
   86548:	d8f3      	bhi.n	86532 <udc_process_setup+0x556>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
   8654a:	f04f 0001 	mov.w	r0, #1
   8654e:	e0a7      	b.n	866a0 <udc_process_setup+0x6c4>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   86550:	f04f 0000 	mov.w	r0, #0
   86554:	e0a4      	b.n	866a0 <udc_process_setup+0x6c4>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
   86556:	f04f 0000 	mov.w	r0, #0
   8655a:	e0a1      	b.n	866a0 <udc_process_setup+0x6c4>
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
   8655c:	f04f 0000 	mov.w	r0, #0
   86560:	e09e      	b.n	866a0 <udc_process_setup+0x6c4>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
   86562:	f04f 0000 	mov.w	r0, #0
   86566:	e09b      	b.n	866a0 <udc_process_setup+0x6c4>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
   86568:	f04f 0001 	mov.w	r0, #1
   8656c:	e098      	b.n	866a0 <udc_process_setup+0x6c4>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
   8656e:	f04f 0000 	mov.w	r0, #0
   86572:	e095      	b.n	866a0 <udc_process_setup+0x6c4>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   86574:	2b01      	cmp	r3, #1
   86576:	d12d      	bne.n	865d4 <udc_process_setup+0x5f8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   86578:	f242 3190 	movw	r1, #9104	; 0x2390
   8657c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86580:	784a      	ldrb	r2, [r1, #1]
   86582:	2a0b      	cmp	r2, #11
   86584:	d126      	bne.n	865d4 <udc_process_setup+0x5f8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   86586:	f242 3090 	movw	r0, #9104	; 0x2390
   8658a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8658e:	88c2      	ldrh	r2, [r0, #6]
   86590:	b9ba      	cbnz	r2, 865c2 <udc_process_setup+0x5e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   86592:	f241 337a 	movw	r3, #4986	; 0x137a
   86596:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8659a:	7819      	ldrb	r1, [r3, #0]
   8659c:	b1a1      	cbz	r1, 865c8 <udc_process_setup+0x5ec>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8659e:	f242 3590 	movw	r5, #9104	; 0x2390
   865a2:	f2c2 0507 	movt	r5, #8199	; 0x2007
   865a6:	792c      	ldrb	r4, [r5, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   865a8:	886d      	ldrh	r5, [r5, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   865aa:	4620      	mov	r0, r4
   865ac:	f645 6295 	movw	r2, #24213	; 0x5e95
   865b0:	f2c0 0208 	movt	r2, #8
   865b4:	4790      	blx	r2
   865b6:	b150      	cbz	r0, 865ce <udc_process_setup+0x5f2>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   865b8:	4620      	mov	r0, r4
   865ba:	b2e9      	uxtb	r1, r5
   865bc:	4b36      	ldr	r3, [pc, #216]	; (86698 <udc_process_setup+0x6bc>)
   865be:	4798      	blx	r3
   865c0:	e06e      	b.n	866a0 <udc_process_setup+0x6c4>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
   865c2:	f04f 0000 	mov.w	r0, #0
   865c6:	e06b      	b.n	866a0 <udc_process_setup+0x6c4>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
   865c8:	f04f 0000 	mov.w	r0, #0
   865cc:	e068      	b.n	866a0 <udc_process_setup+0x6c4>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
		return false;
   865ce:	f04f 0000 	mov.w	r0, #0
   865d2:	e065      	b.n	866a0 <udc_process_setup+0x6c4>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   865d4:	2b02      	cmp	r3, #2
   865d6:	d165      	bne.n	866a4 <udc_process_setup+0x6c8>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   865d8:	f242 3390 	movw	r3, #9104	; 0x2390
   865dc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   865e0:	7858      	ldrb	r0, [r3, #1]
   865e2:	2801      	cmp	r0, #1
   865e4:	d002      	beq.n	865ec <udc_process_setup+0x610>
   865e6:	2803      	cmp	r0, #3
   865e8:	d158      	bne.n	8669c <udc_process_setup+0x6c0>
   865ea:	e01c      	b.n	86626 <udc_process_setup+0x64a>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   865ec:	f242 3390 	movw	r3, #9104	; 0x2390
   865f0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   865f4:	88d8      	ldrh	r0, [r3, #6]
   865f6:	b980      	cbnz	r0, 8661a <udc_process_setup+0x63e>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   865f8:	f242 3190 	movw	r1, #9104	; 0x2390
   865fc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86600:	884a      	ldrh	r2, [r1, #2]
   86602:	b96a      	cbnz	r2, 86620 <udc_process_setup+0x644>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   86604:	f242 3390 	movw	r3, #9104	; 0x2390
   86608:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8660c:	7918      	ldrb	r0, [r3, #4]
   8660e:	f248 41bd 	movw	r1, #33981	; 0x84bd
   86612:	f2c0 0108 	movt	r1, #8
   86616:	4788      	blx	r1
   86618:	e042      	b.n	866a0 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   8661a:	f04f 0000 	mov.w	r0, #0
   8661e:	e03f      	b.n	866a0 <udc_process_setup+0x6c4>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
   86620:	f04f 0000 	mov.w	r0, #0
   86624:	e03c      	b.n	866a0 <udc_process_setup+0x6c4>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   86626:	f242 3190 	movw	r1, #9104	; 0x2390
   8662a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8662e:	88ca      	ldrh	r2, [r1, #6]
   86630:	b9b2      	cbnz	r2, 86660 <udc_process_setup+0x684>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   86632:	f242 3390 	movw	r3, #9104	; 0x2390
   86636:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8663a:	8858      	ldrh	r0, [r3, #2]
   8663c:	b998      	cbnz	r0, 86666 <udc_process_setup+0x68a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   8663e:	f242 3490 	movw	r4, #9104	; 0x2390
   86642:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86646:	7920      	ldrb	r0, [r4, #4]
   86648:	f648 31b9 	movw	r1, #35769	; 0x8bb9
   8664c:	f2c0 0108 	movt	r1, #8
   86650:	4788      	blx	r1
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   86652:	7920      	ldrb	r0, [r4, #4]
   86654:	f248 3295 	movw	r2, #33685	; 0x8395
   86658:	f2c0 0208 	movt	r2, #8
   8665c:	4790      	blx	r2
   8665e:	e01f      	b.n	866a0 <udc_process_setup+0x6c4>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   86660:	f04f 0000 	mov.w	r0, #0
   86664:	e01c      	b.n	866a0 <udc_process_setup+0x6c4>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
   86666:	f04f 0000 	mov.w	r0, #0
   8666a:	e019      	b.n	866a0 <udc_process_setup+0x6c4>
				break;
			}
		}
#endif
	}
	return false;
   8666c:	f04f 0000 	mov.w	r0, #0
   86670:	e016      	b.n	866a0 <udc_process_setup+0x6c4>
   86672:	bf00      	nop
   86674:	00088cbd 	.word	0x00088cbd
   86678:	20072390 	.word	0x20072390
   8667c:	00088cdd 	.word	0x00088cdd
   86680:	00088cfd 	.word	0x00088cfd
   86684:	00088d15 	.word	0x00088d15
   86688:	00088291 	.word	0x00088291
   8668c:	2007137a 	.word	0x2007137a
   86690:	20070108 	.word	0x20070108
   86694:	20071370 	.word	0x20071370
   86698:	00085e29 	.word	0x00085e29
   8669c:	f04f 0000 	mov.w	r0, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
   866a0:	2800      	cmp	r0, #0
   866a2:	d17b      	bne.n	8679c <udc_process_setup+0x7c0>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   866a4:	f242 3190 	movw	r1, #9104	; 0x2390
   866a8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   866ac:	7808      	ldrb	r0, [r1, #0]
   866ae:	f000 031f 	and.w	r3, r0, #31
   866b2:	2b01      	cmp	r3, #1
   866b4:	d12d      	bne.n	86712 <udc_process_setup+0x736>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   866b6:	f241 327a 	movw	r2, #4986	; 0x137a
   866ba:	f2c2 0207 	movt	r2, #8199	; 0x2007
   866be:	7811      	ldrb	r1, [r2, #0]
   866c0:	b339      	cbz	r1, 86712 <udc_process_setup+0x736>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   866c2:	f242 3490 	movw	r4, #9104	; 0x2390
   866c6:	f2c2 0407 	movt	r4, #8199	; 0x2007
   866ca:	7924      	ldrb	r4, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   866cc:	f241 3570 	movw	r5, #4976	; 0x1370
   866d0:	f2c2 0507 	movt	r5, #8199	; 0x2007
   866d4:	682d      	ldr	r5, [r5, #0]
   866d6:	6828      	ldr	r0, [r5, #0]
   866d8:	7903      	ldrb	r3, [r0, #4]
   866da:	42a3      	cmp	r3, r4
   866dc:	d919      	bls.n	86712 <udc_process_setup+0x736>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   866de:	4620      	mov	r0, r4
   866e0:	f04f 0100 	mov.w	r1, #0
   866e4:	f645 5281 	movw	r2, #23937	; 0x5d81
   866e8:	f2c0 0208 	movt	r2, #8
   866ec:	4790      	blx	r2
   866ee:	b180      	cbz	r0, 86712 <udc_process_setup+0x736>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   866f0:	6869      	ldr	r1, [r5, #4]
   866f2:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   866f6:	68e8      	ldr	r0, [r5, #12]
   866f8:	4780      	blx	r0
   866fa:	4601      	mov	r1, r0
   866fc:	4620      	mov	r0, r4
   866fe:	f645 5381 	movw	r3, #23937	; 0x5d81
   86702:	f2c0 0308 	movt	r3, #8
   86706:	4798      	blx	r3
   86708:	b118      	cbz	r0, 86712 <udc_process_setup+0x736>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   8670a:	68aa      	ldr	r2, [r5, #8]
   8670c:	4790      	blx	r2
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
   8670e:	2800      	cmp	r0, #0
   86710:	d147      	bne.n	867a2 <udc_process_setup+0x7c6>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   86712:	f242 3190 	movw	r1, #9104	; 0x2390
   86716:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8671a:	7808      	ldrb	r0, [r1, #0]
   8671c:	f000 031f 	and.w	r3, r0, #31
   86720:	2b02      	cmp	r3, #2
   86722:	d141      	bne.n	867a8 <udc_process_setup+0x7cc>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   86724:	f241 327a 	movw	r2, #4986	; 0x137a
   86728:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8672c:	7811      	ldrb	r1, [r2, #0]
   8672e:	b331      	cbz	r1, 8677e <udc_process_setup+0x7a2>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86730:	f241 3070 	movw	r0, #4976	; 0x1370
   86734:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86738:	6803      	ldr	r3, [r0, #0]
   8673a:	681a      	ldr	r2, [r3, #0]
   8673c:	7911      	ldrb	r1, [r2, #4]
   8673e:	b309      	cbz	r1, 86784 <udc_process_setup+0x7a8>
   86740:	f04f 0400 	mov.w	r4, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   86744:	f645 5681 	movw	r6, #23937	; 0x5d81
   86748:	f2c0 0608 	movt	r6, #8
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8674c:	f241 3770 	movw	r7, #4976	; 0x1370
   86750:	f2c2 0707 	movt	r7, #8199	; 0x2007
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   86754:	685d      	ldr	r5, [r3, #4]
   86756:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8675a:	68eb      	ldr	r3, [r5, #12]
   8675c:	4798      	blx	r3
   8675e:	4601      	mov	r1, r0
   86760:	4620      	mov	r0, r4
   86762:	47b0      	blx	r6
   86764:	b188      	cbz	r0, 8678a <udc_process_setup+0x7ae>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   86766:	68a8      	ldr	r0, [r5, #8]
   86768:	4780      	blx	r0
   8676a:	b988      	cbnz	r0, 86790 <udc_process_setup+0x7b4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   8676c:	f104 0401 	add.w	r4, r4, #1
   86770:	b2e4      	uxtb	r4, r4
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86772:	683b      	ldr	r3, [r7, #0]
   86774:	681a      	ldr	r2, [r3, #0]
   86776:	7911      	ldrb	r1, [r2, #4]
   86778:	42a1      	cmp	r1, r4
   8677a:	d8eb      	bhi.n	86754 <udc_process_setup+0x778>
   8677c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
   8677e:	f04f 0000 	mov.w	r0, #0
   86782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
   86784:	f04f 0000 	mov.w	r0, #0
   86788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
			return false;
   8678a:	f04f 0000 	mov.w	r0, #0
   8678e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
   86790:	f04f 0001 	mov.w	r0, #1
   86794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
   86796:	f04f 0000 	mov.w	r0, #0
   8679a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
   8679c:	f04f 0001 	mov.w	r0, #1
   867a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
			return true;
   867a2:	f04f 0001 	mov.w	r0, #1
   867a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   867a8:	f04f 0000 	mov.w	r0, #0
   867ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   867ae:	f010 0f60 	tst.w	r0, #96	; 0x60
   867b2:	f47f af77 	bne.w	866a4 <udc_process_setup+0x6c8>
   867b6:	e597      	b.n	862e8 <udc_process_setup+0x30c>
   867b8:	f010 0f60 	tst.w	r0, #96	; 0x60
   867bc:	f47f af72 	bne.w	866a4 <udc_process_setup+0x6c8>
   867c0:	e424      	b.n	8600c <udc_process_setup+0x30>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   867c2:	f04f 000e 	mov.w	r0, #14
		str = udc_string_product_name;
   867c6:	490a      	ldr	r1, [pc, #40]	; (867f0 <udc_process_setup+0x814>)
   867c8:	e4e1      	b.n	8618e <udc_process_setup+0x1b2>
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   867ca:	f04f 000c 	mov.w	r0, #12
		str = udc_get_string_serial_name();
   867ce:	4909      	ldr	r1, [pc, #36]	; (867f4 <udc_process_setup+0x818>)
   867d0:	e4dd      	b.n	8618e <udc_process_setup+0x1b2>
   867d2:	f04f 0401 	mov.w	r4, #1
   867d6:	2c00      	cmp	r4, #0
   867d8:	f43f ace5 	beq.w	861a6 <udc_process_setup+0x1ca>
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   867dc:	5ccc      	ldrb	r4, [r1, r3]
   867de:	f822 4f02 	strh.w	r4, [r2, #2]!
   867e2:	f103 0301 	add.w	r3, r3, #1
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   867e6:	b2dc      	uxtb	r4, r3
   867e8:	4284      	cmp	r4, r0
   867ea:	f4ff acdc 	bcc.w	861a6 <udc_process_setup+0x1ca>
   867ee:	e4e9      	b.n	861c4 <udc_process_setup+0x1e8>
   867f0:	200701f8 	.word	0x200701f8
   867f4:	0008bb70 	.word	0x0008bb70

000867f8 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   867f8:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   867fa:	f641 2350 	movw	r3, #6736	; 0x1a50
   867fe:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86802:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   86806:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   86808:	f04f 000b 	mov.w	r0, #11
   8680c:	f646 5475 	movw	r4, #28021	; 0x6d75
   86810:	f2c0 0408 	movt	r4, #8
   86814:	47a0      	blx	r4
   86816:	f04f 000c 	mov.w	r0, #12
   8681a:	47a0      	blx	r4
   8681c:	f04f 000d 	mov.w	r0, #13
   86820:	47a0      	blx	r4
   86822:	f04f 000e 	mov.w	r0, #14
   86826:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   86828:	f04f 002b 	mov.w	r0, #43	; 0x2b
   8682c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   86830:	f646 2451 	movw	r4, #27217	; 0x6a51
   86834:	f2c0 0408 	movt	r4, #8
   86838:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8683a:	f04f 002a 	mov.w	r0, #42	; 0x2a
   8683e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   86842:	47a0      	blx	r4
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif

#if defined (CONF_BOARD_SD_MMC_HSMCI)
/* Configure HSMCI pins */
gpio_configure_pin(PIN_HSMCI_MCCDA_GPIO, PIN_HSMCI_MCCDA_FLAGS);
   86844:	f04f 0014 	mov.w	r0, #20
   86848:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8684c:	47a0      	blx	r4
gpio_configure_pin(PIN_HSMCI_MCCK_GPIO, PIN_HSMCI_MCCK_FLAGS);
   8684e:	f04f 0013 	mov.w	r0, #19
   86852:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   86856:	47a0      	blx	r4
gpio_configure_pin(PIN_HSMCI_MCDA0_GPIO, PIN_HSMCI_MCDA0_FLAGS);
   86858:	f04f 0015 	mov.w	r0, #21
   8685c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   86860:	47a0      	blx	r4
gpio_configure_pin(PIN_HSMCI_MCDA1_GPIO, PIN_HSMCI_MCDA1_FLAGS);
   86862:	f04f 0016 	mov.w	r0, #22
   86866:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8686a:	47a0      	blx	r4
gpio_configure_pin(PIN_HSMCI_MCDA2_GPIO, PIN_HSMCI_MCDA2_FLAGS);
   8686c:	f04f 0017 	mov.w	r0, #23
   86870:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   86874:	47a0      	blx	r4
gpio_configure_pin(PIN_HSMCI_MCDA3_GPIO, PIN_HSMCI_MCDA3_FLAGS);
   86876:	f04f 0018 	mov.w	r0, #24
   8687a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8687e:	47a0      	blx	r4

/* Configure SD/MMC card detect pin */
gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
   86880:	f04f 0067 	mov.w	r0, #103	; 0x67
   86884:	f04f 0108 	mov.w	r1, #8
   86888:	47a0      	blx	r4
   8688a:	bd10      	pop	{r4, pc}

0008688c <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   8688c:	b510      	push	{r4, lr}
   8688e:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   86890:	283b      	cmp	r0, #59	; 0x3b
   86892:	d106      	bne.n	868a2 <LED_Off+0x16>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
			} else {
				gpio_set_pin_high(led_gpio);
   86894:	f04f 003b 	mov.w	r0, #59	; 0x3b
   86898:	f646 2311 	movw	r3, #27153	; 0x6a11
   8689c:	f2c0 0308 	movt	r3, #8
   868a0:	4798      	blx	r3
 */
void LED_Off(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   868a2:	2c55      	cmp	r4, #85	; 0x55
   868a4:	d106      	bne.n	868b4 <LED_Off+0x28>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
			} else {
				gpio_set_pin_high(led_gpio);
   868a6:	f04f 0055 	mov.w	r0, #85	; 0x55
   868aa:	f646 2111 	movw	r1, #27153	; 0x6a11
   868ae:	f2c0 0108 	movt	r1, #8
   868b2:	4788      	blx	r1
 */
void LED_Off(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   868b4:	2c56      	cmp	r4, #86	; 0x56
   868b6:	d106      	bne.n	868c6 <LED_Off+0x3a>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
			} else {
				gpio_set_pin_high(led_gpio);
   868b8:	f04f 0056 	mov.w	r0, #86	; 0x56
   868bc:	f646 2211 	movw	r2, #27153	; 0x6a11
   868c0:	f2c0 0208 	movt	r2, #8
   868c4:	4790      	blx	r2
 */
void LED_Off(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   868c6:	2c57      	cmp	r4, #87	; 0x57
   868c8:	d106      	bne.n	868d8 <LED_Off+0x4c>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
   868ca:	f04f 0057 	mov.w	r0, #87	; 0x57
   868ce:	f646 2331 	movw	r3, #27185	; 0x6a31
   868d2:	f2c0 0308 	movt	r3, #8
   868d6:	4798      	blx	r3
   868d8:	bd10      	pop	{r4, pc}
   868da:	bf00      	nop

000868dc <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   868dc:	b510      	push	{r4, lr}
   868de:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   868e0:	283b      	cmp	r0, #59	; 0x3b
   868e2:	d106      	bne.n	868f2 <LED_On+0x16>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
			} else {
				gpio_set_pin_low(led_gpio);
   868e4:	f04f 003b 	mov.w	r0, #59	; 0x3b
   868e8:	f646 2331 	movw	r3, #27185	; 0x6a31
   868ec:	f2c0 0308 	movt	r3, #8
   868f0:	4798      	blx	r3
 */
void LED_On(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   868f2:	2c55      	cmp	r4, #85	; 0x55
   868f4:	d106      	bne.n	86904 <LED_On+0x28>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
			} else {
				gpio_set_pin_low(led_gpio);
   868f6:	f04f 0055 	mov.w	r0, #85	; 0x55
   868fa:	f646 2131 	movw	r1, #27185	; 0x6a31
   868fe:	f2c0 0108 	movt	r1, #8
   86902:	4788      	blx	r1
 */
void LED_On(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   86904:	2c56      	cmp	r4, #86	; 0x56
   86906:	d106      	bne.n	86916 <LED_On+0x3a>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
			} else {
				gpio_set_pin_low(led_gpio);
   86908:	f04f 0056 	mov.w	r0, #86	; 0x56
   8690c:	f646 2231 	movw	r2, #27185	; 0x6a31
   86910:	f2c0 0208 	movt	r2, #8
   86914:	4790      	blx	r2
 */
void LED_On(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   86916:	2c57      	cmp	r4, #87	; 0x57
   86918:	d106      	bne.n	86928 <LED_On+0x4c>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
   8691a:	f04f 0057 	mov.w	r0, #87	; 0x57
   8691e:	f646 2311 	movw	r3, #27153	; 0x6a11
   86922:	f2c0 0308 	movt	r3, #8
   86926:	4798      	blx	r3
   86928:	bd10      	pop	{r4, pc}
   8692a:	bf00      	nop

0008692c <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8692c:	b10a      	cbz	r2, 86932 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   8692e:	6641      	str	r1, [r0, #100]	; 0x64
   86930:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   86932:	6601      	str	r1, [r0, #96]	; 0x60
   86934:	4770      	bx	lr
   86936:	bf00      	nop

00086938 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   86938:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8693a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8693e:	d016      	beq.n	8696e <pio_set_peripheral+0x36>
   86940:	d804      	bhi.n	8694c <pio_set_peripheral+0x14>
   86942:	b1c9      	cbz	r1, 86978 <pio_set_peripheral+0x40>
   86944:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   86948:	d115      	bne.n	86976 <pio_set_peripheral+0x3e>
   8694a:	e009      	b.n	86960 <pio_set_peripheral+0x28>
   8694c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   86950:	d012      	beq.n	86978 <pio_set_peripheral+0x40>
   86952:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   86956:	d00f      	beq.n	86978 <pio_set_peripheral+0x40>
   86958:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8695c:	d10b      	bne.n	86976 <pio_set_peripheral+0x3e>
   8695e:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   86960:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   86962:	6f01      	ldr	r1, [r0, #112]	; 0x70
   86964:	400b      	ands	r3, r1
   86966:	ea23 0302 	bic.w	r3, r3, r2
   8696a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8696c:	e003      	b.n	86976 <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8696e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   86970:	ea42 0103 	orr.w	r1, r2, r3
   86974:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   86976:	6042      	str	r2, [r0, #4]
   86978:	4770      	bx	lr
   8697a:	bf00      	nop

0008697c <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8697c:	6441      	str	r1, [r0, #68]	; 0x44
   8697e:	4770      	bx	lr

00086980 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   86980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86982:	4604      	mov	r4, r0
   86984:	460d      	mov	r5, r1
   86986:	4616      	mov	r6, r2
   86988:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   8698a:	f646 137d 	movw	r3, #27005	; 0x697d
   8698e:	f2c0 0308 	movt	r3, #8
   86992:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   86994:	4620      	mov	r0, r4
   86996:	4629      	mov	r1, r5
   86998:	9a06      	ldr	r2, [sp, #24]
   8699a:	f646 132d 	movw	r3, #26925	; 0x692d
   8699e:	f2c0 0308 	movt	r3, #8
   869a2:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   869a4:	b10f      	cbz	r7, 869aa <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   869a6:	6525      	str	r5, [r4, #80]	; 0x50
   869a8:	e000      	b.n	869ac <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   869aa:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   869ac:	b10e      	cbz	r6, 869b2 <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   869ae:	6325      	str	r5, [r4, #48]	; 0x30
   869b0:	e000      	b.n	869b4 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   869b2:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   869b4:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   869b6:	6025      	str	r5, [r4, #0]
   869b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   869ba:	bf00      	nop

000869bc <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   869bc:	b570      	push	{r4, r5, r6, lr}
   869be:	4604      	mov	r4, r0
   869c0:	460d      	mov	r5, r1
   869c2:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   869c4:	f646 137d 	movw	r3, #27005	; 0x697d
   869c8:	f2c0 0308 	movt	r3, #8
   869cc:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   869ce:	4620      	mov	r0, r4
   869d0:	4629      	mov	r1, r5
   869d2:	f006 0201 	and.w	r2, r6, #1
   869d6:	f646 132d 	movw	r3, #26925	; 0x692d
   869da:	f2c0 0308 	movt	r3, #8
   869de:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   869e0:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   869e4:	bf14      	ite	ne
   869e6:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   869e8:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   869ea:	f016 0f02 	tst.w	r6, #2
   869ee:	d002      	beq.n	869f6 <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   869f0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   869f4:	e004      	b.n	86a00 <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   869f6:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_SCIFSR = ul_mask;
   869fa:	bf18      	it	ne
   869fc:	f8c4 5080 	strne.w	r5, [r4, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   86a00:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   86a02:	6025      	str	r5, [r4, #0]
   86a04:	bd70      	pop	{r4, r5, r6, pc}
   86a06:	bf00      	nop

00086a08 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   86a08:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   86a0a:	4770      	bx	lr

00086a0c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   86a0c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   86a0e:	4770      	bx	lr

00086a10 <pio_set_pin_high>:
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   86a10:	ea4f 1350 	mov.w	r3, r0, lsr #5
   86a14:	f503 1100 	add.w	r1, r3, #2097152	; 0x200000
   86a18:	f201 7207 	addw	r2, r1, #1799	; 0x707
   86a1c:	ea4f 2342 	mov.w	r3, r2, lsl #9
	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   86a20:	f000 001f 	and.w	r0, r0, #31
   86a24:	f04f 0101 	mov.w	r1, #1
   86a28:	fa01 f200 	lsl.w	r2, r1, r0
   86a2c:	631a      	str	r2, [r3, #48]	; 0x30
   86a2e:	4770      	bx	lr

00086a30 <pio_set_pin_low>:
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   86a30:	ea4f 1350 	mov.w	r3, r0, lsr #5
   86a34:	f503 1100 	add.w	r1, r3, #2097152	; 0x200000
   86a38:	f201 7207 	addw	r2, r1, #1799	; 0x707
   86a3c:	ea4f 2342 	mov.w	r3, r2, lsl #9
	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   86a40:	f000 001f 	and.w	r0, r0, #31
   86a44:	f04f 0101 	mov.w	r1, #1
   86a48:	fa01 f200 	lsl.w	r2, r1, r0
   86a4c:	635a      	str	r2, [r3, #52]	; 0x34
   86a4e:	4770      	bx	lr

00086a50 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   86a50:	b5f0      	push	{r4, r5, r6, r7, lr}
   86a52:	b083      	sub	sp, #12
   86a54:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   86a56:	ea4f 1650 	mov.w	r6, r0, lsr #5
   86a5a:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
   86a5e:	f201 7207 	addw	r2, r1, #1799	; 0x707
   86a62:	ea4f 2642 	mov.w	r6, r2, lsl #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   86a66:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   86a6a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   86a6e:	d042      	beq.n	86af6 <pio_configure_pin+0xa6>
   86a70:	d806      	bhi.n	86a80 <pio_configure_pin+0x30>
   86a72:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   86a76:	d00a      	beq.n	86a8e <pio_configure_pin+0x3e>
   86a78:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   86a7c:	d164      	bne.n	86b48 <pio_configure_pin+0xf8>
   86a7e:	e020      	b.n	86ac2 <pio_configure_pin+0x72>
   86a80:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   86a84:	d046      	beq.n	86b14 <pio_configure_pin+0xc4>
   86a86:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   86a8a:	d15d      	bne.n	86b48 <pio_configure_pin+0xf8>
   86a8c:	e042      	b.n	86b14 <pio_configure_pin+0xc4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   86a8e:	f000 071f 	and.w	r7, r0, #31
   86a92:	f04f 0401 	mov.w	r4, #1
   86a96:	fa04 f707 	lsl.w	r7, r4, r7
   86a9a:	4630      	mov	r0, r6
   86a9c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   86aa0:	463a      	mov	r2, r7
   86aa2:	f646 1339 	movw	r3, #26937	; 0x6939
   86aa6:	f2c0 0308 	movt	r3, #8
   86aaa:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   86aac:	4630      	mov	r0, r6
   86aae:	4639      	mov	r1, r7
   86ab0:	ea05 0204 	and.w	r2, r5, r4
   86ab4:	f646 132d 	movw	r3, #26925	; 0x692d
   86ab8:	f2c0 0308 	movt	r3, #8
   86abc:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   86abe:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   86ac0:	e044      	b.n	86b4c <pio_configure_pin+0xfc>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   86ac2:	f000 001f 	and.w	r0, r0, #31
   86ac6:	f04f 0401 	mov.w	r4, #1
   86aca:	fa04 f700 	lsl.w	r7, r4, r0
   86ace:	4630      	mov	r0, r6
   86ad0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   86ad4:	463a      	mov	r2, r7
   86ad6:	f646 1339 	movw	r3, #26937	; 0x6939
   86ada:	f2c0 0308 	movt	r3, #8
   86ade:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   86ae0:	4630      	mov	r0, r6
   86ae2:	4639      	mov	r1, r7
   86ae4:	ea05 0204 	and.w	r2, r5, r4
   86ae8:	f646 132d 	movw	r3, #26925	; 0x692d
   86aec:	f2c0 0308 	movt	r3, #8
   86af0:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   86af2:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   86af4:	e02a      	b.n	86b4c <pio_configure_pin+0xfc>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   86af6:	f000 021f 	and.w	r2, r0, #31
   86afa:	f04f 0401 	mov.w	r4, #1
   86afe:	4630      	mov	r0, r6
   86b00:	fa04 f102 	lsl.w	r1, r4, r2
   86b04:	462a      	mov	r2, r5
   86b06:	f646 13bd 	movw	r3, #27069	; 0x69bd
   86b0a:	f2c0 0308 	movt	r3, #8
   86b0e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   86b10:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   86b12:	e01b      	b.n	86b4c <pio_configure_pin+0xfc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   86b14:	f000 021f 	and.w	r2, r0, #31
   86b18:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   86b1c:	f005 5360 	and.w	r3, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   86b20:	ea05 0104 	and.w	r1, r5, r4
   86b24:	9100      	str	r1, [sp, #0]
   86b26:	4630      	mov	r0, r6
   86b28:	fa04 f102 	lsl.w	r1, r4, r2
   86b2c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   86b30:	bf14      	ite	ne
   86b32:	2200      	movne	r2, #0
   86b34:	2201      	moveq	r2, #1
   86b36:	f3c5 0380 	ubfx	r3, r5, #2, #1
   86b3a:	f646 1581 	movw	r5, #27009	; 0x6981
   86b3e:	f2c0 0508 	movt	r5, #8
   86b42:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   86b44:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   86b46:	e001      	b.n	86b4c <pio_configure_pin+0xfc>

	default:
		return 0;
   86b48:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   86b4c:	b003      	add	sp, #12
   86b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00086b50 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   86b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86b52:	4604      	mov	r4, r0
   86b54:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   86b56:	f646 2309 	movw	r3, #27145	; 0x6a09
   86b5a:	f2c0 0308 	movt	r3, #8
   86b5e:	4798      	blx	r3
   86b60:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   86b62:	4620      	mov	r0, r4
   86b64:	f646 210d 	movw	r1, #27149	; 0x6a0d
   86b68:	f2c0 0108 	movt	r1, #8
   86b6c:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   86b6e:	4005      	ands	r5, r0
   86b70:	d014      	beq.n	86b9c <pio_handler_process+0x4c>
   86b72:	4c0b      	ldr	r4, [pc, #44]	; (86ba0 <pio_handler_process+0x50>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
   86b74:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   86b76:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   86b7a:	42b0      	cmp	r0, r6
   86b7c:	d10a      	bne.n	86b94 <pio_handler_process+0x44>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   86b7e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   86b82:	4229      	tst	r1, r5
   86b84:	d006      	beq.n	86b94 <pio_handler_process+0x44>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   86b86:	6822      	ldr	r2, [r4, #0]
   86b88:	4630      	mov	r0, r6
   86b8a:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   86b8c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   86b90:	ea25 0503 	bic.w	r5, r5, r3
   86b94:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   86b98:	2d00      	cmp	r5, #0
   86b9a:	d1eb      	bne.n	86b74 <pio_handler_process+0x24>
   86b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86b9e:	bf00      	nop
   86ba0:	2007138c 	.word	0x2007138c

00086ba4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   86ba4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   86ba6:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   86baa:	f2c4 000e 	movt	r0, #16398	; 0x400e
   86bae:	f04f 010b 	mov.w	r1, #11
   86bb2:	f646 3351 	movw	r3, #27473	; 0x6b51
   86bb6:	f2c0 0308 	movt	r3, #8
   86bba:	4798      	blx	r3
   86bbc:	bd08      	pop	{r3, pc}
   86bbe:	bf00      	nop

00086bc0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   86bc0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   86bc2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   86bc6:	f2c4 000e 	movt	r0, #16398	; 0x400e
   86bca:	f04f 010c 	mov.w	r1, #12
   86bce:	f646 3351 	movw	r3, #27473	; 0x6b51
   86bd2:	f2c0 0308 	movt	r3, #8
   86bd6:	4798      	blx	r3
   86bd8:	bd08      	pop	{r3, pc}
   86bda:	bf00      	nop

00086bdc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   86bdc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   86bde:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   86be2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   86be6:	f04f 010d 	mov.w	r1, #13
   86bea:	f646 3351 	movw	r3, #27473	; 0x6b51
   86bee:	f2c0 0308 	movt	r3, #8
   86bf2:	4798      	blx	r3
   86bf4:	bd08      	pop	{r3, pc}
   86bf6:	bf00      	nop

00086bf8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   86bf8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   86bfa:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   86bfe:	f2c4 000e 	movt	r0, #16398	; 0x400e
   86c02:	f04f 010e 	mov.w	r1, #14
   86c06:	f646 3351 	movw	r3, #27473	; 0x6b51
   86c0a:	f2c0 0308 	movt	r3, #8
   86c0e:	4798      	blx	r3
   86c10:	bd08      	pop	{r3, pc}
   86c12:	bf00      	nop

00086c14 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   86c14:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   86c18:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   86c1e:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   86c22:	4308      	orrs	r0, r1
   86c24:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   86c26:	6e98      	ldr	r0, [r3, #104]	; 0x68
   86c28:	f010 0f08 	tst.w	r0, #8
   86c2c:	d007      	beq.n	86c3e <pmc_switch_mck_to_pllack+0x2a>
   86c2e:	e010      	b.n	86c52 <pmc_switch_mck_to_pllack+0x3e>
   86c30:	f100 33ff 	add.w	r3, r0, #4294967295
   86c34:	6e90      	ldr	r0, [r2, #104]	; 0x68
   86c36:	f010 0f08 	tst.w	r0, #8
   86c3a:	d038      	beq.n	86cae <pmc_switch_mck_to_pllack+0x9a>
   86c3c:	e009      	b.n	86c52 <pmc_switch_mck_to_pllack+0x3e>
   86c3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   86c42:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   86c46:	f2c4 020e 	movt	r2, #16398	; 0x400e
   86c4a:	6e91      	ldr	r1, [r2, #104]	; 0x68
   86c4c:	f011 0f08 	tst.w	r1, #8
   86c50:	d0ee      	beq.n	86c30 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   86c52:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   86c56:	f2c4 010e 	movt	r1, #16398	; 0x400e
   86c5a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   86c5c:	f022 0303 	bic.w	r3, r2, #3
   86c60:	f043 0002 	orr.w	r0, r3, #2
   86c64:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   86c66:	6e89      	ldr	r1, [r1, #104]	; 0x68
   86c68:	f011 0f08 	tst.w	r1, #8
   86c6c:	d009      	beq.n	86c82 <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   86c6e:	f04f 0000 	mov.w	r0, #0
   86c72:	4770      	bx	lr
   86c74:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   86c78:	6e91      	ldr	r1, [r2, #104]	; 0x68
   86c7a:	f011 0f08 	tst.w	r1, #8
   86c7e:	d013      	beq.n	86ca8 <pmc_switch_mck_to_pllack+0x94>
   86c80:	e009      	b.n	86c96 <pmc_switch_mck_to_pllack+0x82>
   86c82:	f44f 6300 	mov.w	r3, #2048	; 0x800
   86c86:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   86c8a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   86c8e:	6e90      	ldr	r0, [r2, #104]	; 0x68
   86c90:	f010 0f08 	tst.w	r0, #8
   86c94:	d0ee      	beq.n	86c74 <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   86c96:	f04f 0000 	mov.w	r0, #0
   86c9a:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   86c9c:	f04f 0001 	mov.w	r0, #1
   86ca0:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   86ca2:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   86ca6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   86ca8:	3b01      	subs	r3, #1
   86caa:	d1f0      	bne.n	86c8e <pmc_switch_mck_to_pllack+0x7a>
   86cac:	e7f9      	b.n	86ca2 <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   86cae:	1e58      	subs	r0, r3, #1
   86cb0:	d1cb      	bne.n	86c4a <pmc_switch_mck_to_pllack+0x36>
   86cb2:	e7f3      	b.n	86c9c <pmc_switch_mck_to_pllack+0x88>

00086cb4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   86cb4:	b188      	cbz	r0, 86cda <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   86cb6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   86cba:	f2c4 010e 	movt	r1, #16398	; 0x400e
   86cbe:	6a08      	ldr	r0, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   86cc0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   86cc4:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   86cc8:	4002      	ands	r2, r0
   86cca:	f04f 0302 	mov.w	r3, #2
   86cce:	f2c0 1337 	movt	r3, #311	; 0x137
   86cd2:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   86cd6:	6208      	str	r0, [r1, #32]
   86cd8:	4770      	bx	lr
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   86cda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   86cde:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86ce2:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   86ce4:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   86ce8:	f020 0203 	bic.w	r2, r0, #3
   86cec:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   86cf0:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   86cf4:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   86cf8:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   86cfc:	6218      	str	r0, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   86cfe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   86d02:	f2c4 020e 	movt	r2, #16398	; 0x400e
   86d06:	6e93      	ldr	r3, [r2, #104]	; 0x68
   86d08:	f013 0f01 	tst.w	r3, #1
   86d0c:	d0fb      	beq.n	86d06 <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   86d0e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   86d12:	f2c4 010e 	movt	r1, #16398	; 0x400e
   86d16:	6a08      	ldr	r0, [r1, #32]
   86d18:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   86d1c:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   86d20:	620b      	str	r3, [r1, #32]
   86d22:	4770      	bx	lr

00086d24 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   86d24:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   86d28:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86d2c:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   86d2e:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   86d32:	4770      	bx	lr

00086d34 <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   86d34:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   86d38:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86d3c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   86d40:	629a      	str	r2, [r3, #40]	; 0x28
   86d42:	4770      	bx	lr

00086d44 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   86d44:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   86d48:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86d4c:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   86d4e:	f000 0002 	and.w	r0, r0, #2
   86d52:	4770      	bx	lr

00086d54 <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
   86d54:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   86d58:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86d5c:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
   86d60:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   86d62:	f44f 60c0 	mov.w	r0, #1536	; 0x600
   86d66:	f2c4 000e 	movt	r0, #16398	; 0x400e
   86d6a:	6e81      	ldr	r1, [r0, #104]	; 0x68
   86d6c:	f011 0f40 	tst.w	r1, #64	; 0x40
   86d70:	d0fb      	beq.n	86d6a <pmc_enable_upll_clock+0x16>
}
   86d72:	4770      	bx	lr

00086d74 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   86d74:	282c      	cmp	r0, #44	; 0x2c
   86d76:	d835      	bhi.n	86de4 <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   86d78:	281f      	cmp	r0, #31
   86d7a:	d817      	bhi.n	86dac <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   86d7c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   86d80:	f2c4 010e 	movt	r1, #16398	; 0x400e
   86d84:	698a      	ldr	r2, [r1, #24]
   86d86:	f04f 0301 	mov.w	r3, #1
   86d8a:	fa03 f300 	lsl.w	r3, r3, r0
   86d8e:	401a      	ands	r2, r3
   86d90:	4293      	cmp	r3, r2
   86d92:	d02a      	beq.n	86dea <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   86d94:	f04f 0101 	mov.w	r1, #1
   86d98:	fa01 f000 	lsl.w	r0, r1, r0
   86d9c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   86da0:	f2c4 020e 	movt	r2, #16398	; 0x400e
   86da4:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   86da6:	f04f 0000 	mov.w	r0, #0
   86daa:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   86dac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   86db0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86db4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   86db8:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   86dbc:	f04f 0101 	mov.w	r1, #1
   86dc0:	fa01 f100 	lsl.w	r1, r1, r0
   86dc4:	400a      	ands	r2, r1
   86dc6:	4291      	cmp	r1, r2
   86dc8:	d012      	beq.n	86df0 <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   86dca:	f04f 0301 	mov.w	r3, #1
   86dce:	fa03 f000 	lsl.w	r0, r3, r0
   86dd2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   86dd6:	f2c4 020e 	movt	r2, #16398	; 0x400e
   86dda:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   86dde:	f04f 0000 	mov.w	r0, #0
   86de2:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   86de4:	f04f 0001 	mov.w	r0, #1
   86de8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   86dea:	f04f 0000 	mov.w	r0, #0
   86dee:	4770      	bx	lr
   86df0:	f04f 0000 	mov.w	r0, #0
}
   86df4:	4770      	bx	lr
   86df6:	bf00      	nop

00086df8 <pmc_switch_udpck_to_upllck>:
 *
 * \param dw_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
   86df8:	ea4f 2000 	mov.w	r0, r0, lsl #8
   86dfc:	f400 6270 	and.w	r2, r0, #3840	; 0xf00
   86e00:	f042 0101 	orr.w	r1, r2, #1
   86e04:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   86e08:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86e0c:	6399      	str	r1, [r3, #56]	; 0x38
   86e0e:	4770      	bx	lr

00086e10 <pmc_enable_udpck>:
void pmc_enable_udpck(void)
{
# if (SAM3S || SAM4S || SAM4E)
	PMC->PMC_SCER = PMC_SCER_UDP;
# else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
   86e10:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   86e14:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86e18:	f04f 0220 	mov.w	r2, #32
   86e1c:	601a      	str	r2, [r3, #0]
   86e1e:	4770      	bx	lr

00086e20 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   86e20:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   86e24:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86e28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   86e2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   86e2e:	f420 0178 	bic.w	r1, r0, #16252928	; 0xf80000
	PMC->PMC_FSMR |= ul_inputs;
   86e32:	430a      	orrs	r2, r1
   86e34:	671a      	str	r2, [r3, #112]	; 0x70
   86e36:	4770      	bx	lr

00086e38 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_fastrc_used;
   86e38:	f241 33f0 	movw	r3, #5104	; 0x13f0
   86e3c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86e40:	7818      	ldrb	r0, [r3, #0]
}
   86e42:	f080 0001 	eor.w	r0, r0, #1
   86e46:	4770      	bx	lr

00086e48 <udd_sleep_mode>:
 *
 * \param b_enable true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   86e48:	4603      	mov	r3, r0
   86e4a:	2800      	cmp	r0, #0
   86e4c:	d149      	bne.n	86ee2 <udd_sleep_mode+0x9a>
   86e4e:	f241 32f4 	movw	r2, #5108	; 0x13f4
   86e52:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86e56:	7811      	ldrb	r1, [r2, #0]
   86e58:	2900      	cmp	r1, #0
   86e5a:	d03c      	beq.n	86ed6 <udd_sleep_mode+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86e5c:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   86e60:	b672      	cpsid	i
   86e62:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   86e66:	f240 2238 	movw	r2, #568	; 0x238
   86e6a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86e6e:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   86e70:	f242 3288 	movw	r2, #9096	; 0x2388
   86e74:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86e78:	7890      	ldrb	r0, [r2, #2]
   86e7a:	f100 30ff 	add.w	r0, r0, #4294967295
   86e7e:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   86e80:	bb49      	cbnz	r1, 86ed6 <udd_sleep_mode+0x8e>
		cpu_irq_enable();
   86e82:	f240 2238 	movw	r2, #568	; 0x238
   86e86:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86e8a:	f04f 0101 	mov.w	r1, #1
   86e8e:	7011      	strb	r1, [r2, #0]
   86e90:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   86e94:	b662      	cpsie	i
   86e96:	e01e      	b.n	86ed6 <udd_sleep_mode+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86e98:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   86e9c:	b672      	cpsid	i
   86e9e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   86ea2:	f240 2238 	movw	r2, #568	; 0x238
   86ea6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86eaa:	f04f 0000 	mov.w	r0, #0
   86eae:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   86eb0:	f242 3288 	movw	r2, #9096	; 0x2388
   86eb4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86eb8:	7890      	ldrb	r0, [r2, #2]
   86eba:	f100 0001 	add.w	r0, r0, #1
   86ebe:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   86ec0:	b949      	cbnz	r1, 86ed6 <udd_sleep_mode+0x8e>
		cpu_irq_enable();
   86ec2:	f240 2238 	movw	r2, #568	; 0x238
   86ec6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86eca:	f04f 0101 	mov.w	r1, #1
   86ece:	7011      	strb	r1, [r2, #0]
   86ed0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   86ed4:	b662      	cpsie	i
	}
	if (b_idle && !udd_b_idle) {
		dbg_print("_W ");
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
   86ed6:	f241 30f4 	movw	r0, #5108	; 0x13f4
   86eda:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86ede:	7003      	strb	r3, [r0, #0]
   86ee0:	4770      	bx	lr
{
	if (!b_idle && udd_b_idle) {
		dbg_print("_S ");
		sleepmgr_unlock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   86ee2:	f241 32f4 	movw	r2, #5108	; 0x13f4
   86ee6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86eea:	7810      	ldrb	r0, [r2, #0]
   86eec:	2800      	cmp	r0, #0
   86eee:	d0d3      	beq.n	86e98 <udd_sleep_mode+0x50>
   86ef0:	e7f1      	b.n	86ed6 <udd_sleep_mode+0x8e>
   86ef2:	bf00      	nop

00086ef4 <udd_ctrl_init>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86ef4:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   86ef8:	b672      	cpsid	i
   86efa:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   86efe:	f240 2338 	movw	r3, #568	; 0x238
   86f02:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86f06:	f04f 0100 	mov.w	r1, #0
   86f0a:	7019      	strb	r1, [r3, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   86f0c:	f24c 2020 	movw	r0, #49696	; 0xc220
   86f10:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86f14:	f04f 0101 	mov.w	r1, #1
   86f18:	6001      	str	r1, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   86f1a:	b93a      	cbnz	r2, 86f2c <udd_ctrl_init+0x38>
		cpu_irq_enable();
   86f1c:	f240 2338 	movw	r3, #568	; 0x238
   86f20:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86f24:	7019      	strb	r1, [r3, #0]
   86f26:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   86f2a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   86f2c:	f24c 1060 	movw	r0, #49504	; 0xc160
   86f30:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86f34:	f04f 0102 	mov.w	r1, #2
   86f38:	6001      	str	r1, [r0, #0]

	udd_g_ctrlreq.callback = NULL;
   86f3a:	f242 3290 	movw	r2, #9104	; 0x2390
   86f3e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86f42:	f04f 0300 	mov.w	r3, #0
   86f46:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   86f48:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   86f4a:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   86f4c:	f241 4170 	movw	r1, #5232	; 0x1470
   86f50:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86f54:	700b      	strb	r3, [r1, #0]
   86f56:	4770      	bx	lr

00086f58 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   86f58:	f241 4370 	movw	r3, #5232	; 0x1470
   86f5c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86f60:	f04f 0205 	mov.w	r2, #5
   86f64:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   86f66:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   86f6a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86f6e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   86f72:	6001      	str	r1, [r0, #0]
   86f74:	4770      	bx	lr
   86f76:	bf00      	nop

00086f78 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   86f78:	f241 4370 	movw	r3, #5232	; 0x1470
   86f7c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86f80:	f04f 0203 	mov.w	r2, #3
   86f84:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86f86:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   86f8a:	b672      	cpsid	i
   86f8c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   86f90:	f240 2138 	movw	r1, #568	; 0x238
   86f94:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86f98:	f04f 0300 	mov.w	r3, #0
   86f9c:	700b      	strb	r3, [r1, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   86f9e:	f24c 1260 	movw	r2, #49504	; 0xc160
   86fa2:	f2c4 020a 	movt	r2, #16394	; 0x400a
   86fa6:	f04f 0101 	mov.w	r1, #1
   86faa:	6011      	str	r1, [r2, #0]
	udd_enable_in_send_interrupt(0);
   86fac:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   86fb0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   86fb4:	6019      	str	r1, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   86fb6:	f04f 0108 	mov.w	r1, #8
   86fba:	6011      	str	r1, [r2, #0]
	udd_enable_nak_out_interrupt(0);
   86fbc:	6019      	str	r1, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   86fbe:	b948      	cbnz	r0, 86fd4 <udd_ctrl_send_zlp_in+0x5c>
		cpu_irq_enable();
   86fc0:	f240 2038 	movw	r0, #568	; 0x238
   86fc4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86fc8:	f04f 0201 	mov.w	r2, #1
   86fcc:	7002      	strb	r2, [r0, #0]
   86fce:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   86fd2:	b662      	cpsie	i
   86fd4:	4770      	bx	lr
   86fd6:	bf00      	nop

00086fd8 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   86fd8:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   86fda:	f242 3390 	movw	r3, #9104	; 0x2390
   86fde:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86fe2:	6918      	ldr	r0, [r3, #16]
   86fe4:	b100      	cbz	r0, 86fe8 <udd_ctrl_endofrequest+0x10>
		udd_g_ctrlreq.callback();
   86fe6:	4780      	blx	r0
   86fe8:	bd08      	pop	{r3, pc}
   86fea:	bf00      	nop

00086fec <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
   86fec:	b570      	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86fee:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   86ff2:	b672      	cpsid	i
   86ff4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   86ff8:	f240 2338 	movw	r3, #568	; 0x238
   86ffc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87000:	f04f 0100 	mov.w	r1, #0
   87004:	7019      	strb	r1, [r3, #0]
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
   87006:	f24c 2020 	movw	r0, #49696	; 0xc220
   8700a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8700e:	f04f 0101 	mov.w	r1, #1
   87012:	6001      	str	r1, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87014:	b93a      	cbnz	r2, 87026 <udd_ctrl_in_sent+0x3a>
		cpu_irq_enable();
   87016:	f240 2338 	movw	r3, #568	; 0x238
   8701a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8701e:	7019      	strb	r1, [r3, #0]
   87020:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87024:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   87026:	f241 4070 	movw	r0, #5232	; 0x1470
   8702a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8702e:	7801      	ldrb	r1, [r0, #0]
   87030:	2903      	cmp	r1, #3
   87032:	d10a      	bne.n	8704a <udd_ctrl_in_sent+0x5e>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   87034:	f646 72d9 	movw	r2, #28633	; 0x6fd9
   87038:	f2c0 0208 	movt	r2, #8
   8703c:	4790      	blx	r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
   8703e:	f646 60f5 	movw	r0, #28405	; 0x6ef5
   87042:	f2c0 0008 	movt	r0, #8
   87046:	4780      	blx	r0
		return;
   87048:	bd70      	pop	{r4, r5, r6, pc}
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8704a:	f241 4472 	movw	r4, #5234	; 0x1472
   8704e:	f2c2 0407 	movt	r4, #8199	; 0x2007
   87052:	8823      	ldrh	r3, [r4, #0]
   87054:	f242 3290 	movw	r2, #9104	; 0x2390
   87058:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8705c:	8990      	ldrh	r0, [r2, #12]
   8705e:	1ac1      	subs	r1, r0, r3
   87060:	b28c      	uxth	r4, r1
	if (0 == nb_remain) {
   87062:	2c00      	cmp	r4, #0
   87064:	d155      	bne.n	87112 <udd_ctrl_in_sent+0x126>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous playlaod buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   87066:	f241 32f2 	movw	r2, #5106	; 0x13f2
   8706a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8706e:	8810      	ldrh	r0, [r2, #0]
   87070:	181b      	adds	r3, r3, r0
   87072:	b299      	uxth	r1, r3
   87074:	8011      	strh	r1, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   87076:	f242 3290 	movw	r2, #9104	; 0x2390
   8707a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8707e:	88d0      	ldrh	r0, [r2, #6]
   87080:	4288      	cmp	r0, r1
   87082:	d005      	beq.n	87090 <udd_ctrl_in_sent+0xa4>
					|| b_shortpacket) {
   87084:	f241 4374 	movw	r3, #5236	; 0x1474
   87088:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8708c:	7819      	ldrb	r1, [r3, #0]
   8708e:	b361      	cbz	r1, 870ea <udd_ctrl_in_sent+0xfe>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   87090:	f241 4070 	movw	r0, #5232	; 0x1470
   87094:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87098:	f04f 0204 	mov.w	r2, #4
   8709c:	7002      	strb	r2, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8709e:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   870a2:	b672      	cpsid	i
   870a4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   870a8:	f240 2338 	movw	r3, #568	; 0x238
   870ac:	f2c2 0307 	movt	r3, #8199	; 0x2007
   870b0:	f04f 0000 	mov.w	r0, #0
   870b4:	7018      	strb	r0, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
   870b6:	f24c 1360 	movw	r3, #49504	; 0xc160
   870ba:	f2c4 030a 	movt	r3, #16394	; 0x400a
   870be:	f04f 0210 	mov.w	r2, #16
   870c2:	601a      	str	r2, [r3, #0]
	udd_enable_nak_in_interrupt(0);
   870c4:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   870c8:	f2c4 000a 	movt	r0, #16394	; 0x400a
   870cc:	6002      	str	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   870ce:	2900      	cmp	r1, #0
   870d0:	f040 80a7 	bne.w	87222 <udd_ctrl_in_sent+0x236>
		cpu_irq_enable();
   870d4:	f240 2138 	movw	r1, #568	; 0x238
   870d8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   870dc:	f04f 0301 	mov.w	r3, #1
   870e0:	700b      	strb	r3, [r1, #0]
   870e2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   870e6:	b662      	cpsie	i
   870e8:	bd70      	pop	{r4, r5, r6, pc}
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   870ea:	f242 3590 	movw	r5, #9104	; 0x2390
   870ee:	f2c2 0507 	movt	r5, #8199	; 0x2007
   870f2:	696e      	ldr	r6, [r5, #20]
   870f4:	b1ce      	cbz	r6, 8712a <udd_ctrl_in_sent+0x13e>
				|| (!udd_g_ctrlreq.over_under_run())) {
   870f6:	47b0      	blx	r6
   870f8:	b1b8      	cbz	r0, 8712a <udd_ctrl_in_sent+0x13e>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   870fa:	f241 4472 	movw	r4, #5234	; 0x1472
   870fe:	f2c2 0407 	movt	r4, #8199	; 0x2007
   87102:	f04f 0200 	mov.w	r2, #0
   87106:	8022      	strh	r2, [r4, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   87108:	f242 3090 	movw	r0, #9104	; 0x2390
   8710c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87110:	8984      	ldrh	r4, [r0, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   87112:	2c3f      	cmp	r4, #63	; 0x3f
   87114:	d909      	bls.n	8712a <udd_ctrl_in_sent+0x13e>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
   87116:	f241 4374 	movw	r3, #5236	; 0x1474
   8711a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8711e:	f04f 0100 	mov.w	r1, #0
   87122:	7019      	strb	r1, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   87124:	f04f 0440 	mov.w	r4, #64	; 0x40
   87128:	e006      	b.n	87138 <udd_ctrl_in_sent+0x14c>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
   8712a:	f241 4574 	movw	r5, #5236	; 0x1474
   8712e:	f2c2 0507 	movt	r5, #8199	; 0x2007
   87132:	f04f 0601 	mov.w	r6, #1
   87136:	702e      	strb	r6, [r5, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   87138:	f242 3290 	movw	r2, #9104	; 0x2390
   8713c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87140:	6890      	ldr	r0, [r2, #8]
   87142:	f241 4372 	movw	r3, #5234	; 0x1472
   87146:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8714a:	881e      	ldrh	r6, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8714c:	f3ef 8110 	mrs	r1, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   87150:	f1d1 0501 	rsbs	r5, r1, #1
   87154:	bf38      	it	cc
   87156:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87158:	b672      	cpsid	i
   8715a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8715e:	f240 2238 	movw	r2, #568	; 0x238
   87162:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87166:	f04f 0300 	mov.w	r3, #0
   8716a:	7013      	strb	r3, [r2, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
   8716c:	f24c 1130 	movw	r1, #49456	; 0xc130
   87170:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87174:	680a      	ldr	r2, [r1, #0]
   87176:	f012 0f02 	tst.w	r2, #2
   8717a:	d101      	bne.n	87180 <udd_ctrl_in_sent+0x194>
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   8717c:	b99c      	cbnz	r4, 871a6 <udd_ctrl_in_sent+0x1ba>
   8717e:	e035      	b.n	871ec <udd_ctrl_in_sent+0x200>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87180:	b14d      	cbz	r5, 87196 <udd_ctrl_in_sent+0x1aa>
		cpu_irq_enable();
   87182:	f240 2038 	movw	r0, #568	; 0x238
   87186:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8718a:	f04f 0201 	mov.w	r2, #1
   8718e:	7002      	strb	r2, [r0, #0]
   87190:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87194:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   87196:	f241 4170 	movw	r1, #5232	; 0x1470
   8719a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8719e:	f04f 0304 	mov.w	r3, #4
   871a2:	700b      	strb	r3, [r1, #0]
		return; // Exit of IN DATA phase
   871a4:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   871a6:	1982      	adds	r2, r0, r6
		cpu_irq_restore(flags);
	}
}


static void udd_ctrl_in_sent(void)
   871a8:	f04f 0300 	mov.w	r3, #0
   871ac:	f2c2 0318 	movt	r3, #8216	; 0x2018
   871b0:	ea6f 0003 	mvn.w	r0, r3
   871b4:	1901      	adds	r1, r0, r4
   871b6:	f001 0001 	and.w	r0, r1, #1
   871ba:	f102 32ff 	add.w	r2, r2, #4294967295
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
   871be:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   871c2:	f803 1b01 	strb.w	r1, [r3], #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   871c6:	b2d9      	uxtb	r1, r3
   871c8:	42a1      	cmp	r1, r4
   871ca:	d32b      	bcc.n	87224 <udd_ctrl_in_sent+0x238>
   871cc:	e00e      	b.n	871ec <udd_ctrl_in_sent+0x200>
   871ce:	f102 0001 	add.w	r0, r2, #1
		*ptr_dest++ = *ptr_src++;
   871d2:	7852      	ldrb	r2, [r2, #1]
   871d4:	4619      	mov	r1, r3
   871d6:	f801 2b01 	strb.w	r2, [r1], #1
   871da:	f100 0201 	add.w	r2, r0, #1
   871de:	7840      	ldrb	r0, [r0, #1]
   871e0:	7058      	strb	r0, [r3, #1]
   871e2:	f101 0301 	add.w	r3, r1, #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   871e6:	b2d9      	uxtb	r1, r3
   871e8:	42a1      	cmp	r1, r4
   871ea:	d3f0      	bcc.n	871ce <udd_ctrl_in_sent+0x1e2>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   871ec:	19a4      	adds	r4, r4, r6
   871ee:	f241 4372 	movw	r3, #5234	; 0x1472
   871f2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   871f6:	801c      	strh	r4, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   871f8:	f24c 1060 	movw	r0, #49504	; 0xc160
   871fc:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87200:	f04f 0201 	mov.w	r2, #1
   87204:	6002      	str	r2, [r0, #0]
	udd_enable_in_send_interrupt(0);
   87206:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   8720a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8720e:	600a      	str	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87210:	b13d      	cbz	r5, 87222 <udd_ctrl_in_sent+0x236>
		cpu_irq_enable();
   87212:	f240 2338 	movw	r3, #568	; 0x238
   87216:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8721a:	701a      	strb	r2, [r3, #0]
   8721c:	f3bf 8f5f 	dmb	sy
   87220:	b662      	cpsie	i
   87222:	bd70      	pop	{r4, r5, r6, pc}
   87224:	b240      	sxtb	r0, r0
   87226:	2800      	cmp	r0, #0
   87228:	d0d1      	beq.n	871ce <udd_ctrl_in_sent+0x1e2>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
   8722a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   8722e:	f803 1b01 	strb.w	r1, [r3], #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   87232:	b2d8      	uxtb	r0, r3
   87234:	42a0      	cmp	r0, r4
   87236:	d3ca      	bcc.n	871ce <udd_ctrl_in_sent+0x1e2>
   87238:	e7d8      	b.n	871ec <udd_ctrl_in_sent+0x200>
   8723a:	bf00      	nop

0008723c <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   8723c:	b538      	push	{r3, r4, r5, lr}
   8723e:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
   87240:	7d04      	ldrb	r4, [r0, #20]
   87242:	f014 0f01 	tst.w	r4, #1
   87246:	d013      	beq.n	87270 <udd_ep_finish_job+0x34>
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
   87248:	7d04      	ldrb	r4, [r0, #20]
   8724a:	f36f 0400 	bfc	r4, #0, #1
   8724e:	7504      	strb	r4, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   87250:	6804      	ldr	r4, [r0, #0]
   87252:	b16c      	cbz	r4, 87270 <udd_ep_finish_job+0x34>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   87254:	f44f 4541 	mov.w	r5, #49408	; 0xc100
   87258:	f2c4 050a 	movt	r5, #16394	; 0x400a
   8725c:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
   87260:	f410 7f80 	tst.w	r0, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
   87264:	bf18      	it	ne
   87266:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   8726a:	4608      	mov	r0, r1
   8726c:	6899      	ldr	r1, [r3, #8]
   8726e:	47a0      	blx	r4
   87270:	bd38      	pop	{r3, r4, r5, pc}
   87272:	bf00      	nop

00087274 <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   87274:	b508      	push	{r3, lr}
	ep &= USB_EP_ADDR_MASK;
   87276:	f000 020f 	and.w	r2, r0, #15

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   8727a:	f102 30ff 	add.w	r0, r2, #4294967295
   8727e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   87282:	f241 33f8 	movw	r3, #5112	; 0x13f8
   87286:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8728a:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
   8728e:	f04f 0101 	mov.w	r1, #1
   87292:	f247 233d 	movw	r3, #29245	; 0x723d
   87296:	f2c0 0308 	movt	r3, #8
   8729a:	4798      	blx	r3
   8729c:	bd08      	pop	{r3, pc}
   8729e:	bf00      	nop

000872a0 <udd_ep_trans_done>:
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

#ifdef UDD_EP_DMA_SUPPORTED
static void udd_ep_trans_done(udd_ep_id_t ep)
{
   872a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   872a2:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   872a4:	f100 31ff 	add.w	r1, r0, #4294967295
   872a8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   872ac:	f241 33f8 	movw	r3, #5112	; 0x13f8
   872b0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   872b4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3

	if (!ptr_job->busy) {
   872b8:	7d18      	ldrb	r0, [r3, #20]
   872ba:	f010 0f01 	tst.w	r0, #1
   872be:	f000 80c6 	beq.w	8744e <udd_ep_trans_done+0x1ae>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   872c2:	68dc      	ldr	r4, [r3, #12]
   872c4:	689d      	ldr	r5, [r3, #8]
   872c6:	42ac      	cmp	r4, r5
   872c8:	f000 8082 	beq.w	873d0 <udd_ep_trans_done+0x130>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   872cc:	1b2d      	subs	r5, r5, r4

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   872ce:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   872d2:	bf92      	itee	ls
   872d4:	042e      	lslls	r6, r5, #16
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   872d6:	f44f 3580 	movhi.w	r5, #65536	; 0x10000

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
   872da:	2600      	movhi	r6, #0
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
		}
		if (Is_udd_endpoint_in(ep)) {
   872dc:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   872e0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   872e4:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   872e8:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
   872ec:	f417 7f80 	tst.w	r7, #256	; 0x100
   872f0:	d011      	beq.n	87316 <udd_ep_trans_done+0x76>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   872f2:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
   872f6:	f3c7 1002 	ubfx	r0, r7, #4, #3
   872fa:	f04f 0708 	mov.w	r7, #8
   872fe:	fa07 f000 	lsl.w	r0, r7, r0
   87302:	f100 30ff 	add.w	r0, r0, #4294967295
   87306:	4205      	tst	r5, r0
   87308:	d017      	beq.n	8733a <udd_ep_trans_done+0x9a>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
   8730a:	433e      	orrs	r6, r7
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   8730c:	7d1f      	ldrb	r7, [r3, #20]
   8730e:	f36f 0741 	bfc	r7, #1, #1
   87312:	751f      	strb	r7, [r3, #20]
   87314:	e011      	b.n	8733a <udd_ep_trans_done+0x9a>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   87316:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
   8731a:	f3c0 27c1 	ubfx	r7, r0, #11, #2
   8731e:	2f01      	cmp	r7, #1
   87320:	d109      	bne.n	87336 <udd_ep_trans_done+0x96>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   87322:	f8dc 0000 	ldr.w	r0, [ip]
   87326:	f3c0 1002 	ubfx	r0, r0, #4, #3
   8732a:	f04f 0708 	mov.w	r7, #8
   8732e:	fa07 f000 	lsl.w	r0, r7, r0
   87332:	4285      	cmp	r5, r0
   87334:	d801      	bhi.n	8733a <udd_ep_trans_done+0x9a>

				// Enable short packet reception
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   87336:	f046 0614 	orr.w	r6, r6, #20
						| UOTGHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   8733a:	f44f 4043 	mov.w	r0, #49920	; 0xc300
   8733e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87342:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   87346:	685f      	ldr	r7, [r3, #4]
   87348:	193c      	adds	r4, r7, r4
   8734a:	6044      	str	r4, [r0, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8734c:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   87350:	f1d7 0c01 	rsbs	ip, r7, #1
   87354:	bf38      	it	cc
   87356:	f04f 0c00 	movcc.w	ip, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8735a:	b672      	cpsid	i
   8735c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   87360:	f240 2438 	movw	r4, #568	; 0x238
   87364:	f2c2 0407 	movt	r4, #8199	; 0x2007
   87368:	f04f 0700 	mov.w	r7, #0
   8736c:	7027      	strb	r7, [r4, #0]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   8736e:	68c4      	ldr	r4, [r0, #12]
   87370:	f014 0f10 	tst.w	r4, #16
   87374:	d11d      	bne.n	873b2 <udd_ep_trans_done+0x112>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   87376:	f046 0621 	orr.w	r6, r6, #33	; 0x21
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
				& UOTGHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   8737a:	6086      	str	r6, [r0, #8]
			ptr_job->buf_cnt += next_trans;
   8737c:	68da      	ldr	r2, [r3, #12]
   8737e:	1950      	adds	r0, r2, r5
   87380:	60d8      	str	r0, [r3, #12]
			ptr_job->buf_load = next_trans;
   87382:	611d      	str	r5, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   87384:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   87388:	fa03 f101 	lsl.w	r1, r3, r1
   8738c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   87390:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87394:	6191      	str	r1, [r2, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87396:	f1bc 0f00 	cmp.w	ip, #0
   8739a:	d058      	beq.n	8744e <udd_ep_trans_done+0x1ae>
		cpu_irq_enable();
   8739c:	f240 2038 	movw	r0, #568	; 0x238
   873a0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   873a4:	f04f 0301 	mov.w	r3, #1
   873a8:	7003      	strb	r3, [r0, #0]
   873aa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   873ae:	b662      	cpsie	i
   873b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   873b2:	f1bc 0f00 	cmp.w	ip, #0
   873b6:	d009      	beq.n	873cc <udd_ep_trans_done+0x12c>
		cpu_irq_enable();
   873b8:	f240 2138 	movw	r1, #568	; 0x238
   873bc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   873c0:	f04f 0001 	mov.w	r0, #1
   873c4:	7008      	strb	r0, [r1, #0]
   873c6:	f3bf 8f5f 	dmb	sy
   873ca:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   873cc:	68d9      	ldr	r1, [r3, #12]
   873ce:	6099      	str	r1, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   873d0:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   873d4:	f2c4 000a 	movt	r0, #16394	; 0x400a
   873d8:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
   873dc:	f411 7f80 	tst.w	r1, #256	; 0x100
   873e0:	d02d      	beq.n	8743e <udd_ep_trans_done+0x19e>
		if (ptr_job->b_shortpacket) {
   873e2:	7d18      	ldrb	r0, [r3, #20]
   873e4:	f000 0102 	and.w	r1, r0, #2
   873e8:	b2c8      	uxtb	r0, r1
   873ea:	b340      	cbz	r0, 8743e <udd_ep_trans_done+0x19e>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
   873ec:	f24c 1060 	movw	r0, #49504	; 0xc160
   873f0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   873f4:	f04f 0101 	mov.w	r1, #1
   873f8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			if (Is_udd_write_enabled(ep)) {
   873fc:	f24c 1330 	movw	r3, #49456	; 0xc130
   87400:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87404:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   87408:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   8740c:	d005      	beq.n	8741a <udd_ep_trans_done+0x17a>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
   8740e:	f24c 1390 	movw	r3, #49552	; 0xc190
   87412:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
   8741a:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   8741e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87422:	f04f 0101 	mov.w	r1, #1
   87426:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			udd_enable_endpoint_interrupt(ep);
   8742a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   8742e:	fa03 f202 	lsl.w	r2, r3, r2
   87432:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87436:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8743a:	6182      	str	r2, [r0, #24]
			return;
   8743c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   8743e:	4618      	mov	r0, r3
   87440:	f04f 0100 	mov.w	r1, #0
   87444:	f247 233d 	movw	r3, #29245	; 0x723d
   87448:	f2c0 0308 	movt	r3, #8
   8744c:	4798      	blx	r3
   8744e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00087450 <udd_enable>:
	return true;
}


void udd_enable(void)
{
   87450:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87452:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87456:	b672      	cpsid	i
   87458:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8745c:	f240 2338 	movw	r3, #568	; 0x238
   87460:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87464:	f04f 0200 	mov.w	r2, #0
   87468:	701a      	strb	r2, [r3, #0]
		cpu_irq_restore(flags);
		return;
	}
#else
	// SINGLE DEVICE MODE INITIALIZATION
	pmc_enable_periph_clk(ID_UOTGHS);
   8746a:	f04f 0028 	mov.w	r0, #40	; 0x28
   8746e:	f646 5175 	movw	r1, #28021	; 0x6d75
   87472:	f2c0 0108 	movt	r1, #8
   87476:	4788      	blx	r1
	sysclk_enable_usb();
   87478:	f244 30b5 	movw	r0, #17333	; 0x43b5
   8747c:	f2c0 0008 	movt	r0, #8
   87480:	4780      	blx	r0
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   87482:	f44f 4361 	mov.w	r3, #57600	; 0xe100
   87486:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8748a:	f04f 0250 	mov.w	r2, #80	; 0x50
   8748e:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   87492:	f44f 7180 	mov.w	r1, #256	; 0x100
   87496:	6059      	str	r1, [r3, #4]
	NVIC_SetPriority((IRQn_Type) ID_UOTGHS, UDD_USB_INT_LEVEL);
	NVIC_EnableIRQ((IRQn_Type) ID_UOTGHS);

	// Always authorize asynchrone USB interrupts to exit of sleep mode
	// For SAM USB wake up device except BACKUP mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   87498:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   8749c:	f646 6321 	movw	r3, #28193	; 0x6e21
   874a0:	f2c0 0308 	movt	r3, #8
   874a4:	4798      	blx	r3
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
#else
	// ID pin not used then force device mode
	otg_disable_id_pin();
   874a6:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   874aa:	f2c4 000a 	movt	r0, #16394	; 0x400a
   874ae:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
   874b2:	f022 7180 	bic.w	r1, r2, #16777216	; 0x1000000
   874b6:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
	otg_force_device_mode();
   874ba:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   874be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
   874c2:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
   874c6:	f8d0 1800 	ldr.w	r1, [r0, #2048]	; 0x800
   874ca:	f021 7380 	bic.w	r3, r1, #16777216	; 0x1000000
   874ce:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
#endif
	// Enable USB hardware
	otg_enable_pad();
   874d2:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
   874d6:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
   874da:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
	otg_enable();
   874de:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   874e2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
   874e6:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
   874ea:	6801      	ldr	r1, [r0, #0]
   874ec:	f421 5380 	bic.w	r3, r1, #4096	; 0x1000
   874f0:	6003      	str	r3, [r0, #0]
# ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   874f2:	6802      	ldr	r2, [r0, #0]
   874f4:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
   874f8:	6001      	str	r1, [r0, #0]
	udd_high_speed_disable();
# endif
#endif // USB_DEVICE_LOW_SPEED

	// Check USB clock
	otg_unfreeze_clock();
   874fa:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   874fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
   87502:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   87506:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   8750a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8750e:	f8d0 1804 	ldr.w	r1, [r0, #2052]	; 0x804
   87512:	f411 4f80 	tst.w	r1, #16384	; 0x4000
   87516:	d0fa      	beq.n	8750e <udd_enable+0xbe>

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   87518:	f241 33f8 	movw	r3, #5112	; 0x13f8
   8751c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87520:	7d1a      	ldrb	r2, [r3, #20]
		udd_ep_job[i].stall_requested = false;
   87522:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
   87526:	f36f 0082 	bfc	r0, #2, #1
   8752a:	7518      	strb	r0, [r3, #20]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   8752c:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
		udd_ep_job[i].stall_requested = false;
   87530:	f001 02fe 	and.w	r2, r1, #254	; 0xfe
   87534:	f36f 0282 	bfc	r2, #2, #1
   87538:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   8753c:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
		udd_ep_job[i].stall_requested = false;
   87540:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
   87544:	f36f 0182 	bfc	r1, #2, #1
   87548:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   8754c:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
		udd_ep_job[i].stall_requested = false;
   87550:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
   87554:	f36f 0082 	bfc	r0, #2, #1
   87558:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   8755c:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
		udd_ep_job[i].stall_requested = false;
   87560:	f001 02fe 	and.w	r2, r1, #254	; 0xfe
   87564:	f36f 0282 	bfc	r2, #2, #1
   87568:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
#endif

	otg_ack_vbus_transition();
   8756c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87570:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87574:	f04f 0002 	mov.w	r0, #2
   87578:	f8c3 0808 	str.w	r0, [r3, #2056]	; 0x808
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
   8757c:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
   87580:	f411 6f00 	tst.w	r1, #2048	; 0x800
   87584:	d005      	beq.n	87592 <udd_enable+0x142>
		otg_raise_vbus_transition();
   87586:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   8758a:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8758e:	f8c2 080c 	str.w	r0, [r2, #2060]	; 0x80c
	}
	otg_enable_vbus_interrupt();
   87592:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87596:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8759a:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
   8759e:	f040 0102 	orr.w	r1, r0, #2
   875a2:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	otg_freeze_clock();
   875a6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   875aa:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   875ae:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800

#ifndef UDD_NO_SLEEP_MGR
	if (!udd_b_sleep_initialized) {
   875b2:	f241 33f1 	movw	r3, #5105	; 0x13f1
   875b6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   875ba:	7819      	ldrb	r1, [r3, #0]
   875bc:	bb59      	cbnz	r1, 87616 <udd_enable+0x1c6>
		udd_b_sleep_initialized = true;
   875be:	f241 30f1 	movw	r0, #5105	; 0x13f1
   875c2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   875c6:	f04f 0301 	mov.w	r3, #1
   875ca:	7003      	strb	r3, [r0, #0]
		// Initialize the sleep mode authorized for the USB suspend mode
		udd_b_idle = false;
   875cc:	f04f 0000 	mov.w	r0, #0
   875d0:	f241 31f4 	movw	r1, #5108	; 0x13f4
   875d4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   875d8:	7008      	strb	r0, [r1, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   875da:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   875de:	b672      	cpsid	i
   875e0:	f3bf 8f5f 	dmb	sy
   875e4:	f240 2338 	movw	r3, #568	; 0x238
   875e8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   875ec:	7018      	strb	r0, [r3, #0]
   875ee:	f242 3088 	movw	r0, #9096	; 0x2388
   875f2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   875f6:	78c1      	ldrb	r1, [r0, #3]
   875f8:	f101 0101 	add.w	r1, r1, #1
   875fc:	70c1      	strb	r1, [r0, #3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   875fe:	b98a      	cbnz	r2, 87624 <udd_enable+0x1d4>
		cpu_irq_enable();
   87600:	f240 2338 	movw	r3, #568	; 0x238
   87604:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87608:	f04f 0201 	mov.w	r2, #1
   8760c:	701a      	strb	r2, [r3, #0]
   8760e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87612:	b662      	cpsie	i
   87614:	e006      	b.n	87624 <udd_enable+0x1d4>
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_SUSPEND);
	} else {
		udd_sleep_mode(false); // Enter idle mode
   87616:	f04f 0000 	mov.w	r0, #0
   8761a:	f646 6249 	movw	r2, #28233	; 0x6e49
   8761e:	f2c0 0208 	movt	r2, #8
   87622:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87624:	b94c      	cbnz	r4, 8763a <udd_enable+0x1ea>
		cpu_irq_enable();
   87626:	f240 2038 	movw	r0, #568	; 0x238
   8762a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8762e:	f04f 0101 	mov.w	r1, #1
   87632:	7001      	strb	r1, [r0, #0]
   87634:	f3bf 8f5f 	dmb	sy
   87638:	b662      	cpsie	i
   8763a:	bd10      	pop	{r4, pc}

0008763c <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   8763c:	b570      	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8763e:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87642:	b672      	cpsid	i
   87644:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87648:	f240 2338 	movw	r3, #568	; 0x238
   8764c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87650:	f04f 0200 	mov.w	r2, #0
   87654:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   87656:	f04f 0001 	mov.w	r0, #1
   8765a:	f646 6149 	movw	r1, #28233	; 0x6e49
   8765e:	f2c0 0108 	movt	r1, #8
   87662:	4788      	blx	r1
	otg_unfreeze_clock();
   87664:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87668:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8766c:	f8d0 5800 	ldr.w	r5, [r0, #2048]	; 0x800
   87670:	f425 4680 	bic.w	r6, r5, #16384	; 0x4000
   87674:	f8c0 6800 	str.w	r6, [r0, #2048]	; 0x800

	// This section of clock check can be improved with a chek of
	// USB clock source via sysclk()
	// Check USB clock because the source can be a PLL
	while (!Is_otg_clock_usable());
   87678:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   8767c:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87680:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   87684:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   87688:	d0fa      	beq.n	87680 <udd_attach+0x44>

	// Authorize attach if Vbus is present
	udd_attach_device();
   8768a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8768e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87692:	6819      	ldr	r1, [r3, #0]
   87694:	f421 7080 	bic.w	r0, r1, #256	; 0x100
   87698:	6018      	str	r0, [r3, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   8769a:	f04f 0608 	mov.w	r6, #8
   8769e:	619e      	str	r6, [r3, #24]
	udd_enable_suspend_interrupt();
   876a0:	f04f 0101 	mov.w	r1, #1
   876a4:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
   876a6:	f04f 0210 	mov.w	r2, #16
   876aa:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   876ac:	f04f 0504 	mov.w	r5, #4
   876b0:	619d      	str	r5, [r3, #24]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   876b2:	f04f 0002 	mov.w	r0, #2
   876b6:	6198      	str	r0, [r3, #24]
#endif
	// Reset following interupts flag
	udd_ack_reset();
   876b8:	609e      	str	r6, [r3, #8]
	udd_ack_sof();
   876ba:	609d      	str	r5, [r3, #8]
	udd_ack_msof();
   876bc:	6098      	str	r0, [r3, #8]

	// The first suspend interrupt must be forced
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
   876be:	60d9      	str	r1, [r3, #12]

	udd_ack_wake_up();
   876c0:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   876c2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   876c6:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   876ca:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   876ce:	b93c      	cbnz	r4, 876e0 <udd_attach+0xa4>
		cpu_irq_enable();
   876d0:	f240 2338 	movw	r3, #568	; 0x238
   876d4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   876d8:	7019      	strb	r1, [r3, #0]
   876da:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   876de:	b662      	cpsie	i
   876e0:	bd70      	pop	{r4, r5, r6, pc}
   876e2:	bf00      	nop

000876e4 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
   876e4:	b508      	push	{r3, lr}
	otg_unfreeze_clock();
   876e6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   876ea:	f2c4 030a 	movt	r3, #16394	; 0x400a
   876ee:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   876f2:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   876f6:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800

	// Detach device from the bus
	udd_detach_device();
   876fa:	6819      	ldr	r1, [r3, #0]
   876fc:	f441 7280 	orr.w	r2, r1, #256	; 0x100
   87700:	601a      	str	r2, [r3, #0]
	otg_freeze_clock();
   87702:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
   87706:	f440 4180 	orr.w	r1, r0, #16384	; 0x4000
   8770a:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	udd_sleep_mode(false);
   8770e:	f04f 0000 	mov.w	r0, #0
   87712:	f646 6349 	movw	r3, #28233	; 0x6e49
   87716:	f2c0 0308 	movt	r3, #8
   8771a:	4798      	blx	r3
   8771c:	bd08      	pop	{r3, pc}
   8771e:	bf00      	nop

00087720 <UOTGHS_Handler>:
void udd_interrupt(void);
void udd_interrupt(void)
#else
ISR(UDD_USB_INT_FUN)
#endif
{
   87720:	b570      	push	{r4, r5, r6, lr}
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   87722:	f646 6339 	movw	r3, #28217	; 0x6e39
   87726:	f2c0 0308 	movt	r3, #8
   8772a:	4798      	blx	r3
   8772c:	b990      	cbnz	r0, 87754 <UOTGHS_Handler+0x34>
   8772e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87732:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87736:	6841      	ldr	r1, [r0, #4]
   87738:	f011 0f01 	tst.w	r1, #1
   8773c:	d10a      	bne.n	87754 <UOTGHS_Handler+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8773e:	b672      	cpsid	i
   87740:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   87744:	f240 2038 	movw	r0, #568	; 0x238
   87748:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8774c:	f04f 0200 	mov.w	r2, #0
   87750:	7002      	strb	r2, [r0, #0]
		return;
   87752:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_sof()) {
   87754:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   87758:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8775c:	6853      	ldr	r3, [r2, #4]
   8775e:	f013 0f04 	tst.w	r3, #4
   87762:	d016      	beq.n	87792 <UOTGHS_Handler+0x72>
		udd_ack_sof();
   87764:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   87768:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8776c:	f04f 0004 	mov.w	r0, #4
   87770:	6088      	str	r0, [r1, #8]
		if (Is_udd_full_speed_mode()) {
   87772:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
   87776:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   8777a:	d104      	bne.n	87786 <UOTGHS_Handler+0x66>
			udc_sof_notify();
   8777c:	f645 7395 	movw	r3, #24469	; 0x5f95
   87780:	f2c0 0308 	movt	r3, #8
   87784:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   87786:	f242 11dd 	movw	r1, #8669	; 0x21dd
   8778a:	f2c0 0108 	movt	r1, #8
   8778e:	4788      	blx	r1
#endif
		goto udd_interrupt_sof_end;
   87790:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_msof()) {
   87792:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87796:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8779a:	6841      	ldr	r1, [r0, #4]
   8779c:	f011 0f02 	tst.w	r1, #2
   877a0:	d00c      	beq.n	877bc <UOTGHS_Handler+0x9c>
		udd_ack_msof();
   877a2:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   877a6:	f2c4 000a 	movt	r0, #16394	; 0x400a
   877aa:	f04f 0202 	mov.w	r2, #2
   877ae:	6082      	str	r2, [r0, #8]
		udc_sof_notify();
   877b0:	f645 7395 	movw	r3, #24469	; 0x5f95
   877b4:	f2c0 0308 	movt	r3, #8
   877b8:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   877ba:	bd70      	pop	{r4, r5, r6, pc}


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0)) {
   877bc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   877c0:	f2c4 020a 	movt	r2, #16394	; 0x400a
   877c4:	6853      	ldr	r3, [r2, #4]
   877c6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   877ca:	f000 8459 	beq.w	88080 <UOTGHS_Handler+0x960>
	}

	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   877ce:	f24c 2020 	movw	r0, #49696	; 0xc220
   877d2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   877d6:	f04f 0110 	mov.w	r1, #16
   877da:	6001      	str	r1, [r0, #0]
	udd_disable_nak_out_interrupt(0);
   877dc:	f04f 0208 	mov.w	r2, #8
   877e0:	6002      	str	r2, [r0, #0]

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
   877e2:	f24c 1330 	movw	r3, #49456	; 0xc130
   877e6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   877ea:	6818      	ldr	r0, [r3, #0]
   877ec:	f010 0f04 	tst.w	r0, #4
   877f0:	f000 80d9 	beq.w	879a6 <UOTGHS_Handler+0x286>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   877f4:	f241 4170 	movw	r1, #5232	; 0x1470
   877f8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   877fc:	780a      	ldrb	r2, [r1, #0]
   877fe:	b14a      	cbz	r2, 87814 <UOTGHS_Handler+0xf4>
		// May be a hidden DATA or ZLP phase or protocol abort
		udd_ctrl_endofrequest();
   87800:	f646 70d9 	movw	r0, #28633	; 0x6fd9
   87804:	f2c0 0008 	movt	r0, #8
   87808:	4780      	blx	r0

		// Reinitializes control endpoint management
		udd_ctrl_init();
   8780a:	f646 63f5 	movw	r3, #28405	; 0x6ef5
   8780e:	f2c0 0308 	movt	r3, #8
   87812:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   87814:	f24c 1130 	movw	r1, #49456	; 0xc130
   87818:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8781c:	680a      	ldr	r2, [r1, #0]
   8781e:	f3c2 500a 	ubfx	r0, r2, #20, #11
   87822:	2808      	cmp	r0, #8
   87824:	d00c      	beq.n	87840 <UOTGHS_Handler+0x120>
		udd_ctrl_stall_data();
   87826:	f646 7159 	movw	r1, #28505	; 0x6f59
   8782a:	f2c0 0108 	movt	r1, #8
   8782e:	4788      	blx	r1
		udd_ack_setup_received(0);
   87830:	f24c 1360 	movw	r3, #49504	; 0xc160
   87834:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87838:	f04f 0204 	mov.w	r2, #4
   8783c:	601a      	str	r2, [r3, #0]
   8783e:	bd70      	pop	{r4, r5, r6, pc}
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   87840:	f04f 0300 	mov.w	r3, #0
   87844:	f2c2 0318 	movt	r3, #8216	; 0x2018
   87848:	7819      	ldrb	r1, [r3, #0]
   8784a:	f242 3090 	movw	r0, #9104	; 0x2390
   8784e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87852:	7001      	strb	r1, [r0, #0]
   87854:	f04f 0201 	mov.w	r2, #1
   87858:	f2c2 0218 	movt	r2, #8216	; 0x2018
   8785c:	7813      	ldrb	r3, [r2, #0]
   8785e:	7043      	strb	r3, [r0, #1]
   87860:	f04f 0102 	mov.w	r1, #2
   87864:	f2c2 0118 	movt	r1, #8216	; 0x2018
   87868:	780a      	ldrb	r2, [r1, #0]
   8786a:	7082      	strb	r2, [r0, #2]
   8786c:	f04f 0303 	mov.w	r3, #3
   87870:	f2c2 0318 	movt	r3, #8216	; 0x2018
   87874:	7819      	ldrb	r1, [r3, #0]
   87876:	70c1      	strb	r1, [r0, #3]
   87878:	f04f 0204 	mov.w	r2, #4
   8787c:	f2c2 0218 	movt	r2, #8216	; 0x2018
   87880:	7813      	ldrb	r3, [r2, #0]
   87882:	7103      	strb	r3, [r0, #4]
   87884:	f04f 0105 	mov.w	r1, #5
   87888:	f2c2 0118 	movt	r1, #8216	; 0x2018
   8788c:	780a      	ldrb	r2, [r1, #0]
   8788e:	7142      	strb	r2, [r0, #5]
   87890:	f04f 0306 	mov.w	r3, #6
   87894:	f2c2 0318 	movt	r3, #8216	; 0x2018
   87898:	7819      	ldrb	r1, [r3, #0]
   8789a:	7181      	strb	r1, [r0, #6]
   8789c:	f04f 0207 	mov.w	r2, #7
   878a0:	f2c2 0218 	movt	r2, #8216	; 0x2018
   878a4:	7813      	ldrb	r3, [r2, #0]
   878a6:	71c3      	strb	r3, [r0, #7]
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   878a8:	f645 70dd 	movw	r0, #24541	; 0x5fdd
   878ac:	f2c0 0008 	movt	r0, #8
   878b0:	4780      	blx	r0
   878b2:	b960      	cbnz	r0, 878ce <UOTGHS_Handler+0x1ae>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
   878b4:	f646 7259 	movw	r2, #28505	; 0x6f59
   878b8:	f2c0 0208 	movt	r2, #8
   878bc:	4790      	blx	r2
		udd_ack_setup_received(0);
   878be:	f24c 1360 	movw	r3, #49504	; 0xc160
   878c2:	f2c4 030a 	movt	r3, #16394	; 0x400a
   878c6:	f04f 0004 	mov.w	r0, #4
   878ca:	6018      	str	r0, [r3, #0]
   878cc:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}
	udd_ack_setup_received(0);
   878ce:	f24c 1160 	movw	r1, #49504	; 0xc160
   878d2:	f2c4 010a 	movt	r1, #16394	; 0x400a
   878d6:	f04f 0204 	mov.w	r2, #4
   878da:	600a      	str	r2, [r1, #0]

	if (Udd_setup_is_in()) {
   878dc:	f242 3390 	movw	r3, #9104	; 0x2390
   878e0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   878e4:	f993 0000 	ldrsb.w	r0, [r3]
   878e8:	2800      	cmp	r0, #0
   878ea:	da18      	bge.n	8791e <UOTGHS_Handler+0x1fe>
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   878ec:	f04f 0000 	mov.w	r0, #0
   878f0:	f241 31f2 	movw	r1, #5106	; 0x13f2
   878f4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   878f8:	8008      	strh	r0, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   878fa:	f241 4272 	movw	r2, #5234	; 0x1472
   878fe:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87902:	8010      	strh	r0, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   87904:	f241 4370 	movw	r3, #5232	; 0x1470
   87908:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8790c:	f04f 0002 	mov.w	r0, #2
   87910:	7018      	strb	r0, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   87912:	f646 71ed 	movw	r1, #28653	; 0x6fed
   87916:	f2c0 0108 	movt	r1, #8
   8791a:	4788      	blx	r1
   8791c:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
   8791e:	f242 3190 	movw	r1, #9104	; 0x2390
   87922:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87926:	88ca      	ldrh	r2, [r1, #6]
   87928:	b92a      	cbnz	r2, 87936 <UOTGHS_Handler+0x216>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   8792a:	f646 7379 	movw	r3, #28537	; 0x6f79
   8792e:	f2c0 0308 	movt	r3, #8
   87932:	4798      	blx	r3
   87934:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   87936:	f04f 0300 	mov.w	r3, #0
   8793a:	4618      	mov	r0, r3
   8793c:	f241 31f2 	movw	r1, #5106	; 0x13f2
   87940:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87944:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   87946:	f241 4272 	movw	r2, #5234	; 0x1472
   8794a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8794e:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   87950:	f241 4370 	movw	r3, #5232	; 0x1470
   87954:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87958:	f04f 0101 	mov.w	r1, #1
   8795c:	7019      	strb	r1, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   8795e:	f24c 1360 	movw	r3, #49504	; 0xc160
   87962:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87966:	f04f 0210 	mov.w	r2, #16
   8796a:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8796c:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87970:	b672      	cpsid	i
   87972:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87976:	f240 2338 	movw	r3, #568	; 0x238
   8797a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8797e:	7018      	strb	r0, [r3, #0]
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
   87980:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   87984:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87988:	6002      	str	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8798a:	2900      	cmp	r1, #0
   8798c:	f040 8471 	bne.w	88272 <UOTGHS_Handler+0xb52>
		cpu_irq_enable();
   87990:	f240 2138 	movw	r1, #568	; 0x238
   87994:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87998:	f04f 0201 	mov.w	r2, #1
   8799c:	700a      	strb	r2, [r1, #0]
   8799e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   879a2:	b662      	cpsie	i
   879a4:	bd70      	pop	{r4, r5, r6, pc}
		dbg_print("stup ");
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   879a6:	f24c 1130 	movw	r1, #49456	; 0xc130
   879aa:	f2c4 010a 	movt	r1, #16394	; 0x400a
   879ae:	680a      	ldr	r2, [r1, #0]
   879b0:	f012 0f01 	tst.w	r2, #1
   879b4:	d00d      	beq.n	879d2 <UOTGHS_Handler+0x2b2>
   879b6:	f24c 13c0 	movw	r3, #49600	; 0xc1c0
   879ba:	f2c4 030a 	movt	r3, #16394	; 0x400a
   879be:	6818      	ldr	r0, [r3, #0]
   879c0:	f010 0f01 	tst.w	r0, #1
   879c4:	d005      	beq.n	879d2 <UOTGHS_Handler+0x2b2>
		dbg_print("in ");
		// IN packet sent
		udd_ctrl_in_sent();
   879c6:	f646 73ed 	movw	r3, #28653	; 0x6fed
   879ca:	f2c0 0308 	movt	r3, #8
   879ce:	4798      	blx	r3
   879d0:	bd70      	pop	{r4, r5, r6, pc}
		return true;
	}
	if (Is_udd_out_received(0)) {
   879d2:	f24c 1130 	movw	r1, #49456	; 0xc130
   879d6:	f2c4 010a 	movt	r1, #16394	; 0x400a
   879da:	680a      	ldr	r2, [r1, #0]
   879dc:	f012 0f02 	tst.w	r2, #2
   879e0:	f000 80de 	beq.w	87ba0 <UOTGHS_Handler+0x480>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   879e4:	f241 4070 	movw	r0, #5232	; 0x1470
   879e8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   879ec:	7801      	ldrb	r1, [r0, #0]
   879ee:	2901      	cmp	r1, #1
   879f0:	d014      	beq.n	87a1c <UOTGHS_Handler+0x2fc>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   879f2:	2902      	cmp	r1, #2
   879f4:	d001      	beq.n	879fa <UOTGHS_Handler+0x2da>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   879f6:	2904      	cmp	r1, #4
   879f8:	d105      	bne.n	87a06 <UOTGHS_Handler+0x2e6>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
   879fa:	f646 72d9 	movw	r2, #28633	; 0x6fd9
   879fe:	f2c0 0208 	movt	r2, #8
   87a02:	4790      	blx	r2
   87a04:	e004      	b.n	87a10 <UOTGHS_Handler+0x2f0>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   87a06:	f646 7159 	movw	r1, #28505	; 0x6f59
   87a0a:	f2c0 0108 	movt	r1, #8
   87a0e:	4788      	blx	r1
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   87a10:	f646 60f5 	movw	r0, #28405	; 0x6ef5
   87a14:	f2c0 0008 	movt	r0, #8
   87a18:	4780      	blx	r0
   87a1a:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   87a1c:	f24c 1430 	movw	r4, #49456	; 0xc130
   87a20:	f2c4 040a 	movt	r4, #16394	; 0x400a
   87a24:	6826      	ldr	r6, [r4, #0]
   87a26:	f3c6 540a 	ubfx	r4, r6, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   87a2a:	f242 3390 	movw	r3, #9104	; 0x2390
   87a2e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87a32:	8998      	ldrh	r0, [r3, #12]
   87a34:	f241 4272 	movw	r2, #5234	; 0x1472
   87a38:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87a3c:	8816      	ldrh	r6, [r2, #0]
   87a3e:	1931      	adds	r1, r6, r4
   87a40:	4288      	cmp	r0, r1
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   87a42:	bfae      	itee	ge
   87a44:	b2a4      	uxthge	r4, r4
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   87a46:	ebc6 0000 	rsblt	r0, r6, r0
   87a4a:	b284      	uxthlt	r4, r0
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   87a4c:	f242 3390 	movw	r3, #9104	; 0x2390
   87a50:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87a54:	6898      	ldr	r0, [r3, #8]
   87a56:	1982      	adds	r2, r0, r6
	for (i = 0; i < nb_data; i++) {
   87a58:	b3b4      	cbz	r4, 87ac8 <UOTGHS_Handler+0x3a8>
   87a5a:	f04f 0300 	mov.w	r3, #0
   87a5e:	f2c2 0318 	movt	r3, #8216	; 0x2018
   87a62:	ea6f 0103 	mvn.w	r1, r3
   87a66:	1908      	adds	r0, r1, r4
   87a68:	f000 0101 	and.w	r1, r0, #1
		*ptr_dest++ = *ptr_src++;
   87a6c:	f813 0b01 	ldrb.w	r0, [r3], #1
   87a70:	f802 0b01 	strb.w	r0, [r2], #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   87a74:	b2d8      	uxtb	r0, r3
   87a76:	42a0      	cmp	r0, r4
   87a78:	f0c0 83fc 	bcc.w	88274 <UOTGHS_Handler+0xb54>
   87a7c:	e00e      	b.n	87a9c <UOTGHS_Handler+0x37c>
		*ptr_dest++ = *ptr_src++;
   87a7e:	4618      	mov	r0, r3
   87a80:	f810 5b01 	ldrb.w	r5, [r0], #1
   87a84:	4611      	mov	r1, r2
   87a86:	f801 5b01 	strb.w	r5, [r1], #1
   87a8a:	785d      	ldrb	r5, [r3, #1]
   87a8c:	f100 0301 	add.w	r3, r0, #1
   87a90:	7055      	strb	r5, [r2, #1]
   87a92:	f101 0201 	add.w	r2, r1, #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   87a96:	b2d8      	uxtb	r0, r3
   87a98:	42a0      	cmp	r0, r4
   87a9a:	d3f0      	bcc.n	87a7e <UOTGHS_Handler+0x35e>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   87a9c:	19a6      	adds	r6, r4, r6
   87a9e:	b2b6      	uxth	r6, r6
   87aa0:	f241 4272 	movw	r2, #5234	; 0x1472
   87aa4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87aa8:	8016      	strh	r6, [r2, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   87aaa:	2c40      	cmp	r4, #64	; 0x40
   87aac:	d10c      	bne.n	87ac8 <UOTGHS_Handler+0x3a8>
			|| (udd_g_ctrlreq.req.wLength <=
   87aae:	f242 3390 	movw	r3, #9104	; 0x2390
   87ab2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87ab6:	88d9      	ldrh	r1, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
   87ab8:	f241 30f2 	movw	r0, #5106	; 0x13f2
   87abc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87ac0:	8802      	ldrh	r2, [r0, #0]
   87ac2:	1993      	adds	r3, r2, r6
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
   87ac4:	4299      	cmp	r1, r3
   87ac6:	dc22      	bgt.n	87b0e <UOTGHS_Handler+0x3ee>
					(udd_ctrl_prev_payload_buf_cnt +
							udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   87ac8:	f242 3190 	movw	r1, #9104	; 0x2390
   87acc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87ad0:	818e      	strh	r6, [r1, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   87ad2:	694a      	ldr	r2, [r1, #20]
   87ad4:	b172      	cbz	r2, 87af4 <UOTGHS_Handler+0x3d4>
			if (!udd_g_ctrlreq.over_under_run()) {
   87ad6:	4790      	blx	r2
   87ad8:	b960      	cbnz	r0, 87af4 <UOTGHS_Handler+0x3d4>
				// Stall ZLP
				udd_ctrl_stall_data();
   87ada:	f646 7259 	movw	r2, #28505	; 0x6f59
   87ade:	f2c0 0208 	movt	r2, #8
   87ae2:	4790      	blx	r2
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   87ae4:	f24c 1060 	movw	r0, #49504	; 0xc160
   87ae8:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87aec:	f04f 0302 	mov.w	r3, #2
   87af0:	6003      	str	r3, [r0, #0]
   87af2:	bd70      	pop	{r4, r5, r6, pc}
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   87af4:	f24c 1060 	movw	r0, #49504	; 0xc160
   87af8:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87afc:	f04f 0302 	mov.w	r3, #2
   87b00:	6003      	str	r3, [r0, #0]
		udd_ctrl_send_zlp_in();
   87b02:	f646 7179 	movw	r1, #28537	; 0x6f79
   87b06:	f2c0 0108 	movt	r1, #8
   87b0a:	4788      	blx	r1
   87b0c:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   87b0e:	49ae      	ldr	r1, [pc, #696]	; (87dc8 <UOTGHS_Handler+0x6a8>)
   87b10:	8988      	ldrh	r0, [r1, #12]
   87b12:	42b0      	cmp	r0, r6
   87b14:	d121      	bne.n	87b5a <UOTGHS_Handler+0x43a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   87b16:	4aac      	ldr	r2, [pc, #688]	; (87dc8 <UOTGHS_Handler+0x6a8>)
   87b18:	6953      	ldr	r3, [r2, #20]
   87b1a:	b94b      	cbnz	r3, 87b30 <UOTGHS_Handler+0x410>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
   87b1c:	4aab      	ldr	r2, [pc, #684]	; (87dcc <UOTGHS_Handler+0x6ac>)
   87b1e:	4790      	blx	r2
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   87b20:	f24c 1060 	movw	r0, #49504	; 0xc160
   87b24:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87b28:	f04f 0302 	mov.w	r3, #2
   87b2c:	6003      	str	r3, [r0, #0]
   87b2e:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   87b30:	4798      	blx	r3
   87b32:	b948      	cbnz	r0, 87b48 <UOTGHS_Handler+0x428>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   87b34:	48a5      	ldr	r0, [pc, #660]	; (87dcc <UOTGHS_Handler+0x6ac>)
   87b36:	4780      	blx	r0
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   87b38:	f24c 1360 	movw	r3, #49504	; 0xc160
   87b3c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87b40:	f04f 0102 	mov.w	r1, #2
   87b44:	6019      	str	r1, [r3, #0]
   87b46:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   87b48:	4aa1      	ldr	r2, [pc, #644]	; (87dd0 <UOTGHS_Handler+0x6b0>)
   87b4a:	4ba2      	ldr	r3, [pc, #648]	; (87dd4 <UOTGHS_Handler+0x6b4>)
   87b4c:	8818      	ldrh	r0, [r3, #0]
   87b4e:	8811      	ldrh	r1, [r2, #0]
   87b50:	1840      	adds	r0, r0, r1
   87b52:	8010      	strh	r0, [r2, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   87b54:	f04f 0200 	mov.w	r2, #0
   87b58:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   87b5a:	f24c 1360 	movw	r3, #49504	; 0xc160
   87b5e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87b62:	f04f 0102 	mov.w	r1, #2
   87b66:	6019      	str	r1, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   87b68:	f04f 0210 	mov.w	r2, #16
   87b6c:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87b6e:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87b72:	b672      	cpsid	i
   87b74:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87b78:	4b97      	ldr	r3, [pc, #604]	; (87dd8 <UOTGHS_Handler+0x6b8>)
   87b7a:	f04f 0000 	mov.w	r0, #0
   87b7e:	7018      	strb	r0, [r3, #0]
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
   87b80:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   87b84:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87b88:	601a      	str	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87b8a:	2900      	cmp	r1, #0
   87b8c:	f040 8371 	bne.w	88272 <UOTGHS_Handler+0xb52>
		cpu_irq_enable();
   87b90:	4991      	ldr	r1, [pc, #580]	; (87dd8 <UOTGHS_Handler+0x6b8>)
   87b92:	f04f 0201 	mov.w	r2, #1
   87b96:	700a      	strb	r2, [r1, #0]
   87b98:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87b9c:	b662      	cpsie	i
   87b9e:	bd70      	pop	{r4, r5, r6, pc}
		dbg_print("out ");
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
   87ba0:	f24c 1330 	movw	r3, #49456	; 0xc130
   87ba4:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87ba8:	6818      	ldr	r0, [r3, #0]
   87baa:	f010 0f08 	tst.w	r0, #8
   87bae:	d01f      	beq.n	87bf0 <UOTGHS_Handler+0x4d0>
		dbg_print("nako ");
		// Overflow on OUT packet
		udd_ack_nak_out(0);
   87bb0:	f24c 1060 	movw	r0, #49504	; 0xc160
   87bb4:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87bb8:	f04f 0108 	mov.w	r1, #8
   87bbc:	6001      	str	r1, [r0, #0]
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
   87bbe:	f24c 1230 	movw	r2, #49456	; 0xc130
   87bc2:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87bc6:	6813      	ldr	r3, [r2, #0]
   87bc8:	f013 0f01 	tst.w	r3, #1
   87bcc:	f040 8351 	bne.w	88272 <UOTGHS_Handler+0xb52>
		return; // Overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   87bd0:	f241 4070 	movw	r0, #5232	; 0x1470
   87bd4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87bd8:	7801      	ldrb	r1, [r0, #0]
   87bda:	2903      	cmp	r1, #3
   87bdc:	f040 8349 	bne.w	88272 <UOTGHS_Handler+0xb52>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   87be0:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   87be4:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87be8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   87bec:	601a      	str	r2, [r3, #0]
   87bee:	bd70      	pop	{r4, r5, r6, pc}
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
   87bf0:	f24c 1130 	movw	r1, #49456	; 0xc130
   87bf4:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87bf8:	680a      	ldr	r2, [r1, #0]
   87bfa:	f012 0f10 	tst.w	r2, #16
   87bfe:	f000 823f 	beq.w	88080 <UOTGHS_Handler+0x960>
		dbg_print("naki ");
		// Underflow on IN packet
		udd_ack_nak_in(0);
   87c02:	f24c 1360 	movw	r3, #49504	; 0xc160
   87c06:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87c0a:	f04f 0010 	mov.w	r0, #16
   87c0e:	6018      	str	r0, [r3, #0]
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
   87c10:	f24c 1130 	movw	r1, #49456	; 0xc130
   87c14:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87c18:	680a      	ldr	r2, [r1, #0]
   87c1a:	f012 0f02 	tst.w	r2, #2
   87c1e:	f040 8328 	bne.w	88272 <UOTGHS_Handler+0xb52>
		return; // Underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   87c22:	f241 4370 	movw	r3, #5232	; 0x1470
   87c26:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87c2a:	7818      	ldrb	r0, [r3, #0]
   87c2c:	2801      	cmp	r0, #1
   87c2e:	d105      	bne.n	87c3c <UOTGHS_Handler+0x51c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   87c30:	f646 7379 	movw	r3, #28537	; 0x6f79
   87c34:	f2c0 0308 	movt	r3, #8
   87c38:	4798      	blx	r3
   87c3a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   87c3c:	2804      	cmp	r0, #4
   87c3e:	f040 8318 	bne.w	88272 <UOTGHS_Handler+0xb52>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   87c42:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   87c46:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87c4a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   87c4e:	600a      	str	r2, [r1, #0]
   87c50:	bd70      	pop	{r4, r5, r6, pc}
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   87c52:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87c56:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87c5a:	685a      	ldr	r2, [r3, #4]
   87c5c:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   87c60:	d03c      	beq.n	87cdc <UOTGHS_Handler+0x5bc>
   87c62:	f04f 0005 	mov.w	r0, #5
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   87c66:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87c6a:	495c      	ldr	r1, [pc, #368]	; (87ddc <UOTGHS_Handler+0x6bc>)
   87c6c:	e019      	b.n	87ca2 <UOTGHS_Handler+0x582>

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   87c6e:	f04f 0001 	mov.w	r0, #1
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   87c72:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87c76:	f241 31f8 	movw	r1, #5112	; 0x13f8
   87c7a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87c7e:	e010      	b.n	87ca2 <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   87c80:	f04f 0002 	mov.w	r0, #2
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   87c84:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87c88:	4955      	ldr	r1, [pc, #340]	; (87de0 <UOTGHS_Handler+0x6c0>)
   87c8a:	e00a      	b.n	87ca2 <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   87c8c:	f04f 0003 	mov.w	r0, #3
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   87c90:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87c94:	4953      	ldr	r1, [pc, #332]	; (87de4 <UOTGHS_Handler+0x6c4>)
   87c96:	e004      	b.n	87ca2 <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   87c98:	f04f 0004 	mov.w	r0, #4
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   87c9c:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87ca0:	4951      	ldr	r1, [pc, #324]	; (87de8 <UOTGHS_Handler+0x6c8>)
#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   87ca2:	f44f 4243 	mov.w	r2, #49920	; 0xc300
   87ca6:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87caa:	eb02 1300 	add.w	r3, r2, r0, lsl #4
   87cae:	68da      	ldr	r2, [r3, #12]
   87cb0:	f012 0f01 	tst.w	r2, #1
   87cb4:	f040 82dd 	bne.w	88272 <UOTGHS_Handler+0xb52>
					& UOTGHS_DEVDMASTATUS_CHANN_ENB) {
				return true; // Ignore EOT_STA interrupt
			}
			dbg_print("dma%x: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   87cb8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   87cbc:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87cc0:	6154      	str	r4, [r2, #20]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   87cc2:	68db      	ldr	r3, [r3, #12]
					UOTGHS_DEVDMASTATUS_BUFF_COUNT_Msk)
					>> UOTGHS_DEVDMASTATUS_BUFF_COUNT_Pos;
			if (nb_remaining) {
   87cc4:	0c1b      	lsrs	r3, r3, #16
   87cc6:	d003      	beq.n	87cd0 <UOTGHS_Handler+0x5b0>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   87cc8:	68ca      	ldr	r2, [r1, #12]
   87cca:	1ad3      	subs	r3, r2, r3
   87ccc:	60cb      	str	r3, [r1, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   87cce:	608b      	str	r3, [r1, #8]
			}
			udd_ep_trans_done(ep);
   87cd0:	f247 21a1 	movw	r1, #29345	; 0x72a1
   87cd4:	f2c0 0108 	movt	r1, #8
   87cd8:	4788      	blx	r1
   87cda:	bd70      	pop	{r4, r5, r6, pc}
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   87cdc:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87ce0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87ce4:	6901      	ldr	r1, [r0, #16]
   87ce6:	f411 3f00 	tst.w	r1, #131072	; 0x20000
   87cea:	f000 80a9 	beq.w	87e40 <UOTGHS_Handler+0x720>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87cee:	f24c 13d4 	movw	r3, #49620	; 0xc1d4
   87cf2:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87cf6:	681a      	ldr	r2, [r3, #0]
   87cf8:	f012 0f01 	tst.w	r2, #1
   87cfc:	d03b      	beq.n	87d76 <UOTGHS_Handler+0x656>
					&& Is_udd_in_send(ep)) {
   87cfe:	f24c 1044 	movw	r0, #49476	; 0xc144
   87d02:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87d06:	6801      	ldr	r1, [r0, #0]
   87d08:	f011 0f01 	tst.w	r1, #1
   87d0c:	d033      	beq.n	87d76 <UOTGHS_Handler+0x656>
   87d0e:	f04f 0205 	mov.w	r2, #5
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87d12:	f04f 0314 	mov.w	r3, #20
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87d16:	4831      	ldr	r0, [pc, #196]	; (87ddc <UOTGHS_Handler+0x6bc>)
   87d18:	e016      	b.n	87d48 <UOTGHS_Handler+0x628>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   87d1a:	f04f 0201 	mov.w	r2, #1
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87d1e:	f04f 0304 	mov.w	r3, #4
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87d22:	4832      	ldr	r0, [pc, #200]	; (87dec <UOTGHS_Handler+0x6cc>)
   87d24:	e010      	b.n	87d48 <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   87d26:	f04f 0202 	mov.w	r2, #2
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87d2a:	f04f 0308 	mov.w	r3, #8
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87d2e:	482c      	ldr	r0, [pc, #176]	; (87de0 <UOTGHS_Handler+0x6c0>)
   87d30:	e00a      	b.n	87d48 <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   87d32:	f04f 0203 	mov.w	r2, #3
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87d36:	f04f 030c 	mov.w	r3, #12
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87d3a:	482a      	ldr	r0, [pc, #168]	; (87de4 <UOTGHS_Handler+0x6c4>)
   87d3c:	e004      	b.n	87d48 <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   87d3e:	f04f 0204 	mov.w	r2, #4
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87d42:	f04f 0310 	mov.w	r3, #16
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87d46:	4828      	ldr	r0, [pc, #160]	; (87de8 <UOTGHS_Handler+0x6c8>)
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
   87d48:	f24c 2120 	movw	r1, #49696	; 0xc220
   87d4c:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87d50:	f04f 0501 	mov.w	r5, #1
   87d54:	505d      	str	r5, [r3, r1]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
   87d56:	f24c 1460 	movw	r4, #49504	; 0xc160
   87d5a:	f2c4 040a 	movt	r4, #16394	; 0x400a
   87d5e:	511d      	str	r5, [r3, r4]
				udd_ack_fifocon(ep);
   87d60:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   87d64:	505c      	str	r4, [r3, r1]
				udd_ep_finish_job(ptr_job, false, ep);
   87d66:	f04f 0100 	mov.w	r1, #0
   87d6a:	f247 233d 	movw	r3, #29245	; 0x723d
   87d6e:	f2c0 0308 	movt	r3, #8
   87d72:	4798      	blx	r3
   87d74:	bd70      	pop	{r4, r5, r6, pc}
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   87d76:	f24c 13d4 	movw	r3, #49620	; 0xc1d4
   87d7a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87d7e:	681a      	ldr	r2, [r3, #0]
   87d80:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   87d84:	d05c      	beq.n	87e40 <UOTGHS_Handler+0x720>
					&& (0 == udd_nb_busy_bank(ep))) {
   87d86:	f24c 1044 	movw	r0, #49476	; 0xc144
   87d8a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87d8e:	6801      	ldr	r1, [r0, #0]
   87d90:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   87d94:	d154      	bne.n	87e40 <UOTGHS_Handler+0x720>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87d96:	f04f 0314 	mov.w	r3, #20
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   87d9a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87d9e:	4a0f      	ldr	r2, [pc, #60]	; (87ddc <UOTGHS_Handler+0x6bc>)
   87da0:	e02b      	b.n	87dfa <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87da2:	f04f 0304 	mov.w	r3, #4
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   87da6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87daa:	4a10      	ldr	r2, [pc, #64]	; (87dec <UOTGHS_Handler+0x6cc>)
   87dac:	e025      	b.n	87dfa <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87dae:	f04f 0308 	mov.w	r3, #8
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   87db2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87db6:	4a0a      	ldr	r2, [pc, #40]	; (87de0 <UOTGHS_Handler+0x6c0>)
   87db8:	e01f      	b.n	87dfa <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87dba:	f04f 030c 	mov.w	r3, #12
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   87dbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87dc2:	4a08      	ldr	r2, [pc, #32]	; (87de4 <UOTGHS_Handler+0x6c4>)
   87dc4:	e019      	b.n	87dfa <UOTGHS_Handler+0x6da>
   87dc6:	bf00      	nop
   87dc8:	20072390 	.word	0x20072390
   87dcc:	00086f59 	.word	0x00086f59
   87dd0:	200713f2 	.word	0x200713f2
   87dd4:	20071472 	.word	0x20071472
   87dd8:	20070238 	.word	0x20070238
   87ddc:	20071458 	.word	0x20071458
   87de0:	20071410 	.word	0x20071410
   87de4:	20071428 	.word	0x20071428
   87de8:	20071440 	.word	0x20071440
   87dec:	200713f8 	.word	0x200713f8
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87df0:	f04f 0310 	mov.w	r3, #16
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   87df4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87df8:	4abf      	ldr	r2, [pc, #764]	; (880f8 <UOTGHS_Handler+0x9d8>)
			}
			if (Is_udd_bank_interrupt_enabled(ep)
					&& (0 == udd_nb_busy_bank(ep))) {
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   87dfa:	f24c 2020 	movw	r0, #49696	; 0xc220
   87dfe:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87e02:	f44f 5480 	mov.w	r4, #4096	; 0x1000
   87e06:	501c      	str	r4, [r3, r0]
				udd_disable_endpoint_interrupt(ep);
   87e08:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87e0c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87e10:	6141      	str	r1, [r0, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
   87e12:	7d11      	ldrb	r1, [r2, #20]
   87e14:	f36f 0182 	bfc	r1, #2, #1
   87e18:	7511      	strb	r1, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   87e1a:	f44f 4241 	mov.w	r2, #49408	; 0xc100
   87e1e:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87e22:	5898      	ldr	r0, [r3, r2]
   87e24:	f420 7100 	bic.w	r1, r0, #512	; 0x200
   87e28:	5099      	str	r1, [r3, r2]
				udd_enable_stall_handshake(ep);
   87e2a:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   87e2e:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87e32:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   87e36:	5098      	str	r0, [r3, r2]
				udd_reset_data_toggle(ep);
   87e38:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   87e3c:	5099      	str	r1, [r3, r2]
   87e3e:	bd70      	pop	{r4, r5, r6, pc}
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   87e40:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87e44:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87e48:	685a      	ldr	r2, [r3, #4]
   87e4a:	f012 0f08 	tst.w	r2, #8
   87e4e:	d07a      	beq.n	87f46 <UOTGHS_Handler+0x826>
		udd_ack_reset();
   87e50:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   87e54:	f2c4 040a 	movt	r4, #16394	; 0x400a
   87e58:	f04f 0508 	mov.w	r5, #8
   87e5c:	60a5      	str	r5, [r4, #8]
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   87e5e:	f241 36f8 	movw	r6, #5112	; 0x13f8
   87e62:	f2c2 0607 	movt	r6, #8199	; 0x2007
   87e66:	4630      	mov	r0, r6
   87e68:	f04f 0101 	mov.w	r1, #1
   87e6c:	460a      	mov	r2, r1
   87e6e:	f247 253d 	movw	r5, #29245	; 0x723d
   87e72:	f2c0 0508 	movt	r5, #8
   87e76:	47a8      	blx	r5
   87e78:	f106 0018 	add.w	r0, r6, #24
   87e7c:	f04f 0101 	mov.w	r1, #1
   87e80:	f04f 0202 	mov.w	r2, #2
   87e84:	47a8      	blx	r5
   87e86:	f106 0030 	add.w	r0, r6, #48	; 0x30
   87e8a:	f04f 0101 	mov.w	r1, #1
   87e8e:	f04f 0203 	mov.w	r2, #3
   87e92:	47a8      	blx	r5
   87e94:	f106 0048 	add.w	r0, r6, #72	; 0x48
   87e98:	f04f 0101 	mov.w	r1, #1
   87e9c:	f04f 0204 	mov.w	r2, #4
   87ea0:	47a8      	blx	r5
   87ea2:	f106 0060 	add.w	r0, r6, #96	; 0x60
   87ea6:	f04f 0101 	mov.w	r1, #1
   87eaa:	f04f 0205 	mov.w	r2, #5
   87eae:	47a8      	blx	r5
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
   87eb0:	f645 7331 	movw	r3, #24369	; 0x5f31
   87eb4:	f2c0 0308 	movt	r3, #8
   87eb8:	4798      	blx	r3
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   87eba:	6822      	ldr	r2, [r4, #0]
   87ebc:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   87ec0:	6021      	str	r1, [r4, #0]
	udd_enable_address();
   87ec2:	6820      	ldr	r0, [r4, #0]
   87ec4:	f040 0380 	orr.w	r3, r0, #128	; 0x80
   87ec8:	6023      	str	r3, [r4, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   87eca:	f44f 4141 	mov.w	r1, #49408	; 0xc100
   87ece:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87ed2:	680a      	ldr	r2, [r1, #0]
   87ed4:	f422 50cb 	bic.w	r0, r2, #6496	; 0x1960
   87ed8:	f020 031c 	bic.w	r3, r0, #28
   87edc:	f043 0230 	orr.w	r2, r3, #48	; 0x30
   87ee0:	600a      	str	r2, [r1, #0]
		USB_EP_TYPE_CONTROL,
		0,
		USB_DEVICE_EP_CTRL_SIZE,
		UOTGHS_DEVEPTCFG_EPBK_1_BANK);

	udd_allocate_memory(0);
   87ee2:	6808      	ldr	r0, [r1, #0]
   87ee4:	f040 0302 	orr.w	r3, r0, #2
   87ee8:	600b      	str	r3, [r1, #0]
	udd_enable_endpoint(0);
   87eea:	69e1      	ldr	r1, [r4, #28]
   87eec:	f041 0201 	orr.w	r2, r1, #1
   87ef0:	61e2      	str	r2, [r4, #28]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87ef2:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87ef6:	b672      	cpsid	i
   87ef8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87efc:	f240 2338 	movw	r3, #568	; 0x238
   87f00:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87f04:	f04f 0100 	mov.w	r1, #0
   87f08:	7019      	strb	r1, [r3, #0]
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
   87f0a:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   87f0e:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87f12:	f04f 0304 	mov.w	r3, #4
   87f16:	6013      	str	r3, [r2, #0]
	udd_enable_out_received_interrupt(0);
   87f18:	f04f 0102 	mov.w	r1, #2
   87f1c:	6011      	str	r1, [r2, #0]
	udd_enable_endpoint_interrupt(0);
   87f1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   87f22:	61a2      	str	r2, [r4, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87f24:	b948      	cbnz	r0, 87f3a <UOTGHS_Handler+0x81a>
		cpu_irq_enable();
   87f26:	f240 2038 	movw	r0, #568	; 0x238
   87f2a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87f2e:	f04f 0301 	mov.w	r3, #1
   87f32:	7003      	strb	r3, [r0, #0]
   87f34:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87f38:	b662      	cpsie	i
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
   87f3a:	f646 61f5 	movw	r1, #28405	; 0x6ef5
   87f3e:	f2c0 0108 	movt	r1, #8
   87f42:	4788      	blx	r1
		goto udd_interrupt_end;
   87f44:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   87f46:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87f4a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87f4e:	6901      	ldr	r1, [r0, #16]
   87f50:	f011 0f01 	tst.w	r1, #1
   87f54:	d02a      	beq.n	87fac <UOTGHS_Handler+0x88c>
   87f56:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87f5a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87f5e:	685a      	ldr	r2, [r3, #4]
   87f60:	f012 0f01 	tst.w	r2, #1
   87f64:	d022      	beq.n	87fac <UOTGHS_Handler+0x88c>
		otg_unfreeze_clock();
   87f66:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   87f6a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87f6e:	f8d1 0800 	ldr.w	r0, [r1, #2048]	; 0x800
   87f72:	f420 4380 	bic.w	r3, r0, #16384	; 0x4000
   87f76:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   87f7a:	f04f 0201 	mov.w	r2, #1
   87f7e:	614a      	str	r2, [r1, #20]
		udd_enable_wake_up_interrupt();
   87f80:	f04f 0010 	mov.w	r0, #16
   87f84:	6188      	str	r0, [r1, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   87f86:	f8d1 3800 	ldr.w	r3, [r1, #2048]	; 0x800
   87f8a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
   87f8e:	f8c1 2800 	str.w	r2, [r1, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
   87f92:	f04f 0000 	mov.w	r0, #0
   87f96:	f646 6149 	movw	r1, #28233	; 0x6e49
   87f9a:	f2c0 0108 	movt	r1, #8
   87f9e:	4788      	blx	r1
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   87fa0:	f242 10d5 	movw	r0, #8661	; 0x21d5
   87fa4:	f2c0 0008 	movt	r0, #8
   87fa8:	4780      	blx	r0
#endif
		goto udd_interrupt_end;
   87faa:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   87fac:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87fb0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87fb4:	6901      	ldr	r1, [r0, #16]
   87fb6:	f011 0f10 	tst.w	r1, #16
   87fba:	d034      	beq.n	88026 <UOTGHS_Handler+0x906>
   87fbc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87fc0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87fc4:	685a      	ldr	r2, [r3, #4]
   87fc6:	f012 0f10 	tst.w	r2, #16
   87fca:	d02c      	beq.n	88026 <UOTGHS_Handler+0x906>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
   87fcc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   87fd0:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87fd4:	f8d1 2800 	ldr.w	r2, [r1, #2048]	; 0x800
   87fd8:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   87fdc:	f8c1 0800 	str.w	r0, [r1, #2048]	; 0x800
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   87fe0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87fe4:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87fe8:	e003      	b.n	87ff2 <UOTGHS_Handler+0x8d2>
			if (Is_udd_suspend()) {
   87fea:	685a      	ldr	r2, [r3, #4]
   87fec:	f012 0f01 	tst.w	r2, #1
   87ff0:	d104      	bne.n	87ffc <UOTGHS_Handler+0x8dc>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   87ff2:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
   87ff6:	f411 4f80 	tst.w	r1, #16384	; 0x4000
   87ffa:	d0f6      	beq.n	87fea <UOTGHS_Handler+0x8ca>
			if (Is_udd_suspend()) {
				break; // In case of USB state change in HS
			}
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
   87ffc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   88000:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88004:	f04f 0010 	mov.w	r0, #16
   88008:	6148      	str	r0, [r1, #20]
		udd_enable_suspend_interrupt();
   8800a:	f04f 0001 	mov.w	r0, #1
   8800e:	6188      	str	r0, [r1, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
   88010:	f646 6349 	movw	r3, #28233	; 0x6e49
   88014:	f2c0 0308 	movt	r3, #8
   88018:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   8801a:	f242 12d9 	movw	r2, #8665	; 0x21d9
   8801e:	f2c0 0208 	movt	r2, #8
   88022:	4790      	blx	r2
#endif
		goto udd_interrupt_end;
   88024:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_otg_vbus_transition()) {
   88026:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   8802a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8802e:	f8d0 1804 	ldr.w	r1, [r0, #2052]	; 0x804
   88032:	f011 0f02 	tst.w	r1, #2
   88036:	f000 811c 	beq.w	88272 <UOTGHS_Handler+0xb52>
		dbg_print("VBus ");
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
   8803a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8803e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88042:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   88046:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   8804a:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
		otg_ack_vbus_transition();
   8804e:	f04f 0102 	mov.w	r1, #2
   88052:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
		otg_freeze_clock();
   88056:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8805a:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   8805e:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
   88062:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   88066:	f413 6f00 	tst.w	r3, #2048	; 0x800
			udd_attach();
   8806a:	bf19      	ittee	ne
   8806c:	f247 633d 	movwne	r3, #30269	; 0x763d
   88070:	f2c0 0308 	movtne	r3, #8
		} else {
			udd_detach();
   88074:	f247 63e5 	movweq	r3, #30437	; 0x76e5
   88078:	f2c0 0308 	movteq	r3, #8
   8807c:	4798      	blx	r3
   8807e:	bd70      	pop	{r4, r5, r6, pc}
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88080:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88084:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88088:	6901      	ldr	r1, [r0, #16]
   8808a:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
   8808e:	d008      	beq.n	880a2 <UOTGHS_Handler+0x982>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   88090:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88094:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88098:	685a      	ldr	r2, [r3, #4]
   8809a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
   8809e:	f47f ade6 	bne.w	87c6e <UOTGHS_Handler+0x54e>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   880a2:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   880a6:	f2c4 000a 	movt	r0, #16394	; 0x400a
   880aa:	6901      	ldr	r1, [r0, #16]
   880ac:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   880b0:	d024      	beq.n	880fc <UOTGHS_Handler+0x9dc>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   880b2:	f24c 13c4 	movw	r3, #49604	; 0xc1c4
   880b6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   880ba:	681a      	ldr	r2, [r3, #0]
   880bc:	f012 0f01 	tst.w	r2, #1
   880c0:	d110      	bne.n	880e4 <UOTGHS_Handler+0x9c4>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   880c2:	f24c 13c4 	movw	r3, #49604	; 0xc1c4
   880c6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   880ca:	681a      	ldr	r2, [r3, #0]
   880cc:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   880d0:	d014      	beq.n	880fc <UOTGHS_Handler+0x9dc>
					&& (0 == udd_nb_busy_bank(ep))) {
   880d2:	f24c 1034 	movw	r0, #49460	; 0xc134
   880d6:	f2c4 000a 	movt	r0, #16394	; 0x400a
   880da:	6801      	ldr	r1, [r0, #0]
   880dc:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   880e0:	d10c      	bne.n	880fc <UOTGHS_Handler+0x9dc>
   880e2:	e65e      	b.n	87da2 <UOTGHS_Handler+0x682>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   880e4:	f24c 1034 	movw	r0, #49460	; 0xc134
   880e8:	f2c4 000a 	movt	r0, #16394	; 0x400a
   880ec:	6801      	ldr	r1, [r0, #0]
   880ee:	f011 0f01 	tst.w	r1, #1
   880f2:	d0e6      	beq.n	880c2 <UOTGHS_Handler+0x9a2>
   880f4:	e611      	b.n	87d1a <UOTGHS_Handler+0x5fa>
   880f6:	bf00      	nop
   880f8:	20071440 	.word	0x20071440
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   880fc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88100:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88104:	691a      	ldr	r2, [r3, #16]
   88106:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
   8810a:	d008      	beq.n	8811e <UOTGHS_Handler+0x9fe>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   8810c:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88110:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88114:	6841      	ldr	r1, [r0, #4]
   88116:	f011 6f80 	tst.w	r1, #67108864	; 0x4000000
   8811a:	f47f adb1 	bne.w	87c80 <UOTGHS_Handler+0x560>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8811e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88122:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88126:	691a      	ldr	r2, [r3, #16]
   88128:	f412 4f80 	tst.w	r2, #16384	; 0x4000
   8812c:	d021      	beq.n	88172 <UOTGHS_Handler+0xa52>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8812e:	f24c 10c8 	movw	r0, #49608	; 0xc1c8
   88132:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88136:	6801      	ldr	r1, [r0, #0]
   88138:	f011 0f01 	tst.w	r1, #1
   8813c:	d110      	bne.n	88160 <UOTGHS_Handler+0xa40>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   8813e:	f24c 10c8 	movw	r0, #49608	; 0xc1c8
   88142:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88146:	6801      	ldr	r1, [r0, #0]
   88148:	f411 5f80 	tst.w	r1, #4096	; 0x1000
   8814c:	d011      	beq.n	88172 <UOTGHS_Handler+0xa52>
					&& (0 == udd_nb_busy_bank(ep))) {
   8814e:	f24c 1338 	movw	r3, #49464	; 0xc138
   88152:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88156:	681a      	ldr	r2, [r3, #0]
   88158:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   8815c:	d109      	bne.n	88172 <UOTGHS_Handler+0xa52>
   8815e:	e626      	b.n	87dae <UOTGHS_Handler+0x68e>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   88160:	f24c 1338 	movw	r3, #49464	; 0xc138
   88164:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88168:	681a      	ldr	r2, [r3, #0]
   8816a:	f012 0f01 	tst.w	r2, #1
   8816e:	d0e6      	beq.n	8813e <UOTGHS_Handler+0xa1e>
   88170:	e5d9      	b.n	87d26 <UOTGHS_Handler+0x606>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88172:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88176:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8817a:	6901      	ldr	r1, [r0, #16]
   8817c:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
   88180:	d008      	beq.n	88194 <UOTGHS_Handler+0xa74>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   88182:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88186:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8818a:	685a      	ldr	r2, [r3, #4]
   8818c:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
   88190:	f47f ad7c 	bne.w	87c8c <UOTGHS_Handler+0x56c>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88194:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88198:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8819c:	6901      	ldr	r1, [r0, #16]
   8819e:	f411 4f00 	tst.w	r1, #32768	; 0x8000
   881a2:	d021      	beq.n	881e8 <UOTGHS_Handler+0xac8>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   881a4:	f24c 13cc 	movw	r3, #49612	; 0xc1cc
   881a8:	f2c4 030a 	movt	r3, #16394	; 0x400a
   881ac:	681a      	ldr	r2, [r3, #0]
   881ae:	f012 0f01 	tst.w	r2, #1
   881b2:	d110      	bne.n	881d6 <UOTGHS_Handler+0xab6>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   881b4:	f24c 13cc 	movw	r3, #49612	; 0xc1cc
   881b8:	f2c4 030a 	movt	r3, #16394	; 0x400a
   881bc:	681a      	ldr	r2, [r3, #0]
   881be:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   881c2:	d011      	beq.n	881e8 <UOTGHS_Handler+0xac8>
					&& (0 == udd_nb_busy_bank(ep))) {
   881c4:	f24c 103c 	movw	r0, #49468	; 0xc13c
   881c8:	f2c4 000a 	movt	r0, #16394	; 0x400a
   881cc:	6801      	ldr	r1, [r0, #0]
   881ce:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   881d2:	d109      	bne.n	881e8 <UOTGHS_Handler+0xac8>
   881d4:	e5f1      	b.n	87dba <UOTGHS_Handler+0x69a>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   881d6:	f24c 103c 	movw	r0, #49468	; 0xc13c
   881da:	f2c4 000a 	movt	r0, #16394	; 0x400a
   881de:	6801      	ldr	r1, [r0, #0]
   881e0:	f011 0f01 	tst.w	r1, #1
   881e4:	d0e6      	beq.n	881b4 <UOTGHS_Handler+0xa94>
   881e6:	e5a4      	b.n	87d32 <UOTGHS_Handler+0x612>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   881e8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   881ec:	f2c4 030a 	movt	r3, #16394	; 0x400a
   881f0:	691a      	ldr	r2, [r3, #16]
   881f2:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
   881f6:	d008      	beq.n	8820a <UOTGHS_Handler+0xaea>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   881f8:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   881fc:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88200:	6841      	ldr	r1, [r0, #4]
   88202:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
   88206:	f47f ad47 	bne.w	87c98 <UOTGHS_Handler+0x578>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8820a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8820e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88212:	691a      	ldr	r2, [r3, #16]
   88214:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   88218:	d021      	beq.n	8825e <UOTGHS_Handler+0xb3e>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8821a:	f24c 10d0 	movw	r0, #49616	; 0xc1d0
   8821e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88222:	6801      	ldr	r1, [r0, #0]
   88224:	f011 0f01 	tst.w	r1, #1
   88228:	d110      	bne.n	8824c <UOTGHS_Handler+0xb2c>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   8822a:	f24c 10d0 	movw	r0, #49616	; 0xc1d0
   8822e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88232:	6801      	ldr	r1, [r0, #0]
   88234:	f411 5f80 	tst.w	r1, #4096	; 0x1000
   88238:	d011      	beq.n	8825e <UOTGHS_Handler+0xb3e>
					&& (0 == udd_nb_busy_bank(ep))) {
   8823a:	f24c 1340 	movw	r3, #49472	; 0xc140
   8823e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88242:	681a      	ldr	r2, [r3, #0]
   88244:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   88248:	d109      	bne.n	8825e <UOTGHS_Handler+0xb3e>
   8824a:	e5d1      	b.n	87df0 <UOTGHS_Handler+0x6d0>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   8824c:	f24c 1340 	movw	r3, #49472	; 0xc140
   88250:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88254:	681a      	ldr	r2, [r3, #0]
   88256:	f012 0f01 	tst.w	r2, #1
   8825a:	d0e6      	beq.n	8822a <UOTGHS_Handler+0xb0a>
   8825c:	e56f      	b.n	87d3e <UOTGHS_Handler+0x61e>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   8825e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88262:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88266:	6901      	ldr	r1, [r0, #16]
   88268:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
   8826c:	f47f acf1 	bne.w	87c52 <UOTGHS_Handler+0x532>
   88270:	e534      	b.n	87cdc <UOTGHS_Handler+0x5bc>
   88272:	bd70      	pop	{r4, r5, r6, pc}
   88274:	b249      	sxtb	r1, r1
   88276:	2900      	cmp	r1, #0
   88278:	f43f ac01 	beq.w	87a7e <UOTGHS_Handler+0x35e>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
   8827c:	f813 0b01 	ldrb.w	r0, [r3], #1
   88280:	f802 0b01 	strb.w	r0, [r2], #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   88284:	b2d9      	uxtb	r1, r3
   88286:	42a1      	cmp	r1, r4
   88288:	f4ff abf9 	bcc.w	87a7e <UOTGHS_Handler+0x35e>
   8828c:	e406      	b.n	87a9c <UOTGHS_Handler+0x37c>
   8828e:	bf00      	nop

00088290 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   88290:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88294:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88298:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
#else
	return false;
#endif
}
   8829c:	f410 5040 	ands.w	r0, r0, #12288	; 0x3000
   882a0:	bf18      	it	ne
   882a2:	2001      	movne	r0, #1
   882a4:	4770      	bx	lr
   882a6:	bf00      	nop

000882a8 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
   882a8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   882ac:	f2c4 030a 	movt	r3, #16394	; 0x400a
   882b0:	681a      	ldr	r2, [r3, #0]
   882b2:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   882b6:	6019      	str	r1, [r3, #0]
	udd_configure_address(address);
   882b8:	681a      	ldr	r2, [r3, #0]
   882ba:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   882be:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   882c2:	ea40 0201 	orr.w	r2, r0, r1
   882c6:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   882c8:	6818      	ldr	r0, [r3, #0]
   882ca:	f040 0180 	orr.w	r1, r0, #128	; 0x80
   882ce:	6019      	str	r1, [r3, #0]
   882d0:	4770      	bx	lr
   882d2:	bf00      	nop

000882d4 <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
   882d4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   882d8:	f2c4 030a 	movt	r3, #16394	; 0x400a
   882dc:	6818      	ldr	r0, [r3, #0]
}
   882de:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   882e2:	4770      	bx	lr

000882e4 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
   882e4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   882e8:	f2c4 030a 	movt	r3, #16394	; 0x400a
   882ec:	6a18      	ldr	r0, [r3, #32]
}
   882ee:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   882f2:	4770      	bx	lr

000882f4 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
   882f4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   882f8:	f2c4 030a 	movt	r3, #16394	; 0x400a
   882fc:	6a18      	ldr	r0, [r3, #32]
}
   882fe:	ea4f 4180 	mov.w	r1, r0, lsl #18
   88302:	ea4f 4091 	mov.w	r0, r1, lsr #18
   88306:	4770      	bx	lr

00088308 <udd_set_setup_payload>:
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
	udd_g_ctrlreq.payload = payload;
   88308:	f242 3390 	movw	r3, #9104	; 0x2390
   8830c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88310:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   88312:	8199      	strh	r1, [r3, #12]
   88314:	4770      	bx	lr
   88316:	bf00      	nop

00088318 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
   88318:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8831a:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   8831e:	2c05      	cmp	r4, #5
   88320:	d82a      	bhi.n	88378 <udd_ep_free+0x60>
		return;
	}
	udd_disable_endpoint(ep_index);
   88322:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88326:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8832a:	69d9      	ldr	r1, [r3, #28]
   8832c:	f04f 0201 	mov.w	r2, #1
   88330:	fa02 f204 	lsl.w	r2, r2, r4
   88334:	ea21 0102 	bic.w	r1, r1, r2
   88338:	61d9      	str	r1, [r3, #28]
	udd_unallocate_memory(ep_index);
   8833a:	f44f 4341 	mov.w	r3, #49408	; 0xc100
   8833e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88342:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   88346:	f022 0102 	bic.w	r1, r2, #2
   8834a:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	udd_ep_abort_job(ep);
   8834e:	f247 2375 	movw	r3, #29301	; 0x7275
   88352:	f2c0 0308 	movt	r3, #8
   88356:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   88358:	f104 34ff 	add.w	r4, r4, #4294967295
   8835c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   88360:	f241 32f8 	movw	r2, #5112	; 0x13f8
   88364:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88368:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
   8836c:	7d21      	ldrb	r1, [r4, #20]
   8836e:	f36f 0182 	bfc	r1, #2, #1
   88372:	7521      	strb	r1, [r4, #20]
   88374:	f104 0410 	add.w	r4, r4, #16
   88378:	bd10      	pop	{r4, pc}
   8837a:	bf00      	nop

0008837c <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	return Is_udd_endpoint_stall_requested(ep_index);
   8837c:	f000 000f 	and.w	r0, r0, #15
   88380:	f24c 13c0 	movw	r3, #49600	; 0xc1c0
   88384:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88388:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
}
   8838c:	f3c1 40c0 	ubfx	r0, r1, #19, #1
   88390:	4770      	bx	lr
   88392:	bf00      	nop

00088394 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   88394:	b430      	push	{r4, r5}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   88396:	f000 030f 	and.w	r3, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
   8839a:	2b05      	cmp	r3, #5
   8839c:	d87a      	bhi.n	88494 <udd_ep_set_halt+0x100>
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   8839e:	f24c 12c0 	movw	r2, #49600	; 0xc1c0
   883a2:	f2c4 020a 	movt	r2, #16394	; 0x400a
   883a6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   883aa:	f411 2f00 	tst.w	r1, #524288	; 0x80000
   883ae:	d174      	bne.n	8849a <udd_ep_set_halt+0x106>


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   883b0:	f103 34ff 	add.w	r4, r3, #4294967295
   883b4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   883b8:	f241 31f8 	movw	r1, #5112	; 0x13f8
   883bc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   883c0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   883c4:	7d11      	ldrb	r1, [r2, #20]
   883c6:	f001 0404 	and.w	r4, r1, #4
   883ca:	b2e4      	uxtb	r4, r4
   883cc:	2c00      	cmp	r4, #0
   883ce:	d167      	bne.n	884a0 <udd_ep_set_halt+0x10c>
		return true; // Already STALL
	}

	if (ptr_job->busy == true) {
   883d0:	f011 0f01 	tst.w	r1, #1
   883d4:	d167      	bne.n	884a6 <udd_ep_set_halt+0x112>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   883d6:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   883da:	f1d5 0501 	rsbs	r5, r5, #1
   883de:	bf38      	it	cc
   883e0:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   883e2:	b672      	cpsid	i
   883e4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   883e8:	f240 2138 	movw	r1, #568	; 0x238
   883ec:	f2c2 0107 	movt	r1, #8199	; 0x2007
   883f0:	700c      	strb	r4, [r1, #0]
		return false; // Job on going, stall impossible
	}

	flags = cpu_irq_save();
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   883f2:	f010 0f80 	tst.w	r0, #128	; 0x80
   883f6:	d027      	beq.n	88448 <udd_ep_set_halt+0xb4>
   883f8:	f24c 1030 	movw	r0, #49456	; 0xc130
   883fc:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88400:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   88404:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   88408:	d01e      	beq.n	88448 <udd_ep_set_halt+0xb4>
		// Delay the stall after the end of IN transfer on USB line
		ptr_job->stall_requested = true;
   8840a:	7d10      	ldrb	r0, [r2, #20]
   8840c:	f040 0104 	orr.w	r1, r0, #4
   88410:	7511      	strb	r1, [r2, #20]
#ifdef UDD_EP_FIFO_SUPPORTED
		udd_disable_in_send_interrupt(ep_index);
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
   88412:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   88416:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8841a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8841e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
   88422:	fa02 f303 	lsl.w	r3, r2, r3
   88426:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   8842a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8842e:	618b      	str	r3, [r1, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88430:	b3e5      	cbz	r5, 884ac <udd_ep_set_halt+0x118>
		cpu_irq_enable();
   88432:	f04f 0001 	mov.w	r0, #1
   88436:	f240 2238 	movw	r2, #568	; 0x238
   8843a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8843e:	7010      	strb	r0, [r2, #0]
   88440:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   88444:	b662      	cpsie	i
   88446:	e036      	b.n	884b6 <udd_ep_set_halt+0x122>
		cpu_irq_restore(flags);
		return true;
	}
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   88448:	f44f 4241 	mov.w	r2, #49408	; 0xc100
   8844c:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88450:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   88454:	f420 7100 	bic.w	r1, r0, #512	; 0x200
   88458:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_ack_stall(ep_index);
   8845c:	f24c 1260 	movw	r2, #49504	; 0xc160
   88460:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88464:	f04f 0040 	mov.w	r0, #64	; 0x40
   88468:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   8846c:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   88470:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88474:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   88478:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8847c:	b1cd      	cbz	r5, 884b2 <udd_ep_set_halt+0x11e>
		cpu_irq_enable();
   8847e:	f04f 0001 	mov.w	r0, #1
   88482:	f240 2338 	movw	r3, #568	; 0x238
   88486:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8848a:	7018      	strb	r0, [r3, #0]
   8848c:	f3bf 8f5f 	dmb	sy
   88490:	b662      	cpsie	i
   88492:	e010      	b.n	884b6 <udd_ep_set_halt+0x122>
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
   88494:	f04f 0000 	mov.w	r0, #0
   88498:	e00d      	b.n	884b6 <udd_ep_set_halt+0x122>
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
   8849a:	f04f 0001 	mov.w	r0, #1
   8849e:	e00a      	b.n	884b6 <udd_ep_set_halt+0x122>
   884a0:	f04f 0001 	mov.w	r0, #1
   884a4:	e007      	b.n	884b6 <udd_ep_set_halt+0x122>
	}

	if (ptr_job->busy == true) {
		return false; // Job on going, stall impossible
   884a6:	f04f 0000 	mov.w	r0, #0
   884aa:	e004      	b.n	884b6 <udd_ep_set_halt+0x122>
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
   884ac:	f04f 0001 	mov.w	r0, #1
   884b0:	e001      	b.n	884b6 <udd_ep_set_halt+0x122>
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
	udd_ack_stall(ep_index);
	udd_enable_stall_handshake(ep_index);
	cpu_irq_restore(flags);
	return true;
   884b2:	f04f 0001 	mov.w	r0, #1
}
   884b6:	bc30      	pop	{r4, r5}
   884b8:	4770      	bx	lr
   884ba:	bf00      	nop

000884bc <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   884bc:	b508      	push	{r3, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   884be:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
   884c2:	2805      	cmp	r0, #5
   884c4:	d85f      	bhi.n	88586 <udd_ep_clear_halt+0xca>


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   884c6:	f100 33ff 	add.w	r3, r0, #4294967295
   884ca:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   884ce:	f241 32f8 	movw	r2, #5112	; 0x13f8
   884d2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   884d6:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;

	if (ptr_job->stall_requested) {
   884da:	7d19      	ldrb	r1, [r3, #20]
   884dc:	f001 0204 	and.w	r2, r1, #4
   884e0:	b2d1      	uxtb	r1, r2
   884e2:	2900      	cmp	r1, #0
   884e4:	d055      	beq.n	88592 <udd_ep_clear_halt+0xd6>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
   884e6:	7d1a      	ldrb	r2, [r3, #20]
   884e8:	f36f 0282 	bfc	r2, #2, #1
   884ec:	751a      	strb	r2, [r3, #20]
		udd_disable_bank_interrupt(ep_index);
   884ee:	f24c 2120 	movw	r1, #49696	; 0xc220
   884f2:	f2c4 010a 	movt	r1, #16394	; 0x400a
   884f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   884fa:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
   884fe:	fa02 f100 	lsl.w	r1, r2, r0
   88502:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   88506:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8850a:	6151      	str	r1, [r2, #20]
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   8850c:	ea4f 0280 	mov.w	r2, r0, lsl #2
   88510:	f24c 11c0 	movw	r1, #49600	; 0xc1c0
   88514:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88518:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   8851c:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   88520:	d024      	beq.n	8856c <udd_ep_clear_halt+0xb0>
		if (Is_udd_stall(ep_index)) {
   88522:	f24c 1130 	movw	r1, #49456	; 0xc130
   88526:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8852a:	5850      	ldr	r0, [r2, r1]
   8852c:	f010 0f40 	tst.w	r0, #64	; 0x40
   88530:	d00d      	beq.n	8854e <udd_ep_clear_halt+0x92>
			udd_ack_stall(ep_index);
   88532:	f24c 1160 	movw	r1, #49504	; 0xc160
   88536:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8853a:	f04f 0040 	mov.w	r0, #64	; 0x40
   8853e:	5050      	str	r0, [r2, r1]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep_index);
   88540:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   88544:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88548:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   8854c:	5050      	str	r0, [r2, r1]
		}
		// Disable stall
		udd_disable_stall_handshake(ep_index);
   8854e:	f24c 2120 	movw	r1, #49696	; 0xc220
   88552:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88556:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   8855a:	5050      	str	r0, [r2, r1]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   8855c:	f44f 4141 	mov.w	r1, #49408	; 0xc100
   88560:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88564:	5850      	ldr	r0, [r2, r1]
   88566:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   8856a:	5050      	str	r0, [r2, r1]
		b_stall_cleared = true;
	}
	if (b_stall_cleared) {
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   8856c:	7d1a      	ldrb	r2, [r3, #20]
   8856e:	f012 0f01 	tst.w	r2, #1
   88572:	d00b      	beq.n	8858c <udd_ep_clear_halt+0xd0>
			ptr_job->busy = false;
   88574:	7d19      	ldrb	r1, [r3, #20]
   88576:	f36f 0100 	bfc	r1, #0, #1
   8857a:	7519      	strb	r1, [r3, #20]
			ptr_job->call_nohalt();
   8857c:	681b      	ldr	r3, [r3, #0]
   8857e:	4798      	blx	r3
		}
	}
	return true;
   88580:	f04f 0001 	mov.w	r0, #1
   88584:	bd08      	pop	{r3, pc}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;
   88586:	f04f 0000 	mov.w	r0, #0
   8858a:	bd08      	pop	{r3, pc}
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   8858c:	f04f 0001 	mov.w	r0, #1
   88590:	bd08      	pop	{r3, pc}
		ptr_job->stall_requested = false;
		udd_disable_bank_interrupt(ep_index);
		udd_disable_endpoint_interrupt(ep_index);
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   88592:	ea4f 0280 	mov.w	r2, r0, lsl #2
   88596:	f24c 11c0 	movw	r1, #49600	; 0xc1c0
   8859a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8859e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   885a2:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   885a6:	d1bc      	bne.n	88522 <udd_ep_clear_halt+0x66>
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   885a8:	f04f 0001 	mov.w	r0, #1
}
   885ac:	bd08      	pop	{r3, pc}
   885ae:	bf00      	nop

000885b0 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   885b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
#endif
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   885b2:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   885b6:	2805      	cmp	r0, #5
   885b8:	d86c      	bhi.n	88694 <udd_ep_run+0xe4>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
   885ba:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   885be:	f2c4 040a 	movt	r4, #16394	; 0x400a
   885c2:	69e4      	ldr	r4, [r4, #28]
   885c4:	f04f 0501 	mov.w	r5, #1
   885c8:	fa05 f500 	lsl.w	r5, r5, r0
   885cc:	4225      	tst	r5, r4
   885ce:	d064      	beq.n	8869a <udd_ep_run+0xea>
			|| Is_udd_endpoint_stall_requested(ep)
   885d0:	f24c 14c0 	movw	r4, #49600	; 0xc1c0
   885d4:	f2c4 040a 	movt	r4, #16394	; 0x400a
   885d8:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   885dc:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   885e0:	d15e      	bne.n	886a0 <udd_ep_run+0xf0>
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   885e2:	f100 35ff 	add.w	r5, r0, #4294967295
   885e6:	eb05 0645 	add.w	r6, r5, r5, lsl #1
   885ea:	f241 34f8 	movw	r4, #5112	; 0x13f8
   885ee:	f2c2 0407 	movt	r4, #8199	; 0x2007
   885f2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
   885f6:	7d25      	ldrb	r5, [r4, #20]
   885f8:	f005 0604 	and.w	r6, r5, #4
   885fc:	b2f6      	uxtb	r6, r6
   885fe:	2e00      	cmp	r6, #0
   88600:	d151      	bne.n	886a6 <udd_ep_run+0xf6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   88602:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   88606:	f1d7 0601 	rsbs	r6, r7, #1
   8860a:	bf38      	it	cc
   8860c:	2600      	movcc	r6, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8860e:	b672      	cpsid	i
   88610:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   88614:	f240 2738 	movw	r7, #568	; 0x238
   88618:	f2c2 0707 	movt	r7, #8199	; 0x2007
   8861c:	f04f 0c00 	mov.w	ip, #0
   88620:	f887 c000 	strb.w	ip, [r7]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
   88624:	f015 0f01 	tst.w	r5, #1
   88628:	d009      	beq.n	8863e <udd_ep_run+0x8e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8862a:	2e00      	cmp	r6, #0
   8862c:	d03e      	beq.n	886ac <udd_ep_run+0xfc>
		cpu_irq_enable();
   8862e:	f04f 0301 	mov.w	r3, #1
   88632:	703b      	strb	r3, [r7, #0]
   88634:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   88638:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
   8863a:	4660      	mov	r0, ip
   8863c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	ptr_job->busy = true;
   8863e:	7d25      	ldrb	r5, [r4, #20]
   88640:	f045 0501 	orr.w	r5, r5, #1
   88644:	7525      	strb	r5, [r4, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88646:	b14e      	cbz	r6, 8865c <udd_ep_run+0xac>
		cpu_irq_enable();
   88648:	f240 2538 	movw	r5, #568	; 0x238
   8864c:	f2c2 0507 	movt	r5, #8199	; 0x2007
   88650:	f04f 0601 	mov.w	r6, #1
   88654:	702e      	strb	r6, [r5, #0]
   88656:	f3bf 8f5f 	dmb	sy
   8865a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   8865c:	6062      	str	r2, [r4, #4]
	ptr_job->buf_size = buf_size;
   8865e:	60a3      	str	r3, [r4, #8]
	ptr_job->buf_cnt = 0;
   88660:	f04f 0200 	mov.w	r2, #0
   88664:	60e2      	str	r2, [r4, #12]
	ptr_job->buf_load = 0;
   88666:	6122      	str	r2, [r4, #16]
	ptr_job->call_trans = callback;
   88668:	9a06      	ldr	r2, [sp, #24]
   8866a:	6022      	str	r2, [r4, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   8866c:	b921      	cbnz	r1, 88678 <udd_ep_run+0xc8>
   8866e:	f1d3 0301 	rsbs	r3, r3, #1
   88672:	bf38      	it	cc
   88674:	2300      	movcc	r3, #0
   88676:	e001      	b.n	8867c <udd_ep_run+0xcc>
   88678:	f04f 0301 	mov.w	r3, #1
   8867c:	7d21      	ldrb	r1, [r4, #20]
   8867e:	f363 0141 	bfi	r1, r3, #1, #1
   88682:	7521      	strb	r1, [r4, #20]
#endif // UDD_EP_FIFO_SUPPORTED

#ifdef UDD_EP_DMA_SUPPORTED
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
   88684:	f247 22a1 	movw	r2, #29345	; 0x72a1
   88688:	f2c0 0208 	movt	r2, #8
   8868c:	4790      	blx	r2
	return true;
   8868e:	f04f 0001 	mov.w	r0, #1
   88692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
   88694:	f04f 0000 	mov.w	r0, #0
   88698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
   8869a:	f04f 0000 	mov.w	r0, #0
   8869e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   886a0:	f04f 0000 	mov.w	r0, #0
   886a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   886a6:	f04f 0000 	mov.w	r0, #0
   886aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
   886ac:	f04f 0000 	mov.w	r0, #0
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
	return true;
#endif
}
   886b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   886b2:	bf00      	nop

000886b4 <udd_ep_alloc>:


#if (0 != USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   886b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   886b8:	b085      	sub	sp, #20
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
   886ba:	f000 040f 	and.w	r4, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
   886be:	2c05      	cmp	r4, #5
   886c0:	f200 8101 	bhi.w	888c6 <udd_ep_alloc+0x212>
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
   886c4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   886c8:	f2c4 030a 	movt	r3, #16394	; 0x400a
   886cc:	69db      	ldr	r3, [r3, #28]
   886ce:	f04f 0501 	mov.w	r5, #1
   886d2:	fa05 f504 	lsl.w	r5, r5, r4
   886d6:	421d      	tst	r5, r3
   886d8:	f040 80f8 	bne.w	888cc <udd_ep_alloc+0x218>
		return false;
	}
	dbg_print("alloc(%x, %d) ", ep, MaxEndpointSize);

	// Bank choise
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   886dc:	f001 0303 	and.w	r3, r1, #3
   886e0:	2b02      	cmp	r3, #2
   886e2:	d006      	beq.n	886f2 <udd_ep_alloc+0x3e>
   886e4:	2b03      	cmp	r3, #3
   886e6:	f000 80fd 	beq.w	888e4 <udd_ep_alloc+0x230>
   886ea:	2b01      	cmp	r3, #1
   886ec:	f040 80f1 	bne.w	888d2 <udd_ep_alloc+0x21e>
   886f0:	e007      	b.n	88702 <udd_ep_alloc+0x4e>
		break;
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
		break;
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   886f2:	f1a4 0604 	sub.w	r6, r4, #4
   886f6:	b2f5      	uxtb	r5, r6
		Assert(false);
		return false;
	}
	switch (nb_bank) {
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   886f8:	2d01      	cmp	r5, #1
   886fa:	bf94      	ite	ls
   886fc:	2500      	movls	r5, #0
   886fe:	2501      	movhi	r5, #1
   88700:	e001      	b.n	88706 <udd_ep_alloc+0x52>
				UOTGHS_DEVEPTCFG_EPBK_Pos;
		break;
	case 2:
		bank = UOTGHS_DEVEPTCFG_EPBK_2_BANK >>
   88702:	f04f 0501 	mov.w	r5, #1
	Assert((MaxEndpointSize == 1023)
		|| !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   88706:	f44f 4741 	mov.w	r7, #49408	; 0xc100
   8870a:	f2c4 070a 	movt	r7, #16394	; 0x400a
   8870e:	eb07 0684 	add.w	r6, r7, r4, lsl #2
   88712:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   88716:	f423 57cb 	bic.w	r7, r3, #6496	; 0x1960
   8871a:	f027 071c 	bic.w	r7, r7, #28
   8871e:	ea4f 21c1 	mov.w	r1, r1, lsl #11
   88722:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
   88726:	f000 0080 	and.w	r0, r0, #128	; 0x80
   8872a:	2800      	cmp	r0, #0
   8872c:	bf14      	ite	ne
   8872e:	f44f 7080 	movne.w	r0, #256	; 0x100
   88732:	2000      	moveq	r0, #0
   88734:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
   88738:	b29b      	uxth	r3, r3
   8873a:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   8873e:	d306      	bcc.n	8874e <udd_ep_alloc+0x9a>
   88740:	2a08      	cmp	r2, #8
   88742:	d907      	bls.n	88754 <udd_ep_alloc+0xa0>
   88744:	ea4f 0342 	mov.w	r3, r2, lsl #1
   88748:	f103 32ff 	add.w	r2, r3, #4294967295
   8874c:	e004      	b.n	88758 <udd_ep_alloc+0xa4>
   8874e:	f240 72ff 	movw	r2, #2047	; 0x7ff
   88752:	e001      	b.n	88758 <udd_ep_alloc+0xa4>
   88754:	f04f 020f 	mov.w	r2, #15
   88758:	fab2 f282 	clz	r2, r2
   8875c:	ea41 0585 	orr.w	r5, r1, r5, lsl #2
   88760:	4305      	orrs	r5, r0
   88762:	f1c2 011c 	rsb	r1, r2, #28
   88766:	ea45 1001 	orr.w	r0, r5, r1, lsl #4
   8876a:	f641 1374 	movw	r3, #6516	; 0x1974
   8876e:	4003      	ands	r3, r0
   88770:	433b      	orrs	r3, r7
   88772:	6033      	str	r3, [r6, #0]
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
   88774:	f04f 0601 	mov.w	r6, #1
   88778:	fa06 f604 	lsl.w	r6, r6, r4
   8877c:	b2b7      	uxth	r7, r6

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   8877e:	2c04      	cmp	r4, #4
   88780:	f200 80b3 	bhi.w	888ea <udd_ep_alloc+0x236>
   88784:	f24c 1114 	movw	r1, #49428	; 0xc114
   88788:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8878c:	f04f 0305 	mov.w	r3, #5
		if (Is_udd_endpoint_enabled(i)) {
   88790:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   88794:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88798:	f04f 0001 	mov.w	r0, #1
   8879c:	ea6f 0504 	mvn.w	r5, r4
   887a0:	18ee      	adds	r6, r5, r3
   887a2:	ea06 0c00 	and.w	ip, r6, r0
   887a6:	69d6      	ldr	r6, [r2, #28]
   887a8:	fa00 f503 	lsl.w	r5, r0, r3
   887ac:	4235      	tst	r5, r6
   887ae:	f000 81c3 	beq.w	88b38 <udd_ep_alloc+0x484>
   887b2:	e1b5      	b.n	88b20 <udd_ep_alloc+0x46c>
   887b4:	46a0      	mov	r8, r4
   887b6:	e7ff      	b.n	887b8 <udd_ep_alloc+0x104>
   887b8:	69d4      	ldr	r4, [r2, #28]
   887ba:	fa00 f603 	lsl.w	r6, r0, r3
   887be:	4226      	tst	r6, r4
   887c0:	d009      	beq.n	887d6 <udd_ep_alloc+0x122>
			ep_allocated |= 1 << i;
   887c2:	4337      	orrs	r7, r6
   887c4:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   887c6:	69d4      	ldr	r4, [r2, #28]
   887c8:	ea24 0606 	bic.w	r6, r4, r6
   887cc:	61d6      	str	r6, [r2, #28]
			udd_unallocate_memory(i);
   887ce:	680d      	ldr	r5, [r1, #0]
   887d0:	f025 0402 	bic.w	r4, r5, #2
   887d4:	600c      	str	r4, [r1, #0]
   887d6:	f103 33ff 	add.w	r3, r3, #4294967295
   887da:	f1a1 0904 	sub.w	r9, r1, #4
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
   887de:	69d4      	ldr	r4, [r2, #28]
   887e0:	fa00 f503 	lsl.w	r5, r0, r3
   887e4:	4225      	tst	r5, r4
   887e6:	f000 81dc 	beq.w	88ba2 <udd_ep_alloc+0x4ee>
   887ea:	e1cc      	b.n	88b86 <udd_ep_alloc+0x4d2>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
   887ec:	fa47 f004 	asr.w	r0, r7, r4
   887f0:	f010 0f01 	tst.w	r0, #1
   887f4:	d05a      	beq.n	888ac <udd_ep_alloc+0x1f8>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   887f6:	f104 33ff 	add.w	r3, r4, #4294967295
   887fa:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   887fe:	eb09 05cc 	add.w	r5, r9, ip, lsl #3
			bool b_restart = ptr_job->busy;
   88802:	7d29      	ldrb	r1, [r5, #20]
   88804:	f001 0201 	and.w	r2, r1, #1
   88808:	9203      	str	r2, [sp, #12]
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   8880a:	f36f 0100 	bfc	r1, #0, #1
   8880e:	7529      	strb	r1, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   88810:	ea4f 0184 	mov.w	r1, r4, lsl #2
   88814:	198a      	adds	r2, r1, r6
   88816:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   8881a:	f040 0302 	orr.w	r3, r0, #2
   8881e:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			udd_enable_endpoint(i);
   88822:	f8d8 301c 	ldr.w	r3, [r8, #28]
   88826:	f04f 0001 	mov.w	r0, #1
   8882a:	fa00 fb04 	lsl.w	fp, r0, r4
   8882e:	ea4b 0303 	orr.w	r3, fp, r3
   88832:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   88836:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
   8883a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   8883e:	d110      	bne.n	88862 <udd_ep_alloc+0x1ae>
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
   88840:	682b      	ldr	r3, [r5, #0]
   88842:	2b00      	cmp	r3, #0
   88844:	d048      	beq.n	888d8 <udd_ep_alloc+0x224>
					return false;
				}
				if (Is_udd_endpoint_in(i)) {
   88846:	6811      	ldr	r1, [r2, #0]
   88848:	f411 7f80 	tst.w	r1, #256	; 0x100
					i |= USB_EP_DIR_IN;
   8884c:	bf18      	it	ne
   8884e:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   88852:	f04f 0001 	mov.w	r0, #1
   88856:	68e9      	ldr	r1, [r5, #12]
   88858:	4622      	mov	r2, r4
   8885a:	4798      	blx	r3
						ptr_job->buf_cnt, i);
				return false;
   8885c:	f04f 0000 	mov.w	r0, #0
   88860:	e05d      	b.n	8891e <udd_ep_alloc+0x26a>
			}
			udd_enable_endpoint_bank_autoswitch(i);
   88862:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   88866:	f442 7300 	orr.w	r3, r2, #512	; 0x200
   8886a:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			if (b_restart) {
   8886e:	9a03      	ldr	r2, [sp, #12]
   88870:	b1e2      	cbz	r2, 888ac <udd_ep_alloc+0x1f8>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   88872:	68ea      	ldr	r2, [r5, #12]
   88874:	692b      	ldr	r3, [r5, #16]
   88876:	1ad3      	subs	r3, r2, r3
   88878:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8887a:	5989      	ldr	r1, [r1, r6]
   8887c:	f411 7f80 	tst.w	r1, #256	; 0x100
   88880:	bf14      	ite	ne
   88882:	f044 0080 	orrne.w	r0, r4, #128	; 0x80
   88886:	4620      	moveq	r0, r4
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   88888:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8888a:	f8d5 e004 	ldr.w	lr, [r5, #4]
   8888e:	68ad      	ldr	r5, [r5, #8]
   88890:	f859 203c 	ldr.w	r2, [r9, ip, lsl #3]
   88894:	9200      	str	r2, [sp, #0]
   88896:	f3c1 0140 	ubfx	r1, r1, #1, #1
   8889a:	eb0e 0203 	add.w	r2, lr, r3
   8889e:	1aeb      	subs	r3, r5, r3
   888a0:	f248 55b1 	movw	r5, #34225	; 0x85b1
   888a4:	f2c0 0508 	movt	r5, #8
   888a8:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   888aa:	b1c0      	cbz	r0, 888de <udd_ep_alloc+0x22a>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   888ac:	f104 0401 	add.w	r4, r4, #1
   888b0:	b2e4      	uxtb	r4, r4
		if (ep_allocated & (1 << i)) {
   888b2:	fa47 f004 	asr.w	r0, r7, r4
   888b6:	f010 0f01 	tst.w	r0, #1
   888ba:	f000 812a 	beq.w	88b12 <udd_ep_alloc+0x45e>
   888be:	e0d9      	b.n	88a74 <udd_ep_alloc+0x3c0>
					return false;
				}
			}
		}
	}
	return true;
   888c0:	f04f 0001 	mov.w	r0, #1
   888c4:	e02b      	b.n	8891e <udd_ep_alloc+0x26a>

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
   888c6:	f04f 0000 	mov.w	r0, #0
   888ca:	e028      	b.n	8891e <udd_ep_alloc+0x26a>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
   888cc:	f04f 0000 	mov.w	r0, #0
   888d0:	e025      	b.n	8891e <udd_ep_alloc+0x26a>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
		break;
	default:
		Assert(false);
		return false;
   888d2:	f04f 0000 	mov.w	r0, #0
   888d6:	e022      	b.n	8891e <udd_ep_alloc+0x26a>
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i)) {
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
					return false;
   888d8:	f04f 0000 	mov.w	r0, #0
   888dc:	e01f      	b.n	8891e <udd_ep_alloc+0x26a>
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
					dbg_print("ErrReRun%d ", i);
					return false;
   888de:	f04f 0000 	mov.w	r0, #0
   888e2:	e01c      	b.n	8891e <udd_ep_alloc+0x26a>
		Assert(false);
		return false;
	}
	switch (nb_bank) {
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   888e4:	f04f 0500 	mov.w	r5, #0
   888e8:	e70d      	b.n	88706 <udd_ep_alloc+0x52>
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   888ea:	f241 39f8 	movw	r9, #5112	; 0x13f8
   888ee:	f2c2 0907 	movt	r9, #8199	; 0x2007
			bool b_restart = ptr_job->busy;
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
			// Re-allocate memory
			udd_allocate_memory(i);
   888f2:	f44f 4641 	mov.w	r6, #49408	; 0xc100
   888f6:	f2c4 060a 	movt	r6, #16394	; 0x400a
			udd_enable_endpoint(i);
   888fa:	f44f 4840 	mov.w	r8, #49152	; 0xc000
   888fe:	f2c4 080a 	movt	r8, #16394	; 0x400a
			if (!Is_udd_endpoint_configured(i)) {
   88902:	f24c 1a30 	movw	sl, #49456	; 0xc130
   88906:	f2c4 0a0a 	movt	sl, #16394	; 0x400a
   8890a:	f1c4 0b05 	rsb	fp, r4, #5
   8890e:	f00b 0b01 	and.w	fp, fp, #1
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
   88912:	fa47 f204 	asr.w	r2, r7, r4
   88916:	f012 0f01 	tst.w	r2, #1
   8891a:	d04c      	beq.n	889b6 <udd_ep_alloc+0x302>
   8891c:	e002      	b.n	88924 <udd_ep_alloc+0x270>
				}
			}
		}
	}
	return true;
}
   8891e:	b005      	add	sp, #20
   88920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   88924:	f104 30ff 	add.w	r0, r4, #4294967295
   88928:	eb00 0540 	add.w	r5, r0, r0, lsl #1
   8892c:	eb09 05c5 	add.w	r5, r9, r5, lsl #3
			bool b_restart = ptr_job->busy;
   88930:	7d2b      	ldrb	r3, [r5, #20]
   88932:	f003 0c01 	and.w	ip, r3, #1
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   88936:	f36f 0300 	bfc	r3, #0, #1
   8893a:	752b      	strb	r3, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   8893c:	ea4f 0384 	mov.w	r3, r4, lsl #2
   88940:	199a      	adds	r2, r3, r6
   88942:	6811      	ldr	r1, [r2, #0]
   88944:	f041 0002 	orr.w	r0, r1, #2
   88948:	6010      	str	r0, [r2, #0]
			udd_enable_endpoint(i);
   8894a:	f8d8 101c 	ldr.w	r1, [r8, #28]
   8894e:	f04f 0001 	mov.w	r0, #1
   88952:	fa00 f004 	lsl.w	r0, r0, r4
   88956:	4301      	orrs	r1, r0
   88958:	f8c8 101c 	str.w	r1, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   8895c:	4453      	add	r3, sl
   8895e:	6818      	ldr	r0, [r3, #0]
   88960:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   88964:	f43f af6c 	beq.w	88840 <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   88968:	6811      	ldr	r1, [r2, #0]
   8896a:	f441 7300 	orr.w	r3, r1, #512	; 0x200
   8896e:	6013      	str	r3, [r2, #0]
			if (b_restart) {
   88970:	f1bc 0f00 	cmp.w	ip, #0
   88974:	d01f      	beq.n	889b6 <udd_ep_alloc+0x302>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   88976:	68e8      	ldr	r0, [r5, #12]
   88978:	6929      	ldr	r1, [r5, #16]
   8897a:	1a43      	subs	r3, r0, r1
   8897c:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8897e:	6812      	ldr	r2, [r2, #0]
   88980:	f412 7f80 	tst.w	r2, #256	; 0x100
   88984:	d012      	beq.n	889ac <udd_ep_alloc+0x2f8>
   88986:	e013      	b.n	889b0 <udd_ep_alloc+0x2fc>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   88988:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8898a:	686a      	ldr	r2, [r5, #4]
   8898c:	f8d5 e008 	ldr.w	lr, [r5, #8]
   88990:	682d      	ldr	r5, [r5, #0]
   88992:	9500      	str	r5, [sp, #0]
   88994:	f3c1 0140 	ubfx	r1, r1, #1, #1
   88998:	18d2      	adds	r2, r2, r3
   8899a:	ebc3 030e 	rsb	r3, r3, lr
   8899e:	f248 55b1 	movw	r5, #34225	; 0x85b1
   889a2:	f2c0 0508 	movt	r5, #8
   889a6:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   889a8:	b928      	cbnz	r0, 889b6 <udd_ep_alloc+0x302>
   889aa:	e798      	b.n	888de <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   889ac:	4620      	mov	r0, r4
   889ae:	e7eb      	b.n	88988 <udd_ep_alloc+0x2d4>
   889b0:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   889b4:	e7e8      	b.n	88988 <udd_ep_alloc+0x2d4>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   889b6:	f104 0401 	add.w	r4, r4, #1
   889ba:	b2e4      	uxtb	r4, r4
   889bc:	2c06      	cmp	r4, #6
   889be:	f43f af7f 	beq.w	888c0 <udd_ep_alloc+0x20c>
   889c2:	fa4f f08b 	sxtb.w	r0, fp
   889c6:	2800      	cmp	r0, #0
   889c8:	f43f af10 	beq.w	887ec <udd_ep_alloc+0x138>
		if (ep_allocated & (1 << i)) {
   889cc:	fa47 f304 	asr.w	r3, r7, r4
   889d0:	f013 0f01 	tst.w	r3, #1
   889d4:	d047      	beq.n	88a66 <udd_ep_alloc+0x3b2>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   889d6:	f104 31ff 	add.w	r1, r4, #4294967295
   889da:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   889de:	eb09 05c2 	add.w	r5, r9, r2, lsl #3
			bool b_restart = ptr_job->busy;
   889e2:	7d28      	ldrb	r0, [r5, #20]
   889e4:	f000 0101 	and.w	r1, r0, #1
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   889e8:	f36f 0000 	bfc	r0, #0, #1
   889ec:	7528      	strb	r0, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   889ee:	ea4f 0384 	mov.w	r3, r4, lsl #2
   889f2:	199a      	adds	r2, r3, r6
   889f4:	6810      	ldr	r0, [r2, #0]
   889f6:	f040 0002 	orr.w	r0, r0, #2
   889fa:	6010      	str	r0, [r2, #0]
			udd_enable_endpoint(i);
   889fc:	f8d8 001c 	ldr.w	r0, [r8, #28]
   88a00:	f04f 0b01 	mov.w	fp, #1
   88a04:	fa0b fc04 	lsl.w	ip, fp, r4
   88a08:	ea4c 0000 	orr.w	r0, ip, r0
   88a0c:	f8c8 001c 	str.w	r0, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   88a10:	4453      	add	r3, sl
   88a12:	6818      	ldr	r0, [r3, #0]
   88a14:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   88a18:	f43f af12 	beq.w	88840 <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   88a1c:	6813      	ldr	r3, [r2, #0]
   88a1e:	f443 7000 	orr.w	r0, r3, #512	; 0x200
   88a22:	6010      	str	r0, [r2, #0]
			if (b_restart) {
   88a24:	b1f9      	cbz	r1, 88a66 <udd_ep_alloc+0x3b2>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   88a26:	68e9      	ldr	r1, [r5, #12]
   88a28:	692b      	ldr	r3, [r5, #16]
   88a2a:	1acb      	subs	r3, r1, r3
   88a2c:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88a2e:	6812      	ldr	r2, [r2, #0]
   88a30:	f412 7f80 	tst.w	r2, #256	; 0x100
   88a34:	d012      	beq.n	88a5c <udd_ep_alloc+0x3a8>
   88a36:	e013      	b.n	88a60 <udd_ep_alloc+0x3ac>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   88a38:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88a3a:	686a      	ldr	r2, [r5, #4]
   88a3c:	f8d5 e008 	ldr.w	lr, [r5, #8]
   88a40:	682d      	ldr	r5, [r5, #0]
   88a42:	9500      	str	r5, [sp, #0]
   88a44:	f3c1 0140 	ubfx	r1, r1, #1, #1
   88a48:	18d2      	adds	r2, r2, r3
   88a4a:	ebc3 030e 	rsb	r3, r3, lr
   88a4e:	f248 55b1 	movw	r5, #34225	; 0x85b1
   88a52:	f2c0 0508 	movt	r5, #8
   88a56:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   88a58:	b928      	cbnz	r0, 88a66 <udd_ep_alloc+0x3b2>
   88a5a:	e740      	b.n	888de <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88a5c:	4620      	mov	r0, r4
   88a5e:	e7eb      	b.n	88a38 <udd_ep_alloc+0x384>
   88a60:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   88a64:	e7e8      	b.n	88a38 <udd_ep_alloc+0x384>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   88a66:	f104 0401 	add.w	r4, r4, #1
   88a6a:	b2e4      	uxtb	r4, r4
   88a6c:	2c06      	cmp	r4, #6
   88a6e:	f47f aebd 	bne.w	887ec <udd_ep_alloc+0x138>
   88a72:	e725      	b.n	888c0 <udd_ep_alloc+0x20c>
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   88a74:	f104 33ff 	add.w	r3, r4, #4294967295
   88a78:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   88a7c:	eb09 05cc 	add.w	r5, r9, ip, lsl #3
			bool b_restart = ptr_job->busy;
   88a80:	7d29      	ldrb	r1, [r5, #20]
   88a82:	f001 0201 	and.w	r2, r1, #1
   88a86:	9203      	str	r2, [sp, #12]
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   88a88:	f36f 0100 	bfc	r1, #0, #1
   88a8c:	7529      	strb	r1, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   88a8e:	ea4f 0184 	mov.w	r1, r4, lsl #2
   88a92:	198a      	adds	r2, r1, r6
   88a94:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   88a98:	f040 0302 	orr.w	r3, r0, #2
   88a9c:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			udd_enable_endpoint(i);
   88aa0:	f8d8 301c 	ldr.w	r3, [r8, #28]
   88aa4:	f04f 0001 	mov.w	r0, #1
   88aa8:	fa00 fb04 	lsl.w	fp, r0, r4
   88aac:	ea4b 0303 	orr.w	r3, fp, r3
   88ab0:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   88ab4:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
   88ab8:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   88abc:	f43f aec0 	beq.w	88840 <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   88ac0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   88ac4:	f442 7300 	orr.w	r3, r2, #512	; 0x200
   88ac8:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			if (b_restart) {
   88acc:	9803      	ldr	r0, [sp, #12]
   88ace:	b300      	cbz	r0, 88b12 <udd_ep_alloc+0x45e>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   88ad0:	68ea      	ldr	r2, [r5, #12]
   88ad2:	692b      	ldr	r3, [r5, #16]
   88ad4:	1ad3      	subs	r3, r2, r3
   88ad6:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88ad8:	5989      	ldr	r1, [r1, r6]
   88ada:	f411 7f80 	tst.w	r1, #256	; 0x100
   88ade:	d013      	beq.n	88b08 <udd_ep_alloc+0x454>
   88ae0:	e014      	b.n	88b0c <udd_ep_alloc+0x458>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   88ae2:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88ae4:	f8d5 e004 	ldr.w	lr, [r5, #4]
   88ae8:	68ad      	ldr	r5, [r5, #8]
   88aea:	f859 203c 	ldr.w	r2, [r9, ip, lsl #3]
   88aee:	9200      	str	r2, [sp, #0]
   88af0:	f3c1 0140 	ubfx	r1, r1, #1, #1
   88af4:	eb0e 0203 	add.w	r2, lr, r3
   88af8:	1aeb      	subs	r3, r5, r3
   88afa:	f248 55b1 	movw	r5, #34225	; 0x85b1
   88afe:	f2c0 0508 	movt	r5, #8
   88b02:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   88b04:	b928      	cbnz	r0, 88b12 <udd_ep_alloc+0x45e>
   88b06:	e6ea      	b.n	888de <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88b08:	4620      	mov	r0, r4
   88b0a:	e7ea      	b.n	88ae2 <udd_ep_alloc+0x42e>
   88b0c:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   88b10:	e7e7      	b.n	88ae2 <udd_ep_alloc+0x42e>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   88b12:	f104 0401 	add.w	r4, r4, #1
   88b16:	b2e4      	uxtb	r4, r4
   88b18:	2c06      	cmp	r4, #6
   88b1a:	f47f ae67 	bne.w	887ec <udd_ep_alloc+0x138>
   88b1e:	e6cf      	b.n	888c0 <udd_ep_alloc+0x20c>
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
   88b20:	fa00 f603 	lsl.w	r6, r0, r3
   88b24:	4337      	orrs	r7, r6
   88b26:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   88b28:	69d6      	ldr	r6, [r2, #28]
   88b2a:	ea26 0505 	bic.w	r5, r6, r5
   88b2e:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   88b30:	680e      	ldr	r6, [r1, #0]
   88b32:	f026 0502 	bic.w	r5, r6, #2
   88b36:	600d      	str	r5, [r1, #0]
   88b38:	f103 33ff 	add.w	r3, r3, #4294967295
   88b3c:	f1a1 0104 	sub.w	r1, r1, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   88b40:	b2dd      	uxtb	r5, r3
   88b42:	42a5      	cmp	r5, r4
   88b44:	f67f aed1 	bls.w	888ea <udd_ep_alloc+0x236>
   88b48:	fa4f f68c 	sxtb.w	r6, ip
   88b4c:	2e00      	cmp	r6, #0
   88b4e:	f43f ae31 	beq.w	887b4 <udd_ep_alloc+0x100>
		if (Is_udd_endpoint_enabled(i)) {
   88b52:	69d6      	ldr	r6, [r2, #28]
   88b54:	fa00 f503 	lsl.w	r5, r0, r3
   88b58:	4235      	tst	r5, r6
   88b5a:	d009      	beq.n	88b70 <udd_ep_alloc+0x4bc>
			ep_allocated |= 1 << i;
   88b5c:	432f      	orrs	r7, r5
   88b5e:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   88b60:	69d6      	ldr	r6, [r2, #28]
   88b62:	ea26 0505 	bic.w	r5, r6, r5
   88b66:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   88b68:	680e      	ldr	r6, [r1, #0]
   88b6a:	f026 0502 	bic.w	r5, r6, #2
   88b6e:	600d      	str	r5, [r1, #0]
   88b70:	f103 33ff 	add.w	r3, r3, #4294967295
   88b74:	f1a1 0104 	sub.w	r1, r1, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   88b78:	b2dd      	uxtb	r5, r3
   88b7a:	42a5      	cmp	r5, r4
   88b7c:	bf88      	it	hi
   88b7e:	46a0      	movhi	r8, r4
   88b80:	f63f ae1a 	bhi.w	887b8 <udd_ep_alloc+0x104>
   88b84:	e6b1      	b.n	888ea <udd_ep_alloc+0x236>
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
   88b86:	fa00 f603 	lsl.w	r6, r0, r3
   88b8a:	4337      	orrs	r7, r6
   88b8c:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   88b8e:	69d4      	ldr	r4, [r2, #28]
   88b90:	ea24 0505 	bic.w	r5, r4, r5
   88b94:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   88b96:	f851 6c04 	ldr.w	r6, [r1, #-4]
   88b9a:	f026 0402 	bic.w	r4, r6, #2
   88b9e:	f841 4c04 	str.w	r4, [r1, #-4]
   88ba2:	f103 33ff 	add.w	r3, r3, #4294967295
   88ba6:	f1a9 0104 	sub.w	r1, r9, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   88baa:	b2dd      	uxtb	r5, r3
   88bac:	4545      	cmp	r5, r8
   88bae:	f63f ae03 	bhi.w	887b8 <udd_ep_alloc+0x104>
   88bb2:	4644      	mov	r4, r8
   88bb4:	e699      	b.n	888ea <udd_ep_alloc+0x236>
   88bb6:	bf00      	nop

00088bb8 <udd_ep_abort>:
#endif
}


void udd_ep_abort(udd_ep_id_t ep)
{
   88bb8:	b538      	push	{r3, r4, r5, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   88bba:	f000 030f 	and.w	r3, r0, #15
		udd_disable_in_send_interrupt(ep_index);
	} else
#endif
	{
		// Stop DMA transfer
		udd_disable_endpoint_dma_interrupt(ep_index);
   88bbe:	f103 32ff 	add.w	r2, r3, #4294967295
   88bc2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   88bc6:	fa01 f102 	lsl.w	r1, r1, r2
   88bca:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   88bce:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88bd2:	6151      	str	r1, [r2, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   88bd4:	f44f 4443 	mov.w	r4, #49920	; 0xc300
   88bd8:	f2c4 040a 	movt	r4, #16394	; 0x400a
   88bdc:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   88be0:	f04f 0400 	mov.w	r4, #0
   88be4:	608c      	str	r4, [r1, #8]
	}
	udd_disable_endpoint_interrupt(ep_index);
   88be6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   88bea:	fa01 f103 	lsl.w	r1, r1, r3
   88bee:	6151      	str	r1, [r2, #20]
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
   88bf0:	f010 0f80 	tst.w	r0, #128	; 0x80
   88bf4:	d01c      	beq.n	88c30 <udd_ep_abort+0x78>
		while(udd_nb_busy_bank(ep_index)) {
   88bf6:	ea4f 0383 	mov.w	r3, r3, lsl #2
   88bfa:	f24c 1530 	movw	r5, #49456	; 0xc130
   88bfe:	f2c4 050a 	movt	r5, #16394	; 0x400a
   88c02:	1959      	adds	r1, r3, r5
			udd_kill_last_in_bank(ep_index);
   88c04:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   88c08:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88c0c:	189c      	adds	r4, r3, r2
   88c0e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
   88c12:	f24c 12c0 	movw	r2, #49600	; 0xc1c0
   88c16:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88c1a:	189a      	adds	r2, r3, r2
   88c1c:	e004      	b.n	88c28 <udd_ep_abort+0x70>
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
			udd_kill_last_in_bank(ep_index);
   88c1e:	6025      	str	r5, [r4, #0]
			while(Is_udd_kill_last(ep_index));
   88c20:	6813      	ldr	r3, [r2, #0]
   88c22:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   88c26:	d1fb      	bne.n	88c20 <udd_ep_abort+0x68>
		udd_endpoint_dma_set_control(ep_index, 0);
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
   88c28:	680b      	ldr	r3, [r1, #0]
   88c2a:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   88c2e:	d1f6      	bne.n	88c1e <udd_ep_abort+0x66>
			udd_kill_last_in_bank(ep_index);
			while(Is_udd_kill_last(ep_index));
		}
	}
	udd_ep_abort_job(ep);
   88c30:	f247 2175 	movw	r1, #29301	; 0x7275
   88c34:	f2c0 0108 	movt	r1, #8
   88c38:	4788      	blx	r1
   88c3a:	bd38      	pop	{r3, r4, r5, pc}

00088c3c <udd_ep_wait_stall_clear>:
}


bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
   88c3c:	b510      	push	{r4, lr}
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   88c3e:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   88c42:	2805      	cmp	r0, #5
   88c44:	d831      	bhi.n	88caa <udd_ep_wait_stall_clear+0x6e>
		return false;
	}

	ptr_job = &udd_ep_job[ep - 1];

	if (!Is_udd_endpoint_enabled(ep)) {
   88c46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88c4a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88c4e:	69db      	ldr	r3, [r3, #28]
   88c50:	f04f 0201 	mov.w	r2, #1
   88c54:	fa02 f200 	lsl.w	r2, r2, r0
   88c58:	421a      	tst	r2, r3
   88c5a:	d029      	beq.n	88cb0 <udd_ep_wait_stall_clear+0x74>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	ptr_job = &udd_ep_job[ep - 1];
   88c5c:	f100 33ff 	add.w	r3, r0, #4294967295
   88c60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   88c64:	f241 32f8 	movw	r2, #5112	; 0x13f8
   88c68:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88c6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (!Is_udd_endpoint_enabled(ep)) {
		return false; // Endpoint not enabled
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
   88c70:	7d1a      	ldrb	r2, [r3, #20]
   88c72:	f012 0f01 	tst.w	r2, #1
   88c76:	d11e      	bne.n	88cb6 <udd_ep_wait_stall_clear+0x7a>
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
   88c78:	f24c 14c0 	movw	r4, #49600	; 0xc1c0
   88c7c:	f2c4 040a 	movt	r4, #16394	; 0x400a
   88c80:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   88c84:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   88c88:	d103      	bne.n	88c92 <udd_ep_wait_stall_clear+0x56>
			|| ptr_job->stall_requested) {
   88c8a:	f002 0204 	and.w	r2, r2, #4
   88c8e:	b2d0      	uxtb	r0, r2
   88c90:	b138      	cbz	r0, 88ca2 <udd_ep_wait_stall_clear+0x66>
		// Endpoint halted then registes the callback
		ptr_job->busy = true;
   88c92:	7d1a      	ldrb	r2, [r3, #20]
   88c94:	f042 0001 	orr.w	r0, r2, #1
   88c98:	7518      	strb	r0, [r3, #20]
		ptr_job->call_nohalt = callback;
   88c9a:	6019      	str	r1, [r3, #0]
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
   88c9c:	f04f 0001 	mov.w	r0, #1

	if (Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		// Endpoint halted then registes the callback
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
   88ca0:	bd10      	pop	{r4, pc}
	} else {
		// endpoint not halted then call directly callback
		callback();
   88ca2:	4788      	blx	r1
	}
	return true;
   88ca4:	f04f 0001 	mov.w	r0, #1
   88ca8:	bd10      	pop	{r4, pc}
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
   88caa:	f04f 0000 	mov.w	r0, #0
   88cae:	bd10      	pop	{r4, pc}
	}

	ptr_job = &udd_ep_job[ep - 1];

	if (!Is_udd_endpoint_enabled(ep)) {
		return false; // Endpoint not enabled
   88cb0:	f04f 0000 	mov.w	r0, #0
   88cb4:	bd10      	pop	{r4, pc}
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
   88cb6:	f04f 0000 	mov.w	r0, #0
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
   88cba:	bd10      	pop	{r4, pc}

00088cbc <udd_test_mode_j>:

#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
	udd_enable_hs_test_mode();
   88cbc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88cc0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88cc4:	681a      	ldr	r2, [r3, #0]
   88cc6:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   88cca:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   88cce:	6019      	str	r1, [r3, #0]
	udd_enable_hs_test_mode_j();
   88cd0:	681a      	ldr	r2, [r3, #0]
   88cd2:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
   88cd6:	6018      	str	r0, [r3, #0]
   88cd8:	4770      	bx	lr
   88cda:	bf00      	nop

00088cdc <udd_test_mode_k>:
}


void udd_test_mode_k(void)
{
	udd_enable_hs_test_mode();
   88cdc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88ce0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88ce4:	681a      	ldr	r2, [r3, #0]
   88ce6:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   88cea:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   88cee:	6019      	str	r1, [r3, #0]
	udd_enable_hs_test_mode_k();
   88cf0:	681a      	ldr	r2, [r3, #0]
   88cf2:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   88cf6:	6018      	str	r0, [r3, #0]
   88cf8:	4770      	bx	lr
   88cfa:	bf00      	nop

00088cfc <udd_test_mode_se0_nak>:
}


void udd_test_mode_se0_nak(void)
{
	udd_enable_hs_test_mode();
   88cfc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88d00:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88d04:	681a      	ldr	r2, [r3, #0]
   88d06:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   88d0a:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   88d0e:	6019      	str	r1, [r3, #0]
   88d10:	4770      	bx	lr
   88d12:	bf00      	nop

00088d14 <udd_test_mode_packet>:
}


void udd_test_mode_packet(void)
{
   88d14:	b470      	push	{r4, r5, r6}
   88d16:	b08f      	sub	sp, #60	; 0x3c
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   88d18:	f64b 3580 	movw	r5, #48000	; 0xbb80
   88d1c:	f2c0 0508 	movt	r5, #8
   88d20:	ac00      	add	r4, sp, #0
   88d22:	6828      	ldr	r0, [r5, #0]
   88d24:	6869      	ldr	r1, [r5, #4]
   88d26:	68aa      	ldr	r2, [r5, #8]
   88d28:	68eb      	ldr	r3, [r5, #12]
   88d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   88d2c:	f105 0510 	add.w	r5, r5, #16
   88d30:	4626      	mov	r6, r4
   88d32:	6828      	ldr	r0, [r5, #0]
   88d34:	6869      	ldr	r1, [r5, #4]
   88d36:	68aa      	ldr	r2, [r5, #8]
   88d38:	68eb      	ldr	r3, [r5, #12]
   88d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   88d3c:	6928      	ldr	r0, [r5, #16]
   88d3e:	6969      	ldr	r1, [r5, #20]
   88d40:	69aa      	ldr	r2, [r5, #24]
   88d42:	69eb      	ldr	r3, [r5, #28]
   88d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   88d46:	6a28      	ldr	r0, [r5, #32]
   88d48:	f846 0f20 	str.w	r0, [r6, #32]!
   88d4c:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   88d50:	f105 0520 	add.w	r5, r5, #32
   88d54:	7131      	strb	r1, [r6, #4]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   88d56:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   88d5a:	f2c4 040a 	movt	r4, #16394	; 0x400a
   88d5e:	69e2      	ldr	r2, [r4, #28]
   88d60:	f022 0301 	bic.w	r3, r2, #1
   88d64:	61e3      	str	r3, [r4, #28]
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
   88d66:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   88d6a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88d6e:	6801      	ldr	r1, [r0, #0]
   88d70:	f421 52cb 	bic.w	r2, r1, #6496	; 0x1960
   88d74:	f022 031c 	bic.w	r3, r2, #28
   88d78:	f443 5189 	orr.w	r1, r3, #4384	; 0x1120
   88d7c:	f041 0210 	orr.w	r2, r1, #16
   88d80:	6002      	str	r2, [r0, #0]
			64, UOTGHS_DEVEPTCFG_EPBK_1_BANK);
	udd_allocate_memory(0);
   88d82:	6803      	ldr	r3, [r0, #0]
   88d84:	f043 0102 	orr.w	r1, r3, #2
   88d88:	6001      	str	r1, [r0, #0]
	udd_enable_endpoint(0);
   88d8a:	69e0      	ldr	r0, [r4, #28]
   88d8c:	f040 0201 	orr.w	r2, r0, #1
   88d90:	61e2      	str	r2, [r4, #28]

	udd_enable_hs_test_mode();
   88d92:	6823      	ldr	r3, [r4, #0]
   88d94:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
   88d98:	f441 6000 	orr.w	r0, r1, #2048	; 0x800
   88d9c:	6020      	str	r0, [r4, #0]
	udd_enable_hs_test_mode_packet();
   88d9e:	6822      	ldr	r2, [r4, #0]
   88da0:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
   88da4:	6023      	str	r3, [r4, #0]

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
   88da6:	f04f 0435 	mov.w	r4, #53	; 0x35
   88daa:	f2c2 0418 	movt	r4, #8216	; 0x2018
   88dae:	f10d 31ff 	add.w	r1, sp, #4294967295
		*ptr_dest++ = *ptr_src++;
   88db2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   88db6:	f04f 0300 	mov.w	r3, #0
   88dba:	f2c2 0318 	movt	r3, #8216	; 0x2018
   88dbe:	f803 0b01 	strb.w	r0, [r3], #1
   88dc2:	f101 0001 	add.w	r0, r1, #1
   88dc6:	7849      	ldrb	r1, [r1, #1]
   88dc8:	461a      	mov	r2, r3
   88dca:	f802 1b01 	strb.w	r1, [r2], #1
   88dce:	f100 0101 	add.w	r1, r0, #1
   88dd2:	7840      	ldrb	r0, [r0, #1]
   88dd4:	7058      	strb	r0, [r3, #1]
   88dd6:	f102 0301 	add.w	r3, r2, #1

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
   88dda:	42a3      	cmp	r3, r4
   88ddc:	d1f1      	bne.n	88dc2 <udd_test_mode_packet+0xae>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ack_fifocon(0);
   88dde:	f24c 2120 	movw	r1, #49696	; 0xc220
   88de2:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88de6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   88dea:	600a      	str	r2, [r1, #0]
}
   88dec:	b00f      	add	sp, #60	; 0x3c
   88dee:	bc70      	pop	{r4, r5, r6}
   88df0:	4770      	bx	lr
   88df2:	bf00      	nop

00088df4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   88df4:	e7fe      	b.n	88df4 <Dummy_Handler>
   88df6:	bf00      	nop

00088df8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   88df8:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   88dfa:	f240 0300 	movw	r3, #0
   88dfe:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88e02:	f64b 424c 	movw	r2, #48204	; 0xbc4c
   88e06:	f2c0 0208 	movt	r2, #8
   88e0a:	429a      	cmp	r2, r3
   88e0c:	d003      	beq.n	88e16 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   88e0e:	4840      	ldr	r0, [pc, #256]	; (88f10 <Reset_Handler+0x118>)
   88e10:	4940      	ldr	r1, [pc, #256]	; (88f14 <Reset_Handler+0x11c>)
   88e12:	4281      	cmp	r1, r0
   88e14:	d304      	bcc.n	88e20 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   88e16:	4b40      	ldr	r3, [pc, #256]	; (88f18 <Reset_Handler+0x120>)
   88e18:	4a40      	ldr	r2, [pc, #256]	; (88f1c <Reset_Handler+0x124>)
   88e1a:	429a      	cmp	r2, r3
   88e1c:	d325      	bcc.n	88e6a <Reset_Handler+0x72>
   88e1e:	e042      	b.n	88ea6 <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   88e20:	4d3f      	ldr	r5, [pc, #252]	; (88f20 <Reset_Handler+0x128>)
   88e22:	4c40      	ldr	r4, [pc, #256]	; (88f24 <Reset_Handler+0x12c>)
   88e24:	1b63      	subs	r3, r4, r5
   88e26:	f023 0503 	bic.w	r5, r3, #3
   88e2a:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   88e2e:	f240 0200 	movw	r2, #0
   88e32:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88e36:	f64b 414c 	movw	r1, #48204	; 0xbc4c
   88e3a:	f2c0 0108 	movt	r1, #8
   88e3e:	f105 0004 	add.w	r0, r5, #4
   88e42:	f3c5 0480 	ubfx	r4, r5, #2, #1
   88e46:	585d      	ldr	r5, [r3, r1]
   88e48:	509d      	str	r5, [r3, r2]
   88e4a:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   88e4e:	4283      	cmp	r3, r0
   88e50:	d155      	bne.n	88efe <Reset_Handler+0x106>
   88e52:	e7e0      	b.n	88e16 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   88e54:	585d      	ldr	r5, [r3, r1]
   88e56:	509d      	str	r5, [r3, r2]
   88e58:	f103 0304 	add.w	r3, r3, #4
   88e5c:	585c      	ldr	r4, [r3, r1]
   88e5e:	509c      	str	r4, [r3, r2]
   88e60:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   88e64:	4283      	cmp	r3, r0
   88e66:	d1f5      	bne.n	88e54 <Reset_Handler+0x5c>
   88e68:	e7d5      	b.n	88e16 <Reset_Handler+0x1e>
   88e6a:	4d2f      	ldr	r5, [pc, #188]	; (88f28 <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   88e6c:	492f      	ldr	r1, [pc, #188]	; (88f2c <Reset_Handler+0x134>)
   88e6e:	1b48      	subs	r0, r1, r5
   88e70:	f020 0403 	bic.w	r4, r0, #3
   88e74:	f640 2380 	movw	r3, #2688	; 0xa80
   88e78:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88e7c:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   88e7e:	f04f 0100 	mov.w	r1, #0
   88e82:	1b50      	subs	r0, r2, r5
   88e84:	f1a0 0004 	sub.w	r0, r0, #4
   88e88:	f3c0 0480 	ubfx	r4, r0, #2, #1
   88e8c:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   88e90:	4295      	cmp	r5, r2
   88e92:	d12d      	bne.n	88ef0 <Reset_Handler+0xf8>
   88e94:	e007      	b.n	88ea6 <Reset_Handler+0xae>
   88e96:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   88e9a:	6069      	str	r1, [r5, #4]
   88e9c:	f105 0508 	add.w	r5, r5, #8
   88ea0:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   88ea2:	4295      	cmp	r5, r2
   88ea4:	d1f7      	bne.n	88e96 <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   88ea6:	f240 0500 	movw	r5, #0
   88eaa:	f2c0 0508 	movt	r5, #8
   88eae:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   88eb2:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   88eb6:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   88eba:	f2ce 0000 	movt	r0, #57344	; 0xe000
   88ebe:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   88ec0:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   88ec4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   88ec8:	d207      	bcs.n	88eda <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   88eca:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   88ece:	f2ce 0300 	movt	r3, #57344	; 0xe000
   88ed2:	689d      	ldr	r5, [r3, #8]
   88ed4:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   88ed8:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   88eda:	f249 31b5 	movw	r1, #37813	; 0x93b5
   88ede:	f2c0 0108 	movt	r1, #8
   88ee2:	4788      	blx	r1

	/* Branch to main function */
	main();
   88ee4:	f249 202d 	movw	r0, #37421	; 0x922d
   88ee8:	f2c0 0008 	movt	r0, #8
   88eec:	4780      	blx	r0
   88eee:	e7fe      	b.n	88eee <Reset_Handler+0xf6>
   88ef0:	2c00      	cmp	r4, #0
   88ef2:	d0d0      	beq.n	88e96 <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   88ef4:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   88ef8:	4295      	cmp	r5, r2
   88efa:	d1cc      	bne.n	88e96 <Reset_Handler+0x9e>
   88efc:	e7d3      	b.n	88ea6 <Reset_Handler+0xae>
   88efe:	2c00      	cmp	r4, #0
   88f00:	d0a8      	beq.n	88e54 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   88f02:	585c      	ldr	r4, [r3, r1]
   88f04:	509c      	str	r4, [r3, r2]
   88f06:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   88f0a:	4283      	cmp	r3, r0
   88f0c:	d1a2      	bne.n	88e54 <Reset_Handler+0x5c>
   88f0e:	e782      	b.n	88e16 <Reset_Handler+0x1e>
   88f10:	20070a80 	.word	0x20070a80
   88f14:	20070000 	.word	0x20070000
   88f18:	200723ac 	.word	0x200723ac
   88f1c:	20070a80 	.word	0x20070a80
   88f20:	20070004 	.word	0x20070004
   88f24:	20070a83 	.word	0x20070a83
   88f28:	20070a7c 	.word	0x20070a7c
   88f2c:	200723a7 	.word	0x200723a7

00088f30 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   88f30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   88f34:	f2c4 030e 	movt	r3, #16398	; 0x400e
   88f38:	6b18      	ldr	r0, [r3, #48]	; 0x30
   88f3a:	f000 0103 	and.w	r1, r0, #3
   88f3e:	2903      	cmp	r1, #3
   88f40:	f200 80b1 	bhi.w	890a6 <SystemCoreClockUpdate+0x176>
   88f44:	e8df f001 	tbb	[pc, r1]
   88f48:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   88f4c:	f641 2010 	movw	r0, #6672	; 0x1a10
   88f50:	f2c4 000e 	movt	r0, #16398	; 0x400e
   88f54:	6941      	ldr	r1, [r0, #20]
   88f56:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   88f5a:	f240 233c 	movw	r3, #572	; 0x23c
   88f5e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88f62:	bf14      	ite	ne
   88f64:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   88f68:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   88f6c:	601a      	str	r2, [r3, #0]
   88f6e:	e09a      	b.n	890a6 <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   88f70:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   88f74:	f2c4 030e 	movt	r3, #16398	; 0x400e
   88f78:	6a18      	ldr	r0, [r3, #32]
   88f7a:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   88f7e:	d009      	beq.n	88f94 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   88f80:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   88f84:	f2c0 03b7 	movt	r3, #183	; 0xb7
   88f88:	f240 223c 	movw	r2, #572	; 0x23c
   88f8c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88f90:	6013      	str	r3, [r2, #0]
   88f92:	e088      	b.n	890a6 <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   88f94:	f44f 6110 	mov.w	r1, #2304	; 0x900
   88f98:	f2c0 013d 	movt	r1, #61	; 0x3d
   88f9c:	f240 223c 	movw	r2, #572	; 0x23c
   88fa0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88fa4:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   88fa6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   88faa:	f2c4 030e 	movt	r3, #16398	; 0x400e
   88fae:	6a18      	ldr	r0, [r3, #32]
   88fb0:	f000 0170 	and.w	r1, r0, #112	; 0x70
   88fb4:	2910      	cmp	r1, #16
   88fb6:	d002      	beq.n	88fbe <SystemCoreClockUpdate+0x8e>
   88fb8:	2920      	cmp	r1, #32
   88fba:	d174      	bne.n	890a6 <SystemCoreClockUpdate+0x176>
   88fbc:	e009      	b.n	88fd2 <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   88fbe:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   88fc2:	f2c0 007a 	movt	r0, #122	; 0x7a
   88fc6:	f240 213c 	movw	r1, #572	; 0x23c
   88fca:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88fce:	6008      	str	r0, [r1, #0]
				break;
   88fd0:	e069      	b.n	890a6 <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   88fd2:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   88fd6:	f2c0 03b7 	movt	r3, #183	; 0xb7
   88fda:	f240 223c 	movw	r2, #572	; 0x23c
   88fde:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88fe2:	6013      	str	r3, [r2, #0]
				break;
   88fe4:	e05f      	b.n	890a6 <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   88fe6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   88fea:	f2c4 020e 	movt	r2, #16398	; 0x400e
   88fee:	6a13      	ldr	r3, [r2, #32]
   88ff0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   88ff4:	d009      	beq.n	8900a <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   88ff6:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   88ffa:	f2c0 01b7 	movt	r1, #183	; 0xb7
   88ffe:	f240 223c 	movw	r2, #572	; 0x23c
   89002:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89006:	6011      	str	r1, [r2, #0]
   89008:	e027      	b.n	8905a <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8900a:	f44f 6010 	mov.w	r0, #2304	; 0x900
   8900e:	f2c0 003d 	movt	r0, #61	; 0x3d
   89012:	f240 213c 	movw	r1, #572	; 0x23c
   89016:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8901a:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8901c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   89020:	f2c4 020e 	movt	r2, #16398	; 0x400e
   89024:	6a13      	ldr	r3, [r2, #32]
   89026:	f003 0070 	and.w	r0, r3, #112	; 0x70
   8902a:	2810      	cmp	r0, #16
   8902c:	d002      	beq.n	89034 <SystemCoreClockUpdate+0x104>
   8902e:	2820      	cmp	r0, #32
   89030:	d113      	bne.n	8905a <SystemCoreClockUpdate+0x12a>
   89032:	e009      	b.n	89048 <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   89034:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   89038:	f2c0 037a 	movt	r3, #122	; 0x7a
   8903c:	f240 203c 	movw	r0, #572	; 0x23c
   89040:	f2c2 0007 	movt	r0, #8199	; 0x2007
   89044:	6003      	str	r3, [r0, #0]
				break;
   89046:	e008      	b.n	8905a <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   89048:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   8904c:	f2c0 01b7 	movt	r1, #183	; 0xb7
   89050:	f240 223c 	movw	r2, #572	; 0x23c
   89054:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89058:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8905a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8905e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89062:	6b18      	ldr	r0, [r3, #48]	; 0x30
   89064:	f000 0103 	and.w	r1, r0, #3
   89068:	2902      	cmp	r1, #2
   8906a:	d113      	bne.n	89094 <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8906c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   89070:	f2c4 010e 	movt	r1, #16398	; 0x400e
   89074:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   89076:	6a89      	ldr	r1, [r1, #40]	; 0x28
   89078:	f240 233c 	movw	r3, #572	; 0x23c
   8907c:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   89080:	f3c0 400a 	ubfx	r0, r0, #16, #11
   89084:	681a      	ldr	r2, [r3, #0]
   89086:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8908a:	b2c9      	uxtb	r1, r1
   8908c:	fbb0 f2f1 	udiv	r2, r0, r1
   89090:	601a      	str	r2, [r3, #0]
   89092:	e008      	b.n	890a6 <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   89094:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   89098:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   8909c:	f240 223c 	movw	r2, #572	; 0x23c
   890a0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   890a4:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   890a6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   890aa:	f2c4 020e 	movt	r2, #16398	; 0x400e
   890ae:	6b10      	ldr	r0, [r2, #48]	; 0x30
   890b0:	f000 0170 	and.w	r1, r0, #112	; 0x70
   890b4:	2970      	cmp	r1, #112	; 0x70
   890b6:	d10e      	bne.n	890d6 <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   890b8:	f240 233c 	movw	r3, #572	; 0x23c
   890bc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   890c0:	6818      	ldr	r0, [r3, #0]
   890c2:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   890c6:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   890ca:	fba2 0100 	umull	r0, r1, r2, r0
   890ce:	ea4f 0051 	mov.w	r0, r1, lsr #1
   890d2:	6018      	str	r0, [r3, #0]
   890d4:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   890d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   890da:	f2c4 030e 	movt	r3, #16398	; 0x400e
   890de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   890e0:	f240 203c 	movw	r0, #572	; 0x23c
   890e4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   890e8:	f3c2 1102 	ubfx	r1, r2, #4, #3
   890ec:	6803      	ldr	r3, [r0, #0]
   890ee:	fa23 f301 	lsr.w	r3, r3, r1
   890f2:	6003      	str	r3, [r0, #0]
   890f4:	4770      	bx	lr
   890f6:	bf00      	nop

000890f8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   890f8:	f64e 23bf 	movw	r3, #60095	; 0xeabf
   890fc:	f2c0 1321 	movt	r3, #289	; 0x121
   89100:	4298      	cmp	r0, r3
   89102:	d80c      	bhi.n	8911e <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   89104:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   89108:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8910c:	f04f 0000 	mov.w	r0, #0
   89110:	6018      	str	r0, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   89112:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   89116:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8911a:	6008      	str	r0, [r1, #0]
   8911c:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   8911e:	f24f 017f 	movw	r1, #61567	; 0xf07f
   89122:	f2c0 21fa 	movt	r1, #762	; 0x2fa
   89126:	4288      	cmp	r0, r1
   89128:	d80c      	bhi.n	89144 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   8912a:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   8912e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   89132:	f44f 7180 	mov.w	r1, #256	; 0x100
   89136:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   89138:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   8913c:	f2c4 020e 	movt	r2, #16398	; 0x400e
   89140:	6011      	str	r1, [r2, #0]
   89142:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   89144:	f648 73ff 	movw	r3, #36863	; 0x8fff
   89148:	f2c0 33d0 	movt	r3, #976	; 0x3d0
   8914c:	4298      	cmp	r0, r3
   8914e:	d80c      	bhi.n	8916a <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   89150:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   89154:	f2c4 010e 	movt	r1, #16398	; 0x400e
   89158:	f44f 7200 	mov.w	r2, #512	; 0x200
   8915c:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   8915e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   89162:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89166:	601a      	str	r2, [r3, #0]
   89168:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   8916a:	f24b 31ff 	movw	r1, #46079	; 0xb3ff
   8916e:	f2c0 41c4 	movt	r1, #1220	; 0x4c4
   89172:	4288      	cmp	r0, r1
   89174:	d80c      	bhi.n	89190 <system_init_flash+0x98>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   89176:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   8917a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8917e:	f44f 7240 	mov.w	r2, #768	; 0x300
   89182:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   89184:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   89188:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8918c:	6002      	str	r2, [r0, #0]
   8918e:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   89190:	f644 237f 	movw	r3, #19071	; 0x4a7f
   89194:	f2c0 535d 	movt	r3, #1373	; 0x55d
   89198:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   8919a:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   8919e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   891a2:	bf94      	ite	ls
   891a4:	f44f 6280 	movls.w	r2, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   891a8:	f44f 62a0 	movhi.w	r2, #1280	; 0x500
   891ac:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   891ae:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   891b2:	f2c4 010e 	movt	r1, #16398	; 0x400e
   891b6:	600a      	str	r2, [r1, #0]
   891b8:	4770      	bx	lr
   891ba:	bf00      	nop

000891bc <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   891bc:	f241 4378 	movw	r3, #5240	; 0x1478
   891c0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   891c4:	6819      	ldr	r1, [r3, #0]
   891c6:	b941      	cbnz	r1, 891da <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
   891c8:	f241 4378 	movw	r3, #5240	; 0x1478
   891cc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   891d0:	f244 32b0 	movw	r2, #17328	; 0x43b0
   891d4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   891d8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   891da:	f241 4178 	movw	r1, #5240	; 0x1478
   891de:	f2c2 0107 	movt	r1, #8199	; 0x2007
   891e2:	680b      	ldr	r3, [r1, #0]

	heap += incr;
   891e4:	1818      	adds	r0, r3, r0
   891e6:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
   891e8:	4618      	mov	r0, r3
   891ea:	4770      	bx	lr

000891ec <main_msc_enable>:
static bool main_b_cdc_enable = false;


bool main_msc_enable(void)
{
	main_b_msc_enable = true;
   891ec:	f04f 0001 	mov.w	r0, #1
   891f0:	f241 437c 	movw	r3, #5244	; 0x147c
   891f4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   891f8:	7018      	strb	r0, [r3, #0]
	return true;
}
   891fa:	4770      	bx	lr

000891fc <main_msc_disable>:
void main_msc_disable(void)
{
	main_b_msc_enable = false;
   891fc:	f241 437c 	movw	r3, #5244	; 0x147c
   89200:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89204:	f04f 0200 	mov.w	r2, #0
   89208:	701a      	strb	r2, [r3, #0]
   8920a:	4770      	bx	lr

0008920c <main_cdc_enable>:
}
bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
   8920c:	f04f 0001 	mov.w	r0, #1
   89210:	f241 437d 	movw	r3, #5245	; 0x147d
   89214:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89218:	7018      	strb	r0, [r3, #0]
	return true;
}
   8921a:	4770      	bx	lr

0008921c <main_cdc_disable>:
void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
   8921c:	f241 437d 	movw	r3, #5245	; 0x147d
   89220:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89224:	f04f 0200 	mov.w	r2, #0
   89228:	701a      	strb	r2, [r3, #0]
   8922a:	4770      	bx	lr

0008922c <main>:
}

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   8922c:	b570      	push	{r4, r5, r6, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
   8922e:	f04f 0101 	mov.w	r1, #1
   89232:	f240 2338 	movw	r3, #568	; 0x238
   89236:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8923a:	7019      	strb	r1, [r3, #0]
   8923c:	f3bf 8f5f 	dmb	sy
   89240:	b662      	cpsie	i
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
   89242:	f242 3088 	movw	r0, #9096	; 0x2388
   89246:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8924a:	f04f 0200 	mov.w	r2, #0
   8924e:	7002      	strb	r2, [r0, #0]
   89250:	7042      	strb	r2, [r0, #1]
   89252:	7082      	strb	r2, [r0, #2]
   89254:	70c2      	strb	r2, [r0, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   89256:	7101      	strb	r1, [r0, #4]

	// Initialize the sleep manager
	sleepmgr_init();

	sysclk_init();
   89258:	f244 34dd 	movw	r4, #17373	; 0x43dd
   8925c:	f2c0 0408 	movt	r4, #8
   89260:	47a0      	blx	r4
	board_init();
   89262:	f246 75f9 	movw	r5, #26617	; 0x67f9
   89266:	f2c0 0508 	movt	r5, #8
   8926a:	47a8      	blx	r5
	ui_init();
   8926c:	f244 361d 	movw	r6, #17181	; 0x431d
   89270:	f2c0 0608 	movt	r6, #8
   89274:	47b0      	blx	r6
	ui_powerdown();
   89276:	f244 3145 	movw	r1, #17221	; 0x4345
   8927a:	f2c0 0108 	movt	r1, #8
   8927e:	4788      	blx	r1
	#define VDD_MCI_GPIO			(PIO_PB24_IDX)
	#define VDD_MCI_PIO_ID			ID_PIOB
	#define VDD_MCI_ACTIVE_LEVEL    IOPORT_PIN_LEVEL_LOW
	#define VDD_MCI_INACTIVE_LEVEL  IOPORT_PIN_LEVEL_HIGH
	/* Enable power to the sd card slot */
	pmc_enable_periph_clk(VDD_MCI_PIO_ID);
   89280:	f04f 000c 	mov.w	r0, #12
   89284:	f646 5375 	movw	r3, #28021	; 0x6d75
   89288:	f2c0 0308 	movt	r3, #8
   8928c:	4798      	blx	r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8928e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   89292:	f2c4 000e 	movt	r0, #16398	; 0x400e
   89296:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   8929a:	6102      	str	r2, [r0, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8929c:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   892a0:	6342      	str	r2, [r0, #52]	; 0x34
	ioport_set_pin_dir(VDD_MCI_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(VDD_MCI_GPIO, VDD_MCI_ACTIVE_LEVEL);
	delay_ms(200);
   892a2:	f44f 409f 	mov.w	r0, #20352	; 0x4f80
   892a6:	f2c0 0012 	movt	r0, #18
   892aa:	f240 0401 	movw	r4, #1
   892ae:	f2c2 0407 	movt	r4, #8199	; 0x2007
   892b2:	47a0      	blx	r4

	/* Initialize SD MMC stack */
	sd_mmc_init();
   892b4:	f240 4569 	movw	r5, #1129	; 0x469
   892b8:	f2c0 0508 	movt	r5, #8
   892bc:	47a8      	blx	r5

	// Start USB stack to authorize VBus monitoring
	udc_start();
   892be:	f645 7621 	movw	r6, #24353	; 0x5f21
   892c2:	f2c0 0608 	movt	r6, #8
   892c6:	47b0      	blx	r6

	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) 
	{
		console_process();
   892c8:	f242 451d 	movw	r5, #9245	; 0x241d
   892cc:	f2c0 0508 	movt	r5, #8

		if (main_b_msc_enable) 
   892d0:	f241 447c 	movw	r4, #5244	; 0x147c
   892d4:	f2c2 0407 	movt	r4, #8199	; 0x2007
		{
			if (!udi_msc_process_trans()) 
   892d8:	f645 367d 	movw	r6, #23421	; 0x5b7d
   892dc:	f2c0 0608 	movt	r6, #8

	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) 
	{
		console_process();
   892e0:	47a8      	blx	r5

		if (main_b_msc_enable) 
   892e2:	7821      	ldrb	r1, [r4, #0]
   892e4:	2900      	cmp	r1, #0
   892e6:	d0fb      	beq.n	892e0 <main+0xb4>
		{
			if (!udi_msc_process_trans()) 
   892e8:	47b0      	blx	r6
   892ea:	e7f9      	b.n	892e0 <main+0xb4>

000892ec <__register_exitproc>:
   892ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   892f0:	4698      	mov	r8, r3
   892f2:	4b23      	ldr	r3, [pc, #140]	; (89380 <__register_exitproc+0x94>)
   892f4:	4606      	mov	r6, r0
   892f6:	681c      	ldr	r4, [r3, #0]
   892f8:	460f      	mov	r7, r1
   892fa:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   892fe:	4691      	mov	r9, r2
   89300:	b918      	cbnz	r0, 8930a <__register_exitproc+0x1e>
   89302:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   89306:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   8930a:	6841      	ldr	r1, [r0, #4]
   8930c:	291f      	cmp	r1, #31
   8930e:	dd16      	ble.n	8933e <__register_exitproc+0x52>
   89310:	481c      	ldr	r0, [pc, #112]	; (89384 <__register_exitproc+0x98>)
   89312:	b918      	cbnz	r0, 8931c <__register_exitproc+0x30>
   89314:	f04f 30ff 	mov.w	r0, #4294967295
   89318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8931c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   89320:	f3af 8000 	nop.w
   89324:	2800      	cmp	r0, #0
   89326:	d0f5      	beq.n	89314 <__register_exitproc+0x28>
   89328:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   8932c:	2500      	movs	r5, #0
   8932e:	6045      	str	r5, [r0, #4]
   89330:	6002      	str	r2, [r0, #0]
   89332:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   89336:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   8933a:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   8933e:	b1b6      	cbz	r6, 8936e <__register_exitproc+0x82>
   89340:	6844      	ldr	r4, [r0, #4]
   89342:	2201      	movs	r2, #1
   89344:	fa02 f204 	lsl.w	r2, r2, r4
   89348:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   8934c:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   89350:	4311      	orrs	r1, r2
   89352:	2e02      	cmp	r6, #2
   89354:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   89358:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   8935c:	461c      	mov	r4, r3
   8935e:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   89362:	d104      	bne.n	8936e <__register_exitproc+0x82>
   89364:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   89368:	431a      	orrs	r2, r3
   8936a:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   8936e:	6841      	ldr	r1, [r0, #4]
   89370:	1c8b      	adds	r3, r1, #2
   89372:	1c4a      	adds	r2, r1, #1
   89374:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   89378:	6042      	str	r2, [r0, #4]
   8937a:	2000      	movs	r0, #0
   8937c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   89380:	0008bbb8 	.word	0x0008bbb8
   89384:	00000000 	.word	0x00000000

00089388 <__libc_fini_array>:
   89388:	b570      	push	{r4, r5, r6, lr}
   8938a:	4b08      	ldr	r3, [pc, #32]	; (893ac <__libc_fini_array+0x24>)
   8938c:	4c08      	ldr	r4, [pc, #32]	; (893b0 <__libc_fini_array+0x28>)
   8938e:	2500      	movs	r5, #0
   89390:	1ae0      	subs	r0, r4, r3
   89392:	1084      	asrs	r4, r0, #2
   89394:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   89398:	3d04      	subs	r5, #4
   8939a:	b11c      	cbz	r4, 893a4 <__libc_fini_array+0x1c>
   8939c:	5972      	ldr	r2, [r6, r5]
   8939e:	4790      	blx	r2
   893a0:	3c01      	subs	r4, #1
   893a2:	e7f9      	b.n	89398 <__libc_fini_array+0x10>
   893a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   893a8:	f002 bc44 	b.w	8bc34 <_fini>
   893ac:	0008bc40 	.word	0x0008bc40
   893b0:	0008bc44 	.word	0x0008bc44

000893b4 <__libc_init_array>:
   893b4:	b538      	push	{r3, r4, r5, lr}
   893b6:	4d0e      	ldr	r5, [pc, #56]	; (893f0 <__libc_init_array+0x3c>)
   893b8:	4b0e      	ldr	r3, [pc, #56]	; (893f4 <__libc_init_array+0x40>)
   893ba:	2400      	movs	r4, #0
   893bc:	1ae8      	subs	r0, r5, r3
   893be:	1085      	asrs	r5, r0, #2
   893c0:	42ac      	cmp	r4, r5
   893c2:	d005      	beq.n	893d0 <__libc_init_array+0x1c>
   893c4:	490b      	ldr	r1, [pc, #44]	; (893f4 <__libc_init_array+0x40>)
   893c6:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   893ca:	4790      	blx	r2
   893cc:	3401      	adds	r4, #1
   893ce:	e7f7      	b.n	893c0 <__libc_init_array+0xc>
   893d0:	f002 fc26 	bl	8bc20 <_init>
   893d4:	4908      	ldr	r1, [pc, #32]	; (893f8 <__libc_init_array+0x44>)
   893d6:	4a09      	ldr	r2, [pc, #36]	; (893fc <__libc_init_array+0x48>)
   893d8:	1a54      	subs	r4, r2, r1
   893da:	10a5      	asrs	r5, r4, #2
   893dc:	2400      	movs	r4, #0
   893de:	42ac      	cmp	r4, r5
   893e0:	d005      	beq.n	893ee <__libc_init_array+0x3a>
   893e2:	4b05      	ldr	r3, [pc, #20]	; (893f8 <__libc_init_array+0x44>)
   893e4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   893e8:	4780      	blx	r0
   893ea:	3401      	adds	r4, #1
   893ec:	e7f7      	b.n	893de <__libc_init_array+0x2a>
   893ee:	bd38      	pop	{r3, r4, r5, pc}
   893f0:	0008bc2c 	.word	0x0008bc2c
   893f4:	0008bc2c 	.word	0x0008bc2c
   893f8:	0008bc2c 	.word	0x0008bc2c
   893fc:	0008bc34 	.word	0x0008bc34

00089400 <memcpy>:
   89400:	b510      	push	{r4, lr}
   89402:	2300      	movs	r3, #0
   89404:	4293      	cmp	r3, r2
   89406:	d003      	beq.n	89410 <memcpy+0x10>
   89408:	5ccc      	ldrb	r4, [r1, r3]
   8940a:	54c4      	strb	r4, [r0, r3]
   8940c:	3301      	adds	r3, #1
   8940e:	e7f9      	b.n	89404 <memcpy+0x4>
   89410:	bd10      	pop	{r4, pc}

00089412 <memset>:
   89412:	1882      	adds	r2, r0, r2
   89414:	4603      	mov	r3, r0
   89416:	4293      	cmp	r3, r2
   89418:	d002      	beq.n	89420 <memset+0xe>
   8941a:	f803 1b01 	strb.w	r1, [r3], #1
   8941e:	e7fa      	b.n	89416 <memset+0x4>
   89420:	4770      	bx	lr
	...

00089424 <_sprintf_r>:
   89424:	b40c      	push	{r2, r3}
   89426:	b510      	push	{r4, lr}
   89428:	b09c      	sub	sp, #112	; 0x70
   8942a:	ab1e      	add	r3, sp, #120	; 0x78
   8942c:	9102      	str	r1, [sp, #8]
   8942e:	9106      	str	r1, [sp, #24]
   89430:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   89434:	f853 2b04 	ldr.w	r2, [r3], #4
   89438:	9104      	str	r1, [sp, #16]
   8943a:	9107      	str	r1, [sp, #28]
   8943c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   89440:	f8ad 1016 	strh.w	r1, [sp, #22]
   89444:	f44f 7402 	mov.w	r4, #520	; 0x208
   89448:	a902      	add	r1, sp, #8
   8944a:	9301      	str	r3, [sp, #4]
   8944c:	f8ad 4014 	strh.w	r4, [sp, #20]
   89450:	f000 f834 	bl	894bc <_svfprintf_r>
   89454:	9b02      	ldr	r3, [sp, #8]
   89456:	2200      	movs	r2, #0
   89458:	701a      	strb	r2, [r3, #0]
   8945a:	b01c      	add	sp, #112	; 0x70
   8945c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   89460:	b002      	add	sp, #8
   89462:	4770      	bx	lr

00089464 <sprintf>:
   89464:	b40e      	push	{r1, r2, r3}
   89466:	b500      	push	{lr}
   89468:	b09c      	sub	sp, #112	; 0x70
   8946a:	9002      	str	r0, [sp, #8]
   8946c:	9006      	str	r0, [sp, #24]
   8946e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   89472:	ab1d      	add	r3, sp, #116	; 0x74
   89474:	9004      	str	r0, [sp, #16]
   89476:	9007      	str	r0, [sp, #28]
   89478:	f44f 7102 	mov.w	r1, #520	; 0x208
   8947c:	480a      	ldr	r0, [pc, #40]	; (894a8 <sprintf+0x44>)
   8947e:	f853 2b04 	ldr.w	r2, [r3], #4
   89482:	f8ad 1014 	strh.w	r1, [sp, #20]
   89486:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8948a:	f8ad 1016 	strh.w	r1, [sp, #22]
   8948e:	6800      	ldr	r0, [r0, #0]
   89490:	a902      	add	r1, sp, #8
   89492:	9301      	str	r3, [sp, #4]
   89494:	f000 f812 	bl	894bc <_svfprintf_r>
   89498:	9b02      	ldr	r3, [sp, #8]
   8949a:	2200      	movs	r2, #0
   8949c:	701a      	strb	r2, [r3, #0]
   8949e:	b01c      	add	sp, #112	; 0x70
   894a0:	f85d eb04 	ldr.w	lr, [sp], #4
   894a4:	b003      	add	sp, #12
   894a6:	4770      	bx	lr
   894a8:	20070240 	.word	0x20070240

000894ac <strlen>:
   894ac:	4603      	mov	r3, r0
   894ae:	f813 2b01 	ldrb.w	r2, [r3], #1
   894b2:	2a00      	cmp	r2, #0
   894b4:	d1fb      	bne.n	894ae <strlen+0x2>
   894b6:	1a18      	subs	r0, r3, r0
   894b8:	3801      	subs	r0, #1
   894ba:	4770      	bx	lr

000894bc <_svfprintf_r>:
   894bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   894c0:	461e      	mov	r6, r3
   894c2:	898b      	ldrh	r3, [r1, #12]
   894c4:	4689      	mov	r9, r1
   894c6:	f003 0180 	and.w	r1, r3, #128	; 0x80
   894ca:	4614      	mov	r4, r2
   894cc:	b20a      	sxth	r2, r1
   894ce:	b0a9      	sub	sp, #164	; 0xa4
   894d0:	4683      	mov	fp, r0
   894d2:	b19a      	cbz	r2, 894fc <_svfprintf_r+0x40>
   894d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   894d8:	b983      	cbnz	r3, 894fc <_svfprintf_r+0x40>
   894da:	2140      	movs	r1, #64	; 0x40
   894dc:	f000 fcfe 	bl	89edc <_malloc_r>
   894e0:	f8c9 0000 	str.w	r0, [r9]
   894e4:	f8c9 0010 	str.w	r0, [r9, #16]
   894e8:	b928      	cbnz	r0, 894f6 <_svfprintf_r+0x3a>
   894ea:	220c      	movs	r2, #12
   894ec:	f8cb 2000 	str.w	r2, [fp]
   894f0:	f04f 30ff 	mov.w	r0, #4294967295
   894f4:	e3da      	b.n	89cac <_svfprintf_r+0x7f0>
   894f6:	2040      	movs	r0, #64	; 0x40
   894f8:	f8c9 0014 	str.w	r0, [r9, #20]
   894fc:	2100      	movs	r1, #0
   894fe:	ad18      	add	r5, sp, #96	; 0x60
   89500:	950b      	str	r5, [sp, #44]	; 0x2c
   89502:	910d      	str	r1, [sp, #52]	; 0x34
   89504:	910c      	str	r1, [sp, #48]	; 0x30
   89506:	9401      	str	r4, [sp, #4]
   89508:	9105      	str	r1, [sp, #20]
   8950a:	9104      	str	r1, [sp, #16]
   8950c:	46a8      	mov	r8, r5
   8950e:	9b01      	ldr	r3, [sp, #4]
   89510:	461c      	mov	r4, r3
   89512:	f813 2b01 	ldrb.w	r2, [r3], #1
   89516:	b91a      	cbnz	r2, 89520 <_svfprintf_r+0x64>
   89518:	9801      	ldr	r0, [sp, #4]
   8951a:	1a25      	subs	r5, r4, r0
   8951c:	d103      	bne.n	89526 <_svfprintf_r+0x6a>
   8951e:	e01d      	b.n	8955c <_svfprintf_r+0xa0>
   89520:	2a25      	cmp	r2, #37	; 0x25
   89522:	d1f5      	bne.n	89510 <_svfprintf_r+0x54>
   89524:	e7f8      	b.n	89518 <_svfprintf_r+0x5c>
   89526:	9a01      	ldr	r2, [sp, #4]
   89528:	990d      	ldr	r1, [sp, #52]	; 0x34
   8952a:	e888 0024 	stmia.w	r8, {r2, r5}
   8952e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89530:	194b      	adds	r3, r1, r5
   89532:	1c50      	adds	r0, r2, #1
   89534:	2807      	cmp	r0, #7
   89536:	930d      	str	r3, [sp, #52]	; 0x34
   89538:	900c      	str	r0, [sp, #48]	; 0x30
   8953a:	dc02      	bgt.n	89542 <_svfprintf_r+0x86>
   8953c:	f108 0808 	add.w	r8, r8, #8
   89540:	e009      	b.n	89556 <_svfprintf_r+0x9a>
   89542:	4658      	mov	r0, fp
   89544:	4649      	mov	r1, r9
   89546:	aa0b      	add	r2, sp, #44	; 0x2c
   89548:	f001 f872 	bl	8a630 <__ssprint_r>
   8954c:	2800      	cmp	r0, #0
   8954e:	f040 83a2 	bne.w	89c96 <_svfprintf_r+0x7da>
   89552:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89556:	9904      	ldr	r1, [sp, #16]
   89558:	194b      	adds	r3, r1, r5
   8955a:	9304      	str	r3, [sp, #16]
   8955c:	7822      	ldrb	r2, [r4, #0]
   8955e:	2a00      	cmp	r2, #0
   89560:	f000 8392 	beq.w	89c88 <_svfprintf_r+0x7cc>
   89564:	2200      	movs	r2, #0
   89566:	3401      	adds	r4, #1
   89568:	9401      	str	r4, [sp, #4]
   8956a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8956e:	f04f 3cff 	mov.w	ip, #4294967295
   89572:	9203      	str	r2, [sp, #12]
   89574:	4617      	mov	r7, r2
   89576:	9801      	ldr	r0, [sp, #4]
   89578:	f810 3b01 	ldrb.w	r3, [r0], #1
   8957c:	9001      	str	r0, [sp, #4]
   8957e:	2b63      	cmp	r3, #99	; 0x63
   89580:	f000 80b3 	beq.w	896ea <_svfprintf_r+0x22e>
   89584:	dc33      	bgt.n	895ee <_svfprintf_r+0x132>
   89586:	2b39      	cmp	r3, #57	; 0x39
   89588:	dc1a      	bgt.n	895c0 <_svfprintf_r+0x104>
   8958a:	2b31      	cmp	r3, #49	; 0x31
   8958c:	f280 8091 	bge.w	896b2 <_svfprintf_r+0x1f6>
   89590:	2b2b      	cmp	r3, #43	; 0x2b
   89592:	d101      	bne.n	89598 <_svfprintf_r+0xdc>
   89594:	461a      	mov	r2, r3
   89596:	e7ee      	b.n	89576 <_svfprintf_r+0xba>
   89598:	dc0a      	bgt.n	895b0 <_svfprintf_r+0xf4>
   8959a:	2b23      	cmp	r3, #35	; 0x23
   8959c:	d055      	beq.n	8964a <_svfprintf_r+0x18e>
   8959e:	2b2a      	cmp	r3, #42	; 0x2a
   895a0:	d056      	beq.n	89650 <_svfprintf_r+0x194>
   895a2:	2b20      	cmp	r3, #32
   895a4:	f040 81f5 	bne.w	89992 <_svfprintf_r+0x4d6>
   895a8:	2a00      	cmp	r2, #0
   895aa:	bf08      	it	eq
   895ac:	2220      	moveq	r2, #32
   895ae:	e7e2      	b.n	89576 <_svfprintf_r+0xba>
   895b0:	2b2e      	cmp	r3, #46	; 0x2e
   895b2:	d058      	beq.n	89666 <_svfprintf_r+0x1aa>
   895b4:	2b30      	cmp	r3, #48	; 0x30
   895b6:	d079      	beq.n	896ac <_svfprintf_r+0x1f0>
   895b8:	2b2d      	cmp	r3, #45	; 0x2d
   895ba:	f040 81ea 	bne.w	89992 <_svfprintf_r+0x4d6>
   895be:	e04f      	b.n	89660 <_svfprintf_r+0x1a4>
   895c0:	2b4f      	cmp	r3, #79	; 0x4f
   895c2:	f000 80de 	beq.w	89782 <_svfprintf_r+0x2c6>
   895c6:	dc07      	bgt.n	895d8 <_svfprintf_r+0x11c>
   895c8:	2b44      	cmp	r3, #68	; 0x44
   895ca:	f040 81e2 	bne.w	89992 <_svfprintf_r+0x4d6>
   895ce:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   895d2:	f047 0710 	orr.w	r7, r7, #16
   895d6:	e090      	b.n	896fa <_svfprintf_r+0x23e>
   895d8:	2b55      	cmp	r3, #85	; 0x55
   895da:	f000 811f 	beq.w	8981c <_svfprintf_r+0x360>
   895de:	2b58      	cmp	r3, #88	; 0x58
   895e0:	f040 81d7 	bne.w	89992 <_svfprintf_r+0x4d6>
   895e4:	4dae      	ldr	r5, [pc, #696]	; (898a0 <_svfprintf_r+0x3e4>)
   895e6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   895ea:	9505      	str	r5, [sp, #20]
   895ec:	e130      	b.n	89850 <_svfprintf_r+0x394>
   895ee:	2b6f      	cmp	r3, #111	; 0x6f
   895f0:	f000 80c9 	beq.w	89786 <_svfprintf_r+0x2ca>
   895f4:	dc10      	bgt.n	89618 <_svfprintf_r+0x15c>
   895f6:	2b69      	cmp	r3, #105	; 0x69
   895f8:	d024      	beq.n	89644 <_svfprintf_r+0x188>
   895fa:	dc07      	bgt.n	8960c <_svfprintf_r+0x150>
   895fc:	2b64      	cmp	r3, #100	; 0x64
   895fe:	d021      	beq.n	89644 <_svfprintf_r+0x188>
   89600:	2b68      	cmp	r3, #104	; 0x68
   89602:	f040 81c6 	bne.w	89992 <_svfprintf_r+0x4d6>
   89606:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   8960a:	e7b4      	b.n	89576 <_svfprintf_r+0xba>
   8960c:	2b6c      	cmp	r3, #108	; 0x6c
   8960e:	d05f      	beq.n	896d0 <_svfprintf_r+0x214>
   89610:	2b6e      	cmp	r3, #110	; 0x6e
   89612:	f040 81be 	bne.w	89992 <_svfprintf_r+0x4d6>
   89616:	e096      	b.n	89746 <_svfprintf_r+0x28a>
   89618:	2b73      	cmp	r3, #115	; 0x73
   8961a:	f000 80df 	beq.w	897dc <_svfprintf_r+0x320>
   8961e:	dc06      	bgt.n	8962e <_svfprintf_r+0x172>
   89620:	2b70      	cmp	r3, #112	; 0x70
   89622:	f000 80cd 	beq.w	897c0 <_svfprintf_r+0x304>
   89626:	2b71      	cmp	r3, #113	; 0x71
   89628:	f040 81b3 	bne.w	89992 <_svfprintf_r+0x4d6>
   8962c:	e05a      	b.n	896e4 <_svfprintf_r+0x228>
   8962e:	2b75      	cmp	r3, #117	; 0x75
   89630:	f000 80f6 	beq.w	89820 <_svfprintf_r+0x364>
   89634:	2b78      	cmp	r3, #120	; 0x78
   89636:	f040 81ac 	bne.w	89992 <_svfprintf_r+0x4d6>
   8963a:	4d9a      	ldr	r5, [pc, #616]	; (898a4 <_svfprintf_r+0x3e8>)
   8963c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   89640:	9505      	str	r5, [sp, #20]
   89642:	e105      	b.n	89850 <_svfprintf_r+0x394>
   89644:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   89648:	e057      	b.n	896fa <_svfprintf_r+0x23e>
   8964a:	f047 0701 	orr.w	r7, r7, #1
   8964e:	e792      	b.n	89576 <_svfprintf_r+0xba>
   89650:	1d33      	adds	r3, r6, #4
   89652:	6836      	ldr	r6, [r6, #0]
   89654:	2e00      	cmp	r6, #0
   89656:	9603      	str	r6, [sp, #12]
   89658:	da15      	bge.n	89686 <_svfprintf_r+0x1ca>
   8965a:	4270      	negs	r0, r6
   8965c:	9003      	str	r0, [sp, #12]
   8965e:	461e      	mov	r6, r3
   89660:	f047 0704 	orr.w	r7, r7, #4
   89664:	e787      	b.n	89576 <_svfprintf_r+0xba>
   89666:	9901      	ldr	r1, [sp, #4]
   89668:	f811 3b01 	ldrb.w	r3, [r1], #1
   8966c:	2b2a      	cmp	r3, #42	; 0x2a
   8966e:	9101      	str	r1, [sp, #4]
   89670:	d10b      	bne.n	8968a <_svfprintf_r+0x1ce>
   89672:	f8d6 c000 	ldr.w	ip, [r6]
   89676:	1d33      	adds	r3, r6, #4
   89678:	f1bc 0f00 	cmp.w	ip, #0
   8967c:	da03      	bge.n	89686 <_svfprintf_r+0x1ca>
   8967e:	461e      	mov	r6, r3
   89680:	f04f 3cff 	mov.w	ip, #4294967295
   89684:	e777      	b.n	89576 <_svfprintf_r+0xba>
   89686:	461e      	mov	r6, r3
   89688:	e775      	b.n	89576 <_svfprintf_r+0xba>
   8968a:	f04f 0c00 	mov.w	ip, #0
   8968e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   89692:	2809      	cmp	r0, #9
   89694:	d807      	bhi.n	896a6 <_svfprintf_r+0x1ea>
   89696:	9901      	ldr	r1, [sp, #4]
   89698:	230a      	movs	r3, #10
   8969a:	fb03 0c0c 	mla	ip, r3, ip, r0
   8969e:	f811 3b01 	ldrb.w	r3, [r1], #1
   896a2:	9101      	str	r1, [sp, #4]
   896a4:	e7f3      	b.n	8968e <_svfprintf_r+0x1d2>
   896a6:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   896aa:	e768      	b.n	8957e <_svfprintf_r+0xc2>
   896ac:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   896b0:	e761      	b.n	89576 <_svfprintf_r+0xba>
   896b2:	9801      	ldr	r0, [sp, #4]
   896b4:	2100      	movs	r1, #0
   896b6:	3b30      	subs	r3, #48	; 0x30
   896b8:	240a      	movs	r4, #10
   896ba:	fb04 3101 	mla	r1, r4, r1, r3
   896be:	f810 3b01 	ldrb.w	r3, [r0], #1
   896c2:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   896c6:	2c09      	cmp	r4, #9
   896c8:	9001      	str	r0, [sp, #4]
   896ca:	d9f4      	bls.n	896b6 <_svfprintf_r+0x1fa>
   896cc:	9103      	str	r1, [sp, #12]
   896ce:	e756      	b.n	8957e <_svfprintf_r+0xc2>
   896d0:	9901      	ldr	r1, [sp, #4]
   896d2:	780b      	ldrb	r3, [r1, #0]
   896d4:	2b6c      	cmp	r3, #108	; 0x6c
   896d6:	d102      	bne.n	896de <_svfprintf_r+0x222>
   896d8:	1c48      	adds	r0, r1, #1
   896da:	9001      	str	r0, [sp, #4]
   896dc:	e002      	b.n	896e4 <_svfprintf_r+0x228>
   896de:	f047 0710 	orr.w	r7, r7, #16
   896e2:	e748      	b.n	89576 <_svfprintf_r+0xba>
   896e4:	f047 0720 	orr.w	r7, r7, #32
   896e8:	e745      	b.n	89576 <_svfprintf_r+0xba>
   896ea:	6832      	ldr	r2, [r6, #0]
   896ec:	2500      	movs	r5, #0
   896ee:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   896f2:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   896f6:	3604      	adds	r6, #4
   896f8:	e155      	b.n	899a6 <_svfprintf_r+0x4ea>
   896fa:	06ba      	lsls	r2, r7, #26
   896fc:	d507      	bpl.n	8970e <_svfprintf_r+0x252>
   896fe:	3607      	adds	r6, #7
   89700:	f026 0507 	bic.w	r5, r6, #7
   89704:	f105 0608 	add.w	r6, r5, #8
   89708:	e9d5 4500 	ldrd	r4, r5, [r5]
   8970c:	e00f      	b.n	8972e <_svfprintf_r+0x272>
   8970e:	f017 0f10 	tst.w	r7, #16
   89712:	f106 0104 	add.w	r1, r6, #4
   89716:	d001      	beq.n	8971c <_svfprintf_r+0x260>
   89718:	6832      	ldr	r2, [r6, #0]
   8971a:	e005      	b.n	89728 <_svfprintf_r+0x26c>
   8971c:	f017 0f40 	tst.w	r7, #64	; 0x40
   89720:	6832      	ldr	r2, [r6, #0]
   89722:	d001      	beq.n	89728 <_svfprintf_r+0x26c>
   89724:	b214      	sxth	r4, r2
   89726:	e000      	b.n	8972a <_svfprintf_r+0x26e>
   89728:	4614      	mov	r4, r2
   8972a:	17e5      	asrs	r5, r4, #31
   8972c:	460e      	mov	r6, r1
   8972e:	2c00      	cmp	r4, #0
   89730:	f175 0200 	sbcs.w	r2, r5, #0
   89734:	f280 80b8 	bge.w	898a8 <_svfprintf_r+0x3ec>
   89738:	232d      	movs	r3, #45	; 0x2d
   8973a:	4264      	negs	r4, r4
   8973c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   89740:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   89744:	e0b0      	b.n	898a8 <_svfprintf_r+0x3ec>
   89746:	f017 0f20 	tst.w	r7, #32
   8974a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8974e:	f106 0204 	add.w	r2, r6, #4
   89752:	d005      	beq.n	89760 <_svfprintf_r+0x2a4>
   89754:	9c04      	ldr	r4, [sp, #16]
   89756:	6835      	ldr	r5, [r6, #0]
   89758:	17e0      	asrs	r0, r4, #31
   8975a:	602c      	str	r4, [r5, #0]
   8975c:	6068      	str	r0, [r5, #4]
   8975e:	e004      	b.n	8976a <_svfprintf_r+0x2ae>
   89760:	06fb      	lsls	r3, r7, #27
   89762:	d504      	bpl.n	8976e <_svfprintf_r+0x2b2>
   89764:	6833      	ldr	r3, [r6, #0]
   89766:	9904      	ldr	r1, [sp, #16]
   89768:	6019      	str	r1, [r3, #0]
   8976a:	4616      	mov	r6, r2
   8976c:	e6cf      	b.n	8950e <_svfprintf_r+0x52>
   8976e:	6830      	ldr	r0, [r6, #0]
   89770:	9c04      	ldr	r4, [sp, #16]
   89772:	f017 0f40 	tst.w	r7, #64	; 0x40
   89776:	f106 0604 	add.w	r6, r6, #4
   8977a:	bf14      	ite	ne
   8977c:	8004      	strhne	r4, [r0, #0]
   8977e:	6004      	streq	r4, [r0, #0]
   89780:	e6c5      	b.n	8950e <_svfprintf_r+0x52>
   89782:	f047 0710 	orr.w	r7, r7, #16
   89786:	f017 0020 	ands.w	r0, r7, #32
   8978a:	d008      	beq.n	8979e <_svfprintf_r+0x2e2>
   8978c:	1df3      	adds	r3, r6, #7
   8978e:	f023 0507 	bic.w	r5, r3, #7
   89792:	f105 0608 	add.w	r6, r5, #8
   89796:	e9d5 4500 	ldrd	r4, r5, [r5]
   8979a:	2000      	movs	r0, #0
   8979c:	e07c      	b.n	89898 <_svfprintf_r+0x3dc>
   8979e:	f017 0110 	ands.w	r1, r7, #16
   897a2:	f106 0204 	add.w	r2, r6, #4
   897a6:	d106      	bne.n	897b6 <_svfprintf_r+0x2fa>
   897a8:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   897ac:	d003      	beq.n	897b6 <_svfprintf_r+0x2fa>
   897ae:	8834      	ldrh	r4, [r6, #0]
   897b0:	2500      	movs	r5, #0
   897b2:	4616      	mov	r6, r2
   897b4:	e7f1      	b.n	8979a <_svfprintf_r+0x2de>
   897b6:	6836      	ldr	r6, [r6, #0]
   897b8:	2500      	movs	r5, #0
   897ba:	4634      	mov	r4, r6
   897bc:	4616      	mov	r6, r2
   897be:	e06b      	b.n	89898 <_svfprintf_r+0x3dc>
   897c0:	4b38      	ldr	r3, [pc, #224]	; (898a4 <_svfprintf_r+0x3e8>)
   897c2:	2130      	movs	r1, #48	; 0x30
   897c4:	2278      	movs	r2, #120	; 0x78
   897c6:	6834      	ldr	r4, [r6, #0]
   897c8:	2500      	movs	r5, #0
   897ca:	f047 0702 	orr.w	r7, r7, #2
   897ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   897d2:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   897d6:	3604      	adds	r6, #4
   897d8:	9305      	str	r3, [sp, #20]
   897da:	e05c      	b.n	89896 <_svfprintf_r+0x3da>
   897dc:	4631      	mov	r1, r6
   897de:	2500      	movs	r5, #0
   897e0:	f8d1 a000 	ldr.w	sl, [r1]
   897e4:	3604      	adds	r6, #4
   897e6:	45ac      	cmp	ip, r5
   897e8:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   897ec:	4650      	mov	r0, sl
   897ee:	db11      	blt.n	89814 <_svfprintf_r+0x358>
   897f0:	4662      	mov	r2, ip
   897f2:	4629      	mov	r1, r5
   897f4:	f8cd c000 	str.w	ip, [sp]
   897f8:	f000 fd72 	bl	8a2e0 <memchr>
   897fc:	f8dd c000 	ldr.w	ip, [sp]
   89800:	2800      	cmp	r0, #0
   89802:	f000 80d4 	beq.w	899ae <_svfprintf_r+0x4f2>
   89806:	ebca 0400 	rsb	r4, sl, r0
   8980a:	4564      	cmp	r4, ip
   8980c:	f340 80d1 	ble.w	899b2 <_svfprintf_r+0x4f6>
   89810:	4664      	mov	r4, ip
   89812:	e0ce      	b.n	899b2 <_svfprintf_r+0x4f6>
   89814:	f7ff fe4a 	bl	894ac <strlen>
   89818:	4604      	mov	r4, r0
   8981a:	e0ca      	b.n	899b2 <_svfprintf_r+0x4f6>
   8981c:	f047 0710 	orr.w	r7, r7, #16
   89820:	06bd      	lsls	r5, r7, #26
   89822:	d506      	bpl.n	89832 <_svfprintf_r+0x376>
   89824:	1df0      	adds	r0, r6, #7
   89826:	f020 0407 	bic.w	r4, r0, #7
   8982a:	f104 0608 	add.w	r6, r4, #8
   8982e:	cc30      	ldmia	r4, {r4, r5}
   89830:	e00c      	b.n	8984c <_svfprintf_r+0x390>
   89832:	f017 0f10 	tst.w	r7, #16
   89836:	f106 0304 	add.w	r3, r6, #4
   8983a:	d103      	bne.n	89844 <_svfprintf_r+0x388>
   8983c:	067c      	lsls	r4, r7, #25
   8983e:	d501      	bpl.n	89844 <_svfprintf_r+0x388>
   89840:	8834      	ldrh	r4, [r6, #0]
   89842:	e001      	b.n	89848 <_svfprintf_r+0x38c>
   89844:	6835      	ldr	r5, [r6, #0]
   89846:	462c      	mov	r4, r5
   89848:	2500      	movs	r5, #0
   8984a:	461e      	mov	r6, r3
   8984c:	2001      	movs	r0, #1
   8984e:	e023      	b.n	89898 <_svfprintf_r+0x3dc>
   89850:	06b8      	lsls	r0, r7, #26
   89852:	d507      	bpl.n	89864 <_svfprintf_r+0x3a8>
   89854:	1df4      	adds	r4, r6, #7
   89856:	f024 0107 	bic.w	r1, r4, #7
   8985a:	f101 0608 	add.w	r6, r1, #8
   8985e:	e9d1 4500 	ldrd	r4, r5, [r1]
   89862:	e00c      	b.n	8987e <_svfprintf_r+0x3c2>
   89864:	f017 0f10 	tst.w	r7, #16
   89868:	f106 0004 	add.w	r0, r6, #4
   8986c:	d103      	bne.n	89876 <_svfprintf_r+0x3ba>
   8986e:	0679      	lsls	r1, r7, #25
   89870:	d501      	bpl.n	89876 <_svfprintf_r+0x3ba>
   89872:	8834      	ldrh	r4, [r6, #0]
   89874:	e001      	b.n	8987a <_svfprintf_r+0x3be>
   89876:	6836      	ldr	r6, [r6, #0]
   89878:	4634      	mov	r4, r6
   8987a:	2500      	movs	r5, #0
   8987c:	4606      	mov	r6, r0
   8987e:	07fa      	lsls	r2, r7, #31
   89880:	d509      	bpl.n	89896 <_svfprintf_r+0x3da>
   89882:	ea54 0205 	orrs.w	r2, r4, r5
   89886:	d006      	beq.n	89896 <_svfprintf_r+0x3da>
   89888:	2230      	movs	r2, #48	; 0x30
   8988a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   8988e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   89892:	f047 0702 	orr.w	r7, r7, #2
   89896:	2002      	movs	r0, #2
   89898:	2100      	movs	r1, #0
   8989a:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   8989e:	e004      	b.n	898aa <_svfprintf_r+0x3ee>
   898a0:	0008bbde 	.word	0x0008bbde
   898a4:	0008bbef 	.word	0x0008bbef
   898a8:	2001      	movs	r0, #1
   898aa:	f1bc 0f00 	cmp.w	ip, #0
   898ae:	bfa8      	it	ge
   898b0:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   898b4:	ea54 0105 	orrs.w	r1, r4, r5
   898b8:	d102      	bne.n	898c0 <_svfprintf_r+0x404>
   898ba:	f1bc 0f00 	cmp.w	ip, #0
   898be:	d058      	beq.n	89972 <_svfprintf_r+0x4b6>
   898c0:	2801      	cmp	r0, #1
   898c2:	d01d      	beq.n	89900 <_svfprintf_r+0x444>
   898c4:	2802      	cmp	r0, #2
   898c6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   898ca:	d041      	beq.n	89950 <_svfprintf_r+0x494>
   898cc:	f004 0207 	and.w	r2, r4, #7
   898d0:	08e4      	lsrs	r4, r4, #3
   898d2:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   898d6:	08e9      	lsrs	r1, r5, #3
   898d8:	4604      	mov	r4, r0
   898da:	460d      	mov	r5, r1
   898dc:	3230      	adds	r2, #48	; 0x30
   898de:	ea54 0105 	orrs.w	r1, r4, r5
   898e2:	469a      	mov	sl, r3
   898e4:	701a      	strb	r2, [r3, #0]
   898e6:	f103 33ff 	add.w	r3, r3, #4294967295
   898ea:	d1ef      	bne.n	898cc <_svfprintf_r+0x410>
   898ec:	07f8      	lsls	r0, r7, #31
   898ee:	4655      	mov	r5, sl
   898f0:	d54a      	bpl.n	89988 <_svfprintf_r+0x4cc>
   898f2:	2a30      	cmp	r2, #48	; 0x30
   898f4:	d048      	beq.n	89988 <_svfprintf_r+0x4cc>
   898f6:	2230      	movs	r2, #48	; 0x30
   898f8:	469a      	mov	sl, r3
   898fa:	f805 2c01 	strb.w	r2, [r5, #-1]
   898fe:	e043      	b.n	89988 <_svfprintf_r+0x4cc>
   89900:	2d00      	cmp	r5, #0
   89902:	bf08      	it	eq
   89904:	2c0a      	cmpeq	r4, #10
   89906:	d203      	bcs.n	89910 <_svfprintf_r+0x454>
   89908:	3430      	adds	r4, #48	; 0x30
   8990a:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   8990e:	e036      	b.n	8997e <_svfprintf_r+0x4c2>
   89910:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   89914:	9302      	str	r3, [sp, #8]
   89916:	4620      	mov	r0, r4
   89918:	4629      	mov	r1, r5
   8991a:	220a      	movs	r2, #10
   8991c:	2300      	movs	r3, #0
   8991e:	f8cd c000 	str.w	ip, [sp]
   89922:	f001 faff 	bl	8af24 <__aeabi_uldivmod>
   89926:	9802      	ldr	r0, [sp, #8]
   89928:	3230      	adds	r2, #48	; 0x30
   8992a:	f800 2901 	strb.w	r2, [r0], #-1
   8992e:	4629      	mov	r1, r5
   89930:	220a      	movs	r2, #10
   89932:	2300      	movs	r3, #0
   89934:	f8dd a008 	ldr.w	sl, [sp, #8]
   89938:	9002      	str	r0, [sp, #8]
   8993a:	4620      	mov	r0, r4
   8993c:	f001 faf2 	bl	8af24 <__aeabi_uldivmod>
   89940:	4604      	mov	r4, r0
   89942:	460d      	mov	r5, r1
   89944:	ea54 0105 	orrs.w	r1, r4, r5
   89948:	f8dd c000 	ldr.w	ip, [sp]
   8994c:	d1e3      	bne.n	89916 <_svfprintf_r+0x45a>
   8994e:	e01b      	b.n	89988 <_svfprintf_r+0x4cc>
   89950:	9905      	ldr	r1, [sp, #20]
   89952:	f004 000f 	and.w	r0, r4, #15
   89956:	0924      	lsrs	r4, r4, #4
   89958:	5c0a      	ldrb	r2, [r1, r0]
   8995a:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   8995e:	0929      	lsrs	r1, r5, #4
   89960:	4604      	mov	r4, r0
   89962:	460d      	mov	r5, r1
   89964:	469a      	mov	sl, r3
   89966:	f803 2901 	strb.w	r2, [r3], #-1
   8996a:	ea54 0205 	orrs.w	r2, r4, r5
   8996e:	d1ef      	bne.n	89950 <_svfprintf_r+0x494>
   89970:	e00a      	b.n	89988 <_svfprintf_r+0x4cc>
   89972:	b938      	cbnz	r0, 89984 <_svfprintf_r+0x4c8>
   89974:	07f9      	lsls	r1, r7, #31
   89976:	d505      	bpl.n	89984 <_svfprintf_r+0x4c8>
   89978:	2030      	movs	r0, #48	; 0x30
   8997a:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   8997e:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   89982:	e001      	b.n	89988 <_svfprintf_r+0x4cc>
   89984:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   89988:	ad18      	add	r5, sp, #96	; 0x60
   8998a:	ebca 0405 	rsb	r4, sl, r5
   8998e:	4665      	mov	r5, ip
   89990:	e00f      	b.n	899b2 <_svfprintf_r+0x4f6>
   89992:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   89996:	2b00      	cmp	r3, #0
   89998:	f000 8176 	beq.w	89c88 <_svfprintf_r+0x7cc>
   8999c:	2500      	movs	r5, #0
   8999e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   899a2:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   899a6:	2401      	movs	r4, #1
   899a8:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   899ac:	e001      	b.n	899b2 <_svfprintf_r+0x4f6>
   899ae:	4664      	mov	r4, ip
   899b0:	4605      	mov	r5, r0
   899b2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   899b6:	42ac      	cmp	r4, r5
   899b8:	bfac      	ite	ge
   899ba:	4621      	movge	r1, r4
   899bc:	4629      	movlt	r1, r5
   899be:	9102      	str	r1, [sp, #8]
   899c0:	b113      	cbz	r3, 899c8 <_svfprintf_r+0x50c>
   899c2:	9802      	ldr	r0, [sp, #8]
   899c4:	1c42      	adds	r2, r0, #1
   899c6:	9202      	str	r2, [sp, #8]
   899c8:	f017 0102 	ands.w	r1, r7, #2
   899cc:	9106      	str	r1, [sp, #24]
   899ce:	d002      	beq.n	899d6 <_svfprintf_r+0x51a>
   899d0:	9b02      	ldr	r3, [sp, #8]
   899d2:	1c98      	adds	r0, r3, #2
   899d4:	9002      	str	r0, [sp, #8]
   899d6:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   899da:	9207      	str	r2, [sp, #28]
   899dc:	d13c      	bne.n	89a58 <_svfprintf_r+0x59c>
   899de:	9903      	ldr	r1, [sp, #12]
   899e0:	9b02      	ldr	r3, [sp, #8]
   899e2:	1acb      	subs	r3, r1, r3
   899e4:	2b00      	cmp	r3, #0
   899e6:	dd37      	ble.n	89a58 <_svfprintf_r+0x59c>
   899e8:	48a5      	ldr	r0, [pc, #660]	; (89c80 <_svfprintf_r+0x7c4>)
   899ea:	2b10      	cmp	r3, #16
   899ec:	f8c8 0000 	str.w	r0, [r8]
   899f0:	dd1b      	ble.n	89a2a <_svfprintf_r+0x56e>
   899f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   899f4:	2110      	movs	r1, #16
   899f6:	980d      	ldr	r0, [sp, #52]	; 0x34
   899f8:	f8c8 1004 	str.w	r1, [r8, #4]
   899fc:	1c51      	adds	r1, r2, #1
   899fe:	3010      	adds	r0, #16
   89a00:	2907      	cmp	r1, #7
   89a02:	900d      	str	r0, [sp, #52]	; 0x34
   89a04:	910c      	str	r1, [sp, #48]	; 0x30
   89a06:	dc02      	bgt.n	89a0e <_svfprintf_r+0x552>
   89a08:	f108 0808 	add.w	r8, r8, #8
   89a0c:	e00b      	b.n	89a26 <_svfprintf_r+0x56a>
   89a0e:	4658      	mov	r0, fp
   89a10:	4649      	mov	r1, r9
   89a12:	aa0b      	add	r2, sp, #44	; 0x2c
   89a14:	9300      	str	r3, [sp, #0]
   89a16:	f000 fe0b 	bl	8a630 <__ssprint_r>
   89a1a:	9b00      	ldr	r3, [sp, #0]
   89a1c:	2800      	cmp	r0, #0
   89a1e:	f040 813a 	bne.w	89c96 <_svfprintf_r+0x7da>
   89a22:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89a26:	3b10      	subs	r3, #16
   89a28:	e7de      	b.n	899e8 <_svfprintf_r+0x52c>
   89a2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   89a2c:	f8c8 3004 	str.w	r3, [r8, #4]
   89a30:	18d1      	adds	r1, r2, r3
   89a32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89a34:	910d      	str	r1, [sp, #52]	; 0x34
   89a36:	1c58      	adds	r0, r3, #1
   89a38:	2807      	cmp	r0, #7
   89a3a:	900c      	str	r0, [sp, #48]	; 0x30
   89a3c:	dc02      	bgt.n	89a44 <_svfprintf_r+0x588>
   89a3e:	f108 0808 	add.w	r8, r8, #8
   89a42:	e009      	b.n	89a58 <_svfprintf_r+0x59c>
   89a44:	4658      	mov	r0, fp
   89a46:	4649      	mov	r1, r9
   89a48:	aa0b      	add	r2, sp, #44	; 0x2c
   89a4a:	f000 fdf1 	bl	8a630 <__ssprint_r>
   89a4e:	2800      	cmp	r0, #0
   89a50:	f040 8121 	bne.w	89c96 <_svfprintf_r+0x7da>
   89a54:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89a58:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   89a5c:	b1da      	cbz	r2, 89a96 <_svfprintf_r+0x5da>
   89a5e:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   89a62:	f8c8 1000 	str.w	r1, [r8]
   89a66:	990c      	ldr	r1, [sp, #48]	; 0x30
   89a68:	2301      	movs	r3, #1
   89a6a:	980d      	ldr	r0, [sp, #52]	; 0x34
   89a6c:	f8c8 3004 	str.w	r3, [r8, #4]
   89a70:	1c4b      	adds	r3, r1, #1
   89a72:	1c42      	adds	r2, r0, #1
   89a74:	2b07      	cmp	r3, #7
   89a76:	920d      	str	r2, [sp, #52]	; 0x34
   89a78:	930c      	str	r3, [sp, #48]	; 0x30
   89a7a:	dc02      	bgt.n	89a82 <_svfprintf_r+0x5c6>
   89a7c:	f108 0808 	add.w	r8, r8, #8
   89a80:	e009      	b.n	89a96 <_svfprintf_r+0x5da>
   89a82:	4658      	mov	r0, fp
   89a84:	4649      	mov	r1, r9
   89a86:	aa0b      	add	r2, sp, #44	; 0x2c
   89a88:	f000 fdd2 	bl	8a630 <__ssprint_r>
   89a8c:	2800      	cmp	r0, #0
   89a8e:	f040 8102 	bne.w	89c96 <_svfprintf_r+0x7da>
   89a92:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89a96:	9806      	ldr	r0, [sp, #24]
   89a98:	b1d0      	cbz	r0, 89ad0 <_svfprintf_r+0x614>
   89a9a:	aa0a      	add	r2, sp, #40	; 0x28
   89a9c:	f8c8 2000 	str.w	r2, [r8]
   89aa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89aa2:	2102      	movs	r1, #2
   89aa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89aa6:	f8c8 1004 	str.w	r1, [r8, #4]
   89aaa:	1c51      	adds	r1, r2, #1
   89aac:	1c98      	adds	r0, r3, #2
   89aae:	2907      	cmp	r1, #7
   89ab0:	900d      	str	r0, [sp, #52]	; 0x34
   89ab2:	910c      	str	r1, [sp, #48]	; 0x30
   89ab4:	dc02      	bgt.n	89abc <_svfprintf_r+0x600>
   89ab6:	f108 0808 	add.w	r8, r8, #8
   89aba:	e009      	b.n	89ad0 <_svfprintf_r+0x614>
   89abc:	4658      	mov	r0, fp
   89abe:	4649      	mov	r1, r9
   89ac0:	aa0b      	add	r2, sp, #44	; 0x2c
   89ac2:	f000 fdb5 	bl	8a630 <__ssprint_r>
   89ac6:	2800      	cmp	r0, #0
   89ac8:	f040 80e5 	bne.w	89c96 <_svfprintf_r+0x7da>
   89acc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89ad0:	9b07      	ldr	r3, [sp, #28]
   89ad2:	2b80      	cmp	r3, #128	; 0x80
   89ad4:	d13c      	bne.n	89b50 <_svfprintf_r+0x694>
   89ad6:	9803      	ldr	r0, [sp, #12]
   89ad8:	9a02      	ldr	r2, [sp, #8]
   89ada:	1a83      	subs	r3, r0, r2
   89adc:	2b00      	cmp	r3, #0
   89ade:	dd37      	ble.n	89b50 <_svfprintf_r+0x694>
   89ae0:	4968      	ldr	r1, [pc, #416]	; (89c84 <_svfprintf_r+0x7c8>)
   89ae2:	2b10      	cmp	r3, #16
   89ae4:	f8c8 1000 	str.w	r1, [r8]
   89ae8:	dd1b      	ble.n	89b22 <_svfprintf_r+0x666>
   89aea:	980c      	ldr	r0, [sp, #48]	; 0x30
   89aec:	2210      	movs	r2, #16
   89aee:	990d      	ldr	r1, [sp, #52]	; 0x34
   89af0:	f8c8 2004 	str.w	r2, [r8, #4]
   89af4:	1c42      	adds	r2, r0, #1
   89af6:	3110      	adds	r1, #16
   89af8:	2a07      	cmp	r2, #7
   89afa:	910d      	str	r1, [sp, #52]	; 0x34
   89afc:	920c      	str	r2, [sp, #48]	; 0x30
   89afe:	dc02      	bgt.n	89b06 <_svfprintf_r+0x64a>
   89b00:	f108 0808 	add.w	r8, r8, #8
   89b04:	e00b      	b.n	89b1e <_svfprintf_r+0x662>
   89b06:	4658      	mov	r0, fp
   89b08:	4649      	mov	r1, r9
   89b0a:	aa0b      	add	r2, sp, #44	; 0x2c
   89b0c:	9300      	str	r3, [sp, #0]
   89b0e:	f000 fd8f 	bl	8a630 <__ssprint_r>
   89b12:	9b00      	ldr	r3, [sp, #0]
   89b14:	2800      	cmp	r0, #0
   89b16:	f040 80be 	bne.w	89c96 <_svfprintf_r+0x7da>
   89b1a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89b1e:	3b10      	subs	r3, #16
   89b20:	e7de      	b.n	89ae0 <_svfprintf_r+0x624>
   89b22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89b24:	980d      	ldr	r0, [sp, #52]	; 0x34
   89b26:	1c51      	adds	r1, r2, #1
   89b28:	f8c8 3004 	str.w	r3, [r8, #4]
   89b2c:	2907      	cmp	r1, #7
   89b2e:	4403      	add	r3, r0
   89b30:	930d      	str	r3, [sp, #52]	; 0x34
   89b32:	910c      	str	r1, [sp, #48]	; 0x30
   89b34:	dc02      	bgt.n	89b3c <_svfprintf_r+0x680>
   89b36:	f108 0808 	add.w	r8, r8, #8
   89b3a:	e009      	b.n	89b50 <_svfprintf_r+0x694>
   89b3c:	4658      	mov	r0, fp
   89b3e:	4649      	mov	r1, r9
   89b40:	aa0b      	add	r2, sp, #44	; 0x2c
   89b42:	f000 fd75 	bl	8a630 <__ssprint_r>
   89b46:	2800      	cmp	r0, #0
   89b48:	f040 80a5 	bne.w	89c96 <_svfprintf_r+0x7da>
   89b4c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89b50:	1b2d      	subs	r5, r5, r4
   89b52:	2d00      	cmp	r5, #0
   89b54:	dd34      	ble.n	89bc0 <_svfprintf_r+0x704>
   89b56:	484b      	ldr	r0, [pc, #300]	; (89c84 <_svfprintf_r+0x7c8>)
   89b58:	2d10      	cmp	r5, #16
   89b5a:	f8c8 0000 	str.w	r0, [r8]
   89b5e:	dd19      	ble.n	89b94 <_svfprintf_r+0x6d8>
   89b60:	980c      	ldr	r0, [sp, #48]	; 0x30
   89b62:	990d      	ldr	r1, [sp, #52]	; 0x34
   89b64:	1c43      	adds	r3, r0, #1
   89b66:	2210      	movs	r2, #16
   89b68:	3110      	adds	r1, #16
   89b6a:	2b07      	cmp	r3, #7
   89b6c:	f8c8 2004 	str.w	r2, [r8, #4]
   89b70:	910d      	str	r1, [sp, #52]	; 0x34
   89b72:	930c      	str	r3, [sp, #48]	; 0x30
   89b74:	dc02      	bgt.n	89b7c <_svfprintf_r+0x6c0>
   89b76:	f108 0808 	add.w	r8, r8, #8
   89b7a:	e009      	b.n	89b90 <_svfprintf_r+0x6d4>
   89b7c:	4658      	mov	r0, fp
   89b7e:	4649      	mov	r1, r9
   89b80:	aa0b      	add	r2, sp, #44	; 0x2c
   89b82:	f000 fd55 	bl	8a630 <__ssprint_r>
   89b86:	2800      	cmp	r0, #0
   89b88:	f040 8085 	bne.w	89c96 <_svfprintf_r+0x7da>
   89b8c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89b90:	3d10      	subs	r5, #16
   89b92:	e7e0      	b.n	89b56 <_svfprintf_r+0x69a>
   89b94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89b96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89b98:	1c51      	adds	r1, r2, #1
   89b9a:	f8c8 5004 	str.w	r5, [r8, #4]
   89b9e:	2907      	cmp	r1, #7
   89ba0:	441d      	add	r5, r3
   89ba2:	950d      	str	r5, [sp, #52]	; 0x34
   89ba4:	910c      	str	r1, [sp, #48]	; 0x30
   89ba6:	dc02      	bgt.n	89bae <_svfprintf_r+0x6f2>
   89ba8:	f108 0808 	add.w	r8, r8, #8
   89bac:	e008      	b.n	89bc0 <_svfprintf_r+0x704>
   89bae:	4658      	mov	r0, fp
   89bb0:	4649      	mov	r1, r9
   89bb2:	aa0b      	add	r2, sp, #44	; 0x2c
   89bb4:	f000 fd3c 	bl	8a630 <__ssprint_r>
   89bb8:	2800      	cmp	r0, #0
   89bba:	d16c      	bne.n	89c96 <_svfprintf_r+0x7da>
   89bbc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89bc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89bc2:	980d      	ldr	r0, [sp, #52]	; 0x34
   89bc4:	1c5a      	adds	r2, r3, #1
   89bc6:	f8c8 4004 	str.w	r4, [r8, #4]
   89bca:	2a07      	cmp	r2, #7
   89bcc:	4404      	add	r4, r0
   89bce:	f8c8 a000 	str.w	sl, [r8]
   89bd2:	940d      	str	r4, [sp, #52]	; 0x34
   89bd4:	920c      	str	r2, [sp, #48]	; 0x30
   89bd6:	dc02      	bgt.n	89bde <_svfprintf_r+0x722>
   89bd8:	f108 0308 	add.w	r3, r8, #8
   89bdc:	e007      	b.n	89bee <_svfprintf_r+0x732>
   89bde:	4658      	mov	r0, fp
   89be0:	4649      	mov	r1, r9
   89be2:	aa0b      	add	r2, sp, #44	; 0x2c
   89be4:	f000 fd24 	bl	8a630 <__ssprint_r>
   89be8:	2800      	cmp	r0, #0
   89bea:	d154      	bne.n	89c96 <_svfprintf_r+0x7da>
   89bec:	ab18      	add	r3, sp, #96	; 0x60
   89bee:	077a      	lsls	r2, r7, #29
   89bf0:	d40b      	bmi.n	89c0a <_svfprintf_r+0x74e>
   89bf2:	9804      	ldr	r0, [sp, #16]
   89bf4:	9b02      	ldr	r3, [sp, #8]
   89bf6:	9a03      	ldr	r2, [sp, #12]
   89bf8:	990d      	ldr	r1, [sp, #52]	; 0x34
   89bfa:	4293      	cmp	r3, r2
   89bfc:	bfac      	ite	ge
   89bfe:	18c0      	addge	r0, r0, r3
   89c00:	1880      	addlt	r0, r0, r2
   89c02:	9004      	str	r0, [sp, #16]
   89c04:	2900      	cmp	r1, #0
   89c06:	d036      	beq.n	89c76 <_svfprintf_r+0x7ba>
   89c08:	e02f      	b.n	89c6a <_svfprintf_r+0x7ae>
   89c0a:	9c03      	ldr	r4, [sp, #12]
   89c0c:	9902      	ldr	r1, [sp, #8]
   89c0e:	1a64      	subs	r4, r4, r1
   89c10:	2c00      	cmp	r4, #0
   89c12:	ddee      	ble.n	89bf2 <_svfprintf_r+0x736>
   89c14:	481a      	ldr	r0, [pc, #104]	; (89c80 <_svfprintf_r+0x7c4>)
   89c16:	2c10      	cmp	r4, #16
   89c18:	6018      	str	r0, [r3, #0]
   89c1a:	dd15      	ble.n	89c48 <_svfprintf_r+0x78c>
   89c1c:	990c      	ldr	r1, [sp, #48]	; 0x30
   89c1e:	2010      	movs	r0, #16
   89c20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   89c22:	6058      	str	r0, [r3, #4]
   89c24:	1c48      	adds	r0, r1, #1
   89c26:	3210      	adds	r2, #16
   89c28:	2807      	cmp	r0, #7
   89c2a:	920d      	str	r2, [sp, #52]	; 0x34
   89c2c:	900c      	str	r0, [sp, #48]	; 0x30
   89c2e:	dc01      	bgt.n	89c34 <_svfprintf_r+0x778>
   89c30:	3308      	adds	r3, #8
   89c32:	e007      	b.n	89c44 <_svfprintf_r+0x788>
   89c34:	4658      	mov	r0, fp
   89c36:	4649      	mov	r1, r9
   89c38:	aa0b      	add	r2, sp, #44	; 0x2c
   89c3a:	f000 fcf9 	bl	8a630 <__ssprint_r>
   89c3e:	2800      	cmp	r0, #0
   89c40:	d129      	bne.n	89c96 <_svfprintf_r+0x7da>
   89c42:	ab18      	add	r3, sp, #96	; 0x60
   89c44:	3c10      	subs	r4, #16
   89c46:	e7e5      	b.n	89c14 <_svfprintf_r+0x758>
   89c48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89c4a:	605c      	str	r4, [r3, #4]
   89c4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89c4e:	1c51      	adds	r1, r2, #1
   89c50:	191c      	adds	r4, r3, r4
   89c52:	2907      	cmp	r1, #7
   89c54:	940d      	str	r4, [sp, #52]	; 0x34
   89c56:	910c      	str	r1, [sp, #48]	; 0x30
   89c58:	ddcb      	ble.n	89bf2 <_svfprintf_r+0x736>
   89c5a:	4658      	mov	r0, fp
   89c5c:	4649      	mov	r1, r9
   89c5e:	aa0b      	add	r2, sp, #44	; 0x2c
   89c60:	f000 fce6 	bl	8a630 <__ssprint_r>
   89c64:	2800      	cmp	r0, #0
   89c66:	d0c4      	beq.n	89bf2 <_svfprintf_r+0x736>
   89c68:	e015      	b.n	89c96 <_svfprintf_r+0x7da>
   89c6a:	4658      	mov	r0, fp
   89c6c:	4649      	mov	r1, r9
   89c6e:	aa0b      	add	r2, sp, #44	; 0x2c
   89c70:	f000 fcde 	bl	8a630 <__ssprint_r>
   89c74:	b978      	cbnz	r0, 89c96 <_svfprintf_r+0x7da>
   89c76:	2500      	movs	r5, #0
   89c78:	950c      	str	r5, [sp, #48]	; 0x30
   89c7a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89c7e:	e446      	b.n	8950e <_svfprintf_r+0x52>
   89c80:	0008bbbe 	.word	0x0008bbbe
   89c84:	0008bbce 	.word	0x0008bbce
   89c88:	980d      	ldr	r0, [sp, #52]	; 0x34
   89c8a:	b120      	cbz	r0, 89c96 <_svfprintf_r+0x7da>
   89c8c:	4658      	mov	r0, fp
   89c8e:	4649      	mov	r1, r9
   89c90:	aa0b      	add	r2, sp, #44	; 0x2c
   89c92:	f000 fccd 	bl	8a630 <__ssprint_r>
   89c96:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   89c9a:	9b04      	ldr	r3, [sp, #16]
   89c9c:	f002 0140 	and.w	r1, r2, #64	; 0x40
   89ca0:	b208      	sxth	r0, r1
   89ca2:	2800      	cmp	r0, #0
   89ca4:	bf18      	it	ne
   89ca6:	f04f 33ff 	movne.w	r3, #4294967295
   89caa:	4618      	mov	r0, r3
   89cac:	b029      	add	sp, #164	; 0xa4
   89cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89cb2:	bf00      	nop

00089cb4 <register_fini>:
   89cb4:	4b02      	ldr	r3, [pc, #8]	; (89cc0 <register_fini+0xc>)
   89cb6:	b113      	cbz	r3, 89cbe <register_fini+0xa>
   89cb8:	4802      	ldr	r0, [pc, #8]	; (89cc4 <register_fini+0x10>)
   89cba:	f000 b805 	b.w	89cc8 <atexit>
   89cbe:	4770      	bx	lr
   89cc0:	00000000 	.word	0x00000000
   89cc4:	00089389 	.word	0x00089389

00089cc8 <atexit>:
   89cc8:	4601      	mov	r1, r0
   89cca:	2000      	movs	r0, #0
   89ccc:	4602      	mov	r2, r0
   89cce:	4603      	mov	r3, r0
   89cd0:	f7ff bb0c 	b.w	892ec <__register_exitproc>

00089cd4 <_malloc_trim_r>:
   89cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89cd6:	4d23      	ldr	r5, [pc, #140]	; (89d64 <_malloc_trim_r+0x90>)
   89cd8:	460e      	mov	r6, r1
   89cda:	4604      	mov	r4, r0
   89cdc:	f000 fb28 	bl	8a330 <__malloc_lock>
   89ce0:	68ab      	ldr	r3, [r5, #8]
   89ce2:	685f      	ldr	r7, [r3, #4]
   89ce4:	f027 0703 	bic.w	r7, r7, #3
   89ce8:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
   89cec:	1b81      	subs	r1, r0, r6
   89cee:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   89cf2:	f022 060f 	bic.w	r6, r2, #15
   89cf6:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   89cfa:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   89cfe:	da04      	bge.n	89d0a <_malloc_trim_r+0x36>
   89d00:	4620      	mov	r0, r4
   89d02:	f000 fb16 	bl	8a332 <__malloc_unlock>
   89d06:	2000      	movs	r0, #0
   89d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89d0a:	2100      	movs	r1, #0
   89d0c:	4620      	mov	r0, r4
   89d0e:	f000 fc7f 	bl	8a610 <_sbrk_r>
   89d12:	68ab      	ldr	r3, [r5, #8]
   89d14:	19d9      	adds	r1, r3, r7
   89d16:	4288      	cmp	r0, r1
   89d18:	d1f2      	bne.n	89d00 <_malloc_trim_r+0x2c>
   89d1a:	4271      	negs	r1, r6
   89d1c:	4620      	mov	r0, r4
   89d1e:	f000 fc77 	bl	8a610 <_sbrk_r>
   89d22:	3001      	adds	r0, #1
   89d24:	d110      	bne.n	89d48 <_malloc_trim_r+0x74>
   89d26:	2100      	movs	r1, #0
   89d28:	4620      	mov	r0, r4
   89d2a:	f000 fc71 	bl	8a610 <_sbrk_r>
   89d2e:	68ab      	ldr	r3, [r5, #8]
   89d30:	1ac2      	subs	r2, r0, r3
   89d32:	2a0f      	cmp	r2, #15
   89d34:	dde4      	ble.n	89d00 <_malloc_trim_r+0x2c>
   89d36:	490c      	ldr	r1, [pc, #48]	; (89d68 <_malloc_trim_r+0x94>)
   89d38:	f042 0201 	orr.w	r2, r2, #1
   89d3c:	6809      	ldr	r1, [r1, #0]
   89d3e:	605a      	str	r2, [r3, #4]
   89d40:	1a40      	subs	r0, r0, r1
   89d42:	490a      	ldr	r1, [pc, #40]	; (89d6c <_malloc_trim_r+0x98>)
   89d44:	6008      	str	r0, [r1, #0]
   89d46:	e7db      	b.n	89d00 <_malloc_trim_r+0x2c>
   89d48:	4b08      	ldr	r3, [pc, #32]	; (89d6c <_malloc_trim_r+0x98>)
   89d4a:	68a8      	ldr	r0, [r5, #8]
   89d4c:	681a      	ldr	r2, [r3, #0]
   89d4e:	1bbf      	subs	r7, r7, r6
   89d50:	f047 0701 	orr.w	r7, r7, #1
   89d54:	6047      	str	r7, [r0, #4]
   89d56:	1b96      	subs	r6, r2, r6
   89d58:	4620      	mov	r0, r4
   89d5a:	601e      	str	r6, [r3, #0]
   89d5c:	f000 fae9 	bl	8a332 <__malloc_unlock>
   89d60:	2001      	movs	r0, #1
   89d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89d64:	20070670 	.word	0x20070670
   89d68:	20070a78 	.word	0x20070a78
   89d6c:	20071484 	.word	0x20071484

00089d70 <_free_r>:
   89d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89d72:	4606      	mov	r6, r0
   89d74:	460d      	mov	r5, r1
   89d76:	2900      	cmp	r1, #0
   89d78:	f000 80a6 	beq.w	89ec8 <_free_r+0x158>
   89d7c:	f000 fad8 	bl	8a330 <__malloc_lock>
   89d80:	f855 cc04 	ldr.w	ip, [r5, #-4]
   89d84:	4f51      	ldr	r7, [pc, #324]	; (89ecc <_free_r+0x15c>)
   89d86:	f1a5 0308 	sub.w	r3, r5, #8
   89d8a:	f02c 0201 	bic.w	r2, ip, #1
   89d8e:	189c      	adds	r4, r3, r2
   89d90:	68b9      	ldr	r1, [r7, #8]
   89d92:	6860      	ldr	r0, [r4, #4]
   89d94:	428c      	cmp	r4, r1
   89d96:	f020 0003 	bic.w	r0, r0, #3
   89d9a:	f00c 0101 	and.w	r1, ip, #1
   89d9e:	d11c      	bne.n	89dda <_free_r+0x6a>
   89da0:	1882      	adds	r2, r0, r2
   89da2:	b939      	cbnz	r1, 89db4 <_free_r+0x44>
   89da4:	f855 1c08 	ldr.w	r1, [r5, #-8]
   89da8:	1a5b      	subs	r3, r3, r1
   89daa:	6898      	ldr	r0, [r3, #8]
   89dac:	1852      	adds	r2, r2, r1
   89dae:	68d9      	ldr	r1, [r3, #12]
   89db0:	60c1      	str	r1, [r0, #12]
   89db2:	6088      	str	r0, [r1, #8]
   89db4:	4845      	ldr	r0, [pc, #276]	; (89ecc <_free_r+0x15c>)
   89db6:	f042 0101 	orr.w	r1, r2, #1
   89dba:	6059      	str	r1, [r3, #4]
   89dbc:	6083      	str	r3, [r0, #8]
   89dbe:	4b44      	ldr	r3, [pc, #272]	; (89ed0 <_free_r+0x160>)
   89dc0:	6819      	ldr	r1, [r3, #0]
   89dc2:	428a      	cmp	r2, r1
   89dc4:	d304      	bcc.n	89dd0 <_free_r+0x60>
   89dc6:	4a43      	ldr	r2, [pc, #268]	; (89ed4 <_free_r+0x164>)
   89dc8:	4630      	mov	r0, r6
   89dca:	6811      	ldr	r1, [r2, #0]
   89dcc:	f7ff ff82 	bl	89cd4 <_malloc_trim_r>
   89dd0:	4630      	mov	r0, r6
   89dd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   89dd6:	f000 baac 	b.w	8a332 <__malloc_unlock>
   89dda:	6060      	str	r0, [r4, #4]
   89ddc:	b959      	cbnz	r1, 89df6 <_free_r+0x86>
   89dde:	f855 5c08 	ldr.w	r5, [r5, #-8]
   89de2:	3708      	adds	r7, #8
   89de4:	1b5b      	subs	r3, r3, r5
   89de6:	1952      	adds	r2, r2, r5
   89de8:	689d      	ldr	r5, [r3, #8]
   89dea:	42bd      	cmp	r5, r7
   89dec:	d005      	beq.n	89dfa <_free_r+0x8a>
   89dee:	68df      	ldr	r7, [r3, #12]
   89df0:	60ef      	str	r7, [r5, #12]
   89df2:	60bd      	str	r5, [r7, #8]
   89df4:	e002      	b.n	89dfc <_free_r+0x8c>
   89df6:	2100      	movs	r1, #0
   89df8:	e000      	b.n	89dfc <_free_r+0x8c>
   89dfa:	2101      	movs	r1, #1
   89dfc:	1825      	adds	r5, r4, r0
   89dfe:	686d      	ldr	r5, [r5, #4]
   89e00:	f015 0f01 	tst.w	r5, #1
   89e04:	d10f      	bne.n	89e26 <_free_r+0xb6>
   89e06:	1812      	adds	r2, r2, r0
   89e08:	b949      	cbnz	r1, 89e1e <_free_r+0xae>
   89e0a:	68a0      	ldr	r0, [r4, #8]
   89e0c:	4d32      	ldr	r5, [pc, #200]	; (89ed8 <_free_r+0x168>)
   89e0e:	42a8      	cmp	r0, r5
   89e10:	d105      	bne.n	89e1e <_free_r+0xae>
   89e12:	60eb      	str	r3, [r5, #12]
   89e14:	60ab      	str	r3, [r5, #8]
   89e16:	60d8      	str	r0, [r3, #12]
   89e18:	6098      	str	r0, [r3, #8]
   89e1a:	2101      	movs	r1, #1
   89e1c:	e003      	b.n	89e26 <_free_r+0xb6>
   89e1e:	68e0      	ldr	r0, [r4, #12]
   89e20:	68a4      	ldr	r4, [r4, #8]
   89e22:	60e0      	str	r0, [r4, #12]
   89e24:	6084      	str	r4, [r0, #8]
   89e26:	f042 0001 	orr.w	r0, r2, #1
   89e2a:	6058      	str	r0, [r3, #4]
   89e2c:	509a      	str	r2, [r3, r2]
   89e2e:	2900      	cmp	r1, #0
   89e30:	d1ce      	bne.n	89dd0 <_free_r+0x60>
   89e32:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   89e36:	d20c      	bcs.n	89e52 <_free_r+0xe2>
   89e38:	08d2      	lsrs	r2, r2, #3
   89e3a:	1090      	asrs	r0, r2, #2
   89e3c:	2401      	movs	r4, #1
   89e3e:	fa04 f400 	lsl.w	r4, r4, r0
   89e42:	4922      	ldr	r1, [pc, #136]	; (89ecc <_free_r+0x15c>)
   89e44:	6848      	ldr	r0, [r1, #4]
   89e46:	4320      	orrs	r0, r4
   89e48:	6048      	str	r0, [r1, #4]
   89e4a:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   89e4e:	6881      	ldr	r1, [r0, #8]
   89e50:	e035      	b.n	89ebe <_free_r+0x14e>
   89e52:	0a54      	lsrs	r4, r2, #9
   89e54:	2c04      	cmp	r4, #4
   89e56:	d802      	bhi.n	89e5e <_free_r+0xee>
   89e58:	0994      	lsrs	r4, r2, #6
   89e5a:	3438      	adds	r4, #56	; 0x38
   89e5c:	e016      	b.n	89e8c <_free_r+0x11c>
   89e5e:	2c14      	cmp	r4, #20
   89e60:	d801      	bhi.n	89e66 <_free_r+0xf6>
   89e62:	345b      	adds	r4, #91	; 0x5b
   89e64:	e012      	b.n	89e8c <_free_r+0x11c>
   89e66:	2c54      	cmp	r4, #84	; 0x54
   89e68:	d802      	bhi.n	89e70 <_free_r+0x100>
   89e6a:	0b14      	lsrs	r4, r2, #12
   89e6c:	346e      	adds	r4, #110	; 0x6e
   89e6e:	e00d      	b.n	89e8c <_free_r+0x11c>
   89e70:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
   89e74:	d802      	bhi.n	89e7c <_free_r+0x10c>
   89e76:	0bd4      	lsrs	r4, r2, #15
   89e78:	3477      	adds	r4, #119	; 0x77
   89e7a:	e007      	b.n	89e8c <_free_r+0x11c>
   89e7c:	f240 5554 	movw	r5, #1364	; 0x554
   89e80:	42ac      	cmp	r4, r5
   89e82:	d802      	bhi.n	89e8a <_free_r+0x11a>
   89e84:	0c94      	lsrs	r4, r2, #18
   89e86:	347c      	adds	r4, #124	; 0x7c
   89e88:	e000      	b.n	89e8c <_free_r+0x11c>
   89e8a:	247e      	movs	r4, #126	; 0x7e
   89e8c:	4d0f      	ldr	r5, [pc, #60]	; (89ecc <_free_r+0x15c>)
   89e8e:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   89e92:	6881      	ldr	r1, [r0, #8]
   89e94:	4281      	cmp	r1, r0
   89e96:	d10c      	bne.n	89eb2 <_free_r+0x142>
   89e98:	2201      	movs	r2, #1
   89e9a:	10a4      	asrs	r4, r4, #2
   89e9c:	fa02 f404 	lsl.w	r4, r2, r4
   89ea0:	6868      	ldr	r0, [r5, #4]
   89ea2:	ea44 0200 	orr.w	r2, r4, r0
   89ea6:	606a      	str	r2, [r5, #4]
   89ea8:	4608      	mov	r0, r1
   89eaa:	e008      	b.n	89ebe <_free_r+0x14e>
   89eac:	6889      	ldr	r1, [r1, #8]
   89eae:	4281      	cmp	r1, r0
   89eb0:	d004      	beq.n	89ebc <_free_r+0x14c>
   89eb2:	684c      	ldr	r4, [r1, #4]
   89eb4:	f024 0403 	bic.w	r4, r4, #3
   89eb8:	42a2      	cmp	r2, r4
   89eba:	d3f7      	bcc.n	89eac <_free_r+0x13c>
   89ebc:	68c8      	ldr	r0, [r1, #12]
   89ebe:	60d8      	str	r0, [r3, #12]
   89ec0:	6099      	str	r1, [r3, #8]
   89ec2:	6083      	str	r3, [r0, #8]
   89ec4:	60cb      	str	r3, [r1, #12]
   89ec6:	e783      	b.n	89dd0 <_free_r+0x60>
   89ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89eca:	bf00      	nop
   89ecc:	20070670 	.word	0x20070670
   89ed0:	20070a7c 	.word	0x20070a7c
   89ed4:	20071480 	.word	0x20071480
   89ed8:	20070678 	.word	0x20070678

00089edc <_malloc_r>:
   89edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   89ee0:	f101 040b 	add.w	r4, r1, #11
   89ee4:	2c16      	cmp	r4, #22
   89ee6:	4606      	mov	r6, r0
   89ee8:	d903      	bls.n	89ef2 <_malloc_r+0x16>
   89eea:	f034 0407 	bics.w	r4, r4, #7
   89eee:	d501      	bpl.n	89ef4 <_malloc_r+0x18>
   89ef0:	e002      	b.n	89ef8 <_malloc_r+0x1c>
   89ef2:	2410      	movs	r4, #16
   89ef4:	428c      	cmp	r4, r1
   89ef6:	d202      	bcs.n	89efe <_malloc_r+0x22>
   89ef8:	250c      	movs	r5, #12
   89efa:	6035      	str	r5, [r6, #0]
   89efc:	e1d9      	b.n	8a2b2 <_malloc_r+0x3d6>
   89efe:	4630      	mov	r0, r6
   89f00:	f000 fa16 	bl	8a330 <__malloc_lock>
   89f04:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   89f08:	d214      	bcs.n	89f34 <_malloc_r+0x58>
   89f0a:	4da0      	ldr	r5, [pc, #640]	; (8a18c <_malloc_r+0x2b0>)
   89f0c:	08e1      	lsrs	r1, r4, #3
   89f0e:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   89f12:	68c5      	ldr	r5, [r0, #12]
   89f14:	4285      	cmp	r5, r0
   89f16:	d105      	bne.n	89f24 <_malloc_r+0x48>
   89f18:	f105 0308 	add.w	r3, r5, #8
   89f1c:	696d      	ldr	r5, [r5, #20]
   89f1e:	1c8a      	adds	r2, r1, #2
   89f20:	429d      	cmp	r5, r3
   89f22:	d044      	beq.n	89fae <_malloc_r+0xd2>
   89f24:	68e8      	ldr	r0, [r5, #12]
   89f26:	68a9      	ldr	r1, [r5, #8]
   89f28:	686a      	ldr	r2, [r5, #4]
   89f2a:	60c8      	str	r0, [r1, #12]
   89f2c:	f022 0303 	bic.w	r3, r2, #3
   89f30:	6081      	str	r1, [r0, #8]
   89f32:	e059      	b.n	89fe8 <_malloc_r+0x10c>
   89f34:	0a62      	lsrs	r2, r4, #9
   89f36:	d101      	bne.n	89f3c <_malloc_r+0x60>
   89f38:	08e2      	lsrs	r2, r4, #3
   89f3a:	e01b      	b.n	89f74 <_malloc_r+0x98>
   89f3c:	2a04      	cmp	r2, #4
   89f3e:	d802      	bhi.n	89f46 <_malloc_r+0x6a>
   89f40:	09a2      	lsrs	r2, r4, #6
   89f42:	3238      	adds	r2, #56	; 0x38
   89f44:	e016      	b.n	89f74 <_malloc_r+0x98>
   89f46:	2a14      	cmp	r2, #20
   89f48:	d801      	bhi.n	89f4e <_malloc_r+0x72>
   89f4a:	325b      	adds	r2, #91	; 0x5b
   89f4c:	e012      	b.n	89f74 <_malloc_r+0x98>
   89f4e:	2a54      	cmp	r2, #84	; 0x54
   89f50:	d802      	bhi.n	89f58 <_malloc_r+0x7c>
   89f52:	0b22      	lsrs	r2, r4, #12
   89f54:	326e      	adds	r2, #110	; 0x6e
   89f56:	e00d      	b.n	89f74 <_malloc_r+0x98>
   89f58:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   89f5c:	d802      	bhi.n	89f64 <_malloc_r+0x88>
   89f5e:	0be2      	lsrs	r2, r4, #15
   89f60:	3277      	adds	r2, #119	; 0x77
   89f62:	e007      	b.n	89f74 <_malloc_r+0x98>
   89f64:	f240 5354 	movw	r3, #1364	; 0x554
   89f68:	429a      	cmp	r2, r3
   89f6a:	d802      	bhi.n	89f72 <_malloc_r+0x96>
   89f6c:	0ca2      	lsrs	r2, r4, #18
   89f6e:	327c      	adds	r2, #124	; 0x7c
   89f70:	e000      	b.n	89f74 <_malloc_r+0x98>
   89f72:	227e      	movs	r2, #126	; 0x7e
   89f74:	4885      	ldr	r0, [pc, #532]	; (8a18c <_malloc_r+0x2b0>)
   89f76:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
   89f7a:	68dd      	ldr	r5, [r3, #12]
   89f7c:	429d      	cmp	r5, r3
   89f7e:	d015      	beq.n	89fac <_malloc_r+0xd0>
   89f80:	6869      	ldr	r1, [r5, #4]
   89f82:	f021 0103 	bic.w	r1, r1, #3
   89f86:	1b08      	subs	r0, r1, r4
   89f88:	280f      	cmp	r0, #15
   89f8a:	dd01      	ble.n	89f90 <_malloc_r+0xb4>
   89f8c:	3a01      	subs	r2, #1
   89f8e:	e00d      	b.n	89fac <_malloc_r+0xd0>
   89f90:	2800      	cmp	r0, #0
   89f92:	db09      	blt.n	89fa8 <_malloc_r+0xcc>
   89f94:	68eb      	ldr	r3, [r5, #12]
   89f96:	68aa      	ldr	r2, [r5, #8]
   89f98:	60d3      	str	r3, [r2, #12]
   89f9a:	609a      	str	r2, [r3, #8]
   89f9c:	186b      	adds	r3, r5, r1
   89f9e:	685a      	ldr	r2, [r3, #4]
   89fa0:	f042 0001 	orr.w	r0, r2, #1
   89fa4:	6058      	str	r0, [r3, #4]
   89fa6:	e190      	b.n	8a2ca <_malloc_r+0x3ee>
   89fa8:	68ed      	ldr	r5, [r5, #12]
   89faa:	e7e7      	b.n	89f7c <_malloc_r+0xa0>
   89fac:	3201      	adds	r2, #1
   89fae:	4977      	ldr	r1, [pc, #476]	; (8a18c <_malloc_r+0x2b0>)
   89fb0:	690d      	ldr	r5, [r1, #16]
   89fb2:	f101 0708 	add.w	r7, r1, #8
   89fb6:	42bd      	cmp	r5, r7
   89fb8:	d068      	beq.n	8a08c <_malloc_r+0x1b0>
   89fba:	6868      	ldr	r0, [r5, #4]
   89fbc:	f020 0303 	bic.w	r3, r0, #3
   89fc0:	1b18      	subs	r0, r3, r4
   89fc2:	280f      	cmp	r0, #15
   89fc4:	dd0c      	ble.n	89fe0 <_malloc_r+0x104>
   89fc6:	192b      	adds	r3, r5, r4
   89fc8:	614b      	str	r3, [r1, #20]
   89fca:	610b      	str	r3, [r1, #16]
   89fcc:	f044 0401 	orr.w	r4, r4, #1
   89fd0:	f040 0101 	orr.w	r1, r0, #1
   89fd4:	606c      	str	r4, [r5, #4]
   89fd6:	60df      	str	r7, [r3, #12]
   89fd8:	609f      	str	r7, [r3, #8]
   89fda:	6059      	str	r1, [r3, #4]
   89fdc:	5018      	str	r0, [r3, r0]
   89fde:	e174      	b.n	8a2ca <_malloc_r+0x3ee>
   89fe0:	2800      	cmp	r0, #0
   89fe2:	614f      	str	r7, [r1, #20]
   89fe4:	610f      	str	r7, [r1, #16]
   89fe6:	db01      	blt.n	89fec <_malloc_r+0x110>
   89fe8:	18eb      	adds	r3, r5, r3
   89fea:	e7d8      	b.n	89f9e <_malloc_r+0xc2>
   89fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   89ff0:	d20f      	bcs.n	8a012 <_malloc_r+0x136>
   89ff2:	08db      	lsrs	r3, r3, #3
   89ff4:	1098      	asrs	r0, r3, #2
   89ff6:	2701      	movs	r7, #1
   89ff8:	fa07 f700 	lsl.w	r7, r7, r0
   89ffc:	6848      	ldr	r0, [r1, #4]
   89ffe:	4307      	orrs	r7, r0
   8a000:	604f      	str	r7, [r1, #4]
   8a002:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   8a006:	688b      	ldr	r3, [r1, #8]
   8a008:	60e9      	str	r1, [r5, #12]
   8a00a:	60ab      	str	r3, [r5, #8]
   8a00c:	60dd      	str	r5, [r3, #12]
   8a00e:	608d      	str	r5, [r1, #8]
   8a010:	e03c      	b.n	8a08c <_malloc_r+0x1b0>
   8a012:	0a58      	lsrs	r0, r3, #9
   8a014:	2804      	cmp	r0, #4
   8a016:	d802      	bhi.n	8a01e <_malloc_r+0x142>
   8a018:	0998      	lsrs	r0, r3, #6
   8a01a:	3038      	adds	r0, #56	; 0x38
   8a01c:	e016      	b.n	8a04c <_malloc_r+0x170>
   8a01e:	2814      	cmp	r0, #20
   8a020:	d801      	bhi.n	8a026 <_malloc_r+0x14a>
   8a022:	305b      	adds	r0, #91	; 0x5b
   8a024:	e012      	b.n	8a04c <_malloc_r+0x170>
   8a026:	2854      	cmp	r0, #84	; 0x54
   8a028:	d802      	bhi.n	8a030 <_malloc_r+0x154>
   8a02a:	0b18      	lsrs	r0, r3, #12
   8a02c:	306e      	adds	r0, #110	; 0x6e
   8a02e:	e00d      	b.n	8a04c <_malloc_r+0x170>
   8a030:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   8a034:	d802      	bhi.n	8a03c <_malloc_r+0x160>
   8a036:	0bd8      	lsrs	r0, r3, #15
   8a038:	3077      	adds	r0, #119	; 0x77
   8a03a:	e007      	b.n	8a04c <_malloc_r+0x170>
   8a03c:	f240 5754 	movw	r7, #1364	; 0x554
   8a040:	42b8      	cmp	r0, r7
   8a042:	d802      	bhi.n	8a04a <_malloc_r+0x16e>
   8a044:	0c98      	lsrs	r0, r3, #18
   8a046:	307c      	adds	r0, #124	; 0x7c
   8a048:	e000      	b.n	8a04c <_malloc_r+0x170>
   8a04a:	207e      	movs	r0, #126	; 0x7e
   8a04c:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8a18c <_malloc_r+0x2b0>
   8a050:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
   8a054:	68b9      	ldr	r1, [r7, #8]
   8a056:	42b9      	cmp	r1, r7
   8a058:	d10e      	bne.n	8a078 <_malloc_r+0x19c>
   8a05a:	1087      	asrs	r7, r0, #2
   8a05c:	2301      	movs	r3, #1
   8a05e:	fa03 f007 	lsl.w	r0, r3, r7
   8a062:	f8de 7004 	ldr.w	r7, [lr, #4]
   8a066:	ea40 0307 	orr.w	r3, r0, r7
   8a06a:	f8ce 3004 	str.w	r3, [lr, #4]
   8a06e:	4608      	mov	r0, r1
   8a070:	e008      	b.n	8a084 <_malloc_r+0x1a8>
   8a072:	6889      	ldr	r1, [r1, #8]
   8a074:	42b9      	cmp	r1, r7
   8a076:	d004      	beq.n	8a082 <_malloc_r+0x1a6>
   8a078:	6848      	ldr	r0, [r1, #4]
   8a07a:	f020 0003 	bic.w	r0, r0, #3
   8a07e:	4283      	cmp	r3, r0
   8a080:	d3f7      	bcc.n	8a072 <_malloc_r+0x196>
   8a082:	68c8      	ldr	r0, [r1, #12]
   8a084:	60e8      	str	r0, [r5, #12]
   8a086:	60a9      	str	r1, [r5, #8]
   8a088:	60cd      	str	r5, [r1, #12]
   8a08a:	6085      	str	r5, [r0, #8]
   8a08c:	1095      	asrs	r5, r2, #2
   8a08e:	2001      	movs	r0, #1
   8a090:	fa00 f305 	lsl.w	r3, r0, r5
   8a094:	4f3d      	ldr	r7, [pc, #244]	; (8a18c <_malloc_r+0x2b0>)
   8a096:	6879      	ldr	r1, [r7, #4]
   8a098:	428b      	cmp	r3, r1
   8a09a:	d85d      	bhi.n	8a158 <_malloc_r+0x27c>
   8a09c:	420b      	tst	r3, r1
   8a09e:	d105      	bne.n	8a0ac <_malloc_r+0x1d0>
   8a0a0:	f022 0203 	bic.w	r2, r2, #3
   8a0a4:	005b      	lsls	r3, r3, #1
   8a0a6:	3204      	adds	r2, #4
   8a0a8:	420b      	tst	r3, r1
   8a0aa:	d0fb      	beq.n	8a0a4 <_malloc_r+0x1c8>
   8a0ac:	4d37      	ldr	r5, [pc, #220]	; (8a18c <_malloc_r+0x2b0>)
   8a0ae:	4610      	mov	r0, r2
   8a0b0:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
   8a0b4:	4677      	mov	r7, lr
   8a0b6:	68fd      	ldr	r5, [r7, #12]
   8a0b8:	42bd      	cmp	r5, r7
   8a0ba:	d02d      	beq.n	8a118 <_malloc_r+0x23c>
   8a0bc:	6869      	ldr	r1, [r5, #4]
   8a0be:	f021 0c03 	bic.w	ip, r1, #3
   8a0c2:	ebc4 010c 	rsb	r1, r4, ip
   8a0c6:	290f      	cmp	r1, #15
   8a0c8:	dd13      	ble.n	8a0f2 <_malloc_r+0x216>
   8a0ca:	192b      	adds	r3, r5, r4
   8a0cc:	f044 0401 	orr.w	r4, r4, #1
   8a0d0:	68ea      	ldr	r2, [r5, #12]
   8a0d2:	606c      	str	r4, [r5, #4]
   8a0d4:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8a0d8:	5059      	str	r1, [r3, r1]
   8a0da:	60c2      	str	r2, [r0, #12]
   8a0dc:	6090      	str	r0, [r2, #8]
   8a0de:	4a2b      	ldr	r2, [pc, #172]	; (8a18c <_malloc_r+0x2b0>)
   8a0e0:	f041 0001 	orr.w	r0, r1, #1
   8a0e4:	6153      	str	r3, [r2, #20]
   8a0e6:	6113      	str	r3, [r2, #16]
   8a0e8:	3208      	adds	r2, #8
   8a0ea:	60da      	str	r2, [r3, #12]
   8a0ec:	609a      	str	r2, [r3, #8]
   8a0ee:	6058      	str	r0, [r3, #4]
   8a0f0:	e00c      	b.n	8a10c <_malloc_r+0x230>
   8a0f2:	2900      	cmp	r1, #0
   8a0f4:	db0e      	blt.n	8a114 <_malloc_r+0x238>
   8a0f6:	eb05 000c 	add.w	r0, r5, ip
   8a0fa:	6842      	ldr	r2, [r0, #4]
   8a0fc:	68e9      	ldr	r1, [r5, #12]
   8a0fe:	f042 0301 	orr.w	r3, r2, #1
   8a102:	6043      	str	r3, [r0, #4]
   8a104:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8a108:	60c1      	str	r1, [r0, #12]
   8a10a:	6088      	str	r0, [r1, #8]
   8a10c:	4630      	mov	r0, r6
   8a10e:	f000 f910 	bl	8a332 <__malloc_unlock>
   8a112:	e0de      	b.n	8a2d2 <_malloc_r+0x3f6>
   8a114:	68ed      	ldr	r5, [r5, #12]
   8a116:	e7cf      	b.n	8a0b8 <_malloc_r+0x1dc>
   8a118:	3001      	adds	r0, #1
   8a11a:	0781      	lsls	r1, r0, #30
   8a11c:	f105 0708 	add.w	r7, r5, #8
   8a120:	d1c9      	bne.n	8a0b6 <_malloc_r+0x1da>
   8a122:	4671      	mov	r1, lr
   8a124:	0795      	lsls	r5, r2, #30
   8a126:	d105      	bne.n	8a134 <_malloc_r+0x258>
   8a128:	4a18      	ldr	r2, [pc, #96]	; (8a18c <_malloc_r+0x2b0>)
   8a12a:	6855      	ldr	r5, [r2, #4]
   8a12c:	ea25 0503 	bic.w	r5, r5, r3
   8a130:	6055      	str	r5, [r2, #4]
   8a132:	e005      	b.n	8a140 <_malloc_r+0x264>
   8a134:	f1a1 0708 	sub.w	r7, r1, #8
   8a138:	6809      	ldr	r1, [r1, #0]
   8a13a:	3a01      	subs	r2, #1
   8a13c:	42b9      	cmp	r1, r7
   8a13e:	d0f1      	beq.n	8a124 <_malloc_r+0x248>
   8a140:	4f12      	ldr	r7, [pc, #72]	; (8a18c <_malloc_r+0x2b0>)
   8a142:	005b      	lsls	r3, r3, #1
   8a144:	687f      	ldr	r7, [r7, #4]
   8a146:	42bb      	cmp	r3, r7
   8a148:	d806      	bhi.n	8a158 <_malloc_r+0x27c>
   8a14a:	b12b      	cbz	r3, 8a158 <_malloc_r+0x27c>
   8a14c:	4602      	mov	r2, r0
   8a14e:	423b      	tst	r3, r7
   8a150:	d1ac      	bne.n	8a0ac <_malloc_r+0x1d0>
   8a152:	3204      	adds	r2, #4
   8a154:	005b      	lsls	r3, r3, #1
   8a156:	e7fa      	b.n	8a14e <_malloc_r+0x272>
   8a158:	4b0c      	ldr	r3, [pc, #48]	; (8a18c <_malloc_r+0x2b0>)
   8a15a:	689f      	ldr	r7, [r3, #8]
   8a15c:	4619      	mov	r1, r3
   8a15e:	6878      	ldr	r0, [r7, #4]
   8a160:	f020 0903 	bic.w	r9, r0, #3
   8a164:	45a1      	cmp	r9, r4
   8a166:	d304      	bcc.n	8a172 <_malloc_r+0x296>
   8a168:	ebc4 0009 	rsb	r0, r4, r9
   8a16c:	280f      	cmp	r0, #15
   8a16e:	f300 80a2 	bgt.w	8a2b6 <_malloc_r+0x3da>
   8a172:	4a07      	ldr	r2, [pc, #28]	; (8a190 <_malloc_r+0x2b4>)
   8a174:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
   8a178:	6815      	ldr	r5, [r2, #0]
   8a17a:	3301      	adds	r3, #1
   8a17c:	eb07 0a09 	add.w	sl, r7, r9
   8a180:	eb04 0805 	add.w	r8, r4, r5
   8a184:	d106      	bne.n	8a194 <_malloc_r+0x2b8>
   8a186:	f108 0810 	add.w	r8, r8, #16
   8a18a:	e00b      	b.n	8a1a4 <_malloc_r+0x2c8>
   8a18c:	20070670 	.word	0x20070670
   8a190:	20071480 	.word	0x20071480
   8a194:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   8a198:	f100 010f 	add.w	r1, r0, #15
   8a19c:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   8a1a0:	f022 080f 	bic.w	r8, r2, #15
   8a1a4:	4630      	mov	r0, r6
   8a1a6:	4641      	mov	r1, r8
   8a1a8:	f000 fa32 	bl	8a610 <_sbrk_r>
   8a1ac:	1c42      	adds	r2, r0, #1
   8a1ae:	4605      	mov	r5, r0
   8a1b0:	d071      	beq.n	8a296 <_malloc_r+0x3ba>
   8a1b2:	4550      	cmp	r0, sl
   8a1b4:	d202      	bcs.n	8a1bc <_malloc_r+0x2e0>
   8a1b6:	4b48      	ldr	r3, [pc, #288]	; (8a2d8 <_malloc_r+0x3fc>)
   8a1b8:	429f      	cmp	r7, r3
   8a1ba:	d16c      	bne.n	8a296 <_malloc_r+0x3ba>
   8a1bc:	4847      	ldr	r0, [pc, #284]	; (8a2dc <_malloc_r+0x400>)
   8a1be:	4555      	cmp	r5, sl
   8a1c0:	6841      	ldr	r1, [r0, #4]
   8a1c2:	4a45      	ldr	r2, [pc, #276]	; (8a2d8 <_malloc_r+0x3fc>)
   8a1c4:	eb08 0301 	add.w	r3, r8, r1
   8a1c8:	6043      	str	r3, [r0, #4]
   8a1ca:	d107      	bne.n	8a1dc <_malloc_r+0x300>
   8a1cc:	0529      	lsls	r1, r5, #20
   8a1ce:	d105      	bne.n	8a1dc <_malloc_r+0x300>
   8a1d0:	6895      	ldr	r5, [r2, #8]
   8a1d2:	44c8      	add	r8, r9
   8a1d4:	f048 0001 	orr.w	r0, r8, #1
   8a1d8:	6068      	str	r0, [r5, #4]
   8a1da:	e051      	b.n	8a280 <_malloc_r+0x3a4>
   8a1dc:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   8a1e0:	1c42      	adds	r2, r0, #1
   8a1e2:	d103      	bne.n	8a1ec <_malloc_r+0x310>
   8a1e4:	4a3c      	ldr	r2, [pc, #240]	; (8a2d8 <_malloc_r+0x3fc>)
   8a1e6:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
   8a1ea:	e005      	b.n	8a1f8 <_malloc_r+0x31c>
   8a1ec:	ebca 0a05 	rsb	sl, sl, r5
   8a1f0:	eb03 010a 	add.w	r1, r3, sl
   8a1f4:	4b39      	ldr	r3, [pc, #228]	; (8a2dc <_malloc_r+0x400>)
   8a1f6:	6059      	str	r1, [r3, #4]
   8a1f8:	f015 0007 	ands.w	r0, r5, #7
   8a1fc:	bf1c      	itt	ne
   8a1fe:	f1c0 0008 	rsbne	r0, r0, #8
   8a202:	182d      	addne	r5, r5, r0
   8a204:	eb05 0c08 	add.w	ip, r5, r8
   8a208:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   8a20c:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
   8a210:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
   8a214:	4641      	mov	r1, r8
   8a216:	4630      	mov	r0, r6
   8a218:	f000 f9fa 	bl	8a610 <_sbrk_r>
   8a21c:	4a2f      	ldr	r2, [pc, #188]	; (8a2dc <_malloc_r+0x400>)
   8a21e:	1c43      	adds	r3, r0, #1
   8a220:	6853      	ldr	r3, [r2, #4]
   8a222:	bf08      	it	eq
   8a224:	f04f 0800 	moveq.w	r8, #0
   8a228:	eb08 0103 	add.w	r1, r8, r3
   8a22c:	bf08      	it	eq
   8a22e:	4628      	moveq	r0, r5
   8a230:	6051      	str	r1, [r2, #4]
   8a232:	1b40      	subs	r0, r0, r5
   8a234:	4a28      	ldr	r2, [pc, #160]	; (8a2d8 <_malloc_r+0x3fc>)
   8a236:	eb00 0308 	add.w	r3, r0, r8
   8a23a:	f043 0101 	orr.w	r1, r3, #1
   8a23e:	4297      	cmp	r7, r2
   8a240:	6095      	str	r5, [r2, #8]
   8a242:	6069      	str	r1, [r5, #4]
   8a244:	d01c      	beq.n	8a280 <_malloc_r+0x3a4>
   8a246:	f1b9 0f0f 	cmp.w	r9, #15
   8a24a:	d802      	bhi.n	8a252 <_malloc_r+0x376>
   8a24c:	2201      	movs	r2, #1
   8a24e:	606a      	str	r2, [r5, #4]
   8a250:	e021      	b.n	8a296 <_malloc_r+0x3ba>
   8a252:	687d      	ldr	r5, [r7, #4]
   8a254:	f1a9 090c 	sub.w	r9, r9, #12
   8a258:	f029 0907 	bic.w	r9, r9, #7
   8a25c:	f005 0201 	and.w	r2, r5, #1
   8a260:	2105      	movs	r1, #5
   8a262:	eb07 0309 	add.w	r3, r7, r9
   8a266:	ea49 0002 	orr.w	r0, r9, r2
   8a26a:	f1b9 0f0f 	cmp.w	r9, #15
   8a26e:	6078      	str	r0, [r7, #4]
   8a270:	6059      	str	r1, [r3, #4]
   8a272:	6099      	str	r1, [r3, #8]
   8a274:	d904      	bls.n	8a280 <_malloc_r+0x3a4>
   8a276:	4630      	mov	r0, r6
   8a278:	f107 0108 	add.w	r1, r7, #8
   8a27c:	f7ff fd78 	bl	89d70 <_free_r>
   8a280:	4a16      	ldr	r2, [pc, #88]	; (8a2dc <_malloc_r+0x400>)
   8a282:	6853      	ldr	r3, [r2, #4]
   8a284:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   8a286:	6b15      	ldr	r5, [r2, #48]	; 0x30
   8a288:	428b      	cmp	r3, r1
   8a28a:	bf88      	it	hi
   8a28c:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   8a28e:	42ab      	cmp	r3, r5
   8a290:	bf84      	itt	hi
   8a292:	4d12      	ldrhi	r5, [pc, #72]	; (8a2dc <_malloc_r+0x400>)
   8a294:	632b      	strhi	r3, [r5, #48]	; 0x30
   8a296:	4810      	ldr	r0, [pc, #64]	; (8a2d8 <_malloc_r+0x3fc>)
   8a298:	6882      	ldr	r2, [r0, #8]
   8a29a:	6853      	ldr	r3, [r2, #4]
   8a29c:	f023 0103 	bic.w	r1, r3, #3
   8a2a0:	42a1      	cmp	r1, r4
   8a2a2:	ebc4 0001 	rsb	r0, r4, r1
   8a2a6:	d301      	bcc.n	8a2ac <_malloc_r+0x3d0>
   8a2a8:	280f      	cmp	r0, #15
   8a2aa:	dc04      	bgt.n	8a2b6 <_malloc_r+0x3da>
   8a2ac:	4630      	mov	r0, r6
   8a2ae:	f000 f840 	bl	8a332 <__malloc_unlock>
   8a2b2:	2500      	movs	r5, #0
   8a2b4:	e00d      	b.n	8a2d2 <_malloc_r+0x3f6>
   8a2b6:	4a08      	ldr	r2, [pc, #32]	; (8a2d8 <_malloc_r+0x3fc>)
   8a2b8:	f044 0301 	orr.w	r3, r4, #1
   8a2bc:	6895      	ldr	r5, [r2, #8]
   8a2be:	f040 0101 	orr.w	r1, r0, #1
   8a2c2:	192c      	adds	r4, r5, r4
   8a2c4:	606b      	str	r3, [r5, #4]
   8a2c6:	6094      	str	r4, [r2, #8]
   8a2c8:	6061      	str	r1, [r4, #4]
   8a2ca:	4630      	mov	r0, r6
   8a2cc:	f000 f831 	bl	8a332 <__malloc_unlock>
   8a2d0:	3508      	adds	r5, #8
   8a2d2:	4628      	mov	r0, r5
   8a2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8a2d8:	20070670 	.word	0x20070670
   8a2dc:	20071480 	.word	0x20071480

0008a2e0 <memchr>:
   8a2e0:	b510      	push	{r4, lr}
   8a2e2:	b2c9      	uxtb	r1, r1
   8a2e4:	4603      	mov	r3, r0
   8a2e6:	1882      	adds	r2, r0, r2
   8a2e8:	4293      	cmp	r3, r2
   8a2ea:	4618      	mov	r0, r3
   8a2ec:	d004      	beq.n	8a2f8 <memchr+0x18>
   8a2ee:	7804      	ldrb	r4, [r0, #0]
   8a2f0:	3301      	adds	r3, #1
   8a2f2:	428c      	cmp	r4, r1
   8a2f4:	d1f8      	bne.n	8a2e8 <memchr+0x8>
   8a2f6:	e000      	b.n	8a2fa <memchr+0x1a>
   8a2f8:	2000      	movs	r0, #0
   8a2fa:	bd10      	pop	{r4, pc}

0008a2fc <memmove>:
   8a2fc:	4281      	cmp	r1, r0
   8a2fe:	b570      	push	{r4, r5, r6, lr}
   8a300:	d20e      	bcs.n	8a320 <memmove+0x24>
   8a302:	188c      	adds	r4, r1, r2
   8a304:	42a0      	cmp	r0, r4
   8a306:	d20b      	bcs.n	8a320 <memmove+0x24>
   8a308:	1885      	adds	r5, r0, r2
   8a30a:	4613      	mov	r3, r2
   8a30c:	f113 33ff 	adds.w	r3, r3, #4294967295
   8a310:	d305      	bcc.n	8a31e <memmove+0x22>
   8a312:	4251      	negs	r1, r2
   8a314:	1866      	adds	r6, r4, r1
   8a316:	5cf6      	ldrb	r6, [r6, r3]
   8a318:	1869      	adds	r1, r5, r1
   8a31a:	54ce      	strb	r6, [r1, r3]
   8a31c:	e7f6      	b.n	8a30c <memmove+0x10>
   8a31e:	bd70      	pop	{r4, r5, r6, pc}
   8a320:	2300      	movs	r3, #0
   8a322:	4293      	cmp	r3, r2
   8a324:	d003      	beq.n	8a32e <memmove+0x32>
   8a326:	5ccc      	ldrb	r4, [r1, r3]
   8a328:	54c4      	strb	r4, [r0, r3]
   8a32a:	3301      	adds	r3, #1
   8a32c:	e7f9      	b.n	8a322 <memmove+0x26>
   8a32e:	bd70      	pop	{r4, r5, r6, pc}

0008a330 <__malloc_lock>:
   8a330:	4770      	bx	lr

0008a332 <__malloc_unlock>:
   8a332:	4770      	bx	lr

0008a334 <_realloc_r>:
   8a334:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a338:	4681      	mov	r9, r0
   8a33a:	4616      	mov	r6, r2
   8a33c:	460c      	mov	r4, r1
   8a33e:	b921      	cbnz	r1, 8a34a <_realloc_r+0x16>
   8a340:	4611      	mov	r1, r2
   8a342:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a346:	f7ff bdc9 	b.w	89edc <_malloc_r>
   8a34a:	f7ff fff1 	bl	8a330 <__malloc_lock>
   8a34e:	f106 070b 	add.w	r7, r6, #11
   8a352:	f854 5c04 	ldr.w	r5, [r4, #-4]
   8a356:	2f16      	cmp	r7, #22
   8a358:	f1a4 0b08 	sub.w	fp, r4, #8
   8a35c:	f025 0803 	bic.w	r8, r5, #3
   8a360:	d903      	bls.n	8a36a <_realloc_r+0x36>
   8a362:	f037 0707 	bics.w	r7, r7, #7
   8a366:	d501      	bpl.n	8a36c <_realloc_r+0x38>
   8a368:	e002      	b.n	8a370 <_realloc_r+0x3c>
   8a36a:	2710      	movs	r7, #16
   8a36c:	42b7      	cmp	r7, r6
   8a36e:	d204      	bcs.n	8a37a <_realloc_r+0x46>
   8a370:	200c      	movs	r0, #12
   8a372:	f8c9 0000 	str.w	r0, [r9]
   8a376:	2600      	movs	r6, #0
   8a378:	e145      	b.n	8a606 <_realloc_r+0x2d2>
   8a37a:	45b8      	cmp	r8, r7
   8a37c:	f280 811a 	bge.w	8a5b4 <_realloc_r+0x280>
   8a380:	4aa2      	ldr	r2, [pc, #648]	; (8a60c <_realloc_r+0x2d8>)
   8a382:	eb0b 0308 	add.w	r3, fp, r8
   8a386:	6891      	ldr	r1, [r2, #8]
   8a388:	428b      	cmp	r3, r1
   8a38a:	d006      	beq.n	8a39a <_realloc_r+0x66>
   8a38c:	6858      	ldr	r0, [r3, #4]
   8a38e:	f020 0201 	bic.w	r2, r0, #1
   8a392:	1898      	adds	r0, r3, r2
   8a394:	6842      	ldr	r2, [r0, #4]
   8a396:	07d0      	lsls	r0, r2, #31
   8a398:	d426      	bmi.n	8a3e8 <_realloc_r+0xb4>
   8a39a:	685a      	ldr	r2, [r3, #4]
   8a39c:	428b      	cmp	r3, r1
   8a39e:	f022 0003 	bic.w	r0, r2, #3
   8a3a2:	eb00 0a08 	add.w	sl, r0, r8
   8a3a6:	d118      	bne.n	8a3da <_realloc_r+0xa6>
   8a3a8:	f107 0210 	add.w	r2, r7, #16
   8a3ac:	4592      	cmp	sl, r2
   8a3ae:	db1d      	blt.n	8a3ec <_realloc_r+0xb8>
   8a3b0:	ebc7 0a0a 	rsb	sl, r7, sl
   8a3b4:	eb0b 0507 	add.w	r5, fp, r7
   8a3b8:	f04a 0101 	orr.w	r1, sl, #1
   8a3bc:	6069      	str	r1, [r5, #4]
   8a3be:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8a3c2:	4e92      	ldr	r6, [pc, #584]	; (8a60c <_realloc_r+0x2d8>)
   8a3c4:	f002 0301 	and.w	r3, r2, #1
   8a3c8:	431f      	orrs	r7, r3
   8a3ca:	60b5      	str	r5, [r6, #8]
   8a3cc:	f844 7c04 	str.w	r7, [r4, #-4]
   8a3d0:	4648      	mov	r0, r9
   8a3d2:	f7ff ffae 	bl	8a332 <__malloc_unlock>
   8a3d6:	4626      	mov	r6, r4
   8a3d8:	e115      	b.n	8a606 <_realloc_r+0x2d2>
   8a3da:	45ba      	cmp	sl, r7
   8a3dc:	db06      	blt.n	8a3ec <_realloc_r+0xb8>
   8a3de:	68dd      	ldr	r5, [r3, #12]
   8a3e0:	689e      	ldr	r6, [r3, #8]
   8a3e2:	60f5      	str	r5, [r6, #12]
   8a3e4:	60ae      	str	r6, [r5, #8]
   8a3e6:	e0e6      	b.n	8a5b6 <_realloc_r+0x282>
   8a3e8:	2000      	movs	r0, #0
   8a3ea:	4603      	mov	r3, r0
   8a3ec:	07ea      	lsls	r2, r5, #31
   8a3ee:	f100 8091 	bmi.w	8a514 <_realloc_r+0x1e0>
   8a3f2:	f854 5c08 	ldr.w	r5, [r4, #-8]
   8a3f6:	ebc5 050b 	rsb	r5, r5, fp
   8a3fa:	686a      	ldr	r2, [r5, #4]
   8a3fc:	f022 0203 	bic.w	r2, r2, #3
   8a400:	2b00      	cmp	r3, #0
   8a402:	d051      	beq.n	8a4a8 <_realloc_r+0x174>
   8a404:	eb02 0a08 	add.w	sl, r2, r8
   8a408:	428b      	cmp	r3, r1
   8a40a:	4482      	add	sl, r0
   8a40c:	d145      	bne.n	8a49a <_realloc_r+0x166>
   8a40e:	f107 0310 	add.w	r3, r7, #16
   8a412:	459a      	cmp	sl, r3
   8a414:	db48      	blt.n	8a4a8 <_realloc_r+0x174>
   8a416:	462e      	mov	r6, r5
   8a418:	68e9      	ldr	r1, [r5, #12]
   8a41a:	f856 3f08 	ldr.w	r3, [r6, #8]!
   8a41e:	f1a8 0204 	sub.w	r2, r8, #4
   8a422:	2a24      	cmp	r2, #36	; 0x24
   8a424:	60d9      	str	r1, [r3, #12]
   8a426:	608b      	str	r3, [r1, #8]
   8a428:	d825      	bhi.n	8a476 <_realloc_r+0x142>
   8a42a:	2a13      	cmp	r2, #19
   8a42c:	d91b      	bls.n	8a466 <_realloc_r+0x132>
   8a42e:	6821      	ldr	r1, [r4, #0]
   8a430:	2a1b      	cmp	r2, #27
   8a432:	60a9      	str	r1, [r5, #8]
   8a434:	6863      	ldr	r3, [r4, #4]
   8a436:	60eb      	str	r3, [r5, #12]
   8a438:	d803      	bhi.n	8a442 <_realloc_r+0x10e>
   8a43a:	f105 0010 	add.w	r0, r5, #16
   8a43e:	3408      	adds	r4, #8
   8a440:	e012      	b.n	8a468 <_realloc_r+0x134>
   8a442:	68a0      	ldr	r0, [r4, #8]
   8a444:	2a24      	cmp	r2, #36	; 0x24
   8a446:	6128      	str	r0, [r5, #16]
   8a448:	68e1      	ldr	r1, [r4, #12]
   8a44a:	6169      	str	r1, [r5, #20]
   8a44c:	d003      	beq.n	8a456 <_realloc_r+0x122>
   8a44e:	f105 0018 	add.w	r0, r5, #24
   8a452:	3410      	adds	r4, #16
   8a454:	e008      	b.n	8a468 <_realloc_r+0x134>
   8a456:	6922      	ldr	r2, [r4, #16]
   8a458:	f105 0020 	add.w	r0, r5, #32
   8a45c:	61aa      	str	r2, [r5, #24]
   8a45e:	6963      	ldr	r3, [r4, #20]
   8a460:	3418      	adds	r4, #24
   8a462:	61eb      	str	r3, [r5, #28]
   8a464:	e000      	b.n	8a468 <_realloc_r+0x134>
   8a466:	4630      	mov	r0, r6
   8a468:	6821      	ldr	r1, [r4, #0]
   8a46a:	6001      	str	r1, [r0, #0]
   8a46c:	6862      	ldr	r2, [r4, #4]
   8a46e:	6042      	str	r2, [r0, #4]
   8a470:	68a3      	ldr	r3, [r4, #8]
   8a472:	6083      	str	r3, [r0, #8]
   8a474:	e003      	b.n	8a47e <_realloc_r+0x14a>
   8a476:	4630      	mov	r0, r6
   8a478:	4621      	mov	r1, r4
   8a47a:	f7ff ff3f 	bl	8a2fc <memmove>
   8a47e:	ebc7 0a0a 	rsb	sl, r7, sl
   8a482:	19e8      	adds	r0, r5, r7
   8a484:	f04a 0201 	orr.w	r2, sl, #1
   8a488:	6042      	str	r2, [r0, #4]
   8a48a:	686b      	ldr	r3, [r5, #4]
   8a48c:	495f      	ldr	r1, [pc, #380]	; (8a60c <_realloc_r+0x2d8>)
   8a48e:	6088      	str	r0, [r1, #8]
   8a490:	f003 0001 	and.w	r0, r3, #1
   8a494:	4307      	orrs	r7, r0
   8a496:	606f      	str	r7, [r5, #4]
   8a498:	e088      	b.n	8a5ac <_realloc_r+0x278>
   8a49a:	45ba      	cmp	sl, r7
   8a49c:	db04      	blt.n	8a4a8 <_realloc_r+0x174>
   8a49e:	68d9      	ldr	r1, [r3, #12]
   8a4a0:	6898      	ldr	r0, [r3, #8]
   8a4a2:	60c1      	str	r1, [r0, #12]
   8a4a4:	6088      	str	r0, [r1, #8]
   8a4a6:	e003      	b.n	8a4b0 <_realloc_r+0x17c>
   8a4a8:	eb02 0a08 	add.w	sl, r2, r8
   8a4ac:	45ba      	cmp	sl, r7
   8a4ae:	db31      	blt.n	8a514 <_realloc_r+0x1e0>
   8a4b0:	4628      	mov	r0, r5
   8a4b2:	68eb      	ldr	r3, [r5, #12]
   8a4b4:	f850 1f08 	ldr.w	r1, [r0, #8]!
   8a4b8:	f1a8 0204 	sub.w	r2, r8, #4
   8a4bc:	2a24      	cmp	r2, #36	; 0x24
   8a4be:	60cb      	str	r3, [r1, #12]
   8a4c0:	6099      	str	r1, [r3, #8]
   8a4c2:	d823      	bhi.n	8a50c <_realloc_r+0x1d8>
   8a4c4:	2a13      	cmp	r2, #19
   8a4c6:	d91a      	bls.n	8a4fe <_realloc_r+0x1ca>
   8a4c8:	6820      	ldr	r0, [r4, #0]
   8a4ca:	2a1b      	cmp	r2, #27
   8a4cc:	60a8      	str	r0, [r5, #8]
   8a4ce:	6866      	ldr	r6, [r4, #4]
   8a4d0:	60ee      	str	r6, [r5, #12]
   8a4d2:	d803      	bhi.n	8a4dc <_realloc_r+0x1a8>
   8a4d4:	f105 0010 	add.w	r0, r5, #16
   8a4d8:	3408      	adds	r4, #8
   8a4da:	e010      	b.n	8a4fe <_realloc_r+0x1ca>
   8a4dc:	68a3      	ldr	r3, [r4, #8]
   8a4de:	2a24      	cmp	r2, #36	; 0x24
   8a4e0:	612b      	str	r3, [r5, #16]
   8a4e2:	68e1      	ldr	r1, [r4, #12]
   8a4e4:	6169      	str	r1, [r5, #20]
   8a4e6:	d003      	beq.n	8a4f0 <_realloc_r+0x1bc>
   8a4e8:	f105 0018 	add.w	r0, r5, #24
   8a4ec:	3410      	adds	r4, #16
   8a4ee:	e006      	b.n	8a4fe <_realloc_r+0x1ca>
   8a4f0:	6922      	ldr	r2, [r4, #16]
   8a4f2:	61aa      	str	r2, [r5, #24]
   8a4f4:	6960      	ldr	r0, [r4, #20]
   8a4f6:	3418      	adds	r4, #24
   8a4f8:	61e8      	str	r0, [r5, #28]
   8a4fa:	f105 0020 	add.w	r0, r5, #32
   8a4fe:	6826      	ldr	r6, [r4, #0]
   8a500:	6006      	str	r6, [r0, #0]
   8a502:	6863      	ldr	r3, [r4, #4]
   8a504:	6043      	str	r3, [r0, #4]
   8a506:	68a1      	ldr	r1, [r4, #8]
   8a508:	6081      	str	r1, [r0, #8]
   8a50a:	e055      	b.n	8a5b8 <_realloc_r+0x284>
   8a50c:	4621      	mov	r1, r4
   8a50e:	f7ff fef5 	bl	8a2fc <memmove>
   8a512:	e051      	b.n	8a5b8 <_realloc_r+0x284>
   8a514:	4631      	mov	r1, r6
   8a516:	4648      	mov	r0, r9
   8a518:	f7ff fce0 	bl	89edc <_malloc_r>
   8a51c:	4606      	mov	r6, r0
   8a51e:	2800      	cmp	r0, #0
   8a520:	d044      	beq.n	8a5ac <_realloc_r+0x278>
   8a522:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8a526:	f1a0 0208 	sub.w	r2, r0, #8
   8a52a:	f021 0301 	bic.w	r3, r1, #1
   8a52e:	eb0b 0103 	add.w	r1, fp, r3
   8a532:	428a      	cmp	r2, r1
   8a534:	d106      	bne.n	8a544 <_realloc_r+0x210>
   8a536:	f850 6c04 	ldr.w	r6, [r0, #-4]
   8a53a:	f026 0503 	bic.w	r5, r6, #3
   8a53e:	eb05 0a08 	add.w	sl, r5, r8
   8a542:	e038      	b.n	8a5b6 <_realloc_r+0x282>
   8a544:	f1a8 0204 	sub.w	r2, r8, #4
   8a548:	2a24      	cmp	r2, #36	; 0x24
   8a54a:	d828      	bhi.n	8a59e <_realloc_r+0x26a>
   8a54c:	2a13      	cmp	r2, #19
   8a54e:	d91e      	bls.n	8a58e <_realloc_r+0x25a>
   8a550:	6823      	ldr	r3, [r4, #0]
   8a552:	2a1b      	cmp	r2, #27
   8a554:	6003      	str	r3, [r0, #0]
   8a556:	6861      	ldr	r1, [r4, #4]
   8a558:	6041      	str	r1, [r0, #4]
   8a55a:	d804      	bhi.n	8a566 <_realloc_r+0x232>
   8a55c:	f100 0008 	add.w	r0, r0, #8
   8a560:	f104 0208 	add.w	r2, r4, #8
   8a564:	e014      	b.n	8a590 <_realloc_r+0x25c>
   8a566:	68a0      	ldr	r0, [r4, #8]
   8a568:	2a24      	cmp	r2, #36	; 0x24
   8a56a:	60b0      	str	r0, [r6, #8]
   8a56c:	68e3      	ldr	r3, [r4, #12]
   8a56e:	60f3      	str	r3, [r6, #12]
   8a570:	d004      	beq.n	8a57c <_realloc_r+0x248>
   8a572:	f106 0010 	add.w	r0, r6, #16
   8a576:	f104 0210 	add.w	r2, r4, #16
   8a57a:	e009      	b.n	8a590 <_realloc_r+0x25c>
   8a57c:	6922      	ldr	r2, [r4, #16]
   8a57e:	f106 0018 	add.w	r0, r6, #24
   8a582:	6132      	str	r2, [r6, #16]
   8a584:	6961      	ldr	r1, [r4, #20]
   8a586:	f104 0218 	add.w	r2, r4, #24
   8a58a:	6171      	str	r1, [r6, #20]
   8a58c:	e000      	b.n	8a590 <_realloc_r+0x25c>
   8a58e:	4622      	mov	r2, r4
   8a590:	6813      	ldr	r3, [r2, #0]
   8a592:	6003      	str	r3, [r0, #0]
   8a594:	6851      	ldr	r1, [r2, #4]
   8a596:	6041      	str	r1, [r0, #4]
   8a598:	6892      	ldr	r2, [r2, #8]
   8a59a:	6082      	str	r2, [r0, #8]
   8a59c:	e002      	b.n	8a5a4 <_realloc_r+0x270>
   8a59e:	4621      	mov	r1, r4
   8a5a0:	f7ff feac 	bl	8a2fc <memmove>
   8a5a4:	4648      	mov	r0, r9
   8a5a6:	4621      	mov	r1, r4
   8a5a8:	f7ff fbe2 	bl	89d70 <_free_r>
   8a5ac:	4648      	mov	r0, r9
   8a5ae:	f7ff fec0 	bl	8a332 <__malloc_unlock>
   8a5b2:	e028      	b.n	8a606 <_realloc_r+0x2d2>
   8a5b4:	46c2      	mov	sl, r8
   8a5b6:	465d      	mov	r5, fp
   8a5b8:	ebc7 000a 	rsb	r0, r7, sl
   8a5bc:	280f      	cmp	r0, #15
   8a5be:	686a      	ldr	r2, [r5, #4]
   8a5c0:	d911      	bls.n	8a5e6 <_realloc_r+0x2b2>
   8a5c2:	f002 0601 	and.w	r6, r2, #1
   8a5c6:	19e9      	adds	r1, r5, r7
   8a5c8:	f040 0301 	orr.w	r3, r0, #1
   8a5cc:	4337      	orrs	r7, r6
   8a5ce:	606f      	str	r7, [r5, #4]
   8a5d0:	1808      	adds	r0, r1, r0
   8a5d2:	604b      	str	r3, [r1, #4]
   8a5d4:	6842      	ldr	r2, [r0, #4]
   8a5d6:	3108      	adds	r1, #8
   8a5d8:	f042 0601 	orr.w	r6, r2, #1
   8a5dc:	6046      	str	r6, [r0, #4]
   8a5de:	4648      	mov	r0, r9
   8a5e0:	f7ff fbc6 	bl	89d70 <_free_r>
   8a5e4:	e00a      	b.n	8a5fc <_realloc_r+0x2c8>
   8a5e6:	f002 0601 	and.w	r6, r2, #1
   8a5ea:	ea4a 0306 	orr.w	r3, sl, r6
   8a5ee:	606b      	str	r3, [r5, #4]
   8a5f0:	eb05 010a 	add.w	r1, r5, sl
   8a5f4:	6848      	ldr	r0, [r1, #4]
   8a5f6:	f040 0201 	orr.w	r2, r0, #1
   8a5fa:	604a      	str	r2, [r1, #4]
   8a5fc:	4648      	mov	r0, r9
   8a5fe:	f7ff fe98 	bl	8a332 <__malloc_unlock>
   8a602:	f105 0608 	add.w	r6, r5, #8
   8a606:	4630      	mov	r0, r6
   8a608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a60c:	20070670 	.word	0x20070670

0008a610 <_sbrk_r>:
   8a610:	b538      	push	{r3, r4, r5, lr}
   8a612:	4c06      	ldr	r4, [pc, #24]	; (8a62c <_sbrk_r+0x1c>)
   8a614:	2300      	movs	r3, #0
   8a616:	4605      	mov	r5, r0
   8a618:	4608      	mov	r0, r1
   8a61a:	6023      	str	r3, [r4, #0]
   8a61c:	f7fe fdce 	bl	891bc <_sbrk>
   8a620:	1c43      	adds	r3, r0, #1
   8a622:	d102      	bne.n	8a62a <_sbrk_r+0x1a>
   8a624:	6821      	ldr	r1, [r4, #0]
   8a626:	b101      	cbz	r1, 8a62a <_sbrk_r+0x1a>
   8a628:	6029      	str	r1, [r5, #0]
   8a62a:	bd38      	pop	{r3, r4, r5, pc}
   8a62c:	200723a8 	.word	0x200723a8

0008a630 <__ssprint_r>:
   8a630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a634:	4607      	mov	r7, r0
   8a636:	6890      	ldr	r0, [r2, #8]
   8a638:	460c      	mov	r4, r1
   8a63a:	4615      	mov	r5, r2
   8a63c:	f8d2 8000 	ldr.w	r8, [r2]
   8a640:	b908      	cbnz	r0, 8a646 <__ssprint_r+0x16>
   8a642:	6050      	str	r0, [r2, #4]
   8a644:	e06f      	b.n	8a726 <__ssprint_r+0xf6>
   8a646:	f04f 0b00 	mov.w	fp, #0
   8a64a:	465e      	mov	r6, fp
   8a64c:	b936      	cbnz	r6, 8a65c <__ssprint_r+0x2c>
   8a64e:	f8d8 b000 	ldr.w	fp, [r8]
   8a652:	f8d8 6004 	ldr.w	r6, [r8, #4]
   8a656:	f108 0808 	add.w	r8, r8, #8
   8a65a:	e7f7      	b.n	8a64c <__ssprint_r+0x1c>
   8a65c:	68a3      	ldr	r3, [r4, #8]
   8a65e:	429e      	cmp	r6, r3
   8a660:	d34c      	bcc.n	8a6fc <__ssprint_r+0xcc>
   8a662:	89a2      	ldrh	r2, [r4, #12]
   8a664:	f412 6f90 	tst.w	r2, #1152	; 0x480
   8a668:	d046      	beq.n	8a6f8 <__ssprint_r+0xc8>
   8a66a:	6823      	ldr	r3, [r4, #0]
   8a66c:	6960      	ldr	r0, [r4, #20]
   8a66e:	6921      	ldr	r1, [r4, #16]
   8a670:	f04f 0a03 	mov.w	sl, #3
   8a674:	ebc1 0903 	rsb	r9, r1, r3
   8a678:	fb0a f300 	mul.w	r3, sl, r0
   8a67c:	2002      	movs	r0, #2
   8a67e:	fb93 faf0 	sdiv	sl, r3, r0
   8a682:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   8a686:	f109 0301 	add.w	r3, r9, #1
   8a68a:	1998      	adds	r0, r3, r6
   8a68c:	b213      	sxth	r3, r2
   8a68e:	4582      	cmp	sl, r0
   8a690:	bf38      	it	cc
   8a692:	4682      	movcc	sl, r0
   8a694:	4638      	mov	r0, r7
   8a696:	b183      	cbz	r3, 8a6ba <__ssprint_r+0x8a>
   8a698:	4651      	mov	r1, sl
   8a69a:	f7ff fc1f 	bl	89edc <_malloc_r>
   8a69e:	b1a8      	cbz	r0, 8a6cc <__ssprint_r+0x9c>
   8a6a0:	6921      	ldr	r1, [r4, #16]
   8a6a2:	464a      	mov	r2, r9
   8a6a4:	9001      	str	r0, [sp, #4]
   8a6a6:	f7fe feab 	bl	89400 <memcpy>
   8a6aa:	89a0      	ldrh	r0, [r4, #12]
   8a6ac:	f420 6290 	bic.w	r2, r0, #1152	; 0x480
   8a6b0:	f042 0180 	orr.w	r1, r2, #128	; 0x80
   8a6b4:	81a1      	strh	r1, [r4, #12]
   8a6b6:	9901      	ldr	r1, [sp, #4]
   8a6b8:	e014      	b.n	8a6e4 <__ssprint_r+0xb4>
   8a6ba:	4652      	mov	r2, sl
   8a6bc:	f7ff fe3a 	bl	8a334 <_realloc_r>
   8a6c0:	4601      	mov	r1, r0
   8a6c2:	b978      	cbnz	r0, 8a6e4 <__ssprint_r+0xb4>
   8a6c4:	4638      	mov	r0, r7
   8a6c6:	6921      	ldr	r1, [r4, #16]
   8a6c8:	f7ff fb52 	bl	89d70 <_free_r>
   8a6cc:	89a3      	ldrh	r3, [r4, #12]
   8a6ce:	200c      	movs	r0, #12
   8a6d0:	2100      	movs	r1, #0
   8a6d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   8a6d6:	6038      	str	r0, [r7, #0]
   8a6d8:	81a2      	strh	r2, [r4, #12]
   8a6da:	f04f 30ff 	mov.w	r0, #4294967295
   8a6de:	60a9      	str	r1, [r5, #8]
   8a6e0:	6069      	str	r1, [r5, #4]
   8a6e2:	e020      	b.n	8a726 <__ssprint_r+0xf6>
   8a6e4:	eb01 0309 	add.w	r3, r1, r9
   8a6e8:	ebc9 000a 	rsb	r0, r9, sl
   8a6ec:	6023      	str	r3, [r4, #0]
   8a6ee:	6121      	str	r1, [r4, #16]
   8a6f0:	f8c4 a014 	str.w	sl, [r4, #20]
   8a6f4:	4633      	mov	r3, r6
   8a6f6:	60a0      	str	r0, [r4, #8]
   8a6f8:	429e      	cmp	r6, r3
   8a6fa:	d200      	bcs.n	8a6fe <__ssprint_r+0xce>
   8a6fc:	4633      	mov	r3, r6
   8a6fe:	461a      	mov	r2, r3
   8a700:	4659      	mov	r1, fp
   8a702:	6820      	ldr	r0, [r4, #0]
   8a704:	9301      	str	r3, [sp, #4]
   8a706:	f7ff fdf9 	bl	8a2fc <memmove>
   8a70a:	68a2      	ldr	r2, [r4, #8]
   8a70c:	9901      	ldr	r1, [sp, #4]
   8a70e:	6823      	ldr	r3, [r4, #0]
   8a710:	1a50      	subs	r0, r2, r1
   8a712:	185a      	adds	r2, r3, r1
   8a714:	68a9      	ldr	r1, [r5, #8]
   8a716:	60a0      	str	r0, [r4, #8]
   8a718:	1b8e      	subs	r6, r1, r6
   8a71a:	6022      	str	r2, [r4, #0]
   8a71c:	60ae      	str	r6, [r5, #8]
   8a71e:	2e00      	cmp	r6, #0
   8a720:	d195      	bne.n	8a64e <__ssprint_r+0x1e>
   8a722:	606e      	str	r6, [r5, #4]
   8a724:	4630      	mov	r0, r6
   8a726:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008a72a <_svfiprintf_r>:
   8a72a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a72e:	461e      	mov	r6, r3
   8a730:	898b      	ldrh	r3, [r1, #12]
   8a732:	4689      	mov	r9, r1
   8a734:	f003 0180 	and.w	r1, r3, #128	; 0x80
   8a738:	4614      	mov	r4, r2
   8a73a:	b20a      	sxth	r2, r1
   8a73c:	b0a9      	sub	sp, #164	; 0xa4
   8a73e:	4683      	mov	fp, r0
   8a740:	b19a      	cbz	r2, 8a76a <_svfiprintf_r+0x40>
   8a742:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8a746:	b983      	cbnz	r3, 8a76a <_svfiprintf_r+0x40>
   8a748:	2140      	movs	r1, #64	; 0x40
   8a74a:	f7ff fbc7 	bl	89edc <_malloc_r>
   8a74e:	f8c9 0000 	str.w	r0, [r9]
   8a752:	f8c9 0010 	str.w	r0, [r9, #16]
   8a756:	b928      	cbnz	r0, 8a764 <_svfiprintf_r+0x3a>
   8a758:	220c      	movs	r2, #12
   8a75a:	f8cb 2000 	str.w	r2, [fp]
   8a75e:	f04f 30ff 	mov.w	r0, #4294967295
   8a762:	e3db      	b.n	8af1c <_svfiprintf_r+0x7f2>
   8a764:	2040      	movs	r0, #64	; 0x40
   8a766:	f8c9 0014 	str.w	r0, [r9, #20]
   8a76a:	2100      	movs	r1, #0
   8a76c:	ad18      	add	r5, sp, #96	; 0x60
   8a76e:	950b      	str	r5, [sp, #44]	; 0x2c
   8a770:	910d      	str	r1, [sp, #52]	; 0x34
   8a772:	910c      	str	r1, [sp, #48]	; 0x30
   8a774:	9401      	str	r4, [sp, #4]
   8a776:	9105      	str	r1, [sp, #20]
   8a778:	9104      	str	r1, [sp, #16]
   8a77a:	46a8      	mov	r8, r5
   8a77c:	9b01      	ldr	r3, [sp, #4]
   8a77e:	461c      	mov	r4, r3
   8a780:	f813 2b01 	ldrb.w	r2, [r3], #1
   8a784:	b91a      	cbnz	r2, 8a78e <_svfiprintf_r+0x64>
   8a786:	9801      	ldr	r0, [sp, #4]
   8a788:	1a25      	subs	r5, r4, r0
   8a78a:	d103      	bne.n	8a794 <_svfiprintf_r+0x6a>
   8a78c:	e01d      	b.n	8a7ca <_svfiprintf_r+0xa0>
   8a78e:	2a25      	cmp	r2, #37	; 0x25
   8a790:	d1f5      	bne.n	8a77e <_svfiprintf_r+0x54>
   8a792:	e7f8      	b.n	8a786 <_svfiprintf_r+0x5c>
   8a794:	9a01      	ldr	r2, [sp, #4]
   8a796:	990d      	ldr	r1, [sp, #52]	; 0x34
   8a798:	e888 0024 	stmia.w	r8, {r2, r5}
   8a79c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8a79e:	194b      	adds	r3, r1, r5
   8a7a0:	1c50      	adds	r0, r2, #1
   8a7a2:	2807      	cmp	r0, #7
   8a7a4:	930d      	str	r3, [sp, #52]	; 0x34
   8a7a6:	900c      	str	r0, [sp, #48]	; 0x30
   8a7a8:	dc02      	bgt.n	8a7b0 <_svfiprintf_r+0x86>
   8a7aa:	f108 0808 	add.w	r8, r8, #8
   8a7ae:	e009      	b.n	8a7c4 <_svfiprintf_r+0x9a>
   8a7b0:	4658      	mov	r0, fp
   8a7b2:	4649      	mov	r1, r9
   8a7b4:	aa0b      	add	r2, sp, #44	; 0x2c
   8a7b6:	f7ff ff3b 	bl	8a630 <__ssprint_r>
   8a7ba:	2800      	cmp	r0, #0
   8a7bc:	f040 83a3 	bne.w	8af06 <_svfiprintf_r+0x7dc>
   8a7c0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8a7c4:	9904      	ldr	r1, [sp, #16]
   8a7c6:	194b      	adds	r3, r1, r5
   8a7c8:	9304      	str	r3, [sp, #16]
   8a7ca:	7822      	ldrb	r2, [r4, #0]
   8a7cc:	2a00      	cmp	r2, #0
   8a7ce:	f000 8393 	beq.w	8aef8 <_svfiprintf_r+0x7ce>
   8a7d2:	2200      	movs	r2, #0
   8a7d4:	3401      	adds	r4, #1
   8a7d6:	9401      	str	r4, [sp, #4]
   8a7d8:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8a7dc:	f04f 3cff 	mov.w	ip, #4294967295
   8a7e0:	9203      	str	r2, [sp, #12]
   8a7e2:	4617      	mov	r7, r2
   8a7e4:	9801      	ldr	r0, [sp, #4]
   8a7e6:	f810 3b01 	ldrb.w	r3, [r0], #1
   8a7ea:	9001      	str	r0, [sp, #4]
   8a7ec:	2b63      	cmp	r3, #99	; 0x63
   8a7ee:	f000 80b3 	beq.w	8a958 <_svfiprintf_r+0x22e>
   8a7f2:	dc33      	bgt.n	8a85c <_svfiprintf_r+0x132>
   8a7f4:	2b39      	cmp	r3, #57	; 0x39
   8a7f6:	dc1a      	bgt.n	8a82e <_svfiprintf_r+0x104>
   8a7f8:	2b31      	cmp	r3, #49	; 0x31
   8a7fa:	f280 8091 	bge.w	8a920 <_svfiprintf_r+0x1f6>
   8a7fe:	2b2b      	cmp	r3, #43	; 0x2b
   8a800:	d101      	bne.n	8a806 <_svfiprintf_r+0xdc>
   8a802:	461a      	mov	r2, r3
   8a804:	e7ee      	b.n	8a7e4 <_svfiprintf_r+0xba>
   8a806:	dc0a      	bgt.n	8a81e <_svfiprintf_r+0xf4>
   8a808:	2b23      	cmp	r3, #35	; 0x23
   8a80a:	d055      	beq.n	8a8b8 <_svfiprintf_r+0x18e>
   8a80c:	2b2a      	cmp	r3, #42	; 0x2a
   8a80e:	d056      	beq.n	8a8be <_svfiprintf_r+0x194>
   8a810:	2b20      	cmp	r3, #32
   8a812:	f040 81f6 	bne.w	8ac02 <_svfiprintf_r+0x4d8>
   8a816:	2a00      	cmp	r2, #0
   8a818:	bf08      	it	eq
   8a81a:	2220      	moveq	r2, #32
   8a81c:	e7e2      	b.n	8a7e4 <_svfiprintf_r+0xba>
   8a81e:	2b2e      	cmp	r3, #46	; 0x2e
   8a820:	d058      	beq.n	8a8d4 <_svfiprintf_r+0x1aa>
   8a822:	2b30      	cmp	r3, #48	; 0x30
   8a824:	d079      	beq.n	8a91a <_svfiprintf_r+0x1f0>
   8a826:	2b2d      	cmp	r3, #45	; 0x2d
   8a828:	f040 81eb 	bne.w	8ac02 <_svfiprintf_r+0x4d8>
   8a82c:	e04f      	b.n	8a8ce <_svfiprintf_r+0x1a4>
   8a82e:	2b4f      	cmp	r3, #79	; 0x4f
   8a830:	f000 80de 	beq.w	8a9f0 <_svfiprintf_r+0x2c6>
   8a834:	dc07      	bgt.n	8a846 <_svfiprintf_r+0x11c>
   8a836:	2b44      	cmp	r3, #68	; 0x44
   8a838:	f040 81e3 	bne.w	8ac02 <_svfiprintf_r+0x4d8>
   8a83c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8a840:	f047 0710 	orr.w	r7, r7, #16
   8a844:	e090      	b.n	8a968 <_svfiprintf_r+0x23e>
   8a846:	2b55      	cmp	r3, #85	; 0x55
   8a848:	f000 811f 	beq.w	8aa8a <_svfiprintf_r+0x360>
   8a84c:	2b58      	cmp	r3, #88	; 0x58
   8a84e:	f040 81d8 	bne.w	8ac02 <_svfiprintf_r+0x4d8>
   8a852:	4daf      	ldr	r5, [pc, #700]	; (8ab10 <_svfiprintf_r+0x3e6>)
   8a854:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8a858:	9505      	str	r5, [sp, #20]
   8a85a:	e130      	b.n	8aabe <_svfiprintf_r+0x394>
   8a85c:	2b6f      	cmp	r3, #111	; 0x6f
   8a85e:	f000 80c9 	beq.w	8a9f4 <_svfiprintf_r+0x2ca>
   8a862:	dc10      	bgt.n	8a886 <_svfiprintf_r+0x15c>
   8a864:	2b69      	cmp	r3, #105	; 0x69
   8a866:	d024      	beq.n	8a8b2 <_svfiprintf_r+0x188>
   8a868:	dc07      	bgt.n	8a87a <_svfiprintf_r+0x150>
   8a86a:	2b64      	cmp	r3, #100	; 0x64
   8a86c:	d021      	beq.n	8a8b2 <_svfiprintf_r+0x188>
   8a86e:	2b68      	cmp	r3, #104	; 0x68
   8a870:	f040 81c7 	bne.w	8ac02 <_svfiprintf_r+0x4d8>
   8a874:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   8a878:	e7b4      	b.n	8a7e4 <_svfiprintf_r+0xba>
   8a87a:	2b6c      	cmp	r3, #108	; 0x6c
   8a87c:	d05f      	beq.n	8a93e <_svfiprintf_r+0x214>
   8a87e:	2b6e      	cmp	r3, #110	; 0x6e
   8a880:	f040 81bf 	bne.w	8ac02 <_svfiprintf_r+0x4d8>
   8a884:	e096      	b.n	8a9b4 <_svfiprintf_r+0x28a>
   8a886:	2b73      	cmp	r3, #115	; 0x73
   8a888:	f000 80df 	beq.w	8aa4a <_svfiprintf_r+0x320>
   8a88c:	dc06      	bgt.n	8a89c <_svfiprintf_r+0x172>
   8a88e:	2b70      	cmp	r3, #112	; 0x70
   8a890:	f000 80cd 	beq.w	8aa2e <_svfiprintf_r+0x304>
   8a894:	2b71      	cmp	r3, #113	; 0x71
   8a896:	f040 81b4 	bne.w	8ac02 <_svfiprintf_r+0x4d8>
   8a89a:	e05a      	b.n	8a952 <_svfiprintf_r+0x228>
   8a89c:	2b75      	cmp	r3, #117	; 0x75
   8a89e:	f000 80f6 	beq.w	8aa8e <_svfiprintf_r+0x364>
   8a8a2:	2b78      	cmp	r3, #120	; 0x78
   8a8a4:	f040 81ad 	bne.w	8ac02 <_svfiprintf_r+0x4d8>
   8a8a8:	4d9a      	ldr	r5, [pc, #616]	; (8ab14 <_svfiprintf_r+0x3ea>)
   8a8aa:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8a8ae:	9505      	str	r5, [sp, #20]
   8a8b0:	e105      	b.n	8aabe <_svfiprintf_r+0x394>
   8a8b2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8a8b6:	e057      	b.n	8a968 <_svfiprintf_r+0x23e>
   8a8b8:	f047 0701 	orr.w	r7, r7, #1
   8a8bc:	e792      	b.n	8a7e4 <_svfiprintf_r+0xba>
   8a8be:	1d33      	adds	r3, r6, #4
   8a8c0:	6836      	ldr	r6, [r6, #0]
   8a8c2:	2e00      	cmp	r6, #0
   8a8c4:	9603      	str	r6, [sp, #12]
   8a8c6:	da15      	bge.n	8a8f4 <_svfiprintf_r+0x1ca>
   8a8c8:	4270      	negs	r0, r6
   8a8ca:	9003      	str	r0, [sp, #12]
   8a8cc:	461e      	mov	r6, r3
   8a8ce:	f047 0704 	orr.w	r7, r7, #4
   8a8d2:	e787      	b.n	8a7e4 <_svfiprintf_r+0xba>
   8a8d4:	9901      	ldr	r1, [sp, #4]
   8a8d6:	f811 3b01 	ldrb.w	r3, [r1], #1
   8a8da:	2b2a      	cmp	r3, #42	; 0x2a
   8a8dc:	9101      	str	r1, [sp, #4]
   8a8de:	d10b      	bne.n	8a8f8 <_svfiprintf_r+0x1ce>
   8a8e0:	f8d6 c000 	ldr.w	ip, [r6]
   8a8e4:	1d33      	adds	r3, r6, #4
   8a8e6:	f1bc 0f00 	cmp.w	ip, #0
   8a8ea:	da03      	bge.n	8a8f4 <_svfiprintf_r+0x1ca>
   8a8ec:	461e      	mov	r6, r3
   8a8ee:	f04f 3cff 	mov.w	ip, #4294967295
   8a8f2:	e777      	b.n	8a7e4 <_svfiprintf_r+0xba>
   8a8f4:	461e      	mov	r6, r3
   8a8f6:	e775      	b.n	8a7e4 <_svfiprintf_r+0xba>
   8a8f8:	f04f 0c00 	mov.w	ip, #0
   8a8fc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8a900:	2809      	cmp	r0, #9
   8a902:	d807      	bhi.n	8a914 <_svfiprintf_r+0x1ea>
   8a904:	9901      	ldr	r1, [sp, #4]
   8a906:	230a      	movs	r3, #10
   8a908:	fb03 0c0c 	mla	ip, r3, ip, r0
   8a90c:	f811 3b01 	ldrb.w	r3, [r1], #1
   8a910:	9101      	str	r1, [sp, #4]
   8a912:	e7f3      	b.n	8a8fc <_svfiprintf_r+0x1d2>
   8a914:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   8a918:	e768      	b.n	8a7ec <_svfiprintf_r+0xc2>
   8a91a:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8a91e:	e761      	b.n	8a7e4 <_svfiprintf_r+0xba>
   8a920:	9801      	ldr	r0, [sp, #4]
   8a922:	2100      	movs	r1, #0
   8a924:	3b30      	subs	r3, #48	; 0x30
   8a926:	240a      	movs	r4, #10
   8a928:	fb04 3101 	mla	r1, r4, r1, r3
   8a92c:	f810 3b01 	ldrb.w	r3, [r0], #1
   8a930:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   8a934:	2c09      	cmp	r4, #9
   8a936:	9001      	str	r0, [sp, #4]
   8a938:	d9f4      	bls.n	8a924 <_svfiprintf_r+0x1fa>
   8a93a:	9103      	str	r1, [sp, #12]
   8a93c:	e756      	b.n	8a7ec <_svfiprintf_r+0xc2>
   8a93e:	9901      	ldr	r1, [sp, #4]
   8a940:	780b      	ldrb	r3, [r1, #0]
   8a942:	2b6c      	cmp	r3, #108	; 0x6c
   8a944:	d102      	bne.n	8a94c <_svfiprintf_r+0x222>
   8a946:	1c48      	adds	r0, r1, #1
   8a948:	9001      	str	r0, [sp, #4]
   8a94a:	e002      	b.n	8a952 <_svfiprintf_r+0x228>
   8a94c:	f047 0710 	orr.w	r7, r7, #16
   8a950:	e748      	b.n	8a7e4 <_svfiprintf_r+0xba>
   8a952:	f047 0720 	orr.w	r7, r7, #32
   8a956:	e745      	b.n	8a7e4 <_svfiprintf_r+0xba>
   8a958:	6832      	ldr	r2, [r6, #0]
   8a95a:	2500      	movs	r5, #0
   8a95c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   8a960:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8a964:	3604      	adds	r6, #4
   8a966:	e156      	b.n	8ac16 <_svfiprintf_r+0x4ec>
   8a968:	06ba      	lsls	r2, r7, #26
   8a96a:	d507      	bpl.n	8a97c <_svfiprintf_r+0x252>
   8a96c:	3607      	adds	r6, #7
   8a96e:	f026 0507 	bic.w	r5, r6, #7
   8a972:	f105 0608 	add.w	r6, r5, #8
   8a976:	e9d5 4500 	ldrd	r4, r5, [r5]
   8a97a:	e00f      	b.n	8a99c <_svfiprintf_r+0x272>
   8a97c:	f017 0f10 	tst.w	r7, #16
   8a980:	f106 0104 	add.w	r1, r6, #4
   8a984:	d001      	beq.n	8a98a <_svfiprintf_r+0x260>
   8a986:	6832      	ldr	r2, [r6, #0]
   8a988:	e005      	b.n	8a996 <_svfiprintf_r+0x26c>
   8a98a:	f017 0f40 	tst.w	r7, #64	; 0x40
   8a98e:	6832      	ldr	r2, [r6, #0]
   8a990:	d001      	beq.n	8a996 <_svfiprintf_r+0x26c>
   8a992:	b214      	sxth	r4, r2
   8a994:	e000      	b.n	8a998 <_svfiprintf_r+0x26e>
   8a996:	4614      	mov	r4, r2
   8a998:	17e5      	asrs	r5, r4, #31
   8a99a:	460e      	mov	r6, r1
   8a99c:	2c00      	cmp	r4, #0
   8a99e:	f175 0200 	sbcs.w	r2, r5, #0
   8a9a2:	f280 80b9 	bge.w	8ab18 <_svfiprintf_r+0x3ee>
   8a9a6:	232d      	movs	r3, #45	; 0x2d
   8a9a8:	4264      	negs	r4, r4
   8a9aa:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8a9ae:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   8a9b2:	e0b1      	b.n	8ab18 <_svfiprintf_r+0x3ee>
   8a9b4:	f017 0f20 	tst.w	r7, #32
   8a9b8:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8a9bc:	f106 0204 	add.w	r2, r6, #4
   8a9c0:	d005      	beq.n	8a9ce <_svfiprintf_r+0x2a4>
   8a9c2:	9c04      	ldr	r4, [sp, #16]
   8a9c4:	6835      	ldr	r5, [r6, #0]
   8a9c6:	17e0      	asrs	r0, r4, #31
   8a9c8:	602c      	str	r4, [r5, #0]
   8a9ca:	6068      	str	r0, [r5, #4]
   8a9cc:	e004      	b.n	8a9d8 <_svfiprintf_r+0x2ae>
   8a9ce:	06fb      	lsls	r3, r7, #27
   8a9d0:	d504      	bpl.n	8a9dc <_svfiprintf_r+0x2b2>
   8a9d2:	6833      	ldr	r3, [r6, #0]
   8a9d4:	9904      	ldr	r1, [sp, #16]
   8a9d6:	6019      	str	r1, [r3, #0]
   8a9d8:	4616      	mov	r6, r2
   8a9da:	e6cf      	b.n	8a77c <_svfiprintf_r+0x52>
   8a9dc:	6830      	ldr	r0, [r6, #0]
   8a9de:	9c04      	ldr	r4, [sp, #16]
   8a9e0:	f017 0f40 	tst.w	r7, #64	; 0x40
   8a9e4:	f106 0604 	add.w	r6, r6, #4
   8a9e8:	bf14      	ite	ne
   8a9ea:	8004      	strhne	r4, [r0, #0]
   8a9ec:	6004      	streq	r4, [r0, #0]
   8a9ee:	e6c5      	b.n	8a77c <_svfiprintf_r+0x52>
   8a9f0:	f047 0710 	orr.w	r7, r7, #16
   8a9f4:	f017 0020 	ands.w	r0, r7, #32
   8a9f8:	d008      	beq.n	8aa0c <_svfiprintf_r+0x2e2>
   8a9fa:	1df3      	adds	r3, r6, #7
   8a9fc:	f023 0507 	bic.w	r5, r3, #7
   8aa00:	f105 0608 	add.w	r6, r5, #8
   8aa04:	e9d5 4500 	ldrd	r4, r5, [r5]
   8aa08:	2000      	movs	r0, #0
   8aa0a:	e07c      	b.n	8ab06 <_svfiprintf_r+0x3dc>
   8aa0c:	f017 0110 	ands.w	r1, r7, #16
   8aa10:	f106 0204 	add.w	r2, r6, #4
   8aa14:	d106      	bne.n	8aa24 <_svfiprintf_r+0x2fa>
   8aa16:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   8aa1a:	d003      	beq.n	8aa24 <_svfiprintf_r+0x2fa>
   8aa1c:	8834      	ldrh	r4, [r6, #0]
   8aa1e:	2500      	movs	r5, #0
   8aa20:	4616      	mov	r6, r2
   8aa22:	e7f1      	b.n	8aa08 <_svfiprintf_r+0x2de>
   8aa24:	6836      	ldr	r6, [r6, #0]
   8aa26:	2500      	movs	r5, #0
   8aa28:	4634      	mov	r4, r6
   8aa2a:	4616      	mov	r6, r2
   8aa2c:	e06b      	b.n	8ab06 <_svfiprintf_r+0x3dc>
   8aa2e:	4b39      	ldr	r3, [pc, #228]	; (8ab14 <_svfiprintf_r+0x3ea>)
   8aa30:	2130      	movs	r1, #48	; 0x30
   8aa32:	2278      	movs	r2, #120	; 0x78
   8aa34:	6834      	ldr	r4, [r6, #0]
   8aa36:	2500      	movs	r5, #0
   8aa38:	f047 0702 	orr.w	r7, r7, #2
   8aa3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   8aa40:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   8aa44:	3604      	adds	r6, #4
   8aa46:	9305      	str	r3, [sp, #20]
   8aa48:	e05c      	b.n	8ab04 <_svfiprintf_r+0x3da>
   8aa4a:	4631      	mov	r1, r6
   8aa4c:	2500      	movs	r5, #0
   8aa4e:	f8d1 a000 	ldr.w	sl, [r1]
   8aa52:	3604      	adds	r6, #4
   8aa54:	45ac      	cmp	ip, r5
   8aa56:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8aa5a:	4650      	mov	r0, sl
   8aa5c:	db11      	blt.n	8aa82 <_svfiprintf_r+0x358>
   8aa5e:	4662      	mov	r2, ip
   8aa60:	4629      	mov	r1, r5
   8aa62:	f8cd c000 	str.w	ip, [sp]
   8aa66:	f7ff fc3b 	bl	8a2e0 <memchr>
   8aa6a:	f8dd c000 	ldr.w	ip, [sp]
   8aa6e:	2800      	cmp	r0, #0
   8aa70:	f000 80d5 	beq.w	8ac1e <_svfiprintf_r+0x4f4>
   8aa74:	ebca 0400 	rsb	r4, sl, r0
   8aa78:	4564      	cmp	r4, ip
   8aa7a:	f340 80d2 	ble.w	8ac22 <_svfiprintf_r+0x4f8>
   8aa7e:	4664      	mov	r4, ip
   8aa80:	e0cf      	b.n	8ac22 <_svfiprintf_r+0x4f8>
   8aa82:	f7fe fd13 	bl	894ac <strlen>
   8aa86:	4604      	mov	r4, r0
   8aa88:	e0cb      	b.n	8ac22 <_svfiprintf_r+0x4f8>
   8aa8a:	f047 0710 	orr.w	r7, r7, #16
   8aa8e:	06bd      	lsls	r5, r7, #26
   8aa90:	d506      	bpl.n	8aaa0 <_svfiprintf_r+0x376>
   8aa92:	1df0      	adds	r0, r6, #7
   8aa94:	f020 0407 	bic.w	r4, r0, #7
   8aa98:	f104 0608 	add.w	r6, r4, #8
   8aa9c:	cc30      	ldmia	r4, {r4, r5}
   8aa9e:	e00c      	b.n	8aaba <_svfiprintf_r+0x390>
   8aaa0:	f017 0f10 	tst.w	r7, #16
   8aaa4:	f106 0304 	add.w	r3, r6, #4
   8aaa8:	d103      	bne.n	8aab2 <_svfiprintf_r+0x388>
   8aaaa:	067c      	lsls	r4, r7, #25
   8aaac:	d501      	bpl.n	8aab2 <_svfiprintf_r+0x388>
   8aaae:	8834      	ldrh	r4, [r6, #0]
   8aab0:	e001      	b.n	8aab6 <_svfiprintf_r+0x38c>
   8aab2:	6835      	ldr	r5, [r6, #0]
   8aab4:	462c      	mov	r4, r5
   8aab6:	2500      	movs	r5, #0
   8aab8:	461e      	mov	r6, r3
   8aaba:	2001      	movs	r0, #1
   8aabc:	e023      	b.n	8ab06 <_svfiprintf_r+0x3dc>
   8aabe:	06b8      	lsls	r0, r7, #26
   8aac0:	d507      	bpl.n	8aad2 <_svfiprintf_r+0x3a8>
   8aac2:	1df4      	adds	r4, r6, #7
   8aac4:	f024 0107 	bic.w	r1, r4, #7
   8aac8:	f101 0608 	add.w	r6, r1, #8
   8aacc:	e9d1 4500 	ldrd	r4, r5, [r1]
   8aad0:	e00c      	b.n	8aaec <_svfiprintf_r+0x3c2>
   8aad2:	f017 0f10 	tst.w	r7, #16
   8aad6:	f106 0004 	add.w	r0, r6, #4
   8aada:	d103      	bne.n	8aae4 <_svfiprintf_r+0x3ba>
   8aadc:	0679      	lsls	r1, r7, #25
   8aade:	d501      	bpl.n	8aae4 <_svfiprintf_r+0x3ba>
   8aae0:	8834      	ldrh	r4, [r6, #0]
   8aae2:	e001      	b.n	8aae8 <_svfiprintf_r+0x3be>
   8aae4:	6836      	ldr	r6, [r6, #0]
   8aae6:	4634      	mov	r4, r6
   8aae8:	2500      	movs	r5, #0
   8aaea:	4606      	mov	r6, r0
   8aaec:	07fa      	lsls	r2, r7, #31
   8aaee:	d509      	bpl.n	8ab04 <_svfiprintf_r+0x3da>
   8aaf0:	ea54 0205 	orrs.w	r2, r4, r5
   8aaf4:	d006      	beq.n	8ab04 <_svfiprintf_r+0x3da>
   8aaf6:	2230      	movs	r2, #48	; 0x30
   8aaf8:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   8aafc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   8ab00:	f047 0702 	orr.w	r7, r7, #2
   8ab04:	2002      	movs	r0, #2
   8ab06:	2100      	movs	r1, #0
   8ab08:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   8ab0c:	e005      	b.n	8ab1a <_svfiprintf_r+0x3f0>
   8ab0e:	bf00      	nop
   8ab10:	0008bbde 	.word	0x0008bbde
   8ab14:	0008bbef 	.word	0x0008bbef
   8ab18:	2001      	movs	r0, #1
   8ab1a:	f1bc 0f00 	cmp.w	ip, #0
   8ab1e:	bfa8      	it	ge
   8ab20:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   8ab24:	ea54 0105 	orrs.w	r1, r4, r5
   8ab28:	d102      	bne.n	8ab30 <_svfiprintf_r+0x406>
   8ab2a:	f1bc 0f00 	cmp.w	ip, #0
   8ab2e:	d058      	beq.n	8abe2 <_svfiprintf_r+0x4b8>
   8ab30:	2801      	cmp	r0, #1
   8ab32:	d01d      	beq.n	8ab70 <_svfiprintf_r+0x446>
   8ab34:	2802      	cmp	r0, #2
   8ab36:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8ab3a:	d041      	beq.n	8abc0 <_svfiprintf_r+0x496>
   8ab3c:	f004 0207 	and.w	r2, r4, #7
   8ab40:	08e4      	lsrs	r4, r4, #3
   8ab42:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   8ab46:	08e9      	lsrs	r1, r5, #3
   8ab48:	4604      	mov	r4, r0
   8ab4a:	460d      	mov	r5, r1
   8ab4c:	3230      	adds	r2, #48	; 0x30
   8ab4e:	ea54 0105 	orrs.w	r1, r4, r5
   8ab52:	469a      	mov	sl, r3
   8ab54:	701a      	strb	r2, [r3, #0]
   8ab56:	f103 33ff 	add.w	r3, r3, #4294967295
   8ab5a:	d1ef      	bne.n	8ab3c <_svfiprintf_r+0x412>
   8ab5c:	07f8      	lsls	r0, r7, #31
   8ab5e:	4655      	mov	r5, sl
   8ab60:	d54a      	bpl.n	8abf8 <_svfiprintf_r+0x4ce>
   8ab62:	2a30      	cmp	r2, #48	; 0x30
   8ab64:	d048      	beq.n	8abf8 <_svfiprintf_r+0x4ce>
   8ab66:	2230      	movs	r2, #48	; 0x30
   8ab68:	469a      	mov	sl, r3
   8ab6a:	f805 2c01 	strb.w	r2, [r5, #-1]
   8ab6e:	e043      	b.n	8abf8 <_svfiprintf_r+0x4ce>
   8ab70:	2d00      	cmp	r5, #0
   8ab72:	bf08      	it	eq
   8ab74:	2c0a      	cmpeq	r4, #10
   8ab76:	d203      	bcs.n	8ab80 <_svfiprintf_r+0x456>
   8ab78:	3430      	adds	r4, #48	; 0x30
   8ab7a:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   8ab7e:	e036      	b.n	8abee <_svfiprintf_r+0x4c4>
   8ab80:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8ab84:	9302      	str	r3, [sp, #8]
   8ab86:	4620      	mov	r0, r4
   8ab88:	4629      	mov	r1, r5
   8ab8a:	220a      	movs	r2, #10
   8ab8c:	2300      	movs	r3, #0
   8ab8e:	f8cd c000 	str.w	ip, [sp]
   8ab92:	f000 f9c7 	bl	8af24 <__aeabi_uldivmod>
   8ab96:	9802      	ldr	r0, [sp, #8]
   8ab98:	3230      	adds	r2, #48	; 0x30
   8ab9a:	f800 2901 	strb.w	r2, [r0], #-1
   8ab9e:	4629      	mov	r1, r5
   8aba0:	220a      	movs	r2, #10
   8aba2:	2300      	movs	r3, #0
   8aba4:	f8dd a008 	ldr.w	sl, [sp, #8]
   8aba8:	9002      	str	r0, [sp, #8]
   8abaa:	4620      	mov	r0, r4
   8abac:	f000 f9ba 	bl	8af24 <__aeabi_uldivmod>
   8abb0:	4604      	mov	r4, r0
   8abb2:	460d      	mov	r5, r1
   8abb4:	ea54 0105 	orrs.w	r1, r4, r5
   8abb8:	f8dd c000 	ldr.w	ip, [sp]
   8abbc:	d1e3      	bne.n	8ab86 <_svfiprintf_r+0x45c>
   8abbe:	e01b      	b.n	8abf8 <_svfiprintf_r+0x4ce>
   8abc0:	9905      	ldr	r1, [sp, #20]
   8abc2:	f004 000f 	and.w	r0, r4, #15
   8abc6:	0924      	lsrs	r4, r4, #4
   8abc8:	5c0a      	ldrb	r2, [r1, r0]
   8abca:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   8abce:	0929      	lsrs	r1, r5, #4
   8abd0:	4604      	mov	r4, r0
   8abd2:	460d      	mov	r5, r1
   8abd4:	469a      	mov	sl, r3
   8abd6:	f803 2901 	strb.w	r2, [r3], #-1
   8abda:	ea54 0205 	orrs.w	r2, r4, r5
   8abde:	d1ef      	bne.n	8abc0 <_svfiprintf_r+0x496>
   8abe0:	e00a      	b.n	8abf8 <_svfiprintf_r+0x4ce>
   8abe2:	b938      	cbnz	r0, 8abf4 <_svfiprintf_r+0x4ca>
   8abe4:	07f9      	lsls	r1, r7, #31
   8abe6:	d505      	bpl.n	8abf4 <_svfiprintf_r+0x4ca>
   8abe8:	2030      	movs	r0, #48	; 0x30
   8abea:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   8abee:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   8abf2:	e001      	b.n	8abf8 <_svfiprintf_r+0x4ce>
   8abf4:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   8abf8:	ad18      	add	r5, sp, #96	; 0x60
   8abfa:	ebca 0405 	rsb	r4, sl, r5
   8abfe:	4665      	mov	r5, ip
   8ac00:	e00f      	b.n	8ac22 <_svfiprintf_r+0x4f8>
   8ac02:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8ac06:	2b00      	cmp	r3, #0
   8ac08:	f000 8176 	beq.w	8aef8 <_svfiprintf_r+0x7ce>
   8ac0c:	2500      	movs	r5, #0
   8ac0e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   8ac12:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8ac16:	2401      	movs	r4, #1
   8ac18:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   8ac1c:	e001      	b.n	8ac22 <_svfiprintf_r+0x4f8>
   8ac1e:	4664      	mov	r4, ip
   8ac20:	4605      	mov	r5, r0
   8ac22:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8ac26:	42ac      	cmp	r4, r5
   8ac28:	bfac      	ite	ge
   8ac2a:	4621      	movge	r1, r4
   8ac2c:	4629      	movlt	r1, r5
   8ac2e:	9102      	str	r1, [sp, #8]
   8ac30:	b113      	cbz	r3, 8ac38 <_svfiprintf_r+0x50e>
   8ac32:	9802      	ldr	r0, [sp, #8]
   8ac34:	1c42      	adds	r2, r0, #1
   8ac36:	9202      	str	r2, [sp, #8]
   8ac38:	f017 0102 	ands.w	r1, r7, #2
   8ac3c:	9106      	str	r1, [sp, #24]
   8ac3e:	d002      	beq.n	8ac46 <_svfiprintf_r+0x51c>
   8ac40:	9b02      	ldr	r3, [sp, #8]
   8ac42:	1c98      	adds	r0, r3, #2
   8ac44:	9002      	str	r0, [sp, #8]
   8ac46:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   8ac4a:	9207      	str	r2, [sp, #28]
   8ac4c:	d13c      	bne.n	8acc8 <_svfiprintf_r+0x59e>
   8ac4e:	9903      	ldr	r1, [sp, #12]
   8ac50:	9b02      	ldr	r3, [sp, #8]
   8ac52:	1acb      	subs	r3, r1, r3
   8ac54:	2b00      	cmp	r3, #0
   8ac56:	dd37      	ble.n	8acc8 <_svfiprintf_r+0x59e>
   8ac58:	48a5      	ldr	r0, [pc, #660]	; (8aef0 <_svfiprintf_r+0x7c6>)
   8ac5a:	2b10      	cmp	r3, #16
   8ac5c:	f8c8 0000 	str.w	r0, [r8]
   8ac60:	dd1b      	ble.n	8ac9a <_svfiprintf_r+0x570>
   8ac62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8ac64:	2110      	movs	r1, #16
   8ac66:	980d      	ldr	r0, [sp, #52]	; 0x34
   8ac68:	f8c8 1004 	str.w	r1, [r8, #4]
   8ac6c:	1c51      	adds	r1, r2, #1
   8ac6e:	3010      	adds	r0, #16
   8ac70:	2907      	cmp	r1, #7
   8ac72:	900d      	str	r0, [sp, #52]	; 0x34
   8ac74:	910c      	str	r1, [sp, #48]	; 0x30
   8ac76:	dc02      	bgt.n	8ac7e <_svfiprintf_r+0x554>
   8ac78:	f108 0808 	add.w	r8, r8, #8
   8ac7c:	e00b      	b.n	8ac96 <_svfiprintf_r+0x56c>
   8ac7e:	4658      	mov	r0, fp
   8ac80:	4649      	mov	r1, r9
   8ac82:	aa0b      	add	r2, sp, #44	; 0x2c
   8ac84:	9300      	str	r3, [sp, #0]
   8ac86:	f7ff fcd3 	bl	8a630 <__ssprint_r>
   8ac8a:	9b00      	ldr	r3, [sp, #0]
   8ac8c:	2800      	cmp	r0, #0
   8ac8e:	f040 813a 	bne.w	8af06 <_svfiprintf_r+0x7dc>
   8ac92:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8ac96:	3b10      	subs	r3, #16
   8ac98:	e7de      	b.n	8ac58 <_svfiprintf_r+0x52e>
   8ac9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8ac9c:	f8c8 3004 	str.w	r3, [r8, #4]
   8aca0:	18d1      	adds	r1, r2, r3
   8aca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8aca4:	910d      	str	r1, [sp, #52]	; 0x34
   8aca6:	1c58      	adds	r0, r3, #1
   8aca8:	2807      	cmp	r0, #7
   8acaa:	900c      	str	r0, [sp, #48]	; 0x30
   8acac:	dc02      	bgt.n	8acb4 <_svfiprintf_r+0x58a>
   8acae:	f108 0808 	add.w	r8, r8, #8
   8acb2:	e009      	b.n	8acc8 <_svfiprintf_r+0x59e>
   8acb4:	4658      	mov	r0, fp
   8acb6:	4649      	mov	r1, r9
   8acb8:	aa0b      	add	r2, sp, #44	; 0x2c
   8acba:	f7ff fcb9 	bl	8a630 <__ssprint_r>
   8acbe:	2800      	cmp	r0, #0
   8acc0:	f040 8121 	bne.w	8af06 <_svfiprintf_r+0x7dc>
   8acc4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8acc8:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   8accc:	b1da      	cbz	r2, 8ad06 <_svfiprintf_r+0x5dc>
   8acce:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   8acd2:	f8c8 1000 	str.w	r1, [r8]
   8acd6:	990c      	ldr	r1, [sp, #48]	; 0x30
   8acd8:	2301      	movs	r3, #1
   8acda:	980d      	ldr	r0, [sp, #52]	; 0x34
   8acdc:	f8c8 3004 	str.w	r3, [r8, #4]
   8ace0:	1c4b      	adds	r3, r1, #1
   8ace2:	1c42      	adds	r2, r0, #1
   8ace4:	2b07      	cmp	r3, #7
   8ace6:	920d      	str	r2, [sp, #52]	; 0x34
   8ace8:	930c      	str	r3, [sp, #48]	; 0x30
   8acea:	dc02      	bgt.n	8acf2 <_svfiprintf_r+0x5c8>
   8acec:	f108 0808 	add.w	r8, r8, #8
   8acf0:	e009      	b.n	8ad06 <_svfiprintf_r+0x5dc>
   8acf2:	4658      	mov	r0, fp
   8acf4:	4649      	mov	r1, r9
   8acf6:	aa0b      	add	r2, sp, #44	; 0x2c
   8acf8:	f7ff fc9a 	bl	8a630 <__ssprint_r>
   8acfc:	2800      	cmp	r0, #0
   8acfe:	f040 8102 	bne.w	8af06 <_svfiprintf_r+0x7dc>
   8ad02:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8ad06:	9806      	ldr	r0, [sp, #24]
   8ad08:	b1d0      	cbz	r0, 8ad40 <_svfiprintf_r+0x616>
   8ad0a:	aa0a      	add	r2, sp, #40	; 0x28
   8ad0c:	f8c8 2000 	str.w	r2, [r8]
   8ad10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8ad12:	2102      	movs	r1, #2
   8ad14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8ad16:	f8c8 1004 	str.w	r1, [r8, #4]
   8ad1a:	1c51      	adds	r1, r2, #1
   8ad1c:	1c98      	adds	r0, r3, #2
   8ad1e:	2907      	cmp	r1, #7
   8ad20:	900d      	str	r0, [sp, #52]	; 0x34
   8ad22:	910c      	str	r1, [sp, #48]	; 0x30
   8ad24:	dc02      	bgt.n	8ad2c <_svfiprintf_r+0x602>
   8ad26:	f108 0808 	add.w	r8, r8, #8
   8ad2a:	e009      	b.n	8ad40 <_svfiprintf_r+0x616>
   8ad2c:	4658      	mov	r0, fp
   8ad2e:	4649      	mov	r1, r9
   8ad30:	aa0b      	add	r2, sp, #44	; 0x2c
   8ad32:	f7ff fc7d 	bl	8a630 <__ssprint_r>
   8ad36:	2800      	cmp	r0, #0
   8ad38:	f040 80e5 	bne.w	8af06 <_svfiprintf_r+0x7dc>
   8ad3c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8ad40:	9b07      	ldr	r3, [sp, #28]
   8ad42:	2b80      	cmp	r3, #128	; 0x80
   8ad44:	d13c      	bne.n	8adc0 <_svfiprintf_r+0x696>
   8ad46:	9803      	ldr	r0, [sp, #12]
   8ad48:	9a02      	ldr	r2, [sp, #8]
   8ad4a:	1a83      	subs	r3, r0, r2
   8ad4c:	2b00      	cmp	r3, #0
   8ad4e:	dd37      	ble.n	8adc0 <_svfiprintf_r+0x696>
   8ad50:	4968      	ldr	r1, [pc, #416]	; (8aef4 <_svfiprintf_r+0x7ca>)
   8ad52:	2b10      	cmp	r3, #16
   8ad54:	f8c8 1000 	str.w	r1, [r8]
   8ad58:	dd1b      	ble.n	8ad92 <_svfiprintf_r+0x668>
   8ad5a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8ad5c:	2210      	movs	r2, #16
   8ad5e:	990d      	ldr	r1, [sp, #52]	; 0x34
   8ad60:	f8c8 2004 	str.w	r2, [r8, #4]
   8ad64:	1c42      	adds	r2, r0, #1
   8ad66:	3110      	adds	r1, #16
   8ad68:	2a07      	cmp	r2, #7
   8ad6a:	910d      	str	r1, [sp, #52]	; 0x34
   8ad6c:	920c      	str	r2, [sp, #48]	; 0x30
   8ad6e:	dc02      	bgt.n	8ad76 <_svfiprintf_r+0x64c>
   8ad70:	f108 0808 	add.w	r8, r8, #8
   8ad74:	e00b      	b.n	8ad8e <_svfiprintf_r+0x664>
   8ad76:	4658      	mov	r0, fp
   8ad78:	4649      	mov	r1, r9
   8ad7a:	aa0b      	add	r2, sp, #44	; 0x2c
   8ad7c:	9300      	str	r3, [sp, #0]
   8ad7e:	f7ff fc57 	bl	8a630 <__ssprint_r>
   8ad82:	9b00      	ldr	r3, [sp, #0]
   8ad84:	2800      	cmp	r0, #0
   8ad86:	f040 80be 	bne.w	8af06 <_svfiprintf_r+0x7dc>
   8ad8a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8ad8e:	3b10      	subs	r3, #16
   8ad90:	e7de      	b.n	8ad50 <_svfiprintf_r+0x626>
   8ad92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8ad94:	980d      	ldr	r0, [sp, #52]	; 0x34
   8ad96:	1c51      	adds	r1, r2, #1
   8ad98:	f8c8 3004 	str.w	r3, [r8, #4]
   8ad9c:	2907      	cmp	r1, #7
   8ad9e:	4403      	add	r3, r0
   8ada0:	930d      	str	r3, [sp, #52]	; 0x34
   8ada2:	910c      	str	r1, [sp, #48]	; 0x30
   8ada4:	dc02      	bgt.n	8adac <_svfiprintf_r+0x682>
   8ada6:	f108 0808 	add.w	r8, r8, #8
   8adaa:	e009      	b.n	8adc0 <_svfiprintf_r+0x696>
   8adac:	4658      	mov	r0, fp
   8adae:	4649      	mov	r1, r9
   8adb0:	aa0b      	add	r2, sp, #44	; 0x2c
   8adb2:	f7ff fc3d 	bl	8a630 <__ssprint_r>
   8adb6:	2800      	cmp	r0, #0
   8adb8:	f040 80a5 	bne.w	8af06 <_svfiprintf_r+0x7dc>
   8adbc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8adc0:	1b2d      	subs	r5, r5, r4
   8adc2:	2d00      	cmp	r5, #0
   8adc4:	dd34      	ble.n	8ae30 <_svfiprintf_r+0x706>
   8adc6:	484b      	ldr	r0, [pc, #300]	; (8aef4 <_svfiprintf_r+0x7ca>)
   8adc8:	2d10      	cmp	r5, #16
   8adca:	f8c8 0000 	str.w	r0, [r8]
   8adce:	dd19      	ble.n	8ae04 <_svfiprintf_r+0x6da>
   8add0:	980c      	ldr	r0, [sp, #48]	; 0x30
   8add2:	990d      	ldr	r1, [sp, #52]	; 0x34
   8add4:	1c43      	adds	r3, r0, #1
   8add6:	2210      	movs	r2, #16
   8add8:	3110      	adds	r1, #16
   8adda:	2b07      	cmp	r3, #7
   8addc:	f8c8 2004 	str.w	r2, [r8, #4]
   8ade0:	910d      	str	r1, [sp, #52]	; 0x34
   8ade2:	930c      	str	r3, [sp, #48]	; 0x30
   8ade4:	dc02      	bgt.n	8adec <_svfiprintf_r+0x6c2>
   8ade6:	f108 0808 	add.w	r8, r8, #8
   8adea:	e009      	b.n	8ae00 <_svfiprintf_r+0x6d6>
   8adec:	4658      	mov	r0, fp
   8adee:	4649      	mov	r1, r9
   8adf0:	aa0b      	add	r2, sp, #44	; 0x2c
   8adf2:	f7ff fc1d 	bl	8a630 <__ssprint_r>
   8adf6:	2800      	cmp	r0, #0
   8adf8:	f040 8085 	bne.w	8af06 <_svfiprintf_r+0x7dc>
   8adfc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8ae00:	3d10      	subs	r5, #16
   8ae02:	e7e0      	b.n	8adc6 <_svfiprintf_r+0x69c>
   8ae04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8ae06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8ae08:	1c51      	adds	r1, r2, #1
   8ae0a:	f8c8 5004 	str.w	r5, [r8, #4]
   8ae0e:	2907      	cmp	r1, #7
   8ae10:	441d      	add	r5, r3
   8ae12:	950d      	str	r5, [sp, #52]	; 0x34
   8ae14:	910c      	str	r1, [sp, #48]	; 0x30
   8ae16:	dc02      	bgt.n	8ae1e <_svfiprintf_r+0x6f4>
   8ae18:	f108 0808 	add.w	r8, r8, #8
   8ae1c:	e008      	b.n	8ae30 <_svfiprintf_r+0x706>
   8ae1e:	4658      	mov	r0, fp
   8ae20:	4649      	mov	r1, r9
   8ae22:	aa0b      	add	r2, sp, #44	; 0x2c
   8ae24:	f7ff fc04 	bl	8a630 <__ssprint_r>
   8ae28:	2800      	cmp	r0, #0
   8ae2a:	d16c      	bne.n	8af06 <_svfiprintf_r+0x7dc>
   8ae2c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8ae30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8ae32:	980d      	ldr	r0, [sp, #52]	; 0x34
   8ae34:	1c5a      	adds	r2, r3, #1
   8ae36:	f8c8 4004 	str.w	r4, [r8, #4]
   8ae3a:	2a07      	cmp	r2, #7
   8ae3c:	4404      	add	r4, r0
   8ae3e:	f8c8 a000 	str.w	sl, [r8]
   8ae42:	940d      	str	r4, [sp, #52]	; 0x34
   8ae44:	920c      	str	r2, [sp, #48]	; 0x30
   8ae46:	dc02      	bgt.n	8ae4e <_svfiprintf_r+0x724>
   8ae48:	f108 0308 	add.w	r3, r8, #8
   8ae4c:	e007      	b.n	8ae5e <_svfiprintf_r+0x734>
   8ae4e:	4658      	mov	r0, fp
   8ae50:	4649      	mov	r1, r9
   8ae52:	aa0b      	add	r2, sp, #44	; 0x2c
   8ae54:	f7ff fbec 	bl	8a630 <__ssprint_r>
   8ae58:	2800      	cmp	r0, #0
   8ae5a:	d154      	bne.n	8af06 <_svfiprintf_r+0x7dc>
   8ae5c:	ab18      	add	r3, sp, #96	; 0x60
   8ae5e:	077a      	lsls	r2, r7, #29
   8ae60:	d40b      	bmi.n	8ae7a <_svfiprintf_r+0x750>
   8ae62:	9804      	ldr	r0, [sp, #16]
   8ae64:	9b02      	ldr	r3, [sp, #8]
   8ae66:	9a03      	ldr	r2, [sp, #12]
   8ae68:	990d      	ldr	r1, [sp, #52]	; 0x34
   8ae6a:	4293      	cmp	r3, r2
   8ae6c:	bfac      	ite	ge
   8ae6e:	18c0      	addge	r0, r0, r3
   8ae70:	1880      	addlt	r0, r0, r2
   8ae72:	9004      	str	r0, [sp, #16]
   8ae74:	2900      	cmp	r1, #0
   8ae76:	d036      	beq.n	8aee6 <_svfiprintf_r+0x7bc>
   8ae78:	e02f      	b.n	8aeda <_svfiprintf_r+0x7b0>
   8ae7a:	9c03      	ldr	r4, [sp, #12]
   8ae7c:	9902      	ldr	r1, [sp, #8]
   8ae7e:	1a64      	subs	r4, r4, r1
   8ae80:	2c00      	cmp	r4, #0
   8ae82:	ddee      	ble.n	8ae62 <_svfiprintf_r+0x738>
   8ae84:	481a      	ldr	r0, [pc, #104]	; (8aef0 <_svfiprintf_r+0x7c6>)
   8ae86:	2c10      	cmp	r4, #16
   8ae88:	6018      	str	r0, [r3, #0]
   8ae8a:	dd15      	ble.n	8aeb8 <_svfiprintf_r+0x78e>
   8ae8c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8ae8e:	2010      	movs	r0, #16
   8ae90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8ae92:	6058      	str	r0, [r3, #4]
   8ae94:	1c48      	adds	r0, r1, #1
   8ae96:	3210      	adds	r2, #16
   8ae98:	2807      	cmp	r0, #7
   8ae9a:	920d      	str	r2, [sp, #52]	; 0x34
   8ae9c:	900c      	str	r0, [sp, #48]	; 0x30
   8ae9e:	dc01      	bgt.n	8aea4 <_svfiprintf_r+0x77a>
   8aea0:	3308      	adds	r3, #8
   8aea2:	e007      	b.n	8aeb4 <_svfiprintf_r+0x78a>
   8aea4:	4658      	mov	r0, fp
   8aea6:	4649      	mov	r1, r9
   8aea8:	aa0b      	add	r2, sp, #44	; 0x2c
   8aeaa:	f7ff fbc1 	bl	8a630 <__ssprint_r>
   8aeae:	2800      	cmp	r0, #0
   8aeb0:	d129      	bne.n	8af06 <_svfiprintf_r+0x7dc>
   8aeb2:	ab18      	add	r3, sp, #96	; 0x60
   8aeb4:	3c10      	subs	r4, #16
   8aeb6:	e7e5      	b.n	8ae84 <_svfiprintf_r+0x75a>
   8aeb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8aeba:	605c      	str	r4, [r3, #4]
   8aebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8aebe:	1c51      	adds	r1, r2, #1
   8aec0:	191c      	adds	r4, r3, r4
   8aec2:	2907      	cmp	r1, #7
   8aec4:	940d      	str	r4, [sp, #52]	; 0x34
   8aec6:	910c      	str	r1, [sp, #48]	; 0x30
   8aec8:	ddcb      	ble.n	8ae62 <_svfiprintf_r+0x738>
   8aeca:	4658      	mov	r0, fp
   8aecc:	4649      	mov	r1, r9
   8aece:	aa0b      	add	r2, sp, #44	; 0x2c
   8aed0:	f7ff fbae 	bl	8a630 <__ssprint_r>
   8aed4:	2800      	cmp	r0, #0
   8aed6:	d0c4      	beq.n	8ae62 <_svfiprintf_r+0x738>
   8aed8:	e015      	b.n	8af06 <_svfiprintf_r+0x7dc>
   8aeda:	4658      	mov	r0, fp
   8aedc:	4649      	mov	r1, r9
   8aede:	aa0b      	add	r2, sp, #44	; 0x2c
   8aee0:	f7ff fba6 	bl	8a630 <__ssprint_r>
   8aee4:	b978      	cbnz	r0, 8af06 <_svfiprintf_r+0x7dc>
   8aee6:	2500      	movs	r5, #0
   8aee8:	950c      	str	r5, [sp, #48]	; 0x30
   8aeea:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8aeee:	e445      	b.n	8a77c <_svfiprintf_r+0x52>
   8aef0:	0008bc00 	.word	0x0008bc00
   8aef4:	0008bc10 	.word	0x0008bc10
   8aef8:	980d      	ldr	r0, [sp, #52]	; 0x34
   8aefa:	b120      	cbz	r0, 8af06 <_svfiprintf_r+0x7dc>
   8aefc:	4658      	mov	r0, fp
   8aefe:	4649      	mov	r1, r9
   8af00:	aa0b      	add	r2, sp, #44	; 0x2c
   8af02:	f7ff fb95 	bl	8a630 <__ssprint_r>
   8af06:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   8af0a:	9b04      	ldr	r3, [sp, #16]
   8af0c:	f002 0140 	and.w	r1, r2, #64	; 0x40
   8af10:	b208      	sxth	r0, r1
   8af12:	2800      	cmp	r0, #0
   8af14:	bf18      	it	ne
   8af16:	f04f 33ff 	movne.w	r3, #4294967295
   8af1a:	4618      	mov	r0, r3
   8af1c:	b029      	add	sp, #164	; 0xa4
   8af1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8af22:	bf00      	nop

0008af24 <__aeabi_uldivmod>:
   8af24:	b94b      	cbnz	r3, 8af3a <__aeabi_uldivmod+0x16>
   8af26:	b942      	cbnz	r2, 8af3a <__aeabi_uldivmod+0x16>
   8af28:	2900      	cmp	r1, #0
   8af2a:	bf08      	it	eq
   8af2c:	2800      	cmpeq	r0, #0
   8af2e:	d002      	beq.n	8af36 <__aeabi_uldivmod+0x12>
   8af30:	f04f 31ff 	mov.w	r1, #4294967295
   8af34:	4608      	mov	r0, r1
   8af36:	f000 b83b 	b.w	8afb0 <__aeabi_idiv0>
   8af3a:	b082      	sub	sp, #8
   8af3c:	46ec      	mov	ip, sp
   8af3e:	e92d 5000 	stmdb	sp!, {ip, lr}
   8af42:	f000 f81d 	bl	8af80 <__gnu_uldivmod_helper>
   8af46:	f8dd e004 	ldr.w	lr, [sp, #4]
   8af4a:	b002      	add	sp, #8
   8af4c:	bc0c      	pop	{r2, r3}
   8af4e:	4770      	bx	lr

0008af50 <__gnu_ldivmod_helper>:
   8af50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8af54:	4616      	mov	r6, r2
   8af56:	4698      	mov	r8, r3
   8af58:	4604      	mov	r4, r0
   8af5a:	460d      	mov	r5, r1
   8af5c:	f000 f82a 	bl	8afb4 <__divdi3>
   8af60:	fb06 fc01 	mul.w	ip, r6, r1
   8af64:	fba6 2300 	umull	r2, r3, r6, r0
   8af68:	fb00 c708 	mla	r7, r0, r8, ip
   8af6c:	18fb      	adds	r3, r7, r3
   8af6e:	1aa2      	subs	r2, r4, r2
   8af70:	eb65 0303 	sbc.w	r3, r5, r3
   8af74:	9c06      	ldr	r4, [sp, #24]
   8af76:	e9c4 2300 	strd	r2, r3, [r4]
   8af7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8af7e:	bf00      	nop

0008af80 <__gnu_uldivmod_helper>:
   8af80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8af84:	4690      	mov	r8, r2
   8af86:	4606      	mov	r6, r0
   8af88:	460f      	mov	r7, r1
   8af8a:	461d      	mov	r5, r3
   8af8c:	f000 f970 	bl	8b270 <__udivdi3>
   8af90:	fb00 f305 	mul.w	r3, r0, r5
   8af94:	fba0 4508 	umull	r4, r5, r0, r8
   8af98:	fb08 3801 	mla	r8, r8, r1, r3
   8af9c:	9b06      	ldr	r3, [sp, #24]
   8af9e:	4445      	add	r5, r8
   8afa0:	1b34      	subs	r4, r6, r4
   8afa2:	eb67 0505 	sbc.w	r5, r7, r5
   8afa6:	e9c3 4500 	strd	r4, r5, [r3]
   8afaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8afae:	bf00      	nop

0008afb0 <__aeabi_idiv0>:
   8afb0:	4770      	bx	lr
   8afb2:	bf00      	nop

0008afb4 <__divdi3>:
   8afb4:	2900      	cmp	r1, #0
   8afb6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8afba:	461d      	mov	r5, r3
   8afbc:	f2c0 809d 	blt.w	8b0fa <__divdi3+0x146>
   8afc0:	2400      	movs	r4, #0
   8afc2:	2d00      	cmp	r5, #0
   8afc4:	f2c0 8094 	blt.w	8b0f0 <__divdi3+0x13c>
   8afc8:	4680      	mov	r8, r0
   8afca:	460f      	mov	r7, r1
   8afcc:	4694      	mov	ip, r2
   8afce:	461e      	mov	r6, r3
   8afd0:	bbe3      	cbnz	r3, 8b04c <__divdi3+0x98>
   8afd2:	428a      	cmp	r2, r1
   8afd4:	d955      	bls.n	8b082 <__divdi3+0xce>
   8afd6:	fab2 f782 	clz	r7, r2
   8afda:	b147      	cbz	r7, 8afee <__divdi3+0x3a>
   8afdc:	f1c7 0520 	rsb	r5, r7, #32
   8afe0:	fa20 f605 	lsr.w	r6, r0, r5
   8afe4:	fa01 f107 	lsl.w	r1, r1, r7
   8afe8:	40ba      	lsls	r2, r7
   8afea:	40b8      	lsls	r0, r7
   8afec:	4331      	orrs	r1, r6
   8afee:	0c17      	lsrs	r7, r2, #16
   8aff0:	fbb1 f6f7 	udiv	r6, r1, r7
   8aff4:	fa1f fc82 	uxth.w	ip, r2
   8aff8:	fb07 1116 	mls	r1, r7, r6, r1
   8affc:	fb0c f506 	mul.w	r5, ip, r6
   8b000:	0c03      	lsrs	r3, r0, #16
   8b002:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8b006:	429d      	cmp	r5, r3
   8b008:	d908      	bls.n	8b01c <__divdi3+0x68>
   8b00a:	1e71      	subs	r1, r6, #1
   8b00c:	189b      	adds	r3, r3, r2
   8b00e:	f080 8113 	bcs.w	8b238 <__divdi3+0x284>
   8b012:	429d      	cmp	r5, r3
   8b014:	f240 8110 	bls.w	8b238 <__divdi3+0x284>
   8b018:	3e02      	subs	r6, #2
   8b01a:	189b      	adds	r3, r3, r2
   8b01c:	1b59      	subs	r1, r3, r5
   8b01e:	fbb1 f5f7 	udiv	r5, r1, r7
   8b022:	fb07 1315 	mls	r3, r7, r5, r1
   8b026:	fb0c fc05 	mul.w	ip, ip, r5
   8b02a:	b280      	uxth	r0, r0
   8b02c:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
   8b030:	458c      	cmp	ip, r1
   8b032:	d907      	bls.n	8b044 <__divdi3+0x90>
   8b034:	1e6b      	subs	r3, r5, #1
   8b036:	188a      	adds	r2, r1, r2
   8b038:	f080 8100 	bcs.w	8b23c <__divdi3+0x288>
   8b03c:	4594      	cmp	ip, r2
   8b03e:	f240 80fd 	bls.w	8b23c <__divdi3+0x288>
   8b042:	3d02      	subs	r5, #2
   8b044:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
   8b048:	2500      	movs	r5, #0
   8b04a:	e003      	b.n	8b054 <__divdi3+0xa0>
   8b04c:	428b      	cmp	r3, r1
   8b04e:	d90c      	bls.n	8b06a <__divdi3+0xb6>
   8b050:	2500      	movs	r5, #0
   8b052:	4629      	mov	r1, r5
   8b054:	460a      	mov	r2, r1
   8b056:	462b      	mov	r3, r5
   8b058:	b114      	cbz	r4, 8b060 <__divdi3+0xac>
   8b05a:	4252      	negs	r2, r2
   8b05c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8b060:	4610      	mov	r0, r2
   8b062:	4619      	mov	r1, r3
   8b064:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8b068:	4770      	bx	lr
   8b06a:	fab3 f583 	clz	r5, r3
   8b06e:	2d00      	cmp	r5, #0
   8b070:	f040 8087 	bne.w	8b182 <__divdi3+0x1ce>
   8b074:	428b      	cmp	r3, r1
   8b076:	d301      	bcc.n	8b07c <__divdi3+0xc8>
   8b078:	4282      	cmp	r2, r0
   8b07a:	d8ea      	bhi.n	8b052 <__divdi3+0x9e>
   8b07c:	2500      	movs	r5, #0
   8b07e:	2101      	movs	r1, #1
   8b080:	e7e8      	b.n	8b054 <__divdi3+0xa0>
   8b082:	b912      	cbnz	r2, 8b08a <__divdi3+0xd6>
   8b084:	2601      	movs	r6, #1
   8b086:	fbb6 f2f2 	udiv	r2, r6, r2
   8b08a:	fab2 f682 	clz	r6, r2
   8b08e:	2e00      	cmp	r6, #0
   8b090:	d139      	bne.n	8b106 <__divdi3+0x152>
   8b092:	1a8e      	subs	r6, r1, r2
   8b094:	0c13      	lsrs	r3, r2, #16
   8b096:	fa1f fc82 	uxth.w	ip, r2
   8b09a:	2501      	movs	r5, #1
   8b09c:	fbb6 f7f3 	udiv	r7, r6, r3
   8b0a0:	fb03 6117 	mls	r1, r3, r7, r6
   8b0a4:	fb0c f807 	mul.w	r8, ip, r7
   8b0a8:	ea4f 4910 	mov.w	r9, r0, lsr #16
   8b0ac:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
   8b0b0:	45b0      	cmp	r8, r6
   8b0b2:	d906      	bls.n	8b0c2 <__divdi3+0x10e>
   8b0b4:	1e79      	subs	r1, r7, #1
   8b0b6:	18b6      	adds	r6, r6, r2
   8b0b8:	d202      	bcs.n	8b0c0 <__divdi3+0x10c>
   8b0ba:	45b0      	cmp	r8, r6
   8b0bc:	f200 80d3 	bhi.w	8b266 <__divdi3+0x2b2>
   8b0c0:	460f      	mov	r7, r1
   8b0c2:	ebc8 0606 	rsb	r6, r8, r6
   8b0c6:	fbb6 f1f3 	udiv	r1, r6, r3
   8b0ca:	fb03 6311 	mls	r3, r3, r1, r6
   8b0ce:	fb0c fc01 	mul.w	ip, ip, r1
   8b0d2:	b280      	uxth	r0, r0
   8b0d4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   8b0d8:	459c      	cmp	ip, r3
   8b0da:	d906      	bls.n	8b0ea <__divdi3+0x136>
   8b0dc:	1e4e      	subs	r6, r1, #1
   8b0de:	189a      	adds	r2, r3, r2
   8b0e0:	d202      	bcs.n	8b0e8 <__divdi3+0x134>
   8b0e2:	4594      	cmp	ip, r2
   8b0e4:	f200 80c2 	bhi.w	8b26c <__divdi3+0x2b8>
   8b0e8:	4631      	mov	r1, r6
   8b0ea:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   8b0ee:	e7b1      	b.n	8b054 <__divdi3+0xa0>
   8b0f0:	43e4      	mvns	r4, r4
   8b0f2:	4252      	negs	r2, r2
   8b0f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8b0f8:	e766      	b.n	8afc8 <__divdi3+0x14>
   8b0fa:	4240      	negs	r0, r0
   8b0fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8b100:	f04f 34ff 	mov.w	r4, #4294967295
   8b104:	e75d      	b.n	8afc2 <__divdi3+0xe>
   8b106:	40b2      	lsls	r2, r6
   8b108:	f1c6 0920 	rsb	r9, r6, #32
   8b10c:	fa21 f709 	lsr.w	r7, r1, r9
   8b110:	fa20 f909 	lsr.w	r9, r0, r9
   8b114:	fa01 f106 	lsl.w	r1, r1, r6
   8b118:	0c13      	lsrs	r3, r2, #16
   8b11a:	fbb7 f8f3 	udiv	r8, r7, r3
   8b11e:	fa1f fc82 	uxth.w	ip, r2
   8b122:	fb03 7718 	mls	r7, r3, r8, r7
   8b126:	fb0c f508 	mul.w	r5, ip, r8
   8b12a:	ea49 0901 	orr.w	r9, r9, r1
   8b12e:	ea4f 4119 	mov.w	r1, r9, lsr #16
   8b132:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
   8b136:	40b0      	lsls	r0, r6
   8b138:	42bd      	cmp	r5, r7
   8b13a:	d90a      	bls.n	8b152 <__divdi3+0x19e>
   8b13c:	18bf      	adds	r7, r7, r2
   8b13e:	f108 36ff 	add.w	r6, r8, #4294967295
   8b142:	f080 808e 	bcs.w	8b262 <__divdi3+0x2ae>
   8b146:	42bd      	cmp	r5, r7
   8b148:	f240 808b 	bls.w	8b262 <__divdi3+0x2ae>
   8b14c:	f1a8 0802 	sub.w	r8, r8, #2
   8b150:	18bf      	adds	r7, r7, r2
   8b152:	1b79      	subs	r1, r7, r5
   8b154:	fbb1 f5f3 	udiv	r5, r1, r3
   8b158:	fb03 1715 	mls	r7, r3, r5, r1
   8b15c:	fb0c f605 	mul.w	r6, ip, r5
   8b160:	fa1f f989 	uxth.w	r9, r9
   8b164:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
   8b168:	428e      	cmp	r6, r1
   8b16a:	d906      	bls.n	8b17a <__divdi3+0x1c6>
   8b16c:	1e6f      	subs	r7, r5, #1
   8b16e:	1889      	adds	r1, r1, r2
   8b170:	d271      	bcs.n	8b256 <__divdi3+0x2a2>
   8b172:	428e      	cmp	r6, r1
   8b174:	d96f      	bls.n	8b256 <__divdi3+0x2a2>
   8b176:	3d02      	subs	r5, #2
   8b178:	1889      	adds	r1, r1, r2
   8b17a:	1b8e      	subs	r6, r1, r6
   8b17c:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
   8b180:	e78c      	b.n	8b09c <__divdi3+0xe8>
   8b182:	f1c5 0120 	rsb	r1, r5, #32
   8b186:	fa22 f301 	lsr.w	r3, r2, r1
   8b18a:	fa06 f605 	lsl.w	r6, r6, r5
   8b18e:	fa27 f201 	lsr.w	r2, r7, r1
   8b192:	fa07 f705 	lsl.w	r7, r7, r5
   8b196:	fa20 f101 	lsr.w	r1, r0, r1
   8b19a:	431e      	orrs	r6, r3
   8b19c:	ea4f 4916 	mov.w	r9, r6, lsr #16
   8b1a0:	fbb2 f8f9 	udiv	r8, r2, r9
   8b1a4:	fa1f fa86 	uxth.w	sl, r6
   8b1a8:	fb09 2218 	mls	r2, r9, r8, r2
   8b1ac:	fb0a fb08 	mul.w	fp, sl, r8
   8b1b0:	430f      	orrs	r7, r1
   8b1b2:	0c3b      	lsrs	r3, r7, #16
   8b1b4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8b1b8:	4593      	cmp	fp, r2
   8b1ba:	fa0c fc05 	lsl.w	ip, ip, r5
   8b1be:	d908      	bls.n	8b1d2 <__divdi3+0x21e>
   8b1c0:	1992      	adds	r2, r2, r6
   8b1c2:	f108 31ff 	add.w	r1, r8, #4294967295
   8b1c6:	d24a      	bcs.n	8b25e <__divdi3+0x2aa>
   8b1c8:	4593      	cmp	fp, r2
   8b1ca:	d948      	bls.n	8b25e <__divdi3+0x2aa>
   8b1cc:	f1a8 0802 	sub.w	r8, r8, #2
   8b1d0:	1992      	adds	r2, r2, r6
   8b1d2:	ebcb 0302 	rsb	r3, fp, r2
   8b1d6:	fbb3 f1f9 	udiv	r1, r3, r9
   8b1da:	fb09 3211 	mls	r2, r9, r1, r3
   8b1de:	fb0a fa01 	mul.w	sl, sl, r1
   8b1e2:	b2bf      	uxth	r7, r7
   8b1e4:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
   8b1e8:	459a      	cmp	sl, r3
   8b1ea:	d906      	bls.n	8b1fa <__divdi3+0x246>
   8b1ec:	1e4a      	subs	r2, r1, #1
   8b1ee:	199b      	adds	r3, r3, r6
   8b1f0:	d233      	bcs.n	8b25a <__divdi3+0x2a6>
   8b1f2:	459a      	cmp	sl, r3
   8b1f4:	d931      	bls.n	8b25a <__divdi3+0x2a6>
   8b1f6:	3902      	subs	r1, #2
   8b1f8:	199b      	adds	r3, r3, r6
   8b1fa:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
   8b1fe:	0c0f      	lsrs	r7, r1, #16
   8b200:	fa1f f88c 	uxth.w	r8, ip
   8b204:	fb08 f607 	mul.w	r6, r8, r7
   8b208:	b28a      	uxth	r2, r1
   8b20a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   8b20e:	fb08 f802 	mul.w	r8, r8, r2
   8b212:	fb0c 6202 	mla	r2, ip, r2, r6
   8b216:	fb0c fc07 	mul.w	ip, ip, r7
   8b21a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   8b21e:	4296      	cmp	r6, r2
   8b220:	bf88      	it	hi
   8b222:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
   8b226:	ebca 0303 	rsb	r3, sl, r3
   8b22a:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
   8b22e:	4563      	cmp	r3, ip
   8b230:	d30e      	bcc.n	8b250 <__divdi3+0x29c>
   8b232:	d005      	beq.n	8b240 <__divdi3+0x28c>
   8b234:	2500      	movs	r5, #0
   8b236:	e70d      	b.n	8b054 <__divdi3+0xa0>
   8b238:	460e      	mov	r6, r1
   8b23a:	e6ef      	b.n	8b01c <__divdi3+0x68>
   8b23c:	461d      	mov	r5, r3
   8b23e:	e701      	b.n	8b044 <__divdi3+0x90>
   8b240:	fa00 f005 	lsl.w	r0, r0, r5
   8b244:	fa1f f888 	uxth.w	r8, r8
   8b248:	eb08 4502 	add.w	r5, r8, r2, lsl #16
   8b24c:	42a8      	cmp	r0, r5
   8b24e:	d2f1      	bcs.n	8b234 <__divdi3+0x280>
   8b250:	3901      	subs	r1, #1
   8b252:	2500      	movs	r5, #0
   8b254:	e6fe      	b.n	8b054 <__divdi3+0xa0>
   8b256:	463d      	mov	r5, r7
   8b258:	e78f      	b.n	8b17a <__divdi3+0x1c6>
   8b25a:	4611      	mov	r1, r2
   8b25c:	e7cd      	b.n	8b1fa <__divdi3+0x246>
   8b25e:	4688      	mov	r8, r1
   8b260:	e7b7      	b.n	8b1d2 <__divdi3+0x21e>
   8b262:	46b0      	mov	r8, r6
   8b264:	e775      	b.n	8b152 <__divdi3+0x19e>
   8b266:	3f02      	subs	r7, #2
   8b268:	18b6      	adds	r6, r6, r2
   8b26a:	e72a      	b.n	8b0c2 <__divdi3+0x10e>
   8b26c:	3902      	subs	r1, #2
   8b26e:	e73c      	b.n	8b0ea <__divdi3+0x136>

0008b270 <__udivdi3>:
   8b270:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8b274:	4614      	mov	r4, r2
   8b276:	4605      	mov	r5, r0
   8b278:	460e      	mov	r6, r1
   8b27a:	2b00      	cmp	r3, #0
   8b27c:	d13d      	bne.n	8b2fa <__udivdi3+0x8a>
   8b27e:	428a      	cmp	r2, r1
   8b280:	d949      	bls.n	8b316 <__udivdi3+0xa6>
   8b282:	fab2 f782 	clz	r7, r2
   8b286:	b147      	cbz	r7, 8b29a <__udivdi3+0x2a>
   8b288:	f1c7 0120 	rsb	r1, r7, #32
   8b28c:	fa20 f201 	lsr.w	r2, r0, r1
   8b290:	fa06 f607 	lsl.w	r6, r6, r7
   8b294:	40bc      	lsls	r4, r7
   8b296:	40bd      	lsls	r5, r7
   8b298:	4316      	orrs	r6, r2
   8b29a:	0c22      	lsrs	r2, r4, #16
   8b29c:	fbb6 f0f2 	udiv	r0, r6, r2
   8b2a0:	b2a1      	uxth	r1, r4
   8b2a2:	fb02 6610 	mls	r6, r2, r0, r6
   8b2a6:	fb01 f300 	mul.w	r3, r1, r0
   8b2aa:	0c2f      	lsrs	r7, r5, #16
   8b2ac:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   8b2b0:	42b3      	cmp	r3, r6
   8b2b2:	d908      	bls.n	8b2c6 <__udivdi3+0x56>
   8b2b4:	1e47      	subs	r7, r0, #1
   8b2b6:	1936      	adds	r6, r6, r4
   8b2b8:	f080 80fa 	bcs.w	8b4b0 <__udivdi3+0x240>
   8b2bc:	42b3      	cmp	r3, r6
   8b2be:	f240 80f7 	bls.w	8b4b0 <__udivdi3+0x240>
   8b2c2:	3802      	subs	r0, #2
   8b2c4:	1936      	adds	r6, r6, r4
   8b2c6:	1af6      	subs	r6, r6, r3
   8b2c8:	fbb6 f3f2 	udiv	r3, r6, r2
   8b2cc:	fb02 6213 	mls	r2, r2, r3, r6
   8b2d0:	fb01 f103 	mul.w	r1, r1, r3
   8b2d4:	b2ad      	uxth	r5, r5
   8b2d6:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
   8b2da:	4291      	cmp	r1, r2
   8b2dc:	d907      	bls.n	8b2ee <__udivdi3+0x7e>
   8b2de:	1e5e      	subs	r6, r3, #1
   8b2e0:	1912      	adds	r2, r2, r4
   8b2e2:	f080 80e7 	bcs.w	8b4b4 <__udivdi3+0x244>
   8b2e6:	4291      	cmp	r1, r2
   8b2e8:	f240 80e4 	bls.w	8b4b4 <__udivdi3+0x244>
   8b2ec:	3b02      	subs	r3, #2
   8b2ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   8b2f2:	2100      	movs	r1, #0
   8b2f4:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8b2f8:	4770      	bx	lr
   8b2fa:	428b      	cmp	r3, r1
   8b2fc:	d843      	bhi.n	8b386 <__udivdi3+0x116>
   8b2fe:	fab3 f483 	clz	r4, r3
   8b302:	2c00      	cmp	r4, #0
   8b304:	d142      	bne.n	8b38c <__udivdi3+0x11c>
   8b306:	428b      	cmp	r3, r1
   8b308:	d302      	bcc.n	8b310 <__udivdi3+0xa0>
   8b30a:	4282      	cmp	r2, r0
   8b30c:	f200 80e1 	bhi.w	8b4d2 <__udivdi3+0x262>
   8b310:	2100      	movs	r1, #0
   8b312:	2001      	movs	r0, #1
   8b314:	e7ee      	b.n	8b2f4 <__udivdi3+0x84>
   8b316:	b912      	cbnz	r2, 8b31e <__udivdi3+0xae>
   8b318:	2701      	movs	r7, #1
   8b31a:	fbb7 f4f2 	udiv	r4, r7, r2
   8b31e:	fab4 f284 	clz	r2, r4
   8b322:	2a00      	cmp	r2, #0
   8b324:	f040 8089 	bne.w	8b43a <__udivdi3+0x1ca>
   8b328:	1b0a      	subs	r2, r1, r4
   8b32a:	0c23      	lsrs	r3, r4, #16
   8b32c:	b2a7      	uxth	r7, r4
   8b32e:	2101      	movs	r1, #1
   8b330:	fbb2 f6f3 	udiv	r6, r2, r3
   8b334:	fb03 2216 	mls	r2, r3, r6, r2
   8b338:	fb07 f006 	mul.w	r0, r7, r6
   8b33c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   8b340:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   8b344:	4290      	cmp	r0, r2
   8b346:	d907      	bls.n	8b358 <__udivdi3+0xe8>
   8b348:	1912      	adds	r2, r2, r4
   8b34a:	f106 3cff 	add.w	ip, r6, #4294967295
   8b34e:	d202      	bcs.n	8b356 <__udivdi3+0xe6>
   8b350:	4290      	cmp	r0, r2
   8b352:	f200 80d0 	bhi.w	8b4f6 <__udivdi3+0x286>
   8b356:	4666      	mov	r6, ip
   8b358:	1a12      	subs	r2, r2, r0
   8b35a:	fbb2 f0f3 	udiv	r0, r2, r3
   8b35e:	fb03 2310 	mls	r3, r3, r0, r2
   8b362:	fb07 f700 	mul.w	r7, r7, r0
   8b366:	b2ad      	uxth	r5, r5
   8b368:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   8b36c:	429f      	cmp	r7, r3
   8b36e:	d907      	bls.n	8b380 <__udivdi3+0x110>
   8b370:	1e42      	subs	r2, r0, #1
   8b372:	191b      	adds	r3, r3, r4
   8b374:	f080 80a0 	bcs.w	8b4b8 <__udivdi3+0x248>
   8b378:	429f      	cmp	r7, r3
   8b37a:	f240 809d 	bls.w	8b4b8 <__udivdi3+0x248>
   8b37e:	3802      	subs	r0, #2
   8b380:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   8b384:	e7b6      	b.n	8b2f4 <__udivdi3+0x84>
   8b386:	2100      	movs	r1, #0
   8b388:	4608      	mov	r0, r1
   8b38a:	e7b3      	b.n	8b2f4 <__udivdi3+0x84>
   8b38c:	f1c4 0620 	rsb	r6, r4, #32
   8b390:	fa22 f706 	lsr.w	r7, r2, r6
   8b394:	fa03 f304 	lsl.w	r3, r3, r4
   8b398:	fa21 f506 	lsr.w	r5, r1, r6
   8b39c:	fa01 f104 	lsl.w	r1, r1, r4
   8b3a0:	fa20 f606 	lsr.w	r6, r0, r6
   8b3a4:	433b      	orrs	r3, r7
   8b3a6:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8b3aa:	fbb5 f7fc 	udiv	r7, r5, ip
   8b3ae:	fa1f f883 	uxth.w	r8, r3
   8b3b2:	fb0c 5517 	mls	r5, ip, r7, r5
   8b3b6:	fb08 f907 	mul.w	r9, r8, r7
   8b3ba:	ea46 0a01 	orr.w	sl, r6, r1
   8b3be:	ea4f 411a 	mov.w	r1, sl, lsr #16
   8b3c2:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   8b3c6:	45a9      	cmp	r9, r5
   8b3c8:	fa02 f204 	lsl.w	r2, r2, r4
   8b3cc:	d904      	bls.n	8b3d8 <__udivdi3+0x168>
   8b3ce:	1e7e      	subs	r6, r7, #1
   8b3d0:	18ed      	adds	r5, r5, r3
   8b3d2:	f0c0 8081 	bcc.w	8b4d8 <__udivdi3+0x268>
   8b3d6:	4637      	mov	r7, r6
   8b3d8:	ebc9 0105 	rsb	r1, r9, r5
   8b3dc:	fbb1 f6fc 	udiv	r6, r1, ip
   8b3e0:	fb0c 1516 	mls	r5, ip, r6, r1
   8b3e4:	fb08 f806 	mul.w	r8, r8, r6
   8b3e8:	fa1f fa8a 	uxth.w	sl, sl
   8b3ec:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
   8b3f0:	4588      	cmp	r8, r1
   8b3f2:	d903      	bls.n	8b3fc <__udivdi3+0x18c>
   8b3f4:	1e75      	subs	r5, r6, #1
   8b3f6:	18c9      	adds	r1, r1, r3
   8b3f8:	d374      	bcc.n	8b4e4 <__udivdi3+0x274>
   8b3fa:	462e      	mov	r6, r5
   8b3fc:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   8b400:	0c37      	lsrs	r7, r6, #16
   8b402:	fa1f fc82 	uxth.w	ip, r2
   8b406:	fb0c f507 	mul.w	r5, ip, r7
   8b40a:	0c12      	lsrs	r2, r2, #16
   8b40c:	b2b3      	uxth	r3, r6
   8b40e:	fb0c fc03 	mul.w	ip, ip, r3
   8b412:	fb02 5303 	mla	r3, r2, r3, r5
   8b416:	fb02 f207 	mul.w	r2, r2, r7
   8b41a:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8b41e:	429d      	cmp	r5, r3
   8b420:	bf88      	it	hi
   8b422:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
   8b426:	ebc8 0101 	rsb	r1, r8, r1
   8b42a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8b42e:	4291      	cmp	r1, r2
   8b430:	d34c      	bcc.n	8b4cc <__udivdi3+0x25c>
   8b432:	d043      	beq.n	8b4bc <__udivdi3+0x24c>
   8b434:	4630      	mov	r0, r6
   8b436:	2100      	movs	r1, #0
   8b438:	e75c      	b.n	8b2f4 <__udivdi3+0x84>
   8b43a:	4094      	lsls	r4, r2
   8b43c:	f1c2 0520 	rsb	r5, r2, #32
   8b440:	fa21 f605 	lsr.w	r6, r1, r5
   8b444:	fa20 f505 	lsr.w	r5, r0, r5
   8b448:	fa01 f102 	lsl.w	r1, r1, r2
   8b44c:	0c23      	lsrs	r3, r4, #16
   8b44e:	fbb6 fcf3 	udiv	ip, r6, r3
   8b452:	b2a7      	uxth	r7, r4
   8b454:	fb03 661c 	mls	r6, r3, ip, r6
   8b458:	fb07 f80c 	mul.w	r8, r7, ip
   8b45c:	4329      	orrs	r1, r5
   8b45e:	0c0d      	lsrs	r5, r1, #16
   8b460:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   8b464:	45b0      	cmp	r8, r6
   8b466:	fa00 f502 	lsl.w	r5, r0, r2
   8b46a:	d908      	bls.n	8b47e <__udivdi3+0x20e>
   8b46c:	1936      	adds	r6, r6, r4
   8b46e:	f10c 30ff 	add.w	r0, ip, #4294967295
   8b472:	d23e      	bcs.n	8b4f2 <__udivdi3+0x282>
   8b474:	45b0      	cmp	r8, r6
   8b476:	d93c      	bls.n	8b4f2 <__udivdi3+0x282>
   8b478:	f1ac 0c02 	sub.w	ip, ip, #2
   8b47c:	1936      	adds	r6, r6, r4
   8b47e:	ebc8 0206 	rsb	r2, r8, r6
   8b482:	fbb2 f0f3 	udiv	r0, r2, r3
   8b486:	fb03 2610 	mls	r6, r3, r0, r2
   8b48a:	fb07 f800 	mul.w	r8, r7, r0
   8b48e:	b289      	uxth	r1, r1
   8b490:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   8b494:	4590      	cmp	r8, r2
   8b496:	d906      	bls.n	8b4a6 <__udivdi3+0x236>
   8b498:	1e46      	subs	r6, r0, #1
   8b49a:	1912      	adds	r2, r2, r4
   8b49c:	d227      	bcs.n	8b4ee <__udivdi3+0x27e>
   8b49e:	4590      	cmp	r8, r2
   8b4a0:	d925      	bls.n	8b4ee <__udivdi3+0x27e>
   8b4a2:	3802      	subs	r0, #2
   8b4a4:	1912      	adds	r2, r2, r4
   8b4a6:	ebc8 0202 	rsb	r2, r8, r2
   8b4aa:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
   8b4ae:	e73f      	b.n	8b330 <__udivdi3+0xc0>
   8b4b0:	4638      	mov	r0, r7
   8b4b2:	e708      	b.n	8b2c6 <__udivdi3+0x56>
   8b4b4:	4633      	mov	r3, r6
   8b4b6:	e71a      	b.n	8b2ee <__udivdi3+0x7e>
   8b4b8:	4610      	mov	r0, r2
   8b4ba:	e761      	b.n	8b380 <__udivdi3+0x110>
   8b4bc:	fa00 f004 	lsl.w	r0, r0, r4
   8b4c0:	fa1f fc8c 	uxth.w	ip, ip
   8b4c4:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
   8b4c8:	4298      	cmp	r0, r3
   8b4ca:	d2b3      	bcs.n	8b434 <__udivdi3+0x1c4>
   8b4cc:	1e70      	subs	r0, r6, #1
   8b4ce:	2100      	movs	r1, #0
   8b4d0:	e710      	b.n	8b2f4 <__udivdi3+0x84>
   8b4d2:	4621      	mov	r1, r4
   8b4d4:	4620      	mov	r0, r4
   8b4d6:	e70d      	b.n	8b2f4 <__udivdi3+0x84>
   8b4d8:	45a9      	cmp	r9, r5
   8b4da:	f67f af7c 	bls.w	8b3d6 <__udivdi3+0x166>
   8b4de:	3f02      	subs	r7, #2
   8b4e0:	18ed      	adds	r5, r5, r3
   8b4e2:	e779      	b.n	8b3d8 <__udivdi3+0x168>
   8b4e4:	4588      	cmp	r8, r1
   8b4e6:	d988      	bls.n	8b3fa <__udivdi3+0x18a>
   8b4e8:	3e02      	subs	r6, #2
   8b4ea:	18c9      	adds	r1, r1, r3
   8b4ec:	e786      	b.n	8b3fc <__udivdi3+0x18c>
   8b4ee:	4630      	mov	r0, r6
   8b4f0:	e7d9      	b.n	8b4a6 <__udivdi3+0x236>
   8b4f2:	4684      	mov	ip, r0
   8b4f4:	e7c3      	b.n	8b47e <__udivdi3+0x20e>
   8b4f6:	3e02      	subs	r6, #2
   8b4f8:	1912      	adds	r2, r2, r4
   8b4fa:	e72d      	b.n	8b358 <__udivdi3+0xe8>

0008b4fc <sd_trans_multipliers>:
   8b4fc:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   8b50c:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   8b51c:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   8b52c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0008b53c <sd_mmc_trans_units>:
   8b53c:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0008b558 <mmc_trans_multipliers>:
   8b558:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   8b568:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   8b578:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   8b588:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0008b598 <tbl_lower.4251>:
   8b598:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   8b5a8:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   8b5b8:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   8b5c8:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   8b5d8:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   8b5e8:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   8b5f8:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   8b608:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   8b618:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   8b628:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   8b638:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   8b648:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   8b658:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   8b668:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   8b678:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   8b688:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   8b698:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   8b6a8:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   8b6b8:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   8b6c8:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   8b6d8:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   8b6e8:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   8b6f8:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   8b708:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   8b718:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   8b728:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   8b738:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   8b748:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   8b758:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   8b768:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0008b778 <Tbl>:
   8b778:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   8b788:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   8b798:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   8b7a8:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   8b7b8:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   8b7c8:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   8b7d8:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   8b7e8:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   8b7f8:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   8b808:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   8b818:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   8b828:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   8b838:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   8b848:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   8b858:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   8b868:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0008b878 <tbl_upper.4252>:
   8b878:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   8b888:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   8b898:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   8b8a8:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   8b8b8:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   8b8c8:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   8b8d8:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   8b8e8:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   8b8f8:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   8b908:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   8b918:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   8b928:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   8b938:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   8b948:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   8b958:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   8b968:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   8b978:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   8b988:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   8b998:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   8b9a8:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   8b9b8:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   8b9c8:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   8b9d8:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   8b9e8:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   8b9f8:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   8ba08:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   8ba18:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   8ba28:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   8ba38:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   8ba48:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   8ba58:	6325 6325 6325 6325 6325 2520 2f75 3025     %c%c%c%c%c %u/%0
   8ba68:	7532 252f 3230 2075 3025 7532 253a 3230     2u/%02u %02u:%02
   8ba78:	2075 3925 756c 2020 7325 0000 2020 7325     u %9lu  %s..  %s
   8ba88:	0a0d 0000 3425 2075 6946 656c 7328 2c29     ....%4u File(s),
   8ba98:	3125 6c30 2075 7962 6574 2073 6f74 6174     %10lu bytes tota
   8baa8:	0a6c 3425 2075 6944 2872 2973 0a0d 0000     l.%4u Dir(s)....
   8bab8:	002f 0000                                   /...

0008babc <excvt.4501>:
   8babc:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   8bacc:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   8badc:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   8baec:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   8bafc:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   8bb0c:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   8bb1c:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   8bb2c:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
   8bb3c:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   8bb4c:	5d5b 0000 5322 2f44 4d4d 2043 6143 6472     [].."SD/MMC Card
   8bb5c:	6f20 6576 2072 434d 2049 6c53 746f 3020      over MCI Slot 0
   8bb6c:	0022 0000 3231 3133 3332 3231 3133 3332     "...123123123123
	...
   8bb88:	aa00 aaaa aaaa aaaa eeaa eeee eeee eeee     ................
   8bb98:	feee ffff ffff ffff ffff ffff 7fff dfbf     ................
   8bba8:	f7ef fdfb 7efc dfbf f7ef fdfb 007e 0000     .....~......~...

0008bbb8 <_global_impure_ptr>:
   8bbb8:	0248 2007 0043                              H.. C.

0008bbbe <blanks.6650>:
   8bbbe:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008bbce <zeroes.6651>:
   8bbce:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   8bbde:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   8bbee:	3000 3231 3433 3635 3837 6139 6362 6564     .0123456789abcde
   8bbfe:	0066                                        f.

0008bc00 <blanks.6664>:
   8bc00:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008bc10 <zeroes.6665>:
   8bc10:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0008bc20 <_init>:
   8bc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bc22:	bf00      	nop
   8bc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8bc26:	bc08      	pop	{r3}
   8bc28:	469e      	mov	lr, r3
   8bc2a:	4770      	bx	lr

0008bc2c <__init_array_start>:
   8bc2c:	00089cb5 	.word	0x00089cb5

0008bc30 <__frame_dummy_init_array_entry>:
   8bc30:	0008016d                                m...

0008bc34 <_fini>:
   8bc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bc36:	bf00      	nop
   8bc38:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8bc3a:	bc08      	pop	{r3}
   8bc3c:	469e      	mov	lr, r3
   8bc3e:	4770      	bx	lr

0008bc40 <__fini_array_start>:
   8bc40:	00080145 	.word	0x00080145

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <sd_mmc_cards>:
	...
20070014:	0067 0000 0000 0000 0000 0000 0000 0000     g...............
	...

20070030 <extra_strings_desc.8964>:
20070030:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

2007004c <udi_cdc_name.8959>:
2007004c:	4443 2043 6e69 6574 6672 6361 0065 0000     CDC interface...

2007005c <udi_msc_name.8960>:
2007005c:	534d 2043 6e69 6574 6672 6361 0065 0000     MSC interface...

2007006c <udi_api_cdc_data>:
2007006c:	4b9d 0008 4911 0008 45e1 0008 45e9 0008     .K...I...E...E..
2007007c:	47cd 0008                                   .G..

20070080 <udi_api_cdc_comm>:
20070080:	4941 0008 45cd 0008 4825 0008 45e9 0008     AI...E..%H...E..
20070090:	0000 0000                                   ....

20070094 <udc_config_hs>:
20070094:	00a4 2007 0128 2007                         ... (.. 

2007009c <udc_config_lsfs>:
2007009c:	0148 2007 0128 2007                         H.. (.. 

200700a4 <udc_desc_hs>:
200700a4:	0209 0062 0103 c000 0832 000b 0202 0102     ..b.....2.......
200700b4:	0900 0004 0100 0202 0001 2405 1000 0401     ...........$....
200700c4:	0224 0502 0624 0100 2405 0301 0701 8305     $...$....$......
200700d4:	4003 1000 0409 0001 0a02 0000 0700 8405     .@..............
200700e4:	0002 0002 0507 0205 0200 0900 0204 0200     ................
200700f4:	0608 0550 0507 0281 0200 0700 0205 0002     ..P.............
20070104:	0002 0000                                   ....

20070108 <udc_config>:
20070108:	0134 2007 009c 2007 0134 2007 011c 2007     4.. ... 4.. ... 
20070118:	0094 2007                                   ... 

2007011c <udc_device_qual>:
2007011c:	060a 0200 0000 4000 0001 0000               .......@....

20070128 <udi_apis>:
20070128:	0080 2007 006c 2007 01b0 2007               ... l.. ... 

20070134 <udc_device_desc>:
20070134:	0112 0200 0000 4000 03eb 2424 0100 0201     .......@..$$....
20070144:	0103 0000                                   ....

20070148 <udc_desc_fs>:
20070148:	0209 0062 0103 c000 0832 000b 0202 0102     ..b.....2.......
20070158:	0900 0004 0100 0202 0001 2405 1000 0401     ...........$....
20070168:	0224 0502 0624 0100 2405 0301 0701 8305     $...$....$......
20070178:	4003 1000 0409 0001 0a02 0000 0700 8405     .@..............
20070188:	4002 0000 0507 0205 0040 0900 0204 0200     .@......@.......
20070198:	0608 0550 0507 0281 0040 0700 0205 4002     ..P.....@......@
200701a8:	0000 0000                                   ....

200701ac <udi_msc_b_ack_trans>:
200701ac:	0001 0000                                   ....

200701b0 <udi_api_msc>:
200701b0:	5af1 0008 5ad5 0008 59dd 0008 4f69 0008     .Z...Z...Y..iO..
200701c0:	0000 0000                                   ....

200701c4 <udi_msc_inquiry_data.9439>:
200701c4:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
200701e4:	2e31 3030                                   1.00

200701e8 <udi_msc_csw>:
200701e8:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

200701f8 <udc_string_product_name>:
200701f8:	6554 706d 616c 6574 4220 616f 6472 0000     Template Board..

20070208 <udc_string_manufacturer_name>:
20070208:	6145 7973 702d 6968 0000 0000               Easy-phi....

20070214 <udc_string_desc>:
20070214:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20070234 <udc_string_desc_languageid>:
20070234:	0304 0409                                   ....

20070238 <g_interrupt_enabled>:
20070238:	0001 0000                                   ....

2007023c <SystemCoreClock>:
2007023c:	0900 003d                                   ..=.

20070240 <_impure_ptr>:
20070240:	0248 2007 0000 0000                         H.. ....

20070248 <impure_data>:
20070248:	0000 0000 0534 2007 059c 2007 0604 2007     ....4.. ... ... 
	...
2007027c:	bbbc 0008 0000 0000 0000 0000 0000 0000     ................
	...
200702f0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20070300:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20070670 <__malloc_av_>:
	...
20070678:	0670 2007 0670 2007 0678 2007 0678 2007     p.. p.. x.. x.. 
20070688:	0680 2007 0680 2007 0688 2007 0688 2007     ... ... ... ... 
20070698:	0690 2007 0690 2007 0698 2007 0698 2007     ... ... ... ... 
200706a8:	06a0 2007 06a0 2007 06a8 2007 06a8 2007     ... ... ... ... 
200706b8:	06b0 2007 06b0 2007 06b8 2007 06b8 2007     ... ... ... ... 
200706c8:	06c0 2007 06c0 2007 06c8 2007 06c8 2007     ... ... ... ... 
200706d8:	06d0 2007 06d0 2007 06d8 2007 06d8 2007     ... ... ... ... 
200706e8:	06e0 2007 06e0 2007 06e8 2007 06e8 2007     ... ... ... ... 
200706f8:	06f0 2007 06f0 2007 06f8 2007 06f8 2007     ... ... ... ... 
20070708:	0700 2007 0700 2007 0708 2007 0708 2007     ... ... ... ... 
20070718:	0710 2007 0710 2007 0718 2007 0718 2007     ... ... ... ... 
20070728:	0720 2007 0720 2007 0728 2007 0728 2007      ..  .. (.. (.. 
20070738:	0730 2007 0730 2007 0738 2007 0738 2007     0.. 0.. 8.. 8.. 
20070748:	0740 2007 0740 2007 0748 2007 0748 2007     @.. @.. H.. H.. 
20070758:	0750 2007 0750 2007 0758 2007 0758 2007     P.. P.. X.. X.. 
20070768:	0760 2007 0760 2007 0768 2007 0768 2007     `.. `.. h.. h.. 
20070778:	0770 2007 0770 2007 0778 2007 0778 2007     p.. p.. x.. x.. 
20070788:	0780 2007 0780 2007 0788 2007 0788 2007     ... ... ... ... 
20070798:	0790 2007 0790 2007 0798 2007 0798 2007     ... ... ... ... 
200707a8:	07a0 2007 07a0 2007 07a8 2007 07a8 2007     ... ... ... ... 
200707b8:	07b0 2007 07b0 2007 07b8 2007 07b8 2007     ... ... ... ... 
200707c8:	07c0 2007 07c0 2007 07c8 2007 07c8 2007     ... ... ... ... 
200707d8:	07d0 2007 07d0 2007 07d8 2007 07d8 2007     ... ... ... ... 
200707e8:	07e0 2007 07e0 2007 07e8 2007 07e8 2007     ... ... ... ... 
200707f8:	07f0 2007 07f0 2007 07f8 2007 07f8 2007     ... ... ... ... 
20070808:	0800 2007 0800 2007 0808 2007 0808 2007     ... ... ... ... 
20070818:	0810 2007 0810 2007 0818 2007 0818 2007     ... ... ... ... 
20070828:	0820 2007 0820 2007 0828 2007 0828 2007      ..  .. (.. (.. 
20070838:	0830 2007 0830 2007 0838 2007 0838 2007     0.. 0.. 8.. 8.. 
20070848:	0840 2007 0840 2007 0848 2007 0848 2007     @.. @.. H.. H.. 
20070858:	0850 2007 0850 2007 0858 2007 0858 2007     P.. P.. X.. X.. 
20070868:	0860 2007 0860 2007 0868 2007 0868 2007     `.. `.. h.. h.. 
20070878:	0870 2007 0870 2007 0878 2007 0878 2007     p.. p.. x.. x.. 
20070888:	0880 2007 0880 2007 0888 2007 0888 2007     ... ... ... ... 
20070898:	0890 2007 0890 2007 0898 2007 0898 2007     ... ... ... ... 
200708a8:	08a0 2007 08a0 2007 08a8 2007 08a8 2007     ... ... ... ... 
200708b8:	08b0 2007 08b0 2007 08b8 2007 08b8 2007     ... ... ... ... 
200708c8:	08c0 2007 08c0 2007 08c8 2007 08c8 2007     ... ... ... ... 
200708d8:	08d0 2007 08d0 2007 08d8 2007 08d8 2007     ... ... ... ... 
200708e8:	08e0 2007 08e0 2007 08e8 2007 08e8 2007     ... ... ... ... 
200708f8:	08f0 2007 08f0 2007 08f8 2007 08f8 2007     ... ... ... ... 
20070908:	0900 2007 0900 2007 0908 2007 0908 2007     ... ... ... ... 
20070918:	0910 2007 0910 2007 0918 2007 0918 2007     ... ... ... ... 
20070928:	0920 2007 0920 2007 0928 2007 0928 2007      ..  .. (.. (.. 
20070938:	0930 2007 0930 2007 0938 2007 0938 2007     0.. 0.. 8.. 8.. 
20070948:	0940 2007 0940 2007 0948 2007 0948 2007     @.. @.. H.. H.. 
20070958:	0950 2007 0950 2007 0958 2007 0958 2007     P.. P.. X.. X.. 
20070968:	0960 2007 0960 2007 0968 2007 0968 2007     `.. `.. h.. h.. 
20070978:	0970 2007 0970 2007 0978 2007 0978 2007     p.. p.. x.. x.. 
20070988:	0980 2007 0980 2007 0988 2007 0988 2007     ... ... ... ... 
20070998:	0990 2007 0990 2007 0998 2007 0998 2007     ... ... ... ... 
200709a8:	09a0 2007 09a0 2007 09a8 2007 09a8 2007     ... ... ... ... 
200709b8:	09b0 2007 09b0 2007 09b8 2007 09b8 2007     ... ... ... ... 
200709c8:	09c0 2007 09c0 2007 09c8 2007 09c8 2007     ... ... ... ... 
200709d8:	09d0 2007 09d0 2007 09d8 2007 09d8 2007     ... ... ... ... 
200709e8:	09e0 2007 09e0 2007 09e8 2007 09e8 2007     ... ... ... ... 
200709f8:	09f0 2007 09f0 2007 09f8 2007 09f8 2007     ... ... ... ... 
20070a08:	0a00 2007 0a00 2007 0a08 2007 0a08 2007     ... ... ... ... 
20070a18:	0a10 2007 0a10 2007 0a18 2007 0a18 2007     ... ... ... ... 
20070a28:	0a20 2007 0a20 2007 0a28 2007 0a28 2007      ..  .. (.. (.. 
20070a38:	0a30 2007 0a30 2007 0a38 2007 0a38 2007     0.. 0.. 8.. 8.. 
20070a48:	0a40 2007 0a40 2007 0a48 2007 0a48 2007     @.. @.. H.. H.. 
20070a58:	0a50 2007 0a50 2007 0a58 2007 0a58 2007     P.. P.. X.. X.. 
20070a68:	0a60 2007 0a60 2007 0a68 2007 0a68 2007     `.. `.. h.. h.. 

20070a78 <__malloc_sbrk_base>:
20070a78:	ffff ffff                                   ....

20070a7c <__malloc_trim_threshold>:
20070a7c:	0000 0002                                   ....
