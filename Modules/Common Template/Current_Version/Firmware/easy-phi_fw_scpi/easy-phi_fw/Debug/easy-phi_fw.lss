
easy-phi_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000de14  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008de14  0008de14  00015e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b84  20070000  0008de1c  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001124  20070b84  0008e9a0  00018b84  2**2
                  ALLOC
  4 .stack        00002000  20071ca8  0008fac4  00018b84  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00018b84  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00018bad  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002b217  00000000  00000000  00018c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000855d  00000000  00000000  00043e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00017e37  00000000  00000000  0004c392  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001848  00000000  00000000  000641d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001ae8  00000000  00000000  00065a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000211fd  00000000  00000000  00067500  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000284ca  00000000  00000000  000886fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00077be7  00000000  00000000  000b0bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003674  00000000  00000000  001287b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20073ca8 	.word	0x20073ca8
   80004:	00088455 	.word	0x00088455
   80008:	00088451 	.word	0x00088451
   8000c:	000838a5 	.word	0x000838a5
   80010:	00088451 	.word	0x00088451
   80014:	00088451 	.word	0x00088451
   80018:	00088451 	.word	0x00088451
	...
   8002c:	00088451 	.word	0x00088451
   80030:	00088451 	.word	0x00088451
   80034:	00000000 	.word	0x00000000
   80038:	00088451 	.word	0x00088451
   8003c:	00088451 	.word	0x00088451
   80040:	00088451 	.word	0x00088451
   80044:	00088451 	.word	0x00088451
   80048:	00088451 	.word	0x00088451
   8004c:	00088451 	.word	0x00088451
   80050:	00088451 	.word	0x00088451
   80054:	00088451 	.word	0x00088451
   80058:	00088451 	.word	0x00088451
   8005c:	00088451 	.word	0x00088451
   80060:	00088451 	.word	0x00088451
   80064:	00088451 	.word	0x00088451
   80068:	00000000 	.word	0x00000000
   8006c:	00086201 	.word	0x00086201
   80070:	0008621d 	.word	0x0008621d
   80074:	00086239 	.word	0x00086239
   80078:	00086255 	.word	0x00086255
	...
   80084:	00088451 	.word	0x00088451
   80088:	00088451 	.word	0x00088451
   8008c:	00088451 	.word	0x00088451
   80090:	00088451 	.word	0x00088451
   80094:	00088451 	.word	0x00088451
   80098:	00088451 	.word	0x00088451
   8009c:	00088451 	.word	0x00088451
   800a0:	00088451 	.word	0x00088451
   800a4:	00000000 	.word	0x00000000
   800a8:	00088451 	.word	0x00088451
   800ac:	00088451 	.word	0x00088451
   800b0:	00088451 	.word	0x00088451
   800b4:	00088451 	.word	0x00088451
   800b8:	00088451 	.word	0x00088451
   800bc:	00088451 	.word	0x00088451
   800c0:	00088451 	.word	0x00088451
   800c4:	00088451 	.word	0x00088451
   800c8:	00088451 	.word	0x00088451
   800cc:	00088451 	.word	0x00088451
   800d0:	00088451 	.word	0x00088451
   800d4:	00088451 	.word	0x00088451
   800d8:	00088451 	.word	0x00088451
   800dc:	00088451 	.word	0x00088451
   800e0:	00086d7d 	.word	0x00086d7d
   800e4:	00088451 	.word	0x00088451
   800e8:	00088451 	.word	0x00088451
   800ec:	00088451 	.word	0x00088451
   800f0:	00088451 	.word	0x00088451

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	0008de1c 	.word	0x0008de1c
   80110:	0008de1f 	.word	0x0008de1f
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	0008de1c 	.word	0x0008de1c
   8013c:	0008de1c 	.word	0x0008de1c
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070b84 	.word	0x20070b84
   80164:	00000000 	.word	0x00000000
   80168:	0008de1c 	.word	0x0008de1c

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	0008de1c 	.word	0x0008de1c
   80198:	20070b88 	.word	0x20070b88
   8019c:	0008de1c 	.word	0x0008de1c
   801a0:	00000000 	.word	0x00000000

000801a4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   801a4:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   801a6:	f640 33a4 	movw	r3, #2980	; 0xba4
   801aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   801ae:	681a      	ldr	r2, [r3, #0]
   801b0:	f892 4022 	ldrb.w	r4, [r2, #34]	; 0x22
   801b4:	f640 31aa 	movw	r1, #2986	; 0xbaa
   801b8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   801bc:	7808      	ldrb	r0, [r1, #0]
   801be:	6811      	ldr	r1, [r2, #0]
   801c0:	7c52      	ldrb	r2, [r2, #17]
   801c2:	1c23      	adds	r3, r4, #0
   801c4:	bf18      	it	ne
   801c6:	2301      	movne	r3, #1
   801c8:	f642 74f1 	movw	r4, #12273	; 0x2ff1
   801cc:	f2c0 0408 	movt	r4, #8
   801d0:	47a0      	blx	r4
   801d2:	bd10      	pop	{r4, pc}

000801d4 <sdio_cmd53>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd53(uint8_t rw_flag, uint8_t func_nb, uint32_t reg_addr,
		uint8_t inc_addr, uint32_t size, bool access_block)
{
   801d4:	b570      	push	{r4, r5, r6, lr}
   801d6:	b082      	sub	sp, #8
   801d8:	9c06      	ldr	r4, [sp, #24]
	Assert(size != 0);
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
   801da:	f249 3635 	movw	r6, #37685	; 0x9335
   801de:	f2c0 0601 	movt	r6, #1
   801e2:	f241 3535 	movw	r5, #4917	; 0x1335
   801e6:	f2c0 0501 	movt	r5, #1
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
   801ea:	ea4f 7101 	mov.w	r1, r1, lsl #28

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
			SDIO_CMD53_IO_R_BYTE_EXTENDED :
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
   801ee:	ea41 2242 	orr.w	r2, r1, r2, lsl #9
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
   801f2:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
			SDIO_CMD53_IO_R_BYTE_EXTENDED :
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
   801f6:	ea4f 51c4 	mov.w	r1, r4, lsl #23
   801fa:	ea4f 51d1 	mov.w	r1, r1, lsr #23
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
   801fe:	4311      	orrs	r1, r2
		uint8_t inc_addr, uint32_t size, bool access_block)
{
	Assert(size != 0);
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
   80200:	f89d 201c 	ldrb.w	r2, [sp, #28]
   80204:	9200      	str	r2, [sp, #0]
   80206:	2800      	cmp	r0, #0
   80208:	bf14      	ite	ne
   8020a:	4630      	movne	r0, r6
   8020c:	4628      	moveq	r0, r5
   8020e:	ea41 6183 	orr.w	r1, r1, r3, lsl #26
   80212:	b2a2      	uxth	r2, r4
   80214:	f04f 0301 	mov.w	r3, #1
   80218:	f243 141d 	movw	r4, #12573	; 0x311d
   8021c:	f2c0 0408 	movt	r4, #8
   80220:	47a0      	blx	r4
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
			| ((uint32_t)rw_flag << SDIO_CMD53_RW_FLAG),
			size, 1, access_block);
}
   80222:	b002      	add	sp, #8
   80224:	bd70      	pop	{r4, r5, r6, pc}
   80226:	bf00      	nop

00080228 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   80228:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   8022a:	f640 33aa 	movw	r3, #2986	; 0xbaa
   8022e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80232:	7818      	ldrb	r0, [r3, #0]
   80234:	b930      	cbnz	r0, 80244 <sd_mmc_deselect_slot+0x1c>
		driver_deselect_device(sd_mmc_slot_sel);
   80236:	f04f 0000 	mov.w	r0, #0
   8023a:	f243 0165 	movw	r1, #12389	; 0x3065
   8023e:	f2c0 0108 	movt	r1, #8
   80242:	4788      	blx	r1
   80244:	bd08      	pop	{r3, pc}
   80246:	bf00      	nop

00080248 <sdio_cmd52>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
   80248:	b510      	push	{r4, lr}
   8024a:	9c02      	ldr	r4, [sp, #8]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
   8024c:	ea4f 2242 	mov.w	r2, r2, lsl #9
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
   80250:	ea42 7101 	orr.w	r1, r2, r1, lsl #28
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
   80254:	ea41 70c0 	orr.w	r0, r1, r0, lsl #31
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
   80258:	ea40 63c3 	orr.w	r3, r0, r3, lsl #27
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
   8025c:	7822      	ldrb	r2, [r4, #0]
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
   8025e:	f241 3034 	movw	r0, #4916	; 0x1334
   80262:	ea43 0102 	orr.w	r1, r3, r2
   80266:	f243 038d 	movw	r3, #12429	; 0x308d
   8026a:	f2c0 0308 	movt	r3, #8
   8026e:	4798      	blx	r3
   80270:	b140      	cbz	r0, 80284 <sdio_cmd52+0x3c>
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
		return false;
	}
	*io_data = driver_get_response() & 0xFF;
   80272:	f243 01b5 	movw	r1, #12469	; 0x30b5
   80276:	f2c0 0108 	movt	r1, #8
   8027a:	4788      	blx	r1
   8027c:	7020      	strb	r0, [r4, #0]
	return true;
   8027e:	f04f 0001 	mov.w	r0, #1
   80282:	bd10      	pop	{r4, pc}
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
		return false;
   80284:	f04f 0000 	mov.w	r0, #0
	}
	*io_data = driver_get_response() & 0xFF;
	return true;
}
   80288:	bd10      	pop	{r4, pc}
   8028a:	bf00      	nop

0008028c <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
   8028c:	b508      	push	{r3, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
   8028e:	f640 33a4 	movw	r3, #2980	; 0xba4
   80292:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80296:	6818      	ldr	r0, [r3, #0]
   80298:	8981      	ldrh	r1, [r0, #12]
   8029a:	f641 3009 	movw	r0, #6921	; 0x1b09
   8029e:	ea4f 4101 	mov.w	r1, r1, lsl #16
   802a2:	f243 028d 	movw	r2, #12429	; 0x308d
   802a6:	f2c0 0208 	movt	r2, #8
   802aa:	4790      	blx	r2
   802ac:	b170      	cbz	r0, 802cc <sd_mmc_cmd9_mci+0x40>
		return false;
	}
	driver_get_response_128(sd_mmc_card->csd);
   802ae:	f640 33a4 	movw	r3, #2980	; 0xba4
   802b2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   802b6:	6818      	ldr	r0, [r3, #0]
   802b8:	f100 0012 	add.w	r0, r0, #18
   802bc:	f243 01bd 	movw	r1, #12477	; 0x30bd
   802c0:	f2c0 0108 	movt	r1, #8
   802c4:	4788      	blx	r1
	return true;
   802c6:	f04f 0001 	mov.w	r0, #1
   802ca:	bd08      	pop	{r3, pc}
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   802cc:	f04f 0000 	mov.w	r0, #0
	}
	driver_get_response_128(sd_mmc_card->csd);
	return true;
}
   802d0:	bd08      	pop	{r3, pc}
   802d2:	bf00      	nop

000802d4 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   802d4:	b510      	push	{r4, lr}
	if (slot >= SD_MMC_MEM_CNT) {
   802d6:	2800      	cmp	r0, #0
   802d8:	f040 80a8 	bne.w	8042c <sd_mmc_select_slot+0x158>
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
   802dc:	f240 030c 	movw	r3, #12
   802e0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   802e4:	6898      	ldr	r0, [r3, #8]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   802e6:	ea4f 1250 	mov.w	r2, r0, lsr #5
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   802ea:	f502 1100 	add.w	r1, r2, #2097152	; 0x200000
   802ee:	f201 7307 	addw	r3, r1, #1799	; 0x707
   802f2:	ea4f 2243 	mov.w	r2, r3, lsl #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   802f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   802f8:	f000 001f 	and.w	r0, r0, #31
   802fc:	f04f 0101 	mov.w	r1, #1
   80300:	fa01 f300 	lsl.w	r3, r1, r0
   80304:	4213      	tst	r3, r2
   80306:	d01d      	beq.n	80344 <sd_mmc_select_slot+0x70>
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
   80308:	f240 020c 	movw	r2, #12
   8030c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80310:	7b90      	ldrb	r0, [r2, #14]
   80312:	4288      	cmp	r0, r1
   80314:	d10c      	bne.n	80330 <sd_mmc_select_slot+0x5c>
	return false;
}

static inline void SD_MMC_STOP_TIMEOUT(void)
{
	if (sd_mmc_sam_systick_used) {
   80316:	f640 33a2 	movw	r3, #2978	; 0xba2
   8031a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8031e:	7819      	ldrb	r1, [r3, #0]
   80320:	b131      	cbz	r1, 80330 <sd_mmc_select_slot+0x5c>
		SysTick->CTRL = 0;
   80322:	f24e 0010 	movw	r0, #57360	; 0xe010
   80326:	f2ce 0000 	movt	r0, #57344	; 0xe000
   8032a:	f04f 0200 	mov.w	r2, #0
   8032e:	6002      	str	r2, [r0, #0]
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
			SD_MMC_STOP_TIMEOUT();
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   80330:	f240 030c 	movw	r3, #12
   80334:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80338:	f04f 0104 	mov.w	r1, #4
   8033c:	7399      	strb	r1, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
   8033e:	f04f 0002 	mov.w	r0, #2
   80342:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
   80344:	f240 020c 	movw	r2, #12
   80348:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8034c:	7b90      	ldrb	r0, [r2, #14]
   8034e:	2804      	cmp	r0, #4
   80350:	d131      	bne.n	803b6 <sd_mmc_select_slot+0xe2>
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
   80352:	f240 010c 	movw	r1, #12
   80356:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8035a:	f04f 0201 	mov.w	r2, #1
   8035e:	738a      	strb	r2, [r1, #14]
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
   80360:	f24e 0310 	movw	r3, #57360	; 0xe010
   80364:	f2ce 0300 	movt	r3, #57344	; 0xe000
   80368:	6818      	ldr	r0, [r3, #0]
   8036a:	b988      	cbnz	r0, 80390 <sd_mmc_select_slot+0xbc>
		sd_mmc_sam_systick_used = true;
   8036c:	f640 30a2 	movw	r0, #2978	; 0xba2
   80370:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80374:	7002      	strb	r2, [r0, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
   80376:	f24e 0310 	movw	r3, #57360	; 0xe010
   8037a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8037e:	f243 71a0 	movw	r1, #14240	; 0x37a0
   80382:	f2c0 01a0 	movt	r1, #160	; 0xa0
   80386:	6059      	str	r1, [r3, #4]
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
   80388:	601a      	str	r2, [r3, #0]
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
   8038a:	f04f 0002 	mov.w	r0, #2
   8038e:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = true;
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
	} else {
		sd_mmc_sam_systick_used = false;
   80390:	f640 31a2 	movw	r1, #2978	; 0xba2
   80394:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80398:	f04f 0200 	mov.w	r2, #0
   8039c:	700a      	strb	r2, [r1, #0]
#ifdef FREERTOS_USED
		// Note: the define INCLUDE_vTaskDelay must be set to one
		// in FreeRTOSConfig.h file.
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
   8039e:	f648 5080 	movw	r0, #36224	; 0x8d80
   803a2:	f2c0 005b 	movt	r0, #91	; 0x5b
   803a6:	f240 0301 	movw	r3, #1
   803aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   803ae:	4798      	blx	r3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
   803b0:	f04f 0002 	mov.w	r0, #2
   803b4:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
   803b6:	2801      	cmp	r0, #1
   803b8:	d116      	bne.n	803e8 <sd_mmc_select_slot+0x114>
	}
}

static inline bool SD_MMC_IS_TIMEOUT(void)
{
	if (!sd_mmc_sam_systick_used) {
   803ba:	f640 31a2 	movw	r1, #2978	; 0xba2
   803be:	f2c2 0107 	movt	r1, #8199	; 0x2007
   803c2:	780b      	ldrb	r3, [r1, #0]
   803c4:	2b00      	cmp	r3, #0
   803c6:	d03a      	beq.n	8043e <sd_mmc_select_slot+0x16a>
		return (xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE);
#else
		return true;
#endif
	}
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
   803c8:	f24e 0210 	movw	r2, #57360	; 0xe010
   803cc:	f2ce 0200 	movt	r2, #57344	; 0xe000
   803d0:	6810      	ldr	r0, [r2, #0]
   803d2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   803d6:	d02c      	beq.n	80432 <sd_mmc_select_slot+0x15e>
		SysTick->CTRL = 0;
   803d8:	f24e 0110 	movw	r1, #57360	; 0xe010
   803dc:	f2ce 0100 	movt	r1, #57344	; 0xe000
   803e0:	f04f 0300 	mov.w	r3, #0
   803e4:	600b      	str	r3, [r1, #0]
   803e6:	e02a      	b.n	8043e <sd_mmc_select_slot+0x16a>
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
   803e8:	f240 000c 	movw	r0, #12
   803ec:	f2c2 0007 	movt	r0, #8199	; 0x2007
   803f0:	7b81      	ldrb	r1, [r0, #14]
   803f2:	2903      	cmp	r1, #3
   803f4:	d020      	beq.n	80438 <sd_mmc_select_slot+0x164>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   803f6:	f640 34aa 	movw	r4, #2986	; 0xbaa
   803fa:	f2c2 0407 	movt	r4, #8199	; 0x2007
   803fe:	f04f 0300 	mov.w	r3, #0
   80402:	7023      	strb	r3, [r4, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   80404:	f240 040c 	movw	r4, #12
   80408:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8040c:	f640 32a4 	movw	r2, #2980	; 0xba4
   80410:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80414:	6014      	str	r4, [r2, #0]
	sd_mmc_configure_slot();
   80416:	f240 10a5 	movw	r0, #421	; 0x1a5
   8041a:	f2c0 0008 	movt	r0, #8
   8041e:	4780      	blx	r0
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   80420:	7ba0      	ldrb	r0, [r4, #14]

	// Initialize interface
	sd_mmc_slot_sel = slot;
	sd_mmc_card = &sd_mmc_cards[slot];
	sd_mmc_configure_slot();
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   80422:	2802      	cmp	r0, #2
   80424:	bf14      	ite	ne
   80426:	2000      	movne	r0, #0
   80428:	2001      	moveq	r0, #1
   8042a:	bd10      	pop	{r4, pc}
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
		return SD_MMC_ERR_SLOT;
   8042c:	f04f 0004 	mov.w	r0, #4
   80430:	bd10      	pop	{r4, pc}
		return SD_MMC_ERR_NO_CARD;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
   80432:	f04f 0002 	mov.w	r0, #2
   80436:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
   80438:	f04f 0003 	mov.w	r0, #3
   8043c:	bd10      	pop	{r4, pc}
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   8043e:	f240 000c 	movw	r0, #12
   80442:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80446:	f04f 0202 	mov.w	r2, #2
   8044a:	7382      	strb	r2, [r0, #14]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   8044c:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   80450:	f2c0 0106 	movt	r1, #6
   80454:	6001      	str	r1, [r0, #0]
		sd_mmc_cards[slot].bus_width = 1;
   80456:	f04f 0301 	mov.w	r3, #1
   8045a:	7443      	strb	r3, [r0, #17]
		sd_mmc_cards[slot].high_speed = 0;
   8045c:	f04f 0200 	mov.w	r2, #0
   80460:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
   80464:	e7c0      	b.n	803e8 <sd_mmc_select_slot+0x114>
   80466:	bf00      	nop

00080468 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   80468:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   8046a:	f240 030c 	movw	r3, #12
   8046e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80472:	f04f 0204 	mov.w	r2, #4
   80476:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   80478:	f640 30aa 	movw	r0, #2986	; 0xbaa
   8047c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80480:	f04f 01ff 	mov.w	r1, #255	; 0xff
   80484:	7001      	strb	r1, [r0, #0]
	driver_init();
   80486:	f642 73a5 	movw	r3, #12197	; 0x2fa5
   8048a:	f2c0 0308 	movt	r3, #8
   8048e:	4798      	blx	r3
   80490:	bd08      	pop	{r3, pc}
   80492:	bf00      	nop

00080494 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   80494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80498:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   8049a:	f240 23d5 	movw	r3, #725	; 0x2d5
   8049e:	f2c0 0308 	movt	r3, #8
   804a2:	4798      	blx	r3
   804a4:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   804a6:	2801      	cmp	r0, #1
   804a8:	d006      	beq.n	804b8 <sd_mmc_check+0x24>
		sd_mmc_deselect_slot();
   804aa:	f240 2129 	movw	r1, #553	; 0x229
   804ae:	f2c0 0108 	movt	r1, #8
   804b2:	4788      	blx	r1
		return sd_mmc_err;
   804b4:	f000 bd5d 	b.w	80f72 <sd_mmc_check+0xade>
static bool sd_mmc_mci_card_init(void)
{
	uint8_t v2 = 0;

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   804b8:	f640 30a4 	movw	r0, #2980	; 0xba4
   804bc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   804c0:	6801      	ldr	r1, [r0, #0]
   804c2:	f04f 0201 	mov.w	r2, #1
   804c6:	73ca      	strb	r2, [r1, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   804c8:	f04f 0500 	mov.w	r5, #0
   804cc:	740d      	strb	r5, [r1, #16]
	sd_mmc_card->rca = 0;
   804ce:	818d      	strh	r5, [r1, #12]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   804d0:	f243 0369 	movw	r3, #12393	; 0x3069
   804d4:	f2c0 0308 	movt	r3, #8
   804d8:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
   804da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   804de:	4629      	mov	r1, r5
   804e0:	f243 028d 	movw	r2, #12429	; 0x308d
   804e4:	f2c0 0208 	movt	r2, #8
   804e8:	4790      	blx	r2
   804ea:	2800      	cmp	r0, #0
   804ec:	f000 84c1 	beq.w	80e72 <sd_mmc_check+0x9de>
{
	uint32_t resp;

	*v2 = 0;
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   804f0:	f245 5008 	movw	r0, #21768	; 0x5508
   804f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   804f8:	f243 038d 	movw	r3, #12429	; 0x308d
   804fc:	f2c0 0308 	movt	r3, #8
   80500:	4798      	blx	r3
   80502:	2800      	cmp	r0, #0
   80504:	f000 84c3 	beq.w	80e8e <sd_mmc_check+0x9fa>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
	}
	// Check R7 response
	resp = driver_get_response();
   80508:	f243 00b5 	movw	r0, #12469	; 0x30b5
   8050c:	f2c0 0008 	movt	r0, #8
   80510:	4780      	blx	r0
	if (resp == 0xFFFFFFFF) {
   80512:	f1b0 3fff 	cmp.w	r0, #4294967295
   80516:	f000 84bd 	beq.w	80e94 <sd_mmc_check+0xa00>
		// No compliance R7 value
		return true; // It is not a V2
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   8051a:	ea4f 5100 	mov.w	r1, r0, lsl #20
   8051e:	ea4f 5211 	mov.w	r2, r1, lsr #20
   80522:	f5b2 7fd5 	cmp.w	r2, #426	; 0x1aa
   80526:	f040 84a4 	bne.w	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   8052a:	f04f 0601 	mov.w	r6, #1
   8052e:	f000 bcb3 	b.w	80e98 <sd_mmc_check+0xa04>
	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
		sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
		return true; // No error but card type not updated
	}
	resp = driver_get_response();
   80532:	f243 00b5 	movw	r0, #12469	; 0x30b5
   80536:	f2c0 0008 	movt	r0, #8
   8053a:	4780      	blx	r0
   8053c:	4601      	mov	r1, r0
	if ((resp & OCR_SDIO_NF) == 0) {
   8053e:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
   80542:	f000 84b5 	beq.w	80eb0 <sd_mmc_check+0xa1c>
   80546:	f241 3989 	movw	r9, #5001	; 0x1389
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   8054a:	f244 5705 	movw	r7, #17669	; 0x4505
   8054e:	f243 058d 	movw	r5, #12429	; 0x308d
   80552:	f2c0 0508 	movt	r5, #8
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80556:	f243 08b5 	movw	r8, #12469	; 0x30b5
   8055a:	f2c0 0808 	movt	r8, #8
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   8055e:	4638      	mov	r0, r7
   80560:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   80564:	47a8      	blx	r5
   80566:	2800      	cmp	r0, #0
   80568:	f000 8483 	beq.w	80e72 <sd_mmc_check+0x9de>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   8056c:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   8056e:	1e01      	subs	r1, r0, #0
   80570:	db0a      	blt.n	80588 <sd_mmc_check+0xf4>
   80572:	f109 39ff 	add.w	r9, r9, #4294967295
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   80576:	4638      	mov	r0, r7
   80578:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   8057c:	47a8      	blx	r5
   8057e:	2800      	cmp	r0, #0
   80580:	f040 8539 	bne.w	80ff6 <sd_mmc_check+0xb62>
   80584:	f000 bc75 	b.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD5 Timeout on busy\n\r", __func__);
			return false;
		}
	}
	// Update card type at the end of busy
	if ((resp & OCR_SDIO_MP) > 0) {
   80588:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
   8058c:	f640 33a4 	movw	r3, #2980	; 0xba4
   80590:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80594:	6818      	ldr	r0, [r3, #0]
   80596:	bf14      	ite	ne
   80598:	2205      	movne	r2, #5
	} else {
		sd_mmc_card->type = CARD_TYPE_SDIO;
   8059a:	2204      	moveq	r2, #4
   8059c:	73c2      	strb	r2, [r0, #15]
   8059e:	f000 bc87 	b.w	80eb0 <sd_mmc_check+0xa1c>
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   805a2:	f241 1737 	movw	r7, #4407	; 0x1137
   805a6:	f04f 0800 	mov.w	r8, #0
   805aa:	f243 058d 	movw	r5, #12429	; 0x308d
   805ae:	f2c0 0508 	movt	r5, #8
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   805b2:	f44f 4900 	mov.w	r9, #32768	; 0x8000
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   805b6:	f243 0ab5 	movw	sl, #12469	; 0x30b5
   805ba:	f2c0 0a08 	movt	sl, #8
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   805be:	4638      	mov	r0, r7
   805c0:	4641      	mov	r1, r8
   805c2:	47a8      	blx	r5
   805c4:	2800      	cmp	r0, #0
   805c6:	f040 84ea 	bne.w	80f9e <sd_mmc_check+0xb0a>
   805ca:	f000 bc7d 	b.w	80ec8 <sd_mmc_check+0xa34>
   805ce:	4638      	mov	r0, r7
   805d0:	4641      	mov	r1, r8
   805d2:	47a8      	blx	r5
   805d4:	2800      	cmp	r0, #0
   805d6:	f000 8477 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   805da:	4649      	mov	r1, r9
   805dc:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   805e0:	f244 5029 	movw	r0, #17705	; 0x4529
   805e4:	2e00      	cmp	r6, #0
   805e6:	bf08      	it	eq
   805e8:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   805ec:	47a8      	blx	r5
   805ee:	2800      	cmp	r0, #0
   805f0:	f000 846a 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   805f4:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   805f6:	2800      	cmp	r0, #0
   805f8:	da0e      	bge.n	80618 <sd_mmc_check+0x184>
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
   805fa:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   805fe:	f000 848f 	beq.w	80f20 <sd_mmc_check+0xa8c>
				sd_mmc_card->type |= CARD_TYPE_HC;
   80602:	f640 30a4 	movw	r0, #2980	; 0xba4
   80606:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8060a:	6801      	ldr	r1, [r0, #0]
   8060c:	7bca      	ldrb	r2, [r1, #15]
   8060e:	f042 0308 	orr.w	r3, r2, #8
   80612:	73cb      	strb	r3, [r1, #15]
   80614:	f000 bc84 	b.w	80f20 <sd_mmc_check+0xa8c>
   80618:	f10b 3bff 	add.w	fp, fp, #4294967295
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   8061c:	4638      	mov	r0, r7
   8061e:	4641      	mov	r1, r8
   80620:	47a8      	blx	r5
   80622:	2800      	cmp	r0, #0
   80624:	f040 84d1 	bne.w	80fca <sd_mmc_check+0xb36>
   80628:	f000 bc4e 	b.w	80ec8 <sd_mmc_check+0xa34>
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   8062c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   80630:	f2c4 051f 	movt	r5, #16415	; 0x401f
   80634:	f244 5701 	movw	r7, #17665	; 0x4501
   80638:	f243 088d 	movw	r8, #12429	; 0x308d
   8063c:	f2c0 0808 	movt	r8, #8
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80640:	f243 09b5 	movw	r9, #12469	; 0x30b5
   80644:	f2c0 0908 	movt	r9, #8
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   80648:	4638      	mov	r0, r7
   8064a:	4629      	mov	r1, r5
   8064c:	47c0      	blx	r8
   8064e:	2800      	cmp	r0, #0
   80650:	f040 8493 	bne.w	80f7a <sd_mmc_check+0xae6>
   80654:	f000 bc79 	b.w	80f4a <sd_mmc_check+0xab6>
   80658:	4638      	mov	r0, r7
   8065a:	4629      	mov	r1, r5
   8065c:	47c0      	blx	r8
   8065e:	2800      	cmp	r0, #0
   80660:	f000 8473 	beq.w	80f4a <sd_mmc_check+0xab6>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80664:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80666:	2800      	cmp	r0, #0
   80668:	da0d      	bge.n	80686 <sd_mmc_check+0x1f2>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
   8066a:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
   8066e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   80672:	f040 8460 	bne.w	80f36 <sd_mmc_check+0xaa2>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
   80676:	49a6      	ldr	r1, [pc, #664]	; (80910 <sd_mmc_check+0x47c>)
   80678:	680b      	ldr	r3, [r1, #0]
   8067a:	7bda      	ldrb	r2, [r3, #15]
   8067c:	f042 0008 	orr.w	r0, r2, #8
   80680:	73d8      	strb	r0, [r3, #15]
   80682:	f000 bc58 	b.w	80f36 <sd_mmc_check+0xaa2>
   80686:	f106 36ff 	add.w	r6, r6, #4294967295
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   8068a:	4638      	mov	r0, r7
   8068c:	4629      	mov	r1, r5
   8068e:	47c0      	blx	r8
   80690:	2800      	cmp	r0, #0
   80692:	f040 847c 	bne.w	80f8e <sd_mmc_check+0xafa>
   80696:	f000 bc58 	b.w	80f4a <sd_mmc_check+0xab6>
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
		return false;
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
   8069a:	499d      	ldr	r1, [pc, #628]	; (80910 <sd_mmc_check+0x47c>)
   8069c:	6808      	ldr	r0, [r1, #0]
   8069e:	f04f 0201 	mov.w	r2, #1
   806a2:	8182      	strh	r2, [r0, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
   806a4:	f241 1003 	movw	r0, #4355	; 0x1103
   806a8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   806ac:	4b99      	ldr	r3, [pc, #612]	; (80914 <sd_mmc_check+0x480>)
   806ae:	4798      	blx	r3
   806b0:	2800      	cmp	r0, #0
   806b2:	f000 8121 	beq.w	808f8 <sd_mmc_check+0x464>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
   806b6:	4998      	ldr	r1, [pc, #608]	; (80918 <sd_mmc_check+0x484>)
   806b8:	4788      	blx	r1
   806ba:	2800      	cmp	r0, #0
   806bc:	f000 811f 	beq.w	808fe <sd_mmc_check+0x46a>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   806c0:	4893      	ldr	r0, [pc, #588]	; (80910 <sd_mmc_check+0x47c>)
   806c2:	6803      	ldr	r3, [r0, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   806c4:	7c9a      	ldrb	r2, [r3, #18]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   806c6:	f3c2 0183 	ubfx	r1, r2, #2, #4
   806ca:	f101 30ff 	add.w	r0, r1, #4294967295
   806ce:	2803      	cmp	r0, #3
   806d0:	d803      	bhi.n	806da <sd_mmc_check+0x246>
   806d2:	e8df f000 	tbb	[pc, r0]
   806d6:	0a06      	.short	0x0a06
   806d8:	120e      	.short	0x120e
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   806da:	f04f 0112 	mov.w	r1, #18
   806de:	7419      	strb	r1, [r3, #16]
   806e0:	e00e      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   806e2:	f04f 0214 	mov.w	r2, #20
   806e6:	741a      	strb	r2, [r3, #16]
   806e8:	e00a      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   806ea:	f04f 0022 	mov.w	r0, #34	; 0x22
   806ee:	7418      	strb	r0, [r3, #16]
   806f0:	e006      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   806f2:	f04f 0130 	mov.w	r1, #48	; 0x30
   806f6:	7419      	strb	r1, [r3, #16]
   806f8:	e002      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   806fa:	f04f 0240 	mov.w	r2, #64	; 0x40
   806fe:	741a      	strb	r2, [r3, #16]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80700:	7d5a      	ldrb	r2, [r3, #21]
		break;
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   80702:	f002 0007 	and.w	r0, r2, #7
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80706:	4985      	ldr	r1, [pc, #532]	; (8091c <sd_mmc_check+0x488>)
   80708:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   8070c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80710:	fb00 f101 	mul.w	r1, r0, r1
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   80714:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   80718:	4881      	ldr	r0, [pc, #516]	; (80920 <sd_mmc_check+0x48c>)
   8071a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   8071e:	fb02 f101 	mul.w	r1, r2, r1
   80722:	6019      	str	r1, [r3, #0]
   80724:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80726:	7e18      	ldrb	r0, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80728:	7e5a      	ldrb	r2, [r3, #25]
   8072a:	ea4f 0282 	mov.w	r2, r2, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   8072e:	ea42 2080 	orr.w	r0, r2, r0, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80732:	ea40 11a1 	orr.w	r1, r0, r1, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
   80736:	ea4f 5201 	mov.w	r2, r1, lsl #20
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   8073a:	ea4f 5112 	mov.w	r1, r2, lsr #20
   8073e:	f512 1f80 	cmn.w	r2, #1048576	; 0x100000
   80742:	d015      	beq.n	80770 <sd_mmc_check+0x2dc>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80744:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80746:	7eda      	ldrb	r2, [r3, #27]
   80748:	ea4f 0242 	mov.w	r2, r2, lsl #1
   8074c:	ea42 10e0 	orr.w	r0, r2, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   80750:	f101 0101 	add.w	r1, r1, #1
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80754:	f000 0207 	and.w	r2, r0, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   80758:	f102 0202 	add.w	r2, r2, #2
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   8075c:	fa01 f102 	lsl.w	r1, r1, r2
   80760:	7dd8      	ldrb	r0, [r3, #23]
   80762:	f000 020f 	and.w	r2, r0, #15
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80766:	fa01 f102 	lsl.w	r1, r1, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   8076a:	ea4f 2091 	mov.w	r0, r1, lsr #10
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   8076e:	6058      	str	r0, [r3, #4]
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
   80770:	899b      	ldrh	r3, [r3, #12]
	if (!sd_mmc_cmd9_mci()) {
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
   80772:	f243 1007 	movw	r0, #12551	; 0x3107
   80776:	ea4f 4103 	mov.w	r1, r3, lsl #16
   8077a:	4a66      	ldr	r2, [pc, #408]	; (80914 <sd_mmc_check+0x480>)
   8077c:	4790      	blx	r2
   8077e:	2800      	cmp	r0, #0
   80780:	f000 80c0 	beq.w	80904 <sd_mmc_check+0x470>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   80784:	4d62      	ldr	r5, [pc, #392]	; (80910 <sd_mmc_check+0x47c>)
   80786:	6829      	ldr	r1, [r5, #0]
   80788:	7c08      	ldrb	r0, [r1, #16]
   8078a:	283f      	cmp	r0, #63	; 0x3f
   8078c:	f240 809c 	bls.w	808c8 <sd_mmc_check+0x434>
{
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   80790:	f04f 0100 	mov.w	r1, #0
   80794:	9100      	str	r1, [sp, #0]
   80796:	f241 1008 	movw	r0, #4360	; 0x1108
   8079a:	f2c0 0008 	movt	r0, #8
   8079e:	f44f 7200 	mov.w	r2, #512	; 0x200
   807a2:	f04f 0301 	mov.w	r3, #1
   807a6:	4d5f      	ldr	r5, [pc, #380]	; (80924 <sd_mmc_check+0x490>)
   807a8:	47a8      	blx	r5
   807aa:	2800      	cmp	r0, #0
   807ac:	f000 83d0 	beq.w	80f50 <sd_mmc_check+0xabc>
   807b0:	f04f 0500 	mov.w	r5, #0
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
		if (!driver_read_word(&ext_csd)) {
   807b4:	4e5c      	ldr	r6, [pc, #368]	; (80928 <sd_mmc_check+0x494>)
   807b6:	a802      	add	r0, sp, #8
   807b8:	47b0      	blx	r6
   807ba:	2800      	cmp	r0, #0
   807bc:	f000 83c8 	beq.w	80f50 <sd_mmc_check+0xabc>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   807c0:	f105 0501 	add.w	r5, r5, #1
   807c4:	b2ad      	uxth	r5, r5
   807c6:	2d32      	cmp	r5, #50	; 0x32
   807c8:	d1f5      	bne.n	807b6 <sd_mmc_check+0x322>
		if (!driver_read_word(&ext_csd)) {
			return false;
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   807ca:	9e02      	ldr	r6, [sp, #8]
   807cc:	f006 0302 	and.w	r3, r6, #2
   807d0:	b2de      	uxtb	r6, r3
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   807d2:	4a4f      	ldr	r2, [pc, #316]	; (80910 <sd_mmc_check+0x47c>)
   807d4:	6810      	ldr	r0, [r2, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   807d6:	7e87      	ldrb	r7, [r0, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807d8:	7e01      	ldrb	r1, [r0, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   807da:	7e43      	ldrb	r3, [r0, #25]
   807dc:	ea4f 0283 	mov.w	r2, r3, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807e0:	ea42 2081 	orr.w	r0, r2, r1, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807e4:	ea40 17a7 	orr.w	r7, r0, r7, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
   807e8:	ea4f 5107 	mov.w	r1, r7, lsl #20
   807ec:	f511 1f80 	cmn.w	r1, #1048576	; 0x100000
   807f0:	d11a      	bne.n	80828 <sd_mmc_check+0x394>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
			if (!driver_read_word(&sec_count)) {
   807f2:	4f4d      	ldr	r7, [pc, #308]	; (80928 <sd_mmc_check+0x494>)
   807f4:	a803      	add	r0, sp, #12
   807f6:	47b8      	blx	r7
   807f8:	2800      	cmp	r0, #0
   807fa:	f000 83a9 	beq.w	80f50 <sd_mmc_check+0xabc>
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   807fe:	f105 0501 	add.w	r5, r5, #1
   80802:	b2ad      	uxth	r5, r5
   80804:	2d35      	cmp	r5, #53	; 0x35
   80806:	d9f5      	bls.n	807f4 <sd_mmc_check+0x360>
			if (!driver_read_word(&sec_count)) {
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   80808:	4b41      	ldr	r3, [pc, #260]	; (80910 <sd_mmc_check+0x47c>)
   8080a:	681a      	ldr	r2, [r3, #0]
   8080c:	9803      	ldr	r0, [sp, #12]
   8080e:	ea4f 0750 	mov.w	r7, r0, lsr #1
   80812:	6057      	str	r7, [r2, #4]
   80814:	e008      	b.n	80828 <sd_mmc_check+0x394>
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
		if (!driver_read_word(&sec_count)) {
   80816:	a803      	add	r0, sp, #12
   80818:	47b8      	blx	r7
   8081a:	2800      	cmp	r0, #0
   8081c:	f000 8398 	beq.w	80f50 <sd_mmc_check+0xabc>
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   80820:	f105 0501 	add.w	r5, r5, #1
   80824:	b2ad      	uxth	r5, r5
   80826:	e000      	b.n	8082a <sd_mmc_check+0x396>
		if (!driver_read_word(&sec_count)) {
   80828:	4f3f      	ldr	r7, [pc, #252]	; (80928 <sd_mmc_check+0x494>)
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   8082a:	2d7f      	cmp	r5, #127	; 0x7f
   8082c:	d9f3      	bls.n	80816 <sd_mmc_check+0x382>
   8082e:	e392      	b.n	80f56 <sd_mmc_check+0xac2>
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
   80830:	4d3e      	ldr	r5, [pc, #248]	; (8092c <sd_mmc_check+0x498>)
   80832:	7828      	ldrb	r0, [r5, #0]
   80834:	4a3e      	ldr	r2, [pc, #248]	; (80930 <sd_mmc_check+0x49c>)
   80836:	4790      	blx	r2
   80838:	4605      	mov	r5, r0
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
	uint32_t arg;

	switch (bus_width) {
   8083a:	2804      	cmp	r0, #4
   8083c:	d00b      	beq.n	80856 <sd_mmc_check+0x3c2>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
   8083e:	f44f 7100 	mov.w	r1, #512	; 0x200
   80842:	f2c0 11b7 	movt	r1, #439	; 0x1b7
   80846:	f04f 0000 	mov.w	r0, #0
   8084a:	f2c0 10b7 	movt	r0, #439	; 0x1b7
   8084e:	2d08      	cmp	r5, #8
   80850:	bf18      	it	ne
   80852:	4601      	movne	r1, r0
   80854:	e003      	b.n	8085e <sd_mmc_check+0x3ca>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
   80856:	f44f 7180 	mov.w	r1, #256	; 0x100
   8085a:	f2c0 11b7 	movt	r1, #439	; 0x1b7
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
   8085e:	f243 1006 	movw	r0, #12550	; 0x3106
   80862:	4b2c      	ldr	r3, [pc, #176]	; (80914 <sd_mmc_check+0x480>)
   80864:	4798      	blx	r3
   80866:	2800      	cmp	r0, #0
   80868:	f000 837d 	beq.w	80f66 <sd_mmc_check+0xad2>
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   8086c:	4931      	ldr	r1, [pc, #196]	; (80934 <sd_mmc_check+0x4a0>)
   8086e:	4788      	blx	r1
   80870:	f010 0f80 	tst.w	r0, #128	; 0x80
   80874:	f040 8377 	bne.w	80f66 <sd_mmc_check+0xad2>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->bus_width = bus_width;
   80878:	4a25      	ldr	r2, [pc, #148]	; (80910 <sd_mmc_check+0x47c>)
   8087a:	6810      	ldr	r0, [r2, #0]
   8087c:	7445      	strb	r5, [r0, #17]
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
   8087e:	4b2e      	ldr	r3, [pc, #184]	; (80938 <sd_mmc_check+0x4a4>)
   80880:	4798      	blx	r3
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
   80882:	492e      	ldr	r1, [pc, #184]	; (8093c <sd_mmc_check+0x4a8>)
   80884:	4788      	blx	r1
   80886:	b338      	cbz	r0, 808d8 <sd_mmc_check+0x444>
   80888:	b336      	cbz	r6, 808d8 <sd_mmc_check+0x444>
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
   8088a:	f243 1006 	movw	r0, #12550	; 0x3106
   8088e:	f44f 7180 	mov.w	r1, #256	; 0x100
   80892:	f2c0 31b9 	movt	r1, #953	; 0x3b9
   80896:	4a1f      	ldr	r2, [pc, #124]	; (80914 <sd_mmc_check+0x480>)
   80898:	4790      	blx	r2
   8089a:	2800      	cmp	r0, #0
   8089c:	f000 8366 	beq.w	80f6c <sd_mmc_check+0xad8>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   808a0:	4824      	ldr	r0, [pc, #144]	; (80934 <sd_mmc_check+0x4a0>)
   808a2:	4780      	blx	r0
   808a4:	f010 0f80 	tst.w	r0, #128	; 0x80
   808a8:	f040 8360 	bne.w	80f6c <sd_mmc_check+0xad8>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->high_speed = 1;
   808ac:	4e18      	ldr	r6, [pc, #96]	; (80910 <sd_mmc_check+0x47c>)
   808ae:	6837      	ldr	r7, [r6, #0]
   808b0:	f04f 0501 	mov.w	r5, #1
   808b4:	f887 5022 	strb.w	r5, [r7, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
   808b8:	f44f 43ea 	mov.w	r3, #29952	; 0x7500
   808bc:	f2c0 3319 	movt	r3, #793	; 0x319
   808c0:	603b      	str	r3, [r7, #0]
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
   808c2:	491d      	ldr	r1, [pc, #116]	; (80938 <sd_mmc_check+0x4a4>)
   808c4:	4788      	blx	r1
   808c6:	e007      	b.n	808d8 <sd_mmc_check+0x444>
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
   808c8:	4f1b      	ldr	r7, [pc, #108]	; (80938 <sd_mmc_check+0x4a4>)
   808ca:	47b8      	blx	r7
   808cc:	e004      	b.n	808d8 <sd_mmc_check+0x444>
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   808ce:	4640      	mov	r0, r8
   808d0:	4639      	mov	r1, r7
   808d2:	47b0      	blx	r6
   808d4:	b140      	cbz	r0, 808e8 <sd_mmc_check+0x454>
   808d6:	e018      	b.n	8090a <sd_mmc_check+0x476>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
   808d8:	f04f 050a 	mov.w	r5, #10
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   808dc:	f241 1810 	movw	r8, #4368	; 0x1110
   808e0:	f44f 7700 	mov.w	r7, #512	; 0x200
   808e4:	4e0b      	ldr	r6, [pc, #44]	; (80914 <sd_mmc_check+0x480>)
   808e6:	e7f2      	b.n	808ce <sd_mmc_check+0x43a>
   808e8:	f105 32ff 	add.w	r2, r5, #4294967295
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
	}

	uint8_t retry = 10;
	while (retry--) {
   808ec:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
   808f0:	d1ed      	bne.n	808ce <sd_mmc_check+0x43a>
		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return true;
		}
	}
	return false;
   808f2:	f04f 0000 	mov.w	r0, #0
   808f6:	e2ad      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   808f8:	f04f 0000 	mov.w	r0, #0
   808fc:	e2aa      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
		return false;
   808fe:	f04f 0000 	mov.w	r0, #0
   80902:	e2a7      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   80904:	f04f 0000 	mov.w	r0, #0
   80908:	e2a4      	b.n	80e54 <sd_mmc_check+0x9c0>
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return true;
   8090a:	f04f 0001 	mov.w	r0, #1
   8090e:	e2a1      	b.n	80e54 <sd_mmc_check+0x9c0>
   80910:	20070ba4 	.word	0x20070ba4
   80914:	0008308d 	.word	0x0008308d
   80918:	0008028d 	.word	0x0008028d
   8091c:	0008d310 	.word	0x0008d310
   80920:	0008d32c 	.word	0x0008d32c
   80924:	0008311d 	.word	0x0008311d
   80928:	000831f5 	.word	0x000831f5
   8092c:	20070baa 	.word	0x20070baa
   80930:	00082fdd 	.word	0x00082fdd
   80934:	000830b5 	.word	0x000830b5
   80938:	000801a5 	.word	0x000801a5
   8093c:	00082fe9 	.word	0x00082fe9
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
   80940:	f645 3002 	movw	r0, #23298	; 0x5b02
   80944:	f04f 0100 	mov.w	r1, #0
   80948:	f243 038d 	movw	r3, #12429	; 0x308d
   8094c:	f2c0 0308 	movt	r3, #8
   80950:	4798      	blx	r3
   80952:	2800      	cmp	r0, #0
   80954:	f000 828d 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
   80958:	f245 1003 	movw	r0, #20739	; 0x5103
   8095c:	f04f 0100 	mov.w	r1, #0
   80960:	f243 028d 	movw	r2, #12429	; 0x308d
   80964:	f2c0 0208 	movt	r2, #8
   80968:	4790      	blx	r2
   8096a:	2800      	cmp	r0, #0
   8096c:	f000 8281 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
   80970:	f640 35a4 	movw	r5, #2980	; 0xba4
   80974:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80978:	682e      	ldr	r6, [r5, #0]
   8097a:	f243 00b5 	movw	r0, #12469	; 0x30b5
   8097e:	f2c0 0008 	movt	r0, #8
   80982:	4780      	blx	r0
   80984:	ea4f 4110 	mov.w	r1, r0, lsr #16
   80988:	81b1      	strh	r1, [r6, #12]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   8098a:	682b      	ldr	r3, [r5, #0]
   8098c:	7bda      	ldrb	r2, [r3, #15]
   8098e:	f012 0f01 	tst.w	r2, #1
   80992:	d056      	beq.n	80a42 <sd_mmc_check+0x5ae>
		if (!sd_mmc_cmd9_mci()) {
   80994:	f240 208d 	movw	r0, #653	; 0x28d
   80998:	f2c0 0008 	movt	r0, #8
   8099c:	4780      	blx	r0
   8099e:	2800      	cmp	r0, #0
   809a0:	f000 8267 	beq.w	80e72 <sd_mmc_check+0x9de>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   809a4:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   809a6:	7d5a      	ldrb	r2, [r3, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   809a8:	f002 0007 	and.w	r0, r2, #7
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   809ac:	f24d 3110 	movw	r1, #54032	; 0xd310
   809b0:	f2c0 0108 	movt	r1, #8
   809b4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   809b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   809bc:	fb00 f101 	mul.w	r1, r0, r1
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   809c0:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   809c4:	f24d 20d0 	movw	r0, #53968	; 0xd2d0
   809c8:	f2c0 0008 	movt	r0, #8
   809cc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   809d0:	fb02 f101 	mul.w	r1, r2, r1
   809d4:	6019      	str	r1, [r3, #0]
   809d6:	7c98      	ldrb	r0, [r3, #18]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   809d8:	0982      	lsrs	r2, r0, #6
   809da:	d00f      	beq.n	809fc <sd_mmc_check+0x568>
   809dc:	7eda      	ldrb	r2, [r3, #27]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   809de:	7e98      	ldrb	r0, [r3, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   809e0:	7e59      	ldrb	r1, [r3, #25]
   809e2:	ea4f 4101 	mov.w	r1, r1, lsl #16
   809e6:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   809ea:	4302      	orrs	r2, r0
   809ec:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
   809f0:	f101 0101 	add.w	r1, r1, #1
   809f4:	ea4f 2041 	mov.w	r0, r1, lsl #9
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
   809f8:	6058      	str	r0, [r3, #4]
   809fa:	e022      	b.n	80a42 <sd_mmc_check+0x5ae>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   809fc:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   809fe:	7e18      	ldrb	r0, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80a00:	7e5a      	ldrb	r2, [r3, #25]
   80a02:	ea4f 0282 	mov.w	r2, r2, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80a06:	ea42 2080 	orr.w	r0, r2, r0, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80a0a:	ea40 12a1 	orr.w	r2, r0, r1, asr #6
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80a0e:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80a10:	7ed9      	ldrb	r1, [r3, #27]
   80a12:	ea4f 0141 	mov.w	r1, r1, lsl #1
   80a16:	ea41 10e0 	orr.w	r0, r1, r0, asr #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80a1a:	ea4f 5202 	mov.w	r2, r2, lsl #20
   80a1e:	ea4f 5212 	mov.w	r2, r2, lsr #20
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   80a22:	f102 0201 	add.w	r2, r2, #1
   80a26:	f000 0107 	and.w	r1, r0, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   80a2a:	f101 0102 	add.w	r1, r1, #2
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   80a2e:	fa02 f001 	lsl.w	r0, r2, r1
   80a32:	7dda      	ldrb	r2, [r3, #23]
   80a34:	f002 010f 	and.w	r1, r2, #15
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80a38:	fa00 f001 	lsl.w	r0, r0, r1
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
   80a3c:	ea4f 2290 	mov.w	r2, r0, lsr #10
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80a40:	605a      	str	r2, [r3, #4]
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
   80a42:	f640 33a4 	movw	r3, #2980	; 0xba4
   80a46:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80a4a:	681a      	ldr	r2, [r3, #0]
   80a4c:	8991      	ldrh	r1, [r2, #12]
			return false;
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
   80a4e:	f243 1007 	movw	r0, #12551	; 0x3107
   80a52:	ea4f 4101 	mov.w	r1, r1, lsl #16
   80a56:	f243 038d 	movw	r3, #12429	; 0x308d
   80a5a:	f2c0 0308 	movt	r3, #8
   80a5e:	4798      	blx	r3
   80a60:	2800      	cmp	r0, #0
   80a62:	f000 8206 	beq.w	80e72 <sd_mmc_check+0x9de>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80a66:	f640 30a4 	movw	r0, #2980	; 0xba4
   80a6a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80a6e:	6801      	ldr	r1, [r0, #0]
   80a70:	7bca      	ldrb	r2, [r1, #15]
   80a72:	f012 0f01 	tst.w	r2, #1
   80a76:	d04e      	beq.n	80b16 <sd_mmc_check+0x682>
{
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   80a78:	898b      	ldrh	r3, [r1, #12]
   80a7a:	f241 1037 	movw	r0, #4407	; 0x1137
   80a7e:	ea4f 4103 	mov.w	r1, r3, lsl #16
   80a82:	f243 028d 	movw	r2, #12429	; 0x308d
   80a86:	f2c0 0208 	movt	r2, #8
   80a8a:	4790      	blx	r2
   80a8c:	2800      	cmp	r0, #0
   80a8e:	f000 81f0 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   80a92:	f04f 0301 	mov.w	r3, #1
   80a96:	9300      	str	r3, [sp, #0]
   80a98:	f241 1033 	movw	r0, #4403	; 0x1133
   80a9c:	f2c0 0008 	movt	r0, #8
   80aa0:	f04f 0100 	mov.w	r1, #0
   80aa4:	f04f 0208 	mov.w	r2, #8
   80aa8:	4d4c      	ldr	r5, [pc, #304]	; (80bdc <sd_mmc_check+0x748>)
   80aaa:	47a8      	blx	r5
   80aac:	2800      	cmp	r0, #0
   80aae:	f000 81e0 	beq.w	80e72 <sd_mmc_check+0x9de>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(scr, 1)) {
   80ab2:	a804      	add	r0, sp, #16
   80ab4:	f04f 0101 	mov.w	r1, #1
   80ab8:	4b49      	ldr	r3, [pc, #292]	; (80be0 <sd_mmc_check+0x74c>)
   80aba:	4798      	blx	r3
   80abc:	2800      	cmp	r0, #0
   80abe:	f000 81d8 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80ac2:	4848      	ldr	r0, [pc, #288]	; (80be4 <sd_mmc_check+0x750>)
   80ac4:	4780      	blx	r0
   80ac6:	2800      	cmp	r0, #0
   80ac8:	f000 81d3 	beq.w	80e72 <sd_mmc_check+0x9de>
   80acc:	f89d 1010 	ldrb.w	r1, [sp, #16]
		return false;
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   80ad0:	f001 030f 	and.w	r3, r1, #15
   80ad4:	2b01      	cmp	r3, #1
   80ad6:	d009      	beq.n	80aec <sd_mmc_check+0x658>
   80ad8:	b113      	cbz	r3, 80ae0 <sd_mmc_check+0x64c>
   80ada:	2b02      	cmp	r3, #2
   80adc:	d116      	bne.n	80b0c <sd_mmc_check+0x678>
   80ade:	e00b      	b.n	80af8 <sd_mmc_check+0x664>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   80ae0:	4a41      	ldr	r2, [pc, #260]	; (80be8 <sd_mmc_check+0x754>)
   80ae2:	6813      	ldr	r3, [r2, #0]
   80ae4:	f04f 0010 	mov.w	r0, #16
   80ae8:	7418      	strb	r0, [r3, #16]
   80aea:	e014      	b.n	80b16 <sd_mmc_check+0x682>
		break;

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   80aec:	493e      	ldr	r1, [pc, #248]	; (80be8 <sd_mmc_check+0x754>)
   80aee:	680b      	ldr	r3, [r1, #0]
   80af0:	f04f 021a 	mov.w	r2, #26
   80af4:	741a      	strb	r2, [r3, #16]
   80af6:	e00e      	b.n	80b16 <sd_mmc_check+0x682>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80af8:	f89d 3012 	ldrb.w	r3, [sp, #18]
		break;

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   80afc:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
   80afe:	483a      	ldr	r0, [pc, #232]	; (80be8 <sd_mmc_check+0x754>)
   80b00:	6801      	ldr	r1, [r0, #0]
   80b02:	bf14      	ite	ne
   80b04:	2230      	movne	r2, #48	; 0x30
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
   80b06:	2220      	moveq	r2, #32
   80b08:	740a      	strb	r2, [r1, #16]
   80b0a:	e004      	b.n	80b16 <sd_mmc_check+0x682>
		}
		break;

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   80b0c:	4a36      	ldr	r2, [pc, #216]	; (80be8 <sd_mmc_check+0x754>)
   80b0e:	6810      	ldr	r0, [r2, #0]
   80b10:	f04f 0110 	mov.w	r1, #16
   80b14:	7401      	strb	r1, [r0, #16]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
		if (!sd_acmd51()) {
			return false;
		}
	}
	if (IS_SDIO()) {
   80b16:	f640 30a4 	movw	r0, #2980	; 0xba4
   80b1a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80b1e:	6801      	ldr	r1, [r0, #0]
   80b20:	7bcb      	ldrb	r3, [r1, #15]
   80b22:	f003 0204 	and.w	r2, r3, #4
   80b26:	b2d0      	uxtb	r0, r2
   80b28:	2800      	cmp	r0, #0
   80b2a:	f000 8095 	beq.w	80c58 <sd_mmc_check+0x7c4>
 	uint32_t unit;
	uint32_t mul;
	uint8_t tplfe_max_tran_speed;

	// Read CIS area address in CCCR area
	addr_cis = 0; // Init all bytes, because the next function fill 3 bytes only
   80b2e:	f04f 0100 	mov.w	r1, #0
   80b32:	9103      	str	r1, [sp, #12]
	if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, SDIO_CCCR_CIS_PTR,
   80b34:	f04f 0503 	mov.w	r5, #3
   80b38:	9500      	str	r5, [sp, #0]
   80b3a:	f04f 0301 	mov.w	r3, #1
   80b3e:	9301      	str	r3, [sp, #4]
   80b40:	4608      	mov	r0, r1
   80b42:	f04f 0209 	mov.w	r2, #9
   80b46:	f240 15d5 	movw	r5, #469	; 0x1d5
   80b4a:	f2c0 0508 	movt	r5, #8
   80b4e:	47a8      	blx	r5
   80b50:	2800      	cmp	r0, #0
   80b52:	f000 818e 	beq.w	80e72 <sd_mmc_check+0x9de>
			1, 3, true)) {
		sd_mmc_debug("%s: CMD53 Read CIS Fail\n\r", __func__);
		return false;
	}
	if (!driver_start_read_blocks((uint8_t *)&addr_cis, 1)) {
   80b56:	a803      	add	r0, sp, #12
   80b58:	f04f 0101 	mov.w	r1, #1
   80b5c:	4b20      	ldr	r3, [pc, #128]	; (80be0 <sd_mmc_check+0x74c>)
   80b5e:	4798      	blx	r3
   80b60:	2800      	cmp	r0, #0
   80b62:	f000 8186 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80b66:	491f      	ldr	r1, [pc, #124]	; (80be4 <sd_mmc_check+0x750>)
   80b68:	4788      	blx	r1
   80b6a:	2800      	cmp	r0, #0
   80b6c:	f000 8181 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	addr_cis = le32_to_cpu(addr_cis);
   80b70:	9d03      	ldr	r5, [sp, #12]

	// Search Fun0 tuple in the CIA area
	addr = addr_cis;
	while (1) {
		// Read a sample of CIA area
		if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 3, true)) {
   80b72:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80bec <sd_mmc_check+0x758>
			sd_mmc_debug("%s: CMD53 Read CIA Fail\n\r", __func__);
			return false;
		}
		if (!driver_start_read_blocks(buf, 1)) {
   80b76:	4f1a      	ldr	r7, [pc, #104]	; (80be0 <sd_mmc_check+0x74c>)
			return false;
		}
		if (!driver_wait_end_of_read_blocks()) {
   80b78:	4e1a      	ldr	r6, [pc, #104]	; (80be4 <sd_mmc_check+0x750>)

	// Search Fun0 tuple in the CIA area
	addr = addr_cis;
	while (1) {
		// Read a sample of CIA area
		if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 3, true)) {
   80b7a:	f04f 0203 	mov.w	r2, #3
   80b7e:	9200      	str	r2, [sp, #0]
   80b80:	f04f 0301 	mov.w	r3, #1
   80b84:	9301      	str	r3, [sp, #4]
   80b86:	f04f 0000 	mov.w	r0, #0
   80b8a:	4601      	mov	r1, r0
   80b8c:	462a      	mov	r2, r5
   80b8e:	47c0      	blx	r8
   80b90:	2800      	cmp	r0, #0
   80b92:	f000 816e 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Read CIA Fail\n\r", __func__);
			return false;
		}
		if (!driver_start_read_blocks(buf, 1)) {
   80b96:	a804      	add	r0, sp, #16
   80b98:	f04f 0101 	mov.w	r1, #1
   80b9c:	47b8      	blx	r7
   80b9e:	2800      	cmp	r0, #0
   80ba0:	f000 8167 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
		if (!driver_wait_end_of_read_blocks()) {
   80ba4:	47b0      	blx	r6
   80ba6:	2800      	cmp	r0, #0
   80ba8:	f000 8163 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
		if (buf[0] == SDIO_CISTPL_END) {
   80bac:	f89d 0010 	ldrb.w	r0, [sp, #16]
   80bb0:	28ff      	cmp	r0, #255	; 0xff
   80bb2:	f000 815e 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Tuple error\n\r", __func__);
			return false; // Tuple error
		}
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
   80bb6:	2822      	cmp	r0, #34	; 0x22
   80bb8:	d102      	bne.n	80bc0 <sd_mmc_check+0x72c>
   80bba:	f89d 3012 	ldrb.w	r3, [sp, #18]
   80bbe:	b1bb      	cbz	r3, 80bf0 <sd_mmc_check+0x75c>
			break; // Fun0 tuple found
		}
		if (buf[1] == 0) {
   80bc0:	f89d 1011 	ldrb.w	r1, [sp, #17]
   80bc4:	2900      	cmp	r1, #0
   80bc6:	f000 8154 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Tuple error\n\r", __func__);
			return false; // Tuple error
		}

		// Next address
		addr += (buf[1] + 2);
   80bca:	f101 0102 	add.w	r1, r1, #2
   80bce:	186d      	adds	r5, r5, r1
		if (addr > (addr_cis + 256)) {
   80bd0:	9a03      	ldr	r2, [sp, #12]
   80bd2:	f502 7080 	add.w	r0, r2, #256	; 0x100
   80bd6:	4285      	cmp	r5, r0
   80bd8:	d9cf      	bls.n	80b7a <sd_mmc_check+0x6e6>
   80bda:	e14a      	b.n	80e72 <sd_mmc_check+0x9de>
   80bdc:	0008311d 	.word	0x0008311d
   80be0:	00083289 	.word	0x00083289
   80be4:	000833a1 	.word	0x000833a1
   80be8:	20070ba4 	.word	0x20070ba4
   80bec:	000801d5 	.word	0x000801d5
			return false; // Outoff CIS area
		}
	}

	// Read all Fun0 tuple fields: fn0_blk_siz & max_tran_speed
	if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 6, true)) {
   80bf0:	f04f 0306 	mov.w	r3, #6
   80bf4:	9300      	str	r3, [sp, #0]
   80bf6:	f04f 0301 	mov.w	r3, #1
   80bfa:	9301      	str	r3, [sp, #4]
   80bfc:	f04f 0000 	mov.w	r0, #0
   80c00:	4601      	mov	r1, r0
   80c02:	462a      	mov	r2, r5
   80c04:	4dbb      	ldr	r5, [pc, #748]	; (80ef4 <sd_mmc_check+0xa60>)
   80c06:	47a8      	blx	r5
   80c08:	2800      	cmp	r0, #0
   80c0a:	f000 8132 	beq.w	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD53 Read all Fun0 Fail\n\r", __func__);
		return false;
	}
	if (!driver_start_read_blocks(buf, 1)) {
   80c0e:	a804      	add	r0, sp, #16
   80c10:	f04f 0101 	mov.w	r1, #1
   80c14:	4ab8      	ldr	r2, [pc, #736]	; (80ef8 <sd_mmc_check+0xa64>)
   80c16:	4790      	blx	r2
   80c18:	2800      	cmp	r0, #0
   80c1a:	f000 812a 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80c1e:	49b7      	ldr	r1, [pc, #732]	; (80efc <sd_mmc_check+0xa68>)
   80c20:	4788      	blx	r1
   80c22:	2800      	cmp	r0, #0
   80c24:	f000 8125 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	tplfe_max_tran_speed = buf[5];
   80c28:	f89d 3015 	ldrb.w	r3, [sp, #21]
   80c2c:	2b32      	cmp	r3, #50	; 0x32
   80c2e:	bf28      	it	cs
   80c30:	2332      	movcs	r3, #50	; 0x32
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80c32:	48b3      	ldr	r0, [pc, #716]	; (80f00 <sd_mmc_check+0xa6c>)
   80c34:	6802      	ldr	r2, [r0, #0]
		 */
		tplfe_max_tran_speed = 0x32; // 25Mhz
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
   80c36:	f003 0007 	and.w	r0, r3, #7
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80c3a:	49b2      	ldr	r1, [pc, #712]	; (80f04 <sd_mmc_check+0xa70>)
   80c3c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   80c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80c44:	fb00 f101 	mul.w	r1, r0, r1
		tplfe_max_tran_speed = 0x32; // 25Mhz
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
   80c48:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   80c4c:	48ae      	ldr	r0, [pc, #696]	; (80f08 <sd_mmc_check+0xa74>)
   80c4e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   80c52:	fb03 f101 	mul.w	r1, r3, r1
   80c56:	6011      	str	r1, [r2, #0]
	if (IS_SDIO()) {
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
   80c58:	f640 32aa 	movw	r2, #2986	; 0xbaa
   80c5c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80c60:	7810      	ldrb	r0, [r2, #0]
   80c62:	f642 73dd 	movw	r3, #12253	; 0x2fdd
   80c66:	f2c0 0308 	movt	r3, #8
   80c6a:	4798      	blx	r3
   80c6c:	2803      	cmp	r0, #3
   80c6e:	d959      	bls.n	80d24 <sd_mmc_check+0x890>
		// TRY to enable 4-bit mode
		if (IS_SDIO()) {
   80c70:	f640 30a4 	movw	r0, #2980	; 0xba4
   80c74:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80c78:	6801      	ldr	r1, [r0, #0]
   80c7a:	7bca      	ldrb	r2, [r1, #15]
   80c7c:	f002 0304 	and.w	r3, r2, #4
   80c80:	b2d8      	uxtb	r0, r3
   80c82:	b330      	cbz	r0, 80cd2 <sd_mmc_check+0x83e>
	 * A SDIO Low-Speed alone can supports 4bit (Optional)
	 */
	uint8_t u8_value;

	// Check 4bit support in 4BLS of "Card Capability" register
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
   80c84:	ad03      	add	r5, sp, #12
   80c86:	9500      	str	r5, [sp, #0]
   80c88:	f04f 0000 	mov.w	r0, #0
   80c8c:	4601      	mov	r1, r0
   80c8e:	f04f 0208 	mov.w	r2, #8
   80c92:	4603      	mov	r3, r0
   80c94:	4d9d      	ldr	r5, [pc, #628]	; (80f0c <sd_mmc_check+0xa78>)
   80c96:	47a8      	blx	r5
   80c98:	2800      	cmp	r0, #0
   80c9a:	f000 80ea 	beq.w	80e72 <sd_mmc_check+0x9de>
			0, &u8_value)) {
		return false;
	}
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
   80c9e:	f99d 100c 	ldrsb.w	r1, [sp, #12]
   80ca2:	2900      	cmp	r1, #0
   80ca4:	da15      	bge.n	80cd2 <sd_mmc_check+0x83e>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_BUSWIDTH_4B;
   80ca6:	ab14      	add	r3, sp, #80	; 0x50
   80ca8:	f04f 0202 	mov.w	r2, #2
   80cac:	f803 2d44 	strb.w	r2, [r3, #-68]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
   80cb0:	9300      	str	r3, [sp, #0]
   80cb2:	f04f 0001 	mov.w	r0, #1
   80cb6:	f04f 0100 	mov.w	r1, #0
   80cba:	f04f 0207 	mov.w	r2, #7
   80cbe:	4603      	mov	r3, r0
   80cc0:	47a8      	blx	r5
   80cc2:	2800      	cmp	r0, #0
   80cc4:	f000 80d5 	beq.w	80e72 <sd_mmc_check+0x9de>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->bus_width = 4;
   80cc8:	488d      	ldr	r0, [pc, #564]	; (80f00 <sd_mmc_check+0xa6c>)
   80cca:	6801      	ldr	r1, [r0, #0]
   80ccc:	f04f 0304 	mov.w	r3, #4
   80cd0:	744b      	strb	r3, [r1, #17]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_bus_width()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
   80cd2:	f640 32a4 	movw	r2, #2980	; 0xba4
   80cd6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80cda:	6810      	ldr	r0, [r2, #0]
   80cdc:	7bc1      	ldrb	r1, [r0, #15]
   80cde:	f011 0f01 	tst.w	r1, #1
   80ce2:	d01a      	beq.n	80d1a <sd_mmc_check+0x886>
 */
static bool sd_acmd6(void)
{
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   80ce4:	8983      	ldrh	r3, [r0, #12]
   80ce6:	f241 1037 	movw	r0, #4407	; 0x1137
   80cea:	ea4f 4103 	mov.w	r1, r3, lsl #16
   80cee:	f243 028d 	movw	r2, #12429	; 0x308d
   80cf2:	f2c0 0208 	movt	r2, #8
   80cf6:	4790      	blx	r2
   80cf8:	2800      	cmp	r0, #0
   80cfa:	f000 80ba 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
   80cfe:	f241 1006 	movw	r0, #4358	; 0x1106
   80d02:	f04f 0102 	mov.w	r1, #2
   80d06:	4b82      	ldr	r3, [pc, #520]	; (80f10 <sd_mmc_check+0xa7c>)
   80d08:	4798      	blx	r3
   80d0a:	2800      	cmp	r0, #0
   80d0c:	f000 80b1 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	sd_mmc_card->bus_width = 4;
   80d10:	487b      	ldr	r0, [pc, #492]	; (80f00 <sd_mmc_check+0xa6c>)
   80d12:	6801      	ldr	r1, [r0, #0]
   80d14:	f04f 0204 	mov.w	r2, #4
   80d18:	744a      	strb	r2, [r1, #17]
			if (!sd_acmd6()) {
				return false;
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
   80d1a:	f240 13a5 	movw	r3, #421	; 0x1a5
   80d1e:	f2c0 0308 	movt	r3, #8
   80d22:	4798      	blx	r3
	}
	if (driver_is_high_speed_capable()) {
   80d24:	f642 70e9 	movw	r0, #12265	; 0x2fe9
   80d28:	f2c0 0008 	movt	r0, #8
   80d2c:	4780      	blx	r0
   80d2e:	2800      	cmp	r0, #0
   80d30:	f000 8081 	beq.w	80e36 <sd_mmc_check+0x9a2>
		// TRY to enable High-Speed Mode
		if (IS_SDIO()) {
   80d34:	f640 31a4 	movw	r1, #2980	; 0xba4
   80d38:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80d3c:	680a      	ldr	r2, [r1, #0]
   80d3e:	7bd3      	ldrb	r3, [r2, #15]
   80d40:	f003 0004 	and.w	r0, r3, #4
   80d44:	b2c1      	uxtb	r1, r0
   80d46:	b359      	cbz	r1, 80da0 <sd_mmc_check+0x90c>
static bool sdio_cmd52_set_high_speed(void)
{
	uint8_t u8_value;

	// Check CIA.HS
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
   80d48:	ad03      	add	r5, sp, #12
   80d4a:	9500      	str	r5, [sp, #0]
   80d4c:	f04f 0000 	mov.w	r0, #0
   80d50:	4601      	mov	r1, r0
   80d52:	f04f 0213 	mov.w	r2, #19
   80d56:	4603      	mov	r3, r0
   80d58:	4d6c      	ldr	r5, [pc, #432]	; (80f0c <sd_mmc_check+0xa78>)
   80d5a:	47a8      	blx	r5
   80d5c:	2800      	cmp	r0, #0
   80d5e:	f000 8088 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
   80d62:	f89d 200c 	ldrb.w	r2, [sp, #12]
   80d66:	f012 0f01 	tst.w	r2, #1
   80d6a:	d019      	beq.n	80da0 <sd_mmc_check+0x90c>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_EHS;
   80d6c:	ab14      	add	r3, sp, #80	; 0x50
   80d6e:	f04f 0002 	mov.w	r0, #2
   80d72:	f803 0d44 	strb.w	r0, [r3, #-68]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
   80d76:	9300      	str	r3, [sp, #0]
   80d78:	f04f 0001 	mov.w	r0, #1
   80d7c:	f04f 0100 	mov.w	r1, #0
   80d80:	f04f 0213 	mov.w	r2, #19
   80d84:	4603      	mov	r3, r0
   80d86:	47a8      	blx	r5
   80d88:	2800      	cmp	r0, #0
   80d8a:	d072      	beq.n	80e72 <sd_mmc_check+0x9de>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->high_speed = 1;
   80d8c:	495c      	ldr	r1, [pc, #368]	; (80f00 <sd_mmc_check+0xa6c>)
   80d8e:	680b      	ldr	r3, [r1, #0]
   80d90:	f04f 0201 	mov.w	r2, #1
   80d94:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
   80d98:	6818      	ldr	r0, [r3, #0]
   80d9a:	ea4f 0140 	mov.w	r1, r0, lsl #1
   80d9e:	6019      	str	r1, [r3, #0]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_high_speed()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
   80da0:	f640 33a4 	movw	r3, #2980	; 0xba4
   80da4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80da8:	6818      	ldr	r0, [r3, #0]
   80daa:	7bc2      	ldrb	r2, [r0, #15]
   80dac:	f012 0f01 	tst.w	r2, #1
   80db0:	d03c      	beq.n	80e2c <sd_mmc_check+0x998>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
   80db2:	7c01      	ldrb	r1, [r0, #16]
   80db4:	2910      	cmp	r1, #16
   80db6:	d939      	bls.n	80e2c <sd_mmc_check+0x998>
 */
static bool sd_cm6_set_high_speed(void)
{
	uint8_t switch_status[SD_SW_STATUS_BSIZE];

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
   80db8:	f04f 0301 	mov.w	r3, #1
   80dbc:	9300      	str	r3, [sp, #0]
   80dbe:	f241 1006 	movw	r0, #4358	; 0x1106
   80dc2:	f2c0 0008 	movt	r0, #8
   80dc6:	f64f 7101 	movw	r1, #65281	; 0xff01
   80dca:	f2c8 01ff 	movt	r1, #33023	; 0x80ff
   80dce:	f04f 0240 	mov.w	r2, #64	; 0x40
   80dd2:	4d50      	ldr	r5, [pc, #320]	; (80f14 <sd_mmc_check+0xa80>)
   80dd4:	47a8      	blx	r5
   80dd6:	2800      	cmp	r0, #0
   80dd8:	d04b      	beq.n	80e72 <sd_mmc_check+0x9de>
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
   80dda:	a804      	add	r0, sp, #16
   80ddc:	f04f 0101 	mov.w	r1, #1
   80de0:	4b45      	ldr	r3, [pc, #276]	; (80ef8 <sd_mmc_check+0xa64>)
   80de2:	4798      	blx	r3
   80de4:	2800      	cmp	r0, #0
   80de6:	d044      	beq.n	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80de8:	4844      	ldr	r0, [pc, #272]	; (80efc <sd_mmc_check+0xa68>)
   80dea:	4780      	blx	r0
   80dec:	2800      	cmp	r0, #0
   80dee:	d040      	beq.n	80e72 <sd_mmc_check+0x9de>
		return false;
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   80df0:	4a49      	ldr	r2, [pc, #292]	; (80f18 <sd_mmc_check+0xa84>)
   80df2:	4790      	blx	r2
   80df4:	f010 0f80 	tst.w	r0, #128	; 0x80
   80df8:	d13b      	bne.n	80e72 <sd_mmc_check+0x9de>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80dfa:	f89d 1020 	ldrb.w	r1, [sp, #32]
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
   80dfe:	f001 030f 	and.w	r3, r1, #15
   80e02:	2b0f      	cmp	r3, #15
   80e04:	d012      	beq.n	80e2c <sd_mmc_check+0x998>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80e06:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80e0a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
   80e0e:	ea50 2202 	orrs.w	r2, r0, r2, lsl #8
   80e12:	d12e      	bne.n	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
   80e14:	4941      	ldr	r1, [pc, #260]	; (80f1c <sd_mmc_check+0xa88>)
   80e16:	4788      	blx	r1
	sd_mmc_card->high_speed = 1;
   80e18:	4b39      	ldr	r3, [pc, #228]	; (80f00 <sd_mmc_check+0xa6c>)
   80e1a:	6818      	ldr	r0, [r3, #0]
   80e1c:	f04f 0201 	mov.w	r2, #1
   80e20:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
	sd_mmc_card->clock *= 2;
   80e24:	6801      	ldr	r1, [r0, #0]
   80e26:	ea4f 0341 	mov.w	r3, r1, lsl #1
   80e2a:	6003      	str	r3, [r0, #0]
					return false;
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
   80e2c:	f240 10a5 	movw	r0, #421	; 0x1a5
   80e30:	f2c0 0008 	movt	r0, #8
   80e34:	4780      	blx	r0
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80e36:	f640 32a4 	movw	r2, #2980	; 0xba4
   80e3a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80e3e:	6811      	ldr	r1, [r2, #0]
   80e40:	7bcb      	ldrb	r3, [r1, #15]
   80e42:	f013 0f01 	tst.w	r3, #1
   80e46:	d006      	beq.n	80e56 <sd_mmc_check+0x9c2>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   80e48:	f241 1010 	movw	r0, #4368	; 0x1110
   80e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
   80e50:	4a2f      	ldr	r2, [pc, #188]	; (80f10 <sd_mmc_check+0xa7c>)
   80e52:	4790      	blx	r2
		sd_mmc_deselect_slot();
		return sd_mmc_err;
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   80e54:	b168      	cbz	r0, 80e72 <sd_mmc_check+0x9de>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   80e56:	f640 30a4 	movw	r0, #2980	; 0xba4
   80e5a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80e5e:	6803      	ldr	r3, [r0, #0]
   80e60:	f04f 0100 	mov.w	r1, #0
   80e64:	7399      	strb	r1, [r3, #14]
		sd_mmc_deselect_slot();
   80e66:	f240 2229 	movw	r2, #553	; 0x229
   80e6a:	f2c0 0208 	movt	r2, #8
   80e6e:	4790      	blx	r2
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   80e70:	e07f      	b.n	80f72 <sd_mmc_check+0xade>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   80e72:	f640 34a4 	movw	r4, #2980	; 0xba4
   80e76:	f2c2 0407 	movt	r4, #8199	; 0x2007
   80e7a:	6820      	ldr	r0, [r4, #0]
   80e7c:	f04f 0403 	mov.w	r4, #3
   80e80:	7384      	strb	r4, [r0, #14]
	sd_mmc_deselect_slot();
   80e82:	f240 2329 	movw	r3, #553	; 0x229
   80e86:	f2c0 0308 	movt	r3, #8
   80e8a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   80e8c:	e071      	b.n	80f72 <sd_mmc_check+0xade>
 */
static bool sd_cmd8(uint8_t * v2)
{
	uint32_t resp;

	*v2 = 0;
   80e8e:	f04f 0600 	mov.w	r6, #0
   80e92:	e001      	b.n	80e98 <sd_mmc_check+0xa04>
   80e94:	f04f 0600 	mov.w	r6, #0
static bool sdio_op_cond(void)
{
	uint32_t resp;

	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
   80e98:	f244 5005 	movw	r0, #17669	; 0x4505
   80e9c:	f04f 0100 	mov.w	r1, #0
   80ea0:	f243 038d 	movw	r3, #12429	; 0x308d
   80ea4:	f2c0 0308 	movt	r3, #8
   80ea8:	4798      	blx	r3
   80eaa:	2800      	cmp	r0, #0
   80eac:	f47f ab41 	bne.w	80532 <sd_mmc_check+0x9e>
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
		return false;
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80eb0:	f640 32a4 	movw	r2, #2980	; 0xba4
   80eb4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80eb8:	6811      	ldr	r1, [r2, #0]
   80eba:	7bcb      	ldrb	r3, [r1, #15]
   80ebc:	f013 0f01 	tst.w	r3, #1
   80ec0:	f43f ad4a 	beq.w	80958 <sd_mmc_check+0x4c4>
   80ec4:	f7ff bb6d 	b.w	805a2 <sd_mmc_check+0x10e>
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   80ec8:	f640 30a4 	movw	r0, #2980	; 0xba4
   80ecc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80ed0:	6801      	ldr	r1, [r0, #0]
   80ed2:	f04f 0302 	mov.w	r3, #2
   80ed6:	73cb      	strb	r3, [r1, #15]
static bool sd_mmc_mci_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
   80ed8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80edc:	f04f 0100 	mov.w	r1, #0
   80ee0:	f243 028d 	movw	r2, #12429	; 0x308d
   80ee4:	f2c0 0208 	movt	r2, #8
   80ee8:	4790      	blx	r2
   80eea:	2800      	cmp	r0, #0
   80eec:	f47f ab9e 	bne.w	8062c <sd_mmc_check+0x198>
   80ef0:	e7b0      	b.n	80e54 <sd_mmc_check+0x9c0>
   80ef2:	bf00      	nop
   80ef4:	000801d5 	.word	0x000801d5
   80ef8:	00083289 	.word	0x00083289
   80efc:	000833a1 	.word	0x000833a1
   80f00:	20070ba4 	.word	0x20070ba4
   80f04:	0008d310 	.word	0x0008d310
   80f08:	0008d2d0 	.word	0x0008d2d0
   80f0c:	00080249 	.word	0x00080249
   80f10:	0008308d 	.word	0x0008308d
   80f14:	0008311d 	.word	0x0008311d
   80f18:	000830b5 	.word	0x000830b5
   80f1c:	00083069 	.word	0x00083069
			sd_mmc_card->type = CARD_TYPE_MMC;
			return sd_mmc_mci_install_mmc();
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80f20:	f640 30a4 	movw	r0, #2980	; 0xba4
   80f24:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80f28:	6801      	ldr	r1, [r0, #0]
   80f2a:	7bca      	ldrb	r2, [r1, #15]
   80f2c:	f012 0f01 	tst.w	r2, #1
   80f30:	f47f ad06 	bne.w	80940 <sd_mmc_check+0x4ac>
   80f34:	e510      	b.n	80958 <sd_mmc_check+0x4c4>
		return false;
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
   80f36:	f645 3002 	movw	r0, #23298	; 0x5b02
   80f3a:	f04f 0100 	mov.w	r1, #0
   80f3e:	4b38      	ldr	r3, [pc, #224]	; (81020 <sd_mmc_check+0xb8c>)
   80f40:	4798      	blx	r3
   80f42:	2800      	cmp	r0, #0
   80f44:	f47f aba9 	bne.w	8069a <sd_mmc_check+0x206>
   80f48:	e784      	b.n	80e54 <sd_mmc_check+0x9c0>
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
		return false;
	}

	if (!mmc_mci_op_cond()) {
		return false;
   80f4a:	f04f 0000 	mov.w	r0, #0
   80f4e:	e781      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
   80f50:	f04f 0000 	mov.w	r0, #0
   80f54:	e77e      	b.n	80e54 <sd_mmc_check+0x9c0>
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
   80f56:	4933      	ldr	r1, [pc, #204]	; (81024 <sd_mmc_check+0xb90>)
   80f58:	7808      	ldrb	r0, [r1, #0]
   80f5a:	4b33      	ldr	r3, [pc, #204]	; (81028 <sd_mmc_check+0xb94>)
   80f5c:	4798      	blx	r3
   80f5e:	2803      	cmp	r0, #3
   80f60:	f63f ac66 	bhi.w	80830 <sd_mmc_check+0x39c>
   80f64:	e48d      	b.n	80882 <sd_mmc_check+0x3ee>
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
   80f66:	f04f 0000 	mov.w	r0, #0
   80f6a:	e773      	b.n	80e54 <sd_mmc_check+0x9c0>
			sd_mmc_configure_slot();
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
   80f6c:	f04f 0000 	mov.w	r0, #0
   80f70:	e770      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
   80f72:	4620      	mov	r0, r4
   80f74:	b015      	add	sp, #84	; 0x54
   80f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80f7a:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80f7c:	2800      	cmp	r0, #0
   80f7e:	f6ff ab74 	blt.w	8066a <sd_mmc_check+0x1d6>
   80f82:	f241 0669 	movw	r6, #4201	; 0x1069
   80f86:	f106 36ff 	add.w	r6, r6, #4294967295
   80f8a:	f7ff bb65 	b.w	80658 <sd_mmc_check+0x1c4>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80f8e:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80f90:	2800      	cmp	r0, #0
   80f92:	f6ff ab6a 	blt.w	8066a <sd_mmc_check+0x1d6>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
			}
			break;
		}
		if (retry-- == 0) {
   80f96:	3e01      	subs	r6, #1
   80f98:	f47f ab5e 	bne.w	80658 <sd_mmc_check+0x1c4>
   80f9c:	e7d5      	b.n	80f4a <sd_mmc_check+0xab6>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   80f9e:	4649      	mov	r1, r9
   80fa0:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   80fa4:	f244 5029 	movw	r0, #17705	; 0x4529
   80fa8:	2e00      	cmp	r6, #0
   80faa:	bf08      	it	eq
   80fac:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   80fb0:	47a8      	blx	r5
   80fb2:	2800      	cmp	r0, #0
   80fb4:	d088      	beq.n	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80fb6:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   80fb8:	2800      	cmp	r0, #0
   80fba:	f6ff ab1e 	blt.w	805fa <sd_mmc_check+0x166>
   80fbe:	f640 0b35 	movw	fp, #2101	; 0x835
   80fc2:	f10b 3bff 	add.w	fp, fp, #4294967295
   80fc6:	f7ff bb02 	b.w	805ce <sd_mmc_check+0x13a>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   80fca:	4649      	mov	r1, r9
   80fcc:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   80fd0:	f244 5029 	movw	r0, #17705	; 0x4529
   80fd4:	2e00      	cmp	r6, #0
   80fd6:	bf08      	it	eq
   80fd8:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   80fdc:	47a8      	blx	r5
   80fde:	2800      	cmp	r0, #0
   80fe0:	f43f af72 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80fe4:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   80fe6:	2800      	cmp	r0, #0
   80fe8:	f6ff ab07 	blt.w	805fa <sd_mmc_check+0x166>
			if ((resp & OCR_CCS) != 0) {
				sd_mmc_card->type |= CARD_TYPE_HC;
			}
			break;
		}
		if (retry-- == 0) {
   80fec:	f1bb 0b01 	subs.w	fp, fp, #1
   80ff0:	f47f aaed 	bne.w	805ce <sd_mmc_check+0x13a>
   80ff4:	e768      	b.n	80ec8 <sd_mmc_check+0xa34>
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80ff6:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   80ff8:	1e01      	subs	r1, r0, #0
   80ffa:	f6ff aac5 	blt.w	80588 <sd_mmc_check+0xf4>
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   80ffe:	4638      	mov	r0, r7
   81000:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   81004:	47a8      	blx	r5
   81006:	2800      	cmp	r0, #0
   81008:	f43f af33 	beq.w	80e72 <sd_mmc_check+0x9de>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   8100c:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   8100e:	1e01      	subs	r1, r0, #0
   81010:	f6ff aaba 	blt.w	80588 <sd_mmc_check+0xf4>
			break;
		}
		if (cmd5_retry-- == 0) {
   81014:	f1b9 0902 	subs.w	r9, r9, #2
   81018:	f47f aaa1 	bne.w	8055e <sd_mmc_check+0xca>
   8101c:	e729      	b.n	80e72 <sd_mmc_check+0x9de>
   8101e:	bf00      	nop
   81020:	0008308d 	.word	0x0008308d
   81024:	20070baa 	.word	0x20070baa
   81028:	00082fdd 	.word	0x00082fdd

0008102c <sd_mmc_get_type>:
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
   8102c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   8102e:	f240 23d5 	movw	r3, #725	; 0x2d5
   81032:	f2c0 0308 	movt	r3, #8
   81036:	4798      	blx	r3
   81038:	b958      	cbnz	r0, 81052 <sd_mmc_get_type+0x26>
		return CARD_TYPE_UNKNOWN;
	}
	sd_mmc_deselect_slot();
   8103a:	f240 2029 	movw	r0, #553	; 0x229
   8103e:	f2c0 0008 	movt	r0, #8
   81042:	4780      	blx	r0
	return sd_mmc_card->type;
   81044:	f640 31a4 	movw	r1, #2980	; 0xba4
   81048:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8104c:	680a      	ldr	r2, [r1, #0]
   8104e:	7bd0      	ldrb	r0, [r2, #15]
   81050:	bd08      	pop	{r3, pc}
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
   81052:	f04f 0000 	mov.w	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
   81056:	bd08      	pop	{r3, pc}

00081058 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   81058:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   8105a:	f240 23d5 	movw	r3, #725	; 0x2d5
   8105e:	f2c0 0308 	movt	r3, #8
   81062:	4798      	blx	r3
   81064:	b958      	cbnz	r0, 8107e <sd_mmc_get_capacity+0x26>
		return 0;
	}
	sd_mmc_deselect_slot();
   81066:	f240 2029 	movw	r0, #553	; 0x229
   8106a:	f2c0 0008 	movt	r0, #8
   8106e:	4780      	blx	r0
	return sd_mmc_card->capacity;
   81070:	f640 31a4 	movw	r1, #2980	; 0xba4
   81074:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81078:	680a      	ldr	r2, [r1, #0]
   8107a:	6850      	ldr	r0, [r2, #4]
   8107c:	bd08      	pop	{r3, pc}
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
   8107e:	f04f 0000 	mov.w	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
   81082:	bd08      	pop	{r3, pc}

00081084 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
   81084:	f04f 0000 	mov.w	r0, #0
   81088:	4770      	bx	lr
   8108a:	bf00      	nop

0008108c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   8108c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81090:	b083      	sub	sp, #12
   81092:	468b      	mov	fp, r1
   81094:	4692      	mov	sl, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   81096:	f240 23d5 	movw	r3, #725	; 0x2d5
   8109a:	f2c0 0308 	movt	r3, #8
   8109e:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
   810a0:	4681      	mov	r9, r0
   810a2:	2800      	cmp	r0, #0
   810a4:	f040 8081 	bne.w	811aa <sd_mmc_init_read_blocks+0x11e>
   810a8:	f640 5841 	movw	r8, #3393	; 0xd41
   810ac:	f2c0 0803 	movt	r8, #3
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810b0:	f640 36a4 	movw	r6, #2980	; 0xba4
   810b4:	f2c2 0607 	movt	r6, #8199	; 0x2007
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810b8:	f241 150d 	movw	r5, #4365	; 0x110d
   810bc:	f243 048d 	movw	r4, #12429	; 0x308d
   810c0:	f2c0 0408 	movt	r4, #8
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   810c4:	f243 07b5 	movw	r7, #12469	; 0x30b5
   810c8:	f2c0 0708 	movt	r7, #8
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810cc:	6830      	ldr	r0, [r6, #0]
   810ce:	8981      	ldrh	r1, [r0, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810d0:	4628      	mov	r0, r5
   810d2:	ea4f 4101 	mov.w	r1, r1, lsl #16
   810d6:	47a0      	blx	r4
   810d8:	2800      	cmp	r0, #0
   810da:	d046      	beq.n	8116a <sd_mmc_init_read_blocks+0xde>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   810dc:	47b8      	blx	r7
   810de:	f410 7f80 	tst.w	r0, #256	; 0x100
   810e2:	d14a      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
   810e4:	f108 38ff 	add.w	r8, r8, #4294967295
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810e8:	6832      	ldr	r2, [r6, #0]
   810ea:	8993      	ldrh	r3, [r2, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810ec:	4628      	mov	r0, r5
   810ee:	ea4f 4103 	mov.w	r1, r3, lsl #16
   810f2:	47a0      	blx	r4
   810f4:	2800      	cmp	r0, #0
   810f6:	d15c      	bne.n	811b2 <sd_mmc_init_read_blocks+0x126>
   810f8:	e037      	b.n	8116a <sd_mmc_init_read_blocks+0xde>
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   810fa:	ea4f 214b 	mov.w	r1, fp, lsl #9
   810fe:	e000      	b.n	81102 <sd_mmc_init_read_blocks+0x76>
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
   81100:	4659      	mov	r1, fp
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   81102:	f04f 0301 	mov.w	r3, #1
   81106:	9300      	str	r3, [sp, #0]
   81108:	f44f 7200 	mov.w	r2, #512	; 0x200
   8110c:	4653      	mov	r3, sl
   8110e:	f243 141d 	movw	r4, #12573	; 0x311d
   81112:	f2c0 0408 	movt	r4, #8
   81116:	47a0      	blx	r4
   81118:	b938      	cbnz	r0, 8112a <sd_mmc_init_read_blocks+0x9e>
		sd_mmc_deselect_slot();
   8111a:	f240 2129 	movw	r1, #553	; 0x229
   8111e:	f2c0 0108 	movt	r1, #8
   81122:	4788      	blx	r1
		return SD_MMC_ERR_COMM;
   81124:	f04f 0905 	mov.w	r9, #5
   81128:	e03f      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
   8112a:	f243 00b5 	movw	r0, #12469	; 0x30b5
   8112e:	f2c0 0008 	movt	r0, #8
   81132:	4780      	blx	r0
		if (resp & CARD_STATUS_ERR_RD_WR) {
   81134:	f04f 0100 	mov.w	r1, #0
   81138:	f2ce 4158 	movt	r1, #58456	; 0xe458
   8113c:	4001      	ands	r1, r0
   8113e:	b139      	cbz	r1, 81150 <sd_mmc_init_read_blocks+0xc4>
			sd_mmc_debug("%s: Read blocks %02d resp32 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
   81140:	f240 2029 	movw	r0, #553	; 0x229
   81144:	f2c0 0008 	movt	r0, #8
   81148:	4780      	blx	r0
			return SD_MMC_ERR_COMM;
   8114a:	f04f 0905 	mov.w	r9, #5
   8114e:	e02c      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   81150:	f640 32a8 	movw	r2, #2984	; 0xba8
   81154:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81158:	f8a2 a000 	strh.w	sl, [r2]
	sd_mmc_nb_block_to_tranfer = nb_block;
   8115c:	f640 33a0 	movw	r3, #2976	; 0xba0
   81160:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81164:	f8a3 a000 	strh.w	sl, [r3]
	return SD_MMC_OK;
   81168:	e01f      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
		return sd_mmc_err;
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
		sd_mmc_deselect_slot();
   8116a:	f240 2229 	movw	r2, #553	; 0x229
   8116e:	f2c0 0208 	movt	r2, #8
   81172:	4790      	blx	r2
		return SD_MMC_ERR_COMM;
   81174:	f04f 0905 	mov.w	r9, #5
   81178:	e017      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   8117a:	f241 1011 	movw	r0, #4369	; 0x1111
   8117e:	f2c0 0008 	movt	r0, #8
   81182:	f241 1412 	movw	r4, #4370	; 0x1112
   81186:	f2c0 0410 	movt	r4, #16
   8118a:	f1ba 0f01 	cmp.w	sl, #1
   8118e:	bf88      	it	hi
   81190:	4620      	movhi	r0, r4
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   81192:	f640 32a4 	movw	r2, #2980	; 0xba4
   81196:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8119a:	6813      	ldr	r3, [r2, #0]
   8119c:	7bd9      	ldrb	r1, [r3, #15]
   8119e:	f001 0408 	and.w	r4, r1, #8
   811a2:	b2e2      	uxtb	r2, r4
   811a4:	2a00      	cmp	r2, #0
   811a6:	d1ab      	bne.n	81100 <sd_mmc_init_read_blocks+0x74>
   811a8:	e7a7      	b.n	810fa <sd_mmc_init_read_blocks+0x6e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
   811aa:	4648      	mov	r0, r9
   811ac:	b003      	add	sp, #12
   811ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   811b2:	47b8      	blx	r7
   811b4:	f410 7f80 	tst.w	r0, #256	; 0x100
   811b8:	d1df      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   811ba:	6830      	ldr	r0, [r6, #0]
   811bc:	8981      	ldrh	r1, [r0, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   811be:	4628      	mov	r0, r5
   811c0:	ea4f 4101 	mov.w	r1, r1, lsl #16
   811c4:	47a0      	blx	r4
   811c6:	2800      	cmp	r0, #0
   811c8:	d0cf      	beq.n	8116a <sd_mmc_init_read_blocks+0xde>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   811ca:	47b8      	blx	r7
   811cc:	f410 7f80 	tst.w	r0, #256	; 0x100
   811d0:	d1d3      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
				break;
			}
		}
		if (nec_timeout-- == 0) {
   811d2:	f1b8 0802 	subs.w	r8, r8, #2
   811d6:	f47f af79 	bne.w	810cc <sd_mmc_init_read_blocks+0x40>
   811da:	e7c6      	b.n	8116a <sd_mmc_init_read_blocks+0xde>

000811dc <sd_mmc_start_read_blocks>:
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   811dc:	b510      	push	{r4, lr}
   811de:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   811e0:	f243 2389 	movw	r3, #12937	; 0x3289
   811e4:	f2c0 0308 	movt	r3, #8
   811e8:	4798      	blx	r3
   811ea:	b948      	cbnz	r0, 81200 <sd_mmc_start_read_blocks+0x24>
		sd_mmc_nb_block_remaining = 0;
   811ec:	f640 31a8 	movw	r1, #2984	; 0xba8
   811f0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   811f4:	f04f 0300 	mov.w	r3, #0
   811f8:	800b      	strh	r3, [r1, #0]
		return SD_MMC_ERR_COMM;
   811fa:	f04f 0005 	mov.w	r0, #5
   811fe:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
   81200:	f640 30a8 	movw	r0, #2984	; 0xba8
   81204:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81208:	8802      	ldrh	r2, [r0, #0]
   8120a:	1b14      	subs	r4, r2, r4
   8120c:	8004      	strh	r4, [r0, #0]
	return SD_MMC_OK;
   8120e:	f04f 0000 	mov.w	r0, #0
}
   81212:	bd10      	pop	{r4, pc}

00081214 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(void)
{
   81214:	b508      	push	{r3, lr}
	if (!driver_wait_end_of_read_blocks()) {
   81216:	f243 33a1 	movw	r3, #13217	; 0x33a1
   8121a:	f2c0 0308 	movt	r3, #8
   8121e:	4798      	blx	r3
   81220:	2800      	cmp	r0, #0
   81222:	d030      	beq.n	81286 <sd_mmc_wait_end_of_read_blocks+0x72>
		return SD_MMC_ERR_COMM;
	}
	if (sd_mmc_nb_block_remaining) {
   81224:	f640 30a8 	movw	r0, #2984	; 0xba8
   81228:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8122c:	8801      	ldrh	r1, [r0, #0]
   8122e:	2900      	cmp	r1, #0
   81230:	d12c      	bne.n	8128c <sd_mmc_wait_end_of_read_blocks+0x78>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   81232:	f640 32a0 	movw	r2, #2976	; 0xba0
   81236:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8123a:	8813      	ldrh	r3, [r2, #0]
   8123c:	2b01      	cmp	r3, #1
   8123e:	d107      	bne.n	81250 <sd_mmc_wait_end_of_read_blocks+0x3c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   81240:	f240 2129 	movw	r1, #553	; 0x229
   81244:	f2c0 0108 	movt	r1, #8
   81248:	4788      	blx	r1
		return SD_MMC_OK;
   8124a:	f04f 0000 	mov.w	r0, #0
   8124e:	bd08      	pop	{r3, pc}
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   81250:	f243 100c 	movw	r0, #12556	; 0x310c
   81254:	f04f 0100 	mov.w	r1, #0
   81258:	f243 028d 	movw	r2, #12429	; 0x308d
   8125c:	f2c0 0208 	movt	r2, #8
   81260:	4790      	blx	r2
   81262:	b940      	cbnz	r0, 81276 <sd_mmc_wait_end_of_read_blocks+0x62>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   81264:	f243 100c 	movw	r0, #12556	; 0x310c
   81268:	f04f 0100 	mov.w	r1, #0
   8126c:	f243 038d 	movw	r3, #12429	; 0x308d
   81270:	f2c0 0308 	movt	r3, #8
   81274:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   81276:	f240 2029 	movw	r0, #553	; 0x229
   8127a:	f2c0 0008 	movt	r0, #8
   8127e:	4780      	blx	r0
	return SD_MMC_OK;
   81280:	f04f 0000 	mov.w	r0, #0
   81284:	bd08      	pop	{r3, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(void)
{
	if (!driver_wait_end_of_read_blocks()) {
		return SD_MMC_ERR_COMM;
   81286:	f04f 0005 	mov.w	r0, #5
   8128a:	bd08      	pop	{r3, pc}
	}
	if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
   8128c:	f04f 0000 	mov.w	r0, #0
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   81290:	bd08      	pop	{r3, pc}
   81292:	bf00      	nop

00081294 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   81294:	b5f0      	push	{r4, r5, r6, r7, lr}
   81296:	b083      	sub	sp, #12
   81298:	4606      	mov	r6, r0
   8129a:	460f      	mov	r7, r1
   8129c:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   8129e:	f240 24d5 	movw	r4, #725	; 0x2d5
   812a2:	f2c0 0408 	movt	r4, #8
   812a6:	47a0      	blx	r4
	if (sd_mmc_err != SD_MMC_OK) {
   812a8:	4604      	mov	r4, r0
   812aa:	2800      	cmp	r0, #0
   812ac:	d158      	bne.n	81360 <sd_mmc_init_write_blocks+0xcc>
		return sd_mmc_err;
	}
	if (sd_mmc_is_write_protected(slot)) {
   812ae:	4630      	mov	r0, r6
   812b0:	f241 0385 	movw	r3, #4229	; 0x1085
   812b4:	f2c0 0308 	movt	r3, #8
   812b8:	4798      	blx	r3
   812ba:	b138      	cbz	r0, 812cc <sd_mmc_init_write_blocks+0x38>
		sd_mmc_deselect_slot();
   812bc:	f240 2329 	movw	r3, #553	; 0x229
   812c0:	f2c0 0308 	movt	r3, #8
   812c4:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   812c6:	f04f 0407 	mov.w	r4, #7
   812ca:	e049      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   812cc:	f249 1018 	movw	r0, #37144	; 0x9118
   812d0:	f2c0 0008 	movt	r0, #8
   812d4:	f249 1119 	movw	r1, #37145	; 0x9119
   812d8:	f2c0 0110 	movt	r1, #16
   812dc:	2d01      	cmp	r5, #1
   812de:	bf88      	it	hi
   812e0:	4608      	movhi	r0, r1
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   812e2:	f640 32a4 	movw	r2, #2980	; 0xba4
   812e6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   812ea:	6816      	ldr	r6, [r2, #0]
   812ec:	7bf3      	ldrb	r3, [r6, #15]
   812ee:	f003 0108 	and.w	r1, r3, #8
   812f2:	b2ca      	uxtb	r2, r1
   812f4:	b912      	cbnz	r2, 812fc <sd_mmc_init_write_blocks+0x68>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   812f6:	ea4f 2147 	mov.w	r1, r7, lsl #9
   812fa:	e000      	b.n	812fe <sd_mmc_init_write_blocks+0x6a>
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
   812fc:	4639      	mov	r1, r7
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   812fe:	f04f 0601 	mov.w	r6, #1
   81302:	9600      	str	r6, [sp, #0]
   81304:	f44f 7200 	mov.w	r2, #512	; 0x200
   81308:	462b      	mov	r3, r5
   8130a:	f243 161d 	movw	r6, #12573	; 0x311d
   8130e:	f2c0 0608 	movt	r6, #8
   81312:	47b0      	blx	r6
   81314:	b938      	cbnz	r0, 81326 <sd_mmc_init_write_blocks+0x92>
		sd_mmc_deselect_slot();
   81316:	f240 2029 	movw	r0, #553	; 0x229
   8131a:	f2c0 0008 	movt	r0, #8
   8131e:	4780      	blx	r0
		return SD_MMC_ERR_COMM;
   81320:	f04f 0405 	mov.w	r4, #5
   81324:	e01c      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
   81326:	f243 00b5 	movw	r0, #12469	; 0x30b5
   8132a:	f2c0 0008 	movt	r0, #8
   8132e:	4780      	blx	r0
		if (resp & CARD_STATUS_ERR_RD_WR) {
   81330:	f04f 0300 	mov.w	r3, #0
   81334:	f2ce 4358 	movt	r3, #58456	; 0xe458
   81338:	4003      	ands	r3, r0
   8133a:	b13b      	cbz	r3, 8134c <sd_mmc_init_write_blocks+0xb8>
			sd_mmc_debug("%s: Write blocks %02d r1 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
   8133c:	f240 2429 	movw	r4, #553	; 0x229
   81340:	f2c0 0408 	movt	r4, #8
   81344:	47a0      	blx	r4
			return SD_MMC_ERR_COMM;
   81346:	f04f 0405 	mov.w	r4, #5
   8134a:	e009      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   8134c:	f640 31a8 	movw	r1, #2984	; 0xba8
   81350:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81354:	800d      	strh	r5, [r1, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   81356:	f640 32a0 	movw	r2, #2976	; 0xba0
   8135a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8135e:	8015      	strh	r5, [r2, #0]
	return SD_MMC_OK;
}
   81360:	4620      	mov	r0, r4
   81362:	b003      	add	sp, #12
   81364:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81366:	bf00      	nop

00081368 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   81368:	b510      	push	{r4, lr}
   8136a:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   8136c:	f243 4319 	movw	r3, #13337	; 0x3419
   81370:	f2c0 0308 	movt	r3, #8
   81374:	4798      	blx	r3
   81376:	b948      	cbnz	r0, 8138c <sd_mmc_start_write_blocks+0x24>
		sd_mmc_nb_block_remaining = 0;
   81378:	f640 31a8 	movw	r1, #2984	; 0xba8
   8137c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81380:	f04f 0300 	mov.w	r3, #0
   81384:	800b      	strh	r3, [r1, #0]
		return SD_MMC_ERR_COMM;
   81386:	f04f 0005 	mov.w	r0, #5
   8138a:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
   8138c:	f640 30a8 	movw	r0, #2984	; 0xba8
   81390:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81394:	8802      	ldrh	r2, [r0, #0]
   81396:	1b14      	subs	r4, r2, r4
   81398:	8004      	strh	r4, [r0, #0]
	return SD_MMC_OK;
   8139a:	f04f 0000 	mov.w	r0, #0
}
   8139e:	bd10      	pop	{r4, pc}

000813a0 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(void)
{
   813a0:	b508      	push	{r3, lr}
	if (!driver_wait_end_of_write_blocks()) {
   813a2:	f243 5311 	movw	r3, #13585	; 0x3511
   813a6:	f2c0 0308 	movt	r3, #8
   813aa:	4798      	blx	r3
   813ac:	2800      	cmp	r0, #0
   813ae:	d02f      	beq.n	81410 <sd_mmc_wait_end_of_write_blocks+0x70>
		return SD_MMC_ERR_COMM;
	}
	if (sd_mmc_nb_block_remaining) {
   813b0:	f640 30a8 	movw	r0, #2984	; 0xba8
   813b4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   813b8:	8801      	ldrh	r1, [r0, #0]
   813ba:	2900      	cmp	r1, #0
   813bc:	d12b      	bne.n	81416 <sd_mmc_wait_end_of_write_blocks+0x76>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   813be:	f640 32a0 	movw	r2, #2976	; 0xba0
   813c2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   813c6:	8813      	ldrh	r3, [r2, #0]
   813c8:	2b01      	cmp	r3, #1
   813ca:	d107      	bne.n	813dc <sd_mmc_wait_end_of_write_blocks+0x3c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   813cc:	f240 2329 	movw	r3, #553	; 0x229
   813d0:	f2c0 0308 	movt	r3, #8
   813d4:	4798      	blx	r3
		return SD_MMC_OK;
   813d6:	f04f 0000 	mov.w	r0, #0
   813da:	bd08      	pop	{r3, pc}
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   813dc:	f243 100c 	movw	r0, #12556	; 0x310c
   813e0:	f04f 0100 	mov.w	r1, #0
   813e4:	f243 028d 	movw	r2, #12429	; 0x308d
   813e8:	f2c0 0208 	movt	r2, #8
   813ec:	4790      	blx	r2
   813ee:	b938      	cbnz	r0, 81400 <sd_mmc_wait_end_of_write_blocks+0x60>
			sd_mmc_deselect_slot();
   813f0:	f240 2129 	movw	r1, #553	; 0x229
   813f4:	f2c0 0108 	movt	r1, #8
   813f8:	4788      	blx	r1
			return SD_MMC_ERR_COMM;
   813fa:	f04f 0005 	mov.w	r0, #5
   813fe:	bd08      	pop	{r3, pc}
		}
	}
	sd_mmc_deselect_slot();
   81400:	f240 2029 	movw	r0, #553	; 0x229
   81404:	f2c0 0008 	movt	r0, #8
   81408:	4780      	blx	r0
	return SD_MMC_OK;
   8140a:	f04f 0000 	mov.w	r0, #0
   8140e:	bd08      	pop	{r3, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(void)
{
	if (!driver_wait_end_of_write_blocks()) {
		return SD_MMC_ERR_COMM;
   81410:	f04f 0005 	mov.w	r0, #5
   81414:	bd08      	pop	{r3, pc}
	}
	if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
   81416:	f04f 0000 	mov.w	r0, #0
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   8141a:	bd08      	pop	{r3, pc}

0008141c <DMM_ConfigureVoltageDc>:
    
    return SCPI_RES_OK;
}


scpi_result_t DMM_ConfigureVoltageDc(scpi_t * context) {
   8141c:	b570      	push	{r4, r5, r6, lr}
   8141e:	b086      	sub	sp, #24
   81420:	4605      	mov	r5, r0
    double param1, param2;
    printf("conf:volt:dc\r\n"); // debug command name   
   81422:	f641 24ec 	movw	r4, #6892	; 0x1aec
   81426:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8142a:	f24d 336c 	movw	r3, #54124	; 0xd36c
   8142e:	f2c0 0308 	movt	r3, #8
   81432:	cb07      	ldmia	r3!, {r0, r1, r2}
   81434:	6020      	str	r0, [r4, #0]
   81436:	6061      	str	r1, [r4, #4]
   81438:	60a2      	str	r2, [r4, #8]
   8143a:	881a      	ldrh	r2, [r3, #0]
   8143c:	7898      	ldrb	r0, [r3, #2]
   8143e:	81a2      	strh	r2, [r4, #12]
   81440:	73a0      	strb	r0, [r4, #14]
   81442:	4620      	mov	r0, r4
   81444:	f243 5189 	movw	r1, #13705	; 0x3589
   81448:	f2c0 0108 	movt	r1, #8
   8144c:	4788      	blx	r1

    // read first parameter if present
    if (!SCPI_ParamDouble(context, &param1, true)) {
   8144e:	4628      	mov	r0, r5
   81450:	a904      	add	r1, sp, #16
   81452:	f04f 0201 	mov.w	r2, #1
   81456:	f242 3305 	movw	r3, #8965	; 0x2305
   8145a:	f2c0 0308 	movt	r3, #8
   8145e:	4798      	blx	r3
   81460:	2800      	cmp	r0, #0
   81462:	d033      	beq.n	814cc <DMM_ConfigureVoltageDc+0xb0>
        return SCPI_RES_ERR;
    }

    // read second paraeter if present
    if (!SCPI_ParamDouble(context, &param2, false)) {
   81464:	4628      	mov	r0, r5
   81466:	a902      	add	r1, sp, #8
   81468:	f04f 0200 	mov.w	r2, #0
   8146c:	f242 3405 	movw	r4, #8965	; 0x2305
   81470:	f2c0 0408 	movt	r4, #8
   81474:	47a0      	blx	r4
        // do something, if parameter not present
    }

    printf("\tP1=%lf\r\n", param1);
   81476:	f641 24ec 	movw	r4, #6892	; 0x1aec
   8147a:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8147e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   81482:	e9cd 2300 	strd	r2, r3, [sp]
   81486:	4620      	mov	r0, r4
   81488:	f04f 0164 	mov.w	r1, #100	; 0x64
   8148c:	f24d 327c 	movw	r2, #54140	; 0xd37c
   81490:	f2c0 0208 	movt	r2, #8
   81494:	f249 0653 	movw	r6, #36947	; 0x9053
   81498:	f2c0 0608 	movt	r6, #8
   8149c:	47b0      	blx	r6
   8149e:	4620      	mov	r0, r4
   814a0:	f243 5589 	movw	r5, #13705	; 0x3589
   814a4:	f2c0 0508 	movt	r5, #8
   814a8:	47a8      	blx	r5
    printf("\tP2=%lf\r\n", param2);
   814aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   814ae:	e9cd 0100 	strd	r0, r1, [sp]
   814b2:	4620      	mov	r0, r4
   814b4:	f04f 0164 	mov.w	r1, #100	; 0x64
   814b8:	f24d 3288 	movw	r2, #54152	; 0xd388
   814bc:	f2c0 0208 	movt	r2, #8
   814c0:	47b0      	blx	r6
   814c2:	4620      	mov	r0, r4
   814c4:	47a8      	blx	r5

    return SCPI_RES_OK;
   814c6:	f04f 0101 	mov.w	r1, #1
   814ca:	e001      	b.n	814d0 <DMM_ConfigureVoltageDc+0xb4>
    double param1, param2;
    printf("conf:volt:dc\r\n"); // debug command name   

    // read first parameter if present
    if (!SCPI_ParamDouble(context, &param1, true)) {
        return SCPI_RES_ERR;
   814cc:	f04f 01ff 	mov.w	r1, #255	; 0xff

    printf("\tP1=%lf\r\n", param1);
    printf("\tP2=%lf\r\n", param2);

    return SCPI_RES_OK;
}
   814d0:	b248      	sxtb	r0, r1
   814d2:	b006      	add	sp, #24
   814d4:	bd70      	pop	{r4, r5, r6, pc}
   814d6:	bf00      	nop

000814d8 <DMM_MeasureVoltageDcQ>:
#include <string.h>
#include "SCPI/libscpi/scpi.h"
#include "scpi-def.h"
#include "cdc_comms.h"

scpi_result_t DMM_MeasureVoltageDcQ(scpi_t * context) {
   814d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   814dc:	b08c      	sub	sp, #48	; 0x30
   814de:	4605      	mov	r5, r0
    scpi_number_t param1, param2;
    char bf[15];
    printf("meas:volt:dc\r\n"); // debug command name   
   814e0:	f641 24ec 	movw	r4, #6892	; 0x1aec
   814e4:	f2c2 0407 	movt	r4, #8199	; 0x2007
   814e8:	f24d 3394 	movw	r3, #54164	; 0xd394
   814ec:	f2c0 0308 	movt	r3, #8
   814f0:	cb07      	ldmia	r3!, {r0, r1, r2}
   814f2:	6020      	str	r0, [r4, #0]
   814f4:	6061      	str	r1, [r4, #4]
   814f6:	60a2      	str	r2, [r4, #8]
   814f8:	881a      	ldrh	r2, [r3, #0]
   814fa:	7898      	ldrb	r0, [r3, #2]
   814fc:	81a2      	strh	r2, [r4, #12]
   814fe:	73a0      	strb	r0, [r4, #14]
   81500:	4620      	mov	r0, r4
   81502:	f243 5689 	movw	r6, #13705	; 0x3589
   81506:	f2c0 0608 	movt	r6, #8
   8150a:	47b0      	blx	r6

    // read first parameter if present
    if (!SCPI_ParamNumber(context, &param1, false)) {
   8150c:	4628      	mov	r0, r5
   8150e:	a908      	add	r1, sp, #32
   81510:	f04f 0200 	mov.w	r2, #0
   81514:	f242 37bd 	movw	r7, #9149	; 0x23bd
   81518:	f2c0 0708 	movt	r7, #8
   8151c:	47b8      	blx	r7
        // do something, if parameter not present
    }

    // read second paraeter if present
    if (!SCPI_ParamNumber(context, &param2, false)) {
   8151e:	4628      	mov	r0, r5
   81520:	a904      	add	r1, sp, #16
   81522:	f04f 0200 	mov.w	r2, #0
   81526:	47b8      	blx	r7
        // do something, if parameter not present
    }

    
    SCPI_NumberToStr(context, &param1, bf, 15);
   81528:	4628      	mov	r0, r5
   8152a:	a908      	add	r1, sp, #32
   8152c:	466a      	mov	r2, sp
   8152e:	f04f 030f 	mov.w	r3, #15
   81532:	f242 5815 	movw	r8, #9493	; 0x2515
   81536:	f2c0 0808 	movt	r8, #8
   8153a:	47c0      	blx	r8
    printf("\tP1=%s\r\n", bf);
   8153c:	4620      	mov	r0, r4
   8153e:	f04f 0164 	mov.w	r1, #100	; 0x64
   81542:	f24d 32a4 	movw	r2, #54180	; 0xd3a4
   81546:	f2c0 0208 	movt	r2, #8
   8154a:	466b      	mov	r3, sp
   8154c:	f249 0753 	movw	r7, #36947	; 0x9053
   81550:	f2c0 0708 	movt	r7, #8
   81554:	47b8      	blx	r7
   81556:	4620      	mov	r0, r4
   81558:	47b0      	blx	r6

    
    SCPI_NumberToStr(context, &param2, bf, 15);
   8155a:	4628      	mov	r0, r5
   8155c:	a904      	add	r1, sp, #16
   8155e:	466a      	mov	r2, sp
   81560:	f04f 030f 	mov.w	r3, #15
   81564:	47c0      	blx	r8
    printf("\tP2=%s\r\n", bf);
   81566:	4620      	mov	r0, r4
   81568:	f04f 0164 	mov.w	r1, #100	; 0x64
   8156c:	f24d 32b0 	movw	r2, #54192	; 0xd3b0
   81570:	f2c0 0208 	movt	r2, #8
   81574:	466b      	mov	r3, sp
   81576:	47b8      	blx	r7
   81578:	4620      	mov	r0, r4
   8157a:	47b0      	blx	r6

    SCPI_ResultDouble(context, 0);
   8157c:	4628      	mov	r0, r5
   8157e:	f04f 0200 	mov.w	r2, #0
   81582:	f04f 0300 	mov.w	r3, #0
   81586:	f242 11ed 	movw	r1, #8685	; 0x21ed
   8158a:	f2c0 0108 	movt	r1, #8
   8158e:	4788      	blx	r1
    
    return SCPI_RES_OK;
}
   81590:	f04f 0001 	mov.w	r0, #1
   81594:	b00c      	add	sp, #48	; 0x30
   81596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8159a:	bf00      	nop

0008159c <SCPI_ErrorInit>:
/* basic FIFO */
static fifo_t local_error_queue;



void SCPI_ErrorInit(scpi_t * context) {
   8159c:	b508      	push	{r3, lr}
     * // FreeRTOS
     * context->error_queue = (scpi_error_queue_t)xQueueCreate(100, sizeof(int16_t));
     */

    /* basic FIFO */
    context->error_queue = (scpi_error_queue_t)&local_error_queue;
   8159e:	f640 43bc 	movw	r3, #3260	; 0xcbc
   815a2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   815a6:	62c3      	str	r3, [r0, #44]	; 0x2c
    fifo_init((fifo_t *)context->error_queue);
   815a8:	4618      	mov	r0, r3
   815aa:	f241 71cd 	movw	r1, #6093	; 0x17cd
   815ae:	f2c0 0108 	movt	r1, #8
   815b2:	4788      	blx	r1
   815b4:	bd08      	pop	{r3, pc}
   815b6:	bf00      	nop

000815b8 <SCPI_ErrorClear>:

/**
 * Clear error queue
 * @param context - scpi context
 */
void SCPI_ErrorClear(scpi_t * context) {
   815b8:	b508      	push	{r3, lr}
     * // FreeRTOS
     * xQueueReset((xQueueHandle)context->error_queue);
     */

    /* basic FIFO */
    fifo_clear((fifo_t *)context->error_queue);
   815ba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   815bc:	f241 73dd 	movw	r3, #6109	; 0x17dd
   815c0:	f2c0 0308 	movt	r3, #8
   815c4:	4798      	blx	r3
   815c6:	bd08      	pop	{r3, pc}

000815c8 <SCPI_ErrorPop>:
/**
 * Pop error from queue
 * @param context - scpi context
 * @return error number
 */
int16_t SCPI_ErrorPop(scpi_t * context) {
   815c8:	b500      	push	{lr}
   815ca:	b083      	sub	sp, #12
    int16_t result = 0;
   815cc:	a902      	add	r1, sp, #8
   815ce:	f04f 0300 	mov.w	r3, #0
   815d2:	f821 3d02 	strh.w	r3, [r1, #-2]!
     *   result = 0;
     * }
     */

    /* basic FIFO */
    fifo_remove((fifo_t *)context->error_queue, &result);
   815d6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   815d8:	f241 72e9 	movw	r2, #6121	; 0x17e9
   815dc:	f2c0 0208 	movt	r2, #8
   815e0:	4790      	blx	r2

    return result;
}
   815e2:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   815e6:	b003      	add	sp, #12
   815e8:	bd00      	pop	{pc}
   815ea:	bf00      	nop

000815ec <SCPI_ErrorCount>:
/**
 * Return number of errors/events in the queue
 * @param context
 * @return 
 */
int32_t SCPI_ErrorCount(scpi_t * context) {
   815ec:	b500      	push	{lr}
   815ee:	b083      	sub	sp, #12
    int16_t result = 0;
   815f0:	a902      	add	r1, sp, #8
   815f2:	f04f 0300 	mov.w	r3, #0
   815f6:	f821 3d02 	strh.w	r3, [r1, #-2]!
     * // FreeRTOS
     * result = uxQueueMessagesWaiting((xQueueHandle)context->error_queue);
     */

    /* basic FIFO */
    fifo_count((fifo_t *)context->error_queue, &result);
   815fa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   815fc:	f641 0285 	movw	r2, #6277	; 0x1885
   81600:	f2c0 0208 	movt	r2, #8
   81604:	4790      	blx	r2

    return result;
}
   81606:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   8160a:	b003      	add	sp, #12
   8160c:	bd00      	pop	{pc}
   8160e:	bf00      	nop

00081610 <SCPI_ErrorPush>:
/**
 * Push error to queue
 * @param context - scpi context
 * @param err - error number
 */
void SCPI_ErrorPush(scpi_t * context, int16_t err) {
   81610:	b538      	push	{r3, r4, r5, lr}
   81612:	4605      	mov	r5, r0
   81614:	460c      	mov	r4, r1
     * // FreeRTOS
     * xQueueSend((xQueueHandle)context->error_queue, &err, 0);
     */

    /* basic FIFO */
    fifo_add((fifo_t *)context->error_queue, err);
   81616:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   81618:	f641 0329 	movw	r3, #6185	; 0x1829
   8161c:	f2c0 0308 	movt	r3, #8
   81620:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   81622:	f114 0f63 	cmn.w	r4, #99	; 0x63
   81626:	da0c      	bge.n	81642 <SCPI_ErrorPush+0x32>
   81628:	f114 0fc7 	cmn.w	r4, #199	; 0xc7
   8162c:	db09      	blt.n	81642 <SCPI_ErrorPush+0x32>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   8162e:	4628      	mov	r0, r5
   81630:	f04f 0102 	mov.w	r1, #2
   81634:	f04f 0220 	mov.w	r2, #32
   81638:	f641 2335 	movw	r3, #6709	; 0x1a35
   8163c:	f2c0 0308 	movt	r3, #8
   81640:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   81642:	f114 0fc7 	cmn.w	r4, #199	; 0xc7
   81646:	da0c      	bge.n	81662 <SCPI_ErrorPush+0x52>
   81648:	f514 7f96 	cmn.w	r4, #300	; 0x12c
   8164c:	dd09      	ble.n	81662 <SCPI_ErrorPush+0x52>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   8164e:	4628      	mov	r0, r5
   81650:	f04f 0102 	mov.w	r1, #2
   81654:	f04f 0210 	mov.w	r2, #16
   81658:	f641 2335 	movw	r3, #6709	; 0x1a35
   8165c:	f2c0 0308 	movt	r3, #8
   81660:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   81662:	f514 7f96 	cmn.w	r4, #300	; 0x12c
   81666:	dc0c      	bgt.n	81682 <SCPI_ErrorPush+0x72>
   81668:	f514 7fc8 	cmn.w	r4, #400	; 0x190
   8166c:	dd09      	ble.n	81682 <SCPI_ErrorPush+0x72>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   8166e:	4628      	mov	r0, r5
   81670:	f04f 0102 	mov.w	r1, #2
   81674:	f04f 0208 	mov.w	r2, #8
   81678:	f641 2335 	movw	r3, #6709	; 0x1a35
   8167c:	f2c0 0308 	movt	r3, #8
   81680:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   81682:	f514 7fc8 	cmn.w	r4, #400	; 0x190
   81686:	dc0c      	bgt.n	816a2 <SCPI_ErrorPush+0x92>
   81688:	f514 7ffa 	cmn.w	r4, #500	; 0x1f4
   8168c:	dd09      	ble.n	816a2 <SCPI_ErrorPush+0x92>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   8168e:	4628      	mov	r0, r5
   81690:	f04f 0102 	mov.w	r1, #2
   81694:	f04f 0204 	mov.w	r2, #4
   81698:	f641 2335 	movw	r3, #6709	; 0x1a35
   8169c:	f2c0 0308 	movt	r3, #8
   816a0:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   816a2:	f514 7ffa 	cmn.w	r4, #500	; 0x1f4
   816a6:	dc0c      	bgt.n	816c2 <SCPI_ErrorPush+0xb2>
   816a8:	f514 7f16 	cmn.w	r4, #600	; 0x258
   816ac:	dd09      	ble.n	816c2 <SCPI_ErrorPush+0xb2>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   816ae:	4628      	mov	r0, r5
   816b0:	f04f 0102 	mov.w	r1, #2
   816b4:	f04f 0280 	mov.w	r2, #128	; 0x80
   816b8:	f641 2335 	movw	r3, #6709	; 0x1a35
   816bc:	f2c0 0308 	movt	r3, #8
   816c0:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   816c2:	f514 7f16 	cmn.w	r4, #600	; 0x258
   816c6:	dc0c      	bgt.n	816e2 <SCPI_ErrorPush+0xd2>
   816c8:	f514 7f2f 	cmn.w	r4, #700	; 0x2bc
   816cc:	dd09      	ble.n	816e2 <SCPI_ErrorPush+0xd2>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   816ce:	4628      	mov	r0, r5
   816d0:	f04f 0102 	mov.w	r1, #2
   816d4:	f04f 0240 	mov.w	r2, #64	; 0x40
   816d8:	f641 2335 	movw	r3, #6709	; 0x1a35
   816dc:	f2c0 0308 	movt	r3, #8
   816e0:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   816e2:	f514 7f2f 	cmn.w	r4, #700	; 0x2bc
   816e6:	dc0b      	bgt.n	81700 <SCPI_ErrorPush+0xf0>
   816e8:	f514 7f48 	cmn.w	r4, #800	; 0x320
   816ec:	dd08      	ble.n	81700 <SCPI_ErrorPush+0xf0>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   816ee:	4628      	mov	r0, r5
   816f0:	f04f 0102 	mov.w	r1, #2
   816f4:	460a      	mov	r2, r1
   816f6:	f641 2335 	movw	r3, #6709	; 0x1a35
   816fa:	f2c0 0308 	movt	r3, #8
   816fe:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   81700:	f514 7f48 	cmn.w	r4, #800	; 0x320
   81704:	dc0c      	bgt.n	81720 <SCPI_ErrorPush+0x110>
   81706:	f514 7f61 	cmn.w	r4, #900	; 0x384
   8170a:	dd09      	ble.n	81720 <SCPI_ErrorPush+0x110>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   8170c:	4628      	mov	r0, r5
   8170e:	f04f 0102 	mov.w	r1, #2
   81712:	f04f 0201 	mov.w	r2, #1
   81716:	f641 2335 	movw	r3, #6709	; 0x1a35
   8171a:	f2c0 0308 	movt	r3, #8
   8171e:	4798      	blx	r3
        }
    }

    if (context) {
   81720:	b155      	cbz	r5, 81738 <SCPI_ErrorPush+0x128>
        if (context->interface && context->interface->error) {
   81722:	69e8      	ldr	r0, [r5, #28]
   81724:	b120      	cbz	r0, 81730 <SCPI_ErrorPush+0x120>
   81726:	6802      	ldr	r2, [r0, #0]
   81728:	b112      	cbz	r2, 81730 <SCPI_ErrorPush+0x120>
            context->interface->error(context, err);
   8172a:	4628      	mov	r0, r5
   8172c:	4621      	mov	r1, r4
   8172e:	4790      	blx	r2
        }

        context->cmd_error = TRUE;
   81730:	f04f 0101 	mov.w	r1, #1
   81734:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
   81738:	bd38      	pop	{r3, r4, r5, pc}
   8173a:	bf00      	nop

0008173c <SCPI_ErrorTranslate>:
 * Translate error number to string
 * @param err - error number
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
    switch (err) {
   8173c:	f110 0f6d 	cmn.w	r0, #109	; 0x6d
   81740:	d02b      	beq.n	8179a <SCPI_ErrorTranslate+0x5e>
   81742:	dc09      	bgt.n	81758 <SCPI_ErrorTranslate+0x1c>
   81744:	f110 0f83 	cmn.w	r0, #131	; 0x83
   81748:	d02c      	beq.n	817a4 <SCPI_ErrorTranslate+0x68>
   8174a:	f110 0f71 	cmn.w	r0, #113	; 0x71
   8174e:	d01a      	beq.n	81786 <SCPI_ErrorTranslate+0x4a>
   81750:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
   81754:	d130      	bne.n	817b8 <SCPI_ErrorTranslate+0x7c>
   81756:	e02a      	b.n	817ae <SCPI_ErrorTranslate+0x72>
   81758:	f110 0f67 	cmn.w	r0, #103	; 0x67
   8175c:	d00e      	beq.n	8177c <SCPI_ErrorTranslate+0x40>
   8175e:	dc03      	bgt.n	81768 <SCPI_ErrorTranslate+0x2c>
   81760:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
   81764:	d128      	bne.n	817b8 <SCPI_ErrorTranslate+0x7c>
   81766:	e013      	b.n	81790 <SCPI_ErrorTranslate+0x54>
   81768:	f110 0f66 	cmn.w	r0, #102	; 0x66
   8176c:	d029      	beq.n	817c2 <SCPI_ErrorTranslate+0x86>
   8176e:	2800      	cmp	r0, #0
   81770:	d122      	bne.n	817b8 <SCPI_ErrorTranslate+0x7c>
        case 0: return "No error";
   81772:	f24d 60f0 	movw	r0, #55024	; 0xd6f0
   81776:	f2c0 0008 	movt	r0, #8
   8177a:	4770      	bx	lr
        case SCPI_ERROR_SYNTAX: return "Syntax error";
        case SCPI_ERROR_INVALID_SEPARATOR: return "Invalid separator";
   8177c:	f24d 700c 	movw	r0, #55052	; 0xd70c
   81780:	f2c0 0008 	movt	r0, #8
   81784:	4770      	bx	lr
        case SCPI_ERROR_UNDEFINED_HEADER: return "Undefined header";
   81786:	f24d 7020 	movw	r0, #55072	; 0xd720
   8178a:	f2c0 0008 	movt	r0, #8
   8178e:	4770      	bx	lr
        case SCPI_ERROR_PARAMETER_NOT_ALLOWED: return "Parameter not allowed";
   81790:	f24d 7034 	movw	r0, #55092	; 0xd734
   81794:	f2c0 0008 	movt	r0, #8
   81798:	4770      	bx	lr
        case SCPI_ERROR_MISSING_PARAMETER: return "Missing parameter";
   8179a:	f24d 704c 	movw	r0, #55116	; 0xd74c
   8179e:	f2c0 0008 	movt	r0, #8
   817a2:	4770      	bx	lr
        case SCPI_ERROR_INVALID_SUFFIX: return "Invalid suffix";
   817a4:	f24d 7060 	movw	r0, #55136	; 0xd760
   817a8:	f2c0 0008 	movt	r0, #8
   817ac:	4770      	bx	lr
        case SCPI_ERROR_SUFFIX_NOT_ALLOWED: return "Suffix not allowed";
   817ae:	f24d 7070 	movw	r0, #55152	; 0xd770
   817b2:	f2c0 0008 	movt	r0, #8
   817b6:	4770      	bx	lr
        default: return "Unknown error";
   817b8:	f24d 7084 	movw	r0, #55172	; 0xd784
   817bc:	f2c0 0008 	movt	r0, #8
   817c0:	4770      	bx	lr
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
    switch (err) {
        case 0: return "No error";
        case SCPI_ERROR_SYNTAX: return "Syntax error";
   817c2:	f24d 60fc 	movw	r0, #55036	; 0xd6fc
   817c6:	f2c0 0008 	movt	r0, #8
        case SCPI_ERROR_MISSING_PARAMETER: return "Missing parameter";
        case SCPI_ERROR_INVALID_SUFFIX: return "Invalid suffix";
        case SCPI_ERROR_SUFFIX_NOT_ALLOWED: return "Suffix not allowed";
        default: return "Unknown error";
    }
}
   817ca:	4770      	bx	lr

000817cc <fifo_init>:

#include "fifo.h"

void fifo_init(fifo_t * fifo) {
    fifo->wr = 0;
   817cc:	f04f 0300 	mov.w	r3, #0
   817d0:	8003      	strh	r3, [r0, #0]
    fifo->rd = 0;
   817d2:	8043      	strh	r3, [r0, #2]
    fifo->size = FIFO_SIZE;
   817d4:	f04f 0110 	mov.w	r1, #16
   817d8:	8081      	strh	r1, [r0, #4]
   817da:	4770      	bx	lr

000817dc <fifo_clear>:
}

void fifo_clear(fifo_t * fifo) {
    fifo->wr = 0;
   817dc:	f04f 0300 	mov.w	r3, #0
   817e0:	8003      	strh	r3, [r0, #0]
    fifo->rd = 0;
   817e2:	8043      	strh	r3, [r0, #2]
   817e4:	4770      	bx	lr
   817e6:	bf00      	nop

000817e8 <fifo_remove>:
    fifo->wr = (fifo->wr + 1) % (fifo->size + 1);

    return TRUE;
}

bool_t fifo_remove(fifo_t * fifo, int16_t * value) {
   817e8:	b410      	push	{r4}
    /* FIFO empty? */
    if (fifo->wr == fifo->rd) {
   817ea:	8843      	ldrh	r3, [r0, #2]
   817ec:	f9b0 4000 	ldrsh.w	r4, [r0]
   817f0:	b21a      	sxth	r2, r3
   817f2:	4294      	cmp	r4, r2
   817f4:	d014      	beq.n	81820 <fifo_remove+0x38>
        return FALSE;
    }

    if(value) {
   817f6:	b119      	cbz	r1, 81800 <fifo_remove+0x18>
        *value = fifo->data[fifo->rd];
   817f8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
   817fc:	88d3      	ldrh	r3, [r2, #6]
   817fe:	800b      	strh	r3, [r1, #0]
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size + 1);
   81800:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   81804:	f102 0201 	add.w	r2, r2, #1
   81808:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   8180c:	f103 0301 	add.w	r3, r3, #1
   81810:	fb92 f1f3 	sdiv	r1, r2, r3
   81814:	fb03 2211 	mls	r2, r3, r1, r2
   81818:	8042      	strh	r2, [r0, #2]

    return TRUE;
   8181a:	f04f 0001 	mov.w	r0, #1
   8181e:	e001      	b.n	81824 <fifo_remove+0x3c>
}

bool_t fifo_remove(fifo_t * fifo, int16_t * value) {
    /* FIFO empty? */
    if (fifo->wr == fifo->rd) {
        return FALSE;
   81820:	f04f 0000 	mov.w	r0, #0
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size + 1);

    return TRUE;
}
   81824:	bc10      	pop	{r4}
   81826:	4770      	bx	lr

00081828 <fifo_add>:
void fifo_clear(fifo_t * fifo) {
    fifo->wr = 0;
    fifo->rd = 0;
}

bool_t fifo_add(fifo_t * fifo, int16_t value) {
   81828:	b538      	push	{r3, r4, r5, lr}
   8182a:	4604      	mov	r4, r0
   8182c:	460d      	mov	r5, r1
    /* FIFO full? */
    if (fifo->wr == ((fifo->rd + fifo->size) % (fifo->size + 1))) {
   8182e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   81832:	f9b0 1000 	ldrsh.w	r1, [r0]
   81836:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   8183a:	18d2      	adds	r2, r2, r3
   8183c:	f103 0301 	add.w	r3, r3, #1
   81840:	fb92 f0f3 	sdiv	r0, r2, r3
   81844:	fb03 2310 	mls	r3, r3, r0, r2
   81848:	4299      	cmp	r1, r3
   8184a:	d107      	bne.n	8185c <fifo_add+0x34>
        fifo_remove(fifo, NULL);
   8184c:	4620      	mov	r0, r4
   8184e:	f04f 0100 	mov.w	r1, #0
   81852:	f241 72e9 	movw	r2, #6121	; 0x17e9
   81856:	f2c0 0208 	movt	r2, #8
   8185a:	4790      	blx	r2
    }

    fifo->data[fifo->wr] = value;
   8185c:	f9b4 0000 	ldrsh.w	r0, [r4]
   81860:	eb04 0140 	add.w	r1, r4, r0, lsl #1
   81864:	80cd      	strh	r5, [r1, #6]
    fifo->wr = (fifo->wr + 1) % (fifo->size + 1);
   81866:	f100 0001 	add.w	r0, r0, #1
   8186a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   8186e:	f103 0301 	add.w	r3, r3, #1
   81872:	fb90 f2f3 	sdiv	r2, r0, r3
   81876:	fb03 0012 	mls	r0, r3, r2, r0
   8187a:	8020      	strh	r0, [r4, #0]

    return TRUE;
}
   8187c:	f04f 0001 	mov.w	r0, #1
   81880:	bd38      	pop	{r3, r4, r5, pc}
   81882:	bf00      	nop

00081884 <fifo_count>:

    return TRUE;
}

bool_t fifo_count(fifo_t * fifo, int16_t * value) {
    *value = fifo->wr - fifo->rd;
   81884:	8802      	ldrh	r2, [r0, #0]
   81886:	8843      	ldrh	r3, [r0, #2]
   81888:	1ad2      	subs	r2, r2, r3
   8188a:	b292      	uxth	r2, r2
   8188c:	b293      	uxth	r3, r2
   8188e:	800b      	strh	r3, [r1, #0]
    if (*value < 0) {
   81890:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   81894:	d004      	beq.n	818a0 <fifo_count+0x1c>
        *value += (fifo->size + 1);
   81896:	8880      	ldrh	r0, [r0, #4]
   81898:	f100 0001 	add.w	r0, r0, #1
   8189c:	1812      	adds	r2, r2, r0
   8189e:	800a      	strh	r2, [r1, #0]
    }
    return TRUE;
}
   818a0:	f04f 0001 	mov.w	r0, #1
   818a4:	4770      	bx	lr
   818a6:	bf00      	nop

000818a8 <SCPI_RegGet>:
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
    if ((name < SCPI_REG_COUNT) && (context->registers != NULL)) {
   818a8:	2907      	cmp	r1, #7
   818aa:	d804      	bhi.n	818b6 <SCPI_RegGet+0xe>
   818ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
   818ae:	b12b      	cbz	r3, 818bc <SCPI_RegGet+0x14>
        return context->registers[name];
   818b0:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
   818b4:	4770      	bx	lr
    } else {
        return 0;
   818b6:	f04f 0000 	mov.w	r0, #0
   818ba:	4770      	bx	lr
   818bc:	f04f 0000 	mov.w	r0, #0
    }
}
   818c0:	4770      	bx	lr
   818c2:	bf00      	nop

000818c4 <SCPI_RegClearBits>:
/**
 * Clear register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegClearBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
   818c4:	b570      	push	{r4, r5, r6, lr}
   818c6:	4605      	mov	r5, r0
   818c8:	460c      	mov	r4, r1
   818ca:	4616      	mov	r6, r2
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
   818cc:	f641 03a9 	movw	r3, #6313	; 0x18a9
   818d0:	f2c0 0308 	movt	r3, #8
   818d4:	4798      	blx	r3
   818d6:	ea20 0206 	bic.w	r2, r0, r6
   818da:	4628      	mov	r0, r5
   818dc:	4621      	mov	r1, r4
   818de:	b292      	uxth	r2, r2
   818e0:	f641 1321 	movw	r3, #6433	; 0x1921
   818e4:	f2c0 0308 	movt	r3, #8
   818e8:	4798      	blx	r3
   818ea:	bd70      	pop	{r4, r5, r6, pc}

000818ec <regUpdateSTB>:
 * @param context
 * @param val value of register
 * @param mask name of mask register (enable register)
 * @param stbBits bits to clear or set in STB
 */
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
   818ec:	b570      	push	{r4, r5, r6, lr}
   818ee:	4605      	mov	r5, r0
   818f0:	460e      	mov	r6, r1
   818f2:	461c      	mov	r4, r3
    if (val & SCPI_RegGet(context, mask)) {
   818f4:	4611      	mov	r1, r2
   818f6:	f641 03a9 	movw	r3, #6313	; 0x18a9
   818fa:	f2c0 0308 	movt	r3, #8
   818fe:	4798      	blx	r3
   81900:	4230      	tst	r0, r6
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
   81902:	4628      	mov	r0, r5
   81904:	f04f 0100 	mov.w	r1, #0
   81908:	4622      	mov	r2, r4
   8190a:	bf19      	ittee	ne
   8190c:	f641 2335 	movwne	r3, #6709	; 0x1a35
   81910:	f2c0 0308 	movtne	r3, #8
    } else {
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
   81914:	f641 03c5 	movweq	r3, #6341	; 0x18c5
   81918:	f2c0 0308 	movteq	r3, #8
   8191c:	4798      	blx	r3
   8191e:	bd70      	pop	{r4, r5, r6, pc}

00081920 <SCPI_RegSet>:
/**
 * Set register value
 * @param name - register name
 * @param val - new value
 */
void SCPI_RegSet(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t val) {
   81920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81922:	4605      	mov	r5, r0
   81924:	460c      	mov	r4, r1
   81926:	4616      	mov	r6, r2
    bool_t srq = FALSE;
    scpi_reg_val_t mask;
    scpi_reg_val_t old_val;

    if ((name >= SCPI_REG_COUNT) || (context->registers == NULL)) {
   81928:	2907      	cmp	r1, #7
   8192a:	f200 8081 	bhi.w	81a30 <SCPI_RegSet+0x110>
   8192e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81930:	2b00      	cmp	r3, #0
   81932:	d07d      	beq.n	81a30 <SCPI_RegSet+0x110>
        return;
    }
    
    /* store old register value */
    old_val = context->registers[name];
   81934:	f833 7011 	ldrh.w	r7, [r3, r1, lsl #1]

    /* set register value */
    context->registers[name] = val;
   81938:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

    /** @TODO: remove recutsion */
    switch (name) {
   8193c:	2907      	cmp	r1, #7
   8193e:	d857      	bhi.n	819f0 <SCPI_RegSet+0xd0>
   81940:	e8df f001 	tbb	[pc, r1]
   81944:	281d1504 	.word	0x281d1504
   81948:	3b304e43 	.word	0x3b304e43
        case SCPI_REG_STB:
            mask = SCPI_RegGet(context, SCPI_REG_SRE);
   8194c:	f04f 0101 	mov.w	r1, #1
   81950:	f641 02a9 	movw	r2, #6313	; 0x18a9
   81954:	f2c0 0208 	movt	r2, #8
   81958:	4790      	blx	r2
            mask &= ~STB_SRQ;
   8195a:	f64f 71bf 	movw	r1, #65471	; 0xffbf
   8195e:	4031      	ands	r1, r6
            if (val & mask) {
   81960:	4201      	tst	r1, r0
   81962:	d052      	beq.n	81a0a <SCPI_RegSet+0xea>
                val |= STB_SRQ;
   81964:	f046 0640 	orr.w	r6, r6, #64	; 0x40
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
   81968:	42b7      	cmp	r7, r6
   8196a:	d153      	bne.n	81a14 <SCPI_RegSet+0xf4>
   8196c:	e04e      	b.n	81a0c <SCPI_RegSet+0xec>
            } else {
                val &= ~STB_SRQ;
            }
            break;
        case SCPI_REG_SRE:
            regUpdate(context, SCPI_REG_STB);
   8196e:	f04f 0100 	mov.w	r1, #0
   81972:	f641 235d 	movw	r3, #6749	; 0x1a5d
   81976:	f2c0 0308 	movt	r3, #8
   8197a:	4798      	blx	r3
            break;
   8197c:	e046      	b.n	81a0c <SCPI_RegSet+0xec>
        case SCPI_REG_ESR:
            regUpdateSTB(context, val, SCPI_REG_ESE, STB_ESR);
   8197e:	4611      	mov	r1, r2
   81980:	f04f 0203 	mov.w	r2, #3
   81984:	f04f 0320 	mov.w	r3, #32
   81988:	f641 07ed 	movw	r7, #6381	; 0x18ed
   8198c:	f2c0 0708 	movt	r7, #8
   81990:	47b8      	blx	r7
            break;
   81992:	e03b      	b.n	81a0c <SCPI_RegSet+0xec>
        case SCPI_REG_ESE:
            regUpdate(context, SCPI_REG_ESR);
   81994:	f04f 0102 	mov.w	r1, #2
   81998:	f641 225d 	movw	r2, #6749	; 0x1a5d
   8199c:	f2c0 0208 	movt	r2, #8
   819a0:	4790      	blx	r2
            break;
   819a2:	e033      	b.n	81a0c <SCPI_RegSet+0xec>
        case SCPI_REG_QUES:
            regUpdateSTB(context, val, SCPI_REG_QUESE, STB_QES);
   819a4:	4611      	mov	r1, r2
   819a6:	f04f 0207 	mov.w	r2, #7
   819aa:	f04f 0308 	mov.w	r3, #8
   819ae:	f641 07ed 	movw	r7, #6381	; 0x18ed
   819b2:	f2c0 0708 	movt	r7, #8
   819b6:	47b8      	blx	r7
            break;
   819b8:	e028      	b.n	81a0c <SCPI_RegSet+0xec>
        case SCPI_REG_QUESE:
            regUpdate(context, SCPI_REG_QUES);
   819ba:	f04f 0106 	mov.w	r1, #6
   819be:	f641 225d 	movw	r2, #6749	; 0x1a5d
   819c2:	f2c0 0208 	movt	r2, #8
   819c6:	4790      	blx	r2
            break;
   819c8:	e020      	b.n	81a0c <SCPI_RegSet+0xec>
        case SCPI_REG_OPER:
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
   819ca:	4611      	mov	r1, r2
   819cc:	f04f 0205 	mov.w	r2, #5
   819d0:	f04f 0380 	mov.w	r3, #128	; 0x80
   819d4:	f641 07ed 	movw	r7, #6381	; 0x18ed
   819d8:	f2c0 0708 	movt	r7, #8
   819dc:	47b8      	blx	r7
            break;
   819de:	e015      	b.n	81a0c <SCPI_RegSet+0xec>
        case SCPI_REG_OPERE:
            regUpdate(context, SCPI_REG_OPER);
   819e0:	f04f 0104 	mov.w	r1, #4
   819e4:	f641 235d 	movw	r3, #6749	; 0x1a5d
   819e8:	f2c0 0308 	movt	r3, #8
   819ec:	4798      	blx	r3
            break;
   819ee:	e00d      	b.n	81a0c <SCPI_RegSet+0xec>
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
   819f0:	6b00      	ldr	r0, [r0, #48]	; 0x30
   819f2:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
   819f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
    if (context && context->interface && context->interface->control) {
   819f8:	69e9      	ldr	r1, [r5, #28]
   819fa:	b1c9      	cbz	r1, 81a30 <SCPI_RegSet+0x110>
   819fc:	688b      	ldr	r3, [r1, #8]
   819fe:	b1bb      	cbz	r3, 81a30 <SCPI_RegSet+0x110>
        return context->interface->control(context, ctrl, val);
   81a00:	4628      	mov	r0, r5
   81a02:	f04f 0101 	mov.w	r1, #1
   81a06:	4798      	blx	r3
   81a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
                    srq = TRUE;
                }
            } else {
                val &= ~STB_SRQ;
   81a0a:	460e      	mov	r6, r1
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
   81a0c:	6b28      	ldr	r0, [r5, #48]	; 0x30
   81a0e:	f820 6014 	strh.w	r6, [r0, r4, lsl #1]
   81a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81a14:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   81a16:	f823 6014 	strh.w	r6, [r3, r4, lsl #1]

    if (srq) {
        writeControl(context, SCPI_CTRL_SRQ, SCPI_RegGet(context, SCPI_REG_STB));
   81a1a:	4628      	mov	r0, r5
   81a1c:	f04f 0100 	mov.w	r1, #0
   81a20:	f641 02a9 	movw	r2, #6313	; 0x18a9
   81a24:	f2c0 0208 	movt	r2, #8
   81a28:	4790      	blx	r2
   81a2a:	4602      	mov	r2, r0
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
    if (context && context->interface && context->interface->control) {
   81a2c:	2d00      	cmp	r5, #0
   81a2e:	d1e3      	bne.n	819f8 <SCPI_RegSet+0xd8>
   81a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81a32:	bf00      	nop

00081a34 <SCPI_RegSetBits>:
/**
 * Set register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegSetBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
   81a34:	b570      	push	{r4, r5, r6, lr}
   81a36:	4605      	mov	r5, r0
   81a38:	460c      	mov	r4, r1
   81a3a:	4616      	mov	r6, r2
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
   81a3c:	f641 03a9 	movw	r3, #6313	; 0x18a9
   81a40:	f2c0 0308 	movt	r3, #8
   81a44:	4798      	blx	r3
   81a46:	ea40 0206 	orr.w	r2, r0, r6
   81a4a:	4628      	mov	r0, r5
   81a4c:	4621      	mov	r1, r4
   81a4e:	b292      	uxth	r2, r2
   81a50:	f641 1321 	movw	r3, #6433	; 0x1921
   81a54:	f2c0 0308 	movt	r3, #8
   81a58:	4798      	blx	r3
   81a5a:	bd70      	pop	{r4, r5, r6, pc}

00081a5c <regUpdate>:
/**
 * Update register value
 * @param context
 * @param name - register name
 */
static void regUpdate(scpi_t * context, scpi_reg_name_t name) {
   81a5c:	b538      	push	{r3, r4, r5, lr}
   81a5e:	4605      	mov	r5, r0
   81a60:	460c      	mov	r4, r1
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
   81a62:	f641 03a9 	movw	r3, #6313	; 0x18a9
   81a66:	f2c0 0308 	movt	r3, #8
   81a6a:	4798      	blx	r3
   81a6c:	4602      	mov	r2, r0
   81a6e:	4628      	mov	r0, r5
   81a70:	4621      	mov	r1, r4
   81a72:	f641 1321 	movw	r3, #6433	; 0x1921
   81a76:	f2c0 0308 	movt	r3, #8
   81a7a:	4798      	blx	r3
   81a7c:	bd38      	pop	{r3, r4, r5, pc}
   81a7e:	bf00      	nop

00081a80 <SCPI_EventClear>:

/**
 * Clear event register
 * @param context
 */
void SCPI_EventClear(scpi_t * context) {
   81a80:	b508      	push	{r3, lr}
    /* TODO */
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
   81a82:	f04f 0102 	mov.w	r1, #2
   81a86:	f04f 0200 	mov.w	r2, #0
   81a8a:	f641 1321 	movw	r3, #6433	; 0x1921
   81a8e:	f2c0 0308 	movt	r3, #8
   81a92:	4798      	blx	r3
   81a94:	bd08      	pop	{r3, pc}
   81a96:	bf00      	nop

00081a98 <SCPI_CoreCls>:
 * *CLS - This command clears all status data structures in a device. 
 *        For a device which minimally complies with SCPI. (SCPI std 4.1.3.2)
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreCls(scpi_t * context) {
   81a98:	b538      	push	{r3, r4, r5, lr}
   81a9a:	4604      	mov	r4, r0
    SCPI_EventClear(context);
   81a9c:	f641 2381 	movw	r3, #6785	; 0x1a81
   81aa0:	f2c0 0308 	movt	r3, #8
   81aa4:	4798      	blx	r3
    SCPI_ErrorClear(context);
   81aa6:	4620      	mov	r0, r4
   81aa8:	f241 51b9 	movw	r1, #5561	; 0x15b9
   81aac:	f2c0 0108 	movt	r1, #8
   81ab0:	4788      	blx	r1
    SCPI_RegSet(context, SCPI_REG_OPER, 0);
   81ab2:	4620      	mov	r0, r4
   81ab4:	f04f 0104 	mov.w	r1, #4
   81ab8:	f04f 0200 	mov.w	r2, #0
   81abc:	f641 1521 	movw	r5, #6433	; 0x1921
   81ac0:	f2c0 0508 	movt	r5, #8
   81ac4:	47a8      	blx	r5
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
   81ac6:	4620      	mov	r0, r4
   81ac8:	f04f 0106 	mov.w	r1, #6
   81acc:	f04f 0200 	mov.w	r2, #0
   81ad0:	47a8      	blx	r5
    return SCPI_RES_OK;
}
   81ad2:	f04f 0001 	mov.w	r0, #1
   81ad6:	bd38      	pop	{r3, r4, r5, pc}

00081ad8 <SCPI_CoreEse>:
/**
 * *ESE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEse(scpi_t * context) {
   81ad8:	b510      	push	{r4, lr}
   81ada:	b082      	sub	sp, #8
   81adc:	4604      	mov	r4, r0
    int32_t new_ESE;
    if (SCPI_ParamInt(context, &new_ESE, TRUE)) {
   81ade:	a901      	add	r1, sp, #4
   81ae0:	f04f 0201 	mov.w	r2, #1
   81ae4:	f242 3361 	movw	r3, #9057	; 0x2361
   81ae8:	f2c0 0308 	movt	r3, #8
   81aec:	4798      	blx	r3
   81aee:	b148      	cbz	r0, 81b04 <SCPI_CoreEse+0x2c>
        SCPI_RegSet(context, SCPI_REG_ESE, new_ESE);
   81af0:	4620      	mov	r0, r4
   81af2:	f04f 0103 	mov.w	r1, #3
   81af6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   81afa:	f641 1321 	movw	r3, #6433	; 0x1921
   81afe:	f2c0 0308 	movt	r3, #8
   81b02:	4798      	blx	r3
    }
    return SCPI_RES_OK;
}
   81b04:	f04f 0001 	mov.w	r0, #1
   81b08:	b002      	add	sp, #8
   81b0a:	bd10      	pop	{r4, pc}

00081b0c <SCPI_CoreEseQ>:
/**
 * *ESE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEseQ(scpi_t * context) {
   81b0c:	b510      	push	{r4, lr}
   81b0e:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_ESE));
   81b10:	f04f 0103 	mov.w	r1, #3
   81b14:	f641 03a9 	movw	r3, #6313	; 0x18a9
   81b18:	f2c0 0308 	movt	r3, #8
   81b1c:	4798      	blx	r3
   81b1e:	4601      	mov	r1, r0
   81b20:	4620      	mov	r0, r4
   81b22:	f242 12a5 	movw	r2, #8613	; 0x21a5
   81b26:	f2c0 0208 	movt	r2, #8
   81b2a:	4790      	blx	r2
    return SCPI_RES_OK;
}
   81b2c:	f04f 0001 	mov.w	r0, #1
   81b30:	bd10      	pop	{r4, pc}
   81b32:	bf00      	nop

00081b34 <SCPI_CoreEsrQ>:
/**
 * *ESR?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEsrQ(scpi_t * context) {
   81b34:	b510      	push	{r4, lr}
   81b36:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_ESR));
   81b38:	f04f 0102 	mov.w	r1, #2
   81b3c:	f641 03a9 	movw	r3, #6313	; 0x18a9
   81b40:	f2c0 0308 	movt	r3, #8
   81b44:	4798      	blx	r3
   81b46:	4601      	mov	r1, r0
   81b48:	4620      	mov	r0, r4
   81b4a:	f242 12a5 	movw	r2, #8613	; 0x21a5
   81b4e:	f2c0 0208 	movt	r2, #8
   81b52:	4790      	blx	r2
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
   81b54:	4620      	mov	r0, r4
   81b56:	f04f 0102 	mov.w	r1, #2
   81b5a:	f04f 0200 	mov.w	r2, #0
   81b5e:	f641 1321 	movw	r3, #6433	; 0x1921
   81b62:	f2c0 0308 	movt	r3, #8
   81b66:	4798      	blx	r3
    return SCPI_RES_OK;
}
   81b68:	f04f 0001 	mov.w	r0, #1
   81b6c:	bd10      	pop	{r4, pc}
   81b6e:	bf00      	nop

00081b70 <SCPI_CoreIdnQ>:
/**
 * *IDN?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreIdnQ(scpi_t * context) {
   81b70:	b538      	push	{r3, r4, r5, lr}
   81b72:	4605      	mov	r5, r0
    SCPI_ResultString(context, SCPI_MANUFACTURE);
   81b74:	f24d 7194 	movw	r1, #55188	; 0xd794
   81b78:	f2c0 0108 	movt	r1, #8
   81b7c:	f242 1465 	movw	r4, #8549	; 0x2165
   81b80:	f2c0 0408 	movt	r4, #8
   81b84:	47a0      	blx	r4
    SCPI_ResultString(context, SCPI_DEV_NAME);
   81b86:	4628      	mov	r0, r5
   81b88:	f24d 719c 	movw	r1, #55196	; 0xd79c
   81b8c:	f2c0 0108 	movt	r1, #8
   81b90:	47a0      	blx	r4
    SCPI_ResultString(context, SCPI_DEV_VERSION);
   81b92:	4628      	mov	r0, r5
   81b94:	f24d 71bc 	movw	r1, #55228	; 0xd7bc
   81b98:	f2c0 0108 	movt	r1, #8
   81b9c:	47a0      	blx	r4
    return SCPI_RES_OK;
}
   81b9e:	f04f 0001 	mov.w	r0, #1
   81ba2:	bd38      	pop	{r3, r4, r5, pc}

00081ba4 <SCPI_CoreOpc>:
/**
 * *OPC
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpc(scpi_t * context) {
   81ba4:	b508      	push	{r3, lr}
    SCPI_RegSetBits(context, SCPI_REG_ESR, ESR_OPC);
   81ba6:	f04f 0102 	mov.w	r1, #2
   81baa:	f04f 0201 	mov.w	r2, #1
   81bae:	f641 2335 	movw	r3, #6709	; 0x1a35
   81bb2:	f2c0 0308 	movt	r3, #8
   81bb6:	4798      	blx	r3
    return SCPI_RES_OK;
}
   81bb8:	f04f 0001 	mov.w	r0, #1
   81bbc:	bd08      	pop	{r3, pc}
   81bbe:	bf00      	nop

00081bc0 <SCPI_CoreOpcQ>:
/**
 * *OPC?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpcQ(scpi_t * context) {
   81bc0:	b508      	push	{r3, lr}
    /* Operation is always completed */
    SCPI_ResultInt(context, 1);
   81bc2:	f04f 0101 	mov.w	r1, #1
   81bc6:	f242 13a5 	movw	r3, #8613	; 0x21a5
   81bca:	f2c0 0308 	movt	r3, #8
   81bce:	4798      	blx	r3
    return SCPI_RES_OK;
}
   81bd0:	f04f 0001 	mov.w	r0, #1
   81bd4:	bd08      	pop	{r3, pc}
   81bd6:	bf00      	nop

00081bd8 <SCPI_CoreRst>:
/**
 * *RST
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreRst(scpi_t * context) {
   81bd8:	b508      	push	{r3, lr}
    if (context && context->interface && context->interface->reset) {
   81bda:	b128      	cbz	r0, 81be8 <SCPI_CoreRst+0x10>
   81bdc:	69c3      	ldr	r3, [r0, #28]
   81bde:	b133      	cbz	r3, 81bee <SCPI_CoreRst+0x16>
   81be0:	6919      	ldr	r1, [r3, #16]
   81be2:	b139      	cbz	r1, 81bf4 <SCPI_CoreRst+0x1c>
        return context->interface->reset(context);
   81be4:	4788      	blx	r1
   81be6:	e007      	b.n	81bf8 <SCPI_CoreRst+0x20>
    }
    return SCPI_RES_OK;
   81be8:	f04f 0001 	mov.w	r0, #1
   81bec:	e004      	b.n	81bf8 <SCPI_CoreRst+0x20>
   81bee:	f04f 0001 	mov.w	r0, #1
   81bf2:	e001      	b.n	81bf8 <SCPI_CoreRst+0x20>
   81bf4:	f04f 0001 	mov.w	r0, #1
}
   81bf8:	b240      	sxtb	r0, r0
   81bfa:	bd08      	pop	{r3, pc}

00081bfc <SCPI_CoreSre>:
/**
 * *SRE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSre(scpi_t * context) {
   81bfc:	b510      	push	{r4, lr}
   81bfe:	b082      	sub	sp, #8
   81c00:	4604      	mov	r4, r0
    int32_t new_SRE;
    if (SCPI_ParamInt(context, &new_SRE, TRUE)) {
   81c02:	a901      	add	r1, sp, #4
   81c04:	f04f 0201 	mov.w	r2, #1
   81c08:	f242 3361 	movw	r3, #9057	; 0x2361
   81c0c:	f2c0 0308 	movt	r3, #8
   81c10:	4798      	blx	r3
   81c12:	b148      	cbz	r0, 81c28 <SCPI_CoreSre+0x2c>
        SCPI_RegSet(context, SCPI_REG_SRE, new_SRE);
   81c14:	4620      	mov	r0, r4
   81c16:	f04f 0101 	mov.w	r1, #1
   81c1a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   81c1e:	f641 1321 	movw	r3, #6433	; 0x1921
   81c22:	f2c0 0308 	movt	r3, #8
   81c26:	4798      	blx	r3
    }
    return SCPI_RES_OK;
}
   81c28:	f04f 0001 	mov.w	r0, #1
   81c2c:	b002      	add	sp, #8
   81c2e:	bd10      	pop	{r4, pc}

00081c30 <SCPI_CoreSreQ>:
/**
 * *SRE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSreQ(scpi_t * context) {
   81c30:	b510      	push	{r4, lr}
   81c32:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_SRE));
   81c34:	f04f 0101 	mov.w	r1, #1
   81c38:	f641 03a9 	movw	r3, #6313	; 0x18a9
   81c3c:	f2c0 0308 	movt	r3, #8
   81c40:	4798      	blx	r3
   81c42:	4601      	mov	r1, r0
   81c44:	4620      	mov	r0, r4
   81c46:	f242 12a5 	movw	r2, #8613	; 0x21a5
   81c4a:	f2c0 0208 	movt	r2, #8
   81c4e:	4790      	blx	r2
    return SCPI_RES_OK;
}
   81c50:	f04f 0001 	mov.w	r0, #1
   81c54:	bd10      	pop	{r4, pc}
   81c56:	bf00      	nop

00081c58 <SCPI_CoreStbQ>:
/**
 * *STB?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreStbQ(scpi_t * context) {
   81c58:	b510      	push	{r4, lr}
   81c5a:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_STB));
   81c5c:	f04f 0100 	mov.w	r1, #0
   81c60:	f641 03a9 	movw	r3, #6313	; 0x18a9
   81c64:	f2c0 0308 	movt	r3, #8
   81c68:	4798      	blx	r3
   81c6a:	4601      	mov	r1, r0
   81c6c:	4620      	mov	r0, r4
   81c6e:	f242 12a5 	movw	r2, #8613	; 0x21a5
   81c72:	f2c0 0208 	movt	r2, #8
   81c76:	4790      	blx	r2
    return SCPI_RES_OK;
}
   81c78:	f04f 0001 	mov.w	r0, #1
   81c7c:	bd10      	pop	{r4, pc}
   81c7e:	bf00      	nop

00081c80 <SCPI_CoreTstQ>:
/**
 * *TST?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreTstQ(scpi_t * context) {
   81c80:	b510      	push	{r4, lr}
    int result = 0;
    if (context && context->interface && context->interface->test) {
   81c82:	4604      	mov	r4, r0
   81c84:	b130      	cbz	r0, 81c94 <SCPI_CoreTstQ+0x14>
   81c86:	69c3      	ldr	r3, [r0, #28]
   81c88:	b13b      	cbz	r3, 81c9a <SCPI_CoreTstQ+0x1a>
   81c8a:	6959      	ldr	r1, [r3, #20]
   81c8c:	b141      	cbz	r1, 81ca0 <SCPI_CoreTstQ+0x20>
        result = context->interface->test(context);
   81c8e:	4788      	blx	r1
   81c90:	4601      	mov	r1, r0
   81c92:	e007      	b.n	81ca4 <SCPI_CoreTstQ+0x24>
 * *TST?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreTstQ(scpi_t * context) {
    int result = 0;
   81c94:	f04f 0100 	mov.w	r1, #0
   81c98:	e004      	b.n	81ca4 <SCPI_CoreTstQ+0x24>
   81c9a:	f04f 0100 	mov.w	r1, #0
   81c9e:	e001      	b.n	81ca4 <SCPI_CoreTstQ+0x24>
   81ca0:	f04f 0100 	mov.w	r1, #0
    if (context && context->interface && context->interface->test) {
        result = context->interface->test(context);
    }
    SCPI_ResultInt(context, result);
   81ca4:	4620      	mov	r0, r4
   81ca6:	f242 12a5 	movw	r2, #8613	; 0x21a5
   81caa:	f2c0 0208 	movt	r2, #8
   81cae:	4790      	blx	r2
    return SCPI_RES_OK;
}
   81cb0:	f04f 0001 	mov.w	r0, #1
   81cb4:	bd10      	pop	{r4, pc}
   81cb6:	bf00      	nop

00081cb8 <SCPI_CoreWai>:
 */
scpi_result_t SCPI_CoreWai(scpi_t * context) {
    (void) context;
    /* NOP */
    return SCPI_RES_OK;
}
   81cb8:	f04f 0001 	mov.w	r0, #1
   81cbc:	4770      	bx	lr
   81cbe:	bf00      	nop

00081cc0 <SCPI_StubQ>:
/**
 * Query command stub function
 * @param context
 * @return 
 */
scpi_result_t SCPI_StubQ(scpi_t * context) {
   81cc0:	b508      	push	{r3, lr}
    SCPI_ResultString(context, "");
   81cc2:	f64d 2188 	movw	r1, #55944	; 0xda88
   81cc6:	f2c0 0108 	movt	r1, #8
   81cca:	f242 1365 	movw	r3, #8549	; 0x2165
   81cce:	f2c0 0308 	movt	r3, #8
   81cd2:	4798      	blx	r3
    return SCPI_RES_OK;
}
   81cd4:	f04f 0001 	mov.w	r0, #1
   81cd8:	bd08      	pop	{r3, pc}
   81cda:	bf00      	nop

00081cdc <SCPI_SystemVersionQ>:
/**
 * SYSTem:VERSion?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemVersionQ(scpi_t * context) {
   81cdc:	b508      	push	{r3, lr}
    SCPI_ResultString(context, SCPI_DEV_VERSION);
   81cde:	f24d 71bc 	movw	r1, #55228	; 0xd7bc
   81ce2:	f2c0 0108 	movt	r1, #8
   81ce6:	f242 1365 	movw	r3, #8549	; 0x2165
   81cea:	f2c0 0308 	movt	r3, #8
   81cee:	4798      	blx	r3
    return SCPI_RES_OK;
}
   81cf0:	f04f 0001 	mov.w	r0, #1
   81cf4:	bd08      	pop	{r3, pc}
   81cf6:	bf00      	nop

00081cf8 <SCPI_SystemErrorNextQ>:
/**
 * SYSTem:ERRor[:NEXT]?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemErrorNextQ(scpi_t * context) {
   81cf8:	b538      	push	{r3, r4, r5, lr}
   81cfa:	4604      	mov	r4, r0
    int16_t err = SCPI_ErrorPop(context);
   81cfc:	f241 53c9 	movw	r3, #5577	; 0x15c9
   81d00:	f2c0 0308 	movt	r3, #8
   81d04:	4798      	blx	r3
   81d06:	4605      	mov	r5, r0

    SCPI_ResultInt(context, err);
   81d08:	4620      	mov	r0, r4
   81d0a:	4629      	mov	r1, r5
   81d0c:	f242 12a5 	movw	r2, #8613	; 0x21a5
   81d10:	f2c0 0208 	movt	r2, #8
   81d14:	4790      	blx	r2
    SCPI_ResultText(context, SCPI_ErrorTranslate(err));
   81d16:	4628      	mov	r0, r5
   81d18:	f241 713d 	movw	r1, #5949	; 0x173d
   81d1c:	f2c0 0108 	movt	r1, #8
   81d20:	4788      	blx	r1
   81d22:	4601      	mov	r1, r0
   81d24:	4620      	mov	r0, r4
   81d26:	f242 2335 	movw	r3, #8757	; 0x2235
   81d2a:	f2c0 0308 	movt	r3, #8
   81d2e:	4798      	blx	r3

    return SCPI_RES_OK;
}
   81d30:	f04f 0001 	mov.w	r0, #1
   81d34:	bd38      	pop	{r3, r4, r5, pc}
   81d36:	bf00      	nop

00081d38 <SCPI_SystemErrorCountQ>:
/**
 * SYSTem:ERRor:COUNt?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemErrorCountQ(scpi_t * context) {
   81d38:	b510      	push	{r4, lr}
   81d3a:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_ErrorCount(context));
   81d3c:	f241 53ed 	movw	r3, #5613	; 0x15ed
   81d40:	f2c0 0308 	movt	r3, #8
   81d44:	4798      	blx	r3
   81d46:	4601      	mov	r1, r0
   81d48:	4620      	mov	r0, r4
   81d4a:	f242 12a5 	movw	r2, #8613	; 0x21a5
   81d4e:	f2c0 0208 	movt	r2, #8
   81d52:	4790      	blx	r2

    return SCPI_RES_OK;
}
   81d54:	f04f 0001 	mov.w	r0, #1
   81d58:	bd10      	pop	{r4, pc}
   81d5a:	bf00      	nop

00081d5c <SCPI_StatusQuestionableEventQ>:
/**
 * STATus:QUEStionable[:EVENt]?
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusQuestionableEventQ(scpi_t * context) {
   81d5c:	b510      	push	{r4, lr}
   81d5e:	4604      	mov	r4, r0
    /* return value */
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_QUES));
   81d60:	f04f 0106 	mov.w	r1, #6
   81d64:	f641 03a9 	movw	r3, #6313	; 0x18a9
   81d68:	f2c0 0308 	movt	r3, #8
   81d6c:	4798      	blx	r3
   81d6e:	4601      	mov	r1, r0
   81d70:	4620      	mov	r0, r4
   81d72:	f242 12a5 	movw	r2, #8613	; 0x21a5
   81d76:	f2c0 0208 	movt	r2, #8
   81d7a:	4790      	blx	r2

    /* clear register */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
   81d7c:	4620      	mov	r0, r4
   81d7e:	f04f 0106 	mov.w	r1, #6
   81d82:	f04f 0200 	mov.w	r2, #0
   81d86:	f641 1321 	movw	r3, #6433	; 0x1921
   81d8a:	f2c0 0308 	movt	r3, #8
   81d8e:	4798      	blx	r3

    return SCPI_RES_OK;
}
   81d90:	f04f 0001 	mov.w	r0, #1
   81d94:	bd10      	pop	{r4, pc}
   81d96:	bf00      	nop

00081d98 <SCPI_StatusQuestionableEnableQ>:
/**
 * STATus:QUEStionable:ENABle?
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusQuestionableEnableQ(scpi_t * context) {
   81d98:	b510      	push	{r4, lr}
   81d9a:	4604      	mov	r4, r0
    /* return value */
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_QUESE));
   81d9c:	f04f 0107 	mov.w	r1, #7
   81da0:	f641 03a9 	movw	r3, #6313	; 0x18a9
   81da4:	f2c0 0308 	movt	r3, #8
   81da8:	4798      	blx	r3
   81daa:	4601      	mov	r1, r0
   81dac:	4620      	mov	r0, r4
   81dae:	f242 12a5 	movw	r2, #8613	; 0x21a5
   81db2:	f2c0 0208 	movt	r2, #8
   81db6:	4790      	blx	r2

    return SCPI_RES_OK;
}
   81db8:	f04f 0001 	mov.w	r0, #1
   81dbc:	bd10      	pop	{r4, pc}
   81dbe:	bf00      	nop

00081dc0 <SCPI_StatusQuestionableEnable>:
/**
 * STATus:QUEStionable:ENABle
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusQuestionableEnable(scpi_t * context) {
   81dc0:	b510      	push	{r4, lr}
   81dc2:	b082      	sub	sp, #8
   81dc4:	4604      	mov	r4, r0
    int32_t new_QUESE;
    if (SCPI_ParamInt(context, &new_QUESE, TRUE)) {
   81dc6:	a901      	add	r1, sp, #4
   81dc8:	f04f 0201 	mov.w	r2, #1
   81dcc:	f242 3361 	movw	r3, #9057	; 0x2361
   81dd0:	f2c0 0308 	movt	r3, #8
   81dd4:	4798      	blx	r3
   81dd6:	b148      	cbz	r0, 81dec <SCPI_StatusQuestionableEnable+0x2c>
        SCPI_RegSet(context, SCPI_REG_QUESE, new_QUESE);
   81dd8:	4620      	mov	r0, r4
   81dda:	f04f 0107 	mov.w	r1, #7
   81dde:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   81de2:	f641 1321 	movw	r3, #6433	; 0x1921
   81de6:	f2c0 0308 	movt	r3, #8
   81dea:	4798      	blx	r3
    }
    return SCPI_RES_OK;
}
   81dec:	f04f 0001 	mov.w	r0, #1
   81df0:	b002      	add	sp, #8
   81df2:	bd10      	pop	{r4, pc}

00081df4 <SCPI_StatusPreset>:
/**
 * STATus:PRESet
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusPreset(scpi_t * context) {
   81df4:	b508      	push	{r3, lr}
    /* clear STATUS:... */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
   81df6:	f04f 0106 	mov.w	r1, #6
   81dfa:	f04f 0200 	mov.w	r2, #0
   81dfe:	f641 1321 	movw	r3, #6433	; 0x1921
   81e02:	f2c0 0308 	movt	r3, #8
   81e06:	4798      	blx	r3
    return SCPI_RES_OK;
}
   81e08:	f04f 0001 	mov.w	r0, #1
   81e0c:	bd08      	pop	{r3, pc}
   81e0e:	bf00      	nop

00081e10 <writeData>:
 * @param context
 * @param data
 * @param len - lenght of data to be written
 * @return number of bytes written
 */
static size_t writeData(scpi_t * context, const char * data, size_t len) {
   81e10:	b508      	push	{r3, lr}
    return context->interface->write(context, data, len);
   81e12:	69c3      	ldr	r3, [r0, #28]
   81e14:	685b      	ldr	r3, [r3, #4]
   81e16:	4798      	blx	r3
}
   81e18:	bd08      	pop	{r3, pc}
   81e1a:	bf00      	nop

00081e1c <writeDelimiter>:
/**
 * Write result delimiter to output
 * @param context
 * @return number of bytes written
 */
static size_t writeDelimiter(scpi_t * context) {
   81e1c:	b508      	push	{r3, lr}
    if (context->output_count > 0) {
   81e1e:	6a03      	ldr	r3, [r0, #32]
   81e20:	2b00      	cmp	r3, #0
   81e22:	dd0b      	ble.n	81e3c <writeDelimiter+0x20>
        return writeData(context, ", ", 2);
   81e24:	f24d 71c4 	movw	r1, #55236	; 0xd7c4
   81e28:	f2c0 0108 	movt	r1, #8
   81e2c:	f04f 0202 	mov.w	r2, #2
   81e30:	f641 6311 	movw	r3, #7697	; 0x1e11
   81e34:	f2c0 0308 	movt	r3, #8
   81e38:	4798      	blx	r3
   81e3a:	bd08      	pop	{r3, pc}
    } else {
        return 0;
   81e3c:	f04f 0000 	mov.w	r0, #0
    }
}
   81e40:	bd08      	pop	{r3, pc}
   81e42:	bf00      	nop

00081e44 <paramSkipBytes>:
 * Skip num bytes from the begginig of parameters
 * @param context
 * @param num
 */
void paramSkipBytes(scpi_t * context, size_t num) {
    if (context->paramlist.length < num) {
   81e44:	6983      	ldr	r3, [r0, #24]
   81e46:	4299      	cmp	r1, r3
   81e48:	bf28      	it	cs
   81e4a:	4619      	movcs	r1, r3
        num = context->paramlist.length;
    }
    context->paramlist.parameters += num;
   81e4c:	6942      	ldr	r2, [r0, #20]
   81e4e:	1852      	adds	r2, r2, r1
   81e50:	6142      	str	r2, [r0, #20]
    context->paramlist.length -= num;
   81e52:	1a59      	subs	r1, r3, r1
   81e54:	6181      	str	r1, [r0, #24]
   81e56:	4770      	bx	lr

00081e58 <paramSkipWhitespace>:

/**
 * Skip white spaces from the beggining of parameters
 * @param context
 */
void paramSkipWhitespace(scpi_t * context) {
   81e58:	b510      	push	{r4, lr}
   81e5a:	4604      	mov	r4, r0
    size_t ws = skipWhitespace(context->paramlist.parameters, context->paramlist.length);
   81e5c:	6940      	ldr	r0, [r0, #20]
   81e5e:	69a1      	ldr	r1, [r4, #24]
   81e60:	f642 13f5 	movw	r3, #10741	; 0x29f5
   81e64:	f2c0 0308 	movt	r3, #8
   81e68:	4798      	blx	r3
   81e6a:	4601      	mov	r1, r0
    paramSkipBytes(context, ws);
   81e6c:	4620      	mov	r0, r4
   81e6e:	f641 6245 	movw	r2, #7749	; 0x1e45
   81e72:	f2c0 0208 	movt	r2, #8
   81e76:	4790      	blx	r2
   81e78:	bd10      	pop	{r4, pc}
   81e7a:	bf00      	nop

00081e7c <paramNext>:
 * Find next parameter
 * @param context
 * @param mandatory
 * @return 
 */
bool_t paramNext(scpi_t * context, bool_t mandatory) {
   81e7c:	b538      	push	{r3, r4, r5, lr}
   81e7e:	4604      	mov	r4, r0
   81e80:	460d      	mov	r5, r1
    paramSkipWhitespace(context);
   81e82:	f641 6359 	movw	r3, #7769	; 0x1e59
   81e86:	f2c0 0308 	movt	r3, #8
   81e8a:	4798      	blx	r3
    if (context->paramlist.length == 0) {
   81e8c:	69a0      	ldr	r0, [r4, #24]
   81e8e:	b960      	cbnz	r0, 81eaa <paramNext+0x2e>
        if (mandatory) {
   81e90:	2d00      	cmp	r5, #0
   81e92:	d031      	beq.n	81ef8 <paramNext+0x7c>
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
   81e94:	4620      	mov	r0, r4
   81e96:	f06f 016c 	mvn.w	r1, #108	; 0x6c
   81e9a:	f241 6211 	movw	r2, #5649	; 0x1611
   81e9e:	f2c0 0208 	movt	r2, #8
   81ea2:	4790      	blx	r2
        }
        return FALSE;
   81ea4:	f04f 0000 	mov.w	r0, #0
   81ea8:	bd38      	pop	{r3, r4, r5, pc}
    }
    if (context->input_count != 0) {
   81eaa:	6a61      	ldr	r1, [r4, #36]	; 0x24
   81eac:	b1e9      	cbz	r1, 81eea <paramNext+0x6e>
        if (context->paramlist.parameters[0] == ',') {
   81eae:	6962      	ldr	r2, [r4, #20]
   81eb0:	7813      	ldrb	r3, [r2, #0]
   81eb2:	2b2c      	cmp	r3, #44	; 0x2c
   81eb4:	d10e      	bne.n	81ed4 <paramNext+0x58>
            paramSkipBytes(context, 1);
   81eb6:	4620      	mov	r0, r4
   81eb8:	f04f 0101 	mov.w	r1, #1
   81ebc:	f641 6345 	movw	r3, #7749	; 0x1e45
   81ec0:	f2c0 0308 	movt	r3, #8
   81ec4:	4798      	blx	r3
            paramSkipWhitespace(context);
   81ec6:	4620      	mov	r0, r4
   81ec8:	f641 6159 	movw	r1, #7769	; 0x1e59
   81ecc:	f2c0 0108 	movt	r1, #8
   81ed0:	4788      	blx	r1
   81ed2:	e00a      	b.n	81eea <paramNext+0x6e>
        } else {
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SEPARATOR);
   81ed4:	4620      	mov	r0, r4
   81ed6:	f06f 0166 	mvn.w	r1, #102	; 0x66
   81eda:	f241 6211 	movw	r2, #5649	; 0x1611
   81ede:	f2c0 0208 	movt	r2, #8
   81ee2:	4790      	blx	r2
            return FALSE;
   81ee4:	f04f 0000 	mov.w	r0, #0
   81ee8:	bd38      	pop	{r3, r4, r5, pc}
        }
    }
    context->input_count++;
   81eea:	6a60      	ldr	r0, [r4, #36]	; 0x24
   81eec:	f100 0001 	add.w	r0, r0, #1
   81ef0:	6260      	str	r0, [r4, #36]	; 0x24
    return TRUE;
   81ef2:	f04f 0001 	mov.w	r0, #1
   81ef6:	bd38      	pop	{r3, r4, r5, pc}
    paramSkipWhitespace(context);
    if (context->paramlist.length == 0) {
        if (mandatory) {
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
        }
        return FALSE;
   81ef8:	f04f 0000 	mov.w	r0, #0
            return FALSE;
        }
    }
    context->input_count++;
    return TRUE;
}
   81efc:	bd38      	pop	{r3, r4, r5, pc}
   81efe:	bf00      	nop

00081f00 <cmdlineSeparator>:
 * Find command line separator
 * @param cmd - input command
 * @param len - max search length
 * @return pointer to line separator or NULL
 */
const char * cmdlineSeparator(const char * cmd, size_t len) {
   81f00:	b508      	push	{r3, lr}
    return strnpbrk(cmd, len, ";\r\n");
   81f02:	f24d 72c8 	movw	r2, #55240	; 0xd7c8
   81f06:	f2c0 0208 	movt	r2, #8
   81f0a:	f242 6341 	movw	r3, #9793	; 0x2641
   81f0e:	f2c0 0308 	movt	r3, #8
   81f12:	4798      	blx	r3
}
   81f14:	bd08      	pop	{r3, pc}
   81f16:	bf00      	nop

00081f18 <SCPI_Parse>:
 * @param context
 * @param data - complete command line
 * @param len - command line length
 * @return 1 if the last evaluated command was found
 */
int SCPI_Parse(scpi_t * context, const char * data, size_t len) {
   81f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81f1c:	b083      	sub	sp, #12
    int result = 0;
    const char * cmdline_end = data + len;
   81f1e:	eb01 0b02 	add.w	fp, r1, r2
    const char * cmdline_ptr = data;
    size_t cmd_len;
    size_t cmdline_len;

    if (context == NULL) {
   81f22:	4607      	mov	r7, r0
   81f24:	2800      	cmp	r0, #0
   81f26:	f000 809e 	beq.w	82066 <SCPI_Parse+0x14e>
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
   81f2a:	4559      	cmp	r1, fp
   81f2c:	f080 809e 	bcs.w	8206c <SCPI_Parse+0x154>
   81f30:	460d      	mov	r5, r1
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
            } else {
                SCPI_ErrorPush(context, SCPI_ERROR_UNDEFINED_HEADER);
   81f32:	f241 6311 	movw	r3, #5649	; 0x1611
   81f36:	f2c0 0308 	movt	r3, #8
   81f3a:	9301      	str	r3, [sp, #4]
    }

	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
   81f3c:	462c      	mov	r4, r5
   81f3e:	ebc5 080b 	rsb	r8, r5, fp
 * @param cmd - input command
 * @param len - max search length
 * @return position of terminator or len
 */
size_t cmdTerminatorPos(const char * cmd, size_t len) {
    const char * terminator = strnpbrk(cmd, len, "; \r\n\t");
   81f42:	4628      	mov	r0, r5
   81f44:	4641      	mov	r1, r8
   81f46:	4a51      	ldr	r2, [pc, #324]	; (8208c <SCPI_Parse+0x174>)
   81f48:	f242 6641 	movw	r6, #9793	; 0x2641
   81f4c:	f2c0 0608 	movt	r6, #8
   81f50:	47b0      	blx	r6
    if (terminator == NULL) {
   81f52:	b108      	cbz	r0, 81f58 <SCPI_Parse+0x40>
        return len;
    } else {
        return terminator - cmd;
   81f54:	1b46      	subs	r6, r0, r5
   81f56:	e000      	b.n	81f5a <SCPI_Parse+0x42>
 * @return position of terminator or len
 */
size_t cmdTerminatorPos(const char * cmd, size_t len) {
    const char * terminator = strnpbrk(cmd, len, "; \r\n\t");
    if (terminator == NULL) {
        return len;
   81f58:	4646      	mov	r6, r8
 * @param cmd - input command
 * @param len - max search length
 * @return position of line separator or len
 */
size_t cmdlineSeparatorPos(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
   81f5a:	4628      	mov	r0, r5
   81f5c:	4641      	mov	r1, r8
   81f5e:	f641 7201 	movw	r2, #7937	; 0x1f01
   81f62:	f2c0 0208 	movt	r2, #8
   81f66:	4790      	blx	r2
    if (separator == NULL) {
   81f68:	b110      	cbz	r0, 81f70 <SCPI_Parse+0x58>
        return len;
    } else {
        return separator - cmd;
   81f6a:	1b00      	subs	r0, r0, r4
   81f6c:	9000      	str	r0, [sp, #0]
   81f6e:	e001      	b.n	81f74 <SCPI_Parse+0x5c>
 * @return position of line separator or len
 */
size_t cmdlineSeparatorPos(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
    if (separator == NULL) {
        return len;
   81f70:	f8cd 8000 	str.w	r8, [sp]
	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        if (cmd_len > 0) {
   81f74:	2e00      	cmp	r6, #0
   81f76:	d05f      	beq.n	82038 <SCPI_Parse+0x120>
 */
static bool_t findCommand(scpi_t * context, const char * cmdline_ptr, size_t cmdline_len, size_t cmd_len) {
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
   81f78:	f8d7 9000 	ldr.w	r9, [r7]
   81f7c:	f8d9 0000 	ldr.w	r0, [r9]
   81f80:	2800      	cmp	r0, #0
   81f82:	d076      	beq.n	82072 <SCPI_Parse+0x15a>
   81f84:	f04f 0408 	mov.w	r4, #8
        cmd = &context->cmdlist[i];
        if (matchCommand(cmd->pattern, cmdline_ptr, cmd_len)) {
   81f88:	f642 3a49 	movw	sl, #11081	; 0x2b49
   81f8c:	f2c0 0a08 	movt	sl, #8
   81f90:	4629      	mov	r1, r5
   81f92:	4632      	mov	r2, r6
   81f94:	47d0      	blx	sl
   81f96:	b190      	cbz	r0, 81fbe <SCPI_Parse+0xa6>
            context->paramlist.cmd = cmd;
   81f98:	f8c7 9010 	str.w	r9, [r7, #16]
            context->paramlist.parameters = cmdline_ptr + cmd_len;
   81f9c:	19ab      	adds	r3, r5, r6
   81f9e:	617b      	str	r3, [r7, #20]
            context->paramlist.length = cmdline_len - cmd_len;
   81fa0:	9800      	ldr	r0, [sp, #0]
   81fa2:	1b86      	subs	r6, r0, r6
   81fa4:	61be      	str	r6, [r7, #24]
 * @param context
 */
static void processCommand(scpi_t * context) {
    const scpi_command_t * cmd = context->paramlist.cmd;

    context->cmd_error = FALSE;
   81fa6:	f04f 0400 	mov.w	r4, #0
   81faa:	f887 4028 	strb.w	r4, [r7, #40]	; 0x28
    context->output_count = 0;
   81fae:	f04f 0100 	mov.w	r1, #0
   81fb2:	6239      	str	r1, [r7, #32]
    context->input_count = 0;
   81fb4:	6279      	str	r1, [r7, #36]	; 0x24

    SCPI_DEBUG_COMMAND(context);
    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
   81fb6:	f8d9 2004 	ldr.w	r2, [r9, #4]
   81fba:	b94a      	cbnz	r2, 81fd0 <SCPI_Parse+0xb8>
   81fbc:	e014      	b.n	81fe8 <SCPI_Parse+0xd0>
 */
static bool_t findCommand(scpi_t * context, const char * cmdline_ptr, size_t cmdline_len, size_t cmd_len) {
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
   81fbe:	6839      	ldr	r1, [r7, #0]
   81fc0:	eb01 0904 	add.w	r9, r1, r4
   81fc4:	5908      	ldr	r0, [r1, r4]
   81fc6:	f104 0408 	add.w	r4, r4, #8
   81fca:	2800      	cmp	r0, #0
   81fcc:	d1e0      	bne.n	81f90 <SCPI_Parse+0x78>
   81fce:	e050      	b.n	82072 <SCPI_Parse+0x15a>
    context->input_count = 0;

    SCPI_DEBUG_COMMAND(context);
    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
        if ((cmd->callback(context) != SCPI_RES_OK) && !context->cmd_error) {
   81fd0:	4638      	mov	r0, r7
   81fd2:	4790      	blx	r2
   81fd4:	2801      	cmp	r0, #1
   81fd6:	d007      	beq.n	81fe8 <SCPI_Parse+0xd0>
   81fd8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   81fdc:	b923      	cbnz	r3, 81fe8 <SCPI_Parse+0xd0>
            SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
   81fde:	4638      	mov	r0, r7
   81fe0:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
   81fe4:	9c01      	ldr	r4, [sp, #4]
   81fe6:	47a0      	blx	r4
 * Conditionaly write "New Line"
 * @param context
 * @return number of characters written
 */
static size_t writeNewLine(scpi_t * context) {
    if (context->output_count > 0) {
   81fe8:	6a38      	ldr	r0, [r7, #32]
   81fea:	2800      	cmp	r0, #0
   81fec:	dd11      	ble.n	82012 <SCPI_Parse+0xfa>
        size_t len;
        len = writeData(context, "\r\n", 2);
   81fee:	4638      	mov	r0, r7
   81ff0:	f64d 216c 	movw	r1, #55916	; 0xda6c
   81ff4:	f2c0 0108 	movt	r1, #8
   81ff8:	f04f 0202 	mov.w	r2, #2
   81ffc:	f641 6311 	movw	r3, #7697	; 0x1e11
   82000:	f2c0 0308 	movt	r3, #8
   82004:	4798      	blx	r3
 * Flush data to SCPI output
 * @param context
 * @return
 */
static int flushData(scpi_t * context) {
    if (context && context->interface && context->interface->flush) {
   82006:	69f9      	ldr	r1, [r7, #28]
   82008:	b119      	cbz	r1, 82012 <SCPI_Parse+0xfa>
   8200a:	68ca      	ldr	r2, [r1, #12]
   8200c:	b10a      	cbz	r2, 82012 <SCPI_Parse+0xfa>
        return context->interface->flush(context);
   8200e:	4638      	mov	r0, r7
   82010:	4790      	blx	r2

    /* conditionaly write new line */
    writeNewLine(context);

    /* skip all whitespaces */
    paramSkipWhitespace(context);
   82012:	4638      	mov	r0, r7
   82014:	f641 6459 	movw	r4, #7769	; 0x1e59
   82018:	f2c0 0408 	movt	r4, #8
   8201c:	47a0      	blx	r4

    /* set error if command callback did not read all parameters */
    if (context->paramlist.length != 0 && !context->cmd_error) {
   8201e:	69b8      	ldr	r0, [r7, #24]
   82020:	b168      	cbz	r0, 8203e <SCPI_Parse+0x126>
   82022:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   82026:	b96b      	cbnz	r3, 82044 <SCPI_Parse+0x12c>
        SCPI_ErrorPush(context, SCPI_ERROR_PARAMETER_NOT_ALLOWED);
   82028:	4638      	mov	r0, r7
   8202a:	f06f 016b 	mvn.w	r1, #107	; 0x6b
   8202e:	9a01      	ldr	r2, [sp, #4]
   82030:	4790      	blx	r2
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
   82032:	f04f 0401 	mov.w	r4, #1
   82036:	e007      	b.n	82048 <SCPI_Parse+0x130>
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
   82038:	f04f 0400 	mov.w	r4, #0
   8203c:	e004      	b.n	82048 <SCPI_Parse+0x130>
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
   8203e:	f04f 0401 	mov.w	r4, #1
   82042:	e001      	b.n	82048 <SCPI_Parse+0x130>
   82044:	f04f 0401 	mov.w	r4, #1
 * @param cmd - input command
 * @param len - max search length
 * @return Pointer to next part of command
 */
const char * cmdlineNext(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
   82048:	4628      	mov	r0, r5
   8204a:	4641      	mov	r1, r8
   8204c:	f641 7301 	movw	r3, #7937	; 0x1f01
   82050:	f2c0 0308 	movt	r3, #8
   82054:	4798      	blx	r3
    if (separator == NULL) {
        return cmd + len;
   82056:	4445      	add	r5, r8
 * @param len - max search length
 * @return Pointer to next part of command
 */
const char * cmdlineNext(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
    if (separator == NULL) {
   82058:	b108      	cbz	r0, 8205e <SCPI_Parse+0x146>
        return cmd + len;
    } else {
        return separator + 1;
   8205a:	f100 0501 	add.w	r5, r0, #1
    if (context == NULL) {
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
   8205e:	45ab      	cmp	fp, r5
   82060:	f63f af6c 	bhi.w	81f3c <SCPI_Parse+0x24>
   82064:	e00d      	b.n	82082 <SCPI_Parse+0x16a>
    const char * cmdline_ptr = data;
    size_t cmd_len;
    size_t cmdline_len;

    if (context == NULL) {
        return -1;
   82066:	f04f 34ff 	mov.w	r4, #4294967295
   8206a:	e00a      	b.n	82082 <SCPI_Parse+0x16a>
    }

	
    while (cmdline_ptr < cmdline_end) {
   8206c:	f04f 0400 	mov.w	r4, #0
   82070:	e007      	b.n	82082 <SCPI_Parse+0x16a>
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
            } else {
                SCPI_ErrorPush(context, SCPI_ERROR_UNDEFINED_HEADER);
   82072:	4638      	mov	r0, r7
   82074:	f06f 0170 	mvn.w	r1, #112	; 0x70
   82078:	9a01      	ldr	r2, [sp, #4]
   8207a:	4790      	blx	r2
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
   8207c:	f04f 0400 	mov.w	r4, #0
   82080:	e7e2      	b.n	82048 <SCPI_Parse+0x130>
            }
        }
        cmdline_ptr = cmdlineNext(cmdline_ptr, cmdline_end - cmdline_ptr);
    }
    return result;
}
   82082:	4620      	mov	r0, r4
   82084:	b003      	add	sp, #12
   82086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8208a:	bf00      	nop
   8208c:	0008d7cc 	.word	0x0008d7cc

00082090 <SCPI_Init>:
 * @param context
 * @param command_list
 * @param buffer
 * @param interface
 */
void SCPI_Init(scpi_t * context) {
   82090:	b508      	push	{r3, lr}
    context->buffer.position = 0;
   82092:	f04f 0200 	mov.w	r2, #0
   82096:	6082      	str	r2, [r0, #8]
    SCPI_ErrorInit(context);
   82098:	f241 519d 	movw	r1, #5533	; 0x159d
   8209c:	f2c0 0108 	movt	r1, #8
   820a0:	4788      	blx	r1
   820a2:	bd08      	pop	{r3, pc}

000820a4 <SCPI_Input>:
 * @param context
 * @param data - data to process
 * @param len - length of data
 * @return 
 */
int SCPI_Input(scpi_t * context, const char * data, size_t len) {
   820a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   820a6:	4604      	mov	r4, r0
    int result = 0;
    const char * cmd_term;
	if (len == 0) {
   820a8:	4615      	mov	r5, r2
   820aa:	b972      	cbnz	r2, 820ca <SCPI_Input+0x26>
        context->buffer.data[context->buffer.position] = 0;
   820ac:	68c1      	ldr	r1, [r0, #12]
   820ae:	6882      	ldr	r2, [r0, #8]
   820b0:	f04f 0600 	mov.w	r6, #0
   820b4:	548e      	strb	r6, [r1, r2]
        result = SCPI_Parse(context, context->buffer.data, context->buffer.position);
   820b6:	68e1      	ldr	r1, [r4, #12]
   820b8:	68a2      	ldr	r2, [r4, #8]
   820ba:	f641 7519 	movw	r5, #7961	; 0x1f19
   820be:	f2c0 0508 	movt	r5, #8
   820c2:	47a8      	blx	r5
   820c4:	4605      	mov	r5, r0
        context->buffer.position = 0;
   820c6:	60a6      	str	r6, [r4, #8]
   820c8:	e049      	b.n	8215e <SCPI_Input+0xba>
    } else {
        size_t buffer_free;
        int ws;
        buffer_free = context->buffer.length - context->buffer.position;
   820ca:	6883      	ldr	r3, [r0, #8]
   820cc:	6842      	ldr	r2, [r0, #4]
   820ce:	f102 30ff 	add.w	r0, r2, #4294967295
        if (len > (buffer_free - 1)) {
   820d2:	1ac2      	subs	r2, r0, r3
   820d4:	4295      	cmp	r5, r2
   820d6:	d83d      	bhi.n	82154 <SCPI_Input+0xb0>
            return -1;
        }
        memcpy(&context->buffer.data[context->buffer.position], data, len);
   820d8:	68e7      	ldr	r7, [r4, #12]
   820da:	18f8      	adds	r0, r7, r3
   820dc:	462a      	mov	r2, r5
   820de:	f648 739d 	movw	r3, #36765	; 0x8f9d
   820e2:	f2c0 0308 	movt	r3, #8
   820e6:	4798      	blx	r3
        context->buffer.position += len;
   820e8:	68a1      	ldr	r1, [r4, #8]
   820ea:	186d      	adds	r5, r5, r1
   820ec:	60a5      	str	r5, [r4, #8]
        context->buffer.data[context->buffer.position] = 0;
   820ee:	68e0      	ldr	r0, [r4, #12]
   820f0:	f04f 0200 	mov.w	r2, #0
   820f4:	5542      	strb	r2, [r0, r5]

        ws = skipWhitespace(context->buffer.data, context->buffer.position);
   820f6:	68e0      	ldr	r0, [r4, #12]
   820f8:	68a1      	ldr	r1, [r4, #8]
   820fa:	f642 17f5 	movw	r7, #10741	; 0x29f5
   820fe:	f2c0 0708 	movt	r7, #8
   82102:	47b8      	blx	r7
   82104:	4605      	mov	r5, r0
        cmd_term = cmdlineTerminator(context->buffer.data + ws, context->buffer.position - ws);
   82106:	68e3      	ldr	r3, [r4, #12]
   82108:	68a1      	ldr	r1, [r4, #8]
 * @param cmd - input command
 * @param len - max search length
 * @return pointer to command line terminator or NULL
 */
const char * cmdlineTerminator(const char * cmd, size_t len) {
    return strnpbrk(cmd, len, "\r\n");
   8210a:	1818      	adds	r0, r3, r0
   8210c:	1b49      	subs	r1, r1, r5
   8210e:	f64d 226c 	movw	r2, #55916	; 0xda6c
   82112:	f2c0 0208 	movt	r2, #8
   82116:	f242 6741 	movw	r7, #9793	; 0x2641
   8211a:	f2c0 0708 	movt	r7, #8
   8211e:	47b8      	blx	r7
        context->buffer.position += len;
        context->buffer.data[context->buffer.position] = 0;

        ws = skipWhitespace(context->buffer.data, context->buffer.position);
        cmd_term = cmdlineTerminator(context->buffer.data + ws, context->buffer.position - ws);
        if (cmd_term != NULL) {
   82120:	4607      	mov	r7, r0
   82122:	b1d0      	cbz	r0, 8215a <SCPI_Input+0xb6>
            int curr_len = cmd_term - context->buffer.data;
   82124:	68e2      	ldr	r2, [r4, #12]
   82126:	1a86      	subs	r6, r0, r2
            result = SCPI_Parse(context, context->buffer.data + ws, curr_len - ws);
   82128:	4620      	mov	r0, r4
   8212a:	1951      	adds	r1, r2, r5
   8212c:	1b72      	subs	r2, r6, r5
   8212e:	f641 7519 	movw	r5, #7961	; 0x1f19
   82132:	f2c0 0508 	movt	r5, #8
   82136:	47a8      	blx	r5
   82138:	4605      	mov	r5, r0
            memmove(context->buffer.data, cmd_term, context->buffer.position - curr_len);
   8213a:	68a3      	ldr	r3, [r4, #8]
   8213c:	68e0      	ldr	r0, [r4, #12]
   8213e:	4639      	mov	r1, r7
   82140:	1b9a      	subs	r2, r3, r6
   82142:	f648 73af 	movw	r3, #36783	; 0x8faf
   82146:	f2c0 0308 	movt	r3, #8
   8214a:	4798      	blx	r3
            context->buffer.position -= curr_len;
   8214c:	68a0      	ldr	r0, [r4, #8]
   8214e:	1b86      	subs	r6, r0, r6
   82150:	60a6      	str	r6, [r4, #8]
   82152:	e004      	b.n	8215e <SCPI_Input+0xba>
    } else {
        size_t buffer_free;
        int ws;
        buffer_free = context->buffer.length - context->buffer.position;
        if (len > (buffer_free - 1)) {
            return -1;
   82154:	f04f 35ff 	mov.w	r5, #4294967295
   82158:	e001      	b.n	8215e <SCPI_Input+0xba>
 * @param data - data to process
 * @param len - length of data
 * @return 
 */
int SCPI_Input(scpi_t * context, const char * data, size_t len) {
    int result = 0;
   8215a:	f04f 0500 	mov.w	r5, #0
            context->buffer.position -= curr_len;
        }
    }

    return result;
}
   8215e:	4628      	mov	r0, r5
   82160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82162:	bf00      	nop

00082164 <SCPI_ResultString>:
 * Write raw string result to the output
 * @param context
 * @param data
 * @return 
 */
size_t SCPI_ResultString(scpi_t * context, const char * data) {
   82164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82166:	4604      	mov	r4, r0
   82168:	460d      	mov	r5, r1
    size_t len = strlen(data);
   8216a:	4608      	mov	r0, r1
   8216c:	f249 03b9 	movw	r3, #37049	; 0x90b9
   82170:	f2c0 0308 	movt	r3, #8
   82174:	4798      	blx	r3
   82176:	4607      	mov	r7, r0
    size_t result = 0;
    result += writeDelimiter(context);
   82178:	4620      	mov	r0, r4
   8217a:	f641 611d 	movw	r1, #7709	; 0x1e1d
   8217e:	f2c0 0108 	movt	r1, #8
   82182:	4788      	blx	r1
   82184:	4606      	mov	r6, r0
    result += writeData(context, data, len);
   82186:	4620      	mov	r0, r4
   82188:	4629      	mov	r1, r5
   8218a:	463a      	mov	r2, r7
   8218c:	f641 6311 	movw	r3, #7697	; 0x1e11
   82190:	f2c0 0308 	movt	r3, #8
   82194:	4798      	blx	r3
    context->output_count++;
   82196:	6a22      	ldr	r2, [r4, #32]
   82198:	f102 0201 	add.w	r2, r2, #1
   8219c:	6222      	str	r2, [r4, #32]
    return result;
}
   8219e:	1980      	adds	r0, r0, r6
   821a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   821a2:	bf00      	nop

000821a4 <SCPI_ResultInt>:
 * Write integer value to the result
 * @param context
 * @param val
 * @return 
 */
size_t SCPI_ResultInt(scpi_t * context, int32_t val) {
   821a4:	b570      	push	{r4, r5, r6, lr}
   821a6:	b084      	sub	sp, #16
   821a8:	4604      	mov	r4, r0
    char buffer[12];
    size_t result = 0;
    size_t len = longToStr(val, buffer, sizeof (buffer));
   821aa:	4608      	mov	r0, r1
   821ac:	a901      	add	r1, sp, #4
   821ae:	f04f 020c 	mov.w	r2, #12
   821b2:	f242 638d 	movw	r3, #9869	; 0x268d
   821b6:	f2c0 0308 	movt	r3, #8
   821ba:	4798      	blx	r3
   821bc:	4606      	mov	r6, r0
    result += writeDelimiter(context);
   821be:	4620      	mov	r0, r4
   821c0:	f641 611d 	movw	r1, #7709	; 0x1e1d
   821c4:	f2c0 0108 	movt	r1, #8
   821c8:	4788      	blx	r1
   821ca:	4605      	mov	r5, r0
    result += writeData(context, buffer, len);
   821cc:	4620      	mov	r0, r4
   821ce:	a901      	add	r1, sp, #4
   821d0:	4632      	mov	r2, r6
   821d2:	f641 6311 	movw	r3, #7697	; 0x1e11
   821d6:	f2c0 0308 	movt	r3, #8
   821da:	4798      	blx	r3
    context->output_count++;
   821dc:	6a22      	ldr	r2, [r4, #32]
   821de:	f102 0201 	add.w	r2, r2, #1
   821e2:	6222      	str	r2, [r4, #32]
    return result;
}
   821e4:	1940      	adds	r0, r0, r5
   821e6:	b004      	add	sp, #16
   821e8:	bd70      	pop	{r4, r5, r6, pc}
   821ea:	bf00      	nop

000821ec <SCPI_ResultDouble>:
 * Write double walue to the result
 * @param context
 * @param val
 * @return 
 */
size_t SCPI_ResultDouble(scpi_t * context, double val) {
   821ec:	b570      	push	{r4, r5, r6, lr}
   821ee:	b088      	sub	sp, #32
   821f0:	4604      	mov	r4, r0
    char buffer[32];
    size_t result = 0;
    size_t len = doubleToStr(val, buffer, sizeof (buffer));
   821f2:	4610      	mov	r0, r2
   821f4:	4619      	mov	r1, r3
   821f6:	466a      	mov	r2, sp
   821f8:	f04f 0320 	mov.w	r3, #32
   821fc:	f242 7595 	movw	r5, #10133	; 0x2795
   82200:	f2c0 0508 	movt	r5, #8
   82204:	47a8      	blx	r5
   82206:	4606      	mov	r6, r0
    result += writeDelimiter(context);
   82208:	4620      	mov	r0, r4
   8220a:	f641 631d 	movw	r3, #7709	; 0x1e1d
   8220e:	f2c0 0308 	movt	r3, #8
   82212:	4798      	blx	r3
   82214:	4605      	mov	r5, r0
    result += writeData(context, buffer, len);
   82216:	4620      	mov	r0, r4
   82218:	4669      	mov	r1, sp
   8221a:	4632      	mov	r2, r6
   8221c:	f641 6311 	movw	r3, #7697	; 0x1e11
   82220:	f2c0 0308 	movt	r3, #8
   82224:	4798      	blx	r3
    context->output_count++;
   82226:	6a21      	ldr	r1, [r4, #32]
   82228:	f101 0101 	add.w	r1, r1, #1
   8222c:	6221      	str	r1, [r4, #32]
    return result;

}
   8222e:	1940      	adds	r0, r0, r5
   82230:	b008      	add	sp, #32
   82232:	bd70      	pop	{r4, r5, r6, pc}

00082234 <SCPI_ResultText>:
 * Write string withn " to the result
 * @param context
 * @param data
 * @return 
 */
size_t SCPI_ResultText(scpi_t * context, const char * data) {
   82234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82238:	4604      	mov	r4, r0
   8223a:	460f      	mov	r7, r1
    size_t result = 0;
    result += writeDelimiter(context);
   8223c:	f641 631d 	movw	r3, #7709	; 0x1e1d
   82240:	f2c0 0308 	movt	r3, #8
   82244:	4798      	blx	r3
   82246:	4680      	mov	r8, r0
    result += writeData(context, "\"", 1);
   82248:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   8224c:	f2c0 0608 	movt	r6, #8
   82250:	4620      	mov	r0, r4
   82252:	4631      	mov	r1, r6
   82254:	f04f 0201 	mov.w	r2, #1
   82258:	f641 6511 	movw	r5, #7697	; 0x1e11
   8225c:	f2c0 0508 	movt	r5, #8
   82260:	47a8      	blx	r5
   82262:	4480      	add	r8, r0
    result += writeData(context, data, strlen(data));
   82264:	4638      	mov	r0, r7
   82266:	f249 01b9 	movw	r1, #37049	; 0x90b9
   8226a:	f2c0 0108 	movt	r1, #8
   8226e:	4788      	blx	r1
   82270:	4602      	mov	r2, r0
   82272:	4620      	mov	r0, r4
   82274:	4639      	mov	r1, r7
   82276:	47a8      	blx	r5
   82278:	eb08 0700 	add.w	r7, r8, r0
    result += writeData(context, "\"", 1);
   8227c:	4620      	mov	r0, r4
   8227e:	4631      	mov	r1, r6
   82280:	f04f 0201 	mov.w	r2, #1
   82284:	47a8      	blx	r5
    context->output_count++;
   82286:	6a22      	ldr	r2, [r4, #32]
   82288:	f102 0201 	add.w	r2, r2, #1
   8228c:	6222      	str	r2, [r4, #32]
    return result;
}
   8228e:	1838      	adds	r0, r7, r0
   82290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082294 <SCPI_ParamString>:
 * @param value
 * @param len
 * @param mandatory
 * @return 
 */
bool_t SCPI_ParamString(scpi_t * context, const char ** value, size_t * len, bool_t mandatory) {
   82294:	b570      	push	{r4, r5, r6, lr}
   82296:	b082      	sub	sp, #8
   82298:	4604      	mov	r4, r0
   8229a:	4615      	mov	r5, r2
    size_t length;

    if (!value || !len) {
   8229c:	460e      	mov	r6, r1
   8229e:	b319      	cbz	r1, 822e8 <SCPI_ParamString+0x54>
   822a0:	b32a      	cbz	r2, 822ee <SCPI_ParamString+0x5a>
        return FALSE;
    }

    if (!paramNext(context, mandatory)) {
   822a2:	4619      	mov	r1, r3
   822a4:	f641 637d 	movw	r3, #7805	; 0x1e7d
   822a8:	f2c0 0308 	movt	r3, #8
   822ac:	4798      	blx	r3
   822ae:	b308      	cbz	r0, 822f4 <SCPI_ParamString+0x60>
        return FALSE;
    }

    if (locateStr(context->paramlist.parameters, context->paramlist.length, value, &length)) {
   822b0:	6960      	ldr	r0, [r4, #20]
   822b2:	69a1      	ldr	r1, [r4, #24]
   822b4:	4632      	mov	r2, r6
   822b6:	ab01      	add	r3, sp, #4
   822b8:	f642 0625 	movw	r6, #10277	; 0x2825
   822bc:	f2c0 0608 	movt	r6, #8
   822c0:	47b0      	blx	r6
   822c2:	b1d0      	cbz	r0, 822fa <SCPI_ParamString+0x66>
        paramSkipBytes(context, length);
   822c4:	4620      	mov	r0, r4
   822c6:	9901      	ldr	r1, [sp, #4]
   822c8:	f641 6245 	movw	r2, #7749	; 0x1e45
   822cc:	f2c0 0208 	movt	r2, #8
   822d0:	4790      	blx	r2
        paramSkipWhitespace(context);
   822d2:	4620      	mov	r0, r4
   822d4:	f641 6159 	movw	r1, #7769	; 0x1e59
   822d8:	f2c0 0108 	movt	r1, #8
   822dc:	4788      	blx	r1
        if (len) {
            *len = length;
   822de:	9801      	ldr	r0, [sp, #4]
   822e0:	6028      	str	r0, [r5, #0]
        }
        return TRUE;
   822e2:	f04f 0001 	mov.w	r0, #1
   822e6:	e00a      	b.n	822fe <SCPI_ParamString+0x6a>
 */
bool_t SCPI_ParamString(scpi_t * context, const char ** value, size_t * len, bool_t mandatory) {
    size_t length;

    if (!value || !len) {
        return FALSE;
   822e8:	f04f 0000 	mov.w	r0, #0
   822ec:	e007      	b.n	822fe <SCPI_ParamString+0x6a>
   822ee:	f04f 0000 	mov.w	r0, #0
   822f2:	e004      	b.n	822fe <SCPI_ParamString+0x6a>
    }

    if (!paramNext(context, mandatory)) {
        return FALSE;
   822f4:	f04f 0000 	mov.w	r0, #0
   822f8:	e001      	b.n	822fe <SCPI_ParamString+0x6a>
            *len = length;
        }
        return TRUE;
    }

    return FALSE;
   822fa:	f04f 0000 	mov.w	r0, #0
}
   822fe:	b002      	add	sp, #8
   82300:	bd70      	pop	{r4, r5, r6, pc}
   82302:	bf00      	nop

00082304 <SCPI_ParamDouble>:
 * @param context
 * @param value
 * @param mandatory
 * @return 
 */
bool_t SCPI_ParamDouble(scpi_t * context, double * value, bool_t mandatory) {
   82304:	b570      	push	{r4, r5, r6, lr}
   82306:	b082      	sub	sp, #8
   82308:	4604      	mov	r4, r0
   8230a:	4613      	mov	r3, r2
    const char * param;
    size_t param_len;
    size_t num_len;

    if (!value) {
   8230c:	460e      	mov	r6, r1
   8230e:	b1e1      	cbz	r1, 8234a <SCPI_ParamDouble+0x46>
        return FALSE;
    }

    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
   82310:	a901      	add	r1, sp, #4
   82312:	466a      	mov	r2, sp
   82314:	f242 2595 	movw	r5, #8853	; 0x2295
   82318:	f2c0 0508 	movt	r5, #8
   8231c:	47a8      	blx	r5
   8231e:	b1b8      	cbz	r0, 82350 <SCPI_ParamDouble+0x4c>
        return FALSE;
    }

    num_len = strToDouble(param, value);
   82320:	9801      	ldr	r0, [sp, #4]
   82322:	4631      	mov	r1, r6
   82324:	f242 73dd 	movw	r3, #10205	; 0x27dd
   82328:	f2c0 0308 	movt	r3, #8
   8232c:	4798      	blx	r3

    if (num_len != param_len) {
   8232e:	9900      	ldr	r1, [sp, #0]
   82330:	4288      	cmp	r0, r1
   82332:	d010      	beq.n	82356 <SCPI_ParamDouble+0x52>
        SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
   82334:	4620      	mov	r0, r4
   82336:	f06f 0189 	mvn.w	r1, #137	; 0x89
   8233a:	f241 6211 	movw	r2, #5649	; 0x1611
   8233e:	f2c0 0208 	movt	r2, #8
   82342:	4790      	blx	r2
        return FALSE;
   82344:	f04f 0000 	mov.w	r0, #0
   82348:	e007      	b.n	8235a <SCPI_ParamDouble+0x56>
    const char * param;
    size_t param_len;
    size_t num_len;

    if (!value) {
        return FALSE;
   8234a:	f04f 0000 	mov.w	r0, #0
   8234e:	e004      	b.n	8235a <SCPI_ParamDouble+0x56>
    }

    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
        return FALSE;
   82350:	f04f 0000 	mov.w	r0, #0
   82354:	e001      	b.n	8235a <SCPI_ParamDouble+0x56>
    if (num_len != param_len) {
        SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
        return FALSE;
    }

    return TRUE;
   82356:	f04f 0001 	mov.w	r0, #1
}
   8235a:	b002      	add	sp, #8
   8235c:	bd70      	pop	{r4, r5, r6, pc}
   8235e:	bf00      	nop

00082360 <SCPI_ParamInt>:
 * @param context
 * @param value
 * @param mandatory
 * @return 
 */
bool_t SCPI_ParamInt(scpi_t * context, int32_t * value, bool_t mandatory) {
   82360:	b570      	push	{r4, r5, r6, lr}
   82362:	b082      	sub	sp, #8
   82364:	4604      	mov	r4, r0
   82366:	4613      	mov	r3, r2
    const char * param;
    size_t param_len;
    size_t num_len;

    if (!value) {
   82368:	460e      	mov	r6, r1
   8236a:	b1e1      	cbz	r1, 823a6 <SCPI_ParamInt+0x46>
        return FALSE;
    }

    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
   8236c:	a901      	add	r1, sp, #4
   8236e:	466a      	mov	r2, sp
   82370:	f242 2595 	movw	r5, #8853	; 0x2295
   82374:	f2c0 0508 	movt	r5, #8
   82378:	47a8      	blx	r5
   8237a:	b1b8      	cbz	r0, 823ac <SCPI_ParamInt+0x4c>
        return FALSE;
    }

    num_len = strToLong(param, value);
   8237c:	9801      	ldr	r0, [sp, #4]
   8237e:	4631      	mov	r1, r6
   82380:	f242 73b9 	movw	r3, #10169	; 0x27b9
   82384:	f2c0 0308 	movt	r3, #8
   82388:	4798      	blx	r3

    if (num_len != param_len) {
   8238a:	9900      	ldr	r1, [sp, #0]
   8238c:	4288      	cmp	r0, r1
   8238e:	d010      	beq.n	823b2 <SCPI_ParamInt+0x52>
        SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
   82390:	4620      	mov	r0, r4
   82392:	f06f 0189 	mvn.w	r1, #137	; 0x89
   82396:	f241 6211 	movw	r2, #5649	; 0x1611
   8239a:	f2c0 0208 	movt	r2, #8
   8239e:	4790      	blx	r2
        return FALSE;
   823a0:	f04f 0000 	mov.w	r0, #0
   823a4:	e007      	b.n	823b6 <SCPI_ParamInt+0x56>
    const char * param;
    size_t param_len;
    size_t num_len;

    if (!value) {
        return FALSE;
   823a6:	f04f 0000 	mov.w	r0, #0
   823aa:	e004      	b.n	823b6 <SCPI_ParamInt+0x56>
    }

    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
        return FALSE;
   823ac:	f04f 0000 	mov.w	r0, #0
   823b0:	e001      	b.n	823b6 <SCPI_ParamInt+0x56>
    if (num_len != param_len) {
        SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
        return FALSE;
    }

    return TRUE;
   823b2:	f04f 0001 	mov.w	r0, #1
}
   823b6:	b002      	add	sp, #8
   823b8:	bd70      	pop	{r4, r5, r6, pc}
   823ba:	bf00      	nop

000823bc <SCPI_ParamNumber>:
 * @param context
 * @param value return value
 * @param mandatory if the parameter is mandatory
 * @return 
 */
bool_t SCPI_ParamNumber(scpi_t * context, scpi_number_t * value, bool_t mandatory) {
   823bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   823c0:	b085      	sub	sp, #20
   823c2:	9001      	str	r0, [sp, #4]
   823c4:	460e      	mov	r6, r1
   823c6:	4614      	mov	r4, r2
    const char * param;
    size_t len;
    size_t numlen;

    /* read parameter and shift to the next one */
    result = SCPI_ParamString(context, &param, &len, mandatory);
   823c8:	a903      	add	r1, sp, #12
   823ca:	aa02      	add	r2, sp, #8
   823cc:	4623      	mov	r3, r4
   823ce:	f242 2595 	movw	r5, #8853	; 0x2295
   823d2:	f2c0 0508 	movt	r5, #8
   823d6:	47a8      	blx	r5

    /* value not initializes */
    if (!value) {
   823d8:	2e00      	cmp	r6, #0
   823da:	f000 8088 	beq.w	824ee <SCPI_ParamNumber+0x132>
        return FALSE;
    }

    value->type = SCPI_NUM_DEF;
   823de:	f04f 0303 	mov.w	r3, #3
   823e2:	7273      	strb	r3, [r6, #9]

    /* if parameter was not found, return TRUE or FALSE according
     * to fact that parameter was mandatory or not */
    if (!result) {
   823e4:	b910      	cbnz	r0, 823ec <SCPI_ParamNumber+0x30>
        return mandatory ? FALSE : TRUE;
   823e6:	f084 0001 	eor.w	r0, r4, #1
   823ea:	e08f      	b.n	8250c <SCPI_ParamNumber+0x150>
    }

    /* convert string to special number type */
    if (translateSpecialNumber(context->special_numbers, param, len, value)) {
   823ec:	9801      	ldr	r0, [sp, #4]
   823ee:	6b87      	ldr	r7, [r0, #56]	; 0x38
   823f0:	f8dd 800c 	ldr.w	r8, [sp, #12]
   823f4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 * @return TRUE if str matches one of specs patterns
 */
static bool_t translateSpecialNumber(const scpi_special_number_def_t * specs, const char * str, size_t len, scpi_number_t * value) {
    int i;

    value->value = 0.0;
   823f8:	f04f 0200 	mov.w	r2, #0
   823fc:	f04f 0300 	mov.w	r3, #0
   82400:	e9c6 2300 	strd	r2, r3, [r6]
    value->unit = SCPI_UNIT_NONE;
   82404:	f04f 0100 	mov.w	r1, #0
   82408:	7231      	strb	r1, [r6, #8]
    value->type = SCPI_NUM_NUMBER;
   8240a:	7271      	strb	r1, [r6, #9]

    if (specs == NULL) {
   8240c:	2f00      	cmp	r7, #0
   8240e:	d071      	beq.n	824f4 <SCPI_ParamNumber+0x138>
        return FALSE;
    }

    for (i = 0; specs[i].name != NULL; i++) {
   82410:	683c      	ldr	r4, [r7, #0]
   82412:	2c00      	cmp	r4, #0
   82414:	d06e      	beq.n	824f4 <SCPI_ParamNumber+0x138>
 * @param context
 * @param value return value
 * @param mandatory if the parameter is mandatory
 * @return 
 */
bool_t SCPI_ParamNumber(scpi_t * context, scpi_number_t * value, bool_t mandatory) {
   82416:	f107 0508 	add.w	r5, r7, #8
    if (specs == NULL) {
        return FALSE;
    }

    for (i = 0; specs[i].name != NULL; i++) {
        if (matchPattern(specs[i].name, strlen(specs[i].name), str, len)) {
   8241a:	f249 0bb9 	movw	fp, #37049	; 0x90b9
   8241e:	f2c0 0b08 	movt	fp, #8
   82422:	f642 2a7d 	movw	sl, #10877	; 0x2a7d
   82426:	f2c0 0a08 	movt	sl, #8
   8242a:	4620      	mov	r0, r4
   8242c:	47d8      	blx	fp
   8242e:	4601      	mov	r1, r0
   82430:	4620      	mov	r0, r4
   82432:	4642      	mov	r2, r8
   82434:	464b      	mov	r3, r9
   82436:	47d0      	blx	sl
   82438:	b120      	cbz	r0, 82444 <SCPI_ParamNumber+0x88>
            value->type = specs[i].type;
   8243a:	793a      	ldrb	r2, [r7, #4]
   8243c:	7272      	strb	r2, [r6, #9]
    }

    /* convert string to special number type */
    if (translateSpecialNumber(context->special_numbers, param, len, value)) {
        /* found special type */
        return TRUE;
   8243e:	f04f 0001 	mov.w	r0, #1
   82442:	e063      	b.n	8250c <SCPI_ParamNumber+0x150>

    if (specs == NULL) {
        return FALSE;
    }

    for (i = 0; specs[i].name != NULL; i++) {
   82444:	462f      	mov	r7, r5
   82446:	f855 4b08 	ldr.w	r4, [r5], #8
   8244a:	2c00      	cmp	r4, #0
   8244c:	d1ed      	bne.n	8242a <SCPI_ParamNumber+0x6e>
   8244e:	e051      	b.n	824f4 <SCPI_ParamNumber+0x138>
    /* convert text from double - no special type */
    numlen = strToDouble(param, &value->value);

    /* transform units of value */
    if (numlen <= len) {
        return transformNumber(context, param + numlen, len - numlen, value);
   82450:	9c03      	ldr	r4, [sp, #12]
   82452:	eb04 0800 	add.w	r8, r4, r0
   82456:	1a0c      	subs	r4, r1, r0
 * @return TRUE if value parameter was converted to base units
 */
static bool_t transformNumber(scpi_t * context, const char * unit, size_t len, scpi_number_t * value) {
    size_t s;
    const scpi_unit_def_t * unitDef;
    s = skipWhitespace(unit, len);
   82458:	4640      	mov	r0, r8
   8245a:	4621      	mov	r1, r4
   8245c:	f642 12f5 	movw	r2, #10741	; 0x29f5
   82460:	f2c0 0208 	movt	r2, #8
   82464:	4790      	blx	r2

    if (s == len) {
   82466:	4284      	cmp	r4, r0
   82468:	d105      	bne.n	82476 <SCPI_ParamNumber+0xba>
        value->unit = SCPI_UNIT_NONE;
   8246a:	f04f 0100 	mov.w	r1, #0
   8246e:	7231      	strb	r1, [r6, #8]
        return TRUE;
   82470:	f04f 0001 	mov.w	r0, #1
   82474:	e04a      	b.n	8250c <SCPI_ParamNumber+0x150>
    }

    unitDef = translateUnit(context->units, unit + s, len - s);
   82476:	9f01      	ldr	r7, [sp, #4]
   82478:	6b7f      	ldr	r7, [r7, #52]	; 0x34
   8247a:	4480      	add	r8, r0
   8247c:	ebc0 0904 	rsb	r9, r0, r4
 * @return pointer of related unit definition or NULL
 */
static const scpi_unit_def_t * translateUnit(const scpi_unit_def_t * units, const char * unit, size_t len) {
    int i;
    
    if (units == NULL) {
   82480:	b1d7      	cbz	r7, 824b8 <SCPI_ParamNumber+0xfc>
        return NULL;
    }
    
    for (i = 0; units[i].name != NULL; i++) {
   82482:	683c      	ldr	r4, [r7, #0]
   82484:	b1c4      	cbz	r4, 824b8 <SCPI_ParamNumber+0xfc>
 * @param context
 * @param value return value
 * @param mandatory if the parameter is mandatory
 * @return 
 */
bool_t SCPI_ParamNumber(scpi_t * context, scpi_number_t * value, bool_t mandatory) {
   82486:	f107 0510 	add.w	r5, r7, #16
    if (units == NULL) {
        return NULL;
    }
    
    for (i = 0; units[i].name != NULL; i++) {
        if (compareStr(unit, len, units[i].name, strlen(units[i].name))) {
   8248a:	f249 0ab9 	movw	sl, #37049	; 0x90b9
   8248e:	f2c0 0a08 	movt	sl, #8
   82492:	f242 7bfd 	movw	fp, #10237	; 0x27fd
   82496:	f2c0 0b08 	movt	fp, #8
   8249a:	4620      	mov	r0, r4
   8249c:	47d0      	blx	sl
   8249e:	4603      	mov	r3, r0
   824a0:	4640      	mov	r0, r8
   824a2:	4649      	mov	r1, r9
   824a4:	4622      	mov	r2, r4
   824a6:	47d8      	blx	fp
   824a8:	b928      	cbnz	r0, 824b6 <SCPI_ParamNumber+0xfa>
    
    if (units == NULL) {
        return NULL;
    }
    
    for (i = 0; units[i].name != NULL; i++) {
   824aa:	462f      	mov	r7, r5
   824ac:	f855 4b10 	ldr.w	r4, [r5], #16
   824b0:	2c00      	cmp	r4, #0
   824b2:	d1f2      	bne.n	8249a <SCPI_ParamNumber+0xde>
   824b4:	e000      	b.n	824b8 <SCPI_ParamNumber+0xfc>
        return TRUE;
    }

    unitDef = translateUnit(context->units, unit + s, len - s);

    if (unitDef == NULL) {
   824b6:	b957      	cbnz	r7, 824ce <SCPI_ParamNumber+0x112>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SUFFIX);
   824b8:	9801      	ldr	r0, [sp, #4]
   824ba:	f06f 0182 	mvn.w	r1, #130	; 0x82
   824be:	f241 6311 	movw	r3, #5649	; 0x1611
   824c2:	f2c0 0308 	movt	r3, #8
   824c6:	4798      	blx	r3
        return FALSE;
   824c8:	f04f 0000 	mov.w	r0, #0
   824cc:	e01e      	b.n	8250c <SCPI_ParamNumber+0x150>
    }

    value->value *= unitDef->mult;
   824ce:	e9d6 0100 	ldrd	r0, r1, [r6]
   824d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   824d6:	f648 1455 	movw	r4, #35157	; 0x8955
   824da:	f2c0 0408 	movt	r4, #8
   824de:	47a0      	blx	r4
   824e0:	e9c6 0100 	strd	r0, r1, [r6]
    value->unit = unitDef->unit;
   824e4:	7938      	ldrb	r0, [r7, #4]
   824e6:	7230      	strb	r0, [r6, #8]

    return TRUE;
   824e8:	f04f 0001 	mov.w	r0, #1
   824ec:	e00e      	b.n	8250c <SCPI_ParamNumber+0x150>
    /* read parameter and shift to the next one */
    result = SCPI_ParamString(context, &param, &len, mandatory);

    /* value not initializes */
    if (!value) {
        return FALSE;
   824ee:	f04f 0000 	mov.w	r0, #0
   824f2:	e00b      	b.n	8250c <SCPI_ParamNumber+0x150>
        /* found special type */
        return TRUE;
    }

    /* convert text from double - no special type */
    numlen = strToDouble(param, &value->value);
   824f4:	9803      	ldr	r0, [sp, #12]
   824f6:	4631      	mov	r1, r6
   824f8:	f242 73dd 	movw	r3, #10205	; 0x27dd
   824fc:	f2c0 0308 	movt	r3, #8
   82500:	4798      	blx	r3

    /* transform units of value */
    if (numlen <= len) {
   82502:	9902      	ldr	r1, [sp, #8]
   82504:	4288      	cmp	r0, r1
   82506:	d9a3      	bls.n	82450 <SCPI_ParamNumber+0x94>
        return transformNumber(context, param + numlen, len - numlen, value);
    }
    return FALSE;
   82508:	f04f 0000 	mov.w	r0, #0

}
   8250c:	b005      	add	sp, #20
   8250e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82512:	bf00      	nop

00082514 <SCPI_NumberToStr>:
 * @param value number value
 * @param str target string
 * @param len max length of string
 * @return number of chars written to string
 */
size_t SCPI_NumberToStr(scpi_t * context, scpi_number_t * value, char * str, size_t len) {
   82514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82518:	b083      	sub	sp, #12
   8251a:	4606      	mov	r6, r0
   8251c:	4690      	mov	r8, r2
   8251e:	4699      	mov	r9, r3
    const char * type;
    const char * unit;
    size_t result;

    if (!value || !str) {
   82520:	460d      	mov	r5, r1
   82522:	2900      	cmp	r1, #0
   82524:	d04c      	beq.n	825c0 <SCPI_NumberToStr+0xac>
   82526:	2a00      	cmp	r2, #0
   82528:	d04d      	beq.n	825c6 <SCPI_NumberToStr+0xb2>
        return 0;
    }

    type = translateSpecialNumberInverse(context->special_numbers, value->type);
   8252a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8252c:	7a49      	ldrb	r1, [r1, #9]
 * @return String representing special number or NULL
 */
static const char * translateSpecialNumberInverse(const scpi_special_number_def_t * specs, scpi_special_number_t type) {
    int i;

    if (specs == NULL) {
   8252e:	2b00      	cmp	r3, #0
   82530:	d064      	beq.n	825fc <SCPI_NumberToStr+0xe8>
        return NULL;
    }
    
    for (i = 0; specs[i].name != NULL; i++) {
   82532:	681c      	ldr	r4, [r3, #0]
   82534:	2c00      	cmp	r4, #0
   82536:	d061      	beq.n	825fc <SCPI_NumberToStr+0xe8>
        if (specs[i].type == type) {
   82538:	791a      	ldrb	r2, [r3, #4]
   8253a:	428a      	cmp	r2, r1
   8253c:	d04c      	beq.n	825d8 <SCPI_NumberToStr+0xc4>
   8253e:	e004      	b.n	8254a <SCPI_NumberToStr+0x36>
   82540:	f103 0308 	add.w	r3, r3, #8
   82544:	7918      	ldrb	r0, [r3, #4]
   82546:	4288      	cmp	r0, r1
   82548:	d046      	beq.n	825d8 <SCPI_NumberToStr+0xc4>

    if (specs == NULL) {
        return NULL;
    }
    
    for (i = 0; specs[i].name != NULL; i++) {
   8254a:	689c      	ldr	r4, [r3, #8]
   8254c:	2c00      	cmp	r4, #0
   8254e:	d1f7      	bne.n	82540 <SCPI_NumberToStr+0x2c>
   82550:	e054      	b.n	825fc <SCPI_NumberToStr+0xe8>
    
    if (units == NULL) {
        return NULL;
    }
    
    for (i = 0; units[i].name != NULL; i++) {
   82552:	680f      	ldr	r7, [r1, #0]
   82554:	2f00      	cmp	r7, #0
   82556:	d039      	beq.n	825cc <SCPI_NumberToStr+0xb8>
 * @param value number value
 * @param str target string
 * @param len max length of string
 * @return number of chars written to string
 */
size_t SCPI_NumberToStr(scpi_t * context, scpi_number_t * value, char * str, size_t len) {
   82558:	f101 0610 	add.w	r6, r1, #16
    if (units == NULL) {
        return NULL;
    }
    
    for (i = 0; units[i].name != NULL; i++) {
        if ((units[i].unit == unit) && (units[i].mult == 1)) {
   8255c:	f648 6525 	movw	r5, #36389	; 0x8e25
   82560:	f2c0 0508 	movt	r5, #8
   82564:	7908      	ldrb	r0, [r1, #4]
   82566:	4550      	cmp	r0, sl
   82568:	d109      	bne.n	8257e <SCPI_NumberToStr+0x6a>
   8256a:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
   8256e:	f04f 0200 	mov.w	r2, #0
   82572:	f04f 0300 	mov.w	r3, #0
   82576:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
   8257a:	47a8      	blx	r5
   8257c:	b930      	cbnz	r0, 8258c <SCPI_NumberToStr+0x78>
    
    if (units == NULL) {
        return NULL;
    }
    
    for (i = 0; units[i].name != NULL; i++) {
   8257e:	4631      	mov	r1, r6
   82580:	f856 7b10 	ldr.w	r7, [r6], #16
   82584:	2f00      	cmp	r7, #0
   82586:	d1ed      	bne.n	82564 <SCPI_NumberToStr+0x50>
    if (type) {
        strncpy(str, type, len);
        return min(strlen(type), len);
    }

    result = doubleToStr(value->value, str, len);
   82588:	4658      	mov	r0, fp
   8258a:	e047      	b.n	8261c <SCPI_NumberToStr+0x108>

    unit = translateUnitInverse(context->units, value->unit);

    if (unit) {
   8258c:	b307      	cbz	r7, 825d0 <SCPI_NumberToStr+0xbc>
        strncat(str, " ", len);
   8258e:	4640      	mov	r0, r8
   82590:	f24d 71d4 	movw	r1, #55252	; 0xd7d4
   82594:	f2c0 0108 	movt	r1, #8
   82598:	464a      	mov	r2, r9
   8259a:	f249 140d 	movw	r4, #37133	; 0x910d
   8259e:	f2c0 0408 	movt	r4, #8
   825a2:	47a0      	blx	r4
        strncat(str, unit, len);
   825a4:	4640      	mov	r0, r8
   825a6:	4639      	mov	r1, r7
   825a8:	464a      	mov	r2, r9
   825aa:	47a0      	blx	r4
        result += strlen(unit) + 1;
   825ac:	4638      	mov	r0, r7
   825ae:	f249 03b9 	movw	r3, #37049	; 0x90b9
   825b2:	f2c0 0308 	movt	r3, #8
   825b6:	4798      	blx	r3
   825b8:	f10b 0b01 	add.w	fp, fp, #1
   825bc:	4458      	add	r0, fp
   825be:	e02d      	b.n	8261c <SCPI_NumberToStr+0x108>
    const char * type;
    const char * unit;
    size_t result;

    if (!value || !str) {
        return 0;
   825c0:	f04f 0000 	mov.w	r0, #0
   825c4:	e02a      	b.n	8261c <SCPI_NumberToStr+0x108>
   825c6:	f04f 0000 	mov.w	r0, #0
   825ca:	e027      	b.n	8261c <SCPI_NumberToStr+0x108>
    if (type) {
        strncpy(str, type, len);
        return min(strlen(type), len);
    }

    result = doubleToStr(value->value, str, len);
   825cc:	4658      	mov	r0, fp
   825ce:	e025      	b.n	8261c <SCPI_NumberToStr+0x108>
   825d0:	4658      	mov	r0, fp
   825d2:	e023      	b.n	8261c <SCPI_NumberToStr+0x108>
   825d4:	4658      	mov	r0, fp
   825d6:	e021      	b.n	8261c <SCPI_NumberToStr+0x108>
    }

    type = translateSpecialNumberInverse(context->special_numbers, value->type);

    if (type) {
        strncpy(str, type, len);
   825d8:	4640      	mov	r0, r8
   825da:	4621      	mov	r1, r4
   825dc:	464a      	mov	r2, r9
   825de:	f249 1337 	movw	r3, #37175	; 0x9137
   825e2:	f2c0 0308 	movt	r3, #8
   825e6:	4798      	blx	r3
        return min(strlen(type), len);
   825e8:	4620      	mov	r0, r4
   825ea:	f249 02b9 	movw	r2, #37049	; 0x90b9
   825ee:	f2c0 0208 	movt	r2, #8
   825f2:	4790      	blx	r2
   825f4:	4548      	cmp	r0, r9
   825f6:	bf28      	it	cs
   825f8:	4648      	movcs	r0, r9
   825fa:	e00f      	b.n	8261c <SCPI_NumberToStr+0x108>
    }

    result = doubleToStr(value->value, str, len);
   825fc:	e9d5 0100 	ldrd	r0, r1, [r5]
   82600:	4642      	mov	r2, r8
   82602:	464b      	mov	r3, r9
   82604:	f242 7495 	movw	r4, #10133	; 0x2795
   82608:	f2c0 0408 	movt	r4, #8
   8260c:	47a0      	blx	r4
   8260e:	4683      	mov	fp, r0

    unit = translateUnitInverse(context->units, value->unit);
   82610:	6b71      	ldr	r1, [r6, #52]	; 0x34
   82612:	f895 a008 	ldrb.w	sl, [r5, #8]
 * @return string representation of unit
 */
static const char * translateUnitInverse(const scpi_unit_def_t * units, const scpi_unit_t unit) {
    int i;
    
    if (units == NULL) {
   82616:	2900      	cmp	r1, #0
   82618:	d19b      	bne.n	82552 <SCPI_NumberToStr+0x3e>
   8261a:	e7db      	b.n	825d4 <SCPI_NumberToStr+0xc0>
        strncat(str, unit, len);
        result += strlen(unit) + 1;
    }

    return result;
}
   8261c:	b003      	add	sp, #12
   8261e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82622:	bf00      	nop

00082624 <isFinalState>:
 */
static bool_t isFinalState(locate_text_states state) {
    return (
        ((state) == STATE_COMMA)
        || ((state) == STATE_LAST_WHITESPACE)
        || ((state) == STATE_TEXT) ||
   82624:	f1a0 0302 	sub.w	r3, r0, #2
   82628:	b2d9      	uxtb	r1, r3
   8262a:	2902      	cmp	r1, #2
   8262c:	d904      	bls.n	82638 <isFinalState+0x14>
   8262e:	f1d0 0001 	rsbs	r0, r0, #1
   82632:	bf38      	it	cc
   82634:	2000      	movcc	r0, #0
   82636:	4770      	bx	lr
   82638:	f04f 0001 	mov.w	r0, #1
        ((state) == STATE_FIRST_WHITESPACE)
    );
}
   8263c:	4770      	bx	lr
   8263e:	bf00      	nop

00082640 <strnpbrk>:
 * @param str
 * @param size
 * @param set
 * @return 
 */
char * strnpbrk(const char *str, size_t size, const char *set) {
   82640:	b470      	push	{r4, r5, r6}
    const char *scanp;
    long c, sc;
    const char * strend = str + size;
   82642:	1841      	adds	r1, r0, r1

    while ((strend != str) && ((c = *str++) != 0)) {
   82644:	4288      	cmp	r0, r1
   82646:	d01a      	beq.n	8267e <strnpbrk+0x3e>
   82648:	4603      	mov	r3, r0
   8264a:	f813 6b01 	ldrb.w	r6, [r3], #1
   8264e:	b936      	cbnz	r6, 8265e <strnpbrk+0x1e>
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
                return ((char *) (str - 1));
    }
    return (NULL);
   82650:	f04f 0000 	mov.w	r0, #0
   82654:	e018      	b.n	82688 <strnpbrk+0x48>
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
   82656:	42b5      	cmp	r5, r6
   82658:	d102      	bne.n	82660 <strnpbrk+0x20>
   8265a:	e015      	b.n	82688 <strnpbrk+0x48>
char * strnpbrk(const char *str, size_t size, const char *set) {
    const char *scanp;
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
   8265c:	4623      	mov	r3, r4
   8265e:	4614      	mov	r4, r2
        for (scanp = set; (sc = *scanp++) != '\0';)
   82660:	f814 5b01 	ldrb.w	r5, [r4], #1
   82664:	2d00      	cmp	r5, #0
   82666:	d1f6      	bne.n	82656 <strnpbrk+0x16>
char * strnpbrk(const char *str, size_t size, const char *set) {
    const char *scanp;
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
   82668:	428b      	cmp	r3, r1
   8266a:	d00b      	beq.n	82684 <strnpbrk+0x44>
   8266c:	461c      	mov	r4, r3
   8266e:	f814 6b01 	ldrb.w	r6, [r4], #1
   82672:	4618      	mov	r0, r3
   82674:	2e00      	cmp	r6, #0
   82676:	d1f1      	bne.n	8265c <strnpbrk+0x1c>
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
                return ((char *) (str - 1));
    }
    return (NULL);
   82678:	f04f 0000 	mov.w	r0, #0
   8267c:	e004      	b.n	82688 <strnpbrk+0x48>
   8267e:	f04f 0000 	mov.w	r0, #0
   82682:	e001      	b.n	82688 <strnpbrk+0x48>
   82684:	f04f 0000 	mov.w	r0, #0
}
   82688:	bc70      	pop	{r4, r5, r6}
   8268a:	4770      	bx	lr

0008268c <longToStr>:
 * @param val   integer value
 * @param str   converted textual representation
 * @param len   string buffer length
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
   8268c:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t x = 1000000000L;
    int_fast8_t digit;
    size_t pos = 0;

    if (val == 0) {
   8268e:	4603      	mov	r3, r0
   82690:	b938      	cbnz	r0, 826a2 <longToStr+0x16>
        if (pos < len) str[pos++] = '0';
   82692:	2a00      	cmp	r2, #0
   82694:	d055      	beq.n	82742 <longToStr+0xb6>
   82696:	f04f 0030 	mov.w	r0, #48	; 0x30
   8269a:	7008      	strb	r0, [r1, #0]
   8269c:	f04f 0001 	mov.w	r0, #1
   826a0:	e049      	b.n	82736 <longToStr+0xaa>
    } else {
        if (val < 0) {
   826a2:	2800      	cmp	r0, #0
   826a4:	da08      	bge.n	826b8 <longToStr+0x2c>
            val = -val;
   826a6:	f1c0 0300 	rsb	r3, r0, #0
            if (pos < len) str[pos++] = '-';
   826aa:	b142      	cbz	r2, 826be <longToStr+0x32>
   826ac:	f04f 002d 	mov.w	r0, #45	; 0x2d
   826b0:	7008      	strb	r0, [r1, #0]
   826b2:	f04f 0001 	mov.w	r0, #1
   826b6:	e004      	b.n	826c2 <longToStr+0x36>
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
    uint32_t x = 1000000000L;
    int_fast8_t digit;
    size_t pos = 0;
   826b8:	f04f 0000 	mov.w	r0, #0
   826bc:	e001      	b.n	826c2 <longToStr+0x36>
   826be:	f04f 0000 	mov.w	r0, #0
        if (val < 0) {
            val = -val;
            if (pos < len) str[pos++] = '-';
        }

        while ((val / x) == 0) {
   826c2:	461d      	mov	r5, r3
   826c4:	f64c 14ff 	movw	r4, #51711	; 0xc9ff
   826c8:	f6c3 349a 	movt	r4, #15258	; 0x3b9a
   826cc:	42a3      	cmp	r3, r4
   826ce:	d810      	bhi.n	826f2 <longToStr+0x66>
   826d0:	f44f 434a 	mov.w	r3, #51712	; 0xca00
   826d4:	f6c3 339a 	movt	r3, #15258	; 0x3b9a
            x /= 10;
   826d8:	f64c 46cd 	movw	r6, #52429	; 0xcccd
   826dc:	f6cc 46cc 	movt	r6, #52428	; 0xcccc
   826e0:	fba6 4303 	umull	r4, r3, r6, r3
   826e4:	ea4f 03d3 	mov.w	r3, r3, lsr #3
        if (val < 0) {
            val = -val;
            if (pos < len) str[pos++] = '-';
        }

        while ((val / x) == 0) {
   826e8:	fbb5 f4f3 	udiv	r4, r5, r3
   826ec:	2c00      	cmp	r4, #0
   826ee:	d0f7      	beq.n	826e0 <longToStr+0x54>
   826f0:	e003      	b.n	826fa <longToStr+0x6e>
   826f2:	f44f 434a 	mov.w	r3, #51712	; 0xca00
   826f6:	f6c3 339a 	movt	r3, #15258	; 0x3b9a
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   826fa:	4282      	cmp	r2, r0
   826fc:	d933      	bls.n	82766 <longToStr+0xda>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   826fe:	fbb5 f6f3 	udiv	r6, r5, r3
            break;
        }
    }
    
    return result;
}
   82702:	b2f6      	uxtb	r6, r6

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
            val -= digit * x;
            x /= 10;
   82704:	f64c 47cd 	movw	r7, #52429	; 0xcccd
   82708:	f6cc 47cc 	movt	r7, #52428	; 0xcccc
   8270c:	ea6f 0400 	mvn.w	r4, r0
   82710:	18a4      	adds	r4, r4, r2
   82712:	f014 0f01 	tst.w	r4, #1
   82716:	d128      	bne.n	8276a <longToStr+0xde>
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   82718:	f106 0430 	add.w	r4, r6, #48	; 0x30
   8271c:	540c      	strb	r4, [r1, r0]
   8271e:	f100 0401 	add.w	r4, r0, #1
   82722:	4620      	mov	r0, r4
            val -= digit * x;
   82724:	fb03 5516 	mls	r5, r3, r6, r5
            x /= 10;
   82728:	fba7 6303 	umull	r6, r3, r7, r3
        } while (x && (pos < len));
   8272c:	08db      	lsrs	r3, r3, #3
   8272e:	d002      	beq.n	82736 <longToStr+0xaa>
   82730:	42a2      	cmp	r2, r4
   82732:	d809      	bhi.n	82748 <longToStr+0xbc>
   82734:	e017      	b.n	82766 <longToStr+0xda>
    }

    if (pos < len) str[pos] = 0;
   82736:	4290      	cmp	r0, r2
   82738:	d215      	bcs.n	82766 <longToStr+0xda>
   8273a:	f04f 0200 	mov.w	r2, #0
   8273e:	540a      	strb	r2, [r1, r0]
   82740:	e011      	b.n	82766 <longToStr+0xda>
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
    uint32_t x = 1000000000L;
    int_fast8_t digit;
    size_t pos = 0;
   82742:	f04f 0000 	mov.w	r0, #0
   82746:	e00e      	b.n	82766 <longToStr+0xda>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   82748:	fbb5 f0f3 	udiv	r0, r5, r3
            break;
        }
    }
    
    return result;
}
   8274c:	b2c6      	uxtb	r6, r0
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   8274e:	f106 0030 	add.w	r0, r6, #48	; 0x30
   82752:	5508      	strb	r0, [r1, r4]
   82754:	f104 0001 	add.w	r0, r4, #1
            val -= digit * x;
   82758:	fb03 5516 	mls	r5, r3, r6, r5
            x /= 10;
   8275c:	fba7 4303 	umull	r4, r3, r7, r3
        } while (x && (pos < len));
   82760:	08db      	lsrs	r3, r3, #3
   82762:	d113      	bne.n	8278c <longToStr+0x100>
   82764:	e7e7      	b.n	82736 <longToStr+0xaa>
    }

    if (pos < len) str[pos] = 0;
    return pos;
}
   82766:	bcf0      	pop	{r4, r5, r6, r7}
   82768:	4770      	bx	lr
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   8276a:	f106 0430 	add.w	r4, r6, #48	; 0x30
   8276e:	540c      	strb	r4, [r1, r0]
   82770:	f100 0001 	add.w	r0, r0, #1
            val -= digit * x;
   82774:	fb03 5516 	mls	r5, r3, r6, r5
            x /= 10;
   82778:	fba7 6303 	umull	r6, r3, r7, r3
        } while (x && (pos < len));
   8277c:	08db      	lsrs	r3, r3, #3
   8277e:	d0da      	beq.n	82736 <longToStr+0xaa>
   82780:	4282      	cmp	r2, r0
   82782:	d9f0      	bls.n	82766 <longToStr+0xda>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   82784:	fbb5 f6f3 	udiv	r6, r5, r3
            break;
        }
    }
    
    return result;
}
   82788:	b2f6      	uxtb	r6, r6
   8278a:	e7c5      	b.n	82718 <longToStr+0x8c>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   8278c:	fbb5 f6f3 	udiv	r6, r5, r3
            break;
        }
    }
    
    return result;
}
   82790:	b2f6      	uxtb	r6, r6
   82792:	e7c1      	b.n	82718 <longToStr+0x8c>

00082794 <doubleToStr>:
 * @param val   double value
 * @param str   converted textual representation
 * @param len   string buffer length
 * @return number of bytes written to str (without '\0')
 */
size_t doubleToStr(double val, char * str, size_t len) {
   82794:	b500      	push	{lr}
   82796:	b083      	sub	sp, #12
    return snprintf(str, len, "%lg", val);
   82798:	e9cd 0100 	strd	r0, r1, [sp]
   8279c:	4610      	mov	r0, r2
   8279e:	4619      	mov	r1, r3
   827a0:	f64d 2238 	movw	r2, #55864	; 0xda38
   827a4:	f2c0 0208 	movt	r2, #8
   827a8:	f249 0353 	movw	r3, #36947	; 0x9053
   827ac:	f2c0 0308 	movt	r3, #8
   827b0:	4798      	blx	r3
}
   827b2:	b003      	add	sp, #12
   827b4:	bd00      	pop	{pc}
   827b6:	bf00      	nop

000827b8 <strToLong>:
 * Converts string to signed 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strToLong(const char * str, int32_t * val) {
   827b8:	b530      	push	{r4, r5, lr}
   827ba:	b083      	sub	sp, #12
   827bc:	4604      	mov	r4, r0
   827be:	460d      	mov	r5, r1
    char * endptr;
    *val = strtol(str, &endptr, 0);
   827c0:	a901      	add	r1, sp, #4
   827c2:	f04f 0200 	mov.w	r2, #0
   827c6:	f649 631d 	movw	r3, #40477	; 0x9e1d
   827ca:	f2c0 0308 	movt	r3, #8
   827ce:	4798      	blx	r3
   827d0:	6028      	str	r0, [r5, #0]
    return endptr - str;
}
   827d2:	9801      	ldr	r0, [sp, #4]
   827d4:	1b00      	subs	r0, r0, r4
   827d6:	b003      	add	sp, #12
   827d8:	bd30      	pop	{r4, r5, pc}
   827da:	bf00      	nop

000827dc <strToDouble>:
 * Converts string to double representation
 * @param str   string value
 * @param val   double result
 * @return      number of bytes used in string
 */
size_t strToDouble(const char * str, double * val) {
   827dc:	b530      	push	{r4, r5, lr}
   827de:	b083      	sub	sp, #12
   827e0:	4604      	mov	r4, r0
   827e2:	460d      	mov	r5, r1
    char * endptr;
    *val = strtod(str, &endptr);
   827e4:	a901      	add	r1, sp, #4
   827e6:	f649 43c9 	movw	r3, #40137	; 0x9cc9
   827ea:	f2c0 0308 	movt	r3, #8
   827ee:	4798      	blx	r3
   827f0:	e9c5 0100 	strd	r0, r1, [r5]
    return endptr - str;
}
   827f4:	9801      	ldr	r0, [sp, #4]
   827f6:	1b00      	subs	r0, r0, r4
   827f8:	b003      	add	sp, #12
   827fa:	bd30      	pop	{r4, r5, pc}

000827fc <compareStr>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
   827fc:	b510      	push	{r4, lr}
   827fe:	460c      	mov	r4, r1
    if (len1 != len2) {
   82800:	4299      	cmp	r1, r3
   82802:	d10b      	bne.n	8281c <compareStr+0x20>
        return FALSE;
    }

    if (SCPI_strncasecmp(str1, str2, len2) == 0) {
   82804:	4611      	mov	r1, r2
   82806:	4622      	mov	r2, r4
   82808:	f249 03c9 	movw	r3, #37065	; 0x90c9
   8280c:	f2c0 0308 	movt	r3, #8
   82810:	4798      	blx	r3
   82812:	f1d0 0001 	rsbs	r0, r0, #1
   82816:	bf38      	it	cc
   82818:	2000      	movcc	r0, #0
   8281a:	bd10      	pop	{r4, pc}
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
    if (len1 != len2) {
        return FALSE;
   8281c:	f04f 0000 	mov.w	r0, #0
    if (SCPI_strncasecmp(str1, str2, len2) == 0) {
        return TRUE;
    }

    return FALSE;
}
   82820:	bd10      	pop	{r4, pc}
   82822:	bf00      	nop

00082824 <locateStr>:
 * @param len1 length of string
 * @param str2 result
 * @param len2 length of result
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
   82824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82828:	b083      	sub	sp, #12
   8282a:	4606      	mov	r6, r0
   8282c:	9201      	str	r2, [sp, #4]
   8282e:	4699      	mov	r9, r3
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   82830:	460b      	mov	r3, r1
   82832:	2900      	cmp	r1, #0
   82834:	d03e      	beq.n	828b4 <locateStr+0x90>
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   82836:	f240 2298 	movw	r2, #664	; 0x298
   8283a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8283e:	f8d2 e000 	ldr.w	lr, [r2]
   82842:	f04f 0501 	mov.w	r5, #1
   82846:	f04f 0400 	mov.w	r4, #0
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;
   8284a:	4627      	mov	r7, r4
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
   8284c:	46a0      	mov	r8, r4
            } else if (c == ',') {
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
                nfa->stopIdx = nfa->i + 1;
                nfa->state = STATE_TEXT;
   8284e:	f04f 0b02 	mov.w	fp, #2
   82852:	ea6f 0104 	mvn.w	r1, r4
   82856:	18c9      	adds	r1, r1, r3
   82858:	4029      	ands	r1, r5
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   8285a:	5d00      	ldrb	r0, [r0, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   8285c:	4622      	mov	r2, r4
   8285e:	2c00      	cmp	r4, #0
   82860:	d04f      	beq.n	82902 <locateStr+0xde>
   82862:	e062      	b.n	8292a <locateStr+0x106>
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   82864:	5d31      	ldrb	r1, [r6, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   82866:	b112      	cbz	r2, 8286e <locateStr+0x4a>
   82868:	2a02      	cmp	r2, #2
   8286a:	d11b      	bne.n	828a4 <locateStr+0x80>
   8286c:	e00f      	b.n	8288e <locateStr+0x6a>
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   8286e:	eb0e 0001 	add.w	r0, lr, r1
   82872:	7840      	ldrb	r0, [r0, #1]
   82874:	f000 0008 	and.w	r0, r0, #8
   82878:	b2c0      	uxtb	r0, r0
   8287a:	b110      	cbz	r0, 82882 <locateStr+0x5e>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   8287c:	462f      	mov	r7, r5
   8287e:	46a8      	mov	r8, r5
   82880:	e010      	b.n	828a4 <locateStr+0x80>
            } else if (c == ',') {
   82882:	292c      	cmp	r1, #44	; 0x2c
   82884:	d01b      	beq.n	828be <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   82886:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   82888:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   8288a:	465a      	mov	r2, fp
   8288c:	e00a      	b.n	828a4 <locateStr+0x80>
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   8288e:	292c      	cmp	r1, #44	; 0x2c
   82890:	d018      	beq.n	828c4 <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   82892:	eb0e 0001 	add.w	r0, lr, r1
   82896:	7841      	ldrb	r1, [r0, #1]
   82898:	f001 0008 	and.w	r0, r1, #8
   8289c:	b2c1      	uxtb	r1, r0
                nfa->stopIdx = nfa->i + 1;
   8289e:	2900      	cmp	r1, #0
   828a0:	bf08      	it	eq
   828a2:	462f      	moveq	r7, r5
   828a4:	f104 0401 	add.w	r4, r4, #1
   828a8:	f105 0501 	add.w	r5, r5, #1
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   828ac:	5d31      	ldrb	r1, [r6, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   828ae:	2a00      	cmp	r2, #0
   828b0:	d076      	beq.n	829a0 <locateStr+0x17c>
   828b2:	e089      	b.n	829c8 <locateStr+0x1a4>
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;
   828b4:	f04f 0700 	mov.w	r7, #0
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
   828b8:	46b8      	mov	r8, r7
 * @param len2 length of result
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
   828ba:	463a      	mov	r2, r7
   828bc:	e004      	b.n	828c8 <locateStr+0xa4>
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   828be:	f04f 0204 	mov.w	r2, #4
   828c2:	e001      	b.n	828c8 <locateStr+0xa4>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   828c4:	f04f 0204 	mov.w	r2, #4
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
            break;
        }
    }

    if (isFinalState(nfa.state)) {
   828c8:	4610      	mov	r0, r2
   828ca:	f242 6325 	movw	r3, #9765	; 0x2625
   828ce:	f2c0 0308 	movt	r3, #8
   828d2:	4798      	blx	r3
   828d4:	b168      	cbz	r0, 828f2 <locateStr+0xce>

        if (str2) {
   828d6:	9a01      	ldr	r2, [sp, #4]
   828d8:	b10a      	cbz	r2, 828de <locateStr+0xba>
            *str2 = &str1[nfa.startIdx];
   828da:	4446      	add	r6, r8
   828dc:	6016      	str	r6, [r2, #0]
        }

        if (len2) {
   828de:	f1b9 0f00 	cmp.w	r9, #0
   828e2:	d009      	beq.n	828f8 <locateStr+0xd4>
            *len2 = nfa.stopIdx - nfa.startIdx;
   828e4:	ebc8 0707 	rsb	r7, r8, r7
   828e8:	f8c9 7000 	str.w	r7, [r9]
        }
        return TRUE;
   828ec:	f04f 0001 	mov.w	r0, #1
   828f0:	e004      	b.n	828fc <locateStr+0xd8>
    }
    return FALSE;
   828f2:	f04f 0000 	mov.w	r0, #0
   828f6:	e001      	b.n	828fc <locateStr+0xd8>
        }

        if (len2) {
            *len2 = nfa.stopIdx - nfa.startIdx;
        }
        return TRUE;
   828f8:	f04f 0001 	mov.w	r0, #1
    }
    return FALSE;
}
   828fc:	b003      	add	sp, #12
   828fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   82902:	eb0e 0c00 	add.w	ip, lr, r0
   82906:	f89c c001 	ldrb.w	ip, [ip, #1]
   8290a:	f00c 0c08 	and.w	ip, ip, #8
   8290e:	fa5f fc8c 	uxtb.w	ip, ip
   82912:	f1bc 0f00 	cmp.w	ip, #0
   82916:	d105      	bne.n	82924 <locateStr+0x100>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   82918:	282c      	cmp	r0, #44	; 0x2c
   8291a:	d0d0      	beq.n	828be <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   8291c:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   8291e:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   82920:	465a      	mov	r2, fp
   82922:	e00e      	b.n	82942 <locateStr+0x11e>
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   82924:	462f      	mov	r7, r5
   82926:	46a8      	mov	r8, r5
   82928:	e00b      	b.n	82942 <locateStr+0x11e>
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   8292a:	2c02      	cmp	r4, #2
   8292c:	d109      	bne.n	82942 <locateStr+0x11e>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   8292e:	282c      	cmp	r0, #44	; 0x2c
   82930:	d0c8      	beq.n	828c4 <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   82932:	4470      	add	r0, lr
   82934:	7840      	ldrb	r0, [r0, #1]
   82936:	f000 0008 	and.w	r0, r0, #8
   8293a:	b2c0      	uxtb	r0, r0
                nfa->stopIdx = nfa->i + 1;
   8293c:	2800      	cmp	r0, #0
   8293e:	bf08      	it	eq
   82940:	462f      	moveq	r7, r5
   82942:	f104 0401 	add.w	r4, r4, #1
   82946:	f105 0501 	add.w	r5, r5, #1
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   8294a:	429c      	cmp	r4, r3
   8294c:	d0bc      	beq.n	828c8 <locateStr+0xa4>
   8294e:	2900      	cmp	r1, #0
   82950:	d088      	beq.n	82864 <locateStr+0x40>
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   82952:	5d31      	ldrb	r1, [r6, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   82954:	b97a      	cbnz	r2, 82976 <locateStr+0x152>
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   82956:	eb0e 0001 	add.w	r0, lr, r1
   8295a:	7840      	ldrb	r0, [r0, #1]
   8295c:	f000 0008 	and.w	r0, r0, #8
   82960:	b2c0      	uxtb	r0, r0
   82962:	b928      	cbnz	r0, 82970 <locateStr+0x14c>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   82964:	292c      	cmp	r1, #44	; 0x2c
   82966:	d0aa      	beq.n	828be <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   82968:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   8296a:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   8296c:	465a      	mov	r2, fp
   8296e:	e00f      	b.n	82990 <locateStr+0x16c>
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   82970:	462f      	mov	r7, r5
   82972:	46a8      	mov	r8, r5
   82974:	e00c      	b.n	82990 <locateStr+0x16c>
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   82976:	2a02      	cmp	r2, #2
   82978:	d10a      	bne.n	82990 <locateStr+0x16c>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   8297a:	292c      	cmp	r1, #44	; 0x2c
   8297c:	d0a2      	beq.n	828c4 <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   8297e:	eb0e 0001 	add.w	r0, lr, r1
   82982:	7841      	ldrb	r1, [r0, #1]
   82984:	f001 0008 	and.w	r0, r1, #8
   82988:	b2c1      	uxtb	r1, r0
                nfa->stopIdx = nfa->i + 1;
   8298a:	2900      	cmp	r1, #0
   8298c:	bf08      	it	eq
   8298e:	462f      	moveq	r7, r5
   82990:	f104 0401 	add.w	r4, r4, #1
   82994:	f105 0501 	add.w	r5, r5, #1
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   82998:	429c      	cmp	r4, r3
   8299a:	f47f af63 	bne.w	82864 <locateStr+0x40>
   8299e:	e793      	b.n	828c8 <locateStr+0xa4>
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   829a0:	eb0e 0a01 	add.w	sl, lr, r1
   829a4:	f89a a001 	ldrb.w	sl, [sl, #1]
   829a8:	f00a 0a08 	and.w	sl, sl, #8
   829ac:	fa5f fa8a 	uxtb.w	sl, sl
   829b0:	f1ba 0f00 	cmp.w	sl, #0
   829b4:	d105      	bne.n	829c2 <locateStr+0x19e>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   829b6:	292c      	cmp	r1, #44	; 0x2c
   829b8:	d081      	beq.n	828be <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   829ba:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   829bc:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   829be:	465a      	mov	r2, fp
   829c0:	e00f      	b.n	829e2 <locateStr+0x1be>
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   829c2:	462f      	mov	r7, r5
   829c4:	46a8      	mov	r8, r5
   829c6:	e00c      	b.n	829e2 <locateStr+0x1be>
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   829c8:	2a02      	cmp	r2, #2
   829ca:	d10a      	bne.n	829e2 <locateStr+0x1be>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   829cc:	292c      	cmp	r1, #44	; 0x2c
   829ce:	f43f af79 	beq.w	828c4 <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   829d2:	4471      	add	r1, lr
   829d4:	7849      	ldrb	r1, [r1, #1]
   829d6:	f001 0108 	and.w	r1, r1, #8
   829da:	b2c9      	uxtb	r1, r1
                nfa->stopIdx = nfa->i + 1;
   829dc:	2900      	cmp	r1, #0
   829de:	bf08      	it	eq
   829e0:	462f      	moveq	r7, r5
   829e2:	f104 0401 	add.w	r4, r4, #1
   829e6:	f105 0501 	add.w	r5, r5, #1
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   829ea:	429c      	cmp	r4, r3
   829ec:	f47f af3a 	bne.w	82864 <locateStr+0x40>
   829f0:	e76a      	b.n	828c8 <locateStr+0xa4>
   829f2:	bf00      	nop

000829f4 <skipWhitespace>:
 * Count white spaces from the beggining
 * @param cmd - command
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
   829f4:	b470      	push	{r4, r5, r6}
    size_t i;
    for (i = 0; i < len; i++) {
   829f6:	460e      	mov	r6, r1
   829f8:	b311      	cbz	r1, 82a40 <skipWhitespace+0x4c>
        if (!isspace((unsigned char)cmd[i])) {
   829fa:	f240 2398 	movw	r3, #664	; 0x298
   829fe:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82a02:	681c      	ldr	r4, [r3, #0]
   82a04:	7801      	ldrb	r1, [r0, #0]
   82a06:	1862      	adds	r2, r4, r1
   82a08:	7853      	ldrb	r3, [r2, #1]
   82a0a:	f003 0108 	and.w	r1, r3, #8
   82a0e:	b2ca      	uxtb	r2, r1
   82a10:	b1c2      	cbz	r2, 82a44 <skipWhitespace+0x50>
   82a12:	4603      	mov	r3, r0
   82a14:	f04f 0000 	mov.w	r0, #0
   82a18:	f016 0f01 	tst.w	r6, #1
   82a1c:	d109      	bne.n	82a32 <skipWhitespace+0x3e>
   82a1e:	e015      	b.n	82a4c <skipWhitespace+0x58>
   82a20:	f813 5f01 	ldrb.w	r5, [r3, #1]!
   82a24:	1961      	adds	r1, r4, r5
   82a26:	784d      	ldrb	r5, [r1, #1]
   82a28:	f005 0108 	and.w	r1, r5, #8
   82a2c:	b2cd      	uxtb	r5, r1
   82a2e:	b9cd      	cbnz	r5, 82a64 <skipWhitespace+0x70>
   82a30:	e00a      	b.n	82a48 <skipWhitespace+0x54>
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   82a32:	f100 0201 	add.w	r2, r0, #1
   82a36:	4610      	mov	r0, r2
   82a38:	42b2      	cmp	r2, r6
   82a3a:	d1f1      	bne.n	82a20 <skipWhitespace+0x2c>
        if (!isspace((unsigned char)cmd[i])) {
            return i;
        }
    }
    return len;
   82a3c:	4630      	mov	r0, r6
   82a3e:	e003      	b.n	82a48 <skipWhitespace+0x54>
   82a40:	4608      	mov	r0, r1
   82a42:	e001      	b.n	82a48 <skipWhitespace+0x54>
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   82a44:	f04f 0000 	mov.w	r0, #0
        if (!isspace((unsigned char)cmd[i])) {
            return i;
        }
    }
    return len;
}
   82a48:	bc70      	pop	{r4, r5, r6}
   82a4a:	4770      	bx	lr
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   82a4c:	f100 0001 	add.w	r0, r0, #1
        if (!isspace((unsigned char)cmd[i])) {
   82a50:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   82a54:	1862      	adds	r2, r4, r1
   82a56:	7851      	ldrb	r1, [r2, #1]
   82a58:	f001 0208 	and.w	r2, r1, #8
   82a5c:	b2d1      	uxtb	r1, r2
   82a5e:	2900      	cmp	r1, #0
   82a60:	d1e7      	bne.n	82a32 <skipWhitespace+0x3e>
   82a62:	e7f1      	b.n	82a48 <skipWhitespace+0x54>
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   82a64:	f102 0001 	add.w	r0, r2, #1
        if (!isspace((unsigned char)cmd[i])) {
   82a68:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   82a6c:	18a1      	adds	r1, r4, r2
   82a6e:	784a      	ldrb	r2, [r1, #1]
   82a70:	f002 0108 	and.w	r1, r2, #8
   82a74:	b2ca      	uxtb	r2, r1
   82a76:	2a00      	cmp	r2, #0
   82a78:	d1db      	bne.n	82a32 <skipWhitespace+0x3e>
   82a7a:	e7e5      	b.n	82a48 <skipWhitespace+0x54>

00082a7c <matchPattern>:
 * @param pattern_len
 * @param str
 * @param str_len
 * @return 
 */
bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
   82a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82a80:	4680      	mov	r8, r0
   82a82:	4691      	mov	r9, r2
   82a84:	469a      	mov	sl, r3
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   82a86:	468e      	mov	lr, r1
   82a88:	b321      	cbz	r1, 82ad4 <matchPattern+0x58>
   82a8a:	7803      	ldrb	r3, [r0, #0]
   82a8c:	b32b      	cbz	r3, 82ada <matchPattern+0x5e>
        if (islower((unsigned char)pattern[i])) {
   82a8e:	f240 2298 	movw	r2, #664	; 0x298
   82a92:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82a96:	6810      	ldr	r0, [r2, #0]
   82a98:	18c1      	adds	r1, r0, r3
   82a9a:	784c      	ldrb	r4, [r1, #1]
   82a9c:	f004 0503 	and.w	r5, r4, #3
   82aa0:	2d02      	cmp	r5, #2
   82aa2:	d01d      	beq.n	82ae0 <matchPattern+0x64>
   82aa4:	4642      	mov	r2, r8
   82aa6:	f04f 0400 	mov.w	r4, #0
   82aaa:	f01e 0f01 	tst.w	lr, #1
   82aae:	d107      	bne.n	82ac0 <matchPattern+0x44>
   82ab0:	e02f      	b.n	82b12 <matchPattern+0x96>
   82ab2:	19c7      	adds	r7, r0, r7
   82ab4:	7879      	ldrb	r1, [r7, #1]
   82ab6:	f001 0503 	and.w	r5, r1, #3
   82aba:	2d02      	cmp	r5, #2
   82abc:	d136      	bne.n	82b2c <matchPattern+0xb0>
   82abe:	e011      	b.n	82ae4 <matchPattern+0x68>
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   82ac0:	f104 0601 	add.w	r6, r4, #1
   82ac4:	4634      	mov	r4, r6
   82ac6:	4576      	cmp	r6, lr
   82ac8:	d00c      	beq.n	82ae4 <matchPattern+0x68>
   82aca:	f812 7f01 	ldrb.w	r7, [r2, #1]!
   82ace:	2f00      	cmp	r7, #0
   82ad0:	d1ef      	bne.n	82ab2 <matchPattern+0x36>
   82ad2:	e007      	b.n	82ae4 <matchPattern+0x68>
   82ad4:	f04f 0400 	mov.w	r4, #0
   82ad8:	e004      	b.n	82ae4 <matchPattern+0x68>
   82ada:	f04f 0400 	mov.w	r4, #0
   82ade:	e001      	b.n	82ae4 <matchPattern+0x68>
   82ae0:	f04f 0400 	mov.w	r4, #0
 * @param str_len
 * @return 
 */
bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
    int pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
    return compareStr(pattern, pattern_len, str, str_len) ||
   82ae4:	4640      	mov	r0, r8
   82ae6:	4671      	mov	r1, lr
   82ae8:	464a      	mov	r2, r9
   82aea:	4653      	mov	r3, sl
   82aec:	f242 75fd 	movw	r5, #10237	; 0x27fd
   82af0:	f2c0 0508 	movt	r5, #8
   82af4:	47a8      	blx	r5
   82af6:	b930      	cbnz	r0, 82b06 <matchPattern+0x8a>
            compareStr(pattern, pattern_sep_pos_short, str, str_len);
   82af8:	4640      	mov	r0, r8
   82afa:	4621      	mov	r1, r4
   82afc:	464a      	mov	r2, r9
   82afe:	4653      	mov	r3, sl
   82b00:	462c      	mov	r4, r5
   82b02:	47a8      	blx	r5
   82b04:	e001      	b.n	82b0a <matchPattern+0x8e>
 * @param str_len
 * @return 
 */
bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
    int pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
    return compareStr(pattern, pattern_len, str, str_len) ||
   82b06:	f04f 0001 	mov.w	r0, #1
            compareStr(pattern, pattern_sep_pos_short, str, str_len);
}
   82b0a:	f000 0001 	and.w	r0, r0, #1
   82b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   82b12:	f104 0401 	add.w	r4, r4, #1
   82b16:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   82b1a:	2b00      	cmp	r3, #0
   82b1c:	d0e2      	beq.n	82ae4 <matchPattern+0x68>
        if (islower((unsigned char)pattern[i])) {
   82b1e:	18c1      	adds	r1, r0, r3
   82b20:	784d      	ldrb	r5, [r1, #1]
   82b22:	f005 0303 	and.w	r3, r5, #3
   82b26:	2b02      	cmp	r3, #2
   82b28:	d1ca      	bne.n	82ac0 <matchPattern+0x44>
   82b2a:	e7db      	b.n	82ae4 <matchPattern+0x68>
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   82b2c:	f106 0401 	add.w	r4, r6, #1
   82b30:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   82b34:	2b00      	cmp	r3, #0
   82b36:	d0d5      	beq.n	82ae4 <matchPattern+0x68>
        if (islower((unsigned char)pattern[i])) {
   82b38:	18c1      	adds	r1, r0, r3
   82b3a:	784d      	ldrb	r5, [r1, #1]
   82b3c:	f005 0303 	and.w	r3, r5, #3
   82b40:	2b02      	cmp	r3, #2
   82b42:	d1bd      	bne.n	82ac0 <matchPattern+0x44>
   82b44:	e7ce      	b.n	82ae4 <matchPattern+0x68>
   82b46:	bf00      	nop

00082b48 <matchCommand>:
 * @param pattern
 * @param cmd - command
 * @param len - max search length
 * @return TRUE if pattern matches, FALSE otherwise
 */
bool_t matchCommand(const char * pattern, const char * cmd, size_t len) {
   82b48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82b4c:	4605      	mov	r5, r0
   82b4e:	460c      	mov	r4, r1
   82b50:	4616      	mov	r6, r2
    int result = FALSE;
    
    const char * pattern_ptr = pattern;
    int pattern_len = strlen(pattern);
   82b52:	f249 03b9 	movw	r3, #37049	; 0x90b9
   82b56:	f2c0 0308 	movt	r3, #8
   82b5a:	4798      	blx	r3
    const char * pattern_end = pattern + pattern_len;
   82b5c:	eb05 0900 	add.w	r9, r5, r0
    
    const char * cmd_ptr = cmd;
    size_t cmd_len = SCPI_strnlen(cmd, len);
   82b60:	4620      	mov	r0, r4
   82b62:	4631      	mov	r1, r6
   82b64:	f249 1261 	movw	r2, #37217	; 0x9161
   82b68:	f2c0 0208 	movt	r2, #8
   82b6c:	4790      	blx	r2
    const char * cmd_end = cmd + cmd_len;
   82b6e:	eb04 0a00 	add.w	sl, r4, r0
    
    /* TODO: now it is possible to send command ":*IDN?" which is incorrect */
    if (iscolon(cmd_ptr[0])) {
   82b72:	7820      	ldrb	r0, [r4, #0]
   82b74:	283a      	cmp	r0, #58	; 0x3a
        cmd_len --;
        cmd_ptr ++;
   82b76:	bf08      	it	eq
   82b78:	3401      	addeq	r4, #1
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorPos(const char * pattern, size_t len) {
    
    char * separator = strnpbrk(pattern, len, "?:[]");
   82b7a:	f64d 2b3c 	movw	fp, #55868	; 0xda3c
   82b7e:	f2c0 0b08 	movt	fp, #8
   82b82:	f242 6841 	movw	r8, #9793	; 0x2641
   82b86:	f2c0 0808 	movt	r8, #8
        cmd_len --;
        cmd_ptr ++;
    }
    
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
   82b8a:	ebc5 0709 	rsb	r7, r5, r9
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorPos(const char * pattern, size_t len) {
    
    char * separator = strnpbrk(pattern, len, "?:[]");
   82b8e:	4628      	mov	r0, r5
   82b90:	4639      	mov	r1, r7
   82b92:	465a      	mov	r2, fp
   82b94:	47c0      	blx	r8
    if (separator == NULL) {
   82b96:	b100      	cbz	r0, 82b9a <matchCommand+0x52>
        return len;
    } else {
        return separator - pattern;
   82b98:	1b47      	subs	r7, r0, r5
        cmd_ptr ++;
    }
    
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
        int cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_end - cmd_ptr);
   82b9a:	ebc4 060a 	rsb	r6, r4, sl
 * @param cmd - input command
 * @param len - max search length
 * @return position of separator or len
 */
size_t cmdSeparatorPos(const char * cmd, size_t len) {
    char * separator = strnpbrk(cmd, len, ":?");
   82b9e:	4620      	mov	r0, r4
   82ba0:	4631      	mov	r1, r6
   82ba2:	4a1b      	ldr	r2, [pc, #108]	; (82c10 <matchCommand+0xc8>)
   82ba4:	47c0      	blx	r8
    size_t result;
    if (separator == NULL) {
   82ba6:	b100      	cbz	r0, 82baa <matchCommand+0x62>
        result = len;
    } else {
        result = separator - cmd;
   82ba8:	1b06      	subs	r6, r0, r4
    
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
        int cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_end - cmd_ptr);
        
        if (matchPattern(pattern_ptr, pattern_sep_pos, cmd_ptr, cmd_sep_pos)) {
   82baa:	4628      	mov	r0, r5
   82bac:	4639      	mov	r1, r7
   82bae:	4622      	mov	r2, r4
   82bb0:	4633      	mov	r3, r6
   82bb2:	f642 2c7d 	movw	ip, #10877	; 0x2a7d
   82bb6:	f2c0 0c08 	movt	ip, #8
   82bba:	47e0      	blx	ip
   82bbc:	b1c0      	cbz	r0, 82bf0 <matchCommand+0xa8>
            pattern_ptr = pattern_ptr + pattern_sep_pos;
   82bbe:	19ed      	adds	r5, r5, r7
            cmd_ptr = cmd_ptr + cmd_sep_pos;
   82bc0:	19a4      	adds	r4, r4, r6
            result = TRUE;
            
            /* command is complete */
            if ((pattern_ptr == pattern_end) && (cmd_ptr >= cmd_end)) {
   82bc2:	454d      	cmp	r5, r9
   82bc4:	d105      	bne.n	82bd2 <matchCommand+0x8a>
   82bc6:	45a2      	cmp	sl, r4
   82bc8:	bf8c      	ite	hi
   82bca:	2000      	movhi	r0, #0
   82bcc:	2001      	movls	r0, #1
   82bce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                result = FALSE;
                break;
            }
            
            /* command complete, but pattern not */
            if (cmd_ptr >= cmd_end) {
   82bd2:	45a2      	cmp	sl, r4
   82bd4:	d910      	bls.n	82bf8 <matchCommand+0xb0>
                result = FALSE;
                break;
            }
            
            /* both command and patter contains command separator at this position */
            if ((pattern_ptr[0] == cmd_ptr[0]) && ((pattern_ptr[0] == ':') || (pattern_ptr[0] == '?'))) {
   82bd6:	7828      	ldrb	r0, [r5, #0]
   82bd8:	7822      	ldrb	r2, [r4, #0]
   82bda:	4282      	cmp	r2, r0
   82bdc:	d110      	bne.n	82c00 <matchCommand+0xb8>
   82bde:	283a      	cmp	r0, #58	; 0x3a
   82be0:	d001      	beq.n	82be6 <matchCommand+0x9e>
   82be2:	283f      	cmp	r0, #63	; 0x3f
   82be4:	d110      	bne.n	82c08 <matchCommand+0xc0>
                pattern_ptr = pattern_ptr + 1;
   82be6:	f105 0501 	add.w	r5, r5, #1
                cmd_ptr = cmd_ptr + 1;
   82bea:	f104 0401 	add.w	r4, r4, #1
   82bee:	e7cc      	b.n	82b8a <matchCommand+0x42>
            } else {
                result = FALSE;
                break;
            }
        } else {
            result = FALSE;
   82bf0:	f04f 0000 	mov.w	r0, #0
   82bf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                break;
            }
            
            /* command complete, but pattern not */
            if (cmd_ptr >= cmd_end) {
                result = FALSE;
   82bf8:	f04f 0000 	mov.w	r0, #0
   82bfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            /* both command and patter contains command separator at this position */
            if ((pattern_ptr[0] == cmd_ptr[0]) && ((pattern_ptr[0] == ':') || (pattern_ptr[0] == '?'))) {
                pattern_ptr = pattern_ptr + 1;
                cmd_ptr = cmd_ptr + 1;
            } else {
                result = FALSE;
   82c00:	f04f 0000 	mov.w	r0, #0
   82c04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c08:	f04f 0000 	mov.w	r0, #0
            break;
        }
    }
    
    return result;
}
   82c0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c10:	0008da44 	.word	0x0008da44

00082c14 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   82c14:	b510      	push	{r4, lr}
   82c16:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
   82c18:	f240 4395 	movw	r3, #1173	; 0x495
   82c1c:	f2c0 0308 	movt	r3, #8
   82c20:	4798      	blx	r3
   82c22:	2801      	cmp	r0, #1
   82c24:	d003      	beq.n	82c2e <sd_mmc_test_unit_ready+0x1a>
   82c26:	b128      	cbz	r0, 82c34 <sd_mmc_test_unit_ready+0x20>
   82c28:	2802      	cmp	r0, #2
   82c2a:	d120      	bne.n	82c6e <sd_mmc_test_unit_ready+0x5a>
   82c2c:	e015      	b.n	82c5a <sd_mmc_test_unit_ready+0x46>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   82c2e:	f04f 0003 	mov.w	r0, #3
   82c32:	bd10      	pop	{r4, pc}
Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   82c34:	f640 41e4 	movw	r1, #3300	; 0xce4
   82c38:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82c3c:	5d0b      	ldrb	r3, [r1, r4]
   82c3e:	b9cb      	cbnz	r3, 82c74 <sd_mmc_test_unit_ready+0x60>
			return CTRL_NO_PRESENT;
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   82c40:	4620      	mov	r0, r4
   82c42:	f241 022d 	movw	r2, #4141	; 0x102d
   82c46:	f2c0 0208 	movt	r2, #8
   82c4a:	4790      	blx	r2
   82c4c:	f000 0003 	and.w	r0, r0, #3
			return CTRL_GOOD;
   82c50:	2800      	cmp	r0, #0
   82c52:	bf0c      	ite	eq
   82c54:	2002      	moveq	r0, #2
   82c56:	2000      	movne	r0, #0
   82c58:	bd10      	pop	{r4, pc}

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   82c5a:	f640 40e4 	movw	r0, #3300	; 0xce4
   82c5e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82c62:	f04f 0200 	mov.w	r2, #0
   82c66:	5502      	strb	r2, [r0, r4]
		return CTRL_NO_PRESENT;
   82c68:	f04f 0002 	mov.w	r0, #2
   82c6c:	bd10      	pop	{r4, pc}

	default:
		return CTRL_FAIL;
   82c6e:	f04f 0001 	mov.w	r0, #1
   82c72:	bd10      	pop	{r4, pc}
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
			return CTRL_NO_PRESENT;
   82c74:	f04f 0002 	mov.w	r0, #2
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
	}
}
   82c78:	bd10      	pop	{r4, pc}
   82c7a:	bf00      	nop

00082c7c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   82c7c:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
   82c7e:	f04f 0000 	mov.w	r0, #0
   82c82:	f642 4315 	movw	r3, #11285	; 0x2c15
   82c86:	f2c0 0308 	movt	r3, #8
   82c8a:	4798      	blx	r3
}
   82c8c:	bd08      	pop	{r3, pc}
   82c8e:	bf00      	nop

00082c90 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   82c90:	b538      	push	{r3, r4, r5, lr}
   82c92:	4604      	mov	r4, r0
   82c94:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   82c96:	f241 0359 	movw	r3, #4185	; 0x1059
   82c9a:	f2c0 0308 	movt	r3, #8
   82c9e:	4798      	blx	r3
   82ca0:	ea4f 0040 	mov.w	r0, r0, lsl #1
   82ca4:	f100 31ff 	add.w	r1, r0, #4294967295
   82ca8:	6029      	str	r1, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
   82caa:	4620      	mov	r0, r4
   82cac:	f642 4215 	movw	r2, #11285	; 0x2c15
   82cb0:	f2c0 0208 	movt	r2, #8
   82cb4:	4790      	blx	r2
}
   82cb6:	bd38      	pop	{r3, r4, r5, pc}

00082cb8 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   82cb8:	b508      	push	{r3, lr}
   82cba:	4601      	mov	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
   82cbc:	f04f 0000 	mov.w	r0, #0
   82cc0:	f642 4391 	movw	r3, #11409	; 0x2c91
   82cc4:	f2c0 0308 	movt	r3, #8
   82cc8:	4798      	blx	r3
}
   82cca:	bd08      	pop	{r3, pc}

00082ccc <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   82ccc:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
   82cce:	f241 0385 	movw	r3, #4229	; 0x1085
   82cd2:	f2c0 0308 	movt	r3, #8
   82cd6:	4798      	blx	r3
}
   82cd8:	bd08      	pop	{r3, pc}
   82cda:	bf00      	nop

00082cdc <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   82cdc:	b508      	push	{r3, lr}
	return sd_mmc_wr_protect(0);
   82cde:	f04f 0000 	mov.w	r0, #0
   82ce2:	f642 43cd 	movw	r3, #11469	; 0x2ccd
   82ce6:	f2c0 0308 	movt	r3, #8
   82cea:	4798      	blx	r3
}
   82cec:	bd08      	pop	{r3, pc}
   82cee:	bf00      	nop

00082cf0 <sd_mmc_removal>:

bool sd_mmc_removal(uint8_t slot)
{
	UNUSED(slot);
	return true;
}
   82cf0:	f04f 0001 	mov.w	r0, #1
   82cf4:	4770      	bx	lr
   82cf6:	bf00      	nop

00082cf8 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   82cf8:	b508      	push	{r3, lr}
	return sd_mmc_removal(0);
   82cfa:	f04f 0000 	mov.w	r0, #0
   82cfe:	f642 43f1 	movw	r3, #11505	; 0x2cf1
   82d02:	f2c0 0308 	movt	r3, #8
   82d06:	4798      	blx	r3
}
   82d08:	bd08      	pop	{r3, pc}
   82d0a:	bf00      	nop

00082d0c <sd_mmc_usb_read_10>:

COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
   82d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82d10:	4614      	mov	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
   82d12:	f241 038d 	movw	r3, #4237	; 0x108d
   82d16:	f2c0 0308 	movt	r3, #8
   82d1a:	4798      	blx	r3
   82d1c:	4601      	mov	r1, r0
   82d1e:	b370      	cbz	r0, 82d7e <sd_mmc_usb_read_10+0x72>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   82d20:	2802      	cmp	r0, #2
   82d22:	bf0c      	ite	eq
   82d24:	2002      	moveq	r0, #2
   82d26:	2001      	movne	r0, #1
   82d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (nb_step) { // Skip last step
   82d2c:	b144      	cbz	r4, 82d40 <sd_mmc_usb_read_10+0x34>
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   82d2e:	f014 0f01 	tst.w	r4, #1
   82d32:	bf0c      	ite	eq
   82d34:	4638      	moveq	r0, r7
   82d36:	4640      	movne	r0, r8
   82d38:	f04f 0101 	mov.w	r1, #1
   82d3c:	47b0      	blx	r6
   82d3e:	bba0      	cbnz	r0, 82daa <sd_mmc_usb_read_10+0x9e>
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
			}
		}
		if (!b_first_step) { // Skip first step
   82d40:	b985      	cbnz	r5, 82d64 <sd_mmc_usb_read_10+0x58>
			// RAM -> USB
			if (!udi_msc_trans_block(true,
   82d42:	f014 0f01 	tst.w	r4, #1
   82d46:	bf0c      	ite	eq
   82d48:	4641      	moveq	r1, r8
   82d4a:	4639      	movne	r1, r7
   82d4c:	f04f 0001 	mov.w	r0, #1
   82d50:	f44f 7200 	mov.w	r2, #512	; 0x200
   82d54:	f04f 0300 	mov.w	r3, #0
   82d58:	f245 25a5 	movw	r5, #21157	; 0x52a5
   82d5c:	f2c0 0508 	movt	r5, #8
   82d60:	47a8      	blx	r5
   82d62:	b330      	cbz	r0, 82db2 <sd_mmc_usb_read_10+0xa6>
				return CTRL_FAIL;
			}
		} else {
			b_first_step = false;
		}
		if (nb_step) { // Skip last step
   82d64:	b12c      	cbz	r4, 82d72 <sd_mmc_usb_read_10+0x66>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks()) {
   82d66:	f241 2015 	movw	r0, #4629	; 0x1215
   82d6a:	f2c0 0008 	movt	r0, #8
   82d6e:	4780      	blx	r0
   82d70:	bb18      	cbnz	r0, 82dba <sd_mmc_usb_read_10+0xae>
   82d72:	f104 34ff 	add.w	r4, r4, #4294967295
   82d76:	b2a4      	uxth	r4, r4
   82d78:	f04f 0500 	mov.w	r5, #0
   82d7c:	e00d      	b.n	82d9a <sd_mmc_usb_read_10+0x8e>
COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
	bool b_first_step = true;
   82d7e:	f04f 0501 	mov.w	r5, #1
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (nb_step) { // Skip last step
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   82d82:	f241 16dd 	movw	r6, #4573	; 0x11dd
   82d86:	f2c0 0608 	movt	r6, #8
   82d8a:	f241 68ec 	movw	r8, #5868	; 0x16ec
   82d8e:	f2c2 0807 	movt	r8, #8199	; 0x2007
   82d92:	f641 07ec 	movw	r7, #6380	; 0x18ec
   82d96:	f2c2 0707 	movt	r7, #8199	; 0x2007
	default:
		return CTRL_FAIL;
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
   82d9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   82d9e:	4294      	cmp	r4, r2
   82da0:	d1c4      	bne.n	82d2c <sd_mmc_usb_read_10+0x20>
				return CTRL_FAIL;
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
   82da2:	f04f 0000 	mov.w	r0, #0
   82da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (nb_step--) {
		if (nb_step) { // Skip last step
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
   82daa:	f04f 0001 	mov.w	r0, #1
   82dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!udi_msc_trans_block(true,
					((nb_step % 2) == 0) ?
					sector_buf_1 : sector_buf_0,
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
   82db2:	f04f 0001 	mov.w	r0, #1
   82db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else {
			b_first_step = false;
		}
		if (nb_step) { // Skip last step
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks()) {
				return CTRL_FAIL;
   82dba:	f04f 0001 	mov.w	r0, #1
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
}
   82dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82dc2:	bf00      	nop

00082dc4 <sd_mmc_usb_read_10_0>:

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
   82dc4:	b508      	push	{r3, lr}
   82dc6:	4603      	mov	r3, r0
   82dc8:	460a      	mov	r2, r1
	return sd_mmc_usb_read_10(0, addr, nb_sector);
   82dca:	f04f 0000 	mov.w	r0, #0
   82dce:	4619      	mov	r1, r3
   82dd0:	f642 530d 	movw	r3, #11533	; 0x2d0d
   82dd4:	f2c0 0308 	movt	r3, #8
   82dd8:	4798      	blx	r3
}
   82dda:	bd08      	pop	{r3, pc}

00082ddc <sd_mmc_usb_write_10>:
{
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
   82ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82de0:	4614      	mov	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
   82de2:	f241 2395 	movw	r3, #4757	; 0x1295
   82de6:	f2c0 0308 	movt	r3, #8
   82dea:	4798      	blx	r3
   82dec:	4601      	mov	r1, r0
   82dee:	b368      	cbz	r0, 82e4c <sd_mmc_usb_write_10+0x70>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   82df0:	2802      	cmp	r0, #2
   82df2:	bf0c      	ite	eq
   82df4:	2002      	moveq	r0, #2
   82df6:	2001      	movne	r0, #1
   82df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
   82dfc:	b945      	cbnz	r5, 82e10 <sd_mmc_usb_write_10+0x34>
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   82dfe:	f014 0f01 	tst.w	r4, #1
   82e02:	bf0c      	ite	eq
   82e04:	4638      	moveq	r0, r7
   82e06:	4640      	movne	r0, r8
   82e08:	f04f 0101 	mov.w	r1, #1
   82e0c:	47b0      	blx	r6
   82e0e:	bb98      	cbnz	r0, 82e78 <sd_mmc_usb_write_10+0x9c>
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
			}
		}
		if (nb_step) { // Skip last step
   82e10:	b17c      	cbz	r4, 82e32 <sd_mmc_usb_write_10+0x56>
			// USB -> RAM
			if (!udi_msc_trans_block(false,
   82e12:	f014 0f01 	tst.w	r4, #1
   82e16:	bf0c      	ite	eq
   82e18:	4641      	moveq	r1, r8
   82e1a:	4639      	movne	r1, r7
   82e1c:	f04f 0000 	mov.w	r0, #0
   82e20:	f44f 7200 	mov.w	r2, #512	; 0x200
   82e24:	4603      	mov	r3, r0
   82e26:	f245 2ca5 	movw	ip, #21157	; 0x52a5
   82e2a:	f2c0 0c08 	movt	ip, #8
   82e2e:	47e0      	blx	ip
   82e30:	b330      	cbz	r0, 82e80 <sd_mmc_usb_write_10+0xa4>
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
			}
		}
		if (!b_first_step) { // Skip first step
   82e32:	b92d      	cbnz	r5, 82e40 <sd_mmc_usb_write_10+0x64>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks()) {
   82e34:	f241 30a1 	movw	r0, #5025	; 0x13a1
   82e38:	f2c0 0008 	movt	r0, #8
   82e3c:	4780      	blx	r0
   82e3e:	bb18      	cbnz	r0, 82e88 <sd_mmc_usb_write_10+0xac>
   82e40:	f104 34ff 	add.w	r4, r4, #4294967295
   82e44:	b2a4      	uxth	r4, r4
   82e46:	f04f 0500 	mov.w	r5, #0
   82e4a:	e00d      	b.n	82e68 <sd_mmc_usb_write_10+0x8c>
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
	bool b_first_step = true;
   82e4c:	f04f 0501 	mov.w	r5, #1
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   82e50:	f241 3669 	movw	r6, #4969	; 0x1369
   82e54:	f2c0 0608 	movt	r6, #8
   82e58:	f241 68ec 	movw	r8, #5868	; 0x16ec
   82e5c:	f2c2 0807 	movt	r8, #8199	; 0x2007
   82e60:	f641 07ec 	movw	r7, #6380	; 0x18ec
   82e64:	f2c2 0707 	movt	r7, #8199	; 0x2007
	default:
		return CTRL_FAIL;
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
   82e68:	f64f 72ff 	movw	r2, #65535	; 0xffff
   82e6c:	4294      	cmp	r4, r2
   82e6e:	d1c5      	bne.n	82dfc <sd_mmc_usb_write_10+0x20>
			}
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
   82e70:	f04f 0000 	mov.w	r0, #0
   82e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
   82e78:	f04f 0001 	mov.w	r0, #1
   82e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!udi_msc_trans_block(false,
					((nb_step % 2) == 0) ?
					sector_buf_1 : sector_buf_0,
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
   82e80:	f04f 0001 	mov.w	r0, #1
   82e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
		}
		if (!b_first_step) { // Skip first step
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks()) {
				return CTRL_FAIL;
   82e88:	f04f 0001 	mov.w	r0, #1
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
}
   82e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082e90 <sd_mmc_usb_write_10_0>:

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
   82e90:	b508      	push	{r3, lr}
   82e92:	4603      	mov	r3, r0
   82e94:	460a      	mov	r2, r1
	return sd_mmc_usb_write_10(0, addr, nb_sector);
   82e96:	f04f 0000 	mov.w	r0, #0
   82e9a:	4619      	mov	r1, r3
   82e9c:	f642 53dd 	movw	r3, #11741	; 0x2ddd
   82ea0:	f2c0 0308 	movt	r3, #8
   82ea4:	4798      	blx	r3
}
   82ea6:	bd08      	pop	{r3, pc}

00082ea8 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
   82ea8:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
   82eaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   82eae:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
   82eb0:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
   82eb2:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
   82eb4:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
   82eb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
   82eb8:	f04f 0680 	mov.w	r6, #128	; 0x80
   82ebc:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
   82ebe:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
   82ec0:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
   82ec2:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
   82ec4:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
   82ec6:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
   82ec8:	f04f 0000 	mov.w	r0, #0
   82ecc:	6518      	str	r0, [r3, #80]	; 0x50
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
   82ece:	f04f 0105 	mov.w	r1, #5
   82ed2:	6019      	str	r1, [r3, #0]
}
   82ed4:	bc70      	pop	{r4, r5, r6}
   82ed6:	4770      	bx	lr

00082ed8 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
   82ed8:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
   82eda:	f001 033f 	and.w	r3, r1, #63	; 0x3f
   82ede:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
   82ee0:	f411 7f80 	tst.w	r1, #256	; 0x100
   82ee4:	d00c      	beq.n	82f00 <hsmci_send_cmd_execute+0x28>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
   82ee6:	f411 6f00 	tst.w	r1, #2048	; 0x800
   82eea:	d002      	beq.n	82ef2 <hsmci_send_cmd_execute+0x1a>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
   82eec:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
   82ef0:	e006      	b.n	82f00 <hsmci_send_cmd_execute+0x28>
		} else if (cmd & SDMMC_RESP_BUSY) {
   82ef2:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
   82ef6:	bf14      	ite	ne
   82ef8:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
   82efc:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
   82f00:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
   82f04:	bf18      	it	ne
   82f06:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
   82f0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   82f0e:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
   82f10:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
   82f12:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
   82f14:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
   82f18:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
   82f1a:	b152      	cbz	r2, 82f32 <hsmci_send_cmd_execute+0x5a>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
   82f1c:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
   82f20:	d012      	beq.n	82f48 <hsmci_send_cmd_execute+0x70>
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
   82f22:	f642 62a9 	movw	r2, #11945	; 0x2ea9
   82f26:	f2c0 0208 	movt	r2, #8
   82f2a:	4790      	blx	r2
				return false;
   82f2c:	f04f 0000 	mov.w	r0, #0
   82f30:	bd08      	pop	{r3, pc}
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
   82f32:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
   82f36:	d007      	beq.n	82f48 <hsmci_send_cmd_execute+0x70>
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
   82f38:	f642 61a9 	movw	r1, #11945	; 0x2ea9
   82f3c:	f2c0 0108 	movt	r1, #8
   82f40:	4788      	blx	r1
				return false;
   82f42:	f04f 0000 	mov.w	r0, #0
   82f46:	bd08      	pop	{r3, pc}
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
   82f48:	f013 0f01 	tst.w	r3, #1
   82f4c:	d0e4      	beq.n	82f18 <hsmci_send_cmd_execute+0x40>

	if (cmd & SDMMC_RESP_BUSY) {
   82f4e:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   82f52:	d119      	bne.n	82f88 <hsmci_send_cmd_execute+0xb0>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
   82f54:	f04f 0001 	mov.w	r0, #1
   82f58:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 1000000;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
   82f5a:	6c08      	ldr	r0, [r1, #64]	; 0x40
   82f5c:	f103 33ff 	add.w	r3, r3, #4294967295
		if (busy_wait-- == 0) {
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
			return false;
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
   82f60:	f000 0230 	and.w	r2, r0, #48	; 0x30
   82f64:	2a20      	cmp	r2, #32
   82f66:	d119      	bne.n	82f9c <hsmci_send_cmd_execute+0xc4>
   82f68:	e00b      	b.n	82f82 <hsmci_send_cmd_execute+0xaa>

	do {
		sr = HSMCI->HSMCI_SR;
		if (busy_wait-- == 0) {
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
   82f6a:	f642 61a9 	movw	r1, #11945	; 0x2ea9
   82f6e:	f2c0 0108 	movt	r1, #8
   82f72:	4788      	blx	r1
			return false;
   82f74:	f04f 0000 	mov.w	r0, #0
   82f78:	bd08      	pop	{r3, pc}
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
   82f7a:	f000 0230 	and.w	r2, r0, #48	; 0x30
   82f7e:	2a20      	cmp	r2, #32
   82f80:	d1eb      	bne.n	82f5a <hsmci_send_cmd_execute+0x82>
	return true;
   82f82:	f04f 0001 	mov.w	r0, #1
   82f86:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 1000000;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
   82f88:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   82f8c:	6c00      	ldr	r0, [r0, #64]	; 0x40
   82f8e:	f244 2340 	movw	r3, #16960	; 0x4240
   82f92:	f2c0 030f 	movt	r3, #15
   82f96:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   82f9a:	e7ee      	b.n	82f7a <hsmci_send_cmd_execute+0xa2>
   82f9c:	6c08      	ldr	r0, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
   82f9e:	3b01      	subs	r3, #1
   82fa0:	d1eb      	bne.n	82f7a <hsmci_send_cmd_execute+0xa2>
   82fa2:	e7e2      	b.n	82f6a <hsmci_send_cmd_execute+0x92>

00082fa4 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
   82fa4:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
   82fa6:	f04f 0015 	mov.w	r0, #21
   82faa:	f246 34d1 	movw	r4, #25553	; 0x63d1
   82fae:	f2c0 0408 	movt	r4, #8
   82fb2:	47a0      	blx	r4
#ifdef HSMCI_SR_DMADONE
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_DMAC);
   82fb4:	f04f 0027 	mov.w	r0, #39	; 0x27
   82fb8:	47a0      	blx	r4
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
   82fba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   82fbe:	f04f 0272 	mov.w	r2, #114	; 0x72
   82fc2:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
   82fc4:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
   82fc6:	f04f 0011 	mov.w	r0, #17
   82fca:	6558      	str	r0, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
   82fcc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
   82fd0:	6059      	str	r1, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
   82fd2:	f04f 0205 	mov.w	r2, #5
   82fd6:	601a      	str	r2, [r3, #0]
   82fd8:	bd10      	pop	{r4, pc}
   82fda:	bf00      	nop

00082fdc <hsmci_get_bus_width>:
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
   82fdc:	2800      	cmp	r0, #0
   82fde:	bf0c      	ite	eq
   82fe0:	2004      	moveq	r0, #4
   82fe2:	2000      	movne	r0, #0
   82fe4:	4770      	bx	lr
   82fe6:	bf00      	nop

00082fe8 <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
   82fe8:	f04f 0001 	mov.w	r0, #1
   82fec:	4770      	bx	lr
   82fee:	bf00      	nop

00082ff0 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
   82ff0:	b133      	cbz	r3, 83000 <hsmci_select_device+0x10>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
   82ff2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   82ff6:	6d58      	ldr	r0, [r3, #84]	; 0x54
   82ff8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   82ffc:	6558      	str	r0, [r3, #84]	; 0x54
   82ffe:	e005      	b.n	8300c <hsmci_select_device+0x1c>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
   83000:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   83004:	6d58      	ldr	r0, [r3, #84]	; 0x54
   83006:	f420 7080 	bic.w	r0, r0, #256	; 0x100
   8300a:	6558      	str	r0, [r3, #84]	; 0x54
{
	uint32_t clkdiv;
	uint32_t rest;

	// Speed = MCK clock / (2 * (CLKDIV + 1))
	if (speed > 0) {
   8300c:	b181      	cbz	r1, 83030 <hsmci_select_device+0x40>
		clkdiv = mck / (2 * speed);
   8300e:	ea4f 0141 	mov.w	r1, r1, lsl #1
   83012:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
   83016:	f2c0 5301 	movt	r3, #1281	; 0x501
   8301a:	fbb3 f0f1 	udiv	r0, r3, r1
		rest = mck % (2 * speed);
   8301e:	fb01 3110 	mls	r1, r1, r0, r3
		if (rest > 0) {
   83022:	b109      	cbz	r1, 83028 <hsmci_select_device+0x38>
			// Ensure that the card speed not be higher than expected.
			clkdiv++;
   83024:	f100 0001 	add.w	r0, r0, #1
		}
		if (clkdiv > 0) {
   83028:	b120      	cbz	r0, 83034 <hsmci_select_device+0x44>
			clkdiv -= 1;
   8302a:	f100 30ff 	add.w	r0, r0, #4294967295
   8302e:	e001      	b.n	83034 <hsmci_select_device+0x44>
		}
	} else {
		clkdiv = 0;
   83030:	f04f 0000 	mov.w	r0, #0
	}
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
   83034:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   83038:	6859      	ldr	r1, [r3, #4]
   8303a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   8303e:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
   83040:	6859      	ldr	r1, [r3, #4]
   83042:	b2c0      	uxtb	r0, r0
   83044:	4308      	orrs	r0, r1
   83046:	6058      	str	r0, [r3, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
   83048:	2a04      	cmp	r2, #4
   8304a:	d004      	beq.n	83056 <hsmci_select_device+0x66>
}

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
   8304c:	2a08      	cmp	r2, #8
   8304e:	bf0c      	ite	eq
   83050:	22c0      	moveq	r2, #192	; 0xc0
   83052:	2200      	movne	r2, #0
   83054:	e001      	b.n	8305a <hsmci_select_device+0x6a>
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
		break;

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
   83056:	f04f 0280 	mov.w	r2, #128	; 0x80
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
   8305a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8305e:	60da      	str	r2, [r3, #12]
   83060:	4770      	bx	lr
   83062:	bf00      	nop

00083064 <hsmci_deselect_device>:
}

void hsmci_deselect_device(uint8_t slot)
{
   83064:	4770      	bx	lr
   83066:	bf00      	nop

00083068 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
   83068:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8306c:	685a      	ldr	r2, [r3, #4]
   8306e:	f422 5060 	bic.w	r0, r2, #14336	; 0x3800
   83072:	6058      	str	r0, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
   83074:	f04f 0100 	mov.w	r1, #0
   83078:	6119      	str	r1, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
   8307a:	f44f 6210 	mov.w	r2, #2304	; 0x900
   8307e:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
   83080:	4618      	mov	r0, r3
   83082:	6c03      	ldr	r3, [r0, #64]	; 0x40
   83084:	f013 0f01 	tst.w	r3, #1
   83088:	d0fb      	beq.n	83082 <hsmci_send_clock+0x1a>
}
   8308a:	4770      	bx	lr

0008308c <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   8308c:	b510      	push	{r4, lr}
   8308e:	4604      	mov	r4, r0
   83090:	460a      	mov	r2, r1
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
   83092:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   83096:	6859      	ldr	r1, [r3, #4]
   83098:	f421 5060 	bic.w	r0, r1, #14336	; 0x3800
   8309c:	6058      	str	r0, [r3, #4]
#ifdef HSMCI_SR_DMADONE
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
   8309e:	f04f 0000 	mov.w	r0, #0
   830a2:	6518      	str	r0, [r3, #80]	; 0x50
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
	HSMCI->HSMCI_BLKR = 0;
   830a4:	6198      	str	r0, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
   830a6:	4621      	mov	r1, r4
   830a8:	f642 63d9 	movw	r3, #11993	; 0x2ed9
   830ac:	f2c0 0308 	movt	r3, #8
   830b0:	4798      	blx	r3
}
   830b2:	bd10      	pop	{r4, pc}

000830b4 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
   830b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   830b8:	6a18      	ldr	r0, [r3, #32]
}
   830ba:	4770      	bx	lr

000830bc <hsmci_get_response_128>:
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   830bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   830c0:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   830c2:	ea4f 6112 	mov.w	r1, r2, lsr #24
   830c6:	7001      	strb	r1, [r0, #0]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   830c8:	ea4f 4112 	mov.w	r1, r2, lsr #16
   830cc:	7041      	strb	r1, [r0, #1]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   830ce:	ea4f 2112 	mov.w	r1, r2, lsr #8
   830d2:	7081      	strb	r1, [r0, #2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   830d4:	70c2      	strb	r2, [r0, #3]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   830d6:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   830d8:	ea4f 6112 	mov.w	r1, r2, lsr #24
   830dc:	7101      	strb	r1, [r0, #4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   830de:	ea4f 4112 	mov.w	r1, r2, lsr #16
   830e2:	7141      	strb	r1, [r0, #5]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   830e4:	ea4f 2112 	mov.w	r1, r2, lsr #8
   830e8:	7181      	strb	r1, [r0, #6]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   830ea:	71c2      	strb	r2, [r0, #7]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   830ec:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   830ee:	ea4f 6112 	mov.w	r1, r2, lsr #24
   830f2:	7201      	strb	r1, [r0, #8]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   830f4:	ea4f 4112 	mov.w	r1, r2, lsr #16
   830f8:	7241      	strb	r1, [r0, #9]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   830fa:	ea4f 2112 	mov.w	r1, r2, lsr #8
   830fe:	7281      	strb	r1, [r0, #10]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   83100:	72c2      	strb	r2, [r0, #11]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   83102:	6a1b      	ldr	r3, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   83104:	ea4f 6213 	mov.w	r2, r3, lsr #24
   83108:	7302      	strb	r2, [r0, #12]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   8310a:	ea4f 4113 	mov.w	r1, r3, lsr #16
   8310e:	7341      	strb	r1, [r0, #13]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   83110:	ea4f 2213 	mov.w	r2, r3, lsr #8
   83114:	7382      	strb	r2, [r0, #14]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   83116:	73c3      	strb	r3, [r0, #15]
   83118:	4770      	bx	lr
   8311a:	bf00      	nop

0008311c <hsmci_adtc_start>:
		response++;
	}
}

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
   8311c:	b570      	push	{r4, r5, r6, lr}
   8311e:	4604      	mov	r4, r0
   83120:	460d      	mov	r5, r1
	uint32_t cmdr;

#ifdef HSMCI_SR_DMADONE
	if (access_block) {
   83122:	f89d 1010 	ldrb.w	r1, [sp, #16]
   83126:	b129      	cbz	r1, 83134 <hsmci_adtc_start+0x18>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
   83128:	f44f 7080 	mov.w	r0, #256	; 0x100
   8312c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   83130:	6508      	str	r0, [r1, #80]	; 0x50
   83132:	e004      	b.n	8313e <hsmci_adtc_start+0x22>
	} else {
		// Disable DMA for HSMCI
		HSMCI->HSMCI_DMA = 0;
   83134:	f04f 0000 	mov.w	r0, #0
   83138:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   8313c:	6530      	str	r0, [r6, #80]	; 0x50
#endif

	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
   8313e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   83142:	6870      	ldr	r0, [r6, #4]
   83144:	f440 51c0 	orr.w	r1, r0, #6144	; 0x1800
   83148:	6071      	str	r1, [r6, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
   8314a:	f012 0f03 	tst.w	r2, #3
   8314e:	d004      	beq.n	8315a <hsmci_adtc_start+0x3e>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
   83150:	6870      	ldr	r0, [r6, #4]
   83152:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   83156:	6071      	str	r1, [r6, #4]
   83158:	e005      	b.n	83166 <hsmci_adtc_start+0x4a>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
   8315a:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   8315e:	6870      	ldr	r0, [r6, #4]
   83160:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
   83164:	6071      	str	r1, [r6, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
   83166:	f404 4600 	and.w	r6, r4, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
   8316a:	2e00      	cmp	r6, #0
   8316c:	bf0c      	ite	eq
   8316e:	f44f 20a0 	moveq.w	r0, #327680	; 0x50000
   83172:	f44f 3080 	movne.w	r0, #65536	; 0x10000
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
   83176:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   8317a:	d009      	beq.n	83190 <hsmci_adtc_start+0x74>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
   8317c:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
   83180:	ea4f 56c2 	mov.w	r6, r2, lsl #23
   83184:	ea4f 51d6 	mov.w	r1, r6, lsr #23
   83188:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   8318c:	61b1      	str	r1, [r6, #24]
   8318e:	e018      	b.n	831c2 <hsmci_adtc_start+0xa6>
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
   83190:	ea43 4602 	orr.w	r6, r3, r2, lsl #16
   83194:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   83198:	618e      	str	r6, [r1, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
   8319a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   8319e:	d002      	beq.n	831a6 <hsmci_adtc_start+0x8a>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
   831a0:	f440 1020 	orr.w	r0, r0, #2621440	; 0x280000
   831a4:	e00d      	b.n	831c2 <hsmci_adtc_start+0xa6>
		} else if (cmd & SDMMC_CMD_STREAM) {
   831a6:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   831aa:	d002      	beq.n	831b2 <hsmci_adtc_start+0x96>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
   831ac:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   831b0:	e007      	b.n	831c2 <hsmci_adtc_start+0xa6>
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
   831b2:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   831b6:	d104      	bne.n	831c2 <hsmci_adtc_start+0xa6>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
   831b8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
   831bc:	bf18      	it	ne
   831be:	f440 2000 	orrne.w	r0, r0, #524288	; 0x80000
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
   831c2:	f640 41ec 	movw	r1, #3308	; 0xcec
   831c6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   831ca:	f04f 0600 	mov.w	r6, #0
   831ce:	600e      	str	r6, [r1, #0]
	hsmci_block_size = block_size;
   831d0:	f640 41e8 	movw	r1, #3304	; 0xce8
   831d4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   831d8:	800a      	strh	r2, [r1, #0]
	hsmci_nb_block = nb_block;
   831da:	f640 42ea 	movw	r2, #3306	; 0xcea
   831de:	f2c2 0207 	movt	r2, #8199	; 0x2007
   831e2:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
   831e4:	4621      	mov	r1, r4
   831e6:	462a      	mov	r2, r5
   831e8:	f642 63d9 	movw	r3, #11993	; 0x2ed9
   831ec:	f2c0 0308 	movt	r3, #8
   831f0:	4798      	blx	r3
}
   831f2:	bd70      	pop	{r4, r5, r6, pc}

000831f4 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
   831f4:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
   831f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   831fa:	f04f 0200 	mov.w	r2, #0
   831fe:	f2cc 0260 	movt	r2, #49248	; 0xc060

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
   83202:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   83204:	4213      	tst	r3, r2
   83206:	d007      	beq.n	83218 <hsmci_read_word+0x24>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   83208:	f642 60a9 	movw	r0, #11945	; 0x2ea9
   8320c:	f2c0 0008 	movt	r0, #8
   83210:	4780      	blx	r0
			return false;
   83212:	f04f 0000 	mov.w	r0, #0
   83216:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_RXRDY));
   83218:	f013 0f02 	tst.w	r3, #2
   8321c:	d0f1      	beq.n	83202 <hsmci_read_word+0xe>

	// Read data
	*value = HSMCI->HSMCI_RDR;
   8321e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   83222:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   83224:	6002      	str	r2, [r0, #0]
	hsmci_transfert_pos += 4;
   83226:	f640 40ec 	movw	r0, #3308	; 0xcec
   8322a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8322e:	6803      	ldr	r3, [r0, #0]
   83230:	f103 0304 	add.w	r3, r3, #4
   83234:	6003      	str	r3, [r0, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   83236:	f640 41ea 	movw	r1, #3306	; 0xcea
   8323a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8323e:	880a      	ldrh	r2, [r1, #0]
   83240:	f640 40e8 	movw	r0, #3304	; 0xce8
   83244:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83248:	8801      	ldrh	r1, [r0, #0]
   8324a:	fb01 f202 	mul.w	r2, r1, r2
   8324e:	4293      	cmp	r3, r2
   83250:	d316      	bcc.n	83280 <hsmci_read_word+0x8c>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   83252:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   83256:	f04f 0200 	mov.w	r2, #0
   8325a:	f2cc 0260 	movt	r2, #49248	; 0xc060
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   8325e:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   83260:	4213      	tst	r3, r2
   83262:	d007      	beq.n	83274 <hsmci_read_word+0x80>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   83264:	f642 61a9 	movw	r1, #11945	; 0x2ea9
   83268:	f2c0 0108 	movt	r1, #8
   8326c:	4788      	blx	r1
			return false;
   8326e:	f04f 0000 	mov.w	r0, #0
   83272:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
   83274:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   83278:	d0f1      	beq.n	8325e <hsmci_read_word+0x6a>
	return true;
   8327a:	f04f 0001 	mov.w	r0, #1
   8327e:	bd08      	pop	{r3, pc}

	// Read data
	*value = HSMCI->HSMCI_RDR;
	hsmci_transfert_pos += 4;
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
		return true;
   83280:	f04f 0001 	mov.w	r0, #1
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
   83284:	bd08      	pop	{r3, pc}
   83286:	bf00      	nop

00083288 <hsmci_start_read_blocks>:
	return true;
}

#ifdef HSMCI_SR_DMADONE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
   83288:	b570      	push	{r4, r5, r6, lr}
   8328a:	b086      	sub	sp, #24
   8328c:	4604      	mov	r4, r0
	uint32_t cfg, nb_data;
	dma_transfer_descriptor_t desc;
	bool transfert_byte;

	nb_data = nb_block * hsmci_block_size;
   8328e:	f640 43e8 	movw	r3, #3304	; 0xce8
   83292:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83296:	881e      	ldrh	r6, [r3, #0]
   83298:	fb06 f601 	mul.w	r6, r6, r1
	transfert_byte = ((HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) || (((uint32_t)dest & 0x3) > 0)) ? 1 : 0;
   8329c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   832a0:	6841      	ldr	r1, [r0, #4]
   832a2:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   832a6:	d12f      	bne.n	83308 <hsmci_start_read_blocks+0x80>
	 * - Hardware Selection for the Source
	 * - Source with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   832a8:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   832ac:	f2c4 050c 	movt	r5, #16396	; 0x400c
   832b0:	4628      	mov	r0, r5
   832b2:	f643 1231 	movw	r2, #14641	; 0x3931
   832b6:	f2c0 0208 	movt	r2, #8
   832ba:	4790      	blx	r2
	dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   832bc:	4628      	mov	r0, r5
   832be:	f04f 0100 	mov.w	r1, #0
   832c2:	f643 1345 	movw	r3, #14661	; 0x3945
   832c6:	f2c0 0308 	movt	r3, #8
   832ca:	4798      	blx	r3
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_SRC_H2SEL |
			DMAC_CFG_SRC_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   832cc:	4628      	mov	r0, r5
   832ce:	f04f 0100 	mov.w	r1, #0
   832d2:	f44f 7200 	mov.w	r2, #512	; 0x200
   832d6:	f2c0 1201 	movt	r2, #257	; 0x101
   832da:	f643 158d 	movw	r5, #14733	; 0x398d
   832de:	f2c0 0508 	movt	r5, #8
   832e2:	47a8      	blx	r5

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
   832e4:	f04f 0030 	mov.w	r0, #48	; 0x30
   832e8:	f2c4 0000 	movt	r0, #16384	; 0x4000
   832ec:	9001      	str	r0, [sp, #4]
	desc.ul_destination_addr = (uint32_t)dest;
   832ee:	9402      	str	r4, [sp, #8]
	if (transfert_byte) {
   832f0:	f014 0f03 	tst.w	r4, #3
   832f4:	d002      	beq.n	832fc <hsmci_start_read_blocks+0x74>
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
   832f6:	b2b4      	uxth	r4, r6

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
	desc.ul_destination_addr = (uint32_t)dest;
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
   832f8:	9403      	str	r4, [sp, #12]
   832fa:	e02a      	b.n	83352 <hsmci_start_read_blocks+0xca>
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   832fc:	f3c6 048f 	ubfx	r4, r6, #2, #16
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
   83300:	f044 5108 	orr.w	r1, r4, #570425344	; 0x22000000
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   83304:	9103      	str	r1, [sp, #12]
   83306:	e024      	b.n	83352 <hsmci_start_read_blocks+0xca>
	 * - Hardware Selection for the Source
	 * - Source with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   83308:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   8330c:	f2c4 050c 	movt	r5, #16396	; 0x400c
   83310:	4628      	mov	r0, r5
   83312:	f643 1231 	movw	r2, #14641	; 0x3931
   83316:	f2c0 0208 	movt	r2, #8
   8331a:	4790      	blx	r2
	dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   8331c:	4628      	mov	r0, r5
   8331e:	f04f 0100 	mov.w	r1, #0
   83322:	f643 1345 	movw	r3, #14661	; 0x3945
   83326:	f2c0 0308 	movt	r3, #8
   8332a:	4798      	blx	r3
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_SRC_H2SEL |
			DMAC_CFG_SRC_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   8332c:	4628      	mov	r0, r5
   8332e:	f04f 0100 	mov.w	r1, #0
   83332:	f44f 7200 	mov.w	r2, #512	; 0x200
   83336:	f2c0 1201 	movt	r2, #257	; 0x101
   8333a:	f643 158d 	movw	r5, #14733	; 0x398d
   8333e:	f2c0 0508 	movt	r5, #8
   83342:	47a8      	blx	r5

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
   83344:	f04f 0030 	mov.w	r0, #48	; 0x30
   83348:	f2c4 0000 	movt	r0, #16384	; 0x4000
   8334c:	9001      	str	r0, [sp, #4]
	desc.ul_destination_addr = (uint32_t)dest;
   8334e:	9402      	str	r4, [sp, #8]
   83350:	e7d1      	b.n	832f6 <hsmci_start_read_blocks+0x6e>
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
	}
	desc.ul_ctrlB = DMAC_CTRLB_SRC_DSCR_FETCH_DISABLE
   83352:	f04f 0100 	mov.w	r1, #0
   83356:	f2c4 2151 	movt	r1, #16977	; 0x4251
   8335a:	9104      	str	r1, [sp, #16]
			| DMAC_CTRLB_DST_DSCR_FETCH_DISABLE
			| DMAC_CTRLB_FC_PER2MEM_DMA_FC
			| DMAC_CTRLB_SRC_INCR_FIXED
			| DMAC_CTRLB_DST_INCR_INCREMENTING
			| DMAC_CTRLB_IEN;
	desc.ul_descriptor_addr = (uint32_t)NULL;
   8335c:	f04f 0400 	mov.w	r4, #0
   83360:	9405      	str	r4, [sp, #20]
	dmac_channel_single_buf_transfer_init(DMAC, CONF_HSMCI_DMA_CHANNEL,
   83362:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   83366:	f2c4 050c 	movt	r5, #16396	; 0x400c
   8336a:	4628      	mov	r0, r5
   8336c:	4621      	mov	r1, r4
   8336e:	aa01      	add	r2, sp, #4
   83370:	f643 1399 	movw	r3, #14745	; 0x3999
   83374:	f2c0 0308 	movt	r3, #8
   83378:	4798      	blx	r3
			&desc);

	// Start DMA transfer
	dmac_channel_enable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   8337a:	4628      	mov	r0, r5
   8337c:	4621      	mov	r1, r4
   8337e:	f643 1239 	movw	r2, #14649	; 0x3939
   83382:	f2c0 0208 	movt	r2, #8
   83386:	4790      	blx	r2
	hsmci_transfert_pos += nb_data;
   83388:	f640 40ec 	movw	r0, #3308	; 0xcec
   8338c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83390:	6801      	ldr	r1, [r0, #0]
   83392:	1876      	adds	r6, r6, r1
   83394:	6006      	str	r6, [r0, #0]
	return true;
}
   83396:	f04f 0001 	mov.w	r0, #1
   8339a:	b006      	add	sp, #24
   8339c:	bd70      	pop	{r4, r5, r6, pc}
   8339e:	bf00      	nop

000833a0 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
   833a0:	b510      	push	{r4, lr}
			hsmci_reset();
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   833a2:	f640 43ea 	movw	r3, #3306	; 0xcea
   833a6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   833aa:	8818      	ldrh	r0, [r3, #0]
   833ac:	f640 42e8 	movw	r2, #3304	; 0xce8
   833b0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   833b4:	8814      	ldrh	r4, [r2, #0]
   833b6:	fb04 f400 	mul.w	r4, r4, r0
   833ba:	f640 41ec 	movw	r1, #3308	; 0xcec
   833be:	f2c2 0107 	movt	r1, #8199	; 0x2007
   833c2:	6808      	ldr	r0, [r1, #0]
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   833c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   833c8:	f04f 0200 	mov.w	r2, #0
   833cc:	f2cc 0260 	movt	r2, #49248	; 0xc060
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   833d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   833d2:	4213      	tst	r3, r2
   833d4:	d012      	beq.n	833fc <hsmci_wait_end_of_read_blocks+0x5c>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   833d6:	f642 60a9 	movw	r0, #11945	; 0x2ea9
   833da:	f2c0 0008 	movt	r0, #8
   833de:	4780      	blx	r0
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   833e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   833e4:	f2c4 000c 	movt	r0, #16396	; 0x400c
   833e8:	f04f 0100 	mov.w	r1, #0
   833ec:	f643 1245 	movw	r2, #14661	; 0x3945
   833f0:	f2c0 0208 	movt	r2, #8
   833f4:	4790      	blx	r2
			return false;
   833f6:	f04f 0000 	mov.w	r0, #0
   833fa:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   833fc:	4284      	cmp	r4, r0
   833fe:	d902      	bls.n	83406 <hsmci_wait_end_of_read_blocks+0x66>
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
   83400:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   83404:	d105      	bne.n	83412 <hsmci_wait_end_of_read_blocks+0x72>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
   83406:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   8340a:	d0e1      	beq.n	833d0 <hsmci_wait_end_of_read_blocks+0x30>
	return true;
   8340c:	f04f 0001 	mov.w	r0, #1
   83410:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
				return true;
   83412:	f04f 0001 	mov.w	r0, #1
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
   83416:	bd10      	pop	{r4, pc}

00083418 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
   83418:	b570      	push	{r4, r5, r6, lr}
   8341a:	b086      	sub	sp, #24
   8341c:	4604      	mov	r4, r0
	bool transfert_byte;
	uint32_t cfg, nb_data;
	dma_transfer_descriptor_t desc;

	nb_data = nb_block * hsmci_block_size;
   8341e:	f640 43e8 	movw	r3, #3304	; 0xce8
   83422:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83426:	881e      	ldrh	r6, [r3, #0]
   83428:	fb06 f601 	mul.w	r6, r6, r1
	transfert_byte = ((HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) || (((uint32_t)src & 0x3) > 0)) ? 1 : 0;
   8342c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   83430:	6841      	ldr	r1, [r0, #4]
   83432:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   83436:	d127      	bne.n	83488 <hsmci_start_write_blocks+0x70>
	 * - Hardware Selection for the Destination
	 * - Destination with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   83438:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   8343c:	f2c4 050c 	movt	r5, #16396	; 0x400c
   83440:	4628      	mov	r0, r5
   83442:	f643 1231 	movw	r2, #14641	; 0x3931
   83446:	f2c0 0208 	movt	r2, #8
   8344a:	4790      	blx	r2
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_DST_H2SEL |
			DMAC_CFG_DST_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   8344c:	4628      	mov	r0, r5
   8344e:	f04f 0100 	mov.w	r1, #0
   83452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83456:	f2c0 1201 	movt	r2, #257	; 0x101
   8345a:	f643 138d 	movw	r3, #14733	; 0x398d
   8345e:	f2c0 0308 	movt	r3, #8
   83462:	4798      	blx	r3

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
   83464:	9401      	str	r4, [sp, #4]
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
   83466:	f04f 0034 	mov.w	r0, #52	; 0x34
   8346a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   8346e:	9002      	str	r0, [sp, #8]
	if (transfert_byte) {
   83470:	f014 0f03 	tst.w	r4, #3
   83474:	d002      	beq.n	8347c <hsmci_start_write_blocks+0x64>
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
   83476:	b2b4      	uxth	r4, r6

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
   83478:	9403      	str	r4, [sp, #12]
   8347a:	e022      	b.n	834c2 <hsmci_start_write_blocks+0xaa>
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   8347c:	f3c6 048f 	ubfx	r4, r6, #2, #16
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
   83480:	f044 5108 	orr.w	r1, r4, #570425344	; 0x22000000
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   83484:	9103      	str	r1, [sp, #12]
   83486:	e01c      	b.n	834c2 <hsmci_start_write_blocks+0xaa>
	 * - Hardware Selection for the Destination
	 * - Destination with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   83488:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   8348c:	f2c4 050c 	movt	r5, #16396	; 0x400c
   83490:	4628      	mov	r0, r5
   83492:	f643 1231 	movw	r2, #14641	; 0x3931
   83496:	f2c0 0208 	movt	r2, #8
   8349a:	4790      	blx	r2
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_DST_H2SEL |
			DMAC_CFG_DST_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   8349c:	4628      	mov	r0, r5
   8349e:	f04f 0100 	mov.w	r1, #0
   834a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   834a6:	f2c0 1201 	movt	r2, #257	; 0x101
   834aa:	f643 138d 	movw	r3, #14733	; 0x398d
   834ae:	f2c0 0308 	movt	r3, #8
   834b2:	4798      	blx	r3

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
   834b4:	9401      	str	r4, [sp, #4]
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
   834b6:	f04f 0034 	mov.w	r0, #52	; 0x34
   834ba:	f2c4 0000 	movt	r0, #16384	; 0x4000
   834be:	9002      	str	r0, [sp, #8]
   834c0:	e7d9      	b.n	83476 <hsmci_start_write_blocks+0x5e>
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
	}
	desc.ul_ctrlB = DMAC_CTRLB_SRC_DSCR_FETCH_DISABLE
   834c2:	f04f 0100 	mov.w	r1, #0
   834c6:	f2c6 0131 	movt	r1, #24625	; 0x6031
   834ca:	9104      	str	r1, [sp, #16]
			| DMAC_CTRLB_DST_DSCR_FETCH_DISABLE
			| DMAC_CTRLB_FC_MEM2PER_DMA_FC
			| DMAC_CTRLB_SRC_INCR_INCREMENTING
			| DMAC_CTRLB_DST_INCR_FIXED
			| DMAC_CTRLB_IEN;
	desc.ul_descriptor_addr = (uint32_t)NULL;
   834cc:	f04f 0400 	mov.w	r4, #0
   834d0:	9405      	str	r4, [sp, #20]
	dmac_channel_single_buf_transfer_init(DMAC, CONF_HSMCI_DMA_CHANNEL,
   834d2:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   834d6:	f2c4 050c 	movt	r5, #16396	; 0x400c
   834da:	4628      	mov	r0, r5
   834dc:	4621      	mov	r1, r4
   834de:	aa01      	add	r2, sp, #4
   834e0:	f643 1399 	movw	r3, #14745	; 0x3999
   834e4:	f2c0 0308 	movt	r3, #8
   834e8:	4798      	blx	r3
			&desc);

	// Start DMA transfer
	dmac_channel_enable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   834ea:	4628      	mov	r0, r5
   834ec:	4621      	mov	r1, r4
   834ee:	f643 1239 	movw	r2, #14649	; 0x3939
   834f2:	f2c0 0208 	movt	r2, #8
   834f6:	4790      	blx	r2
	hsmci_transfert_pos += nb_data;
   834f8:	f640 40ec 	movw	r0, #3308	; 0xcec
   834fc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83500:	6801      	ldr	r1, [r0, #0]
   83502:	1876      	adds	r6, r6, r1
   83504:	6006      	str	r6, [r0, #0]
	return true;
}
   83506:	f04f 0001 	mov.w	r0, #1
   8350a:	b006      	add	sp, #24
   8350c:	bd70      	pop	{r4, r5, r6, pc}
   8350e:	bf00      	nop

00083510 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
   83510:	b510      	push	{r4, lr}
			hsmci_reset();
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   83512:	f640 43ea 	movw	r3, #3306	; 0xcea
   83516:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8351a:	8818      	ldrh	r0, [r3, #0]
   8351c:	f640 42e8 	movw	r2, #3304	; 0xce8
   83520:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83524:	8814      	ldrh	r4, [r2, #0]
   83526:	fb04 f400 	mul.w	r4, r4, r0
   8352a:	f640 41ec 	movw	r1, #3308	; 0xcec
   8352e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83532:	6808      	ldr	r0, [r1, #0]
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
   83534:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   83538:	f04f 0200 	mov.w	r2, #0
   8353c:	f2cc 0260 	movt	r2, #49248	; 0xc060
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
   83540:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   83542:	4213      	tst	r3, r2
   83544:	d012      	beq.n	8356c <hsmci_wait_end_of_write_blocks+0x5c>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   83546:	f642 60a9 	movw	r0, #11945	; 0x2ea9
   8354a:	f2c0 0008 	movt	r0, #8
   8354e:	4780      	blx	r0
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   83550:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   83554:	f2c4 000c 	movt	r0, #16396	; 0x400c
   83558:	f04f 0100 	mov.w	r1, #0
   8355c:	f643 1245 	movw	r2, #14661	; 0x3945
   83560:	f2c0 0208 	movt	r2, #8
   83564:	4790      	blx	r2
			return false;
   83566:	f04f 0000 	mov.w	r0, #0
   8356a:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   8356c:	4284      	cmp	r4, r0
   8356e:	d902      	bls.n	83576 <hsmci_wait_end_of_write_blocks+0x66>
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
   83570:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   83574:	d105      	bne.n	83582 <hsmci_wait_end_of_write_blocks+0x72>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
   83576:	f013 0f20 	tst.w	r3, #32
   8357a:	d0e1      	beq.n	83540 <hsmci_wait_end_of_write_blocks+0x30>
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	return true;
   8357c:	f04f 0001 	mov.w	r0, #1
   83580:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
				return true;
   83582:	f04f 0001 	mov.w	r0, #1
	} while (!(sr & HSMCI_SR_NOTBUSY));
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	return true;

}
   83586:	bd10      	pop	{r4, pc}

00083588 <cdc_send_line>:
volatile Bool is_new_received_cdc_char = false;
volatile Bool is_terminal_open = false;


iram_size_t cdc_send_line(char* line_to_send)
{
   83588:	b510      	push	{r4, lr}
   8358a:	4604      	mov	r4, r0
	if(is_terminal_open)
   8358c:	f640 43f0 	movw	r3, #3312	; 0xcf0
   83590:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83594:	7818      	ldrb	r0, [r3, #0]
   83596:	b168      	cbz	r0, 835b4 <cdc_send_line+0x2c>
		return udi_cdc_write_buf((const void*) line_to_send, strlen(line_to_send));
   83598:	4620      	mov	r0, r4
   8359a:	f249 02b9 	movw	r2, #37049	; 0x90b9
   8359e:	f2c0 0208 	movt	r2, #8
   835a2:	4790      	blx	r2
   835a4:	4601      	mov	r1, r0
   835a6:	4620      	mov	r0, r4
   835a8:	f244 53ad 	movw	r3, #17837	; 0x45ad
   835ac:	f2c0 0308 	movt	r3, #8
   835b0:	4798      	blx	r3
   835b2:	bd10      	pop	{r4, pc}
	else
		return strlen(line_to_send);
   835b4:	4620      	mov	r0, r4
   835b6:	f249 01b9 	movw	r1, #37049	; 0x90b9
   835ba:	f2c0 0108 	movt	r1, #8
   835be:	4788      	blx	r1
}
   835c0:	bd10      	pop	{r4, pc}
   835c2:	bf00      	nop

000835c4 <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
	if (b_enable) 
   835c4:	b139      	cbz	r1, 835d6 <main_cdc_set_dtr+0x12>
		is_terminal_open = true;
   835c6:	f640 40f0 	movw	r0, #3312	; 0xcf0
   835ca:	f2c2 0007 	movt	r0, #8199	; 0x2007
   835ce:	f04f 0101 	mov.w	r1, #1
   835d2:	7001      	strb	r1, [r0, #0]
   835d4:	4770      	bx	lr
	else
		is_terminal_open = false;
   835d6:	f640 43f0 	movw	r3, #3312	; 0xcf0
   835da:	f2c2 0307 	movt	r3, #8199	; 0x2007
   835de:	f04f 0200 	mov.w	r2, #0
   835e2:	701a      	strb	r2, [r3, #0]
   835e4:	4770      	bx	lr
   835e6:	bf00      	nop

000835e8 <uart_rx_notify>:
}

void uart_rx_notify(uint8_t port)
{
	UNUSED(port);
	is_new_received_cdc_char = true;
   835e8:	f640 43f1 	movw	r3, #3313	; 0xcf1
   835ec:	f2c2 0307 	movt	r3, #8199	; 0x2007
   835f0:	f04f 0201 	mov.w	r2, #1
   835f4:	701a      	strb	r2, [r3, #0]
   835f6:	4770      	bx	lr

000835f8 <is_new_cdc_char_received>:

Bool is_new_cdc_char_received()
{
	irqflags_t flags;
	
	if(is_new_received_cdc_char == false)
   835f8:	f640 43f1 	movw	r3, #3313	; 0xcf1
   835fc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83600:	7818      	ldrb	r0, [r3, #0]
   83602:	b1e0      	cbz	r0, 8363e <is_new_cdc_char_received+0x46>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83604:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   83608:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8360a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8360e:	f04f 0300 	mov.w	r3, #0
   83612:	f240 2190 	movw	r1, #656	; 0x290
   83616:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8361a:	700b      	strb	r3, [r1, #0]
		return false;

	flags = cpu_irq_save();
	is_new_received_cdc_char = false;
   8361c:	f640 40f1 	movw	r0, #3313	; 0xcf1
   83620:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83624:	7003      	strb	r3, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   83626:	b96a      	cbnz	r2, 83644 <is_new_cdc_char_received+0x4c>
		cpu_irq_enable();
   83628:	f04f 0001 	mov.w	r0, #1
   8362c:	f240 2290 	movw	r2, #656	; 0x290
   83630:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83634:	7010      	strb	r0, [r2, #0]
   83636:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8363a:	b662      	cpsie	i
   8363c:	4770      	bx	lr
Bool is_new_cdc_char_received()
{
	irqflags_t flags;
	
	if(is_new_received_cdc_char == false)
		return false;
   8363e:	f04f 0000 	mov.w	r0, #0
   83642:	4770      	bx	lr

	flags = cpu_irq_save();
	is_new_received_cdc_char = false;
	cpu_irq_restore(flags);	
	
	return true;
   83644:	f04f 0001 	mov.w	r0, #1
}
   83648:	4770      	bx	lr
   8364a:	bf00      	nop

0008364c <main_suspend_action>:

void main_suspend_action(void){}
   8364c:	4770      	bx	lr
   8364e:	bf00      	nop

00083650 <main_resume_action>:
void main_resume_action(void){}
   83650:	4770      	bx	lr
   83652:	bf00      	nop

00083654 <main_sof_action>:
void main_sof_action(void){}
   83654:	4770      	bx	lr
   83656:	bf00      	nop

00083658 <SCPI_Write>:
size_t SCPI_Write(scpi_t * context, const char * data, size_t len) {
	(void) context;
	return SCPI_RES_OK;
    
	//return fwrite(data, 1, len, stdout);
}
   83658:	f04f 0001 	mov.w	r0, #1
   8365c:	4770      	bx	lr
   8365e:	bf00      	nop

00083660 <SCPI_Flush>:

scpi_result_t SCPI_Flush(scpi_t * context) {
	return SCPI_RES_OK;
}
   83660:	f04f 0001 	mov.w	r0, #1
   83664:	4770      	bx	lr
   83666:	bf00      	nop

00083668 <SCPI_Error>:

int SCPI_Error(scpi_t * context, int_fast16_t err) {
   83668:	b530      	push	{r4, r5, lr}
   8366a:	b083      	sub	sp, #12
   8366c:	460d      	mov	r5, r1
	(void) context;

	printf("**ERROR: %d, \"%s\"\r\n", (int32_t) err, SCPI_ErrorTranslate(err));
   8366e:	b208      	sxth	r0, r1
   83670:	f241 733d 	movw	r3, #5949	; 0x173d
   83674:	f2c0 0308 	movt	r3, #8
   83678:	4798      	blx	r3
   8367a:	f641 24ec 	movw	r4, #6892	; 0x1aec
   8367e:	f2c2 0407 	movt	r4, #8199	; 0x2007
   83682:	9000      	str	r0, [sp, #0]
   83684:	4620      	mov	r0, r4
   83686:	f04f 0164 	mov.w	r1, #100	; 0x64
   8368a:	f64d 2248 	movw	r2, #55880	; 0xda48
   8368e:	f2c0 0208 	movt	r2, #8
   83692:	462b      	mov	r3, r5
   83694:	f249 0553 	movw	r5, #36947	; 0x9053
   83698:	f2c0 0508 	movt	r5, #8
   8369c:	47a8      	blx	r5
   8369e:	4620      	mov	r0, r4
   836a0:	f243 5189 	movw	r1, #13705	; 0x3589
   836a4:	f2c0 0108 	movt	r1, #8
   836a8:	4788      	blx	r1
	return 0;
}
   836aa:	f04f 0000 	mov.w	r0, #0
   836ae:	b003      	add	sp, #12
   836b0:	bd30      	pop	{r4, r5, pc}
   836b2:	bf00      	nop

000836b4 <SCPI_Control>:

scpi_result_t SCPI_Control(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
   836b4:	b530      	push	{r4, r5, lr}
   836b6:	b083      	sub	sp, #12
   836b8:	460b      	mov	r3, r1
   836ba:	4614      	mov	r4, r2
	if (SCPI_CTRL_SRQ == ctrl) {
   836bc:	2901      	cmp	r1, #1
   836be:	d118      	bne.n	836f2 <SCPI_Control+0x3e>
		printf("**SRQ: 0x%X (%d)\r\n", val, val);
   836c0:	f641 25ec 	movw	r5, #6892	; 0x1aec
   836c4:	f2c2 0507 	movt	r5, #8199	; 0x2007
   836c8:	9200      	str	r2, [sp, #0]
   836ca:	4628      	mov	r0, r5
   836cc:	f04f 0164 	mov.w	r1, #100	; 0x64
   836d0:	f64d 225c 	movw	r2, #55900	; 0xda5c
   836d4:	f2c0 0208 	movt	r2, #8
   836d8:	4623      	mov	r3, r4
   836da:	f249 0453 	movw	r4, #36947	; 0x9053
   836de:	f2c0 0408 	movt	r4, #8
   836e2:	47a0      	blx	r4
   836e4:	4628      	mov	r0, r5
   836e6:	f243 5189 	movw	r1, #13705	; 0x3589
   836ea:	f2c0 0108 	movt	r1, #8
   836ee:	4788      	blx	r1
   836f0:	e017      	b.n	83722 <SCPI_Control+0x6e>
		} else {
		printf("**CTRL %02x: 0x%X (%d)\r\n", ctrl, val, val);
   836f2:	f641 25ec 	movw	r5, #6892	; 0x1aec
   836f6:	f2c2 0507 	movt	r5, #8199	; 0x2007
   836fa:	9200      	str	r2, [sp, #0]
   836fc:	9201      	str	r2, [sp, #4]
   836fe:	4628      	mov	r0, r5
   83700:	f04f 0164 	mov.w	r1, #100	; 0x64
   83704:	f64d 2270 	movw	r2, #55920	; 0xda70
   83708:	f2c0 0208 	movt	r2, #8
   8370c:	f249 0453 	movw	r4, #36947	; 0x9053
   83710:	f2c0 0408 	movt	r4, #8
   83714:	47a0      	blx	r4
   83716:	4628      	mov	r0, r5
   83718:	f243 5389 	movw	r3, #13705	; 0x3589
   8371c:	f2c0 0308 	movt	r3, #8
   83720:	4798      	blx	r3
	}
	return SCPI_RES_OK;
}
   83722:	f04f 0001 	mov.w	r0, #1
   83726:	b003      	add	sp, #12
   83728:	bd30      	pop	{r4, r5, pc}
   8372a:	bf00      	nop

0008372c <SCPI_Test>:

scpi_result_t SCPI_Test(scpi_t * context) {
   8372c:	b508      	push	{r3, lr}
	printf("**Test\r\n");
   8372e:	f641 22ec 	movw	r2, #6892	; 0x1aec
   83732:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83736:	f64d 238c 	movw	r3, #55948	; 0xda8c
   8373a:	f2c0 0308 	movt	r3, #8
   8373e:	cb03      	ldmia	r3!, {r0, r1}
   83740:	6010      	str	r0, [r2, #0]
   83742:	6051      	str	r1, [r2, #4]
   83744:	7818      	ldrb	r0, [r3, #0]
   83746:	7210      	strb	r0, [r2, #8]
   83748:	4610      	mov	r0, r2
   8374a:	f243 5189 	movw	r1, #13705	; 0x3589
   8374e:	f2c0 0108 	movt	r1, #8
   83752:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83754:	f04f 0001 	mov.w	r0, #1
   83758:	bd08      	pop	{r3, pc}
   8375a:	bf00      	nop

0008375c <SCPI_Reset>:

scpi_result_t SCPI_Reset(scpi_t * context) {
   8375c:	b508      	push	{r3, lr}
	printf("**Reset\r\n");
   8375e:	f641 22ec 	movw	r2, #6892	; 0x1aec
   83762:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83766:	f64d 2398 	movw	r3, #55960	; 0xda98
   8376a:	f2c0 0308 	movt	r3, #8
   8376e:	cb03      	ldmia	r3!, {r0, r1}
   83770:	6010      	str	r0, [r2, #0]
   83772:	6051      	str	r1, [r2, #4]
   83774:	8818      	ldrh	r0, [r3, #0]
   83776:	8110      	strh	r0, [r2, #8]
   83778:	4610      	mov	r0, r2
   8377a:	f243 5189 	movw	r1, #13705	; 0x3589
   8377e:	f2c0 0108 	movt	r1, #8
   83782:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83784:	f04f 0001 	mov.w	r0, #1
   83788:	bd08      	pop	{r3, pc}
   8378a:	bf00      	nop

0008378c <SCPI_SystemCommTcpipControlQ>:

scpi_result_t SCPI_SystemCommTcpipControlQ(scpi_t * context) {
	return SCPI_RES_ERR;
}
   8378c:	f04f 30ff 	mov.w	r0, #4294967295
   83790:	4770      	bx	lr
   83792:	bf00      	nop

00083794 <console_init>:
char current_input_line[LINE_BUFFER_SIZE];
uint16_t current_input_line_pointer = 0;


void console_init(void)
{
   83794:	b508      	push	{r3, lr}
	SCPI_Init(&scpi_context);
   83796:	f240 0030 	movw	r0, #48	; 0x30
   8379a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8379e:	f242 0391 	movw	r3, #8337	; 0x2091
   837a2:	f2c0 0308 	movt	r3, #8
   837a6:	4798      	blx	r3
   837a8:	bd08      	pop	{r3, pc}
   837aa:	bf00      	nop

000837ac <console_process>:
}

void console_process(void)
{
   837ac:	b538      	push	{r3, r4, r5, lr}
	iram_size_t data_remaining = 0;
	//uint32_t temp_uint32;
	char temp_char;
	
	if(is_new_cdc_char_received() == false)
   837ae:	f243 53f9 	movw	r3, #13817	; 0x35f9
   837b2:	f2c0 0308 	movt	r3, #8
   837b6:	4798      	blx	r3
   837b8:	b338      	cbz	r0, 8380a <console_process+0x5e>
		return;
	
	data_remaining = udi_cdc_read_buf(current_input_line+current_input_line_pointer, 1);
   837ba:	f640 44f2 	movw	r4, #3314	; 0xcf2
   837be:	f2c2 0407 	movt	r4, #8199	; 0x2007
   837c2:	8820      	ldrh	r0, [r4, #0]
   837c4:	f641 3550 	movw	r5, #6992	; 0x1b50
   837c8:	f2c2 0507 	movt	r5, #8199	; 0x2007
   837cc:	1940      	adds	r0, r0, r5
   837ce:	f04f 0101 	mov.w	r1, #1
   837d2:	f244 326d 	movw	r2, #17261	; 0x436d
   837d6:	f2c0 0208 	movt	r2, #8
   837da:	4790      	blx	r2
	udi_cdc_putc(current_input_line[current_input_line_pointer]);
   837dc:	8821      	ldrh	r1, [r4, #0]
   837de:	5c68      	ldrb	r0, [r5, r1]
   837e0:	f244 43d9 	movw	r3, #17625	; 0x44d9
   837e4:	f2c0 0308 	movt	r3, #8
   837e8:	4798      	blx	r3
	//usart_putchar(USART0, current_input_line[current_input_line_pointer]);
    SCPI_Input(&scpi_context, current_input_line+current_input_line_pointer, 1);	
   837ea:	8822      	ldrh	r2, [r4, #0]
   837ec:	f240 0030 	movw	r0, #48	; 0x30
   837f0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   837f4:	1951      	adds	r1, r2, r5
   837f6:	f04f 0201 	mov.w	r2, #1
   837fa:	f242 03a5 	movw	r3, #8357	; 0x20a5
   837fe:	f2c0 0308 	movt	r3, #8
   83802:	4798      	blx	r3
    //SCPI_Input(&scpi_context, smbuffer, strlen(smbuffer));	
	current_input_line_pointer++;
	
	if (current_input_line_pointer = 50)
	{
         current_input_line_pointer = 0;
   83804:	f04f 0000 	mov.w	r0, #0
   83808:	8020      	strh	r0, [r4, #0]
   8380a:	bd38      	pop	{r3, r4, r5, pc}

0008380c <main_extra_string>:
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   8380c:	f641 338c 	movw	r3, #7052	; 0x1b8c
   83810:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83814:	7898      	ldrb	r0, [r3, #2]
   83816:	2804      	cmp	r0, #4
   83818:	d002      	beq.n	83820 <main_extra_string+0x14>
   8381a:	2805      	cmp	r0, #5
   8381c:	d13b      	bne.n	83896 <main_extra_string+0x8a>
   8381e:	e004      	b.n	8382a <main_extra_string+0x1e>
	case UDI_CDC_IAD_STRING_ID:
		str_lgt = sizeof(udi_cdc_name)-1;
		str = udi_cdc_name;
   83820:	f240 02b4 	movw	r2, #180	; 0xb4
   83824:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83828:	e003      	b.n	83832 <main_extra_string+0x26>
		break;
	case UDI_MSC_STRING_ID:
		str_lgt = sizeof(udi_msc_name)-1;
		str = udi_msc_name;
   8382a:	f240 0288 	movw	r2, #136	; 0x88
   8382e:	f2c2 0207 	movt	r2, #8199	; 0x2007
		return false;
	}

	if (str_lgt!=0) {
		for( i=0; i<str_lgt; i++) {
			extra_strings_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   83832:	f240 0398 	movw	r3, #152	; 0x98
   83836:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8383a:	7811      	ldrb	r1, [r2, #0]
   8383c:	8059      	strh	r1, [r3, #2]
   8383e:	7850      	ldrb	r0, [r2, #1]
   83840:	8098      	strh	r0, [r3, #4]
   83842:	7891      	ldrb	r1, [r2, #2]
   83844:	80d9      	strh	r1, [r3, #6]
   83846:	78d0      	ldrb	r0, [r2, #3]
   83848:	8118      	strh	r0, [r3, #8]
   8384a:	7911      	ldrb	r1, [r2, #4]
   8384c:	8159      	strh	r1, [r3, #10]
   8384e:	7950      	ldrb	r0, [r2, #5]
   83850:	8198      	strh	r0, [r3, #12]
   83852:	7991      	ldrb	r1, [r2, #6]
   83854:	81d9      	strh	r1, [r3, #14]
   83856:	79d0      	ldrb	r0, [r2, #7]
   83858:	8218      	strh	r0, [r3, #16]
   8385a:	7a11      	ldrb	r1, [r2, #8]
   8385c:	8259      	strh	r1, [r3, #18]
   8385e:	7a50      	ldrb	r0, [r2, #9]
   83860:	8298      	strh	r0, [r3, #20]
   83862:	7a91      	ldrb	r1, [r2, #10]
   83864:	82d9      	strh	r1, [r3, #22]
   83866:	7ad0      	ldrb	r0, [r2, #11]
   83868:	8318      	strh	r0, [r3, #24]
   8386a:	7b12      	ldrb	r2, [r2, #12]
   8386c:	835a      	strh	r2, [r3, #26]
		}
		extra_strings_desc.header.bLength = 2+ (str_lgt)*2;
   8386e:	f04f 011c 	mov.w	r1, #28
   83872:	7019      	strb	r1, [r3, #0]
		udd_g_ctrlreq.payload_size = extra_strings_desc.header.bLength;
   83874:	f641 308c 	movw	r0, #7052	; 0x1b8c
   83878:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8387c:	8181      	strh	r1, [r0, #12]
		udd_g_ctrlreq.payload = (uint8_t *) &extra_strings_desc;
   8387e:	6083      	str	r3, [r0, #8]
	}

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength) {
   83880:	88c3      	ldrh	r3, [r0, #6]
   83882:	2b1b      	cmp	r3, #27
   83884:	d80a      	bhi.n	8389c <main_extra_string+0x90>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   83886:	f641 328c 	movw	r2, #7052	; 0x1b8c
   8388a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8388e:	8193      	strh	r3, [r2, #12]
	}
	return true;
   83890:	f04f 0001 	mov.w	r0, #1
   83894:	4770      	bx	lr
	case UDI_MSC_STRING_ID:
		str_lgt = sizeof(udi_msc_name)-1;
		str = udi_msc_name;
		break;
	default:
		return false;
   83896:	f04f 0000 	mov.w	r0, #0
   8389a:	4770      	bx	lr

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
   8389c:	f04f 0001 	mov.w	r0, #1
   838a0:	4770      	bx	lr
   838a2:	bf00      	nop

000838a4 <HardFault_Handler>:
         * Get the appropriate stack pointer, depending on our mode,
         * and use it as the parameter to the C handler. This function
         * will never return
         */

        __asm(  ".syntax unified\n"
   838a4:	2004      	movs	r0, #4
   838a6:	4671      	mov	r1, lr
   838a8:	4208      	tst	r0, r1
   838aa:	f000 8004 	beq.w	838b6 <_MSP>
   838ae:	f3ef 8009 	mrs	r0, PSP
   838b2:	f000 b805 	b.w	838c0 <HardFault_HandlerC>

000838b6 <_MSP>:
   838b6:	f3ef 8008 	mrs	r0, MSP
   838ba:	f000 b801 	b.w	838c0 <HardFault_HandlerC>
   838be:	bf00      	nop

000838c0 <HardFault_HandlerC>:
 * into local variables for ease of reading.
 * We then read the various Fault Status and Address Registers to help decode
 * cause of the fault.
 * The function ends with a BKPT instruction to force control back into the debugger
 */
void HardFault_HandlerC(unsigned long *hardfault_args){
   838c0:	b08e      	sub	sp, #56	; 0x38
        volatile unsigned long _DFSR ;
        volatile unsigned long _AFSR ;
        volatile unsigned long _BFAR ;
        volatile unsigned long _MMAR ;

        stacked_r0 = ((unsigned long)hardfault_args[0]) ;
   838c2:	6803      	ldr	r3, [r0, #0]
   838c4:	930d      	str	r3, [sp, #52]	; 0x34
        stacked_r1 = ((unsigned long)hardfault_args[1]) ;
   838c6:	6841      	ldr	r1, [r0, #4]
   838c8:	910c      	str	r1, [sp, #48]	; 0x30
        stacked_r2 = ((unsigned long)hardfault_args[2]) ;
   838ca:	6882      	ldr	r2, [r0, #8]
   838cc:	920b      	str	r2, [sp, #44]	; 0x2c
        stacked_r3 = ((unsigned long)hardfault_args[3]) ;
   838ce:	68c3      	ldr	r3, [r0, #12]
   838d0:	930a      	str	r3, [sp, #40]	; 0x28
        stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   838d2:	6901      	ldr	r1, [r0, #16]
   838d4:	9109      	str	r1, [sp, #36]	; 0x24
        stacked_lr = ((unsigned long)hardfault_args[5]) ;
   838d6:	6942      	ldr	r2, [r0, #20]
   838d8:	9208      	str	r2, [sp, #32]
        stacked_pc = ((unsigned long)hardfault_args[6]) ;
   838da:	6983      	ldr	r3, [r0, #24]
   838dc:	9307      	str	r3, [sp, #28]
        stacked_psr = ((unsigned long)hardfault_args[7]) ;
   838de:	69c0      	ldr	r0, [r0, #28]
   838e0:	9006      	str	r0, [sp, #24]

        // Configurable Fault Status Register
        // Consists of MMSR, BFSR and UFSR
        _CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;   
   838e2:	f64e 5128 	movw	r1, #60712	; 0xed28
   838e6:	f2ce 0100 	movt	r1, #57344	; 0xe000
   838ea:	680a      	ldr	r2, [r1, #0]
   838ec:	9205      	str	r2, [sp, #20]
                                                                                        
        // Hard Fault Status Register
        _HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   838ee:	f64e 532c 	movw	r3, #60716	; 0xed2c
   838f2:	f2ce 0300 	movt	r3, #57344	; 0xe000
   838f6:	6818      	ldr	r0, [r3, #0]
   838f8:	9004      	str	r0, [sp, #16]

        // Debug Fault Status Register
        _DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   838fa:	f64e 5130 	movw	r1, #60720	; 0xed30
   838fe:	f2ce 0100 	movt	r1, #57344	; 0xe000
   83902:	680a      	ldr	r2, [r1, #0]
   83904:	9203      	str	r2, [sp, #12]

        // Auxiliary Fault Status Register
        _AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   83906:	f64e 533c 	movw	r3, #60732	; 0xed3c
   8390a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8390e:	6818      	ldr	r0, [r3, #0]
   83910:	9002      	str	r0, [sp, #8]

        // Read the Fault Address Registers. These may not contain valid values.
        // Check BFARVALID/MMARVALID to see if they are valid values
        // MemManage Fault Address Register
        _MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   83912:	f64e 5134 	movw	r1, #60724	; 0xed34
   83916:	f2ce 0100 	movt	r1, #57344	; 0xe000
   8391a:	680a      	ldr	r2, [r1, #0]
   8391c:	9200      	str	r2, [sp, #0]
        // Bus Fault Address Register
        _BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   8391e:	f64e 5338 	movw	r3, #60728	; 0xed38
   83922:	f2ce 0300 	movt	r3, #57344	; 0xe000
   83926:	6818      	ldr	r0, [r3, #0]
   83928:	9001      	str	r0, [sp, #4]

        __asm("BKPT #0\n") ; // Break into the debugger
   8392a:	be00      	bkpt	0x0000
   8392c:	e7fe      	b.n	8392c <HardFault_HandlerC+0x6c>
   8392e:	bf00      	nop

00083930 <dmac_enable>:
 *
 * \param p_dmac  Pointer to a DMAC peripheral instance.
 */
void dmac_enable(Dmac *p_dmac)
{
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   83930:	f04f 0301 	mov.w	r3, #1
   83934:	6043      	str	r3, [r0, #4]
   83936:	4770      	bx	lr

00083938 <dmac_channel_enable>:
 * \param p_dmac Pointer to a DMAC peripheral instance.
 * \param ul_num Channel number.
 */
void dmac_channel_enable(Dmac *p_dmac, uint32_t ul_num)
{
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   83938:	f04f 0301 	mov.w	r3, #1
   8393c:	fa03 f101 	lsl.w	r1, r3, r1
   83940:	6281      	str	r1, [r0, #40]	; 0x28
   83942:	4770      	bx	lr

00083944 <dmac_channel_disable>:
 * \param p_dmac Pointer to a DMAC peripheral instance.
 * \param ul_num Channel number.
 */
void dmac_channel_disable(Dmac *p_dmac, uint32_t ul_num)
{
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   83944:	f04f 0301 	mov.w	r3, #1
   83948:	fa03 f101 	lsl.w	r1, r3, r1
   8394c:	62c1      	str	r1, [r0, #44]	; 0x2c
   8394e:	4770      	bx	lr

00083950 <dmac_channel_set_source_addr>:
 * \note This register must be aligned with the source transfer width.
 */
void dmac_channel_set_source_addr(Dmac *p_dmac,
		uint32_t ul_num, uint32_t ul_addr)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   83950:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83954:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   83958:	63c2      	str	r2, [r0, #60]	; 0x3c
   8395a:	4770      	bx	lr

0008395c <dmac_channel_set_destination_addr>:
 * \note This register must be aligned with the source transfer width.
 */
void dmac_channel_set_destination_addr(Dmac *p_dmac, uint32_t ul_num,
		uint32_t ul_addr)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   8395c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83960:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   83964:	6402      	str	r2, [r0, #64]	; 0x40
   83966:	4770      	bx	lr

00083968 <dmac_channel_set_descriptor_addr>:
 * \param ul_desc     Descriptor address.
 */
void dmac_channel_set_descriptor_addr(Dmac *p_dmac,
		uint32_t ul_num, uint32_t ul_desc)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   83968:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8396c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   83970:	6442      	str	r2, [r0, #68]	; 0x44
   83972:	4770      	bx	lr

00083974 <dmac_channel_set_ctrlA>:
 * \param ul_num      Channel number.
 * \param ul_ctrlA    Configuration of control A register.
 */
void dmac_channel_set_ctrlA(Dmac *p_dmac, uint32_t ul_num, uint32_t ul_ctrlA)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   83974:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83978:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   8397c:	6482      	str	r2, [r0, #72]	; 0x48
   8397e:	4770      	bx	lr

00083980 <dmac_channel_set_ctrlB>:
 * \param ul_num      Channel number.
 * \param ul_ctrlB    Configuration of control B register.
 */
void dmac_channel_set_ctrlB(Dmac *p_dmac, uint32_t ul_num, uint32_t ul_ctrlB)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   83980:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83984:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   83988:	64c2      	str	r2, [r0, #76]	; 0x4c
   8398a:	4770      	bx	lr

0008398c <dmac_channel_set_configuration>:
 * \param ul_cfg      Configuration of CFG register.
 */
void dmac_channel_set_configuration(Dmac *p_dmac, uint32_t ul_num,
		uint32_t ul_cfg)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   8398c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83990:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   83994:	6502      	str	r2, [r0, #80]	; 0x50
   83996:	4770      	bx	lr

00083998 <dmac_channel_single_buf_transfer_init>:
 * \param ul_num      Channel number.
 * \param p_desc      Pointer to a transfer descriptor.
 */
void dmac_channel_single_buf_transfer_init(Dmac *p_dmac,
		uint32_t ul_num, dma_transfer_descriptor_t *p_desc)
{
   83998:	b570      	push	{r4, r5, r6, lr}
   8399a:	4604      	mov	r4, r0
   8399c:	460e      	mov	r6, r1
   8399e:	4615      	mov	r5, r2
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   839a0:	6a43      	ldr	r3, [r0, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   839a2:	6812      	ldr	r2, [r2, #0]
   839a4:	f643 1351 	movw	r3, #14673	; 0x3951
   839a8:	f2c0 0308 	movt	r3, #8
   839ac:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   839ae:	4620      	mov	r0, r4
   839b0:	4631      	mov	r1, r6
   839b2:	686a      	ldr	r2, [r5, #4]
   839b4:	f643 135d 	movw	r3, #14685	; 0x395d
   839b8:	f2c0 0308 	movt	r3, #8
   839bc:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   839be:	4620      	mov	r0, r4
   839c0:	4631      	mov	r1, r6
   839c2:	f04f 0200 	mov.w	r2, #0
   839c6:	f643 1369 	movw	r3, #14697	; 0x3969
   839ca:	f2c0 0308 	movt	r3, #8
   839ce:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   839d0:	4620      	mov	r0, r4
   839d2:	4631      	mov	r1, r6
   839d4:	68aa      	ldr	r2, [r5, #8]
   839d6:	f643 1375 	movw	r3, #14709	; 0x3975
   839da:	f2c0 0308 	movt	r3, #8
   839de:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   839e0:	4620      	mov	r0, r4
   839e2:	4631      	mov	r1, r6
   839e4:	68ea      	ldr	r2, [r5, #12]
   839e6:	f643 1381 	movw	r3, #14721	; 0x3981
   839ea:	f2c0 0308 	movt	r3, #8
   839ee:	4798      	blx	r3
   839f0:	bd70      	pop	{r4, r5, r6, pc}
   839f2:	bf00      	nop

000839f4 <ui_init>:
#include "board.h"
#include "led.h"
#include "ui.h"

void ui_init(void)
{
   839f4:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_On(LED0_GPIO);
   839f6:	f04f 003b 	mov.w	r0, #59	; 0x3b
   839fa:	f645 7339 	movw	r3, #24377	; 0x5f39
   839fe:	f2c0 0308 	movt	r3, #8
   83a02:	4798      	blx	r3
	LED_Off(LED1_GPIO);
   83a04:	f04f 0055 	mov.w	r0, #85	; 0x55
   83a08:	f645 64e9 	movw	r4, #24297	; 0x5ee9
   83a0c:	f2c0 0408 	movt	r4, #8
   83a10:	47a0      	blx	r4
	LED_Off(LED2_GPIO);
   83a12:	f04f 0056 	mov.w	r0, #86	; 0x56
   83a16:	47a0      	blx	r4
   83a18:	bd10      	pop	{r4, pc}
   83a1a:	bf00      	nop

00083a1c <ui_powerdown>:
}

void ui_powerdown(void)
{
   83a1c:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   83a1e:	f04f 003b 	mov.w	r0, #59	; 0x3b
   83a22:	f645 64e9 	movw	r4, #24297	; 0x5ee9
   83a26:	f2c0 0408 	movt	r4, #8
   83a2a:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   83a2c:	f04f 0055 	mov.w	r0, #85	; 0x55
   83a30:	47a0      	blx	r4
	LED_Off(LED2_GPIO);
   83a32:	f04f 0056 	mov.w	r0, #86	; 0x56
   83a36:	47a0      	blx	r4
   83a38:	bd10      	pop	{r4, pc}
   83a3a:	bf00      	nop

00083a3c <ui_start_read>:
void ui_com_overflow(void)
{
}

void ui_start_read(void)
{
   83a3c:	b508      	push	{r3, lr}
	LED_On(LED1_GPIO);
   83a3e:	f04f 0055 	mov.w	r0, #85	; 0x55
   83a42:	f645 7339 	movw	r3, #24377	; 0x5f39
   83a46:	f2c0 0308 	movt	r3, #8
   83a4a:	4798      	blx	r3
   83a4c:	bd08      	pop	{r3, pc}
   83a4e:	bf00      	nop

00083a50 <ui_stop_read>:
}

void ui_stop_read(void)
{
   83a50:	b508      	push	{r3, lr}
	LED_Off(LED1_GPIO);
   83a52:	f04f 0055 	mov.w	r0, #85	; 0x55
   83a56:	f645 63e9 	movw	r3, #24297	; 0x5ee9
   83a5a:	f2c0 0308 	movt	r3, #8
   83a5e:	4798      	blx	r3
   83a60:	bd08      	pop	{r3, pc}
   83a62:	bf00      	nop

00083a64 <ui_start_write>:
}

void ui_start_write(void)
{
   83a64:	b508      	push	{r3, lr}
	LED_On(LED1_GPIO);
   83a66:	f04f 0055 	mov.w	r0, #85	; 0x55
   83a6a:	f645 7339 	movw	r3, #24377	; 0x5f39
   83a6e:	f2c0 0308 	movt	r3, #8
   83a72:	4798      	blx	r3
   83a74:	bd08      	pop	{r3, pc}
   83a76:	bf00      	nop

00083a78 <ui_stop_write>:
}

void ui_stop_write(void)
{
   83a78:	b508      	push	{r3, lr}
	LED_Off(LED1_GPIO);
   83a7a:	f04f 0055 	mov.w	r0, #85	; 0x55
   83a7e:	f645 63e9 	movw	r3, #24297	; 0x5ee9
   83a82:	f2c0 0308 	movt	r3, #8
   83a86:	4798      	blx	r3
   83a88:	bd08      	pop	{r3, pc}
   83a8a:	bf00      	nop

00083a8c <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   83a8c:	b508      	push	{r3, lr}
	}
#endif

	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_UPLL) {

		pmc_enable_upll_clock();
   83a8e:	f246 33b1 	movw	r3, #25521	; 0x63b1
   83a92:	f2c0 0308 	movt	r3, #8
   83a96:	4798      	blx	r3
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
   83a98:	f04f 0000 	mov.w	r0, #0
   83a9c:	f246 4155 	movw	r1, #25685	; 0x6455
   83aa0:	f2c0 0108 	movt	r1, #8
   83aa4:	4788      	blx	r1
		pmc_enable_udpck();
   83aa6:	f246 406d 	movw	r0, #25709	; 0x646d
   83aaa:	f2c0 0008 	movt	r0, #8
   83aae:	4780      	blx	r0
   83ab0:	bd08      	pop	{r3, pc}
   83ab2:	bf00      	nop

00083ab4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   83ab4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83ab6:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   83aba:	f2c0 5001 	movt	r0, #1281	; 0x501
   83abe:	f248 7355 	movw	r3, #34645	; 0x8755
   83ac2:	f2c0 0308 	movt	r3, #8
   83ac6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   83ac8:	f04f 0000 	mov.w	r0, #0
   83acc:	f04f 013e 	mov.w	r1, #62	; 0x3e
   83ad0:	f246 3211 	movw	r2, #25361	; 0x6311
   83ad4:	f2c0 0208 	movt	r2, #8
   83ad8:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   83ada:	f246 3481 	movw	r4, #25473	; 0x6381
   83ade:	f2c0 0408 	movt	r4, #8
   83ae2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   83ae4:	2800      	cmp	r0, #0
   83ae6:	d0fc      	beq.n	83ae2 <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   83ae8:	f246 3091 	movw	r0, #25489	; 0x6391
   83aec:	f2c0 0008 	movt	r0, #8
   83af0:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   83af2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   83af6:	f2c4 010e 	movt	r1, #16398	; 0x400e
   83afa:	f643 7301 	movw	r3, #16129	; 0x3f01
   83afe:	f2c2 030d 	movt	r3, #8205	; 0x200d
   83b02:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   83b04:	f246 34a1 	movw	r4, #25505	; 0x63a1
   83b08:	f2c0 0408 	movt	r4, #8
   83b0c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   83b0e:	2800      	cmp	r0, #0
   83b10:	d0fc      	beq.n	83b0c <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   83b12:	f04f 0010 	mov.w	r0, #16
   83b16:	f246 2271 	movw	r2, #25201	; 0x6271
   83b1a:	f2c0 0208 	movt	r2, #8
   83b1e:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   83b20:	f248 508d 	movw	r0, #34189	; 0x858d
   83b24:	f2c0 0008 	movt	r0, #8
   83b28:	4780      	blx	r0
   83b2a:	bd10      	pop	{r4, pc}

00083b2c <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
   83b2c:	f04f 0001 	mov.w	r0, #1
   83b30:	4770      	bx	lr
   83b32:	bf00      	nop

00083b34 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   83b34:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
   83b36:	b928      	cbnz	r0, 83b44 <mem_test_unit_ready+0x10>
   83b38:	f642 437d 	movw	r3, #11389	; 0x2c7d
   83b3c:	f2c0 0308 	movt	r3, #8
   83b40:	4798      	blx	r3
   83b42:	bd08      	pop	{r3, pc}
   83b44:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
   83b48:	bd08      	pop	{r3, pc}
   83b4a:	bf00      	nop

00083b4c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   83b4c:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
   83b4e:	b930      	cbnz	r0, 83b5e <mem_read_capacity+0x12>
   83b50:	4608      	mov	r0, r1
   83b52:	f642 43b9 	movw	r3, #11449	; 0x2cb9
   83b56:	f2c0 0308 	movt	r3, #8
   83b5a:	4798      	blx	r3
   83b5c:	bd08      	pop	{r3, pc}
   83b5e:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
   83b62:	bd08      	pop	{r3, pc}

00083b64 <mem_unload>:

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
   83b64:	b910      	cbnz	r0, 83b6c <mem_unload+0x8>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
   83b66:	f081 0001 	eor.w	r0, r1, #1
   83b6a:	4770      	bx	lr

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
   83b6c:	f04f 0000 	mov.w	r0, #0
#endif

  Ctrl_access_unlock();

  return unloaded;
}
   83b70:	4770      	bx	lr
   83b72:	bf00      	nop

00083b74 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
   83b74:	b508      	push	{r3, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   83b76:	b928      	cbnz	r0, 83b84 <mem_wr_protect+0x10>
   83b78:	f642 43dd 	movw	r3, #11485	; 0x2cdd
   83b7c:	f2c0 0308 	movt	r3, #8
   83b80:	4798      	blx	r3
   83b82:	bd08      	pop	{r3, pc}
   83b84:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
   83b88:	bd08      	pop	{r3, pc}
   83b8a:	bf00      	nop

00083b8c <mem_removal>:


bool mem_removal(U8 lun)
{
   83b8c:	b508      	push	{r3, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
   83b8e:	b928      	cbnz	r0, 83b9c <mem_removal+0x10>
   83b90:	f642 43f9 	movw	r3, #11513	; 0x2cf9
   83b94:	f2c0 0308 	movt	r3, #8
   83b98:	4798      	blx	r3
   83b9a:	bd08      	pop	{r3, pc}
   83b9c:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return removal;
}
   83ba0:	bd08      	pop	{r3, pc}
   83ba2:	bf00      	nop

00083ba4 <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
   83ba4:	b920      	cbnz	r0, 83bb0 <mem_name+0xc>
   83ba6:	f64d 20a4 	movw	r0, #55972	; 0xdaa4
   83baa:	f2c0 0008 	movt	r0, #8
   83bae:	4770      	bx	lr
   83bb0:	f04f 0000 	mov.w	r0, #0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
   83bb4:	4770      	bx	lr
   83bb6:	bf00      	nop

00083bb8 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
   83bb8:	b570      	push	{r4, r5, r6, lr}
   83bba:	4604      	mov	r4, r0
   83bbc:	460e      	mov	r6, r1
   83bbe:	4615      	mov	r5, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
   83bc0:	f643 233d 	movw	r3, #14909	; 0x3a3d
   83bc4:	f2c0 0308 	movt	r3, #8
   83bc8:	4798      	blx	r3
  status =
   83bca:	b944      	cbnz	r4, 83bde <memory_2_usb+0x26>
   83bcc:	4630      	mov	r0, r6
   83bce:	4629      	mov	r1, r5
   83bd0:	f642 52c5 	movw	r2, #11717	; 0x2dc5
   83bd4:	f2c0 0208 	movt	r2, #8
   83bd8:	4790      	blx	r2
   83bda:	4604      	mov	r4, r0
   83bdc:	e001      	b.n	83be2 <memory_2_usb+0x2a>
   83bde:	f04f 0401 	mov.w	r4, #1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
   83be2:	f643 2051 	movw	r0, #14929	; 0x3a51
   83be6:	f2c0 0008 	movt	r0, #8
   83bea:	4780      	blx	r0

  Ctrl_access_unlock();

  return status;
}
   83bec:	4620      	mov	r0, r4
   83bee:	bd70      	pop	{r4, r5, r6, pc}

00083bf0 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
   83bf0:	b570      	push	{r4, r5, r6, lr}
   83bf2:	4604      	mov	r4, r0
   83bf4:	460e      	mov	r6, r1
   83bf6:	4615      	mov	r5, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
   83bf8:	f643 2365 	movw	r3, #14949	; 0x3a65
   83bfc:	f2c0 0308 	movt	r3, #8
   83c00:	4798      	blx	r3
  status =
   83c02:	b944      	cbnz	r4, 83c16 <usb_2_memory+0x26>
   83c04:	4630      	mov	r0, r6
   83c06:	4629      	mov	r1, r5
   83c08:	f642 6291 	movw	r2, #11921	; 0x2e91
   83c0c:	f2c0 0208 	movt	r2, #8
   83c10:	4790      	blx	r2
   83c12:	4604      	mov	r4, r0
   83c14:	e001      	b.n	83c1a <usb_2_memory+0x2a>
   83c16:	f04f 0401 	mov.w	r4, #1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
   83c1a:	f643 2079 	movw	r0, #14969	; 0x3a79
   83c1e:	f2c0 0008 	movt	r0, #8
   83c22:	4780      	blx	r0

  Ctrl_access_unlock();

  return status;
}
   83c24:	4620      	mov	r0, r4
   83c26:	bd70      	pop	{r4, r5, r6, pc}

00083c28 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   83c28:	f241 130c 	movw	r3, #4364	; 0x110c
   83c2c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83c30:	781a      	ldrb	r2, [r3, #0]
   83c32:	f102 30ff 	add.w	r0, r2, #4294967295
   83c36:	b2c1      	uxtb	r1, r0
   83c38:	7019      	strb	r1, [r3, #0]
   83c3a:	4770      	bx	lr

00083c3c <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   83c3c:	f04f 0000 	mov.w	r0, #0
   83c40:	4770      	bx	lr
   83c42:	bf00      	nop

00083c44 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   83c44:	f04f 0000 	mov.w	r0, #0
   83c48:	4770      	bx	lr
   83c4a:	bf00      	nop

00083c4c <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
   83c4c:	4770      	bx	lr
   83c4e:	bf00      	nop

00083c50 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
   83c50:	b530      	push	{r4, r5, lr}
   83c52:	b083      	sub	sp, #12

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   83c54:	f241 1324 	movw	r3, #4388	; 0x1124
   83c58:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83c5c:	7818      	ldrb	r0, [r3, #0]
   83c5e:	2800      	cmp	r0, #0
   83c60:	f040 80df 	bne.w	83e22 <udi_cdc_tx_send+0x1d2>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   83c64:	f647 01ed 	movw	r1, #30957	; 0x78ed
   83c68:	f2c0 0108 	movt	r1, #8
   83c6c:	4788      	blx	r1
   83c6e:	b160      	cbz	r0, 83c8a <udi_cdc_tx_send+0x3a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   83c70:	f241 1414 	movw	r4, #4372	; 0x1114
   83c74:	f2c2 0407 	movt	r4, #8199	; 0x2007
   83c78:	8824      	ldrh	r4, [r4, #0]
   83c7a:	f647 1051 	movw	r0, #31057	; 0x7951
   83c7e:	f2c0 0008 	movt	r0, #8
   83c82:	4780      	blx	r0
   83c84:	4284      	cmp	r4, r0
   83c86:	d10d      	bne.n	83ca4 <udi_cdc_tx_send+0x54>
   83c88:	e0cb      	b.n	83e22 <udi_cdc_tx_send+0x1d2>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   83c8a:	f241 1214 	movw	r2, #4372	; 0x1114
   83c8e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83c92:	8814      	ldrh	r4, [r2, #0]
   83c94:	f647 1341 	movw	r3, #31041	; 0x7941
   83c98:	f2c0 0308 	movt	r3, #8
   83c9c:	4798      	blx	r3
   83c9e:	4284      	cmp	r4, r0
   83ca0:	f000 80bf 	beq.w	83e22 <udi_cdc_tx_send+0x1d2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83ca4:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   83ca8:	f1d5 0501 	rsbs	r5, r5, #1
   83cac:	bf38      	it	cc
   83cae:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   83cb0:	b672      	cpsid	i
   83cb2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83cb6:	f240 2190 	movw	r1, #656	; 0x290
   83cba:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83cbe:	f04f 0200 	mov.w	r2, #0
   83cc2:	700a      	strb	r2, [r1, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   83cc4:	f640 5300 	movw	r3, #3328	; 0xd00
   83cc8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83ccc:	781c      	ldrb	r4, [r3, #0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   83cce:	f640 5004 	movw	r0, #3332	; 0xd04
   83cd2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83cd6:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
   83cda:	bb79      	cbnz	r1, 83d3c <udi_cdc_tx_send+0xec>
		sof_zlp_counter++;
   83cdc:	f640 43fc 	movw	r3, #3324	; 0xcfc
   83ce0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83ce4:	881a      	ldrh	r2, [r3, #0]
   83ce6:	f102 0201 	add.w	r2, r2, #1
   83cea:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   83cec:	f647 00ed 	movw	r0, #30957	; 0x78ed
   83cf0:	f2c0 0008 	movt	r0, #8
   83cf4:	4780      	blx	r0
   83cf6:	b930      	cbnz	r0, 83d06 <udi_cdc_tx_send+0xb6>
   83cf8:	f640 41fc 	movw	r1, #3324	; 0xcfc
   83cfc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83d00:	880b      	ldrh	r3, [r1, #0]
   83d02:	2b63      	cmp	r3, #99	; 0x63
   83d04:	d90d      	bls.n	83d22 <udi_cdc_tx_send+0xd2>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   83d06:	f647 02ed 	movw	r2, #30957	; 0x78ed
   83d0a:	f2c0 0208 	movt	r2, #8
   83d0e:	4790      	blx	r2
   83d10:	b1a0      	cbz	r0, 83d3c <udi_cdc_tx_send+0xec>
   83d12:	f640 40fc 	movw	r0, #3324	; 0xcfc
   83d16:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83d1a:	8801      	ldrh	r1, [r0, #0]
   83d1c:	f5b1 7f48 	cmp.w	r1, #800	; 0x320
   83d20:	d20c      	bcs.n	83d3c <udi_cdc_tx_send+0xec>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   83d22:	2d00      	cmp	r5, #0
   83d24:	d07d      	beq.n	83e22 <udi_cdc_tx_send+0x1d2>
		cpu_irq_enable();
   83d26:	f240 2390 	movw	r3, #656	; 0x290
   83d2a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83d2e:	f04f 0201 	mov.w	r2, #1
   83d32:	701a      	strb	r2, [r3, #0]
   83d34:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   83d38:	b662      	cpsie	i
   83d3a:	e072      	b.n	83e22 <udi_cdc_tx_send+0x1d2>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   83d3c:	f640 43fc 	movw	r3, #3324	; 0xcfc
   83d40:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83d44:	f04f 0200 	mov.w	r2, #0
   83d48:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   83d4a:	f241 5038 	movw	r0, #5432	; 0x1538
   83d4e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83d52:	7801      	ldrb	r1, [r0, #0]
   83d54:	b949      	cbnz	r1, 83d6a <udi_cdc_tx_send+0x11a>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   83d56:	4294      	cmp	r4, r2
   83d58:	bf14      	ite	ne
   83d5a:	2200      	movne	r2, #0
   83d5c:	2201      	moveq	r2, #1
   83d5e:	f640 5300 	movw	r3, #3328	; 0xd00
   83d62:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83d66:	701a      	strb	r2, [r3, #0]
   83d68:	e003      	b.n	83d72 <udi_cdc_tx_send+0x122>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   83d6a:	f1d4 0401 	rsbs	r4, r4, #1
   83d6e:	bf38      	it	cc
   83d70:	2400      	movcc	r4, #0
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   83d72:	f241 1024 	movw	r0, #4388	; 0x1124
   83d76:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83d7a:	f04f 0201 	mov.w	r2, #1
   83d7e:	7002      	strb	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   83d80:	b13d      	cbz	r5, 83d92 <udi_cdc_tx_send+0x142>
		cpu_irq_enable();
   83d82:	f240 2590 	movw	r5, #656	; 0x290
   83d86:	f2c2 0507 	movt	r5, #8199	; 0x2007
   83d8a:	702a      	strb	r2, [r5, #0]
   83d8c:	f3bf 8f5f 	dmb	sy
   83d90:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   83d92:	4625      	mov	r5, r4
   83d94:	f640 5104 	movw	r1, #3332	; 0xd04
   83d98:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83d9c:	f831 4014 	ldrh.w	r4, [r1, r4, lsl #1]
   83da0:	f5b4 7400 	subs.w	r4, r4, #512	; 0x200
   83da4:	bf18      	it	ne
   83da6:	2401      	movne	r4, #1
	if (b_short_packet) {
   83da8:	b1dc      	cbz	r4, 83de2 <udi_cdc_tx_send+0x192>
		if (udd_is_high_speed()) {
   83daa:	f647 02ed 	movw	r2, #30957	; 0x78ed
   83dae:	f2c0 0208 	movt	r2, #8
   83db2:	4790      	blx	r2
   83db4:	b150      	cbz	r0, 83dcc <udi_cdc_tx_send+0x17c>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   83db6:	f647 1051 	movw	r0, #31057	; 0x7951
   83dba:	f2c0 0008 	movt	r0, #8
   83dbe:	4780      	blx	r0
   83dc0:	f241 1214 	movw	r2, #4372	; 0x1114
   83dc4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83dc8:	8010      	strh	r0, [r2, #0]
   83dca:	e011      	b.n	83df0 <udi_cdc_tx_send+0x1a0>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   83dcc:	f647 1141 	movw	r1, #31041	; 0x7941
   83dd0:	f2c0 0108 	movt	r1, #8
   83dd4:	4788      	blx	r1
   83dd6:	f241 1314 	movw	r3, #4372	; 0x1114
   83dda:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83dde:	8018      	strh	r0, [r3, #0]
   83de0:	e006      	b.n	83df0 <udi_cdc_tx_send+0x1a0>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   83de2:	f241 1314 	movw	r3, #4372	; 0x1114
   83de6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83dea:	f04f 0000 	mov.w	r0, #0
   83dee:	8018      	strh	r0, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   83df0:	f640 5104 	movw	r1, #3332	; 0xd04
   83df4:	f2c2 0107 	movt	r1, #8199	; 0x2007
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
   83df8:	f831 3015 	ldrh.w	r3, [r1, r5, lsl #1]
   83dfc:	f643 603d 	movw	r0, #15933	; 0x3e3d
   83e00:	f2c0 0008 	movt	r0, #8
   83e04:	9000      	str	r0, [sp, #0]
   83e06:	f04f 0084 	mov.w	r0, #132	; 0x84
   83e0a:	4621      	mov	r1, r4
   83e0c:	f640 5408 	movw	r4, #3336	; 0xd08
   83e10:	f2c2 0407 	movt	r4, #8199	; 0x2007
   83e14:	eb04 2245 	add.w	r2, r4, r5, lsl #9
   83e18:	f647 440d 	movw	r4, #31757	; 0x7c0d
   83e1c:	f2c0 0408 	movt	r4, #8
   83e20:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   83e22:	b003      	add	sp, #12
   83e24:	bd30      	pop	{r4, r5, pc}
   83e26:	bf00      	nop

00083e28 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
   83e28:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
   83e2a:	f04f 0000 	mov.w	r0, #0
   83e2e:	f643 4351 	movw	r3, #15441	; 0x3c51
   83e32:	f2c0 0308 	movt	r3, #8
   83e36:	4798      	blx	r3
   83e38:	bd08      	pop	{r3, pc}
   83e3a:	bf00      	nop

00083e3c <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   83e3c:	b508      	push	{r3, lr}
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   83e3e:	b9e8      	cbnz	r0, 83e7c <udi_cdc_data_sent+0x40>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   83e40:	f640 5300 	movw	r3, #3328	; 0xd00
   83e44:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83e48:	7819      	ldrb	r1, [r3, #0]
   83e4a:	f1d1 0101 	rsbs	r1, r1, #1
   83e4e:	bf38      	it	cc
   83e50:	2100      	movcc	r1, #0
   83e52:	f640 5304 	movw	r3, #3332	; 0xd04
   83e56:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83e5a:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   83e5e:	f241 5138 	movw	r1, #5432	; 0x1538
   83e62:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83e66:	7008      	strb	r0, [r1, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   83e68:	f241 1224 	movw	r2, #4388	; 0x1124
   83e6c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83e70:	7010      	strb	r0, [r2, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
   83e72:	f643 4351 	movw	r3, #15441	; 0x3c51
   83e76:	f2c0 0308 	movt	r3, #8
   83e7a:	4798      	blx	r3
   83e7c:	bd08      	pop	{r3, pc}
   83e7e:	bf00      	nop

00083e80 <udi_cdc_comm_setup>:
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
}

bool udi_cdc_comm_setup(void)
{
   83e80:	b508      	push	{r3, lr}
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
   83e82:	f641 338c 	movw	r3, #7052	; 0x1b8c
   83e86:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83e8a:	7818      	ldrb	r0, [r3, #0]
   83e8c:	f010 0f80 	tst.w	r0, #128	; 0x80
   83e90:	d020      	beq.n	83ed4 <udi_cdc_comm_setup+0x54>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   83e92:	f000 0160 	and.w	r1, r0, #96	; 0x60
   83e96:	2920      	cmp	r1, #32
   83e98:	d156      	bne.n	83f48 <udi_cdc_comm_setup+0xc8>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   83e9a:	f641 328c 	movw	r2, #7052	; 0x1b8c
   83e9e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83ea2:	7853      	ldrb	r3, [r2, #1]
   83ea4:	2b21      	cmp	r3, #33	; 0x21
   83ea6:	d152      	bne.n	83f4e <udi_cdc_comm_setup+0xce>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   83ea8:	f641 308c 	movw	r0, #7052	; 0x1b8c
   83eac:	f2c2 0007 	movt	r0, #8199	; 0x2007
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   83eb0:	88c1      	ldrh	r1, [r0, #6]
   83eb2:	2907      	cmp	r1, #7
   83eb4:	d14e      	bne.n	83f54 <udi_cdc_comm_setup+0xd4>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
   83eb6:	f641 338c 	movw	r3, #7052	; 0x1b8c
   83eba:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83ebe:	f640 42f4 	movw	r2, #3316	; 0xcf4
   83ec2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83ec6:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   83ec8:	f04f 0007 	mov.w	r0, #7
   83ecc:	8198      	strh	r0, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   83ece:	f04f 0001 	mov.w	r0, #1
   83ed2:	bd08      	pop	{r3, pc}
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   83ed4:	f000 0160 	and.w	r1, r0, #96	; 0x60
   83ed8:	2920      	cmp	r1, #32
   83eda:	d13e      	bne.n	83f5a <udi_cdc_comm_setup+0xda>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   83edc:	f641 328c 	movw	r2, #7052	; 0x1b8c
   83ee0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83ee4:	7853      	ldrb	r3, [r2, #1]
   83ee6:	2b20      	cmp	r3, #32
   83ee8:	d002      	beq.n	83ef0 <udi_cdc_comm_setup+0x70>
   83eea:	2b22      	cmp	r3, #34	; 0x22
   83eec:	d138      	bne.n	83f60 <udi_cdc_comm_setup+0xe0>
   83eee:	e01a      	b.n	83f26 <udi_cdc_comm_setup+0xa6>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   83ef0:	f641 338c 	movw	r3, #7052	; 0x1b8c
   83ef4:	f2c2 0307 	movt	r3, #8199	; 0x2007
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   83ef8:	88d8      	ldrh	r0, [r3, #6]
   83efa:	2807      	cmp	r0, #7
   83efc:	d133      	bne.n	83f66 <udi_cdc_comm_setup+0xe6>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
   83efe:	f641 318c 	movw	r1, #7052	; 0x1b8c
   83f02:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83f06:	f643 424d 	movw	r2, #15437	; 0x3c4d
   83f0a:	f2c0 0208 	movt	r2, #8
   83f0e:	610a      	str	r2, [r1, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
   83f10:	f640 43f4 	movw	r3, #3316	; 0xcf4
   83f14:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83f18:	608b      	str	r3, [r1, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   83f1a:	f04f 0007 	mov.w	r0, #7
   83f1e:	8188      	strh	r0, [r1, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   83f20:	f04f 0001 	mov.w	r0, #1
   83f24:	bd08      	pop	{r3, pc}
			case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
				// According cdc spec 1.1 chapter 6.2.14
				UDI_CDC_SET_DTR_EXT(port, (0 !=
   83f26:	f641 308c 	movw	r0, #7052	; 0x1b8c
   83f2a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83f2e:	7881      	ldrb	r1, [r0, #2]
   83f30:	f04f 0000 	mov.w	r0, #0
   83f34:	f001 0101 	and.w	r1, r1, #1
   83f38:	f243 52c5 	movw	r2, #13765	; 0x35c5
   83f3c:	f2c0 0208 	movt	r2, #8
   83f40:	4790      	blx	r2
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
   83f42:	f04f 0001 	mov.w	r0, #1
   83f46:	bd08      	pop	{r3, pc}
			}
		}
	}
	return false;  // request Not supported
   83f48:	f04f 0000 	mov.w	r0, #0
   83f4c:	bd08      	pop	{r3, pc}
   83f4e:	f04f 0000 	mov.w	r0, #0
   83f52:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   83f54:	f04f 0000 	mov.w	r0, #0
   83f58:	bd08      	pop	{r3, pc}
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
   83f5a:	f04f 0000 	mov.w	r0, #0
   83f5e:	bd08      	pop	{r3, pc}
   83f60:	f04f 0000 	mov.w	r0, #0
   83f64:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   83f66:	f04f 0000 	mov.w	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
   83f6a:	bd08      	pop	{r3, pc}

00083f6c <udi_cdc_data_disable>:
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
}

void udi_cdc_data_disable(void)
{
   83f6c:	b508      	push	{r3, lr}
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
   83f6e:	f241 1320 	movw	r3, #4384	; 0x1120
   83f72:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83f76:	781a      	ldrb	r2, [r3, #0]
   83f78:	f102 30ff 	add.w	r0, r2, #4294967295
   83f7c:	b2c1      	uxtb	r1, r0
   83f7e:	7019      	strb	r1, [r3, #0]
	port = udi_cdc_nb_data_enabled;
   83f80:	7818      	ldrb	r0, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
   83f82:	f648 0379 	movw	r3, #34937	; 0x8879
   83f86:	f2c0 0308 	movt	r3, #8
   83f8a:	4798      	blx	r3
	udi_cdc_data_running = false;
   83f8c:	f241 1018 	movw	r0, #4376	; 0x1118
   83f90:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83f94:	f04f 0200 	mov.w	r2, #0
   83f98:	7002      	strb	r2, [r0, #0]
   83f9a:	bd08      	pop	{r3, pc}

00083f9c <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
   83f9c:	b508      	push	{r3, lr}
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
   83f9e:	f04f 0000 	mov.w	r0, #0
   83fa2:	f241 130c 	movw	r3, #4364	; 0x110c
   83fa6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83faa:	7018      	strb	r0, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
   83fac:	f241 513c 	movw	r1, #5436	; 0x153c
   83fb0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83fb4:	8008      	strh	r0, [r1, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
   83fb6:	f241 1328 	movw	r3, #4392	; 0x1128
   83fba:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83fbe:	f04f 01a1 	mov.w	r1, #161	; 0xa1
   83fc2:	7019      	strb	r1, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   83fc4:	f04f 0120 	mov.w	r1, #32
   83fc8:	7059      	strb	r1, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   83fca:	8058      	strh	r0, [r3, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   83fcc:	8098      	strh	r0, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   83fce:	f04f 0102 	mov.w	r1, #2
   83fd2:	80d9      	strh	r1, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   83fd4:	8118      	strh	r0, [r3, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   83fd6:	f640 43f4 	movw	r3, #3316	; 0xcf4
   83fda:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83fde:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   83fe2:	6019      	str	r1, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   83fe4:	7118      	strb	r0, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   83fe6:	7158      	strb	r0, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   83fe8:	f04f 0208 	mov.w	r2, #8
   83fec:	719a      	strb	r2, [r3, #6]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
   83fee:	f648 0369 	movw	r3, #34921	; 0x8869
   83ff2:	f2c0 0308 	movt	r3, #8
   83ff6:	4798      	blx	r3
   83ff8:	b158      	cbz	r0, 84012 <udi_cdc_comm_enable+0x76>
		return false;
	}
	udi_cdc_nb_comm_enabled++;
   83ffa:	f241 100c 	movw	r0, #4364	; 0x110c
   83ffe:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84002:	7801      	ldrb	r1, [r0, #0]
   84004:	f101 0101 	add.w	r1, r1, #1
   84008:	b2ca      	uxtb	r2, r1
   8400a:	7002      	strb	r2, [r0, #0]
	return true;
   8400c:	f04f 0001 	mov.w	r0, #1
   84010:	bd08      	pop	{r3, pc}
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
   84012:	f04f 0000 	mov.w	r0, #0
	}
	udi_cdc_nb_comm_enabled++;
	return true;
}
   84016:	bd08      	pop	{r3, pc}

00084018 <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84018:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8401c:	b672      	cpsid	i
   8401e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   84022:	f240 2290 	movw	r2, #656	; 0x290
   84026:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8402a:	f04f 0100 	mov.w	r1, #0
   8402e:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   84030:	f241 1010 	movw	r0, #4368	; 0x1110
   84034:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84038:	8802      	ldrh	r2, [r0, #0]
   8403a:	b290      	uxth	r0, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   8403c:	f241 111c 	movw	r1, #4380	; 0x111c
   84040:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84044:	7809      	ldrb	r1, [r1, #0]
   84046:	f241 1208 	movw	r2, #4360	; 0x1108
   8404a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8404e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   84052:	1a08      	subs	r0, r1, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   84054:	b94b      	cbnz	r3, 8406a <udi_cdc_multi_get_nb_received_data+0x52>
		cpu_irq_enable();
   84056:	f240 2390 	movw	r3, #656	; 0x290
   8405a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8405e:	f04f 0201 	mov.w	r2, #1
   84062:	701a      	strb	r2, [r3, #0]
   84064:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   84068:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   8406a:	4770      	bx	lr

0008406c <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   8406c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   8406e:	f244 0319 	movw	r3, #16409	; 0x4019
   84072:	f2c0 0308 	movt	r3, #8
   84076:	4798      	blx	r3
}
   84078:	3000      	adds	r0, #0
   8407a:	bf18      	it	ne
   8407c:	2001      	movne	r0, #1
   8407e:	bd08      	pop	{r3, pc}

00084080 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
   84080:	b510      	push	{r4, lr}
   84082:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84084:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   84088:	f1d3 0001 	rsbs	r0, r3, #1
   8408c:	bf38      	it	cc
   8408e:	2000      	movcc	r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   84090:	b672      	cpsid	i
   84092:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84096:	f240 2290 	movw	r2, #656	; 0x290
   8409a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8409e:	f04f 0100 	mov.w	r1, #0
   840a2:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   840a4:	f241 141c 	movw	r4, #4380	; 0x111c
   840a8:	f2c2 0407 	movt	r4, #8199	; 0x2007
   840ac:	7824      	ldrb	r4, [r4, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   840ae:	f241 5334 	movw	r3, #5428	; 0x1534
   840b2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   840b6:	781a      	ldrb	r2, [r3, #0]
   840b8:	b96a      	cbnz	r2, 840d6 <udi_cdc_rx_start+0x56>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   840ba:	f241 1110 	movw	r1, #4368	; 0x1110
   840be:	f2c2 0107 	movt	r1, #8199	; 0x2007
   840c2:	880b      	ldrh	r3, [r1, #0]
   840c4:	b29a      	uxth	r2, r3
   840c6:	f241 1108 	movw	r1, #4360	; 0x1108
   840ca:	f2c2 0107 	movt	r1, #8199	; 0x2007
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
   840ce:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
   840d2:	4293      	cmp	r3, r2
   840d4:	d90e      	bls.n	840f4 <udi_cdc_rx_start+0x74>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   840d6:	2800      	cmp	r0, #0
   840d8:	d052      	beq.n	84180 <udi_cdc_rx_start+0x100>
		cpu_irq_enable();
   840da:	f240 2190 	movw	r1, #656	; 0x290
   840de:	f2c2 0107 	movt	r1, #8199	; 0x2007
   840e2:	f04f 0201 	mov.w	r2, #1
   840e6:	700a      	strb	r2, [r1, #0]
   840e8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   840ec:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   840ee:	f04f 0000 	mov.w	r0, #0
   840f2:	e047      	b.n	84184 <udi_cdc_rx_start+0x104>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
   840f4:	f241 1210 	movw	r2, #4368	; 0x1110
   840f8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   840fc:	f04f 0100 	mov.w	r1, #0
   84100:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   84102:	428c      	cmp	r4, r1
   84104:	bf14      	ite	ne
   84106:	2100      	movne	r1, #0
   84108:	2101      	moveq	r1, #1
   8410a:	f241 131c 	movw	r3, #4380	; 0x111c
   8410e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84112:	7019      	strb	r1, [r3, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
   84114:	f241 5234 	movw	r2, #5428	; 0x1534
   84118:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8411c:	f04f 0101 	mov.w	r1, #1
   84120:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   84122:	b138      	cbz	r0, 84134 <udi_cdc_rx_start+0xb4>
		cpu_irq_enable();
   84124:	f240 2090 	movw	r0, #656	; 0x290
   84128:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8412c:	7001      	strb	r1, [r0, #0]
   8412e:	f3bf 8f5f 	dmb	sy
   84132:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
   84134:	f04f 0000 	mov.w	r0, #0
   84138:	f244 026d 	movw	r2, #16493	; 0x406d
   8413c:	f2c0 0208 	movt	r2, #8
   84140:	4790      	blx	r2
   84142:	b130      	cbz	r0, 84152 <udi_cdc_rx_start+0xd2>
		UDI_CDC_RX_NOTIFY(port);
   84144:	f04f 0000 	mov.w	r0, #0
   84148:	f243 51e9 	movw	r1, #13801	; 0x35e9
   8414c:	f2c0 0108 	movt	r1, #8
   84150:	4788      	blx	r1
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
   84152:	f244 1089 	movw	r0, #16777	; 0x4189
   84156:	f2c0 0008 	movt	r0, #8
   8415a:	9000      	str	r0, [sp, #0]
   8415c:	f04f 0005 	mov.w	r0, #5
   84160:	f04f 0101 	mov.w	r1, #1
   84164:	f241 1334 	movw	r3, #4404	; 0x1134
   84168:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8416c:	eb03 2244 	add.w	r2, r3, r4, lsl #9
   84170:	f44f 7300 	mov.w	r3, #512	; 0x200
   84174:	f647 440d 	movw	r4, #31757	; 0x7c0d
   84178:	f2c0 0408 	movt	r4, #8
   8417c:	47a0      	blx	r4
   8417e:	e001      	b.n	84184 <udi_cdc_rx_start+0x104>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   84180:	f04f 0000 	mov.w	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
   84184:	b002      	add	sp, #8
   84186:	bd10      	pop	{r4, pc}

00084188 <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   84188:	b510      	push	{r4, lr}
   8418a:	b082      	sub	sp, #8
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   8418c:	bb88      	cbnz	r0, 841f2 <udi_cdc_data_received+0x6a>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   8418e:	f241 131c 	movw	r3, #4380	; 0x111c
   84192:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84196:	7818      	ldrb	r0, [r3, #0]
   84198:	f1d0 0301 	rsbs	r3, r0, #1
   8419c:	bf38      	it	cc
   8419e:	2300      	movcc	r3, #0
	if (!n) {
   841a0:	b9a9      	cbnz	r1, 841ce <udi_cdc_data_received+0x46>
		udd_ep_run( ep,
   841a2:	f244 1489 	movw	r4, #16777	; 0x4189
   841a6:	f2c0 0408 	movt	r4, #8
   841aa:	9400      	str	r4, [sp, #0]
   841ac:	4610      	mov	r0, r2
   841ae:	f04f 0101 	mov.w	r1, #1
   841b2:	f241 1234 	movw	r2, #4404	; 0x1134
   841b6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   841ba:	eb02 2243 	add.w	r2, r2, r3, lsl #9
   841be:	f44f 7300 	mov.w	r3, #512	; 0x200
   841c2:	f647 440d 	movw	r4, #31757	; 0x7c0d
   841c6:	f2c0 0408 	movt	r4, #8
   841ca:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
   841cc:	e011      	b.n	841f2 <udi_cdc_data_received+0x6a>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   841ce:	f241 1208 	movw	r2, #4360	; 0x1108
   841d2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   841d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   841da:	f04f 0000 	mov.w	r0, #0
   841de:	f241 5134 	movw	r1, #5428	; 0x1534
   841e2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   841e6:	7008      	strb	r0, [r1, #0]
	udi_cdc_rx_start(port);
   841e8:	f244 0381 	movw	r3, #16513	; 0x4081
   841ec:	f2c0 0308 	movt	r3, #8
   841f0:	4798      	blx	r3
}
   841f2:	b002      	add	sp, #8
   841f4:	bd10      	pop	{r4, pc}
   841f6:	bf00      	nop

000841f8 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
   841f8:	b538      	push	{r3, r4, r5, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
   841fa:	f04f 0400 	mov.w	r4, #0
   841fe:	f241 1320 	movw	r3, #4384	; 0x1120
   84202:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84206:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
   84208:	f241 1024 	movw	r0, #4388	; 0x1124
   8420c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84210:	7004      	strb	r4, [r0, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   84212:	f241 5138 	movw	r1, #5432	; 0x1538
   84216:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8421a:	700c      	strb	r4, [r1, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   8421c:	f640 5200 	movw	r2, #3328	; 0xd00
   84220:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84224:	7014      	strb	r4, [r2, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   84226:	f640 5304 	movw	r3, #3332	; 0xd04
   8422a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8422e:	4625      	mov	r5, r4
   84230:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   84232:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   84234:	f241 1014 	movw	r0, #4372	; 0x1114
   84238:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8423c:	8004      	strh	r4, [r0, #0]
	udi_cdc_tx_send(port);
   8423e:	4620      	mov	r0, r4
   84240:	f643 4151 	movw	r1, #15441	; 0x3c51
   84244:	f2c0 0108 	movt	r1, #8
   84248:	4788      	blx	r1

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
   8424a:	f241 5234 	movw	r2, #5428	; 0x1534
   8424e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84252:	7014      	strb	r4, [r2, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   84254:	f241 131c 	movw	r3, #4380	; 0x111c
   84258:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8425c:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   8425e:	f241 1008 	movw	r0, #4360	; 0x1108
   84262:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84266:	8004      	strh	r4, [r0, #0]
	udi_cdc_rx_pos[port] = 0;
   84268:	f241 1110 	movw	r1, #4368	; 0x1110
   8426c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84270:	800c      	strh	r4, [r1, #0]
	if (!udi_cdc_rx_start(port)) {
   84272:	4620      	mov	r0, r4
   84274:	f244 0281 	movw	r2, #16513	; 0x4081
   84278:	f2c0 0208 	movt	r2, #8
   8427c:	4790      	blx	r2
   8427e:	b198      	cbz	r0, 842a8 <udi_cdc_data_enable+0xb0>
		return false;
	}
	udi_cdc_nb_data_enabled++;
   84280:	f241 1320 	movw	r3, #4384	; 0x1120
   84284:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84288:	7818      	ldrb	r0, [r3, #0]
   8428a:	f100 0001 	add.w	r0, r0, #1
   8428e:	b2c1      	uxtb	r1, r0
   84290:	7019      	strb	r1, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   84292:	781a      	ldrb	r2, [r3, #0]
   84294:	2a01      	cmp	r2, #1
   84296:	d10a      	bne.n	842ae <udi_cdc_data_enable+0xb6>
		udi_cdc_data_running = true;
   84298:	f04f 0001 	mov.w	r0, #1
   8429c:	f241 1318 	movw	r3, #4376	; 0x1118
   842a0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   842a4:	7018      	strb	r0, [r3, #0]
   842a6:	bd38      	pop	{r3, r4, r5, pc}
	udi_cdc_rx_trans_ongoing[port] = false;
	udi_cdc_rx_buf_sel[port] = 0;
	udi_cdc_rx_buf_nb[port][0] = 0;
	udi_cdc_rx_pos[port] = 0;
	if (!udi_cdc_rx_start(port)) {
		return false;
   842a8:	f04f 0000 	mov.w	r0, #0
   842ac:	bd38      	pop	{r3, r4, r5, pc}
	}
	udi_cdc_nb_data_enabled++;
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
		udi_cdc_data_running = true;
	}
	return true;
   842ae:	f04f 0001 	mov.w	r0, #1
}
   842b2:	bd38      	pop	{r3, r4, r5, pc}

000842b4 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   842b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   842b8:	b083      	sub	sp, #12
   842ba:	4615      	mov	r5, r2
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
   842bc:	4688      	mov	r8, r1
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   842be:	f240 2790 	movw	r7, #656	; 0x290
   842c2:	f2c2 0707 	movt	r7, #8199	; 0x2007
   842c6:	f04f 0b00 	mov.w	fp, #0
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   842ca:	f241 1610 	movw	r6, #4368	; 0x1110
   842ce:	f2c2 0607 	movt	r6, #8199	; 0x2007
	buf_sel = udi_cdc_rx_buf_sel[port];
   842d2:	f241 1a1c 	movw	sl, #4380	; 0x111c
   842d6:	f2c2 0a07 	movt	sl, #8199	; 0x2007
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
   842da:	f241 1908 	movw	r9, #4360	; 0x1108
   842de:	f2c2 0907 	movt	r9, #8199	; 0x2007
	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   842e2:	f241 1334 	movw	r3, #4404	; 0x1134
   842e6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   842ea:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   842ec:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   842f0:	b672      	cpsid	i
   842f2:	f3bf 8f5f 	dmb	sy
   842f6:	f887 b000 	strb.w	fp, [r7]
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   842fa:	8830      	ldrh	r0, [r6, #0]
   842fc:	b283      	uxth	r3, r0
	buf_sel = udi_cdc_rx_buf_sel[port];
   842fe:	f89a 1000 	ldrb.w	r1, [sl]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   84302:	b92a      	cbnz	r2, 84310 <udi_cdc_multi_read_buf+0x5c>
		cpu_irq_enable();
   84304:	f04f 0401 	mov.w	r4, #1
   84308:	703c      	strb	r4, [r7, #0]
   8430a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8430e:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
   84310:	f839 4011 	ldrh.w	r4, [r9, r1, lsl #1]
   84314:	42a3      	cmp	r3, r4
   84316:	d307      	bcc.n	84328 <udi_cdc_multi_read_buf+0x74>
		if (!udi_cdc_data_running) {
   84318:	f241 1018 	movw	r0, #4376	; 0x1118
   8431c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84320:	7801      	ldrb	r1, [r0, #0]
   84322:	2900      	cmp	r1, #0
   84324:	d1e2      	bne.n	842ec <udi_cdc_multi_read_buf+0x38>
   84326:	e01d      	b.n	84364 <udi_cdc_multi_read_buf+0xb0>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   84328:	1ae4      	subs	r4, r4, r3
   8432a:	42a5      	cmp	r5, r4
   8432c:	bf38      	it	cc
   8432e:	462c      	movcc	r4, r5
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   84330:	eb03 2241 	add.w	r2, r3, r1, lsl #9
   84334:	4640      	mov	r0, r8
   84336:	9b01      	ldr	r3, [sp, #4]
   84338:	1899      	adds	r1, r3, r2
   8433a:	4622      	mov	r2, r4
   8433c:	f648 739d 	movw	r3, #36765	; 0x8f9d
   84340:	f2c0 0308 	movt	r3, #8
   84344:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   84346:	8830      	ldrh	r0, [r6, #0]
   84348:	1821      	adds	r1, r4, r0
   8434a:	b28a      	uxth	r2, r1
   8434c:	8032      	strh	r2, [r6, #0]
	ptr_buf += copy_nb;
   8434e:	44a0      	add	r8, r4
	size -= copy_nb;
   84350:	1b2d      	subs	r5, r5, r4
	udi_cdc_rx_start(port);
   84352:	f04f 0000 	mov.w	r0, #0
   84356:	f244 0381 	movw	r3, #16513	; 0x4081
   8435a:	f2c0 0308 	movt	r3, #8
   8435e:	4798      	blx	r3

	if (size) {
   84360:	2d00      	cmp	r5, #0
   84362:	d1c3      	bne.n	842ec <udi_cdc_multi_read_buf+0x38>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   84364:	4628      	mov	r0, r5
   84366:	b003      	add	sp, #12
   84368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008436c <udi_cdc_read_buf>:

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
   8436c:	b508      	push	{r3, lr}
   8436e:	4603      	mov	r3, r0
   84370:	460a      	mov	r2, r1
	return udi_cdc_multi_read_buf(0, buf, size);
   84372:	f04f 0000 	mov.w	r0, #0
   84376:	4619      	mov	r1, r3
   84378:	f244 23b5 	movw	r3, #17077	; 0x42b5
   8437c:	f2c0 0308 	movt	r3, #8
   84380:	4798      	blx	r3
}
   84382:	bd08      	pop	{r3, pc}

00084384 <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
   84384:	b410      	push	{r4}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84386:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8438a:	b672      	cpsid	i
   8438c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   84390:	f240 2390 	movw	r3, #656	; 0x290
   84394:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84398:	f04f 0200 	mov.w	r2, #0
   8439c:	701a      	strb	r2, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   8439e:	f640 5000 	movw	r0, #3328	; 0xd00
   843a2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   843a6:	7801      	ldrb	r1, [r0, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   843a8:	f640 5204 	movw	r2, #3332	; 0xd04
   843ac:	f2c2 0207 	movt	r2, #8199	; 0x2007
   843b0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
   843b4:	f1d1 0101 	rsbs	r1, r1, #1
   843b8:	bf38      	it	cc
   843ba:	2100      	movcc	r1, #0
   843bc:	b2c8      	uxtb	r0, r1
   843be:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   843c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   843c6:	d11b      	bne.n	84400 <udi_cdc_multi_get_free_tx_buffer+0x7c>
		if ((!udi_cdc_tx_trans_ongoing[port])
   843c8:	f241 1224 	movw	r2, #4388	; 0x1124
   843cc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   843d0:	7812      	ldrb	r2, [r2, #0]
   843d2:	b9aa      	cbnz	r2, 84400 <udi_cdc_multi_get_free_tx_buffer+0x7c>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   843d4:	f241 5238 	movw	r2, #5432	; 0x1538
   843d8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   843dc:	7812      	ldrb	r2, [r2, #0]
   843de:	b97a      	cbnz	r2, 84400 <udi_cdc_multi_get_free_tx_buffer+0x7c>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
   843e0:	f241 5338 	movw	r3, #5432	; 0x1538
   843e4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   843e8:	f04f 0001 	mov.w	r0, #1
   843ec:	7018      	strb	r0, [r3, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   843ee:	f640 5200 	movw	r2, #3328	; 0xd00
   843f2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   843f6:	7011      	strb	r1, [r2, #0]
			buf_sel_nb = 0;
			buf_nosel_nb = UDI_CDC_TX_BUFFERS;
   843f8:	f44f 7000 	mov.w	r0, #512	; 0x200
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
   843fc:	f04f 0300 	mov.w	r3, #0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   84400:	b94c      	cbnz	r4, 84416 <udi_cdc_multi_get_free_tx_buffer+0x92>
		cpu_irq_enable();
   84402:	f240 2290 	movw	r2, #656	; 0x290
   84406:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8440a:	f04f 0101 	mov.w	r1, #1
   8440e:	7011      	strb	r1, [r2, #0]
   84410:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   84414:	b662      	cpsie	i
iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
   84416:	18c0      	adds	r0, r0, r3
		}
	}
	cpu_irq_restore(flags);

	return (UDI_CDC_TX_BUFFERS - buf_sel_nb) + (UDI_CDC_TX_BUFFERS - buf_nosel_nb);
}
   84418:	f5c0 6080 	rsb	r0, r0, #1024	; 0x400
   8441c:	bc10      	pop	{r4}
   8441e:	4770      	bx	lr

00084420 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   84420:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   84422:	f244 3385 	movw	r3, #17285	; 0x4385
   84426:	f2c0 0308 	movt	r3, #8
   8442a:	4798      	blx	r3
}
   8442c:	3000      	adds	r0, #0
   8442e:	bf18      	it	ne
   84430:	2001      	movne	r0, #1
   84432:	bd08      	pop	{r3, pc}

00084434 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   84434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   84438:	460d      	mov	r5, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   8443a:	f640 43f4 	movw	r3, #3316	; 0xcf4
   8443e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84442:	799f      	ldrb	r7, [r3, #6]
   84444:	2f09      	cmp	r7, #9
   84446:	bf14      	ite	ne
   84448:	2700      	movne	r7, #0
   8444a:	2701      	moveq	r7, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   8444c:	f04f 0400 	mov.w	r4, #0
   84450:	f244 4621 	movw	r6, #17441	; 0x4421
   84454:	f2c0 0608 	movt	r6, #8
		if (!udi_cdc_data_running) {
   84458:	f241 1918 	movw	r9, #4376	; 0x1118
   8445c:	f2c2 0907 	movt	r9, #8199	; 0x2007
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   84460:	f240 2890 	movw	r8, #656	; 0x290
   84464:	f2c2 0807 	movt	r8, #8199	; 0x2007

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   84468:	4620      	mov	r0, r4
   8446a:	47b0      	blx	r6
   8446c:	b928      	cbnz	r0, 8447a <udi_cdc_multi_putc+0x46>
		if (!udi_cdc_data_running) {
   8446e:	f899 3000 	ldrb.w	r3, [r9]
   84472:	2b00      	cmp	r3, #0
   84474:	d1f8      	bne.n	84468 <udi_cdc_multi_putc+0x34>
   84476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8447a:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8447e:	b672      	cpsid	i
   84480:	f3bf 8f5f 	dmb	sy
   84484:	f888 4000 	strb.w	r4, [r8]
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   84488:	f640 5100 	movw	r1, #3328	; 0xd00
   8448c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84490:	780b      	ldrb	r3, [r1, #0]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   84492:	f640 5204 	movw	r2, #3332	; 0xd04
   84496:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8449a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   8449e:	eb01 2c43 	add.w	ip, r1, r3, lsl #9
   844a2:	f640 5a08 	movw	sl, #3336	; 0xd08
   844a6:	f2c2 0a07 	movt	sl, #8199	; 0x2007
   844aa:	f80a 500c 	strb.w	r5, [sl, ip]
   844ae:	f101 0101 	add.w	r1, r1, #1
   844b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   844b6:	b930      	cbnz	r0, 844c6 <udi_cdc_multi_putc+0x92>
		cpu_irq_enable();
   844b8:	f04f 0001 	mov.w	r0, #1
   844bc:	f888 0000 	strb.w	r0, [r8]
   844c0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   844c4:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
   844c6:	b11f      	cbz	r7, 844d0 <udi_cdc_multi_putc+0x9c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
   844c8:	ea4f 2525 	mov.w	r5, r5, asr #8
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
   844cc:	4627      	mov	r7, r4
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
   844ce:	e7cb      	b.n	84468 <udi_cdc_multi_putc+0x34>
	}
	return true;
   844d0:	f04f 0001 	mov.w	r0, #1
}
   844d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000844d8 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
   844d8:	b508      	push	{r3, lr}
   844da:	4601      	mov	r1, r0
	return udi_cdc_multi_putc(0, value);
   844dc:	f04f 0000 	mov.w	r0, #0
   844e0:	f244 4335 	movw	r3, #17461	; 0x4435
   844e4:	f2c0 0308 	movt	r3, #8
   844e8:	4798      	blx	r3
}
   844ea:	bd08      	pop	{r3, pc}

000844ec <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
   844ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   844f0:	b083      	sub	sp, #12
   844f2:	4615      	mov	r5, r2

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
   844f4:	f640 43f4 	movw	r3, #3316	; 0xcf4
   844f8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   844fc:	7998      	ldrb	r0, [r3, #6]
   844fe:	2809      	cmp	r0, #9
		size *=2;
   84500:	bf08      	it	eq
   84502:	0055      	lsleq	r5, r2, #1
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
   84504:	4689      	mov	r9, r1
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   84506:	f04f 0800 	mov.w	r8, #0
		if (!udi_cdc_data_running) {
   8450a:	f241 1118 	movw	r1, #4376	; 0x1118
   8450e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84512:	9101      	str	r1, [sp, #4]
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   84514:	f240 2290 	movw	r2, #656	; 0x290
   84518:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8451c:	9200      	str	r2, [sp, #0]
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   8451e:	4640      	mov	r0, r8
   84520:	f244 4321 	movw	r3, #17441	; 0x4421
   84524:	f2c0 0308 	movt	r3, #8
   84528:	4798      	blx	r3
   8452a:	b920      	cbnz	r0, 84536 <udi_cdc_multi_write_buf+0x4a>
		if (!udi_cdc_data_running) {
   8452c:	9801      	ldr	r0, [sp, #4]
   8452e:	7803      	ldrb	r3, [r0, #0]
   84530:	2b00      	cmp	r3, #0
   84532:	d1f4      	bne.n	8451e <udi_cdc_multi_write_buf+0x32>
   84534:	e035      	b.n	845a2 <udi_cdc_multi_write_buf+0xb6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84536:	f3ef 8b10 	mrs	fp, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8453a:	b672      	cpsid	i
   8453c:	f3bf 8f5f 	dmb	sy
   84540:	9c00      	ldr	r4, [sp, #0]
   84542:	f884 8000 	strb.w	r8, [r4]
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   84546:	f640 5600 	movw	r6, #3328	; 0xd00
   8454a:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8454e:	7836      	ldrb	r6, [r6, #0]
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   84550:	f640 5a04 	movw	sl, #3332	; 0xd04
   84554:	f2c2 0a07 	movt	sl, #8199	; 0x2007
   84558:	f83a 7016 	ldrh.w	r7, [sl, r6, lsl #1]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
   8455c:	f5c7 7400 	rsb	r4, r7, #512	; 0x200
   84560:	42a5      	cmp	r5, r4
   84562:	bf38      	it	cc
   84564:	462c      	movcc	r4, r5
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
   84566:	eb07 2146 	add.w	r1, r7, r6, lsl #9
   8456a:	f640 5008 	movw	r0, #3336	; 0xd08
   8456e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84572:	1840      	adds	r0, r0, r1
   84574:	4649      	mov	r1, r9
   84576:	4622      	mov	r2, r4
   84578:	f648 739d 	movw	r3, #36765	; 0x8f9d
   8457c:	f2c0 0308 	movt	r3, #8
   84580:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
   84582:	193f      	adds	r7, r7, r4
   84584:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   84588:	f1bb 0f00 	cmp.w	fp, #0
   8458c:	d106      	bne.n	8459c <udi_cdc_multi_write_buf+0xb0>
		cpu_irq_enable();
   8458e:	f04f 0101 	mov.w	r1, #1
   84592:	9a00      	ldr	r2, [sp, #0]
   84594:	7011      	strb	r1, [r2, #0]
   84596:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8459a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
   8459c:	44a1      	add	r9, r4
	size -= copy_nb;

	if (size) {
   8459e:	1b2d      	subs	r5, r5, r4
   845a0:	d1bd      	bne.n	8451e <udi_cdc_multi_write_buf+0x32>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
}
   845a2:	4628      	mov	r0, r5
   845a4:	b003      	add	sp, #12
   845a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   845aa:	bf00      	nop

000845ac <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
   845ac:	b508      	push	{r3, lr}
   845ae:	4603      	mov	r3, r0
   845b0:	460a      	mov	r2, r1
	return udi_cdc_multi_write_buf(0, buf, size);
   845b2:	f04f 0000 	mov.w	r0, #0
   845b6:	4619      	mov	r1, r3
   845b8:	f244 43ed 	movw	r3, #17645	; 0x44ed
   845bc:	f2c0 0308 	movt	r3, #8
   845c0:	4798      	blx	r3
}
   845c2:	bd08      	pop	{r3, pc}

000845c4 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
   845c4:	f04f 0000 	mov.w	r0, #0
   845c8:	4770      	bx	lr
   845ca:	bf00      	nop

000845cc <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
   845cc:	3000      	adds	r0, #0
   845ce:	bf18      	it	ne
   845d0:	2001      	movne	r0, #1
   845d2:	f641 3389 	movw	r3, #7049	; 0x1b89
   845d6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   845da:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
   845dc:	f240 2104 	movw	r1, #516	; 0x204
   845e0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   845e4:	f04f 0201 	mov.w	r2, #1
   845e8:	700a      	strb	r2, [r1, #0]
   845ea:	4770      	bx	lr

000845ec <udi_msc_clear_sense>:
//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
   845ec:	f241 5288 	movw	r2, #5512	; 0x1588
   845f0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   845f4:	f04f 0300 	mov.w	r3, #0
   845f8:	4611      	mov	r1, r2
   845fa:	f841 3b04 	str.w	r3, [r1], #4
   845fe:	6053      	str	r3, [r2, #4]
   84600:	f101 0104 	add.w	r1, r1, #4
   84604:	f841 3b04 	str.w	r3, [r1], #4
   84608:	f841 3b04 	str.w	r3, [r1], #4
   8460c:	800b      	strh	r3, [r1, #0]
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
   8460e:	f04f 00f0 	mov.w	r0, #240	; 0xf0
   84612:	7010      	strb	r0, [r2, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
   84614:	f04f 030a 	mov.w	r3, #10
   84618:	71d3      	strb	r3, [r2, #7]
   8461a:	4770      	bx	lr

0008461c <udi_msc_sense_pass>:
	udi_msc_sense.AddSenseCode = add_sense >> 8;
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
}

static void udi_msc_sense_pass(void)
{
   8461c:	b508      	push	{r3, lr}
	udi_msc_clear_sense();
   8461e:	f244 53ed 	movw	r3, #17901	; 0x45ed
   84622:	f2c0 0308 	movt	r3, #8
   84626:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
   84628:	f240 2040 	movw	r0, #576	; 0x240
   8462c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84630:	f04f 0200 	mov.w	r2, #0
   84634:	7302      	strb	r2, [r0, #12]
   84636:	bd08      	pop	{r3, pc}

00084638 <udi_msc_sense_fail>:
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
}

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
   84638:	b570      	push	{r4, r5, r6, lr}
   8463a:	4606      	mov	r6, r0
   8463c:	460d      	mov	r5, r1
   8463e:	4614      	mov	r4, r2
	udi_msc_clear_sense();
   84640:	f244 53ed 	movw	r3, #17901	; 0x45ed
   84644:	f2c0 0308 	movt	r3, #8
   84648:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
   8464a:	f240 2040 	movw	r0, #576	; 0x240
   8464e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84652:	f04f 0201 	mov.w	r2, #1
   84656:	7302      	strb	r2, [r0, #12]
	udi_msc_sense.sense_flag_key = sense_key;
   84658:	f241 5188 	movw	r1, #5512	; 0x1588
   8465c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84660:	708e      	strb	r6, [r1, #2]
	udi_msc_sense.information[0] = lba >> 24;
   84662:	ea4f 6314 	mov.w	r3, r4, lsr #24
   84666:	70cb      	strb	r3, [r1, #3]
	udi_msc_sense.information[1] = lba >> 16;
   84668:	ea4f 4014 	mov.w	r0, r4, lsr #16
   8466c:	7108      	strb	r0, [r1, #4]
	udi_msc_sense.information[2] = lba >> 8;
   8466e:	ea4f 2214 	mov.w	r2, r4, lsr #8
   84672:	714a      	strb	r2, [r1, #5]
	udi_msc_sense.information[3] = lba;
   84674:	718c      	strb	r4, [r1, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
   84676:	ea4f 2315 	mov.w	r3, r5, lsr #8
   8467a:	730b      	strb	r3, [r1, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
   8467c:	734d      	strb	r5, [r1, #13]
   8467e:	bd70      	pop	{r4, r5, r6, pc}

00084680 <udi_msc_sense_fail_busy_or_change>:
{
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
}

static void udi_msc_sense_fail_busy_or_change(void)
{
   84680:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
   84682:	f04f 0006 	mov.w	r0, #6
   84686:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   8468a:	f04f 0200 	mov.w	r2, #0
   8468e:	f244 6339 	movw	r3, #17977	; 0x4639
   84692:	f2c0 0308 	movt	r3, #8
   84696:	4798      	blx	r3
   84698:	bd08      	pop	{r3, pc}
   8469a:	bf00      	nop

0008469c <udi_msc_sense_fail_not_present>:
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
}


static void udi_msc_sense_fail_not_present(void)
{
   8469c:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
   8469e:	f04f 0002 	mov.w	r0, #2
   846a2:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
   846a6:	f04f 0200 	mov.w	r2, #0
   846aa:	f244 6339 	movw	r3, #17977	; 0x4639
   846ae:	f2c0 0308 	movt	r3, #8
   846b2:	4798      	blx	r3
   846b4:	bd08      	pop	{r3, pc}
   846b6:	bf00      	nop

000846b8 <udi_msc_sense_fail_hardware>:
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}

static void udi_msc_sense_fail_hardware(void)
{
   846b8:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
   846ba:	f04f 0004 	mov.w	r0, #4
   846be:	f04f 0100 	mov.w	r1, #0
   846c2:	460a      	mov	r2, r1
   846c4:	f244 6339 	movw	r3, #17977	; 0x4639
   846c8:	f2c0 0308 	movt	r3, #8
   846cc:	4798      	blx	r3
   846ce:	bd08      	pop	{r3, pc}

000846d0 <udi_msc_sense_fail_cdb_invalid>:
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
}

static void udi_msc_sense_fail_cdb_invalid(void)
{
   846d0:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
   846d2:	f04f 0005 	mov.w	r0, #5
   846d6:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   846da:	f04f 0200 	mov.w	r2, #0
   846de:	f244 6339 	movw	r3, #17977	; 0x4639
   846e2:	f2c0 0308 	movt	r3, #8
   846e6:	4798      	blx	r3
   846e8:	bd08      	pop	{r3, pc}
   846ea:	bf00      	nop

000846ec <udi_msc_csw_send>:
	udi_msc_csw_send();
}


void udi_msc_csw_send(void)
{
   846ec:	b510      	push	{r4, lr}
   846ee:	b082      	sub	sp, #8
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
   846f0:	f644 0379 	movw	r3, #18553	; 0x4879
   846f4:	f2c0 0308 	movt	r3, #8
   846f8:	9300      	str	r3, [sp, #0]
   846fa:	f04f 0081 	mov.w	r0, #129	; 0x81
   846fe:	f04f 0100 	mov.w	r1, #0
   84702:	f240 2240 	movw	r2, #576	; 0x240
   84706:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8470a:	f04f 030d 	mov.w	r3, #13
   8470e:	f647 440d 	movw	r4, #31757	; 0x7c0d
   84712:	f2c0 0408 	movt	r4, #8
   84716:	47a0      	blx	r4
   84718:	b950      	cbnz	r0, 84730 <udi_msc_csw_send+0x44>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
   8471a:	f04f 0081 	mov.w	r0, #129	; 0x81
   8471e:	f244 61ed 	movw	r1, #18157	; 0x46ed
   84722:	f2c0 0108 	movt	r1, #8
   84726:	f248 2299 	movw	r2, #33433	; 0x8299
   8472a:	f2c0 0208 	movt	r2, #8
   8472e:	4790      	blx	r2
	}
}
   84730:	b002      	add	sp, #8
   84732:	bd10      	pop	{r4, pc}

00084734 <udi_msc_csw_process>:

//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
   84734:	b508      	push	{r3, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
   84736:	f240 2340 	movw	r3, #576	; 0x240
   8473a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8473e:	6899      	ldr	r1, [r3, #8]
   84740:	b171      	cbz	r1, 84760 <udi_msc_csw_process+0x2c>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
   84742:	f241 5248 	movw	r2, #5448	; 0x1548
   84746:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8474a:	f992 300c 	ldrsb.w	r3, [r2, #12]
   8474e:	2b00      	cmp	r3, #0
			udd_ep_set_halt(UDI_MSC_EP_IN);
   84750:	bfb4      	ite	lt
   84752:	2081      	movlt	r0, #129	; 0x81
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
   84754:	2002      	movge	r0, #2
   84756:	f647 11f1 	movw	r1, #31217	; 0x79f1
   8475a:	f2c0 0108 	movt	r1, #8
   8475e:	4788      	blx	r1
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
   84760:	f241 5048 	movw	r0, #5448	; 0x1548
   84764:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84768:	6842      	ldr	r2, [r0, #4]
   8476a:	f240 2340 	movw	r3, #576	; 0x240
   8476e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84772:	605a      	str	r2, [r3, #4]
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
	udi_msc_csw_send();
   84774:	f244 61ed 	movw	r1, #18157	; 0x46ed
   84778:	f2c0 0108 	movt	r1, #8
   8477c:	4788      	blx	r1
   8477e:	bd08      	pop	{r3, pc}

00084780 <udi_msc_cbw_validate>:
	}
}


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
   84780:	b508      	push	{r3, lr}
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
   84782:	f241 5348 	movw	r3, #5448	; 0x1548
   84786:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8478a:	7b1a      	ldrb	r2, [r3, #12]
   8478c:	4051      	eors	r1, r2
   8478e:	f011 0f80 	tst.w	r1, #128	; 0x80
   84792:	d106      	bne.n	847a2 <udi_msc_cbw_validate+0x22>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
   84794:	f240 2140 	movw	r1, #576	; 0x240
   84798:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8479c:	688b      	ldr	r3, [r1, #8]
   8479e:	4283      	cmp	r3, r0
   847a0:	d20c      	bcs.n	847bc <udi_msc_cbw_validate+0x3c>
		udi_msc_sense_fail_cdb_invalid();
   847a2:	f244 60d1 	movw	r0, #18129	; 0x46d1
   847a6:	f2c0 0008 	movt	r0, #8
   847aa:	4780      	blx	r0
		udi_msc_csw_process();
   847ac:	f244 7235 	movw	r2, #18229	; 0x4735
   847b0:	f2c0 0208 	movt	r2, #8
   847b4:	4790      	blx	r2
		return false;
   847b6:	f04f 0000 	mov.w	r0, #0
   847ba:	bd08      	pop	{r3, pc}
	 *  - Case  4: Hi > Dn
	 *  - Case  5: Hi > Di
	 *  - Case  9: Ho > Dn
	 *  - Case 11: Ho > Do
	 */
	return true;
   847bc:	f04f 0001 	mov.w	r0, #1
}
   847c0:	bd08      	pop	{r3, pc}
   847c2:	bf00      	nop

000847c4 <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
   847c4:	b510      	push	{r4, lr}
   847c6:	b082      	sub	sp, #8
   847c8:	4602      	mov	r2, r0
   847ca:	460b      	mov	r3, r1
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
   847cc:	f644 0105 	movw	r1, #18437	; 0x4805
   847d0:	f2c0 0108 	movt	r1, #8
   847d4:	9100      	str	r1, [sp, #0]
   847d6:	f04f 0081 	mov.w	r0, #129	; 0x81
   847da:	f04f 0101 	mov.w	r1, #1
   847de:	f647 440d 	movw	r4, #31757	; 0x7c0d
   847e2:	f2c0 0408 	movt	r4, #8
   847e6:	47a0      	blx	r4
   847e8:	b948      	cbnz	r0, 847fe <udi_msc_data_send+0x3a>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
   847ea:	f244 63b9 	movw	r3, #18105	; 0x46b9
   847ee:	f2c0 0308 	movt	r3, #8
   847f2:	4798      	blx	r3
		udi_msc_csw_process();
   847f4:	f244 7035 	movw	r0, #18229	; 0x4735
   847f8:	f2c0 0008 	movt	r0, #8
   847fc:	4780      	blx	r0
	}
}
   847fe:	b002      	add	sp, #8
   84800:	bd10      	pop	{r4, pc}
   84802:	bf00      	nop

00084804 <udi_msc_data_sent>:


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
   84804:	b510      	push	{r4, lr}
   84806:	460c      	mov	r4, r1
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
   84808:	b980      	cbnz	r0, 8482c <udi_msc_data_sent+0x28>
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Update sense data
	udi_msc_sense_pass();
   8480a:	f244 631d 	movw	r3, #17949	; 0x461d
   8480e:	f2c0 0308 	movt	r3, #8
   84812:	4798      	blx	r3
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
   84814:	f240 2040 	movw	r0, #576	; 0x240
   84818:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8481c:	6882      	ldr	r2, [r0, #8]
   8481e:	1b14      	subs	r4, r2, r4
   84820:	6084      	str	r4, [r0, #8]
	udi_msc_csw_process();
   84822:	f244 7135 	movw	r1, #18229	; 0x4735
   84826:	f2c0 0108 	movt	r1, #8
   8482a:	4788      	blx	r1
   8482c:	bd10      	pop	{r4, pc}
   8482e:	bf00      	nop

00084830 <udi_msc_cbw_wait>:
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
}

static void udi_msc_cbw_wait(void)
{
   84830:	b510      	push	{r4, lr}
   84832:	b082      	sub	sp, #8
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
   84834:	f644 238d 	movw	r3, #19085	; 0x4a8d
   84838:	f2c0 0308 	movt	r3, #8
   8483c:	9300      	str	r3, [sp, #0]
   8483e:	f04f 0002 	mov.w	r0, #2
   84842:	f04f 0101 	mov.w	r1, #1
   84846:	f241 5248 	movw	r2, #5448	; 0x1548
   8484a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8484e:	f04f 031f 	mov.w	r3, #31
   84852:	f647 440d 	movw	r4, #31757	; 0x7c0d
   84856:	f2c0 0408 	movt	r4, #8
   8485a:	47a0      	blx	r4
   8485c:	b950      	cbnz	r0, 84874 <udi_msc_cbw_wait+0x44>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
   8485e:	f04f 0002 	mov.w	r0, #2
   84862:	f644 0131 	movw	r1, #18481	; 0x4831
   84866:	f2c0 0108 	movt	r1, #8
   8486a:	f248 2299 	movw	r2, #33433	; 0x8299
   8486e:	f2c0 0208 	movt	r2, #8
   84872:	4790      	blx	r2
	}
}
   84874:	b002      	add	sp, #8
   84876:	bd10      	pop	{r4, pc}

00084878 <udi_msc_csw_sent>:
}


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
   84878:	b508      	push	{r3, lr}
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
   8487a:	f644 0331 	movw	r3, #18481	; 0x4831
   8487e:	f2c0 0308 	movt	r3, #8
   84882:	4798      	blx	r3
   84884:	bd08      	pop	{r3, pc}
   84886:	bf00      	nop

00084888 <udi_msc_cbw_invalid>:

//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
   84888:	b508      	push	{r3, lr}
	if (!udi_msc_b_cbw_invalid)
   8488a:	f241 5368 	movw	r3, #5480	; 0x1568
   8488e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84892:	7818      	ldrb	r0, [r3, #0]
   84894:	b188      	cbz	r0, 848ba <udi_msc_cbw_invalid+0x32>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_OUT);
   84896:	f04f 0002 	mov.w	r0, #2
   8489a:	f647 11f1 	movw	r1, #31217	; 0x79f1
   8489e:	f2c0 0108 	movt	r1, #8
   848a2:	4788      	blx	r1
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
   848a4:	f04f 0002 	mov.w	r0, #2
   848a8:	f644 0189 	movw	r1, #18569	; 0x4889
   848ac:	f2c0 0108 	movt	r1, #8
   848b0:	f248 2299 	movw	r2, #33433	; 0x8299
   848b4:	f2c0 0208 	movt	r2, #8
   848b8:	4790      	blx	r2
   848ba:	bd08      	pop	{r3, pc}

000848bc <udi_msc_csw_invalid>:
}

static void udi_msc_csw_invalid(void)
{
   848bc:	b508      	push	{r3, lr}
	if (!udi_msc_b_cbw_invalid)
   848be:	f241 5368 	movw	r3, #5480	; 0x1568
   848c2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   848c6:	7818      	ldrb	r0, [r3, #0]
   848c8:	b188      	cbz	r0, 848ee <udi_msc_csw_invalid+0x32>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_IN);
   848ca:	f04f 0081 	mov.w	r0, #129	; 0x81
   848ce:	f647 11f1 	movw	r1, #31217	; 0x79f1
   848d2:	f2c0 0108 	movt	r1, #8
   848d6:	4788      	blx	r1
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
   848d8:	f04f 0081 	mov.w	r0, #129	; 0x81
   848dc:	f644 01bd 	movw	r1, #18621	; 0x48bd
   848e0:	f2c0 0108 	movt	r1, #8
   848e4:	f248 2299 	movw	r2, #33433	; 0x8299
   848e8:	f2c0 0208 	movt	r2, #8
   848ec:	4790      	blx	r2
   848ee:	bd08      	pop	{r3, pc}

000848f0 <udi_msc_spc_mode_sense>:
	udi_msc_csw_process();
}


static void udi_msc_spc_mode_sense(bool b_sense10)
{
   848f0:	b570      	push	{r4, r5, r6, lr}
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
   848f2:	f241 516c 	movw	r1, #5484	; 0x156c
   848f6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   848fa:	f04f 0300 	mov.w	r3, #0
   848fe:	460a      	mov	r2, r1
   84900:	f842 3b04 	str.w	r3, [r2], #4
   84904:	604b      	str	r3, [r1, #4]
   84906:	f102 0204 	add.w	r2, r2, #4
   8490a:	f842 3b04 	str.w	r3, [r2], #4
   8490e:	f842 3b04 	str.w	r3, [r2], #4
   84912:	6013      	str	r3, [r2, #0]

	// Initialize process
	if (b_sense10) {
   84914:	4606      	mov	r6, r0
   84916:	b148      	cbz	r0, 8492c <udi_msc_spc_mode_sense+0x3c>
		request_lgt = udi_msc_cbw.CDB[8];
   84918:	f241 5448 	movw	r4, #5448	; 0x1548
   8491c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84920:	7de5      	ldrb	r5, [r4, #23]
		ptr_mode = &sense.s10.sense_data;
   84922:	f101 0108 	add.w	r1, r1, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
   84926:	f04f 0408 	mov.w	r4, #8
   8492a:	e007      	b.n	8493c <udi_msc_spc_mode_sense+0x4c>
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
   8492c:	f241 5048 	movw	r0, #5448	; 0x1548
   84930:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84934:	7cc5      	ldrb	r5, [r0, #19]
		ptr_mode = &sense.s6.sense_data;
   84936:	492b      	ldr	r1, [pc, #172]	; (849e4 <udi_msc_spc_mode_sense+0xf4>)
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
   84938:	f04f 0404 	mov.w	r4, #4
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
   8493c:	f241 5348 	movw	r3, #5448	; 0x1548
   84940:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84944:	7c5a      	ldrb	r2, [r3, #17]
   84946:	f002 003f 	and.w	r0, r2, #63	; 0x3f
	if ((SCSI_MS_MODE_INFEXP == mode)
   8494a:	281c      	cmp	r0, #28
   8494c:	d001      	beq.n	84952 <udi_msc_spc_mode_sense+0x62>
			|| (SCSI_MS_MODE_ALL == mode)) {
   8494e:	283f      	cmp	r0, #63	; 0x3f
   84950:	d10b      	bne.n	8496a <udi_msc_spc_mode_sense+0x7a>
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
   84952:	f04f 031c 	mov.w	r3, #28
   84956:	700b      	strb	r3, [r1, #0]
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
   84958:	f04f 020a 	mov.w	r2, #10
   8495c:	704a      	strb	r2, [r1, #1]
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
   8495e:	f04f 0005 	mov.w	r0, #5
   84962:	70c8      	strb	r0, [r1, #3]
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
   84964:	f104 040c 	add.w	r4, r4, #12
   84968:	b2e4      	uxtb	r4, r4
   8496a:	42ac      	cmp	r4, r5
   8496c:	bf38      	it	cc
   8496e:	4625      	movcc	r5, r4
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
		request_lgt = data_sense_lgt;
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
   84970:	4628      	mov	r0, r5
   84972:	f04f 0180 	mov.w	r1, #128	; 0x80
   84976:	f244 7381 	movw	r3, #18305	; 0x4781
   8497a:	f2c0 0308 	movt	r3, #8
   8497e:	4798      	blx	r3
   84980:	b370      	cbz	r0, 849e0 <udi_msc_spc_mode_sense+0xf0>
		return;

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
   84982:	f241 5148 	movw	r1, #5448	; 0x1548
   84986:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8498a:	7b48      	ldrb	r0, [r1, #13]
   8498c:	f643 3275 	movw	r2, #15221	; 0x3b75
   84990:	f2c0 0208 	movt	r2, #8
   84994:	4790      	blx	r2
   84996:	2800      	cmp	r0, #0
   84998:	bf14      	ite	ne
   8499a:	2080      	movne	r0, #128	; 0x80
   8499c:	2000      	moveq	r0, #0

	if (b_sense10) {
   8499e:	b16e      	cbz	r6, 849bc <udi_msc_spc_mode_sense+0xcc>
		sense.s10.header.mode_data_length =
				cpu_to_be16((data_sense_lgt - 2));
   849a0:	f1a4 0402 	sub.w	r4, r4, #2
   849a4:	b2a4      	uxth	r4, r4

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;

	if (b_sense10) {
		sense.s10.header.mode_data_length =
   849a6:	f241 516c 	movw	r1, #5484	; 0x156c
   849aa:	f2c2 0107 	movt	r1, #8199	; 0x2007
				cpu_to_be16((data_sense_lgt - 2));
   849ae:	ea4f 2214 	mov.w	r2, r4, lsr #8
   849b2:	ea42 2404 	orr.w	r4, r2, r4, lsl #8

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;

	if (b_sense10) {
		sense.s10.header.mode_data_length =
   849b6:	800c      	strh	r4, [r1, #0]
				cpu_to_be16((data_sense_lgt - 2));
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
   849b8:	70c8      	strb	r0, [r1, #3]
   849ba:	e007      	b.n	849cc <udi_msc_spc_mode_sense+0xdc>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
   849bc:	f241 536c 	movw	r3, #5484	; 0x156c
   849c0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   849c4:	f104 34ff 	add.w	r4, r4, #4294967295
   849c8:	701c      	strb	r4, [r3, #0]
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
   849ca:	7098      	strb	r0, [r3, #2]
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
   849cc:	f241 506c 	movw	r0, #5484	; 0x156c
   849d0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   849d4:	4629      	mov	r1, r5
   849d6:	f244 73c5 	movw	r3, #18373	; 0x47c5
   849da:	f2c0 0308 	movt	r3, #8
   849de:	4798      	blx	r3
   849e0:	bd70      	pop	{r4, r5, r6, pc}
   849e2:	bf00      	nop
   849e4:	20071570 	.word	0x20071570

000849e8 <udi_msc_sbc_trans>:
			sizeof(udi_msc_capacity));
}


static void udi_msc_sbc_trans(bool b_read)
{
   849e8:	b510      	push	{r4, lr}
	uint32_t trans_size;

	if (!b_read) {
   849ea:	4604      	mov	r4, r0
   849ec:	b9d8      	cbnz	r0, 84a26 <udi_msc_sbc_trans+0x3e>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
   849ee:	f241 5348 	movw	r3, #5448	; 0x1548
   849f2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   849f6:	7b58      	ldrb	r0, [r3, #13]
   849f8:	f643 3175 	movw	r1, #15221	; 0x3b75
   849fc:	f2c0 0108 	movt	r1, #8
   84a00:	4788      	blx	r1
   84a02:	b180      	cbz	r0, 84a26 <udi_msc_sbc_trans+0x3e>
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}

static void udi_msc_sense_fail_protected(void)
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
   84a04:	f04f 0007 	mov.w	r0, #7
   84a08:	f44f 511c 	mov.w	r1, #9984	; 0x2700
   84a0c:	f04f 0200 	mov.w	r2, #0
   84a10:	f244 6339 	movw	r3, #17977	; 0x4639
   84a14:	f2c0 0308 	movt	r3, #8
   84a18:	4798      	blx	r3
	if (!b_read) {
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
			// Write not authorized
			udi_msc_sense_fail_protected();
			udi_msc_csw_process();
   84a1a:	f244 7235 	movw	r2, #18229	; 0x4735
   84a1e:	f2c0 0208 	movt	r2, #8
   84a22:	4790      	blx	r2
			return;
   84a24:	bd10      	pop	{r4, pc}
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
   84a26:	f241 5284 	movw	r2, #5508	; 0x1584
   84a2a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84a2e:	f241 5048 	movw	r0, #5448	; 0x1548
   84a32:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84a36:	7c43      	ldrb	r3, [r0, #17]
   84a38:	70d3      	strb	r3, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
   84a3a:	7c81      	ldrb	r1, [r0, #18]
   84a3c:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
   84a3e:	7cc3      	ldrb	r3, [r0, #19]
   84a40:	7053      	strb	r3, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
   84a42:	7d01      	ldrb	r1, [r0, #20]
   84a44:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
   84a46:	f241 5280 	movw	r2, #5504	; 0x1580
   84a4a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84a4e:	7d83      	ldrb	r3, [r0, #22]
   84a50:	7053      	strb	r3, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
   84a52:	7dc0      	ldrb	r0, [r0, #23]
   84a54:	7010      	strb	r0, [r2, #0]

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
   84a56:	8811      	ldrh	r1, [r2, #0]
	if (!udi_msc_cbw_validate(trans_size,
   84a58:	ea4f 2041 	mov.w	r0, r1, lsl #9
   84a5c:	2c00      	cmp	r4, #0
   84a5e:	bf14      	ite	ne
   84a60:	2180      	movne	r1, #128	; 0x80
   84a62:	2100      	moveq	r1, #0
   84a64:	f244 7281 	movw	r2, #18305	; 0x4781
   84a68:	f2c0 0208 	movt	r2, #8
   84a6c:	4790      	blx	r2
   84a6e:	b158      	cbz	r0, 84a88 <udi_msc_sbc_trans+0xa0>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
   84a70:	f241 539c 	movw	r3, #5532	; 0x159c
   84a74:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84a78:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
   84a7a:	f241 5044 	movw	r0, #5444	; 0x1544
   84a7e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84a82:	f04f 0101 	mov.w	r1, #1
   84a86:	7001      	strb	r1, [r0, #0]
   84a88:	bd10      	pop	{r4, pc}
   84a8a:	bf00      	nop

00084a8c <udi_msc_cbw_received>:
}


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
   84a8c:	b570      	push	{r4, r5, r6, lr}
	UNUSED(ep);
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
   84a8e:	2800      	cmp	r0, #0
   84a90:	f040 82b8 	bne.w	85004 <udi_msc_cbw_received+0x578>
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
   84a94:	291f      	cmp	r1, #31
   84a96:	d10a      	bne.n	84aae <udi_msc_cbw_received+0x22>
			|| (udi_msc_cbw.dCBWSignature !=
   84a98:	f245 3355 	movw	r3, #21333	; 0x5355
   84a9c:	f2c4 3342 	movt	r3, #17218	; 0x4342
   84aa0:	f241 5248 	movw	r2, #5448	; 0x1548
   84aa4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84aa8:	6810      	ldr	r0, [r2, #0]
   84aaa:	4298      	cmp	r0, r3
   84aac:	d011      	beq.n	84ad2 <udi_msc_cbw_received+0x46>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
   84aae:	f241 5368 	movw	r3, #5480	; 0x1568
   84ab2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84ab6:	f04f 0201 	mov.w	r2, #1
   84aba:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
   84abc:	f644 0189 	movw	r1, #18569	; 0x4889
   84ac0:	f2c0 0108 	movt	r1, #8
   84ac4:	4788      	blx	r1
		udi_msc_csw_invalid();
   84ac6:	f644 00bd 	movw	r0, #18621	; 0x48bd
   84aca:	f2c0 0008 	movt	r0, #8
   84ace:	4780      	blx	r0
		return;
   84ad0:	bd70      	pop	{r4, r5, r6, pc}
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
   84ad2:	f241 5148 	movw	r1, #5448	; 0x1548
   84ad6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84ada:	7b4b      	ldrb	r3, [r1, #13]
   84adc:	f003 000f 	and.w	r0, r3, #15
   84ae0:	7348      	strb	r0, [r1, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
   84ae2:	f241 5240 	movw	r2, #5440	; 0x1540
   84ae6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84aea:	7811      	ldrb	r1, [r2, #0]
   84aec:	4281      	cmp	r1, r0
   84aee:	d20a      	bcs.n	84b06 <udi_msc_cbw_received+0x7a>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
   84af0:	f244 61d1 	movw	r1, #18129	; 0x46d1
   84af4:	f2c0 0108 	movt	r1, #8
   84af8:	4788      	blx	r1
		udi_msc_csw_process();
   84afa:	f244 7035 	movw	r0, #18229	; 0x4735
   84afe:	f2c0 0008 	movt	r0, #8
   84b02:	4780      	blx	r0
		return;
   84b04:	bd70      	pop	{r4, r5, r6, pc}
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
   84b06:	f241 5348 	movw	r3, #5448	; 0x1548
   84b0a:	f2c2 0307 	movt	r3, #8199	; 0x2007
		udi_msc_sense_fail_cdb_invalid();
		udi_msc_csw_process();
		return;
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
   84b0e:	689a      	ldr	r2, [r3, #8]
   84b10:	f240 2140 	movw	r1, #576	; 0x240
   84b14:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84b18:	608a      	str	r2, [r1, #8]
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
   84b1a:	7bdb      	ldrb	r3, [r3, #15]
   84b1c:	2b5a      	cmp	r3, #90	; 0x5a
   84b1e:	f200 825a 	bhi.w	84fd6 <udi_msc_cbw_received+0x54a>
   84b22:	e8df f013 	tbh	[pc, r3, lsl #1]
   84b26:	01a6      	.short	0x01a6
   84b28:	02580258 	.word	0x02580258
   84b2c:	0258005b 	.word	0x0258005b
   84b30:	02580258 	.word	0x02580258
   84b34:	02580258 	.word	0x02580258
   84b38:	02580258 	.word	0x02580258
   84b3c:	02580258 	.word	0x02580258
   84b40:	02580258 	.word	0x02580258
   84b44:	02580258 	.word	0x02580258
   84b48:	00790258 	.word	0x00790258
   84b4c:	02580258 	.word	0x02580258
   84b50:	02580258 	.word	0x02580258
   84b54:	02580258 	.word	0x02580258
   84b58:	01960258 	.word	0x01960258
   84b5c:	02580209 	.word	0x02580209
   84b60:	02260258 	.word	0x02260258
   84b64:	02580258 	.word	0x02580258
   84b68:	02580258 	.word	0x02580258
   84b6c:	02580258 	.word	0x02580258
   84b70:	025801ce 	.word	0x025801ce
   84b74:	02480258 	.word	0x02480258
   84b78:	02500258 	.word	0x02500258
   84b7c:	02580258 	.word	0x02580258
   84b80:	02580258 	.word	0x02580258
   84b84:	0258023d 	.word	0x0258023d
   84b88:	02580258 	.word	0x02580258
   84b8c:	02580258 	.word	0x02580258
   84b90:	02580258 	.word	0x02580258
   84b94:	02580258 	.word	0x02580258
   84b98:	02580258 	.word	0x02580258
   84b9c:	02580258 	.word	0x02580258
   84ba0:	02580258 	.word	0x02580258
   84ba4:	02580258 	.word	0x02580258
   84ba8:	02580258 	.word	0x02580258
   84bac:	02580258 	.word	0x02580258
   84bb0:	02580258 	.word	0x02580258
   84bb4:	02580258 	.word	0x02580258
   84bb8:	02580258 	.word	0x02580258
   84bbc:	02580258 	.word	0x02580258
   84bc0:	02580258 	.word	0x02580258
   84bc4:	02580258 	.word	0x02580258
   84bc8:	02580258 	.word	0x02580258
   84bcc:	02580258 	.word	0x02580258
   84bd0:	02580258 	.word	0x02580258
   84bd4:	02580258 	.word	0x02580258
   84bd8:	019e0258 	.word	0x019e0258
//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
	uint8_t length = udi_msc_cbw.CDB[4];
   84bdc:	f241 5448 	movw	r4, #5448	; 0x1548
   84be0:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84be4:	7ce4      	ldrb	r4, [r4, #19]
   84be6:	2c12      	cmp	r4, #18
   84be8:	bf28      	it	cs
   84bea:	2412      	movcs	r4, #18

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
		length = sizeof(udi_msc_sense);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
   84bec:	4620      	mov	r0, r4
   84bee:	f04f 0180 	mov.w	r1, #128	; 0x80
   84bf2:	f244 7281 	movw	r2, #18305	; 0x4781
   84bf6:	f2c0 0208 	movt	r2, #8
   84bfa:	4790      	blx	r2
   84bfc:	2800      	cmp	r0, #0
   84bfe:	f000 8201 	beq.w	85004 <udi_msc_cbw_received+0x578>
		return;
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
   84c02:	f241 5088 	movw	r0, #5512	; 0x1588
   84c06:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84c0a:	4621      	mov	r1, r4
   84c0c:	f244 73c5 	movw	r3, #18373	; 0x47c5
   84c10:	f2c0 0308 	movt	r3, #8
   84c14:	4798      	blx	r3
   84c16:	bd70      	pop	{r4, r5, r6, pc}
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
   84c18:	f241 5448 	movw	r4, #5448	; 0x1548
   84c1c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84c20:	7ce4      	ldrb	r4, [r4, #19]
   84c22:	2c24      	cmp	r4, #36	; 0x24
   84c24:	bf28      	it	cs
   84c26:	2424      	movcs	r4, #36	; 0x24

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
   84c28:	4620      	mov	r0, r4
   84c2a:	f04f 0180 	mov.w	r1, #128	; 0x80
   84c2e:	f244 7281 	movw	r2, #18305	; 0x4781
   84c32:	f2c0 0208 	movt	r2, #8
   84c36:	4790      	blx	r2
   84c38:	2800      	cmp	r0, #0
   84c3a:	f000 81e3 	beq.w	85004 <udi_msc_cbw_received+0x578>
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
   84c3e:	f241 5048 	movw	r0, #5448	; 0x1548
   84c42:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84c46:	7c01      	ldrb	r1, [r0, #16]
   84c48:	f011 0f03 	tst.w	r1, #3
   84c4c:	d105      	bne.n	84c5a <udi_msc_cbw_received+0x1ce>
			|| (0 != udi_msc_cbw.CDB[2])) {
   84c4e:	f241 5348 	movw	r3, #5448	; 0x1548
   84c52:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84c56:	7c5a      	ldrb	r2, [r3, #17]
   84c58:	b152      	cbz	r2, 84c70 <udi_msc_cbw_received+0x1e4>
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
   84c5a:	f244 61d1 	movw	r1, #18129	; 0x46d1
   84c5e:	f2c0 0108 	movt	r1, #8
   84c62:	4788      	blx	r1
		udi_msc_csw_process();
   84c64:	f244 7335 	movw	r3, #18229	; 0x4735
   84c68:	f2c0 0308 	movt	r3, #8
   84c6c:	4798      	blx	r3
   84c6e:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
   84c70:	f241 5548 	movw	r5, #5448	; 0x1548
   84c74:	f2c2 0507 	movt	r5, #8199	; 0x2007
   84c78:	7b68      	ldrb	r0, [r5, #13]
   84c7a:	f643 368d 	movw	r6, #15245	; 0x3b8d
   84c7e:	f2c0 0608 	movt	r6, #8
   84c82:	47b0      	blx	r6
   84c84:	2800      	cmp	r0, #0
   84c86:	bf14      	ite	ne
   84c88:	2080      	movne	r0, #128	; 0x80
   84c8a:	2000      	moveq	r0, #0
   84c8c:	f240 261c 	movw	r6, #540	; 0x21c
   84c90:	f2c2 0607 	movt	r6, #8199	; 0x2007
   84c94:	7070      	strb	r0, [r6, #1]
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
   84c96:	f241 5148 	movw	r1, #5448	; 0x1548
   84c9a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84c9e:	7b48      	ldrb	r0, [r1, #13]
   84ca0:	f643 33a5 	movw	r3, #15269	; 0x3ba5
   84ca4:	f2c0 0308 	movt	r3, #8
   84ca8:	4798      	blx	r3
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
   84caa:	f106 0510 	add.w	r5, r6, #16
   84cae:	4603      	mov	r3, r0
   84cb0:	f853 0f01 	ldr.w	r0, [r3, #1]!
   84cb4:	6859      	ldr	r1, [r3, #4]
   84cb6:	689a      	ldr	r2, [r3, #8]
   84cb8:	68db      	ldr	r3, [r3, #12]
   84cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   84cbc:	7c32      	ldrb	r2, [r6, #16]
   84cbe:	2a00      	cmp	r2, #0
   84cc0:	f000 819a 	beq.w	84ff8 <udi_msc_cbw_received+0x56c>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   84cc4:	2a22      	cmp	r2, #34	; 0x22
   84cc6:	f000 819a 	beq.w	84ffe <udi_msc_cbw_received+0x572>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   84cca:	7c71      	ldrb	r1, [r6, #17]
   84ccc:	2900      	cmp	r1, #0
   84cce:	d03e      	beq.n	84d4e <udi_msc_cbw_received+0x2c2>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   84cd0:	2922      	cmp	r1, #34	; 0x22
   84cd2:	d06b      	beq.n	84dac <udi_msc_cbw_received+0x320>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   84cd4:	7cb2      	ldrb	r2, [r6, #18]
   84cd6:	2a00      	cmp	r2, #0
   84cd8:	d03c      	beq.n	84d54 <udi_msc_cbw_received+0x2c8>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   84cda:	2a22      	cmp	r2, #34	; 0x22
   84cdc:	d069      	beq.n	84db2 <udi_msc_cbw_received+0x326>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   84cde:	7cf1      	ldrb	r1, [r6, #19]
   84ce0:	2900      	cmp	r1, #0
   84ce2:	d03a      	beq.n	84d5a <udi_msc_cbw_received+0x2ce>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   84ce4:	2922      	cmp	r1, #34	; 0x22
   84ce6:	d067      	beq.n	84db8 <udi_msc_cbw_received+0x32c>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   84ce8:	7d32      	ldrb	r2, [r6, #20]
   84cea:	2a00      	cmp	r2, #0
   84cec:	d038      	beq.n	84d60 <udi_msc_cbw_received+0x2d4>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   84cee:	2a22      	cmp	r2, #34	; 0x22
   84cf0:	d065      	beq.n	84dbe <udi_msc_cbw_received+0x332>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   84cf2:	7d71      	ldrb	r1, [r6, #21]
   84cf4:	2900      	cmp	r1, #0
   84cf6:	d036      	beq.n	84d66 <udi_msc_cbw_received+0x2da>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   84cf8:	2922      	cmp	r1, #34	; 0x22
   84cfa:	d063      	beq.n	84dc4 <udi_msc_cbw_received+0x338>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   84cfc:	7db2      	ldrb	r2, [r6, #22]
   84cfe:	b3aa      	cbz	r2, 84d6c <udi_msc_cbw_received+0x2e0>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   84d00:	2a22      	cmp	r2, #34	; 0x22
   84d02:	d062      	beq.n	84dca <udi_msc_cbw_received+0x33e>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   84d04:	7df1      	ldrb	r1, [r6, #23]
   84d06:	b3a1      	cbz	r1, 84d72 <udi_msc_cbw_received+0x2e6>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   84d08:	2922      	cmp	r1, #34	; 0x22
   84d0a:	d061      	beq.n	84dd0 <udi_msc_cbw_received+0x344>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   84d0c:	7e32      	ldrb	r2, [r6, #24]
   84d0e:	b39a      	cbz	r2, 84d78 <udi_msc_cbw_received+0x2ec>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   84d10:	2a22      	cmp	r2, #34	; 0x22
   84d12:	d060      	beq.n	84dd6 <udi_msc_cbw_received+0x34a>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   84d14:	7e71      	ldrb	r1, [r6, #25]
   84d16:	b391      	cbz	r1, 84d7e <udi_msc_cbw_received+0x2f2>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   84d18:	2922      	cmp	r1, #34	; 0x22
   84d1a:	d05f      	beq.n	84ddc <udi_msc_cbw_received+0x350>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   84d1c:	7eb2      	ldrb	r2, [r6, #26]
   84d1e:	b38a      	cbz	r2, 84d84 <udi_msc_cbw_received+0x2f8>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   84d20:	2a22      	cmp	r2, #34	; 0x22
   84d22:	d05e      	beq.n	84de2 <udi_msc_cbw_received+0x356>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   84d24:	7ef1      	ldrb	r1, [r6, #27]
   84d26:	b381      	cbz	r1, 84d8a <udi_msc_cbw_received+0x2fe>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   84d28:	2922      	cmp	r1, #34	; 0x22
   84d2a:	d05d      	beq.n	84de8 <udi_msc_cbw_received+0x35c>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   84d2c:	7f32      	ldrb	r2, [r6, #28]
   84d2e:	b37a      	cbz	r2, 84d90 <udi_msc_cbw_received+0x304>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   84d30:	2a22      	cmp	r2, #34	; 0x22
   84d32:	d05c      	beq.n	84dee <udi_msc_cbw_received+0x362>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   84d34:	7f71      	ldrb	r1, [r6, #29]
   84d36:	b371      	cbz	r1, 84d96 <udi_msc_cbw_received+0x30a>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   84d38:	2922      	cmp	r1, #34	; 0x22
   84d3a:	d05b      	beq.n	84df4 <udi_msc_cbw_received+0x368>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   84d3c:	7fb2      	ldrb	r2, [r6, #30]
   84d3e:	b36a      	cbz	r2, 84d9c <udi_msc_cbw_received+0x310>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   84d40:	2a22      	cmp	r2, #34	; 0x22
   84d42:	d05a      	beq.n	84dfa <udi_msc_cbw_received+0x36e>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   84d44:	7ff3      	ldrb	r3, [r6, #31]
   84d46:	bb63      	cbnz	r3, 84da2 <udi_msc_cbw_received+0x316>
   84d48:	f04f 030f 	mov.w	r3, #15
   84d4c:	e057      	b.n	84dfe <udi_msc_cbw_received+0x372>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
			break;
		}
		i++;
   84d4e:	f04f 0301 	mov.w	r3, #1
   84d52:	e054      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84d54:	f04f 0302 	mov.w	r3, #2
   84d58:	e051      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84d5a:	f04f 0303 	mov.w	r3, #3
   84d5e:	e04e      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84d60:	f04f 0304 	mov.w	r3, #4
   84d64:	e04b      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84d66:	f04f 0305 	mov.w	r3, #5
   84d6a:	e048      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84d6c:	f04f 0306 	mov.w	r3, #6
   84d70:	e045      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84d72:	f04f 0307 	mov.w	r3, #7
   84d76:	e042      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84d78:	f04f 0308 	mov.w	r3, #8
   84d7c:	e03f      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84d7e:	f04f 0309 	mov.w	r3, #9
   84d82:	e03c      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84d84:	f04f 030a 	mov.w	r3, #10
   84d88:	e039      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84d8a:	f04f 030b 	mov.w	r3, #11
   84d8e:	e036      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84d90:	f04f 030c 	mov.w	r3, #12
   84d94:	e033      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84d96:	f04f 030d 	mov.w	r3, #13
   84d9a:	e030      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84d9c:	f04f 030e 	mov.w	r3, #14
   84da0:	e02d      	b.n	84dfe <udi_msc_cbw_received+0x372>

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   84da2:	2b22      	cmp	r3, #34	; 0x22
   84da4:	bf08      	it	eq
   84da6:	230f      	moveq	r3, #15
   84da8:	d029      	beq.n	84dfe <udi_msc_cbw_received+0x372>
   84daa:	e047      	b.n	84e3c <udi_msc_cbw_received+0x3b0>
			break;
		}
		i++;
   84dac:	f04f 0301 	mov.w	r3, #1
   84db0:	e025      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84db2:	f04f 0302 	mov.w	r3, #2
   84db6:	e022      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84db8:	f04f 0303 	mov.w	r3, #3
   84dbc:	e01f      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84dbe:	f04f 0304 	mov.w	r3, #4
   84dc2:	e01c      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84dc4:	f04f 0305 	mov.w	r3, #5
   84dc8:	e019      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84dca:	f04f 0306 	mov.w	r3, #6
   84dce:	e016      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84dd0:	f04f 0307 	mov.w	r3, #7
   84dd4:	e013      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84dd6:	f04f 0308 	mov.w	r3, #8
   84dda:	e010      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84ddc:	f04f 0309 	mov.w	r3, #9
   84de0:	e00d      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84de2:	f04f 030a 	mov.w	r3, #10
   84de6:	e00a      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84de8:	f04f 030b 	mov.w	r3, #11
   84dec:	e007      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84dee:	f04f 030c 	mov.w	r3, #12
   84df2:	e004      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84df4:	f04f 030d 	mov.w	r3, #13
   84df8:	e001      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84dfa:	f04f 030e 	mov.w	r3, #14
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		udi_msc_inquiry_data.product_id[i] = ' ';
   84dfe:	f240 211c 	movw	r1, #540	; 0x21c
   84e02:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84e06:	f04f 0220 	mov.w	r2, #32
   84e0a:	f1c3 050f 	rsb	r5, r3, #15
   84e0e:	f005 0001 	and.w	r0, r5, #1
   84e12:	18cd      	adds	r5, r1, r3
   84e14:	742a      	strb	r2, [r5, #16]
		i++;
   84e16:	f103 0301 	add.w	r3, r3, #1
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   84e1a:	2b10      	cmp	r3, #16
   84e1c:	f040 80f3 	bne.w	85006 <udi_msc_cbw_received+0x57a>
   84e20:	e00c      	b.n	84e3c <udi_msc_cbw_received+0x3b0>
		udi_msc_inquiry_data.product_id[i] = ' ';
   84e22:	18c8      	adds	r0, r1, r3
   84e24:	7402      	strb	r2, [r0, #16]
		i++;
   84e26:	f103 0301 	add.w	r3, r3, #1
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   84e2a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
		udi_msc_inquiry_data.product_id[i] = ' ';
   84e2e:	18c8      	adds	r0, r1, r3
   84e30:	7402      	strb	r2, [r0, #16]
		i++;
   84e32:	f103 0301 	add.w	r3, r3, #1
   84e36:	b2db      	uxtb	r3, r3
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   84e38:	2b10      	cmp	r3, #16
   84e3a:	d1f2      	bne.n	84e22 <udi_msc_cbw_received+0x396>
		udi_msc_inquiry_data.product_id[i] = ' ';
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
   84e3c:	f240 201c 	movw	r0, #540	; 0x21c
   84e40:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84e44:	4621      	mov	r1, r4
   84e46:	f244 72c5 	movw	r2, #18373	; 0x47c5
   84e4a:	f2c0 0208 	movt	r2, #8
   84e4e:	4790      	blx	r2
   84e50:	bd70      	pop	{r4, r5, r6, pc}
	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
		break;

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
   84e52:	f04f 0000 	mov.w	r0, #0
   84e56:	f644 03f1 	movw	r3, #18673	; 0x48f1
   84e5a:	f2c0 0308 	movt	r3, #8
   84e5e:	4798      	blx	r3
		break;
   84e60:	bd70      	pop	{r4, r5, r6, pc}
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
   84e62:	f04f 0001 	mov.w	r0, #1
   84e66:	f644 02f1 	movw	r2, #18673	; 0x48f1
   84e6a:	f2c0 0208 	movt	r2, #8
   84e6e:	4790      	blx	r2
		break;
   84e70:	bd70      	pop	{r4, r5, r6, pc}
}


static bool udi_msc_spc_testunitready_global(void)
{
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
   84e72:	f643 3135 	movw	r1, #15157	; 0x3b35
   84e76:	f2c0 0108 	movt	r1, #8
   84e7a:	4788      	blx	r1
   84e7c:	2802      	cmp	r0, #2
   84e7e:	d009      	beq.n	84e94 <udi_msc_cbw_received+0x408>
   84e80:	2803      	cmp	r0, #3
   84e82:	d001      	beq.n	84e88 <udi_msc_cbw_received+0x3fc>
   84e84:	b190      	cbz	r0, 84eac <udi_msc_cbw_received+0x420>
   84e86:	e00b      	b.n	84ea0 <udi_msc_cbw_received+0x414>
	case CTRL_GOOD:
		return true;	// Don't change sense data
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   84e88:	f244 6381 	movw	r3, #18049	; 0x4681
   84e8c:	f2c0 0308 	movt	r3, #8
   84e90:	4798      	blx	r3
   84e92:	e010      	b.n	84eb6 <udi_msc_cbw_received+0x42a>
		break;
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   84e94:	f244 619d 	movw	r1, #18077	; 0x469d
   84e98:	f2c0 0108 	movt	r1, #8
   84e9c:	4788      	blx	r1
   84e9e:	e00a      	b.n	84eb6 <udi_msc_cbw_received+0x42a>
		break;
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
   84ea0:	f244 60b9 	movw	r0, #18105	; 0x46b9
   84ea4:	f2c0 0008 	movt	r0, #8
   84ea8:	4780      	blx	r0
   84eaa:	e004      	b.n	84eb6 <udi_msc_cbw_received+0x42a>

static void udi_msc_spc_testunitready(void)
{
	if (udi_msc_spc_testunitready_global()) {
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
   84eac:	f244 621d 	movw	r2, #17949	; 0x461d
   84eb0:	f2c0 0208 	movt	r2, #8
   84eb4:	4790      	blx	r2
	}
	// Send status in CSW packet
	udi_msc_csw_process();
   84eb6:	f244 7035 	movw	r0, #18229	; 0x4735
   84eba:	f2c0 0008 	movt	r0, #8
   84ebe:	4780      	blx	r0
   84ec0:	bd70      	pop	{r4, r5, r6, pc}

static void udi_msc_sbc_read_capacity(void)
{
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
   84ec2:	f04f 0008 	mov.w	r0, #8
   84ec6:	f04f 0180 	mov.w	r1, #128	; 0x80
   84eca:	f244 7381 	movw	r3, #18305	; 0x4781
   84ece:	f2c0 0308 	movt	r3, #8
   84ed2:	4798      	blx	r3
   84ed4:	2800      	cmp	r0, #0
   84ed6:	f000 8095 	beq.w	85004 <udi_msc_cbw_received+0x578>
					USB_CBW_DIRECTION_IN))
		return;

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
   84eda:	f241 5048 	movw	r0, #5448	; 0x1548
   84ede:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84ee2:	7b40      	ldrb	r0, [r0, #13]
   84ee4:	f241 51a0 	movw	r1, #5536	; 0x15a0
   84ee8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84eec:	f643 324d 	movw	r2, #15181	; 0x3b4d
   84ef0:	f2c0 0208 	movt	r2, #8
   84ef4:	4790      	blx	r2
   84ef6:	2802      	cmp	r0, #2
   84ef8:	d008      	beq.n	84f0c <udi_msc_cbw_received+0x480>
   84efa:	2803      	cmp	r0, #3
   84efc:	d001      	beq.n	84f02 <udi_msc_cbw_received+0x476>
   84efe:	b178      	cbz	r0, 84f20 <udi_msc_cbw_received+0x494>
   84f00:	e009      	b.n	84f16 <udi_msc_cbw_received+0x48a>
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   84f02:	4847      	ldr	r0, [pc, #284]	; (85020 <udi_msc_cbw_received+0x594>)
   84f04:	4780      	blx	r0
		udi_msc_csw_process();
   84f06:	4947      	ldr	r1, [pc, #284]	; (85024 <udi_msc_cbw_received+0x598>)
   84f08:	4788      	blx	r1
   84f0a:	bd70      	pop	{r4, r5, r6, pc}
		return;
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   84f0c:	4b46      	ldr	r3, [pc, #280]	; (85028 <udi_msc_cbw_received+0x59c>)
   84f0e:	4798      	blx	r3
		udi_msc_csw_process();
   84f10:	4a44      	ldr	r2, [pc, #272]	; (85024 <udi_msc_cbw_received+0x598>)
   84f12:	4790      	blx	r2
   84f14:	bd70      	pop	{r4, r5, r6, pc}
		return;
	default:
		udi_msc_sense_fail_hardware();
   84f16:	4945      	ldr	r1, [pc, #276]	; (8502c <udi_msc_cbw_received+0x5a0>)
   84f18:	4788      	blx	r1
		udi_msc_csw_process();
   84f1a:	4b42      	ldr	r3, [pc, #264]	; (85024 <udi_msc_cbw_received+0x598>)
   84f1c:	4798      	blx	r3
   84f1e:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
   84f20:	4843      	ldr	r0, [pc, #268]	; (85030 <udi_msc_cbw_received+0x5a4>)
   84f22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   84f26:	6042      	str	r2, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
   84f28:	6801      	ldr	r1, [r0, #0]
   84f2a:	ba0b      	rev	r3, r1
   84f2c:	6003      	str	r3, [r0, #0]
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
   84f2e:	f04f 0108 	mov.w	r1, #8
   84f32:	4a40      	ldr	r2, [pc, #256]	; (85034 <udi_msc_cbw_received+0x5a8>)
   84f34:	4790      	blx	r2
   84f36:	bd70      	pop	{r4, r5, r6, pc}
}


static void udi_msc_sbc_start_stop(void)
{
	bool start = 0x1 & udi_msc_cbw.CDB[4];
   84f38:	f241 5148 	movw	r1, #5448	; 0x1548
   84f3c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84f40:	7ccb      	ldrb	r3, [r1, #19]
	bool loej = 0x2 & udi_msc_cbw.CDB[4];
	if (loej) {
   84f42:	f003 0202 	and.w	r2, r3, #2
   84f46:	b2d1      	uxtb	r1, r2
   84f48:	b141      	cbz	r1, 84f5c <udi_msc_cbw_received+0x4d0>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
   84f4a:	f083 0301 	eor.w	r3, r3, #1
   84f4e:	f003 0101 	and.w	r1, r3, #1
   84f52:	f643 3265 	movw	r2, #15205	; 0x3b65
   84f56:	f2c0 0208 	movt	r2, #8
   84f5a:	4790      	blx	r2
	}
	udi_msc_sense_pass();
   84f5c:	f244 601d 	movw	r0, #17949	; 0x461d
   84f60:	f2c0 0008 	movt	r0, #8
   84f64:	4780      	blx	r0
	udi_msc_csw_process();
   84f66:	f244 7135 	movw	r1, #18229	; 0x4735
   84f6a:	f2c0 0108 	movt	r1, #8
   84f6e:	4788      	blx	r1
   84f70:	bd70      	pop	{r4, r5, r6, pc}
}


static void udi_msc_spc_prevent_allow_medium_removal(void)
{
	uint8_t prevent = udi_msc_cbw.CDB[4];
   84f72:	f241 5048 	movw	r0, #5448	; 0x1548
   84f76:	f2c2 0007 	movt	r0, #8199	; 0x2007
	if (0 == prevent) {
   84f7a:	7cc1      	ldrb	r1, [r0, #19]
   84f7c:	b929      	cbnz	r1, 84f8a <udi_msc_cbw_received+0x4fe>
		udi_msc_sense_pass();
   84f7e:	f244 621d 	movw	r2, #17949	; 0x461d
   84f82:	f2c0 0208 	movt	r2, #8
   84f86:	4790      	blx	r2
   84f88:	e004      	b.n	84f94 <udi_msc_cbw_received+0x508>
	} else {
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
   84f8a:	f244 63d1 	movw	r3, #18129	; 0x46d1
   84f8e:	f2c0 0308 	movt	r3, #8
   84f92:	4798      	blx	r3
	}
	udi_msc_csw_process();
   84f94:	f244 7035 	movw	r0, #18229	; 0x4735
   84f98:	f2c0 0008 	movt	r0, #8
   84f9c:	4780      	blx	r0
   84f9e:	bd70      	pop	{r4, r5, r6, pc}
		udi_msc_spc_prevent_allow_medium_removal();
		break;

		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
   84fa0:	f244 601d 	movw	r0, #17949	; 0x461d
   84fa4:	f2c0 0008 	movt	r0, #8
   84fa8:	4780      	blx	r0
		udi_msc_csw_process();
   84faa:	f244 7135 	movw	r1, #18229	; 0x4735
   84fae:	f2c0 0108 	movt	r1, #8
   84fb2:	4788      	blx	r1
		break;
   84fb4:	bd70      	pop	{r4, r5, r6, pc}

	case SBC_READ10:
		udi_msc_sbc_trans(true);
   84fb6:	f04f 0001 	mov.w	r0, #1
   84fba:	f644 12e9 	movw	r2, #18921	; 0x49e9
   84fbe:	f2c0 0208 	movt	r2, #8
   84fc2:	4790      	blx	r2
		break;
   84fc4:	bd70      	pop	{r4, r5, r6, pc}

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
   84fc6:	f04f 0000 	mov.w	r0, #0
   84fca:	f644 13e9 	movw	r3, #18921	; 0x49e9
   84fce:	f2c0 0308 	movt	r3, #8
   84fd2:	4798      	blx	r3
		break;
   84fd4:	bd70      	pop	{r4, r5, r6, pc}
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}

static void udi_msc_sense_command_invalid(void)
{
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
   84fd6:	f04f 0005 	mov.w	r0, #5
   84fda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   84fde:	f04f 0200 	mov.w	r2, #0
   84fe2:	f244 6339 	movw	r3, #17977	; 0x4639
   84fe6:	f2c0 0308 	movt	r3, #8
   84fea:	4798      	blx	r3
		udi_msc_sbc_trans(false);
		break;

	default:
		udi_msc_sense_command_invalid();
		udi_msc_csw_process();
   84fec:	f244 7235 	movw	r2, #18229	; 0x4735
   84ff0:	f2c0 0208 	movt	r2, #8
   84ff4:	4790      	blx	r2
		break;
   84ff6:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
   84ff8:	f04f 0300 	mov.w	r3, #0
   84ffc:	e6ff      	b.n	84dfe <udi_msc_cbw_received+0x372>
   84ffe:	f04f 0300 	mov.w	r3, #0
   85002:	e6fc      	b.n	84dfe <udi_msc_cbw_received+0x372>
   85004:	bd70      	pop	{r4, r5, r6, pc}
   85006:	b240      	sxtb	r0, r0
   85008:	2800      	cmp	r0, #0
   8500a:	f43f af0a 	beq.w	84e22 <udi_msc_cbw_received+0x396>
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		udi_msc_inquiry_data.product_id[i] = ' ';
   8500e:	18c8      	adds	r0, r1, r3
   85010:	7402      	strb	r2, [r0, #16]
		i++;
   85012:	f103 0301 	add.w	r3, r3, #1
   85016:	b2db      	uxtb	r3, r3
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   85018:	2b10      	cmp	r3, #16
   8501a:	f47f af02 	bne.w	84e22 <udi_msc_cbw_received+0x396>
   8501e:	e70d      	b.n	84e3c <udi_msc_cbw_received+0x3b0>
   85020:	00084681 	.word	0x00084681
   85024:	00084735 	.word	0x00084735
   85028:	0008469d 	.word	0x0008469d
   8502c:	000846b9 	.word	0x000846b9
   85030:	200715a0 	.word	0x200715a0
   85034:	000847c5 	.word	0x000847c5

00085038 <udi_msc_setup>:
	UDI_MSC_DISABLE_EXT();
}


bool udi_msc_setup(void)
{
   85038:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
   8503a:	f641 338c 	movw	r3, #7052	; 0x1b8c
   8503e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85042:	7818      	ldrb	r0, [r3, #0]
   85044:	f010 0f80 	tst.w	r0, #128	; 0x80
   85048:	d025      	beq.n	85096 <udi_msc_setup+0x5e>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8504a:	f000 0260 	and.w	r2, r0, #96	; 0x60
   8504e:	2a20      	cmp	r2, #32
   85050:	d156      	bne.n	85100 <udi_msc_setup+0xc8>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   85052:	f641 338c 	movw	r3, #7052	; 0x1b8c
   85056:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8505a:	7858      	ldrb	r0, [r3, #1]
   8505c:	28fe      	cmp	r0, #254	; 0xfe
   8505e:	d152      	bne.n	85106 <udi_msc_setup+0xce>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
   85060:	f641 318c 	movw	r1, #7052	; 0x1b8c
   85064:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85068:	88ca      	ldrh	r2, [r1, #6]
   8506a:	2a01      	cmp	r2, #1
   8506c:	d14e      	bne.n	8510c <udi_msc_setup+0xd4>
					return false;	// Error for USB host
				if (0 != udd_g_ctrlreq.req.wValue)
   8506e:	f641 338c 	movw	r3, #7052	; 0x1b8c
   85072:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85076:	8858      	ldrh	r0, [r3, #2]
   85078:	2800      	cmp	r0, #0
   8507a:	d14a      	bne.n	85112 <udi_msc_setup+0xda>
					return false;
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
   8507c:	f641 318c 	movw	r1, #7052	; 0x1b8c
   85080:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85084:	f241 5240 	movw	r2, #5440	; 0x1540
   85088:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8508c:	608a      	str	r2, [r1, #8]
				udd_g_ctrlreq.payload_size = 1;
   8508e:	f04f 0001 	mov.w	r0, #1
   85092:	8188      	strh	r0, [r1, #12]
				return true;
   85094:	bd10      	pop	{r4, pc}
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   85096:	f000 0160 	and.w	r1, r0, #96	; 0x60
   8509a:	2920      	cmp	r1, #32
   8509c:	d13c      	bne.n	85118 <udi_msc_setup+0xe0>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   8509e:	f641 328c 	movw	r2, #7052	; 0x1b8c
   850a2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   850a6:	7853      	ldrb	r3, [r2, #1]
   850a8:	2bff      	cmp	r3, #255	; 0xff
   850aa:	d138      	bne.n	8511e <udi_msc_setup+0xe6>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
   850ac:	f641 308c 	movw	r0, #7052	; 0x1b8c
   850b0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   850b4:	88c1      	ldrh	r1, [r0, #6]
   850b6:	2900      	cmp	r1, #0
   850b8:	d134      	bne.n	85124 <udi_msc_setup+0xec>
					return false;
				if (0 != udd_g_ctrlreq.req.wValue)
   850ba:	f641 328c 	movw	r2, #7052	; 0x1b8c
   850be:	f2c2 0207 	movt	r2, #8199	; 0x2007
   850c2:	8853      	ldrh	r3, [r2, #2]
   850c4:	2b00      	cmp	r3, #0
   850c6:	d130      	bne.n	8512a <udi_msc_setup+0xf2>
					return false;
				udi_msc_b_cbw_invalid = false;
   850c8:	f241 5468 	movw	r4, #5480	; 0x1568
   850cc:	f2c2 0407 	movt	r4, #8199	; 0x2007
   850d0:	7023      	strb	r3, [r4, #0]
				udi_msc_b_trans_req = false;
   850d2:	f241 5044 	movw	r0, #5444	; 0x1544
   850d6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   850da:	7003      	strb	r3, [r0, #0]
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
   850dc:	f04f 0002 	mov.w	r0, #2
   850e0:	f248 2415 	movw	r4, #33301	; 0x8215
   850e4:	f2c0 0408 	movt	r4, #8
   850e8:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
   850ea:	f04f 0081 	mov.w	r0, #129	; 0x81
   850ee:	47a0      	blx	r4
				// Restart by CBW wait
				udi_msc_cbw_wait();
   850f0:	f644 0131 	movw	r1, #18481	; 0x4831
   850f4:	f2c0 0108 	movt	r1, #8
   850f8:	4788      	blx	r1
				return true;
   850fa:	f04f 0001 	mov.w	r0, #1
   850fe:	bd10      	pop	{r4, pc}
			}
		}
	}
	return false;	// Not supported request
   85100:	f04f 0000 	mov.w	r0, #0
   85104:	bd10      	pop	{r4, pc}
   85106:	f04f 0000 	mov.w	r0, #0
   8510a:	bd10      	pop	{r4, pc}
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
   8510c:	f04f 0000 	mov.w	r0, #0
   85110:	bd10      	pop	{r4, pc}
				if (0 != udd_g_ctrlreq.req.wValue)
					return false;
   85112:	f04f 0000 	mov.w	r0, #0
   85116:	bd10      	pop	{r4, pc}
				udi_msc_cbw_wait();
				return true;
			}
		}
	}
	return false;	// Not supported request
   85118:	f04f 0000 	mov.w	r0, #0
   8511c:	bd10      	pop	{r4, pc}
   8511e:	f04f 0000 	mov.w	r0, #0
   85122:	bd10      	pop	{r4, pc}
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
   85124:	f04f 0000 	mov.w	r0, #0
   85128:	bd10      	pop	{r4, pc}
				if (0 != udd_g_ctrlreq.req.wValue)
					return false;
   8512a:	f04f 0000 	mov.w	r0, #0
				return true;
			}
		}
	}
	return false;	// Not supported request
}
   8512e:	bd10      	pop	{r4, pc}

00085130 <udi_msc_disable>:
	return true;
}


void udi_msc_disable(void)
{
   85130:	b508      	push	{r3, lr}
	udi_msc_b_trans_req = false;
   85132:	f241 5344 	movw	r3, #5444	; 0x1544
   85136:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8513a:	f04f 0200 	mov.w	r2, #0
   8513e:	701a      	strb	r2, [r3, #0]
	UDI_MSC_DISABLE_EXT();
   85140:	f648 0059 	movw	r0, #34905	; 0x8859
   85144:	f2c0 0008 	movt	r0, #8
   85148:	4780      	blx	r0
   8514a:	bd08      	pop	{r3, pc}

0008514c <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
   8514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t lun;
	udi_msc_b_trans_req = false;
   8514e:	f04f 0300 	mov.w	r3, #0
   85152:	f241 5244 	movw	r2, #5444	; 0x1544
   85156:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8515a:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
   8515c:	f241 5068 	movw	r0, #5480	; 0x1568
   85160:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85164:	7003      	strb	r3, [r0, #0]
	udi_msc_nb_lun = get_nb_lun();
   85166:	f643 312d 	movw	r1, #15149	; 0x3b2d
   8516a:	f2c0 0108 	movt	r1, #8
   8516e:	4788      	blx	r1
	if (0 == udi_msc_nb_lun)
   85170:	b928      	cbnz	r0, 8517e <udi_msc_enable+0x32>
bool udi_msc_enable(void)
{
	uint8_t lun;
	udi_msc_b_trans_req = false;
	udi_msc_b_cbw_invalid = false;
	udi_msc_nb_lun = get_nb_lun();
   85172:	f241 5240 	movw	r2, #5440	; 0x1540
   85176:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8517a:	7010      	strb	r0, [r2, #0]
   8517c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (0 == udi_msc_nb_lun)
		return false; // No lun available, then not authorize to enable interface
	udi_msc_nb_lun--;
   8517e:	f100 30ff 	add.w	r0, r0, #4294967295
   85182:	f241 5240 	movw	r2, #5440	; 0x1540
   85186:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8518a:	7010      	strb	r0, [r2, #0]
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
   8518c:	f648 0149 	movw	r1, #34889	; 0x8849
   85190:	f2c0 0108 	movt	r1, #8
   85194:	4788      	blx	r1
   85196:	b1d8      	cbz	r0, 851d0 <udi_msc_enable+0x84>
   85198:	f04f 0400 	mov.w	r4, #0
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
		mem_unload(lun, false);
   8519c:	4627      	mov	r7, r4
   8519e:	f643 3665 	movw	r6, #15205	; 0x3b65
   851a2:	f2c0 0608 	movt	r6, #8
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
   851a6:	f241 5540 	movw	r5, #5440	; 0x1540
   851aa:	f2c2 0507 	movt	r5, #8199	; 0x2007
		mem_unload(lun, false);
   851ae:	4620      	mov	r0, r4
   851b0:	4639      	mov	r1, r7
   851b2:	47b0      	blx	r6
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
   851b4:	f104 0401 	add.w	r4, r4, #1
   851b8:	b2e4      	uxtb	r4, r4
   851ba:	782b      	ldrb	r3, [r5, #0]
   851bc:	42a3      	cmp	r3, r4
   851be:	d2f6      	bcs.n	851ae <udi_msc_enable+0x62>
		mem_unload(lun, false);
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
   851c0:	f644 0031 	movw	r0, #18481	; 0x4831
   851c4:	f2c0 0008 	movt	r0, #8
   851c8:	4780      	blx	r0
	return true;
   851ca:	f04f 0001 	mov.w	r0, #1
   851ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // No lun available, then not authorize to enable interface
	udi_msc_nb_lun--;
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
   851d0:	f04f 0000 	mov.w	r0, #0
		mem_unload(lun, false);
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
	return true;
}
   851d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   851d6:	bf00      	nop

000851d8 <udi_msc_process_trans>:
	UDI_MSC_NOTIFY_TRANS_EXT();
}


bool udi_msc_process_trans(void)
{
   851d8:	b508      	push	{r3, lr}
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
   851da:	f241 5344 	movw	r3, #5444	; 0x1544
   851de:	f2c2 0307 	movt	r3, #8199	; 0x2007
   851e2:	7818      	ldrb	r0, [r3, #0]
   851e4:	2800      	cmp	r0, #0
   851e6:	d059      	beq.n	8529c <udi_msc_process_trans+0xc4>
		return false;	// No Transfer request to do
	udi_msc_b_trans_req = false;
   851e8:	f241 5144 	movw	r1, #5444	; 0x1544
   851ec:	f2c2 0107 	movt	r1, #8199	; 0x2007
   851f0:	f04f 0200 	mov.w	r2, #0
   851f4:	700a      	strb	r2, [r1, #0]

	// Start transfer
	if (udi_msc_b_read) {
   851f6:	f241 539c 	movw	r3, #5532	; 0x159c
   851fa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   851fe:	7818      	ldrb	r0, [r3, #0]
   85200:	b1a0      	cbz	r0, 8522c <udi_msc_process_trans+0x54>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
   85202:	f241 5048 	movw	r0, #5448	; 0x1548
   85206:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8520a:	7b40      	ldrb	r0, [r0, #13]
   8520c:	f241 5184 	movw	r1, #5508	; 0x1584
   85210:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85214:	6809      	ldr	r1, [r1, #0]
   85216:	f241 5280 	movw	r2, #5504	; 0x1580
   8521a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8521e:	8812      	ldrh	r2, [r2, #0]
   85220:	f643 33b9 	movw	r3, #15289	; 0x3bb9
   85224:	f2c0 0308 	movt	r3, #8
   85228:	4798      	blx	r3
   8522a:	e013      	b.n	85254 <udi_msc_process_trans+0x7c>
				udi_msc_nb_block);
	} else {
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
   8522c:	f241 5148 	movw	r1, #5448	; 0x1548
   85230:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85234:	7b48      	ldrb	r0, [r1, #13]
   85236:	f241 5284 	movw	r2, #5508	; 0x1584
   8523a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8523e:	6811      	ldr	r1, [r2, #0]
   85240:	f241 5380 	movw	r3, #5504	; 0x1580
   85244:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85248:	881a      	ldrh	r2, [r3, #0]
   8524a:	f643 33f1 	movw	r3, #15345	; 0x3bf1
   8524e:	f2c0 0308 	movt	r3, #8
   85252:	4798      	blx	r3
				udi_msc_nb_block);
	}

	// Check status of transfer
	switch (status) {
   85254:	2802      	cmp	r0, #2
   85256:	d00e      	beq.n	85276 <udi_msc_process_trans+0x9e>
   85258:	2803      	cmp	r0, #3
   8525a:	d006      	beq.n	8526a <udi_msc_process_trans+0x92>
   8525c:	b988      	cbnz	r0, 85282 <udi_msc_process_trans+0xaa>
	case CTRL_GOOD:
		udi_msc_sense_pass();
   8525e:	f244 611d 	movw	r1, #17949	; 0x461d
   85262:	f2c0 0108 	movt	r1, #8
   85266:	4788      	blx	r1
		break;
   85268:	e010      	b.n	8528c <udi_msc_process_trans+0xb4>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   8526a:	f244 6281 	movw	r2, #18049	; 0x4681
   8526e:	f2c0 0208 	movt	r2, #8
   85272:	4790      	blx	r2
		break;
   85274:	e00a      	b.n	8528c <udi_msc_process_trans+0xb4>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   85276:	f244 639d 	movw	r3, #18077	; 0x469d
   8527a:	f2c0 0308 	movt	r3, #8
   8527e:	4798      	blx	r3
		break;
   85280:	e004      	b.n	8528c <udi_msc_process_trans+0xb4>
	default:
	case CTRL_FAIL:
		udi_msc_sense_fail_hardware();
   85282:	f244 60b9 	movw	r0, #18105	; 0x46b9
   85286:	f2c0 0008 	movt	r0, #8
   8528a:	4780      	blx	r0
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
   8528c:	f244 7035 	movw	r0, #18229	; 0x4735
   85290:	f2c0 0008 	movt	r0, #8
   85294:	4780      	blx	r0
	return true;
   85296:	f04f 0001 	mov.w	r0, #1
   8529a:	bd08      	pop	{r3, pc}
bool udi_msc_process_trans(void)
{
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
		return false;	// No Transfer request to do
   8529c:	f04f 0000 	mov.w	r0, #0
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
	return true;
}
   852a0:	bd08      	pop	{r3, pc}
   852a2:	bf00      	nop

000852a4 <udi_msc_trans_block>:
}


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
   852a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   852a6:	b083      	sub	sp, #12
   852a8:	460f      	mov	r7, r1
   852aa:	4615      	mov	r5, r2
	if (!udi_msc_b_ack_trans)
   852ac:	f240 2404 	movw	r4, #516	; 0x204
   852b0:	f2c2 0407 	movt	r4, #8199	; 0x2007
   852b4:	7824      	ldrb	r4, [r4, #0]
   852b6:	2c00      	cmp	r4, #0
   852b8:	d03d      	beq.n	85336 <udi_msc_trans_block+0x92>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
   852ba:	f240 2104 	movw	r1, #516	; 0x204
   852be:	f2c2 0107 	movt	r1, #8199	; 0x2007
   852c2:	f04f 0600 	mov.w	r6, #0
   852c6:	700e      	strb	r6, [r1, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
   852c8:	42b0      	cmp	r0, r6
   852ca:	bf0c      	ite	eq
   852cc:	2002      	moveq	r0, #2
   852ce:	2081      	movne	r0, #129	; 0x81
   852d0:	2b00      	cmp	r3, #0
   852d2:	d141      	bne.n	85358 <udi_msc_trans_block+0xb4>
   852d4:	e035      	b.n	85342 <udi_msc_trans_block+0x9e>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
   852d6:	f240 2304 	movw	r3, #516	; 0x204
   852da:	f2c2 0307 	movt	r3, #8199	; 0x2007
   852de:	f04f 0001 	mov.w	r0, #1
   852e2:	7018      	strb	r0, [r3, #0]
		return false;
   852e4:	f04f 0000 	mov.w	r0, #0
   852e8:	e040      	b.n	8536c <udi_msc_trans_block+0xc8>
	}
	if (NULL == callback) {
		while (!udi_msc_b_ack_trans);
   852ea:	f240 2204 	movw	r2, #516	; 0x204
   852ee:	f2c2 0207 	movt	r2, #8199	; 0x2007
   852f2:	7810      	ldrb	r0, [r2, #0]
   852f4:	2800      	cmp	r0, #0
   852f6:	d0fc      	beq.n	852f2 <udi_msc_trans_block+0x4e>
		if (udi_msc_b_abort_trans) {
   852f8:	f641 3189 	movw	r1, #7049	; 0x1b89
   852fc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85300:	780b      	ldrb	r3, [r1, #0]
   85302:	b9db      	cbnz	r3, 8533c <udi_msc_trans_block+0x98>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
   85304:	f240 2040 	movw	r0, #576	; 0x240
   85308:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8530c:	6882      	ldr	r2, [r0, #8]
   8530e:	1b51      	subs	r1, r2, r5
   85310:	6081      	str	r1, [r0, #8]
		return (!udi_msc_b_abort_trans);
   85312:	f641 3389 	movw	r3, #7049	; 0x1b89
   85316:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8531a:	7818      	ldrb	r0, [r3, #0]
   8531c:	f080 0001 	eor.w	r0, r0, #1
   85320:	e024      	b.n	8536c <udi_msc_trans_block+0xc8>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
   85322:	f240 2140 	movw	r1, #576	; 0x240
   85326:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8532a:	688a      	ldr	r2, [r1, #8]
   8532c:	1b55      	subs	r5, r2, r5
   8532e:	608d      	str	r5, [r1, #8]
	return true;
   85330:	f04f 0001 	mov.w	r0, #1
   85334:	e01a      	b.n	8536c <udi_msc_trans_block+0xc8>

bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
	if (!udi_msc_b_ack_trans)
		return false;	// No possible, transfer on going
   85336:	f04f 0000 	mov.w	r0, #0
   8533a:	e017      	b.n	8536c <udi_msc_trans_block+0xc8>
		return false;
	}
	if (NULL == callback) {
		while (!udi_msc_b_ack_trans);
		if (udi_msc_b_abort_trans) {
			return false;
   8533c:	f04f 0000 	mov.w	r0, #0
   85340:	e014      	b.n	8536c <udi_msc_trans_block+0xc8>
	if (!udi_msc_b_ack_trans)
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
   85342:	4b0b      	ldr	r3, [pc, #44]	; (85370 <udi_msc_trans_block+0xcc>)
   85344:	9300      	str	r3, [sp, #0]
   85346:	f04f 0100 	mov.w	r1, #0
   8534a:	463a      	mov	r2, r7
   8534c:	462b      	mov	r3, r5
   8534e:	4c09      	ldr	r4, [pc, #36]	; (85374 <udi_msc_trans_block+0xd0>)
   85350:	47a0      	blx	r4
   85352:	2800      	cmp	r0, #0
   85354:	d1c9      	bne.n	852ea <udi_msc_trans_block+0x46>
   85356:	e7be      	b.n	852d6 <udi_msc_trans_block+0x32>
   85358:	9300      	str	r3, [sp, #0]
   8535a:	f04f 0100 	mov.w	r1, #0
   8535e:	463a      	mov	r2, r7
   85360:	462b      	mov	r3, r5
   85362:	4c04      	ldr	r4, [pc, #16]	; (85374 <udi_msc_trans_block+0xd0>)
   85364:	47a0      	blx	r4
   85366:	2800      	cmp	r0, #0
   85368:	d1db      	bne.n	85322 <udi_msc_trans_block+0x7e>
   8536a:	e7b4      	b.n	852d6 <udi_msc_trans_block+0x32>
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
	return true;
}
   8536c:	b003      	add	sp, #12
   8536e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85370:	000845cd 	.word	0x000845cd
   85374:	00087c0d 	.word	0x00087c0d

00085378 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   85378:	f241 53a8 	movw	r3, #5544	; 0x15a8
   8537c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85380:	6818      	ldr	r0, [r3, #0]
   85382:	6801      	ldr	r1, [r0, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   85384:	884a      	ldrh	r2, [r1, #2]
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
   85386:	1888      	adds	r0, r1, r2
   85388:	4770      	bx	lr
   8538a:	bf00      	nop

0008538c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   8538c:	b538      	push	{r3, r4, r5, lr}
   8538e:	4605      	mov	r5, r0
   85390:	460c      	mov	r4, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   85392:	f245 3379 	movw	r3, #21369	; 0x5379
   85396:	f2c0 0308 	movt	r3, #8
   8539a:	4798      	blx	r3
   8539c:	4602      	mov	r2, r0
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   8539e:	7828      	ldrb	r0, [r5, #0]
   853a0:	1828      	adds	r0, r5, r0
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   853a2:	4282      	cmp	r2, r0
   853a4:	d911      	bls.n	853ca <udc_next_desc_in_iface+0x3e>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   853a6:	7841      	ldrb	r1, [r0, #1]
   853a8:	2904      	cmp	r1, #4
   853aa:	d011      	beq.n	853d0 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   853ac:	42a1      	cmp	r1, r4
   853ae:	d105      	bne.n	853bc <udc_next_desc_in_iface+0x30>
   853b0:	bd38      	pop	{r3, r4, r5, pc}
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   853b2:	7841      	ldrb	r1, [r0, #1]
   853b4:	2904      	cmp	r1, #4
   853b6:	d00e      	beq.n	853d6 <udc_next_desc_in_iface+0x4a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   853b8:	42a1      	cmp	r1, r4
   853ba:	d00e      	beq.n	853da <udc_next_desc_in_iface+0x4e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   853bc:	7803      	ldrb	r3, [r0, #0]
   853be:	18c0      	adds	r0, r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   853c0:	4282      	cmp	r2, r0
   853c2:	d8f6      	bhi.n	853b2 <udc_next_desc_in_iface+0x26>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
   853c4:	f04f 0000 	mov.w	r0, #0
   853c8:	bd38      	pop	{r3, r4, r5, pc}
   853ca:	f04f 0000 	mov.w	r0, #0
   853ce:	bd38      	pop	{r3, r4, r5, pc}
   853d0:	f04f 0000 	mov.w	r0, #0
   853d4:	bd38      	pop	{r3, r4, r5, pc}
   853d6:	f04f 0000 	mov.w	r0, #0
}
   853da:	bd38      	pop	{r3, r4, r5, pc}

000853dc <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   853dc:	b570      	push	{r4, r5, r6, lr}
   853de:	4605      	mov	r5, r0
   853e0:	460e      	mov	r6, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   853e2:	f241 53b2 	movw	r3, #5554	; 0x15b2
   853e6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   853ea:	7818      	ldrb	r0, [r3, #0]
   853ec:	2800      	cmp	r0, #0
   853ee:	d031      	beq.n	85454 <udc_update_iface_desc+0x78>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   853f0:	f241 51a8 	movw	r1, #5544	; 0x15a8
   853f4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   853f8:	680a      	ldr	r2, [r1, #0]
   853fa:	6814      	ldr	r4, [r2, #0]
   853fc:	7923      	ldrb	r3, [r4, #4]
   853fe:	42ab      	cmp	r3, r5
   85400:	d92b      	bls.n	8545a <udc_update_iface_desc+0x7e>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   85402:	f241 50b4 	movw	r0, #5556	; 0x15b4
   85406:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8540a:	6004      	str	r4, [r0, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   8540c:	f245 3179 	movw	r1, #21369	; 0x5379
   85410:	f2c0 0108 	movt	r1, #8
   85414:	4788      	blx	r1
	while (ptr_end_desc >
   85416:	4284      	cmp	r4, r0
   85418:	d222      	bcs.n	85460 <udc_update_iface_desc+0x84>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   8541a:	7862      	ldrb	r2, [r4, #1]
   8541c:	2a04      	cmp	r2, #4
   8541e:	d10d      	bne.n	8543c <udc_update_iface_desc+0x60>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   85420:	78a3      	ldrb	r3, [r4, #2]
   85422:	42ab      	cmp	r3, r5
   85424:	d10a      	bne.n	8543c <udc_update_iface_desc+0x60>
   85426:	78e1      	ldrb	r1, [r4, #3]
   85428:	42b1      	cmp	r1, r6
   8542a:	d107      	bne.n	8543c <udc_update_iface_desc+0x60>
   8542c:	f241 53b4 	movw	r3, #5556	; 0x15b4
   85430:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85434:	601c      	str	r4, [r3, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
   85436:	f04f 0001 	mov.w	r0, #1
   8543a:	bd70      	pop	{r4, r5, r6, pc}
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   8543c:	7822      	ldrb	r2, [r4, #0]
   8543e:	18a4      	adds	r4, r4, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
   85440:	42a0      	cmp	r0, r4
   85442:	d8ea      	bhi.n	8541a <udc_update_iface_desc+0x3e>
   85444:	f241 50b4 	movw	r0, #5556	; 0x15b4
   85448:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8544c:	6004      	str	r4, [r0, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   8544e:	f04f 0000 	mov.w	r0, #0
   85452:	bd70      	pop	{r4, r5, r6, pc}
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
   85454:	f04f 0000 	mov.w	r0, #0
   85458:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   8545a:	f04f 0000 	mov.w	r0, #0
   8545e:	bd70      	pop	{r4, r5, r6, pc}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   85460:	f04f 0000 	mov.w	r0, #0
}
   85464:	bd70      	pop	{r4, r5, r6, pc}
   85466:	bf00      	nop

00085468 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   85468:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   8546a:	f641 338c 	movw	r3, #7052	; 0x1b8c
   8546e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85472:	8858      	ldrh	r0, [r3, #2]
   85474:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   85478:	f647 1105 	movw	r1, #30981	; 0x7905
   8547c:	f2c0 0108 	movt	r1, #8
   85480:	4788      	blx	r1
   85482:	bd08      	pop	{r3, pc}

00085484 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   85484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85488:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   8548a:	f245 33dd 	movw	r3, #21469	; 0x53dd
   8548e:	f2c0 0308 	movt	r3, #8
   85492:	4798      	blx	r3
   85494:	b338      	cbz	r0, 854e6 <udc_iface_enable+0x62>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   85496:	f241 50b4 	movw	r0, #5556	; 0x15b4
   8549a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8549e:	6804      	ldr	r4, [r0, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   854a0:	f04f 0605 	mov.w	r6, #5
   854a4:	f245 358d 	movw	r5, #21389	; 0x538d
   854a8:	f2c0 0508 	movt	r5, #8
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   854ac:	f647 5711 	movw	r7, #32017	; 0x7d11
   854b0:	f2c0 0708 	movt	r7, #8

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   854b4:	4620      	mov	r0, r4
   854b6:	4631      	mov	r1, r6
   854b8:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   854ba:	4604      	mov	r4, r0
   854bc:	b138      	cbz	r0, 854ce <udc_iface_enable+0x4a>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   854be:	7880      	ldrb	r0, [r0, #2]
   854c0:	78e1      	ldrb	r1, [r4, #3]
   854c2:	88a2      	ldrh	r2, [r4, #4]
   854c4:	47b8      	blx	r7
   854c6:	2800      	cmp	r0, #0
   854c8:	d1f4      	bne.n	854b4 <udc_iface_enable+0x30>
   854ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   854ce:	f241 51a8 	movw	r1, #5544	; 0x15a8
   854d2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   854d6:	680a      	ldr	r2, [r1, #0]
   854d8:	6853      	ldr	r3, [r2, #4]
   854da:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
   854de:	6801      	ldr	r1, [r0, #0]
   854e0:	4788      	blx	r1
   854e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
		return false;
   854e6:	f04f 0000 	mov.w	r0, #0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
   854ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   854ee:	bf00      	nop

000854f0 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   854f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   854f4:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   854f6:	f04f 0100 	mov.w	r1, #0
   854fa:	f245 33dd 	movw	r3, #21469	; 0x53dd
   854fe:	f2c0 0308 	movt	r3, #8
   85502:	4798      	blx	r3
   85504:	2800      	cmp	r0, #0
   85506:	d030      	beq.n	8556a <udc_iface_disable+0x7a>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   85508:	f241 50a8 	movw	r0, #5544	; 0x15a8
   8550c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85510:	6801      	ldr	r1, [r0, #0]
   85512:	684a      	ldr	r2, [r1, #4]
   85514:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   85518:	f8d8 300c 	ldr.w	r3, [r8, #12]
   8551c:	4798      	blx	r3
   8551e:	4601      	mov	r1, r0
   85520:	4620      	mov	r0, r4
   85522:	f245 32dd 	movw	r2, #21469	; 0x53dd
   85526:	f2c0 0208 	movt	r2, #8
   8552a:	4790      	blx	r2
   8552c:	b308      	cbz	r0, 85572 <udc_iface_disable+0x82>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   8552e:	f241 54b4 	movw	r4, #5556	; 0x15b4
   85532:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85536:	6824      	ldr	r4, [r4, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   85538:	f04f 0605 	mov.w	r6, #5
   8553c:	f245 358d 	movw	r5, #21389	; 0x538d
   85540:	f2c0 0508 	movt	r5, #8
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   85544:	f647 1775 	movw	r7, #31093	; 0x7975
   85548:	f2c0 0708 	movt	r7, #8
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   8554c:	4620      	mov	r0, r4
   8554e:	4631      	mov	r1, r6
   85550:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   85552:	4604      	mov	r4, r0
   85554:	b110      	cbz	r0, 8555c <udc_iface_disable+0x6c>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   85556:	7880      	ldrb	r0, [r0, #2]
   85558:	47b8      	blx	r7
		}
   8555a:	e7f7      	b.n	8554c <udc_iface_disable+0x5c>
	}
#endif

	// Disable interface
	udi_api->disable();
   8555c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   85560:	4780      	blx	r0
	return true;
   85562:	f04f 0001 	mov.w	r0, #1
   85566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
   8556a:	f04f 0000 	mov.w	r0, #0
   8556e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
		return false;
   85572:	f04f 0000 	mov.w	r0, #0
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
   85576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8557a:	bf00      	nop

0008557c <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   8557c:	b508      	push	{r3, lr}
	udd_enable();
   8557e:	f646 23ad 	movw	r3, #27309	; 0x6aad
   85582:	f2c0 0308 	movt	r3, #8
   85586:	4798      	blx	r3
   85588:	bd08      	pop	{r3, pc}
   8558a:	bf00      	nop

0008558c <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   8558c:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   8558e:	f241 53b2 	movw	r3, #5554	; 0x15b2
   85592:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85596:	7818      	ldrb	r0, [r3, #0]
   85598:	b1d8      	cbz	r0, 855d2 <udc_reset+0x46>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8559a:	f241 51a8 	movw	r1, #5544	; 0x15a8
   8559e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   855a2:	680a      	ldr	r2, [r1, #0]
   855a4:	6813      	ldr	r3, [r2, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   855a6:	7918      	ldrb	r0, [r3, #4]
   855a8:	b198      	cbz	r0, 855d2 <udc_reset+0x46>
   855aa:	f04f 0400 	mov.w	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   855ae:	f245 46f1 	movw	r6, #21745	; 0x54f1
   855b2:	f2c0 0608 	movt	r6, #8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   855b6:	f241 55a8 	movw	r5, #5544	; 0x15a8
   855ba:	f2c2 0507 	movt	r5, #8199	; 0x2007
				iface_num++) {
			udc_iface_disable(iface_num);
   855be:	4620      	mov	r0, r4
   855c0:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   855c2:	f104 0401 	add.w	r4, r4, #1
   855c6:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   855c8:	6829      	ldr	r1, [r5, #0]
   855ca:	680a      	ldr	r2, [r1, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   855cc:	7913      	ldrb	r3, [r2, #4]
   855ce:	42a3      	cmp	r3, r4
   855d0:	d8f5      	bhi.n	855be <udc_reset+0x32>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
   855d2:	f241 50b2 	movw	r0, #5554	; 0x15b2
   855d6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   855da:	f04f 0100 	mov.w	r1, #0
   855de:	7001      	strb	r1, [r0, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   855e0:	f241 53b0 	movw	r3, #5552	; 0x15b0
   855e4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   855e8:	f04f 0201 	mov.w	r2, #1
   855ec:	801a      	strh	r2, [r3, #0]
   855ee:	bd70      	pop	{r4, r5, r6, pc}

000855f0 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
   855f0:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   855f2:	f241 53b2 	movw	r3, #5554	; 0x15b2
   855f6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   855fa:	7818      	ldrb	r0, [r3, #0]
   855fc:	b1d8      	cbz	r0, 85636 <udc_sof_notify+0x46>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   855fe:	f241 51a8 	movw	r1, #5544	; 0x15a8
   85602:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85606:	680b      	ldr	r3, [r1, #0]
   85608:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   8560a:	7910      	ldrb	r0, [r2, #4]
   8560c:	b198      	cbz	r0, 85636 <udc_sof_notify+0x46>
   8560e:	f04f 0400 	mov.w	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85612:	f241 55a8 	movw	r5, #5544	; 0x15a8
   85616:	f2c2 0507 	movt	r5, #8199	; 0x2007
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   8561a:	685b      	ldr	r3, [r3, #4]
   8561c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   85620:	690a      	ldr	r2, [r1, #16]
   85622:	b102      	cbz	r2, 85626 <udc_sof_notify+0x36>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   85624:	4790      	blx	r2
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   85626:	f104 0401 	add.w	r4, r4, #1
   8562a:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8562c:	682b      	ldr	r3, [r5, #0]
   8562e:	6818      	ldr	r0, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   85630:	7901      	ldrb	r1, [r0, #4]
   85632:	42a1      	cmp	r1, r4
   85634:	d8f1      	bhi.n	8561a <udc_sof_notify+0x2a>
   85636:	bd38      	pop	{r3, r4, r5, pc}

00085638 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   85638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   8563a:	f641 338c 	movw	r3, #7052	; 0x1b8c
   8563e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85642:	f04f 0200 	mov.w	r2, #0
   85646:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   85648:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   8564a:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   8564c:	7818      	ldrb	r0, [r3, #0]
   8564e:	f010 0f80 	tst.w	r0, #128	; 0x80
   85652:	f000 83da 	beq.w	85e0a <udc_process_setup+0x7d2>
		if (udd_g_ctrlreq.req.wLength == 0) {
   85656:	f641 318c 	movw	r1, #7052	; 0x1b8c
   8565a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8565e:	88ca      	ldrh	r2, [r1, #6]
   85660:	2a00      	cmp	r2, #0
   85662:	f040 83d7 	bne.w	85e14 <udc_process_setup+0x7dc>
   85666:	e3c4      	b.n	85df2 <udc_process_setup+0x7ba>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   85668:	f010 031f 	ands.w	r3, r0, #31
   8566c:	f040 8115 	bne.w	8589a <udc_process_setup+0x262>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   85670:	f641 308c 	movw	r0, #7052	; 0x1b8c
   85674:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85678:	7841      	ldrb	r1, [r0, #1]
   8567a:	2906      	cmp	r1, #6
   8567c:	d018      	beq.n	856b0 <udc_process_setup+0x78>
   8567e:	2908      	cmp	r1, #8
   85680:	f000 80f8 	beq.w	85874 <udc_process_setup+0x23c>
   85684:	2900      	cmp	r1, #0
   85686:	f040 8108 	bne.w	8589a <udc_process_setup+0x262>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   8568a:	2a02      	cmp	r2, #2
   8568c:	d10d      	bne.n	856aa <udc_process_setup+0x72>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   8568e:	f241 50b0 	movw	r0, #5552	; 0x15b0
   85692:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85696:	f04f 0102 	mov.w	r1, #2
   8569a:	f647 1365 	movw	r3, #31077	; 0x7965
   8569e:	f2c0 0308 	movt	r3, #8
   856a2:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   856a4:	f04f 0001 	mov.w	r0, #1
   856a8:	e328      	b.n	85cfc <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
   856aa:	f04f 0000 	mov.w	r0, #0
   856ae:	e325      	b.n	85cfc <udc_process_setup+0x6c4>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   856b0:	f641 348c 	movw	r4, #7052	; 0x1b8c
   856b4:	f2c2 0407 	movt	r4, #8199	; 0x2007
   856b8:	8860      	ldrh	r0, [r4, #2]
   856ba:	b2c4      	uxtb	r4, r0

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   856bc:	ea4f 2110 	mov.w	r1, r0, lsr #8
   856c0:	f101 33ff 	add.w	r3, r1, #4294967295
   856c4:	2b06      	cmp	r3, #6
   856c6:	f200 80c3 	bhi.w	85850 <udc_process_setup+0x218>
   856ca:	e8df f013 	tbh	[pc, r3, lsl #1]
   856ce:	0007      	.short	0x0007
   856d0:	0078001b 	.word	0x0078001b
   856d4:	00c100c1 	.word	0x00c100c1
   856d8:	00510044 	.word	0x00510044
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   856dc:	f647 02ed 	movw	r2, #30957	; 0x78ed
   856e0:	f2c0 0208 	movt	r2, #8
   856e4:	4790      	blx	r2
   856e6:	b930      	cbnz	r0, 856f6 <udc_process_setup+0xbe>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
   856e8:	48a3      	ldr	r0, [pc, #652]	; (85978 <udc_process_setup+0x340>)
   856ea:	6883      	ldr	r3, [r0, #8]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
			udd_set_setup_payload(
   856ec:	4618      	mov	r0, r3
   856ee:	7819      	ldrb	r1, [r3, #0]
   856f0:	4aa2      	ldr	r2, [pc, #648]	; (8597c <udc_process_setup+0x344>)
   856f2:	4790      	blx	r2
   856f4:	e09c      	b.n	85830 <udc_process_setup+0x1f8>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
   856f6:	4ba0      	ldr	r3, [pc, #640]	; (85978 <udc_process_setup+0x340>)
   856f8:	6819      	ldr	r1, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
   856fa:	4608      	mov	r0, r1
   856fc:	7809      	ldrb	r1, [r1, #0]
   856fe:	4a9f      	ldr	r2, [pc, #636]	; (8597c <udc_process_setup+0x344>)
   85700:	4790      	blx	r2
   85702:	e095      	b.n	85830 <udc_process_setup+0x1f8>
		break;

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   85704:	f647 01ed 	movw	r1, #30957	; 0x78ed
   85708:	f2c0 0108 	movt	r1, #8
   8570c:	4788      	blx	r1
   8570e:	b170      	cbz	r0, 8572e <udc_process_setup+0xf6>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   85710:	4899      	ldr	r0, [pc, #612]	; (85978 <udc_process_setup+0x340>)
   85712:	6881      	ldr	r1, [r0, #8]
   85714:	7c4a      	ldrb	r2, [r1, #17]
   85716:	42a2      	cmp	r2, r4
   85718:	f240 809d 	bls.w	85856 <udc_process_setup+0x21e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   8571c:	4b96      	ldr	r3, [pc, #600]	; (85978 <udc_process_setup+0x340>)
   8571e:	6918      	ldr	r0, [r3, #16]
   85720:	f850 1034 	ldr.w	r1, [r0, r4, lsl #3]
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   85724:	4608      	mov	r0, r1
   85726:	8849      	ldrh	r1, [r1, #2]
   85728:	4a94      	ldr	r2, [pc, #592]	; (8597c <udc_process_setup+0x344>)
   8572a:	4790      	blx	r2
   8572c:	e00d      	b.n	8574a <udc_process_setup+0x112>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   8572e:	4b92      	ldr	r3, [pc, #584]	; (85978 <udc_process_setup+0x340>)
   85730:	681a      	ldr	r2, [r3, #0]
   85732:	7c50      	ldrb	r0, [r2, #17]
   85734:	42a0      	cmp	r0, r4
   85736:	f240 8091 	bls.w	8585c <udc_process_setup+0x224>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   8573a:	498f      	ldr	r1, [pc, #572]	; (85978 <udc_process_setup+0x340>)
   8573c:	684b      	ldr	r3, [r1, #4]
   8573e:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   85742:	4610      	mov	r0, r2
   85744:	8851      	ldrh	r1, [r2, #2]
   85746:	4b8d      	ldr	r3, [pc, #564]	; (8597c <udc_process_setup+0x344>)
   85748:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   8574a:	4b8d      	ldr	r3, [pc, #564]	; (85980 <udc_process_setup+0x348>)
   8574c:	6898      	ldr	r0, [r3, #8]
   8574e:	f04f 0102 	mov.w	r1, #2
   85752:	7041      	strb	r1, [r0, #1]
   85754:	e06c      	b.n	85830 <udc_process_setup+0x1f8>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
				udc_config.qualifier->bLength);
   85756:	f240 1360 	movw	r3, #352	; 0x160
   8575a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8575e:	68d9      	ldr	r1, [r3, #12]
		break;

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   85760:	4608      	mov	r0, r1
   85762:	7809      	ldrb	r1, [r1, #0]
   85764:	f647 1265 	movw	r2, #31077	; 0x7965
   85768:	f2c0 0208 	movt	r2, #8
   8576c:	4790      	blx	r2
   8576e:	e05f      	b.n	85830 <udc_process_setup+0x1f8>
				udc_config.qualifier->bLength);
		break;

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   85770:	f647 02ed 	movw	r2, #30957	; 0x78ed
   85774:	f2c0 0208 	movt	r2, #8
   85778:	4790      	blx	r2
   8577a:	b968      	cbnz	r0, 85798 <udc_process_setup+0x160>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   8577c:	4a7e      	ldr	r2, [pc, #504]	; (85978 <udc_process_setup+0x340>)
   8577e:	6890      	ldr	r0, [r2, #8]
   85780:	7c41      	ldrb	r1, [r0, #17]
   85782:	42a1      	cmp	r1, r4
   85784:	d96d      	bls.n	85862 <udc_process_setup+0x22a>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   85786:	4b7c      	ldr	r3, [pc, #496]	; (85978 <udc_process_setup+0x340>)
   85788:	691a      	ldr	r2, [r3, #16]
   8578a:	f852 1034 	ldr.w	r1, [r2, r4, lsl #3]
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   8578e:	4608      	mov	r0, r1
   85790:	8849      	ldrh	r1, [r1, #2]
   85792:	4b7a      	ldr	r3, [pc, #488]	; (8597c <udc_process_setup+0x344>)
   85794:	4798      	blx	r3
   85796:	e00c      	b.n	857b2 <udc_process_setup+0x17a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   85798:	4877      	ldr	r0, [pc, #476]	; (85978 <udc_process_setup+0x340>)
   8579a:	6801      	ldr	r1, [r0, #0]
   8579c:	7c4b      	ldrb	r3, [r1, #17]
   8579e:	42a3      	cmp	r3, r4
   857a0:	d962      	bls.n	85868 <udc_process_setup+0x230>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   857a2:	4a75      	ldr	r2, [pc, #468]	; (85978 <udc_process_setup+0x340>)
   857a4:	6850      	ldr	r0, [r2, #4]
   857a6:	f850 1034 	ldr.w	r1, [r0, r4, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   857aa:	4608      	mov	r0, r1
   857ac:	8849      	ldrh	r1, [r1, #2]
   857ae:	4b73      	ldr	r3, [pc, #460]	; (8597c <udc_process_setup+0x344>)
   857b0:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   857b2:	4873      	ldr	r0, [pc, #460]	; (85980 <udc_process_setup+0x348>)
   857b4:	6881      	ldr	r1, [r0, #8]
   857b6:	f04f 0207 	mov.w	r2, #7
   857ba:	704a      	strb	r2, [r1, #1]
   857bc:	e038      	b.n	85830 <udc_process_setup+0x1f8>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   857be:	b2c0      	uxtb	r0, r0
   857c0:	2803      	cmp	r0, #3
   857c2:	d80b      	bhi.n	857dc <udc_process_setup+0x1a4>
   857c4:	e8df f010 	tbh	[pc, r0, lsl #1]
   857c8:	000e0004 	.word	0x000e0004
   857cc:	032f032b 	.word	0x032f032b
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   857d0:	486c      	ldr	r0, [pc, #432]	; (85984 <udc_process_setup+0x34c>)
   857d2:	f04f 0104 	mov.w	r1, #4
   857d6:	4a69      	ldr	r2, [pc, #420]	; (8597c <udc_process_setup+0x344>)
   857d8:	4790      	blx	r2
   857da:	e029      	b.n	85830 <udc_process_setup+0x1f8>
		str = udc_get_string_serial_name();
		break;
#endif
	default:
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
   857dc:	486a      	ldr	r0, [pc, #424]	; (85988 <udc_process_setup+0x350>)
   857de:	4780      	blx	r0
   857e0:	bb30      	cbnz	r0, 85830 <udc_process_setup+0x1f8>
   857e2:	e28b      	b.n	85cfc <udc_process_setup+0x6c4>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
   857e4:	4969      	ldr	r1, [pc, #420]	; (8598c <udc_process_setup+0x354>)
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   857e6:	f04f 0008 	mov.w	r0, #8
   857ea:	f04f 0300 	mov.w	r3, #0
   857ee:	4a68      	ldr	r2, [pc, #416]	; (85990 <udc_process_setup+0x358>)
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   857f0:	5ccc      	ldrb	r4, [r1, r3]
   857f2:	f822 4f02 	strh.w	r4, [r2, #2]!
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   857f6:	f103 0301 	add.w	r3, r3, #1
   857fa:	2801      	cmp	r0, #1
   857fc:	f200 8317 	bhi.w	85e2e <udc_process_setup+0x7f6>
   85800:	e00e      	b.n	85820 <udc_process_setup+0x1e8>
   85802:	f102 0402 	add.w	r4, r2, #2
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   85806:	5ccd      	ldrb	r5, [r1, r3]
   85808:	8055      	strh	r5, [r2, #2]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   8580a:	f103 0301 	add.w	r3, r3, #1
   8580e:	f102 0204 	add.w	r2, r2, #4
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   85812:	5ccd      	ldrb	r5, [r1, r3]
   85814:	8065      	strh	r5, [r4, #2]
   85816:	f103 0301 	add.w	r3, r3, #1
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   8581a:	b2dc      	uxtb	r4, r3
   8581c:	4284      	cmp	r4, r0
   8581e:	d3f0      	bcc.n	85802 <udc_process_setup+0x1ca>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   85820:	ea4f 0140 	mov.w	r1, r0, lsl #1
   85824:	f101 0102 	add.w	r1, r1, #2
   85828:	4859      	ldr	r0, [pc, #356]	; (85990 <udc_process_setup+0x358>)
   8582a:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   8582c:	4b53      	ldr	r3, [pc, #332]	; (8597c <udc_process_setup+0x344>)
   8582e:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   85830:	f641 318c 	movw	r1, #7052	; 0x1b8c
   85834:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85838:	88c8      	ldrh	r0, [r1, #6]
   8583a:	898b      	ldrh	r3, [r1, #12]
   8583c:	4283      	cmp	r3, r0
   8583e:	d916      	bls.n	8586e <udc_process_setup+0x236>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   85840:	f641 328c 	movw	r2, #7052	; 0x1b8c
   85844:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85848:	8190      	strh	r0, [r2, #12]
	}
	return true;
   8584a:	f04f 0001 	mov.w	r0, #1
   8584e:	e255      	b.n	85cfc <udc_process_setup+0x6c4>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   85850:	f04f 0000 	mov.w	r0, #0
   85854:	e252      	b.n	85cfc <udc_process_setup+0x6c4>
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
   85856:	f04f 0000 	mov.w	r0, #0
   8585a:	e24f      	b.n	85cfc <udc_process_setup+0x6c4>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
   8585c:	f04f 0000 	mov.w	r0, #0
   85860:	e24c      	b.n	85cfc <udc_process_setup+0x6c4>
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
   85862:	f04f 0000 	mov.w	r0, #0
   85866:	e249      	b.n	85cfc <udc_process_setup+0x6c4>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
   85868:	f04f 0000 	mov.w	r0, #0
   8586c:	e246      	b.n	85cfc <udc_process_setup+0x6c4>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
   8586e:	f04f 0001 	mov.w	r0, #1
   85872:	e243      	b.n	85cfc <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
   85874:	2a01      	cmp	r2, #1
   85876:	d10d      	bne.n	85894 <udc_process_setup+0x25c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   85878:	f241 50b2 	movw	r0, #5554	; 0x15b2
   8587c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85880:	f04f 0101 	mov.w	r1, #1
   85884:	f647 1265 	movw	r2, #31077	; 0x7965
   85888:	f2c0 0208 	movt	r2, #8
   8588c:	4790      	blx	r2
	return true;
   8588e:	f04f 0001 	mov.w	r0, #1
   85892:	e233      	b.n	85cfc <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
   85894:	f04f 0000 	mov.w	r0, #0
   85898:	e230      	b.n	85cfc <udc_process_setup+0x6c4>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8589a:	2b01      	cmp	r3, #1
   8589c:	d134      	bne.n	85908 <udc_process_setup+0x2d0>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   8589e:	f641 308c 	movw	r0, #7052	; 0x1b8c
   858a2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   858a6:	7841      	ldrb	r1, [r0, #1]
   858a8:	290a      	cmp	r1, #10
   858aa:	d12d      	bne.n	85908 <udc_process_setup+0x2d0>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   858ac:	2a01      	cmp	r2, #1
   858ae:	d11f      	bne.n	858f0 <udc_process_setup+0x2b8>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   858b0:	4838      	ldr	r0, [pc, #224]	; (85994 <udc_process_setup+0x35c>)
   858b2:	7801      	ldrb	r1, [r0, #0]
   858b4:	b1f9      	cbz	r1, 858f6 <udc_process_setup+0x2be>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   858b6:	4c32      	ldr	r4, [pc, #200]	; (85980 <udc_process_setup+0x348>)
   858b8:	7924      	ldrb	r4, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   858ba:	4d37      	ldr	r5, [pc, #220]	; (85998 <udc_process_setup+0x360>)
   858bc:	682d      	ldr	r5, [r5, #0]
   858be:	682b      	ldr	r3, [r5, #0]
   858c0:	791a      	ldrb	r2, [r3, #4]
   858c2:	42a2      	cmp	r2, r4
   858c4:	d91a      	bls.n	858fc <udc_process_setup+0x2c4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   858c6:	4620      	mov	r0, r4
   858c8:	f04f 0100 	mov.w	r1, #0
   858cc:	4b33      	ldr	r3, [pc, #204]	; (8599c <udc_process_setup+0x364>)
   858ce:	4798      	blx	r3
   858d0:	b1b8      	cbz	r0, 85902 <udc_process_setup+0x2ca>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   858d2:	6868      	ldr	r0, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   858d4:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
   858d8:	68ca      	ldr	r2, [r1, #12]
   858da:	4790      	blx	r2
   858dc:	4b30      	ldr	r3, [pc, #192]	; (859a0 <udc_process_setup+0x368>)
   858de:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   858e0:	4618      	mov	r0, r3
   858e2:	f04f 0101 	mov.w	r1, #1
   858e6:	4a25      	ldr	r2, [pc, #148]	; (8597c <udc_process_setup+0x344>)
   858e8:	4790      	blx	r2
	return true;
   858ea:	f04f 0001 	mov.w	r0, #1
   858ee:	e205      	b.n	85cfc <udc_process_setup+0x6c4>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
   858f0:	f04f 0000 	mov.w	r0, #0
   858f4:	e202      	b.n	85cfc <udc_process_setup+0x6c4>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
   858f6:	f04f 0000 	mov.w	r0, #0
   858fa:	e1ff      	b.n	85cfc <udc_process_setup+0x6c4>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   858fc:	f04f 0000 	mov.w	r0, #0
   85900:	e1fc      	b.n	85cfc <udc_process_setup+0x6c4>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
   85902:	f04f 0000 	mov.w	r0, #0
   85906:	e1f9      	b.n	85cfc <udc_process_setup+0x6c4>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   85908:	2b02      	cmp	r3, #2
   8590a:	f040 81f9 	bne.w	85d00 <udc_process_setup+0x6c8>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   8590e:	f641 338c 	movw	r3, #7052	; 0x1b8c
   85912:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85916:	7858      	ldrb	r0, [r3, #1]
   85918:	2800      	cmp	r0, #0
   8591a:	f040 81d5 	bne.w	85cc8 <udc_process_setup+0x690>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   8591e:	2a02      	cmp	r2, #2
   85920:	d10d      	bne.n	8593e <udc_process_setup+0x306>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   85922:	4a17      	ldr	r2, [pc, #92]	; (85980 <udc_process_setup+0x348>)
   85924:	7910      	ldrb	r0, [r2, #4]
   85926:	491f      	ldr	r1, [pc, #124]	; (859a4 <udc_process_setup+0x36c>)
   85928:	4788      	blx	r1
   8592a:	4b1f      	ldr	r3, [pc, #124]	; (859a8 <udc_process_setup+0x370>)
   8592c:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   8592e:	4618      	mov	r0, r3
   85930:	f04f 0102 	mov.w	r1, #2
   85934:	4a11      	ldr	r2, [pc, #68]	; (8597c <udc_process_setup+0x344>)
   85936:	4790      	blx	r2
			sizeof(udc_ep_status));
	return true;
   85938:	f04f 0001 	mov.w	r0, #1
   8593c:	e1de      	b.n	85cfc <udc_process_setup+0x6c4>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
   8593e:	f04f 0000 	mov.w	r0, #0
   85942:	e1db      	b.n	85cfc <udc_process_setup+0x6c4>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   85944:	f010 031f 	ands.w	r3, r0, #31
   85948:	f040 8142 	bne.w	85bd0 <udc_process_setup+0x598>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   8594c:	f641 318c 	movw	r1, #7052	; 0x1b8c
   85950:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85954:	784a      	ldrb	r2, [r1, #1]
   85956:	f102 30ff 	add.w	r0, r2, #4294967295
   8595a:	2808      	cmp	r0, #8
   8595c:	f200 8138 	bhi.w	85bd0 <udc_process_setup+0x598>
   85960:	e8df f010 	tbh	[pc, r0, lsl #1]
   85964:	01360039 	.word	0x01360039
   85968:	01360057 	.word	0x01360057
   8596c:	01360024 	.word	0x01360024
   85970:	01360136 	.word	0x01360136
   85974:	00ae      	.short	0x00ae
   85976:	bf00      	nop
   85978:	20070160 	.word	0x20070160
   8597c:	00087965 	.word	0x00087965
   85980:	20071b8c 	.word	0x20071b8c
   85984:	2007028c 	.word	0x2007028c
   85988:	0008380d 	.word	0x0008380d
   8598c:	20070260 	.word	0x20070260
   85990:	2007026c 	.word	0x2007026c
   85994:	200715b2 	.word	0x200715b2
   85998:	200715a8 	.word	0x200715a8
   8599c:	000853dd 	.word	0x000853dd
   859a0:	200715ae 	.word	0x200715ae
   859a4:	000879d9 	.word	0x000879d9
   859a8:	200715ac 	.word	0x200715ac
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   859ac:	f641 308c 	movw	r0, #7052	; 0x1b8c
   859b0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   859b4:	88c1      	ldrh	r1, [r0, #6]
   859b6:	b959      	cbnz	r1, 859d0 <udc_process_setup+0x398>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   859b8:	f641 338c 	movw	r3, #7052	; 0x1b8c
   859bc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   859c0:	f245 4269 	movw	r2, #21609	; 0x5469
   859c4:	f2c0 0208 	movt	r2, #8
   859c8:	611a      	str	r2, [r3, #16]
	return true;
   859ca:	f04f 0001 	mov.w	r0, #1
   859ce:	e195      	b.n	85cfc <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   859d0:	f04f 0000 	mov.w	r0, #0
   859d4:	e192      	b.n	85cfc <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   859d6:	f641 328c 	movw	r2, #7052	; 0x1b8c
   859da:	f2c2 0207 	movt	r2, #8199	; 0x2007
   859de:	88d1      	ldrh	r1, [r2, #6]
   859e0:	b989      	cbnz	r1, 85a06 <udc_process_setup+0x3ce>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   859e2:	f641 308c 	movw	r0, #7052	; 0x1b8c
   859e6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   859ea:	8843      	ldrh	r3, [r0, #2]
   859ec:	2b01      	cmp	r3, #1
   859ee:	d10d      	bne.n	85a0c <udc_process_setup+0x3d4>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   859f0:	f241 51b0 	movw	r1, #5552	; 0x15b0
   859f4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   859f8:	880a      	ldrh	r2, [r1, #0]
   859fa:	f022 0002 	bic.w	r0, r2, #2
   859fe:	8008      	strh	r0, [r1, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   85a00:	f04f 0001 	mov.w	r0, #1
   85a04:	e17a      	b.n	85cfc <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   85a06:	f04f 0000 	mov.w	r0, #0
   85a0a:	e177      	b.n	85cfc <udc_process_setup+0x6c4>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
   85a0c:	f04f 0000 	mov.w	r0, #0
   85a10:	e174      	b.n	85cfc <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   85a12:	f641 308c 	movw	r0, #7052	; 0x1b8c
   85a16:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85a1a:	88c1      	ldrh	r1, [r0, #6]
   85a1c:	2900      	cmp	r1, #0
   85a1e:	d140      	bne.n	85aa2 <udc_process_setup+0x46a>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
   85a20:	f641 338c 	movw	r3, #7052	; 0x1b8c
   85a24:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85a28:	885a      	ldrh	r2, [r3, #2]
   85a2a:	2a02      	cmp	r2, #2
   85a2c:	d13c      	bne.n	85aa8 <udc_process_setup+0x470>
		return false;
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
   85a2e:	f647 00ed 	movw	r0, #30957	; 0x78ed
   85a32:	f2c0 0008 	movt	r0, #8
   85a36:	4780      	blx	r0
   85a38:	2800      	cmp	r0, #0
   85a3a:	d038      	beq.n	85aae <udc_process_setup+0x476>
			break;
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   85a3c:	f641 318c 	movw	r1, #7052	; 0x1b8c
   85a40:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85a44:	790b      	ldrb	r3, [r1, #4]
   85a46:	2b00      	cmp	r3, #0
   85a48:	d134      	bne.n	85ab4 <udc_process_setup+0x47c>
			break;
		}
		// Unconfigure the device, terminating all ongoing requests
		udc_reset();
   85a4a:	f245 528d 	movw	r2, #21901	; 0x558d
   85a4e:	f2c0 0208 	movt	r2, #8
   85a52:	4790      	blx	r2
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   85a54:	f641 308c 	movw	r0, #7052	; 0x1b8c
   85a58:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85a5c:	8881      	ldrh	r1, [r0, #4]
   85a5e:	ea4f 2311 	mov.w	r3, r1, lsr #8
   85a62:	f103 30ff 	add.w	r0, r3, #4294967295
   85a66:	2803      	cmp	r0, #3
   85a68:	d827      	bhi.n	85aba <udc_process_setup+0x482>
   85a6a:	e8df f000 	tbb	[pc, r0]
   85a6e:	0802      	.short	0x0802
   85a70:	140e      	.short	0x140e
		case USB_DEV_TEST_MODE_J:
			udd_g_ctrlreq.callback = udd_test_mode_j;
   85a72:	4897      	ldr	r0, [pc, #604]	; (85cd0 <udc_process_setup+0x698>)
   85a74:	4b97      	ldr	r3, [pc, #604]	; (85cd4 <udc_process_setup+0x69c>)
   85a76:	6118      	str	r0, [r3, #16]
			return true;
   85a78:	f04f 0001 	mov.w	r0, #1
   85a7c:	e13e      	b.n	85cfc <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_K:
			udd_g_ctrlreq.callback = udd_test_mode_k;
   85a7e:	4a96      	ldr	r2, [pc, #600]	; (85cd8 <udc_process_setup+0x6a0>)
   85a80:	4994      	ldr	r1, [pc, #592]	; (85cd4 <udc_process_setup+0x69c>)
   85a82:	610a      	str	r2, [r1, #16]
			return true;
   85a84:	f04f 0001 	mov.w	r0, #1
   85a88:	e138      	b.n	85cfc <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_SE0_NAK:
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   85a8a:	4894      	ldr	r0, [pc, #592]	; (85cdc <udc_process_setup+0x6a4>)
   85a8c:	4b91      	ldr	r3, [pc, #580]	; (85cd4 <udc_process_setup+0x69c>)
   85a8e:	6118      	str	r0, [r3, #16]
			return true;
   85a90:	f04f 0001 	mov.w	r0, #1
   85a94:	e132      	b.n	85cfc <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_PACKET:
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   85a96:	4a92      	ldr	r2, [pc, #584]	; (85ce0 <udc_process_setup+0x6a8>)
   85a98:	498e      	ldr	r1, [pc, #568]	; (85cd4 <udc_process_setup+0x69c>)
   85a9a:	610a      	str	r2, [r1, #16]
			return true;
   85a9c:	f04f 0001 	mov.w	r0, #1
   85aa0:	e12c      	b.n	85cfc <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   85aa2:	f04f 0000 	mov.w	r0, #0
   85aa6:	e129      	b.n	85cfc <udc_process_setup+0x6c4>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
   85aa8:	f04f 0000 	mov.w	r0, #0
   85aac:	e126      	b.n	85cfc <udc_process_setup+0x6c4>
		break;
#endif
	default:
		break;
	}
	return false;
   85aae:	f04f 0000 	mov.w	r0, #0
   85ab2:	e123      	b.n	85cfc <udc_process_setup+0x6c4>
   85ab4:	f04f 0000 	mov.w	r0, #0
   85ab8:	e120      	b.n	85cfc <udc_process_setup+0x6c4>
   85aba:	f04f 0000 	mov.w	r0, #0
   85abe:	e11d      	b.n	85cfc <udc_process_setup+0x6c4>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   85ac0:	f641 338c 	movw	r3, #7052	; 0x1b8c
   85ac4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85ac8:	88d9      	ldrh	r1, [r3, #6]
   85aca:	2900      	cmp	r1, #0
   85acc:	d16e      	bne.n	85bac <udc_process_setup+0x574>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   85ace:	f647 1231 	movw	r2, #31025	; 0x7931
   85ad2:	f2c0 0208 	movt	r2, #8
   85ad6:	4790      	blx	r2
   85ad8:	2800      	cmp	r0, #0
   85ada:	d06a      	beq.n	85bb2 <udc_process_setup+0x57a>
		return false;
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   85adc:	f647 00ed 	movw	r0, #30957	; 0x78ed
   85ae0:	f2c0 0008 	movt	r0, #8
   85ae4:	4780      	blx	r0
   85ae6:	b168      	cbz	r0, 85b04 <udc_process_setup+0x4cc>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   85ae8:	f641 318c 	movw	r1, #7052	; 0x1b8c
   85aec:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85af0:	788a      	ldrb	r2, [r1, #2]
				udc_config.confdev_hs->bNumConfigurations) {
   85af2:	f240 1060 	movw	r0, #352	; 0x160
   85af6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85afa:	6883      	ldr	r3, [r0, #8]
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   85afc:	7c59      	ldrb	r1, [r3, #17]
   85afe:	428a      	cmp	r2, r1
   85b00:	dd0d      	ble.n	85b1e <udc_process_setup+0x4e6>
   85b02:	e059      	b.n	85bb8 <udc_process_setup+0x580>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   85b04:	f641 338c 	movw	r3, #7052	; 0x1b8c
   85b08:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85b0c:	7899      	ldrb	r1, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   85b0e:	f240 1260 	movw	r2, #352	; 0x160
   85b12:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85b16:	6810      	ldr	r0, [r2, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   85b18:	7c43      	ldrb	r3, [r0, #17]
   85b1a:	4299      	cmp	r1, r3
   85b1c:	dc4f      	bgt.n	85bbe <udc_process_setup+0x586>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
   85b1e:	f245 528d 	movw	r2, #21901	; 0x558d
   85b22:	f2c0 0208 	movt	r2, #8
   85b26:	4790      	blx	r2

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   85b28:	f641 308c 	movw	r0, #7052	; 0x1b8c
   85b2c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85b30:	7883      	ldrb	r3, [r0, #2]
   85b32:	f241 51b2 	movw	r1, #5554	; 0x15b2
   85b36:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85b3a:	700b      	strb	r3, [r1, #0]
	if (udc_num_configuration == 0) {
   85b3c:	2b00      	cmp	r3, #0
   85b3e:	d041      	beq.n	85bc4 <udc_process_setup+0x58c>
		return true; // Default empty configuration requested
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   85b40:	4a68      	ldr	r2, [pc, #416]	; (85ce4 <udc_process_setup+0x6ac>)
   85b42:	4790      	blx	r2
   85b44:	b198      	cbz	r0, 85b6e <udc_process_setup+0x536>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   85b46:	4a68      	ldr	r2, [pc, #416]	; (85ce8 <udc_process_setup+0x6b0>)
   85b48:	7810      	ldrb	r0, [r2, #0]
   85b4a:	f100 31ff 	add.w	r1, r0, #4294967295
   85b4e:	4b67      	ldr	r3, [pc, #412]	; (85cec <udc_process_setup+0x6b4>)
   85b50:	691a      	ldr	r2, [r3, #16]
   85b52:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
   85b56:	4966      	ldr	r1, [pc, #408]	; (85cf0 <udc_process_setup+0x6b8>)
   85b58:	6008      	str	r0, [r1, #0]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85b5a:	4b65      	ldr	r3, [pc, #404]	; (85cf0 <udc_process_setup+0x6b8>)
   85b5c:	681a      	ldr	r2, [r3, #0]
   85b5e:	6810      	ldr	r0, [r2, #0]
   85b60:	7901      	ldrb	r1, [r0, #4]
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
   85b62:	f04f 0001 	mov.w	r0, #1
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85b66:	2900      	cmp	r1, #0
   85b68:	f000 80c8 	beq.w	85cfc <udc_process_setup+0x6c4>
   85b6c:	e00a      	b.n	85b84 <udc_process_setup+0x54c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   85b6e:	485e      	ldr	r0, [pc, #376]	; (85ce8 <udc_process_setup+0x6b0>)
   85b70:	7803      	ldrb	r3, [r0, #0]
   85b72:	f103 31ff 	add.w	r1, r3, #4294967295
   85b76:	4a5d      	ldr	r2, [pc, #372]	; (85cec <udc_process_setup+0x6b4>)
   85b78:	6850      	ldr	r0, [r2, #4]
   85b7a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   85b7e:	4b5c      	ldr	r3, [pc, #368]	; (85cf0 <udc_process_setup+0x6b8>)
   85b80:	6019      	str	r1, [r3, #0]
   85b82:	e7ea      	b.n	85b5a <udc_process_setup+0x522>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85b84:	f04f 0400 	mov.w	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   85b88:	4626      	mov	r6, r4
   85b8a:	4d5a      	ldr	r5, [pc, #360]	; (85cf4 <udc_process_setup+0x6bc>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85b8c:	4f58      	ldr	r7, [pc, #352]	; (85cf0 <udc_process_setup+0x6b8>)
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   85b8e:	4620      	mov	r0, r4
   85b90:	4631      	mov	r1, r6
   85b92:	47a8      	blx	r5
   85b94:	b1c8      	cbz	r0, 85bca <udc_process_setup+0x592>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   85b96:	f104 0401 	add.w	r4, r4, #1
   85b9a:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85b9c:	683b      	ldr	r3, [r7, #0]
   85b9e:	681a      	ldr	r2, [r3, #0]
   85ba0:	7910      	ldrb	r0, [r2, #4]
   85ba2:	42a0      	cmp	r0, r4
   85ba4:	d8f3      	bhi.n	85b8e <udc_process_setup+0x556>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
   85ba6:	f04f 0001 	mov.w	r0, #1
   85baa:	e0a7      	b.n	85cfc <udc_process_setup+0x6c4>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   85bac:	f04f 0000 	mov.w	r0, #0
   85bb0:	e0a4      	b.n	85cfc <udc_process_setup+0x6c4>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
   85bb2:	f04f 0000 	mov.w	r0, #0
   85bb6:	e0a1      	b.n	85cfc <udc_process_setup+0x6c4>
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
   85bb8:	f04f 0000 	mov.w	r0, #0
   85bbc:	e09e      	b.n	85cfc <udc_process_setup+0x6c4>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
   85bbe:	f04f 0000 	mov.w	r0, #0
   85bc2:	e09b      	b.n	85cfc <udc_process_setup+0x6c4>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
   85bc4:	f04f 0001 	mov.w	r0, #1
   85bc8:	e098      	b.n	85cfc <udc_process_setup+0x6c4>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
   85bca:	f04f 0000 	mov.w	r0, #0
   85bce:	e095      	b.n	85cfc <udc_process_setup+0x6c4>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   85bd0:	2b01      	cmp	r3, #1
   85bd2:	d12d      	bne.n	85c30 <udc_process_setup+0x5f8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   85bd4:	f641 318c 	movw	r1, #7052	; 0x1b8c
   85bd8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85bdc:	784a      	ldrb	r2, [r1, #1]
   85bde:	2a0b      	cmp	r2, #11
   85be0:	d126      	bne.n	85c30 <udc_process_setup+0x5f8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   85be2:	f641 308c 	movw	r0, #7052	; 0x1b8c
   85be6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85bea:	88c2      	ldrh	r2, [r0, #6]
   85bec:	b9ba      	cbnz	r2, 85c1e <udc_process_setup+0x5e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   85bee:	f241 53b2 	movw	r3, #5554	; 0x15b2
   85bf2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85bf6:	7819      	ldrb	r1, [r3, #0]
   85bf8:	b1a1      	cbz	r1, 85c24 <udc_process_setup+0x5ec>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   85bfa:	f641 358c 	movw	r5, #7052	; 0x1b8c
   85bfe:	f2c2 0507 	movt	r5, #8199	; 0x2007
   85c02:	792c      	ldrb	r4, [r5, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   85c04:	886d      	ldrh	r5, [r5, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   85c06:	4620      	mov	r0, r4
   85c08:	f245 42f1 	movw	r2, #21745	; 0x54f1
   85c0c:	f2c0 0208 	movt	r2, #8
   85c10:	4790      	blx	r2
   85c12:	b150      	cbz	r0, 85c2a <udc_process_setup+0x5f2>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   85c14:	4620      	mov	r0, r4
   85c16:	b2e9      	uxtb	r1, r5
   85c18:	4b36      	ldr	r3, [pc, #216]	; (85cf4 <udc_process_setup+0x6bc>)
   85c1a:	4798      	blx	r3
   85c1c:	e06e      	b.n	85cfc <udc_process_setup+0x6c4>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
   85c1e:	f04f 0000 	mov.w	r0, #0
   85c22:	e06b      	b.n	85cfc <udc_process_setup+0x6c4>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
   85c24:	f04f 0000 	mov.w	r0, #0
   85c28:	e068      	b.n	85cfc <udc_process_setup+0x6c4>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
		return false;
   85c2a:	f04f 0000 	mov.w	r0, #0
   85c2e:	e065      	b.n	85cfc <udc_process_setup+0x6c4>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   85c30:	2b02      	cmp	r3, #2
   85c32:	d165      	bne.n	85d00 <udc_process_setup+0x6c8>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   85c34:	f641 338c 	movw	r3, #7052	; 0x1b8c
   85c38:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85c3c:	7858      	ldrb	r0, [r3, #1]
   85c3e:	2801      	cmp	r0, #1
   85c40:	d002      	beq.n	85c48 <udc_process_setup+0x610>
   85c42:	2803      	cmp	r0, #3
   85c44:	d158      	bne.n	85cf8 <udc_process_setup+0x6c0>
   85c46:	e01c      	b.n	85c82 <udc_process_setup+0x64a>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   85c48:	f641 338c 	movw	r3, #7052	; 0x1b8c
   85c4c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85c50:	88d8      	ldrh	r0, [r3, #6]
   85c52:	b980      	cbnz	r0, 85c76 <udc_process_setup+0x63e>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   85c54:	f641 318c 	movw	r1, #7052	; 0x1b8c
   85c58:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85c5c:	884a      	ldrh	r2, [r1, #2]
   85c5e:	b96a      	cbnz	r2, 85c7c <udc_process_setup+0x644>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   85c60:	f641 338c 	movw	r3, #7052	; 0x1b8c
   85c64:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85c68:	7918      	ldrb	r0, [r3, #4]
   85c6a:	f647 3119 	movw	r1, #31513	; 0x7b19
   85c6e:	f2c0 0108 	movt	r1, #8
   85c72:	4788      	blx	r1
   85c74:	e042      	b.n	85cfc <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   85c76:	f04f 0000 	mov.w	r0, #0
   85c7a:	e03f      	b.n	85cfc <udc_process_setup+0x6c4>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
   85c7c:	f04f 0000 	mov.w	r0, #0
   85c80:	e03c      	b.n	85cfc <udc_process_setup+0x6c4>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   85c82:	f641 318c 	movw	r1, #7052	; 0x1b8c
   85c86:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85c8a:	88ca      	ldrh	r2, [r1, #6]
   85c8c:	b9b2      	cbnz	r2, 85cbc <udc_process_setup+0x684>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   85c8e:	f641 338c 	movw	r3, #7052	; 0x1b8c
   85c92:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85c96:	8858      	ldrh	r0, [r3, #2]
   85c98:	b998      	cbnz	r0, 85cc2 <udc_process_setup+0x68a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   85c9a:	f641 348c 	movw	r4, #7052	; 0x1b8c
   85c9e:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85ca2:	7920      	ldrb	r0, [r4, #4]
   85ca4:	f248 2115 	movw	r1, #33301	; 0x8215
   85ca8:	f2c0 0108 	movt	r1, #8
   85cac:	4788      	blx	r1
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   85cae:	7920      	ldrb	r0, [r4, #4]
   85cb0:	f647 12f1 	movw	r2, #31217	; 0x79f1
   85cb4:	f2c0 0208 	movt	r2, #8
   85cb8:	4790      	blx	r2
   85cba:	e01f      	b.n	85cfc <udc_process_setup+0x6c4>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   85cbc:	f04f 0000 	mov.w	r0, #0
   85cc0:	e01c      	b.n	85cfc <udc_process_setup+0x6c4>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
   85cc2:	f04f 0000 	mov.w	r0, #0
   85cc6:	e019      	b.n	85cfc <udc_process_setup+0x6c4>
				break;
			}
		}
#endif
	}
	return false;
   85cc8:	f04f 0000 	mov.w	r0, #0
   85ccc:	e016      	b.n	85cfc <udc_process_setup+0x6c4>
   85cce:	bf00      	nop
   85cd0:	00088319 	.word	0x00088319
   85cd4:	20071b8c 	.word	0x20071b8c
   85cd8:	00088339 	.word	0x00088339
   85cdc:	00088359 	.word	0x00088359
   85ce0:	00088371 	.word	0x00088371
   85ce4:	000878ed 	.word	0x000878ed
   85ce8:	200715b2 	.word	0x200715b2
   85cec:	20070160 	.word	0x20070160
   85cf0:	200715a8 	.word	0x200715a8
   85cf4:	00085485 	.word	0x00085485
   85cf8:	f04f 0000 	mov.w	r0, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
   85cfc:	2800      	cmp	r0, #0
   85cfe:	d17b      	bne.n	85df8 <udc_process_setup+0x7c0>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   85d00:	f641 318c 	movw	r1, #7052	; 0x1b8c
   85d04:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85d08:	7808      	ldrb	r0, [r1, #0]
   85d0a:	f000 031f 	and.w	r3, r0, #31
   85d0e:	2b01      	cmp	r3, #1
   85d10:	d12d      	bne.n	85d6e <udc_process_setup+0x736>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   85d12:	f241 52b2 	movw	r2, #5554	; 0x15b2
   85d16:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85d1a:	7811      	ldrb	r1, [r2, #0]
   85d1c:	b339      	cbz	r1, 85d6e <udc_process_setup+0x736>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   85d1e:	f641 348c 	movw	r4, #7052	; 0x1b8c
   85d22:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85d26:	7924      	ldrb	r4, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   85d28:	f241 55a8 	movw	r5, #5544	; 0x15a8
   85d2c:	f2c2 0507 	movt	r5, #8199	; 0x2007
   85d30:	682d      	ldr	r5, [r5, #0]
   85d32:	6828      	ldr	r0, [r5, #0]
   85d34:	7903      	ldrb	r3, [r0, #4]
   85d36:	42a3      	cmp	r3, r4
   85d38:	d919      	bls.n	85d6e <udc_process_setup+0x736>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   85d3a:	4620      	mov	r0, r4
   85d3c:	f04f 0100 	mov.w	r1, #0
   85d40:	f245 32dd 	movw	r2, #21469	; 0x53dd
   85d44:	f2c0 0208 	movt	r2, #8
   85d48:	4790      	blx	r2
   85d4a:	b180      	cbz	r0, 85d6e <udc_process_setup+0x736>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   85d4c:	6869      	ldr	r1, [r5, #4]
   85d4e:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   85d52:	68e8      	ldr	r0, [r5, #12]
   85d54:	4780      	blx	r0
   85d56:	4601      	mov	r1, r0
   85d58:	4620      	mov	r0, r4
   85d5a:	f245 33dd 	movw	r3, #21469	; 0x53dd
   85d5e:	f2c0 0308 	movt	r3, #8
   85d62:	4798      	blx	r3
   85d64:	b118      	cbz	r0, 85d6e <udc_process_setup+0x736>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   85d66:	68aa      	ldr	r2, [r5, #8]
   85d68:	4790      	blx	r2
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
   85d6a:	2800      	cmp	r0, #0
   85d6c:	d147      	bne.n	85dfe <udc_process_setup+0x7c6>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   85d6e:	f641 318c 	movw	r1, #7052	; 0x1b8c
   85d72:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85d76:	7808      	ldrb	r0, [r1, #0]
   85d78:	f000 031f 	and.w	r3, r0, #31
   85d7c:	2b02      	cmp	r3, #2
   85d7e:	d141      	bne.n	85e04 <udc_process_setup+0x7cc>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   85d80:	f241 52b2 	movw	r2, #5554	; 0x15b2
   85d84:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85d88:	7811      	ldrb	r1, [r2, #0]
   85d8a:	b331      	cbz	r1, 85dda <udc_process_setup+0x7a2>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85d8c:	f241 50a8 	movw	r0, #5544	; 0x15a8
   85d90:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85d94:	6803      	ldr	r3, [r0, #0]
   85d96:	681a      	ldr	r2, [r3, #0]
   85d98:	7911      	ldrb	r1, [r2, #4]
   85d9a:	b309      	cbz	r1, 85de0 <udc_process_setup+0x7a8>
   85d9c:	f04f 0400 	mov.w	r4, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   85da0:	f245 36dd 	movw	r6, #21469	; 0x53dd
   85da4:	f2c0 0608 	movt	r6, #8
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85da8:	f241 57a8 	movw	r7, #5544	; 0x15a8
   85dac:	f2c2 0707 	movt	r7, #8199	; 0x2007
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   85db0:	685d      	ldr	r5, [r3, #4]
   85db2:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   85db6:	68eb      	ldr	r3, [r5, #12]
   85db8:	4798      	blx	r3
   85dba:	4601      	mov	r1, r0
   85dbc:	4620      	mov	r0, r4
   85dbe:	47b0      	blx	r6
   85dc0:	b188      	cbz	r0, 85de6 <udc_process_setup+0x7ae>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   85dc2:	68a8      	ldr	r0, [r5, #8]
   85dc4:	4780      	blx	r0
   85dc6:	b988      	cbnz	r0, 85dec <udc_process_setup+0x7b4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   85dc8:	f104 0401 	add.w	r4, r4, #1
   85dcc:	b2e4      	uxtb	r4, r4
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85dce:	683b      	ldr	r3, [r7, #0]
   85dd0:	681a      	ldr	r2, [r3, #0]
   85dd2:	7911      	ldrb	r1, [r2, #4]
   85dd4:	42a1      	cmp	r1, r4
   85dd6:	d8eb      	bhi.n	85db0 <udc_process_setup+0x778>
   85dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
   85dda:	f04f 0000 	mov.w	r0, #0
   85dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
   85de0:	f04f 0000 	mov.w	r0, #0
   85de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
			return false;
   85de6:	f04f 0000 	mov.w	r0, #0
   85dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
   85dec:	f04f 0001 	mov.w	r0, #1
   85df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
   85df2:	f04f 0000 	mov.w	r0, #0
   85df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
   85df8:	f04f 0001 	mov.w	r0, #1
   85dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
			return true;
   85dfe:	f04f 0001 	mov.w	r0, #1
   85e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   85e04:	f04f 0000 	mov.w	r0, #0
   85e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   85e0a:	f010 0f60 	tst.w	r0, #96	; 0x60
   85e0e:	f47f af77 	bne.w	85d00 <udc_process_setup+0x6c8>
   85e12:	e597      	b.n	85944 <udc_process_setup+0x30c>
   85e14:	f010 0f60 	tst.w	r0, #96	; 0x60
   85e18:	f47f af72 	bne.w	85d00 <udc_process_setup+0x6c8>
   85e1c:	e424      	b.n	85668 <udc_process_setup+0x30>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   85e1e:	f04f 000e 	mov.w	r0, #14
		str = udc_string_product_name;
   85e22:	490a      	ldr	r1, [pc, #40]	; (85e4c <udc_process_setup+0x814>)
   85e24:	e4e1      	b.n	857ea <udc_process_setup+0x1b2>
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   85e26:	f04f 000c 	mov.w	r0, #12
		str = udc_get_string_serial_name();
   85e2a:	4909      	ldr	r1, [pc, #36]	; (85e50 <udc_process_setup+0x818>)
   85e2c:	e4dd      	b.n	857ea <udc_process_setup+0x1b2>
   85e2e:	f04f 0401 	mov.w	r4, #1
   85e32:	2c00      	cmp	r4, #0
   85e34:	f43f ace5 	beq.w	85802 <udc_process_setup+0x1ca>
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   85e38:	5ccc      	ldrb	r4, [r1, r3]
   85e3a:	f822 4f02 	strh.w	r4, [r2, #2]!
   85e3e:	f103 0301 	add.w	r3, r3, #1
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   85e42:	b2dc      	uxtb	r4, r3
   85e44:	4284      	cmp	r4, r0
   85e46:	f4ff acdc 	bcc.w	85802 <udc_process_setup+0x1ca>
   85e4a:	e4e9      	b.n	85820 <udc_process_setup+0x1e8>
   85e4c:	20070250 	.word	0x20070250
   85e50:	0008dac4 	.word	0x0008dac4

00085e54 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   85e54:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   85e56:	f641 2350 	movw	r3, #6736	; 0x1a50
   85e5a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   85e5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85e62:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   85e64:	f04f 000b 	mov.w	r0, #11
   85e68:	f246 34d1 	movw	r4, #25553	; 0x63d1
   85e6c:	f2c0 0408 	movt	r4, #8
   85e70:	47a0      	blx	r4
   85e72:	f04f 000c 	mov.w	r0, #12
   85e76:	47a0      	blx	r4
   85e78:	f04f 000d 	mov.w	r0, #13
   85e7c:	47a0      	blx	r4
   85e7e:	f04f 000e 	mov.w	r0, #14
   85e82:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   85e84:	f04f 002b 	mov.w	r0, #43	; 0x2b
   85e88:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   85e8c:	f246 04ad 	movw	r4, #24749	; 0x60ad
   85e90:	f2c0 0408 	movt	r4, #8
   85e94:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   85e96:	f04f 002a 	mov.w	r0, #42	; 0x2a
   85e9a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   85e9e:	47a0      	blx	r4
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif

#if defined (CONF_BOARD_SD_MMC_HSMCI)
/* Configure HSMCI pins */
gpio_configure_pin(PIN_HSMCI_MCCDA_GPIO, PIN_HSMCI_MCCDA_FLAGS);
   85ea0:	f04f 0014 	mov.w	r0, #20
   85ea4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   85ea8:	47a0      	blx	r4
gpio_configure_pin(PIN_HSMCI_MCCK_GPIO, PIN_HSMCI_MCCK_FLAGS);
   85eaa:	f04f 0013 	mov.w	r0, #19
   85eae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   85eb2:	47a0      	blx	r4
gpio_configure_pin(PIN_HSMCI_MCDA0_GPIO, PIN_HSMCI_MCDA0_FLAGS);
   85eb4:	f04f 0015 	mov.w	r0, #21
   85eb8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   85ebc:	47a0      	blx	r4
gpio_configure_pin(PIN_HSMCI_MCDA1_GPIO, PIN_HSMCI_MCDA1_FLAGS);
   85ebe:	f04f 0016 	mov.w	r0, #22
   85ec2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   85ec6:	47a0      	blx	r4
gpio_configure_pin(PIN_HSMCI_MCDA2_GPIO, PIN_HSMCI_MCDA2_FLAGS);
   85ec8:	f04f 0017 	mov.w	r0, #23
   85ecc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   85ed0:	47a0      	blx	r4
gpio_configure_pin(PIN_HSMCI_MCDA3_GPIO, PIN_HSMCI_MCDA3_FLAGS);
   85ed2:	f04f 0018 	mov.w	r0, #24
   85ed6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   85eda:	47a0      	blx	r4

/* Configure SD/MMC card detect pin */
gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
   85edc:	f04f 0067 	mov.w	r0, #103	; 0x67
   85ee0:	f04f 0108 	mov.w	r1, #8
   85ee4:	47a0      	blx	r4
   85ee6:	bd10      	pop	{r4, pc}

00085ee8 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   85ee8:	b510      	push	{r4, lr}
   85eea:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   85eec:	283b      	cmp	r0, #59	; 0x3b
   85eee:	d106      	bne.n	85efe <LED_Off+0x16>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
			} else {
				gpio_set_pin_high(led_gpio);
   85ef0:	f04f 003b 	mov.w	r0, #59	; 0x3b
   85ef4:	f246 036d 	movw	r3, #24685	; 0x606d
   85ef8:	f2c0 0308 	movt	r3, #8
   85efc:	4798      	blx	r3
 */
void LED_Off(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   85efe:	2c55      	cmp	r4, #85	; 0x55
   85f00:	d106      	bne.n	85f10 <LED_Off+0x28>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
			} else {
				gpio_set_pin_high(led_gpio);
   85f02:	f04f 0055 	mov.w	r0, #85	; 0x55
   85f06:	f246 016d 	movw	r1, #24685	; 0x606d
   85f0a:	f2c0 0108 	movt	r1, #8
   85f0e:	4788      	blx	r1
 */
void LED_Off(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   85f10:	2c56      	cmp	r4, #86	; 0x56
   85f12:	d106      	bne.n	85f22 <LED_Off+0x3a>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
			} else {
				gpio_set_pin_high(led_gpio);
   85f14:	f04f 0056 	mov.w	r0, #86	; 0x56
   85f18:	f246 026d 	movw	r2, #24685	; 0x606d
   85f1c:	f2c0 0208 	movt	r2, #8
   85f20:	4790      	blx	r2
 */
void LED_Off(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   85f22:	2c57      	cmp	r4, #87	; 0x57
   85f24:	d106      	bne.n	85f34 <LED_Off+0x4c>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
   85f26:	f04f 0057 	mov.w	r0, #87	; 0x57
   85f2a:	f246 038d 	movw	r3, #24717	; 0x608d
   85f2e:	f2c0 0308 	movt	r3, #8
   85f32:	4798      	blx	r3
   85f34:	bd10      	pop	{r4, pc}
   85f36:	bf00      	nop

00085f38 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   85f38:	b510      	push	{r4, lr}
   85f3a:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   85f3c:	283b      	cmp	r0, #59	; 0x3b
   85f3e:	d106      	bne.n	85f4e <LED_On+0x16>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
			} else {
				gpio_set_pin_low(led_gpio);
   85f40:	f04f 003b 	mov.w	r0, #59	; 0x3b
   85f44:	f246 038d 	movw	r3, #24717	; 0x608d
   85f48:	f2c0 0308 	movt	r3, #8
   85f4c:	4798      	blx	r3
 */
void LED_On(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   85f4e:	2c55      	cmp	r4, #85	; 0x55
   85f50:	d106      	bne.n	85f60 <LED_On+0x28>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
			} else {
				gpio_set_pin_low(led_gpio);
   85f52:	f04f 0055 	mov.w	r0, #85	; 0x55
   85f56:	f246 018d 	movw	r1, #24717	; 0x608d
   85f5a:	f2c0 0108 	movt	r1, #8
   85f5e:	4788      	blx	r1
 */
void LED_On(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   85f60:	2c56      	cmp	r4, #86	; 0x56
   85f62:	d106      	bne.n	85f72 <LED_On+0x3a>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
			} else {
				gpio_set_pin_low(led_gpio);
   85f64:	f04f 0056 	mov.w	r0, #86	; 0x56
   85f68:	f246 028d 	movw	r2, #24717	; 0x608d
   85f6c:	f2c0 0208 	movt	r2, #8
   85f70:	4790      	blx	r2
 */
void LED_On(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   85f72:	2c57      	cmp	r4, #87	; 0x57
   85f74:	d106      	bne.n	85f84 <LED_On+0x4c>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
   85f76:	f04f 0057 	mov.w	r0, #87	; 0x57
   85f7a:	f246 036d 	movw	r3, #24685	; 0x606d
   85f7e:	f2c0 0308 	movt	r3, #8
   85f82:	4798      	blx	r3
   85f84:	bd10      	pop	{r4, pc}
   85f86:	bf00      	nop

00085f88 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   85f88:	b10a      	cbz	r2, 85f8e <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   85f8a:	6641      	str	r1, [r0, #100]	; 0x64
   85f8c:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   85f8e:	6601      	str	r1, [r0, #96]	; 0x60
   85f90:	4770      	bx	lr
   85f92:	bf00      	nop

00085f94 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   85f94:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   85f96:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   85f9a:	d016      	beq.n	85fca <pio_set_peripheral+0x36>
   85f9c:	d804      	bhi.n	85fa8 <pio_set_peripheral+0x14>
   85f9e:	b1c9      	cbz	r1, 85fd4 <pio_set_peripheral+0x40>
   85fa0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   85fa4:	d115      	bne.n	85fd2 <pio_set_peripheral+0x3e>
   85fa6:	e009      	b.n	85fbc <pio_set_peripheral+0x28>
   85fa8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   85fac:	d012      	beq.n	85fd4 <pio_set_peripheral+0x40>
   85fae:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   85fb2:	d00f      	beq.n	85fd4 <pio_set_peripheral+0x40>
   85fb4:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   85fb8:	d10b      	bne.n	85fd2 <pio_set_peripheral+0x3e>
   85fba:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   85fbc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   85fbe:	6f01      	ldr	r1, [r0, #112]	; 0x70
   85fc0:	400b      	ands	r3, r1
   85fc2:	ea23 0302 	bic.w	r3, r3, r2
   85fc6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   85fc8:	e003      	b.n	85fd2 <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   85fca:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   85fcc:	ea42 0103 	orr.w	r1, r2, r3
   85fd0:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   85fd2:	6042      	str	r2, [r0, #4]
   85fd4:	4770      	bx	lr
   85fd6:	bf00      	nop

00085fd8 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   85fd8:	6441      	str	r1, [r0, #68]	; 0x44
   85fda:	4770      	bx	lr

00085fdc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   85fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85fde:	4604      	mov	r4, r0
   85fe0:	460d      	mov	r5, r1
   85fe2:	4616      	mov	r6, r2
   85fe4:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   85fe6:	f645 73d9 	movw	r3, #24537	; 0x5fd9
   85fea:	f2c0 0308 	movt	r3, #8
   85fee:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   85ff0:	4620      	mov	r0, r4
   85ff2:	4629      	mov	r1, r5
   85ff4:	9a06      	ldr	r2, [sp, #24]
   85ff6:	f645 7389 	movw	r3, #24457	; 0x5f89
   85ffa:	f2c0 0308 	movt	r3, #8
   85ffe:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   86000:	b10f      	cbz	r7, 86006 <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   86002:	6525      	str	r5, [r4, #80]	; 0x50
   86004:	e000      	b.n	86008 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   86006:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   86008:	b10e      	cbz	r6, 8600e <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   8600a:	6325      	str	r5, [r4, #48]	; 0x30
   8600c:	e000      	b.n	86010 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8600e:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   86010:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   86012:	6025      	str	r5, [r4, #0]
   86014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86016:	bf00      	nop

00086018 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   86018:	b570      	push	{r4, r5, r6, lr}
   8601a:	4604      	mov	r4, r0
   8601c:	460d      	mov	r5, r1
   8601e:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   86020:	f645 73d9 	movw	r3, #24537	; 0x5fd9
   86024:	f2c0 0308 	movt	r3, #8
   86028:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   8602a:	4620      	mov	r0, r4
   8602c:	4629      	mov	r1, r5
   8602e:	f006 0201 	and.w	r2, r6, #1
   86032:	f645 7389 	movw	r3, #24457	; 0x5f89
   86036:	f2c0 0308 	movt	r3, #8
   8603a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8603c:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   86040:	bf14      	ite	ne
   86042:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   86044:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   86046:	f016 0f02 	tst.w	r6, #2
   8604a:	d002      	beq.n	86052 <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   8604c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   86050:	e004      	b.n	8605c <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   86052:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_SCIFSR = ul_mask;
   86056:	bf18      	it	ne
   86058:	f8c4 5080 	strne.w	r5, [r4, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8605c:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   8605e:	6025      	str	r5, [r4, #0]
   86060:	bd70      	pop	{r4, r5, r6, pc}
   86062:	bf00      	nop

00086064 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   86064:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   86066:	4770      	bx	lr

00086068 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   86068:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8606a:	4770      	bx	lr

0008606c <pio_set_pin_high>:
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8606c:	ea4f 1350 	mov.w	r3, r0, lsr #5
   86070:	f503 1100 	add.w	r1, r3, #2097152	; 0x200000
   86074:	f201 7207 	addw	r2, r1, #1799	; 0x707
   86078:	ea4f 2342 	mov.w	r3, r2, lsl #9
	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   8607c:	f000 001f 	and.w	r0, r0, #31
   86080:	f04f 0101 	mov.w	r1, #1
   86084:	fa01 f200 	lsl.w	r2, r1, r0
   86088:	631a      	str	r2, [r3, #48]	; 0x30
   8608a:	4770      	bx	lr

0008608c <pio_set_pin_low>:
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8608c:	ea4f 1350 	mov.w	r3, r0, lsr #5
   86090:	f503 1100 	add.w	r1, r3, #2097152	; 0x200000
   86094:	f201 7207 	addw	r2, r1, #1799	; 0x707
   86098:	ea4f 2342 	mov.w	r3, r2, lsl #9
	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   8609c:	f000 001f 	and.w	r0, r0, #31
   860a0:	f04f 0101 	mov.w	r1, #1
   860a4:	fa01 f200 	lsl.w	r2, r1, r0
   860a8:	635a      	str	r2, [r3, #52]	; 0x34
   860aa:	4770      	bx	lr

000860ac <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   860ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   860ae:	b083      	sub	sp, #12
   860b0:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   860b2:	ea4f 1650 	mov.w	r6, r0, lsr #5
   860b6:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
   860ba:	f201 7207 	addw	r2, r1, #1799	; 0x707
   860be:	ea4f 2642 	mov.w	r6, r2, lsl #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   860c2:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   860c6:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   860ca:	d042      	beq.n	86152 <pio_configure_pin+0xa6>
   860cc:	d806      	bhi.n	860dc <pio_configure_pin+0x30>
   860ce:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   860d2:	d00a      	beq.n	860ea <pio_configure_pin+0x3e>
   860d4:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   860d8:	d164      	bne.n	861a4 <pio_configure_pin+0xf8>
   860da:	e020      	b.n	8611e <pio_configure_pin+0x72>
   860dc:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   860e0:	d046      	beq.n	86170 <pio_configure_pin+0xc4>
   860e2:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   860e6:	d15d      	bne.n	861a4 <pio_configure_pin+0xf8>
   860e8:	e042      	b.n	86170 <pio_configure_pin+0xc4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   860ea:	f000 071f 	and.w	r7, r0, #31
   860ee:	f04f 0401 	mov.w	r4, #1
   860f2:	fa04 f707 	lsl.w	r7, r4, r7
   860f6:	4630      	mov	r0, r6
   860f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   860fc:	463a      	mov	r2, r7
   860fe:	f645 7395 	movw	r3, #24469	; 0x5f95
   86102:	f2c0 0308 	movt	r3, #8
   86106:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   86108:	4630      	mov	r0, r6
   8610a:	4639      	mov	r1, r7
   8610c:	ea05 0204 	and.w	r2, r5, r4
   86110:	f645 7389 	movw	r3, #24457	; 0x5f89
   86114:	f2c0 0308 	movt	r3, #8
   86118:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8611a:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   8611c:	e044      	b.n	861a8 <pio_configure_pin+0xfc>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8611e:	f000 001f 	and.w	r0, r0, #31
   86122:	f04f 0401 	mov.w	r4, #1
   86126:	fa04 f700 	lsl.w	r7, r4, r0
   8612a:	4630      	mov	r0, r6
   8612c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   86130:	463a      	mov	r2, r7
   86132:	f645 7395 	movw	r3, #24469	; 0x5f95
   86136:	f2c0 0308 	movt	r3, #8
   8613a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   8613c:	4630      	mov	r0, r6
   8613e:	4639      	mov	r1, r7
   86140:	ea05 0204 	and.w	r2, r5, r4
   86144:	f645 7389 	movw	r3, #24457	; 0x5f89
   86148:	f2c0 0308 	movt	r3, #8
   8614c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8614e:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   86150:	e02a      	b.n	861a8 <pio_configure_pin+0xfc>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   86152:	f000 021f 	and.w	r2, r0, #31
   86156:	f04f 0401 	mov.w	r4, #1
   8615a:	4630      	mov	r0, r6
   8615c:	fa04 f102 	lsl.w	r1, r4, r2
   86160:	462a      	mov	r2, r5
   86162:	f246 0319 	movw	r3, #24601	; 0x6019
   86166:	f2c0 0308 	movt	r3, #8
   8616a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8616c:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8616e:	e01b      	b.n	861a8 <pio_configure_pin+0xfc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   86170:	f000 021f 	and.w	r2, r0, #31
   86174:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   86178:	f005 5360 	and.w	r3, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8617c:	ea05 0104 	and.w	r1, r5, r4
   86180:	9100      	str	r1, [sp, #0]
   86182:	4630      	mov	r0, r6
   86184:	fa04 f102 	lsl.w	r1, r4, r2
   86188:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8618c:	bf14      	ite	ne
   8618e:	2200      	movne	r2, #0
   86190:	2201      	moveq	r2, #1
   86192:	f3c5 0380 	ubfx	r3, r5, #2, #1
   86196:	f645 75dd 	movw	r5, #24541	; 0x5fdd
   8619a:	f2c0 0508 	movt	r5, #8
   8619e:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   861a0:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   861a2:	e001      	b.n	861a8 <pio_configure_pin+0xfc>

	default:
		return 0;
   861a4:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   861a8:	b003      	add	sp, #12
   861aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000861ac <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   861ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   861ae:	4604      	mov	r4, r0
   861b0:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   861b2:	f246 0365 	movw	r3, #24677	; 0x6065
   861b6:	f2c0 0308 	movt	r3, #8
   861ba:	4798      	blx	r3
   861bc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   861be:	4620      	mov	r0, r4
   861c0:	f246 0169 	movw	r1, #24681	; 0x6069
   861c4:	f2c0 0108 	movt	r1, #8
   861c8:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   861ca:	4005      	ands	r5, r0
   861cc:	d014      	beq.n	861f8 <pio_handler_process+0x4c>
   861ce:	4c0b      	ldr	r4, [pc, #44]	; (861fc <pio_handler_process+0x50>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
   861d0:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   861d2:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   861d6:	42b0      	cmp	r0, r6
   861d8:	d10a      	bne.n	861f0 <pio_handler_process+0x44>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   861da:	f854 1c08 	ldr.w	r1, [r4, #-8]
   861de:	4229      	tst	r1, r5
   861e0:	d006      	beq.n	861f0 <pio_handler_process+0x44>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   861e2:	6822      	ldr	r2, [r4, #0]
   861e4:	4630      	mov	r0, r6
   861e6:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   861e8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   861ec:	ea25 0503 	bic.w	r5, r5, r3
   861f0:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   861f4:	2d00      	cmp	r5, #0
   861f6:	d1eb      	bne.n	861d0 <pio_handler_process+0x24>
   861f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   861fa:	bf00      	nop
   861fc:	200715c4 	.word	0x200715c4

00086200 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   86200:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   86202:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   86206:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8620a:	f04f 010b 	mov.w	r1, #11
   8620e:	f246 13ad 	movw	r3, #25005	; 0x61ad
   86212:	f2c0 0308 	movt	r3, #8
   86216:	4798      	blx	r3
   86218:	bd08      	pop	{r3, pc}
   8621a:	bf00      	nop

0008621c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8621c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8621e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   86222:	f2c4 000e 	movt	r0, #16398	; 0x400e
   86226:	f04f 010c 	mov.w	r1, #12
   8622a:	f246 13ad 	movw	r3, #25005	; 0x61ad
   8622e:	f2c0 0308 	movt	r3, #8
   86232:	4798      	blx	r3
   86234:	bd08      	pop	{r3, pc}
   86236:	bf00      	nop

00086238 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   86238:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8623a:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   8623e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   86242:	f04f 010d 	mov.w	r1, #13
   86246:	f246 13ad 	movw	r3, #25005	; 0x61ad
   8624a:	f2c0 0308 	movt	r3, #8
   8624e:	4798      	blx	r3
   86250:	bd08      	pop	{r3, pc}
   86252:	bf00      	nop

00086254 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   86254:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   86256:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   8625a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8625e:	f04f 010e 	mov.w	r1, #14
   86262:	f246 13ad 	movw	r3, #25005	; 0x61ad
   86266:	f2c0 0308 	movt	r3, #8
   8626a:	4798      	blx	r3
   8626c:	bd08      	pop	{r3, pc}
   8626e:	bf00      	nop

00086270 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   86270:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   86274:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8627a:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   8627e:	4308      	orrs	r0, r1
   86280:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   86282:	6e98      	ldr	r0, [r3, #104]	; 0x68
   86284:	f010 0f08 	tst.w	r0, #8
   86288:	d007      	beq.n	8629a <pmc_switch_mck_to_pllack+0x2a>
   8628a:	e010      	b.n	862ae <pmc_switch_mck_to_pllack+0x3e>
   8628c:	f100 33ff 	add.w	r3, r0, #4294967295
   86290:	6e90      	ldr	r0, [r2, #104]	; 0x68
   86292:	f010 0f08 	tst.w	r0, #8
   86296:	d038      	beq.n	8630a <pmc_switch_mck_to_pllack+0x9a>
   86298:	e009      	b.n	862ae <pmc_switch_mck_to_pllack+0x3e>
   8629a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8629e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   862a2:	f2c4 020e 	movt	r2, #16398	; 0x400e
   862a6:	6e91      	ldr	r1, [r2, #104]	; 0x68
   862a8:	f011 0f08 	tst.w	r1, #8
   862ac:	d0ee      	beq.n	8628c <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   862ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   862b2:	f2c4 010e 	movt	r1, #16398	; 0x400e
   862b6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   862b8:	f022 0303 	bic.w	r3, r2, #3
   862bc:	f043 0002 	orr.w	r0, r3, #2
   862c0:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   862c2:	6e89      	ldr	r1, [r1, #104]	; 0x68
   862c4:	f011 0f08 	tst.w	r1, #8
   862c8:	d009      	beq.n	862de <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   862ca:	f04f 0000 	mov.w	r0, #0
   862ce:	4770      	bx	lr
   862d0:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   862d4:	6e91      	ldr	r1, [r2, #104]	; 0x68
   862d6:	f011 0f08 	tst.w	r1, #8
   862da:	d013      	beq.n	86304 <pmc_switch_mck_to_pllack+0x94>
   862dc:	e009      	b.n	862f2 <pmc_switch_mck_to_pllack+0x82>
   862de:	f44f 6300 	mov.w	r3, #2048	; 0x800
   862e2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   862e6:	f2c4 020e 	movt	r2, #16398	; 0x400e
   862ea:	6e90      	ldr	r0, [r2, #104]	; 0x68
   862ec:	f010 0f08 	tst.w	r0, #8
   862f0:	d0ee      	beq.n	862d0 <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   862f2:	f04f 0000 	mov.w	r0, #0
   862f6:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   862f8:	f04f 0001 	mov.w	r0, #1
   862fc:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   862fe:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   86302:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   86304:	3b01      	subs	r3, #1
   86306:	d1f0      	bne.n	862ea <pmc_switch_mck_to_pllack+0x7a>
   86308:	e7f9      	b.n	862fe <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   8630a:	1e58      	subs	r0, r3, #1
   8630c:	d1cb      	bne.n	862a6 <pmc_switch_mck_to_pllack+0x36>
   8630e:	e7f3      	b.n	862f8 <pmc_switch_mck_to_pllack+0x88>

00086310 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   86310:	b188      	cbz	r0, 86336 <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   86312:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   86316:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8631a:	6a08      	ldr	r0, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   8631c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   86320:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   86324:	4002      	ands	r2, r0
   86326:	f04f 0302 	mov.w	r3, #2
   8632a:	f2c0 1337 	movt	r3, #311	; 0x137
   8632e:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   86332:	6208      	str	r0, [r1, #32]
   86334:	4770      	bx	lr
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   86336:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8633a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8633e:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   86340:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   86344:	f020 0203 	bic.w	r2, r0, #3
   86348:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   8634c:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   86350:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   86354:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   86358:	6218      	str	r0, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8635a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8635e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   86362:	6e93      	ldr	r3, [r2, #104]	; 0x68
   86364:	f013 0f01 	tst.w	r3, #1
   86368:	d0fb      	beq.n	86362 <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   8636a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   8636e:	f2c4 010e 	movt	r1, #16398	; 0x400e
   86372:	6a08      	ldr	r0, [r1, #32]
   86374:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   86378:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   8637c:	620b      	str	r3, [r1, #32]
   8637e:	4770      	bx	lr

00086380 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   86380:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   86384:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86388:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8638a:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8638e:	4770      	bx	lr

00086390 <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   86390:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   86394:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86398:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8639c:	629a      	str	r2, [r3, #40]	; 0x28
   8639e:	4770      	bx	lr

000863a0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   863a0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   863a4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   863a8:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   863aa:	f000 0002 	and.w	r0, r0, #2
   863ae:	4770      	bx	lr

000863b0 <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
   863b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   863b4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   863b8:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
   863bc:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   863be:	f44f 60c0 	mov.w	r0, #1536	; 0x600
   863c2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   863c6:	6e81      	ldr	r1, [r0, #104]	; 0x68
   863c8:	f011 0f40 	tst.w	r1, #64	; 0x40
   863cc:	d0fb      	beq.n	863c6 <pmc_enable_upll_clock+0x16>
}
   863ce:	4770      	bx	lr

000863d0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   863d0:	282c      	cmp	r0, #44	; 0x2c
   863d2:	d835      	bhi.n	86440 <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   863d4:	281f      	cmp	r0, #31
   863d6:	d817      	bhi.n	86408 <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   863d8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   863dc:	f2c4 010e 	movt	r1, #16398	; 0x400e
   863e0:	698a      	ldr	r2, [r1, #24]
   863e2:	f04f 0301 	mov.w	r3, #1
   863e6:	fa03 f300 	lsl.w	r3, r3, r0
   863ea:	401a      	ands	r2, r3
   863ec:	4293      	cmp	r3, r2
   863ee:	d02a      	beq.n	86446 <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   863f0:	f04f 0101 	mov.w	r1, #1
   863f4:	fa01 f000 	lsl.w	r0, r1, r0
   863f8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   863fc:	f2c4 020e 	movt	r2, #16398	; 0x400e
   86400:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   86402:	f04f 0000 	mov.w	r0, #0
   86406:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   86408:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8640c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86410:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   86414:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   86418:	f04f 0101 	mov.w	r1, #1
   8641c:	fa01 f100 	lsl.w	r1, r1, r0
   86420:	400a      	ands	r2, r1
   86422:	4291      	cmp	r1, r2
   86424:	d012      	beq.n	8644c <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   86426:	f04f 0301 	mov.w	r3, #1
   8642a:	fa03 f000 	lsl.w	r0, r3, r0
   8642e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   86432:	f2c4 020e 	movt	r2, #16398	; 0x400e
   86436:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   8643a:	f04f 0000 	mov.w	r0, #0
   8643e:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   86440:	f04f 0001 	mov.w	r0, #1
   86444:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   86446:	f04f 0000 	mov.w	r0, #0
   8644a:	4770      	bx	lr
   8644c:	f04f 0000 	mov.w	r0, #0
}
   86450:	4770      	bx	lr
   86452:	bf00      	nop

00086454 <pmc_switch_udpck_to_upllck>:
 *
 * \param dw_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
   86454:	ea4f 2000 	mov.w	r0, r0, lsl #8
   86458:	f400 6270 	and.w	r2, r0, #3840	; 0xf00
   8645c:	f042 0101 	orr.w	r1, r2, #1
   86460:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   86464:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86468:	6399      	str	r1, [r3, #56]	; 0x38
   8646a:	4770      	bx	lr

0008646c <pmc_enable_udpck>:
void pmc_enable_udpck(void)
{
# if (SAM3S || SAM4S || SAM4E)
	PMC->PMC_SCER = PMC_SCER_UDP;
# else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
   8646c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   86470:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86474:	f04f 0220 	mov.w	r2, #32
   86478:	601a      	str	r2, [r3, #0]
   8647a:	4770      	bx	lr

0008647c <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   8647c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   86480:	f2c4 030e 	movt	r3, #16398	; 0x400e
   86484:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   86486:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   8648a:	f420 0178 	bic.w	r1, r0, #16252928	; 0xf80000
	PMC->PMC_FSMR |= ul_inputs;
   8648e:	430a      	orrs	r2, r1
   86490:	671a      	str	r2, [r3, #112]	; 0x70
   86492:	4770      	bx	lr

00086494 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_fastrc_used;
   86494:	f241 6328 	movw	r3, #5672	; 0x1628
   86498:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8649c:	7818      	ldrb	r0, [r3, #0]
}
   8649e:	f080 0001 	eor.w	r0, r0, #1
   864a2:	4770      	bx	lr

000864a4 <udd_sleep_mode>:
 *
 * \param b_enable true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   864a4:	4603      	mov	r3, r0
   864a6:	2800      	cmp	r0, #0
   864a8:	d149      	bne.n	8653e <udd_sleep_mode+0x9a>
   864aa:	f241 622c 	movw	r2, #5676	; 0x162c
   864ae:	f2c2 0207 	movt	r2, #8199	; 0x2007
   864b2:	7811      	ldrb	r1, [r2, #0]
   864b4:	2900      	cmp	r1, #0
   864b6:	d03c      	beq.n	86532 <udd_sleep_mode+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   864b8:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   864bc:	b672      	cpsid	i
   864be:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   864c2:	f240 2290 	movw	r2, #656	; 0x290
   864c6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   864ca:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   864cc:	f641 3284 	movw	r2, #7044	; 0x1b84
   864d0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   864d4:	7890      	ldrb	r0, [r2, #2]
   864d6:	f100 30ff 	add.w	r0, r0, #4294967295
   864da:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   864dc:	bb49      	cbnz	r1, 86532 <udd_sleep_mode+0x8e>
		cpu_irq_enable();
   864de:	f240 2290 	movw	r2, #656	; 0x290
   864e2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   864e6:	f04f 0101 	mov.w	r1, #1
   864ea:	7011      	strb	r1, [r2, #0]
   864ec:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   864f0:	b662      	cpsie	i
   864f2:	e01e      	b.n	86532 <udd_sleep_mode+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   864f4:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   864f8:	b672      	cpsid	i
   864fa:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   864fe:	f240 2290 	movw	r2, #656	; 0x290
   86502:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86506:	f04f 0000 	mov.w	r0, #0
   8650a:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   8650c:	f641 3284 	movw	r2, #7044	; 0x1b84
   86510:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86514:	7890      	ldrb	r0, [r2, #2]
   86516:	f100 0001 	add.w	r0, r0, #1
   8651a:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8651c:	b949      	cbnz	r1, 86532 <udd_sleep_mode+0x8e>
		cpu_irq_enable();
   8651e:	f240 2290 	movw	r2, #656	; 0x290
   86522:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86526:	f04f 0101 	mov.w	r1, #1
   8652a:	7011      	strb	r1, [r2, #0]
   8652c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   86530:	b662      	cpsie	i
	}
	if (b_idle && !udd_b_idle) {
		dbg_print("_W ");
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
   86532:	f241 602c 	movw	r0, #5676	; 0x162c
   86536:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8653a:	7003      	strb	r3, [r0, #0]
   8653c:	4770      	bx	lr
{
	if (!b_idle && udd_b_idle) {
		dbg_print("_S ");
		sleepmgr_unlock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   8653e:	f241 622c 	movw	r2, #5676	; 0x162c
   86542:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86546:	7810      	ldrb	r0, [r2, #0]
   86548:	2800      	cmp	r0, #0
   8654a:	d0d3      	beq.n	864f4 <udd_sleep_mode+0x50>
   8654c:	e7f1      	b.n	86532 <udd_sleep_mode+0x8e>
   8654e:	bf00      	nop

00086550 <udd_ctrl_init>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86550:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   86554:	b672      	cpsid	i
   86556:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8655a:	f240 2390 	movw	r3, #656	; 0x290
   8655e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86562:	f04f 0100 	mov.w	r1, #0
   86566:	7019      	strb	r1, [r3, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   86568:	f24c 2020 	movw	r0, #49696	; 0xc220
   8656c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86570:	f04f 0101 	mov.w	r1, #1
   86574:	6001      	str	r1, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   86576:	b93a      	cbnz	r2, 86588 <udd_ctrl_init+0x38>
		cpu_irq_enable();
   86578:	f240 2390 	movw	r3, #656	; 0x290
   8657c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86580:	7019      	strb	r1, [r3, #0]
   86582:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   86586:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   86588:	f24c 1060 	movw	r0, #49504	; 0xc160
   8658c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86590:	f04f 0102 	mov.w	r1, #2
   86594:	6001      	str	r1, [r0, #0]

	udd_g_ctrlreq.callback = NULL;
   86596:	f641 328c 	movw	r2, #7052	; 0x1b8c
   8659a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8659e:	f04f 0300 	mov.w	r3, #0
   865a2:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   865a4:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   865a6:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   865a8:	f241 61a8 	movw	r1, #5800	; 0x16a8
   865ac:	f2c2 0107 	movt	r1, #8199	; 0x2007
   865b0:	700b      	strb	r3, [r1, #0]
   865b2:	4770      	bx	lr

000865b4 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   865b4:	f241 63a8 	movw	r3, #5800	; 0x16a8
   865b8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   865bc:	f04f 0205 	mov.w	r2, #5
   865c0:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   865c2:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   865c6:	f2c4 000a 	movt	r0, #16394	; 0x400a
   865ca:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   865ce:	6001      	str	r1, [r0, #0]
   865d0:	4770      	bx	lr
   865d2:	bf00      	nop

000865d4 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   865d4:	f241 63a8 	movw	r3, #5800	; 0x16a8
   865d8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   865dc:	f04f 0203 	mov.w	r2, #3
   865e0:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   865e2:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   865e6:	b672      	cpsid	i
   865e8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   865ec:	f240 2190 	movw	r1, #656	; 0x290
   865f0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   865f4:	f04f 0300 	mov.w	r3, #0
   865f8:	700b      	strb	r3, [r1, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   865fa:	f24c 1260 	movw	r2, #49504	; 0xc160
   865fe:	f2c4 020a 	movt	r2, #16394	; 0x400a
   86602:	f04f 0101 	mov.w	r1, #1
   86606:	6011      	str	r1, [r2, #0]
	udd_enable_in_send_interrupt(0);
   86608:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   8660c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   86610:	6019      	str	r1, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   86612:	f04f 0108 	mov.w	r1, #8
   86616:	6011      	str	r1, [r2, #0]
	udd_enable_nak_out_interrupt(0);
   86618:	6019      	str	r1, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8661a:	b948      	cbnz	r0, 86630 <udd_ctrl_send_zlp_in+0x5c>
		cpu_irq_enable();
   8661c:	f240 2090 	movw	r0, #656	; 0x290
   86620:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86624:	f04f 0201 	mov.w	r2, #1
   86628:	7002      	strb	r2, [r0, #0]
   8662a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8662e:	b662      	cpsie	i
   86630:	4770      	bx	lr
   86632:	bf00      	nop

00086634 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   86634:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   86636:	f641 338c 	movw	r3, #7052	; 0x1b8c
   8663a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8663e:	6918      	ldr	r0, [r3, #16]
   86640:	b100      	cbz	r0, 86644 <udd_ctrl_endofrequest+0x10>
		udd_g_ctrlreq.callback();
   86642:	4780      	blx	r0
   86644:	bd08      	pop	{r3, pc}
   86646:	bf00      	nop

00086648 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
   86648:	b570      	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8664a:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8664e:	b672      	cpsid	i
   86650:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   86654:	f240 2390 	movw	r3, #656	; 0x290
   86658:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8665c:	f04f 0100 	mov.w	r1, #0
   86660:	7019      	strb	r1, [r3, #0]
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
   86662:	f24c 2020 	movw	r0, #49696	; 0xc220
   86666:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8666a:	f04f 0101 	mov.w	r1, #1
   8666e:	6001      	str	r1, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   86670:	b93a      	cbnz	r2, 86682 <udd_ctrl_in_sent+0x3a>
		cpu_irq_enable();
   86672:	f240 2390 	movw	r3, #656	; 0x290
   86676:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8667a:	7019      	strb	r1, [r3, #0]
   8667c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   86680:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   86682:	f241 60a8 	movw	r0, #5800	; 0x16a8
   86686:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8668a:	7801      	ldrb	r1, [r0, #0]
   8668c:	2903      	cmp	r1, #3
   8668e:	d10a      	bne.n	866a6 <udd_ctrl_in_sent+0x5e>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   86690:	f246 6235 	movw	r2, #26165	; 0x6635
   86694:	f2c0 0208 	movt	r2, #8
   86698:	4790      	blx	r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
   8669a:	f246 5051 	movw	r0, #25937	; 0x6551
   8669e:	f2c0 0008 	movt	r0, #8
   866a2:	4780      	blx	r0
		return;
   866a4:	bd70      	pop	{r4, r5, r6, pc}
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   866a6:	f241 64aa 	movw	r4, #5802	; 0x16aa
   866aa:	f2c2 0407 	movt	r4, #8199	; 0x2007
   866ae:	8823      	ldrh	r3, [r4, #0]
   866b0:	f641 328c 	movw	r2, #7052	; 0x1b8c
   866b4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   866b8:	8990      	ldrh	r0, [r2, #12]
   866ba:	1ac1      	subs	r1, r0, r3
   866bc:	b28c      	uxth	r4, r1
	if (0 == nb_remain) {
   866be:	2c00      	cmp	r4, #0
   866c0:	d155      	bne.n	8676e <udd_ctrl_in_sent+0x126>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous playlaod buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   866c2:	f241 622a 	movw	r2, #5674	; 0x162a
   866c6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   866ca:	8810      	ldrh	r0, [r2, #0]
   866cc:	181b      	adds	r3, r3, r0
   866ce:	b299      	uxth	r1, r3
   866d0:	8011      	strh	r1, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   866d2:	f641 328c 	movw	r2, #7052	; 0x1b8c
   866d6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   866da:	88d0      	ldrh	r0, [r2, #6]
   866dc:	4288      	cmp	r0, r1
   866de:	d005      	beq.n	866ec <udd_ctrl_in_sent+0xa4>
					|| b_shortpacket) {
   866e0:	f241 63ac 	movw	r3, #5804	; 0x16ac
   866e4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   866e8:	7819      	ldrb	r1, [r3, #0]
   866ea:	b361      	cbz	r1, 86746 <udd_ctrl_in_sent+0xfe>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   866ec:	f241 60a8 	movw	r0, #5800	; 0x16a8
   866f0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   866f4:	f04f 0204 	mov.w	r2, #4
   866f8:	7002      	strb	r2, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   866fa:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   866fe:	b672      	cpsid	i
   86700:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   86704:	f240 2390 	movw	r3, #656	; 0x290
   86708:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8670c:	f04f 0000 	mov.w	r0, #0
   86710:	7018      	strb	r0, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
   86712:	f24c 1360 	movw	r3, #49504	; 0xc160
   86716:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8671a:	f04f 0210 	mov.w	r2, #16
   8671e:	601a      	str	r2, [r3, #0]
	udd_enable_nak_in_interrupt(0);
   86720:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   86724:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86728:	6002      	str	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8672a:	2900      	cmp	r1, #0
   8672c:	f040 80a7 	bne.w	8687e <udd_ctrl_in_sent+0x236>
		cpu_irq_enable();
   86730:	f240 2190 	movw	r1, #656	; 0x290
   86734:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86738:	f04f 0301 	mov.w	r3, #1
   8673c:	700b      	strb	r3, [r1, #0]
   8673e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   86742:	b662      	cpsie	i
   86744:	bd70      	pop	{r4, r5, r6, pc}
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   86746:	f641 358c 	movw	r5, #7052	; 0x1b8c
   8674a:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8674e:	696e      	ldr	r6, [r5, #20]
   86750:	b1ce      	cbz	r6, 86786 <udd_ctrl_in_sent+0x13e>
				|| (!udd_g_ctrlreq.over_under_run())) {
   86752:	47b0      	blx	r6
   86754:	b1b8      	cbz	r0, 86786 <udd_ctrl_in_sent+0x13e>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   86756:	f241 64aa 	movw	r4, #5802	; 0x16aa
   8675a:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8675e:	f04f 0200 	mov.w	r2, #0
   86762:	8022      	strh	r2, [r4, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   86764:	f641 308c 	movw	r0, #7052	; 0x1b8c
   86768:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8676c:	8984      	ldrh	r4, [r0, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   8676e:	2c3f      	cmp	r4, #63	; 0x3f
   86770:	d909      	bls.n	86786 <udd_ctrl_in_sent+0x13e>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
   86772:	f241 63ac 	movw	r3, #5804	; 0x16ac
   86776:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8677a:	f04f 0100 	mov.w	r1, #0
   8677e:	7019      	strb	r1, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   86780:	f04f 0440 	mov.w	r4, #64	; 0x40
   86784:	e006      	b.n	86794 <udd_ctrl_in_sent+0x14c>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
   86786:	f241 65ac 	movw	r5, #5804	; 0x16ac
   8678a:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8678e:	f04f 0601 	mov.w	r6, #1
   86792:	702e      	strb	r6, [r5, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   86794:	f641 328c 	movw	r2, #7052	; 0x1b8c
   86798:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8679c:	6890      	ldr	r0, [r2, #8]
   8679e:	f241 63aa 	movw	r3, #5802	; 0x16aa
   867a2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   867a6:	881e      	ldrh	r6, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   867a8:	f3ef 8110 	mrs	r1, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   867ac:	f1d1 0501 	rsbs	r5, r1, #1
   867b0:	bf38      	it	cc
   867b2:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   867b4:	b672      	cpsid	i
   867b6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   867ba:	f240 2290 	movw	r2, #656	; 0x290
   867be:	f2c2 0207 	movt	r2, #8199	; 0x2007
   867c2:	f04f 0300 	mov.w	r3, #0
   867c6:	7013      	strb	r3, [r2, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
   867c8:	f24c 1130 	movw	r1, #49456	; 0xc130
   867cc:	f2c4 010a 	movt	r1, #16394	; 0x400a
   867d0:	680a      	ldr	r2, [r1, #0]
   867d2:	f012 0f02 	tst.w	r2, #2
   867d6:	d101      	bne.n	867dc <udd_ctrl_in_sent+0x194>
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   867d8:	b99c      	cbnz	r4, 86802 <udd_ctrl_in_sent+0x1ba>
   867da:	e035      	b.n	86848 <udd_ctrl_in_sent+0x200>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   867dc:	b14d      	cbz	r5, 867f2 <udd_ctrl_in_sent+0x1aa>
		cpu_irq_enable();
   867de:	f240 2090 	movw	r0, #656	; 0x290
   867e2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   867e6:	f04f 0201 	mov.w	r2, #1
   867ea:	7002      	strb	r2, [r0, #0]
   867ec:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   867f0:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   867f2:	f241 61a8 	movw	r1, #5800	; 0x16a8
   867f6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   867fa:	f04f 0304 	mov.w	r3, #4
   867fe:	700b      	strb	r3, [r1, #0]
		return; // Exit of IN DATA phase
   86800:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   86802:	1982      	adds	r2, r0, r6
		cpu_irq_restore(flags);
	}
}


static void udd_ctrl_in_sent(void)
   86804:	f04f 0300 	mov.w	r3, #0
   86808:	f2c2 0318 	movt	r3, #8216	; 0x2018
   8680c:	ea6f 0003 	mvn.w	r0, r3
   86810:	1901      	adds	r1, r0, r4
   86812:	f001 0001 	and.w	r0, r1, #1
   86816:	f102 32ff 	add.w	r2, r2, #4294967295
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
   8681a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   8681e:	f803 1b01 	strb.w	r1, [r3], #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   86822:	b2d9      	uxtb	r1, r3
   86824:	42a1      	cmp	r1, r4
   86826:	d32b      	bcc.n	86880 <udd_ctrl_in_sent+0x238>
   86828:	e00e      	b.n	86848 <udd_ctrl_in_sent+0x200>
   8682a:	f102 0001 	add.w	r0, r2, #1
		*ptr_dest++ = *ptr_src++;
   8682e:	7852      	ldrb	r2, [r2, #1]
   86830:	4619      	mov	r1, r3
   86832:	f801 2b01 	strb.w	r2, [r1], #1
   86836:	f100 0201 	add.w	r2, r0, #1
   8683a:	7840      	ldrb	r0, [r0, #1]
   8683c:	7058      	strb	r0, [r3, #1]
   8683e:	f101 0301 	add.w	r3, r1, #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   86842:	b2d9      	uxtb	r1, r3
   86844:	42a1      	cmp	r1, r4
   86846:	d3f0      	bcc.n	8682a <udd_ctrl_in_sent+0x1e2>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   86848:	19a4      	adds	r4, r4, r6
   8684a:	f241 63aa 	movw	r3, #5802	; 0x16aa
   8684e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86852:	801c      	strh	r4, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   86854:	f24c 1060 	movw	r0, #49504	; 0xc160
   86858:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8685c:	f04f 0201 	mov.w	r2, #1
   86860:	6002      	str	r2, [r0, #0]
	udd_enable_in_send_interrupt(0);
   86862:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   86866:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8686a:	600a      	str	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8686c:	b13d      	cbz	r5, 8687e <udd_ctrl_in_sent+0x236>
		cpu_irq_enable();
   8686e:	f240 2390 	movw	r3, #656	; 0x290
   86872:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86876:	701a      	strb	r2, [r3, #0]
   86878:	f3bf 8f5f 	dmb	sy
   8687c:	b662      	cpsie	i
   8687e:	bd70      	pop	{r4, r5, r6, pc}
   86880:	b240      	sxtb	r0, r0
   86882:	2800      	cmp	r0, #0
   86884:	d0d1      	beq.n	8682a <udd_ctrl_in_sent+0x1e2>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
   86886:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   8688a:	f803 1b01 	strb.w	r1, [r3], #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   8688e:	b2d8      	uxtb	r0, r3
   86890:	42a0      	cmp	r0, r4
   86892:	d3ca      	bcc.n	8682a <udd_ctrl_in_sent+0x1e2>
   86894:	e7d8      	b.n	86848 <udd_ctrl_in_sent+0x200>
   86896:	bf00      	nop

00086898 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   86898:	b538      	push	{r3, r4, r5, lr}
   8689a:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
   8689c:	7d04      	ldrb	r4, [r0, #20]
   8689e:	f014 0f01 	tst.w	r4, #1
   868a2:	d013      	beq.n	868cc <udd_ep_finish_job+0x34>
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
   868a4:	7d04      	ldrb	r4, [r0, #20]
   868a6:	f36f 0400 	bfc	r4, #0, #1
   868aa:	7504      	strb	r4, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   868ac:	6804      	ldr	r4, [r0, #0]
   868ae:	b16c      	cbz	r4, 868cc <udd_ep_finish_job+0x34>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   868b0:	f44f 4541 	mov.w	r5, #49408	; 0xc100
   868b4:	f2c4 050a 	movt	r5, #16394	; 0x400a
   868b8:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
   868bc:	f410 7f80 	tst.w	r0, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
   868c0:	bf18      	it	ne
   868c2:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   868c6:	4608      	mov	r0, r1
   868c8:	6899      	ldr	r1, [r3, #8]
   868ca:	47a0      	blx	r4
   868cc:	bd38      	pop	{r3, r4, r5, pc}
   868ce:	bf00      	nop

000868d0 <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   868d0:	b508      	push	{r3, lr}
	ep &= USB_EP_ADDR_MASK;
   868d2:	f000 020f 	and.w	r2, r0, #15

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   868d6:	f102 30ff 	add.w	r0, r2, #4294967295
   868da:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   868de:	f241 6330 	movw	r3, #5680	; 0x1630
   868e2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   868e6:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
   868ea:	f04f 0101 	mov.w	r1, #1
   868ee:	f646 0399 	movw	r3, #26777	; 0x6899
   868f2:	f2c0 0308 	movt	r3, #8
   868f6:	4798      	blx	r3
   868f8:	bd08      	pop	{r3, pc}
   868fa:	bf00      	nop

000868fc <udd_ep_trans_done>:
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

#ifdef UDD_EP_DMA_SUPPORTED
static void udd_ep_trans_done(udd_ep_id_t ep)
{
   868fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   868fe:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   86900:	f100 31ff 	add.w	r1, r0, #4294967295
   86904:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   86908:	f241 6330 	movw	r3, #5680	; 0x1630
   8690c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86910:	eb03 03c0 	add.w	r3, r3, r0, lsl #3

	if (!ptr_job->busy) {
   86914:	7d18      	ldrb	r0, [r3, #20]
   86916:	f010 0f01 	tst.w	r0, #1
   8691a:	f000 80c6 	beq.w	86aaa <udd_ep_trans_done+0x1ae>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   8691e:	68dc      	ldr	r4, [r3, #12]
   86920:	689d      	ldr	r5, [r3, #8]
   86922:	42ac      	cmp	r4, r5
   86924:	f000 8082 	beq.w	86a2c <udd_ep_trans_done+0x130>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   86928:	1b2d      	subs	r5, r5, r4

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   8692a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   8692e:	bf92      	itee	ls
   86930:	042e      	lslls	r6, r5, #16
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   86932:	f44f 3580 	movhi.w	r5, #65536	; 0x10000

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
   86936:	2600      	movhi	r6, #0
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
		}
		if (Is_udd_endpoint_in(ep)) {
   86938:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   8693c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86940:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   86944:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
   86948:	f417 7f80 	tst.w	r7, #256	; 0x100
   8694c:	d011      	beq.n	86972 <udd_ep_trans_done+0x76>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   8694e:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
   86952:	f3c7 1002 	ubfx	r0, r7, #4, #3
   86956:	f04f 0708 	mov.w	r7, #8
   8695a:	fa07 f000 	lsl.w	r0, r7, r0
   8695e:	f100 30ff 	add.w	r0, r0, #4294967295
   86962:	4205      	tst	r5, r0
   86964:	d017      	beq.n	86996 <udd_ep_trans_done+0x9a>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
   86966:	433e      	orrs	r6, r7
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   86968:	7d1f      	ldrb	r7, [r3, #20]
   8696a:	f36f 0741 	bfc	r7, #1, #1
   8696e:	751f      	strb	r7, [r3, #20]
   86970:	e011      	b.n	86996 <udd_ep_trans_done+0x9a>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   86972:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
   86976:	f3c0 27c1 	ubfx	r7, r0, #11, #2
   8697a:	2f01      	cmp	r7, #1
   8697c:	d109      	bne.n	86992 <udd_ep_trans_done+0x96>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   8697e:	f8dc 0000 	ldr.w	r0, [ip]
   86982:	f3c0 1002 	ubfx	r0, r0, #4, #3
   86986:	f04f 0708 	mov.w	r7, #8
   8698a:	fa07 f000 	lsl.w	r0, r7, r0
   8698e:	4285      	cmp	r5, r0
   86990:	d801      	bhi.n	86996 <udd_ep_trans_done+0x9a>

				// Enable short packet reception
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   86992:	f046 0614 	orr.w	r6, r6, #20
						| UOTGHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   86996:	f44f 4043 	mov.w	r0, #49920	; 0xc300
   8699a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8699e:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   869a2:	685f      	ldr	r7, [r3, #4]
   869a4:	193c      	adds	r4, r7, r4
   869a6:	6044      	str	r4, [r0, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   869a8:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   869ac:	f1d7 0c01 	rsbs	ip, r7, #1
   869b0:	bf38      	it	cc
   869b2:	f04f 0c00 	movcc.w	ip, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   869b6:	b672      	cpsid	i
   869b8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   869bc:	f240 2490 	movw	r4, #656	; 0x290
   869c0:	f2c2 0407 	movt	r4, #8199	; 0x2007
   869c4:	f04f 0700 	mov.w	r7, #0
   869c8:	7027      	strb	r7, [r4, #0]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   869ca:	68c4      	ldr	r4, [r0, #12]
   869cc:	f014 0f10 	tst.w	r4, #16
   869d0:	d11d      	bne.n	86a0e <udd_ep_trans_done+0x112>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   869d2:	f046 0621 	orr.w	r6, r6, #33	; 0x21
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
				& UOTGHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   869d6:	6086      	str	r6, [r0, #8]
			ptr_job->buf_cnt += next_trans;
   869d8:	68da      	ldr	r2, [r3, #12]
   869da:	1950      	adds	r0, r2, r5
   869dc:	60d8      	str	r0, [r3, #12]
			ptr_job->buf_load = next_trans;
   869de:	611d      	str	r5, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   869e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   869e4:	fa03 f101 	lsl.w	r1, r3, r1
   869e8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   869ec:	f2c4 020a 	movt	r2, #16394	; 0x400a
   869f0:	6191      	str	r1, [r2, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   869f2:	f1bc 0f00 	cmp.w	ip, #0
   869f6:	d058      	beq.n	86aaa <udd_ep_trans_done+0x1ae>
		cpu_irq_enable();
   869f8:	f240 2090 	movw	r0, #656	; 0x290
   869fc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86a00:	f04f 0301 	mov.w	r3, #1
   86a04:	7003      	strb	r3, [r0, #0]
   86a06:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   86a0a:	b662      	cpsie	i
   86a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   86a0e:	f1bc 0f00 	cmp.w	ip, #0
   86a12:	d009      	beq.n	86a28 <udd_ep_trans_done+0x12c>
		cpu_irq_enable();
   86a14:	f240 2190 	movw	r1, #656	; 0x290
   86a18:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86a1c:	f04f 0001 	mov.w	r0, #1
   86a20:	7008      	strb	r0, [r1, #0]
   86a22:	f3bf 8f5f 	dmb	sy
   86a26:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   86a28:	68d9      	ldr	r1, [r3, #12]
   86a2a:	6099      	str	r1, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   86a2c:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   86a30:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86a34:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
   86a38:	f411 7f80 	tst.w	r1, #256	; 0x100
   86a3c:	d02d      	beq.n	86a9a <udd_ep_trans_done+0x19e>
		if (ptr_job->b_shortpacket) {
   86a3e:	7d18      	ldrb	r0, [r3, #20]
   86a40:	f000 0102 	and.w	r1, r0, #2
   86a44:	b2c8      	uxtb	r0, r1
   86a46:	b340      	cbz	r0, 86a9a <udd_ep_trans_done+0x19e>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
   86a48:	f24c 1060 	movw	r0, #49504	; 0xc160
   86a4c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86a50:	f04f 0101 	mov.w	r1, #1
   86a54:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			if (Is_udd_write_enabled(ep)) {
   86a58:	f24c 1330 	movw	r3, #49456	; 0xc130
   86a5c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   86a60:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   86a64:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   86a68:	d005      	beq.n	86a76 <udd_ep_trans_done+0x17a>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
   86a6a:	f24c 1390 	movw	r3, #49552	; 0xc190
   86a6e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   86a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
   86a76:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   86a7a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86a7e:	f04f 0101 	mov.w	r1, #1
   86a82:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			udd_enable_endpoint_interrupt(ep);
   86a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   86a8a:	fa03 f202 	lsl.w	r2, r3, r2
   86a8e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   86a92:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86a96:	6182      	str	r2, [r0, #24]
			return;
   86a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   86a9a:	4618      	mov	r0, r3
   86a9c:	f04f 0100 	mov.w	r1, #0
   86aa0:	f646 0399 	movw	r3, #26777	; 0x6899
   86aa4:	f2c0 0308 	movt	r3, #8
   86aa8:	4798      	blx	r3
   86aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00086aac <udd_enable>:
	return true;
}


void udd_enable(void)
{
   86aac:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86aae:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   86ab2:	b672      	cpsid	i
   86ab4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   86ab8:	f240 2390 	movw	r3, #656	; 0x290
   86abc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86ac0:	f04f 0200 	mov.w	r2, #0
   86ac4:	701a      	strb	r2, [r3, #0]
		cpu_irq_restore(flags);
		return;
	}
#else
	// SINGLE DEVICE MODE INITIALIZATION
	pmc_enable_periph_clk(ID_UOTGHS);
   86ac6:	f04f 0028 	mov.w	r0, #40	; 0x28
   86aca:	f246 31d1 	movw	r1, #25553	; 0x63d1
   86ace:	f2c0 0108 	movt	r1, #8
   86ad2:	4788      	blx	r1
	sysclk_enable_usb();
   86ad4:	f643 208d 	movw	r0, #14989	; 0x3a8d
   86ad8:	f2c0 0008 	movt	r0, #8
   86adc:	4780      	blx	r0
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   86ade:	f44f 4361 	mov.w	r3, #57600	; 0xe100
   86ae2:	f2ce 0300 	movt	r3, #57344	; 0xe000
   86ae6:	f04f 0250 	mov.w	r2, #80	; 0x50
   86aea:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   86aee:	f44f 7180 	mov.w	r1, #256	; 0x100
   86af2:	6059      	str	r1, [r3, #4]
	NVIC_SetPriority((IRQn_Type) ID_UOTGHS, UDD_USB_INT_LEVEL);
	NVIC_EnableIRQ((IRQn_Type) ID_UOTGHS);

	// Always authorize asynchrone USB interrupts to exit of sleep mode
	// For SAM USB wake up device except BACKUP mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   86af4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   86af8:	f246 437d 	movw	r3, #25725	; 0x647d
   86afc:	f2c0 0308 	movt	r3, #8
   86b00:	4798      	blx	r3
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
#else
	// ID pin not used then force device mode
	otg_disable_id_pin();
   86b02:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   86b06:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86b0a:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
   86b0e:	f022 7180 	bic.w	r1, r2, #16777216	; 0x1000000
   86b12:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
	otg_force_device_mode();
   86b16:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   86b1a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
   86b1e:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
   86b22:	f8d0 1800 	ldr.w	r1, [r0, #2048]	; 0x800
   86b26:	f021 7380 	bic.w	r3, r1, #16777216	; 0x1000000
   86b2a:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
#endif
	// Enable USB hardware
	otg_enable_pad();
   86b2e:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
   86b32:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
   86b36:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
	otg_enable();
   86b3a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   86b3e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
   86b42:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
   86b46:	6801      	ldr	r1, [r0, #0]
   86b48:	f421 5380 	bic.w	r3, r1, #4096	; 0x1000
   86b4c:	6003      	str	r3, [r0, #0]
# ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   86b4e:	6802      	ldr	r2, [r0, #0]
   86b50:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
   86b54:	6001      	str	r1, [r0, #0]
	udd_high_speed_disable();
# endif
#endif // USB_DEVICE_LOW_SPEED

	// Check USB clock
	otg_unfreeze_clock();
   86b56:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   86b5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
   86b5e:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   86b62:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   86b66:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86b6a:	f8d0 1804 	ldr.w	r1, [r0, #2052]	; 0x804
   86b6e:	f411 4f80 	tst.w	r1, #16384	; 0x4000
   86b72:	d0fa      	beq.n	86b6a <udd_enable+0xbe>

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   86b74:	f241 6330 	movw	r3, #5680	; 0x1630
   86b78:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86b7c:	7d1a      	ldrb	r2, [r3, #20]
		udd_ep_job[i].stall_requested = false;
   86b7e:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
   86b82:	f36f 0082 	bfc	r0, #2, #1
   86b86:	7518      	strb	r0, [r3, #20]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   86b88:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
		udd_ep_job[i].stall_requested = false;
   86b8c:	f001 02fe 	and.w	r2, r1, #254	; 0xfe
   86b90:	f36f 0282 	bfc	r2, #2, #1
   86b94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   86b98:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
		udd_ep_job[i].stall_requested = false;
   86b9c:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
   86ba0:	f36f 0182 	bfc	r1, #2, #1
   86ba4:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   86ba8:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
		udd_ep_job[i].stall_requested = false;
   86bac:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
   86bb0:	f36f 0082 	bfc	r0, #2, #1
   86bb4:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   86bb8:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
		udd_ep_job[i].stall_requested = false;
   86bbc:	f001 02fe 	and.w	r2, r1, #254	; 0xfe
   86bc0:	f36f 0282 	bfc	r2, #2, #1
   86bc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
#endif

	otg_ack_vbus_transition();
   86bc8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   86bcc:	f2c4 030a 	movt	r3, #16394	; 0x400a
   86bd0:	f04f 0002 	mov.w	r0, #2
   86bd4:	f8c3 0808 	str.w	r0, [r3, #2056]	; 0x808
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
   86bd8:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
   86bdc:	f411 6f00 	tst.w	r1, #2048	; 0x800
   86be0:	d005      	beq.n	86bee <udd_enable+0x142>
		otg_raise_vbus_transition();
   86be2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   86be6:	f2c4 020a 	movt	r2, #16394	; 0x400a
   86bea:	f8c2 080c 	str.w	r0, [r2, #2060]	; 0x80c
	}
	otg_enable_vbus_interrupt();
   86bee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   86bf2:	f2c4 030a 	movt	r3, #16394	; 0x400a
   86bf6:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
   86bfa:	f040 0102 	orr.w	r1, r0, #2
   86bfe:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	otg_freeze_clock();
   86c02:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   86c06:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   86c0a:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800

#ifndef UDD_NO_SLEEP_MGR
	if (!udd_b_sleep_initialized) {
   86c0e:	f241 6329 	movw	r3, #5673	; 0x1629
   86c12:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86c16:	7819      	ldrb	r1, [r3, #0]
   86c18:	bb59      	cbnz	r1, 86c72 <udd_enable+0x1c6>
		udd_b_sleep_initialized = true;
   86c1a:	f241 6029 	movw	r0, #5673	; 0x1629
   86c1e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86c22:	f04f 0301 	mov.w	r3, #1
   86c26:	7003      	strb	r3, [r0, #0]
		// Initialize the sleep mode authorized for the USB suspend mode
		udd_b_idle = false;
   86c28:	f04f 0000 	mov.w	r0, #0
   86c2c:	f241 612c 	movw	r1, #5676	; 0x162c
   86c30:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86c34:	7008      	strb	r0, [r1, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86c36:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   86c3a:	b672      	cpsid	i
   86c3c:	f3bf 8f5f 	dmb	sy
   86c40:	f240 2390 	movw	r3, #656	; 0x290
   86c44:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86c48:	7018      	strb	r0, [r3, #0]
   86c4a:	f641 3084 	movw	r0, #7044	; 0x1b84
   86c4e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86c52:	78c1      	ldrb	r1, [r0, #3]
   86c54:	f101 0101 	add.w	r1, r1, #1
   86c58:	70c1      	strb	r1, [r0, #3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   86c5a:	b98a      	cbnz	r2, 86c80 <udd_enable+0x1d4>
		cpu_irq_enable();
   86c5c:	f240 2390 	movw	r3, #656	; 0x290
   86c60:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86c64:	f04f 0201 	mov.w	r2, #1
   86c68:	701a      	strb	r2, [r3, #0]
   86c6a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   86c6e:	b662      	cpsie	i
   86c70:	e006      	b.n	86c80 <udd_enable+0x1d4>
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_SUSPEND);
	} else {
		udd_sleep_mode(false); // Enter idle mode
   86c72:	f04f 0000 	mov.w	r0, #0
   86c76:	f246 42a5 	movw	r2, #25765	; 0x64a5
   86c7a:	f2c0 0208 	movt	r2, #8
   86c7e:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   86c80:	b94c      	cbnz	r4, 86c96 <udd_enable+0x1ea>
		cpu_irq_enable();
   86c82:	f240 2090 	movw	r0, #656	; 0x290
   86c86:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86c8a:	f04f 0101 	mov.w	r1, #1
   86c8e:	7001      	strb	r1, [r0, #0]
   86c90:	f3bf 8f5f 	dmb	sy
   86c94:	b662      	cpsie	i
   86c96:	bd10      	pop	{r4, pc}

00086c98 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   86c98:	b570      	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86c9a:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   86c9e:	b672      	cpsid	i
   86ca0:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   86ca4:	f240 2390 	movw	r3, #656	; 0x290
   86ca8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86cac:	f04f 0200 	mov.w	r2, #0
   86cb0:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   86cb2:	f04f 0001 	mov.w	r0, #1
   86cb6:	f246 41a5 	movw	r1, #25765	; 0x64a5
   86cba:	f2c0 0108 	movt	r1, #8
   86cbe:	4788      	blx	r1
	otg_unfreeze_clock();
   86cc0:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   86cc4:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86cc8:	f8d0 5800 	ldr.w	r5, [r0, #2048]	; 0x800
   86ccc:	f425 4680 	bic.w	r6, r5, #16384	; 0x4000
   86cd0:	f8c0 6800 	str.w	r6, [r0, #2048]	; 0x800

	// This section of clock check can be improved with a chek of
	// USB clock source via sysclk()
	// Check USB clock because the source can be a PLL
	while (!Is_otg_clock_usable());
   86cd4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   86cd8:	f2c4 020a 	movt	r2, #16394	; 0x400a
   86cdc:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   86ce0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   86ce4:	d0fa      	beq.n	86cdc <udd_attach+0x44>

	// Authorize attach if Vbus is present
	udd_attach_device();
   86ce6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   86cea:	f2c4 030a 	movt	r3, #16394	; 0x400a
   86cee:	6819      	ldr	r1, [r3, #0]
   86cf0:	f421 7080 	bic.w	r0, r1, #256	; 0x100
   86cf4:	6018      	str	r0, [r3, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   86cf6:	f04f 0608 	mov.w	r6, #8
   86cfa:	619e      	str	r6, [r3, #24]
	udd_enable_suspend_interrupt();
   86cfc:	f04f 0101 	mov.w	r1, #1
   86d00:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
   86d02:	f04f 0210 	mov.w	r2, #16
   86d06:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   86d08:	f04f 0504 	mov.w	r5, #4
   86d0c:	619d      	str	r5, [r3, #24]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   86d0e:	f04f 0002 	mov.w	r0, #2
   86d12:	6198      	str	r0, [r3, #24]
#endif
	// Reset following interupts flag
	udd_ack_reset();
   86d14:	609e      	str	r6, [r3, #8]
	udd_ack_sof();
   86d16:	609d      	str	r5, [r3, #8]
	udd_ack_msof();
   86d18:	6098      	str	r0, [r3, #8]

	// The first suspend interrupt must be forced
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
   86d1a:	60d9      	str	r1, [r3, #12]

	udd_ack_wake_up();
   86d1c:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   86d1e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   86d22:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   86d26:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   86d2a:	b93c      	cbnz	r4, 86d3c <udd_attach+0xa4>
		cpu_irq_enable();
   86d2c:	f240 2390 	movw	r3, #656	; 0x290
   86d30:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86d34:	7019      	strb	r1, [r3, #0]
   86d36:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   86d3a:	b662      	cpsie	i
   86d3c:	bd70      	pop	{r4, r5, r6, pc}
   86d3e:	bf00      	nop

00086d40 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
   86d40:	b508      	push	{r3, lr}
	otg_unfreeze_clock();
   86d42:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   86d46:	f2c4 030a 	movt	r3, #16394	; 0x400a
   86d4a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   86d4e:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   86d52:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800

	// Detach device from the bus
	udd_detach_device();
   86d56:	6819      	ldr	r1, [r3, #0]
   86d58:	f441 7280 	orr.w	r2, r1, #256	; 0x100
   86d5c:	601a      	str	r2, [r3, #0]
	otg_freeze_clock();
   86d5e:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
   86d62:	f440 4180 	orr.w	r1, r0, #16384	; 0x4000
   86d66:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	udd_sleep_mode(false);
   86d6a:	f04f 0000 	mov.w	r0, #0
   86d6e:	f246 43a5 	movw	r3, #25765	; 0x64a5
   86d72:	f2c0 0308 	movt	r3, #8
   86d76:	4798      	blx	r3
   86d78:	bd08      	pop	{r3, pc}
   86d7a:	bf00      	nop

00086d7c <UOTGHS_Handler>:
void udd_interrupt(void);
void udd_interrupt(void)
#else
ISR(UDD_USB_INT_FUN)
#endif
{
   86d7c:	b570      	push	{r4, r5, r6, lr}
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   86d7e:	f246 4395 	movw	r3, #25749	; 0x6495
   86d82:	f2c0 0308 	movt	r3, #8
   86d86:	4798      	blx	r3
   86d88:	b990      	cbnz	r0, 86db0 <UOTGHS_Handler+0x34>
   86d8a:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   86d8e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86d92:	6841      	ldr	r1, [r0, #4]
   86d94:	f011 0f01 	tst.w	r1, #1
   86d98:	d10a      	bne.n	86db0 <UOTGHS_Handler+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   86d9a:	b672      	cpsid	i
   86d9c:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   86da0:	f240 2090 	movw	r0, #656	; 0x290
   86da4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86da8:	f04f 0200 	mov.w	r2, #0
   86dac:	7002      	strb	r2, [r0, #0]
		return;
   86dae:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_sof()) {
   86db0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   86db4:	f2c4 020a 	movt	r2, #16394	; 0x400a
   86db8:	6853      	ldr	r3, [r2, #4]
   86dba:	f013 0f04 	tst.w	r3, #4
   86dbe:	d016      	beq.n	86dee <UOTGHS_Handler+0x72>
		udd_ack_sof();
   86dc0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   86dc4:	f2c4 010a 	movt	r1, #16394	; 0x400a
   86dc8:	f04f 0004 	mov.w	r0, #4
   86dcc:	6088      	str	r0, [r1, #8]
		if (Is_udd_full_speed_mode()) {
   86dce:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
   86dd2:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   86dd6:	d104      	bne.n	86de2 <UOTGHS_Handler+0x66>
			udc_sof_notify();
   86dd8:	f245 53f1 	movw	r3, #22001	; 0x55f1
   86ddc:	f2c0 0308 	movt	r3, #8
   86de0:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   86de2:	f243 6155 	movw	r1, #13909	; 0x3655
   86de6:	f2c0 0108 	movt	r1, #8
   86dea:	4788      	blx	r1
#endif
		goto udd_interrupt_sof_end;
   86dec:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_msof()) {
   86dee:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   86df2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86df6:	6841      	ldr	r1, [r0, #4]
   86df8:	f011 0f02 	tst.w	r1, #2
   86dfc:	d00c      	beq.n	86e18 <UOTGHS_Handler+0x9c>
		udd_ack_msof();
   86dfe:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   86e02:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86e06:	f04f 0202 	mov.w	r2, #2
   86e0a:	6082      	str	r2, [r0, #8]
		udc_sof_notify();
   86e0c:	f245 53f1 	movw	r3, #22001	; 0x55f1
   86e10:	f2c0 0308 	movt	r3, #8
   86e14:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   86e16:	bd70      	pop	{r4, r5, r6, pc}


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0)) {
   86e18:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   86e1c:	f2c4 020a 	movt	r2, #16394	; 0x400a
   86e20:	6853      	ldr	r3, [r2, #4]
   86e22:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   86e26:	f000 8459 	beq.w	876dc <UOTGHS_Handler+0x960>
	}

	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   86e2a:	f24c 2020 	movw	r0, #49696	; 0xc220
   86e2e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86e32:	f04f 0110 	mov.w	r1, #16
   86e36:	6001      	str	r1, [r0, #0]
	udd_disable_nak_out_interrupt(0);
   86e38:	f04f 0208 	mov.w	r2, #8
   86e3c:	6002      	str	r2, [r0, #0]

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
   86e3e:	f24c 1330 	movw	r3, #49456	; 0xc130
   86e42:	f2c4 030a 	movt	r3, #16394	; 0x400a
   86e46:	6818      	ldr	r0, [r3, #0]
   86e48:	f010 0f04 	tst.w	r0, #4
   86e4c:	f000 80d9 	beq.w	87002 <UOTGHS_Handler+0x286>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   86e50:	f241 61a8 	movw	r1, #5800	; 0x16a8
   86e54:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86e58:	780a      	ldrb	r2, [r1, #0]
   86e5a:	b14a      	cbz	r2, 86e70 <UOTGHS_Handler+0xf4>
		// May be a hidden DATA or ZLP phase or protocol abort
		udd_ctrl_endofrequest();
   86e5c:	f246 6035 	movw	r0, #26165	; 0x6635
   86e60:	f2c0 0008 	movt	r0, #8
   86e64:	4780      	blx	r0

		// Reinitializes control endpoint management
		udd_ctrl_init();
   86e66:	f246 5351 	movw	r3, #25937	; 0x6551
   86e6a:	f2c0 0308 	movt	r3, #8
   86e6e:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   86e70:	f24c 1130 	movw	r1, #49456	; 0xc130
   86e74:	f2c4 010a 	movt	r1, #16394	; 0x400a
   86e78:	680a      	ldr	r2, [r1, #0]
   86e7a:	f3c2 500a 	ubfx	r0, r2, #20, #11
   86e7e:	2808      	cmp	r0, #8
   86e80:	d00c      	beq.n	86e9c <UOTGHS_Handler+0x120>
		udd_ctrl_stall_data();
   86e82:	f246 51b5 	movw	r1, #26037	; 0x65b5
   86e86:	f2c0 0108 	movt	r1, #8
   86e8a:	4788      	blx	r1
		udd_ack_setup_received(0);
   86e8c:	f24c 1360 	movw	r3, #49504	; 0xc160
   86e90:	f2c4 030a 	movt	r3, #16394	; 0x400a
   86e94:	f04f 0204 	mov.w	r2, #4
   86e98:	601a      	str	r2, [r3, #0]
   86e9a:	bd70      	pop	{r4, r5, r6, pc}
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   86e9c:	f04f 0300 	mov.w	r3, #0
   86ea0:	f2c2 0318 	movt	r3, #8216	; 0x2018
   86ea4:	7819      	ldrb	r1, [r3, #0]
   86ea6:	f641 308c 	movw	r0, #7052	; 0x1b8c
   86eaa:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86eae:	7001      	strb	r1, [r0, #0]
   86eb0:	f04f 0201 	mov.w	r2, #1
   86eb4:	f2c2 0218 	movt	r2, #8216	; 0x2018
   86eb8:	7813      	ldrb	r3, [r2, #0]
   86eba:	7043      	strb	r3, [r0, #1]
   86ebc:	f04f 0102 	mov.w	r1, #2
   86ec0:	f2c2 0118 	movt	r1, #8216	; 0x2018
   86ec4:	780a      	ldrb	r2, [r1, #0]
   86ec6:	7082      	strb	r2, [r0, #2]
   86ec8:	f04f 0303 	mov.w	r3, #3
   86ecc:	f2c2 0318 	movt	r3, #8216	; 0x2018
   86ed0:	7819      	ldrb	r1, [r3, #0]
   86ed2:	70c1      	strb	r1, [r0, #3]
   86ed4:	f04f 0204 	mov.w	r2, #4
   86ed8:	f2c2 0218 	movt	r2, #8216	; 0x2018
   86edc:	7813      	ldrb	r3, [r2, #0]
   86ede:	7103      	strb	r3, [r0, #4]
   86ee0:	f04f 0105 	mov.w	r1, #5
   86ee4:	f2c2 0118 	movt	r1, #8216	; 0x2018
   86ee8:	780a      	ldrb	r2, [r1, #0]
   86eea:	7142      	strb	r2, [r0, #5]
   86eec:	f04f 0306 	mov.w	r3, #6
   86ef0:	f2c2 0318 	movt	r3, #8216	; 0x2018
   86ef4:	7819      	ldrb	r1, [r3, #0]
   86ef6:	7181      	strb	r1, [r0, #6]
   86ef8:	f04f 0207 	mov.w	r2, #7
   86efc:	f2c2 0218 	movt	r2, #8216	; 0x2018
   86f00:	7813      	ldrb	r3, [r2, #0]
   86f02:	71c3      	strb	r3, [r0, #7]
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   86f04:	f245 6039 	movw	r0, #22073	; 0x5639
   86f08:	f2c0 0008 	movt	r0, #8
   86f0c:	4780      	blx	r0
   86f0e:	b960      	cbnz	r0, 86f2a <UOTGHS_Handler+0x1ae>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
   86f10:	f246 52b5 	movw	r2, #26037	; 0x65b5
   86f14:	f2c0 0208 	movt	r2, #8
   86f18:	4790      	blx	r2
		udd_ack_setup_received(0);
   86f1a:	f24c 1360 	movw	r3, #49504	; 0xc160
   86f1e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   86f22:	f04f 0004 	mov.w	r0, #4
   86f26:	6018      	str	r0, [r3, #0]
   86f28:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}
	udd_ack_setup_received(0);
   86f2a:	f24c 1160 	movw	r1, #49504	; 0xc160
   86f2e:	f2c4 010a 	movt	r1, #16394	; 0x400a
   86f32:	f04f 0204 	mov.w	r2, #4
   86f36:	600a      	str	r2, [r1, #0]

	if (Udd_setup_is_in()) {
   86f38:	f641 338c 	movw	r3, #7052	; 0x1b8c
   86f3c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86f40:	f993 0000 	ldrsb.w	r0, [r3]
   86f44:	2800      	cmp	r0, #0
   86f46:	da18      	bge.n	86f7a <UOTGHS_Handler+0x1fe>
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   86f48:	f04f 0000 	mov.w	r0, #0
   86f4c:	f241 612a 	movw	r1, #5674	; 0x162a
   86f50:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86f54:	8008      	strh	r0, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   86f56:	f241 62aa 	movw	r2, #5802	; 0x16aa
   86f5a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86f5e:	8010      	strh	r0, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   86f60:	f241 63a8 	movw	r3, #5800	; 0x16a8
   86f64:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86f68:	f04f 0002 	mov.w	r0, #2
   86f6c:	7018      	strb	r0, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   86f6e:	f246 6149 	movw	r1, #26185	; 0x6649
   86f72:	f2c0 0108 	movt	r1, #8
   86f76:	4788      	blx	r1
   86f78:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
   86f7a:	f641 318c 	movw	r1, #7052	; 0x1b8c
   86f7e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86f82:	88ca      	ldrh	r2, [r1, #6]
   86f84:	b92a      	cbnz	r2, 86f92 <UOTGHS_Handler+0x216>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   86f86:	f246 53d5 	movw	r3, #26069	; 0x65d5
   86f8a:	f2c0 0308 	movt	r3, #8
   86f8e:	4798      	blx	r3
   86f90:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   86f92:	f04f 0300 	mov.w	r3, #0
   86f96:	4618      	mov	r0, r3
   86f98:	f241 612a 	movw	r1, #5674	; 0x162a
   86f9c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86fa0:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   86fa2:	f241 62aa 	movw	r2, #5802	; 0x16aa
   86fa6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86faa:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   86fac:	f241 63a8 	movw	r3, #5800	; 0x16a8
   86fb0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86fb4:	f04f 0101 	mov.w	r1, #1
   86fb8:	7019      	strb	r1, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   86fba:	f24c 1360 	movw	r3, #49504	; 0xc160
   86fbe:	f2c4 030a 	movt	r3, #16394	; 0x400a
   86fc2:	f04f 0210 	mov.w	r2, #16
   86fc6:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86fc8:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   86fcc:	b672      	cpsid	i
   86fce:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   86fd2:	f240 2390 	movw	r3, #656	; 0x290
   86fd6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86fda:	7018      	strb	r0, [r3, #0]
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
   86fdc:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   86fe0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   86fe4:	6002      	str	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   86fe6:	2900      	cmp	r1, #0
   86fe8:	f040 8471 	bne.w	878ce <UOTGHS_Handler+0xb52>
		cpu_irq_enable();
   86fec:	f240 2190 	movw	r1, #656	; 0x290
   86ff0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86ff4:	f04f 0201 	mov.w	r2, #1
   86ff8:	700a      	strb	r2, [r1, #0]
   86ffa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   86ffe:	b662      	cpsie	i
   87000:	bd70      	pop	{r4, r5, r6, pc}
		dbg_print("stup ");
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   87002:	f24c 1130 	movw	r1, #49456	; 0xc130
   87006:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8700a:	680a      	ldr	r2, [r1, #0]
   8700c:	f012 0f01 	tst.w	r2, #1
   87010:	d00d      	beq.n	8702e <UOTGHS_Handler+0x2b2>
   87012:	f24c 13c0 	movw	r3, #49600	; 0xc1c0
   87016:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8701a:	6818      	ldr	r0, [r3, #0]
   8701c:	f010 0f01 	tst.w	r0, #1
   87020:	d005      	beq.n	8702e <UOTGHS_Handler+0x2b2>
		dbg_print("in ");
		// IN packet sent
		udd_ctrl_in_sent();
   87022:	f246 6349 	movw	r3, #26185	; 0x6649
   87026:	f2c0 0308 	movt	r3, #8
   8702a:	4798      	blx	r3
   8702c:	bd70      	pop	{r4, r5, r6, pc}
		return true;
	}
	if (Is_udd_out_received(0)) {
   8702e:	f24c 1130 	movw	r1, #49456	; 0xc130
   87032:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87036:	680a      	ldr	r2, [r1, #0]
   87038:	f012 0f02 	tst.w	r2, #2
   8703c:	f000 80de 	beq.w	871fc <UOTGHS_Handler+0x480>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   87040:	f241 60a8 	movw	r0, #5800	; 0x16a8
   87044:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87048:	7801      	ldrb	r1, [r0, #0]
   8704a:	2901      	cmp	r1, #1
   8704c:	d014      	beq.n	87078 <UOTGHS_Handler+0x2fc>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   8704e:	2902      	cmp	r1, #2
   87050:	d001      	beq.n	87056 <UOTGHS_Handler+0x2da>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   87052:	2904      	cmp	r1, #4
   87054:	d105      	bne.n	87062 <UOTGHS_Handler+0x2e6>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
   87056:	f246 6235 	movw	r2, #26165	; 0x6635
   8705a:	f2c0 0208 	movt	r2, #8
   8705e:	4790      	blx	r2
   87060:	e004      	b.n	8706c <UOTGHS_Handler+0x2f0>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   87062:	f246 51b5 	movw	r1, #26037	; 0x65b5
   87066:	f2c0 0108 	movt	r1, #8
   8706a:	4788      	blx	r1
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   8706c:	f246 5051 	movw	r0, #25937	; 0x6551
   87070:	f2c0 0008 	movt	r0, #8
   87074:	4780      	blx	r0
   87076:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   87078:	f24c 1430 	movw	r4, #49456	; 0xc130
   8707c:	f2c4 040a 	movt	r4, #16394	; 0x400a
   87080:	6826      	ldr	r6, [r4, #0]
   87082:	f3c6 540a 	ubfx	r4, r6, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   87086:	f641 338c 	movw	r3, #7052	; 0x1b8c
   8708a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8708e:	8998      	ldrh	r0, [r3, #12]
   87090:	f241 62aa 	movw	r2, #5802	; 0x16aa
   87094:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87098:	8816      	ldrh	r6, [r2, #0]
   8709a:	1931      	adds	r1, r6, r4
   8709c:	4288      	cmp	r0, r1
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   8709e:	bfae      	itee	ge
   870a0:	b2a4      	uxthge	r4, r4
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   870a2:	ebc6 0000 	rsblt	r0, r6, r0
   870a6:	b284      	uxthlt	r4, r0
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   870a8:	f641 338c 	movw	r3, #7052	; 0x1b8c
   870ac:	f2c2 0307 	movt	r3, #8199	; 0x2007
   870b0:	6898      	ldr	r0, [r3, #8]
   870b2:	1982      	adds	r2, r0, r6
	for (i = 0; i < nb_data; i++) {
   870b4:	b3b4      	cbz	r4, 87124 <UOTGHS_Handler+0x3a8>
   870b6:	f04f 0300 	mov.w	r3, #0
   870ba:	f2c2 0318 	movt	r3, #8216	; 0x2018
   870be:	ea6f 0103 	mvn.w	r1, r3
   870c2:	1908      	adds	r0, r1, r4
   870c4:	f000 0101 	and.w	r1, r0, #1
		*ptr_dest++ = *ptr_src++;
   870c8:	f813 0b01 	ldrb.w	r0, [r3], #1
   870cc:	f802 0b01 	strb.w	r0, [r2], #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   870d0:	b2d8      	uxtb	r0, r3
   870d2:	42a0      	cmp	r0, r4
   870d4:	f0c0 83fc 	bcc.w	878d0 <UOTGHS_Handler+0xb54>
   870d8:	e00e      	b.n	870f8 <UOTGHS_Handler+0x37c>
		*ptr_dest++ = *ptr_src++;
   870da:	4618      	mov	r0, r3
   870dc:	f810 5b01 	ldrb.w	r5, [r0], #1
   870e0:	4611      	mov	r1, r2
   870e2:	f801 5b01 	strb.w	r5, [r1], #1
   870e6:	785d      	ldrb	r5, [r3, #1]
   870e8:	f100 0301 	add.w	r3, r0, #1
   870ec:	7055      	strb	r5, [r2, #1]
   870ee:	f101 0201 	add.w	r2, r1, #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   870f2:	b2d8      	uxtb	r0, r3
   870f4:	42a0      	cmp	r0, r4
   870f6:	d3f0      	bcc.n	870da <UOTGHS_Handler+0x35e>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   870f8:	19a6      	adds	r6, r4, r6
   870fa:	b2b6      	uxth	r6, r6
   870fc:	f241 62aa 	movw	r2, #5802	; 0x16aa
   87100:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87104:	8016      	strh	r6, [r2, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   87106:	2c40      	cmp	r4, #64	; 0x40
   87108:	d10c      	bne.n	87124 <UOTGHS_Handler+0x3a8>
			|| (udd_g_ctrlreq.req.wLength <=
   8710a:	f641 338c 	movw	r3, #7052	; 0x1b8c
   8710e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87112:	88d9      	ldrh	r1, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
   87114:	f241 602a 	movw	r0, #5674	; 0x162a
   87118:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8711c:	8802      	ldrh	r2, [r0, #0]
   8711e:	1993      	adds	r3, r2, r6
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
   87120:	4299      	cmp	r1, r3
   87122:	dc22      	bgt.n	8716a <UOTGHS_Handler+0x3ee>
					(udd_ctrl_prev_payload_buf_cnt +
							udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   87124:	f641 318c 	movw	r1, #7052	; 0x1b8c
   87128:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8712c:	818e      	strh	r6, [r1, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   8712e:	694a      	ldr	r2, [r1, #20]
   87130:	b172      	cbz	r2, 87150 <UOTGHS_Handler+0x3d4>
			if (!udd_g_ctrlreq.over_under_run()) {
   87132:	4790      	blx	r2
   87134:	b960      	cbnz	r0, 87150 <UOTGHS_Handler+0x3d4>
				// Stall ZLP
				udd_ctrl_stall_data();
   87136:	f246 52b5 	movw	r2, #26037	; 0x65b5
   8713a:	f2c0 0208 	movt	r2, #8
   8713e:	4790      	blx	r2
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   87140:	f24c 1060 	movw	r0, #49504	; 0xc160
   87144:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87148:	f04f 0302 	mov.w	r3, #2
   8714c:	6003      	str	r3, [r0, #0]
   8714e:	bd70      	pop	{r4, r5, r6, pc}
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   87150:	f24c 1060 	movw	r0, #49504	; 0xc160
   87154:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87158:	f04f 0302 	mov.w	r3, #2
   8715c:	6003      	str	r3, [r0, #0]
		udd_ctrl_send_zlp_in();
   8715e:	f246 51d5 	movw	r1, #26069	; 0x65d5
   87162:	f2c0 0108 	movt	r1, #8
   87166:	4788      	blx	r1
   87168:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   8716a:	49ae      	ldr	r1, [pc, #696]	; (87424 <UOTGHS_Handler+0x6a8>)
   8716c:	8988      	ldrh	r0, [r1, #12]
   8716e:	42b0      	cmp	r0, r6
   87170:	d121      	bne.n	871b6 <UOTGHS_Handler+0x43a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   87172:	4aac      	ldr	r2, [pc, #688]	; (87424 <UOTGHS_Handler+0x6a8>)
   87174:	6953      	ldr	r3, [r2, #20]
   87176:	b94b      	cbnz	r3, 8718c <UOTGHS_Handler+0x410>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
   87178:	4aab      	ldr	r2, [pc, #684]	; (87428 <UOTGHS_Handler+0x6ac>)
   8717a:	4790      	blx	r2
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   8717c:	f24c 1060 	movw	r0, #49504	; 0xc160
   87180:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87184:	f04f 0302 	mov.w	r3, #2
   87188:	6003      	str	r3, [r0, #0]
   8718a:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   8718c:	4798      	blx	r3
   8718e:	b948      	cbnz	r0, 871a4 <UOTGHS_Handler+0x428>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   87190:	48a5      	ldr	r0, [pc, #660]	; (87428 <UOTGHS_Handler+0x6ac>)
   87192:	4780      	blx	r0
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   87194:	f24c 1360 	movw	r3, #49504	; 0xc160
   87198:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8719c:	f04f 0102 	mov.w	r1, #2
   871a0:	6019      	str	r1, [r3, #0]
   871a2:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   871a4:	4aa1      	ldr	r2, [pc, #644]	; (8742c <UOTGHS_Handler+0x6b0>)
   871a6:	4ba2      	ldr	r3, [pc, #648]	; (87430 <UOTGHS_Handler+0x6b4>)
   871a8:	8818      	ldrh	r0, [r3, #0]
   871aa:	8811      	ldrh	r1, [r2, #0]
   871ac:	1840      	adds	r0, r0, r1
   871ae:	8010      	strh	r0, [r2, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   871b0:	f04f 0200 	mov.w	r2, #0
   871b4:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   871b6:	f24c 1360 	movw	r3, #49504	; 0xc160
   871ba:	f2c4 030a 	movt	r3, #16394	; 0x400a
   871be:	f04f 0102 	mov.w	r1, #2
   871c2:	6019      	str	r1, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   871c4:	f04f 0210 	mov.w	r2, #16
   871c8:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   871ca:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   871ce:	b672      	cpsid	i
   871d0:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   871d4:	4b97      	ldr	r3, [pc, #604]	; (87434 <UOTGHS_Handler+0x6b8>)
   871d6:	f04f 0000 	mov.w	r0, #0
   871da:	7018      	strb	r0, [r3, #0]
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
   871dc:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   871e0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   871e4:	601a      	str	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   871e6:	2900      	cmp	r1, #0
   871e8:	f040 8371 	bne.w	878ce <UOTGHS_Handler+0xb52>
		cpu_irq_enable();
   871ec:	4991      	ldr	r1, [pc, #580]	; (87434 <UOTGHS_Handler+0x6b8>)
   871ee:	f04f 0201 	mov.w	r2, #1
   871f2:	700a      	strb	r2, [r1, #0]
   871f4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   871f8:	b662      	cpsie	i
   871fa:	bd70      	pop	{r4, r5, r6, pc}
		dbg_print("out ");
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
   871fc:	f24c 1330 	movw	r3, #49456	; 0xc130
   87200:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87204:	6818      	ldr	r0, [r3, #0]
   87206:	f010 0f08 	tst.w	r0, #8
   8720a:	d01f      	beq.n	8724c <UOTGHS_Handler+0x4d0>
		dbg_print("nako ");
		// Overflow on OUT packet
		udd_ack_nak_out(0);
   8720c:	f24c 1060 	movw	r0, #49504	; 0xc160
   87210:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87214:	f04f 0108 	mov.w	r1, #8
   87218:	6001      	str	r1, [r0, #0]
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
   8721a:	f24c 1230 	movw	r2, #49456	; 0xc130
   8721e:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87222:	6813      	ldr	r3, [r2, #0]
   87224:	f013 0f01 	tst.w	r3, #1
   87228:	f040 8351 	bne.w	878ce <UOTGHS_Handler+0xb52>
		return; // Overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   8722c:	f241 60a8 	movw	r0, #5800	; 0x16a8
   87230:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87234:	7801      	ldrb	r1, [r0, #0]
   87236:	2903      	cmp	r1, #3
   87238:	f040 8349 	bne.w	878ce <UOTGHS_Handler+0xb52>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   8723c:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   87240:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87244:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   87248:	601a      	str	r2, [r3, #0]
   8724a:	bd70      	pop	{r4, r5, r6, pc}
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
   8724c:	f24c 1130 	movw	r1, #49456	; 0xc130
   87250:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87254:	680a      	ldr	r2, [r1, #0]
   87256:	f012 0f10 	tst.w	r2, #16
   8725a:	f000 823f 	beq.w	876dc <UOTGHS_Handler+0x960>
		dbg_print("naki ");
		// Underflow on IN packet
		udd_ack_nak_in(0);
   8725e:	f24c 1360 	movw	r3, #49504	; 0xc160
   87262:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87266:	f04f 0010 	mov.w	r0, #16
   8726a:	6018      	str	r0, [r3, #0]
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
   8726c:	f24c 1130 	movw	r1, #49456	; 0xc130
   87270:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87274:	680a      	ldr	r2, [r1, #0]
   87276:	f012 0f02 	tst.w	r2, #2
   8727a:	f040 8328 	bne.w	878ce <UOTGHS_Handler+0xb52>
		return; // Underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   8727e:	f241 63a8 	movw	r3, #5800	; 0x16a8
   87282:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87286:	7818      	ldrb	r0, [r3, #0]
   87288:	2801      	cmp	r0, #1
   8728a:	d105      	bne.n	87298 <UOTGHS_Handler+0x51c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   8728c:	f246 53d5 	movw	r3, #26069	; 0x65d5
   87290:	f2c0 0308 	movt	r3, #8
   87294:	4798      	blx	r3
   87296:	bd70      	pop	{r4, r5, r6, pc}
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   87298:	2804      	cmp	r0, #4
   8729a:	f040 8318 	bne.w	878ce <UOTGHS_Handler+0xb52>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   8729e:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   872a2:	f2c4 010a 	movt	r1, #16394	; 0x400a
   872a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   872aa:	600a      	str	r2, [r1, #0]
   872ac:	bd70      	pop	{r4, r5, r6, pc}
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   872ae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   872b2:	f2c4 030a 	movt	r3, #16394	; 0x400a
   872b6:	685a      	ldr	r2, [r3, #4]
   872b8:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   872bc:	d03c      	beq.n	87338 <UOTGHS_Handler+0x5bc>
   872be:	f04f 0005 	mov.w	r0, #5
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   872c2:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   872c6:	495c      	ldr	r1, [pc, #368]	; (87438 <UOTGHS_Handler+0x6bc>)
   872c8:	e019      	b.n	872fe <UOTGHS_Handler+0x582>

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   872ca:	f04f 0001 	mov.w	r0, #1
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   872ce:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   872d2:	f241 6130 	movw	r1, #5680	; 0x1630
   872d6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   872da:	e010      	b.n	872fe <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   872dc:	f04f 0002 	mov.w	r0, #2
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   872e0:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   872e4:	4955      	ldr	r1, [pc, #340]	; (8743c <UOTGHS_Handler+0x6c0>)
   872e6:	e00a      	b.n	872fe <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   872e8:	f04f 0003 	mov.w	r0, #3
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   872ec:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   872f0:	4953      	ldr	r1, [pc, #332]	; (87440 <UOTGHS_Handler+0x6c4>)
   872f2:	e004      	b.n	872fe <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   872f4:	f04f 0004 	mov.w	r0, #4
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   872f8:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   872fc:	4951      	ldr	r1, [pc, #324]	; (87444 <UOTGHS_Handler+0x6c8>)
#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   872fe:	f44f 4243 	mov.w	r2, #49920	; 0xc300
   87302:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87306:	eb02 1300 	add.w	r3, r2, r0, lsl #4
   8730a:	68da      	ldr	r2, [r3, #12]
   8730c:	f012 0f01 	tst.w	r2, #1
   87310:	f040 82dd 	bne.w	878ce <UOTGHS_Handler+0xb52>
					& UOTGHS_DEVDMASTATUS_CHANN_ENB) {
				return true; // Ignore EOT_STA interrupt
			}
			dbg_print("dma%x: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   87314:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   87318:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8731c:	6154      	str	r4, [r2, #20]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   8731e:	68db      	ldr	r3, [r3, #12]
					UOTGHS_DEVDMASTATUS_BUFF_COUNT_Msk)
					>> UOTGHS_DEVDMASTATUS_BUFF_COUNT_Pos;
			if (nb_remaining) {
   87320:	0c1b      	lsrs	r3, r3, #16
   87322:	d003      	beq.n	8732c <UOTGHS_Handler+0x5b0>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   87324:	68ca      	ldr	r2, [r1, #12]
   87326:	1ad3      	subs	r3, r2, r3
   87328:	60cb      	str	r3, [r1, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   8732a:	608b      	str	r3, [r1, #8]
			}
			udd_ep_trans_done(ep);
   8732c:	f646 01fd 	movw	r1, #26877	; 0x68fd
   87330:	f2c0 0108 	movt	r1, #8
   87334:	4788      	blx	r1
   87336:	bd70      	pop	{r4, r5, r6, pc}
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   87338:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   8733c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87340:	6901      	ldr	r1, [r0, #16]
   87342:	f411 3f00 	tst.w	r1, #131072	; 0x20000
   87346:	f000 80a9 	beq.w	8749c <UOTGHS_Handler+0x720>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8734a:	f24c 13d4 	movw	r3, #49620	; 0xc1d4
   8734e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87352:	681a      	ldr	r2, [r3, #0]
   87354:	f012 0f01 	tst.w	r2, #1
   87358:	d03b      	beq.n	873d2 <UOTGHS_Handler+0x656>
					&& Is_udd_in_send(ep)) {
   8735a:	f24c 1044 	movw	r0, #49476	; 0xc144
   8735e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87362:	6801      	ldr	r1, [r0, #0]
   87364:	f011 0f01 	tst.w	r1, #1
   87368:	d033      	beq.n	873d2 <UOTGHS_Handler+0x656>
   8736a:	f04f 0205 	mov.w	r2, #5
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8736e:	f04f 0314 	mov.w	r3, #20
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87372:	4831      	ldr	r0, [pc, #196]	; (87438 <UOTGHS_Handler+0x6bc>)
   87374:	e016      	b.n	873a4 <UOTGHS_Handler+0x628>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   87376:	f04f 0201 	mov.w	r2, #1
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8737a:	f04f 0304 	mov.w	r3, #4
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8737e:	4832      	ldr	r0, [pc, #200]	; (87448 <UOTGHS_Handler+0x6cc>)
   87380:	e010      	b.n	873a4 <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   87382:	f04f 0202 	mov.w	r2, #2
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87386:	f04f 0308 	mov.w	r3, #8
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8738a:	482c      	ldr	r0, [pc, #176]	; (8743c <UOTGHS_Handler+0x6c0>)
   8738c:	e00a      	b.n	873a4 <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8738e:	f04f 0203 	mov.w	r2, #3
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87392:	f04f 030c 	mov.w	r3, #12
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87396:	482a      	ldr	r0, [pc, #168]	; (87440 <UOTGHS_Handler+0x6c4>)
   87398:	e004      	b.n	873a4 <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8739a:	f04f 0204 	mov.w	r2, #4
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8739e:	f04f 0310 	mov.w	r3, #16
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   873a2:	4828      	ldr	r0, [pc, #160]	; (87444 <UOTGHS_Handler+0x6c8>)
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
   873a4:	f24c 2120 	movw	r1, #49696	; 0xc220
   873a8:	f2c4 010a 	movt	r1, #16394	; 0x400a
   873ac:	f04f 0501 	mov.w	r5, #1
   873b0:	505d      	str	r5, [r3, r1]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
   873b2:	f24c 1460 	movw	r4, #49504	; 0xc160
   873b6:	f2c4 040a 	movt	r4, #16394	; 0x400a
   873ba:	511d      	str	r5, [r3, r4]
				udd_ack_fifocon(ep);
   873bc:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   873c0:	505c      	str	r4, [r3, r1]
				udd_ep_finish_job(ptr_job, false, ep);
   873c2:	f04f 0100 	mov.w	r1, #0
   873c6:	f646 0399 	movw	r3, #26777	; 0x6899
   873ca:	f2c0 0308 	movt	r3, #8
   873ce:	4798      	blx	r3
   873d0:	bd70      	pop	{r4, r5, r6, pc}
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   873d2:	f24c 13d4 	movw	r3, #49620	; 0xc1d4
   873d6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   873da:	681a      	ldr	r2, [r3, #0]
   873dc:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   873e0:	d05c      	beq.n	8749c <UOTGHS_Handler+0x720>
					&& (0 == udd_nb_busy_bank(ep))) {
   873e2:	f24c 1044 	movw	r0, #49476	; 0xc144
   873e6:	f2c4 000a 	movt	r0, #16394	; 0x400a
   873ea:	6801      	ldr	r1, [r0, #0]
   873ec:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   873f0:	d154      	bne.n	8749c <UOTGHS_Handler+0x720>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   873f2:	f04f 0314 	mov.w	r3, #20
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   873f6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   873fa:	4a0f      	ldr	r2, [pc, #60]	; (87438 <UOTGHS_Handler+0x6bc>)
   873fc:	e02b      	b.n	87456 <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   873fe:	f04f 0304 	mov.w	r3, #4
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   87402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87406:	4a10      	ldr	r2, [pc, #64]	; (87448 <UOTGHS_Handler+0x6cc>)
   87408:	e025      	b.n	87456 <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8740a:	f04f 0308 	mov.w	r3, #8
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8740e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87412:	4a0a      	ldr	r2, [pc, #40]	; (8743c <UOTGHS_Handler+0x6c0>)
   87414:	e01f      	b.n	87456 <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87416:	f04f 030c 	mov.w	r3, #12
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8741a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8741e:	4a08      	ldr	r2, [pc, #32]	; (87440 <UOTGHS_Handler+0x6c4>)
   87420:	e019      	b.n	87456 <UOTGHS_Handler+0x6da>
   87422:	bf00      	nop
   87424:	20071b8c 	.word	0x20071b8c
   87428:	000865b5 	.word	0x000865b5
   8742c:	2007162a 	.word	0x2007162a
   87430:	200716aa 	.word	0x200716aa
   87434:	20070290 	.word	0x20070290
   87438:	20071690 	.word	0x20071690
   8743c:	20071648 	.word	0x20071648
   87440:	20071660 	.word	0x20071660
   87444:	20071678 	.word	0x20071678
   87448:	20071630 	.word	0x20071630
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8744c:	f04f 0310 	mov.w	r3, #16
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   87450:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   87454:	4abf      	ldr	r2, [pc, #764]	; (87754 <UOTGHS_Handler+0x9d8>)
			}
			if (Is_udd_bank_interrupt_enabled(ep)
					&& (0 == udd_nb_busy_bank(ep))) {
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   87456:	f24c 2020 	movw	r0, #49696	; 0xc220
   8745a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8745e:	f44f 5480 	mov.w	r4, #4096	; 0x1000
   87462:	501c      	str	r4, [r3, r0]
				udd_disable_endpoint_interrupt(ep);
   87464:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87468:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8746c:	6141      	str	r1, [r0, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
   8746e:	7d11      	ldrb	r1, [r2, #20]
   87470:	f36f 0182 	bfc	r1, #2, #1
   87474:	7511      	strb	r1, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   87476:	f44f 4241 	mov.w	r2, #49408	; 0xc100
   8747a:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8747e:	5898      	ldr	r0, [r3, r2]
   87480:	f420 7100 	bic.w	r1, r0, #512	; 0x200
   87484:	5099      	str	r1, [r3, r2]
				udd_enable_stall_handshake(ep);
   87486:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   8748a:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8748e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   87492:	5098      	str	r0, [r3, r2]
				udd_reset_data_toggle(ep);
   87494:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   87498:	5099      	str	r1, [r3, r2]
   8749a:	bd70      	pop	{r4, r5, r6, pc}
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   8749c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   874a0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   874a4:	685a      	ldr	r2, [r3, #4]
   874a6:	f012 0f08 	tst.w	r2, #8
   874aa:	d07a      	beq.n	875a2 <UOTGHS_Handler+0x826>
		udd_ack_reset();
   874ac:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   874b0:	f2c4 040a 	movt	r4, #16394	; 0x400a
   874b4:	f04f 0508 	mov.w	r5, #8
   874b8:	60a5      	str	r5, [r4, #8]
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   874ba:	f241 6630 	movw	r6, #5680	; 0x1630
   874be:	f2c2 0607 	movt	r6, #8199	; 0x2007
   874c2:	4630      	mov	r0, r6
   874c4:	f04f 0101 	mov.w	r1, #1
   874c8:	460a      	mov	r2, r1
   874ca:	f646 0599 	movw	r5, #26777	; 0x6899
   874ce:	f2c0 0508 	movt	r5, #8
   874d2:	47a8      	blx	r5
   874d4:	f106 0018 	add.w	r0, r6, #24
   874d8:	f04f 0101 	mov.w	r1, #1
   874dc:	f04f 0202 	mov.w	r2, #2
   874e0:	47a8      	blx	r5
   874e2:	f106 0030 	add.w	r0, r6, #48	; 0x30
   874e6:	f04f 0101 	mov.w	r1, #1
   874ea:	f04f 0203 	mov.w	r2, #3
   874ee:	47a8      	blx	r5
   874f0:	f106 0048 	add.w	r0, r6, #72	; 0x48
   874f4:	f04f 0101 	mov.w	r1, #1
   874f8:	f04f 0204 	mov.w	r2, #4
   874fc:	47a8      	blx	r5
   874fe:	f106 0060 	add.w	r0, r6, #96	; 0x60
   87502:	f04f 0101 	mov.w	r1, #1
   87506:	f04f 0205 	mov.w	r2, #5
   8750a:	47a8      	blx	r5
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
   8750c:	f245 538d 	movw	r3, #21901	; 0x558d
   87510:	f2c0 0308 	movt	r3, #8
   87514:	4798      	blx	r3
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   87516:	6822      	ldr	r2, [r4, #0]
   87518:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   8751c:	6021      	str	r1, [r4, #0]
	udd_enable_address();
   8751e:	6820      	ldr	r0, [r4, #0]
   87520:	f040 0380 	orr.w	r3, r0, #128	; 0x80
   87524:	6023      	str	r3, [r4, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   87526:	f44f 4141 	mov.w	r1, #49408	; 0xc100
   8752a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8752e:	680a      	ldr	r2, [r1, #0]
   87530:	f422 50cb 	bic.w	r0, r2, #6496	; 0x1960
   87534:	f020 031c 	bic.w	r3, r0, #28
   87538:	f043 0230 	orr.w	r2, r3, #48	; 0x30
   8753c:	600a      	str	r2, [r1, #0]
		USB_EP_TYPE_CONTROL,
		0,
		USB_DEVICE_EP_CTRL_SIZE,
		UOTGHS_DEVEPTCFG_EPBK_1_BANK);

	udd_allocate_memory(0);
   8753e:	6808      	ldr	r0, [r1, #0]
   87540:	f040 0302 	orr.w	r3, r0, #2
   87544:	600b      	str	r3, [r1, #0]
	udd_enable_endpoint(0);
   87546:	69e1      	ldr	r1, [r4, #28]
   87548:	f041 0201 	orr.w	r2, r1, #1
   8754c:	61e2      	str	r2, [r4, #28]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8754e:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87552:	b672      	cpsid	i
   87554:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87558:	f240 2390 	movw	r3, #656	; 0x290
   8755c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87560:	f04f 0100 	mov.w	r1, #0
   87564:	7019      	strb	r1, [r3, #0]
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
   87566:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   8756a:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8756e:	f04f 0304 	mov.w	r3, #4
   87572:	6013      	str	r3, [r2, #0]
	udd_enable_out_received_interrupt(0);
   87574:	f04f 0102 	mov.w	r1, #2
   87578:	6011      	str	r1, [r2, #0]
	udd_enable_endpoint_interrupt(0);
   8757a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8757e:	61a2      	str	r2, [r4, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87580:	b948      	cbnz	r0, 87596 <UOTGHS_Handler+0x81a>
		cpu_irq_enable();
   87582:	f240 2090 	movw	r0, #656	; 0x290
   87586:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8758a:	f04f 0301 	mov.w	r3, #1
   8758e:	7003      	strb	r3, [r0, #0]
   87590:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87594:	b662      	cpsie	i
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
   87596:	f246 5151 	movw	r1, #25937	; 0x6551
   8759a:	f2c0 0108 	movt	r1, #8
   8759e:	4788      	blx	r1
		goto udd_interrupt_end;
   875a0:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   875a2:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   875a6:	f2c4 000a 	movt	r0, #16394	; 0x400a
   875aa:	6901      	ldr	r1, [r0, #16]
   875ac:	f011 0f01 	tst.w	r1, #1
   875b0:	d02a      	beq.n	87608 <UOTGHS_Handler+0x88c>
   875b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   875b6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   875ba:	685a      	ldr	r2, [r3, #4]
   875bc:	f012 0f01 	tst.w	r2, #1
   875c0:	d022      	beq.n	87608 <UOTGHS_Handler+0x88c>
		otg_unfreeze_clock();
   875c2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   875c6:	f2c4 010a 	movt	r1, #16394	; 0x400a
   875ca:	f8d1 0800 	ldr.w	r0, [r1, #2048]	; 0x800
   875ce:	f420 4380 	bic.w	r3, r0, #16384	; 0x4000
   875d2:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   875d6:	f04f 0201 	mov.w	r2, #1
   875da:	614a      	str	r2, [r1, #20]
		udd_enable_wake_up_interrupt();
   875dc:	f04f 0010 	mov.w	r0, #16
   875e0:	6188      	str	r0, [r1, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   875e2:	f8d1 3800 	ldr.w	r3, [r1, #2048]	; 0x800
   875e6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
   875ea:	f8c1 2800 	str.w	r2, [r1, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
   875ee:	f04f 0000 	mov.w	r0, #0
   875f2:	f246 41a5 	movw	r1, #25765	; 0x64a5
   875f6:	f2c0 0108 	movt	r1, #8
   875fa:	4788      	blx	r1
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   875fc:	f243 604d 	movw	r0, #13901	; 0x364d
   87600:	f2c0 0008 	movt	r0, #8
   87604:	4780      	blx	r0
#endif
		goto udd_interrupt_end;
   87606:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   87608:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   8760c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87610:	6901      	ldr	r1, [r0, #16]
   87612:	f011 0f10 	tst.w	r1, #16
   87616:	d034      	beq.n	87682 <UOTGHS_Handler+0x906>
   87618:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8761c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87620:	685a      	ldr	r2, [r3, #4]
   87622:	f012 0f10 	tst.w	r2, #16
   87626:	d02c      	beq.n	87682 <UOTGHS_Handler+0x906>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
   87628:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   8762c:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87630:	f8d1 2800 	ldr.w	r2, [r1, #2048]	; 0x800
   87634:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   87638:	f8c1 0800 	str.w	r0, [r1, #2048]	; 0x800
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   8763c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87640:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87644:	e003      	b.n	8764e <UOTGHS_Handler+0x8d2>
			if (Is_udd_suspend()) {
   87646:	685a      	ldr	r2, [r3, #4]
   87648:	f012 0f01 	tst.w	r2, #1
   8764c:	d104      	bne.n	87658 <UOTGHS_Handler+0x8dc>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   8764e:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
   87652:	f411 4f80 	tst.w	r1, #16384	; 0x4000
   87656:	d0f6      	beq.n	87646 <UOTGHS_Handler+0x8ca>
			if (Is_udd_suspend()) {
				break; // In case of USB state change in HS
			}
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
   87658:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   8765c:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87660:	f04f 0010 	mov.w	r0, #16
   87664:	6148      	str	r0, [r1, #20]
		udd_enable_suspend_interrupt();
   87666:	f04f 0001 	mov.w	r0, #1
   8766a:	6188      	str	r0, [r1, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
   8766c:	f246 43a5 	movw	r3, #25765	; 0x64a5
   87670:	f2c0 0308 	movt	r3, #8
   87674:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   87676:	f243 6251 	movw	r2, #13905	; 0x3651
   8767a:	f2c0 0208 	movt	r2, #8
   8767e:	4790      	blx	r2
#endif
		goto udd_interrupt_end;
   87680:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_otg_vbus_transition()) {
   87682:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87686:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8768a:	f8d0 1804 	ldr.w	r1, [r0, #2052]	; 0x804
   8768e:	f011 0f02 	tst.w	r1, #2
   87692:	f000 811c 	beq.w	878ce <UOTGHS_Handler+0xb52>
		dbg_print("VBus ");
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
   87696:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8769a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8769e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   876a2:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   876a6:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
		otg_ack_vbus_transition();
   876aa:	f04f 0102 	mov.w	r1, #2
   876ae:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
		otg_freeze_clock();
   876b2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   876b6:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   876ba:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
   876be:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   876c2:	f413 6f00 	tst.w	r3, #2048	; 0x800
			udd_attach();
   876c6:	bf19      	ittee	ne
   876c8:	f646 4399 	movwne	r3, #27801	; 0x6c99
   876cc:	f2c0 0308 	movtne	r3, #8
		} else {
			udd_detach();
   876d0:	f646 5341 	movweq	r3, #27969	; 0x6d41
   876d4:	f2c0 0308 	movteq	r3, #8
   876d8:	4798      	blx	r3
   876da:	bd70      	pop	{r4, r5, r6, pc}
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   876dc:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   876e0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   876e4:	6901      	ldr	r1, [r0, #16]
   876e6:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
   876ea:	d008      	beq.n	876fe <UOTGHS_Handler+0x982>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   876ec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   876f0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   876f4:	685a      	ldr	r2, [r3, #4]
   876f6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
   876fa:	f47f ade6 	bne.w	872ca <UOTGHS_Handler+0x54e>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   876fe:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87702:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87706:	6901      	ldr	r1, [r0, #16]
   87708:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   8770c:	d024      	beq.n	87758 <UOTGHS_Handler+0x9dc>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8770e:	f24c 13c4 	movw	r3, #49604	; 0xc1c4
   87712:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87716:	681a      	ldr	r2, [r3, #0]
   87718:	f012 0f01 	tst.w	r2, #1
   8771c:	d110      	bne.n	87740 <UOTGHS_Handler+0x9c4>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   8771e:	f24c 13c4 	movw	r3, #49604	; 0xc1c4
   87722:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87726:	681a      	ldr	r2, [r3, #0]
   87728:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   8772c:	d014      	beq.n	87758 <UOTGHS_Handler+0x9dc>
					&& (0 == udd_nb_busy_bank(ep))) {
   8772e:	f24c 1034 	movw	r0, #49460	; 0xc134
   87732:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87736:	6801      	ldr	r1, [r0, #0]
   87738:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   8773c:	d10c      	bne.n	87758 <UOTGHS_Handler+0x9dc>
   8773e:	e65e      	b.n	873fe <UOTGHS_Handler+0x682>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   87740:	f24c 1034 	movw	r0, #49460	; 0xc134
   87744:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87748:	6801      	ldr	r1, [r0, #0]
   8774a:	f011 0f01 	tst.w	r1, #1
   8774e:	d0e6      	beq.n	8771e <UOTGHS_Handler+0x9a2>
   87750:	e611      	b.n	87376 <UOTGHS_Handler+0x5fa>
   87752:	bf00      	nop
   87754:	20071678 	.word	0x20071678
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   87758:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8775c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87760:	691a      	ldr	r2, [r3, #16]
   87762:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
   87766:	d008      	beq.n	8777a <UOTGHS_Handler+0x9fe>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   87768:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   8776c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87770:	6841      	ldr	r1, [r0, #4]
   87772:	f011 6f80 	tst.w	r1, #67108864	; 0x4000000
   87776:	f47f adb1 	bne.w	872dc <UOTGHS_Handler+0x560>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8777a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8777e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87782:	691a      	ldr	r2, [r3, #16]
   87784:	f412 4f80 	tst.w	r2, #16384	; 0x4000
   87788:	d021      	beq.n	877ce <UOTGHS_Handler+0xa52>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8778a:	f24c 10c8 	movw	r0, #49608	; 0xc1c8
   8778e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87792:	6801      	ldr	r1, [r0, #0]
   87794:	f011 0f01 	tst.w	r1, #1
   87798:	d110      	bne.n	877bc <UOTGHS_Handler+0xa40>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   8779a:	f24c 10c8 	movw	r0, #49608	; 0xc1c8
   8779e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   877a2:	6801      	ldr	r1, [r0, #0]
   877a4:	f411 5f80 	tst.w	r1, #4096	; 0x1000
   877a8:	d011      	beq.n	877ce <UOTGHS_Handler+0xa52>
					&& (0 == udd_nb_busy_bank(ep))) {
   877aa:	f24c 1338 	movw	r3, #49464	; 0xc138
   877ae:	f2c4 030a 	movt	r3, #16394	; 0x400a
   877b2:	681a      	ldr	r2, [r3, #0]
   877b4:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   877b8:	d109      	bne.n	877ce <UOTGHS_Handler+0xa52>
   877ba:	e626      	b.n	8740a <UOTGHS_Handler+0x68e>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   877bc:	f24c 1338 	movw	r3, #49464	; 0xc138
   877c0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   877c4:	681a      	ldr	r2, [r3, #0]
   877c6:	f012 0f01 	tst.w	r2, #1
   877ca:	d0e6      	beq.n	8779a <UOTGHS_Handler+0xa1e>
   877cc:	e5d9      	b.n	87382 <UOTGHS_Handler+0x606>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   877ce:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   877d2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   877d6:	6901      	ldr	r1, [r0, #16]
   877d8:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
   877dc:	d008      	beq.n	877f0 <UOTGHS_Handler+0xa74>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   877de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   877e2:	f2c4 030a 	movt	r3, #16394	; 0x400a
   877e6:	685a      	ldr	r2, [r3, #4]
   877e8:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
   877ec:	f47f ad7c 	bne.w	872e8 <UOTGHS_Handler+0x56c>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   877f0:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   877f4:	f2c4 000a 	movt	r0, #16394	; 0x400a
   877f8:	6901      	ldr	r1, [r0, #16]
   877fa:	f411 4f00 	tst.w	r1, #32768	; 0x8000
   877fe:	d021      	beq.n	87844 <UOTGHS_Handler+0xac8>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87800:	f24c 13cc 	movw	r3, #49612	; 0xc1cc
   87804:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87808:	681a      	ldr	r2, [r3, #0]
   8780a:	f012 0f01 	tst.w	r2, #1
   8780e:	d110      	bne.n	87832 <UOTGHS_Handler+0xab6>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   87810:	f24c 13cc 	movw	r3, #49612	; 0xc1cc
   87814:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87818:	681a      	ldr	r2, [r3, #0]
   8781a:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   8781e:	d011      	beq.n	87844 <UOTGHS_Handler+0xac8>
					&& (0 == udd_nb_busy_bank(ep))) {
   87820:	f24c 103c 	movw	r0, #49468	; 0xc13c
   87824:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87828:	6801      	ldr	r1, [r0, #0]
   8782a:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   8782e:	d109      	bne.n	87844 <UOTGHS_Handler+0xac8>
   87830:	e5f1      	b.n	87416 <UOTGHS_Handler+0x69a>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   87832:	f24c 103c 	movw	r0, #49468	; 0xc13c
   87836:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8783a:	6801      	ldr	r1, [r0, #0]
   8783c:	f011 0f01 	tst.w	r1, #1
   87840:	d0e6      	beq.n	87810 <UOTGHS_Handler+0xa94>
   87842:	e5a4      	b.n	8738e <UOTGHS_Handler+0x612>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   87844:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87848:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8784c:	691a      	ldr	r2, [r3, #16]
   8784e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
   87852:	d008      	beq.n	87866 <UOTGHS_Handler+0xaea>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   87854:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87858:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8785c:	6841      	ldr	r1, [r0, #4]
   8785e:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
   87862:	f47f ad47 	bne.w	872f4 <UOTGHS_Handler+0x578>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   87866:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8786a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8786e:	691a      	ldr	r2, [r3, #16]
   87870:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   87874:	d021      	beq.n	878ba <UOTGHS_Handler+0xb3e>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   87876:	f24c 10d0 	movw	r0, #49616	; 0xc1d0
   8787a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8787e:	6801      	ldr	r1, [r0, #0]
   87880:	f011 0f01 	tst.w	r1, #1
   87884:	d110      	bne.n	878a8 <UOTGHS_Handler+0xb2c>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   87886:	f24c 10d0 	movw	r0, #49616	; 0xc1d0
   8788a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8788e:	6801      	ldr	r1, [r0, #0]
   87890:	f411 5f80 	tst.w	r1, #4096	; 0x1000
   87894:	d011      	beq.n	878ba <UOTGHS_Handler+0xb3e>
					&& (0 == udd_nb_busy_bank(ep))) {
   87896:	f24c 1340 	movw	r3, #49472	; 0xc140
   8789a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8789e:	681a      	ldr	r2, [r3, #0]
   878a0:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   878a4:	d109      	bne.n	878ba <UOTGHS_Handler+0xb3e>
   878a6:	e5d1      	b.n	8744c <UOTGHS_Handler+0x6d0>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   878a8:	f24c 1340 	movw	r3, #49472	; 0xc140
   878ac:	f2c4 030a 	movt	r3, #16394	; 0x400a
   878b0:	681a      	ldr	r2, [r3, #0]
   878b2:	f012 0f01 	tst.w	r2, #1
   878b6:	d0e6      	beq.n	87886 <UOTGHS_Handler+0xb0a>
   878b8:	e56f      	b.n	8739a <UOTGHS_Handler+0x61e>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   878ba:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   878be:	f2c4 000a 	movt	r0, #16394	; 0x400a
   878c2:	6901      	ldr	r1, [r0, #16]
   878c4:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
   878c8:	f47f acf1 	bne.w	872ae <UOTGHS_Handler+0x532>
   878cc:	e534      	b.n	87338 <UOTGHS_Handler+0x5bc>
   878ce:	bd70      	pop	{r4, r5, r6, pc}
   878d0:	b249      	sxtb	r1, r1
   878d2:	2900      	cmp	r1, #0
   878d4:	f43f ac01 	beq.w	870da <UOTGHS_Handler+0x35e>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
   878d8:	f813 0b01 	ldrb.w	r0, [r3], #1
   878dc:	f802 0b01 	strb.w	r0, [r2], #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   878e0:	b2d9      	uxtb	r1, r3
   878e2:	42a1      	cmp	r1, r4
   878e4:	f4ff abf9 	bcc.w	870da <UOTGHS_Handler+0x35e>
   878e8:	e406      	b.n	870f8 <UOTGHS_Handler+0x37c>
   878ea:	bf00      	nop

000878ec <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   878ec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   878f0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   878f4:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
#else
	return false;
#endif
}
   878f8:	f410 5040 	ands.w	r0, r0, #12288	; 0x3000
   878fc:	bf18      	it	ne
   878fe:	2001      	movne	r0, #1
   87900:	4770      	bx	lr
   87902:	bf00      	nop

00087904 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
   87904:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87908:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8790c:	681a      	ldr	r2, [r3, #0]
   8790e:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   87912:	6019      	str	r1, [r3, #0]
	udd_configure_address(address);
   87914:	681a      	ldr	r2, [r3, #0]
   87916:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   8791a:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   8791e:	ea40 0201 	orr.w	r2, r0, r1
   87922:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   87924:	6818      	ldr	r0, [r3, #0]
   87926:	f040 0180 	orr.w	r1, r0, #128	; 0x80
   8792a:	6019      	str	r1, [r3, #0]
   8792c:	4770      	bx	lr
   8792e:	bf00      	nop

00087930 <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
   87930:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87934:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87938:	6818      	ldr	r0, [r3, #0]
}
   8793a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   8793e:	4770      	bx	lr

00087940 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
   87940:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87944:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87948:	6a18      	ldr	r0, [r3, #32]
}
   8794a:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   8794e:	4770      	bx	lr

00087950 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
   87950:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87954:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87958:	6a18      	ldr	r0, [r3, #32]
}
   8795a:	ea4f 4180 	mov.w	r1, r0, lsl #18
   8795e:	ea4f 4091 	mov.w	r0, r1, lsr #18
   87962:	4770      	bx	lr

00087964 <udd_set_setup_payload>:
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
	udd_g_ctrlreq.payload = payload;
   87964:	f641 338c 	movw	r3, #7052	; 0x1b8c
   87968:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8796c:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   8796e:	8199      	strh	r1, [r3, #12]
   87970:	4770      	bx	lr
   87972:	bf00      	nop

00087974 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
   87974:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   87976:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   8797a:	2c05      	cmp	r4, #5
   8797c:	d82a      	bhi.n	879d4 <udd_ep_free+0x60>
		return;
	}
	udd_disable_endpoint(ep_index);
   8797e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87982:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87986:	69d9      	ldr	r1, [r3, #28]
   87988:	f04f 0201 	mov.w	r2, #1
   8798c:	fa02 f204 	lsl.w	r2, r2, r4
   87990:	ea21 0102 	bic.w	r1, r1, r2
   87994:	61d9      	str	r1, [r3, #28]
	udd_unallocate_memory(ep_index);
   87996:	f44f 4341 	mov.w	r3, #49408	; 0xc100
   8799a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8799e:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   879a2:	f022 0102 	bic.w	r1, r2, #2
   879a6:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	udd_ep_abort_job(ep);
   879aa:	f646 03d1 	movw	r3, #26833	; 0x68d1
   879ae:	f2c0 0308 	movt	r3, #8
   879b2:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   879b4:	f104 34ff 	add.w	r4, r4, #4294967295
   879b8:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   879bc:	f241 6230 	movw	r2, #5680	; 0x1630
   879c0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   879c4:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
   879c8:	7d21      	ldrb	r1, [r4, #20]
   879ca:	f36f 0182 	bfc	r1, #2, #1
   879ce:	7521      	strb	r1, [r4, #20]
   879d0:	f104 0410 	add.w	r4, r4, #16
   879d4:	bd10      	pop	{r4, pc}
   879d6:	bf00      	nop

000879d8 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	return Is_udd_endpoint_stall_requested(ep_index);
   879d8:	f000 000f 	and.w	r0, r0, #15
   879dc:	f24c 13c0 	movw	r3, #49600	; 0xc1c0
   879e0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   879e4:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
}
   879e8:	f3c1 40c0 	ubfx	r0, r1, #19, #1
   879ec:	4770      	bx	lr
   879ee:	bf00      	nop

000879f0 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   879f0:	b430      	push	{r4, r5}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   879f2:	f000 030f 	and.w	r3, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
   879f6:	2b05      	cmp	r3, #5
   879f8:	d87a      	bhi.n	87af0 <udd_ep_set_halt+0x100>
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   879fa:	f24c 12c0 	movw	r2, #49600	; 0xc1c0
   879fe:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87a02:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   87a06:	f411 2f00 	tst.w	r1, #524288	; 0x80000
   87a0a:	d174      	bne.n	87af6 <udd_ep_set_halt+0x106>


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   87a0c:	f103 34ff 	add.w	r4, r3, #4294967295
   87a10:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   87a14:	f241 6130 	movw	r1, #5680	; 0x1630
   87a18:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87a1c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   87a20:	7d11      	ldrb	r1, [r2, #20]
   87a22:	f001 0404 	and.w	r4, r1, #4
   87a26:	b2e4      	uxtb	r4, r4
   87a28:	2c00      	cmp	r4, #0
   87a2a:	d167      	bne.n	87afc <udd_ep_set_halt+0x10c>
		return true; // Already STALL
	}

	if (ptr_job->busy == true) {
   87a2c:	f011 0f01 	tst.w	r1, #1
   87a30:	d167      	bne.n	87b02 <udd_ep_set_halt+0x112>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87a32:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   87a36:	f1d5 0501 	rsbs	r5, r5, #1
   87a3a:	bf38      	it	cc
   87a3c:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87a3e:	b672      	cpsid	i
   87a40:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   87a44:	f240 2190 	movw	r1, #656	; 0x290
   87a48:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87a4c:	700c      	strb	r4, [r1, #0]
		return false; // Job on going, stall impossible
	}

	flags = cpu_irq_save();
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   87a4e:	f010 0f80 	tst.w	r0, #128	; 0x80
   87a52:	d027      	beq.n	87aa4 <udd_ep_set_halt+0xb4>
   87a54:	f24c 1030 	movw	r0, #49456	; 0xc130
   87a58:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87a5c:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   87a60:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   87a64:	d01e      	beq.n	87aa4 <udd_ep_set_halt+0xb4>
		// Delay the stall after the end of IN transfer on USB line
		ptr_job->stall_requested = true;
   87a66:	7d10      	ldrb	r0, [r2, #20]
   87a68:	f040 0104 	orr.w	r1, r0, #4
   87a6c:	7511      	strb	r1, [r2, #20]
#ifdef UDD_EP_FIFO_SUPPORTED
		udd_disable_in_send_interrupt(ep_index);
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
   87a6e:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   87a72:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87a76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   87a7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
   87a7e:	fa02 f303 	lsl.w	r3, r2, r3
   87a82:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   87a86:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87a8a:	618b      	str	r3, [r1, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87a8c:	b3e5      	cbz	r5, 87b08 <udd_ep_set_halt+0x118>
		cpu_irq_enable();
   87a8e:	f04f 0001 	mov.w	r0, #1
   87a92:	f240 2290 	movw	r2, #656	; 0x290
   87a96:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87a9a:	7010      	strb	r0, [r2, #0]
   87a9c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87aa0:	b662      	cpsie	i
   87aa2:	e036      	b.n	87b12 <udd_ep_set_halt+0x122>
		cpu_irq_restore(flags);
		return true;
	}
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   87aa4:	f44f 4241 	mov.w	r2, #49408	; 0xc100
   87aa8:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87aac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   87ab0:	f420 7100 	bic.w	r1, r0, #512	; 0x200
   87ab4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_ack_stall(ep_index);
   87ab8:	f24c 1260 	movw	r2, #49504	; 0xc160
   87abc:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87ac0:	f04f 0040 	mov.w	r0, #64	; 0x40
   87ac4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   87ac8:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   87acc:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87ad0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   87ad4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87ad8:	b1cd      	cbz	r5, 87b0e <udd_ep_set_halt+0x11e>
		cpu_irq_enable();
   87ada:	f04f 0001 	mov.w	r0, #1
   87ade:	f240 2390 	movw	r3, #656	; 0x290
   87ae2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87ae6:	7018      	strb	r0, [r3, #0]
   87ae8:	f3bf 8f5f 	dmb	sy
   87aec:	b662      	cpsie	i
   87aee:	e010      	b.n	87b12 <udd_ep_set_halt+0x122>
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
   87af0:	f04f 0000 	mov.w	r0, #0
   87af4:	e00d      	b.n	87b12 <udd_ep_set_halt+0x122>
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
   87af6:	f04f 0001 	mov.w	r0, #1
   87afa:	e00a      	b.n	87b12 <udd_ep_set_halt+0x122>
   87afc:	f04f 0001 	mov.w	r0, #1
   87b00:	e007      	b.n	87b12 <udd_ep_set_halt+0x122>
	}

	if (ptr_job->busy == true) {
		return false; // Job on going, stall impossible
   87b02:	f04f 0000 	mov.w	r0, #0
   87b06:	e004      	b.n	87b12 <udd_ep_set_halt+0x122>
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
   87b08:	f04f 0001 	mov.w	r0, #1
   87b0c:	e001      	b.n	87b12 <udd_ep_set_halt+0x122>
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
	udd_ack_stall(ep_index);
	udd_enable_stall_handshake(ep_index);
	cpu_irq_restore(flags);
	return true;
   87b0e:	f04f 0001 	mov.w	r0, #1
}
   87b12:	bc30      	pop	{r4, r5}
   87b14:	4770      	bx	lr
   87b16:	bf00      	nop

00087b18 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   87b18:	b508      	push	{r3, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   87b1a:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
   87b1e:	2805      	cmp	r0, #5
   87b20:	d85f      	bhi.n	87be2 <udd_ep_clear_halt+0xca>


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   87b22:	f100 33ff 	add.w	r3, r0, #4294967295
   87b26:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   87b2a:	f241 6230 	movw	r2, #5680	; 0x1630
   87b2e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87b32:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;

	if (ptr_job->stall_requested) {
   87b36:	7d19      	ldrb	r1, [r3, #20]
   87b38:	f001 0204 	and.w	r2, r1, #4
   87b3c:	b2d1      	uxtb	r1, r2
   87b3e:	2900      	cmp	r1, #0
   87b40:	d055      	beq.n	87bee <udd_ep_clear_halt+0xd6>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
   87b42:	7d1a      	ldrb	r2, [r3, #20]
   87b44:	f36f 0282 	bfc	r2, #2, #1
   87b48:	751a      	strb	r2, [r3, #20]
		udd_disable_bank_interrupt(ep_index);
   87b4a:	f24c 2120 	movw	r1, #49696	; 0xc220
   87b4e:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87b52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   87b56:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
   87b5a:	fa02 f100 	lsl.w	r1, r2, r0
   87b5e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   87b62:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87b66:	6151      	str	r1, [r2, #20]
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   87b68:	ea4f 0280 	mov.w	r2, r0, lsl #2
   87b6c:	f24c 11c0 	movw	r1, #49600	; 0xc1c0
   87b70:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87b74:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   87b78:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   87b7c:	d024      	beq.n	87bc8 <udd_ep_clear_halt+0xb0>
		if (Is_udd_stall(ep_index)) {
   87b7e:	f24c 1130 	movw	r1, #49456	; 0xc130
   87b82:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87b86:	5850      	ldr	r0, [r2, r1]
   87b88:	f010 0f40 	tst.w	r0, #64	; 0x40
   87b8c:	d00d      	beq.n	87baa <udd_ep_clear_halt+0x92>
			udd_ack_stall(ep_index);
   87b8e:	f24c 1160 	movw	r1, #49504	; 0xc160
   87b92:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87b96:	f04f 0040 	mov.w	r0, #64	; 0x40
   87b9a:	5050      	str	r0, [r2, r1]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep_index);
   87b9c:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   87ba0:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87ba4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   87ba8:	5050      	str	r0, [r2, r1]
		}
		// Disable stall
		udd_disable_stall_handshake(ep_index);
   87baa:	f24c 2120 	movw	r1, #49696	; 0xc220
   87bae:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87bb2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   87bb6:	5050      	str	r0, [r2, r1]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   87bb8:	f44f 4141 	mov.w	r1, #49408	; 0xc100
   87bbc:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87bc0:	5850      	ldr	r0, [r2, r1]
   87bc2:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   87bc6:	5050      	str	r0, [r2, r1]
		b_stall_cleared = true;
	}
	if (b_stall_cleared) {
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   87bc8:	7d1a      	ldrb	r2, [r3, #20]
   87bca:	f012 0f01 	tst.w	r2, #1
   87bce:	d00b      	beq.n	87be8 <udd_ep_clear_halt+0xd0>
			ptr_job->busy = false;
   87bd0:	7d19      	ldrb	r1, [r3, #20]
   87bd2:	f36f 0100 	bfc	r1, #0, #1
   87bd6:	7519      	strb	r1, [r3, #20]
			ptr_job->call_nohalt();
   87bd8:	681b      	ldr	r3, [r3, #0]
   87bda:	4798      	blx	r3
		}
	}
	return true;
   87bdc:	f04f 0001 	mov.w	r0, #1
   87be0:	bd08      	pop	{r3, pc}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;
   87be2:	f04f 0000 	mov.w	r0, #0
   87be6:	bd08      	pop	{r3, pc}
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   87be8:	f04f 0001 	mov.w	r0, #1
   87bec:	bd08      	pop	{r3, pc}
		ptr_job->stall_requested = false;
		udd_disable_bank_interrupt(ep_index);
		udd_disable_endpoint_interrupt(ep_index);
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   87bee:	ea4f 0280 	mov.w	r2, r0, lsl #2
   87bf2:	f24c 11c0 	movw	r1, #49600	; 0xc1c0
   87bf6:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87bfa:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   87bfe:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   87c02:	d1bc      	bne.n	87b7e <udd_ep_clear_halt+0x66>
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   87c04:	f04f 0001 	mov.w	r0, #1
}
   87c08:	bd08      	pop	{r3, pc}
   87c0a:	bf00      	nop

00087c0c <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   87c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
#endif
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   87c0e:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   87c12:	2805      	cmp	r0, #5
   87c14:	d86c      	bhi.n	87cf0 <udd_ep_run+0xe4>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
   87c16:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   87c1a:	f2c4 040a 	movt	r4, #16394	; 0x400a
   87c1e:	69e4      	ldr	r4, [r4, #28]
   87c20:	f04f 0501 	mov.w	r5, #1
   87c24:	fa05 f500 	lsl.w	r5, r5, r0
   87c28:	4225      	tst	r5, r4
   87c2a:	d064      	beq.n	87cf6 <udd_ep_run+0xea>
			|| Is_udd_endpoint_stall_requested(ep)
   87c2c:	f24c 14c0 	movw	r4, #49600	; 0xc1c0
   87c30:	f2c4 040a 	movt	r4, #16394	; 0x400a
   87c34:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   87c38:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   87c3c:	d15e      	bne.n	87cfc <udd_ep_run+0xf0>
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   87c3e:	f100 35ff 	add.w	r5, r0, #4294967295
   87c42:	eb05 0645 	add.w	r6, r5, r5, lsl #1
   87c46:	f241 6430 	movw	r4, #5680	; 0x1630
   87c4a:	f2c2 0407 	movt	r4, #8199	; 0x2007
   87c4e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
   87c52:	7d25      	ldrb	r5, [r4, #20]
   87c54:	f005 0604 	and.w	r6, r5, #4
   87c58:	b2f6      	uxtb	r6, r6
   87c5a:	2e00      	cmp	r6, #0
   87c5c:	d151      	bne.n	87d02 <udd_ep_run+0xf6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87c5e:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   87c62:	f1d7 0601 	rsbs	r6, r7, #1
   87c66:	bf38      	it	cc
   87c68:	2600      	movcc	r6, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87c6a:	b672      	cpsid	i
   87c6c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   87c70:	f240 2790 	movw	r7, #656	; 0x290
   87c74:	f2c2 0707 	movt	r7, #8199	; 0x2007
   87c78:	f04f 0c00 	mov.w	ip, #0
   87c7c:	f887 c000 	strb.w	ip, [r7]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
   87c80:	f015 0f01 	tst.w	r5, #1
   87c84:	d009      	beq.n	87c9a <udd_ep_run+0x8e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87c86:	2e00      	cmp	r6, #0
   87c88:	d03e      	beq.n	87d08 <udd_ep_run+0xfc>
		cpu_irq_enable();
   87c8a:	f04f 0301 	mov.w	r3, #1
   87c8e:	703b      	strb	r3, [r7, #0]
   87c90:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87c94:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
   87c96:	4660      	mov	r0, ip
   87c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	ptr_job->busy = true;
   87c9a:	7d25      	ldrb	r5, [r4, #20]
   87c9c:	f045 0501 	orr.w	r5, r5, #1
   87ca0:	7525      	strb	r5, [r4, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87ca2:	b14e      	cbz	r6, 87cb8 <udd_ep_run+0xac>
		cpu_irq_enable();
   87ca4:	f240 2590 	movw	r5, #656	; 0x290
   87ca8:	f2c2 0507 	movt	r5, #8199	; 0x2007
   87cac:	f04f 0601 	mov.w	r6, #1
   87cb0:	702e      	strb	r6, [r5, #0]
   87cb2:	f3bf 8f5f 	dmb	sy
   87cb6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   87cb8:	6062      	str	r2, [r4, #4]
	ptr_job->buf_size = buf_size;
   87cba:	60a3      	str	r3, [r4, #8]
	ptr_job->buf_cnt = 0;
   87cbc:	f04f 0200 	mov.w	r2, #0
   87cc0:	60e2      	str	r2, [r4, #12]
	ptr_job->buf_load = 0;
   87cc2:	6122      	str	r2, [r4, #16]
	ptr_job->call_trans = callback;
   87cc4:	9a06      	ldr	r2, [sp, #24]
   87cc6:	6022      	str	r2, [r4, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   87cc8:	b921      	cbnz	r1, 87cd4 <udd_ep_run+0xc8>
   87cca:	f1d3 0301 	rsbs	r3, r3, #1
   87cce:	bf38      	it	cc
   87cd0:	2300      	movcc	r3, #0
   87cd2:	e001      	b.n	87cd8 <udd_ep_run+0xcc>
   87cd4:	f04f 0301 	mov.w	r3, #1
   87cd8:	7d21      	ldrb	r1, [r4, #20]
   87cda:	f363 0141 	bfi	r1, r3, #1, #1
   87cde:	7521      	strb	r1, [r4, #20]
#endif // UDD_EP_FIFO_SUPPORTED

#ifdef UDD_EP_DMA_SUPPORTED
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
   87ce0:	f646 02fd 	movw	r2, #26877	; 0x68fd
   87ce4:	f2c0 0208 	movt	r2, #8
   87ce8:	4790      	blx	r2
	return true;
   87cea:	f04f 0001 	mov.w	r0, #1
   87cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
   87cf0:	f04f 0000 	mov.w	r0, #0
   87cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
   87cf6:	f04f 0000 	mov.w	r0, #0
   87cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87cfc:	f04f 0000 	mov.w	r0, #0
   87d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87d02:	f04f 0000 	mov.w	r0, #0
   87d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
   87d08:	f04f 0000 	mov.w	r0, #0
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
	return true;
#endif
}
   87d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87d0e:	bf00      	nop

00087d10 <udd_ep_alloc>:


#if (0 != USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   87d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87d14:	b085      	sub	sp, #20
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
   87d16:	f000 040f 	and.w	r4, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
   87d1a:	2c05      	cmp	r4, #5
   87d1c:	f200 8101 	bhi.w	87f22 <udd_ep_alloc+0x212>
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
   87d20:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87d24:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87d28:	69db      	ldr	r3, [r3, #28]
   87d2a:	f04f 0501 	mov.w	r5, #1
   87d2e:	fa05 f504 	lsl.w	r5, r5, r4
   87d32:	421d      	tst	r5, r3
   87d34:	f040 80f8 	bne.w	87f28 <udd_ep_alloc+0x218>
		return false;
	}
	dbg_print("alloc(%x, %d) ", ep, MaxEndpointSize);

	// Bank choise
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   87d38:	f001 0303 	and.w	r3, r1, #3
   87d3c:	2b02      	cmp	r3, #2
   87d3e:	d006      	beq.n	87d4e <udd_ep_alloc+0x3e>
   87d40:	2b03      	cmp	r3, #3
   87d42:	f000 80fd 	beq.w	87f40 <udd_ep_alloc+0x230>
   87d46:	2b01      	cmp	r3, #1
   87d48:	f040 80f1 	bne.w	87f2e <udd_ep_alloc+0x21e>
   87d4c:	e007      	b.n	87d5e <udd_ep_alloc+0x4e>
		break;
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
		break;
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   87d4e:	f1a4 0604 	sub.w	r6, r4, #4
   87d52:	b2f5      	uxtb	r5, r6
		Assert(false);
		return false;
	}
	switch (nb_bank) {
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   87d54:	2d01      	cmp	r5, #1
   87d56:	bf94      	ite	ls
   87d58:	2500      	movls	r5, #0
   87d5a:	2501      	movhi	r5, #1
   87d5c:	e001      	b.n	87d62 <udd_ep_alloc+0x52>
				UOTGHS_DEVEPTCFG_EPBK_Pos;
		break;
	case 2:
		bank = UOTGHS_DEVEPTCFG_EPBK_2_BANK >>
   87d5e:	f04f 0501 	mov.w	r5, #1
	Assert((MaxEndpointSize == 1023)
		|| !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   87d62:	f44f 4741 	mov.w	r7, #49408	; 0xc100
   87d66:	f2c4 070a 	movt	r7, #16394	; 0x400a
   87d6a:	eb07 0684 	add.w	r6, r7, r4, lsl #2
   87d6e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   87d72:	f423 57cb 	bic.w	r7, r3, #6496	; 0x1960
   87d76:	f027 071c 	bic.w	r7, r7, #28
   87d7a:	ea4f 21c1 	mov.w	r1, r1, lsl #11
   87d7e:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
   87d82:	f000 0080 	and.w	r0, r0, #128	; 0x80
   87d86:	2800      	cmp	r0, #0
   87d88:	bf14      	ite	ne
   87d8a:	f44f 7080 	movne.w	r0, #256	; 0x100
   87d8e:	2000      	moveq	r0, #0
   87d90:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
   87d94:	b29b      	uxth	r3, r3
   87d96:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   87d9a:	d306      	bcc.n	87daa <udd_ep_alloc+0x9a>
   87d9c:	2a08      	cmp	r2, #8
   87d9e:	d907      	bls.n	87db0 <udd_ep_alloc+0xa0>
   87da0:	ea4f 0342 	mov.w	r3, r2, lsl #1
   87da4:	f103 32ff 	add.w	r2, r3, #4294967295
   87da8:	e004      	b.n	87db4 <udd_ep_alloc+0xa4>
   87daa:	f240 72ff 	movw	r2, #2047	; 0x7ff
   87dae:	e001      	b.n	87db4 <udd_ep_alloc+0xa4>
   87db0:	f04f 020f 	mov.w	r2, #15
   87db4:	fab2 f282 	clz	r2, r2
   87db8:	ea41 0585 	orr.w	r5, r1, r5, lsl #2
   87dbc:	4305      	orrs	r5, r0
   87dbe:	f1c2 011c 	rsb	r1, r2, #28
   87dc2:	ea45 1001 	orr.w	r0, r5, r1, lsl #4
   87dc6:	f641 1374 	movw	r3, #6516	; 0x1974
   87dca:	4003      	ands	r3, r0
   87dcc:	433b      	orrs	r3, r7
   87dce:	6033      	str	r3, [r6, #0]
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
   87dd0:	f04f 0601 	mov.w	r6, #1
   87dd4:	fa06 f604 	lsl.w	r6, r6, r4
   87dd8:	b2b7      	uxth	r7, r6

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   87dda:	2c04      	cmp	r4, #4
   87ddc:	f200 80b3 	bhi.w	87f46 <udd_ep_alloc+0x236>
   87de0:	f24c 1114 	movw	r1, #49428	; 0xc114
   87de4:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87de8:	f04f 0305 	mov.w	r3, #5
		if (Is_udd_endpoint_enabled(i)) {
   87dec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   87df0:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87df4:	f04f 0001 	mov.w	r0, #1
   87df8:	ea6f 0504 	mvn.w	r5, r4
   87dfc:	18ee      	adds	r6, r5, r3
   87dfe:	ea06 0c00 	and.w	ip, r6, r0
   87e02:	69d6      	ldr	r6, [r2, #28]
   87e04:	fa00 f503 	lsl.w	r5, r0, r3
   87e08:	4235      	tst	r5, r6
   87e0a:	f000 81c3 	beq.w	88194 <udd_ep_alloc+0x484>
   87e0e:	e1b5      	b.n	8817c <udd_ep_alloc+0x46c>
   87e10:	46a0      	mov	r8, r4
   87e12:	e7ff      	b.n	87e14 <udd_ep_alloc+0x104>
   87e14:	69d4      	ldr	r4, [r2, #28]
   87e16:	fa00 f603 	lsl.w	r6, r0, r3
   87e1a:	4226      	tst	r6, r4
   87e1c:	d009      	beq.n	87e32 <udd_ep_alloc+0x122>
			ep_allocated |= 1 << i;
   87e1e:	4337      	orrs	r7, r6
   87e20:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   87e22:	69d4      	ldr	r4, [r2, #28]
   87e24:	ea24 0606 	bic.w	r6, r4, r6
   87e28:	61d6      	str	r6, [r2, #28]
			udd_unallocate_memory(i);
   87e2a:	680d      	ldr	r5, [r1, #0]
   87e2c:	f025 0402 	bic.w	r4, r5, #2
   87e30:	600c      	str	r4, [r1, #0]
   87e32:	f103 33ff 	add.w	r3, r3, #4294967295
   87e36:	f1a1 0904 	sub.w	r9, r1, #4
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
   87e3a:	69d4      	ldr	r4, [r2, #28]
   87e3c:	fa00 f503 	lsl.w	r5, r0, r3
   87e40:	4225      	tst	r5, r4
   87e42:	f000 81dc 	beq.w	881fe <udd_ep_alloc+0x4ee>
   87e46:	e1cc      	b.n	881e2 <udd_ep_alloc+0x4d2>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
   87e48:	fa47 f004 	asr.w	r0, r7, r4
   87e4c:	f010 0f01 	tst.w	r0, #1
   87e50:	d05a      	beq.n	87f08 <udd_ep_alloc+0x1f8>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   87e52:	f104 33ff 	add.w	r3, r4, #4294967295
   87e56:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   87e5a:	eb09 05cc 	add.w	r5, r9, ip, lsl #3
			bool b_restart = ptr_job->busy;
   87e5e:	7d29      	ldrb	r1, [r5, #20]
   87e60:	f001 0201 	and.w	r2, r1, #1
   87e64:	9203      	str	r2, [sp, #12]
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   87e66:	f36f 0100 	bfc	r1, #0, #1
   87e6a:	7529      	strb	r1, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   87e6c:	ea4f 0184 	mov.w	r1, r4, lsl #2
   87e70:	198a      	adds	r2, r1, r6
   87e72:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   87e76:	f040 0302 	orr.w	r3, r0, #2
   87e7a:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			udd_enable_endpoint(i);
   87e7e:	f8d8 301c 	ldr.w	r3, [r8, #28]
   87e82:	f04f 0001 	mov.w	r0, #1
   87e86:	fa00 fb04 	lsl.w	fp, r0, r4
   87e8a:	ea4b 0303 	orr.w	r3, fp, r3
   87e8e:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   87e92:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
   87e96:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   87e9a:	d110      	bne.n	87ebe <udd_ep_alloc+0x1ae>
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
   87e9c:	682b      	ldr	r3, [r5, #0]
   87e9e:	2b00      	cmp	r3, #0
   87ea0:	d048      	beq.n	87f34 <udd_ep_alloc+0x224>
					return false;
				}
				if (Is_udd_endpoint_in(i)) {
   87ea2:	6811      	ldr	r1, [r2, #0]
   87ea4:	f411 7f80 	tst.w	r1, #256	; 0x100
					i |= USB_EP_DIR_IN;
   87ea8:	bf18      	it	ne
   87eaa:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   87eae:	f04f 0001 	mov.w	r0, #1
   87eb2:	68e9      	ldr	r1, [r5, #12]
   87eb4:	4622      	mov	r2, r4
   87eb6:	4798      	blx	r3
						ptr_job->buf_cnt, i);
				return false;
   87eb8:	f04f 0000 	mov.w	r0, #0
   87ebc:	e05d      	b.n	87f7a <udd_ep_alloc+0x26a>
			}
			udd_enable_endpoint_bank_autoswitch(i);
   87ebe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   87ec2:	f442 7300 	orr.w	r3, r2, #512	; 0x200
   87ec6:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			if (b_restart) {
   87eca:	9a03      	ldr	r2, [sp, #12]
   87ecc:	b1e2      	cbz	r2, 87f08 <udd_ep_alloc+0x1f8>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   87ece:	68ea      	ldr	r2, [r5, #12]
   87ed0:	692b      	ldr	r3, [r5, #16]
   87ed2:	1ad3      	subs	r3, r2, r3
   87ed4:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   87ed6:	5989      	ldr	r1, [r1, r6]
   87ed8:	f411 7f80 	tst.w	r1, #256	; 0x100
   87edc:	bf14      	ite	ne
   87ede:	f044 0080 	orrne.w	r0, r4, #128	; 0x80
   87ee2:	4620      	moveq	r0, r4
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   87ee4:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   87ee6:	f8d5 e004 	ldr.w	lr, [r5, #4]
   87eea:	68ad      	ldr	r5, [r5, #8]
   87eec:	f859 203c 	ldr.w	r2, [r9, ip, lsl #3]
   87ef0:	9200      	str	r2, [sp, #0]
   87ef2:	f3c1 0140 	ubfx	r1, r1, #1, #1
   87ef6:	eb0e 0203 	add.w	r2, lr, r3
   87efa:	1aeb      	subs	r3, r5, r3
   87efc:	f647 450d 	movw	r5, #31757	; 0x7c0d
   87f00:	f2c0 0508 	movt	r5, #8
   87f04:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   87f06:	b1c0      	cbz	r0, 87f3a <udd_ep_alloc+0x22a>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   87f08:	f104 0401 	add.w	r4, r4, #1
   87f0c:	b2e4      	uxtb	r4, r4
		if (ep_allocated & (1 << i)) {
   87f0e:	fa47 f004 	asr.w	r0, r7, r4
   87f12:	f010 0f01 	tst.w	r0, #1
   87f16:	f000 812a 	beq.w	8816e <udd_ep_alloc+0x45e>
   87f1a:	e0d9      	b.n	880d0 <udd_ep_alloc+0x3c0>
					return false;
				}
			}
		}
	}
	return true;
   87f1c:	f04f 0001 	mov.w	r0, #1
   87f20:	e02b      	b.n	87f7a <udd_ep_alloc+0x26a>

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
   87f22:	f04f 0000 	mov.w	r0, #0
   87f26:	e028      	b.n	87f7a <udd_ep_alloc+0x26a>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
   87f28:	f04f 0000 	mov.w	r0, #0
   87f2c:	e025      	b.n	87f7a <udd_ep_alloc+0x26a>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
		break;
	default:
		Assert(false);
		return false;
   87f2e:	f04f 0000 	mov.w	r0, #0
   87f32:	e022      	b.n	87f7a <udd_ep_alloc+0x26a>
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i)) {
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
					return false;
   87f34:	f04f 0000 	mov.w	r0, #0
   87f38:	e01f      	b.n	87f7a <udd_ep_alloc+0x26a>
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
					dbg_print("ErrReRun%d ", i);
					return false;
   87f3a:	f04f 0000 	mov.w	r0, #0
   87f3e:	e01c      	b.n	87f7a <udd_ep_alloc+0x26a>
		Assert(false);
		return false;
	}
	switch (nb_bank) {
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   87f40:	f04f 0500 	mov.w	r5, #0
   87f44:	e70d      	b.n	87d62 <udd_ep_alloc+0x52>
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   87f46:	f241 6930 	movw	r9, #5680	; 0x1630
   87f4a:	f2c2 0907 	movt	r9, #8199	; 0x2007
			bool b_restart = ptr_job->busy;
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
			// Re-allocate memory
			udd_allocate_memory(i);
   87f4e:	f44f 4641 	mov.w	r6, #49408	; 0xc100
   87f52:	f2c4 060a 	movt	r6, #16394	; 0x400a
			udd_enable_endpoint(i);
   87f56:	f44f 4840 	mov.w	r8, #49152	; 0xc000
   87f5a:	f2c4 080a 	movt	r8, #16394	; 0x400a
			if (!Is_udd_endpoint_configured(i)) {
   87f5e:	f24c 1a30 	movw	sl, #49456	; 0xc130
   87f62:	f2c4 0a0a 	movt	sl, #16394	; 0x400a
   87f66:	f1c4 0b05 	rsb	fp, r4, #5
   87f6a:	f00b 0b01 	and.w	fp, fp, #1
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
   87f6e:	fa47 f204 	asr.w	r2, r7, r4
   87f72:	f012 0f01 	tst.w	r2, #1
   87f76:	d04c      	beq.n	88012 <udd_ep_alloc+0x302>
   87f78:	e002      	b.n	87f80 <udd_ep_alloc+0x270>
				}
			}
		}
	}
	return true;
}
   87f7a:	b005      	add	sp, #20
   87f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   87f80:	f104 30ff 	add.w	r0, r4, #4294967295
   87f84:	eb00 0540 	add.w	r5, r0, r0, lsl #1
   87f88:	eb09 05c5 	add.w	r5, r9, r5, lsl #3
			bool b_restart = ptr_job->busy;
   87f8c:	7d2b      	ldrb	r3, [r5, #20]
   87f8e:	f003 0c01 	and.w	ip, r3, #1
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   87f92:	f36f 0300 	bfc	r3, #0, #1
   87f96:	752b      	strb	r3, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   87f98:	ea4f 0384 	mov.w	r3, r4, lsl #2
   87f9c:	199a      	adds	r2, r3, r6
   87f9e:	6811      	ldr	r1, [r2, #0]
   87fa0:	f041 0002 	orr.w	r0, r1, #2
   87fa4:	6010      	str	r0, [r2, #0]
			udd_enable_endpoint(i);
   87fa6:	f8d8 101c 	ldr.w	r1, [r8, #28]
   87faa:	f04f 0001 	mov.w	r0, #1
   87fae:	fa00 f004 	lsl.w	r0, r0, r4
   87fb2:	4301      	orrs	r1, r0
   87fb4:	f8c8 101c 	str.w	r1, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   87fb8:	4453      	add	r3, sl
   87fba:	6818      	ldr	r0, [r3, #0]
   87fbc:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   87fc0:	f43f af6c 	beq.w	87e9c <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   87fc4:	6811      	ldr	r1, [r2, #0]
   87fc6:	f441 7300 	orr.w	r3, r1, #512	; 0x200
   87fca:	6013      	str	r3, [r2, #0]
			if (b_restart) {
   87fcc:	f1bc 0f00 	cmp.w	ip, #0
   87fd0:	d01f      	beq.n	88012 <udd_ep_alloc+0x302>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   87fd2:	68e8      	ldr	r0, [r5, #12]
   87fd4:	6929      	ldr	r1, [r5, #16]
   87fd6:	1a43      	subs	r3, r0, r1
   87fd8:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   87fda:	6812      	ldr	r2, [r2, #0]
   87fdc:	f412 7f80 	tst.w	r2, #256	; 0x100
   87fe0:	d012      	beq.n	88008 <udd_ep_alloc+0x2f8>
   87fe2:	e013      	b.n	8800c <udd_ep_alloc+0x2fc>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   87fe4:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   87fe6:	686a      	ldr	r2, [r5, #4]
   87fe8:	f8d5 e008 	ldr.w	lr, [r5, #8]
   87fec:	682d      	ldr	r5, [r5, #0]
   87fee:	9500      	str	r5, [sp, #0]
   87ff0:	f3c1 0140 	ubfx	r1, r1, #1, #1
   87ff4:	18d2      	adds	r2, r2, r3
   87ff6:	ebc3 030e 	rsb	r3, r3, lr
   87ffa:	f647 450d 	movw	r5, #31757	; 0x7c0d
   87ffe:	f2c0 0508 	movt	r5, #8
   88002:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   88004:	b928      	cbnz	r0, 88012 <udd_ep_alloc+0x302>
   88006:	e798      	b.n	87f3a <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88008:	4620      	mov	r0, r4
   8800a:	e7eb      	b.n	87fe4 <udd_ep_alloc+0x2d4>
   8800c:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   88010:	e7e8      	b.n	87fe4 <udd_ep_alloc+0x2d4>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   88012:	f104 0401 	add.w	r4, r4, #1
   88016:	b2e4      	uxtb	r4, r4
   88018:	2c06      	cmp	r4, #6
   8801a:	f43f af7f 	beq.w	87f1c <udd_ep_alloc+0x20c>
   8801e:	fa4f f08b 	sxtb.w	r0, fp
   88022:	2800      	cmp	r0, #0
   88024:	f43f af10 	beq.w	87e48 <udd_ep_alloc+0x138>
		if (ep_allocated & (1 << i)) {
   88028:	fa47 f304 	asr.w	r3, r7, r4
   8802c:	f013 0f01 	tst.w	r3, #1
   88030:	d047      	beq.n	880c2 <udd_ep_alloc+0x3b2>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   88032:	f104 31ff 	add.w	r1, r4, #4294967295
   88036:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   8803a:	eb09 05c2 	add.w	r5, r9, r2, lsl #3
			bool b_restart = ptr_job->busy;
   8803e:	7d28      	ldrb	r0, [r5, #20]
   88040:	f000 0101 	and.w	r1, r0, #1
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   88044:	f36f 0000 	bfc	r0, #0, #1
   88048:	7528      	strb	r0, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   8804a:	ea4f 0384 	mov.w	r3, r4, lsl #2
   8804e:	199a      	adds	r2, r3, r6
   88050:	6810      	ldr	r0, [r2, #0]
   88052:	f040 0002 	orr.w	r0, r0, #2
   88056:	6010      	str	r0, [r2, #0]
			udd_enable_endpoint(i);
   88058:	f8d8 001c 	ldr.w	r0, [r8, #28]
   8805c:	f04f 0b01 	mov.w	fp, #1
   88060:	fa0b fc04 	lsl.w	ip, fp, r4
   88064:	ea4c 0000 	orr.w	r0, ip, r0
   88068:	f8c8 001c 	str.w	r0, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   8806c:	4453      	add	r3, sl
   8806e:	6818      	ldr	r0, [r3, #0]
   88070:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   88074:	f43f af12 	beq.w	87e9c <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   88078:	6813      	ldr	r3, [r2, #0]
   8807a:	f443 7000 	orr.w	r0, r3, #512	; 0x200
   8807e:	6010      	str	r0, [r2, #0]
			if (b_restart) {
   88080:	b1f9      	cbz	r1, 880c2 <udd_ep_alloc+0x3b2>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   88082:	68e9      	ldr	r1, [r5, #12]
   88084:	692b      	ldr	r3, [r5, #16]
   88086:	1acb      	subs	r3, r1, r3
   88088:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8808a:	6812      	ldr	r2, [r2, #0]
   8808c:	f412 7f80 	tst.w	r2, #256	; 0x100
   88090:	d012      	beq.n	880b8 <udd_ep_alloc+0x3a8>
   88092:	e013      	b.n	880bc <udd_ep_alloc+0x3ac>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   88094:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88096:	686a      	ldr	r2, [r5, #4]
   88098:	f8d5 e008 	ldr.w	lr, [r5, #8]
   8809c:	682d      	ldr	r5, [r5, #0]
   8809e:	9500      	str	r5, [sp, #0]
   880a0:	f3c1 0140 	ubfx	r1, r1, #1, #1
   880a4:	18d2      	adds	r2, r2, r3
   880a6:	ebc3 030e 	rsb	r3, r3, lr
   880aa:	f647 450d 	movw	r5, #31757	; 0x7c0d
   880ae:	f2c0 0508 	movt	r5, #8
   880b2:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   880b4:	b928      	cbnz	r0, 880c2 <udd_ep_alloc+0x3b2>
   880b6:	e740      	b.n	87f3a <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   880b8:	4620      	mov	r0, r4
   880ba:	e7eb      	b.n	88094 <udd_ep_alloc+0x384>
   880bc:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   880c0:	e7e8      	b.n	88094 <udd_ep_alloc+0x384>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   880c2:	f104 0401 	add.w	r4, r4, #1
   880c6:	b2e4      	uxtb	r4, r4
   880c8:	2c06      	cmp	r4, #6
   880ca:	f47f aebd 	bne.w	87e48 <udd_ep_alloc+0x138>
   880ce:	e725      	b.n	87f1c <udd_ep_alloc+0x20c>
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   880d0:	f104 33ff 	add.w	r3, r4, #4294967295
   880d4:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   880d8:	eb09 05cc 	add.w	r5, r9, ip, lsl #3
			bool b_restart = ptr_job->busy;
   880dc:	7d29      	ldrb	r1, [r5, #20]
   880de:	f001 0201 	and.w	r2, r1, #1
   880e2:	9203      	str	r2, [sp, #12]
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   880e4:	f36f 0100 	bfc	r1, #0, #1
   880e8:	7529      	strb	r1, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   880ea:	ea4f 0184 	mov.w	r1, r4, lsl #2
   880ee:	198a      	adds	r2, r1, r6
   880f0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   880f4:	f040 0302 	orr.w	r3, r0, #2
   880f8:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			udd_enable_endpoint(i);
   880fc:	f8d8 301c 	ldr.w	r3, [r8, #28]
   88100:	f04f 0001 	mov.w	r0, #1
   88104:	fa00 fb04 	lsl.w	fp, r0, r4
   88108:	ea4b 0303 	orr.w	r3, fp, r3
   8810c:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   88110:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
   88114:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   88118:	f43f aec0 	beq.w	87e9c <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   8811c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   88120:	f442 7300 	orr.w	r3, r2, #512	; 0x200
   88124:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			if (b_restart) {
   88128:	9803      	ldr	r0, [sp, #12]
   8812a:	b300      	cbz	r0, 8816e <udd_ep_alloc+0x45e>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   8812c:	68ea      	ldr	r2, [r5, #12]
   8812e:	692b      	ldr	r3, [r5, #16]
   88130:	1ad3      	subs	r3, r2, r3
   88132:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88134:	5989      	ldr	r1, [r1, r6]
   88136:	f411 7f80 	tst.w	r1, #256	; 0x100
   8813a:	d013      	beq.n	88164 <udd_ep_alloc+0x454>
   8813c:	e014      	b.n	88168 <udd_ep_alloc+0x458>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   8813e:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88140:	f8d5 e004 	ldr.w	lr, [r5, #4]
   88144:	68ad      	ldr	r5, [r5, #8]
   88146:	f859 203c 	ldr.w	r2, [r9, ip, lsl #3]
   8814a:	9200      	str	r2, [sp, #0]
   8814c:	f3c1 0140 	ubfx	r1, r1, #1, #1
   88150:	eb0e 0203 	add.w	r2, lr, r3
   88154:	1aeb      	subs	r3, r5, r3
   88156:	f647 450d 	movw	r5, #31757	; 0x7c0d
   8815a:	f2c0 0508 	movt	r5, #8
   8815e:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   88160:	b928      	cbnz	r0, 8816e <udd_ep_alloc+0x45e>
   88162:	e6ea      	b.n	87f3a <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88164:	4620      	mov	r0, r4
   88166:	e7ea      	b.n	8813e <udd_ep_alloc+0x42e>
   88168:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   8816c:	e7e7      	b.n	8813e <udd_ep_alloc+0x42e>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   8816e:	f104 0401 	add.w	r4, r4, #1
   88172:	b2e4      	uxtb	r4, r4
   88174:	2c06      	cmp	r4, #6
   88176:	f47f ae67 	bne.w	87e48 <udd_ep_alloc+0x138>
   8817a:	e6cf      	b.n	87f1c <udd_ep_alloc+0x20c>
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
   8817c:	fa00 f603 	lsl.w	r6, r0, r3
   88180:	4337      	orrs	r7, r6
   88182:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   88184:	69d6      	ldr	r6, [r2, #28]
   88186:	ea26 0505 	bic.w	r5, r6, r5
   8818a:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   8818c:	680e      	ldr	r6, [r1, #0]
   8818e:	f026 0502 	bic.w	r5, r6, #2
   88192:	600d      	str	r5, [r1, #0]
   88194:	f103 33ff 	add.w	r3, r3, #4294967295
   88198:	f1a1 0104 	sub.w	r1, r1, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   8819c:	b2dd      	uxtb	r5, r3
   8819e:	42a5      	cmp	r5, r4
   881a0:	f67f aed1 	bls.w	87f46 <udd_ep_alloc+0x236>
   881a4:	fa4f f68c 	sxtb.w	r6, ip
   881a8:	2e00      	cmp	r6, #0
   881aa:	f43f ae31 	beq.w	87e10 <udd_ep_alloc+0x100>
		if (Is_udd_endpoint_enabled(i)) {
   881ae:	69d6      	ldr	r6, [r2, #28]
   881b0:	fa00 f503 	lsl.w	r5, r0, r3
   881b4:	4235      	tst	r5, r6
   881b6:	d009      	beq.n	881cc <udd_ep_alloc+0x4bc>
			ep_allocated |= 1 << i;
   881b8:	432f      	orrs	r7, r5
   881ba:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   881bc:	69d6      	ldr	r6, [r2, #28]
   881be:	ea26 0505 	bic.w	r5, r6, r5
   881c2:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   881c4:	680e      	ldr	r6, [r1, #0]
   881c6:	f026 0502 	bic.w	r5, r6, #2
   881ca:	600d      	str	r5, [r1, #0]
   881cc:	f103 33ff 	add.w	r3, r3, #4294967295
   881d0:	f1a1 0104 	sub.w	r1, r1, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   881d4:	b2dd      	uxtb	r5, r3
   881d6:	42a5      	cmp	r5, r4
   881d8:	bf88      	it	hi
   881da:	46a0      	movhi	r8, r4
   881dc:	f63f ae1a 	bhi.w	87e14 <udd_ep_alloc+0x104>
   881e0:	e6b1      	b.n	87f46 <udd_ep_alloc+0x236>
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
   881e2:	fa00 f603 	lsl.w	r6, r0, r3
   881e6:	4337      	orrs	r7, r6
   881e8:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   881ea:	69d4      	ldr	r4, [r2, #28]
   881ec:	ea24 0505 	bic.w	r5, r4, r5
   881f0:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   881f2:	f851 6c04 	ldr.w	r6, [r1, #-4]
   881f6:	f026 0402 	bic.w	r4, r6, #2
   881fa:	f841 4c04 	str.w	r4, [r1, #-4]
   881fe:	f103 33ff 	add.w	r3, r3, #4294967295
   88202:	f1a9 0104 	sub.w	r1, r9, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   88206:	b2dd      	uxtb	r5, r3
   88208:	4545      	cmp	r5, r8
   8820a:	f63f ae03 	bhi.w	87e14 <udd_ep_alloc+0x104>
   8820e:	4644      	mov	r4, r8
   88210:	e699      	b.n	87f46 <udd_ep_alloc+0x236>
   88212:	bf00      	nop

00088214 <udd_ep_abort>:
#endif
}


void udd_ep_abort(udd_ep_id_t ep)
{
   88214:	b538      	push	{r3, r4, r5, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   88216:	f000 030f 	and.w	r3, r0, #15
		udd_disable_in_send_interrupt(ep_index);
	} else
#endif
	{
		// Stop DMA transfer
		udd_disable_endpoint_dma_interrupt(ep_index);
   8821a:	f103 32ff 	add.w	r2, r3, #4294967295
   8821e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   88222:	fa01 f102 	lsl.w	r1, r1, r2
   88226:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   8822a:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8822e:	6151      	str	r1, [r2, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   88230:	f44f 4443 	mov.w	r4, #49920	; 0xc300
   88234:	f2c4 040a 	movt	r4, #16394	; 0x400a
   88238:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   8823c:	f04f 0400 	mov.w	r4, #0
   88240:	608c      	str	r4, [r1, #8]
	}
	udd_disable_endpoint_interrupt(ep_index);
   88242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   88246:	fa01 f103 	lsl.w	r1, r1, r3
   8824a:	6151      	str	r1, [r2, #20]
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
   8824c:	f010 0f80 	tst.w	r0, #128	; 0x80
   88250:	d01c      	beq.n	8828c <udd_ep_abort+0x78>
		while(udd_nb_busy_bank(ep_index)) {
   88252:	ea4f 0383 	mov.w	r3, r3, lsl #2
   88256:	f24c 1530 	movw	r5, #49456	; 0xc130
   8825a:	f2c4 050a 	movt	r5, #16394	; 0x400a
   8825e:	1959      	adds	r1, r3, r5
			udd_kill_last_in_bank(ep_index);
   88260:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   88264:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88268:	189c      	adds	r4, r3, r2
   8826a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
   8826e:	f24c 12c0 	movw	r2, #49600	; 0xc1c0
   88272:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88276:	189a      	adds	r2, r3, r2
   88278:	e004      	b.n	88284 <udd_ep_abort+0x70>
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
			udd_kill_last_in_bank(ep_index);
   8827a:	6025      	str	r5, [r4, #0]
			while(Is_udd_kill_last(ep_index));
   8827c:	6813      	ldr	r3, [r2, #0]
   8827e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   88282:	d1fb      	bne.n	8827c <udd_ep_abort+0x68>
		udd_endpoint_dma_set_control(ep_index, 0);
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
   88284:	680b      	ldr	r3, [r1, #0]
   88286:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   8828a:	d1f6      	bne.n	8827a <udd_ep_abort+0x66>
			udd_kill_last_in_bank(ep_index);
			while(Is_udd_kill_last(ep_index));
		}
	}
	udd_ep_abort_job(ep);
   8828c:	f646 01d1 	movw	r1, #26833	; 0x68d1
   88290:	f2c0 0108 	movt	r1, #8
   88294:	4788      	blx	r1
   88296:	bd38      	pop	{r3, r4, r5, pc}

00088298 <udd_ep_wait_stall_clear>:
}


bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
   88298:	b510      	push	{r4, lr}
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   8829a:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   8829e:	2805      	cmp	r0, #5
   882a0:	d831      	bhi.n	88306 <udd_ep_wait_stall_clear+0x6e>
		return false;
	}

	ptr_job = &udd_ep_job[ep - 1];

	if (!Is_udd_endpoint_enabled(ep)) {
   882a2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   882a6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   882aa:	69db      	ldr	r3, [r3, #28]
   882ac:	f04f 0201 	mov.w	r2, #1
   882b0:	fa02 f200 	lsl.w	r2, r2, r0
   882b4:	421a      	tst	r2, r3
   882b6:	d029      	beq.n	8830c <udd_ep_wait_stall_clear+0x74>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	ptr_job = &udd_ep_job[ep - 1];
   882b8:	f100 33ff 	add.w	r3, r0, #4294967295
   882bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   882c0:	f241 6230 	movw	r2, #5680	; 0x1630
   882c4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   882c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (!Is_udd_endpoint_enabled(ep)) {
		return false; // Endpoint not enabled
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
   882cc:	7d1a      	ldrb	r2, [r3, #20]
   882ce:	f012 0f01 	tst.w	r2, #1
   882d2:	d11e      	bne.n	88312 <udd_ep_wait_stall_clear+0x7a>
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
   882d4:	f24c 14c0 	movw	r4, #49600	; 0xc1c0
   882d8:	f2c4 040a 	movt	r4, #16394	; 0x400a
   882dc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   882e0:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   882e4:	d103      	bne.n	882ee <udd_ep_wait_stall_clear+0x56>
			|| ptr_job->stall_requested) {
   882e6:	f002 0204 	and.w	r2, r2, #4
   882ea:	b2d0      	uxtb	r0, r2
   882ec:	b138      	cbz	r0, 882fe <udd_ep_wait_stall_clear+0x66>
		// Endpoint halted then registes the callback
		ptr_job->busy = true;
   882ee:	7d1a      	ldrb	r2, [r3, #20]
   882f0:	f042 0001 	orr.w	r0, r2, #1
   882f4:	7518      	strb	r0, [r3, #20]
		ptr_job->call_nohalt = callback;
   882f6:	6019      	str	r1, [r3, #0]
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
   882f8:	f04f 0001 	mov.w	r0, #1

	if (Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		// Endpoint halted then registes the callback
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
   882fc:	bd10      	pop	{r4, pc}
	} else {
		// endpoint not halted then call directly callback
		callback();
   882fe:	4788      	blx	r1
	}
	return true;
   88300:	f04f 0001 	mov.w	r0, #1
   88304:	bd10      	pop	{r4, pc}
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
   88306:	f04f 0000 	mov.w	r0, #0
   8830a:	bd10      	pop	{r4, pc}
	}

	ptr_job = &udd_ep_job[ep - 1];

	if (!Is_udd_endpoint_enabled(ep)) {
		return false; // Endpoint not enabled
   8830c:	f04f 0000 	mov.w	r0, #0
   88310:	bd10      	pop	{r4, pc}
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
   88312:	f04f 0000 	mov.w	r0, #0
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
   88316:	bd10      	pop	{r4, pc}

00088318 <udd_test_mode_j>:

#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
	udd_enable_hs_test_mode();
   88318:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8831c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88320:	681a      	ldr	r2, [r3, #0]
   88322:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   88326:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   8832a:	6019      	str	r1, [r3, #0]
	udd_enable_hs_test_mode_j();
   8832c:	681a      	ldr	r2, [r3, #0]
   8832e:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
   88332:	6018      	str	r0, [r3, #0]
   88334:	4770      	bx	lr
   88336:	bf00      	nop

00088338 <udd_test_mode_k>:
}


void udd_test_mode_k(void)
{
	udd_enable_hs_test_mode();
   88338:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8833c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88340:	681a      	ldr	r2, [r3, #0]
   88342:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   88346:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   8834a:	6019      	str	r1, [r3, #0]
	udd_enable_hs_test_mode_k();
   8834c:	681a      	ldr	r2, [r3, #0]
   8834e:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   88352:	6018      	str	r0, [r3, #0]
   88354:	4770      	bx	lr
   88356:	bf00      	nop

00088358 <udd_test_mode_se0_nak>:
}


void udd_test_mode_se0_nak(void)
{
	udd_enable_hs_test_mode();
   88358:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8835c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88360:	681a      	ldr	r2, [r3, #0]
   88362:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   88366:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   8836a:	6019      	str	r1, [r3, #0]
   8836c:	4770      	bx	lr
   8836e:	bf00      	nop

00088370 <udd_test_mode_packet>:
}


void udd_test_mode_packet(void)
{
   88370:	b470      	push	{r4, r5, r6}
   88372:	b08f      	sub	sp, #60	; 0x3c
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   88374:	f64d 25d4 	movw	r5, #56020	; 0xdad4
   88378:	f2c0 0508 	movt	r5, #8
   8837c:	ac00      	add	r4, sp, #0
   8837e:	6828      	ldr	r0, [r5, #0]
   88380:	6869      	ldr	r1, [r5, #4]
   88382:	68aa      	ldr	r2, [r5, #8]
   88384:	68eb      	ldr	r3, [r5, #12]
   88386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   88388:	f105 0510 	add.w	r5, r5, #16
   8838c:	4626      	mov	r6, r4
   8838e:	6828      	ldr	r0, [r5, #0]
   88390:	6869      	ldr	r1, [r5, #4]
   88392:	68aa      	ldr	r2, [r5, #8]
   88394:	68eb      	ldr	r3, [r5, #12]
   88396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   88398:	6928      	ldr	r0, [r5, #16]
   8839a:	6969      	ldr	r1, [r5, #20]
   8839c:	69aa      	ldr	r2, [r5, #24]
   8839e:	69eb      	ldr	r3, [r5, #28]
   883a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   883a2:	6a28      	ldr	r0, [r5, #32]
   883a4:	f846 0f20 	str.w	r0, [r6, #32]!
   883a8:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   883ac:	f105 0520 	add.w	r5, r5, #32
   883b0:	7131      	strb	r1, [r6, #4]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   883b2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   883b6:	f2c4 040a 	movt	r4, #16394	; 0x400a
   883ba:	69e2      	ldr	r2, [r4, #28]
   883bc:	f022 0301 	bic.w	r3, r2, #1
   883c0:	61e3      	str	r3, [r4, #28]
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
   883c2:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   883c6:	f2c4 000a 	movt	r0, #16394	; 0x400a
   883ca:	6801      	ldr	r1, [r0, #0]
   883cc:	f421 52cb 	bic.w	r2, r1, #6496	; 0x1960
   883d0:	f022 031c 	bic.w	r3, r2, #28
   883d4:	f443 5189 	orr.w	r1, r3, #4384	; 0x1120
   883d8:	f041 0210 	orr.w	r2, r1, #16
   883dc:	6002      	str	r2, [r0, #0]
			64, UOTGHS_DEVEPTCFG_EPBK_1_BANK);
	udd_allocate_memory(0);
   883de:	6803      	ldr	r3, [r0, #0]
   883e0:	f043 0102 	orr.w	r1, r3, #2
   883e4:	6001      	str	r1, [r0, #0]
	udd_enable_endpoint(0);
   883e6:	69e0      	ldr	r0, [r4, #28]
   883e8:	f040 0201 	orr.w	r2, r0, #1
   883ec:	61e2      	str	r2, [r4, #28]

	udd_enable_hs_test_mode();
   883ee:	6823      	ldr	r3, [r4, #0]
   883f0:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
   883f4:	f441 6000 	orr.w	r0, r1, #2048	; 0x800
   883f8:	6020      	str	r0, [r4, #0]
	udd_enable_hs_test_mode_packet();
   883fa:	6822      	ldr	r2, [r4, #0]
   883fc:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
   88400:	6023      	str	r3, [r4, #0]

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
   88402:	f04f 0435 	mov.w	r4, #53	; 0x35
   88406:	f2c2 0418 	movt	r4, #8216	; 0x2018
   8840a:	f10d 31ff 	add.w	r1, sp, #4294967295
		*ptr_dest++ = *ptr_src++;
   8840e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   88412:	f04f 0300 	mov.w	r3, #0
   88416:	f2c2 0318 	movt	r3, #8216	; 0x2018
   8841a:	f803 0b01 	strb.w	r0, [r3], #1
   8841e:	f101 0001 	add.w	r0, r1, #1
   88422:	7849      	ldrb	r1, [r1, #1]
   88424:	461a      	mov	r2, r3
   88426:	f802 1b01 	strb.w	r1, [r2], #1
   8842a:	f100 0101 	add.w	r1, r0, #1
   8842e:	7840      	ldrb	r0, [r0, #1]
   88430:	7058      	strb	r0, [r3, #1]
   88432:	f102 0301 	add.w	r3, r2, #1

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
   88436:	42a3      	cmp	r3, r4
   88438:	d1f1      	bne.n	8841e <udd_test_mode_packet+0xae>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ack_fifocon(0);
   8843a:	f24c 2120 	movw	r1, #49696	; 0xc220
   8843e:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88442:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   88446:	600a      	str	r2, [r1, #0]
}
   88448:	b00f      	add	sp, #60	; 0x3c
   8844a:	bc70      	pop	{r4, r5, r6}
   8844c:	4770      	bx	lr
   8844e:	bf00      	nop

00088450 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   88450:	e7fe      	b.n	88450 <Dummy_Handler>
   88452:	bf00      	nop

00088454 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   88454:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   88456:	f240 0300 	movw	r3, #0
   8845a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8845e:	f64d 621c 	movw	r2, #56860	; 0xde1c
   88462:	f2c0 0208 	movt	r2, #8
   88466:	429a      	cmp	r2, r3
   88468:	d003      	beq.n	88472 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   8846a:	4840      	ldr	r0, [pc, #256]	; (8856c <Reset_Handler+0x118>)
   8846c:	4940      	ldr	r1, [pc, #256]	; (88570 <Reset_Handler+0x11c>)
   8846e:	4281      	cmp	r1, r0
   88470:	d304      	bcc.n	8847c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   88472:	4b40      	ldr	r3, [pc, #256]	; (88574 <Reset_Handler+0x120>)
   88474:	4a40      	ldr	r2, [pc, #256]	; (88578 <Reset_Handler+0x124>)
   88476:	429a      	cmp	r2, r3
   88478:	d325      	bcc.n	884c6 <Reset_Handler+0x72>
   8847a:	e042      	b.n	88502 <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   8847c:	4d3f      	ldr	r5, [pc, #252]	; (8857c <Reset_Handler+0x128>)
   8847e:	4c40      	ldr	r4, [pc, #256]	; (88580 <Reset_Handler+0x12c>)
   88480:	1b63      	subs	r3, r4, r5
   88482:	f023 0503 	bic.w	r5, r3, #3
   88486:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   8848a:	f240 0200 	movw	r2, #0
   8848e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88492:	f64d 611c 	movw	r1, #56860	; 0xde1c
   88496:	f2c0 0108 	movt	r1, #8
   8849a:	f105 0004 	add.w	r0, r5, #4
   8849e:	f3c5 0480 	ubfx	r4, r5, #2, #1
   884a2:	585d      	ldr	r5, [r3, r1]
   884a4:	509d      	str	r5, [r3, r2]
   884a6:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   884aa:	4283      	cmp	r3, r0
   884ac:	d155      	bne.n	8855a <Reset_Handler+0x106>
   884ae:	e7e0      	b.n	88472 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   884b0:	585d      	ldr	r5, [r3, r1]
   884b2:	509d      	str	r5, [r3, r2]
   884b4:	f103 0304 	add.w	r3, r3, #4
   884b8:	585c      	ldr	r4, [r3, r1]
   884ba:	509c      	str	r4, [r3, r2]
   884bc:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   884c0:	4283      	cmp	r3, r0
   884c2:	d1f5      	bne.n	884b0 <Reset_Handler+0x5c>
   884c4:	e7d5      	b.n	88472 <Reset_Handler+0x1e>
   884c6:	4d2f      	ldr	r5, [pc, #188]	; (88584 <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   884c8:	492f      	ldr	r1, [pc, #188]	; (88588 <Reset_Handler+0x134>)
   884ca:	1b48      	subs	r0, r1, r5
   884cc:	f020 0403 	bic.w	r4, r0, #3
   884d0:	f640 3384 	movw	r3, #2948	; 0xb84
   884d4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   884d8:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   884da:	f04f 0100 	mov.w	r1, #0
   884de:	1b50      	subs	r0, r2, r5
   884e0:	f1a0 0004 	sub.w	r0, r0, #4
   884e4:	f3c0 0480 	ubfx	r4, r0, #2, #1
   884e8:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   884ec:	4295      	cmp	r5, r2
   884ee:	d12d      	bne.n	8854c <Reset_Handler+0xf8>
   884f0:	e007      	b.n	88502 <Reset_Handler+0xae>
   884f2:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   884f6:	6069      	str	r1, [r5, #4]
   884f8:	f105 0508 	add.w	r5, r5, #8
   884fc:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   884fe:	4295      	cmp	r5, r2
   88500:	d1f7      	bne.n	884f2 <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   88502:	f240 0500 	movw	r5, #0
   88506:	f2c0 0508 	movt	r5, #8
   8850a:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   8850e:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   88512:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   88516:	f2ce 0000 	movt	r0, #57344	; 0xe000
   8851a:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8851c:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   88520:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   88524:	d207      	bcs.n	88536 <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   88526:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   8852a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8852e:	689d      	ldr	r5, [r3, #8]
   88530:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   88534:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   88536:	f648 7151 	movw	r1, #36689	; 0x8f51
   8853a:	f2c0 0108 	movt	r1, #8
   8853e:	4788      	blx	r1

	/* Branch to main function */
	main();
   88540:	f648 0089 	movw	r0, #34953	; 0x8889
   88544:	f2c0 0008 	movt	r0, #8
   88548:	4780      	blx	r0
   8854a:	e7fe      	b.n	8854a <Reset_Handler+0xf6>
   8854c:	2c00      	cmp	r4, #0
   8854e:	d0d0      	beq.n	884f2 <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   88550:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   88554:	4295      	cmp	r5, r2
   88556:	d1cc      	bne.n	884f2 <Reset_Handler+0x9e>
   88558:	e7d3      	b.n	88502 <Reset_Handler+0xae>
   8855a:	2c00      	cmp	r4, #0
   8855c:	d0a8      	beq.n	884b0 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   8855e:	585c      	ldr	r4, [r3, r1]
   88560:	509c      	str	r4, [r3, r2]
   88562:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   88566:	4283      	cmp	r3, r0
   88568:	d1a2      	bne.n	884b0 <Reset_Handler+0x5c>
   8856a:	e782      	b.n	88472 <Reset_Handler+0x1e>
   8856c:	20070b84 	.word	0x20070b84
   88570:	20070000 	.word	0x20070000
   88574:	20071ca8 	.word	0x20071ca8
   88578:	20070b84 	.word	0x20070b84
   8857c:	20070004 	.word	0x20070004
   88580:	20070b87 	.word	0x20070b87
   88584:	20070b80 	.word	0x20070b80
   88588:	20071ca3 	.word	0x20071ca3

0008858c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8858c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   88590:	f2c4 030e 	movt	r3, #16398	; 0x400e
   88594:	6b18      	ldr	r0, [r3, #48]	; 0x30
   88596:	f000 0103 	and.w	r1, r0, #3
   8859a:	2903      	cmp	r1, #3
   8859c:	f200 80b1 	bhi.w	88702 <SystemCoreClockUpdate+0x176>
   885a0:	e8df f001 	tbb	[pc, r1]
   885a4:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   885a8:	f641 2010 	movw	r0, #6672	; 0x1a10
   885ac:	f2c4 000e 	movt	r0, #16398	; 0x400e
   885b0:	6941      	ldr	r1, [r0, #20]
   885b2:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   885b6:	f240 2394 	movw	r3, #660	; 0x294
   885ba:	f2c2 0307 	movt	r3, #8199	; 0x2007
   885be:	bf14      	ite	ne
   885c0:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   885c4:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   885c8:	601a      	str	r2, [r3, #0]
   885ca:	e09a      	b.n	88702 <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   885cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   885d0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   885d4:	6a18      	ldr	r0, [r3, #32]
   885d6:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   885da:	d009      	beq.n	885f0 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   885dc:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   885e0:	f2c0 03b7 	movt	r3, #183	; 0xb7
   885e4:	f240 2294 	movw	r2, #660	; 0x294
   885e8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   885ec:	6013      	str	r3, [r2, #0]
   885ee:	e088      	b.n	88702 <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   885f0:	f44f 6110 	mov.w	r1, #2304	; 0x900
   885f4:	f2c0 013d 	movt	r1, #61	; 0x3d
   885f8:	f240 2294 	movw	r2, #660	; 0x294
   885fc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88600:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   88602:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   88606:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8860a:	6a18      	ldr	r0, [r3, #32]
   8860c:	f000 0170 	and.w	r1, r0, #112	; 0x70
   88610:	2910      	cmp	r1, #16
   88612:	d002      	beq.n	8861a <SystemCoreClockUpdate+0x8e>
   88614:	2920      	cmp	r1, #32
   88616:	d174      	bne.n	88702 <SystemCoreClockUpdate+0x176>
   88618:	e009      	b.n	8862e <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8861a:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   8861e:	f2c0 007a 	movt	r0, #122	; 0x7a
   88622:	f240 2194 	movw	r1, #660	; 0x294
   88626:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8862a:	6008      	str	r0, [r1, #0]
				break;
   8862c:	e069      	b.n	88702 <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8862e:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   88632:	f2c0 03b7 	movt	r3, #183	; 0xb7
   88636:	f240 2294 	movw	r2, #660	; 0x294
   8863a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8863e:	6013      	str	r3, [r2, #0]
				break;
   88640:	e05f      	b.n	88702 <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   88642:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   88646:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8864a:	6a13      	ldr	r3, [r2, #32]
   8864c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   88650:	d009      	beq.n	88666 <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   88652:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   88656:	f2c0 01b7 	movt	r1, #183	; 0xb7
   8865a:	f240 2294 	movw	r2, #660	; 0x294
   8865e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88662:	6011      	str	r1, [r2, #0]
   88664:	e027      	b.n	886b6 <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   88666:	f44f 6010 	mov.w	r0, #2304	; 0x900
   8866a:	f2c0 003d 	movt	r0, #61	; 0x3d
   8866e:	f240 2194 	movw	r1, #660	; 0x294
   88672:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88676:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   88678:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8867c:	f2c4 020e 	movt	r2, #16398	; 0x400e
   88680:	6a13      	ldr	r3, [r2, #32]
   88682:	f003 0070 	and.w	r0, r3, #112	; 0x70
   88686:	2810      	cmp	r0, #16
   88688:	d002      	beq.n	88690 <SystemCoreClockUpdate+0x104>
   8868a:	2820      	cmp	r0, #32
   8868c:	d113      	bne.n	886b6 <SystemCoreClockUpdate+0x12a>
   8868e:	e009      	b.n	886a4 <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   88690:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   88694:	f2c0 037a 	movt	r3, #122	; 0x7a
   88698:	f240 2094 	movw	r0, #660	; 0x294
   8869c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   886a0:	6003      	str	r3, [r0, #0]
				break;
   886a2:	e008      	b.n	886b6 <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   886a4:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   886a8:	f2c0 01b7 	movt	r1, #183	; 0xb7
   886ac:	f240 2294 	movw	r2, #660	; 0x294
   886b0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   886b4:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   886b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   886ba:	f2c4 030e 	movt	r3, #16398	; 0x400e
   886be:	6b18      	ldr	r0, [r3, #48]	; 0x30
   886c0:	f000 0103 	and.w	r1, r0, #3
   886c4:	2902      	cmp	r1, #2
   886c6:	d113      	bne.n	886f0 <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   886c8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   886cc:	f2c4 010e 	movt	r1, #16398	; 0x400e
   886d0:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   886d2:	6a89      	ldr	r1, [r1, #40]	; 0x28
   886d4:	f240 2394 	movw	r3, #660	; 0x294
   886d8:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   886dc:	f3c0 400a 	ubfx	r0, r0, #16, #11
   886e0:	681a      	ldr	r2, [r3, #0]
   886e2:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   886e6:	b2c9      	uxtb	r1, r1
   886e8:	fbb0 f2f1 	udiv	r2, r0, r1
   886ec:	601a      	str	r2, [r3, #0]
   886ee:	e008      	b.n	88702 <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   886f0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   886f4:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   886f8:	f240 2294 	movw	r2, #660	; 0x294
   886fc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88700:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   88702:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   88706:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8870a:	6b10      	ldr	r0, [r2, #48]	; 0x30
   8870c:	f000 0170 	and.w	r1, r0, #112	; 0x70
   88710:	2970      	cmp	r1, #112	; 0x70
   88712:	d10e      	bne.n	88732 <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   88714:	f240 2394 	movw	r3, #660	; 0x294
   88718:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8871c:	6818      	ldr	r0, [r3, #0]
   8871e:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   88722:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   88726:	fba2 0100 	umull	r0, r1, r2, r0
   8872a:	ea4f 0051 	mov.w	r0, r1, lsr #1
   8872e:	6018      	str	r0, [r3, #0]
   88730:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   88732:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   88736:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8873a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8873c:	f240 2094 	movw	r0, #660	; 0x294
   88740:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88744:	f3c2 1102 	ubfx	r1, r2, #4, #3
   88748:	6803      	ldr	r3, [r0, #0]
   8874a:	fa23 f301 	lsr.w	r3, r3, r1
   8874e:	6003      	str	r3, [r0, #0]
   88750:	4770      	bx	lr
   88752:	bf00      	nop

00088754 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   88754:	f64e 23bf 	movw	r3, #60095	; 0xeabf
   88758:	f2c0 1321 	movt	r3, #289	; 0x121
   8875c:	4298      	cmp	r0, r3
   8875e:	d80c      	bhi.n	8877a <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   88760:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   88764:	f2c4 030e 	movt	r3, #16398	; 0x400e
   88768:	f04f 0000 	mov.w	r0, #0
   8876c:	6018      	str	r0, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   8876e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   88772:	f2c4 010e 	movt	r1, #16398	; 0x400e
   88776:	6008      	str	r0, [r1, #0]
   88778:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   8877a:	f24f 017f 	movw	r1, #61567	; 0xf07f
   8877e:	f2c0 21fa 	movt	r1, #762	; 0x2fa
   88782:	4288      	cmp	r0, r1
   88784:	d80c      	bhi.n	887a0 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   88786:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   8878a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8878e:	f44f 7180 	mov.w	r1, #256	; 0x100
   88792:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   88794:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   88798:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8879c:	6011      	str	r1, [r2, #0]
   8879e:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   887a0:	f648 73ff 	movw	r3, #36863	; 0x8fff
   887a4:	f2c0 33d0 	movt	r3, #976	; 0x3d0
   887a8:	4298      	cmp	r0, r3
   887aa:	d80c      	bhi.n	887c6 <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   887ac:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   887b0:	f2c4 010e 	movt	r1, #16398	; 0x400e
   887b4:	f44f 7200 	mov.w	r2, #512	; 0x200
   887b8:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   887ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   887be:	f2c4 030e 	movt	r3, #16398	; 0x400e
   887c2:	601a      	str	r2, [r3, #0]
   887c4:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   887c6:	f24b 31ff 	movw	r1, #46079	; 0xb3ff
   887ca:	f2c0 41c4 	movt	r1, #1220	; 0x4c4
   887ce:	4288      	cmp	r0, r1
   887d0:	d80c      	bhi.n	887ec <system_init_flash+0x98>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   887d2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   887d6:	f2c4 030e 	movt	r3, #16398	; 0x400e
   887da:	f44f 7240 	mov.w	r2, #768	; 0x300
   887de:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   887e0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   887e4:	f2c4 000e 	movt	r0, #16398	; 0x400e
   887e8:	6002      	str	r2, [r0, #0]
   887ea:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   887ec:	f644 237f 	movw	r3, #19071	; 0x4a7f
   887f0:	f2c0 535d 	movt	r3, #1373	; 0x55d
   887f4:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   887f6:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   887fa:	f2c4 000e 	movt	r0, #16398	; 0x400e
   887fe:	bf94      	ite	ls
   88800:	f44f 6280 	movls.w	r2, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   88804:	f44f 62a0 	movhi.w	r2, #1280	; 0x500
   88808:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   8880a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   8880e:	f2c4 010e 	movt	r1, #16398	; 0x400e
   88812:	600a      	str	r2, [r1, #0]
   88814:	4770      	bx	lr
   88816:	bf00      	nop

00088818 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   88818:	f241 63b0 	movw	r3, #5808	; 0x16b0
   8881c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88820:	6819      	ldr	r1, [r3, #0]
   88822:	b941      	cbnz	r1, 88836 <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
   88824:	f241 63b0 	movw	r3, #5808	; 0x16b0
   88828:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8882c:	f643 42a8 	movw	r2, #15528	; 0x3ca8
   88830:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88834:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   88836:	f241 61b0 	movw	r1, #5808	; 0x16b0
   8883a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8883e:	680b      	ldr	r3, [r1, #0]

	heap += incr;
   88840:	1818      	adds	r0, r3, r0
   88842:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
   88844:	4618      	mov	r0, r3
   88846:	4770      	bx	lr

00088848 <main_msc_enable>:
static bool main_b_cdc_enable = false;


bool main_msc_enable(void)
{
	main_b_msc_enable = true;
   88848:	f04f 0001 	mov.w	r0, #1
   8884c:	f241 63b4 	movw	r3, #5812	; 0x16b4
   88850:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88854:	7018      	strb	r0, [r3, #0]
	return true;
}
   88856:	4770      	bx	lr

00088858 <main_msc_disable>:
void main_msc_disable(void)
{
	main_b_msc_enable = false;
   88858:	f241 63b4 	movw	r3, #5812	; 0x16b4
   8885c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88860:	f04f 0200 	mov.w	r2, #0
   88864:	701a      	strb	r2, [r3, #0]
   88866:	4770      	bx	lr

00088868 <main_cdc_enable>:
}
bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
   88868:	f04f 0001 	mov.w	r0, #1
   8886c:	f241 63b5 	movw	r3, #5813	; 0x16b5
   88870:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88874:	7018      	strb	r0, [r3, #0]
	return true;
}
   88876:	4770      	bx	lr

00088878 <main_cdc_disable>:
void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
   88878:	f241 63b5 	movw	r3, #5813	; 0x16b5
   8887c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88880:	f04f 0200 	mov.w	r2, #0
   88884:	701a      	strb	r2, [r3, #0]
   88886:	4770      	bx	lr

00088888 <main>:
}

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   88888:	b570      	push	{r4, r5, r6, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
   8888a:	f04f 0101 	mov.w	r1, #1
   8888e:	f240 2390 	movw	r3, #656	; 0x290
   88892:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88896:	7019      	strb	r1, [r3, #0]
   88898:	f3bf 8f5f 	dmb	sy
   8889c:	b662      	cpsie	i
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
   8889e:	f641 3084 	movw	r0, #7044	; 0x1b84
   888a2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   888a6:	f04f 0200 	mov.w	r2, #0
   888aa:	7002      	strb	r2, [r0, #0]
   888ac:	7042      	strb	r2, [r0, #1]
   888ae:	7082      	strb	r2, [r0, #2]
   888b0:	70c2      	strb	r2, [r0, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   888b2:	7101      	strb	r1, [r0, #4]

	// Initialize the sleep manager
	sleepmgr_init();

	sysclk_init();
   888b4:	f643 24b5 	movw	r4, #15029	; 0x3ab5
   888b8:	f2c0 0408 	movt	r4, #8
   888bc:	47a0      	blx	r4
	board_init();
   888be:	f645 6555 	movw	r5, #24149	; 0x5e55
   888c2:	f2c0 0508 	movt	r5, #8
   888c6:	47a8      	blx	r5
	ui_init();
   888c8:	f643 16f5 	movw	r6, #14837	; 0x39f5
   888cc:	f2c0 0608 	movt	r6, #8
   888d0:	47b0      	blx	r6
	ui_powerdown();
   888d2:	f643 211d 	movw	r1, #14877	; 0x3a1d
   888d6:	f2c0 0108 	movt	r1, #8
   888da:	4788      	blx	r1
	#define VDD_MCI_GPIO			(PIO_PB24_IDX)
	#define VDD_MCI_PIO_ID			ID_PIOB
	#define VDD_MCI_ACTIVE_LEVEL    IOPORT_PIN_LEVEL_LOW
	#define VDD_MCI_INACTIVE_LEVEL  IOPORT_PIN_LEVEL_HIGH
	/* Enable power to the sd card slot */
	pmc_enable_periph_clk(VDD_MCI_PIO_ID);
   888dc:	f04f 000c 	mov.w	r0, #12
   888e0:	f246 33d1 	movw	r3, #25553	; 0x63d1
   888e4:	f2c0 0308 	movt	r3, #8
   888e8:	4798      	blx	r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   888ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   888ee:	f2c4 000e 	movt	r0, #16398	; 0x400e
   888f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   888f6:	6102      	str	r2, [r0, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   888f8:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   888fc:	6342      	str	r2, [r0, #52]	; 0x34
	ioport_set_pin_dir(VDD_MCI_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(VDD_MCI_GPIO, VDD_MCI_ACTIVE_LEVEL);
	delay_ms(200);
   888fe:	f44f 409f 	mov.w	r0, #20352	; 0x4f80
   88902:	f2c0 0012 	movt	r0, #18
   88906:	f240 0401 	movw	r4, #1
   8890a:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8890e:	47a0      	blx	r4

	/* Initialize SD MMC stack */
	sd_mmc_init();
   88910:	f240 4569 	movw	r5, #1129	; 0x469
   88914:	f2c0 0508 	movt	r5, #8
   88918:	47a8      	blx	r5

	// Start USB stack to authorize VBus monitoring
	udc_start();
   8891a:	f245 567d 	movw	r6, #21885	; 0x557d
   8891e:	f2c0 0608 	movt	r6, #8
   88922:	47b0      	blx	r6
    console_init();
   88924:	f243 7195 	movw	r1, #14229	; 0x3795
   88928:	f2c0 0108 	movt	r1, #8
   8892c:	4788      	blx	r1
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) 
	{
		console_process();
   8892e:	f243 75ad 	movw	r5, #14253	; 0x37ad
   88932:	f2c0 0508 	movt	r5, #8

		if (main_b_msc_enable) 
   88936:	f241 64b4 	movw	r4, #5812	; 0x16b4
   8893a:	f2c2 0407 	movt	r4, #8199	; 0x2007
		{
			if (!udi_msc_process_trans()) 
   8893e:	f245 16d9 	movw	r6, #20953	; 0x51d9
   88942:	f2c0 0608 	movt	r6, #8
    console_init();
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) 
	{
		console_process();
   88946:	47a8      	blx	r5

		if (main_b_msc_enable) 
   88948:	7823      	ldrb	r3, [r4, #0]
   8894a:	2b00      	cmp	r3, #0
   8894c:	d0fb      	beq.n	88946 <main+0xbe>
		{
			if (!udi_msc_process_trans()) 
   8894e:	47b0      	blx	r6
   88950:	e7f9      	b.n	88946 <main+0xbe>
   88952:	bf00      	nop

00088954 <__aeabi_dmul>:
   88954:	b570      	push	{r4, r5, r6, lr}
   88956:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8895a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8895e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   88962:	bf1d      	ittte	ne
   88964:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   88968:	ea94 0f0c 	teqne	r4, ip
   8896c:	ea95 0f0c 	teqne	r5, ip
   88970:	f000 f8de 	bleq	88b30 <__aeabi_dmul+0x1dc>
   88974:	442c      	add	r4, r5
   88976:	ea81 0603 	eor.w	r6, r1, r3
   8897a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8897e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   88982:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   88986:	bf18      	it	ne
   88988:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8898c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   88990:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   88994:	d038      	beq.n	88a08 <__aeabi_dmul+0xb4>
   88996:	fba0 ce02 	umull	ip, lr, r0, r2
   8899a:	f04f 0500 	mov.w	r5, #0
   8899e:	fbe1 e502 	umlal	lr, r5, r1, r2
   889a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   889a6:	fbe0 e503 	umlal	lr, r5, r0, r3
   889aa:	f04f 0600 	mov.w	r6, #0
   889ae:	fbe1 5603 	umlal	r5, r6, r1, r3
   889b2:	f09c 0f00 	teq	ip, #0
   889b6:	bf18      	it	ne
   889b8:	f04e 0e01 	orrne.w	lr, lr, #1
   889bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   889c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   889c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   889c8:	d204      	bcs.n	889d4 <__aeabi_dmul+0x80>
   889ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   889ce:	416d      	adcs	r5, r5
   889d0:	eb46 0606 	adc.w	r6, r6, r6
   889d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   889d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   889dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   889e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   889e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   889e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   889ec:	bf88      	it	hi
   889ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   889f2:	d81e      	bhi.n	88a32 <__aeabi_dmul+0xde>
   889f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   889f8:	bf08      	it	eq
   889fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   889fe:	f150 0000 	adcs.w	r0, r0, #0
   88a02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   88a06:	bd70      	pop	{r4, r5, r6, pc}
   88a08:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   88a0c:	ea46 0101 	orr.w	r1, r6, r1
   88a10:	ea40 0002 	orr.w	r0, r0, r2
   88a14:	ea81 0103 	eor.w	r1, r1, r3
   88a18:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   88a1c:	bfc2      	ittt	gt
   88a1e:	ebd4 050c 	rsbsgt	r5, r4, ip
   88a22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   88a26:	bd70      	popgt	{r4, r5, r6, pc}
   88a28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   88a2c:	f04f 0e00 	mov.w	lr, #0
   88a30:	3c01      	subs	r4, #1
   88a32:	f300 80ab 	bgt.w	88b8c <__aeabi_dmul+0x238>
   88a36:	f114 0f36 	cmn.w	r4, #54	; 0x36
   88a3a:	bfde      	ittt	le
   88a3c:	2000      	movle	r0, #0
   88a3e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   88a42:	bd70      	pople	{r4, r5, r6, pc}
   88a44:	f1c4 0400 	rsb	r4, r4, #0
   88a48:	3c20      	subs	r4, #32
   88a4a:	da35      	bge.n	88ab8 <__aeabi_dmul+0x164>
   88a4c:	340c      	adds	r4, #12
   88a4e:	dc1b      	bgt.n	88a88 <__aeabi_dmul+0x134>
   88a50:	f104 0414 	add.w	r4, r4, #20
   88a54:	f1c4 0520 	rsb	r5, r4, #32
   88a58:	fa00 f305 	lsl.w	r3, r0, r5
   88a5c:	fa20 f004 	lsr.w	r0, r0, r4
   88a60:	fa01 f205 	lsl.w	r2, r1, r5
   88a64:	ea40 0002 	orr.w	r0, r0, r2
   88a68:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   88a6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   88a70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   88a74:	fa21 f604 	lsr.w	r6, r1, r4
   88a78:	eb42 0106 	adc.w	r1, r2, r6
   88a7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   88a80:	bf08      	it	eq
   88a82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   88a86:	bd70      	pop	{r4, r5, r6, pc}
   88a88:	f1c4 040c 	rsb	r4, r4, #12
   88a8c:	f1c4 0520 	rsb	r5, r4, #32
   88a90:	fa00 f304 	lsl.w	r3, r0, r4
   88a94:	fa20 f005 	lsr.w	r0, r0, r5
   88a98:	fa01 f204 	lsl.w	r2, r1, r4
   88a9c:	ea40 0002 	orr.w	r0, r0, r2
   88aa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   88aa4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   88aa8:	f141 0100 	adc.w	r1, r1, #0
   88aac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   88ab0:	bf08      	it	eq
   88ab2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   88ab6:	bd70      	pop	{r4, r5, r6, pc}
   88ab8:	f1c4 0520 	rsb	r5, r4, #32
   88abc:	fa00 f205 	lsl.w	r2, r0, r5
   88ac0:	ea4e 0e02 	orr.w	lr, lr, r2
   88ac4:	fa20 f304 	lsr.w	r3, r0, r4
   88ac8:	fa01 f205 	lsl.w	r2, r1, r5
   88acc:	ea43 0302 	orr.w	r3, r3, r2
   88ad0:	fa21 f004 	lsr.w	r0, r1, r4
   88ad4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   88ad8:	fa21 f204 	lsr.w	r2, r1, r4
   88adc:	ea20 0002 	bic.w	r0, r0, r2
   88ae0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   88ae4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   88ae8:	bf08      	it	eq
   88aea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   88aee:	bd70      	pop	{r4, r5, r6, pc}
   88af0:	f094 0f00 	teq	r4, #0
   88af4:	d10f      	bne.n	88b16 <__aeabi_dmul+0x1c2>
   88af6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   88afa:	0040      	lsls	r0, r0, #1
   88afc:	eb41 0101 	adc.w	r1, r1, r1
   88b00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   88b04:	bf08      	it	eq
   88b06:	3c01      	subeq	r4, #1
   88b08:	d0f7      	beq.n	88afa <__aeabi_dmul+0x1a6>
   88b0a:	ea41 0106 	orr.w	r1, r1, r6
   88b0e:	f095 0f00 	teq	r5, #0
   88b12:	bf18      	it	ne
   88b14:	4770      	bxne	lr
   88b16:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   88b1a:	0052      	lsls	r2, r2, #1
   88b1c:	eb43 0303 	adc.w	r3, r3, r3
   88b20:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   88b24:	bf08      	it	eq
   88b26:	3d01      	subeq	r5, #1
   88b28:	d0f7      	beq.n	88b1a <__aeabi_dmul+0x1c6>
   88b2a:	ea43 0306 	orr.w	r3, r3, r6
   88b2e:	4770      	bx	lr
   88b30:	ea94 0f0c 	teq	r4, ip
   88b34:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   88b38:	bf18      	it	ne
   88b3a:	ea95 0f0c 	teqne	r5, ip
   88b3e:	d00c      	beq.n	88b5a <__aeabi_dmul+0x206>
   88b40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   88b44:	bf18      	it	ne
   88b46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   88b4a:	d1d1      	bne.n	88af0 <__aeabi_dmul+0x19c>
   88b4c:	ea81 0103 	eor.w	r1, r1, r3
   88b50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   88b54:	f04f 0000 	mov.w	r0, #0
   88b58:	bd70      	pop	{r4, r5, r6, pc}
   88b5a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   88b5e:	bf06      	itte	eq
   88b60:	4610      	moveq	r0, r2
   88b62:	4619      	moveq	r1, r3
   88b64:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   88b68:	d019      	beq.n	88b9e <__aeabi_dmul+0x24a>
   88b6a:	ea94 0f0c 	teq	r4, ip
   88b6e:	d102      	bne.n	88b76 <__aeabi_dmul+0x222>
   88b70:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   88b74:	d113      	bne.n	88b9e <__aeabi_dmul+0x24a>
   88b76:	ea95 0f0c 	teq	r5, ip
   88b7a:	d105      	bne.n	88b88 <__aeabi_dmul+0x234>
   88b7c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   88b80:	bf1c      	itt	ne
   88b82:	4610      	movne	r0, r2
   88b84:	4619      	movne	r1, r3
   88b86:	d10a      	bne.n	88b9e <__aeabi_dmul+0x24a>
   88b88:	ea81 0103 	eor.w	r1, r1, r3
   88b8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   88b90:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   88b94:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   88b98:	f04f 0000 	mov.w	r0, #0
   88b9c:	bd70      	pop	{r4, r5, r6, pc}
   88b9e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   88ba2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   88ba6:	bd70      	pop	{r4, r5, r6, pc}

00088ba8 <__aeabi_ddiv>:
   88ba8:	b570      	push	{r4, r5, r6, lr}
   88baa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   88bae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   88bb2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   88bb6:	bf1d      	ittte	ne
   88bb8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   88bbc:	ea94 0f0c 	teqne	r4, ip
   88bc0:	ea95 0f0c 	teqne	r5, ip
   88bc4:	f000 f8a7 	bleq	88d16 <__aeabi_ddiv+0x16e>
   88bc8:	eba4 0405 	sub.w	r4, r4, r5
   88bcc:	ea81 0e03 	eor.w	lr, r1, r3
   88bd0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   88bd4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   88bd8:	f000 8088 	beq.w	88cec <__aeabi_ddiv+0x144>
   88bdc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   88be0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   88be4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   88be8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   88bec:	ea4f 2202 	mov.w	r2, r2, lsl #8
   88bf0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   88bf4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   88bf8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   88bfc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   88c00:	429d      	cmp	r5, r3
   88c02:	bf08      	it	eq
   88c04:	4296      	cmpeq	r6, r2
   88c06:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   88c0a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   88c0e:	d202      	bcs.n	88c16 <__aeabi_ddiv+0x6e>
   88c10:	085b      	lsrs	r3, r3, #1
   88c12:	ea4f 0232 	mov.w	r2, r2, rrx
   88c16:	1ab6      	subs	r6, r6, r2
   88c18:	eb65 0503 	sbc.w	r5, r5, r3
   88c1c:	085b      	lsrs	r3, r3, #1
   88c1e:	ea4f 0232 	mov.w	r2, r2, rrx
   88c22:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   88c26:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   88c2a:	ebb6 0e02 	subs.w	lr, r6, r2
   88c2e:	eb75 0e03 	sbcs.w	lr, r5, r3
   88c32:	bf22      	ittt	cs
   88c34:	1ab6      	subcs	r6, r6, r2
   88c36:	4675      	movcs	r5, lr
   88c38:	ea40 000c 	orrcs.w	r0, r0, ip
   88c3c:	085b      	lsrs	r3, r3, #1
   88c3e:	ea4f 0232 	mov.w	r2, r2, rrx
   88c42:	ebb6 0e02 	subs.w	lr, r6, r2
   88c46:	eb75 0e03 	sbcs.w	lr, r5, r3
   88c4a:	bf22      	ittt	cs
   88c4c:	1ab6      	subcs	r6, r6, r2
   88c4e:	4675      	movcs	r5, lr
   88c50:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   88c54:	085b      	lsrs	r3, r3, #1
   88c56:	ea4f 0232 	mov.w	r2, r2, rrx
   88c5a:	ebb6 0e02 	subs.w	lr, r6, r2
   88c5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   88c62:	bf22      	ittt	cs
   88c64:	1ab6      	subcs	r6, r6, r2
   88c66:	4675      	movcs	r5, lr
   88c68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   88c6c:	085b      	lsrs	r3, r3, #1
   88c6e:	ea4f 0232 	mov.w	r2, r2, rrx
   88c72:	ebb6 0e02 	subs.w	lr, r6, r2
   88c76:	eb75 0e03 	sbcs.w	lr, r5, r3
   88c7a:	bf22      	ittt	cs
   88c7c:	1ab6      	subcs	r6, r6, r2
   88c7e:	4675      	movcs	r5, lr
   88c80:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   88c84:	ea55 0e06 	orrs.w	lr, r5, r6
   88c88:	d018      	beq.n	88cbc <__aeabi_ddiv+0x114>
   88c8a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   88c8e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   88c92:	ea4f 1606 	mov.w	r6, r6, lsl #4
   88c96:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   88c9a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   88c9e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   88ca2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   88ca6:	d1c0      	bne.n	88c2a <__aeabi_ddiv+0x82>
   88ca8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   88cac:	d10b      	bne.n	88cc6 <__aeabi_ddiv+0x11e>
   88cae:	ea41 0100 	orr.w	r1, r1, r0
   88cb2:	f04f 0000 	mov.w	r0, #0
   88cb6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   88cba:	e7b6      	b.n	88c2a <__aeabi_ddiv+0x82>
   88cbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   88cc0:	bf04      	itt	eq
   88cc2:	4301      	orreq	r1, r0
   88cc4:	2000      	moveq	r0, #0
   88cc6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   88cca:	bf88      	it	hi
   88ccc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   88cd0:	f63f aeaf 	bhi.w	88a32 <__aeabi_dmul+0xde>
   88cd4:	ebb5 0c03 	subs.w	ip, r5, r3
   88cd8:	bf04      	itt	eq
   88cda:	ebb6 0c02 	subseq.w	ip, r6, r2
   88cde:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   88ce2:	f150 0000 	adcs.w	r0, r0, #0
   88ce6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   88cea:	bd70      	pop	{r4, r5, r6, pc}
   88cec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   88cf0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   88cf4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   88cf8:	bfc2      	ittt	gt
   88cfa:	ebd4 050c 	rsbsgt	r5, r4, ip
   88cfe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   88d02:	bd70      	popgt	{r4, r5, r6, pc}
   88d04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   88d08:	f04f 0e00 	mov.w	lr, #0
   88d0c:	3c01      	subs	r4, #1
   88d0e:	e690      	b.n	88a32 <__aeabi_dmul+0xde>
   88d10:	ea45 0e06 	orr.w	lr, r5, r6
   88d14:	e68d      	b.n	88a32 <__aeabi_dmul+0xde>
   88d16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   88d1a:	ea94 0f0c 	teq	r4, ip
   88d1e:	bf08      	it	eq
   88d20:	ea95 0f0c 	teqeq	r5, ip
   88d24:	f43f af3b 	beq.w	88b9e <__aeabi_dmul+0x24a>
   88d28:	ea94 0f0c 	teq	r4, ip
   88d2c:	d10a      	bne.n	88d44 <__aeabi_ddiv+0x19c>
   88d2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   88d32:	f47f af34 	bne.w	88b9e <__aeabi_dmul+0x24a>
   88d36:	ea95 0f0c 	teq	r5, ip
   88d3a:	f47f af25 	bne.w	88b88 <__aeabi_dmul+0x234>
   88d3e:	4610      	mov	r0, r2
   88d40:	4619      	mov	r1, r3
   88d42:	e72c      	b.n	88b9e <__aeabi_dmul+0x24a>
   88d44:	ea95 0f0c 	teq	r5, ip
   88d48:	d106      	bne.n	88d58 <__aeabi_ddiv+0x1b0>
   88d4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   88d4e:	f43f aefd 	beq.w	88b4c <__aeabi_dmul+0x1f8>
   88d52:	4610      	mov	r0, r2
   88d54:	4619      	mov	r1, r3
   88d56:	e722      	b.n	88b9e <__aeabi_dmul+0x24a>
   88d58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   88d5c:	bf18      	it	ne
   88d5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   88d62:	f47f aec5 	bne.w	88af0 <__aeabi_dmul+0x19c>
   88d66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   88d6a:	f47f af0d 	bne.w	88b88 <__aeabi_dmul+0x234>
   88d6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   88d72:	f47f aeeb 	bne.w	88b4c <__aeabi_dmul+0x1f8>
   88d76:	e712      	b.n	88b9e <__aeabi_dmul+0x24a>

00088d78 <__gedf2>:
   88d78:	f04f 3cff 	mov.w	ip, #4294967295
   88d7c:	e006      	b.n	88d8c <__cmpdf2+0x4>
   88d7e:	bf00      	nop

00088d80 <__ledf2>:
   88d80:	f04f 0c01 	mov.w	ip, #1
   88d84:	e002      	b.n	88d8c <__cmpdf2+0x4>
   88d86:	bf00      	nop

00088d88 <__cmpdf2>:
   88d88:	f04f 0c01 	mov.w	ip, #1
   88d8c:	f84d cd04 	str.w	ip, [sp, #-4]!
   88d90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   88d94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88d98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   88d9c:	bf18      	it	ne
   88d9e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   88da2:	d01b      	beq.n	88ddc <__cmpdf2+0x54>
   88da4:	b001      	add	sp, #4
   88da6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   88daa:	bf0c      	ite	eq
   88dac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   88db0:	ea91 0f03 	teqne	r1, r3
   88db4:	bf02      	ittt	eq
   88db6:	ea90 0f02 	teqeq	r0, r2
   88dba:	2000      	moveq	r0, #0
   88dbc:	4770      	bxeq	lr
   88dbe:	f110 0f00 	cmn.w	r0, #0
   88dc2:	ea91 0f03 	teq	r1, r3
   88dc6:	bf58      	it	pl
   88dc8:	4299      	cmppl	r1, r3
   88dca:	bf08      	it	eq
   88dcc:	4290      	cmpeq	r0, r2
   88dce:	bf2c      	ite	cs
   88dd0:	17d8      	asrcs	r0, r3, #31
   88dd2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   88dd6:	f040 0001 	orr.w	r0, r0, #1
   88dda:	4770      	bx	lr
   88ddc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   88de0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88de4:	d102      	bne.n	88dec <__cmpdf2+0x64>
   88de6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   88dea:	d107      	bne.n	88dfc <__cmpdf2+0x74>
   88dec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   88df0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88df4:	d1d6      	bne.n	88da4 <__cmpdf2+0x1c>
   88df6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   88dfa:	d0d3      	beq.n	88da4 <__cmpdf2+0x1c>
   88dfc:	f85d 0b04 	ldr.w	r0, [sp], #4
   88e00:	4770      	bx	lr
   88e02:	bf00      	nop

00088e04 <__aeabi_cdrcmple>:
   88e04:	4684      	mov	ip, r0
   88e06:	4610      	mov	r0, r2
   88e08:	4662      	mov	r2, ip
   88e0a:	468c      	mov	ip, r1
   88e0c:	4619      	mov	r1, r3
   88e0e:	4663      	mov	r3, ip
   88e10:	e000      	b.n	88e14 <__aeabi_cdcmpeq>
   88e12:	bf00      	nop

00088e14 <__aeabi_cdcmpeq>:
   88e14:	b501      	push	{r0, lr}
   88e16:	f7ff ffb7 	bl	88d88 <__cmpdf2>
   88e1a:	2800      	cmp	r0, #0
   88e1c:	bf48      	it	mi
   88e1e:	f110 0f00 	cmnmi.w	r0, #0
   88e22:	bd01      	pop	{r0, pc}

00088e24 <__aeabi_dcmpeq>:
   88e24:	f84d ed08 	str.w	lr, [sp, #-8]!
   88e28:	f7ff fff4 	bl	88e14 <__aeabi_cdcmpeq>
   88e2c:	bf0c      	ite	eq
   88e2e:	2001      	moveq	r0, #1
   88e30:	2000      	movne	r0, #0
   88e32:	f85d fb08 	ldr.w	pc, [sp], #8
   88e36:	bf00      	nop

00088e38 <__aeabi_dcmplt>:
   88e38:	f84d ed08 	str.w	lr, [sp, #-8]!
   88e3c:	f7ff ffea 	bl	88e14 <__aeabi_cdcmpeq>
   88e40:	bf34      	ite	cc
   88e42:	2001      	movcc	r0, #1
   88e44:	2000      	movcs	r0, #0
   88e46:	f85d fb08 	ldr.w	pc, [sp], #8
   88e4a:	bf00      	nop

00088e4c <__aeabi_dcmple>:
   88e4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   88e50:	f7ff ffe0 	bl	88e14 <__aeabi_cdcmpeq>
   88e54:	bf94      	ite	ls
   88e56:	2001      	movls	r0, #1
   88e58:	2000      	movhi	r0, #0
   88e5a:	f85d fb08 	ldr.w	pc, [sp], #8
   88e5e:	bf00      	nop

00088e60 <__aeabi_dcmpge>:
   88e60:	f84d ed08 	str.w	lr, [sp, #-8]!
   88e64:	f7ff ffce 	bl	88e04 <__aeabi_cdrcmple>
   88e68:	bf94      	ite	ls
   88e6a:	2001      	movls	r0, #1
   88e6c:	2000      	movhi	r0, #0
   88e6e:	f85d fb08 	ldr.w	pc, [sp], #8
   88e72:	bf00      	nop

00088e74 <__aeabi_dcmpgt>:
   88e74:	f84d ed08 	str.w	lr, [sp, #-8]!
   88e78:	f7ff ffc4 	bl	88e04 <__aeabi_cdrcmple>
   88e7c:	bf34      	ite	cc
   88e7e:	2001      	movcc	r0, #1
   88e80:	2000      	movcs	r0, #0
   88e82:	f85d fb08 	ldr.w	pc, [sp], #8
   88e86:	bf00      	nop

00088e88 <__register_exitproc>:
   88e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   88e8c:	4698      	mov	r8, r3
   88e8e:	4b23      	ldr	r3, [pc, #140]	; (88f1c <__register_exitproc+0x94>)
   88e90:	4606      	mov	r6, r0
   88e92:	681c      	ldr	r4, [r3, #0]
   88e94:	460f      	mov	r7, r1
   88e96:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   88e9a:	4691      	mov	r9, r2
   88e9c:	b918      	cbnz	r0, 88ea6 <__register_exitproc+0x1e>
   88e9e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   88ea2:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   88ea6:	6841      	ldr	r1, [r0, #4]
   88ea8:	291f      	cmp	r1, #31
   88eaa:	dd16      	ble.n	88eda <__register_exitproc+0x52>
   88eac:	481c      	ldr	r0, [pc, #112]	; (88f20 <__register_exitproc+0x98>)
   88eae:	b918      	cbnz	r0, 88eb8 <__register_exitproc+0x30>
   88eb0:	f04f 30ff 	mov.w	r0, #4294967295
   88eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   88eb8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   88ebc:	f3af 8000 	nop.w
   88ec0:	2800      	cmp	r0, #0
   88ec2:	d0f5      	beq.n	88eb0 <__register_exitproc+0x28>
   88ec4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   88ec8:	2500      	movs	r5, #0
   88eca:	6045      	str	r5, [r0, #4]
   88ecc:	6002      	str	r2, [r0, #0]
   88ece:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   88ed2:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   88ed6:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   88eda:	b1b6      	cbz	r6, 88f0a <__register_exitproc+0x82>
   88edc:	6844      	ldr	r4, [r0, #4]
   88ede:	2201      	movs	r2, #1
   88ee0:	fa02 f204 	lsl.w	r2, r2, r4
   88ee4:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   88ee8:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   88eec:	4311      	orrs	r1, r2
   88eee:	2e02      	cmp	r6, #2
   88ef0:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   88ef4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   88ef8:	461c      	mov	r4, r3
   88efa:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   88efe:	d104      	bne.n	88f0a <__register_exitproc+0x82>
   88f00:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   88f04:	431a      	orrs	r2, r3
   88f06:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   88f0a:	6841      	ldr	r1, [r0, #4]
   88f0c:	1c8b      	adds	r3, r1, #2
   88f0e:	1c4a      	adds	r2, r1, #1
   88f10:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   88f14:	6042      	str	r2, [r0, #4]
   88f16:	2000      	movs	r0, #0
   88f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   88f1c:	0008dc10 	.word	0x0008dc10
   88f20:	00000000 	.word	0x00000000

00088f24 <__libc_fini_array>:
   88f24:	b570      	push	{r4, r5, r6, lr}
   88f26:	4b08      	ldr	r3, [pc, #32]	; (88f48 <__libc_fini_array+0x24>)
   88f28:	4c08      	ldr	r4, [pc, #32]	; (88f4c <__libc_fini_array+0x28>)
   88f2a:	2500      	movs	r5, #0
   88f2c:	1ae0      	subs	r0, r4, r3
   88f2e:	1084      	asrs	r4, r0, #2
   88f30:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   88f34:	3d04      	subs	r5, #4
   88f36:	b11c      	cbz	r4, 88f40 <__libc_fini_array+0x1c>
   88f38:	5972      	ldr	r2, [r6, r5]
   88f3a:	4790      	blx	r2
   88f3c:	3c01      	subs	r4, #1
   88f3e:	e7f9      	b.n	88f34 <__libc_fini_array+0x10>
   88f40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   88f44:	f004 bf5e 	b.w	8de04 <_fini>
   88f48:	0008de10 	.word	0x0008de10
   88f4c:	0008de14 	.word	0x0008de14

00088f50 <__libc_init_array>:
   88f50:	b538      	push	{r3, r4, r5, lr}
   88f52:	4d0e      	ldr	r5, [pc, #56]	; (88f8c <__libc_init_array+0x3c>)
   88f54:	4b0e      	ldr	r3, [pc, #56]	; (88f90 <__libc_init_array+0x40>)
   88f56:	2400      	movs	r4, #0
   88f58:	1ae8      	subs	r0, r5, r3
   88f5a:	1085      	asrs	r5, r0, #2
   88f5c:	42ac      	cmp	r4, r5
   88f5e:	d005      	beq.n	88f6c <__libc_init_array+0x1c>
   88f60:	490b      	ldr	r1, [pc, #44]	; (88f90 <__libc_init_array+0x40>)
   88f62:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   88f66:	4790      	blx	r2
   88f68:	3401      	adds	r4, #1
   88f6a:	e7f7      	b.n	88f5c <__libc_init_array+0xc>
   88f6c:	f004 ff40 	bl	8ddf0 <_init>
   88f70:	4908      	ldr	r1, [pc, #32]	; (88f94 <__libc_init_array+0x44>)
   88f72:	4a09      	ldr	r2, [pc, #36]	; (88f98 <__libc_init_array+0x48>)
   88f74:	1a54      	subs	r4, r2, r1
   88f76:	10a5      	asrs	r5, r4, #2
   88f78:	2400      	movs	r4, #0
   88f7a:	42ac      	cmp	r4, r5
   88f7c:	d005      	beq.n	88f8a <__libc_init_array+0x3a>
   88f7e:	4b05      	ldr	r3, [pc, #20]	; (88f94 <__libc_init_array+0x44>)
   88f80:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   88f84:	4780      	blx	r0
   88f86:	3401      	adds	r4, #1
   88f88:	e7f7      	b.n	88f7a <__libc_init_array+0x2a>
   88f8a:	bd38      	pop	{r3, r4, r5, pc}
   88f8c:	0008ddfc 	.word	0x0008ddfc
   88f90:	0008ddfc 	.word	0x0008ddfc
   88f94:	0008ddfc 	.word	0x0008ddfc
   88f98:	0008de04 	.word	0x0008de04

00088f9c <memcpy>:
   88f9c:	b510      	push	{r4, lr}
   88f9e:	2300      	movs	r3, #0
   88fa0:	4293      	cmp	r3, r2
   88fa2:	d003      	beq.n	88fac <memcpy+0x10>
   88fa4:	5ccc      	ldrb	r4, [r1, r3]
   88fa6:	54c4      	strb	r4, [r0, r3]
   88fa8:	3301      	adds	r3, #1
   88faa:	e7f9      	b.n	88fa0 <memcpy+0x4>
   88fac:	bd10      	pop	{r4, pc}

00088fae <memmove>:
   88fae:	4281      	cmp	r1, r0
   88fb0:	b570      	push	{r4, r5, r6, lr}
   88fb2:	d20e      	bcs.n	88fd2 <memmove+0x24>
   88fb4:	188c      	adds	r4, r1, r2
   88fb6:	42a0      	cmp	r0, r4
   88fb8:	d20b      	bcs.n	88fd2 <memmove+0x24>
   88fba:	1885      	adds	r5, r0, r2
   88fbc:	4613      	mov	r3, r2
   88fbe:	f113 33ff 	adds.w	r3, r3, #4294967295
   88fc2:	d305      	bcc.n	88fd0 <memmove+0x22>
   88fc4:	4251      	negs	r1, r2
   88fc6:	1866      	adds	r6, r4, r1
   88fc8:	5cf6      	ldrb	r6, [r6, r3]
   88fca:	1869      	adds	r1, r5, r1
   88fcc:	54ce      	strb	r6, [r1, r3]
   88fce:	e7f6      	b.n	88fbe <memmove+0x10>
   88fd0:	bd70      	pop	{r4, r5, r6, pc}
   88fd2:	2300      	movs	r3, #0
   88fd4:	4293      	cmp	r3, r2
   88fd6:	d003      	beq.n	88fe0 <memmove+0x32>
   88fd8:	5ccc      	ldrb	r4, [r1, r3]
   88fda:	54c4      	strb	r4, [r0, r3]
   88fdc:	3301      	adds	r3, #1
   88fde:	e7f9      	b.n	88fd4 <memmove+0x26>
   88fe0:	bd70      	pop	{r4, r5, r6, pc}

00088fe2 <memset>:
   88fe2:	1882      	adds	r2, r0, r2
   88fe4:	4603      	mov	r3, r0
   88fe6:	4293      	cmp	r3, r2
   88fe8:	d002      	beq.n	88ff0 <memset+0xe>
   88fea:	f803 1b01 	strb.w	r1, [r3], #1
   88fee:	e7fa      	b.n	88fe6 <memset+0x4>
   88ff0:	4770      	bx	lr
	...

00088ff4 <_snprintf_r>:
   88ff4:	b408      	push	{r3}
   88ff6:	b530      	push	{r4, r5, lr}
   88ff8:	1e14      	subs	r4, r2, #0
   88ffa:	b09c      	sub	sp, #112	; 0x70
   88ffc:	4605      	mov	r5, r0
   88ffe:	da04      	bge.n	8900a <_snprintf_r+0x16>
   89000:	208b      	movs	r0, #139	; 0x8b
   89002:	6028      	str	r0, [r5, #0]
   89004:	f04f 30ff 	mov.w	r0, #4294967295
   89008:	e01e      	b.n	89048 <_snprintf_r+0x54>
   8900a:	f44f 7302 	mov.w	r3, #520	; 0x208
   8900e:	f8ad 3014 	strh.w	r3, [sp, #20]
   89012:	9102      	str	r1, [sp, #8]
   89014:	9106      	str	r1, [sp, #24]
   89016:	d001      	beq.n	8901c <_snprintf_r+0x28>
   89018:	1e60      	subs	r0, r4, #1
   8901a:	e000      	b.n	8901e <_snprintf_r+0x2a>
   8901c:	4620      	mov	r0, r4
   8901e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   89022:	ab20      	add	r3, sp, #128	; 0x80
   89024:	9004      	str	r0, [sp, #16]
   89026:	9007      	str	r0, [sp, #28]
   89028:	f8ad 1016 	strh.w	r1, [sp, #22]
   8902c:	4628      	mov	r0, r5
   8902e:	a902      	add	r1, sp, #8
   89030:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   89032:	9301      	str	r3, [sp, #4]
   89034:	f000 ff00 	bl	89e38 <_svfprintf_r>
   89038:	1c43      	adds	r3, r0, #1
   8903a:	da01      	bge.n	89040 <_snprintf_r+0x4c>
   8903c:	228b      	movs	r2, #139	; 0x8b
   8903e:	602a      	str	r2, [r5, #0]
   89040:	b114      	cbz	r4, 89048 <_snprintf_r+0x54>
   89042:	9b02      	ldr	r3, [sp, #8]
   89044:	2100      	movs	r1, #0
   89046:	7019      	strb	r1, [r3, #0]
   89048:	b01c      	add	sp, #112	; 0x70
   8904a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8904e:	b001      	add	sp, #4
   89050:	4770      	bx	lr

00089052 <snprintf>:
   89052:	b40c      	push	{r2, r3}
   89054:	b530      	push	{r4, r5, lr}
   89056:	4b17      	ldr	r3, [pc, #92]	; (890b4 <snprintf+0x62>)
   89058:	1e0c      	subs	r4, r1, #0
   8905a:	b09d      	sub	sp, #116	; 0x74
   8905c:	681d      	ldr	r5, [r3, #0]
   8905e:	da04      	bge.n	8906a <snprintf+0x18>
   89060:	208b      	movs	r0, #139	; 0x8b
   89062:	6028      	str	r0, [r5, #0]
   89064:	f04f 30ff 	mov.w	r0, #4294967295
   89068:	e01e      	b.n	890a8 <snprintf+0x56>
   8906a:	f44f 7102 	mov.w	r1, #520	; 0x208
   8906e:	f8ad 1014 	strh.w	r1, [sp, #20]
   89072:	9002      	str	r0, [sp, #8]
   89074:	9006      	str	r0, [sp, #24]
   89076:	d001      	beq.n	8907c <snprintf+0x2a>
   89078:	1e60      	subs	r0, r4, #1
   8907a:	e000      	b.n	8907e <snprintf+0x2c>
   8907c:	4620      	mov	r0, r4
   8907e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   89082:	9004      	str	r0, [sp, #16]
   89084:	9007      	str	r0, [sp, #28]
   89086:	f8ad 2016 	strh.w	r2, [sp, #22]
   8908a:	ab21      	add	r3, sp, #132	; 0x84
   8908c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   8908e:	4628      	mov	r0, r5
   89090:	a902      	add	r1, sp, #8
   89092:	9301      	str	r3, [sp, #4]
   89094:	f000 fed0 	bl	89e38 <_svfprintf_r>
   89098:	1c42      	adds	r2, r0, #1
   8909a:	da01      	bge.n	890a0 <snprintf+0x4e>
   8909c:	238b      	movs	r3, #139	; 0x8b
   8909e:	602b      	str	r3, [r5, #0]
   890a0:	b114      	cbz	r4, 890a8 <snprintf+0x56>
   890a2:	9a02      	ldr	r2, [sp, #8]
   890a4:	2100      	movs	r1, #0
   890a6:	7011      	strb	r1, [r2, #0]
   890a8:	b01d      	add	sp, #116	; 0x74
   890aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   890ae:	b002      	add	sp, #8
   890b0:	4770      	bx	lr
   890b2:	bf00      	nop
   890b4:	200702a0 	.word	0x200702a0

000890b8 <strlen>:
   890b8:	4603      	mov	r3, r0
   890ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   890be:	2a00      	cmp	r2, #0
   890c0:	d1fb      	bne.n	890ba <strlen+0x2>
   890c2:	1a18      	subs	r0, r3, r0
   890c4:	3801      	subs	r0, #1
   890c6:	4770      	bx	lr

000890c8 <strncasecmp>:
   890c8:	4b0f      	ldr	r3, [pc, #60]	; (89108 <strncasecmp+0x40>)
   890ca:	b5f0      	push	{r4, r5, r6, r7, lr}
   890cc:	681e      	ldr	r6, [r3, #0]
   890ce:	2300      	movs	r3, #0
   890d0:	4293      	cmp	r3, r2
   890d2:	d015      	beq.n	89100 <strncasecmp+0x38>
   890d4:	5cc5      	ldrb	r5, [r0, r3]
   890d6:	1974      	adds	r4, r6, r5
   890d8:	7867      	ldrb	r7, [r4, #1]
   890da:	f007 0403 	and.w	r4, r7, #3
   890de:	2c01      	cmp	r4, #1
   890e0:	5ccc      	ldrb	r4, [r1, r3]
   890e2:	bf08      	it	eq
   890e4:	3520      	addeq	r5, #32
   890e6:	1937      	adds	r7, r6, r4
   890e8:	787f      	ldrb	r7, [r7, #1]
   890ea:	f007 0703 	and.w	r7, r7, #3
   890ee:	2f01      	cmp	r7, #1
   890f0:	bf08      	it	eq
   890f2:	3420      	addeq	r4, #32
   890f4:	1b2d      	subs	r5, r5, r4
   890f6:	d104      	bne.n	89102 <strncasecmp+0x3a>
   890f8:	3301      	adds	r3, #1
   890fa:	2c00      	cmp	r4, #0
   890fc:	d1e8      	bne.n	890d0 <strncasecmp+0x8>
   890fe:	e000      	b.n	89102 <strncasecmp+0x3a>
   89100:	2500      	movs	r5, #0
   89102:	4628      	mov	r0, r5
   89104:	bdf0      	pop	{r4, r5, r6, r7, pc}
   89106:	bf00      	nop
   89108:	20070298 	.word	0x20070298

0008910c <strncat>:
   8910c:	b530      	push	{r4, r5, lr}
   8910e:	4604      	mov	r4, r0
   89110:	4623      	mov	r3, r4
   89112:	781d      	ldrb	r5, [r3, #0]
   89114:	3401      	adds	r4, #1
   89116:	2d00      	cmp	r5, #0
   89118:	d1fa      	bne.n	89110 <strncat+0x4>
   8911a:	3901      	subs	r1, #1
   8911c:	3b01      	subs	r3, #1
   8911e:	1e54      	subs	r4, r2, #1
   89120:	b142      	cbz	r2, 89134 <strncat+0x28>
   89122:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   89126:	f803 2f01 	strb.w	r2, [r3, #1]!
   8912a:	b11a      	cbz	r2, 89134 <strncat+0x28>
   8912c:	b904      	cbnz	r4, 89130 <strncat+0x24>
   8912e:	705c      	strb	r4, [r3, #1]
   89130:	4622      	mov	r2, r4
   89132:	e7f4      	b.n	8911e <strncat+0x12>
   89134:	bd30      	pop	{r4, r5, pc}

00089136 <strncpy>:
   89136:	b530      	push	{r4, r5, lr}
   89138:	3901      	subs	r1, #1
   8913a:	4603      	mov	r3, r0
   8913c:	461c      	mov	r4, r3
   8913e:	b13a      	cbz	r2, 89150 <strncpy+0x1a>
   89140:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   89144:	3a01      	subs	r2, #1
   89146:	f803 5b01 	strb.w	r5, [r3], #1
   8914a:	461c      	mov	r4, r3
   8914c:	2d00      	cmp	r5, #0
   8914e:	d1f5      	bne.n	8913c <strncpy+0x6>
   89150:	1899      	adds	r1, r3, r2
   89152:	428c      	cmp	r4, r1
   89154:	d003      	beq.n	8915e <strncpy+0x28>
   89156:	2200      	movs	r2, #0
   89158:	f804 2b01 	strb.w	r2, [r4], #1
   8915c:	e7f9      	b.n	89152 <strncpy+0x1c>
   8915e:	bd30      	pop	{r4, r5, pc}

00089160 <strnlen>:
   89160:	b510      	push	{r4, lr}
   89162:	4603      	mov	r3, r0
   89164:	1841      	adds	r1, r0, r1
   89166:	428b      	cmp	r3, r1
   89168:	461a      	mov	r2, r3
   8916a:	d101      	bne.n	89170 <strnlen+0x10>
   8916c:	1a10      	subs	r0, r2, r0
   8916e:	bd10      	pop	{r4, pc}
   89170:	7814      	ldrb	r4, [r2, #0]
   89172:	3301      	adds	r3, #1
   89174:	2c00      	cmp	r4, #0
   89176:	d1f6      	bne.n	89166 <strnlen+0x6>
   89178:	e7f8      	b.n	8916c <strnlen+0xc>
   8917a:	0000      	movs	r0, r0
   8917c:	0000      	movs	r0, r0
	...

00089180 <match>:
   89180:	b530      	push	{r4, r5, lr}
   89182:	6805      	ldr	r5, [r0, #0]
   89184:	f811 2b01 	ldrb.w	r2, [r1], #1
   89188:	462c      	mov	r4, r5
   8918a:	1c6b      	adds	r3, r5, #1
   8918c:	b152      	cbz	r2, 891a4 <match+0x24>
   8918e:	461d      	mov	r5, r3
   89190:	7863      	ldrb	r3, [r4, #1]
   89192:	2b40      	cmp	r3, #64	; 0x40
   89194:	dd02      	ble.n	8919c <match+0x1c>
   89196:	2b5a      	cmp	r3, #90	; 0x5a
   89198:	bfd8      	it	le
   8919a:	3320      	addle	r3, #32
   8919c:	4293      	cmp	r3, r2
   8919e:	d0f1      	beq.n	89184 <match+0x4>
   891a0:	2000      	movs	r0, #0
   891a2:	bd30      	pop	{r4, r5, pc}
   891a4:	6003      	str	r3, [r0, #0]
   891a6:	2001      	movs	r0, #1
   891a8:	bd30      	pop	{r4, r5, pc}

000891aa <_strtod_r>:
   891aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   891ae:	b099      	sub	sp, #100	; 0x64
   891b0:	4681      	mov	r9, r0
   891b2:	4688      	mov	r8, r1
   891b4:	9211      	str	r2, [sp, #68]	; 0x44
   891b6:	f04f 0a00 	mov.w	sl, #0
   891ba:	f04f 0b00 	mov.w	fp, #0
   891be:	9113      	str	r1, [sp, #76]	; 0x4c
   891c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   891c2:	7813      	ldrb	r3, [r2, #0]
   891c4:	2b0d      	cmp	r3, #13
   891c6:	d805      	bhi.n	891d4 <_strtod_r+0x2a>
   891c8:	2b09      	cmp	r3, #9
   891ca:	d213      	bcs.n	891f4 <_strtod_r+0x4a>
   891cc:	2b00      	cmp	r3, #0
   891ce:	f000 81b6 	beq.w	8953e <_strtod_r+0x394>
   891d2:	e012      	b.n	891fa <_strtod_r+0x50>
   891d4:	2b2b      	cmp	r3, #43	; 0x2b
   891d6:	d006      	beq.n	891e6 <_strtod_r+0x3c>
   891d8:	2b2d      	cmp	r3, #45	; 0x2d
   891da:	d002      	beq.n	891e2 <_strtod_r+0x38>
   891dc:	2b20      	cmp	r3, #32
   891de:	d10c      	bne.n	891fa <_strtod_r+0x50>
   891e0:	e008      	b.n	891f4 <_strtod_r+0x4a>
   891e2:	2301      	movs	r3, #1
   891e4:	e000      	b.n	891e8 <_strtod_r+0x3e>
   891e6:	2300      	movs	r3, #0
   891e8:	1c54      	adds	r4, r2, #1
   891ea:	9413      	str	r4, [sp, #76]	; 0x4c
   891ec:	7852      	ldrb	r2, [r2, #1]
   891ee:	930d      	str	r3, [sp, #52]	; 0x34
   891f0:	b92a      	cbnz	r2, 891fe <_strtod_r+0x54>
   891f2:	e1a4      	b.n	8953e <_strtod_r+0x394>
   891f4:	1c51      	adds	r1, r2, #1
   891f6:	9113      	str	r1, [sp, #76]	; 0x4c
   891f8:	e7e2      	b.n	891c0 <_strtod_r+0x16>
   891fa:	2400      	movs	r4, #0
   891fc:	940d      	str	r4, [sp, #52]	; 0x34
   891fe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   89200:	7821      	ldrb	r1, [r4, #0]
   89202:	2930      	cmp	r1, #48	; 0x30
   89204:	d15c      	bne.n	892c0 <_strtod_r+0x116>
   89206:	7863      	ldrb	r3, [r4, #1]
   89208:	2b58      	cmp	r3, #88	; 0x58
   8920a:	d001      	beq.n	89210 <_strtod_r+0x66>
   8920c:	2b78      	cmp	r3, #120	; 0x78
   8920e:	d14b      	bne.n	892a8 <_strtod_r+0xfe>
   89210:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   89212:	4fa3      	ldr	r7, [pc, #652]	; (894a0 <_strtod_r+0x2f6>)
   89214:	ae14      	add	r6, sp, #80	; 0x50
   89216:	9600      	str	r6, [sp, #0]
   89218:	9201      	str	r2, [sp, #4]
   8921a:	4648      	mov	r0, r9
   8921c:	a913      	add	r1, sp, #76	; 0x4c
   8921e:	463a      	mov	r2, r7
   89220:	ab15      	add	r3, sp, #84	; 0x54
   89222:	f001 fb75 	bl	8a910 <__gethex>
   89226:	f010 0607 	ands.w	r6, r0, #7
   8922a:	4605      	mov	r5, r0
   8922c:	f000 852a 	beq.w	89c84 <_strtod_r+0xada>
   89230:	2e06      	cmp	r6, #6
   89232:	d103      	bne.n	8923c <_strtod_r+0x92>
   89234:	1c62      	adds	r2, r4, #1
   89236:	9213      	str	r2, [sp, #76]	; 0x4c
   89238:	f000 bd24 	b.w	89c84 <_strtod_r+0xada>
   8923c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   8923e:	b13a      	cbz	r2, 89250 <_strtod_r+0xa6>
   89240:	a816      	add	r0, sp, #88	; 0x58
   89242:	6839      	ldr	r1, [r7, #0]
   89244:	f002 fc4a 	bl	8badc <__copybits>
   89248:	4648      	mov	r0, r9
   8924a:	9914      	ldr	r1, [sp, #80]	; 0x50
   8924c:	f002 f8bc 	bl	8b3c8 <_Bfree>
   89250:	9815      	ldr	r0, [sp, #84]	; 0x54
   89252:	2e06      	cmp	r6, #6
   89254:	d821      	bhi.n	8929a <_strtod_r+0xf0>
   89256:	e8df f006 	tbb	[pc, r6]
   8925a:	0d04      	.short	0x0d04
   8925c:	0d1c1708 	.word	0x0d1c1708
   89260:	04          	.byte	0x04
   89261:	00          	.byte	0x00
   89262:	f04f 0b00 	mov.w	fp, #0
   89266:	46da      	mov	sl, fp
   89268:	e017      	b.n	8929a <_strtod_r+0xf0>
   8926a:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8926e:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
   89272:	e012      	b.n	8929a <_strtod_r+0xf0>
   89274:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   89276:	f200 4133 	addw	r1, r0, #1075	; 0x433
   8927a:	f423 1480 	bic.w	r4, r3, #1048576	; 0x100000
   8927e:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   89282:	ea44 5b01 	orr.w	fp, r4, r1, lsl #20
   89286:	e008      	b.n	8929a <_strtod_r+0xf0>
   89288:	f8df b218 	ldr.w	fp, [pc, #536]	; 894a4 <_strtod_r+0x2fa>
   8928c:	f04f 0a00 	mov.w	sl, #0
   89290:	e003      	b.n	8929a <_strtod_r+0xf0>
   89292:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   89296:	f04f 3aff 	mov.w	sl, #4294967295
   8929a:	0729      	lsls	r1, r5, #28
   8929c:	f140 84f2 	bpl.w	89c84 <_strtod_r+0xada>
   892a0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   892a4:	f000 bcee 	b.w	89c84 <_strtod_r+0xada>
   892a8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   892aa:	1c62      	adds	r2, r4, #1
   892ac:	9213      	str	r2, [sp, #76]	; 0x4c
   892ae:	7861      	ldrb	r1, [r4, #1]
   892b0:	2930      	cmp	r1, #48	; 0x30
   892b2:	d0f9      	beq.n	892a8 <_strtod_r+0xfe>
   892b4:	2900      	cmp	r1, #0
   892b6:	f000 84e5 	beq.w	89c84 <_strtod_r+0xada>
   892ba:	2601      	movs	r6, #1
   892bc:	9606      	str	r6, [sp, #24]
   892be:	e001      	b.n	892c4 <_strtod_r+0x11a>
   892c0:	2500      	movs	r5, #0
   892c2:	9506      	str	r5, [sp, #24]
   892c4:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   892c6:	9707      	str	r7, [sp, #28]
   892c8:	2700      	movs	r7, #0
   892ca:	9704      	str	r7, [sp, #16]
   892cc:	463e      	mov	r6, r7
   892ce:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   892d0:	782c      	ldrb	r4, [r5, #0]
   892d2:	2c2f      	cmp	r4, #47	; 0x2f
   892d4:	dc16      	bgt.n	89304 <_strtod_r+0x15a>
   892d6:	4648      	mov	r0, r9
   892d8:	f001 fe2c 	bl	8af34 <_localeconv_r>
   892dc:	6803      	ldr	r3, [r0, #0]
   892de:	4648      	mov	r0, r9
   892e0:	9303      	str	r3, [sp, #12]
   892e2:	f001 fe27 	bl	8af34 <_localeconv_r>
   892e6:	6800      	ldr	r0, [r0, #0]
   892e8:	f7ff fee6 	bl	890b8 <strlen>
   892ec:	9903      	ldr	r1, [sp, #12]
   892ee:	4602      	mov	r2, r0
   892f0:	4628      	mov	r0, r5
   892f2:	f002 fdf2 	bl	8beda <strncmp>
   892f6:	4602      	mov	r2, r0
   892f8:	b1c8      	cbz	r0, 8932e <_strtod_r+0x184>
   892fa:	2300      	movs	r3, #0
   892fc:	4635      	mov	r5, r6
   892fe:	461a      	mov	r2, r3
   89300:	9305      	str	r3, [sp, #20]
   89302:	e077      	b.n	893f4 <_strtod_r+0x24a>
   89304:	2c39      	cmp	r4, #57	; 0x39
   89306:	dce6      	bgt.n	892d6 <_strtod_r+0x12c>
   89308:	2e0f      	cmp	r6, #15
   8930a:	dc0c      	bgt.n	89326 <_strtod_r+0x17c>
   8930c:	2e08      	cmp	r6, #8
   8930e:	bfd8      	it	le
   89310:	9804      	ldrle	r0, [sp, #16]
   89312:	f04f 030a 	mov.w	r3, #10
   89316:	f1a4 0430 	sub.w	r4, r4, #48	; 0x30
   8931a:	bfd6      	itet	le
   8931c:	fb03 4000 	mlale	r0, r3, r0, r4
   89320:	fb03 4707 	mlagt	r7, r3, r7, r4
   89324:	9004      	strle	r0, [sp, #16]
   89326:	1c6c      	adds	r4, r5, #1
   89328:	3601      	adds	r6, #1
   8932a:	9413      	str	r4, [sp, #76]	; 0x4c
   8932c:	e7cf      	b.n	892ce <_strtod_r+0x124>
   8932e:	4648      	mov	r0, r9
   89330:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   89332:	9203      	str	r2, [sp, #12]
   89334:	f001 fdfe 	bl	8af34 <_localeconv_r>
   89338:	6800      	ldr	r0, [r0, #0]
   8933a:	f7ff febd 	bl	890b8 <strlen>
   8933e:	1821      	adds	r1, r4, r0
   89340:	9113      	str	r1, [sp, #76]	; 0x4c
   89342:	5c24      	ldrb	r4, [r4, r0]
   89344:	9a03      	ldr	r2, [sp, #12]
   89346:	b116      	cbz	r6, 8934e <_strtod_r+0x1a4>
   89348:	4635      	mov	r5, r6
   8934a:	4613      	mov	r3, r2
   8934c:	e047      	b.n	893de <_strtod_r+0x234>
   8934e:	4633      	mov	r3, r6
   89350:	2c30      	cmp	r4, #48	; 0x30
   89352:	d105      	bne.n	89360 <_strtod_r+0x1b6>
   89354:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   89356:	3301      	adds	r3, #1
   89358:	1c69      	adds	r1, r5, #1
   8935a:	9113      	str	r1, [sp, #76]	; 0x4c
   8935c:	786c      	ldrb	r4, [r5, #1]
   8935e:	e7f7      	b.n	89350 <_strtod_r+0x1a6>
   89360:	f1a4 0031 	sub.w	r0, r4, #49	; 0x31
   89364:	2808      	cmp	r0, #8
   89366:	d841      	bhi.n	893ec <_strtod_r+0x242>
   89368:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   8936a:	461a      	mov	r2, r3
   8936c:	2300      	movs	r3, #0
   8936e:	9507      	str	r5, [sp, #28]
   89370:	461d      	mov	r5, r3
   89372:	1c59      	adds	r1, r3, #1
   89374:	3c30      	subs	r4, #48	; 0x30
   89376:	9405      	str	r4, [sp, #20]
   89378:	d02c      	beq.n	893d4 <_strtod_r+0x22a>
   8937a:	1852      	adds	r2, r2, r1
   8937c:	1c68      	adds	r0, r5, #1
   8937e:	ebc5 0c00 	rsb	ip, r5, r0
   89382:	458c      	cmp	ip, r1
   89384:	da11      	bge.n	893aa <_strtod_r+0x200>
   89386:	f100 3cff 	add.w	ip, r0, #4294967295
   8938a:	f1bc 0f10 	cmp.w	ip, #16
   8938e:	dc0a      	bgt.n	893a6 <_strtod_r+0x1fc>
   89390:	2809      	cmp	r0, #9
   89392:	bfd8      	it	le
   89394:	9c04      	ldrle	r4, [sp, #16]
   89396:	f04f 0e0a 	mov.w	lr, #10
   8939a:	bfd6      	itet	le
   8939c:	fb0e f404 	mulle.w	r4, lr, r4
   893a0:	fb0e f707 	mulgt.w	r7, lr, r7
   893a4:	9404      	strle	r4, [sp, #16]
   893a6:	3001      	adds	r0, #1
   893a8:	e7e9      	b.n	8937e <_strtod_r+0x1d4>
   893aa:	2b00      	cmp	r3, #0
   893ac:	bfac      	ite	ge
   893ae:	18eb      	addge	r3, r5, r3
   893b0:	1c2b      	addlt	r3, r5, #0
   893b2:	1c5d      	adds	r5, r3, #1
   893b4:	2b10      	cmp	r3, #16
   893b6:	dc0c      	bgt.n	893d2 <_strtod_r+0x228>
   893b8:	2d09      	cmp	r5, #9
   893ba:	f04f 030a 	mov.w	r3, #10
   893be:	dc05      	bgt.n	893cc <_strtod_r+0x222>
   893c0:	9904      	ldr	r1, [sp, #16]
   893c2:	9805      	ldr	r0, [sp, #20]
   893c4:	fb03 0301 	mla	r3, r3, r1, r0
   893c8:	9304      	str	r3, [sp, #16]
   893ca:	e002      	b.n	893d2 <_strtod_r+0x228>
   893cc:	9c05      	ldr	r4, [sp, #20]
   893ce:	fb03 4707 	mla	r7, r3, r7, r4
   893d2:	2100      	movs	r1, #0
   893d4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   893d6:	460b      	mov	r3, r1
   893d8:	1c60      	adds	r0, r4, #1
   893da:	9013      	str	r0, [sp, #76]	; 0x4c
   893dc:	7864      	ldrb	r4, [r4, #1]
   893de:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
   893e2:	2909      	cmp	r1, #9
   893e4:	d9c5      	bls.n	89372 <_strtod_r+0x1c8>
   893e6:	2001      	movs	r0, #1
   893e8:	9005      	str	r0, [sp, #20]
   893ea:	e003      	b.n	893f4 <_strtod_r+0x24a>
   893ec:	2500      	movs	r5, #0
   893ee:	2101      	movs	r1, #1
   893f0:	462a      	mov	r2, r5
   893f2:	9105      	str	r1, [sp, #20]
   893f4:	2c65      	cmp	r4, #101	; 0x65
   893f6:	d001      	beq.n	893fc <_strtod_r+0x252>
   893f8:	2c45      	cmp	r4, #69	; 0x45
   893fa:	d157      	bne.n	894ac <_strtod_r+0x302>
   893fc:	b925      	cbnz	r5, 89408 <_strtod_r+0x25e>
   893fe:	b91b      	cbnz	r3, 89408 <_strtod_r+0x25e>
   89400:	9c06      	ldr	r4, [sp, #24]
   89402:	2c00      	cmp	r4, #0
   89404:	f000 809b 	beq.w	8953e <_strtod_r+0x394>
   89408:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   8940c:	f108 0101 	add.w	r1, r8, #1
   89410:	9113      	str	r1, [sp, #76]	; 0x4c
   89412:	f898 4001 	ldrb.w	r4, [r8, #1]
   89416:	2c2b      	cmp	r4, #43	; 0x2b
   89418:	d004      	beq.n	89424 <_strtod_r+0x27a>
   8941a:	2c2d      	cmp	r4, #45	; 0x2d
   8941c:	d005      	beq.n	8942a <_strtod_r+0x280>
   8941e:	2000      	movs	r0, #0
   89420:	9008      	str	r0, [sp, #32]
   89422:	e009      	b.n	89438 <_strtod_r+0x28e>
   89424:	2100      	movs	r1, #0
   89426:	9108      	str	r1, [sp, #32]
   89428:	e001      	b.n	8942e <_strtod_r+0x284>
   8942a:	2401      	movs	r4, #1
   8942c:	9408      	str	r4, [sp, #32]
   8942e:	f108 0002 	add.w	r0, r8, #2
   89432:	9013      	str	r0, [sp, #76]	; 0x4c
   89434:	f898 4002 	ldrb.w	r4, [r8, #2]
   89438:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
   8943c:	2909      	cmp	r1, #9
   8943e:	d833      	bhi.n	894a8 <_strtod_r+0x2fe>
   89440:	2c30      	cmp	r4, #48	; 0x30
   89442:	d104      	bne.n	8944e <_strtod_r+0x2a4>
   89444:	9913      	ldr	r1, [sp, #76]	; 0x4c
   89446:	1c4c      	adds	r4, r1, #1
   89448:	9413      	str	r4, [sp, #76]	; 0x4c
   8944a:	784c      	ldrb	r4, [r1, #1]
   8944c:	e7f8      	b.n	89440 <_strtod_r+0x296>
   8944e:	f1a4 0031 	sub.w	r0, r4, #49	; 0x31
   89452:	2808      	cmp	r0, #8
   89454:	d82a      	bhi.n	894ac <_strtod_r+0x302>
   89456:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
   8945a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   8945c:	940a      	str	r4, [sp, #40]	; 0x28
   8945e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   89460:	f101 0c01 	add.w	ip, r1, #1
   89464:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
   89468:	784c      	ldrb	r4, [r1, #1]
   8946a:	2c2f      	cmp	r4, #47	; 0x2f
   8946c:	dc0b      	bgt.n	89486 <_strtod_r+0x2dc>
   8946e:	990a      	ldr	r1, [sp, #40]	; 0x28
   89470:	ebc1 0e0c 	rsb	lr, r1, ip
   89474:	f1be 0f08 	cmp.w	lr, #8
   89478:	f644 6e1f 	movw	lr, #19999	; 0x4e1f
   8947c:	dc0b      	bgt.n	89496 <_strtod_r+0x2ec>
   8947e:	4570      	cmp	r0, lr
   89480:	bfb8      	it	lt
   89482:	4686      	movlt	lr, r0
   89484:	e007      	b.n	89496 <_strtod_r+0x2ec>
   89486:	2c39      	cmp	r4, #57	; 0x39
   89488:	dcf1      	bgt.n	8946e <_strtod_r+0x2c4>
   8948a:	f04f 0e0a 	mov.w	lr, #10
   8948e:	fb0e 4000 	mla	r0, lr, r0, r4
   89492:	3830      	subs	r0, #48	; 0x30
   89494:	e7e3      	b.n	8945e <_strtod_r+0x2b4>
   89496:	9808      	ldr	r0, [sp, #32]
   89498:	b150      	cbz	r0, 894b0 <_strtod_r+0x306>
   8949a:	f1ce 0e00 	rsb	lr, lr, #0
   8949e:	e007      	b.n	894b0 <_strtod_r+0x306>
   894a0:	200706d0 	.word	0x200706d0
   894a4:	7ff00000 	.word	0x7ff00000
   894a8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   894ac:	f04f 0e00 	mov.w	lr, #0
   894b0:	2d00      	cmp	r5, #0
   894b2:	d149      	bne.n	89548 <_strtod_r+0x39e>
   894b4:	2b00      	cmp	r3, #0
   894b6:	f040 83e5 	bne.w	89c84 <_strtod_r+0xada>
   894ba:	9906      	ldr	r1, [sp, #24]
   894bc:	2900      	cmp	r1, #0
   894be:	f040 83e1 	bne.w	89c84 <_strtod_r+0xada>
   894c2:	9a05      	ldr	r2, [sp, #20]
   894c4:	2a00      	cmp	r2, #0
   894c6:	d13a      	bne.n	8953e <_strtod_r+0x394>
   894c8:	2c4e      	cmp	r4, #78	; 0x4e
   894ca:	d01b      	beq.n	89504 <_strtod_r+0x35a>
   894cc:	dc02      	bgt.n	894d4 <_strtod_r+0x32a>
   894ce:	2c49      	cmp	r4, #73	; 0x49
   894d0:	d135      	bne.n	8953e <_strtod_r+0x394>
   894d2:	e004      	b.n	894de <_strtod_r+0x334>
   894d4:	2c69      	cmp	r4, #105	; 0x69
   894d6:	d002      	beq.n	894de <_strtod_r+0x334>
   894d8:	2c6e      	cmp	r4, #110	; 0x6e
   894da:	d130      	bne.n	8953e <_strtod_r+0x394>
   894dc:	e012      	b.n	89504 <_strtod_r+0x35a>
   894de:	a813      	add	r0, sp, #76	; 0x4c
   894e0:	49a3      	ldr	r1, [pc, #652]	; (89770 <_strtod_r+0x5c6>)
   894e2:	f7ff fe4d 	bl	89180 <match>
   894e6:	b350      	cbz	r0, 8953e <_strtod_r+0x394>
   894e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   894ea:	49a2      	ldr	r1, [pc, #648]	; (89774 <_strtod_r+0x5ca>)
   894ec:	1e58      	subs	r0, r3, #1
   894ee:	9013      	str	r0, [sp, #76]	; 0x4c
   894f0:	a813      	add	r0, sp, #76	; 0x4c
   894f2:	f7ff fe45 	bl	89180 <match>
   894f6:	b910      	cbnz	r0, 894fe <_strtod_r+0x354>
   894f8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   894fa:	1c61      	adds	r1, r4, #1
   894fc:	9113      	str	r1, [sp, #76]	; 0x4c
   894fe:	f8df b288 	ldr.w	fp, [pc, #648]	; 89788 <_strtod_r+0x5de>
   89502:	e019      	b.n	89538 <_strtod_r+0x38e>
   89504:	a813      	add	r0, sp, #76	; 0x4c
   89506:	499c      	ldr	r1, [pc, #624]	; (89778 <_strtod_r+0x5ce>)
   89508:	f7ff fe3a 	bl	89180 <match>
   8950c:	b1b8      	cbz	r0, 8953e <_strtod_r+0x394>
   8950e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   89510:	7813      	ldrb	r3, [r2, #0]
   89512:	2b28      	cmp	r3, #40	; 0x28
   89514:	d10e      	bne.n	89534 <_strtod_r+0x38a>
   89516:	a813      	add	r0, sp, #76	; 0x4c
   89518:	4998      	ldr	r1, [pc, #608]	; (8977c <_strtod_r+0x5d2>)
   8951a:	aa16      	add	r2, sp, #88	; 0x58
   8951c:	f001 fc46 	bl	8adac <__hexnan>
   89520:	2805      	cmp	r0, #5
   89522:	d107      	bne.n	89534 <_strtod_r+0x38a>
   89524:	9817      	ldr	r0, [sp, #92]	; 0x5c
   89526:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8952a:	f040 44ff 	orr.w	r4, r0, #2139095040	; 0x7f800000
   8952e:	f444 0be0 	orr.w	fp, r4, #7340032	; 0x700000
   89532:	e3a7      	b.n	89c84 <_strtod_r+0xada>
   89534:	f8df b25c 	ldr.w	fp, [pc, #604]	; 89794 <_strtod_r+0x5ea>
   89538:	f04f 0a00 	mov.w	sl, #0
   8953c:	e3a2      	b.n	89c84 <_strtod_r+0xada>
   8953e:	2200      	movs	r2, #0
   89540:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   89544:	920d      	str	r2, [sp, #52]	; 0x34
   89546:	e39d      	b.n	89c84 <_strtod_r+0xada>
   89548:	ebc2 020e 	rsb	r2, r2, lr
   8954c:	9804      	ldr	r0, [sp, #16]
   8954e:	9206      	str	r2, [sp, #24]
   89550:	f003 fac4 	bl	8cadc <__aeabi_ui2d>
   89554:	2d10      	cmp	r5, #16
   89556:	bfb4      	ite	lt
   89558:	462c      	movlt	r4, r5
   8955a:	2410      	movge	r4, #16
   8955c:	2e00      	cmp	r6, #0
   8955e:	bf08      	it	eq
   89560:	462e      	moveq	r6, r5
   89562:	2c09      	cmp	r4, #9
   89564:	4682      	mov	sl, r0
   89566:	468b      	mov	fp, r1
   89568:	dd15      	ble.n	89596 <_strtod_r+0x3ec>
   8956a:	4b85      	ldr	r3, [pc, #532]	; (89780 <_strtod_r+0x5d6>)
   8956c:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   89570:	f1a2 0348 	sub.w	r3, r2, #72	; 0x48
   89574:	e9d3 2300 	ldrd	r2, r3, [r3]
   89578:	f7ff f9ec 	bl	88954 <__aeabi_dmul>
   8957c:	4682      	mov	sl, r0
   8957e:	4638      	mov	r0, r7
   89580:	468b      	mov	fp, r1
   89582:	f003 faab 	bl	8cadc <__aeabi_ui2d>
   89586:	4602      	mov	r2, r0
   89588:	460b      	mov	r3, r1
   8958a:	4650      	mov	r0, sl
   8958c:	4659      	mov	r1, fp
   8958e:	f003 f969 	bl	8c864 <__adddf3>
   89592:	4682      	mov	sl, r0
   89594:	468b      	mov	fp, r1
   89596:	2d0f      	cmp	r5, #15
   89598:	dc37      	bgt.n	8960a <_strtod_r+0x460>
   8959a:	9906      	ldr	r1, [sp, #24]
   8959c:	2900      	cmp	r1, #0
   8959e:	f000 8371 	beq.w	89c84 <_strtod_r+0xada>
   895a2:	dd24      	ble.n	895ee <_strtod_r+0x444>
   895a4:	2916      	cmp	r1, #22
   895a6:	dc07      	bgt.n	895b8 <_strtod_r+0x40e>
   895a8:	4875      	ldr	r0, [pc, #468]	; (89780 <_strtod_r+0x5d6>)
   895aa:	4652      	mov	r2, sl
   895ac:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   895b0:	e9d4 0100 	ldrd	r0, r1, [r4]
   895b4:	465b      	mov	r3, fp
   895b6:	e015      	b.n	895e4 <_strtod_r+0x43a>
   895b8:	9906      	ldr	r1, [sp, #24]
   895ba:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
   895be:	4291      	cmp	r1, r2
   895c0:	dc23      	bgt.n	8960a <_strtod_r+0x460>
   895c2:	4c6f      	ldr	r4, [pc, #444]	; (89780 <_strtod_r+0x5d6>)
   895c4:	f1c5 050f 	rsb	r5, r5, #15
   895c8:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   895cc:	4652      	mov	r2, sl
   895ce:	465b      	mov	r3, fp
   895d0:	e9d1 0100 	ldrd	r0, r1, [r1]
   895d4:	f7ff f9be 	bl	88954 <__aeabi_dmul>
   895d8:	9a06      	ldr	r2, [sp, #24]
   895da:	1b55      	subs	r5, r2, r5
   895dc:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   895e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   895e4:	f7ff f9b6 	bl	88954 <__aeabi_dmul>
   895e8:	4682      	mov	sl, r0
   895ea:	468b      	mov	fp, r1
   895ec:	e34a      	b.n	89c84 <_strtod_r+0xada>
   895ee:	9806      	ldr	r0, [sp, #24]
   895f0:	f110 0f16 	cmn.w	r0, #22
   895f4:	db09      	blt.n	8960a <_strtod_r+0x460>
   895f6:	4c62      	ldr	r4, [pc, #392]	; (89780 <_strtod_r+0x5d6>)
   895f8:	4659      	mov	r1, fp
   895fa:	eba4 03c0 	sub.w	r3, r4, r0, lsl #3
   895fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   89602:	4650      	mov	r0, sl
   89604:	f7ff fad0 	bl	88ba8 <__aeabi_ddiv>
   89608:	e7ee      	b.n	895e8 <_strtod_r+0x43e>
   8960a:	9806      	ldr	r0, [sp, #24]
   8960c:	1b2c      	subs	r4, r5, r4
   8960e:	1904      	adds	r4, r0, r4
   89610:	2c00      	cmp	r4, #0
   89612:	dd51      	ble.n	896b8 <_strtod_r+0x50e>
   89614:	f014 010f 	ands.w	r1, r4, #15
   89618:	d009      	beq.n	8962e <_strtod_r+0x484>
   8961a:	4a59      	ldr	r2, [pc, #356]	; (89780 <_strtod_r+0x5d6>)
   8961c:	465b      	mov	r3, fp
   8961e:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
   89622:	c803      	ldmia	r0, {r0, r1}
   89624:	4652      	mov	r2, sl
   89626:	f7ff f995 	bl	88954 <__aeabi_dmul>
   8962a:	4682      	mov	sl, r0
   8962c:	468b      	mov	fp, r1
   8962e:	f034 030f 	bics.w	r3, r4, #15
   89632:	f000 80b3 	beq.w	8979c <_strtod_r+0x5f2>
   89636:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
   8963a:	dd0f      	ble.n	8965c <_strtod_r+0x4b2>
   8963c:	f04f 0800 	mov.w	r8, #0
   89640:	f8cd 8010 	str.w	r8, [sp, #16]
   89644:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   89648:	f8cd 801c 	str.w	r8, [sp, #28]
   8964c:	2022      	movs	r0, #34	; 0x22
   8964e:	f8c9 0000 	str.w	r0, [r9]
   89652:	f8df b134 	ldr.w	fp, [pc, #308]	; 89788 <_strtod_r+0x5de>
   89656:	f04f 0a00 	mov.w	sl, #0
   8965a:	e16e      	b.n	8993a <_strtod_r+0x790>
   8965c:	4650      	mov	r0, sl
   8965e:	111f      	asrs	r7, r3, #4
   89660:	4659      	mov	r1, fp
   89662:	f04f 0a00 	mov.w	sl, #0
   89666:	2f01      	cmp	r7, #1
   89668:	dd0b      	ble.n	89682 <_strtod_r+0x4d8>
   8966a:	07fa      	lsls	r2, r7, #31
   8966c:	d505      	bpl.n	8967a <_strtod_r+0x4d0>
   8966e:	4c45      	ldr	r4, [pc, #276]	; (89784 <_strtod_r+0x5da>)
   89670:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
   89674:	ca0c      	ldmia	r2, {r2, r3}
   89676:	f7ff f96d 	bl	88954 <__aeabi_dmul>
   8967a:	f10a 0a01 	add.w	sl, sl, #1
   8967e:	107f      	asrs	r7, r7, #1
   89680:	e7f1      	b.n	89666 <_strtod_r+0x4bc>
   89682:	f1a1 7354 	sub.w	r3, r1, #55574528	; 0x3500000
   89686:	493f      	ldr	r1, [pc, #252]	; (89784 <_strtod_r+0x5da>)
   89688:	4602      	mov	r2, r0
   8968a:	eb01 00ca 	add.w	r0, r1, sl, lsl #3
   8968e:	c803      	ldmia	r0, {r0, r1}
   89690:	f7ff f960 	bl	88954 <__aeabi_dmul>
   89694:	4b3c      	ldr	r3, [pc, #240]	; (89788 <_strtod_r+0x5de>)
   89696:	4c3d      	ldr	r4, [pc, #244]	; (8978c <_strtod_r+0x5e2>)
   89698:	400b      	ands	r3, r1
   8969a:	42a3      	cmp	r3, r4
   8969c:	4682      	mov	sl, r0
   8969e:	468b      	mov	fp, r1
   896a0:	d8cc      	bhi.n	8963c <_strtod_r+0x492>
   896a2:	f5a4 1780 	sub.w	r7, r4, #1048576	; 0x100000
   896a6:	42bb      	cmp	r3, r7
   896a8:	bf86      	itte	hi
   896aa:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; 89798 <_strtod_r+0x5ee>
   896ae:	f04f 3aff 	movhi.w	sl, #4294967295
   896b2:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
   896b6:	e071      	b.n	8979c <_strtod_r+0x5f2>
   896b8:	d070      	beq.n	8979c <_strtod_r+0x5f2>
   896ba:	4267      	negs	r7, r4
   896bc:	f017 030f 	ands.w	r3, r7, #15
   896c0:	d00a      	beq.n	896d8 <_strtod_r+0x52e>
   896c2:	4a2f      	ldr	r2, [pc, #188]	; (89780 <_strtod_r+0x5d6>)
   896c4:	4650      	mov	r0, sl
   896c6:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   896ca:	4659      	mov	r1, fp
   896cc:	e9d4 2300 	ldrd	r2, r3, [r4]
   896d0:	f7ff fa6a 	bl	88ba8 <__aeabi_ddiv>
   896d4:	4682      	mov	sl, r0
   896d6:	468b      	mov	fp, r1
   896d8:	113f      	asrs	r7, r7, #4
   896da:	d05f      	beq.n	8979c <_strtod_r+0x5f2>
   896dc:	2f1f      	cmp	r7, #31
   896de:	dd08      	ble.n	896f2 <_strtod_r+0x548>
   896e0:	f04f 0800 	mov.w	r8, #0
   896e4:	f8cd 8010 	str.w	r8, [sp, #16]
   896e8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   896ec:	f8cd 801c 	str.w	r8, [sp, #28]
   896f0:	e11c      	b.n	8992c <_strtod_r+0x782>
   896f2:	f017 0f10 	tst.w	r7, #16
   896f6:	bf14      	ite	ne
   896f8:	216a      	movne	r1, #106	; 0x6a
   896fa:	2100      	moveq	r1, #0
   896fc:	4c24      	ldr	r4, [pc, #144]	; (89790 <_strtod_r+0x5e6>)
   896fe:	9105      	str	r1, [sp, #20]
   89700:	4650      	mov	r0, sl
   89702:	4659      	mov	r1, fp
   89704:	2f00      	cmp	r7, #0
   89706:	dd08      	ble.n	8971a <_strtod_r+0x570>
   89708:	07fb      	lsls	r3, r7, #31
   8970a:	d503      	bpl.n	89714 <_strtod_r+0x56a>
   8970c:	e9d4 2300 	ldrd	r2, r3, [r4]
   89710:	f7ff f920 	bl	88954 <__aeabi_dmul>
   89714:	107f      	asrs	r7, r7, #1
   89716:	3408      	adds	r4, #8
   89718:	e7f4      	b.n	89704 <_strtod_r+0x55a>
   8971a:	4682      	mov	sl, r0
   8971c:	9805      	ldr	r0, [sp, #20]
   8971e:	468b      	mov	fp, r1
   89720:	b1e0      	cbz	r0, 8975c <_strtod_r+0x5b2>
   89722:	f3c1 530a 	ubfx	r3, r1, #20, #11
   89726:	f1c3 046b 	rsb	r4, r3, #107	; 0x6b
   8972a:	2c00      	cmp	r4, #0
   8972c:	dd16      	ble.n	8975c <_strtod_r+0x5b2>
   8972e:	2c1f      	cmp	r4, #31
   89730:	dd0e      	ble.n	89750 <_strtod_r+0x5a6>
   89732:	2c34      	cmp	r4, #52	; 0x34
   89734:	f04f 0a00 	mov.w	sl, #0
   89738:	dd02      	ble.n	89740 <_strtod_r+0x596>
   8973a:	f04f 7b5c 	mov.w	fp, #57671680	; 0x3700000
   8973e:	e00d      	b.n	8975c <_strtod_r+0x5b2>
   89740:	3c20      	subs	r4, #32
   89742:	f04f 33ff 	mov.w	r3, #4294967295
   89746:	fa03 f404 	lsl.w	r4, r3, r4
   8974a:	ea04 0b01 	and.w	fp, r4, r1
   8974e:	e005      	b.n	8975c <_strtod_r+0x5b2>
   89750:	f04f 31ff 	mov.w	r1, #4294967295
   89754:	fa01 f004 	lsl.w	r0, r1, r4
   89758:	ea00 0a0a 	and.w	sl, r0, sl
   8975c:	4650      	mov	r0, sl
   8975e:	4659      	mov	r1, fp
   89760:	2200      	movs	r2, #0
   89762:	2300      	movs	r3, #0
   89764:	f7ff fb5e 	bl	88e24 <__aeabi_dcmpeq>
   89768:	2800      	cmp	r0, #0
   8976a:	d1b9      	bne.n	896e0 <_strtod_r+0x536>
   8976c:	e018      	b.n	897a0 <_strtod_r+0x5f6>
   8976e:	bf00      	nop
   89770:	0008dc40 	.word	0x0008dc40
   89774:	0008dc43 	.word	0x0008dc43
   89778:	0008dc49 	.word	0x0008dc49
   8977c:	200706e4 	.word	0x200706e4
   89780:	0008dcb8 	.word	0x0008dcb8
   89784:	0008dda8 	.word	0x0008dda8
   89788:	7ff00000 	.word	0x7ff00000
   8978c:	7ca00000 	.word	0x7ca00000
   89790:	0008dc18 	.word	0x0008dc18
   89794:	fff80000 	.word	0xfff80000
   89798:	7fefffff 	.word	0x7fefffff
   8979c:	2100      	movs	r1, #0
   8979e:	9105      	str	r1, [sp, #20]
   897a0:	9804      	ldr	r0, [sp, #16]
   897a2:	4632      	mov	r2, r6
   897a4:	9000      	str	r0, [sp, #0]
   897a6:	9907      	ldr	r1, [sp, #28]
   897a8:	4648      	mov	r0, r9
   897aa:	462b      	mov	r3, r5
   897ac:	f001 fe51 	bl	8b452 <__s2b>
   897b0:	9e06      	ldr	r6, [sp, #24]
   897b2:	900a      	str	r0, [sp, #40]	; 0x28
   897b4:	2e00      	cmp	r6, #0
   897b6:	f2c0 80c5 	blt.w	89944 <_strtod_r+0x79a>
   897ba:	2200      	movs	r2, #0
   897bc:	9210      	str	r2, [sp, #64]	; 0x40
   897be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   897c0:	4648      	mov	r0, r9
   897c2:	6861      	ldr	r1, [r4, #4]
   897c4:	f001 fdda 	bl	8b37c <_Balloc>
   897c8:	6923      	ldr	r3, [r4, #16]
   897ca:	4621      	mov	r1, r4
   897cc:	1c9f      	adds	r7, r3, #2
   897ce:	00ba      	lsls	r2, r7, #2
   897d0:	310c      	adds	r1, #12
   897d2:	9007      	str	r0, [sp, #28]
   897d4:	300c      	adds	r0, #12
   897d6:	f7ff fbe1 	bl	88f9c <memcpy>
   897da:	a912      	add	r1, sp, #72	; 0x48
   897dc:	a815      	add	r0, sp, #84	; 0x54
   897de:	4652      	mov	r2, sl
   897e0:	9100      	str	r1, [sp, #0]
   897e2:	9001      	str	r0, [sp, #4]
   897e4:	465b      	mov	r3, fp
   897e6:	4648      	mov	r0, r9
   897e8:	e9cd ab08 	strd	sl, fp, [sp, #32]
   897ec:	f002 f8e4 	bl	8b9b8 <__d2b>
   897f0:	2101      	movs	r1, #1
   897f2:	9014      	str	r0, [sp, #80]	; 0x50
   897f4:	4648      	mov	r0, r9
   897f6:	f001 feba 	bl	8b56e <__i2b>
   897fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   897fc:	9e06      	ldr	r6, [sp, #24]
   897fe:	2a00      	cmp	r2, #0
   89800:	9004      	str	r0, [sp, #16]
   89802:	ea26 77e6 	bic.w	r7, r6, r6, asr #31
   89806:	f2c0 80a0 	blt.w	8994a <_strtod_r+0x7a0>
   8980a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8980c:	463b      	mov	r3, r7
   8980e:	18ad      	adds	r5, r5, r2
   89810:	9c05      	ldr	r4, [sp, #20]
   89812:	9e15      	ldr	r6, [sp, #84]	; 0x54
   89814:	1b14      	subs	r4, r2, r4
   89816:	19a0      	adds	r0, r4, r6
   89818:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
   8981c:	4288      	cmp	r0, r1
   8981e:	bfb4      	ite	lt
   89820:	f204 4433 	addwlt	r4, r4, #1075	; 0x433
   89824:	f1c6 0436 	rsbge	r4, r6, #54	; 0x36
   89828:	9a05      	ldr	r2, [sp, #20]
   8982a:	192e      	adds	r6, r5, r4
   8982c:	191b      	adds	r3, r3, r4
   8982e:	42ae      	cmp	r6, r5
   89830:	bfb4      	ite	lt
   89832:	4630      	movlt	r0, r6
   89834:	4628      	movge	r0, r5
   89836:	189c      	adds	r4, r3, r2
   89838:	42a0      	cmp	r0, r4
   8983a:	bfa8      	it	ge
   8983c:	4620      	movge	r0, r4
   8983e:	2800      	cmp	r0, #0
   89840:	dd02      	ble.n	89848 <_strtod_r+0x69e>
   89842:	1a36      	subs	r6, r6, r0
   89844:	1a24      	subs	r4, r4, r0
   89846:	1a2d      	subs	r5, r5, r0
   89848:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8984a:	b18b      	cbz	r3, 89870 <_strtod_r+0x6c6>
   8984c:	461a      	mov	r2, r3
   8984e:	9904      	ldr	r1, [sp, #16]
   89850:	4648      	mov	r0, r9
   89852:	f001 ff26 	bl	8b6a2 <__pow5mult>
   89856:	9004      	str	r0, [sp, #16]
   89858:	9904      	ldr	r1, [sp, #16]
   8985a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   8985c:	4648      	mov	r0, r9
   8985e:	f001 fe8f 	bl	8b580 <__multiply>
   89862:	9914      	ldr	r1, [sp, #80]	; 0x50
   89864:	4680      	mov	r8, r0
   89866:	4648      	mov	r0, r9
   89868:	f001 fdae 	bl	8b3c8 <_Bfree>
   8986c:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   89870:	2e00      	cmp	r6, #0
   89872:	dd05      	ble.n	89880 <_strtod_r+0x6d6>
   89874:	4648      	mov	r0, r9
   89876:	9914      	ldr	r1, [sp, #80]	; 0x50
   89878:	4632      	mov	r2, r6
   8987a:	f001 ff55 	bl	8b728 <__lshift>
   8987e:	9014      	str	r0, [sp, #80]	; 0x50
   89880:	b12f      	cbz	r7, 8988e <_strtod_r+0x6e4>
   89882:	4648      	mov	r0, r9
   89884:	9907      	ldr	r1, [sp, #28]
   89886:	463a      	mov	r2, r7
   89888:	f001 ff0b 	bl	8b6a2 <__pow5mult>
   8988c:	9007      	str	r0, [sp, #28]
   8988e:	2c00      	cmp	r4, #0
   89890:	dd05      	ble.n	8989e <_strtod_r+0x6f4>
   89892:	4648      	mov	r0, r9
   89894:	9907      	ldr	r1, [sp, #28]
   89896:	4622      	mov	r2, r4
   89898:	f001 ff46 	bl	8b728 <__lshift>
   8989c:	9007      	str	r0, [sp, #28]
   8989e:	2d00      	cmp	r5, #0
   898a0:	dd05      	ble.n	898ae <_strtod_r+0x704>
   898a2:	4648      	mov	r0, r9
   898a4:	9904      	ldr	r1, [sp, #16]
   898a6:	462a      	mov	r2, r5
   898a8:	f001 ff3e 	bl	8b728 <__lshift>
   898ac:	9004      	str	r0, [sp, #16]
   898ae:	9914      	ldr	r1, [sp, #80]	; 0x50
   898b0:	9a07      	ldr	r2, [sp, #28]
   898b2:	4648      	mov	r0, r9
   898b4:	f001 ffa9 	bl	8b80a <__mdiff>
   898b8:	2100      	movs	r1, #0
   898ba:	68c4      	ldr	r4, [r0, #12]
   898bc:	60c1      	str	r1, [r0, #12]
   898be:	9904      	ldr	r1, [sp, #16]
   898c0:	4680      	mov	r8, r0
   898c2:	940b      	str	r4, [sp, #44]	; 0x2c
   898c4:	f001 ff84 	bl	8b7d0 <__mcmp>
   898c8:	2800      	cmp	r0, #0
   898ca:	da46      	bge.n	8995a <_strtod_r+0x7b0>
   898cc:	2c00      	cmp	r4, #0
   898ce:	f040 81b2 	bne.w	89c36 <_strtod_r+0xa8c>
   898d2:	f1ba 0f00 	cmp.w	sl, #0
   898d6:	f040 81ae 	bne.w	89c36 <_strtod_r+0xa8c>
   898da:	f3cb 0013 	ubfx	r0, fp, #0, #20
   898de:	465c      	mov	r4, fp
   898e0:	2800      	cmp	r0, #0
   898e2:	f040 81a8 	bne.w	89c36 <_strtod_r+0xa8c>
   898e6:	4a9c      	ldr	r2, [pc, #624]	; (89b58 <_strtod_r+0x9ae>)
   898e8:	4022      	ands	r2, r4
   898ea:	f1b2 6fd6 	cmp.w	r2, #112197632	; 0x6b00000
   898ee:	f240 81a2 	bls.w	89c36 <_strtod_r+0xa8c>
   898f2:	f8d8 3014 	ldr.w	r3, [r8, #20]
   898f6:	b35b      	cbz	r3, 89950 <_strtod_r+0x7a6>
   898f8:	4641      	mov	r1, r8
   898fa:	2201      	movs	r2, #1
   898fc:	4648      	mov	r0, r9
   898fe:	f001 ff13 	bl	8b728 <__lshift>
   89902:	9904      	ldr	r1, [sp, #16]
   89904:	4680      	mov	r8, r0
   89906:	f001 ff63 	bl	8b7d0 <__mcmp>
   8990a:	2800      	cmp	r0, #0
   8990c:	f340 8193 	ble.w	89c36 <_strtod_r+0xa8c>
   89910:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
   89914:	9b05      	ldr	r3, [sp, #20]
   89916:	0d20      	lsrs	r0, r4, #20
   89918:	0502      	lsls	r2, r0, #20
   8991a:	2b00      	cmp	r3, #0
   8991c:	d04a      	beq.n	899b4 <_strtod_r+0x80a>
   8991e:	f1b2 6fd6 	cmp.w	r2, #112197632	; 0x6b00000
   89922:	d847      	bhi.n	899b4 <_strtod_r+0x80a>
   89924:	f1b2 7f5c 	cmp.w	r2, #57671680	; 0x3700000
   89928:	f200 8187 	bhi.w	89c3a <_strtod_r+0xa90>
   8992c:	2422      	movs	r4, #34	; 0x22
   8992e:	f04f 0a00 	mov.w	sl, #0
   89932:	f04f 0b00 	mov.w	fp, #0
   89936:	f8c9 4000 	str.w	r4, [r9]
   8993a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8993c:	2b00      	cmp	r3, #0
   8993e:	f040 818d 	bne.w	89c5c <_strtod_r+0xab2>
   89942:	e19f      	b.n	89c84 <_strtod_r+0xada>
   89944:	9d06      	ldr	r5, [sp, #24]
   89946:	426a      	negs	r2, r5
   89948:	e738      	b.n	897bc <_strtod_r+0x612>
   8994a:	1abb      	subs	r3, r7, r2
   8994c:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8994e:	e75f      	b.n	89810 <_strtod_r+0x666>
   89950:	f8d8 1010 	ldr.w	r1, [r8, #16]
   89954:	2901      	cmp	r1, #1
   89956:	dccf      	bgt.n	898f8 <_strtod_r+0x74e>
   89958:	e16d      	b.n	89c36 <_strtod_r+0xa8c>
   8995a:	d159      	bne.n	89a10 <_strtod_r+0x866>
   8995c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8995e:	b314      	cbz	r4, 899a6 <_strtod_r+0x7fc>
   89960:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
   89964:	4c7d      	ldr	r4, [pc, #500]	; (89b5c <_strtod_r+0x9b2>)
   89966:	f421 0070 	bic.w	r0, r1, #15728640	; 0xf00000
   8996a:	42a0      	cmp	r0, r4
   8996c:	465a      	mov	r2, fp
   8996e:	d12a      	bne.n	899c6 <_strtod_r+0x81c>
   89970:	9b05      	ldr	r3, [sp, #20]
   89972:	4651      	mov	r1, sl
   89974:	b163      	cbz	r3, 89990 <_strtod_r+0x7e6>
   89976:	4878      	ldr	r0, [pc, #480]	; (89b58 <_strtod_r+0x9ae>)
   89978:	4010      	ands	r0, r2
   8997a:	f1b0 6fd4 	cmp.w	r0, #111149056	; 0x6a00000
   8997e:	d807      	bhi.n	89990 <_strtod_r+0x7e6>
   89980:	0d03      	lsrs	r3, r0, #20
   89982:	f1c3 046b 	rsb	r4, r3, #107	; 0x6b
   89986:	f04f 30ff 	mov.w	r0, #4294967295
   8998a:	fa00 f404 	lsl.w	r4, r0, r4
   8998e:	e001      	b.n	89994 <_strtod_r+0x7ea>
   89990:	f04f 34ff 	mov.w	r4, #4294967295
   89994:	42a1      	cmp	r1, r4
   89996:	d116      	bne.n	899c6 <_strtod_r+0x81c>
   89998:	496f      	ldr	r1, [pc, #444]	; (89b58 <_strtod_r+0x9ae>)
   8999a:	f04f 0a00 	mov.w	sl, #0
   8999e:	4011      	ands	r1, r2
   899a0:	f501 1b80 	add.w	fp, r1, #1048576	; 0x100000
   899a4:	e147      	b.n	89c36 <_strtod_r+0xa8c>
   899a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   899aa:	b963      	cbnz	r3, 899c6 <_strtod_r+0x81c>
   899ac:	f1ba 0f00 	cmp.w	sl, #0
   899b0:	d109      	bne.n	899c6 <_strtod_r+0x81c>
   899b2:	e7ad      	b.n	89910 <_strtod_r+0x766>
   899b4:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
   899b8:	ea6f 5c11 	mvn.w	ip, r1, lsr #20
   899bc:	ea6f 5b0c 	mvn.w	fp, ip, lsl #20
   899c0:	f04f 3aff 	mov.w	sl, #4294967295
   899c4:	e137      	b.n	89c36 <_strtod_r+0xa8c>
   899c6:	f00a 0201 	and.w	r2, sl, #1
   899ca:	2a00      	cmp	r2, #0
   899cc:	f000 8133 	beq.w	89c36 <_strtod_r+0xa8c>
   899d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   899d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   899d6:	b153      	cbz	r3, 899ee <_strtod_r+0x844>
   899d8:	f001 ff79 	bl	8b8ce <__ulp>
   899dc:	4602      	mov	r2, r0
   899de:	460b      	mov	r3, r1
   899e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   899e4:	f002 ff3e 	bl	8c864 <__adddf3>
   899e8:	4682      	mov	sl, r0
   899ea:	468b      	mov	fp, r1
   899ec:	e123      	b.n	89c36 <_strtod_r+0xa8c>
   899ee:	f001 ff6e 	bl	8b8ce <__ulp>
   899f2:	4602      	mov	r2, r0
   899f4:	460b      	mov	r3, r1
   899f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   899fa:	f002 ff31 	bl	8c860 <__aeabi_dsub>
   899fe:	2200      	movs	r2, #0
   89a00:	2300      	movs	r3, #0
   89a02:	4682      	mov	sl, r0
   89a04:	468b      	mov	fp, r1
   89a06:	f7ff fa0d 	bl	88e24 <__aeabi_dcmpeq>
   89a0a:	2800      	cmp	r0, #0
   89a0c:	d18e      	bne.n	8992c <_strtod_r+0x782>
   89a0e:	e112      	b.n	89c36 <_strtod_r+0xa8c>
   89a10:	4640      	mov	r0, r8
   89a12:	9904      	ldr	r1, [sp, #16]
   89a14:	f002 f824 	bl	8ba60 <__ratio>
   89a18:	2200      	movs	r2, #0
   89a1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   89a1e:	4604      	mov	r4, r0
   89a20:	460d      	mov	r5, r1
   89a22:	f7ff fa13 	bl	88e4c <__aeabi_dcmple>
   89a26:	b368      	cbz	r0, 89a84 <_strtod_r+0x8da>
   89a28:	980b      	ldr	r0, [sp, #44]	; 0x2c
   89a2a:	b110      	cbz	r0, 89a32 <_strtod_r+0x888>
   89a2c:	2600      	movs	r6, #0
   89a2e:	4f4c      	ldr	r7, [pc, #304]	; (89b60 <_strtod_r+0x9b6>)
   89a30:	e00f      	b.n	89a52 <_strtod_r+0x8a8>
   89a32:	4653      	mov	r3, sl
   89a34:	f1ba 0f00 	cmp.w	sl, #0
   89a38:	d103      	bne.n	89a42 <_strtod_r+0x898>
   89a3a:	f3cb 0613 	ubfx	r6, fp, #0, #20
   89a3e:	b936      	cbnz	r6, 89a4e <_strtod_r+0x8a4>
   89a40:	e00a      	b.n	89a58 <_strtod_r+0x8ae>
   89a42:	2b01      	cmp	r3, #1
   89a44:	d103      	bne.n	89a4e <_strtod_r+0x8a4>
   89a46:	f1bb 0f00 	cmp.w	fp, #0
   89a4a:	f43f af6f 	beq.w	8992c <_strtod_r+0x782>
   89a4e:	4f45      	ldr	r7, [pc, #276]	; (89b64 <_strtod_r+0x9ba>)
   89a50:	2600      	movs	r6, #0
   89a52:	2500      	movs	r5, #0
   89a54:	4c42      	ldr	r4, [pc, #264]	; (89b60 <_strtod_r+0x9b6>)
   89a56:	e025      	b.n	89aa4 <_strtod_r+0x8fa>
   89a58:	4620      	mov	r0, r4
   89a5a:	4629      	mov	r1, r5
   89a5c:	2200      	movs	r2, #0
   89a5e:	4b40      	ldr	r3, [pc, #256]	; (89b60 <_strtod_r+0x9b6>)
   89a60:	f7ff f9ea 	bl	88e38 <__aeabi_dcmplt>
   89a64:	b940      	cbnz	r0, 89a78 <_strtod_r+0x8ce>
   89a66:	4620      	mov	r0, r4
   89a68:	4629      	mov	r1, r5
   89a6a:	2200      	movs	r2, #0
   89a6c:	4b3e      	ldr	r3, [pc, #248]	; (89b68 <_strtod_r+0x9be>)
   89a6e:	f7fe ff71 	bl	88954 <__aeabi_dmul>
   89a72:	4605      	mov	r5, r0
   89a74:	460c      	mov	r4, r1
   89a76:	e001      	b.n	89a7c <_strtod_r+0x8d2>
   89a78:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   89a7a:	4c3b      	ldr	r4, [pc, #236]	; (89b68 <_strtod_r+0x9be>)
   89a7c:	462e      	mov	r6, r5
   89a7e:	f104 4700 	add.w	r7, r4, #2147483648	; 0x80000000
   89a82:	e00f      	b.n	89aa4 <_strtod_r+0x8fa>
   89a84:	4620      	mov	r0, r4
   89a86:	4629      	mov	r1, r5
   89a88:	2200      	movs	r2, #0
   89a8a:	4b37      	ldr	r3, [pc, #220]	; (89b68 <_strtod_r+0x9be>)
   89a8c:	f7fe ff62 	bl	88954 <__aeabi_dmul>
   89a90:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   89a92:	4605      	mov	r5, r0
   89a94:	460c      	mov	r4, r1
   89a96:	b917      	cbnz	r7, 89a9e <_strtod_r+0x8f4>
   89a98:	f101 4200 	add.w	r2, r1, #2147483648	; 0x80000000
   89a9c:	e000      	b.n	89aa0 <_strtod_r+0x8f6>
   89a9e:	460a      	mov	r2, r1
   89aa0:	462e      	mov	r6, r5
   89aa2:	4617      	mov	r7, r2
   89aa4:	492c      	ldr	r1, [pc, #176]	; (89b58 <_strtod_r+0x9ae>)
   89aa6:	465b      	mov	r3, fp
   89aa8:	4019      	ands	r1, r3
   89aaa:	910c      	str	r1, [sp, #48]	; 0x30
   89aac:	4a2f      	ldr	r2, [pc, #188]	; (89b6c <_strtod_r+0x9c2>)
   89aae:	980c      	ldr	r0, [sp, #48]	; 0x30
   89ab0:	4290      	cmp	r0, r2
   89ab2:	d12c      	bne.n	89b0e <_strtod_r+0x964>
   89ab4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   89ab8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89abc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   89ac0:	4650      	mov	r0, sl
   89ac2:	4659      	mov	r1, fp
   89ac4:	f001 ff03 	bl	8b8ce <__ulp>
   89ac8:	4602      	mov	r2, r0
   89aca:	460b      	mov	r3, r1
   89acc:	4630      	mov	r0, r6
   89ace:	4639      	mov	r1, r7
   89ad0:	f7fe ff40 	bl	88954 <__aeabi_dmul>
   89ad4:	460b      	mov	r3, r1
   89ad6:	4602      	mov	r2, r0
   89ad8:	4659      	mov	r1, fp
   89ada:	4650      	mov	r0, sl
   89adc:	f002 fec2 	bl	8c864 <__adddf3>
   89ae0:	4682      	mov	sl, r0
   89ae2:	481d      	ldr	r0, [pc, #116]	; (89b58 <_strtod_r+0x9ae>)
   89ae4:	460b      	mov	r3, r1
   89ae6:	4008      	ands	r0, r1
   89ae8:	4921      	ldr	r1, [pc, #132]	; (89b70 <_strtod_r+0x9c6>)
   89aea:	4288      	cmp	r0, r1
   89aec:	d90c      	bls.n	89b08 <_strtod_r+0x95e>
   89aee:	4a21      	ldr	r2, [pc, #132]	; (89b74 <_strtod_r+0x9ca>)
   89af0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   89af2:	4291      	cmp	r1, r2
   89af4:	d103      	bne.n	89afe <_strtod_r+0x954>
   89af6:	980e      	ldr	r0, [sp, #56]	; 0x38
   89af8:	1c42      	adds	r2, r0, #1
   89afa:	f43f ada7 	beq.w	8964c <_strtod_r+0x4a2>
   89afe:	f8df b074 	ldr.w	fp, [pc, #116]	; 89b74 <_strtod_r+0x9ca>
   89b02:	f04f 3aff 	mov.w	sl, #4294967295
   89b06:	e085      	b.n	89c14 <_strtod_r+0xa6a>
   89b08:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   89b0c:	e04c      	b.n	89ba8 <_strtod_r+0x9fe>
   89b0e:	9b05      	ldr	r3, [sp, #20]
   89b10:	2b00      	cmp	r3, #0
   89b12:	d037      	beq.n	89b84 <_strtod_r+0x9da>
   89b14:	990c      	ldr	r1, [sp, #48]	; 0x30
   89b16:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
   89b1a:	d833      	bhi.n	89b84 <_strtod_r+0x9da>
   89b1c:	4628      	mov	r0, r5
   89b1e:	4621      	mov	r1, r4
   89b20:	a30b      	add	r3, pc, #44	; (adr r3, 89b50 <_strtod_r+0x9a6>)
   89b22:	e9d3 2300 	ldrd	r2, r3, [r3]
   89b26:	f7ff f991 	bl	88e4c <__aeabi_dcmple>
   89b2a:	b338      	cbz	r0, 89b7c <_strtod_r+0x9d2>
   89b2c:	4621      	mov	r1, r4
   89b2e:	4628      	mov	r0, r5
   89b30:	f003 f872 	bl	8cc18 <__aeabi_d2uiz>
   89b34:	2800      	cmp	r0, #0
   89b36:	bf08      	it	eq
   89b38:	2001      	moveq	r0, #1
   89b3a:	f002 ffcf 	bl	8cadc <__aeabi_ui2d>
   89b3e:	460c      	mov	r4, r1
   89b40:	990b      	ldr	r1, [sp, #44]	; 0x2c
   89b42:	4605      	mov	r5, r0
   89b44:	b9c1      	cbnz	r1, 89b78 <_strtod_r+0x9ce>
   89b46:	f104 4700 	add.w	r7, r4, #2147483648	; 0x80000000
   89b4a:	e016      	b.n	89b7a <_strtod_r+0x9d0>
   89b4c:	f3af 8000 	nop.w
   89b50:	ffc00000 	.word	0xffc00000
   89b54:	41dfffff 	.word	0x41dfffff
   89b58:	7ff00000 	.word	0x7ff00000
   89b5c:	000fffff 	.word	0x000fffff
   89b60:	3ff00000 	.word	0x3ff00000
   89b64:	bff00000 	.word	0xbff00000
   89b68:	3fe00000 	.word	0x3fe00000
   89b6c:	7fe00000 	.word	0x7fe00000
   89b70:	7c9fffff 	.word	0x7c9fffff
   89b74:	7fefffff 	.word	0x7fefffff
   89b78:	4627      	mov	r7, r4
   89b7a:	462e      	mov	r6, r5
   89b7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89b7e:	f107 60d6 	add.w	r0, r7, #112197632	; 0x6b00000
   89b82:	1a87      	subs	r7, r0, r2
   89b84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89b88:	f001 fea1 	bl	8b8ce <__ulp>
   89b8c:	4602      	mov	r2, r0
   89b8e:	460b      	mov	r3, r1
   89b90:	4630      	mov	r0, r6
   89b92:	4639      	mov	r1, r7
   89b94:	f7fe fede 	bl	88954 <__aeabi_dmul>
   89b98:	4602      	mov	r2, r0
   89b9a:	460b      	mov	r3, r1
   89b9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89ba0:	f002 fe60 	bl	8c864 <__adddf3>
   89ba4:	4682      	mov	sl, r0
   89ba6:	468b      	mov	fp, r1
   89ba8:	9b05      	ldr	r3, [sp, #20]
   89baa:	465e      	mov	r6, fp
   89bac:	2b00      	cmp	r3, #0
   89bae:	d131      	bne.n	89c14 <_strtod_r+0xa6a>
   89bb0:	4a43      	ldr	r2, [pc, #268]	; (89cc0 <_strtod_r+0xb16>)
   89bb2:	980c      	ldr	r0, [sp, #48]	; 0x30
   89bb4:	4032      	ands	r2, r6
   89bb6:	4290      	cmp	r0, r2
   89bb8:	d12c      	bne.n	89c14 <_strtod_r+0xa6a>
   89bba:	4621      	mov	r1, r4
   89bbc:	4628      	mov	r0, r5
   89bbe:	f003 f803 	bl	8cbc8 <__aeabi_d2iz>
   89bc2:	f002 ff9b 	bl	8cafc <__aeabi_i2d>
   89bc6:	460b      	mov	r3, r1
   89bc8:	4602      	mov	r2, r0
   89bca:	4621      	mov	r1, r4
   89bcc:	4628      	mov	r0, r5
   89bce:	f002 fe47 	bl	8c860 <__aeabi_dsub>
   89bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89bd4:	4604      	mov	r4, r0
   89bd6:	460d      	mov	r5, r1
   89bd8:	b92b      	cbnz	r3, 89be6 <_strtod_r+0xa3c>
   89bda:	f1ba 0f00 	cmp.w	sl, #0
   89bde:	d102      	bne.n	89be6 <_strtod_r+0xa3c>
   89be0:	f3cb 0613 	ubfx	r6, fp, #0, #20
   89be4:	b186      	cbz	r6, 89c08 <_strtod_r+0xa5e>
   89be6:	4620      	mov	r0, r4
   89be8:	4629      	mov	r1, r5
   89bea:	a32f      	add	r3, pc, #188	; (adr r3, 89ca8 <_strtod_r+0xafe>)
   89bec:	e9d3 2300 	ldrd	r2, r3, [r3]
   89bf0:	f7ff f922 	bl	88e38 <__aeabi_dcmplt>
   89bf4:	2800      	cmp	r0, #0
   89bf6:	d131      	bne.n	89c5c <_strtod_r+0xab2>
   89bf8:	4620      	mov	r0, r4
   89bfa:	4629      	mov	r1, r5
   89bfc:	a32c      	add	r3, pc, #176	; (adr r3, 89cb0 <_strtod_r+0xb06>)
   89bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   89c02:	f7ff f937 	bl	88e74 <__aeabi_dcmpgt>
   89c06:	e004      	b.n	89c12 <_strtod_r+0xa68>
   89c08:	a32b      	add	r3, pc, #172	; (adr r3, 89cb8 <_strtod_r+0xb0e>)
   89c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   89c0e:	f7ff f913 	bl	88e38 <__aeabi_dcmplt>
   89c12:	bb18      	cbnz	r0, 89c5c <_strtod_r+0xab2>
   89c14:	4648      	mov	r0, r9
   89c16:	9914      	ldr	r1, [sp, #80]	; 0x50
   89c18:	f001 fbd6 	bl	8b3c8 <_Bfree>
   89c1c:	4648      	mov	r0, r9
   89c1e:	9907      	ldr	r1, [sp, #28]
   89c20:	f001 fbd2 	bl	8b3c8 <_Bfree>
   89c24:	4648      	mov	r0, r9
   89c26:	9904      	ldr	r1, [sp, #16]
   89c28:	f001 fbce 	bl	8b3c8 <_Bfree>
   89c2c:	4648      	mov	r0, r9
   89c2e:	4641      	mov	r1, r8
   89c30:	f001 fbca 	bl	8b3c8 <_Bfree>
   89c34:	e5c3      	b.n	897be <_strtod_r+0x614>
   89c36:	9805      	ldr	r0, [sp, #20]
   89c38:	b180      	cbz	r0, 89c5c <_strtod_r+0xab2>
   89c3a:	4a22      	ldr	r2, [pc, #136]	; (89cc4 <_strtod_r+0xb1a>)
   89c3c:	2300      	movs	r3, #0
   89c3e:	920f      	str	r2, [sp, #60]	; 0x3c
   89c40:	930e      	str	r3, [sp, #56]	; 0x38
   89c42:	4650      	mov	r0, sl
   89c44:	4659      	mov	r1, fp
   89c46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   89c4a:	f7fe fe83 	bl	88954 <__aeabi_dmul>
   89c4e:	4682      	mov	sl, r0
   89c50:	468b      	mov	fp, r1
   89c52:	b919      	cbnz	r1, 89c5c <_strtod_r+0xab2>
   89c54:	b910      	cbnz	r0, 89c5c <_strtod_r+0xab2>
   89c56:	2122      	movs	r1, #34	; 0x22
   89c58:	f8c9 1000 	str.w	r1, [r9]
   89c5c:	4648      	mov	r0, r9
   89c5e:	9914      	ldr	r1, [sp, #80]	; 0x50
   89c60:	f001 fbb2 	bl	8b3c8 <_Bfree>
   89c64:	4648      	mov	r0, r9
   89c66:	9907      	ldr	r1, [sp, #28]
   89c68:	f001 fbae 	bl	8b3c8 <_Bfree>
   89c6c:	4648      	mov	r0, r9
   89c6e:	9904      	ldr	r1, [sp, #16]
   89c70:	f001 fbaa 	bl	8b3c8 <_Bfree>
   89c74:	4648      	mov	r0, r9
   89c76:	990a      	ldr	r1, [sp, #40]	; 0x28
   89c78:	f001 fba6 	bl	8b3c8 <_Bfree>
   89c7c:	4648      	mov	r0, r9
   89c7e:	4641      	mov	r1, r8
   89c80:	f001 fba2 	bl	8b3c8 <_Bfree>
   89c84:	9811      	ldr	r0, [sp, #68]	; 0x44
   89c86:	b108      	cbz	r0, 89c8c <_strtod_r+0xae2>
   89c88:	9913      	ldr	r1, [sp, #76]	; 0x4c
   89c8a:	6001      	str	r1, [r0, #0]
   89c8c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   89c8e:	4652      	mov	r2, sl
   89c90:	b114      	cbz	r4, 89c98 <_strtod_r+0xaee>
   89c92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   89c96:	e000      	b.n	89c9a <_strtod_r+0xaf0>
   89c98:	465b      	mov	r3, fp
   89c9a:	4610      	mov	r0, r2
   89c9c:	4619      	mov	r1, r3
   89c9e:	b019      	add	sp, #100	; 0x64
   89ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89ca4:	f3af 8000 	nop.w
   89ca8:	94a03595 	.word	0x94a03595
   89cac:	3fdfffff 	.word	0x3fdfffff
   89cb0:	35afe535 	.word	0x35afe535
   89cb4:	3fe00000 	.word	0x3fe00000
   89cb8:	94a03595 	.word	0x94a03595
   89cbc:	3fcfffff 	.word	0x3fcfffff
   89cc0:	7ff00000 	.word	0x7ff00000
   89cc4:	39500000 	.word	0x39500000

00089cc8 <strtod>:
   89cc8:	460a      	mov	r2, r1
   89cca:	4903      	ldr	r1, [pc, #12]	; (89cd8 <strtod+0x10>)
   89ccc:	4603      	mov	r3, r0
   89cce:	6808      	ldr	r0, [r1, #0]
   89cd0:	4619      	mov	r1, r3
   89cd2:	f7ff ba6a 	b.w	891aa <_strtod_r>
   89cd6:	bf00      	nop
   89cd8:	200702a0 	.word	0x200702a0

00089cdc <strtof>:
   89cdc:	460a      	mov	r2, r1
   89cde:	490a      	ldr	r1, [pc, #40]	; (89d08 <strtof+0x2c>)
   89ce0:	b538      	push	{r3, r4, r5, lr}
   89ce2:	4603      	mov	r3, r0
   89ce4:	6808      	ldr	r0, [r1, #0]
   89ce6:	4619      	mov	r1, r3
   89ce8:	f7ff fa5f 	bl	891aa <_strtod_r>
   89cec:	4604      	mov	r4, r0
   89cee:	460d      	mov	r5, r1
   89cf0:	f002 f8a2 	bl	8be38 <__fpclassifyd>
   89cf4:	b918      	cbnz	r0, 89cfe <strtof+0x22>
   89cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   89cfa:	f002 b8df 	b.w	8bebc <nanf>
   89cfe:	4620      	mov	r0, r4
   89d00:	4629      	mov	r1, r5
   89d02:	f002 ffa9 	bl	8cc58 <__aeabi_d2f>
   89d06:	bd38      	pop	{r3, r4, r5, pc}
   89d08:	200702a0 	.word	0x200702a0
   89d0c:	f3af 8000 	nop.w

00089d10 <_strtol_r>:
   89d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89d14:	9001      	str	r0, [sp, #4]
   89d16:	4840      	ldr	r0, [pc, #256]	; (89e18 <_strtol_r+0x108>)
   89d18:	f8d0 9000 	ldr.w	r9, [r0]
   89d1c:	4608      	mov	r0, r1
   89d1e:	4604      	mov	r4, r0
   89d20:	f814 5b01 	ldrb.w	r5, [r4], #1
   89d24:	eb09 0605 	add.w	r6, r9, r5
   89d28:	7877      	ldrb	r7, [r6, #1]
   89d2a:	4620      	mov	r0, r4
   89d2c:	f007 0608 	and.w	r6, r7, #8
   89d30:	b2f7      	uxtb	r7, r6
   89d32:	2f00      	cmp	r7, #0
   89d34:	d1f3      	bne.n	89d1e <_strtol_r+0xe>
   89d36:	2d2d      	cmp	r5, #45	; 0x2d
   89d38:	d103      	bne.n	89d42 <_strtol_r+0x32>
   89d3a:	f814 5b01 	ldrb.w	r5, [r4], #1
   89d3e:	2701      	movs	r7, #1
   89d40:	e004      	b.n	89d4c <_strtol_r+0x3c>
   89d42:	2d2b      	cmp	r5, #43	; 0x2b
   89d44:	bf04      	itt	eq
   89d46:	4624      	moveq	r4, r4
   89d48:	f814 5b01 	ldrbeq.w	r5, [r4], #1
   89d4c:	2b00      	cmp	r3, #0
   89d4e:	d05c      	beq.n	89e0a <_strtol_r+0xfa>
   89d50:	2b10      	cmp	r3, #16
   89d52:	d107      	bne.n	89d64 <_strtol_r+0x54>
   89d54:	2d30      	cmp	r5, #48	; 0x30
   89d56:	d105      	bne.n	89d64 <_strtol_r+0x54>
   89d58:	7825      	ldrb	r5, [r4, #0]
   89d5a:	2d78      	cmp	r5, #120	; 0x78
   89d5c:	d14e      	bne.n	89dfc <_strtol_r+0xec>
   89d5e:	7865      	ldrb	r5, [r4, #1]
   89d60:	2310      	movs	r3, #16
   89d62:	3402      	adds	r4, #2
   89d64:	2f00      	cmp	r7, #0
   89d66:	bf0c      	ite	eq
   89d68:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   89d6c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   89d70:	fbb0 faf3 	udiv	sl, r0, r3
   89d74:	2600      	movs	r6, #0
   89d76:	fb03 081a 	mls	r8, r3, sl, r0
   89d7a:	4630      	mov	r0, r6
   89d7c:	eb09 0c05 	add.w	ip, r9, r5
   89d80:	f89c c001 	ldrb.w	ip, [ip, #1]
   89d84:	f00c 0b04 	and.w	fp, ip, #4
   89d88:	fa5f fb8b 	uxtb.w	fp, fp
   89d8c:	f1bb 0f00 	cmp.w	fp, #0
   89d90:	d001      	beq.n	89d96 <_strtol_r+0x86>
   89d92:	3d30      	subs	r5, #48	; 0x30
   89d94:	e00b      	b.n	89dae <_strtol_r+0x9e>
   89d96:	f01c 0c03 	ands.w	ip, ip, #3
   89d9a:	d01b      	beq.n	89dd4 <_strtol_r+0xc4>
   89d9c:	f1bc 0f01 	cmp.w	ip, #1
   89da0:	bf14      	ite	ne
   89da2:	f04f 0c57 	movne.w	ip, #87	; 0x57
   89da6:	f04f 0c37 	moveq.w	ip, #55	; 0x37
   89daa:	ebcc 0505 	rsb	r5, ip, r5
   89dae:	429d      	cmp	r5, r3
   89db0:	da10      	bge.n	89dd4 <_strtol_r+0xc4>
   89db2:	f1b6 3fff 	cmp.w	r6, #4294967295
   89db6:	d00a      	beq.n	89dce <_strtol_r+0xbe>
   89db8:	4550      	cmp	r0, sl
   89dba:	d806      	bhi.n	89dca <_strtol_r+0xba>
   89dbc:	d101      	bne.n	89dc2 <_strtol_r+0xb2>
   89dbe:	4545      	cmp	r5, r8
   89dc0:	dc03      	bgt.n	89dca <_strtol_r+0xba>
   89dc2:	fb03 5000 	mla	r0, r3, r0, r5
   89dc6:	2601      	movs	r6, #1
   89dc8:	e001      	b.n	89dce <_strtol_r+0xbe>
   89dca:	f04f 36ff 	mov.w	r6, #4294967295
   89dce:	f814 5b01 	ldrb.w	r5, [r4], #1
   89dd2:	e7d3      	b.n	89d7c <_strtol_r+0x6c>
   89dd4:	1c73      	adds	r3, r6, #1
   89dd6:	d10a      	bne.n	89dee <_strtol_r+0xde>
   89dd8:	2f00      	cmp	r7, #0
   89dda:	9901      	ldr	r1, [sp, #4]
   89ddc:	bf0c      	ite	eq
   89dde:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   89de2:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   89de6:	2322      	movs	r3, #34	; 0x22
   89de8:	600b      	str	r3, [r1, #0]
   89dea:	b922      	cbnz	r2, 89df6 <_strtol_r+0xe6>
   89dec:	e011      	b.n	89e12 <_strtol_r+0x102>
   89dee:	b107      	cbz	r7, 89df2 <_strtol_r+0xe2>
   89df0:	4240      	negs	r0, r0
   89df2:	b172      	cbz	r2, 89e12 <_strtol_r+0x102>
   89df4:	b106      	cbz	r6, 89df8 <_strtol_r+0xe8>
   89df6:	1e61      	subs	r1, r4, #1
   89df8:	6011      	str	r1, [r2, #0]
   89dfa:	e00a      	b.n	89e12 <_strtol_r+0x102>
   89dfc:	2d58      	cmp	r5, #88	; 0x58
   89dfe:	d0ae      	beq.n	89d5e <_strtol_r+0x4e>
   89e00:	2530      	movs	r5, #48	; 0x30
   89e02:	2b00      	cmp	r3, #0
   89e04:	d1ae      	bne.n	89d64 <_strtol_r+0x54>
   89e06:	2308      	movs	r3, #8
   89e08:	e7ac      	b.n	89d64 <_strtol_r+0x54>
   89e0a:	2d30      	cmp	r5, #48	; 0x30
   89e0c:	d0a4      	beq.n	89d58 <_strtol_r+0x48>
   89e0e:	230a      	movs	r3, #10
   89e10:	e7a8      	b.n	89d64 <_strtol_r+0x54>
   89e12:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89e16:	bf00      	nop
   89e18:	20070298 	.word	0x20070298

00089e1c <strtol>:
   89e1c:	b530      	push	{r4, r5, lr}
   89e1e:	4613      	mov	r3, r2
   89e20:	4a04      	ldr	r2, [pc, #16]	; (89e34 <strtol+0x18>)
   89e22:	4605      	mov	r5, r0
   89e24:	460c      	mov	r4, r1
   89e26:	6810      	ldr	r0, [r2, #0]
   89e28:	4629      	mov	r1, r5
   89e2a:	4622      	mov	r2, r4
   89e2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   89e30:	f7ff bf6e 	b.w	89d10 <_strtol_r>
   89e34:	200702a0 	.word	0x200702a0

00089e38 <_svfprintf_r>:
   89e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89e3c:	461e      	mov	r6, r3
   89e3e:	898b      	ldrh	r3, [r1, #12]
   89e40:	4689      	mov	r9, r1
   89e42:	f003 0180 	and.w	r1, r3, #128	; 0x80
   89e46:	4614      	mov	r4, r2
   89e48:	b20a      	sxth	r2, r1
   89e4a:	b0a9      	sub	sp, #164	; 0xa4
   89e4c:	4683      	mov	fp, r0
   89e4e:	b19a      	cbz	r2, 89e78 <_svfprintf_r+0x40>
   89e50:	f8d9 3010 	ldr.w	r3, [r9, #16]
   89e54:	b983      	cbnz	r3, 89e78 <_svfprintf_r+0x40>
   89e56:	2140      	movs	r1, #64	; 0x40
   89e58:	f001 f87e 	bl	8af58 <_malloc_r>
   89e5c:	f8c9 0000 	str.w	r0, [r9]
   89e60:	f8c9 0010 	str.w	r0, [r9, #16]
   89e64:	b928      	cbnz	r0, 89e72 <_svfprintf_r+0x3a>
   89e66:	220c      	movs	r2, #12
   89e68:	f8cb 2000 	str.w	r2, [fp]
   89e6c:	f04f 30ff 	mov.w	r0, #4294967295
   89e70:	e3da      	b.n	8a628 <_svfprintf_r+0x7f0>
   89e72:	2040      	movs	r0, #64	; 0x40
   89e74:	f8c9 0014 	str.w	r0, [r9, #20]
   89e78:	2100      	movs	r1, #0
   89e7a:	ad18      	add	r5, sp, #96	; 0x60
   89e7c:	950b      	str	r5, [sp, #44]	; 0x2c
   89e7e:	910d      	str	r1, [sp, #52]	; 0x34
   89e80:	910c      	str	r1, [sp, #48]	; 0x30
   89e82:	9401      	str	r4, [sp, #4]
   89e84:	9105      	str	r1, [sp, #20]
   89e86:	9104      	str	r1, [sp, #16]
   89e88:	46a8      	mov	r8, r5
   89e8a:	9b01      	ldr	r3, [sp, #4]
   89e8c:	461c      	mov	r4, r3
   89e8e:	f813 2b01 	ldrb.w	r2, [r3], #1
   89e92:	b91a      	cbnz	r2, 89e9c <_svfprintf_r+0x64>
   89e94:	9801      	ldr	r0, [sp, #4]
   89e96:	1a25      	subs	r5, r4, r0
   89e98:	d103      	bne.n	89ea2 <_svfprintf_r+0x6a>
   89e9a:	e01d      	b.n	89ed8 <_svfprintf_r+0xa0>
   89e9c:	2a25      	cmp	r2, #37	; 0x25
   89e9e:	d1f5      	bne.n	89e8c <_svfprintf_r+0x54>
   89ea0:	e7f8      	b.n	89e94 <_svfprintf_r+0x5c>
   89ea2:	9a01      	ldr	r2, [sp, #4]
   89ea4:	990d      	ldr	r1, [sp, #52]	; 0x34
   89ea6:	e888 0024 	stmia.w	r8, {r2, r5}
   89eaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89eac:	194b      	adds	r3, r1, r5
   89eae:	1c50      	adds	r0, r2, #1
   89eb0:	2807      	cmp	r0, #7
   89eb2:	930d      	str	r3, [sp, #52]	; 0x34
   89eb4:	900c      	str	r0, [sp, #48]	; 0x30
   89eb6:	dc02      	bgt.n	89ebe <_svfprintf_r+0x86>
   89eb8:	f108 0808 	add.w	r8, r8, #8
   89ebc:	e009      	b.n	89ed2 <_svfprintf_r+0x9a>
   89ebe:	4658      	mov	r0, fp
   89ec0:	4649      	mov	r1, r9
   89ec2:	aa0b      	add	r2, sp, #44	; 0x2c
   89ec4:	f002 f820 	bl	8bf08 <__ssprint_r>
   89ec8:	2800      	cmp	r0, #0
   89eca:	f040 83a2 	bne.w	8a612 <_svfprintf_r+0x7da>
   89ece:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   89ed2:	9904      	ldr	r1, [sp, #16]
   89ed4:	194b      	adds	r3, r1, r5
   89ed6:	9304      	str	r3, [sp, #16]
   89ed8:	7822      	ldrb	r2, [r4, #0]
   89eda:	2a00      	cmp	r2, #0
   89edc:	f000 8392 	beq.w	8a604 <_svfprintf_r+0x7cc>
   89ee0:	2200      	movs	r2, #0
   89ee2:	3401      	adds	r4, #1
   89ee4:	9401      	str	r4, [sp, #4]
   89ee6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   89eea:	f04f 3cff 	mov.w	ip, #4294967295
   89eee:	9203      	str	r2, [sp, #12]
   89ef0:	4617      	mov	r7, r2
   89ef2:	9801      	ldr	r0, [sp, #4]
   89ef4:	f810 3b01 	ldrb.w	r3, [r0], #1
   89ef8:	9001      	str	r0, [sp, #4]
   89efa:	2b63      	cmp	r3, #99	; 0x63
   89efc:	f000 80b3 	beq.w	8a066 <_svfprintf_r+0x22e>
   89f00:	dc33      	bgt.n	89f6a <_svfprintf_r+0x132>
   89f02:	2b39      	cmp	r3, #57	; 0x39
   89f04:	dc1a      	bgt.n	89f3c <_svfprintf_r+0x104>
   89f06:	2b31      	cmp	r3, #49	; 0x31
   89f08:	f280 8091 	bge.w	8a02e <_svfprintf_r+0x1f6>
   89f0c:	2b2b      	cmp	r3, #43	; 0x2b
   89f0e:	d101      	bne.n	89f14 <_svfprintf_r+0xdc>
   89f10:	461a      	mov	r2, r3
   89f12:	e7ee      	b.n	89ef2 <_svfprintf_r+0xba>
   89f14:	dc0a      	bgt.n	89f2c <_svfprintf_r+0xf4>
   89f16:	2b23      	cmp	r3, #35	; 0x23
   89f18:	d055      	beq.n	89fc6 <_svfprintf_r+0x18e>
   89f1a:	2b2a      	cmp	r3, #42	; 0x2a
   89f1c:	d056      	beq.n	89fcc <_svfprintf_r+0x194>
   89f1e:	2b20      	cmp	r3, #32
   89f20:	f040 81f5 	bne.w	8a30e <_svfprintf_r+0x4d6>
   89f24:	2a00      	cmp	r2, #0
   89f26:	bf08      	it	eq
   89f28:	2220      	moveq	r2, #32
   89f2a:	e7e2      	b.n	89ef2 <_svfprintf_r+0xba>
   89f2c:	2b2e      	cmp	r3, #46	; 0x2e
   89f2e:	d058      	beq.n	89fe2 <_svfprintf_r+0x1aa>
   89f30:	2b30      	cmp	r3, #48	; 0x30
   89f32:	d079      	beq.n	8a028 <_svfprintf_r+0x1f0>
   89f34:	2b2d      	cmp	r3, #45	; 0x2d
   89f36:	f040 81ea 	bne.w	8a30e <_svfprintf_r+0x4d6>
   89f3a:	e04f      	b.n	89fdc <_svfprintf_r+0x1a4>
   89f3c:	2b4f      	cmp	r3, #79	; 0x4f
   89f3e:	f000 80de 	beq.w	8a0fe <_svfprintf_r+0x2c6>
   89f42:	dc07      	bgt.n	89f54 <_svfprintf_r+0x11c>
   89f44:	2b44      	cmp	r3, #68	; 0x44
   89f46:	f040 81e2 	bne.w	8a30e <_svfprintf_r+0x4d6>
   89f4a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   89f4e:	f047 0710 	orr.w	r7, r7, #16
   89f52:	e090      	b.n	8a076 <_svfprintf_r+0x23e>
   89f54:	2b55      	cmp	r3, #85	; 0x55
   89f56:	f000 811f 	beq.w	8a198 <_svfprintf_r+0x360>
   89f5a:	2b58      	cmp	r3, #88	; 0x58
   89f5c:	f040 81d7 	bne.w	8a30e <_svfprintf_r+0x4d6>
   89f60:	4dae      	ldr	r5, [pc, #696]	; (8a21c <_svfprintf_r+0x3e4>)
   89f62:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   89f66:	9505      	str	r5, [sp, #20]
   89f68:	e130      	b.n	8a1cc <_svfprintf_r+0x394>
   89f6a:	2b6f      	cmp	r3, #111	; 0x6f
   89f6c:	f000 80c9 	beq.w	8a102 <_svfprintf_r+0x2ca>
   89f70:	dc10      	bgt.n	89f94 <_svfprintf_r+0x15c>
   89f72:	2b69      	cmp	r3, #105	; 0x69
   89f74:	d024      	beq.n	89fc0 <_svfprintf_r+0x188>
   89f76:	dc07      	bgt.n	89f88 <_svfprintf_r+0x150>
   89f78:	2b64      	cmp	r3, #100	; 0x64
   89f7a:	d021      	beq.n	89fc0 <_svfprintf_r+0x188>
   89f7c:	2b68      	cmp	r3, #104	; 0x68
   89f7e:	f040 81c6 	bne.w	8a30e <_svfprintf_r+0x4d6>
   89f82:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   89f86:	e7b4      	b.n	89ef2 <_svfprintf_r+0xba>
   89f88:	2b6c      	cmp	r3, #108	; 0x6c
   89f8a:	d05f      	beq.n	8a04c <_svfprintf_r+0x214>
   89f8c:	2b6e      	cmp	r3, #110	; 0x6e
   89f8e:	f040 81be 	bne.w	8a30e <_svfprintf_r+0x4d6>
   89f92:	e096      	b.n	8a0c2 <_svfprintf_r+0x28a>
   89f94:	2b73      	cmp	r3, #115	; 0x73
   89f96:	f000 80df 	beq.w	8a158 <_svfprintf_r+0x320>
   89f9a:	dc06      	bgt.n	89faa <_svfprintf_r+0x172>
   89f9c:	2b70      	cmp	r3, #112	; 0x70
   89f9e:	f000 80cd 	beq.w	8a13c <_svfprintf_r+0x304>
   89fa2:	2b71      	cmp	r3, #113	; 0x71
   89fa4:	f040 81b3 	bne.w	8a30e <_svfprintf_r+0x4d6>
   89fa8:	e05a      	b.n	8a060 <_svfprintf_r+0x228>
   89faa:	2b75      	cmp	r3, #117	; 0x75
   89fac:	f000 80f6 	beq.w	8a19c <_svfprintf_r+0x364>
   89fb0:	2b78      	cmp	r3, #120	; 0x78
   89fb2:	f040 81ac 	bne.w	8a30e <_svfprintf_r+0x4d6>
   89fb6:	4d9a      	ldr	r5, [pc, #616]	; (8a220 <_svfprintf_r+0x3e8>)
   89fb8:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   89fbc:	9505      	str	r5, [sp, #20]
   89fbe:	e105      	b.n	8a1cc <_svfprintf_r+0x394>
   89fc0:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   89fc4:	e057      	b.n	8a076 <_svfprintf_r+0x23e>
   89fc6:	f047 0701 	orr.w	r7, r7, #1
   89fca:	e792      	b.n	89ef2 <_svfprintf_r+0xba>
   89fcc:	1d33      	adds	r3, r6, #4
   89fce:	6836      	ldr	r6, [r6, #0]
   89fd0:	2e00      	cmp	r6, #0
   89fd2:	9603      	str	r6, [sp, #12]
   89fd4:	da15      	bge.n	8a002 <_svfprintf_r+0x1ca>
   89fd6:	4270      	negs	r0, r6
   89fd8:	9003      	str	r0, [sp, #12]
   89fda:	461e      	mov	r6, r3
   89fdc:	f047 0704 	orr.w	r7, r7, #4
   89fe0:	e787      	b.n	89ef2 <_svfprintf_r+0xba>
   89fe2:	9901      	ldr	r1, [sp, #4]
   89fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
   89fe8:	2b2a      	cmp	r3, #42	; 0x2a
   89fea:	9101      	str	r1, [sp, #4]
   89fec:	d10b      	bne.n	8a006 <_svfprintf_r+0x1ce>
   89fee:	f8d6 c000 	ldr.w	ip, [r6]
   89ff2:	1d33      	adds	r3, r6, #4
   89ff4:	f1bc 0f00 	cmp.w	ip, #0
   89ff8:	da03      	bge.n	8a002 <_svfprintf_r+0x1ca>
   89ffa:	461e      	mov	r6, r3
   89ffc:	f04f 3cff 	mov.w	ip, #4294967295
   8a000:	e777      	b.n	89ef2 <_svfprintf_r+0xba>
   8a002:	461e      	mov	r6, r3
   8a004:	e775      	b.n	89ef2 <_svfprintf_r+0xba>
   8a006:	f04f 0c00 	mov.w	ip, #0
   8a00a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8a00e:	2809      	cmp	r0, #9
   8a010:	d807      	bhi.n	8a022 <_svfprintf_r+0x1ea>
   8a012:	9901      	ldr	r1, [sp, #4]
   8a014:	230a      	movs	r3, #10
   8a016:	fb03 0c0c 	mla	ip, r3, ip, r0
   8a01a:	f811 3b01 	ldrb.w	r3, [r1], #1
   8a01e:	9101      	str	r1, [sp, #4]
   8a020:	e7f3      	b.n	8a00a <_svfprintf_r+0x1d2>
   8a022:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   8a026:	e768      	b.n	89efa <_svfprintf_r+0xc2>
   8a028:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8a02c:	e761      	b.n	89ef2 <_svfprintf_r+0xba>
   8a02e:	9801      	ldr	r0, [sp, #4]
   8a030:	2100      	movs	r1, #0
   8a032:	3b30      	subs	r3, #48	; 0x30
   8a034:	240a      	movs	r4, #10
   8a036:	fb04 3101 	mla	r1, r4, r1, r3
   8a03a:	f810 3b01 	ldrb.w	r3, [r0], #1
   8a03e:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   8a042:	2c09      	cmp	r4, #9
   8a044:	9001      	str	r0, [sp, #4]
   8a046:	d9f4      	bls.n	8a032 <_svfprintf_r+0x1fa>
   8a048:	9103      	str	r1, [sp, #12]
   8a04a:	e756      	b.n	89efa <_svfprintf_r+0xc2>
   8a04c:	9901      	ldr	r1, [sp, #4]
   8a04e:	780b      	ldrb	r3, [r1, #0]
   8a050:	2b6c      	cmp	r3, #108	; 0x6c
   8a052:	d102      	bne.n	8a05a <_svfprintf_r+0x222>
   8a054:	1c48      	adds	r0, r1, #1
   8a056:	9001      	str	r0, [sp, #4]
   8a058:	e002      	b.n	8a060 <_svfprintf_r+0x228>
   8a05a:	f047 0710 	orr.w	r7, r7, #16
   8a05e:	e748      	b.n	89ef2 <_svfprintf_r+0xba>
   8a060:	f047 0720 	orr.w	r7, r7, #32
   8a064:	e745      	b.n	89ef2 <_svfprintf_r+0xba>
   8a066:	6832      	ldr	r2, [r6, #0]
   8a068:	2500      	movs	r5, #0
   8a06a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   8a06e:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8a072:	3604      	adds	r6, #4
   8a074:	e155      	b.n	8a322 <_svfprintf_r+0x4ea>
   8a076:	06ba      	lsls	r2, r7, #26
   8a078:	d507      	bpl.n	8a08a <_svfprintf_r+0x252>
   8a07a:	3607      	adds	r6, #7
   8a07c:	f026 0507 	bic.w	r5, r6, #7
   8a080:	f105 0608 	add.w	r6, r5, #8
   8a084:	e9d5 4500 	ldrd	r4, r5, [r5]
   8a088:	e00f      	b.n	8a0aa <_svfprintf_r+0x272>
   8a08a:	f017 0f10 	tst.w	r7, #16
   8a08e:	f106 0104 	add.w	r1, r6, #4
   8a092:	d001      	beq.n	8a098 <_svfprintf_r+0x260>
   8a094:	6832      	ldr	r2, [r6, #0]
   8a096:	e005      	b.n	8a0a4 <_svfprintf_r+0x26c>
   8a098:	f017 0f40 	tst.w	r7, #64	; 0x40
   8a09c:	6832      	ldr	r2, [r6, #0]
   8a09e:	d001      	beq.n	8a0a4 <_svfprintf_r+0x26c>
   8a0a0:	b214      	sxth	r4, r2
   8a0a2:	e000      	b.n	8a0a6 <_svfprintf_r+0x26e>
   8a0a4:	4614      	mov	r4, r2
   8a0a6:	17e5      	asrs	r5, r4, #31
   8a0a8:	460e      	mov	r6, r1
   8a0aa:	2c00      	cmp	r4, #0
   8a0ac:	f175 0200 	sbcs.w	r2, r5, #0
   8a0b0:	f280 80b8 	bge.w	8a224 <_svfprintf_r+0x3ec>
   8a0b4:	232d      	movs	r3, #45	; 0x2d
   8a0b6:	4264      	negs	r4, r4
   8a0b8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8a0bc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   8a0c0:	e0b0      	b.n	8a224 <_svfprintf_r+0x3ec>
   8a0c2:	f017 0f20 	tst.w	r7, #32
   8a0c6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8a0ca:	f106 0204 	add.w	r2, r6, #4
   8a0ce:	d005      	beq.n	8a0dc <_svfprintf_r+0x2a4>
   8a0d0:	9c04      	ldr	r4, [sp, #16]
   8a0d2:	6835      	ldr	r5, [r6, #0]
   8a0d4:	17e0      	asrs	r0, r4, #31
   8a0d6:	602c      	str	r4, [r5, #0]
   8a0d8:	6068      	str	r0, [r5, #4]
   8a0da:	e004      	b.n	8a0e6 <_svfprintf_r+0x2ae>
   8a0dc:	06fb      	lsls	r3, r7, #27
   8a0de:	d504      	bpl.n	8a0ea <_svfprintf_r+0x2b2>
   8a0e0:	6833      	ldr	r3, [r6, #0]
   8a0e2:	9904      	ldr	r1, [sp, #16]
   8a0e4:	6019      	str	r1, [r3, #0]
   8a0e6:	4616      	mov	r6, r2
   8a0e8:	e6cf      	b.n	89e8a <_svfprintf_r+0x52>
   8a0ea:	6830      	ldr	r0, [r6, #0]
   8a0ec:	9c04      	ldr	r4, [sp, #16]
   8a0ee:	f017 0f40 	tst.w	r7, #64	; 0x40
   8a0f2:	f106 0604 	add.w	r6, r6, #4
   8a0f6:	bf14      	ite	ne
   8a0f8:	8004      	strhne	r4, [r0, #0]
   8a0fa:	6004      	streq	r4, [r0, #0]
   8a0fc:	e6c5      	b.n	89e8a <_svfprintf_r+0x52>
   8a0fe:	f047 0710 	orr.w	r7, r7, #16
   8a102:	f017 0020 	ands.w	r0, r7, #32
   8a106:	d008      	beq.n	8a11a <_svfprintf_r+0x2e2>
   8a108:	1df3      	adds	r3, r6, #7
   8a10a:	f023 0507 	bic.w	r5, r3, #7
   8a10e:	f105 0608 	add.w	r6, r5, #8
   8a112:	e9d5 4500 	ldrd	r4, r5, [r5]
   8a116:	2000      	movs	r0, #0
   8a118:	e07c      	b.n	8a214 <_svfprintf_r+0x3dc>
   8a11a:	f017 0110 	ands.w	r1, r7, #16
   8a11e:	f106 0204 	add.w	r2, r6, #4
   8a122:	d106      	bne.n	8a132 <_svfprintf_r+0x2fa>
   8a124:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   8a128:	d003      	beq.n	8a132 <_svfprintf_r+0x2fa>
   8a12a:	8834      	ldrh	r4, [r6, #0]
   8a12c:	2500      	movs	r5, #0
   8a12e:	4616      	mov	r6, r2
   8a130:	e7f1      	b.n	8a116 <_svfprintf_r+0x2de>
   8a132:	6836      	ldr	r6, [r6, #0]
   8a134:	2500      	movs	r5, #0
   8a136:	4634      	mov	r4, r6
   8a138:	4616      	mov	r6, r2
   8a13a:	e06b      	b.n	8a214 <_svfprintf_r+0x3dc>
   8a13c:	4b38      	ldr	r3, [pc, #224]	; (8a220 <_svfprintf_r+0x3e8>)
   8a13e:	2130      	movs	r1, #48	; 0x30
   8a140:	2278      	movs	r2, #120	; 0x78
   8a142:	6834      	ldr	r4, [r6, #0]
   8a144:	2500      	movs	r5, #0
   8a146:	f047 0702 	orr.w	r7, r7, #2
   8a14a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   8a14e:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   8a152:	3604      	adds	r6, #4
   8a154:	9305      	str	r3, [sp, #20]
   8a156:	e05c      	b.n	8a212 <_svfprintf_r+0x3da>
   8a158:	4631      	mov	r1, r6
   8a15a:	2500      	movs	r5, #0
   8a15c:	f8d1 a000 	ldr.w	sl, [r1]
   8a160:	3604      	adds	r6, #4
   8a162:	45ac      	cmp	ip, r5
   8a164:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8a168:	4650      	mov	r0, sl
   8a16a:	db11      	blt.n	8a190 <_svfprintf_r+0x358>
   8a16c:	4662      	mov	r2, ip
   8a16e:	4629      	mov	r1, r5
   8a170:	f8cd c000 	str.w	ip, [sp]
   8a174:	f001 f8f2 	bl	8b35c <memchr>
   8a178:	f8dd c000 	ldr.w	ip, [sp]
   8a17c:	2800      	cmp	r0, #0
   8a17e:	f000 80d4 	beq.w	8a32a <_svfprintf_r+0x4f2>
   8a182:	ebca 0400 	rsb	r4, sl, r0
   8a186:	4564      	cmp	r4, ip
   8a188:	f340 80d1 	ble.w	8a32e <_svfprintf_r+0x4f6>
   8a18c:	4664      	mov	r4, ip
   8a18e:	e0ce      	b.n	8a32e <_svfprintf_r+0x4f6>
   8a190:	f7fe ff92 	bl	890b8 <strlen>
   8a194:	4604      	mov	r4, r0
   8a196:	e0ca      	b.n	8a32e <_svfprintf_r+0x4f6>
   8a198:	f047 0710 	orr.w	r7, r7, #16
   8a19c:	06bd      	lsls	r5, r7, #26
   8a19e:	d506      	bpl.n	8a1ae <_svfprintf_r+0x376>
   8a1a0:	1df0      	adds	r0, r6, #7
   8a1a2:	f020 0407 	bic.w	r4, r0, #7
   8a1a6:	f104 0608 	add.w	r6, r4, #8
   8a1aa:	cc30      	ldmia	r4, {r4, r5}
   8a1ac:	e00c      	b.n	8a1c8 <_svfprintf_r+0x390>
   8a1ae:	f017 0f10 	tst.w	r7, #16
   8a1b2:	f106 0304 	add.w	r3, r6, #4
   8a1b6:	d103      	bne.n	8a1c0 <_svfprintf_r+0x388>
   8a1b8:	067c      	lsls	r4, r7, #25
   8a1ba:	d501      	bpl.n	8a1c0 <_svfprintf_r+0x388>
   8a1bc:	8834      	ldrh	r4, [r6, #0]
   8a1be:	e001      	b.n	8a1c4 <_svfprintf_r+0x38c>
   8a1c0:	6835      	ldr	r5, [r6, #0]
   8a1c2:	462c      	mov	r4, r5
   8a1c4:	2500      	movs	r5, #0
   8a1c6:	461e      	mov	r6, r3
   8a1c8:	2001      	movs	r0, #1
   8a1ca:	e023      	b.n	8a214 <_svfprintf_r+0x3dc>
   8a1cc:	06b8      	lsls	r0, r7, #26
   8a1ce:	d507      	bpl.n	8a1e0 <_svfprintf_r+0x3a8>
   8a1d0:	1df4      	adds	r4, r6, #7
   8a1d2:	f024 0107 	bic.w	r1, r4, #7
   8a1d6:	f101 0608 	add.w	r6, r1, #8
   8a1da:	e9d1 4500 	ldrd	r4, r5, [r1]
   8a1de:	e00c      	b.n	8a1fa <_svfprintf_r+0x3c2>
   8a1e0:	f017 0f10 	tst.w	r7, #16
   8a1e4:	f106 0004 	add.w	r0, r6, #4
   8a1e8:	d103      	bne.n	8a1f2 <_svfprintf_r+0x3ba>
   8a1ea:	0679      	lsls	r1, r7, #25
   8a1ec:	d501      	bpl.n	8a1f2 <_svfprintf_r+0x3ba>
   8a1ee:	8834      	ldrh	r4, [r6, #0]
   8a1f0:	e001      	b.n	8a1f6 <_svfprintf_r+0x3be>
   8a1f2:	6836      	ldr	r6, [r6, #0]
   8a1f4:	4634      	mov	r4, r6
   8a1f6:	2500      	movs	r5, #0
   8a1f8:	4606      	mov	r6, r0
   8a1fa:	07fa      	lsls	r2, r7, #31
   8a1fc:	d509      	bpl.n	8a212 <_svfprintf_r+0x3da>
   8a1fe:	ea54 0205 	orrs.w	r2, r4, r5
   8a202:	d006      	beq.n	8a212 <_svfprintf_r+0x3da>
   8a204:	2230      	movs	r2, #48	; 0x30
   8a206:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   8a20a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   8a20e:	f047 0702 	orr.w	r7, r7, #2
   8a212:	2002      	movs	r0, #2
   8a214:	2100      	movs	r1, #0
   8a216:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   8a21a:	e004      	b.n	8a226 <_svfprintf_r+0x3ee>
   8a21c:	0008dc6c 	.word	0x0008dc6c
   8a220:	0008dc7d 	.word	0x0008dc7d
   8a224:	2001      	movs	r0, #1
   8a226:	f1bc 0f00 	cmp.w	ip, #0
   8a22a:	bfa8      	it	ge
   8a22c:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   8a230:	ea54 0105 	orrs.w	r1, r4, r5
   8a234:	d102      	bne.n	8a23c <_svfprintf_r+0x404>
   8a236:	f1bc 0f00 	cmp.w	ip, #0
   8a23a:	d058      	beq.n	8a2ee <_svfprintf_r+0x4b6>
   8a23c:	2801      	cmp	r0, #1
   8a23e:	d01d      	beq.n	8a27c <_svfprintf_r+0x444>
   8a240:	2802      	cmp	r0, #2
   8a242:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8a246:	d041      	beq.n	8a2cc <_svfprintf_r+0x494>
   8a248:	f004 0207 	and.w	r2, r4, #7
   8a24c:	08e4      	lsrs	r4, r4, #3
   8a24e:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   8a252:	08e9      	lsrs	r1, r5, #3
   8a254:	4604      	mov	r4, r0
   8a256:	460d      	mov	r5, r1
   8a258:	3230      	adds	r2, #48	; 0x30
   8a25a:	ea54 0105 	orrs.w	r1, r4, r5
   8a25e:	469a      	mov	sl, r3
   8a260:	701a      	strb	r2, [r3, #0]
   8a262:	f103 33ff 	add.w	r3, r3, #4294967295
   8a266:	d1ef      	bne.n	8a248 <_svfprintf_r+0x410>
   8a268:	07f8      	lsls	r0, r7, #31
   8a26a:	4655      	mov	r5, sl
   8a26c:	d54a      	bpl.n	8a304 <_svfprintf_r+0x4cc>
   8a26e:	2a30      	cmp	r2, #48	; 0x30
   8a270:	d048      	beq.n	8a304 <_svfprintf_r+0x4cc>
   8a272:	2230      	movs	r2, #48	; 0x30
   8a274:	469a      	mov	sl, r3
   8a276:	f805 2c01 	strb.w	r2, [r5, #-1]
   8a27a:	e043      	b.n	8a304 <_svfprintf_r+0x4cc>
   8a27c:	2d00      	cmp	r5, #0
   8a27e:	bf08      	it	eq
   8a280:	2c0a      	cmpeq	r4, #10
   8a282:	d203      	bcs.n	8a28c <_svfprintf_r+0x454>
   8a284:	3430      	adds	r4, #48	; 0x30
   8a286:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   8a28a:	e036      	b.n	8a2fa <_svfprintf_r+0x4c2>
   8a28c:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8a290:	9302      	str	r3, [sp, #8]
   8a292:	4620      	mov	r0, r4
   8a294:	4629      	mov	r1, r5
   8a296:	220a      	movs	r2, #10
   8a298:	2300      	movs	r3, #0
   8a29a:	f8cd c000 	str.w	ip, [sp]
   8a29e:	f002 fd2b 	bl	8ccf8 <__aeabi_uldivmod>
   8a2a2:	9802      	ldr	r0, [sp, #8]
   8a2a4:	3230      	adds	r2, #48	; 0x30
   8a2a6:	f800 2901 	strb.w	r2, [r0], #-1
   8a2aa:	4629      	mov	r1, r5
   8a2ac:	220a      	movs	r2, #10
   8a2ae:	2300      	movs	r3, #0
   8a2b0:	f8dd a008 	ldr.w	sl, [sp, #8]
   8a2b4:	9002      	str	r0, [sp, #8]
   8a2b6:	4620      	mov	r0, r4
   8a2b8:	f002 fd1e 	bl	8ccf8 <__aeabi_uldivmod>
   8a2bc:	4604      	mov	r4, r0
   8a2be:	460d      	mov	r5, r1
   8a2c0:	ea54 0105 	orrs.w	r1, r4, r5
   8a2c4:	f8dd c000 	ldr.w	ip, [sp]
   8a2c8:	d1e3      	bne.n	8a292 <_svfprintf_r+0x45a>
   8a2ca:	e01b      	b.n	8a304 <_svfprintf_r+0x4cc>
   8a2cc:	9905      	ldr	r1, [sp, #20]
   8a2ce:	f004 000f 	and.w	r0, r4, #15
   8a2d2:	0924      	lsrs	r4, r4, #4
   8a2d4:	5c0a      	ldrb	r2, [r1, r0]
   8a2d6:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   8a2da:	0929      	lsrs	r1, r5, #4
   8a2dc:	4604      	mov	r4, r0
   8a2de:	460d      	mov	r5, r1
   8a2e0:	469a      	mov	sl, r3
   8a2e2:	f803 2901 	strb.w	r2, [r3], #-1
   8a2e6:	ea54 0205 	orrs.w	r2, r4, r5
   8a2ea:	d1ef      	bne.n	8a2cc <_svfprintf_r+0x494>
   8a2ec:	e00a      	b.n	8a304 <_svfprintf_r+0x4cc>
   8a2ee:	b938      	cbnz	r0, 8a300 <_svfprintf_r+0x4c8>
   8a2f0:	07f9      	lsls	r1, r7, #31
   8a2f2:	d505      	bpl.n	8a300 <_svfprintf_r+0x4c8>
   8a2f4:	2030      	movs	r0, #48	; 0x30
   8a2f6:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   8a2fa:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   8a2fe:	e001      	b.n	8a304 <_svfprintf_r+0x4cc>
   8a300:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   8a304:	ad18      	add	r5, sp, #96	; 0x60
   8a306:	ebca 0405 	rsb	r4, sl, r5
   8a30a:	4665      	mov	r5, ip
   8a30c:	e00f      	b.n	8a32e <_svfprintf_r+0x4f6>
   8a30e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8a312:	2b00      	cmp	r3, #0
   8a314:	f000 8176 	beq.w	8a604 <_svfprintf_r+0x7cc>
   8a318:	2500      	movs	r5, #0
   8a31a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   8a31e:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8a322:	2401      	movs	r4, #1
   8a324:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   8a328:	e001      	b.n	8a32e <_svfprintf_r+0x4f6>
   8a32a:	4664      	mov	r4, ip
   8a32c:	4605      	mov	r5, r0
   8a32e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8a332:	42ac      	cmp	r4, r5
   8a334:	bfac      	ite	ge
   8a336:	4621      	movge	r1, r4
   8a338:	4629      	movlt	r1, r5
   8a33a:	9102      	str	r1, [sp, #8]
   8a33c:	b113      	cbz	r3, 8a344 <_svfprintf_r+0x50c>
   8a33e:	9802      	ldr	r0, [sp, #8]
   8a340:	1c42      	adds	r2, r0, #1
   8a342:	9202      	str	r2, [sp, #8]
   8a344:	f017 0102 	ands.w	r1, r7, #2
   8a348:	9106      	str	r1, [sp, #24]
   8a34a:	d002      	beq.n	8a352 <_svfprintf_r+0x51a>
   8a34c:	9b02      	ldr	r3, [sp, #8]
   8a34e:	1c98      	adds	r0, r3, #2
   8a350:	9002      	str	r0, [sp, #8]
   8a352:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   8a356:	9207      	str	r2, [sp, #28]
   8a358:	d13c      	bne.n	8a3d4 <_svfprintf_r+0x59c>
   8a35a:	9903      	ldr	r1, [sp, #12]
   8a35c:	9b02      	ldr	r3, [sp, #8]
   8a35e:	1acb      	subs	r3, r1, r3
   8a360:	2b00      	cmp	r3, #0
   8a362:	dd37      	ble.n	8a3d4 <_svfprintf_r+0x59c>
   8a364:	48a5      	ldr	r0, [pc, #660]	; (8a5fc <_svfprintf_r+0x7c4>)
   8a366:	2b10      	cmp	r3, #16
   8a368:	f8c8 0000 	str.w	r0, [r8]
   8a36c:	dd1b      	ble.n	8a3a6 <_svfprintf_r+0x56e>
   8a36e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8a370:	2110      	movs	r1, #16
   8a372:	980d      	ldr	r0, [sp, #52]	; 0x34
   8a374:	f8c8 1004 	str.w	r1, [r8, #4]
   8a378:	1c51      	adds	r1, r2, #1
   8a37a:	3010      	adds	r0, #16
   8a37c:	2907      	cmp	r1, #7
   8a37e:	900d      	str	r0, [sp, #52]	; 0x34
   8a380:	910c      	str	r1, [sp, #48]	; 0x30
   8a382:	dc02      	bgt.n	8a38a <_svfprintf_r+0x552>
   8a384:	f108 0808 	add.w	r8, r8, #8
   8a388:	e00b      	b.n	8a3a2 <_svfprintf_r+0x56a>
   8a38a:	4658      	mov	r0, fp
   8a38c:	4649      	mov	r1, r9
   8a38e:	aa0b      	add	r2, sp, #44	; 0x2c
   8a390:	9300      	str	r3, [sp, #0]
   8a392:	f001 fdb9 	bl	8bf08 <__ssprint_r>
   8a396:	9b00      	ldr	r3, [sp, #0]
   8a398:	2800      	cmp	r0, #0
   8a39a:	f040 813a 	bne.w	8a612 <_svfprintf_r+0x7da>
   8a39e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8a3a2:	3b10      	subs	r3, #16
   8a3a4:	e7de      	b.n	8a364 <_svfprintf_r+0x52c>
   8a3a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8a3a8:	f8c8 3004 	str.w	r3, [r8, #4]
   8a3ac:	18d1      	adds	r1, r2, r3
   8a3ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a3b0:	910d      	str	r1, [sp, #52]	; 0x34
   8a3b2:	1c58      	adds	r0, r3, #1
   8a3b4:	2807      	cmp	r0, #7
   8a3b6:	900c      	str	r0, [sp, #48]	; 0x30
   8a3b8:	dc02      	bgt.n	8a3c0 <_svfprintf_r+0x588>
   8a3ba:	f108 0808 	add.w	r8, r8, #8
   8a3be:	e009      	b.n	8a3d4 <_svfprintf_r+0x59c>
   8a3c0:	4658      	mov	r0, fp
   8a3c2:	4649      	mov	r1, r9
   8a3c4:	aa0b      	add	r2, sp, #44	; 0x2c
   8a3c6:	f001 fd9f 	bl	8bf08 <__ssprint_r>
   8a3ca:	2800      	cmp	r0, #0
   8a3cc:	f040 8121 	bne.w	8a612 <_svfprintf_r+0x7da>
   8a3d0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8a3d4:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   8a3d8:	b1da      	cbz	r2, 8a412 <_svfprintf_r+0x5da>
   8a3da:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   8a3de:	f8c8 1000 	str.w	r1, [r8]
   8a3e2:	990c      	ldr	r1, [sp, #48]	; 0x30
   8a3e4:	2301      	movs	r3, #1
   8a3e6:	980d      	ldr	r0, [sp, #52]	; 0x34
   8a3e8:	f8c8 3004 	str.w	r3, [r8, #4]
   8a3ec:	1c4b      	adds	r3, r1, #1
   8a3ee:	1c42      	adds	r2, r0, #1
   8a3f0:	2b07      	cmp	r3, #7
   8a3f2:	920d      	str	r2, [sp, #52]	; 0x34
   8a3f4:	930c      	str	r3, [sp, #48]	; 0x30
   8a3f6:	dc02      	bgt.n	8a3fe <_svfprintf_r+0x5c6>
   8a3f8:	f108 0808 	add.w	r8, r8, #8
   8a3fc:	e009      	b.n	8a412 <_svfprintf_r+0x5da>
   8a3fe:	4658      	mov	r0, fp
   8a400:	4649      	mov	r1, r9
   8a402:	aa0b      	add	r2, sp, #44	; 0x2c
   8a404:	f001 fd80 	bl	8bf08 <__ssprint_r>
   8a408:	2800      	cmp	r0, #0
   8a40a:	f040 8102 	bne.w	8a612 <_svfprintf_r+0x7da>
   8a40e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8a412:	9806      	ldr	r0, [sp, #24]
   8a414:	b1d0      	cbz	r0, 8a44c <_svfprintf_r+0x614>
   8a416:	aa0a      	add	r2, sp, #40	; 0x28
   8a418:	f8c8 2000 	str.w	r2, [r8]
   8a41c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8a41e:	2102      	movs	r1, #2
   8a420:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a422:	f8c8 1004 	str.w	r1, [r8, #4]
   8a426:	1c51      	adds	r1, r2, #1
   8a428:	1c98      	adds	r0, r3, #2
   8a42a:	2907      	cmp	r1, #7
   8a42c:	900d      	str	r0, [sp, #52]	; 0x34
   8a42e:	910c      	str	r1, [sp, #48]	; 0x30
   8a430:	dc02      	bgt.n	8a438 <_svfprintf_r+0x600>
   8a432:	f108 0808 	add.w	r8, r8, #8
   8a436:	e009      	b.n	8a44c <_svfprintf_r+0x614>
   8a438:	4658      	mov	r0, fp
   8a43a:	4649      	mov	r1, r9
   8a43c:	aa0b      	add	r2, sp, #44	; 0x2c
   8a43e:	f001 fd63 	bl	8bf08 <__ssprint_r>
   8a442:	2800      	cmp	r0, #0
   8a444:	f040 80e5 	bne.w	8a612 <_svfprintf_r+0x7da>
   8a448:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8a44c:	9b07      	ldr	r3, [sp, #28]
   8a44e:	2b80      	cmp	r3, #128	; 0x80
   8a450:	d13c      	bne.n	8a4cc <_svfprintf_r+0x694>
   8a452:	9803      	ldr	r0, [sp, #12]
   8a454:	9a02      	ldr	r2, [sp, #8]
   8a456:	1a83      	subs	r3, r0, r2
   8a458:	2b00      	cmp	r3, #0
   8a45a:	dd37      	ble.n	8a4cc <_svfprintf_r+0x694>
   8a45c:	4968      	ldr	r1, [pc, #416]	; (8a600 <_svfprintf_r+0x7c8>)
   8a45e:	2b10      	cmp	r3, #16
   8a460:	f8c8 1000 	str.w	r1, [r8]
   8a464:	dd1b      	ble.n	8a49e <_svfprintf_r+0x666>
   8a466:	980c      	ldr	r0, [sp, #48]	; 0x30
   8a468:	2210      	movs	r2, #16
   8a46a:	990d      	ldr	r1, [sp, #52]	; 0x34
   8a46c:	f8c8 2004 	str.w	r2, [r8, #4]
   8a470:	1c42      	adds	r2, r0, #1
   8a472:	3110      	adds	r1, #16
   8a474:	2a07      	cmp	r2, #7
   8a476:	910d      	str	r1, [sp, #52]	; 0x34
   8a478:	920c      	str	r2, [sp, #48]	; 0x30
   8a47a:	dc02      	bgt.n	8a482 <_svfprintf_r+0x64a>
   8a47c:	f108 0808 	add.w	r8, r8, #8
   8a480:	e00b      	b.n	8a49a <_svfprintf_r+0x662>
   8a482:	4658      	mov	r0, fp
   8a484:	4649      	mov	r1, r9
   8a486:	aa0b      	add	r2, sp, #44	; 0x2c
   8a488:	9300      	str	r3, [sp, #0]
   8a48a:	f001 fd3d 	bl	8bf08 <__ssprint_r>
   8a48e:	9b00      	ldr	r3, [sp, #0]
   8a490:	2800      	cmp	r0, #0
   8a492:	f040 80be 	bne.w	8a612 <_svfprintf_r+0x7da>
   8a496:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8a49a:	3b10      	subs	r3, #16
   8a49c:	e7de      	b.n	8a45c <_svfprintf_r+0x624>
   8a49e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8a4a0:	980d      	ldr	r0, [sp, #52]	; 0x34
   8a4a2:	1c51      	adds	r1, r2, #1
   8a4a4:	f8c8 3004 	str.w	r3, [r8, #4]
   8a4a8:	2907      	cmp	r1, #7
   8a4aa:	4403      	add	r3, r0
   8a4ac:	930d      	str	r3, [sp, #52]	; 0x34
   8a4ae:	910c      	str	r1, [sp, #48]	; 0x30
   8a4b0:	dc02      	bgt.n	8a4b8 <_svfprintf_r+0x680>
   8a4b2:	f108 0808 	add.w	r8, r8, #8
   8a4b6:	e009      	b.n	8a4cc <_svfprintf_r+0x694>
   8a4b8:	4658      	mov	r0, fp
   8a4ba:	4649      	mov	r1, r9
   8a4bc:	aa0b      	add	r2, sp, #44	; 0x2c
   8a4be:	f001 fd23 	bl	8bf08 <__ssprint_r>
   8a4c2:	2800      	cmp	r0, #0
   8a4c4:	f040 80a5 	bne.w	8a612 <_svfprintf_r+0x7da>
   8a4c8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8a4cc:	1b2d      	subs	r5, r5, r4
   8a4ce:	2d00      	cmp	r5, #0
   8a4d0:	dd34      	ble.n	8a53c <_svfprintf_r+0x704>
   8a4d2:	484b      	ldr	r0, [pc, #300]	; (8a600 <_svfprintf_r+0x7c8>)
   8a4d4:	2d10      	cmp	r5, #16
   8a4d6:	f8c8 0000 	str.w	r0, [r8]
   8a4da:	dd19      	ble.n	8a510 <_svfprintf_r+0x6d8>
   8a4dc:	980c      	ldr	r0, [sp, #48]	; 0x30
   8a4de:	990d      	ldr	r1, [sp, #52]	; 0x34
   8a4e0:	1c43      	adds	r3, r0, #1
   8a4e2:	2210      	movs	r2, #16
   8a4e4:	3110      	adds	r1, #16
   8a4e6:	2b07      	cmp	r3, #7
   8a4e8:	f8c8 2004 	str.w	r2, [r8, #4]
   8a4ec:	910d      	str	r1, [sp, #52]	; 0x34
   8a4ee:	930c      	str	r3, [sp, #48]	; 0x30
   8a4f0:	dc02      	bgt.n	8a4f8 <_svfprintf_r+0x6c0>
   8a4f2:	f108 0808 	add.w	r8, r8, #8
   8a4f6:	e009      	b.n	8a50c <_svfprintf_r+0x6d4>
   8a4f8:	4658      	mov	r0, fp
   8a4fa:	4649      	mov	r1, r9
   8a4fc:	aa0b      	add	r2, sp, #44	; 0x2c
   8a4fe:	f001 fd03 	bl	8bf08 <__ssprint_r>
   8a502:	2800      	cmp	r0, #0
   8a504:	f040 8085 	bne.w	8a612 <_svfprintf_r+0x7da>
   8a508:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8a50c:	3d10      	subs	r5, #16
   8a50e:	e7e0      	b.n	8a4d2 <_svfprintf_r+0x69a>
   8a510:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8a512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a514:	1c51      	adds	r1, r2, #1
   8a516:	f8c8 5004 	str.w	r5, [r8, #4]
   8a51a:	2907      	cmp	r1, #7
   8a51c:	441d      	add	r5, r3
   8a51e:	950d      	str	r5, [sp, #52]	; 0x34
   8a520:	910c      	str	r1, [sp, #48]	; 0x30
   8a522:	dc02      	bgt.n	8a52a <_svfprintf_r+0x6f2>
   8a524:	f108 0808 	add.w	r8, r8, #8
   8a528:	e008      	b.n	8a53c <_svfprintf_r+0x704>
   8a52a:	4658      	mov	r0, fp
   8a52c:	4649      	mov	r1, r9
   8a52e:	aa0b      	add	r2, sp, #44	; 0x2c
   8a530:	f001 fcea 	bl	8bf08 <__ssprint_r>
   8a534:	2800      	cmp	r0, #0
   8a536:	d16c      	bne.n	8a612 <_svfprintf_r+0x7da>
   8a538:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8a53c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a53e:	980d      	ldr	r0, [sp, #52]	; 0x34
   8a540:	1c5a      	adds	r2, r3, #1
   8a542:	f8c8 4004 	str.w	r4, [r8, #4]
   8a546:	2a07      	cmp	r2, #7
   8a548:	4404      	add	r4, r0
   8a54a:	f8c8 a000 	str.w	sl, [r8]
   8a54e:	940d      	str	r4, [sp, #52]	; 0x34
   8a550:	920c      	str	r2, [sp, #48]	; 0x30
   8a552:	dc02      	bgt.n	8a55a <_svfprintf_r+0x722>
   8a554:	f108 0308 	add.w	r3, r8, #8
   8a558:	e007      	b.n	8a56a <_svfprintf_r+0x732>
   8a55a:	4658      	mov	r0, fp
   8a55c:	4649      	mov	r1, r9
   8a55e:	aa0b      	add	r2, sp, #44	; 0x2c
   8a560:	f001 fcd2 	bl	8bf08 <__ssprint_r>
   8a564:	2800      	cmp	r0, #0
   8a566:	d154      	bne.n	8a612 <_svfprintf_r+0x7da>
   8a568:	ab18      	add	r3, sp, #96	; 0x60
   8a56a:	077a      	lsls	r2, r7, #29
   8a56c:	d40b      	bmi.n	8a586 <_svfprintf_r+0x74e>
   8a56e:	9804      	ldr	r0, [sp, #16]
   8a570:	9b02      	ldr	r3, [sp, #8]
   8a572:	9a03      	ldr	r2, [sp, #12]
   8a574:	990d      	ldr	r1, [sp, #52]	; 0x34
   8a576:	4293      	cmp	r3, r2
   8a578:	bfac      	ite	ge
   8a57a:	18c0      	addge	r0, r0, r3
   8a57c:	1880      	addlt	r0, r0, r2
   8a57e:	9004      	str	r0, [sp, #16]
   8a580:	2900      	cmp	r1, #0
   8a582:	d036      	beq.n	8a5f2 <_svfprintf_r+0x7ba>
   8a584:	e02f      	b.n	8a5e6 <_svfprintf_r+0x7ae>
   8a586:	9c03      	ldr	r4, [sp, #12]
   8a588:	9902      	ldr	r1, [sp, #8]
   8a58a:	1a64      	subs	r4, r4, r1
   8a58c:	2c00      	cmp	r4, #0
   8a58e:	ddee      	ble.n	8a56e <_svfprintf_r+0x736>
   8a590:	481a      	ldr	r0, [pc, #104]	; (8a5fc <_svfprintf_r+0x7c4>)
   8a592:	2c10      	cmp	r4, #16
   8a594:	6018      	str	r0, [r3, #0]
   8a596:	dd15      	ble.n	8a5c4 <_svfprintf_r+0x78c>
   8a598:	990c      	ldr	r1, [sp, #48]	; 0x30
   8a59a:	2010      	movs	r0, #16
   8a59c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8a59e:	6058      	str	r0, [r3, #4]
   8a5a0:	1c48      	adds	r0, r1, #1
   8a5a2:	3210      	adds	r2, #16
   8a5a4:	2807      	cmp	r0, #7
   8a5a6:	920d      	str	r2, [sp, #52]	; 0x34
   8a5a8:	900c      	str	r0, [sp, #48]	; 0x30
   8a5aa:	dc01      	bgt.n	8a5b0 <_svfprintf_r+0x778>
   8a5ac:	3308      	adds	r3, #8
   8a5ae:	e007      	b.n	8a5c0 <_svfprintf_r+0x788>
   8a5b0:	4658      	mov	r0, fp
   8a5b2:	4649      	mov	r1, r9
   8a5b4:	aa0b      	add	r2, sp, #44	; 0x2c
   8a5b6:	f001 fca7 	bl	8bf08 <__ssprint_r>
   8a5ba:	2800      	cmp	r0, #0
   8a5bc:	d129      	bne.n	8a612 <_svfprintf_r+0x7da>
   8a5be:	ab18      	add	r3, sp, #96	; 0x60
   8a5c0:	3c10      	subs	r4, #16
   8a5c2:	e7e5      	b.n	8a590 <_svfprintf_r+0x758>
   8a5c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8a5c6:	605c      	str	r4, [r3, #4]
   8a5c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a5ca:	1c51      	adds	r1, r2, #1
   8a5cc:	191c      	adds	r4, r3, r4
   8a5ce:	2907      	cmp	r1, #7
   8a5d0:	940d      	str	r4, [sp, #52]	; 0x34
   8a5d2:	910c      	str	r1, [sp, #48]	; 0x30
   8a5d4:	ddcb      	ble.n	8a56e <_svfprintf_r+0x736>
   8a5d6:	4658      	mov	r0, fp
   8a5d8:	4649      	mov	r1, r9
   8a5da:	aa0b      	add	r2, sp, #44	; 0x2c
   8a5dc:	f001 fc94 	bl	8bf08 <__ssprint_r>
   8a5e0:	2800      	cmp	r0, #0
   8a5e2:	d0c4      	beq.n	8a56e <_svfprintf_r+0x736>
   8a5e4:	e015      	b.n	8a612 <_svfprintf_r+0x7da>
   8a5e6:	4658      	mov	r0, fp
   8a5e8:	4649      	mov	r1, r9
   8a5ea:	aa0b      	add	r2, sp, #44	; 0x2c
   8a5ec:	f001 fc8c 	bl	8bf08 <__ssprint_r>
   8a5f0:	b978      	cbnz	r0, 8a612 <_svfprintf_r+0x7da>
   8a5f2:	2500      	movs	r5, #0
   8a5f4:	950c      	str	r5, [sp, #48]	; 0x30
   8a5f6:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8a5fa:	e446      	b.n	89e8a <_svfprintf_r+0x52>
   8a5fc:	0008dc4c 	.word	0x0008dc4c
   8a600:	0008dc5c 	.word	0x0008dc5c
   8a604:	980d      	ldr	r0, [sp, #52]	; 0x34
   8a606:	b120      	cbz	r0, 8a612 <_svfprintf_r+0x7da>
   8a608:	4658      	mov	r0, fp
   8a60a:	4649      	mov	r1, r9
   8a60c:	aa0b      	add	r2, sp, #44	; 0x2c
   8a60e:	f001 fc7b 	bl	8bf08 <__ssprint_r>
   8a612:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   8a616:	9b04      	ldr	r3, [sp, #16]
   8a618:	f002 0140 	and.w	r1, r2, #64	; 0x40
   8a61c:	b208      	sxth	r0, r1
   8a61e:	2800      	cmp	r0, #0
   8a620:	bf18      	it	ne
   8a622:	f04f 33ff 	movne.w	r3, #4294967295
   8a626:	4618      	mov	r0, r3
   8a628:	b029      	add	sp, #164	; 0xa4
   8a62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a62e:	bf00      	nop

0008a630 <register_fini>:
   8a630:	4b02      	ldr	r3, [pc, #8]	; (8a63c <register_fini+0xc>)
   8a632:	b113      	cbz	r3, 8a63a <register_fini+0xa>
   8a634:	4802      	ldr	r0, [pc, #8]	; (8a640 <register_fini+0x10>)
   8a636:	f000 b805 	b.w	8a644 <atexit>
   8a63a:	4770      	bx	lr
   8a63c:	00000000 	.word	0x00000000
   8a640:	00088f25 	.word	0x00088f25

0008a644 <atexit>:
   8a644:	4601      	mov	r1, r0
   8a646:	2000      	movs	r0, #0
   8a648:	4602      	mov	r2, r0
   8a64a:	4603      	mov	r3, r0
   8a64c:	f7fe bc1c 	b.w	88e88 <__register_exitproc>

0008a650 <_malloc_trim_r>:
   8a650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a652:	4d23      	ldr	r5, [pc, #140]	; (8a6e0 <_malloc_trim_r+0x90>)
   8a654:	460e      	mov	r6, r1
   8a656:	4604      	mov	r4, r0
   8a658:	f000 fe8e 	bl	8b378 <__malloc_lock>
   8a65c:	68ab      	ldr	r3, [r5, #8]
   8a65e:	685f      	ldr	r7, [r3, #4]
   8a660:	f027 0703 	bic.w	r7, r7, #3
   8a664:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
   8a668:	1b81      	subs	r1, r0, r6
   8a66a:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   8a66e:	f022 060f 	bic.w	r6, r2, #15
   8a672:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   8a676:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   8a67a:	da04      	bge.n	8a686 <_malloc_trim_r+0x36>
   8a67c:	4620      	mov	r0, r4
   8a67e:	f000 fe7c 	bl	8b37a <__malloc_unlock>
   8a682:	2000      	movs	r0, #0
   8a684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a686:	2100      	movs	r1, #0
   8a688:	4620      	mov	r0, r4
   8a68a:	f001 fc07 	bl	8be9c <_sbrk_r>
   8a68e:	68ab      	ldr	r3, [r5, #8]
   8a690:	19d9      	adds	r1, r3, r7
   8a692:	4288      	cmp	r0, r1
   8a694:	d1f2      	bne.n	8a67c <_malloc_trim_r+0x2c>
   8a696:	4271      	negs	r1, r6
   8a698:	4620      	mov	r0, r4
   8a69a:	f001 fbff 	bl	8be9c <_sbrk_r>
   8a69e:	3001      	adds	r0, #1
   8a6a0:	d110      	bne.n	8a6c4 <_malloc_trim_r+0x74>
   8a6a2:	2100      	movs	r1, #0
   8a6a4:	4620      	mov	r0, r4
   8a6a6:	f001 fbf9 	bl	8be9c <_sbrk_r>
   8a6aa:	68ab      	ldr	r3, [r5, #8]
   8a6ac:	1ac2      	subs	r2, r0, r3
   8a6ae:	2a0f      	cmp	r2, #15
   8a6b0:	dde4      	ble.n	8a67c <_malloc_trim_r+0x2c>
   8a6b2:	490c      	ldr	r1, [pc, #48]	; (8a6e4 <_malloc_trim_r+0x94>)
   8a6b4:	f042 0201 	orr.w	r2, r2, #1
   8a6b8:	6809      	ldr	r1, [r1, #0]
   8a6ba:	605a      	str	r2, [r3, #4]
   8a6bc:	1a40      	subs	r0, r0, r1
   8a6be:	490a      	ldr	r1, [pc, #40]	; (8a6e8 <_malloc_trim_r+0x98>)
   8a6c0:	6008      	str	r0, [r1, #0]
   8a6c2:	e7db      	b.n	8a67c <_malloc_trim_r+0x2c>
   8a6c4:	4b08      	ldr	r3, [pc, #32]	; (8a6e8 <_malloc_trim_r+0x98>)
   8a6c6:	68a8      	ldr	r0, [r5, #8]
   8a6c8:	681a      	ldr	r2, [r3, #0]
   8a6ca:	1bbf      	subs	r7, r7, r6
   8a6cc:	f047 0701 	orr.w	r7, r7, #1
   8a6d0:	6047      	str	r7, [r0, #4]
   8a6d2:	1b96      	subs	r6, r2, r6
   8a6d4:	4620      	mov	r0, r4
   8a6d6:	601e      	str	r6, [r3, #0]
   8a6d8:	f000 fe4f 	bl	8b37a <__malloc_unlock>
   8a6dc:	2001      	movs	r0, #1
   8a6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a6e0:	20070774 	.word	0x20070774
   8a6e4:	20070b7c 	.word	0x20070b7c
   8a6e8:	200716bc 	.word	0x200716bc

0008a6ec <_free_r>:
   8a6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a6ee:	4606      	mov	r6, r0
   8a6f0:	460d      	mov	r5, r1
   8a6f2:	2900      	cmp	r1, #0
   8a6f4:	f000 80a6 	beq.w	8a844 <_free_r+0x158>
   8a6f8:	f000 fe3e 	bl	8b378 <__malloc_lock>
   8a6fc:	f855 cc04 	ldr.w	ip, [r5, #-4]
   8a700:	4f51      	ldr	r7, [pc, #324]	; (8a848 <_free_r+0x15c>)
   8a702:	f1a5 0308 	sub.w	r3, r5, #8
   8a706:	f02c 0201 	bic.w	r2, ip, #1
   8a70a:	189c      	adds	r4, r3, r2
   8a70c:	68b9      	ldr	r1, [r7, #8]
   8a70e:	6860      	ldr	r0, [r4, #4]
   8a710:	428c      	cmp	r4, r1
   8a712:	f020 0003 	bic.w	r0, r0, #3
   8a716:	f00c 0101 	and.w	r1, ip, #1
   8a71a:	d11c      	bne.n	8a756 <_free_r+0x6a>
   8a71c:	1882      	adds	r2, r0, r2
   8a71e:	b939      	cbnz	r1, 8a730 <_free_r+0x44>
   8a720:	f855 1c08 	ldr.w	r1, [r5, #-8]
   8a724:	1a5b      	subs	r3, r3, r1
   8a726:	6898      	ldr	r0, [r3, #8]
   8a728:	1852      	adds	r2, r2, r1
   8a72a:	68d9      	ldr	r1, [r3, #12]
   8a72c:	60c1      	str	r1, [r0, #12]
   8a72e:	6088      	str	r0, [r1, #8]
   8a730:	4845      	ldr	r0, [pc, #276]	; (8a848 <_free_r+0x15c>)
   8a732:	f042 0101 	orr.w	r1, r2, #1
   8a736:	6059      	str	r1, [r3, #4]
   8a738:	6083      	str	r3, [r0, #8]
   8a73a:	4b44      	ldr	r3, [pc, #272]	; (8a84c <_free_r+0x160>)
   8a73c:	6819      	ldr	r1, [r3, #0]
   8a73e:	428a      	cmp	r2, r1
   8a740:	d304      	bcc.n	8a74c <_free_r+0x60>
   8a742:	4a43      	ldr	r2, [pc, #268]	; (8a850 <_free_r+0x164>)
   8a744:	4630      	mov	r0, r6
   8a746:	6811      	ldr	r1, [r2, #0]
   8a748:	f7ff ff82 	bl	8a650 <_malloc_trim_r>
   8a74c:	4630      	mov	r0, r6
   8a74e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a752:	f000 be12 	b.w	8b37a <__malloc_unlock>
   8a756:	6060      	str	r0, [r4, #4]
   8a758:	b959      	cbnz	r1, 8a772 <_free_r+0x86>
   8a75a:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8a75e:	3708      	adds	r7, #8
   8a760:	1b5b      	subs	r3, r3, r5
   8a762:	1952      	adds	r2, r2, r5
   8a764:	689d      	ldr	r5, [r3, #8]
   8a766:	42bd      	cmp	r5, r7
   8a768:	d005      	beq.n	8a776 <_free_r+0x8a>
   8a76a:	68df      	ldr	r7, [r3, #12]
   8a76c:	60ef      	str	r7, [r5, #12]
   8a76e:	60bd      	str	r5, [r7, #8]
   8a770:	e002      	b.n	8a778 <_free_r+0x8c>
   8a772:	2100      	movs	r1, #0
   8a774:	e000      	b.n	8a778 <_free_r+0x8c>
   8a776:	2101      	movs	r1, #1
   8a778:	1825      	adds	r5, r4, r0
   8a77a:	686d      	ldr	r5, [r5, #4]
   8a77c:	f015 0f01 	tst.w	r5, #1
   8a780:	d10f      	bne.n	8a7a2 <_free_r+0xb6>
   8a782:	1812      	adds	r2, r2, r0
   8a784:	b949      	cbnz	r1, 8a79a <_free_r+0xae>
   8a786:	68a0      	ldr	r0, [r4, #8]
   8a788:	4d32      	ldr	r5, [pc, #200]	; (8a854 <_free_r+0x168>)
   8a78a:	42a8      	cmp	r0, r5
   8a78c:	d105      	bne.n	8a79a <_free_r+0xae>
   8a78e:	60eb      	str	r3, [r5, #12]
   8a790:	60ab      	str	r3, [r5, #8]
   8a792:	60d8      	str	r0, [r3, #12]
   8a794:	6098      	str	r0, [r3, #8]
   8a796:	2101      	movs	r1, #1
   8a798:	e003      	b.n	8a7a2 <_free_r+0xb6>
   8a79a:	68e0      	ldr	r0, [r4, #12]
   8a79c:	68a4      	ldr	r4, [r4, #8]
   8a79e:	60e0      	str	r0, [r4, #12]
   8a7a0:	6084      	str	r4, [r0, #8]
   8a7a2:	f042 0001 	orr.w	r0, r2, #1
   8a7a6:	6058      	str	r0, [r3, #4]
   8a7a8:	509a      	str	r2, [r3, r2]
   8a7aa:	2900      	cmp	r1, #0
   8a7ac:	d1ce      	bne.n	8a74c <_free_r+0x60>
   8a7ae:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8a7b2:	d20c      	bcs.n	8a7ce <_free_r+0xe2>
   8a7b4:	08d2      	lsrs	r2, r2, #3
   8a7b6:	1090      	asrs	r0, r2, #2
   8a7b8:	2401      	movs	r4, #1
   8a7ba:	fa04 f400 	lsl.w	r4, r4, r0
   8a7be:	4922      	ldr	r1, [pc, #136]	; (8a848 <_free_r+0x15c>)
   8a7c0:	6848      	ldr	r0, [r1, #4]
   8a7c2:	4320      	orrs	r0, r4
   8a7c4:	6048      	str	r0, [r1, #4]
   8a7c6:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   8a7ca:	6881      	ldr	r1, [r0, #8]
   8a7cc:	e035      	b.n	8a83a <_free_r+0x14e>
   8a7ce:	0a54      	lsrs	r4, r2, #9
   8a7d0:	2c04      	cmp	r4, #4
   8a7d2:	d802      	bhi.n	8a7da <_free_r+0xee>
   8a7d4:	0994      	lsrs	r4, r2, #6
   8a7d6:	3438      	adds	r4, #56	; 0x38
   8a7d8:	e016      	b.n	8a808 <_free_r+0x11c>
   8a7da:	2c14      	cmp	r4, #20
   8a7dc:	d801      	bhi.n	8a7e2 <_free_r+0xf6>
   8a7de:	345b      	adds	r4, #91	; 0x5b
   8a7e0:	e012      	b.n	8a808 <_free_r+0x11c>
   8a7e2:	2c54      	cmp	r4, #84	; 0x54
   8a7e4:	d802      	bhi.n	8a7ec <_free_r+0x100>
   8a7e6:	0b14      	lsrs	r4, r2, #12
   8a7e8:	346e      	adds	r4, #110	; 0x6e
   8a7ea:	e00d      	b.n	8a808 <_free_r+0x11c>
   8a7ec:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
   8a7f0:	d802      	bhi.n	8a7f8 <_free_r+0x10c>
   8a7f2:	0bd4      	lsrs	r4, r2, #15
   8a7f4:	3477      	adds	r4, #119	; 0x77
   8a7f6:	e007      	b.n	8a808 <_free_r+0x11c>
   8a7f8:	f240 5554 	movw	r5, #1364	; 0x554
   8a7fc:	42ac      	cmp	r4, r5
   8a7fe:	d802      	bhi.n	8a806 <_free_r+0x11a>
   8a800:	0c94      	lsrs	r4, r2, #18
   8a802:	347c      	adds	r4, #124	; 0x7c
   8a804:	e000      	b.n	8a808 <_free_r+0x11c>
   8a806:	247e      	movs	r4, #126	; 0x7e
   8a808:	4d0f      	ldr	r5, [pc, #60]	; (8a848 <_free_r+0x15c>)
   8a80a:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   8a80e:	6881      	ldr	r1, [r0, #8]
   8a810:	4281      	cmp	r1, r0
   8a812:	d10c      	bne.n	8a82e <_free_r+0x142>
   8a814:	2201      	movs	r2, #1
   8a816:	10a4      	asrs	r4, r4, #2
   8a818:	fa02 f404 	lsl.w	r4, r2, r4
   8a81c:	6868      	ldr	r0, [r5, #4]
   8a81e:	ea44 0200 	orr.w	r2, r4, r0
   8a822:	606a      	str	r2, [r5, #4]
   8a824:	4608      	mov	r0, r1
   8a826:	e008      	b.n	8a83a <_free_r+0x14e>
   8a828:	6889      	ldr	r1, [r1, #8]
   8a82a:	4281      	cmp	r1, r0
   8a82c:	d004      	beq.n	8a838 <_free_r+0x14c>
   8a82e:	684c      	ldr	r4, [r1, #4]
   8a830:	f024 0403 	bic.w	r4, r4, #3
   8a834:	42a2      	cmp	r2, r4
   8a836:	d3f7      	bcc.n	8a828 <_free_r+0x13c>
   8a838:	68c8      	ldr	r0, [r1, #12]
   8a83a:	60d8      	str	r0, [r3, #12]
   8a83c:	6099      	str	r1, [r3, #8]
   8a83e:	6083      	str	r3, [r0, #8]
   8a840:	60cb      	str	r3, [r1, #12]
   8a842:	e783      	b.n	8a74c <_free_r+0x60>
   8a844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a846:	bf00      	nop
   8a848:	20070774 	.word	0x20070774
   8a84c:	20070b80 	.word	0x20070b80
   8a850:	200716b8 	.word	0x200716b8
   8a854:	2007077c 	.word	0x2007077c

0008a858 <rshift>:
   8a858:	b5f0      	push	{r4, r5, r6, r7, lr}
   8a85a:	6906      	ldr	r6, [r0, #16]
   8a85c:	114b      	asrs	r3, r1, #5
   8a85e:	42b3      	cmp	r3, r6
   8a860:	f100 0214 	add.w	r2, r0, #20
   8a864:	da2a      	bge.n	8a8bc <rshift+0x64>
   8a866:	1d1d      	adds	r5, r3, #4
   8a868:	eb00 0686 	add.w	r6, r0, r6, lsl #2
   8a86c:	eb00 0385 	add.w	r3, r0, r5, lsl #2
   8a870:	3614      	adds	r6, #20
   8a872:	1d1d      	adds	r5, r3, #4
   8a874:	f011 011f 	ands.w	r1, r1, #31
   8a878:	d101      	bne.n	8a87e <rshift+0x26>
   8a87a:	4613      	mov	r3, r2
   8a87c:	e017      	b.n	8a8ae <rshift+0x56>
   8a87e:	685c      	ldr	r4, [r3, #4]
   8a880:	f1c1 0c20 	rsb	ip, r1, #32
   8a884:	fa24 f401 	lsr.w	r4, r4, r1
   8a888:	3504      	adds	r5, #4
   8a88a:	4613      	mov	r3, r2
   8a88c:	42b5      	cmp	r5, r6
   8a88e:	d20a      	bcs.n	8a8a6 <rshift+0x4e>
   8a890:	682f      	ldr	r7, [r5, #0]
   8a892:	fa07 f70c 	lsl.w	r7, r7, ip
   8a896:	433c      	orrs	r4, r7
   8a898:	f843 4b04 	str.w	r4, [r3], #4
   8a89c:	f855 4b04 	ldr.w	r4, [r5], #4
   8a8a0:	fa24 f401 	lsr.w	r4, r4, r1
   8a8a4:	e7f2      	b.n	8a88c <rshift+0x34>
   8a8a6:	601c      	str	r4, [r3, #0]
   8a8a8:	b14c      	cbz	r4, 8a8be <rshift+0x66>
   8a8aa:	3304      	adds	r3, #4
   8a8ac:	e007      	b.n	8a8be <rshift+0x66>
   8a8ae:	42b5      	cmp	r5, r6
   8a8b0:	d205      	bcs.n	8a8be <rshift+0x66>
   8a8b2:	f855 1b04 	ldr.w	r1, [r5], #4
   8a8b6:	f843 1b04 	str.w	r1, [r3], #4
   8a8ba:	e7f8      	b.n	8a8ae <rshift+0x56>
   8a8bc:	4613      	mov	r3, r2
   8a8be:	1a9b      	subs	r3, r3, r2
   8a8c0:	109a      	asrs	r2, r3, #2
   8a8c2:	6102      	str	r2, [r0, #16]
   8a8c4:	b902      	cbnz	r2, 8a8c8 <rshift+0x70>
   8a8c6:	6142      	str	r2, [r0, #20]
   8a8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0008a8ca <htinit.constprop.0>:
   8a8ca:	b530      	push	{r4, r5, lr}
   8a8cc:	2300      	movs	r3, #0
   8a8ce:	5cc2      	ldrb	r2, [r0, r3]
   8a8d0:	b122      	cbz	r2, 8a8dc <htinit.constprop.0+0x12>
   8a8d2:	4c03      	ldr	r4, [pc, #12]	; (8a8e0 <htinit.constprop.0+0x16>)
   8a8d4:	185d      	adds	r5, r3, r1
   8a8d6:	5515      	strb	r5, [r2, r4]
   8a8d8:	3301      	adds	r3, #1
   8a8da:	e7f8      	b.n	8a8ce <htinit.constprop.0+0x4>
   8a8dc:	bd30      	pop	{r4, r5, pc}
   8a8de:	bf00      	nop
   8a8e0:	20071ba4 	.word	0x20071ba4

0008a8e4 <__hexdig_init>:
   8a8e4:	b508      	push	{r3, lr}
   8a8e6:	2110      	movs	r1, #16
   8a8e8:	4806      	ldr	r0, [pc, #24]	; (8a904 <__hexdig_init+0x20>)
   8a8ea:	f7ff ffee 	bl	8a8ca <htinit.constprop.0>
   8a8ee:	211a      	movs	r1, #26
   8a8f0:	4805      	ldr	r0, [pc, #20]	; (8a908 <__hexdig_init+0x24>)
   8a8f2:	f7ff ffea 	bl	8a8ca <htinit.constprop.0>
   8a8f6:	4805      	ldr	r0, [pc, #20]	; (8a90c <__hexdig_init+0x28>)
   8a8f8:	211a      	movs	r1, #26
   8a8fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8a8fe:	f7ff bfe4 	b.w	8a8ca <htinit.constprop.0>
   8a902:	bf00      	nop
   8a904:	0008dc8e 	.word	0x0008dc8e
   8a908:	0008dc87 	.word	0x0008dc87
   8a90c:	0008dc76 	.word	0x0008dc76

0008a910 <__gethex>:
   8a910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a914:	b089      	sub	sp, #36	; 0x24
   8a916:	468a      	mov	sl, r1
   8a918:	4616      	mov	r6, r2
   8a91a:	9306      	str	r3, [sp, #24]
   8a91c:	9003      	str	r0, [sp, #12]
   8a91e:	f000 fb09 	bl	8af34 <_localeconv_r>
   8a922:	6800      	ldr	r0, [r0, #0]
   8a924:	9004      	str	r0, [sp, #16]
   8a926:	f7fe fbc7 	bl	890b8 <strlen>
   8a92a:	9904      	ldr	r1, [sp, #16]
   8a92c:	4a9d      	ldr	r2, [pc, #628]	; (8aba4 <__gethex+0x294>)
   8a92e:	180b      	adds	r3, r1, r0
   8a930:	4680      	mov	r8, r0
   8a932:	f892 4030 	ldrb.w	r4, [r2, #48]	; 0x30
   8a936:	f813 0c01 	ldrb.w	r0, [r3, #-1]
   8a93a:	9007      	str	r0, [sp, #28]
   8a93c:	b90c      	cbnz	r4, 8a942 <__gethex+0x32>
   8a93e:	f7ff ffd1 	bl	8a8e4 <__hexdig_init>
   8a942:	f8da 5000 	ldr.w	r5, [sl]
   8a946:	f04f 0900 	mov.w	r9, #0
   8a94a:	1cac      	adds	r4, r5, #2
   8a94c:	46a3      	mov	fp, r4
   8a94e:	f814 7b01 	ldrb.w	r7, [r4], #1
   8a952:	2f30      	cmp	r7, #48	; 0x30
   8a954:	d102      	bne.n	8a95c <__gethex+0x4c>
   8a956:	f109 0901 	add.w	r9, r9, #1
   8a95a:	e7f7      	b.n	8a94c <__gethex+0x3c>
   8a95c:	4c91      	ldr	r4, [pc, #580]	; (8aba4 <__gethex+0x294>)
   8a95e:	5de5      	ldrb	r5, [r4, r7]
   8a960:	b9d5      	cbnz	r5, 8a998 <__gethex+0x88>
   8a962:	4658      	mov	r0, fp
   8a964:	9904      	ldr	r1, [sp, #16]
   8a966:	4642      	mov	r2, r8
   8a968:	f001 fab7 	bl	8beda <strncmp>
   8a96c:	2800      	cmp	r0, #0
   8a96e:	d136      	bne.n	8a9de <__gethex+0xce>
   8a970:	f81b 1008 	ldrb.w	r1, [fp, r8]
   8a974:	eb0b 0708 	add.w	r7, fp, r8
   8a978:	5c65      	ldrb	r5, [r4, r1]
   8a97a:	2d00      	cmp	r5, #0
   8a97c:	d030      	beq.n	8a9e0 <__gethex+0xd0>
   8a97e:	463b      	mov	r3, r7
   8a980:	4618      	mov	r0, r3
   8a982:	f813 2b01 	ldrb.w	r2, [r3], #1
   8a986:	2a30      	cmp	r2, #48	; 0x30
   8a988:	d0fa      	beq.n	8a980 <__gethex+0x70>
   8a98a:	4d86      	ldr	r5, [pc, #536]	; (8aba4 <__gethex+0x294>)
   8a98c:	4683      	mov	fp, r0
   8a98e:	5cac      	ldrb	r4, [r5, r2]
   8a990:	463d      	mov	r5, r7
   8a992:	b924      	cbnz	r4, 8a99e <__gethex+0x8e>
   8a994:	2401      	movs	r4, #1
   8a996:	e003      	b.n	8a9a0 <__gethex+0x90>
   8a998:	2400      	movs	r4, #0
   8a99a:	4625      	mov	r5, r4
   8a99c:	e002      	b.n	8a9a4 <__gethex+0x94>
   8a99e:	2400      	movs	r4, #0
   8a9a0:	f04f 0901 	mov.w	r9, #1
   8a9a4:	465b      	mov	r3, fp
   8a9a6:	461f      	mov	r7, r3
   8a9a8:	7838      	ldrb	r0, [r7, #0]
   8a9aa:	497e      	ldr	r1, [pc, #504]	; (8aba4 <__gethex+0x294>)
   8a9ac:	3301      	adds	r3, #1
   8a9ae:	5c0a      	ldrb	r2, [r1, r0]
   8a9b0:	2a00      	cmp	r2, #0
   8a9b2:	d1f8      	bne.n	8a9a6 <__gethex+0x96>
   8a9b4:	4638      	mov	r0, r7
   8a9b6:	9904      	ldr	r1, [sp, #16]
   8a9b8:	4642      	mov	r2, r8
   8a9ba:	f001 fa8e 	bl	8beda <strncmp>
   8a9be:	b950      	cbnz	r0, 8a9d6 <__gethex+0xc6>
   8a9c0:	b955      	cbnz	r5, 8a9d8 <__gethex+0xc8>
   8a9c2:	eb07 0508 	add.w	r5, r7, r8
   8a9c6:	462b      	mov	r3, r5
   8a9c8:	461f      	mov	r7, r3
   8a9ca:	7838      	ldrb	r0, [r7, #0]
   8a9cc:	4975      	ldr	r1, [pc, #468]	; (8aba4 <__gethex+0x294>)
   8a9ce:	3301      	adds	r3, #1
   8a9d0:	5c0a      	ldrb	r2, [r1, r0]
   8a9d2:	2a00      	cmp	r2, #0
   8a9d4:	d1f8      	bne.n	8a9c8 <__gethex+0xb8>
   8a9d6:	b125      	cbz	r5, 8a9e2 <__gethex+0xd2>
   8a9d8:	1bed      	subs	r5, r5, r7
   8a9da:	00ad      	lsls	r5, r5, #2
   8a9dc:	e001      	b.n	8a9e2 <__gethex+0xd2>
   8a9de:	465f      	mov	r7, fp
   8a9e0:	2401      	movs	r4, #1
   8a9e2:	783b      	ldrb	r3, [r7, #0]
   8a9e4:	2b50      	cmp	r3, #80	; 0x50
   8a9e6:	d001      	beq.n	8a9ec <__gethex+0xdc>
   8a9e8:	2b70      	cmp	r3, #112	; 0x70
   8a9ea:	d12e      	bne.n	8aa4a <__gethex+0x13a>
   8a9ec:	7878      	ldrb	r0, [r7, #1]
   8a9ee:	282b      	cmp	r0, #43	; 0x2b
   8a9f0:	d005      	beq.n	8a9fe <__gethex+0xee>
   8a9f2:	282d      	cmp	r0, #45	; 0x2d
   8a9f4:	d006      	beq.n	8aa04 <__gethex+0xf4>
   8a9f6:	2100      	movs	r1, #0
   8a9f8:	1c78      	adds	r0, r7, #1
   8a9fa:	9105      	str	r1, [sp, #20]
   8a9fc:	e005      	b.n	8aa0a <__gethex+0xfa>
   8a9fe:	2300      	movs	r3, #0
   8aa00:	9305      	str	r3, [sp, #20]
   8aa02:	e001      	b.n	8aa08 <__gethex+0xf8>
   8aa04:	2201      	movs	r2, #1
   8aa06:	9205      	str	r2, [sp, #20]
   8aa08:	1cb8      	adds	r0, r7, #2
   8aa0a:	7801      	ldrb	r1, [r0, #0]
   8aa0c:	4a65      	ldr	r2, [pc, #404]	; (8aba4 <__gethex+0x294>)
   8aa0e:	5c52      	ldrb	r2, [r2, r1]
   8aa10:	b1da      	cbz	r2, 8aa4a <__gethex+0x13a>
   8aa12:	2a19      	cmp	r2, #25
   8aa14:	dc19      	bgt.n	8aa4a <__gethex+0x13a>
   8aa16:	3a10      	subs	r2, #16
   8aa18:	3001      	adds	r0, #1
   8aa1a:	4603      	mov	r3, r0
   8aa1c:	f893 c000 	ldrb.w	ip, [r3]
   8aa20:	4960      	ldr	r1, [pc, #384]	; (8aba4 <__gethex+0x294>)
   8aa22:	3001      	adds	r0, #1
   8aa24:	f811 100c 	ldrb.w	r1, [r1, ip]
   8aa28:	9102      	str	r1, [sp, #8]
   8aa2a:	b919      	cbnz	r1, 8aa34 <__gethex+0x124>
   8aa2c:	9805      	ldr	r0, [sp, #20]
   8aa2e:	b150      	cbz	r0, 8aa46 <__gethex+0x136>
   8aa30:	4252      	negs	r2, r2
   8aa32:	e008      	b.n	8aa46 <__gethex+0x136>
   8aa34:	9902      	ldr	r1, [sp, #8]
   8aa36:	2919      	cmp	r1, #25
   8aa38:	dcf8      	bgt.n	8aa2c <__gethex+0x11c>
   8aa3a:	9b02      	ldr	r3, [sp, #8]
   8aa3c:	210a      	movs	r1, #10
   8aa3e:	fb01 3202 	mla	r2, r1, r2, r3
   8aa42:	3a10      	subs	r2, #16
   8aa44:	e7e9      	b.n	8aa1a <__gethex+0x10a>
   8aa46:	18ad      	adds	r5, r5, r2
   8aa48:	e000      	b.n	8aa4c <__gethex+0x13c>
   8aa4a:	463b      	mov	r3, r7
   8aa4c:	f8ca 3000 	str.w	r3, [sl]
   8aa50:	b13c      	cbz	r4, 8aa62 <__gethex+0x152>
   8aa52:	f1b9 0f00 	cmp.w	r9, #0
   8aa56:	bf0c      	ite	eq
   8aa58:	f04f 0906 	moveq.w	r9, #6
   8aa5c:	f04f 0900 	movne.w	r9, #0
   8aa60:	e18b      	b.n	8ad7a <__gethex+0x46a>
   8aa62:	ebcb 0007 	rsb	r0, fp, r7
   8aa66:	1e43      	subs	r3, r0, #1
   8aa68:	4621      	mov	r1, r4
   8aa6a:	2b07      	cmp	r3, #7
   8aa6c:	dd02      	ble.n	8aa74 <__gethex+0x164>
   8aa6e:	3101      	adds	r1, #1
   8aa70:	105b      	asrs	r3, r3, #1
   8aa72:	e7fa      	b.n	8aa6a <__gethex+0x15a>
   8aa74:	9803      	ldr	r0, [sp, #12]
   8aa76:	f000 fc81 	bl	8b37c <_Balloc>
   8aa7a:	46b9      	mov	r9, r7
   8aa7c:	f100 0314 	add.w	r3, r0, #20
   8aa80:	2700      	movs	r7, #0
   8aa82:	4604      	mov	r4, r0
   8aa84:	9302      	str	r3, [sp, #8]
   8aa86:	46ba      	mov	sl, r7
   8aa88:	45d9      	cmp	r9, fp
   8aa8a:	d932      	bls.n	8aaf2 <__gethex+0x1e2>
   8aa8c:	f819 1c01 	ldrb.w	r1, [r9, #-1]
   8aa90:	f8dd c01c 	ldr.w	ip, [sp, #28]
   8aa94:	f109 3eff 	add.w	lr, r9, #4294967295
   8aa98:	4561      	cmp	r1, ip
   8aa9a:	f8cd e014 	str.w	lr, [sp, #20]
   8aa9e:	d007      	beq.n	8aab0 <__gethex+0x1a0>
   8aaa0:	f1ba 0f20 	cmp.w	sl, #32
   8aaa4:	d116      	bne.n	8aad4 <__gethex+0x1c4>
   8aaa6:	f843 7b04 	str.w	r7, [r3], #4
   8aaaa:	2700      	movs	r7, #0
   8aaac:	46ba      	mov	sl, r7
   8aaae:	e011      	b.n	8aad4 <__gethex+0x1c4>
   8aab0:	9a05      	ldr	r2, [sp, #20]
   8aab2:	f1c8 0001 	rsb	r0, r8, #1
   8aab6:	eb02 0c00 	add.w	ip, r2, r0
   8aaba:	45dc      	cmp	ip, fp
   8aabc:	d3f0      	bcc.n	8aaa0 <__gethex+0x190>
   8aabe:	4660      	mov	r0, ip
   8aac0:	9904      	ldr	r1, [sp, #16]
   8aac2:	4642      	mov	r2, r8
   8aac4:	e88d 1008 	stmia.w	sp, {r3, ip}
   8aac8:	f001 fa07 	bl	8beda <strncmp>
   8aacc:	e89d 1008 	ldmia.w	sp, {r3, ip}
   8aad0:	b168      	cbz	r0, 8aaee <__gethex+0x1de>
   8aad2:	e7e5      	b.n	8aaa0 <__gethex+0x190>
   8aad4:	f819 0c01 	ldrb.w	r0, [r9, #-1]
   8aad8:	4932      	ldr	r1, [pc, #200]	; (8aba4 <__gethex+0x294>)
   8aada:	f8dd c014 	ldr.w	ip, [sp, #20]
   8aade:	5c0a      	ldrb	r2, [r1, r0]
   8aae0:	f002 000f 	and.w	r0, r2, #15
   8aae4:	fa00 f10a 	lsl.w	r1, r0, sl
   8aae8:	f10a 0a04 	add.w	sl, sl, #4
   8aaec:	430f      	orrs	r7, r1
   8aaee:	46e1      	mov	r9, ip
   8aaf0:	e7ca      	b.n	8aa88 <__gethex+0x178>
   8aaf2:	9a02      	ldr	r2, [sp, #8]
   8aaf4:	f843 7b04 	str.w	r7, [r3], #4
   8aaf8:	1a99      	subs	r1, r3, r2
   8aafa:	108b      	asrs	r3, r1, #2
   8aafc:	4638      	mov	r0, r7
   8aafe:	6123      	str	r3, [r4, #16]
   8ab00:	ea4f 1a43 	mov.w	sl, r3, lsl #5
   8ab04:	f000 fce7 	bl	8b4d6 <__hi0bits>
   8ab08:	6837      	ldr	r7, [r6, #0]
   8ab0a:	ebc0 000a 	rsb	r0, r0, sl
   8ab0e:	42b8      	cmp	r0, r7
   8ab10:	dd2a      	ble.n	8ab68 <__gethex+0x258>
   8ab12:	ebc7 0900 	rsb	r9, r7, r0
   8ab16:	4649      	mov	r1, r9
   8ab18:	4620      	mov	r0, r4
   8ab1a:	f000 fff8 	bl	8bb0e <__any_on>
   8ab1e:	b1e0      	cbz	r0, 8ab5a <__gethex+0x24a>
   8ab20:	f109 33ff 	add.w	r3, r9, #4294967295
   8ab24:	f003 011f 	and.w	r1, r3, #31
   8ab28:	f04f 0a01 	mov.w	sl, #1
   8ab2c:	fa0a f001 	lsl.w	r0, sl, r1
   8ab30:	115a      	asrs	r2, r3, #5
   8ab32:	eb04 0182 	add.w	r1, r4, r2, lsl #2
   8ab36:	694a      	ldr	r2, [r1, #20]
   8ab38:	4210      	tst	r0, r2
   8ab3a:	d00f      	beq.n	8ab5c <__gethex+0x24c>
   8ab3c:	4553      	cmp	r3, sl
   8ab3e:	dc02      	bgt.n	8ab46 <__gethex+0x236>
   8ab40:	f04f 0a02 	mov.w	sl, #2
   8ab44:	e00a      	b.n	8ab5c <__gethex+0x24c>
   8ab46:	4620      	mov	r0, r4
   8ab48:	f1a9 0102 	sub.w	r1, r9, #2
   8ab4c:	f000 ffdf 	bl	8bb0e <__any_on>
   8ab50:	2800      	cmp	r0, #0
   8ab52:	d0f5      	beq.n	8ab40 <__gethex+0x230>
   8ab54:	f04f 0a03 	mov.w	sl, #3
   8ab58:	e000      	b.n	8ab5c <__gethex+0x24c>
   8ab5a:	4682      	mov	sl, r0
   8ab5c:	4620      	mov	r0, r4
   8ab5e:	4649      	mov	r1, r9
   8ab60:	f7ff fe7a 	bl	8a858 <rshift>
   8ab64:	444d      	add	r5, r9
   8ab66:	e00f      	b.n	8ab88 <__gethex+0x278>
   8ab68:	da0c      	bge.n	8ab84 <__gethex+0x274>
   8ab6a:	ebc0 0907 	rsb	r9, r0, r7
   8ab6e:	4621      	mov	r1, r4
   8ab70:	464a      	mov	r2, r9
   8ab72:	9803      	ldr	r0, [sp, #12]
   8ab74:	f000 fdd8 	bl	8b728 <__lshift>
   8ab78:	f100 0214 	add.w	r2, r0, #20
   8ab7c:	4604      	mov	r4, r0
   8ab7e:	ebc9 0505 	rsb	r5, r9, r5
   8ab82:	9202      	str	r2, [sp, #8]
   8ab84:	f04f 0a00 	mov.w	sl, #0
   8ab88:	68b3      	ldr	r3, [r6, #8]
   8ab8a:	429d      	cmp	r5, r3
   8ab8c:	dd0c      	ble.n	8aba8 <__gethex+0x298>
   8ab8e:	9803      	ldr	r0, [sp, #12]
   8ab90:	4621      	mov	r1, r4
   8ab92:	f000 fc19 	bl	8b3c8 <_Bfree>
   8ab96:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8ab98:	2000      	movs	r0, #0
   8ab9a:	6010      	str	r0, [r2, #0]
   8ab9c:	f04f 09a3 	mov.w	r9, #163	; 0xa3
   8aba0:	e0eb      	b.n	8ad7a <__gethex+0x46a>
   8aba2:	bf00      	nop
   8aba4:	20071ba4 	.word	0x20071ba4
   8aba8:	6870      	ldr	r0, [r6, #4]
   8abaa:	4285      	cmp	r5, r0
   8abac:	da58      	bge.n	8ac60 <__gethex+0x350>
   8abae:	1b45      	subs	r5, r0, r5
   8abb0:	42bd      	cmp	r5, r7
   8abb2:	db2e      	blt.n	8ac12 <__gethex+0x302>
   8abb4:	68f2      	ldr	r2, [r6, #12]
   8abb6:	2a02      	cmp	r2, #2
   8abb8:	d01a      	beq.n	8abf0 <__gethex+0x2e0>
   8abba:	2a03      	cmp	r2, #3
   8abbc:	d01c      	beq.n	8abf8 <__gethex+0x2e8>
   8abbe:	2a01      	cmp	r2, #1
   8abc0:	d11d      	bne.n	8abfe <__gethex+0x2ee>
   8abc2:	42bd      	cmp	r5, r7
   8abc4:	d11b      	bne.n	8abfe <__gethex+0x2ee>
   8abc6:	2f01      	cmp	r7, #1
   8abc8:	dc0b      	bgt.n	8abe2 <__gethex+0x2d2>
   8abca:	6873      	ldr	r3, [r6, #4]
   8abcc:	9806      	ldr	r0, [sp, #24]
   8abce:	9902      	ldr	r1, [sp, #8]
   8abd0:	6003      	str	r3, [r0, #0]
   8abd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8abd4:	2201      	movs	r2, #1
   8abd6:	6122      	str	r2, [r4, #16]
   8abd8:	f04f 0962 	mov.w	r9, #98	; 0x62
   8abdc:	600a      	str	r2, [r1, #0]
   8abde:	601c      	str	r4, [r3, #0]
   8abe0:	e0cb      	b.n	8ad7a <__gethex+0x46a>
   8abe2:	4620      	mov	r0, r4
   8abe4:	1e79      	subs	r1, r7, #1
   8abe6:	f000 ff92 	bl	8bb0e <__any_on>
   8abea:	2800      	cmp	r0, #0
   8abec:	d1ed      	bne.n	8abca <__gethex+0x2ba>
   8abee:	e006      	b.n	8abfe <__gethex+0x2ee>
   8abf0:	9813      	ldr	r0, [sp, #76]	; 0x4c
   8abf2:	2800      	cmp	r0, #0
   8abf4:	d0e9      	beq.n	8abca <__gethex+0x2ba>
   8abf6:	e002      	b.n	8abfe <__gethex+0x2ee>
   8abf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8abfa:	2b00      	cmp	r3, #0
   8abfc:	d1e5      	bne.n	8abca <__gethex+0x2ba>
   8abfe:	4621      	mov	r1, r4
   8ac00:	9803      	ldr	r0, [sp, #12]
   8ac02:	f000 fbe1 	bl	8b3c8 <_Bfree>
   8ac06:	9912      	ldr	r1, [sp, #72]	; 0x48
   8ac08:	2200      	movs	r2, #0
   8ac0a:	600a      	str	r2, [r1, #0]
   8ac0c:	f04f 0950 	mov.w	r9, #80	; 0x50
   8ac10:	e0b3      	b.n	8ad7a <__gethex+0x46a>
   8ac12:	f105 39ff 	add.w	r9, r5, #4294967295
   8ac16:	f1ba 0f00 	cmp.w	sl, #0
   8ac1a:	d108      	bne.n	8ac2e <__gethex+0x31e>
   8ac1c:	f1b9 0f00 	cmp.w	r9, #0
   8ac20:	dd07      	ble.n	8ac32 <__gethex+0x322>
   8ac22:	4620      	mov	r0, r4
   8ac24:	4649      	mov	r1, r9
   8ac26:	f000 ff72 	bl	8bb0e <__any_on>
   8ac2a:	4682      	mov	sl, r0
   8ac2c:	e001      	b.n	8ac32 <__gethex+0x322>
   8ac2e:	f04f 0a01 	mov.w	sl, #1
   8ac32:	f009 031f 	and.w	r3, r9, #31
   8ac36:	2201      	movs	r2, #1
   8ac38:	fa02 f003 	lsl.w	r0, r2, r3
   8ac3c:	9b02      	ldr	r3, [sp, #8]
   8ac3e:	ea4f 1169 	mov.w	r1, r9, asr #5
   8ac42:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   8ac46:	1b7f      	subs	r7, r7, r5
   8ac48:	4208      	tst	r0, r1
   8ac4a:	4629      	mov	r1, r5
   8ac4c:	4620      	mov	r0, r4
   8ac4e:	bf18      	it	ne
   8ac50:	f04a 0a02 	orrne.w	sl, sl, #2
   8ac54:	f04f 0902 	mov.w	r9, #2
   8ac58:	f7ff fdfe 	bl	8a858 <rshift>
   8ac5c:	6875      	ldr	r5, [r6, #4]
   8ac5e:	e001      	b.n	8ac64 <__gethex+0x354>
   8ac60:	f04f 0901 	mov.w	r9, #1
   8ac64:	f1ba 0f00 	cmp.w	sl, #0
   8ac68:	f000 8083 	beq.w	8ad72 <__gethex+0x462>
   8ac6c:	68f2      	ldr	r2, [r6, #12]
   8ac6e:	2a02      	cmp	r2, #2
   8ac70:	d00e      	beq.n	8ac90 <__gethex+0x380>
   8ac72:	2a03      	cmp	r2, #3
   8ac74:	d010      	beq.n	8ac98 <__gethex+0x388>
   8ac76:	2a01      	cmp	r2, #1
   8ac78:	d179      	bne.n	8ad6e <__gethex+0x45e>
   8ac7a:	f01a 0f02 	tst.w	sl, #2
   8ac7e:	d076      	beq.n	8ad6e <__gethex+0x45e>
   8ac80:	9802      	ldr	r0, [sp, #8]
   8ac82:	6803      	ldr	r3, [r0, #0]
   8ac84:	ea4a 0a03 	orr.w	sl, sl, r3
   8ac88:	f01a 0f01 	tst.w	sl, #1
   8ac8c:	d107      	bne.n	8ac9e <__gethex+0x38e>
   8ac8e:	e06e      	b.n	8ad6e <__gethex+0x45e>
   8ac90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8ac92:	f1c2 0101 	rsb	r1, r2, #1
   8ac96:	e000      	b.n	8ac9a <__gethex+0x38a>
   8ac98:	9913      	ldr	r1, [sp, #76]	; 0x4c
   8ac9a:	2900      	cmp	r1, #0
   8ac9c:	d067      	beq.n	8ad6e <__gethex+0x45e>
   8ac9e:	f8d4 8010 	ldr.w	r8, [r4, #16]
   8aca2:	f104 0314 	add.w	r3, r4, #20
   8aca6:	eb04 0188 	add.w	r1, r4, r8, lsl #2
   8acaa:	3114      	adds	r1, #20
   8acac:	4618      	mov	r0, r3
   8acae:	f853 2b04 	ldr.w	r2, [r3], #4
   8acb2:	f1b2 3fff 	cmp.w	r2, #4294967295
   8acb6:	d002      	beq.n	8acbe <__gethex+0x3ae>
   8acb8:	3201      	adds	r2, #1
   8acba:	6002      	str	r2, [r0, #0]
   8acbc:	e022      	b.n	8ad04 <__gethex+0x3f4>
   8acbe:	2000      	movs	r0, #0
   8acc0:	428b      	cmp	r3, r1
   8acc2:	f843 0c04 	str.w	r0, [r3, #-4]
   8acc6:	d3f1      	bcc.n	8acac <__gethex+0x39c>
   8acc8:	68a1      	ldr	r1, [r4, #8]
   8acca:	4588      	cmp	r8, r1
   8accc:	db13      	blt.n	8acf6 <__gethex+0x3e6>
   8acce:	6863      	ldr	r3, [r4, #4]
   8acd0:	9803      	ldr	r0, [sp, #12]
   8acd2:	1c59      	adds	r1, r3, #1
   8acd4:	f000 fb52 	bl	8b37c <_Balloc>
   8acd8:	6922      	ldr	r2, [r4, #16]
   8acda:	f104 010c 	add.w	r1, r4, #12
   8acde:	1c93      	adds	r3, r2, #2
   8ace0:	4682      	mov	sl, r0
   8ace2:	009a      	lsls	r2, r3, #2
   8ace4:	f100 000c 	add.w	r0, r0, #12
   8ace8:	f7fe f958 	bl	88f9c <memcpy>
   8acec:	4621      	mov	r1, r4
   8acee:	9803      	ldr	r0, [sp, #12]
   8acf0:	f000 fb6a 	bl	8b3c8 <_Bfree>
   8acf4:	4654      	mov	r4, sl
   8acf6:	6920      	ldr	r0, [r4, #16]
   8acf8:	2101      	movs	r1, #1
   8acfa:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   8acfe:	1843      	adds	r3, r0, r1
   8ad00:	6151      	str	r1, [r2, #20]
   8ad02:	6123      	str	r3, [r4, #16]
   8ad04:	f1b9 0f02 	cmp.w	r9, #2
   8ad08:	d113      	bne.n	8ad32 <__gethex+0x422>
   8ad0a:	6832      	ldr	r2, [r6, #0]
   8ad0c:	1e50      	subs	r0, r2, #1
   8ad0e:	4287      	cmp	r7, r0
   8ad10:	d12a      	bne.n	8ad68 <__gethex+0x458>
   8ad12:	f007 011f 	and.w	r1, r7, #31
   8ad16:	2201      	movs	r2, #1
   8ad18:	fa02 f201 	lsl.w	r2, r2, r1
   8ad1c:	117f      	asrs	r7, r7, #5
   8ad1e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
   8ad22:	697b      	ldr	r3, [r7, #20]
   8ad24:	421a      	tst	r2, r3
   8ad26:	bf0c      	ite	eq
   8ad28:	f04f 0902 	moveq.w	r9, #2
   8ad2c:	f04f 0901 	movne.w	r9, #1
   8ad30:	e01a      	b.n	8ad68 <__gethex+0x458>
   8ad32:	6920      	ldr	r0, [r4, #16]
   8ad34:	4540      	cmp	r0, r8
   8ad36:	dd09      	ble.n	8ad4c <__gethex+0x43c>
   8ad38:	2101      	movs	r1, #1
   8ad3a:	4620      	mov	r0, r4
   8ad3c:	f7ff fd8c 	bl	8a858 <rshift>
   8ad40:	68b3      	ldr	r3, [r6, #8]
   8ad42:	3501      	adds	r5, #1
   8ad44:	429d      	cmp	r5, r3
   8ad46:	f73f af22 	bgt.w	8ab8e <__gethex+0x27e>
   8ad4a:	e00b      	b.n	8ad64 <__gethex+0x454>
   8ad4c:	f017 071f 	ands.w	r7, r7, #31
   8ad50:	d008      	beq.n	8ad64 <__gethex+0x454>
   8ad52:	eb04 0188 	add.w	r1, r4, r8, lsl #2
   8ad56:	6908      	ldr	r0, [r1, #16]
   8ad58:	f000 fbbd 	bl	8b4d6 <__hi0bits>
   8ad5c:	f1c7 0720 	rsb	r7, r7, #32
   8ad60:	42b8      	cmp	r0, r7
   8ad62:	dbe9      	blt.n	8ad38 <__gethex+0x428>
   8ad64:	f04f 0901 	mov.w	r9, #1
   8ad68:	f049 0920 	orr.w	r9, r9, #32
   8ad6c:	e001      	b.n	8ad72 <__gethex+0x462>
   8ad6e:	f049 0910 	orr.w	r9, r9, #16
   8ad72:	9812      	ldr	r0, [sp, #72]	; 0x48
   8ad74:	9906      	ldr	r1, [sp, #24]
   8ad76:	6004      	str	r4, [r0, #0]
   8ad78:	600d      	str	r5, [r1, #0]
   8ad7a:	4648      	mov	r0, r9
   8ad7c:	b009      	add	sp, #36	; 0x24
   8ad7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ad82:	bf00      	nop

0008ad84 <L_shift>:
   8ad84:	f1c2 0208 	rsb	r2, r2, #8
   8ad88:	0092      	lsls	r2, r2, #2
   8ad8a:	b570      	push	{r4, r5, r6, lr}
   8ad8c:	f1c2 0420 	rsb	r4, r2, #32
   8ad90:	6805      	ldr	r5, [r0, #0]
   8ad92:	f850 3f04 	ldr.w	r3, [r0, #4]!
   8ad96:	fa03 f604 	lsl.w	r6, r3, r4
   8ad9a:	fa23 f302 	lsr.w	r3, r3, r2
   8ad9e:	4335      	orrs	r5, r6
   8ada0:	4288      	cmp	r0, r1
   8ada2:	f840 5c04 	str.w	r5, [r0, #-4]
   8ada6:	6003      	str	r3, [r0, #0]
   8ada8:	d3f2      	bcc.n	8ad90 <L_shift+0xc>
   8adaa:	bd70      	pop	{r4, r5, r6, pc}

0008adac <__hexnan>:
   8adac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8adb0:	4b46      	ldr	r3, [pc, #280]	; (8aecc <__hexnan+0x120>)
   8adb2:	4683      	mov	fp, r0
   8adb4:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
   8adb8:	460c      	mov	r4, r1
   8adba:	4615      	mov	r5, r2
   8adbc:	b908      	cbnz	r0, 8adc2 <__hexnan+0x16>
   8adbe:	f7ff fd91 	bl	8a8e4 <__hexdig_init>
   8adc2:	6821      	ldr	r1, [r4, #0]
   8adc4:	f8db 3000 	ldr.w	r3, [fp]
   8adc8:	114e      	asrs	r6, r1, #5
   8adca:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   8adce:	f011 0a1f 	ands.w	sl, r1, #31
   8add2:	bf18      	it	ne
   8add4:	3604      	addne	r6, #4
   8add6:	f1a6 0904 	sub.w	r9, r6, #4
   8adda:	2200      	movs	r2, #0
   8addc:	f846 2c04 	str.w	r2, [r6, #-4]
   8ade0:	464f      	mov	r7, r9
   8ade2:	464c      	mov	r4, r9
   8ade4:	4694      	mov	ip, r2
   8ade6:	4690      	mov	r8, r2
   8ade8:	7859      	ldrb	r1, [r3, #1]
   8adea:	b3b9      	cbz	r1, 8ae5c <__hexnan+0xb0>
   8adec:	4837      	ldr	r0, [pc, #220]	; (8aecc <__hexnan+0x120>)
   8adee:	5c40      	ldrb	r0, [r0, r1]
   8adf0:	b9f0      	cbnz	r0, 8ae30 <__hexnan+0x84>
   8adf2:	2920      	cmp	r1, #32
   8adf4:	d816      	bhi.n	8ae24 <__hexnan+0x78>
   8adf6:	45c4      	cmp	ip, r8
   8adf8:	da2e      	bge.n	8ae58 <__hexnan+0xac>
   8adfa:	42bc      	cmp	r4, r7
   8adfc:	d209      	bcs.n	8ae12 <__hexnan+0x66>
   8adfe:	2a07      	cmp	r2, #7
   8ae00:	dc07      	bgt.n	8ae12 <__hexnan+0x66>
   8ae02:	4620      	mov	r0, r4
   8ae04:	4639      	mov	r1, r7
   8ae06:	e88d 1008 	stmia.w	sp, {r3, ip}
   8ae0a:	f7ff ffbb 	bl	8ad84 <L_shift>
   8ae0e:	e89d 1008 	ldmia.w	sp, {r3, ip}
   8ae12:	42ac      	cmp	r4, r5
   8ae14:	d91f      	bls.n	8ae56 <__hexnan+0xaa>
   8ae16:	2200      	movs	r2, #0
   8ae18:	f844 2c04 	str.w	r2, [r4, #-4]
   8ae1c:	3c04      	subs	r4, #4
   8ae1e:	46c4      	mov	ip, r8
   8ae20:	4627      	mov	r7, r4
   8ae22:	e019      	b.n	8ae58 <__hexnan+0xac>
   8ae24:	2929      	cmp	r1, #41	; 0x29
   8ae26:	d14c      	bne.n	8aec2 <__hexnan+0x116>
   8ae28:	3302      	adds	r3, #2
   8ae2a:	f8cb 3000 	str.w	r3, [fp]
   8ae2e:	e015      	b.n	8ae5c <__hexnan+0xb0>
   8ae30:	3201      	adds	r2, #1
   8ae32:	2a08      	cmp	r2, #8
   8ae34:	f108 0801 	add.w	r8, r8, #1
   8ae38:	dd06      	ble.n	8ae48 <__hexnan+0x9c>
   8ae3a:	42ac      	cmp	r4, r5
   8ae3c:	d90c      	bls.n	8ae58 <__hexnan+0xac>
   8ae3e:	2200      	movs	r2, #0
   8ae40:	f844 2c04 	str.w	r2, [r4, #-4]
   8ae44:	3c04      	subs	r4, #4
   8ae46:	2201      	movs	r2, #1
   8ae48:	6821      	ldr	r1, [r4, #0]
   8ae4a:	f000 000f 	and.w	r0, r0, #15
   8ae4e:	ea40 1101 	orr.w	r1, r0, r1, lsl #4
   8ae52:	6021      	str	r1, [r4, #0]
   8ae54:	e000      	b.n	8ae58 <__hexnan+0xac>
   8ae56:	2208      	movs	r2, #8
   8ae58:	3301      	adds	r3, #1
   8ae5a:	e7c5      	b.n	8ade8 <__hexnan+0x3c>
   8ae5c:	f1b8 0f00 	cmp.w	r8, #0
   8ae60:	d02f      	beq.n	8aec2 <__hexnan+0x116>
   8ae62:	42bc      	cmp	r4, r7
   8ae64:	d205      	bcs.n	8ae72 <__hexnan+0xc6>
   8ae66:	2a07      	cmp	r2, #7
   8ae68:	dc03      	bgt.n	8ae72 <__hexnan+0xc6>
   8ae6a:	4620      	mov	r0, r4
   8ae6c:	4639      	mov	r1, r7
   8ae6e:	f7ff ff89 	bl	8ad84 <L_shift>
   8ae72:	42ac      	cmp	r4, r5
   8ae74:	d90d      	bls.n	8ae92 <__hexnan+0xe6>
   8ae76:	462a      	mov	r2, r5
   8ae78:	f854 3b04 	ldr.w	r3, [r4], #4
   8ae7c:	f842 3b04 	str.w	r3, [r2], #4
   8ae80:	45a1      	cmp	r9, r4
   8ae82:	4610      	mov	r0, r2
   8ae84:	d2f8      	bcs.n	8ae78 <__hexnan+0xcc>
   8ae86:	2100      	movs	r1, #0
   8ae88:	f840 1b04 	str.w	r1, [r0], #4
   8ae8c:	4548      	cmp	r0, r9
   8ae8e:	d9fa      	bls.n	8ae86 <__hexnan+0xda>
   8ae90:	e00e      	b.n	8aeb0 <__hexnan+0x104>
   8ae92:	f1ba 0f00 	cmp.w	sl, #0
   8ae96:	d00b      	beq.n	8aeb0 <__hexnan+0x104>
   8ae98:	f1ca 0a20 	rsb	sl, sl, #32
   8ae9c:	f04f 32ff 	mov.w	r2, #4294967295
   8aea0:	fa22 fa0a 	lsr.w	sl, r2, sl
   8aea4:	f856 0c04 	ldr.w	r0, [r6, #-4]
   8aea8:	ea00 010a 	and.w	r1, r0, sl
   8aeac:	f846 1c04 	str.w	r1, [r6, #-4]
   8aeb0:	f856 2c04 	ldr.w	r2, [r6, #-4]
   8aeb4:	3e04      	subs	r6, #4
   8aeb6:	b932      	cbnz	r2, 8aec6 <__hexnan+0x11a>
   8aeb8:	42b5      	cmp	r5, r6
   8aeba:	d1f9      	bne.n	8aeb0 <__hexnan+0x104>
   8aebc:	2301      	movs	r3, #1
   8aebe:	602b      	str	r3, [r5, #0]
   8aec0:	e001      	b.n	8aec6 <__hexnan+0x11a>
   8aec2:	2004      	movs	r0, #4
   8aec4:	e000      	b.n	8aec8 <__hexnan+0x11c>
   8aec6:	2005      	movs	r0, #5
   8aec8:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8aecc:	20071ba4 	.word	0x20071ba4

0008aed0 <_setlocale_r>:
   8aed0:	b510      	push	{r4, lr}
   8aed2:	4614      	mov	r4, r2
   8aed4:	b90a      	cbnz	r2, 8aeda <_setlocale_r+0xa>
   8aed6:	480c      	ldr	r0, [pc, #48]	; (8af08 <_setlocale_r+0x38>)
   8aed8:	bd10      	pop	{r4, pc}
   8aeda:	4610      	mov	r0, r2
   8aedc:	490b      	ldr	r1, [pc, #44]	; (8af0c <_setlocale_r+0x3c>)
   8aede:	f000 fff1 	bl	8bec4 <strcmp>
   8aee2:	2800      	cmp	r0, #0
   8aee4:	d0f7      	beq.n	8aed6 <_setlocale_r+0x6>
   8aee6:	4620      	mov	r0, r4
   8aee8:	4907      	ldr	r1, [pc, #28]	; (8af08 <_setlocale_r+0x38>)
   8aeea:	f000 ffeb 	bl	8bec4 <strcmp>
   8aeee:	2800      	cmp	r0, #0
   8aef0:	d0f1      	beq.n	8aed6 <_setlocale_r+0x6>
   8aef2:	4620      	mov	r0, r4
   8aef4:	4906      	ldr	r1, [pc, #24]	; (8af10 <_setlocale_r+0x40>)
   8aef6:	f000 ffe5 	bl	8bec4 <strcmp>
   8aefa:	4b03      	ldr	r3, [pc, #12]	; (8af08 <_setlocale_r+0x38>)
   8aefc:	2800      	cmp	r0, #0
   8aefe:	bf0c      	ite	eq
   8af00:	4618      	moveq	r0, r3
   8af02:	2000      	movne	r0, #0
   8af04:	bd10      	pop	{r4, pc}
   8af06:	bf00      	nop
   8af08:	0008dc14 	.word	0x0008dc14
   8af0c:	0008dc99 	.word	0x0008dc99
   8af10:	0008dca0 	.word	0x0008dca0

0008af14 <__locale_charset>:
   8af14:	4800      	ldr	r0, [pc, #0]	; (8af18 <__locale_charset+0x4>)
   8af16:	4770      	bx	lr
   8af18:	200706f8 	.word	0x200706f8

0008af1c <__locale_mb_cur_max>:
   8af1c:	4b01      	ldr	r3, [pc, #4]	; (8af24 <__locale_mb_cur_max+0x8>)
   8af1e:	6a18      	ldr	r0, [r3, #32]
   8af20:	4770      	bx	lr
   8af22:	bf00      	nop
   8af24:	200706f8 	.word	0x200706f8

0008af28 <__locale_msgcharset>:
   8af28:	4800      	ldr	r0, [pc, #0]	; (8af2c <__locale_msgcharset+0x4>)
   8af2a:	4770      	bx	lr
   8af2c:	2007071c 	.word	0x2007071c

0008af30 <__locale_cjk_lang>:
   8af30:	2000      	movs	r0, #0
   8af32:	4770      	bx	lr

0008af34 <_localeconv_r>:
   8af34:	4800      	ldr	r0, [pc, #0]	; (8af38 <_localeconv_r+0x4>)
   8af36:	4770      	bx	lr
   8af38:	2007073c 	.word	0x2007073c

0008af3c <setlocale>:
   8af3c:	460a      	mov	r2, r1
   8af3e:	4903      	ldr	r1, [pc, #12]	; (8af4c <setlocale+0x10>)
   8af40:	4603      	mov	r3, r0
   8af42:	6808      	ldr	r0, [r1, #0]
   8af44:	4619      	mov	r1, r3
   8af46:	f7ff bfc3 	b.w	8aed0 <_setlocale_r>
   8af4a:	bf00      	nop
   8af4c:	200702a0 	.word	0x200702a0

0008af50 <localeconv>:
   8af50:	4800      	ldr	r0, [pc, #0]	; (8af54 <localeconv+0x4>)
   8af52:	4770      	bx	lr
   8af54:	2007073c 	.word	0x2007073c

0008af58 <_malloc_r>:
   8af58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8af5c:	f101 040b 	add.w	r4, r1, #11
   8af60:	2c16      	cmp	r4, #22
   8af62:	4606      	mov	r6, r0
   8af64:	d903      	bls.n	8af6e <_malloc_r+0x16>
   8af66:	f034 0407 	bics.w	r4, r4, #7
   8af6a:	d501      	bpl.n	8af70 <_malloc_r+0x18>
   8af6c:	e002      	b.n	8af74 <_malloc_r+0x1c>
   8af6e:	2410      	movs	r4, #16
   8af70:	428c      	cmp	r4, r1
   8af72:	d202      	bcs.n	8af7a <_malloc_r+0x22>
   8af74:	250c      	movs	r5, #12
   8af76:	6035      	str	r5, [r6, #0]
   8af78:	e1d9      	b.n	8b32e <_malloc_r+0x3d6>
   8af7a:	4630      	mov	r0, r6
   8af7c:	f000 f9fc 	bl	8b378 <__malloc_lock>
   8af80:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   8af84:	d214      	bcs.n	8afb0 <_malloc_r+0x58>
   8af86:	4da0      	ldr	r5, [pc, #640]	; (8b208 <_malloc_r+0x2b0>)
   8af88:	08e1      	lsrs	r1, r4, #3
   8af8a:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   8af8e:	68c5      	ldr	r5, [r0, #12]
   8af90:	4285      	cmp	r5, r0
   8af92:	d105      	bne.n	8afa0 <_malloc_r+0x48>
   8af94:	f105 0308 	add.w	r3, r5, #8
   8af98:	696d      	ldr	r5, [r5, #20]
   8af9a:	1c8a      	adds	r2, r1, #2
   8af9c:	429d      	cmp	r5, r3
   8af9e:	d044      	beq.n	8b02a <_malloc_r+0xd2>
   8afa0:	68e8      	ldr	r0, [r5, #12]
   8afa2:	68a9      	ldr	r1, [r5, #8]
   8afa4:	686a      	ldr	r2, [r5, #4]
   8afa6:	60c8      	str	r0, [r1, #12]
   8afa8:	f022 0303 	bic.w	r3, r2, #3
   8afac:	6081      	str	r1, [r0, #8]
   8afae:	e059      	b.n	8b064 <_malloc_r+0x10c>
   8afb0:	0a62      	lsrs	r2, r4, #9
   8afb2:	d101      	bne.n	8afb8 <_malloc_r+0x60>
   8afb4:	08e2      	lsrs	r2, r4, #3
   8afb6:	e01b      	b.n	8aff0 <_malloc_r+0x98>
   8afb8:	2a04      	cmp	r2, #4
   8afba:	d802      	bhi.n	8afc2 <_malloc_r+0x6a>
   8afbc:	09a2      	lsrs	r2, r4, #6
   8afbe:	3238      	adds	r2, #56	; 0x38
   8afc0:	e016      	b.n	8aff0 <_malloc_r+0x98>
   8afc2:	2a14      	cmp	r2, #20
   8afc4:	d801      	bhi.n	8afca <_malloc_r+0x72>
   8afc6:	325b      	adds	r2, #91	; 0x5b
   8afc8:	e012      	b.n	8aff0 <_malloc_r+0x98>
   8afca:	2a54      	cmp	r2, #84	; 0x54
   8afcc:	d802      	bhi.n	8afd4 <_malloc_r+0x7c>
   8afce:	0b22      	lsrs	r2, r4, #12
   8afd0:	326e      	adds	r2, #110	; 0x6e
   8afd2:	e00d      	b.n	8aff0 <_malloc_r+0x98>
   8afd4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8afd8:	d802      	bhi.n	8afe0 <_malloc_r+0x88>
   8afda:	0be2      	lsrs	r2, r4, #15
   8afdc:	3277      	adds	r2, #119	; 0x77
   8afde:	e007      	b.n	8aff0 <_malloc_r+0x98>
   8afe0:	f240 5354 	movw	r3, #1364	; 0x554
   8afe4:	429a      	cmp	r2, r3
   8afe6:	d802      	bhi.n	8afee <_malloc_r+0x96>
   8afe8:	0ca2      	lsrs	r2, r4, #18
   8afea:	327c      	adds	r2, #124	; 0x7c
   8afec:	e000      	b.n	8aff0 <_malloc_r+0x98>
   8afee:	227e      	movs	r2, #126	; 0x7e
   8aff0:	4885      	ldr	r0, [pc, #532]	; (8b208 <_malloc_r+0x2b0>)
   8aff2:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
   8aff6:	68dd      	ldr	r5, [r3, #12]
   8aff8:	429d      	cmp	r5, r3
   8affa:	d015      	beq.n	8b028 <_malloc_r+0xd0>
   8affc:	6869      	ldr	r1, [r5, #4]
   8affe:	f021 0103 	bic.w	r1, r1, #3
   8b002:	1b08      	subs	r0, r1, r4
   8b004:	280f      	cmp	r0, #15
   8b006:	dd01      	ble.n	8b00c <_malloc_r+0xb4>
   8b008:	3a01      	subs	r2, #1
   8b00a:	e00d      	b.n	8b028 <_malloc_r+0xd0>
   8b00c:	2800      	cmp	r0, #0
   8b00e:	db09      	blt.n	8b024 <_malloc_r+0xcc>
   8b010:	68eb      	ldr	r3, [r5, #12]
   8b012:	68aa      	ldr	r2, [r5, #8]
   8b014:	60d3      	str	r3, [r2, #12]
   8b016:	609a      	str	r2, [r3, #8]
   8b018:	186b      	adds	r3, r5, r1
   8b01a:	685a      	ldr	r2, [r3, #4]
   8b01c:	f042 0001 	orr.w	r0, r2, #1
   8b020:	6058      	str	r0, [r3, #4]
   8b022:	e190      	b.n	8b346 <_malloc_r+0x3ee>
   8b024:	68ed      	ldr	r5, [r5, #12]
   8b026:	e7e7      	b.n	8aff8 <_malloc_r+0xa0>
   8b028:	3201      	adds	r2, #1
   8b02a:	4977      	ldr	r1, [pc, #476]	; (8b208 <_malloc_r+0x2b0>)
   8b02c:	690d      	ldr	r5, [r1, #16]
   8b02e:	f101 0708 	add.w	r7, r1, #8
   8b032:	42bd      	cmp	r5, r7
   8b034:	d068      	beq.n	8b108 <_malloc_r+0x1b0>
   8b036:	6868      	ldr	r0, [r5, #4]
   8b038:	f020 0303 	bic.w	r3, r0, #3
   8b03c:	1b18      	subs	r0, r3, r4
   8b03e:	280f      	cmp	r0, #15
   8b040:	dd0c      	ble.n	8b05c <_malloc_r+0x104>
   8b042:	192b      	adds	r3, r5, r4
   8b044:	614b      	str	r3, [r1, #20]
   8b046:	610b      	str	r3, [r1, #16]
   8b048:	f044 0401 	orr.w	r4, r4, #1
   8b04c:	f040 0101 	orr.w	r1, r0, #1
   8b050:	606c      	str	r4, [r5, #4]
   8b052:	60df      	str	r7, [r3, #12]
   8b054:	609f      	str	r7, [r3, #8]
   8b056:	6059      	str	r1, [r3, #4]
   8b058:	5018      	str	r0, [r3, r0]
   8b05a:	e174      	b.n	8b346 <_malloc_r+0x3ee>
   8b05c:	2800      	cmp	r0, #0
   8b05e:	614f      	str	r7, [r1, #20]
   8b060:	610f      	str	r7, [r1, #16]
   8b062:	db01      	blt.n	8b068 <_malloc_r+0x110>
   8b064:	18eb      	adds	r3, r5, r3
   8b066:	e7d8      	b.n	8b01a <_malloc_r+0xc2>
   8b068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8b06c:	d20f      	bcs.n	8b08e <_malloc_r+0x136>
   8b06e:	08db      	lsrs	r3, r3, #3
   8b070:	1098      	asrs	r0, r3, #2
   8b072:	2701      	movs	r7, #1
   8b074:	fa07 f700 	lsl.w	r7, r7, r0
   8b078:	6848      	ldr	r0, [r1, #4]
   8b07a:	4307      	orrs	r7, r0
   8b07c:	604f      	str	r7, [r1, #4]
   8b07e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   8b082:	688b      	ldr	r3, [r1, #8]
   8b084:	60e9      	str	r1, [r5, #12]
   8b086:	60ab      	str	r3, [r5, #8]
   8b088:	60dd      	str	r5, [r3, #12]
   8b08a:	608d      	str	r5, [r1, #8]
   8b08c:	e03c      	b.n	8b108 <_malloc_r+0x1b0>
   8b08e:	0a58      	lsrs	r0, r3, #9
   8b090:	2804      	cmp	r0, #4
   8b092:	d802      	bhi.n	8b09a <_malloc_r+0x142>
   8b094:	0998      	lsrs	r0, r3, #6
   8b096:	3038      	adds	r0, #56	; 0x38
   8b098:	e016      	b.n	8b0c8 <_malloc_r+0x170>
   8b09a:	2814      	cmp	r0, #20
   8b09c:	d801      	bhi.n	8b0a2 <_malloc_r+0x14a>
   8b09e:	305b      	adds	r0, #91	; 0x5b
   8b0a0:	e012      	b.n	8b0c8 <_malloc_r+0x170>
   8b0a2:	2854      	cmp	r0, #84	; 0x54
   8b0a4:	d802      	bhi.n	8b0ac <_malloc_r+0x154>
   8b0a6:	0b18      	lsrs	r0, r3, #12
   8b0a8:	306e      	adds	r0, #110	; 0x6e
   8b0aa:	e00d      	b.n	8b0c8 <_malloc_r+0x170>
   8b0ac:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   8b0b0:	d802      	bhi.n	8b0b8 <_malloc_r+0x160>
   8b0b2:	0bd8      	lsrs	r0, r3, #15
   8b0b4:	3077      	adds	r0, #119	; 0x77
   8b0b6:	e007      	b.n	8b0c8 <_malloc_r+0x170>
   8b0b8:	f240 5754 	movw	r7, #1364	; 0x554
   8b0bc:	42b8      	cmp	r0, r7
   8b0be:	d802      	bhi.n	8b0c6 <_malloc_r+0x16e>
   8b0c0:	0c98      	lsrs	r0, r3, #18
   8b0c2:	307c      	adds	r0, #124	; 0x7c
   8b0c4:	e000      	b.n	8b0c8 <_malloc_r+0x170>
   8b0c6:	207e      	movs	r0, #126	; 0x7e
   8b0c8:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8b208 <_malloc_r+0x2b0>
   8b0cc:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
   8b0d0:	68b9      	ldr	r1, [r7, #8]
   8b0d2:	42b9      	cmp	r1, r7
   8b0d4:	d10e      	bne.n	8b0f4 <_malloc_r+0x19c>
   8b0d6:	1087      	asrs	r7, r0, #2
   8b0d8:	2301      	movs	r3, #1
   8b0da:	fa03 f007 	lsl.w	r0, r3, r7
   8b0de:	f8de 7004 	ldr.w	r7, [lr, #4]
   8b0e2:	ea40 0307 	orr.w	r3, r0, r7
   8b0e6:	f8ce 3004 	str.w	r3, [lr, #4]
   8b0ea:	4608      	mov	r0, r1
   8b0ec:	e008      	b.n	8b100 <_malloc_r+0x1a8>
   8b0ee:	6889      	ldr	r1, [r1, #8]
   8b0f0:	42b9      	cmp	r1, r7
   8b0f2:	d004      	beq.n	8b0fe <_malloc_r+0x1a6>
   8b0f4:	6848      	ldr	r0, [r1, #4]
   8b0f6:	f020 0003 	bic.w	r0, r0, #3
   8b0fa:	4283      	cmp	r3, r0
   8b0fc:	d3f7      	bcc.n	8b0ee <_malloc_r+0x196>
   8b0fe:	68c8      	ldr	r0, [r1, #12]
   8b100:	60e8      	str	r0, [r5, #12]
   8b102:	60a9      	str	r1, [r5, #8]
   8b104:	60cd      	str	r5, [r1, #12]
   8b106:	6085      	str	r5, [r0, #8]
   8b108:	1095      	asrs	r5, r2, #2
   8b10a:	2001      	movs	r0, #1
   8b10c:	fa00 f305 	lsl.w	r3, r0, r5
   8b110:	4f3d      	ldr	r7, [pc, #244]	; (8b208 <_malloc_r+0x2b0>)
   8b112:	6879      	ldr	r1, [r7, #4]
   8b114:	428b      	cmp	r3, r1
   8b116:	d85d      	bhi.n	8b1d4 <_malloc_r+0x27c>
   8b118:	420b      	tst	r3, r1
   8b11a:	d105      	bne.n	8b128 <_malloc_r+0x1d0>
   8b11c:	f022 0203 	bic.w	r2, r2, #3
   8b120:	005b      	lsls	r3, r3, #1
   8b122:	3204      	adds	r2, #4
   8b124:	420b      	tst	r3, r1
   8b126:	d0fb      	beq.n	8b120 <_malloc_r+0x1c8>
   8b128:	4d37      	ldr	r5, [pc, #220]	; (8b208 <_malloc_r+0x2b0>)
   8b12a:	4610      	mov	r0, r2
   8b12c:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
   8b130:	4677      	mov	r7, lr
   8b132:	68fd      	ldr	r5, [r7, #12]
   8b134:	42bd      	cmp	r5, r7
   8b136:	d02d      	beq.n	8b194 <_malloc_r+0x23c>
   8b138:	6869      	ldr	r1, [r5, #4]
   8b13a:	f021 0c03 	bic.w	ip, r1, #3
   8b13e:	ebc4 010c 	rsb	r1, r4, ip
   8b142:	290f      	cmp	r1, #15
   8b144:	dd13      	ble.n	8b16e <_malloc_r+0x216>
   8b146:	192b      	adds	r3, r5, r4
   8b148:	f044 0401 	orr.w	r4, r4, #1
   8b14c:	68ea      	ldr	r2, [r5, #12]
   8b14e:	606c      	str	r4, [r5, #4]
   8b150:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8b154:	5059      	str	r1, [r3, r1]
   8b156:	60c2      	str	r2, [r0, #12]
   8b158:	6090      	str	r0, [r2, #8]
   8b15a:	4a2b      	ldr	r2, [pc, #172]	; (8b208 <_malloc_r+0x2b0>)
   8b15c:	f041 0001 	orr.w	r0, r1, #1
   8b160:	6153      	str	r3, [r2, #20]
   8b162:	6113      	str	r3, [r2, #16]
   8b164:	3208      	adds	r2, #8
   8b166:	60da      	str	r2, [r3, #12]
   8b168:	609a      	str	r2, [r3, #8]
   8b16a:	6058      	str	r0, [r3, #4]
   8b16c:	e00c      	b.n	8b188 <_malloc_r+0x230>
   8b16e:	2900      	cmp	r1, #0
   8b170:	db0e      	blt.n	8b190 <_malloc_r+0x238>
   8b172:	eb05 000c 	add.w	r0, r5, ip
   8b176:	6842      	ldr	r2, [r0, #4]
   8b178:	68e9      	ldr	r1, [r5, #12]
   8b17a:	f042 0301 	orr.w	r3, r2, #1
   8b17e:	6043      	str	r3, [r0, #4]
   8b180:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8b184:	60c1      	str	r1, [r0, #12]
   8b186:	6088      	str	r0, [r1, #8]
   8b188:	4630      	mov	r0, r6
   8b18a:	f000 f8f6 	bl	8b37a <__malloc_unlock>
   8b18e:	e0de      	b.n	8b34e <_malloc_r+0x3f6>
   8b190:	68ed      	ldr	r5, [r5, #12]
   8b192:	e7cf      	b.n	8b134 <_malloc_r+0x1dc>
   8b194:	3001      	adds	r0, #1
   8b196:	0781      	lsls	r1, r0, #30
   8b198:	f105 0708 	add.w	r7, r5, #8
   8b19c:	d1c9      	bne.n	8b132 <_malloc_r+0x1da>
   8b19e:	4671      	mov	r1, lr
   8b1a0:	0795      	lsls	r5, r2, #30
   8b1a2:	d105      	bne.n	8b1b0 <_malloc_r+0x258>
   8b1a4:	4a18      	ldr	r2, [pc, #96]	; (8b208 <_malloc_r+0x2b0>)
   8b1a6:	6855      	ldr	r5, [r2, #4]
   8b1a8:	ea25 0503 	bic.w	r5, r5, r3
   8b1ac:	6055      	str	r5, [r2, #4]
   8b1ae:	e005      	b.n	8b1bc <_malloc_r+0x264>
   8b1b0:	f1a1 0708 	sub.w	r7, r1, #8
   8b1b4:	6809      	ldr	r1, [r1, #0]
   8b1b6:	3a01      	subs	r2, #1
   8b1b8:	42b9      	cmp	r1, r7
   8b1ba:	d0f1      	beq.n	8b1a0 <_malloc_r+0x248>
   8b1bc:	4f12      	ldr	r7, [pc, #72]	; (8b208 <_malloc_r+0x2b0>)
   8b1be:	005b      	lsls	r3, r3, #1
   8b1c0:	687f      	ldr	r7, [r7, #4]
   8b1c2:	42bb      	cmp	r3, r7
   8b1c4:	d806      	bhi.n	8b1d4 <_malloc_r+0x27c>
   8b1c6:	b12b      	cbz	r3, 8b1d4 <_malloc_r+0x27c>
   8b1c8:	4602      	mov	r2, r0
   8b1ca:	423b      	tst	r3, r7
   8b1cc:	d1ac      	bne.n	8b128 <_malloc_r+0x1d0>
   8b1ce:	3204      	adds	r2, #4
   8b1d0:	005b      	lsls	r3, r3, #1
   8b1d2:	e7fa      	b.n	8b1ca <_malloc_r+0x272>
   8b1d4:	4b0c      	ldr	r3, [pc, #48]	; (8b208 <_malloc_r+0x2b0>)
   8b1d6:	689f      	ldr	r7, [r3, #8]
   8b1d8:	4619      	mov	r1, r3
   8b1da:	6878      	ldr	r0, [r7, #4]
   8b1dc:	f020 0903 	bic.w	r9, r0, #3
   8b1e0:	45a1      	cmp	r9, r4
   8b1e2:	d304      	bcc.n	8b1ee <_malloc_r+0x296>
   8b1e4:	ebc4 0009 	rsb	r0, r4, r9
   8b1e8:	280f      	cmp	r0, #15
   8b1ea:	f300 80a2 	bgt.w	8b332 <_malloc_r+0x3da>
   8b1ee:	4a07      	ldr	r2, [pc, #28]	; (8b20c <_malloc_r+0x2b4>)
   8b1f0:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
   8b1f4:	6815      	ldr	r5, [r2, #0]
   8b1f6:	3301      	adds	r3, #1
   8b1f8:	eb07 0a09 	add.w	sl, r7, r9
   8b1fc:	eb04 0805 	add.w	r8, r4, r5
   8b200:	d106      	bne.n	8b210 <_malloc_r+0x2b8>
   8b202:	f108 0810 	add.w	r8, r8, #16
   8b206:	e00b      	b.n	8b220 <_malloc_r+0x2c8>
   8b208:	20070774 	.word	0x20070774
   8b20c:	200716b8 	.word	0x200716b8
   8b210:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   8b214:	f100 010f 	add.w	r1, r0, #15
   8b218:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   8b21c:	f022 080f 	bic.w	r8, r2, #15
   8b220:	4630      	mov	r0, r6
   8b222:	4641      	mov	r1, r8
   8b224:	f000 fe3a 	bl	8be9c <_sbrk_r>
   8b228:	1c42      	adds	r2, r0, #1
   8b22a:	4605      	mov	r5, r0
   8b22c:	d071      	beq.n	8b312 <_malloc_r+0x3ba>
   8b22e:	4550      	cmp	r0, sl
   8b230:	d202      	bcs.n	8b238 <_malloc_r+0x2e0>
   8b232:	4b48      	ldr	r3, [pc, #288]	; (8b354 <_malloc_r+0x3fc>)
   8b234:	429f      	cmp	r7, r3
   8b236:	d16c      	bne.n	8b312 <_malloc_r+0x3ba>
   8b238:	4847      	ldr	r0, [pc, #284]	; (8b358 <_malloc_r+0x400>)
   8b23a:	4555      	cmp	r5, sl
   8b23c:	6841      	ldr	r1, [r0, #4]
   8b23e:	4a45      	ldr	r2, [pc, #276]	; (8b354 <_malloc_r+0x3fc>)
   8b240:	eb08 0301 	add.w	r3, r8, r1
   8b244:	6043      	str	r3, [r0, #4]
   8b246:	d107      	bne.n	8b258 <_malloc_r+0x300>
   8b248:	0529      	lsls	r1, r5, #20
   8b24a:	d105      	bne.n	8b258 <_malloc_r+0x300>
   8b24c:	6895      	ldr	r5, [r2, #8]
   8b24e:	44c8      	add	r8, r9
   8b250:	f048 0001 	orr.w	r0, r8, #1
   8b254:	6068      	str	r0, [r5, #4]
   8b256:	e051      	b.n	8b2fc <_malloc_r+0x3a4>
   8b258:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   8b25c:	1c42      	adds	r2, r0, #1
   8b25e:	d103      	bne.n	8b268 <_malloc_r+0x310>
   8b260:	4a3c      	ldr	r2, [pc, #240]	; (8b354 <_malloc_r+0x3fc>)
   8b262:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
   8b266:	e005      	b.n	8b274 <_malloc_r+0x31c>
   8b268:	ebca 0a05 	rsb	sl, sl, r5
   8b26c:	eb03 010a 	add.w	r1, r3, sl
   8b270:	4b39      	ldr	r3, [pc, #228]	; (8b358 <_malloc_r+0x400>)
   8b272:	6059      	str	r1, [r3, #4]
   8b274:	f015 0007 	ands.w	r0, r5, #7
   8b278:	bf1c      	itt	ne
   8b27a:	f1c0 0008 	rsbne	r0, r0, #8
   8b27e:	182d      	addne	r5, r5, r0
   8b280:	eb05 0c08 	add.w	ip, r5, r8
   8b284:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   8b288:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
   8b28c:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
   8b290:	4641      	mov	r1, r8
   8b292:	4630      	mov	r0, r6
   8b294:	f000 fe02 	bl	8be9c <_sbrk_r>
   8b298:	4a2f      	ldr	r2, [pc, #188]	; (8b358 <_malloc_r+0x400>)
   8b29a:	1c43      	adds	r3, r0, #1
   8b29c:	6853      	ldr	r3, [r2, #4]
   8b29e:	bf08      	it	eq
   8b2a0:	f04f 0800 	moveq.w	r8, #0
   8b2a4:	eb08 0103 	add.w	r1, r8, r3
   8b2a8:	bf08      	it	eq
   8b2aa:	4628      	moveq	r0, r5
   8b2ac:	6051      	str	r1, [r2, #4]
   8b2ae:	1b40      	subs	r0, r0, r5
   8b2b0:	4a28      	ldr	r2, [pc, #160]	; (8b354 <_malloc_r+0x3fc>)
   8b2b2:	eb00 0308 	add.w	r3, r0, r8
   8b2b6:	f043 0101 	orr.w	r1, r3, #1
   8b2ba:	4297      	cmp	r7, r2
   8b2bc:	6095      	str	r5, [r2, #8]
   8b2be:	6069      	str	r1, [r5, #4]
   8b2c0:	d01c      	beq.n	8b2fc <_malloc_r+0x3a4>
   8b2c2:	f1b9 0f0f 	cmp.w	r9, #15
   8b2c6:	d802      	bhi.n	8b2ce <_malloc_r+0x376>
   8b2c8:	2201      	movs	r2, #1
   8b2ca:	606a      	str	r2, [r5, #4]
   8b2cc:	e021      	b.n	8b312 <_malloc_r+0x3ba>
   8b2ce:	687d      	ldr	r5, [r7, #4]
   8b2d0:	f1a9 090c 	sub.w	r9, r9, #12
   8b2d4:	f029 0907 	bic.w	r9, r9, #7
   8b2d8:	f005 0201 	and.w	r2, r5, #1
   8b2dc:	2105      	movs	r1, #5
   8b2de:	eb07 0309 	add.w	r3, r7, r9
   8b2e2:	ea49 0002 	orr.w	r0, r9, r2
   8b2e6:	f1b9 0f0f 	cmp.w	r9, #15
   8b2ea:	6078      	str	r0, [r7, #4]
   8b2ec:	6059      	str	r1, [r3, #4]
   8b2ee:	6099      	str	r1, [r3, #8]
   8b2f0:	d904      	bls.n	8b2fc <_malloc_r+0x3a4>
   8b2f2:	4630      	mov	r0, r6
   8b2f4:	f107 0108 	add.w	r1, r7, #8
   8b2f8:	f7ff f9f8 	bl	8a6ec <_free_r>
   8b2fc:	4a16      	ldr	r2, [pc, #88]	; (8b358 <_malloc_r+0x400>)
   8b2fe:	6853      	ldr	r3, [r2, #4]
   8b300:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   8b302:	6b15      	ldr	r5, [r2, #48]	; 0x30
   8b304:	428b      	cmp	r3, r1
   8b306:	bf88      	it	hi
   8b308:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   8b30a:	42ab      	cmp	r3, r5
   8b30c:	bf84      	itt	hi
   8b30e:	4d12      	ldrhi	r5, [pc, #72]	; (8b358 <_malloc_r+0x400>)
   8b310:	632b      	strhi	r3, [r5, #48]	; 0x30
   8b312:	4810      	ldr	r0, [pc, #64]	; (8b354 <_malloc_r+0x3fc>)
   8b314:	6882      	ldr	r2, [r0, #8]
   8b316:	6853      	ldr	r3, [r2, #4]
   8b318:	f023 0103 	bic.w	r1, r3, #3
   8b31c:	42a1      	cmp	r1, r4
   8b31e:	ebc4 0001 	rsb	r0, r4, r1
   8b322:	d301      	bcc.n	8b328 <_malloc_r+0x3d0>
   8b324:	280f      	cmp	r0, #15
   8b326:	dc04      	bgt.n	8b332 <_malloc_r+0x3da>
   8b328:	4630      	mov	r0, r6
   8b32a:	f000 f826 	bl	8b37a <__malloc_unlock>
   8b32e:	2500      	movs	r5, #0
   8b330:	e00d      	b.n	8b34e <_malloc_r+0x3f6>
   8b332:	4a08      	ldr	r2, [pc, #32]	; (8b354 <_malloc_r+0x3fc>)
   8b334:	f044 0301 	orr.w	r3, r4, #1
   8b338:	6895      	ldr	r5, [r2, #8]
   8b33a:	f040 0101 	orr.w	r1, r0, #1
   8b33e:	192c      	adds	r4, r5, r4
   8b340:	606b      	str	r3, [r5, #4]
   8b342:	6094      	str	r4, [r2, #8]
   8b344:	6061      	str	r1, [r4, #4]
   8b346:	4630      	mov	r0, r6
   8b348:	f000 f817 	bl	8b37a <__malloc_unlock>
   8b34c:	3508      	adds	r5, #8
   8b34e:	4628      	mov	r0, r5
   8b350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8b354:	20070774 	.word	0x20070774
   8b358:	200716b8 	.word	0x200716b8

0008b35c <memchr>:
   8b35c:	b510      	push	{r4, lr}
   8b35e:	b2c9      	uxtb	r1, r1
   8b360:	4603      	mov	r3, r0
   8b362:	1882      	adds	r2, r0, r2
   8b364:	4293      	cmp	r3, r2
   8b366:	4618      	mov	r0, r3
   8b368:	d004      	beq.n	8b374 <memchr+0x18>
   8b36a:	7804      	ldrb	r4, [r0, #0]
   8b36c:	3301      	adds	r3, #1
   8b36e:	428c      	cmp	r4, r1
   8b370:	d1f8      	bne.n	8b364 <memchr+0x8>
   8b372:	e000      	b.n	8b376 <memchr+0x1a>
   8b374:	2000      	movs	r0, #0
   8b376:	bd10      	pop	{r4, pc}

0008b378 <__malloc_lock>:
   8b378:	4770      	bx	lr

0008b37a <__malloc_unlock>:
   8b37a:	4770      	bx	lr

0008b37c <_Balloc>:
   8b37c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8b37e:	b570      	push	{r4, r5, r6, lr}
   8b380:	4605      	mov	r5, r0
   8b382:	460c      	mov	r4, r1
   8b384:	b13b      	cbz	r3, 8b396 <_Balloc+0x1a>
   8b386:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   8b388:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
   8b38c:	b160      	cbz	r0, 8b3a8 <_Balloc+0x2c>
   8b38e:	6803      	ldr	r3, [r0, #0]
   8b390:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
   8b394:	e014      	b.n	8b3c0 <_Balloc+0x44>
   8b396:	2104      	movs	r1, #4
   8b398:	2221      	movs	r2, #33	; 0x21
   8b39a:	f001 fa2f 	bl	8c7fc <_calloc_r>
   8b39e:	64e8      	str	r0, [r5, #76]	; 0x4c
   8b3a0:	2800      	cmp	r0, #0
   8b3a2:	d1f0      	bne.n	8b386 <_Balloc+0xa>
   8b3a4:	2000      	movs	r0, #0
   8b3a6:	bd70      	pop	{r4, r5, r6, pc}
   8b3a8:	2101      	movs	r1, #1
   8b3aa:	fa01 f604 	lsl.w	r6, r1, r4
   8b3ae:	1d72      	adds	r2, r6, #5
   8b3b0:	4628      	mov	r0, r5
   8b3b2:	0092      	lsls	r2, r2, #2
   8b3b4:	f001 fa22 	bl	8c7fc <_calloc_r>
   8b3b8:	2800      	cmp	r0, #0
   8b3ba:	d0f3      	beq.n	8b3a4 <_Balloc+0x28>
   8b3bc:	6044      	str	r4, [r0, #4]
   8b3be:	6086      	str	r6, [r0, #8]
   8b3c0:	2100      	movs	r1, #0
   8b3c2:	6101      	str	r1, [r0, #16]
   8b3c4:	60c1      	str	r1, [r0, #12]
   8b3c6:	bd70      	pop	{r4, r5, r6, pc}

0008b3c8 <_Bfree>:
   8b3c8:	b131      	cbz	r1, 8b3d8 <_Bfree+0x10>
   8b3ca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8b3cc:	684a      	ldr	r2, [r1, #4]
   8b3ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8b3d2:	6008      	str	r0, [r1, #0]
   8b3d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8b3d8:	4770      	bx	lr

0008b3da <__multadd>:
   8b3da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b3de:	460c      	mov	r4, r1
   8b3e0:	461e      	mov	r6, r3
   8b3e2:	690d      	ldr	r5, [r1, #16]
   8b3e4:	4607      	mov	r7, r0
   8b3e6:	f101 0114 	add.w	r1, r1, #20
   8b3ea:	2300      	movs	r3, #0
   8b3ec:	6808      	ldr	r0, [r1, #0]
   8b3ee:	3301      	adds	r3, #1
   8b3f0:	fa1f fc80 	uxth.w	ip, r0
   8b3f4:	fb02 6c0c 	mla	ip, r2, ip, r6
   8b3f8:	0c06      	lsrs	r6, r0, #16
   8b3fa:	4356      	muls	r6, r2
   8b3fc:	eb06 401c 	add.w	r0, r6, ip, lsr #16
   8b400:	fa1f fc8c 	uxth.w	ip, ip
   8b404:	0c06      	lsrs	r6, r0, #16
   8b406:	eb0c 4000 	add.w	r0, ip, r0, lsl #16
   8b40a:	42ab      	cmp	r3, r5
   8b40c:	f841 0b04 	str.w	r0, [r1], #4
   8b410:	dbec      	blt.n	8b3ec <__multadd+0x12>
   8b412:	b1de      	cbz	r6, 8b44c <__multadd+0x72>
   8b414:	68a2      	ldr	r2, [r4, #8]
   8b416:	4295      	cmp	r5, r2
   8b418:	db13      	blt.n	8b442 <__multadd+0x68>
   8b41a:	6861      	ldr	r1, [r4, #4]
   8b41c:	4638      	mov	r0, r7
   8b41e:	3101      	adds	r1, #1
   8b420:	f7ff ffac 	bl	8b37c <_Balloc>
   8b424:	4680      	mov	r8, r0
   8b426:	6920      	ldr	r0, [r4, #16]
   8b428:	f104 010c 	add.w	r1, r4, #12
   8b42c:	1c83      	adds	r3, r0, #2
   8b42e:	009a      	lsls	r2, r3, #2
   8b430:	f108 000c 	add.w	r0, r8, #12
   8b434:	f7fd fdb2 	bl	88f9c <memcpy>
   8b438:	4621      	mov	r1, r4
   8b43a:	4638      	mov	r0, r7
   8b43c:	f7ff ffc4 	bl	8b3c8 <_Bfree>
   8b440:	4644      	mov	r4, r8
   8b442:	eb04 0285 	add.w	r2, r4, r5, lsl #2
   8b446:	3501      	adds	r5, #1
   8b448:	6156      	str	r6, [r2, #20]
   8b44a:	6125      	str	r5, [r4, #16]
   8b44c:	4620      	mov	r0, r4
   8b44e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0008b452 <__s2b>:
   8b452:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8b456:	4614      	mov	r4, r2
   8b458:	4698      	mov	r8, r3
   8b45a:	f103 0208 	add.w	r2, r3, #8
   8b45e:	2309      	movs	r3, #9
   8b460:	4605      	mov	r5, r0
   8b462:	460e      	mov	r6, r1
   8b464:	fb92 f0f3 	sdiv	r0, r2, r3
   8b468:	2100      	movs	r1, #0
   8b46a:	2301      	movs	r3, #1
   8b46c:	4298      	cmp	r0, r3
   8b46e:	dd02      	ble.n	8b476 <__s2b+0x24>
   8b470:	005b      	lsls	r3, r3, #1
   8b472:	3101      	adds	r1, #1
   8b474:	e7fa      	b.n	8b46c <__s2b+0x1a>
   8b476:	4628      	mov	r0, r5
   8b478:	f7ff ff80 	bl	8b37c <_Balloc>
   8b47c:	4601      	mov	r1, r0
   8b47e:	9808      	ldr	r0, [sp, #32]
   8b480:	2701      	movs	r7, #1
   8b482:	2c09      	cmp	r4, #9
   8b484:	6148      	str	r0, [r1, #20]
   8b486:	610f      	str	r7, [r1, #16]
   8b488:	dd12      	ble.n	8b4b0 <__s2b+0x5e>
   8b48a:	f106 0909 	add.w	r9, r6, #9
   8b48e:	464f      	mov	r7, r9
   8b490:	1936      	adds	r6, r6, r4
   8b492:	f817 3b01 	ldrb.w	r3, [r7], #1
   8b496:	220a      	movs	r2, #10
   8b498:	3b30      	subs	r3, #48	; 0x30
   8b49a:	4628      	mov	r0, r5
   8b49c:	f7ff ff9d 	bl	8b3da <__multadd>
   8b4a0:	42b7      	cmp	r7, r6
   8b4a2:	4601      	mov	r1, r0
   8b4a4:	d1f5      	bne.n	8b492 <__s2b+0x40>
   8b4a6:	eb09 0704 	add.w	r7, r9, r4
   8b4aa:	3f08      	subs	r7, #8
   8b4ac:	4626      	mov	r6, r4
   8b4ae:	e002      	b.n	8b4b6 <__s2b+0x64>
   8b4b0:	f106 070a 	add.w	r7, r6, #10
   8b4b4:	2609      	movs	r6, #9
   8b4b6:	4634      	mov	r4, r6
   8b4b8:	4544      	cmp	r4, r8
   8b4ba:	da09      	bge.n	8b4d0 <__s2b+0x7e>
   8b4bc:	1bba      	subs	r2, r7, r6
   8b4be:	5d13      	ldrb	r3, [r2, r4]
   8b4c0:	4628      	mov	r0, r5
   8b4c2:	220a      	movs	r2, #10
   8b4c4:	3b30      	subs	r3, #48	; 0x30
   8b4c6:	f7ff ff88 	bl	8b3da <__multadd>
   8b4ca:	3401      	adds	r4, #1
   8b4cc:	4601      	mov	r1, r0
   8b4ce:	e7f3      	b.n	8b4b8 <__s2b+0x66>
   8b4d0:	4608      	mov	r0, r1
   8b4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008b4d6 <__hi0bits>:
   8b4d6:	0c02      	lsrs	r2, r0, #16
   8b4d8:	4603      	mov	r3, r0
   8b4da:	0410      	lsls	r0, r2, #16
   8b4dc:	b910      	cbnz	r0, 8b4e4 <__hi0bits+0xe>
   8b4de:	041b      	lsls	r3, r3, #16
   8b4e0:	2010      	movs	r0, #16
   8b4e2:	e000      	b.n	8b4e6 <__hi0bits+0x10>
   8b4e4:	2000      	movs	r0, #0
   8b4e6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8b4ea:	d101      	bne.n	8b4f0 <__hi0bits+0x1a>
   8b4ec:	3008      	adds	r0, #8
   8b4ee:	021b      	lsls	r3, r3, #8
   8b4f0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8b4f4:	d101      	bne.n	8b4fa <__hi0bits+0x24>
   8b4f6:	3004      	adds	r0, #4
   8b4f8:	011b      	lsls	r3, r3, #4
   8b4fa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8b4fe:	d101      	bne.n	8b504 <__hi0bits+0x2e>
   8b500:	3002      	adds	r0, #2
   8b502:	009b      	lsls	r3, r3, #2
   8b504:	2b00      	cmp	r3, #0
   8b506:	db04      	blt.n	8b512 <__hi0bits+0x3c>
   8b508:	005b      	lsls	r3, r3, #1
   8b50a:	d501      	bpl.n	8b510 <__hi0bits+0x3a>
   8b50c:	3001      	adds	r0, #1
   8b50e:	4770      	bx	lr
   8b510:	2020      	movs	r0, #32
   8b512:	4770      	bx	lr

0008b514 <__lo0bits>:
   8b514:	6803      	ldr	r3, [r0, #0]
   8b516:	4602      	mov	r2, r0
   8b518:	f013 0007 	ands.w	r0, r3, #7
   8b51c:	d00b      	beq.n	8b536 <__lo0bits+0x22>
   8b51e:	07d9      	lsls	r1, r3, #31
   8b520:	d421      	bmi.n	8b566 <__lo0bits+0x52>
   8b522:	0798      	lsls	r0, r3, #30
   8b524:	d503      	bpl.n	8b52e <__lo0bits+0x1a>
   8b526:	0859      	lsrs	r1, r3, #1
   8b528:	6011      	str	r1, [r2, #0]
   8b52a:	2001      	movs	r0, #1
   8b52c:	4770      	bx	lr
   8b52e:	0898      	lsrs	r0, r3, #2
   8b530:	6010      	str	r0, [r2, #0]
   8b532:	2002      	movs	r0, #2
   8b534:	4770      	bx	lr
   8b536:	b299      	uxth	r1, r3
   8b538:	b909      	cbnz	r1, 8b53e <__lo0bits+0x2a>
   8b53a:	0c1b      	lsrs	r3, r3, #16
   8b53c:	2010      	movs	r0, #16
   8b53e:	f013 0fff 	tst.w	r3, #255	; 0xff
   8b542:	d101      	bne.n	8b548 <__lo0bits+0x34>
   8b544:	3008      	adds	r0, #8
   8b546:	0a1b      	lsrs	r3, r3, #8
   8b548:	0719      	lsls	r1, r3, #28
   8b54a:	d101      	bne.n	8b550 <__lo0bits+0x3c>
   8b54c:	3004      	adds	r0, #4
   8b54e:	091b      	lsrs	r3, r3, #4
   8b550:	0799      	lsls	r1, r3, #30
   8b552:	d101      	bne.n	8b558 <__lo0bits+0x44>
   8b554:	3002      	adds	r0, #2
   8b556:	089b      	lsrs	r3, r3, #2
   8b558:	07d9      	lsls	r1, r3, #31
   8b55a:	d402      	bmi.n	8b562 <__lo0bits+0x4e>
   8b55c:	085b      	lsrs	r3, r3, #1
   8b55e:	d004      	beq.n	8b56a <__lo0bits+0x56>
   8b560:	3001      	adds	r0, #1
   8b562:	6013      	str	r3, [r2, #0]
   8b564:	4770      	bx	lr
   8b566:	2000      	movs	r0, #0
   8b568:	4770      	bx	lr
   8b56a:	2020      	movs	r0, #32
   8b56c:	4770      	bx	lr

0008b56e <__i2b>:
   8b56e:	b510      	push	{r4, lr}
   8b570:	460c      	mov	r4, r1
   8b572:	2101      	movs	r1, #1
   8b574:	f7ff ff02 	bl	8b37c <_Balloc>
   8b578:	2201      	movs	r2, #1
   8b57a:	6144      	str	r4, [r0, #20]
   8b57c:	6102      	str	r2, [r0, #16]
   8b57e:	bd10      	pop	{r4, pc}

0008b580 <__multiply>:
   8b580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b584:	4616      	mov	r6, r2
   8b586:	6933      	ldr	r3, [r6, #16]
   8b588:	690a      	ldr	r2, [r1, #16]
   8b58a:	b085      	sub	sp, #20
   8b58c:	429a      	cmp	r2, r3
   8b58e:	460d      	mov	r5, r1
   8b590:	da01      	bge.n	8b596 <__multiply+0x16>
   8b592:	4635      	mov	r5, r6
   8b594:	460e      	mov	r6, r1
   8b596:	f8d5 8010 	ldr.w	r8, [r5, #16]
   8b59a:	6937      	ldr	r7, [r6, #16]
   8b59c:	68aa      	ldr	r2, [r5, #8]
   8b59e:	6869      	ldr	r1, [r5, #4]
   8b5a0:	eb08 0407 	add.w	r4, r8, r7
   8b5a4:	4294      	cmp	r4, r2
   8b5a6:	bfc8      	it	gt
   8b5a8:	3101      	addgt	r1, #1
   8b5aa:	f7ff fee7 	bl	8b37c <_Balloc>
   8b5ae:	eb00 0184 	add.w	r1, r0, r4, lsl #2
   8b5b2:	3114      	adds	r1, #20
   8b5b4:	f100 0314 	add.w	r3, r0, #20
   8b5b8:	9101      	str	r1, [sp, #4]
   8b5ba:	9a01      	ldr	r2, [sp, #4]
   8b5bc:	4293      	cmp	r3, r2
   8b5be:	d203      	bcs.n	8b5c8 <__multiply+0x48>
   8b5c0:	2200      	movs	r2, #0
   8b5c2:	f843 2b04 	str.w	r2, [r3], #4
   8b5c6:	e7f8      	b.n	8b5ba <__multiply+0x3a>
   8b5c8:	eb06 0787 	add.w	r7, r6, r7, lsl #2
   8b5cc:	f105 0314 	add.w	r3, r5, #20
   8b5d0:	eb05 0c88 	add.w	ip, r5, r8, lsl #2
   8b5d4:	3714      	adds	r7, #20
   8b5d6:	9302      	str	r3, [sp, #8]
   8b5d8:	f10c 0e14 	add.w	lr, ip, #20
   8b5dc:	9703      	str	r7, [sp, #12]
   8b5de:	f100 0318 	add.w	r3, r0, #24
   8b5e2:	f106 0214 	add.w	r2, r6, #20
   8b5e6:	9d03      	ldr	r5, [sp, #12]
   8b5e8:	4611      	mov	r1, r2
   8b5ea:	42aa      	cmp	r2, r5
   8b5ec:	d24c      	bcs.n	8b688 <__multiply+0x108>
   8b5ee:	8809      	ldrh	r1, [r1, #0]
   8b5f0:	3204      	adds	r2, #4
   8b5f2:	b309      	cbz	r1, 8b638 <__multiply+0xb8>
   8b5f4:	9f02      	ldr	r7, [sp, #8]
   8b5f6:	1f1d      	subs	r5, r3, #4
   8b5f8:	2600      	movs	r6, #0
   8b5fa:	f857 9b04 	ldr.w	r9, [r7], #4
   8b5fe:	f8d5 8000 	ldr.w	r8, [r5]
   8b602:	fa1f fb89 	uxth.w	fp, r9
   8b606:	fa1f fa88 	uxth.w	sl, r8
   8b60a:	fb01 ac0b 	mla	ip, r1, fp, sl
   8b60e:	ea4f 4919 	mov.w	r9, r9, lsr #16
   8b612:	eb0c 0a06 	add.w	sl, ip, r6
   8b616:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8b61a:	fb01 6809 	mla	r8, r1, r9, r6
   8b61e:	fa1f fc8a 	uxth.w	ip, sl
   8b622:	eb08 481a 	add.w	r8, r8, sl, lsr #16
   8b626:	ea4c 4a08 	orr.w	sl, ip, r8, lsl #16
   8b62a:	45be      	cmp	lr, r7
   8b62c:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8b630:	f845 ab04 	str.w	sl, [r5], #4
   8b634:	d8e1      	bhi.n	8b5fa <__multiply+0x7a>
   8b636:	602e      	str	r6, [r5, #0]
   8b638:	f832 1c02 	ldrh.w	r1, [r2, #-2]
   8b63c:	b311      	cbz	r1, 8b684 <__multiply+0x104>
   8b63e:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8b642:	9f02      	ldr	r7, [sp, #8]
   8b644:	461d      	mov	r5, r3
   8b646:	f04f 0900 	mov.w	r9, #0
   8b64a:	f835 ac02 	ldrh.w	sl, [r5, #-2]
   8b64e:	f8b7 b000 	ldrh.w	fp, [r7]
   8b652:	b2b6      	uxth	r6, r6
   8b654:	fb01 ac0b 	mla	ip, r1, fp, sl
   8b658:	44e1      	add	r9, ip
   8b65a:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
   8b65e:	f845 6c04 	str.w	r6, [r5, #-4]
   8b662:	46a8      	mov	r8, r5
   8b664:	f857 6b04 	ldr.w	r6, [r7], #4
   8b668:	f8b8 a000 	ldrh.w	sl, [r8]
   8b66c:	0c36      	lsrs	r6, r6, #16
   8b66e:	fb01 a606 	mla	r6, r1, r6, sl
   8b672:	3504      	adds	r5, #4
   8b674:	eb06 4619 	add.w	r6, r6, r9, lsr #16
   8b678:	4577      	cmp	r7, lr
   8b67a:	ea4f 4916 	mov.w	r9, r6, lsr #16
   8b67e:	d3e4      	bcc.n	8b64a <__multiply+0xca>
   8b680:	f8c8 6000 	str.w	r6, [r8]
   8b684:	3304      	adds	r3, #4
   8b686:	e7ae      	b.n	8b5e6 <__multiply+0x66>
   8b688:	9b01      	ldr	r3, [sp, #4]
   8b68a:	2c00      	cmp	r4, #0
   8b68c:	dc03      	bgt.n	8b696 <__multiply+0x116>
   8b68e:	6104      	str	r4, [r0, #16]
   8b690:	b005      	add	sp, #20
   8b692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b696:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   8b69a:	2a00      	cmp	r2, #0
   8b69c:	d1f7      	bne.n	8b68e <__multiply+0x10e>
   8b69e:	3c01      	subs	r4, #1
   8b6a0:	e7f3      	b.n	8b68a <__multiply+0x10a>

0008b6a2 <__pow5mult>:
   8b6a2:	f012 0303 	ands.w	r3, r2, #3
   8b6a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b6aa:	4605      	mov	r5, r0
   8b6ac:	460e      	mov	r6, r1
   8b6ae:	4617      	mov	r7, r2
   8b6b0:	d007      	beq.n	8b6c2 <__pow5mult+0x20>
   8b6b2:	4a1c      	ldr	r2, [pc, #112]	; (8b724 <__pow5mult+0x82>)
   8b6b4:	1e5e      	subs	r6, r3, #1
   8b6b6:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
   8b6ba:	2300      	movs	r3, #0
   8b6bc:	f7ff fe8d 	bl	8b3da <__multadd>
   8b6c0:	4606      	mov	r6, r0
   8b6c2:	10bf      	asrs	r7, r7, #2
   8b6c4:	d02b      	beq.n	8b71e <__pow5mult+0x7c>
   8b6c6:	6cac      	ldr	r4, [r5, #72]	; 0x48
   8b6c8:	b994      	cbnz	r4, 8b6f0 <__pow5mult+0x4e>
   8b6ca:	4628      	mov	r0, r5
   8b6cc:	f240 2171 	movw	r1, #625	; 0x271
   8b6d0:	f7ff ff4d 	bl	8b56e <__i2b>
   8b6d4:	4604      	mov	r4, r0
   8b6d6:	64a8      	str	r0, [r5, #72]	; 0x48
   8b6d8:	2000      	movs	r0, #0
   8b6da:	6020      	str	r0, [r4, #0]
   8b6dc:	e008      	b.n	8b6f0 <__pow5mult+0x4e>
   8b6de:	107f      	asrs	r7, r7, #1
   8b6e0:	d01d      	beq.n	8b71e <__pow5mult+0x7c>
   8b6e2:	f8d4 8000 	ldr.w	r8, [r4]
   8b6e6:	4640      	mov	r0, r8
   8b6e8:	f1b8 0f00 	cmp.w	r8, #0
   8b6ec:	d00e      	beq.n	8b70c <__pow5mult+0x6a>
   8b6ee:	4604      	mov	r4, r0
   8b6f0:	07f8      	lsls	r0, r7, #31
   8b6f2:	d5f4      	bpl.n	8b6de <__pow5mult+0x3c>
   8b6f4:	4631      	mov	r1, r6
   8b6f6:	4622      	mov	r2, r4
   8b6f8:	4628      	mov	r0, r5
   8b6fa:	f7ff ff41 	bl	8b580 <__multiply>
   8b6fe:	4631      	mov	r1, r6
   8b700:	4680      	mov	r8, r0
   8b702:	4628      	mov	r0, r5
   8b704:	f7ff fe60 	bl	8b3c8 <_Bfree>
   8b708:	4646      	mov	r6, r8
   8b70a:	e7e8      	b.n	8b6de <__pow5mult+0x3c>
   8b70c:	4628      	mov	r0, r5
   8b70e:	4621      	mov	r1, r4
   8b710:	4622      	mov	r2, r4
   8b712:	f7ff ff35 	bl	8b580 <__multiply>
   8b716:	6020      	str	r0, [r4, #0]
   8b718:	f8c0 8000 	str.w	r8, [r0]
   8b71c:	e7e7      	b.n	8b6ee <__pow5mult+0x4c>
   8b71e:	4630      	mov	r0, r6
   8b720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b724:	0008dca8 	.word	0x0008dca8

0008b728 <__lshift>:
   8b728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b72c:	460c      	mov	r4, r1
   8b72e:	6923      	ldr	r3, [r4, #16]
   8b730:	ea4f 1862 	mov.w	r8, r2, asr #5
   8b734:	eb08 0a03 	add.w	sl, r8, r3
   8b738:	6849      	ldr	r1, [r1, #4]
   8b73a:	68a5      	ldr	r5, [r4, #8]
   8b73c:	4681      	mov	r9, r0
   8b73e:	4617      	mov	r7, r2
   8b740:	f10a 0601 	add.w	r6, sl, #1
   8b744:	42ae      	cmp	r6, r5
   8b746:	dd02      	ble.n	8b74e <__lshift+0x26>
   8b748:	3101      	adds	r1, #1
   8b74a:	006d      	lsls	r5, r5, #1
   8b74c:	e7fa      	b.n	8b744 <__lshift+0x1c>
   8b74e:	4648      	mov	r0, r9
   8b750:	f7ff fe14 	bl	8b37c <_Balloc>
   8b754:	2200      	movs	r2, #0
   8b756:	4605      	mov	r5, r0
   8b758:	f100 0014 	add.w	r0, r0, #20
   8b75c:	4542      	cmp	r2, r8
   8b75e:	da04      	bge.n	8b76a <__lshift+0x42>
   8b760:	2100      	movs	r1, #0
   8b762:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
   8b766:	3201      	adds	r2, #1
   8b768:	e7f8      	b.n	8b75c <__lshift+0x34>
   8b76a:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
   8b76e:	6922      	ldr	r2, [r4, #16]
   8b770:	eb05 0380 	add.w	r3, r5, r0, lsl #2
   8b774:	3314      	adds	r3, #20
   8b776:	eb04 0082 	add.w	r0, r4, r2, lsl #2
   8b77a:	f017 071f 	ands.w	r7, r7, #31
   8b77e:	f104 0114 	add.w	r1, r4, #20
   8b782:	f100 0e14 	add.w	lr, r0, #20
   8b786:	d014      	beq.n	8b7b2 <__lshift+0x8a>
   8b788:	4618      	mov	r0, r3
   8b78a:	f1c7 0c20 	rsb	ip, r7, #32
   8b78e:	2300      	movs	r3, #0
   8b790:	680a      	ldr	r2, [r1, #0]
   8b792:	fa02 f207 	lsl.w	r2, r2, r7
   8b796:	4313      	orrs	r3, r2
   8b798:	f840 3b04 	str.w	r3, [r0], #4
   8b79c:	f851 3b04 	ldr.w	r3, [r1], #4
   8b7a0:	4571      	cmp	r1, lr
   8b7a2:	fa23 f30c 	lsr.w	r3, r3, ip
   8b7a6:	d3f3      	bcc.n	8b790 <__lshift+0x68>
   8b7a8:	6003      	str	r3, [r0, #0]
   8b7aa:	b143      	cbz	r3, 8b7be <__lshift+0x96>
   8b7ac:	f10a 0602 	add.w	r6, sl, #2
   8b7b0:	e005      	b.n	8b7be <__lshift+0x96>
   8b7b2:	f851 2b04 	ldr.w	r2, [r1], #4
   8b7b6:	458e      	cmp	lr, r1
   8b7b8:	f843 2b04 	str.w	r2, [r3], #4
   8b7bc:	d8f9      	bhi.n	8b7b2 <__lshift+0x8a>
   8b7be:	3e01      	subs	r6, #1
   8b7c0:	4648      	mov	r0, r9
   8b7c2:	612e      	str	r6, [r5, #16]
   8b7c4:	4621      	mov	r1, r4
   8b7c6:	f7ff fdff 	bl	8b3c8 <_Bfree>
   8b7ca:	4628      	mov	r0, r5
   8b7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0008b7d0 <__mcmp>:
   8b7d0:	4603      	mov	r3, r0
   8b7d2:	690a      	ldr	r2, [r1, #16]
   8b7d4:	6900      	ldr	r0, [r0, #16]
   8b7d6:	b530      	push	{r4, r5, lr}
   8b7d8:	1a80      	subs	r0, r0, r2
   8b7da:	d115      	bne.n	8b808 <__mcmp+0x38>
   8b7dc:	1d15      	adds	r5, r2, #4
   8b7de:	00aa      	lsls	r2, r5, #2
   8b7e0:	f103 0414 	add.w	r4, r3, #20
   8b7e4:	1889      	adds	r1, r1, r2
   8b7e6:	189b      	adds	r3, r3, r2
   8b7e8:	3304      	adds	r3, #4
   8b7ea:	1d0a      	adds	r2, r1, #4
   8b7ec:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8b7f0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8b7f4:	428d      	cmp	r5, r1
   8b7f6:	d003      	beq.n	8b800 <__mcmp+0x30>
   8b7f8:	d205      	bcs.n	8b806 <__mcmp+0x36>
   8b7fa:	f04f 30ff 	mov.w	r0, #4294967295
   8b7fe:	bd30      	pop	{r4, r5, pc}
   8b800:	429c      	cmp	r4, r3
   8b802:	d3f3      	bcc.n	8b7ec <__mcmp+0x1c>
   8b804:	bd30      	pop	{r4, r5, pc}
   8b806:	2001      	movs	r0, #1
   8b808:	bd30      	pop	{r4, r5, pc}

0008b80a <__mdiff>:
   8b80a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b80e:	4606      	mov	r6, r0
   8b810:	460c      	mov	r4, r1
   8b812:	4608      	mov	r0, r1
   8b814:	4611      	mov	r1, r2
   8b816:	4615      	mov	r5, r2
   8b818:	f7ff ffda 	bl	8b7d0 <__mcmp>
   8b81c:	1e07      	subs	r7, r0, #0
   8b81e:	d108      	bne.n	8b832 <__mdiff+0x28>
   8b820:	4639      	mov	r1, r7
   8b822:	4630      	mov	r0, r6
   8b824:	f7ff fdaa 	bl	8b37c <_Balloc>
   8b828:	2101      	movs	r1, #1
   8b82a:	6101      	str	r1, [r0, #16]
   8b82c:	6147      	str	r7, [r0, #20]
   8b82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8b832:	db01      	blt.n	8b838 <__mdiff+0x2e>
   8b834:	2700      	movs	r7, #0
   8b836:	e003      	b.n	8b840 <__mdiff+0x36>
   8b838:	4623      	mov	r3, r4
   8b83a:	2701      	movs	r7, #1
   8b83c:	462c      	mov	r4, r5
   8b83e:	461d      	mov	r5, r3
   8b840:	6861      	ldr	r1, [r4, #4]
   8b842:	4630      	mov	r0, r6
   8b844:	f7ff fd9a 	bl	8b37c <_Balloc>
   8b848:	692a      	ldr	r2, [r5, #16]
   8b84a:	6923      	ldr	r3, [r4, #16]
   8b84c:	eb05 0182 	add.w	r1, r5, r2, lsl #2
   8b850:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   8b854:	60c7      	str	r7, [r0, #12]
   8b856:	f10c 0c14 	add.w	ip, ip, #20
   8b85a:	f101 0814 	add.w	r8, r1, #20
   8b85e:	3414      	adds	r4, #20
   8b860:	3514      	adds	r5, #20
   8b862:	f100 0714 	add.w	r7, r0, #20
   8b866:	2200      	movs	r2, #0
   8b868:	f854 6b04 	ldr.w	r6, [r4], #4
   8b86c:	f855 1b04 	ldr.w	r1, [r5], #4
   8b870:	fa1f f986 	uxth.w	r9, r6
   8b874:	444a      	add	r2, r9
   8b876:	fa1f fa81 	uxth.w	sl, r1
   8b87a:	0c09      	lsrs	r1, r1, #16
   8b87c:	ebca 0e02 	rsb	lr, sl, r2
   8b880:	ebc1 4616 	rsb	r6, r1, r6, lsr #16
   8b884:	eb06 412e 	add.w	r1, r6, lr, asr #16
   8b888:	fa1f f98e 	uxth.w	r9, lr
   8b88c:	140a      	asrs	r2, r1, #16
   8b88e:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   8b892:	f847 1b04 	str.w	r1, [r7], #4
   8b896:	45a8      	cmp	r8, r5
   8b898:	4626      	mov	r6, r4
   8b89a:	4639      	mov	r1, r7
   8b89c:	d8e4      	bhi.n	8b868 <__mdiff+0x5e>
   8b89e:	4566      	cmp	r6, ip
   8b8a0:	d20d      	bcs.n	8b8be <__mdiff+0xb4>
   8b8a2:	f856 4b04 	ldr.w	r4, [r6], #4
   8b8a6:	b2a5      	uxth	r5, r4
   8b8a8:	18ad      	adds	r5, r5, r2
   8b8aa:	0c22      	lsrs	r2, r4, #16
   8b8ac:	eb02 4425 	add.w	r4, r2, r5, asr #16
   8b8b0:	b2ad      	uxth	r5, r5
   8b8b2:	1422      	asrs	r2, r4, #16
   8b8b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   8b8b8:	f841 4b04 	str.w	r4, [r1], #4
   8b8bc:	e7ef      	b.n	8b89e <__mdiff+0x94>
   8b8be:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8b8c2:	b90a      	cbnz	r2, 8b8c8 <__mdiff+0xbe>
   8b8c4:	3b01      	subs	r3, #1
   8b8c6:	e7fa      	b.n	8b8be <__mdiff+0xb4>
   8b8c8:	6103      	str	r3, [r0, #16]
   8b8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0008b8ce <__ulp>:
   8b8ce:	4b0f      	ldr	r3, [pc, #60]	; (8b90c <__ulp+0x3e>)
   8b8d0:	400b      	ands	r3, r1
   8b8d2:	f1a3 7050 	sub.w	r0, r3, #54525952	; 0x3400000
   8b8d6:	2800      	cmp	r0, #0
   8b8d8:	dd01      	ble.n	8b8de <__ulp+0x10>
   8b8da:	4601      	mov	r1, r0
   8b8dc:	e008      	b.n	8b8f0 <__ulp+0x22>
   8b8de:	4241      	negs	r1, r0
   8b8e0:	150b      	asrs	r3, r1, #20
   8b8e2:	2100      	movs	r1, #0
   8b8e4:	2b13      	cmp	r3, #19
   8b8e6:	dc05      	bgt.n	8b8f4 <__ulp+0x26>
   8b8e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   8b8ec:	fa40 f103 	asr.w	r1, r0, r3
   8b8f0:	2000      	movs	r0, #0
   8b8f2:	4770      	bx	lr
   8b8f4:	2b32      	cmp	r3, #50	; 0x32
   8b8f6:	f04f 0201 	mov.w	r2, #1
   8b8fa:	bfda      	itte	le
   8b8fc:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
   8b900:	fa02 f303 	lslle.w	r3, r2, r3
   8b904:	4613      	movgt	r3, r2
   8b906:	4618      	mov	r0, r3
   8b908:	4770      	bx	lr
   8b90a:	bf00      	nop
   8b90c:	7ff00000 	.word	0x7ff00000

0008b910 <__b2d>:
   8b910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8b914:	6903      	ldr	r3, [r0, #16]
   8b916:	4689      	mov	r9, r1
   8b918:	1d19      	adds	r1, r3, #4
   8b91a:	eb00 0881 	add.w	r8, r0, r1, lsl #2
   8b91e:	4646      	mov	r6, r8
   8b920:	f856 4b04 	ldr.w	r4, [r6], #4
   8b924:	f100 0714 	add.w	r7, r0, #20
   8b928:	4620      	mov	r0, r4
   8b92a:	f7ff fdd4 	bl	8b4d6 <__hi0bits>
   8b92e:	f1c0 0220 	rsb	r2, r0, #32
   8b932:	280a      	cmp	r0, #10
   8b934:	4645      	mov	r5, r8
   8b936:	f8c9 2000 	str.w	r2, [r9]
   8b93a:	dc14      	bgt.n	8b966 <__b2d+0x56>
   8b93c:	f1c0 010b 	rsb	r1, r0, #11
   8b940:	fa24 f501 	lsr.w	r5, r4, r1
   8b944:	45b8      	cmp	r8, r7
   8b946:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
   8b94a:	f445 1340 	orr.w	r3, r5, #3145728	; 0x300000
   8b94e:	bf8c      	ite	hi
   8b950:	f856 5c08 	ldrhi.w	r5, [r6, #-8]
   8b954:	2500      	movls	r5, #0
   8b956:	3015      	adds	r0, #21
   8b958:	fa25 f201 	lsr.w	r2, r5, r1
   8b95c:	fa04 f400 	lsl.w	r4, r4, r0
   8b960:	ea42 0004 	orr.w	r0, r2, r4
   8b964:	e025      	b.n	8b9b2 <__b2d+0xa2>
   8b966:	45b8      	cmp	r8, r7
   8b968:	d903      	bls.n	8b972 <__b2d+0x62>
   8b96a:	3d04      	subs	r5, #4
   8b96c:	f856 1c08 	ldr.w	r1, [r6, #-8]
   8b970:	e000      	b.n	8b974 <__b2d+0x64>
   8b972:	2100      	movs	r1, #0
   8b974:	f1b0 060b 	subs.w	r6, r0, #11
   8b978:	d016      	beq.n	8b9a8 <__b2d+0x98>
   8b97a:	fa04 f406 	lsl.w	r4, r4, r6
   8b97e:	f1c0 022b 	rsb	r2, r0, #43	; 0x2b
   8b982:	fa21 fc02 	lsr.w	ip, r1, r2
   8b986:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   8b98a:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   8b98e:	42bd      	cmp	r5, r7
   8b990:	ea44 030c 	orr.w	r3, r4, ip
   8b994:	bf8c      	ite	hi
   8b996:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
   8b99a:	2400      	movls	r4, #0
   8b99c:	fa24 f002 	lsr.w	r0, r4, r2
   8b9a0:	fa01 f106 	lsl.w	r1, r1, r6
   8b9a4:	4308      	orrs	r0, r1
   8b9a6:	e004      	b.n	8b9b2 <__b2d+0xa2>
   8b9a8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   8b9ac:	f444 1340 	orr.w	r3, r4, #3145728	; 0x300000
   8b9b0:	4608      	mov	r0, r1
   8b9b2:	4619      	mov	r1, r3
   8b9b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008b9b8 <__d2b>:
   8b9b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   8b9bc:	2101      	movs	r1, #1
   8b9be:	461d      	mov	r5, r3
   8b9c0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8b9c4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   8b9c8:	4614      	mov	r4, r2
   8b9ca:	f7ff fcd7 	bl	8b37c <_Balloc>
   8b9ce:	f3c5 570a 	ubfx	r7, r5, #20, #11
   8b9d2:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
   8b9d6:	4606      	mov	r6, r0
   8b9d8:	f423 0070 	bic.w	r0, r3, #15728640	; 0xf00000
   8b9dc:	b10f      	cbz	r7, 8b9e2 <__d2b+0x2a>
   8b9de:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   8b9e2:	9001      	str	r0, [sp, #4]
   8b9e4:	b1dc      	cbz	r4, 8ba1e <__d2b+0x66>
   8b9e6:	aa02      	add	r2, sp, #8
   8b9e8:	4668      	mov	r0, sp
   8b9ea:	f842 4d08 	str.w	r4, [r2, #-8]!
   8b9ee:	f7ff fd91 	bl	8b514 <__lo0bits>
   8b9f2:	9c00      	ldr	r4, [sp, #0]
   8b9f4:	b150      	cbz	r0, 8ba0c <__d2b+0x54>
   8b9f6:	9a01      	ldr	r2, [sp, #4]
   8b9f8:	f1c0 0320 	rsb	r3, r0, #32
   8b9fc:	fa02 f103 	lsl.w	r1, r2, r3
   8ba00:	fa22 f200 	lsr.w	r2, r2, r0
   8ba04:	430c      	orrs	r4, r1
   8ba06:	6174      	str	r4, [r6, #20]
   8ba08:	9201      	str	r2, [sp, #4]
   8ba0a:	e000      	b.n	8ba0e <__d2b+0x56>
   8ba0c:	6174      	str	r4, [r6, #20]
   8ba0e:	9a01      	ldr	r2, [sp, #4]
   8ba10:	2a00      	cmp	r2, #0
   8ba12:	bf0c      	ite	eq
   8ba14:	2401      	moveq	r4, #1
   8ba16:	2402      	movne	r4, #2
   8ba18:	61b2      	str	r2, [r6, #24]
   8ba1a:	6134      	str	r4, [r6, #16]
   8ba1c:	e007      	b.n	8ba2e <__d2b+0x76>
   8ba1e:	a801      	add	r0, sp, #4
   8ba20:	f7ff fd78 	bl	8b514 <__lo0bits>
   8ba24:	9901      	ldr	r1, [sp, #4]
   8ba26:	2401      	movs	r4, #1
   8ba28:	6171      	str	r1, [r6, #20]
   8ba2a:	6134      	str	r4, [r6, #16]
   8ba2c:	3020      	adds	r0, #32
   8ba2e:	b13f      	cbz	r7, 8ba40 <__d2b+0x88>
   8ba30:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
   8ba34:	183f      	adds	r7, r7, r0
   8ba36:	f8c9 7000 	str.w	r7, [r9]
   8ba3a:	f1c0 0135 	rsb	r1, r0, #53	; 0x35
   8ba3e:	e00a      	b.n	8ba56 <__d2b+0x9e>
   8ba40:	eb06 0384 	add.w	r3, r6, r4, lsl #2
   8ba44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8ba48:	f8c9 0000 	str.w	r0, [r9]
   8ba4c:	6918      	ldr	r0, [r3, #16]
   8ba4e:	f7ff fd42 	bl	8b4d6 <__hi0bits>
   8ba52:	0164      	lsls	r4, r4, #5
   8ba54:	1a21      	subs	r1, r4, r0
   8ba56:	f8c8 1000 	str.w	r1, [r8]
   8ba5a:	4630      	mov	r0, r6
   8ba5c:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

0008ba60 <__ratio>:
   8ba60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   8ba64:	460e      	mov	r6, r1
   8ba66:	4669      	mov	r1, sp
   8ba68:	4680      	mov	r8, r0
   8ba6a:	f7ff ff51 	bl	8b910 <__b2d>
   8ba6e:	460d      	mov	r5, r1
   8ba70:	4604      	mov	r4, r0
   8ba72:	a901      	add	r1, sp, #4
   8ba74:	4630      	mov	r0, r6
   8ba76:	f7ff ff4b 	bl	8b910 <__b2d>
   8ba7a:	9f00      	ldr	r7, [sp, #0]
   8ba7c:	460b      	mov	r3, r1
   8ba7e:	9901      	ldr	r1, [sp, #4]
   8ba80:	4602      	mov	r2, r0
   8ba82:	1a7f      	subs	r7, r7, r1
   8ba84:	f8d8 0010 	ldr.w	r0, [r8, #16]
   8ba88:	6931      	ldr	r1, [r6, #16]
   8ba8a:	1a40      	subs	r0, r0, r1
   8ba8c:	eb07 1140 	add.w	r1, r7, r0, lsl #5
   8ba90:	2900      	cmp	r1, #0
   8ba92:	bfd6      	itet	le
   8ba94:	eba3 5101 	suble.w	r1, r3, r1, lsl #20
   8ba98:	eb05 5501 	addgt.w	r5, r5, r1, lsl #20
   8ba9c:	460b      	movle	r3, r1
   8ba9e:	4620      	mov	r0, r4
   8baa0:	4629      	mov	r1, r5
   8baa2:	f7fd f881 	bl	88ba8 <__aeabi_ddiv>
   8baa6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0008baaa <_mprec_log10>:
   8baaa:	2817      	cmp	r0, #23
   8baac:	b510      	push	{r4, lr}
   8baae:	4604      	mov	r4, r0
   8bab0:	dc05      	bgt.n	8babe <_mprec_log10+0x14>
   8bab2:	4b07      	ldr	r3, [pc, #28]	; (8bad0 <_mprec_log10+0x26>)
   8bab4:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
   8bab8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   8babc:	bd10      	pop	{r4, pc}
   8babe:	4905      	ldr	r1, [pc, #20]	; (8bad4 <_mprec_log10+0x2a>)
   8bac0:	2000      	movs	r0, #0
   8bac2:	2200      	movs	r2, #0
   8bac4:	4b04      	ldr	r3, [pc, #16]	; (8bad8 <_mprec_log10+0x2e>)
   8bac6:	f7fc ff45 	bl	88954 <__aeabi_dmul>
   8baca:	3c01      	subs	r4, #1
   8bacc:	d1f9      	bne.n	8bac2 <_mprec_log10+0x18>
   8bace:	bd10      	pop	{r4, pc}
   8bad0:	0008dca8 	.word	0x0008dca8
   8bad4:	3ff00000 	.word	0x3ff00000
   8bad8:	40240000 	.word	0x40240000

0008badc <__copybits>:
   8badc:	3901      	subs	r1, #1
   8bade:	114b      	asrs	r3, r1, #5
   8bae0:	b510      	push	{r4, lr}
   8bae2:	1c59      	adds	r1, r3, #1
   8bae4:	6913      	ldr	r3, [r2, #16]
   8bae6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   8baea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8baee:	3314      	adds	r3, #20
   8baf0:	3214      	adds	r2, #20
   8baf2:	429a      	cmp	r2, r3
   8baf4:	d204      	bcs.n	8bb00 <__copybits+0x24>
   8baf6:	f852 4b04 	ldr.w	r4, [r2], #4
   8bafa:	f840 4b04 	str.w	r4, [r0], #4
   8bafe:	e7f8      	b.n	8baf2 <__copybits+0x16>
   8bb00:	4288      	cmp	r0, r1
   8bb02:	d203      	bcs.n	8bb0c <__copybits+0x30>
   8bb04:	2200      	movs	r2, #0
   8bb06:	f840 2b04 	str.w	r2, [r0], #4
   8bb0a:	e7f9      	b.n	8bb00 <__copybits+0x24>
   8bb0c:	bd10      	pop	{r4, pc}

0008bb0e <__any_on>:
   8bb0e:	6902      	ldr	r2, [r0, #16]
   8bb10:	114b      	asrs	r3, r1, #5
   8bb12:	4293      	cmp	r3, r2
   8bb14:	b530      	push	{r4, r5, lr}
   8bb16:	f100 0414 	add.w	r4, r0, #20
   8bb1a:	dc0d      	bgt.n	8bb38 <__any_on+0x2a>
   8bb1c:	da0d      	bge.n	8bb3a <__any_on+0x2c>
   8bb1e:	f011 011f 	ands.w	r1, r1, #31
   8bb22:	d00a      	beq.n	8bb3a <__any_on+0x2c>
   8bb24:	eb00 0583 	add.w	r5, r0, r3, lsl #2
   8bb28:	696a      	ldr	r2, [r5, #20]
   8bb2a:	fa22 f501 	lsr.w	r5, r2, r1
   8bb2e:	fa05 f101 	lsl.w	r1, r5, r1
   8bb32:	4291      	cmp	r1, r2
   8bb34:	d10f      	bne.n	8bb56 <__any_on+0x48>
   8bb36:	e000      	b.n	8bb3a <__any_on+0x2c>
   8bb38:	4613      	mov	r3, r2
   8bb3a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   8bb3e:	3014      	adds	r0, #20
   8bb40:	42a0      	cmp	r0, r4
   8bb42:	4602      	mov	r2, r0
   8bb44:	d905      	bls.n	8bb52 <__any_on+0x44>
   8bb46:	f852 1c04 	ldr.w	r1, [r2, #-4]
   8bb4a:	3804      	subs	r0, #4
   8bb4c:	2900      	cmp	r1, #0
   8bb4e:	d0f7      	beq.n	8bb40 <__any_on+0x32>
   8bb50:	e001      	b.n	8bb56 <__any_on+0x48>
   8bb52:	2000      	movs	r0, #0
   8bb54:	bd30      	pop	{r4, r5, pc}
   8bb56:	2001      	movs	r0, #1
   8bb58:	bd30      	pop	{r4, r5, pc}
   8bb5a:	bf00      	nop

0008bb5c <_realloc_r>:
   8bb5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bb60:	4681      	mov	r9, r0
   8bb62:	4616      	mov	r6, r2
   8bb64:	460c      	mov	r4, r1
   8bb66:	b921      	cbnz	r1, 8bb72 <_realloc_r+0x16>
   8bb68:	4611      	mov	r1, r2
   8bb6a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bb6e:	f7ff b9f3 	b.w	8af58 <_malloc_r>
   8bb72:	f7ff fc01 	bl	8b378 <__malloc_lock>
   8bb76:	f106 070b 	add.w	r7, r6, #11
   8bb7a:	f854 5c04 	ldr.w	r5, [r4, #-4]
   8bb7e:	2f16      	cmp	r7, #22
   8bb80:	f1a4 0b08 	sub.w	fp, r4, #8
   8bb84:	f025 0803 	bic.w	r8, r5, #3
   8bb88:	d903      	bls.n	8bb92 <_realloc_r+0x36>
   8bb8a:	f037 0707 	bics.w	r7, r7, #7
   8bb8e:	d501      	bpl.n	8bb94 <_realloc_r+0x38>
   8bb90:	e002      	b.n	8bb98 <_realloc_r+0x3c>
   8bb92:	2710      	movs	r7, #16
   8bb94:	42b7      	cmp	r7, r6
   8bb96:	d204      	bcs.n	8bba2 <_realloc_r+0x46>
   8bb98:	200c      	movs	r0, #12
   8bb9a:	f8c9 0000 	str.w	r0, [r9]
   8bb9e:	2600      	movs	r6, #0
   8bba0:	e145      	b.n	8be2e <_realloc_r+0x2d2>
   8bba2:	45b8      	cmp	r8, r7
   8bba4:	f280 811a 	bge.w	8bddc <_realloc_r+0x280>
   8bba8:	4aa2      	ldr	r2, [pc, #648]	; (8be34 <_realloc_r+0x2d8>)
   8bbaa:	eb0b 0308 	add.w	r3, fp, r8
   8bbae:	6891      	ldr	r1, [r2, #8]
   8bbb0:	428b      	cmp	r3, r1
   8bbb2:	d006      	beq.n	8bbc2 <_realloc_r+0x66>
   8bbb4:	6858      	ldr	r0, [r3, #4]
   8bbb6:	f020 0201 	bic.w	r2, r0, #1
   8bbba:	1898      	adds	r0, r3, r2
   8bbbc:	6842      	ldr	r2, [r0, #4]
   8bbbe:	07d0      	lsls	r0, r2, #31
   8bbc0:	d426      	bmi.n	8bc10 <_realloc_r+0xb4>
   8bbc2:	685a      	ldr	r2, [r3, #4]
   8bbc4:	428b      	cmp	r3, r1
   8bbc6:	f022 0003 	bic.w	r0, r2, #3
   8bbca:	eb00 0a08 	add.w	sl, r0, r8
   8bbce:	d118      	bne.n	8bc02 <_realloc_r+0xa6>
   8bbd0:	f107 0210 	add.w	r2, r7, #16
   8bbd4:	4592      	cmp	sl, r2
   8bbd6:	db1d      	blt.n	8bc14 <_realloc_r+0xb8>
   8bbd8:	ebc7 0a0a 	rsb	sl, r7, sl
   8bbdc:	eb0b 0507 	add.w	r5, fp, r7
   8bbe0:	f04a 0101 	orr.w	r1, sl, #1
   8bbe4:	6069      	str	r1, [r5, #4]
   8bbe6:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8bbea:	4e92      	ldr	r6, [pc, #584]	; (8be34 <_realloc_r+0x2d8>)
   8bbec:	f002 0301 	and.w	r3, r2, #1
   8bbf0:	431f      	orrs	r7, r3
   8bbf2:	60b5      	str	r5, [r6, #8]
   8bbf4:	f844 7c04 	str.w	r7, [r4, #-4]
   8bbf8:	4648      	mov	r0, r9
   8bbfa:	f7ff fbbe 	bl	8b37a <__malloc_unlock>
   8bbfe:	4626      	mov	r6, r4
   8bc00:	e115      	b.n	8be2e <_realloc_r+0x2d2>
   8bc02:	45ba      	cmp	sl, r7
   8bc04:	db06      	blt.n	8bc14 <_realloc_r+0xb8>
   8bc06:	68dd      	ldr	r5, [r3, #12]
   8bc08:	689e      	ldr	r6, [r3, #8]
   8bc0a:	60f5      	str	r5, [r6, #12]
   8bc0c:	60ae      	str	r6, [r5, #8]
   8bc0e:	e0e6      	b.n	8bdde <_realloc_r+0x282>
   8bc10:	2000      	movs	r0, #0
   8bc12:	4603      	mov	r3, r0
   8bc14:	07ea      	lsls	r2, r5, #31
   8bc16:	f100 8091 	bmi.w	8bd3c <_realloc_r+0x1e0>
   8bc1a:	f854 5c08 	ldr.w	r5, [r4, #-8]
   8bc1e:	ebc5 050b 	rsb	r5, r5, fp
   8bc22:	686a      	ldr	r2, [r5, #4]
   8bc24:	f022 0203 	bic.w	r2, r2, #3
   8bc28:	2b00      	cmp	r3, #0
   8bc2a:	d051      	beq.n	8bcd0 <_realloc_r+0x174>
   8bc2c:	eb02 0a08 	add.w	sl, r2, r8
   8bc30:	428b      	cmp	r3, r1
   8bc32:	4482      	add	sl, r0
   8bc34:	d145      	bne.n	8bcc2 <_realloc_r+0x166>
   8bc36:	f107 0310 	add.w	r3, r7, #16
   8bc3a:	459a      	cmp	sl, r3
   8bc3c:	db48      	blt.n	8bcd0 <_realloc_r+0x174>
   8bc3e:	462e      	mov	r6, r5
   8bc40:	68e9      	ldr	r1, [r5, #12]
   8bc42:	f856 3f08 	ldr.w	r3, [r6, #8]!
   8bc46:	f1a8 0204 	sub.w	r2, r8, #4
   8bc4a:	2a24      	cmp	r2, #36	; 0x24
   8bc4c:	60d9      	str	r1, [r3, #12]
   8bc4e:	608b      	str	r3, [r1, #8]
   8bc50:	d825      	bhi.n	8bc9e <_realloc_r+0x142>
   8bc52:	2a13      	cmp	r2, #19
   8bc54:	d91b      	bls.n	8bc8e <_realloc_r+0x132>
   8bc56:	6821      	ldr	r1, [r4, #0]
   8bc58:	2a1b      	cmp	r2, #27
   8bc5a:	60a9      	str	r1, [r5, #8]
   8bc5c:	6863      	ldr	r3, [r4, #4]
   8bc5e:	60eb      	str	r3, [r5, #12]
   8bc60:	d803      	bhi.n	8bc6a <_realloc_r+0x10e>
   8bc62:	f105 0010 	add.w	r0, r5, #16
   8bc66:	3408      	adds	r4, #8
   8bc68:	e012      	b.n	8bc90 <_realloc_r+0x134>
   8bc6a:	68a0      	ldr	r0, [r4, #8]
   8bc6c:	2a24      	cmp	r2, #36	; 0x24
   8bc6e:	6128      	str	r0, [r5, #16]
   8bc70:	68e1      	ldr	r1, [r4, #12]
   8bc72:	6169      	str	r1, [r5, #20]
   8bc74:	d003      	beq.n	8bc7e <_realloc_r+0x122>
   8bc76:	f105 0018 	add.w	r0, r5, #24
   8bc7a:	3410      	adds	r4, #16
   8bc7c:	e008      	b.n	8bc90 <_realloc_r+0x134>
   8bc7e:	6922      	ldr	r2, [r4, #16]
   8bc80:	f105 0020 	add.w	r0, r5, #32
   8bc84:	61aa      	str	r2, [r5, #24]
   8bc86:	6963      	ldr	r3, [r4, #20]
   8bc88:	3418      	adds	r4, #24
   8bc8a:	61eb      	str	r3, [r5, #28]
   8bc8c:	e000      	b.n	8bc90 <_realloc_r+0x134>
   8bc8e:	4630      	mov	r0, r6
   8bc90:	6821      	ldr	r1, [r4, #0]
   8bc92:	6001      	str	r1, [r0, #0]
   8bc94:	6862      	ldr	r2, [r4, #4]
   8bc96:	6042      	str	r2, [r0, #4]
   8bc98:	68a3      	ldr	r3, [r4, #8]
   8bc9a:	6083      	str	r3, [r0, #8]
   8bc9c:	e003      	b.n	8bca6 <_realloc_r+0x14a>
   8bc9e:	4630      	mov	r0, r6
   8bca0:	4621      	mov	r1, r4
   8bca2:	f7fd f984 	bl	88fae <memmove>
   8bca6:	ebc7 0a0a 	rsb	sl, r7, sl
   8bcaa:	19e8      	adds	r0, r5, r7
   8bcac:	f04a 0201 	orr.w	r2, sl, #1
   8bcb0:	6042      	str	r2, [r0, #4]
   8bcb2:	686b      	ldr	r3, [r5, #4]
   8bcb4:	495f      	ldr	r1, [pc, #380]	; (8be34 <_realloc_r+0x2d8>)
   8bcb6:	6088      	str	r0, [r1, #8]
   8bcb8:	f003 0001 	and.w	r0, r3, #1
   8bcbc:	4307      	orrs	r7, r0
   8bcbe:	606f      	str	r7, [r5, #4]
   8bcc0:	e088      	b.n	8bdd4 <_realloc_r+0x278>
   8bcc2:	45ba      	cmp	sl, r7
   8bcc4:	db04      	blt.n	8bcd0 <_realloc_r+0x174>
   8bcc6:	68d9      	ldr	r1, [r3, #12]
   8bcc8:	6898      	ldr	r0, [r3, #8]
   8bcca:	60c1      	str	r1, [r0, #12]
   8bccc:	6088      	str	r0, [r1, #8]
   8bcce:	e003      	b.n	8bcd8 <_realloc_r+0x17c>
   8bcd0:	eb02 0a08 	add.w	sl, r2, r8
   8bcd4:	45ba      	cmp	sl, r7
   8bcd6:	db31      	blt.n	8bd3c <_realloc_r+0x1e0>
   8bcd8:	4628      	mov	r0, r5
   8bcda:	68eb      	ldr	r3, [r5, #12]
   8bcdc:	f850 1f08 	ldr.w	r1, [r0, #8]!
   8bce0:	f1a8 0204 	sub.w	r2, r8, #4
   8bce4:	2a24      	cmp	r2, #36	; 0x24
   8bce6:	60cb      	str	r3, [r1, #12]
   8bce8:	6099      	str	r1, [r3, #8]
   8bcea:	d823      	bhi.n	8bd34 <_realloc_r+0x1d8>
   8bcec:	2a13      	cmp	r2, #19
   8bcee:	d91a      	bls.n	8bd26 <_realloc_r+0x1ca>
   8bcf0:	6820      	ldr	r0, [r4, #0]
   8bcf2:	2a1b      	cmp	r2, #27
   8bcf4:	60a8      	str	r0, [r5, #8]
   8bcf6:	6866      	ldr	r6, [r4, #4]
   8bcf8:	60ee      	str	r6, [r5, #12]
   8bcfa:	d803      	bhi.n	8bd04 <_realloc_r+0x1a8>
   8bcfc:	f105 0010 	add.w	r0, r5, #16
   8bd00:	3408      	adds	r4, #8
   8bd02:	e010      	b.n	8bd26 <_realloc_r+0x1ca>
   8bd04:	68a3      	ldr	r3, [r4, #8]
   8bd06:	2a24      	cmp	r2, #36	; 0x24
   8bd08:	612b      	str	r3, [r5, #16]
   8bd0a:	68e1      	ldr	r1, [r4, #12]
   8bd0c:	6169      	str	r1, [r5, #20]
   8bd0e:	d003      	beq.n	8bd18 <_realloc_r+0x1bc>
   8bd10:	f105 0018 	add.w	r0, r5, #24
   8bd14:	3410      	adds	r4, #16
   8bd16:	e006      	b.n	8bd26 <_realloc_r+0x1ca>
   8bd18:	6922      	ldr	r2, [r4, #16]
   8bd1a:	61aa      	str	r2, [r5, #24]
   8bd1c:	6960      	ldr	r0, [r4, #20]
   8bd1e:	3418      	adds	r4, #24
   8bd20:	61e8      	str	r0, [r5, #28]
   8bd22:	f105 0020 	add.w	r0, r5, #32
   8bd26:	6826      	ldr	r6, [r4, #0]
   8bd28:	6006      	str	r6, [r0, #0]
   8bd2a:	6863      	ldr	r3, [r4, #4]
   8bd2c:	6043      	str	r3, [r0, #4]
   8bd2e:	68a1      	ldr	r1, [r4, #8]
   8bd30:	6081      	str	r1, [r0, #8]
   8bd32:	e055      	b.n	8bde0 <_realloc_r+0x284>
   8bd34:	4621      	mov	r1, r4
   8bd36:	f7fd f93a 	bl	88fae <memmove>
   8bd3a:	e051      	b.n	8bde0 <_realloc_r+0x284>
   8bd3c:	4631      	mov	r1, r6
   8bd3e:	4648      	mov	r0, r9
   8bd40:	f7ff f90a 	bl	8af58 <_malloc_r>
   8bd44:	4606      	mov	r6, r0
   8bd46:	2800      	cmp	r0, #0
   8bd48:	d044      	beq.n	8bdd4 <_realloc_r+0x278>
   8bd4a:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8bd4e:	f1a0 0208 	sub.w	r2, r0, #8
   8bd52:	f021 0301 	bic.w	r3, r1, #1
   8bd56:	eb0b 0103 	add.w	r1, fp, r3
   8bd5a:	428a      	cmp	r2, r1
   8bd5c:	d106      	bne.n	8bd6c <_realloc_r+0x210>
   8bd5e:	f850 6c04 	ldr.w	r6, [r0, #-4]
   8bd62:	f026 0503 	bic.w	r5, r6, #3
   8bd66:	eb05 0a08 	add.w	sl, r5, r8
   8bd6a:	e038      	b.n	8bdde <_realloc_r+0x282>
   8bd6c:	f1a8 0204 	sub.w	r2, r8, #4
   8bd70:	2a24      	cmp	r2, #36	; 0x24
   8bd72:	d828      	bhi.n	8bdc6 <_realloc_r+0x26a>
   8bd74:	2a13      	cmp	r2, #19
   8bd76:	d91e      	bls.n	8bdb6 <_realloc_r+0x25a>
   8bd78:	6823      	ldr	r3, [r4, #0]
   8bd7a:	2a1b      	cmp	r2, #27
   8bd7c:	6003      	str	r3, [r0, #0]
   8bd7e:	6861      	ldr	r1, [r4, #4]
   8bd80:	6041      	str	r1, [r0, #4]
   8bd82:	d804      	bhi.n	8bd8e <_realloc_r+0x232>
   8bd84:	f100 0008 	add.w	r0, r0, #8
   8bd88:	f104 0208 	add.w	r2, r4, #8
   8bd8c:	e014      	b.n	8bdb8 <_realloc_r+0x25c>
   8bd8e:	68a0      	ldr	r0, [r4, #8]
   8bd90:	2a24      	cmp	r2, #36	; 0x24
   8bd92:	60b0      	str	r0, [r6, #8]
   8bd94:	68e3      	ldr	r3, [r4, #12]
   8bd96:	60f3      	str	r3, [r6, #12]
   8bd98:	d004      	beq.n	8bda4 <_realloc_r+0x248>
   8bd9a:	f106 0010 	add.w	r0, r6, #16
   8bd9e:	f104 0210 	add.w	r2, r4, #16
   8bda2:	e009      	b.n	8bdb8 <_realloc_r+0x25c>
   8bda4:	6922      	ldr	r2, [r4, #16]
   8bda6:	f106 0018 	add.w	r0, r6, #24
   8bdaa:	6132      	str	r2, [r6, #16]
   8bdac:	6961      	ldr	r1, [r4, #20]
   8bdae:	f104 0218 	add.w	r2, r4, #24
   8bdb2:	6171      	str	r1, [r6, #20]
   8bdb4:	e000      	b.n	8bdb8 <_realloc_r+0x25c>
   8bdb6:	4622      	mov	r2, r4
   8bdb8:	6813      	ldr	r3, [r2, #0]
   8bdba:	6003      	str	r3, [r0, #0]
   8bdbc:	6851      	ldr	r1, [r2, #4]
   8bdbe:	6041      	str	r1, [r0, #4]
   8bdc0:	6892      	ldr	r2, [r2, #8]
   8bdc2:	6082      	str	r2, [r0, #8]
   8bdc4:	e002      	b.n	8bdcc <_realloc_r+0x270>
   8bdc6:	4621      	mov	r1, r4
   8bdc8:	f7fd f8f1 	bl	88fae <memmove>
   8bdcc:	4648      	mov	r0, r9
   8bdce:	4621      	mov	r1, r4
   8bdd0:	f7fe fc8c 	bl	8a6ec <_free_r>
   8bdd4:	4648      	mov	r0, r9
   8bdd6:	f7ff fad0 	bl	8b37a <__malloc_unlock>
   8bdda:	e028      	b.n	8be2e <_realloc_r+0x2d2>
   8bddc:	46c2      	mov	sl, r8
   8bdde:	465d      	mov	r5, fp
   8bde0:	ebc7 000a 	rsb	r0, r7, sl
   8bde4:	280f      	cmp	r0, #15
   8bde6:	686a      	ldr	r2, [r5, #4]
   8bde8:	d911      	bls.n	8be0e <_realloc_r+0x2b2>
   8bdea:	f002 0601 	and.w	r6, r2, #1
   8bdee:	19e9      	adds	r1, r5, r7
   8bdf0:	f040 0301 	orr.w	r3, r0, #1
   8bdf4:	4337      	orrs	r7, r6
   8bdf6:	606f      	str	r7, [r5, #4]
   8bdf8:	1808      	adds	r0, r1, r0
   8bdfa:	604b      	str	r3, [r1, #4]
   8bdfc:	6842      	ldr	r2, [r0, #4]
   8bdfe:	3108      	adds	r1, #8
   8be00:	f042 0601 	orr.w	r6, r2, #1
   8be04:	6046      	str	r6, [r0, #4]
   8be06:	4648      	mov	r0, r9
   8be08:	f7fe fc70 	bl	8a6ec <_free_r>
   8be0c:	e00a      	b.n	8be24 <_realloc_r+0x2c8>
   8be0e:	f002 0601 	and.w	r6, r2, #1
   8be12:	ea4a 0306 	orr.w	r3, sl, r6
   8be16:	606b      	str	r3, [r5, #4]
   8be18:	eb05 010a 	add.w	r1, r5, sl
   8be1c:	6848      	ldr	r0, [r1, #4]
   8be1e:	f040 0201 	orr.w	r2, r0, #1
   8be22:	604a      	str	r2, [r1, #4]
   8be24:	4648      	mov	r0, r9
   8be26:	f7ff faa8 	bl	8b37a <__malloc_unlock>
   8be2a:	f105 0608 	add.w	r6, r5, #8
   8be2e:	4630      	mov	r0, r6
   8be30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8be34:	20070774 	.word	0x20070774

0008be38 <__fpclassifyd>:
   8be38:	460b      	mov	r3, r1
   8be3a:	b111      	cbz	r1, 8be42 <__fpclassifyd+0xa>
   8be3c:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   8be40:	d100      	bne.n	8be44 <__fpclassifyd+0xc>
   8be42:	b1e0      	cbz	r0, 8be7e <__fpclassifyd+0x46>
   8be44:	4a12      	ldr	r2, [pc, #72]	; (8be90 <__fpclassifyd+0x58>)
   8be46:	f5a3 1180 	sub.w	r1, r3, #1048576	; 0x100000
   8be4a:	4291      	cmp	r1, r2
   8be4c:	d919      	bls.n	8be82 <__fpclassifyd+0x4a>
   8be4e:	f103 41ff 	add.w	r1, r3, #2139095040	; 0x7f800000
   8be52:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
   8be56:	4291      	cmp	r1, r2
   8be58:	d913      	bls.n	8be82 <__fpclassifyd+0x4a>
   8be5a:	4a0e      	ldr	r2, [pc, #56]	; (8be94 <__fpclassifyd+0x5c>)
   8be5c:	4293      	cmp	r3, r2
   8be5e:	d912      	bls.n	8be86 <__fpclassifyd+0x4e>
   8be60:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   8be64:	4291      	cmp	r1, r2
   8be66:	d90e      	bls.n	8be86 <__fpclassifyd+0x4e>
   8be68:	4a0b      	ldr	r2, [pc, #44]	; (8be98 <__fpclassifyd+0x60>)
   8be6a:	4293      	cmp	r3, r2
   8be6c:	d002      	beq.n	8be74 <__fpclassifyd+0x3c>
   8be6e:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
   8be72:	d10a      	bne.n	8be8a <__fpclassifyd+0x52>
   8be74:	f1d0 0001 	rsbs	r0, r0, #1
   8be78:	bf38      	it	cc
   8be7a:	2000      	movcc	r0, #0
   8be7c:	4770      	bx	lr
   8be7e:	2002      	movs	r0, #2
   8be80:	4770      	bx	lr
   8be82:	2004      	movs	r0, #4
   8be84:	4770      	bx	lr
   8be86:	2003      	movs	r0, #3
   8be88:	4770      	bx	lr
   8be8a:	2000      	movs	r0, #0
   8be8c:	4770      	bx	lr
   8be8e:	bf00      	nop
   8be90:	7fdfffff 	.word	0x7fdfffff
   8be94:	000fffff 	.word	0x000fffff
   8be98:	7ff00000 	.word	0x7ff00000

0008be9c <_sbrk_r>:
   8be9c:	b538      	push	{r3, r4, r5, lr}
   8be9e:	4c06      	ldr	r4, [pc, #24]	; (8beb8 <_sbrk_r+0x1c>)
   8bea0:	2300      	movs	r3, #0
   8bea2:	4605      	mov	r5, r0
   8bea4:	4608      	mov	r0, r1
   8bea6:	6023      	str	r3, [r4, #0]
   8bea8:	f7fc fcb6 	bl	88818 <_sbrk>
   8beac:	1c43      	adds	r3, r0, #1
   8beae:	d102      	bne.n	8beb6 <_sbrk_r+0x1a>
   8beb0:	6821      	ldr	r1, [r4, #0]
   8beb2:	b101      	cbz	r1, 8beb6 <_sbrk_r+0x1a>
   8beb4:	6029      	str	r1, [r5, #0]
   8beb6:	bd38      	pop	{r3, r4, r5, pc}
   8beb8:	20071ca4 	.word	0x20071ca4

0008bebc <nanf>:
   8bebc:	4800      	ldr	r0, [pc, #0]	; (8bec0 <nanf+0x4>)
   8bebe:	4770      	bx	lr
   8bec0:	7fc00000 	.word	0x7fc00000

0008bec4 <strcmp>:
   8bec4:	f810 2b01 	ldrb.w	r2, [r0], #1
   8bec8:	f811 3b01 	ldrb.w	r3, [r1], #1
   8becc:	2a01      	cmp	r2, #1
   8bece:	bf28      	it	cs
   8bed0:	429a      	cmpcs	r2, r3
   8bed2:	d0f7      	beq.n	8bec4 <strcmp>
   8bed4:	eba2 0003 	sub.w	r0, r2, r3
   8bed8:	4770      	bx	lr

0008beda <strncmp>:
   8beda:	b570      	push	{r4, r5, r6, lr}
   8bedc:	b192      	cbz	r2, 8bf04 <strncmp+0x2a>
   8bede:	460b      	mov	r3, r1
   8bee0:	4605      	mov	r5, r0
   8bee2:	b91a      	cbnz	r2, 8beec <strncmp+0x12>
   8bee4:	7828      	ldrb	r0, [r5, #0]
   8bee6:	7819      	ldrb	r1, [r3, #0]
   8bee8:	1a40      	subs	r0, r0, r1
   8beea:	bd70      	pop	{r4, r5, r6, pc}
   8beec:	f810 6b01 	ldrb.w	r6, [r0], #1
   8bef0:	781c      	ldrb	r4, [r3, #0]
   8bef2:	3101      	adds	r1, #1
   8bef4:	42b4      	cmp	r4, r6
   8bef6:	d1f5      	bne.n	8bee4 <strncmp+0xa>
   8bef8:	2a01      	cmp	r2, #1
   8befa:	d0f3      	beq.n	8bee4 <strncmp+0xa>
   8befc:	3a01      	subs	r2, #1
   8befe:	2c00      	cmp	r4, #0
   8bf00:	d1ed      	bne.n	8bede <strncmp+0x4>
   8bf02:	e7ef      	b.n	8bee4 <strncmp+0xa>
   8bf04:	4610      	mov	r0, r2
   8bf06:	bd70      	pop	{r4, r5, r6, pc}

0008bf08 <__ssprint_r>:
   8bf08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bf0c:	4607      	mov	r7, r0
   8bf0e:	6890      	ldr	r0, [r2, #8]
   8bf10:	460c      	mov	r4, r1
   8bf12:	4615      	mov	r5, r2
   8bf14:	f8d2 8000 	ldr.w	r8, [r2]
   8bf18:	b908      	cbnz	r0, 8bf1e <__ssprint_r+0x16>
   8bf1a:	6050      	str	r0, [r2, #4]
   8bf1c:	e06f      	b.n	8bffe <__ssprint_r+0xf6>
   8bf1e:	f04f 0b00 	mov.w	fp, #0
   8bf22:	465e      	mov	r6, fp
   8bf24:	b936      	cbnz	r6, 8bf34 <__ssprint_r+0x2c>
   8bf26:	f8d8 b000 	ldr.w	fp, [r8]
   8bf2a:	f8d8 6004 	ldr.w	r6, [r8, #4]
   8bf2e:	f108 0808 	add.w	r8, r8, #8
   8bf32:	e7f7      	b.n	8bf24 <__ssprint_r+0x1c>
   8bf34:	68a3      	ldr	r3, [r4, #8]
   8bf36:	429e      	cmp	r6, r3
   8bf38:	d34c      	bcc.n	8bfd4 <__ssprint_r+0xcc>
   8bf3a:	89a2      	ldrh	r2, [r4, #12]
   8bf3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
   8bf40:	d046      	beq.n	8bfd0 <__ssprint_r+0xc8>
   8bf42:	6823      	ldr	r3, [r4, #0]
   8bf44:	6960      	ldr	r0, [r4, #20]
   8bf46:	6921      	ldr	r1, [r4, #16]
   8bf48:	f04f 0a03 	mov.w	sl, #3
   8bf4c:	ebc1 0903 	rsb	r9, r1, r3
   8bf50:	fb0a f300 	mul.w	r3, sl, r0
   8bf54:	2002      	movs	r0, #2
   8bf56:	fb93 faf0 	sdiv	sl, r3, r0
   8bf5a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   8bf5e:	f109 0301 	add.w	r3, r9, #1
   8bf62:	1998      	adds	r0, r3, r6
   8bf64:	b213      	sxth	r3, r2
   8bf66:	4582      	cmp	sl, r0
   8bf68:	bf38      	it	cc
   8bf6a:	4682      	movcc	sl, r0
   8bf6c:	4638      	mov	r0, r7
   8bf6e:	b183      	cbz	r3, 8bf92 <__ssprint_r+0x8a>
   8bf70:	4651      	mov	r1, sl
   8bf72:	f7fe fff1 	bl	8af58 <_malloc_r>
   8bf76:	b1a8      	cbz	r0, 8bfa4 <__ssprint_r+0x9c>
   8bf78:	6921      	ldr	r1, [r4, #16]
   8bf7a:	464a      	mov	r2, r9
   8bf7c:	9001      	str	r0, [sp, #4]
   8bf7e:	f7fd f80d 	bl	88f9c <memcpy>
   8bf82:	89a0      	ldrh	r0, [r4, #12]
   8bf84:	f420 6290 	bic.w	r2, r0, #1152	; 0x480
   8bf88:	f042 0180 	orr.w	r1, r2, #128	; 0x80
   8bf8c:	81a1      	strh	r1, [r4, #12]
   8bf8e:	9901      	ldr	r1, [sp, #4]
   8bf90:	e014      	b.n	8bfbc <__ssprint_r+0xb4>
   8bf92:	4652      	mov	r2, sl
   8bf94:	f7ff fde2 	bl	8bb5c <_realloc_r>
   8bf98:	4601      	mov	r1, r0
   8bf9a:	b978      	cbnz	r0, 8bfbc <__ssprint_r+0xb4>
   8bf9c:	4638      	mov	r0, r7
   8bf9e:	6921      	ldr	r1, [r4, #16]
   8bfa0:	f7fe fba4 	bl	8a6ec <_free_r>
   8bfa4:	89a3      	ldrh	r3, [r4, #12]
   8bfa6:	200c      	movs	r0, #12
   8bfa8:	2100      	movs	r1, #0
   8bfaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   8bfae:	6038      	str	r0, [r7, #0]
   8bfb0:	81a2      	strh	r2, [r4, #12]
   8bfb2:	f04f 30ff 	mov.w	r0, #4294967295
   8bfb6:	60a9      	str	r1, [r5, #8]
   8bfb8:	6069      	str	r1, [r5, #4]
   8bfba:	e020      	b.n	8bffe <__ssprint_r+0xf6>
   8bfbc:	eb01 0309 	add.w	r3, r1, r9
   8bfc0:	ebc9 000a 	rsb	r0, r9, sl
   8bfc4:	6023      	str	r3, [r4, #0]
   8bfc6:	6121      	str	r1, [r4, #16]
   8bfc8:	f8c4 a014 	str.w	sl, [r4, #20]
   8bfcc:	4633      	mov	r3, r6
   8bfce:	60a0      	str	r0, [r4, #8]
   8bfd0:	429e      	cmp	r6, r3
   8bfd2:	d200      	bcs.n	8bfd6 <__ssprint_r+0xce>
   8bfd4:	4633      	mov	r3, r6
   8bfd6:	461a      	mov	r2, r3
   8bfd8:	4659      	mov	r1, fp
   8bfda:	6820      	ldr	r0, [r4, #0]
   8bfdc:	9301      	str	r3, [sp, #4]
   8bfde:	f7fc ffe6 	bl	88fae <memmove>
   8bfe2:	68a2      	ldr	r2, [r4, #8]
   8bfe4:	9901      	ldr	r1, [sp, #4]
   8bfe6:	6823      	ldr	r3, [r4, #0]
   8bfe8:	1a50      	subs	r0, r2, r1
   8bfea:	185a      	adds	r2, r3, r1
   8bfec:	68a9      	ldr	r1, [r5, #8]
   8bfee:	60a0      	str	r0, [r4, #8]
   8bff0:	1b8e      	subs	r6, r1, r6
   8bff2:	6022      	str	r2, [r4, #0]
   8bff4:	60ae      	str	r6, [r5, #8]
   8bff6:	2e00      	cmp	r6, #0
   8bff8:	d195      	bne.n	8bf26 <__ssprint_r+0x1e>
   8bffa:	606e      	str	r6, [r5, #4]
   8bffc:	4630      	mov	r0, r6
   8bffe:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008c002 <_svfiprintf_r>:
   8c002:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c006:	461e      	mov	r6, r3
   8c008:	898b      	ldrh	r3, [r1, #12]
   8c00a:	4689      	mov	r9, r1
   8c00c:	f003 0180 	and.w	r1, r3, #128	; 0x80
   8c010:	4614      	mov	r4, r2
   8c012:	b20a      	sxth	r2, r1
   8c014:	b0a9      	sub	sp, #164	; 0xa4
   8c016:	4683      	mov	fp, r0
   8c018:	b19a      	cbz	r2, 8c042 <_svfiprintf_r+0x40>
   8c01a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8c01e:	b983      	cbnz	r3, 8c042 <_svfiprintf_r+0x40>
   8c020:	2140      	movs	r1, #64	; 0x40
   8c022:	f7fe ff99 	bl	8af58 <_malloc_r>
   8c026:	f8c9 0000 	str.w	r0, [r9]
   8c02a:	f8c9 0010 	str.w	r0, [r9, #16]
   8c02e:	b928      	cbnz	r0, 8c03c <_svfiprintf_r+0x3a>
   8c030:	220c      	movs	r2, #12
   8c032:	f8cb 2000 	str.w	r2, [fp]
   8c036:	f04f 30ff 	mov.w	r0, #4294967295
   8c03a:	e3db      	b.n	8c7f4 <_svfiprintf_r+0x7f2>
   8c03c:	2040      	movs	r0, #64	; 0x40
   8c03e:	f8c9 0014 	str.w	r0, [r9, #20]
   8c042:	2100      	movs	r1, #0
   8c044:	ad18      	add	r5, sp, #96	; 0x60
   8c046:	950b      	str	r5, [sp, #44]	; 0x2c
   8c048:	910d      	str	r1, [sp, #52]	; 0x34
   8c04a:	910c      	str	r1, [sp, #48]	; 0x30
   8c04c:	9401      	str	r4, [sp, #4]
   8c04e:	9105      	str	r1, [sp, #20]
   8c050:	9104      	str	r1, [sp, #16]
   8c052:	46a8      	mov	r8, r5
   8c054:	9b01      	ldr	r3, [sp, #4]
   8c056:	461c      	mov	r4, r3
   8c058:	f813 2b01 	ldrb.w	r2, [r3], #1
   8c05c:	b91a      	cbnz	r2, 8c066 <_svfiprintf_r+0x64>
   8c05e:	9801      	ldr	r0, [sp, #4]
   8c060:	1a25      	subs	r5, r4, r0
   8c062:	d103      	bne.n	8c06c <_svfiprintf_r+0x6a>
   8c064:	e01d      	b.n	8c0a2 <_svfiprintf_r+0xa0>
   8c066:	2a25      	cmp	r2, #37	; 0x25
   8c068:	d1f5      	bne.n	8c056 <_svfiprintf_r+0x54>
   8c06a:	e7f8      	b.n	8c05e <_svfiprintf_r+0x5c>
   8c06c:	9a01      	ldr	r2, [sp, #4]
   8c06e:	990d      	ldr	r1, [sp, #52]	; 0x34
   8c070:	e888 0024 	stmia.w	r8, {r2, r5}
   8c074:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c076:	194b      	adds	r3, r1, r5
   8c078:	1c50      	adds	r0, r2, #1
   8c07a:	2807      	cmp	r0, #7
   8c07c:	930d      	str	r3, [sp, #52]	; 0x34
   8c07e:	900c      	str	r0, [sp, #48]	; 0x30
   8c080:	dc02      	bgt.n	8c088 <_svfiprintf_r+0x86>
   8c082:	f108 0808 	add.w	r8, r8, #8
   8c086:	e009      	b.n	8c09c <_svfiprintf_r+0x9a>
   8c088:	4658      	mov	r0, fp
   8c08a:	4649      	mov	r1, r9
   8c08c:	aa0b      	add	r2, sp, #44	; 0x2c
   8c08e:	f7ff ff3b 	bl	8bf08 <__ssprint_r>
   8c092:	2800      	cmp	r0, #0
   8c094:	f040 83a3 	bne.w	8c7de <_svfiprintf_r+0x7dc>
   8c098:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c09c:	9904      	ldr	r1, [sp, #16]
   8c09e:	194b      	adds	r3, r1, r5
   8c0a0:	9304      	str	r3, [sp, #16]
   8c0a2:	7822      	ldrb	r2, [r4, #0]
   8c0a4:	2a00      	cmp	r2, #0
   8c0a6:	f000 8393 	beq.w	8c7d0 <_svfiprintf_r+0x7ce>
   8c0aa:	2200      	movs	r2, #0
   8c0ac:	3401      	adds	r4, #1
   8c0ae:	9401      	str	r4, [sp, #4]
   8c0b0:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c0b4:	f04f 3cff 	mov.w	ip, #4294967295
   8c0b8:	9203      	str	r2, [sp, #12]
   8c0ba:	4617      	mov	r7, r2
   8c0bc:	9801      	ldr	r0, [sp, #4]
   8c0be:	f810 3b01 	ldrb.w	r3, [r0], #1
   8c0c2:	9001      	str	r0, [sp, #4]
   8c0c4:	2b63      	cmp	r3, #99	; 0x63
   8c0c6:	f000 80b3 	beq.w	8c230 <_svfiprintf_r+0x22e>
   8c0ca:	dc33      	bgt.n	8c134 <_svfiprintf_r+0x132>
   8c0cc:	2b39      	cmp	r3, #57	; 0x39
   8c0ce:	dc1a      	bgt.n	8c106 <_svfiprintf_r+0x104>
   8c0d0:	2b31      	cmp	r3, #49	; 0x31
   8c0d2:	f280 8091 	bge.w	8c1f8 <_svfiprintf_r+0x1f6>
   8c0d6:	2b2b      	cmp	r3, #43	; 0x2b
   8c0d8:	d101      	bne.n	8c0de <_svfiprintf_r+0xdc>
   8c0da:	461a      	mov	r2, r3
   8c0dc:	e7ee      	b.n	8c0bc <_svfiprintf_r+0xba>
   8c0de:	dc0a      	bgt.n	8c0f6 <_svfiprintf_r+0xf4>
   8c0e0:	2b23      	cmp	r3, #35	; 0x23
   8c0e2:	d055      	beq.n	8c190 <_svfiprintf_r+0x18e>
   8c0e4:	2b2a      	cmp	r3, #42	; 0x2a
   8c0e6:	d056      	beq.n	8c196 <_svfiprintf_r+0x194>
   8c0e8:	2b20      	cmp	r3, #32
   8c0ea:	f040 81f6 	bne.w	8c4da <_svfiprintf_r+0x4d8>
   8c0ee:	2a00      	cmp	r2, #0
   8c0f0:	bf08      	it	eq
   8c0f2:	2220      	moveq	r2, #32
   8c0f4:	e7e2      	b.n	8c0bc <_svfiprintf_r+0xba>
   8c0f6:	2b2e      	cmp	r3, #46	; 0x2e
   8c0f8:	d058      	beq.n	8c1ac <_svfiprintf_r+0x1aa>
   8c0fa:	2b30      	cmp	r3, #48	; 0x30
   8c0fc:	d079      	beq.n	8c1f2 <_svfiprintf_r+0x1f0>
   8c0fe:	2b2d      	cmp	r3, #45	; 0x2d
   8c100:	f040 81eb 	bne.w	8c4da <_svfiprintf_r+0x4d8>
   8c104:	e04f      	b.n	8c1a6 <_svfiprintf_r+0x1a4>
   8c106:	2b4f      	cmp	r3, #79	; 0x4f
   8c108:	f000 80de 	beq.w	8c2c8 <_svfiprintf_r+0x2c6>
   8c10c:	dc07      	bgt.n	8c11e <_svfiprintf_r+0x11c>
   8c10e:	2b44      	cmp	r3, #68	; 0x44
   8c110:	f040 81e3 	bne.w	8c4da <_svfiprintf_r+0x4d8>
   8c114:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c118:	f047 0710 	orr.w	r7, r7, #16
   8c11c:	e090      	b.n	8c240 <_svfiprintf_r+0x23e>
   8c11e:	2b55      	cmp	r3, #85	; 0x55
   8c120:	f000 811f 	beq.w	8c362 <_svfiprintf_r+0x360>
   8c124:	2b58      	cmp	r3, #88	; 0x58
   8c126:	f040 81d8 	bne.w	8c4da <_svfiprintf_r+0x4d8>
   8c12a:	4daf      	ldr	r5, [pc, #700]	; (8c3e8 <_svfiprintf_r+0x3e6>)
   8c12c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c130:	9505      	str	r5, [sp, #20]
   8c132:	e130      	b.n	8c396 <_svfiprintf_r+0x394>
   8c134:	2b6f      	cmp	r3, #111	; 0x6f
   8c136:	f000 80c9 	beq.w	8c2cc <_svfiprintf_r+0x2ca>
   8c13a:	dc10      	bgt.n	8c15e <_svfiprintf_r+0x15c>
   8c13c:	2b69      	cmp	r3, #105	; 0x69
   8c13e:	d024      	beq.n	8c18a <_svfiprintf_r+0x188>
   8c140:	dc07      	bgt.n	8c152 <_svfiprintf_r+0x150>
   8c142:	2b64      	cmp	r3, #100	; 0x64
   8c144:	d021      	beq.n	8c18a <_svfiprintf_r+0x188>
   8c146:	2b68      	cmp	r3, #104	; 0x68
   8c148:	f040 81c7 	bne.w	8c4da <_svfiprintf_r+0x4d8>
   8c14c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   8c150:	e7b4      	b.n	8c0bc <_svfiprintf_r+0xba>
   8c152:	2b6c      	cmp	r3, #108	; 0x6c
   8c154:	d05f      	beq.n	8c216 <_svfiprintf_r+0x214>
   8c156:	2b6e      	cmp	r3, #110	; 0x6e
   8c158:	f040 81bf 	bne.w	8c4da <_svfiprintf_r+0x4d8>
   8c15c:	e096      	b.n	8c28c <_svfiprintf_r+0x28a>
   8c15e:	2b73      	cmp	r3, #115	; 0x73
   8c160:	f000 80df 	beq.w	8c322 <_svfiprintf_r+0x320>
   8c164:	dc06      	bgt.n	8c174 <_svfiprintf_r+0x172>
   8c166:	2b70      	cmp	r3, #112	; 0x70
   8c168:	f000 80cd 	beq.w	8c306 <_svfiprintf_r+0x304>
   8c16c:	2b71      	cmp	r3, #113	; 0x71
   8c16e:	f040 81b4 	bne.w	8c4da <_svfiprintf_r+0x4d8>
   8c172:	e05a      	b.n	8c22a <_svfiprintf_r+0x228>
   8c174:	2b75      	cmp	r3, #117	; 0x75
   8c176:	f000 80f6 	beq.w	8c366 <_svfiprintf_r+0x364>
   8c17a:	2b78      	cmp	r3, #120	; 0x78
   8c17c:	f040 81ad 	bne.w	8c4da <_svfiprintf_r+0x4d8>
   8c180:	4d9a      	ldr	r5, [pc, #616]	; (8c3ec <_svfiprintf_r+0x3ea>)
   8c182:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c186:	9505      	str	r5, [sp, #20]
   8c188:	e105      	b.n	8c396 <_svfiprintf_r+0x394>
   8c18a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c18e:	e057      	b.n	8c240 <_svfiprintf_r+0x23e>
   8c190:	f047 0701 	orr.w	r7, r7, #1
   8c194:	e792      	b.n	8c0bc <_svfiprintf_r+0xba>
   8c196:	1d33      	adds	r3, r6, #4
   8c198:	6836      	ldr	r6, [r6, #0]
   8c19a:	2e00      	cmp	r6, #0
   8c19c:	9603      	str	r6, [sp, #12]
   8c19e:	da15      	bge.n	8c1cc <_svfiprintf_r+0x1ca>
   8c1a0:	4270      	negs	r0, r6
   8c1a2:	9003      	str	r0, [sp, #12]
   8c1a4:	461e      	mov	r6, r3
   8c1a6:	f047 0704 	orr.w	r7, r7, #4
   8c1aa:	e787      	b.n	8c0bc <_svfiprintf_r+0xba>
   8c1ac:	9901      	ldr	r1, [sp, #4]
   8c1ae:	f811 3b01 	ldrb.w	r3, [r1], #1
   8c1b2:	2b2a      	cmp	r3, #42	; 0x2a
   8c1b4:	9101      	str	r1, [sp, #4]
   8c1b6:	d10b      	bne.n	8c1d0 <_svfiprintf_r+0x1ce>
   8c1b8:	f8d6 c000 	ldr.w	ip, [r6]
   8c1bc:	1d33      	adds	r3, r6, #4
   8c1be:	f1bc 0f00 	cmp.w	ip, #0
   8c1c2:	da03      	bge.n	8c1cc <_svfiprintf_r+0x1ca>
   8c1c4:	461e      	mov	r6, r3
   8c1c6:	f04f 3cff 	mov.w	ip, #4294967295
   8c1ca:	e777      	b.n	8c0bc <_svfiprintf_r+0xba>
   8c1cc:	461e      	mov	r6, r3
   8c1ce:	e775      	b.n	8c0bc <_svfiprintf_r+0xba>
   8c1d0:	f04f 0c00 	mov.w	ip, #0
   8c1d4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8c1d8:	2809      	cmp	r0, #9
   8c1da:	d807      	bhi.n	8c1ec <_svfiprintf_r+0x1ea>
   8c1dc:	9901      	ldr	r1, [sp, #4]
   8c1de:	230a      	movs	r3, #10
   8c1e0:	fb03 0c0c 	mla	ip, r3, ip, r0
   8c1e4:	f811 3b01 	ldrb.w	r3, [r1], #1
   8c1e8:	9101      	str	r1, [sp, #4]
   8c1ea:	e7f3      	b.n	8c1d4 <_svfiprintf_r+0x1d2>
   8c1ec:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   8c1f0:	e768      	b.n	8c0c4 <_svfiprintf_r+0xc2>
   8c1f2:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8c1f6:	e761      	b.n	8c0bc <_svfiprintf_r+0xba>
   8c1f8:	9801      	ldr	r0, [sp, #4]
   8c1fa:	2100      	movs	r1, #0
   8c1fc:	3b30      	subs	r3, #48	; 0x30
   8c1fe:	240a      	movs	r4, #10
   8c200:	fb04 3101 	mla	r1, r4, r1, r3
   8c204:	f810 3b01 	ldrb.w	r3, [r0], #1
   8c208:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   8c20c:	2c09      	cmp	r4, #9
   8c20e:	9001      	str	r0, [sp, #4]
   8c210:	d9f4      	bls.n	8c1fc <_svfiprintf_r+0x1fa>
   8c212:	9103      	str	r1, [sp, #12]
   8c214:	e756      	b.n	8c0c4 <_svfiprintf_r+0xc2>
   8c216:	9901      	ldr	r1, [sp, #4]
   8c218:	780b      	ldrb	r3, [r1, #0]
   8c21a:	2b6c      	cmp	r3, #108	; 0x6c
   8c21c:	d102      	bne.n	8c224 <_svfiprintf_r+0x222>
   8c21e:	1c48      	adds	r0, r1, #1
   8c220:	9001      	str	r0, [sp, #4]
   8c222:	e002      	b.n	8c22a <_svfiprintf_r+0x228>
   8c224:	f047 0710 	orr.w	r7, r7, #16
   8c228:	e748      	b.n	8c0bc <_svfiprintf_r+0xba>
   8c22a:	f047 0720 	orr.w	r7, r7, #32
   8c22e:	e745      	b.n	8c0bc <_svfiprintf_r+0xba>
   8c230:	6832      	ldr	r2, [r6, #0]
   8c232:	2500      	movs	r5, #0
   8c234:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   8c238:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8c23c:	3604      	adds	r6, #4
   8c23e:	e156      	b.n	8c4ee <_svfiprintf_r+0x4ec>
   8c240:	06ba      	lsls	r2, r7, #26
   8c242:	d507      	bpl.n	8c254 <_svfiprintf_r+0x252>
   8c244:	3607      	adds	r6, #7
   8c246:	f026 0507 	bic.w	r5, r6, #7
   8c24a:	f105 0608 	add.w	r6, r5, #8
   8c24e:	e9d5 4500 	ldrd	r4, r5, [r5]
   8c252:	e00f      	b.n	8c274 <_svfiprintf_r+0x272>
   8c254:	f017 0f10 	tst.w	r7, #16
   8c258:	f106 0104 	add.w	r1, r6, #4
   8c25c:	d001      	beq.n	8c262 <_svfiprintf_r+0x260>
   8c25e:	6832      	ldr	r2, [r6, #0]
   8c260:	e005      	b.n	8c26e <_svfiprintf_r+0x26c>
   8c262:	f017 0f40 	tst.w	r7, #64	; 0x40
   8c266:	6832      	ldr	r2, [r6, #0]
   8c268:	d001      	beq.n	8c26e <_svfiprintf_r+0x26c>
   8c26a:	b214      	sxth	r4, r2
   8c26c:	e000      	b.n	8c270 <_svfiprintf_r+0x26e>
   8c26e:	4614      	mov	r4, r2
   8c270:	17e5      	asrs	r5, r4, #31
   8c272:	460e      	mov	r6, r1
   8c274:	2c00      	cmp	r4, #0
   8c276:	f175 0200 	sbcs.w	r2, r5, #0
   8c27a:	f280 80b9 	bge.w	8c3f0 <_svfiprintf_r+0x3ee>
   8c27e:	232d      	movs	r3, #45	; 0x2d
   8c280:	4264      	negs	r4, r4
   8c282:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8c286:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   8c28a:	e0b1      	b.n	8c3f0 <_svfiprintf_r+0x3ee>
   8c28c:	f017 0f20 	tst.w	r7, #32
   8c290:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c294:	f106 0204 	add.w	r2, r6, #4
   8c298:	d005      	beq.n	8c2a6 <_svfiprintf_r+0x2a4>
   8c29a:	9c04      	ldr	r4, [sp, #16]
   8c29c:	6835      	ldr	r5, [r6, #0]
   8c29e:	17e0      	asrs	r0, r4, #31
   8c2a0:	602c      	str	r4, [r5, #0]
   8c2a2:	6068      	str	r0, [r5, #4]
   8c2a4:	e004      	b.n	8c2b0 <_svfiprintf_r+0x2ae>
   8c2a6:	06fb      	lsls	r3, r7, #27
   8c2a8:	d504      	bpl.n	8c2b4 <_svfiprintf_r+0x2b2>
   8c2aa:	6833      	ldr	r3, [r6, #0]
   8c2ac:	9904      	ldr	r1, [sp, #16]
   8c2ae:	6019      	str	r1, [r3, #0]
   8c2b0:	4616      	mov	r6, r2
   8c2b2:	e6cf      	b.n	8c054 <_svfiprintf_r+0x52>
   8c2b4:	6830      	ldr	r0, [r6, #0]
   8c2b6:	9c04      	ldr	r4, [sp, #16]
   8c2b8:	f017 0f40 	tst.w	r7, #64	; 0x40
   8c2bc:	f106 0604 	add.w	r6, r6, #4
   8c2c0:	bf14      	ite	ne
   8c2c2:	8004      	strhne	r4, [r0, #0]
   8c2c4:	6004      	streq	r4, [r0, #0]
   8c2c6:	e6c5      	b.n	8c054 <_svfiprintf_r+0x52>
   8c2c8:	f047 0710 	orr.w	r7, r7, #16
   8c2cc:	f017 0020 	ands.w	r0, r7, #32
   8c2d0:	d008      	beq.n	8c2e4 <_svfiprintf_r+0x2e2>
   8c2d2:	1df3      	adds	r3, r6, #7
   8c2d4:	f023 0507 	bic.w	r5, r3, #7
   8c2d8:	f105 0608 	add.w	r6, r5, #8
   8c2dc:	e9d5 4500 	ldrd	r4, r5, [r5]
   8c2e0:	2000      	movs	r0, #0
   8c2e2:	e07c      	b.n	8c3de <_svfiprintf_r+0x3dc>
   8c2e4:	f017 0110 	ands.w	r1, r7, #16
   8c2e8:	f106 0204 	add.w	r2, r6, #4
   8c2ec:	d106      	bne.n	8c2fc <_svfiprintf_r+0x2fa>
   8c2ee:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   8c2f2:	d003      	beq.n	8c2fc <_svfiprintf_r+0x2fa>
   8c2f4:	8834      	ldrh	r4, [r6, #0]
   8c2f6:	2500      	movs	r5, #0
   8c2f8:	4616      	mov	r6, r2
   8c2fa:	e7f1      	b.n	8c2e0 <_svfiprintf_r+0x2de>
   8c2fc:	6836      	ldr	r6, [r6, #0]
   8c2fe:	2500      	movs	r5, #0
   8c300:	4634      	mov	r4, r6
   8c302:	4616      	mov	r6, r2
   8c304:	e06b      	b.n	8c3de <_svfiprintf_r+0x3dc>
   8c306:	4b39      	ldr	r3, [pc, #228]	; (8c3ec <_svfiprintf_r+0x3ea>)
   8c308:	2130      	movs	r1, #48	; 0x30
   8c30a:	2278      	movs	r2, #120	; 0x78
   8c30c:	6834      	ldr	r4, [r6, #0]
   8c30e:	2500      	movs	r5, #0
   8c310:	f047 0702 	orr.w	r7, r7, #2
   8c314:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   8c318:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   8c31c:	3604      	adds	r6, #4
   8c31e:	9305      	str	r3, [sp, #20]
   8c320:	e05c      	b.n	8c3dc <_svfiprintf_r+0x3da>
   8c322:	4631      	mov	r1, r6
   8c324:	2500      	movs	r5, #0
   8c326:	f8d1 a000 	ldr.w	sl, [r1]
   8c32a:	3604      	adds	r6, #4
   8c32c:	45ac      	cmp	ip, r5
   8c32e:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8c332:	4650      	mov	r0, sl
   8c334:	db11      	blt.n	8c35a <_svfiprintf_r+0x358>
   8c336:	4662      	mov	r2, ip
   8c338:	4629      	mov	r1, r5
   8c33a:	f8cd c000 	str.w	ip, [sp]
   8c33e:	f7ff f80d 	bl	8b35c <memchr>
   8c342:	f8dd c000 	ldr.w	ip, [sp]
   8c346:	2800      	cmp	r0, #0
   8c348:	f000 80d5 	beq.w	8c4f6 <_svfiprintf_r+0x4f4>
   8c34c:	ebca 0400 	rsb	r4, sl, r0
   8c350:	4564      	cmp	r4, ip
   8c352:	f340 80d2 	ble.w	8c4fa <_svfiprintf_r+0x4f8>
   8c356:	4664      	mov	r4, ip
   8c358:	e0cf      	b.n	8c4fa <_svfiprintf_r+0x4f8>
   8c35a:	f7fc fead 	bl	890b8 <strlen>
   8c35e:	4604      	mov	r4, r0
   8c360:	e0cb      	b.n	8c4fa <_svfiprintf_r+0x4f8>
   8c362:	f047 0710 	orr.w	r7, r7, #16
   8c366:	06bd      	lsls	r5, r7, #26
   8c368:	d506      	bpl.n	8c378 <_svfiprintf_r+0x376>
   8c36a:	1df0      	adds	r0, r6, #7
   8c36c:	f020 0407 	bic.w	r4, r0, #7
   8c370:	f104 0608 	add.w	r6, r4, #8
   8c374:	cc30      	ldmia	r4, {r4, r5}
   8c376:	e00c      	b.n	8c392 <_svfiprintf_r+0x390>
   8c378:	f017 0f10 	tst.w	r7, #16
   8c37c:	f106 0304 	add.w	r3, r6, #4
   8c380:	d103      	bne.n	8c38a <_svfiprintf_r+0x388>
   8c382:	067c      	lsls	r4, r7, #25
   8c384:	d501      	bpl.n	8c38a <_svfiprintf_r+0x388>
   8c386:	8834      	ldrh	r4, [r6, #0]
   8c388:	e001      	b.n	8c38e <_svfiprintf_r+0x38c>
   8c38a:	6835      	ldr	r5, [r6, #0]
   8c38c:	462c      	mov	r4, r5
   8c38e:	2500      	movs	r5, #0
   8c390:	461e      	mov	r6, r3
   8c392:	2001      	movs	r0, #1
   8c394:	e023      	b.n	8c3de <_svfiprintf_r+0x3dc>
   8c396:	06b8      	lsls	r0, r7, #26
   8c398:	d507      	bpl.n	8c3aa <_svfiprintf_r+0x3a8>
   8c39a:	1df4      	adds	r4, r6, #7
   8c39c:	f024 0107 	bic.w	r1, r4, #7
   8c3a0:	f101 0608 	add.w	r6, r1, #8
   8c3a4:	e9d1 4500 	ldrd	r4, r5, [r1]
   8c3a8:	e00c      	b.n	8c3c4 <_svfiprintf_r+0x3c2>
   8c3aa:	f017 0f10 	tst.w	r7, #16
   8c3ae:	f106 0004 	add.w	r0, r6, #4
   8c3b2:	d103      	bne.n	8c3bc <_svfiprintf_r+0x3ba>
   8c3b4:	0679      	lsls	r1, r7, #25
   8c3b6:	d501      	bpl.n	8c3bc <_svfiprintf_r+0x3ba>
   8c3b8:	8834      	ldrh	r4, [r6, #0]
   8c3ba:	e001      	b.n	8c3c0 <_svfiprintf_r+0x3be>
   8c3bc:	6836      	ldr	r6, [r6, #0]
   8c3be:	4634      	mov	r4, r6
   8c3c0:	2500      	movs	r5, #0
   8c3c2:	4606      	mov	r6, r0
   8c3c4:	07fa      	lsls	r2, r7, #31
   8c3c6:	d509      	bpl.n	8c3dc <_svfiprintf_r+0x3da>
   8c3c8:	ea54 0205 	orrs.w	r2, r4, r5
   8c3cc:	d006      	beq.n	8c3dc <_svfiprintf_r+0x3da>
   8c3ce:	2230      	movs	r2, #48	; 0x30
   8c3d0:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   8c3d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   8c3d8:	f047 0702 	orr.w	r7, r7, #2
   8c3dc:	2002      	movs	r0, #2
   8c3de:	2100      	movs	r1, #0
   8c3e0:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   8c3e4:	e005      	b.n	8c3f2 <_svfiprintf_r+0x3f0>
   8c3e6:	bf00      	nop
   8c3e8:	0008dc6c 	.word	0x0008dc6c
   8c3ec:	0008dc7d 	.word	0x0008dc7d
   8c3f0:	2001      	movs	r0, #1
   8c3f2:	f1bc 0f00 	cmp.w	ip, #0
   8c3f6:	bfa8      	it	ge
   8c3f8:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   8c3fc:	ea54 0105 	orrs.w	r1, r4, r5
   8c400:	d102      	bne.n	8c408 <_svfiprintf_r+0x406>
   8c402:	f1bc 0f00 	cmp.w	ip, #0
   8c406:	d058      	beq.n	8c4ba <_svfiprintf_r+0x4b8>
   8c408:	2801      	cmp	r0, #1
   8c40a:	d01d      	beq.n	8c448 <_svfiprintf_r+0x446>
   8c40c:	2802      	cmp	r0, #2
   8c40e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8c412:	d041      	beq.n	8c498 <_svfiprintf_r+0x496>
   8c414:	f004 0207 	and.w	r2, r4, #7
   8c418:	08e4      	lsrs	r4, r4, #3
   8c41a:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   8c41e:	08e9      	lsrs	r1, r5, #3
   8c420:	4604      	mov	r4, r0
   8c422:	460d      	mov	r5, r1
   8c424:	3230      	adds	r2, #48	; 0x30
   8c426:	ea54 0105 	orrs.w	r1, r4, r5
   8c42a:	469a      	mov	sl, r3
   8c42c:	701a      	strb	r2, [r3, #0]
   8c42e:	f103 33ff 	add.w	r3, r3, #4294967295
   8c432:	d1ef      	bne.n	8c414 <_svfiprintf_r+0x412>
   8c434:	07f8      	lsls	r0, r7, #31
   8c436:	4655      	mov	r5, sl
   8c438:	d54a      	bpl.n	8c4d0 <_svfiprintf_r+0x4ce>
   8c43a:	2a30      	cmp	r2, #48	; 0x30
   8c43c:	d048      	beq.n	8c4d0 <_svfiprintf_r+0x4ce>
   8c43e:	2230      	movs	r2, #48	; 0x30
   8c440:	469a      	mov	sl, r3
   8c442:	f805 2c01 	strb.w	r2, [r5, #-1]
   8c446:	e043      	b.n	8c4d0 <_svfiprintf_r+0x4ce>
   8c448:	2d00      	cmp	r5, #0
   8c44a:	bf08      	it	eq
   8c44c:	2c0a      	cmpeq	r4, #10
   8c44e:	d203      	bcs.n	8c458 <_svfiprintf_r+0x456>
   8c450:	3430      	adds	r4, #48	; 0x30
   8c452:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   8c456:	e036      	b.n	8c4c6 <_svfiprintf_r+0x4c4>
   8c458:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8c45c:	9302      	str	r3, [sp, #8]
   8c45e:	4620      	mov	r0, r4
   8c460:	4629      	mov	r1, r5
   8c462:	220a      	movs	r2, #10
   8c464:	2300      	movs	r3, #0
   8c466:	f8cd c000 	str.w	ip, [sp]
   8c46a:	f000 fc45 	bl	8ccf8 <__aeabi_uldivmod>
   8c46e:	9802      	ldr	r0, [sp, #8]
   8c470:	3230      	adds	r2, #48	; 0x30
   8c472:	f800 2901 	strb.w	r2, [r0], #-1
   8c476:	4629      	mov	r1, r5
   8c478:	220a      	movs	r2, #10
   8c47a:	2300      	movs	r3, #0
   8c47c:	f8dd a008 	ldr.w	sl, [sp, #8]
   8c480:	9002      	str	r0, [sp, #8]
   8c482:	4620      	mov	r0, r4
   8c484:	f000 fc38 	bl	8ccf8 <__aeabi_uldivmod>
   8c488:	4604      	mov	r4, r0
   8c48a:	460d      	mov	r5, r1
   8c48c:	ea54 0105 	orrs.w	r1, r4, r5
   8c490:	f8dd c000 	ldr.w	ip, [sp]
   8c494:	d1e3      	bne.n	8c45e <_svfiprintf_r+0x45c>
   8c496:	e01b      	b.n	8c4d0 <_svfiprintf_r+0x4ce>
   8c498:	9905      	ldr	r1, [sp, #20]
   8c49a:	f004 000f 	and.w	r0, r4, #15
   8c49e:	0924      	lsrs	r4, r4, #4
   8c4a0:	5c0a      	ldrb	r2, [r1, r0]
   8c4a2:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   8c4a6:	0929      	lsrs	r1, r5, #4
   8c4a8:	4604      	mov	r4, r0
   8c4aa:	460d      	mov	r5, r1
   8c4ac:	469a      	mov	sl, r3
   8c4ae:	f803 2901 	strb.w	r2, [r3], #-1
   8c4b2:	ea54 0205 	orrs.w	r2, r4, r5
   8c4b6:	d1ef      	bne.n	8c498 <_svfiprintf_r+0x496>
   8c4b8:	e00a      	b.n	8c4d0 <_svfiprintf_r+0x4ce>
   8c4ba:	b938      	cbnz	r0, 8c4cc <_svfiprintf_r+0x4ca>
   8c4bc:	07f9      	lsls	r1, r7, #31
   8c4be:	d505      	bpl.n	8c4cc <_svfiprintf_r+0x4ca>
   8c4c0:	2030      	movs	r0, #48	; 0x30
   8c4c2:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   8c4c6:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   8c4ca:	e001      	b.n	8c4d0 <_svfiprintf_r+0x4ce>
   8c4cc:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   8c4d0:	ad18      	add	r5, sp, #96	; 0x60
   8c4d2:	ebca 0405 	rsb	r4, sl, r5
   8c4d6:	4665      	mov	r5, ip
   8c4d8:	e00f      	b.n	8c4fa <_svfiprintf_r+0x4f8>
   8c4da:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c4de:	2b00      	cmp	r3, #0
   8c4e0:	f000 8176 	beq.w	8c7d0 <_svfiprintf_r+0x7ce>
   8c4e4:	2500      	movs	r5, #0
   8c4e6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   8c4ea:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8c4ee:	2401      	movs	r4, #1
   8c4f0:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   8c4f4:	e001      	b.n	8c4fa <_svfiprintf_r+0x4f8>
   8c4f6:	4664      	mov	r4, ip
   8c4f8:	4605      	mov	r5, r0
   8c4fa:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8c4fe:	42ac      	cmp	r4, r5
   8c500:	bfac      	ite	ge
   8c502:	4621      	movge	r1, r4
   8c504:	4629      	movlt	r1, r5
   8c506:	9102      	str	r1, [sp, #8]
   8c508:	b113      	cbz	r3, 8c510 <_svfiprintf_r+0x50e>
   8c50a:	9802      	ldr	r0, [sp, #8]
   8c50c:	1c42      	adds	r2, r0, #1
   8c50e:	9202      	str	r2, [sp, #8]
   8c510:	f017 0102 	ands.w	r1, r7, #2
   8c514:	9106      	str	r1, [sp, #24]
   8c516:	d002      	beq.n	8c51e <_svfiprintf_r+0x51c>
   8c518:	9b02      	ldr	r3, [sp, #8]
   8c51a:	1c98      	adds	r0, r3, #2
   8c51c:	9002      	str	r0, [sp, #8]
   8c51e:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   8c522:	9207      	str	r2, [sp, #28]
   8c524:	d13c      	bne.n	8c5a0 <_svfiprintf_r+0x59e>
   8c526:	9903      	ldr	r1, [sp, #12]
   8c528:	9b02      	ldr	r3, [sp, #8]
   8c52a:	1acb      	subs	r3, r1, r3
   8c52c:	2b00      	cmp	r3, #0
   8c52e:	dd37      	ble.n	8c5a0 <_svfiprintf_r+0x59e>
   8c530:	48a5      	ldr	r0, [pc, #660]	; (8c7c8 <_svfiprintf_r+0x7c6>)
   8c532:	2b10      	cmp	r3, #16
   8c534:	f8c8 0000 	str.w	r0, [r8]
   8c538:	dd1b      	ble.n	8c572 <_svfiprintf_r+0x570>
   8c53a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c53c:	2110      	movs	r1, #16
   8c53e:	980d      	ldr	r0, [sp, #52]	; 0x34
   8c540:	f8c8 1004 	str.w	r1, [r8, #4]
   8c544:	1c51      	adds	r1, r2, #1
   8c546:	3010      	adds	r0, #16
   8c548:	2907      	cmp	r1, #7
   8c54a:	900d      	str	r0, [sp, #52]	; 0x34
   8c54c:	910c      	str	r1, [sp, #48]	; 0x30
   8c54e:	dc02      	bgt.n	8c556 <_svfiprintf_r+0x554>
   8c550:	f108 0808 	add.w	r8, r8, #8
   8c554:	e00b      	b.n	8c56e <_svfiprintf_r+0x56c>
   8c556:	4658      	mov	r0, fp
   8c558:	4649      	mov	r1, r9
   8c55a:	aa0b      	add	r2, sp, #44	; 0x2c
   8c55c:	9300      	str	r3, [sp, #0]
   8c55e:	f7ff fcd3 	bl	8bf08 <__ssprint_r>
   8c562:	9b00      	ldr	r3, [sp, #0]
   8c564:	2800      	cmp	r0, #0
   8c566:	f040 813a 	bne.w	8c7de <_svfiprintf_r+0x7dc>
   8c56a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c56e:	3b10      	subs	r3, #16
   8c570:	e7de      	b.n	8c530 <_svfiprintf_r+0x52e>
   8c572:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8c574:	f8c8 3004 	str.w	r3, [r8, #4]
   8c578:	18d1      	adds	r1, r2, r3
   8c57a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8c57c:	910d      	str	r1, [sp, #52]	; 0x34
   8c57e:	1c58      	adds	r0, r3, #1
   8c580:	2807      	cmp	r0, #7
   8c582:	900c      	str	r0, [sp, #48]	; 0x30
   8c584:	dc02      	bgt.n	8c58c <_svfiprintf_r+0x58a>
   8c586:	f108 0808 	add.w	r8, r8, #8
   8c58a:	e009      	b.n	8c5a0 <_svfiprintf_r+0x59e>
   8c58c:	4658      	mov	r0, fp
   8c58e:	4649      	mov	r1, r9
   8c590:	aa0b      	add	r2, sp, #44	; 0x2c
   8c592:	f7ff fcb9 	bl	8bf08 <__ssprint_r>
   8c596:	2800      	cmp	r0, #0
   8c598:	f040 8121 	bne.w	8c7de <_svfiprintf_r+0x7dc>
   8c59c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c5a0:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   8c5a4:	b1da      	cbz	r2, 8c5de <_svfiprintf_r+0x5dc>
   8c5a6:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   8c5aa:	f8c8 1000 	str.w	r1, [r8]
   8c5ae:	990c      	ldr	r1, [sp, #48]	; 0x30
   8c5b0:	2301      	movs	r3, #1
   8c5b2:	980d      	ldr	r0, [sp, #52]	; 0x34
   8c5b4:	f8c8 3004 	str.w	r3, [r8, #4]
   8c5b8:	1c4b      	adds	r3, r1, #1
   8c5ba:	1c42      	adds	r2, r0, #1
   8c5bc:	2b07      	cmp	r3, #7
   8c5be:	920d      	str	r2, [sp, #52]	; 0x34
   8c5c0:	930c      	str	r3, [sp, #48]	; 0x30
   8c5c2:	dc02      	bgt.n	8c5ca <_svfiprintf_r+0x5c8>
   8c5c4:	f108 0808 	add.w	r8, r8, #8
   8c5c8:	e009      	b.n	8c5de <_svfiprintf_r+0x5dc>
   8c5ca:	4658      	mov	r0, fp
   8c5cc:	4649      	mov	r1, r9
   8c5ce:	aa0b      	add	r2, sp, #44	; 0x2c
   8c5d0:	f7ff fc9a 	bl	8bf08 <__ssprint_r>
   8c5d4:	2800      	cmp	r0, #0
   8c5d6:	f040 8102 	bne.w	8c7de <_svfiprintf_r+0x7dc>
   8c5da:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c5de:	9806      	ldr	r0, [sp, #24]
   8c5e0:	b1d0      	cbz	r0, 8c618 <_svfiprintf_r+0x616>
   8c5e2:	aa0a      	add	r2, sp, #40	; 0x28
   8c5e4:	f8c8 2000 	str.w	r2, [r8]
   8c5e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c5ea:	2102      	movs	r1, #2
   8c5ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8c5ee:	f8c8 1004 	str.w	r1, [r8, #4]
   8c5f2:	1c51      	adds	r1, r2, #1
   8c5f4:	1c98      	adds	r0, r3, #2
   8c5f6:	2907      	cmp	r1, #7
   8c5f8:	900d      	str	r0, [sp, #52]	; 0x34
   8c5fa:	910c      	str	r1, [sp, #48]	; 0x30
   8c5fc:	dc02      	bgt.n	8c604 <_svfiprintf_r+0x602>
   8c5fe:	f108 0808 	add.w	r8, r8, #8
   8c602:	e009      	b.n	8c618 <_svfiprintf_r+0x616>
   8c604:	4658      	mov	r0, fp
   8c606:	4649      	mov	r1, r9
   8c608:	aa0b      	add	r2, sp, #44	; 0x2c
   8c60a:	f7ff fc7d 	bl	8bf08 <__ssprint_r>
   8c60e:	2800      	cmp	r0, #0
   8c610:	f040 80e5 	bne.w	8c7de <_svfiprintf_r+0x7dc>
   8c614:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c618:	9b07      	ldr	r3, [sp, #28]
   8c61a:	2b80      	cmp	r3, #128	; 0x80
   8c61c:	d13c      	bne.n	8c698 <_svfiprintf_r+0x696>
   8c61e:	9803      	ldr	r0, [sp, #12]
   8c620:	9a02      	ldr	r2, [sp, #8]
   8c622:	1a83      	subs	r3, r0, r2
   8c624:	2b00      	cmp	r3, #0
   8c626:	dd37      	ble.n	8c698 <_svfiprintf_r+0x696>
   8c628:	4968      	ldr	r1, [pc, #416]	; (8c7cc <_svfiprintf_r+0x7ca>)
   8c62a:	2b10      	cmp	r3, #16
   8c62c:	f8c8 1000 	str.w	r1, [r8]
   8c630:	dd1b      	ble.n	8c66a <_svfiprintf_r+0x668>
   8c632:	980c      	ldr	r0, [sp, #48]	; 0x30
   8c634:	2210      	movs	r2, #16
   8c636:	990d      	ldr	r1, [sp, #52]	; 0x34
   8c638:	f8c8 2004 	str.w	r2, [r8, #4]
   8c63c:	1c42      	adds	r2, r0, #1
   8c63e:	3110      	adds	r1, #16
   8c640:	2a07      	cmp	r2, #7
   8c642:	910d      	str	r1, [sp, #52]	; 0x34
   8c644:	920c      	str	r2, [sp, #48]	; 0x30
   8c646:	dc02      	bgt.n	8c64e <_svfiprintf_r+0x64c>
   8c648:	f108 0808 	add.w	r8, r8, #8
   8c64c:	e00b      	b.n	8c666 <_svfiprintf_r+0x664>
   8c64e:	4658      	mov	r0, fp
   8c650:	4649      	mov	r1, r9
   8c652:	aa0b      	add	r2, sp, #44	; 0x2c
   8c654:	9300      	str	r3, [sp, #0]
   8c656:	f7ff fc57 	bl	8bf08 <__ssprint_r>
   8c65a:	9b00      	ldr	r3, [sp, #0]
   8c65c:	2800      	cmp	r0, #0
   8c65e:	f040 80be 	bne.w	8c7de <_svfiprintf_r+0x7dc>
   8c662:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c666:	3b10      	subs	r3, #16
   8c668:	e7de      	b.n	8c628 <_svfiprintf_r+0x626>
   8c66a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c66c:	980d      	ldr	r0, [sp, #52]	; 0x34
   8c66e:	1c51      	adds	r1, r2, #1
   8c670:	f8c8 3004 	str.w	r3, [r8, #4]
   8c674:	2907      	cmp	r1, #7
   8c676:	4403      	add	r3, r0
   8c678:	930d      	str	r3, [sp, #52]	; 0x34
   8c67a:	910c      	str	r1, [sp, #48]	; 0x30
   8c67c:	dc02      	bgt.n	8c684 <_svfiprintf_r+0x682>
   8c67e:	f108 0808 	add.w	r8, r8, #8
   8c682:	e009      	b.n	8c698 <_svfiprintf_r+0x696>
   8c684:	4658      	mov	r0, fp
   8c686:	4649      	mov	r1, r9
   8c688:	aa0b      	add	r2, sp, #44	; 0x2c
   8c68a:	f7ff fc3d 	bl	8bf08 <__ssprint_r>
   8c68e:	2800      	cmp	r0, #0
   8c690:	f040 80a5 	bne.w	8c7de <_svfiprintf_r+0x7dc>
   8c694:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c698:	1b2d      	subs	r5, r5, r4
   8c69a:	2d00      	cmp	r5, #0
   8c69c:	dd34      	ble.n	8c708 <_svfiprintf_r+0x706>
   8c69e:	484b      	ldr	r0, [pc, #300]	; (8c7cc <_svfiprintf_r+0x7ca>)
   8c6a0:	2d10      	cmp	r5, #16
   8c6a2:	f8c8 0000 	str.w	r0, [r8]
   8c6a6:	dd19      	ble.n	8c6dc <_svfiprintf_r+0x6da>
   8c6a8:	980c      	ldr	r0, [sp, #48]	; 0x30
   8c6aa:	990d      	ldr	r1, [sp, #52]	; 0x34
   8c6ac:	1c43      	adds	r3, r0, #1
   8c6ae:	2210      	movs	r2, #16
   8c6b0:	3110      	adds	r1, #16
   8c6b2:	2b07      	cmp	r3, #7
   8c6b4:	f8c8 2004 	str.w	r2, [r8, #4]
   8c6b8:	910d      	str	r1, [sp, #52]	; 0x34
   8c6ba:	930c      	str	r3, [sp, #48]	; 0x30
   8c6bc:	dc02      	bgt.n	8c6c4 <_svfiprintf_r+0x6c2>
   8c6be:	f108 0808 	add.w	r8, r8, #8
   8c6c2:	e009      	b.n	8c6d8 <_svfiprintf_r+0x6d6>
   8c6c4:	4658      	mov	r0, fp
   8c6c6:	4649      	mov	r1, r9
   8c6c8:	aa0b      	add	r2, sp, #44	; 0x2c
   8c6ca:	f7ff fc1d 	bl	8bf08 <__ssprint_r>
   8c6ce:	2800      	cmp	r0, #0
   8c6d0:	f040 8085 	bne.w	8c7de <_svfiprintf_r+0x7dc>
   8c6d4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c6d8:	3d10      	subs	r5, #16
   8c6da:	e7e0      	b.n	8c69e <_svfiprintf_r+0x69c>
   8c6dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c6de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8c6e0:	1c51      	adds	r1, r2, #1
   8c6e2:	f8c8 5004 	str.w	r5, [r8, #4]
   8c6e6:	2907      	cmp	r1, #7
   8c6e8:	441d      	add	r5, r3
   8c6ea:	950d      	str	r5, [sp, #52]	; 0x34
   8c6ec:	910c      	str	r1, [sp, #48]	; 0x30
   8c6ee:	dc02      	bgt.n	8c6f6 <_svfiprintf_r+0x6f4>
   8c6f0:	f108 0808 	add.w	r8, r8, #8
   8c6f4:	e008      	b.n	8c708 <_svfiprintf_r+0x706>
   8c6f6:	4658      	mov	r0, fp
   8c6f8:	4649      	mov	r1, r9
   8c6fa:	aa0b      	add	r2, sp, #44	; 0x2c
   8c6fc:	f7ff fc04 	bl	8bf08 <__ssprint_r>
   8c700:	2800      	cmp	r0, #0
   8c702:	d16c      	bne.n	8c7de <_svfiprintf_r+0x7dc>
   8c704:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8c70a:	980d      	ldr	r0, [sp, #52]	; 0x34
   8c70c:	1c5a      	adds	r2, r3, #1
   8c70e:	f8c8 4004 	str.w	r4, [r8, #4]
   8c712:	2a07      	cmp	r2, #7
   8c714:	4404      	add	r4, r0
   8c716:	f8c8 a000 	str.w	sl, [r8]
   8c71a:	940d      	str	r4, [sp, #52]	; 0x34
   8c71c:	920c      	str	r2, [sp, #48]	; 0x30
   8c71e:	dc02      	bgt.n	8c726 <_svfiprintf_r+0x724>
   8c720:	f108 0308 	add.w	r3, r8, #8
   8c724:	e007      	b.n	8c736 <_svfiprintf_r+0x734>
   8c726:	4658      	mov	r0, fp
   8c728:	4649      	mov	r1, r9
   8c72a:	aa0b      	add	r2, sp, #44	; 0x2c
   8c72c:	f7ff fbec 	bl	8bf08 <__ssprint_r>
   8c730:	2800      	cmp	r0, #0
   8c732:	d154      	bne.n	8c7de <_svfiprintf_r+0x7dc>
   8c734:	ab18      	add	r3, sp, #96	; 0x60
   8c736:	077a      	lsls	r2, r7, #29
   8c738:	d40b      	bmi.n	8c752 <_svfiprintf_r+0x750>
   8c73a:	9804      	ldr	r0, [sp, #16]
   8c73c:	9b02      	ldr	r3, [sp, #8]
   8c73e:	9a03      	ldr	r2, [sp, #12]
   8c740:	990d      	ldr	r1, [sp, #52]	; 0x34
   8c742:	4293      	cmp	r3, r2
   8c744:	bfac      	ite	ge
   8c746:	18c0      	addge	r0, r0, r3
   8c748:	1880      	addlt	r0, r0, r2
   8c74a:	9004      	str	r0, [sp, #16]
   8c74c:	2900      	cmp	r1, #0
   8c74e:	d036      	beq.n	8c7be <_svfiprintf_r+0x7bc>
   8c750:	e02f      	b.n	8c7b2 <_svfiprintf_r+0x7b0>
   8c752:	9c03      	ldr	r4, [sp, #12]
   8c754:	9902      	ldr	r1, [sp, #8]
   8c756:	1a64      	subs	r4, r4, r1
   8c758:	2c00      	cmp	r4, #0
   8c75a:	ddee      	ble.n	8c73a <_svfiprintf_r+0x738>
   8c75c:	481a      	ldr	r0, [pc, #104]	; (8c7c8 <_svfiprintf_r+0x7c6>)
   8c75e:	2c10      	cmp	r4, #16
   8c760:	6018      	str	r0, [r3, #0]
   8c762:	dd15      	ble.n	8c790 <_svfiprintf_r+0x78e>
   8c764:	990c      	ldr	r1, [sp, #48]	; 0x30
   8c766:	2010      	movs	r0, #16
   8c768:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8c76a:	6058      	str	r0, [r3, #4]
   8c76c:	1c48      	adds	r0, r1, #1
   8c76e:	3210      	adds	r2, #16
   8c770:	2807      	cmp	r0, #7
   8c772:	920d      	str	r2, [sp, #52]	; 0x34
   8c774:	900c      	str	r0, [sp, #48]	; 0x30
   8c776:	dc01      	bgt.n	8c77c <_svfiprintf_r+0x77a>
   8c778:	3308      	adds	r3, #8
   8c77a:	e007      	b.n	8c78c <_svfiprintf_r+0x78a>
   8c77c:	4658      	mov	r0, fp
   8c77e:	4649      	mov	r1, r9
   8c780:	aa0b      	add	r2, sp, #44	; 0x2c
   8c782:	f7ff fbc1 	bl	8bf08 <__ssprint_r>
   8c786:	2800      	cmp	r0, #0
   8c788:	d129      	bne.n	8c7de <_svfiprintf_r+0x7dc>
   8c78a:	ab18      	add	r3, sp, #96	; 0x60
   8c78c:	3c10      	subs	r4, #16
   8c78e:	e7e5      	b.n	8c75c <_svfiprintf_r+0x75a>
   8c790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c792:	605c      	str	r4, [r3, #4]
   8c794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8c796:	1c51      	adds	r1, r2, #1
   8c798:	191c      	adds	r4, r3, r4
   8c79a:	2907      	cmp	r1, #7
   8c79c:	940d      	str	r4, [sp, #52]	; 0x34
   8c79e:	910c      	str	r1, [sp, #48]	; 0x30
   8c7a0:	ddcb      	ble.n	8c73a <_svfiprintf_r+0x738>
   8c7a2:	4658      	mov	r0, fp
   8c7a4:	4649      	mov	r1, r9
   8c7a6:	aa0b      	add	r2, sp, #44	; 0x2c
   8c7a8:	f7ff fbae 	bl	8bf08 <__ssprint_r>
   8c7ac:	2800      	cmp	r0, #0
   8c7ae:	d0c4      	beq.n	8c73a <_svfiprintf_r+0x738>
   8c7b0:	e015      	b.n	8c7de <_svfiprintf_r+0x7dc>
   8c7b2:	4658      	mov	r0, fp
   8c7b4:	4649      	mov	r1, r9
   8c7b6:	aa0b      	add	r2, sp, #44	; 0x2c
   8c7b8:	f7ff fba6 	bl	8bf08 <__ssprint_r>
   8c7bc:	b978      	cbnz	r0, 8c7de <_svfiprintf_r+0x7dc>
   8c7be:	2500      	movs	r5, #0
   8c7c0:	950c      	str	r5, [sp, #48]	; 0x30
   8c7c2:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c7c6:	e445      	b.n	8c054 <_svfiprintf_r+0x52>
   8c7c8:	0008ddd0 	.word	0x0008ddd0
   8c7cc:	0008dde0 	.word	0x0008dde0
   8c7d0:	980d      	ldr	r0, [sp, #52]	; 0x34
   8c7d2:	b120      	cbz	r0, 8c7de <_svfiprintf_r+0x7dc>
   8c7d4:	4658      	mov	r0, fp
   8c7d6:	4649      	mov	r1, r9
   8c7d8:	aa0b      	add	r2, sp, #44	; 0x2c
   8c7da:	f7ff fb95 	bl	8bf08 <__ssprint_r>
   8c7de:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   8c7e2:	9b04      	ldr	r3, [sp, #16]
   8c7e4:	f002 0140 	and.w	r1, r2, #64	; 0x40
   8c7e8:	b208      	sxth	r0, r1
   8c7ea:	2800      	cmp	r0, #0
   8c7ec:	bf18      	it	ne
   8c7ee:	f04f 33ff 	movne.w	r3, #4294967295
   8c7f2:	4618      	mov	r0, r3
   8c7f4:	b029      	add	sp, #164	; 0xa4
   8c7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c7fa:	bf00      	nop

0008c7fc <_calloc_r>:
   8c7fc:	b510      	push	{r4, lr}
   8c7fe:	4351      	muls	r1, r2
   8c800:	f7fe fbaa 	bl	8af58 <_malloc_r>
   8c804:	4604      	mov	r4, r0
   8c806:	b320      	cbz	r0, 8c852 <_calloc_r+0x56>
   8c808:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8c80c:	f022 0103 	bic.w	r1, r2, #3
   8c810:	1f0a      	subs	r2, r1, #4
   8c812:	2a24      	cmp	r2, #36	; 0x24
   8c814:	d81a      	bhi.n	8c84c <_calloc_r+0x50>
   8c816:	2a13      	cmp	r2, #19
   8c818:	d912      	bls.n	8c840 <_calloc_r+0x44>
   8c81a:	2300      	movs	r3, #0
   8c81c:	2a1b      	cmp	r2, #27
   8c81e:	6003      	str	r3, [r0, #0]
   8c820:	6043      	str	r3, [r0, #4]
   8c822:	d802      	bhi.n	8c82a <_calloc_r+0x2e>
   8c824:	f100 0308 	add.w	r3, r0, #8
   8c828:	e00b      	b.n	8c842 <_calloc_r+0x46>
   8c82a:	2a24      	cmp	r2, #36	; 0x24
   8c82c:	6083      	str	r3, [r0, #8]
   8c82e:	60c3      	str	r3, [r0, #12]
   8c830:	bf05      	ittet	eq
   8c832:	6103      	streq	r3, [r0, #16]
   8c834:	6143      	streq	r3, [r0, #20]
   8c836:	f100 0310 	addne.w	r3, r0, #16
   8c83a:	f100 0318 	addeq.w	r3, r0, #24
   8c83e:	e000      	b.n	8c842 <_calloc_r+0x46>
   8c840:	4603      	mov	r3, r0
   8c842:	2000      	movs	r0, #0
   8c844:	6018      	str	r0, [r3, #0]
   8c846:	6058      	str	r0, [r3, #4]
   8c848:	6098      	str	r0, [r3, #8]
   8c84a:	e002      	b.n	8c852 <_calloc_r+0x56>
   8c84c:	2100      	movs	r1, #0
   8c84e:	f7fc fbc8 	bl	88fe2 <memset>
   8c852:	4620      	mov	r0, r4
   8c854:	bd10      	pop	{r4, pc}
	...

0008c858 <__aeabi_drsub>:
   8c858:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8c85c:	e002      	b.n	8c864 <__adddf3>
   8c85e:	bf00      	nop

0008c860 <__aeabi_dsub>:
   8c860:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008c864 <__adddf3>:
   8c864:	b530      	push	{r4, r5, lr}
   8c866:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8c86a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8c86e:	ea94 0f05 	teq	r4, r5
   8c872:	bf08      	it	eq
   8c874:	ea90 0f02 	teqeq	r0, r2
   8c878:	bf1f      	itttt	ne
   8c87a:	ea54 0c00 	orrsne.w	ip, r4, r0
   8c87e:	ea55 0c02 	orrsne.w	ip, r5, r2
   8c882:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8c886:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8c88a:	f000 80e2 	beq.w	8ca52 <__adddf3+0x1ee>
   8c88e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8c892:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8c896:	bfb8      	it	lt
   8c898:	426d      	neglt	r5, r5
   8c89a:	dd0c      	ble.n	8c8b6 <__adddf3+0x52>
   8c89c:	442c      	add	r4, r5
   8c89e:	ea80 0202 	eor.w	r2, r0, r2
   8c8a2:	ea81 0303 	eor.w	r3, r1, r3
   8c8a6:	ea82 0000 	eor.w	r0, r2, r0
   8c8aa:	ea83 0101 	eor.w	r1, r3, r1
   8c8ae:	ea80 0202 	eor.w	r2, r0, r2
   8c8b2:	ea81 0303 	eor.w	r3, r1, r3
   8c8b6:	2d36      	cmp	r5, #54	; 0x36
   8c8b8:	bf88      	it	hi
   8c8ba:	bd30      	pophi	{r4, r5, pc}
   8c8bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8c8c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c8c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8c8c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8c8cc:	d002      	beq.n	8c8d4 <__adddf3+0x70>
   8c8ce:	4240      	negs	r0, r0
   8c8d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c8d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8c8d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c8dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8c8e0:	d002      	beq.n	8c8e8 <__adddf3+0x84>
   8c8e2:	4252      	negs	r2, r2
   8c8e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8c8e8:	ea94 0f05 	teq	r4, r5
   8c8ec:	f000 80a7 	beq.w	8ca3e <__adddf3+0x1da>
   8c8f0:	f1a4 0401 	sub.w	r4, r4, #1
   8c8f4:	f1d5 0e20 	rsbs	lr, r5, #32
   8c8f8:	db0d      	blt.n	8c916 <__adddf3+0xb2>
   8c8fa:	fa02 fc0e 	lsl.w	ip, r2, lr
   8c8fe:	fa22 f205 	lsr.w	r2, r2, r5
   8c902:	1880      	adds	r0, r0, r2
   8c904:	f141 0100 	adc.w	r1, r1, #0
   8c908:	fa03 f20e 	lsl.w	r2, r3, lr
   8c90c:	1880      	adds	r0, r0, r2
   8c90e:	fa43 f305 	asr.w	r3, r3, r5
   8c912:	4159      	adcs	r1, r3
   8c914:	e00e      	b.n	8c934 <__adddf3+0xd0>
   8c916:	f1a5 0520 	sub.w	r5, r5, #32
   8c91a:	f10e 0e20 	add.w	lr, lr, #32
   8c91e:	2a01      	cmp	r2, #1
   8c920:	fa03 fc0e 	lsl.w	ip, r3, lr
   8c924:	bf28      	it	cs
   8c926:	f04c 0c02 	orrcs.w	ip, ip, #2
   8c92a:	fa43 f305 	asr.w	r3, r3, r5
   8c92e:	18c0      	adds	r0, r0, r3
   8c930:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8c934:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c938:	d507      	bpl.n	8c94a <__adddf3+0xe6>
   8c93a:	f04f 0e00 	mov.w	lr, #0
   8c93e:	f1dc 0c00 	rsbs	ip, ip, #0
   8c942:	eb7e 0000 	sbcs.w	r0, lr, r0
   8c946:	eb6e 0101 	sbc.w	r1, lr, r1
   8c94a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8c94e:	d31b      	bcc.n	8c988 <__adddf3+0x124>
   8c950:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8c954:	d30c      	bcc.n	8c970 <__adddf3+0x10c>
   8c956:	0849      	lsrs	r1, r1, #1
   8c958:	ea5f 0030 	movs.w	r0, r0, rrx
   8c95c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8c960:	f104 0401 	add.w	r4, r4, #1
   8c964:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8c968:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8c96c:	f080 809a 	bcs.w	8caa4 <__adddf3+0x240>
   8c970:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8c974:	bf08      	it	eq
   8c976:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8c97a:	f150 0000 	adcs.w	r0, r0, #0
   8c97e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c982:	ea41 0105 	orr.w	r1, r1, r5
   8c986:	bd30      	pop	{r4, r5, pc}
   8c988:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8c98c:	4140      	adcs	r0, r0
   8c98e:	eb41 0101 	adc.w	r1, r1, r1
   8c992:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c996:	f1a4 0401 	sub.w	r4, r4, #1
   8c99a:	d1e9      	bne.n	8c970 <__adddf3+0x10c>
   8c99c:	f091 0f00 	teq	r1, #0
   8c9a0:	bf04      	itt	eq
   8c9a2:	4601      	moveq	r1, r0
   8c9a4:	2000      	moveq	r0, #0
   8c9a6:	fab1 f381 	clz	r3, r1
   8c9aa:	bf08      	it	eq
   8c9ac:	3320      	addeq	r3, #32
   8c9ae:	f1a3 030b 	sub.w	r3, r3, #11
   8c9b2:	f1b3 0220 	subs.w	r2, r3, #32
   8c9b6:	da0c      	bge.n	8c9d2 <__adddf3+0x16e>
   8c9b8:	320c      	adds	r2, #12
   8c9ba:	dd08      	ble.n	8c9ce <__adddf3+0x16a>
   8c9bc:	f102 0c14 	add.w	ip, r2, #20
   8c9c0:	f1c2 020c 	rsb	r2, r2, #12
   8c9c4:	fa01 f00c 	lsl.w	r0, r1, ip
   8c9c8:	fa21 f102 	lsr.w	r1, r1, r2
   8c9cc:	e00c      	b.n	8c9e8 <__adddf3+0x184>
   8c9ce:	f102 0214 	add.w	r2, r2, #20
   8c9d2:	bfd8      	it	le
   8c9d4:	f1c2 0c20 	rsble	ip, r2, #32
   8c9d8:	fa01 f102 	lsl.w	r1, r1, r2
   8c9dc:	fa20 fc0c 	lsr.w	ip, r0, ip
   8c9e0:	bfdc      	itt	le
   8c9e2:	ea41 010c 	orrle.w	r1, r1, ip
   8c9e6:	4090      	lslle	r0, r2
   8c9e8:	1ae4      	subs	r4, r4, r3
   8c9ea:	bfa2      	ittt	ge
   8c9ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8c9f0:	4329      	orrge	r1, r5
   8c9f2:	bd30      	popge	{r4, r5, pc}
   8c9f4:	ea6f 0404 	mvn.w	r4, r4
   8c9f8:	3c1f      	subs	r4, #31
   8c9fa:	da1c      	bge.n	8ca36 <__adddf3+0x1d2>
   8c9fc:	340c      	adds	r4, #12
   8c9fe:	dc0e      	bgt.n	8ca1e <__adddf3+0x1ba>
   8ca00:	f104 0414 	add.w	r4, r4, #20
   8ca04:	f1c4 0220 	rsb	r2, r4, #32
   8ca08:	fa20 f004 	lsr.w	r0, r0, r4
   8ca0c:	fa01 f302 	lsl.w	r3, r1, r2
   8ca10:	ea40 0003 	orr.w	r0, r0, r3
   8ca14:	fa21 f304 	lsr.w	r3, r1, r4
   8ca18:	ea45 0103 	orr.w	r1, r5, r3
   8ca1c:	bd30      	pop	{r4, r5, pc}
   8ca1e:	f1c4 040c 	rsb	r4, r4, #12
   8ca22:	f1c4 0220 	rsb	r2, r4, #32
   8ca26:	fa20 f002 	lsr.w	r0, r0, r2
   8ca2a:	fa01 f304 	lsl.w	r3, r1, r4
   8ca2e:	ea40 0003 	orr.w	r0, r0, r3
   8ca32:	4629      	mov	r1, r5
   8ca34:	bd30      	pop	{r4, r5, pc}
   8ca36:	fa21 f004 	lsr.w	r0, r1, r4
   8ca3a:	4629      	mov	r1, r5
   8ca3c:	bd30      	pop	{r4, r5, pc}
   8ca3e:	f094 0f00 	teq	r4, #0
   8ca42:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8ca46:	bf06      	itte	eq
   8ca48:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8ca4c:	3401      	addeq	r4, #1
   8ca4e:	3d01      	subne	r5, #1
   8ca50:	e74e      	b.n	8c8f0 <__adddf3+0x8c>
   8ca52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8ca56:	bf18      	it	ne
   8ca58:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8ca5c:	d029      	beq.n	8cab2 <__adddf3+0x24e>
   8ca5e:	ea94 0f05 	teq	r4, r5
   8ca62:	bf08      	it	eq
   8ca64:	ea90 0f02 	teqeq	r0, r2
   8ca68:	d005      	beq.n	8ca76 <__adddf3+0x212>
   8ca6a:	ea54 0c00 	orrs.w	ip, r4, r0
   8ca6e:	bf04      	itt	eq
   8ca70:	4619      	moveq	r1, r3
   8ca72:	4610      	moveq	r0, r2
   8ca74:	bd30      	pop	{r4, r5, pc}
   8ca76:	ea91 0f03 	teq	r1, r3
   8ca7a:	bf1e      	ittt	ne
   8ca7c:	2100      	movne	r1, #0
   8ca7e:	2000      	movne	r0, #0
   8ca80:	bd30      	popne	{r4, r5, pc}
   8ca82:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8ca86:	d105      	bne.n	8ca94 <__adddf3+0x230>
   8ca88:	0040      	lsls	r0, r0, #1
   8ca8a:	4149      	adcs	r1, r1
   8ca8c:	bf28      	it	cs
   8ca8e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8ca92:	bd30      	pop	{r4, r5, pc}
   8ca94:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8ca98:	bf3c      	itt	cc
   8ca9a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8ca9e:	bd30      	popcc	{r4, r5, pc}
   8caa0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8caa4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8caa8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8caac:	f04f 0000 	mov.w	r0, #0
   8cab0:	bd30      	pop	{r4, r5, pc}
   8cab2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8cab6:	bf1a      	itte	ne
   8cab8:	4619      	movne	r1, r3
   8caba:	4610      	movne	r0, r2
   8cabc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8cac0:	bf1c      	itt	ne
   8cac2:	460b      	movne	r3, r1
   8cac4:	4602      	movne	r2, r0
   8cac6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8caca:	bf06      	itte	eq
   8cacc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8cad0:	ea91 0f03 	teqeq	r1, r3
   8cad4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8cad8:	bd30      	pop	{r4, r5, pc}
   8cada:	bf00      	nop

0008cadc <__aeabi_ui2d>:
   8cadc:	f090 0f00 	teq	r0, #0
   8cae0:	bf04      	itt	eq
   8cae2:	2100      	moveq	r1, #0
   8cae4:	4770      	bxeq	lr
   8cae6:	b530      	push	{r4, r5, lr}
   8cae8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8caec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8caf0:	f04f 0500 	mov.w	r5, #0
   8caf4:	f04f 0100 	mov.w	r1, #0
   8caf8:	e750      	b.n	8c99c <__adddf3+0x138>
   8cafa:	bf00      	nop

0008cafc <__aeabi_i2d>:
   8cafc:	f090 0f00 	teq	r0, #0
   8cb00:	bf04      	itt	eq
   8cb02:	2100      	moveq	r1, #0
   8cb04:	4770      	bxeq	lr
   8cb06:	b530      	push	{r4, r5, lr}
   8cb08:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8cb0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8cb10:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8cb14:	bf48      	it	mi
   8cb16:	4240      	negmi	r0, r0
   8cb18:	f04f 0100 	mov.w	r1, #0
   8cb1c:	e73e      	b.n	8c99c <__adddf3+0x138>
   8cb1e:	bf00      	nop

0008cb20 <__aeabi_f2d>:
   8cb20:	0042      	lsls	r2, r0, #1
   8cb22:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8cb26:	ea4f 0131 	mov.w	r1, r1, rrx
   8cb2a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8cb2e:	bf1f      	itttt	ne
   8cb30:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8cb34:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8cb38:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8cb3c:	4770      	bxne	lr
   8cb3e:	f092 0f00 	teq	r2, #0
   8cb42:	bf14      	ite	ne
   8cb44:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8cb48:	4770      	bxeq	lr
   8cb4a:	b530      	push	{r4, r5, lr}
   8cb4c:	f44f 7460 	mov.w	r4, #896	; 0x380
   8cb50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8cb54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8cb58:	e720      	b.n	8c99c <__adddf3+0x138>
   8cb5a:	bf00      	nop

0008cb5c <__aeabi_ul2d>:
   8cb5c:	ea50 0201 	orrs.w	r2, r0, r1
   8cb60:	bf08      	it	eq
   8cb62:	4770      	bxeq	lr
   8cb64:	b530      	push	{r4, r5, lr}
   8cb66:	f04f 0500 	mov.w	r5, #0
   8cb6a:	e00a      	b.n	8cb82 <__aeabi_l2d+0x16>

0008cb6c <__aeabi_l2d>:
   8cb6c:	ea50 0201 	orrs.w	r2, r0, r1
   8cb70:	bf08      	it	eq
   8cb72:	4770      	bxeq	lr
   8cb74:	b530      	push	{r4, r5, lr}
   8cb76:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8cb7a:	d502      	bpl.n	8cb82 <__aeabi_l2d+0x16>
   8cb7c:	4240      	negs	r0, r0
   8cb7e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8cb82:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8cb86:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8cb8a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8cb8e:	f43f aedc 	beq.w	8c94a <__adddf3+0xe6>
   8cb92:	f04f 0203 	mov.w	r2, #3
   8cb96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8cb9a:	bf18      	it	ne
   8cb9c:	3203      	addne	r2, #3
   8cb9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8cba2:	bf18      	it	ne
   8cba4:	3203      	addne	r2, #3
   8cba6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8cbaa:	f1c2 0320 	rsb	r3, r2, #32
   8cbae:	fa00 fc03 	lsl.w	ip, r0, r3
   8cbb2:	fa20 f002 	lsr.w	r0, r0, r2
   8cbb6:	fa01 fe03 	lsl.w	lr, r1, r3
   8cbba:	ea40 000e 	orr.w	r0, r0, lr
   8cbbe:	fa21 f102 	lsr.w	r1, r1, r2
   8cbc2:	4414      	add	r4, r2
   8cbc4:	e6c1      	b.n	8c94a <__adddf3+0xe6>
   8cbc6:	bf00      	nop

0008cbc8 <__aeabi_d2iz>:
   8cbc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8cbcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8cbd0:	d215      	bcs.n	8cbfe <__aeabi_d2iz+0x36>
   8cbd2:	d511      	bpl.n	8cbf8 <__aeabi_d2iz+0x30>
   8cbd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8cbd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8cbdc:	d912      	bls.n	8cc04 <__aeabi_d2iz+0x3c>
   8cbde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8cbe2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8cbe6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8cbea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8cbee:	fa23 f002 	lsr.w	r0, r3, r2
   8cbf2:	bf18      	it	ne
   8cbf4:	4240      	negne	r0, r0
   8cbf6:	4770      	bx	lr
   8cbf8:	f04f 0000 	mov.w	r0, #0
   8cbfc:	4770      	bx	lr
   8cbfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8cc02:	d105      	bne.n	8cc10 <__aeabi_d2iz+0x48>
   8cc04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8cc08:	bf08      	it	eq
   8cc0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8cc0e:	4770      	bx	lr
   8cc10:	f04f 0000 	mov.w	r0, #0
   8cc14:	4770      	bx	lr
   8cc16:	bf00      	nop

0008cc18 <__aeabi_d2uiz>:
   8cc18:	004a      	lsls	r2, r1, #1
   8cc1a:	d211      	bcs.n	8cc40 <__aeabi_d2uiz+0x28>
   8cc1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8cc20:	d211      	bcs.n	8cc46 <__aeabi_d2uiz+0x2e>
   8cc22:	d50d      	bpl.n	8cc40 <__aeabi_d2uiz+0x28>
   8cc24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8cc28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8cc2c:	d40e      	bmi.n	8cc4c <__aeabi_d2uiz+0x34>
   8cc2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8cc32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8cc36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8cc3a:	fa23 f002 	lsr.w	r0, r3, r2
   8cc3e:	4770      	bx	lr
   8cc40:	f04f 0000 	mov.w	r0, #0
   8cc44:	4770      	bx	lr
   8cc46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8cc4a:	d102      	bne.n	8cc52 <__aeabi_d2uiz+0x3a>
   8cc4c:	f04f 30ff 	mov.w	r0, #4294967295
   8cc50:	4770      	bx	lr
   8cc52:	f04f 0000 	mov.w	r0, #0
   8cc56:	4770      	bx	lr

0008cc58 <__aeabi_d2f>:
   8cc58:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8cc5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   8cc60:	bf24      	itt	cs
   8cc62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   8cc66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   8cc6a:	d90d      	bls.n	8cc88 <__aeabi_d2f+0x30>
   8cc6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8cc70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   8cc74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   8cc78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   8cc7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   8cc80:	bf08      	it	eq
   8cc82:	f020 0001 	biceq.w	r0, r0, #1
   8cc86:	4770      	bx	lr
   8cc88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   8cc8c:	d121      	bne.n	8ccd2 <__aeabi_d2f+0x7a>
   8cc8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   8cc92:	bfbc      	itt	lt
   8cc94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   8cc98:	4770      	bxlt	lr
   8cc9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8cc9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   8cca2:	f1c2 0218 	rsb	r2, r2, #24
   8cca6:	f1c2 0c20 	rsb	ip, r2, #32
   8ccaa:	fa10 f30c 	lsls.w	r3, r0, ip
   8ccae:	fa20 f002 	lsr.w	r0, r0, r2
   8ccb2:	bf18      	it	ne
   8ccb4:	f040 0001 	orrne.w	r0, r0, #1
   8ccb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8ccbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   8ccc0:	fa03 fc0c 	lsl.w	ip, r3, ip
   8ccc4:	ea40 000c 	orr.w	r0, r0, ip
   8ccc8:	fa23 f302 	lsr.w	r3, r3, r2
   8cccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   8ccd0:	e7cc      	b.n	8cc6c <__aeabi_d2f+0x14>
   8ccd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   8ccd6:	d107      	bne.n	8cce8 <__aeabi_d2f+0x90>
   8ccd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   8ccdc:	bf1e      	ittt	ne
   8ccde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   8cce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   8cce6:	4770      	bxne	lr
   8cce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   8ccec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8ccf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8ccf4:	4770      	bx	lr
   8ccf6:	bf00      	nop

0008ccf8 <__aeabi_uldivmod>:
   8ccf8:	b94b      	cbnz	r3, 8cd0e <__aeabi_uldivmod+0x16>
   8ccfa:	b942      	cbnz	r2, 8cd0e <__aeabi_uldivmod+0x16>
   8ccfc:	2900      	cmp	r1, #0
   8ccfe:	bf08      	it	eq
   8cd00:	2800      	cmpeq	r0, #0
   8cd02:	d002      	beq.n	8cd0a <__aeabi_uldivmod+0x12>
   8cd04:	f04f 31ff 	mov.w	r1, #4294967295
   8cd08:	4608      	mov	r0, r1
   8cd0a:	f000 b83b 	b.w	8cd84 <__aeabi_idiv0>
   8cd0e:	b082      	sub	sp, #8
   8cd10:	46ec      	mov	ip, sp
   8cd12:	e92d 5000 	stmdb	sp!, {ip, lr}
   8cd16:	f000 f81d 	bl	8cd54 <__gnu_uldivmod_helper>
   8cd1a:	f8dd e004 	ldr.w	lr, [sp, #4]
   8cd1e:	b002      	add	sp, #8
   8cd20:	bc0c      	pop	{r2, r3}
   8cd22:	4770      	bx	lr

0008cd24 <__gnu_ldivmod_helper>:
   8cd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8cd28:	4616      	mov	r6, r2
   8cd2a:	4698      	mov	r8, r3
   8cd2c:	4604      	mov	r4, r0
   8cd2e:	460d      	mov	r5, r1
   8cd30:	f000 f82a 	bl	8cd88 <__divdi3>
   8cd34:	fb06 fc01 	mul.w	ip, r6, r1
   8cd38:	fba6 2300 	umull	r2, r3, r6, r0
   8cd3c:	fb00 c708 	mla	r7, r0, r8, ip
   8cd40:	18fb      	adds	r3, r7, r3
   8cd42:	1aa2      	subs	r2, r4, r2
   8cd44:	eb65 0303 	sbc.w	r3, r5, r3
   8cd48:	9c06      	ldr	r4, [sp, #24]
   8cd4a:	e9c4 2300 	strd	r2, r3, [r4]
   8cd4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8cd52:	bf00      	nop

0008cd54 <__gnu_uldivmod_helper>:
   8cd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8cd58:	4690      	mov	r8, r2
   8cd5a:	4606      	mov	r6, r0
   8cd5c:	460f      	mov	r7, r1
   8cd5e:	461d      	mov	r5, r3
   8cd60:	f000 f970 	bl	8d044 <__udivdi3>
   8cd64:	fb00 f305 	mul.w	r3, r0, r5
   8cd68:	fba0 4508 	umull	r4, r5, r0, r8
   8cd6c:	fb08 3801 	mla	r8, r8, r1, r3
   8cd70:	9b06      	ldr	r3, [sp, #24]
   8cd72:	4445      	add	r5, r8
   8cd74:	1b34      	subs	r4, r6, r4
   8cd76:	eb67 0505 	sbc.w	r5, r7, r5
   8cd7a:	e9c3 4500 	strd	r4, r5, [r3]
   8cd7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8cd82:	bf00      	nop

0008cd84 <__aeabi_idiv0>:
   8cd84:	4770      	bx	lr
   8cd86:	bf00      	nop

0008cd88 <__divdi3>:
   8cd88:	2900      	cmp	r1, #0
   8cd8a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8cd8e:	461d      	mov	r5, r3
   8cd90:	f2c0 809d 	blt.w	8cece <__divdi3+0x146>
   8cd94:	2400      	movs	r4, #0
   8cd96:	2d00      	cmp	r5, #0
   8cd98:	f2c0 8094 	blt.w	8cec4 <__divdi3+0x13c>
   8cd9c:	4680      	mov	r8, r0
   8cd9e:	460f      	mov	r7, r1
   8cda0:	4694      	mov	ip, r2
   8cda2:	461e      	mov	r6, r3
   8cda4:	bbe3      	cbnz	r3, 8ce20 <__divdi3+0x98>
   8cda6:	428a      	cmp	r2, r1
   8cda8:	d955      	bls.n	8ce56 <__divdi3+0xce>
   8cdaa:	fab2 f782 	clz	r7, r2
   8cdae:	b147      	cbz	r7, 8cdc2 <__divdi3+0x3a>
   8cdb0:	f1c7 0520 	rsb	r5, r7, #32
   8cdb4:	fa20 f605 	lsr.w	r6, r0, r5
   8cdb8:	fa01 f107 	lsl.w	r1, r1, r7
   8cdbc:	40ba      	lsls	r2, r7
   8cdbe:	40b8      	lsls	r0, r7
   8cdc0:	4331      	orrs	r1, r6
   8cdc2:	0c17      	lsrs	r7, r2, #16
   8cdc4:	fbb1 f6f7 	udiv	r6, r1, r7
   8cdc8:	fa1f fc82 	uxth.w	ip, r2
   8cdcc:	fb07 1116 	mls	r1, r7, r6, r1
   8cdd0:	fb0c f506 	mul.w	r5, ip, r6
   8cdd4:	0c03      	lsrs	r3, r0, #16
   8cdd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8cdda:	429d      	cmp	r5, r3
   8cddc:	d908      	bls.n	8cdf0 <__divdi3+0x68>
   8cdde:	1e71      	subs	r1, r6, #1
   8cde0:	189b      	adds	r3, r3, r2
   8cde2:	f080 8113 	bcs.w	8d00c <__divdi3+0x284>
   8cde6:	429d      	cmp	r5, r3
   8cde8:	f240 8110 	bls.w	8d00c <__divdi3+0x284>
   8cdec:	3e02      	subs	r6, #2
   8cdee:	189b      	adds	r3, r3, r2
   8cdf0:	1b59      	subs	r1, r3, r5
   8cdf2:	fbb1 f5f7 	udiv	r5, r1, r7
   8cdf6:	fb07 1315 	mls	r3, r7, r5, r1
   8cdfa:	fb0c fc05 	mul.w	ip, ip, r5
   8cdfe:	b280      	uxth	r0, r0
   8ce00:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
   8ce04:	458c      	cmp	ip, r1
   8ce06:	d907      	bls.n	8ce18 <__divdi3+0x90>
   8ce08:	1e6b      	subs	r3, r5, #1
   8ce0a:	188a      	adds	r2, r1, r2
   8ce0c:	f080 8100 	bcs.w	8d010 <__divdi3+0x288>
   8ce10:	4594      	cmp	ip, r2
   8ce12:	f240 80fd 	bls.w	8d010 <__divdi3+0x288>
   8ce16:	3d02      	subs	r5, #2
   8ce18:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
   8ce1c:	2500      	movs	r5, #0
   8ce1e:	e003      	b.n	8ce28 <__divdi3+0xa0>
   8ce20:	428b      	cmp	r3, r1
   8ce22:	d90c      	bls.n	8ce3e <__divdi3+0xb6>
   8ce24:	2500      	movs	r5, #0
   8ce26:	4629      	mov	r1, r5
   8ce28:	460a      	mov	r2, r1
   8ce2a:	462b      	mov	r3, r5
   8ce2c:	b114      	cbz	r4, 8ce34 <__divdi3+0xac>
   8ce2e:	4252      	negs	r2, r2
   8ce30:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8ce34:	4610      	mov	r0, r2
   8ce36:	4619      	mov	r1, r3
   8ce38:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8ce3c:	4770      	bx	lr
   8ce3e:	fab3 f583 	clz	r5, r3
   8ce42:	2d00      	cmp	r5, #0
   8ce44:	f040 8087 	bne.w	8cf56 <__divdi3+0x1ce>
   8ce48:	428b      	cmp	r3, r1
   8ce4a:	d301      	bcc.n	8ce50 <__divdi3+0xc8>
   8ce4c:	4282      	cmp	r2, r0
   8ce4e:	d8ea      	bhi.n	8ce26 <__divdi3+0x9e>
   8ce50:	2500      	movs	r5, #0
   8ce52:	2101      	movs	r1, #1
   8ce54:	e7e8      	b.n	8ce28 <__divdi3+0xa0>
   8ce56:	b912      	cbnz	r2, 8ce5e <__divdi3+0xd6>
   8ce58:	2601      	movs	r6, #1
   8ce5a:	fbb6 f2f2 	udiv	r2, r6, r2
   8ce5e:	fab2 f682 	clz	r6, r2
   8ce62:	2e00      	cmp	r6, #0
   8ce64:	d139      	bne.n	8ceda <__divdi3+0x152>
   8ce66:	1a8e      	subs	r6, r1, r2
   8ce68:	0c13      	lsrs	r3, r2, #16
   8ce6a:	fa1f fc82 	uxth.w	ip, r2
   8ce6e:	2501      	movs	r5, #1
   8ce70:	fbb6 f7f3 	udiv	r7, r6, r3
   8ce74:	fb03 6117 	mls	r1, r3, r7, r6
   8ce78:	fb0c f807 	mul.w	r8, ip, r7
   8ce7c:	ea4f 4910 	mov.w	r9, r0, lsr #16
   8ce80:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
   8ce84:	45b0      	cmp	r8, r6
   8ce86:	d906      	bls.n	8ce96 <__divdi3+0x10e>
   8ce88:	1e79      	subs	r1, r7, #1
   8ce8a:	18b6      	adds	r6, r6, r2
   8ce8c:	d202      	bcs.n	8ce94 <__divdi3+0x10c>
   8ce8e:	45b0      	cmp	r8, r6
   8ce90:	f200 80d3 	bhi.w	8d03a <__divdi3+0x2b2>
   8ce94:	460f      	mov	r7, r1
   8ce96:	ebc8 0606 	rsb	r6, r8, r6
   8ce9a:	fbb6 f1f3 	udiv	r1, r6, r3
   8ce9e:	fb03 6311 	mls	r3, r3, r1, r6
   8cea2:	fb0c fc01 	mul.w	ip, ip, r1
   8cea6:	b280      	uxth	r0, r0
   8cea8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   8ceac:	459c      	cmp	ip, r3
   8ceae:	d906      	bls.n	8cebe <__divdi3+0x136>
   8ceb0:	1e4e      	subs	r6, r1, #1
   8ceb2:	189a      	adds	r2, r3, r2
   8ceb4:	d202      	bcs.n	8cebc <__divdi3+0x134>
   8ceb6:	4594      	cmp	ip, r2
   8ceb8:	f200 80c2 	bhi.w	8d040 <__divdi3+0x2b8>
   8cebc:	4631      	mov	r1, r6
   8cebe:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   8cec2:	e7b1      	b.n	8ce28 <__divdi3+0xa0>
   8cec4:	43e4      	mvns	r4, r4
   8cec6:	4252      	negs	r2, r2
   8cec8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8cecc:	e766      	b.n	8cd9c <__divdi3+0x14>
   8cece:	4240      	negs	r0, r0
   8ced0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8ced4:	f04f 34ff 	mov.w	r4, #4294967295
   8ced8:	e75d      	b.n	8cd96 <__divdi3+0xe>
   8ceda:	40b2      	lsls	r2, r6
   8cedc:	f1c6 0920 	rsb	r9, r6, #32
   8cee0:	fa21 f709 	lsr.w	r7, r1, r9
   8cee4:	fa20 f909 	lsr.w	r9, r0, r9
   8cee8:	fa01 f106 	lsl.w	r1, r1, r6
   8ceec:	0c13      	lsrs	r3, r2, #16
   8ceee:	fbb7 f8f3 	udiv	r8, r7, r3
   8cef2:	fa1f fc82 	uxth.w	ip, r2
   8cef6:	fb03 7718 	mls	r7, r3, r8, r7
   8cefa:	fb0c f508 	mul.w	r5, ip, r8
   8cefe:	ea49 0901 	orr.w	r9, r9, r1
   8cf02:	ea4f 4119 	mov.w	r1, r9, lsr #16
   8cf06:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
   8cf0a:	40b0      	lsls	r0, r6
   8cf0c:	42bd      	cmp	r5, r7
   8cf0e:	d90a      	bls.n	8cf26 <__divdi3+0x19e>
   8cf10:	18bf      	adds	r7, r7, r2
   8cf12:	f108 36ff 	add.w	r6, r8, #4294967295
   8cf16:	f080 808e 	bcs.w	8d036 <__divdi3+0x2ae>
   8cf1a:	42bd      	cmp	r5, r7
   8cf1c:	f240 808b 	bls.w	8d036 <__divdi3+0x2ae>
   8cf20:	f1a8 0802 	sub.w	r8, r8, #2
   8cf24:	18bf      	adds	r7, r7, r2
   8cf26:	1b79      	subs	r1, r7, r5
   8cf28:	fbb1 f5f3 	udiv	r5, r1, r3
   8cf2c:	fb03 1715 	mls	r7, r3, r5, r1
   8cf30:	fb0c f605 	mul.w	r6, ip, r5
   8cf34:	fa1f f989 	uxth.w	r9, r9
   8cf38:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
   8cf3c:	428e      	cmp	r6, r1
   8cf3e:	d906      	bls.n	8cf4e <__divdi3+0x1c6>
   8cf40:	1e6f      	subs	r7, r5, #1
   8cf42:	1889      	adds	r1, r1, r2
   8cf44:	d271      	bcs.n	8d02a <__divdi3+0x2a2>
   8cf46:	428e      	cmp	r6, r1
   8cf48:	d96f      	bls.n	8d02a <__divdi3+0x2a2>
   8cf4a:	3d02      	subs	r5, #2
   8cf4c:	1889      	adds	r1, r1, r2
   8cf4e:	1b8e      	subs	r6, r1, r6
   8cf50:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
   8cf54:	e78c      	b.n	8ce70 <__divdi3+0xe8>
   8cf56:	f1c5 0120 	rsb	r1, r5, #32
   8cf5a:	fa22 f301 	lsr.w	r3, r2, r1
   8cf5e:	fa06 f605 	lsl.w	r6, r6, r5
   8cf62:	fa27 f201 	lsr.w	r2, r7, r1
   8cf66:	fa07 f705 	lsl.w	r7, r7, r5
   8cf6a:	fa20 f101 	lsr.w	r1, r0, r1
   8cf6e:	431e      	orrs	r6, r3
   8cf70:	ea4f 4916 	mov.w	r9, r6, lsr #16
   8cf74:	fbb2 f8f9 	udiv	r8, r2, r9
   8cf78:	fa1f fa86 	uxth.w	sl, r6
   8cf7c:	fb09 2218 	mls	r2, r9, r8, r2
   8cf80:	fb0a fb08 	mul.w	fp, sl, r8
   8cf84:	430f      	orrs	r7, r1
   8cf86:	0c3b      	lsrs	r3, r7, #16
   8cf88:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8cf8c:	4593      	cmp	fp, r2
   8cf8e:	fa0c fc05 	lsl.w	ip, ip, r5
   8cf92:	d908      	bls.n	8cfa6 <__divdi3+0x21e>
   8cf94:	1992      	adds	r2, r2, r6
   8cf96:	f108 31ff 	add.w	r1, r8, #4294967295
   8cf9a:	d24a      	bcs.n	8d032 <__divdi3+0x2aa>
   8cf9c:	4593      	cmp	fp, r2
   8cf9e:	d948      	bls.n	8d032 <__divdi3+0x2aa>
   8cfa0:	f1a8 0802 	sub.w	r8, r8, #2
   8cfa4:	1992      	adds	r2, r2, r6
   8cfa6:	ebcb 0302 	rsb	r3, fp, r2
   8cfaa:	fbb3 f1f9 	udiv	r1, r3, r9
   8cfae:	fb09 3211 	mls	r2, r9, r1, r3
   8cfb2:	fb0a fa01 	mul.w	sl, sl, r1
   8cfb6:	b2bf      	uxth	r7, r7
   8cfb8:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
   8cfbc:	459a      	cmp	sl, r3
   8cfbe:	d906      	bls.n	8cfce <__divdi3+0x246>
   8cfc0:	1e4a      	subs	r2, r1, #1
   8cfc2:	199b      	adds	r3, r3, r6
   8cfc4:	d233      	bcs.n	8d02e <__divdi3+0x2a6>
   8cfc6:	459a      	cmp	sl, r3
   8cfc8:	d931      	bls.n	8d02e <__divdi3+0x2a6>
   8cfca:	3902      	subs	r1, #2
   8cfcc:	199b      	adds	r3, r3, r6
   8cfce:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
   8cfd2:	0c0f      	lsrs	r7, r1, #16
   8cfd4:	fa1f f88c 	uxth.w	r8, ip
   8cfd8:	fb08 f607 	mul.w	r6, r8, r7
   8cfdc:	b28a      	uxth	r2, r1
   8cfde:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   8cfe2:	fb08 f802 	mul.w	r8, r8, r2
   8cfe6:	fb0c 6202 	mla	r2, ip, r2, r6
   8cfea:	fb0c fc07 	mul.w	ip, ip, r7
   8cfee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   8cff2:	4296      	cmp	r6, r2
   8cff4:	bf88      	it	hi
   8cff6:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
   8cffa:	ebca 0303 	rsb	r3, sl, r3
   8cffe:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
   8d002:	4563      	cmp	r3, ip
   8d004:	d30e      	bcc.n	8d024 <__divdi3+0x29c>
   8d006:	d005      	beq.n	8d014 <__divdi3+0x28c>
   8d008:	2500      	movs	r5, #0
   8d00a:	e70d      	b.n	8ce28 <__divdi3+0xa0>
   8d00c:	460e      	mov	r6, r1
   8d00e:	e6ef      	b.n	8cdf0 <__divdi3+0x68>
   8d010:	461d      	mov	r5, r3
   8d012:	e701      	b.n	8ce18 <__divdi3+0x90>
   8d014:	fa00 f005 	lsl.w	r0, r0, r5
   8d018:	fa1f f888 	uxth.w	r8, r8
   8d01c:	eb08 4502 	add.w	r5, r8, r2, lsl #16
   8d020:	42a8      	cmp	r0, r5
   8d022:	d2f1      	bcs.n	8d008 <__divdi3+0x280>
   8d024:	3901      	subs	r1, #1
   8d026:	2500      	movs	r5, #0
   8d028:	e6fe      	b.n	8ce28 <__divdi3+0xa0>
   8d02a:	463d      	mov	r5, r7
   8d02c:	e78f      	b.n	8cf4e <__divdi3+0x1c6>
   8d02e:	4611      	mov	r1, r2
   8d030:	e7cd      	b.n	8cfce <__divdi3+0x246>
   8d032:	4688      	mov	r8, r1
   8d034:	e7b7      	b.n	8cfa6 <__divdi3+0x21e>
   8d036:	46b0      	mov	r8, r6
   8d038:	e775      	b.n	8cf26 <__divdi3+0x19e>
   8d03a:	3f02      	subs	r7, #2
   8d03c:	18b6      	adds	r6, r6, r2
   8d03e:	e72a      	b.n	8ce96 <__divdi3+0x10e>
   8d040:	3902      	subs	r1, #2
   8d042:	e73c      	b.n	8cebe <__divdi3+0x136>

0008d044 <__udivdi3>:
   8d044:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8d048:	4614      	mov	r4, r2
   8d04a:	4605      	mov	r5, r0
   8d04c:	460e      	mov	r6, r1
   8d04e:	2b00      	cmp	r3, #0
   8d050:	d13d      	bne.n	8d0ce <__udivdi3+0x8a>
   8d052:	428a      	cmp	r2, r1
   8d054:	d949      	bls.n	8d0ea <__udivdi3+0xa6>
   8d056:	fab2 f782 	clz	r7, r2
   8d05a:	b147      	cbz	r7, 8d06e <__udivdi3+0x2a>
   8d05c:	f1c7 0120 	rsb	r1, r7, #32
   8d060:	fa20 f201 	lsr.w	r2, r0, r1
   8d064:	fa06 f607 	lsl.w	r6, r6, r7
   8d068:	40bc      	lsls	r4, r7
   8d06a:	40bd      	lsls	r5, r7
   8d06c:	4316      	orrs	r6, r2
   8d06e:	0c22      	lsrs	r2, r4, #16
   8d070:	fbb6 f0f2 	udiv	r0, r6, r2
   8d074:	b2a1      	uxth	r1, r4
   8d076:	fb02 6610 	mls	r6, r2, r0, r6
   8d07a:	fb01 f300 	mul.w	r3, r1, r0
   8d07e:	0c2f      	lsrs	r7, r5, #16
   8d080:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   8d084:	42b3      	cmp	r3, r6
   8d086:	d908      	bls.n	8d09a <__udivdi3+0x56>
   8d088:	1e47      	subs	r7, r0, #1
   8d08a:	1936      	adds	r6, r6, r4
   8d08c:	f080 80fa 	bcs.w	8d284 <__udivdi3+0x240>
   8d090:	42b3      	cmp	r3, r6
   8d092:	f240 80f7 	bls.w	8d284 <__udivdi3+0x240>
   8d096:	3802      	subs	r0, #2
   8d098:	1936      	adds	r6, r6, r4
   8d09a:	1af6      	subs	r6, r6, r3
   8d09c:	fbb6 f3f2 	udiv	r3, r6, r2
   8d0a0:	fb02 6213 	mls	r2, r2, r3, r6
   8d0a4:	fb01 f103 	mul.w	r1, r1, r3
   8d0a8:	b2ad      	uxth	r5, r5
   8d0aa:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
   8d0ae:	4291      	cmp	r1, r2
   8d0b0:	d907      	bls.n	8d0c2 <__udivdi3+0x7e>
   8d0b2:	1e5e      	subs	r6, r3, #1
   8d0b4:	1912      	adds	r2, r2, r4
   8d0b6:	f080 80e7 	bcs.w	8d288 <__udivdi3+0x244>
   8d0ba:	4291      	cmp	r1, r2
   8d0bc:	f240 80e4 	bls.w	8d288 <__udivdi3+0x244>
   8d0c0:	3b02      	subs	r3, #2
   8d0c2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   8d0c6:	2100      	movs	r1, #0
   8d0c8:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8d0cc:	4770      	bx	lr
   8d0ce:	428b      	cmp	r3, r1
   8d0d0:	d843      	bhi.n	8d15a <__udivdi3+0x116>
   8d0d2:	fab3 f483 	clz	r4, r3
   8d0d6:	2c00      	cmp	r4, #0
   8d0d8:	d142      	bne.n	8d160 <__udivdi3+0x11c>
   8d0da:	428b      	cmp	r3, r1
   8d0dc:	d302      	bcc.n	8d0e4 <__udivdi3+0xa0>
   8d0de:	4282      	cmp	r2, r0
   8d0e0:	f200 80e1 	bhi.w	8d2a6 <__udivdi3+0x262>
   8d0e4:	2100      	movs	r1, #0
   8d0e6:	2001      	movs	r0, #1
   8d0e8:	e7ee      	b.n	8d0c8 <__udivdi3+0x84>
   8d0ea:	b912      	cbnz	r2, 8d0f2 <__udivdi3+0xae>
   8d0ec:	2701      	movs	r7, #1
   8d0ee:	fbb7 f4f2 	udiv	r4, r7, r2
   8d0f2:	fab4 f284 	clz	r2, r4
   8d0f6:	2a00      	cmp	r2, #0
   8d0f8:	f040 8089 	bne.w	8d20e <__udivdi3+0x1ca>
   8d0fc:	1b0a      	subs	r2, r1, r4
   8d0fe:	0c23      	lsrs	r3, r4, #16
   8d100:	b2a7      	uxth	r7, r4
   8d102:	2101      	movs	r1, #1
   8d104:	fbb2 f6f3 	udiv	r6, r2, r3
   8d108:	fb03 2216 	mls	r2, r3, r6, r2
   8d10c:	fb07 f006 	mul.w	r0, r7, r6
   8d110:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   8d114:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   8d118:	4290      	cmp	r0, r2
   8d11a:	d907      	bls.n	8d12c <__udivdi3+0xe8>
   8d11c:	1912      	adds	r2, r2, r4
   8d11e:	f106 3cff 	add.w	ip, r6, #4294967295
   8d122:	d202      	bcs.n	8d12a <__udivdi3+0xe6>
   8d124:	4290      	cmp	r0, r2
   8d126:	f200 80d0 	bhi.w	8d2ca <__udivdi3+0x286>
   8d12a:	4666      	mov	r6, ip
   8d12c:	1a12      	subs	r2, r2, r0
   8d12e:	fbb2 f0f3 	udiv	r0, r2, r3
   8d132:	fb03 2310 	mls	r3, r3, r0, r2
   8d136:	fb07 f700 	mul.w	r7, r7, r0
   8d13a:	b2ad      	uxth	r5, r5
   8d13c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   8d140:	429f      	cmp	r7, r3
   8d142:	d907      	bls.n	8d154 <__udivdi3+0x110>
   8d144:	1e42      	subs	r2, r0, #1
   8d146:	191b      	adds	r3, r3, r4
   8d148:	f080 80a0 	bcs.w	8d28c <__udivdi3+0x248>
   8d14c:	429f      	cmp	r7, r3
   8d14e:	f240 809d 	bls.w	8d28c <__udivdi3+0x248>
   8d152:	3802      	subs	r0, #2
   8d154:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   8d158:	e7b6      	b.n	8d0c8 <__udivdi3+0x84>
   8d15a:	2100      	movs	r1, #0
   8d15c:	4608      	mov	r0, r1
   8d15e:	e7b3      	b.n	8d0c8 <__udivdi3+0x84>
   8d160:	f1c4 0620 	rsb	r6, r4, #32
   8d164:	fa22 f706 	lsr.w	r7, r2, r6
   8d168:	fa03 f304 	lsl.w	r3, r3, r4
   8d16c:	fa21 f506 	lsr.w	r5, r1, r6
   8d170:	fa01 f104 	lsl.w	r1, r1, r4
   8d174:	fa20 f606 	lsr.w	r6, r0, r6
   8d178:	433b      	orrs	r3, r7
   8d17a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8d17e:	fbb5 f7fc 	udiv	r7, r5, ip
   8d182:	fa1f f883 	uxth.w	r8, r3
   8d186:	fb0c 5517 	mls	r5, ip, r7, r5
   8d18a:	fb08 f907 	mul.w	r9, r8, r7
   8d18e:	ea46 0a01 	orr.w	sl, r6, r1
   8d192:	ea4f 411a 	mov.w	r1, sl, lsr #16
   8d196:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   8d19a:	45a9      	cmp	r9, r5
   8d19c:	fa02 f204 	lsl.w	r2, r2, r4
   8d1a0:	d904      	bls.n	8d1ac <__udivdi3+0x168>
   8d1a2:	1e7e      	subs	r6, r7, #1
   8d1a4:	18ed      	adds	r5, r5, r3
   8d1a6:	f0c0 8081 	bcc.w	8d2ac <__udivdi3+0x268>
   8d1aa:	4637      	mov	r7, r6
   8d1ac:	ebc9 0105 	rsb	r1, r9, r5
   8d1b0:	fbb1 f6fc 	udiv	r6, r1, ip
   8d1b4:	fb0c 1516 	mls	r5, ip, r6, r1
   8d1b8:	fb08 f806 	mul.w	r8, r8, r6
   8d1bc:	fa1f fa8a 	uxth.w	sl, sl
   8d1c0:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
   8d1c4:	4588      	cmp	r8, r1
   8d1c6:	d903      	bls.n	8d1d0 <__udivdi3+0x18c>
   8d1c8:	1e75      	subs	r5, r6, #1
   8d1ca:	18c9      	adds	r1, r1, r3
   8d1cc:	d374      	bcc.n	8d2b8 <__udivdi3+0x274>
   8d1ce:	462e      	mov	r6, r5
   8d1d0:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   8d1d4:	0c37      	lsrs	r7, r6, #16
   8d1d6:	fa1f fc82 	uxth.w	ip, r2
   8d1da:	fb0c f507 	mul.w	r5, ip, r7
   8d1de:	0c12      	lsrs	r2, r2, #16
   8d1e0:	b2b3      	uxth	r3, r6
   8d1e2:	fb0c fc03 	mul.w	ip, ip, r3
   8d1e6:	fb02 5303 	mla	r3, r2, r3, r5
   8d1ea:	fb02 f207 	mul.w	r2, r2, r7
   8d1ee:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8d1f2:	429d      	cmp	r5, r3
   8d1f4:	bf88      	it	hi
   8d1f6:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
   8d1fa:	ebc8 0101 	rsb	r1, r8, r1
   8d1fe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8d202:	4291      	cmp	r1, r2
   8d204:	d34c      	bcc.n	8d2a0 <__udivdi3+0x25c>
   8d206:	d043      	beq.n	8d290 <__udivdi3+0x24c>
   8d208:	4630      	mov	r0, r6
   8d20a:	2100      	movs	r1, #0
   8d20c:	e75c      	b.n	8d0c8 <__udivdi3+0x84>
   8d20e:	4094      	lsls	r4, r2
   8d210:	f1c2 0520 	rsb	r5, r2, #32
   8d214:	fa21 f605 	lsr.w	r6, r1, r5
   8d218:	fa20 f505 	lsr.w	r5, r0, r5
   8d21c:	fa01 f102 	lsl.w	r1, r1, r2
   8d220:	0c23      	lsrs	r3, r4, #16
   8d222:	fbb6 fcf3 	udiv	ip, r6, r3
   8d226:	b2a7      	uxth	r7, r4
   8d228:	fb03 661c 	mls	r6, r3, ip, r6
   8d22c:	fb07 f80c 	mul.w	r8, r7, ip
   8d230:	4329      	orrs	r1, r5
   8d232:	0c0d      	lsrs	r5, r1, #16
   8d234:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   8d238:	45b0      	cmp	r8, r6
   8d23a:	fa00 f502 	lsl.w	r5, r0, r2
   8d23e:	d908      	bls.n	8d252 <__udivdi3+0x20e>
   8d240:	1936      	adds	r6, r6, r4
   8d242:	f10c 30ff 	add.w	r0, ip, #4294967295
   8d246:	d23e      	bcs.n	8d2c6 <__udivdi3+0x282>
   8d248:	45b0      	cmp	r8, r6
   8d24a:	d93c      	bls.n	8d2c6 <__udivdi3+0x282>
   8d24c:	f1ac 0c02 	sub.w	ip, ip, #2
   8d250:	1936      	adds	r6, r6, r4
   8d252:	ebc8 0206 	rsb	r2, r8, r6
   8d256:	fbb2 f0f3 	udiv	r0, r2, r3
   8d25a:	fb03 2610 	mls	r6, r3, r0, r2
   8d25e:	fb07 f800 	mul.w	r8, r7, r0
   8d262:	b289      	uxth	r1, r1
   8d264:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   8d268:	4590      	cmp	r8, r2
   8d26a:	d906      	bls.n	8d27a <__udivdi3+0x236>
   8d26c:	1e46      	subs	r6, r0, #1
   8d26e:	1912      	adds	r2, r2, r4
   8d270:	d227      	bcs.n	8d2c2 <__udivdi3+0x27e>
   8d272:	4590      	cmp	r8, r2
   8d274:	d925      	bls.n	8d2c2 <__udivdi3+0x27e>
   8d276:	3802      	subs	r0, #2
   8d278:	1912      	adds	r2, r2, r4
   8d27a:	ebc8 0202 	rsb	r2, r8, r2
   8d27e:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
   8d282:	e73f      	b.n	8d104 <__udivdi3+0xc0>
   8d284:	4638      	mov	r0, r7
   8d286:	e708      	b.n	8d09a <__udivdi3+0x56>
   8d288:	4633      	mov	r3, r6
   8d28a:	e71a      	b.n	8d0c2 <__udivdi3+0x7e>
   8d28c:	4610      	mov	r0, r2
   8d28e:	e761      	b.n	8d154 <__udivdi3+0x110>
   8d290:	fa00 f004 	lsl.w	r0, r0, r4
   8d294:	fa1f fc8c 	uxth.w	ip, ip
   8d298:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
   8d29c:	4298      	cmp	r0, r3
   8d29e:	d2b3      	bcs.n	8d208 <__udivdi3+0x1c4>
   8d2a0:	1e70      	subs	r0, r6, #1
   8d2a2:	2100      	movs	r1, #0
   8d2a4:	e710      	b.n	8d0c8 <__udivdi3+0x84>
   8d2a6:	4621      	mov	r1, r4
   8d2a8:	4620      	mov	r0, r4
   8d2aa:	e70d      	b.n	8d0c8 <__udivdi3+0x84>
   8d2ac:	45a9      	cmp	r9, r5
   8d2ae:	f67f af7c 	bls.w	8d1aa <__udivdi3+0x166>
   8d2b2:	3f02      	subs	r7, #2
   8d2b4:	18ed      	adds	r5, r5, r3
   8d2b6:	e779      	b.n	8d1ac <__udivdi3+0x168>
   8d2b8:	4588      	cmp	r8, r1
   8d2ba:	d988      	bls.n	8d1ce <__udivdi3+0x18a>
   8d2bc:	3e02      	subs	r6, #2
   8d2be:	18c9      	adds	r1, r1, r3
   8d2c0:	e786      	b.n	8d1d0 <__udivdi3+0x18c>
   8d2c2:	4630      	mov	r0, r6
   8d2c4:	e7d9      	b.n	8d27a <__udivdi3+0x236>
   8d2c6:	4684      	mov	ip, r0
   8d2c8:	e7c3      	b.n	8d252 <__udivdi3+0x20e>
   8d2ca:	3e02      	subs	r6, #2
   8d2cc:	1912      	adds	r2, r2, r4
   8d2ce:	e72d      	b.n	8d12c <__udivdi3+0xe8>

0008d2d0 <sd_trans_multipliers>:
   8d2d0:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   8d2e0:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   8d2f0:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   8d300:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0008d310 <sd_mmc_trans_units>:
   8d310:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0008d32c <mmc_trans_multipliers>:
   8d32c:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   8d33c:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   8d34c:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   8d35c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   8d36c:	6f63 666e 763a 6c6f 3a74 6364 0a0d 0000     conf:volt:dc....
   8d37c:	5009 3d31 6c25 0d66 000a 0000 5009 3d32     .P1=%lf......P2=
   8d38c:	6c25 0d66 000a 0000 656d 7361 763a 6c6f     %lf.....meas:vol
   8d39c:	3a74 6364 0a0d 0000 5009 3d31 7325 0a0d     t:dc.....P1=%s..
   8d3ac:	0000 0000 5009 3d32 7325 0a0d 0000 0000     .....P2=%s......
   8d3bc:	432a 534c 0000 0000 452a 4553 0000 0000     *CLS....*ESE....
   8d3cc:	452a 4553 003f 0000 452a 5253 003f 0000     *ESE?...*ESR?...
   8d3dc:	492a 4e44 003f 0000 4f2a 4350 0000 0000     *IDN?...*OPC....
   8d3ec:	4f2a 4350 003f 0000 522a 5453 0000 0000     *OPC?...*RST....
   8d3fc:	532a 4552 0000 0000 532a 4552 003f 0000     *SRE....*SRE?...
   8d40c:	532a 4254 003f 0000 542a 5453 003f 0000     *STB?...*TST?...
   8d41c:	572a 4941 0000 0000 5953 5453 6d65 453a     *WAI....SYSTem:E
   8d42c:	5252 726f 003f 0000 5953 5453 6d65 453a     RRor?...SYSTem:E
   8d43c:	5252 726f 4e3a 5845 3f54 0000 5953 5453     RRor:NEXT?..SYST
   8d44c:	6d65 453a 5252 726f 433a 554f 744e 003f     em:ERRor:COUNt?.
   8d45c:	5953 5453 6d65 563a 5245 6953 6e6f 003f     SYSTem:VERSion?.
   8d46c:	5453 5441 7375 513a 4555 7453 6f69 616e     STATus:QUEStiona
   8d47c:	6c62 3f65 0000 0000 5453 5441 7375 513a     ble?....STATus:Q
   8d48c:	4555 7453 6f69 616e 6c62 3a65 5645 4e45     UEStionable:EVEN
   8d49c:	3f74 0000 5453 5441 7375 513a 4555 7453     t?..STATus:QUESt
   8d4ac:	6f69 616e 6c62 3a65 4e45 4241 656c 0000     ionable:ENABle..
   8d4bc:	5453 5441 7375 513a 4555 7453 6f69 616e     STATus:QUEStiona
   8d4cc:	6c62 3a65 4e45 4241 656c 003f 5453 5441     ble:ENABle?.STAT
   8d4dc:	7375 503a 4552 6553 0074 0000 454d 5341     us:PRESet...MEAS
   8d4ec:	7275 3a65 4f56 544c 6761 3a65 4344 003f     ure:VOLTage:DC?.
   8d4fc:	4f43 464e 6769 7275 3a65 4f56 544c 6761     CONFigure:VOLTag
   8d50c:	3a65 4344 0000 0000 454d 5341 7275 3a65     e:DC....MEASure:
   8d51c:	4f56 544c 6761 3a65 4344 523a 5441 6f69     VOLTage:DC:RATio
   8d52c:	003f 0000 454d 5341 7275 3a65 4f56 544c     ?...MEASure:VOLT
   8d53c:	6761 3a65 4341 003f 454d 5341 7275 3a65     age:AC?.MEASure:
   8d54c:	5543 5252 6e65 3a74 4344 003f 454d 5341     CURRent:DC?.MEAS
   8d55c:	7275 3a65 5543 5252 6e65 3a74 4341 003f     ure:CURRent:AC?.
   8d56c:	454d 5341 7275 3a65 4552 6953 7473 6e61     MEASure:RESistan
   8d57c:	6563 003f 454d 5341 7275 3a65 5246 5345     ce?.MEASure:FRES
   8d58c:	7369 6174 636e 3f65 0000 0000 454d 5341     istance?....MEAS
   8d59c:	7275 3a65 5246 5145 6575 636e 3f79 0000     ure:FREQuency?..
   8d5ac:	454d 5341 7275 3a65 4550 6952 646f 003f     MEASure:PERiod?.
   8d5bc:	5953 5453 6d65 433a 4d4f 754d 696e 6163     SYSTem:COMMunica
   8d5cc:	6974 6e6f 543a 5043 5049 433a 4e4f 5254     tion:TCPIP:CONTR
   8d5dc:	4c4f 003f                                   OL?.

0008d5e0 <scpi_commands>:
   8d5e0:	d3bc 0008 1a99 0008 d3c4 0008 1ad9 0008     ................
   8d5f0:	d3cc 0008 1b0d 0008 d3d4 0008 1b35 0008     ............5...
   8d600:	d3dc 0008 1b71 0008 d3e4 0008 1ba5 0008     ....q...........
   8d610:	d3ec 0008 1bc1 0008 d3f4 0008 1bd9 0008     ................
   8d620:	d3fc 0008 1bfd 0008 d404 0008 1c31 0008     ............1...
   8d630:	d40c 0008 1c59 0008 d414 0008 1c81 0008     ....Y...........
   8d640:	d41c 0008 1cb9 0008 d424 0008 1cf9 0008     ........$.......
   8d650:	d434 0008 1cf9 0008 d448 0008 1d39 0008     4.......H...9...
   8d660:	d45c 0008 1cdd 0008 d46c 0008 1d5d 0008     \.......l...]...
   8d670:	d484 0008 1d5d 0008 d4a0 0008 1dc1 0008     ....]...........
   8d680:	d4bc 0008 1d99 0008 d4d8 0008 1df5 0008     ................
   8d690:	d4e8 0008 14d9 0008 d4fc 0008 141d 0008     ................
   8d6a0:	d514 0008 1cc1 0008 d530 0008 1cc1 0008     ........0.......
   8d6b0:	d544 0008 1cc1 0008 d558 0008 1cc1 0008     D.......X.......
   8d6c0:	d56c 0008 1cc1 0008 d580 0008 1cc1 0008     l...............
   8d6d0:	d598 0008 1cc1 0008 d5ac 0008 1cc1 0008     ................
   8d6e0:	d5bc 0008 378d 0008 0000 0000 0000 0000     .....7..........
   8d6f0:	6f4e 6520 7272 726f 0000 0000 7953 746e     No error....Synt
   8d700:	7861 6520 7272 726f 0000 0000 6e49 6176     ax error....Inva
   8d710:	696c 2064 6573 6170 6172 6f74 0072 0000     lid separator...
   8d720:	6e55 6564 6966 656e 2064 6568 6461 7265     Undefined header
   8d730:	0000 0000 6150 6172 656d 6574 2072 6f6e     ....Parameter no
   8d740:	2074 6c61 6f6c 6577 0064 0000 694d 7373     t allowed...Miss
   8d750:	6e69 2067 6170 6172 656d 6574 0072 0000     ing parameter...
   8d760:	6e49 6176 696c 2064 7573 6666 7869 0000     Invalid suffix..
   8d770:	7553 6666 7869 6e20 746f 6120 6c6c 776f     Suffix not allow
   8d780:	6465 0000 6e55 6e6b 776f 206e 7265 6f72     ed..Unknown erro
   8d790:	0072 0000 5443 2055 4546 0045 4554 5453     r...CTU FEE.TEST
   8d7a0:	5320 5043 2049 4e49 5453 5552 454d 544e      SCPI INSTRUMENT
   8d7b0:	5420 4953 3233 3532 0000 0000 3176 302e      TSI3225....v1.0
   8d7c0:	0000 0000 202c 0000 0d3b 000a 203b 0a0d     ...., ..;...; ..
   8d7d0:	0009 0000 0020 0000 494d 694e 756d 006d     .... ...MINimum.
   8d7e0:	414d 6958 756d 006d 4544 6146 6c75 0074     MAXimum.DEFault.
   8d7f0:	5055 0000 4f44 4e57 0000 0000 414e 004e     UP..DOWN....NAN.
   8d800:	4e49 0046 494e 464e 0000 0000 5655 0000     INF.NINF....UV..
   8d810:	564d 0000 0056 0000 564b 0000 4155 0000     MV..V...KV..UA..
   8d820:	414d 0000 0041 0000 414b 0000 484f 004d     MA..A...KA..OHM.
   8d830:	4f4b 4d48 0000 0000 4f4d 4d48 0000 0000     KOHM....MOHM....
   8d840:	5a48 0000 484b 005a 484d 005a 4847 005a     HZ..KHZ.MHZ.GHZ.
   8d850:	4543 004c 5350 0000 534e 0000 5355 0000     CEL.PS..NS..US..
   8d860:	534d 0000 0053 0000 494d 004e 5248 0000     MS..S...MIN.HR..

0008d870 <scpi_units_def>:
   8d870:	d80c 0008 0001 0000 ed8d a0b5 c6f7 3eb0     ...............>
   8d880:	d810 0008 0001 0000 a9fc d2f1 624d 3f50     ............MbP?
   8d890:	d814 0008 0001 0000 0000 0000 0000 3ff0     ...............?
   8d8a0:	d818 0008 0001 0000 0000 0000 4000 408f     .............@.@
   8d8b0:	d81c 0008 0002 0000 ed8d a0b5 c6f7 3eb0     ...............>
   8d8c0:	d820 0008 0002 0000 a9fc d2f1 624d 3f50      ...........MbP?
   8d8d0:	d824 0008 0002 0000 0000 0000 0000 3ff0     $..............?
   8d8e0:	d828 0008 0002 0000 0000 0000 4000 408f     (............@.@
   8d8f0:	d82c 0008 0003 0000 0000 0000 0000 3ff0     ,..............?
   8d900:	d830 0008 0003 0000 0000 0000 4000 408f     0............@.@
   8d910:	d838 0008 0003 0000 0000 0000 8480 412e     8..............A
   8d920:	d840 0008 0004 0000 0000 0000 0000 3ff0     @..............?
   8d930:	d844 0008 0004 0000 0000 0000 4000 408f     D............@.@
   8d940:	d848 0008 0004 0000 0000 0000 8480 412e     H..............A
   8d950:	d84c 0008 0004 0000 0000 0000 cd65 41cd     L...........e..A
   8d960:	d850 0008 0005 0000 0000 0000 0000 3ff0     P..............?
   8d970:	d854 0008 0006 0000 ea11 812d 9799 3d71     T.........-...q=
   8d980:	d858 0008 0006 0000 d695 e826 2e0b 3e11     X.........&....>
   8d990:	d85c 0008 0006 0000 ed8d a0b5 c6f7 3eb0     \..............>
   8d9a0:	d860 0008 0006 0000 a9fc d2f1 624d 3f50     `...........MbP?
   8d9b0:	d864 0008 0006 0000 0000 0000 0000 3ff0     d..............?
   8d9c0:	d868 0008 0006 0000 0000 0000 0000 404e     h.............N@
   8d9d0:	d86c 0008 0006 0000 0000 0000 2000 40ac     l............ .@
	...

0008d9f0 <scpi_special_numbers_def>:
   8d9f0:	d7d8 0008 0001 0000 d7e0 0008 0002 0000     ................
   8da00:	d7e8 0008 0003 0000 d7f0 0008 0004 0000     ................
   8da10:	d7f4 0008 0005 0000 d7fc 0008 0006 0000     ................
   8da20:	d800 0008 0007 0000 d804 0008 0008 0000     ................
	...
   8da38:	6c25 0067 3a3f 5d5b 0000 0000 3f3a 0000     %lg.?:[]....:?..
   8da48:	2a2a 5245 4f52 3a52 2520 2c64 2220 7325     **ERROR: %d, "%s
   8da58:	0d22 000a 2a2a 5253 3a51 3020 2578 2058     "...**SRQ: 0x%X 
   8da68:	2528 2964 0a0d 0000 2a2a 5443 4c52 2520     (%d)....**CTRL %
   8da78:	3230 3a78 3020 2578 2058 2528 2964 0a0d     02x: 0x%X (%d)..
   8da88:	0000 0000 2a2a 6554 7473 0a0d 0000 0000     ....**Test......
   8da98:	2a2a 6552 6573 0d74 000a 0000 5322 2f44     **Reset....."SD/
   8daa8:	4d4d 2043 6143 6472 6f20 6576 2072 434d     MMC Card over MC
   8dab8:	2049 6c53 746f 3020 0022 0000 3231 3133     I Slot 0"...1231
   8dac8:	3332 3231 3133 3332 0000 0000 0000 0000     23123123........
   8dad8:	0000 0000 aa00 aaaa aaaa aaaa eeaa eeee     ................
   8dae8:	eeee eeee feee ffff ffff ffff ffff ffff     ................
   8daf8:	7fff dfbf f7ef fdfb 7efc dfbf f7ef fdfb     .........~......
   8db08:	007e 0000                                   ~...

0008db0c <_ctype_>:
   8db0c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   8db1c:	2020 2020 2020 2020 2020 2020 2020 2020                     
   8db2c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   8db3c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   8db4c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   8db5c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   8db6c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   8db7c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   8db8c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0008dc10 <_global_impure_ptr>:
   8dc10:	02a8 2007 0043 0000                         ... C...

0008dc18 <tinytens>:
   8dc18:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   8dc28:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   8dc38:	6f43 64ac 0628 0e18 666e 6900 696e 7974     Co.d(...nf.inity
   8dc48:	6100 006e                                   .an.

0008dc4c <blanks.6650>:
   8dc4c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008dc5c <zeroes.6651>:
   8dc5c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   8dc6c:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   8dc7c:	3000 3231 3433 3635 3837 6139 6362 6564     .0123456789abcde
   8dc8c:	0066 3130 3332 3534 3736 3938 5000 534f     f.0123456789.POS
   8dc9c:	5849 2e00 0000 0000 0000 0000               IX..........

0008dca8 <p05.5242>:
   8dca8:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

0008dcb8 <__mprec_tens>:
   8dcb8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   8dcc8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   8dcd8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   8dce8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   8dcf8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   8dd08:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   8dd18:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   8dd28:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   8dd38:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   8dd48:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   8dd58:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   8dd68:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   8dd78:	9db4 79d9 7843 44ea                         ...yCx.D

0008dd80 <__mprec_tinytens>:
   8dd80:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   8dd90:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   8dda0:	6f43 64ac 0628 0ac8                         Co.d(...

0008dda8 <__mprec_bigtens>:
   8dda8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   8ddb8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   8ddc8:	bf3c 7f73 4fdd 7515                         <.s..O.u

0008ddd0 <blanks.6664>:
   8ddd0:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008dde0 <zeroes.6665>:
   8dde0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0008ddf0 <_init>:
   8ddf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ddf2:	bf00      	nop
   8ddf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8ddf6:	bc08      	pop	{r3}
   8ddf8:	469e      	mov	lr, r3
   8ddfa:	4770      	bx	lr

0008ddfc <__init_array_start>:
   8ddfc:	0008a631 	.word	0x0008a631

0008de00 <__frame_dummy_init_array_entry>:
   8de00:	0008016d                                m...

0008de04 <_fini>:
   8de04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8de06:	bf00      	nop
   8de08:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8de0a:	bc08      	pop	{r3}
   8de0c:	469e      	mov	lr, r3
   8de0e:	4770      	bx	lr

0008de10 <__fini_array_start>:
   8de10:	00080145 	.word	0x00080145

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <sd_mmc_cards>:
	...
20070014:	0067 0000 0000 0000 0000 0000 0000 0000     g...............
	...

20070030 <scpi_context>:
20070030:	d5e0 0008 0100 0000 0000 0000 0bbc 2007     ............... 
	...
2007004c:	0070 2007 0000 0000 0000 0000 0000 0000     p.. ............
2007005c:	0000 0000 0bac 2007 d870 0008 d9f0 0008     ....... p.......
2007006c:	0000 0000                                   ....

20070070 <scpi_interface>:
20070070:	3669 0008 3659 0008 36b5 0008 3661 0008     i6..Y6...6..a6..
20070080:	375d 0008 372d 0008                         ]7..-7..

20070088 <udi_msc_name.8962>:
20070088:	534d 2043 6e69 6574 6672 6361 0065 0000     MSC interface...

20070098 <extra_strings_desc.8966>:
20070098:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

200700b4 <udi_cdc_name.8961>:
200700b4:	4443 2043 6e69 6574 6672 6361 0065 0000     CDC interface...

200700c4 <udi_api_cdc_data>:
200700c4:	41f9 0008 3f6d 0008 3c3d 0008 3c45 0008     .A..m?..=<..E<..
200700d4:	3e29 0008                                   )>..

200700d8 <udi_api_cdc_comm>:
200700d8:	3f9d 0008 3c29 0008 3e81 0008 3c45 0008     .?..)<...>..E<..
200700e8:	0000 0000                                   ....

200700ec <udc_config_hs>:
200700ec:	00fc 2007 0180 2007                         ... ... 

200700f4 <udc_config_lsfs>:
200700f4:	01a0 2007 0180 2007                         ... ... 

200700fc <udc_desc_hs>:
200700fc:	0209 0062 0103 c000 0832 000b 0202 0102     ..b.....2.......
2007010c:	0900 0004 0100 0202 0001 2405 1000 0401     ...........$....
2007011c:	0224 0502 0624 0100 2405 0301 0701 8305     $...$....$......
2007012c:	4003 1000 0409 0001 0a02 0000 0700 8405     .@..............
2007013c:	0002 0002 0507 0205 0200 0900 0204 0200     ................
2007014c:	0608 0550 0507 0281 0200 0700 0205 0002     ..P.............
2007015c:	0002 0000                                   ....

20070160 <udc_config>:
20070160:	018c 2007 00f4 2007 018c 2007 0174 2007     ... ... ... t.. 
20070170:	00ec 2007                                   ... 

20070174 <udc_device_qual>:
20070174:	060a 0200 0000 4000 0001 0000               .......@....

20070180 <udi_apis>:
20070180:	00d8 2007 00c4 2007 0208 2007               ... ... ... 

2007018c <udc_device_desc>:
2007018c:	0112 0200 0000 4000 03eb 2424 0100 0201     .......@..$$....
2007019c:	0103 0000                                   ....

200701a0 <udc_desc_fs>:
200701a0:	0209 0062 0103 c000 0832 000b 0202 0102     ..b.....2.......
200701b0:	0900 0004 0100 0202 0001 2405 1000 0401     ...........$....
200701c0:	0224 0502 0624 0100 2405 0301 0701 8305     $...$....$......
200701d0:	4003 1000 0409 0001 0a02 0000 0700 8405     .@..............
200701e0:	4002 0000 0507 0205 0040 0900 0204 0200     .@......@.......
200701f0:	0608 0550 0507 0281 0040 0700 0205 4002     ..P.....@......@
20070200:	0000 0000                                   ....

20070204 <udi_msc_b_ack_trans>:
20070204:	0001 0000                                   ....

20070208 <udi_api_msc>:
20070208:	514d 0008 5131 0008 5039 0008 45c5 0008     MQ..1Q..9P...E..
20070218:	0000 0000                                   ....

2007021c <udi_msc_inquiry_data.9441>:
2007021c:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
2007023c:	2e31 3030                                   1.00

20070240 <udi_msc_csw>:
20070240:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

20070250 <udc_string_product_name>:
20070250:	6554 706d 616c 6574 4220 616f 6472 0000     Template Board..

20070260 <udc_string_manufacturer_name>:
20070260:	6145 7973 702d 6968 0000 0000               Easy-phi....

2007026c <udc_string_desc>:
2007026c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

2007028c <udc_string_desc_languageid>:
2007028c:	0304 0409                                   ....

20070290 <g_interrupt_enabled>:
20070290:	0001 0000                                   ....

20070294 <SystemCoreClock>:
20070294:	0900 003d                                   ..=.

20070298 <__ctype_ptr__>:
20070298:	db0c 0008 0000 0000                         ........

200702a0 <_impure_ptr>:
200702a0:	02a8 2007 0000 0000                         ... ....

200702a8 <impure_data>:
200702a8:	0000 0000 0594 2007 05fc 2007 0664 2007     ....... ... d.. 
	...
200702dc:	dc14 0008 0000 0000 0000 0000 0000 0000     ................
	...
20070350:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20070360:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200706d0 <fpi.5202>:
200706d0:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
200706e0:	0000 0000                                   ....

200706e4 <fpinan.5238>:
200706e4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
200706f4:	0000 0000                                   ....

200706f8 <lc_ctype_charset>:
200706f8:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20070718 <__mb_cur_max>:
20070718:	0001 0000                                   ....

2007071c <lc_message_charset>:
2007071c:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

2007073c <lconv>:
2007073c:	dc9f 0008 dca0 0008 dca0 0008 dca0 0008     ................
2007074c:	dca0 0008 dca0 0008 dca0 0008 dca0 0008     ................
2007075c:	dca0 0008 dca0 0008 ffff ffff ffff ffff     ................
2007076c:	ffff ffff ffff 0000                         ........

20070774 <__malloc_av_>:
	...
2007077c:	0774 2007 0774 2007 077c 2007 077c 2007     t.. t.. |.. |.. 
2007078c:	0784 2007 0784 2007 078c 2007 078c 2007     ... ... ... ... 
2007079c:	0794 2007 0794 2007 079c 2007 079c 2007     ... ... ... ... 
200707ac:	07a4 2007 07a4 2007 07ac 2007 07ac 2007     ... ... ... ... 
200707bc:	07b4 2007 07b4 2007 07bc 2007 07bc 2007     ... ... ... ... 
200707cc:	07c4 2007 07c4 2007 07cc 2007 07cc 2007     ... ... ... ... 
200707dc:	07d4 2007 07d4 2007 07dc 2007 07dc 2007     ... ... ... ... 
200707ec:	07e4 2007 07e4 2007 07ec 2007 07ec 2007     ... ... ... ... 
200707fc:	07f4 2007 07f4 2007 07fc 2007 07fc 2007     ... ... ... ... 
2007080c:	0804 2007 0804 2007 080c 2007 080c 2007     ... ... ... ... 
2007081c:	0814 2007 0814 2007 081c 2007 081c 2007     ... ... ... ... 
2007082c:	0824 2007 0824 2007 082c 2007 082c 2007     $.. $.. ,.. ,.. 
2007083c:	0834 2007 0834 2007 083c 2007 083c 2007     4.. 4.. <.. <.. 
2007084c:	0844 2007 0844 2007 084c 2007 084c 2007     D.. D.. L.. L.. 
2007085c:	0854 2007 0854 2007 085c 2007 085c 2007     T.. T.. \.. \.. 
2007086c:	0864 2007 0864 2007 086c 2007 086c 2007     d.. d.. l.. l.. 
2007087c:	0874 2007 0874 2007 087c 2007 087c 2007     t.. t.. |.. |.. 
2007088c:	0884 2007 0884 2007 088c 2007 088c 2007     ... ... ... ... 
2007089c:	0894 2007 0894 2007 089c 2007 089c 2007     ... ... ... ... 
200708ac:	08a4 2007 08a4 2007 08ac 2007 08ac 2007     ... ... ... ... 
200708bc:	08b4 2007 08b4 2007 08bc 2007 08bc 2007     ... ... ... ... 
200708cc:	08c4 2007 08c4 2007 08cc 2007 08cc 2007     ... ... ... ... 
200708dc:	08d4 2007 08d4 2007 08dc 2007 08dc 2007     ... ... ... ... 
200708ec:	08e4 2007 08e4 2007 08ec 2007 08ec 2007     ... ... ... ... 
200708fc:	08f4 2007 08f4 2007 08fc 2007 08fc 2007     ... ... ... ... 
2007090c:	0904 2007 0904 2007 090c 2007 090c 2007     ... ... ... ... 
2007091c:	0914 2007 0914 2007 091c 2007 091c 2007     ... ... ... ... 
2007092c:	0924 2007 0924 2007 092c 2007 092c 2007     $.. $.. ,.. ,.. 
2007093c:	0934 2007 0934 2007 093c 2007 093c 2007     4.. 4.. <.. <.. 
2007094c:	0944 2007 0944 2007 094c 2007 094c 2007     D.. D.. L.. L.. 
2007095c:	0954 2007 0954 2007 095c 2007 095c 2007     T.. T.. \.. \.. 
2007096c:	0964 2007 0964 2007 096c 2007 096c 2007     d.. d.. l.. l.. 
2007097c:	0974 2007 0974 2007 097c 2007 097c 2007     t.. t.. |.. |.. 
2007098c:	0984 2007 0984 2007 098c 2007 098c 2007     ... ... ... ... 
2007099c:	0994 2007 0994 2007 099c 2007 099c 2007     ... ... ... ... 
200709ac:	09a4 2007 09a4 2007 09ac 2007 09ac 2007     ... ... ... ... 
200709bc:	09b4 2007 09b4 2007 09bc 2007 09bc 2007     ... ... ... ... 
200709cc:	09c4 2007 09c4 2007 09cc 2007 09cc 2007     ... ... ... ... 
200709dc:	09d4 2007 09d4 2007 09dc 2007 09dc 2007     ... ... ... ... 
200709ec:	09e4 2007 09e4 2007 09ec 2007 09ec 2007     ... ... ... ... 
200709fc:	09f4 2007 09f4 2007 09fc 2007 09fc 2007     ... ... ... ... 
20070a0c:	0a04 2007 0a04 2007 0a0c 2007 0a0c 2007     ... ... ... ... 
20070a1c:	0a14 2007 0a14 2007 0a1c 2007 0a1c 2007     ... ... ... ... 
20070a2c:	0a24 2007 0a24 2007 0a2c 2007 0a2c 2007     $.. $.. ,.. ,.. 
20070a3c:	0a34 2007 0a34 2007 0a3c 2007 0a3c 2007     4.. 4.. <.. <.. 
20070a4c:	0a44 2007 0a44 2007 0a4c 2007 0a4c 2007     D.. D.. L.. L.. 
20070a5c:	0a54 2007 0a54 2007 0a5c 2007 0a5c 2007     T.. T.. \.. \.. 
20070a6c:	0a64 2007 0a64 2007 0a6c 2007 0a6c 2007     d.. d.. l.. l.. 
20070a7c:	0a74 2007 0a74 2007 0a7c 2007 0a7c 2007     t.. t.. |.. |.. 
20070a8c:	0a84 2007 0a84 2007 0a8c 2007 0a8c 2007     ... ... ... ... 
20070a9c:	0a94 2007 0a94 2007 0a9c 2007 0a9c 2007     ... ... ... ... 
20070aac:	0aa4 2007 0aa4 2007 0aac 2007 0aac 2007     ... ... ... ... 
20070abc:	0ab4 2007 0ab4 2007 0abc 2007 0abc 2007     ... ... ... ... 
20070acc:	0ac4 2007 0ac4 2007 0acc 2007 0acc 2007     ... ... ... ... 
20070adc:	0ad4 2007 0ad4 2007 0adc 2007 0adc 2007     ... ... ... ... 
20070aec:	0ae4 2007 0ae4 2007 0aec 2007 0aec 2007     ... ... ... ... 
20070afc:	0af4 2007 0af4 2007 0afc 2007 0afc 2007     ... ... ... ... 
20070b0c:	0b04 2007 0b04 2007 0b0c 2007 0b0c 2007     ... ... ... ... 
20070b1c:	0b14 2007 0b14 2007 0b1c 2007 0b1c 2007     ... ... ... ... 
20070b2c:	0b24 2007 0b24 2007 0b2c 2007 0b2c 2007     $.. $.. ,.. ,.. 
20070b3c:	0b34 2007 0b34 2007 0b3c 2007 0b3c 2007     4.. 4.. <.. <.. 
20070b4c:	0b44 2007 0b44 2007 0b4c 2007 0b4c 2007     D.. D.. L.. L.. 
20070b5c:	0b54 2007 0b54 2007 0b5c 2007 0b5c 2007     T.. T.. \.. \.. 
20070b6c:	0b64 2007 0b64 2007 0b6c 2007 0b6c 2007     d.. d.. l.. l.. 

20070b7c <__malloc_sbrk_base>:
20070b7c:	ffff ffff                                   ....

20070b80 <__malloc_trim_threshold>:
20070b80:	0000 0002                                   ....
