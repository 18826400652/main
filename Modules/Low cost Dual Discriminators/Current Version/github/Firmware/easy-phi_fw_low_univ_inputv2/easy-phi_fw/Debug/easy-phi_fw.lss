
easy-phi_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000df2c  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008df2c  0008df2c  00015f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae0  20070000  0008df34  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000012f4  20070ae0  0008ea18  00018ae0  2**3
                  ALLOC
  4 .stack        00002004  20071dd4  0008fd0c  00018ae0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00018ae0  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00018b09  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002c6fc  00000000  00000000  00018b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008309  00000000  00000000  00045276  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000178d8  00000000  00000000  0004d57f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001bd8  00000000  00000000  00064e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001fb0  00000000  00000000  00066a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000244f3  00000000  00000000  000689e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002eafe  00000000  00000000  0008ced3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007ac55  00000000  00000000  000bb9d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003e4c  00000000  00000000  00136628  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20073dd8 	.word	0x20073dd8
   80004:	00089a41 	.word	0x00089a41
   80008:	00089a3d 	.word	0x00089a3d
   8000c:	00085179 	.word	0x00085179
   80010:	00089a3d 	.word	0x00089a3d
   80014:	00089a3d 	.word	0x00089a3d
   80018:	00089a3d 	.word	0x00089a3d
	...
   8002c:	00089a3d 	.word	0x00089a3d
   80030:	00089a3d 	.word	0x00089a3d
   80034:	00000000 	.word	0x00000000
   80038:	00089a3d 	.word	0x00089a3d
   8003c:	00089a3d 	.word	0x00089a3d
   80040:	00089a3d 	.word	0x00089a3d
   80044:	00089a3d 	.word	0x00089a3d
   80048:	00089a3d 	.word	0x00089a3d
   8004c:	00089a3d 	.word	0x00089a3d
   80050:	00089a3d 	.word	0x00089a3d
   80054:	00089a3d 	.word	0x00089a3d
   80058:	00089a3d 	.word	0x00089a3d
   8005c:	00089a3d 	.word	0x00089a3d
   80060:	00089a3d 	.word	0x00089a3d
   80064:	00089a3d 	.word	0x00089a3d
   80068:	00000000 	.word	0x00000000
   8006c:	000877ed 	.word	0x000877ed
   80070:	00087809 	.word	0x00087809
   80074:	00087825 	.word	0x00087825
   80078:	00087841 	.word	0x00087841
	...
   80084:	00089a3d 	.word	0x00089a3d
   80088:	00089a3d 	.word	0x00089a3d
   8008c:	00089a3d 	.word	0x00089a3d
   80090:	00089a3d 	.word	0x00089a3d
   80094:	00089a3d 	.word	0x00089a3d
   80098:	00089a3d 	.word	0x00089a3d
   8009c:	00089a3d 	.word	0x00089a3d
   800a0:	00089a3d 	.word	0x00089a3d
   800a4:	00000000 	.word	0x00000000
   800a8:	00089a3d 	.word	0x00089a3d
   800ac:	00089a3d 	.word	0x00089a3d
   800b0:	00089a3d 	.word	0x00089a3d
   800b4:	00089a3d 	.word	0x00089a3d
   800b8:	00089a3d 	.word	0x00089a3d
   800bc:	00089a3d 	.word	0x00089a3d
   800c0:	00089a3d 	.word	0x00089a3d
   800c4:	00089a3d 	.word	0x00089a3d
   800c8:	00089a3d 	.word	0x00089a3d
   800cc:	00089a3d 	.word	0x00089a3d
   800d0:	00089a3d 	.word	0x00089a3d
   800d4:	00089a3d 	.word	0x00089a3d
   800d8:	00089a3d 	.word	0x00089a3d
   800dc:	00089a3d 	.word	0x00089a3d
   800e0:	00088369 	.word	0x00088369
   800e4:	00089a3d 	.word	0x00089a3d
   800e8:	00089a3d 	.word	0x00089a3d
   800ec:	00089a3d 	.word	0x00089a3d
   800f0:	00089a3d 	.word	0x00089a3d

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	0008df34 	.word	0x0008df34
   80110:	0008df37 	.word	0x0008df37
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	0008df34 	.word	0x0008df34
   8013c:	0008df34 	.word	0x0008df34
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070ae0 	.word	0x20070ae0
   80164:	00000000 	.word	0x00000000
   80168:	0008df34 	.word	0x0008df34

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	0008df34 	.word	0x0008df34
   80198:	20070ae4 	.word	0x20070ae4
   8019c:	0008df34 	.word	0x0008df34
   801a0:	00000000 	.word	0x00000000

000801a4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   801a4:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   801a6:	f640 3300 	movw	r3, #2816	; 0xb00
   801aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   801ae:	681a      	ldr	r2, [r3, #0]
   801b0:	f892 4022 	ldrb.w	r4, [r2, #34]	; 0x22
   801b4:	f640 3106 	movw	r1, #2822	; 0xb06
   801b8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   801bc:	7808      	ldrb	r0, [r1, #0]
   801be:	6811      	ldr	r1, [r2, #0]
   801c0:	7c52      	ldrb	r2, [r2, #17]
   801c2:	1c23      	adds	r3, r4, #0
   801c4:	bf18      	it	ne
   801c6:	2301      	movne	r3, #1
   801c8:	f644 0481 	movw	r4, #18561	; 0x4881
   801cc:	f2c0 0408 	movt	r4, #8
   801d0:	47a0      	blx	r4
   801d2:	bd10      	pop	{r4, pc}

000801d4 <sdio_cmd53>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd53(uint8_t rw_flag, uint8_t func_nb, uint32_t reg_addr,
		uint8_t inc_addr, uint32_t size, bool access_block)
{
   801d4:	b570      	push	{r4, r5, r6, lr}
   801d6:	b082      	sub	sp, #8
   801d8:	9c06      	ldr	r4, [sp, #24]
	Assert(size != 0);
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
   801da:	f249 3635 	movw	r6, #37685	; 0x9335
   801de:	f2c0 0601 	movt	r6, #1
   801e2:	f241 3535 	movw	r5, #4917	; 0x1335
   801e6:	f2c0 0501 	movt	r5, #1
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
   801ea:	ea4f 7101 	mov.w	r1, r1, lsl #28

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
			SDIO_CMD53_IO_R_BYTE_EXTENDED :
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
   801ee:	ea41 2242 	orr.w	r2, r1, r2, lsl #9
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
   801f2:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
			SDIO_CMD53_IO_R_BYTE_EXTENDED :
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
   801f6:	ea4f 51c4 	mov.w	r1, r4, lsl #23
   801fa:	ea4f 51d1 	mov.w	r1, r1, lsr #23
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
   801fe:	4311      	orrs	r1, r2
		uint8_t inc_addr, uint32_t size, bool access_block)
{
	Assert(size != 0);
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
   80200:	f89d 201c 	ldrb.w	r2, [sp, #28]
   80204:	9200      	str	r2, [sp, #0]
   80206:	2800      	cmp	r0, #0
   80208:	bf14      	ite	ne
   8020a:	4630      	movne	r0, r6
   8020c:	4628      	moveq	r0, r5
   8020e:	ea41 6183 	orr.w	r1, r1, r3, lsl #26
   80212:	b2a2      	uxth	r2, r4
   80214:	f04f 0301 	mov.w	r3, #1
   80218:	f644 14ad 	movw	r4, #18861	; 0x49ad
   8021c:	f2c0 0408 	movt	r4, #8
   80220:	47a0      	blx	r4
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
			| ((uint32_t)rw_flag << SDIO_CMD53_RW_FLAG),
			size, 1, access_block);
}
   80222:	b002      	add	sp, #8
   80224:	bd70      	pop	{r4, r5, r6, pc}
   80226:	bf00      	nop

00080228 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   80228:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   8022a:	f640 3306 	movw	r3, #2822	; 0xb06
   8022e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80232:	7818      	ldrb	r0, [r3, #0]
   80234:	b930      	cbnz	r0, 80244 <sd_mmc_deselect_slot+0x1c>
		driver_deselect_device(sd_mmc_slot_sel);
   80236:	f04f 0000 	mov.w	r0, #0
   8023a:	f644 01f5 	movw	r1, #18677	; 0x48f5
   8023e:	f2c0 0108 	movt	r1, #8
   80242:	4788      	blx	r1
   80244:	bd08      	pop	{r3, pc}
   80246:	bf00      	nop

00080248 <sdio_cmd52>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
   80248:	b510      	push	{r4, lr}
   8024a:	9c02      	ldr	r4, [sp, #8]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
   8024c:	ea4f 2242 	mov.w	r2, r2, lsl #9
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
   80250:	ea42 7101 	orr.w	r1, r2, r1, lsl #28
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
   80254:	ea41 70c0 	orr.w	r0, r1, r0, lsl #31
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
   80258:	ea40 63c3 	orr.w	r3, r0, r3, lsl #27
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
   8025c:	7822      	ldrb	r2, [r4, #0]
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
   8025e:	f241 3034 	movw	r0, #4916	; 0x1334
   80262:	ea43 0102 	orr.w	r1, r3, r2
   80266:	f644 131d 	movw	r3, #18717	; 0x491d
   8026a:	f2c0 0308 	movt	r3, #8
   8026e:	4798      	blx	r3
   80270:	b140      	cbz	r0, 80284 <sdio_cmd52+0x3c>
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
		return false;
	}
	*io_data = driver_get_response() & 0xFF;
   80272:	f644 1145 	movw	r1, #18757	; 0x4945
   80276:	f2c0 0108 	movt	r1, #8
   8027a:	4788      	blx	r1
   8027c:	7020      	strb	r0, [r4, #0]
	return true;
   8027e:	f04f 0001 	mov.w	r0, #1
   80282:	bd10      	pop	{r4, pc}
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
		return false;
   80284:	f04f 0000 	mov.w	r0, #0
	}
	*io_data = driver_get_response() & 0xFF;
	return true;
}
   80288:	bd10      	pop	{r4, pc}
   8028a:	bf00      	nop

0008028c <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
   8028c:	b508      	push	{r3, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
   8028e:	f640 3300 	movw	r3, #2816	; 0xb00
   80292:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80296:	6818      	ldr	r0, [r3, #0]
   80298:	8981      	ldrh	r1, [r0, #12]
   8029a:	f641 3009 	movw	r0, #6921	; 0x1b09
   8029e:	ea4f 4101 	mov.w	r1, r1, lsl #16
   802a2:	f644 121d 	movw	r2, #18717	; 0x491d
   802a6:	f2c0 0208 	movt	r2, #8
   802aa:	4790      	blx	r2
   802ac:	b170      	cbz	r0, 802cc <sd_mmc_cmd9_mci+0x40>
		return false;
	}
	driver_get_response_128(sd_mmc_card->csd);
   802ae:	f640 3300 	movw	r3, #2816	; 0xb00
   802b2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   802b6:	6818      	ldr	r0, [r3, #0]
   802b8:	f100 0012 	add.w	r0, r0, #18
   802bc:	f644 114d 	movw	r1, #18765	; 0x494d
   802c0:	f2c0 0108 	movt	r1, #8
   802c4:	4788      	blx	r1
	return true;
   802c6:	f04f 0001 	mov.w	r0, #1
   802ca:	bd08      	pop	{r3, pc}
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   802cc:	f04f 0000 	mov.w	r0, #0
	}
	driver_get_response_128(sd_mmc_card->csd);
	return true;
}
   802d0:	bd08      	pop	{r3, pc}
   802d2:	bf00      	nop

000802d4 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   802d4:	b510      	push	{r4, lr}
	if (slot >= SD_MMC_MEM_CNT) {
   802d6:	2800      	cmp	r0, #0
   802d8:	f040 80a8 	bne.w	8042c <sd_mmc_select_slot+0x158>
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
   802dc:	f240 030c 	movw	r3, #12
   802e0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   802e4:	6898      	ldr	r0, [r3, #8]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   802e6:	ea4f 1250 	mov.w	r2, r0, lsr #5
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   802ea:	f502 1100 	add.w	r1, r2, #2097152	; 0x200000
   802ee:	f201 7307 	addw	r3, r1, #1799	; 0x707
   802f2:	ea4f 2243 	mov.w	r2, r3, lsl #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   802f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   802f8:	f000 001f 	and.w	r0, r0, #31
   802fc:	f04f 0101 	mov.w	r1, #1
   80300:	fa01 f300 	lsl.w	r3, r1, r0
   80304:	4213      	tst	r3, r2
   80306:	d01d      	beq.n	80344 <sd_mmc_select_slot+0x70>
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
   80308:	f240 020c 	movw	r2, #12
   8030c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80310:	7b90      	ldrb	r0, [r2, #14]
   80312:	4288      	cmp	r0, r1
   80314:	d10c      	bne.n	80330 <sd_mmc_select_slot+0x5c>
	return false;
}

static inline void SD_MMC_STOP_TIMEOUT(void)
{
	if (sd_mmc_sam_systick_used) {
   80316:	f640 23fe 	movw	r3, #2814	; 0xafe
   8031a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8031e:	7819      	ldrb	r1, [r3, #0]
   80320:	b131      	cbz	r1, 80330 <sd_mmc_select_slot+0x5c>
		SysTick->CTRL = 0;
   80322:	f24e 0010 	movw	r0, #57360	; 0xe010
   80326:	f2ce 0000 	movt	r0, #57344	; 0xe000
   8032a:	f04f 0200 	mov.w	r2, #0
   8032e:	6002      	str	r2, [r0, #0]
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
			SD_MMC_STOP_TIMEOUT();
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   80330:	f240 030c 	movw	r3, #12
   80334:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80338:	f04f 0104 	mov.w	r1, #4
   8033c:	7399      	strb	r1, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
   8033e:	f04f 0002 	mov.w	r0, #2
   80342:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
   80344:	f240 020c 	movw	r2, #12
   80348:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8034c:	7b90      	ldrb	r0, [r2, #14]
   8034e:	2804      	cmp	r0, #4
   80350:	d131      	bne.n	803b6 <sd_mmc_select_slot+0xe2>
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
   80352:	f240 010c 	movw	r1, #12
   80356:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8035a:	f04f 0201 	mov.w	r2, #1
   8035e:	738a      	strb	r2, [r1, #14]
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
   80360:	f24e 0310 	movw	r3, #57360	; 0xe010
   80364:	f2ce 0300 	movt	r3, #57344	; 0xe000
   80368:	6818      	ldr	r0, [r3, #0]
   8036a:	b988      	cbnz	r0, 80390 <sd_mmc_select_slot+0xbc>
		sd_mmc_sam_systick_used = true;
   8036c:	f640 20fe 	movw	r0, #2814	; 0xafe
   80370:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80374:	7002      	strb	r2, [r0, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
   80376:	f24e 0310 	movw	r3, #57360	; 0xe010
   8037a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8037e:	f243 71a0 	movw	r1, #14240	; 0x37a0
   80382:	f2c0 01a0 	movt	r1, #160	; 0xa0
   80386:	6059      	str	r1, [r3, #4]
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
   80388:	601a      	str	r2, [r3, #0]
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
   8038a:	f04f 0002 	mov.w	r0, #2
   8038e:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = true;
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
	} else {
		sd_mmc_sam_systick_used = false;
   80390:	f640 21fe 	movw	r1, #2814	; 0xafe
   80394:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80398:	f04f 0200 	mov.w	r2, #0
   8039c:	700a      	strb	r2, [r1, #0]
#ifdef FREERTOS_USED
		// Note: the define INCLUDE_vTaskDelay must be set to one
		// in FreeRTOSConfig.h file.
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
   8039e:	f648 5080 	movw	r0, #36224	; 0x8d80
   803a2:	f2c0 005b 	movt	r0, #91	; 0x5b
   803a6:	f240 0301 	movw	r3, #1
   803aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   803ae:	4798      	blx	r3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
   803b0:	f04f 0002 	mov.w	r0, #2
   803b4:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
   803b6:	2801      	cmp	r0, #1
   803b8:	d116      	bne.n	803e8 <sd_mmc_select_slot+0x114>
	}
}

static inline bool SD_MMC_IS_TIMEOUT(void)
{
	if (!sd_mmc_sam_systick_used) {
   803ba:	f640 21fe 	movw	r1, #2814	; 0xafe
   803be:	f2c2 0107 	movt	r1, #8199	; 0x2007
   803c2:	780b      	ldrb	r3, [r1, #0]
   803c4:	2b00      	cmp	r3, #0
   803c6:	d03a      	beq.n	8043e <sd_mmc_select_slot+0x16a>
		return (xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE);
#else
		return true;
#endif
	}
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
   803c8:	f24e 0210 	movw	r2, #57360	; 0xe010
   803cc:	f2ce 0200 	movt	r2, #57344	; 0xe000
   803d0:	6810      	ldr	r0, [r2, #0]
   803d2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   803d6:	d02c      	beq.n	80432 <sd_mmc_select_slot+0x15e>
		SysTick->CTRL = 0;
   803d8:	f24e 0110 	movw	r1, #57360	; 0xe010
   803dc:	f2ce 0100 	movt	r1, #57344	; 0xe000
   803e0:	f04f 0300 	mov.w	r3, #0
   803e4:	600b      	str	r3, [r1, #0]
   803e6:	e02a      	b.n	8043e <sd_mmc_select_slot+0x16a>
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
   803e8:	f240 000c 	movw	r0, #12
   803ec:	f2c2 0007 	movt	r0, #8199	; 0x2007
   803f0:	7b81      	ldrb	r1, [r0, #14]
   803f2:	2903      	cmp	r1, #3
   803f4:	d020      	beq.n	80438 <sd_mmc_select_slot+0x164>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   803f6:	f640 3406 	movw	r4, #2822	; 0xb06
   803fa:	f2c2 0407 	movt	r4, #8199	; 0x2007
   803fe:	f04f 0300 	mov.w	r3, #0
   80402:	7023      	strb	r3, [r4, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   80404:	f240 040c 	movw	r4, #12
   80408:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8040c:	f640 3200 	movw	r2, #2816	; 0xb00
   80410:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80414:	6014      	str	r4, [r2, #0]
	sd_mmc_configure_slot();
   80416:	f240 10a5 	movw	r0, #421	; 0x1a5
   8041a:	f2c0 0008 	movt	r0, #8
   8041e:	4780      	blx	r0
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   80420:	7ba0      	ldrb	r0, [r4, #14]

	// Initialize interface
	sd_mmc_slot_sel = slot;
	sd_mmc_card = &sd_mmc_cards[slot];
	sd_mmc_configure_slot();
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   80422:	2802      	cmp	r0, #2
   80424:	bf14      	ite	ne
   80426:	2000      	movne	r0, #0
   80428:	2001      	moveq	r0, #1
   8042a:	bd10      	pop	{r4, pc}
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
		return SD_MMC_ERR_SLOT;
   8042c:	f04f 0004 	mov.w	r0, #4
   80430:	bd10      	pop	{r4, pc}
		return SD_MMC_ERR_NO_CARD;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
   80432:	f04f 0002 	mov.w	r0, #2
   80436:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
   80438:	f04f 0003 	mov.w	r0, #3
   8043c:	bd10      	pop	{r4, pc}
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   8043e:	f240 000c 	movw	r0, #12
   80442:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80446:	f04f 0202 	mov.w	r2, #2
   8044a:	7382      	strb	r2, [r0, #14]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   8044c:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   80450:	f2c0 0106 	movt	r1, #6
   80454:	6001      	str	r1, [r0, #0]
		sd_mmc_cards[slot].bus_width = 1;
   80456:	f04f 0301 	mov.w	r3, #1
   8045a:	7443      	strb	r3, [r0, #17]
		sd_mmc_cards[slot].high_speed = 0;
   8045c:	f04f 0200 	mov.w	r2, #0
   80460:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
   80464:	e7c0      	b.n	803e8 <sd_mmc_select_slot+0x114>
   80466:	bf00      	nop

00080468 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   80468:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   8046a:	f240 030c 	movw	r3, #12
   8046e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80472:	f04f 0204 	mov.w	r2, #4
   80476:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   80478:	f640 3006 	movw	r0, #2822	; 0xb06
   8047c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80480:	f04f 01ff 	mov.w	r1, #255	; 0xff
   80484:	7001      	strb	r1, [r0, #0]
	driver_init();
   80486:	f644 0335 	movw	r3, #18485	; 0x4835
   8048a:	f2c0 0308 	movt	r3, #8
   8048e:	4798      	blx	r3
   80490:	bd08      	pop	{r3, pc}
   80492:	bf00      	nop

00080494 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   80494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80498:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   8049a:	f240 23d5 	movw	r3, #725	; 0x2d5
   8049e:	f2c0 0308 	movt	r3, #8
   804a2:	4798      	blx	r3
   804a4:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   804a6:	2801      	cmp	r0, #1
   804a8:	d006      	beq.n	804b8 <sd_mmc_check+0x24>
		sd_mmc_deselect_slot();
   804aa:	f240 2129 	movw	r1, #553	; 0x229
   804ae:	f2c0 0108 	movt	r1, #8
   804b2:	4788      	blx	r1
		return sd_mmc_err;
   804b4:	f000 bd5d 	b.w	80f72 <sd_mmc_check+0xade>
static bool sd_mmc_mci_card_init(void)
{
	uint8_t v2 = 0;

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   804b8:	f640 3000 	movw	r0, #2816	; 0xb00
   804bc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   804c0:	6801      	ldr	r1, [r0, #0]
   804c2:	f04f 0201 	mov.w	r2, #1
   804c6:	73ca      	strb	r2, [r1, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   804c8:	f04f 0500 	mov.w	r5, #0
   804cc:	740d      	strb	r5, [r1, #16]
	sd_mmc_card->rca = 0;
   804ce:	818d      	strh	r5, [r1, #12]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   804d0:	f644 03f9 	movw	r3, #18681	; 0x48f9
   804d4:	f2c0 0308 	movt	r3, #8
   804d8:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
   804da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   804de:	4629      	mov	r1, r5
   804e0:	f644 121d 	movw	r2, #18717	; 0x491d
   804e4:	f2c0 0208 	movt	r2, #8
   804e8:	4790      	blx	r2
   804ea:	2800      	cmp	r0, #0
   804ec:	f000 84c1 	beq.w	80e72 <sd_mmc_check+0x9de>
{
	uint32_t resp;

	*v2 = 0;
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   804f0:	f245 5008 	movw	r0, #21768	; 0x5508
   804f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   804f8:	f644 131d 	movw	r3, #18717	; 0x491d
   804fc:	f2c0 0308 	movt	r3, #8
   80500:	4798      	blx	r3
   80502:	2800      	cmp	r0, #0
   80504:	f000 84c3 	beq.w	80e8e <sd_mmc_check+0x9fa>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
	}
	// Check R7 response
	resp = driver_get_response();
   80508:	f644 1045 	movw	r0, #18757	; 0x4945
   8050c:	f2c0 0008 	movt	r0, #8
   80510:	4780      	blx	r0
	if (resp == 0xFFFFFFFF) {
   80512:	f1b0 3fff 	cmp.w	r0, #4294967295
   80516:	f000 84bd 	beq.w	80e94 <sd_mmc_check+0xa00>
		// No compliance R7 value
		return true; // It is not a V2
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   8051a:	ea4f 5100 	mov.w	r1, r0, lsl #20
   8051e:	ea4f 5211 	mov.w	r2, r1, lsr #20
   80522:	f5b2 7fd5 	cmp.w	r2, #426	; 0x1aa
   80526:	f040 84a4 	bne.w	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   8052a:	f04f 0601 	mov.w	r6, #1
   8052e:	f000 bcb3 	b.w	80e98 <sd_mmc_check+0xa04>
	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
		sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
		return true; // No error but card type not updated
	}
	resp = driver_get_response();
   80532:	f644 1045 	movw	r0, #18757	; 0x4945
   80536:	f2c0 0008 	movt	r0, #8
   8053a:	4780      	blx	r0
   8053c:	4601      	mov	r1, r0
	if ((resp & OCR_SDIO_NF) == 0) {
   8053e:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
   80542:	f000 84b5 	beq.w	80eb0 <sd_mmc_check+0xa1c>
   80546:	f241 3989 	movw	r9, #5001	; 0x1389
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   8054a:	f244 5705 	movw	r7, #17669	; 0x4505
   8054e:	f644 151d 	movw	r5, #18717	; 0x491d
   80552:	f2c0 0508 	movt	r5, #8
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80556:	f644 1845 	movw	r8, #18757	; 0x4945
   8055a:	f2c0 0808 	movt	r8, #8
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   8055e:	4638      	mov	r0, r7
   80560:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   80564:	47a8      	blx	r5
   80566:	2800      	cmp	r0, #0
   80568:	f000 8483 	beq.w	80e72 <sd_mmc_check+0x9de>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   8056c:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   8056e:	1e01      	subs	r1, r0, #0
   80570:	db0a      	blt.n	80588 <sd_mmc_check+0xf4>
   80572:	f109 39ff 	add.w	r9, r9, #4294967295
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   80576:	4638      	mov	r0, r7
   80578:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   8057c:	47a8      	blx	r5
   8057e:	2800      	cmp	r0, #0
   80580:	f040 8539 	bne.w	80ff6 <sd_mmc_check+0xb62>
   80584:	f000 bc75 	b.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD5 Timeout on busy\n\r", __func__);
			return false;
		}
	}
	// Update card type at the end of busy
	if ((resp & OCR_SDIO_MP) > 0) {
   80588:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
   8058c:	f640 3300 	movw	r3, #2816	; 0xb00
   80590:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80594:	6818      	ldr	r0, [r3, #0]
   80596:	bf14      	ite	ne
   80598:	2205      	movne	r2, #5
	} else {
		sd_mmc_card->type = CARD_TYPE_SDIO;
   8059a:	2204      	moveq	r2, #4
   8059c:	73c2      	strb	r2, [r0, #15]
   8059e:	f000 bc87 	b.w	80eb0 <sd_mmc_check+0xa1c>
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   805a2:	f241 1737 	movw	r7, #4407	; 0x1137
   805a6:	f04f 0800 	mov.w	r8, #0
   805aa:	f644 151d 	movw	r5, #18717	; 0x491d
   805ae:	f2c0 0508 	movt	r5, #8
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   805b2:	f44f 4900 	mov.w	r9, #32768	; 0x8000
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   805b6:	f644 1a45 	movw	sl, #18757	; 0x4945
   805ba:	f2c0 0a08 	movt	sl, #8
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   805be:	4638      	mov	r0, r7
   805c0:	4641      	mov	r1, r8
   805c2:	47a8      	blx	r5
   805c4:	2800      	cmp	r0, #0
   805c6:	f040 84ea 	bne.w	80f9e <sd_mmc_check+0xb0a>
   805ca:	f000 bc7d 	b.w	80ec8 <sd_mmc_check+0xa34>
   805ce:	4638      	mov	r0, r7
   805d0:	4641      	mov	r1, r8
   805d2:	47a8      	blx	r5
   805d4:	2800      	cmp	r0, #0
   805d6:	f000 8477 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   805da:	4649      	mov	r1, r9
   805dc:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   805e0:	f244 5029 	movw	r0, #17705	; 0x4529
   805e4:	2e00      	cmp	r6, #0
   805e6:	bf08      	it	eq
   805e8:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   805ec:	47a8      	blx	r5
   805ee:	2800      	cmp	r0, #0
   805f0:	f000 846a 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   805f4:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   805f6:	2800      	cmp	r0, #0
   805f8:	da0e      	bge.n	80618 <sd_mmc_check+0x184>
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
   805fa:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   805fe:	f000 848f 	beq.w	80f20 <sd_mmc_check+0xa8c>
				sd_mmc_card->type |= CARD_TYPE_HC;
   80602:	f640 3000 	movw	r0, #2816	; 0xb00
   80606:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8060a:	6801      	ldr	r1, [r0, #0]
   8060c:	7bca      	ldrb	r2, [r1, #15]
   8060e:	f042 0308 	orr.w	r3, r2, #8
   80612:	73cb      	strb	r3, [r1, #15]
   80614:	f000 bc84 	b.w	80f20 <sd_mmc_check+0xa8c>
   80618:	f10b 3bff 	add.w	fp, fp, #4294967295
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   8061c:	4638      	mov	r0, r7
   8061e:	4641      	mov	r1, r8
   80620:	47a8      	blx	r5
   80622:	2800      	cmp	r0, #0
   80624:	f040 84d1 	bne.w	80fca <sd_mmc_check+0xb36>
   80628:	f000 bc4e 	b.w	80ec8 <sd_mmc_check+0xa34>
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   8062c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   80630:	f2c4 051f 	movt	r5, #16415	; 0x401f
   80634:	f244 5701 	movw	r7, #17665	; 0x4501
   80638:	f644 181d 	movw	r8, #18717	; 0x491d
   8063c:	f2c0 0808 	movt	r8, #8
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80640:	f644 1945 	movw	r9, #18757	; 0x4945
   80644:	f2c0 0908 	movt	r9, #8
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   80648:	4638      	mov	r0, r7
   8064a:	4629      	mov	r1, r5
   8064c:	47c0      	blx	r8
   8064e:	2800      	cmp	r0, #0
   80650:	f040 8493 	bne.w	80f7a <sd_mmc_check+0xae6>
   80654:	f000 bc79 	b.w	80f4a <sd_mmc_check+0xab6>
   80658:	4638      	mov	r0, r7
   8065a:	4629      	mov	r1, r5
   8065c:	47c0      	blx	r8
   8065e:	2800      	cmp	r0, #0
   80660:	f000 8473 	beq.w	80f4a <sd_mmc_check+0xab6>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80664:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80666:	2800      	cmp	r0, #0
   80668:	da0d      	bge.n	80686 <sd_mmc_check+0x1f2>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
   8066a:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
   8066e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   80672:	f040 8460 	bne.w	80f36 <sd_mmc_check+0xaa2>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
   80676:	49a6      	ldr	r1, [pc, #664]	; (80910 <sd_mmc_check+0x47c>)
   80678:	680b      	ldr	r3, [r1, #0]
   8067a:	7bda      	ldrb	r2, [r3, #15]
   8067c:	f042 0008 	orr.w	r0, r2, #8
   80680:	73d8      	strb	r0, [r3, #15]
   80682:	f000 bc58 	b.w	80f36 <sd_mmc_check+0xaa2>
   80686:	f106 36ff 	add.w	r6, r6, #4294967295
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   8068a:	4638      	mov	r0, r7
   8068c:	4629      	mov	r1, r5
   8068e:	47c0      	blx	r8
   80690:	2800      	cmp	r0, #0
   80692:	f040 847c 	bne.w	80f8e <sd_mmc_check+0xafa>
   80696:	f000 bc58 	b.w	80f4a <sd_mmc_check+0xab6>
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
		return false;
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
   8069a:	499d      	ldr	r1, [pc, #628]	; (80910 <sd_mmc_check+0x47c>)
   8069c:	6808      	ldr	r0, [r1, #0]
   8069e:	f04f 0201 	mov.w	r2, #1
   806a2:	8182      	strh	r2, [r0, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
   806a4:	f241 1003 	movw	r0, #4355	; 0x1103
   806a8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   806ac:	4b99      	ldr	r3, [pc, #612]	; (80914 <sd_mmc_check+0x480>)
   806ae:	4798      	blx	r3
   806b0:	2800      	cmp	r0, #0
   806b2:	f000 8121 	beq.w	808f8 <sd_mmc_check+0x464>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
   806b6:	4998      	ldr	r1, [pc, #608]	; (80918 <sd_mmc_check+0x484>)
   806b8:	4788      	blx	r1
   806ba:	2800      	cmp	r0, #0
   806bc:	f000 811f 	beq.w	808fe <sd_mmc_check+0x46a>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   806c0:	4893      	ldr	r0, [pc, #588]	; (80910 <sd_mmc_check+0x47c>)
   806c2:	6803      	ldr	r3, [r0, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   806c4:	7c9a      	ldrb	r2, [r3, #18]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   806c6:	f3c2 0183 	ubfx	r1, r2, #2, #4
   806ca:	f101 30ff 	add.w	r0, r1, #4294967295
   806ce:	2803      	cmp	r0, #3
   806d0:	d803      	bhi.n	806da <sd_mmc_check+0x246>
   806d2:	e8df f000 	tbb	[pc, r0]
   806d6:	0a06      	.short	0x0a06
   806d8:	120e      	.short	0x120e
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   806da:	f04f 0112 	mov.w	r1, #18
   806de:	7419      	strb	r1, [r3, #16]
   806e0:	e00e      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   806e2:	f04f 0214 	mov.w	r2, #20
   806e6:	741a      	strb	r2, [r3, #16]
   806e8:	e00a      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   806ea:	f04f 0022 	mov.w	r0, #34	; 0x22
   806ee:	7418      	strb	r0, [r3, #16]
   806f0:	e006      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   806f2:	f04f 0130 	mov.w	r1, #48	; 0x30
   806f6:	7419      	strb	r1, [r3, #16]
   806f8:	e002      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   806fa:	f04f 0240 	mov.w	r2, #64	; 0x40
   806fe:	741a      	strb	r2, [r3, #16]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80700:	7d5a      	ldrb	r2, [r3, #21]
		break;
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   80702:	f002 0007 	and.w	r0, r2, #7
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80706:	4985      	ldr	r1, [pc, #532]	; (8091c <sd_mmc_check+0x488>)
   80708:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   8070c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80710:	fb00 f101 	mul.w	r1, r0, r1
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   80714:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   80718:	4881      	ldr	r0, [pc, #516]	; (80920 <sd_mmc_check+0x48c>)
   8071a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   8071e:	fb02 f101 	mul.w	r1, r2, r1
   80722:	6019      	str	r1, [r3, #0]
   80724:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80726:	7e18      	ldrb	r0, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80728:	7e5a      	ldrb	r2, [r3, #25]
   8072a:	ea4f 0282 	mov.w	r2, r2, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   8072e:	ea42 2080 	orr.w	r0, r2, r0, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80732:	ea40 11a1 	orr.w	r1, r0, r1, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
   80736:	ea4f 5201 	mov.w	r2, r1, lsl #20
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   8073a:	ea4f 5112 	mov.w	r1, r2, lsr #20
   8073e:	f512 1f80 	cmn.w	r2, #1048576	; 0x100000
   80742:	d015      	beq.n	80770 <sd_mmc_check+0x2dc>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80744:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80746:	7eda      	ldrb	r2, [r3, #27]
   80748:	ea4f 0242 	mov.w	r2, r2, lsl #1
   8074c:	ea42 10e0 	orr.w	r0, r2, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   80750:	f101 0101 	add.w	r1, r1, #1
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80754:	f000 0207 	and.w	r2, r0, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   80758:	f102 0202 	add.w	r2, r2, #2
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   8075c:	fa01 f102 	lsl.w	r1, r1, r2
   80760:	7dd8      	ldrb	r0, [r3, #23]
   80762:	f000 020f 	and.w	r2, r0, #15
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80766:	fa01 f102 	lsl.w	r1, r1, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   8076a:	ea4f 2091 	mov.w	r0, r1, lsr #10
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   8076e:	6058      	str	r0, [r3, #4]
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
   80770:	899b      	ldrh	r3, [r3, #12]
	if (!sd_mmc_cmd9_mci()) {
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
   80772:	f243 1007 	movw	r0, #12551	; 0x3107
   80776:	ea4f 4103 	mov.w	r1, r3, lsl #16
   8077a:	4a66      	ldr	r2, [pc, #408]	; (80914 <sd_mmc_check+0x480>)
   8077c:	4790      	blx	r2
   8077e:	2800      	cmp	r0, #0
   80780:	f000 80c0 	beq.w	80904 <sd_mmc_check+0x470>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   80784:	4d62      	ldr	r5, [pc, #392]	; (80910 <sd_mmc_check+0x47c>)
   80786:	6829      	ldr	r1, [r5, #0]
   80788:	7c08      	ldrb	r0, [r1, #16]
   8078a:	283f      	cmp	r0, #63	; 0x3f
   8078c:	f240 809c 	bls.w	808c8 <sd_mmc_check+0x434>
{
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   80790:	f04f 0100 	mov.w	r1, #0
   80794:	9100      	str	r1, [sp, #0]
   80796:	f241 1008 	movw	r0, #4360	; 0x1108
   8079a:	f2c0 0008 	movt	r0, #8
   8079e:	f44f 7200 	mov.w	r2, #512	; 0x200
   807a2:	f04f 0301 	mov.w	r3, #1
   807a6:	4d5f      	ldr	r5, [pc, #380]	; (80924 <sd_mmc_check+0x490>)
   807a8:	47a8      	blx	r5
   807aa:	2800      	cmp	r0, #0
   807ac:	f000 83d0 	beq.w	80f50 <sd_mmc_check+0xabc>
   807b0:	f04f 0500 	mov.w	r5, #0
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
		if (!driver_read_word(&ext_csd)) {
   807b4:	4e5c      	ldr	r6, [pc, #368]	; (80928 <sd_mmc_check+0x494>)
   807b6:	a802      	add	r0, sp, #8
   807b8:	47b0      	blx	r6
   807ba:	2800      	cmp	r0, #0
   807bc:	f000 83c8 	beq.w	80f50 <sd_mmc_check+0xabc>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   807c0:	f105 0501 	add.w	r5, r5, #1
   807c4:	b2ad      	uxth	r5, r5
   807c6:	2d32      	cmp	r5, #50	; 0x32
   807c8:	d1f5      	bne.n	807b6 <sd_mmc_check+0x322>
		if (!driver_read_word(&ext_csd)) {
			return false;
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   807ca:	9e02      	ldr	r6, [sp, #8]
   807cc:	f006 0302 	and.w	r3, r6, #2
   807d0:	b2de      	uxtb	r6, r3
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   807d2:	4a4f      	ldr	r2, [pc, #316]	; (80910 <sd_mmc_check+0x47c>)
   807d4:	6810      	ldr	r0, [r2, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   807d6:	7e87      	ldrb	r7, [r0, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807d8:	7e01      	ldrb	r1, [r0, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   807da:	7e43      	ldrb	r3, [r0, #25]
   807dc:	ea4f 0283 	mov.w	r2, r3, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807e0:	ea42 2081 	orr.w	r0, r2, r1, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807e4:	ea40 17a7 	orr.w	r7, r0, r7, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
   807e8:	ea4f 5107 	mov.w	r1, r7, lsl #20
   807ec:	f511 1f80 	cmn.w	r1, #1048576	; 0x100000
   807f0:	d11a      	bne.n	80828 <sd_mmc_check+0x394>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
			if (!driver_read_word(&sec_count)) {
   807f2:	4f4d      	ldr	r7, [pc, #308]	; (80928 <sd_mmc_check+0x494>)
   807f4:	a803      	add	r0, sp, #12
   807f6:	47b8      	blx	r7
   807f8:	2800      	cmp	r0, #0
   807fa:	f000 83a9 	beq.w	80f50 <sd_mmc_check+0xabc>
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   807fe:	f105 0501 	add.w	r5, r5, #1
   80802:	b2ad      	uxth	r5, r5
   80804:	2d35      	cmp	r5, #53	; 0x35
   80806:	d9f5      	bls.n	807f4 <sd_mmc_check+0x360>
			if (!driver_read_word(&sec_count)) {
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   80808:	4b41      	ldr	r3, [pc, #260]	; (80910 <sd_mmc_check+0x47c>)
   8080a:	681a      	ldr	r2, [r3, #0]
   8080c:	9803      	ldr	r0, [sp, #12]
   8080e:	ea4f 0750 	mov.w	r7, r0, lsr #1
   80812:	6057      	str	r7, [r2, #4]
   80814:	e008      	b.n	80828 <sd_mmc_check+0x394>
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
		if (!driver_read_word(&sec_count)) {
   80816:	a803      	add	r0, sp, #12
   80818:	47b8      	blx	r7
   8081a:	2800      	cmp	r0, #0
   8081c:	f000 8398 	beq.w	80f50 <sd_mmc_check+0xabc>
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   80820:	f105 0501 	add.w	r5, r5, #1
   80824:	b2ad      	uxth	r5, r5
   80826:	e000      	b.n	8082a <sd_mmc_check+0x396>
		if (!driver_read_word(&sec_count)) {
   80828:	4f3f      	ldr	r7, [pc, #252]	; (80928 <sd_mmc_check+0x494>)
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   8082a:	2d7f      	cmp	r5, #127	; 0x7f
   8082c:	d9f3      	bls.n	80816 <sd_mmc_check+0x382>
   8082e:	e392      	b.n	80f56 <sd_mmc_check+0xac2>
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
   80830:	4d3e      	ldr	r5, [pc, #248]	; (8092c <sd_mmc_check+0x498>)
   80832:	7828      	ldrb	r0, [r5, #0]
   80834:	4a3e      	ldr	r2, [pc, #248]	; (80930 <sd_mmc_check+0x49c>)
   80836:	4790      	blx	r2
   80838:	4605      	mov	r5, r0
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
	uint32_t arg;

	switch (bus_width) {
   8083a:	2804      	cmp	r0, #4
   8083c:	d00b      	beq.n	80856 <sd_mmc_check+0x3c2>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
   8083e:	f44f 7100 	mov.w	r1, #512	; 0x200
   80842:	f2c0 11b7 	movt	r1, #439	; 0x1b7
   80846:	f04f 0000 	mov.w	r0, #0
   8084a:	f2c0 10b7 	movt	r0, #439	; 0x1b7
   8084e:	2d08      	cmp	r5, #8
   80850:	bf18      	it	ne
   80852:	4601      	movne	r1, r0
   80854:	e003      	b.n	8085e <sd_mmc_check+0x3ca>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
   80856:	f44f 7180 	mov.w	r1, #256	; 0x100
   8085a:	f2c0 11b7 	movt	r1, #439	; 0x1b7
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
   8085e:	f243 1006 	movw	r0, #12550	; 0x3106
   80862:	4b2c      	ldr	r3, [pc, #176]	; (80914 <sd_mmc_check+0x480>)
   80864:	4798      	blx	r3
   80866:	2800      	cmp	r0, #0
   80868:	f000 837d 	beq.w	80f66 <sd_mmc_check+0xad2>
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   8086c:	4931      	ldr	r1, [pc, #196]	; (80934 <sd_mmc_check+0x4a0>)
   8086e:	4788      	blx	r1
   80870:	f010 0f80 	tst.w	r0, #128	; 0x80
   80874:	f040 8377 	bne.w	80f66 <sd_mmc_check+0xad2>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->bus_width = bus_width;
   80878:	4a25      	ldr	r2, [pc, #148]	; (80910 <sd_mmc_check+0x47c>)
   8087a:	6810      	ldr	r0, [r2, #0]
   8087c:	7445      	strb	r5, [r0, #17]
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
   8087e:	4b2e      	ldr	r3, [pc, #184]	; (80938 <sd_mmc_check+0x4a4>)
   80880:	4798      	blx	r3
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
   80882:	492e      	ldr	r1, [pc, #184]	; (8093c <sd_mmc_check+0x4a8>)
   80884:	4788      	blx	r1
   80886:	b338      	cbz	r0, 808d8 <sd_mmc_check+0x444>
   80888:	b336      	cbz	r6, 808d8 <sd_mmc_check+0x444>
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
   8088a:	f243 1006 	movw	r0, #12550	; 0x3106
   8088e:	f44f 7180 	mov.w	r1, #256	; 0x100
   80892:	f2c0 31b9 	movt	r1, #953	; 0x3b9
   80896:	4a1f      	ldr	r2, [pc, #124]	; (80914 <sd_mmc_check+0x480>)
   80898:	4790      	blx	r2
   8089a:	2800      	cmp	r0, #0
   8089c:	f000 8366 	beq.w	80f6c <sd_mmc_check+0xad8>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   808a0:	4824      	ldr	r0, [pc, #144]	; (80934 <sd_mmc_check+0x4a0>)
   808a2:	4780      	blx	r0
   808a4:	f010 0f80 	tst.w	r0, #128	; 0x80
   808a8:	f040 8360 	bne.w	80f6c <sd_mmc_check+0xad8>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->high_speed = 1;
   808ac:	4e18      	ldr	r6, [pc, #96]	; (80910 <sd_mmc_check+0x47c>)
   808ae:	6837      	ldr	r7, [r6, #0]
   808b0:	f04f 0501 	mov.w	r5, #1
   808b4:	f887 5022 	strb.w	r5, [r7, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
   808b8:	f44f 43ea 	mov.w	r3, #29952	; 0x7500
   808bc:	f2c0 3319 	movt	r3, #793	; 0x319
   808c0:	603b      	str	r3, [r7, #0]
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
   808c2:	491d      	ldr	r1, [pc, #116]	; (80938 <sd_mmc_check+0x4a4>)
   808c4:	4788      	blx	r1
   808c6:	e007      	b.n	808d8 <sd_mmc_check+0x444>
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
   808c8:	4f1b      	ldr	r7, [pc, #108]	; (80938 <sd_mmc_check+0x4a4>)
   808ca:	47b8      	blx	r7
   808cc:	e004      	b.n	808d8 <sd_mmc_check+0x444>
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   808ce:	4640      	mov	r0, r8
   808d0:	4639      	mov	r1, r7
   808d2:	47b0      	blx	r6
   808d4:	b140      	cbz	r0, 808e8 <sd_mmc_check+0x454>
   808d6:	e018      	b.n	8090a <sd_mmc_check+0x476>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
   808d8:	f04f 050a 	mov.w	r5, #10
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   808dc:	f241 1810 	movw	r8, #4368	; 0x1110
   808e0:	f44f 7700 	mov.w	r7, #512	; 0x200
   808e4:	4e0b      	ldr	r6, [pc, #44]	; (80914 <sd_mmc_check+0x480>)
   808e6:	e7f2      	b.n	808ce <sd_mmc_check+0x43a>
   808e8:	f105 32ff 	add.w	r2, r5, #4294967295
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
	}

	uint8_t retry = 10;
	while (retry--) {
   808ec:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
   808f0:	d1ed      	bne.n	808ce <sd_mmc_check+0x43a>
		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return true;
		}
	}
	return false;
   808f2:	f04f 0000 	mov.w	r0, #0
   808f6:	e2ad      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   808f8:	f04f 0000 	mov.w	r0, #0
   808fc:	e2aa      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
		return false;
   808fe:	f04f 0000 	mov.w	r0, #0
   80902:	e2a7      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   80904:	f04f 0000 	mov.w	r0, #0
   80908:	e2a4      	b.n	80e54 <sd_mmc_check+0x9c0>
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return true;
   8090a:	f04f 0001 	mov.w	r0, #1
   8090e:	e2a1      	b.n	80e54 <sd_mmc_check+0x9c0>
   80910:	20070b00 	.word	0x20070b00
   80914:	0008491d 	.word	0x0008491d
   80918:	0008028d 	.word	0x0008028d
   8091c:	0008cfc0 	.word	0x0008cfc0
   80920:	0008cfdc 	.word	0x0008cfdc
   80924:	000849ad 	.word	0x000849ad
   80928:	00084a85 	.word	0x00084a85
   8092c:	20070b06 	.word	0x20070b06
   80930:	0008486d 	.word	0x0008486d
   80934:	00084945 	.word	0x00084945
   80938:	000801a5 	.word	0x000801a5
   8093c:	00084879 	.word	0x00084879
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
   80940:	f645 3002 	movw	r0, #23298	; 0x5b02
   80944:	f04f 0100 	mov.w	r1, #0
   80948:	f644 131d 	movw	r3, #18717	; 0x491d
   8094c:	f2c0 0308 	movt	r3, #8
   80950:	4798      	blx	r3
   80952:	2800      	cmp	r0, #0
   80954:	f000 828d 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
   80958:	f245 1003 	movw	r0, #20739	; 0x5103
   8095c:	f04f 0100 	mov.w	r1, #0
   80960:	f644 121d 	movw	r2, #18717	; 0x491d
   80964:	f2c0 0208 	movt	r2, #8
   80968:	4790      	blx	r2
   8096a:	2800      	cmp	r0, #0
   8096c:	f000 8281 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
   80970:	f640 3500 	movw	r5, #2816	; 0xb00
   80974:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80978:	682e      	ldr	r6, [r5, #0]
   8097a:	f644 1045 	movw	r0, #18757	; 0x4945
   8097e:	f2c0 0008 	movt	r0, #8
   80982:	4780      	blx	r0
   80984:	ea4f 4110 	mov.w	r1, r0, lsr #16
   80988:	81b1      	strh	r1, [r6, #12]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   8098a:	682b      	ldr	r3, [r5, #0]
   8098c:	7bda      	ldrb	r2, [r3, #15]
   8098e:	f012 0f01 	tst.w	r2, #1
   80992:	d056      	beq.n	80a42 <sd_mmc_check+0x5ae>
		if (!sd_mmc_cmd9_mci()) {
   80994:	f240 208d 	movw	r0, #653	; 0x28d
   80998:	f2c0 0008 	movt	r0, #8
   8099c:	4780      	blx	r0
   8099e:	2800      	cmp	r0, #0
   809a0:	f000 8267 	beq.w	80e72 <sd_mmc_check+0x9de>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   809a4:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   809a6:	7d5a      	ldrb	r2, [r3, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   809a8:	f002 0007 	and.w	r0, r2, #7
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   809ac:	f64c 71c0 	movw	r1, #53184	; 0xcfc0
   809b0:	f2c0 0108 	movt	r1, #8
   809b4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   809b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   809bc:	fb00 f101 	mul.w	r1, r0, r1
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   809c0:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   809c4:	f64c 7080 	movw	r0, #53120	; 0xcf80
   809c8:	f2c0 0008 	movt	r0, #8
   809cc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   809d0:	fb02 f101 	mul.w	r1, r2, r1
   809d4:	6019      	str	r1, [r3, #0]
   809d6:	7c98      	ldrb	r0, [r3, #18]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   809d8:	0982      	lsrs	r2, r0, #6
   809da:	d00f      	beq.n	809fc <sd_mmc_check+0x568>
   809dc:	7eda      	ldrb	r2, [r3, #27]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   809de:	7e98      	ldrb	r0, [r3, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   809e0:	7e59      	ldrb	r1, [r3, #25]
   809e2:	ea4f 4101 	mov.w	r1, r1, lsl #16
   809e6:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   809ea:	4302      	orrs	r2, r0
   809ec:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
   809f0:	f101 0101 	add.w	r1, r1, #1
   809f4:	ea4f 2041 	mov.w	r0, r1, lsl #9
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
   809f8:	6058      	str	r0, [r3, #4]
   809fa:	e022      	b.n	80a42 <sd_mmc_check+0x5ae>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   809fc:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   809fe:	7e18      	ldrb	r0, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80a00:	7e5a      	ldrb	r2, [r3, #25]
   80a02:	ea4f 0282 	mov.w	r2, r2, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80a06:	ea42 2080 	orr.w	r0, r2, r0, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80a0a:	ea40 12a1 	orr.w	r2, r0, r1, asr #6
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80a0e:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80a10:	7ed9      	ldrb	r1, [r3, #27]
   80a12:	ea4f 0141 	mov.w	r1, r1, lsl #1
   80a16:	ea41 10e0 	orr.w	r0, r1, r0, asr #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80a1a:	ea4f 5202 	mov.w	r2, r2, lsl #20
   80a1e:	ea4f 5212 	mov.w	r2, r2, lsr #20
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   80a22:	f102 0201 	add.w	r2, r2, #1
   80a26:	f000 0107 	and.w	r1, r0, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   80a2a:	f101 0102 	add.w	r1, r1, #2
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   80a2e:	fa02 f001 	lsl.w	r0, r2, r1
   80a32:	7dda      	ldrb	r2, [r3, #23]
   80a34:	f002 010f 	and.w	r1, r2, #15
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80a38:	fa00 f001 	lsl.w	r0, r0, r1
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
   80a3c:	ea4f 2290 	mov.w	r2, r0, lsr #10
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80a40:	605a      	str	r2, [r3, #4]
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
   80a42:	f640 3300 	movw	r3, #2816	; 0xb00
   80a46:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80a4a:	681a      	ldr	r2, [r3, #0]
   80a4c:	8991      	ldrh	r1, [r2, #12]
			return false;
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
   80a4e:	f243 1007 	movw	r0, #12551	; 0x3107
   80a52:	ea4f 4101 	mov.w	r1, r1, lsl #16
   80a56:	f644 131d 	movw	r3, #18717	; 0x491d
   80a5a:	f2c0 0308 	movt	r3, #8
   80a5e:	4798      	blx	r3
   80a60:	2800      	cmp	r0, #0
   80a62:	f000 8206 	beq.w	80e72 <sd_mmc_check+0x9de>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80a66:	f640 3000 	movw	r0, #2816	; 0xb00
   80a6a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80a6e:	6801      	ldr	r1, [r0, #0]
   80a70:	7bca      	ldrb	r2, [r1, #15]
   80a72:	f012 0f01 	tst.w	r2, #1
   80a76:	d04e      	beq.n	80b16 <sd_mmc_check+0x682>
{
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   80a78:	898b      	ldrh	r3, [r1, #12]
   80a7a:	f241 1037 	movw	r0, #4407	; 0x1137
   80a7e:	ea4f 4103 	mov.w	r1, r3, lsl #16
   80a82:	f644 121d 	movw	r2, #18717	; 0x491d
   80a86:	f2c0 0208 	movt	r2, #8
   80a8a:	4790      	blx	r2
   80a8c:	2800      	cmp	r0, #0
   80a8e:	f000 81f0 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   80a92:	f04f 0301 	mov.w	r3, #1
   80a96:	9300      	str	r3, [sp, #0]
   80a98:	f241 1033 	movw	r0, #4403	; 0x1133
   80a9c:	f2c0 0008 	movt	r0, #8
   80aa0:	f04f 0100 	mov.w	r1, #0
   80aa4:	f04f 0208 	mov.w	r2, #8
   80aa8:	4d4c      	ldr	r5, [pc, #304]	; (80bdc <sd_mmc_check+0x748>)
   80aaa:	47a8      	blx	r5
   80aac:	2800      	cmp	r0, #0
   80aae:	f000 81e0 	beq.w	80e72 <sd_mmc_check+0x9de>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(scr, 1)) {
   80ab2:	a804      	add	r0, sp, #16
   80ab4:	f04f 0101 	mov.w	r1, #1
   80ab8:	4b49      	ldr	r3, [pc, #292]	; (80be0 <sd_mmc_check+0x74c>)
   80aba:	4798      	blx	r3
   80abc:	2800      	cmp	r0, #0
   80abe:	f000 81d8 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80ac2:	4848      	ldr	r0, [pc, #288]	; (80be4 <sd_mmc_check+0x750>)
   80ac4:	4780      	blx	r0
   80ac6:	2800      	cmp	r0, #0
   80ac8:	f000 81d3 	beq.w	80e72 <sd_mmc_check+0x9de>
   80acc:	f89d 1010 	ldrb.w	r1, [sp, #16]
		return false;
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   80ad0:	f001 030f 	and.w	r3, r1, #15
   80ad4:	2b01      	cmp	r3, #1
   80ad6:	d009      	beq.n	80aec <sd_mmc_check+0x658>
   80ad8:	b113      	cbz	r3, 80ae0 <sd_mmc_check+0x64c>
   80ada:	2b02      	cmp	r3, #2
   80adc:	d116      	bne.n	80b0c <sd_mmc_check+0x678>
   80ade:	e00b      	b.n	80af8 <sd_mmc_check+0x664>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   80ae0:	4a41      	ldr	r2, [pc, #260]	; (80be8 <sd_mmc_check+0x754>)
   80ae2:	6813      	ldr	r3, [r2, #0]
   80ae4:	f04f 0010 	mov.w	r0, #16
   80ae8:	7418      	strb	r0, [r3, #16]
   80aea:	e014      	b.n	80b16 <sd_mmc_check+0x682>
		break;

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   80aec:	493e      	ldr	r1, [pc, #248]	; (80be8 <sd_mmc_check+0x754>)
   80aee:	680b      	ldr	r3, [r1, #0]
   80af0:	f04f 021a 	mov.w	r2, #26
   80af4:	741a      	strb	r2, [r3, #16]
   80af6:	e00e      	b.n	80b16 <sd_mmc_check+0x682>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80af8:	f89d 3012 	ldrb.w	r3, [sp, #18]
		break;

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   80afc:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
   80afe:	483a      	ldr	r0, [pc, #232]	; (80be8 <sd_mmc_check+0x754>)
   80b00:	6801      	ldr	r1, [r0, #0]
   80b02:	bf14      	ite	ne
   80b04:	2230      	movne	r2, #48	; 0x30
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
   80b06:	2220      	moveq	r2, #32
   80b08:	740a      	strb	r2, [r1, #16]
   80b0a:	e004      	b.n	80b16 <sd_mmc_check+0x682>
		}
		break;

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   80b0c:	4a36      	ldr	r2, [pc, #216]	; (80be8 <sd_mmc_check+0x754>)
   80b0e:	6810      	ldr	r0, [r2, #0]
   80b10:	f04f 0110 	mov.w	r1, #16
   80b14:	7401      	strb	r1, [r0, #16]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
		if (!sd_acmd51()) {
			return false;
		}
	}
	if (IS_SDIO()) {
   80b16:	f640 3000 	movw	r0, #2816	; 0xb00
   80b1a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80b1e:	6801      	ldr	r1, [r0, #0]
   80b20:	7bcb      	ldrb	r3, [r1, #15]
   80b22:	f003 0204 	and.w	r2, r3, #4
   80b26:	b2d0      	uxtb	r0, r2
   80b28:	2800      	cmp	r0, #0
   80b2a:	f000 8095 	beq.w	80c58 <sd_mmc_check+0x7c4>
 	uint32_t unit;
	uint32_t mul;
	uint8_t tplfe_max_tran_speed;

	// Read CIS area address in CCCR area
	addr_cis = 0; // Init all bytes, because the next function fill 3 bytes only
   80b2e:	f04f 0100 	mov.w	r1, #0
   80b32:	9103      	str	r1, [sp, #12]
	if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, SDIO_CCCR_CIS_PTR,
   80b34:	f04f 0503 	mov.w	r5, #3
   80b38:	9500      	str	r5, [sp, #0]
   80b3a:	f04f 0301 	mov.w	r3, #1
   80b3e:	9301      	str	r3, [sp, #4]
   80b40:	4608      	mov	r0, r1
   80b42:	f04f 0209 	mov.w	r2, #9
   80b46:	f240 15d5 	movw	r5, #469	; 0x1d5
   80b4a:	f2c0 0508 	movt	r5, #8
   80b4e:	47a8      	blx	r5
   80b50:	2800      	cmp	r0, #0
   80b52:	f000 818e 	beq.w	80e72 <sd_mmc_check+0x9de>
			1, 3, true)) {
		sd_mmc_debug("%s: CMD53 Read CIS Fail\n\r", __func__);
		return false;
	}
	if (!driver_start_read_blocks((uint8_t *)&addr_cis, 1)) {
   80b56:	a803      	add	r0, sp, #12
   80b58:	f04f 0101 	mov.w	r1, #1
   80b5c:	4b20      	ldr	r3, [pc, #128]	; (80be0 <sd_mmc_check+0x74c>)
   80b5e:	4798      	blx	r3
   80b60:	2800      	cmp	r0, #0
   80b62:	f000 8186 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80b66:	491f      	ldr	r1, [pc, #124]	; (80be4 <sd_mmc_check+0x750>)
   80b68:	4788      	blx	r1
   80b6a:	2800      	cmp	r0, #0
   80b6c:	f000 8181 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	addr_cis = le32_to_cpu(addr_cis);
   80b70:	9d03      	ldr	r5, [sp, #12]

	// Search Fun0 tuple in the CIA area
	addr = addr_cis;
	while (1) {
		// Read a sample of CIA area
		if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 3, true)) {
   80b72:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80bec <sd_mmc_check+0x758>
			sd_mmc_debug("%s: CMD53 Read CIA Fail\n\r", __func__);
			return false;
		}
		if (!driver_start_read_blocks(buf, 1)) {
   80b76:	4f1a      	ldr	r7, [pc, #104]	; (80be0 <sd_mmc_check+0x74c>)
			return false;
		}
		if (!driver_wait_end_of_read_blocks()) {
   80b78:	4e1a      	ldr	r6, [pc, #104]	; (80be4 <sd_mmc_check+0x750>)

	// Search Fun0 tuple in the CIA area
	addr = addr_cis;
	while (1) {
		// Read a sample of CIA area
		if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 3, true)) {
   80b7a:	f04f 0203 	mov.w	r2, #3
   80b7e:	9200      	str	r2, [sp, #0]
   80b80:	f04f 0301 	mov.w	r3, #1
   80b84:	9301      	str	r3, [sp, #4]
   80b86:	f04f 0000 	mov.w	r0, #0
   80b8a:	4601      	mov	r1, r0
   80b8c:	462a      	mov	r2, r5
   80b8e:	47c0      	blx	r8
   80b90:	2800      	cmp	r0, #0
   80b92:	f000 816e 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Read CIA Fail\n\r", __func__);
			return false;
		}
		if (!driver_start_read_blocks(buf, 1)) {
   80b96:	a804      	add	r0, sp, #16
   80b98:	f04f 0101 	mov.w	r1, #1
   80b9c:	47b8      	blx	r7
   80b9e:	2800      	cmp	r0, #0
   80ba0:	f000 8167 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
		if (!driver_wait_end_of_read_blocks()) {
   80ba4:	47b0      	blx	r6
   80ba6:	2800      	cmp	r0, #0
   80ba8:	f000 8163 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
		if (buf[0] == SDIO_CISTPL_END) {
   80bac:	f89d 0010 	ldrb.w	r0, [sp, #16]
   80bb0:	28ff      	cmp	r0, #255	; 0xff
   80bb2:	f000 815e 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Tuple error\n\r", __func__);
			return false; // Tuple error
		}
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
   80bb6:	2822      	cmp	r0, #34	; 0x22
   80bb8:	d102      	bne.n	80bc0 <sd_mmc_check+0x72c>
   80bba:	f89d 3012 	ldrb.w	r3, [sp, #18]
   80bbe:	b1bb      	cbz	r3, 80bf0 <sd_mmc_check+0x75c>
			break; // Fun0 tuple found
		}
		if (buf[1] == 0) {
   80bc0:	f89d 1011 	ldrb.w	r1, [sp, #17]
   80bc4:	2900      	cmp	r1, #0
   80bc6:	f000 8154 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Tuple error\n\r", __func__);
			return false; // Tuple error
		}

		// Next address
		addr += (buf[1] + 2);
   80bca:	f101 0102 	add.w	r1, r1, #2
   80bce:	186d      	adds	r5, r5, r1
		if (addr > (addr_cis + 256)) {
   80bd0:	9a03      	ldr	r2, [sp, #12]
   80bd2:	f502 7080 	add.w	r0, r2, #256	; 0x100
   80bd6:	4285      	cmp	r5, r0
   80bd8:	d9cf      	bls.n	80b7a <sd_mmc_check+0x6e6>
   80bda:	e14a      	b.n	80e72 <sd_mmc_check+0x9de>
   80bdc:	000849ad 	.word	0x000849ad
   80be0:	00084b19 	.word	0x00084b19
   80be4:	00084c31 	.word	0x00084c31
   80be8:	20070b00 	.word	0x20070b00
   80bec:	000801d5 	.word	0x000801d5
			return false; // Outoff CIS area
		}
	}

	// Read all Fun0 tuple fields: fn0_blk_siz & max_tran_speed
	if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 6, true)) {
   80bf0:	f04f 0306 	mov.w	r3, #6
   80bf4:	9300      	str	r3, [sp, #0]
   80bf6:	f04f 0301 	mov.w	r3, #1
   80bfa:	9301      	str	r3, [sp, #4]
   80bfc:	f04f 0000 	mov.w	r0, #0
   80c00:	4601      	mov	r1, r0
   80c02:	462a      	mov	r2, r5
   80c04:	4dbb      	ldr	r5, [pc, #748]	; (80ef4 <sd_mmc_check+0xa60>)
   80c06:	47a8      	blx	r5
   80c08:	2800      	cmp	r0, #0
   80c0a:	f000 8132 	beq.w	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD53 Read all Fun0 Fail\n\r", __func__);
		return false;
	}
	if (!driver_start_read_blocks(buf, 1)) {
   80c0e:	a804      	add	r0, sp, #16
   80c10:	f04f 0101 	mov.w	r1, #1
   80c14:	4ab8      	ldr	r2, [pc, #736]	; (80ef8 <sd_mmc_check+0xa64>)
   80c16:	4790      	blx	r2
   80c18:	2800      	cmp	r0, #0
   80c1a:	f000 812a 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80c1e:	49b7      	ldr	r1, [pc, #732]	; (80efc <sd_mmc_check+0xa68>)
   80c20:	4788      	blx	r1
   80c22:	2800      	cmp	r0, #0
   80c24:	f000 8125 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	tplfe_max_tran_speed = buf[5];
   80c28:	f89d 3015 	ldrb.w	r3, [sp, #21]
   80c2c:	2b32      	cmp	r3, #50	; 0x32
   80c2e:	bf28      	it	cs
   80c30:	2332      	movcs	r3, #50	; 0x32
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80c32:	48b3      	ldr	r0, [pc, #716]	; (80f00 <sd_mmc_check+0xa6c>)
   80c34:	6802      	ldr	r2, [r0, #0]
		 */
		tplfe_max_tran_speed = 0x32; // 25Mhz
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
   80c36:	f003 0007 	and.w	r0, r3, #7
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80c3a:	49b2      	ldr	r1, [pc, #712]	; (80f04 <sd_mmc_check+0xa70>)
   80c3c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   80c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80c44:	fb00 f101 	mul.w	r1, r0, r1
		tplfe_max_tran_speed = 0x32; // 25Mhz
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
   80c48:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   80c4c:	48ae      	ldr	r0, [pc, #696]	; (80f08 <sd_mmc_check+0xa74>)
   80c4e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   80c52:	fb03 f101 	mul.w	r1, r3, r1
   80c56:	6011      	str	r1, [r2, #0]
	if (IS_SDIO()) {
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
   80c58:	f640 3206 	movw	r2, #2822	; 0xb06
   80c5c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80c60:	7810      	ldrb	r0, [r2, #0]
   80c62:	f644 036d 	movw	r3, #18541	; 0x486d
   80c66:	f2c0 0308 	movt	r3, #8
   80c6a:	4798      	blx	r3
   80c6c:	2803      	cmp	r0, #3
   80c6e:	d959      	bls.n	80d24 <sd_mmc_check+0x890>
		// TRY to enable 4-bit mode
		if (IS_SDIO()) {
   80c70:	f640 3000 	movw	r0, #2816	; 0xb00
   80c74:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80c78:	6801      	ldr	r1, [r0, #0]
   80c7a:	7bca      	ldrb	r2, [r1, #15]
   80c7c:	f002 0304 	and.w	r3, r2, #4
   80c80:	b2d8      	uxtb	r0, r3
   80c82:	b330      	cbz	r0, 80cd2 <sd_mmc_check+0x83e>
	 * A SDIO Low-Speed alone can supports 4bit (Optional)
	 */
	uint8_t u8_value;

	// Check 4bit support in 4BLS of "Card Capability" register
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
   80c84:	ad03      	add	r5, sp, #12
   80c86:	9500      	str	r5, [sp, #0]
   80c88:	f04f 0000 	mov.w	r0, #0
   80c8c:	4601      	mov	r1, r0
   80c8e:	f04f 0208 	mov.w	r2, #8
   80c92:	4603      	mov	r3, r0
   80c94:	4d9d      	ldr	r5, [pc, #628]	; (80f0c <sd_mmc_check+0xa78>)
   80c96:	47a8      	blx	r5
   80c98:	2800      	cmp	r0, #0
   80c9a:	f000 80ea 	beq.w	80e72 <sd_mmc_check+0x9de>
			0, &u8_value)) {
		return false;
	}
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
   80c9e:	f99d 100c 	ldrsb.w	r1, [sp, #12]
   80ca2:	2900      	cmp	r1, #0
   80ca4:	da15      	bge.n	80cd2 <sd_mmc_check+0x83e>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_BUSWIDTH_4B;
   80ca6:	ab14      	add	r3, sp, #80	; 0x50
   80ca8:	f04f 0202 	mov.w	r2, #2
   80cac:	f803 2d44 	strb.w	r2, [r3, #-68]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
   80cb0:	9300      	str	r3, [sp, #0]
   80cb2:	f04f 0001 	mov.w	r0, #1
   80cb6:	f04f 0100 	mov.w	r1, #0
   80cba:	f04f 0207 	mov.w	r2, #7
   80cbe:	4603      	mov	r3, r0
   80cc0:	47a8      	blx	r5
   80cc2:	2800      	cmp	r0, #0
   80cc4:	f000 80d5 	beq.w	80e72 <sd_mmc_check+0x9de>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->bus_width = 4;
   80cc8:	488d      	ldr	r0, [pc, #564]	; (80f00 <sd_mmc_check+0xa6c>)
   80cca:	6801      	ldr	r1, [r0, #0]
   80ccc:	f04f 0304 	mov.w	r3, #4
   80cd0:	744b      	strb	r3, [r1, #17]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_bus_width()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
   80cd2:	f640 3200 	movw	r2, #2816	; 0xb00
   80cd6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80cda:	6810      	ldr	r0, [r2, #0]
   80cdc:	7bc1      	ldrb	r1, [r0, #15]
   80cde:	f011 0f01 	tst.w	r1, #1
   80ce2:	d01a      	beq.n	80d1a <sd_mmc_check+0x886>
 */
static bool sd_acmd6(void)
{
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   80ce4:	8983      	ldrh	r3, [r0, #12]
   80ce6:	f241 1037 	movw	r0, #4407	; 0x1137
   80cea:	ea4f 4103 	mov.w	r1, r3, lsl #16
   80cee:	f644 121d 	movw	r2, #18717	; 0x491d
   80cf2:	f2c0 0208 	movt	r2, #8
   80cf6:	4790      	blx	r2
   80cf8:	2800      	cmp	r0, #0
   80cfa:	f000 80ba 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
   80cfe:	f241 1006 	movw	r0, #4358	; 0x1106
   80d02:	f04f 0102 	mov.w	r1, #2
   80d06:	4b82      	ldr	r3, [pc, #520]	; (80f10 <sd_mmc_check+0xa7c>)
   80d08:	4798      	blx	r3
   80d0a:	2800      	cmp	r0, #0
   80d0c:	f000 80b1 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	sd_mmc_card->bus_width = 4;
   80d10:	487b      	ldr	r0, [pc, #492]	; (80f00 <sd_mmc_check+0xa6c>)
   80d12:	6801      	ldr	r1, [r0, #0]
   80d14:	f04f 0204 	mov.w	r2, #4
   80d18:	744a      	strb	r2, [r1, #17]
			if (!sd_acmd6()) {
				return false;
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
   80d1a:	f240 13a5 	movw	r3, #421	; 0x1a5
   80d1e:	f2c0 0308 	movt	r3, #8
   80d22:	4798      	blx	r3
	}
	if (driver_is_high_speed_capable()) {
   80d24:	f644 0079 	movw	r0, #18553	; 0x4879
   80d28:	f2c0 0008 	movt	r0, #8
   80d2c:	4780      	blx	r0
   80d2e:	2800      	cmp	r0, #0
   80d30:	f000 8081 	beq.w	80e36 <sd_mmc_check+0x9a2>
		// TRY to enable High-Speed Mode
		if (IS_SDIO()) {
   80d34:	f640 3100 	movw	r1, #2816	; 0xb00
   80d38:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80d3c:	680a      	ldr	r2, [r1, #0]
   80d3e:	7bd3      	ldrb	r3, [r2, #15]
   80d40:	f003 0004 	and.w	r0, r3, #4
   80d44:	b2c1      	uxtb	r1, r0
   80d46:	b359      	cbz	r1, 80da0 <sd_mmc_check+0x90c>
static bool sdio_cmd52_set_high_speed(void)
{
	uint8_t u8_value;

	// Check CIA.HS
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
   80d48:	ad03      	add	r5, sp, #12
   80d4a:	9500      	str	r5, [sp, #0]
   80d4c:	f04f 0000 	mov.w	r0, #0
   80d50:	4601      	mov	r1, r0
   80d52:	f04f 0213 	mov.w	r2, #19
   80d56:	4603      	mov	r3, r0
   80d58:	4d6c      	ldr	r5, [pc, #432]	; (80f0c <sd_mmc_check+0xa78>)
   80d5a:	47a8      	blx	r5
   80d5c:	2800      	cmp	r0, #0
   80d5e:	f000 8088 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
   80d62:	f89d 200c 	ldrb.w	r2, [sp, #12]
   80d66:	f012 0f01 	tst.w	r2, #1
   80d6a:	d019      	beq.n	80da0 <sd_mmc_check+0x90c>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_EHS;
   80d6c:	ab14      	add	r3, sp, #80	; 0x50
   80d6e:	f04f 0002 	mov.w	r0, #2
   80d72:	f803 0d44 	strb.w	r0, [r3, #-68]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
   80d76:	9300      	str	r3, [sp, #0]
   80d78:	f04f 0001 	mov.w	r0, #1
   80d7c:	f04f 0100 	mov.w	r1, #0
   80d80:	f04f 0213 	mov.w	r2, #19
   80d84:	4603      	mov	r3, r0
   80d86:	47a8      	blx	r5
   80d88:	2800      	cmp	r0, #0
   80d8a:	d072      	beq.n	80e72 <sd_mmc_check+0x9de>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->high_speed = 1;
   80d8c:	495c      	ldr	r1, [pc, #368]	; (80f00 <sd_mmc_check+0xa6c>)
   80d8e:	680b      	ldr	r3, [r1, #0]
   80d90:	f04f 0201 	mov.w	r2, #1
   80d94:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
   80d98:	6818      	ldr	r0, [r3, #0]
   80d9a:	ea4f 0140 	mov.w	r1, r0, lsl #1
   80d9e:	6019      	str	r1, [r3, #0]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_high_speed()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
   80da0:	f640 3300 	movw	r3, #2816	; 0xb00
   80da4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80da8:	6818      	ldr	r0, [r3, #0]
   80daa:	7bc2      	ldrb	r2, [r0, #15]
   80dac:	f012 0f01 	tst.w	r2, #1
   80db0:	d03c      	beq.n	80e2c <sd_mmc_check+0x998>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
   80db2:	7c01      	ldrb	r1, [r0, #16]
   80db4:	2910      	cmp	r1, #16
   80db6:	d939      	bls.n	80e2c <sd_mmc_check+0x998>
 */
static bool sd_cm6_set_high_speed(void)
{
	uint8_t switch_status[SD_SW_STATUS_BSIZE];

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
   80db8:	f04f 0301 	mov.w	r3, #1
   80dbc:	9300      	str	r3, [sp, #0]
   80dbe:	f241 1006 	movw	r0, #4358	; 0x1106
   80dc2:	f2c0 0008 	movt	r0, #8
   80dc6:	f64f 7101 	movw	r1, #65281	; 0xff01
   80dca:	f2c8 01ff 	movt	r1, #33023	; 0x80ff
   80dce:	f04f 0240 	mov.w	r2, #64	; 0x40
   80dd2:	4d50      	ldr	r5, [pc, #320]	; (80f14 <sd_mmc_check+0xa80>)
   80dd4:	47a8      	blx	r5
   80dd6:	2800      	cmp	r0, #0
   80dd8:	d04b      	beq.n	80e72 <sd_mmc_check+0x9de>
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
   80dda:	a804      	add	r0, sp, #16
   80ddc:	f04f 0101 	mov.w	r1, #1
   80de0:	4b45      	ldr	r3, [pc, #276]	; (80ef8 <sd_mmc_check+0xa64>)
   80de2:	4798      	blx	r3
   80de4:	2800      	cmp	r0, #0
   80de6:	d044      	beq.n	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80de8:	4844      	ldr	r0, [pc, #272]	; (80efc <sd_mmc_check+0xa68>)
   80dea:	4780      	blx	r0
   80dec:	2800      	cmp	r0, #0
   80dee:	d040      	beq.n	80e72 <sd_mmc_check+0x9de>
		return false;
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   80df0:	4a49      	ldr	r2, [pc, #292]	; (80f18 <sd_mmc_check+0xa84>)
   80df2:	4790      	blx	r2
   80df4:	f010 0f80 	tst.w	r0, #128	; 0x80
   80df8:	d13b      	bne.n	80e72 <sd_mmc_check+0x9de>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80dfa:	f89d 1020 	ldrb.w	r1, [sp, #32]
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
   80dfe:	f001 030f 	and.w	r3, r1, #15
   80e02:	2b0f      	cmp	r3, #15
   80e04:	d012      	beq.n	80e2c <sd_mmc_check+0x998>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80e06:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80e0a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
   80e0e:	ea50 2202 	orrs.w	r2, r0, r2, lsl #8
   80e12:	d12e      	bne.n	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
   80e14:	4941      	ldr	r1, [pc, #260]	; (80f1c <sd_mmc_check+0xa88>)
   80e16:	4788      	blx	r1
	sd_mmc_card->high_speed = 1;
   80e18:	4b39      	ldr	r3, [pc, #228]	; (80f00 <sd_mmc_check+0xa6c>)
   80e1a:	6818      	ldr	r0, [r3, #0]
   80e1c:	f04f 0201 	mov.w	r2, #1
   80e20:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
	sd_mmc_card->clock *= 2;
   80e24:	6801      	ldr	r1, [r0, #0]
   80e26:	ea4f 0341 	mov.w	r3, r1, lsl #1
   80e2a:	6003      	str	r3, [r0, #0]
					return false;
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
   80e2c:	f240 10a5 	movw	r0, #421	; 0x1a5
   80e30:	f2c0 0008 	movt	r0, #8
   80e34:	4780      	blx	r0
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80e36:	f640 3200 	movw	r2, #2816	; 0xb00
   80e3a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80e3e:	6811      	ldr	r1, [r2, #0]
   80e40:	7bcb      	ldrb	r3, [r1, #15]
   80e42:	f013 0f01 	tst.w	r3, #1
   80e46:	d006      	beq.n	80e56 <sd_mmc_check+0x9c2>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   80e48:	f241 1010 	movw	r0, #4368	; 0x1110
   80e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
   80e50:	4a2f      	ldr	r2, [pc, #188]	; (80f10 <sd_mmc_check+0xa7c>)
   80e52:	4790      	blx	r2
		sd_mmc_deselect_slot();
		return sd_mmc_err;
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   80e54:	b168      	cbz	r0, 80e72 <sd_mmc_check+0x9de>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   80e56:	f640 3000 	movw	r0, #2816	; 0xb00
   80e5a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80e5e:	6803      	ldr	r3, [r0, #0]
   80e60:	f04f 0100 	mov.w	r1, #0
   80e64:	7399      	strb	r1, [r3, #14]
		sd_mmc_deselect_slot();
   80e66:	f240 2229 	movw	r2, #553	; 0x229
   80e6a:	f2c0 0208 	movt	r2, #8
   80e6e:	4790      	blx	r2
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   80e70:	e07f      	b.n	80f72 <sd_mmc_check+0xade>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   80e72:	f640 3400 	movw	r4, #2816	; 0xb00
   80e76:	f2c2 0407 	movt	r4, #8199	; 0x2007
   80e7a:	6820      	ldr	r0, [r4, #0]
   80e7c:	f04f 0403 	mov.w	r4, #3
   80e80:	7384      	strb	r4, [r0, #14]
	sd_mmc_deselect_slot();
   80e82:	f240 2329 	movw	r3, #553	; 0x229
   80e86:	f2c0 0308 	movt	r3, #8
   80e8a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   80e8c:	e071      	b.n	80f72 <sd_mmc_check+0xade>
 */
static bool sd_cmd8(uint8_t * v2)
{
	uint32_t resp;

	*v2 = 0;
   80e8e:	f04f 0600 	mov.w	r6, #0
   80e92:	e001      	b.n	80e98 <sd_mmc_check+0xa04>
   80e94:	f04f 0600 	mov.w	r6, #0
static bool sdio_op_cond(void)
{
	uint32_t resp;

	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
   80e98:	f244 5005 	movw	r0, #17669	; 0x4505
   80e9c:	f04f 0100 	mov.w	r1, #0
   80ea0:	f644 131d 	movw	r3, #18717	; 0x491d
   80ea4:	f2c0 0308 	movt	r3, #8
   80ea8:	4798      	blx	r3
   80eaa:	2800      	cmp	r0, #0
   80eac:	f47f ab41 	bne.w	80532 <sd_mmc_check+0x9e>
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
		return false;
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80eb0:	f640 3200 	movw	r2, #2816	; 0xb00
   80eb4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80eb8:	6811      	ldr	r1, [r2, #0]
   80eba:	7bcb      	ldrb	r3, [r1, #15]
   80ebc:	f013 0f01 	tst.w	r3, #1
   80ec0:	f43f ad4a 	beq.w	80958 <sd_mmc_check+0x4c4>
   80ec4:	f7ff bb6d 	b.w	805a2 <sd_mmc_check+0x10e>
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   80ec8:	f640 3000 	movw	r0, #2816	; 0xb00
   80ecc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80ed0:	6801      	ldr	r1, [r0, #0]
   80ed2:	f04f 0302 	mov.w	r3, #2
   80ed6:	73cb      	strb	r3, [r1, #15]
static bool sd_mmc_mci_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
   80ed8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80edc:	f04f 0100 	mov.w	r1, #0
   80ee0:	f644 121d 	movw	r2, #18717	; 0x491d
   80ee4:	f2c0 0208 	movt	r2, #8
   80ee8:	4790      	blx	r2
   80eea:	2800      	cmp	r0, #0
   80eec:	f47f ab9e 	bne.w	8062c <sd_mmc_check+0x198>
   80ef0:	e7b0      	b.n	80e54 <sd_mmc_check+0x9c0>
   80ef2:	bf00      	nop
   80ef4:	000801d5 	.word	0x000801d5
   80ef8:	00084b19 	.word	0x00084b19
   80efc:	00084c31 	.word	0x00084c31
   80f00:	20070b00 	.word	0x20070b00
   80f04:	0008cfc0 	.word	0x0008cfc0
   80f08:	0008cf80 	.word	0x0008cf80
   80f0c:	00080249 	.word	0x00080249
   80f10:	0008491d 	.word	0x0008491d
   80f14:	000849ad 	.word	0x000849ad
   80f18:	00084945 	.word	0x00084945
   80f1c:	000848f9 	.word	0x000848f9
			sd_mmc_card->type = CARD_TYPE_MMC;
			return sd_mmc_mci_install_mmc();
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80f20:	f640 3000 	movw	r0, #2816	; 0xb00
   80f24:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80f28:	6801      	ldr	r1, [r0, #0]
   80f2a:	7bca      	ldrb	r2, [r1, #15]
   80f2c:	f012 0f01 	tst.w	r2, #1
   80f30:	f47f ad06 	bne.w	80940 <sd_mmc_check+0x4ac>
   80f34:	e510      	b.n	80958 <sd_mmc_check+0x4c4>
		return false;
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
   80f36:	f645 3002 	movw	r0, #23298	; 0x5b02
   80f3a:	f04f 0100 	mov.w	r1, #0
   80f3e:	4b38      	ldr	r3, [pc, #224]	; (81020 <sd_mmc_check+0xb8c>)
   80f40:	4798      	blx	r3
   80f42:	2800      	cmp	r0, #0
   80f44:	f47f aba9 	bne.w	8069a <sd_mmc_check+0x206>
   80f48:	e784      	b.n	80e54 <sd_mmc_check+0x9c0>
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
		return false;
	}

	if (!mmc_mci_op_cond()) {
		return false;
   80f4a:	f04f 0000 	mov.w	r0, #0
   80f4e:	e781      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
   80f50:	f04f 0000 	mov.w	r0, #0
   80f54:	e77e      	b.n	80e54 <sd_mmc_check+0x9c0>
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
   80f56:	4933      	ldr	r1, [pc, #204]	; (81024 <sd_mmc_check+0xb90>)
   80f58:	7808      	ldrb	r0, [r1, #0]
   80f5a:	4b33      	ldr	r3, [pc, #204]	; (81028 <sd_mmc_check+0xb94>)
   80f5c:	4798      	blx	r3
   80f5e:	2803      	cmp	r0, #3
   80f60:	f63f ac66 	bhi.w	80830 <sd_mmc_check+0x39c>
   80f64:	e48d      	b.n	80882 <sd_mmc_check+0x3ee>
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
   80f66:	f04f 0000 	mov.w	r0, #0
   80f6a:	e773      	b.n	80e54 <sd_mmc_check+0x9c0>
			sd_mmc_configure_slot();
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
   80f6c:	f04f 0000 	mov.w	r0, #0
   80f70:	e770      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
   80f72:	4620      	mov	r0, r4
   80f74:	b015      	add	sp, #84	; 0x54
   80f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80f7a:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80f7c:	2800      	cmp	r0, #0
   80f7e:	f6ff ab74 	blt.w	8066a <sd_mmc_check+0x1d6>
   80f82:	f241 0669 	movw	r6, #4201	; 0x1069
   80f86:	f106 36ff 	add.w	r6, r6, #4294967295
   80f8a:	f7ff bb65 	b.w	80658 <sd_mmc_check+0x1c4>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80f8e:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80f90:	2800      	cmp	r0, #0
   80f92:	f6ff ab6a 	blt.w	8066a <sd_mmc_check+0x1d6>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
			}
			break;
		}
		if (retry-- == 0) {
   80f96:	3e01      	subs	r6, #1
   80f98:	f47f ab5e 	bne.w	80658 <sd_mmc_check+0x1c4>
   80f9c:	e7d5      	b.n	80f4a <sd_mmc_check+0xab6>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   80f9e:	4649      	mov	r1, r9
   80fa0:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   80fa4:	f244 5029 	movw	r0, #17705	; 0x4529
   80fa8:	2e00      	cmp	r6, #0
   80faa:	bf08      	it	eq
   80fac:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   80fb0:	47a8      	blx	r5
   80fb2:	2800      	cmp	r0, #0
   80fb4:	d088      	beq.n	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80fb6:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   80fb8:	2800      	cmp	r0, #0
   80fba:	f6ff ab1e 	blt.w	805fa <sd_mmc_check+0x166>
   80fbe:	f640 0b35 	movw	fp, #2101	; 0x835
   80fc2:	f10b 3bff 	add.w	fp, fp, #4294967295
   80fc6:	f7ff bb02 	b.w	805ce <sd_mmc_check+0x13a>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   80fca:	4649      	mov	r1, r9
   80fcc:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   80fd0:	f244 5029 	movw	r0, #17705	; 0x4529
   80fd4:	2e00      	cmp	r6, #0
   80fd6:	bf08      	it	eq
   80fd8:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   80fdc:	47a8      	blx	r5
   80fde:	2800      	cmp	r0, #0
   80fe0:	f43f af72 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80fe4:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   80fe6:	2800      	cmp	r0, #0
   80fe8:	f6ff ab07 	blt.w	805fa <sd_mmc_check+0x166>
			if ((resp & OCR_CCS) != 0) {
				sd_mmc_card->type |= CARD_TYPE_HC;
			}
			break;
		}
		if (retry-- == 0) {
   80fec:	f1bb 0b01 	subs.w	fp, fp, #1
   80ff0:	f47f aaed 	bne.w	805ce <sd_mmc_check+0x13a>
   80ff4:	e768      	b.n	80ec8 <sd_mmc_check+0xa34>
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80ff6:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   80ff8:	1e01      	subs	r1, r0, #0
   80ffa:	f6ff aac5 	blt.w	80588 <sd_mmc_check+0xf4>
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   80ffe:	4638      	mov	r0, r7
   81000:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   81004:	47a8      	blx	r5
   81006:	2800      	cmp	r0, #0
   81008:	f43f af33 	beq.w	80e72 <sd_mmc_check+0x9de>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   8100c:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   8100e:	1e01      	subs	r1, r0, #0
   81010:	f6ff aaba 	blt.w	80588 <sd_mmc_check+0xf4>
			break;
		}
		if (cmd5_retry-- == 0) {
   81014:	f1b9 0902 	subs.w	r9, r9, #2
   81018:	f47f aaa1 	bne.w	8055e <sd_mmc_check+0xca>
   8101c:	e729      	b.n	80e72 <sd_mmc_check+0x9de>
   8101e:	bf00      	nop
   81020:	0008491d 	.word	0x0008491d
   81024:	20070b06 	.word	0x20070b06
   81028:	0008486d 	.word	0x0008486d

0008102c <sd_mmc_get_type>:
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
   8102c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   8102e:	f240 23d5 	movw	r3, #725	; 0x2d5
   81032:	f2c0 0308 	movt	r3, #8
   81036:	4798      	blx	r3
   81038:	b958      	cbnz	r0, 81052 <sd_mmc_get_type+0x26>
		return CARD_TYPE_UNKNOWN;
	}
	sd_mmc_deselect_slot();
   8103a:	f240 2029 	movw	r0, #553	; 0x229
   8103e:	f2c0 0008 	movt	r0, #8
   81042:	4780      	blx	r0
	return sd_mmc_card->type;
   81044:	f640 3100 	movw	r1, #2816	; 0xb00
   81048:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8104c:	680a      	ldr	r2, [r1, #0]
   8104e:	7bd0      	ldrb	r0, [r2, #15]
   81050:	bd08      	pop	{r3, pc}
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
   81052:	f04f 0000 	mov.w	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
   81056:	bd08      	pop	{r3, pc}

00081058 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   81058:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   8105a:	f240 23d5 	movw	r3, #725	; 0x2d5
   8105e:	f2c0 0308 	movt	r3, #8
   81062:	4798      	blx	r3
   81064:	b958      	cbnz	r0, 8107e <sd_mmc_get_capacity+0x26>
		return 0;
	}
	sd_mmc_deselect_slot();
   81066:	f240 2029 	movw	r0, #553	; 0x229
   8106a:	f2c0 0008 	movt	r0, #8
   8106e:	4780      	blx	r0
	return sd_mmc_card->capacity;
   81070:	f640 3100 	movw	r1, #2816	; 0xb00
   81074:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81078:	680a      	ldr	r2, [r1, #0]
   8107a:	6850      	ldr	r0, [r2, #4]
   8107c:	bd08      	pop	{r3, pc}
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
   8107e:	f04f 0000 	mov.w	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
   81082:	bd08      	pop	{r3, pc}

00081084 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
   81084:	f04f 0000 	mov.w	r0, #0
   81088:	4770      	bx	lr
   8108a:	bf00      	nop

0008108c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   8108c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81090:	b083      	sub	sp, #12
   81092:	468b      	mov	fp, r1
   81094:	4692      	mov	sl, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   81096:	f240 23d5 	movw	r3, #725	; 0x2d5
   8109a:	f2c0 0308 	movt	r3, #8
   8109e:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
   810a0:	4681      	mov	r9, r0
   810a2:	2800      	cmp	r0, #0
   810a4:	f040 8081 	bne.w	811aa <sd_mmc_init_read_blocks+0x11e>
   810a8:	f640 5841 	movw	r8, #3393	; 0xd41
   810ac:	f2c0 0803 	movt	r8, #3
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810b0:	f640 3600 	movw	r6, #2816	; 0xb00
   810b4:	f2c2 0607 	movt	r6, #8199	; 0x2007
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810b8:	f241 150d 	movw	r5, #4365	; 0x110d
   810bc:	f644 141d 	movw	r4, #18717	; 0x491d
   810c0:	f2c0 0408 	movt	r4, #8
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   810c4:	f644 1745 	movw	r7, #18757	; 0x4945
   810c8:	f2c0 0708 	movt	r7, #8
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810cc:	6830      	ldr	r0, [r6, #0]
   810ce:	8981      	ldrh	r1, [r0, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810d0:	4628      	mov	r0, r5
   810d2:	ea4f 4101 	mov.w	r1, r1, lsl #16
   810d6:	47a0      	blx	r4
   810d8:	2800      	cmp	r0, #0
   810da:	d046      	beq.n	8116a <sd_mmc_init_read_blocks+0xde>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   810dc:	47b8      	blx	r7
   810de:	f410 7f80 	tst.w	r0, #256	; 0x100
   810e2:	d14a      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
   810e4:	f108 38ff 	add.w	r8, r8, #4294967295
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810e8:	6832      	ldr	r2, [r6, #0]
   810ea:	8993      	ldrh	r3, [r2, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810ec:	4628      	mov	r0, r5
   810ee:	ea4f 4103 	mov.w	r1, r3, lsl #16
   810f2:	47a0      	blx	r4
   810f4:	2800      	cmp	r0, #0
   810f6:	d15c      	bne.n	811b2 <sd_mmc_init_read_blocks+0x126>
   810f8:	e037      	b.n	8116a <sd_mmc_init_read_blocks+0xde>
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   810fa:	ea4f 214b 	mov.w	r1, fp, lsl #9
   810fe:	e000      	b.n	81102 <sd_mmc_init_read_blocks+0x76>
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
   81100:	4659      	mov	r1, fp
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   81102:	f04f 0301 	mov.w	r3, #1
   81106:	9300      	str	r3, [sp, #0]
   81108:	f44f 7200 	mov.w	r2, #512	; 0x200
   8110c:	4653      	mov	r3, sl
   8110e:	f644 14ad 	movw	r4, #18861	; 0x49ad
   81112:	f2c0 0408 	movt	r4, #8
   81116:	47a0      	blx	r4
   81118:	b938      	cbnz	r0, 8112a <sd_mmc_init_read_blocks+0x9e>
		sd_mmc_deselect_slot();
   8111a:	f240 2129 	movw	r1, #553	; 0x229
   8111e:	f2c0 0108 	movt	r1, #8
   81122:	4788      	blx	r1
		return SD_MMC_ERR_COMM;
   81124:	f04f 0905 	mov.w	r9, #5
   81128:	e03f      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
   8112a:	f644 1045 	movw	r0, #18757	; 0x4945
   8112e:	f2c0 0008 	movt	r0, #8
   81132:	4780      	blx	r0
		if (resp & CARD_STATUS_ERR_RD_WR) {
   81134:	f04f 0100 	mov.w	r1, #0
   81138:	f2ce 4158 	movt	r1, #58456	; 0xe458
   8113c:	4001      	ands	r1, r0
   8113e:	b139      	cbz	r1, 81150 <sd_mmc_init_read_blocks+0xc4>
			sd_mmc_debug("%s: Read blocks %02d resp32 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
   81140:	f240 2029 	movw	r0, #553	; 0x229
   81144:	f2c0 0008 	movt	r0, #8
   81148:	4780      	blx	r0
			return SD_MMC_ERR_COMM;
   8114a:	f04f 0905 	mov.w	r9, #5
   8114e:	e02c      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   81150:	f640 3204 	movw	r2, #2820	; 0xb04
   81154:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81158:	f8a2 a000 	strh.w	sl, [r2]
	sd_mmc_nb_block_to_tranfer = nb_block;
   8115c:	f640 23fc 	movw	r3, #2812	; 0xafc
   81160:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81164:	f8a3 a000 	strh.w	sl, [r3]
	return SD_MMC_OK;
   81168:	e01f      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
		return sd_mmc_err;
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
		sd_mmc_deselect_slot();
   8116a:	f240 2229 	movw	r2, #553	; 0x229
   8116e:	f2c0 0208 	movt	r2, #8
   81172:	4790      	blx	r2
		return SD_MMC_ERR_COMM;
   81174:	f04f 0905 	mov.w	r9, #5
   81178:	e017      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   8117a:	f241 1011 	movw	r0, #4369	; 0x1111
   8117e:	f2c0 0008 	movt	r0, #8
   81182:	f241 1412 	movw	r4, #4370	; 0x1112
   81186:	f2c0 0410 	movt	r4, #16
   8118a:	f1ba 0f01 	cmp.w	sl, #1
   8118e:	bf88      	it	hi
   81190:	4620      	movhi	r0, r4
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   81192:	f640 3200 	movw	r2, #2816	; 0xb00
   81196:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8119a:	6813      	ldr	r3, [r2, #0]
   8119c:	7bd9      	ldrb	r1, [r3, #15]
   8119e:	f001 0408 	and.w	r4, r1, #8
   811a2:	b2e2      	uxtb	r2, r4
   811a4:	2a00      	cmp	r2, #0
   811a6:	d1ab      	bne.n	81100 <sd_mmc_init_read_blocks+0x74>
   811a8:	e7a7      	b.n	810fa <sd_mmc_init_read_blocks+0x6e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
   811aa:	4648      	mov	r0, r9
   811ac:	b003      	add	sp, #12
   811ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   811b2:	47b8      	blx	r7
   811b4:	f410 7f80 	tst.w	r0, #256	; 0x100
   811b8:	d1df      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   811ba:	6830      	ldr	r0, [r6, #0]
   811bc:	8981      	ldrh	r1, [r0, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   811be:	4628      	mov	r0, r5
   811c0:	ea4f 4101 	mov.w	r1, r1, lsl #16
   811c4:	47a0      	blx	r4
   811c6:	2800      	cmp	r0, #0
   811c8:	d0cf      	beq.n	8116a <sd_mmc_init_read_blocks+0xde>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   811ca:	47b8      	blx	r7
   811cc:	f410 7f80 	tst.w	r0, #256	; 0x100
   811d0:	d1d3      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
				break;
			}
		}
		if (nec_timeout-- == 0) {
   811d2:	f1b8 0802 	subs.w	r8, r8, #2
   811d6:	f47f af79 	bne.w	810cc <sd_mmc_init_read_blocks+0x40>
   811da:	e7c6      	b.n	8116a <sd_mmc_init_read_blocks+0xde>

000811dc <sd_mmc_start_read_blocks>:
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   811dc:	b510      	push	{r4, lr}
   811de:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   811e0:	f644 3319 	movw	r3, #19225	; 0x4b19
   811e4:	f2c0 0308 	movt	r3, #8
   811e8:	4798      	blx	r3
   811ea:	b948      	cbnz	r0, 81200 <sd_mmc_start_read_blocks+0x24>
		sd_mmc_nb_block_remaining = 0;
   811ec:	f640 3104 	movw	r1, #2820	; 0xb04
   811f0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   811f4:	f04f 0300 	mov.w	r3, #0
   811f8:	800b      	strh	r3, [r1, #0]
		return SD_MMC_ERR_COMM;
   811fa:	f04f 0005 	mov.w	r0, #5
   811fe:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
   81200:	f640 3004 	movw	r0, #2820	; 0xb04
   81204:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81208:	8802      	ldrh	r2, [r0, #0]
   8120a:	1b14      	subs	r4, r2, r4
   8120c:	8004      	strh	r4, [r0, #0]
	return SD_MMC_OK;
   8120e:	f04f 0000 	mov.w	r0, #0
}
   81212:	bd10      	pop	{r4, pc}

00081214 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(void)
{
   81214:	b508      	push	{r3, lr}
	if (!driver_wait_end_of_read_blocks()) {
   81216:	f644 4331 	movw	r3, #19505	; 0x4c31
   8121a:	f2c0 0308 	movt	r3, #8
   8121e:	4798      	blx	r3
   81220:	2800      	cmp	r0, #0
   81222:	d030      	beq.n	81286 <sd_mmc_wait_end_of_read_blocks+0x72>
		return SD_MMC_ERR_COMM;
	}
	if (sd_mmc_nb_block_remaining) {
   81224:	f640 3004 	movw	r0, #2820	; 0xb04
   81228:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8122c:	8801      	ldrh	r1, [r0, #0]
   8122e:	2900      	cmp	r1, #0
   81230:	d12c      	bne.n	8128c <sd_mmc_wait_end_of_read_blocks+0x78>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   81232:	f640 22fc 	movw	r2, #2812	; 0xafc
   81236:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8123a:	8813      	ldrh	r3, [r2, #0]
   8123c:	2b01      	cmp	r3, #1
   8123e:	d107      	bne.n	81250 <sd_mmc_wait_end_of_read_blocks+0x3c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   81240:	f240 2129 	movw	r1, #553	; 0x229
   81244:	f2c0 0108 	movt	r1, #8
   81248:	4788      	blx	r1
		return SD_MMC_OK;
   8124a:	f04f 0000 	mov.w	r0, #0
   8124e:	bd08      	pop	{r3, pc}
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   81250:	f243 100c 	movw	r0, #12556	; 0x310c
   81254:	f04f 0100 	mov.w	r1, #0
   81258:	f644 121d 	movw	r2, #18717	; 0x491d
   8125c:	f2c0 0208 	movt	r2, #8
   81260:	4790      	blx	r2
   81262:	b940      	cbnz	r0, 81276 <sd_mmc_wait_end_of_read_blocks+0x62>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   81264:	f243 100c 	movw	r0, #12556	; 0x310c
   81268:	f04f 0100 	mov.w	r1, #0
   8126c:	f644 131d 	movw	r3, #18717	; 0x491d
   81270:	f2c0 0308 	movt	r3, #8
   81274:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   81276:	f240 2029 	movw	r0, #553	; 0x229
   8127a:	f2c0 0008 	movt	r0, #8
   8127e:	4780      	blx	r0
	return SD_MMC_OK;
   81280:	f04f 0000 	mov.w	r0, #0
   81284:	bd08      	pop	{r3, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(void)
{
	if (!driver_wait_end_of_read_blocks()) {
		return SD_MMC_ERR_COMM;
   81286:	f04f 0005 	mov.w	r0, #5
   8128a:	bd08      	pop	{r3, pc}
	}
	if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
   8128c:	f04f 0000 	mov.w	r0, #0
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   81290:	bd08      	pop	{r3, pc}
   81292:	bf00      	nop

00081294 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   81294:	b5f0      	push	{r4, r5, r6, r7, lr}
   81296:	b083      	sub	sp, #12
   81298:	4606      	mov	r6, r0
   8129a:	460f      	mov	r7, r1
   8129c:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   8129e:	f240 24d5 	movw	r4, #725	; 0x2d5
   812a2:	f2c0 0408 	movt	r4, #8
   812a6:	47a0      	blx	r4
	if (sd_mmc_err != SD_MMC_OK) {
   812a8:	4604      	mov	r4, r0
   812aa:	2800      	cmp	r0, #0
   812ac:	d158      	bne.n	81360 <sd_mmc_init_write_blocks+0xcc>
		return sd_mmc_err;
	}
	if (sd_mmc_is_write_protected(slot)) {
   812ae:	4630      	mov	r0, r6
   812b0:	f241 0385 	movw	r3, #4229	; 0x1085
   812b4:	f2c0 0308 	movt	r3, #8
   812b8:	4798      	blx	r3
   812ba:	b138      	cbz	r0, 812cc <sd_mmc_init_write_blocks+0x38>
		sd_mmc_deselect_slot();
   812bc:	f240 2329 	movw	r3, #553	; 0x229
   812c0:	f2c0 0308 	movt	r3, #8
   812c4:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   812c6:	f04f 0407 	mov.w	r4, #7
   812ca:	e049      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   812cc:	f249 1018 	movw	r0, #37144	; 0x9118
   812d0:	f2c0 0008 	movt	r0, #8
   812d4:	f249 1119 	movw	r1, #37145	; 0x9119
   812d8:	f2c0 0110 	movt	r1, #16
   812dc:	2d01      	cmp	r5, #1
   812de:	bf88      	it	hi
   812e0:	4608      	movhi	r0, r1
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   812e2:	f640 3200 	movw	r2, #2816	; 0xb00
   812e6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   812ea:	6816      	ldr	r6, [r2, #0]
   812ec:	7bf3      	ldrb	r3, [r6, #15]
   812ee:	f003 0108 	and.w	r1, r3, #8
   812f2:	b2ca      	uxtb	r2, r1
   812f4:	b912      	cbnz	r2, 812fc <sd_mmc_init_write_blocks+0x68>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   812f6:	ea4f 2147 	mov.w	r1, r7, lsl #9
   812fa:	e000      	b.n	812fe <sd_mmc_init_write_blocks+0x6a>
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
   812fc:	4639      	mov	r1, r7
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   812fe:	f04f 0601 	mov.w	r6, #1
   81302:	9600      	str	r6, [sp, #0]
   81304:	f44f 7200 	mov.w	r2, #512	; 0x200
   81308:	462b      	mov	r3, r5
   8130a:	f644 16ad 	movw	r6, #18861	; 0x49ad
   8130e:	f2c0 0608 	movt	r6, #8
   81312:	47b0      	blx	r6
   81314:	b938      	cbnz	r0, 81326 <sd_mmc_init_write_blocks+0x92>
		sd_mmc_deselect_slot();
   81316:	f240 2029 	movw	r0, #553	; 0x229
   8131a:	f2c0 0008 	movt	r0, #8
   8131e:	4780      	blx	r0
		return SD_MMC_ERR_COMM;
   81320:	f04f 0405 	mov.w	r4, #5
   81324:	e01c      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
   81326:	f644 1045 	movw	r0, #18757	; 0x4945
   8132a:	f2c0 0008 	movt	r0, #8
   8132e:	4780      	blx	r0
		if (resp & CARD_STATUS_ERR_RD_WR) {
   81330:	f04f 0300 	mov.w	r3, #0
   81334:	f2ce 4358 	movt	r3, #58456	; 0xe458
   81338:	4003      	ands	r3, r0
   8133a:	b13b      	cbz	r3, 8134c <sd_mmc_init_write_blocks+0xb8>
			sd_mmc_debug("%s: Write blocks %02d r1 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
   8133c:	f240 2429 	movw	r4, #553	; 0x229
   81340:	f2c0 0408 	movt	r4, #8
   81344:	47a0      	blx	r4
			return SD_MMC_ERR_COMM;
   81346:	f04f 0405 	mov.w	r4, #5
   8134a:	e009      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   8134c:	f640 3104 	movw	r1, #2820	; 0xb04
   81350:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81354:	800d      	strh	r5, [r1, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   81356:	f640 22fc 	movw	r2, #2812	; 0xafc
   8135a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8135e:	8015      	strh	r5, [r2, #0]
	return SD_MMC_OK;
}
   81360:	4620      	mov	r0, r4
   81362:	b003      	add	sp, #12
   81364:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81366:	bf00      	nop

00081368 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   81368:	b510      	push	{r4, lr}
   8136a:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   8136c:	f644 43a9 	movw	r3, #19625	; 0x4ca9
   81370:	f2c0 0308 	movt	r3, #8
   81374:	4798      	blx	r3
   81376:	b948      	cbnz	r0, 8138c <sd_mmc_start_write_blocks+0x24>
		sd_mmc_nb_block_remaining = 0;
   81378:	f640 3104 	movw	r1, #2820	; 0xb04
   8137c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81380:	f04f 0300 	mov.w	r3, #0
   81384:	800b      	strh	r3, [r1, #0]
		return SD_MMC_ERR_COMM;
   81386:	f04f 0005 	mov.w	r0, #5
   8138a:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
   8138c:	f640 3004 	movw	r0, #2820	; 0xb04
   81390:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81394:	8802      	ldrh	r2, [r0, #0]
   81396:	1b14      	subs	r4, r2, r4
   81398:	8004      	strh	r4, [r0, #0]
	return SD_MMC_OK;
   8139a:	f04f 0000 	mov.w	r0, #0
}
   8139e:	bd10      	pop	{r4, pc}

000813a0 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(void)
{
   813a0:	b508      	push	{r3, lr}
	if (!driver_wait_end_of_write_blocks()) {
   813a2:	f644 53a1 	movw	r3, #19873	; 0x4da1
   813a6:	f2c0 0308 	movt	r3, #8
   813aa:	4798      	blx	r3
   813ac:	2800      	cmp	r0, #0
   813ae:	d02f      	beq.n	81410 <sd_mmc_wait_end_of_write_blocks+0x70>
		return SD_MMC_ERR_COMM;
	}
	if (sd_mmc_nb_block_remaining) {
   813b0:	f640 3004 	movw	r0, #2820	; 0xb04
   813b4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   813b8:	8801      	ldrh	r1, [r0, #0]
   813ba:	2900      	cmp	r1, #0
   813bc:	d12b      	bne.n	81416 <sd_mmc_wait_end_of_write_blocks+0x76>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   813be:	f640 22fc 	movw	r2, #2812	; 0xafc
   813c2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   813c6:	8813      	ldrh	r3, [r2, #0]
   813c8:	2b01      	cmp	r3, #1
   813ca:	d107      	bne.n	813dc <sd_mmc_wait_end_of_write_blocks+0x3c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   813cc:	f240 2329 	movw	r3, #553	; 0x229
   813d0:	f2c0 0308 	movt	r3, #8
   813d4:	4798      	blx	r3
		return SD_MMC_OK;
   813d6:	f04f 0000 	mov.w	r0, #0
   813da:	bd08      	pop	{r3, pc}
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   813dc:	f243 100c 	movw	r0, #12556	; 0x310c
   813e0:	f04f 0100 	mov.w	r1, #0
   813e4:	f644 121d 	movw	r2, #18717	; 0x491d
   813e8:	f2c0 0208 	movt	r2, #8
   813ec:	4790      	blx	r2
   813ee:	b938      	cbnz	r0, 81400 <sd_mmc_wait_end_of_write_blocks+0x60>
			sd_mmc_deselect_slot();
   813f0:	f240 2129 	movw	r1, #553	; 0x229
   813f4:	f2c0 0108 	movt	r1, #8
   813f8:	4788      	blx	r1
			return SD_MMC_ERR_COMM;
   813fa:	f04f 0005 	mov.w	r0, #5
   813fe:	bd08      	pop	{r3, pc}
		}
	}
	sd_mmc_deselect_slot();
   81400:	f240 2029 	movw	r0, #553	; 0x229
   81404:	f2c0 0008 	movt	r0, #8
   81408:	4780      	blx	r0
	return SD_MMC_OK;
   8140a:	f04f 0000 	mov.w	r0, #0
   8140e:	bd08      	pop	{r3, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(void)
{
	if (!driver_wait_end_of_write_blocks()) {
		return SD_MMC_ERR_COMM;
   81410:	f04f 0005 	mov.w	r0, #5
   81414:	bd08      	pop	{r3, pc}
	}
	if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
   81416:	f04f 0000 	mov.w	r0, #0
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   8141a:	bd08      	pop	{r3, pc}

0008141c <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   8141c:	b4f0      	push	{r4, r5, r6, r7}
   8141e:	b08c      	sub	sp, #48	; 0x30
   81420:	4606      	mov	r6, r0
   81422:	460f      	mov	r7, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   81424:	ac01      	add	r4, sp, #4
   81426:	f24d 051c 	movw	r5, #53276	; 0xd01c
   8142a:	f2c0 0508 	movt	r5, #8
   8142e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81436:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   8143a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8143e:	9b01      	ldr	r3, [sp, #4]
   81440:	fbb7 f0f3 	udiv	r0, r7, r3
   81444:	fbb0 f1f6 	udiv	r1, r0, r6
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81448:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8144c:	d952      	bls.n	814f4 <pwm_clocks_generate+0xd8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8144e:	9902      	ldr	r1, [sp, #8]
   81450:	fbb7 f2f1 	udiv	r2, r7, r1
   81454:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81458:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8145c:	d94f      	bls.n	814fe <pwm_clocks_generate+0xe2>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8145e:	9b03      	ldr	r3, [sp, #12]
   81460:	fbb7 f0f3 	udiv	r0, r7, r3
   81464:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81468:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8146c:	d94a      	bls.n	81504 <pwm_clocks_generate+0xe8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8146e:	9904      	ldr	r1, [sp, #16]
   81470:	fbb7 f2f1 	udiv	r2, r7, r1
   81474:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81478:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8147c:	d945      	bls.n	8150a <pwm_clocks_generate+0xee>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8147e:	9b05      	ldr	r3, [sp, #20]
   81480:	fbb7 f0f3 	udiv	r0, r7, r3
   81484:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81488:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8148c:	d940      	bls.n	81510 <pwm_clocks_generate+0xf4>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8148e:	9906      	ldr	r1, [sp, #24]
   81490:	fbb7 f2f1 	udiv	r2, r7, r1
   81494:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81498:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8149c:	d93b      	bls.n	81516 <pwm_clocks_generate+0xfa>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8149e:	9b07      	ldr	r3, [sp, #28]
   814a0:	fbb7 f0f3 	udiv	r0, r7, r3
   814a4:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814a8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814ac:	d936      	bls.n	8151c <pwm_clocks_generate+0x100>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814ae:	9908      	ldr	r1, [sp, #32]
   814b0:	fbb7 f2f1 	udiv	r2, r7, r1
   814b4:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814b8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814bc:	d931      	bls.n	81522 <pwm_clocks_generate+0x106>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   814c0:	fbb7 f0f3 	udiv	r0, r7, r3
   814c4:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814c8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814cc:	d92c      	bls.n	81528 <pwm_clocks_generate+0x10c>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814ce:	990a      	ldr	r1, [sp, #40]	; 0x28
   814d0:	fbb7 f2f1 	udiv	r2, r7, r1
   814d4:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814d8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814dc:	d927      	bls.n	8152e <pwm_clocks_generate+0x112>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   814e0:	fbb7 f0f3 	udiv	r0, r7, r3
   814e4:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814e8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814ec:	d922      	bls.n	81534 <pwm_clocks_generate+0x118>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   814ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
   814f2:	e022      	b.n	8153a <pwm_clocks_generate+0x11e>
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   814f4:	f04f 0200 	mov.w	r2, #0
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	}

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
   814f8:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
   814fc:	e01d      	b.n	8153a <pwm_clocks_generate+0x11e>
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
		ul_pre++;
   814fe:	f04f 0201 	mov.w	r2, #1
   81502:	e7f9      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81504:	f04f 0202 	mov.w	r2, #2
   81508:	e7f6      	b.n	814f8 <pwm_clocks_generate+0xdc>
   8150a:	f04f 0203 	mov.w	r2, #3
   8150e:	e7f3      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81510:	f04f 0204 	mov.w	r2, #4
   81514:	e7f0      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81516:	f04f 0205 	mov.w	r2, #5
   8151a:	e7ed      	b.n	814f8 <pwm_clocks_generate+0xdc>
   8151c:	f04f 0206 	mov.w	r2, #6
   81520:	e7ea      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81522:	f04f 0207 	mov.w	r2, #7
   81526:	e7e7      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81528:	f04f 0208 	mov.w	r2, #8
   8152c:	e7e4      	b.n	814f8 <pwm_clocks_generate+0xdc>
   8152e:	f04f 0209 	mov.w	r2, #9
   81532:	e7e1      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81534:	f04f 020a 	mov.w	r2, #10
   81538:	e7de      	b.n	814f8 <pwm_clocks_generate+0xdc>
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
	}
}
   8153a:	b00c      	add	sp, #48	; 0x30
   8153c:	bcf0      	pop	{r4, r5, r6, r7}
   8153e:	4770      	bx	lr

00081540 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   81540:	b570      	push	{r4, r5, r6, lr}
   81542:	4606      	mov	r6, r0
   81544:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   81546:	6808      	ldr	r0, [r1, #0]
   81548:	b158      	cbz	r0, 81562 <pwm_init+0x22>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   8154a:	6889      	ldr	r1, [r1, #8]
   8154c:	f241 431d 	movw	r3, #5149	; 0x141d
   81550:	f2c0 0308 	movt	r3, #8
   81554:	4798      	blx	r3
		if (result == PWM_INVALID_ARGUMENT) {
   81556:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8155a:	4288      	cmp	r0, r1
   8155c:	d014      	beq.n	81588 <pwm_init+0x48>
			return result;
		}

		clock = result;
   8155e:	4605      	mov	r5, r0
   81560:	e001      	b.n	81566 <pwm_init+0x26>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   81562:	f04f 0500 	mov.w	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   81566:	6860      	ldr	r0, [r4, #4]
   81568:	b158      	cbz	r0, 81582 <pwm_init+0x42>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   8156a:	68a1      	ldr	r1, [r4, #8]
   8156c:	f241 421d 	movw	r2, #5149	; 0x141d
   81570:	f2c0 0208 	movt	r2, #8
   81574:	4790      	blx	r2

		if (result == PWM_INVALID_ARGUMENT) {
   81576:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8157a:	4298      	cmp	r0, r3
   8157c:	d004      	beq.n	81588 <pwm_init+0x48>
			return result;
		}

		clock |= (result << 16);
   8157e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   81582:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   81584:	f04f 0000 	mov.w	r0, #0
}
   81588:	bd70      	pop	{r4, r5, r6, pc}
   8158a:	bf00      	nop

0008158c <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   8158c:	b470      	push	{r4, r5, r6}
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
   8158e:	680b      	ldr	r3, [r1, #0]
	uint32_t channel = (1 << ch_num);
   81590:	f04f 0201 	mov.w	r2, #1
   81594:	fa02 f203 	lsl.w	r2, r2, r3

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81598:	8a8e      	ldrh	r6, [r1, #20]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   8159a:	684c      	ldr	r4, [r1, #4]
   8159c:	f004 050f 	and.w	r5, r4, #15
   815a0:	432e      	orrs	r6, r5
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   815a2:	890c      	ldrh	r4, [r1, #8]
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   815a4:	4326      	orrs	r6, r4
   815a6:	7a8d      	ldrb	r5, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   815a8:	ea46 2645 	orr.w	r6, r6, r5, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   815ac:	7d8c      	ldrb	r4, [r1, #22]
   815ae:	ea46 4504 	orr.w	r5, r6, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   815b2:	7dce      	ldrb	r6, [r1, #23]
   815b4:	ea45 4546 	orr.w	r5, r5, r6, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   815b8:	7e0c      	ldrb	r4, [r1, #24]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   815ba:	ea45 4684 	orr.w	r6, r5, r4, lsl #18
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = ch_mode_reg;
   815be:	f103 0510 	add.w	r5, r3, #16
   815c2:	ea4f 1445 	mov.w	r4, r5, lsl #5
   815c6:	1905      	adds	r5, r0, r4
   815c8:	5106      	str	r6, [r0, r4]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   815ca:	68cc      	ldr	r4, [r1, #12]
   815cc:	606c      	str	r4, [r5, #4]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   815ce:	690c      	ldr	r4, [r1, #16]
   815d0:	eb00 1543 	add.w	r5, r0, r3, lsl #5
   815d4:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   815d8:	7d8c      	ldrb	r4, [r1, #22]
   815da:	b13c      	cbz	r4, 815ec <pwm_channel_init+0x60>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   815dc:	8b8d      	ldrh	r5, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   815de:	8b4c      	ldrh	r4, [r1, #26]
   815e0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   815e4:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   815e8:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
   815ec:	7fcd      	ldrb	r5, [r1, #31]
   815ee:	fa05 f503 	lsl.w	r5, r5, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
   815f2:	7f8c      	ldrb	r4, [r1, #30]
   815f4:	fa04 f403 	lsl.w	r4, r4, r3
   815f8:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
   815fc:	6485      	str	r5, [r0, #72]	; 0x48
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
   815fe:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   81602:	fa05 f503 	lsl.w	r5, r5, r3
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
   81606:	f891 4020 	ldrb.w	r4, [r1, #32]
   8160a:	fa04 f403 	lsl.w	r4, r4, r3
   8160e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
   81612:	6444      	str	r4, [r0, #68]	; 0x44
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
					ch_num) << 16);

	/* Sync Channels Mode Register */
	if (p_channel->b_sync_ch) {
   81614:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   81618:	b11c      	cbz	r4, 81622 <pwm_channel_init+0x96>
		p_pwm->PWM_SCM |= channel;
   8161a:	6a04      	ldr	r4, [r0, #32]
   8161c:	4314      	orrs	r4, r2
   8161e:	6204      	str	r4, [r0, #32]
   81620:	e003      	b.n	8162a <pwm_channel_init+0x9e>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   81622:	6a04      	ldr	r4, [r0, #32]
   81624:	ea24 0402 	bic.w	r4, r4, r2
   81628:	6204      	str	r4, [r0, #32]
		p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
	} else {
		p_pwm->PWM_FPV1 &= (!((0x01 << ch_num) << 16));
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   8162a:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   8162e:	2c01      	cmp	r4, #1
   81630:	d103      	bne.n	8163a <pwm_channel_init+0xae>
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   81632:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81634:	4314      	orrs	r4, r2
   81636:	6684      	str	r4, [r0, #104]	; 0x68
   81638:	e006      	b.n	81648 <pwm_channel_init+0xbc>
	} else {
		p_pwm->PWM_FPV &= (!(0x01 << ch_num));
   8163a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8163c:	2a00      	cmp	r2, #0
   8163e:	bf14      	ite	ne
   81640:	2400      	movne	r4, #0
   81642:	f004 0401 	andeq.w	r4, r4, #1
   81646:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   81648:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   8164c:	2c01      	cmp	r4, #1
   8164e:	d104      	bne.n	8165a <pwm_channel_init+0xce>
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   81650:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81652:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
   81656:	6682      	str	r2, [r0, #104]	; 0x68
   81658:	e006      	b.n	81668 <pwm_channel_init+0xdc>
	} else {
		p_pwm->PWM_FPV &= (!((0x01 << ch_num) << 16));
   8165a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8165c:	0412      	lsls	r2, r2, #16
   8165e:	bf14      	ite	ne
   81660:	2200      	movne	r2, #0
   81662:	f004 0201 	andeq.w	r2, r4, #1
   81666:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   81668:	2b03      	cmp	r3, #3
   8166a:	d80f      	bhi.n	8168c <pwm_channel_init+0x100>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   8166c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   8166e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   81672:	f04f 02ff 	mov.w	r2, #255	; 0xff
   81676:	fa02 f203 	lsl.w	r2, r2, r3
   8167a:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   8167e:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   81682:	fa01 f303 	lsl.w	r3, r1, r3
   81686:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE1 = fault_enable_reg;
   81688:	66c2      	str	r2, [r0, #108]	; 0x6c
   8168a:	e010      	b.n	816ae <pwm_channel_init+0x122>
	} else {
		ch_num -= 4;
   8168c:	f1a3 0304 	sub.w	r3, r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   81690:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   81692:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   81696:	f04f 02ff 	mov.w	r2, #255	; 0xff
   8169a:	fa02 f203 	lsl.w	r2, r2, r3
   8169e:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   816a2:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   816a6:	fa01 f303 	lsl.w	r3, r1, r3
   816aa:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE2 = fault_enable_reg;
   816ac:	6702      	str	r2, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   816ae:	f04f 0000 	mov.w	r0, #0
   816b2:	bc70      	pop	{r4, r5, r6}
   816b4:	4770      	bx	lr
   816b6:	bf00      	nop

000816b8 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   816b8:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   816ba:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   816bc:	690b      	ldr	r3, [r1, #16]
   816be:	4293      	cmp	r3, r2
   816c0:	d307      	bcc.n	816d2 <pwm_channel_update_duty+0x1a>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   816c2:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   816c4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   816c8:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   816cc:	f04f 0000 	mov.w	r0, #0
   816d0:	e001      	b.n	816d6 <pwm_channel_update_duty+0x1e>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   816d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   816d6:	bc10      	pop	{r4}
   816d8:	4770      	bx	lr
   816da:	bf00      	nop

000816dc <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   816dc:	f04f 0301 	mov.w	r3, #1
   816e0:	fa03 f101 	lsl.w	r1, r3, r1
   816e4:	6041      	str	r1, [r0, #4]
   816e6:	4770      	bx	lr

000816e8 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   816e8:	f04f 0301 	mov.w	r3, #1
   816ec:	fa03 f101 	lsl.w	r1, r3, r1
   816f0:	6081      	str	r1, [r0, #8]
   816f2:	4770      	bx	lr

000816f4 <pwm_channel_disable_interrupt>:
#if (SAM3N || SAM4N)
	p_pwm->PWM_IDR = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IDR1 = (1 << ul_event) | (1 << (ul_fault + 16));
   816f4:	f102 0210 	add.w	r2, r2, #16
   816f8:	f04f 0301 	mov.w	r3, #1
   816fc:	fa03 f202 	lsl.w	r2, r3, r2
   81700:	fa03 f101 	lsl.w	r1, r3, r1
   81704:	430a      	orrs	r2, r1
   81706:	6142      	str	r2, [r0, #20]
   81708:	4770      	bx	lr
   8170a:	bf00      	nop

0008170c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   8170c:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA)
	if (p_spi == SPI0) {
   8170e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81712:	f2c4 0300 	movt	r3, #16384	; 0x4000
   81716:	4298      	cmp	r0, r3
   81718:	d106      	bne.n	81728 <spi_enable_clock+0x1c>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8171a:	f04f 0018 	mov.w	r0, #24
   8171e:	f647 11bd 	movw	r1, #31165	; 0x79bd
   81722:	f2c0 0108 	movt	r1, #8
   81726:	4788      	blx	r1
   81728:	bd08      	pop	{r3, pc}
   8172a:	bf00      	nop

0008172c <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
   8172c:	6843      	ldr	r3, [r0, #4]
   8172e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   81732:	6042      	str	r2, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
   81734:	6843      	ldr	r3, [r0, #4]
   81736:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
   8173a:	6041      	str	r1, [r0, #4]
   8173c:	4770      	bx	lr
   8173e:	bf00      	nop

00081740 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   81740:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   81742:	6903      	ldr	r3, [r0, #16]
   81744:	f013 0f01 	tst.w	r3, #1
   81748:	d020      	beq.n	8178c <spi_read+0x4c>
   8174a:	e00a      	b.n	81762 <spi_read+0x22>
   8174c:	f103 33ff 	add.w	r3, r3, #4294967295
   81750:	6904      	ldr	r4, [r0, #16]
   81752:	f014 0f01 	tst.w	r4, #1
   81756:	d01e      	beq.n	81796 <spi_read+0x56>
   81758:	e003      	b.n	81762 <spi_read+0x22>
   8175a:	6904      	ldr	r4, [r0, #16]
   8175c:	f014 0f01 	tst.w	r4, #1
   81760:	d0f4      	beq.n	8174c <spi_read+0xc>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
   81762:	6883      	ldr	r3, [r0, #8]
   81764:	f640 3408 	movw	r4, #2824	; 0xb08
   81768:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8176c:	6023      	str	r3, [r4, #0]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
   8176e:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
   81770:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   81774:	bf1c      	itt	ne
   81776:	f3c3 4003 	ubfxne	r0, r3, #16, #4
   8177a:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   8177c:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
   8177e:	f04f 0000 	mov.w	r0, #0
   81782:	e001      	b.n	81788 <spi_read+0x48>
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
   81784:	f04f 0001 	mov.w	r0, #1
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);

	return SPI_OK;
}
   81788:	bc10      	pop	{r4}
   8178a:	4770      	bx	lr
   8178c:	f643 2499 	movw	r4, #15001	; 0x3a99
   81790:	f104 33ff 	add.w	r3, r4, #4294967295
   81794:	e7e1      	b.n	8175a <spi_read+0x1a>
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
		if (!timeout--) {
   81796:	3b01      	subs	r3, #1
   81798:	d1df      	bne.n	8175a <spi_read+0x1a>
   8179a:	e7f3      	b.n	81784 <spi_read+0x44>

0008179c <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   8179c:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   8179e:	6904      	ldr	r4, [r0, #16]
   817a0:	f014 0f02 	tst.w	r4, #2
   817a4:	d01f      	beq.n	817e6 <spi_write+0x4a>
   817a6:	e00a      	b.n	817be <spi_write+0x22>
   817a8:	f104 34ff 	add.w	r4, r4, #4294967295
   817ac:	6905      	ldr	r5, [r0, #16]
   817ae:	f015 0f02 	tst.w	r5, #2
   817b2:	d01d      	beq.n	817f0 <spi_write+0x54>
   817b4:	e003      	b.n	817be <spi_write+0x22>
   817b6:	6905      	ldr	r5, [r0, #16]
   817b8:	f015 0f02 	tst.w	r5, #2
   817bc:	d0f4      	beq.n	817a8 <spi_write+0xc>
   817be:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   817c0:	f014 0f02 	tst.w	r4, #2
   817c4:	d007      	beq.n	817d6 <spi_write+0x3a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   817c6:	ea4f 4202 	mov.w	r2, r2, lsl #16
   817ca:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   817ce:	4311      	orrs	r1, r2
		if (uc_last) {
   817d0:	b10b      	cbz	r3, 817d6 <spi_write+0x3a>
			value |= SPI_TDR_LASTXFER;
   817d2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   817d6:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   817d8:	f04f 0000 	mov.w	r0, #0
   817dc:	e001      	b.n	817e2 <spi_write+0x46>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
   817de:	f04f 0001 	mov.w	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
   817e2:	bc30      	pop	{r4, r5}
   817e4:	4770      	bx	lr
   817e6:	f643 2599 	movw	r5, #15001	; 0x3a99
   817ea:	f105 34ff 	add.w	r4, r5, #4294967295
   817ee:	e7e2      	b.n	817b6 <spi_write+0x1a>
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
   817f0:	3c01      	subs	r4, #1
   817f2:	d1e0      	bne.n	817b6 <spi_write+0x1a>
   817f4:	e7f3      	b.n	817de <spi_write+0x42>
   817f6:	bf00      	nop

000817f8 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   817f8:	b142      	cbz	r2, 8180c <spi_set_clock_polarity+0x14>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   817fa:	f101 010c 	add.w	r1, r1, #12
   817fe:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   81802:	f043 0201 	orr.w	r2, r3, #1
   81806:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   8180a:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   8180c:	f101 010c 	add.w	r1, r1, #12
   81810:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   81814:	f023 0201 	bic.w	r2, r3, #1
   81818:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   8181c:	4770      	bx	lr
   8181e:	bf00      	nop

00081820 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   81820:	b142      	cbz	r2, 81834 <spi_set_clock_phase+0x14>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   81822:	f101 010c 	add.w	r1, r1, #12
   81826:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   8182a:	f043 0202 	orr.w	r2, r3, #2
   8182e:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   81832:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   81834:	f101 010c 	add.w	r1, r1, #12
   81838:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   8183c:	f023 0202 	bic.w	r2, r3, #2
   81840:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   81844:	4770      	bx	lr
   81846:	bf00      	nop

00081848 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
   81848:	2a04      	cmp	r2, #4
   8184a:	d10e      	bne.n	8186a <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   8184c:	f101 010c 	add.w	r1, r1, #12
   81850:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   81854:	f023 0208 	bic.w	r2, r3, #8
   81858:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
   8185c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   81860:	f043 0204 	orr.w	r2, r3, #4
   81864:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   81868:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
   8186a:	b972      	cbnz	r2, 8188a <spi_configure_cs_behavior+0x42>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   8186c:	f101 010c 	add.w	r1, r1, #12
   81870:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   81874:	f023 0208 	bic.w	r2, r3, #8
   81878:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
   8187c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   81880:	f023 0204 	bic.w	r2, r3, #4
   81884:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   81888:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
   8188a:	2a08      	cmp	r2, #8
   8188c:	d107      	bne.n	8189e <spi_configure_cs_behavior+0x56>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
   8188e:	f101 010c 	add.w	r1, r1, #12
   81892:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   81896:	f043 0208 	orr.w	r2, r3, #8
   8189a:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   8189e:	4770      	bx	lr

000818a0 <spi_set_bits_per_transfer>:
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   818a0:	f101 010c 	add.w	r1, r1, #12
   818a4:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   818a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
   818ac:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   818b0:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   818b4:	431a      	orrs	r2, r3
   818b6:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   818ba:	4770      	bx	lr

000818bc <spi_set_baudrate_div>:
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   818bc:	f101 010c 	add.w	r1, r1, #12
   818c0:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   818c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   818c8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   818cc:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   818d0:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   818d4:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   818d8:	4770      	bx	lr
   818da:	bf00      	nop

000818dc <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   818dc:	b410      	push	{r4}
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   818de:	f101 010c 	add.w	r1, r1, #12
   818e2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   818e6:	b2a4      	uxth	r4, r4
   818e8:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   818ec:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
   818f0:	ea4f 6303 	mov.w	r3, r3, lsl #24
   818f4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   818f8:	4314      	orrs	r4, r2
   818fa:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   818fe:	bc10      	pop	{r4}
   81900:	4770      	bx	lr
   81902:	bf00      	nop

00081904 <twi_enable_master_mode>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   81904:	f04f 0308 	mov.w	r3, #8
   81908:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   8190a:	f04f 0120 	mov.w	r1, #32
   8190e:	6001      	str	r1, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   81910:	f04f 0204 	mov.w	r2, #4
   81914:	6002      	str	r2, [r0, #0]
   81916:	4770      	bx	lr

00081918 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   81918:	f44f 53d4 	mov.w	r3, #6784	; 0x1a80
   8191c:	f2c0 0306 	movt	r3, #6
   81920:	4299      	cmp	r1, r3
   81922:	d845      	bhi.n	819b0 <twi_set_speed+0x98>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   81924:	ea4f 0141 	mov.w	r1, r1, lsl #1
   81928:	fbb2 f2f1 	udiv	r2, r2, r1
   8192c:	f1a2 0204 	sub.w	r2, r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81930:	2aff      	cmp	r2, #255	; 0xff
   81932:	d92e      	bls.n	81992 <twi_set_speed+0x7a>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   81934:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81938:	2aff      	cmp	r2, #255	; 0xff
   8193a:	d918      	bls.n	8196e <twi_set_speed+0x56>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   8193c:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81940:	2aff      	cmp	r2, #255	; 0xff
   81942:	d917      	bls.n	81974 <twi_set_speed+0x5c>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   81944:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81948:	2aff      	cmp	r2, #255	; 0xff
   8194a:	d916      	bls.n	8197a <twi_set_speed+0x62>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   8194c:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81950:	2aff      	cmp	r2, #255	; 0xff
   81952:	d915      	bls.n	81980 <twi_set_speed+0x68>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   81954:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81958:	2aff      	cmp	r2, #255	; 0xff
   8195a:	d914      	bls.n	81986 <twi_set_speed+0x6e>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   8195c:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81960:	2aff      	cmp	r2, #255	; 0xff
   81962:	d913      	bls.n	8198c <twi_set_speed+0x74>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   81964:	ea4f 0252 	mov.w	r2, r2, lsr #1
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
   81968:	f04f 0307 	mov.w	r3, #7
   8196c:	e013      	b.n	81996 <twi_set_speed+0x7e>
   8196e:	f04f 0301 	mov.w	r3, #1
   81972:	e010      	b.n	81996 <twi_set_speed+0x7e>
   81974:	f04f 0302 	mov.w	r3, #2
   81978:	e00d      	b.n	81996 <twi_set_speed+0x7e>
   8197a:	f04f 0303 	mov.w	r3, #3
   8197e:	e00a      	b.n	81996 <twi_set_speed+0x7e>
   81980:	f04f 0304 	mov.w	r3, #4
   81984:	e007      	b.n	81996 <twi_set_speed+0x7e>
   81986:	f04f 0305 	mov.w	r3, #5
   8198a:	e004      	b.n	81996 <twi_set_speed+0x7e>
   8198c:	f04f 0306 	mov.w	r3, #6
   81990:	e001      	b.n	81996 <twi_set_speed+0x7e>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   81992:	f04f 0300 	mov.w	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   81996:	ea4f 6102 	mov.w	r1, r2, lsl #24
			TWI_CWGR_CKDIV(ckdiv);
   8199a:	ea4f 4303 	mov.w	r3, r3, lsl #16
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   8199e:	ea43 4111 	orr.w	r1, r3, r1, lsr #16
   819a2:	b2d2      	uxtb	r2, r2
   819a4:	ea41 0302 	orr.w	r3, r1, r2
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   819a8:	6103      	str	r3, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   819aa:	f04f 0000 	mov.w	r0, #0
   819ae:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   819b0:	f04f 0001 	mov.w	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   819b4:	4770      	bx	lr
   819b6:	bf00      	nop

000819b8 <twi_reset>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   819b8:	f04f 0380 	mov.w	r3, #128	; 0x80
   819bc:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   819be:	6b03      	ldr	r3, [r0, #48]	; 0x30
   819c0:	4770      	bx	lr
   819c2:	bf00      	nop

000819c4 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   819c4:	b538      	push	{r3, r4, r5, lr}
   819c6:	4604      	mov	r4, r0
   819c8:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   819ca:	f04f 33ff 	mov.w	r3, #4294967295
   819ce:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   819d0:	6a03      	ldr	r3, [r0, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   819d2:	f641 11b9 	movw	r1, #6585	; 0x19b9
   819d6:	f2c0 0108 	movt	r1, #8
   819da:	4788      	blx	r1

	twi_enable_master_mode(p_twi);
   819dc:	4620      	mov	r0, r4
   819de:	f641 1205 	movw	r2, #6405	; 0x1905
   819e2:	f2c0 0208 	movt	r2, #8
   819e6:	4790      	blx	r2

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   819e8:	4620      	mov	r0, r4
   819ea:	6869      	ldr	r1, [r5, #4]
   819ec:	682a      	ldr	r2, [r5, #0]
   819ee:	f641 1319 	movw	r3, #6425	; 0x1919
   819f2:	f2c0 0308 	movt	r3, #8
   819f6:	4798      	blx	r3
   819f8:	2801      	cmp	r0, #1
   819fa:	bf14      	ite	ne
   819fc:	2000      	movne	r0, #0
   819fe:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   81a00:	7a69      	ldrb	r1, [r5, #9]
   81a02:	2901      	cmp	r1, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   81a04:	bf04      	itt	eq
   81a06:	2140      	moveq	r1, #64	; 0x40
   81a08:	6021      	streq	r1, [r4, #0]
	}

	return status;
}
   81a0a:	bd38      	pop	{r3, r4, r5, pc}

00081a0c <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
   81a0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81a10:	6043      	str	r3, [r0, #4]
   81a12:	4770      	bx	lr

00081a14 <init_board>:
 #include <asf.h>
 #include "init.h"
 
 
 void init_board(void)
 {
   81a14:	b570      	push	{r4, r5, r6, lr}
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81a16:	f04f 002b 	mov.w	r0, #43	; 0x2b
   81a1a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a1e:	f247 6499 	movw	r4, #30361	; 0x7699
   81a22:	f2c0 0408 	movt	r4, #8
   81a26:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81a28:	f04f 002a 	mov.w	r0, #42	; 0x2a
   81a2c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a30:	47a0      	blx	r4
	 
	/* Configure HSMCI pins */
	gpio_configure_pin(PIN_HSMCI_MCCDA_GPIO, PIN_HSMCI_MCCDA_FLAGS);
   81a32:	f04f 0014 	mov.w	r0, #20
   81a36:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a3a:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCCK_GPIO, PIN_HSMCI_MCCK_FLAGS);
   81a3c:	f04f 0013 	mov.w	r0, #19
   81a40:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a44:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA0_GPIO, PIN_HSMCI_MCDA0_FLAGS);
   81a46:	f04f 0015 	mov.w	r0, #21
   81a4a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a4e:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA1_GPIO, PIN_HSMCI_MCDA1_FLAGS);
   81a50:	f04f 0016 	mov.w	r0, #22
   81a54:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a58:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA2_GPIO, PIN_HSMCI_MCDA2_FLAGS);
   81a5a:	f04f 0017 	mov.w	r0, #23
   81a5e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a62:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA3_GPIO, PIN_HSMCI_MCDA3_FLAGS);
   81a64:	f04f 0018 	mov.w	r0, #24
   81a68:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a6c:	47a0      	blx	r4
	/* Configure SD/MMC card detect pin */
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
   81a6e:	f04f 0067 	mov.w	r0, #103	; 0x67
   81a72:	f04f 0108 	mov.w	r1, #8
   81a76:	47a0      	blx	r4
	
	/* Configure EEPROM pins **/	
	pmc_enable_periph_clk(ID_TWI0);
   81a78:	f04f 0016 	mov.w	r0, #22
   81a7c:	f647 16bd 	movw	r6, #31165	; 0x79bd
   81a80:	f2c0 0608 	movt	r6, #8
   81a84:	47b0      	blx	r6
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   81a86:	f04f 0011 	mov.w	r0, #17
   81a8a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a8e:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   81a90:	f04f 0012 	mov.w	r0, #18
   81a94:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a98:	47a0      	blx	r4
	 
	/* Enable power to the SD card slot */
	pmc_enable_periph_clk(VDD_MCI_PIO_ID);
   81a9a:	f04f 000c 	mov.w	r0, #12
   81a9e:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81aa0:	f44f 5580 	mov.w	r5, #4096	; 0x1000
   81aa4:	f2c4 050e 	movt	r5, #16398	; 0x400e
   81aa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   81aac:	612b      	str	r3, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81aae:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81ab2:	636b      	str	r3, [r5, #52]	; 0x34
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81ab4:	f44f 6460 	mov.w	r4, #3584	; 0xe00
   81ab8:	f2c4 040e 	movt	r4, #16398	; 0x400e
   81abc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   81ac0:	6620      	str	r0, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81ac2:	6560      	str	r0, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   81ac4:	6260      	str	r0, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   81ac6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   81aca:	6f22      	ldr	r2, [r4, #112]	; 0x70
   81acc:	4302      	orrs	r2, r0
   81ace:	6722      	str	r2, [r4, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   81ad0:	6060      	str	r0, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81ad2:	f04f 0101 	mov.w	r1, #1
   81ad6:	6621      	str	r1, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81ad8:	6561      	str	r1, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   81ada:	6261      	str	r1, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   81adc:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   81ae0:	6f23      	ldr	r3, [r4, #112]	; 0x70
   81ae2:	430b      	orrs	r3, r1
   81ae4:	6723      	str	r3, [r4, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   81ae6:	6061      	str	r1, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81ae8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   81aec:	6620      	str	r0, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81aee:	6560      	str	r0, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   81af0:	6260      	str	r0, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   81af2:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   81af6:	6f22      	ldr	r2, [r4, #112]	; 0x70
   81af8:	4302      	orrs	r2, r0
   81afa:	6722      	str	r2, [r4, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   81afc:	6060      	str	r0, [r4, #4]
	ioport_disable_pin(PIN_LED2_GPIO);
	ioport_set_pin_mode(PIN_LED3_GPIO, PIN_LED3_FLAGS);
	ioport_disable_pin(PIN_LED3_GPIO);
	 	 
	/* User button */
	pmc_enable_periph_clk(USR_BUTTON_PIO_ID);
   81afe:	f04f 000c 	mov.w	r0, #12
   81b02:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   81b04:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   81b08:	6169      	str	r1, [r5, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81b0a:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   81b0e:	6669      	str	r1, [r5, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81b10:	6569      	str	r1, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   81b12:	6229      	str	r1, [r5, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   81b14:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81b18:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   81b1a:	f423 0000 	bic.w	r0, r3, #8388608	; 0x800000
   81b1e:	6728      	str	r0, [r5, #112]	; 0x70
	ioport_set_pin_dir(GPIO_USR_BUTTON, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_USR_BUTTON, GPIO_USR_BUTTON_FLAGS);
	 
	/* Sync signals */
	pmc_enable_periph_clk(SYNC_PIO_ID);
   81b20:	f04f 000e 	mov.w	r0, #14
   81b24:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   81b26:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
   81b2a:	f2c4 050e 	movt	r5, #16398	; 0x400e
   81b2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   81b32:	616a      	str	r2, [r5, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81b34:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   81b38:	666a      	str	r2, [r5, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81b3a:	656a      	str	r2, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   81b3c:	622a      	str	r2, [r5, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   81b3e:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81b42:	6f29      	ldr	r1, [r5, #112]	; 0x70
   81b44:	f421 6380 	bic.w	r3, r1, #1024	; 0x400
   81b48:	672b      	str	r3, [r5, #112]	; 0x70
	ioport_set_pin_dir(GPIO_SYNC, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_SYNC, GPIO_SYNC_FLAGS);
	pmc_enable_periph_clk(SYNC_READ_PIO_ID);
   81b4a:	f04f 000b 	mov.w	r0, #11
   81b4e:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81b50:	f04f 0020 	mov.w	r0, #32
   81b54:	6120      	str	r0, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81b56:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81b5a:	6360      	str	r0, [r4, #52]	; 0x34
	ioport_set_pin_dir(SYNC_READ_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(SYNC_READ_GPIO, SYNC_READ_ACTIVE_LEVEL);
	pmc_enable_periph_clk(SYNC_WRITE_PIO_ID);
   81b5c:	f04f 000b 	mov.w	r0, #11
   81b60:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81b62:	f04f 0280 	mov.w	r2, #128	; 0x80
   81b66:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81b68:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81b6c:	6322      	str	r2, [r4, #48]	; 0x30
	ioport_set_pin_dir(SYNC_WRITE_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(SYNC_WRITE_GPIO, SYNC_WRITE_INACTIVE_LEVEL);
	
	/* 12v detect */
	pmc_enable_periph_clk(DET_12V_PIO_ID);
   81b6e:	f04f 000b 	mov.w	r0, #11
   81b72:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   81b74:	f04f 0102 	mov.w	r1, #2
   81b78:	6161      	str	r1, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81b7a:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81b7e:	6621      	str	r1, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81b80:	6561      	str	r1, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   81b82:	6221      	str	r1, [r4, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   81b84:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81b88:	6f23      	ldr	r3, [r4, #112]	; 0x70
   81b8a:	f023 0002 	bic.w	r0, r3, #2
   81b8e:	6720      	str	r0, [r4, #112]	; 0x70
	ioport_set_pin_dir(GPIO_DET_12V, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_DET_12V, GPIO_DET_12V_FLAGS);
	
	/* 12v power ok */
	pmc_enable_periph_clk(OK_12V_PIO_ID);
   81b90:	f04f 000e 	mov.w	r0, #14
   81b94:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   81b96:	f44f 7280 	mov.w	r2, #256	; 0x100
   81b9a:	616a      	str	r2, [r5, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81b9c:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81ba0:	662a      	str	r2, [r5, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81ba2:	656a      	str	r2, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   81ba4:	622a      	str	r2, [r5, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   81ba6:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81baa:	6f29      	ldr	r1, [r5, #112]	; 0x70
   81bac:	f421 7380 	bic.w	r3, r1, #256	; 0x100
   81bb0:	672b      	str	r3, [r5, #112]	; 0x70
	ioport_set_pin_dir(GPIO_OK_12V, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_OK_12V, GPIO_OK_12V_FLAGS);
	
	/* 12v enable */	
	pmc_enable_periph_clk(ENABLE_12V_PIO_ID);
   81bb2:	f04f 000e 	mov.w	r0, #14
   81bb6:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81bb8:	f44f 7000 	mov.w	r0, #512	; 0x200
   81bbc:	6128      	str	r0, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81bbe:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81bc2:	6368      	str	r0, [r5, #52]	; 0x34
   81bc4:	bd70      	pop	{r4, r5, r6, pc}
   81bc6:	bf00      	nop

00081bc8 <switch_on_off_lights>:
uint16_t lights_off = FALSE;


void switch_on_off_lights(uint16_t bool_lights)
{
	lights_off = bool_lights;
   81bc8:	f640 331e 	movw	r3, #2846	; 0xb1e
   81bcc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81bd0:	8018      	strh	r0, [r3, #0]
   81bd2:	4770      	bx	lr

00081bd4 <fpga_send_spi_16bits>:
	// Here we should send something to the FPGA....
}

uint16_t fpga_send_spi_16bits(uint16_t data)
{
   81bd4:	b510      	push	{r4, lr}
   81bd6:	b082      	sub	sp, #8
   81bd8:	4601      	mov	r1, r0
	uint16_t return_val;
	uint16_t pcs;
	
	spi_write(SPI0, data, FPGA_CHIP_SEL, 0);
   81bda:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   81bde:	f2c4 0000 	movt	r0, #16384	; 0x4000
   81be2:	f04f 0200 	mov.w	r2, #0
   81be6:	4613      	mov	r3, r2
   81be8:	f241 749d 	movw	r4, #6045	; 0x179d
   81bec:	f2c0 0408 	movt	r4, #8
   81bf0:	47a0      	blx	r4
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
	return p_spi->SPI_SR;
   81bf2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81bf6:	f2c4 0200 	movt	r2, #16384	; 0x4000
   81bfa:	6913      	ldr	r3, [r2, #16]
	/* Wait to receive data */
	while((spi_read_status(SPI0) & SPI_SR_RDRF) == 0);;
   81bfc:	f013 0f01 	tst.w	r3, #1
   81c00:	d0fb      	beq.n	81bfa <fpga_send_spi_16bits+0x26>
	spi_read(SPI0, &return_val, &pcs);
   81c02:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   81c06:	f2c4 0000 	movt	r0, #16384	; 0x4000
   81c0a:	f10d 0106 	add.w	r1, sp, #6
   81c0e:	aa01      	add	r2, sp, #4
   81c10:	f241 7341 	movw	r3, #5953	; 0x1741
   81c14:	f2c0 0308 	movt	r3, #8
   81c18:	4798      	blx	r3
	
	return return_val;
}
   81c1a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   81c1e:	b002      	add	sp, #8
   81c20:	bd10      	pop	{r4, pc}
   81c22:	bf00      	nop

00081c24 <get_fpga_read_available_flag>:
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81c24:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   81c28:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81c2c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
{
	if(ioport_get_pin_level(GPIO_FPGA_INT))
		return RETURN_OK;
	else
		return RETURN_NOK;
}
   81c2e:	f3c0 4000 	ubfx	r0, r0, #16, #1
   81c32:	4770      	bx	lr

00081c34 <read_counters>:

// Read counters values
void read_counters(uint32_t* counter1_pt, uint32_t* counter2_pt)
{
   81c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81c38:	4680      	mov	r8, r0
   81c3a:	460f      	mov	r7, r1
	uint32_t temp_counter1_val = 0;
	uint32_t temp_counter2_val = 0;
	uint16_t temp_val;
	
	/* Clear flag */
	fpga_send_spi_16bits(0x4000);
   81c3c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   81c40:	f641 34d5 	movw	r4, #7125	; 0x1bd5
   81c44:	f2c0 0408 	movt	r4, #8
   81c48:	47a0      	blx	r4
	/* Ask counter 1 LSB */
	fpga_send_spi_16bits(0);
   81c4a:	f04f 0000 	mov.w	r0, #0
   81c4e:	47a0      	blx	r4
	/* Read counter 1 LSB, ask MSB */
	temp_val = fpga_send_spi_16bits(1);
   81c50:	f04f 0001 	mov.w	r0, #1
   81c54:	47a0      	blx	r4
   81c56:	4605      	mov	r5, r0
	/* Ask counter 2 LSB, read counter 1 MSB */
	temp_counter1_val = (uint32_t)fpga_send_spi_16bits(2);
   81c58:	f04f 0002 	mov.w	r0, #2
   81c5c:	47a0      	blx	r4
	temp_counter1_val = (temp_counter1_val << 16) & 0x01FF0000;
   81c5e:	f04f 0600 	mov.w	r6, #0
   81c62:	f2c0 16ff 	movt	r6, #511	; 0x1ff
   81c66:	ea06 4000 	and.w	r0, r6, r0, lsl #16
	temp_counter1_val += temp_val;
   81c6a:	1945      	adds	r5, r0, r5
	/* Ask counter 2 MSB, read LSB */
	temp_val = fpga_send_spi_16bits(3);
   81c6c:	f04f 0003 	mov.w	r0, #3
   81c70:	47a0      	blx	r4
   81c72:	4681      	mov	r9, r0
	/* Clear flag & read counter 2 LSB */
	temp_counter2_val = (uint32_t)fpga_send_spi_16bits(4);
   81c74:	f04f 0004 	mov.w	r0, #4
   81c78:	47a0      	blx	r4
	temp_counter2_val = (temp_counter2_val << 16) & 0x01FF0000;
   81c7a:	ea06 4100 	and.w	r1, r6, r0, lsl #16
	temp_counter2_val += temp_val;
   81c7e:	eb01 0609 	add.w	r6, r1, r9
	
	if(temp_counter1_val < last_counter1_meas)
   81c82:	f640 3314 	movw	r3, #2836	; 0xb14
   81c86:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81c8a:	681a      	ldr	r2, [r3, #0]
   81c8c:	4295      	cmp	r5, r2
	{
		*counter1_pt = 0x02000000 - last_counter1_meas;
   81c8e:	bf3a      	itte	cc
   81c90:	f1c2 7200 	rsbcc	r2, r2, #33554432	; 0x2000000
		*counter1_pt += temp_counter1_val;
   81c94:	1952      	addcc	r2, r2, r5
	}
	else
	{
		*counter1_pt = temp_counter1_val - last_counter1_meas;
   81c96:	ebc2 0205 	rsbcs	r2, r2, r5
   81c9a:	f8c8 2000 	str.w	r2, [r8]
	}
	
	if(temp_counter2_val < last_counter2_meas)
   81c9e:	f640 3010 	movw	r0, #2832	; 0xb10
   81ca2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81ca6:	6801      	ldr	r1, [r0, #0]
   81ca8:	428e      	cmp	r6, r1
	{
		*counter2_pt = 0x02000000 - last_counter2_meas;
   81caa:	bf3a      	itte	cc
   81cac:	f1c1 7100 	rsbcc	r1, r1, #33554432	; 0x2000000
		*counter2_pt += temp_counter2_val;
   81cb0:	1989      	addcc	r1, r1, r6
	}
	else
	{
		*counter2_pt = temp_counter2_val - last_counter2_meas;
   81cb2:	ebc1 0106 	rsbcs	r1, r1, r6
   81cb6:	6039      	str	r1, [r7, #0]
	}
	
	last_counter1_meas = temp_counter1_val;
   81cb8:	f640 3314 	movw	r3, #2836	; 0xb14
   81cbc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81cc0:	601d      	str	r5, [r3, #0]
	last_counter2_meas = temp_counter2_val;
   81cc2:	f640 3210 	movw	r2, #2832	; 0xb10
   81cc6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81cca:	6016      	str	r6, [r2, #0]
   81ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00081cd0 <send_relays_data_to_fpga>:
}

void send_relays_data_to_fpga(void)
{
   81cd0:	b538      	push	{r3, r4, r5, lr}
	uint16_t temp_val = 0;
	
	if(is_channel1_dc_coupled == TRUE)
   81cd2:	f640 330e 	movw	r3, #2830	; 0xb0e
   81cd6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81cda:	881c      	ldrh	r4, [r3, #0]
	last_counter2_meas = temp_counter2_val;
}

void send_relays_data_to_fpga(void)
{
	uint16_t temp_val = 0;
   81cdc:	2c01      	cmp	r4, #1
   81cde:	bf14      	ite	ne
   81ce0:	2400      	movne	r4, #0
   81ce2:	2401      	moveq	r4, #1
	
	if(is_channel1_dc_coupled == TRUE)
		temp_val |= 0x0001;
	if(is_channel2_dc_coupled == TRUE)
   81ce4:	f640 300c 	movw	r0, #2828	; 0xb0c
   81ce8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81cec:	8801      	ldrh	r1, [r0, #0]
   81cee:	2901      	cmp	r1, #1
		temp_val |= 0x0002;
   81cf0:	bf04      	itt	eq
   81cf2:	f044 0402 	orreq.w	r4, r4, #2
   81cf6:	b2a4      	uxtheq	r4, r4
	if(is_channel1_offsetted == TRUE)
   81cf8:	f640 321c 	movw	r2, #2844	; 0xb1c
   81cfc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81d00:	8815      	ldrh	r5, [r2, #0]
   81d02:	2d01      	cmp	r5, #1
		temp_val |= 0x0004;
   81d04:	bf08      	it	eq
   81d06:	f044 0404 	orreq.w	r4, r4, #4
	if(is_channel2_offsetted == TRUE)
   81d0a:	f640 3320 	movw	r3, #2848	; 0xb20
   81d0e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81d12:	8818      	ldrh	r0, [r3, #0]
   81d14:	2801      	cmp	r0, #1
		temp_val |= 0x0008;
   81d16:	bf08      	it	eq
   81d18:	f044 0408 	orreq.w	r4, r4, #8
		
	fpga_send_spi_16bits(260);
   81d1c:	f44f 7082 	mov.w	r0, #260	; 0x104
   81d20:	f641 35d5 	movw	r5, #7125	; 0x1bd5
   81d24:	f2c0 0508 	movt	r5, #8
   81d28:	47a8      	blx	r5
	Nop();
   81d2a:	bf00      	nop
	fpga_send_spi_16bits(temp_val);
   81d2c:	4620      	mov	r0, r4
   81d2e:	47a8      	blx	r5
	asm("NOP");asm("NOP");asm("NOP");asm("NOP");
   81d30:	bf00      	nop
   81d32:	bf00      	nop
   81d34:	bf00      	nop
   81d36:	bf00      	nop
   81d38:	bd38      	pop	{r3, r4, r5, pc}
   81d3a:	bf00      	nop

00081d3c <set_channel1_coupling>:
}

void set_channel1_coupling(uint16_t is_dc_coupled)
{
   81d3c:	b508      	push	{r3, lr}
	is_channel1_dc_coupled = is_dc_coupled;
   81d3e:	f640 330e 	movw	r3, #2830	; 0xb0e
   81d42:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81d46:	8018      	strh	r0, [r3, #0]
	send_relays_data_to_fpga();
   81d48:	f641 40d1 	movw	r0, #7377	; 0x1cd1
   81d4c:	f2c0 0008 	movt	r0, #8
   81d50:	4780      	blx	r0
   81d52:	bd08      	pop	{r3, pc}

00081d54 <get_channel1_coupling>:
}

uint16_t get_channel1_coupling(void)
{
	return is_channel1_dc_coupled;
}
   81d54:	f640 330e 	movw	r3, #2830	; 0xb0e
   81d58:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81d5c:	8818      	ldrh	r0, [r3, #0]
   81d5e:	4770      	bx	lr

00081d60 <set_channel2_coupling>:

void set_channel2_coupling(uint16_t is_dc_coupled)
{
   81d60:	b508      	push	{r3, lr}
	is_channel2_dc_coupled = is_dc_coupled;
   81d62:	f640 330c 	movw	r3, #2828	; 0xb0c
   81d66:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81d6a:	8018      	strh	r0, [r3, #0]
	send_relays_data_to_fpga();
   81d6c:	f641 40d1 	movw	r0, #7377	; 0x1cd1
   81d70:	f2c0 0008 	movt	r0, #8
   81d74:	4780      	blx	r0
   81d76:	bd08      	pop	{r3, pc}

00081d78 <get_channel2_coupling>:
}

uint16_t get_channel2_coupling(void)
{
	return is_channel2_dc_coupled;
}
   81d78:	f640 330c 	movw	r3, #2828	; 0xb0c
   81d7c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81d80:	8818      	ldrh	r0, [r3, #0]
   81d82:	4770      	bx	lr

00081d84 <set_channel1_offset_relay>:

void set_channel1_offset_relay(uint16_t is_offsetted)
{
   81d84:	b508      	push	{r3, lr}
	is_channel1_offsetted = is_offsetted;
   81d86:	f640 331c 	movw	r3, #2844	; 0xb1c
   81d8a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81d8e:	8018      	strh	r0, [r3, #0]
	send_relays_data_to_fpga();
   81d90:	f641 40d1 	movw	r0, #7377	; 0x1cd1
   81d94:	f2c0 0008 	movt	r0, #8
   81d98:	4780      	blx	r0
   81d9a:	bd08      	pop	{r3, pc}

00081d9c <get_channel1_offset_relay>:
}

uint16_t get_channel1_offset_relay(void)
{
	return is_channel1_offsetted;
}
   81d9c:	f640 331c 	movw	r3, #2844	; 0xb1c
   81da0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81da4:	8818      	ldrh	r0, [r3, #0]
   81da6:	4770      	bx	lr

00081da8 <set_channel2_offset_relay>:

void set_channel2_offset_relay(uint16_t is_offsetted)
{
   81da8:	b508      	push	{r3, lr}
	is_channel2_offsetted = is_offsetted;
   81daa:	f640 3320 	movw	r3, #2848	; 0xb20
   81dae:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81db2:	8018      	strh	r0, [r3, #0]
	send_relays_data_to_fpga();
   81db4:	f641 40d1 	movw	r0, #7377	; 0x1cd1
   81db8:	f2c0 0008 	movt	r0, #8
   81dbc:	4780      	blx	r0
   81dbe:	bd08      	pop	{r3, pc}

00081dc0 <get_channel2_offset_relay>:
}

uint16_t get_channel2_offset_relay(void)
{
	return is_channel2_offsetted;
}
   81dc0:	f640 3320 	movw	r3, #2848	; 0xb20
   81dc4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81dc8:	8818      	ldrh	r0, [r3, #0]
   81dca:	4770      	bx	lr

00081dcc <set_threshold_channel1>:

void set_threshold_channel1(uint16_t threshold)
{
   81dcc:	b510      	push	{r4, lr}
   81dce:	b082      	sub	sp, #8
   81dd0:	4601      	mov	r1, r0
	volatile uint16_t return_val;
	
	current_channel1_threshold = threshold;
   81dd2:	f640 331a 	movw	r3, #2842	; 0xb1a
   81dd6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81dda:	8018      	strh	r0, [r3, #0]
	spi_write(SPI0, (0x1000 | threshold), DAC_CHIP_SEL, 0);
   81ddc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   81de0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   81de4:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
   81de8:	f04f 0201 	mov.w	r2, #1
   81dec:	f04f 0300 	mov.w	r3, #0
   81df0:	f241 749d 	movw	r4, #6045	; 0x179d
   81df4:	f2c0 0408 	movt	r4, #8
   81df8:	47a0      	blx	r4
   81dfa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81dfe:	f2c4 0200 	movt	r2, #16384	; 0x4000
   81e02:	6910      	ldr	r0, [r2, #16]
	while((spi_read_status(SPI0) & SPI_SR_RDRF) == 0);;
   81e04:	f010 0f01 	tst.w	r0, #1
   81e08:	d0fb      	beq.n	81e02 <set_threshold_channel1+0x36>
	spi_read(SPI0, &return_val, DAC_CHIP_SEL);
   81e0a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   81e0e:	f2c4 0000 	movt	r0, #16384	; 0x4000
   81e12:	f10d 0106 	add.w	r1, sp, #6
   81e16:	f04f 0201 	mov.w	r2, #1
   81e1a:	f241 7341 	movw	r3, #5953	; 0x1741
   81e1e:	f2c0 0308 	movt	r3, #8
   81e22:	4798      	blx	r3
}
   81e24:	b002      	add	sp, #8
   81e26:	bd10      	pop	{r4, pc}

00081e28 <get_channel1_threshold>:

uint16_t get_channel1_threshold(void)
{
	return current_channel1_threshold;
}
   81e28:	f640 331a 	movw	r3, #2842	; 0xb1a
   81e2c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81e30:	8818      	ldrh	r0, [r3, #0]
   81e32:	4770      	bx	lr

00081e34 <set_threshold_channel2>:

void set_threshold_channel2(uint16_t threshold)
{
   81e34:	b510      	push	{r4, lr}
   81e36:	b082      	sub	sp, #8
   81e38:	4601      	mov	r1, r0
	volatile uint16_t return_val;
	
	current_channel2_threshold = threshold;
   81e3a:	f640 3318 	movw	r3, #2840	; 0xb18
   81e3e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81e42:	8018      	strh	r0, [r3, #0]
	spi_write(SPI0, (0xD000 | threshold), DAC_CHIP_SEL, 0);
   81e44:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   81e48:	f2c4 0000 	movt	r0, #16384	; 0x4000
   81e4c:	f441 4150 	orr.w	r1, r1, #53248	; 0xd000
   81e50:	f04f 0201 	mov.w	r2, #1
   81e54:	f04f 0300 	mov.w	r3, #0
   81e58:	f241 749d 	movw	r4, #6045	; 0x179d
   81e5c:	f2c0 0408 	movt	r4, #8
   81e60:	47a0      	blx	r4
   81e62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81e66:	f2c4 0200 	movt	r2, #16384	; 0x4000
   81e6a:	6910      	ldr	r0, [r2, #16]
	while((spi_read_status(SPI0) & SPI_SR_RDRF) == 0);;
   81e6c:	f010 0f01 	tst.w	r0, #1
   81e70:	d0fb      	beq.n	81e6a <set_threshold_channel2+0x36>
	spi_read(SPI0, &return_val, DAC_CHIP_SEL);
   81e72:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   81e76:	f2c4 0000 	movt	r0, #16384	; 0x4000
   81e7a:	f10d 0106 	add.w	r1, sp, #6
   81e7e:	f04f 0201 	mov.w	r2, #1
   81e82:	f241 7341 	movw	r3, #5953	; 0x1741
   81e86:	f2c0 0308 	movt	r3, #8
   81e8a:	4798      	blx	r3
}
   81e8c:	b002      	add	sp, #8
   81e8e:	bd10      	pop	{r4, pc}

00081e90 <get_channel2_threshold>:

uint16_t get_channel2_threshold(void)
{
	return current_channel2_threshold;
}
   81e90:	f640 3318 	movw	r3, #2840	; 0xb18
   81e94:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81e98:	8818      	ldrh	r0, [r3, #0]
   81e9a:	4770      	bx	lr

00081e9c <set_offset_channel1>:

void set_offset_channel1(uint16_t offset)
{
   81e9c:	b510      	push	{r4, lr}
   81e9e:	b082      	sub	sp, #8
   81ea0:	4601      	mov	r1, r0
	volatile uint16_t return_val;
	
	current_channel1_offset = offset;
   81ea2:	f640 3322 	movw	r3, #2850	; 0xb22
   81ea6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81eaa:	8018      	strh	r0, [r3, #0]
	spi_write(SPI0, (0x5000 | offset), DAC_CHIP_SEL, 0);
   81eac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   81eb0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   81eb4:	f441 41a0 	orr.w	r1, r1, #20480	; 0x5000
   81eb8:	f04f 0201 	mov.w	r2, #1
   81ebc:	f04f 0300 	mov.w	r3, #0
   81ec0:	f241 749d 	movw	r4, #6045	; 0x179d
   81ec4:	f2c0 0408 	movt	r4, #8
   81ec8:	47a0      	blx	r4
   81eca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81ece:	f2c4 0200 	movt	r2, #16384	; 0x4000
   81ed2:	6910      	ldr	r0, [r2, #16]
	while((spi_read_status(SPI0) & SPI_SR_RDRF) == 0);;
   81ed4:	f010 0f01 	tst.w	r0, #1
   81ed8:	d0fb      	beq.n	81ed2 <set_offset_channel1+0x36>
	spi_read(SPI0, &return_val, DAC_CHIP_SEL);
   81eda:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   81ede:	f2c4 0000 	movt	r0, #16384	; 0x4000
   81ee2:	f10d 0106 	add.w	r1, sp, #6
   81ee6:	f04f 0201 	mov.w	r2, #1
   81eea:	f241 7341 	movw	r3, #5953	; 0x1741
   81eee:	f2c0 0308 	movt	r3, #8
   81ef2:	4798      	blx	r3
}
   81ef4:	b002      	add	sp, #8
   81ef6:	bd10      	pop	{r4, pc}

00081ef8 <get_offset_channel1>:

uint16_t get_offset_channel1(void)
{
	return current_channel1_offset;
}
   81ef8:	f640 3322 	movw	r3, #2850	; 0xb22
   81efc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81f00:	8818      	ldrh	r0, [r3, #0]
   81f02:	4770      	bx	lr

00081f04 <set_offset_channel2>:

void set_offset_channel2(uint16_t offset)
{
   81f04:	b510      	push	{r4, lr}
   81f06:	b082      	sub	sp, #8
   81f08:	4601      	mov	r1, r0
	volatile uint16_t return_val;
	
	current_channel2_offset = offset;
   81f0a:	f640 3324 	movw	r3, #2852	; 0xb24
   81f0e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81f12:	8018      	strh	r0, [r3, #0]
	spi_write(SPI0, (0x9000 | offset), DAC_CHIP_SEL, 0);
   81f14:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   81f18:	f2c4 0000 	movt	r0, #16384	; 0x4000
   81f1c:	f441 4110 	orr.w	r1, r1, #36864	; 0x9000
   81f20:	f04f 0201 	mov.w	r2, #1
   81f24:	f04f 0300 	mov.w	r3, #0
   81f28:	f241 749d 	movw	r4, #6045	; 0x179d
   81f2c:	f2c0 0408 	movt	r4, #8
   81f30:	47a0      	blx	r4
   81f32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81f36:	f2c4 0200 	movt	r2, #16384	; 0x4000
   81f3a:	6910      	ldr	r0, [r2, #16]
	while((spi_read_status(SPI0) & SPI_SR_RDRF) == 0);;
   81f3c:	f010 0f01 	tst.w	r0, #1
   81f40:	d0fb      	beq.n	81f3a <set_offset_channel2+0x36>
	spi_read(SPI0, &return_val, DAC_CHIP_SEL);
   81f42:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   81f46:	f2c4 0000 	movt	r0, #16384	; 0x4000
   81f4a:	f10d 0106 	add.w	r1, sp, #6
   81f4e:	f04f 0201 	mov.w	r2, #1
   81f52:	f241 7341 	movw	r3, #5953	; 0x1741
   81f56:	f2c0 0308 	movt	r3, #8
   81f5a:	4798      	blx	r3
}
   81f5c:	b002      	add	sp, #8
   81f5e:	bd10      	pop	{r4, pc}

00081f60 <get_offset_channel2>:

uint16_t get_offset_channel2(void)
{
	return current_channel2_offset;
}
   81f60:	f640 3324 	movw	r3, #2852	; 0xb24
   81f64:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81f68:	8818      	ldrh	r0, [r3, #0]
   81f6a:	4770      	bx	lr

00081f6c <init_module_peripherals_bp>:

// Here should be all the initialization functions for the module before 12v power
void init_module_peripherals_bp(void)
{
   81f6c:	4770      	bx	lr
   81f6e:	bf00      	nop

00081f70 <init_module_peripherals_ap>:
	
}

// Here should be all the initialization functions for the module after 12v power
void init_module_peripherals_ap(void)
{
   81f70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
   81f74:	f04f 0019 	mov.w	r0, #25
   81f78:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f7c:	f247 6499 	movw	r4, #30361	; 0x7699
   81f80:	f2c0 0408 	movt	r4, #8
   81f84:	47a0      	blx	r4
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
   81f86:	f04f 001a 	mov.w	r0, #26
   81f8a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f8e:	47a0      	blx	r4
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
   81f90:	f04f 001b 	mov.w	r0, #27
   81f94:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f98:	47a0      	blx	r4
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
   81f9a:	f04f 001c 	mov.w	r0, #28
   81f9e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81fa2:	47a0      	blx	r4
	gpio_configure_pin(SPI0_NPCS1_PA29_GPIO, SPI0_NPCS1_PA29_FLAGS);
   81fa4:	f04f 001d 	mov.w	r0, #29
   81fa8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81fac:	47a0      	blx	r4
	
	/* Configure an SPI peripheral. */
	spi_enable_clock(SPI0);
   81fae:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   81fb2:	f2c4 0400 	movt	r4, #16384	; 0x4000
   81fb6:	4620      	mov	r0, r4
   81fb8:	f241 730d 	movw	r3, #5901	; 0x170d
   81fbc:	f2c0 0308 	movt	r3, #8
   81fc0:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   81fc2:	f04f 0002 	mov.w	r0, #2
   81fc6:	6020      	str	r0, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
   81fc8:	f04f 0580 	mov.w	r5, #128	; 0x80
   81fcc:	6025      	str	r5, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
   81fce:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   81fd2:	6021      	str	r1, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
   81fd4:	6862      	ldr	r2, [r4, #4]
   81fd6:	f042 0601 	orr.w	r6, r2, #1
   81fda:	6066      	str	r6, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   81fdc:	6867      	ldr	r7, [r4, #4]
   81fde:	f047 0310 	orr.w	r3, r7, #16
   81fe2:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_variable_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_PS;
   81fe4:	6860      	ldr	r0, [r4, #4]
   81fe6:	f040 0102 	orr.w	r1, r0, #2
   81fea:	6061      	str	r1, [r4, #4]
	
	/* Set variable chip select */
	spi_set_variable_peripheral_select(SPI0);
	
	/* Configure FPGA SPI channel */
	spi_set_clock_polarity(SPI0, FPGA_CHIP_SEL, SPI_CLK_POLARITY);
   81fec:	4620      	mov	r0, r4
   81fee:	f04f 0100 	mov.w	r1, #0
   81ff2:	f04f 0201 	mov.w	r2, #1
   81ff6:	f241 7bf9 	movw	fp, #6137	; 0x17f9
   81ffa:	f2c0 0b08 	movt	fp, #8
   81ffe:	47d8      	blx	fp
	spi_set_clock_phase(SPI0, FPGA_CHIP_SEL, SPI_CLK_PHASE);
   82000:	4620      	mov	r0, r4
   82002:	f04f 0100 	mov.w	r1, #0
   82006:	f04f 0201 	mov.w	r2, #1
   8200a:	f641 0a21 	movw	sl, #6177	; 0x1821
   8200e:	f2c0 0a08 	movt	sl, #8
   82012:	47d0      	blx	sl
	spi_set_bits_per_transfer(SPI0, FPGA_CHIP_SEL, SPI_CSR_BITS_16_BIT);
   82014:	4620      	mov	r0, r4
   82016:	f04f 0100 	mov.w	r1, #0
   8201a:	462a      	mov	r2, r5
   8201c:	f641 09a1 	movw	r9, #6305	; 0x18a1
   82020:	f2c0 0908 	movt	r9, #8
   82024:	47c8      	blx	r9
	spi_configure_cs_behavior(SPI0, FPGA_CHIP_SEL, SPI_CS_RISE_FORCED);
   82026:	4620      	mov	r0, r4
   82028:	f04f 0100 	mov.w	r1, #0
   8202c:	f04f 0204 	mov.w	r2, #4
   82030:	f641 0849 	movw	r8, #6217	; 0x1849
   82034:	f2c0 0808 	movt	r8, #8
   82038:	47c0      	blx	r8
	spi_set_baudrate_div(SPI0, FPGA_CHIP_SEL, (sysclk_get_cpu_hz() / gs_ul_spi_clock));
   8203a:	4620      	mov	r0, r4
   8203c:	f04f 0100 	mov.w	r1, #0
   82040:	f04f 021c 	mov.w	r2, #28
   82044:	f641 07bd 	movw	r7, #6333	; 0x18bd
   82048:	f2c0 0708 	movt	r7, #8
   8204c:	47b8      	blx	r7
	spi_set_transfer_delay(SPI0, FPGA_CHIP_SEL, SPI_DLYBS, SPI_DLYBCT);
   8204e:	4620      	mov	r0, r4
   82050:	f04f 0100 	mov.w	r1, #0
   82054:	460a      	mov	r2, r1
   82056:	460b      	mov	r3, r1
   82058:	f641 06dd 	movw	r6, #6365	; 0x18dd
   8205c:	f2c0 0608 	movt	r6, #8
   82060:	47b0      	blx	r6
	
	/* Configure DAC SPI channel */
	spi_set_clock_polarity(SPI0, DAC_CHIP_SEL, SPI_CLK_POLARITY);
   82062:	4620      	mov	r0, r4
   82064:	f04f 0101 	mov.w	r1, #1
   82068:	460a      	mov	r2, r1
   8206a:	47d8      	blx	fp
	spi_set_clock_phase(SPI0, DAC_CHIP_SEL, SPI_CLK_PHASE);
   8206c:	4620      	mov	r0, r4
   8206e:	f04f 0101 	mov.w	r1, #1
   82072:	460a      	mov	r2, r1
   82074:	47d0      	blx	sl
	spi_set_bits_per_transfer(SPI0, DAC_CHIP_SEL, SPI_CSR_BITS_16_BIT);
   82076:	4620      	mov	r0, r4
   82078:	f04f 0101 	mov.w	r1, #1
   8207c:	462a      	mov	r2, r5
   8207e:	47c8      	blx	r9
	spi_configure_cs_behavior(SPI0, DAC_CHIP_SEL, SPI_CS_RISE_FORCED);
   82080:	4620      	mov	r0, r4
   82082:	f04f 0101 	mov.w	r1, #1
   82086:	f04f 0204 	mov.w	r2, #4
   8208a:	47c0      	blx	r8
	spi_set_baudrate_div(SPI0, DAC_CHIP_SEL, (sysclk_get_cpu_hz() / gs_ul_spi_clock));
   8208c:	4620      	mov	r0, r4
   8208e:	f04f 0101 	mov.w	r1, #1
   82092:	f04f 021c 	mov.w	r2, #28
   82096:	47b8      	blx	r7
	spi_set_transfer_delay(SPI0, DAC_CHIP_SEL, SPI_DLYBS, SPI_DLYBCT);
   82098:	4620      	mov	r0, r4
   8209a:	f04f 0101 	mov.w	r1, #1
   8209e:	f04f 0200 	mov.w	r2, #0
   820a2:	4613      	mov	r3, r2
   820a4:	47b0      	blx	r6
	spi_set_delay_between_chip_select(SPI0, DLYBCS);
   820a6:	4620      	mov	r0, r4
   820a8:	f04f 0164 	mov.w	r1, #100	; 0x64
   820ac:	f241 722d 	movw	r2, #5933	; 0x172d
   820b0:	f2c0 0208 	movt	r2, #8
   820b4:	4790      	blx	r2
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
   820b6:	f04f 0301 	mov.w	r3, #1
   820ba:	6023      	str	r3, [r4, #0]
	
	/* Enable SPI */
	spi_enable(SPI0);		
		
	/* Enable 10MHz clock */
	pmc_enable_periph_clk(EN_10MHZ_PIO_ID);
   820bc:	f04f 000e 	mov.w	r0, #14
   820c0:	f647 14bd 	movw	r4, #31165	; 0x79bd
   820c4:	f2c0 0408 	movt	r4, #8
   820c8:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   820ca:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   820ce:	f2c4 000e 	movt	r0, #16398	; 0x400e
   820d2:	f04f 0120 	mov.w	r1, #32
   820d6:	6101      	str	r1, [r0, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   820d8:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   820dc:	6341      	str	r1, [r0, #52]	; 0x34
	ioport_set_pin_dir(EN_10MHZ_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(EN_10MHZ_GPIO, EN_10MHZ_ACTIVE_LEVEL);	
	
	/* FPGA INT input */	
	pmc_enable_periph_clk(FPGA_INT_PIO_ID);
   820de:	f04f 000d 	mov.w	r0, #13
   820e2:	47a0      	blx	r4
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   820e4:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   820e8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   820ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   820f0:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   820f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   820f6:	661a      	str	r2, [r3, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   820f8:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   820fa:	621a      	str	r2, [r3, #32]
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   820fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   82100:	6f18      	ldr	r0, [r3, #112]	; 0x70
   82102:	f420 3180 	bic.w	r1, r0, #65536	; 0x10000
   82106:	6719      	str	r1, [r3, #112]	; 0x70
   82108:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008210c <deinit_module_peripherals>:
	ioport_set_pin_mode(GPIO_FPGA_INT, IOPORT_MODE_GLITCH_FILTER);
}

// Here should be all the deinitialization functions for the module before 12v power removal
void deinit_module_peripherals(void)
{
   8210c:	4770      	bx	lr
   8210e:	bf00      	nop

00082110 <init_i2c>:
twi_options_t i2c_options;
twi_packet_t i2c_packet;


void init_i2c(void)
{	
   82110:	b538      	push	{r3, r4, r5, lr}
	i2c_options.master_clk = sysclk_get_cpu_hz();
   82112:	f241 6488 	movw	r4, #5768	; 0x1688
   82116:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8211a:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
   8211e:	f2c0 5301 	movt	r3, #1281	; 0x501
   82122:	6023      	str	r3, [r4, #0]
	i2c_options.speed = 400000;
   82124:	f44f 50d4 	mov.w	r0, #6784	; 0x1a80
   82128:	f2c0 0006 	movt	r0, #6
   8212c:	6060      	str	r0, [r4, #4]
	i2c_options.chip = EEPROM_ADDR;
   8212e:	f04f 0150 	mov.w	r1, #80	; 0x50
   82132:	7221      	strb	r1, [r4, #8]
	i2c_options.smbus = 0;
   82134:	f04f 0200 	mov.w	r2, #0
   82138:	7262      	strb	r2, [r4, #9]
	twi_enable_master_mode(TWI0);
   8213a:	f44f 4540 	mov.w	r5, #49152	; 0xc000
   8213e:	f2c4 0508 	movt	r5, #16392	; 0x4008
   82142:	4628      	mov	r0, r5
   82144:	f641 1305 	movw	r3, #6405	; 0x1905
   82148:	f2c0 0308 	movt	r3, #8
   8214c:	4798      	blx	r3
	twi_master_init(TWI0, &i2c_options);	
   8214e:	4628      	mov	r0, r5
   82150:	4621      	mov	r1, r4
   82152:	f641 12c5 	movw	r2, #6597	; 0x19c5
   82156:	f2c0 0208 	movt	r2, #8
   8215a:	4790      	blx	r2
   8215c:	bd38      	pop	{r3, r4, r5, pc}
   8215e:	bf00      	nop

00082160 <init_pwm>:
	while(twi_probe(TWI0, EEPROM_ADDR) != TWI_SUCCESS);
	return (RET_TYPE)twi_master_read(TWI0, &i2c_packet);
}

void init_pwm(void)
{
   82160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82164:	b085      	sub	sp, #20
	/* Enable PWM peripheral clock */
	pmc_enable_periph_clk(ID_PWM);
   82166:	f04f 0024 	mov.w	r0, #36	; 0x24
   8216a:	f647 13bd 	movw	r3, #31165	; 0x79bd
   8216e:	f2c0 0308 	movt	r3, #8
   82172:	4798      	blx	r3

	/* Disable PWM channels for LEDs */
	pwm_channel_disable(PWM, PIN_LED1_CHANNEL);
   82174:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   82178:	f2c4 0409 	movt	r4, #16393	; 0x4009
   8217c:	4620      	mov	r0, r4
   8217e:	f04f 0101 	mov.w	r1, #1
   82182:	f241 65e9 	movw	r5, #5865	; 0x16e9
   82186:	f2c0 0508 	movt	r5, #8
   8218a:	47a8      	blx	r5
	pwm_channel_disable(PWM, PIN_LED2_CHANNEL);
   8218c:	4620      	mov	r0, r4
   8218e:	f04f 0103 	mov.w	r1, #3
   82192:	47a8      	blx	r5
	pwm_channel_disable(PWM, PIN_LED3_CHANNEL);
   82194:	4620      	mov	r0, r4
   82196:	f04f 0102 	mov.w	r1, #2
   8219a:	47a8      	blx	r5

	/* Set PWM clock A as LED_PWM_FREQUENCY*PERIOD_VALUE */
	pwm_clock_t clock_setting = {
   8219c:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
   821a0:	9001      	str	r0, [sp, #4]
   821a2:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
   821a6:	f2c0 5101 	movt	r1, #1281	; 0x501
   821aa:	9102      	str	r1, [sp, #8]
   821ac:	9103      	str	r1, [sp, #12]
		.ul_clka = LED_PWM_FREQUENCY * LED_PWM_PERIOD_VALUE,
		.ul_clkb = sysclk_get_cpu_hz(),
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &clock_setting);
   821ae:	4620      	mov	r0, r4
   821b0:	a901      	add	r1, sp, #4
   821b2:	f241 5241 	movw	r2, #5441	; 0x1541
   821b6:	f2c0 0208 	movt	r2, #8
   821ba:	4790      	blx	r2

	/* Initialize PWM channel for LED1 */
	/* Period is left-aligned */
	g_pwm_channel_led1.alignment = PWM_ALIGN_LEFT;
   821bc:	f241 61a8 	movw	r1, #5800	; 0x16a8
   821c0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   821c4:	f04f 0500 	mov.w	r5, #0
   821c8:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a low level */
	g_pwm_channel_led1.polarity = PWM_HIGH;
   821ca:	f04f 0601 	mov.w	r6, #1
   821ce:	728e      	strb	r6, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led1.ul_prescaler = PWM_CMR_CPRE_CLKA;
   821d0:	f04f 0b0b 	mov.w	fp, #11
   821d4:	f8c1 b004 	str.w	fp, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led1.ul_period = LED_PWM_PERIOD_VALUE;
   821d8:	f44f 6a80 	mov.w	sl, #1024	; 0x400
   821dc:	f8c1 a010 	str.w	sl, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led1.ul_duty = LED_INIT_DUTY_VALUE;
   821e0:	60cd      	str	r5, [r1, #12]
	g_pwm_channel_led1.channel = PIN_LED1_CHANNEL;
   821e2:	600e      	str	r6, [r1, #0]
	pwm_channel_init(PWM, &g_pwm_channel_led1);
   821e4:	4620      	mov	r0, r4
   821e6:	f241 598d 	movw	r9, #5517	; 0x158d
   821ea:	f2c0 0908 	movt	r9, #8
   821ee:	47c8      	blx	r9

	/* Enable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_LED1_CHANNEL, 0);
   821f0:	4620      	mov	r0, r4
   821f2:	4631      	mov	r1, r6
   821f4:	462a      	mov	r2, r5
   821f6:	f241 68f5 	movw	r8, #5877	; 0x16f5
   821fa:	f2c0 0808 	movt	r8, #8
   821fe:	47c0      	blx	r8
	//pwm_channel_enable_interrupt(PWM, PIN_LED1_CHANNEL, 0);

	/* Initialize PWM channel for LED2 */
	/* Period is center-aligned */
	g_pwm_channel_led2.alignment = PWM_ALIGN_LEFT;
   82200:	f241 61f8 	movw	r1, #5880	; 0x16f8
   82204:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82208:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led2.polarity = PWM_HIGH;
   8220a:	728e      	strb	r6, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led2.ul_prescaler = PWM_CMR_CPRE_CLKA;
   8220c:	f8c1 b004 	str.w	fp, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led2.ul_period = LED_PWM_PERIOD_VALUE;
   82210:	f8c1 a010 	str.w	sl, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led2.ul_duty = LED_INIT_DUTY_VALUE;
   82214:	60cd      	str	r5, [r1, #12]
	g_pwm_channel_led2.channel = PIN_LED2_CHANNEL;
   82216:	f04f 0703 	mov.w	r7, #3
   8221a:	600f      	str	r7, [r1, #0]
	pwm_channel_init(PWM, &g_pwm_channel_led2);
   8221c:	4620      	mov	r0, r4
   8221e:	47c8      	blx	r9

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_LED2_CHANNEL, 0);
   82220:	4620      	mov	r0, r4
   82222:	4639      	mov	r1, r7
   82224:	462a      	mov	r2, r5
   82226:	47c0      	blx	r8

	/* Initialize PWM channel for LED3 */
	/* Period is center-aligned */
	g_pwm_channel_led3.alignment = PWM_ALIGN_LEFT;
   82228:	f241 63d0 	movw	r3, #5840	; 0x16d0
   8222c:	4619      	mov	r1, r3
   8222e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82232:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led3.polarity = PWM_LOW;
   82234:	f04f 0000 	mov.w	r0, #0
   82238:	7288      	strb	r0, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led3.ul_prescaler = PWM_CMR_CPRE_CLKA;
   8223a:	f8c1 b004 	str.w	fp, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led3.ul_period = LED_PWM_PERIOD_VALUE;
   8223e:	f8c1 a010 	str.w	sl, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led3.ul_duty = LED_INIT_DUTY_VALUE;
   82242:	60cd      	str	r5, [r1, #12]
	g_pwm_channel_led3.channel = PIN_LED3_CHANNEL;
   82244:	f04f 0a02 	mov.w	sl, #2
   82248:	f8c1 a000 	str.w	sl, [r1]
	pwm_channel_init(PWM, &g_pwm_channel_led3);
   8224c:	4620      	mov	r0, r4
   8224e:	47c8      	blx	r9

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_LED3_CHANNEL, 0);
   82250:	4620      	mov	r0, r4
   82252:	4651      	mov	r1, sl
   82254:	462a      	mov	r2, r5
   82256:	47c0      	blx	r8
	
	/* Enable PWM channels for LEDs */
	pwm_channel_enable(PWM, PIN_LED1_CHANNEL);
   82258:	4620      	mov	r0, r4
   8225a:	4631      	mov	r1, r6
   8225c:	f241 65dd 	movw	r5, #5853	; 0x16dd
   82260:	f2c0 0508 	movt	r5, #8
   82264:	47a8      	blx	r5
	pwm_channel_enable(PWM, PIN_LED2_CHANNEL);
   82266:	4620      	mov	r0, r4
   82268:	4639      	mov	r1, r7
   8226a:	47a8      	blx	r5
	pwm_channel_enable(PWM, PIN_LED3_CHANNEL);
   8226c:	4620      	mov	r0, r4
   8226e:	4651      	mov	r1, sl
   82270:	47a8      	blx	r5
}
   82272:	b005      	add	sp, #20
   82274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00082278 <set_user_led_colour>:

// Set user led colour
void set_user_led_colour(uint16_t red_val, uint16_t green_val, uint16_t blue_val)
{
   82278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8227a:	4603      	mov	r3, r0
   8227c:	460e      	mov	r6, r1
   8227e:	4617      	mov	r7, r2
	pwm_channel_update_duty(PWM, &g_pwm_channel_led1, red_val);
   82280:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   82284:	f2c4 0409 	movt	r4, #16393	; 0x4009
   82288:	4620      	mov	r0, r4
   8228a:	f241 61a8 	movw	r1, #5800	; 0x16a8
   8228e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82292:	461a      	mov	r2, r3
   82294:	f241 65b9 	movw	r5, #5817	; 0x16b9
   82298:	f2c0 0508 	movt	r5, #8
   8229c:	47a8      	blx	r5
	pwm_channel_update_duty(PWM, &g_pwm_channel_led2, blue_val);
   8229e:	4620      	mov	r0, r4
   822a0:	f241 61f8 	movw	r1, #5880	; 0x16f8
   822a4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   822a8:	463a      	mov	r2, r7
   822aa:	47a8      	blx	r5
	pwm_channel_update_duty(PWM, &g_pwm_channel_led3, green_val);
   822ac:	4620      	mov	r0, r4
   822ae:	f241 61d0 	movw	r1, #5840	; 0x16d0
   822b2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   822b6:	4632      	mov	r2, r6
   822b8:	47a8      	blx	r5
   822ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000822bc <get_user_button_status>:
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   822bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   822c0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   822c4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
}

// To see if the user pressed the front panel button
RET_TYPE get_user_button_status(void)
{
	if(ioport_get_pin_level(GPIO_USR_BUTTON))
   822c6:	f480 0100 	eor.w	r1, r0, #8388608	; 0x800000
		return RETURN_NOK;
	else
		return RETURN_OK;
}
   822ca:	f3c1 50c0 	ubfx	r0, r1, #23, #1
   822ce:	4770      	bx	lr

000822d0 <get_sync_signal_status>:
   822d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   822d4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   822d8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
{
	if(ioport_get_pin_level(GPIO_SYNC))
		return RETURN_OK;
	else
		return RETURN_NOK;
}
   822da:	f3c0 2080 	ubfx	r0, r0, #10, #1
   822de:	4770      	bx	lr

000822e0 <get_ok_12v_status>:
   822e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   822e4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   822e8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
{
	if(ioport_get_pin_level(GPIO_OK_12V))
		return RETURN_OK;
	else
		return RETURN_NOK;
}
   822ea:	f3c0 2000 	ubfx	r0, r0, #8, #1
   822ee:	4770      	bx	lr

000822f0 <enable_12v>:
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   822f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   822f4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   822f8:	f44f 7200 	mov.w	r2, #512	; 0x200
   822fc:	631a      	str	r2, [r3, #48]	; 0x30
   822fe:	4770      	bx	lr

00082300 <disable_12v>:
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82300:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   82304:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82308:	f44f 7200 	mov.w	r2, #512	; 0x200
   8230c:	635a      	str	r2, [r3, #52]	; 0x34
   8230e:	4770      	bx	lr

00082310 <SCPI_ErrorInit>:
/* basic FIFO */
static fifo_t local_error_queue;



void SCPI_ErrorInit(scpi_t * context) {
   82310:	b508      	push	{r3, lr}
     * // FreeRTOS
     * context->error_queue = (scpi_error_queue_t)xQueueCreate(100, sizeof(int16_t));
     */

    /* basic FIFO */
    context->error_queue = (scpi_error_queue_t)&local_error_queue;
   82312:	f640 4338 	movw	r3, #3128	; 0xc38
   82316:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8231a:	62c3      	str	r3, [r0, #44]	; 0x2c
    fifo_init((fifo_t *)context->error_queue);
   8231c:	4618      	mov	r0, r3
   8231e:	f242 5141 	movw	r1, #9537	; 0x2541
   82322:	f2c0 0108 	movt	r1, #8
   82326:	4788      	blx	r1
   82328:	bd08      	pop	{r3, pc}
   8232a:	bf00      	nop

0008232c <SCPI_ErrorClear>:

/**
 * Clear error queue
 * @param context - scpi context
 */
void SCPI_ErrorClear(scpi_t * context) {
   8232c:	b508      	push	{r3, lr}
     * // FreeRTOS
     * xQueueReset((xQueueHandle)context->error_queue);
     */

    /* basic FIFO */
    fifo_clear((fifo_t *)context->error_queue);
   8232e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   82330:	f242 5351 	movw	r3, #9553	; 0x2551
   82334:	f2c0 0308 	movt	r3, #8
   82338:	4798      	blx	r3
   8233a:	bd08      	pop	{r3, pc}

0008233c <SCPI_ErrorPop>:
/**
 * Pop error from queue
 * @param context - scpi context
 * @return error number
 */
int16_t SCPI_ErrorPop(scpi_t * context) {
   8233c:	b500      	push	{lr}
   8233e:	b083      	sub	sp, #12
    int16_t result = 0;
   82340:	a902      	add	r1, sp, #8
   82342:	f04f 0300 	mov.w	r3, #0
   82346:	f821 3d02 	strh.w	r3, [r1, #-2]!
     *   result = 0;
     * }
     */

    /* basic FIFO */
    fifo_remove((fifo_t *)context->error_queue, &result);
   8234a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   8234c:	f242 525d 	movw	r2, #9565	; 0x255d
   82350:	f2c0 0208 	movt	r2, #8
   82354:	4790      	blx	r2

    return result;
}
   82356:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   8235a:	b003      	add	sp, #12
   8235c:	bd00      	pop	{pc}
   8235e:	bf00      	nop

00082360 <SCPI_ErrorCount>:
/**
 * Return number of errors/events in the queue
 * @param context
 * @return 
 */
int32_t SCPI_ErrorCount(scpi_t * context) {
   82360:	b500      	push	{lr}
   82362:	b083      	sub	sp, #12
    int16_t result = 0;
   82364:	a902      	add	r1, sp, #8
   82366:	f04f 0300 	mov.w	r3, #0
   8236a:	f821 3d02 	strh.w	r3, [r1, #-2]!
     * // FreeRTOS
     * result = uxQueueMessagesWaiting((xQueueHandle)context->error_queue);
     */

    /* basic FIFO */
    fifo_count((fifo_t *)context->error_queue, &result);
   8236e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   82370:	f242 52f9 	movw	r2, #9721	; 0x25f9
   82374:	f2c0 0208 	movt	r2, #8
   82378:	4790      	blx	r2

    return result;
}
   8237a:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   8237e:	b003      	add	sp, #12
   82380:	bd00      	pop	{pc}
   82382:	bf00      	nop

00082384 <SCPI_ErrorPush>:
/**
 * Push error to queue
 * @param context - scpi context
 * @param err - error number
 */
void SCPI_ErrorPush(scpi_t * context, int16_t err) {
   82384:	b538      	push	{r3, r4, r5, lr}
   82386:	4605      	mov	r5, r0
   82388:	460c      	mov	r4, r1
     * // FreeRTOS
     * xQueueSend((xQueueHandle)context->error_queue, &err, 0);
     */

    /* basic FIFO */
    fifo_add((fifo_t *)context->error_queue, err);
   8238a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   8238c:	f242 539d 	movw	r3, #9629	; 0x259d
   82390:	f2c0 0308 	movt	r3, #8
   82394:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82396:	f114 0f63 	cmn.w	r4, #99	; 0x63
   8239a:	da0c      	bge.n	823b6 <SCPI_ErrorPush+0x32>
   8239c:	f114 0fc7 	cmn.w	r4, #199	; 0xc7
   823a0:	db09      	blt.n	823b6 <SCPI_ErrorPush+0x32>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   823a2:	4628      	mov	r0, r5
   823a4:	f04f 0102 	mov.w	r1, #2
   823a8:	f04f 0220 	mov.w	r2, #32
   823ac:	f242 73a9 	movw	r3, #10153	; 0x27a9
   823b0:	f2c0 0308 	movt	r3, #8
   823b4:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   823b6:	f114 0fc7 	cmn.w	r4, #199	; 0xc7
   823ba:	da0c      	bge.n	823d6 <SCPI_ErrorPush+0x52>
   823bc:	f514 7f96 	cmn.w	r4, #300	; 0x12c
   823c0:	dd09      	ble.n	823d6 <SCPI_ErrorPush+0x52>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   823c2:	4628      	mov	r0, r5
   823c4:	f04f 0102 	mov.w	r1, #2
   823c8:	f04f 0210 	mov.w	r2, #16
   823cc:	f242 73a9 	movw	r3, #10153	; 0x27a9
   823d0:	f2c0 0308 	movt	r3, #8
   823d4:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   823d6:	f514 7f96 	cmn.w	r4, #300	; 0x12c
   823da:	dc0c      	bgt.n	823f6 <SCPI_ErrorPush+0x72>
   823dc:	f514 7fc8 	cmn.w	r4, #400	; 0x190
   823e0:	dd09      	ble.n	823f6 <SCPI_ErrorPush+0x72>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   823e2:	4628      	mov	r0, r5
   823e4:	f04f 0102 	mov.w	r1, #2
   823e8:	f04f 0208 	mov.w	r2, #8
   823ec:	f242 73a9 	movw	r3, #10153	; 0x27a9
   823f0:	f2c0 0308 	movt	r3, #8
   823f4:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   823f6:	f514 7fc8 	cmn.w	r4, #400	; 0x190
   823fa:	dc0c      	bgt.n	82416 <SCPI_ErrorPush+0x92>
   823fc:	f514 7ffa 	cmn.w	r4, #500	; 0x1f4
   82400:	dd09      	ble.n	82416 <SCPI_ErrorPush+0x92>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82402:	4628      	mov	r0, r5
   82404:	f04f 0102 	mov.w	r1, #2
   82408:	f04f 0204 	mov.w	r2, #4
   8240c:	f242 73a9 	movw	r3, #10153	; 0x27a9
   82410:	f2c0 0308 	movt	r3, #8
   82414:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82416:	f514 7ffa 	cmn.w	r4, #500	; 0x1f4
   8241a:	dc0c      	bgt.n	82436 <SCPI_ErrorPush+0xb2>
   8241c:	f514 7f16 	cmn.w	r4, #600	; 0x258
   82420:	dd09      	ble.n	82436 <SCPI_ErrorPush+0xb2>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82422:	4628      	mov	r0, r5
   82424:	f04f 0102 	mov.w	r1, #2
   82428:	f04f 0280 	mov.w	r2, #128	; 0x80
   8242c:	f242 73a9 	movw	r3, #10153	; 0x27a9
   82430:	f2c0 0308 	movt	r3, #8
   82434:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82436:	f514 7f16 	cmn.w	r4, #600	; 0x258
   8243a:	dc0c      	bgt.n	82456 <SCPI_ErrorPush+0xd2>
   8243c:	f514 7f2f 	cmn.w	r4, #700	; 0x2bc
   82440:	dd09      	ble.n	82456 <SCPI_ErrorPush+0xd2>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82442:	4628      	mov	r0, r5
   82444:	f04f 0102 	mov.w	r1, #2
   82448:	f04f 0240 	mov.w	r2, #64	; 0x40
   8244c:	f242 73a9 	movw	r3, #10153	; 0x27a9
   82450:	f2c0 0308 	movt	r3, #8
   82454:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82456:	f514 7f2f 	cmn.w	r4, #700	; 0x2bc
   8245a:	dc0b      	bgt.n	82474 <SCPI_ErrorPush+0xf0>
   8245c:	f514 7f48 	cmn.w	r4, #800	; 0x320
   82460:	dd08      	ble.n	82474 <SCPI_ErrorPush+0xf0>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82462:	4628      	mov	r0, r5
   82464:	f04f 0102 	mov.w	r1, #2
   82468:	460a      	mov	r2, r1
   8246a:	f242 73a9 	movw	r3, #10153	; 0x27a9
   8246e:	f2c0 0308 	movt	r3, #8
   82472:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82474:	f514 7f48 	cmn.w	r4, #800	; 0x320
   82478:	dc0c      	bgt.n	82494 <SCPI_ErrorPush+0x110>
   8247a:	f514 7f61 	cmn.w	r4, #900	; 0x384
   8247e:	dd09      	ble.n	82494 <SCPI_ErrorPush+0x110>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82480:	4628      	mov	r0, r5
   82482:	f04f 0102 	mov.w	r1, #2
   82486:	f04f 0201 	mov.w	r2, #1
   8248a:	f242 73a9 	movw	r3, #10153	; 0x27a9
   8248e:	f2c0 0308 	movt	r3, #8
   82492:	4798      	blx	r3
        }
    }

    if (context) {
   82494:	b155      	cbz	r5, 824ac <SCPI_ErrorPush+0x128>
        if (context->interface && context->interface->error) {
   82496:	69e8      	ldr	r0, [r5, #28]
   82498:	b120      	cbz	r0, 824a4 <SCPI_ErrorPush+0x120>
   8249a:	6802      	ldr	r2, [r0, #0]
   8249c:	b112      	cbz	r2, 824a4 <SCPI_ErrorPush+0x120>
            context->interface->error(context, err);
   8249e:	4628      	mov	r0, r5
   824a0:	4621      	mov	r1, r4
   824a2:	4790      	blx	r2
        }

        context->cmd_error = TRUE;
   824a4:	f04f 0101 	mov.w	r1, #1
   824a8:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
   824ac:	bd38      	pop	{r3, r4, r5, pc}
   824ae:	bf00      	nop

000824b0 <SCPI_ErrorTranslate>:
 * Translate error number to string
 * @param err - error number
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
    switch (err) {
   824b0:	f110 0f6d 	cmn.w	r0, #109	; 0x6d
   824b4:	d02b      	beq.n	8250e <SCPI_ErrorTranslate+0x5e>
   824b6:	dc09      	bgt.n	824cc <SCPI_ErrorTranslate+0x1c>
   824b8:	f110 0f83 	cmn.w	r0, #131	; 0x83
   824bc:	d02c      	beq.n	82518 <SCPI_ErrorTranslate+0x68>
   824be:	f110 0f71 	cmn.w	r0, #113	; 0x71
   824c2:	d01a      	beq.n	824fa <SCPI_ErrorTranslate+0x4a>
   824c4:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
   824c8:	d130      	bne.n	8252c <SCPI_ErrorTranslate+0x7c>
   824ca:	e02a      	b.n	82522 <SCPI_ErrorTranslate+0x72>
   824cc:	f110 0f67 	cmn.w	r0, #103	; 0x67
   824d0:	d00e      	beq.n	824f0 <SCPI_ErrorTranslate+0x40>
   824d2:	dc03      	bgt.n	824dc <SCPI_ErrorTranslate+0x2c>
   824d4:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
   824d8:	d128      	bne.n	8252c <SCPI_ErrorTranslate+0x7c>
   824da:	e013      	b.n	82504 <SCPI_ErrorTranslate+0x54>
   824dc:	f110 0f66 	cmn.w	r0, #102	; 0x66
   824e0:	d029      	beq.n	82536 <SCPI_ErrorTranslate+0x86>
   824e2:	2800      	cmp	r0, #0
   824e4:	d122      	bne.n	8252c <SCPI_ErrorTranslate+0x7c>
        case 0: return "No error";
   824e6:	f64d 00ec 	movw	r0, #55532	; 0xd8ec
   824ea:	f2c0 0008 	movt	r0, #8
   824ee:	4770      	bx	lr
        case SCPI_ERROR_SYNTAX: return "Syntax error";
        case SCPI_ERROR_INVALID_SEPARATOR: return "Invalid separator";
   824f0:	f64d 1008 	movw	r0, #55560	; 0xd908
   824f4:	f2c0 0008 	movt	r0, #8
   824f8:	4770      	bx	lr
        case SCPI_ERROR_UNDEFINED_HEADER: return "Undefined header";
   824fa:	f64d 101c 	movw	r0, #55580	; 0xd91c
   824fe:	f2c0 0008 	movt	r0, #8
   82502:	4770      	bx	lr
        case SCPI_ERROR_PARAMETER_NOT_ALLOWED: return "Parameter not allowed";
   82504:	f64d 1030 	movw	r0, #55600	; 0xd930
   82508:	f2c0 0008 	movt	r0, #8
   8250c:	4770      	bx	lr
        case SCPI_ERROR_MISSING_PARAMETER: return "Missing parameter";
   8250e:	f64d 1048 	movw	r0, #55624	; 0xd948
   82512:	f2c0 0008 	movt	r0, #8
   82516:	4770      	bx	lr
        case SCPI_ERROR_INVALID_SUFFIX: return "Invalid suffix";
   82518:	f64d 105c 	movw	r0, #55644	; 0xd95c
   8251c:	f2c0 0008 	movt	r0, #8
   82520:	4770      	bx	lr
        case SCPI_ERROR_SUFFIX_NOT_ALLOWED: return "Suffix not allowed";
   82522:	f64d 106c 	movw	r0, #55660	; 0xd96c
   82526:	f2c0 0008 	movt	r0, #8
   8252a:	4770      	bx	lr
        default: return "Unknown error";
   8252c:	f64d 1080 	movw	r0, #55680	; 0xd980
   82530:	f2c0 0008 	movt	r0, #8
   82534:	4770      	bx	lr
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
    switch (err) {
        case 0: return "No error";
        case SCPI_ERROR_SYNTAX: return "Syntax error";
   82536:	f64d 00f8 	movw	r0, #55544	; 0xd8f8
   8253a:	f2c0 0008 	movt	r0, #8
        case SCPI_ERROR_MISSING_PARAMETER: return "Missing parameter";
        case SCPI_ERROR_INVALID_SUFFIX: return "Invalid suffix";
        case SCPI_ERROR_SUFFIX_NOT_ALLOWED: return "Suffix not allowed";
        default: return "Unknown error";
    }
}
   8253e:	4770      	bx	lr

00082540 <fifo_init>:

#include "fifo.h"

void fifo_init(fifo_t * fifo) {
    fifo->wr = 0;
   82540:	f04f 0300 	mov.w	r3, #0
   82544:	8003      	strh	r3, [r0, #0]
    fifo->rd = 0;
   82546:	8043      	strh	r3, [r0, #2]
    fifo->size = FIFO_SIZE;
   82548:	f04f 0110 	mov.w	r1, #16
   8254c:	8081      	strh	r1, [r0, #4]
   8254e:	4770      	bx	lr

00082550 <fifo_clear>:
}

void fifo_clear(fifo_t * fifo) {
    fifo->wr = 0;
   82550:	f04f 0300 	mov.w	r3, #0
   82554:	8003      	strh	r3, [r0, #0]
    fifo->rd = 0;
   82556:	8043      	strh	r3, [r0, #2]
   82558:	4770      	bx	lr
   8255a:	bf00      	nop

0008255c <fifo_remove>:
    fifo->wr = (fifo->wr + 1) % (fifo->size + 1);

    return TRUE;
}

bool_t fifo_remove(fifo_t * fifo, int16_t * value) {
   8255c:	b410      	push	{r4}
    /* FIFO empty? */
    if (fifo->wr == fifo->rd) {
   8255e:	8843      	ldrh	r3, [r0, #2]
   82560:	f9b0 4000 	ldrsh.w	r4, [r0]
   82564:	b21a      	sxth	r2, r3
   82566:	4294      	cmp	r4, r2
   82568:	d014      	beq.n	82594 <fifo_remove+0x38>
        return FALSE;
    }

    if(value) {
   8256a:	b119      	cbz	r1, 82574 <fifo_remove+0x18>
        *value = fifo->data[fifo->rd];
   8256c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
   82570:	88d3      	ldrh	r3, [r2, #6]
   82572:	800b      	strh	r3, [r1, #0]
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size + 1);
   82574:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   82578:	f102 0201 	add.w	r2, r2, #1
   8257c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   82580:	f103 0301 	add.w	r3, r3, #1
   82584:	fb92 f1f3 	sdiv	r1, r2, r3
   82588:	fb03 2211 	mls	r2, r3, r1, r2
   8258c:	8042      	strh	r2, [r0, #2]

    return TRUE;
   8258e:	f04f 0001 	mov.w	r0, #1
   82592:	e001      	b.n	82598 <fifo_remove+0x3c>
}

bool_t fifo_remove(fifo_t * fifo, int16_t * value) {
    /* FIFO empty? */
    if (fifo->wr == fifo->rd) {
        return FALSE;
   82594:	f04f 0000 	mov.w	r0, #0
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size + 1);

    return TRUE;
}
   82598:	bc10      	pop	{r4}
   8259a:	4770      	bx	lr

0008259c <fifo_add>:
void fifo_clear(fifo_t * fifo) {
    fifo->wr = 0;
    fifo->rd = 0;
}

bool_t fifo_add(fifo_t * fifo, int16_t value) {
   8259c:	b538      	push	{r3, r4, r5, lr}
   8259e:	4604      	mov	r4, r0
   825a0:	460d      	mov	r5, r1
    /* FIFO full? */
    if (fifo->wr == ((fifo->rd + fifo->size) % (fifo->size + 1))) {
   825a2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   825a6:	f9b0 1000 	ldrsh.w	r1, [r0]
   825aa:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   825ae:	18d2      	adds	r2, r2, r3
   825b0:	f103 0301 	add.w	r3, r3, #1
   825b4:	fb92 f0f3 	sdiv	r0, r2, r3
   825b8:	fb03 2310 	mls	r3, r3, r0, r2
   825bc:	4299      	cmp	r1, r3
   825be:	d107      	bne.n	825d0 <fifo_add+0x34>
        fifo_remove(fifo, NULL);
   825c0:	4620      	mov	r0, r4
   825c2:	f04f 0100 	mov.w	r1, #0
   825c6:	f242 525d 	movw	r2, #9565	; 0x255d
   825ca:	f2c0 0208 	movt	r2, #8
   825ce:	4790      	blx	r2
    }

    fifo->data[fifo->wr] = value;
   825d0:	f9b4 0000 	ldrsh.w	r0, [r4]
   825d4:	eb04 0140 	add.w	r1, r4, r0, lsl #1
   825d8:	80cd      	strh	r5, [r1, #6]
    fifo->wr = (fifo->wr + 1) % (fifo->size + 1);
   825da:	f100 0001 	add.w	r0, r0, #1
   825de:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   825e2:	f103 0301 	add.w	r3, r3, #1
   825e6:	fb90 f2f3 	sdiv	r2, r0, r3
   825ea:	fb03 0012 	mls	r0, r3, r2, r0
   825ee:	8020      	strh	r0, [r4, #0]

    return TRUE;
}
   825f0:	f04f 0001 	mov.w	r0, #1
   825f4:	bd38      	pop	{r3, r4, r5, pc}
   825f6:	bf00      	nop

000825f8 <fifo_count>:

    return TRUE;
}

bool_t fifo_count(fifo_t * fifo, int16_t * value) {
    *value = fifo->wr - fifo->rd;
   825f8:	8802      	ldrh	r2, [r0, #0]
   825fa:	8843      	ldrh	r3, [r0, #2]
   825fc:	1ad2      	subs	r2, r2, r3
   825fe:	b292      	uxth	r2, r2
   82600:	b293      	uxth	r3, r2
   82602:	800b      	strh	r3, [r1, #0]
    if (*value < 0) {
   82604:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   82608:	d004      	beq.n	82614 <fifo_count+0x1c>
        *value += (fifo->size + 1);
   8260a:	8880      	ldrh	r0, [r0, #4]
   8260c:	f100 0001 	add.w	r0, r0, #1
   82610:	1812      	adds	r2, r2, r0
   82612:	800a      	strh	r2, [r1, #0]
    }
    return TRUE;
}
   82614:	f04f 0001 	mov.w	r0, #1
   82618:	4770      	bx	lr
   8261a:	bf00      	nop

0008261c <SCPI_RegGet>:
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
    if ((name < SCPI_REG_COUNT) && (context->registers != NULL)) {
   8261c:	2907      	cmp	r1, #7
   8261e:	d804      	bhi.n	8262a <SCPI_RegGet+0xe>
   82620:	6b03      	ldr	r3, [r0, #48]	; 0x30
   82622:	b12b      	cbz	r3, 82630 <SCPI_RegGet+0x14>
        return context->registers[name];
   82624:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
   82628:	4770      	bx	lr
    } else {
        return 0;
   8262a:	f04f 0000 	mov.w	r0, #0
   8262e:	4770      	bx	lr
   82630:	f04f 0000 	mov.w	r0, #0
    }
}
   82634:	4770      	bx	lr
   82636:	bf00      	nop

00082638 <SCPI_RegClearBits>:
/**
 * Clear register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegClearBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
   82638:	b570      	push	{r4, r5, r6, lr}
   8263a:	4605      	mov	r5, r0
   8263c:	460c      	mov	r4, r1
   8263e:	4616      	mov	r6, r2
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
   82640:	f242 631d 	movw	r3, #9757	; 0x261d
   82644:	f2c0 0308 	movt	r3, #8
   82648:	4798      	blx	r3
   8264a:	ea20 0206 	bic.w	r2, r0, r6
   8264e:	4628      	mov	r0, r5
   82650:	4621      	mov	r1, r4
   82652:	b292      	uxth	r2, r2
   82654:	f242 6395 	movw	r3, #9877	; 0x2695
   82658:	f2c0 0308 	movt	r3, #8
   8265c:	4798      	blx	r3
   8265e:	bd70      	pop	{r4, r5, r6, pc}

00082660 <regUpdateSTB>:
 * @param context
 * @param val value of register
 * @param mask name of mask register (enable register)
 * @param stbBits bits to clear or set in STB
 */
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
   82660:	b570      	push	{r4, r5, r6, lr}
   82662:	4605      	mov	r5, r0
   82664:	460e      	mov	r6, r1
   82666:	461c      	mov	r4, r3
    if (val & SCPI_RegGet(context, mask)) {
   82668:	4611      	mov	r1, r2
   8266a:	f242 631d 	movw	r3, #9757	; 0x261d
   8266e:	f2c0 0308 	movt	r3, #8
   82672:	4798      	blx	r3
   82674:	4230      	tst	r0, r6
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
   82676:	4628      	mov	r0, r5
   82678:	f04f 0100 	mov.w	r1, #0
   8267c:	4622      	mov	r2, r4
   8267e:	bf19      	ittee	ne
   82680:	f242 73a9 	movwne	r3, #10153	; 0x27a9
   82684:	f2c0 0308 	movtne	r3, #8
    } else {
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
   82688:	f242 6339 	movweq	r3, #9785	; 0x2639
   8268c:	f2c0 0308 	movteq	r3, #8
   82690:	4798      	blx	r3
   82692:	bd70      	pop	{r4, r5, r6, pc}

00082694 <SCPI_RegSet>:
/**
 * Set register value
 * @param name - register name
 * @param val - new value
 */
void SCPI_RegSet(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t val) {
   82694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82696:	4605      	mov	r5, r0
   82698:	460c      	mov	r4, r1
   8269a:	4616      	mov	r6, r2
    bool_t srq = FALSE;
    scpi_reg_val_t mask;
    scpi_reg_val_t old_val;

    if ((name >= SCPI_REG_COUNT) || (context->registers == NULL)) {
   8269c:	2907      	cmp	r1, #7
   8269e:	f200 8081 	bhi.w	827a4 <SCPI_RegSet+0x110>
   826a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
   826a4:	2b00      	cmp	r3, #0
   826a6:	d07d      	beq.n	827a4 <SCPI_RegSet+0x110>
        return;
    }
    
    /* store old register value */
    old_val = context->registers[name];
   826a8:	f833 7011 	ldrh.w	r7, [r3, r1, lsl #1]

    /* set register value */
    context->registers[name] = val;
   826ac:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

    /** @TODO: remove recutsion */
    switch (name) {
   826b0:	2907      	cmp	r1, #7
   826b2:	d857      	bhi.n	82764 <SCPI_RegSet+0xd0>
   826b4:	e8df f001 	tbb	[pc, r1]
   826b8:	281d1504 	.word	0x281d1504
   826bc:	3b304e43 	.word	0x3b304e43
        case SCPI_REG_STB:
            mask = SCPI_RegGet(context, SCPI_REG_SRE);
   826c0:	f04f 0101 	mov.w	r1, #1
   826c4:	f242 621d 	movw	r2, #9757	; 0x261d
   826c8:	f2c0 0208 	movt	r2, #8
   826cc:	4790      	blx	r2
            mask &= ~STB_SRQ;
   826ce:	f64f 71bf 	movw	r1, #65471	; 0xffbf
   826d2:	4031      	ands	r1, r6
            if (val & mask) {
   826d4:	4201      	tst	r1, r0
   826d6:	d052      	beq.n	8277e <SCPI_RegSet+0xea>
                val |= STB_SRQ;
   826d8:	f046 0640 	orr.w	r6, r6, #64	; 0x40
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
   826dc:	42b7      	cmp	r7, r6
   826de:	d153      	bne.n	82788 <SCPI_RegSet+0xf4>
   826e0:	e04e      	b.n	82780 <SCPI_RegSet+0xec>
            } else {
                val &= ~STB_SRQ;
            }
            break;
        case SCPI_REG_SRE:
            regUpdate(context, SCPI_REG_STB);
   826e2:	f04f 0100 	mov.w	r1, #0
   826e6:	f242 73d1 	movw	r3, #10193	; 0x27d1
   826ea:	f2c0 0308 	movt	r3, #8
   826ee:	4798      	blx	r3
            break;
   826f0:	e046      	b.n	82780 <SCPI_RegSet+0xec>
        case SCPI_REG_ESR:
            regUpdateSTB(context, val, SCPI_REG_ESE, STB_ESR);
   826f2:	4611      	mov	r1, r2
   826f4:	f04f 0203 	mov.w	r2, #3
   826f8:	f04f 0320 	mov.w	r3, #32
   826fc:	f242 6761 	movw	r7, #9825	; 0x2661
   82700:	f2c0 0708 	movt	r7, #8
   82704:	47b8      	blx	r7
            break;
   82706:	e03b      	b.n	82780 <SCPI_RegSet+0xec>
        case SCPI_REG_ESE:
            regUpdate(context, SCPI_REG_ESR);
   82708:	f04f 0102 	mov.w	r1, #2
   8270c:	f242 72d1 	movw	r2, #10193	; 0x27d1
   82710:	f2c0 0208 	movt	r2, #8
   82714:	4790      	blx	r2
            break;
   82716:	e033      	b.n	82780 <SCPI_RegSet+0xec>
        case SCPI_REG_QUES:
            regUpdateSTB(context, val, SCPI_REG_QUESE, STB_QES);
   82718:	4611      	mov	r1, r2
   8271a:	f04f 0207 	mov.w	r2, #7
   8271e:	f04f 0308 	mov.w	r3, #8
   82722:	f242 6761 	movw	r7, #9825	; 0x2661
   82726:	f2c0 0708 	movt	r7, #8
   8272a:	47b8      	blx	r7
            break;
   8272c:	e028      	b.n	82780 <SCPI_RegSet+0xec>
        case SCPI_REG_QUESE:
            regUpdate(context, SCPI_REG_QUES);
   8272e:	f04f 0106 	mov.w	r1, #6
   82732:	f242 72d1 	movw	r2, #10193	; 0x27d1
   82736:	f2c0 0208 	movt	r2, #8
   8273a:	4790      	blx	r2
            break;
   8273c:	e020      	b.n	82780 <SCPI_RegSet+0xec>
        case SCPI_REG_OPER:
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
   8273e:	4611      	mov	r1, r2
   82740:	f04f 0205 	mov.w	r2, #5
   82744:	f04f 0380 	mov.w	r3, #128	; 0x80
   82748:	f242 6761 	movw	r7, #9825	; 0x2661
   8274c:	f2c0 0708 	movt	r7, #8
   82750:	47b8      	blx	r7
            break;
   82752:	e015      	b.n	82780 <SCPI_RegSet+0xec>
        case SCPI_REG_OPERE:
            regUpdate(context, SCPI_REG_OPER);
   82754:	f04f 0104 	mov.w	r1, #4
   82758:	f242 73d1 	movw	r3, #10193	; 0x27d1
   8275c:	f2c0 0308 	movt	r3, #8
   82760:	4798      	blx	r3
            break;
   82762:	e00d      	b.n	82780 <SCPI_RegSet+0xec>
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
   82764:	6b00      	ldr	r0, [r0, #48]	; 0x30
   82766:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
   8276a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
    if (context && context->interface && context->interface->control) {
   8276c:	69e9      	ldr	r1, [r5, #28]
   8276e:	b1c9      	cbz	r1, 827a4 <SCPI_RegSet+0x110>
   82770:	688b      	ldr	r3, [r1, #8]
   82772:	b1bb      	cbz	r3, 827a4 <SCPI_RegSet+0x110>
        return context->interface->control(context, ctrl, val);
   82774:	4628      	mov	r0, r5
   82776:	f04f 0101 	mov.w	r1, #1
   8277a:	4798      	blx	r3
   8277c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
                    srq = TRUE;
                }
            } else {
                val &= ~STB_SRQ;
   8277e:	460e      	mov	r6, r1
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
   82780:	6b28      	ldr	r0, [r5, #48]	; 0x30
   82782:	f820 6014 	strh.w	r6, [r0, r4, lsl #1]
   82786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82788:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8278a:	f823 6014 	strh.w	r6, [r3, r4, lsl #1]

    if (srq) {
        writeControl(context, SCPI_CTRL_SRQ, SCPI_RegGet(context, SCPI_REG_STB));
   8278e:	4628      	mov	r0, r5
   82790:	f04f 0100 	mov.w	r1, #0
   82794:	f242 621d 	movw	r2, #9757	; 0x261d
   82798:	f2c0 0208 	movt	r2, #8
   8279c:	4790      	blx	r2
   8279e:	4602      	mov	r2, r0
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
    if (context && context->interface && context->interface->control) {
   827a0:	2d00      	cmp	r5, #0
   827a2:	d1e3      	bne.n	8276c <SCPI_RegSet+0xd8>
   827a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   827a6:	bf00      	nop

000827a8 <SCPI_RegSetBits>:
/**
 * Set register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegSetBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
   827a8:	b570      	push	{r4, r5, r6, lr}
   827aa:	4605      	mov	r5, r0
   827ac:	460c      	mov	r4, r1
   827ae:	4616      	mov	r6, r2
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
   827b0:	f242 631d 	movw	r3, #9757	; 0x261d
   827b4:	f2c0 0308 	movt	r3, #8
   827b8:	4798      	blx	r3
   827ba:	ea40 0206 	orr.w	r2, r0, r6
   827be:	4628      	mov	r0, r5
   827c0:	4621      	mov	r1, r4
   827c2:	b292      	uxth	r2, r2
   827c4:	f242 6395 	movw	r3, #9877	; 0x2695
   827c8:	f2c0 0308 	movt	r3, #8
   827cc:	4798      	blx	r3
   827ce:	bd70      	pop	{r4, r5, r6, pc}

000827d0 <regUpdate>:
/**
 * Update register value
 * @param context
 * @param name - register name
 */
static void regUpdate(scpi_t * context, scpi_reg_name_t name) {
   827d0:	b538      	push	{r3, r4, r5, lr}
   827d2:	4605      	mov	r5, r0
   827d4:	460c      	mov	r4, r1
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
   827d6:	f242 631d 	movw	r3, #9757	; 0x261d
   827da:	f2c0 0308 	movt	r3, #8
   827de:	4798      	blx	r3
   827e0:	4602      	mov	r2, r0
   827e2:	4628      	mov	r0, r5
   827e4:	4621      	mov	r1, r4
   827e6:	f242 6395 	movw	r3, #9877	; 0x2695
   827ea:	f2c0 0308 	movt	r3, #8
   827ee:	4798      	blx	r3
   827f0:	bd38      	pop	{r3, r4, r5, pc}
   827f2:	bf00      	nop

000827f4 <SCPI_EventClear>:

/**
 * Clear event register
 * @param context
 */
void SCPI_EventClear(scpi_t * context) {
   827f4:	b508      	push	{r3, lr}
    /* TODO */
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
   827f6:	f04f 0102 	mov.w	r1, #2
   827fa:	f04f 0200 	mov.w	r2, #0
   827fe:	f242 6395 	movw	r3, #9877	; 0x2695
   82802:	f2c0 0308 	movt	r3, #8
   82806:	4798      	blx	r3
   82808:	bd08      	pop	{r3, pc}
   8280a:	bf00      	nop

0008280c <SCPI_CoreCls>:
 * *CLS - This command clears all status data structures in a device. 
 *        For a device which minimally complies with SCPI. (SCPI std 4.1.3.2)
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreCls(scpi_t * context) {
   8280c:	b538      	push	{r3, r4, r5, lr}
   8280e:	4604      	mov	r4, r0
    SCPI_EventClear(context);
   82810:	f242 73f5 	movw	r3, #10229	; 0x27f5
   82814:	f2c0 0308 	movt	r3, #8
   82818:	4798      	blx	r3
    SCPI_ErrorClear(context);
   8281a:	4620      	mov	r0, r4
   8281c:	f242 312d 	movw	r1, #9005	; 0x232d
   82820:	f2c0 0108 	movt	r1, #8
   82824:	4788      	blx	r1
    SCPI_RegSet(context, SCPI_REG_OPER, 0);
   82826:	4620      	mov	r0, r4
   82828:	f04f 0104 	mov.w	r1, #4
   8282c:	f04f 0200 	mov.w	r2, #0
   82830:	f242 6595 	movw	r5, #9877	; 0x2695
   82834:	f2c0 0508 	movt	r5, #8
   82838:	47a8      	blx	r5
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
   8283a:	4620      	mov	r0, r4
   8283c:	f04f 0106 	mov.w	r1, #6
   82840:	f04f 0200 	mov.w	r2, #0
   82844:	47a8      	blx	r5
    return SCPI_RES_OK;
}
   82846:	f04f 0001 	mov.w	r0, #1
   8284a:	bd38      	pop	{r3, r4, r5, pc}

0008284c <SCPI_CoreEse>:
/**
 * *ESE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEse(scpi_t * context) {
   8284c:	b510      	push	{r4, lr}
   8284e:	b082      	sub	sp, #8
   82850:	4604      	mov	r4, r0
    int32_t new_ESE;
    if (SCPI_ParamInt(context, &new_ESE, TRUE)) {
   82852:	a901      	add	r1, sp, #4
   82854:	f04f 0201 	mov.w	r2, #1
   82858:	f243 0331 	movw	r3, #12337	; 0x3031
   8285c:	f2c0 0308 	movt	r3, #8
   82860:	4798      	blx	r3
   82862:	b148      	cbz	r0, 82878 <SCPI_CoreEse+0x2c>
        SCPI_RegSet(context, SCPI_REG_ESE, new_ESE);
   82864:	4620      	mov	r0, r4
   82866:	f04f 0103 	mov.w	r1, #3
   8286a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   8286e:	f242 6395 	movw	r3, #9877	; 0x2695
   82872:	f2c0 0308 	movt	r3, #8
   82876:	4798      	blx	r3
    }
    return SCPI_RES_OK;
}
   82878:	f04f 0001 	mov.w	r0, #1
   8287c:	b002      	add	sp, #8
   8287e:	bd10      	pop	{r4, pc}

00082880 <SCPI_CoreEseQ>:
/**
 * *ESE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEseQ(scpi_t * context) {
   82880:	b510      	push	{r4, lr}
   82882:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_ESE));
   82884:	f04f 0103 	mov.w	r1, #3
   82888:	f242 631d 	movw	r3, #9757	; 0x261d
   8288c:	f2c0 0308 	movt	r3, #8
   82890:	4798      	blx	r3
   82892:	4601      	mov	r1, r0
   82894:	4620      	mov	r0, r4
   82896:	f642 7219 	movw	r2, #12057	; 0x2f19
   8289a:	f2c0 0208 	movt	r2, #8
   8289e:	4790      	blx	r2
    return SCPI_RES_OK;
}
   828a0:	f04f 0001 	mov.w	r0, #1
   828a4:	bd10      	pop	{r4, pc}
   828a6:	bf00      	nop

000828a8 <SCPI_CoreEsrQ>:
/**
 * *ESR?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEsrQ(scpi_t * context) {
   828a8:	b510      	push	{r4, lr}
   828aa:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_ESR));
   828ac:	f04f 0102 	mov.w	r1, #2
   828b0:	f242 631d 	movw	r3, #9757	; 0x261d
   828b4:	f2c0 0308 	movt	r3, #8
   828b8:	4798      	blx	r3
   828ba:	4601      	mov	r1, r0
   828bc:	4620      	mov	r0, r4
   828be:	f642 7219 	movw	r2, #12057	; 0x2f19
   828c2:	f2c0 0208 	movt	r2, #8
   828c6:	4790      	blx	r2
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
   828c8:	4620      	mov	r0, r4
   828ca:	f04f 0102 	mov.w	r1, #2
   828ce:	f04f 0200 	mov.w	r2, #0
   828d2:	f242 6395 	movw	r3, #9877	; 0x2695
   828d6:	f2c0 0308 	movt	r3, #8
   828da:	4798      	blx	r3
    return SCPI_RES_OK;
}
   828dc:	f04f 0001 	mov.w	r0, #1
   828e0:	bd10      	pop	{r4, pc}
   828e2:	bf00      	nop

000828e4 <SCPI_CoreIdnQ>:
/**
 * *IDN?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreIdnQ(scpi_t * context) {
   828e4:	b538      	push	{r3, r4, r5, lr}
   828e6:	4605      	mov	r5, r0
    SCPI_ResultString(context, SCPI_MANUFACTURE);
   828e8:	f64d 1190 	movw	r1, #55696	; 0xd990
   828ec:	f2c0 0108 	movt	r1, #8
   828f0:	f642 64d9 	movw	r4, #11993	; 0x2ed9
   828f4:	f2c0 0408 	movt	r4, #8
   828f8:	47a0      	blx	r4
    SCPI_ResultString(context, SCPI_DEV_NAME);
   828fa:	4628      	mov	r0, r5
   828fc:	f64d 1198 	movw	r1, #55704	; 0xd998
   82900:	f2c0 0108 	movt	r1, #8
   82904:	47a0      	blx	r4
    SCPI_ResultString(context, SCPI_DEV_VERSION);
   82906:	4628      	mov	r0, r5
   82908:	f64d 11b8 	movw	r1, #55736	; 0xd9b8
   8290c:	f2c0 0108 	movt	r1, #8
   82910:	47a0      	blx	r4
    return SCPI_RES_OK;
}
   82912:	f04f 0001 	mov.w	r0, #1
   82916:	bd38      	pop	{r3, r4, r5, pc}

00082918 <SCPI_CoreOpc>:
/**
 * *OPC
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpc(scpi_t * context) {
   82918:	b508      	push	{r3, lr}
    SCPI_RegSetBits(context, SCPI_REG_ESR, ESR_OPC);
   8291a:	f04f 0102 	mov.w	r1, #2
   8291e:	f04f 0201 	mov.w	r2, #1
   82922:	f242 73a9 	movw	r3, #10153	; 0x27a9
   82926:	f2c0 0308 	movt	r3, #8
   8292a:	4798      	blx	r3
    return SCPI_RES_OK;
}
   8292c:	f04f 0001 	mov.w	r0, #1
   82930:	bd08      	pop	{r3, pc}
   82932:	bf00      	nop

00082934 <SCPI_CoreOpcQ>:
/**
 * *OPC?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpcQ(scpi_t * context) {
   82934:	b508      	push	{r3, lr}
    /* Operation is always completed */
    SCPI_ResultInt(context, 1);
   82936:	f04f 0101 	mov.w	r1, #1
   8293a:	f642 7319 	movw	r3, #12057	; 0x2f19
   8293e:	f2c0 0308 	movt	r3, #8
   82942:	4798      	blx	r3
    return SCPI_RES_OK;
}
   82944:	f04f 0001 	mov.w	r0, #1
   82948:	bd08      	pop	{r3, pc}
   8294a:	bf00      	nop

0008294c <SCPI_CoreRst>:
/**
 * *RST
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreRst(scpi_t * context) {
   8294c:	b508      	push	{r3, lr}
    if (context && context->interface && context->interface->reset) {
   8294e:	b128      	cbz	r0, 8295c <SCPI_CoreRst+0x10>
   82950:	69c3      	ldr	r3, [r0, #28]
   82952:	b133      	cbz	r3, 82962 <SCPI_CoreRst+0x16>
   82954:	6919      	ldr	r1, [r3, #16]
   82956:	b139      	cbz	r1, 82968 <SCPI_CoreRst+0x1c>
        return context->interface->reset(context);
   82958:	4788      	blx	r1
   8295a:	e007      	b.n	8296c <SCPI_CoreRst+0x20>
    }
    return SCPI_RES_OK;
   8295c:	f04f 0001 	mov.w	r0, #1
   82960:	e004      	b.n	8296c <SCPI_CoreRst+0x20>
   82962:	f04f 0001 	mov.w	r0, #1
   82966:	e001      	b.n	8296c <SCPI_CoreRst+0x20>
   82968:	f04f 0001 	mov.w	r0, #1
}
   8296c:	b240      	sxtb	r0, r0
   8296e:	bd08      	pop	{r3, pc}

00082970 <SCPI_CoreSre>:
/**
 * *SRE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSre(scpi_t * context) {
   82970:	b510      	push	{r4, lr}
   82972:	b082      	sub	sp, #8
   82974:	4604      	mov	r4, r0
    int32_t new_SRE;
    if (SCPI_ParamInt(context, &new_SRE, TRUE)) {
   82976:	a901      	add	r1, sp, #4
   82978:	f04f 0201 	mov.w	r2, #1
   8297c:	f243 0331 	movw	r3, #12337	; 0x3031
   82980:	f2c0 0308 	movt	r3, #8
   82984:	4798      	blx	r3
   82986:	b148      	cbz	r0, 8299c <SCPI_CoreSre+0x2c>
        SCPI_RegSet(context, SCPI_REG_SRE, new_SRE);
   82988:	4620      	mov	r0, r4
   8298a:	f04f 0101 	mov.w	r1, #1
   8298e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   82992:	f242 6395 	movw	r3, #9877	; 0x2695
   82996:	f2c0 0308 	movt	r3, #8
   8299a:	4798      	blx	r3
    }
    return SCPI_RES_OK;
}
   8299c:	f04f 0001 	mov.w	r0, #1
   829a0:	b002      	add	sp, #8
   829a2:	bd10      	pop	{r4, pc}

000829a4 <SCPI_CoreSreQ>:
/**
 * *SRE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSreQ(scpi_t * context) {
   829a4:	b510      	push	{r4, lr}
   829a6:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_SRE));
   829a8:	f04f 0101 	mov.w	r1, #1
   829ac:	f242 631d 	movw	r3, #9757	; 0x261d
   829b0:	f2c0 0308 	movt	r3, #8
   829b4:	4798      	blx	r3
   829b6:	4601      	mov	r1, r0
   829b8:	4620      	mov	r0, r4
   829ba:	f642 7219 	movw	r2, #12057	; 0x2f19
   829be:	f2c0 0208 	movt	r2, #8
   829c2:	4790      	blx	r2
    return SCPI_RES_OK;
}
   829c4:	f04f 0001 	mov.w	r0, #1
   829c8:	bd10      	pop	{r4, pc}
   829ca:	bf00      	nop

000829cc <SCPI_CoreStbQ>:
/**
 * *STB?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreStbQ(scpi_t * context) {
   829cc:	b510      	push	{r4, lr}
   829ce:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_STB));
   829d0:	f04f 0100 	mov.w	r1, #0
   829d4:	f242 631d 	movw	r3, #9757	; 0x261d
   829d8:	f2c0 0308 	movt	r3, #8
   829dc:	4798      	blx	r3
   829de:	4601      	mov	r1, r0
   829e0:	4620      	mov	r0, r4
   829e2:	f642 7219 	movw	r2, #12057	; 0x2f19
   829e6:	f2c0 0208 	movt	r2, #8
   829ea:	4790      	blx	r2
    return SCPI_RES_OK;
}
   829ec:	f04f 0001 	mov.w	r0, #1
   829f0:	bd10      	pop	{r4, pc}
   829f2:	bf00      	nop

000829f4 <SCPI_CoreTstQ>:
/**
 * *TST?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreTstQ(scpi_t * context) {
   829f4:	b510      	push	{r4, lr}
    int result = 0;
    if (context && context->interface && context->interface->test) {
   829f6:	4604      	mov	r4, r0
   829f8:	b130      	cbz	r0, 82a08 <SCPI_CoreTstQ+0x14>
   829fa:	69c3      	ldr	r3, [r0, #28]
   829fc:	b13b      	cbz	r3, 82a0e <SCPI_CoreTstQ+0x1a>
   829fe:	6959      	ldr	r1, [r3, #20]
   82a00:	b141      	cbz	r1, 82a14 <SCPI_CoreTstQ+0x20>
        result = context->interface->test(context);
   82a02:	4788      	blx	r1
   82a04:	4601      	mov	r1, r0
   82a06:	e007      	b.n	82a18 <SCPI_CoreTstQ+0x24>
 * *TST?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreTstQ(scpi_t * context) {
    int result = 0;
   82a08:	f04f 0100 	mov.w	r1, #0
   82a0c:	e004      	b.n	82a18 <SCPI_CoreTstQ+0x24>
   82a0e:	f04f 0100 	mov.w	r1, #0
   82a12:	e001      	b.n	82a18 <SCPI_CoreTstQ+0x24>
   82a14:	f04f 0100 	mov.w	r1, #0
    if (context && context->interface && context->interface->test) {
        result = context->interface->test(context);
    }
    SCPI_ResultInt(context, result);
   82a18:	4620      	mov	r0, r4
   82a1a:	f642 7219 	movw	r2, #12057	; 0x2f19
   82a1e:	f2c0 0208 	movt	r2, #8
   82a22:	4790      	blx	r2
    return SCPI_RES_OK;
}
   82a24:	f04f 0001 	mov.w	r0, #1
   82a28:	bd10      	pop	{r4, pc}
   82a2a:	bf00      	nop

00082a2c <SCPI_CoreWai>:
 */
scpi_result_t SCPI_CoreWai(scpi_t * context) {
    (void) context;
    /* NOP */
    return SCPI_RES_OK;
}
   82a2c:	f04f 0001 	mov.w	r0, #1
   82a30:	4770      	bx	lr
   82a32:	bf00      	nop

00082a34 <SCPI_StubQ>:
/**
 * Query command stub function
 * @param context
 * @return 
 */
scpi_result_t SCPI_StubQ(scpi_t * context) {
   82a34:	b508      	push	{r3, lr}
    SCPI_ResultString(context, "");
   82a36:	f64d 5118 	movw	r1, #56600	; 0xdd18
   82a3a:	f2c0 0108 	movt	r1, #8
   82a3e:	f642 63d9 	movw	r3, #11993	; 0x2ed9
   82a42:	f2c0 0308 	movt	r3, #8
   82a46:	4798      	blx	r3
    return SCPI_RES_OK;
}
   82a48:	f04f 0001 	mov.w	r0, #1
   82a4c:	bd08      	pop	{r3, pc}
   82a4e:	bf00      	nop

00082a50 <SCPI_SystemVersionQ>:
/**
 * SYSTem:VERSion?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemVersionQ(scpi_t * context) {
   82a50:	b508      	push	{r3, lr}
    SCPI_ResultString(context, SCPI_DEV_VERSION);
   82a52:	f64d 11b8 	movw	r1, #55736	; 0xd9b8
   82a56:	f2c0 0108 	movt	r1, #8
   82a5a:	f642 63d9 	movw	r3, #11993	; 0x2ed9
   82a5e:	f2c0 0308 	movt	r3, #8
   82a62:	4798      	blx	r3
    return SCPI_RES_OK;
}
   82a64:	f04f 0001 	mov.w	r0, #1
   82a68:	bd08      	pop	{r3, pc}
   82a6a:	bf00      	nop

00082a6c <SCPI_SystemErrorNextQ>:
/**
 * SYSTem:ERRor[:NEXT]?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemErrorNextQ(scpi_t * context) {
   82a6c:	b538      	push	{r3, r4, r5, lr}
   82a6e:	4604      	mov	r4, r0
    int16_t err = SCPI_ErrorPop(context);
   82a70:	f242 333d 	movw	r3, #9021	; 0x233d
   82a74:	f2c0 0308 	movt	r3, #8
   82a78:	4798      	blx	r3
   82a7a:	4605      	mov	r5, r0

    SCPI_ResultInt(context, err);
   82a7c:	4620      	mov	r0, r4
   82a7e:	4629      	mov	r1, r5
   82a80:	f642 7219 	movw	r2, #12057	; 0x2f19
   82a84:	f2c0 0208 	movt	r2, #8
   82a88:	4790      	blx	r2
    SCPI_ResultText(context, SCPI_ErrorTranslate(err));
   82a8a:	4628      	mov	r0, r5
   82a8c:	f242 41b1 	movw	r1, #9393	; 0x24b1
   82a90:	f2c0 0108 	movt	r1, #8
   82a94:	4788      	blx	r1
   82a96:	4601      	mov	r1, r0
   82a98:	4620      	mov	r0, r4
   82a9a:	f642 7361 	movw	r3, #12129	; 0x2f61
   82a9e:	f2c0 0308 	movt	r3, #8
   82aa2:	4798      	blx	r3

    return SCPI_RES_OK;
}
   82aa4:	f04f 0001 	mov.w	r0, #1
   82aa8:	bd38      	pop	{r3, r4, r5, pc}
   82aaa:	bf00      	nop

00082aac <SCPI_SystemErrorCountQ>:
/**
 * SYSTem:ERRor:COUNt?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemErrorCountQ(scpi_t * context) {
   82aac:	b510      	push	{r4, lr}
   82aae:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_ErrorCount(context));
   82ab0:	f242 3361 	movw	r3, #9057	; 0x2361
   82ab4:	f2c0 0308 	movt	r3, #8
   82ab8:	4798      	blx	r3
   82aba:	4601      	mov	r1, r0
   82abc:	4620      	mov	r0, r4
   82abe:	f642 7219 	movw	r2, #12057	; 0x2f19
   82ac2:	f2c0 0208 	movt	r2, #8
   82ac6:	4790      	blx	r2

    return SCPI_RES_OK;
}
   82ac8:	f04f 0001 	mov.w	r0, #1
   82acc:	bd10      	pop	{r4, pc}
   82ace:	bf00      	nop

00082ad0 <SCPI_StatusQuestionableEventQ>:
/**
 * STATus:QUEStionable[:EVENt]?
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusQuestionableEventQ(scpi_t * context) {
   82ad0:	b510      	push	{r4, lr}
   82ad2:	4604      	mov	r4, r0
    /* return value */
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_QUES));
   82ad4:	f04f 0106 	mov.w	r1, #6
   82ad8:	f242 631d 	movw	r3, #9757	; 0x261d
   82adc:	f2c0 0308 	movt	r3, #8
   82ae0:	4798      	blx	r3
   82ae2:	4601      	mov	r1, r0
   82ae4:	4620      	mov	r0, r4
   82ae6:	f642 7219 	movw	r2, #12057	; 0x2f19
   82aea:	f2c0 0208 	movt	r2, #8
   82aee:	4790      	blx	r2

    /* clear register */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
   82af0:	4620      	mov	r0, r4
   82af2:	f04f 0106 	mov.w	r1, #6
   82af6:	f04f 0200 	mov.w	r2, #0
   82afa:	f242 6395 	movw	r3, #9877	; 0x2695
   82afe:	f2c0 0308 	movt	r3, #8
   82b02:	4798      	blx	r3

    return SCPI_RES_OK;
}
   82b04:	f04f 0001 	mov.w	r0, #1
   82b08:	bd10      	pop	{r4, pc}
   82b0a:	bf00      	nop

00082b0c <SCPI_StatusQuestionableEnableQ>:
/**
 * STATus:QUEStionable:ENABle?
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusQuestionableEnableQ(scpi_t * context) {
   82b0c:	b510      	push	{r4, lr}
   82b0e:	4604      	mov	r4, r0
    /* return value */
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_QUESE));
   82b10:	f04f 0107 	mov.w	r1, #7
   82b14:	f242 631d 	movw	r3, #9757	; 0x261d
   82b18:	f2c0 0308 	movt	r3, #8
   82b1c:	4798      	blx	r3
   82b1e:	4601      	mov	r1, r0
   82b20:	4620      	mov	r0, r4
   82b22:	f642 7219 	movw	r2, #12057	; 0x2f19
   82b26:	f2c0 0208 	movt	r2, #8
   82b2a:	4790      	blx	r2

    return SCPI_RES_OK;
}
   82b2c:	f04f 0001 	mov.w	r0, #1
   82b30:	bd10      	pop	{r4, pc}
   82b32:	bf00      	nop

00082b34 <SCPI_StatusQuestionableEnable>:
/**
 * STATus:QUEStionable:ENABle
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusQuestionableEnable(scpi_t * context) {
   82b34:	b510      	push	{r4, lr}
   82b36:	b082      	sub	sp, #8
   82b38:	4604      	mov	r4, r0
    int32_t new_QUESE;
    if (SCPI_ParamInt(context, &new_QUESE, TRUE)) {
   82b3a:	a901      	add	r1, sp, #4
   82b3c:	f04f 0201 	mov.w	r2, #1
   82b40:	f243 0331 	movw	r3, #12337	; 0x3031
   82b44:	f2c0 0308 	movt	r3, #8
   82b48:	4798      	blx	r3
   82b4a:	b148      	cbz	r0, 82b60 <SCPI_StatusQuestionableEnable+0x2c>
        SCPI_RegSet(context, SCPI_REG_QUESE, new_QUESE);
   82b4c:	4620      	mov	r0, r4
   82b4e:	f04f 0107 	mov.w	r1, #7
   82b52:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   82b56:	f242 6395 	movw	r3, #9877	; 0x2695
   82b5a:	f2c0 0308 	movt	r3, #8
   82b5e:	4798      	blx	r3
    }
    return SCPI_RES_OK;
}
   82b60:	f04f 0001 	mov.w	r0, #1
   82b64:	b002      	add	sp, #8
   82b66:	bd10      	pop	{r4, pc}

00082b68 <SCPI_StatusPreset>:
/**
 * STATus:PRESet
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusPreset(scpi_t * context) {
   82b68:	b508      	push	{r3, lr}
    /* clear STATUS:... */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
   82b6a:	f04f 0106 	mov.w	r1, #6
   82b6e:	f04f 0200 	mov.w	r2, #0
   82b72:	f242 6395 	movw	r3, #9877	; 0x2695
   82b76:	f2c0 0308 	movt	r3, #8
   82b7a:	4798      	blx	r3
    return SCPI_RES_OK;
}
   82b7c:	f04f 0001 	mov.w	r0, #1
   82b80:	bd08      	pop	{r3, pc}
   82b82:	bf00      	nop

00082b84 <writeData>:
 * @param context
 * @param data
 * @param len - lenght of data to be written
 * @return number of bytes written
 */
static size_t writeData(scpi_t * context, const char * data, size_t len) {
   82b84:	b508      	push	{r3, lr}
    return context->interface->write(context, data, len);
   82b86:	69c3      	ldr	r3, [r0, #28]
   82b88:	685b      	ldr	r3, [r3, #4]
   82b8a:	4798      	blx	r3
}
   82b8c:	bd08      	pop	{r3, pc}
   82b8e:	bf00      	nop

00082b90 <writeDelimiter>:
/**
 * Write result delimiter to output
 * @param context
 * @return number of bytes written
 */
static size_t writeDelimiter(scpi_t * context) {
   82b90:	b508      	push	{r3, lr}
    if (context->output_count > 0) {
   82b92:	6a03      	ldr	r3, [r0, #32]
   82b94:	2b00      	cmp	r3, #0
   82b96:	dd0b      	ble.n	82bb0 <writeDelimiter+0x20>
        return writeData(context, ", ", 2);
   82b98:	f64d 11c0 	movw	r1, #55744	; 0xd9c0
   82b9c:	f2c0 0108 	movt	r1, #8
   82ba0:	f04f 0202 	mov.w	r2, #2
   82ba4:	f642 3385 	movw	r3, #11141	; 0x2b85
   82ba8:	f2c0 0308 	movt	r3, #8
   82bac:	4798      	blx	r3
   82bae:	bd08      	pop	{r3, pc}
    } else {
        return 0;
   82bb0:	f04f 0000 	mov.w	r0, #0
    }
}
   82bb4:	bd08      	pop	{r3, pc}
   82bb6:	bf00      	nop

00082bb8 <paramSkipBytes>:
 * Skip num bytes from the begginig of parameters
 * @param context
 * @param num
 */
void paramSkipBytes(scpi_t * context, size_t num) {
    if (context->paramlist.length < num) {
   82bb8:	6983      	ldr	r3, [r0, #24]
   82bba:	4299      	cmp	r1, r3
   82bbc:	bf28      	it	cs
   82bbe:	4619      	movcs	r1, r3
        num = context->paramlist.length;
    }
    context->paramlist.parameters += num;
   82bc0:	6942      	ldr	r2, [r0, #20]
   82bc2:	1852      	adds	r2, r2, r1
   82bc4:	6142      	str	r2, [r0, #20]
    context->paramlist.length -= num;
   82bc6:	1a59      	subs	r1, r3, r1
   82bc8:	6181      	str	r1, [r0, #24]
   82bca:	4770      	bx	lr

00082bcc <paramSkipWhitespace>:

/**
 * Skip white spaces from the beggining of parameters
 * @param context
 */
void paramSkipWhitespace(scpi_t * context) {
   82bcc:	b510      	push	{r4, lr}
   82bce:	4604      	mov	r4, r0
    size_t ws = skipWhitespace(context->paramlist.parameters, context->paramlist.length);
   82bd0:	6940      	ldr	r0, [r0, #20]
   82bd2:	69a1      	ldr	r1, [r4, #24]
   82bd4:	f243 4319 	movw	r3, #13337	; 0x3419
   82bd8:	f2c0 0308 	movt	r3, #8
   82bdc:	4798      	blx	r3
   82bde:	4601      	mov	r1, r0
    paramSkipBytes(context, ws);
   82be0:	4620      	mov	r0, r4
   82be2:	f642 32b9 	movw	r2, #11193	; 0x2bb9
   82be6:	f2c0 0208 	movt	r2, #8
   82bea:	4790      	blx	r2
   82bec:	bd10      	pop	{r4, pc}
   82bee:	bf00      	nop

00082bf0 <paramNext>:
 * Find next parameter
 * @param context
 * @param mandatory
 * @return 
 */
bool_t paramNext(scpi_t * context, bool_t mandatory) {
   82bf0:	b538      	push	{r3, r4, r5, lr}
   82bf2:	4604      	mov	r4, r0
   82bf4:	460d      	mov	r5, r1
    paramSkipWhitespace(context);
   82bf6:	f642 33cd 	movw	r3, #11213	; 0x2bcd
   82bfa:	f2c0 0308 	movt	r3, #8
   82bfe:	4798      	blx	r3
    if (context->paramlist.length == 0) {
   82c00:	69a0      	ldr	r0, [r4, #24]
   82c02:	b960      	cbnz	r0, 82c1e <paramNext+0x2e>
        if (mandatory) {
   82c04:	2d00      	cmp	r5, #0
   82c06:	d031      	beq.n	82c6c <paramNext+0x7c>
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
   82c08:	4620      	mov	r0, r4
   82c0a:	f06f 016c 	mvn.w	r1, #108	; 0x6c
   82c0e:	f242 3285 	movw	r2, #9093	; 0x2385
   82c12:	f2c0 0208 	movt	r2, #8
   82c16:	4790      	blx	r2
        }
        return FALSE;
   82c18:	f04f 0000 	mov.w	r0, #0
   82c1c:	bd38      	pop	{r3, r4, r5, pc}
    }
    if (context->input_count != 0) {
   82c1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   82c20:	b1e9      	cbz	r1, 82c5e <paramNext+0x6e>
        if (context->paramlist.parameters[0] == ',') {
   82c22:	6962      	ldr	r2, [r4, #20]
   82c24:	7813      	ldrb	r3, [r2, #0]
   82c26:	2b2c      	cmp	r3, #44	; 0x2c
   82c28:	d10e      	bne.n	82c48 <paramNext+0x58>
            paramSkipBytes(context, 1);
   82c2a:	4620      	mov	r0, r4
   82c2c:	f04f 0101 	mov.w	r1, #1
   82c30:	f642 33b9 	movw	r3, #11193	; 0x2bb9
   82c34:	f2c0 0308 	movt	r3, #8
   82c38:	4798      	blx	r3
            paramSkipWhitespace(context);
   82c3a:	4620      	mov	r0, r4
   82c3c:	f642 31cd 	movw	r1, #11213	; 0x2bcd
   82c40:	f2c0 0108 	movt	r1, #8
   82c44:	4788      	blx	r1
   82c46:	e00a      	b.n	82c5e <paramNext+0x6e>
        } else {
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SEPARATOR);
   82c48:	4620      	mov	r0, r4
   82c4a:	f06f 0166 	mvn.w	r1, #102	; 0x66
   82c4e:	f242 3285 	movw	r2, #9093	; 0x2385
   82c52:	f2c0 0208 	movt	r2, #8
   82c56:	4790      	blx	r2
            return FALSE;
   82c58:	f04f 0000 	mov.w	r0, #0
   82c5c:	bd38      	pop	{r3, r4, r5, pc}
        }
    }
    context->input_count++;
   82c5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   82c60:	f100 0001 	add.w	r0, r0, #1
   82c64:	6260      	str	r0, [r4, #36]	; 0x24
    return TRUE;
   82c66:	f04f 0001 	mov.w	r0, #1
   82c6a:	bd38      	pop	{r3, r4, r5, pc}
    paramSkipWhitespace(context);
    if (context->paramlist.length == 0) {
        if (mandatory) {
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
        }
        return FALSE;
   82c6c:	f04f 0000 	mov.w	r0, #0
            return FALSE;
        }
    }
    context->input_count++;
    return TRUE;
}
   82c70:	bd38      	pop	{r3, r4, r5, pc}
   82c72:	bf00      	nop

00082c74 <cmdlineSeparator>:
 * Find command line separator
 * @param cmd - input command
 * @param len - max search length
 * @return pointer to line separator or NULL
 */
const char * cmdlineSeparator(const char * cmd, size_t len) {
   82c74:	b508      	push	{r3, lr}
    return strnpbrk(cmd, len, ";\r\n");
   82c76:	f64d 12c4 	movw	r2, #55748	; 0xd9c4
   82c7a:	f2c0 0208 	movt	r2, #8
   82c7e:	f243 03a9 	movw	r3, #12457	; 0x30a9
   82c82:	f2c0 0308 	movt	r3, #8
   82c86:	4798      	blx	r3
}
   82c88:	bd08      	pop	{r3, pc}
   82c8a:	bf00      	nop

00082c8c <SCPI_Parse>:
 * @param context
 * @param data - complete command line
 * @param len - command line length
 * @return 1 if the last evaluated command was found
 */
int SCPI_Parse(scpi_t * context, const char * data, size_t len) {
   82c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82c90:	b083      	sub	sp, #12
    int result = 0;
    const char * cmdline_end = data + len;
   82c92:	eb01 0b02 	add.w	fp, r1, r2
    const char * cmdline_ptr = data;
    size_t cmd_len;
    size_t cmdline_len;

    if (context == NULL) {
   82c96:	4607      	mov	r7, r0
   82c98:	2800      	cmp	r0, #0
   82c9a:	f000 809e 	beq.w	82dda <SCPI_Parse+0x14e>
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
   82c9e:	4559      	cmp	r1, fp
   82ca0:	f080 809e 	bcs.w	82de0 <SCPI_Parse+0x154>
   82ca4:	460d      	mov	r5, r1
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
            } else {
                SCPI_ErrorPush(context, SCPI_ERROR_UNDEFINED_HEADER);
   82ca6:	f242 3385 	movw	r3, #9093	; 0x2385
   82caa:	f2c0 0308 	movt	r3, #8
   82cae:	9301      	str	r3, [sp, #4]
    }

	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
   82cb0:	462c      	mov	r4, r5
   82cb2:	ebc5 080b 	rsb	r8, r5, fp
 * @param cmd - input command
 * @param len - max search length
 * @return position of terminator or len
 */
size_t cmdTerminatorPos(const char * cmd, size_t len) {
    const char * terminator = strnpbrk(cmd, len, "; \r\n\t");
   82cb6:	4628      	mov	r0, r5
   82cb8:	4641      	mov	r1, r8
   82cba:	4a51      	ldr	r2, [pc, #324]	; (82e00 <SCPI_Parse+0x174>)
   82cbc:	f243 06a9 	movw	r6, #12457	; 0x30a9
   82cc0:	f2c0 0608 	movt	r6, #8
   82cc4:	47b0      	blx	r6
    if (terminator == NULL) {
   82cc6:	b108      	cbz	r0, 82ccc <SCPI_Parse+0x40>
        return len;
    } else {
        return terminator - cmd;
   82cc8:	1b46      	subs	r6, r0, r5
   82cca:	e000      	b.n	82cce <SCPI_Parse+0x42>
 * @return position of terminator or len
 */
size_t cmdTerminatorPos(const char * cmd, size_t len) {
    const char * terminator = strnpbrk(cmd, len, "; \r\n\t");
    if (terminator == NULL) {
        return len;
   82ccc:	4646      	mov	r6, r8
 * @param cmd - input command
 * @param len - max search length
 * @return position of line separator or len
 */
size_t cmdlineSeparatorPos(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
   82cce:	4628      	mov	r0, r5
   82cd0:	4641      	mov	r1, r8
   82cd2:	f642 4275 	movw	r2, #11381	; 0x2c75
   82cd6:	f2c0 0208 	movt	r2, #8
   82cda:	4790      	blx	r2
    if (separator == NULL) {
   82cdc:	b110      	cbz	r0, 82ce4 <SCPI_Parse+0x58>
        return len;
    } else {
        return separator - cmd;
   82cde:	1b00      	subs	r0, r0, r4
   82ce0:	9000      	str	r0, [sp, #0]
   82ce2:	e001      	b.n	82ce8 <SCPI_Parse+0x5c>
 * @return position of line separator or len
 */
size_t cmdlineSeparatorPos(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
    if (separator == NULL) {
        return len;
   82ce4:	f8cd 8000 	str.w	r8, [sp]
	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        if (cmd_len > 0) {
   82ce8:	2e00      	cmp	r6, #0
   82cea:	d05f      	beq.n	82dac <SCPI_Parse+0x120>
 */
static bool_t findCommand(scpi_t * context, const char * cmdline_ptr, size_t cmdline_len, size_t cmd_len) {
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
   82cec:	f8d7 9000 	ldr.w	r9, [r7]
   82cf0:	f8d9 0000 	ldr.w	r0, [r9]
   82cf4:	2800      	cmp	r0, #0
   82cf6:	d076      	beq.n	82de6 <SCPI_Parse+0x15a>
   82cf8:	f04f 0408 	mov.w	r4, #8
        cmd = &context->cmdlist[i];
        if (matchCommand(cmd->pattern, cmdline_ptr, cmd_len)) {
   82cfc:	f243 5a6d 	movw	sl, #13677	; 0x356d
   82d00:	f2c0 0a08 	movt	sl, #8
   82d04:	4629      	mov	r1, r5
   82d06:	4632      	mov	r2, r6
   82d08:	47d0      	blx	sl
   82d0a:	b190      	cbz	r0, 82d32 <SCPI_Parse+0xa6>
            context->paramlist.cmd = cmd;
   82d0c:	f8c7 9010 	str.w	r9, [r7, #16]
            context->paramlist.parameters = cmdline_ptr + cmd_len;
   82d10:	19ab      	adds	r3, r5, r6
   82d12:	617b      	str	r3, [r7, #20]
            context->paramlist.length = cmdline_len - cmd_len;
   82d14:	9800      	ldr	r0, [sp, #0]
   82d16:	1b86      	subs	r6, r0, r6
   82d18:	61be      	str	r6, [r7, #24]
 * @param context
 */
static void processCommand(scpi_t * context) {
    const scpi_command_t * cmd = context->paramlist.cmd;

    context->cmd_error = FALSE;
   82d1a:	f04f 0400 	mov.w	r4, #0
   82d1e:	f887 4028 	strb.w	r4, [r7, #40]	; 0x28
    context->output_count = 0;
   82d22:	f04f 0100 	mov.w	r1, #0
   82d26:	6239      	str	r1, [r7, #32]
    context->input_count = 0;
   82d28:	6279      	str	r1, [r7, #36]	; 0x24

    SCPI_DEBUG_COMMAND(context);
    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
   82d2a:	f8d9 2004 	ldr.w	r2, [r9, #4]
   82d2e:	b94a      	cbnz	r2, 82d44 <SCPI_Parse+0xb8>
   82d30:	e014      	b.n	82d5c <SCPI_Parse+0xd0>
 */
static bool_t findCommand(scpi_t * context, const char * cmdline_ptr, size_t cmdline_len, size_t cmd_len) {
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
   82d32:	6839      	ldr	r1, [r7, #0]
   82d34:	eb01 0904 	add.w	r9, r1, r4
   82d38:	5908      	ldr	r0, [r1, r4]
   82d3a:	f104 0408 	add.w	r4, r4, #8
   82d3e:	2800      	cmp	r0, #0
   82d40:	d1e0      	bne.n	82d04 <SCPI_Parse+0x78>
   82d42:	e050      	b.n	82de6 <SCPI_Parse+0x15a>
    context->input_count = 0;

    SCPI_DEBUG_COMMAND(context);
    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
        if ((cmd->callback(context) != SCPI_RES_OK) && !context->cmd_error) {
   82d44:	4638      	mov	r0, r7
   82d46:	4790      	blx	r2
   82d48:	2801      	cmp	r0, #1
   82d4a:	d007      	beq.n	82d5c <SCPI_Parse+0xd0>
   82d4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   82d50:	b923      	cbnz	r3, 82d5c <SCPI_Parse+0xd0>
            SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
   82d52:	4638      	mov	r0, r7
   82d54:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
   82d58:	9c01      	ldr	r4, [sp, #4]
   82d5a:	47a0      	blx	r4
 * Conditionaly write "New Line"
 * @param context
 * @return number of characters written
 */
static size_t writeNewLine(scpi_t * context) {
    if (context->output_count > 0) {
   82d5c:	6a38      	ldr	r0, [r7, #32]
   82d5e:	2800      	cmp	r0, #0
   82d60:	dd11      	ble.n	82d86 <SCPI_Parse+0xfa>
        size_t len;
        len = writeData(context, "\r\n", 2);
   82d62:	4638      	mov	r0, r7
   82d64:	f64d 41fc 	movw	r1, #56572	; 0xdcfc
   82d68:	f2c0 0108 	movt	r1, #8
   82d6c:	f04f 0202 	mov.w	r2, #2
   82d70:	f642 3385 	movw	r3, #11141	; 0x2b85
   82d74:	f2c0 0308 	movt	r3, #8
   82d78:	4798      	blx	r3
 * Flush data to SCPI output
 * @param context
 * @return
 */
static int flushData(scpi_t * context) {
    if (context && context->interface && context->interface->flush) {
   82d7a:	69f9      	ldr	r1, [r7, #28]
   82d7c:	b119      	cbz	r1, 82d86 <SCPI_Parse+0xfa>
   82d7e:	68ca      	ldr	r2, [r1, #12]
   82d80:	b10a      	cbz	r2, 82d86 <SCPI_Parse+0xfa>
        return context->interface->flush(context);
   82d82:	4638      	mov	r0, r7
   82d84:	4790      	blx	r2

    /* conditionaly write new line */
    writeNewLine(context);

    /* skip all whitespaces */
    paramSkipWhitespace(context);
   82d86:	4638      	mov	r0, r7
   82d88:	f642 34cd 	movw	r4, #11213	; 0x2bcd
   82d8c:	f2c0 0408 	movt	r4, #8
   82d90:	47a0      	blx	r4

    /* set error if command callback did not read all parameters */
    if (context->paramlist.length != 0 && !context->cmd_error) {
   82d92:	69b8      	ldr	r0, [r7, #24]
   82d94:	b168      	cbz	r0, 82db2 <SCPI_Parse+0x126>
   82d96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   82d9a:	b96b      	cbnz	r3, 82db8 <SCPI_Parse+0x12c>
        SCPI_ErrorPush(context, SCPI_ERROR_PARAMETER_NOT_ALLOWED);
   82d9c:	4638      	mov	r0, r7
   82d9e:	f06f 016b 	mvn.w	r1, #107	; 0x6b
   82da2:	9a01      	ldr	r2, [sp, #4]
   82da4:	4790      	blx	r2
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
   82da6:	f04f 0401 	mov.w	r4, #1
   82daa:	e007      	b.n	82dbc <SCPI_Parse+0x130>
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
   82dac:	f04f 0400 	mov.w	r4, #0
   82db0:	e004      	b.n	82dbc <SCPI_Parse+0x130>
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
   82db2:	f04f 0401 	mov.w	r4, #1
   82db6:	e001      	b.n	82dbc <SCPI_Parse+0x130>
   82db8:	f04f 0401 	mov.w	r4, #1
 * @param cmd - input command
 * @param len - max search length
 * @return Pointer to next part of command
 */
const char * cmdlineNext(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
   82dbc:	4628      	mov	r0, r5
   82dbe:	4641      	mov	r1, r8
   82dc0:	f642 4375 	movw	r3, #11381	; 0x2c75
   82dc4:	f2c0 0308 	movt	r3, #8
   82dc8:	4798      	blx	r3
    if (separator == NULL) {
        return cmd + len;
   82dca:	4445      	add	r5, r8
 * @param len - max search length
 * @return Pointer to next part of command
 */
const char * cmdlineNext(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
    if (separator == NULL) {
   82dcc:	b108      	cbz	r0, 82dd2 <SCPI_Parse+0x146>
        return cmd + len;
    } else {
        return separator + 1;
   82dce:	f100 0501 	add.w	r5, r0, #1
    if (context == NULL) {
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
   82dd2:	45ab      	cmp	fp, r5
   82dd4:	f63f af6c 	bhi.w	82cb0 <SCPI_Parse+0x24>
   82dd8:	e00d      	b.n	82df6 <SCPI_Parse+0x16a>
    const char * cmdline_ptr = data;
    size_t cmd_len;
    size_t cmdline_len;

    if (context == NULL) {
        return -1;
   82dda:	f04f 34ff 	mov.w	r4, #4294967295
   82dde:	e00a      	b.n	82df6 <SCPI_Parse+0x16a>
    }

	
    while (cmdline_ptr < cmdline_end) {
   82de0:	f04f 0400 	mov.w	r4, #0
   82de4:	e007      	b.n	82df6 <SCPI_Parse+0x16a>
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
            } else {
                SCPI_ErrorPush(context, SCPI_ERROR_UNDEFINED_HEADER);
   82de6:	4638      	mov	r0, r7
   82de8:	f06f 0170 	mvn.w	r1, #112	; 0x70
   82dec:	9a01      	ldr	r2, [sp, #4]
   82dee:	4790      	blx	r2
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
   82df0:	f04f 0400 	mov.w	r4, #0
   82df4:	e7e2      	b.n	82dbc <SCPI_Parse+0x130>
            }
        }
        cmdline_ptr = cmdlineNext(cmdline_ptr, cmdline_end - cmdline_ptr);
    }
    return result;
}
   82df6:	4620      	mov	r0, r4
   82df8:	b003      	add	sp, #12
   82dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82dfe:	bf00      	nop
   82e00:	0008d9c8 	.word	0x0008d9c8

00082e04 <SCPI_Init>:
 * @param context
 * @param command_list
 * @param buffer
 * @param interface
 */
void SCPI_Init(scpi_t * context) {
   82e04:	b508      	push	{r3, lr}
    context->buffer.position = 0;
   82e06:	f04f 0200 	mov.w	r2, #0
   82e0a:	6082      	str	r2, [r0, #8]
    SCPI_ErrorInit(context);
   82e0c:	f242 3111 	movw	r1, #8977	; 0x2311
   82e10:	f2c0 0108 	movt	r1, #8
   82e14:	4788      	blx	r1
   82e16:	bd08      	pop	{r3, pc}

00082e18 <SCPI_Input>:
 * @param context
 * @param data - data to process
 * @param len - length of data
 * @return 
 */
int SCPI_Input(scpi_t * context, const char * data, size_t len) {
   82e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82e1a:	4604      	mov	r4, r0
    int result = 0;
    const char * cmd_term;
	if (len == 0) {
   82e1c:	4615      	mov	r5, r2
   82e1e:	b972      	cbnz	r2, 82e3e <SCPI_Input+0x26>
        context->buffer.data[context->buffer.position] = 0;
   82e20:	68c1      	ldr	r1, [r0, #12]
   82e22:	6882      	ldr	r2, [r0, #8]
   82e24:	f04f 0600 	mov.w	r6, #0
   82e28:	548e      	strb	r6, [r1, r2]
        result = SCPI_Parse(context, context->buffer.data, context->buffer.position);
   82e2a:	68e1      	ldr	r1, [r4, #12]
   82e2c:	68a2      	ldr	r2, [r4, #8]
   82e2e:	f642 458d 	movw	r5, #11405	; 0x2c8d
   82e32:	f2c0 0508 	movt	r5, #8
   82e36:	47a8      	blx	r5
   82e38:	4605      	mov	r5, r0
        context->buffer.position = 0;
   82e3a:	60a6      	str	r6, [r4, #8]
   82e3c:	e049      	b.n	82ed2 <SCPI_Input+0xba>
    } else {
        size_t buffer_free;
        int ws;
        buffer_free = context->buffer.length - context->buffer.position;
   82e3e:	6883      	ldr	r3, [r0, #8]
   82e40:	6842      	ldr	r2, [r0, #4]
   82e42:	f102 30ff 	add.w	r0, r2, #4294967295
        if (len > (buffer_free - 1)) {
   82e46:	1ac2      	subs	r2, r0, r3
   82e48:	4295      	cmp	r5, r2
   82e4a:	d83d      	bhi.n	82ec8 <SCPI_Input+0xb0>
            return -1;
        }
        memcpy(&context->buffer.data[context->buffer.position], data, len);
   82e4c:	68e7      	ldr	r7, [r4, #12]
   82e4e:	18f8      	adds	r0, r7, r3
   82e50:	462a      	mov	r2, r5
   82e52:	f64a 43a5 	movw	r3, #44197	; 0xaca5
   82e56:	f2c0 0308 	movt	r3, #8
   82e5a:	4798      	blx	r3
        context->buffer.position += len;
   82e5c:	68a1      	ldr	r1, [r4, #8]
   82e5e:	186d      	adds	r5, r5, r1
   82e60:	60a5      	str	r5, [r4, #8]
        context->buffer.data[context->buffer.position] = 0;
   82e62:	68e0      	ldr	r0, [r4, #12]
   82e64:	f04f 0200 	mov.w	r2, #0
   82e68:	5542      	strb	r2, [r0, r5]

        ws = skipWhitespace(context->buffer.data, context->buffer.position);
   82e6a:	68e0      	ldr	r0, [r4, #12]
   82e6c:	68a1      	ldr	r1, [r4, #8]
   82e6e:	f243 4719 	movw	r7, #13337	; 0x3419
   82e72:	f2c0 0708 	movt	r7, #8
   82e76:	47b8      	blx	r7
   82e78:	4605      	mov	r5, r0
        cmd_term = cmdlineTerminator(context->buffer.data + ws, context->buffer.position - ws);
   82e7a:	68e3      	ldr	r3, [r4, #12]
   82e7c:	68a1      	ldr	r1, [r4, #8]
 * @param cmd - input command
 * @param len - max search length
 * @return pointer to command line terminator or NULL
 */
const char * cmdlineTerminator(const char * cmd, size_t len) {
    return strnpbrk(cmd, len, "\r\n");
   82e7e:	1818      	adds	r0, r3, r0
   82e80:	1b49      	subs	r1, r1, r5
   82e82:	f64d 42fc 	movw	r2, #56572	; 0xdcfc
   82e86:	f2c0 0208 	movt	r2, #8
   82e8a:	f243 07a9 	movw	r7, #12457	; 0x30a9
   82e8e:	f2c0 0708 	movt	r7, #8
   82e92:	47b8      	blx	r7
        context->buffer.position += len;
        context->buffer.data[context->buffer.position] = 0;

        ws = skipWhitespace(context->buffer.data, context->buffer.position);
        cmd_term = cmdlineTerminator(context->buffer.data + ws, context->buffer.position - ws);
        if (cmd_term != NULL) {
   82e94:	4607      	mov	r7, r0
   82e96:	b1d0      	cbz	r0, 82ece <SCPI_Input+0xb6>
            int curr_len = cmd_term - context->buffer.data;
   82e98:	68e2      	ldr	r2, [r4, #12]
   82e9a:	1a86      	subs	r6, r0, r2
            result = SCPI_Parse(context, context->buffer.data + ws, curr_len - ws);
   82e9c:	4620      	mov	r0, r4
   82e9e:	1951      	adds	r1, r2, r5
   82ea0:	1b72      	subs	r2, r6, r5
   82ea2:	f642 458d 	movw	r5, #11405	; 0x2c8d
   82ea6:	f2c0 0508 	movt	r5, #8
   82eaa:	47a8      	blx	r5
   82eac:	4605      	mov	r5, r0
            memmove(context->buffer.data, cmd_term, context->buffer.position - curr_len);
   82eae:	68a3      	ldr	r3, [r4, #8]
   82eb0:	68e0      	ldr	r0, [r4, #12]
   82eb2:	4639      	mov	r1, r7
   82eb4:	1b9a      	subs	r2, r3, r6
   82eb6:	f64a 43b7 	movw	r3, #44215	; 0xacb7
   82eba:	f2c0 0308 	movt	r3, #8
   82ebe:	4798      	blx	r3
            context->buffer.position -= curr_len;
   82ec0:	68a0      	ldr	r0, [r4, #8]
   82ec2:	1b86      	subs	r6, r0, r6
   82ec4:	60a6      	str	r6, [r4, #8]
   82ec6:	e004      	b.n	82ed2 <SCPI_Input+0xba>
    } else {
        size_t buffer_free;
        int ws;
        buffer_free = context->buffer.length - context->buffer.position;
        if (len > (buffer_free - 1)) {
            return -1;
   82ec8:	f04f 35ff 	mov.w	r5, #4294967295
   82ecc:	e001      	b.n	82ed2 <SCPI_Input+0xba>
 * @param data - data to process
 * @param len - length of data
 * @return 
 */
int SCPI_Input(scpi_t * context, const char * data, size_t len) {
    int result = 0;
   82ece:	f04f 0500 	mov.w	r5, #0
            context->buffer.position -= curr_len;
        }
    }

    return result;
}
   82ed2:	4628      	mov	r0, r5
   82ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82ed6:	bf00      	nop

00082ed8 <SCPI_ResultString>:
 * Write raw string result to the output
 * @param context
 * @param data
 * @return 
 */
size_t SCPI_ResultString(scpi_t * context, const char * data) {
   82ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82eda:	4604      	mov	r4, r0
   82edc:	460d      	mov	r5, r1
    size_t len = strlen(data);
   82ede:	4608      	mov	r0, r1
   82ee0:	f64a 53b1 	movw	r3, #44465	; 0xadb1
   82ee4:	f2c0 0308 	movt	r3, #8
   82ee8:	4798      	blx	r3
   82eea:	4607      	mov	r7, r0
    size_t result = 0;
    result += writeDelimiter(context);
   82eec:	4620      	mov	r0, r4
   82eee:	f642 3191 	movw	r1, #11153	; 0x2b91
   82ef2:	f2c0 0108 	movt	r1, #8
   82ef6:	4788      	blx	r1
   82ef8:	4606      	mov	r6, r0
    result += writeData(context, data, len);
   82efa:	4620      	mov	r0, r4
   82efc:	4629      	mov	r1, r5
   82efe:	463a      	mov	r2, r7
   82f00:	f642 3385 	movw	r3, #11141	; 0x2b85
   82f04:	f2c0 0308 	movt	r3, #8
   82f08:	4798      	blx	r3
    context->output_count++;
   82f0a:	6a22      	ldr	r2, [r4, #32]
   82f0c:	f102 0201 	add.w	r2, r2, #1
   82f10:	6222      	str	r2, [r4, #32]
    return result;
}
   82f12:	1980      	adds	r0, r0, r6
   82f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82f16:	bf00      	nop

00082f18 <SCPI_ResultInt>:
 * Write integer value to the result
 * @param context
 * @param val
 * @return 
 */
size_t SCPI_ResultInt(scpi_t * context, int32_t val) {
   82f18:	b570      	push	{r4, r5, r6, lr}
   82f1a:	b084      	sub	sp, #16
   82f1c:	4604      	mov	r4, r0
    char buffer[12];
    size_t result = 0;
    size_t len = longToStr(val, buffer, sizeof (buffer));
   82f1e:	4608      	mov	r0, r1
   82f20:	a901      	add	r1, sp, #4
   82f22:	f04f 020c 	mov.w	r2, #12
   82f26:	f243 03f5 	movw	r3, #12533	; 0x30f5
   82f2a:	f2c0 0308 	movt	r3, #8
   82f2e:	4798      	blx	r3
   82f30:	4606      	mov	r6, r0
    result += writeDelimiter(context);
   82f32:	4620      	mov	r0, r4
   82f34:	f642 3191 	movw	r1, #11153	; 0x2b91
   82f38:	f2c0 0108 	movt	r1, #8
   82f3c:	4788      	blx	r1
   82f3e:	4605      	mov	r5, r0
    result += writeData(context, buffer, len);
   82f40:	4620      	mov	r0, r4
   82f42:	a901      	add	r1, sp, #4
   82f44:	4632      	mov	r2, r6
   82f46:	f642 3385 	movw	r3, #11141	; 0x2b85
   82f4a:	f2c0 0308 	movt	r3, #8
   82f4e:	4798      	blx	r3
    context->output_count++;
   82f50:	6a22      	ldr	r2, [r4, #32]
   82f52:	f102 0201 	add.w	r2, r2, #1
   82f56:	6222      	str	r2, [r4, #32]
    return result;
}
   82f58:	1940      	adds	r0, r0, r5
   82f5a:	b004      	add	sp, #16
   82f5c:	bd70      	pop	{r4, r5, r6, pc}
   82f5e:	bf00      	nop

00082f60 <SCPI_ResultText>:
 * Write string withn " to the result
 * @param context
 * @param data
 * @return 
 */
size_t SCPI_ResultText(scpi_t * context, const char * data) {
   82f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82f64:	4604      	mov	r4, r0
   82f66:	460f      	mov	r7, r1
    size_t result = 0;
    result += writeDelimiter(context);
   82f68:	f642 3391 	movw	r3, #11153	; 0x2b91
   82f6c:	f2c0 0308 	movt	r3, #8
   82f70:	4798      	blx	r3
   82f72:	4680      	mov	r8, r0
    result += writeData(context, "\"", 1);
   82f74:	f64d 5650 	movw	r6, #56656	; 0xdd50
   82f78:	f2c0 0608 	movt	r6, #8
   82f7c:	4620      	mov	r0, r4
   82f7e:	4631      	mov	r1, r6
   82f80:	f04f 0201 	mov.w	r2, #1
   82f84:	f642 3585 	movw	r5, #11141	; 0x2b85
   82f88:	f2c0 0508 	movt	r5, #8
   82f8c:	47a8      	blx	r5
   82f8e:	4480      	add	r8, r0
    result += writeData(context, data, strlen(data));
   82f90:	4638      	mov	r0, r7
   82f92:	f64a 51b1 	movw	r1, #44465	; 0xadb1
   82f96:	f2c0 0108 	movt	r1, #8
   82f9a:	4788      	blx	r1
   82f9c:	4602      	mov	r2, r0
   82f9e:	4620      	mov	r0, r4
   82fa0:	4639      	mov	r1, r7
   82fa2:	47a8      	blx	r5
   82fa4:	eb08 0700 	add.w	r7, r8, r0
    result += writeData(context, "\"", 1);
   82fa8:	4620      	mov	r0, r4
   82faa:	4631      	mov	r1, r6
   82fac:	f04f 0201 	mov.w	r2, #1
   82fb0:	47a8      	blx	r5
    context->output_count++;
   82fb2:	6a22      	ldr	r2, [r4, #32]
   82fb4:	f102 0201 	add.w	r2, r2, #1
   82fb8:	6222      	str	r2, [r4, #32]
    return result;
}
   82fba:	1838      	adds	r0, r7, r0
   82fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082fc0 <SCPI_ParamString>:
 * @param value
 * @param len
 * @param mandatory
 * @return 
 */
bool_t SCPI_ParamString(scpi_t * context, const char ** value, size_t * len, bool_t mandatory) {
   82fc0:	b570      	push	{r4, r5, r6, lr}
   82fc2:	b082      	sub	sp, #8
   82fc4:	4604      	mov	r4, r0
   82fc6:	4615      	mov	r5, r2
    size_t length;

    if (!value || !len) {
   82fc8:	460e      	mov	r6, r1
   82fca:	b319      	cbz	r1, 83014 <SCPI_ParamString+0x54>
   82fcc:	b32a      	cbz	r2, 8301a <SCPI_ParamString+0x5a>
        return FALSE;
    }

    if (!paramNext(context, mandatory)) {
   82fce:	4619      	mov	r1, r3
   82fd0:	f642 33f1 	movw	r3, #11249	; 0x2bf1
   82fd4:	f2c0 0308 	movt	r3, #8
   82fd8:	4798      	blx	r3
   82fda:	b308      	cbz	r0, 83020 <SCPI_ParamString+0x60>
        return FALSE;
    }

    if (locateStr(context->paramlist.parameters, context->paramlist.length, value, &length)) {
   82fdc:	6960      	ldr	r0, [r4, #20]
   82fde:	69a1      	ldr	r1, [r4, #24]
   82fe0:	4632      	mov	r2, r6
   82fe2:	ab01      	add	r3, sp, #4
   82fe4:	f243 2649 	movw	r6, #12873	; 0x3249
   82fe8:	f2c0 0608 	movt	r6, #8
   82fec:	47b0      	blx	r6
   82fee:	b1d0      	cbz	r0, 83026 <SCPI_ParamString+0x66>
        paramSkipBytes(context, length);
   82ff0:	4620      	mov	r0, r4
   82ff2:	9901      	ldr	r1, [sp, #4]
   82ff4:	f642 32b9 	movw	r2, #11193	; 0x2bb9
   82ff8:	f2c0 0208 	movt	r2, #8
   82ffc:	4790      	blx	r2
        paramSkipWhitespace(context);
   82ffe:	4620      	mov	r0, r4
   83000:	f642 31cd 	movw	r1, #11213	; 0x2bcd
   83004:	f2c0 0108 	movt	r1, #8
   83008:	4788      	blx	r1
        if (len) {
            *len = length;
   8300a:	9801      	ldr	r0, [sp, #4]
   8300c:	6028      	str	r0, [r5, #0]
        }
        return TRUE;
   8300e:	f04f 0001 	mov.w	r0, #1
   83012:	e00a      	b.n	8302a <SCPI_ParamString+0x6a>
 */
bool_t SCPI_ParamString(scpi_t * context, const char ** value, size_t * len, bool_t mandatory) {
    size_t length;

    if (!value || !len) {
        return FALSE;
   83014:	f04f 0000 	mov.w	r0, #0
   83018:	e007      	b.n	8302a <SCPI_ParamString+0x6a>
   8301a:	f04f 0000 	mov.w	r0, #0
   8301e:	e004      	b.n	8302a <SCPI_ParamString+0x6a>
    }

    if (!paramNext(context, mandatory)) {
        return FALSE;
   83020:	f04f 0000 	mov.w	r0, #0
   83024:	e001      	b.n	8302a <SCPI_ParamString+0x6a>
            *len = length;
        }
        return TRUE;
    }

    return FALSE;
   83026:	f04f 0000 	mov.w	r0, #0
}
   8302a:	b002      	add	sp, #8
   8302c:	bd70      	pop	{r4, r5, r6, pc}
   8302e:	bf00      	nop

00083030 <SCPI_ParamInt>:
 * @param context
 * @param value
 * @param mandatory
 * @return 
 */
bool_t SCPI_ParamInt(scpi_t * context, int32_t * value, bool_t mandatory) {
   83030:	b570      	push	{r4, r5, r6, lr}
   83032:	b082      	sub	sp, #8
   83034:	4604      	mov	r4, r0
   83036:	4613      	mov	r3, r2
    const char * param;
    size_t param_len;
    size_t num_len;

    if (!value) {
   83038:	460e      	mov	r6, r1
   8303a:	b1e1      	cbz	r1, 83076 <SCPI_ParamInt+0x46>
        return FALSE;
    }

    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
   8303c:	a901      	add	r1, sp, #4
   8303e:	466a      	mov	r2, sp
   83040:	f642 75c1 	movw	r5, #12225	; 0x2fc1
   83044:	f2c0 0508 	movt	r5, #8
   83048:	47a8      	blx	r5
   8304a:	b1b8      	cbz	r0, 8307c <SCPI_ParamInt+0x4c>
        return FALSE;
    }

    num_len = strToLong(param, value);
   8304c:	9801      	ldr	r0, [sp, #4]
   8304e:	4631      	mov	r1, r6
   83050:	f243 13fd 	movw	r3, #12797	; 0x31fd
   83054:	f2c0 0308 	movt	r3, #8
   83058:	4798      	blx	r3

    if (num_len != param_len) {
   8305a:	9900      	ldr	r1, [sp, #0]
   8305c:	4288      	cmp	r0, r1
   8305e:	d010      	beq.n	83082 <SCPI_ParamInt+0x52>
        SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
   83060:	4620      	mov	r0, r4
   83062:	f06f 0189 	mvn.w	r1, #137	; 0x89
   83066:	f242 3285 	movw	r2, #9093	; 0x2385
   8306a:	f2c0 0208 	movt	r2, #8
   8306e:	4790      	blx	r2
        return FALSE;
   83070:	f04f 0000 	mov.w	r0, #0
   83074:	e007      	b.n	83086 <SCPI_ParamInt+0x56>
    const char * param;
    size_t param_len;
    size_t num_len;

    if (!value) {
        return FALSE;
   83076:	f04f 0000 	mov.w	r0, #0
   8307a:	e004      	b.n	83086 <SCPI_ParamInt+0x56>
    }

    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
        return FALSE;
   8307c:	f04f 0000 	mov.w	r0, #0
   83080:	e001      	b.n	83086 <SCPI_ParamInt+0x56>
    if (num_len != param_len) {
        SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
        return FALSE;
    }

    return TRUE;
   83082:	f04f 0001 	mov.w	r0, #1
}
   83086:	b002      	add	sp, #8
   83088:	bd70      	pop	{r4, r5, r6, pc}
   8308a:	bf00      	nop

0008308c <isFinalState>:
 */
static bool_t isFinalState(locate_text_states state) {
    return (
        ((state) == STATE_COMMA)
        || ((state) == STATE_LAST_WHITESPACE)
        || ((state) == STATE_TEXT) ||
   8308c:	f1a0 0302 	sub.w	r3, r0, #2
   83090:	b2d9      	uxtb	r1, r3
   83092:	2902      	cmp	r1, #2
   83094:	d904      	bls.n	830a0 <isFinalState+0x14>
   83096:	f1d0 0001 	rsbs	r0, r0, #1
   8309a:	bf38      	it	cc
   8309c:	2000      	movcc	r0, #0
   8309e:	4770      	bx	lr
   830a0:	f04f 0001 	mov.w	r0, #1
        ((state) == STATE_FIRST_WHITESPACE)
    );
}
   830a4:	4770      	bx	lr
   830a6:	bf00      	nop

000830a8 <strnpbrk>:
 * @param str
 * @param size
 * @param set
 * @return 
 */
char * strnpbrk(const char *str, size_t size, const char *set) {
   830a8:	b470      	push	{r4, r5, r6}
    const char *scanp;
    long c, sc;
    const char * strend = str + size;
   830aa:	1841      	adds	r1, r0, r1

    while ((strend != str) && ((c = *str++) != 0)) {
   830ac:	4288      	cmp	r0, r1
   830ae:	d01a      	beq.n	830e6 <strnpbrk+0x3e>
   830b0:	4603      	mov	r3, r0
   830b2:	f813 6b01 	ldrb.w	r6, [r3], #1
   830b6:	b936      	cbnz	r6, 830c6 <strnpbrk+0x1e>
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
                return ((char *) (str - 1));
    }
    return (NULL);
   830b8:	f04f 0000 	mov.w	r0, #0
   830bc:	e018      	b.n	830f0 <strnpbrk+0x48>
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
   830be:	42b5      	cmp	r5, r6
   830c0:	d102      	bne.n	830c8 <strnpbrk+0x20>
   830c2:	e015      	b.n	830f0 <strnpbrk+0x48>
char * strnpbrk(const char *str, size_t size, const char *set) {
    const char *scanp;
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
   830c4:	4623      	mov	r3, r4
   830c6:	4614      	mov	r4, r2
        for (scanp = set; (sc = *scanp++) != '\0';)
   830c8:	f814 5b01 	ldrb.w	r5, [r4], #1
   830cc:	2d00      	cmp	r5, #0
   830ce:	d1f6      	bne.n	830be <strnpbrk+0x16>
char * strnpbrk(const char *str, size_t size, const char *set) {
    const char *scanp;
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
   830d0:	428b      	cmp	r3, r1
   830d2:	d00b      	beq.n	830ec <strnpbrk+0x44>
   830d4:	461c      	mov	r4, r3
   830d6:	f814 6b01 	ldrb.w	r6, [r4], #1
   830da:	4618      	mov	r0, r3
   830dc:	2e00      	cmp	r6, #0
   830de:	d1f1      	bne.n	830c4 <strnpbrk+0x1c>
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
                return ((char *) (str - 1));
    }
    return (NULL);
   830e0:	f04f 0000 	mov.w	r0, #0
   830e4:	e004      	b.n	830f0 <strnpbrk+0x48>
   830e6:	f04f 0000 	mov.w	r0, #0
   830ea:	e001      	b.n	830f0 <strnpbrk+0x48>
   830ec:	f04f 0000 	mov.w	r0, #0
}
   830f0:	bc70      	pop	{r4, r5, r6}
   830f2:	4770      	bx	lr

000830f4 <longToStr>:
 * @param val   integer value
 * @param str   converted textual representation
 * @param len   string buffer length
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
   830f4:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t x = 1000000000L;
    int_fast8_t digit;
    size_t pos = 0;

    if (val == 0) {
   830f6:	4603      	mov	r3, r0
   830f8:	b938      	cbnz	r0, 8310a <longToStr+0x16>
        if (pos < len) str[pos++] = '0';
   830fa:	2a00      	cmp	r2, #0
   830fc:	d055      	beq.n	831aa <longToStr+0xb6>
   830fe:	f04f 0030 	mov.w	r0, #48	; 0x30
   83102:	7008      	strb	r0, [r1, #0]
   83104:	f04f 0001 	mov.w	r0, #1
   83108:	e049      	b.n	8319e <longToStr+0xaa>
    } else {
        if (val < 0) {
   8310a:	2800      	cmp	r0, #0
   8310c:	da08      	bge.n	83120 <longToStr+0x2c>
            val = -val;
   8310e:	f1c0 0300 	rsb	r3, r0, #0
            if (pos < len) str[pos++] = '-';
   83112:	b142      	cbz	r2, 83126 <longToStr+0x32>
   83114:	f04f 002d 	mov.w	r0, #45	; 0x2d
   83118:	7008      	strb	r0, [r1, #0]
   8311a:	f04f 0001 	mov.w	r0, #1
   8311e:	e004      	b.n	8312a <longToStr+0x36>
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
    uint32_t x = 1000000000L;
    int_fast8_t digit;
    size_t pos = 0;
   83120:	f04f 0000 	mov.w	r0, #0
   83124:	e001      	b.n	8312a <longToStr+0x36>
   83126:	f04f 0000 	mov.w	r0, #0
        if (val < 0) {
            val = -val;
            if (pos < len) str[pos++] = '-';
        }

        while ((val / x) == 0) {
   8312a:	461d      	mov	r5, r3
   8312c:	f64c 14ff 	movw	r4, #51711	; 0xc9ff
   83130:	f6c3 349a 	movt	r4, #15258	; 0x3b9a
   83134:	42a3      	cmp	r3, r4
   83136:	d810      	bhi.n	8315a <longToStr+0x66>
   83138:	f44f 434a 	mov.w	r3, #51712	; 0xca00
   8313c:	f6c3 339a 	movt	r3, #15258	; 0x3b9a
            x /= 10;
   83140:	f64c 46cd 	movw	r6, #52429	; 0xcccd
   83144:	f6cc 46cc 	movt	r6, #52428	; 0xcccc
   83148:	fba6 4303 	umull	r4, r3, r6, r3
   8314c:	ea4f 03d3 	mov.w	r3, r3, lsr #3
        if (val < 0) {
            val = -val;
            if (pos < len) str[pos++] = '-';
        }

        while ((val / x) == 0) {
   83150:	fbb5 f4f3 	udiv	r4, r5, r3
   83154:	2c00      	cmp	r4, #0
   83156:	d0f7      	beq.n	83148 <longToStr+0x54>
   83158:	e003      	b.n	83162 <longToStr+0x6e>
   8315a:	f44f 434a 	mov.w	r3, #51712	; 0xca00
   8315e:	f6c3 339a 	movt	r3, #15258	; 0x3b9a
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   83162:	4282      	cmp	r2, r0
   83164:	d933      	bls.n	831ce <longToStr+0xda>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   83166:	fbb5 f6f3 	udiv	r6, r5, r3
            break;
        }
    }
    
    return result;
}
   8316a:	b2f6      	uxtb	r6, r6

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
            val -= digit * x;
            x /= 10;
   8316c:	f64c 47cd 	movw	r7, #52429	; 0xcccd
   83170:	f6cc 47cc 	movt	r7, #52428	; 0xcccc
   83174:	ea6f 0400 	mvn.w	r4, r0
   83178:	18a4      	adds	r4, r4, r2
   8317a:	f014 0f01 	tst.w	r4, #1
   8317e:	d128      	bne.n	831d2 <longToStr+0xde>
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   83180:	f106 0430 	add.w	r4, r6, #48	; 0x30
   83184:	540c      	strb	r4, [r1, r0]
   83186:	f100 0401 	add.w	r4, r0, #1
   8318a:	4620      	mov	r0, r4
            val -= digit * x;
   8318c:	fb03 5516 	mls	r5, r3, r6, r5
            x /= 10;
   83190:	fba7 6303 	umull	r6, r3, r7, r3
        } while (x && (pos < len));
   83194:	08db      	lsrs	r3, r3, #3
   83196:	d002      	beq.n	8319e <longToStr+0xaa>
   83198:	42a2      	cmp	r2, r4
   8319a:	d809      	bhi.n	831b0 <longToStr+0xbc>
   8319c:	e017      	b.n	831ce <longToStr+0xda>
    }

    if (pos < len) str[pos] = 0;
   8319e:	4290      	cmp	r0, r2
   831a0:	d215      	bcs.n	831ce <longToStr+0xda>
   831a2:	f04f 0200 	mov.w	r2, #0
   831a6:	540a      	strb	r2, [r1, r0]
   831a8:	e011      	b.n	831ce <longToStr+0xda>
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
    uint32_t x = 1000000000L;
    int_fast8_t digit;
    size_t pos = 0;
   831aa:	f04f 0000 	mov.w	r0, #0
   831ae:	e00e      	b.n	831ce <longToStr+0xda>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   831b0:	fbb5 f0f3 	udiv	r0, r5, r3
            break;
        }
    }
    
    return result;
}
   831b4:	b2c6      	uxtb	r6, r0
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   831b6:	f106 0030 	add.w	r0, r6, #48	; 0x30
   831ba:	5508      	strb	r0, [r1, r4]
   831bc:	f104 0001 	add.w	r0, r4, #1
            val -= digit * x;
   831c0:	fb03 5516 	mls	r5, r3, r6, r5
            x /= 10;
   831c4:	fba7 4303 	umull	r4, r3, r7, r3
        } while (x && (pos < len));
   831c8:	08db      	lsrs	r3, r3, #3
   831ca:	d113      	bne.n	831f4 <longToStr+0x100>
   831cc:	e7e7      	b.n	8319e <longToStr+0xaa>
    }

    if (pos < len) str[pos] = 0;
    return pos;
}
   831ce:	bcf0      	pop	{r4, r5, r6, r7}
   831d0:	4770      	bx	lr
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   831d2:	f106 0430 	add.w	r4, r6, #48	; 0x30
   831d6:	540c      	strb	r4, [r1, r0]
   831d8:	f100 0001 	add.w	r0, r0, #1
            val -= digit * x;
   831dc:	fb03 5516 	mls	r5, r3, r6, r5
            x /= 10;
   831e0:	fba7 6303 	umull	r6, r3, r7, r3
        } while (x && (pos < len));
   831e4:	08db      	lsrs	r3, r3, #3
   831e6:	d0da      	beq.n	8319e <longToStr+0xaa>
   831e8:	4282      	cmp	r2, r0
   831ea:	d9f0      	bls.n	831ce <longToStr+0xda>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   831ec:	fbb5 f6f3 	udiv	r6, r5, r3
            break;
        }
    }
    
    return result;
}
   831f0:	b2f6      	uxtb	r6, r6
   831f2:	e7c5      	b.n	83180 <longToStr+0x8c>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   831f4:	fbb5 f6f3 	udiv	r6, r5, r3
            break;
        }
    }
    
    return result;
}
   831f8:	b2f6      	uxtb	r6, r6
   831fa:	e7c1      	b.n	83180 <longToStr+0x8c>

000831fc <strToLong>:
 * Converts string to signed 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strToLong(const char * str, int32_t * val) {
   831fc:	b530      	push	{r4, r5, lr}
   831fe:	b083      	sub	sp, #12
   83200:	4604      	mov	r4, r0
   83202:	460d      	mov	r5, r1
    char * endptr;
    *val = strtol(str, &endptr, 0);
   83204:	a901      	add	r1, sp, #4
   83206:	f04f 0200 	mov.w	r2, #0
   8320a:	f64a 7359 	movw	r3, #44889	; 0xaf59
   8320e:	f2c0 0308 	movt	r3, #8
   83212:	4798      	blx	r3
   83214:	6028      	str	r0, [r5, #0]
    return endptr - str;
}
   83216:	9801      	ldr	r0, [sp, #4]
   83218:	1b00      	subs	r0, r0, r4
   8321a:	b003      	add	sp, #12
   8321c:	bd30      	pop	{r4, r5, pc}
   8321e:	bf00      	nop

00083220 <compareStr>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
   83220:	b510      	push	{r4, lr}
   83222:	460c      	mov	r4, r1
    if (len1 != len2) {
   83224:	4299      	cmp	r1, r3
   83226:	d10b      	bne.n	83240 <compareStr+0x20>
        return FALSE;
    }

    if (SCPI_strncasecmp(str1, str2, len2) == 0) {
   83228:	4611      	mov	r1, r2
   8322a:	4622      	mov	r2, r4
   8322c:	f64a 53c1 	movw	r3, #44481	; 0xadc1
   83230:	f2c0 0308 	movt	r3, #8
   83234:	4798      	blx	r3
   83236:	f1d0 0001 	rsbs	r0, r0, #1
   8323a:	bf38      	it	cc
   8323c:	2000      	movcc	r0, #0
   8323e:	bd10      	pop	{r4, pc}
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
    if (len1 != len2) {
        return FALSE;
   83240:	f04f 0000 	mov.w	r0, #0
    if (SCPI_strncasecmp(str1, str2, len2) == 0) {
        return TRUE;
    }

    return FALSE;
}
   83244:	bd10      	pop	{r4, pc}
   83246:	bf00      	nop

00083248 <locateStr>:
 * @param len1 length of string
 * @param str2 result
 * @param len2 length of result
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
   83248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8324c:	b083      	sub	sp, #12
   8324e:	4606      	mov	r6, r0
   83250:	9201      	str	r2, [sp, #4]
   83252:	4699      	mov	r9, r3
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   83254:	460b      	mov	r3, r1
   83256:	2900      	cmp	r1, #0
   83258:	d03e      	beq.n	832d8 <locateStr+0x90>
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   8325a:	f240 229c 	movw	r2, #668	; 0x29c
   8325e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83262:	f8d2 e000 	ldr.w	lr, [r2]
   83266:	f04f 0501 	mov.w	r5, #1
   8326a:	f04f 0400 	mov.w	r4, #0
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;
   8326e:	4627      	mov	r7, r4
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
   83270:	46a0      	mov	r8, r4
            } else if (c == ',') {
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
                nfa->stopIdx = nfa->i + 1;
                nfa->state = STATE_TEXT;
   83272:	f04f 0b02 	mov.w	fp, #2
   83276:	ea6f 0104 	mvn.w	r1, r4
   8327a:	18c9      	adds	r1, r1, r3
   8327c:	4029      	ands	r1, r5
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   8327e:	5d00      	ldrb	r0, [r0, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   83280:	4622      	mov	r2, r4
   83282:	2c00      	cmp	r4, #0
   83284:	d04f      	beq.n	83326 <locateStr+0xde>
   83286:	e062      	b.n	8334e <locateStr+0x106>
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   83288:	5d31      	ldrb	r1, [r6, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   8328a:	b112      	cbz	r2, 83292 <locateStr+0x4a>
   8328c:	2a02      	cmp	r2, #2
   8328e:	d11b      	bne.n	832c8 <locateStr+0x80>
   83290:	e00f      	b.n	832b2 <locateStr+0x6a>
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   83292:	eb0e 0001 	add.w	r0, lr, r1
   83296:	7840      	ldrb	r0, [r0, #1]
   83298:	f000 0008 	and.w	r0, r0, #8
   8329c:	b2c0      	uxtb	r0, r0
   8329e:	b110      	cbz	r0, 832a6 <locateStr+0x5e>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   832a0:	462f      	mov	r7, r5
   832a2:	46a8      	mov	r8, r5
   832a4:	e010      	b.n	832c8 <locateStr+0x80>
            } else if (c == ',') {
   832a6:	292c      	cmp	r1, #44	; 0x2c
   832a8:	d01b      	beq.n	832e2 <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   832aa:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   832ac:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   832ae:	465a      	mov	r2, fp
   832b0:	e00a      	b.n	832c8 <locateStr+0x80>
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   832b2:	292c      	cmp	r1, #44	; 0x2c
   832b4:	d018      	beq.n	832e8 <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   832b6:	eb0e 0001 	add.w	r0, lr, r1
   832ba:	7841      	ldrb	r1, [r0, #1]
   832bc:	f001 0008 	and.w	r0, r1, #8
   832c0:	b2c1      	uxtb	r1, r0
                nfa->stopIdx = nfa->i + 1;
   832c2:	2900      	cmp	r1, #0
   832c4:	bf08      	it	eq
   832c6:	462f      	moveq	r7, r5
   832c8:	f104 0401 	add.w	r4, r4, #1
   832cc:	f105 0501 	add.w	r5, r5, #1
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   832d0:	5d31      	ldrb	r1, [r6, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   832d2:	2a00      	cmp	r2, #0
   832d4:	d076      	beq.n	833c4 <locateStr+0x17c>
   832d6:	e089      	b.n	833ec <locateStr+0x1a4>
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;
   832d8:	f04f 0700 	mov.w	r7, #0
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
   832dc:	46b8      	mov	r8, r7
 * @param len2 length of result
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
   832de:	463a      	mov	r2, r7
   832e0:	e004      	b.n	832ec <locateStr+0xa4>
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   832e2:	f04f 0204 	mov.w	r2, #4
   832e6:	e001      	b.n	832ec <locateStr+0xa4>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   832e8:	f04f 0204 	mov.w	r2, #4
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
            break;
        }
    }

    if (isFinalState(nfa.state)) {
   832ec:	4610      	mov	r0, r2
   832ee:	f243 038d 	movw	r3, #12429	; 0x308d
   832f2:	f2c0 0308 	movt	r3, #8
   832f6:	4798      	blx	r3
   832f8:	b168      	cbz	r0, 83316 <locateStr+0xce>

        if (str2) {
   832fa:	9a01      	ldr	r2, [sp, #4]
   832fc:	b10a      	cbz	r2, 83302 <locateStr+0xba>
            *str2 = &str1[nfa.startIdx];
   832fe:	4446      	add	r6, r8
   83300:	6016      	str	r6, [r2, #0]
        }

        if (len2) {
   83302:	f1b9 0f00 	cmp.w	r9, #0
   83306:	d009      	beq.n	8331c <locateStr+0xd4>
            *len2 = nfa.stopIdx - nfa.startIdx;
   83308:	ebc8 0707 	rsb	r7, r8, r7
   8330c:	f8c9 7000 	str.w	r7, [r9]
        }
        return TRUE;
   83310:	f04f 0001 	mov.w	r0, #1
   83314:	e004      	b.n	83320 <locateStr+0xd8>
    }
    return FALSE;
   83316:	f04f 0000 	mov.w	r0, #0
   8331a:	e001      	b.n	83320 <locateStr+0xd8>
        }

        if (len2) {
            *len2 = nfa.stopIdx - nfa.startIdx;
        }
        return TRUE;
   8331c:	f04f 0001 	mov.w	r0, #1
    }
    return FALSE;
}
   83320:	b003      	add	sp, #12
   83322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   83326:	eb0e 0c00 	add.w	ip, lr, r0
   8332a:	f89c c001 	ldrb.w	ip, [ip, #1]
   8332e:	f00c 0c08 	and.w	ip, ip, #8
   83332:	fa5f fc8c 	uxtb.w	ip, ip
   83336:	f1bc 0f00 	cmp.w	ip, #0
   8333a:	d105      	bne.n	83348 <locateStr+0x100>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   8333c:	282c      	cmp	r0, #44	; 0x2c
   8333e:	d0d0      	beq.n	832e2 <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   83340:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   83342:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   83344:	465a      	mov	r2, fp
   83346:	e00e      	b.n	83366 <locateStr+0x11e>
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   83348:	462f      	mov	r7, r5
   8334a:	46a8      	mov	r8, r5
   8334c:	e00b      	b.n	83366 <locateStr+0x11e>
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   8334e:	2c02      	cmp	r4, #2
   83350:	d109      	bne.n	83366 <locateStr+0x11e>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   83352:	282c      	cmp	r0, #44	; 0x2c
   83354:	d0c8      	beq.n	832e8 <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   83356:	4470      	add	r0, lr
   83358:	7840      	ldrb	r0, [r0, #1]
   8335a:	f000 0008 	and.w	r0, r0, #8
   8335e:	b2c0      	uxtb	r0, r0
                nfa->stopIdx = nfa->i + 1;
   83360:	2800      	cmp	r0, #0
   83362:	bf08      	it	eq
   83364:	462f      	moveq	r7, r5
   83366:	f104 0401 	add.w	r4, r4, #1
   8336a:	f105 0501 	add.w	r5, r5, #1
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   8336e:	429c      	cmp	r4, r3
   83370:	d0bc      	beq.n	832ec <locateStr+0xa4>
   83372:	2900      	cmp	r1, #0
   83374:	d088      	beq.n	83288 <locateStr+0x40>
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   83376:	5d31      	ldrb	r1, [r6, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   83378:	b97a      	cbnz	r2, 8339a <locateStr+0x152>
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   8337a:	eb0e 0001 	add.w	r0, lr, r1
   8337e:	7840      	ldrb	r0, [r0, #1]
   83380:	f000 0008 	and.w	r0, r0, #8
   83384:	b2c0      	uxtb	r0, r0
   83386:	b928      	cbnz	r0, 83394 <locateStr+0x14c>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   83388:	292c      	cmp	r1, #44	; 0x2c
   8338a:	d0aa      	beq.n	832e2 <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   8338c:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   8338e:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   83390:	465a      	mov	r2, fp
   83392:	e00f      	b.n	833b4 <locateStr+0x16c>
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   83394:	462f      	mov	r7, r5
   83396:	46a8      	mov	r8, r5
   83398:	e00c      	b.n	833b4 <locateStr+0x16c>
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   8339a:	2a02      	cmp	r2, #2
   8339c:	d10a      	bne.n	833b4 <locateStr+0x16c>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   8339e:	292c      	cmp	r1, #44	; 0x2c
   833a0:	d0a2      	beq.n	832e8 <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   833a2:	eb0e 0001 	add.w	r0, lr, r1
   833a6:	7841      	ldrb	r1, [r0, #1]
   833a8:	f001 0008 	and.w	r0, r1, #8
   833ac:	b2c1      	uxtb	r1, r0
                nfa->stopIdx = nfa->i + 1;
   833ae:	2900      	cmp	r1, #0
   833b0:	bf08      	it	eq
   833b2:	462f      	moveq	r7, r5
   833b4:	f104 0401 	add.w	r4, r4, #1
   833b8:	f105 0501 	add.w	r5, r5, #1
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   833bc:	429c      	cmp	r4, r3
   833be:	f47f af63 	bne.w	83288 <locateStr+0x40>
   833c2:	e793      	b.n	832ec <locateStr+0xa4>
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   833c4:	eb0e 0a01 	add.w	sl, lr, r1
   833c8:	f89a a001 	ldrb.w	sl, [sl, #1]
   833cc:	f00a 0a08 	and.w	sl, sl, #8
   833d0:	fa5f fa8a 	uxtb.w	sl, sl
   833d4:	f1ba 0f00 	cmp.w	sl, #0
   833d8:	d105      	bne.n	833e6 <locateStr+0x19e>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   833da:	292c      	cmp	r1, #44	; 0x2c
   833dc:	d081      	beq.n	832e2 <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   833de:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   833e0:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   833e2:	465a      	mov	r2, fp
   833e4:	e00f      	b.n	83406 <locateStr+0x1be>
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   833e6:	462f      	mov	r7, r5
   833e8:	46a8      	mov	r8, r5
   833ea:	e00c      	b.n	83406 <locateStr+0x1be>
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   833ec:	2a02      	cmp	r2, #2
   833ee:	d10a      	bne.n	83406 <locateStr+0x1be>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   833f0:	292c      	cmp	r1, #44	; 0x2c
   833f2:	f43f af79 	beq.w	832e8 <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   833f6:	4471      	add	r1, lr
   833f8:	7849      	ldrb	r1, [r1, #1]
   833fa:	f001 0108 	and.w	r1, r1, #8
   833fe:	b2c9      	uxtb	r1, r1
                nfa->stopIdx = nfa->i + 1;
   83400:	2900      	cmp	r1, #0
   83402:	bf08      	it	eq
   83404:	462f      	moveq	r7, r5
   83406:	f104 0401 	add.w	r4, r4, #1
   8340a:	f105 0501 	add.w	r5, r5, #1
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   8340e:	429c      	cmp	r4, r3
   83410:	f47f af3a 	bne.w	83288 <locateStr+0x40>
   83414:	e76a      	b.n	832ec <locateStr+0xa4>
   83416:	bf00      	nop

00083418 <skipWhitespace>:
 * Count white spaces from the beggining
 * @param cmd - command
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
   83418:	b470      	push	{r4, r5, r6}
    size_t i;
    for (i = 0; i < len; i++) {
   8341a:	460e      	mov	r6, r1
   8341c:	b311      	cbz	r1, 83464 <skipWhitespace+0x4c>
        if (!isspace((unsigned char)cmd[i])) {
   8341e:	f240 239c 	movw	r3, #668	; 0x29c
   83422:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83426:	681c      	ldr	r4, [r3, #0]
   83428:	7801      	ldrb	r1, [r0, #0]
   8342a:	1862      	adds	r2, r4, r1
   8342c:	7853      	ldrb	r3, [r2, #1]
   8342e:	f003 0108 	and.w	r1, r3, #8
   83432:	b2ca      	uxtb	r2, r1
   83434:	b1c2      	cbz	r2, 83468 <skipWhitespace+0x50>
   83436:	4603      	mov	r3, r0
   83438:	f04f 0000 	mov.w	r0, #0
   8343c:	f016 0f01 	tst.w	r6, #1
   83440:	d109      	bne.n	83456 <skipWhitespace+0x3e>
   83442:	e015      	b.n	83470 <skipWhitespace+0x58>
   83444:	f813 5f01 	ldrb.w	r5, [r3, #1]!
   83448:	1961      	adds	r1, r4, r5
   8344a:	784d      	ldrb	r5, [r1, #1]
   8344c:	f005 0108 	and.w	r1, r5, #8
   83450:	b2cd      	uxtb	r5, r1
   83452:	b9cd      	cbnz	r5, 83488 <skipWhitespace+0x70>
   83454:	e00a      	b.n	8346c <skipWhitespace+0x54>
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   83456:	f100 0201 	add.w	r2, r0, #1
   8345a:	4610      	mov	r0, r2
   8345c:	42b2      	cmp	r2, r6
   8345e:	d1f1      	bne.n	83444 <skipWhitespace+0x2c>
        if (!isspace((unsigned char)cmd[i])) {
            return i;
        }
    }
    return len;
   83460:	4630      	mov	r0, r6
   83462:	e003      	b.n	8346c <skipWhitespace+0x54>
   83464:	4608      	mov	r0, r1
   83466:	e001      	b.n	8346c <skipWhitespace+0x54>
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   83468:	f04f 0000 	mov.w	r0, #0
        if (!isspace((unsigned char)cmd[i])) {
            return i;
        }
    }
    return len;
}
   8346c:	bc70      	pop	{r4, r5, r6}
   8346e:	4770      	bx	lr
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   83470:	f100 0001 	add.w	r0, r0, #1
        if (!isspace((unsigned char)cmd[i])) {
   83474:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   83478:	1862      	adds	r2, r4, r1
   8347a:	7851      	ldrb	r1, [r2, #1]
   8347c:	f001 0208 	and.w	r2, r1, #8
   83480:	b2d1      	uxtb	r1, r2
   83482:	2900      	cmp	r1, #0
   83484:	d1e7      	bne.n	83456 <skipWhitespace+0x3e>
   83486:	e7f1      	b.n	8346c <skipWhitespace+0x54>
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   83488:	f102 0001 	add.w	r0, r2, #1
        if (!isspace((unsigned char)cmd[i])) {
   8348c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   83490:	18a1      	adds	r1, r4, r2
   83492:	784a      	ldrb	r2, [r1, #1]
   83494:	f002 0108 	and.w	r1, r2, #8
   83498:	b2ca      	uxtb	r2, r1
   8349a:	2a00      	cmp	r2, #0
   8349c:	d1db      	bne.n	83456 <skipWhitespace+0x3e>
   8349e:	e7e5      	b.n	8346c <skipWhitespace+0x54>

000834a0 <matchPattern>:
 * @param pattern_len
 * @param str
 * @param str_len
 * @return 
 */
bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
   834a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   834a4:	4680      	mov	r8, r0
   834a6:	4691      	mov	r9, r2
   834a8:	469a      	mov	sl, r3
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   834aa:	468e      	mov	lr, r1
   834ac:	b321      	cbz	r1, 834f8 <matchPattern+0x58>
   834ae:	7803      	ldrb	r3, [r0, #0]
   834b0:	b32b      	cbz	r3, 834fe <matchPattern+0x5e>
        if (islower((unsigned char)pattern[i])) {
   834b2:	f240 229c 	movw	r2, #668	; 0x29c
   834b6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   834ba:	6810      	ldr	r0, [r2, #0]
   834bc:	18c1      	adds	r1, r0, r3
   834be:	784c      	ldrb	r4, [r1, #1]
   834c0:	f004 0503 	and.w	r5, r4, #3
   834c4:	2d02      	cmp	r5, #2
   834c6:	d01d      	beq.n	83504 <matchPattern+0x64>
   834c8:	4642      	mov	r2, r8
   834ca:	f04f 0400 	mov.w	r4, #0
   834ce:	f01e 0f01 	tst.w	lr, #1
   834d2:	d107      	bne.n	834e4 <matchPattern+0x44>
   834d4:	e02f      	b.n	83536 <matchPattern+0x96>
   834d6:	19c7      	adds	r7, r0, r7
   834d8:	7879      	ldrb	r1, [r7, #1]
   834da:	f001 0503 	and.w	r5, r1, #3
   834de:	2d02      	cmp	r5, #2
   834e0:	d136      	bne.n	83550 <matchPattern+0xb0>
   834e2:	e011      	b.n	83508 <matchPattern+0x68>
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   834e4:	f104 0601 	add.w	r6, r4, #1
   834e8:	4634      	mov	r4, r6
   834ea:	4576      	cmp	r6, lr
   834ec:	d00c      	beq.n	83508 <matchPattern+0x68>
   834ee:	f812 7f01 	ldrb.w	r7, [r2, #1]!
   834f2:	2f00      	cmp	r7, #0
   834f4:	d1ef      	bne.n	834d6 <matchPattern+0x36>
   834f6:	e007      	b.n	83508 <matchPattern+0x68>
   834f8:	f04f 0400 	mov.w	r4, #0
   834fc:	e004      	b.n	83508 <matchPattern+0x68>
   834fe:	f04f 0400 	mov.w	r4, #0
   83502:	e001      	b.n	83508 <matchPattern+0x68>
   83504:	f04f 0400 	mov.w	r4, #0
 * @param str_len
 * @return 
 */
bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
    int pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
    return compareStr(pattern, pattern_len, str, str_len) ||
   83508:	4640      	mov	r0, r8
   8350a:	4671      	mov	r1, lr
   8350c:	464a      	mov	r2, r9
   8350e:	4653      	mov	r3, sl
   83510:	f243 2521 	movw	r5, #12833	; 0x3221
   83514:	f2c0 0508 	movt	r5, #8
   83518:	47a8      	blx	r5
   8351a:	b930      	cbnz	r0, 8352a <matchPattern+0x8a>
            compareStr(pattern, pattern_sep_pos_short, str, str_len);
   8351c:	4640      	mov	r0, r8
   8351e:	4621      	mov	r1, r4
   83520:	464a      	mov	r2, r9
   83522:	4653      	mov	r3, sl
   83524:	462c      	mov	r4, r5
   83526:	47a8      	blx	r5
   83528:	e001      	b.n	8352e <matchPattern+0x8e>
 * @param str_len
 * @return 
 */
bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
    int pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
    return compareStr(pattern, pattern_len, str, str_len) ||
   8352a:	f04f 0001 	mov.w	r0, #1
            compareStr(pattern, pattern_sep_pos_short, str, str_len);
}
   8352e:	f000 0001 	and.w	r0, r0, #1
   83532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   83536:	f104 0401 	add.w	r4, r4, #1
   8353a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   8353e:	2b00      	cmp	r3, #0
   83540:	d0e2      	beq.n	83508 <matchPattern+0x68>
        if (islower((unsigned char)pattern[i])) {
   83542:	18c1      	adds	r1, r0, r3
   83544:	784d      	ldrb	r5, [r1, #1]
   83546:	f005 0303 	and.w	r3, r5, #3
   8354a:	2b02      	cmp	r3, #2
   8354c:	d1ca      	bne.n	834e4 <matchPattern+0x44>
   8354e:	e7db      	b.n	83508 <matchPattern+0x68>
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   83550:	f106 0401 	add.w	r4, r6, #1
   83554:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   83558:	2b00      	cmp	r3, #0
   8355a:	d0d5      	beq.n	83508 <matchPattern+0x68>
        if (islower((unsigned char)pattern[i])) {
   8355c:	18c1      	adds	r1, r0, r3
   8355e:	784d      	ldrb	r5, [r1, #1]
   83560:	f005 0303 	and.w	r3, r5, #3
   83564:	2b02      	cmp	r3, #2
   83566:	d1bd      	bne.n	834e4 <matchPattern+0x44>
   83568:	e7ce      	b.n	83508 <matchPattern+0x68>
   8356a:	bf00      	nop

0008356c <matchCommand>:
 * @param pattern
 * @param cmd - command
 * @param len - max search length
 * @return TRUE if pattern matches, FALSE otherwise
 */
bool_t matchCommand(const char * pattern, const char * cmd, size_t len) {
   8356c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83570:	4605      	mov	r5, r0
   83572:	460c      	mov	r4, r1
   83574:	4616      	mov	r6, r2
    int result = FALSE;
    
    const char * pattern_ptr = pattern;
    int pattern_len = strlen(pattern);
   83576:	f64a 53b1 	movw	r3, #44465	; 0xadb1
   8357a:	f2c0 0308 	movt	r3, #8
   8357e:	4798      	blx	r3
    const char * pattern_end = pattern + pattern_len;
   83580:	eb05 0900 	add.w	r9, r5, r0
    
    const char * cmd_ptr = cmd;
    size_t cmd_len = SCPI_strnlen(cmd, len);
   83584:	4620      	mov	r0, r4
   83586:	4631      	mov	r1, r6
   83588:	f64a 6233 	movw	r2, #44595	; 0xae33
   8358c:	f2c0 0208 	movt	r2, #8
   83590:	4790      	blx	r2
    const char * cmd_end = cmd + cmd_len;
   83592:	eb04 0a00 	add.w	sl, r4, r0
    
    /* TODO: now it is possible to send command ":*IDN?" which is incorrect */
    if (iscolon(cmd_ptr[0])) {
   83596:	7820      	ldrb	r0, [r4, #0]
   83598:	283a      	cmp	r0, #58	; 0x3a
        cmd_len --;
        cmd_ptr ++;
   8359a:	bf08      	it	eq
   8359c:	3401      	addeq	r4, #1
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorPos(const char * pattern, size_t len) {
    
    char * separator = strnpbrk(pattern, len, "?:[]");
   8359e:	f64d 4b3c 	movw	fp, #56380	; 0xdc3c
   835a2:	f2c0 0b08 	movt	fp, #8
   835a6:	f243 08a9 	movw	r8, #12457	; 0x30a9
   835aa:	f2c0 0808 	movt	r8, #8
        cmd_len --;
        cmd_ptr ++;
    }
    
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
   835ae:	ebc5 0709 	rsb	r7, r5, r9
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorPos(const char * pattern, size_t len) {
    
    char * separator = strnpbrk(pattern, len, "?:[]");
   835b2:	4628      	mov	r0, r5
   835b4:	4639      	mov	r1, r7
   835b6:	465a      	mov	r2, fp
   835b8:	47c0      	blx	r8
    if (separator == NULL) {
   835ba:	b100      	cbz	r0, 835be <matchCommand+0x52>
        return len;
    } else {
        return separator - pattern;
   835bc:	1b47      	subs	r7, r0, r5
        cmd_ptr ++;
    }
    
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
        int cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_end - cmd_ptr);
   835be:	ebc4 060a 	rsb	r6, r4, sl
 * @param cmd - input command
 * @param len - max search length
 * @return position of separator or len
 */
size_t cmdSeparatorPos(const char * cmd, size_t len) {
    char * separator = strnpbrk(cmd, len, ":?");
   835c2:	4620      	mov	r0, r4
   835c4:	4631      	mov	r1, r6
   835c6:	4a1b      	ldr	r2, [pc, #108]	; (83634 <matchCommand+0xc8>)
   835c8:	47c0      	blx	r8
    size_t result;
    if (separator == NULL) {
   835ca:	b100      	cbz	r0, 835ce <matchCommand+0x62>
        result = len;
    } else {
        result = separator - cmd;
   835cc:	1b06      	subs	r6, r0, r4
    
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
        int cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_end - cmd_ptr);
        
        if (matchPattern(pattern_ptr, pattern_sep_pos, cmd_ptr, cmd_sep_pos)) {
   835ce:	4628      	mov	r0, r5
   835d0:	4639      	mov	r1, r7
   835d2:	4622      	mov	r2, r4
   835d4:	4633      	mov	r3, r6
   835d6:	f243 4ca1 	movw	ip, #13473	; 0x34a1
   835da:	f2c0 0c08 	movt	ip, #8
   835de:	47e0      	blx	ip
   835e0:	b1c0      	cbz	r0, 83614 <matchCommand+0xa8>
            pattern_ptr = pattern_ptr + pattern_sep_pos;
   835e2:	19ed      	adds	r5, r5, r7
            cmd_ptr = cmd_ptr + cmd_sep_pos;
   835e4:	19a4      	adds	r4, r4, r6
            result = TRUE;
            
            /* command is complete */
            if ((pattern_ptr == pattern_end) && (cmd_ptr >= cmd_end)) {
   835e6:	454d      	cmp	r5, r9
   835e8:	d105      	bne.n	835f6 <matchCommand+0x8a>
   835ea:	45a2      	cmp	sl, r4
   835ec:	bf8c      	ite	hi
   835ee:	2000      	movhi	r0, #0
   835f0:	2001      	movls	r0, #1
   835f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                result = FALSE;
                break;
            }
            
            /* command complete, but pattern not */
            if (cmd_ptr >= cmd_end) {
   835f6:	45a2      	cmp	sl, r4
   835f8:	d910      	bls.n	8361c <matchCommand+0xb0>
                result = FALSE;
                break;
            }
            
            /* both command and patter contains command separator at this position */
            if ((pattern_ptr[0] == cmd_ptr[0]) && ((pattern_ptr[0] == ':') || (pattern_ptr[0] == '?'))) {
   835fa:	7828      	ldrb	r0, [r5, #0]
   835fc:	7822      	ldrb	r2, [r4, #0]
   835fe:	4282      	cmp	r2, r0
   83600:	d110      	bne.n	83624 <matchCommand+0xb8>
   83602:	283a      	cmp	r0, #58	; 0x3a
   83604:	d001      	beq.n	8360a <matchCommand+0x9e>
   83606:	283f      	cmp	r0, #63	; 0x3f
   83608:	d110      	bne.n	8362c <matchCommand+0xc0>
                pattern_ptr = pattern_ptr + 1;
   8360a:	f105 0501 	add.w	r5, r5, #1
                cmd_ptr = cmd_ptr + 1;
   8360e:	f104 0401 	add.w	r4, r4, #1
   83612:	e7cc      	b.n	835ae <matchCommand+0x42>
            } else {
                result = FALSE;
                break;
            }
        } else {
            result = FALSE;
   83614:	f04f 0000 	mov.w	r0, #0
   83618:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                break;
            }
            
            /* command complete, but pattern not */
            if (cmd_ptr >= cmd_end) {
                result = FALSE;
   8361c:	f04f 0000 	mov.w	r0, #0
   83620:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            /* both command and patter contains command separator at this position */
            if ((pattern_ptr[0] == cmd_ptr[0]) && ((pattern_ptr[0] == ':') || (pattern_ptr[0] == '?'))) {
                pattern_ptr = pattern_ptr + 1;
                cmd_ptr = cmd_ptr + 1;
            } else {
                result = FALSE;
   83624:	f04f 0000 	mov.w	r0, #0
   83628:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8362c:	f04f 0000 	mov.w	r0, #0
            break;
        }
    }
    
    return result;
}
   83630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83634:	0008dc44 	.word	0x0008dc44

00083638 <SCPI_GetModuleType>:
 #include <string.h>
 #include <math.h>
 #include "asf.h"
 
 scpi_result_t SCPI_GetModuleType(scpi_t * context)
 {
   83638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 printf("Low cost dual discriminators (v1)\x0D");
   8363a:	f64d 4748 	movw	r7, #56392	; 0xdc48
   8363e:	f2c0 0708 	movt	r7, #8
   83642:	f641 3520 	movw	r5, #6944	; 0x1b20
   83646:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8364a:	463c      	mov	r4, r7
   8364c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   8364e:	6028      	str	r0, [r5, #0]
   83650:	6069      	str	r1, [r5, #4]
   83652:	60aa      	str	r2, [r5, #8]
   83654:	60eb      	str	r3, [r5, #12]
   83656:	f105 0510 	add.w	r5, r5, #16
   8365a:	462e      	mov	r6, r5
   8365c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   8365e:	6028      	str	r0, [r5, #0]
   83660:	6069      	str	r1, [r5, #4]
   83662:	60aa      	str	r2, [r5, #8]
   83664:	60eb      	str	r3, [r5, #12]
   83666:	4627      	mov	r7, r4
   83668:	8822      	ldrh	r2, [r4, #0]
   8366a:	78a3      	ldrb	r3, [r4, #2]
   8366c:	f825 2f10 	strh.w	r2, [r5, #16]!
   83670:	70ab      	strb	r3, [r5, #2]
   83672:	f641 3020 	movw	r0, #6944	; 0x1b20
   83676:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8367a:	f644 6119 	movw	r1, #19993	; 0x4e19
   8367e:	f2c0 0108 	movt	r1, #8
   83682:	4788      	blx	r1
	 return SCPI_RES_OK;
 }
   83684:	f04f 0001 	mov.w	r0, #1
   83688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8368a:	bf00      	nop

0008368c <SCPI_GetModuleName>:

scpi_result_t SCPI_GetModuleName(scpi_t * context)
{
   8368c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("Low cost dual discriminators (v1)\x0D");
   8368e:	f64d 4748 	movw	r7, #56392	; 0xdc48
   83692:	f2c0 0708 	movt	r7, #8
   83696:	f641 3520 	movw	r5, #6944	; 0x1b20
   8369a:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8369e:	463c      	mov	r4, r7
   836a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   836a2:	6028      	str	r0, [r5, #0]
   836a4:	6069      	str	r1, [r5, #4]
   836a6:	60aa      	str	r2, [r5, #8]
   836a8:	60eb      	str	r3, [r5, #12]
   836aa:	f105 0510 	add.w	r5, r5, #16
   836ae:	462e      	mov	r6, r5
   836b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   836b2:	6028      	str	r0, [r5, #0]
   836b4:	6069      	str	r1, [r5, #4]
   836b6:	60aa      	str	r2, [r5, #8]
   836b8:	60eb      	str	r3, [r5, #12]
   836ba:	4627      	mov	r7, r4
   836bc:	8822      	ldrh	r2, [r4, #0]
   836be:	78a3      	ldrb	r3, [r4, #2]
   836c0:	f825 2f10 	strh.w	r2, [r5, #16]!
   836c4:	70ab      	strb	r3, [r5, #2]
   836c6:	f641 3020 	movw	r0, #6944	; 0x1b20
   836ca:	f2c2 0007 	movt	r0, #8199	; 0x2007
   836ce:	f644 6119 	movw	r1, #19993	; 0x4e19
   836d2:	f2c0 0108 	movt	r1, #8
   836d6:	4788      	blx	r1
	return SCPI_RES_OK;
}
   836d8:	f04f 0001 	mov.w	r0, #1
   836dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   836de:	bf00      	nop

000836e0 <SCPI_GetModuleDescription>:

scpi_result_t SCPI_GetModuleDescription(scpi_t * context)
{
   836e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("Low cost dual discriminators (v1)\x0D");
   836e2:	f64d 4748 	movw	r7, #56392	; 0xdc48
   836e6:	f2c0 0708 	movt	r7, #8
   836ea:	f641 3520 	movw	r5, #6944	; 0x1b20
   836ee:	f2c2 0507 	movt	r5, #8199	; 0x2007
   836f2:	463c      	mov	r4, r7
   836f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   836f6:	6028      	str	r0, [r5, #0]
   836f8:	6069      	str	r1, [r5, #4]
   836fa:	60aa      	str	r2, [r5, #8]
   836fc:	60eb      	str	r3, [r5, #12]
   836fe:	f105 0510 	add.w	r5, r5, #16
   83702:	462e      	mov	r6, r5
   83704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   83706:	6028      	str	r0, [r5, #0]
   83708:	6069      	str	r1, [r5, #4]
   8370a:	60aa      	str	r2, [r5, #8]
   8370c:	60eb      	str	r3, [r5, #12]
   8370e:	4627      	mov	r7, r4
   83710:	8822      	ldrh	r2, [r4, #0]
   83712:	78a3      	ldrb	r3, [r4, #2]
   83714:	f825 2f10 	strh.w	r2, [r5, #16]!
   83718:	70ab      	strb	r3, [r5, #2]
   8371a:	f641 3020 	movw	r0, #6944	; 0x1b20
   8371e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83722:	f644 6119 	movw	r1, #19993	; 0x4e19
   83726:	f2c0 0108 	movt	r1, #8
   8372a:	4788      	blx	r1
	return SCPI_RES_OK;
}
   8372c:	f04f 0001 	mov.w	r0, #1
   83730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83732:	bf00      	nop

00083734 <SCPI_GetModuleSN>:

scpi_result_t SCPI_GetModuleSN(scpi_t * context)
{
   83734:	b508      	push	{r3, lr}
	printf("0x0000\x0D");
   83736:	f641 3220 	movw	r2, #6944	; 0x1b20
   8373a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8373e:	f64d 436c 	movw	r3, #56428	; 0xdc6c
   83742:	f2c0 0308 	movt	r3, #8
   83746:	cb03      	ldmia	r3!, {r0, r1}
   83748:	6010      	str	r0, [r2, #0]
   8374a:	6051      	str	r1, [r2, #4]
   8374c:	4610      	mov	r0, r2
   8374e:	f644 6119 	movw	r1, #19993	; 0x4e19
   83752:	f2c0 0108 	movt	r1, #8
   83756:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83758:	f04f 0001 	mov.w	r0, #1
   8375c:	bd08      	pop	{r3, pc}
   8375e:	bf00      	nop

00083760 <SCPI_GetDissipatedPower>:

scpi_result_t SCPI_GetDissipatedPower(scpi_t * context)
{
   83760:	b508      	push	{r3, lr}
	printf("840mW\x0D");
   83762:	f641 3320 	movw	r3, #6944	; 0x1b20
   83766:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8376a:	f64d 4274 	movw	r2, #56436	; 0xdc74
   8376e:	f2c0 0208 	movt	r2, #8
   83772:	6810      	ldr	r0, [r2, #0]
   83774:	6018      	str	r0, [r3, #0]
   83776:	8891      	ldrh	r1, [r2, #4]
   83778:	7992      	ldrb	r2, [r2, #6]
   8377a:	8099      	strh	r1, [r3, #4]
   8377c:	719a      	strb	r2, [r3, #6]
   8377e:	4618      	mov	r0, r3
   83780:	f644 6319 	movw	r3, #19993	; 0x4e19
   83784:	f2c0 0308 	movt	r3, #8
   83788:	4798      	blx	r3
	return SCPI_RES_OK;
}
   8378a:	f04f 0001 	mov.w	r0, #1
   8378e:	bd08      	pop	{r3, pc}

00083790 <SCPI_GetMaxCurrent>:

scpi_result_t SCPI_GetMaxCurrent(scpi_t * context)
{
   83790:	b508      	push	{r3, lr}
	printf("0mA\x0D");
   83792:	f641 3320 	movw	r3, #6944	; 0x1b20
   83796:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8379a:	f64d 427c 	movw	r2, #56444	; 0xdc7c
   8379e:	f2c0 0208 	movt	r2, #8
   837a2:	6810      	ldr	r0, [r2, #0]
   837a4:	6018      	str	r0, [r3, #0]
   837a6:	7911      	ldrb	r1, [r2, #4]
   837a8:	7119      	strb	r1, [r3, #4]
   837aa:	4618      	mov	r0, r3
   837ac:	f644 6319 	movw	r3, #19993	; 0x4e19
   837b0:	f2c0 0308 	movt	r3, #8
   837b4:	4798      	blx	r3
	return SCPI_RES_OK;
}
   837b6:	f04f 0001 	mov.w	r0, #1
   837ba:	bd08      	pop	{r3, pc}

000837bc <SCPI_GetNomCurrent>:

scpi_result_t SCPI_GetNomCurrent(scpi_t * context)
{
   837bc:	b508      	push	{r3, lr}
	printf("0mA\x0D");
   837be:	f641 3320 	movw	r3, #6944	; 0x1b20
   837c2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   837c6:	f64d 427c 	movw	r2, #56444	; 0xdc7c
   837ca:	f2c0 0208 	movt	r2, #8
   837ce:	6810      	ldr	r0, [r2, #0]
   837d0:	6018      	str	r0, [r3, #0]
   837d2:	7911      	ldrb	r1, [r2, #4]
   837d4:	7119      	strb	r1, [r3, #4]
   837d6:	4618      	mov	r0, r3
   837d8:	f644 6319 	movw	r3, #19993	; 0x4e19
   837dc:	f2c0 0308 	movt	r3, #8
   837e0:	4798      	blx	r3
	return SCPI_RES_OK;
}
   837e2:	f04f 0001 	mov.w	r0, #1
   837e6:	bd08      	pop	{r3, pc}

000837e8 <SCPI_GetSDCardStatus>:

scpi_result_t SCPI_GetSDCardStatus(scpi_t * context)
{
   837e8:	b508      	push	{r3, lr}
	printf("OK\x0D");
   837ea:	f641 3320 	movw	r3, #6944	; 0x1b20
   837ee:	f2c2 0307 	movt	r3, #8199	; 0x2007
   837f2:	f64d 4284 	movw	r2, #56452	; 0xdc84
   837f6:	f2c0 0208 	movt	r2, #8
   837fa:	6810      	ldr	r0, [r2, #0]
   837fc:	6018      	str	r0, [r3, #0]
   837fe:	4618      	mov	r0, r3
   83800:	f644 6119 	movw	r1, #19993	; 0x4e19
   83804:	f2c0 0108 	movt	r1, #8
   83808:	4788      	blx	r1
	return SCPI_RES_OK;
}
   8380a:	f04f 0001 	mov.w	r0, #1
   8380e:	bd08      	pop	{r3, pc}

00083810 <SCPI_LedStatus>:

scpi_result_t SCPI_LedStatus(scpi_t * context)
{
   83810:	b508      	push	{r3, lr}
	printf("OK\x0D");
   83812:	f641 3320 	movw	r3, #6944	; 0x1b20
   83816:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8381a:	f64d 4284 	movw	r2, #56452	; 0xdc84
   8381e:	f2c0 0208 	movt	r2, #8
   83822:	6810      	ldr	r0, [r2, #0]
   83824:	6018      	str	r0, [r3, #0]
   83826:	4618      	mov	r0, r3
   83828:	f644 6119 	movw	r1, #19993	; 0x4e19
   8382c:	f2c0 0108 	movt	r1, #8
   83830:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83832:	f04f 0001 	mov.w	r0, #1
   83836:	bd08      	pop	{r3, pc}

00083838 <SCPI_ButtonStatus>:

scpi_result_t SCPI_ButtonStatus(scpi_t * context)
{
   83838:	b508      	push	{r3, lr}
	if(get_user_button_status() == RETURN_OK)
   8383a:	f242 23bd 	movw	r3, #8893	; 0x22bd
   8383e:	f2c0 0308 	movt	r3, #8
   83842:	4798      	blx	r3
   83844:	2801      	cmp	r0, #1
   83846:	d111      	bne.n	8386c <SCPI_ButtonStatus+0x34>
	{
		printf("pushed\x0D");
   83848:	f641 3220 	movw	r2, #6944	; 0x1b20
   8384c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83850:	f64d 4388 	movw	r3, #56456	; 0xdc88
   83854:	f2c0 0308 	movt	r3, #8
   83858:	cb03      	ldmia	r3!, {r0, r1}
   8385a:	6010      	str	r0, [r2, #0]
   8385c:	6051      	str	r1, [r2, #4]
   8385e:	4610      	mov	r0, r2
   83860:	f644 6119 	movw	r1, #19993	; 0x4e19
   83864:	f2c0 0108 	movt	r1, #8
   83868:	4788      	blx	r1
   8386a:	e012      	b.n	83892 <SCPI_ButtonStatus+0x5a>
	} 
	else
	{
		printf("released\x0D");
   8386c:	f641 3220 	movw	r2, #6944	; 0x1b20
   83870:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83874:	f64d 4390 	movw	r3, #56464	; 0xdc90
   83878:	f2c0 0308 	movt	r3, #8
   8387c:	cb03      	ldmia	r3!, {r0, r1}
   8387e:	6010      	str	r0, [r2, #0]
   83880:	6051      	str	r1, [r2, #4]
   83882:	8818      	ldrh	r0, [r3, #0]
   83884:	8110      	strh	r0, [r2, #8]
   83886:	4610      	mov	r0, r2
   83888:	f644 6119 	movw	r1, #19993	; 0x4e19
   8388c:	f2c0 0108 	movt	r1, #8
   83890:	4788      	blx	r1
	}
	return SCPI_RES_OK;
}
   83892:	f04f 0001 	mov.w	r0, #1
   83896:	bd08      	pop	{r3, pc}

00083898 <SCPI_EEPROM_Read>:

scpi_result_t SCPI_EEPROM_Read(scpi_t * context)
{
	// TBD...
	return SCPI_RES_OK;
}
   83898:	f04f 0001 	mov.w	r0, #1
   8389c:	4770      	bx	lr
   8389e:	bf00      	nop

000838a0 <SCPI_EEPROM_Write>:

scpi_result_t SCPI_EEPROM_Write(scpi_t * context)
{
	// TBD...
	return SCPI_RES_OK;
}
   838a0:	f04f 0001 	mov.w	r0, #1
   838a4:	4770      	bx	lr
   838a6:	bf00      	nop

000838a8 <SCPI_SetPower>:

scpi_result_t SCPI_SetPower(scpi_t * context)
{
   838a8:	b530      	push	{r4, r5, lr}
   838aa:	b083      	sub	sp, #12
	const char * param;
	size_t param_len;

	if(!SCPI_ParamString(context, &param, &param_len, true)) 
   838ac:	a901      	add	r1, sp, #4
   838ae:	466a      	mov	r2, sp
   838b0:	f04f 0301 	mov.w	r3, #1
   838b4:	f642 74c1 	movw	r4, #12225	; 0x2fc1
   838b8:	f2c0 0408 	movt	r4, #8
   838bc:	47a0      	blx	r4
   838be:	2800      	cmp	r0, #0
   838c0:	d039      	beq.n	83936 <SCPI_SetPower+0x8e>
		return SCPI_RES_ERR;
		
	if(param_len >= 2)
   838c2:	9c00      	ldr	r4, [sp, #0]
   838c4:	2c01      	cmp	r4, #1
   838c6:	d939      	bls.n	8393c <SCPI_SetPower+0x94>
	{
		if(strncmp(param, "ON", 2) == 0)
   838c8:	9d01      	ldr	r5, [sp, #4]
   838ca:	4628      	mov	r0, r5
   838cc:	f64d 419c 	movw	r1, #56476	; 0xdc9c
   838d0:	f2c0 0108 	movt	r1, #8
   838d4:	f04f 0202 	mov.w	r2, #2
   838d8:	f64a 6305 	movw	r3, #44549	; 0xae05
   838dc:	f2c0 0308 	movt	r3, #8
   838e0:	4798      	blx	r3
   838e2:	b960      	cbnz	r0, 838fe <SCPI_SetPower+0x56>
		{
			enable_12v();
   838e4:	f242 23f1 	movw	r3, #8945	; 0x22f1
   838e8:	f2c0 0308 	movt	r3, #8
   838ec:	4798      	blx	r3
			init_module_peripherals_ap();
   838ee:	f641 7071 	movw	r0, #8049	; 0x1f71
   838f2:	f2c0 0008 	movt	r0, #8
   838f6:	4780      	blx	r0
			return SCPI_RES_OK;
   838f8:	f04f 0001 	mov.w	r0, #1
   838fc:	e026      	b.n	8394c <SCPI_SetPower+0xa4>
		}
		else if((param_len > 2) && (strncmp(param, "OFF", 3) == 0))
   838fe:	2c02      	cmp	r4, #2
   83900:	d91f      	bls.n	83942 <SCPI_SetPower+0x9a>
   83902:	4628      	mov	r0, r5
   83904:	f64d 41a0 	movw	r1, #56480	; 0xdca0
   83908:	f2c0 0108 	movt	r1, #8
   8390c:	f04f 0203 	mov.w	r2, #3
   83910:	f64a 6305 	movw	r3, #44549	; 0xae05
   83914:	f2c0 0308 	movt	r3, #8
   83918:	4798      	blx	r3
   8391a:	b9a8      	cbnz	r0, 83948 <SCPI_SetPower+0xa0>
		{
			deinit_module_peripherals();
   8391c:	f242 110d 	movw	r1, #8461	; 0x210d
   83920:	f2c0 0108 	movt	r1, #8
   83924:	4788      	blx	r1
			disable_12v();
   83926:	f242 3201 	movw	r2, #8961	; 0x2301
   8392a:	f2c0 0208 	movt	r2, #8
   8392e:	4790      	blx	r2
			return SCPI_RES_OK;
   83930:	f04f 0001 	mov.w	r0, #1
   83934:	e00a      	b.n	8394c <SCPI_SetPower+0xa4>
{
	const char * param;
	size_t param_len;

	if(!SCPI_ParamString(context, &param, &param_len, true)) 
		return SCPI_RES_ERR;
   83936:	f04f 00ff 	mov.w	r0, #255	; 0xff
   8393a:	e007      	b.n	8394c <SCPI_SetPower+0xa4>
			return SCPI_RES_ERR;
		}
	}
	else
	{
		return SCPI_RES_OK;
   8393c:	f04f 0001 	mov.w	r0, #1
   83940:	e004      	b.n	8394c <SCPI_SetPower+0xa4>
			disable_12v();
			return SCPI_RES_OK;
		}
		else
		{
			return SCPI_RES_ERR;
   83942:	f04f 00ff 	mov.w	r0, #255	; 0xff
   83946:	e001      	b.n	8394c <SCPI_SetPower+0xa4>
   83948:	f04f 00ff 	mov.w	r0, #255	; 0xff
	{
		return SCPI_RES_OK;
	}
	
	return SCPI_RES_OK;
}
   8394c:	b240      	sxtb	r0, r0
   8394e:	b003      	add	sp, #12
   83950:	bd30      	pop	{r4, r5, pc}
   83952:	bf00      	nop

00083954 <SCPI_SetUserLed>:

scpi_result_t SCPI_SetUserLed(scpi_t * context)
{
   83954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83958:	b084      	sub	sp, #16
   8395a:	4604      	mov	r4, r0
	uint32_t param1, param2, param3;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
   8395c:	a903      	add	r1, sp, #12
   8395e:	f04f 0201 	mov.w	r2, #1
   83962:	f243 0331 	movw	r3, #12337	; 0x3031
   83966:	f2c0 0308 	movt	r3, #8
   8396a:	4798      	blx	r3
   8396c:	2800      	cmp	r0, #0
   8396e:	d046      	beq.n	839fe <SCPI_SetUserLed+0xaa>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}

	// read second paraeter if present
	if (!SCPI_ParamInt(context, &param2, true)) {
   83970:	4620      	mov	r0, r4
   83972:	a902      	add	r1, sp, #8
   83974:	f04f 0201 	mov.w	r2, #1
   83978:	f243 0331 	movw	r3, #12337	; 0x3031
   8397c:	f2c0 0308 	movt	r3, #8
   83980:	4798      	blx	r3
   83982:	2800      	cmp	r0, #0
   83984:	d03e      	beq.n	83a04 <SCPI_SetUserLed+0xb0>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}

	// read second paraeter if present
	if (!SCPI_ParamInt(context, &param3, true)) {
   83986:	4620      	mov	r0, r4
   83988:	a901      	add	r1, sp, #4
   8398a:	f04f 0201 	mov.w	r2, #1
   8398e:	f243 0331 	movw	r3, #12337	; 0x3031
   83992:	f2c0 0308 	movt	r3, #8
   83996:	4798      	blx	r3
   83998:	2800      	cmp	r0, #0
   8399a:	d036      	beq.n	83a0a <SCPI_SetUserLed+0xb6>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}

	set_user_led_colour((uint16_t)round(param1), (uint16_t)round(param2), (uint16_t)round(param3));
   8399c:	f24a 59f1 	movw	r9, #42481	; 0xa5f1
   839a0:	f2c0 0908 	movt	r9, #8
   839a4:	9803      	ldr	r0, [sp, #12]
   839a6:	47c8      	blx	r9
   839a8:	f24a 28d9 	movw	r8, #41689	; 0xa2d9
   839ac:	f2c0 0808 	movt	r8, #8
   839b0:	47c0      	blx	r8
   839b2:	4606      	mov	r6, r0
   839b4:	460f      	mov	r7, r1
   839b6:	9802      	ldr	r0, [sp, #8]
   839b8:	47c8      	blx	r9
   839ba:	47c0      	blx	r8
   839bc:	4604      	mov	r4, r0
   839be:	460d      	mov	r5, r1
   839c0:	9801      	ldr	r0, [sp, #4]
   839c2:	47c8      	blx	r9
   839c4:	47c0      	blx	r8
   839c6:	4680      	mov	r8, r0
   839c8:	4689      	mov	r9, r1
   839ca:	f64a 3a51 	movw	sl, #43857	; 0xab51
   839ce:	f2c0 0a08 	movt	sl, #8
   839d2:	4630      	mov	r0, r6
   839d4:	4639      	mov	r1, r7
   839d6:	47d0      	blx	sl
   839d8:	b286      	uxth	r6, r0
   839da:	4620      	mov	r0, r4
   839dc:	4629      	mov	r1, r5
   839de:	47d0      	blx	sl
   839e0:	b284      	uxth	r4, r0
   839e2:	4640      	mov	r0, r8
   839e4:	4649      	mov	r1, r9
   839e6:	47d0      	blx	sl
   839e8:	b282      	uxth	r2, r0
   839ea:	4630      	mov	r0, r6
   839ec:	4621      	mov	r1, r4
   839ee:	f242 2379 	movw	r3, #8825	; 0x2279
   839f2:	f2c0 0308 	movt	r3, #8
   839f6:	4798      	blx	r3
	return SCPI_RES_OK;
   839f8:	f04f 0001 	mov.w	r0, #1
   839fc:	e007      	b.n	83a0e <SCPI_SetUserLed+0xba>
	uint32_t param1, param2, param3;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   839fe:	f04f 00ff 	mov.w	r0, #255	; 0xff
   83a02:	e004      	b.n	83a0e <SCPI_SetUserLed+0xba>
	}

	// read second paraeter if present
	if (!SCPI_ParamInt(context, &param2, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83a04:	f04f 00ff 	mov.w	r0, #255	; 0xff
   83a08:	e001      	b.n	83a0e <SCPI_SetUserLed+0xba>
	}

	// read second paraeter if present
	if (!SCPI_ParamInt(context, &param3, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83a0a:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}

	set_user_led_colour((uint16_t)round(param1), (uint16_t)round(param2), (uint16_t)round(param3));
	return SCPI_RES_OK;
   83a0e:	b240      	sxtb	r0, r0
   83a10:	b004      	add	sp, #16
   83a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83a16:	bf00      	nop

00083a18 <SCPI_TestSPISend>:
#include "peripherals_module.h"
#include <string.h>
#include <math.h>

scpi_result_t SCPI_TestSPISend(scpi_t* context)
{
   83a18:	b500      	push	{lr}
   83a1a:	b083      	sub	sp, #12
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   83a1c:	a901      	add	r1, sp, #4
   83a1e:	f04f 0201 	mov.w	r2, #1
   83a22:	f243 0331 	movw	r3, #12337	; 0x3031
   83a26:	f2c0 0308 	movt	r3, #8
   83a2a:	4798      	blx	r3
   83a2c:	b1c0      	cbz	r0, 83a60 <SCPI_TestSPISend+0x48>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	fpga_send_spi_16bits((uint16_t)round(param));	
   83a2e:	9801      	ldr	r0, [sp, #4]
   83a30:	f24a 51f1 	movw	r1, #42481	; 0xa5f1
   83a34:	f2c0 0108 	movt	r1, #8
   83a38:	4788      	blx	r1
   83a3a:	f24a 22d9 	movw	r2, #41689	; 0xa2d9
   83a3e:	f2c0 0208 	movt	r2, #8
   83a42:	4790      	blx	r2
   83a44:	f64a 3351 	movw	r3, #43857	; 0xab51
   83a48:	f2c0 0308 	movt	r3, #8
   83a4c:	4798      	blx	r3
   83a4e:	b280      	uxth	r0, r0
   83a50:	f641 31d5 	movw	r1, #7125	; 0x1bd5
   83a54:	f2c0 0108 	movt	r1, #8
   83a58:	4788      	blx	r1
	return SCPI_RES_OK;	
   83a5a:	f04f 0001 	mov.w	r0, #1
   83a5e:	e001      	b.n	83a64 <SCPI_TestSPISend+0x4c>
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83a60:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	
	fpga_send_spi_16bits((uint16_t)round(param));	
	return SCPI_RES_OK;	
}
   83a64:	b240      	sxtb	r0, r0
   83a66:	b003      	add	sp, #12
   83a68:	bd00      	pop	{pc}
   83a6a:	bf00      	nop

00083a6c <SCPI_TestSPIReceive>:

scpi_result_t SCPI_TestSPIReceive(scpi_t* context)
{
   83a6c:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", fpga_send_spi_16bits(0));
   83a6e:	f04f 0000 	mov.w	r0, #0
   83a72:	f641 33d5 	movw	r3, #7125	; 0x1bd5
   83a76:	f2c0 0308 	movt	r3, #8
   83a7a:	4798      	blx	r3
   83a7c:	4603      	mov	r3, r0
   83a7e:	f641 3420 	movw	r4, #6944	; 0x1b20
   83a82:	f2c2 0407 	movt	r4, #8199	; 0x2007
   83a86:	4620      	mov	r0, r4
   83a88:	f04f 0164 	mov.w	r1, #100	; 0x64
   83a8c:	f64d 42a4 	movw	r2, #56484	; 0xdca4
   83a90:	f2c0 0208 	movt	r2, #8
   83a94:	f64a 554b 	movw	r5, #44363	; 0xad4b
   83a98:	f2c0 0508 	movt	r5, #8
   83a9c:	47a8      	blx	r5
   83a9e:	4620      	mov	r0, r4
   83aa0:	f644 6119 	movw	r1, #19993	; 0x4e19
   83aa4:	f2c0 0108 	movt	r1, #8
   83aa8:	4788      	blx	r1
	return SCPI_RES_OK;	
}
   83aaa:	f04f 0001 	mov.w	r0, #1
   83aae:	bd38      	pop	{r3, r4, r5, pc}

00083ab0 <SCPI_SetLightsOnOff>:

scpi_result_t SCPI_SetLightsOnOff(scpi_t * context)
{
   83ab0:	b500      	push	{lr}
   83ab2:	b083      	sub	sp, #12
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   83ab4:	a901      	add	r1, sp, #4
   83ab6:	f04f 0201 	mov.w	r2, #1
   83aba:	f243 0331 	movw	r3, #12337	; 0x3031
   83abe:	f2c0 0308 	movt	r3, #8
   83ac2:	4798      	blx	r3
   83ac4:	b1a8      	cbz	r0, 83af2 <SCPI_SetLightsOnOff+0x42>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if(param == 0)
   83ac6:	9801      	ldr	r0, [sp, #4]
   83ac8:	b948      	cbnz	r0, 83ade <SCPI_SetLightsOnOff+0x2e>
		switch_on_off_lights(FALSE);
   83aca:	f04f 0000 	mov.w	r0, #0
   83ace:	f641 32c9 	movw	r2, #7113	; 0x1bc9
   83ad2:	f2c0 0208 	movt	r2, #8
   83ad6:	4790      	blx	r2
	else
		switch_on_off_lights(TRUE);
	
	return SCPI_RES_OK;	
   83ad8:	f04f 0301 	mov.w	r3, #1
   83adc:	e00b      	b.n	83af6 <SCPI_SetLightsOnOff+0x46>
	}
	
	if(param == 0)
		switch_on_off_lights(FALSE);
	else
		switch_on_off_lights(TRUE);
   83ade:	f04f 0001 	mov.w	r0, #1
   83ae2:	f641 31c9 	movw	r1, #7113	; 0x1bc9
   83ae6:	f2c0 0108 	movt	r1, #8
   83aea:	4788      	blx	r1
	
	return SCPI_RES_OK;	
   83aec:	f04f 0301 	mov.w	r3, #1
   83af0:	e001      	b.n	83af6 <SCPI_SetLightsOnOff+0x46>
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83af2:	f04f 03ff 	mov.w	r3, #255	; 0xff
		switch_on_off_lights(FALSE);
	else
		switch_on_off_lights(TRUE);
	
	return SCPI_RES_OK;	
}
   83af6:	b258      	sxtb	r0, r3
   83af8:	b003      	add	sp, #12
   83afa:	bd00      	pop	{pc}
   83afc:	0000      	movs	r0, r0
	...

00083b00 <SCPI_SetChannel1Offset>:

scpi_result_t SCPI_SetChannel1Offset(scpi_t* context)
{
   83b00:	b510      	push	{r4, lr}
   83b02:	b082      	sub	sp, #8
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   83b04:	a901      	add	r1, sp, #4
   83b06:	f04f 0201 	mov.w	r2, #1
   83b0a:	f243 0331 	movw	r3, #12337	; 0x3031
   83b0e:	f2c0 0308 	movt	r3, #8
   83b12:	4798      	blx	r3
   83b14:	b338      	cbz	r0, 83b66 <SCPI_SetChannel1Offset+0x66>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	/* Offset is only between -2.5v and 2.5v */
	if((param < -2500) || (param > 2500))
   83b16:	9801      	ldr	r0, [sp, #4]
   83b18:	f600 12c4 	addw	r2, r0, #2500	; 0x9c4
   83b1c:	f241 3188 	movw	r1, #5000	; 0x1388
   83b20:	428a      	cmp	r2, r1
   83b22:	d823      	bhi.n	83b6c <SCPI_SetChannel1Offset+0x6c>
	{
		return SCPI_RES_ERR;
	}
	
	set_offset_channel1((uint16_t)round((param + 2500)/1.221));
   83b24:	4610      	mov	r0, r2
   83b26:	f24a 6411 	movw	r4, #42513	; 0xa611
   83b2a:	f2c0 0408 	movt	r4, #8
   83b2e:	47a0      	blx	r4
   83b30:	a311      	add	r3, pc, #68	; (adr r3, 83b78 <SCPI_SetChannel1Offset+0x78>)
   83b32:	e9d3 2300 	ldrd	r2, r3, [r3]
   83b36:	f64a 1431 	movw	r4, #43313	; 0xa931
   83b3a:	f2c0 0408 	movt	r4, #8
   83b3e:	47a0      	blx	r4
   83b40:	f24a 23d9 	movw	r3, #41689	; 0xa2d9
   83b44:	f2c0 0308 	movt	r3, #8
   83b48:	4798      	blx	r3
   83b4a:	f64a 3251 	movw	r2, #43857	; 0xab51
   83b4e:	f2c0 0208 	movt	r2, #8
   83b52:	4790      	blx	r2
   83b54:	b280      	uxth	r0, r0
   83b56:	f641 619d 	movw	r1, #7837	; 0x1e9d
   83b5a:	f2c0 0108 	movt	r1, #8
   83b5e:	4788      	blx	r1
	return SCPI_RES_OK;
   83b60:	f04f 0001 	mov.w	r0, #1
   83b64:	e004      	b.n	83b70 <SCPI_SetChannel1Offset+0x70>
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83b66:	f04f 00ff 	mov.w	r0, #255	; 0xff
   83b6a:	e001      	b.n	83b70 <SCPI_SetChannel1Offset+0x70>
	}
	
	/* Offset is only between -2.5v and 2.5v */
	if((param < -2500) || (param > 2500))
	{
		return SCPI_RES_ERR;
   83b6c:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	
	set_offset_channel1((uint16_t)round((param + 2500)/1.221));
	return SCPI_RES_OK;
}
   83b70:	b240      	sxtb	r0, r0
   83b72:	b002      	add	sp, #8
   83b74:	bd10      	pop	{r4, pc}
   83b76:	bf00      	nop
   83b78:	4bc6a7f0 	.word	0x4bc6a7f0
   83b7c:	3ff38937 	.word	0x3ff38937

00083b80 <SCPI_SetChannel2Offset>:

scpi_result_t SCPI_SetChannel2Offset(scpi_t* context)
{
   83b80:	b510      	push	{r4, lr}
   83b82:	b082      	sub	sp, #8
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   83b84:	a901      	add	r1, sp, #4
   83b86:	f04f 0201 	mov.w	r2, #1
   83b8a:	f243 0331 	movw	r3, #12337	; 0x3031
   83b8e:	f2c0 0308 	movt	r3, #8
   83b92:	4798      	blx	r3
   83b94:	b338      	cbz	r0, 83be6 <SCPI_SetChannel2Offset+0x66>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	/* Offset is only between -2.5v and 2.5v */
	if((param < -2500) || (param > 2500))
   83b96:	9801      	ldr	r0, [sp, #4]
   83b98:	f600 12c4 	addw	r2, r0, #2500	; 0x9c4
   83b9c:	f241 3188 	movw	r1, #5000	; 0x1388
   83ba0:	428a      	cmp	r2, r1
   83ba2:	d823      	bhi.n	83bec <SCPI_SetChannel2Offset+0x6c>
	{
		return SCPI_RES_ERR;
	}
	
	set_offset_channel2((uint16_t)round((param + 2500)/1.221));
   83ba4:	4610      	mov	r0, r2
   83ba6:	f24a 6411 	movw	r4, #42513	; 0xa611
   83baa:	f2c0 0408 	movt	r4, #8
   83bae:	47a0      	blx	r4
   83bb0:	a311      	add	r3, pc, #68	; (adr r3, 83bf8 <SCPI_SetChannel2Offset+0x78>)
   83bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   83bb6:	f64a 1431 	movw	r4, #43313	; 0xa931
   83bba:	f2c0 0408 	movt	r4, #8
   83bbe:	47a0      	blx	r4
   83bc0:	f24a 23d9 	movw	r3, #41689	; 0xa2d9
   83bc4:	f2c0 0308 	movt	r3, #8
   83bc8:	4798      	blx	r3
   83bca:	f64a 3251 	movw	r2, #43857	; 0xab51
   83bce:	f2c0 0208 	movt	r2, #8
   83bd2:	4790      	blx	r2
   83bd4:	b280      	uxth	r0, r0
   83bd6:	f641 7105 	movw	r1, #7941	; 0x1f05
   83bda:	f2c0 0108 	movt	r1, #8
   83bde:	4788      	blx	r1
	return SCPI_RES_OK;
   83be0:	f04f 0001 	mov.w	r0, #1
   83be4:	e004      	b.n	83bf0 <SCPI_SetChannel2Offset+0x70>
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83be6:	f04f 00ff 	mov.w	r0, #255	; 0xff
   83bea:	e001      	b.n	83bf0 <SCPI_SetChannel2Offset+0x70>
	}
	
	/* Offset is only between -2.5v and 2.5v */
	if((param < -2500) || (param > 2500))
	{
		return SCPI_RES_ERR;
   83bec:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	
	set_offset_channel2((uint16_t)round((param + 2500)/1.221));
	return SCPI_RES_OK;
}
   83bf0:	b240      	sxtb	r0, r0
   83bf2:	b002      	add	sp, #8
   83bf4:	bd10      	pop	{r4, pc}
   83bf6:	bf00      	nop
   83bf8:	4bc6a7f0 	.word	0x4bc6a7f0
   83bfc:	3ff38937 	.word	0x3ff38937

00083c00 <SCPI_SetChannel1Threshold>:

scpi_result_t SCPI_SetChannel1Threshold(scpi_t* context)
{
   83c00:	b510      	push	{r4, lr}
   83c02:	b082      	sub	sp, #8
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   83c04:	a901      	add	r1, sp, #4
   83c06:	f04f 0201 	mov.w	r2, #1
   83c0a:	f243 0331 	movw	r3, #12337	; 0x3031
   83c0e:	f2c0 0308 	movt	r3, #8
   83c12:	4798      	blx	r3
   83c14:	b348      	cbz	r0, 83c6a <SCPI_SetChannel1Threshold+0x6a>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	/* Threshold is only between -5v and 5v */
	if((param < -5000) || (param > 5000))
   83c16:	9801      	ldr	r0, [sp, #4]
   83c18:	f500 519c 	add.w	r1, r0, #4992	; 0x1380
   83c1c:	f101 0108 	add.w	r1, r1, #8
   83c20:	f242 7210 	movw	r2, #10000	; 0x2710
   83c24:	4291      	cmp	r1, r2
   83c26:	d823      	bhi.n	83c70 <SCPI_SetChannel1Threshold+0x70>
	{
		return SCPI_RES_ERR;
	}
	
	set_threshold_channel1((uint16_t)round((param + 5000)/2.442));
   83c28:	4608      	mov	r0, r1
   83c2a:	f24a 6411 	movw	r4, #42513	; 0xa611
   83c2e:	f2c0 0408 	movt	r4, #8
   83c32:	47a0      	blx	r4
   83c34:	a312      	add	r3, pc, #72	; (adr r3, 83c80 <SCPI_SetChannel1Threshold+0x80>)
   83c36:	e9d3 2300 	ldrd	r2, r3, [r3]
   83c3a:	f64a 1431 	movw	r4, #43313	; 0xa931
   83c3e:	f2c0 0408 	movt	r4, #8
   83c42:	47a0      	blx	r4
   83c44:	f24a 23d9 	movw	r3, #41689	; 0xa2d9
   83c48:	f2c0 0308 	movt	r3, #8
   83c4c:	4798      	blx	r3
   83c4e:	f64a 3251 	movw	r2, #43857	; 0xab51
   83c52:	f2c0 0208 	movt	r2, #8
   83c56:	4790      	blx	r2
   83c58:	b280      	uxth	r0, r0
   83c5a:	f641 51cd 	movw	r1, #7629	; 0x1dcd
   83c5e:	f2c0 0108 	movt	r1, #8
   83c62:	4788      	blx	r1
	return SCPI_RES_OK;
   83c64:	f04f 0001 	mov.w	r0, #1
   83c68:	e004      	b.n	83c74 <SCPI_SetChannel1Threshold+0x74>
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83c6a:	f04f 00ff 	mov.w	r0, #255	; 0xff
   83c6e:	e001      	b.n	83c74 <SCPI_SetChannel1Threshold+0x74>
	}
	
	/* Threshold is only between -5v and 5v */
	if((param < -5000) || (param > 5000))
	{
		return SCPI_RES_ERR;
   83c70:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	
	set_threshold_channel1((uint16_t)round((param + 5000)/2.442));
	return SCPI_RES_OK;
}
   83c74:	b240      	sxtb	r0, r0
   83c76:	b002      	add	sp, #8
   83c78:	bd10      	pop	{r4, pc}
   83c7a:	bf00      	nop
   83c7c:	f3af 8000 	nop.w
   83c80:	4bc6a7f0 	.word	0x4bc6a7f0
   83c84:	40038937 	.word	0x40038937

00083c88 <SCPI_SetChannel2Threshold>:

scpi_result_t SCPI_SetChannel2Threshold(scpi_t* context)
{
   83c88:	b510      	push	{r4, lr}
   83c8a:	b082      	sub	sp, #8
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   83c8c:	a901      	add	r1, sp, #4
   83c8e:	f04f 0201 	mov.w	r2, #1
   83c92:	f243 0331 	movw	r3, #12337	; 0x3031
   83c96:	f2c0 0308 	movt	r3, #8
   83c9a:	4798      	blx	r3
   83c9c:	b348      	cbz	r0, 83cf2 <SCPI_SetChannel2Threshold+0x6a>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	/* Threshold is only between -5v and 5v */
	if((param < -5000) || (param > 5000))
   83c9e:	9801      	ldr	r0, [sp, #4]
   83ca0:	f500 519c 	add.w	r1, r0, #4992	; 0x1380
   83ca4:	f101 0108 	add.w	r1, r1, #8
   83ca8:	f242 7210 	movw	r2, #10000	; 0x2710
   83cac:	4291      	cmp	r1, r2
   83cae:	d823      	bhi.n	83cf8 <SCPI_SetChannel2Threshold+0x70>
	{
		return SCPI_RES_ERR;
	}
	
	set_threshold_channel2((uint16_t)round((param + 5000)/2.442));
   83cb0:	4608      	mov	r0, r1
   83cb2:	f24a 6411 	movw	r4, #42513	; 0xa611
   83cb6:	f2c0 0408 	movt	r4, #8
   83cba:	47a0      	blx	r4
   83cbc:	a312      	add	r3, pc, #72	; (adr r3, 83d08 <SCPI_SetChannel2Threshold+0x80>)
   83cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   83cc2:	f64a 1431 	movw	r4, #43313	; 0xa931
   83cc6:	f2c0 0408 	movt	r4, #8
   83cca:	47a0      	blx	r4
   83ccc:	f24a 23d9 	movw	r3, #41689	; 0xa2d9
   83cd0:	f2c0 0308 	movt	r3, #8
   83cd4:	4798      	blx	r3
   83cd6:	f64a 3251 	movw	r2, #43857	; 0xab51
   83cda:	f2c0 0208 	movt	r2, #8
   83cde:	4790      	blx	r2
   83ce0:	b280      	uxth	r0, r0
   83ce2:	f641 6135 	movw	r1, #7733	; 0x1e35
   83ce6:	f2c0 0108 	movt	r1, #8
   83cea:	4788      	blx	r1
	return SCPI_RES_OK;
   83cec:	f04f 0001 	mov.w	r0, #1
   83cf0:	e004      	b.n	83cfc <SCPI_SetChannel2Threshold+0x74>
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83cf2:	f04f 00ff 	mov.w	r0, #255	; 0xff
   83cf6:	e001      	b.n	83cfc <SCPI_SetChannel2Threshold+0x74>
	}
	
	/* Threshold is only between -5v and 5v */
	if((param < -5000) || (param > 5000))
	{
		return SCPI_RES_ERR;
   83cf8:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	
	set_threshold_channel2((uint16_t)round((param + 5000)/2.442));
	return SCPI_RES_OK;
}
   83cfc:	b240      	sxtb	r0, r0
   83cfe:	b002      	add	sp, #8
   83d00:	bd10      	pop	{r4, pc}
   83d02:	bf00      	nop
   83d04:	f3af 8000 	nop.w
   83d08:	4bc6a7f0 	.word	0x4bc6a7f0
   83d0c:	40038937 	.word	0x40038937

00083d10 <SCPI_SetChannel1OffsetRelay>:

scpi_result_t SCPI_SetChannel1OffsetRelay(scpi_t* context)
{
   83d10:	b500      	push	{lr}
   83d12:	b083      	sub	sp, #12
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   83d14:	a901      	add	r1, sp, #4
   83d16:	f04f 0201 	mov.w	r2, #1
   83d1a:	f243 0331 	movw	r3, #12337	; 0x3031
   83d1e:	f2c0 0308 	movt	r3, #8
   83d22:	4798      	blx	r3
   83d24:	b1a8      	cbz	r0, 83d52 <SCPI_SetChannel1OffsetRelay+0x42>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if(param == 0)
   83d26:	9801      	ldr	r0, [sp, #4]
   83d28:	b948      	cbnz	r0, 83d3e <SCPI_SetChannel1OffsetRelay+0x2e>
		set_channel1_offset_relay(FALSE);
   83d2a:	f04f 0000 	mov.w	r0, #0
   83d2e:	f641 5285 	movw	r2, #7557	; 0x1d85
   83d32:	f2c0 0208 	movt	r2, #8
   83d36:	4790      	blx	r2
	else
		set_channel1_offset_relay(TRUE);
	
	return SCPI_RES_OK;
   83d38:	f04f 0301 	mov.w	r3, #1
   83d3c:	e00b      	b.n	83d56 <SCPI_SetChannel1OffsetRelay+0x46>
	}
	
	if(param == 0)
		set_channel1_offset_relay(FALSE);
	else
		set_channel1_offset_relay(TRUE);
   83d3e:	f04f 0001 	mov.w	r0, #1
   83d42:	f641 5185 	movw	r1, #7557	; 0x1d85
   83d46:	f2c0 0108 	movt	r1, #8
   83d4a:	4788      	blx	r1
	
	return SCPI_RES_OK;
   83d4c:	f04f 0301 	mov.w	r3, #1
   83d50:	e001      	b.n	83d56 <SCPI_SetChannel1OffsetRelay+0x46>
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83d52:	f04f 03ff 	mov.w	r3, #255	; 0xff
		set_channel1_offset_relay(FALSE);
	else
		set_channel1_offset_relay(TRUE);
	
	return SCPI_RES_OK;
}
   83d56:	b258      	sxtb	r0, r3
   83d58:	b003      	add	sp, #12
   83d5a:	bd00      	pop	{pc}

00083d5c <SCPI_SetChannel2OffsetRelay>:

scpi_result_t SCPI_SetChannel2OffsetRelay(scpi_t* context)
{
   83d5c:	b500      	push	{lr}
   83d5e:	b083      	sub	sp, #12
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   83d60:	a901      	add	r1, sp, #4
   83d62:	f04f 0201 	mov.w	r2, #1
   83d66:	f243 0331 	movw	r3, #12337	; 0x3031
   83d6a:	f2c0 0308 	movt	r3, #8
   83d6e:	4798      	blx	r3
   83d70:	b1a8      	cbz	r0, 83d9e <SCPI_SetChannel2OffsetRelay+0x42>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if(param == 0)
   83d72:	9801      	ldr	r0, [sp, #4]
   83d74:	b948      	cbnz	r0, 83d8a <SCPI_SetChannel2OffsetRelay+0x2e>
		set_channel2_offset_relay(FALSE);
   83d76:	f04f 0000 	mov.w	r0, #0
   83d7a:	f641 52a9 	movw	r2, #7593	; 0x1da9
   83d7e:	f2c0 0208 	movt	r2, #8
   83d82:	4790      	blx	r2
	else
		set_channel2_offset_relay(TRUE);
	
	return SCPI_RES_OK;
   83d84:	f04f 0301 	mov.w	r3, #1
   83d88:	e00b      	b.n	83da2 <SCPI_SetChannel2OffsetRelay+0x46>
	}
	
	if(param == 0)
		set_channel2_offset_relay(FALSE);
	else
		set_channel2_offset_relay(TRUE);
   83d8a:	f04f 0001 	mov.w	r0, #1
   83d8e:	f641 51a9 	movw	r1, #7593	; 0x1da9
   83d92:	f2c0 0108 	movt	r1, #8
   83d96:	4788      	blx	r1
	
	return SCPI_RES_OK;
   83d98:	f04f 0301 	mov.w	r3, #1
   83d9c:	e001      	b.n	83da2 <SCPI_SetChannel2OffsetRelay+0x46>
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83d9e:	f04f 03ff 	mov.w	r3, #255	; 0xff
		set_channel2_offset_relay(FALSE);
	else
		set_channel2_offset_relay(TRUE);
	
	return SCPI_RES_OK;
}
   83da2:	b258      	sxtb	r0, r3
   83da4:	b003      	add	sp, #12
   83da6:	bd00      	pop	{pc}

00083da8 <SCPI_SetChannel1Coupling>:

scpi_result_t SCPI_SetChannel1Coupling(scpi_t* context)
{
   83da8:	b510      	push	{r4, lr}
   83daa:	b082      	sub	sp, #8
	const char* param;
	size_t param_len;

	if(!SCPI_ParamString(context, &param, &param_len, true))
   83dac:	a901      	add	r1, sp, #4
   83dae:	466a      	mov	r2, sp
   83db0:	f04f 0301 	mov.w	r3, #1
   83db4:	f642 74c1 	movw	r4, #12225	; 0x2fc1
   83db8:	f2c0 0408 	movt	r4, #8
   83dbc:	47a0      	blx	r4
   83dbe:	b378      	cbz	r0, 83e20 <SCPI_SetChannel1Coupling+0x78>
		return SCPI_RES_ERR;
	
	if(param_len == 2)
   83dc0:	9b00      	ldr	r3, [sp, #0]
   83dc2:	2b02      	cmp	r3, #2
   83dc4:	d12f      	bne.n	83e26 <SCPI_SetChannel1Coupling+0x7e>
	{
		if(strncmp(param, "AC", 2) == 0)
   83dc6:	9c01      	ldr	r4, [sp, #4]
   83dc8:	4620      	mov	r0, r4
   83dca:	f64d 41a8 	movw	r1, #56488	; 0xdca8
   83dce:	f2c0 0108 	movt	r1, #8
   83dd2:	f04f 0202 	mov.w	r2, #2
   83dd6:	f64a 6305 	movw	r3, #44549	; 0xae05
   83dda:	f2c0 0308 	movt	r3, #8
   83dde:	4798      	blx	r3
   83de0:	b938      	cbnz	r0, 83df2 <SCPI_SetChannel1Coupling+0x4a>
		{
			set_channel1_coupling(FALSE);
   83de2:	f641 523d 	movw	r2, #7485	; 0x1d3d
   83de6:	f2c0 0208 	movt	r2, #8
   83dea:	4790      	blx	r2
			return SCPI_RES_OK;
   83dec:	f04f 0001 	mov.w	r0, #1
   83df0:	e01e      	b.n	83e30 <SCPI_SetChannel1Coupling+0x88>
		}
		else if(strncmp(param, "DC", 2) == 0)
   83df2:	4620      	mov	r0, r4
   83df4:	f64d 41ac 	movw	r1, #56492	; 0xdcac
   83df8:	f2c0 0108 	movt	r1, #8
   83dfc:	f04f 0202 	mov.w	r2, #2
   83e00:	f64a 6305 	movw	r3, #44549	; 0xae05
   83e04:	f2c0 0308 	movt	r3, #8
   83e08:	4798      	blx	r3
   83e0a:	b978      	cbnz	r0, 83e2c <SCPI_SetChannel1Coupling+0x84>
		{
			set_channel1_coupling(TRUE);
   83e0c:	f04f 0001 	mov.w	r0, #1
   83e10:	f641 513d 	movw	r1, #7485	; 0x1d3d
   83e14:	f2c0 0108 	movt	r1, #8
   83e18:	4788      	blx	r1
			return SCPI_RES_OK;
   83e1a:	f04f 0001 	mov.w	r0, #1
   83e1e:	e007      	b.n	83e30 <SCPI_SetChannel1Coupling+0x88>
{
	const char* param;
	size_t param_len;

	if(!SCPI_ParamString(context, &param, &param_len, true))
		return SCPI_RES_ERR;
   83e20:	f04f 00ff 	mov.w	r0, #255	; 0xff
   83e24:	e004      	b.n	83e30 <SCPI_SetChannel1Coupling+0x88>
			return SCPI_RES_ERR;
		}
	}
	else
	{
		return SCPI_RES_OK;
   83e26:	f04f 0001 	mov.w	r0, #1
   83e2a:	e001      	b.n	83e30 <SCPI_SetChannel1Coupling+0x88>
			set_channel1_coupling(TRUE);
			return SCPI_RES_OK;
		}
		else
		{
			return SCPI_RES_ERR;
   83e2c:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	else
	{
		return SCPI_RES_OK;
	}
}
   83e30:	b240      	sxtb	r0, r0
   83e32:	b002      	add	sp, #8
   83e34:	bd10      	pop	{r4, pc}
   83e36:	bf00      	nop

00083e38 <SCPI_SetChannel2Coupling>:

scpi_result_t SCPI_SetChannel2Coupling(scpi_t* context)
{
   83e38:	b510      	push	{r4, lr}
   83e3a:	b082      	sub	sp, #8
	const char* param;
	size_t param_len;

	if(!SCPI_ParamString(context, &param, &param_len, true))
   83e3c:	a901      	add	r1, sp, #4
   83e3e:	466a      	mov	r2, sp
   83e40:	f04f 0301 	mov.w	r3, #1
   83e44:	f642 74c1 	movw	r4, #12225	; 0x2fc1
   83e48:	f2c0 0408 	movt	r4, #8
   83e4c:	47a0      	blx	r4
   83e4e:	b378      	cbz	r0, 83eb0 <SCPI_SetChannel2Coupling+0x78>
	return SCPI_RES_ERR;
	
	if(param_len == 2)
   83e50:	9b00      	ldr	r3, [sp, #0]
   83e52:	2b02      	cmp	r3, #2
   83e54:	d12f      	bne.n	83eb6 <SCPI_SetChannel2Coupling+0x7e>
	{
		if(strncmp(param, "AC", 2) == 0)
   83e56:	9c01      	ldr	r4, [sp, #4]
   83e58:	4620      	mov	r0, r4
   83e5a:	f64d 41a8 	movw	r1, #56488	; 0xdca8
   83e5e:	f2c0 0108 	movt	r1, #8
   83e62:	f04f 0202 	mov.w	r2, #2
   83e66:	f64a 6305 	movw	r3, #44549	; 0xae05
   83e6a:	f2c0 0308 	movt	r3, #8
   83e6e:	4798      	blx	r3
   83e70:	b938      	cbnz	r0, 83e82 <SCPI_SetChannel2Coupling+0x4a>
		{
			set_channel2_coupling(FALSE);
   83e72:	f641 5261 	movw	r2, #7521	; 0x1d61
   83e76:	f2c0 0208 	movt	r2, #8
   83e7a:	4790      	blx	r2
			return SCPI_RES_OK;
   83e7c:	f04f 0001 	mov.w	r0, #1
   83e80:	e01e      	b.n	83ec0 <SCPI_SetChannel2Coupling+0x88>
		}
		else if(strncmp(param, "DC", 2) == 0)
   83e82:	4620      	mov	r0, r4
   83e84:	f64d 41ac 	movw	r1, #56492	; 0xdcac
   83e88:	f2c0 0108 	movt	r1, #8
   83e8c:	f04f 0202 	mov.w	r2, #2
   83e90:	f64a 6305 	movw	r3, #44549	; 0xae05
   83e94:	f2c0 0308 	movt	r3, #8
   83e98:	4798      	blx	r3
   83e9a:	b978      	cbnz	r0, 83ebc <SCPI_SetChannel2Coupling+0x84>
		{
			set_channel2_coupling(TRUE);
   83e9c:	f04f 0001 	mov.w	r0, #1
   83ea0:	f641 5161 	movw	r1, #7521	; 0x1d61
   83ea4:	f2c0 0108 	movt	r1, #8
   83ea8:	4788      	blx	r1
			return SCPI_RES_OK;
   83eaa:	f04f 0001 	mov.w	r0, #1
   83eae:	e007      	b.n	83ec0 <SCPI_SetChannel2Coupling+0x88>
{
	const char* param;
	size_t param_len;

	if(!SCPI_ParamString(context, &param, &param_len, true))
	return SCPI_RES_ERR;
   83eb0:	f04f 00ff 	mov.w	r0, #255	; 0xff
   83eb4:	e004      	b.n	83ec0 <SCPI_SetChannel2Coupling+0x88>
			return SCPI_RES_ERR;
		}
	}
	else
	{
		return SCPI_RES_OK;
   83eb6:	f04f 0001 	mov.w	r0, #1
   83eba:	e001      	b.n	83ec0 <SCPI_SetChannel2Coupling+0x88>
			set_channel2_coupling(TRUE);
			return SCPI_RES_OK;
		}
		else
		{
			return SCPI_RES_ERR;
   83ebc:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	else
	{
		return SCPI_RES_OK;
	}
}
   83ec0:	b240      	sxtb	r0, r0
   83ec2:	b002      	add	sp, #8
   83ec4:	bd10      	pop	{r4, pc}
   83ec6:	bf00      	nop

00083ec8 <SCPI_GetChannel1Threshold>:

scpi_result_t SCPI_GetChannel1Threshold(scpi_t* context)
{
   83ec8:	b538      	push	{r3, r4, r5, lr}
	int16_t val = (int16_t)get_channel1_threshold();
   83eca:	f641 6329 	movw	r3, #7721	; 0x1e29
   83ece:	f2c0 0308 	movt	r3, #8
   83ed2:	4798      	blx	r3
	val = round(val*2.442 - 5000);
   83ed4:	b200      	sxth	r0, r0
   83ed6:	f24a 6111 	movw	r1, #42513	; 0xa611
   83eda:	f2c0 0108 	movt	r1, #8
   83ede:	4788      	blx	r1
   83ee0:	a319      	add	r3, pc, #100	; (adr r3, 83f48 <SCPI_GetChannel1Threshold+0x80>)
   83ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
   83ee6:	f24a 64dd 	movw	r4, #42717	; 0xa6dd
   83eea:	f2c0 0408 	movt	r4, #8
   83eee:	47a0      	blx	r4
   83ef0:	a317      	add	r3, pc, #92	; (adr r3, 83f50 <SCPI_GetChannel1Threshold+0x88>)
   83ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
   83ef6:	f24a 3575 	movw	r5, #41845	; 0xa375
   83efa:	f2c0 0508 	movt	r5, #8
   83efe:	47a8      	blx	r5
   83f00:	f24a 22d9 	movw	r2, #41689	; 0xa2d9
   83f04:	f2c0 0208 	movt	r2, #8
   83f08:	4790      	blx	r2
	printf("%i\x0D", val);
   83f0a:	f641 3420 	movw	r4, #6944	; 0x1b20
   83f0e:	f2c2 0407 	movt	r4, #8199	; 0x2007
}

scpi_result_t SCPI_GetChannel1Threshold(scpi_t* context)
{
	int16_t val = (int16_t)get_channel1_threshold();
	val = round(val*2.442 - 5000);
   83f12:	f64a 3301 	movw	r3, #43777	; 0xab01
   83f16:	f2c0 0308 	movt	r3, #8
   83f1a:	4798      	blx	r3
	printf("%i\x0D", val);
   83f1c:	b203      	sxth	r3, r0
   83f1e:	4620      	mov	r0, r4
   83f20:	f04f 0164 	mov.w	r1, #100	; 0x64
   83f24:	f64d 42b0 	movw	r2, #56496	; 0xdcb0
   83f28:	f2c0 0208 	movt	r2, #8
   83f2c:	f64a 554b 	movw	r5, #44363	; 0xad4b
   83f30:	f2c0 0508 	movt	r5, #8
   83f34:	47a8      	blx	r5
   83f36:	4620      	mov	r0, r4
   83f38:	f644 6119 	movw	r1, #19993	; 0x4e19
   83f3c:	f2c0 0108 	movt	r1, #8
   83f40:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83f42:	f04f 0001 	mov.w	r0, #1
   83f46:	bd38      	pop	{r3, r4, r5, pc}
   83f48:	4bc6a7f0 	.word	0x4bc6a7f0
   83f4c:	40038937 	.word	0x40038937
   83f50:	00000000 	.word	0x00000000
   83f54:	40b38800 	.word	0x40b38800

00083f58 <SCPI_GetChannel2Threshold>:

scpi_result_t SCPI_GetChannel2Threshold(scpi_t* context)
{
   83f58:	b538      	push	{r3, r4, r5, lr}
	int16_t val = (int16_t)get_channel2_threshold();
   83f5a:	f641 6391 	movw	r3, #7825	; 0x1e91
   83f5e:	f2c0 0308 	movt	r3, #8
   83f62:	4798      	blx	r3
	val = round(val*2.442 - 5000);
   83f64:	b200      	sxth	r0, r0
   83f66:	f24a 6111 	movw	r1, #42513	; 0xa611
   83f6a:	f2c0 0108 	movt	r1, #8
   83f6e:	4788      	blx	r1
   83f70:	a319      	add	r3, pc, #100	; (adr r3, 83fd8 <SCPI_GetChannel2Threshold+0x80>)
   83f72:	e9d3 2300 	ldrd	r2, r3, [r3]
   83f76:	f24a 64dd 	movw	r4, #42717	; 0xa6dd
   83f7a:	f2c0 0408 	movt	r4, #8
   83f7e:	47a0      	blx	r4
   83f80:	a317      	add	r3, pc, #92	; (adr r3, 83fe0 <SCPI_GetChannel2Threshold+0x88>)
   83f82:	e9d3 2300 	ldrd	r2, r3, [r3]
   83f86:	f24a 3575 	movw	r5, #41845	; 0xa375
   83f8a:	f2c0 0508 	movt	r5, #8
   83f8e:	47a8      	blx	r5
   83f90:	f24a 22d9 	movw	r2, #41689	; 0xa2d9
   83f94:	f2c0 0208 	movt	r2, #8
   83f98:	4790      	blx	r2
	printf("%i\x0D", val);
   83f9a:	f641 3420 	movw	r4, #6944	; 0x1b20
   83f9e:	f2c2 0407 	movt	r4, #8199	; 0x2007
}

scpi_result_t SCPI_GetChannel2Threshold(scpi_t* context)
{
	int16_t val = (int16_t)get_channel2_threshold();
	val = round(val*2.442 - 5000);
   83fa2:	f64a 3301 	movw	r3, #43777	; 0xab01
   83fa6:	f2c0 0308 	movt	r3, #8
   83faa:	4798      	blx	r3
	printf("%i\x0D", val);
   83fac:	b203      	sxth	r3, r0
   83fae:	4620      	mov	r0, r4
   83fb0:	f04f 0164 	mov.w	r1, #100	; 0x64
   83fb4:	f64d 42b0 	movw	r2, #56496	; 0xdcb0
   83fb8:	f2c0 0208 	movt	r2, #8
   83fbc:	f64a 554b 	movw	r5, #44363	; 0xad4b
   83fc0:	f2c0 0508 	movt	r5, #8
   83fc4:	47a8      	blx	r5
   83fc6:	4620      	mov	r0, r4
   83fc8:	f644 6119 	movw	r1, #19993	; 0x4e19
   83fcc:	f2c0 0108 	movt	r1, #8
   83fd0:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83fd2:	f04f 0001 	mov.w	r0, #1
   83fd6:	bd38      	pop	{r3, r4, r5, pc}
   83fd8:	4bc6a7f0 	.word	0x4bc6a7f0
   83fdc:	40038937 	.word	0x40038937
   83fe0:	00000000 	.word	0x00000000
   83fe4:	40b38800 	.word	0x40b38800

00083fe8 <SCPI_GetChannel1Coupling>:

scpi_result_t SCPI_GetChannel1Coupling(scpi_t* context)
{
   83fe8:	b508      	push	{r3, lr}
	if(get_channel1_coupling() == FALSE)
   83fea:	f641 5355 	movw	r3, #7509	; 0x1d55
   83fee:	f2c0 0308 	movt	r3, #8
   83ff2:	4798      	blx	r3
   83ff4:	b980      	cbnz	r0, 84018 <SCPI_GetChannel1Coupling+0x30>
	{
		printf("AC\x0D");
   83ff6:	f641 3120 	movw	r1, #6944	; 0x1b20
   83ffa:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83ffe:	f64d 42b4 	movw	r2, #56500	; 0xdcb4
   84002:	f2c0 0208 	movt	r2, #8
   84006:	6810      	ldr	r0, [r2, #0]
   84008:	6008      	str	r0, [r1, #0]
   8400a:	4608      	mov	r0, r1
   8400c:	f644 6319 	movw	r3, #19993	; 0x4e19
   84010:	f2c0 0308 	movt	r3, #8
   84014:	4798      	blx	r3
   84016:	e00f      	b.n	84038 <SCPI_GetChannel1Coupling+0x50>
	} 
	else
	{
		printf("DC\x0D");
   84018:	f641 3120 	movw	r1, #6944	; 0x1b20
   8401c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84020:	f64d 42b8 	movw	r2, #56504	; 0xdcb8
   84024:	f2c0 0208 	movt	r2, #8
   84028:	6810      	ldr	r0, [r2, #0]
   8402a:	6008      	str	r0, [r1, #0]
   8402c:	4608      	mov	r0, r1
   8402e:	f644 6319 	movw	r3, #19993	; 0x4e19
   84032:	f2c0 0308 	movt	r3, #8
   84036:	4798      	blx	r3
	}
	return SCPI_RES_OK;
}
   84038:	f04f 0001 	mov.w	r0, #1
   8403c:	bd08      	pop	{r3, pc}
   8403e:	bf00      	nop

00084040 <SCPI_GetChannel2Coupling>:

scpi_result_t SCPI_GetChannel2Coupling(scpi_t* context)
{
   84040:	b508      	push	{r3, lr}
	if(get_channel2_coupling() == FALSE)
   84042:	f641 5379 	movw	r3, #7545	; 0x1d79
   84046:	f2c0 0308 	movt	r3, #8
   8404a:	4798      	blx	r3
   8404c:	b980      	cbnz	r0, 84070 <SCPI_GetChannel2Coupling+0x30>
	{
		printf("AC\x0D");
   8404e:	f641 3120 	movw	r1, #6944	; 0x1b20
   84052:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84056:	f64d 42b4 	movw	r2, #56500	; 0xdcb4
   8405a:	f2c0 0208 	movt	r2, #8
   8405e:	6810      	ldr	r0, [r2, #0]
   84060:	6008      	str	r0, [r1, #0]
   84062:	4608      	mov	r0, r1
   84064:	f644 6319 	movw	r3, #19993	; 0x4e19
   84068:	f2c0 0308 	movt	r3, #8
   8406c:	4798      	blx	r3
   8406e:	e00f      	b.n	84090 <SCPI_GetChannel2Coupling+0x50>
	}
	else
	{
		printf("DC\x0D");
   84070:	f641 3120 	movw	r1, #6944	; 0x1b20
   84074:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84078:	f64d 42b8 	movw	r2, #56504	; 0xdcb8
   8407c:	f2c0 0208 	movt	r2, #8
   84080:	6810      	ldr	r0, [r2, #0]
   84082:	6008      	str	r0, [r1, #0]
   84084:	4608      	mov	r0, r1
   84086:	f644 6319 	movw	r3, #19993	; 0x4e19
   8408a:	f2c0 0308 	movt	r3, #8
   8408e:	4798      	blx	r3
	}
	return SCPI_RES_OK;
}
   84090:	f04f 0001 	mov.w	r0, #1
   84094:	bd08      	pop	{r3, pc}
   84096:	bf00      	nop

00084098 <SCPI_GetChannel1OffsetRelay>:

scpi_result_t SCPI_GetChannel1OffsetRelay(scpi_t* context)
{
   84098:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", get_channel1_offset_relay());
   8409a:	f641 539d 	movw	r3, #7581	; 0x1d9d
   8409e:	f2c0 0308 	movt	r3, #8
   840a2:	4798      	blx	r3
   840a4:	4603      	mov	r3, r0
   840a6:	f641 3420 	movw	r4, #6944	; 0x1b20
   840aa:	f2c2 0407 	movt	r4, #8199	; 0x2007
   840ae:	4620      	mov	r0, r4
   840b0:	f04f 0164 	mov.w	r1, #100	; 0x64
   840b4:	f64d 42a4 	movw	r2, #56484	; 0xdca4
   840b8:	f2c0 0208 	movt	r2, #8
   840bc:	f64a 554b 	movw	r5, #44363	; 0xad4b
   840c0:	f2c0 0508 	movt	r5, #8
   840c4:	47a8      	blx	r5
   840c6:	4620      	mov	r0, r4
   840c8:	f644 6119 	movw	r1, #19993	; 0x4e19
   840cc:	f2c0 0108 	movt	r1, #8
   840d0:	4788      	blx	r1
	return SCPI_RES_OK;
}
   840d2:	f04f 0001 	mov.w	r0, #1
   840d6:	bd38      	pop	{r3, r4, r5, pc}

000840d8 <SCPI_GetChannel2OffsetRelay>:

scpi_result_t SCPI_GetChannel2OffsetRelay(scpi_t* context)
{
   840d8:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", get_channel2_offset_relay());
   840da:	f641 53c1 	movw	r3, #7617	; 0x1dc1
   840de:	f2c0 0308 	movt	r3, #8
   840e2:	4798      	blx	r3
   840e4:	4603      	mov	r3, r0
   840e6:	f641 3420 	movw	r4, #6944	; 0x1b20
   840ea:	f2c2 0407 	movt	r4, #8199	; 0x2007
   840ee:	4620      	mov	r0, r4
   840f0:	f04f 0164 	mov.w	r1, #100	; 0x64
   840f4:	f64d 42a4 	movw	r2, #56484	; 0xdca4
   840f8:	f2c0 0208 	movt	r2, #8
   840fc:	f64a 554b 	movw	r5, #44363	; 0xad4b
   84100:	f2c0 0508 	movt	r5, #8
   84104:	47a8      	blx	r5
   84106:	4620      	mov	r0, r4
   84108:	f644 6119 	movw	r1, #19993	; 0x4e19
   8410c:	f2c0 0108 	movt	r1, #8
   84110:	4788      	blx	r1
	return SCPI_RES_OK;
}
   84112:	f04f 0001 	mov.w	r0, #1
   84116:	bd38      	pop	{r3, r4, r5, pc}

00084118 <SCPI_GetChannel1Offset>:

scpi_result_t SCPI_GetChannel1Offset(scpi_t* context)
{
   84118:	b538      	push	{r3, r4, r5, lr}
	int16_t val = (int16_t)get_offset_channel1();
   8411a:	f641 63f9 	movw	r3, #7929	; 0x1ef9
   8411e:	f2c0 0308 	movt	r3, #8
   84122:	4798      	blx	r3
	val = round(val*1.221 - 2500);
   84124:	b200      	sxth	r0, r0
   84126:	f24a 6111 	movw	r1, #42513	; 0xa611
   8412a:	f2c0 0108 	movt	r1, #8
   8412e:	4788      	blx	r1
   84130:	a319      	add	r3, pc, #100	; (adr r3, 84198 <SCPI_GetChannel1Offset+0x80>)
   84132:	e9d3 2300 	ldrd	r2, r3, [r3]
   84136:	f24a 64dd 	movw	r4, #42717	; 0xa6dd
   8413a:	f2c0 0408 	movt	r4, #8
   8413e:	47a0      	blx	r4
   84140:	a317      	add	r3, pc, #92	; (adr r3, 841a0 <SCPI_GetChannel1Offset+0x88>)
   84142:	e9d3 2300 	ldrd	r2, r3, [r3]
   84146:	f24a 3575 	movw	r5, #41845	; 0xa375
   8414a:	f2c0 0508 	movt	r5, #8
   8414e:	47a8      	blx	r5
   84150:	f24a 22d9 	movw	r2, #41689	; 0xa2d9
   84154:	f2c0 0208 	movt	r2, #8
   84158:	4790      	blx	r2
	printf("%i\x0D", val);
   8415a:	f641 3420 	movw	r4, #6944	; 0x1b20
   8415e:	f2c2 0407 	movt	r4, #8199	; 0x2007
}

scpi_result_t SCPI_GetChannel1Offset(scpi_t* context)
{
	int16_t val = (int16_t)get_offset_channel1();
	val = round(val*1.221 - 2500);
   84162:	f64a 3301 	movw	r3, #43777	; 0xab01
   84166:	f2c0 0308 	movt	r3, #8
   8416a:	4798      	blx	r3
	printf("%i\x0D", val);
   8416c:	b203      	sxth	r3, r0
   8416e:	4620      	mov	r0, r4
   84170:	f04f 0164 	mov.w	r1, #100	; 0x64
   84174:	f64d 42b0 	movw	r2, #56496	; 0xdcb0
   84178:	f2c0 0208 	movt	r2, #8
   8417c:	f64a 554b 	movw	r5, #44363	; 0xad4b
   84180:	f2c0 0508 	movt	r5, #8
   84184:	47a8      	blx	r5
   84186:	4620      	mov	r0, r4
   84188:	f644 6119 	movw	r1, #19993	; 0x4e19
   8418c:	f2c0 0108 	movt	r1, #8
   84190:	4788      	blx	r1
	return SCPI_RES_OK;
}
   84192:	f04f 0001 	mov.w	r0, #1
   84196:	bd38      	pop	{r3, r4, r5, pc}
   84198:	4bc6a7f0 	.word	0x4bc6a7f0
   8419c:	3ff38937 	.word	0x3ff38937
   841a0:	00000000 	.word	0x00000000
   841a4:	40a38800 	.word	0x40a38800

000841a8 <SCPI_GetChannel2Offset>:

scpi_result_t SCPI_GetChannel2Offset(scpi_t* context)
{
   841a8:	b538      	push	{r3, r4, r5, lr}
	int16_t val = (int16_t)get_offset_channel2();
   841aa:	f641 7361 	movw	r3, #8033	; 0x1f61
   841ae:	f2c0 0308 	movt	r3, #8
   841b2:	4798      	blx	r3
	val = round(val*1.221 - 2500);
   841b4:	b200      	sxth	r0, r0
   841b6:	f24a 6111 	movw	r1, #42513	; 0xa611
   841ba:	f2c0 0108 	movt	r1, #8
   841be:	4788      	blx	r1
   841c0:	a319      	add	r3, pc, #100	; (adr r3, 84228 <SCPI_GetChannel2Offset+0x80>)
   841c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   841c6:	f24a 64dd 	movw	r4, #42717	; 0xa6dd
   841ca:	f2c0 0408 	movt	r4, #8
   841ce:	47a0      	blx	r4
   841d0:	a317      	add	r3, pc, #92	; (adr r3, 84230 <SCPI_GetChannel2Offset+0x88>)
   841d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   841d6:	f24a 3575 	movw	r5, #41845	; 0xa375
   841da:	f2c0 0508 	movt	r5, #8
   841de:	47a8      	blx	r5
   841e0:	f24a 22d9 	movw	r2, #41689	; 0xa2d9
   841e4:	f2c0 0208 	movt	r2, #8
   841e8:	4790      	blx	r2
	printf("%i\x0D", val);
   841ea:	f641 3420 	movw	r4, #6944	; 0x1b20
   841ee:	f2c2 0407 	movt	r4, #8199	; 0x2007
}

scpi_result_t SCPI_GetChannel2Offset(scpi_t* context)
{
	int16_t val = (int16_t)get_offset_channel2();
	val = round(val*1.221 - 2500);
   841f2:	f64a 3301 	movw	r3, #43777	; 0xab01
   841f6:	f2c0 0308 	movt	r3, #8
   841fa:	4798      	blx	r3
	printf("%i\x0D", val);
   841fc:	b203      	sxth	r3, r0
   841fe:	4620      	mov	r0, r4
   84200:	f04f 0164 	mov.w	r1, #100	; 0x64
   84204:	f64d 42b0 	movw	r2, #56496	; 0xdcb0
   84208:	f2c0 0208 	movt	r2, #8
   8420c:	f64a 554b 	movw	r5, #44363	; 0xad4b
   84210:	f2c0 0508 	movt	r5, #8
   84214:	47a8      	blx	r5
   84216:	4620      	mov	r0, r4
   84218:	f644 6119 	movw	r1, #19993	; 0x4e19
   8421c:	f2c0 0108 	movt	r1, #8
   84220:	4788      	blx	r1
	return SCPI_RES_OK;
}
   84222:	f04f 0001 	mov.w	r0, #1
   84226:	bd38      	pop	{r3, r4, r5, pc}
   84228:	4bc6a7f0 	.word	0x4bc6a7f0
   8422c:	3ff38937 	.word	0x3ff38937
   84230:	00000000 	.word	0x00000000
   84234:	40a38800 	.word	0x40a38800

00084238 <SCPI_SetIntegrationT>:

scpi_result_t SCPI_SetIntegrationT(scpi_t* context)
{
   84238:	b500      	push	{lr}
   8423a:	b083      	sub	sp, #12
	uint32_t param1;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
   8423c:	a901      	add	r1, sp, #4
   8423e:	f04f 0201 	mov.w	r2, #1
   84242:	f243 0331 	movw	r3, #12337	; 0x3031
   84246:	f2c0 0308 	movt	r3, #8
   8424a:	4798      	blx	r3
   8424c:	b1c0      	cbz	r0, 84280 <SCPI_SetIntegrationT+0x48>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	set_counters_integration_time((uint16_t)round(param1));
   8424e:	9801      	ldr	r0, [sp, #4]
   84250:	f24a 51f1 	movw	r1, #42481	; 0xa5f1
   84254:	f2c0 0108 	movt	r1, #8
   84258:	4788      	blx	r1
   8425a:	f24a 22d9 	movw	r2, #41689	; 0xa2d9
   8425e:	f2c0 0208 	movt	r2, #8
   84262:	4790      	blx	r2
   84264:	f64a 3351 	movw	r3, #43857	; 0xab51
   84268:	f2c0 0308 	movt	r3, #8
   8426c:	4798      	blx	r3
   8426e:	b280      	uxth	r0, r0
   84270:	f649 6185 	movw	r1, #40581	; 0x9e85
   84274:	f2c0 0108 	movt	r1, #8
   84278:	4788      	blx	r1
	return SCPI_RES_OK;
   8427a:	f04f 0001 	mov.w	r0, #1
   8427e:	e001      	b.n	84284 <SCPI_SetIntegrationT+0x4c>
	uint32_t param1;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   84280:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	
	set_counters_integration_time((uint16_t)round(param1));
	return SCPI_RES_OK;
}
   84284:	b240      	sxtb	r0, r0
   84286:	b003      	add	sp, #12
   84288:	bd00      	pop	{pc}
   8428a:	bf00      	nop

0008428c <SCPI_CounterA_Read>:

scpi_result_t SCPI_CounterA_Read(scpi_t* context)
{
   8428c:	b510      	push	{r4, lr}
   8428e:	b084      	sub	sp, #16
	uint64_t counter_val;
	
	if(read_last_contera_val(&counter_val) == RETURN_OK)
   84290:	a802      	add	r0, sp, #8
   84292:	f649 63e1 	movw	r3, #40673	; 0x9ee1
   84296:	f2c0 0308 	movt	r3, #8
   8429a:	4798      	blx	r3
   8429c:	2801      	cmp	r0, #1
   8429e:	d11a      	bne.n	842d6 <SCPI_CounterA_Read+0x4a>
	{
		printf("%llu\x0D", counter_val);
   842a0:	f641 3420 	movw	r4, #6944	; 0x1b20
   842a4:	f2c2 0407 	movt	r4, #8199	; 0x2007
   842a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   842ac:	e9cd 2300 	strd	r2, r3, [sp]
   842b0:	4620      	mov	r0, r4
   842b2:	f04f 0164 	mov.w	r1, #100	; 0x64
   842b6:	f64d 42bc 	movw	r2, #56508	; 0xdcbc
   842ba:	f2c0 0208 	movt	r2, #8
   842be:	f64a 534b 	movw	r3, #44363	; 0xad4b
   842c2:	f2c0 0308 	movt	r3, #8
   842c6:	4798      	blx	r3
   842c8:	4620      	mov	r0, r4
   842ca:	f644 6119 	movw	r1, #19993	; 0x4e19
   842ce:	f2c0 0108 	movt	r1, #8
   842d2:	4788      	blx	r1
   842d4:	e011      	b.n	842fa <SCPI_CounterA_Read+0x6e>
	}
	else
	{
		printf("No new val\x0D");
   842d6:	f641 3420 	movw	r4, #6944	; 0x1b20
   842da:	f2c2 0407 	movt	r4, #8199	; 0x2007
   842de:	f64d 43c4 	movw	r3, #56516	; 0xdcc4
   842e2:	f2c0 0308 	movt	r3, #8
   842e6:	cb07      	ldmia	r3!, {r0, r1, r2}
   842e8:	6020      	str	r0, [r4, #0]
   842ea:	6061      	str	r1, [r4, #4]
   842ec:	60a2      	str	r2, [r4, #8]
   842ee:	4620      	mov	r0, r4
   842f0:	f644 6119 	movw	r1, #19993	; 0x4e19
   842f4:	f2c0 0108 	movt	r1, #8
   842f8:	4788      	blx	r1
	}
	return SCPI_RES_OK;
}
   842fa:	f04f 0001 	mov.w	r0, #1
   842fe:	b004      	add	sp, #16
   84300:	bd10      	pop	{r4, pc}
   84302:	bf00      	nop

00084304 <SCPI_CounterB_Read>:

scpi_result_t SCPI_CounterB_Read(scpi_t* context)
{
   84304:	b510      	push	{r4, lr}
   84306:	b084      	sub	sp, #16
	uint64_t counter_val;
	
	if(read_last_conterb_val(&counter_val) == RETURN_OK)
   84308:	a802      	add	r0, sp, #8
   8430a:	f649 7325 	movw	r3, #40741	; 0x9f25
   8430e:	f2c0 0308 	movt	r3, #8
   84312:	4798      	blx	r3
   84314:	2801      	cmp	r0, #1
   84316:	d11a      	bne.n	8434e <SCPI_CounterB_Read+0x4a>
	{
		printf("%llu\x0D", counter_val);
   84318:	f641 3420 	movw	r4, #6944	; 0x1b20
   8431c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84320:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   84324:	e9cd 2300 	strd	r2, r3, [sp]
   84328:	4620      	mov	r0, r4
   8432a:	f04f 0164 	mov.w	r1, #100	; 0x64
   8432e:	f64d 42bc 	movw	r2, #56508	; 0xdcbc
   84332:	f2c0 0208 	movt	r2, #8
   84336:	f64a 534b 	movw	r3, #44363	; 0xad4b
   8433a:	f2c0 0308 	movt	r3, #8
   8433e:	4798      	blx	r3
   84340:	4620      	mov	r0, r4
   84342:	f644 6119 	movw	r1, #19993	; 0x4e19
   84346:	f2c0 0108 	movt	r1, #8
   8434a:	4788      	blx	r1
   8434c:	e011      	b.n	84372 <SCPI_CounterB_Read+0x6e>
	}
	else
	{
		printf("No new val\x0D");
   8434e:	f641 3420 	movw	r4, #6944	; 0x1b20
   84352:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84356:	f64d 43c4 	movw	r3, #56516	; 0xdcc4
   8435a:	f2c0 0308 	movt	r3, #8
   8435e:	cb07      	ldmia	r3!, {r0, r1, r2}
   84360:	6020      	str	r0, [r4, #0]
   84362:	6061      	str	r1, [r4, #4]
   84364:	60a2      	str	r2, [r4, #8]
   84366:	4620      	mov	r0, r4
   84368:	f644 6119 	movw	r1, #19993	; 0x4e19
   8436c:	f2c0 0108 	movt	r1, #8
   84370:	4788      	blx	r1
	}
	return SCPI_RES_OK;
}
   84372:	f04f 0001 	mov.w	r0, #1
   84376:	b004      	add	sp, #16
   84378:	bd10      	pop	{r4, pc}
   8437a:	bf00      	nop

0008437c <SCPI_CounterA_IT>:

scpi_result_t SCPI_CounterA_IT(scpi_t* context)
{
   8437c:	b500      	push	{lr}
   8437e:	b083      	sub	sp, #12
	uint32_t param1;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
   84380:	a901      	add	r1, sp, #4
   84382:	f04f 0201 	mov.w	r2, #1
   84386:	f243 0331 	movw	r3, #12337	; 0x3031
   8438a:	f2c0 0308 	movt	r3, #8
   8438e:	4798      	blx	r3
   84390:	b1c0      	cbz	r0, 843c4 <SCPI_CounterA_IT+0x48>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	set_countera_integration_time((uint16_t)round(param1));
   84392:	9801      	ldr	r0, [sp, #4]
   84394:	f24a 51f1 	movw	r1, #42481	; 0xa5f1
   84398:	f2c0 0108 	movt	r1, #8
   8439c:	4788      	blx	r1
   8439e:	f24a 22d9 	movw	r2, #41689	; 0xa2d9
   843a2:	f2c0 0208 	movt	r2, #8
   843a6:	4790      	blx	r2
   843a8:	f64a 3351 	movw	r3, #43857	; 0xab51
   843ac:	f2c0 0308 	movt	r3, #8
   843b0:	4798      	blx	r3
   843b2:	b280      	uxth	r0, r0
   843b4:	f649 6135 	movw	r1, #40501	; 0x9e35
   843b8:	f2c0 0108 	movt	r1, #8
   843bc:	4788      	blx	r1
	return SCPI_RES_OK;
   843be:	f04f 0001 	mov.w	r0, #1
   843c2:	e001      	b.n	843c8 <SCPI_CounterA_IT+0x4c>
	uint32_t param1;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   843c4:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	
	set_countera_integration_time((uint16_t)round(param1));
	return SCPI_RES_OK;
}
   843c8:	b240      	sxtb	r0, r0
   843ca:	b003      	add	sp, #12
   843cc:	bd00      	pop	{pc}
   843ce:	bf00      	nop

000843d0 <SCPI_CounterB_IT>:

scpi_result_t SCPI_CounterB_IT(scpi_t* context)
{
   843d0:	b500      	push	{lr}
   843d2:	b083      	sub	sp, #12
	uint32_t param1;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
   843d4:	a901      	add	r1, sp, #4
   843d6:	f04f 0201 	mov.w	r2, #1
   843da:	f243 0331 	movw	r3, #12337	; 0x3031
   843de:	f2c0 0308 	movt	r3, #8
   843e2:	4798      	blx	r3
   843e4:	b1c0      	cbz	r0, 84418 <SCPI_CounterB_IT+0x48>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	set_counterb_integration_time((uint16_t)round(param1));
   843e6:	9801      	ldr	r0, [sp, #4]
   843e8:	f24a 51f1 	movw	r1, #42481	; 0xa5f1
   843ec:	f2c0 0108 	movt	r1, #8
   843f0:	4788      	blx	r1
   843f2:	f24a 22d9 	movw	r2, #41689	; 0xa2d9
   843f6:	f2c0 0208 	movt	r2, #8
   843fa:	4790      	blx	r2
   843fc:	f64a 3351 	movw	r3, #43857	; 0xab51
   84400:	f2c0 0308 	movt	r3, #8
   84404:	4798      	blx	r3
   84406:	b280      	uxth	r0, r0
   84408:	f649 6151 	movw	r1, #40529	; 0x9e51
   8440c:	f2c0 0108 	movt	r1, #8
   84410:	4788      	blx	r1
	return SCPI_RES_OK;
   84412:	f04f 0001 	mov.w	r0, #1
   84416:	e001      	b.n	8441c <SCPI_CounterB_IT+0x4c>
	uint32_t param1;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   84418:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	
	set_counterb_integration_time((uint16_t)round(param1));
	return SCPI_RES_OK;
}
   8441c:	b240      	sxtb	r0, r0
   8441e:	b003      	add	sp, #12
   84420:	bd00      	pop	{pc}
   84422:	bf00      	nop

00084424 <SCPI_GetCounterA_IT>:

scpi_result_t SCPI_GetCounterA_IT(scpi_t* context)
{
   84424:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", get_countera_integration_time());
   84426:	f649 636d 	movw	r3, #40557	; 0x9e6d
   8442a:	f2c0 0308 	movt	r3, #8
   8442e:	4798      	blx	r3
   84430:	4603      	mov	r3, r0
   84432:	f641 3420 	movw	r4, #6944	; 0x1b20
   84436:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8443a:	4620      	mov	r0, r4
   8443c:	f04f 0164 	mov.w	r1, #100	; 0x64
   84440:	f64d 42a4 	movw	r2, #56484	; 0xdca4
   84444:	f2c0 0208 	movt	r2, #8
   84448:	f64a 554b 	movw	r5, #44363	; 0xad4b
   8444c:	f2c0 0508 	movt	r5, #8
   84450:	47a8      	blx	r5
   84452:	4620      	mov	r0, r4
   84454:	f644 6119 	movw	r1, #19993	; 0x4e19
   84458:	f2c0 0108 	movt	r1, #8
   8445c:	4788      	blx	r1
	return SCPI_RES_OK;
}
   8445e:	f04f 0001 	mov.w	r0, #1
   84462:	bd38      	pop	{r3, r4, r5, pc}

00084464 <SCPI_GetCounterB_IT>:

scpi_result_t SCPI_GetCounterB_IT(scpi_t* context)
{
   84464:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", get_counterb_integration_time());
   84466:	f649 6379 	movw	r3, #40569	; 0x9e79
   8446a:	f2c0 0308 	movt	r3, #8
   8446e:	4798      	blx	r3
   84470:	4603      	mov	r3, r0
   84472:	f641 3420 	movw	r4, #6944	; 0x1b20
   84476:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8447a:	4620      	mov	r0, r4
   8447c:	f04f 0164 	mov.w	r1, #100	; 0x64
   84480:	f64d 42a4 	movw	r2, #56484	; 0xdca4
   84484:	f2c0 0208 	movt	r2, #8
   84488:	f64a 554b 	movw	r5, #44363	; 0xad4b
   8448c:	f2c0 0508 	movt	r5, #8
   84490:	47a8      	blx	r5
   84492:	4620      	mov	r0, r4
   84494:	f644 6119 	movw	r1, #19993	; 0x4e19
   84498:	f2c0 0108 	movt	r1, #8
   8449c:	4788      	blx	r1
	return SCPI_RES_OK;
   8449e:	f04f 0001 	mov.w	r0, #1
   844a2:	bd38      	pop	{r3, r4, r5, pc}

000844a4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   844a4:	b510      	push	{r4, lr}
   844a6:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
   844a8:	f240 4395 	movw	r3, #1173	; 0x495
   844ac:	f2c0 0308 	movt	r3, #8
   844b0:	4798      	blx	r3
   844b2:	2801      	cmp	r0, #1
   844b4:	d003      	beq.n	844be <sd_mmc_test_unit_ready+0x1a>
   844b6:	b128      	cbz	r0, 844c4 <sd_mmc_test_unit_ready+0x20>
   844b8:	2802      	cmp	r0, #2
   844ba:	d120      	bne.n	844fe <sd_mmc_test_unit_ready+0x5a>
   844bc:	e015      	b.n	844ea <sd_mmc_test_unit_ready+0x46>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   844be:	f04f 0003 	mov.w	r0, #3
   844c2:	bd10      	pop	{r4, pc}
Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   844c4:	f640 4160 	movw	r1, #3168	; 0xc60
   844c8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   844cc:	5d0b      	ldrb	r3, [r1, r4]
   844ce:	b9cb      	cbnz	r3, 84504 <sd_mmc_test_unit_ready+0x60>
			return CTRL_NO_PRESENT;
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   844d0:	4620      	mov	r0, r4
   844d2:	f241 022d 	movw	r2, #4141	; 0x102d
   844d6:	f2c0 0208 	movt	r2, #8
   844da:	4790      	blx	r2
   844dc:	f000 0003 	and.w	r0, r0, #3
			return CTRL_GOOD;
   844e0:	2800      	cmp	r0, #0
   844e2:	bf0c      	ite	eq
   844e4:	2002      	moveq	r0, #2
   844e6:	2000      	movne	r0, #0
   844e8:	bd10      	pop	{r4, pc}

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   844ea:	f640 4060 	movw	r0, #3168	; 0xc60
   844ee:	f2c2 0007 	movt	r0, #8199	; 0x2007
   844f2:	f04f 0200 	mov.w	r2, #0
   844f6:	5502      	strb	r2, [r0, r4]
		return CTRL_NO_PRESENT;
   844f8:	f04f 0002 	mov.w	r0, #2
   844fc:	bd10      	pop	{r4, pc}

	default:
		return CTRL_FAIL;
   844fe:	f04f 0001 	mov.w	r0, #1
   84502:	bd10      	pop	{r4, pc}
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
			return CTRL_NO_PRESENT;
   84504:	f04f 0002 	mov.w	r0, #2
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
	}
}
   84508:	bd10      	pop	{r4, pc}
   8450a:	bf00      	nop

0008450c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   8450c:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
   8450e:	f04f 0000 	mov.w	r0, #0
   84512:	f244 43a5 	movw	r3, #17573	; 0x44a5
   84516:	f2c0 0308 	movt	r3, #8
   8451a:	4798      	blx	r3
}
   8451c:	bd08      	pop	{r3, pc}
   8451e:	bf00      	nop

00084520 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   84520:	b538      	push	{r3, r4, r5, lr}
   84522:	4604      	mov	r4, r0
   84524:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   84526:	f241 0359 	movw	r3, #4185	; 0x1059
   8452a:	f2c0 0308 	movt	r3, #8
   8452e:	4798      	blx	r3
   84530:	ea4f 0040 	mov.w	r0, r0, lsl #1
   84534:	f100 31ff 	add.w	r1, r0, #4294967295
   84538:	6029      	str	r1, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
   8453a:	4620      	mov	r0, r4
   8453c:	f244 42a5 	movw	r2, #17573	; 0x44a5
   84540:	f2c0 0208 	movt	r2, #8
   84544:	4790      	blx	r2
}
   84546:	bd38      	pop	{r3, r4, r5, pc}

00084548 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   84548:	b508      	push	{r3, lr}
   8454a:	4601      	mov	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
   8454c:	f04f 0000 	mov.w	r0, #0
   84550:	f244 5321 	movw	r3, #17697	; 0x4521
   84554:	f2c0 0308 	movt	r3, #8
   84558:	4798      	blx	r3
}
   8455a:	bd08      	pop	{r3, pc}

0008455c <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   8455c:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
   8455e:	f241 0385 	movw	r3, #4229	; 0x1085
   84562:	f2c0 0308 	movt	r3, #8
   84566:	4798      	blx	r3
}
   84568:	bd08      	pop	{r3, pc}
   8456a:	bf00      	nop

0008456c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   8456c:	b508      	push	{r3, lr}
	return sd_mmc_wr_protect(0);
   8456e:	f04f 0000 	mov.w	r0, #0
   84572:	f244 535d 	movw	r3, #17757	; 0x455d
   84576:	f2c0 0308 	movt	r3, #8
   8457a:	4798      	blx	r3
}
   8457c:	bd08      	pop	{r3, pc}
   8457e:	bf00      	nop

00084580 <sd_mmc_removal>:

bool sd_mmc_removal(uint8_t slot)
{
	UNUSED(slot);
	return true;
}
   84580:	f04f 0001 	mov.w	r0, #1
   84584:	4770      	bx	lr
   84586:	bf00      	nop

00084588 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   84588:	b508      	push	{r3, lr}
	return sd_mmc_removal(0);
   8458a:	f04f 0000 	mov.w	r0, #0
   8458e:	f244 5381 	movw	r3, #17793	; 0x4581
   84592:	f2c0 0308 	movt	r3, #8
   84596:	4798      	blx	r3
}
   84598:	bd08      	pop	{r3, pc}
   8459a:	bf00      	nop

0008459c <sd_mmc_usb_read_10>:

COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
   8459c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   845a0:	4614      	mov	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
   845a2:	f241 038d 	movw	r3, #4237	; 0x108d
   845a6:	f2c0 0308 	movt	r3, #8
   845aa:	4798      	blx	r3
   845ac:	4601      	mov	r1, r0
   845ae:	b370      	cbz	r0, 8460e <sd_mmc_usb_read_10+0x72>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   845b0:	2802      	cmp	r0, #2
   845b2:	bf0c      	ite	eq
   845b4:	2002      	moveq	r0, #2
   845b6:	2001      	movne	r0, #1
   845b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (nb_step) { // Skip last step
   845bc:	b144      	cbz	r4, 845d0 <sd_mmc_usb_read_10+0x34>
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   845be:	f014 0f01 	tst.w	r4, #1
   845c2:	bf0c      	ite	eq
   845c4:	4638      	moveq	r0, r7
   845c6:	4640      	movne	r0, r8
   845c8:	f04f 0101 	mov.w	r1, #1
   845cc:	47b0      	blx	r6
   845ce:	bba0      	cbnz	r0, 8463a <sd_mmc_usb_read_10+0x9e>
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
			}
		}
		if (!b_first_step) { // Skip first step
   845d0:	b985      	cbnz	r5, 845f4 <sd_mmc_usb_read_10+0x58>
			// RAM -> USB
			if (!udi_msc_trans_block(true,
   845d2:	f014 0f01 	tst.w	r4, #1
   845d6:	bf0c      	ite	eq
   845d8:	4641      	moveq	r1, r8
   845da:	4639      	movne	r1, r7
   845dc:	f04f 0001 	mov.w	r0, #1
   845e0:	f44f 7200 	mov.w	r2, #512	; 0x200
   845e4:	f04f 0300 	mov.w	r3, #0
   845e8:	f646 2505 	movw	r5, #27141	; 0x6a05
   845ec:	f2c0 0508 	movt	r5, #8
   845f0:	47a8      	blx	r5
   845f2:	b330      	cbz	r0, 84642 <sd_mmc_usb_read_10+0xa6>
				return CTRL_FAIL;
			}
		} else {
			b_first_step = false;
		}
		if (nb_step) { // Skip last step
   845f4:	b12c      	cbz	r4, 84602 <sd_mmc_usb_read_10+0x66>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks()) {
   845f6:	f241 2015 	movw	r0, #4629	; 0x1215
   845fa:	f2c0 0008 	movt	r0, #8
   845fe:	4780      	blx	r0
   84600:	bb18      	cbnz	r0, 8464a <sd_mmc_usb_read_10+0xae>
   84602:	f104 34ff 	add.w	r4, r4, #4294967295
   84606:	b2a4      	uxth	r4, r4
   84608:	f04f 0500 	mov.w	r5, #0
   8460c:	e00d      	b.n	8462a <sd_mmc_usb_read_10+0x8e>
COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
	bool b_first_step = true;
   8460e:	f04f 0501 	mov.w	r5, #1
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (nb_step) { // Skip last step
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   84612:	f241 16dd 	movw	r6, #4573	; 0x11dd
   84616:	f2c0 0608 	movt	r6, #8
   8461a:	f241 7820 	movw	r8, #5920	; 0x1720
   8461e:	f2c2 0807 	movt	r8, #8199	; 0x2007
   84622:	f641 1720 	movw	r7, #6432	; 0x1920
   84626:	f2c2 0707 	movt	r7, #8199	; 0x2007
	default:
		return CTRL_FAIL;
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
   8462a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8462e:	4294      	cmp	r4, r2
   84630:	d1c4      	bne.n	845bc <sd_mmc_usb_read_10+0x20>
				return CTRL_FAIL;
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
   84632:	f04f 0000 	mov.w	r0, #0
   84636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (nb_step--) {
		if (nb_step) { // Skip last step
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
   8463a:	f04f 0001 	mov.w	r0, #1
   8463e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!udi_msc_trans_block(true,
					((nb_step % 2) == 0) ?
					sector_buf_1 : sector_buf_0,
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
   84642:	f04f 0001 	mov.w	r0, #1
   84646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else {
			b_first_step = false;
		}
		if (nb_step) { // Skip last step
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks()) {
				return CTRL_FAIL;
   8464a:	f04f 0001 	mov.w	r0, #1
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
}
   8464e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84652:	bf00      	nop

00084654 <sd_mmc_usb_read_10_0>:

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
   84654:	b508      	push	{r3, lr}
   84656:	4603      	mov	r3, r0
   84658:	460a      	mov	r2, r1
	return sd_mmc_usb_read_10(0, addr, nb_sector);
   8465a:	f04f 0000 	mov.w	r0, #0
   8465e:	4619      	mov	r1, r3
   84660:	f244 539d 	movw	r3, #17821	; 0x459d
   84664:	f2c0 0308 	movt	r3, #8
   84668:	4798      	blx	r3
}
   8466a:	bd08      	pop	{r3, pc}

0008466c <sd_mmc_usb_write_10>:
{
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
   8466c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84670:	4614      	mov	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
   84672:	f241 2395 	movw	r3, #4757	; 0x1295
   84676:	f2c0 0308 	movt	r3, #8
   8467a:	4798      	blx	r3
   8467c:	4601      	mov	r1, r0
   8467e:	b368      	cbz	r0, 846dc <sd_mmc_usb_write_10+0x70>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   84680:	2802      	cmp	r0, #2
   84682:	bf0c      	ite	eq
   84684:	2002      	moveq	r0, #2
   84686:	2001      	movne	r0, #1
   84688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
   8468c:	b945      	cbnz	r5, 846a0 <sd_mmc_usb_write_10+0x34>
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   8468e:	f014 0f01 	tst.w	r4, #1
   84692:	bf0c      	ite	eq
   84694:	4638      	moveq	r0, r7
   84696:	4640      	movne	r0, r8
   84698:	f04f 0101 	mov.w	r1, #1
   8469c:	47b0      	blx	r6
   8469e:	bb98      	cbnz	r0, 84708 <sd_mmc_usb_write_10+0x9c>
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
			}
		}
		if (nb_step) { // Skip last step
   846a0:	b17c      	cbz	r4, 846c2 <sd_mmc_usb_write_10+0x56>
			// USB -> RAM
			if (!udi_msc_trans_block(false,
   846a2:	f014 0f01 	tst.w	r4, #1
   846a6:	bf0c      	ite	eq
   846a8:	4641      	moveq	r1, r8
   846aa:	4639      	movne	r1, r7
   846ac:	f04f 0000 	mov.w	r0, #0
   846b0:	f44f 7200 	mov.w	r2, #512	; 0x200
   846b4:	4603      	mov	r3, r0
   846b6:	f646 2c05 	movw	ip, #27141	; 0x6a05
   846ba:	f2c0 0c08 	movt	ip, #8
   846be:	47e0      	blx	ip
   846c0:	b330      	cbz	r0, 84710 <sd_mmc_usb_write_10+0xa4>
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
			}
		}
		if (!b_first_step) { // Skip first step
   846c2:	b92d      	cbnz	r5, 846d0 <sd_mmc_usb_write_10+0x64>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks()) {
   846c4:	f241 30a1 	movw	r0, #5025	; 0x13a1
   846c8:	f2c0 0008 	movt	r0, #8
   846cc:	4780      	blx	r0
   846ce:	bb18      	cbnz	r0, 84718 <sd_mmc_usb_write_10+0xac>
   846d0:	f104 34ff 	add.w	r4, r4, #4294967295
   846d4:	b2a4      	uxth	r4, r4
   846d6:	f04f 0500 	mov.w	r5, #0
   846da:	e00d      	b.n	846f8 <sd_mmc_usb_write_10+0x8c>
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
	bool b_first_step = true;
   846dc:	f04f 0501 	mov.w	r5, #1
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   846e0:	f241 3669 	movw	r6, #4969	; 0x1369
   846e4:	f2c0 0608 	movt	r6, #8
   846e8:	f241 7820 	movw	r8, #5920	; 0x1720
   846ec:	f2c2 0807 	movt	r8, #8199	; 0x2007
   846f0:	f641 1720 	movw	r7, #6432	; 0x1920
   846f4:	f2c2 0707 	movt	r7, #8199	; 0x2007
	default:
		return CTRL_FAIL;
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
   846f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   846fc:	4294      	cmp	r4, r2
   846fe:	d1c5      	bne.n	8468c <sd_mmc_usb_write_10+0x20>
			}
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
   84700:	f04f 0000 	mov.w	r0, #0
   84704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
   84708:	f04f 0001 	mov.w	r0, #1
   8470c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!udi_msc_trans_block(false,
					((nb_step % 2) == 0) ?
					sector_buf_1 : sector_buf_0,
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
   84710:	f04f 0001 	mov.w	r0, #1
   84714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
		}
		if (!b_first_step) { // Skip first step
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks()) {
				return CTRL_FAIL;
   84718:	f04f 0001 	mov.w	r0, #1
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
}
   8471c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00084720 <sd_mmc_usb_write_10_0>:

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
   84720:	b508      	push	{r3, lr}
   84722:	4603      	mov	r3, r0
   84724:	460a      	mov	r2, r1
	return sd_mmc_usb_write_10(0, addr, nb_sector);
   84726:	f04f 0000 	mov.w	r0, #0
   8472a:	4619      	mov	r1, r3
   8472c:	f244 636d 	movw	r3, #18029	; 0x466d
   84730:	f2c0 0308 	movt	r3, #8
   84734:	4798      	blx	r3
}
   84736:	bd08      	pop	{r3, pc}

00084738 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
   84738:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
   8473a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8473e:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
   84740:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
   84742:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
   84744:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
   84746:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
   84748:	f04f 0680 	mov.w	r6, #128	; 0x80
   8474c:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
   8474e:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
   84750:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
   84752:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
   84754:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
   84756:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
   84758:	f04f 0000 	mov.w	r0, #0
   8475c:	6518      	str	r0, [r3, #80]	; 0x50
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
   8475e:	f04f 0105 	mov.w	r1, #5
   84762:	6019      	str	r1, [r3, #0]
}
   84764:	bc70      	pop	{r4, r5, r6}
   84766:	4770      	bx	lr

00084768 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
   84768:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
   8476a:	f001 033f 	and.w	r3, r1, #63	; 0x3f
   8476e:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
   84770:	f411 7f80 	tst.w	r1, #256	; 0x100
   84774:	d00c      	beq.n	84790 <hsmci_send_cmd_execute+0x28>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
   84776:	f411 6f00 	tst.w	r1, #2048	; 0x800
   8477a:	d002      	beq.n	84782 <hsmci_send_cmd_execute+0x1a>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
   8477c:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
   84780:	e006      	b.n	84790 <hsmci_send_cmd_execute+0x28>
		} else if (cmd & SDMMC_RESP_BUSY) {
   84782:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
   84786:	bf14      	ite	ne
   84788:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
   8478c:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
   84790:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
   84794:	bf18      	it	ne
   84796:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
   8479a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8479e:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
   847a0:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
   847a2:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
   847a4:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
   847a8:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
   847aa:	b152      	cbz	r2, 847c2 <hsmci_send_cmd_execute+0x5a>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
   847ac:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
   847b0:	d012      	beq.n	847d8 <hsmci_send_cmd_execute+0x70>
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
   847b2:	f244 7239 	movw	r2, #18233	; 0x4739
   847b6:	f2c0 0208 	movt	r2, #8
   847ba:	4790      	blx	r2
				return false;
   847bc:	f04f 0000 	mov.w	r0, #0
   847c0:	bd08      	pop	{r3, pc}
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
   847c2:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
   847c6:	d007      	beq.n	847d8 <hsmci_send_cmd_execute+0x70>
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
   847c8:	f244 7139 	movw	r1, #18233	; 0x4739
   847cc:	f2c0 0108 	movt	r1, #8
   847d0:	4788      	blx	r1
				return false;
   847d2:	f04f 0000 	mov.w	r0, #0
   847d6:	bd08      	pop	{r3, pc}
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
   847d8:	f013 0f01 	tst.w	r3, #1
   847dc:	d0e4      	beq.n	847a8 <hsmci_send_cmd_execute+0x40>

	if (cmd & SDMMC_RESP_BUSY) {
   847de:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   847e2:	d119      	bne.n	84818 <hsmci_send_cmd_execute+0xb0>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
   847e4:	f04f 0001 	mov.w	r0, #1
   847e8:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 1000000;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
   847ea:	6c08      	ldr	r0, [r1, #64]	; 0x40
   847ec:	f103 33ff 	add.w	r3, r3, #4294967295
		if (busy_wait-- == 0) {
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
			return false;
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
   847f0:	f000 0230 	and.w	r2, r0, #48	; 0x30
   847f4:	2a20      	cmp	r2, #32
   847f6:	d119      	bne.n	8482c <hsmci_send_cmd_execute+0xc4>
   847f8:	e00b      	b.n	84812 <hsmci_send_cmd_execute+0xaa>

	do {
		sr = HSMCI->HSMCI_SR;
		if (busy_wait-- == 0) {
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
   847fa:	f244 7139 	movw	r1, #18233	; 0x4739
   847fe:	f2c0 0108 	movt	r1, #8
   84802:	4788      	blx	r1
			return false;
   84804:	f04f 0000 	mov.w	r0, #0
   84808:	bd08      	pop	{r3, pc}
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
   8480a:	f000 0230 	and.w	r2, r0, #48	; 0x30
   8480e:	2a20      	cmp	r2, #32
   84810:	d1eb      	bne.n	847ea <hsmci_send_cmd_execute+0x82>
	return true;
   84812:	f04f 0001 	mov.w	r0, #1
   84816:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 1000000;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
   84818:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   8481c:	6c00      	ldr	r0, [r0, #64]	; 0x40
   8481e:	f244 2340 	movw	r3, #16960	; 0x4240
   84822:	f2c0 030f 	movt	r3, #15
   84826:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8482a:	e7ee      	b.n	8480a <hsmci_send_cmd_execute+0xa2>
   8482c:	6c08      	ldr	r0, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
   8482e:	3b01      	subs	r3, #1
   84830:	d1eb      	bne.n	8480a <hsmci_send_cmd_execute+0xa2>
   84832:	e7e2      	b.n	847fa <hsmci_send_cmd_execute+0x92>

00084834 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
   84834:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
   84836:	f04f 0015 	mov.w	r0, #21
   8483a:	f647 14bd 	movw	r4, #31165	; 0x79bd
   8483e:	f2c0 0408 	movt	r4, #8
   84842:	47a0      	blx	r4
#ifdef HSMCI_SR_DMADONE
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_DMAC);
   84844:	f04f 0027 	mov.w	r0, #39	; 0x27
   84848:	47a0      	blx	r4
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
   8484a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8484e:	f04f 0272 	mov.w	r2, #114	; 0x72
   84852:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
   84854:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
   84856:	f04f 0011 	mov.w	r0, #17
   8485a:	6558      	str	r0, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
   8485c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
   84860:	6059      	str	r1, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
   84862:	f04f 0205 	mov.w	r2, #5
   84866:	601a      	str	r2, [r3, #0]
   84868:	bd10      	pop	{r4, pc}
   8486a:	bf00      	nop

0008486c <hsmci_get_bus_width>:
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
   8486c:	2800      	cmp	r0, #0
   8486e:	bf0c      	ite	eq
   84870:	2004      	moveq	r0, #4
   84872:	2000      	movne	r0, #0
   84874:	4770      	bx	lr
   84876:	bf00      	nop

00084878 <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
   84878:	f04f 0001 	mov.w	r0, #1
   8487c:	4770      	bx	lr
   8487e:	bf00      	nop

00084880 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
   84880:	b133      	cbz	r3, 84890 <hsmci_select_device+0x10>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
   84882:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84886:	6d58      	ldr	r0, [r3, #84]	; 0x54
   84888:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   8488c:	6558      	str	r0, [r3, #84]	; 0x54
   8488e:	e005      	b.n	8489c <hsmci_select_device+0x1c>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
   84890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84894:	6d58      	ldr	r0, [r3, #84]	; 0x54
   84896:	f420 7080 	bic.w	r0, r0, #256	; 0x100
   8489a:	6558      	str	r0, [r3, #84]	; 0x54
{
	uint32_t clkdiv;
	uint32_t rest;

	// Speed = MCK clock / (2 * (CLKDIV + 1))
	if (speed > 0) {
   8489c:	b181      	cbz	r1, 848c0 <hsmci_select_device+0x40>
		clkdiv = mck / (2 * speed);
   8489e:	ea4f 0141 	mov.w	r1, r1, lsl #1
   848a2:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
   848a6:	f2c0 5301 	movt	r3, #1281	; 0x501
   848aa:	fbb3 f0f1 	udiv	r0, r3, r1
		rest = mck % (2 * speed);
   848ae:	fb01 3110 	mls	r1, r1, r0, r3
		if (rest > 0) {
   848b2:	b109      	cbz	r1, 848b8 <hsmci_select_device+0x38>
			// Ensure that the card speed not be higher than expected.
			clkdiv++;
   848b4:	f100 0001 	add.w	r0, r0, #1
		}
		if (clkdiv > 0) {
   848b8:	b120      	cbz	r0, 848c4 <hsmci_select_device+0x44>
			clkdiv -= 1;
   848ba:	f100 30ff 	add.w	r0, r0, #4294967295
   848be:	e001      	b.n	848c4 <hsmci_select_device+0x44>
		}
	} else {
		clkdiv = 0;
   848c0:	f04f 0000 	mov.w	r0, #0
	}
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
   848c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   848c8:	6859      	ldr	r1, [r3, #4]
   848ca:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   848ce:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
   848d0:	6859      	ldr	r1, [r3, #4]
   848d2:	b2c0      	uxtb	r0, r0
   848d4:	4308      	orrs	r0, r1
   848d6:	6058      	str	r0, [r3, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
   848d8:	2a04      	cmp	r2, #4
   848da:	d004      	beq.n	848e6 <hsmci_select_device+0x66>
}

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
   848dc:	2a08      	cmp	r2, #8
   848de:	bf0c      	ite	eq
   848e0:	22c0      	moveq	r2, #192	; 0xc0
   848e2:	2200      	movne	r2, #0
   848e4:	e001      	b.n	848ea <hsmci_select_device+0x6a>
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
		break;

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
   848e6:	f04f 0280 	mov.w	r2, #128	; 0x80
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
   848ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   848ee:	60da      	str	r2, [r3, #12]
   848f0:	4770      	bx	lr
   848f2:	bf00      	nop

000848f4 <hsmci_deselect_device>:
}

void hsmci_deselect_device(uint8_t slot)
{
   848f4:	4770      	bx	lr
   848f6:	bf00      	nop

000848f8 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
   848f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   848fc:	685a      	ldr	r2, [r3, #4]
   848fe:	f422 5060 	bic.w	r0, r2, #14336	; 0x3800
   84902:	6058      	str	r0, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
   84904:	f04f 0100 	mov.w	r1, #0
   84908:	6119      	str	r1, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
   8490a:	f44f 6210 	mov.w	r2, #2304	; 0x900
   8490e:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
   84910:	4618      	mov	r0, r3
   84912:	6c03      	ldr	r3, [r0, #64]	; 0x40
   84914:	f013 0f01 	tst.w	r3, #1
   84918:	d0fb      	beq.n	84912 <hsmci_send_clock+0x1a>
}
   8491a:	4770      	bx	lr

0008491c <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   8491c:	b510      	push	{r4, lr}
   8491e:	4604      	mov	r4, r0
   84920:	460a      	mov	r2, r1
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
   84922:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84926:	6859      	ldr	r1, [r3, #4]
   84928:	f421 5060 	bic.w	r0, r1, #14336	; 0x3800
   8492c:	6058      	str	r0, [r3, #4]
#ifdef HSMCI_SR_DMADONE
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
   8492e:	f04f 0000 	mov.w	r0, #0
   84932:	6518      	str	r0, [r3, #80]	; 0x50
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
	HSMCI->HSMCI_BLKR = 0;
   84934:	6198      	str	r0, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
   84936:	4621      	mov	r1, r4
   84938:	f244 7369 	movw	r3, #18281	; 0x4769
   8493c:	f2c0 0308 	movt	r3, #8
   84940:	4798      	blx	r3
}
   84942:	bd10      	pop	{r4, pc}

00084944 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
   84944:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84948:	6a18      	ldr	r0, [r3, #32]
}
   8494a:	4770      	bx	lr

0008494c <hsmci_get_response_128>:
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   8494c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84950:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   84952:	ea4f 6112 	mov.w	r1, r2, lsr #24
   84956:	7001      	strb	r1, [r0, #0]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   84958:	ea4f 4112 	mov.w	r1, r2, lsr #16
   8495c:	7041      	strb	r1, [r0, #1]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   8495e:	ea4f 2112 	mov.w	r1, r2, lsr #8
   84962:	7081      	strb	r1, [r0, #2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   84964:	70c2      	strb	r2, [r0, #3]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   84966:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   84968:	ea4f 6112 	mov.w	r1, r2, lsr #24
   8496c:	7101      	strb	r1, [r0, #4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   8496e:	ea4f 4112 	mov.w	r1, r2, lsr #16
   84972:	7141      	strb	r1, [r0, #5]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   84974:	ea4f 2112 	mov.w	r1, r2, lsr #8
   84978:	7181      	strb	r1, [r0, #6]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   8497a:	71c2      	strb	r2, [r0, #7]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   8497c:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   8497e:	ea4f 6112 	mov.w	r1, r2, lsr #24
   84982:	7201      	strb	r1, [r0, #8]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   84984:	ea4f 4112 	mov.w	r1, r2, lsr #16
   84988:	7241      	strb	r1, [r0, #9]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   8498a:	ea4f 2112 	mov.w	r1, r2, lsr #8
   8498e:	7281      	strb	r1, [r0, #10]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   84990:	72c2      	strb	r2, [r0, #11]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   84992:	6a1b      	ldr	r3, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   84994:	ea4f 6213 	mov.w	r2, r3, lsr #24
   84998:	7302      	strb	r2, [r0, #12]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   8499a:	ea4f 4113 	mov.w	r1, r3, lsr #16
   8499e:	7341      	strb	r1, [r0, #13]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   849a0:	ea4f 2213 	mov.w	r2, r3, lsr #8
   849a4:	7382      	strb	r2, [r0, #14]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   849a6:	73c3      	strb	r3, [r0, #15]
   849a8:	4770      	bx	lr
   849aa:	bf00      	nop

000849ac <hsmci_adtc_start>:
		response++;
	}
}

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
   849ac:	b570      	push	{r4, r5, r6, lr}
   849ae:	4604      	mov	r4, r0
   849b0:	460d      	mov	r5, r1
	uint32_t cmdr;

#ifdef HSMCI_SR_DMADONE
	if (access_block) {
   849b2:	f89d 1010 	ldrb.w	r1, [sp, #16]
   849b6:	b129      	cbz	r1, 849c4 <hsmci_adtc_start+0x18>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
   849b8:	f44f 7080 	mov.w	r0, #256	; 0x100
   849bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   849c0:	6508      	str	r0, [r1, #80]	; 0x50
   849c2:	e004      	b.n	849ce <hsmci_adtc_start+0x22>
	} else {
		// Disable DMA for HSMCI
		HSMCI->HSMCI_DMA = 0;
   849c4:	f04f 0000 	mov.w	r0, #0
   849c8:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   849cc:	6530      	str	r0, [r6, #80]	; 0x50
#endif

	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
   849ce:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   849d2:	6870      	ldr	r0, [r6, #4]
   849d4:	f440 51c0 	orr.w	r1, r0, #6144	; 0x1800
   849d8:	6071      	str	r1, [r6, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
   849da:	f012 0f03 	tst.w	r2, #3
   849de:	d004      	beq.n	849ea <hsmci_adtc_start+0x3e>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
   849e0:	6870      	ldr	r0, [r6, #4]
   849e2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   849e6:	6071      	str	r1, [r6, #4]
   849e8:	e005      	b.n	849f6 <hsmci_adtc_start+0x4a>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
   849ea:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   849ee:	6870      	ldr	r0, [r6, #4]
   849f0:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
   849f4:	6071      	str	r1, [r6, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
   849f6:	f404 4600 	and.w	r6, r4, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
   849fa:	2e00      	cmp	r6, #0
   849fc:	bf0c      	ite	eq
   849fe:	f44f 20a0 	moveq.w	r0, #327680	; 0x50000
   84a02:	f44f 3080 	movne.w	r0, #65536	; 0x10000
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
   84a06:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   84a0a:	d009      	beq.n	84a20 <hsmci_adtc_start+0x74>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
   84a0c:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
   84a10:	ea4f 56c2 	mov.w	r6, r2, lsl #23
   84a14:	ea4f 51d6 	mov.w	r1, r6, lsr #23
   84a18:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   84a1c:	61b1      	str	r1, [r6, #24]
   84a1e:	e018      	b.n	84a52 <hsmci_adtc_start+0xa6>
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
   84a20:	ea43 4602 	orr.w	r6, r3, r2, lsl #16
   84a24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   84a28:	618e      	str	r6, [r1, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
   84a2a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   84a2e:	d002      	beq.n	84a36 <hsmci_adtc_start+0x8a>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
   84a30:	f440 1020 	orr.w	r0, r0, #2621440	; 0x280000
   84a34:	e00d      	b.n	84a52 <hsmci_adtc_start+0xa6>
		} else if (cmd & SDMMC_CMD_STREAM) {
   84a36:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   84a3a:	d002      	beq.n	84a42 <hsmci_adtc_start+0x96>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
   84a3c:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   84a40:	e007      	b.n	84a52 <hsmci_adtc_start+0xa6>
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
   84a42:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   84a46:	d104      	bne.n	84a52 <hsmci_adtc_start+0xa6>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
   84a48:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
   84a4c:	bf18      	it	ne
   84a4e:	f440 2000 	orrne.w	r0, r0, #524288	; 0x80000
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
   84a52:	f640 4168 	movw	r1, #3176	; 0xc68
   84a56:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84a5a:	f04f 0600 	mov.w	r6, #0
   84a5e:	600e      	str	r6, [r1, #0]
	hsmci_block_size = block_size;
   84a60:	f640 4164 	movw	r1, #3172	; 0xc64
   84a64:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84a68:	800a      	strh	r2, [r1, #0]
	hsmci_nb_block = nb_block;
   84a6a:	f640 4266 	movw	r2, #3174	; 0xc66
   84a6e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84a72:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
   84a74:	4621      	mov	r1, r4
   84a76:	462a      	mov	r2, r5
   84a78:	f244 7369 	movw	r3, #18281	; 0x4769
   84a7c:	f2c0 0308 	movt	r3, #8
   84a80:	4798      	blx	r3
}
   84a82:	bd70      	pop	{r4, r5, r6, pc}

00084a84 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
   84a84:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
   84a86:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84a8a:	f04f 0200 	mov.w	r2, #0
   84a8e:	f2cc 0260 	movt	r2, #49248	; 0xc060

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
   84a92:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84a94:	4213      	tst	r3, r2
   84a96:	d007      	beq.n	84aa8 <hsmci_read_word+0x24>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   84a98:	f244 7039 	movw	r0, #18233	; 0x4739
   84a9c:	f2c0 0008 	movt	r0, #8
   84aa0:	4780      	blx	r0
			return false;
   84aa2:	f04f 0000 	mov.w	r0, #0
   84aa6:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_RXRDY));
   84aa8:	f013 0f02 	tst.w	r3, #2
   84aac:	d0f1      	beq.n	84a92 <hsmci_read_word+0xe>

	// Read data
	*value = HSMCI->HSMCI_RDR;
   84aae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   84ab2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   84ab4:	6002      	str	r2, [r0, #0]
	hsmci_transfert_pos += 4;
   84ab6:	f640 4068 	movw	r0, #3176	; 0xc68
   84aba:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84abe:	6803      	ldr	r3, [r0, #0]
   84ac0:	f103 0304 	add.w	r3, r3, #4
   84ac4:	6003      	str	r3, [r0, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   84ac6:	f640 4166 	movw	r1, #3174	; 0xc66
   84aca:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84ace:	880a      	ldrh	r2, [r1, #0]
   84ad0:	f640 4064 	movw	r0, #3172	; 0xc64
   84ad4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84ad8:	8801      	ldrh	r1, [r0, #0]
   84ada:	fb01 f202 	mul.w	r2, r1, r2
   84ade:	4293      	cmp	r3, r2
   84ae0:	d316      	bcc.n	84b10 <hsmci_read_word+0x8c>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   84ae2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84ae6:	f04f 0200 	mov.w	r2, #0
   84aea:	f2cc 0260 	movt	r2, #49248	; 0xc060
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   84aee:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84af0:	4213      	tst	r3, r2
   84af2:	d007      	beq.n	84b04 <hsmci_read_word+0x80>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   84af4:	f244 7139 	movw	r1, #18233	; 0x4739
   84af8:	f2c0 0108 	movt	r1, #8
   84afc:	4788      	blx	r1
			return false;
   84afe:	f04f 0000 	mov.w	r0, #0
   84b02:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
   84b04:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   84b08:	d0f1      	beq.n	84aee <hsmci_read_word+0x6a>
	return true;
   84b0a:	f04f 0001 	mov.w	r0, #1
   84b0e:	bd08      	pop	{r3, pc}

	// Read data
	*value = HSMCI->HSMCI_RDR;
	hsmci_transfert_pos += 4;
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
		return true;
   84b10:	f04f 0001 	mov.w	r0, #1
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
   84b14:	bd08      	pop	{r3, pc}
   84b16:	bf00      	nop

00084b18 <hsmci_start_read_blocks>:
	return true;
}

#ifdef HSMCI_SR_DMADONE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
   84b18:	b570      	push	{r4, r5, r6, lr}
   84b1a:	b086      	sub	sp, #24
   84b1c:	4604      	mov	r4, r0
	uint32_t cfg, nb_data;
	dma_transfer_descriptor_t desc;
	bool transfert_byte;

	nb_data = nb_block * hsmci_block_size;
   84b1e:	f640 4364 	movw	r3, #3172	; 0xc64
   84b22:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84b26:	881e      	ldrh	r6, [r3, #0]
   84b28:	fb06 f601 	mul.w	r6, r6, r1
	transfert_byte = ((HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) || (((uint32_t)dest & 0x3) > 0)) ? 1 : 0;
   84b2c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   84b30:	6841      	ldr	r1, [r0, #4]
   84b32:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   84b36:	d12f      	bne.n	84b98 <hsmci_start_read_blocks+0x80>
	 * - Hardware Selection for the Source
	 * - Source with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   84b38:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84b3c:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84b40:	4628      	mov	r0, r5
   84b42:	f245 2205 	movw	r2, #20997	; 0x5205
   84b46:	f2c0 0208 	movt	r2, #8
   84b4a:	4790      	blx	r2
	dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84b4c:	4628      	mov	r0, r5
   84b4e:	f04f 0100 	mov.w	r1, #0
   84b52:	f245 2319 	movw	r3, #21017	; 0x5219
   84b56:	f2c0 0308 	movt	r3, #8
   84b5a:	4798      	blx	r3
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_SRC_H2SEL |
			DMAC_CFG_SRC_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   84b5c:	4628      	mov	r0, r5
   84b5e:	f04f 0100 	mov.w	r1, #0
   84b62:	f44f 7200 	mov.w	r2, #512	; 0x200
   84b66:	f2c0 1201 	movt	r2, #257	; 0x101
   84b6a:	f245 2561 	movw	r5, #21089	; 0x5261
   84b6e:	f2c0 0508 	movt	r5, #8
   84b72:	47a8      	blx	r5

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
   84b74:	f04f 0030 	mov.w	r0, #48	; 0x30
   84b78:	f2c4 0000 	movt	r0, #16384	; 0x4000
   84b7c:	9001      	str	r0, [sp, #4]
	desc.ul_destination_addr = (uint32_t)dest;
   84b7e:	9402      	str	r4, [sp, #8]
	if (transfert_byte) {
   84b80:	f014 0f03 	tst.w	r4, #3
   84b84:	d002      	beq.n	84b8c <hsmci_start_read_blocks+0x74>
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
   84b86:	b2b4      	uxth	r4, r6

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
	desc.ul_destination_addr = (uint32_t)dest;
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
   84b88:	9403      	str	r4, [sp, #12]
   84b8a:	e02a      	b.n	84be2 <hsmci_start_read_blocks+0xca>
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   84b8c:	f3c6 048f 	ubfx	r4, r6, #2, #16
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
   84b90:	f044 5108 	orr.w	r1, r4, #570425344	; 0x22000000
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   84b94:	9103      	str	r1, [sp, #12]
   84b96:	e024      	b.n	84be2 <hsmci_start_read_blocks+0xca>
	 * - Hardware Selection for the Source
	 * - Source with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   84b98:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84b9c:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84ba0:	4628      	mov	r0, r5
   84ba2:	f245 2205 	movw	r2, #20997	; 0x5205
   84ba6:	f2c0 0208 	movt	r2, #8
   84baa:	4790      	blx	r2
	dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84bac:	4628      	mov	r0, r5
   84bae:	f04f 0100 	mov.w	r1, #0
   84bb2:	f245 2319 	movw	r3, #21017	; 0x5219
   84bb6:	f2c0 0308 	movt	r3, #8
   84bba:	4798      	blx	r3
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_SRC_H2SEL |
			DMAC_CFG_SRC_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   84bbc:	4628      	mov	r0, r5
   84bbe:	f04f 0100 	mov.w	r1, #0
   84bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
   84bc6:	f2c0 1201 	movt	r2, #257	; 0x101
   84bca:	f245 2561 	movw	r5, #21089	; 0x5261
   84bce:	f2c0 0508 	movt	r5, #8
   84bd2:	47a8      	blx	r5

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
   84bd4:	f04f 0030 	mov.w	r0, #48	; 0x30
   84bd8:	f2c4 0000 	movt	r0, #16384	; 0x4000
   84bdc:	9001      	str	r0, [sp, #4]
	desc.ul_destination_addr = (uint32_t)dest;
   84bde:	9402      	str	r4, [sp, #8]
   84be0:	e7d1      	b.n	84b86 <hsmci_start_read_blocks+0x6e>
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
	}
	desc.ul_ctrlB = DMAC_CTRLB_SRC_DSCR_FETCH_DISABLE
   84be2:	f04f 0100 	mov.w	r1, #0
   84be6:	f2c4 2151 	movt	r1, #16977	; 0x4251
   84bea:	9104      	str	r1, [sp, #16]
			| DMAC_CTRLB_DST_DSCR_FETCH_DISABLE
			| DMAC_CTRLB_FC_PER2MEM_DMA_FC
			| DMAC_CTRLB_SRC_INCR_FIXED
			| DMAC_CTRLB_DST_INCR_INCREMENTING
			| DMAC_CTRLB_IEN;
	desc.ul_descriptor_addr = (uint32_t)NULL;
   84bec:	f04f 0400 	mov.w	r4, #0
   84bf0:	9405      	str	r4, [sp, #20]
	dmac_channel_single_buf_transfer_init(DMAC, CONF_HSMCI_DMA_CHANNEL,
   84bf2:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84bf6:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84bfa:	4628      	mov	r0, r5
   84bfc:	4621      	mov	r1, r4
   84bfe:	aa01      	add	r2, sp, #4
   84c00:	f245 236d 	movw	r3, #21101	; 0x526d
   84c04:	f2c0 0308 	movt	r3, #8
   84c08:	4798      	blx	r3
			&desc);

	// Start DMA transfer
	dmac_channel_enable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84c0a:	4628      	mov	r0, r5
   84c0c:	4621      	mov	r1, r4
   84c0e:	f245 220d 	movw	r2, #21005	; 0x520d
   84c12:	f2c0 0208 	movt	r2, #8
   84c16:	4790      	blx	r2
	hsmci_transfert_pos += nb_data;
   84c18:	f640 4068 	movw	r0, #3176	; 0xc68
   84c1c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84c20:	6801      	ldr	r1, [r0, #0]
   84c22:	1876      	adds	r6, r6, r1
   84c24:	6006      	str	r6, [r0, #0]
	return true;
}
   84c26:	f04f 0001 	mov.w	r0, #1
   84c2a:	b006      	add	sp, #24
   84c2c:	bd70      	pop	{r4, r5, r6, pc}
   84c2e:	bf00      	nop

00084c30 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
   84c30:	b510      	push	{r4, lr}
			hsmci_reset();
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   84c32:	f640 4366 	movw	r3, #3174	; 0xc66
   84c36:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84c3a:	8818      	ldrh	r0, [r3, #0]
   84c3c:	f640 4264 	movw	r2, #3172	; 0xc64
   84c40:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84c44:	8814      	ldrh	r4, [r2, #0]
   84c46:	fb04 f400 	mul.w	r4, r4, r0
   84c4a:	f640 4168 	movw	r1, #3176	; 0xc68
   84c4e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84c52:	6808      	ldr	r0, [r1, #0]
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   84c54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84c58:	f04f 0200 	mov.w	r2, #0
   84c5c:	f2cc 0260 	movt	r2, #49248	; 0xc060
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   84c60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84c62:	4213      	tst	r3, r2
   84c64:	d012      	beq.n	84c8c <hsmci_wait_end_of_read_blocks+0x5c>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   84c66:	f244 7039 	movw	r0, #18233	; 0x4739
   84c6a:	f2c0 0008 	movt	r0, #8
   84c6e:	4780      	blx	r0
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84c70:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   84c74:	f2c4 000c 	movt	r0, #16396	; 0x400c
   84c78:	f04f 0100 	mov.w	r1, #0
   84c7c:	f245 2219 	movw	r2, #21017	; 0x5219
   84c80:	f2c0 0208 	movt	r2, #8
   84c84:	4790      	blx	r2
			return false;
   84c86:	f04f 0000 	mov.w	r0, #0
   84c8a:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   84c8c:	4284      	cmp	r4, r0
   84c8e:	d902      	bls.n	84c96 <hsmci_wait_end_of_read_blocks+0x66>
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
   84c90:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   84c94:	d105      	bne.n	84ca2 <hsmci_wait_end_of_read_blocks+0x72>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
   84c96:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   84c9a:	d0e1      	beq.n	84c60 <hsmci_wait_end_of_read_blocks+0x30>
	return true;
   84c9c:	f04f 0001 	mov.w	r0, #1
   84ca0:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
				return true;
   84ca2:	f04f 0001 	mov.w	r0, #1
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
   84ca6:	bd10      	pop	{r4, pc}

00084ca8 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
   84ca8:	b570      	push	{r4, r5, r6, lr}
   84caa:	b086      	sub	sp, #24
   84cac:	4604      	mov	r4, r0
	bool transfert_byte;
	uint32_t cfg, nb_data;
	dma_transfer_descriptor_t desc;

	nb_data = nb_block * hsmci_block_size;
   84cae:	f640 4364 	movw	r3, #3172	; 0xc64
   84cb2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84cb6:	881e      	ldrh	r6, [r3, #0]
   84cb8:	fb06 f601 	mul.w	r6, r6, r1
	transfert_byte = ((HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) || (((uint32_t)src & 0x3) > 0)) ? 1 : 0;
   84cbc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   84cc0:	6841      	ldr	r1, [r0, #4]
   84cc2:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   84cc6:	d127      	bne.n	84d18 <hsmci_start_write_blocks+0x70>
	 * - Hardware Selection for the Destination
	 * - Destination with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   84cc8:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84ccc:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84cd0:	4628      	mov	r0, r5
   84cd2:	f245 2205 	movw	r2, #20997	; 0x5205
   84cd6:	f2c0 0208 	movt	r2, #8
   84cda:	4790      	blx	r2
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_DST_H2SEL |
			DMAC_CFG_DST_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   84cdc:	4628      	mov	r0, r5
   84cde:	f04f 0100 	mov.w	r1, #0
   84ce2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   84ce6:	f2c0 1201 	movt	r2, #257	; 0x101
   84cea:	f245 2361 	movw	r3, #21089	; 0x5261
   84cee:	f2c0 0308 	movt	r3, #8
   84cf2:	4798      	blx	r3

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
   84cf4:	9401      	str	r4, [sp, #4]
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
   84cf6:	f04f 0034 	mov.w	r0, #52	; 0x34
   84cfa:	f2c4 0000 	movt	r0, #16384	; 0x4000
   84cfe:	9002      	str	r0, [sp, #8]
	if (transfert_byte) {
   84d00:	f014 0f03 	tst.w	r4, #3
   84d04:	d002      	beq.n	84d0c <hsmci_start_write_blocks+0x64>
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
   84d06:	b2b4      	uxth	r4, r6

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
   84d08:	9403      	str	r4, [sp, #12]
   84d0a:	e022      	b.n	84d52 <hsmci_start_write_blocks+0xaa>
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   84d0c:	f3c6 048f 	ubfx	r4, r6, #2, #16
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
   84d10:	f044 5108 	orr.w	r1, r4, #570425344	; 0x22000000
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   84d14:	9103      	str	r1, [sp, #12]
   84d16:	e01c      	b.n	84d52 <hsmci_start_write_blocks+0xaa>
	 * - Hardware Selection for the Destination
	 * - Destination with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   84d18:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84d1c:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84d20:	4628      	mov	r0, r5
   84d22:	f245 2205 	movw	r2, #20997	; 0x5205
   84d26:	f2c0 0208 	movt	r2, #8
   84d2a:	4790      	blx	r2
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_DST_H2SEL |
			DMAC_CFG_DST_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   84d2c:	4628      	mov	r0, r5
   84d2e:	f04f 0100 	mov.w	r1, #0
   84d32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   84d36:	f2c0 1201 	movt	r2, #257	; 0x101
   84d3a:	f245 2361 	movw	r3, #21089	; 0x5261
   84d3e:	f2c0 0308 	movt	r3, #8
   84d42:	4798      	blx	r3

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
   84d44:	9401      	str	r4, [sp, #4]
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
   84d46:	f04f 0034 	mov.w	r0, #52	; 0x34
   84d4a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   84d4e:	9002      	str	r0, [sp, #8]
   84d50:	e7d9      	b.n	84d06 <hsmci_start_write_blocks+0x5e>
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
	}
	desc.ul_ctrlB = DMAC_CTRLB_SRC_DSCR_FETCH_DISABLE
   84d52:	f04f 0100 	mov.w	r1, #0
   84d56:	f2c6 0131 	movt	r1, #24625	; 0x6031
   84d5a:	9104      	str	r1, [sp, #16]
			| DMAC_CTRLB_DST_DSCR_FETCH_DISABLE
			| DMAC_CTRLB_FC_MEM2PER_DMA_FC
			| DMAC_CTRLB_SRC_INCR_INCREMENTING
			| DMAC_CTRLB_DST_INCR_FIXED
			| DMAC_CTRLB_IEN;
	desc.ul_descriptor_addr = (uint32_t)NULL;
   84d5c:	f04f 0400 	mov.w	r4, #0
   84d60:	9405      	str	r4, [sp, #20]
	dmac_channel_single_buf_transfer_init(DMAC, CONF_HSMCI_DMA_CHANNEL,
   84d62:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84d66:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84d6a:	4628      	mov	r0, r5
   84d6c:	4621      	mov	r1, r4
   84d6e:	aa01      	add	r2, sp, #4
   84d70:	f245 236d 	movw	r3, #21101	; 0x526d
   84d74:	f2c0 0308 	movt	r3, #8
   84d78:	4798      	blx	r3
			&desc);

	// Start DMA transfer
	dmac_channel_enable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84d7a:	4628      	mov	r0, r5
   84d7c:	4621      	mov	r1, r4
   84d7e:	f245 220d 	movw	r2, #21005	; 0x520d
   84d82:	f2c0 0208 	movt	r2, #8
   84d86:	4790      	blx	r2
	hsmci_transfert_pos += nb_data;
   84d88:	f640 4068 	movw	r0, #3176	; 0xc68
   84d8c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84d90:	6801      	ldr	r1, [r0, #0]
   84d92:	1876      	adds	r6, r6, r1
   84d94:	6006      	str	r6, [r0, #0]
	return true;
}
   84d96:	f04f 0001 	mov.w	r0, #1
   84d9a:	b006      	add	sp, #24
   84d9c:	bd70      	pop	{r4, r5, r6, pc}
   84d9e:	bf00      	nop

00084da0 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
   84da0:	b510      	push	{r4, lr}
			hsmci_reset();
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   84da2:	f640 4366 	movw	r3, #3174	; 0xc66
   84da6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84daa:	8818      	ldrh	r0, [r3, #0]
   84dac:	f640 4264 	movw	r2, #3172	; 0xc64
   84db0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84db4:	8814      	ldrh	r4, [r2, #0]
   84db6:	fb04 f400 	mul.w	r4, r4, r0
   84dba:	f640 4168 	movw	r1, #3176	; 0xc68
   84dbe:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84dc2:	6808      	ldr	r0, [r1, #0]
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
   84dc4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84dc8:	f04f 0200 	mov.w	r2, #0
   84dcc:	f2cc 0260 	movt	r2, #49248	; 0xc060
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
   84dd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84dd2:	4213      	tst	r3, r2
   84dd4:	d012      	beq.n	84dfc <hsmci_wait_end_of_write_blocks+0x5c>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   84dd6:	f244 7039 	movw	r0, #18233	; 0x4739
   84dda:	f2c0 0008 	movt	r0, #8
   84dde:	4780      	blx	r0
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84de0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   84de4:	f2c4 000c 	movt	r0, #16396	; 0x400c
   84de8:	f04f 0100 	mov.w	r1, #0
   84dec:	f245 2219 	movw	r2, #21017	; 0x5219
   84df0:	f2c0 0208 	movt	r2, #8
   84df4:	4790      	blx	r2
			return false;
   84df6:	f04f 0000 	mov.w	r0, #0
   84dfa:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   84dfc:	4284      	cmp	r4, r0
   84dfe:	d902      	bls.n	84e06 <hsmci_wait_end_of_write_blocks+0x66>
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
   84e00:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   84e04:	d105      	bne.n	84e12 <hsmci_wait_end_of_write_blocks+0x72>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
   84e06:	f013 0f20 	tst.w	r3, #32
   84e0a:	d0e1      	beq.n	84dd0 <hsmci_wait_end_of_write_blocks+0x30>
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	return true;
   84e0c:	f04f 0001 	mov.w	r0, #1
   84e10:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
				return true;
   84e12:	f04f 0001 	mov.w	r0, #1
	} while (!(sr & HSMCI_SR_NOTBUSY));
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	return true;

}
   84e16:	bd10      	pop	{r4, pc}

00084e18 <cdc_send_line>:
volatile Bool is_new_received_cdc_char = false;
volatile Bool is_terminal_open = false;


iram_size_t cdc_send_line(char* line_to_send)
{
   84e18:	b510      	push	{r4, lr}
   84e1a:	4604      	mov	r4, r0
	if(is_terminal_open)
   84e1c:	f640 436c 	movw	r3, #3180	; 0xc6c
   84e20:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84e24:	7818      	ldrb	r0, [r3, #0]
   84e26:	b168      	cbz	r0, 84e44 <cdc_send_line+0x2c>
		return udi_cdc_write_buf((const void*) line_to_send, strlen(line_to_send));
   84e28:	4620      	mov	r0, r4
   84e2a:	f64a 52b1 	movw	r2, #44465	; 0xadb1
   84e2e:	f2c0 0208 	movt	r2, #8
   84e32:	4790      	blx	r2
   84e34:	4601      	mov	r1, r0
   84e36:	4620      	mov	r0, r4
   84e38:	f645 530d 	movw	r3, #23821	; 0x5d0d
   84e3c:	f2c0 0308 	movt	r3, #8
   84e40:	4798      	blx	r3
   84e42:	bd10      	pop	{r4, pc}
	else
		return strlen(line_to_send);
   84e44:	4620      	mov	r0, r4
   84e46:	f64a 51b1 	movw	r1, #44465	; 0xadb1
   84e4a:	f2c0 0108 	movt	r1, #8
   84e4e:	4788      	blx	r1
}
   84e50:	bd10      	pop	{r4, pc}
   84e52:	bf00      	nop

00084e54 <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
	if (b_enable) 
   84e54:	b139      	cbz	r1, 84e66 <main_cdc_set_dtr+0x12>
		is_terminal_open = true;
   84e56:	f640 406c 	movw	r0, #3180	; 0xc6c
   84e5a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84e5e:	f04f 0101 	mov.w	r1, #1
   84e62:	7001      	strb	r1, [r0, #0]
   84e64:	4770      	bx	lr
	else
		is_terminal_open = false;
   84e66:	f640 436c 	movw	r3, #3180	; 0xc6c
   84e6a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84e6e:	f04f 0200 	mov.w	r2, #0
   84e72:	701a      	strb	r2, [r3, #0]
   84e74:	4770      	bx	lr
   84e76:	bf00      	nop

00084e78 <uart_rx_notify>:
}

void uart_rx_notify(uint8_t port)
{
	UNUSED(port);
	is_new_received_cdc_char = true;
   84e78:	f640 436d 	movw	r3, #3181	; 0xc6d
   84e7c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84e80:	f04f 0201 	mov.w	r2, #1
   84e84:	701a      	strb	r2, [r3, #0]
   84e86:	4770      	bx	lr

00084e88 <main_suspend_action>:
	cpu_irq_restore(flags);	
	
	return true;
}

void main_suspend_action(void){}
   84e88:	4770      	bx	lr
   84e8a:	bf00      	nop

00084e8c <main_resume_action>:
void main_resume_action(void){}
   84e8c:	4770      	bx	lr
   84e8e:	bf00      	nop

00084e90 <main_sof_action>:
void main_sof_action(void){}
   84e90:	4770      	bx	lr
   84e92:	bf00      	nop

00084e94 <SCPI_Write>:
uint16_t current_input_line_pointer = 0;
char current_input_line[LINE_BUFFER_SIZE];


size_t SCPI_Write(scpi_t * context, const char * data, size_t len) 
{
   84e94:	b530      	push	{r4, r5, lr}
   84e96:	b083      	sub	sp, #12
   84e98:	4613      	mov	r3, r2
	(void) context;
	printf("%.*s", len, data);
   84e9a:	f641 3420 	movw	r4, #6944	; 0x1b20
   84e9e:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84ea2:	9100      	str	r1, [sp, #0]
   84ea4:	4620      	mov	r0, r4
   84ea6:	f04f 0164 	mov.w	r1, #100	; 0x64
   84eaa:	f64d 42d0 	movw	r2, #56528	; 0xdcd0
   84eae:	f2c0 0208 	movt	r2, #8
   84eb2:	f64a 554b 	movw	r5, #44363	; 0xad4b
   84eb6:	f2c0 0508 	movt	r5, #8
   84eba:	47a8      	blx	r5
   84ebc:	4620      	mov	r0, r4
   84ebe:	f644 6319 	movw	r3, #19993	; 0x4e19
   84ec2:	f2c0 0308 	movt	r3, #8
   84ec6:	4798      	blx	r3
	return SCPI_RES_OK;    
}
   84ec8:	f04f 0001 	mov.w	r0, #1
   84ecc:	b003      	add	sp, #12
   84ece:	bd30      	pop	{r4, r5, pc}

00084ed0 <SCPI_Flush>:

scpi_result_t SCPI_Flush(scpi_t * context) 
{
	return SCPI_RES_OK;
}
   84ed0:	f04f 0001 	mov.w	r0, #1
   84ed4:	4770      	bx	lr
   84ed6:	bf00      	nop

00084ed8 <SCPI_Error>:

int SCPI_Error(scpi_t * context, int_fast16_t err) 
{
   84ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84edc:	b083      	sub	sp, #12
   84ede:	4605      	mov	r5, r0
   84ee0:	4688      	mov	r8, r1
	uint16_t i = 0;
	
	#define ONLY_OUTPUT_READ_ERRORS
	#ifdef ONLY_OUTPUT_READ_ERRORS
		if (context->cmd_error == 1)
   84ee2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   84ee6:	2b00      	cmp	r3, #0
   84ee8:	d030      	beq.n	84f4c <SCPI_Error+0x74>
		{
			// If it's an unknown command 
			while(i < (context->buffer.position))
   84eea:	6880      	ldr	r0, [r0, #8]
   84eec:	b370      	cbz	r0, 84f4c <SCPI_Error+0x74>
   84eee:	f04f 0600 	mov.w	r6, #0
   84ef2:	4634      	mov	r4, r6
			{
				if (context->buffer.data[i] == '?')
				{
					printf("**ERROR: %d, \"%s\"\r\n", (int32_t) err, SCPI_ErrorTranslate(err));
   84ef4:	f242 4bb1 	movw	fp, #9393	; 0x24b1
   84ef8:	465f      	mov	r7, fp
   84efa:	f2c0 0708 	movt	r7, #8
   84efe:	f641 3920 	movw	r9, #6944	; 0x1b20
   84f02:	f2c2 0907 	movt	r9, #8199	; 0x2007
   84f06:	f64d 4ad8 	movw	sl, #56536	; 0xdcd8
   84f0a:	f2c0 0a08 	movt	sl, #8
		if (context->cmd_error == 1)
		{
			// If it's an unknown command 
			while(i < (context->buffer.position))
			{
				if (context->buffer.data[i] == '?')
   84f0e:	68e9      	ldr	r1, [r5, #12]
   84f10:	5d8a      	ldrb	r2, [r1, r6]
   84f12:	2a3f      	cmp	r2, #63	; 0x3f
   84f14:	d113      	bne.n	84f3e <SCPI_Error+0x66>
				{
					printf("**ERROR: %d, \"%s\"\r\n", (int32_t) err, SCPI_ErrorTranslate(err));
   84f16:	fa0f f088 	sxth.w	r0, r8
   84f1a:	47b8      	blx	r7
   84f1c:	9000      	str	r0, [sp, #0]
   84f1e:	4648      	mov	r0, r9
   84f20:	f04f 0164 	mov.w	r1, #100	; 0x64
   84f24:	4652      	mov	r2, sl
   84f26:	4643      	mov	r3, r8
   84f28:	f64a 564b 	movw	r6, #44363	; 0xad4b
   84f2c:	f2c0 0608 	movt	r6, #8
   84f30:	47b0      	blx	r6
   84f32:	4648      	mov	r0, r9
   84f34:	f644 6319 	movw	r3, #19993	; 0x4e19
   84f38:	f2c0 0308 	movt	r3, #8
   84f3c:	4798      	blx	r3
				}
				i++;
   84f3e:	f104 0401 	add.w	r4, r4, #1
   84f42:	b2a4      	uxth	r4, r4
	#define ONLY_OUTPUT_READ_ERRORS
	#ifdef ONLY_OUTPUT_READ_ERRORS
		if (context->cmd_error == 1)
		{
			// If it's an unknown command 
			while(i < (context->buffer.position))
   84f44:	4626      	mov	r6, r4
   84f46:	68a8      	ldr	r0, [r5, #8]
   84f48:	4284      	cmp	r4, r0
   84f4a:	d3e0      	bcc.n	84f0e <SCPI_Error+0x36>
		}
	#endif
	//(void) context;
	//printf("**ERROR: %d, \"%s\"\r\n", (int32_t) err, SCPI_ErrorTranslate(err));
	return 0;
}
   84f4c:	f04f 0000 	mov.w	r0, #0
   84f50:	b003      	add	sp, #12
   84f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84f56:	bf00      	nop

00084f58 <SCPI_Control>:

scpi_result_t SCPI_Control(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) 
{
   84f58:	b530      	push	{r4, r5, lr}
   84f5a:	b083      	sub	sp, #12
   84f5c:	460b      	mov	r3, r1
   84f5e:	4614      	mov	r4, r2
	if (SCPI_CTRL_SRQ == ctrl) 
   84f60:	2901      	cmp	r1, #1
   84f62:	d118      	bne.n	84f96 <SCPI_Control+0x3e>
	{
		printf("**SRQ: 0x%X (%d)\r\n", val, val);
   84f64:	f641 3520 	movw	r5, #6944	; 0x1b20
   84f68:	f2c2 0507 	movt	r5, #8199	; 0x2007
   84f6c:	9200      	str	r2, [sp, #0]
   84f6e:	4628      	mov	r0, r5
   84f70:	f04f 0164 	mov.w	r1, #100	; 0x64
   84f74:	f64d 42ec 	movw	r2, #56556	; 0xdcec
   84f78:	f2c0 0208 	movt	r2, #8
   84f7c:	4623      	mov	r3, r4
   84f7e:	f64a 544b 	movw	r4, #44363	; 0xad4b
   84f82:	f2c0 0408 	movt	r4, #8
   84f86:	47a0      	blx	r4
   84f88:	4628      	mov	r0, r5
   84f8a:	f644 6119 	movw	r1, #19993	; 0x4e19
   84f8e:	f2c0 0108 	movt	r1, #8
   84f92:	4788      	blx	r1
   84f94:	e017      	b.n	84fc6 <SCPI_Control+0x6e>
	}
	else 
	{
		printf("**CTRL %02x: 0x%X (%d)\r\n", ctrl, val, val);
   84f96:	f641 3520 	movw	r5, #6944	; 0x1b20
   84f9a:	f2c2 0507 	movt	r5, #8199	; 0x2007
   84f9e:	9200      	str	r2, [sp, #0]
   84fa0:	9201      	str	r2, [sp, #4]
   84fa2:	4628      	mov	r0, r5
   84fa4:	f04f 0164 	mov.w	r1, #100	; 0x64
   84fa8:	f64d 5200 	movw	r2, #56576	; 0xdd00
   84fac:	f2c0 0208 	movt	r2, #8
   84fb0:	f64a 544b 	movw	r4, #44363	; 0xad4b
   84fb4:	f2c0 0408 	movt	r4, #8
   84fb8:	47a0      	blx	r4
   84fba:	4628      	mov	r0, r5
   84fbc:	f644 6319 	movw	r3, #19993	; 0x4e19
   84fc0:	f2c0 0308 	movt	r3, #8
   84fc4:	4798      	blx	r3
	}
	return SCPI_RES_OK;
}
   84fc6:	f04f 0001 	mov.w	r0, #1
   84fca:	b003      	add	sp, #12
   84fcc:	bd30      	pop	{r4, r5, pc}
   84fce:	bf00      	nop

00084fd0 <SCPI_Test>:

scpi_result_t SCPI_Test(scpi_t * context) 
{
   84fd0:	b508      	push	{r3, lr}
	printf("**Test\r\n");
   84fd2:	f641 3220 	movw	r2, #6944	; 0x1b20
   84fd6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84fda:	f64d 531c 	movw	r3, #56604	; 0xdd1c
   84fde:	f2c0 0308 	movt	r3, #8
   84fe2:	cb03      	ldmia	r3!, {r0, r1}
   84fe4:	6010      	str	r0, [r2, #0]
   84fe6:	6051      	str	r1, [r2, #4]
   84fe8:	7818      	ldrb	r0, [r3, #0]
   84fea:	7210      	strb	r0, [r2, #8]
   84fec:	4610      	mov	r0, r2
   84fee:	f644 6119 	movw	r1, #19993	; 0x4e19
   84ff2:	f2c0 0108 	movt	r1, #8
   84ff6:	4788      	blx	r1
	return SCPI_RES_OK;
}
   84ff8:	f04f 0001 	mov.w	r0, #1
   84ffc:	bd08      	pop	{r3, pc}
   84ffe:	bf00      	nop

00085000 <SCPI_Reset>:

scpi_result_t SCPI_Reset(scpi_t * context) 
{
   85000:	b508      	push	{r3, lr}
	printf("**Reset\r\n");
   85002:	f641 3220 	movw	r2, #6944	; 0x1b20
   85006:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8500a:	f64d 5328 	movw	r3, #56616	; 0xdd28
   8500e:	f2c0 0308 	movt	r3, #8
   85012:	cb03      	ldmia	r3!, {r0, r1}
   85014:	6010      	str	r0, [r2, #0]
   85016:	6051      	str	r1, [r2, #4]
   85018:	8818      	ldrh	r0, [r3, #0]
   8501a:	8110      	strh	r0, [r2, #8]
   8501c:	4610      	mov	r0, r2
   8501e:	f644 6119 	movw	r1, #19993	; 0x4e19
   85022:	f2c0 0108 	movt	r1, #8
   85026:	4788      	blx	r1
	return SCPI_RES_OK;
}
   85028:	f04f 0001 	mov.w	r0, #1
   8502c:	bd08      	pop	{r3, pc}
   8502e:	bf00      	nop

00085030 <console_init>:

void console_init(void)
{
   85030:	b508      	push	{r3, lr}
	SCPI_Init(&scpi_context);
   85032:	f240 0030 	movw	r0, #48	; 0x30
   85036:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8503a:	f642 6305 	movw	r3, #11781	; 0x2e05
   8503e:	f2c0 0308 	movt	r3, #8
   85042:	4798      	blx	r3
   85044:	bd08      	pop	{r3, pc}
   85046:	bf00      	nop

00085048 <console_process>:
}

void console_process(void)
{
   85048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	iram_size_t data_remaining = 0;
	uint8_t temp_buffer[10];
	
	if(udi_cdc_get_nb_received_data() == 0)
   8504c:	f645 0371 	movw	r3, #22641	; 0x5871
   85050:	f2c0 0308 	movt	r3, #8
   85054:	4798      	blx	r3
   85056:	2800      	cmp	r0, #0
   85058:	d040      	beq.n	850dc <console_process+0x94>
		return;
	
	do 
	{
		data_remaining = udi_cdc_read_buf(current_input_line+current_input_line_pointer, 1);
   8505a:	f640 446e 	movw	r4, #3182	; 0xc6e
   8505e:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85062:	f641 3584 	movw	r5, #7044	; 0x1b84
   85066:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8506a:	f04f 0601 	mov.w	r6, #1
   8506e:	f645 3a85 	movw	sl, #23429	; 0x5b85
   85072:	f2c0 0a08 	movt	sl, #8
		//udi_cdc_putc(current_input_line[current_input_line_pointer]);
		SCPI_Input(&scpi_context, current_input_line+current_input_line_pointer, 1);
   85076:	f240 0930 	movw	r9, #48	; 0x30
   8507a:	f2c2 0907 	movt	r9, #8199	; 0x2007
   8507e:	f642 6819 	movw	r8, #11801	; 0x2e19
   85082:	f2c0 0808 	movt	r8, #8
	if(udi_cdc_get_nb_received_data() == 0)
		return;
	
	do 
	{
		data_remaining = udi_cdc_read_buf(current_input_line+current_input_line_pointer, 1);
   85086:	8820      	ldrh	r0, [r4, #0]
   85088:	1940      	adds	r0, r0, r5
   8508a:	4631      	mov	r1, r6
   8508c:	47d0      	blx	sl
   8508e:	4607      	mov	r7, r0
		//udi_cdc_putc(current_input_line[current_input_line_pointer]);
		SCPI_Input(&scpi_context, current_input_line+current_input_line_pointer, 1);
   85090:	8821      	ldrh	r1, [r4, #0]
   85092:	4648      	mov	r0, r9
   85094:	1949      	adds	r1, r1, r5
   85096:	4632      	mov	r2, r6
   85098:	47c0      	blx	r8
		current_input_line_pointer++;
   8509a:	8822      	ldrh	r2, [r4, #0]
   8509c:	f102 0201 	add.w	r2, r2, #1
   850a0:	b293      	uxth	r3, r2
   850a2:	8023      	strh	r3, [r4, #0]
		
		if((current_input_line[current_input_line_pointer-1] == 0x0D) || (current_input_line[current_input_line_pointer-1] == 0x0A))
   850a4:	18e8      	adds	r0, r5, r3
   850a6:	f810 1c01 	ldrb.w	r1, [r0, #-1]
   850aa:	290d      	cmp	r1, #13
   850ac:	d001      	beq.n	850b2 <console_process+0x6a>
   850ae:	290a      	cmp	r1, #10
   850b0:	d102      	bne.n	850b8 <console_process+0x70>
		{
			current_input_line_pointer = 0;
   850b2:	f04f 0200 	mov.w	r2, #0
   850b6:	8022      	strh	r2, [r4, #0]
			// should we do another parsing rather than scpi?
		}
	} 
	while((data_remaining > 0) && (current_input_line_pointer < LINE_BUFFER_SIZE));
   850b8:	b117      	cbz	r7, 850c0 <console_process+0x78>
   850ba:	8823      	ldrh	r3, [r4, #0]
   850bc:	2bc7      	cmp	r3, #199	; 0xc7
   850be:	d9e2      	bls.n	85086 <console_process+0x3e>
	
	if(current_input_line_pointer == LINE_BUFFER_SIZE)
   850c0:	f640 406e 	movw	r0, #3182	; 0xc6e
   850c4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   850c8:	8801      	ldrh	r1, [r0, #0]
   850ca:	29c8      	cmp	r1, #200	; 0xc8
   850cc:	d106      	bne.n	850dc <console_process+0x94>
	{
		// We should return a message or smth...
		current_input_line_pointer = 0;
   850ce:	f640 436e 	movw	r3, #3182	; 0xc6e
   850d2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   850d6:	f04f 0200 	mov.w	r2, #0
   850da:	801a      	strh	r2, [r3, #0]
   850dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000850e0 <main_extra_string>:
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   850e0:	f641 4354 	movw	r3, #7252	; 0x1c54
   850e4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   850e8:	7898      	ldrb	r0, [r3, #2]
   850ea:	2804      	cmp	r0, #4
   850ec:	d002      	beq.n	850f4 <main_extra_string+0x14>
   850ee:	2805      	cmp	r0, #5
   850f0:	d13b      	bne.n	8516a <main_extra_string+0x8a>
   850f2:	e004      	b.n	850fe <main_extra_string+0x1e>
	case UDI_CDC_IAD_STRING_ID:
		str_lgt = sizeof(udi_cdc_name)-1;
		str = udi_cdc_name;
   850f4:	f240 02b4 	movw	r2, #180	; 0xb4
   850f8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   850fc:	e003      	b.n	85106 <main_extra_string+0x26>
		break;
	case UDI_MSC_STRING_ID:
		str_lgt = sizeof(udi_msc_name)-1;
		str = udi_msc_name;
   850fe:	f240 0288 	movw	r2, #136	; 0x88
   85102:	f2c2 0207 	movt	r2, #8199	; 0x2007
		return false;
	}

	if (str_lgt!=0) {
		for( i=0; i<str_lgt; i++) {
			extra_strings_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   85106:	f240 0398 	movw	r3, #152	; 0x98
   8510a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8510e:	7811      	ldrb	r1, [r2, #0]
   85110:	8059      	strh	r1, [r3, #2]
   85112:	7850      	ldrb	r0, [r2, #1]
   85114:	8098      	strh	r0, [r3, #4]
   85116:	7891      	ldrb	r1, [r2, #2]
   85118:	80d9      	strh	r1, [r3, #6]
   8511a:	78d0      	ldrb	r0, [r2, #3]
   8511c:	8118      	strh	r0, [r3, #8]
   8511e:	7911      	ldrb	r1, [r2, #4]
   85120:	8159      	strh	r1, [r3, #10]
   85122:	7950      	ldrb	r0, [r2, #5]
   85124:	8198      	strh	r0, [r3, #12]
   85126:	7991      	ldrb	r1, [r2, #6]
   85128:	81d9      	strh	r1, [r3, #14]
   8512a:	79d0      	ldrb	r0, [r2, #7]
   8512c:	8218      	strh	r0, [r3, #16]
   8512e:	7a11      	ldrb	r1, [r2, #8]
   85130:	8259      	strh	r1, [r3, #18]
   85132:	7a50      	ldrb	r0, [r2, #9]
   85134:	8298      	strh	r0, [r3, #20]
   85136:	7a91      	ldrb	r1, [r2, #10]
   85138:	82d9      	strh	r1, [r3, #22]
   8513a:	7ad0      	ldrb	r0, [r2, #11]
   8513c:	8318      	strh	r0, [r3, #24]
   8513e:	7b12      	ldrb	r2, [r2, #12]
   85140:	835a      	strh	r2, [r3, #26]
		}
		extra_strings_desc.header.bLength = 2+ (str_lgt)*2;
   85142:	f04f 011c 	mov.w	r1, #28
   85146:	7019      	strb	r1, [r3, #0]
		udd_g_ctrlreq.payload_size = extra_strings_desc.header.bLength;
   85148:	f641 4054 	movw	r0, #7252	; 0x1c54
   8514c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85150:	8181      	strh	r1, [r0, #12]
		udd_g_ctrlreq.payload = (uint8_t *) &extra_strings_desc;
   85152:	6083      	str	r3, [r0, #8]
	}

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength) {
   85154:	88c3      	ldrh	r3, [r0, #6]
   85156:	2b1b      	cmp	r3, #27
   85158:	d80a      	bhi.n	85170 <main_extra_string+0x90>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   8515a:	f641 4254 	movw	r2, #7252	; 0x1c54
   8515e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85162:	8193      	strh	r3, [r2, #12]
	}
	return true;
   85164:	f04f 0001 	mov.w	r0, #1
   85168:	4770      	bx	lr
	case UDI_MSC_STRING_ID:
		str_lgt = sizeof(udi_msc_name)-1;
		str = udi_msc_name;
		break;
	default:
		return false;
   8516a:	f04f 0000 	mov.w	r0, #0
   8516e:	4770      	bx	lr

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
   85170:	f04f 0001 	mov.w	r0, #1
   85174:	4770      	bx	lr
   85176:	bf00      	nop

00085178 <HardFault_Handler>:
         * Get the appropriate stack pointer, depending on our mode,
         * and use it as the parameter to the C handler. This function
         * will never return
         */

        __asm(  ".syntax unified\n"
   85178:	2004      	movs	r0, #4
   8517a:	4671      	mov	r1, lr
   8517c:	4208      	tst	r0, r1
   8517e:	f000 8004 	beq.w	8518a <_MSP>
   85182:	f3ef 8009 	mrs	r0, PSP
   85186:	f000 b805 	b.w	85194 <HardFault_HandlerC>

0008518a <_MSP>:
   8518a:	f3ef 8008 	mrs	r0, MSP
   8518e:	f000 b801 	b.w	85194 <HardFault_HandlerC>
   85192:	bf00      	nop

00085194 <HardFault_HandlerC>:
 * into local variables for ease of reading.
 * We then read the various Fault Status and Address Registers to help decode
 * cause of the fault.
 * The function ends with a BKPT instruction to force control back into the debugger
 */
void HardFault_HandlerC(unsigned long *hardfault_args){
   85194:	b08e      	sub	sp, #56	; 0x38
        volatile unsigned long _DFSR ;
        volatile unsigned long _AFSR ;
        volatile unsigned long _BFAR ;
        volatile unsigned long _MMAR ;

        stacked_r0 = ((unsigned long)hardfault_args[0]) ;
   85196:	6803      	ldr	r3, [r0, #0]
   85198:	930d      	str	r3, [sp, #52]	; 0x34
        stacked_r1 = ((unsigned long)hardfault_args[1]) ;
   8519a:	6841      	ldr	r1, [r0, #4]
   8519c:	910c      	str	r1, [sp, #48]	; 0x30
        stacked_r2 = ((unsigned long)hardfault_args[2]) ;
   8519e:	6882      	ldr	r2, [r0, #8]
   851a0:	920b      	str	r2, [sp, #44]	; 0x2c
        stacked_r3 = ((unsigned long)hardfault_args[3]) ;
   851a2:	68c3      	ldr	r3, [r0, #12]
   851a4:	930a      	str	r3, [sp, #40]	; 0x28
        stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   851a6:	6901      	ldr	r1, [r0, #16]
   851a8:	9109      	str	r1, [sp, #36]	; 0x24
        stacked_lr = ((unsigned long)hardfault_args[5]) ;
   851aa:	6942      	ldr	r2, [r0, #20]
   851ac:	9208      	str	r2, [sp, #32]
        stacked_pc = ((unsigned long)hardfault_args[6]) ;
   851ae:	6983      	ldr	r3, [r0, #24]
   851b0:	9307      	str	r3, [sp, #28]
        stacked_psr = ((unsigned long)hardfault_args[7]) ;
   851b2:	69c0      	ldr	r0, [r0, #28]
   851b4:	9006      	str	r0, [sp, #24]

        // Configurable Fault Status Register
        // Consists of MMSR, BFSR and UFSR
        _CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;   
   851b6:	f64e 5128 	movw	r1, #60712	; 0xed28
   851ba:	f2ce 0100 	movt	r1, #57344	; 0xe000
   851be:	680a      	ldr	r2, [r1, #0]
   851c0:	9205      	str	r2, [sp, #20]
                                                                                        
        // Hard Fault Status Register
        _HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   851c2:	f64e 532c 	movw	r3, #60716	; 0xed2c
   851c6:	f2ce 0300 	movt	r3, #57344	; 0xe000
   851ca:	6818      	ldr	r0, [r3, #0]
   851cc:	9004      	str	r0, [sp, #16]

        // Debug Fault Status Register
        _DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   851ce:	f64e 5130 	movw	r1, #60720	; 0xed30
   851d2:	f2ce 0100 	movt	r1, #57344	; 0xe000
   851d6:	680a      	ldr	r2, [r1, #0]
   851d8:	9203      	str	r2, [sp, #12]

        // Auxiliary Fault Status Register
        _AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   851da:	f64e 533c 	movw	r3, #60732	; 0xed3c
   851de:	f2ce 0300 	movt	r3, #57344	; 0xe000
   851e2:	6818      	ldr	r0, [r3, #0]
   851e4:	9002      	str	r0, [sp, #8]

        // Read the Fault Address Registers. These may not contain valid values.
        // Check BFARVALID/MMARVALID to see if they are valid values
        // MemManage Fault Address Register
        _MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   851e6:	f64e 5134 	movw	r1, #60724	; 0xed34
   851ea:	f2ce 0100 	movt	r1, #57344	; 0xe000
   851ee:	680a      	ldr	r2, [r1, #0]
   851f0:	9200      	str	r2, [sp, #0]
        // Bus Fault Address Register
        _BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   851f2:	f64e 5338 	movw	r3, #60728	; 0xed38
   851f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
   851fa:	6818      	ldr	r0, [r3, #0]
   851fc:	9001      	str	r0, [sp, #4]

        __asm("BKPT #0\n") ; // Break into the debugger
   851fe:	be00      	bkpt	0x0000
   85200:	e7fe      	b.n	85200 <HardFault_HandlerC+0x6c>
   85202:	bf00      	nop

00085204 <dmac_enable>:
 *
 * \param p_dmac  Pointer to a DMAC peripheral instance.
 */
void dmac_enable(Dmac *p_dmac)
{
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   85204:	f04f 0301 	mov.w	r3, #1
   85208:	6043      	str	r3, [r0, #4]
   8520a:	4770      	bx	lr

0008520c <dmac_channel_enable>:
 * \param p_dmac Pointer to a DMAC peripheral instance.
 * \param ul_num Channel number.
 */
void dmac_channel_enable(Dmac *p_dmac, uint32_t ul_num)
{
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   8520c:	f04f 0301 	mov.w	r3, #1
   85210:	fa03 f101 	lsl.w	r1, r3, r1
   85214:	6281      	str	r1, [r0, #40]	; 0x28
   85216:	4770      	bx	lr

00085218 <dmac_channel_disable>:
 * \param p_dmac Pointer to a DMAC peripheral instance.
 * \param ul_num Channel number.
 */
void dmac_channel_disable(Dmac *p_dmac, uint32_t ul_num)
{
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   85218:	f04f 0301 	mov.w	r3, #1
   8521c:	fa03 f101 	lsl.w	r1, r3, r1
   85220:	62c1      	str	r1, [r0, #44]	; 0x2c
   85222:	4770      	bx	lr

00085224 <dmac_channel_set_source_addr>:
 * \note This register must be aligned with the source transfer width.
 */
void dmac_channel_set_source_addr(Dmac *p_dmac,
		uint32_t ul_num, uint32_t ul_addr)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   85224:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   85228:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   8522c:	63c2      	str	r2, [r0, #60]	; 0x3c
   8522e:	4770      	bx	lr

00085230 <dmac_channel_set_destination_addr>:
 * \note This register must be aligned with the source transfer width.
 */
void dmac_channel_set_destination_addr(Dmac *p_dmac, uint32_t ul_num,
		uint32_t ul_addr)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   85230:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   85234:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   85238:	6402      	str	r2, [r0, #64]	; 0x40
   8523a:	4770      	bx	lr

0008523c <dmac_channel_set_descriptor_addr>:
 * \param ul_desc     Descriptor address.
 */
void dmac_channel_set_descriptor_addr(Dmac *p_dmac,
		uint32_t ul_num, uint32_t ul_desc)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   8523c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   85240:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   85244:	6442      	str	r2, [r0, #68]	; 0x44
   85246:	4770      	bx	lr

00085248 <dmac_channel_set_ctrlA>:
 * \param ul_num      Channel number.
 * \param ul_ctrlA    Configuration of control A register.
 */
void dmac_channel_set_ctrlA(Dmac *p_dmac, uint32_t ul_num, uint32_t ul_ctrlA)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   85248:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8524c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   85250:	6482      	str	r2, [r0, #72]	; 0x48
   85252:	4770      	bx	lr

00085254 <dmac_channel_set_ctrlB>:
 * \param ul_num      Channel number.
 * \param ul_ctrlB    Configuration of control B register.
 */
void dmac_channel_set_ctrlB(Dmac *p_dmac, uint32_t ul_num, uint32_t ul_ctrlB)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   85254:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   85258:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   8525c:	64c2      	str	r2, [r0, #76]	; 0x4c
   8525e:	4770      	bx	lr

00085260 <dmac_channel_set_configuration>:
 * \param ul_cfg      Configuration of CFG register.
 */
void dmac_channel_set_configuration(Dmac *p_dmac, uint32_t ul_num,
		uint32_t ul_cfg)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   85260:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   85264:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   85268:	6502      	str	r2, [r0, #80]	; 0x50
   8526a:	4770      	bx	lr

0008526c <dmac_channel_single_buf_transfer_init>:
 * \param ul_num      Channel number.
 * \param p_desc      Pointer to a transfer descriptor.
 */
void dmac_channel_single_buf_transfer_init(Dmac *p_dmac,
		uint32_t ul_num, dma_transfer_descriptor_t *p_desc)
{
   8526c:	b570      	push	{r4, r5, r6, lr}
   8526e:	4604      	mov	r4, r0
   85270:	460e      	mov	r6, r1
   85272:	4615      	mov	r5, r2
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   85274:	6a43      	ldr	r3, [r0, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   85276:	6812      	ldr	r2, [r2, #0]
   85278:	f245 2325 	movw	r3, #21029	; 0x5225
   8527c:	f2c0 0308 	movt	r3, #8
   85280:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   85282:	4620      	mov	r0, r4
   85284:	4631      	mov	r1, r6
   85286:	686a      	ldr	r2, [r5, #4]
   85288:	f245 2331 	movw	r3, #21041	; 0x5231
   8528c:	f2c0 0308 	movt	r3, #8
   85290:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   85292:	4620      	mov	r0, r4
   85294:	4631      	mov	r1, r6
   85296:	f04f 0200 	mov.w	r2, #0
   8529a:	f245 233d 	movw	r3, #21053	; 0x523d
   8529e:	f2c0 0308 	movt	r3, #8
   852a2:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   852a4:	4620      	mov	r0, r4
   852a6:	4631      	mov	r1, r6
   852a8:	68aa      	ldr	r2, [r5, #8]
   852aa:	f245 2349 	movw	r3, #21065	; 0x5249
   852ae:	f2c0 0308 	movt	r3, #8
   852b2:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   852b4:	4620      	mov	r0, r4
   852b6:	4631      	mov	r1, r6
   852b8:	68ea      	ldr	r2, [r5, #12]
   852ba:	f245 2355 	movw	r3, #21077	; 0x5255
   852be:	f2c0 0308 	movt	r3, #8
   852c2:	4798      	blx	r3
   852c4:	bd70      	pop	{r4, r5, r6, pc}
   852c6:	bf00      	nop

000852c8 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   852c8:	b508      	push	{r3, lr}
	}
#endif

	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_UPLL) {

		pmc_enable_upll_clock();
   852ca:	f647 139d 	movw	r3, #31133	; 0x799d
   852ce:	f2c0 0308 	movt	r3, #8
   852d2:	4798      	blx	r3
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
   852d4:	f04f 0000 	mov.w	r0, #0
   852d8:	f647 2141 	movw	r1, #31297	; 0x7a41
   852dc:	f2c0 0108 	movt	r1, #8
   852e0:	4788      	blx	r1
		pmc_enable_udpck();
   852e2:	f647 2059 	movw	r0, #31321	; 0x7a59
   852e6:	f2c0 0008 	movt	r0, #8
   852ea:	4780      	blx	r0
   852ec:	bd08      	pop	{r3, pc}
   852ee:	bf00      	nop

000852f0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   852f0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   852f2:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   852f6:	f2c0 5001 	movt	r0, #1281	; 0x501
   852fa:	f649 5341 	movw	r3, #40257	; 0x9d41
   852fe:	f2c0 0308 	movt	r3, #8
   85302:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   85304:	f04f 0000 	mov.w	r0, #0
   85308:	f04f 013e 	mov.w	r1, #62	; 0x3e
   8530c:	f647 02fd 	movw	r2, #30973	; 0x78fd
   85310:	f2c0 0208 	movt	r2, #8
   85314:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   85316:	f647 146d 	movw	r4, #31085	; 0x796d
   8531a:	f2c0 0408 	movt	r4, #8
   8531e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   85320:	2800      	cmp	r0, #0
   85322:	d0fc      	beq.n	8531e <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   85324:	f647 107d 	movw	r0, #31101	; 0x797d
   85328:	f2c0 0008 	movt	r0, #8
   8532c:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8532e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   85332:	f2c4 010e 	movt	r1, #16398	; 0x400e
   85336:	f643 7301 	movw	r3, #16129	; 0x3f01
   8533a:	f2c2 030d 	movt	r3, #8205	; 0x200d
   8533e:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   85340:	f647 148d 	movw	r4, #31117	; 0x798d
   85344:	f2c0 0408 	movt	r4, #8
   85348:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8534a:	2800      	cmp	r0, #0
   8534c:	d0fc      	beq.n	85348 <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8534e:	f04f 0010 	mov.w	r0, #16
   85352:	f647 025d 	movw	r2, #30813	; 0x785d
   85356:	f2c0 0208 	movt	r2, #8
   8535a:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8535c:	f649 3079 	movw	r0, #39801	; 0x9b79
   85360:	f2c0 0008 	movt	r0, #8
   85364:	4780      	blx	r0
   85366:	bd10      	pop	{r4, pc}

00085368 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
   85368:	f04f 0001 	mov.w	r0, #1
   8536c:	4770      	bx	lr
   8536e:	bf00      	nop

00085370 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   85370:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
   85372:	b928      	cbnz	r0, 85380 <mem_test_unit_ready+0x10>
   85374:	f244 530d 	movw	r3, #17677	; 0x450d
   85378:	f2c0 0308 	movt	r3, #8
   8537c:	4798      	blx	r3
   8537e:	bd08      	pop	{r3, pc}
   85380:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
   85384:	bd08      	pop	{r3, pc}
   85386:	bf00      	nop

00085388 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   85388:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
   8538a:	b930      	cbnz	r0, 8539a <mem_read_capacity+0x12>
   8538c:	4608      	mov	r0, r1
   8538e:	f244 5349 	movw	r3, #17737	; 0x4549
   85392:	f2c0 0308 	movt	r3, #8
   85396:	4798      	blx	r3
   85398:	bd08      	pop	{r3, pc}
   8539a:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
   8539e:	bd08      	pop	{r3, pc}

000853a0 <mem_unload>:

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
   853a0:	b910      	cbnz	r0, 853a8 <mem_unload+0x8>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
   853a2:	f081 0001 	eor.w	r0, r1, #1
   853a6:	4770      	bx	lr

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
   853a8:	f04f 0000 	mov.w	r0, #0
#endif

  Ctrl_access_unlock();

  return unloaded;
}
   853ac:	4770      	bx	lr
   853ae:	bf00      	nop

000853b0 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
   853b0:	b508      	push	{r3, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   853b2:	b928      	cbnz	r0, 853c0 <mem_wr_protect+0x10>
   853b4:	f244 536d 	movw	r3, #17773	; 0x456d
   853b8:	f2c0 0308 	movt	r3, #8
   853bc:	4798      	blx	r3
   853be:	bd08      	pop	{r3, pc}
   853c0:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
   853c4:	bd08      	pop	{r3, pc}
   853c6:	bf00      	nop

000853c8 <mem_removal>:


bool mem_removal(U8 lun)
{
   853c8:	b508      	push	{r3, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
   853ca:	b928      	cbnz	r0, 853d8 <mem_removal+0x10>
   853cc:	f244 5389 	movw	r3, #17801	; 0x4589
   853d0:	f2c0 0308 	movt	r3, #8
   853d4:	4798      	blx	r3
   853d6:	bd08      	pop	{r3, pc}
   853d8:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return removal;
}
   853dc:	bd08      	pop	{r3, pc}
   853de:	bf00      	nop

000853e0 <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
   853e0:	b920      	cbnz	r0, 853ec <mem_name+0xc>
   853e2:	f64d 5034 	movw	r0, #56628	; 0xdd34
   853e6:	f2c0 0008 	movt	r0, #8
   853ea:	4770      	bx	lr
   853ec:	f04f 0000 	mov.w	r0, #0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
   853f0:	4770      	bx	lr
   853f2:	bf00      	nop

000853f4 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
   853f4:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  status =
   853f6:	b938      	cbnz	r0, 85408 <memory_2_usb+0x14>
   853f8:	4608      	mov	r0, r1
   853fa:	4611      	mov	r1, r2
   853fc:	f244 6355 	movw	r3, #18005	; 0x4655
   85400:	f2c0 0308 	movt	r3, #8
   85404:	4798      	blx	r3
   85406:	bd08      	pop	{r3, pc}
   85408:	f04f 0001 	mov.w	r0, #1
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
   8540c:	bd08      	pop	{r3, pc}
   8540e:	bf00      	nop

00085410 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
   85410:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  status =
   85412:	b938      	cbnz	r0, 85424 <usb_2_memory+0x14>
   85414:	4608      	mov	r0, r1
   85416:	4611      	mov	r1, r2
   85418:	f244 7321 	movw	r3, #18209	; 0x4721
   8541c:	f2c0 0308 	movt	r3, #8
   85420:	4798      	blx	r3
   85422:	bd08      	pop	{r3, pc}
   85424:	f04f 0001 	mov.w	r0, #1
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
   85428:	bd08      	pop	{r3, pc}
   8542a:	bf00      	nop

0008542c <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   8542c:	f241 038c 	movw	r3, #4236	; 0x108c
   85430:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85434:	781a      	ldrb	r2, [r3, #0]
   85436:	f102 30ff 	add.w	r0, r2, #4294967295
   8543a:	b2c1      	uxtb	r1, r0
   8543c:	7019      	strb	r1, [r3, #0]
   8543e:	4770      	bx	lr

00085440 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   85440:	f04f 0000 	mov.w	r0, #0
   85444:	4770      	bx	lr
   85446:	bf00      	nop

00085448 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   85448:	f04f 0000 	mov.w	r0, #0
   8544c:	4770      	bx	lr
   8544e:	bf00      	nop

00085450 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
   85450:	4770      	bx	lr
   85452:	bf00      	nop

00085454 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
   85454:	b530      	push	{r4, r5, lr}
   85456:	b083      	sub	sp, #12

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   85458:	f241 03a0 	movw	r3, #4256	; 0x10a0
   8545c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85460:	7818      	ldrb	r0, [r3, #0]
   85462:	2800      	cmp	r0, #0
   85464:	f040 80df 	bne.w	85626 <udi_cdc_tx_send+0x1d2>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   85468:	f648 61d9 	movw	r1, #36569	; 0x8ed9
   8546c:	f2c0 0108 	movt	r1, #8
   85470:	4788      	blx	r1
   85472:	b160      	cbz	r0, 8548e <udi_cdc_tx_send+0x3a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   85474:	f241 0494 	movw	r4, #4244	; 0x1094
   85478:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8547c:	8824      	ldrh	r4, [r4, #0]
   8547e:	f648 703d 	movw	r0, #36669	; 0x8f3d
   85482:	f2c0 0008 	movt	r0, #8
   85486:	4780      	blx	r0
   85488:	4284      	cmp	r4, r0
   8548a:	d10d      	bne.n	854a8 <udi_cdc_tx_send+0x54>
   8548c:	e0cb      	b.n	85626 <udi_cdc_tx_send+0x1d2>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   8548e:	f241 0294 	movw	r2, #4244	; 0x1094
   85492:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85496:	8814      	ldrh	r4, [r2, #0]
   85498:	f648 732d 	movw	r3, #36653	; 0x8f2d
   8549c:	f2c0 0308 	movt	r3, #8
   854a0:	4798      	blx	r3
   854a2:	4284      	cmp	r4, r0
   854a4:	f000 80bf 	beq.w	85626 <udi_cdc_tx_send+0x1d2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   854a8:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   854ac:	f1d5 0501 	rsbs	r5, r5, #1
   854b0:	bf38      	it	cc
   854b2:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   854b4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   854b6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   854ba:	f240 2190 	movw	r1, #656	; 0x290
   854be:	f2c2 0107 	movt	r1, #8199	; 0x2007
   854c2:	f04f 0200 	mov.w	r2, #0
   854c6:	700a      	strb	r2, [r1, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   854c8:	f640 437c 	movw	r3, #3196	; 0xc7c
   854cc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   854d0:	781c      	ldrb	r4, [r3, #0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   854d2:	f640 4084 	movw	r0, #3204	; 0xc84
   854d6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   854da:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
   854de:	bb79      	cbnz	r1, 85540 <udi_cdc_tx_send+0xec>
		sof_zlp_counter++;
   854e0:	f640 4380 	movw	r3, #3200	; 0xc80
   854e4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   854e8:	881a      	ldrh	r2, [r3, #0]
   854ea:	f102 0201 	add.w	r2, r2, #1
   854ee:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   854f0:	f648 60d9 	movw	r0, #36569	; 0x8ed9
   854f4:	f2c0 0008 	movt	r0, #8
   854f8:	4780      	blx	r0
   854fa:	b930      	cbnz	r0, 8550a <udi_cdc_tx_send+0xb6>
   854fc:	f640 4180 	movw	r1, #3200	; 0xc80
   85500:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85504:	880b      	ldrh	r3, [r1, #0]
   85506:	2b63      	cmp	r3, #99	; 0x63
   85508:	d90d      	bls.n	85526 <udi_cdc_tx_send+0xd2>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   8550a:	f648 62d9 	movw	r2, #36569	; 0x8ed9
   8550e:	f2c0 0208 	movt	r2, #8
   85512:	4790      	blx	r2
   85514:	b1a0      	cbz	r0, 85540 <udi_cdc_tx_send+0xec>
   85516:	f640 4080 	movw	r0, #3200	; 0xc80
   8551a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8551e:	8801      	ldrh	r1, [r0, #0]
   85520:	f5b1 7f48 	cmp.w	r1, #800	; 0x320
   85524:	d20c      	bcs.n	85540 <udi_cdc_tx_send+0xec>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85526:	2d00      	cmp	r5, #0
   85528:	d07d      	beq.n	85626 <udi_cdc_tx_send+0x1d2>
		cpu_irq_enable();
   8552a:	f240 2390 	movw	r3, #656	; 0x290
   8552e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85532:	f04f 0201 	mov.w	r2, #1
   85536:	701a      	strb	r2, [r3, #0]
   85538:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8553c:	b662      	cpsie	i
   8553e:	e072      	b.n	85626 <udi_cdc_tx_send+0x1d2>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   85540:	f640 4380 	movw	r3, #3200	; 0xc80
   85544:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85548:	f04f 0200 	mov.w	r2, #0
   8554c:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   8554e:	f241 40b4 	movw	r0, #5300	; 0x14b4
   85552:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85556:	7801      	ldrb	r1, [r0, #0]
   85558:	b949      	cbnz	r1, 8556e <udi_cdc_tx_send+0x11a>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8555a:	4294      	cmp	r4, r2
   8555c:	bf14      	ite	ne
   8555e:	2200      	movne	r2, #0
   85560:	2201      	moveq	r2, #1
   85562:	f640 437c 	movw	r3, #3196	; 0xc7c
   85566:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8556a:	701a      	strb	r2, [r3, #0]
   8556c:	e003      	b.n	85576 <udi_cdc_tx_send+0x122>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   8556e:	f1d4 0401 	rsbs	r4, r4, #1
   85572:	bf38      	it	cc
   85574:	2400      	movcc	r4, #0
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   85576:	f241 00a0 	movw	r0, #4256	; 0x10a0
   8557a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8557e:	f04f 0201 	mov.w	r2, #1
   85582:	7002      	strb	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85584:	b13d      	cbz	r5, 85596 <udi_cdc_tx_send+0x142>
		cpu_irq_enable();
   85586:	f240 2590 	movw	r5, #656	; 0x290
   8558a:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8558e:	702a      	strb	r2, [r5, #0]
   85590:	f3bf 8f5f 	dmb	sy
   85594:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   85596:	4625      	mov	r5, r4
   85598:	f640 4184 	movw	r1, #3204	; 0xc84
   8559c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   855a0:	f831 4014 	ldrh.w	r4, [r1, r4, lsl #1]
   855a4:	f5b4 7400 	subs.w	r4, r4, #512	; 0x200
   855a8:	bf18      	it	ne
   855aa:	2401      	movne	r4, #1
	if (b_short_packet) {
   855ac:	b1dc      	cbz	r4, 855e6 <udi_cdc_tx_send+0x192>
		if (udd_is_high_speed()) {
   855ae:	f648 62d9 	movw	r2, #36569	; 0x8ed9
   855b2:	f2c0 0208 	movt	r2, #8
   855b6:	4790      	blx	r2
   855b8:	b150      	cbz	r0, 855d0 <udi_cdc_tx_send+0x17c>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   855ba:	f648 703d 	movw	r0, #36669	; 0x8f3d
   855be:	f2c0 0008 	movt	r0, #8
   855c2:	4780      	blx	r0
   855c4:	f241 0294 	movw	r2, #4244	; 0x1094
   855c8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   855cc:	8010      	strh	r0, [r2, #0]
   855ce:	e011      	b.n	855f4 <udi_cdc_tx_send+0x1a0>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   855d0:	f648 712d 	movw	r1, #36653	; 0x8f2d
   855d4:	f2c0 0108 	movt	r1, #8
   855d8:	4788      	blx	r1
   855da:	f241 0394 	movw	r3, #4244	; 0x1094
   855de:	f2c2 0307 	movt	r3, #8199	; 0x2007
   855e2:	8018      	strh	r0, [r3, #0]
   855e4:	e006      	b.n	855f4 <udi_cdc_tx_send+0x1a0>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   855e6:	f241 0394 	movw	r3, #4244	; 0x1094
   855ea:	f2c2 0307 	movt	r3, #8199	; 0x2007
   855ee:	f04f 0000 	mov.w	r0, #0
   855f2:	8018      	strh	r0, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   855f4:	f640 4184 	movw	r1, #3204	; 0xc84
   855f8:	f2c2 0107 	movt	r1, #8199	; 0x2007
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
   855fc:	f831 3015 	ldrh.w	r3, [r1, r5, lsl #1]
   85600:	f245 6041 	movw	r0, #22081	; 0x5641
   85604:	f2c0 0008 	movt	r0, #8
   85608:	9000      	str	r0, [sp, #0]
   8560a:	f04f 0084 	mov.w	r0, #132	; 0x84
   8560e:	4621      	mov	r1, r4
   85610:	f640 4488 	movw	r4, #3208	; 0xc88
   85614:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85618:	eb04 2245 	add.w	r2, r4, r5, lsl #9
   8561c:	f249 14f9 	movw	r4, #37369	; 0x91f9
   85620:	f2c0 0408 	movt	r4, #8
   85624:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   85626:	b003      	add	sp, #12
   85628:	bd30      	pop	{r4, r5, pc}
   8562a:	bf00      	nop

0008562c <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
   8562c:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
   8562e:	f04f 0000 	mov.w	r0, #0
   85632:	f245 4355 	movw	r3, #21589	; 0x5455
   85636:	f2c0 0308 	movt	r3, #8
   8563a:	4798      	blx	r3
   8563c:	bd08      	pop	{r3, pc}
   8563e:	bf00      	nop

00085640 <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   85640:	b508      	push	{r3, lr}
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   85642:	b9e8      	cbnz	r0, 85680 <udi_cdc_data_sent+0x40>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   85644:	f640 437c 	movw	r3, #3196	; 0xc7c
   85648:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8564c:	7819      	ldrb	r1, [r3, #0]
   8564e:	f1d1 0101 	rsbs	r1, r1, #1
   85652:	bf38      	it	cc
   85654:	2100      	movcc	r1, #0
   85656:	f640 4384 	movw	r3, #3204	; 0xc84
   8565a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8565e:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   85662:	f241 41b4 	movw	r1, #5300	; 0x14b4
   85666:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8566a:	7008      	strb	r0, [r1, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   8566c:	f241 02a0 	movw	r2, #4256	; 0x10a0
   85670:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85674:	7010      	strb	r0, [r2, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
   85676:	f245 4355 	movw	r3, #21589	; 0x5455
   8567a:	f2c0 0308 	movt	r3, #8
   8567e:	4798      	blx	r3
   85680:	bd08      	pop	{r3, pc}
   85682:	bf00      	nop

00085684 <udi_cdc_comm_setup>:
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
}

bool udi_cdc_comm_setup(void)
{
   85684:	b508      	push	{r3, lr}
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
   85686:	f641 4354 	movw	r3, #7252	; 0x1c54
   8568a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8568e:	7818      	ldrb	r0, [r3, #0]
   85690:	f010 0f80 	tst.w	r0, #128	; 0x80
   85694:	d020      	beq.n	856d8 <udi_cdc_comm_setup+0x54>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   85696:	f000 0160 	and.w	r1, r0, #96	; 0x60
   8569a:	2920      	cmp	r1, #32
   8569c:	d156      	bne.n	8574c <udi_cdc_comm_setup+0xc8>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   8569e:	f641 4254 	movw	r2, #7252	; 0x1c54
   856a2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   856a6:	7853      	ldrb	r3, [r2, #1]
   856a8:	2b21      	cmp	r3, #33	; 0x21
   856aa:	d152      	bne.n	85752 <udi_cdc_comm_setup+0xce>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   856ac:	f641 4054 	movw	r0, #7252	; 0x1c54
   856b0:	f2c2 0007 	movt	r0, #8199	; 0x2007
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   856b4:	88c1      	ldrh	r1, [r0, #6]
   856b6:	2907      	cmp	r1, #7
   856b8:	d14e      	bne.n	85758 <udi_cdc_comm_setup+0xd4>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
   856ba:	f641 4354 	movw	r3, #7252	; 0x1c54
   856be:	f2c2 0307 	movt	r3, #8199	; 0x2007
   856c2:	f640 4270 	movw	r2, #3184	; 0xc70
   856c6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   856ca:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   856cc:	f04f 0007 	mov.w	r0, #7
   856d0:	8198      	strh	r0, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   856d2:	f04f 0001 	mov.w	r0, #1
   856d6:	bd08      	pop	{r3, pc}
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   856d8:	f000 0160 	and.w	r1, r0, #96	; 0x60
   856dc:	2920      	cmp	r1, #32
   856de:	d13e      	bne.n	8575e <udi_cdc_comm_setup+0xda>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   856e0:	f641 4254 	movw	r2, #7252	; 0x1c54
   856e4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   856e8:	7853      	ldrb	r3, [r2, #1]
   856ea:	2b20      	cmp	r3, #32
   856ec:	d002      	beq.n	856f4 <udi_cdc_comm_setup+0x70>
   856ee:	2b22      	cmp	r3, #34	; 0x22
   856f0:	d138      	bne.n	85764 <udi_cdc_comm_setup+0xe0>
   856f2:	e01a      	b.n	8572a <udi_cdc_comm_setup+0xa6>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   856f4:	f641 4354 	movw	r3, #7252	; 0x1c54
   856f8:	f2c2 0307 	movt	r3, #8199	; 0x2007
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   856fc:	88d8      	ldrh	r0, [r3, #6]
   856fe:	2807      	cmp	r0, #7
   85700:	d133      	bne.n	8576a <udi_cdc_comm_setup+0xe6>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
   85702:	f641 4154 	movw	r1, #7252	; 0x1c54
   85706:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8570a:	f245 4251 	movw	r2, #21585	; 0x5451
   8570e:	f2c0 0208 	movt	r2, #8
   85712:	610a      	str	r2, [r1, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
   85714:	f640 4370 	movw	r3, #3184	; 0xc70
   85718:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8571c:	608b      	str	r3, [r1, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   8571e:	f04f 0007 	mov.w	r0, #7
   85722:	8188      	strh	r0, [r1, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   85724:	f04f 0001 	mov.w	r0, #1
   85728:	bd08      	pop	{r3, pc}
			case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
				// According cdc spec 1.1 chapter 6.2.14
				UDI_CDC_SET_DTR_EXT(port, (0 !=
   8572a:	f641 4054 	movw	r0, #7252	; 0x1c54
   8572e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85732:	7881      	ldrb	r1, [r0, #2]
   85734:	f04f 0000 	mov.w	r0, #0
   85738:	f001 0101 	and.w	r1, r1, #1
   8573c:	f644 6255 	movw	r2, #20053	; 0x4e55
   85740:	f2c0 0208 	movt	r2, #8
   85744:	4790      	blx	r2
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
   85746:	f04f 0001 	mov.w	r0, #1
   8574a:	bd08      	pop	{r3, pc}
			}
		}
	}
	return false;  // request Not supported
   8574c:	f04f 0000 	mov.w	r0, #0
   85750:	bd08      	pop	{r3, pc}
   85752:	f04f 0000 	mov.w	r0, #0
   85756:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   85758:	f04f 0000 	mov.w	r0, #0
   8575c:	bd08      	pop	{r3, pc}
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
   8575e:	f04f 0000 	mov.w	r0, #0
   85762:	bd08      	pop	{r3, pc}
   85764:	f04f 0000 	mov.w	r0, #0
   85768:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   8576a:	f04f 0000 	mov.w	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
   8576e:	bd08      	pop	{r3, pc}

00085770 <udi_cdc_data_disable>:
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
}

void udi_cdc_data_disable(void)
{
   85770:	b508      	push	{r3, lr}
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
   85772:	f640 4378 	movw	r3, #3192	; 0xc78
   85776:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8577a:	781a      	ldrb	r2, [r3, #0]
   8577c:	f102 30ff 	add.w	r0, r2, #4294967295
   85780:	b2c1      	uxtb	r1, r0
   85782:	7019      	strb	r1, [r3, #0]
	port = udi_cdc_nb_data_enabled;
   85784:	7818      	ldrb	r0, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
   85786:	f24a 0339 	movw	r3, #41017	; 0xa039
   8578a:	f2c0 0308 	movt	r3, #8
   8578e:	4798      	blx	r3
	udi_cdc_data_running = false;
   85790:	f241 0098 	movw	r0, #4248	; 0x1098
   85794:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85798:	f04f 0200 	mov.w	r2, #0
   8579c:	7002      	strb	r2, [r0, #0]
   8579e:	bd08      	pop	{r3, pc}

000857a0 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
   857a0:	b508      	push	{r3, lr}
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
   857a2:	f04f 0000 	mov.w	r0, #0
   857a6:	f241 038c 	movw	r3, #4236	; 0x108c
   857aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   857ae:	7018      	strb	r0, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
   857b0:	f241 41b8 	movw	r1, #5304	; 0x14b8
   857b4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   857b8:	8008      	strh	r0, [r1, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
   857ba:	f241 03a4 	movw	r3, #4260	; 0x10a4
   857be:	f2c2 0307 	movt	r3, #8199	; 0x2007
   857c2:	f04f 01a1 	mov.w	r1, #161	; 0xa1
   857c6:	7019      	strb	r1, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   857c8:	f04f 0120 	mov.w	r1, #32
   857cc:	7059      	strb	r1, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   857ce:	8058      	strh	r0, [r3, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   857d0:	8098      	strh	r0, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   857d2:	f04f 0102 	mov.w	r1, #2
   857d6:	80d9      	strh	r1, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   857d8:	8118      	strh	r0, [r3, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   857da:	f640 4370 	movw	r3, #3184	; 0xc70
   857de:	f2c2 0307 	movt	r3, #8199	; 0x2007
   857e2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   857e6:	6019      	str	r1, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   857e8:	7118      	strb	r0, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   857ea:	7158      	strb	r0, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   857ec:	f04f 0208 	mov.w	r2, #8
   857f0:	719a      	strb	r2, [r3, #6]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
   857f2:	f24a 0329 	movw	r3, #41001	; 0xa029
   857f6:	f2c0 0308 	movt	r3, #8
   857fa:	4798      	blx	r3
   857fc:	b158      	cbz	r0, 85816 <udi_cdc_comm_enable+0x76>
		return false;
	}
	udi_cdc_nb_comm_enabled++;
   857fe:	f241 008c 	movw	r0, #4236	; 0x108c
   85802:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85806:	7801      	ldrb	r1, [r0, #0]
   85808:	f101 0101 	add.w	r1, r1, #1
   8580c:	b2ca      	uxtb	r2, r1
   8580e:	7002      	strb	r2, [r0, #0]
	return true;
   85810:	f04f 0001 	mov.w	r0, #1
   85814:	bd08      	pop	{r3, pc}
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
   85816:	f04f 0000 	mov.w	r0, #0
	}
	udi_cdc_nb_comm_enabled++;
	return true;
}
   8581a:	bd08      	pop	{r3, pc}

0008581c <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8581c:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   85820:	b672      	cpsid	i
   85822:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   85826:	f240 2290 	movw	r2, #656	; 0x290
   8582a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8582e:	f04f 0100 	mov.w	r1, #0
   85832:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   85834:	f241 0090 	movw	r0, #4240	; 0x1090
   85838:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8583c:	8802      	ldrh	r2, [r0, #0]
   8583e:	b290      	uxth	r0, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   85840:	f241 019c 	movw	r1, #4252	; 0x109c
   85844:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85848:	7809      	ldrb	r1, [r1, #0]
   8584a:	f241 0288 	movw	r2, #4232	; 0x1088
   8584e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85852:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   85856:	1a08      	subs	r0, r1, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85858:	b94b      	cbnz	r3, 8586e <udi_cdc_multi_get_nb_received_data+0x52>
		cpu_irq_enable();
   8585a:	f240 2390 	movw	r3, #656	; 0x290
   8585e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85862:	f04f 0201 	mov.w	r2, #1
   85866:	701a      	strb	r2, [r3, #0]
   85868:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8586c:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   8586e:	4770      	bx	lr

00085870 <udi_cdc_get_nb_received_data>:

iram_size_t udi_cdc_get_nb_received_data(void)
{
   85870:	b508      	push	{r3, lr}
	return udi_cdc_multi_get_nb_received_data(0);
   85872:	f04f 0000 	mov.w	r0, #0
   85876:	f645 031d 	movw	r3, #22557	; 0x581d
   8587a:	f2c0 0308 	movt	r3, #8
   8587e:	4798      	blx	r3
}
   85880:	bd08      	pop	{r3, pc}
   85882:	bf00      	nop

00085884 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   85884:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   85886:	f645 031d 	movw	r3, #22557	; 0x581d
   8588a:	f2c0 0308 	movt	r3, #8
   8588e:	4798      	blx	r3
}
   85890:	3000      	adds	r0, #0
   85892:	bf18      	it	ne
   85894:	2001      	movne	r0, #1
   85896:	bd08      	pop	{r3, pc}

00085898 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
   85898:	b510      	push	{r4, lr}
   8589a:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8589c:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   858a0:	f1d3 0001 	rsbs	r0, r3, #1
   858a4:	bf38      	it	cc
   858a6:	2000      	movcc	r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   858a8:	b672      	cpsid	i
   858aa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   858ae:	f240 2290 	movw	r2, #656	; 0x290
   858b2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   858b6:	f04f 0100 	mov.w	r1, #0
   858ba:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   858bc:	f241 049c 	movw	r4, #4252	; 0x109c
   858c0:	f2c2 0407 	movt	r4, #8199	; 0x2007
   858c4:	7824      	ldrb	r4, [r4, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   858c6:	f241 43b0 	movw	r3, #5296	; 0x14b0
   858ca:	f2c2 0307 	movt	r3, #8199	; 0x2007
   858ce:	781a      	ldrb	r2, [r3, #0]
   858d0:	b96a      	cbnz	r2, 858ee <udi_cdc_rx_start+0x56>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   858d2:	f241 0190 	movw	r1, #4240	; 0x1090
   858d6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   858da:	880b      	ldrh	r3, [r1, #0]
   858dc:	b29a      	uxth	r2, r3
   858de:	f241 0188 	movw	r1, #4232	; 0x1088
   858e2:	f2c2 0107 	movt	r1, #8199	; 0x2007
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
   858e6:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
   858ea:	4293      	cmp	r3, r2
   858ec:	d90e      	bls.n	8590c <udi_cdc_rx_start+0x74>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   858ee:	2800      	cmp	r0, #0
   858f0:	d052      	beq.n	85998 <udi_cdc_rx_start+0x100>
		cpu_irq_enable();
   858f2:	f240 2190 	movw	r1, #656	; 0x290
   858f6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   858fa:	f04f 0201 	mov.w	r2, #1
   858fe:	700a      	strb	r2, [r1, #0]
   85900:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   85904:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   85906:	f04f 0000 	mov.w	r0, #0
   8590a:	e047      	b.n	8599c <udi_cdc_rx_start+0x104>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
   8590c:	f241 0290 	movw	r2, #4240	; 0x1090
   85910:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85914:	f04f 0100 	mov.w	r1, #0
   85918:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8591a:	428c      	cmp	r4, r1
   8591c:	bf14      	ite	ne
   8591e:	2100      	movne	r1, #0
   85920:	2101      	moveq	r1, #1
   85922:	f241 039c 	movw	r3, #4252	; 0x109c
   85926:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8592a:	7019      	strb	r1, [r3, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
   8592c:	f241 42b0 	movw	r2, #5296	; 0x14b0
   85930:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85934:	f04f 0101 	mov.w	r1, #1
   85938:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8593a:	b138      	cbz	r0, 8594c <udi_cdc_rx_start+0xb4>
		cpu_irq_enable();
   8593c:	f240 2090 	movw	r0, #656	; 0x290
   85940:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85944:	7001      	strb	r1, [r0, #0]
   85946:	f3bf 8f5f 	dmb	sy
   8594a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
   8594c:	f04f 0000 	mov.w	r0, #0
   85950:	f645 0285 	movw	r2, #22661	; 0x5885
   85954:	f2c0 0208 	movt	r2, #8
   85958:	4790      	blx	r2
   8595a:	b130      	cbz	r0, 8596a <udi_cdc_rx_start+0xd2>
		UDI_CDC_RX_NOTIFY(port);
   8595c:	f04f 0000 	mov.w	r0, #0
   85960:	f644 6179 	movw	r1, #20089	; 0x4e79
   85964:	f2c0 0108 	movt	r1, #8
   85968:	4788      	blx	r1
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
   8596a:	f645 10a1 	movw	r0, #22945	; 0x59a1
   8596e:	f2c0 0008 	movt	r0, #8
   85972:	9000      	str	r0, [sp, #0]
   85974:	f04f 0005 	mov.w	r0, #5
   85978:	f04f 0101 	mov.w	r1, #1
   8597c:	f241 03b0 	movw	r3, #4272	; 0x10b0
   85980:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85984:	eb03 2244 	add.w	r2, r3, r4, lsl #9
   85988:	f44f 7300 	mov.w	r3, #512	; 0x200
   8598c:	f249 14f9 	movw	r4, #37369	; 0x91f9
   85990:	f2c0 0408 	movt	r4, #8
   85994:	47a0      	blx	r4
   85996:	e001      	b.n	8599c <udi_cdc_rx_start+0x104>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   85998:	f04f 0000 	mov.w	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
   8599c:	b002      	add	sp, #8
   8599e:	bd10      	pop	{r4, pc}

000859a0 <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   859a0:	b510      	push	{r4, lr}
   859a2:	b082      	sub	sp, #8
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   859a4:	bb88      	cbnz	r0, 85a0a <udi_cdc_data_received+0x6a>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   859a6:	f241 039c 	movw	r3, #4252	; 0x109c
   859aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   859ae:	7818      	ldrb	r0, [r3, #0]
   859b0:	f1d0 0301 	rsbs	r3, r0, #1
   859b4:	bf38      	it	cc
   859b6:	2300      	movcc	r3, #0
	if (!n) {
   859b8:	b9a9      	cbnz	r1, 859e6 <udi_cdc_data_received+0x46>
		udd_ep_run( ep,
   859ba:	f645 14a1 	movw	r4, #22945	; 0x59a1
   859be:	f2c0 0408 	movt	r4, #8
   859c2:	9400      	str	r4, [sp, #0]
   859c4:	4610      	mov	r0, r2
   859c6:	f04f 0101 	mov.w	r1, #1
   859ca:	f241 02b0 	movw	r2, #4272	; 0x10b0
   859ce:	f2c2 0207 	movt	r2, #8199	; 0x2007
   859d2:	eb02 2243 	add.w	r2, r2, r3, lsl #9
   859d6:	f44f 7300 	mov.w	r3, #512	; 0x200
   859da:	f249 14f9 	movw	r4, #37369	; 0x91f9
   859de:	f2c0 0408 	movt	r4, #8
   859e2:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
   859e4:	e011      	b.n	85a0a <udi_cdc_data_received+0x6a>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   859e6:	f241 0288 	movw	r2, #4232	; 0x1088
   859ea:	f2c2 0207 	movt	r2, #8199	; 0x2007
   859ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   859f2:	f04f 0000 	mov.w	r0, #0
   859f6:	f241 41b0 	movw	r1, #5296	; 0x14b0
   859fa:	f2c2 0107 	movt	r1, #8199	; 0x2007
   859fe:	7008      	strb	r0, [r1, #0]
	udi_cdc_rx_start(port);
   85a00:	f645 0399 	movw	r3, #22681	; 0x5899
   85a04:	f2c0 0308 	movt	r3, #8
   85a08:	4798      	blx	r3
}
   85a0a:	b002      	add	sp, #8
   85a0c:	bd10      	pop	{r4, pc}
   85a0e:	bf00      	nop

00085a10 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
   85a10:	b538      	push	{r3, r4, r5, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
   85a12:	f04f 0400 	mov.w	r4, #0
   85a16:	f640 4378 	movw	r3, #3192	; 0xc78
   85a1a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85a1e:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
   85a20:	f241 00a0 	movw	r0, #4256	; 0x10a0
   85a24:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85a28:	7004      	strb	r4, [r0, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   85a2a:	f241 41b4 	movw	r1, #5300	; 0x14b4
   85a2e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85a32:	700c      	strb	r4, [r1, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   85a34:	f640 427c 	movw	r2, #3196	; 0xc7c
   85a38:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85a3c:	7014      	strb	r4, [r2, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   85a3e:	f640 4384 	movw	r3, #3204	; 0xc84
   85a42:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85a46:	4625      	mov	r5, r4
   85a48:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   85a4a:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   85a4c:	f241 0094 	movw	r0, #4244	; 0x1094
   85a50:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85a54:	8004      	strh	r4, [r0, #0]
	udi_cdc_tx_send(port);
   85a56:	4620      	mov	r0, r4
   85a58:	f245 4155 	movw	r1, #21589	; 0x5455
   85a5c:	f2c0 0108 	movt	r1, #8
   85a60:	4788      	blx	r1

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
   85a62:	f241 42b0 	movw	r2, #5296	; 0x14b0
   85a66:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85a6a:	7014      	strb	r4, [r2, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   85a6c:	f241 039c 	movw	r3, #4252	; 0x109c
   85a70:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85a74:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   85a76:	f241 0088 	movw	r0, #4232	; 0x1088
   85a7a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85a7e:	8004      	strh	r4, [r0, #0]
	udi_cdc_rx_pos[port] = 0;
   85a80:	f241 0190 	movw	r1, #4240	; 0x1090
   85a84:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85a88:	800c      	strh	r4, [r1, #0]
	if (!udi_cdc_rx_start(port)) {
   85a8a:	4620      	mov	r0, r4
   85a8c:	f645 0299 	movw	r2, #22681	; 0x5899
   85a90:	f2c0 0208 	movt	r2, #8
   85a94:	4790      	blx	r2
   85a96:	b198      	cbz	r0, 85ac0 <udi_cdc_data_enable+0xb0>
		return false;
	}
	udi_cdc_nb_data_enabled++;
   85a98:	f640 4378 	movw	r3, #3192	; 0xc78
   85a9c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85aa0:	7818      	ldrb	r0, [r3, #0]
   85aa2:	f100 0001 	add.w	r0, r0, #1
   85aa6:	b2c1      	uxtb	r1, r0
   85aa8:	7019      	strb	r1, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   85aaa:	781a      	ldrb	r2, [r3, #0]
   85aac:	2a01      	cmp	r2, #1
   85aae:	d10a      	bne.n	85ac6 <udi_cdc_data_enable+0xb6>
		udi_cdc_data_running = true;
   85ab0:	f04f 0001 	mov.w	r0, #1
   85ab4:	f241 0398 	movw	r3, #4248	; 0x1098
   85ab8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85abc:	7018      	strb	r0, [r3, #0]
   85abe:	bd38      	pop	{r3, r4, r5, pc}
	udi_cdc_rx_trans_ongoing[port] = false;
	udi_cdc_rx_buf_sel[port] = 0;
	udi_cdc_rx_buf_nb[port][0] = 0;
	udi_cdc_rx_pos[port] = 0;
	if (!udi_cdc_rx_start(port)) {
		return false;
   85ac0:	f04f 0000 	mov.w	r0, #0
   85ac4:	bd38      	pop	{r3, r4, r5, pc}
	}
	udi_cdc_nb_data_enabled++;
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
		udi_cdc_data_running = true;
	}
	return true;
   85ac6:	f04f 0001 	mov.w	r0, #1
}
   85aca:	bd38      	pop	{r3, r4, r5, pc}

00085acc <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   85acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85ad0:	b083      	sub	sp, #12
   85ad2:	4615      	mov	r5, r2
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
   85ad4:	4688      	mov	r8, r1
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   85ad6:	f240 2790 	movw	r7, #656	; 0x290
   85ada:	f2c2 0707 	movt	r7, #8199	; 0x2007
   85ade:	f04f 0b00 	mov.w	fp, #0
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   85ae2:	f241 0690 	movw	r6, #4240	; 0x1090
   85ae6:	f2c2 0607 	movt	r6, #8199	; 0x2007
	buf_sel = udi_cdc_rx_buf_sel[port];
   85aea:	f241 0a9c 	movw	sl, #4252	; 0x109c
   85aee:	f2c2 0a07 	movt	sl, #8199	; 0x2007
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
   85af2:	f241 0988 	movw	r9, #4232	; 0x1088
   85af6:	f2c2 0907 	movt	r9, #8199	; 0x2007
	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   85afa:	f241 03b0 	movw	r3, #4272	; 0x10b0
   85afe:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85b02:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85b04:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   85b08:	b672      	cpsid	i
   85b0a:	f3bf 8f5f 	dmb	sy
   85b0e:	f887 b000 	strb.w	fp, [r7]
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   85b12:	8830      	ldrh	r0, [r6, #0]
   85b14:	b283      	uxth	r3, r0
	buf_sel = udi_cdc_rx_buf_sel[port];
   85b16:	f89a 1000 	ldrb.w	r1, [sl]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85b1a:	b92a      	cbnz	r2, 85b28 <udi_cdc_multi_read_buf+0x5c>
		cpu_irq_enable();
   85b1c:	f04f 0401 	mov.w	r4, #1
   85b20:	703c      	strb	r4, [r7, #0]
   85b22:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   85b26:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
   85b28:	f839 4011 	ldrh.w	r4, [r9, r1, lsl #1]
   85b2c:	42a3      	cmp	r3, r4
   85b2e:	d307      	bcc.n	85b40 <udi_cdc_multi_read_buf+0x74>
		if (!udi_cdc_data_running) {
   85b30:	f241 0098 	movw	r0, #4248	; 0x1098
   85b34:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85b38:	7801      	ldrb	r1, [r0, #0]
   85b3a:	2900      	cmp	r1, #0
   85b3c:	d1e2      	bne.n	85b04 <udi_cdc_multi_read_buf+0x38>
   85b3e:	e01d      	b.n	85b7c <udi_cdc_multi_read_buf+0xb0>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   85b40:	1ae4      	subs	r4, r4, r3
   85b42:	42a5      	cmp	r5, r4
   85b44:	bf38      	it	cc
   85b46:	462c      	movcc	r4, r5
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   85b48:	eb03 2241 	add.w	r2, r3, r1, lsl #9
   85b4c:	4640      	mov	r0, r8
   85b4e:	9b01      	ldr	r3, [sp, #4]
   85b50:	1899      	adds	r1, r3, r2
   85b52:	4622      	mov	r2, r4
   85b54:	f64a 43a5 	movw	r3, #44197	; 0xaca5
   85b58:	f2c0 0308 	movt	r3, #8
   85b5c:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   85b5e:	8830      	ldrh	r0, [r6, #0]
   85b60:	1821      	adds	r1, r4, r0
   85b62:	b28a      	uxth	r2, r1
   85b64:	8032      	strh	r2, [r6, #0]
	ptr_buf += copy_nb;
   85b66:	44a0      	add	r8, r4
	size -= copy_nb;
   85b68:	1b2d      	subs	r5, r5, r4
	udi_cdc_rx_start(port);
   85b6a:	f04f 0000 	mov.w	r0, #0
   85b6e:	f645 0399 	movw	r3, #22681	; 0x5899
   85b72:	f2c0 0308 	movt	r3, #8
   85b76:	4798      	blx	r3

	if (size) {
   85b78:	2d00      	cmp	r5, #0
   85b7a:	d1c3      	bne.n	85b04 <udi_cdc_multi_read_buf+0x38>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   85b7c:	4628      	mov	r0, r5
   85b7e:	b003      	add	sp, #12
   85b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085b84 <udi_cdc_read_buf>:

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
   85b84:	b508      	push	{r3, lr}
   85b86:	4603      	mov	r3, r0
   85b88:	460a      	mov	r2, r1
	return udi_cdc_multi_read_buf(0, buf, size);
   85b8a:	f04f 0000 	mov.w	r0, #0
   85b8e:	4619      	mov	r1, r3
   85b90:	f645 23cd 	movw	r3, #23245	; 0x5acd
   85b94:	f2c0 0308 	movt	r3, #8
   85b98:	4798      	blx	r3
}
   85b9a:	bd08      	pop	{r3, pc}

00085b9c <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
   85b9c:	b410      	push	{r4}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85b9e:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   85ba2:	b672      	cpsid	i
   85ba4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   85ba8:	f240 2390 	movw	r3, #656	; 0x290
   85bac:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85bb0:	f04f 0200 	mov.w	r2, #0
   85bb4:	701a      	strb	r2, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   85bb6:	f640 407c 	movw	r0, #3196	; 0xc7c
   85bba:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85bbe:	7801      	ldrb	r1, [r0, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   85bc0:	f640 4284 	movw	r2, #3204	; 0xc84
   85bc4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85bc8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
   85bcc:	f1d1 0101 	rsbs	r1, r1, #1
   85bd0:	bf38      	it	cc
   85bd2:	2100      	movcc	r1, #0
   85bd4:	b2c8      	uxtb	r0, r1
   85bd6:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   85bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85bde:	d11b      	bne.n	85c18 <udi_cdc_multi_get_free_tx_buffer+0x7c>
		if ((!udi_cdc_tx_trans_ongoing[port])
   85be0:	f241 02a0 	movw	r2, #4256	; 0x10a0
   85be4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85be8:	7812      	ldrb	r2, [r2, #0]
   85bea:	b9aa      	cbnz	r2, 85c18 <udi_cdc_multi_get_free_tx_buffer+0x7c>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   85bec:	f241 42b4 	movw	r2, #5300	; 0x14b4
   85bf0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85bf4:	7812      	ldrb	r2, [r2, #0]
   85bf6:	b97a      	cbnz	r2, 85c18 <udi_cdc_multi_get_free_tx_buffer+0x7c>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
   85bf8:	f241 43b4 	movw	r3, #5300	; 0x14b4
   85bfc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85c00:	f04f 0001 	mov.w	r0, #1
   85c04:	7018      	strb	r0, [r3, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85c06:	f640 427c 	movw	r2, #3196	; 0xc7c
   85c0a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85c0e:	7011      	strb	r1, [r2, #0]
			buf_sel_nb = 0;
			buf_nosel_nb = UDI_CDC_TX_BUFFERS;
   85c10:	f44f 7000 	mov.w	r0, #512	; 0x200
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
   85c14:	f04f 0300 	mov.w	r3, #0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85c18:	b94c      	cbnz	r4, 85c2e <udi_cdc_multi_get_free_tx_buffer+0x92>
		cpu_irq_enable();
   85c1a:	f240 2290 	movw	r2, #656	; 0x290
   85c1e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85c22:	f04f 0101 	mov.w	r1, #1
   85c26:	7011      	strb	r1, [r2, #0]
   85c28:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   85c2c:	b662      	cpsie	i
iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
   85c2e:	18c0      	adds	r0, r0, r3
		}
	}
	cpu_irq_restore(flags);

	return (UDI_CDC_TX_BUFFERS - buf_sel_nb) + (UDI_CDC_TX_BUFFERS - buf_nosel_nb);
}
   85c30:	f5c0 6080 	rsb	r0, r0, #1024	; 0x400
   85c34:	bc10      	pop	{r4}
   85c36:	4770      	bx	lr

00085c38 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   85c38:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   85c3a:	f645 339d 	movw	r3, #23453	; 0x5b9d
   85c3e:	f2c0 0308 	movt	r3, #8
   85c42:	4798      	blx	r3
}
   85c44:	3000      	adds	r0, #0
   85c46:	bf18      	it	ne
   85c48:	2001      	movne	r0, #1
   85c4a:	bd08      	pop	{r3, pc}

00085c4c <udi_cdc_multi_write_buf>:
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
   85c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85c50:	b083      	sub	sp, #12
   85c52:	4615      	mov	r5, r2

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
   85c54:	f640 4370 	movw	r3, #3184	; 0xc70
   85c58:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85c5c:	7998      	ldrb	r0, [r3, #6]
   85c5e:	2809      	cmp	r0, #9
		size *=2;
   85c60:	bf08      	it	eq
   85c62:	0055      	lsleq	r5, r2, #1
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
   85c64:	4689      	mov	r9, r1
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   85c66:	f04f 0800 	mov.w	r8, #0
		if (!udi_cdc_data_running) {
   85c6a:	f241 0198 	movw	r1, #4248	; 0x1098
   85c6e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85c72:	9101      	str	r1, [sp, #4]
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   85c74:	f240 2290 	movw	r2, #656	; 0x290
   85c78:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85c7c:	9200      	str	r2, [sp, #0]
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   85c7e:	4640      	mov	r0, r8
   85c80:	f645 4339 	movw	r3, #23609	; 0x5c39
   85c84:	f2c0 0308 	movt	r3, #8
   85c88:	4798      	blx	r3
   85c8a:	b920      	cbnz	r0, 85c96 <udi_cdc_multi_write_buf+0x4a>
		if (!udi_cdc_data_running) {
   85c8c:	9801      	ldr	r0, [sp, #4]
   85c8e:	7803      	ldrb	r3, [r0, #0]
   85c90:	2b00      	cmp	r3, #0
   85c92:	d1f4      	bne.n	85c7e <udi_cdc_multi_write_buf+0x32>
   85c94:	e035      	b.n	85d02 <udi_cdc_multi_write_buf+0xb6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85c96:	f3ef 8b10 	mrs	fp, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   85c9a:	b672      	cpsid	i
   85c9c:	f3bf 8f5f 	dmb	sy
   85ca0:	9c00      	ldr	r4, [sp, #0]
   85ca2:	f884 8000 	strb.w	r8, [r4]
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   85ca6:	f640 467c 	movw	r6, #3196	; 0xc7c
   85caa:	f2c2 0607 	movt	r6, #8199	; 0x2007
   85cae:	7836      	ldrb	r6, [r6, #0]
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   85cb0:	f640 4a84 	movw	sl, #3204	; 0xc84
   85cb4:	f2c2 0a07 	movt	sl, #8199	; 0x2007
   85cb8:	f83a 7016 	ldrh.w	r7, [sl, r6, lsl #1]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
   85cbc:	f5c7 7400 	rsb	r4, r7, #512	; 0x200
   85cc0:	42a5      	cmp	r5, r4
   85cc2:	bf38      	it	cc
   85cc4:	462c      	movcc	r4, r5
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
   85cc6:	eb07 2146 	add.w	r1, r7, r6, lsl #9
   85cca:	f640 4088 	movw	r0, #3208	; 0xc88
   85cce:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85cd2:	1840      	adds	r0, r0, r1
   85cd4:	4649      	mov	r1, r9
   85cd6:	4622      	mov	r2, r4
   85cd8:	f64a 43a5 	movw	r3, #44197	; 0xaca5
   85cdc:	f2c0 0308 	movt	r3, #8
   85ce0:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
   85ce2:	193f      	adds	r7, r7, r4
   85ce4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85ce8:	f1bb 0f00 	cmp.w	fp, #0
   85cec:	d106      	bne.n	85cfc <udi_cdc_multi_write_buf+0xb0>
		cpu_irq_enable();
   85cee:	f04f 0101 	mov.w	r1, #1
   85cf2:	9a00      	ldr	r2, [sp, #0]
   85cf4:	7011      	strb	r1, [r2, #0]
   85cf6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   85cfa:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
   85cfc:	44a1      	add	r9, r4
	size -= copy_nb;

	if (size) {
   85cfe:	1b2d      	subs	r5, r5, r4
   85d00:	d1bd      	bne.n	85c7e <udi_cdc_multi_write_buf+0x32>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
}
   85d02:	4628      	mov	r0, r5
   85d04:	b003      	add	sp, #12
   85d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85d0a:	bf00      	nop

00085d0c <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
   85d0c:	b508      	push	{r3, lr}
   85d0e:	4603      	mov	r3, r0
   85d10:	460a      	mov	r2, r1
	return udi_cdc_multi_write_buf(0, buf, size);
   85d12:	f04f 0000 	mov.w	r0, #0
   85d16:	4619      	mov	r1, r3
   85d18:	f645 434d 	movw	r3, #23629	; 0x5c4d
   85d1c:	f2c0 0308 	movt	r3, #8
   85d20:	4798      	blx	r3
}
   85d22:	bd08      	pop	{r3, pc}

00085d24 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
   85d24:	f04f 0000 	mov.w	r0, #0
   85d28:	4770      	bx	lr
   85d2a:	bf00      	nop

00085d2c <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
   85d2c:	3000      	adds	r0, #0
   85d2e:	bf18      	it	ne
   85d30:	2001      	movne	r0, #1
   85d32:	f641 4351 	movw	r3, #7249	; 0x1c51
   85d36:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85d3a:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
   85d3c:	f240 2104 	movw	r1, #516	; 0x204
   85d40:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85d44:	f04f 0201 	mov.w	r2, #1
   85d48:	700a      	strb	r2, [r1, #0]
   85d4a:	4770      	bx	lr

00085d4c <udi_msc_clear_sense>:
//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
   85d4c:	f241 5200 	movw	r2, #5376	; 0x1500
   85d50:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85d54:	f04f 0300 	mov.w	r3, #0
   85d58:	4611      	mov	r1, r2
   85d5a:	f841 3b04 	str.w	r3, [r1], #4
   85d5e:	6053      	str	r3, [r2, #4]
   85d60:	f101 0104 	add.w	r1, r1, #4
   85d64:	f841 3b04 	str.w	r3, [r1], #4
   85d68:	f841 3b04 	str.w	r3, [r1], #4
   85d6c:	800b      	strh	r3, [r1, #0]
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
   85d6e:	f04f 00f0 	mov.w	r0, #240	; 0xf0
   85d72:	7010      	strb	r0, [r2, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
   85d74:	f04f 030a 	mov.w	r3, #10
   85d78:	71d3      	strb	r3, [r2, #7]
   85d7a:	4770      	bx	lr

00085d7c <udi_msc_sense_pass>:
	udi_msc_sense.AddSenseCode = add_sense >> 8;
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
}

static void udi_msc_sense_pass(void)
{
   85d7c:	b508      	push	{r3, lr}
	udi_msc_clear_sense();
   85d7e:	f645 534d 	movw	r3, #23885	; 0x5d4d
   85d82:	f2c0 0308 	movt	r3, #8
   85d86:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
   85d88:	f240 2040 	movw	r0, #576	; 0x240
   85d8c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85d90:	f04f 0200 	mov.w	r2, #0
   85d94:	7302      	strb	r2, [r0, #12]
   85d96:	bd08      	pop	{r3, pc}

00085d98 <udi_msc_sense_fail>:
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
}

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
   85d98:	b570      	push	{r4, r5, r6, lr}
   85d9a:	4606      	mov	r6, r0
   85d9c:	460d      	mov	r5, r1
   85d9e:	4614      	mov	r4, r2
	udi_msc_clear_sense();
   85da0:	f645 534d 	movw	r3, #23885	; 0x5d4d
   85da4:	f2c0 0308 	movt	r3, #8
   85da8:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
   85daa:	f240 2040 	movw	r0, #576	; 0x240
   85dae:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85db2:	f04f 0201 	mov.w	r2, #1
   85db6:	7302      	strb	r2, [r0, #12]
	udi_msc_sense.sense_flag_key = sense_key;
   85db8:	f241 5100 	movw	r1, #5376	; 0x1500
   85dbc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85dc0:	708e      	strb	r6, [r1, #2]
	udi_msc_sense.information[0] = lba >> 24;
   85dc2:	ea4f 6314 	mov.w	r3, r4, lsr #24
   85dc6:	70cb      	strb	r3, [r1, #3]
	udi_msc_sense.information[1] = lba >> 16;
   85dc8:	ea4f 4014 	mov.w	r0, r4, lsr #16
   85dcc:	7108      	strb	r0, [r1, #4]
	udi_msc_sense.information[2] = lba >> 8;
   85dce:	ea4f 2214 	mov.w	r2, r4, lsr #8
   85dd2:	714a      	strb	r2, [r1, #5]
	udi_msc_sense.information[3] = lba;
   85dd4:	718c      	strb	r4, [r1, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
   85dd6:	ea4f 2315 	mov.w	r3, r5, lsr #8
   85dda:	730b      	strb	r3, [r1, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
   85ddc:	734d      	strb	r5, [r1, #13]
   85dde:	bd70      	pop	{r4, r5, r6, pc}

00085de0 <udi_msc_sense_fail_busy_or_change>:
{
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
}

static void udi_msc_sense_fail_busy_or_change(void)
{
   85de0:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
   85de2:	f04f 0006 	mov.w	r0, #6
   85de6:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   85dea:	f04f 0200 	mov.w	r2, #0
   85dee:	f645 5399 	movw	r3, #23961	; 0x5d99
   85df2:	f2c0 0308 	movt	r3, #8
   85df6:	4798      	blx	r3
   85df8:	bd08      	pop	{r3, pc}
   85dfa:	bf00      	nop

00085dfc <udi_msc_sense_fail_not_present>:
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
}


static void udi_msc_sense_fail_not_present(void)
{
   85dfc:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
   85dfe:	f04f 0002 	mov.w	r0, #2
   85e02:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
   85e06:	f04f 0200 	mov.w	r2, #0
   85e0a:	f645 5399 	movw	r3, #23961	; 0x5d99
   85e0e:	f2c0 0308 	movt	r3, #8
   85e12:	4798      	blx	r3
   85e14:	bd08      	pop	{r3, pc}
   85e16:	bf00      	nop

00085e18 <udi_msc_sense_fail_hardware>:
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}

static void udi_msc_sense_fail_hardware(void)
{
   85e18:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
   85e1a:	f04f 0004 	mov.w	r0, #4
   85e1e:	f04f 0100 	mov.w	r1, #0
   85e22:	460a      	mov	r2, r1
   85e24:	f645 5399 	movw	r3, #23961	; 0x5d99
   85e28:	f2c0 0308 	movt	r3, #8
   85e2c:	4798      	blx	r3
   85e2e:	bd08      	pop	{r3, pc}

00085e30 <udi_msc_sense_fail_cdb_invalid>:
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
}

static void udi_msc_sense_fail_cdb_invalid(void)
{
   85e30:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
   85e32:	f04f 0005 	mov.w	r0, #5
   85e36:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   85e3a:	f04f 0200 	mov.w	r2, #0
   85e3e:	f645 5399 	movw	r3, #23961	; 0x5d99
   85e42:	f2c0 0308 	movt	r3, #8
   85e46:	4798      	blx	r3
   85e48:	bd08      	pop	{r3, pc}
   85e4a:	bf00      	nop

00085e4c <udi_msc_csw_send>:
	udi_msc_csw_send();
}


void udi_msc_csw_send(void)
{
   85e4c:	b510      	push	{r4, lr}
   85e4e:	b082      	sub	sp, #8
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
   85e50:	f645 73d9 	movw	r3, #24537	; 0x5fd9
   85e54:	f2c0 0308 	movt	r3, #8
   85e58:	9300      	str	r3, [sp, #0]
   85e5a:	f04f 0081 	mov.w	r0, #129	; 0x81
   85e5e:	f04f 0100 	mov.w	r1, #0
   85e62:	f240 2240 	movw	r2, #576	; 0x240
   85e66:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85e6a:	f04f 030d 	mov.w	r3, #13
   85e6e:	f249 14f9 	movw	r4, #37369	; 0x91f9
   85e72:	f2c0 0408 	movt	r4, #8
   85e76:	47a0      	blx	r4
   85e78:	b950      	cbnz	r0, 85e90 <udi_msc_csw_send+0x44>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
   85e7a:	f04f 0081 	mov.w	r0, #129	; 0x81
   85e7e:	f645 614d 	movw	r1, #24141	; 0x5e4d
   85e82:	f2c0 0108 	movt	r1, #8
   85e86:	f649 0285 	movw	r2, #39045	; 0x9885
   85e8a:	f2c0 0208 	movt	r2, #8
   85e8e:	4790      	blx	r2
	}
}
   85e90:	b002      	add	sp, #8
   85e92:	bd10      	pop	{r4, pc}

00085e94 <udi_msc_csw_process>:

//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
   85e94:	b508      	push	{r3, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
   85e96:	f240 2340 	movw	r3, #576	; 0x240
   85e9a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85e9e:	6899      	ldr	r1, [r3, #8]
   85ea0:	b171      	cbz	r1, 85ec0 <udi_msc_csw_process+0x2c>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
   85ea2:	f241 42c4 	movw	r2, #5316	; 0x14c4
   85ea6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85eaa:	f992 300c 	ldrsb.w	r3, [r2, #12]
   85eae:	2b00      	cmp	r3, #0
			udd_ep_set_halt(UDI_MSC_EP_IN);
   85eb0:	bfb4      	ite	lt
   85eb2:	2081      	movlt	r0, #129	; 0x81
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
   85eb4:	2002      	movge	r0, #2
   85eb6:	f648 71dd 	movw	r1, #36829	; 0x8fdd
   85eba:	f2c0 0108 	movt	r1, #8
   85ebe:	4788      	blx	r1
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
   85ec0:	f241 40c4 	movw	r0, #5316	; 0x14c4
   85ec4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85ec8:	6842      	ldr	r2, [r0, #4]
   85eca:	f240 2340 	movw	r3, #576	; 0x240
   85ece:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85ed2:	605a      	str	r2, [r3, #4]
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
	udi_msc_csw_send();
   85ed4:	f645 614d 	movw	r1, #24141	; 0x5e4d
   85ed8:	f2c0 0108 	movt	r1, #8
   85edc:	4788      	blx	r1
   85ede:	bd08      	pop	{r3, pc}

00085ee0 <udi_msc_cbw_validate>:
	}
}


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
   85ee0:	b508      	push	{r3, lr}
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
   85ee2:	f241 43c4 	movw	r3, #5316	; 0x14c4
   85ee6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85eea:	7b1a      	ldrb	r2, [r3, #12]
   85eec:	4051      	eors	r1, r2
   85eee:	f011 0f80 	tst.w	r1, #128	; 0x80
   85ef2:	d106      	bne.n	85f02 <udi_msc_cbw_validate+0x22>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
   85ef4:	f240 2140 	movw	r1, #576	; 0x240
   85ef8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85efc:	688b      	ldr	r3, [r1, #8]
   85efe:	4283      	cmp	r3, r0
   85f00:	d20c      	bcs.n	85f1c <udi_msc_cbw_validate+0x3c>
		udi_msc_sense_fail_cdb_invalid();
   85f02:	f645 6031 	movw	r0, #24113	; 0x5e31
   85f06:	f2c0 0008 	movt	r0, #8
   85f0a:	4780      	blx	r0
		udi_msc_csw_process();
   85f0c:	f645 6295 	movw	r2, #24213	; 0x5e95
   85f10:	f2c0 0208 	movt	r2, #8
   85f14:	4790      	blx	r2
		return false;
   85f16:	f04f 0000 	mov.w	r0, #0
   85f1a:	bd08      	pop	{r3, pc}
	 *  - Case  4: Hi > Dn
	 *  - Case  5: Hi > Di
	 *  - Case  9: Ho > Dn
	 *  - Case 11: Ho > Do
	 */
	return true;
   85f1c:	f04f 0001 	mov.w	r0, #1
}
   85f20:	bd08      	pop	{r3, pc}
   85f22:	bf00      	nop

00085f24 <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
   85f24:	b510      	push	{r4, lr}
   85f26:	b082      	sub	sp, #8
   85f28:	4602      	mov	r2, r0
   85f2a:	460b      	mov	r3, r1
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
   85f2c:	f645 7165 	movw	r1, #24421	; 0x5f65
   85f30:	f2c0 0108 	movt	r1, #8
   85f34:	9100      	str	r1, [sp, #0]
   85f36:	f04f 0081 	mov.w	r0, #129	; 0x81
   85f3a:	f04f 0101 	mov.w	r1, #1
   85f3e:	f249 14f9 	movw	r4, #37369	; 0x91f9
   85f42:	f2c0 0408 	movt	r4, #8
   85f46:	47a0      	blx	r4
   85f48:	b948      	cbnz	r0, 85f5e <udi_msc_data_send+0x3a>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
   85f4a:	f645 6319 	movw	r3, #24089	; 0x5e19
   85f4e:	f2c0 0308 	movt	r3, #8
   85f52:	4798      	blx	r3
		udi_msc_csw_process();
   85f54:	f645 6095 	movw	r0, #24213	; 0x5e95
   85f58:	f2c0 0008 	movt	r0, #8
   85f5c:	4780      	blx	r0
	}
}
   85f5e:	b002      	add	sp, #8
   85f60:	bd10      	pop	{r4, pc}
   85f62:	bf00      	nop

00085f64 <udi_msc_data_sent>:


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
   85f64:	b510      	push	{r4, lr}
   85f66:	460c      	mov	r4, r1
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
   85f68:	b980      	cbnz	r0, 85f8c <udi_msc_data_sent+0x28>
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Update sense data
	udi_msc_sense_pass();
   85f6a:	f645 537d 	movw	r3, #23933	; 0x5d7d
   85f6e:	f2c0 0308 	movt	r3, #8
   85f72:	4798      	blx	r3
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
   85f74:	f240 2040 	movw	r0, #576	; 0x240
   85f78:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85f7c:	6882      	ldr	r2, [r0, #8]
   85f7e:	1b14      	subs	r4, r2, r4
   85f80:	6084      	str	r4, [r0, #8]
	udi_msc_csw_process();
   85f82:	f645 6195 	movw	r1, #24213	; 0x5e95
   85f86:	f2c0 0108 	movt	r1, #8
   85f8a:	4788      	blx	r1
   85f8c:	bd10      	pop	{r4, pc}
   85f8e:	bf00      	nop

00085f90 <udi_msc_cbw_wait>:
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
}

static void udi_msc_cbw_wait(void)
{
   85f90:	b510      	push	{r4, lr}
   85f92:	b082      	sub	sp, #8
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
   85f94:	f246 13ed 	movw	r3, #25069	; 0x61ed
   85f98:	f2c0 0308 	movt	r3, #8
   85f9c:	9300      	str	r3, [sp, #0]
   85f9e:	f04f 0002 	mov.w	r0, #2
   85fa2:	f04f 0101 	mov.w	r1, #1
   85fa6:	f241 42c4 	movw	r2, #5316	; 0x14c4
   85faa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85fae:	f04f 031f 	mov.w	r3, #31
   85fb2:	f249 14f9 	movw	r4, #37369	; 0x91f9
   85fb6:	f2c0 0408 	movt	r4, #8
   85fba:	47a0      	blx	r4
   85fbc:	b950      	cbnz	r0, 85fd4 <udi_msc_cbw_wait+0x44>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
   85fbe:	f04f 0002 	mov.w	r0, #2
   85fc2:	f645 7191 	movw	r1, #24465	; 0x5f91
   85fc6:	f2c0 0108 	movt	r1, #8
   85fca:	f649 0285 	movw	r2, #39045	; 0x9885
   85fce:	f2c0 0208 	movt	r2, #8
   85fd2:	4790      	blx	r2
	}
}
   85fd4:	b002      	add	sp, #8
   85fd6:	bd10      	pop	{r4, pc}

00085fd8 <udi_msc_csw_sent>:
}


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
   85fd8:	b508      	push	{r3, lr}
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
   85fda:	f645 7391 	movw	r3, #24465	; 0x5f91
   85fde:	f2c0 0308 	movt	r3, #8
   85fe2:	4798      	blx	r3
   85fe4:	bd08      	pop	{r3, pc}
   85fe6:	bf00      	nop

00085fe8 <udi_msc_cbw_invalid>:

//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
   85fe8:	b508      	push	{r3, lr}
	if (!udi_msc_b_cbw_invalid)
   85fea:	f241 43e4 	movw	r3, #5348	; 0x14e4
   85fee:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85ff2:	7818      	ldrb	r0, [r3, #0]
   85ff4:	b188      	cbz	r0, 8601a <udi_msc_cbw_invalid+0x32>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_OUT);
   85ff6:	f04f 0002 	mov.w	r0, #2
   85ffa:	f648 71dd 	movw	r1, #36829	; 0x8fdd
   85ffe:	f2c0 0108 	movt	r1, #8
   86002:	4788      	blx	r1
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
   86004:	f04f 0002 	mov.w	r0, #2
   86008:	f645 71e9 	movw	r1, #24553	; 0x5fe9
   8600c:	f2c0 0108 	movt	r1, #8
   86010:	f649 0285 	movw	r2, #39045	; 0x9885
   86014:	f2c0 0208 	movt	r2, #8
   86018:	4790      	blx	r2
   8601a:	bd08      	pop	{r3, pc}

0008601c <udi_msc_csw_invalid>:
}

static void udi_msc_csw_invalid(void)
{
   8601c:	b508      	push	{r3, lr}
	if (!udi_msc_b_cbw_invalid)
   8601e:	f241 43e4 	movw	r3, #5348	; 0x14e4
   86022:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86026:	7818      	ldrb	r0, [r3, #0]
   86028:	b188      	cbz	r0, 8604e <udi_msc_csw_invalid+0x32>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_IN);
   8602a:	f04f 0081 	mov.w	r0, #129	; 0x81
   8602e:	f648 71dd 	movw	r1, #36829	; 0x8fdd
   86032:	f2c0 0108 	movt	r1, #8
   86036:	4788      	blx	r1
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
   86038:	f04f 0081 	mov.w	r0, #129	; 0x81
   8603c:	f246 011d 	movw	r1, #24605	; 0x601d
   86040:	f2c0 0108 	movt	r1, #8
   86044:	f649 0285 	movw	r2, #39045	; 0x9885
   86048:	f2c0 0208 	movt	r2, #8
   8604c:	4790      	blx	r2
   8604e:	bd08      	pop	{r3, pc}

00086050 <udi_msc_spc_mode_sense>:
	udi_msc_csw_process();
}


static void udi_msc_spc_mode_sense(bool b_sense10)
{
   86050:	b570      	push	{r4, r5, r6, lr}
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
   86052:	f241 41e8 	movw	r1, #5352	; 0x14e8
   86056:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8605a:	f04f 0300 	mov.w	r3, #0
   8605e:	460a      	mov	r2, r1
   86060:	f842 3b04 	str.w	r3, [r2], #4
   86064:	604b      	str	r3, [r1, #4]
   86066:	f102 0204 	add.w	r2, r2, #4
   8606a:	f842 3b04 	str.w	r3, [r2], #4
   8606e:	f842 3b04 	str.w	r3, [r2], #4
   86072:	6013      	str	r3, [r2, #0]

	// Initialize process
	if (b_sense10) {
   86074:	4606      	mov	r6, r0
   86076:	b148      	cbz	r0, 8608c <udi_msc_spc_mode_sense+0x3c>
		request_lgt = udi_msc_cbw.CDB[8];
   86078:	f241 44c4 	movw	r4, #5316	; 0x14c4
   8607c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86080:	7de5      	ldrb	r5, [r4, #23]
		ptr_mode = &sense.s10.sense_data;
   86082:	f101 0108 	add.w	r1, r1, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
   86086:	f04f 0408 	mov.w	r4, #8
   8608a:	e007      	b.n	8609c <udi_msc_spc_mode_sense+0x4c>
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
   8608c:	f241 40c4 	movw	r0, #5316	; 0x14c4
   86090:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86094:	7cc5      	ldrb	r5, [r0, #19]
		ptr_mode = &sense.s6.sense_data;
   86096:	492b      	ldr	r1, [pc, #172]	; (86144 <udi_msc_spc_mode_sense+0xf4>)
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
   86098:	f04f 0404 	mov.w	r4, #4
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
   8609c:	f241 43c4 	movw	r3, #5316	; 0x14c4
   860a0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   860a4:	7c5a      	ldrb	r2, [r3, #17]
   860a6:	f002 003f 	and.w	r0, r2, #63	; 0x3f
	if ((SCSI_MS_MODE_INFEXP == mode)
   860aa:	281c      	cmp	r0, #28
   860ac:	d001      	beq.n	860b2 <udi_msc_spc_mode_sense+0x62>
			|| (SCSI_MS_MODE_ALL == mode)) {
   860ae:	283f      	cmp	r0, #63	; 0x3f
   860b0:	d10b      	bne.n	860ca <udi_msc_spc_mode_sense+0x7a>
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
   860b2:	f04f 031c 	mov.w	r3, #28
   860b6:	700b      	strb	r3, [r1, #0]
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
   860b8:	f04f 020a 	mov.w	r2, #10
   860bc:	704a      	strb	r2, [r1, #1]
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
   860be:	f04f 0005 	mov.w	r0, #5
   860c2:	70c8      	strb	r0, [r1, #3]
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
   860c4:	f104 040c 	add.w	r4, r4, #12
   860c8:	b2e4      	uxtb	r4, r4
   860ca:	42ac      	cmp	r4, r5
   860cc:	bf38      	it	cc
   860ce:	4625      	movcc	r5, r4
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
		request_lgt = data_sense_lgt;
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
   860d0:	4628      	mov	r0, r5
   860d2:	f04f 0180 	mov.w	r1, #128	; 0x80
   860d6:	f645 63e1 	movw	r3, #24289	; 0x5ee1
   860da:	f2c0 0308 	movt	r3, #8
   860de:	4798      	blx	r3
   860e0:	b370      	cbz	r0, 86140 <udi_msc_spc_mode_sense+0xf0>
		return;

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
   860e2:	f241 41c4 	movw	r1, #5316	; 0x14c4
   860e6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   860ea:	7b48      	ldrb	r0, [r1, #13]
   860ec:	f245 32b1 	movw	r2, #21425	; 0x53b1
   860f0:	f2c0 0208 	movt	r2, #8
   860f4:	4790      	blx	r2
   860f6:	2800      	cmp	r0, #0
   860f8:	bf14      	ite	ne
   860fa:	2080      	movne	r0, #128	; 0x80
   860fc:	2000      	moveq	r0, #0

	if (b_sense10) {
   860fe:	b16e      	cbz	r6, 8611c <udi_msc_spc_mode_sense+0xcc>
		sense.s10.header.mode_data_length =
				cpu_to_be16((data_sense_lgt - 2));
   86100:	f1a4 0402 	sub.w	r4, r4, #2
   86104:	b2a4      	uxth	r4, r4

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;

	if (b_sense10) {
		sense.s10.header.mode_data_length =
   86106:	f241 41e8 	movw	r1, #5352	; 0x14e8
   8610a:	f2c2 0107 	movt	r1, #8199	; 0x2007
				cpu_to_be16((data_sense_lgt - 2));
   8610e:	ea4f 2214 	mov.w	r2, r4, lsr #8
   86112:	ea42 2404 	orr.w	r4, r2, r4, lsl #8

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;

	if (b_sense10) {
		sense.s10.header.mode_data_length =
   86116:	800c      	strh	r4, [r1, #0]
				cpu_to_be16((data_sense_lgt - 2));
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
   86118:	70c8      	strb	r0, [r1, #3]
   8611a:	e007      	b.n	8612c <udi_msc_spc_mode_sense+0xdc>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
   8611c:	f241 43e8 	movw	r3, #5352	; 0x14e8
   86120:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86124:	f104 34ff 	add.w	r4, r4, #4294967295
   86128:	701c      	strb	r4, [r3, #0]
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
   8612a:	7098      	strb	r0, [r3, #2]
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
   8612c:	f241 40e8 	movw	r0, #5352	; 0x14e8
   86130:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86134:	4629      	mov	r1, r5
   86136:	f645 7325 	movw	r3, #24357	; 0x5f25
   8613a:	f2c0 0308 	movt	r3, #8
   8613e:	4798      	blx	r3
   86140:	bd70      	pop	{r4, r5, r6, pc}
   86142:	bf00      	nop
   86144:	200714ec 	.word	0x200714ec

00086148 <udi_msc_sbc_trans>:
			sizeof(udi_msc_capacity));
}


static void udi_msc_sbc_trans(bool b_read)
{
   86148:	b510      	push	{r4, lr}
	uint32_t trans_size;

	if (!b_read) {
   8614a:	4604      	mov	r4, r0
   8614c:	b9d8      	cbnz	r0, 86186 <udi_msc_sbc_trans+0x3e>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
   8614e:	f241 43c4 	movw	r3, #5316	; 0x14c4
   86152:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86156:	7b58      	ldrb	r0, [r3, #13]
   86158:	f245 31b1 	movw	r1, #21425	; 0x53b1
   8615c:	f2c0 0108 	movt	r1, #8
   86160:	4788      	blx	r1
   86162:	b180      	cbz	r0, 86186 <udi_msc_sbc_trans+0x3e>
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}

static void udi_msc_sense_fail_protected(void)
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
   86164:	f04f 0007 	mov.w	r0, #7
   86168:	f44f 511c 	mov.w	r1, #9984	; 0x2700
   8616c:	f04f 0200 	mov.w	r2, #0
   86170:	f645 5399 	movw	r3, #23961	; 0x5d99
   86174:	f2c0 0308 	movt	r3, #8
   86178:	4798      	blx	r3
	if (!b_read) {
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
			// Write not authorized
			udi_msc_sense_fail_protected();
			udi_msc_csw_process();
   8617a:	f645 6295 	movw	r2, #24213	; 0x5e95
   8617e:	f2c0 0208 	movt	r2, #8
   86182:	4790      	blx	r2
			return;
   86184:	bd10      	pop	{r4, pc}
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
   86186:	f241 42fc 	movw	r2, #5372	; 0x14fc
   8618a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8618e:	f241 40c4 	movw	r0, #5316	; 0x14c4
   86192:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86196:	7c43      	ldrb	r3, [r0, #17]
   86198:	70d3      	strb	r3, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
   8619a:	7c81      	ldrb	r1, [r0, #18]
   8619c:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
   8619e:	7cc3      	ldrb	r3, [r0, #19]
   861a0:	7053      	strb	r3, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
   861a2:	7d01      	ldrb	r1, [r0, #20]
   861a4:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
   861a6:	f241 5216 	movw	r2, #5398	; 0x1516
   861aa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   861ae:	7d83      	ldrb	r3, [r0, #22]
   861b0:	7053      	strb	r3, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
   861b2:	7dc0      	ldrb	r0, [r0, #23]
   861b4:	7010      	strb	r0, [r2, #0]

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
   861b6:	8811      	ldrh	r1, [r2, #0]
	if (!udi_msc_cbw_validate(trans_size,
   861b8:	ea4f 2041 	mov.w	r0, r1, lsl #9
   861bc:	2c00      	cmp	r4, #0
   861be:	bf14      	ite	ne
   861c0:	2180      	movne	r1, #128	; 0x80
   861c2:	2100      	moveq	r1, #0
   861c4:	f645 62e1 	movw	r2, #24289	; 0x5ee1
   861c8:	f2c0 0208 	movt	r2, #8
   861cc:	4790      	blx	r2
   861ce:	b158      	cbz	r0, 861e8 <udi_msc_sbc_trans+0xa0>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
   861d0:	f241 5314 	movw	r3, #5396	; 0x1514
   861d4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   861d8:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
   861da:	f241 40c0 	movw	r0, #5312	; 0x14c0
   861de:	f2c2 0007 	movt	r0, #8199	; 0x2007
   861e2:	f04f 0101 	mov.w	r1, #1
   861e6:	7001      	strb	r1, [r0, #0]
   861e8:	bd10      	pop	{r4, pc}
   861ea:	bf00      	nop

000861ec <udi_msc_cbw_received>:
}


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
   861ec:	b570      	push	{r4, r5, r6, lr}
	UNUSED(ep);
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
   861ee:	2800      	cmp	r0, #0
   861f0:	f040 82b8 	bne.w	86764 <udi_msc_cbw_received+0x578>
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
   861f4:	291f      	cmp	r1, #31
   861f6:	d10a      	bne.n	8620e <udi_msc_cbw_received+0x22>
			|| (udi_msc_cbw.dCBWSignature !=
   861f8:	f245 3355 	movw	r3, #21333	; 0x5355
   861fc:	f2c4 3342 	movt	r3, #17218	; 0x4342
   86200:	f241 42c4 	movw	r2, #5316	; 0x14c4
   86204:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86208:	6810      	ldr	r0, [r2, #0]
   8620a:	4298      	cmp	r0, r3
   8620c:	d011      	beq.n	86232 <udi_msc_cbw_received+0x46>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
   8620e:	f241 43e4 	movw	r3, #5348	; 0x14e4
   86212:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86216:	f04f 0201 	mov.w	r2, #1
   8621a:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
   8621c:	f645 71e9 	movw	r1, #24553	; 0x5fe9
   86220:	f2c0 0108 	movt	r1, #8
   86224:	4788      	blx	r1
		udi_msc_csw_invalid();
   86226:	f246 001d 	movw	r0, #24605	; 0x601d
   8622a:	f2c0 0008 	movt	r0, #8
   8622e:	4780      	blx	r0
		return;
   86230:	bd70      	pop	{r4, r5, r6, pc}
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
   86232:	f241 41c4 	movw	r1, #5316	; 0x14c4
   86236:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8623a:	7b4b      	ldrb	r3, [r1, #13]
   8623c:	f003 000f 	and.w	r0, r3, #15
   86240:	7348      	strb	r0, [r1, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
   86242:	f241 42bc 	movw	r2, #5308	; 0x14bc
   86246:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8624a:	7811      	ldrb	r1, [r2, #0]
   8624c:	4281      	cmp	r1, r0
   8624e:	d20a      	bcs.n	86266 <udi_msc_cbw_received+0x7a>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
   86250:	f645 6131 	movw	r1, #24113	; 0x5e31
   86254:	f2c0 0108 	movt	r1, #8
   86258:	4788      	blx	r1
		udi_msc_csw_process();
   8625a:	f645 6095 	movw	r0, #24213	; 0x5e95
   8625e:	f2c0 0008 	movt	r0, #8
   86262:	4780      	blx	r0
		return;
   86264:	bd70      	pop	{r4, r5, r6, pc}
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
   86266:	f241 43c4 	movw	r3, #5316	; 0x14c4
   8626a:	f2c2 0307 	movt	r3, #8199	; 0x2007
		udi_msc_sense_fail_cdb_invalid();
		udi_msc_csw_process();
		return;
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
   8626e:	689a      	ldr	r2, [r3, #8]
   86270:	f240 2140 	movw	r1, #576	; 0x240
   86274:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86278:	608a      	str	r2, [r1, #8]
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
   8627a:	7bdb      	ldrb	r3, [r3, #15]
   8627c:	2b5a      	cmp	r3, #90	; 0x5a
   8627e:	f200 825a 	bhi.w	86736 <udi_msc_cbw_received+0x54a>
   86282:	e8df f013 	tbh	[pc, r3, lsl #1]
   86286:	01a6      	.short	0x01a6
   86288:	02580258 	.word	0x02580258
   8628c:	0258005b 	.word	0x0258005b
   86290:	02580258 	.word	0x02580258
   86294:	02580258 	.word	0x02580258
   86298:	02580258 	.word	0x02580258
   8629c:	02580258 	.word	0x02580258
   862a0:	02580258 	.word	0x02580258
   862a4:	02580258 	.word	0x02580258
   862a8:	00790258 	.word	0x00790258
   862ac:	02580258 	.word	0x02580258
   862b0:	02580258 	.word	0x02580258
   862b4:	02580258 	.word	0x02580258
   862b8:	01960258 	.word	0x01960258
   862bc:	02580209 	.word	0x02580209
   862c0:	02260258 	.word	0x02260258
   862c4:	02580258 	.word	0x02580258
   862c8:	02580258 	.word	0x02580258
   862cc:	02580258 	.word	0x02580258
   862d0:	025801ce 	.word	0x025801ce
   862d4:	02480258 	.word	0x02480258
   862d8:	02500258 	.word	0x02500258
   862dc:	02580258 	.word	0x02580258
   862e0:	02580258 	.word	0x02580258
   862e4:	0258023d 	.word	0x0258023d
   862e8:	02580258 	.word	0x02580258
   862ec:	02580258 	.word	0x02580258
   862f0:	02580258 	.word	0x02580258
   862f4:	02580258 	.word	0x02580258
   862f8:	02580258 	.word	0x02580258
   862fc:	02580258 	.word	0x02580258
   86300:	02580258 	.word	0x02580258
   86304:	02580258 	.word	0x02580258
   86308:	02580258 	.word	0x02580258
   8630c:	02580258 	.word	0x02580258
   86310:	02580258 	.word	0x02580258
   86314:	02580258 	.word	0x02580258
   86318:	02580258 	.word	0x02580258
   8631c:	02580258 	.word	0x02580258
   86320:	02580258 	.word	0x02580258
   86324:	02580258 	.word	0x02580258
   86328:	02580258 	.word	0x02580258
   8632c:	02580258 	.word	0x02580258
   86330:	02580258 	.word	0x02580258
   86334:	02580258 	.word	0x02580258
   86338:	019e0258 	.word	0x019e0258
//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
	uint8_t length = udi_msc_cbw.CDB[4];
   8633c:	f241 44c4 	movw	r4, #5316	; 0x14c4
   86340:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86344:	7ce4      	ldrb	r4, [r4, #19]
   86346:	2c12      	cmp	r4, #18
   86348:	bf28      	it	cs
   8634a:	2412      	movcs	r4, #18

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
		length = sizeof(udi_msc_sense);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
   8634c:	4620      	mov	r0, r4
   8634e:	f04f 0180 	mov.w	r1, #128	; 0x80
   86352:	f645 62e1 	movw	r2, #24289	; 0x5ee1
   86356:	f2c0 0208 	movt	r2, #8
   8635a:	4790      	blx	r2
   8635c:	2800      	cmp	r0, #0
   8635e:	f000 8201 	beq.w	86764 <udi_msc_cbw_received+0x578>
		return;
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
   86362:	f241 5000 	movw	r0, #5376	; 0x1500
   86366:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8636a:	4621      	mov	r1, r4
   8636c:	f645 7325 	movw	r3, #24357	; 0x5f25
   86370:	f2c0 0308 	movt	r3, #8
   86374:	4798      	blx	r3
   86376:	bd70      	pop	{r4, r5, r6, pc}
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
   86378:	f241 44c4 	movw	r4, #5316	; 0x14c4
   8637c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86380:	7ce4      	ldrb	r4, [r4, #19]
   86382:	2c24      	cmp	r4, #36	; 0x24
   86384:	bf28      	it	cs
   86386:	2424      	movcs	r4, #36	; 0x24

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
   86388:	4620      	mov	r0, r4
   8638a:	f04f 0180 	mov.w	r1, #128	; 0x80
   8638e:	f645 62e1 	movw	r2, #24289	; 0x5ee1
   86392:	f2c0 0208 	movt	r2, #8
   86396:	4790      	blx	r2
   86398:	2800      	cmp	r0, #0
   8639a:	f000 81e3 	beq.w	86764 <udi_msc_cbw_received+0x578>
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
   8639e:	f241 40c4 	movw	r0, #5316	; 0x14c4
   863a2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   863a6:	7c01      	ldrb	r1, [r0, #16]
   863a8:	f011 0f03 	tst.w	r1, #3
   863ac:	d105      	bne.n	863ba <udi_msc_cbw_received+0x1ce>
			|| (0 != udi_msc_cbw.CDB[2])) {
   863ae:	f241 43c4 	movw	r3, #5316	; 0x14c4
   863b2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   863b6:	7c5a      	ldrb	r2, [r3, #17]
   863b8:	b152      	cbz	r2, 863d0 <udi_msc_cbw_received+0x1e4>
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
   863ba:	f645 6131 	movw	r1, #24113	; 0x5e31
   863be:	f2c0 0108 	movt	r1, #8
   863c2:	4788      	blx	r1
		udi_msc_csw_process();
   863c4:	f645 6395 	movw	r3, #24213	; 0x5e95
   863c8:	f2c0 0308 	movt	r3, #8
   863cc:	4798      	blx	r3
   863ce:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
   863d0:	f241 45c4 	movw	r5, #5316	; 0x14c4
   863d4:	f2c2 0507 	movt	r5, #8199	; 0x2007
   863d8:	7b68      	ldrb	r0, [r5, #13]
   863da:	f245 36c9 	movw	r6, #21449	; 0x53c9
   863de:	f2c0 0608 	movt	r6, #8
   863e2:	47b0      	blx	r6
   863e4:	2800      	cmp	r0, #0
   863e6:	bf14      	ite	ne
   863e8:	2080      	movne	r0, #128	; 0x80
   863ea:	2000      	moveq	r0, #0
   863ec:	f240 261c 	movw	r6, #540	; 0x21c
   863f0:	f2c2 0607 	movt	r6, #8199	; 0x2007
   863f4:	7070      	strb	r0, [r6, #1]
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
   863f6:	f241 41c4 	movw	r1, #5316	; 0x14c4
   863fa:	f2c2 0107 	movt	r1, #8199	; 0x2007
   863fe:	7b48      	ldrb	r0, [r1, #13]
   86400:	f245 33e1 	movw	r3, #21473	; 0x53e1
   86404:	f2c0 0308 	movt	r3, #8
   86408:	4798      	blx	r3
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
   8640a:	f106 0510 	add.w	r5, r6, #16
   8640e:	4603      	mov	r3, r0
   86410:	f853 0f01 	ldr.w	r0, [r3, #1]!
   86414:	6859      	ldr	r1, [r3, #4]
   86416:	689a      	ldr	r2, [r3, #8]
   86418:	68db      	ldr	r3, [r3, #12]
   8641a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   8641c:	7c32      	ldrb	r2, [r6, #16]
   8641e:	2a00      	cmp	r2, #0
   86420:	f000 819a 	beq.w	86758 <udi_msc_cbw_received+0x56c>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86424:	2a22      	cmp	r2, #34	; 0x22
   86426:	f000 819a 	beq.w	8675e <udi_msc_cbw_received+0x572>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   8642a:	7c71      	ldrb	r1, [r6, #17]
   8642c:	2900      	cmp	r1, #0
   8642e:	d03e      	beq.n	864ae <udi_msc_cbw_received+0x2c2>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86430:	2922      	cmp	r1, #34	; 0x22
   86432:	d06b      	beq.n	8650c <udi_msc_cbw_received+0x320>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   86434:	7cb2      	ldrb	r2, [r6, #18]
   86436:	2a00      	cmp	r2, #0
   86438:	d03c      	beq.n	864b4 <udi_msc_cbw_received+0x2c8>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   8643a:	2a22      	cmp	r2, #34	; 0x22
   8643c:	d069      	beq.n	86512 <udi_msc_cbw_received+0x326>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   8643e:	7cf1      	ldrb	r1, [r6, #19]
   86440:	2900      	cmp	r1, #0
   86442:	d03a      	beq.n	864ba <udi_msc_cbw_received+0x2ce>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86444:	2922      	cmp	r1, #34	; 0x22
   86446:	d067      	beq.n	86518 <udi_msc_cbw_received+0x32c>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   86448:	7d32      	ldrb	r2, [r6, #20]
   8644a:	2a00      	cmp	r2, #0
   8644c:	d038      	beq.n	864c0 <udi_msc_cbw_received+0x2d4>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   8644e:	2a22      	cmp	r2, #34	; 0x22
   86450:	d065      	beq.n	8651e <udi_msc_cbw_received+0x332>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   86452:	7d71      	ldrb	r1, [r6, #21]
   86454:	2900      	cmp	r1, #0
   86456:	d036      	beq.n	864c6 <udi_msc_cbw_received+0x2da>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86458:	2922      	cmp	r1, #34	; 0x22
   8645a:	d063      	beq.n	86524 <udi_msc_cbw_received+0x338>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   8645c:	7db2      	ldrb	r2, [r6, #22]
   8645e:	b3aa      	cbz	r2, 864cc <udi_msc_cbw_received+0x2e0>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86460:	2a22      	cmp	r2, #34	; 0x22
   86462:	d062      	beq.n	8652a <udi_msc_cbw_received+0x33e>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   86464:	7df1      	ldrb	r1, [r6, #23]
   86466:	b3a1      	cbz	r1, 864d2 <udi_msc_cbw_received+0x2e6>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86468:	2922      	cmp	r1, #34	; 0x22
   8646a:	d061      	beq.n	86530 <udi_msc_cbw_received+0x344>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   8646c:	7e32      	ldrb	r2, [r6, #24]
   8646e:	b39a      	cbz	r2, 864d8 <udi_msc_cbw_received+0x2ec>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86470:	2a22      	cmp	r2, #34	; 0x22
   86472:	d060      	beq.n	86536 <udi_msc_cbw_received+0x34a>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   86474:	7e71      	ldrb	r1, [r6, #25]
   86476:	b391      	cbz	r1, 864de <udi_msc_cbw_received+0x2f2>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86478:	2922      	cmp	r1, #34	; 0x22
   8647a:	d05f      	beq.n	8653c <udi_msc_cbw_received+0x350>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   8647c:	7eb2      	ldrb	r2, [r6, #26]
   8647e:	b38a      	cbz	r2, 864e4 <udi_msc_cbw_received+0x2f8>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86480:	2a22      	cmp	r2, #34	; 0x22
   86482:	d05e      	beq.n	86542 <udi_msc_cbw_received+0x356>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   86484:	7ef1      	ldrb	r1, [r6, #27]
   86486:	b381      	cbz	r1, 864ea <udi_msc_cbw_received+0x2fe>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86488:	2922      	cmp	r1, #34	; 0x22
   8648a:	d05d      	beq.n	86548 <udi_msc_cbw_received+0x35c>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   8648c:	7f32      	ldrb	r2, [r6, #28]
   8648e:	b37a      	cbz	r2, 864f0 <udi_msc_cbw_received+0x304>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86490:	2a22      	cmp	r2, #34	; 0x22
   86492:	d05c      	beq.n	8654e <udi_msc_cbw_received+0x362>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   86494:	7f71      	ldrb	r1, [r6, #29]
   86496:	b371      	cbz	r1, 864f6 <udi_msc_cbw_received+0x30a>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86498:	2922      	cmp	r1, #34	; 0x22
   8649a:	d05b      	beq.n	86554 <udi_msc_cbw_received+0x368>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   8649c:	7fb2      	ldrb	r2, [r6, #30]
   8649e:	b36a      	cbz	r2, 864fc <udi_msc_cbw_received+0x310>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   864a0:	2a22      	cmp	r2, #34	; 0x22
   864a2:	d05a      	beq.n	8655a <udi_msc_cbw_received+0x36e>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   864a4:	7ff3      	ldrb	r3, [r6, #31]
   864a6:	bb63      	cbnz	r3, 86502 <udi_msc_cbw_received+0x316>
   864a8:	f04f 030f 	mov.w	r3, #15
   864ac:	e057      	b.n	8655e <udi_msc_cbw_received+0x372>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
			break;
		}
		i++;
   864ae:	f04f 0301 	mov.w	r3, #1
   864b2:	e054      	b.n	8655e <udi_msc_cbw_received+0x372>
   864b4:	f04f 0302 	mov.w	r3, #2
   864b8:	e051      	b.n	8655e <udi_msc_cbw_received+0x372>
   864ba:	f04f 0303 	mov.w	r3, #3
   864be:	e04e      	b.n	8655e <udi_msc_cbw_received+0x372>
   864c0:	f04f 0304 	mov.w	r3, #4
   864c4:	e04b      	b.n	8655e <udi_msc_cbw_received+0x372>
   864c6:	f04f 0305 	mov.w	r3, #5
   864ca:	e048      	b.n	8655e <udi_msc_cbw_received+0x372>
   864cc:	f04f 0306 	mov.w	r3, #6
   864d0:	e045      	b.n	8655e <udi_msc_cbw_received+0x372>
   864d2:	f04f 0307 	mov.w	r3, #7
   864d6:	e042      	b.n	8655e <udi_msc_cbw_received+0x372>
   864d8:	f04f 0308 	mov.w	r3, #8
   864dc:	e03f      	b.n	8655e <udi_msc_cbw_received+0x372>
   864de:	f04f 0309 	mov.w	r3, #9
   864e2:	e03c      	b.n	8655e <udi_msc_cbw_received+0x372>
   864e4:	f04f 030a 	mov.w	r3, #10
   864e8:	e039      	b.n	8655e <udi_msc_cbw_received+0x372>
   864ea:	f04f 030b 	mov.w	r3, #11
   864ee:	e036      	b.n	8655e <udi_msc_cbw_received+0x372>
   864f0:	f04f 030c 	mov.w	r3, #12
   864f4:	e033      	b.n	8655e <udi_msc_cbw_received+0x372>
   864f6:	f04f 030d 	mov.w	r3, #13
   864fa:	e030      	b.n	8655e <udi_msc_cbw_received+0x372>
   864fc:	f04f 030e 	mov.w	r3, #14
   86500:	e02d      	b.n	8655e <udi_msc_cbw_received+0x372>

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86502:	2b22      	cmp	r3, #34	; 0x22
   86504:	bf08      	it	eq
   86506:	230f      	moveq	r3, #15
   86508:	d029      	beq.n	8655e <udi_msc_cbw_received+0x372>
   8650a:	e047      	b.n	8659c <udi_msc_cbw_received+0x3b0>
			break;
		}
		i++;
   8650c:	f04f 0301 	mov.w	r3, #1
   86510:	e025      	b.n	8655e <udi_msc_cbw_received+0x372>
   86512:	f04f 0302 	mov.w	r3, #2
   86516:	e022      	b.n	8655e <udi_msc_cbw_received+0x372>
   86518:	f04f 0303 	mov.w	r3, #3
   8651c:	e01f      	b.n	8655e <udi_msc_cbw_received+0x372>
   8651e:	f04f 0304 	mov.w	r3, #4
   86522:	e01c      	b.n	8655e <udi_msc_cbw_received+0x372>
   86524:	f04f 0305 	mov.w	r3, #5
   86528:	e019      	b.n	8655e <udi_msc_cbw_received+0x372>
   8652a:	f04f 0306 	mov.w	r3, #6
   8652e:	e016      	b.n	8655e <udi_msc_cbw_received+0x372>
   86530:	f04f 0307 	mov.w	r3, #7
   86534:	e013      	b.n	8655e <udi_msc_cbw_received+0x372>
   86536:	f04f 0308 	mov.w	r3, #8
   8653a:	e010      	b.n	8655e <udi_msc_cbw_received+0x372>
   8653c:	f04f 0309 	mov.w	r3, #9
   86540:	e00d      	b.n	8655e <udi_msc_cbw_received+0x372>
   86542:	f04f 030a 	mov.w	r3, #10
   86546:	e00a      	b.n	8655e <udi_msc_cbw_received+0x372>
   86548:	f04f 030b 	mov.w	r3, #11
   8654c:	e007      	b.n	8655e <udi_msc_cbw_received+0x372>
   8654e:	f04f 030c 	mov.w	r3, #12
   86552:	e004      	b.n	8655e <udi_msc_cbw_received+0x372>
   86554:	f04f 030d 	mov.w	r3, #13
   86558:	e001      	b.n	8655e <udi_msc_cbw_received+0x372>
   8655a:	f04f 030e 	mov.w	r3, #14
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		udi_msc_inquiry_data.product_id[i] = ' ';
   8655e:	f240 211c 	movw	r1, #540	; 0x21c
   86562:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86566:	f04f 0220 	mov.w	r2, #32
   8656a:	f1c3 050f 	rsb	r5, r3, #15
   8656e:	f005 0001 	and.w	r0, r5, #1
   86572:	18cd      	adds	r5, r1, r3
   86574:	742a      	strb	r2, [r5, #16]
		i++;
   86576:	f103 0301 	add.w	r3, r3, #1
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   8657a:	2b10      	cmp	r3, #16
   8657c:	f040 80f3 	bne.w	86766 <udi_msc_cbw_received+0x57a>
   86580:	e00c      	b.n	8659c <udi_msc_cbw_received+0x3b0>
		udi_msc_inquiry_data.product_id[i] = ' ';
   86582:	18c8      	adds	r0, r1, r3
   86584:	7402      	strb	r2, [r0, #16]
		i++;
   86586:	f103 0301 	add.w	r3, r3, #1
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   8658a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
		udi_msc_inquiry_data.product_id[i] = ' ';
   8658e:	18c8      	adds	r0, r1, r3
   86590:	7402      	strb	r2, [r0, #16]
		i++;
   86592:	f103 0301 	add.w	r3, r3, #1
   86596:	b2db      	uxtb	r3, r3
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   86598:	2b10      	cmp	r3, #16
   8659a:	d1f2      	bne.n	86582 <udi_msc_cbw_received+0x396>
		udi_msc_inquiry_data.product_id[i] = ' ';
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
   8659c:	f240 201c 	movw	r0, #540	; 0x21c
   865a0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   865a4:	4621      	mov	r1, r4
   865a6:	f645 7225 	movw	r2, #24357	; 0x5f25
   865aa:	f2c0 0208 	movt	r2, #8
   865ae:	4790      	blx	r2
   865b0:	bd70      	pop	{r4, r5, r6, pc}
	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
		break;

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
   865b2:	f04f 0000 	mov.w	r0, #0
   865b6:	f246 0351 	movw	r3, #24657	; 0x6051
   865ba:	f2c0 0308 	movt	r3, #8
   865be:	4798      	blx	r3
		break;
   865c0:	bd70      	pop	{r4, r5, r6, pc}
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
   865c2:	f04f 0001 	mov.w	r0, #1
   865c6:	f246 0251 	movw	r2, #24657	; 0x6051
   865ca:	f2c0 0208 	movt	r2, #8
   865ce:	4790      	blx	r2
		break;
   865d0:	bd70      	pop	{r4, r5, r6, pc}
}


static bool udi_msc_spc_testunitready_global(void)
{
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
   865d2:	f245 3171 	movw	r1, #21361	; 0x5371
   865d6:	f2c0 0108 	movt	r1, #8
   865da:	4788      	blx	r1
   865dc:	2802      	cmp	r0, #2
   865de:	d009      	beq.n	865f4 <udi_msc_cbw_received+0x408>
   865e0:	2803      	cmp	r0, #3
   865e2:	d001      	beq.n	865e8 <udi_msc_cbw_received+0x3fc>
   865e4:	b190      	cbz	r0, 8660c <udi_msc_cbw_received+0x420>
   865e6:	e00b      	b.n	86600 <udi_msc_cbw_received+0x414>
	case CTRL_GOOD:
		return true;	// Don't change sense data
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   865e8:	f645 53e1 	movw	r3, #24033	; 0x5de1
   865ec:	f2c0 0308 	movt	r3, #8
   865f0:	4798      	blx	r3
   865f2:	e010      	b.n	86616 <udi_msc_cbw_received+0x42a>
		break;
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   865f4:	f645 51fd 	movw	r1, #24061	; 0x5dfd
   865f8:	f2c0 0108 	movt	r1, #8
   865fc:	4788      	blx	r1
   865fe:	e00a      	b.n	86616 <udi_msc_cbw_received+0x42a>
		break;
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
   86600:	f645 6019 	movw	r0, #24089	; 0x5e19
   86604:	f2c0 0008 	movt	r0, #8
   86608:	4780      	blx	r0
   8660a:	e004      	b.n	86616 <udi_msc_cbw_received+0x42a>

static void udi_msc_spc_testunitready(void)
{
	if (udi_msc_spc_testunitready_global()) {
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
   8660c:	f645 527d 	movw	r2, #23933	; 0x5d7d
   86610:	f2c0 0208 	movt	r2, #8
   86614:	4790      	blx	r2
	}
	// Send status in CSW packet
	udi_msc_csw_process();
   86616:	f645 6095 	movw	r0, #24213	; 0x5e95
   8661a:	f2c0 0008 	movt	r0, #8
   8661e:	4780      	blx	r0
   86620:	bd70      	pop	{r4, r5, r6, pc}

static void udi_msc_sbc_read_capacity(void)
{
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
   86622:	f04f 0008 	mov.w	r0, #8
   86626:	f04f 0180 	mov.w	r1, #128	; 0x80
   8662a:	f645 63e1 	movw	r3, #24289	; 0x5ee1
   8662e:	f2c0 0308 	movt	r3, #8
   86632:	4798      	blx	r3
   86634:	2800      	cmp	r0, #0
   86636:	f000 8095 	beq.w	86764 <udi_msc_cbw_received+0x578>
					USB_CBW_DIRECTION_IN))
		return;

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
   8663a:	f241 40c4 	movw	r0, #5316	; 0x14c4
   8663e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86642:	7b40      	ldrb	r0, [r0, #13]
   86644:	f241 5118 	movw	r1, #5400	; 0x1518
   86648:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8664c:	f245 3289 	movw	r2, #21385	; 0x5389
   86650:	f2c0 0208 	movt	r2, #8
   86654:	4790      	blx	r2
   86656:	2802      	cmp	r0, #2
   86658:	d008      	beq.n	8666c <udi_msc_cbw_received+0x480>
   8665a:	2803      	cmp	r0, #3
   8665c:	d001      	beq.n	86662 <udi_msc_cbw_received+0x476>
   8665e:	b178      	cbz	r0, 86680 <udi_msc_cbw_received+0x494>
   86660:	e009      	b.n	86676 <udi_msc_cbw_received+0x48a>
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   86662:	4847      	ldr	r0, [pc, #284]	; (86780 <udi_msc_cbw_received+0x594>)
   86664:	4780      	blx	r0
		udi_msc_csw_process();
   86666:	4947      	ldr	r1, [pc, #284]	; (86784 <udi_msc_cbw_received+0x598>)
   86668:	4788      	blx	r1
   8666a:	bd70      	pop	{r4, r5, r6, pc}
		return;
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   8666c:	4b46      	ldr	r3, [pc, #280]	; (86788 <udi_msc_cbw_received+0x59c>)
   8666e:	4798      	blx	r3
		udi_msc_csw_process();
   86670:	4a44      	ldr	r2, [pc, #272]	; (86784 <udi_msc_cbw_received+0x598>)
   86672:	4790      	blx	r2
   86674:	bd70      	pop	{r4, r5, r6, pc}
		return;
	default:
		udi_msc_sense_fail_hardware();
   86676:	4945      	ldr	r1, [pc, #276]	; (8678c <udi_msc_cbw_received+0x5a0>)
   86678:	4788      	blx	r1
		udi_msc_csw_process();
   8667a:	4b42      	ldr	r3, [pc, #264]	; (86784 <udi_msc_cbw_received+0x598>)
   8667c:	4798      	blx	r3
   8667e:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
   86680:	4843      	ldr	r0, [pc, #268]	; (86790 <udi_msc_cbw_received+0x5a4>)
   86682:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   86686:	6042      	str	r2, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
   86688:	6801      	ldr	r1, [r0, #0]
   8668a:	ba0b      	rev	r3, r1
   8668c:	6003      	str	r3, [r0, #0]
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
   8668e:	f04f 0108 	mov.w	r1, #8
   86692:	4a40      	ldr	r2, [pc, #256]	; (86794 <udi_msc_cbw_received+0x5a8>)
   86694:	4790      	blx	r2
   86696:	bd70      	pop	{r4, r5, r6, pc}
}


static void udi_msc_sbc_start_stop(void)
{
	bool start = 0x1 & udi_msc_cbw.CDB[4];
   86698:	f241 41c4 	movw	r1, #5316	; 0x14c4
   8669c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   866a0:	7ccb      	ldrb	r3, [r1, #19]
	bool loej = 0x2 & udi_msc_cbw.CDB[4];
	if (loej) {
   866a2:	f003 0202 	and.w	r2, r3, #2
   866a6:	b2d1      	uxtb	r1, r2
   866a8:	b141      	cbz	r1, 866bc <udi_msc_cbw_received+0x4d0>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
   866aa:	f083 0301 	eor.w	r3, r3, #1
   866ae:	f003 0101 	and.w	r1, r3, #1
   866b2:	f245 32a1 	movw	r2, #21409	; 0x53a1
   866b6:	f2c0 0208 	movt	r2, #8
   866ba:	4790      	blx	r2
	}
	udi_msc_sense_pass();
   866bc:	f645 507d 	movw	r0, #23933	; 0x5d7d
   866c0:	f2c0 0008 	movt	r0, #8
   866c4:	4780      	blx	r0
	udi_msc_csw_process();
   866c6:	f645 6195 	movw	r1, #24213	; 0x5e95
   866ca:	f2c0 0108 	movt	r1, #8
   866ce:	4788      	blx	r1
   866d0:	bd70      	pop	{r4, r5, r6, pc}
}


static void udi_msc_spc_prevent_allow_medium_removal(void)
{
	uint8_t prevent = udi_msc_cbw.CDB[4];
   866d2:	f241 40c4 	movw	r0, #5316	; 0x14c4
   866d6:	f2c2 0007 	movt	r0, #8199	; 0x2007
	if (0 == prevent) {
   866da:	7cc1      	ldrb	r1, [r0, #19]
   866dc:	b929      	cbnz	r1, 866ea <udi_msc_cbw_received+0x4fe>
		udi_msc_sense_pass();
   866de:	f645 527d 	movw	r2, #23933	; 0x5d7d
   866e2:	f2c0 0208 	movt	r2, #8
   866e6:	4790      	blx	r2
   866e8:	e004      	b.n	866f4 <udi_msc_cbw_received+0x508>
	} else {
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
   866ea:	f645 6331 	movw	r3, #24113	; 0x5e31
   866ee:	f2c0 0308 	movt	r3, #8
   866f2:	4798      	blx	r3
	}
	udi_msc_csw_process();
   866f4:	f645 6095 	movw	r0, #24213	; 0x5e95
   866f8:	f2c0 0008 	movt	r0, #8
   866fc:	4780      	blx	r0
   866fe:	bd70      	pop	{r4, r5, r6, pc}
		udi_msc_spc_prevent_allow_medium_removal();
		break;

		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
   86700:	f645 507d 	movw	r0, #23933	; 0x5d7d
   86704:	f2c0 0008 	movt	r0, #8
   86708:	4780      	blx	r0
		udi_msc_csw_process();
   8670a:	f645 6195 	movw	r1, #24213	; 0x5e95
   8670e:	f2c0 0108 	movt	r1, #8
   86712:	4788      	blx	r1
		break;
   86714:	bd70      	pop	{r4, r5, r6, pc}

	case SBC_READ10:
		udi_msc_sbc_trans(true);
   86716:	f04f 0001 	mov.w	r0, #1
   8671a:	f246 1249 	movw	r2, #24905	; 0x6149
   8671e:	f2c0 0208 	movt	r2, #8
   86722:	4790      	blx	r2
		break;
   86724:	bd70      	pop	{r4, r5, r6, pc}

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
   86726:	f04f 0000 	mov.w	r0, #0
   8672a:	f246 1349 	movw	r3, #24905	; 0x6149
   8672e:	f2c0 0308 	movt	r3, #8
   86732:	4798      	blx	r3
		break;
   86734:	bd70      	pop	{r4, r5, r6, pc}
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}

static void udi_msc_sense_command_invalid(void)
{
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
   86736:	f04f 0005 	mov.w	r0, #5
   8673a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   8673e:	f04f 0200 	mov.w	r2, #0
   86742:	f645 5399 	movw	r3, #23961	; 0x5d99
   86746:	f2c0 0308 	movt	r3, #8
   8674a:	4798      	blx	r3
		udi_msc_sbc_trans(false);
		break;

	default:
		udi_msc_sense_command_invalid();
		udi_msc_csw_process();
   8674c:	f645 6295 	movw	r2, #24213	; 0x5e95
   86750:	f2c0 0208 	movt	r2, #8
   86754:	4790      	blx	r2
		break;
   86756:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
   86758:	f04f 0300 	mov.w	r3, #0
   8675c:	e6ff      	b.n	8655e <udi_msc_cbw_received+0x372>
   8675e:	f04f 0300 	mov.w	r3, #0
   86762:	e6fc      	b.n	8655e <udi_msc_cbw_received+0x372>
   86764:	bd70      	pop	{r4, r5, r6, pc}
   86766:	b240      	sxtb	r0, r0
   86768:	2800      	cmp	r0, #0
   8676a:	f43f af0a 	beq.w	86582 <udi_msc_cbw_received+0x396>
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		udi_msc_inquiry_data.product_id[i] = ' ';
   8676e:	18c8      	adds	r0, r1, r3
   86770:	7402      	strb	r2, [r0, #16]
		i++;
   86772:	f103 0301 	add.w	r3, r3, #1
   86776:	b2db      	uxtb	r3, r3
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   86778:	2b10      	cmp	r3, #16
   8677a:	f47f af02 	bne.w	86582 <udi_msc_cbw_received+0x396>
   8677e:	e70d      	b.n	8659c <udi_msc_cbw_received+0x3b0>
   86780:	00085de1 	.word	0x00085de1
   86784:	00085e95 	.word	0x00085e95
   86788:	00085dfd 	.word	0x00085dfd
   8678c:	00085e19 	.word	0x00085e19
   86790:	20071518 	.word	0x20071518
   86794:	00085f25 	.word	0x00085f25

00086798 <udi_msc_setup>:
	UDI_MSC_DISABLE_EXT();
}


bool udi_msc_setup(void)
{
   86798:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
   8679a:	f641 4354 	movw	r3, #7252	; 0x1c54
   8679e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   867a2:	7818      	ldrb	r0, [r3, #0]
   867a4:	f010 0f80 	tst.w	r0, #128	; 0x80
   867a8:	d025      	beq.n	867f6 <udi_msc_setup+0x5e>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   867aa:	f000 0260 	and.w	r2, r0, #96	; 0x60
   867ae:	2a20      	cmp	r2, #32
   867b0:	d156      	bne.n	86860 <udi_msc_setup+0xc8>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   867b2:	f641 4354 	movw	r3, #7252	; 0x1c54
   867b6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   867ba:	7858      	ldrb	r0, [r3, #1]
   867bc:	28fe      	cmp	r0, #254	; 0xfe
   867be:	d152      	bne.n	86866 <udi_msc_setup+0xce>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
   867c0:	f641 4154 	movw	r1, #7252	; 0x1c54
   867c4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   867c8:	88ca      	ldrh	r2, [r1, #6]
   867ca:	2a01      	cmp	r2, #1
   867cc:	d14e      	bne.n	8686c <udi_msc_setup+0xd4>
					return false;	// Error for USB host
				if (0 != udd_g_ctrlreq.req.wValue)
   867ce:	f641 4354 	movw	r3, #7252	; 0x1c54
   867d2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   867d6:	8858      	ldrh	r0, [r3, #2]
   867d8:	2800      	cmp	r0, #0
   867da:	d14a      	bne.n	86872 <udi_msc_setup+0xda>
					return false;
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
   867dc:	f641 4154 	movw	r1, #7252	; 0x1c54
   867e0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   867e4:	f241 42bc 	movw	r2, #5308	; 0x14bc
   867e8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   867ec:	608a      	str	r2, [r1, #8]
				udd_g_ctrlreq.payload_size = 1;
   867ee:	f04f 0001 	mov.w	r0, #1
   867f2:	8188      	strh	r0, [r1, #12]
				return true;
   867f4:	bd10      	pop	{r4, pc}
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   867f6:	f000 0160 	and.w	r1, r0, #96	; 0x60
   867fa:	2920      	cmp	r1, #32
   867fc:	d13c      	bne.n	86878 <udi_msc_setup+0xe0>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   867fe:	f641 4254 	movw	r2, #7252	; 0x1c54
   86802:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86806:	7853      	ldrb	r3, [r2, #1]
   86808:	2bff      	cmp	r3, #255	; 0xff
   8680a:	d138      	bne.n	8687e <udi_msc_setup+0xe6>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
   8680c:	f641 4054 	movw	r0, #7252	; 0x1c54
   86810:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86814:	88c1      	ldrh	r1, [r0, #6]
   86816:	2900      	cmp	r1, #0
   86818:	d134      	bne.n	86884 <udi_msc_setup+0xec>
					return false;
				if (0 != udd_g_ctrlreq.req.wValue)
   8681a:	f641 4254 	movw	r2, #7252	; 0x1c54
   8681e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86822:	8853      	ldrh	r3, [r2, #2]
   86824:	2b00      	cmp	r3, #0
   86826:	d130      	bne.n	8688a <udi_msc_setup+0xf2>
					return false;
				udi_msc_b_cbw_invalid = false;
   86828:	f241 44e4 	movw	r4, #5348	; 0x14e4
   8682c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86830:	7023      	strb	r3, [r4, #0]
				udi_msc_b_trans_req = false;
   86832:	f241 40c0 	movw	r0, #5312	; 0x14c0
   86836:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8683a:	7003      	strb	r3, [r0, #0]
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
   8683c:	f04f 0002 	mov.w	r0, #2
   86840:	f649 0401 	movw	r4, #38913	; 0x9801
   86844:	f2c0 0408 	movt	r4, #8
   86848:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
   8684a:	f04f 0081 	mov.w	r0, #129	; 0x81
   8684e:	47a0      	blx	r4
				// Restart by CBW wait
				udi_msc_cbw_wait();
   86850:	f645 7191 	movw	r1, #24465	; 0x5f91
   86854:	f2c0 0108 	movt	r1, #8
   86858:	4788      	blx	r1
				return true;
   8685a:	f04f 0001 	mov.w	r0, #1
   8685e:	bd10      	pop	{r4, pc}
			}
		}
	}
	return false;	// Not supported request
   86860:	f04f 0000 	mov.w	r0, #0
   86864:	bd10      	pop	{r4, pc}
   86866:	f04f 0000 	mov.w	r0, #0
   8686a:	bd10      	pop	{r4, pc}
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
   8686c:	f04f 0000 	mov.w	r0, #0
   86870:	bd10      	pop	{r4, pc}
				if (0 != udd_g_ctrlreq.req.wValue)
					return false;
   86872:	f04f 0000 	mov.w	r0, #0
   86876:	bd10      	pop	{r4, pc}
				udi_msc_cbw_wait();
				return true;
			}
		}
	}
	return false;	// Not supported request
   86878:	f04f 0000 	mov.w	r0, #0
   8687c:	bd10      	pop	{r4, pc}
   8687e:	f04f 0000 	mov.w	r0, #0
   86882:	bd10      	pop	{r4, pc}
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
   86884:	f04f 0000 	mov.w	r0, #0
   86888:	bd10      	pop	{r4, pc}
				if (0 != udd_g_ctrlreq.req.wValue)
					return false;
   8688a:	f04f 0000 	mov.w	r0, #0
				return true;
			}
		}
	}
	return false;	// Not supported request
}
   8688e:	bd10      	pop	{r4, pc}

00086890 <udi_msc_disable>:
	return true;
}


void udi_msc_disable(void)
{
   86890:	b508      	push	{r3, lr}
	udi_msc_b_trans_req = false;
   86892:	f241 43c0 	movw	r3, #5312	; 0x14c0
   86896:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8689a:	f04f 0200 	mov.w	r2, #0
   8689e:	701a      	strb	r2, [r3, #0]
	UDI_MSC_DISABLE_EXT();
   868a0:	f24a 0019 	movw	r0, #40985	; 0xa019
   868a4:	f2c0 0008 	movt	r0, #8
   868a8:	4780      	blx	r0
   868aa:	bd08      	pop	{r3, pc}

000868ac <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
   868ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t lun;
	udi_msc_b_trans_req = false;
   868ae:	f04f 0300 	mov.w	r3, #0
   868b2:	f241 42c0 	movw	r2, #5312	; 0x14c0
   868b6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   868ba:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
   868bc:	f241 40e4 	movw	r0, #5348	; 0x14e4
   868c0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   868c4:	7003      	strb	r3, [r0, #0]
	udi_msc_nb_lun = get_nb_lun();
   868c6:	f245 3169 	movw	r1, #21353	; 0x5369
   868ca:	f2c0 0108 	movt	r1, #8
   868ce:	4788      	blx	r1
	if (0 == udi_msc_nb_lun)
   868d0:	b928      	cbnz	r0, 868de <udi_msc_enable+0x32>
bool udi_msc_enable(void)
{
	uint8_t lun;
	udi_msc_b_trans_req = false;
	udi_msc_b_cbw_invalid = false;
	udi_msc_nb_lun = get_nb_lun();
   868d2:	f241 42bc 	movw	r2, #5308	; 0x14bc
   868d6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   868da:	7010      	strb	r0, [r2, #0]
   868dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (0 == udi_msc_nb_lun)
		return false; // No lun available, then not authorize to enable interface
	udi_msc_nb_lun--;
   868de:	f100 30ff 	add.w	r0, r0, #4294967295
   868e2:	f241 42bc 	movw	r2, #5308	; 0x14bc
   868e6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   868ea:	7010      	strb	r0, [r2, #0]
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
   868ec:	f24a 0109 	movw	r1, #40969	; 0xa009
   868f0:	f2c0 0108 	movt	r1, #8
   868f4:	4788      	blx	r1
   868f6:	b1d8      	cbz	r0, 86930 <udi_msc_enable+0x84>
   868f8:	f04f 0400 	mov.w	r4, #0
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
		mem_unload(lun, false);
   868fc:	4627      	mov	r7, r4
   868fe:	f245 36a1 	movw	r6, #21409	; 0x53a1
   86902:	f2c0 0608 	movt	r6, #8
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
   86906:	f241 45bc 	movw	r5, #5308	; 0x14bc
   8690a:	f2c2 0507 	movt	r5, #8199	; 0x2007
		mem_unload(lun, false);
   8690e:	4620      	mov	r0, r4
   86910:	4639      	mov	r1, r7
   86912:	47b0      	blx	r6
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
   86914:	f104 0401 	add.w	r4, r4, #1
   86918:	b2e4      	uxtb	r4, r4
   8691a:	782b      	ldrb	r3, [r5, #0]
   8691c:	42a3      	cmp	r3, r4
   8691e:	d2f6      	bcs.n	8690e <udi_msc_enable+0x62>
		mem_unload(lun, false);
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
   86920:	f645 7091 	movw	r0, #24465	; 0x5f91
   86924:	f2c0 0008 	movt	r0, #8
   86928:	4780      	blx	r0
	return true;
   8692a:	f04f 0001 	mov.w	r0, #1
   8692e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // No lun available, then not authorize to enable interface
	udi_msc_nb_lun--;
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
   86930:	f04f 0000 	mov.w	r0, #0
		mem_unload(lun, false);
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
	return true;
}
   86934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86936:	bf00      	nop

00086938 <udi_msc_process_trans>:
	UDI_MSC_NOTIFY_TRANS_EXT();
}


bool udi_msc_process_trans(void)
{
   86938:	b508      	push	{r3, lr}
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
   8693a:	f241 43c0 	movw	r3, #5312	; 0x14c0
   8693e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86942:	7818      	ldrb	r0, [r3, #0]
   86944:	2800      	cmp	r0, #0
   86946:	d059      	beq.n	869fc <udi_msc_process_trans+0xc4>
		return false;	// No Transfer request to do
	udi_msc_b_trans_req = false;
   86948:	f241 41c0 	movw	r1, #5312	; 0x14c0
   8694c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86950:	f04f 0200 	mov.w	r2, #0
   86954:	700a      	strb	r2, [r1, #0]

	// Start transfer
	if (udi_msc_b_read) {
   86956:	f241 5314 	movw	r3, #5396	; 0x1514
   8695a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8695e:	7818      	ldrb	r0, [r3, #0]
   86960:	b1a0      	cbz	r0, 8698c <udi_msc_process_trans+0x54>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
   86962:	f241 40c4 	movw	r0, #5316	; 0x14c4
   86966:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8696a:	7b40      	ldrb	r0, [r0, #13]
   8696c:	f241 41fc 	movw	r1, #5372	; 0x14fc
   86970:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86974:	6809      	ldr	r1, [r1, #0]
   86976:	f241 5216 	movw	r2, #5398	; 0x1516
   8697a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8697e:	8812      	ldrh	r2, [r2, #0]
   86980:	f245 33f5 	movw	r3, #21493	; 0x53f5
   86984:	f2c0 0308 	movt	r3, #8
   86988:	4798      	blx	r3
   8698a:	e013      	b.n	869b4 <udi_msc_process_trans+0x7c>
				udi_msc_nb_block);
	} else {
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
   8698c:	f241 41c4 	movw	r1, #5316	; 0x14c4
   86990:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86994:	7b48      	ldrb	r0, [r1, #13]
   86996:	f241 42fc 	movw	r2, #5372	; 0x14fc
   8699a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8699e:	6811      	ldr	r1, [r2, #0]
   869a0:	f241 5316 	movw	r3, #5398	; 0x1516
   869a4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   869a8:	881a      	ldrh	r2, [r3, #0]
   869aa:	f245 4311 	movw	r3, #21521	; 0x5411
   869ae:	f2c0 0308 	movt	r3, #8
   869b2:	4798      	blx	r3
				udi_msc_nb_block);
	}

	// Check status of transfer
	switch (status) {
   869b4:	2802      	cmp	r0, #2
   869b6:	d00e      	beq.n	869d6 <udi_msc_process_trans+0x9e>
   869b8:	2803      	cmp	r0, #3
   869ba:	d006      	beq.n	869ca <udi_msc_process_trans+0x92>
   869bc:	b988      	cbnz	r0, 869e2 <udi_msc_process_trans+0xaa>
	case CTRL_GOOD:
		udi_msc_sense_pass();
   869be:	f645 517d 	movw	r1, #23933	; 0x5d7d
   869c2:	f2c0 0108 	movt	r1, #8
   869c6:	4788      	blx	r1
		break;
   869c8:	e010      	b.n	869ec <udi_msc_process_trans+0xb4>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   869ca:	f645 52e1 	movw	r2, #24033	; 0x5de1
   869ce:	f2c0 0208 	movt	r2, #8
   869d2:	4790      	blx	r2
		break;
   869d4:	e00a      	b.n	869ec <udi_msc_process_trans+0xb4>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   869d6:	f645 53fd 	movw	r3, #24061	; 0x5dfd
   869da:	f2c0 0308 	movt	r3, #8
   869de:	4798      	blx	r3
		break;
   869e0:	e004      	b.n	869ec <udi_msc_process_trans+0xb4>
	default:
	case CTRL_FAIL:
		udi_msc_sense_fail_hardware();
   869e2:	f645 6019 	movw	r0, #24089	; 0x5e19
   869e6:	f2c0 0008 	movt	r0, #8
   869ea:	4780      	blx	r0
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
   869ec:	f645 6095 	movw	r0, #24213	; 0x5e95
   869f0:	f2c0 0008 	movt	r0, #8
   869f4:	4780      	blx	r0
	return true;
   869f6:	f04f 0001 	mov.w	r0, #1
   869fa:	bd08      	pop	{r3, pc}
bool udi_msc_process_trans(void)
{
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
		return false;	// No Transfer request to do
   869fc:	f04f 0000 	mov.w	r0, #0
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
	return true;
}
   86a00:	bd08      	pop	{r3, pc}
   86a02:	bf00      	nop

00086a04 <udi_msc_trans_block>:
}


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
   86a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   86a06:	b083      	sub	sp, #12
   86a08:	460f      	mov	r7, r1
   86a0a:	4615      	mov	r5, r2
	if (!udi_msc_b_ack_trans)
   86a0c:	f240 2404 	movw	r4, #516	; 0x204
   86a10:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86a14:	7824      	ldrb	r4, [r4, #0]
   86a16:	2c00      	cmp	r4, #0
   86a18:	d03d      	beq.n	86a96 <udi_msc_trans_block+0x92>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
   86a1a:	f240 2104 	movw	r1, #516	; 0x204
   86a1e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86a22:	f04f 0600 	mov.w	r6, #0
   86a26:	700e      	strb	r6, [r1, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
   86a28:	42b0      	cmp	r0, r6
   86a2a:	bf0c      	ite	eq
   86a2c:	2002      	moveq	r0, #2
   86a2e:	2081      	movne	r0, #129	; 0x81
   86a30:	2b00      	cmp	r3, #0
   86a32:	d141      	bne.n	86ab8 <udi_msc_trans_block+0xb4>
   86a34:	e035      	b.n	86aa2 <udi_msc_trans_block+0x9e>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
   86a36:	f240 2304 	movw	r3, #516	; 0x204
   86a3a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86a3e:	f04f 0001 	mov.w	r0, #1
   86a42:	7018      	strb	r0, [r3, #0]
		return false;
   86a44:	f04f 0000 	mov.w	r0, #0
   86a48:	e040      	b.n	86acc <udi_msc_trans_block+0xc8>
	}
	if (NULL == callback) {
		while (!udi_msc_b_ack_trans);
   86a4a:	f240 2204 	movw	r2, #516	; 0x204
   86a4e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86a52:	7810      	ldrb	r0, [r2, #0]
   86a54:	2800      	cmp	r0, #0
   86a56:	d0fc      	beq.n	86a52 <udi_msc_trans_block+0x4e>
		if (udi_msc_b_abort_trans) {
   86a58:	f641 4151 	movw	r1, #7249	; 0x1c51
   86a5c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86a60:	780b      	ldrb	r3, [r1, #0]
   86a62:	b9db      	cbnz	r3, 86a9c <udi_msc_trans_block+0x98>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
   86a64:	f240 2040 	movw	r0, #576	; 0x240
   86a68:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86a6c:	6882      	ldr	r2, [r0, #8]
   86a6e:	1b51      	subs	r1, r2, r5
   86a70:	6081      	str	r1, [r0, #8]
		return (!udi_msc_b_abort_trans);
   86a72:	f641 4351 	movw	r3, #7249	; 0x1c51
   86a76:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86a7a:	7818      	ldrb	r0, [r3, #0]
   86a7c:	f080 0001 	eor.w	r0, r0, #1
   86a80:	e024      	b.n	86acc <udi_msc_trans_block+0xc8>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
   86a82:	f240 2140 	movw	r1, #576	; 0x240
   86a86:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86a8a:	688a      	ldr	r2, [r1, #8]
   86a8c:	1b55      	subs	r5, r2, r5
   86a8e:	608d      	str	r5, [r1, #8]
	return true;
   86a90:	f04f 0001 	mov.w	r0, #1
   86a94:	e01a      	b.n	86acc <udi_msc_trans_block+0xc8>

bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
	if (!udi_msc_b_ack_trans)
		return false;	// No possible, transfer on going
   86a96:	f04f 0000 	mov.w	r0, #0
   86a9a:	e017      	b.n	86acc <udi_msc_trans_block+0xc8>
		return false;
	}
	if (NULL == callback) {
		while (!udi_msc_b_ack_trans);
		if (udi_msc_b_abort_trans) {
			return false;
   86a9c:	f04f 0000 	mov.w	r0, #0
   86aa0:	e014      	b.n	86acc <udi_msc_trans_block+0xc8>
	if (!udi_msc_b_ack_trans)
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
   86aa2:	4b0b      	ldr	r3, [pc, #44]	; (86ad0 <udi_msc_trans_block+0xcc>)
   86aa4:	9300      	str	r3, [sp, #0]
   86aa6:	f04f 0100 	mov.w	r1, #0
   86aaa:	463a      	mov	r2, r7
   86aac:	462b      	mov	r3, r5
   86aae:	4c09      	ldr	r4, [pc, #36]	; (86ad4 <udi_msc_trans_block+0xd0>)
   86ab0:	47a0      	blx	r4
   86ab2:	2800      	cmp	r0, #0
   86ab4:	d1c9      	bne.n	86a4a <udi_msc_trans_block+0x46>
   86ab6:	e7be      	b.n	86a36 <udi_msc_trans_block+0x32>
   86ab8:	9300      	str	r3, [sp, #0]
   86aba:	f04f 0100 	mov.w	r1, #0
   86abe:	463a      	mov	r2, r7
   86ac0:	462b      	mov	r3, r5
   86ac2:	4c04      	ldr	r4, [pc, #16]	; (86ad4 <udi_msc_trans_block+0xd0>)
   86ac4:	47a0      	blx	r4
   86ac6:	2800      	cmp	r0, #0
   86ac8:	d1db      	bne.n	86a82 <udi_msc_trans_block+0x7e>
   86aca:	e7b4      	b.n	86a36 <udi_msc_trans_block+0x32>
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
	return true;
}
   86acc:	b003      	add	sp, #12
   86ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86ad0:	00085d2d 	.word	0x00085d2d
   86ad4:	000891f9 	.word	0x000891f9

00086ad8 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   86ad8:	f241 5320 	movw	r3, #5408	; 0x1520
   86adc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86ae0:	6818      	ldr	r0, [r3, #0]
   86ae2:	6801      	ldr	r1, [r0, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   86ae4:	884a      	ldrh	r2, [r1, #2]
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
   86ae6:	1888      	adds	r0, r1, r2
   86ae8:	4770      	bx	lr
   86aea:	bf00      	nop

00086aec <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   86aec:	b538      	push	{r3, r4, r5, lr}
   86aee:	4605      	mov	r5, r0
   86af0:	460c      	mov	r4, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   86af2:	f646 23d9 	movw	r3, #27353	; 0x6ad9
   86af6:	f2c0 0308 	movt	r3, #8
   86afa:	4798      	blx	r3
   86afc:	4602      	mov	r2, r0
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   86afe:	7828      	ldrb	r0, [r5, #0]
   86b00:	1828      	adds	r0, r5, r0
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   86b02:	4282      	cmp	r2, r0
   86b04:	d911      	bls.n	86b2a <udc_next_desc_in_iface+0x3e>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   86b06:	7841      	ldrb	r1, [r0, #1]
   86b08:	2904      	cmp	r1, #4
   86b0a:	d011      	beq.n	86b30 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   86b0c:	42a1      	cmp	r1, r4
   86b0e:	d105      	bne.n	86b1c <udc_next_desc_in_iface+0x30>
   86b10:	bd38      	pop	{r3, r4, r5, pc}
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   86b12:	7841      	ldrb	r1, [r0, #1]
   86b14:	2904      	cmp	r1, #4
   86b16:	d00e      	beq.n	86b36 <udc_next_desc_in_iface+0x4a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   86b18:	42a1      	cmp	r1, r4
   86b1a:	d00e      	beq.n	86b3a <udc_next_desc_in_iface+0x4e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   86b1c:	7803      	ldrb	r3, [r0, #0]
   86b1e:	18c0      	adds	r0, r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   86b20:	4282      	cmp	r2, r0
   86b22:	d8f6      	bhi.n	86b12 <udc_next_desc_in_iface+0x26>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
   86b24:	f04f 0000 	mov.w	r0, #0
   86b28:	bd38      	pop	{r3, r4, r5, pc}
   86b2a:	f04f 0000 	mov.w	r0, #0
   86b2e:	bd38      	pop	{r3, r4, r5, pc}
   86b30:	f04f 0000 	mov.w	r0, #0
   86b34:	bd38      	pop	{r3, r4, r5, pc}
   86b36:	f04f 0000 	mov.w	r0, #0
}
   86b3a:	bd38      	pop	{r3, r4, r5, pc}

00086b3c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   86b3c:	b570      	push	{r4, r5, r6, lr}
   86b3e:	4605      	mov	r5, r0
   86b40:	460e      	mov	r6, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   86b42:	f241 532a 	movw	r3, #5418	; 0x152a
   86b46:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86b4a:	7818      	ldrb	r0, [r3, #0]
   86b4c:	2800      	cmp	r0, #0
   86b4e:	d031      	beq.n	86bb4 <udc_update_iface_desc+0x78>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   86b50:	f241 5120 	movw	r1, #5408	; 0x1520
   86b54:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86b58:	680a      	ldr	r2, [r1, #0]
   86b5a:	6814      	ldr	r4, [r2, #0]
   86b5c:	7923      	ldrb	r3, [r4, #4]
   86b5e:	42ab      	cmp	r3, r5
   86b60:	d92b      	bls.n	86bba <udc_update_iface_desc+0x7e>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   86b62:	f241 502c 	movw	r0, #5420	; 0x152c
   86b66:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86b6a:	6004      	str	r4, [r0, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   86b6c:	f646 21d9 	movw	r1, #27353	; 0x6ad9
   86b70:	f2c0 0108 	movt	r1, #8
   86b74:	4788      	blx	r1
	while (ptr_end_desc >
   86b76:	4284      	cmp	r4, r0
   86b78:	d222      	bcs.n	86bc0 <udc_update_iface_desc+0x84>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   86b7a:	7862      	ldrb	r2, [r4, #1]
   86b7c:	2a04      	cmp	r2, #4
   86b7e:	d10d      	bne.n	86b9c <udc_update_iface_desc+0x60>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   86b80:	78a3      	ldrb	r3, [r4, #2]
   86b82:	42ab      	cmp	r3, r5
   86b84:	d10a      	bne.n	86b9c <udc_update_iface_desc+0x60>
   86b86:	78e1      	ldrb	r1, [r4, #3]
   86b88:	42b1      	cmp	r1, r6
   86b8a:	d107      	bne.n	86b9c <udc_update_iface_desc+0x60>
   86b8c:	f241 532c 	movw	r3, #5420	; 0x152c
   86b90:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86b94:	601c      	str	r4, [r3, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
   86b96:	f04f 0001 	mov.w	r0, #1
   86b9a:	bd70      	pop	{r4, r5, r6, pc}
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   86b9c:	7822      	ldrb	r2, [r4, #0]
   86b9e:	18a4      	adds	r4, r4, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
   86ba0:	42a0      	cmp	r0, r4
   86ba2:	d8ea      	bhi.n	86b7a <udc_update_iface_desc+0x3e>
   86ba4:	f241 502c 	movw	r0, #5420	; 0x152c
   86ba8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86bac:	6004      	str	r4, [r0, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   86bae:	f04f 0000 	mov.w	r0, #0
   86bb2:	bd70      	pop	{r4, r5, r6, pc}
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
   86bb4:	f04f 0000 	mov.w	r0, #0
   86bb8:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   86bba:	f04f 0000 	mov.w	r0, #0
   86bbe:	bd70      	pop	{r4, r5, r6, pc}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   86bc0:	f04f 0000 	mov.w	r0, #0
}
   86bc4:	bd70      	pop	{r4, r5, r6, pc}
   86bc6:	bf00      	nop

00086bc8 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   86bc8:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   86bca:	f641 4354 	movw	r3, #7252	; 0x1c54
   86bce:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86bd2:	8858      	ldrh	r0, [r3, #2]
   86bd4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   86bd8:	f648 61f1 	movw	r1, #36593	; 0x8ef1
   86bdc:	f2c0 0108 	movt	r1, #8
   86be0:	4788      	blx	r1
   86be2:	bd08      	pop	{r3, pc}

00086be4 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   86be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86be8:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   86bea:	f646 333d 	movw	r3, #27453	; 0x6b3d
   86bee:	f2c0 0308 	movt	r3, #8
   86bf2:	4798      	blx	r3
   86bf4:	b338      	cbz	r0, 86c46 <udc_iface_enable+0x62>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   86bf6:	f241 502c 	movw	r0, #5420	; 0x152c
   86bfa:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86bfe:	6804      	ldr	r4, [r0, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   86c00:	f04f 0605 	mov.w	r6, #5
   86c04:	f646 25ed 	movw	r5, #27373	; 0x6aed
   86c08:	f2c0 0508 	movt	r5, #8
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   86c0c:	f249 27fd 	movw	r7, #37629	; 0x92fd
   86c10:	f2c0 0708 	movt	r7, #8

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   86c14:	4620      	mov	r0, r4
   86c16:	4631      	mov	r1, r6
   86c18:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   86c1a:	4604      	mov	r4, r0
   86c1c:	b138      	cbz	r0, 86c2e <udc_iface_enable+0x4a>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   86c1e:	7880      	ldrb	r0, [r0, #2]
   86c20:	78e1      	ldrb	r1, [r4, #3]
   86c22:	88a2      	ldrh	r2, [r4, #4]
   86c24:	47b8      	blx	r7
   86c26:	2800      	cmp	r0, #0
   86c28:	d1f4      	bne.n	86c14 <udc_iface_enable+0x30>
   86c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   86c2e:	f241 5120 	movw	r1, #5408	; 0x1520
   86c32:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86c36:	680a      	ldr	r2, [r1, #0]
   86c38:	6853      	ldr	r3, [r2, #4]
   86c3a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
   86c3e:	6801      	ldr	r1, [r0, #0]
   86c40:	4788      	blx	r1
   86c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
		return false;
   86c46:	f04f 0000 	mov.w	r0, #0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
   86c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86c4e:	bf00      	nop

00086c50 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   86c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86c54:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   86c56:	f04f 0100 	mov.w	r1, #0
   86c5a:	f646 333d 	movw	r3, #27453	; 0x6b3d
   86c5e:	f2c0 0308 	movt	r3, #8
   86c62:	4798      	blx	r3
   86c64:	2800      	cmp	r0, #0
   86c66:	d030      	beq.n	86cca <udc_iface_disable+0x7a>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   86c68:	f241 5020 	movw	r0, #5408	; 0x1520
   86c6c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86c70:	6801      	ldr	r1, [r0, #0]
   86c72:	684a      	ldr	r2, [r1, #4]
   86c74:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   86c78:	f8d8 300c 	ldr.w	r3, [r8, #12]
   86c7c:	4798      	blx	r3
   86c7e:	4601      	mov	r1, r0
   86c80:	4620      	mov	r0, r4
   86c82:	f646 323d 	movw	r2, #27453	; 0x6b3d
   86c86:	f2c0 0208 	movt	r2, #8
   86c8a:	4790      	blx	r2
   86c8c:	b308      	cbz	r0, 86cd2 <udc_iface_disable+0x82>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   86c8e:	f241 542c 	movw	r4, #5420	; 0x152c
   86c92:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86c96:	6824      	ldr	r4, [r4, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   86c98:	f04f 0605 	mov.w	r6, #5
   86c9c:	f646 25ed 	movw	r5, #27373	; 0x6aed
   86ca0:	f2c0 0508 	movt	r5, #8
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   86ca4:	f648 7761 	movw	r7, #36705	; 0x8f61
   86ca8:	f2c0 0708 	movt	r7, #8
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   86cac:	4620      	mov	r0, r4
   86cae:	4631      	mov	r1, r6
   86cb0:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   86cb2:	4604      	mov	r4, r0
   86cb4:	b110      	cbz	r0, 86cbc <udc_iface_disable+0x6c>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   86cb6:	7880      	ldrb	r0, [r0, #2]
   86cb8:	47b8      	blx	r7
		}
   86cba:	e7f7      	b.n	86cac <udc_iface_disable+0x5c>
	}
#endif

	// Disable interface
	udi_api->disable();
   86cbc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   86cc0:	4780      	blx	r0
	return true;
   86cc2:	f04f 0001 	mov.w	r0, #1
   86cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
   86cca:	f04f 0000 	mov.w	r0, #0
   86cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
		return false;
   86cd2:	f04f 0000 	mov.w	r0, #0
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
   86cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86cda:	bf00      	nop

00086cdc <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   86cdc:	b508      	push	{r3, lr}
	udd_enable();
   86cde:	f248 0399 	movw	r3, #32921	; 0x8099
   86ce2:	f2c0 0308 	movt	r3, #8
   86ce6:	4798      	blx	r3
   86ce8:	bd08      	pop	{r3, pc}
   86cea:	bf00      	nop

00086cec <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   86cec:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   86cee:	f241 532a 	movw	r3, #5418	; 0x152a
   86cf2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86cf6:	7818      	ldrb	r0, [r3, #0]
   86cf8:	b1d8      	cbz	r0, 86d32 <udc_reset+0x46>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86cfa:	f241 5120 	movw	r1, #5408	; 0x1520
   86cfe:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86d02:	680a      	ldr	r2, [r1, #0]
   86d04:	6813      	ldr	r3, [r2, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   86d06:	7918      	ldrb	r0, [r3, #4]
   86d08:	b198      	cbz	r0, 86d32 <udc_reset+0x46>
   86d0a:	f04f 0400 	mov.w	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   86d0e:	f646 4651 	movw	r6, #27729	; 0x6c51
   86d12:	f2c0 0608 	movt	r6, #8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86d16:	f241 5520 	movw	r5, #5408	; 0x1520
   86d1a:	f2c2 0507 	movt	r5, #8199	; 0x2007
				iface_num++) {
			udc_iface_disable(iface_num);
   86d1e:	4620      	mov	r0, r4
   86d20:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   86d22:	f104 0401 	add.w	r4, r4, #1
   86d26:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86d28:	6829      	ldr	r1, [r5, #0]
   86d2a:	680a      	ldr	r2, [r1, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   86d2c:	7913      	ldrb	r3, [r2, #4]
   86d2e:	42a3      	cmp	r3, r4
   86d30:	d8f5      	bhi.n	86d1e <udc_reset+0x32>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
   86d32:	f241 502a 	movw	r0, #5418	; 0x152a
   86d36:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86d3a:	f04f 0100 	mov.w	r1, #0
   86d3e:	7001      	strb	r1, [r0, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   86d40:	f241 5328 	movw	r3, #5416	; 0x1528
   86d44:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86d48:	f04f 0201 	mov.w	r2, #1
   86d4c:	801a      	strh	r2, [r3, #0]
   86d4e:	bd70      	pop	{r4, r5, r6, pc}

00086d50 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
   86d50:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   86d52:	f241 532a 	movw	r3, #5418	; 0x152a
   86d56:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86d5a:	7818      	ldrb	r0, [r3, #0]
   86d5c:	b1d8      	cbz	r0, 86d96 <udc_sof_notify+0x46>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86d5e:	f241 5120 	movw	r1, #5408	; 0x1520
   86d62:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86d66:	680b      	ldr	r3, [r1, #0]
   86d68:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   86d6a:	7910      	ldrb	r0, [r2, #4]
   86d6c:	b198      	cbz	r0, 86d96 <udc_sof_notify+0x46>
   86d6e:	f04f 0400 	mov.w	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86d72:	f241 5520 	movw	r5, #5408	; 0x1520
   86d76:	f2c2 0507 	movt	r5, #8199	; 0x2007
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   86d7a:	685b      	ldr	r3, [r3, #4]
   86d7c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   86d80:	690a      	ldr	r2, [r1, #16]
   86d82:	b102      	cbz	r2, 86d86 <udc_sof_notify+0x36>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   86d84:	4790      	blx	r2
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   86d86:	f104 0401 	add.w	r4, r4, #1
   86d8a:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86d8c:	682b      	ldr	r3, [r5, #0]
   86d8e:	6818      	ldr	r0, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   86d90:	7901      	ldrb	r1, [r0, #4]
   86d92:	42a1      	cmp	r1, r4
   86d94:	d8f1      	bhi.n	86d7a <udc_sof_notify+0x2a>
   86d96:	bd38      	pop	{r3, r4, r5, pc}

00086d98 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   86d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   86d9a:	f641 4354 	movw	r3, #7252	; 0x1c54
   86d9e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86da2:	f04f 0200 	mov.w	r2, #0
   86da6:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   86da8:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   86daa:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   86dac:	7818      	ldrb	r0, [r3, #0]
   86dae:	f010 0f80 	tst.w	r0, #128	; 0x80
   86db2:	f000 83da 	beq.w	8756a <udc_process_setup+0x7d2>
		if (udd_g_ctrlreq.req.wLength == 0) {
   86db6:	f641 4154 	movw	r1, #7252	; 0x1c54
   86dba:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86dbe:	88ca      	ldrh	r2, [r1, #6]
   86dc0:	2a00      	cmp	r2, #0
   86dc2:	f040 83d7 	bne.w	87574 <udc_process_setup+0x7dc>
   86dc6:	e3c4      	b.n	87552 <udc_process_setup+0x7ba>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   86dc8:	f010 031f 	ands.w	r3, r0, #31
   86dcc:	f040 8115 	bne.w	86ffa <udc_process_setup+0x262>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   86dd0:	f641 4054 	movw	r0, #7252	; 0x1c54
   86dd4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86dd8:	7841      	ldrb	r1, [r0, #1]
   86dda:	2906      	cmp	r1, #6
   86ddc:	d018      	beq.n	86e10 <udc_process_setup+0x78>
   86dde:	2908      	cmp	r1, #8
   86de0:	f000 80f8 	beq.w	86fd4 <udc_process_setup+0x23c>
   86de4:	2900      	cmp	r1, #0
   86de6:	f040 8108 	bne.w	86ffa <udc_process_setup+0x262>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   86dea:	2a02      	cmp	r2, #2
   86dec:	d10d      	bne.n	86e0a <udc_process_setup+0x72>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   86dee:	f241 5028 	movw	r0, #5416	; 0x1528
   86df2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86df6:	f04f 0102 	mov.w	r1, #2
   86dfa:	f648 7351 	movw	r3, #36689	; 0x8f51
   86dfe:	f2c0 0308 	movt	r3, #8
   86e02:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   86e04:	f04f 0001 	mov.w	r0, #1
   86e08:	e328      	b.n	8745c <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
   86e0a:	f04f 0000 	mov.w	r0, #0
   86e0e:	e325      	b.n	8745c <udc_process_setup+0x6c4>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   86e10:	f641 4454 	movw	r4, #7252	; 0x1c54
   86e14:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86e18:	8860      	ldrh	r0, [r4, #2]
   86e1a:	b2c4      	uxtb	r4, r0

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   86e1c:	ea4f 2110 	mov.w	r1, r0, lsr #8
   86e20:	f101 33ff 	add.w	r3, r1, #4294967295
   86e24:	2b06      	cmp	r3, #6
   86e26:	f200 80c3 	bhi.w	86fb0 <udc_process_setup+0x218>
   86e2a:	e8df f013 	tbh	[pc, r3, lsl #1]
   86e2e:	0007      	.short	0x0007
   86e30:	0078001b 	.word	0x0078001b
   86e34:	00c100c1 	.word	0x00c100c1
   86e38:	00510044 	.word	0x00510044
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   86e3c:	f648 62d9 	movw	r2, #36569	; 0x8ed9
   86e40:	f2c0 0208 	movt	r2, #8
   86e44:	4790      	blx	r2
   86e46:	b930      	cbnz	r0, 86e56 <udc_process_setup+0xbe>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
   86e48:	48a3      	ldr	r0, [pc, #652]	; (870d8 <udc_process_setup+0x340>)
   86e4a:	6883      	ldr	r3, [r0, #8]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
			udd_set_setup_payload(
   86e4c:	4618      	mov	r0, r3
   86e4e:	7819      	ldrb	r1, [r3, #0]
   86e50:	4aa2      	ldr	r2, [pc, #648]	; (870dc <udc_process_setup+0x344>)
   86e52:	4790      	blx	r2
   86e54:	e09c      	b.n	86f90 <udc_process_setup+0x1f8>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
   86e56:	4ba0      	ldr	r3, [pc, #640]	; (870d8 <udc_process_setup+0x340>)
   86e58:	6819      	ldr	r1, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
   86e5a:	4608      	mov	r0, r1
   86e5c:	7809      	ldrb	r1, [r1, #0]
   86e5e:	4a9f      	ldr	r2, [pc, #636]	; (870dc <udc_process_setup+0x344>)
   86e60:	4790      	blx	r2
   86e62:	e095      	b.n	86f90 <udc_process_setup+0x1f8>
		break;

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   86e64:	f648 61d9 	movw	r1, #36569	; 0x8ed9
   86e68:	f2c0 0108 	movt	r1, #8
   86e6c:	4788      	blx	r1
   86e6e:	b170      	cbz	r0, 86e8e <udc_process_setup+0xf6>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   86e70:	4899      	ldr	r0, [pc, #612]	; (870d8 <udc_process_setup+0x340>)
   86e72:	6881      	ldr	r1, [r0, #8]
   86e74:	7c4a      	ldrb	r2, [r1, #17]
   86e76:	42a2      	cmp	r2, r4
   86e78:	f240 809d 	bls.w	86fb6 <udc_process_setup+0x21e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   86e7c:	4b96      	ldr	r3, [pc, #600]	; (870d8 <udc_process_setup+0x340>)
   86e7e:	6918      	ldr	r0, [r3, #16]
   86e80:	f850 1034 	ldr.w	r1, [r0, r4, lsl #3]
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   86e84:	4608      	mov	r0, r1
   86e86:	8849      	ldrh	r1, [r1, #2]
   86e88:	4a94      	ldr	r2, [pc, #592]	; (870dc <udc_process_setup+0x344>)
   86e8a:	4790      	blx	r2
   86e8c:	e00d      	b.n	86eaa <udc_process_setup+0x112>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   86e8e:	4b92      	ldr	r3, [pc, #584]	; (870d8 <udc_process_setup+0x340>)
   86e90:	681a      	ldr	r2, [r3, #0]
   86e92:	7c50      	ldrb	r0, [r2, #17]
   86e94:	42a0      	cmp	r0, r4
   86e96:	f240 8091 	bls.w	86fbc <udc_process_setup+0x224>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   86e9a:	498f      	ldr	r1, [pc, #572]	; (870d8 <udc_process_setup+0x340>)
   86e9c:	684b      	ldr	r3, [r1, #4]
   86e9e:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   86ea2:	4610      	mov	r0, r2
   86ea4:	8851      	ldrh	r1, [r2, #2]
   86ea6:	4b8d      	ldr	r3, [pc, #564]	; (870dc <udc_process_setup+0x344>)
   86ea8:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   86eaa:	4b8d      	ldr	r3, [pc, #564]	; (870e0 <udc_process_setup+0x348>)
   86eac:	6898      	ldr	r0, [r3, #8]
   86eae:	f04f 0102 	mov.w	r1, #2
   86eb2:	7041      	strb	r1, [r0, #1]
   86eb4:	e06c      	b.n	86f90 <udc_process_setup+0x1f8>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
				udc_config.qualifier->bLength);
   86eb6:	f240 1360 	movw	r3, #352	; 0x160
   86eba:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86ebe:	68d9      	ldr	r1, [r3, #12]
		break;

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   86ec0:	4608      	mov	r0, r1
   86ec2:	7809      	ldrb	r1, [r1, #0]
   86ec4:	f648 7251 	movw	r2, #36689	; 0x8f51
   86ec8:	f2c0 0208 	movt	r2, #8
   86ecc:	4790      	blx	r2
   86ece:	e05f      	b.n	86f90 <udc_process_setup+0x1f8>
				udc_config.qualifier->bLength);
		break;

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   86ed0:	f648 62d9 	movw	r2, #36569	; 0x8ed9
   86ed4:	f2c0 0208 	movt	r2, #8
   86ed8:	4790      	blx	r2
   86eda:	b968      	cbnz	r0, 86ef8 <udc_process_setup+0x160>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   86edc:	4a7e      	ldr	r2, [pc, #504]	; (870d8 <udc_process_setup+0x340>)
   86ede:	6890      	ldr	r0, [r2, #8]
   86ee0:	7c41      	ldrb	r1, [r0, #17]
   86ee2:	42a1      	cmp	r1, r4
   86ee4:	d96d      	bls.n	86fc2 <udc_process_setup+0x22a>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   86ee6:	4b7c      	ldr	r3, [pc, #496]	; (870d8 <udc_process_setup+0x340>)
   86ee8:	691a      	ldr	r2, [r3, #16]
   86eea:	f852 1034 	ldr.w	r1, [r2, r4, lsl #3]
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   86eee:	4608      	mov	r0, r1
   86ef0:	8849      	ldrh	r1, [r1, #2]
   86ef2:	4b7a      	ldr	r3, [pc, #488]	; (870dc <udc_process_setup+0x344>)
   86ef4:	4798      	blx	r3
   86ef6:	e00c      	b.n	86f12 <udc_process_setup+0x17a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   86ef8:	4877      	ldr	r0, [pc, #476]	; (870d8 <udc_process_setup+0x340>)
   86efa:	6801      	ldr	r1, [r0, #0]
   86efc:	7c4b      	ldrb	r3, [r1, #17]
   86efe:	42a3      	cmp	r3, r4
   86f00:	d962      	bls.n	86fc8 <udc_process_setup+0x230>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   86f02:	4a75      	ldr	r2, [pc, #468]	; (870d8 <udc_process_setup+0x340>)
   86f04:	6850      	ldr	r0, [r2, #4]
   86f06:	f850 1034 	ldr.w	r1, [r0, r4, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   86f0a:	4608      	mov	r0, r1
   86f0c:	8849      	ldrh	r1, [r1, #2]
   86f0e:	4b73      	ldr	r3, [pc, #460]	; (870dc <udc_process_setup+0x344>)
   86f10:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   86f12:	4873      	ldr	r0, [pc, #460]	; (870e0 <udc_process_setup+0x348>)
   86f14:	6881      	ldr	r1, [r0, #8]
   86f16:	f04f 0207 	mov.w	r2, #7
   86f1a:	704a      	strb	r2, [r1, #1]
   86f1c:	e038      	b.n	86f90 <udc_process_setup+0x1f8>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   86f1e:	b2c0      	uxtb	r0, r0
   86f20:	2803      	cmp	r0, #3
   86f22:	d80b      	bhi.n	86f3c <udc_process_setup+0x1a4>
   86f24:	e8df f010 	tbh	[pc, r0, lsl #1]
   86f28:	000e0004 	.word	0x000e0004
   86f2c:	032f032b 	.word	0x032f032b
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   86f30:	486c      	ldr	r0, [pc, #432]	; (870e4 <udc_process_setup+0x34c>)
   86f32:	f04f 0104 	mov.w	r1, #4
   86f36:	4a69      	ldr	r2, [pc, #420]	; (870dc <udc_process_setup+0x344>)
   86f38:	4790      	blx	r2
   86f3a:	e029      	b.n	86f90 <udc_process_setup+0x1f8>
		str = udc_get_string_serial_name();
		break;
#endif
	default:
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
   86f3c:	486a      	ldr	r0, [pc, #424]	; (870e8 <udc_process_setup+0x350>)
   86f3e:	4780      	blx	r0
   86f40:	bb30      	cbnz	r0, 86f90 <udc_process_setup+0x1f8>
   86f42:	e28b      	b.n	8745c <udc_process_setup+0x6c4>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
   86f44:	4969      	ldr	r1, [pc, #420]	; (870ec <udc_process_setup+0x354>)
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   86f46:	f04f 0008 	mov.w	r0, #8
   86f4a:	f04f 0300 	mov.w	r3, #0
   86f4e:	4a68      	ldr	r2, [pc, #416]	; (870f0 <udc_process_setup+0x358>)
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   86f50:	5ccc      	ldrb	r4, [r1, r3]
   86f52:	f822 4f02 	strh.w	r4, [r2, #2]!
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   86f56:	f103 0301 	add.w	r3, r3, #1
   86f5a:	2801      	cmp	r0, #1
   86f5c:	f200 8317 	bhi.w	8758e <udc_process_setup+0x7f6>
   86f60:	e00e      	b.n	86f80 <udc_process_setup+0x1e8>
   86f62:	f102 0402 	add.w	r4, r2, #2
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   86f66:	5ccd      	ldrb	r5, [r1, r3]
   86f68:	8055      	strh	r5, [r2, #2]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   86f6a:	f103 0301 	add.w	r3, r3, #1
   86f6e:	f102 0204 	add.w	r2, r2, #4
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   86f72:	5ccd      	ldrb	r5, [r1, r3]
   86f74:	8065      	strh	r5, [r4, #2]
   86f76:	f103 0301 	add.w	r3, r3, #1
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   86f7a:	b2dc      	uxtb	r4, r3
   86f7c:	4284      	cmp	r4, r0
   86f7e:	d3f0      	bcc.n	86f62 <udc_process_setup+0x1ca>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   86f80:	ea4f 0140 	mov.w	r1, r0, lsl #1
   86f84:	f101 0102 	add.w	r1, r1, #2
   86f88:	4859      	ldr	r0, [pc, #356]	; (870f0 <udc_process_setup+0x358>)
   86f8a:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   86f8c:	4b53      	ldr	r3, [pc, #332]	; (870dc <udc_process_setup+0x344>)
   86f8e:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   86f90:	f641 4154 	movw	r1, #7252	; 0x1c54
   86f94:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86f98:	88c8      	ldrh	r0, [r1, #6]
   86f9a:	898b      	ldrh	r3, [r1, #12]
   86f9c:	4283      	cmp	r3, r0
   86f9e:	d916      	bls.n	86fce <udc_process_setup+0x236>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   86fa0:	f641 4254 	movw	r2, #7252	; 0x1c54
   86fa4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86fa8:	8190      	strh	r0, [r2, #12]
	}
	return true;
   86faa:	f04f 0001 	mov.w	r0, #1
   86fae:	e255      	b.n	8745c <udc_process_setup+0x6c4>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   86fb0:	f04f 0000 	mov.w	r0, #0
   86fb4:	e252      	b.n	8745c <udc_process_setup+0x6c4>
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
   86fb6:	f04f 0000 	mov.w	r0, #0
   86fba:	e24f      	b.n	8745c <udc_process_setup+0x6c4>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
   86fbc:	f04f 0000 	mov.w	r0, #0
   86fc0:	e24c      	b.n	8745c <udc_process_setup+0x6c4>
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
   86fc2:	f04f 0000 	mov.w	r0, #0
   86fc6:	e249      	b.n	8745c <udc_process_setup+0x6c4>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
   86fc8:	f04f 0000 	mov.w	r0, #0
   86fcc:	e246      	b.n	8745c <udc_process_setup+0x6c4>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
   86fce:	f04f 0001 	mov.w	r0, #1
   86fd2:	e243      	b.n	8745c <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
   86fd4:	2a01      	cmp	r2, #1
   86fd6:	d10d      	bne.n	86ff4 <udc_process_setup+0x25c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   86fd8:	f241 502a 	movw	r0, #5418	; 0x152a
   86fdc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86fe0:	f04f 0101 	mov.w	r1, #1
   86fe4:	f648 7251 	movw	r2, #36689	; 0x8f51
   86fe8:	f2c0 0208 	movt	r2, #8
   86fec:	4790      	blx	r2
	return true;
   86fee:	f04f 0001 	mov.w	r0, #1
   86ff2:	e233      	b.n	8745c <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
   86ff4:	f04f 0000 	mov.w	r0, #0
   86ff8:	e230      	b.n	8745c <udc_process_setup+0x6c4>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   86ffa:	2b01      	cmp	r3, #1
   86ffc:	d134      	bne.n	87068 <udc_process_setup+0x2d0>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   86ffe:	f641 4054 	movw	r0, #7252	; 0x1c54
   87002:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87006:	7841      	ldrb	r1, [r0, #1]
   87008:	290a      	cmp	r1, #10
   8700a:	d12d      	bne.n	87068 <udc_process_setup+0x2d0>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   8700c:	2a01      	cmp	r2, #1
   8700e:	d11f      	bne.n	87050 <udc_process_setup+0x2b8>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   87010:	4838      	ldr	r0, [pc, #224]	; (870f4 <udc_process_setup+0x35c>)
   87012:	7801      	ldrb	r1, [r0, #0]
   87014:	b1f9      	cbz	r1, 87056 <udc_process_setup+0x2be>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   87016:	4c32      	ldr	r4, [pc, #200]	; (870e0 <udc_process_setup+0x348>)
   87018:	7924      	ldrb	r4, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8701a:	4d37      	ldr	r5, [pc, #220]	; (870f8 <udc_process_setup+0x360>)
   8701c:	682d      	ldr	r5, [r5, #0]
   8701e:	682b      	ldr	r3, [r5, #0]
   87020:	791a      	ldrb	r2, [r3, #4]
   87022:	42a2      	cmp	r2, r4
   87024:	d91a      	bls.n	8705c <udc_process_setup+0x2c4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   87026:	4620      	mov	r0, r4
   87028:	f04f 0100 	mov.w	r1, #0
   8702c:	4b33      	ldr	r3, [pc, #204]	; (870fc <udc_process_setup+0x364>)
   8702e:	4798      	blx	r3
   87030:	b1b8      	cbz	r0, 87062 <udc_process_setup+0x2ca>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   87032:	6868      	ldr	r0, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   87034:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
   87038:	68ca      	ldr	r2, [r1, #12]
   8703a:	4790      	blx	r2
   8703c:	4b30      	ldr	r3, [pc, #192]	; (87100 <udc_process_setup+0x368>)
   8703e:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   87040:	4618      	mov	r0, r3
   87042:	f04f 0101 	mov.w	r1, #1
   87046:	4a25      	ldr	r2, [pc, #148]	; (870dc <udc_process_setup+0x344>)
   87048:	4790      	blx	r2
	return true;
   8704a:	f04f 0001 	mov.w	r0, #1
   8704e:	e205      	b.n	8745c <udc_process_setup+0x6c4>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
   87050:	f04f 0000 	mov.w	r0, #0
   87054:	e202      	b.n	8745c <udc_process_setup+0x6c4>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
   87056:	f04f 0000 	mov.w	r0, #0
   8705a:	e1ff      	b.n	8745c <udc_process_setup+0x6c4>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   8705c:	f04f 0000 	mov.w	r0, #0
   87060:	e1fc      	b.n	8745c <udc_process_setup+0x6c4>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
   87062:	f04f 0000 	mov.w	r0, #0
   87066:	e1f9      	b.n	8745c <udc_process_setup+0x6c4>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   87068:	2b02      	cmp	r3, #2
   8706a:	f040 81f9 	bne.w	87460 <udc_process_setup+0x6c8>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   8706e:	f641 4354 	movw	r3, #7252	; 0x1c54
   87072:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87076:	7858      	ldrb	r0, [r3, #1]
   87078:	2800      	cmp	r0, #0
   8707a:	f040 81d5 	bne.w	87428 <udc_process_setup+0x690>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   8707e:	2a02      	cmp	r2, #2
   87080:	d10d      	bne.n	8709e <udc_process_setup+0x306>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   87082:	4a17      	ldr	r2, [pc, #92]	; (870e0 <udc_process_setup+0x348>)
   87084:	7910      	ldrb	r0, [r2, #4]
   87086:	491f      	ldr	r1, [pc, #124]	; (87104 <udc_process_setup+0x36c>)
   87088:	4788      	blx	r1
   8708a:	4b1f      	ldr	r3, [pc, #124]	; (87108 <udc_process_setup+0x370>)
   8708c:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   8708e:	4618      	mov	r0, r3
   87090:	f04f 0102 	mov.w	r1, #2
   87094:	4a11      	ldr	r2, [pc, #68]	; (870dc <udc_process_setup+0x344>)
   87096:	4790      	blx	r2
			sizeof(udc_ep_status));
	return true;
   87098:	f04f 0001 	mov.w	r0, #1
   8709c:	e1de      	b.n	8745c <udc_process_setup+0x6c4>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
   8709e:	f04f 0000 	mov.w	r0, #0
   870a2:	e1db      	b.n	8745c <udc_process_setup+0x6c4>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   870a4:	f010 031f 	ands.w	r3, r0, #31
   870a8:	f040 8142 	bne.w	87330 <udc_process_setup+0x598>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   870ac:	f641 4154 	movw	r1, #7252	; 0x1c54
   870b0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   870b4:	784a      	ldrb	r2, [r1, #1]
   870b6:	f102 30ff 	add.w	r0, r2, #4294967295
   870ba:	2808      	cmp	r0, #8
   870bc:	f200 8138 	bhi.w	87330 <udc_process_setup+0x598>
   870c0:	e8df f010 	tbh	[pc, r0, lsl #1]
   870c4:	01360039 	.word	0x01360039
   870c8:	01360057 	.word	0x01360057
   870cc:	01360024 	.word	0x01360024
   870d0:	01360136 	.word	0x01360136
   870d4:	00ae      	.short	0x00ae
   870d6:	bf00      	nop
   870d8:	20070160 	.word	0x20070160
   870dc:	00088f51 	.word	0x00088f51
   870e0:	20071c54 	.word	0x20071c54
   870e4:	2007028c 	.word	0x2007028c
   870e8:	000850e1 	.word	0x000850e1
   870ec:	20070260 	.word	0x20070260
   870f0:	2007026c 	.word	0x2007026c
   870f4:	2007152a 	.word	0x2007152a
   870f8:	20071520 	.word	0x20071520
   870fc:	00086b3d 	.word	0x00086b3d
   87100:	20071524 	.word	0x20071524
   87104:	00088fc5 	.word	0x00088fc5
   87108:	20071526 	.word	0x20071526
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   8710c:	f641 4054 	movw	r0, #7252	; 0x1c54
   87110:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87114:	88c1      	ldrh	r1, [r0, #6]
   87116:	b959      	cbnz	r1, 87130 <udc_process_setup+0x398>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   87118:	f641 4354 	movw	r3, #7252	; 0x1c54
   8711c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87120:	f646 32c9 	movw	r2, #27593	; 0x6bc9
   87124:	f2c0 0208 	movt	r2, #8
   87128:	611a      	str	r2, [r3, #16]
	return true;
   8712a:	f04f 0001 	mov.w	r0, #1
   8712e:	e195      	b.n	8745c <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   87130:	f04f 0000 	mov.w	r0, #0
   87134:	e192      	b.n	8745c <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   87136:	f641 4254 	movw	r2, #7252	; 0x1c54
   8713a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8713e:	88d1      	ldrh	r1, [r2, #6]
   87140:	b989      	cbnz	r1, 87166 <udc_process_setup+0x3ce>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   87142:	f641 4054 	movw	r0, #7252	; 0x1c54
   87146:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8714a:	8843      	ldrh	r3, [r0, #2]
   8714c:	2b01      	cmp	r3, #1
   8714e:	d10d      	bne.n	8716c <udc_process_setup+0x3d4>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   87150:	f241 5128 	movw	r1, #5416	; 0x1528
   87154:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87158:	880a      	ldrh	r2, [r1, #0]
   8715a:	f022 0002 	bic.w	r0, r2, #2
   8715e:	8008      	strh	r0, [r1, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   87160:	f04f 0001 	mov.w	r0, #1
   87164:	e17a      	b.n	8745c <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   87166:	f04f 0000 	mov.w	r0, #0
   8716a:	e177      	b.n	8745c <udc_process_setup+0x6c4>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
   8716c:	f04f 0000 	mov.w	r0, #0
   87170:	e174      	b.n	8745c <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   87172:	f641 4054 	movw	r0, #7252	; 0x1c54
   87176:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8717a:	88c1      	ldrh	r1, [r0, #6]
   8717c:	2900      	cmp	r1, #0
   8717e:	d140      	bne.n	87202 <udc_process_setup+0x46a>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
   87180:	f641 4354 	movw	r3, #7252	; 0x1c54
   87184:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87188:	885a      	ldrh	r2, [r3, #2]
   8718a:	2a02      	cmp	r2, #2
   8718c:	d13c      	bne.n	87208 <udc_process_setup+0x470>
		return false;
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
   8718e:	f648 60d9 	movw	r0, #36569	; 0x8ed9
   87192:	f2c0 0008 	movt	r0, #8
   87196:	4780      	blx	r0
   87198:	2800      	cmp	r0, #0
   8719a:	d038      	beq.n	8720e <udc_process_setup+0x476>
			break;
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   8719c:	f641 4154 	movw	r1, #7252	; 0x1c54
   871a0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   871a4:	790b      	ldrb	r3, [r1, #4]
   871a6:	2b00      	cmp	r3, #0
   871a8:	d134      	bne.n	87214 <udc_process_setup+0x47c>
			break;
		}
		// Unconfigure the device, terminating all ongoing requests
		udc_reset();
   871aa:	f646 42ed 	movw	r2, #27885	; 0x6ced
   871ae:	f2c0 0208 	movt	r2, #8
   871b2:	4790      	blx	r2
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   871b4:	f641 4054 	movw	r0, #7252	; 0x1c54
   871b8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   871bc:	8881      	ldrh	r1, [r0, #4]
   871be:	ea4f 2311 	mov.w	r3, r1, lsr #8
   871c2:	f103 30ff 	add.w	r0, r3, #4294967295
   871c6:	2803      	cmp	r0, #3
   871c8:	d827      	bhi.n	8721a <udc_process_setup+0x482>
   871ca:	e8df f000 	tbb	[pc, r0]
   871ce:	0802      	.short	0x0802
   871d0:	140e      	.short	0x140e
		case USB_DEV_TEST_MODE_J:
			udd_g_ctrlreq.callback = udd_test_mode_j;
   871d2:	4897      	ldr	r0, [pc, #604]	; (87430 <udc_process_setup+0x698>)
   871d4:	4b97      	ldr	r3, [pc, #604]	; (87434 <udc_process_setup+0x69c>)
   871d6:	6118      	str	r0, [r3, #16]
			return true;
   871d8:	f04f 0001 	mov.w	r0, #1
   871dc:	e13e      	b.n	8745c <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_K:
			udd_g_ctrlreq.callback = udd_test_mode_k;
   871de:	4a96      	ldr	r2, [pc, #600]	; (87438 <udc_process_setup+0x6a0>)
   871e0:	4994      	ldr	r1, [pc, #592]	; (87434 <udc_process_setup+0x69c>)
   871e2:	610a      	str	r2, [r1, #16]
			return true;
   871e4:	f04f 0001 	mov.w	r0, #1
   871e8:	e138      	b.n	8745c <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_SE0_NAK:
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   871ea:	4894      	ldr	r0, [pc, #592]	; (8743c <udc_process_setup+0x6a4>)
   871ec:	4b91      	ldr	r3, [pc, #580]	; (87434 <udc_process_setup+0x69c>)
   871ee:	6118      	str	r0, [r3, #16]
			return true;
   871f0:	f04f 0001 	mov.w	r0, #1
   871f4:	e132      	b.n	8745c <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_PACKET:
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   871f6:	4a92      	ldr	r2, [pc, #584]	; (87440 <udc_process_setup+0x6a8>)
   871f8:	498e      	ldr	r1, [pc, #568]	; (87434 <udc_process_setup+0x69c>)
   871fa:	610a      	str	r2, [r1, #16]
			return true;
   871fc:	f04f 0001 	mov.w	r0, #1
   87200:	e12c      	b.n	8745c <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   87202:	f04f 0000 	mov.w	r0, #0
   87206:	e129      	b.n	8745c <udc_process_setup+0x6c4>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
   87208:	f04f 0000 	mov.w	r0, #0
   8720c:	e126      	b.n	8745c <udc_process_setup+0x6c4>
		break;
#endif
	default:
		break;
	}
	return false;
   8720e:	f04f 0000 	mov.w	r0, #0
   87212:	e123      	b.n	8745c <udc_process_setup+0x6c4>
   87214:	f04f 0000 	mov.w	r0, #0
   87218:	e120      	b.n	8745c <udc_process_setup+0x6c4>
   8721a:	f04f 0000 	mov.w	r0, #0
   8721e:	e11d      	b.n	8745c <udc_process_setup+0x6c4>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   87220:	f641 4354 	movw	r3, #7252	; 0x1c54
   87224:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87228:	88d9      	ldrh	r1, [r3, #6]
   8722a:	2900      	cmp	r1, #0
   8722c:	d16e      	bne.n	8730c <udc_process_setup+0x574>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   8722e:	f648 721d 	movw	r2, #36637	; 0x8f1d
   87232:	f2c0 0208 	movt	r2, #8
   87236:	4790      	blx	r2
   87238:	2800      	cmp	r0, #0
   8723a:	d06a      	beq.n	87312 <udc_process_setup+0x57a>
		return false;
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   8723c:	f648 60d9 	movw	r0, #36569	; 0x8ed9
   87240:	f2c0 0008 	movt	r0, #8
   87244:	4780      	blx	r0
   87246:	b168      	cbz	r0, 87264 <udc_process_setup+0x4cc>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   87248:	f641 4154 	movw	r1, #7252	; 0x1c54
   8724c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87250:	788a      	ldrb	r2, [r1, #2]
				udc_config.confdev_hs->bNumConfigurations) {
   87252:	f240 1060 	movw	r0, #352	; 0x160
   87256:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8725a:	6883      	ldr	r3, [r0, #8]
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8725c:	7c59      	ldrb	r1, [r3, #17]
   8725e:	428a      	cmp	r2, r1
   87260:	dd0d      	ble.n	8727e <udc_process_setup+0x4e6>
   87262:	e059      	b.n	87318 <udc_process_setup+0x580>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   87264:	f641 4354 	movw	r3, #7252	; 0x1c54
   87268:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8726c:	7899      	ldrb	r1, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   8726e:	f240 1260 	movw	r2, #352	; 0x160
   87272:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87276:	6810      	ldr	r0, [r2, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   87278:	7c43      	ldrb	r3, [r0, #17]
   8727a:	4299      	cmp	r1, r3
   8727c:	dc4f      	bgt.n	8731e <udc_process_setup+0x586>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
   8727e:	f646 42ed 	movw	r2, #27885	; 0x6ced
   87282:	f2c0 0208 	movt	r2, #8
   87286:	4790      	blx	r2

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   87288:	f641 4054 	movw	r0, #7252	; 0x1c54
   8728c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87290:	7883      	ldrb	r3, [r0, #2]
   87292:	f241 512a 	movw	r1, #5418	; 0x152a
   87296:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8729a:	700b      	strb	r3, [r1, #0]
	if (udc_num_configuration == 0) {
   8729c:	2b00      	cmp	r3, #0
   8729e:	d041      	beq.n	87324 <udc_process_setup+0x58c>
		return true; // Default empty configuration requested
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   872a0:	4a68      	ldr	r2, [pc, #416]	; (87444 <udc_process_setup+0x6ac>)
   872a2:	4790      	blx	r2
   872a4:	b198      	cbz	r0, 872ce <udc_process_setup+0x536>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   872a6:	4a68      	ldr	r2, [pc, #416]	; (87448 <udc_process_setup+0x6b0>)
   872a8:	7810      	ldrb	r0, [r2, #0]
   872aa:	f100 31ff 	add.w	r1, r0, #4294967295
   872ae:	4b67      	ldr	r3, [pc, #412]	; (8744c <udc_process_setup+0x6b4>)
   872b0:	691a      	ldr	r2, [r3, #16]
   872b2:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
   872b6:	4966      	ldr	r1, [pc, #408]	; (87450 <udc_process_setup+0x6b8>)
   872b8:	6008      	str	r0, [r1, #0]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   872ba:	4b65      	ldr	r3, [pc, #404]	; (87450 <udc_process_setup+0x6b8>)
   872bc:	681a      	ldr	r2, [r3, #0]
   872be:	6810      	ldr	r0, [r2, #0]
   872c0:	7901      	ldrb	r1, [r0, #4]
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
   872c2:	f04f 0001 	mov.w	r0, #1
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   872c6:	2900      	cmp	r1, #0
   872c8:	f000 80c8 	beq.w	8745c <udc_process_setup+0x6c4>
   872cc:	e00a      	b.n	872e4 <udc_process_setup+0x54c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   872ce:	485e      	ldr	r0, [pc, #376]	; (87448 <udc_process_setup+0x6b0>)
   872d0:	7803      	ldrb	r3, [r0, #0]
   872d2:	f103 31ff 	add.w	r1, r3, #4294967295
   872d6:	4a5d      	ldr	r2, [pc, #372]	; (8744c <udc_process_setup+0x6b4>)
   872d8:	6850      	ldr	r0, [r2, #4]
   872da:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   872de:	4b5c      	ldr	r3, [pc, #368]	; (87450 <udc_process_setup+0x6b8>)
   872e0:	6019      	str	r1, [r3, #0]
   872e2:	e7ea      	b.n	872ba <udc_process_setup+0x522>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   872e4:	f04f 0400 	mov.w	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   872e8:	4626      	mov	r6, r4
   872ea:	4d5a      	ldr	r5, [pc, #360]	; (87454 <udc_process_setup+0x6bc>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   872ec:	4f58      	ldr	r7, [pc, #352]	; (87450 <udc_process_setup+0x6b8>)
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   872ee:	4620      	mov	r0, r4
   872f0:	4631      	mov	r1, r6
   872f2:	47a8      	blx	r5
   872f4:	b1c8      	cbz	r0, 8732a <udc_process_setup+0x592>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   872f6:	f104 0401 	add.w	r4, r4, #1
   872fa:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   872fc:	683b      	ldr	r3, [r7, #0]
   872fe:	681a      	ldr	r2, [r3, #0]
   87300:	7910      	ldrb	r0, [r2, #4]
   87302:	42a0      	cmp	r0, r4
   87304:	d8f3      	bhi.n	872ee <udc_process_setup+0x556>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
   87306:	f04f 0001 	mov.w	r0, #1
   8730a:	e0a7      	b.n	8745c <udc_process_setup+0x6c4>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   8730c:	f04f 0000 	mov.w	r0, #0
   87310:	e0a4      	b.n	8745c <udc_process_setup+0x6c4>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
   87312:	f04f 0000 	mov.w	r0, #0
   87316:	e0a1      	b.n	8745c <udc_process_setup+0x6c4>
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
   87318:	f04f 0000 	mov.w	r0, #0
   8731c:	e09e      	b.n	8745c <udc_process_setup+0x6c4>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
   8731e:	f04f 0000 	mov.w	r0, #0
   87322:	e09b      	b.n	8745c <udc_process_setup+0x6c4>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
   87324:	f04f 0001 	mov.w	r0, #1
   87328:	e098      	b.n	8745c <udc_process_setup+0x6c4>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
   8732a:	f04f 0000 	mov.w	r0, #0
   8732e:	e095      	b.n	8745c <udc_process_setup+0x6c4>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   87330:	2b01      	cmp	r3, #1
   87332:	d12d      	bne.n	87390 <udc_process_setup+0x5f8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   87334:	f641 4154 	movw	r1, #7252	; 0x1c54
   87338:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8733c:	784a      	ldrb	r2, [r1, #1]
   8733e:	2a0b      	cmp	r2, #11
   87340:	d126      	bne.n	87390 <udc_process_setup+0x5f8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   87342:	f641 4054 	movw	r0, #7252	; 0x1c54
   87346:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8734a:	88c2      	ldrh	r2, [r0, #6]
   8734c:	b9ba      	cbnz	r2, 8737e <udc_process_setup+0x5e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   8734e:	f241 532a 	movw	r3, #5418	; 0x152a
   87352:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87356:	7819      	ldrb	r1, [r3, #0]
   87358:	b1a1      	cbz	r1, 87384 <udc_process_setup+0x5ec>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8735a:	f641 4554 	movw	r5, #7252	; 0x1c54
   8735e:	f2c2 0507 	movt	r5, #8199	; 0x2007
   87362:	792c      	ldrb	r4, [r5, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   87364:	886d      	ldrh	r5, [r5, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   87366:	4620      	mov	r0, r4
   87368:	f646 4251 	movw	r2, #27729	; 0x6c51
   8736c:	f2c0 0208 	movt	r2, #8
   87370:	4790      	blx	r2
   87372:	b150      	cbz	r0, 8738a <udc_process_setup+0x5f2>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   87374:	4620      	mov	r0, r4
   87376:	b2e9      	uxtb	r1, r5
   87378:	4b36      	ldr	r3, [pc, #216]	; (87454 <udc_process_setup+0x6bc>)
   8737a:	4798      	blx	r3
   8737c:	e06e      	b.n	8745c <udc_process_setup+0x6c4>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
   8737e:	f04f 0000 	mov.w	r0, #0
   87382:	e06b      	b.n	8745c <udc_process_setup+0x6c4>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
   87384:	f04f 0000 	mov.w	r0, #0
   87388:	e068      	b.n	8745c <udc_process_setup+0x6c4>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
		return false;
   8738a:	f04f 0000 	mov.w	r0, #0
   8738e:	e065      	b.n	8745c <udc_process_setup+0x6c4>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   87390:	2b02      	cmp	r3, #2
   87392:	d165      	bne.n	87460 <udc_process_setup+0x6c8>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   87394:	f641 4354 	movw	r3, #7252	; 0x1c54
   87398:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8739c:	7858      	ldrb	r0, [r3, #1]
   8739e:	2801      	cmp	r0, #1
   873a0:	d002      	beq.n	873a8 <udc_process_setup+0x610>
   873a2:	2803      	cmp	r0, #3
   873a4:	d158      	bne.n	87458 <udc_process_setup+0x6c0>
   873a6:	e01c      	b.n	873e2 <udc_process_setup+0x64a>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   873a8:	f641 4354 	movw	r3, #7252	; 0x1c54
   873ac:	f2c2 0307 	movt	r3, #8199	; 0x2007
   873b0:	88d8      	ldrh	r0, [r3, #6]
   873b2:	b980      	cbnz	r0, 873d6 <udc_process_setup+0x63e>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   873b4:	f641 4154 	movw	r1, #7252	; 0x1c54
   873b8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   873bc:	884a      	ldrh	r2, [r1, #2]
   873be:	b96a      	cbnz	r2, 873dc <udc_process_setup+0x644>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   873c0:	f641 4354 	movw	r3, #7252	; 0x1c54
   873c4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   873c8:	7918      	ldrb	r0, [r3, #4]
   873ca:	f249 1105 	movw	r1, #37125	; 0x9105
   873ce:	f2c0 0108 	movt	r1, #8
   873d2:	4788      	blx	r1
   873d4:	e042      	b.n	8745c <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   873d6:	f04f 0000 	mov.w	r0, #0
   873da:	e03f      	b.n	8745c <udc_process_setup+0x6c4>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
   873dc:	f04f 0000 	mov.w	r0, #0
   873e0:	e03c      	b.n	8745c <udc_process_setup+0x6c4>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   873e2:	f641 4154 	movw	r1, #7252	; 0x1c54
   873e6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   873ea:	88ca      	ldrh	r2, [r1, #6]
   873ec:	b9b2      	cbnz	r2, 8741c <udc_process_setup+0x684>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   873ee:	f641 4354 	movw	r3, #7252	; 0x1c54
   873f2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   873f6:	8858      	ldrh	r0, [r3, #2]
   873f8:	b998      	cbnz	r0, 87422 <udc_process_setup+0x68a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   873fa:	f641 4454 	movw	r4, #7252	; 0x1c54
   873fe:	f2c2 0407 	movt	r4, #8199	; 0x2007
   87402:	7920      	ldrb	r0, [r4, #4]
   87404:	f649 0101 	movw	r1, #38913	; 0x9801
   87408:	f2c0 0108 	movt	r1, #8
   8740c:	4788      	blx	r1
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   8740e:	7920      	ldrb	r0, [r4, #4]
   87410:	f648 72dd 	movw	r2, #36829	; 0x8fdd
   87414:	f2c0 0208 	movt	r2, #8
   87418:	4790      	blx	r2
   8741a:	e01f      	b.n	8745c <udc_process_setup+0x6c4>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   8741c:	f04f 0000 	mov.w	r0, #0
   87420:	e01c      	b.n	8745c <udc_process_setup+0x6c4>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
   87422:	f04f 0000 	mov.w	r0, #0
   87426:	e019      	b.n	8745c <udc_process_setup+0x6c4>
				break;
			}
		}
#endif
	}
	return false;
   87428:	f04f 0000 	mov.w	r0, #0
   8742c:	e016      	b.n	8745c <udc_process_setup+0x6c4>
   8742e:	bf00      	nop
   87430:	00089905 	.word	0x00089905
   87434:	20071c54 	.word	0x20071c54
   87438:	00089925 	.word	0x00089925
   8743c:	00089945 	.word	0x00089945
   87440:	0008995d 	.word	0x0008995d
   87444:	00088ed9 	.word	0x00088ed9
   87448:	2007152a 	.word	0x2007152a
   8744c:	20070160 	.word	0x20070160
   87450:	20071520 	.word	0x20071520
   87454:	00086be5 	.word	0x00086be5
   87458:	f04f 0000 	mov.w	r0, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
   8745c:	2800      	cmp	r0, #0
   8745e:	d17b      	bne.n	87558 <udc_process_setup+0x7c0>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   87460:	f641 4154 	movw	r1, #7252	; 0x1c54
   87464:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87468:	7808      	ldrb	r0, [r1, #0]
   8746a:	f000 031f 	and.w	r3, r0, #31
   8746e:	2b01      	cmp	r3, #1
   87470:	d12d      	bne.n	874ce <udc_process_setup+0x736>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   87472:	f241 522a 	movw	r2, #5418	; 0x152a
   87476:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8747a:	7811      	ldrb	r1, [r2, #0]
   8747c:	b339      	cbz	r1, 874ce <udc_process_setup+0x736>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8747e:	f641 4454 	movw	r4, #7252	; 0x1c54
   87482:	f2c2 0407 	movt	r4, #8199	; 0x2007
   87486:	7924      	ldrb	r4, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   87488:	f241 5520 	movw	r5, #5408	; 0x1520
   8748c:	f2c2 0507 	movt	r5, #8199	; 0x2007
   87490:	682d      	ldr	r5, [r5, #0]
   87492:	6828      	ldr	r0, [r5, #0]
   87494:	7903      	ldrb	r3, [r0, #4]
   87496:	42a3      	cmp	r3, r4
   87498:	d919      	bls.n	874ce <udc_process_setup+0x736>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   8749a:	4620      	mov	r0, r4
   8749c:	f04f 0100 	mov.w	r1, #0
   874a0:	f646 323d 	movw	r2, #27453	; 0x6b3d
   874a4:	f2c0 0208 	movt	r2, #8
   874a8:	4790      	blx	r2
   874aa:	b180      	cbz	r0, 874ce <udc_process_setup+0x736>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   874ac:	6869      	ldr	r1, [r5, #4]
   874ae:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   874b2:	68e8      	ldr	r0, [r5, #12]
   874b4:	4780      	blx	r0
   874b6:	4601      	mov	r1, r0
   874b8:	4620      	mov	r0, r4
   874ba:	f646 333d 	movw	r3, #27453	; 0x6b3d
   874be:	f2c0 0308 	movt	r3, #8
   874c2:	4798      	blx	r3
   874c4:	b118      	cbz	r0, 874ce <udc_process_setup+0x736>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   874c6:	68aa      	ldr	r2, [r5, #8]
   874c8:	4790      	blx	r2
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
   874ca:	2800      	cmp	r0, #0
   874cc:	d147      	bne.n	8755e <udc_process_setup+0x7c6>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   874ce:	f641 4154 	movw	r1, #7252	; 0x1c54
   874d2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   874d6:	7808      	ldrb	r0, [r1, #0]
   874d8:	f000 031f 	and.w	r3, r0, #31
   874dc:	2b02      	cmp	r3, #2
   874de:	d141      	bne.n	87564 <udc_process_setup+0x7cc>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   874e0:	f241 522a 	movw	r2, #5418	; 0x152a
   874e4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   874e8:	7811      	ldrb	r1, [r2, #0]
   874ea:	b331      	cbz	r1, 8753a <udc_process_setup+0x7a2>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   874ec:	f241 5020 	movw	r0, #5408	; 0x1520
   874f0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   874f4:	6803      	ldr	r3, [r0, #0]
   874f6:	681a      	ldr	r2, [r3, #0]
   874f8:	7911      	ldrb	r1, [r2, #4]
   874fa:	b309      	cbz	r1, 87540 <udc_process_setup+0x7a8>
   874fc:	f04f 0400 	mov.w	r4, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   87500:	f646 363d 	movw	r6, #27453	; 0x6b3d
   87504:	f2c0 0608 	movt	r6, #8
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   87508:	f241 5720 	movw	r7, #5408	; 0x1520
   8750c:	f2c2 0707 	movt	r7, #8199	; 0x2007
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   87510:	685d      	ldr	r5, [r3, #4]
   87512:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   87516:	68eb      	ldr	r3, [r5, #12]
   87518:	4798      	blx	r3
   8751a:	4601      	mov	r1, r0
   8751c:	4620      	mov	r0, r4
   8751e:	47b0      	blx	r6
   87520:	b188      	cbz	r0, 87546 <udc_process_setup+0x7ae>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   87522:	68a8      	ldr	r0, [r5, #8]
   87524:	4780      	blx	r0
   87526:	b988      	cbnz	r0, 8754c <udc_process_setup+0x7b4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   87528:	f104 0401 	add.w	r4, r4, #1
   8752c:	b2e4      	uxtb	r4, r4
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8752e:	683b      	ldr	r3, [r7, #0]
   87530:	681a      	ldr	r2, [r3, #0]
   87532:	7911      	ldrb	r1, [r2, #4]
   87534:	42a1      	cmp	r1, r4
   87536:	d8eb      	bhi.n	87510 <udc_process_setup+0x778>
   87538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
   8753a:	f04f 0000 	mov.w	r0, #0
   8753e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
   87540:	f04f 0000 	mov.w	r0, #0
   87544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
			return false;
   87546:	f04f 0000 	mov.w	r0, #0
   8754a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
   8754c:	f04f 0001 	mov.w	r0, #1
   87550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
   87552:	f04f 0000 	mov.w	r0, #0
   87556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
   87558:	f04f 0001 	mov.w	r0, #1
   8755c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
			return true;
   8755e:	f04f 0001 	mov.w	r0, #1
   87562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   87564:	f04f 0000 	mov.w	r0, #0
   87568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   8756a:	f010 0f60 	tst.w	r0, #96	; 0x60
   8756e:	f47f af77 	bne.w	87460 <udc_process_setup+0x6c8>
   87572:	e597      	b.n	870a4 <udc_process_setup+0x30c>
   87574:	f010 0f60 	tst.w	r0, #96	; 0x60
   87578:	f47f af72 	bne.w	87460 <udc_process_setup+0x6c8>
   8757c:	e424      	b.n	86dc8 <udc_process_setup+0x30>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   8757e:	f04f 000e 	mov.w	r0, #14
		str = udc_string_product_name;
   87582:	490a      	ldr	r1, [pc, #40]	; (875ac <udc_process_setup+0x814>)
   87584:	e4e1      	b.n	86f4a <udc_process_setup+0x1b2>
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   87586:	f04f 000c 	mov.w	r0, #12
		str = udc_get_string_serial_name();
   8758a:	4909      	ldr	r1, [pc, #36]	; (875b0 <udc_process_setup+0x818>)
   8758c:	e4dd      	b.n	86f4a <udc_process_setup+0x1b2>
   8758e:	f04f 0401 	mov.w	r4, #1
   87592:	2c00      	cmp	r4, #0
   87594:	f43f ace5 	beq.w	86f62 <udc_process_setup+0x1ca>
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   87598:	5ccc      	ldrb	r4, [r1, r3]
   8759a:	f822 4f02 	strh.w	r4, [r2, #2]!
   8759e:	f103 0301 	add.w	r3, r3, #1
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   875a2:	b2dc      	uxtb	r4, r3
   875a4:	4284      	cmp	r4, r0
   875a6:	f4ff acdc 	bcc.w	86f62 <udc_process_setup+0x1ca>
   875aa:	e4e9      	b.n	86f80 <udc_process_setup+0x1e8>
   875ac:	20070250 	.word	0x20070250
   875b0:	0008dd54 	.word	0x0008dd54

000875b4 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   875b4:	b10a      	cbz	r2, 875ba <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   875b6:	6641      	str	r1, [r0, #100]	; 0x64
   875b8:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   875ba:	6601      	str	r1, [r0, #96]	; 0x60
   875bc:	4770      	bx	lr
   875be:	bf00      	nop

000875c0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   875c0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   875c2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   875c6:	d016      	beq.n	875f6 <pio_set_peripheral+0x36>
   875c8:	d804      	bhi.n	875d4 <pio_set_peripheral+0x14>
   875ca:	b1c9      	cbz	r1, 87600 <pio_set_peripheral+0x40>
   875cc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   875d0:	d115      	bne.n	875fe <pio_set_peripheral+0x3e>
   875d2:	e009      	b.n	875e8 <pio_set_peripheral+0x28>
   875d4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   875d8:	d012      	beq.n	87600 <pio_set_peripheral+0x40>
   875da:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   875de:	d00f      	beq.n	87600 <pio_set_peripheral+0x40>
   875e0:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   875e4:	d10b      	bne.n	875fe <pio_set_peripheral+0x3e>
   875e6:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   875e8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   875ea:	6f01      	ldr	r1, [r0, #112]	; 0x70
   875ec:	400b      	ands	r3, r1
   875ee:	ea23 0302 	bic.w	r3, r3, r2
   875f2:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   875f4:	e003      	b.n	875fe <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   875f6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   875f8:	ea42 0103 	orr.w	r1, r2, r3
   875fc:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   875fe:	6042      	str	r2, [r0, #4]
   87600:	4770      	bx	lr
   87602:	bf00      	nop

00087604 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   87604:	6441      	str	r1, [r0, #68]	; 0x44
   87606:	4770      	bx	lr

00087608 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   87608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8760a:	4604      	mov	r4, r0
   8760c:	460d      	mov	r5, r1
   8760e:	4616      	mov	r6, r2
   87610:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   87612:	f247 6305 	movw	r3, #30213	; 0x7605
   87616:	f2c0 0308 	movt	r3, #8
   8761a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   8761c:	4620      	mov	r0, r4
   8761e:	4629      	mov	r1, r5
   87620:	9a06      	ldr	r2, [sp, #24]
   87622:	f247 53b5 	movw	r3, #30133	; 0x75b5
   87626:	f2c0 0308 	movt	r3, #8
   8762a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8762c:	b10f      	cbz	r7, 87632 <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   8762e:	6525      	str	r5, [r4, #80]	; 0x50
   87630:	e000      	b.n	87634 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   87632:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   87634:	b10e      	cbz	r6, 8763a <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   87636:	6325      	str	r5, [r4, #48]	; 0x30
   87638:	e000      	b.n	8763c <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8763a:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8763c:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   8763e:	6025      	str	r5, [r4, #0]
   87640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87642:	bf00      	nop

00087644 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   87644:	b570      	push	{r4, r5, r6, lr}
   87646:	4604      	mov	r4, r0
   87648:	460d      	mov	r5, r1
   8764a:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   8764c:	f247 6305 	movw	r3, #30213	; 0x7605
   87650:	f2c0 0308 	movt	r3, #8
   87654:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   87656:	4620      	mov	r0, r4
   87658:	4629      	mov	r1, r5
   8765a:	f006 0201 	and.w	r2, r6, #1
   8765e:	f247 53b5 	movw	r3, #30133	; 0x75b5
   87662:	f2c0 0308 	movt	r3, #8
   87666:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   87668:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   8766c:	bf14      	ite	ne
   8766e:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   87670:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   87672:	f016 0f02 	tst.w	r6, #2
   87676:	d002      	beq.n	8767e <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   87678:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   8767c:	e004      	b.n	87688 <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8767e:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_SCIFSR = ul_mask;
   87682:	bf18      	it	ne
   87684:	f8c4 5080 	strne.w	r5, [r4, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   87688:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   8768a:	6025      	str	r5, [r4, #0]
   8768c:	bd70      	pop	{r4, r5, r6, pc}
   8768e:	bf00      	nop

00087690 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   87690:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   87692:	4770      	bx	lr

00087694 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   87694:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   87696:	4770      	bx	lr

00087698 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   87698:	b5f0      	push	{r4, r5, r6, r7, lr}
   8769a:	b083      	sub	sp, #12
   8769c:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8769e:	ea4f 1650 	mov.w	r6, r0, lsr #5
   876a2:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
   876a6:	f201 7207 	addw	r2, r1, #1799	; 0x707
   876aa:	ea4f 2642 	mov.w	r6, r2, lsl #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   876ae:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   876b2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   876b6:	d042      	beq.n	8773e <pio_configure_pin+0xa6>
   876b8:	d806      	bhi.n	876c8 <pio_configure_pin+0x30>
   876ba:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   876be:	d00a      	beq.n	876d6 <pio_configure_pin+0x3e>
   876c0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   876c4:	d164      	bne.n	87790 <pio_configure_pin+0xf8>
   876c6:	e020      	b.n	8770a <pio_configure_pin+0x72>
   876c8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   876cc:	d046      	beq.n	8775c <pio_configure_pin+0xc4>
   876ce:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   876d2:	d15d      	bne.n	87790 <pio_configure_pin+0xf8>
   876d4:	e042      	b.n	8775c <pio_configure_pin+0xc4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   876d6:	f000 071f 	and.w	r7, r0, #31
   876da:	f04f 0401 	mov.w	r4, #1
   876de:	fa04 f707 	lsl.w	r7, r4, r7
   876e2:	4630      	mov	r0, r6
   876e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   876e8:	463a      	mov	r2, r7
   876ea:	f247 53c1 	movw	r3, #30145	; 0x75c1
   876ee:	f2c0 0308 	movt	r3, #8
   876f2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   876f4:	4630      	mov	r0, r6
   876f6:	4639      	mov	r1, r7
   876f8:	ea05 0204 	and.w	r2, r5, r4
   876fc:	f247 53b5 	movw	r3, #30133	; 0x75b5
   87700:	f2c0 0308 	movt	r3, #8
   87704:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   87706:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   87708:	e044      	b.n	87794 <pio_configure_pin+0xfc>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8770a:	f000 001f 	and.w	r0, r0, #31
   8770e:	f04f 0401 	mov.w	r4, #1
   87712:	fa04 f700 	lsl.w	r7, r4, r0
   87716:	4630      	mov	r0, r6
   87718:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8771c:	463a      	mov	r2, r7
   8771e:	f247 53c1 	movw	r3, #30145	; 0x75c1
   87722:	f2c0 0308 	movt	r3, #8
   87726:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   87728:	4630      	mov	r0, r6
   8772a:	4639      	mov	r1, r7
   8772c:	ea05 0204 	and.w	r2, r5, r4
   87730:	f247 53b5 	movw	r3, #30133	; 0x75b5
   87734:	f2c0 0308 	movt	r3, #8
   87738:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8773a:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   8773c:	e02a      	b.n	87794 <pio_configure_pin+0xfc>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8773e:	f000 021f 	and.w	r2, r0, #31
   87742:	f04f 0401 	mov.w	r4, #1
   87746:	4630      	mov	r0, r6
   87748:	fa04 f102 	lsl.w	r1, r4, r2
   8774c:	462a      	mov	r2, r5
   8774e:	f247 6345 	movw	r3, #30277	; 0x7645
   87752:	f2c0 0308 	movt	r3, #8
   87756:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   87758:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8775a:	e01b      	b.n	87794 <pio_configure_pin+0xfc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8775c:	f000 021f 	and.w	r2, r0, #31
   87760:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   87764:	f005 5360 	and.w	r3, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   87768:	ea05 0104 	and.w	r1, r5, r4
   8776c:	9100      	str	r1, [sp, #0]
   8776e:	4630      	mov	r0, r6
   87770:	fa04 f102 	lsl.w	r1, r4, r2
   87774:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   87778:	bf14      	ite	ne
   8777a:	2200      	movne	r2, #0
   8777c:	2201      	moveq	r2, #1
   8777e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   87782:	f247 6509 	movw	r5, #30217	; 0x7609
   87786:	f2c0 0508 	movt	r5, #8
   8778a:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   8778c:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8778e:	e001      	b.n	87794 <pio_configure_pin+0xfc>

	default:
		return 0;
   87790:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   87794:	b003      	add	sp, #12
   87796:	bdf0      	pop	{r4, r5, r6, r7, pc}

00087798 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   87798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8779a:	4604      	mov	r4, r0
   8779c:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8779e:	f247 6391 	movw	r3, #30353	; 0x7691
   877a2:	f2c0 0308 	movt	r3, #8
   877a6:	4798      	blx	r3
   877a8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   877aa:	4620      	mov	r0, r4
   877ac:	f247 6195 	movw	r1, #30357	; 0x7695
   877b0:	f2c0 0108 	movt	r1, #8
   877b4:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   877b6:	4005      	ands	r5, r0
   877b8:	d014      	beq.n	877e4 <pio_handler_process+0x4c>
   877ba:	4c0b      	ldr	r4, [pc, #44]	; (877e8 <pio_handler_process+0x50>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
   877bc:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   877be:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   877c2:	42b0      	cmp	r0, r6
   877c4:	d10a      	bne.n	877dc <pio_handler_process+0x44>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   877c6:	f854 1c08 	ldr.w	r1, [r4, #-8]
   877ca:	4229      	tst	r1, r5
   877cc:	d006      	beq.n	877dc <pio_handler_process+0x44>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   877ce:	6822      	ldr	r2, [r4, #0]
   877d0:	4630      	mov	r0, r6
   877d2:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   877d4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   877d8:	ea25 0503 	bic.w	r5, r5, r3
   877dc:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   877e0:	2d00      	cmp	r5, #0
   877e2:	d1eb      	bne.n	877bc <pio_handler_process+0x24>
   877e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   877e6:	bf00      	nop
   877e8:	2007153c 	.word	0x2007153c

000877ec <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   877ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   877ee:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   877f2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   877f6:	f04f 010b 	mov.w	r1, #11
   877fa:	f247 7399 	movw	r3, #30617	; 0x7799
   877fe:	f2c0 0308 	movt	r3, #8
   87802:	4798      	blx	r3
   87804:	bd08      	pop	{r3, pc}
   87806:	bf00      	nop

00087808 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   87808:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8780a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   8780e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   87812:	f04f 010c 	mov.w	r1, #12
   87816:	f247 7399 	movw	r3, #30617	; 0x7799
   8781a:	f2c0 0308 	movt	r3, #8
   8781e:	4798      	blx	r3
   87820:	bd08      	pop	{r3, pc}
   87822:	bf00      	nop

00087824 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   87824:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   87826:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   8782a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8782e:	f04f 010d 	mov.w	r1, #13
   87832:	f247 7399 	movw	r3, #30617	; 0x7799
   87836:	f2c0 0308 	movt	r3, #8
   8783a:	4798      	blx	r3
   8783c:	bd08      	pop	{r3, pc}
   8783e:	bf00      	nop

00087840 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   87840:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   87842:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   87846:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8784a:	f04f 010e 	mov.w	r1, #14
   8784e:	f247 7399 	movw	r3, #30617	; 0x7799
   87852:	f2c0 0308 	movt	r3, #8
   87856:	4798      	blx	r3
   87858:	bd08      	pop	{r3, pc}
   8785a:	bf00      	nop

0008785c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8785c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87860:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   87866:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   8786a:	4308      	orrs	r0, r1
   8786c:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8786e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   87870:	f010 0f08 	tst.w	r0, #8
   87874:	d007      	beq.n	87886 <pmc_switch_mck_to_pllack+0x2a>
   87876:	e010      	b.n	8789a <pmc_switch_mck_to_pllack+0x3e>
   87878:	f100 33ff 	add.w	r3, r0, #4294967295
   8787c:	6e90      	ldr	r0, [r2, #104]	; 0x68
   8787e:	f010 0f08 	tst.w	r0, #8
   87882:	d038      	beq.n	878f6 <pmc_switch_mck_to_pllack+0x9a>
   87884:	e009      	b.n	8789a <pmc_switch_mck_to_pllack+0x3e>
   87886:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8788a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8788e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   87892:	6e91      	ldr	r1, [r2, #104]	; 0x68
   87894:	f011 0f08 	tst.w	r1, #8
   87898:	d0ee      	beq.n	87878 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8789a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   8789e:	f2c4 010e 	movt	r1, #16398	; 0x400e
   878a2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   878a4:	f022 0303 	bic.w	r3, r2, #3
   878a8:	f043 0002 	orr.w	r0, r3, #2
   878ac:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   878ae:	6e89      	ldr	r1, [r1, #104]	; 0x68
   878b0:	f011 0f08 	tst.w	r1, #8
   878b4:	d009      	beq.n	878ca <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   878b6:	f04f 0000 	mov.w	r0, #0
   878ba:	4770      	bx	lr
   878bc:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   878c0:	6e91      	ldr	r1, [r2, #104]	; 0x68
   878c2:	f011 0f08 	tst.w	r1, #8
   878c6:	d013      	beq.n	878f0 <pmc_switch_mck_to_pllack+0x94>
   878c8:	e009      	b.n	878de <pmc_switch_mck_to_pllack+0x82>
   878ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
   878ce:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   878d2:	f2c4 020e 	movt	r2, #16398	; 0x400e
   878d6:	6e90      	ldr	r0, [r2, #104]	; 0x68
   878d8:	f010 0f08 	tst.w	r0, #8
   878dc:	d0ee      	beq.n	878bc <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   878de:	f04f 0000 	mov.w	r0, #0
   878e2:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   878e4:	f04f 0001 	mov.w	r0, #1
   878e8:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   878ea:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   878ee:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   878f0:	3b01      	subs	r3, #1
   878f2:	d1f0      	bne.n	878d6 <pmc_switch_mck_to_pllack+0x7a>
   878f4:	e7f9      	b.n	878ea <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   878f6:	1e58      	subs	r0, r3, #1
   878f8:	d1cb      	bne.n	87892 <pmc_switch_mck_to_pllack+0x36>
   878fa:	e7f3      	b.n	878e4 <pmc_switch_mck_to_pllack+0x88>

000878fc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   878fc:	b188      	cbz	r0, 87922 <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   878fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   87902:	f2c4 010e 	movt	r1, #16398	; 0x400e
   87906:	6a08      	ldr	r0, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   87908:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   8790c:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   87910:	4002      	ands	r2, r0
   87912:	f04f 0302 	mov.w	r3, #2
   87916:	f2c0 1337 	movt	r3, #311	; 0x137
   8791a:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8791e:	6208      	str	r0, [r1, #32]
   87920:	4770      	bx	lr
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   87922:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87926:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8792a:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   8792c:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   87930:	f020 0203 	bic.w	r2, r0, #3
   87934:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   87938:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8793c:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   87940:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   87944:	6218      	str	r0, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   87946:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8794a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8794e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   87950:	f013 0f01 	tst.w	r3, #1
   87954:	d0fb      	beq.n	8794e <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   87956:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   8795a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8795e:	6a08      	ldr	r0, [r1, #32]
   87960:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   87964:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   87968:	620b      	str	r3, [r1, #32]
   8796a:	4770      	bx	lr

0008796c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8796c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87970:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87974:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   87976:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8797a:	4770      	bx	lr

0008797c <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8797c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87980:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87984:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   87988:	629a      	str	r2, [r3, #40]	; 0x28
   8798a:	4770      	bx	lr

0008798c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8798c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87990:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87994:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   87996:	f000 0002 	and.w	r0, r0, #2
   8799a:	4770      	bx	lr

0008799c <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
   8799c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   879a0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   879a4:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
   879a8:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   879aa:	f44f 60c0 	mov.w	r0, #1536	; 0x600
   879ae:	f2c4 000e 	movt	r0, #16398	; 0x400e
   879b2:	6e81      	ldr	r1, [r0, #104]	; 0x68
   879b4:	f011 0f40 	tst.w	r1, #64	; 0x40
   879b8:	d0fb      	beq.n	879b2 <pmc_enable_upll_clock+0x16>
}
   879ba:	4770      	bx	lr

000879bc <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   879bc:	282c      	cmp	r0, #44	; 0x2c
   879be:	d835      	bhi.n	87a2c <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   879c0:	281f      	cmp	r0, #31
   879c2:	d817      	bhi.n	879f4 <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   879c4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   879c8:	f2c4 010e 	movt	r1, #16398	; 0x400e
   879cc:	698a      	ldr	r2, [r1, #24]
   879ce:	f04f 0301 	mov.w	r3, #1
   879d2:	fa03 f300 	lsl.w	r3, r3, r0
   879d6:	401a      	ands	r2, r3
   879d8:	4293      	cmp	r3, r2
   879da:	d02a      	beq.n	87a32 <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   879dc:	f04f 0101 	mov.w	r1, #1
   879e0:	fa01 f000 	lsl.w	r0, r1, r0
   879e4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   879e8:	f2c4 020e 	movt	r2, #16398	; 0x400e
   879ec:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   879ee:	f04f 0000 	mov.w	r0, #0
   879f2:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   879f4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   879f8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   879fc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   87a00:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   87a04:	f04f 0101 	mov.w	r1, #1
   87a08:	fa01 f100 	lsl.w	r1, r1, r0
   87a0c:	400a      	ands	r2, r1
   87a0e:	4291      	cmp	r1, r2
   87a10:	d012      	beq.n	87a38 <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   87a12:	f04f 0301 	mov.w	r3, #1
   87a16:	fa03 f000 	lsl.w	r0, r3, r0
   87a1a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   87a1e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   87a22:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   87a26:	f04f 0000 	mov.w	r0, #0
   87a2a:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   87a2c:	f04f 0001 	mov.w	r0, #1
   87a30:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   87a32:	f04f 0000 	mov.w	r0, #0
   87a36:	4770      	bx	lr
   87a38:	f04f 0000 	mov.w	r0, #0
}
   87a3c:	4770      	bx	lr
   87a3e:	bf00      	nop

00087a40 <pmc_switch_udpck_to_upllck>:
 *
 * \param dw_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
   87a40:	ea4f 2000 	mov.w	r0, r0, lsl #8
   87a44:	f400 6270 	and.w	r2, r0, #3840	; 0xf00
   87a48:	f042 0101 	orr.w	r1, r2, #1
   87a4c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87a50:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87a54:	6399      	str	r1, [r3, #56]	; 0x38
   87a56:	4770      	bx	lr

00087a58 <pmc_enable_udpck>:
void pmc_enable_udpck(void)
{
# if (SAM3S || SAM4S || SAM4E)
	PMC->PMC_SCER = PMC_SCER_UDP;
# else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
   87a58:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87a5c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87a60:	f04f 0220 	mov.w	r2, #32
   87a64:	601a      	str	r2, [r3, #0]
   87a66:	4770      	bx	lr

00087a68 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   87a68:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87a6c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87a70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   87a72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   87a76:	f420 0178 	bic.w	r1, r0, #16252928	; 0xf80000
	PMC->PMC_FSMR |= ul_inputs;
   87a7a:	430a      	orrs	r2, r1
   87a7c:	671a      	str	r2, [r3, #112]	; 0x70
   87a7e:	4770      	bx	lr

00087a80 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_fastrc_used;
   87a80:	f241 53a0 	movw	r3, #5536	; 0x15a0
   87a84:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87a88:	7818      	ldrb	r0, [r3, #0]
}
   87a8a:	f080 0001 	eor.w	r0, r0, #1
   87a8e:	4770      	bx	lr

00087a90 <udd_sleep_mode>:
 *
 * \param b_enable true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   87a90:	4603      	mov	r3, r0
   87a92:	2800      	cmp	r0, #0
   87a94:	d149      	bne.n	87b2a <udd_sleep_mode+0x9a>
   87a96:	f241 52a4 	movw	r2, #5540	; 0x15a4
   87a9a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87a9e:	7811      	ldrb	r1, [r2, #0]
   87aa0:	2900      	cmp	r1, #0
   87aa2:	d03c      	beq.n	87b1e <udd_sleep_mode+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87aa4:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87aa8:	b672      	cpsid	i
   87aaa:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87aae:	f240 2290 	movw	r2, #656	; 0x290
   87ab2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87ab6:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   87ab8:	f641 424c 	movw	r2, #7244	; 0x1c4c
   87abc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87ac0:	7890      	ldrb	r0, [r2, #2]
   87ac2:	f100 30ff 	add.w	r0, r0, #4294967295
   87ac6:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87ac8:	bb49      	cbnz	r1, 87b1e <udd_sleep_mode+0x8e>
		cpu_irq_enable();
   87aca:	f240 2290 	movw	r2, #656	; 0x290
   87ace:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87ad2:	f04f 0101 	mov.w	r1, #1
   87ad6:	7011      	strb	r1, [r2, #0]
   87ad8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87adc:	b662      	cpsie	i
   87ade:	e01e      	b.n	87b1e <udd_sleep_mode+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87ae0:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87ae4:	b672      	cpsid	i
   87ae6:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87aea:	f240 2290 	movw	r2, #656	; 0x290
   87aee:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87af2:	f04f 0000 	mov.w	r0, #0
   87af6:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   87af8:	f641 424c 	movw	r2, #7244	; 0x1c4c
   87afc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87b00:	7890      	ldrb	r0, [r2, #2]
   87b02:	f100 0001 	add.w	r0, r0, #1
   87b06:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87b08:	b949      	cbnz	r1, 87b1e <udd_sleep_mode+0x8e>
		cpu_irq_enable();
   87b0a:	f240 2290 	movw	r2, #656	; 0x290
   87b0e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87b12:	f04f 0101 	mov.w	r1, #1
   87b16:	7011      	strb	r1, [r2, #0]
   87b18:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87b1c:	b662      	cpsie	i
	}
	if (b_idle && !udd_b_idle) {
		dbg_print("_W ");
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
   87b1e:	f241 50a4 	movw	r0, #5540	; 0x15a4
   87b22:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87b26:	7003      	strb	r3, [r0, #0]
   87b28:	4770      	bx	lr
{
	if (!b_idle && udd_b_idle) {
		dbg_print("_S ");
		sleepmgr_unlock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   87b2a:	f241 52a4 	movw	r2, #5540	; 0x15a4
   87b2e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87b32:	7810      	ldrb	r0, [r2, #0]
   87b34:	2800      	cmp	r0, #0
   87b36:	d0d3      	beq.n	87ae0 <udd_sleep_mode+0x50>
   87b38:	e7f1      	b.n	87b1e <udd_sleep_mode+0x8e>
   87b3a:	bf00      	nop

00087b3c <udd_ctrl_init>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87b3c:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87b40:	b672      	cpsid	i
   87b42:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87b46:	f240 2390 	movw	r3, #656	; 0x290
   87b4a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87b4e:	f04f 0100 	mov.w	r1, #0
   87b52:	7019      	strb	r1, [r3, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   87b54:	f24c 2020 	movw	r0, #49696	; 0xc220
   87b58:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87b5c:	f04f 0101 	mov.w	r1, #1
   87b60:	6001      	str	r1, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87b62:	b93a      	cbnz	r2, 87b74 <udd_ctrl_init+0x38>
		cpu_irq_enable();
   87b64:	f240 2390 	movw	r3, #656	; 0x290
   87b68:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87b6c:	7019      	strb	r1, [r3, #0]
   87b6e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87b72:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   87b74:	f24c 1060 	movw	r0, #49504	; 0xc160
   87b78:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87b7c:	f04f 0102 	mov.w	r1, #2
   87b80:	6001      	str	r1, [r0, #0]

	udd_g_ctrlreq.callback = NULL;
   87b82:	f641 4254 	movw	r2, #7252	; 0x1c54
   87b86:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87b8a:	f04f 0300 	mov.w	r3, #0
   87b8e:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   87b90:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   87b92:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   87b94:	f241 6120 	movw	r1, #5664	; 0x1620
   87b98:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87b9c:	700b      	strb	r3, [r1, #0]
   87b9e:	4770      	bx	lr

00087ba0 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   87ba0:	f241 6320 	movw	r3, #5664	; 0x1620
   87ba4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87ba8:	f04f 0205 	mov.w	r2, #5
   87bac:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   87bae:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   87bb2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87bb6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   87bba:	6001      	str	r1, [r0, #0]
   87bbc:	4770      	bx	lr
   87bbe:	bf00      	nop

00087bc0 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   87bc0:	f241 6320 	movw	r3, #5664	; 0x1620
   87bc4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87bc8:	f04f 0203 	mov.w	r2, #3
   87bcc:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87bce:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87bd2:	b672      	cpsid	i
   87bd4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87bd8:	f240 2190 	movw	r1, #656	; 0x290
   87bdc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87be0:	f04f 0300 	mov.w	r3, #0
   87be4:	700b      	strb	r3, [r1, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   87be6:	f24c 1260 	movw	r2, #49504	; 0xc160
   87bea:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87bee:	f04f 0101 	mov.w	r1, #1
   87bf2:	6011      	str	r1, [r2, #0]
	udd_enable_in_send_interrupt(0);
   87bf4:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   87bf8:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87bfc:	6019      	str	r1, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   87bfe:	f04f 0108 	mov.w	r1, #8
   87c02:	6011      	str	r1, [r2, #0]
	udd_enable_nak_out_interrupt(0);
   87c04:	6019      	str	r1, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87c06:	b948      	cbnz	r0, 87c1c <udd_ctrl_send_zlp_in+0x5c>
		cpu_irq_enable();
   87c08:	f240 2090 	movw	r0, #656	; 0x290
   87c0c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87c10:	f04f 0201 	mov.w	r2, #1
   87c14:	7002      	strb	r2, [r0, #0]
   87c16:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87c1a:	b662      	cpsie	i
   87c1c:	4770      	bx	lr
   87c1e:	bf00      	nop

00087c20 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   87c20:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   87c22:	f641 4354 	movw	r3, #7252	; 0x1c54
   87c26:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87c2a:	6918      	ldr	r0, [r3, #16]
   87c2c:	b100      	cbz	r0, 87c30 <udd_ctrl_endofrequest+0x10>
		udd_g_ctrlreq.callback();
   87c2e:	4780      	blx	r0
   87c30:	bd08      	pop	{r3, pc}
   87c32:	bf00      	nop

00087c34 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
   87c34:	b570      	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87c36:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87c3a:	b672      	cpsid	i
   87c3c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87c40:	f240 2390 	movw	r3, #656	; 0x290
   87c44:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87c48:	f04f 0100 	mov.w	r1, #0
   87c4c:	7019      	strb	r1, [r3, #0]
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
   87c4e:	f24c 2020 	movw	r0, #49696	; 0xc220
   87c52:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87c56:	f04f 0101 	mov.w	r1, #1
   87c5a:	6001      	str	r1, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87c5c:	b93a      	cbnz	r2, 87c6e <udd_ctrl_in_sent+0x3a>
		cpu_irq_enable();
   87c5e:	f240 2390 	movw	r3, #656	; 0x290
   87c62:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87c66:	7019      	strb	r1, [r3, #0]
   87c68:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87c6c:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   87c6e:	f241 6020 	movw	r0, #5664	; 0x1620
   87c72:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87c76:	7801      	ldrb	r1, [r0, #0]
   87c78:	2903      	cmp	r1, #3
   87c7a:	d10a      	bne.n	87c92 <udd_ctrl_in_sent+0x5e>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   87c7c:	f647 4221 	movw	r2, #31777	; 0x7c21
   87c80:	f2c0 0208 	movt	r2, #8
   87c84:	4790      	blx	r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
   87c86:	f647 303d 	movw	r0, #31549	; 0x7b3d
   87c8a:	f2c0 0008 	movt	r0, #8
   87c8e:	4780      	blx	r0
		return;
   87c90:	bd70      	pop	{r4, r5, r6, pc}
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   87c92:	f241 6422 	movw	r4, #5666	; 0x1622
   87c96:	f2c2 0407 	movt	r4, #8199	; 0x2007
   87c9a:	8823      	ldrh	r3, [r4, #0]
   87c9c:	f641 4254 	movw	r2, #7252	; 0x1c54
   87ca0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87ca4:	8990      	ldrh	r0, [r2, #12]
   87ca6:	1ac1      	subs	r1, r0, r3
   87ca8:	b28c      	uxth	r4, r1
	if (0 == nb_remain) {
   87caa:	2c00      	cmp	r4, #0
   87cac:	d155      	bne.n	87d5a <udd_ctrl_in_sent+0x126>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous playlaod buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   87cae:	f241 52a2 	movw	r2, #5538	; 0x15a2
   87cb2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87cb6:	8810      	ldrh	r0, [r2, #0]
   87cb8:	181b      	adds	r3, r3, r0
   87cba:	b299      	uxth	r1, r3
   87cbc:	8011      	strh	r1, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   87cbe:	f641 4254 	movw	r2, #7252	; 0x1c54
   87cc2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87cc6:	88d0      	ldrh	r0, [r2, #6]
   87cc8:	4288      	cmp	r0, r1
   87cca:	d005      	beq.n	87cd8 <udd_ctrl_in_sent+0xa4>
					|| b_shortpacket) {
   87ccc:	f241 6324 	movw	r3, #5668	; 0x1624
   87cd0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87cd4:	7819      	ldrb	r1, [r3, #0]
   87cd6:	b361      	cbz	r1, 87d32 <udd_ctrl_in_sent+0xfe>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   87cd8:	f241 6020 	movw	r0, #5664	; 0x1620
   87cdc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87ce0:	f04f 0204 	mov.w	r2, #4
   87ce4:	7002      	strb	r2, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87ce6:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87cea:	b672      	cpsid	i
   87cec:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87cf0:	f240 2390 	movw	r3, #656	; 0x290
   87cf4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87cf8:	f04f 0000 	mov.w	r0, #0
   87cfc:	7018      	strb	r0, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
   87cfe:	f24c 1360 	movw	r3, #49504	; 0xc160
   87d02:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87d06:	f04f 0210 	mov.w	r2, #16
   87d0a:	601a      	str	r2, [r3, #0]
	udd_enable_nak_in_interrupt(0);
   87d0c:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   87d10:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87d14:	6002      	str	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87d16:	2900      	cmp	r1, #0
   87d18:	f040 80a7 	bne.w	87e6a <udd_ctrl_in_sent+0x236>
		cpu_irq_enable();
   87d1c:	f240 2190 	movw	r1, #656	; 0x290
   87d20:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87d24:	f04f 0301 	mov.w	r3, #1
   87d28:	700b      	strb	r3, [r1, #0]
   87d2a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87d2e:	b662      	cpsie	i
   87d30:	bd70      	pop	{r4, r5, r6, pc}
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   87d32:	f641 4554 	movw	r5, #7252	; 0x1c54
   87d36:	f2c2 0507 	movt	r5, #8199	; 0x2007
   87d3a:	696e      	ldr	r6, [r5, #20]
   87d3c:	b1ce      	cbz	r6, 87d72 <udd_ctrl_in_sent+0x13e>
				|| (!udd_g_ctrlreq.over_under_run())) {
   87d3e:	47b0      	blx	r6
   87d40:	b1b8      	cbz	r0, 87d72 <udd_ctrl_in_sent+0x13e>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   87d42:	f241 6422 	movw	r4, #5666	; 0x1622
   87d46:	f2c2 0407 	movt	r4, #8199	; 0x2007
   87d4a:	f04f 0200 	mov.w	r2, #0
   87d4e:	8022      	strh	r2, [r4, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   87d50:	f641 4054 	movw	r0, #7252	; 0x1c54
   87d54:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87d58:	8984      	ldrh	r4, [r0, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   87d5a:	2c3f      	cmp	r4, #63	; 0x3f
   87d5c:	d909      	bls.n	87d72 <udd_ctrl_in_sent+0x13e>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
   87d5e:	f241 6324 	movw	r3, #5668	; 0x1624
   87d62:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87d66:	f04f 0100 	mov.w	r1, #0
   87d6a:	7019      	strb	r1, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   87d6c:	f04f 0440 	mov.w	r4, #64	; 0x40
   87d70:	e006      	b.n	87d80 <udd_ctrl_in_sent+0x14c>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
   87d72:	f241 6524 	movw	r5, #5668	; 0x1624
   87d76:	f2c2 0507 	movt	r5, #8199	; 0x2007
   87d7a:	f04f 0601 	mov.w	r6, #1
   87d7e:	702e      	strb	r6, [r5, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   87d80:	f641 4254 	movw	r2, #7252	; 0x1c54
   87d84:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87d88:	6890      	ldr	r0, [r2, #8]
   87d8a:	f241 6322 	movw	r3, #5666	; 0x1622
   87d8e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87d92:	881e      	ldrh	r6, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87d94:	f3ef 8110 	mrs	r1, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   87d98:	f1d1 0501 	rsbs	r5, r1, #1
   87d9c:	bf38      	it	cc
   87d9e:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87da0:	b672      	cpsid	i
   87da2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   87da6:	f240 2290 	movw	r2, #656	; 0x290
   87daa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87dae:	f04f 0300 	mov.w	r3, #0
   87db2:	7013      	strb	r3, [r2, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
   87db4:	f24c 1130 	movw	r1, #49456	; 0xc130
   87db8:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87dbc:	680a      	ldr	r2, [r1, #0]
   87dbe:	f012 0f02 	tst.w	r2, #2
   87dc2:	d101      	bne.n	87dc8 <udd_ctrl_in_sent+0x194>
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   87dc4:	b99c      	cbnz	r4, 87dee <udd_ctrl_in_sent+0x1ba>
   87dc6:	e035      	b.n	87e34 <udd_ctrl_in_sent+0x200>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87dc8:	b14d      	cbz	r5, 87dde <udd_ctrl_in_sent+0x1aa>
		cpu_irq_enable();
   87dca:	f240 2090 	movw	r0, #656	; 0x290
   87dce:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87dd2:	f04f 0201 	mov.w	r2, #1
   87dd6:	7002      	strb	r2, [r0, #0]
   87dd8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87ddc:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   87dde:	f241 6120 	movw	r1, #5664	; 0x1620
   87de2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87de6:	f04f 0304 	mov.w	r3, #4
   87dea:	700b      	strb	r3, [r1, #0]
		return; // Exit of IN DATA phase
   87dec:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   87dee:	1982      	adds	r2, r0, r6
		cpu_irq_restore(flags);
	}
}


static void udd_ctrl_in_sent(void)
   87df0:	f04f 0300 	mov.w	r3, #0
   87df4:	f2c2 0318 	movt	r3, #8216	; 0x2018
   87df8:	ea6f 0003 	mvn.w	r0, r3
   87dfc:	1901      	adds	r1, r0, r4
   87dfe:	f001 0001 	and.w	r0, r1, #1
   87e02:	f102 32ff 	add.w	r2, r2, #4294967295
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
   87e06:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   87e0a:	f803 1b01 	strb.w	r1, [r3], #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   87e0e:	b2d9      	uxtb	r1, r3
   87e10:	42a1      	cmp	r1, r4
   87e12:	d32b      	bcc.n	87e6c <udd_ctrl_in_sent+0x238>
   87e14:	e00e      	b.n	87e34 <udd_ctrl_in_sent+0x200>
   87e16:	f102 0001 	add.w	r0, r2, #1
		*ptr_dest++ = *ptr_src++;
   87e1a:	7852      	ldrb	r2, [r2, #1]
   87e1c:	4619      	mov	r1, r3
   87e1e:	f801 2b01 	strb.w	r2, [r1], #1
   87e22:	f100 0201 	add.w	r2, r0, #1
   87e26:	7840      	ldrb	r0, [r0, #1]
   87e28:	7058      	strb	r0, [r3, #1]
   87e2a:	f101 0301 	add.w	r3, r1, #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   87e2e:	b2d9      	uxtb	r1, r3
   87e30:	42a1      	cmp	r1, r4
   87e32:	d3f0      	bcc.n	87e16 <udd_ctrl_in_sent+0x1e2>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   87e34:	19a4      	adds	r4, r4, r6
   87e36:	f241 6322 	movw	r3, #5666	; 0x1622
   87e3a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87e3e:	801c      	strh	r4, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   87e40:	f24c 1060 	movw	r0, #49504	; 0xc160
   87e44:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87e48:	f04f 0201 	mov.w	r2, #1
   87e4c:	6002      	str	r2, [r0, #0]
	udd_enable_in_send_interrupt(0);
   87e4e:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   87e52:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87e56:	600a      	str	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87e58:	b13d      	cbz	r5, 87e6a <udd_ctrl_in_sent+0x236>
		cpu_irq_enable();
   87e5a:	f240 2390 	movw	r3, #656	; 0x290
   87e5e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87e62:	701a      	strb	r2, [r3, #0]
   87e64:	f3bf 8f5f 	dmb	sy
   87e68:	b662      	cpsie	i
   87e6a:	bd70      	pop	{r4, r5, r6, pc}
   87e6c:	b240      	sxtb	r0, r0
   87e6e:	2800      	cmp	r0, #0
   87e70:	d0d1      	beq.n	87e16 <udd_ctrl_in_sent+0x1e2>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
   87e72:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   87e76:	f803 1b01 	strb.w	r1, [r3], #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   87e7a:	b2d8      	uxtb	r0, r3
   87e7c:	42a0      	cmp	r0, r4
   87e7e:	d3ca      	bcc.n	87e16 <udd_ctrl_in_sent+0x1e2>
   87e80:	e7d8      	b.n	87e34 <udd_ctrl_in_sent+0x200>
   87e82:	bf00      	nop

00087e84 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   87e84:	b538      	push	{r3, r4, r5, lr}
   87e86:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
   87e88:	7d04      	ldrb	r4, [r0, #20]
   87e8a:	f014 0f01 	tst.w	r4, #1
   87e8e:	d013      	beq.n	87eb8 <udd_ep_finish_job+0x34>
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
   87e90:	7d04      	ldrb	r4, [r0, #20]
   87e92:	f36f 0400 	bfc	r4, #0, #1
   87e96:	7504      	strb	r4, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   87e98:	6804      	ldr	r4, [r0, #0]
   87e9a:	b16c      	cbz	r4, 87eb8 <udd_ep_finish_job+0x34>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   87e9c:	f44f 4541 	mov.w	r5, #49408	; 0xc100
   87ea0:	f2c4 050a 	movt	r5, #16394	; 0x400a
   87ea4:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
   87ea8:	f410 7f80 	tst.w	r0, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
   87eac:	bf18      	it	ne
   87eae:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   87eb2:	4608      	mov	r0, r1
   87eb4:	6899      	ldr	r1, [r3, #8]
   87eb6:	47a0      	blx	r4
   87eb8:	bd38      	pop	{r3, r4, r5, pc}
   87eba:	bf00      	nop

00087ebc <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   87ebc:	b508      	push	{r3, lr}
	ep &= USB_EP_ADDR_MASK;
   87ebe:	f000 020f 	and.w	r2, r0, #15

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   87ec2:	f102 30ff 	add.w	r0, r2, #4294967295
   87ec6:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   87eca:	f241 53a8 	movw	r3, #5544	; 0x15a8
   87ece:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87ed2:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
   87ed6:	f04f 0101 	mov.w	r1, #1
   87eda:	f647 6385 	movw	r3, #32389	; 0x7e85
   87ede:	f2c0 0308 	movt	r3, #8
   87ee2:	4798      	blx	r3
   87ee4:	bd08      	pop	{r3, pc}
   87ee6:	bf00      	nop

00087ee8 <udd_ep_trans_done>:
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

#ifdef UDD_EP_DMA_SUPPORTED
static void udd_ep_trans_done(udd_ep_id_t ep)
{
   87ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87eea:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   87eec:	f100 31ff 	add.w	r1, r0, #4294967295
   87ef0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   87ef4:	f241 53a8 	movw	r3, #5544	; 0x15a8
   87ef8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87efc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3

	if (!ptr_job->busy) {
   87f00:	7d18      	ldrb	r0, [r3, #20]
   87f02:	f010 0f01 	tst.w	r0, #1
   87f06:	f000 80c6 	beq.w	88096 <udd_ep_trans_done+0x1ae>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   87f0a:	68dc      	ldr	r4, [r3, #12]
   87f0c:	689d      	ldr	r5, [r3, #8]
   87f0e:	42ac      	cmp	r4, r5
   87f10:	f000 8082 	beq.w	88018 <udd_ep_trans_done+0x130>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   87f14:	1b2d      	subs	r5, r5, r4

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   87f16:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   87f1a:	bf92      	itee	ls
   87f1c:	042e      	lslls	r6, r5, #16
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   87f1e:	f44f 3580 	movhi.w	r5, #65536	; 0x10000

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
   87f22:	2600      	movhi	r6, #0
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
		}
		if (Is_udd_endpoint_in(ep)) {
   87f24:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   87f28:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87f2c:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   87f30:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
   87f34:	f417 7f80 	tst.w	r7, #256	; 0x100
   87f38:	d011      	beq.n	87f5e <udd_ep_trans_done+0x76>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   87f3a:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
   87f3e:	f3c7 1002 	ubfx	r0, r7, #4, #3
   87f42:	f04f 0708 	mov.w	r7, #8
   87f46:	fa07 f000 	lsl.w	r0, r7, r0
   87f4a:	f100 30ff 	add.w	r0, r0, #4294967295
   87f4e:	4205      	tst	r5, r0
   87f50:	d017      	beq.n	87f82 <udd_ep_trans_done+0x9a>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
   87f52:	433e      	orrs	r6, r7
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   87f54:	7d1f      	ldrb	r7, [r3, #20]
   87f56:	f36f 0741 	bfc	r7, #1, #1
   87f5a:	751f      	strb	r7, [r3, #20]
   87f5c:	e011      	b.n	87f82 <udd_ep_trans_done+0x9a>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   87f5e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
   87f62:	f3c0 27c1 	ubfx	r7, r0, #11, #2
   87f66:	2f01      	cmp	r7, #1
   87f68:	d109      	bne.n	87f7e <udd_ep_trans_done+0x96>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   87f6a:	f8dc 0000 	ldr.w	r0, [ip]
   87f6e:	f3c0 1002 	ubfx	r0, r0, #4, #3
   87f72:	f04f 0708 	mov.w	r7, #8
   87f76:	fa07 f000 	lsl.w	r0, r7, r0
   87f7a:	4285      	cmp	r5, r0
   87f7c:	d801      	bhi.n	87f82 <udd_ep_trans_done+0x9a>

				// Enable short packet reception
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   87f7e:	f046 0614 	orr.w	r6, r6, #20
						| UOTGHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   87f82:	f44f 4043 	mov.w	r0, #49920	; 0xc300
   87f86:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87f8a:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   87f8e:	685f      	ldr	r7, [r3, #4]
   87f90:	193c      	adds	r4, r7, r4
   87f92:	6044      	str	r4, [r0, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87f94:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   87f98:	f1d7 0c01 	rsbs	ip, r7, #1
   87f9c:	bf38      	it	cc
   87f9e:	f04f 0c00 	movcc.w	ip, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87fa2:	b672      	cpsid	i
   87fa4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   87fa8:	f240 2490 	movw	r4, #656	; 0x290
   87fac:	f2c2 0407 	movt	r4, #8199	; 0x2007
   87fb0:	f04f 0700 	mov.w	r7, #0
   87fb4:	7027      	strb	r7, [r4, #0]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   87fb6:	68c4      	ldr	r4, [r0, #12]
   87fb8:	f014 0f10 	tst.w	r4, #16
   87fbc:	d11d      	bne.n	87ffa <udd_ep_trans_done+0x112>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   87fbe:	f046 0621 	orr.w	r6, r6, #33	; 0x21
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
				& UOTGHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   87fc2:	6086      	str	r6, [r0, #8]
			ptr_job->buf_cnt += next_trans;
   87fc4:	68da      	ldr	r2, [r3, #12]
   87fc6:	1950      	adds	r0, r2, r5
   87fc8:	60d8      	str	r0, [r3, #12]
			ptr_job->buf_load = next_trans;
   87fca:	611d      	str	r5, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   87fcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   87fd0:	fa03 f101 	lsl.w	r1, r3, r1
   87fd4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   87fd8:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87fdc:	6191      	str	r1, [r2, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87fde:	f1bc 0f00 	cmp.w	ip, #0
   87fe2:	d058      	beq.n	88096 <udd_ep_trans_done+0x1ae>
		cpu_irq_enable();
   87fe4:	f240 2090 	movw	r0, #656	; 0x290
   87fe8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87fec:	f04f 0301 	mov.w	r3, #1
   87ff0:	7003      	strb	r3, [r0, #0]
   87ff2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87ff6:	b662      	cpsie	i
   87ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87ffa:	f1bc 0f00 	cmp.w	ip, #0
   87ffe:	d009      	beq.n	88014 <udd_ep_trans_done+0x12c>
		cpu_irq_enable();
   88000:	f240 2190 	movw	r1, #656	; 0x290
   88004:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88008:	f04f 0001 	mov.w	r0, #1
   8800c:	7008      	strb	r0, [r1, #0]
   8800e:	f3bf 8f5f 	dmb	sy
   88012:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   88014:	68d9      	ldr	r1, [r3, #12]
   88016:	6099      	str	r1, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   88018:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   8801c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88020:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
   88024:	f411 7f80 	tst.w	r1, #256	; 0x100
   88028:	d02d      	beq.n	88086 <udd_ep_trans_done+0x19e>
		if (ptr_job->b_shortpacket) {
   8802a:	7d18      	ldrb	r0, [r3, #20]
   8802c:	f000 0102 	and.w	r1, r0, #2
   88030:	b2c8      	uxtb	r0, r1
   88032:	b340      	cbz	r0, 88086 <udd_ep_trans_done+0x19e>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
   88034:	f24c 1060 	movw	r0, #49504	; 0xc160
   88038:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8803c:	f04f 0101 	mov.w	r1, #1
   88040:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			if (Is_udd_write_enabled(ep)) {
   88044:	f24c 1330 	movw	r3, #49456	; 0xc130
   88048:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8804c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   88050:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   88054:	d005      	beq.n	88062 <udd_ep_trans_done+0x17a>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
   88056:	f24c 1390 	movw	r3, #49552	; 0xc190
   8805a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8805e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
   88062:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   88066:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8806a:	f04f 0101 	mov.w	r1, #1
   8806e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			udd_enable_endpoint_interrupt(ep);
   88072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   88076:	fa03 f202 	lsl.w	r2, r3, r2
   8807a:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   8807e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88082:	6182      	str	r2, [r0, #24]
			return;
   88084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   88086:	4618      	mov	r0, r3
   88088:	f04f 0100 	mov.w	r1, #0
   8808c:	f647 6385 	movw	r3, #32389	; 0x7e85
   88090:	f2c0 0308 	movt	r3, #8
   88094:	4798      	blx	r3
   88096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00088098 <udd_enable>:
	return true;
}


void udd_enable(void)
{
   88098:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8809a:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8809e:	b672      	cpsid	i
   880a0:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   880a4:	f240 2390 	movw	r3, #656	; 0x290
   880a8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   880ac:	f04f 0200 	mov.w	r2, #0
   880b0:	701a      	strb	r2, [r3, #0]
		cpu_irq_restore(flags);
		return;
	}
#else
	// SINGLE DEVICE MODE INITIALIZATION
	pmc_enable_periph_clk(ID_UOTGHS);
   880b2:	f04f 0028 	mov.w	r0, #40	; 0x28
   880b6:	f647 11bd 	movw	r1, #31165	; 0x79bd
   880ba:	f2c0 0108 	movt	r1, #8
   880be:	4788      	blx	r1
	sysclk_enable_usb();
   880c0:	f245 20c9 	movw	r0, #21193	; 0x52c9
   880c4:	f2c0 0008 	movt	r0, #8
   880c8:	4780      	blx	r0
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   880ca:	f44f 4361 	mov.w	r3, #57600	; 0xe100
   880ce:	f2ce 0300 	movt	r3, #57344	; 0xe000
   880d2:	f04f 0250 	mov.w	r2, #80	; 0x50
   880d6:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   880da:	f44f 7180 	mov.w	r1, #256	; 0x100
   880de:	6059      	str	r1, [r3, #4]
	NVIC_SetPriority((IRQn_Type) ID_UOTGHS, UDD_USB_INT_LEVEL);
	NVIC_EnableIRQ((IRQn_Type) ID_UOTGHS);

	// Always authorize asynchrone USB interrupts to exit of sleep mode
	// For SAM USB wake up device except BACKUP mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   880e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   880e4:	f647 2369 	movw	r3, #31337	; 0x7a69
   880e8:	f2c0 0308 	movt	r3, #8
   880ec:	4798      	blx	r3
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
#else
	// ID pin not used then force device mode
	otg_disable_id_pin();
   880ee:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   880f2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   880f6:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
   880fa:	f022 7180 	bic.w	r1, r2, #16777216	; 0x1000000
   880fe:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
	otg_force_device_mode();
   88102:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   88106:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
   8810a:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
   8810e:	f8d0 1800 	ldr.w	r1, [r0, #2048]	; 0x800
   88112:	f021 7380 	bic.w	r3, r1, #16777216	; 0x1000000
   88116:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
#endif
	// Enable USB hardware
	otg_enable_pad();
   8811a:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
   8811e:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
   88122:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
	otg_enable();
   88126:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   8812a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
   8812e:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
   88132:	6801      	ldr	r1, [r0, #0]
   88134:	f421 5380 	bic.w	r3, r1, #4096	; 0x1000
   88138:	6003      	str	r3, [r0, #0]
# ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   8813a:	6802      	ldr	r2, [r0, #0]
   8813c:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
   88140:	6001      	str	r1, [r0, #0]
	udd_high_speed_disable();
# endif
#endif // USB_DEVICE_LOW_SPEED

	// Check USB clock
	otg_unfreeze_clock();
   88142:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   88146:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
   8814a:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   8814e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88152:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88156:	f8d0 1804 	ldr.w	r1, [r0, #2052]	; 0x804
   8815a:	f411 4f80 	tst.w	r1, #16384	; 0x4000
   8815e:	d0fa      	beq.n	88156 <udd_enable+0xbe>

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   88160:	f241 53a8 	movw	r3, #5544	; 0x15a8
   88164:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88168:	7d1a      	ldrb	r2, [r3, #20]
		udd_ep_job[i].stall_requested = false;
   8816a:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
   8816e:	f36f 0082 	bfc	r0, #2, #1
   88172:	7518      	strb	r0, [r3, #20]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   88174:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
		udd_ep_job[i].stall_requested = false;
   88178:	f001 02fe 	and.w	r2, r1, #254	; 0xfe
   8817c:	f36f 0282 	bfc	r2, #2, #1
   88180:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   88184:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
		udd_ep_job[i].stall_requested = false;
   88188:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
   8818c:	f36f 0182 	bfc	r1, #2, #1
   88190:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   88194:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
		udd_ep_job[i].stall_requested = false;
   88198:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
   8819c:	f36f 0082 	bfc	r0, #2, #1
   881a0:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   881a4:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
		udd_ep_job[i].stall_requested = false;
   881a8:	f001 02fe 	and.w	r2, r1, #254	; 0xfe
   881ac:	f36f 0282 	bfc	r2, #2, #1
   881b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
#endif

	otg_ack_vbus_transition();
   881b4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   881b8:	f2c4 030a 	movt	r3, #16394	; 0x400a
   881bc:	f04f 0002 	mov.w	r0, #2
   881c0:	f8c3 0808 	str.w	r0, [r3, #2056]	; 0x808
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
   881c4:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
   881c8:	f411 6f00 	tst.w	r1, #2048	; 0x800
   881cc:	d005      	beq.n	881da <udd_enable+0x142>
		otg_raise_vbus_transition();
   881ce:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   881d2:	f2c4 020a 	movt	r2, #16394	; 0x400a
   881d6:	f8c2 080c 	str.w	r0, [r2, #2060]	; 0x80c
	}
	otg_enable_vbus_interrupt();
   881da:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   881de:	f2c4 030a 	movt	r3, #16394	; 0x400a
   881e2:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
   881e6:	f040 0102 	orr.w	r1, r0, #2
   881ea:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	otg_freeze_clock();
   881ee:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   881f2:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   881f6:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800

#ifndef UDD_NO_SLEEP_MGR
	if (!udd_b_sleep_initialized) {
   881fa:	f241 53a1 	movw	r3, #5537	; 0x15a1
   881fe:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88202:	7819      	ldrb	r1, [r3, #0]
   88204:	bb59      	cbnz	r1, 8825e <udd_enable+0x1c6>
		udd_b_sleep_initialized = true;
   88206:	f241 50a1 	movw	r0, #5537	; 0x15a1
   8820a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8820e:	f04f 0301 	mov.w	r3, #1
   88212:	7003      	strb	r3, [r0, #0]
		// Initialize the sleep mode authorized for the USB suspend mode
		udd_b_idle = false;
   88214:	f04f 0000 	mov.w	r0, #0
   88218:	f241 51a4 	movw	r1, #5540	; 0x15a4
   8821c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88220:	7008      	strb	r0, [r1, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   88222:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   88226:	b672      	cpsid	i
   88228:	f3bf 8f5f 	dmb	sy
   8822c:	f240 2390 	movw	r3, #656	; 0x290
   88230:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88234:	7018      	strb	r0, [r3, #0]
   88236:	f641 404c 	movw	r0, #7244	; 0x1c4c
   8823a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8823e:	78c1      	ldrb	r1, [r0, #3]
   88240:	f101 0101 	add.w	r1, r1, #1
   88244:	70c1      	strb	r1, [r0, #3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88246:	b98a      	cbnz	r2, 8826c <udd_enable+0x1d4>
		cpu_irq_enable();
   88248:	f240 2390 	movw	r3, #656	; 0x290
   8824c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88250:	f04f 0201 	mov.w	r2, #1
   88254:	701a      	strb	r2, [r3, #0]
   88256:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8825a:	b662      	cpsie	i
   8825c:	e006      	b.n	8826c <udd_enable+0x1d4>
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_SUSPEND);
	} else {
		udd_sleep_mode(false); // Enter idle mode
   8825e:	f04f 0000 	mov.w	r0, #0
   88262:	f647 2291 	movw	r2, #31377	; 0x7a91
   88266:	f2c0 0208 	movt	r2, #8
   8826a:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8826c:	b94c      	cbnz	r4, 88282 <udd_enable+0x1ea>
		cpu_irq_enable();
   8826e:	f240 2090 	movw	r0, #656	; 0x290
   88272:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88276:	f04f 0101 	mov.w	r1, #1
   8827a:	7001      	strb	r1, [r0, #0]
   8827c:	f3bf 8f5f 	dmb	sy
   88280:	b662      	cpsie	i
   88282:	bd10      	pop	{r4, pc}

00088284 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   88284:	b570      	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   88286:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8828a:	b672      	cpsid	i
   8828c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   88290:	f240 2390 	movw	r3, #656	; 0x290
   88294:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88298:	f04f 0200 	mov.w	r2, #0
   8829c:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   8829e:	f04f 0001 	mov.w	r0, #1
   882a2:	f647 2191 	movw	r1, #31377	; 0x7a91
   882a6:	f2c0 0108 	movt	r1, #8
   882aa:	4788      	blx	r1
	otg_unfreeze_clock();
   882ac:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   882b0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   882b4:	f8d0 5800 	ldr.w	r5, [r0, #2048]	; 0x800
   882b8:	f425 4680 	bic.w	r6, r5, #16384	; 0x4000
   882bc:	f8c0 6800 	str.w	r6, [r0, #2048]	; 0x800

	// This section of clock check can be improved with a chek of
	// USB clock source via sysclk()
	// Check USB clock because the source can be a PLL
	while (!Is_otg_clock_usable());
   882c0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   882c4:	f2c4 020a 	movt	r2, #16394	; 0x400a
   882c8:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   882cc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   882d0:	d0fa      	beq.n	882c8 <udd_attach+0x44>

	// Authorize attach if Vbus is present
	udd_attach_device();
   882d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   882d6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   882da:	6819      	ldr	r1, [r3, #0]
   882dc:	f421 7080 	bic.w	r0, r1, #256	; 0x100
   882e0:	6018      	str	r0, [r3, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   882e2:	f04f 0608 	mov.w	r6, #8
   882e6:	619e      	str	r6, [r3, #24]
	udd_enable_suspend_interrupt();
   882e8:	f04f 0101 	mov.w	r1, #1
   882ec:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
   882ee:	f04f 0210 	mov.w	r2, #16
   882f2:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   882f4:	f04f 0504 	mov.w	r5, #4
   882f8:	619d      	str	r5, [r3, #24]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   882fa:	f04f 0002 	mov.w	r0, #2
   882fe:	6198      	str	r0, [r3, #24]
#endif
	// Reset following interupts flag
	udd_ack_reset();
   88300:	609e      	str	r6, [r3, #8]
	udd_ack_sof();
   88302:	609d      	str	r5, [r3, #8]
	udd_ack_msof();
   88304:	6098      	str	r0, [r3, #8]

	// The first suspend interrupt must be forced
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
   88306:	60d9      	str	r1, [r3, #12]

	udd_ack_wake_up();
   88308:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   8830a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8830e:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   88312:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88316:	b93c      	cbnz	r4, 88328 <udd_attach+0xa4>
		cpu_irq_enable();
   88318:	f240 2390 	movw	r3, #656	; 0x290
   8831c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88320:	7019      	strb	r1, [r3, #0]
   88322:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   88326:	b662      	cpsie	i
   88328:	bd70      	pop	{r4, r5, r6, pc}
   8832a:	bf00      	nop

0008832c <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
   8832c:	b508      	push	{r3, lr}
	otg_unfreeze_clock();
   8832e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88332:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88336:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8833a:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   8833e:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800

	// Detach device from the bus
	udd_detach_device();
   88342:	6819      	ldr	r1, [r3, #0]
   88344:	f441 7280 	orr.w	r2, r1, #256	; 0x100
   88348:	601a      	str	r2, [r3, #0]
	otg_freeze_clock();
   8834a:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
   8834e:	f440 4180 	orr.w	r1, r0, #16384	; 0x4000
   88352:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	udd_sleep_mode(false);
   88356:	f04f 0000 	mov.w	r0, #0
   8835a:	f647 2391 	movw	r3, #31377	; 0x7a91
   8835e:	f2c0 0308 	movt	r3, #8
   88362:	4798      	blx	r3
   88364:	bd08      	pop	{r3, pc}
   88366:	bf00      	nop

00088368 <UOTGHS_Handler>:
void udd_interrupt(void);
void udd_interrupt(void)
#else
ISR(UDD_USB_INT_FUN)
#endif
{
   88368:	b570      	push	{r4, r5, r6, lr}
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   8836a:	f647 2381 	movw	r3, #31361	; 0x7a81
   8836e:	f2c0 0308 	movt	r3, #8
   88372:	4798      	blx	r3
   88374:	b990      	cbnz	r0, 8839c <UOTGHS_Handler+0x34>
   88376:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   8837a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8837e:	6841      	ldr	r1, [r0, #4]
   88380:	f011 0f01 	tst.w	r1, #1
   88384:	d10a      	bne.n	8839c <UOTGHS_Handler+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   88386:	b672      	cpsid	i
   88388:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   8838c:	f240 2090 	movw	r0, #656	; 0x290
   88390:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88394:	f04f 0200 	mov.w	r2, #0
   88398:	7002      	strb	r2, [r0, #0]
		return;
   8839a:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_sof()) {
   8839c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   883a0:	f2c4 020a 	movt	r2, #16394	; 0x400a
   883a4:	6853      	ldr	r3, [r2, #4]
   883a6:	f013 0f04 	tst.w	r3, #4
   883aa:	d016      	beq.n	883da <UOTGHS_Handler+0x72>
		udd_ack_sof();
   883ac:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   883b0:	f2c4 010a 	movt	r1, #16394	; 0x400a
   883b4:	f04f 0004 	mov.w	r0, #4
   883b8:	6088      	str	r0, [r1, #8]
		if (Is_udd_full_speed_mode()) {
   883ba:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
   883be:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   883c2:	d104      	bne.n	883ce <UOTGHS_Handler+0x66>
			udc_sof_notify();
   883c4:	f646 5351 	movw	r3, #27985	; 0x6d51
   883c8:	f2c0 0308 	movt	r3, #8
   883cc:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   883ce:	f644 6191 	movw	r1, #20113	; 0x4e91
   883d2:	f2c0 0108 	movt	r1, #8
   883d6:	4788      	blx	r1
#endif
		goto udd_interrupt_sof_end;
   883d8:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_msof()) {
   883da:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   883de:	f2c4 000a 	movt	r0, #16394	; 0x400a
   883e2:	6841      	ldr	r1, [r0, #4]
   883e4:	f011 0f02 	tst.w	r1, #2
   883e8:	d00c      	beq.n	88404 <UOTGHS_Handler+0x9c>
		udd_ack_msof();
   883ea:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   883ee:	f2c4 000a 	movt	r0, #16394	; 0x400a
   883f2:	f04f 0202 	mov.w	r2, #2
   883f6:	6082      	str	r2, [r0, #8]
		udc_sof_notify();
   883f8:	f646 5351 	movw	r3, #27985	; 0x6d51
   883fc:	f2c0 0308 	movt	r3, #8
   88400:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   88402:	bd70      	pop	{r4, r5, r6, pc}


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0)) {
   88404:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   88408:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8840c:	6853      	ldr	r3, [r2, #4]
   8840e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   88412:	f000 8459 	beq.w	88cc8 <UOTGHS_Handler+0x960>
	}

	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   88416:	f24c 2020 	movw	r0, #49696	; 0xc220
   8841a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8841e:	f04f 0110 	mov.w	r1, #16
   88422:	6001      	str	r1, [r0, #0]
	udd_disable_nak_out_interrupt(0);
   88424:	f04f 0208 	mov.w	r2, #8
   88428:	6002      	str	r2, [r0, #0]

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
   8842a:	f24c 1330 	movw	r3, #49456	; 0xc130
   8842e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88432:	6818      	ldr	r0, [r3, #0]
   88434:	f010 0f04 	tst.w	r0, #4
   88438:	f000 80d9 	beq.w	885ee <UOTGHS_Handler+0x286>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   8843c:	f241 6120 	movw	r1, #5664	; 0x1620
   88440:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88444:	780a      	ldrb	r2, [r1, #0]
   88446:	b14a      	cbz	r2, 8845c <UOTGHS_Handler+0xf4>
		// May be a hidden DATA or ZLP phase or protocol abort
		udd_ctrl_endofrequest();
   88448:	f647 4021 	movw	r0, #31777	; 0x7c21
   8844c:	f2c0 0008 	movt	r0, #8
   88450:	4780      	blx	r0

		// Reinitializes control endpoint management
		udd_ctrl_init();
   88452:	f647 333d 	movw	r3, #31549	; 0x7b3d
   88456:	f2c0 0308 	movt	r3, #8
   8845a:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   8845c:	f24c 1130 	movw	r1, #49456	; 0xc130
   88460:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88464:	680a      	ldr	r2, [r1, #0]
   88466:	f3c2 500a 	ubfx	r0, r2, #20, #11
   8846a:	2808      	cmp	r0, #8
   8846c:	d00c      	beq.n	88488 <UOTGHS_Handler+0x120>
		udd_ctrl_stall_data();
   8846e:	f647 31a1 	movw	r1, #31649	; 0x7ba1
   88472:	f2c0 0108 	movt	r1, #8
   88476:	4788      	blx	r1
		udd_ack_setup_received(0);
   88478:	f24c 1360 	movw	r3, #49504	; 0xc160
   8847c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88480:	f04f 0204 	mov.w	r2, #4
   88484:	601a      	str	r2, [r3, #0]
   88486:	bd70      	pop	{r4, r5, r6, pc}
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   88488:	f04f 0300 	mov.w	r3, #0
   8848c:	f2c2 0318 	movt	r3, #8216	; 0x2018
   88490:	7819      	ldrb	r1, [r3, #0]
   88492:	f641 4054 	movw	r0, #7252	; 0x1c54
   88496:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8849a:	7001      	strb	r1, [r0, #0]
   8849c:	f04f 0201 	mov.w	r2, #1
   884a0:	f2c2 0218 	movt	r2, #8216	; 0x2018
   884a4:	7813      	ldrb	r3, [r2, #0]
   884a6:	7043      	strb	r3, [r0, #1]
   884a8:	f04f 0102 	mov.w	r1, #2
   884ac:	f2c2 0118 	movt	r1, #8216	; 0x2018
   884b0:	780a      	ldrb	r2, [r1, #0]
   884b2:	7082      	strb	r2, [r0, #2]
   884b4:	f04f 0303 	mov.w	r3, #3
   884b8:	f2c2 0318 	movt	r3, #8216	; 0x2018
   884bc:	7819      	ldrb	r1, [r3, #0]
   884be:	70c1      	strb	r1, [r0, #3]
   884c0:	f04f 0204 	mov.w	r2, #4
   884c4:	f2c2 0218 	movt	r2, #8216	; 0x2018
   884c8:	7813      	ldrb	r3, [r2, #0]
   884ca:	7103      	strb	r3, [r0, #4]
   884cc:	f04f 0105 	mov.w	r1, #5
   884d0:	f2c2 0118 	movt	r1, #8216	; 0x2018
   884d4:	780a      	ldrb	r2, [r1, #0]
   884d6:	7142      	strb	r2, [r0, #5]
   884d8:	f04f 0306 	mov.w	r3, #6
   884dc:	f2c2 0318 	movt	r3, #8216	; 0x2018
   884e0:	7819      	ldrb	r1, [r3, #0]
   884e2:	7181      	strb	r1, [r0, #6]
   884e4:	f04f 0207 	mov.w	r2, #7
   884e8:	f2c2 0218 	movt	r2, #8216	; 0x2018
   884ec:	7813      	ldrb	r3, [r2, #0]
   884ee:	71c3      	strb	r3, [r0, #7]
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   884f0:	f646 5099 	movw	r0, #28057	; 0x6d99
   884f4:	f2c0 0008 	movt	r0, #8
   884f8:	4780      	blx	r0
   884fa:	b960      	cbnz	r0, 88516 <UOTGHS_Handler+0x1ae>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
   884fc:	f647 32a1 	movw	r2, #31649	; 0x7ba1
   88500:	f2c0 0208 	movt	r2, #8
   88504:	4790      	blx	r2
		udd_ack_setup_received(0);
   88506:	f24c 1360 	movw	r3, #49504	; 0xc160
   8850a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8850e:	f04f 0004 	mov.w	r0, #4
   88512:	6018      	str	r0, [r3, #0]
   88514:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}
	udd_ack_setup_received(0);
   88516:	f24c 1160 	movw	r1, #49504	; 0xc160
   8851a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8851e:	f04f 0204 	mov.w	r2, #4
   88522:	600a      	str	r2, [r1, #0]

	if (Udd_setup_is_in()) {
   88524:	f641 4354 	movw	r3, #7252	; 0x1c54
   88528:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8852c:	f993 0000 	ldrsb.w	r0, [r3]
   88530:	2800      	cmp	r0, #0
   88532:	da18      	bge.n	88566 <UOTGHS_Handler+0x1fe>
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   88534:	f04f 0000 	mov.w	r0, #0
   88538:	f241 51a2 	movw	r1, #5538	; 0x15a2
   8853c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88540:	8008      	strh	r0, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   88542:	f241 6222 	movw	r2, #5666	; 0x1622
   88546:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8854a:	8010      	strh	r0, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   8854c:	f241 6320 	movw	r3, #5664	; 0x1620
   88550:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88554:	f04f 0002 	mov.w	r0, #2
   88558:	7018      	strb	r0, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   8855a:	f647 4135 	movw	r1, #31797	; 0x7c35
   8855e:	f2c0 0108 	movt	r1, #8
   88562:	4788      	blx	r1
   88564:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
   88566:	f641 4154 	movw	r1, #7252	; 0x1c54
   8856a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8856e:	88ca      	ldrh	r2, [r1, #6]
   88570:	b92a      	cbnz	r2, 8857e <UOTGHS_Handler+0x216>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   88572:	f647 33c1 	movw	r3, #31681	; 0x7bc1
   88576:	f2c0 0308 	movt	r3, #8
   8857a:	4798      	blx	r3
   8857c:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   8857e:	f04f 0300 	mov.w	r3, #0
   88582:	4618      	mov	r0, r3
   88584:	f241 51a2 	movw	r1, #5538	; 0x15a2
   88588:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8858c:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8858e:	f241 6222 	movw	r2, #5666	; 0x1622
   88592:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88596:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   88598:	f241 6320 	movw	r3, #5664	; 0x1620
   8859c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   885a0:	f04f 0101 	mov.w	r1, #1
   885a4:	7019      	strb	r1, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   885a6:	f24c 1360 	movw	r3, #49504	; 0xc160
   885aa:	f2c4 030a 	movt	r3, #16394	; 0x400a
   885ae:	f04f 0210 	mov.w	r2, #16
   885b2:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   885b4:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   885b8:	b672      	cpsid	i
   885ba:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   885be:	f240 2390 	movw	r3, #656	; 0x290
   885c2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   885c6:	7018      	strb	r0, [r3, #0]
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
   885c8:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   885cc:	f2c4 000a 	movt	r0, #16394	; 0x400a
   885d0:	6002      	str	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   885d2:	2900      	cmp	r1, #0
   885d4:	f040 8471 	bne.w	88eba <UOTGHS_Handler+0xb52>
		cpu_irq_enable();
   885d8:	f240 2190 	movw	r1, #656	; 0x290
   885dc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   885e0:	f04f 0201 	mov.w	r2, #1
   885e4:	700a      	strb	r2, [r1, #0]
   885e6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   885ea:	b662      	cpsie	i
   885ec:	bd70      	pop	{r4, r5, r6, pc}
		dbg_print("stup ");
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   885ee:	f24c 1130 	movw	r1, #49456	; 0xc130
   885f2:	f2c4 010a 	movt	r1, #16394	; 0x400a
   885f6:	680a      	ldr	r2, [r1, #0]
   885f8:	f012 0f01 	tst.w	r2, #1
   885fc:	d00d      	beq.n	8861a <UOTGHS_Handler+0x2b2>
   885fe:	f24c 13c0 	movw	r3, #49600	; 0xc1c0
   88602:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88606:	6818      	ldr	r0, [r3, #0]
   88608:	f010 0f01 	tst.w	r0, #1
   8860c:	d005      	beq.n	8861a <UOTGHS_Handler+0x2b2>
		dbg_print("in ");
		// IN packet sent
		udd_ctrl_in_sent();
   8860e:	f647 4335 	movw	r3, #31797	; 0x7c35
   88612:	f2c0 0308 	movt	r3, #8
   88616:	4798      	blx	r3
   88618:	bd70      	pop	{r4, r5, r6, pc}
		return true;
	}
	if (Is_udd_out_received(0)) {
   8861a:	f24c 1130 	movw	r1, #49456	; 0xc130
   8861e:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88622:	680a      	ldr	r2, [r1, #0]
   88624:	f012 0f02 	tst.w	r2, #2
   88628:	f000 80de 	beq.w	887e8 <UOTGHS_Handler+0x480>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   8862c:	f241 6020 	movw	r0, #5664	; 0x1620
   88630:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88634:	7801      	ldrb	r1, [r0, #0]
   88636:	2901      	cmp	r1, #1
   88638:	d014      	beq.n	88664 <UOTGHS_Handler+0x2fc>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   8863a:	2902      	cmp	r1, #2
   8863c:	d001      	beq.n	88642 <UOTGHS_Handler+0x2da>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   8863e:	2904      	cmp	r1, #4
   88640:	d105      	bne.n	8864e <UOTGHS_Handler+0x2e6>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
   88642:	f647 4221 	movw	r2, #31777	; 0x7c21
   88646:	f2c0 0208 	movt	r2, #8
   8864a:	4790      	blx	r2
   8864c:	e004      	b.n	88658 <UOTGHS_Handler+0x2f0>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   8864e:	f647 31a1 	movw	r1, #31649	; 0x7ba1
   88652:	f2c0 0108 	movt	r1, #8
   88656:	4788      	blx	r1
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   88658:	f647 303d 	movw	r0, #31549	; 0x7b3d
   8865c:	f2c0 0008 	movt	r0, #8
   88660:	4780      	blx	r0
   88662:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   88664:	f24c 1430 	movw	r4, #49456	; 0xc130
   88668:	f2c4 040a 	movt	r4, #16394	; 0x400a
   8866c:	6826      	ldr	r6, [r4, #0]
   8866e:	f3c6 540a 	ubfx	r4, r6, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   88672:	f641 4354 	movw	r3, #7252	; 0x1c54
   88676:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8867a:	8998      	ldrh	r0, [r3, #12]
   8867c:	f241 6222 	movw	r2, #5666	; 0x1622
   88680:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88684:	8816      	ldrh	r6, [r2, #0]
   88686:	1931      	adds	r1, r6, r4
   88688:	4288      	cmp	r0, r1
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   8868a:	bfae      	itee	ge
   8868c:	b2a4      	uxthge	r4, r4
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8868e:	ebc6 0000 	rsblt	r0, r6, r0
   88692:	b284      	uxthlt	r4, r0
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   88694:	f641 4354 	movw	r3, #7252	; 0x1c54
   88698:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8869c:	6898      	ldr	r0, [r3, #8]
   8869e:	1982      	adds	r2, r0, r6
	for (i = 0; i < nb_data; i++) {
   886a0:	b3b4      	cbz	r4, 88710 <UOTGHS_Handler+0x3a8>
   886a2:	f04f 0300 	mov.w	r3, #0
   886a6:	f2c2 0318 	movt	r3, #8216	; 0x2018
   886aa:	ea6f 0103 	mvn.w	r1, r3
   886ae:	1908      	adds	r0, r1, r4
   886b0:	f000 0101 	and.w	r1, r0, #1
		*ptr_dest++ = *ptr_src++;
   886b4:	f813 0b01 	ldrb.w	r0, [r3], #1
   886b8:	f802 0b01 	strb.w	r0, [r2], #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   886bc:	b2d8      	uxtb	r0, r3
   886be:	42a0      	cmp	r0, r4
   886c0:	f0c0 83fc 	bcc.w	88ebc <UOTGHS_Handler+0xb54>
   886c4:	e00e      	b.n	886e4 <UOTGHS_Handler+0x37c>
		*ptr_dest++ = *ptr_src++;
   886c6:	4618      	mov	r0, r3
   886c8:	f810 5b01 	ldrb.w	r5, [r0], #1
   886cc:	4611      	mov	r1, r2
   886ce:	f801 5b01 	strb.w	r5, [r1], #1
   886d2:	785d      	ldrb	r5, [r3, #1]
   886d4:	f100 0301 	add.w	r3, r0, #1
   886d8:	7055      	strb	r5, [r2, #1]
   886da:	f101 0201 	add.w	r2, r1, #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   886de:	b2d8      	uxtb	r0, r3
   886e0:	42a0      	cmp	r0, r4
   886e2:	d3f0      	bcc.n	886c6 <UOTGHS_Handler+0x35e>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   886e4:	19a6      	adds	r6, r4, r6
   886e6:	b2b6      	uxth	r6, r6
   886e8:	f241 6222 	movw	r2, #5666	; 0x1622
   886ec:	f2c2 0207 	movt	r2, #8199	; 0x2007
   886f0:	8016      	strh	r6, [r2, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   886f2:	2c40      	cmp	r4, #64	; 0x40
   886f4:	d10c      	bne.n	88710 <UOTGHS_Handler+0x3a8>
			|| (udd_g_ctrlreq.req.wLength <=
   886f6:	f641 4354 	movw	r3, #7252	; 0x1c54
   886fa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   886fe:	88d9      	ldrh	r1, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
   88700:	f241 50a2 	movw	r0, #5538	; 0x15a2
   88704:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88708:	8802      	ldrh	r2, [r0, #0]
   8870a:	1993      	adds	r3, r2, r6
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
   8870c:	4299      	cmp	r1, r3
   8870e:	dc22      	bgt.n	88756 <UOTGHS_Handler+0x3ee>
					(udd_ctrl_prev_payload_buf_cnt +
							udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   88710:	f641 4154 	movw	r1, #7252	; 0x1c54
   88714:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88718:	818e      	strh	r6, [r1, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   8871a:	694a      	ldr	r2, [r1, #20]
   8871c:	b172      	cbz	r2, 8873c <UOTGHS_Handler+0x3d4>
			if (!udd_g_ctrlreq.over_under_run()) {
   8871e:	4790      	blx	r2
   88720:	b960      	cbnz	r0, 8873c <UOTGHS_Handler+0x3d4>
				// Stall ZLP
				udd_ctrl_stall_data();
   88722:	f647 32a1 	movw	r2, #31649	; 0x7ba1
   88726:	f2c0 0208 	movt	r2, #8
   8872a:	4790      	blx	r2
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   8872c:	f24c 1060 	movw	r0, #49504	; 0xc160
   88730:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88734:	f04f 0302 	mov.w	r3, #2
   88738:	6003      	str	r3, [r0, #0]
   8873a:	bd70      	pop	{r4, r5, r6, pc}
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   8873c:	f24c 1060 	movw	r0, #49504	; 0xc160
   88740:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88744:	f04f 0302 	mov.w	r3, #2
   88748:	6003      	str	r3, [r0, #0]
		udd_ctrl_send_zlp_in();
   8874a:	f647 31c1 	movw	r1, #31681	; 0x7bc1
   8874e:	f2c0 0108 	movt	r1, #8
   88752:	4788      	blx	r1
   88754:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   88756:	49ae      	ldr	r1, [pc, #696]	; (88a10 <UOTGHS_Handler+0x6a8>)
   88758:	8988      	ldrh	r0, [r1, #12]
   8875a:	42b0      	cmp	r0, r6
   8875c:	d121      	bne.n	887a2 <UOTGHS_Handler+0x43a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   8875e:	4aac      	ldr	r2, [pc, #688]	; (88a10 <UOTGHS_Handler+0x6a8>)
   88760:	6953      	ldr	r3, [r2, #20]
   88762:	b94b      	cbnz	r3, 88778 <UOTGHS_Handler+0x410>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
   88764:	4aab      	ldr	r2, [pc, #684]	; (88a14 <UOTGHS_Handler+0x6ac>)
   88766:	4790      	blx	r2
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   88768:	f24c 1060 	movw	r0, #49504	; 0xc160
   8876c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88770:	f04f 0302 	mov.w	r3, #2
   88774:	6003      	str	r3, [r0, #0]
   88776:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   88778:	4798      	blx	r3
   8877a:	b948      	cbnz	r0, 88790 <UOTGHS_Handler+0x428>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   8877c:	48a5      	ldr	r0, [pc, #660]	; (88a14 <UOTGHS_Handler+0x6ac>)
   8877e:	4780      	blx	r0
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   88780:	f24c 1360 	movw	r3, #49504	; 0xc160
   88784:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88788:	f04f 0102 	mov.w	r1, #2
   8878c:	6019      	str	r1, [r3, #0]
   8878e:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   88790:	4aa1      	ldr	r2, [pc, #644]	; (88a18 <UOTGHS_Handler+0x6b0>)
   88792:	4ba2      	ldr	r3, [pc, #648]	; (88a1c <UOTGHS_Handler+0x6b4>)
   88794:	8818      	ldrh	r0, [r3, #0]
   88796:	8811      	ldrh	r1, [r2, #0]
   88798:	1840      	adds	r0, r0, r1
   8879a:	8010      	strh	r0, [r2, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   8879c:	f04f 0200 	mov.w	r2, #0
   887a0:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   887a2:	f24c 1360 	movw	r3, #49504	; 0xc160
   887a6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   887aa:	f04f 0102 	mov.w	r1, #2
   887ae:	6019      	str	r1, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   887b0:	f04f 0210 	mov.w	r2, #16
   887b4:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   887b6:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   887ba:	b672      	cpsid	i
   887bc:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   887c0:	4b97      	ldr	r3, [pc, #604]	; (88a20 <UOTGHS_Handler+0x6b8>)
   887c2:	f04f 0000 	mov.w	r0, #0
   887c6:	7018      	strb	r0, [r3, #0]
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
   887c8:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   887cc:	f2c4 030a 	movt	r3, #16394	; 0x400a
   887d0:	601a      	str	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   887d2:	2900      	cmp	r1, #0
   887d4:	f040 8371 	bne.w	88eba <UOTGHS_Handler+0xb52>
		cpu_irq_enable();
   887d8:	4991      	ldr	r1, [pc, #580]	; (88a20 <UOTGHS_Handler+0x6b8>)
   887da:	f04f 0201 	mov.w	r2, #1
   887de:	700a      	strb	r2, [r1, #0]
   887e0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   887e4:	b662      	cpsie	i
   887e6:	bd70      	pop	{r4, r5, r6, pc}
		dbg_print("out ");
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
   887e8:	f24c 1330 	movw	r3, #49456	; 0xc130
   887ec:	f2c4 030a 	movt	r3, #16394	; 0x400a
   887f0:	6818      	ldr	r0, [r3, #0]
   887f2:	f010 0f08 	tst.w	r0, #8
   887f6:	d01f      	beq.n	88838 <UOTGHS_Handler+0x4d0>
		dbg_print("nako ");
		// Overflow on OUT packet
		udd_ack_nak_out(0);
   887f8:	f24c 1060 	movw	r0, #49504	; 0xc160
   887fc:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88800:	f04f 0108 	mov.w	r1, #8
   88804:	6001      	str	r1, [r0, #0]
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
   88806:	f24c 1230 	movw	r2, #49456	; 0xc130
   8880a:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8880e:	6813      	ldr	r3, [r2, #0]
   88810:	f013 0f01 	tst.w	r3, #1
   88814:	f040 8351 	bne.w	88eba <UOTGHS_Handler+0xb52>
		return; // Overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   88818:	f241 6020 	movw	r0, #5664	; 0x1620
   8881c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88820:	7801      	ldrb	r1, [r0, #0]
   88822:	2903      	cmp	r1, #3
   88824:	f040 8349 	bne.w	88eba <UOTGHS_Handler+0xb52>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   88828:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   8882c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88830:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   88834:	601a      	str	r2, [r3, #0]
   88836:	bd70      	pop	{r4, r5, r6, pc}
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
   88838:	f24c 1130 	movw	r1, #49456	; 0xc130
   8883c:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88840:	680a      	ldr	r2, [r1, #0]
   88842:	f012 0f10 	tst.w	r2, #16
   88846:	f000 823f 	beq.w	88cc8 <UOTGHS_Handler+0x960>
		dbg_print("naki ");
		// Underflow on IN packet
		udd_ack_nak_in(0);
   8884a:	f24c 1360 	movw	r3, #49504	; 0xc160
   8884e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88852:	f04f 0010 	mov.w	r0, #16
   88856:	6018      	str	r0, [r3, #0]
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
   88858:	f24c 1130 	movw	r1, #49456	; 0xc130
   8885c:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88860:	680a      	ldr	r2, [r1, #0]
   88862:	f012 0f02 	tst.w	r2, #2
   88866:	f040 8328 	bne.w	88eba <UOTGHS_Handler+0xb52>
		return; // Underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   8886a:	f241 6320 	movw	r3, #5664	; 0x1620
   8886e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88872:	7818      	ldrb	r0, [r3, #0]
   88874:	2801      	cmp	r0, #1
   88876:	d105      	bne.n	88884 <UOTGHS_Handler+0x51c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   88878:	f647 33c1 	movw	r3, #31681	; 0x7bc1
   8887c:	f2c0 0308 	movt	r3, #8
   88880:	4798      	blx	r3
   88882:	bd70      	pop	{r4, r5, r6, pc}
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   88884:	2804      	cmp	r0, #4
   88886:	f040 8318 	bne.w	88eba <UOTGHS_Handler+0xb52>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   8888a:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   8888e:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88892:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   88896:	600a      	str	r2, [r1, #0]
   88898:	bd70      	pop	{r4, r5, r6, pc}
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   8889a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8889e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   888a2:	685a      	ldr	r2, [r3, #4]
   888a4:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   888a8:	d03c      	beq.n	88924 <UOTGHS_Handler+0x5bc>
   888aa:	f04f 0005 	mov.w	r0, #5
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   888ae:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   888b2:	495c      	ldr	r1, [pc, #368]	; (88a24 <UOTGHS_Handler+0x6bc>)
   888b4:	e019      	b.n	888ea <UOTGHS_Handler+0x582>

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   888b6:	f04f 0001 	mov.w	r0, #1
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   888ba:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   888be:	f241 51a8 	movw	r1, #5544	; 0x15a8
   888c2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   888c6:	e010      	b.n	888ea <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   888c8:	f04f 0002 	mov.w	r0, #2
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   888cc:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   888d0:	4955      	ldr	r1, [pc, #340]	; (88a28 <UOTGHS_Handler+0x6c0>)
   888d2:	e00a      	b.n	888ea <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   888d4:	f04f 0003 	mov.w	r0, #3
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   888d8:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   888dc:	4953      	ldr	r1, [pc, #332]	; (88a2c <UOTGHS_Handler+0x6c4>)
   888de:	e004      	b.n	888ea <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   888e0:	f04f 0004 	mov.w	r0, #4
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   888e4:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   888e8:	4951      	ldr	r1, [pc, #324]	; (88a30 <UOTGHS_Handler+0x6c8>)
#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   888ea:	f44f 4243 	mov.w	r2, #49920	; 0xc300
   888ee:	f2c4 020a 	movt	r2, #16394	; 0x400a
   888f2:	eb02 1300 	add.w	r3, r2, r0, lsl #4
   888f6:	68da      	ldr	r2, [r3, #12]
   888f8:	f012 0f01 	tst.w	r2, #1
   888fc:	f040 82dd 	bne.w	88eba <UOTGHS_Handler+0xb52>
					& UOTGHS_DEVDMASTATUS_CHANN_ENB) {
				return true; // Ignore EOT_STA interrupt
			}
			dbg_print("dma%x: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   88900:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   88904:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88908:	6154      	str	r4, [r2, #20]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   8890a:	68db      	ldr	r3, [r3, #12]
					UOTGHS_DEVDMASTATUS_BUFF_COUNT_Msk)
					>> UOTGHS_DEVDMASTATUS_BUFF_COUNT_Pos;
			if (nb_remaining) {
   8890c:	0c1b      	lsrs	r3, r3, #16
   8890e:	d003      	beq.n	88918 <UOTGHS_Handler+0x5b0>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   88910:	68ca      	ldr	r2, [r1, #12]
   88912:	1ad3      	subs	r3, r2, r3
   88914:	60cb      	str	r3, [r1, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   88916:	608b      	str	r3, [r1, #8]
			}
			udd_ep_trans_done(ep);
   88918:	f647 61e9 	movw	r1, #32489	; 0x7ee9
   8891c:	f2c0 0108 	movt	r1, #8
   88920:	4788      	blx	r1
   88922:	bd70      	pop	{r4, r5, r6, pc}
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88924:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88928:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8892c:	6901      	ldr	r1, [r0, #16]
   8892e:	f411 3f00 	tst.w	r1, #131072	; 0x20000
   88932:	f000 80a9 	beq.w	88a88 <UOTGHS_Handler+0x720>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88936:	f24c 13d4 	movw	r3, #49620	; 0xc1d4
   8893a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8893e:	681a      	ldr	r2, [r3, #0]
   88940:	f012 0f01 	tst.w	r2, #1
   88944:	d03b      	beq.n	889be <UOTGHS_Handler+0x656>
					&& Is_udd_in_send(ep)) {
   88946:	f24c 1044 	movw	r0, #49476	; 0xc144
   8894a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8894e:	6801      	ldr	r1, [r0, #0]
   88950:	f011 0f01 	tst.w	r1, #1
   88954:	d033      	beq.n	889be <UOTGHS_Handler+0x656>
   88956:	f04f 0205 	mov.w	r2, #5
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8895a:	f04f 0314 	mov.w	r3, #20
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8895e:	4831      	ldr	r0, [pc, #196]	; (88a24 <UOTGHS_Handler+0x6bc>)
   88960:	e016      	b.n	88990 <UOTGHS_Handler+0x628>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   88962:	f04f 0201 	mov.w	r2, #1
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88966:	f04f 0304 	mov.w	r3, #4
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8896a:	4832      	ldr	r0, [pc, #200]	; (88a34 <UOTGHS_Handler+0x6cc>)
   8896c:	e010      	b.n	88990 <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8896e:	f04f 0202 	mov.w	r2, #2
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88972:	f04f 0308 	mov.w	r3, #8
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88976:	482c      	ldr	r0, [pc, #176]	; (88a28 <UOTGHS_Handler+0x6c0>)
   88978:	e00a      	b.n	88990 <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8897a:	f04f 0203 	mov.w	r2, #3
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8897e:	f04f 030c 	mov.w	r3, #12
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88982:	482a      	ldr	r0, [pc, #168]	; (88a2c <UOTGHS_Handler+0x6c4>)
   88984:	e004      	b.n	88990 <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   88986:	f04f 0204 	mov.w	r2, #4
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8898a:	f04f 0310 	mov.w	r3, #16
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8898e:	4828      	ldr	r0, [pc, #160]	; (88a30 <UOTGHS_Handler+0x6c8>)
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
   88990:	f24c 2120 	movw	r1, #49696	; 0xc220
   88994:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88998:	f04f 0501 	mov.w	r5, #1
   8899c:	505d      	str	r5, [r3, r1]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
   8899e:	f24c 1460 	movw	r4, #49504	; 0xc160
   889a2:	f2c4 040a 	movt	r4, #16394	; 0x400a
   889a6:	511d      	str	r5, [r3, r4]
				udd_ack_fifocon(ep);
   889a8:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   889ac:	505c      	str	r4, [r3, r1]
				udd_ep_finish_job(ptr_job, false, ep);
   889ae:	f04f 0100 	mov.w	r1, #0
   889b2:	f647 6385 	movw	r3, #32389	; 0x7e85
   889b6:	f2c0 0308 	movt	r3, #8
   889ba:	4798      	blx	r3
   889bc:	bd70      	pop	{r4, r5, r6, pc}
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   889be:	f24c 13d4 	movw	r3, #49620	; 0xc1d4
   889c2:	f2c4 030a 	movt	r3, #16394	; 0x400a
   889c6:	681a      	ldr	r2, [r3, #0]
   889c8:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   889cc:	d05c      	beq.n	88a88 <UOTGHS_Handler+0x720>
					&& (0 == udd_nb_busy_bank(ep))) {
   889ce:	f24c 1044 	movw	r0, #49476	; 0xc144
   889d2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   889d6:	6801      	ldr	r1, [r0, #0]
   889d8:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   889dc:	d154      	bne.n	88a88 <UOTGHS_Handler+0x720>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   889de:	f04f 0314 	mov.w	r3, #20
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   889e2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   889e6:	4a0f      	ldr	r2, [pc, #60]	; (88a24 <UOTGHS_Handler+0x6bc>)
   889e8:	e02b      	b.n	88a42 <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   889ea:	f04f 0304 	mov.w	r3, #4
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   889ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   889f2:	4a10      	ldr	r2, [pc, #64]	; (88a34 <UOTGHS_Handler+0x6cc>)
   889f4:	e025      	b.n	88a42 <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   889f6:	f04f 0308 	mov.w	r3, #8
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   889fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   889fe:	4a0a      	ldr	r2, [pc, #40]	; (88a28 <UOTGHS_Handler+0x6c0>)
   88a00:	e01f      	b.n	88a42 <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88a02:	f04f 030c 	mov.w	r3, #12
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88a06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88a0a:	4a08      	ldr	r2, [pc, #32]	; (88a2c <UOTGHS_Handler+0x6c4>)
   88a0c:	e019      	b.n	88a42 <UOTGHS_Handler+0x6da>
   88a0e:	bf00      	nop
   88a10:	20071c54 	.word	0x20071c54
   88a14:	00087ba1 	.word	0x00087ba1
   88a18:	200715a2 	.word	0x200715a2
   88a1c:	20071622 	.word	0x20071622
   88a20:	20070290 	.word	0x20070290
   88a24:	20071608 	.word	0x20071608
   88a28:	200715c0 	.word	0x200715c0
   88a2c:	200715d8 	.word	0x200715d8
   88a30:	200715f0 	.word	0x200715f0
   88a34:	200715a8 	.word	0x200715a8
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88a38:	f04f 0310 	mov.w	r3, #16
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88a3c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88a40:	4abf      	ldr	r2, [pc, #764]	; (88d40 <UOTGHS_Handler+0x9d8>)
			}
			if (Is_udd_bank_interrupt_enabled(ep)
					&& (0 == udd_nb_busy_bank(ep))) {
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   88a42:	f24c 2020 	movw	r0, #49696	; 0xc220
   88a46:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88a4a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
   88a4e:	501c      	str	r4, [r3, r0]
				udd_disable_endpoint_interrupt(ep);
   88a50:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88a54:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88a58:	6141      	str	r1, [r0, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
   88a5a:	7d11      	ldrb	r1, [r2, #20]
   88a5c:	f36f 0182 	bfc	r1, #2, #1
   88a60:	7511      	strb	r1, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   88a62:	f44f 4241 	mov.w	r2, #49408	; 0xc100
   88a66:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88a6a:	5898      	ldr	r0, [r3, r2]
   88a6c:	f420 7100 	bic.w	r1, r0, #512	; 0x200
   88a70:	5099      	str	r1, [r3, r2]
				udd_enable_stall_handshake(ep);
   88a72:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   88a76:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88a7a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   88a7e:	5098      	str	r0, [r3, r2]
				udd_reset_data_toggle(ep);
   88a80:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   88a84:	5099      	str	r1, [r3, r2]
   88a86:	bd70      	pop	{r4, r5, r6, pc}
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   88a88:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88a8c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88a90:	685a      	ldr	r2, [r3, #4]
   88a92:	f012 0f08 	tst.w	r2, #8
   88a96:	d07a      	beq.n	88b8e <UOTGHS_Handler+0x826>
		udd_ack_reset();
   88a98:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   88a9c:	f2c4 040a 	movt	r4, #16394	; 0x400a
   88aa0:	f04f 0508 	mov.w	r5, #8
   88aa4:	60a5      	str	r5, [r4, #8]
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   88aa6:	f241 56a8 	movw	r6, #5544	; 0x15a8
   88aaa:	f2c2 0607 	movt	r6, #8199	; 0x2007
   88aae:	4630      	mov	r0, r6
   88ab0:	f04f 0101 	mov.w	r1, #1
   88ab4:	460a      	mov	r2, r1
   88ab6:	f647 6585 	movw	r5, #32389	; 0x7e85
   88aba:	f2c0 0508 	movt	r5, #8
   88abe:	47a8      	blx	r5
   88ac0:	f106 0018 	add.w	r0, r6, #24
   88ac4:	f04f 0101 	mov.w	r1, #1
   88ac8:	f04f 0202 	mov.w	r2, #2
   88acc:	47a8      	blx	r5
   88ace:	f106 0030 	add.w	r0, r6, #48	; 0x30
   88ad2:	f04f 0101 	mov.w	r1, #1
   88ad6:	f04f 0203 	mov.w	r2, #3
   88ada:	47a8      	blx	r5
   88adc:	f106 0048 	add.w	r0, r6, #72	; 0x48
   88ae0:	f04f 0101 	mov.w	r1, #1
   88ae4:	f04f 0204 	mov.w	r2, #4
   88ae8:	47a8      	blx	r5
   88aea:	f106 0060 	add.w	r0, r6, #96	; 0x60
   88aee:	f04f 0101 	mov.w	r1, #1
   88af2:	f04f 0205 	mov.w	r2, #5
   88af6:	47a8      	blx	r5
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
   88af8:	f646 43ed 	movw	r3, #27885	; 0x6ced
   88afc:	f2c0 0308 	movt	r3, #8
   88b00:	4798      	blx	r3
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   88b02:	6822      	ldr	r2, [r4, #0]
   88b04:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   88b08:	6021      	str	r1, [r4, #0]
	udd_enable_address();
   88b0a:	6820      	ldr	r0, [r4, #0]
   88b0c:	f040 0380 	orr.w	r3, r0, #128	; 0x80
   88b10:	6023      	str	r3, [r4, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   88b12:	f44f 4141 	mov.w	r1, #49408	; 0xc100
   88b16:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88b1a:	680a      	ldr	r2, [r1, #0]
   88b1c:	f422 50cb 	bic.w	r0, r2, #6496	; 0x1960
   88b20:	f020 031c 	bic.w	r3, r0, #28
   88b24:	f043 0230 	orr.w	r2, r3, #48	; 0x30
   88b28:	600a      	str	r2, [r1, #0]
		USB_EP_TYPE_CONTROL,
		0,
		USB_DEVICE_EP_CTRL_SIZE,
		UOTGHS_DEVEPTCFG_EPBK_1_BANK);

	udd_allocate_memory(0);
   88b2a:	6808      	ldr	r0, [r1, #0]
   88b2c:	f040 0302 	orr.w	r3, r0, #2
   88b30:	600b      	str	r3, [r1, #0]
	udd_enable_endpoint(0);
   88b32:	69e1      	ldr	r1, [r4, #28]
   88b34:	f041 0201 	orr.w	r2, r1, #1
   88b38:	61e2      	str	r2, [r4, #28]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   88b3a:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   88b3e:	b672      	cpsid	i
   88b40:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   88b44:	f240 2390 	movw	r3, #656	; 0x290
   88b48:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88b4c:	f04f 0100 	mov.w	r1, #0
   88b50:	7019      	strb	r1, [r3, #0]
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
   88b52:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   88b56:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88b5a:	f04f 0304 	mov.w	r3, #4
   88b5e:	6013      	str	r3, [r2, #0]
	udd_enable_out_received_interrupt(0);
   88b60:	f04f 0102 	mov.w	r1, #2
   88b64:	6011      	str	r1, [r2, #0]
	udd_enable_endpoint_interrupt(0);
   88b66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   88b6a:	61a2      	str	r2, [r4, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88b6c:	b948      	cbnz	r0, 88b82 <UOTGHS_Handler+0x81a>
		cpu_irq_enable();
   88b6e:	f240 2090 	movw	r0, #656	; 0x290
   88b72:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88b76:	f04f 0301 	mov.w	r3, #1
   88b7a:	7003      	strb	r3, [r0, #0]
   88b7c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   88b80:	b662      	cpsie	i
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
   88b82:	f647 313d 	movw	r1, #31549	; 0x7b3d
   88b86:	f2c0 0108 	movt	r1, #8
   88b8a:	4788      	blx	r1
		goto udd_interrupt_end;
   88b8c:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   88b8e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88b92:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88b96:	6901      	ldr	r1, [r0, #16]
   88b98:	f011 0f01 	tst.w	r1, #1
   88b9c:	d02a      	beq.n	88bf4 <UOTGHS_Handler+0x88c>
   88b9e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88ba2:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88ba6:	685a      	ldr	r2, [r3, #4]
   88ba8:	f012 0f01 	tst.w	r2, #1
   88bac:	d022      	beq.n	88bf4 <UOTGHS_Handler+0x88c>
		otg_unfreeze_clock();
   88bae:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   88bb2:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88bb6:	f8d1 0800 	ldr.w	r0, [r1, #2048]	; 0x800
   88bba:	f420 4380 	bic.w	r3, r0, #16384	; 0x4000
   88bbe:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   88bc2:	f04f 0201 	mov.w	r2, #1
   88bc6:	614a      	str	r2, [r1, #20]
		udd_enable_wake_up_interrupt();
   88bc8:	f04f 0010 	mov.w	r0, #16
   88bcc:	6188      	str	r0, [r1, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   88bce:	f8d1 3800 	ldr.w	r3, [r1, #2048]	; 0x800
   88bd2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
   88bd6:	f8c1 2800 	str.w	r2, [r1, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
   88bda:	f04f 0000 	mov.w	r0, #0
   88bde:	f647 2191 	movw	r1, #31377	; 0x7a91
   88be2:	f2c0 0108 	movt	r1, #8
   88be6:	4788      	blx	r1
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   88be8:	f644 6089 	movw	r0, #20105	; 0x4e89
   88bec:	f2c0 0008 	movt	r0, #8
   88bf0:	4780      	blx	r0
#endif
		goto udd_interrupt_end;
   88bf2:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   88bf4:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88bf8:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88bfc:	6901      	ldr	r1, [r0, #16]
   88bfe:	f011 0f10 	tst.w	r1, #16
   88c02:	d034      	beq.n	88c6e <UOTGHS_Handler+0x906>
   88c04:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88c08:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88c0c:	685a      	ldr	r2, [r3, #4]
   88c0e:	f012 0f10 	tst.w	r2, #16
   88c12:	d02c      	beq.n	88c6e <UOTGHS_Handler+0x906>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
   88c14:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   88c18:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88c1c:	f8d1 2800 	ldr.w	r2, [r1, #2048]	; 0x800
   88c20:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   88c24:	f8c1 0800 	str.w	r0, [r1, #2048]	; 0x800
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   88c28:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88c2c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88c30:	e003      	b.n	88c3a <UOTGHS_Handler+0x8d2>
			if (Is_udd_suspend()) {
   88c32:	685a      	ldr	r2, [r3, #4]
   88c34:	f012 0f01 	tst.w	r2, #1
   88c38:	d104      	bne.n	88c44 <UOTGHS_Handler+0x8dc>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   88c3a:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
   88c3e:	f411 4f80 	tst.w	r1, #16384	; 0x4000
   88c42:	d0f6      	beq.n	88c32 <UOTGHS_Handler+0x8ca>
			if (Is_udd_suspend()) {
				break; // In case of USB state change in HS
			}
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
   88c44:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   88c48:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88c4c:	f04f 0010 	mov.w	r0, #16
   88c50:	6148      	str	r0, [r1, #20]
		udd_enable_suspend_interrupt();
   88c52:	f04f 0001 	mov.w	r0, #1
   88c56:	6188      	str	r0, [r1, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
   88c58:	f647 2391 	movw	r3, #31377	; 0x7a91
   88c5c:	f2c0 0308 	movt	r3, #8
   88c60:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   88c62:	f644 628d 	movw	r2, #20109	; 0x4e8d
   88c66:	f2c0 0208 	movt	r2, #8
   88c6a:	4790      	blx	r2
#endif
		goto udd_interrupt_end;
   88c6c:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_otg_vbus_transition()) {
   88c6e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88c72:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88c76:	f8d0 1804 	ldr.w	r1, [r0, #2052]	; 0x804
   88c7a:	f011 0f02 	tst.w	r1, #2
   88c7e:	f000 811c 	beq.w	88eba <UOTGHS_Handler+0xb52>
		dbg_print("VBus ");
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
   88c82:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88c86:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88c8a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   88c8e:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   88c92:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
		otg_ack_vbus_transition();
   88c96:	f04f 0102 	mov.w	r1, #2
   88c9a:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
		otg_freeze_clock();
   88c9e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   88ca2:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   88ca6:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
   88caa:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   88cae:	f413 6f00 	tst.w	r3, #2048	; 0x800
			udd_attach();
   88cb2:	bf19      	ittee	ne
   88cb4:	f248 2385 	movwne	r3, #33413	; 0x8285
   88cb8:	f2c0 0308 	movtne	r3, #8
		} else {
			udd_detach();
   88cbc:	f248 332d 	movweq	r3, #33581	; 0x832d
   88cc0:	f2c0 0308 	movteq	r3, #8
   88cc4:	4798      	blx	r3
   88cc6:	bd70      	pop	{r4, r5, r6, pc}
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88cc8:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88ccc:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88cd0:	6901      	ldr	r1, [r0, #16]
   88cd2:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
   88cd6:	d008      	beq.n	88cea <UOTGHS_Handler+0x982>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   88cd8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88cdc:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88ce0:	685a      	ldr	r2, [r3, #4]
   88ce2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
   88ce6:	f47f ade6 	bne.w	888b6 <UOTGHS_Handler+0x54e>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88cea:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88cee:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88cf2:	6901      	ldr	r1, [r0, #16]
   88cf4:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   88cf8:	d024      	beq.n	88d44 <UOTGHS_Handler+0x9dc>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88cfa:	f24c 13c4 	movw	r3, #49604	; 0xc1c4
   88cfe:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88d02:	681a      	ldr	r2, [r3, #0]
   88d04:	f012 0f01 	tst.w	r2, #1
   88d08:	d110      	bne.n	88d2c <UOTGHS_Handler+0x9c4>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   88d0a:	f24c 13c4 	movw	r3, #49604	; 0xc1c4
   88d0e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88d12:	681a      	ldr	r2, [r3, #0]
   88d14:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   88d18:	d014      	beq.n	88d44 <UOTGHS_Handler+0x9dc>
					&& (0 == udd_nb_busy_bank(ep))) {
   88d1a:	f24c 1034 	movw	r0, #49460	; 0xc134
   88d1e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88d22:	6801      	ldr	r1, [r0, #0]
   88d24:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   88d28:	d10c      	bne.n	88d44 <UOTGHS_Handler+0x9dc>
   88d2a:	e65e      	b.n	889ea <UOTGHS_Handler+0x682>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   88d2c:	f24c 1034 	movw	r0, #49460	; 0xc134
   88d30:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88d34:	6801      	ldr	r1, [r0, #0]
   88d36:	f011 0f01 	tst.w	r1, #1
   88d3a:	d0e6      	beq.n	88d0a <UOTGHS_Handler+0x9a2>
   88d3c:	e611      	b.n	88962 <UOTGHS_Handler+0x5fa>
   88d3e:	bf00      	nop
   88d40:	200715f0 	.word	0x200715f0
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88d44:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88d48:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88d4c:	691a      	ldr	r2, [r3, #16]
   88d4e:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
   88d52:	d008      	beq.n	88d66 <UOTGHS_Handler+0x9fe>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   88d54:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88d58:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88d5c:	6841      	ldr	r1, [r0, #4]
   88d5e:	f011 6f80 	tst.w	r1, #67108864	; 0x4000000
   88d62:	f47f adb1 	bne.w	888c8 <UOTGHS_Handler+0x560>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88d66:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88d6a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88d6e:	691a      	ldr	r2, [r3, #16]
   88d70:	f412 4f80 	tst.w	r2, #16384	; 0x4000
   88d74:	d021      	beq.n	88dba <UOTGHS_Handler+0xa52>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88d76:	f24c 10c8 	movw	r0, #49608	; 0xc1c8
   88d7a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88d7e:	6801      	ldr	r1, [r0, #0]
   88d80:	f011 0f01 	tst.w	r1, #1
   88d84:	d110      	bne.n	88da8 <UOTGHS_Handler+0xa40>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   88d86:	f24c 10c8 	movw	r0, #49608	; 0xc1c8
   88d8a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88d8e:	6801      	ldr	r1, [r0, #0]
   88d90:	f411 5f80 	tst.w	r1, #4096	; 0x1000
   88d94:	d011      	beq.n	88dba <UOTGHS_Handler+0xa52>
					&& (0 == udd_nb_busy_bank(ep))) {
   88d96:	f24c 1338 	movw	r3, #49464	; 0xc138
   88d9a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88d9e:	681a      	ldr	r2, [r3, #0]
   88da0:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   88da4:	d109      	bne.n	88dba <UOTGHS_Handler+0xa52>
   88da6:	e626      	b.n	889f6 <UOTGHS_Handler+0x68e>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   88da8:	f24c 1338 	movw	r3, #49464	; 0xc138
   88dac:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88db0:	681a      	ldr	r2, [r3, #0]
   88db2:	f012 0f01 	tst.w	r2, #1
   88db6:	d0e6      	beq.n	88d86 <UOTGHS_Handler+0xa1e>
   88db8:	e5d9      	b.n	8896e <UOTGHS_Handler+0x606>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88dba:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88dbe:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88dc2:	6901      	ldr	r1, [r0, #16]
   88dc4:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
   88dc8:	d008      	beq.n	88ddc <UOTGHS_Handler+0xa74>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   88dca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88dce:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88dd2:	685a      	ldr	r2, [r3, #4]
   88dd4:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
   88dd8:	f47f ad7c 	bne.w	888d4 <UOTGHS_Handler+0x56c>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88ddc:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88de0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88de4:	6901      	ldr	r1, [r0, #16]
   88de6:	f411 4f00 	tst.w	r1, #32768	; 0x8000
   88dea:	d021      	beq.n	88e30 <UOTGHS_Handler+0xac8>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88dec:	f24c 13cc 	movw	r3, #49612	; 0xc1cc
   88df0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88df4:	681a      	ldr	r2, [r3, #0]
   88df6:	f012 0f01 	tst.w	r2, #1
   88dfa:	d110      	bne.n	88e1e <UOTGHS_Handler+0xab6>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   88dfc:	f24c 13cc 	movw	r3, #49612	; 0xc1cc
   88e00:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88e04:	681a      	ldr	r2, [r3, #0]
   88e06:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   88e0a:	d011      	beq.n	88e30 <UOTGHS_Handler+0xac8>
					&& (0 == udd_nb_busy_bank(ep))) {
   88e0c:	f24c 103c 	movw	r0, #49468	; 0xc13c
   88e10:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88e14:	6801      	ldr	r1, [r0, #0]
   88e16:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   88e1a:	d109      	bne.n	88e30 <UOTGHS_Handler+0xac8>
   88e1c:	e5f1      	b.n	88a02 <UOTGHS_Handler+0x69a>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   88e1e:	f24c 103c 	movw	r0, #49468	; 0xc13c
   88e22:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88e26:	6801      	ldr	r1, [r0, #0]
   88e28:	f011 0f01 	tst.w	r1, #1
   88e2c:	d0e6      	beq.n	88dfc <UOTGHS_Handler+0xa94>
   88e2e:	e5a4      	b.n	8897a <UOTGHS_Handler+0x612>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88e30:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88e34:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88e38:	691a      	ldr	r2, [r3, #16]
   88e3a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
   88e3e:	d008      	beq.n	88e52 <UOTGHS_Handler+0xaea>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   88e40:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88e44:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88e48:	6841      	ldr	r1, [r0, #4]
   88e4a:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
   88e4e:	f47f ad47 	bne.w	888e0 <UOTGHS_Handler+0x578>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88e52:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88e56:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88e5a:	691a      	ldr	r2, [r3, #16]
   88e5c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   88e60:	d021      	beq.n	88ea6 <UOTGHS_Handler+0xb3e>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88e62:	f24c 10d0 	movw	r0, #49616	; 0xc1d0
   88e66:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88e6a:	6801      	ldr	r1, [r0, #0]
   88e6c:	f011 0f01 	tst.w	r1, #1
   88e70:	d110      	bne.n	88e94 <UOTGHS_Handler+0xb2c>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   88e72:	f24c 10d0 	movw	r0, #49616	; 0xc1d0
   88e76:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88e7a:	6801      	ldr	r1, [r0, #0]
   88e7c:	f411 5f80 	tst.w	r1, #4096	; 0x1000
   88e80:	d011      	beq.n	88ea6 <UOTGHS_Handler+0xb3e>
					&& (0 == udd_nb_busy_bank(ep))) {
   88e82:	f24c 1340 	movw	r3, #49472	; 0xc140
   88e86:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88e8a:	681a      	ldr	r2, [r3, #0]
   88e8c:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   88e90:	d109      	bne.n	88ea6 <UOTGHS_Handler+0xb3e>
   88e92:	e5d1      	b.n	88a38 <UOTGHS_Handler+0x6d0>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   88e94:	f24c 1340 	movw	r3, #49472	; 0xc140
   88e98:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88e9c:	681a      	ldr	r2, [r3, #0]
   88e9e:	f012 0f01 	tst.w	r2, #1
   88ea2:	d0e6      	beq.n	88e72 <UOTGHS_Handler+0xb0a>
   88ea4:	e56f      	b.n	88986 <UOTGHS_Handler+0x61e>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88ea6:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88eaa:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88eae:	6901      	ldr	r1, [r0, #16]
   88eb0:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
   88eb4:	f47f acf1 	bne.w	8889a <UOTGHS_Handler+0x532>
   88eb8:	e534      	b.n	88924 <UOTGHS_Handler+0x5bc>
   88eba:	bd70      	pop	{r4, r5, r6, pc}
   88ebc:	b249      	sxtb	r1, r1
   88ebe:	2900      	cmp	r1, #0
   88ec0:	f43f ac01 	beq.w	886c6 <UOTGHS_Handler+0x35e>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
   88ec4:	f813 0b01 	ldrb.w	r0, [r3], #1
   88ec8:	f802 0b01 	strb.w	r0, [r2], #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   88ecc:	b2d9      	uxtb	r1, r3
   88ece:	42a1      	cmp	r1, r4
   88ed0:	f4ff abf9 	bcc.w	886c6 <UOTGHS_Handler+0x35e>
   88ed4:	e406      	b.n	886e4 <UOTGHS_Handler+0x37c>
   88ed6:	bf00      	nop

00088ed8 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   88ed8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88edc:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88ee0:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
#else
	return false;
#endif
}
   88ee4:	f410 5040 	ands.w	r0, r0, #12288	; 0x3000
   88ee8:	bf18      	it	ne
   88eea:	2001      	movne	r0, #1
   88eec:	4770      	bx	lr
   88eee:	bf00      	nop

00088ef0 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
   88ef0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88ef4:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88ef8:	681a      	ldr	r2, [r3, #0]
   88efa:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   88efe:	6019      	str	r1, [r3, #0]
	udd_configure_address(address);
   88f00:	681a      	ldr	r2, [r3, #0]
   88f02:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   88f06:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   88f0a:	ea40 0201 	orr.w	r2, r0, r1
   88f0e:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   88f10:	6818      	ldr	r0, [r3, #0]
   88f12:	f040 0180 	orr.w	r1, r0, #128	; 0x80
   88f16:	6019      	str	r1, [r3, #0]
   88f18:	4770      	bx	lr
   88f1a:	bf00      	nop

00088f1c <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
   88f1c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88f20:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88f24:	6818      	ldr	r0, [r3, #0]
}
   88f26:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   88f2a:	4770      	bx	lr

00088f2c <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
   88f2c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88f30:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88f34:	6a18      	ldr	r0, [r3, #32]
}
   88f36:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   88f3a:	4770      	bx	lr

00088f3c <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
   88f3c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88f40:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88f44:	6a18      	ldr	r0, [r3, #32]
}
   88f46:	ea4f 4180 	mov.w	r1, r0, lsl #18
   88f4a:	ea4f 4091 	mov.w	r0, r1, lsr #18
   88f4e:	4770      	bx	lr

00088f50 <udd_set_setup_payload>:
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
	udd_g_ctrlreq.payload = payload;
   88f50:	f641 4354 	movw	r3, #7252	; 0x1c54
   88f54:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88f58:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   88f5a:	8199      	strh	r1, [r3, #12]
   88f5c:	4770      	bx	lr
   88f5e:	bf00      	nop

00088f60 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
   88f60:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   88f62:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   88f66:	2c05      	cmp	r4, #5
   88f68:	d82a      	bhi.n	88fc0 <udd_ep_free+0x60>
		return;
	}
	udd_disable_endpoint(ep_index);
   88f6a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88f6e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88f72:	69d9      	ldr	r1, [r3, #28]
   88f74:	f04f 0201 	mov.w	r2, #1
   88f78:	fa02 f204 	lsl.w	r2, r2, r4
   88f7c:	ea21 0102 	bic.w	r1, r1, r2
   88f80:	61d9      	str	r1, [r3, #28]
	udd_unallocate_memory(ep_index);
   88f82:	f44f 4341 	mov.w	r3, #49408	; 0xc100
   88f86:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88f8a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   88f8e:	f022 0102 	bic.w	r1, r2, #2
   88f92:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	udd_ep_abort_job(ep);
   88f96:	f647 63bd 	movw	r3, #32445	; 0x7ebd
   88f9a:	f2c0 0308 	movt	r3, #8
   88f9e:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   88fa0:	f104 34ff 	add.w	r4, r4, #4294967295
   88fa4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   88fa8:	f241 52a8 	movw	r2, #5544	; 0x15a8
   88fac:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88fb0:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
   88fb4:	7d21      	ldrb	r1, [r4, #20]
   88fb6:	f36f 0182 	bfc	r1, #2, #1
   88fba:	7521      	strb	r1, [r4, #20]
   88fbc:	f104 0410 	add.w	r4, r4, #16
   88fc0:	bd10      	pop	{r4, pc}
   88fc2:	bf00      	nop

00088fc4 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	return Is_udd_endpoint_stall_requested(ep_index);
   88fc4:	f000 000f 	and.w	r0, r0, #15
   88fc8:	f24c 13c0 	movw	r3, #49600	; 0xc1c0
   88fcc:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88fd0:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
}
   88fd4:	f3c1 40c0 	ubfx	r0, r1, #19, #1
   88fd8:	4770      	bx	lr
   88fda:	bf00      	nop

00088fdc <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   88fdc:	b430      	push	{r4, r5}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   88fde:	f000 030f 	and.w	r3, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
   88fe2:	2b05      	cmp	r3, #5
   88fe4:	d87a      	bhi.n	890dc <udd_ep_set_halt+0x100>
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   88fe6:	f24c 12c0 	movw	r2, #49600	; 0xc1c0
   88fea:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88fee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   88ff2:	f411 2f00 	tst.w	r1, #524288	; 0x80000
   88ff6:	d174      	bne.n	890e2 <udd_ep_set_halt+0x106>


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   88ff8:	f103 34ff 	add.w	r4, r3, #4294967295
   88ffc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   89000:	f241 51a8 	movw	r1, #5544	; 0x15a8
   89004:	f2c2 0107 	movt	r1, #8199	; 0x2007
   89008:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   8900c:	7d11      	ldrb	r1, [r2, #20]
   8900e:	f001 0404 	and.w	r4, r1, #4
   89012:	b2e4      	uxtb	r4, r4
   89014:	2c00      	cmp	r4, #0
   89016:	d167      	bne.n	890e8 <udd_ep_set_halt+0x10c>
		return true; // Already STALL
	}

	if (ptr_job->busy == true) {
   89018:	f011 0f01 	tst.w	r1, #1
   8901c:	d167      	bne.n	890ee <udd_ep_set_halt+0x112>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8901e:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   89022:	f1d5 0501 	rsbs	r5, r5, #1
   89026:	bf38      	it	cc
   89028:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8902a:	b672      	cpsid	i
   8902c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   89030:	f240 2190 	movw	r1, #656	; 0x290
   89034:	f2c2 0107 	movt	r1, #8199	; 0x2007
   89038:	700c      	strb	r4, [r1, #0]
		return false; // Job on going, stall impossible
	}

	flags = cpu_irq_save();
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   8903a:	f010 0f80 	tst.w	r0, #128	; 0x80
   8903e:	d027      	beq.n	89090 <udd_ep_set_halt+0xb4>
   89040:	f24c 1030 	movw	r0, #49456	; 0xc130
   89044:	f2c4 000a 	movt	r0, #16394	; 0x400a
   89048:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   8904c:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   89050:	d01e      	beq.n	89090 <udd_ep_set_halt+0xb4>
		// Delay the stall after the end of IN transfer on USB line
		ptr_job->stall_requested = true;
   89052:	7d10      	ldrb	r0, [r2, #20]
   89054:	f040 0104 	orr.w	r1, r0, #4
   89058:	7511      	strb	r1, [r2, #20]
#ifdef UDD_EP_FIFO_SUPPORTED
		udd_disable_in_send_interrupt(ep_index);
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
   8905a:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   8905e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   89062:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   89066:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
   8906a:	fa02 f303 	lsl.w	r3, r2, r3
   8906e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   89072:	f2c4 010a 	movt	r1, #16394	; 0x400a
   89076:	618b      	str	r3, [r1, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   89078:	b3e5      	cbz	r5, 890f4 <udd_ep_set_halt+0x118>
		cpu_irq_enable();
   8907a:	f04f 0001 	mov.w	r0, #1
   8907e:	f240 2290 	movw	r2, #656	; 0x290
   89082:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89086:	7010      	strb	r0, [r2, #0]
   89088:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8908c:	b662      	cpsie	i
   8908e:	e036      	b.n	890fe <udd_ep_set_halt+0x122>
		cpu_irq_restore(flags);
		return true;
	}
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   89090:	f44f 4241 	mov.w	r2, #49408	; 0xc100
   89094:	f2c4 020a 	movt	r2, #16394	; 0x400a
   89098:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   8909c:	f420 7100 	bic.w	r1, r0, #512	; 0x200
   890a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_ack_stall(ep_index);
   890a4:	f24c 1260 	movw	r2, #49504	; 0xc160
   890a8:	f2c4 020a 	movt	r2, #16394	; 0x400a
   890ac:	f04f 0040 	mov.w	r0, #64	; 0x40
   890b0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   890b4:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   890b8:	f2c4 020a 	movt	r2, #16394	; 0x400a
   890bc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   890c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   890c4:	b1cd      	cbz	r5, 890fa <udd_ep_set_halt+0x11e>
		cpu_irq_enable();
   890c6:	f04f 0001 	mov.w	r0, #1
   890ca:	f240 2390 	movw	r3, #656	; 0x290
   890ce:	f2c2 0307 	movt	r3, #8199	; 0x2007
   890d2:	7018      	strb	r0, [r3, #0]
   890d4:	f3bf 8f5f 	dmb	sy
   890d8:	b662      	cpsie	i
   890da:	e010      	b.n	890fe <udd_ep_set_halt+0x122>
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
   890dc:	f04f 0000 	mov.w	r0, #0
   890e0:	e00d      	b.n	890fe <udd_ep_set_halt+0x122>
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
   890e2:	f04f 0001 	mov.w	r0, #1
   890e6:	e00a      	b.n	890fe <udd_ep_set_halt+0x122>
   890e8:	f04f 0001 	mov.w	r0, #1
   890ec:	e007      	b.n	890fe <udd_ep_set_halt+0x122>
	}

	if (ptr_job->busy == true) {
		return false; // Job on going, stall impossible
   890ee:	f04f 0000 	mov.w	r0, #0
   890f2:	e004      	b.n	890fe <udd_ep_set_halt+0x122>
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
   890f4:	f04f 0001 	mov.w	r0, #1
   890f8:	e001      	b.n	890fe <udd_ep_set_halt+0x122>
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
	udd_ack_stall(ep_index);
	udd_enable_stall_handshake(ep_index);
	cpu_irq_restore(flags);
	return true;
   890fa:	f04f 0001 	mov.w	r0, #1
}
   890fe:	bc30      	pop	{r4, r5}
   89100:	4770      	bx	lr
   89102:	bf00      	nop

00089104 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   89104:	b508      	push	{r3, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   89106:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
   8910a:	2805      	cmp	r0, #5
   8910c:	d85f      	bhi.n	891ce <udd_ep_clear_halt+0xca>


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   8910e:	f100 33ff 	add.w	r3, r0, #4294967295
   89112:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   89116:	f241 52a8 	movw	r2, #5544	; 0x15a8
   8911a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8911e:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;

	if (ptr_job->stall_requested) {
   89122:	7d19      	ldrb	r1, [r3, #20]
   89124:	f001 0204 	and.w	r2, r1, #4
   89128:	b2d1      	uxtb	r1, r2
   8912a:	2900      	cmp	r1, #0
   8912c:	d055      	beq.n	891da <udd_ep_clear_halt+0xd6>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
   8912e:	7d1a      	ldrb	r2, [r3, #20]
   89130:	f36f 0282 	bfc	r2, #2, #1
   89134:	751a      	strb	r2, [r3, #20]
		udd_disable_bank_interrupt(ep_index);
   89136:	f24c 2120 	movw	r1, #49696	; 0xc220
   8913a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8913e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   89142:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
   89146:	fa02 f100 	lsl.w	r1, r2, r0
   8914a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   8914e:	f2c4 020a 	movt	r2, #16394	; 0x400a
   89152:	6151      	str	r1, [r2, #20]
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   89154:	ea4f 0280 	mov.w	r2, r0, lsl #2
   89158:	f24c 11c0 	movw	r1, #49600	; 0xc1c0
   8915c:	f2c4 010a 	movt	r1, #16394	; 0x400a
   89160:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   89164:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   89168:	d024      	beq.n	891b4 <udd_ep_clear_halt+0xb0>
		if (Is_udd_stall(ep_index)) {
   8916a:	f24c 1130 	movw	r1, #49456	; 0xc130
   8916e:	f2c4 010a 	movt	r1, #16394	; 0x400a
   89172:	5850      	ldr	r0, [r2, r1]
   89174:	f010 0f40 	tst.w	r0, #64	; 0x40
   89178:	d00d      	beq.n	89196 <udd_ep_clear_halt+0x92>
			udd_ack_stall(ep_index);
   8917a:	f24c 1160 	movw	r1, #49504	; 0xc160
   8917e:	f2c4 010a 	movt	r1, #16394	; 0x400a
   89182:	f04f 0040 	mov.w	r0, #64	; 0x40
   89186:	5050      	str	r0, [r2, r1]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep_index);
   89188:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   8918c:	f2c4 010a 	movt	r1, #16394	; 0x400a
   89190:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   89194:	5050      	str	r0, [r2, r1]
		}
		// Disable stall
		udd_disable_stall_handshake(ep_index);
   89196:	f24c 2120 	movw	r1, #49696	; 0xc220
   8919a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8919e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   891a2:	5050      	str	r0, [r2, r1]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   891a4:	f44f 4141 	mov.w	r1, #49408	; 0xc100
   891a8:	f2c4 010a 	movt	r1, #16394	; 0x400a
   891ac:	5850      	ldr	r0, [r2, r1]
   891ae:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   891b2:	5050      	str	r0, [r2, r1]
		b_stall_cleared = true;
	}
	if (b_stall_cleared) {
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   891b4:	7d1a      	ldrb	r2, [r3, #20]
   891b6:	f012 0f01 	tst.w	r2, #1
   891ba:	d00b      	beq.n	891d4 <udd_ep_clear_halt+0xd0>
			ptr_job->busy = false;
   891bc:	7d19      	ldrb	r1, [r3, #20]
   891be:	f36f 0100 	bfc	r1, #0, #1
   891c2:	7519      	strb	r1, [r3, #20]
			ptr_job->call_nohalt();
   891c4:	681b      	ldr	r3, [r3, #0]
   891c6:	4798      	blx	r3
		}
	}
	return true;
   891c8:	f04f 0001 	mov.w	r0, #1
   891cc:	bd08      	pop	{r3, pc}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;
   891ce:	f04f 0000 	mov.w	r0, #0
   891d2:	bd08      	pop	{r3, pc}
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   891d4:	f04f 0001 	mov.w	r0, #1
   891d8:	bd08      	pop	{r3, pc}
		ptr_job->stall_requested = false;
		udd_disable_bank_interrupt(ep_index);
		udd_disable_endpoint_interrupt(ep_index);
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   891da:	ea4f 0280 	mov.w	r2, r0, lsl #2
   891de:	f24c 11c0 	movw	r1, #49600	; 0xc1c0
   891e2:	f2c4 010a 	movt	r1, #16394	; 0x400a
   891e6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   891ea:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   891ee:	d1bc      	bne.n	8916a <udd_ep_clear_halt+0x66>
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   891f0:	f04f 0001 	mov.w	r0, #1
}
   891f4:	bd08      	pop	{r3, pc}
   891f6:	bf00      	nop

000891f8 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   891f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
#endif
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   891fa:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   891fe:	2805      	cmp	r0, #5
   89200:	d86c      	bhi.n	892dc <udd_ep_run+0xe4>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
   89202:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   89206:	f2c4 040a 	movt	r4, #16394	; 0x400a
   8920a:	69e4      	ldr	r4, [r4, #28]
   8920c:	f04f 0501 	mov.w	r5, #1
   89210:	fa05 f500 	lsl.w	r5, r5, r0
   89214:	4225      	tst	r5, r4
   89216:	d064      	beq.n	892e2 <udd_ep_run+0xea>
			|| Is_udd_endpoint_stall_requested(ep)
   89218:	f24c 14c0 	movw	r4, #49600	; 0xc1c0
   8921c:	f2c4 040a 	movt	r4, #16394	; 0x400a
   89220:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   89224:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   89228:	d15e      	bne.n	892e8 <udd_ep_run+0xf0>
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   8922a:	f100 35ff 	add.w	r5, r0, #4294967295
   8922e:	eb05 0645 	add.w	r6, r5, r5, lsl #1
   89232:	f241 54a8 	movw	r4, #5544	; 0x15a8
   89236:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8923a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
   8923e:	7d25      	ldrb	r5, [r4, #20]
   89240:	f005 0604 	and.w	r6, r5, #4
   89244:	b2f6      	uxtb	r6, r6
   89246:	2e00      	cmp	r6, #0
   89248:	d151      	bne.n	892ee <udd_ep_run+0xf6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8924a:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   8924e:	f1d7 0601 	rsbs	r6, r7, #1
   89252:	bf38      	it	cc
   89254:	2600      	movcc	r6, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   89256:	b672      	cpsid	i
   89258:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8925c:	f240 2790 	movw	r7, #656	; 0x290
   89260:	f2c2 0707 	movt	r7, #8199	; 0x2007
   89264:	f04f 0c00 	mov.w	ip, #0
   89268:	f887 c000 	strb.w	ip, [r7]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
   8926c:	f015 0f01 	tst.w	r5, #1
   89270:	d009      	beq.n	89286 <udd_ep_run+0x8e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   89272:	2e00      	cmp	r6, #0
   89274:	d03e      	beq.n	892f4 <udd_ep_run+0xfc>
		cpu_irq_enable();
   89276:	f04f 0301 	mov.w	r3, #1
   8927a:	703b      	strb	r3, [r7, #0]
   8927c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   89280:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
   89282:	4660      	mov	r0, ip
   89284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	ptr_job->busy = true;
   89286:	7d25      	ldrb	r5, [r4, #20]
   89288:	f045 0501 	orr.w	r5, r5, #1
   8928c:	7525      	strb	r5, [r4, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8928e:	b14e      	cbz	r6, 892a4 <udd_ep_run+0xac>
		cpu_irq_enable();
   89290:	f240 2590 	movw	r5, #656	; 0x290
   89294:	f2c2 0507 	movt	r5, #8199	; 0x2007
   89298:	f04f 0601 	mov.w	r6, #1
   8929c:	702e      	strb	r6, [r5, #0]
   8929e:	f3bf 8f5f 	dmb	sy
   892a2:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   892a4:	6062      	str	r2, [r4, #4]
	ptr_job->buf_size = buf_size;
   892a6:	60a3      	str	r3, [r4, #8]
	ptr_job->buf_cnt = 0;
   892a8:	f04f 0200 	mov.w	r2, #0
   892ac:	60e2      	str	r2, [r4, #12]
	ptr_job->buf_load = 0;
   892ae:	6122      	str	r2, [r4, #16]
	ptr_job->call_trans = callback;
   892b0:	9a06      	ldr	r2, [sp, #24]
   892b2:	6022      	str	r2, [r4, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   892b4:	b921      	cbnz	r1, 892c0 <udd_ep_run+0xc8>
   892b6:	f1d3 0301 	rsbs	r3, r3, #1
   892ba:	bf38      	it	cc
   892bc:	2300      	movcc	r3, #0
   892be:	e001      	b.n	892c4 <udd_ep_run+0xcc>
   892c0:	f04f 0301 	mov.w	r3, #1
   892c4:	7d21      	ldrb	r1, [r4, #20]
   892c6:	f363 0141 	bfi	r1, r3, #1, #1
   892ca:	7521      	strb	r1, [r4, #20]
#endif // UDD_EP_FIFO_SUPPORTED

#ifdef UDD_EP_DMA_SUPPORTED
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
   892cc:	f647 62e9 	movw	r2, #32489	; 0x7ee9
   892d0:	f2c0 0208 	movt	r2, #8
   892d4:	4790      	blx	r2
	return true;
   892d6:	f04f 0001 	mov.w	r0, #1
   892da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
   892dc:	f04f 0000 	mov.w	r0, #0
   892e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
   892e2:	f04f 0000 	mov.w	r0, #0
   892e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   892e8:	f04f 0000 	mov.w	r0, #0
   892ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   892ee:	f04f 0000 	mov.w	r0, #0
   892f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
   892f4:	f04f 0000 	mov.w	r0, #0
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
	return true;
#endif
}
   892f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   892fa:	bf00      	nop

000892fc <udd_ep_alloc>:


#if (0 != USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   892fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89300:	b085      	sub	sp, #20
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
   89302:	f000 040f 	and.w	r4, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
   89306:	2c05      	cmp	r4, #5
   89308:	f200 8101 	bhi.w	8950e <udd_ep_alloc+0x212>
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
   8930c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89310:	f2c4 030a 	movt	r3, #16394	; 0x400a
   89314:	69db      	ldr	r3, [r3, #28]
   89316:	f04f 0501 	mov.w	r5, #1
   8931a:	fa05 f504 	lsl.w	r5, r5, r4
   8931e:	421d      	tst	r5, r3
   89320:	f040 80f8 	bne.w	89514 <udd_ep_alloc+0x218>
		return false;
	}
	dbg_print("alloc(%x, %d) ", ep, MaxEndpointSize);

	// Bank choise
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   89324:	f001 0303 	and.w	r3, r1, #3
   89328:	2b02      	cmp	r3, #2
   8932a:	d006      	beq.n	8933a <udd_ep_alloc+0x3e>
   8932c:	2b03      	cmp	r3, #3
   8932e:	f000 80fd 	beq.w	8952c <udd_ep_alloc+0x230>
   89332:	2b01      	cmp	r3, #1
   89334:	f040 80f1 	bne.w	8951a <udd_ep_alloc+0x21e>
   89338:	e007      	b.n	8934a <udd_ep_alloc+0x4e>
		break;
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
		break;
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   8933a:	f1a4 0604 	sub.w	r6, r4, #4
   8933e:	b2f5      	uxtb	r5, r6
		Assert(false);
		return false;
	}
	switch (nb_bank) {
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   89340:	2d01      	cmp	r5, #1
   89342:	bf94      	ite	ls
   89344:	2500      	movls	r5, #0
   89346:	2501      	movhi	r5, #1
   89348:	e001      	b.n	8934e <udd_ep_alloc+0x52>
				UOTGHS_DEVEPTCFG_EPBK_Pos;
		break;
	case 2:
		bank = UOTGHS_DEVEPTCFG_EPBK_2_BANK >>
   8934a:	f04f 0501 	mov.w	r5, #1
	Assert((MaxEndpointSize == 1023)
		|| !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   8934e:	f44f 4741 	mov.w	r7, #49408	; 0xc100
   89352:	f2c4 070a 	movt	r7, #16394	; 0x400a
   89356:	eb07 0684 	add.w	r6, r7, r4, lsl #2
   8935a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   8935e:	f423 57cb 	bic.w	r7, r3, #6496	; 0x1960
   89362:	f027 071c 	bic.w	r7, r7, #28
   89366:	ea4f 21c1 	mov.w	r1, r1, lsl #11
   8936a:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
   8936e:	f000 0080 	and.w	r0, r0, #128	; 0x80
   89372:	2800      	cmp	r0, #0
   89374:	bf14      	ite	ne
   89376:	f44f 7080 	movne.w	r0, #256	; 0x100
   8937a:	2000      	moveq	r0, #0
   8937c:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
   89380:	b29b      	uxth	r3, r3
   89382:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   89386:	d306      	bcc.n	89396 <udd_ep_alloc+0x9a>
   89388:	2a08      	cmp	r2, #8
   8938a:	d907      	bls.n	8939c <udd_ep_alloc+0xa0>
   8938c:	ea4f 0342 	mov.w	r3, r2, lsl #1
   89390:	f103 32ff 	add.w	r2, r3, #4294967295
   89394:	e004      	b.n	893a0 <udd_ep_alloc+0xa4>
   89396:	f240 72ff 	movw	r2, #2047	; 0x7ff
   8939a:	e001      	b.n	893a0 <udd_ep_alloc+0xa4>
   8939c:	f04f 020f 	mov.w	r2, #15
   893a0:	fab2 f282 	clz	r2, r2
   893a4:	ea41 0585 	orr.w	r5, r1, r5, lsl #2
   893a8:	4305      	orrs	r5, r0
   893aa:	f1c2 011c 	rsb	r1, r2, #28
   893ae:	ea45 1001 	orr.w	r0, r5, r1, lsl #4
   893b2:	f641 1374 	movw	r3, #6516	; 0x1974
   893b6:	4003      	ands	r3, r0
   893b8:	433b      	orrs	r3, r7
   893ba:	6033      	str	r3, [r6, #0]
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
   893bc:	f04f 0601 	mov.w	r6, #1
   893c0:	fa06 f604 	lsl.w	r6, r6, r4
   893c4:	b2b7      	uxth	r7, r6

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   893c6:	2c04      	cmp	r4, #4
   893c8:	f200 80b3 	bhi.w	89532 <udd_ep_alloc+0x236>
   893cc:	f24c 1114 	movw	r1, #49428	; 0xc114
   893d0:	f2c4 010a 	movt	r1, #16394	; 0x400a
   893d4:	f04f 0305 	mov.w	r3, #5
		if (Is_udd_endpoint_enabled(i)) {
   893d8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   893dc:	f2c4 020a 	movt	r2, #16394	; 0x400a
   893e0:	f04f 0001 	mov.w	r0, #1
   893e4:	ea6f 0504 	mvn.w	r5, r4
   893e8:	18ee      	adds	r6, r5, r3
   893ea:	ea06 0c00 	and.w	ip, r6, r0
   893ee:	69d6      	ldr	r6, [r2, #28]
   893f0:	fa00 f503 	lsl.w	r5, r0, r3
   893f4:	4235      	tst	r5, r6
   893f6:	f000 81c3 	beq.w	89780 <udd_ep_alloc+0x484>
   893fa:	e1b5      	b.n	89768 <udd_ep_alloc+0x46c>
   893fc:	46a0      	mov	r8, r4
   893fe:	e7ff      	b.n	89400 <udd_ep_alloc+0x104>
   89400:	69d4      	ldr	r4, [r2, #28]
   89402:	fa00 f603 	lsl.w	r6, r0, r3
   89406:	4226      	tst	r6, r4
   89408:	d009      	beq.n	8941e <udd_ep_alloc+0x122>
			ep_allocated |= 1 << i;
   8940a:	4337      	orrs	r7, r6
   8940c:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   8940e:	69d4      	ldr	r4, [r2, #28]
   89410:	ea24 0606 	bic.w	r6, r4, r6
   89414:	61d6      	str	r6, [r2, #28]
			udd_unallocate_memory(i);
   89416:	680d      	ldr	r5, [r1, #0]
   89418:	f025 0402 	bic.w	r4, r5, #2
   8941c:	600c      	str	r4, [r1, #0]
   8941e:	f103 33ff 	add.w	r3, r3, #4294967295
   89422:	f1a1 0904 	sub.w	r9, r1, #4
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
   89426:	69d4      	ldr	r4, [r2, #28]
   89428:	fa00 f503 	lsl.w	r5, r0, r3
   8942c:	4225      	tst	r5, r4
   8942e:	f000 81dc 	beq.w	897ea <udd_ep_alloc+0x4ee>
   89432:	e1cc      	b.n	897ce <udd_ep_alloc+0x4d2>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
   89434:	fa47 f004 	asr.w	r0, r7, r4
   89438:	f010 0f01 	tst.w	r0, #1
   8943c:	d05a      	beq.n	894f4 <udd_ep_alloc+0x1f8>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   8943e:	f104 33ff 	add.w	r3, r4, #4294967295
   89442:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   89446:	eb09 05cc 	add.w	r5, r9, ip, lsl #3
			bool b_restart = ptr_job->busy;
   8944a:	7d29      	ldrb	r1, [r5, #20]
   8944c:	f001 0201 	and.w	r2, r1, #1
   89450:	9203      	str	r2, [sp, #12]
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   89452:	f36f 0100 	bfc	r1, #0, #1
   89456:	7529      	strb	r1, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   89458:	ea4f 0184 	mov.w	r1, r4, lsl #2
   8945c:	198a      	adds	r2, r1, r6
   8945e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   89462:	f040 0302 	orr.w	r3, r0, #2
   89466:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			udd_enable_endpoint(i);
   8946a:	f8d8 301c 	ldr.w	r3, [r8, #28]
   8946e:	f04f 0001 	mov.w	r0, #1
   89472:	fa00 fb04 	lsl.w	fp, r0, r4
   89476:	ea4b 0303 	orr.w	r3, fp, r3
   8947a:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   8947e:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
   89482:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   89486:	d110      	bne.n	894aa <udd_ep_alloc+0x1ae>
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
   89488:	682b      	ldr	r3, [r5, #0]
   8948a:	2b00      	cmp	r3, #0
   8948c:	d048      	beq.n	89520 <udd_ep_alloc+0x224>
					return false;
				}
				if (Is_udd_endpoint_in(i)) {
   8948e:	6811      	ldr	r1, [r2, #0]
   89490:	f411 7f80 	tst.w	r1, #256	; 0x100
					i |= USB_EP_DIR_IN;
   89494:	bf18      	it	ne
   89496:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   8949a:	f04f 0001 	mov.w	r0, #1
   8949e:	68e9      	ldr	r1, [r5, #12]
   894a0:	4622      	mov	r2, r4
   894a2:	4798      	blx	r3
						ptr_job->buf_cnt, i);
				return false;
   894a4:	f04f 0000 	mov.w	r0, #0
   894a8:	e05d      	b.n	89566 <udd_ep_alloc+0x26a>
			}
			udd_enable_endpoint_bank_autoswitch(i);
   894aa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   894ae:	f442 7300 	orr.w	r3, r2, #512	; 0x200
   894b2:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			if (b_restart) {
   894b6:	9a03      	ldr	r2, [sp, #12]
   894b8:	b1e2      	cbz	r2, 894f4 <udd_ep_alloc+0x1f8>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   894ba:	68ea      	ldr	r2, [r5, #12]
   894bc:	692b      	ldr	r3, [r5, #16]
   894be:	1ad3      	subs	r3, r2, r3
   894c0:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   894c2:	5989      	ldr	r1, [r1, r6]
   894c4:	f411 7f80 	tst.w	r1, #256	; 0x100
   894c8:	bf14      	ite	ne
   894ca:	f044 0080 	orrne.w	r0, r4, #128	; 0x80
   894ce:	4620      	moveq	r0, r4
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   894d0:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   894d2:	f8d5 e004 	ldr.w	lr, [r5, #4]
   894d6:	68ad      	ldr	r5, [r5, #8]
   894d8:	f859 203c 	ldr.w	r2, [r9, ip, lsl #3]
   894dc:	9200      	str	r2, [sp, #0]
   894de:	f3c1 0140 	ubfx	r1, r1, #1, #1
   894e2:	eb0e 0203 	add.w	r2, lr, r3
   894e6:	1aeb      	subs	r3, r5, r3
   894e8:	f249 15f9 	movw	r5, #37369	; 0x91f9
   894ec:	f2c0 0508 	movt	r5, #8
   894f0:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   894f2:	b1c0      	cbz	r0, 89526 <udd_ep_alloc+0x22a>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   894f4:	f104 0401 	add.w	r4, r4, #1
   894f8:	b2e4      	uxtb	r4, r4
		if (ep_allocated & (1 << i)) {
   894fa:	fa47 f004 	asr.w	r0, r7, r4
   894fe:	f010 0f01 	tst.w	r0, #1
   89502:	f000 812a 	beq.w	8975a <udd_ep_alloc+0x45e>
   89506:	e0d9      	b.n	896bc <udd_ep_alloc+0x3c0>
					return false;
				}
			}
		}
	}
	return true;
   89508:	f04f 0001 	mov.w	r0, #1
   8950c:	e02b      	b.n	89566 <udd_ep_alloc+0x26a>

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
   8950e:	f04f 0000 	mov.w	r0, #0
   89512:	e028      	b.n	89566 <udd_ep_alloc+0x26a>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
   89514:	f04f 0000 	mov.w	r0, #0
   89518:	e025      	b.n	89566 <udd_ep_alloc+0x26a>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
		break;
	default:
		Assert(false);
		return false;
   8951a:	f04f 0000 	mov.w	r0, #0
   8951e:	e022      	b.n	89566 <udd_ep_alloc+0x26a>
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i)) {
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
					return false;
   89520:	f04f 0000 	mov.w	r0, #0
   89524:	e01f      	b.n	89566 <udd_ep_alloc+0x26a>
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
					dbg_print("ErrReRun%d ", i);
					return false;
   89526:	f04f 0000 	mov.w	r0, #0
   8952a:	e01c      	b.n	89566 <udd_ep_alloc+0x26a>
		Assert(false);
		return false;
	}
	switch (nb_bank) {
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   8952c:	f04f 0500 	mov.w	r5, #0
   89530:	e70d      	b.n	8934e <udd_ep_alloc+0x52>
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   89532:	f241 59a8 	movw	r9, #5544	; 0x15a8
   89536:	f2c2 0907 	movt	r9, #8199	; 0x2007
			bool b_restart = ptr_job->busy;
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
			// Re-allocate memory
			udd_allocate_memory(i);
   8953a:	f44f 4641 	mov.w	r6, #49408	; 0xc100
   8953e:	f2c4 060a 	movt	r6, #16394	; 0x400a
			udd_enable_endpoint(i);
   89542:	f44f 4840 	mov.w	r8, #49152	; 0xc000
   89546:	f2c4 080a 	movt	r8, #16394	; 0x400a
			if (!Is_udd_endpoint_configured(i)) {
   8954a:	f24c 1a30 	movw	sl, #49456	; 0xc130
   8954e:	f2c4 0a0a 	movt	sl, #16394	; 0x400a
   89552:	f1c4 0b05 	rsb	fp, r4, #5
   89556:	f00b 0b01 	and.w	fp, fp, #1
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
   8955a:	fa47 f204 	asr.w	r2, r7, r4
   8955e:	f012 0f01 	tst.w	r2, #1
   89562:	d04c      	beq.n	895fe <udd_ep_alloc+0x302>
   89564:	e002      	b.n	8956c <udd_ep_alloc+0x270>
				}
			}
		}
	}
	return true;
}
   89566:	b005      	add	sp, #20
   89568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   8956c:	f104 30ff 	add.w	r0, r4, #4294967295
   89570:	eb00 0540 	add.w	r5, r0, r0, lsl #1
   89574:	eb09 05c5 	add.w	r5, r9, r5, lsl #3
			bool b_restart = ptr_job->busy;
   89578:	7d2b      	ldrb	r3, [r5, #20]
   8957a:	f003 0c01 	and.w	ip, r3, #1
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   8957e:	f36f 0300 	bfc	r3, #0, #1
   89582:	752b      	strb	r3, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   89584:	ea4f 0384 	mov.w	r3, r4, lsl #2
   89588:	199a      	adds	r2, r3, r6
   8958a:	6811      	ldr	r1, [r2, #0]
   8958c:	f041 0002 	orr.w	r0, r1, #2
   89590:	6010      	str	r0, [r2, #0]
			udd_enable_endpoint(i);
   89592:	f8d8 101c 	ldr.w	r1, [r8, #28]
   89596:	f04f 0001 	mov.w	r0, #1
   8959a:	fa00 f004 	lsl.w	r0, r0, r4
   8959e:	4301      	orrs	r1, r0
   895a0:	f8c8 101c 	str.w	r1, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   895a4:	4453      	add	r3, sl
   895a6:	6818      	ldr	r0, [r3, #0]
   895a8:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   895ac:	f43f af6c 	beq.w	89488 <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   895b0:	6811      	ldr	r1, [r2, #0]
   895b2:	f441 7300 	orr.w	r3, r1, #512	; 0x200
   895b6:	6013      	str	r3, [r2, #0]
			if (b_restart) {
   895b8:	f1bc 0f00 	cmp.w	ip, #0
   895bc:	d01f      	beq.n	895fe <udd_ep_alloc+0x302>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   895be:	68e8      	ldr	r0, [r5, #12]
   895c0:	6929      	ldr	r1, [r5, #16]
   895c2:	1a43      	subs	r3, r0, r1
   895c4:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   895c6:	6812      	ldr	r2, [r2, #0]
   895c8:	f412 7f80 	tst.w	r2, #256	; 0x100
   895cc:	d012      	beq.n	895f4 <udd_ep_alloc+0x2f8>
   895ce:	e013      	b.n	895f8 <udd_ep_alloc+0x2fc>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   895d0:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   895d2:	686a      	ldr	r2, [r5, #4]
   895d4:	f8d5 e008 	ldr.w	lr, [r5, #8]
   895d8:	682d      	ldr	r5, [r5, #0]
   895da:	9500      	str	r5, [sp, #0]
   895dc:	f3c1 0140 	ubfx	r1, r1, #1, #1
   895e0:	18d2      	adds	r2, r2, r3
   895e2:	ebc3 030e 	rsb	r3, r3, lr
   895e6:	f249 15f9 	movw	r5, #37369	; 0x91f9
   895ea:	f2c0 0508 	movt	r5, #8
   895ee:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   895f0:	b928      	cbnz	r0, 895fe <udd_ep_alloc+0x302>
   895f2:	e798      	b.n	89526 <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   895f4:	4620      	mov	r0, r4
   895f6:	e7eb      	b.n	895d0 <udd_ep_alloc+0x2d4>
   895f8:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   895fc:	e7e8      	b.n	895d0 <udd_ep_alloc+0x2d4>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   895fe:	f104 0401 	add.w	r4, r4, #1
   89602:	b2e4      	uxtb	r4, r4
   89604:	2c06      	cmp	r4, #6
   89606:	f43f af7f 	beq.w	89508 <udd_ep_alloc+0x20c>
   8960a:	fa4f f08b 	sxtb.w	r0, fp
   8960e:	2800      	cmp	r0, #0
   89610:	f43f af10 	beq.w	89434 <udd_ep_alloc+0x138>
		if (ep_allocated & (1 << i)) {
   89614:	fa47 f304 	asr.w	r3, r7, r4
   89618:	f013 0f01 	tst.w	r3, #1
   8961c:	d047      	beq.n	896ae <udd_ep_alloc+0x3b2>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   8961e:	f104 31ff 	add.w	r1, r4, #4294967295
   89622:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   89626:	eb09 05c2 	add.w	r5, r9, r2, lsl #3
			bool b_restart = ptr_job->busy;
   8962a:	7d28      	ldrb	r0, [r5, #20]
   8962c:	f000 0101 	and.w	r1, r0, #1
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   89630:	f36f 0000 	bfc	r0, #0, #1
   89634:	7528      	strb	r0, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   89636:	ea4f 0384 	mov.w	r3, r4, lsl #2
   8963a:	199a      	adds	r2, r3, r6
   8963c:	6810      	ldr	r0, [r2, #0]
   8963e:	f040 0002 	orr.w	r0, r0, #2
   89642:	6010      	str	r0, [r2, #0]
			udd_enable_endpoint(i);
   89644:	f8d8 001c 	ldr.w	r0, [r8, #28]
   89648:	f04f 0b01 	mov.w	fp, #1
   8964c:	fa0b fc04 	lsl.w	ip, fp, r4
   89650:	ea4c 0000 	orr.w	r0, ip, r0
   89654:	f8c8 001c 	str.w	r0, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   89658:	4453      	add	r3, sl
   8965a:	6818      	ldr	r0, [r3, #0]
   8965c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   89660:	f43f af12 	beq.w	89488 <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   89664:	6813      	ldr	r3, [r2, #0]
   89666:	f443 7000 	orr.w	r0, r3, #512	; 0x200
   8966a:	6010      	str	r0, [r2, #0]
			if (b_restart) {
   8966c:	b1f9      	cbz	r1, 896ae <udd_ep_alloc+0x3b2>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   8966e:	68e9      	ldr	r1, [r5, #12]
   89670:	692b      	ldr	r3, [r5, #16]
   89672:	1acb      	subs	r3, r1, r3
   89674:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   89676:	6812      	ldr	r2, [r2, #0]
   89678:	f412 7f80 	tst.w	r2, #256	; 0x100
   8967c:	d012      	beq.n	896a4 <udd_ep_alloc+0x3a8>
   8967e:	e013      	b.n	896a8 <udd_ep_alloc+0x3ac>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   89680:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   89682:	686a      	ldr	r2, [r5, #4]
   89684:	f8d5 e008 	ldr.w	lr, [r5, #8]
   89688:	682d      	ldr	r5, [r5, #0]
   8968a:	9500      	str	r5, [sp, #0]
   8968c:	f3c1 0140 	ubfx	r1, r1, #1, #1
   89690:	18d2      	adds	r2, r2, r3
   89692:	ebc3 030e 	rsb	r3, r3, lr
   89696:	f249 15f9 	movw	r5, #37369	; 0x91f9
   8969a:	f2c0 0508 	movt	r5, #8
   8969e:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   896a0:	b928      	cbnz	r0, 896ae <udd_ep_alloc+0x3b2>
   896a2:	e740      	b.n	89526 <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   896a4:	4620      	mov	r0, r4
   896a6:	e7eb      	b.n	89680 <udd_ep_alloc+0x384>
   896a8:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   896ac:	e7e8      	b.n	89680 <udd_ep_alloc+0x384>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   896ae:	f104 0401 	add.w	r4, r4, #1
   896b2:	b2e4      	uxtb	r4, r4
   896b4:	2c06      	cmp	r4, #6
   896b6:	f47f aebd 	bne.w	89434 <udd_ep_alloc+0x138>
   896ba:	e725      	b.n	89508 <udd_ep_alloc+0x20c>
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   896bc:	f104 33ff 	add.w	r3, r4, #4294967295
   896c0:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   896c4:	eb09 05cc 	add.w	r5, r9, ip, lsl #3
			bool b_restart = ptr_job->busy;
   896c8:	7d29      	ldrb	r1, [r5, #20]
   896ca:	f001 0201 	and.w	r2, r1, #1
   896ce:	9203      	str	r2, [sp, #12]
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   896d0:	f36f 0100 	bfc	r1, #0, #1
   896d4:	7529      	strb	r1, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   896d6:	ea4f 0184 	mov.w	r1, r4, lsl #2
   896da:	198a      	adds	r2, r1, r6
   896dc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   896e0:	f040 0302 	orr.w	r3, r0, #2
   896e4:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			udd_enable_endpoint(i);
   896e8:	f8d8 301c 	ldr.w	r3, [r8, #28]
   896ec:	f04f 0001 	mov.w	r0, #1
   896f0:	fa00 fb04 	lsl.w	fp, r0, r4
   896f4:	ea4b 0303 	orr.w	r3, fp, r3
   896f8:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   896fc:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
   89700:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   89704:	f43f aec0 	beq.w	89488 <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   89708:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   8970c:	f442 7300 	orr.w	r3, r2, #512	; 0x200
   89710:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			if (b_restart) {
   89714:	9803      	ldr	r0, [sp, #12]
   89716:	b300      	cbz	r0, 8975a <udd_ep_alloc+0x45e>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   89718:	68ea      	ldr	r2, [r5, #12]
   8971a:	692b      	ldr	r3, [r5, #16]
   8971c:	1ad3      	subs	r3, r2, r3
   8971e:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   89720:	5989      	ldr	r1, [r1, r6]
   89722:	f411 7f80 	tst.w	r1, #256	; 0x100
   89726:	d013      	beq.n	89750 <udd_ep_alloc+0x454>
   89728:	e014      	b.n	89754 <udd_ep_alloc+0x458>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   8972a:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8972c:	f8d5 e004 	ldr.w	lr, [r5, #4]
   89730:	68ad      	ldr	r5, [r5, #8]
   89732:	f859 203c 	ldr.w	r2, [r9, ip, lsl #3]
   89736:	9200      	str	r2, [sp, #0]
   89738:	f3c1 0140 	ubfx	r1, r1, #1, #1
   8973c:	eb0e 0203 	add.w	r2, lr, r3
   89740:	1aeb      	subs	r3, r5, r3
   89742:	f249 15f9 	movw	r5, #37369	; 0x91f9
   89746:	f2c0 0508 	movt	r5, #8
   8974a:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   8974c:	b928      	cbnz	r0, 8975a <udd_ep_alloc+0x45e>
   8974e:	e6ea      	b.n	89526 <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   89750:	4620      	mov	r0, r4
   89752:	e7ea      	b.n	8972a <udd_ep_alloc+0x42e>
   89754:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   89758:	e7e7      	b.n	8972a <udd_ep_alloc+0x42e>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   8975a:	f104 0401 	add.w	r4, r4, #1
   8975e:	b2e4      	uxtb	r4, r4
   89760:	2c06      	cmp	r4, #6
   89762:	f47f ae67 	bne.w	89434 <udd_ep_alloc+0x138>
   89766:	e6cf      	b.n	89508 <udd_ep_alloc+0x20c>
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
   89768:	fa00 f603 	lsl.w	r6, r0, r3
   8976c:	4337      	orrs	r7, r6
   8976e:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   89770:	69d6      	ldr	r6, [r2, #28]
   89772:	ea26 0505 	bic.w	r5, r6, r5
   89776:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   89778:	680e      	ldr	r6, [r1, #0]
   8977a:	f026 0502 	bic.w	r5, r6, #2
   8977e:	600d      	str	r5, [r1, #0]
   89780:	f103 33ff 	add.w	r3, r3, #4294967295
   89784:	f1a1 0104 	sub.w	r1, r1, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   89788:	b2dd      	uxtb	r5, r3
   8978a:	42a5      	cmp	r5, r4
   8978c:	f67f aed1 	bls.w	89532 <udd_ep_alloc+0x236>
   89790:	fa4f f68c 	sxtb.w	r6, ip
   89794:	2e00      	cmp	r6, #0
   89796:	f43f ae31 	beq.w	893fc <udd_ep_alloc+0x100>
		if (Is_udd_endpoint_enabled(i)) {
   8979a:	69d6      	ldr	r6, [r2, #28]
   8979c:	fa00 f503 	lsl.w	r5, r0, r3
   897a0:	4235      	tst	r5, r6
   897a2:	d009      	beq.n	897b8 <udd_ep_alloc+0x4bc>
			ep_allocated |= 1 << i;
   897a4:	432f      	orrs	r7, r5
   897a6:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   897a8:	69d6      	ldr	r6, [r2, #28]
   897aa:	ea26 0505 	bic.w	r5, r6, r5
   897ae:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   897b0:	680e      	ldr	r6, [r1, #0]
   897b2:	f026 0502 	bic.w	r5, r6, #2
   897b6:	600d      	str	r5, [r1, #0]
   897b8:	f103 33ff 	add.w	r3, r3, #4294967295
   897bc:	f1a1 0104 	sub.w	r1, r1, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   897c0:	b2dd      	uxtb	r5, r3
   897c2:	42a5      	cmp	r5, r4
   897c4:	bf88      	it	hi
   897c6:	46a0      	movhi	r8, r4
   897c8:	f63f ae1a 	bhi.w	89400 <udd_ep_alloc+0x104>
   897cc:	e6b1      	b.n	89532 <udd_ep_alloc+0x236>
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
   897ce:	fa00 f603 	lsl.w	r6, r0, r3
   897d2:	4337      	orrs	r7, r6
   897d4:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   897d6:	69d4      	ldr	r4, [r2, #28]
   897d8:	ea24 0505 	bic.w	r5, r4, r5
   897dc:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   897de:	f851 6c04 	ldr.w	r6, [r1, #-4]
   897e2:	f026 0402 	bic.w	r4, r6, #2
   897e6:	f841 4c04 	str.w	r4, [r1, #-4]
   897ea:	f103 33ff 	add.w	r3, r3, #4294967295
   897ee:	f1a9 0104 	sub.w	r1, r9, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   897f2:	b2dd      	uxtb	r5, r3
   897f4:	4545      	cmp	r5, r8
   897f6:	f63f ae03 	bhi.w	89400 <udd_ep_alloc+0x104>
   897fa:	4644      	mov	r4, r8
   897fc:	e699      	b.n	89532 <udd_ep_alloc+0x236>
   897fe:	bf00      	nop

00089800 <udd_ep_abort>:
#endif
}


void udd_ep_abort(udd_ep_id_t ep)
{
   89800:	b538      	push	{r3, r4, r5, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   89802:	f000 030f 	and.w	r3, r0, #15
		udd_disable_in_send_interrupt(ep_index);
	} else
#endif
	{
		// Stop DMA transfer
		udd_disable_endpoint_dma_interrupt(ep_index);
   89806:	f103 32ff 	add.w	r2, r3, #4294967295
   8980a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   8980e:	fa01 f102 	lsl.w	r1, r1, r2
   89812:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   89816:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8981a:	6151      	str	r1, [r2, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   8981c:	f44f 4443 	mov.w	r4, #49920	; 0xc300
   89820:	f2c4 040a 	movt	r4, #16394	; 0x400a
   89824:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   89828:	f04f 0400 	mov.w	r4, #0
   8982c:	608c      	str	r4, [r1, #8]
	}
	udd_disable_endpoint_interrupt(ep_index);
   8982e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   89832:	fa01 f103 	lsl.w	r1, r1, r3
   89836:	6151      	str	r1, [r2, #20]
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
   89838:	f010 0f80 	tst.w	r0, #128	; 0x80
   8983c:	d01c      	beq.n	89878 <udd_ep_abort+0x78>
		while(udd_nb_busy_bank(ep_index)) {
   8983e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   89842:	f24c 1530 	movw	r5, #49456	; 0xc130
   89846:	f2c4 050a 	movt	r5, #16394	; 0x400a
   8984a:	1959      	adds	r1, r3, r5
			udd_kill_last_in_bank(ep_index);
   8984c:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   89850:	f2c4 020a 	movt	r2, #16394	; 0x400a
   89854:	189c      	adds	r4, r3, r2
   89856:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
   8985a:	f24c 12c0 	movw	r2, #49600	; 0xc1c0
   8985e:	f2c4 020a 	movt	r2, #16394	; 0x400a
   89862:	189a      	adds	r2, r3, r2
   89864:	e004      	b.n	89870 <udd_ep_abort+0x70>
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
			udd_kill_last_in_bank(ep_index);
   89866:	6025      	str	r5, [r4, #0]
			while(Is_udd_kill_last(ep_index));
   89868:	6813      	ldr	r3, [r2, #0]
   8986a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   8986e:	d1fb      	bne.n	89868 <udd_ep_abort+0x68>
		udd_endpoint_dma_set_control(ep_index, 0);
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
   89870:	680b      	ldr	r3, [r1, #0]
   89872:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   89876:	d1f6      	bne.n	89866 <udd_ep_abort+0x66>
			udd_kill_last_in_bank(ep_index);
			while(Is_udd_kill_last(ep_index));
		}
	}
	udd_ep_abort_job(ep);
   89878:	f647 61bd 	movw	r1, #32445	; 0x7ebd
   8987c:	f2c0 0108 	movt	r1, #8
   89880:	4788      	blx	r1
   89882:	bd38      	pop	{r3, r4, r5, pc}

00089884 <udd_ep_wait_stall_clear>:
}


bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
   89884:	b510      	push	{r4, lr}
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   89886:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   8988a:	2805      	cmp	r0, #5
   8988c:	d831      	bhi.n	898f2 <udd_ep_wait_stall_clear+0x6e>
		return false;
	}

	ptr_job = &udd_ep_job[ep - 1];

	if (!Is_udd_endpoint_enabled(ep)) {
   8988e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89892:	f2c4 030a 	movt	r3, #16394	; 0x400a
   89896:	69db      	ldr	r3, [r3, #28]
   89898:	f04f 0201 	mov.w	r2, #1
   8989c:	fa02 f200 	lsl.w	r2, r2, r0
   898a0:	421a      	tst	r2, r3
   898a2:	d029      	beq.n	898f8 <udd_ep_wait_stall_clear+0x74>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	ptr_job = &udd_ep_job[ep - 1];
   898a4:	f100 33ff 	add.w	r3, r0, #4294967295
   898a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   898ac:	f241 52a8 	movw	r2, #5544	; 0x15a8
   898b0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   898b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (!Is_udd_endpoint_enabled(ep)) {
		return false; // Endpoint not enabled
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
   898b8:	7d1a      	ldrb	r2, [r3, #20]
   898ba:	f012 0f01 	tst.w	r2, #1
   898be:	d11e      	bne.n	898fe <udd_ep_wait_stall_clear+0x7a>
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
   898c0:	f24c 14c0 	movw	r4, #49600	; 0xc1c0
   898c4:	f2c4 040a 	movt	r4, #16394	; 0x400a
   898c8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   898cc:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   898d0:	d103      	bne.n	898da <udd_ep_wait_stall_clear+0x56>
			|| ptr_job->stall_requested) {
   898d2:	f002 0204 	and.w	r2, r2, #4
   898d6:	b2d0      	uxtb	r0, r2
   898d8:	b138      	cbz	r0, 898ea <udd_ep_wait_stall_clear+0x66>
		// Endpoint halted then registes the callback
		ptr_job->busy = true;
   898da:	7d1a      	ldrb	r2, [r3, #20]
   898dc:	f042 0001 	orr.w	r0, r2, #1
   898e0:	7518      	strb	r0, [r3, #20]
		ptr_job->call_nohalt = callback;
   898e2:	6019      	str	r1, [r3, #0]
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
   898e4:	f04f 0001 	mov.w	r0, #1

	if (Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		// Endpoint halted then registes the callback
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
   898e8:	bd10      	pop	{r4, pc}
	} else {
		// endpoint not halted then call directly callback
		callback();
   898ea:	4788      	blx	r1
	}
	return true;
   898ec:	f04f 0001 	mov.w	r0, #1
   898f0:	bd10      	pop	{r4, pc}
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
   898f2:	f04f 0000 	mov.w	r0, #0
   898f6:	bd10      	pop	{r4, pc}
	}

	ptr_job = &udd_ep_job[ep - 1];

	if (!Is_udd_endpoint_enabled(ep)) {
		return false; // Endpoint not enabled
   898f8:	f04f 0000 	mov.w	r0, #0
   898fc:	bd10      	pop	{r4, pc}
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
   898fe:	f04f 0000 	mov.w	r0, #0
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
   89902:	bd10      	pop	{r4, pc}

00089904 <udd_test_mode_j>:

#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
	udd_enable_hs_test_mode();
   89904:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89908:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8990c:	681a      	ldr	r2, [r3, #0]
   8990e:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   89912:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   89916:	6019      	str	r1, [r3, #0]
	udd_enable_hs_test_mode_j();
   89918:	681a      	ldr	r2, [r3, #0]
   8991a:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
   8991e:	6018      	str	r0, [r3, #0]
   89920:	4770      	bx	lr
   89922:	bf00      	nop

00089924 <udd_test_mode_k>:
}


void udd_test_mode_k(void)
{
	udd_enable_hs_test_mode();
   89924:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89928:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8992c:	681a      	ldr	r2, [r3, #0]
   8992e:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   89932:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   89936:	6019      	str	r1, [r3, #0]
	udd_enable_hs_test_mode_k();
   89938:	681a      	ldr	r2, [r3, #0]
   8993a:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   8993e:	6018      	str	r0, [r3, #0]
   89940:	4770      	bx	lr
   89942:	bf00      	nop

00089944 <udd_test_mode_se0_nak>:
}


void udd_test_mode_se0_nak(void)
{
	udd_enable_hs_test_mode();
   89944:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89948:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8994c:	681a      	ldr	r2, [r3, #0]
   8994e:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   89952:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   89956:	6019      	str	r1, [r3, #0]
   89958:	4770      	bx	lr
   8995a:	bf00      	nop

0008995c <udd_test_mode_packet>:
}


void udd_test_mode_packet(void)
{
   8995c:	b470      	push	{r4, r5, r6}
   8995e:	b08f      	sub	sp, #60	; 0x3c
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   89960:	f64d 5564 	movw	r5, #56676	; 0xdd64
   89964:	f2c0 0508 	movt	r5, #8
   89968:	ac00      	add	r4, sp, #0
   8996a:	6828      	ldr	r0, [r5, #0]
   8996c:	6869      	ldr	r1, [r5, #4]
   8996e:	68aa      	ldr	r2, [r5, #8]
   89970:	68eb      	ldr	r3, [r5, #12]
   89972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   89974:	f105 0510 	add.w	r5, r5, #16
   89978:	4626      	mov	r6, r4
   8997a:	6828      	ldr	r0, [r5, #0]
   8997c:	6869      	ldr	r1, [r5, #4]
   8997e:	68aa      	ldr	r2, [r5, #8]
   89980:	68eb      	ldr	r3, [r5, #12]
   89982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   89984:	6928      	ldr	r0, [r5, #16]
   89986:	6969      	ldr	r1, [r5, #20]
   89988:	69aa      	ldr	r2, [r5, #24]
   8998a:	69eb      	ldr	r3, [r5, #28]
   8998c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8998e:	6a28      	ldr	r0, [r5, #32]
   89990:	f846 0f20 	str.w	r0, [r6, #32]!
   89994:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   89998:	f105 0520 	add.w	r5, r5, #32
   8999c:	7131      	strb	r1, [r6, #4]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   8999e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   899a2:	f2c4 040a 	movt	r4, #16394	; 0x400a
   899a6:	69e2      	ldr	r2, [r4, #28]
   899a8:	f022 0301 	bic.w	r3, r2, #1
   899ac:	61e3      	str	r3, [r4, #28]
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
   899ae:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   899b2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   899b6:	6801      	ldr	r1, [r0, #0]
   899b8:	f421 52cb 	bic.w	r2, r1, #6496	; 0x1960
   899bc:	f022 031c 	bic.w	r3, r2, #28
   899c0:	f443 5189 	orr.w	r1, r3, #4384	; 0x1120
   899c4:	f041 0210 	orr.w	r2, r1, #16
   899c8:	6002      	str	r2, [r0, #0]
			64, UOTGHS_DEVEPTCFG_EPBK_1_BANK);
	udd_allocate_memory(0);
   899ca:	6803      	ldr	r3, [r0, #0]
   899cc:	f043 0102 	orr.w	r1, r3, #2
   899d0:	6001      	str	r1, [r0, #0]
	udd_enable_endpoint(0);
   899d2:	69e0      	ldr	r0, [r4, #28]
   899d4:	f040 0201 	orr.w	r2, r0, #1
   899d8:	61e2      	str	r2, [r4, #28]

	udd_enable_hs_test_mode();
   899da:	6823      	ldr	r3, [r4, #0]
   899dc:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
   899e0:	f441 6000 	orr.w	r0, r1, #2048	; 0x800
   899e4:	6020      	str	r0, [r4, #0]
	udd_enable_hs_test_mode_packet();
   899e6:	6822      	ldr	r2, [r4, #0]
   899e8:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
   899ec:	6023      	str	r3, [r4, #0]

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
   899ee:	f04f 0435 	mov.w	r4, #53	; 0x35
   899f2:	f2c2 0418 	movt	r4, #8216	; 0x2018
   899f6:	f10d 31ff 	add.w	r1, sp, #4294967295
		*ptr_dest++ = *ptr_src++;
   899fa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   899fe:	f04f 0300 	mov.w	r3, #0
   89a02:	f2c2 0318 	movt	r3, #8216	; 0x2018
   89a06:	f803 0b01 	strb.w	r0, [r3], #1
   89a0a:	f101 0001 	add.w	r0, r1, #1
   89a0e:	7849      	ldrb	r1, [r1, #1]
   89a10:	461a      	mov	r2, r3
   89a12:	f802 1b01 	strb.w	r1, [r2], #1
   89a16:	f100 0101 	add.w	r1, r0, #1
   89a1a:	7840      	ldrb	r0, [r0, #1]
   89a1c:	7058      	strb	r0, [r3, #1]
   89a1e:	f102 0301 	add.w	r3, r2, #1

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
   89a22:	42a3      	cmp	r3, r4
   89a24:	d1f1      	bne.n	89a0a <udd_test_mode_packet+0xae>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ack_fifocon(0);
   89a26:	f24c 2120 	movw	r1, #49696	; 0xc220
   89a2a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   89a2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   89a32:	600a      	str	r2, [r1, #0]
}
   89a34:	b00f      	add	sp, #60	; 0x3c
   89a36:	bc70      	pop	{r4, r5, r6}
   89a38:	4770      	bx	lr
   89a3a:	bf00      	nop

00089a3c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   89a3c:	e7fe      	b.n	89a3c <Dummy_Handler>
   89a3e:	bf00      	nop

00089a40 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   89a40:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   89a42:	f240 0300 	movw	r3, #0
   89a46:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89a4a:	f64d 7234 	movw	r2, #57140	; 0xdf34
   89a4e:	f2c0 0208 	movt	r2, #8
   89a52:	429a      	cmp	r2, r3
   89a54:	d003      	beq.n	89a5e <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   89a56:	4840      	ldr	r0, [pc, #256]	; (89b58 <Reset_Handler+0x118>)
   89a58:	4940      	ldr	r1, [pc, #256]	; (89b5c <Reset_Handler+0x11c>)
   89a5a:	4281      	cmp	r1, r0
   89a5c:	d304      	bcc.n	89a68 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   89a5e:	4b40      	ldr	r3, [pc, #256]	; (89b60 <Reset_Handler+0x120>)
   89a60:	4a40      	ldr	r2, [pc, #256]	; (89b64 <Reset_Handler+0x124>)
   89a62:	429a      	cmp	r2, r3
   89a64:	d325      	bcc.n	89ab2 <Reset_Handler+0x72>
   89a66:	e042      	b.n	89aee <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   89a68:	4d3f      	ldr	r5, [pc, #252]	; (89b68 <Reset_Handler+0x128>)
   89a6a:	4c40      	ldr	r4, [pc, #256]	; (89b6c <Reset_Handler+0x12c>)
   89a6c:	1b63      	subs	r3, r4, r5
   89a6e:	f023 0503 	bic.w	r5, r3, #3
   89a72:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   89a76:	f240 0200 	movw	r2, #0
   89a7a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89a7e:	f64d 7134 	movw	r1, #57140	; 0xdf34
   89a82:	f2c0 0108 	movt	r1, #8
   89a86:	f105 0004 	add.w	r0, r5, #4
   89a8a:	f3c5 0480 	ubfx	r4, r5, #2, #1
   89a8e:	585d      	ldr	r5, [r3, r1]
   89a90:	509d      	str	r5, [r3, r2]
   89a92:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   89a96:	4283      	cmp	r3, r0
   89a98:	d155      	bne.n	89b46 <Reset_Handler+0x106>
   89a9a:	e7e0      	b.n	89a5e <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   89a9c:	585d      	ldr	r5, [r3, r1]
   89a9e:	509d      	str	r5, [r3, r2]
   89aa0:	f103 0304 	add.w	r3, r3, #4
   89aa4:	585c      	ldr	r4, [r3, r1]
   89aa6:	509c      	str	r4, [r3, r2]
   89aa8:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   89aac:	4283      	cmp	r3, r0
   89aae:	d1f5      	bne.n	89a9c <Reset_Handler+0x5c>
   89ab0:	e7d5      	b.n	89a5e <Reset_Handler+0x1e>
   89ab2:	4d2f      	ldr	r5, [pc, #188]	; (89b70 <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   89ab4:	492f      	ldr	r1, [pc, #188]	; (89b74 <Reset_Handler+0x134>)
   89ab6:	1b48      	subs	r0, r1, r5
   89ab8:	f020 0403 	bic.w	r4, r0, #3
   89abc:	f640 23e0 	movw	r3, #2784	; 0xae0
   89ac0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89ac4:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   89ac6:	f04f 0100 	mov.w	r1, #0
   89aca:	1b50      	subs	r0, r2, r5
   89acc:	f1a0 0004 	sub.w	r0, r0, #4
   89ad0:	f3c0 0480 	ubfx	r4, r0, #2, #1
   89ad4:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   89ad8:	4295      	cmp	r5, r2
   89ada:	d12d      	bne.n	89b38 <Reset_Handler+0xf8>
   89adc:	e007      	b.n	89aee <Reset_Handler+0xae>
   89ade:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   89ae2:	6069      	str	r1, [r5, #4]
   89ae4:	f105 0508 	add.w	r5, r5, #8
   89ae8:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   89aea:	4295      	cmp	r5, r2
   89aec:	d1f7      	bne.n	89ade <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   89aee:	f240 0500 	movw	r5, #0
   89af2:	f2c0 0508 	movt	r5, #8
   89af6:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   89afa:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   89afe:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   89b02:	f2ce 0000 	movt	r0, #57344	; 0xe000
   89b06:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   89b08:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   89b0c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   89b10:	d207      	bcs.n	89b22 <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   89b12:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   89b16:	f2ce 0300 	movt	r3, #57344	; 0xe000
   89b1a:	689d      	ldr	r5, [r3, #8]
   89b1c:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   89b20:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   89b22:	f64a 4159 	movw	r1, #44121	; 0xac59
   89b26:	f2c0 0108 	movt	r1, #8
   89b2a:	4788      	blx	r1

	/* Branch to main function */
	main();
   89b2c:	f24a 0049 	movw	r0, #41033	; 0xa049
   89b30:	f2c0 0008 	movt	r0, #8
   89b34:	4780      	blx	r0
   89b36:	e7fe      	b.n	89b36 <Reset_Handler+0xf6>
   89b38:	2c00      	cmp	r4, #0
   89b3a:	d0d0      	beq.n	89ade <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   89b3c:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   89b40:	4295      	cmp	r5, r2
   89b42:	d1cc      	bne.n	89ade <Reset_Handler+0x9e>
   89b44:	e7d3      	b.n	89aee <Reset_Handler+0xae>
   89b46:	2c00      	cmp	r4, #0
   89b48:	d0a8      	beq.n	89a9c <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   89b4a:	585c      	ldr	r4, [r3, r1]
   89b4c:	509c      	str	r4, [r3, r2]
   89b4e:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   89b52:	4283      	cmp	r3, r0
   89b54:	d1a2      	bne.n	89a9c <Reset_Handler+0x5c>
   89b56:	e782      	b.n	89a5e <Reset_Handler+0x1e>
   89b58:	20070ae0 	.word	0x20070ae0
   89b5c:	20070000 	.word	0x20070000
   89b60:	20071dd4 	.word	0x20071dd4
   89b64:	20070ae0 	.word	0x20070ae0
   89b68:	20070004 	.word	0x20070004
   89b6c:	20070ae3 	.word	0x20070ae3
   89b70:	20070adc 	.word	0x20070adc
   89b74:	20071dcf 	.word	0x20071dcf

00089b78 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   89b78:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   89b7c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89b80:	6b18      	ldr	r0, [r3, #48]	; 0x30
   89b82:	f000 0103 	and.w	r1, r0, #3
   89b86:	2903      	cmp	r1, #3
   89b88:	f200 80b1 	bhi.w	89cee <SystemCoreClockUpdate+0x176>
   89b8c:	e8df f001 	tbb	[pc, r1]
   89b90:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   89b94:	f641 2010 	movw	r0, #6672	; 0x1a10
   89b98:	f2c4 000e 	movt	r0, #16398	; 0x400e
   89b9c:	6941      	ldr	r1, [r0, #20]
   89b9e:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   89ba2:	f240 2394 	movw	r3, #660	; 0x294
   89ba6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89baa:	bf14      	ite	ne
   89bac:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   89bb0:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   89bb4:	601a      	str	r2, [r3, #0]
   89bb6:	e09a      	b.n	89cee <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   89bb8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   89bbc:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89bc0:	6a18      	ldr	r0, [r3, #32]
   89bc2:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   89bc6:	d009      	beq.n	89bdc <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   89bc8:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   89bcc:	f2c0 03b7 	movt	r3, #183	; 0xb7
   89bd0:	f240 2294 	movw	r2, #660	; 0x294
   89bd4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89bd8:	6013      	str	r3, [r2, #0]
   89bda:	e088      	b.n	89cee <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   89bdc:	f44f 6110 	mov.w	r1, #2304	; 0x900
   89be0:	f2c0 013d 	movt	r1, #61	; 0x3d
   89be4:	f240 2294 	movw	r2, #660	; 0x294
   89be8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89bec:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   89bee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   89bf2:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89bf6:	6a18      	ldr	r0, [r3, #32]
   89bf8:	f000 0170 	and.w	r1, r0, #112	; 0x70
   89bfc:	2910      	cmp	r1, #16
   89bfe:	d002      	beq.n	89c06 <SystemCoreClockUpdate+0x8e>
   89c00:	2920      	cmp	r1, #32
   89c02:	d174      	bne.n	89cee <SystemCoreClockUpdate+0x176>
   89c04:	e009      	b.n	89c1a <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   89c06:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   89c0a:	f2c0 007a 	movt	r0, #122	; 0x7a
   89c0e:	f240 2194 	movw	r1, #660	; 0x294
   89c12:	f2c2 0107 	movt	r1, #8199	; 0x2007
   89c16:	6008      	str	r0, [r1, #0]
				break;
   89c18:	e069      	b.n	89cee <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   89c1a:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   89c1e:	f2c0 03b7 	movt	r3, #183	; 0xb7
   89c22:	f240 2294 	movw	r2, #660	; 0x294
   89c26:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89c2a:	6013      	str	r3, [r2, #0]
				break;
   89c2c:	e05f      	b.n	89cee <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   89c2e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   89c32:	f2c4 020e 	movt	r2, #16398	; 0x400e
   89c36:	6a13      	ldr	r3, [r2, #32]
   89c38:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   89c3c:	d009      	beq.n	89c52 <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   89c3e:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   89c42:	f2c0 01b7 	movt	r1, #183	; 0xb7
   89c46:	f240 2294 	movw	r2, #660	; 0x294
   89c4a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89c4e:	6011      	str	r1, [r2, #0]
   89c50:	e027      	b.n	89ca2 <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   89c52:	f44f 6010 	mov.w	r0, #2304	; 0x900
   89c56:	f2c0 003d 	movt	r0, #61	; 0x3d
   89c5a:	f240 2194 	movw	r1, #660	; 0x294
   89c5e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   89c62:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   89c64:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   89c68:	f2c4 020e 	movt	r2, #16398	; 0x400e
   89c6c:	6a13      	ldr	r3, [r2, #32]
   89c6e:	f003 0070 	and.w	r0, r3, #112	; 0x70
   89c72:	2810      	cmp	r0, #16
   89c74:	d002      	beq.n	89c7c <SystemCoreClockUpdate+0x104>
   89c76:	2820      	cmp	r0, #32
   89c78:	d113      	bne.n	89ca2 <SystemCoreClockUpdate+0x12a>
   89c7a:	e009      	b.n	89c90 <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   89c7c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   89c80:	f2c0 037a 	movt	r3, #122	; 0x7a
   89c84:	f240 2094 	movw	r0, #660	; 0x294
   89c88:	f2c2 0007 	movt	r0, #8199	; 0x2007
   89c8c:	6003      	str	r3, [r0, #0]
				break;
   89c8e:	e008      	b.n	89ca2 <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   89c90:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   89c94:	f2c0 01b7 	movt	r1, #183	; 0xb7
   89c98:	f240 2294 	movw	r2, #660	; 0x294
   89c9c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89ca0:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   89ca2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   89ca6:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89caa:	6b18      	ldr	r0, [r3, #48]	; 0x30
   89cac:	f000 0103 	and.w	r1, r0, #3
   89cb0:	2902      	cmp	r1, #2
   89cb2:	d113      	bne.n	89cdc <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   89cb4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   89cb8:	f2c4 010e 	movt	r1, #16398	; 0x400e
   89cbc:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   89cbe:	6a89      	ldr	r1, [r1, #40]	; 0x28
   89cc0:	f240 2394 	movw	r3, #660	; 0x294
   89cc4:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   89cc8:	f3c0 400a 	ubfx	r0, r0, #16, #11
   89ccc:	681a      	ldr	r2, [r3, #0]
   89cce:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   89cd2:	b2c9      	uxtb	r1, r1
   89cd4:	fbb0 f2f1 	udiv	r2, r0, r1
   89cd8:	601a      	str	r2, [r3, #0]
   89cda:	e008      	b.n	89cee <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   89cdc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   89ce0:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   89ce4:	f240 2294 	movw	r2, #660	; 0x294
   89ce8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89cec:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   89cee:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   89cf2:	f2c4 020e 	movt	r2, #16398	; 0x400e
   89cf6:	6b10      	ldr	r0, [r2, #48]	; 0x30
   89cf8:	f000 0170 	and.w	r1, r0, #112	; 0x70
   89cfc:	2970      	cmp	r1, #112	; 0x70
   89cfe:	d10e      	bne.n	89d1e <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   89d00:	f240 2394 	movw	r3, #660	; 0x294
   89d04:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89d08:	6818      	ldr	r0, [r3, #0]
   89d0a:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   89d0e:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   89d12:	fba2 0100 	umull	r0, r1, r2, r0
   89d16:	ea4f 0051 	mov.w	r0, r1, lsr #1
   89d1a:	6018      	str	r0, [r3, #0]
   89d1c:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   89d1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   89d22:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   89d28:	f240 2094 	movw	r0, #660	; 0x294
   89d2c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   89d30:	f3c2 1102 	ubfx	r1, r2, #4, #3
   89d34:	6803      	ldr	r3, [r0, #0]
   89d36:	fa23 f301 	lsr.w	r3, r3, r1
   89d3a:	6003      	str	r3, [r0, #0]
   89d3c:	4770      	bx	lr
   89d3e:	bf00      	nop

00089d40 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   89d40:	f64e 23bf 	movw	r3, #60095	; 0xeabf
   89d44:	f2c0 1321 	movt	r3, #289	; 0x121
   89d48:	4298      	cmp	r0, r3
   89d4a:	d80c      	bhi.n	89d66 <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   89d4c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   89d50:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89d54:	f04f 0000 	mov.w	r0, #0
   89d58:	6018      	str	r0, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   89d5a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   89d5e:	f2c4 010e 	movt	r1, #16398	; 0x400e
   89d62:	6008      	str	r0, [r1, #0]
   89d64:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   89d66:	f24f 017f 	movw	r1, #61567	; 0xf07f
   89d6a:	f2c0 21fa 	movt	r1, #762	; 0x2fa
   89d6e:	4288      	cmp	r0, r1
   89d70:	d80c      	bhi.n	89d8c <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   89d72:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   89d76:	f2c4 000e 	movt	r0, #16398	; 0x400e
   89d7a:	f44f 7180 	mov.w	r1, #256	; 0x100
   89d7e:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   89d80:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   89d84:	f2c4 020e 	movt	r2, #16398	; 0x400e
   89d88:	6011      	str	r1, [r2, #0]
   89d8a:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   89d8c:	f648 73ff 	movw	r3, #36863	; 0x8fff
   89d90:	f2c0 33d0 	movt	r3, #976	; 0x3d0
   89d94:	4298      	cmp	r0, r3
   89d96:	d80c      	bhi.n	89db2 <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   89d98:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   89d9c:	f2c4 010e 	movt	r1, #16398	; 0x400e
   89da0:	f44f 7200 	mov.w	r2, #512	; 0x200
   89da4:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   89da6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   89daa:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89dae:	601a      	str	r2, [r3, #0]
   89db0:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   89db2:	f24b 31ff 	movw	r1, #46079	; 0xb3ff
   89db6:	f2c0 41c4 	movt	r1, #1220	; 0x4c4
   89dba:	4288      	cmp	r0, r1
   89dbc:	d80c      	bhi.n	89dd8 <system_init_flash+0x98>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   89dbe:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   89dc2:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89dc6:	f44f 7240 	mov.w	r2, #768	; 0x300
   89dca:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   89dcc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   89dd0:	f2c4 000e 	movt	r0, #16398	; 0x400e
   89dd4:	6002      	str	r2, [r0, #0]
   89dd6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   89dd8:	f644 237f 	movw	r3, #19071	; 0x4a7f
   89ddc:	f2c0 535d 	movt	r3, #1373	; 0x55d
   89de0:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   89de2:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   89de6:	f2c4 000e 	movt	r0, #16398	; 0x400e
   89dea:	bf94      	ite	ls
   89dec:	f44f 6280 	movls.w	r2, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   89df0:	f44f 62a0 	movhi.w	r2, #1280	; 0x500
   89df4:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   89df6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   89dfa:	f2c4 010e 	movt	r1, #16398	; 0x400e
   89dfe:	600a      	str	r2, [r1, #0]
   89e00:	4770      	bx	lr
   89e02:	bf00      	nop

00089e04 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   89e04:	f241 6328 	movw	r3, #5672	; 0x1628
   89e08:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89e0c:	6819      	ldr	r1, [r3, #0]
   89e0e:	b941      	cbnz	r1, 89e22 <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
   89e10:	f241 6328 	movw	r3, #5672	; 0x1628
   89e14:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89e18:	f643 52d8 	movw	r2, #15832	; 0x3dd8
   89e1c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89e20:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   89e22:	f241 6128 	movw	r1, #5672	; 0x1628
   89e26:	f2c2 0107 	movt	r1, #8199	; 0x2007
   89e2a:	680b      	ldr	r3, [r1, #0]

	heap += incr;
   89e2c:	1818      	adds	r0, r3, r0
   89e2e:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
   89e30:	4618      	mov	r0, r3
   89e32:	4770      	bx	lr

00089e34 <set_countera_integration_time>:


/* Set Counter A integration time */
void set_countera_integration_time(uint16_t integration_time)
{
	ch0_integration_time_goal = integration_time;
   89e34:	f240 2398 	movw	r3, #664	; 0x298
   89e38:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89e3c:	8018      	strh	r0, [r3, #0]
	ch0_integration_time_counter = 0;
   89e3e:	f241 603c 	movw	r0, #5692	; 0x163c
   89e42:	f2c2 0007 	movt	r0, #8199	; 0x2007
   89e46:	f04f 0200 	mov.w	r2, #0
   89e4a:	8002      	strh	r2, [r0, #0]
   89e4c:	4770      	bx	lr
   89e4e:	bf00      	nop

00089e50 <set_counterb_integration_time>:
}

/* Set Counter B integration time */
void set_counterb_integration_time(uint16_t integration_time)
{
	ch1_integration_time_goal = integration_time;
   89e50:	f240 239a 	movw	r3, #666	; 0x29a
   89e54:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89e58:	8018      	strh	r0, [r3, #0]
	ch1_integration_time_counter = 0;
   89e5a:	f241 6040 	movw	r0, #5696	; 0x1640
   89e5e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   89e62:	f04f 0200 	mov.w	r2, #0
   89e66:	8002      	strh	r2, [r0, #0]
   89e68:	4770      	bx	lr
   89e6a:	bf00      	nop

00089e6c <get_countera_integration_time>:

/* Get Counter A integration time */
uint16_t get_countera_integration_time(void)
{
	return ch0_integration_time_goal;
}
   89e6c:	f240 2398 	movw	r3, #664	; 0x298
   89e70:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89e74:	8818      	ldrh	r0, [r3, #0]
   89e76:	4770      	bx	lr

00089e78 <get_counterb_integration_time>:

/* Get Counter B integration time */
uint16_t get_counterb_integration_time(void)
{
	return ch1_integration_time_goal;
}
   89e78:	f240 239a 	movw	r3, #666	; 0x29a
   89e7c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89e80:	8818      	ldrh	r0, [r3, #0]
   89e82:	4770      	bx	lr

00089e84 <set_counters_integration_time>:

/* Set counters integration time */
void set_counters_integration_time(uint16_t integration_time)
{
   89e84:	b510      	push	{r4, lr}
   89e86:	4604      	mov	r4, r0
	set_countera_integration_time(integration_time);
   89e88:	f649 6335 	movw	r3, #40501	; 0x9e35
   89e8c:	f2c0 0308 	movt	r3, #8
   89e90:	4798      	blx	r3
	set_counterb_integration_time(integration_time);
   89e92:	4620      	mov	r0, r4
   89e94:	f649 6151 	movw	r1, #40529	; 0x9e51
   89e98:	f2c0 0108 	movt	r1, #8
   89e9c:	4788      	blx	r1
   89e9e:	bd10      	pop	{r4, pc}

00089ea0 <shift_counter_buffer_contents>:
}

/* Routine to shift buffer contents to the left */
void shift_counter_buffer_contents(uint64_t* buffer)
{
   89ea0:	b410      	push	{r4}
	uint16_t i;
	
	// shift contents to the left!
	for(i = 0; i < (VALUES_BUF_LENGTH - 1); i++)
   89ea2:	f04f 0400 	mov.w	r4, #0
   89ea6:	4601      	mov	r1, r0
	{
		buffer[i] = buffer[i+1];
   89ea8:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   89eac:	e8e1 2302 	strd	r2, r3, [r1], #8
void shift_counter_buffer_contents(uint64_t* buffer)
{
	uint16_t i;
	
	// shift contents to the left!
	for(i = 0; i < (VALUES_BUF_LENGTH - 1); i++)
   89eb0:	f104 0401 	add.w	r4, r4, #1
   89eb4:	b2a4      	uxth	r4, r4
	{
		buffer[i] = buffer[i+1];
   89eb6:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   89eba:	e9c1 2300 	strd	r2, r3, [r1]
void shift_counter_buffer_contents(uint64_t* buffer)
{
	uint16_t i;
	
	// shift contents to the left!
	for(i = 0; i < (VALUES_BUF_LENGTH - 1); i++)
   89ebe:	f104 0401 	add.w	r4, r4, #1
   89ec2:	b2a4      	uxth	r4, r4
   89ec4:	f101 0010 	add.w	r0, r1, #16
	{
		buffer[i] = buffer[i+1];
   89ec8:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   89ecc:	e940 2302 	strd	r2, r3, [r0, #-8]
void shift_counter_buffer_contents(uint64_t* buffer)
{
	uint16_t i;
	
	// shift contents to the left!
	for(i = 0; i < (VALUES_BUF_LENGTH - 1); i++)
   89ed0:	f104 0401 	add.w	r4, r4, #1
   89ed4:	b2a4      	uxth	r4, r4
   89ed6:	2c15      	cmp	r4, #21
   89ed8:	d1e5      	bne.n	89ea6 <shift_counter_buffer_contents+0x6>
	{
		buffer[i] = buffer[i+1];
	}
}
   89eda:	bc10      	pop	{r4}
   89edc:	4770      	bx	lr
   89ede:	bf00      	nop

00089ee0 <read_last_contera_val>:

/* buffer pop() */
RET_TYPE read_last_contera_val(uint64_t* return_data)
{
   89ee0:	b508      	push	{r3, lr}
	if(ch0_values_buffer_next_pointer > 0)
   89ee2:	f241 6350 	movw	r3, #5712	; 0x1650
   89ee6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89eea:	8819      	ldrh	r1, [r3, #0]
   89eec:	b1b9      	cbz	r1, 89f1e <read_last_contera_val+0x3e>
	{
		ch0_values_buffer_next_pointer--;
   89eee:	f101 33ff 	add.w	r3, r1, #4294967295
   89ef2:	f241 6250 	movw	r2, #5712	; 0x1650
   89ef6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89efa:	8013      	strh	r3, [r2, #0]
		*return_data = ch0_counters_values_buffer[0];
   89efc:	f641 5120 	movw	r1, #7456	; 0x1d20
   89f00:	f2c2 0107 	movt	r1, #8199	; 0x2007
   89f04:	e9d1 2300 	ldrd	r2, r3, [r1]
   89f08:	e9c0 2300 	strd	r2, r3, [r0]
		shift_counter_buffer_contents(ch0_counters_values_buffer);
   89f0c:	4608      	mov	r0, r1
   89f0e:	f649 63a1 	movw	r3, #40609	; 0x9ea1
   89f12:	f2c0 0308 	movt	r3, #8
   89f16:	4798      	blx	r3
		return RETURN_OK;
   89f18:	f04f 0001 	mov.w	r0, #1
   89f1c:	bd08      	pop	{r3, pc}
	}
	else
	{
		return RETURN_NOK;
   89f1e:	f04f 0000 	mov.w	r0, #0
	}
}
   89f22:	bd08      	pop	{r3, pc}

00089f24 <read_last_conterb_val>:

/* buffer pop() */
RET_TYPE read_last_conterb_val(uint64_t* return_data)
{
   89f24:	b508      	push	{r3, lr}
	if(ch1_values_buffer_next_pointer > 0)
   89f26:	f241 6352 	movw	r3, #5714	; 0x1652
   89f2a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89f2e:	8819      	ldrh	r1, [r3, #0]
   89f30:	b1b9      	cbz	r1, 89f62 <read_last_conterb_val+0x3e>
	{
		ch1_values_buffer_next_pointer--;
   89f32:	f101 33ff 	add.w	r3, r1, #4294967295
   89f36:	f241 6252 	movw	r2, #5714	; 0x1652
   89f3a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89f3e:	8013      	strh	r3, [r2, #0]
		*return_data = ch1_counters_values_buffer[0];
   89f40:	f641 4170 	movw	r1, #7280	; 0x1c70
   89f44:	f2c2 0107 	movt	r1, #8199	; 0x2007
   89f48:	e9d1 2300 	ldrd	r2, r3, [r1]
   89f4c:	e9c0 2300 	strd	r2, r3, [r0]
		shift_counter_buffer_contents(ch1_counters_values_buffer);
   89f50:	4608      	mov	r0, r1
   89f52:	f649 63a1 	movw	r3, #40609	; 0x9ea1
   89f56:	f2c0 0308 	movt	r3, #8
   89f5a:	4798      	blx	r3
		return RETURN_OK;
   89f5c:	f04f 0001 	mov.w	r0, #1
   89f60:	bd08      	pop	{r3, pc}
	}
	else
	{
		return RETURN_NOK;
   89f62:	f04f 0000 	mov.w	r0, #0
	}
}
   89f66:	bd08      	pop	{r3, pc}

00089f68 <add_new_countera_measurement_to_queue>:

/* buffer push() */
void add_new_countera_measurement_to_queue(uint64_t measurement)
{
   89f68:	b570      	push	{r4, r5, r6, lr}
   89f6a:	4604      	mov	r4, r0
   89f6c:	460d      	mov	r5, r1
	// If the buffer is full, remove oldest element
	if(ch0_values_buffer_next_pointer == VALUES_BUF_LENGTH)
   89f6e:	f241 6350 	movw	r3, #5712	; 0x1650
   89f72:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89f76:	8818      	ldrh	r0, [r3, #0]
   89f78:	2816      	cmp	r0, #22
   89f7a:	d10c      	bne.n	89f96 <add_new_countera_measurement_to_queue+0x2e>
	{
		shift_counter_buffer_contents(ch0_counters_values_buffer);
   89f7c:	f641 5620 	movw	r6, #7456	; 0x1d20
   89f80:	f2c2 0607 	movt	r6, #8199	; 0x2007
   89f84:	4630      	mov	r0, r6
   89f86:	f649 62a1 	movw	r2, #40609	; 0x9ea1
   89f8a:	f2c0 0208 	movt	r2, #8
   89f8e:	4790      	blx	r2
		ch0_counters_values_buffer[VALUES_BUF_LENGTH-1] = measurement;
   89f90:	e9c6 452a 	strd	r4, r5, [r6, #168]	; 0xa8
   89f94:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		ch0_counters_values_buffer[ch0_values_buffer_next_pointer++] = measurement;
   89f96:	f641 5220 	movw	r2, #7456	; 0x1d20
   89f9a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89f9e:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
   89fa2:	e9c1 4500 	strd	r4, r5, [r1]
   89fa6:	f100 0001 	add.w	r0, r0, #1
   89faa:	f241 6350 	movw	r3, #5712	; 0x1650
   89fae:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89fb2:	8018      	strh	r0, [r3, #0]
   89fb4:	bd70      	pop	{r4, r5, r6, pc}
   89fb6:	bf00      	nop

00089fb8 <add_new_counterb_measurement_to_queue>:
	}
}

/* buffer push() */
void add_new_counterb_measurement_to_queue(uint64_t measurement)
{
   89fb8:	b570      	push	{r4, r5, r6, lr}
   89fba:	4604      	mov	r4, r0
   89fbc:	460d      	mov	r5, r1
	// If the buffer is full, remove oldest element
	if(ch1_values_buffer_next_pointer == VALUES_BUF_LENGTH)
   89fbe:	f241 6352 	movw	r3, #5714	; 0x1652
   89fc2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89fc6:	8818      	ldrh	r0, [r3, #0]
   89fc8:	2816      	cmp	r0, #22
   89fca:	d10c      	bne.n	89fe6 <add_new_counterb_measurement_to_queue+0x2e>
	{
		shift_counter_buffer_contents(ch1_counters_values_buffer);
   89fcc:	f641 4670 	movw	r6, #7280	; 0x1c70
   89fd0:	f2c2 0607 	movt	r6, #8199	; 0x2007
   89fd4:	4630      	mov	r0, r6
   89fd6:	f649 62a1 	movw	r2, #40609	; 0x9ea1
   89fda:	f2c0 0208 	movt	r2, #8
   89fde:	4790      	blx	r2
		ch1_counters_values_buffer[VALUES_BUF_LENGTH-1] = measurement;
   89fe0:	e9c6 452a 	strd	r4, r5, [r6, #168]	; 0xa8
   89fe4:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		ch1_counters_values_buffer[ch1_values_buffer_next_pointer++] = measurement;
   89fe6:	f641 4270 	movw	r2, #7280	; 0x1c70
   89fea:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89fee:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
   89ff2:	e9c1 4500 	strd	r4, r5, [r1]
   89ff6:	f100 0001 	add.w	r0, r0, #1
   89ffa:	f241 6352 	movw	r3, #5714	; 0x1652
   89ffe:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a002:	8018      	strh	r0, [r3, #0]
   8a004:	bd70      	pop	{r4, r5, r6, pc}
   8a006:	bf00      	nop

0008a008 <main_msc_enable>:
	}
}

bool main_msc_enable(void)
{
	main_b_msc_enable = true;
   8a008:	f04f 0001 	mov.w	r0, #1
   8a00c:	f241 633a 	movw	r3, #5690	; 0x163a
   8a010:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a014:	7018      	strb	r0, [r3, #0]
	return true;
}
   8a016:	4770      	bx	lr

0008a018 <main_msc_disable>:
void main_msc_disable(void)
{
	main_b_msc_enable = false;
   8a018:	f241 633a 	movw	r3, #5690	; 0x163a
   8a01c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a020:	f04f 0200 	mov.w	r2, #0
   8a024:	701a      	strb	r2, [r3, #0]
   8a026:	4770      	bx	lr

0008a028 <main_cdc_enable>:
}
bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
   8a028:	f04f 0001 	mov.w	r0, #1
   8a02c:	f241 632c 	movw	r3, #5676	; 0x162c
   8a030:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a034:	7018      	strb	r0, [r3, #0]
	return true;
}
   8a036:	4770      	bx	lr

0008a038 <main_cdc_disable>:
void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
   8a038:	f241 632c 	movw	r3, #5676	; 0x162c
   8a03c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a040:	f04f 0200 	mov.w	r2, #0
   8a044:	701a      	strb	r2, [r3, #0]
   8a046:	4770      	bx	lr

0008a048 <main>:
}

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   8a048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a04c:	b083      	sub	sp, #12
	uint32_t measured_counter1;
	uint32_t measured_counter2;
	
	irq_initialize_vectors();
	cpu_irq_enable();
   8a04e:	f04f 0401 	mov.w	r4, #1
   8a052:	f240 2390 	movw	r3, #656	; 0x290
   8a056:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a05a:	701c      	strb	r4, [r3, #0]
   8a05c:	f3bf 8f5f 	dmb	sy
   8a060:	b662      	cpsie	i
	wdt_disable(WDT);
   8a062:	f641 2050 	movw	r0, #6736	; 0x1a50
   8a066:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8a06a:	f641 210d 	movw	r1, #6669	; 0x1a0d
   8a06e:	f2c0 0108 	movt	r1, #8
   8a072:	4788      	blx	r1
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
   8a074:	f641 404c 	movw	r0, #7244	; 0x1c4c
   8a078:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a07c:	f04f 0200 	mov.w	r2, #0
   8a080:	7002      	strb	r2, [r0, #0]
   8a082:	7042      	strb	r2, [r0, #1]
   8a084:	7082      	strb	r2, [r0, #2]
   8a086:	70c2      	strb	r2, [r0, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   8a088:	7104      	strb	r4, [r0, #4]

	// Initialize the sleep manager
	sleepmgr_init();

	// Board initialization
	sysclk_init();
   8a08a:	f245 25f1 	movw	r5, #21233	; 0x52f1
   8a08e:	f2c0 0508 	movt	r5, #8
   8a092:	47a8      	blx	r5
	init_board();
   8a094:	f641 2615 	movw	r6, #6677	; 0x1a15
   8a098:	f2c0 0608 	movt	r6, #8
   8a09c:	47b0      	blx	r6
	init_pwm();
   8a09e:	f242 1761 	movw	r7, #8545	; 0x2161
   8a0a2:	f2c0 0708 	movt	r7, #8
   8a0a6:	47b8      	blx	r7
	init_i2c();
   8a0a8:	f242 1411 	movw	r4, #8465	; 0x2111
   8a0ac:	f2c0 0408 	movt	r4, #8
   8a0b0:	47a0      	blx	r4

	// Module initialization	
	init_module_peripherals_bp();
   8a0b2:	f641 736d 	movw	r3, #8045	; 0x1f6d
   8a0b6:	f2c0 0308 	movt	r3, #8
   8a0ba:	4798      	blx	r3

	/* Initialize SD MMC stack */
	delay_ms(200);
   8a0bc:	f44f 409f 	mov.w	r0, #20352	; 0x4f80
   8a0c0:	f2c0 0012 	movt	r0, #18
   8a0c4:	f240 0101 	movw	r1, #1
   8a0c8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8a0cc:	4788      	blx	r1
	sd_mmc_init();
   8a0ce:	f240 4069 	movw	r0, #1129	; 0x469
   8a0d2:	f2c0 0008 	movt	r0, #8
   8a0d6:	4780      	blx	r0

	// Start USB stack to authorize VBus monitoring
	udc_start();
   8a0d8:	f646 42dd 	movw	r2, #27869	; 0x6cdd
   8a0dc:	f2c0 0208 	movt	r2, #8
   8a0e0:	4790      	blx	r2
	
	// Init SCPI parser
    console_init();	
   8a0e2:	f245 0531 	movw	r5, #20529	; 0x5031
   8a0e6:	f2c0 0508 	movt	r5, #8
   8a0ea:	47a8      	blx	r5
	
	enable_12v();
   8a0ec:	f242 26f1 	movw	r6, #8945	; 0x22f1
   8a0f0:	f2c0 0608 	movt	r6, #8
   8a0f4:	47b0      	blx	r6
	init_module_peripherals_ap();
   8a0f6:	f641 7771 	movw	r7, #8049	; 0x1f71
   8a0fa:	f2c0 0708 	movt	r7, #8
   8a0fe:	47b8      	blx	r7
	//enable_test_routine();
	while (true) 
	{
		console_process();
   8a100:	f245 0849 	movw	r8, #20553	; 0x5049
   8a104:	f2c0 0808 	movt	r8, #8
		
		if(get_sync_signal_status() == RETURN_OK)
   8a108:	f242 27d1 	movw	r7, #8913	; 0x22d1
   8a10c:	f2c0 0708 	movt	r7, #8
		{
			//enable_test_routine();
		}
		
		if((get_ok_12v_status() == RETURN_OK) && (last_ok_12v_state == false))
   8a110:	f242 24e1 	movw	r4, #8929	; 0x22e1
   8a114:	f2c0 0408 	movt	r4, #8
   8a118:	f241 652d 	movw	r5, #5677	; 0x162d
   8a11c:	f2c2 0507 	movt	r5, #8199	; 0x2007
		{
			set_user_led_colour(0, 0, 0);
			last_ok_12v_state = false;
		}
		
		if(get_fpga_read_available_flag() == RETURN_OK)
   8a120:	f641 4625 	movw	r6, #7205	; 0x1c25
   8a124:	f2c0 0608 	movt	r6, #8
	enable_12v();
	init_module_peripherals_ap();
	//enable_test_routine();
	while (true) 
	{
		console_process();
   8a128:	47c0      	blx	r8
		
		if(get_sync_signal_status() == RETURN_OK)
   8a12a:	47b8      	blx	r7
		{
			//enable_test_routine();
		}
		
		if((get_ok_12v_status() == RETURN_OK) && (last_ok_12v_state == false))
   8a12c:	47a0      	blx	r4
   8a12e:	2801      	cmp	r0, #1
   8a130:	d10f      	bne.n	8a152 <main+0x10a>
   8a132:	782b      	ldrb	r3, [r5, #0]
   8a134:	b96b      	cbnz	r3, 8a152 <main+0x10a>
		{
			set_user_led_colour(0, 100, 0);
   8a136:	f04f 0000 	mov.w	r0, #0
   8a13a:	f04f 0164 	mov.w	r1, #100	; 0x64
   8a13e:	4602      	mov	r2, r0
   8a140:	f242 2379 	movw	r3, #8825	; 0x2279
   8a144:	f2c0 0308 	movt	r3, #8
   8a148:	4798      	blx	r3
			last_ok_12v_state = true;
   8a14a:	f04f 0201 	mov.w	r2, #1
   8a14e:	702a      	strb	r2, [r5, #0]
   8a150:	e00d      	b.n	8a16e <main+0x126>
		}
		else if((get_ok_12v_status() == RETURN_NOK) && (last_ok_12v_state == true))
   8a152:	47a0      	blx	r4
   8a154:	b958      	cbnz	r0, 8a16e <main+0x126>
   8a156:	7829      	ldrb	r1, [r5, #0]
   8a158:	b149      	cbz	r1, 8a16e <main+0x126>
		{
			set_user_led_colour(0, 0, 0);
   8a15a:	4601      	mov	r1, r0
   8a15c:	4602      	mov	r2, r0
   8a15e:	f242 2379 	movw	r3, #8825	; 0x2279
   8a162:	f2c0 0308 	movt	r3, #8
   8a166:	4798      	blx	r3
			last_ok_12v_state = false;
   8a168:	f04f 0000 	mov.w	r0, #0
   8a16c:	7028      	strb	r0, [r5, #0]
		}
		
		if(get_fpga_read_available_flag() == RETURN_OK)
   8a16e:	47b0      	blx	r6
   8a170:	2801      	cmp	r0, #1
   8a172:	f040 80a2 	bne.w	8a2ba <main+0x272>
		{
			read_counters(&measured_counter1, &measured_counter2);			
   8a176:	a801      	add	r0, sp, #4
   8a178:	4669      	mov	r1, sp
   8a17a:	f641 4335 	movw	r3, #7221	; 0x1c35
   8a17e:	f2c0 0308 	movt	r3, #8
   8a182:	4798      	blx	r3
			ch0_counter_integrated += measured_counter1;
   8a184:	f241 6130 	movw	r1, #5680	; 0x1630
   8a188:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8a18c:	e9d1 ab00 	ldrd	sl, fp, [r1]
   8a190:	9801      	ldr	r0, [sp, #4]
   8a192:	eb1a 0a00 	adds.w	sl, sl, r0
   8a196:	f14b 0b00 	adc.w	fp, fp, #0
   8a19a:	e9c1 ab00 	strd	sl, fp, [r1]
			ch1_counter_integrated += measured_counter2;
   8a19e:	f241 6048 	movw	r0, #5704	; 0x1648
   8a1a2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a1a6:	e9d0 2300 	ldrd	r2, r3, [r0]
   8a1aa:	9900      	ldr	r1, [sp, #0]
   8a1ac:	1852      	adds	r2, r2, r1
   8a1ae:	f143 0300 	adc.w	r3, r3, #0
   8a1b2:	e9c0 2300 	strd	r2, r3, [r0]
			ch0_integration_time_counter++;
   8a1b6:	f241 623c 	movw	r2, #5692	; 0x163c
   8a1ba:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8a1be:	8813      	ldrh	r3, [r2, #0]
   8a1c0:	f103 0301 	add.w	r3, r3, #1
   8a1c4:	b298      	uxth	r0, r3
   8a1c6:	8010      	strh	r0, [r2, #0]
			ch1_integration_time_counter++;
   8a1c8:	f241 6240 	movw	r2, #5696	; 0x1640
   8a1cc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8a1d0:	8811      	ldrh	r1, [r2, #0]
   8a1d2:	f101 0101 	add.w	r1, r1, #1
   8a1d6:	8011      	strh	r1, [r2, #0]
			
			if(ch0_integration_time_counter == ch0_integration_time_goal)
   8a1d8:	f240 2398 	movw	r3, #664	; 0x298
   8a1dc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a1e0:	881a      	ldrh	r2, [r3, #0]
   8a1e2:	4282      	cmp	r2, r0
   8a1e4:	d117      	bne.n	8a216 <main+0x1ce>
			{
				ch0_integration_time_counter = 0;
   8a1e6:	f241 603c 	movw	r0, #5692	; 0x163c
   8a1ea:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a1ee:	f04f 0100 	mov.w	r1, #0
   8a1f2:	8001      	strh	r1, [r0, #0]
				add_new_countera_measurement_to_queue(ch0_counter_integrated);
   8a1f4:	4650      	mov	r0, sl
   8a1f6:	4659      	mov	r1, fp
   8a1f8:	f649 7369 	movw	r3, #40809	; 0x9f69
   8a1fc:	f2c0 0308 	movt	r3, #8
   8a200:	4798      	blx	r3
				ch0_counter_integrated = 0;
   8a202:	f241 6030 	movw	r0, #5680	; 0x1630
   8a206:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a20a:	f04f 0200 	mov.w	r2, #0
   8a20e:	f04f 0300 	mov.w	r3, #0
   8a212:	e9c0 2300 	strd	r2, r3, [r0]
			}
			
			if(ch1_integration_time_counter == ch1_integration_time_goal)
   8a216:	f241 6240 	movw	r2, #5696	; 0x1640
   8a21a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8a21e:	8811      	ldrh	r1, [r2, #0]
   8a220:	f240 239a 	movw	r3, #666	; 0x29a
   8a224:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a228:	8818      	ldrh	r0, [r3, #0]
   8a22a:	4281      	cmp	r1, r0
   8a22c:	d117      	bne.n	8a25e <main+0x216>
			{
				ch1_integration_time_counter = 0;
   8a22e:	f241 6140 	movw	r1, #5696	; 0x1640
   8a232:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8a236:	f04f 0200 	mov.w	r2, #0
   8a23a:	800a      	strh	r2, [r1, #0]
				add_new_counterb_measurement_to_queue(ch1_counter_integrated);
   8a23c:	f241 6948 	movw	r9, #5704	; 0x1648
   8a240:	f2c2 0907 	movt	r9, #8199	; 0x2007
   8a244:	e9d9 0100 	ldrd	r0, r1, [r9]
   8a248:	f649 73b9 	movw	r3, #40889	; 0x9fb9
   8a24c:	f2c0 0308 	movt	r3, #8
   8a250:	4798      	blx	r3
				ch1_counter_integrated = 0;
   8a252:	f04f 0200 	mov.w	r2, #0
   8a256:	f04f 0300 	mov.w	r3, #0
   8a25a:	e9c9 2300 	strd	r2, r3, [r9]
			}
			
			if(test_blinking_bool == TRUE)
   8a25e:	f241 6038 	movw	r0, #5688	; 0x1638
   8a262:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a266:	8801      	ldrh	r1, [r0, #0]
   8a268:	2901      	cmp	r1, #1
   8a26a:	d126      	bne.n	8a2ba <main+0x272>
			{
				if(test_blinking_state == FALSE)
   8a26c:	f241 623e 	movw	r2, #5694	; 0x163e
   8a270:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8a274:	8813      	ldrh	r3, [r2, #0]
   8a276:	b983      	cbnz	r3, 8a29a <main+0x252>
				{
					set_user_led_colour(1024, 1024, 1024);
   8a278:	f44f 6080 	mov.w	r0, #1024	; 0x400
   8a27c:	4601      	mov	r1, r0
   8a27e:	4602      	mov	r2, r0
   8a280:	f242 2379 	movw	r3, #8825	; 0x2279
   8a284:	f2c0 0308 	movt	r3, #8
   8a288:	4798      	blx	r3
					test_blinking_state = TRUE;
   8a28a:	f241 603e 	movw	r0, #5694	; 0x163e
   8a28e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a292:	f04f 0201 	mov.w	r2, #1
   8a296:	8002      	strh	r2, [r0, #0]
   8a298:	e00f      	b.n	8a2ba <main+0x272>
				} 
				else
				{
					set_user_led_colour(0, 0, 0);
   8a29a:	f04f 0000 	mov.w	r0, #0
   8a29e:	4601      	mov	r1, r0
   8a2a0:	4602      	mov	r2, r0
   8a2a2:	f242 2379 	movw	r3, #8825	; 0x2279
   8a2a6:	f2c0 0308 	movt	r3, #8
   8a2aa:	4798      	blx	r3
					test_blinking_state = FALSE;
   8a2ac:	f241 603e 	movw	r0, #5694	; 0x163e
   8a2b0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a2b4:	f04f 0100 	mov.w	r1, #0
   8a2b8:	8001      	strh	r1, [r0, #0]
// 		else if(get_ok_12v_status() == RETURN_OK)
// 			set_user_led_colour(100, 0, 0);
// 		else
// 			set_user_led_colour(0, 0, 0);			

		if (main_b_msc_enable) 
   8a2ba:	f241 613a 	movw	r1, #5690	; 0x163a
   8a2be:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8a2c2:	780b      	ldrb	r3, [r1, #0]
   8a2c4:	2b00      	cmp	r3, #0
   8a2c6:	f43f af2f 	beq.w	8a128 <main+0xe0>
		{
			if (!udi_msc_process_trans()) 
   8a2ca:	f646 1039 	movw	r0, #26937	; 0x6939
   8a2ce:	f2c0 0008 	movt	r0, #8
   8a2d2:	4780      	blx	r0
   8a2d4:	e728      	b.n	8a128 <main+0xe0>
   8a2d6:	bf00      	nop

0008a2d8 <round>:
   8a2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a2da:	f3c1 570a 	ubfx	r7, r1, #20, #11
   8a2de:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
   8a2e2:	2e13      	cmp	r6, #19
   8a2e4:	4602      	mov	r2, r0
   8a2e6:	460b      	mov	r3, r1
   8a2e8:	4604      	mov	r4, r0
   8a2ea:	460d      	mov	r5, r1
   8a2ec:	dc18      	bgt.n	8a320 <round+0x48>
   8a2ee:	2e00      	cmp	r6, #0
   8a2f0:	da08      	bge.n	8a304 <round+0x2c>
   8a2f2:	1c73      	adds	r3, r6, #1
   8a2f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a2f8:	d130      	bne.n	8a35c <round+0x84>
   8a2fa:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
   8a2fe:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   8a302:	e02b      	b.n	8a35c <round+0x84>
   8a304:	4818      	ldr	r0, [pc, #96]	; (8a368 <round+0x90>)
   8a306:	fa40 f006 	asr.w	r0, r0, r6
   8a30a:	4208      	tst	r0, r1
   8a30c:	d100      	bne.n	8a310 <round+0x38>
   8a30e:	b342      	cbz	r2, 8a362 <round+0x8a>
   8a310:	f44f 2400 	mov.w	r4, #524288	; 0x80000
   8a314:	fa44 f606 	asr.w	r6, r4, r6
   8a318:	19ad      	adds	r5, r5, r6
   8a31a:	ea25 0500 	bic.w	r5, r5, r0
   8a31e:	e01d      	b.n	8a35c <round+0x84>
   8a320:	2e33      	cmp	r6, #51	; 0x33
   8a322:	dd07      	ble.n	8a334 <round+0x5c>
   8a324:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   8a328:	d11b      	bne.n	8a362 <round+0x8a>
   8a32a:	f000 f825 	bl	8a378 <__adddf3>
   8a32e:	4602      	mov	r2, r0
   8a330:	460b      	mov	r3, r1
   8a332:	e016      	b.n	8a362 <round+0x8a>
   8a334:	f2a7 4113 	subw	r1, r7, #1043	; 0x413
   8a338:	f04f 30ff 	mov.w	r0, #4294967295
   8a33c:	fa20 f101 	lsr.w	r1, r0, r1
   8a340:	4211      	tst	r1, r2
   8a342:	d00e      	beq.n	8a362 <round+0x8a>
   8a344:	f5c7 6786 	rsb	r7, r7, #1072	; 0x430
   8a348:	2301      	movs	r3, #1
   8a34a:	1cba      	adds	r2, r7, #2
   8a34c:	fa03 f702 	lsl.w	r7, r3, r2
   8a350:	193c      	adds	r4, r7, r4
   8a352:	bf28      	it	cs
   8a354:	18ed      	addcs	r5, r5, r3
   8a356:	ea24 0401 	bic.w	r4, r4, r1
   8a35a:	e000      	b.n	8a35e <round+0x86>
   8a35c:	2400      	movs	r4, #0
   8a35e:	462b      	mov	r3, r5
   8a360:	4622      	mov	r2, r4
   8a362:	4610      	mov	r0, r2
   8a364:	4619      	mov	r1, r3
   8a366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a368:	000fffff 	.word	0x000fffff

0008a36c <__aeabi_drsub>:
   8a36c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8a370:	e002      	b.n	8a378 <__adddf3>
   8a372:	bf00      	nop

0008a374 <__aeabi_dsub>:
   8a374:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008a378 <__adddf3>:
   8a378:	b530      	push	{r4, r5, lr}
   8a37a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8a37e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8a382:	ea94 0f05 	teq	r4, r5
   8a386:	bf08      	it	eq
   8a388:	ea90 0f02 	teqeq	r0, r2
   8a38c:	bf1f      	itttt	ne
   8a38e:	ea54 0c00 	orrsne.w	ip, r4, r0
   8a392:	ea55 0c02 	orrsne.w	ip, r5, r2
   8a396:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8a39a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8a39e:	f000 80e2 	beq.w	8a566 <__adddf3+0x1ee>
   8a3a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8a3a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8a3aa:	bfb8      	it	lt
   8a3ac:	426d      	neglt	r5, r5
   8a3ae:	dd0c      	ble.n	8a3ca <__adddf3+0x52>
   8a3b0:	442c      	add	r4, r5
   8a3b2:	ea80 0202 	eor.w	r2, r0, r2
   8a3b6:	ea81 0303 	eor.w	r3, r1, r3
   8a3ba:	ea82 0000 	eor.w	r0, r2, r0
   8a3be:	ea83 0101 	eor.w	r1, r3, r1
   8a3c2:	ea80 0202 	eor.w	r2, r0, r2
   8a3c6:	ea81 0303 	eor.w	r3, r1, r3
   8a3ca:	2d36      	cmp	r5, #54	; 0x36
   8a3cc:	bf88      	it	hi
   8a3ce:	bd30      	pophi	{r4, r5, pc}
   8a3d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8a3d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8a3d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8a3dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8a3e0:	d002      	beq.n	8a3e8 <__adddf3+0x70>
   8a3e2:	4240      	negs	r0, r0
   8a3e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8a3e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8a3ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8a3f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8a3f4:	d002      	beq.n	8a3fc <__adddf3+0x84>
   8a3f6:	4252      	negs	r2, r2
   8a3f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8a3fc:	ea94 0f05 	teq	r4, r5
   8a400:	f000 80a7 	beq.w	8a552 <__adddf3+0x1da>
   8a404:	f1a4 0401 	sub.w	r4, r4, #1
   8a408:	f1d5 0e20 	rsbs	lr, r5, #32
   8a40c:	db0d      	blt.n	8a42a <__adddf3+0xb2>
   8a40e:	fa02 fc0e 	lsl.w	ip, r2, lr
   8a412:	fa22 f205 	lsr.w	r2, r2, r5
   8a416:	1880      	adds	r0, r0, r2
   8a418:	f141 0100 	adc.w	r1, r1, #0
   8a41c:	fa03 f20e 	lsl.w	r2, r3, lr
   8a420:	1880      	adds	r0, r0, r2
   8a422:	fa43 f305 	asr.w	r3, r3, r5
   8a426:	4159      	adcs	r1, r3
   8a428:	e00e      	b.n	8a448 <__adddf3+0xd0>
   8a42a:	f1a5 0520 	sub.w	r5, r5, #32
   8a42e:	f10e 0e20 	add.w	lr, lr, #32
   8a432:	2a01      	cmp	r2, #1
   8a434:	fa03 fc0e 	lsl.w	ip, r3, lr
   8a438:	bf28      	it	cs
   8a43a:	f04c 0c02 	orrcs.w	ip, ip, #2
   8a43e:	fa43 f305 	asr.w	r3, r3, r5
   8a442:	18c0      	adds	r0, r0, r3
   8a444:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8a448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a44c:	d507      	bpl.n	8a45e <__adddf3+0xe6>
   8a44e:	f04f 0e00 	mov.w	lr, #0
   8a452:	f1dc 0c00 	rsbs	ip, ip, #0
   8a456:	eb7e 0000 	sbcs.w	r0, lr, r0
   8a45a:	eb6e 0101 	sbc.w	r1, lr, r1
   8a45e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8a462:	d31b      	bcc.n	8a49c <__adddf3+0x124>
   8a464:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8a468:	d30c      	bcc.n	8a484 <__adddf3+0x10c>
   8a46a:	0849      	lsrs	r1, r1, #1
   8a46c:	ea5f 0030 	movs.w	r0, r0, rrx
   8a470:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8a474:	f104 0401 	add.w	r4, r4, #1
   8a478:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8a47c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8a480:	f080 809a 	bcs.w	8a5b8 <__adddf3+0x240>
   8a484:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8a488:	bf08      	it	eq
   8a48a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8a48e:	f150 0000 	adcs.w	r0, r0, #0
   8a492:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8a496:	ea41 0105 	orr.w	r1, r1, r5
   8a49a:	bd30      	pop	{r4, r5, pc}
   8a49c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8a4a0:	4140      	adcs	r0, r0
   8a4a2:	eb41 0101 	adc.w	r1, r1, r1
   8a4a6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8a4aa:	f1a4 0401 	sub.w	r4, r4, #1
   8a4ae:	d1e9      	bne.n	8a484 <__adddf3+0x10c>
   8a4b0:	f091 0f00 	teq	r1, #0
   8a4b4:	bf04      	itt	eq
   8a4b6:	4601      	moveq	r1, r0
   8a4b8:	2000      	moveq	r0, #0
   8a4ba:	fab1 f381 	clz	r3, r1
   8a4be:	bf08      	it	eq
   8a4c0:	3320      	addeq	r3, #32
   8a4c2:	f1a3 030b 	sub.w	r3, r3, #11
   8a4c6:	f1b3 0220 	subs.w	r2, r3, #32
   8a4ca:	da0c      	bge.n	8a4e6 <__adddf3+0x16e>
   8a4cc:	320c      	adds	r2, #12
   8a4ce:	dd08      	ble.n	8a4e2 <__adddf3+0x16a>
   8a4d0:	f102 0c14 	add.w	ip, r2, #20
   8a4d4:	f1c2 020c 	rsb	r2, r2, #12
   8a4d8:	fa01 f00c 	lsl.w	r0, r1, ip
   8a4dc:	fa21 f102 	lsr.w	r1, r1, r2
   8a4e0:	e00c      	b.n	8a4fc <__adddf3+0x184>
   8a4e2:	f102 0214 	add.w	r2, r2, #20
   8a4e6:	bfd8      	it	le
   8a4e8:	f1c2 0c20 	rsble	ip, r2, #32
   8a4ec:	fa01 f102 	lsl.w	r1, r1, r2
   8a4f0:	fa20 fc0c 	lsr.w	ip, r0, ip
   8a4f4:	bfdc      	itt	le
   8a4f6:	ea41 010c 	orrle.w	r1, r1, ip
   8a4fa:	4090      	lslle	r0, r2
   8a4fc:	1ae4      	subs	r4, r4, r3
   8a4fe:	bfa2      	ittt	ge
   8a500:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8a504:	4329      	orrge	r1, r5
   8a506:	bd30      	popge	{r4, r5, pc}
   8a508:	ea6f 0404 	mvn.w	r4, r4
   8a50c:	3c1f      	subs	r4, #31
   8a50e:	da1c      	bge.n	8a54a <__adddf3+0x1d2>
   8a510:	340c      	adds	r4, #12
   8a512:	dc0e      	bgt.n	8a532 <__adddf3+0x1ba>
   8a514:	f104 0414 	add.w	r4, r4, #20
   8a518:	f1c4 0220 	rsb	r2, r4, #32
   8a51c:	fa20 f004 	lsr.w	r0, r0, r4
   8a520:	fa01 f302 	lsl.w	r3, r1, r2
   8a524:	ea40 0003 	orr.w	r0, r0, r3
   8a528:	fa21 f304 	lsr.w	r3, r1, r4
   8a52c:	ea45 0103 	orr.w	r1, r5, r3
   8a530:	bd30      	pop	{r4, r5, pc}
   8a532:	f1c4 040c 	rsb	r4, r4, #12
   8a536:	f1c4 0220 	rsb	r2, r4, #32
   8a53a:	fa20 f002 	lsr.w	r0, r0, r2
   8a53e:	fa01 f304 	lsl.w	r3, r1, r4
   8a542:	ea40 0003 	orr.w	r0, r0, r3
   8a546:	4629      	mov	r1, r5
   8a548:	bd30      	pop	{r4, r5, pc}
   8a54a:	fa21 f004 	lsr.w	r0, r1, r4
   8a54e:	4629      	mov	r1, r5
   8a550:	bd30      	pop	{r4, r5, pc}
   8a552:	f094 0f00 	teq	r4, #0
   8a556:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8a55a:	bf06      	itte	eq
   8a55c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8a560:	3401      	addeq	r4, #1
   8a562:	3d01      	subne	r5, #1
   8a564:	e74e      	b.n	8a404 <__adddf3+0x8c>
   8a566:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8a56a:	bf18      	it	ne
   8a56c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8a570:	d029      	beq.n	8a5c6 <__adddf3+0x24e>
   8a572:	ea94 0f05 	teq	r4, r5
   8a576:	bf08      	it	eq
   8a578:	ea90 0f02 	teqeq	r0, r2
   8a57c:	d005      	beq.n	8a58a <__adddf3+0x212>
   8a57e:	ea54 0c00 	orrs.w	ip, r4, r0
   8a582:	bf04      	itt	eq
   8a584:	4619      	moveq	r1, r3
   8a586:	4610      	moveq	r0, r2
   8a588:	bd30      	pop	{r4, r5, pc}
   8a58a:	ea91 0f03 	teq	r1, r3
   8a58e:	bf1e      	ittt	ne
   8a590:	2100      	movne	r1, #0
   8a592:	2000      	movne	r0, #0
   8a594:	bd30      	popne	{r4, r5, pc}
   8a596:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8a59a:	d105      	bne.n	8a5a8 <__adddf3+0x230>
   8a59c:	0040      	lsls	r0, r0, #1
   8a59e:	4149      	adcs	r1, r1
   8a5a0:	bf28      	it	cs
   8a5a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8a5a6:	bd30      	pop	{r4, r5, pc}
   8a5a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8a5ac:	bf3c      	itt	cc
   8a5ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8a5b2:	bd30      	popcc	{r4, r5, pc}
   8a5b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a5b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8a5bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8a5c0:	f04f 0000 	mov.w	r0, #0
   8a5c4:	bd30      	pop	{r4, r5, pc}
   8a5c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8a5ca:	bf1a      	itte	ne
   8a5cc:	4619      	movne	r1, r3
   8a5ce:	4610      	movne	r0, r2
   8a5d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8a5d4:	bf1c      	itt	ne
   8a5d6:	460b      	movne	r3, r1
   8a5d8:	4602      	movne	r2, r0
   8a5da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8a5de:	bf06      	itte	eq
   8a5e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8a5e4:	ea91 0f03 	teqeq	r1, r3
   8a5e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8a5ec:	bd30      	pop	{r4, r5, pc}
   8a5ee:	bf00      	nop

0008a5f0 <__aeabi_ui2d>:
   8a5f0:	f090 0f00 	teq	r0, #0
   8a5f4:	bf04      	itt	eq
   8a5f6:	2100      	moveq	r1, #0
   8a5f8:	4770      	bxeq	lr
   8a5fa:	b530      	push	{r4, r5, lr}
   8a5fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8a600:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8a604:	f04f 0500 	mov.w	r5, #0
   8a608:	f04f 0100 	mov.w	r1, #0
   8a60c:	e750      	b.n	8a4b0 <__adddf3+0x138>
   8a60e:	bf00      	nop

0008a610 <__aeabi_i2d>:
   8a610:	f090 0f00 	teq	r0, #0
   8a614:	bf04      	itt	eq
   8a616:	2100      	moveq	r1, #0
   8a618:	4770      	bxeq	lr
   8a61a:	b530      	push	{r4, r5, lr}
   8a61c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8a620:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8a624:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8a628:	bf48      	it	mi
   8a62a:	4240      	negmi	r0, r0
   8a62c:	f04f 0100 	mov.w	r1, #0
   8a630:	e73e      	b.n	8a4b0 <__adddf3+0x138>
   8a632:	bf00      	nop

0008a634 <__aeabi_f2d>:
   8a634:	0042      	lsls	r2, r0, #1
   8a636:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8a63a:	ea4f 0131 	mov.w	r1, r1, rrx
   8a63e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8a642:	bf1f      	itttt	ne
   8a644:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8a648:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8a64c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8a650:	4770      	bxne	lr
   8a652:	f092 0f00 	teq	r2, #0
   8a656:	bf14      	ite	ne
   8a658:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8a65c:	4770      	bxeq	lr
   8a65e:	b530      	push	{r4, r5, lr}
   8a660:	f44f 7460 	mov.w	r4, #896	; 0x380
   8a664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8a66c:	e720      	b.n	8a4b0 <__adddf3+0x138>
   8a66e:	bf00      	nop

0008a670 <__aeabi_ul2d>:
   8a670:	ea50 0201 	orrs.w	r2, r0, r1
   8a674:	bf08      	it	eq
   8a676:	4770      	bxeq	lr
   8a678:	b530      	push	{r4, r5, lr}
   8a67a:	f04f 0500 	mov.w	r5, #0
   8a67e:	e00a      	b.n	8a696 <__aeabi_l2d+0x16>

0008a680 <__aeabi_l2d>:
   8a680:	ea50 0201 	orrs.w	r2, r0, r1
   8a684:	bf08      	it	eq
   8a686:	4770      	bxeq	lr
   8a688:	b530      	push	{r4, r5, lr}
   8a68a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8a68e:	d502      	bpl.n	8a696 <__aeabi_l2d+0x16>
   8a690:	4240      	negs	r0, r0
   8a692:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8a696:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8a69a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8a69e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8a6a2:	f43f aedc 	beq.w	8a45e <__adddf3+0xe6>
   8a6a6:	f04f 0203 	mov.w	r2, #3
   8a6aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8a6ae:	bf18      	it	ne
   8a6b0:	3203      	addne	r2, #3
   8a6b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8a6b6:	bf18      	it	ne
   8a6b8:	3203      	addne	r2, #3
   8a6ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8a6be:	f1c2 0320 	rsb	r3, r2, #32
   8a6c2:	fa00 fc03 	lsl.w	ip, r0, r3
   8a6c6:	fa20 f002 	lsr.w	r0, r0, r2
   8a6ca:	fa01 fe03 	lsl.w	lr, r1, r3
   8a6ce:	ea40 000e 	orr.w	r0, r0, lr
   8a6d2:	fa21 f102 	lsr.w	r1, r1, r2
   8a6d6:	4414      	add	r4, r2
   8a6d8:	e6c1      	b.n	8a45e <__adddf3+0xe6>
   8a6da:	bf00      	nop

0008a6dc <__aeabi_dmul>:
   8a6dc:	b570      	push	{r4, r5, r6, lr}
   8a6de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8a6e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8a6e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8a6ea:	bf1d      	ittte	ne
   8a6ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8a6f0:	ea94 0f0c 	teqne	r4, ip
   8a6f4:	ea95 0f0c 	teqne	r5, ip
   8a6f8:	f000 f8de 	bleq	8a8b8 <__aeabi_dmul+0x1dc>
   8a6fc:	442c      	add	r4, r5
   8a6fe:	ea81 0603 	eor.w	r6, r1, r3
   8a702:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8a706:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8a70a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8a70e:	bf18      	it	ne
   8a710:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8a714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8a718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8a71c:	d038      	beq.n	8a790 <__aeabi_dmul+0xb4>
   8a71e:	fba0 ce02 	umull	ip, lr, r0, r2
   8a722:	f04f 0500 	mov.w	r5, #0
   8a726:	fbe1 e502 	umlal	lr, r5, r1, r2
   8a72a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8a72e:	fbe0 e503 	umlal	lr, r5, r0, r3
   8a732:	f04f 0600 	mov.w	r6, #0
   8a736:	fbe1 5603 	umlal	r5, r6, r1, r3
   8a73a:	f09c 0f00 	teq	ip, #0
   8a73e:	bf18      	it	ne
   8a740:	f04e 0e01 	orrne.w	lr, lr, #1
   8a744:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8a748:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8a74c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8a750:	d204      	bcs.n	8a75c <__aeabi_dmul+0x80>
   8a752:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8a756:	416d      	adcs	r5, r5
   8a758:	eb46 0606 	adc.w	r6, r6, r6
   8a75c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8a760:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8a764:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8a768:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8a76c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8a770:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8a774:	bf88      	it	hi
   8a776:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8a77a:	d81e      	bhi.n	8a7ba <__aeabi_dmul+0xde>
   8a77c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8a780:	bf08      	it	eq
   8a782:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8a786:	f150 0000 	adcs.w	r0, r0, #0
   8a78a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8a78e:	bd70      	pop	{r4, r5, r6, pc}
   8a790:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8a794:	ea46 0101 	orr.w	r1, r6, r1
   8a798:	ea40 0002 	orr.w	r0, r0, r2
   8a79c:	ea81 0103 	eor.w	r1, r1, r3
   8a7a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8a7a4:	bfc2      	ittt	gt
   8a7a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   8a7aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8a7ae:	bd70      	popgt	{r4, r5, r6, pc}
   8a7b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8a7b4:	f04f 0e00 	mov.w	lr, #0
   8a7b8:	3c01      	subs	r4, #1
   8a7ba:	f300 80ab 	bgt.w	8a914 <__aeabi_dmul+0x238>
   8a7be:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8a7c2:	bfde      	ittt	le
   8a7c4:	2000      	movle	r0, #0
   8a7c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8a7ca:	bd70      	pople	{r4, r5, r6, pc}
   8a7cc:	f1c4 0400 	rsb	r4, r4, #0
   8a7d0:	3c20      	subs	r4, #32
   8a7d2:	da35      	bge.n	8a840 <__aeabi_dmul+0x164>
   8a7d4:	340c      	adds	r4, #12
   8a7d6:	dc1b      	bgt.n	8a810 <__aeabi_dmul+0x134>
   8a7d8:	f104 0414 	add.w	r4, r4, #20
   8a7dc:	f1c4 0520 	rsb	r5, r4, #32
   8a7e0:	fa00 f305 	lsl.w	r3, r0, r5
   8a7e4:	fa20 f004 	lsr.w	r0, r0, r4
   8a7e8:	fa01 f205 	lsl.w	r2, r1, r5
   8a7ec:	ea40 0002 	orr.w	r0, r0, r2
   8a7f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8a7f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8a7f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8a7fc:	fa21 f604 	lsr.w	r6, r1, r4
   8a800:	eb42 0106 	adc.w	r1, r2, r6
   8a804:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8a808:	bf08      	it	eq
   8a80a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8a80e:	bd70      	pop	{r4, r5, r6, pc}
   8a810:	f1c4 040c 	rsb	r4, r4, #12
   8a814:	f1c4 0520 	rsb	r5, r4, #32
   8a818:	fa00 f304 	lsl.w	r3, r0, r4
   8a81c:	fa20 f005 	lsr.w	r0, r0, r5
   8a820:	fa01 f204 	lsl.w	r2, r1, r4
   8a824:	ea40 0002 	orr.w	r0, r0, r2
   8a828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8a82c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8a830:	f141 0100 	adc.w	r1, r1, #0
   8a834:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8a838:	bf08      	it	eq
   8a83a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8a83e:	bd70      	pop	{r4, r5, r6, pc}
   8a840:	f1c4 0520 	rsb	r5, r4, #32
   8a844:	fa00 f205 	lsl.w	r2, r0, r5
   8a848:	ea4e 0e02 	orr.w	lr, lr, r2
   8a84c:	fa20 f304 	lsr.w	r3, r0, r4
   8a850:	fa01 f205 	lsl.w	r2, r1, r5
   8a854:	ea43 0302 	orr.w	r3, r3, r2
   8a858:	fa21 f004 	lsr.w	r0, r1, r4
   8a85c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8a860:	fa21 f204 	lsr.w	r2, r1, r4
   8a864:	ea20 0002 	bic.w	r0, r0, r2
   8a868:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8a86c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8a870:	bf08      	it	eq
   8a872:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8a876:	bd70      	pop	{r4, r5, r6, pc}
   8a878:	f094 0f00 	teq	r4, #0
   8a87c:	d10f      	bne.n	8a89e <__aeabi_dmul+0x1c2>
   8a87e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8a882:	0040      	lsls	r0, r0, #1
   8a884:	eb41 0101 	adc.w	r1, r1, r1
   8a888:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8a88c:	bf08      	it	eq
   8a88e:	3c01      	subeq	r4, #1
   8a890:	d0f7      	beq.n	8a882 <__aeabi_dmul+0x1a6>
   8a892:	ea41 0106 	orr.w	r1, r1, r6
   8a896:	f095 0f00 	teq	r5, #0
   8a89a:	bf18      	it	ne
   8a89c:	4770      	bxne	lr
   8a89e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8a8a2:	0052      	lsls	r2, r2, #1
   8a8a4:	eb43 0303 	adc.w	r3, r3, r3
   8a8a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8a8ac:	bf08      	it	eq
   8a8ae:	3d01      	subeq	r5, #1
   8a8b0:	d0f7      	beq.n	8a8a2 <__aeabi_dmul+0x1c6>
   8a8b2:	ea43 0306 	orr.w	r3, r3, r6
   8a8b6:	4770      	bx	lr
   8a8b8:	ea94 0f0c 	teq	r4, ip
   8a8bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8a8c0:	bf18      	it	ne
   8a8c2:	ea95 0f0c 	teqne	r5, ip
   8a8c6:	d00c      	beq.n	8a8e2 <__aeabi_dmul+0x206>
   8a8c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8a8cc:	bf18      	it	ne
   8a8ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8a8d2:	d1d1      	bne.n	8a878 <__aeabi_dmul+0x19c>
   8a8d4:	ea81 0103 	eor.w	r1, r1, r3
   8a8d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8a8dc:	f04f 0000 	mov.w	r0, #0
   8a8e0:	bd70      	pop	{r4, r5, r6, pc}
   8a8e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8a8e6:	bf06      	itte	eq
   8a8e8:	4610      	moveq	r0, r2
   8a8ea:	4619      	moveq	r1, r3
   8a8ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8a8f0:	d019      	beq.n	8a926 <__aeabi_dmul+0x24a>
   8a8f2:	ea94 0f0c 	teq	r4, ip
   8a8f6:	d102      	bne.n	8a8fe <__aeabi_dmul+0x222>
   8a8f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8a8fc:	d113      	bne.n	8a926 <__aeabi_dmul+0x24a>
   8a8fe:	ea95 0f0c 	teq	r5, ip
   8a902:	d105      	bne.n	8a910 <__aeabi_dmul+0x234>
   8a904:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8a908:	bf1c      	itt	ne
   8a90a:	4610      	movne	r0, r2
   8a90c:	4619      	movne	r1, r3
   8a90e:	d10a      	bne.n	8a926 <__aeabi_dmul+0x24a>
   8a910:	ea81 0103 	eor.w	r1, r1, r3
   8a914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8a918:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8a91c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8a920:	f04f 0000 	mov.w	r0, #0
   8a924:	bd70      	pop	{r4, r5, r6, pc}
   8a926:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8a92a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8a92e:	bd70      	pop	{r4, r5, r6, pc}

0008a930 <__aeabi_ddiv>:
   8a930:	b570      	push	{r4, r5, r6, lr}
   8a932:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8a936:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8a93a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8a93e:	bf1d      	ittte	ne
   8a940:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8a944:	ea94 0f0c 	teqne	r4, ip
   8a948:	ea95 0f0c 	teqne	r5, ip
   8a94c:	f000 f8a7 	bleq	8aa9e <__aeabi_ddiv+0x16e>
   8a950:	eba4 0405 	sub.w	r4, r4, r5
   8a954:	ea81 0e03 	eor.w	lr, r1, r3
   8a958:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8a95c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8a960:	f000 8088 	beq.w	8aa74 <__aeabi_ddiv+0x144>
   8a964:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8a968:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8a96c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8a970:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8a974:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8a978:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8a97c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8a980:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8a984:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8a988:	429d      	cmp	r5, r3
   8a98a:	bf08      	it	eq
   8a98c:	4296      	cmpeq	r6, r2
   8a98e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8a992:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8a996:	d202      	bcs.n	8a99e <__aeabi_ddiv+0x6e>
   8a998:	085b      	lsrs	r3, r3, #1
   8a99a:	ea4f 0232 	mov.w	r2, r2, rrx
   8a99e:	1ab6      	subs	r6, r6, r2
   8a9a0:	eb65 0503 	sbc.w	r5, r5, r3
   8a9a4:	085b      	lsrs	r3, r3, #1
   8a9a6:	ea4f 0232 	mov.w	r2, r2, rrx
   8a9aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8a9ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8a9b2:	ebb6 0e02 	subs.w	lr, r6, r2
   8a9b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   8a9ba:	bf22      	ittt	cs
   8a9bc:	1ab6      	subcs	r6, r6, r2
   8a9be:	4675      	movcs	r5, lr
   8a9c0:	ea40 000c 	orrcs.w	r0, r0, ip
   8a9c4:	085b      	lsrs	r3, r3, #1
   8a9c6:	ea4f 0232 	mov.w	r2, r2, rrx
   8a9ca:	ebb6 0e02 	subs.w	lr, r6, r2
   8a9ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   8a9d2:	bf22      	ittt	cs
   8a9d4:	1ab6      	subcs	r6, r6, r2
   8a9d6:	4675      	movcs	r5, lr
   8a9d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8a9dc:	085b      	lsrs	r3, r3, #1
   8a9de:	ea4f 0232 	mov.w	r2, r2, rrx
   8a9e2:	ebb6 0e02 	subs.w	lr, r6, r2
   8a9e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   8a9ea:	bf22      	ittt	cs
   8a9ec:	1ab6      	subcs	r6, r6, r2
   8a9ee:	4675      	movcs	r5, lr
   8a9f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8a9f4:	085b      	lsrs	r3, r3, #1
   8a9f6:	ea4f 0232 	mov.w	r2, r2, rrx
   8a9fa:	ebb6 0e02 	subs.w	lr, r6, r2
   8a9fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   8aa02:	bf22      	ittt	cs
   8aa04:	1ab6      	subcs	r6, r6, r2
   8aa06:	4675      	movcs	r5, lr
   8aa08:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8aa0c:	ea55 0e06 	orrs.w	lr, r5, r6
   8aa10:	d018      	beq.n	8aa44 <__aeabi_ddiv+0x114>
   8aa12:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8aa16:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8aa1a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8aa1e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8aa22:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8aa26:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8aa2a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8aa2e:	d1c0      	bne.n	8a9b2 <__aeabi_ddiv+0x82>
   8aa30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8aa34:	d10b      	bne.n	8aa4e <__aeabi_ddiv+0x11e>
   8aa36:	ea41 0100 	orr.w	r1, r1, r0
   8aa3a:	f04f 0000 	mov.w	r0, #0
   8aa3e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8aa42:	e7b6      	b.n	8a9b2 <__aeabi_ddiv+0x82>
   8aa44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8aa48:	bf04      	itt	eq
   8aa4a:	4301      	orreq	r1, r0
   8aa4c:	2000      	moveq	r0, #0
   8aa4e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8aa52:	bf88      	it	hi
   8aa54:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8aa58:	f63f aeaf 	bhi.w	8a7ba <__aeabi_dmul+0xde>
   8aa5c:	ebb5 0c03 	subs.w	ip, r5, r3
   8aa60:	bf04      	itt	eq
   8aa62:	ebb6 0c02 	subseq.w	ip, r6, r2
   8aa66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8aa6a:	f150 0000 	adcs.w	r0, r0, #0
   8aa6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8aa72:	bd70      	pop	{r4, r5, r6, pc}
   8aa74:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8aa78:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8aa7c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8aa80:	bfc2      	ittt	gt
   8aa82:	ebd4 050c 	rsbsgt	r5, r4, ip
   8aa86:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8aa8a:	bd70      	popgt	{r4, r5, r6, pc}
   8aa8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8aa90:	f04f 0e00 	mov.w	lr, #0
   8aa94:	3c01      	subs	r4, #1
   8aa96:	e690      	b.n	8a7ba <__aeabi_dmul+0xde>
   8aa98:	ea45 0e06 	orr.w	lr, r5, r6
   8aa9c:	e68d      	b.n	8a7ba <__aeabi_dmul+0xde>
   8aa9e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8aaa2:	ea94 0f0c 	teq	r4, ip
   8aaa6:	bf08      	it	eq
   8aaa8:	ea95 0f0c 	teqeq	r5, ip
   8aaac:	f43f af3b 	beq.w	8a926 <__aeabi_dmul+0x24a>
   8aab0:	ea94 0f0c 	teq	r4, ip
   8aab4:	d10a      	bne.n	8aacc <__aeabi_ddiv+0x19c>
   8aab6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8aaba:	f47f af34 	bne.w	8a926 <__aeabi_dmul+0x24a>
   8aabe:	ea95 0f0c 	teq	r5, ip
   8aac2:	f47f af25 	bne.w	8a910 <__aeabi_dmul+0x234>
   8aac6:	4610      	mov	r0, r2
   8aac8:	4619      	mov	r1, r3
   8aaca:	e72c      	b.n	8a926 <__aeabi_dmul+0x24a>
   8aacc:	ea95 0f0c 	teq	r5, ip
   8aad0:	d106      	bne.n	8aae0 <__aeabi_ddiv+0x1b0>
   8aad2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8aad6:	f43f aefd 	beq.w	8a8d4 <__aeabi_dmul+0x1f8>
   8aada:	4610      	mov	r0, r2
   8aadc:	4619      	mov	r1, r3
   8aade:	e722      	b.n	8a926 <__aeabi_dmul+0x24a>
   8aae0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8aae4:	bf18      	it	ne
   8aae6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8aaea:	f47f aec5 	bne.w	8a878 <__aeabi_dmul+0x19c>
   8aaee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8aaf2:	f47f af0d 	bne.w	8a910 <__aeabi_dmul+0x234>
   8aaf6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8aafa:	f47f aeeb 	bne.w	8a8d4 <__aeabi_dmul+0x1f8>
   8aafe:	e712      	b.n	8a926 <__aeabi_dmul+0x24a>

0008ab00 <__aeabi_d2iz>:
   8ab00:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8ab04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8ab08:	d215      	bcs.n	8ab36 <__aeabi_d2iz+0x36>
   8ab0a:	d511      	bpl.n	8ab30 <__aeabi_d2iz+0x30>
   8ab0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8ab10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8ab14:	d912      	bls.n	8ab3c <__aeabi_d2iz+0x3c>
   8ab16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8ab1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8ab1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8ab22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8ab26:	fa23 f002 	lsr.w	r0, r3, r2
   8ab2a:	bf18      	it	ne
   8ab2c:	4240      	negne	r0, r0
   8ab2e:	4770      	bx	lr
   8ab30:	f04f 0000 	mov.w	r0, #0
   8ab34:	4770      	bx	lr
   8ab36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8ab3a:	d105      	bne.n	8ab48 <__aeabi_d2iz+0x48>
   8ab3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8ab40:	bf08      	it	eq
   8ab42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8ab46:	4770      	bx	lr
   8ab48:	f04f 0000 	mov.w	r0, #0
   8ab4c:	4770      	bx	lr
   8ab4e:	bf00      	nop

0008ab50 <__aeabi_d2uiz>:
   8ab50:	004a      	lsls	r2, r1, #1
   8ab52:	d211      	bcs.n	8ab78 <__aeabi_d2uiz+0x28>
   8ab54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8ab58:	d211      	bcs.n	8ab7e <__aeabi_d2uiz+0x2e>
   8ab5a:	d50d      	bpl.n	8ab78 <__aeabi_d2uiz+0x28>
   8ab5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8ab60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8ab64:	d40e      	bmi.n	8ab84 <__aeabi_d2uiz+0x34>
   8ab66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8ab6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8ab6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8ab72:	fa23 f002 	lsr.w	r0, r3, r2
   8ab76:	4770      	bx	lr
   8ab78:	f04f 0000 	mov.w	r0, #0
   8ab7c:	4770      	bx	lr
   8ab7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8ab82:	d102      	bne.n	8ab8a <__aeabi_d2uiz+0x3a>
   8ab84:	f04f 30ff 	mov.w	r0, #4294967295
   8ab88:	4770      	bx	lr
   8ab8a:	f04f 0000 	mov.w	r0, #0
   8ab8e:	4770      	bx	lr

0008ab90 <__register_exitproc>:
   8ab90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8ab94:	4698      	mov	r8, r3
   8ab96:	4b23      	ldr	r3, [pc, #140]	; (8ac24 <__register_exitproc+0x94>)
   8ab98:	4606      	mov	r6, r0
   8ab9a:	681c      	ldr	r4, [r3, #0]
   8ab9c:	460f      	mov	r7, r1
   8ab9e:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   8aba2:	4691      	mov	r9, r2
   8aba4:	b918      	cbnz	r0, 8abae <__register_exitproc+0x1e>
   8aba6:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   8abaa:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   8abae:	6841      	ldr	r1, [r0, #4]
   8abb0:	291f      	cmp	r1, #31
   8abb2:	dd16      	ble.n	8abe2 <__register_exitproc+0x52>
   8abb4:	481c      	ldr	r0, [pc, #112]	; (8ac28 <__register_exitproc+0x98>)
   8abb6:	b918      	cbnz	r0, 8abc0 <__register_exitproc+0x30>
   8abb8:	f04f 30ff 	mov.w	r0, #4294967295
   8abbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8abc0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8abc4:	f3af 8000 	nop.w
   8abc8:	2800      	cmp	r0, #0
   8abca:	d0f5      	beq.n	8abb8 <__register_exitproc+0x28>
   8abcc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   8abd0:	2500      	movs	r5, #0
   8abd2:	6045      	str	r5, [r0, #4]
   8abd4:	6002      	str	r2, [r0, #0]
   8abd6:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   8abda:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   8abde:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   8abe2:	b1b6      	cbz	r6, 8ac12 <__register_exitproc+0x82>
   8abe4:	6844      	ldr	r4, [r0, #4]
   8abe6:	2201      	movs	r2, #1
   8abe8:	fa02 f204 	lsl.w	r2, r2, r4
   8abec:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   8abf0:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   8abf4:	4311      	orrs	r1, r2
   8abf6:	2e02      	cmp	r6, #2
   8abf8:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   8abfc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   8ac00:	461c      	mov	r4, r3
   8ac02:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   8ac06:	d104      	bne.n	8ac12 <__register_exitproc+0x82>
   8ac08:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   8ac0c:	431a      	orrs	r2, r3
   8ac0e:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   8ac12:	6841      	ldr	r1, [r0, #4]
   8ac14:	1c8b      	adds	r3, r1, #2
   8ac16:	1c4a      	adds	r2, r1, #1
   8ac18:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   8ac1c:	6042      	str	r2, [r0, #4]
   8ac1e:	2000      	movs	r0, #0
   8ac20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8ac24:	0008dea0 	.word	0x0008dea0
   8ac28:	00000000 	.word	0x00000000

0008ac2c <__libc_fini_array>:
   8ac2c:	b570      	push	{r4, r5, r6, lr}
   8ac2e:	4b08      	ldr	r3, [pc, #32]	; (8ac50 <__libc_fini_array+0x24>)
   8ac30:	4c08      	ldr	r4, [pc, #32]	; (8ac54 <__libc_fini_array+0x28>)
   8ac32:	2500      	movs	r5, #0
   8ac34:	1ae0      	subs	r0, r4, r3
   8ac36:	1084      	asrs	r4, r0, #2
   8ac38:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   8ac3c:	3d04      	subs	r5, #4
   8ac3e:	b11c      	cbz	r4, 8ac48 <__libc_fini_array+0x1c>
   8ac40:	5972      	ldr	r2, [r6, r5]
   8ac42:	4790      	blx	r2
   8ac44:	3c01      	subs	r4, #1
   8ac46:	e7f9      	b.n	8ac3c <__libc_fini_array+0x10>
   8ac48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   8ac4c:	f003 b966 	b.w	8df1c <_fini>
   8ac50:	0008df28 	.word	0x0008df28
   8ac54:	0008df2c 	.word	0x0008df2c

0008ac58 <__libc_init_array>:
   8ac58:	b538      	push	{r3, r4, r5, lr}
   8ac5a:	4d0e      	ldr	r5, [pc, #56]	; (8ac94 <__libc_init_array+0x3c>)
   8ac5c:	4b0e      	ldr	r3, [pc, #56]	; (8ac98 <__libc_init_array+0x40>)
   8ac5e:	2400      	movs	r4, #0
   8ac60:	1ae8      	subs	r0, r5, r3
   8ac62:	1085      	asrs	r5, r0, #2
   8ac64:	42ac      	cmp	r4, r5
   8ac66:	d005      	beq.n	8ac74 <__libc_init_array+0x1c>
   8ac68:	490b      	ldr	r1, [pc, #44]	; (8ac98 <__libc_init_array+0x40>)
   8ac6a:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   8ac6e:	4790      	blx	r2
   8ac70:	3401      	adds	r4, #1
   8ac72:	e7f7      	b.n	8ac64 <__libc_init_array+0xc>
   8ac74:	f003 f948 	bl	8df08 <_init>
   8ac78:	4908      	ldr	r1, [pc, #32]	; (8ac9c <__libc_init_array+0x44>)
   8ac7a:	4a09      	ldr	r2, [pc, #36]	; (8aca0 <__libc_init_array+0x48>)
   8ac7c:	1a54      	subs	r4, r2, r1
   8ac7e:	10a5      	asrs	r5, r4, #2
   8ac80:	2400      	movs	r4, #0
   8ac82:	42ac      	cmp	r4, r5
   8ac84:	d005      	beq.n	8ac92 <__libc_init_array+0x3a>
   8ac86:	4b05      	ldr	r3, [pc, #20]	; (8ac9c <__libc_init_array+0x44>)
   8ac88:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8ac8c:	4780      	blx	r0
   8ac8e:	3401      	adds	r4, #1
   8ac90:	e7f7      	b.n	8ac82 <__libc_init_array+0x2a>
   8ac92:	bd38      	pop	{r3, r4, r5, pc}
   8ac94:	0008df14 	.word	0x0008df14
   8ac98:	0008df14 	.word	0x0008df14
   8ac9c:	0008df14 	.word	0x0008df14
   8aca0:	0008df1c 	.word	0x0008df1c

0008aca4 <memcpy>:
   8aca4:	b510      	push	{r4, lr}
   8aca6:	2300      	movs	r3, #0
   8aca8:	4293      	cmp	r3, r2
   8acaa:	d003      	beq.n	8acb4 <memcpy+0x10>
   8acac:	5ccc      	ldrb	r4, [r1, r3]
   8acae:	54c4      	strb	r4, [r0, r3]
   8acb0:	3301      	adds	r3, #1
   8acb2:	e7f9      	b.n	8aca8 <memcpy+0x4>
   8acb4:	bd10      	pop	{r4, pc}

0008acb6 <memmove>:
   8acb6:	4281      	cmp	r1, r0
   8acb8:	b570      	push	{r4, r5, r6, lr}
   8acba:	d20e      	bcs.n	8acda <memmove+0x24>
   8acbc:	188c      	adds	r4, r1, r2
   8acbe:	42a0      	cmp	r0, r4
   8acc0:	d20b      	bcs.n	8acda <memmove+0x24>
   8acc2:	1885      	adds	r5, r0, r2
   8acc4:	4613      	mov	r3, r2
   8acc6:	f113 33ff 	adds.w	r3, r3, #4294967295
   8acca:	d305      	bcc.n	8acd8 <memmove+0x22>
   8accc:	4251      	negs	r1, r2
   8acce:	1866      	adds	r6, r4, r1
   8acd0:	5cf6      	ldrb	r6, [r6, r3]
   8acd2:	1869      	adds	r1, r5, r1
   8acd4:	54ce      	strb	r6, [r1, r3]
   8acd6:	e7f6      	b.n	8acc6 <memmove+0x10>
   8acd8:	bd70      	pop	{r4, r5, r6, pc}
   8acda:	2300      	movs	r3, #0
   8acdc:	4293      	cmp	r3, r2
   8acde:	d003      	beq.n	8ace8 <memmove+0x32>
   8ace0:	5ccc      	ldrb	r4, [r1, r3]
   8ace2:	54c4      	strb	r4, [r0, r3]
   8ace4:	3301      	adds	r3, #1
   8ace6:	e7f9      	b.n	8acdc <memmove+0x26>
   8ace8:	bd70      	pop	{r4, r5, r6, pc}
	...

0008acec <_snprintf_r>:
   8acec:	b408      	push	{r3}
   8acee:	b530      	push	{r4, r5, lr}
   8acf0:	1e14      	subs	r4, r2, #0
   8acf2:	b09c      	sub	sp, #112	; 0x70
   8acf4:	4605      	mov	r5, r0
   8acf6:	da04      	bge.n	8ad02 <_snprintf_r+0x16>
   8acf8:	208b      	movs	r0, #139	; 0x8b
   8acfa:	6028      	str	r0, [r5, #0]
   8acfc:	f04f 30ff 	mov.w	r0, #4294967295
   8ad00:	e01e      	b.n	8ad40 <_snprintf_r+0x54>
   8ad02:	f44f 7302 	mov.w	r3, #520	; 0x208
   8ad06:	f8ad 3014 	strh.w	r3, [sp, #20]
   8ad0a:	9102      	str	r1, [sp, #8]
   8ad0c:	9106      	str	r1, [sp, #24]
   8ad0e:	d001      	beq.n	8ad14 <_snprintf_r+0x28>
   8ad10:	1e60      	subs	r0, r4, #1
   8ad12:	e000      	b.n	8ad16 <_snprintf_r+0x2a>
   8ad14:	4620      	mov	r0, r4
   8ad16:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8ad1a:	ab20      	add	r3, sp, #128	; 0x80
   8ad1c:	9004      	str	r0, [sp, #16]
   8ad1e:	9007      	str	r0, [sp, #28]
   8ad20:	f8ad 1016 	strh.w	r1, [sp, #22]
   8ad24:	4628      	mov	r0, r5
   8ad26:	a902      	add	r1, sp, #8
   8ad28:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   8ad2a:	9301      	str	r3, [sp, #4]
   8ad2c:	f000 f922 	bl	8af74 <_svfprintf_r>
   8ad30:	1c43      	adds	r3, r0, #1
   8ad32:	da01      	bge.n	8ad38 <_snprintf_r+0x4c>
   8ad34:	228b      	movs	r2, #139	; 0x8b
   8ad36:	602a      	str	r2, [r5, #0]
   8ad38:	b114      	cbz	r4, 8ad40 <_snprintf_r+0x54>
   8ad3a:	9b02      	ldr	r3, [sp, #8]
   8ad3c:	2100      	movs	r1, #0
   8ad3e:	7019      	strb	r1, [r3, #0]
   8ad40:	b01c      	add	sp, #112	; 0x70
   8ad42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8ad46:	b001      	add	sp, #4
   8ad48:	4770      	bx	lr

0008ad4a <snprintf>:
   8ad4a:	b40c      	push	{r2, r3}
   8ad4c:	b530      	push	{r4, r5, lr}
   8ad4e:	4b17      	ldr	r3, [pc, #92]	; (8adac <snprintf+0x62>)
   8ad50:	1e0c      	subs	r4, r1, #0
   8ad52:	b09d      	sub	sp, #116	; 0x74
   8ad54:	681d      	ldr	r5, [r3, #0]
   8ad56:	da04      	bge.n	8ad62 <snprintf+0x18>
   8ad58:	208b      	movs	r0, #139	; 0x8b
   8ad5a:	6028      	str	r0, [r5, #0]
   8ad5c:	f04f 30ff 	mov.w	r0, #4294967295
   8ad60:	e01e      	b.n	8ada0 <snprintf+0x56>
   8ad62:	f44f 7102 	mov.w	r1, #520	; 0x208
   8ad66:	f8ad 1014 	strh.w	r1, [sp, #20]
   8ad6a:	9002      	str	r0, [sp, #8]
   8ad6c:	9006      	str	r0, [sp, #24]
   8ad6e:	d001      	beq.n	8ad74 <snprintf+0x2a>
   8ad70:	1e60      	subs	r0, r4, #1
   8ad72:	e000      	b.n	8ad76 <snprintf+0x2c>
   8ad74:	4620      	mov	r0, r4
   8ad76:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8ad7a:	9004      	str	r0, [sp, #16]
   8ad7c:	9007      	str	r0, [sp, #28]
   8ad7e:	f8ad 2016 	strh.w	r2, [sp, #22]
   8ad82:	ab21      	add	r3, sp, #132	; 0x84
   8ad84:	9a20      	ldr	r2, [sp, #128]	; 0x80
   8ad86:	4628      	mov	r0, r5
   8ad88:	a902      	add	r1, sp, #8
   8ad8a:	9301      	str	r3, [sp, #4]
   8ad8c:	f000 f8f2 	bl	8af74 <_svfprintf_r>
   8ad90:	1c42      	adds	r2, r0, #1
   8ad92:	da01      	bge.n	8ad98 <snprintf+0x4e>
   8ad94:	238b      	movs	r3, #139	; 0x8b
   8ad96:	602b      	str	r3, [r5, #0]
   8ad98:	b114      	cbz	r4, 8ada0 <snprintf+0x56>
   8ad9a:	9a02      	ldr	r2, [sp, #8]
   8ad9c:	2100      	movs	r1, #0
   8ad9e:	7011      	strb	r1, [r2, #0]
   8ada0:	b01d      	add	sp, #116	; 0x74
   8ada2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8ada6:	b002      	add	sp, #8
   8ada8:	4770      	bx	lr
   8adaa:	bf00      	nop
   8adac:	200702a0 	.word	0x200702a0

0008adb0 <strlen>:
   8adb0:	4603      	mov	r3, r0
   8adb2:	f813 2b01 	ldrb.w	r2, [r3], #1
   8adb6:	2a00      	cmp	r2, #0
   8adb8:	d1fb      	bne.n	8adb2 <strlen+0x2>
   8adba:	1a18      	subs	r0, r3, r0
   8adbc:	3801      	subs	r0, #1
   8adbe:	4770      	bx	lr

0008adc0 <strncasecmp>:
   8adc0:	4b0f      	ldr	r3, [pc, #60]	; (8ae00 <strncasecmp+0x40>)
   8adc2:	b5f0      	push	{r4, r5, r6, r7, lr}
   8adc4:	681e      	ldr	r6, [r3, #0]
   8adc6:	2300      	movs	r3, #0
   8adc8:	4293      	cmp	r3, r2
   8adca:	d015      	beq.n	8adf8 <strncasecmp+0x38>
   8adcc:	5cc5      	ldrb	r5, [r0, r3]
   8adce:	1974      	adds	r4, r6, r5
   8add0:	7867      	ldrb	r7, [r4, #1]
   8add2:	f007 0403 	and.w	r4, r7, #3
   8add6:	2c01      	cmp	r4, #1
   8add8:	5ccc      	ldrb	r4, [r1, r3]
   8adda:	bf08      	it	eq
   8addc:	3520      	addeq	r5, #32
   8adde:	1937      	adds	r7, r6, r4
   8ade0:	787f      	ldrb	r7, [r7, #1]
   8ade2:	f007 0703 	and.w	r7, r7, #3
   8ade6:	2f01      	cmp	r7, #1
   8ade8:	bf08      	it	eq
   8adea:	3420      	addeq	r4, #32
   8adec:	1b2d      	subs	r5, r5, r4
   8adee:	d104      	bne.n	8adfa <strncasecmp+0x3a>
   8adf0:	3301      	adds	r3, #1
   8adf2:	2c00      	cmp	r4, #0
   8adf4:	d1e8      	bne.n	8adc8 <strncasecmp+0x8>
   8adf6:	e000      	b.n	8adfa <strncasecmp+0x3a>
   8adf8:	2500      	movs	r5, #0
   8adfa:	4628      	mov	r0, r5
   8adfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8adfe:	bf00      	nop
   8ae00:	2007029c 	.word	0x2007029c

0008ae04 <strncmp>:
   8ae04:	b570      	push	{r4, r5, r6, lr}
   8ae06:	b192      	cbz	r2, 8ae2e <strncmp+0x2a>
   8ae08:	460b      	mov	r3, r1
   8ae0a:	4605      	mov	r5, r0
   8ae0c:	b91a      	cbnz	r2, 8ae16 <strncmp+0x12>
   8ae0e:	7828      	ldrb	r0, [r5, #0]
   8ae10:	7819      	ldrb	r1, [r3, #0]
   8ae12:	1a40      	subs	r0, r0, r1
   8ae14:	bd70      	pop	{r4, r5, r6, pc}
   8ae16:	f810 6b01 	ldrb.w	r6, [r0], #1
   8ae1a:	781c      	ldrb	r4, [r3, #0]
   8ae1c:	3101      	adds	r1, #1
   8ae1e:	42b4      	cmp	r4, r6
   8ae20:	d1f5      	bne.n	8ae0e <strncmp+0xa>
   8ae22:	2a01      	cmp	r2, #1
   8ae24:	d0f3      	beq.n	8ae0e <strncmp+0xa>
   8ae26:	3a01      	subs	r2, #1
   8ae28:	2c00      	cmp	r4, #0
   8ae2a:	d1ed      	bne.n	8ae08 <strncmp+0x4>
   8ae2c:	e7ef      	b.n	8ae0e <strncmp+0xa>
   8ae2e:	4610      	mov	r0, r2
   8ae30:	bd70      	pop	{r4, r5, r6, pc}

0008ae32 <strnlen>:
   8ae32:	b510      	push	{r4, lr}
   8ae34:	4603      	mov	r3, r0
   8ae36:	1841      	adds	r1, r0, r1
   8ae38:	428b      	cmp	r3, r1
   8ae3a:	461a      	mov	r2, r3
   8ae3c:	d101      	bne.n	8ae42 <strnlen+0x10>
   8ae3e:	1a10      	subs	r0, r2, r0
   8ae40:	bd10      	pop	{r4, pc}
   8ae42:	7814      	ldrb	r4, [r2, #0]
   8ae44:	3301      	adds	r3, #1
   8ae46:	2c00      	cmp	r4, #0
   8ae48:	d1f6      	bne.n	8ae38 <strnlen+0x6>
   8ae4a:	e7f8      	b.n	8ae3e <strnlen+0xc>

0008ae4c <_strtol_r>:
   8ae4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ae50:	9001      	str	r0, [sp, #4]
   8ae52:	4840      	ldr	r0, [pc, #256]	; (8af54 <_strtol_r+0x108>)
   8ae54:	f8d0 9000 	ldr.w	r9, [r0]
   8ae58:	4608      	mov	r0, r1
   8ae5a:	4604      	mov	r4, r0
   8ae5c:	f814 5b01 	ldrb.w	r5, [r4], #1
   8ae60:	eb09 0605 	add.w	r6, r9, r5
   8ae64:	7877      	ldrb	r7, [r6, #1]
   8ae66:	4620      	mov	r0, r4
   8ae68:	f007 0608 	and.w	r6, r7, #8
   8ae6c:	b2f7      	uxtb	r7, r6
   8ae6e:	2f00      	cmp	r7, #0
   8ae70:	d1f3      	bne.n	8ae5a <_strtol_r+0xe>
   8ae72:	2d2d      	cmp	r5, #45	; 0x2d
   8ae74:	d103      	bne.n	8ae7e <_strtol_r+0x32>
   8ae76:	f814 5b01 	ldrb.w	r5, [r4], #1
   8ae7a:	2701      	movs	r7, #1
   8ae7c:	e004      	b.n	8ae88 <_strtol_r+0x3c>
   8ae7e:	2d2b      	cmp	r5, #43	; 0x2b
   8ae80:	bf04      	itt	eq
   8ae82:	4624      	moveq	r4, r4
   8ae84:	f814 5b01 	ldrbeq.w	r5, [r4], #1
   8ae88:	2b00      	cmp	r3, #0
   8ae8a:	d05c      	beq.n	8af46 <_strtol_r+0xfa>
   8ae8c:	2b10      	cmp	r3, #16
   8ae8e:	d107      	bne.n	8aea0 <_strtol_r+0x54>
   8ae90:	2d30      	cmp	r5, #48	; 0x30
   8ae92:	d105      	bne.n	8aea0 <_strtol_r+0x54>
   8ae94:	7825      	ldrb	r5, [r4, #0]
   8ae96:	2d78      	cmp	r5, #120	; 0x78
   8ae98:	d14e      	bne.n	8af38 <_strtol_r+0xec>
   8ae9a:	7865      	ldrb	r5, [r4, #1]
   8ae9c:	2310      	movs	r3, #16
   8ae9e:	3402      	adds	r4, #2
   8aea0:	2f00      	cmp	r7, #0
   8aea2:	bf0c      	ite	eq
   8aea4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8aea8:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   8aeac:	fbb0 faf3 	udiv	sl, r0, r3
   8aeb0:	2600      	movs	r6, #0
   8aeb2:	fb03 081a 	mls	r8, r3, sl, r0
   8aeb6:	4630      	mov	r0, r6
   8aeb8:	eb09 0c05 	add.w	ip, r9, r5
   8aebc:	f89c c001 	ldrb.w	ip, [ip, #1]
   8aec0:	f00c 0b04 	and.w	fp, ip, #4
   8aec4:	fa5f fb8b 	uxtb.w	fp, fp
   8aec8:	f1bb 0f00 	cmp.w	fp, #0
   8aecc:	d001      	beq.n	8aed2 <_strtol_r+0x86>
   8aece:	3d30      	subs	r5, #48	; 0x30
   8aed0:	e00b      	b.n	8aeea <_strtol_r+0x9e>
   8aed2:	f01c 0c03 	ands.w	ip, ip, #3
   8aed6:	d01b      	beq.n	8af10 <_strtol_r+0xc4>
   8aed8:	f1bc 0f01 	cmp.w	ip, #1
   8aedc:	bf14      	ite	ne
   8aede:	f04f 0c57 	movne.w	ip, #87	; 0x57
   8aee2:	f04f 0c37 	moveq.w	ip, #55	; 0x37
   8aee6:	ebcc 0505 	rsb	r5, ip, r5
   8aeea:	429d      	cmp	r5, r3
   8aeec:	da10      	bge.n	8af10 <_strtol_r+0xc4>
   8aeee:	f1b6 3fff 	cmp.w	r6, #4294967295
   8aef2:	d00a      	beq.n	8af0a <_strtol_r+0xbe>
   8aef4:	4550      	cmp	r0, sl
   8aef6:	d806      	bhi.n	8af06 <_strtol_r+0xba>
   8aef8:	d101      	bne.n	8aefe <_strtol_r+0xb2>
   8aefa:	4545      	cmp	r5, r8
   8aefc:	dc03      	bgt.n	8af06 <_strtol_r+0xba>
   8aefe:	fb03 5000 	mla	r0, r3, r0, r5
   8af02:	2601      	movs	r6, #1
   8af04:	e001      	b.n	8af0a <_strtol_r+0xbe>
   8af06:	f04f 36ff 	mov.w	r6, #4294967295
   8af0a:	f814 5b01 	ldrb.w	r5, [r4], #1
   8af0e:	e7d3      	b.n	8aeb8 <_strtol_r+0x6c>
   8af10:	1c73      	adds	r3, r6, #1
   8af12:	d10a      	bne.n	8af2a <_strtol_r+0xde>
   8af14:	2f00      	cmp	r7, #0
   8af16:	9901      	ldr	r1, [sp, #4]
   8af18:	bf0c      	ite	eq
   8af1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8af1e:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   8af22:	2322      	movs	r3, #34	; 0x22
   8af24:	600b      	str	r3, [r1, #0]
   8af26:	b922      	cbnz	r2, 8af32 <_strtol_r+0xe6>
   8af28:	e011      	b.n	8af4e <_strtol_r+0x102>
   8af2a:	b107      	cbz	r7, 8af2e <_strtol_r+0xe2>
   8af2c:	4240      	negs	r0, r0
   8af2e:	b172      	cbz	r2, 8af4e <_strtol_r+0x102>
   8af30:	b106      	cbz	r6, 8af34 <_strtol_r+0xe8>
   8af32:	1e61      	subs	r1, r4, #1
   8af34:	6011      	str	r1, [r2, #0]
   8af36:	e00a      	b.n	8af4e <_strtol_r+0x102>
   8af38:	2d58      	cmp	r5, #88	; 0x58
   8af3a:	d0ae      	beq.n	8ae9a <_strtol_r+0x4e>
   8af3c:	2530      	movs	r5, #48	; 0x30
   8af3e:	2b00      	cmp	r3, #0
   8af40:	d1ae      	bne.n	8aea0 <_strtol_r+0x54>
   8af42:	2308      	movs	r3, #8
   8af44:	e7ac      	b.n	8aea0 <_strtol_r+0x54>
   8af46:	2d30      	cmp	r5, #48	; 0x30
   8af48:	d0a4      	beq.n	8ae94 <_strtol_r+0x48>
   8af4a:	230a      	movs	r3, #10
   8af4c:	e7a8      	b.n	8aea0 <_strtol_r+0x54>
   8af4e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8af52:	bf00      	nop
   8af54:	2007029c 	.word	0x2007029c

0008af58 <strtol>:
   8af58:	b530      	push	{r4, r5, lr}
   8af5a:	4613      	mov	r3, r2
   8af5c:	4a04      	ldr	r2, [pc, #16]	; (8af70 <strtol+0x18>)
   8af5e:	4605      	mov	r5, r0
   8af60:	460c      	mov	r4, r1
   8af62:	6810      	ldr	r0, [r2, #0]
   8af64:	4629      	mov	r1, r5
   8af66:	4622      	mov	r2, r4
   8af68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8af6c:	f7ff bf6e 	b.w	8ae4c <_strtol_r>
   8af70:	200702a0 	.word	0x200702a0

0008af74 <_svfprintf_r>:
   8af74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8af78:	461e      	mov	r6, r3
   8af7a:	898b      	ldrh	r3, [r1, #12]
   8af7c:	4689      	mov	r9, r1
   8af7e:	f003 0180 	and.w	r1, r3, #128	; 0x80
   8af82:	4614      	mov	r4, r2
   8af84:	b20a      	sxth	r2, r1
   8af86:	b0a9      	sub	sp, #164	; 0xa4
   8af88:	4683      	mov	fp, r0
   8af8a:	b19a      	cbz	r2, 8afb4 <_svfprintf_r+0x40>
   8af8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8af90:	b983      	cbnz	r3, 8afb4 <_svfprintf_r+0x40>
   8af92:	2140      	movs	r1, #64	; 0x40
   8af94:	f000 fcfe 	bl	8b994 <_malloc_r>
   8af98:	f8c9 0000 	str.w	r0, [r9]
   8af9c:	f8c9 0010 	str.w	r0, [r9, #16]
   8afa0:	b928      	cbnz	r0, 8afae <_svfprintf_r+0x3a>
   8afa2:	220c      	movs	r2, #12
   8afa4:	f8cb 2000 	str.w	r2, [fp]
   8afa8:	f04f 30ff 	mov.w	r0, #4294967295
   8afac:	e3da      	b.n	8b764 <_svfprintf_r+0x7f0>
   8afae:	2040      	movs	r0, #64	; 0x40
   8afb0:	f8c9 0014 	str.w	r0, [r9, #20]
   8afb4:	2100      	movs	r1, #0
   8afb6:	ad18      	add	r5, sp, #96	; 0x60
   8afb8:	950b      	str	r5, [sp, #44]	; 0x2c
   8afba:	910d      	str	r1, [sp, #52]	; 0x34
   8afbc:	910c      	str	r1, [sp, #48]	; 0x30
   8afbe:	9401      	str	r4, [sp, #4]
   8afc0:	9105      	str	r1, [sp, #20]
   8afc2:	9104      	str	r1, [sp, #16]
   8afc4:	46a8      	mov	r8, r5
   8afc6:	9b01      	ldr	r3, [sp, #4]
   8afc8:	461c      	mov	r4, r3
   8afca:	f813 2b01 	ldrb.w	r2, [r3], #1
   8afce:	b91a      	cbnz	r2, 8afd8 <_svfprintf_r+0x64>
   8afd0:	9801      	ldr	r0, [sp, #4]
   8afd2:	1a25      	subs	r5, r4, r0
   8afd4:	d103      	bne.n	8afde <_svfprintf_r+0x6a>
   8afd6:	e01d      	b.n	8b014 <_svfprintf_r+0xa0>
   8afd8:	2a25      	cmp	r2, #37	; 0x25
   8afda:	d1f5      	bne.n	8afc8 <_svfprintf_r+0x54>
   8afdc:	e7f8      	b.n	8afd0 <_svfprintf_r+0x5c>
   8afde:	9a01      	ldr	r2, [sp, #4]
   8afe0:	990d      	ldr	r1, [sp, #52]	; 0x34
   8afe2:	e888 0024 	stmia.w	r8, {r2, r5}
   8afe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8afe8:	194b      	adds	r3, r1, r5
   8afea:	1c50      	adds	r0, r2, #1
   8afec:	2807      	cmp	r0, #7
   8afee:	930d      	str	r3, [sp, #52]	; 0x34
   8aff0:	900c      	str	r0, [sp, #48]	; 0x30
   8aff2:	dc02      	bgt.n	8affa <_svfprintf_r+0x86>
   8aff4:	f108 0808 	add.w	r8, r8, #8
   8aff8:	e009      	b.n	8b00e <_svfprintf_r+0x9a>
   8affa:	4658      	mov	r0, fp
   8affc:	4649      	mov	r1, r9
   8affe:	aa0b      	add	r2, sp, #44	; 0x2c
   8b000:	f001 f858 	bl	8c0b4 <__ssprint_r>
   8b004:	2800      	cmp	r0, #0
   8b006:	f040 83a2 	bne.w	8b74e <_svfprintf_r+0x7da>
   8b00a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b00e:	9904      	ldr	r1, [sp, #16]
   8b010:	194b      	adds	r3, r1, r5
   8b012:	9304      	str	r3, [sp, #16]
   8b014:	7822      	ldrb	r2, [r4, #0]
   8b016:	2a00      	cmp	r2, #0
   8b018:	f000 8392 	beq.w	8b740 <_svfprintf_r+0x7cc>
   8b01c:	2200      	movs	r2, #0
   8b01e:	3401      	adds	r4, #1
   8b020:	9401      	str	r4, [sp, #4]
   8b022:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b026:	f04f 3cff 	mov.w	ip, #4294967295
   8b02a:	9203      	str	r2, [sp, #12]
   8b02c:	4617      	mov	r7, r2
   8b02e:	9801      	ldr	r0, [sp, #4]
   8b030:	f810 3b01 	ldrb.w	r3, [r0], #1
   8b034:	9001      	str	r0, [sp, #4]
   8b036:	2b63      	cmp	r3, #99	; 0x63
   8b038:	f000 80b3 	beq.w	8b1a2 <_svfprintf_r+0x22e>
   8b03c:	dc33      	bgt.n	8b0a6 <_svfprintf_r+0x132>
   8b03e:	2b39      	cmp	r3, #57	; 0x39
   8b040:	dc1a      	bgt.n	8b078 <_svfprintf_r+0x104>
   8b042:	2b31      	cmp	r3, #49	; 0x31
   8b044:	f280 8091 	bge.w	8b16a <_svfprintf_r+0x1f6>
   8b048:	2b2b      	cmp	r3, #43	; 0x2b
   8b04a:	d101      	bne.n	8b050 <_svfprintf_r+0xdc>
   8b04c:	461a      	mov	r2, r3
   8b04e:	e7ee      	b.n	8b02e <_svfprintf_r+0xba>
   8b050:	dc0a      	bgt.n	8b068 <_svfprintf_r+0xf4>
   8b052:	2b23      	cmp	r3, #35	; 0x23
   8b054:	d055      	beq.n	8b102 <_svfprintf_r+0x18e>
   8b056:	2b2a      	cmp	r3, #42	; 0x2a
   8b058:	d056      	beq.n	8b108 <_svfprintf_r+0x194>
   8b05a:	2b20      	cmp	r3, #32
   8b05c:	f040 81f5 	bne.w	8b44a <_svfprintf_r+0x4d6>
   8b060:	2a00      	cmp	r2, #0
   8b062:	bf08      	it	eq
   8b064:	2220      	moveq	r2, #32
   8b066:	e7e2      	b.n	8b02e <_svfprintf_r+0xba>
   8b068:	2b2e      	cmp	r3, #46	; 0x2e
   8b06a:	d058      	beq.n	8b11e <_svfprintf_r+0x1aa>
   8b06c:	2b30      	cmp	r3, #48	; 0x30
   8b06e:	d079      	beq.n	8b164 <_svfprintf_r+0x1f0>
   8b070:	2b2d      	cmp	r3, #45	; 0x2d
   8b072:	f040 81ea 	bne.w	8b44a <_svfprintf_r+0x4d6>
   8b076:	e04f      	b.n	8b118 <_svfprintf_r+0x1a4>
   8b078:	2b4f      	cmp	r3, #79	; 0x4f
   8b07a:	f000 80de 	beq.w	8b23a <_svfprintf_r+0x2c6>
   8b07e:	dc07      	bgt.n	8b090 <_svfprintf_r+0x11c>
   8b080:	2b44      	cmp	r3, #68	; 0x44
   8b082:	f040 81e2 	bne.w	8b44a <_svfprintf_r+0x4d6>
   8b086:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b08a:	f047 0710 	orr.w	r7, r7, #16
   8b08e:	e090      	b.n	8b1b2 <_svfprintf_r+0x23e>
   8b090:	2b55      	cmp	r3, #85	; 0x55
   8b092:	f000 811f 	beq.w	8b2d4 <_svfprintf_r+0x360>
   8b096:	2b58      	cmp	r3, #88	; 0x58
   8b098:	f040 81d7 	bne.w	8b44a <_svfprintf_r+0x4d6>
   8b09c:	4dae      	ldr	r5, [pc, #696]	; (8b358 <_svfprintf_r+0x3e4>)
   8b09e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b0a2:	9505      	str	r5, [sp, #20]
   8b0a4:	e130      	b.n	8b308 <_svfprintf_r+0x394>
   8b0a6:	2b6f      	cmp	r3, #111	; 0x6f
   8b0a8:	f000 80c9 	beq.w	8b23e <_svfprintf_r+0x2ca>
   8b0ac:	dc10      	bgt.n	8b0d0 <_svfprintf_r+0x15c>
   8b0ae:	2b69      	cmp	r3, #105	; 0x69
   8b0b0:	d024      	beq.n	8b0fc <_svfprintf_r+0x188>
   8b0b2:	dc07      	bgt.n	8b0c4 <_svfprintf_r+0x150>
   8b0b4:	2b64      	cmp	r3, #100	; 0x64
   8b0b6:	d021      	beq.n	8b0fc <_svfprintf_r+0x188>
   8b0b8:	2b68      	cmp	r3, #104	; 0x68
   8b0ba:	f040 81c6 	bne.w	8b44a <_svfprintf_r+0x4d6>
   8b0be:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   8b0c2:	e7b4      	b.n	8b02e <_svfprintf_r+0xba>
   8b0c4:	2b6c      	cmp	r3, #108	; 0x6c
   8b0c6:	d05f      	beq.n	8b188 <_svfprintf_r+0x214>
   8b0c8:	2b6e      	cmp	r3, #110	; 0x6e
   8b0ca:	f040 81be 	bne.w	8b44a <_svfprintf_r+0x4d6>
   8b0ce:	e096      	b.n	8b1fe <_svfprintf_r+0x28a>
   8b0d0:	2b73      	cmp	r3, #115	; 0x73
   8b0d2:	f000 80df 	beq.w	8b294 <_svfprintf_r+0x320>
   8b0d6:	dc06      	bgt.n	8b0e6 <_svfprintf_r+0x172>
   8b0d8:	2b70      	cmp	r3, #112	; 0x70
   8b0da:	f000 80cd 	beq.w	8b278 <_svfprintf_r+0x304>
   8b0de:	2b71      	cmp	r3, #113	; 0x71
   8b0e0:	f040 81b3 	bne.w	8b44a <_svfprintf_r+0x4d6>
   8b0e4:	e05a      	b.n	8b19c <_svfprintf_r+0x228>
   8b0e6:	2b75      	cmp	r3, #117	; 0x75
   8b0e8:	f000 80f6 	beq.w	8b2d8 <_svfprintf_r+0x364>
   8b0ec:	2b78      	cmp	r3, #120	; 0x78
   8b0ee:	f040 81ac 	bne.w	8b44a <_svfprintf_r+0x4d6>
   8b0f2:	4d9a      	ldr	r5, [pc, #616]	; (8b35c <_svfprintf_r+0x3e8>)
   8b0f4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b0f8:	9505      	str	r5, [sp, #20]
   8b0fa:	e105      	b.n	8b308 <_svfprintf_r+0x394>
   8b0fc:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b100:	e057      	b.n	8b1b2 <_svfprintf_r+0x23e>
   8b102:	f047 0701 	orr.w	r7, r7, #1
   8b106:	e792      	b.n	8b02e <_svfprintf_r+0xba>
   8b108:	1d33      	adds	r3, r6, #4
   8b10a:	6836      	ldr	r6, [r6, #0]
   8b10c:	2e00      	cmp	r6, #0
   8b10e:	9603      	str	r6, [sp, #12]
   8b110:	da15      	bge.n	8b13e <_svfprintf_r+0x1ca>
   8b112:	4270      	negs	r0, r6
   8b114:	9003      	str	r0, [sp, #12]
   8b116:	461e      	mov	r6, r3
   8b118:	f047 0704 	orr.w	r7, r7, #4
   8b11c:	e787      	b.n	8b02e <_svfprintf_r+0xba>
   8b11e:	9901      	ldr	r1, [sp, #4]
   8b120:	f811 3b01 	ldrb.w	r3, [r1], #1
   8b124:	2b2a      	cmp	r3, #42	; 0x2a
   8b126:	9101      	str	r1, [sp, #4]
   8b128:	d10b      	bne.n	8b142 <_svfprintf_r+0x1ce>
   8b12a:	f8d6 c000 	ldr.w	ip, [r6]
   8b12e:	1d33      	adds	r3, r6, #4
   8b130:	f1bc 0f00 	cmp.w	ip, #0
   8b134:	da03      	bge.n	8b13e <_svfprintf_r+0x1ca>
   8b136:	461e      	mov	r6, r3
   8b138:	f04f 3cff 	mov.w	ip, #4294967295
   8b13c:	e777      	b.n	8b02e <_svfprintf_r+0xba>
   8b13e:	461e      	mov	r6, r3
   8b140:	e775      	b.n	8b02e <_svfprintf_r+0xba>
   8b142:	f04f 0c00 	mov.w	ip, #0
   8b146:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8b14a:	2809      	cmp	r0, #9
   8b14c:	d807      	bhi.n	8b15e <_svfprintf_r+0x1ea>
   8b14e:	9901      	ldr	r1, [sp, #4]
   8b150:	230a      	movs	r3, #10
   8b152:	fb03 0c0c 	mla	ip, r3, ip, r0
   8b156:	f811 3b01 	ldrb.w	r3, [r1], #1
   8b15a:	9101      	str	r1, [sp, #4]
   8b15c:	e7f3      	b.n	8b146 <_svfprintf_r+0x1d2>
   8b15e:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   8b162:	e768      	b.n	8b036 <_svfprintf_r+0xc2>
   8b164:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8b168:	e761      	b.n	8b02e <_svfprintf_r+0xba>
   8b16a:	9801      	ldr	r0, [sp, #4]
   8b16c:	2100      	movs	r1, #0
   8b16e:	3b30      	subs	r3, #48	; 0x30
   8b170:	240a      	movs	r4, #10
   8b172:	fb04 3101 	mla	r1, r4, r1, r3
   8b176:	f810 3b01 	ldrb.w	r3, [r0], #1
   8b17a:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   8b17e:	2c09      	cmp	r4, #9
   8b180:	9001      	str	r0, [sp, #4]
   8b182:	d9f4      	bls.n	8b16e <_svfprintf_r+0x1fa>
   8b184:	9103      	str	r1, [sp, #12]
   8b186:	e756      	b.n	8b036 <_svfprintf_r+0xc2>
   8b188:	9901      	ldr	r1, [sp, #4]
   8b18a:	780b      	ldrb	r3, [r1, #0]
   8b18c:	2b6c      	cmp	r3, #108	; 0x6c
   8b18e:	d102      	bne.n	8b196 <_svfprintf_r+0x222>
   8b190:	1c48      	adds	r0, r1, #1
   8b192:	9001      	str	r0, [sp, #4]
   8b194:	e002      	b.n	8b19c <_svfprintf_r+0x228>
   8b196:	f047 0710 	orr.w	r7, r7, #16
   8b19a:	e748      	b.n	8b02e <_svfprintf_r+0xba>
   8b19c:	f047 0720 	orr.w	r7, r7, #32
   8b1a0:	e745      	b.n	8b02e <_svfprintf_r+0xba>
   8b1a2:	6832      	ldr	r2, [r6, #0]
   8b1a4:	2500      	movs	r5, #0
   8b1a6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   8b1aa:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8b1ae:	3604      	adds	r6, #4
   8b1b0:	e155      	b.n	8b45e <_svfprintf_r+0x4ea>
   8b1b2:	06ba      	lsls	r2, r7, #26
   8b1b4:	d507      	bpl.n	8b1c6 <_svfprintf_r+0x252>
   8b1b6:	3607      	adds	r6, #7
   8b1b8:	f026 0507 	bic.w	r5, r6, #7
   8b1bc:	f105 0608 	add.w	r6, r5, #8
   8b1c0:	e9d5 4500 	ldrd	r4, r5, [r5]
   8b1c4:	e00f      	b.n	8b1e6 <_svfprintf_r+0x272>
   8b1c6:	f017 0f10 	tst.w	r7, #16
   8b1ca:	f106 0104 	add.w	r1, r6, #4
   8b1ce:	d001      	beq.n	8b1d4 <_svfprintf_r+0x260>
   8b1d0:	6832      	ldr	r2, [r6, #0]
   8b1d2:	e005      	b.n	8b1e0 <_svfprintf_r+0x26c>
   8b1d4:	f017 0f40 	tst.w	r7, #64	; 0x40
   8b1d8:	6832      	ldr	r2, [r6, #0]
   8b1da:	d001      	beq.n	8b1e0 <_svfprintf_r+0x26c>
   8b1dc:	b214      	sxth	r4, r2
   8b1de:	e000      	b.n	8b1e2 <_svfprintf_r+0x26e>
   8b1e0:	4614      	mov	r4, r2
   8b1e2:	17e5      	asrs	r5, r4, #31
   8b1e4:	460e      	mov	r6, r1
   8b1e6:	2c00      	cmp	r4, #0
   8b1e8:	f175 0200 	sbcs.w	r2, r5, #0
   8b1ec:	f280 80b8 	bge.w	8b360 <_svfprintf_r+0x3ec>
   8b1f0:	232d      	movs	r3, #45	; 0x2d
   8b1f2:	4264      	negs	r4, r4
   8b1f4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8b1f8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   8b1fc:	e0b0      	b.n	8b360 <_svfprintf_r+0x3ec>
   8b1fe:	f017 0f20 	tst.w	r7, #32
   8b202:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b206:	f106 0204 	add.w	r2, r6, #4
   8b20a:	d005      	beq.n	8b218 <_svfprintf_r+0x2a4>
   8b20c:	9c04      	ldr	r4, [sp, #16]
   8b20e:	6835      	ldr	r5, [r6, #0]
   8b210:	17e0      	asrs	r0, r4, #31
   8b212:	602c      	str	r4, [r5, #0]
   8b214:	6068      	str	r0, [r5, #4]
   8b216:	e004      	b.n	8b222 <_svfprintf_r+0x2ae>
   8b218:	06fb      	lsls	r3, r7, #27
   8b21a:	d504      	bpl.n	8b226 <_svfprintf_r+0x2b2>
   8b21c:	6833      	ldr	r3, [r6, #0]
   8b21e:	9904      	ldr	r1, [sp, #16]
   8b220:	6019      	str	r1, [r3, #0]
   8b222:	4616      	mov	r6, r2
   8b224:	e6cf      	b.n	8afc6 <_svfprintf_r+0x52>
   8b226:	6830      	ldr	r0, [r6, #0]
   8b228:	9c04      	ldr	r4, [sp, #16]
   8b22a:	f017 0f40 	tst.w	r7, #64	; 0x40
   8b22e:	f106 0604 	add.w	r6, r6, #4
   8b232:	bf14      	ite	ne
   8b234:	8004      	strhne	r4, [r0, #0]
   8b236:	6004      	streq	r4, [r0, #0]
   8b238:	e6c5      	b.n	8afc6 <_svfprintf_r+0x52>
   8b23a:	f047 0710 	orr.w	r7, r7, #16
   8b23e:	f017 0020 	ands.w	r0, r7, #32
   8b242:	d008      	beq.n	8b256 <_svfprintf_r+0x2e2>
   8b244:	1df3      	adds	r3, r6, #7
   8b246:	f023 0507 	bic.w	r5, r3, #7
   8b24a:	f105 0608 	add.w	r6, r5, #8
   8b24e:	e9d5 4500 	ldrd	r4, r5, [r5]
   8b252:	2000      	movs	r0, #0
   8b254:	e07c      	b.n	8b350 <_svfprintf_r+0x3dc>
   8b256:	f017 0110 	ands.w	r1, r7, #16
   8b25a:	f106 0204 	add.w	r2, r6, #4
   8b25e:	d106      	bne.n	8b26e <_svfprintf_r+0x2fa>
   8b260:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   8b264:	d003      	beq.n	8b26e <_svfprintf_r+0x2fa>
   8b266:	8834      	ldrh	r4, [r6, #0]
   8b268:	2500      	movs	r5, #0
   8b26a:	4616      	mov	r6, r2
   8b26c:	e7f1      	b.n	8b252 <_svfprintf_r+0x2de>
   8b26e:	6836      	ldr	r6, [r6, #0]
   8b270:	2500      	movs	r5, #0
   8b272:	4634      	mov	r4, r6
   8b274:	4616      	mov	r6, r2
   8b276:	e06b      	b.n	8b350 <_svfprintf_r+0x3dc>
   8b278:	4b38      	ldr	r3, [pc, #224]	; (8b35c <_svfprintf_r+0x3e8>)
   8b27a:	2130      	movs	r1, #48	; 0x30
   8b27c:	2278      	movs	r2, #120	; 0x78
   8b27e:	6834      	ldr	r4, [r6, #0]
   8b280:	2500      	movs	r5, #0
   8b282:	f047 0702 	orr.w	r7, r7, #2
   8b286:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   8b28a:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   8b28e:	3604      	adds	r6, #4
   8b290:	9305      	str	r3, [sp, #20]
   8b292:	e05c      	b.n	8b34e <_svfprintf_r+0x3da>
   8b294:	4631      	mov	r1, r6
   8b296:	2500      	movs	r5, #0
   8b298:	f8d1 a000 	ldr.w	sl, [r1]
   8b29c:	3604      	adds	r6, #4
   8b29e:	45ac      	cmp	ip, r5
   8b2a0:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8b2a4:	4650      	mov	r0, sl
   8b2a6:	db11      	blt.n	8b2cc <_svfprintf_r+0x358>
   8b2a8:	4662      	mov	r2, ip
   8b2aa:	4629      	mov	r1, r5
   8b2ac:	f8cd c000 	str.w	ip, [sp]
   8b2b0:	f000 fd72 	bl	8bd98 <memchr>
   8b2b4:	f8dd c000 	ldr.w	ip, [sp]
   8b2b8:	2800      	cmp	r0, #0
   8b2ba:	f000 80d4 	beq.w	8b466 <_svfprintf_r+0x4f2>
   8b2be:	ebca 0400 	rsb	r4, sl, r0
   8b2c2:	4564      	cmp	r4, ip
   8b2c4:	f340 80d1 	ble.w	8b46a <_svfprintf_r+0x4f6>
   8b2c8:	4664      	mov	r4, ip
   8b2ca:	e0ce      	b.n	8b46a <_svfprintf_r+0x4f6>
   8b2cc:	f7ff fd70 	bl	8adb0 <strlen>
   8b2d0:	4604      	mov	r4, r0
   8b2d2:	e0ca      	b.n	8b46a <_svfprintf_r+0x4f6>
   8b2d4:	f047 0710 	orr.w	r7, r7, #16
   8b2d8:	06bd      	lsls	r5, r7, #26
   8b2da:	d506      	bpl.n	8b2ea <_svfprintf_r+0x376>
   8b2dc:	1df0      	adds	r0, r6, #7
   8b2de:	f020 0407 	bic.w	r4, r0, #7
   8b2e2:	f104 0608 	add.w	r6, r4, #8
   8b2e6:	cc30      	ldmia	r4, {r4, r5}
   8b2e8:	e00c      	b.n	8b304 <_svfprintf_r+0x390>
   8b2ea:	f017 0f10 	tst.w	r7, #16
   8b2ee:	f106 0304 	add.w	r3, r6, #4
   8b2f2:	d103      	bne.n	8b2fc <_svfprintf_r+0x388>
   8b2f4:	067c      	lsls	r4, r7, #25
   8b2f6:	d501      	bpl.n	8b2fc <_svfprintf_r+0x388>
   8b2f8:	8834      	ldrh	r4, [r6, #0]
   8b2fa:	e001      	b.n	8b300 <_svfprintf_r+0x38c>
   8b2fc:	6835      	ldr	r5, [r6, #0]
   8b2fe:	462c      	mov	r4, r5
   8b300:	2500      	movs	r5, #0
   8b302:	461e      	mov	r6, r3
   8b304:	2001      	movs	r0, #1
   8b306:	e023      	b.n	8b350 <_svfprintf_r+0x3dc>
   8b308:	06b8      	lsls	r0, r7, #26
   8b30a:	d507      	bpl.n	8b31c <_svfprintf_r+0x3a8>
   8b30c:	1df4      	adds	r4, r6, #7
   8b30e:	f024 0107 	bic.w	r1, r4, #7
   8b312:	f101 0608 	add.w	r6, r1, #8
   8b316:	e9d1 4500 	ldrd	r4, r5, [r1]
   8b31a:	e00c      	b.n	8b336 <_svfprintf_r+0x3c2>
   8b31c:	f017 0f10 	tst.w	r7, #16
   8b320:	f106 0004 	add.w	r0, r6, #4
   8b324:	d103      	bne.n	8b32e <_svfprintf_r+0x3ba>
   8b326:	0679      	lsls	r1, r7, #25
   8b328:	d501      	bpl.n	8b32e <_svfprintf_r+0x3ba>
   8b32a:	8834      	ldrh	r4, [r6, #0]
   8b32c:	e001      	b.n	8b332 <_svfprintf_r+0x3be>
   8b32e:	6836      	ldr	r6, [r6, #0]
   8b330:	4634      	mov	r4, r6
   8b332:	2500      	movs	r5, #0
   8b334:	4606      	mov	r6, r0
   8b336:	07fa      	lsls	r2, r7, #31
   8b338:	d509      	bpl.n	8b34e <_svfprintf_r+0x3da>
   8b33a:	ea54 0205 	orrs.w	r2, r4, r5
   8b33e:	d006      	beq.n	8b34e <_svfprintf_r+0x3da>
   8b340:	2230      	movs	r2, #48	; 0x30
   8b342:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   8b346:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   8b34a:	f047 0702 	orr.w	r7, r7, #2
   8b34e:	2002      	movs	r0, #2
   8b350:	2100      	movs	r1, #0
   8b352:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   8b356:	e004      	b.n	8b362 <_svfprintf_r+0x3ee>
   8b358:	0008dec6 	.word	0x0008dec6
   8b35c:	0008ded7 	.word	0x0008ded7
   8b360:	2001      	movs	r0, #1
   8b362:	f1bc 0f00 	cmp.w	ip, #0
   8b366:	bfa8      	it	ge
   8b368:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   8b36c:	ea54 0105 	orrs.w	r1, r4, r5
   8b370:	d102      	bne.n	8b378 <_svfprintf_r+0x404>
   8b372:	f1bc 0f00 	cmp.w	ip, #0
   8b376:	d058      	beq.n	8b42a <_svfprintf_r+0x4b6>
   8b378:	2801      	cmp	r0, #1
   8b37a:	d01d      	beq.n	8b3b8 <_svfprintf_r+0x444>
   8b37c:	2802      	cmp	r0, #2
   8b37e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8b382:	d041      	beq.n	8b408 <_svfprintf_r+0x494>
   8b384:	f004 0207 	and.w	r2, r4, #7
   8b388:	08e4      	lsrs	r4, r4, #3
   8b38a:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   8b38e:	08e9      	lsrs	r1, r5, #3
   8b390:	4604      	mov	r4, r0
   8b392:	460d      	mov	r5, r1
   8b394:	3230      	adds	r2, #48	; 0x30
   8b396:	ea54 0105 	orrs.w	r1, r4, r5
   8b39a:	469a      	mov	sl, r3
   8b39c:	701a      	strb	r2, [r3, #0]
   8b39e:	f103 33ff 	add.w	r3, r3, #4294967295
   8b3a2:	d1ef      	bne.n	8b384 <_svfprintf_r+0x410>
   8b3a4:	07f8      	lsls	r0, r7, #31
   8b3a6:	4655      	mov	r5, sl
   8b3a8:	d54a      	bpl.n	8b440 <_svfprintf_r+0x4cc>
   8b3aa:	2a30      	cmp	r2, #48	; 0x30
   8b3ac:	d048      	beq.n	8b440 <_svfprintf_r+0x4cc>
   8b3ae:	2230      	movs	r2, #48	; 0x30
   8b3b0:	469a      	mov	sl, r3
   8b3b2:	f805 2c01 	strb.w	r2, [r5, #-1]
   8b3b6:	e043      	b.n	8b440 <_svfprintf_r+0x4cc>
   8b3b8:	2d00      	cmp	r5, #0
   8b3ba:	bf08      	it	eq
   8b3bc:	2c0a      	cmpeq	r4, #10
   8b3be:	d203      	bcs.n	8b3c8 <_svfprintf_r+0x454>
   8b3c0:	3430      	adds	r4, #48	; 0x30
   8b3c2:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   8b3c6:	e036      	b.n	8b436 <_svfprintf_r+0x4c2>
   8b3c8:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8b3cc:	9302      	str	r3, [sp, #8]
   8b3ce:	4620      	mov	r0, r4
   8b3d0:	4629      	mov	r1, r5
   8b3d2:	220a      	movs	r2, #10
   8b3d4:	2300      	movs	r3, #0
   8b3d6:	f8cd c000 	str.w	ip, [sp]
   8b3da:	f001 fae5 	bl	8c9a8 <__aeabi_uldivmod>
   8b3de:	9802      	ldr	r0, [sp, #8]
   8b3e0:	3230      	adds	r2, #48	; 0x30
   8b3e2:	f800 2901 	strb.w	r2, [r0], #-1
   8b3e6:	4629      	mov	r1, r5
   8b3e8:	220a      	movs	r2, #10
   8b3ea:	2300      	movs	r3, #0
   8b3ec:	f8dd a008 	ldr.w	sl, [sp, #8]
   8b3f0:	9002      	str	r0, [sp, #8]
   8b3f2:	4620      	mov	r0, r4
   8b3f4:	f001 fad8 	bl	8c9a8 <__aeabi_uldivmod>
   8b3f8:	4604      	mov	r4, r0
   8b3fa:	460d      	mov	r5, r1
   8b3fc:	ea54 0105 	orrs.w	r1, r4, r5
   8b400:	f8dd c000 	ldr.w	ip, [sp]
   8b404:	d1e3      	bne.n	8b3ce <_svfprintf_r+0x45a>
   8b406:	e01b      	b.n	8b440 <_svfprintf_r+0x4cc>
   8b408:	9905      	ldr	r1, [sp, #20]
   8b40a:	f004 000f 	and.w	r0, r4, #15
   8b40e:	0924      	lsrs	r4, r4, #4
   8b410:	5c0a      	ldrb	r2, [r1, r0]
   8b412:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   8b416:	0929      	lsrs	r1, r5, #4
   8b418:	4604      	mov	r4, r0
   8b41a:	460d      	mov	r5, r1
   8b41c:	469a      	mov	sl, r3
   8b41e:	f803 2901 	strb.w	r2, [r3], #-1
   8b422:	ea54 0205 	orrs.w	r2, r4, r5
   8b426:	d1ef      	bne.n	8b408 <_svfprintf_r+0x494>
   8b428:	e00a      	b.n	8b440 <_svfprintf_r+0x4cc>
   8b42a:	b938      	cbnz	r0, 8b43c <_svfprintf_r+0x4c8>
   8b42c:	07f9      	lsls	r1, r7, #31
   8b42e:	d505      	bpl.n	8b43c <_svfprintf_r+0x4c8>
   8b430:	2030      	movs	r0, #48	; 0x30
   8b432:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   8b436:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   8b43a:	e001      	b.n	8b440 <_svfprintf_r+0x4cc>
   8b43c:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   8b440:	ad18      	add	r5, sp, #96	; 0x60
   8b442:	ebca 0405 	rsb	r4, sl, r5
   8b446:	4665      	mov	r5, ip
   8b448:	e00f      	b.n	8b46a <_svfprintf_r+0x4f6>
   8b44a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b44e:	2b00      	cmp	r3, #0
   8b450:	f000 8176 	beq.w	8b740 <_svfprintf_r+0x7cc>
   8b454:	2500      	movs	r5, #0
   8b456:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   8b45a:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8b45e:	2401      	movs	r4, #1
   8b460:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   8b464:	e001      	b.n	8b46a <_svfprintf_r+0x4f6>
   8b466:	4664      	mov	r4, ip
   8b468:	4605      	mov	r5, r0
   8b46a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8b46e:	42ac      	cmp	r4, r5
   8b470:	bfac      	ite	ge
   8b472:	4621      	movge	r1, r4
   8b474:	4629      	movlt	r1, r5
   8b476:	9102      	str	r1, [sp, #8]
   8b478:	b113      	cbz	r3, 8b480 <_svfprintf_r+0x50c>
   8b47a:	9802      	ldr	r0, [sp, #8]
   8b47c:	1c42      	adds	r2, r0, #1
   8b47e:	9202      	str	r2, [sp, #8]
   8b480:	f017 0102 	ands.w	r1, r7, #2
   8b484:	9106      	str	r1, [sp, #24]
   8b486:	d002      	beq.n	8b48e <_svfprintf_r+0x51a>
   8b488:	9b02      	ldr	r3, [sp, #8]
   8b48a:	1c98      	adds	r0, r3, #2
   8b48c:	9002      	str	r0, [sp, #8]
   8b48e:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   8b492:	9207      	str	r2, [sp, #28]
   8b494:	d13c      	bne.n	8b510 <_svfprintf_r+0x59c>
   8b496:	9903      	ldr	r1, [sp, #12]
   8b498:	9b02      	ldr	r3, [sp, #8]
   8b49a:	1acb      	subs	r3, r1, r3
   8b49c:	2b00      	cmp	r3, #0
   8b49e:	dd37      	ble.n	8b510 <_svfprintf_r+0x59c>
   8b4a0:	48a5      	ldr	r0, [pc, #660]	; (8b738 <_svfprintf_r+0x7c4>)
   8b4a2:	2b10      	cmp	r3, #16
   8b4a4:	f8c8 0000 	str.w	r0, [r8]
   8b4a8:	dd1b      	ble.n	8b4e2 <_svfprintf_r+0x56e>
   8b4aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8b4ac:	2110      	movs	r1, #16
   8b4ae:	980d      	ldr	r0, [sp, #52]	; 0x34
   8b4b0:	f8c8 1004 	str.w	r1, [r8, #4]
   8b4b4:	1c51      	adds	r1, r2, #1
   8b4b6:	3010      	adds	r0, #16
   8b4b8:	2907      	cmp	r1, #7
   8b4ba:	900d      	str	r0, [sp, #52]	; 0x34
   8b4bc:	910c      	str	r1, [sp, #48]	; 0x30
   8b4be:	dc02      	bgt.n	8b4c6 <_svfprintf_r+0x552>
   8b4c0:	f108 0808 	add.w	r8, r8, #8
   8b4c4:	e00b      	b.n	8b4de <_svfprintf_r+0x56a>
   8b4c6:	4658      	mov	r0, fp
   8b4c8:	4649      	mov	r1, r9
   8b4ca:	aa0b      	add	r2, sp, #44	; 0x2c
   8b4cc:	9300      	str	r3, [sp, #0]
   8b4ce:	f000 fdf1 	bl	8c0b4 <__ssprint_r>
   8b4d2:	9b00      	ldr	r3, [sp, #0]
   8b4d4:	2800      	cmp	r0, #0
   8b4d6:	f040 813a 	bne.w	8b74e <_svfprintf_r+0x7da>
   8b4da:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b4de:	3b10      	subs	r3, #16
   8b4e0:	e7de      	b.n	8b4a0 <_svfprintf_r+0x52c>
   8b4e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8b4e4:	f8c8 3004 	str.w	r3, [r8, #4]
   8b4e8:	18d1      	adds	r1, r2, r3
   8b4ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8b4ec:	910d      	str	r1, [sp, #52]	; 0x34
   8b4ee:	1c58      	adds	r0, r3, #1
   8b4f0:	2807      	cmp	r0, #7
   8b4f2:	900c      	str	r0, [sp, #48]	; 0x30
   8b4f4:	dc02      	bgt.n	8b4fc <_svfprintf_r+0x588>
   8b4f6:	f108 0808 	add.w	r8, r8, #8
   8b4fa:	e009      	b.n	8b510 <_svfprintf_r+0x59c>
   8b4fc:	4658      	mov	r0, fp
   8b4fe:	4649      	mov	r1, r9
   8b500:	aa0b      	add	r2, sp, #44	; 0x2c
   8b502:	f000 fdd7 	bl	8c0b4 <__ssprint_r>
   8b506:	2800      	cmp	r0, #0
   8b508:	f040 8121 	bne.w	8b74e <_svfprintf_r+0x7da>
   8b50c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b510:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   8b514:	b1da      	cbz	r2, 8b54e <_svfprintf_r+0x5da>
   8b516:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   8b51a:	f8c8 1000 	str.w	r1, [r8]
   8b51e:	990c      	ldr	r1, [sp, #48]	; 0x30
   8b520:	2301      	movs	r3, #1
   8b522:	980d      	ldr	r0, [sp, #52]	; 0x34
   8b524:	f8c8 3004 	str.w	r3, [r8, #4]
   8b528:	1c4b      	adds	r3, r1, #1
   8b52a:	1c42      	adds	r2, r0, #1
   8b52c:	2b07      	cmp	r3, #7
   8b52e:	920d      	str	r2, [sp, #52]	; 0x34
   8b530:	930c      	str	r3, [sp, #48]	; 0x30
   8b532:	dc02      	bgt.n	8b53a <_svfprintf_r+0x5c6>
   8b534:	f108 0808 	add.w	r8, r8, #8
   8b538:	e009      	b.n	8b54e <_svfprintf_r+0x5da>
   8b53a:	4658      	mov	r0, fp
   8b53c:	4649      	mov	r1, r9
   8b53e:	aa0b      	add	r2, sp, #44	; 0x2c
   8b540:	f000 fdb8 	bl	8c0b4 <__ssprint_r>
   8b544:	2800      	cmp	r0, #0
   8b546:	f040 8102 	bne.w	8b74e <_svfprintf_r+0x7da>
   8b54a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b54e:	9806      	ldr	r0, [sp, #24]
   8b550:	b1d0      	cbz	r0, 8b588 <_svfprintf_r+0x614>
   8b552:	aa0a      	add	r2, sp, #40	; 0x28
   8b554:	f8c8 2000 	str.w	r2, [r8]
   8b558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8b55a:	2102      	movs	r1, #2
   8b55c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8b55e:	f8c8 1004 	str.w	r1, [r8, #4]
   8b562:	1c51      	adds	r1, r2, #1
   8b564:	1c98      	adds	r0, r3, #2
   8b566:	2907      	cmp	r1, #7
   8b568:	900d      	str	r0, [sp, #52]	; 0x34
   8b56a:	910c      	str	r1, [sp, #48]	; 0x30
   8b56c:	dc02      	bgt.n	8b574 <_svfprintf_r+0x600>
   8b56e:	f108 0808 	add.w	r8, r8, #8
   8b572:	e009      	b.n	8b588 <_svfprintf_r+0x614>
   8b574:	4658      	mov	r0, fp
   8b576:	4649      	mov	r1, r9
   8b578:	aa0b      	add	r2, sp, #44	; 0x2c
   8b57a:	f000 fd9b 	bl	8c0b4 <__ssprint_r>
   8b57e:	2800      	cmp	r0, #0
   8b580:	f040 80e5 	bne.w	8b74e <_svfprintf_r+0x7da>
   8b584:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b588:	9b07      	ldr	r3, [sp, #28]
   8b58a:	2b80      	cmp	r3, #128	; 0x80
   8b58c:	d13c      	bne.n	8b608 <_svfprintf_r+0x694>
   8b58e:	9803      	ldr	r0, [sp, #12]
   8b590:	9a02      	ldr	r2, [sp, #8]
   8b592:	1a83      	subs	r3, r0, r2
   8b594:	2b00      	cmp	r3, #0
   8b596:	dd37      	ble.n	8b608 <_svfprintf_r+0x694>
   8b598:	4968      	ldr	r1, [pc, #416]	; (8b73c <_svfprintf_r+0x7c8>)
   8b59a:	2b10      	cmp	r3, #16
   8b59c:	f8c8 1000 	str.w	r1, [r8]
   8b5a0:	dd1b      	ble.n	8b5da <_svfprintf_r+0x666>
   8b5a2:	980c      	ldr	r0, [sp, #48]	; 0x30
   8b5a4:	2210      	movs	r2, #16
   8b5a6:	990d      	ldr	r1, [sp, #52]	; 0x34
   8b5a8:	f8c8 2004 	str.w	r2, [r8, #4]
   8b5ac:	1c42      	adds	r2, r0, #1
   8b5ae:	3110      	adds	r1, #16
   8b5b0:	2a07      	cmp	r2, #7
   8b5b2:	910d      	str	r1, [sp, #52]	; 0x34
   8b5b4:	920c      	str	r2, [sp, #48]	; 0x30
   8b5b6:	dc02      	bgt.n	8b5be <_svfprintf_r+0x64a>
   8b5b8:	f108 0808 	add.w	r8, r8, #8
   8b5bc:	e00b      	b.n	8b5d6 <_svfprintf_r+0x662>
   8b5be:	4658      	mov	r0, fp
   8b5c0:	4649      	mov	r1, r9
   8b5c2:	aa0b      	add	r2, sp, #44	; 0x2c
   8b5c4:	9300      	str	r3, [sp, #0]
   8b5c6:	f000 fd75 	bl	8c0b4 <__ssprint_r>
   8b5ca:	9b00      	ldr	r3, [sp, #0]
   8b5cc:	2800      	cmp	r0, #0
   8b5ce:	f040 80be 	bne.w	8b74e <_svfprintf_r+0x7da>
   8b5d2:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b5d6:	3b10      	subs	r3, #16
   8b5d8:	e7de      	b.n	8b598 <_svfprintf_r+0x624>
   8b5da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8b5dc:	980d      	ldr	r0, [sp, #52]	; 0x34
   8b5de:	1c51      	adds	r1, r2, #1
   8b5e0:	f8c8 3004 	str.w	r3, [r8, #4]
   8b5e4:	2907      	cmp	r1, #7
   8b5e6:	4403      	add	r3, r0
   8b5e8:	930d      	str	r3, [sp, #52]	; 0x34
   8b5ea:	910c      	str	r1, [sp, #48]	; 0x30
   8b5ec:	dc02      	bgt.n	8b5f4 <_svfprintf_r+0x680>
   8b5ee:	f108 0808 	add.w	r8, r8, #8
   8b5f2:	e009      	b.n	8b608 <_svfprintf_r+0x694>
   8b5f4:	4658      	mov	r0, fp
   8b5f6:	4649      	mov	r1, r9
   8b5f8:	aa0b      	add	r2, sp, #44	; 0x2c
   8b5fa:	f000 fd5b 	bl	8c0b4 <__ssprint_r>
   8b5fe:	2800      	cmp	r0, #0
   8b600:	f040 80a5 	bne.w	8b74e <_svfprintf_r+0x7da>
   8b604:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b608:	1b2d      	subs	r5, r5, r4
   8b60a:	2d00      	cmp	r5, #0
   8b60c:	dd34      	ble.n	8b678 <_svfprintf_r+0x704>
   8b60e:	484b      	ldr	r0, [pc, #300]	; (8b73c <_svfprintf_r+0x7c8>)
   8b610:	2d10      	cmp	r5, #16
   8b612:	f8c8 0000 	str.w	r0, [r8]
   8b616:	dd19      	ble.n	8b64c <_svfprintf_r+0x6d8>
   8b618:	980c      	ldr	r0, [sp, #48]	; 0x30
   8b61a:	990d      	ldr	r1, [sp, #52]	; 0x34
   8b61c:	1c43      	adds	r3, r0, #1
   8b61e:	2210      	movs	r2, #16
   8b620:	3110      	adds	r1, #16
   8b622:	2b07      	cmp	r3, #7
   8b624:	f8c8 2004 	str.w	r2, [r8, #4]
   8b628:	910d      	str	r1, [sp, #52]	; 0x34
   8b62a:	930c      	str	r3, [sp, #48]	; 0x30
   8b62c:	dc02      	bgt.n	8b634 <_svfprintf_r+0x6c0>
   8b62e:	f108 0808 	add.w	r8, r8, #8
   8b632:	e009      	b.n	8b648 <_svfprintf_r+0x6d4>
   8b634:	4658      	mov	r0, fp
   8b636:	4649      	mov	r1, r9
   8b638:	aa0b      	add	r2, sp, #44	; 0x2c
   8b63a:	f000 fd3b 	bl	8c0b4 <__ssprint_r>
   8b63e:	2800      	cmp	r0, #0
   8b640:	f040 8085 	bne.w	8b74e <_svfprintf_r+0x7da>
   8b644:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b648:	3d10      	subs	r5, #16
   8b64a:	e7e0      	b.n	8b60e <_svfprintf_r+0x69a>
   8b64c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8b64e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8b650:	1c51      	adds	r1, r2, #1
   8b652:	f8c8 5004 	str.w	r5, [r8, #4]
   8b656:	2907      	cmp	r1, #7
   8b658:	441d      	add	r5, r3
   8b65a:	950d      	str	r5, [sp, #52]	; 0x34
   8b65c:	910c      	str	r1, [sp, #48]	; 0x30
   8b65e:	dc02      	bgt.n	8b666 <_svfprintf_r+0x6f2>
   8b660:	f108 0808 	add.w	r8, r8, #8
   8b664:	e008      	b.n	8b678 <_svfprintf_r+0x704>
   8b666:	4658      	mov	r0, fp
   8b668:	4649      	mov	r1, r9
   8b66a:	aa0b      	add	r2, sp, #44	; 0x2c
   8b66c:	f000 fd22 	bl	8c0b4 <__ssprint_r>
   8b670:	2800      	cmp	r0, #0
   8b672:	d16c      	bne.n	8b74e <_svfprintf_r+0x7da>
   8b674:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8b67a:	980d      	ldr	r0, [sp, #52]	; 0x34
   8b67c:	1c5a      	adds	r2, r3, #1
   8b67e:	f8c8 4004 	str.w	r4, [r8, #4]
   8b682:	2a07      	cmp	r2, #7
   8b684:	4404      	add	r4, r0
   8b686:	f8c8 a000 	str.w	sl, [r8]
   8b68a:	940d      	str	r4, [sp, #52]	; 0x34
   8b68c:	920c      	str	r2, [sp, #48]	; 0x30
   8b68e:	dc02      	bgt.n	8b696 <_svfprintf_r+0x722>
   8b690:	f108 0308 	add.w	r3, r8, #8
   8b694:	e007      	b.n	8b6a6 <_svfprintf_r+0x732>
   8b696:	4658      	mov	r0, fp
   8b698:	4649      	mov	r1, r9
   8b69a:	aa0b      	add	r2, sp, #44	; 0x2c
   8b69c:	f000 fd0a 	bl	8c0b4 <__ssprint_r>
   8b6a0:	2800      	cmp	r0, #0
   8b6a2:	d154      	bne.n	8b74e <_svfprintf_r+0x7da>
   8b6a4:	ab18      	add	r3, sp, #96	; 0x60
   8b6a6:	077a      	lsls	r2, r7, #29
   8b6a8:	d40b      	bmi.n	8b6c2 <_svfprintf_r+0x74e>
   8b6aa:	9804      	ldr	r0, [sp, #16]
   8b6ac:	9b02      	ldr	r3, [sp, #8]
   8b6ae:	9a03      	ldr	r2, [sp, #12]
   8b6b0:	990d      	ldr	r1, [sp, #52]	; 0x34
   8b6b2:	4293      	cmp	r3, r2
   8b6b4:	bfac      	ite	ge
   8b6b6:	18c0      	addge	r0, r0, r3
   8b6b8:	1880      	addlt	r0, r0, r2
   8b6ba:	9004      	str	r0, [sp, #16]
   8b6bc:	2900      	cmp	r1, #0
   8b6be:	d036      	beq.n	8b72e <_svfprintf_r+0x7ba>
   8b6c0:	e02f      	b.n	8b722 <_svfprintf_r+0x7ae>
   8b6c2:	9c03      	ldr	r4, [sp, #12]
   8b6c4:	9902      	ldr	r1, [sp, #8]
   8b6c6:	1a64      	subs	r4, r4, r1
   8b6c8:	2c00      	cmp	r4, #0
   8b6ca:	ddee      	ble.n	8b6aa <_svfprintf_r+0x736>
   8b6cc:	481a      	ldr	r0, [pc, #104]	; (8b738 <_svfprintf_r+0x7c4>)
   8b6ce:	2c10      	cmp	r4, #16
   8b6d0:	6018      	str	r0, [r3, #0]
   8b6d2:	dd15      	ble.n	8b700 <_svfprintf_r+0x78c>
   8b6d4:	990c      	ldr	r1, [sp, #48]	; 0x30
   8b6d6:	2010      	movs	r0, #16
   8b6d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8b6da:	6058      	str	r0, [r3, #4]
   8b6dc:	1c48      	adds	r0, r1, #1
   8b6de:	3210      	adds	r2, #16
   8b6e0:	2807      	cmp	r0, #7
   8b6e2:	920d      	str	r2, [sp, #52]	; 0x34
   8b6e4:	900c      	str	r0, [sp, #48]	; 0x30
   8b6e6:	dc01      	bgt.n	8b6ec <_svfprintf_r+0x778>
   8b6e8:	3308      	adds	r3, #8
   8b6ea:	e007      	b.n	8b6fc <_svfprintf_r+0x788>
   8b6ec:	4658      	mov	r0, fp
   8b6ee:	4649      	mov	r1, r9
   8b6f0:	aa0b      	add	r2, sp, #44	; 0x2c
   8b6f2:	f000 fcdf 	bl	8c0b4 <__ssprint_r>
   8b6f6:	2800      	cmp	r0, #0
   8b6f8:	d129      	bne.n	8b74e <_svfprintf_r+0x7da>
   8b6fa:	ab18      	add	r3, sp, #96	; 0x60
   8b6fc:	3c10      	subs	r4, #16
   8b6fe:	e7e5      	b.n	8b6cc <_svfprintf_r+0x758>
   8b700:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8b702:	605c      	str	r4, [r3, #4]
   8b704:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8b706:	1c51      	adds	r1, r2, #1
   8b708:	191c      	adds	r4, r3, r4
   8b70a:	2907      	cmp	r1, #7
   8b70c:	940d      	str	r4, [sp, #52]	; 0x34
   8b70e:	910c      	str	r1, [sp, #48]	; 0x30
   8b710:	ddcb      	ble.n	8b6aa <_svfprintf_r+0x736>
   8b712:	4658      	mov	r0, fp
   8b714:	4649      	mov	r1, r9
   8b716:	aa0b      	add	r2, sp, #44	; 0x2c
   8b718:	f000 fccc 	bl	8c0b4 <__ssprint_r>
   8b71c:	2800      	cmp	r0, #0
   8b71e:	d0c4      	beq.n	8b6aa <_svfprintf_r+0x736>
   8b720:	e015      	b.n	8b74e <_svfprintf_r+0x7da>
   8b722:	4658      	mov	r0, fp
   8b724:	4649      	mov	r1, r9
   8b726:	aa0b      	add	r2, sp, #44	; 0x2c
   8b728:	f000 fcc4 	bl	8c0b4 <__ssprint_r>
   8b72c:	b978      	cbnz	r0, 8b74e <_svfprintf_r+0x7da>
   8b72e:	2500      	movs	r5, #0
   8b730:	950c      	str	r5, [sp, #48]	; 0x30
   8b732:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b736:	e446      	b.n	8afc6 <_svfprintf_r+0x52>
   8b738:	0008dea6 	.word	0x0008dea6
   8b73c:	0008deb6 	.word	0x0008deb6
   8b740:	980d      	ldr	r0, [sp, #52]	; 0x34
   8b742:	b120      	cbz	r0, 8b74e <_svfprintf_r+0x7da>
   8b744:	4658      	mov	r0, fp
   8b746:	4649      	mov	r1, r9
   8b748:	aa0b      	add	r2, sp, #44	; 0x2c
   8b74a:	f000 fcb3 	bl	8c0b4 <__ssprint_r>
   8b74e:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   8b752:	9b04      	ldr	r3, [sp, #16]
   8b754:	f002 0140 	and.w	r1, r2, #64	; 0x40
   8b758:	b208      	sxth	r0, r1
   8b75a:	2800      	cmp	r0, #0
   8b75c:	bf18      	it	ne
   8b75e:	f04f 33ff 	movne.w	r3, #4294967295
   8b762:	4618      	mov	r0, r3
   8b764:	b029      	add	sp, #164	; 0xa4
   8b766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b76a:	bf00      	nop

0008b76c <register_fini>:
   8b76c:	4b02      	ldr	r3, [pc, #8]	; (8b778 <register_fini+0xc>)
   8b76e:	b113      	cbz	r3, 8b776 <register_fini+0xa>
   8b770:	4802      	ldr	r0, [pc, #8]	; (8b77c <register_fini+0x10>)
   8b772:	f000 b805 	b.w	8b780 <atexit>
   8b776:	4770      	bx	lr
   8b778:	00000000 	.word	0x00000000
   8b77c:	0008ac2d 	.word	0x0008ac2d

0008b780 <atexit>:
   8b780:	4601      	mov	r1, r0
   8b782:	2000      	movs	r0, #0
   8b784:	4602      	mov	r2, r0
   8b786:	4603      	mov	r3, r0
   8b788:	f7ff ba02 	b.w	8ab90 <__register_exitproc>

0008b78c <_malloc_trim_r>:
   8b78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b78e:	4d23      	ldr	r5, [pc, #140]	; (8b81c <_malloc_trim_r+0x90>)
   8b790:	460e      	mov	r6, r1
   8b792:	4604      	mov	r4, r0
   8b794:	f000 fb0e 	bl	8bdb4 <__malloc_lock>
   8b798:	68ab      	ldr	r3, [r5, #8]
   8b79a:	685f      	ldr	r7, [r3, #4]
   8b79c:	f027 0703 	bic.w	r7, r7, #3
   8b7a0:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
   8b7a4:	1b81      	subs	r1, r0, r6
   8b7a6:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   8b7aa:	f022 060f 	bic.w	r6, r2, #15
   8b7ae:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   8b7b2:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   8b7b6:	da04      	bge.n	8b7c2 <_malloc_trim_r+0x36>
   8b7b8:	4620      	mov	r0, r4
   8b7ba:	f000 fafc 	bl	8bdb6 <__malloc_unlock>
   8b7be:	2000      	movs	r0, #0
   8b7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b7c2:	2100      	movs	r1, #0
   8b7c4:	4620      	mov	r0, r4
   8b7c6:	f000 fc65 	bl	8c094 <_sbrk_r>
   8b7ca:	68ab      	ldr	r3, [r5, #8]
   8b7cc:	19d9      	adds	r1, r3, r7
   8b7ce:	4288      	cmp	r0, r1
   8b7d0:	d1f2      	bne.n	8b7b8 <_malloc_trim_r+0x2c>
   8b7d2:	4271      	negs	r1, r6
   8b7d4:	4620      	mov	r0, r4
   8b7d6:	f000 fc5d 	bl	8c094 <_sbrk_r>
   8b7da:	3001      	adds	r0, #1
   8b7dc:	d110      	bne.n	8b800 <_malloc_trim_r+0x74>
   8b7de:	2100      	movs	r1, #0
   8b7e0:	4620      	mov	r0, r4
   8b7e2:	f000 fc57 	bl	8c094 <_sbrk_r>
   8b7e6:	68ab      	ldr	r3, [r5, #8]
   8b7e8:	1ac2      	subs	r2, r0, r3
   8b7ea:	2a0f      	cmp	r2, #15
   8b7ec:	dde4      	ble.n	8b7b8 <_malloc_trim_r+0x2c>
   8b7ee:	490c      	ldr	r1, [pc, #48]	; (8b820 <_malloc_trim_r+0x94>)
   8b7f0:	f042 0201 	orr.w	r2, r2, #1
   8b7f4:	6809      	ldr	r1, [r1, #0]
   8b7f6:	605a      	str	r2, [r3, #4]
   8b7f8:	1a40      	subs	r0, r0, r1
   8b7fa:	490a      	ldr	r1, [pc, #40]	; (8b824 <_malloc_trim_r+0x98>)
   8b7fc:	6008      	str	r0, [r1, #0]
   8b7fe:	e7db      	b.n	8b7b8 <_malloc_trim_r+0x2c>
   8b800:	4b08      	ldr	r3, [pc, #32]	; (8b824 <_malloc_trim_r+0x98>)
   8b802:	68a8      	ldr	r0, [r5, #8]
   8b804:	681a      	ldr	r2, [r3, #0]
   8b806:	1bbf      	subs	r7, r7, r6
   8b808:	f047 0701 	orr.w	r7, r7, #1
   8b80c:	6047      	str	r7, [r0, #4]
   8b80e:	1b96      	subs	r6, r2, r6
   8b810:	4620      	mov	r0, r4
   8b812:	601e      	str	r6, [r3, #0]
   8b814:	f000 facf 	bl	8bdb6 <__malloc_unlock>
   8b818:	2001      	movs	r0, #1
   8b81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b81c:	200706d0 	.word	0x200706d0
   8b820:	20070ad8 	.word	0x20070ad8
   8b824:	20071658 	.word	0x20071658

0008b828 <_free_r>:
   8b828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b82a:	4606      	mov	r6, r0
   8b82c:	460d      	mov	r5, r1
   8b82e:	2900      	cmp	r1, #0
   8b830:	f000 80a6 	beq.w	8b980 <_free_r+0x158>
   8b834:	f000 fabe 	bl	8bdb4 <__malloc_lock>
   8b838:	f855 cc04 	ldr.w	ip, [r5, #-4]
   8b83c:	4f51      	ldr	r7, [pc, #324]	; (8b984 <_free_r+0x15c>)
   8b83e:	f1a5 0308 	sub.w	r3, r5, #8
   8b842:	f02c 0201 	bic.w	r2, ip, #1
   8b846:	189c      	adds	r4, r3, r2
   8b848:	68b9      	ldr	r1, [r7, #8]
   8b84a:	6860      	ldr	r0, [r4, #4]
   8b84c:	428c      	cmp	r4, r1
   8b84e:	f020 0003 	bic.w	r0, r0, #3
   8b852:	f00c 0101 	and.w	r1, ip, #1
   8b856:	d11c      	bne.n	8b892 <_free_r+0x6a>
   8b858:	1882      	adds	r2, r0, r2
   8b85a:	b939      	cbnz	r1, 8b86c <_free_r+0x44>
   8b85c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   8b860:	1a5b      	subs	r3, r3, r1
   8b862:	6898      	ldr	r0, [r3, #8]
   8b864:	1852      	adds	r2, r2, r1
   8b866:	68d9      	ldr	r1, [r3, #12]
   8b868:	60c1      	str	r1, [r0, #12]
   8b86a:	6088      	str	r0, [r1, #8]
   8b86c:	4845      	ldr	r0, [pc, #276]	; (8b984 <_free_r+0x15c>)
   8b86e:	f042 0101 	orr.w	r1, r2, #1
   8b872:	6059      	str	r1, [r3, #4]
   8b874:	6083      	str	r3, [r0, #8]
   8b876:	4b44      	ldr	r3, [pc, #272]	; (8b988 <_free_r+0x160>)
   8b878:	6819      	ldr	r1, [r3, #0]
   8b87a:	428a      	cmp	r2, r1
   8b87c:	d304      	bcc.n	8b888 <_free_r+0x60>
   8b87e:	4a43      	ldr	r2, [pc, #268]	; (8b98c <_free_r+0x164>)
   8b880:	4630      	mov	r0, r6
   8b882:	6811      	ldr	r1, [r2, #0]
   8b884:	f7ff ff82 	bl	8b78c <_malloc_trim_r>
   8b888:	4630      	mov	r0, r6
   8b88a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8b88e:	f000 ba92 	b.w	8bdb6 <__malloc_unlock>
   8b892:	6060      	str	r0, [r4, #4]
   8b894:	b959      	cbnz	r1, 8b8ae <_free_r+0x86>
   8b896:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8b89a:	3708      	adds	r7, #8
   8b89c:	1b5b      	subs	r3, r3, r5
   8b89e:	1952      	adds	r2, r2, r5
   8b8a0:	689d      	ldr	r5, [r3, #8]
   8b8a2:	42bd      	cmp	r5, r7
   8b8a4:	d005      	beq.n	8b8b2 <_free_r+0x8a>
   8b8a6:	68df      	ldr	r7, [r3, #12]
   8b8a8:	60ef      	str	r7, [r5, #12]
   8b8aa:	60bd      	str	r5, [r7, #8]
   8b8ac:	e002      	b.n	8b8b4 <_free_r+0x8c>
   8b8ae:	2100      	movs	r1, #0
   8b8b0:	e000      	b.n	8b8b4 <_free_r+0x8c>
   8b8b2:	2101      	movs	r1, #1
   8b8b4:	1825      	adds	r5, r4, r0
   8b8b6:	686d      	ldr	r5, [r5, #4]
   8b8b8:	f015 0f01 	tst.w	r5, #1
   8b8bc:	d10f      	bne.n	8b8de <_free_r+0xb6>
   8b8be:	1812      	adds	r2, r2, r0
   8b8c0:	b949      	cbnz	r1, 8b8d6 <_free_r+0xae>
   8b8c2:	68a0      	ldr	r0, [r4, #8]
   8b8c4:	4d32      	ldr	r5, [pc, #200]	; (8b990 <_free_r+0x168>)
   8b8c6:	42a8      	cmp	r0, r5
   8b8c8:	d105      	bne.n	8b8d6 <_free_r+0xae>
   8b8ca:	60eb      	str	r3, [r5, #12]
   8b8cc:	60ab      	str	r3, [r5, #8]
   8b8ce:	60d8      	str	r0, [r3, #12]
   8b8d0:	6098      	str	r0, [r3, #8]
   8b8d2:	2101      	movs	r1, #1
   8b8d4:	e003      	b.n	8b8de <_free_r+0xb6>
   8b8d6:	68e0      	ldr	r0, [r4, #12]
   8b8d8:	68a4      	ldr	r4, [r4, #8]
   8b8da:	60e0      	str	r0, [r4, #12]
   8b8dc:	6084      	str	r4, [r0, #8]
   8b8de:	f042 0001 	orr.w	r0, r2, #1
   8b8e2:	6058      	str	r0, [r3, #4]
   8b8e4:	509a      	str	r2, [r3, r2]
   8b8e6:	2900      	cmp	r1, #0
   8b8e8:	d1ce      	bne.n	8b888 <_free_r+0x60>
   8b8ea:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8b8ee:	d20c      	bcs.n	8b90a <_free_r+0xe2>
   8b8f0:	08d2      	lsrs	r2, r2, #3
   8b8f2:	1090      	asrs	r0, r2, #2
   8b8f4:	2401      	movs	r4, #1
   8b8f6:	fa04 f400 	lsl.w	r4, r4, r0
   8b8fa:	4922      	ldr	r1, [pc, #136]	; (8b984 <_free_r+0x15c>)
   8b8fc:	6848      	ldr	r0, [r1, #4]
   8b8fe:	4320      	orrs	r0, r4
   8b900:	6048      	str	r0, [r1, #4]
   8b902:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   8b906:	6881      	ldr	r1, [r0, #8]
   8b908:	e035      	b.n	8b976 <_free_r+0x14e>
   8b90a:	0a54      	lsrs	r4, r2, #9
   8b90c:	2c04      	cmp	r4, #4
   8b90e:	d802      	bhi.n	8b916 <_free_r+0xee>
   8b910:	0994      	lsrs	r4, r2, #6
   8b912:	3438      	adds	r4, #56	; 0x38
   8b914:	e016      	b.n	8b944 <_free_r+0x11c>
   8b916:	2c14      	cmp	r4, #20
   8b918:	d801      	bhi.n	8b91e <_free_r+0xf6>
   8b91a:	345b      	adds	r4, #91	; 0x5b
   8b91c:	e012      	b.n	8b944 <_free_r+0x11c>
   8b91e:	2c54      	cmp	r4, #84	; 0x54
   8b920:	d802      	bhi.n	8b928 <_free_r+0x100>
   8b922:	0b14      	lsrs	r4, r2, #12
   8b924:	346e      	adds	r4, #110	; 0x6e
   8b926:	e00d      	b.n	8b944 <_free_r+0x11c>
   8b928:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
   8b92c:	d802      	bhi.n	8b934 <_free_r+0x10c>
   8b92e:	0bd4      	lsrs	r4, r2, #15
   8b930:	3477      	adds	r4, #119	; 0x77
   8b932:	e007      	b.n	8b944 <_free_r+0x11c>
   8b934:	f240 5554 	movw	r5, #1364	; 0x554
   8b938:	42ac      	cmp	r4, r5
   8b93a:	d802      	bhi.n	8b942 <_free_r+0x11a>
   8b93c:	0c94      	lsrs	r4, r2, #18
   8b93e:	347c      	adds	r4, #124	; 0x7c
   8b940:	e000      	b.n	8b944 <_free_r+0x11c>
   8b942:	247e      	movs	r4, #126	; 0x7e
   8b944:	4d0f      	ldr	r5, [pc, #60]	; (8b984 <_free_r+0x15c>)
   8b946:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   8b94a:	6881      	ldr	r1, [r0, #8]
   8b94c:	4281      	cmp	r1, r0
   8b94e:	d10c      	bne.n	8b96a <_free_r+0x142>
   8b950:	2201      	movs	r2, #1
   8b952:	10a4      	asrs	r4, r4, #2
   8b954:	fa02 f404 	lsl.w	r4, r2, r4
   8b958:	6868      	ldr	r0, [r5, #4]
   8b95a:	ea44 0200 	orr.w	r2, r4, r0
   8b95e:	606a      	str	r2, [r5, #4]
   8b960:	4608      	mov	r0, r1
   8b962:	e008      	b.n	8b976 <_free_r+0x14e>
   8b964:	6889      	ldr	r1, [r1, #8]
   8b966:	4281      	cmp	r1, r0
   8b968:	d004      	beq.n	8b974 <_free_r+0x14c>
   8b96a:	684c      	ldr	r4, [r1, #4]
   8b96c:	f024 0403 	bic.w	r4, r4, #3
   8b970:	42a2      	cmp	r2, r4
   8b972:	d3f7      	bcc.n	8b964 <_free_r+0x13c>
   8b974:	68c8      	ldr	r0, [r1, #12]
   8b976:	60d8      	str	r0, [r3, #12]
   8b978:	6099      	str	r1, [r3, #8]
   8b97a:	6083      	str	r3, [r0, #8]
   8b97c:	60cb      	str	r3, [r1, #12]
   8b97e:	e783      	b.n	8b888 <_free_r+0x60>
   8b980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b982:	bf00      	nop
   8b984:	200706d0 	.word	0x200706d0
   8b988:	20070adc 	.word	0x20070adc
   8b98c:	20071654 	.word	0x20071654
   8b990:	200706d8 	.word	0x200706d8

0008b994 <_malloc_r>:
   8b994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b998:	f101 040b 	add.w	r4, r1, #11
   8b99c:	2c16      	cmp	r4, #22
   8b99e:	4606      	mov	r6, r0
   8b9a0:	d903      	bls.n	8b9aa <_malloc_r+0x16>
   8b9a2:	f034 0407 	bics.w	r4, r4, #7
   8b9a6:	d501      	bpl.n	8b9ac <_malloc_r+0x18>
   8b9a8:	e002      	b.n	8b9b0 <_malloc_r+0x1c>
   8b9aa:	2410      	movs	r4, #16
   8b9ac:	428c      	cmp	r4, r1
   8b9ae:	d202      	bcs.n	8b9b6 <_malloc_r+0x22>
   8b9b0:	250c      	movs	r5, #12
   8b9b2:	6035      	str	r5, [r6, #0]
   8b9b4:	e1d9      	b.n	8bd6a <_malloc_r+0x3d6>
   8b9b6:	4630      	mov	r0, r6
   8b9b8:	f000 f9fc 	bl	8bdb4 <__malloc_lock>
   8b9bc:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   8b9c0:	d214      	bcs.n	8b9ec <_malloc_r+0x58>
   8b9c2:	4da0      	ldr	r5, [pc, #640]	; (8bc44 <_malloc_r+0x2b0>)
   8b9c4:	08e1      	lsrs	r1, r4, #3
   8b9c6:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   8b9ca:	68c5      	ldr	r5, [r0, #12]
   8b9cc:	4285      	cmp	r5, r0
   8b9ce:	d105      	bne.n	8b9dc <_malloc_r+0x48>
   8b9d0:	f105 0308 	add.w	r3, r5, #8
   8b9d4:	696d      	ldr	r5, [r5, #20]
   8b9d6:	1c8a      	adds	r2, r1, #2
   8b9d8:	429d      	cmp	r5, r3
   8b9da:	d044      	beq.n	8ba66 <_malloc_r+0xd2>
   8b9dc:	68e8      	ldr	r0, [r5, #12]
   8b9de:	68a9      	ldr	r1, [r5, #8]
   8b9e0:	686a      	ldr	r2, [r5, #4]
   8b9e2:	60c8      	str	r0, [r1, #12]
   8b9e4:	f022 0303 	bic.w	r3, r2, #3
   8b9e8:	6081      	str	r1, [r0, #8]
   8b9ea:	e059      	b.n	8baa0 <_malloc_r+0x10c>
   8b9ec:	0a62      	lsrs	r2, r4, #9
   8b9ee:	d101      	bne.n	8b9f4 <_malloc_r+0x60>
   8b9f0:	08e2      	lsrs	r2, r4, #3
   8b9f2:	e01b      	b.n	8ba2c <_malloc_r+0x98>
   8b9f4:	2a04      	cmp	r2, #4
   8b9f6:	d802      	bhi.n	8b9fe <_malloc_r+0x6a>
   8b9f8:	09a2      	lsrs	r2, r4, #6
   8b9fa:	3238      	adds	r2, #56	; 0x38
   8b9fc:	e016      	b.n	8ba2c <_malloc_r+0x98>
   8b9fe:	2a14      	cmp	r2, #20
   8ba00:	d801      	bhi.n	8ba06 <_malloc_r+0x72>
   8ba02:	325b      	adds	r2, #91	; 0x5b
   8ba04:	e012      	b.n	8ba2c <_malloc_r+0x98>
   8ba06:	2a54      	cmp	r2, #84	; 0x54
   8ba08:	d802      	bhi.n	8ba10 <_malloc_r+0x7c>
   8ba0a:	0b22      	lsrs	r2, r4, #12
   8ba0c:	326e      	adds	r2, #110	; 0x6e
   8ba0e:	e00d      	b.n	8ba2c <_malloc_r+0x98>
   8ba10:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8ba14:	d802      	bhi.n	8ba1c <_malloc_r+0x88>
   8ba16:	0be2      	lsrs	r2, r4, #15
   8ba18:	3277      	adds	r2, #119	; 0x77
   8ba1a:	e007      	b.n	8ba2c <_malloc_r+0x98>
   8ba1c:	f240 5354 	movw	r3, #1364	; 0x554
   8ba20:	429a      	cmp	r2, r3
   8ba22:	d802      	bhi.n	8ba2a <_malloc_r+0x96>
   8ba24:	0ca2      	lsrs	r2, r4, #18
   8ba26:	327c      	adds	r2, #124	; 0x7c
   8ba28:	e000      	b.n	8ba2c <_malloc_r+0x98>
   8ba2a:	227e      	movs	r2, #126	; 0x7e
   8ba2c:	4885      	ldr	r0, [pc, #532]	; (8bc44 <_malloc_r+0x2b0>)
   8ba2e:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
   8ba32:	68dd      	ldr	r5, [r3, #12]
   8ba34:	429d      	cmp	r5, r3
   8ba36:	d015      	beq.n	8ba64 <_malloc_r+0xd0>
   8ba38:	6869      	ldr	r1, [r5, #4]
   8ba3a:	f021 0103 	bic.w	r1, r1, #3
   8ba3e:	1b08      	subs	r0, r1, r4
   8ba40:	280f      	cmp	r0, #15
   8ba42:	dd01      	ble.n	8ba48 <_malloc_r+0xb4>
   8ba44:	3a01      	subs	r2, #1
   8ba46:	e00d      	b.n	8ba64 <_malloc_r+0xd0>
   8ba48:	2800      	cmp	r0, #0
   8ba4a:	db09      	blt.n	8ba60 <_malloc_r+0xcc>
   8ba4c:	68eb      	ldr	r3, [r5, #12]
   8ba4e:	68aa      	ldr	r2, [r5, #8]
   8ba50:	60d3      	str	r3, [r2, #12]
   8ba52:	609a      	str	r2, [r3, #8]
   8ba54:	186b      	adds	r3, r5, r1
   8ba56:	685a      	ldr	r2, [r3, #4]
   8ba58:	f042 0001 	orr.w	r0, r2, #1
   8ba5c:	6058      	str	r0, [r3, #4]
   8ba5e:	e190      	b.n	8bd82 <_malloc_r+0x3ee>
   8ba60:	68ed      	ldr	r5, [r5, #12]
   8ba62:	e7e7      	b.n	8ba34 <_malloc_r+0xa0>
   8ba64:	3201      	adds	r2, #1
   8ba66:	4977      	ldr	r1, [pc, #476]	; (8bc44 <_malloc_r+0x2b0>)
   8ba68:	690d      	ldr	r5, [r1, #16]
   8ba6a:	f101 0708 	add.w	r7, r1, #8
   8ba6e:	42bd      	cmp	r5, r7
   8ba70:	d068      	beq.n	8bb44 <_malloc_r+0x1b0>
   8ba72:	6868      	ldr	r0, [r5, #4]
   8ba74:	f020 0303 	bic.w	r3, r0, #3
   8ba78:	1b18      	subs	r0, r3, r4
   8ba7a:	280f      	cmp	r0, #15
   8ba7c:	dd0c      	ble.n	8ba98 <_malloc_r+0x104>
   8ba7e:	192b      	adds	r3, r5, r4
   8ba80:	614b      	str	r3, [r1, #20]
   8ba82:	610b      	str	r3, [r1, #16]
   8ba84:	f044 0401 	orr.w	r4, r4, #1
   8ba88:	f040 0101 	orr.w	r1, r0, #1
   8ba8c:	606c      	str	r4, [r5, #4]
   8ba8e:	60df      	str	r7, [r3, #12]
   8ba90:	609f      	str	r7, [r3, #8]
   8ba92:	6059      	str	r1, [r3, #4]
   8ba94:	5018      	str	r0, [r3, r0]
   8ba96:	e174      	b.n	8bd82 <_malloc_r+0x3ee>
   8ba98:	2800      	cmp	r0, #0
   8ba9a:	614f      	str	r7, [r1, #20]
   8ba9c:	610f      	str	r7, [r1, #16]
   8ba9e:	db01      	blt.n	8baa4 <_malloc_r+0x110>
   8baa0:	18eb      	adds	r3, r5, r3
   8baa2:	e7d8      	b.n	8ba56 <_malloc_r+0xc2>
   8baa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8baa8:	d20f      	bcs.n	8baca <_malloc_r+0x136>
   8baaa:	08db      	lsrs	r3, r3, #3
   8baac:	1098      	asrs	r0, r3, #2
   8baae:	2701      	movs	r7, #1
   8bab0:	fa07 f700 	lsl.w	r7, r7, r0
   8bab4:	6848      	ldr	r0, [r1, #4]
   8bab6:	4307      	orrs	r7, r0
   8bab8:	604f      	str	r7, [r1, #4]
   8baba:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   8babe:	688b      	ldr	r3, [r1, #8]
   8bac0:	60e9      	str	r1, [r5, #12]
   8bac2:	60ab      	str	r3, [r5, #8]
   8bac4:	60dd      	str	r5, [r3, #12]
   8bac6:	608d      	str	r5, [r1, #8]
   8bac8:	e03c      	b.n	8bb44 <_malloc_r+0x1b0>
   8baca:	0a58      	lsrs	r0, r3, #9
   8bacc:	2804      	cmp	r0, #4
   8bace:	d802      	bhi.n	8bad6 <_malloc_r+0x142>
   8bad0:	0998      	lsrs	r0, r3, #6
   8bad2:	3038      	adds	r0, #56	; 0x38
   8bad4:	e016      	b.n	8bb04 <_malloc_r+0x170>
   8bad6:	2814      	cmp	r0, #20
   8bad8:	d801      	bhi.n	8bade <_malloc_r+0x14a>
   8bada:	305b      	adds	r0, #91	; 0x5b
   8badc:	e012      	b.n	8bb04 <_malloc_r+0x170>
   8bade:	2854      	cmp	r0, #84	; 0x54
   8bae0:	d802      	bhi.n	8bae8 <_malloc_r+0x154>
   8bae2:	0b18      	lsrs	r0, r3, #12
   8bae4:	306e      	adds	r0, #110	; 0x6e
   8bae6:	e00d      	b.n	8bb04 <_malloc_r+0x170>
   8bae8:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   8baec:	d802      	bhi.n	8baf4 <_malloc_r+0x160>
   8baee:	0bd8      	lsrs	r0, r3, #15
   8baf0:	3077      	adds	r0, #119	; 0x77
   8baf2:	e007      	b.n	8bb04 <_malloc_r+0x170>
   8baf4:	f240 5754 	movw	r7, #1364	; 0x554
   8baf8:	42b8      	cmp	r0, r7
   8bafa:	d802      	bhi.n	8bb02 <_malloc_r+0x16e>
   8bafc:	0c98      	lsrs	r0, r3, #18
   8bafe:	307c      	adds	r0, #124	; 0x7c
   8bb00:	e000      	b.n	8bb04 <_malloc_r+0x170>
   8bb02:	207e      	movs	r0, #126	; 0x7e
   8bb04:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8bc44 <_malloc_r+0x2b0>
   8bb08:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
   8bb0c:	68b9      	ldr	r1, [r7, #8]
   8bb0e:	42b9      	cmp	r1, r7
   8bb10:	d10e      	bne.n	8bb30 <_malloc_r+0x19c>
   8bb12:	1087      	asrs	r7, r0, #2
   8bb14:	2301      	movs	r3, #1
   8bb16:	fa03 f007 	lsl.w	r0, r3, r7
   8bb1a:	f8de 7004 	ldr.w	r7, [lr, #4]
   8bb1e:	ea40 0307 	orr.w	r3, r0, r7
   8bb22:	f8ce 3004 	str.w	r3, [lr, #4]
   8bb26:	4608      	mov	r0, r1
   8bb28:	e008      	b.n	8bb3c <_malloc_r+0x1a8>
   8bb2a:	6889      	ldr	r1, [r1, #8]
   8bb2c:	42b9      	cmp	r1, r7
   8bb2e:	d004      	beq.n	8bb3a <_malloc_r+0x1a6>
   8bb30:	6848      	ldr	r0, [r1, #4]
   8bb32:	f020 0003 	bic.w	r0, r0, #3
   8bb36:	4283      	cmp	r3, r0
   8bb38:	d3f7      	bcc.n	8bb2a <_malloc_r+0x196>
   8bb3a:	68c8      	ldr	r0, [r1, #12]
   8bb3c:	60e8      	str	r0, [r5, #12]
   8bb3e:	60a9      	str	r1, [r5, #8]
   8bb40:	60cd      	str	r5, [r1, #12]
   8bb42:	6085      	str	r5, [r0, #8]
   8bb44:	1095      	asrs	r5, r2, #2
   8bb46:	2001      	movs	r0, #1
   8bb48:	fa00 f305 	lsl.w	r3, r0, r5
   8bb4c:	4f3d      	ldr	r7, [pc, #244]	; (8bc44 <_malloc_r+0x2b0>)
   8bb4e:	6879      	ldr	r1, [r7, #4]
   8bb50:	428b      	cmp	r3, r1
   8bb52:	d85d      	bhi.n	8bc10 <_malloc_r+0x27c>
   8bb54:	420b      	tst	r3, r1
   8bb56:	d105      	bne.n	8bb64 <_malloc_r+0x1d0>
   8bb58:	f022 0203 	bic.w	r2, r2, #3
   8bb5c:	005b      	lsls	r3, r3, #1
   8bb5e:	3204      	adds	r2, #4
   8bb60:	420b      	tst	r3, r1
   8bb62:	d0fb      	beq.n	8bb5c <_malloc_r+0x1c8>
   8bb64:	4d37      	ldr	r5, [pc, #220]	; (8bc44 <_malloc_r+0x2b0>)
   8bb66:	4610      	mov	r0, r2
   8bb68:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
   8bb6c:	4677      	mov	r7, lr
   8bb6e:	68fd      	ldr	r5, [r7, #12]
   8bb70:	42bd      	cmp	r5, r7
   8bb72:	d02d      	beq.n	8bbd0 <_malloc_r+0x23c>
   8bb74:	6869      	ldr	r1, [r5, #4]
   8bb76:	f021 0c03 	bic.w	ip, r1, #3
   8bb7a:	ebc4 010c 	rsb	r1, r4, ip
   8bb7e:	290f      	cmp	r1, #15
   8bb80:	dd13      	ble.n	8bbaa <_malloc_r+0x216>
   8bb82:	192b      	adds	r3, r5, r4
   8bb84:	f044 0401 	orr.w	r4, r4, #1
   8bb88:	68ea      	ldr	r2, [r5, #12]
   8bb8a:	606c      	str	r4, [r5, #4]
   8bb8c:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8bb90:	5059      	str	r1, [r3, r1]
   8bb92:	60c2      	str	r2, [r0, #12]
   8bb94:	6090      	str	r0, [r2, #8]
   8bb96:	4a2b      	ldr	r2, [pc, #172]	; (8bc44 <_malloc_r+0x2b0>)
   8bb98:	f041 0001 	orr.w	r0, r1, #1
   8bb9c:	6153      	str	r3, [r2, #20]
   8bb9e:	6113      	str	r3, [r2, #16]
   8bba0:	3208      	adds	r2, #8
   8bba2:	60da      	str	r2, [r3, #12]
   8bba4:	609a      	str	r2, [r3, #8]
   8bba6:	6058      	str	r0, [r3, #4]
   8bba8:	e00c      	b.n	8bbc4 <_malloc_r+0x230>
   8bbaa:	2900      	cmp	r1, #0
   8bbac:	db0e      	blt.n	8bbcc <_malloc_r+0x238>
   8bbae:	eb05 000c 	add.w	r0, r5, ip
   8bbb2:	6842      	ldr	r2, [r0, #4]
   8bbb4:	68e9      	ldr	r1, [r5, #12]
   8bbb6:	f042 0301 	orr.w	r3, r2, #1
   8bbba:	6043      	str	r3, [r0, #4]
   8bbbc:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8bbc0:	60c1      	str	r1, [r0, #12]
   8bbc2:	6088      	str	r0, [r1, #8]
   8bbc4:	4630      	mov	r0, r6
   8bbc6:	f000 f8f6 	bl	8bdb6 <__malloc_unlock>
   8bbca:	e0de      	b.n	8bd8a <_malloc_r+0x3f6>
   8bbcc:	68ed      	ldr	r5, [r5, #12]
   8bbce:	e7cf      	b.n	8bb70 <_malloc_r+0x1dc>
   8bbd0:	3001      	adds	r0, #1
   8bbd2:	0781      	lsls	r1, r0, #30
   8bbd4:	f105 0708 	add.w	r7, r5, #8
   8bbd8:	d1c9      	bne.n	8bb6e <_malloc_r+0x1da>
   8bbda:	4671      	mov	r1, lr
   8bbdc:	0795      	lsls	r5, r2, #30
   8bbde:	d105      	bne.n	8bbec <_malloc_r+0x258>
   8bbe0:	4a18      	ldr	r2, [pc, #96]	; (8bc44 <_malloc_r+0x2b0>)
   8bbe2:	6855      	ldr	r5, [r2, #4]
   8bbe4:	ea25 0503 	bic.w	r5, r5, r3
   8bbe8:	6055      	str	r5, [r2, #4]
   8bbea:	e005      	b.n	8bbf8 <_malloc_r+0x264>
   8bbec:	f1a1 0708 	sub.w	r7, r1, #8
   8bbf0:	6809      	ldr	r1, [r1, #0]
   8bbf2:	3a01      	subs	r2, #1
   8bbf4:	42b9      	cmp	r1, r7
   8bbf6:	d0f1      	beq.n	8bbdc <_malloc_r+0x248>
   8bbf8:	4f12      	ldr	r7, [pc, #72]	; (8bc44 <_malloc_r+0x2b0>)
   8bbfa:	005b      	lsls	r3, r3, #1
   8bbfc:	687f      	ldr	r7, [r7, #4]
   8bbfe:	42bb      	cmp	r3, r7
   8bc00:	d806      	bhi.n	8bc10 <_malloc_r+0x27c>
   8bc02:	b12b      	cbz	r3, 8bc10 <_malloc_r+0x27c>
   8bc04:	4602      	mov	r2, r0
   8bc06:	423b      	tst	r3, r7
   8bc08:	d1ac      	bne.n	8bb64 <_malloc_r+0x1d0>
   8bc0a:	3204      	adds	r2, #4
   8bc0c:	005b      	lsls	r3, r3, #1
   8bc0e:	e7fa      	b.n	8bc06 <_malloc_r+0x272>
   8bc10:	4b0c      	ldr	r3, [pc, #48]	; (8bc44 <_malloc_r+0x2b0>)
   8bc12:	689f      	ldr	r7, [r3, #8]
   8bc14:	4619      	mov	r1, r3
   8bc16:	6878      	ldr	r0, [r7, #4]
   8bc18:	f020 0903 	bic.w	r9, r0, #3
   8bc1c:	45a1      	cmp	r9, r4
   8bc1e:	d304      	bcc.n	8bc2a <_malloc_r+0x296>
   8bc20:	ebc4 0009 	rsb	r0, r4, r9
   8bc24:	280f      	cmp	r0, #15
   8bc26:	f300 80a2 	bgt.w	8bd6e <_malloc_r+0x3da>
   8bc2a:	4a07      	ldr	r2, [pc, #28]	; (8bc48 <_malloc_r+0x2b4>)
   8bc2c:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
   8bc30:	6815      	ldr	r5, [r2, #0]
   8bc32:	3301      	adds	r3, #1
   8bc34:	eb07 0a09 	add.w	sl, r7, r9
   8bc38:	eb04 0805 	add.w	r8, r4, r5
   8bc3c:	d106      	bne.n	8bc4c <_malloc_r+0x2b8>
   8bc3e:	f108 0810 	add.w	r8, r8, #16
   8bc42:	e00b      	b.n	8bc5c <_malloc_r+0x2c8>
   8bc44:	200706d0 	.word	0x200706d0
   8bc48:	20071654 	.word	0x20071654
   8bc4c:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   8bc50:	f100 010f 	add.w	r1, r0, #15
   8bc54:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   8bc58:	f022 080f 	bic.w	r8, r2, #15
   8bc5c:	4630      	mov	r0, r6
   8bc5e:	4641      	mov	r1, r8
   8bc60:	f000 fa18 	bl	8c094 <_sbrk_r>
   8bc64:	1c42      	adds	r2, r0, #1
   8bc66:	4605      	mov	r5, r0
   8bc68:	d071      	beq.n	8bd4e <_malloc_r+0x3ba>
   8bc6a:	4550      	cmp	r0, sl
   8bc6c:	d202      	bcs.n	8bc74 <_malloc_r+0x2e0>
   8bc6e:	4b48      	ldr	r3, [pc, #288]	; (8bd90 <_malloc_r+0x3fc>)
   8bc70:	429f      	cmp	r7, r3
   8bc72:	d16c      	bne.n	8bd4e <_malloc_r+0x3ba>
   8bc74:	4847      	ldr	r0, [pc, #284]	; (8bd94 <_malloc_r+0x400>)
   8bc76:	4555      	cmp	r5, sl
   8bc78:	6841      	ldr	r1, [r0, #4]
   8bc7a:	4a45      	ldr	r2, [pc, #276]	; (8bd90 <_malloc_r+0x3fc>)
   8bc7c:	eb08 0301 	add.w	r3, r8, r1
   8bc80:	6043      	str	r3, [r0, #4]
   8bc82:	d107      	bne.n	8bc94 <_malloc_r+0x300>
   8bc84:	0529      	lsls	r1, r5, #20
   8bc86:	d105      	bne.n	8bc94 <_malloc_r+0x300>
   8bc88:	6895      	ldr	r5, [r2, #8]
   8bc8a:	44c8      	add	r8, r9
   8bc8c:	f048 0001 	orr.w	r0, r8, #1
   8bc90:	6068      	str	r0, [r5, #4]
   8bc92:	e051      	b.n	8bd38 <_malloc_r+0x3a4>
   8bc94:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   8bc98:	1c42      	adds	r2, r0, #1
   8bc9a:	d103      	bne.n	8bca4 <_malloc_r+0x310>
   8bc9c:	4a3c      	ldr	r2, [pc, #240]	; (8bd90 <_malloc_r+0x3fc>)
   8bc9e:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
   8bca2:	e005      	b.n	8bcb0 <_malloc_r+0x31c>
   8bca4:	ebca 0a05 	rsb	sl, sl, r5
   8bca8:	eb03 010a 	add.w	r1, r3, sl
   8bcac:	4b39      	ldr	r3, [pc, #228]	; (8bd94 <_malloc_r+0x400>)
   8bcae:	6059      	str	r1, [r3, #4]
   8bcb0:	f015 0007 	ands.w	r0, r5, #7
   8bcb4:	bf1c      	itt	ne
   8bcb6:	f1c0 0008 	rsbne	r0, r0, #8
   8bcba:	182d      	addne	r5, r5, r0
   8bcbc:	eb05 0c08 	add.w	ip, r5, r8
   8bcc0:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   8bcc4:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
   8bcc8:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
   8bccc:	4641      	mov	r1, r8
   8bcce:	4630      	mov	r0, r6
   8bcd0:	f000 f9e0 	bl	8c094 <_sbrk_r>
   8bcd4:	4a2f      	ldr	r2, [pc, #188]	; (8bd94 <_malloc_r+0x400>)
   8bcd6:	1c43      	adds	r3, r0, #1
   8bcd8:	6853      	ldr	r3, [r2, #4]
   8bcda:	bf08      	it	eq
   8bcdc:	f04f 0800 	moveq.w	r8, #0
   8bce0:	eb08 0103 	add.w	r1, r8, r3
   8bce4:	bf08      	it	eq
   8bce6:	4628      	moveq	r0, r5
   8bce8:	6051      	str	r1, [r2, #4]
   8bcea:	1b40      	subs	r0, r0, r5
   8bcec:	4a28      	ldr	r2, [pc, #160]	; (8bd90 <_malloc_r+0x3fc>)
   8bcee:	eb00 0308 	add.w	r3, r0, r8
   8bcf2:	f043 0101 	orr.w	r1, r3, #1
   8bcf6:	4297      	cmp	r7, r2
   8bcf8:	6095      	str	r5, [r2, #8]
   8bcfa:	6069      	str	r1, [r5, #4]
   8bcfc:	d01c      	beq.n	8bd38 <_malloc_r+0x3a4>
   8bcfe:	f1b9 0f0f 	cmp.w	r9, #15
   8bd02:	d802      	bhi.n	8bd0a <_malloc_r+0x376>
   8bd04:	2201      	movs	r2, #1
   8bd06:	606a      	str	r2, [r5, #4]
   8bd08:	e021      	b.n	8bd4e <_malloc_r+0x3ba>
   8bd0a:	687d      	ldr	r5, [r7, #4]
   8bd0c:	f1a9 090c 	sub.w	r9, r9, #12
   8bd10:	f029 0907 	bic.w	r9, r9, #7
   8bd14:	f005 0201 	and.w	r2, r5, #1
   8bd18:	2105      	movs	r1, #5
   8bd1a:	eb07 0309 	add.w	r3, r7, r9
   8bd1e:	ea49 0002 	orr.w	r0, r9, r2
   8bd22:	f1b9 0f0f 	cmp.w	r9, #15
   8bd26:	6078      	str	r0, [r7, #4]
   8bd28:	6059      	str	r1, [r3, #4]
   8bd2a:	6099      	str	r1, [r3, #8]
   8bd2c:	d904      	bls.n	8bd38 <_malloc_r+0x3a4>
   8bd2e:	4630      	mov	r0, r6
   8bd30:	f107 0108 	add.w	r1, r7, #8
   8bd34:	f7ff fd78 	bl	8b828 <_free_r>
   8bd38:	4a16      	ldr	r2, [pc, #88]	; (8bd94 <_malloc_r+0x400>)
   8bd3a:	6853      	ldr	r3, [r2, #4]
   8bd3c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   8bd3e:	6b15      	ldr	r5, [r2, #48]	; 0x30
   8bd40:	428b      	cmp	r3, r1
   8bd42:	bf88      	it	hi
   8bd44:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   8bd46:	42ab      	cmp	r3, r5
   8bd48:	bf84      	itt	hi
   8bd4a:	4d12      	ldrhi	r5, [pc, #72]	; (8bd94 <_malloc_r+0x400>)
   8bd4c:	632b      	strhi	r3, [r5, #48]	; 0x30
   8bd4e:	4810      	ldr	r0, [pc, #64]	; (8bd90 <_malloc_r+0x3fc>)
   8bd50:	6882      	ldr	r2, [r0, #8]
   8bd52:	6853      	ldr	r3, [r2, #4]
   8bd54:	f023 0103 	bic.w	r1, r3, #3
   8bd58:	42a1      	cmp	r1, r4
   8bd5a:	ebc4 0001 	rsb	r0, r4, r1
   8bd5e:	d301      	bcc.n	8bd64 <_malloc_r+0x3d0>
   8bd60:	280f      	cmp	r0, #15
   8bd62:	dc04      	bgt.n	8bd6e <_malloc_r+0x3da>
   8bd64:	4630      	mov	r0, r6
   8bd66:	f000 f826 	bl	8bdb6 <__malloc_unlock>
   8bd6a:	2500      	movs	r5, #0
   8bd6c:	e00d      	b.n	8bd8a <_malloc_r+0x3f6>
   8bd6e:	4a08      	ldr	r2, [pc, #32]	; (8bd90 <_malloc_r+0x3fc>)
   8bd70:	f044 0301 	orr.w	r3, r4, #1
   8bd74:	6895      	ldr	r5, [r2, #8]
   8bd76:	f040 0101 	orr.w	r1, r0, #1
   8bd7a:	192c      	adds	r4, r5, r4
   8bd7c:	606b      	str	r3, [r5, #4]
   8bd7e:	6094      	str	r4, [r2, #8]
   8bd80:	6061      	str	r1, [r4, #4]
   8bd82:	4630      	mov	r0, r6
   8bd84:	f000 f817 	bl	8bdb6 <__malloc_unlock>
   8bd88:	3508      	adds	r5, #8
   8bd8a:	4628      	mov	r0, r5
   8bd8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8bd90:	200706d0 	.word	0x200706d0
   8bd94:	20071654 	.word	0x20071654

0008bd98 <memchr>:
   8bd98:	b510      	push	{r4, lr}
   8bd9a:	b2c9      	uxtb	r1, r1
   8bd9c:	4603      	mov	r3, r0
   8bd9e:	1882      	adds	r2, r0, r2
   8bda0:	4293      	cmp	r3, r2
   8bda2:	4618      	mov	r0, r3
   8bda4:	d004      	beq.n	8bdb0 <memchr+0x18>
   8bda6:	7804      	ldrb	r4, [r0, #0]
   8bda8:	3301      	adds	r3, #1
   8bdaa:	428c      	cmp	r4, r1
   8bdac:	d1f8      	bne.n	8bda0 <memchr+0x8>
   8bdae:	e000      	b.n	8bdb2 <memchr+0x1a>
   8bdb0:	2000      	movs	r0, #0
   8bdb2:	bd10      	pop	{r4, pc}

0008bdb4 <__malloc_lock>:
   8bdb4:	4770      	bx	lr

0008bdb6 <__malloc_unlock>:
   8bdb6:	4770      	bx	lr

0008bdb8 <_realloc_r>:
   8bdb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bdbc:	4681      	mov	r9, r0
   8bdbe:	4616      	mov	r6, r2
   8bdc0:	460c      	mov	r4, r1
   8bdc2:	b921      	cbnz	r1, 8bdce <_realloc_r+0x16>
   8bdc4:	4611      	mov	r1, r2
   8bdc6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bdca:	f7ff bde3 	b.w	8b994 <_malloc_r>
   8bdce:	f7ff fff1 	bl	8bdb4 <__malloc_lock>
   8bdd2:	f106 070b 	add.w	r7, r6, #11
   8bdd6:	f854 5c04 	ldr.w	r5, [r4, #-4]
   8bdda:	2f16      	cmp	r7, #22
   8bddc:	f1a4 0b08 	sub.w	fp, r4, #8
   8bde0:	f025 0803 	bic.w	r8, r5, #3
   8bde4:	d903      	bls.n	8bdee <_realloc_r+0x36>
   8bde6:	f037 0707 	bics.w	r7, r7, #7
   8bdea:	d501      	bpl.n	8bdf0 <_realloc_r+0x38>
   8bdec:	e002      	b.n	8bdf4 <_realloc_r+0x3c>
   8bdee:	2710      	movs	r7, #16
   8bdf0:	42b7      	cmp	r7, r6
   8bdf2:	d204      	bcs.n	8bdfe <_realloc_r+0x46>
   8bdf4:	200c      	movs	r0, #12
   8bdf6:	f8c9 0000 	str.w	r0, [r9]
   8bdfa:	2600      	movs	r6, #0
   8bdfc:	e145      	b.n	8c08a <_realloc_r+0x2d2>
   8bdfe:	45b8      	cmp	r8, r7
   8be00:	f280 811a 	bge.w	8c038 <_realloc_r+0x280>
   8be04:	4aa2      	ldr	r2, [pc, #648]	; (8c090 <_realloc_r+0x2d8>)
   8be06:	eb0b 0308 	add.w	r3, fp, r8
   8be0a:	6891      	ldr	r1, [r2, #8]
   8be0c:	428b      	cmp	r3, r1
   8be0e:	d006      	beq.n	8be1e <_realloc_r+0x66>
   8be10:	6858      	ldr	r0, [r3, #4]
   8be12:	f020 0201 	bic.w	r2, r0, #1
   8be16:	1898      	adds	r0, r3, r2
   8be18:	6842      	ldr	r2, [r0, #4]
   8be1a:	07d0      	lsls	r0, r2, #31
   8be1c:	d426      	bmi.n	8be6c <_realloc_r+0xb4>
   8be1e:	685a      	ldr	r2, [r3, #4]
   8be20:	428b      	cmp	r3, r1
   8be22:	f022 0003 	bic.w	r0, r2, #3
   8be26:	eb00 0a08 	add.w	sl, r0, r8
   8be2a:	d118      	bne.n	8be5e <_realloc_r+0xa6>
   8be2c:	f107 0210 	add.w	r2, r7, #16
   8be30:	4592      	cmp	sl, r2
   8be32:	db1d      	blt.n	8be70 <_realloc_r+0xb8>
   8be34:	ebc7 0a0a 	rsb	sl, r7, sl
   8be38:	eb0b 0507 	add.w	r5, fp, r7
   8be3c:	f04a 0101 	orr.w	r1, sl, #1
   8be40:	6069      	str	r1, [r5, #4]
   8be42:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8be46:	4e92      	ldr	r6, [pc, #584]	; (8c090 <_realloc_r+0x2d8>)
   8be48:	f002 0301 	and.w	r3, r2, #1
   8be4c:	431f      	orrs	r7, r3
   8be4e:	60b5      	str	r5, [r6, #8]
   8be50:	f844 7c04 	str.w	r7, [r4, #-4]
   8be54:	4648      	mov	r0, r9
   8be56:	f7ff ffae 	bl	8bdb6 <__malloc_unlock>
   8be5a:	4626      	mov	r6, r4
   8be5c:	e115      	b.n	8c08a <_realloc_r+0x2d2>
   8be5e:	45ba      	cmp	sl, r7
   8be60:	db06      	blt.n	8be70 <_realloc_r+0xb8>
   8be62:	68dd      	ldr	r5, [r3, #12]
   8be64:	689e      	ldr	r6, [r3, #8]
   8be66:	60f5      	str	r5, [r6, #12]
   8be68:	60ae      	str	r6, [r5, #8]
   8be6a:	e0e6      	b.n	8c03a <_realloc_r+0x282>
   8be6c:	2000      	movs	r0, #0
   8be6e:	4603      	mov	r3, r0
   8be70:	07ea      	lsls	r2, r5, #31
   8be72:	f100 8091 	bmi.w	8bf98 <_realloc_r+0x1e0>
   8be76:	f854 5c08 	ldr.w	r5, [r4, #-8]
   8be7a:	ebc5 050b 	rsb	r5, r5, fp
   8be7e:	686a      	ldr	r2, [r5, #4]
   8be80:	f022 0203 	bic.w	r2, r2, #3
   8be84:	2b00      	cmp	r3, #0
   8be86:	d051      	beq.n	8bf2c <_realloc_r+0x174>
   8be88:	eb02 0a08 	add.w	sl, r2, r8
   8be8c:	428b      	cmp	r3, r1
   8be8e:	4482      	add	sl, r0
   8be90:	d145      	bne.n	8bf1e <_realloc_r+0x166>
   8be92:	f107 0310 	add.w	r3, r7, #16
   8be96:	459a      	cmp	sl, r3
   8be98:	db48      	blt.n	8bf2c <_realloc_r+0x174>
   8be9a:	462e      	mov	r6, r5
   8be9c:	68e9      	ldr	r1, [r5, #12]
   8be9e:	f856 3f08 	ldr.w	r3, [r6, #8]!
   8bea2:	f1a8 0204 	sub.w	r2, r8, #4
   8bea6:	2a24      	cmp	r2, #36	; 0x24
   8bea8:	60d9      	str	r1, [r3, #12]
   8beaa:	608b      	str	r3, [r1, #8]
   8beac:	d825      	bhi.n	8befa <_realloc_r+0x142>
   8beae:	2a13      	cmp	r2, #19
   8beb0:	d91b      	bls.n	8beea <_realloc_r+0x132>
   8beb2:	6821      	ldr	r1, [r4, #0]
   8beb4:	2a1b      	cmp	r2, #27
   8beb6:	60a9      	str	r1, [r5, #8]
   8beb8:	6863      	ldr	r3, [r4, #4]
   8beba:	60eb      	str	r3, [r5, #12]
   8bebc:	d803      	bhi.n	8bec6 <_realloc_r+0x10e>
   8bebe:	f105 0010 	add.w	r0, r5, #16
   8bec2:	3408      	adds	r4, #8
   8bec4:	e012      	b.n	8beec <_realloc_r+0x134>
   8bec6:	68a0      	ldr	r0, [r4, #8]
   8bec8:	2a24      	cmp	r2, #36	; 0x24
   8beca:	6128      	str	r0, [r5, #16]
   8becc:	68e1      	ldr	r1, [r4, #12]
   8bece:	6169      	str	r1, [r5, #20]
   8bed0:	d003      	beq.n	8beda <_realloc_r+0x122>
   8bed2:	f105 0018 	add.w	r0, r5, #24
   8bed6:	3410      	adds	r4, #16
   8bed8:	e008      	b.n	8beec <_realloc_r+0x134>
   8beda:	6922      	ldr	r2, [r4, #16]
   8bedc:	f105 0020 	add.w	r0, r5, #32
   8bee0:	61aa      	str	r2, [r5, #24]
   8bee2:	6963      	ldr	r3, [r4, #20]
   8bee4:	3418      	adds	r4, #24
   8bee6:	61eb      	str	r3, [r5, #28]
   8bee8:	e000      	b.n	8beec <_realloc_r+0x134>
   8beea:	4630      	mov	r0, r6
   8beec:	6821      	ldr	r1, [r4, #0]
   8beee:	6001      	str	r1, [r0, #0]
   8bef0:	6862      	ldr	r2, [r4, #4]
   8bef2:	6042      	str	r2, [r0, #4]
   8bef4:	68a3      	ldr	r3, [r4, #8]
   8bef6:	6083      	str	r3, [r0, #8]
   8bef8:	e003      	b.n	8bf02 <_realloc_r+0x14a>
   8befa:	4630      	mov	r0, r6
   8befc:	4621      	mov	r1, r4
   8befe:	f7fe feda 	bl	8acb6 <memmove>
   8bf02:	ebc7 0a0a 	rsb	sl, r7, sl
   8bf06:	19e8      	adds	r0, r5, r7
   8bf08:	f04a 0201 	orr.w	r2, sl, #1
   8bf0c:	6042      	str	r2, [r0, #4]
   8bf0e:	686b      	ldr	r3, [r5, #4]
   8bf10:	495f      	ldr	r1, [pc, #380]	; (8c090 <_realloc_r+0x2d8>)
   8bf12:	6088      	str	r0, [r1, #8]
   8bf14:	f003 0001 	and.w	r0, r3, #1
   8bf18:	4307      	orrs	r7, r0
   8bf1a:	606f      	str	r7, [r5, #4]
   8bf1c:	e088      	b.n	8c030 <_realloc_r+0x278>
   8bf1e:	45ba      	cmp	sl, r7
   8bf20:	db04      	blt.n	8bf2c <_realloc_r+0x174>
   8bf22:	68d9      	ldr	r1, [r3, #12]
   8bf24:	6898      	ldr	r0, [r3, #8]
   8bf26:	60c1      	str	r1, [r0, #12]
   8bf28:	6088      	str	r0, [r1, #8]
   8bf2a:	e003      	b.n	8bf34 <_realloc_r+0x17c>
   8bf2c:	eb02 0a08 	add.w	sl, r2, r8
   8bf30:	45ba      	cmp	sl, r7
   8bf32:	db31      	blt.n	8bf98 <_realloc_r+0x1e0>
   8bf34:	4628      	mov	r0, r5
   8bf36:	68eb      	ldr	r3, [r5, #12]
   8bf38:	f850 1f08 	ldr.w	r1, [r0, #8]!
   8bf3c:	f1a8 0204 	sub.w	r2, r8, #4
   8bf40:	2a24      	cmp	r2, #36	; 0x24
   8bf42:	60cb      	str	r3, [r1, #12]
   8bf44:	6099      	str	r1, [r3, #8]
   8bf46:	d823      	bhi.n	8bf90 <_realloc_r+0x1d8>
   8bf48:	2a13      	cmp	r2, #19
   8bf4a:	d91a      	bls.n	8bf82 <_realloc_r+0x1ca>
   8bf4c:	6820      	ldr	r0, [r4, #0]
   8bf4e:	2a1b      	cmp	r2, #27
   8bf50:	60a8      	str	r0, [r5, #8]
   8bf52:	6866      	ldr	r6, [r4, #4]
   8bf54:	60ee      	str	r6, [r5, #12]
   8bf56:	d803      	bhi.n	8bf60 <_realloc_r+0x1a8>
   8bf58:	f105 0010 	add.w	r0, r5, #16
   8bf5c:	3408      	adds	r4, #8
   8bf5e:	e010      	b.n	8bf82 <_realloc_r+0x1ca>
   8bf60:	68a3      	ldr	r3, [r4, #8]
   8bf62:	2a24      	cmp	r2, #36	; 0x24
   8bf64:	612b      	str	r3, [r5, #16]
   8bf66:	68e1      	ldr	r1, [r4, #12]
   8bf68:	6169      	str	r1, [r5, #20]
   8bf6a:	d003      	beq.n	8bf74 <_realloc_r+0x1bc>
   8bf6c:	f105 0018 	add.w	r0, r5, #24
   8bf70:	3410      	adds	r4, #16
   8bf72:	e006      	b.n	8bf82 <_realloc_r+0x1ca>
   8bf74:	6922      	ldr	r2, [r4, #16]
   8bf76:	61aa      	str	r2, [r5, #24]
   8bf78:	6960      	ldr	r0, [r4, #20]
   8bf7a:	3418      	adds	r4, #24
   8bf7c:	61e8      	str	r0, [r5, #28]
   8bf7e:	f105 0020 	add.w	r0, r5, #32
   8bf82:	6826      	ldr	r6, [r4, #0]
   8bf84:	6006      	str	r6, [r0, #0]
   8bf86:	6863      	ldr	r3, [r4, #4]
   8bf88:	6043      	str	r3, [r0, #4]
   8bf8a:	68a1      	ldr	r1, [r4, #8]
   8bf8c:	6081      	str	r1, [r0, #8]
   8bf8e:	e055      	b.n	8c03c <_realloc_r+0x284>
   8bf90:	4621      	mov	r1, r4
   8bf92:	f7fe fe90 	bl	8acb6 <memmove>
   8bf96:	e051      	b.n	8c03c <_realloc_r+0x284>
   8bf98:	4631      	mov	r1, r6
   8bf9a:	4648      	mov	r0, r9
   8bf9c:	f7ff fcfa 	bl	8b994 <_malloc_r>
   8bfa0:	4606      	mov	r6, r0
   8bfa2:	2800      	cmp	r0, #0
   8bfa4:	d044      	beq.n	8c030 <_realloc_r+0x278>
   8bfa6:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8bfaa:	f1a0 0208 	sub.w	r2, r0, #8
   8bfae:	f021 0301 	bic.w	r3, r1, #1
   8bfb2:	eb0b 0103 	add.w	r1, fp, r3
   8bfb6:	428a      	cmp	r2, r1
   8bfb8:	d106      	bne.n	8bfc8 <_realloc_r+0x210>
   8bfba:	f850 6c04 	ldr.w	r6, [r0, #-4]
   8bfbe:	f026 0503 	bic.w	r5, r6, #3
   8bfc2:	eb05 0a08 	add.w	sl, r5, r8
   8bfc6:	e038      	b.n	8c03a <_realloc_r+0x282>
   8bfc8:	f1a8 0204 	sub.w	r2, r8, #4
   8bfcc:	2a24      	cmp	r2, #36	; 0x24
   8bfce:	d828      	bhi.n	8c022 <_realloc_r+0x26a>
   8bfd0:	2a13      	cmp	r2, #19
   8bfd2:	d91e      	bls.n	8c012 <_realloc_r+0x25a>
   8bfd4:	6823      	ldr	r3, [r4, #0]
   8bfd6:	2a1b      	cmp	r2, #27
   8bfd8:	6003      	str	r3, [r0, #0]
   8bfda:	6861      	ldr	r1, [r4, #4]
   8bfdc:	6041      	str	r1, [r0, #4]
   8bfde:	d804      	bhi.n	8bfea <_realloc_r+0x232>
   8bfe0:	f100 0008 	add.w	r0, r0, #8
   8bfe4:	f104 0208 	add.w	r2, r4, #8
   8bfe8:	e014      	b.n	8c014 <_realloc_r+0x25c>
   8bfea:	68a0      	ldr	r0, [r4, #8]
   8bfec:	2a24      	cmp	r2, #36	; 0x24
   8bfee:	60b0      	str	r0, [r6, #8]
   8bff0:	68e3      	ldr	r3, [r4, #12]
   8bff2:	60f3      	str	r3, [r6, #12]
   8bff4:	d004      	beq.n	8c000 <_realloc_r+0x248>
   8bff6:	f106 0010 	add.w	r0, r6, #16
   8bffa:	f104 0210 	add.w	r2, r4, #16
   8bffe:	e009      	b.n	8c014 <_realloc_r+0x25c>
   8c000:	6922      	ldr	r2, [r4, #16]
   8c002:	f106 0018 	add.w	r0, r6, #24
   8c006:	6132      	str	r2, [r6, #16]
   8c008:	6961      	ldr	r1, [r4, #20]
   8c00a:	f104 0218 	add.w	r2, r4, #24
   8c00e:	6171      	str	r1, [r6, #20]
   8c010:	e000      	b.n	8c014 <_realloc_r+0x25c>
   8c012:	4622      	mov	r2, r4
   8c014:	6813      	ldr	r3, [r2, #0]
   8c016:	6003      	str	r3, [r0, #0]
   8c018:	6851      	ldr	r1, [r2, #4]
   8c01a:	6041      	str	r1, [r0, #4]
   8c01c:	6892      	ldr	r2, [r2, #8]
   8c01e:	6082      	str	r2, [r0, #8]
   8c020:	e002      	b.n	8c028 <_realloc_r+0x270>
   8c022:	4621      	mov	r1, r4
   8c024:	f7fe fe47 	bl	8acb6 <memmove>
   8c028:	4648      	mov	r0, r9
   8c02a:	4621      	mov	r1, r4
   8c02c:	f7ff fbfc 	bl	8b828 <_free_r>
   8c030:	4648      	mov	r0, r9
   8c032:	f7ff fec0 	bl	8bdb6 <__malloc_unlock>
   8c036:	e028      	b.n	8c08a <_realloc_r+0x2d2>
   8c038:	46c2      	mov	sl, r8
   8c03a:	465d      	mov	r5, fp
   8c03c:	ebc7 000a 	rsb	r0, r7, sl
   8c040:	280f      	cmp	r0, #15
   8c042:	686a      	ldr	r2, [r5, #4]
   8c044:	d911      	bls.n	8c06a <_realloc_r+0x2b2>
   8c046:	f002 0601 	and.w	r6, r2, #1
   8c04a:	19e9      	adds	r1, r5, r7
   8c04c:	f040 0301 	orr.w	r3, r0, #1
   8c050:	4337      	orrs	r7, r6
   8c052:	606f      	str	r7, [r5, #4]
   8c054:	1808      	adds	r0, r1, r0
   8c056:	604b      	str	r3, [r1, #4]
   8c058:	6842      	ldr	r2, [r0, #4]
   8c05a:	3108      	adds	r1, #8
   8c05c:	f042 0601 	orr.w	r6, r2, #1
   8c060:	6046      	str	r6, [r0, #4]
   8c062:	4648      	mov	r0, r9
   8c064:	f7ff fbe0 	bl	8b828 <_free_r>
   8c068:	e00a      	b.n	8c080 <_realloc_r+0x2c8>
   8c06a:	f002 0601 	and.w	r6, r2, #1
   8c06e:	ea4a 0306 	orr.w	r3, sl, r6
   8c072:	606b      	str	r3, [r5, #4]
   8c074:	eb05 010a 	add.w	r1, r5, sl
   8c078:	6848      	ldr	r0, [r1, #4]
   8c07a:	f040 0201 	orr.w	r2, r0, #1
   8c07e:	604a      	str	r2, [r1, #4]
   8c080:	4648      	mov	r0, r9
   8c082:	f7ff fe98 	bl	8bdb6 <__malloc_unlock>
   8c086:	f105 0608 	add.w	r6, r5, #8
   8c08a:	4630      	mov	r0, r6
   8c08c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c090:	200706d0 	.word	0x200706d0

0008c094 <_sbrk_r>:
   8c094:	b538      	push	{r3, r4, r5, lr}
   8c096:	4c06      	ldr	r4, [pc, #24]	; (8c0b0 <_sbrk_r+0x1c>)
   8c098:	2300      	movs	r3, #0
   8c09a:	4605      	mov	r5, r0
   8c09c:	4608      	mov	r0, r1
   8c09e:	6023      	str	r3, [r4, #0]
   8c0a0:	f7fd feb0 	bl	89e04 <_sbrk>
   8c0a4:	1c43      	adds	r3, r0, #1
   8c0a6:	d102      	bne.n	8c0ae <_sbrk_r+0x1a>
   8c0a8:	6821      	ldr	r1, [r4, #0]
   8c0aa:	b101      	cbz	r1, 8c0ae <_sbrk_r+0x1a>
   8c0ac:	6029      	str	r1, [r5, #0]
   8c0ae:	bd38      	pop	{r3, r4, r5, pc}
   8c0b0:	20071dd0 	.word	0x20071dd0

0008c0b4 <__ssprint_r>:
   8c0b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c0b8:	4607      	mov	r7, r0
   8c0ba:	6890      	ldr	r0, [r2, #8]
   8c0bc:	460c      	mov	r4, r1
   8c0be:	4615      	mov	r5, r2
   8c0c0:	f8d2 8000 	ldr.w	r8, [r2]
   8c0c4:	b908      	cbnz	r0, 8c0ca <__ssprint_r+0x16>
   8c0c6:	6050      	str	r0, [r2, #4]
   8c0c8:	e06f      	b.n	8c1aa <__ssprint_r+0xf6>
   8c0ca:	f04f 0b00 	mov.w	fp, #0
   8c0ce:	465e      	mov	r6, fp
   8c0d0:	b936      	cbnz	r6, 8c0e0 <__ssprint_r+0x2c>
   8c0d2:	f8d8 b000 	ldr.w	fp, [r8]
   8c0d6:	f8d8 6004 	ldr.w	r6, [r8, #4]
   8c0da:	f108 0808 	add.w	r8, r8, #8
   8c0de:	e7f7      	b.n	8c0d0 <__ssprint_r+0x1c>
   8c0e0:	68a3      	ldr	r3, [r4, #8]
   8c0e2:	429e      	cmp	r6, r3
   8c0e4:	d34c      	bcc.n	8c180 <__ssprint_r+0xcc>
   8c0e6:	89a2      	ldrh	r2, [r4, #12]
   8c0e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
   8c0ec:	d046      	beq.n	8c17c <__ssprint_r+0xc8>
   8c0ee:	6823      	ldr	r3, [r4, #0]
   8c0f0:	6960      	ldr	r0, [r4, #20]
   8c0f2:	6921      	ldr	r1, [r4, #16]
   8c0f4:	f04f 0a03 	mov.w	sl, #3
   8c0f8:	ebc1 0903 	rsb	r9, r1, r3
   8c0fc:	fb0a f300 	mul.w	r3, sl, r0
   8c100:	2002      	movs	r0, #2
   8c102:	fb93 faf0 	sdiv	sl, r3, r0
   8c106:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   8c10a:	f109 0301 	add.w	r3, r9, #1
   8c10e:	1998      	adds	r0, r3, r6
   8c110:	b213      	sxth	r3, r2
   8c112:	4582      	cmp	sl, r0
   8c114:	bf38      	it	cc
   8c116:	4682      	movcc	sl, r0
   8c118:	4638      	mov	r0, r7
   8c11a:	b183      	cbz	r3, 8c13e <__ssprint_r+0x8a>
   8c11c:	4651      	mov	r1, sl
   8c11e:	f7ff fc39 	bl	8b994 <_malloc_r>
   8c122:	b1a8      	cbz	r0, 8c150 <__ssprint_r+0x9c>
   8c124:	6921      	ldr	r1, [r4, #16]
   8c126:	464a      	mov	r2, r9
   8c128:	9001      	str	r0, [sp, #4]
   8c12a:	f7fe fdbb 	bl	8aca4 <memcpy>
   8c12e:	89a0      	ldrh	r0, [r4, #12]
   8c130:	f420 6290 	bic.w	r2, r0, #1152	; 0x480
   8c134:	f042 0180 	orr.w	r1, r2, #128	; 0x80
   8c138:	81a1      	strh	r1, [r4, #12]
   8c13a:	9901      	ldr	r1, [sp, #4]
   8c13c:	e014      	b.n	8c168 <__ssprint_r+0xb4>
   8c13e:	4652      	mov	r2, sl
   8c140:	f7ff fe3a 	bl	8bdb8 <_realloc_r>
   8c144:	4601      	mov	r1, r0
   8c146:	b978      	cbnz	r0, 8c168 <__ssprint_r+0xb4>
   8c148:	4638      	mov	r0, r7
   8c14a:	6921      	ldr	r1, [r4, #16]
   8c14c:	f7ff fb6c 	bl	8b828 <_free_r>
   8c150:	89a3      	ldrh	r3, [r4, #12]
   8c152:	200c      	movs	r0, #12
   8c154:	2100      	movs	r1, #0
   8c156:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   8c15a:	6038      	str	r0, [r7, #0]
   8c15c:	81a2      	strh	r2, [r4, #12]
   8c15e:	f04f 30ff 	mov.w	r0, #4294967295
   8c162:	60a9      	str	r1, [r5, #8]
   8c164:	6069      	str	r1, [r5, #4]
   8c166:	e020      	b.n	8c1aa <__ssprint_r+0xf6>
   8c168:	eb01 0309 	add.w	r3, r1, r9
   8c16c:	ebc9 000a 	rsb	r0, r9, sl
   8c170:	6023      	str	r3, [r4, #0]
   8c172:	6121      	str	r1, [r4, #16]
   8c174:	f8c4 a014 	str.w	sl, [r4, #20]
   8c178:	4633      	mov	r3, r6
   8c17a:	60a0      	str	r0, [r4, #8]
   8c17c:	429e      	cmp	r6, r3
   8c17e:	d200      	bcs.n	8c182 <__ssprint_r+0xce>
   8c180:	4633      	mov	r3, r6
   8c182:	461a      	mov	r2, r3
   8c184:	4659      	mov	r1, fp
   8c186:	6820      	ldr	r0, [r4, #0]
   8c188:	9301      	str	r3, [sp, #4]
   8c18a:	f7fe fd94 	bl	8acb6 <memmove>
   8c18e:	68a2      	ldr	r2, [r4, #8]
   8c190:	9901      	ldr	r1, [sp, #4]
   8c192:	6823      	ldr	r3, [r4, #0]
   8c194:	1a50      	subs	r0, r2, r1
   8c196:	185a      	adds	r2, r3, r1
   8c198:	68a9      	ldr	r1, [r5, #8]
   8c19a:	60a0      	str	r0, [r4, #8]
   8c19c:	1b8e      	subs	r6, r1, r6
   8c19e:	6022      	str	r2, [r4, #0]
   8c1a0:	60ae      	str	r6, [r5, #8]
   8c1a2:	2e00      	cmp	r6, #0
   8c1a4:	d195      	bne.n	8c0d2 <__ssprint_r+0x1e>
   8c1a6:	606e      	str	r6, [r5, #4]
   8c1a8:	4630      	mov	r0, r6
   8c1aa:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008c1ae <_svfiprintf_r>:
   8c1ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c1b2:	461e      	mov	r6, r3
   8c1b4:	898b      	ldrh	r3, [r1, #12]
   8c1b6:	4689      	mov	r9, r1
   8c1b8:	f003 0180 	and.w	r1, r3, #128	; 0x80
   8c1bc:	4614      	mov	r4, r2
   8c1be:	b20a      	sxth	r2, r1
   8c1c0:	b0a9      	sub	sp, #164	; 0xa4
   8c1c2:	4683      	mov	fp, r0
   8c1c4:	b19a      	cbz	r2, 8c1ee <_svfiprintf_r+0x40>
   8c1c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8c1ca:	b983      	cbnz	r3, 8c1ee <_svfiprintf_r+0x40>
   8c1cc:	2140      	movs	r1, #64	; 0x40
   8c1ce:	f7ff fbe1 	bl	8b994 <_malloc_r>
   8c1d2:	f8c9 0000 	str.w	r0, [r9]
   8c1d6:	f8c9 0010 	str.w	r0, [r9, #16]
   8c1da:	b928      	cbnz	r0, 8c1e8 <_svfiprintf_r+0x3a>
   8c1dc:	220c      	movs	r2, #12
   8c1de:	f8cb 2000 	str.w	r2, [fp]
   8c1e2:	f04f 30ff 	mov.w	r0, #4294967295
   8c1e6:	e3db      	b.n	8c9a0 <_svfiprintf_r+0x7f2>
   8c1e8:	2040      	movs	r0, #64	; 0x40
   8c1ea:	f8c9 0014 	str.w	r0, [r9, #20]
   8c1ee:	2100      	movs	r1, #0
   8c1f0:	ad18      	add	r5, sp, #96	; 0x60
   8c1f2:	950b      	str	r5, [sp, #44]	; 0x2c
   8c1f4:	910d      	str	r1, [sp, #52]	; 0x34
   8c1f6:	910c      	str	r1, [sp, #48]	; 0x30
   8c1f8:	9401      	str	r4, [sp, #4]
   8c1fa:	9105      	str	r1, [sp, #20]
   8c1fc:	9104      	str	r1, [sp, #16]
   8c1fe:	46a8      	mov	r8, r5
   8c200:	9b01      	ldr	r3, [sp, #4]
   8c202:	461c      	mov	r4, r3
   8c204:	f813 2b01 	ldrb.w	r2, [r3], #1
   8c208:	b91a      	cbnz	r2, 8c212 <_svfiprintf_r+0x64>
   8c20a:	9801      	ldr	r0, [sp, #4]
   8c20c:	1a25      	subs	r5, r4, r0
   8c20e:	d103      	bne.n	8c218 <_svfiprintf_r+0x6a>
   8c210:	e01d      	b.n	8c24e <_svfiprintf_r+0xa0>
   8c212:	2a25      	cmp	r2, #37	; 0x25
   8c214:	d1f5      	bne.n	8c202 <_svfiprintf_r+0x54>
   8c216:	e7f8      	b.n	8c20a <_svfiprintf_r+0x5c>
   8c218:	9a01      	ldr	r2, [sp, #4]
   8c21a:	990d      	ldr	r1, [sp, #52]	; 0x34
   8c21c:	e888 0024 	stmia.w	r8, {r2, r5}
   8c220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c222:	194b      	adds	r3, r1, r5
   8c224:	1c50      	adds	r0, r2, #1
   8c226:	2807      	cmp	r0, #7
   8c228:	930d      	str	r3, [sp, #52]	; 0x34
   8c22a:	900c      	str	r0, [sp, #48]	; 0x30
   8c22c:	dc02      	bgt.n	8c234 <_svfiprintf_r+0x86>
   8c22e:	f108 0808 	add.w	r8, r8, #8
   8c232:	e009      	b.n	8c248 <_svfiprintf_r+0x9a>
   8c234:	4658      	mov	r0, fp
   8c236:	4649      	mov	r1, r9
   8c238:	aa0b      	add	r2, sp, #44	; 0x2c
   8c23a:	f7ff ff3b 	bl	8c0b4 <__ssprint_r>
   8c23e:	2800      	cmp	r0, #0
   8c240:	f040 83a3 	bne.w	8c98a <_svfiprintf_r+0x7dc>
   8c244:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c248:	9904      	ldr	r1, [sp, #16]
   8c24a:	194b      	adds	r3, r1, r5
   8c24c:	9304      	str	r3, [sp, #16]
   8c24e:	7822      	ldrb	r2, [r4, #0]
   8c250:	2a00      	cmp	r2, #0
   8c252:	f000 8393 	beq.w	8c97c <_svfiprintf_r+0x7ce>
   8c256:	2200      	movs	r2, #0
   8c258:	3401      	adds	r4, #1
   8c25a:	9401      	str	r4, [sp, #4]
   8c25c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c260:	f04f 3cff 	mov.w	ip, #4294967295
   8c264:	9203      	str	r2, [sp, #12]
   8c266:	4617      	mov	r7, r2
   8c268:	9801      	ldr	r0, [sp, #4]
   8c26a:	f810 3b01 	ldrb.w	r3, [r0], #1
   8c26e:	9001      	str	r0, [sp, #4]
   8c270:	2b63      	cmp	r3, #99	; 0x63
   8c272:	f000 80b3 	beq.w	8c3dc <_svfiprintf_r+0x22e>
   8c276:	dc33      	bgt.n	8c2e0 <_svfiprintf_r+0x132>
   8c278:	2b39      	cmp	r3, #57	; 0x39
   8c27a:	dc1a      	bgt.n	8c2b2 <_svfiprintf_r+0x104>
   8c27c:	2b31      	cmp	r3, #49	; 0x31
   8c27e:	f280 8091 	bge.w	8c3a4 <_svfiprintf_r+0x1f6>
   8c282:	2b2b      	cmp	r3, #43	; 0x2b
   8c284:	d101      	bne.n	8c28a <_svfiprintf_r+0xdc>
   8c286:	461a      	mov	r2, r3
   8c288:	e7ee      	b.n	8c268 <_svfiprintf_r+0xba>
   8c28a:	dc0a      	bgt.n	8c2a2 <_svfiprintf_r+0xf4>
   8c28c:	2b23      	cmp	r3, #35	; 0x23
   8c28e:	d055      	beq.n	8c33c <_svfiprintf_r+0x18e>
   8c290:	2b2a      	cmp	r3, #42	; 0x2a
   8c292:	d056      	beq.n	8c342 <_svfiprintf_r+0x194>
   8c294:	2b20      	cmp	r3, #32
   8c296:	f040 81f6 	bne.w	8c686 <_svfiprintf_r+0x4d8>
   8c29a:	2a00      	cmp	r2, #0
   8c29c:	bf08      	it	eq
   8c29e:	2220      	moveq	r2, #32
   8c2a0:	e7e2      	b.n	8c268 <_svfiprintf_r+0xba>
   8c2a2:	2b2e      	cmp	r3, #46	; 0x2e
   8c2a4:	d058      	beq.n	8c358 <_svfiprintf_r+0x1aa>
   8c2a6:	2b30      	cmp	r3, #48	; 0x30
   8c2a8:	d079      	beq.n	8c39e <_svfiprintf_r+0x1f0>
   8c2aa:	2b2d      	cmp	r3, #45	; 0x2d
   8c2ac:	f040 81eb 	bne.w	8c686 <_svfiprintf_r+0x4d8>
   8c2b0:	e04f      	b.n	8c352 <_svfiprintf_r+0x1a4>
   8c2b2:	2b4f      	cmp	r3, #79	; 0x4f
   8c2b4:	f000 80de 	beq.w	8c474 <_svfiprintf_r+0x2c6>
   8c2b8:	dc07      	bgt.n	8c2ca <_svfiprintf_r+0x11c>
   8c2ba:	2b44      	cmp	r3, #68	; 0x44
   8c2bc:	f040 81e3 	bne.w	8c686 <_svfiprintf_r+0x4d8>
   8c2c0:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c2c4:	f047 0710 	orr.w	r7, r7, #16
   8c2c8:	e090      	b.n	8c3ec <_svfiprintf_r+0x23e>
   8c2ca:	2b55      	cmp	r3, #85	; 0x55
   8c2cc:	f000 811f 	beq.w	8c50e <_svfiprintf_r+0x360>
   8c2d0:	2b58      	cmp	r3, #88	; 0x58
   8c2d2:	f040 81d8 	bne.w	8c686 <_svfiprintf_r+0x4d8>
   8c2d6:	4daf      	ldr	r5, [pc, #700]	; (8c594 <_svfiprintf_r+0x3e6>)
   8c2d8:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c2dc:	9505      	str	r5, [sp, #20]
   8c2de:	e130      	b.n	8c542 <_svfiprintf_r+0x394>
   8c2e0:	2b6f      	cmp	r3, #111	; 0x6f
   8c2e2:	f000 80c9 	beq.w	8c478 <_svfiprintf_r+0x2ca>
   8c2e6:	dc10      	bgt.n	8c30a <_svfiprintf_r+0x15c>
   8c2e8:	2b69      	cmp	r3, #105	; 0x69
   8c2ea:	d024      	beq.n	8c336 <_svfiprintf_r+0x188>
   8c2ec:	dc07      	bgt.n	8c2fe <_svfiprintf_r+0x150>
   8c2ee:	2b64      	cmp	r3, #100	; 0x64
   8c2f0:	d021      	beq.n	8c336 <_svfiprintf_r+0x188>
   8c2f2:	2b68      	cmp	r3, #104	; 0x68
   8c2f4:	f040 81c7 	bne.w	8c686 <_svfiprintf_r+0x4d8>
   8c2f8:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   8c2fc:	e7b4      	b.n	8c268 <_svfiprintf_r+0xba>
   8c2fe:	2b6c      	cmp	r3, #108	; 0x6c
   8c300:	d05f      	beq.n	8c3c2 <_svfiprintf_r+0x214>
   8c302:	2b6e      	cmp	r3, #110	; 0x6e
   8c304:	f040 81bf 	bne.w	8c686 <_svfiprintf_r+0x4d8>
   8c308:	e096      	b.n	8c438 <_svfiprintf_r+0x28a>
   8c30a:	2b73      	cmp	r3, #115	; 0x73
   8c30c:	f000 80df 	beq.w	8c4ce <_svfiprintf_r+0x320>
   8c310:	dc06      	bgt.n	8c320 <_svfiprintf_r+0x172>
   8c312:	2b70      	cmp	r3, #112	; 0x70
   8c314:	f000 80cd 	beq.w	8c4b2 <_svfiprintf_r+0x304>
   8c318:	2b71      	cmp	r3, #113	; 0x71
   8c31a:	f040 81b4 	bne.w	8c686 <_svfiprintf_r+0x4d8>
   8c31e:	e05a      	b.n	8c3d6 <_svfiprintf_r+0x228>
   8c320:	2b75      	cmp	r3, #117	; 0x75
   8c322:	f000 80f6 	beq.w	8c512 <_svfiprintf_r+0x364>
   8c326:	2b78      	cmp	r3, #120	; 0x78
   8c328:	f040 81ad 	bne.w	8c686 <_svfiprintf_r+0x4d8>
   8c32c:	4d9a      	ldr	r5, [pc, #616]	; (8c598 <_svfiprintf_r+0x3ea>)
   8c32e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c332:	9505      	str	r5, [sp, #20]
   8c334:	e105      	b.n	8c542 <_svfiprintf_r+0x394>
   8c336:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c33a:	e057      	b.n	8c3ec <_svfiprintf_r+0x23e>
   8c33c:	f047 0701 	orr.w	r7, r7, #1
   8c340:	e792      	b.n	8c268 <_svfiprintf_r+0xba>
   8c342:	1d33      	adds	r3, r6, #4
   8c344:	6836      	ldr	r6, [r6, #0]
   8c346:	2e00      	cmp	r6, #0
   8c348:	9603      	str	r6, [sp, #12]
   8c34a:	da15      	bge.n	8c378 <_svfiprintf_r+0x1ca>
   8c34c:	4270      	negs	r0, r6
   8c34e:	9003      	str	r0, [sp, #12]
   8c350:	461e      	mov	r6, r3
   8c352:	f047 0704 	orr.w	r7, r7, #4
   8c356:	e787      	b.n	8c268 <_svfiprintf_r+0xba>
   8c358:	9901      	ldr	r1, [sp, #4]
   8c35a:	f811 3b01 	ldrb.w	r3, [r1], #1
   8c35e:	2b2a      	cmp	r3, #42	; 0x2a
   8c360:	9101      	str	r1, [sp, #4]
   8c362:	d10b      	bne.n	8c37c <_svfiprintf_r+0x1ce>
   8c364:	f8d6 c000 	ldr.w	ip, [r6]
   8c368:	1d33      	adds	r3, r6, #4
   8c36a:	f1bc 0f00 	cmp.w	ip, #0
   8c36e:	da03      	bge.n	8c378 <_svfiprintf_r+0x1ca>
   8c370:	461e      	mov	r6, r3
   8c372:	f04f 3cff 	mov.w	ip, #4294967295
   8c376:	e777      	b.n	8c268 <_svfiprintf_r+0xba>
   8c378:	461e      	mov	r6, r3
   8c37a:	e775      	b.n	8c268 <_svfiprintf_r+0xba>
   8c37c:	f04f 0c00 	mov.w	ip, #0
   8c380:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8c384:	2809      	cmp	r0, #9
   8c386:	d807      	bhi.n	8c398 <_svfiprintf_r+0x1ea>
   8c388:	9901      	ldr	r1, [sp, #4]
   8c38a:	230a      	movs	r3, #10
   8c38c:	fb03 0c0c 	mla	ip, r3, ip, r0
   8c390:	f811 3b01 	ldrb.w	r3, [r1], #1
   8c394:	9101      	str	r1, [sp, #4]
   8c396:	e7f3      	b.n	8c380 <_svfiprintf_r+0x1d2>
   8c398:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   8c39c:	e768      	b.n	8c270 <_svfiprintf_r+0xc2>
   8c39e:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8c3a2:	e761      	b.n	8c268 <_svfiprintf_r+0xba>
   8c3a4:	9801      	ldr	r0, [sp, #4]
   8c3a6:	2100      	movs	r1, #0
   8c3a8:	3b30      	subs	r3, #48	; 0x30
   8c3aa:	240a      	movs	r4, #10
   8c3ac:	fb04 3101 	mla	r1, r4, r1, r3
   8c3b0:	f810 3b01 	ldrb.w	r3, [r0], #1
   8c3b4:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   8c3b8:	2c09      	cmp	r4, #9
   8c3ba:	9001      	str	r0, [sp, #4]
   8c3bc:	d9f4      	bls.n	8c3a8 <_svfiprintf_r+0x1fa>
   8c3be:	9103      	str	r1, [sp, #12]
   8c3c0:	e756      	b.n	8c270 <_svfiprintf_r+0xc2>
   8c3c2:	9901      	ldr	r1, [sp, #4]
   8c3c4:	780b      	ldrb	r3, [r1, #0]
   8c3c6:	2b6c      	cmp	r3, #108	; 0x6c
   8c3c8:	d102      	bne.n	8c3d0 <_svfiprintf_r+0x222>
   8c3ca:	1c48      	adds	r0, r1, #1
   8c3cc:	9001      	str	r0, [sp, #4]
   8c3ce:	e002      	b.n	8c3d6 <_svfiprintf_r+0x228>
   8c3d0:	f047 0710 	orr.w	r7, r7, #16
   8c3d4:	e748      	b.n	8c268 <_svfiprintf_r+0xba>
   8c3d6:	f047 0720 	orr.w	r7, r7, #32
   8c3da:	e745      	b.n	8c268 <_svfiprintf_r+0xba>
   8c3dc:	6832      	ldr	r2, [r6, #0]
   8c3de:	2500      	movs	r5, #0
   8c3e0:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   8c3e4:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8c3e8:	3604      	adds	r6, #4
   8c3ea:	e156      	b.n	8c69a <_svfiprintf_r+0x4ec>
   8c3ec:	06ba      	lsls	r2, r7, #26
   8c3ee:	d507      	bpl.n	8c400 <_svfiprintf_r+0x252>
   8c3f0:	3607      	adds	r6, #7
   8c3f2:	f026 0507 	bic.w	r5, r6, #7
   8c3f6:	f105 0608 	add.w	r6, r5, #8
   8c3fa:	e9d5 4500 	ldrd	r4, r5, [r5]
   8c3fe:	e00f      	b.n	8c420 <_svfiprintf_r+0x272>
   8c400:	f017 0f10 	tst.w	r7, #16
   8c404:	f106 0104 	add.w	r1, r6, #4
   8c408:	d001      	beq.n	8c40e <_svfiprintf_r+0x260>
   8c40a:	6832      	ldr	r2, [r6, #0]
   8c40c:	e005      	b.n	8c41a <_svfiprintf_r+0x26c>
   8c40e:	f017 0f40 	tst.w	r7, #64	; 0x40
   8c412:	6832      	ldr	r2, [r6, #0]
   8c414:	d001      	beq.n	8c41a <_svfiprintf_r+0x26c>
   8c416:	b214      	sxth	r4, r2
   8c418:	e000      	b.n	8c41c <_svfiprintf_r+0x26e>
   8c41a:	4614      	mov	r4, r2
   8c41c:	17e5      	asrs	r5, r4, #31
   8c41e:	460e      	mov	r6, r1
   8c420:	2c00      	cmp	r4, #0
   8c422:	f175 0200 	sbcs.w	r2, r5, #0
   8c426:	f280 80b9 	bge.w	8c59c <_svfiprintf_r+0x3ee>
   8c42a:	232d      	movs	r3, #45	; 0x2d
   8c42c:	4264      	negs	r4, r4
   8c42e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8c432:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   8c436:	e0b1      	b.n	8c59c <_svfiprintf_r+0x3ee>
   8c438:	f017 0f20 	tst.w	r7, #32
   8c43c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c440:	f106 0204 	add.w	r2, r6, #4
   8c444:	d005      	beq.n	8c452 <_svfiprintf_r+0x2a4>
   8c446:	9c04      	ldr	r4, [sp, #16]
   8c448:	6835      	ldr	r5, [r6, #0]
   8c44a:	17e0      	asrs	r0, r4, #31
   8c44c:	602c      	str	r4, [r5, #0]
   8c44e:	6068      	str	r0, [r5, #4]
   8c450:	e004      	b.n	8c45c <_svfiprintf_r+0x2ae>
   8c452:	06fb      	lsls	r3, r7, #27
   8c454:	d504      	bpl.n	8c460 <_svfiprintf_r+0x2b2>
   8c456:	6833      	ldr	r3, [r6, #0]
   8c458:	9904      	ldr	r1, [sp, #16]
   8c45a:	6019      	str	r1, [r3, #0]
   8c45c:	4616      	mov	r6, r2
   8c45e:	e6cf      	b.n	8c200 <_svfiprintf_r+0x52>
   8c460:	6830      	ldr	r0, [r6, #0]
   8c462:	9c04      	ldr	r4, [sp, #16]
   8c464:	f017 0f40 	tst.w	r7, #64	; 0x40
   8c468:	f106 0604 	add.w	r6, r6, #4
   8c46c:	bf14      	ite	ne
   8c46e:	8004      	strhne	r4, [r0, #0]
   8c470:	6004      	streq	r4, [r0, #0]
   8c472:	e6c5      	b.n	8c200 <_svfiprintf_r+0x52>
   8c474:	f047 0710 	orr.w	r7, r7, #16
   8c478:	f017 0020 	ands.w	r0, r7, #32
   8c47c:	d008      	beq.n	8c490 <_svfiprintf_r+0x2e2>
   8c47e:	1df3      	adds	r3, r6, #7
   8c480:	f023 0507 	bic.w	r5, r3, #7
   8c484:	f105 0608 	add.w	r6, r5, #8
   8c488:	e9d5 4500 	ldrd	r4, r5, [r5]
   8c48c:	2000      	movs	r0, #0
   8c48e:	e07c      	b.n	8c58a <_svfiprintf_r+0x3dc>
   8c490:	f017 0110 	ands.w	r1, r7, #16
   8c494:	f106 0204 	add.w	r2, r6, #4
   8c498:	d106      	bne.n	8c4a8 <_svfiprintf_r+0x2fa>
   8c49a:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   8c49e:	d003      	beq.n	8c4a8 <_svfiprintf_r+0x2fa>
   8c4a0:	8834      	ldrh	r4, [r6, #0]
   8c4a2:	2500      	movs	r5, #0
   8c4a4:	4616      	mov	r6, r2
   8c4a6:	e7f1      	b.n	8c48c <_svfiprintf_r+0x2de>
   8c4a8:	6836      	ldr	r6, [r6, #0]
   8c4aa:	2500      	movs	r5, #0
   8c4ac:	4634      	mov	r4, r6
   8c4ae:	4616      	mov	r6, r2
   8c4b0:	e06b      	b.n	8c58a <_svfiprintf_r+0x3dc>
   8c4b2:	4b39      	ldr	r3, [pc, #228]	; (8c598 <_svfiprintf_r+0x3ea>)
   8c4b4:	2130      	movs	r1, #48	; 0x30
   8c4b6:	2278      	movs	r2, #120	; 0x78
   8c4b8:	6834      	ldr	r4, [r6, #0]
   8c4ba:	2500      	movs	r5, #0
   8c4bc:	f047 0702 	orr.w	r7, r7, #2
   8c4c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   8c4c4:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   8c4c8:	3604      	adds	r6, #4
   8c4ca:	9305      	str	r3, [sp, #20]
   8c4cc:	e05c      	b.n	8c588 <_svfiprintf_r+0x3da>
   8c4ce:	4631      	mov	r1, r6
   8c4d0:	2500      	movs	r5, #0
   8c4d2:	f8d1 a000 	ldr.w	sl, [r1]
   8c4d6:	3604      	adds	r6, #4
   8c4d8:	45ac      	cmp	ip, r5
   8c4da:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8c4de:	4650      	mov	r0, sl
   8c4e0:	db11      	blt.n	8c506 <_svfiprintf_r+0x358>
   8c4e2:	4662      	mov	r2, ip
   8c4e4:	4629      	mov	r1, r5
   8c4e6:	f8cd c000 	str.w	ip, [sp]
   8c4ea:	f7ff fc55 	bl	8bd98 <memchr>
   8c4ee:	f8dd c000 	ldr.w	ip, [sp]
   8c4f2:	2800      	cmp	r0, #0
   8c4f4:	f000 80d5 	beq.w	8c6a2 <_svfiprintf_r+0x4f4>
   8c4f8:	ebca 0400 	rsb	r4, sl, r0
   8c4fc:	4564      	cmp	r4, ip
   8c4fe:	f340 80d2 	ble.w	8c6a6 <_svfiprintf_r+0x4f8>
   8c502:	4664      	mov	r4, ip
   8c504:	e0cf      	b.n	8c6a6 <_svfiprintf_r+0x4f8>
   8c506:	f7fe fc53 	bl	8adb0 <strlen>
   8c50a:	4604      	mov	r4, r0
   8c50c:	e0cb      	b.n	8c6a6 <_svfiprintf_r+0x4f8>
   8c50e:	f047 0710 	orr.w	r7, r7, #16
   8c512:	06bd      	lsls	r5, r7, #26
   8c514:	d506      	bpl.n	8c524 <_svfiprintf_r+0x376>
   8c516:	1df0      	adds	r0, r6, #7
   8c518:	f020 0407 	bic.w	r4, r0, #7
   8c51c:	f104 0608 	add.w	r6, r4, #8
   8c520:	cc30      	ldmia	r4, {r4, r5}
   8c522:	e00c      	b.n	8c53e <_svfiprintf_r+0x390>
   8c524:	f017 0f10 	tst.w	r7, #16
   8c528:	f106 0304 	add.w	r3, r6, #4
   8c52c:	d103      	bne.n	8c536 <_svfiprintf_r+0x388>
   8c52e:	067c      	lsls	r4, r7, #25
   8c530:	d501      	bpl.n	8c536 <_svfiprintf_r+0x388>
   8c532:	8834      	ldrh	r4, [r6, #0]
   8c534:	e001      	b.n	8c53a <_svfiprintf_r+0x38c>
   8c536:	6835      	ldr	r5, [r6, #0]
   8c538:	462c      	mov	r4, r5
   8c53a:	2500      	movs	r5, #0
   8c53c:	461e      	mov	r6, r3
   8c53e:	2001      	movs	r0, #1
   8c540:	e023      	b.n	8c58a <_svfiprintf_r+0x3dc>
   8c542:	06b8      	lsls	r0, r7, #26
   8c544:	d507      	bpl.n	8c556 <_svfiprintf_r+0x3a8>
   8c546:	1df4      	adds	r4, r6, #7
   8c548:	f024 0107 	bic.w	r1, r4, #7
   8c54c:	f101 0608 	add.w	r6, r1, #8
   8c550:	e9d1 4500 	ldrd	r4, r5, [r1]
   8c554:	e00c      	b.n	8c570 <_svfiprintf_r+0x3c2>
   8c556:	f017 0f10 	tst.w	r7, #16
   8c55a:	f106 0004 	add.w	r0, r6, #4
   8c55e:	d103      	bne.n	8c568 <_svfiprintf_r+0x3ba>
   8c560:	0679      	lsls	r1, r7, #25
   8c562:	d501      	bpl.n	8c568 <_svfiprintf_r+0x3ba>
   8c564:	8834      	ldrh	r4, [r6, #0]
   8c566:	e001      	b.n	8c56c <_svfiprintf_r+0x3be>
   8c568:	6836      	ldr	r6, [r6, #0]
   8c56a:	4634      	mov	r4, r6
   8c56c:	2500      	movs	r5, #0
   8c56e:	4606      	mov	r6, r0
   8c570:	07fa      	lsls	r2, r7, #31
   8c572:	d509      	bpl.n	8c588 <_svfiprintf_r+0x3da>
   8c574:	ea54 0205 	orrs.w	r2, r4, r5
   8c578:	d006      	beq.n	8c588 <_svfiprintf_r+0x3da>
   8c57a:	2230      	movs	r2, #48	; 0x30
   8c57c:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   8c580:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   8c584:	f047 0702 	orr.w	r7, r7, #2
   8c588:	2002      	movs	r0, #2
   8c58a:	2100      	movs	r1, #0
   8c58c:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   8c590:	e005      	b.n	8c59e <_svfiprintf_r+0x3f0>
   8c592:	bf00      	nop
   8c594:	0008dec6 	.word	0x0008dec6
   8c598:	0008ded7 	.word	0x0008ded7
   8c59c:	2001      	movs	r0, #1
   8c59e:	f1bc 0f00 	cmp.w	ip, #0
   8c5a2:	bfa8      	it	ge
   8c5a4:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   8c5a8:	ea54 0105 	orrs.w	r1, r4, r5
   8c5ac:	d102      	bne.n	8c5b4 <_svfiprintf_r+0x406>
   8c5ae:	f1bc 0f00 	cmp.w	ip, #0
   8c5b2:	d058      	beq.n	8c666 <_svfiprintf_r+0x4b8>
   8c5b4:	2801      	cmp	r0, #1
   8c5b6:	d01d      	beq.n	8c5f4 <_svfiprintf_r+0x446>
   8c5b8:	2802      	cmp	r0, #2
   8c5ba:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8c5be:	d041      	beq.n	8c644 <_svfiprintf_r+0x496>
   8c5c0:	f004 0207 	and.w	r2, r4, #7
   8c5c4:	08e4      	lsrs	r4, r4, #3
   8c5c6:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   8c5ca:	08e9      	lsrs	r1, r5, #3
   8c5cc:	4604      	mov	r4, r0
   8c5ce:	460d      	mov	r5, r1
   8c5d0:	3230      	adds	r2, #48	; 0x30
   8c5d2:	ea54 0105 	orrs.w	r1, r4, r5
   8c5d6:	469a      	mov	sl, r3
   8c5d8:	701a      	strb	r2, [r3, #0]
   8c5da:	f103 33ff 	add.w	r3, r3, #4294967295
   8c5de:	d1ef      	bne.n	8c5c0 <_svfiprintf_r+0x412>
   8c5e0:	07f8      	lsls	r0, r7, #31
   8c5e2:	4655      	mov	r5, sl
   8c5e4:	d54a      	bpl.n	8c67c <_svfiprintf_r+0x4ce>
   8c5e6:	2a30      	cmp	r2, #48	; 0x30
   8c5e8:	d048      	beq.n	8c67c <_svfiprintf_r+0x4ce>
   8c5ea:	2230      	movs	r2, #48	; 0x30
   8c5ec:	469a      	mov	sl, r3
   8c5ee:	f805 2c01 	strb.w	r2, [r5, #-1]
   8c5f2:	e043      	b.n	8c67c <_svfiprintf_r+0x4ce>
   8c5f4:	2d00      	cmp	r5, #0
   8c5f6:	bf08      	it	eq
   8c5f8:	2c0a      	cmpeq	r4, #10
   8c5fa:	d203      	bcs.n	8c604 <_svfiprintf_r+0x456>
   8c5fc:	3430      	adds	r4, #48	; 0x30
   8c5fe:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   8c602:	e036      	b.n	8c672 <_svfiprintf_r+0x4c4>
   8c604:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8c608:	9302      	str	r3, [sp, #8]
   8c60a:	4620      	mov	r0, r4
   8c60c:	4629      	mov	r1, r5
   8c60e:	220a      	movs	r2, #10
   8c610:	2300      	movs	r3, #0
   8c612:	f8cd c000 	str.w	ip, [sp]
   8c616:	f000 f9c7 	bl	8c9a8 <__aeabi_uldivmod>
   8c61a:	9802      	ldr	r0, [sp, #8]
   8c61c:	3230      	adds	r2, #48	; 0x30
   8c61e:	f800 2901 	strb.w	r2, [r0], #-1
   8c622:	4629      	mov	r1, r5
   8c624:	220a      	movs	r2, #10
   8c626:	2300      	movs	r3, #0
   8c628:	f8dd a008 	ldr.w	sl, [sp, #8]
   8c62c:	9002      	str	r0, [sp, #8]
   8c62e:	4620      	mov	r0, r4
   8c630:	f000 f9ba 	bl	8c9a8 <__aeabi_uldivmod>
   8c634:	4604      	mov	r4, r0
   8c636:	460d      	mov	r5, r1
   8c638:	ea54 0105 	orrs.w	r1, r4, r5
   8c63c:	f8dd c000 	ldr.w	ip, [sp]
   8c640:	d1e3      	bne.n	8c60a <_svfiprintf_r+0x45c>
   8c642:	e01b      	b.n	8c67c <_svfiprintf_r+0x4ce>
   8c644:	9905      	ldr	r1, [sp, #20]
   8c646:	f004 000f 	and.w	r0, r4, #15
   8c64a:	0924      	lsrs	r4, r4, #4
   8c64c:	5c0a      	ldrb	r2, [r1, r0]
   8c64e:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   8c652:	0929      	lsrs	r1, r5, #4
   8c654:	4604      	mov	r4, r0
   8c656:	460d      	mov	r5, r1
   8c658:	469a      	mov	sl, r3
   8c65a:	f803 2901 	strb.w	r2, [r3], #-1
   8c65e:	ea54 0205 	orrs.w	r2, r4, r5
   8c662:	d1ef      	bne.n	8c644 <_svfiprintf_r+0x496>
   8c664:	e00a      	b.n	8c67c <_svfiprintf_r+0x4ce>
   8c666:	b938      	cbnz	r0, 8c678 <_svfiprintf_r+0x4ca>
   8c668:	07f9      	lsls	r1, r7, #31
   8c66a:	d505      	bpl.n	8c678 <_svfiprintf_r+0x4ca>
   8c66c:	2030      	movs	r0, #48	; 0x30
   8c66e:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   8c672:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   8c676:	e001      	b.n	8c67c <_svfiprintf_r+0x4ce>
   8c678:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   8c67c:	ad18      	add	r5, sp, #96	; 0x60
   8c67e:	ebca 0405 	rsb	r4, sl, r5
   8c682:	4665      	mov	r5, ip
   8c684:	e00f      	b.n	8c6a6 <_svfiprintf_r+0x4f8>
   8c686:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c68a:	2b00      	cmp	r3, #0
   8c68c:	f000 8176 	beq.w	8c97c <_svfiprintf_r+0x7ce>
   8c690:	2500      	movs	r5, #0
   8c692:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   8c696:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8c69a:	2401      	movs	r4, #1
   8c69c:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   8c6a0:	e001      	b.n	8c6a6 <_svfiprintf_r+0x4f8>
   8c6a2:	4664      	mov	r4, ip
   8c6a4:	4605      	mov	r5, r0
   8c6a6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8c6aa:	42ac      	cmp	r4, r5
   8c6ac:	bfac      	ite	ge
   8c6ae:	4621      	movge	r1, r4
   8c6b0:	4629      	movlt	r1, r5
   8c6b2:	9102      	str	r1, [sp, #8]
   8c6b4:	b113      	cbz	r3, 8c6bc <_svfiprintf_r+0x50e>
   8c6b6:	9802      	ldr	r0, [sp, #8]
   8c6b8:	1c42      	adds	r2, r0, #1
   8c6ba:	9202      	str	r2, [sp, #8]
   8c6bc:	f017 0102 	ands.w	r1, r7, #2
   8c6c0:	9106      	str	r1, [sp, #24]
   8c6c2:	d002      	beq.n	8c6ca <_svfiprintf_r+0x51c>
   8c6c4:	9b02      	ldr	r3, [sp, #8]
   8c6c6:	1c98      	adds	r0, r3, #2
   8c6c8:	9002      	str	r0, [sp, #8]
   8c6ca:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   8c6ce:	9207      	str	r2, [sp, #28]
   8c6d0:	d13c      	bne.n	8c74c <_svfiprintf_r+0x59e>
   8c6d2:	9903      	ldr	r1, [sp, #12]
   8c6d4:	9b02      	ldr	r3, [sp, #8]
   8c6d6:	1acb      	subs	r3, r1, r3
   8c6d8:	2b00      	cmp	r3, #0
   8c6da:	dd37      	ble.n	8c74c <_svfiprintf_r+0x59e>
   8c6dc:	48a5      	ldr	r0, [pc, #660]	; (8c974 <_svfiprintf_r+0x7c6>)
   8c6de:	2b10      	cmp	r3, #16
   8c6e0:	f8c8 0000 	str.w	r0, [r8]
   8c6e4:	dd1b      	ble.n	8c71e <_svfiprintf_r+0x570>
   8c6e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c6e8:	2110      	movs	r1, #16
   8c6ea:	980d      	ldr	r0, [sp, #52]	; 0x34
   8c6ec:	f8c8 1004 	str.w	r1, [r8, #4]
   8c6f0:	1c51      	adds	r1, r2, #1
   8c6f2:	3010      	adds	r0, #16
   8c6f4:	2907      	cmp	r1, #7
   8c6f6:	900d      	str	r0, [sp, #52]	; 0x34
   8c6f8:	910c      	str	r1, [sp, #48]	; 0x30
   8c6fa:	dc02      	bgt.n	8c702 <_svfiprintf_r+0x554>
   8c6fc:	f108 0808 	add.w	r8, r8, #8
   8c700:	e00b      	b.n	8c71a <_svfiprintf_r+0x56c>
   8c702:	4658      	mov	r0, fp
   8c704:	4649      	mov	r1, r9
   8c706:	aa0b      	add	r2, sp, #44	; 0x2c
   8c708:	9300      	str	r3, [sp, #0]
   8c70a:	f7ff fcd3 	bl	8c0b4 <__ssprint_r>
   8c70e:	9b00      	ldr	r3, [sp, #0]
   8c710:	2800      	cmp	r0, #0
   8c712:	f040 813a 	bne.w	8c98a <_svfiprintf_r+0x7dc>
   8c716:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c71a:	3b10      	subs	r3, #16
   8c71c:	e7de      	b.n	8c6dc <_svfiprintf_r+0x52e>
   8c71e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8c720:	f8c8 3004 	str.w	r3, [r8, #4]
   8c724:	18d1      	adds	r1, r2, r3
   8c726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8c728:	910d      	str	r1, [sp, #52]	; 0x34
   8c72a:	1c58      	adds	r0, r3, #1
   8c72c:	2807      	cmp	r0, #7
   8c72e:	900c      	str	r0, [sp, #48]	; 0x30
   8c730:	dc02      	bgt.n	8c738 <_svfiprintf_r+0x58a>
   8c732:	f108 0808 	add.w	r8, r8, #8
   8c736:	e009      	b.n	8c74c <_svfiprintf_r+0x59e>
   8c738:	4658      	mov	r0, fp
   8c73a:	4649      	mov	r1, r9
   8c73c:	aa0b      	add	r2, sp, #44	; 0x2c
   8c73e:	f7ff fcb9 	bl	8c0b4 <__ssprint_r>
   8c742:	2800      	cmp	r0, #0
   8c744:	f040 8121 	bne.w	8c98a <_svfiprintf_r+0x7dc>
   8c748:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c74c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   8c750:	b1da      	cbz	r2, 8c78a <_svfiprintf_r+0x5dc>
   8c752:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   8c756:	f8c8 1000 	str.w	r1, [r8]
   8c75a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8c75c:	2301      	movs	r3, #1
   8c75e:	980d      	ldr	r0, [sp, #52]	; 0x34
   8c760:	f8c8 3004 	str.w	r3, [r8, #4]
   8c764:	1c4b      	adds	r3, r1, #1
   8c766:	1c42      	adds	r2, r0, #1
   8c768:	2b07      	cmp	r3, #7
   8c76a:	920d      	str	r2, [sp, #52]	; 0x34
   8c76c:	930c      	str	r3, [sp, #48]	; 0x30
   8c76e:	dc02      	bgt.n	8c776 <_svfiprintf_r+0x5c8>
   8c770:	f108 0808 	add.w	r8, r8, #8
   8c774:	e009      	b.n	8c78a <_svfiprintf_r+0x5dc>
   8c776:	4658      	mov	r0, fp
   8c778:	4649      	mov	r1, r9
   8c77a:	aa0b      	add	r2, sp, #44	; 0x2c
   8c77c:	f7ff fc9a 	bl	8c0b4 <__ssprint_r>
   8c780:	2800      	cmp	r0, #0
   8c782:	f040 8102 	bne.w	8c98a <_svfiprintf_r+0x7dc>
   8c786:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c78a:	9806      	ldr	r0, [sp, #24]
   8c78c:	b1d0      	cbz	r0, 8c7c4 <_svfiprintf_r+0x616>
   8c78e:	aa0a      	add	r2, sp, #40	; 0x28
   8c790:	f8c8 2000 	str.w	r2, [r8]
   8c794:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c796:	2102      	movs	r1, #2
   8c798:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8c79a:	f8c8 1004 	str.w	r1, [r8, #4]
   8c79e:	1c51      	adds	r1, r2, #1
   8c7a0:	1c98      	adds	r0, r3, #2
   8c7a2:	2907      	cmp	r1, #7
   8c7a4:	900d      	str	r0, [sp, #52]	; 0x34
   8c7a6:	910c      	str	r1, [sp, #48]	; 0x30
   8c7a8:	dc02      	bgt.n	8c7b0 <_svfiprintf_r+0x602>
   8c7aa:	f108 0808 	add.w	r8, r8, #8
   8c7ae:	e009      	b.n	8c7c4 <_svfiprintf_r+0x616>
   8c7b0:	4658      	mov	r0, fp
   8c7b2:	4649      	mov	r1, r9
   8c7b4:	aa0b      	add	r2, sp, #44	; 0x2c
   8c7b6:	f7ff fc7d 	bl	8c0b4 <__ssprint_r>
   8c7ba:	2800      	cmp	r0, #0
   8c7bc:	f040 80e5 	bne.w	8c98a <_svfiprintf_r+0x7dc>
   8c7c0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c7c4:	9b07      	ldr	r3, [sp, #28]
   8c7c6:	2b80      	cmp	r3, #128	; 0x80
   8c7c8:	d13c      	bne.n	8c844 <_svfiprintf_r+0x696>
   8c7ca:	9803      	ldr	r0, [sp, #12]
   8c7cc:	9a02      	ldr	r2, [sp, #8]
   8c7ce:	1a83      	subs	r3, r0, r2
   8c7d0:	2b00      	cmp	r3, #0
   8c7d2:	dd37      	ble.n	8c844 <_svfiprintf_r+0x696>
   8c7d4:	4968      	ldr	r1, [pc, #416]	; (8c978 <_svfiprintf_r+0x7ca>)
   8c7d6:	2b10      	cmp	r3, #16
   8c7d8:	f8c8 1000 	str.w	r1, [r8]
   8c7dc:	dd1b      	ble.n	8c816 <_svfiprintf_r+0x668>
   8c7de:	980c      	ldr	r0, [sp, #48]	; 0x30
   8c7e0:	2210      	movs	r2, #16
   8c7e2:	990d      	ldr	r1, [sp, #52]	; 0x34
   8c7e4:	f8c8 2004 	str.w	r2, [r8, #4]
   8c7e8:	1c42      	adds	r2, r0, #1
   8c7ea:	3110      	adds	r1, #16
   8c7ec:	2a07      	cmp	r2, #7
   8c7ee:	910d      	str	r1, [sp, #52]	; 0x34
   8c7f0:	920c      	str	r2, [sp, #48]	; 0x30
   8c7f2:	dc02      	bgt.n	8c7fa <_svfiprintf_r+0x64c>
   8c7f4:	f108 0808 	add.w	r8, r8, #8
   8c7f8:	e00b      	b.n	8c812 <_svfiprintf_r+0x664>
   8c7fa:	4658      	mov	r0, fp
   8c7fc:	4649      	mov	r1, r9
   8c7fe:	aa0b      	add	r2, sp, #44	; 0x2c
   8c800:	9300      	str	r3, [sp, #0]
   8c802:	f7ff fc57 	bl	8c0b4 <__ssprint_r>
   8c806:	9b00      	ldr	r3, [sp, #0]
   8c808:	2800      	cmp	r0, #0
   8c80a:	f040 80be 	bne.w	8c98a <_svfiprintf_r+0x7dc>
   8c80e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c812:	3b10      	subs	r3, #16
   8c814:	e7de      	b.n	8c7d4 <_svfiprintf_r+0x626>
   8c816:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c818:	980d      	ldr	r0, [sp, #52]	; 0x34
   8c81a:	1c51      	adds	r1, r2, #1
   8c81c:	f8c8 3004 	str.w	r3, [r8, #4]
   8c820:	2907      	cmp	r1, #7
   8c822:	4403      	add	r3, r0
   8c824:	930d      	str	r3, [sp, #52]	; 0x34
   8c826:	910c      	str	r1, [sp, #48]	; 0x30
   8c828:	dc02      	bgt.n	8c830 <_svfiprintf_r+0x682>
   8c82a:	f108 0808 	add.w	r8, r8, #8
   8c82e:	e009      	b.n	8c844 <_svfiprintf_r+0x696>
   8c830:	4658      	mov	r0, fp
   8c832:	4649      	mov	r1, r9
   8c834:	aa0b      	add	r2, sp, #44	; 0x2c
   8c836:	f7ff fc3d 	bl	8c0b4 <__ssprint_r>
   8c83a:	2800      	cmp	r0, #0
   8c83c:	f040 80a5 	bne.w	8c98a <_svfiprintf_r+0x7dc>
   8c840:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c844:	1b2d      	subs	r5, r5, r4
   8c846:	2d00      	cmp	r5, #0
   8c848:	dd34      	ble.n	8c8b4 <_svfiprintf_r+0x706>
   8c84a:	484b      	ldr	r0, [pc, #300]	; (8c978 <_svfiprintf_r+0x7ca>)
   8c84c:	2d10      	cmp	r5, #16
   8c84e:	f8c8 0000 	str.w	r0, [r8]
   8c852:	dd19      	ble.n	8c888 <_svfiprintf_r+0x6da>
   8c854:	980c      	ldr	r0, [sp, #48]	; 0x30
   8c856:	990d      	ldr	r1, [sp, #52]	; 0x34
   8c858:	1c43      	adds	r3, r0, #1
   8c85a:	2210      	movs	r2, #16
   8c85c:	3110      	adds	r1, #16
   8c85e:	2b07      	cmp	r3, #7
   8c860:	f8c8 2004 	str.w	r2, [r8, #4]
   8c864:	910d      	str	r1, [sp, #52]	; 0x34
   8c866:	930c      	str	r3, [sp, #48]	; 0x30
   8c868:	dc02      	bgt.n	8c870 <_svfiprintf_r+0x6c2>
   8c86a:	f108 0808 	add.w	r8, r8, #8
   8c86e:	e009      	b.n	8c884 <_svfiprintf_r+0x6d6>
   8c870:	4658      	mov	r0, fp
   8c872:	4649      	mov	r1, r9
   8c874:	aa0b      	add	r2, sp, #44	; 0x2c
   8c876:	f7ff fc1d 	bl	8c0b4 <__ssprint_r>
   8c87a:	2800      	cmp	r0, #0
   8c87c:	f040 8085 	bne.w	8c98a <_svfiprintf_r+0x7dc>
   8c880:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c884:	3d10      	subs	r5, #16
   8c886:	e7e0      	b.n	8c84a <_svfiprintf_r+0x69c>
   8c888:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c88a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8c88c:	1c51      	adds	r1, r2, #1
   8c88e:	f8c8 5004 	str.w	r5, [r8, #4]
   8c892:	2907      	cmp	r1, #7
   8c894:	441d      	add	r5, r3
   8c896:	950d      	str	r5, [sp, #52]	; 0x34
   8c898:	910c      	str	r1, [sp, #48]	; 0x30
   8c89a:	dc02      	bgt.n	8c8a2 <_svfiprintf_r+0x6f4>
   8c89c:	f108 0808 	add.w	r8, r8, #8
   8c8a0:	e008      	b.n	8c8b4 <_svfiprintf_r+0x706>
   8c8a2:	4658      	mov	r0, fp
   8c8a4:	4649      	mov	r1, r9
   8c8a6:	aa0b      	add	r2, sp, #44	; 0x2c
   8c8a8:	f7ff fc04 	bl	8c0b4 <__ssprint_r>
   8c8ac:	2800      	cmp	r0, #0
   8c8ae:	d16c      	bne.n	8c98a <_svfiprintf_r+0x7dc>
   8c8b0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c8b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8c8b6:	980d      	ldr	r0, [sp, #52]	; 0x34
   8c8b8:	1c5a      	adds	r2, r3, #1
   8c8ba:	f8c8 4004 	str.w	r4, [r8, #4]
   8c8be:	2a07      	cmp	r2, #7
   8c8c0:	4404      	add	r4, r0
   8c8c2:	f8c8 a000 	str.w	sl, [r8]
   8c8c6:	940d      	str	r4, [sp, #52]	; 0x34
   8c8c8:	920c      	str	r2, [sp, #48]	; 0x30
   8c8ca:	dc02      	bgt.n	8c8d2 <_svfiprintf_r+0x724>
   8c8cc:	f108 0308 	add.w	r3, r8, #8
   8c8d0:	e007      	b.n	8c8e2 <_svfiprintf_r+0x734>
   8c8d2:	4658      	mov	r0, fp
   8c8d4:	4649      	mov	r1, r9
   8c8d6:	aa0b      	add	r2, sp, #44	; 0x2c
   8c8d8:	f7ff fbec 	bl	8c0b4 <__ssprint_r>
   8c8dc:	2800      	cmp	r0, #0
   8c8de:	d154      	bne.n	8c98a <_svfiprintf_r+0x7dc>
   8c8e0:	ab18      	add	r3, sp, #96	; 0x60
   8c8e2:	077a      	lsls	r2, r7, #29
   8c8e4:	d40b      	bmi.n	8c8fe <_svfiprintf_r+0x750>
   8c8e6:	9804      	ldr	r0, [sp, #16]
   8c8e8:	9b02      	ldr	r3, [sp, #8]
   8c8ea:	9a03      	ldr	r2, [sp, #12]
   8c8ec:	990d      	ldr	r1, [sp, #52]	; 0x34
   8c8ee:	4293      	cmp	r3, r2
   8c8f0:	bfac      	ite	ge
   8c8f2:	18c0      	addge	r0, r0, r3
   8c8f4:	1880      	addlt	r0, r0, r2
   8c8f6:	9004      	str	r0, [sp, #16]
   8c8f8:	2900      	cmp	r1, #0
   8c8fa:	d036      	beq.n	8c96a <_svfiprintf_r+0x7bc>
   8c8fc:	e02f      	b.n	8c95e <_svfiprintf_r+0x7b0>
   8c8fe:	9c03      	ldr	r4, [sp, #12]
   8c900:	9902      	ldr	r1, [sp, #8]
   8c902:	1a64      	subs	r4, r4, r1
   8c904:	2c00      	cmp	r4, #0
   8c906:	ddee      	ble.n	8c8e6 <_svfiprintf_r+0x738>
   8c908:	481a      	ldr	r0, [pc, #104]	; (8c974 <_svfiprintf_r+0x7c6>)
   8c90a:	2c10      	cmp	r4, #16
   8c90c:	6018      	str	r0, [r3, #0]
   8c90e:	dd15      	ble.n	8c93c <_svfiprintf_r+0x78e>
   8c910:	990c      	ldr	r1, [sp, #48]	; 0x30
   8c912:	2010      	movs	r0, #16
   8c914:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8c916:	6058      	str	r0, [r3, #4]
   8c918:	1c48      	adds	r0, r1, #1
   8c91a:	3210      	adds	r2, #16
   8c91c:	2807      	cmp	r0, #7
   8c91e:	920d      	str	r2, [sp, #52]	; 0x34
   8c920:	900c      	str	r0, [sp, #48]	; 0x30
   8c922:	dc01      	bgt.n	8c928 <_svfiprintf_r+0x77a>
   8c924:	3308      	adds	r3, #8
   8c926:	e007      	b.n	8c938 <_svfiprintf_r+0x78a>
   8c928:	4658      	mov	r0, fp
   8c92a:	4649      	mov	r1, r9
   8c92c:	aa0b      	add	r2, sp, #44	; 0x2c
   8c92e:	f7ff fbc1 	bl	8c0b4 <__ssprint_r>
   8c932:	2800      	cmp	r0, #0
   8c934:	d129      	bne.n	8c98a <_svfiprintf_r+0x7dc>
   8c936:	ab18      	add	r3, sp, #96	; 0x60
   8c938:	3c10      	subs	r4, #16
   8c93a:	e7e5      	b.n	8c908 <_svfiprintf_r+0x75a>
   8c93c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c93e:	605c      	str	r4, [r3, #4]
   8c940:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8c942:	1c51      	adds	r1, r2, #1
   8c944:	191c      	adds	r4, r3, r4
   8c946:	2907      	cmp	r1, #7
   8c948:	940d      	str	r4, [sp, #52]	; 0x34
   8c94a:	910c      	str	r1, [sp, #48]	; 0x30
   8c94c:	ddcb      	ble.n	8c8e6 <_svfiprintf_r+0x738>
   8c94e:	4658      	mov	r0, fp
   8c950:	4649      	mov	r1, r9
   8c952:	aa0b      	add	r2, sp, #44	; 0x2c
   8c954:	f7ff fbae 	bl	8c0b4 <__ssprint_r>
   8c958:	2800      	cmp	r0, #0
   8c95a:	d0c4      	beq.n	8c8e6 <_svfiprintf_r+0x738>
   8c95c:	e015      	b.n	8c98a <_svfiprintf_r+0x7dc>
   8c95e:	4658      	mov	r0, fp
   8c960:	4649      	mov	r1, r9
   8c962:	aa0b      	add	r2, sp, #44	; 0x2c
   8c964:	f7ff fba6 	bl	8c0b4 <__ssprint_r>
   8c968:	b978      	cbnz	r0, 8c98a <_svfiprintf_r+0x7dc>
   8c96a:	2500      	movs	r5, #0
   8c96c:	950c      	str	r5, [sp, #48]	; 0x30
   8c96e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c972:	e445      	b.n	8c200 <_svfiprintf_r+0x52>
   8c974:	0008dee8 	.word	0x0008dee8
   8c978:	0008def8 	.word	0x0008def8
   8c97c:	980d      	ldr	r0, [sp, #52]	; 0x34
   8c97e:	b120      	cbz	r0, 8c98a <_svfiprintf_r+0x7dc>
   8c980:	4658      	mov	r0, fp
   8c982:	4649      	mov	r1, r9
   8c984:	aa0b      	add	r2, sp, #44	; 0x2c
   8c986:	f7ff fb95 	bl	8c0b4 <__ssprint_r>
   8c98a:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   8c98e:	9b04      	ldr	r3, [sp, #16]
   8c990:	f002 0140 	and.w	r1, r2, #64	; 0x40
   8c994:	b208      	sxth	r0, r1
   8c996:	2800      	cmp	r0, #0
   8c998:	bf18      	it	ne
   8c99a:	f04f 33ff 	movne.w	r3, #4294967295
   8c99e:	4618      	mov	r0, r3
   8c9a0:	b029      	add	sp, #164	; 0xa4
   8c9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c9a6:	bf00      	nop

0008c9a8 <__aeabi_uldivmod>:
   8c9a8:	b94b      	cbnz	r3, 8c9be <__aeabi_uldivmod+0x16>
   8c9aa:	b942      	cbnz	r2, 8c9be <__aeabi_uldivmod+0x16>
   8c9ac:	2900      	cmp	r1, #0
   8c9ae:	bf08      	it	eq
   8c9b0:	2800      	cmpeq	r0, #0
   8c9b2:	d002      	beq.n	8c9ba <__aeabi_uldivmod+0x12>
   8c9b4:	f04f 31ff 	mov.w	r1, #4294967295
   8c9b8:	4608      	mov	r0, r1
   8c9ba:	f000 b83b 	b.w	8ca34 <__aeabi_idiv0>
   8c9be:	b082      	sub	sp, #8
   8c9c0:	46ec      	mov	ip, sp
   8c9c2:	e92d 5000 	stmdb	sp!, {ip, lr}
   8c9c6:	f000 f81d 	bl	8ca04 <__gnu_uldivmod_helper>
   8c9ca:	f8dd e004 	ldr.w	lr, [sp, #4]
   8c9ce:	b002      	add	sp, #8
   8c9d0:	bc0c      	pop	{r2, r3}
   8c9d2:	4770      	bx	lr

0008c9d4 <__gnu_ldivmod_helper>:
   8c9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c9d8:	4616      	mov	r6, r2
   8c9da:	4698      	mov	r8, r3
   8c9dc:	4604      	mov	r4, r0
   8c9de:	460d      	mov	r5, r1
   8c9e0:	f000 f82a 	bl	8ca38 <__divdi3>
   8c9e4:	fb06 fc01 	mul.w	ip, r6, r1
   8c9e8:	fba6 2300 	umull	r2, r3, r6, r0
   8c9ec:	fb00 c708 	mla	r7, r0, r8, ip
   8c9f0:	18fb      	adds	r3, r7, r3
   8c9f2:	1aa2      	subs	r2, r4, r2
   8c9f4:	eb65 0303 	sbc.w	r3, r5, r3
   8c9f8:	9c06      	ldr	r4, [sp, #24]
   8c9fa:	e9c4 2300 	strd	r2, r3, [r4]
   8c9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8ca02:	bf00      	nop

0008ca04 <__gnu_uldivmod_helper>:
   8ca04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8ca08:	4690      	mov	r8, r2
   8ca0a:	4606      	mov	r6, r0
   8ca0c:	460f      	mov	r7, r1
   8ca0e:	461d      	mov	r5, r3
   8ca10:	f000 f970 	bl	8ccf4 <__udivdi3>
   8ca14:	fb00 f305 	mul.w	r3, r0, r5
   8ca18:	fba0 4508 	umull	r4, r5, r0, r8
   8ca1c:	fb08 3801 	mla	r8, r8, r1, r3
   8ca20:	9b06      	ldr	r3, [sp, #24]
   8ca22:	4445      	add	r5, r8
   8ca24:	1b34      	subs	r4, r6, r4
   8ca26:	eb67 0505 	sbc.w	r5, r7, r5
   8ca2a:	e9c3 4500 	strd	r4, r5, [r3]
   8ca2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8ca32:	bf00      	nop

0008ca34 <__aeabi_idiv0>:
   8ca34:	4770      	bx	lr
   8ca36:	bf00      	nop

0008ca38 <__divdi3>:
   8ca38:	2900      	cmp	r1, #0
   8ca3a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8ca3e:	461d      	mov	r5, r3
   8ca40:	f2c0 809d 	blt.w	8cb7e <__divdi3+0x146>
   8ca44:	2400      	movs	r4, #0
   8ca46:	2d00      	cmp	r5, #0
   8ca48:	f2c0 8094 	blt.w	8cb74 <__divdi3+0x13c>
   8ca4c:	4680      	mov	r8, r0
   8ca4e:	460f      	mov	r7, r1
   8ca50:	4694      	mov	ip, r2
   8ca52:	461e      	mov	r6, r3
   8ca54:	bbe3      	cbnz	r3, 8cad0 <__divdi3+0x98>
   8ca56:	428a      	cmp	r2, r1
   8ca58:	d955      	bls.n	8cb06 <__divdi3+0xce>
   8ca5a:	fab2 f782 	clz	r7, r2
   8ca5e:	b147      	cbz	r7, 8ca72 <__divdi3+0x3a>
   8ca60:	f1c7 0520 	rsb	r5, r7, #32
   8ca64:	fa20 f605 	lsr.w	r6, r0, r5
   8ca68:	fa01 f107 	lsl.w	r1, r1, r7
   8ca6c:	40ba      	lsls	r2, r7
   8ca6e:	40b8      	lsls	r0, r7
   8ca70:	4331      	orrs	r1, r6
   8ca72:	0c17      	lsrs	r7, r2, #16
   8ca74:	fbb1 f6f7 	udiv	r6, r1, r7
   8ca78:	fa1f fc82 	uxth.w	ip, r2
   8ca7c:	fb07 1116 	mls	r1, r7, r6, r1
   8ca80:	fb0c f506 	mul.w	r5, ip, r6
   8ca84:	0c03      	lsrs	r3, r0, #16
   8ca86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8ca8a:	429d      	cmp	r5, r3
   8ca8c:	d908      	bls.n	8caa0 <__divdi3+0x68>
   8ca8e:	1e71      	subs	r1, r6, #1
   8ca90:	189b      	adds	r3, r3, r2
   8ca92:	f080 8113 	bcs.w	8ccbc <__divdi3+0x284>
   8ca96:	429d      	cmp	r5, r3
   8ca98:	f240 8110 	bls.w	8ccbc <__divdi3+0x284>
   8ca9c:	3e02      	subs	r6, #2
   8ca9e:	189b      	adds	r3, r3, r2
   8caa0:	1b59      	subs	r1, r3, r5
   8caa2:	fbb1 f5f7 	udiv	r5, r1, r7
   8caa6:	fb07 1315 	mls	r3, r7, r5, r1
   8caaa:	fb0c fc05 	mul.w	ip, ip, r5
   8caae:	b280      	uxth	r0, r0
   8cab0:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
   8cab4:	458c      	cmp	ip, r1
   8cab6:	d907      	bls.n	8cac8 <__divdi3+0x90>
   8cab8:	1e6b      	subs	r3, r5, #1
   8caba:	188a      	adds	r2, r1, r2
   8cabc:	f080 8100 	bcs.w	8ccc0 <__divdi3+0x288>
   8cac0:	4594      	cmp	ip, r2
   8cac2:	f240 80fd 	bls.w	8ccc0 <__divdi3+0x288>
   8cac6:	3d02      	subs	r5, #2
   8cac8:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
   8cacc:	2500      	movs	r5, #0
   8cace:	e003      	b.n	8cad8 <__divdi3+0xa0>
   8cad0:	428b      	cmp	r3, r1
   8cad2:	d90c      	bls.n	8caee <__divdi3+0xb6>
   8cad4:	2500      	movs	r5, #0
   8cad6:	4629      	mov	r1, r5
   8cad8:	460a      	mov	r2, r1
   8cada:	462b      	mov	r3, r5
   8cadc:	b114      	cbz	r4, 8cae4 <__divdi3+0xac>
   8cade:	4252      	negs	r2, r2
   8cae0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8cae4:	4610      	mov	r0, r2
   8cae6:	4619      	mov	r1, r3
   8cae8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8caec:	4770      	bx	lr
   8caee:	fab3 f583 	clz	r5, r3
   8caf2:	2d00      	cmp	r5, #0
   8caf4:	f040 8087 	bne.w	8cc06 <__divdi3+0x1ce>
   8caf8:	428b      	cmp	r3, r1
   8cafa:	d301      	bcc.n	8cb00 <__divdi3+0xc8>
   8cafc:	4282      	cmp	r2, r0
   8cafe:	d8ea      	bhi.n	8cad6 <__divdi3+0x9e>
   8cb00:	2500      	movs	r5, #0
   8cb02:	2101      	movs	r1, #1
   8cb04:	e7e8      	b.n	8cad8 <__divdi3+0xa0>
   8cb06:	b912      	cbnz	r2, 8cb0e <__divdi3+0xd6>
   8cb08:	2601      	movs	r6, #1
   8cb0a:	fbb6 f2f2 	udiv	r2, r6, r2
   8cb0e:	fab2 f682 	clz	r6, r2
   8cb12:	2e00      	cmp	r6, #0
   8cb14:	d139      	bne.n	8cb8a <__divdi3+0x152>
   8cb16:	1a8e      	subs	r6, r1, r2
   8cb18:	0c13      	lsrs	r3, r2, #16
   8cb1a:	fa1f fc82 	uxth.w	ip, r2
   8cb1e:	2501      	movs	r5, #1
   8cb20:	fbb6 f7f3 	udiv	r7, r6, r3
   8cb24:	fb03 6117 	mls	r1, r3, r7, r6
   8cb28:	fb0c f807 	mul.w	r8, ip, r7
   8cb2c:	ea4f 4910 	mov.w	r9, r0, lsr #16
   8cb30:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
   8cb34:	45b0      	cmp	r8, r6
   8cb36:	d906      	bls.n	8cb46 <__divdi3+0x10e>
   8cb38:	1e79      	subs	r1, r7, #1
   8cb3a:	18b6      	adds	r6, r6, r2
   8cb3c:	d202      	bcs.n	8cb44 <__divdi3+0x10c>
   8cb3e:	45b0      	cmp	r8, r6
   8cb40:	f200 80d3 	bhi.w	8ccea <__divdi3+0x2b2>
   8cb44:	460f      	mov	r7, r1
   8cb46:	ebc8 0606 	rsb	r6, r8, r6
   8cb4a:	fbb6 f1f3 	udiv	r1, r6, r3
   8cb4e:	fb03 6311 	mls	r3, r3, r1, r6
   8cb52:	fb0c fc01 	mul.w	ip, ip, r1
   8cb56:	b280      	uxth	r0, r0
   8cb58:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   8cb5c:	459c      	cmp	ip, r3
   8cb5e:	d906      	bls.n	8cb6e <__divdi3+0x136>
   8cb60:	1e4e      	subs	r6, r1, #1
   8cb62:	189a      	adds	r2, r3, r2
   8cb64:	d202      	bcs.n	8cb6c <__divdi3+0x134>
   8cb66:	4594      	cmp	ip, r2
   8cb68:	f200 80c2 	bhi.w	8ccf0 <__divdi3+0x2b8>
   8cb6c:	4631      	mov	r1, r6
   8cb6e:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   8cb72:	e7b1      	b.n	8cad8 <__divdi3+0xa0>
   8cb74:	43e4      	mvns	r4, r4
   8cb76:	4252      	negs	r2, r2
   8cb78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8cb7c:	e766      	b.n	8ca4c <__divdi3+0x14>
   8cb7e:	4240      	negs	r0, r0
   8cb80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8cb84:	f04f 34ff 	mov.w	r4, #4294967295
   8cb88:	e75d      	b.n	8ca46 <__divdi3+0xe>
   8cb8a:	40b2      	lsls	r2, r6
   8cb8c:	f1c6 0920 	rsb	r9, r6, #32
   8cb90:	fa21 f709 	lsr.w	r7, r1, r9
   8cb94:	fa20 f909 	lsr.w	r9, r0, r9
   8cb98:	fa01 f106 	lsl.w	r1, r1, r6
   8cb9c:	0c13      	lsrs	r3, r2, #16
   8cb9e:	fbb7 f8f3 	udiv	r8, r7, r3
   8cba2:	fa1f fc82 	uxth.w	ip, r2
   8cba6:	fb03 7718 	mls	r7, r3, r8, r7
   8cbaa:	fb0c f508 	mul.w	r5, ip, r8
   8cbae:	ea49 0901 	orr.w	r9, r9, r1
   8cbb2:	ea4f 4119 	mov.w	r1, r9, lsr #16
   8cbb6:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
   8cbba:	40b0      	lsls	r0, r6
   8cbbc:	42bd      	cmp	r5, r7
   8cbbe:	d90a      	bls.n	8cbd6 <__divdi3+0x19e>
   8cbc0:	18bf      	adds	r7, r7, r2
   8cbc2:	f108 36ff 	add.w	r6, r8, #4294967295
   8cbc6:	f080 808e 	bcs.w	8cce6 <__divdi3+0x2ae>
   8cbca:	42bd      	cmp	r5, r7
   8cbcc:	f240 808b 	bls.w	8cce6 <__divdi3+0x2ae>
   8cbd0:	f1a8 0802 	sub.w	r8, r8, #2
   8cbd4:	18bf      	adds	r7, r7, r2
   8cbd6:	1b79      	subs	r1, r7, r5
   8cbd8:	fbb1 f5f3 	udiv	r5, r1, r3
   8cbdc:	fb03 1715 	mls	r7, r3, r5, r1
   8cbe0:	fb0c f605 	mul.w	r6, ip, r5
   8cbe4:	fa1f f989 	uxth.w	r9, r9
   8cbe8:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
   8cbec:	428e      	cmp	r6, r1
   8cbee:	d906      	bls.n	8cbfe <__divdi3+0x1c6>
   8cbf0:	1e6f      	subs	r7, r5, #1
   8cbf2:	1889      	adds	r1, r1, r2
   8cbf4:	d271      	bcs.n	8ccda <__divdi3+0x2a2>
   8cbf6:	428e      	cmp	r6, r1
   8cbf8:	d96f      	bls.n	8ccda <__divdi3+0x2a2>
   8cbfa:	3d02      	subs	r5, #2
   8cbfc:	1889      	adds	r1, r1, r2
   8cbfe:	1b8e      	subs	r6, r1, r6
   8cc00:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
   8cc04:	e78c      	b.n	8cb20 <__divdi3+0xe8>
   8cc06:	f1c5 0120 	rsb	r1, r5, #32
   8cc0a:	fa22 f301 	lsr.w	r3, r2, r1
   8cc0e:	fa06 f605 	lsl.w	r6, r6, r5
   8cc12:	fa27 f201 	lsr.w	r2, r7, r1
   8cc16:	fa07 f705 	lsl.w	r7, r7, r5
   8cc1a:	fa20 f101 	lsr.w	r1, r0, r1
   8cc1e:	431e      	orrs	r6, r3
   8cc20:	ea4f 4916 	mov.w	r9, r6, lsr #16
   8cc24:	fbb2 f8f9 	udiv	r8, r2, r9
   8cc28:	fa1f fa86 	uxth.w	sl, r6
   8cc2c:	fb09 2218 	mls	r2, r9, r8, r2
   8cc30:	fb0a fb08 	mul.w	fp, sl, r8
   8cc34:	430f      	orrs	r7, r1
   8cc36:	0c3b      	lsrs	r3, r7, #16
   8cc38:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8cc3c:	4593      	cmp	fp, r2
   8cc3e:	fa0c fc05 	lsl.w	ip, ip, r5
   8cc42:	d908      	bls.n	8cc56 <__divdi3+0x21e>
   8cc44:	1992      	adds	r2, r2, r6
   8cc46:	f108 31ff 	add.w	r1, r8, #4294967295
   8cc4a:	d24a      	bcs.n	8cce2 <__divdi3+0x2aa>
   8cc4c:	4593      	cmp	fp, r2
   8cc4e:	d948      	bls.n	8cce2 <__divdi3+0x2aa>
   8cc50:	f1a8 0802 	sub.w	r8, r8, #2
   8cc54:	1992      	adds	r2, r2, r6
   8cc56:	ebcb 0302 	rsb	r3, fp, r2
   8cc5a:	fbb3 f1f9 	udiv	r1, r3, r9
   8cc5e:	fb09 3211 	mls	r2, r9, r1, r3
   8cc62:	fb0a fa01 	mul.w	sl, sl, r1
   8cc66:	b2bf      	uxth	r7, r7
   8cc68:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
   8cc6c:	459a      	cmp	sl, r3
   8cc6e:	d906      	bls.n	8cc7e <__divdi3+0x246>
   8cc70:	1e4a      	subs	r2, r1, #1
   8cc72:	199b      	adds	r3, r3, r6
   8cc74:	d233      	bcs.n	8ccde <__divdi3+0x2a6>
   8cc76:	459a      	cmp	sl, r3
   8cc78:	d931      	bls.n	8ccde <__divdi3+0x2a6>
   8cc7a:	3902      	subs	r1, #2
   8cc7c:	199b      	adds	r3, r3, r6
   8cc7e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
   8cc82:	0c0f      	lsrs	r7, r1, #16
   8cc84:	fa1f f88c 	uxth.w	r8, ip
   8cc88:	fb08 f607 	mul.w	r6, r8, r7
   8cc8c:	b28a      	uxth	r2, r1
   8cc8e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   8cc92:	fb08 f802 	mul.w	r8, r8, r2
   8cc96:	fb0c 6202 	mla	r2, ip, r2, r6
   8cc9a:	fb0c fc07 	mul.w	ip, ip, r7
   8cc9e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   8cca2:	4296      	cmp	r6, r2
   8cca4:	bf88      	it	hi
   8cca6:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
   8ccaa:	ebca 0303 	rsb	r3, sl, r3
   8ccae:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
   8ccb2:	4563      	cmp	r3, ip
   8ccb4:	d30e      	bcc.n	8ccd4 <__divdi3+0x29c>
   8ccb6:	d005      	beq.n	8ccc4 <__divdi3+0x28c>
   8ccb8:	2500      	movs	r5, #0
   8ccba:	e70d      	b.n	8cad8 <__divdi3+0xa0>
   8ccbc:	460e      	mov	r6, r1
   8ccbe:	e6ef      	b.n	8caa0 <__divdi3+0x68>
   8ccc0:	461d      	mov	r5, r3
   8ccc2:	e701      	b.n	8cac8 <__divdi3+0x90>
   8ccc4:	fa00 f005 	lsl.w	r0, r0, r5
   8ccc8:	fa1f f888 	uxth.w	r8, r8
   8cccc:	eb08 4502 	add.w	r5, r8, r2, lsl #16
   8ccd0:	42a8      	cmp	r0, r5
   8ccd2:	d2f1      	bcs.n	8ccb8 <__divdi3+0x280>
   8ccd4:	3901      	subs	r1, #1
   8ccd6:	2500      	movs	r5, #0
   8ccd8:	e6fe      	b.n	8cad8 <__divdi3+0xa0>
   8ccda:	463d      	mov	r5, r7
   8ccdc:	e78f      	b.n	8cbfe <__divdi3+0x1c6>
   8ccde:	4611      	mov	r1, r2
   8cce0:	e7cd      	b.n	8cc7e <__divdi3+0x246>
   8cce2:	4688      	mov	r8, r1
   8cce4:	e7b7      	b.n	8cc56 <__divdi3+0x21e>
   8cce6:	46b0      	mov	r8, r6
   8cce8:	e775      	b.n	8cbd6 <__divdi3+0x19e>
   8ccea:	3f02      	subs	r7, #2
   8ccec:	18b6      	adds	r6, r6, r2
   8ccee:	e72a      	b.n	8cb46 <__divdi3+0x10e>
   8ccf0:	3902      	subs	r1, #2
   8ccf2:	e73c      	b.n	8cb6e <__divdi3+0x136>

0008ccf4 <__udivdi3>:
   8ccf4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8ccf8:	4614      	mov	r4, r2
   8ccfa:	4605      	mov	r5, r0
   8ccfc:	460e      	mov	r6, r1
   8ccfe:	2b00      	cmp	r3, #0
   8cd00:	d13d      	bne.n	8cd7e <__udivdi3+0x8a>
   8cd02:	428a      	cmp	r2, r1
   8cd04:	d949      	bls.n	8cd9a <__udivdi3+0xa6>
   8cd06:	fab2 f782 	clz	r7, r2
   8cd0a:	b147      	cbz	r7, 8cd1e <__udivdi3+0x2a>
   8cd0c:	f1c7 0120 	rsb	r1, r7, #32
   8cd10:	fa20 f201 	lsr.w	r2, r0, r1
   8cd14:	fa06 f607 	lsl.w	r6, r6, r7
   8cd18:	40bc      	lsls	r4, r7
   8cd1a:	40bd      	lsls	r5, r7
   8cd1c:	4316      	orrs	r6, r2
   8cd1e:	0c22      	lsrs	r2, r4, #16
   8cd20:	fbb6 f0f2 	udiv	r0, r6, r2
   8cd24:	b2a1      	uxth	r1, r4
   8cd26:	fb02 6610 	mls	r6, r2, r0, r6
   8cd2a:	fb01 f300 	mul.w	r3, r1, r0
   8cd2e:	0c2f      	lsrs	r7, r5, #16
   8cd30:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   8cd34:	42b3      	cmp	r3, r6
   8cd36:	d908      	bls.n	8cd4a <__udivdi3+0x56>
   8cd38:	1e47      	subs	r7, r0, #1
   8cd3a:	1936      	adds	r6, r6, r4
   8cd3c:	f080 80fa 	bcs.w	8cf34 <__udivdi3+0x240>
   8cd40:	42b3      	cmp	r3, r6
   8cd42:	f240 80f7 	bls.w	8cf34 <__udivdi3+0x240>
   8cd46:	3802      	subs	r0, #2
   8cd48:	1936      	adds	r6, r6, r4
   8cd4a:	1af6      	subs	r6, r6, r3
   8cd4c:	fbb6 f3f2 	udiv	r3, r6, r2
   8cd50:	fb02 6213 	mls	r2, r2, r3, r6
   8cd54:	fb01 f103 	mul.w	r1, r1, r3
   8cd58:	b2ad      	uxth	r5, r5
   8cd5a:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
   8cd5e:	4291      	cmp	r1, r2
   8cd60:	d907      	bls.n	8cd72 <__udivdi3+0x7e>
   8cd62:	1e5e      	subs	r6, r3, #1
   8cd64:	1912      	adds	r2, r2, r4
   8cd66:	f080 80e7 	bcs.w	8cf38 <__udivdi3+0x244>
   8cd6a:	4291      	cmp	r1, r2
   8cd6c:	f240 80e4 	bls.w	8cf38 <__udivdi3+0x244>
   8cd70:	3b02      	subs	r3, #2
   8cd72:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   8cd76:	2100      	movs	r1, #0
   8cd78:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8cd7c:	4770      	bx	lr
   8cd7e:	428b      	cmp	r3, r1
   8cd80:	d843      	bhi.n	8ce0a <__udivdi3+0x116>
   8cd82:	fab3 f483 	clz	r4, r3
   8cd86:	2c00      	cmp	r4, #0
   8cd88:	d142      	bne.n	8ce10 <__udivdi3+0x11c>
   8cd8a:	428b      	cmp	r3, r1
   8cd8c:	d302      	bcc.n	8cd94 <__udivdi3+0xa0>
   8cd8e:	4282      	cmp	r2, r0
   8cd90:	f200 80e1 	bhi.w	8cf56 <__udivdi3+0x262>
   8cd94:	2100      	movs	r1, #0
   8cd96:	2001      	movs	r0, #1
   8cd98:	e7ee      	b.n	8cd78 <__udivdi3+0x84>
   8cd9a:	b912      	cbnz	r2, 8cda2 <__udivdi3+0xae>
   8cd9c:	2701      	movs	r7, #1
   8cd9e:	fbb7 f4f2 	udiv	r4, r7, r2
   8cda2:	fab4 f284 	clz	r2, r4
   8cda6:	2a00      	cmp	r2, #0
   8cda8:	f040 8089 	bne.w	8cebe <__udivdi3+0x1ca>
   8cdac:	1b0a      	subs	r2, r1, r4
   8cdae:	0c23      	lsrs	r3, r4, #16
   8cdb0:	b2a7      	uxth	r7, r4
   8cdb2:	2101      	movs	r1, #1
   8cdb4:	fbb2 f6f3 	udiv	r6, r2, r3
   8cdb8:	fb03 2216 	mls	r2, r3, r6, r2
   8cdbc:	fb07 f006 	mul.w	r0, r7, r6
   8cdc0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   8cdc4:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   8cdc8:	4290      	cmp	r0, r2
   8cdca:	d907      	bls.n	8cddc <__udivdi3+0xe8>
   8cdcc:	1912      	adds	r2, r2, r4
   8cdce:	f106 3cff 	add.w	ip, r6, #4294967295
   8cdd2:	d202      	bcs.n	8cdda <__udivdi3+0xe6>
   8cdd4:	4290      	cmp	r0, r2
   8cdd6:	f200 80d0 	bhi.w	8cf7a <__udivdi3+0x286>
   8cdda:	4666      	mov	r6, ip
   8cddc:	1a12      	subs	r2, r2, r0
   8cdde:	fbb2 f0f3 	udiv	r0, r2, r3
   8cde2:	fb03 2310 	mls	r3, r3, r0, r2
   8cde6:	fb07 f700 	mul.w	r7, r7, r0
   8cdea:	b2ad      	uxth	r5, r5
   8cdec:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   8cdf0:	429f      	cmp	r7, r3
   8cdf2:	d907      	bls.n	8ce04 <__udivdi3+0x110>
   8cdf4:	1e42      	subs	r2, r0, #1
   8cdf6:	191b      	adds	r3, r3, r4
   8cdf8:	f080 80a0 	bcs.w	8cf3c <__udivdi3+0x248>
   8cdfc:	429f      	cmp	r7, r3
   8cdfe:	f240 809d 	bls.w	8cf3c <__udivdi3+0x248>
   8ce02:	3802      	subs	r0, #2
   8ce04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   8ce08:	e7b6      	b.n	8cd78 <__udivdi3+0x84>
   8ce0a:	2100      	movs	r1, #0
   8ce0c:	4608      	mov	r0, r1
   8ce0e:	e7b3      	b.n	8cd78 <__udivdi3+0x84>
   8ce10:	f1c4 0620 	rsb	r6, r4, #32
   8ce14:	fa22 f706 	lsr.w	r7, r2, r6
   8ce18:	fa03 f304 	lsl.w	r3, r3, r4
   8ce1c:	fa21 f506 	lsr.w	r5, r1, r6
   8ce20:	fa01 f104 	lsl.w	r1, r1, r4
   8ce24:	fa20 f606 	lsr.w	r6, r0, r6
   8ce28:	433b      	orrs	r3, r7
   8ce2a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8ce2e:	fbb5 f7fc 	udiv	r7, r5, ip
   8ce32:	fa1f f883 	uxth.w	r8, r3
   8ce36:	fb0c 5517 	mls	r5, ip, r7, r5
   8ce3a:	fb08 f907 	mul.w	r9, r8, r7
   8ce3e:	ea46 0a01 	orr.w	sl, r6, r1
   8ce42:	ea4f 411a 	mov.w	r1, sl, lsr #16
   8ce46:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   8ce4a:	45a9      	cmp	r9, r5
   8ce4c:	fa02 f204 	lsl.w	r2, r2, r4
   8ce50:	d904      	bls.n	8ce5c <__udivdi3+0x168>
   8ce52:	1e7e      	subs	r6, r7, #1
   8ce54:	18ed      	adds	r5, r5, r3
   8ce56:	f0c0 8081 	bcc.w	8cf5c <__udivdi3+0x268>
   8ce5a:	4637      	mov	r7, r6
   8ce5c:	ebc9 0105 	rsb	r1, r9, r5
   8ce60:	fbb1 f6fc 	udiv	r6, r1, ip
   8ce64:	fb0c 1516 	mls	r5, ip, r6, r1
   8ce68:	fb08 f806 	mul.w	r8, r8, r6
   8ce6c:	fa1f fa8a 	uxth.w	sl, sl
   8ce70:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
   8ce74:	4588      	cmp	r8, r1
   8ce76:	d903      	bls.n	8ce80 <__udivdi3+0x18c>
   8ce78:	1e75      	subs	r5, r6, #1
   8ce7a:	18c9      	adds	r1, r1, r3
   8ce7c:	d374      	bcc.n	8cf68 <__udivdi3+0x274>
   8ce7e:	462e      	mov	r6, r5
   8ce80:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   8ce84:	0c37      	lsrs	r7, r6, #16
   8ce86:	fa1f fc82 	uxth.w	ip, r2
   8ce8a:	fb0c f507 	mul.w	r5, ip, r7
   8ce8e:	0c12      	lsrs	r2, r2, #16
   8ce90:	b2b3      	uxth	r3, r6
   8ce92:	fb0c fc03 	mul.w	ip, ip, r3
   8ce96:	fb02 5303 	mla	r3, r2, r3, r5
   8ce9a:	fb02 f207 	mul.w	r2, r2, r7
   8ce9e:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8cea2:	429d      	cmp	r5, r3
   8cea4:	bf88      	it	hi
   8cea6:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
   8ceaa:	ebc8 0101 	rsb	r1, r8, r1
   8ceae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8ceb2:	4291      	cmp	r1, r2
   8ceb4:	d34c      	bcc.n	8cf50 <__udivdi3+0x25c>
   8ceb6:	d043      	beq.n	8cf40 <__udivdi3+0x24c>
   8ceb8:	4630      	mov	r0, r6
   8ceba:	2100      	movs	r1, #0
   8cebc:	e75c      	b.n	8cd78 <__udivdi3+0x84>
   8cebe:	4094      	lsls	r4, r2
   8cec0:	f1c2 0520 	rsb	r5, r2, #32
   8cec4:	fa21 f605 	lsr.w	r6, r1, r5
   8cec8:	fa20 f505 	lsr.w	r5, r0, r5
   8cecc:	fa01 f102 	lsl.w	r1, r1, r2
   8ced0:	0c23      	lsrs	r3, r4, #16
   8ced2:	fbb6 fcf3 	udiv	ip, r6, r3
   8ced6:	b2a7      	uxth	r7, r4
   8ced8:	fb03 661c 	mls	r6, r3, ip, r6
   8cedc:	fb07 f80c 	mul.w	r8, r7, ip
   8cee0:	4329      	orrs	r1, r5
   8cee2:	0c0d      	lsrs	r5, r1, #16
   8cee4:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   8cee8:	45b0      	cmp	r8, r6
   8ceea:	fa00 f502 	lsl.w	r5, r0, r2
   8ceee:	d908      	bls.n	8cf02 <__udivdi3+0x20e>
   8cef0:	1936      	adds	r6, r6, r4
   8cef2:	f10c 30ff 	add.w	r0, ip, #4294967295
   8cef6:	d23e      	bcs.n	8cf76 <__udivdi3+0x282>
   8cef8:	45b0      	cmp	r8, r6
   8cefa:	d93c      	bls.n	8cf76 <__udivdi3+0x282>
   8cefc:	f1ac 0c02 	sub.w	ip, ip, #2
   8cf00:	1936      	adds	r6, r6, r4
   8cf02:	ebc8 0206 	rsb	r2, r8, r6
   8cf06:	fbb2 f0f3 	udiv	r0, r2, r3
   8cf0a:	fb03 2610 	mls	r6, r3, r0, r2
   8cf0e:	fb07 f800 	mul.w	r8, r7, r0
   8cf12:	b289      	uxth	r1, r1
   8cf14:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   8cf18:	4590      	cmp	r8, r2
   8cf1a:	d906      	bls.n	8cf2a <__udivdi3+0x236>
   8cf1c:	1e46      	subs	r6, r0, #1
   8cf1e:	1912      	adds	r2, r2, r4
   8cf20:	d227      	bcs.n	8cf72 <__udivdi3+0x27e>
   8cf22:	4590      	cmp	r8, r2
   8cf24:	d925      	bls.n	8cf72 <__udivdi3+0x27e>
   8cf26:	3802      	subs	r0, #2
   8cf28:	1912      	adds	r2, r2, r4
   8cf2a:	ebc8 0202 	rsb	r2, r8, r2
   8cf2e:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
   8cf32:	e73f      	b.n	8cdb4 <__udivdi3+0xc0>
   8cf34:	4638      	mov	r0, r7
   8cf36:	e708      	b.n	8cd4a <__udivdi3+0x56>
   8cf38:	4633      	mov	r3, r6
   8cf3a:	e71a      	b.n	8cd72 <__udivdi3+0x7e>
   8cf3c:	4610      	mov	r0, r2
   8cf3e:	e761      	b.n	8ce04 <__udivdi3+0x110>
   8cf40:	fa00 f004 	lsl.w	r0, r0, r4
   8cf44:	fa1f fc8c 	uxth.w	ip, ip
   8cf48:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
   8cf4c:	4298      	cmp	r0, r3
   8cf4e:	d2b3      	bcs.n	8ceb8 <__udivdi3+0x1c4>
   8cf50:	1e70      	subs	r0, r6, #1
   8cf52:	2100      	movs	r1, #0
   8cf54:	e710      	b.n	8cd78 <__udivdi3+0x84>
   8cf56:	4621      	mov	r1, r4
   8cf58:	4620      	mov	r0, r4
   8cf5a:	e70d      	b.n	8cd78 <__udivdi3+0x84>
   8cf5c:	45a9      	cmp	r9, r5
   8cf5e:	f67f af7c 	bls.w	8ce5a <__udivdi3+0x166>
   8cf62:	3f02      	subs	r7, #2
   8cf64:	18ed      	adds	r5, r5, r3
   8cf66:	e779      	b.n	8ce5c <__udivdi3+0x168>
   8cf68:	4588      	cmp	r8, r1
   8cf6a:	d988      	bls.n	8ce7e <__udivdi3+0x18a>
   8cf6c:	3e02      	subs	r6, #2
   8cf6e:	18c9      	adds	r1, r1, r3
   8cf70:	e786      	b.n	8ce80 <__udivdi3+0x18c>
   8cf72:	4630      	mov	r0, r6
   8cf74:	e7d9      	b.n	8cf2a <__udivdi3+0x236>
   8cf76:	4684      	mov	ip, r0
   8cf78:	e7c3      	b.n	8cf02 <__udivdi3+0x20e>
   8cf7a:	3e02      	subs	r6, #2
   8cf7c:	1912      	adds	r2, r2, r4
   8cf7e:	e72d      	b.n	8cddc <__udivdi3+0xe8>

0008cf80 <sd_trans_multipliers>:
   8cf80:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   8cf90:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   8cfa0:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   8cfb0:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0008cfc0 <sd_mmc_trans_units>:
   8cfc0:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0008cfdc <mmc_trans_multipliers>:
   8cfdc:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   8cfec:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   8cffc:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   8d00c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   8d01c:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   8d02c:	0010 0000 0020 0000 0040 0000 0080 0000     .... ...@.......
   8d03c:	0100 0000 0200 0000 0400 0000 432a 534c     ............*CLS
   8d04c:	0000 0000 452a 4553 0000 0000 452a 4553     ....*ESE....*ESE
   8d05c:	003f 0000 452a 5253 003f 0000 492a 4e44     ?...*ESR?...*IDN
   8d06c:	003f 0000 4f2a 4350 0000 0000 4f2a 4350     ?...*OPC....*OPC
   8d07c:	003f 0000 522a 5453 0000 0000 532a 4552     ?...*RST....*SRE
   8d08c:	0000 0000 532a 4552 003f 0000 532a 4254     ....*SRE?...*STB
   8d09c:	003f 0000 542a 5453 003f 0000 572a 4941     ?...*TST?...*WAI
   8d0ac:	0000 0000 5953 5453 6d65 453a 5252 726f     ....SYSTem:ERRor
   8d0bc:	003f 0000 5953 5453 6d65 453a 5252 726f     ?...SYSTem:ERRor
   8d0cc:	4e3a 5845 3f54 0000 5953 5453 6d65 453a     :NEXT?..SYSTem:E
   8d0dc:	5252 726f 433a 554f 744e 003f 5953 5453     RRor:COUNt?.SYST
   8d0ec:	6d65 563a 5245 6953 6e6f 003f 5953 5453     em:VERSion?.SYST
   8d0fc:	6d65 543a 5059 3f45 0000 0000 5953 5453     em:TYPE?....SYST
   8d10c:	6d65 4e3a 4d41 3f45 0000 0000 5953 5453     em:NAME?....SYST
   8d11c:	6d65 443a 5345 3f43 0000 0000 5953 5453     em:DESC?....SYST
   8d12c:	6d65 533a 3f4e 0000 5953 5453 6d65 443a     em:SN?..SYSTem:D
   8d13c:	4f50 6557 3f72 0000 5953 5453 6d65 4d3a     POWer?..SYSTem:M
   8d14c:	5841 7543 7272 6e65 3f74 0000 5953 5453     AXCurrent?..SYST
   8d15c:	6d65 4e3a 4d4f 7543 7272 6e65 3f74 0000     em:NOMCurrent?..
   8d16c:	5453 5441 7375 533a 4344 7261 7364 6174     STATus:SDCardsta
   8d17c:	7574 3f73 0000 0000 5453 5441 7375 4c3a     tus?....STATus:L
   8d18c:	4445 7453 7461 7375 003f 0000 5453 5441     EDStatus?...STAT
   8d19c:	7375 423a 5455 6f74 736e 6174 7574 3f73     us:BUTtonstatus?
   8d1ac:	0000 0000 4f43 464e 6769 7275 3a65 454c     ....CONFigure:LE
   8d1bc:	0044 0000 4f43 464e 6769 7275 3a65 494c     D...CONFigure:LI
   8d1cc:	6847 7374 0000 0000 4f43 464e 6769 7275     Ghts....CONFigur
   8d1dc:	3a65 4f50 6557 0072 4f43 464e 6769 7275     e:POWer.CONFigur
   8d1ec:	3a65 4545 5250 4d4f 0000 0000 454d 5341     e:EEPROM....MEAS
   8d1fc:	7275 3a65 4545 5250 4d4f 003f 4f43 464e     ure:EEPROM?.CONF
   8d20c:	6769 7275 3a65 5053 3a49 6554 7473 6553     igure:SPI:TestSe
   8d21c:	646e 0000 4f43 464e 6769 7275 3a65 5053     nd..CONFigure:SP
   8d22c:	3a49 6554 7473 6552 6563 7669 3f65 0000     I:TestReceive?..
   8d23c:	4f43 464e 6769 7275 3a65 4843 6e41 656e     CONFigure:CHAnne
   8d24c:	3a6c 3a41 464f 7346 7465 563a 4c41 6575     l:A:OFFset:VALue
   8d25c:	0000 0000 4f43 464e 6769 7275 3a65 4843     ....CONFigure:CH
   8d26c:	6e41 656e 3a6c 3a42 464f 7346 7465 563a     Annel:B:OFFset:V
   8d27c:	4c41 6575 0000 0000 4f43 464e 6769 7275     ALue....CONFigur
   8d28c:	3a65 4843 6e41 656e 3a6c 3a41 464f 7346     e:CHAnnel:A:OFFs
   8d29c:	7465 563a 4c41 6575 003f 0000 4f43 464e     et:VALue?...CONF
   8d2ac:	6769 7275 3a65 4843 6e41 656e 3a6c 3a42     igure:CHAnnel:B:
   8d2bc:	464f 7346 7465 563a 4c41 6575 003f 0000     OFFset:VALue?...
   8d2cc:	4f43 464e 6769 7275 3a65 4843 6e41 656e     CONFigure:CHAnne
   8d2dc:	3a6c 3a41 4854 6552 6873 6c6f 0064 0000     l:A:THReshold...
   8d2ec:	4f43 464e 6769 7275 3a65 4843 6e41 656e     CONFigure:CHAnne
   8d2fc:	3a6c 3a42 4854 6552 6873 6c6f 0064 0000     l:B:THReshold...
   8d30c:	4f43 464e 6769 7275 3a65 4843 6e41 656e     CONFigure:CHAnne
   8d31c:	3a6c 3a41 4854 6552 6873 6c6f 3f64 0000     l:A:THReshold?..
   8d32c:	4f43 464e 6769 7275 3a65 4843 6e41 656e     CONFigure:CHAnne
   8d33c:	3a6c 3a42 4854 6552 6873 6c6f 3f64 0000     l:B:THReshold?..
   8d34c:	4f43 464e 6769 7275 3a65 4843 6e41 656e     CONFigure:CHAnne
   8d35c:	3a6c 3a41 464f 7346 7465 453a 614e 6c62     l:A:OFFset:ENabl
   8d36c:	0065 0000 4f43 464e 6769 7275 3a65 4843     e...CONFigure:CH
   8d37c:	6e41 656e 3a6c 3a42 464f 7346 7465 453a     Annel:B:OFFset:E
   8d38c:	614e 6c62 0065 0000 4f43 464e 6769 7275     Nable...CONFigur
   8d39c:	3a65 4843 6e41 656e 3a6c 3a41 464f 7346     e:CHAnnel:A:OFFs
   8d3ac:	7465 453a 614e 6c62 3f65 0000 4f43 464e     et:ENable?..CONF
   8d3bc:	6769 7275 3a65 4843 6e41 656e 3a6c 3a42     igure:CHAnnel:B:
   8d3cc:	464f 7346 7465 453a 614e 6c62 3f65 0000     OFFset:ENable?..
   8d3dc:	4f43 464e 6769 7275 3a65 4843 6e41 656e     CONFigure:CHAnne
   8d3ec:	3a6c 3a41 4f43 7055 696c 676e 0000 0000     l:A:COUpling....
   8d3fc:	4f43 464e 6769 7275 3a65 4843 6e41 656e     CONFigure:CHAnne
   8d40c:	3a6c 3a42 4f43 7055 696c 676e 0000 0000     l:B:COUpling....
   8d41c:	4f43 464e 6769 7275 3a65 4843 6e41 656e     CONFigure:CHAnne
   8d42c:	3a6c 3a41 4f43 7055 696c 676e 003f 0000     l:A:COUpling?...
   8d43c:	4f43 464e 6769 7275 3a65 4843 6e41 656e     CONFigure:CHAnne
   8d44c:	3a6c 3a42 4f43 7055 696c 676e 003f 0000     l:B:COUpling?...
   8d45c:	4f43 464e 6769 7275 3a65 4f43 6e55 6574     CONFigure:COUnte
   8d46c:	3a72 4553 4954 746e 6765 6172 6974 6e6f     r:SETIntegration
   8d47c:	6954 656d 0000 0000 4f43 464e 6769 7275     Time....CONFigur
   8d48c:	3a65 4f43 6e55 6574 3a72 3a41 6552 6461     e:COUnter:A:Read
   8d49c:	003f 0000 4f43 464e 6769 7275 3a65 4f43     ?...CONFigure:CO
   8d4ac:	6e55 6574 3a72 3a42 6552 6461 003f 0000     Unter:B:Read?...
   8d4bc:	4f43 464e 6769 7275 3a65 4f43 6e55 6574     CONFigure:COUnte
   8d4cc:	3a72 3a41 4e49 6554 7267 7461 6f69 746e     r:A:INTegrationt
   8d4dc:	6d69 3f65 0000 0000 4f43 464e 6769 7275     ime?....CONFigur
   8d4ec:	3a65 4f43 6e55 6574 3a72 3a41 4e49 6554     e:COUnter:A:INTe
   8d4fc:	7267 7461 6f69 746e 6d69 0065 4f43 464e     grationtime.CONF
   8d50c:	6769 7275 3a65 4f43 6e55 6574 3a72 3a42     igure:COUnter:B:
   8d51c:	4e49 6554 7267 7461 6f69 746e 6d69 3f65     INTegrationtime?
   8d52c:	0000 0000 4f43 464e 6769 7275 3a65 4f43     ....CONFigure:CO
   8d53c:	6e55 6574 3a72 3a42 4e49 6554 7267 7461     Unter:B:INTegrat
   8d54c:	6f69 746e 6d69 0065 5453 5441 7375 513a     iontime.STATus:Q
   8d55c:	4555 7453 6f69 616e 6c62 3f65 0000 0000     UEStionable?....
   8d56c:	5453 5441 7375 513a 4555 7453 6f69 616e     STATus:QUEStiona
   8d57c:	6c62 3a65 5645 4e45 3f74 0000 5453 5441     ble:EVENt?..STAT
   8d58c:	7375 513a 4555 7453 6f69 616e 6c62 3a65     us:QUEStionable:
   8d59c:	4e45 4241 656c 0000 5453 5441 7375 513a     ENABle..STATus:Q
   8d5ac:	4555 7453 6f69 616e 6c62 3a65 4e45 4241     UEStionable:ENAB
   8d5bc:	656c 003f 5453 5441 7375 503a 4552 6553     le?.STATus:PRESe
   8d5cc:	0074 0000 454d 5341 7275 3a65 4f56 544c     t...MEASure:VOLT
   8d5dc:	6761 3a65 4344 003f 4f43 464e 6769 7275     age:DC?.CONFigur
   8d5ec:	3a65 4f56 544c 6761 3a65 4344 0000 0000     e:VOLTage:DC....
   8d5fc:	454d 5341 7275 3a65 4f56 544c 6761 3a65     MEASure:VOLTage:
   8d60c:	4344 523a 5441 6f69 003f 0000 454d 5341     DC:RATio?...MEAS
   8d61c:	7275 3a65 4f56 544c 6761 3a65 4341 003f     ure:VOLTage:AC?.
   8d62c:	454d 5341 7275 3a65 5543 5252 6e65 3a74     MEASure:CURRent:
   8d63c:	4344 003f 454d 5341 7275 3a65 5543 5252     DC?.MEASure:CURR
   8d64c:	6e65 3a74 4341 003f 454d 5341 7275 3a65     ent:AC?.MEASure:
   8d65c:	4552 6953 7473 6e61 6563 003f 454d 5341     RESistance?.MEAS
   8d66c:	7275 3a65 5246 5345 7369 6174 636e 3f65     ure:FRESistance?
   8d67c:	0000 0000 454d 5341 7275 3a65 5246 5145     ....MEASure:FREQ
   8d68c:	6575 636e 3f79 0000 454d 5341 7275 3a65     uency?..MEASure:
   8d69c:	4550 6952 646f 003f                         PERiod?.

0008d6a4 <scpi_commands>:
   8d6a4:	d048 0008 280d 0008 d050 0008 284d 0008     H....(..P...M(..
   8d6b4:	d058 0008 2881 0008 d060 0008 28a9 0008     X....(..`....(..
   8d6c4:	d068 0008 28e5 0008 d070 0008 2919 0008     h....(..p....)..
   8d6d4:	d078 0008 2935 0008 d080 0008 294d 0008     x...5)......M)..
   8d6e4:	d088 0008 2971 0008 d090 0008 29a5 0008     ....q).......)..
   8d6f4:	d098 0008 29cd 0008 d0a0 0008 29f5 0008     .....).......)..
   8d704:	d0a8 0008 2a2d 0008 d0b0 0008 2a6d 0008     ....-*......m*..
   8d714:	d0c0 0008 2a6d 0008 d0d4 0008 2aad 0008     ....m*.......*..
   8d724:	d0e8 0008 2a51 0008 d0f8 0008 3639 0008     ....Q*......96..
   8d734:	d108 0008 368d 0008 d118 0008 36e1 0008     .....6.......6..
   8d744:	d128 0008 3735 0008 d134 0008 3761 0008     (...57..4...a7..
   8d754:	d144 0008 3791 0008 d158 0008 37bd 0008     D....7..X....7..
   8d764:	d16c 0008 37e9 0008 d184 0008 3811 0008     l....7.......8..
   8d774:	d198 0008 3839 0008 d1b0 0008 3955 0008     ....98......U9..
   8d784:	d1c0 0008 3ab1 0008 d1d4 0008 38a9 0008     .....:.......8..
   8d794:	d1e4 0008 38a1 0008 d1f8 0008 3899 0008     .....8.......8..
   8d7a4:	d208 0008 3a19 0008 d220 0008 3a6d 0008     .....:.. ...m:..
   8d7b4:	d23c 0008 3b01 0008 d260 0008 3b81 0008     <....;..`....;..
   8d7c4:	d284 0008 4119 0008 d2a8 0008 41a9 0008     .....A.......A..
   8d7d4:	d2cc 0008 3c01 0008 d2ec 0008 3c89 0008     .....<.......<..
   8d7e4:	d30c 0008 3ec9 0008 d32c 0008 3f59 0008     .....>..,...Y?..
   8d7f4:	d34c 0008 3d11 0008 d370 0008 3d5d 0008     L....=..p...]=..
   8d804:	d394 0008 4099 0008 d3b8 0008 40d9 0008     .....@.......@..
   8d814:	d3dc 0008 3da9 0008 d3fc 0008 3e39 0008     .....=......9>..
   8d824:	d41c 0008 3fe9 0008 d43c 0008 4041 0008     .....?..<...A@..
   8d834:	d45c 0008 4239 0008 d484 0008 428d 0008     \...9B.......B..
   8d844:	d4a0 0008 4305 0008 d4bc 0008 4425 0008     .....C......%D..
   8d854:	d4e4 0008 437d 0008 d508 0008 4465 0008     ....}C......eD..
   8d864:	d530 0008 43d1 0008 d554 0008 2ad1 0008     0....C..T....*..
   8d874:	d56c 0008 2ad1 0008 d588 0008 2b35 0008     l....*......5+..
   8d884:	d5a4 0008 2b0d 0008 d5c0 0008 2b69 0008     .....+......i+..
   8d894:	d5d0 0008 2a35 0008 d5e4 0008 2a35 0008     ....5*......5*..
   8d8a4:	d5fc 0008 2a35 0008 d618 0008 2a35 0008     ....5*......5*..
   8d8b4:	d62c 0008 2a35 0008 d640 0008 2a35 0008     ,...5*..@...5*..
   8d8c4:	d654 0008 2a35 0008 d668 0008 2a35 0008     T...5*..h...5*..
   8d8d4:	d680 0008 2a35 0008 d694 0008 2a35 0008     ....5*......5*..
	...
   8d8ec:	6f4e 6520 7272 726f 0000 0000 7953 746e     No error....Synt
   8d8fc:	7861 6520 7272 726f 0000 0000 6e49 6176     ax error....Inva
   8d90c:	696c 2064 6573 6170 6172 6f74 0072 0000     lid separator...
   8d91c:	6e55 6564 6966 656e 2064 6568 6461 7265     Undefined header
   8d92c:	0000 0000 6150 6172 656d 6574 2072 6f6e     ....Parameter no
   8d93c:	2074 6c61 6f6c 6577 0064 0000 694d 7373     t allowed...Miss
   8d94c:	6e69 2067 6170 6172 656d 6574 0072 0000     ing parameter...
   8d95c:	6e49 6176 696c 2064 7573 6666 7869 0000     Invalid suffix..
   8d96c:	7553 6666 7869 6e20 746f 6120 6c6c 776f     Suffix not allow
   8d97c:	6465 0000 6e55 6e6b 776f 206e 7265 6f72     ed..Unknown erro
   8d98c:	0072 0000 5443 2055 4546 0045 4554 5453     r...CTU FEE.TEST
   8d99c:	5320 5043 2049 4e49 5453 5552 454d 544e      SCPI INSTRUMENT
   8d9ac:	5420 4953 3233 3532 0000 0000 3176 302e      TSI3225....v1.0
   8d9bc:	0000 0000 202c 0000 0d3b 000a 203b 0a0d     ...., ..;...; ..
   8d9cc:	0009 0000 0020 0000 494d 694e 756d 006d     .... ...MINimum.
   8d9dc:	414d 6958 756d 006d 4544 6146 6c75 0074     MAXimum.DEFault.
   8d9ec:	5055 0000 4f44 4e57 0000 0000 414e 004e     UP..DOWN....NAN.
   8d9fc:	4e49 0046 494e 464e 0000 0000 5655 0000     INF.NINF....UV..
   8da0c:	564d 0000 0056 0000 564b 0000 4155 0000     MV..V...KV..UA..
   8da1c:	414d 0000 0041 0000 414b 0000 484f 004d     MA..A...KA..OHM.
   8da2c:	4f4b 4d48 0000 0000 4f4d 4d48 0000 0000     KOHM....MOHM....
   8da3c:	5a48 0000 484b 005a 484d 005a 4847 005a     HZ..KHZ.MHZ.GHZ.
   8da4c:	4543 004c 5350 0000 534e 0000 5355 0000     CEL.PS..NS..US..
   8da5c:	534d 0000 0053 0000 494d 004e 5248 0000     MS..S...MIN.HR..
   8da6c:	0000 0000                                   ....

0008da70 <scpi_units_def>:
   8da70:	da08 0008 0001 0000 ed8d a0b5 c6f7 3eb0     ...............>
   8da80:	da0c 0008 0001 0000 a9fc d2f1 624d 3f50     ............MbP?
   8da90:	da10 0008 0001 0000 0000 0000 0000 3ff0     ...............?
   8daa0:	da14 0008 0001 0000 0000 0000 4000 408f     .............@.@
   8dab0:	da18 0008 0002 0000 ed8d a0b5 c6f7 3eb0     ...............>
   8dac0:	da1c 0008 0002 0000 a9fc d2f1 624d 3f50     ............MbP?
   8dad0:	da20 0008 0002 0000 0000 0000 0000 3ff0      ..............?
   8dae0:	da24 0008 0002 0000 0000 0000 4000 408f     $............@.@
   8daf0:	da28 0008 0003 0000 0000 0000 0000 3ff0     (..............?
   8db00:	da2c 0008 0003 0000 0000 0000 4000 408f     ,............@.@
   8db10:	da34 0008 0003 0000 0000 0000 8480 412e     4..............A
   8db20:	da3c 0008 0004 0000 0000 0000 0000 3ff0     <..............?
   8db30:	da40 0008 0004 0000 0000 0000 4000 408f     @............@.@
   8db40:	da44 0008 0004 0000 0000 0000 8480 412e     D..............A
   8db50:	da48 0008 0004 0000 0000 0000 cd65 41cd     H...........e..A
   8db60:	da4c 0008 0005 0000 0000 0000 0000 3ff0     L..............?
   8db70:	da50 0008 0006 0000 ea11 812d 9799 3d71     P.........-...q=
   8db80:	da54 0008 0006 0000 d695 e826 2e0b 3e11     T.........&....>
   8db90:	da58 0008 0006 0000 ed8d a0b5 c6f7 3eb0     X..............>
   8dba0:	da5c 0008 0006 0000 a9fc d2f1 624d 3f50     \...........MbP?
   8dbb0:	da60 0008 0006 0000 0000 0000 0000 3ff0     `..............?
   8dbc0:	da64 0008 0006 0000 0000 0000 0000 404e     d.............N@
   8dbd0:	da68 0008 0006 0000 0000 0000 2000 40ac     h............ .@
	...

0008dbf0 <scpi_special_numbers_def>:
   8dbf0:	d9d4 0008 0001 0000 d9dc 0008 0002 0000     ................
   8dc00:	d9e4 0008 0003 0000 d9ec 0008 0004 0000     ................
   8dc10:	d9f0 0008 0005 0000 d9f8 0008 0006 0000     ................
   8dc20:	d9fc 0008 0007 0000 da00 0008 0008 0000     ................
	...
   8dc38:	6c25 0067 3a3f 5d5b 0000 0000 3f3a 0000     %lg.?:[]....:?..
   8dc48:	6f4c 2077 6f63 7473 6420 6175 206c 6964     Low cost dual di
   8dc58:	6373 6972 696d 616e 6f74 7372 2820 3176     scriminators (v1
   8dc68:	0d29 0000 7830 3030 3030 000d 3438 6d30     )...0x0000..840m
   8dc78:	0d57 0000 6d30 0d41 0000 0000 4b4f 000d     W...0mA.....OK..
   8dc88:	7570 6873 6465 000d 6572 656c 7361 6465     pushed..released
   8dc98:	000d 0000 4e4f 0000 464f 0046 7525 000d     ....ON..OFF.%u..
   8dca8:	4341 0000 4344 0000 6925 000d 4341 000d     AC..DC..%i..AC..
   8dcb8:	4344 000d 6c25 756c 000d 0000 6f4e 6e20     DC..%llu....No n
   8dcc8:	7765 7620 6c61 000d 2e25 732a 0000 0000     ew val..%.*s....
   8dcd8:	2a2a 5245 4f52 3a52 2520 2c64 2220 7325     **ERROR: %d, "%s
   8dce8:	0d22 000a 2a2a 5253 3a51 3020 2578 2058     "...**SRQ: 0x%X 
   8dcf8:	2528 2964 0a0d 0000 2a2a 5443 4c52 2520     (%d)....**CTRL %
   8dd08:	3230 3a78 3020 2578 2058 2528 2964 0a0d     02x: 0x%X (%d)..
   8dd18:	0000 0000 2a2a 6554 7473 0a0d 0000 0000     ....**Test......
   8dd28:	2a2a 6552 6573 0d74 000a 0000 5322 2f44     **Reset....."SD/
   8dd38:	4d4d 2043 6143 6472 6f20 6576 2072 434d     MMC Card over MC
   8dd48:	2049 6c53 746f 3020 0022 0000 3231 3133     I Slot 0"...1231
   8dd58:	3332 3231 3133 3332 0000 0000 0000 0000     23123123........
   8dd68:	0000 0000 aa00 aaaa aaaa aaaa eeaa eeee     ................
   8dd78:	eeee eeee feee ffff ffff ffff ffff ffff     ................
   8dd88:	7fff dfbf f7ef fdfb 7efc dfbf f7ef fdfb     .........~......
   8dd98:	007e 0000                                   ~...

0008dd9c <_ctype_>:
   8dd9c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   8ddac:	2020 2020 2020 2020 2020 2020 2020 2020                     
   8ddbc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   8ddcc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   8dddc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   8ddec:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   8ddfc:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   8de0c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   8de1c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0008dea0 <_global_impure_ptr>:
   8dea0:	02a8 2007 0043                              ... C.

0008dea6 <blanks.6650>:
   8dea6:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008deb6 <zeroes.6651>:
   8deb6:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   8dec6:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   8ded6:	3000 3231 3433 3635 3837 6139 6362 6564     .0123456789abcde
   8dee6:	0066                                        f.

0008dee8 <blanks.6664>:
   8dee8:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008def8 <zeroes.6665>:
   8def8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0008df08 <_init>:
   8df08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8df0a:	bf00      	nop
   8df0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8df0e:	bc08      	pop	{r3}
   8df10:	469e      	mov	lr, r3
   8df12:	4770      	bx	lr

0008df14 <__init_array_start>:
   8df14:	0008b76d 	.word	0x0008b76d

0008df18 <__frame_dummy_init_array_entry>:
   8df18:	0008016d                                m...

0008df1c <_fini>:
   8df1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8df1e:	bf00      	nop
   8df20:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8df22:	bc08      	pop	{r3}
   8df24:	469e      	mov	lr, r3
   8df26:	4770      	bx	lr

0008df28 <__fini_array_start>:
   8df28:	00080145 	.word	0x00080145

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <sd_mmc_cards>:
	...
20070014:	0067 0000 0000 0000 0000 0000 0000 0000     g...............
	...

20070030 <scpi_context>:
20070030:	d6a4 0008 0100 0000 0000 0000 0b38 2007     ............8.. 
	...
2007004c:	0070 2007 0000 0000 0000 0000 0000 0000     p.. ............
2007005c:	0000 0000 0b28 2007 da70 0008 dbf0 0008     ....(.. p.......
2007006c:	0000 0000                                   ....

20070070 <scpi_interface>:
20070070:	4ed9 0008 4e95 0008 4f59 0008 4ed1 0008     .N...N..YO...N..
20070080:	5001 0008 4fd1 0008                         .P...O..

20070088 <udi_msc_name.9463>:
20070088:	534d 2043 6e69 6574 6672 6361 0065 0000     MSC interface...

20070098 <extra_strings_desc.9467>:
20070098:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

200700b4 <udi_cdc_name.9462>:
200700b4:	4443 2043 6e69 6574 6672 6361 0065 0000     CDC interface...

200700c4 <udi_api_cdc_data>:
200700c4:	5a11 0008 5771 0008 5441 0008 5449 0008     .Z..qW..AT..IT..
200700d4:	562d 0008                                   -V..

200700d8 <udi_api_cdc_comm>:
200700d8:	57a1 0008 542d 0008 5685 0008 5449 0008     .W..-T...V..IT..
200700e8:	0000 0000                                   ....

200700ec <udc_config_hs>:
200700ec:	00fc 2007 0180 2007                         ... ... 

200700f4 <udc_config_lsfs>:
200700f4:	01a0 2007 0180 2007                         ... ... 

200700fc <udc_desc_hs>:
200700fc:	0209 0062 0103 c000 0832 000b 0202 0102     ..b.....2.......
2007010c:	0900 0004 0100 0202 0001 2405 1000 0401     ...........$....
2007011c:	0224 0502 0624 0100 2405 0301 0701 8305     $...$....$......
2007012c:	4003 1000 0409 0001 0a02 0000 0700 8405     .@..............
2007013c:	0002 0002 0507 0205 0200 0900 0204 0200     ................
2007014c:	0608 0550 0507 0281 0200 0700 0205 0002     ..P.............
2007015c:	0002 0000                                   ....

20070160 <udc_config>:
20070160:	018c 2007 00f4 2007 018c 2007 0174 2007     ... ... ... t.. 
20070170:	00ec 2007                                   ... 

20070174 <udc_device_qual>:
20070174:	060a 0200 0000 4000 0001 0000               .......@....

20070180 <udi_apis>:
20070180:	00d8 2007 00c4 2007 0208 2007               ... ... ... 

2007018c <udc_device_desc>:
2007018c:	0112 0200 0000 4000 03eb 2424 0100 0201     .......@..$$....
2007019c:	0103 0000                                   ....

200701a0 <udc_desc_fs>:
200701a0:	0209 0062 0103 c000 0832 000b 0202 0102     ..b.....2.......
200701b0:	0900 0004 0100 0202 0001 2405 1000 0401     ...........$....
200701c0:	0224 0502 0624 0100 2405 0301 0701 8305     $...$....$......
200701d0:	4003 1000 0409 0001 0a02 0000 0700 8405     .@..............
200701e0:	4002 0000 0507 0205 0040 0900 0204 0200     .@......@.......
200701f0:	0608 0550 0507 0281 0040 0700 0205 4002     ..P.....@......@
20070200:	0000 0000                                   ....

20070204 <udi_msc_b_ack_trans>:
20070204:	0001 0000                                   ....

20070208 <udi_api_msc>:
20070208:	68ad 0008 6891 0008 6799 0008 5d25 0008     .h...h...g..%]..
20070218:	0000 0000                                   ....

2007021c <udi_msc_inquiry_data.9942>:
2007021c:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
2007023c:	2e31 3030                                   1.00

20070240 <udi_msc_csw>:
20070240:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

20070250 <udc_string_product_name>:
20070250:	6554 706d 616c 6574 4220 616f 6472 0000     Template Board..

20070260 <udc_string_manufacturer_name>:
20070260:	6145 7973 702d 6968 0000 0000               Easy-phi....

2007026c <udc_string_desc>:
2007026c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

2007028c <udc_string_desc_languageid>:
2007028c:	0304 0409                                   ....

20070290 <g_interrupt_enabled>:
20070290:	0001 0000                                   ....

20070294 <SystemCoreClock>:
20070294:	0900 003d                                   ..=.

20070298 <ch0_integration_time_goal>:
20070298:	0001                                        ..

2007029a <ch1_integration_time_goal>:
2007029a:	0001                                        ..

2007029c <__ctype_ptr__>:
2007029c:	dd9c 0008                                   ....

200702a0 <_impure_ptr>:
200702a0:	02a8 2007 0000 0000                         ... ....

200702a8 <impure_data>:
200702a8:	0000 0000 0594 2007 05fc 2007 0664 2007     ....... ... d.. 
	...
200702dc:	dea4 0008 0000 0000 0000 0000 0000 0000     ................
	...
20070350:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20070360:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200706d0 <__malloc_av_>:
	...
200706d8:	06d0 2007 06d0 2007 06d8 2007 06d8 2007     ... ... ... ... 
200706e8:	06e0 2007 06e0 2007 06e8 2007 06e8 2007     ... ... ... ... 
200706f8:	06f0 2007 06f0 2007 06f8 2007 06f8 2007     ... ... ... ... 
20070708:	0700 2007 0700 2007 0708 2007 0708 2007     ... ... ... ... 
20070718:	0710 2007 0710 2007 0718 2007 0718 2007     ... ... ... ... 
20070728:	0720 2007 0720 2007 0728 2007 0728 2007      ..  .. (.. (.. 
20070738:	0730 2007 0730 2007 0738 2007 0738 2007     0.. 0.. 8.. 8.. 
20070748:	0740 2007 0740 2007 0748 2007 0748 2007     @.. @.. H.. H.. 
20070758:	0750 2007 0750 2007 0758 2007 0758 2007     P.. P.. X.. X.. 
20070768:	0760 2007 0760 2007 0768 2007 0768 2007     `.. `.. h.. h.. 
20070778:	0770 2007 0770 2007 0778 2007 0778 2007     p.. p.. x.. x.. 
20070788:	0780 2007 0780 2007 0788 2007 0788 2007     ... ... ... ... 
20070798:	0790 2007 0790 2007 0798 2007 0798 2007     ... ... ... ... 
200707a8:	07a0 2007 07a0 2007 07a8 2007 07a8 2007     ... ... ... ... 
200707b8:	07b0 2007 07b0 2007 07b8 2007 07b8 2007     ... ... ... ... 
200707c8:	07c0 2007 07c0 2007 07c8 2007 07c8 2007     ... ... ... ... 
200707d8:	07d0 2007 07d0 2007 07d8 2007 07d8 2007     ... ... ... ... 
200707e8:	07e0 2007 07e0 2007 07e8 2007 07e8 2007     ... ... ... ... 
200707f8:	07f0 2007 07f0 2007 07f8 2007 07f8 2007     ... ... ... ... 
20070808:	0800 2007 0800 2007 0808 2007 0808 2007     ... ... ... ... 
20070818:	0810 2007 0810 2007 0818 2007 0818 2007     ... ... ... ... 
20070828:	0820 2007 0820 2007 0828 2007 0828 2007      ..  .. (.. (.. 
20070838:	0830 2007 0830 2007 0838 2007 0838 2007     0.. 0.. 8.. 8.. 
20070848:	0840 2007 0840 2007 0848 2007 0848 2007     @.. @.. H.. H.. 
20070858:	0850 2007 0850 2007 0858 2007 0858 2007     P.. P.. X.. X.. 
20070868:	0860 2007 0860 2007 0868 2007 0868 2007     `.. `.. h.. h.. 
20070878:	0870 2007 0870 2007 0878 2007 0878 2007     p.. p.. x.. x.. 
20070888:	0880 2007 0880 2007 0888 2007 0888 2007     ... ... ... ... 
20070898:	0890 2007 0890 2007 0898 2007 0898 2007     ... ... ... ... 
200708a8:	08a0 2007 08a0 2007 08a8 2007 08a8 2007     ... ... ... ... 
200708b8:	08b0 2007 08b0 2007 08b8 2007 08b8 2007     ... ... ... ... 
200708c8:	08c0 2007 08c0 2007 08c8 2007 08c8 2007     ... ... ... ... 
200708d8:	08d0 2007 08d0 2007 08d8 2007 08d8 2007     ... ... ... ... 
200708e8:	08e0 2007 08e0 2007 08e8 2007 08e8 2007     ... ... ... ... 
200708f8:	08f0 2007 08f0 2007 08f8 2007 08f8 2007     ... ... ... ... 
20070908:	0900 2007 0900 2007 0908 2007 0908 2007     ... ... ... ... 
20070918:	0910 2007 0910 2007 0918 2007 0918 2007     ... ... ... ... 
20070928:	0920 2007 0920 2007 0928 2007 0928 2007      ..  .. (.. (.. 
20070938:	0930 2007 0930 2007 0938 2007 0938 2007     0.. 0.. 8.. 8.. 
20070948:	0940 2007 0940 2007 0948 2007 0948 2007     @.. @.. H.. H.. 
20070958:	0950 2007 0950 2007 0958 2007 0958 2007     P.. P.. X.. X.. 
20070968:	0960 2007 0960 2007 0968 2007 0968 2007     `.. `.. h.. h.. 
20070978:	0970 2007 0970 2007 0978 2007 0978 2007     p.. p.. x.. x.. 
20070988:	0980 2007 0980 2007 0988 2007 0988 2007     ... ... ... ... 
20070998:	0990 2007 0990 2007 0998 2007 0998 2007     ... ... ... ... 
200709a8:	09a0 2007 09a0 2007 09a8 2007 09a8 2007     ... ... ... ... 
200709b8:	09b0 2007 09b0 2007 09b8 2007 09b8 2007     ... ... ... ... 
200709c8:	09c0 2007 09c0 2007 09c8 2007 09c8 2007     ... ... ... ... 
200709d8:	09d0 2007 09d0 2007 09d8 2007 09d8 2007     ... ... ... ... 
200709e8:	09e0 2007 09e0 2007 09e8 2007 09e8 2007     ... ... ... ... 
200709f8:	09f0 2007 09f0 2007 09f8 2007 09f8 2007     ... ... ... ... 
20070a08:	0a00 2007 0a00 2007 0a08 2007 0a08 2007     ... ... ... ... 
20070a18:	0a10 2007 0a10 2007 0a18 2007 0a18 2007     ... ... ... ... 
20070a28:	0a20 2007 0a20 2007 0a28 2007 0a28 2007      ..  .. (.. (.. 
20070a38:	0a30 2007 0a30 2007 0a38 2007 0a38 2007     0.. 0.. 8.. 8.. 
20070a48:	0a40 2007 0a40 2007 0a48 2007 0a48 2007     @.. @.. H.. H.. 
20070a58:	0a50 2007 0a50 2007 0a58 2007 0a58 2007     P.. P.. X.. X.. 
20070a68:	0a60 2007 0a60 2007 0a68 2007 0a68 2007     `.. `.. h.. h.. 
20070a78:	0a70 2007 0a70 2007 0a78 2007 0a78 2007     p.. p.. x.. x.. 
20070a88:	0a80 2007 0a80 2007 0a88 2007 0a88 2007     ... ... ... ... 
20070a98:	0a90 2007 0a90 2007 0a98 2007 0a98 2007     ... ... ... ... 
20070aa8:	0aa0 2007 0aa0 2007 0aa8 2007 0aa8 2007     ... ... ... ... 
20070ab8:	0ab0 2007 0ab0 2007 0ab8 2007 0ab8 2007     ... ... ... ... 
20070ac8:	0ac0 2007 0ac0 2007 0ac8 2007 0ac8 2007     ... ... ... ... 

20070ad8 <__malloc_sbrk_base>:
20070ad8:	ffff ffff                                   ....

20070adc <__malloc_trim_threshold>:
20070adc:	0000 0002                                   ....
