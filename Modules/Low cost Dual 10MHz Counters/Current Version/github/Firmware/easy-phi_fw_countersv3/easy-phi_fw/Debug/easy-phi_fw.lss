
easy-phi_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e01c  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008e01c  0008e01c  0001601c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000af0  20070000  0008e024  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000134c  20070af0  0008eb18  00018af0  2**3
                  ALLOC
  4 .stack        00002004  20071e3c  0008fe64  00018af0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00018af0  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00018b19  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002f866  00000000  00000000  00018b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008550  00000000  00000000  000483f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00018d56  00000000  00000000  00050940  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001d98  00000000  00000000  00069698  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002190  00000000  00000000  0006b430  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002503a  00000000  00000000  0006d5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00030729  00000000  00000000  000925fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007b310  00000000  00000000  000c2d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004228  00000000  00000000  0013e034  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20073e40 	.word	0x20073e40
   80004:	00089ead 	.word	0x00089ead
   80008:	00089ea9 	.word	0x00089ea9
   8000c:	000855bd 	.word	0x000855bd
   80010:	00089ea9 	.word	0x00089ea9
   80014:	00089ea9 	.word	0x00089ea9
   80018:	00089ea9 	.word	0x00089ea9
	...
   8002c:	00089ea9 	.word	0x00089ea9
   80030:	00089ea9 	.word	0x00089ea9
   80034:	00000000 	.word	0x00000000
   80038:	00089ea9 	.word	0x00089ea9
   8003c:	00089ea9 	.word	0x00089ea9
   80040:	00089ea9 	.word	0x00089ea9
   80044:	00089ea9 	.word	0x00089ea9
   80048:	00081f11 	.word	0x00081f11
   8004c:	00089ea9 	.word	0x00089ea9
   80050:	00089ea9 	.word	0x00089ea9
   80054:	00089ea9 	.word	0x00089ea9
   80058:	00089ea9 	.word	0x00089ea9
   8005c:	00089ea9 	.word	0x00089ea9
   80060:	00089ea9 	.word	0x00089ea9
   80064:	00089ea9 	.word	0x00089ea9
   80068:	00000000 	.word	0x00000000
   8006c:	00087c59 	.word	0x00087c59
   80070:	00087c75 	.word	0x00087c75
   80074:	00087c91 	.word	0x00087c91
   80078:	00087cad 	.word	0x00087cad
	...
   80084:	00089ea9 	.word	0x00089ea9
   80088:	00089ea9 	.word	0x00089ea9
   8008c:	00089ea9 	.word	0x00089ea9
   80090:	00089ea9 	.word	0x00089ea9
   80094:	00089ea9 	.word	0x00089ea9
   80098:	00089ea9 	.word	0x00089ea9
   8009c:	00089ea9 	.word	0x00089ea9
   800a0:	00089ea9 	.word	0x00089ea9
   800a4:	00000000 	.word	0x00000000
   800a8:	00089ea9 	.word	0x00089ea9
   800ac:	00081f71 	.word	0x00081f71
   800b0:	000820a5 	.word	0x000820a5
   800b4:	00082115 	.word	0x00082115
   800b8:	00089ea9 	.word	0x00089ea9
   800bc:	00089ea9 	.word	0x00089ea9
   800c0:	000820dd 	.word	0x000820dd
   800c4:	00089ea9 	.word	0x00089ea9
   800c8:	00089ea9 	.word	0x00089ea9
   800cc:	00089ea9 	.word	0x00089ea9
   800d0:	00089ea9 	.word	0x00089ea9
   800d4:	00089ea9 	.word	0x00089ea9
   800d8:	00089ea9 	.word	0x00089ea9
   800dc:	00089ea9 	.word	0x00089ea9
   800e0:	000887d5 	.word	0x000887d5
   800e4:	00089ea9 	.word	0x00089ea9
   800e8:	00089ea9 	.word	0x00089ea9
   800ec:	00089ea9 	.word	0x00089ea9
   800f0:	00089ea9 	.word	0x00089ea9

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	0008e024 	.word	0x0008e024
   80110:	0008e027 	.word	0x0008e027
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	0008e024 	.word	0x0008e024
   8013c:	0008e024 	.word	0x0008e024
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070af0 	.word	0x20070af0
   80164:	00000000 	.word	0x00000000
   80168:	0008e024 	.word	0x0008e024

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	0008e024 	.word	0x0008e024
   80198:	20070af4 	.word	0x20070af4
   8019c:	0008e024 	.word	0x0008e024
   801a0:	00000000 	.word	0x00000000

000801a4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   801a4:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   801a6:	f640 3310 	movw	r3, #2832	; 0xb10
   801aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   801ae:	681a      	ldr	r2, [r3, #0]
   801b0:	f892 4022 	ldrb.w	r4, [r2, #34]	; 0x22
   801b4:	f640 3116 	movw	r1, #2838	; 0xb16
   801b8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   801bc:	7808      	ldrb	r0, [r1, #0]
   801be:	6811      	ldr	r1, [r2, #0]
   801c0:	7c52      	ldrb	r2, [r2, #17]
   801c2:	1c23      	adds	r3, r4, #0
   801c4:	bf18      	it	ne
   801c6:	2301      	movne	r3, #1
   801c8:	f644 44c5 	movw	r4, #19653	; 0x4cc5
   801cc:	f2c0 0408 	movt	r4, #8
   801d0:	47a0      	blx	r4
   801d2:	bd10      	pop	{r4, pc}

000801d4 <sdio_cmd53>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd53(uint8_t rw_flag, uint8_t func_nb, uint32_t reg_addr,
		uint8_t inc_addr, uint32_t size, bool access_block)
{
   801d4:	b570      	push	{r4, r5, r6, lr}
   801d6:	b082      	sub	sp, #8
   801d8:	9c06      	ldr	r4, [sp, #24]
	Assert(size != 0);
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
   801da:	f249 3635 	movw	r6, #37685	; 0x9335
   801de:	f2c0 0601 	movt	r6, #1
   801e2:	f241 3535 	movw	r5, #4917	; 0x1335
   801e6:	f2c0 0501 	movt	r5, #1
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
   801ea:	ea4f 7101 	mov.w	r1, r1, lsl #28

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
			SDIO_CMD53_IO_R_BYTE_EXTENDED :
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
   801ee:	ea41 2242 	orr.w	r2, r1, r2, lsl #9
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
   801f2:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
			SDIO_CMD53_IO_R_BYTE_EXTENDED :
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
   801f6:	ea4f 51c4 	mov.w	r1, r4, lsl #23
   801fa:	ea4f 51d1 	mov.w	r1, r1, lsr #23
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
   801fe:	4311      	orrs	r1, r2
		uint8_t inc_addr, uint32_t size, bool access_block)
{
	Assert(size != 0);
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
   80200:	f89d 201c 	ldrb.w	r2, [sp, #28]
   80204:	9200      	str	r2, [sp, #0]
   80206:	2800      	cmp	r0, #0
   80208:	bf14      	ite	ne
   8020a:	4630      	movne	r0, r6
   8020c:	4628      	moveq	r0, r5
   8020e:	ea41 6183 	orr.w	r1, r1, r3, lsl #26
   80212:	b2a2      	uxth	r2, r4
   80214:	f04f 0301 	mov.w	r3, #1
   80218:	f644 54f1 	movw	r4, #19953	; 0x4df1
   8021c:	f2c0 0408 	movt	r4, #8
   80220:	47a0      	blx	r4
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
			| ((uint32_t)rw_flag << SDIO_CMD53_RW_FLAG),
			size, 1, access_block);
}
   80222:	b002      	add	sp, #8
   80224:	bd70      	pop	{r4, r5, r6, pc}
   80226:	bf00      	nop

00080228 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   80228:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   8022a:	f640 3316 	movw	r3, #2838	; 0xb16
   8022e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80232:	7818      	ldrb	r0, [r3, #0]
   80234:	b930      	cbnz	r0, 80244 <sd_mmc_deselect_slot+0x1c>
		driver_deselect_device(sd_mmc_slot_sel);
   80236:	f04f 0000 	mov.w	r0, #0
   8023a:	f644 5139 	movw	r1, #19769	; 0x4d39
   8023e:	f2c0 0108 	movt	r1, #8
   80242:	4788      	blx	r1
   80244:	bd08      	pop	{r3, pc}
   80246:	bf00      	nop

00080248 <sdio_cmd52>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
   80248:	b510      	push	{r4, lr}
   8024a:	9c02      	ldr	r4, [sp, #8]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
   8024c:	ea4f 2242 	mov.w	r2, r2, lsl #9
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
   80250:	ea42 7101 	orr.w	r1, r2, r1, lsl #28
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
   80254:	ea41 70c0 	orr.w	r0, r1, r0, lsl #31
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
   80258:	ea40 63c3 	orr.w	r3, r0, r3, lsl #27
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
   8025c:	7822      	ldrb	r2, [r4, #0]
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
   8025e:	f241 3034 	movw	r0, #4916	; 0x1334
   80262:	ea43 0102 	orr.w	r1, r3, r2
   80266:	f644 5361 	movw	r3, #19809	; 0x4d61
   8026a:	f2c0 0308 	movt	r3, #8
   8026e:	4798      	blx	r3
   80270:	b140      	cbz	r0, 80284 <sdio_cmd52+0x3c>
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
		return false;
	}
	*io_data = driver_get_response() & 0xFF;
   80272:	f644 5189 	movw	r1, #19849	; 0x4d89
   80276:	f2c0 0108 	movt	r1, #8
   8027a:	4788      	blx	r1
   8027c:	7020      	strb	r0, [r4, #0]
	return true;
   8027e:	f04f 0001 	mov.w	r0, #1
   80282:	bd10      	pop	{r4, pc}
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
		return false;
   80284:	f04f 0000 	mov.w	r0, #0
	}
	*io_data = driver_get_response() & 0xFF;
	return true;
}
   80288:	bd10      	pop	{r4, pc}
   8028a:	bf00      	nop

0008028c <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
   8028c:	b508      	push	{r3, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
   8028e:	f640 3310 	movw	r3, #2832	; 0xb10
   80292:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80296:	6818      	ldr	r0, [r3, #0]
   80298:	8981      	ldrh	r1, [r0, #12]
   8029a:	f641 3009 	movw	r0, #6921	; 0x1b09
   8029e:	ea4f 4101 	mov.w	r1, r1, lsl #16
   802a2:	f644 5261 	movw	r2, #19809	; 0x4d61
   802a6:	f2c0 0208 	movt	r2, #8
   802aa:	4790      	blx	r2
   802ac:	b170      	cbz	r0, 802cc <sd_mmc_cmd9_mci+0x40>
		return false;
	}
	driver_get_response_128(sd_mmc_card->csd);
   802ae:	f640 3310 	movw	r3, #2832	; 0xb10
   802b2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   802b6:	6818      	ldr	r0, [r3, #0]
   802b8:	f100 0012 	add.w	r0, r0, #18
   802bc:	f644 5191 	movw	r1, #19857	; 0x4d91
   802c0:	f2c0 0108 	movt	r1, #8
   802c4:	4788      	blx	r1
	return true;
   802c6:	f04f 0001 	mov.w	r0, #1
   802ca:	bd08      	pop	{r3, pc}
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   802cc:	f04f 0000 	mov.w	r0, #0
	}
	driver_get_response_128(sd_mmc_card->csd);
	return true;
}
   802d0:	bd08      	pop	{r3, pc}
   802d2:	bf00      	nop

000802d4 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   802d4:	b510      	push	{r4, lr}
	if (slot >= SD_MMC_MEM_CNT) {
   802d6:	2800      	cmp	r0, #0
   802d8:	f040 80a8 	bne.w	8042c <sd_mmc_select_slot+0x158>
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
   802dc:	f240 030c 	movw	r3, #12
   802e0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   802e4:	6898      	ldr	r0, [r3, #8]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   802e6:	ea4f 1250 	mov.w	r2, r0, lsr #5
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   802ea:	f502 1100 	add.w	r1, r2, #2097152	; 0x200000
   802ee:	f201 7307 	addw	r3, r1, #1799	; 0x707
   802f2:	ea4f 2243 	mov.w	r2, r3, lsl #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   802f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   802f8:	f000 001f 	and.w	r0, r0, #31
   802fc:	f04f 0101 	mov.w	r1, #1
   80300:	fa01 f300 	lsl.w	r3, r1, r0
   80304:	4213      	tst	r3, r2
   80306:	d01d      	beq.n	80344 <sd_mmc_select_slot+0x70>
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
   80308:	f240 020c 	movw	r2, #12
   8030c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80310:	7b90      	ldrb	r0, [r2, #14]
   80312:	4288      	cmp	r0, r1
   80314:	d10c      	bne.n	80330 <sd_mmc_select_slot+0x5c>
	return false;
}

static inline void SD_MMC_STOP_TIMEOUT(void)
{
	if (sd_mmc_sam_systick_used) {
   80316:	f640 330e 	movw	r3, #2830	; 0xb0e
   8031a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8031e:	7819      	ldrb	r1, [r3, #0]
   80320:	b131      	cbz	r1, 80330 <sd_mmc_select_slot+0x5c>
		SysTick->CTRL = 0;
   80322:	f24e 0010 	movw	r0, #57360	; 0xe010
   80326:	f2ce 0000 	movt	r0, #57344	; 0xe000
   8032a:	f04f 0200 	mov.w	r2, #0
   8032e:	6002      	str	r2, [r0, #0]
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
			SD_MMC_STOP_TIMEOUT();
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   80330:	f240 030c 	movw	r3, #12
   80334:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80338:	f04f 0104 	mov.w	r1, #4
   8033c:	7399      	strb	r1, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
   8033e:	f04f 0002 	mov.w	r0, #2
   80342:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
   80344:	f240 020c 	movw	r2, #12
   80348:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8034c:	7b90      	ldrb	r0, [r2, #14]
   8034e:	2804      	cmp	r0, #4
   80350:	d131      	bne.n	803b6 <sd_mmc_select_slot+0xe2>
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
   80352:	f240 010c 	movw	r1, #12
   80356:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8035a:	f04f 0201 	mov.w	r2, #1
   8035e:	738a      	strb	r2, [r1, #14]
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
   80360:	f24e 0310 	movw	r3, #57360	; 0xe010
   80364:	f2ce 0300 	movt	r3, #57344	; 0xe000
   80368:	6818      	ldr	r0, [r3, #0]
   8036a:	b988      	cbnz	r0, 80390 <sd_mmc_select_slot+0xbc>
		sd_mmc_sam_systick_used = true;
   8036c:	f640 300e 	movw	r0, #2830	; 0xb0e
   80370:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80374:	7002      	strb	r2, [r0, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
   80376:	f24e 0310 	movw	r3, #57360	; 0xe010
   8037a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8037e:	f243 71a0 	movw	r1, #14240	; 0x37a0
   80382:	f2c0 01a0 	movt	r1, #160	; 0xa0
   80386:	6059      	str	r1, [r3, #4]
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
   80388:	601a      	str	r2, [r3, #0]
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
   8038a:	f04f 0002 	mov.w	r0, #2
   8038e:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = true;
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
	} else {
		sd_mmc_sam_systick_used = false;
   80390:	f640 310e 	movw	r1, #2830	; 0xb0e
   80394:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80398:	f04f 0200 	mov.w	r2, #0
   8039c:	700a      	strb	r2, [r1, #0]
#ifdef FREERTOS_USED
		// Note: the define INCLUDE_vTaskDelay must be set to one
		// in FreeRTOSConfig.h file.
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
   8039e:	f648 5080 	movw	r0, #36224	; 0x8d80
   803a2:	f2c0 005b 	movt	r0, #91	; 0x5b
   803a6:	f240 0301 	movw	r3, #1
   803aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   803ae:	4798      	blx	r3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
   803b0:	f04f 0002 	mov.w	r0, #2
   803b4:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
   803b6:	2801      	cmp	r0, #1
   803b8:	d116      	bne.n	803e8 <sd_mmc_select_slot+0x114>
	}
}

static inline bool SD_MMC_IS_TIMEOUT(void)
{
	if (!sd_mmc_sam_systick_used) {
   803ba:	f640 310e 	movw	r1, #2830	; 0xb0e
   803be:	f2c2 0107 	movt	r1, #8199	; 0x2007
   803c2:	780b      	ldrb	r3, [r1, #0]
   803c4:	2b00      	cmp	r3, #0
   803c6:	d03a      	beq.n	8043e <sd_mmc_select_slot+0x16a>
		return (xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE);
#else
		return true;
#endif
	}
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
   803c8:	f24e 0210 	movw	r2, #57360	; 0xe010
   803cc:	f2ce 0200 	movt	r2, #57344	; 0xe000
   803d0:	6810      	ldr	r0, [r2, #0]
   803d2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   803d6:	d02c      	beq.n	80432 <sd_mmc_select_slot+0x15e>
		SysTick->CTRL = 0;
   803d8:	f24e 0110 	movw	r1, #57360	; 0xe010
   803dc:	f2ce 0100 	movt	r1, #57344	; 0xe000
   803e0:	f04f 0300 	mov.w	r3, #0
   803e4:	600b      	str	r3, [r1, #0]
   803e6:	e02a      	b.n	8043e <sd_mmc_select_slot+0x16a>
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
   803e8:	f240 000c 	movw	r0, #12
   803ec:	f2c2 0007 	movt	r0, #8199	; 0x2007
   803f0:	7b81      	ldrb	r1, [r0, #14]
   803f2:	2903      	cmp	r1, #3
   803f4:	d020      	beq.n	80438 <sd_mmc_select_slot+0x164>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   803f6:	f640 3416 	movw	r4, #2838	; 0xb16
   803fa:	f2c2 0407 	movt	r4, #8199	; 0x2007
   803fe:	f04f 0300 	mov.w	r3, #0
   80402:	7023      	strb	r3, [r4, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   80404:	f240 040c 	movw	r4, #12
   80408:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8040c:	f640 3210 	movw	r2, #2832	; 0xb10
   80410:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80414:	6014      	str	r4, [r2, #0]
	sd_mmc_configure_slot();
   80416:	f240 10a5 	movw	r0, #421	; 0x1a5
   8041a:	f2c0 0008 	movt	r0, #8
   8041e:	4780      	blx	r0
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   80420:	7ba0      	ldrb	r0, [r4, #14]

	// Initialize interface
	sd_mmc_slot_sel = slot;
	sd_mmc_card = &sd_mmc_cards[slot];
	sd_mmc_configure_slot();
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   80422:	2802      	cmp	r0, #2
   80424:	bf14      	ite	ne
   80426:	2000      	movne	r0, #0
   80428:	2001      	moveq	r0, #1
   8042a:	bd10      	pop	{r4, pc}
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
		return SD_MMC_ERR_SLOT;
   8042c:	f04f 0004 	mov.w	r0, #4
   80430:	bd10      	pop	{r4, pc}
		return SD_MMC_ERR_NO_CARD;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
   80432:	f04f 0002 	mov.w	r0, #2
   80436:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
   80438:	f04f 0003 	mov.w	r0, #3
   8043c:	bd10      	pop	{r4, pc}
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   8043e:	f240 000c 	movw	r0, #12
   80442:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80446:	f04f 0202 	mov.w	r2, #2
   8044a:	7382      	strb	r2, [r0, #14]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   8044c:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   80450:	f2c0 0106 	movt	r1, #6
   80454:	6001      	str	r1, [r0, #0]
		sd_mmc_cards[slot].bus_width = 1;
   80456:	f04f 0301 	mov.w	r3, #1
   8045a:	7443      	strb	r3, [r0, #17]
		sd_mmc_cards[slot].high_speed = 0;
   8045c:	f04f 0200 	mov.w	r2, #0
   80460:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
   80464:	e7c0      	b.n	803e8 <sd_mmc_select_slot+0x114>
   80466:	bf00      	nop

00080468 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   80468:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   8046a:	f240 030c 	movw	r3, #12
   8046e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80472:	f04f 0204 	mov.w	r2, #4
   80476:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   80478:	f640 3016 	movw	r0, #2838	; 0xb16
   8047c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80480:	f04f 01ff 	mov.w	r1, #255	; 0xff
   80484:	7001      	strb	r1, [r0, #0]
	driver_init();
   80486:	f644 4379 	movw	r3, #19577	; 0x4c79
   8048a:	f2c0 0308 	movt	r3, #8
   8048e:	4798      	blx	r3
   80490:	bd08      	pop	{r3, pc}
   80492:	bf00      	nop

00080494 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   80494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80498:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   8049a:	f240 23d5 	movw	r3, #725	; 0x2d5
   8049e:	f2c0 0308 	movt	r3, #8
   804a2:	4798      	blx	r3
   804a4:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   804a6:	2801      	cmp	r0, #1
   804a8:	d006      	beq.n	804b8 <sd_mmc_check+0x24>
		sd_mmc_deselect_slot();
   804aa:	f240 2129 	movw	r1, #553	; 0x229
   804ae:	f2c0 0108 	movt	r1, #8
   804b2:	4788      	blx	r1
		return sd_mmc_err;
   804b4:	f000 bd5d 	b.w	80f72 <sd_mmc_check+0xade>
static bool sd_mmc_mci_card_init(void)
{
	uint8_t v2 = 0;

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   804b8:	f640 3010 	movw	r0, #2832	; 0xb10
   804bc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   804c0:	6801      	ldr	r1, [r0, #0]
   804c2:	f04f 0201 	mov.w	r2, #1
   804c6:	73ca      	strb	r2, [r1, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   804c8:	f04f 0500 	mov.w	r5, #0
   804cc:	740d      	strb	r5, [r1, #16]
	sd_mmc_card->rca = 0;
   804ce:	818d      	strh	r5, [r1, #12]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   804d0:	f644 533d 	movw	r3, #19773	; 0x4d3d
   804d4:	f2c0 0308 	movt	r3, #8
   804d8:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
   804da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   804de:	4629      	mov	r1, r5
   804e0:	f644 5261 	movw	r2, #19809	; 0x4d61
   804e4:	f2c0 0208 	movt	r2, #8
   804e8:	4790      	blx	r2
   804ea:	2800      	cmp	r0, #0
   804ec:	f000 84c1 	beq.w	80e72 <sd_mmc_check+0x9de>
{
	uint32_t resp;

	*v2 = 0;
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   804f0:	f245 5008 	movw	r0, #21768	; 0x5508
   804f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   804f8:	f644 5361 	movw	r3, #19809	; 0x4d61
   804fc:	f2c0 0308 	movt	r3, #8
   80500:	4798      	blx	r3
   80502:	2800      	cmp	r0, #0
   80504:	f000 84c3 	beq.w	80e8e <sd_mmc_check+0x9fa>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
	}
	// Check R7 response
	resp = driver_get_response();
   80508:	f644 5089 	movw	r0, #19849	; 0x4d89
   8050c:	f2c0 0008 	movt	r0, #8
   80510:	4780      	blx	r0
	if (resp == 0xFFFFFFFF) {
   80512:	f1b0 3fff 	cmp.w	r0, #4294967295
   80516:	f000 84bd 	beq.w	80e94 <sd_mmc_check+0xa00>
		// No compliance R7 value
		return true; // It is not a V2
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   8051a:	ea4f 5100 	mov.w	r1, r0, lsl #20
   8051e:	ea4f 5211 	mov.w	r2, r1, lsr #20
   80522:	f5b2 7fd5 	cmp.w	r2, #426	; 0x1aa
   80526:	f040 84a4 	bne.w	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   8052a:	f04f 0601 	mov.w	r6, #1
   8052e:	f000 bcb3 	b.w	80e98 <sd_mmc_check+0xa04>
	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
		sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
		return true; // No error but card type not updated
	}
	resp = driver_get_response();
   80532:	f644 5089 	movw	r0, #19849	; 0x4d89
   80536:	f2c0 0008 	movt	r0, #8
   8053a:	4780      	blx	r0
   8053c:	4601      	mov	r1, r0
	if ((resp & OCR_SDIO_NF) == 0) {
   8053e:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
   80542:	f000 84b5 	beq.w	80eb0 <sd_mmc_check+0xa1c>
   80546:	f241 3989 	movw	r9, #5001	; 0x1389
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   8054a:	f244 5705 	movw	r7, #17669	; 0x4505
   8054e:	f644 5561 	movw	r5, #19809	; 0x4d61
   80552:	f2c0 0508 	movt	r5, #8
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80556:	f644 5889 	movw	r8, #19849	; 0x4d89
   8055a:	f2c0 0808 	movt	r8, #8
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   8055e:	4638      	mov	r0, r7
   80560:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   80564:	47a8      	blx	r5
   80566:	2800      	cmp	r0, #0
   80568:	f000 8483 	beq.w	80e72 <sd_mmc_check+0x9de>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   8056c:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   8056e:	1e01      	subs	r1, r0, #0
   80570:	db0a      	blt.n	80588 <sd_mmc_check+0xf4>
   80572:	f109 39ff 	add.w	r9, r9, #4294967295
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   80576:	4638      	mov	r0, r7
   80578:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   8057c:	47a8      	blx	r5
   8057e:	2800      	cmp	r0, #0
   80580:	f040 8539 	bne.w	80ff6 <sd_mmc_check+0xb62>
   80584:	f000 bc75 	b.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD5 Timeout on busy\n\r", __func__);
			return false;
		}
	}
	// Update card type at the end of busy
	if ((resp & OCR_SDIO_MP) > 0) {
   80588:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
   8058c:	f640 3310 	movw	r3, #2832	; 0xb10
   80590:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80594:	6818      	ldr	r0, [r3, #0]
   80596:	bf14      	ite	ne
   80598:	2205      	movne	r2, #5
	} else {
		sd_mmc_card->type = CARD_TYPE_SDIO;
   8059a:	2204      	moveq	r2, #4
   8059c:	73c2      	strb	r2, [r0, #15]
   8059e:	f000 bc87 	b.w	80eb0 <sd_mmc_check+0xa1c>
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   805a2:	f241 1737 	movw	r7, #4407	; 0x1137
   805a6:	f04f 0800 	mov.w	r8, #0
   805aa:	f644 5561 	movw	r5, #19809	; 0x4d61
   805ae:	f2c0 0508 	movt	r5, #8
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   805b2:	f44f 4900 	mov.w	r9, #32768	; 0x8000
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   805b6:	f644 5a89 	movw	sl, #19849	; 0x4d89
   805ba:	f2c0 0a08 	movt	sl, #8
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   805be:	4638      	mov	r0, r7
   805c0:	4641      	mov	r1, r8
   805c2:	47a8      	blx	r5
   805c4:	2800      	cmp	r0, #0
   805c6:	f040 84ea 	bne.w	80f9e <sd_mmc_check+0xb0a>
   805ca:	f000 bc7d 	b.w	80ec8 <sd_mmc_check+0xa34>
   805ce:	4638      	mov	r0, r7
   805d0:	4641      	mov	r1, r8
   805d2:	47a8      	blx	r5
   805d4:	2800      	cmp	r0, #0
   805d6:	f000 8477 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   805da:	4649      	mov	r1, r9
   805dc:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   805e0:	f244 5029 	movw	r0, #17705	; 0x4529
   805e4:	2e00      	cmp	r6, #0
   805e6:	bf08      	it	eq
   805e8:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   805ec:	47a8      	blx	r5
   805ee:	2800      	cmp	r0, #0
   805f0:	f000 846a 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   805f4:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   805f6:	2800      	cmp	r0, #0
   805f8:	da0e      	bge.n	80618 <sd_mmc_check+0x184>
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
   805fa:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   805fe:	f000 848f 	beq.w	80f20 <sd_mmc_check+0xa8c>
				sd_mmc_card->type |= CARD_TYPE_HC;
   80602:	f640 3010 	movw	r0, #2832	; 0xb10
   80606:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8060a:	6801      	ldr	r1, [r0, #0]
   8060c:	7bca      	ldrb	r2, [r1, #15]
   8060e:	f042 0308 	orr.w	r3, r2, #8
   80612:	73cb      	strb	r3, [r1, #15]
   80614:	f000 bc84 	b.w	80f20 <sd_mmc_check+0xa8c>
   80618:	f10b 3bff 	add.w	fp, fp, #4294967295
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   8061c:	4638      	mov	r0, r7
   8061e:	4641      	mov	r1, r8
   80620:	47a8      	blx	r5
   80622:	2800      	cmp	r0, #0
   80624:	f040 84d1 	bne.w	80fca <sd_mmc_check+0xb36>
   80628:	f000 bc4e 	b.w	80ec8 <sd_mmc_check+0xa34>
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   8062c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   80630:	f2c4 051f 	movt	r5, #16415	; 0x401f
   80634:	f244 5701 	movw	r7, #17665	; 0x4501
   80638:	f644 5861 	movw	r8, #19809	; 0x4d61
   8063c:	f2c0 0808 	movt	r8, #8
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80640:	f644 5989 	movw	r9, #19849	; 0x4d89
   80644:	f2c0 0908 	movt	r9, #8
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   80648:	4638      	mov	r0, r7
   8064a:	4629      	mov	r1, r5
   8064c:	47c0      	blx	r8
   8064e:	2800      	cmp	r0, #0
   80650:	f040 8493 	bne.w	80f7a <sd_mmc_check+0xae6>
   80654:	f000 bc79 	b.w	80f4a <sd_mmc_check+0xab6>
   80658:	4638      	mov	r0, r7
   8065a:	4629      	mov	r1, r5
   8065c:	47c0      	blx	r8
   8065e:	2800      	cmp	r0, #0
   80660:	f000 8473 	beq.w	80f4a <sd_mmc_check+0xab6>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80664:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80666:	2800      	cmp	r0, #0
   80668:	da0d      	bge.n	80686 <sd_mmc_check+0x1f2>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
   8066a:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
   8066e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   80672:	f040 8460 	bne.w	80f36 <sd_mmc_check+0xaa2>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
   80676:	49a6      	ldr	r1, [pc, #664]	; (80910 <sd_mmc_check+0x47c>)
   80678:	680b      	ldr	r3, [r1, #0]
   8067a:	7bda      	ldrb	r2, [r3, #15]
   8067c:	f042 0008 	orr.w	r0, r2, #8
   80680:	73d8      	strb	r0, [r3, #15]
   80682:	f000 bc58 	b.w	80f36 <sd_mmc_check+0xaa2>
   80686:	f106 36ff 	add.w	r6, r6, #4294967295
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   8068a:	4638      	mov	r0, r7
   8068c:	4629      	mov	r1, r5
   8068e:	47c0      	blx	r8
   80690:	2800      	cmp	r0, #0
   80692:	f040 847c 	bne.w	80f8e <sd_mmc_check+0xafa>
   80696:	f000 bc58 	b.w	80f4a <sd_mmc_check+0xab6>
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
		return false;
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
   8069a:	499d      	ldr	r1, [pc, #628]	; (80910 <sd_mmc_check+0x47c>)
   8069c:	6808      	ldr	r0, [r1, #0]
   8069e:	f04f 0201 	mov.w	r2, #1
   806a2:	8182      	strh	r2, [r0, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
   806a4:	f241 1003 	movw	r0, #4355	; 0x1103
   806a8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   806ac:	4b99      	ldr	r3, [pc, #612]	; (80914 <sd_mmc_check+0x480>)
   806ae:	4798      	blx	r3
   806b0:	2800      	cmp	r0, #0
   806b2:	f000 8121 	beq.w	808f8 <sd_mmc_check+0x464>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
   806b6:	4998      	ldr	r1, [pc, #608]	; (80918 <sd_mmc_check+0x484>)
   806b8:	4788      	blx	r1
   806ba:	2800      	cmp	r0, #0
   806bc:	f000 811f 	beq.w	808fe <sd_mmc_check+0x46a>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   806c0:	4893      	ldr	r0, [pc, #588]	; (80910 <sd_mmc_check+0x47c>)
   806c2:	6803      	ldr	r3, [r0, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   806c4:	7c9a      	ldrb	r2, [r3, #18]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   806c6:	f3c2 0183 	ubfx	r1, r2, #2, #4
   806ca:	f101 30ff 	add.w	r0, r1, #4294967295
   806ce:	2803      	cmp	r0, #3
   806d0:	d803      	bhi.n	806da <sd_mmc_check+0x246>
   806d2:	e8df f000 	tbb	[pc, r0]
   806d6:	0a06      	.short	0x0a06
   806d8:	120e      	.short	0x120e
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   806da:	f04f 0112 	mov.w	r1, #18
   806de:	7419      	strb	r1, [r3, #16]
   806e0:	e00e      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   806e2:	f04f 0214 	mov.w	r2, #20
   806e6:	741a      	strb	r2, [r3, #16]
   806e8:	e00a      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   806ea:	f04f 0022 	mov.w	r0, #34	; 0x22
   806ee:	7418      	strb	r0, [r3, #16]
   806f0:	e006      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   806f2:	f04f 0130 	mov.w	r1, #48	; 0x30
   806f6:	7419      	strb	r1, [r3, #16]
   806f8:	e002      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   806fa:	f04f 0240 	mov.w	r2, #64	; 0x40
   806fe:	741a      	strb	r2, [r3, #16]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80700:	7d5a      	ldrb	r2, [r3, #21]
		break;
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   80702:	f002 0007 	and.w	r0, r2, #7
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80706:	4985      	ldr	r1, [pc, #532]	; (8091c <sd_mmc_check+0x488>)
   80708:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   8070c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80710:	fb00 f101 	mul.w	r1, r0, r1
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   80714:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   80718:	4881      	ldr	r0, [pc, #516]	; (80920 <sd_mmc_check+0x48c>)
   8071a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   8071e:	fb02 f101 	mul.w	r1, r2, r1
   80722:	6019      	str	r1, [r3, #0]
   80724:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80726:	7e18      	ldrb	r0, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80728:	7e5a      	ldrb	r2, [r3, #25]
   8072a:	ea4f 0282 	mov.w	r2, r2, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   8072e:	ea42 2080 	orr.w	r0, r2, r0, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80732:	ea40 11a1 	orr.w	r1, r0, r1, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
   80736:	ea4f 5201 	mov.w	r2, r1, lsl #20
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   8073a:	ea4f 5112 	mov.w	r1, r2, lsr #20
   8073e:	f512 1f80 	cmn.w	r2, #1048576	; 0x100000
   80742:	d015      	beq.n	80770 <sd_mmc_check+0x2dc>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80744:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80746:	7eda      	ldrb	r2, [r3, #27]
   80748:	ea4f 0242 	mov.w	r2, r2, lsl #1
   8074c:	ea42 10e0 	orr.w	r0, r2, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   80750:	f101 0101 	add.w	r1, r1, #1
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80754:	f000 0207 	and.w	r2, r0, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   80758:	f102 0202 	add.w	r2, r2, #2
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   8075c:	fa01 f102 	lsl.w	r1, r1, r2
   80760:	7dd8      	ldrb	r0, [r3, #23]
   80762:	f000 020f 	and.w	r2, r0, #15
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80766:	fa01 f102 	lsl.w	r1, r1, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   8076a:	ea4f 2091 	mov.w	r0, r1, lsr #10
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   8076e:	6058      	str	r0, [r3, #4]
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
   80770:	899b      	ldrh	r3, [r3, #12]
	if (!sd_mmc_cmd9_mci()) {
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
   80772:	f243 1007 	movw	r0, #12551	; 0x3107
   80776:	ea4f 4103 	mov.w	r1, r3, lsl #16
   8077a:	4a66      	ldr	r2, [pc, #408]	; (80914 <sd_mmc_check+0x480>)
   8077c:	4790      	blx	r2
   8077e:	2800      	cmp	r0, #0
   80780:	f000 80c0 	beq.w	80904 <sd_mmc_check+0x470>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   80784:	4d62      	ldr	r5, [pc, #392]	; (80910 <sd_mmc_check+0x47c>)
   80786:	6829      	ldr	r1, [r5, #0]
   80788:	7c08      	ldrb	r0, [r1, #16]
   8078a:	283f      	cmp	r0, #63	; 0x3f
   8078c:	f240 809c 	bls.w	808c8 <sd_mmc_check+0x434>
{
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   80790:	f04f 0100 	mov.w	r1, #0
   80794:	9100      	str	r1, [sp, #0]
   80796:	f241 1008 	movw	r0, #4360	; 0x1108
   8079a:	f2c0 0008 	movt	r0, #8
   8079e:	f44f 7200 	mov.w	r2, #512	; 0x200
   807a2:	f04f 0301 	mov.w	r3, #1
   807a6:	4d5f      	ldr	r5, [pc, #380]	; (80924 <sd_mmc_check+0x490>)
   807a8:	47a8      	blx	r5
   807aa:	2800      	cmp	r0, #0
   807ac:	f000 83d0 	beq.w	80f50 <sd_mmc_check+0xabc>
   807b0:	f04f 0500 	mov.w	r5, #0
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
		if (!driver_read_word(&ext_csd)) {
   807b4:	4e5c      	ldr	r6, [pc, #368]	; (80928 <sd_mmc_check+0x494>)
   807b6:	a802      	add	r0, sp, #8
   807b8:	47b0      	blx	r6
   807ba:	2800      	cmp	r0, #0
   807bc:	f000 83c8 	beq.w	80f50 <sd_mmc_check+0xabc>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   807c0:	f105 0501 	add.w	r5, r5, #1
   807c4:	b2ad      	uxth	r5, r5
   807c6:	2d32      	cmp	r5, #50	; 0x32
   807c8:	d1f5      	bne.n	807b6 <sd_mmc_check+0x322>
		if (!driver_read_word(&ext_csd)) {
			return false;
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   807ca:	9e02      	ldr	r6, [sp, #8]
   807cc:	f006 0302 	and.w	r3, r6, #2
   807d0:	b2de      	uxtb	r6, r3
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   807d2:	4a4f      	ldr	r2, [pc, #316]	; (80910 <sd_mmc_check+0x47c>)
   807d4:	6810      	ldr	r0, [r2, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   807d6:	7e87      	ldrb	r7, [r0, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807d8:	7e01      	ldrb	r1, [r0, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   807da:	7e43      	ldrb	r3, [r0, #25]
   807dc:	ea4f 0283 	mov.w	r2, r3, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807e0:	ea42 2081 	orr.w	r0, r2, r1, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807e4:	ea40 17a7 	orr.w	r7, r0, r7, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
   807e8:	ea4f 5107 	mov.w	r1, r7, lsl #20
   807ec:	f511 1f80 	cmn.w	r1, #1048576	; 0x100000
   807f0:	d11a      	bne.n	80828 <sd_mmc_check+0x394>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
			if (!driver_read_word(&sec_count)) {
   807f2:	4f4d      	ldr	r7, [pc, #308]	; (80928 <sd_mmc_check+0x494>)
   807f4:	a803      	add	r0, sp, #12
   807f6:	47b8      	blx	r7
   807f8:	2800      	cmp	r0, #0
   807fa:	f000 83a9 	beq.w	80f50 <sd_mmc_check+0xabc>
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   807fe:	f105 0501 	add.w	r5, r5, #1
   80802:	b2ad      	uxth	r5, r5
   80804:	2d35      	cmp	r5, #53	; 0x35
   80806:	d9f5      	bls.n	807f4 <sd_mmc_check+0x360>
			if (!driver_read_word(&sec_count)) {
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   80808:	4b41      	ldr	r3, [pc, #260]	; (80910 <sd_mmc_check+0x47c>)
   8080a:	681a      	ldr	r2, [r3, #0]
   8080c:	9803      	ldr	r0, [sp, #12]
   8080e:	ea4f 0750 	mov.w	r7, r0, lsr #1
   80812:	6057      	str	r7, [r2, #4]
   80814:	e008      	b.n	80828 <sd_mmc_check+0x394>
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
		if (!driver_read_word(&sec_count)) {
   80816:	a803      	add	r0, sp, #12
   80818:	47b8      	blx	r7
   8081a:	2800      	cmp	r0, #0
   8081c:	f000 8398 	beq.w	80f50 <sd_mmc_check+0xabc>
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   80820:	f105 0501 	add.w	r5, r5, #1
   80824:	b2ad      	uxth	r5, r5
   80826:	e000      	b.n	8082a <sd_mmc_check+0x396>
		if (!driver_read_word(&sec_count)) {
   80828:	4f3f      	ldr	r7, [pc, #252]	; (80928 <sd_mmc_check+0x494>)
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   8082a:	2d7f      	cmp	r5, #127	; 0x7f
   8082c:	d9f3      	bls.n	80816 <sd_mmc_check+0x382>
   8082e:	e392      	b.n	80f56 <sd_mmc_check+0xac2>
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
   80830:	4d3e      	ldr	r5, [pc, #248]	; (8092c <sd_mmc_check+0x498>)
   80832:	7828      	ldrb	r0, [r5, #0]
   80834:	4a3e      	ldr	r2, [pc, #248]	; (80930 <sd_mmc_check+0x49c>)
   80836:	4790      	blx	r2
   80838:	4605      	mov	r5, r0
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
	uint32_t arg;

	switch (bus_width) {
   8083a:	2804      	cmp	r0, #4
   8083c:	d00b      	beq.n	80856 <sd_mmc_check+0x3c2>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
   8083e:	f44f 7100 	mov.w	r1, #512	; 0x200
   80842:	f2c0 11b7 	movt	r1, #439	; 0x1b7
   80846:	f04f 0000 	mov.w	r0, #0
   8084a:	f2c0 10b7 	movt	r0, #439	; 0x1b7
   8084e:	2d08      	cmp	r5, #8
   80850:	bf18      	it	ne
   80852:	4601      	movne	r1, r0
   80854:	e003      	b.n	8085e <sd_mmc_check+0x3ca>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
   80856:	f44f 7180 	mov.w	r1, #256	; 0x100
   8085a:	f2c0 11b7 	movt	r1, #439	; 0x1b7
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
   8085e:	f243 1006 	movw	r0, #12550	; 0x3106
   80862:	4b2c      	ldr	r3, [pc, #176]	; (80914 <sd_mmc_check+0x480>)
   80864:	4798      	blx	r3
   80866:	2800      	cmp	r0, #0
   80868:	f000 837d 	beq.w	80f66 <sd_mmc_check+0xad2>
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   8086c:	4931      	ldr	r1, [pc, #196]	; (80934 <sd_mmc_check+0x4a0>)
   8086e:	4788      	blx	r1
   80870:	f010 0f80 	tst.w	r0, #128	; 0x80
   80874:	f040 8377 	bne.w	80f66 <sd_mmc_check+0xad2>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->bus_width = bus_width;
   80878:	4a25      	ldr	r2, [pc, #148]	; (80910 <sd_mmc_check+0x47c>)
   8087a:	6810      	ldr	r0, [r2, #0]
   8087c:	7445      	strb	r5, [r0, #17]
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
   8087e:	4b2e      	ldr	r3, [pc, #184]	; (80938 <sd_mmc_check+0x4a4>)
   80880:	4798      	blx	r3
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
   80882:	492e      	ldr	r1, [pc, #184]	; (8093c <sd_mmc_check+0x4a8>)
   80884:	4788      	blx	r1
   80886:	b338      	cbz	r0, 808d8 <sd_mmc_check+0x444>
   80888:	b336      	cbz	r6, 808d8 <sd_mmc_check+0x444>
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
   8088a:	f243 1006 	movw	r0, #12550	; 0x3106
   8088e:	f44f 7180 	mov.w	r1, #256	; 0x100
   80892:	f2c0 31b9 	movt	r1, #953	; 0x3b9
   80896:	4a1f      	ldr	r2, [pc, #124]	; (80914 <sd_mmc_check+0x480>)
   80898:	4790      	blx	r2
   8089a:	2800      	cmp	r0, #0
   8089c:	f000 8366 	beq.w	80f6c <sd_mmc_check+0xad8>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   808a0:	4824      	ldr	r0, [pc, #144]	; (80934 <sd_mmc_check+0x4a0>)
   808a2:	4780      	blx	r0
   808a4:	f010 0f80 	tst.w	r0, #128	; 0x80
   808a8:	f040 8360 	bne.w	80f6c <sd_mmc_check+0xad8>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->high_speed = 1;
   808ac:	4e18      	ldr	r6, [pc, #96]	; (80910 <sd_mmc_check+0x47c>)
   808ae:	6837      	ldr	r7, [r6, #0]
   808b0:	f04f 0501 	mov.w	r5, #1
   808b4:	f887 5022 	strb.w	r5, [r7, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
   808b8:	f44f 43ea 	mov.w	r3, #29952	; 0x7500
   808bc:	f2c0 3319 	movt	r3, #793	; 0x319
   808c0:	603b      	str	r3, [r7, #0]
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
   808c2:	491d      	ldr	r1, [pc, #116]	; (80938 <sd_mmc_check+0x4a4>)
   808c4:	4788      	blx	r1
   808c6:	e007      	b.n	808d8 <sd_mmc_check+0x444>
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
   808c8:	4f1b      	ldr	r7, [pc, #108]	; (80938 <sd_mmc_check+0x4a4>)
   808ca:	47b8      	blx	r7
   808cc:	e004      	b.n	808d8 <sd_mmc_check+0x444>
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   808ce:	4640      	mov	r0, r8
   808d0:	4639      	mov	r1, r7
   808d2:	47b0      	blx	r6
   808d4:	b140      	cbz	r0, 808e8 <sd_mmc_check+0x454>
   808d6:	e018      	b.n	8090a <sd_mmc_check+0x476>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
   808d8:	f04f 050a 	mov.w	r5, #10
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   808dc:	f241 1810 	movw	r8, #4368	; 0x1110
   808e0:	f44f 7700 	mov.w	r7, #512	; 0x200
   808e4:	4e0b      	ldr	r6, [pc, #44]	; (80914 <sd_mmc_check+0x480>)
   808e6:	e7f2      	b.n	808ce <sd_mmc_check+0x43a>
   808e8:	f105 32ff 	add.w	r2, r5, #4294967295
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
	}

	uint8_t retry = 10;
	while (retry--) {
   808ec:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
   808f0:	d1ed      	bne.n	808ce <sd_mmc_check+0x43a>
		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return true;
		}
	}
	return false;
   808f2:	f04f 0000 	mov.w	r0, #0
   808f6:	e2ad      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   808f8:	f04f 0000 	mov.w	r0, #0
   808fc:	e2aa      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
		return false;
   808fe:	f04f 0000 	mov.w	r0, #0
   80902:	e2a7      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   80904:	f04f 0000 	mov.w	r0, #0
   80908:	e2a4      	b.n	80e54 <sd_mmc_check+0x9c0>
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return true;
   8090a:	f04f 0001 	mov.w	r0, #1
   8090e:	e2a1      	b.n	80e54 <sd_mmc_check+0x9c0>
   80910:	20070b10 	.word	0x20070b10
   80914:	00084d61 	.word	0x00084d61
   80918:	0008028d 	.word	0x0008028d
   8091c:	0008d0cc 	.word	0x0008d0cc
   80920:	0008d0e8 	.word	0x0008d0e8
   80924:	00084df1 	.word	0x00084df1
   80928:	00084ec9 	.word	0x00084ec9
   8092c:	20070b16 	.word	0x20070b16
   80930:	00084cb1 	.word	0x00084cb1
   80934:	00084d89 	.word	0x00084d89
   80938:	000801a5 	.word	0x000801a5
   8093c:	00084cbd 	.word	0x00084cbd
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
   80940:	f645 3002 	movw	r0, #23298	; 0x5b02
   80944:	f04f 0100 	mov.w	r1, #0
   80948:	f644 5361 	movw	r3, #19809	; 0x4d61
   8094c:	f2c0 0308 	movt	r3, #8
   80950:	4798      	blx	r3
   80952:	2800      	cmp	r0, #0
   80954:	f000 828d 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
   80958:	f245 1003 	movw	r0, #20739	; 0x5103
   8095c:	f04f 0100 	mov.w	r1, #0
   80960:	f644 5261 	movw	r2, #19809	; 0x4d61
   80964:	f2c0 0208 	movt	r2, #8
   80968:	4790      	blx	r2
   8096a:	2800      	cmp	r0, #0
   8096c:	f000 8281 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
   80970:	f640 3510 	movw	r5, #2832	; 0xb10
   80974:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80978:	682e      	ldr	r6, [r5, #0]
   8097a:	f644 5089 	movw	r0, #19849	; 0x4d89
   8097e:	f2c0 0008 	movt	r0, #8
   80982:	4780      	blx	r0
   80984:	ea4f 4110 	mov.w	r1, r0, lsr #16
   80988:	81b1      	strh	r1, [r6, #12]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   8098a:	682b      	ldr	r3, [r5, #0]
   8098c:	7bda      	ldrb	r2, [r3, #15]
   8098e:	f012 0f01 	tst.w	r2, #1
   80992:	d056      	beq.n	80a42 <sd_mmc_check+0x5ae>
		if (!sd_mmc_cmd9_mci()) {
   80994:	f240 208d 	movw	r0, #653	; 0x28d
   80998:	f2c0 0008 	movt	r0, #8
   8099c:	4780      	blx	r0
   8099e:	2800      	cmp	r0, #0
   809a0:	f000 8267 	beq.w	80e72 <sd_mmc_check+0x9de>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   809a4:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   809a6:	7d5a      	ldrb	r2, [r3, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   809a8:	f002 0007 	and.w	r0, r2, #7
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   809ac:	f24d 01cc 	movw	r1, #53452	; 0xd0cc
   809b0:	f2c0 0108 	movt	r1, #8
   809b4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   809b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   809bc:	fb00 f101 	mul.w	r1, r0, r1
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   809c0:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   809c4:	f24d 008c 	movw	r0, #53388	; 0xd08c
   809c8:	f2c0 0008 	movt	r0, #8
   809cc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   809d0:	fb02 f101 	mul.w	r1, r2, r1
   809d4:	6019      	str	r1, [r3, #0]
   809d6:	7c98      	ldrb	r0, [r3, #18]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   809d8:	0982      	lsrs	r2, r0, #6
   809da:	d00f      	beq.n	809fc <sd_mmc_check+0x568>
   809dc:	7eda      	ldrb	r2, [r3, #27]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   809de:	7e98      	ldrb	r0, [r3, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   809e0:	7e59      	ldrb	r1, [r3, #25]
   809e2:	ea4f 4101 	mov.w	r1, r1, lsl #16
   809e6:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   809ea:	4302      	orrs	r2, r0
   809ec:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
   809f0:	f101 0101 	add.w	r1, r1, #1
   809f4:	ea4f 2041 	mov.w	r0, r1, lsl #9
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
   809f8:	6058      	str	r0, [r3, #4]
   809fa:	e022      	b.n	80a42 <sd_mmc_check+0x5ae>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   809fc:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   809fe:	7e18      	ldrb	r0, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80a00:	7e5a      	ldrb	r2, [r3, #25]
   80a02:	ea4f 0282 	mov.w	r2, r2, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80a06:	ea42 2080 	orr.w	r0, r2, r0, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80a0a:	ea40 12a1 	orr.w	r2, r0, r1, asr #6
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80a0e:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80a10:	7ed9      	ldrb	r1, [r3, #27]
   80a12:	ea4f 0141 	mov.w	r1, r1, lsl #1
   80a16:	ea41 10e0 	orr.w	r0, r1, r0, asr #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80a1a:	ea4f 5202 	mov.w	r2, r2, lsl #20
   80a1e:	ea4f 5212 	mov.w	r2, r2, lsr #20
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   80a22:	f102 0201 	add.w	r2, r2, #1
   80a26:	f000 0107 	and.w	r1, r0, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   80a2a:	f101 0102 	add.w	r1, r1, #2
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   80a2e:	fa02 f001 	lsl.w	r0, r2, r1
   80a32:	7dda      	ldrb	r2, [r3, #23]
   80a34:	f002 010f 	and.w	r1, r2, #15
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80a38:	fa00 f001 	lsl.w	r0, r0, r1
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
   80a3c:	ea4f 2290 	mov.w	r2, r0, lsr #10
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80a40:	605a      	str	r2, [r3, #4]
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
   80a42:	f640 3310 	movw	r3, #2832	; 0xb10
   80a46:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80a4a:	681a      	ldr	r2, [r3, #0]
   80a4c:	8991      	ldrh	r1, [r2, #12]
			return false;
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
   80a4e:	f243 1007 	movw	r0, #12551	; 0x3107
   80a52:	ea4f 4101 	mov.w	r1, r1, lsl #16
   80a56:	f644 5361 	movw	r3, #19809	; 0x4d61
   80a5a:	f2c0 0308 	movt	r3, #8
   80a5e:	4798      	blx	r3
   80a60:	2800      	cmp	r0, #0
   80a62:	f000 8206 	beq.w	80e72 <sd_mmc_check+0x9de>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80a66:	f640 3010 	movw	r0, #2832	; 0xb10
   80a6a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80a6e:	6801      	ldr	r1, [r0, #0]
   80a70:	7bca      	ldrb	r2, [r1, #15]
   80a72:	f012 0f01 	tst.w	r2, #1
   80a76:	d04e      	beq.n	80b16 <sd_mmc_check+0x682>
{
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   80a78:	898b      	ldrh	r3, [r1, #12]
   80a7a:	f241 1037 	movw	r0, #4407	; 0x1137
   80a7e:	ea4f 4103 	mov.w	r1, r3, lsl #16
   80a82:	f644 5261 	movw	r2, #19809	; 0x4d61
   80a86:	f2c0 0208 	movt	r2, #8
   80a8a:	4790      	blx	r2
   80a8c:	2800      	cmp	r0, #0
   80a8e:	f000 81f0 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   80a92:	f04f 0301 	mov.w	r3, #1
   80a96:	9300      	str	r3, [sp, #0]
   80a98:	f241 1033 	movw	r0, #4403	; 0x1133
   80a9c:	f2c0 0008 	movt	r0, #8
   80aa0:	f04f 0100 	mov.w	r1, #0
   80aa4:	f04f 0208 	mov.w	r2, #8
   80aa8:	4d4c      	ldr	r5, [pc, #304]	; (80bdc <sd_mmc_check+0x748>)
   80aaa:	47a8      	blx	r5
   80aac:	2800      	cmp	r0, #0
   80aae:	f000 81e0 	beq.w	80e72 <sd_mmc_check+0x9de>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(scr, 1)) {
   80ab2:	a804      	add	r0, sp, #16
   80ab4:	f04f 0101 	mov.w	r1, #1
   80ab8:	4b49      	ldr	r3, [pc, #292]	; (80be0 <sd_mmc_check+0x74c>)
   80aba:	4798      	blx	r3
   80abc:	2800      	cmp	r0, #0
   80abe:	f000 81d8 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80ac2:	4848      	ldr	r0, [pc, #288]	; (80be4 <sd_mmc_check+0x750>)
   80ac4:	4780      	blx	r0
   80ac6:	2800      	cmp	r0, #0
   80ac8:	f000 81d3 	beq.w	80e72 <sd_mmc_check+0x9de>
   80acc:	f89d 1010 	ldrb.w	r1, [sp, #16]
		return false;
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   80ad0:	f001 030f 	and.w	r3, r1, #15
   80ad4:	2b01      	cmp	r3, #1
   80ad6:	d009      	beq.n	80aec <sd_mmc_check+0x658>
   80ad8:	b113      	cbz	r3, 80ae0 <sd_mmc_check+0x64c>
   80ada:	2b02      	cmp	r3, #2
   80adc:	d116      	bne.n	80b0c <sd_mmc_check+0x678>
   80ade:	e00b      	b.n	80af8 <sd_mmc_check+0x664>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   80ae0:	4a41      	ldr	r2, [pc, #260]	; (80be8 <sd_mmc_check+0x754>)
   80ae2:	6813      	ldr	r3, [r2, #0]
   80ae4:	f04f 0010 	mov.w	r0, #16
   80ae8:	7418      	strb	r0, [r3, #16]
   80aea:	e014      	b.n	80b16 <sd_mmc_check+0x682>
		break;

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   80aec:	493e      	ldr	r1, [pc, #248]	; (80be8 <sd_mmc_check+0x754>)
   80aee:	680b      	ldr	r3, [r1, #0]
   80af0:	f04f 021a 	mov.w	r2, #26
   80af4:	741a      	strb	r2, [r3, #16]
   80af6:	e00e      	b.n	80b16 <sd_mmc_check+0x682>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80af8:	f89d 3012 	ldrb.w	r3, [sp, #18]
		break;

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   80afc:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
   80afe:	483a      	ldr	r0, [pc, #232]	; (80be8 <sd_mmc_check+0x754>)
   80b00:	6801      	ldr	r1, [r0, #0]
   80b02:	bf14      	ite	ne
   80b04:	2230      	movne	r2, #48	; 0x30
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
   80b06:	2220      	moveq	r2, #32
   80b08:	740a      	strb	r2, [r1, #16]
   80b0a:	e004      	b.n	80b16 <sd_mmc_check+0x682>
		}
		break;

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   80b0c:	4a36      	ldr	r2, [pc, #216]	; (80be8 <sd_mmc_check+0x754>)
   80b0e:	6810      	ldr	r0, [r2, #0]
   80b10:	f04f 0110 	mov.w	r1, #16
   80b14:	7401      	strb	r1, [r0, #16]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
		if (!sd_acmd51()) {
			return false;
		}
	}
	if (IS_SDIO()) {
   80b16:	f640 3010 	movw	r0, #2832	; 0xb10
   80b1a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80b1e:	6801      	ldr	r1, [r0, #0]
   80b20:	7bcb      	ldrb	r3, [r1, #15]
   80b22:	f003 0204 	and.w	r2, r3, #4
   80b26:	b2d0      	uxtb	r0, r2
   80b28:	2800      	cmp	r0, #0
   80b2a:	f000 8095 	beq.w	80c58 <sd_mmc_check+0x7c4>
 	uint32_t unit;
	uint32_t mul;
	uint8_t tplfe_max_tran_speed;

	// Read CIS area address in CCCR area
	addr_cis = 0; // Init all bytes, because the next function fill 3 bytes only
   80b2e:	f04f 0100 	mov.w	r1, #0
   80b32:	9103      	str	r1, [sp, #12]
	if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, SDIO_CCCR_CIS_PTR,
   80b34:	f04f 0503 	mov.w	r5, #3
   80b38:	9500      	str	r5, [sp, #0]
   80b3a:	f04f 0301 	mov.w	r3, #1
   80b3e:	9301      	str	r3, [sp, #4]
   80b40:	4608      	mov	r0, r1
   80b42:	f04f 0209 	mov.w	r2, #9
   80b46:	f240 15d5 	movw	r5, #469	; 0x1d5
   80b4a:	f2c0 0508 	movt	r5, #8
   80b4e:	47a8      	blx	r5
   80b50:	2800      	cmp	r0, #0
   80b52:	f000 818e 	beq.w	80e72 <sd_mmc_check+0x9de>
			1, 3, true)) {
		sd_mmc_debug("%s: CMD53 Read CIS Fail\n\r", __func__);
		return false;
	}
	if (!driver_start_read_blocks((uint8_t *)&addr_cis, 1)) {
   80b56:	a803      	add	r0, sp, #12
   80b58:	f04f 0101 	mov.w	r1, #1
   80b5c:	4b20      	ldr	r3, [pc, #128]	; (80be0 <sd_mmc_check+0x74c>)
   80b5e:	4798      	blx	r3
   80b60:	2800      	cmp	r0, #0
   80b62:	f000 8186 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80b66:	491f      	ldr	r1, [pc, #124]	; (80be4 <sd_mmc_check+0x750>)
   80b68:	4788      	blx	r1
   80b6a:	2800      	cmp	r0, #0
   80b6c:	f000 8181 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	addr_cis = le32_to_cpu(addr_cis);
   80b70:	9d03      	ldr	r5, [sp, #12]

	// Search Fun0 tuple in the CIA area
	addr = addr_cis;
	while (1) {
		// Read a sample of CIA area
		if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 3, true)) {
   80b72:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80bec <sd_mmc_check+0x758>
			sd_mmc_debug("%s: CMD53 Read CIA Fail\n\r", __func__);
			return false;
		}
		if (!driver_start_read_blocks(buf, 1)) {
   80b76:	4f1a      	ldr	r7, [pc, #104]	; (80be0 <sd_mmc_check+0x74c>)
			return false;
		}
		if (!driver_wait_end_of_read_blocks()) {
   80b78:	4e1a      	ldr	r6, [pc, #104]	; (80be4 <sd_mmc_check+0x750>)

	// Search Fun0 tuple in the CIA area
	addr = addr_cis;
	while (1) {
		// Read a sample of CIA area
		if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 3, true)) {
   80b7a:	f04f 0203 	mov.w	r2, #3
   80b7e:	9200      	str	r2, [sp, #0]
   80b80:	f04f 0301 	mov.w	r3, #1
   80b84:	9301      	str	r3, [sp, #4]
   80b86:	f04f 0000 	mov.w	r0, #0
   80b8a:	4601      	mov	r1, r0
   80b8c:	462a      	mov	r2, r5
   80b8e:	47c0      	blx	r8
   80b90:	2800      	cmp	r0, #0
   80b92:	f000 816e 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Read CIA Fail\n\r", __func__);
			return false;
		}
		if (!driver_start_read_blocks(buf, 1)) {
   80b96:	a804      	add	r0, sp, #16
   80b98:	f04f 0101 	mov.w	r1, #1
   80b9c:	47b8      	blx	r7
   80b9e:	2800      	cmp	r0, #0
   80ba0:	f000 8167 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
		if (!driver_wait_end_of_read_blocks()) {
   80ba4:	47b0      	blx	r6
   80ba6:	2800      	cmp	r0, #0
   80ba8:	f000 8163 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
		if (buf[0] == SDIO_CISTPL_END) {
   80bac:	f89d 0010 	ldrb.w	r0, [sp, #16]
   80bb0:	28ff      	cmp	r0, #255	; 0xff
   80bb2:	f000 815e 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Tuple error\n\r", __func__);
			return false; // Tuple error
		}
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
   80bb6:	2822      	cmp	r0, #34	; 0x22
   80bb8:	d102      	bne.n	80bc0 <sd_mmc_check+0x72c>
   80bba:	f89d 3012 	ldrb.w	r3, [sp, #18]
   80bbe:	b1bb      	cbz	r3, 80bf0 <sd_mmc_check+0x75c>
			break; // Fun0 tuple found
		}
		if (buf[1] == 0) {
   80bc0:	f89d 1011 	ldrb.w	r1, [sp, #17]
   80bc4:	2900      	cmp	r1, #0
   80bc6:	f000 8154 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Tuple error\n\r", __func__);
			return false; // Tuple error
		}

		// Next address
		addr += (buf[1] + 2);
   80bca:	f101 0102 	add.w	r1, r1, #2
   80bce:	186d      	adds	r5, r5, r1
		if (addr > (addr_cis + 256)) {
   80bd0:	9a03      	ldr	r2, [sp, #12]
   80bd2:	f502 7080 	add.w	r0, r2, #256	; 0x100
   80bd6:	4285      	cmp	r5, r0
   80bd8:	d9cf      	bls.n	80b7a <sd_mmc_check+0x6e6>
   80bda:	e14a      	b.n	80e72 <sd_mmc_check+0x9de>
   80bdc:	00084df1 	.word	0x00084df1
   80be0:	00084f5d 	.word	0x00084f5d
   80be4:	00085075 	.word	0x00085075
   80be8:	20070b10 	.word	0x20070b10
   80bec:	000801d5 	.word	0x000801d5
			return false; // Outoff CIS area
		}
	}

	// Read all Fun0 tuple fields: fn0_blk_siz & max_tran_speed
	if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 6, true)) {
   80bf0:	f04f 0306 	mov.w	r3, #6
   80bf4:	9300      	str	r3, [sp, #0]
   80bf6:	f04f 0301 	mov.w	r3, #1
   80bfa:	9301      	str	r3, [sp, #4]
   80bfc:	f04f 0000 	mov.w	r0, #0
   80c00:	4601      	mov	r1, r0
   80c02:	462a      	mov	r2, r5
   80c04:	4dbb      	ldr	r5, [pc, #748]	; (80ef4 <sd_mmc_check+0xa60>)
   80c06:	47a8      	blx	r5
   80c08:	2800      	cmp	r0, #0
   80c0a:	f000 8132 	beq.w	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD53 Read all Fun0 Fail\n\r", __func__);
		return false;
	}
	if (!driver_start_read_blocks(buf, 1)) {
   80c0e:	a804      	add	r0, sp, #16
   80c10:	f04f 0101 	mov.w	r1, #1
   80c14:	4ab8      	ldr	r2, [pc, #736]	; (80ef8 <sd_mmc_check+0xa64>)
   80c16:	4790      	blx	r2
   80c18:	2800      	cmp	r0, #0
   80c1a:	f000 812a 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80c1e:	49b7      	ldr	r1, [pc, #732]	; (80efc <sd_mmc_check+0xa68>)
   80c20:	4788      	blx	r1
   80c22:	2800      	cmp	r0, #0
   80c24:	f000 8125 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	tplfe_max_tran_speed = buf[5];
   80c28:	f89d 3015 	ldrb.w	r3, [sp, #21]
   80c2c:	2b32      	cmp	r3, #50	; 0x32
   80c2e:	bf28      	it	cs
   80c30:	2332      	movcs	r3, #50	; 0x32
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80c32:	48b3      	ldr	r0, [pc, #716]	; (80f00 <sd_mmc_check+0xa6c>)
   80c34:	6802      	ldr	r2, [r0, #0]
		 */
		tplfe_max_tran_speed = 0x32; // 25Mhz
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
   80c36:	f003 0007 	and.w	r0, r3, #7
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80c3a:	49b2      	ldr	r1, [pc, #712]	; (80f04 <sd_mmc_check+0xa70>)
   80c3c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   80c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80c44:	fb00 f101 	mul.w	r1, r0, r1
		tplfe_max_tran_speed = 0x32; // 25Mhz
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
   80c48:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   80c4c:	48ae      	ldr	r0, [pc, #696]	; (80f08 <sd_mmc_check+0xa74>)
   80c4e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   80c52:	fb03 f101 	mul.w	r1, r3, r1
   80c56:	6011      	str	r1, [r2, #0]
	if (IS_SDIO()) {
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
   80c58:	f640 3216 	movw	r2, #2838	; 0xb16
   80c5c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80c60:	7810      	ldrb	r0, [r2, #0]
   80c62:	f644 43b1 	movw	r3, #19633	; 0x4cb1
   80c66:	f2c0 0308 	movt	r3, #8
   80c6a:	4798      	blx	r3
   80c6c:	2803      	cmp	r0, #3
   80c6e:	d959      	bls.n	80d24 <sd_mmc_check+0x890>
		// TRY to enable 4-bit mode
		if (IS_SDIO()) {
   80c70:	f640 3010 	movw	r0, #2832	; 0xb10
   80c74:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80c78:	6801      	ldr	r1, [r0, #0]
   80c7a:	7bca      	ldrb	r2, [r1, #15]
   80c7c:	f002 0304 	and.w	r3, r2, #4
   80c80:	b2d8      	uxtb	r0, r3
   80c82:	b330      	cbz	r0, 80cd2 <sd_mmc_check+0x83e>
	 * A SDIO Low-Speed alone can supports 4bit (Optional)
	 */
	uint8_t u8_value;

	// Check 4bit support in 4BLS of "Card Capability" register
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
   80c84:	ad03      	add	r5, sp, #12
   80c86:	9500      	str	r5, [sp, #0]
   80c88:	f04f 0000 	mov.w	r0, #0
   80c8c:	4601      	mov	r1, r0
   80c8e:	f04f 0208 	mov.w	r2, #8
   80c92:	4603      	mov	r3, r0
   80c94:	4d9d      	ldr	r5, [pc, #628]	; (80f0c <sd_mmc_check+0xa78>)
   80c96:	47a8      	blx	r5
   80c98:	2800      	cmp	r0, #0
   80c9a:	f000 80ea 	beq.w	80e72 <sd_mmc_check+0x9de>
			0, &u8_value)) {
		return false;
	}
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
   80c9e:	f99d 100c 	ldrsb.w	r1, [sp, #12]
   80ca2:	2900      	cmp	r1, #0
   80ca4:	da15      	bge.n	80cd2 <sd_mmc_check+0x83e>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_BUSWIDTH_4B;
   80ca6:	ab14      	add	r3, sp, #80	; 0x50
   80ca8:	f04f 0202 	mov.w	r2, #2
   80cac:	f803 2d44 	strb.w	r2, [r3, #-68]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
   80cb0:	9300      	str	r3, [sp, #0]
   80cb2:	f04f 0001 	mov.w	r0, #1
   80cb6:	f04f 0100 	mov.w	r1, #0
   80cba:	f04f 0207 	mov.w	r2, #7
   80cbe:	4603      	mov	r3, r0
   80cc0:	47a8      	blx	r5
   80cc2:	2800      	cmp	r0, #0
   80cc4:	f000 80d5 	beq.w	80e72 <sd_mmc_check+0x9de>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->bus_width = 4;
   80cc8:	488d      	ldr	r0, [pc, #564]	; (80f00 <sd_mmc_check+0xa6c>)
   80cca:	6801      	ldr	r1, [r0, #0]
   80ccc:	f04f 0304 	mov.w	r3, #4
   80cd0:	744b      	strb	r3, [r1, #17]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_bus_width()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
   80cd2:	f640 3210 	movw	r2, #2832	; 0xb10
   80cd6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80cda:	6810      	ldr	r0, [r2, #0]
   80cdc:	7bc1      	ldrb	r1, [r0, #15]
   80cde:	f011 0f01 	tst.w	r1, #1
   80ce2:	d01a      	beq.n	80d1a <sd_mmc_check+0x886>
 */
static bool sd_acmd6(void)
{
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   80ce4:	8983      	ldrh	r3, [r0, #12]
   80ce6:	f241 1037 	movw	r0, #4407	; 0x1137
   80cea:	ea4f 4103 	mov.w	r1, r3, lsl #16
   80cee:	f644 5261 	movw	r2, #19809	; 0x4d61
   80cf2:	f2c0 0208 	movt	r2, #8
   80cf6:	4790      	blx	r2
   80cf8:	2800      	cmp	r0, #0
   80cfa:	f000 80ba 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
   80cfe:	f241 1006 	movw	r0, #4358	; 0x1106
   80d02:	f04f 0102 	mov.w	r1, #2
   80d06:	4b82      	ldr	r3, [pc, #520]	; (80f10 <sd_mmc_check+0xa7c>)
   80d08:	4798      	blx	r3
   80d0a:	2800      	cmp	r0, #0
   80d0c:	f000 80b1 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	sd_mmc_card->bus_width = 4;
   80d10:	487b      	ldr	r0, [pc, #492]	; (80f00 <sd_mmc_check+0xa6c>)
   80d12:	6801      	ldr	r1, [r0, #0]
   80d14:	f04f 0204 	mov.w	r2, #4
   80d18:	744a      	strb	r2, [r1, #17]
			if (!sd_acmd6()) {
				return false;
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
   80d1a:	f240 13a5 	movw	r3, #421	; 0x1a5
   80d1e:	f2c0 0308 	movt	r3, #8
   80d22:	4798      	blx	r3
	}
	if (driver_is_high_speed_capable()) {
   80d24:	f644 40bd 	movw	r0, #19645	; 0x4cbd
   80d28:	f2c0 0008 	movt	r0, #8
   80d2c:	4780      	blx	r0
   80d2e:	2800      	cmp	r0, #0
   80d30:	f000 8081 	beq.w	80e36 <sd_mmc_check+0x9a2>
		// TRY to enable High-Speed Mode
		if (IS_SDIO()) {
   80d34:	f640 3110 	movw	r1, #2832	; 0xb10
   80d38:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80d3c:	680a      	ldr	r2, [r1, #0]
   80d3e:	7bd3      	ldrb	r3, [r2, #15]
   80d40:	f003 0004 	and.w	r0, r3, #4
   80d44:	b2c1      	uxtb	r1, r0
   80d46:	b359      	cbz	r1, 80da0 <sd_mmc_check+0x90c>
static bool sdio_cmd52_set_high_speed(void)
{
	uint8_t u8_value;

	// Check CIA.HS
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
   80d48:	ad03      	add	r5, sp, #12
   80d4a:	9500      	str	r5, [sp, #0]
   80d4c:	f04f 0000 	mov.w	r0, #0
   80d50:	4601      	mov	r1, r0
   80d52:	f04f 0213 	mov.w	r2, #19
   80d56:	4603      	mov	r3, r0
   80d58:	4d6c      	ldr	r5, [pc, #432]	; (80f0c <sd_mmc_check+0xa78>)
   80d5a:	47a8      	blx	r5
   80d5c:	2800      	cmp	r0, #0
   80d5e:	f000 8088 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
   80d62:	f89d 200c 	ldrb.w	r2, [sp, #12]
   80d66:	f012 0f01 	tst.w	r2, #1
   80d6a:	d019      	beq.n	80da0 <sd_mmc_check+0x90c>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_EHS;
   80d6c:	ab14      	add	r3, sp, #80	; 0x50
   80d6e:	f04f 0002 	mov.w	r0, #2
   80d72:	f803 0d44 	strb.w	r0, [r3, #-68]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
   80d76:	9300      	str	r3, [sp, #0]
   80d78:	f04f 0001 	mov.w	r0, #1
   80d7c:	f04f 0100 	mov.w	r1, #0
   80d80:	f04f 0213 	mov.w	r2, #19
   80d84:	4603      	mov	r3, r0
   80d86:	47a8      	blx	r5
   80d88:	2800      	cmp	r0, #0
   80d8a:	d072      	beq.n	80e72 <sd_mmc_check+0x9de>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->high_speed = 1;
   80d8c:	495c      	ldr	r1, [pc, #368]	; (80f00 <sd_mmc_check+0xa6c>)
   80d8e:	680b      	ldr	r3, [r1, #0]
   80d90:	f04f 0201 	mov.w	r2, #1
   80d94:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
   80d98:	6818      	ldr	r0, [r3, #0]
   80d9a:	ea4f 0140 	mov.w	r1, r0, lsl #1
   80d9e:	6019      	str	r1, [r3, #0]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_high_speed()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
   80da0:	f640 3310 	movw	r3, #2832	; 0xb10
   80da4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80da8:	6818      	ldr	r0, [r3, #0]
   80daa:	7bc2      	ldrb	r2, [r0, #15]
   80dac:	f012 0f01 	tst.w	r2, #1
   80db0:	d03c      	beq.n	80e2c <sd_mmc_check+0x998>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
   80db2:	7c01      	ldrb	r1, [r0, #16]
   80db4:	2910      	cmp	r1, #16
   80db6:	d939      	bls.n	80e2c <sd_mmc_check+0x998>
 */
static bool sd_cm6_set_high_speed(void)
{
	uint8_t switch_status[SD_SW_STATUS_BSIZE];

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
   80db8:	f04f 0301 	mov.w	r3, #1
   80dbc:	9300      	str	r3, [sp, #0]
   80dbe:	f241 1006 	movw	r0, #4358	; 0x1106
   80dc2:	f2c0 0008 	movt	r0, #8
   80dc6:	f64f 7101 	movw	r1, #65281	; 0xff01
   80dca:	f2c8 01ff 	movt	r1, #33023	; 0x80ff
   80dce:	f04f 0240 	mov.w	r2, #64	; 0x40
   80dd2:	4d50      	ldr	r5, [pc, #320]	; (80f14 <sd_mmc_check+0xa80>)
   80dd4:	47a8      	blx	r5
   80dd6:	2800      	cmp	r0, #0
   80dd8:	d04b      	beq.n	80e72 <sd_mmc_check+0x9de>
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
   80dda:	a804      	add	r0, sp, #16
   80ddc:	f04f 0101 	mov.w	r1, #1
   80de0:	4b45      	ldr	r3, [pc, #276]	; (80ef8 <sd_mmc_check+0xa64>)
   80de2:	4798      	blx	r3
   80de4:	2800      	cmp	r0, #0
   80de6:	d044      	beq.n	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80de8:	4844      	ldr	r0, [pc, #272]	; (80efc <sd_mmc_check+0xa68>)
   80dea:	4780      	blx	r0
   80dec:	2800      	cmp	r0, #0
   80dee:	d040      	beq.n	80e72 <sd_mmc_check+0x9de>
		return false;
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   80df0:	4a49      	ldr	r2, [pc, #292]	; (80f18 <sd_mmc_check+0xa84>)
   80df2:	4790      	blx	r2
   80df4:	f010 0f80 	tst.w	r0, #128	; 0x80
   80df8:	d13b      	bne.n	80e72 <sd_mmc_check+0x9de>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80dfa:	f89d 1020 	ldrb.w	r1, [sp, #32]
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
   80dfe:	f001 030f 	and.w	r3, r1, #15
   80e02:	2b0f      	cmp	r3, #15
   80e04:	d012      	beq.n	80e2c <sd_mmc_check+0x998>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80e06:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80e0a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
   80e0e:	ea50 2202 	orrs.w	r2, r0, r2, lsl #8
   80e12:	d12e      	bne.n	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
   80e14:	4941      	ldr	r1, [pc, #260]	; (80f1c <sd_mmc_check+0xa88>)
   80e16:	4788      	blx	r1
	sd_mmc_card->high_speed = 1;
   80e18:	4b39      	ldr	r3, [pc, #228]	; (80f00 <sd_mmc_check+0xa6c>)
   80e1a:	6818      	ldr	r0, [r3, #0]
   80e1c:	f04f 0201 	mov.w	r2, #1
   80e20:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
	sd_mmc_card->clock *= 2;
   80e24:	6801      	ldr	r1, [r0, #0]
   80e26:	ea4f 0341 	mov.w	r3, r1, lsl #1
   80e2a:	6003      	str	r3, [r0, #0]
					return false;
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
   80e2c:	f240 10a5 	movw	r0, #421	; 0x1a5
   80e30:	f2c0 0008 	movt	r0, #8
   80e34:	4780      	blx	r0
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80e36:	f640 3210 	movw	r2, #2832	; 0xb10
   80e3a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80e3e:	6811      	ldr	r1, [r2, #0]
   80e40:	7bcb      	ldrb	r3, [r1, #15]
   80e42:	f013 0f01 	tst.w	r3, #1
   80e46:	d006      	beq.n	80e56 <sd_mmc_check+0x9c2>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   80e48:	f241 1010 	movw	r0, #4368	; 0x1110
   80e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
   80e50:	4a2f      	ldr	r2, [pc, #188]	; (80f10 <sd_mmc_check+0xa7c>)
   80e52:	4790      	blx	r2
		sd_mmc_deselect_slot();
		return sd_mmc_err;
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   80e54:	b168      	cbz	r0, 80e72 <sd_mmc_check+0x9de>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   80e56:	f640 3010 	movw	r0, #2832	; 0xb10
   80e5a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80e5e:	6803      	ldr	r3, [r0, #0]
   80e60:	f04f 0100 	mov.w	r1, #0
   80e64:	7399      	strb	r1, [r3, #14]
		sd_mmc_deselect_slot();
   80e66:	f240 2229 	movw	r2, #553	; 0x229
   80e6a:	f2c0 0208 	movt	r2, #8
   80e6e:	4790      	blx	r2
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   80e70:	e07f      	b.n	80f72 <sd_mmc_check+0xade>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   80e72:	f640 3410 	movw	r4, #2832	; 0xb10
   80e76:	f2c2 0407 	movt	r4, #8199	; 0x2007
   80e7a:	6820      	ldr	r0, [r4, #0]
   80e7c:	f04f 0403 	mov.w	r4, #3
   80e80:	7384      	strb	r4, [r0, #14]
	sd_mmc_deselect_slot();
   80e82:	f240 2329 	movw	r3, #553	; 0x229
   80e86:	f2c0 0308 	movt	r3, #8
   80e8a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   80e8c:	e071      	b.n	80f72 <sd_mmc_check+0xade>
 */
static bool sd_cmd8(uint8_t * v2)
{
	uint32_t resp;

	*v2 = 0;
   80e8e:	f04f 0600 	mov.w	r6, #0
   80e92:	e001      	b.n	80e98 <sd_mmc_check+0xa04>
   80e94:	f04f 0600 	mov.w	r6, #0
static bool sdio_op_cond(void)
{
	uint32_t resp;

	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
   80e98:	f244 5005 	movw	r0, #17669	; 0x4505
   80e9c:	f04f 0100 	mov.w	r1, #0
   80ea0:	f644 5361 	movw	r3, #19809	; 0x4d61
   80ea4:	f2c0 0308 	movt	r3, #8
   80ea8:	4798      	blx	r3
   80eaa:	2800      	cmp	r0, #0
   80eac:	f47f ab41 	bne.w	80532 <sd_mmc_check+0x9e>
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
		return false;
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80eb0:	f640 3210 	movw	r2, #2832	; 0xb10
   80eb4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80eb8:	6811      	ldr	r1, [r2, #0]
   80eba:	7bcb      	ldrb	r3, [r1, #15]
   80ebc:	f013 0f01 	tst.w	r3, #1
   80ec0:	f43f ad4a 	beq.w	80958 <sd_mmc_check+0x4c4>
   80ec4:	f7ff bb6d 	b.w	805a2 <sd_mmc_check+0x10e>
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   80ec8:	f640 3010 	movw	r0, #2832	; 0xb10
   80ecc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80ed0:	6801      	ldr	r1, [r0, #0]
   80ed2:	f04f 0302 	mov.w	r3, #2
   80ed6:	73cb      	strb	r3, [r1, #15]
static bool sd_mmc_mci_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
   80ed8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80edc:	f04f 0100 	mov.w	r1, #0
   80ee0:	f644 5261 	movw	r2, #19809	; 0x4d61
   80ee4:	f2c0 0208 	movt	r2, #8
   80ee8:	4790      	blx	r2
   80eea:	2800      	cmp	r0, #0
   80eec:	f47f ab9e 	bne.w	8062c <sd_mmc_check+0x198>
   80ef0:	e7b0      	b.n	80e54 <sd_mmc_check+0x9c0>
   80ef2:	bf00      	nop
   80ef4:	000801d5 	.word	0x000801d5
   80ef8:	00084f5d 	.word	0x00084f5d
   80efc:	00085075 	.word	0x00085075
   80f00:	20070b10 	.word	0x20070b10
   80f04:	0008d0cc 	.word	0x0008d0cc
   80f08:	0008d08c 	.word	0x0008d08c
   80f0c:	00080249 	.word	0x00080249
   80f10:	00084d61 	.word	0x00084d61
   80f14:	00084df1 	.word	0x00084df1
   80f18:	00084d89 	.word	0x00084d89
   80f1c:	00084d3d 	.word	0x00084d3d
			sd_mmc_card->type = CARD_TYPE_MMC;
			return sd_mmc_mci_install_mmc();
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80f20:	f640 3010 	movw	r0, #2832	; 0xb10
   80f24:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80f28:	6801      	ldr	r1, [r0, #0]
   80f2a:	7bca      	ldrb	r2, [r1, #15]
   80f2c:	f012 0f01 	tst.w	r2, #1
   80f30:	f47f ad06 	bne.w	80940 <sd_mmc_check+0x4ac>
   80f34:	e510      	b.n	80958 <sd_mmc_check+0x4c4>
		return false;
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
   80f36:	f645 3002 	movw	r0, #23298	; 0x5b02
   80f3a:	f04f 0100 	mov.w	r1, #0
   80f3e:	4b38      	ldr	r3, [pc, #224]	; (81020 <sd_mmc_check+0xb8c>)
   80f40:	4798      	blx	r3
   80f42:	2800      	cmp	r0, #0
   80f44:	f47f aba9 	bne.w	8069a <sd_mmc_check+0x206>
   80f48:	e784      	b.n	80e54 <sd_mmc_check+0x9c0>
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
		return false;
	}

	if (!mmc_mci_op_cond()) {
		return false;
   80f4a:	f04f 0000 	mov.w	r0, #0
   80f4e:	e781      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
   80f50:	f04f 0000 	mov.w	r0, #0
   80f54:	e77e      	b.n	80e54 <sd_mmc_check+0x9c0>
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
   80f56:	4933      	ldr	r1, [pc, #204]	; (81024 <sd_mmc_check+0xb90>)
   80f58:	7808      	ldrb	r0, [r1, #0]
   80f5a:	4b33      	ldr	r3, [pc, #204]	; (81028 <sd_mmc_check+0xb94>)
   80f5c:	4798      	blx	r3
   80f5e:	2803      	cmp	r0, #3
   80f60:	f63f ac66 	bhi.w	80830 <sd_mmc_check+0x39c>
   80f64:	e48d      	b.n	80882 <sd_mmc_check+0x3ee>
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
   80f66:	f04f 0000 	mov.w	r0, #0
   80f6a:	e773      	b.n	80e54 <sd_mmc_check+0x9c0>
			sd_mmc_configure_slot();
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
   80f6c:	f04f 0000 	mov.w	r0, #0
   80f70:	e770      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
   80f72:	4620      	mov	r0, r4
   80f74:	b015      	add	sp, #84	; 0x54
   80f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80f7a:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80f7c:	2800      	cmp	r0, #0
   80f7e:	f6ff ab74 	blt.w	8066a <sd_mmc_check+0x1d6>
   80f82:	f241 0669 	movw	r6, #4201	; 0x1069
   80f86:	f106 36ff 	add.w	r6, r6, #4294967295
   80f8a:	f7ff bb65 	b.w	80658 <sd_mmc_check+0x1c4>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80f8e:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80f90:	2800      	cmp	r0, #0
   80f92:	f6ff ab6a 	blt.w	8066a <sd_mmc_check+0x1d6>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
			}
			break;
		}
		if (retry-- == 0) {
   80f96:	3e01      	subs	r6, #1
   80f98:	f47f ab5e 	bne.w	80658 <sd_mmc_check+0x1c4>
   80f9c:	e7d5      	b.n	80f4a <sd_mmc_check+0xab6>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   80f9e:	4649      	mov	r1, r9
   80fa0:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   80fa4:	f244 5029 	movw	r0, #17705	; 0x4529
   80fa8:	2e00      	cmp	r6, #0
   80faa:	bf08      	it	eq
   80fac:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   80fb0:	47a8      	blx	r5
   80fb2:	2800      	cmp	r0, #0
   80fb4:	d088      	beq.n	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80fb6:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   80fb8:	2800      	cmp	r0, #0
   80fba:	f6ff ab1e 	blt.w	805fa <sd_mmc_check+0x166>
   80fbe:	f640 0b35 	movw	fp, #2101	; 0x835
   80fc2:	f10b 3bff 	add.w	fp, fp, #4294967295
   80fc6:	f7ff bb02 	b.w	805ce <sd_mmc_check+0x13a>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   80fca:	4649      	mov	r1, r9
   80fcc:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   80fd0:	f244 5029 	movw	r0, #17705	; 0x4529
   80fd4:	2e00      	cmp	r6, #0
   80fd6:	bf08      	it	eq
   80fd8:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   80fdc:	47a8      	blx	r5
   80fde:	2800      	cmp	r0, #0
   80fe0:	f43f af72 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80fe4:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   80fe6:	2800      	cmp	r0, #0
   80fe8:	f6ff ab07 	blt.w	805fa <sd_mmc_check+0x166>
			if ((resp & OCR_CCS) != 0) {
				sd_mmc_card->type |= CARD_TYPE_HC;
			}
			break;
		}
		if (retry-- == 0) {
   80fec:	f1bb 0b01 	subs.w	fp, fp, #1
   80ff0:	f47f aaed 	bne.w	805ce <sd_mmc_check+0x13a>
   80ff4:	e768      	b.n	80ec8 <sd_mmc_check+0xa34>
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80ff6:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   80ff8:	1e01      	subs	r1, r0, #0
   80ffa:	f6ff aac5 	blt.w	80588 <sd_mmc_check+0xf4>
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   80ffe:	4638      	mov	r0, r7
   81000:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   81004:	47a8      	blx	r5
   81006:	2800      	cmp	r0, #0
   81008:	f43f af33 	beq.w	80e72 <sd_mmc_check+0x9de>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   8100c:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   8100e:	1e01      	subs	r1, r0, #0
   81010:	f6ff aaba 	blt.w	80588 <sd_mmc_check+0xf4>
			break;
		}
		if (cmd5_retry-- == 0) {
   81014:	f1b9 0902 	subs.w	r9, r9, #2
   81018:	f47f aaa1 	bne.w	8055e <sd_mmc_check+0xca>
   8101c:	e729      	b.n	80e72 <sd_mmc_check+0x9de>
   8101e:	bf00      	nop
   81020:	00084d61 	.word	0x00084d61
   81024:	20070b16 	.word	0x20070b16
   81028:	00084cb1 	.word	0x00084cb1

0008102c <sd_mmc_get_type>:
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
   8102c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   8102e:	f240 23d5 	movw	r3, #725	; 0x2d5
   81032:	f2c0 0308 	movt	r3, #8
   81036:	4798      	blx	r3
   81038:	b958      	cbnz	r0, 81052 <sd_mmc_get_type+0x26>
		return CARD_TYPE_UNKNOWN;
	}
	sd_mmc_deselect_slot();
   8103a:	f240 2029 	movw	r0, #553	; 0x229
   8103e:	f2c0 0008 	movt	r0, #8
   81042:	4780      	blx	r0
	return sd_mmc_card->type;
   81044:	f640 3110 	movw	r1, #2832	; 0xb10
   81048:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8104c:	680a      	ldr	r2, [r1, #0]
   8104e:	7bd0      	ldrb	r0, [r2, #15]
   81050:	bd08      	pop	{r3, pc}
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
   81052:	f04f 0000 	mov.w	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
   81056:	bd08      	pop	{r3, pc}

00081058 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   81058:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   8105a:	f240 23d5 	movw	r3, #725	; 0x2d5
   8105e:	f2c0 0308 	movt	r3, #8
   81062:	4798      	blx	r3
   81064:	b958      	cbnz	r0, 8107e <sd_mmc_get_capacity+0x26>
		return 0;
	}
	sd_mmc_deselect_slot();
   81066:	f240 2029 	movw	r0, #553	; 0x229
   8106a:	f2c0 0008 	movt	r0, #8
   8106e:	4780      	blx	r0
	return sd_mmc_card->capacity;
   81070:	f640 3110 	movw	r1, #2832	; 0xb10
   81074:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81078:	680a      	ldr	r2, [r1, #0]
   8107a:	6850      	ldr	r0, [r2, #4]
   8107c:	bd08      	pop	{r3, pc}
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
   8107e:	f04f 0000 	mov.w	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
   81082:	bd08      	pop	{r3, pc}

00081084 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
   81084:	f04f 0000 	mov.w	r0, #0
   81088:	4770      	bx	lr
   8108a:	bf00      	nop

0008108c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   8108c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81090:	b083      	sub	sp, #12
   81092:	468b      	mov	fp, r1
   81094:	4692      	mov	sl, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   81096:	f240 23d5 	movw	r3, #725	; 0x2d5
   8109a:	f2c0 0308 	movt	r3, #8
   8109e:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
   810a0:	4681      	mov	r9, r0
   810a2:	2800      	cmp	r0, #0
   810a4:	f040 8081 	bne.w	811aa <sd_mmc_init_read_blocks+0x11e>
   810a8:	f640 5841 	movw	r8, #3393	; 0xd41
   810ac:	f2c0 0803 	movt	r8, #3
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810b0:	f640 3610 	movw	r6, #2832	; 0xb10
   810b4:	f2c2 0607 	movt	r6, #8199	; 0x2007
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810b8:	f241 150d 	movw	r5, #4365	; 0x110d
   810bc:	f644 5461 	movw	r4, #19809	; 0x4d61
   810c0:	f2c0 0408 	movt	r4, #8
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   810c4:	f644 5789 	movw	r7, #19849	; 0x4d89
   810c8:	f2c0 0708 	movt	r7, #8
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810cc:	6830      	ldr	r0, [r6, #0]
   810ce:	8981      	ldrh	r1, [r0, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810d0:	4628      	mov	r0, r5
   810d2:	ea4f 4101 	mov.w	r1, r1, lsl #16
   810d6:	47a0      	blx	r4
   810d8:	2800      	cmp	r0, #0
   810da:	d046      	beq.n	8116a <sd_mmc_init_read_blocks+0xde>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   810dc:	47b8      	blx	r7
   810de:	f410 7f80 	tst.w	r0, #256	; 0x100
   810e2:	d14a      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
   810e4:	f108 38ff 	add.w	r8, r8, #4294967295
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810e8:	6832      	ldr	r2, [r6, #0]
   810ea:	8993      	ldrh	r3, [r2, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810ec:	4628      	mov	r0, r5
   810ee:	ea4f 4103 	mov.w	r1, r3, lsl #16
   810f2:	47a0      	blx	r4
   810f4:	2800      	cmp	r0, #0
   810f6:	d15c      	bne.n	811b2 <sd_mmc_init_read_blocks+0x126>
   810f8:	e037      	b.n	8116a <sd_mmc_init_read_blocks+0xde>
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   810fa:	ea4f 214b 	mov.w	r1, fp, lsl #9
   810fe:	e000      	b.n	81102 <sd_mmc_init_read_blocks+0x76>
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
   81100:	4659      	mov	r1, fp
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   81102:	f04f 0301 	mov.w	r3, #1
   81106:	9300      	str	r3, [sp, #0]
   81108:	f44f 7200 	mov.w	r2, #512	; 0x200
   8110c:	4653      	mov	r3, sl
   8110e:	f644 54f1 	movw	r4, #19953	; 0x4df1
   81112:	f2c0 0408 	movt	r4, #8
   81116:	47a0      	blx	r4
   81118:	b938      	cbnz	r0, 8112a <sd_mmc_init_read_blocks+0x9e>
		sd_mmc_deselect_slot();
   8111a:	f240 2129 	movw	r1, #553	; 0x229
   8111e:	f2c0 0108 	movt	r1, #8
   81122:	4788      	blx	r1
		return SD_MMC_ERR_COMM;
   81124:	f04f 0905 	mov.w	r9, #5
   81128:	e03f      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
   8112a:	f644 5089 	movw	r0, #19849	; 0x4d89
   8112e:	f2c0 0008 	movt	r0, #8
   81132:	4780      	blx	r0
		if (resp & CARD_STATUS_ERR_RD_WR) {
   81134:	f04f 0100 	mov.w	r1, #0
   81138:	f2ce 4158 	movt	r1, #58456	; 0xe458
   8113c:	4001      	ands	r1, r0
   8113e:	b139      	cbz	r1, 81150 <sd_mmc_init_read_blocks+0xc4>
			sd_mmc_debug("%s: Read blocks %02d resp32 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
   81140:	f240 2029 	movw	r0, #553	; 0x229
   81144:	f2c0 0008 	movt	r0, #8
   81148:	4780      	blx	r0
			return SD_MMC_ERR_COMM;
   8114a:	f04f 0905 	mov.w	r9, #5
   8114e:	e02c      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   81150:	f640 3214 	movw	r2, #2836	; 0xb14
   81154:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81158:	f8a2 a000 	strh.w	sl, [r2]
	sd_mmc_nb_block_to_tranfer = nb_block;
   8115c:	f640 330c 	movw	r3, #2828	; 0xb0c
   81160:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81164:	f8a3 a000 	strh.w	sl, [r3]
	return SD_MMC_OK;
   81168:	e01f      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
		return sd_mmc_err;
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
		sd_mmc_deselect_slot();
   8116a:	f240 2229 	movw	r2, #553	; 0x229
   8116e:	f2c0 0208 	movt	r2, #8
   81172:	4790      	blx	r2
		return SD_MMC_ERR_COMM;
   81174:	f04f 0905 	mov.w	r9, #5
   81178:	e017      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   8117a:	f241 1011 	movw	r0, #4369	; 0x1111
   8117e:	f2c0 0008 	movt	r0, #8
   81182:	f241 1412 	movw	r4, #4370	; 0x1112
   81186:	f2c0 0410 	movt	r4, #16
   8118a:	f1ba 0f01 	cmp.w	sl, #1
   8118e:	bf88      	it	hi
   81190:	4620      	movhi	r0, r4
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   81192:	f640 3210 	movw	r2, #2832	; 0xb10
   81196:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8119a:	6813      	ldr	r3, [r2, #0]
   8119c:	7bd9      	ldrb	r1, [r3, #15]
   8119e:	f001 0408 	and.w	r4, r1, #8
   811a2:	b2e2      	uxtb	r2, r4
   811a4:	2a00      	cmp	r2, #0
   811a6:	d1ab      	bne.n	81100 <sd_mmc_init_read_blocks+0x74>
   811a8:	e7a7      	b.n	810fa <sd_mmc_init_read_blocks+0x6e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
   811aa:	4648      	mov	r0, r9
   811ac:	b003      	add	sp, #12
   811ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   811b2:	47b8      	blx	r7
   811b4:	f410 7f80 	tst.w	r0, #256	; 0x100
   811b8:	d1df      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   811ba:	6830      	ldr	r0, [r6, #0]
   811bc:	8981      	ldrh	r1, [r0, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   811be:	4628      	mov	r0, r5
   811c0:	ea4f 4101 	mov.w	r1, r1, lsl #16
   811c4:	47a0      	blx	r4
   811c6:	2800      	cmp	r0, #0
   811c8:	d0cf      	beq.n	8116a <sd_mmc_init_read_blocks+0xde>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   811ca:	47b8      	blx	r7
   811cc:	f410 7f80 	tst.w	r0, #256	; 0x100
   811d0:	d1d3      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
				break;
			}
		}
		if (nec_timeout-- == 0) {
   811d2:	f1b8 0802 	subs.w	r8, r8, #2
   811d6:	f47f af79 	bne.w	810cc <sd_mmc_init_read_blocks+0x40>
   811da:	e7c6      	b.n	8116a <sd_mmc_init_read_blocks+0xde>

000811dc <sd_mmc_start_read_blocks>:
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   811dc:	b510      	push	{r4, lr}
   811de:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   811e0:	f644 735d 	movw	r3, #20317	; 0x4f5d
   811e4:	f2c0 0308 	movt	r3, #8
   811e8:	4798      	blx	r3
   811ea:	b948      	cbnz	r0, 81200 <sd_mmc_start_read_blocks+0x24>
		sd_mmc_nb_block_remaining = 0;
   811ec:	f640 3114 	movw	r1, #2836	; 0xb14
   811f0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   811f4:	f04f 0300 	mov.w	r3, #0
   811f8:	800b      	strh	r3, [r1, #0]
		return SD_MMC_ERR_COMM;
   811fa:	f04f 0005 	mov.w	r0, #5
   811fe:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
   81200:	f640 3014 	movw	r0, #2836	; 0xb14
   81204:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81208:	8802      	ldrh	r2, [r0, #0]
   8120a:	1b14      	subs	r4, r2, r4
   8120c:	8004      	strh	r4, [r0, #0]
	return SD_MMC_OK;
   8120e:	f04f 0000 	mov.w	r0, #0
}
   81212:	bd10      	pop	{r4, pc}

00081214 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(void)
{
   81214:	b508      	push	{r3, lr}
	if (!driver_wait_end_of_read_blocks()) {
   81216:	f245 0375 	movw	r3, #20597	; 0x5075
   8121a:	f2c0 0308 	movt	r3, #8
   8121e:	4798      	blx	r3
   81220:	2800      	cmp	r0, #0
   81222:	d030      	beq.n	81286 <sd_mmc_wait_end_of_read_blocks+0x72>
		return SD_MMC_ERR_COMM;
	}
	if (sd_mmc_nb_block_remaining) {
   81224:	f640 3014 	movw	r0, #2836	; 0xb14
   81228:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8122c:	8801      	ldrh	r1, [r0, #0]
   8122e:	2900      	cmp	r1, #0
   81230:	d12c      	bne.n	8128c <sd_mmc_wait_end_of_read_blocks+0x78>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   81232:	f640 320c 	movw	r2, #2828	; 0xb0c
   81236:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8123a:	8813      	ldrh	r3, [r2, #0]
   8123c:	2b01      	cmp	r3, #1
   8123e:	d107      	bne.n	81250 <sd_mmc_wait_end_of_read_blocks+0x3c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   81240:	f240 2129 	movw	r1, #553	; 0x229
   81244:	f2c0 0108 	movt	r1, #8
   81248:	4788      	blx	r1
		return SD_MMC_OK;
   8124a:	f04f 0000 	mov.w	r0, #0
   8124e:	bd08      	pop	{r3, pc}
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   81250:	f243 100c 	movw	r0, #12556	; 0x310c
   81254:	f04f 0100 	mov.w	r1, #0
   81258:	f644 5261 	movw	r2, #19809	; 0x4d61
   8125c:	f2c0 0208 	movt	r2, #8
   81260:	4790      	blx	r2
   81262:	b940      	cbnz	r0, 81276 <sd_mmc_wait_end_of_read_blocks+0x62>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   81264:	f243 100c 	movw	r0, #12556	; 0x310c
   81268:	f04f 0100 	mov.w	r1, #0
   8126c:	f644 5361 	movw	r3, #19809	; 0x4d61
   81270:	f2c0 0308 	movt	r3, #8
   81274:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   81276:	f240 2029 	movw	r0, #553	; 0x229
   8127a:	f2c0 0008 	movt	r0, #8
   8127e:	4780      	blx	r0
	return SD_MMC_OK;
   81280:	f04f 0000 	mov.w	r0, #0
   81284:	bd08      	pop	{r3, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(void)
{
	if (!driver_wait_end_of_read_blocks()) {
		return SD_MMC_ERR_COMM;
   81286:	f04f 0005 	mov.w	r0, #5
   8128a:	bd08      	pop	{r3, pc}
	}
	if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
   8128c:	f04f 0000 	mov.w	r0, #0
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   81290:	bd08      	pop	{r3, pc}
   81292:	bf00      	nop

00081294 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   81294:	b5f0      	push	{r4, r5, r6, r7, lr}
   81296:	b083      	sub	sp, #12
   81298:	4606      	mov	r6, r0
   8129a:	460f      	mov	r7, r1
   8129c:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   8129e:	f240 24d5 	movw	r4, #725	; 0x2d5
   812a2:	f2c0 0408 	movt	r4, #8
   812a6:	47a0      	blx	r4
	if (sd_mmc_err != SD_MMC_OK) {
   812a8:	4604      	mov	r4, r0
   812aa:	2800      	cmp	r0, #0
   812ac:	d158      	bne.n	81360 <sd_mmc_init_write_blocks+0xcc>
		return sd_mmc_err;
	}
	if (sd_mmc_is_write_protected(slot)) {
   812ae:	4630      	mov	r0, r6
   812b0:	f241 0385 	movw	r3, #4229	; 0x1085
   812b4:	f2c0 0308 	movt	r3, #8
   812b8:	4798      	blx	r3
   812ba:	b138      	cbz	r0, 812cc <sd_mmc_init_write_blocks+0x38>
		sd_mmc_deselect_slot();
   812bc:	f240 2329 	movw	r3, #553	; 0x229
   812c0:	f2c0 0308 	movt	r3, #8
   812c4:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   812c6:	f04f 0407 	mov.w	r4, #7
   812ca:	e049      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   812cc:	f249 1018 	movw	r0, #37144	; 0x9118
   812d0:	f2c0 0008 	movt	r0, #8
   812d4:	f249 1119 	movw	r1, #37145	; 0x9119
   812d8:	f2c0 0110 	movt	r1, #16
   812dc:	2d01      	cmp	r5, #1
   812de:	bf88      	it	hi
   812e0:	4608      	movhi	r0, r1
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   812e2:	f640 3210 	movw	r2, #2832	; 0xb10
   812e6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   812ea:	6816      	ldr	r6, [r2, #0]
   812ec:	7bf3      	ldrb	r3, [r6, #15]
   812ee:	f003 0108 	and.w	r1, r3, #8
   812f2:	b2ca      	uxtb	r2, r1
   812f4:	b912      	cbnz	r2, 812fc <sd_mmc_init_write_blocks+0x68>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   812f6:	ea4f 2147 	mov.w	r1, r7, lsl #9
   812fa:	e000      	b.n	812fe <sd_mmc_init_write_blocks+0x6a>
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
   812fc:	4639      	mov	r1, r7
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   812fe:	f04f 0601 	mov.w	r6, #1
   81302:	9600      	str	r6, [sp, #0]
   81304:	f44f 7200 	mov.w	r2, #512	; 0x200
   81308:	462b      	mov	r3, r5
   8130a:	f644 56f1 	movw	r6, #19953	; 0x4df1
   8130e:	f2c0 0608 	movt	r6, #8
   81312:	47b0      	blx	r6
   81314:	b938      	cbnz	r0, 81326 <sd_mmc_init_write_blocks+0x92>
		sd_mmc_deselect_slot();
   81316:	f240 2029 	movw	r0, #553	; 0x229
   8131a:	f2c0 0008 	movt	r0, #8
   8131e:	4780      	blx	r0
		return SD_MMC_ERR_COMM;
   81320:	f04f 0405 	mov.w	r4, #5
   81324:	e01c      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
   81326:	f644 5089 	movw	r0, #19849	; 0x4d89
   8132a:	f2c0 0008 	movt	r0, #8
   8132e:	4780      	blx	r0
		if (resp & CARD_STATUS_ERR_RD_WR) {
   81330:	f04f 0300 	mov.w	r3, #0
   81334:	f2ce 4358 	movt	r3, #58456	; 0xe458
   81338:	4003      	ands	r3, r0
   8133a:	b13b      	cbz	r3, 8134c <sd_mmc_init_write_blocks+0xb8>
			sd_mmc_debug("%s: Write blocks %02d r1 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
   8133c:	f240 2429 	movw	r4, #553	; 0x229
   81340:	f2c0 0408 	movt	r4, #8
   81344:	47a0      	blx	r4
			return SD_MMC_ERR_COMM;
   81346:	f04f 0405 	mov.w	r4, #5
   8134a:	e009      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   8134c:	f640 3114 	movw	r1, #2836	; 0xb14
   81350:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81354:	800d      	strh	r5, [r1, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   81356:	f640 320c 	movw	r2, #2828	; 0xb0c
   8135a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8135e:	8015      	strh	r5, [r2, #0]
	return SD_MMC_OK;
}
   81360:	4620      	mov	r0, r4
   81362:	b003      	add	sp, #12
   81364:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81366:	bf00      	nop

00081368 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   81368:	b510      	push	{r4, lr}
   8136a:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   8136c:	f245 03ed 	movw	r3, #20717	; 0x50ed
   81370:	f2c0 0308 	movt	r3, #8
   81374:	4798      	blx	r3
   81376:	b948      	cbnz	r0, 8138c <sd_mmc_start_write_blocks+0x24>
		sd_mmc_nb_block_remaining = 0;
   81378:	f640 3114 	movw	r1, #2836	; 0xb14
   8137c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81380:	f04f 0300 	mov.w	r3, #0
   81384:	800b      	strh	r3, [r1, #0]
		return SD_MMC_ERR_COMM;
   81386:	f04f 0005 	mov.w	r0, #5
   8138a:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
   8138c:	f640 3014 	movw	r0, #2836	; 0xb14
   81390:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81394:	8802      	ldrh	r2, [r0, #0]
   81396:	1b14      	subs	r4, r2, r4
   81398:	8004      	strh	r4, [r0, #0]
	return SD_MMC_OK;
   8139a:	f04f 0000 	mov.w	r0, #0
}
   8139e:	bd10      	pop	{r4, pc}

000813a0 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(void)
{
   813a0:	b508      	push	{r3, lr}
	if (!driver_wait_end_of_write_blocks()) {
   813a2:	f245 13e5 	movw	r3, #20965	; 0x51e5
   813a6:	f2c0 0308 	movt	r3, #8
   813aa:	4798      	blx	r3
   813ac:	2800      	cmp	r0, #0
   813ae:	d02f      	beq.n	81410 <sd_mmc_wait_end_of_write_blocks+0x70>
		return SD_MMC_ERR_COMM;
	}
	if (sd_mmc_nb_block_remaining) {
   813b0:	f640 3014 	movw	r0, #2836	; 0xb14
   813b4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   813b8:	8801      	ldrh	r1, [r0, #0]
   813ba:	2900      	cmp	r1, #0
   813bc:	d12b      	bne.n	81416 <sd_mmc_wait_end_of_write_blocks+0x76>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   813be:	f640 320c 	movw	r2, #2828	; 0xb0c
   813c2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   813c6:	8813      	ldrh	r3, [r2, #0]
   813c8:	2b01      	cmp	r3, #1
   813ca:	d107      	bne.n	813dc <sd_mmc_wait_end_of_write_blocks+0x3c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   813cc:	f240 2329 	movw	r3, #553	; 0x229
   813d0:	f2c0 0308 	movt	r3, #8
   813d4:	4798      	blx	r3
		return SD_MMC_OK;
   813d6:	f04f 0000 	mov.w	r0, #0
   813da:	bd08      	pop	{r3, pc}
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   813dc:	f243 100c 	movw	r0, #12556	; 0x310c
   813e0:	f04f 0100 	mov.w	r1, #0
   813e4:	f644 5261 	movw	r2, #19809	; 0x4d61
   813e8:	f2c0 0208 	movt	r2, #8
   813ec:	4790      	blx	r2
   813ee:	b938      	cbnz	r0, 81400 <sd_mmc_wait_end_of_write_blocks+0x60>
			sd_mmc_deselect_slot();
   813f0:	f240 2129 	movw	r1, #553	; 0x229
   813f4:	f2c0 0108 	movt	r1, #8
   813f8:	4788      	blx	r1
			return SD_MMC_ERR_COMM;
   813fa:	f04f 0005 	mov.w	r0, #5
   813fe:	bd08      	pop	{r3, pc}
		}
	}
	sd_mmc_deselect_slot();
   81400:	f240 2029 	movw	r0, #553	; 0x229
   81404:	f2c0 0008 	movt	r0, #8
   81408:	4780      	blx	r0
	return SD_MMC_OK;
   8140a:	f04f 0000 	mov.w	r0, #0
   8140e:	bd08      	pop	{r3, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(void)
{
	if (!driver_wait_end_of_write_blocks()) {
		return SD_MMC_ERR_COMM;
   81410:	f04f 0005 	mov.w	r0, #5
   81414:	bd08      	pop	{r3, pc}
	}
	if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
   81416:	f04f 0000 	mov.w	r0, #0
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   8141a:	bd08      	pop	{r3, pc}

0008141c <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   8141c:	b4f0      	push	{r4, r5, r6, r7}
   8141e:	b08c      	sub	sp, #48	; 0x30
   81420:	4606      	mov	r6, r0
   81422:	460f      	mov	r7, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   81424:	ac01      	add	r4, sp, #4
   81426:	f24d 1528 	movw	r5, #53544	; 0xd128
   8142a:	f2c0 0508 	movt	r5, #8
   8142e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81436:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   8143a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8143e:	9b01      	ldr	r3, [sp, #4]
   81440:	fbb7 f0f3 	udiv	r0, r7, r3
   81444:	fbb0 f1f6 	udiv	r1, r0, r6
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81448:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8144c:	d952      	bls.n	814f4 <pwm_clocks_generate+0xd8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8144e:	9902      	ldr	r1, [sp, #8]
   81450:	fbb7 f2f1 	udiv	r2, r7, r1
   81454:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81458:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8145c:	d94f      	bls.n	814fe <pwm_clocks_generate+0xe2>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8145e:	9b03      	ldr	r3, [sp, #12]
   81460:	fbb7 f0f3 	udiv	r0, r7, r3
   81464:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81468:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8146c:	d94a      	bls.n	81504 <pwm_clocks_generate+0xe8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8146e:	9904      	ldr	r1, [sp, #16]
   81470:	fbb7 f2f1 	udiv	r2, r7, r1
   81474:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81478:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8147c:	d945      	bls.n	8150a <pwm_clocks_generate+0xee>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8147e:	9b05      	ldr	r3, [sp, #20]
   81480:	fbb7 f0f3 	udiv	r0, r7, r3
   81484:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81488:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8148c:	d940      	bls.n	81510 <pwm_clocks_generate+0xf4>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8148e:	9906      	ldr	r1, [sp, #24]
   81490:	fbb7 f2f1 	udiv	r2, r7, r1
   81494:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81498:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8149c:	d93b      	bls.n	81516 <pwm_clocks_generate+0xfa>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8149e:	9b07      	ldr	r3, [sp, #28]
   814a0:	fbb7 f0f3 	udiv	r0, r7, r3
   814a4:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814a8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814ac:	d936      	bls.n	8151c <pwm_clocks_generate+0x100>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814ae:	9908      	ldr	r1, [sp, #32]
   814b0:	fbb7 f2f1 	udiv	r2, r7, r1
   814b4:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814b8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814bc:	d931      	bls.n	81522 <pwm_clocks_generate+0x106>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   814c0:	fbb7 f0f3 	udiv	r0, r7, r3
   814c4:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814c8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814cc:	d92c      	bls.n	81528 <pwm_clocks_generate+0x10c>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814ce:	990a      	ldr	r1, [sp, #40]	; 0x28
   814d0:	fbb7 f2f1 	udiv	r2, r7, r1
   814d4:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814d8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814dc:	d927      	bls.n	8152e <pwm_clocks_generate+0x112>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   814e0:	fbb7 f0f3 	udiv	r0, r7, r3
   814e4:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814e8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814ec:	d922      	bls.n	81534 <pwm_clocks_generate+0x118>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   814ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
   814f2:	e022      	b.n	8153a <pwm_clocks_generate+0x11e>
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   814f4:	f04f 0200 	mov.w	r2, #0
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	}

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
   814f8:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
   814fc:	e01d      	b.n	8153a <pwm_clocks_generate+0x11e>
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
		ul_pre++;
   814fe:	f04f 0201 	mov.w	r2, #1
   81502:	e7f9      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81504:	f04f 0202 	mov.w	r2, #2
   81508:	e7f6      	b.n	814f8 <pwm_clocks_generate+0xdc>
   8150a:	f04f 0203 	mov.w	r2, #3
   8150e:	e7f3      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81510:	f04f 0204 	mov.w	r2, #4
   81514:	e7f0      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81516:	f04f 0205 	mov.w	r2, #5
   8151a:	e7ed      	b.n	814f8 <pwm_clocks_generate+0xdc>
   8151c:	f04f 0206 	mov.w	r2, #6
   81520:	e7ea      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81522:	f04f 0207 	mov.w	r2, #7
   81526:	e7e7      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81528:	f04f 0208 	mov.w	r2, #8
   8152c:	e7e4      	b.n	814f8 <pwm_clocks_generate+0xdc>
   8152e:	f04f 0209 	mov.w	r2, #9
   81532:	e7e1      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81534:	f04f 020a 	mov.w	r2, #10
   81538:	e7de      	b.n	814f8 <pwm_clocks_generate+0xdc>
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
	}
}
   8153a:	b00c      	add	sp, #48	; 0x30
   8153c:	bcf0      	pop	{r4, r5, r6, r7}
   8153e:	4770      	bx	lr

00081540 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   81540:	b570      	push	{r4, r5, r6, lr}
   81542:	4606      	mov	r6, r0
   81544:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   81546:	6808      	ldr	r0, [r1, #0]
   81548:	b158      	cbz	r0, 81562 <pwm_init+0x22>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   8154a:	6889      	ldr	r1, [r1, #8]
   8154c:	f241 431d 	movw	r3, #5149	; 0x141d
   81550:	f2c0 0308 	movt	r3, #8
   81554:	4798      	blx	r3
		if (result == PWM_INVALID_ARGUMENT) {
   81556:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8155a:	4288      	cmp	r0, r1
   8155c:	d014      	beq.n	81588 <pwm_init+0x48>
			return result;
		}

		clock = result;
   8155e:	4605      	mov	r5, r0
   81560:	e001      	b.n	81566 <pwm_init+0x26>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   81562:	f04f 0500 	mov.w	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   81566:	6860      	ldr	r0, [r4, #4]
   81568:	b158      	cbz	r0, 81582 <pwm_init+0x42>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   8156a:	68a1      	ldr	r1, [r4, #8]
   8156c:	f241 421d 	movw	r2, #5149	; 0x141d
   81570:	f2c0 0208 	movt	r2, #8
   81574:	4790      	blx	r2

		if (result == PWM_INVALID_ARGUMENT) {
   81576:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8157a:	4298      	cmp	r0, r3
   8157c:	d004      	beq.n	81588 <pwm_init+0x48>
			return result;
		}

		clock |= (result << 16);
   8157e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   81582:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   81584:	f04f 0000 	mov.w	r0, #0
}
   81588:	bd70      	pop	{r4, r5, r6, pc}
   8158a:	bf00      	nop

0008158c <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   8158c:	b470      	push	{r4, r5, r6}
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
   8158e:	680b      	ldr	r3, [r1, #0]
	uint32_t channel = (1 << ch_num);
   81590:	f04f 0201 	mov.w	r2, #1
   81594:	fa02 f203 	lsl.w	r2, r2, r3

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81598:	8a8e      	ldrh	r6, [r1, #20]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   8159a:	684c      	ldr	r4, [r1, #4]
   8159c:	f004 050f 	and.w	r5, r4, #15
   815a0:	432e      	orrs	r6, r5
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   815a2:	890c      	ldrh	r4, [r1, #8]
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   815a4:	4326      	orrs	r6, r4
   815a6:	7a8d      	ldrb	r5, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   815a8:	ea46 2645 	orr.w	r6, r6, r5, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   815ac:	7d8c      	ldrb	r4, [r1, #22]
   815ae:	ea46 4504 	orr.w	r5, r6, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   815b2:	7dce      	ldrb	r6, [r1, #23]
   815b4:	ea45 4546 	orr.w	r5, r5, r6, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   815b8:	7e0c      	ldrb	r4, [r1, #24]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   815ba:	ea45 4684 	orr.w	r6, r5, r4, lsl #18
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = ch_mode_reg;
   815be:	f103 0510 	add.w	r5, r3, #16
   815c2:	ea4f 1445 	mov.w	r4, r5, lsl #5
   815c6:	1905      	adds	r5, r0, r4
   815c8:	5106      	str	r6, [r0, r4]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   815ca:	68cc      	ldr	r4, [r1, #12]
   815cc:	606c      	str	r4, [r5, #4]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   815ce:	690c      	ldr	r4, [r1, #16]
   815d0:	eb00 1543 	add.w	r5, r0, r3, lsl #5
   815d4:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   815d8:	7d8c      	ldrb	r4, [r1, #22]
   815da:	b13c      	cbz	r4, 815ec <pwm_channel_init+0x60>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   815dc:	8b8d      	ldrh	r5, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   815de:	8b4c      	ldrh	r4, [r1, #26]
   815e0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   815e4:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   815e8:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
   815ec:	7fcd      	ldrb	r5, [r1, #31]
   815ee:	fa05 f503 	lsl.w	r5, r5, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
   815f2:	7f8c      	ldrb	r4, [r1, #30]
   815f4:	fa04 f403 	lsl.w	r4, r4, r3
   815f8:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
   815fc:	6485      	str	r5, [r0, #72]	; 0x48
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
   815fe:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   81602:	fa05 f503 	lsl.w	r5, r5, r3
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
   81606:	f891 4020 	ldrb.w	r4, [r1, #32]
   8160a:	fa04 f403 	lsl.w	r4, r4, r3
   8160e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
   81612:	6444      	str	r4, [r0, #68]	; 0x44
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
					ch_num) << 16);

	/* Sync Channels Mode Register */
	if (p_channel->b_sync_ch) {
   81614:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   81618:	b11c      	cbz	r4, 81622 <pwm_channel_init+0x96>
		p_pwm->PWM_SCM |= channel;
   8161a:	6a04      	ldr	r4, [r0, #32]
   8161c:	4314      	orrs	r4, r2
   8161e:	6204      	str	r4, [r0, #32]
   81620:	e003      	b.n	8162a <pwm_channel_init+0x9e>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   81622:	6a04      	ldr	r4, [r0, #32]
   81624:	ea24 0402 	bic.w	r4, r4, r2
   81628:	6204      	str	r4, [r0, #32]
		p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
	} else {
		p_pwm->PWM_FPV1 &= (!((0x01 << ch_num) << 16));
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   8162a:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   8162e:	2c01      	cmp	r4, #1
   81630:	d103      	bne.n	8163a <pwm_channel_init+0xae>
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   81632:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81634:	4314      	orrs	r4, r2
   81636:	6684      	str	r4, [r0, #104]	; 0x68
   81638:	e006      	b.n	81648 <pwm_channel_init+0xbc>
	} else {
		p_pwm->PWM_FPV &= (!(0x01 << ch_num));
   8163a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8163c:	2a00      	cmp	r2, #0
   8163e:	bf14      	ite	ne
   81640:	2400      	movne	r4, #0
   81642:	f004 0401 	andeq.w	r4, r4, #1
   81646:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   81648:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   8164c:	2c01      	cmp	r4, #1
   8164e:	d104      	bne.n	8165a <pwm_channel_init+0xce>
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   81650:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81652:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
   81656:	6682      	str	r2, [r0, #104]	; 0x68
   81658:	e006      	b.n	81668 <pwm_channel_init+0xdc>
	} else {
		p_pwm->PWM_FPV &= (!((0x01 << ch_num) << 16));
   8165a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8165c:	0412      	lsls	r2, r2, #16
   8165e:	bf14      	ite	ne
   81660:	2200      	movne	r2, #0
   81662:	f004 0201 	andeq.w	r2, r4, #1
   81666:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   81668:	2b03      	cmp	r3, #3
   8166a:	d80f      	bhi.n	8168c <pwm_channel_init+0x100>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   8166c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   8166e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   81672:	f04f 02ff 	mov.w	r2, #255	; 0xff
   81676:	fa02 f203 	lsl.w	r2, r2, r3
   8167a:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   8167e:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   81682:	fa01 f303 	lsl.w	r3, r1, r3
   81686:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE1 = fault_enable_reg;
   81688:	66c2      	str	r2, [r0, #108]	; 0x6c
   8168a:	e010      	b.n	816ae <pwm_channel_init+0x122>
	} else {
		ch_num -= 4;
   8168c:	f1a3 0304 	sub.w	r3, r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   81690:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   81692:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   81696:	f04f 02ff 	mov.w	r2, #255	; 0xff
   8169a:	fa02 f203 	lsl.w	r2, r2, r3
   8169e:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   816a2:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   816a6:	fa01 f303 	lsl.w	r3, r1, r3
   816aa:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE2 = fault_enable_reg;
   816ac:	6702      	str	r2, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   816ae:	f04f 0000 	mov.w	r0, #0
   816b2:	bc70      	pop	{r4, r5, r6}
   816b4:	4770      	bx	lr
   816b6:	bf00      	nop

000816b8 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   816b8:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   816ba:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   816bc:	690b      	ldr	r3, [r1, #16]
   816be:	4293      	cmp	r3, r2
   816c0:	d307      	bcc.n	816d2 <pwm_channel_update_duty+0x1a>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   816c2:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   816c4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   816c8:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   816cc:	f04f 0000 	mov.w	r0, #0
   816d0:	e001      	b.n	816d6 <pwm_channel_update_duty+0x1e>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   816d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   816d6:	bc10      	pop	{r4}
   816d8:	4770      	bx	lr
   816da:	bf00      	nop

000816dc <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   816dc:	f04f 0301 	mov.w	r3, #1
   816e0:	fa03 f101 	lsl.w	r1, r3, r1
   816e4:	6041      	str	r1, [r0, #4]
   816e6:	4770      	bx	lr

000816e8 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   816e8:	f04f 0301 	mov.w	r3, #1
   816ec:	fa03 f101 	lsl.w	r1, r3, r1
   816f0:	6081      	str	r1, [r0, #8]
   816f2:	4770      	bx	lr

000816f4 <pwm_channel_disable_interrupt>:
#if (SAM3N || SAM4N)
	p_pwm->PWM_IDR = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IDR1 = (1 << ul_event) | (1 << (ul_fault + 16));
   816f4:	f102 0210 	add.w	r2, r2, #16
   816f8:	f04f 0301 	mov.w	r3, #1
   816fc:	fa03 f202 	lsl.w	r2, r3, r2
   81700:	fa03 f101 	lsl.w	r1, r3, r1
   81704:	430a      	orrs	r2, r1
   81706:	6142      	str	r2, [r0, #20]
   81708:	4770      	bx	lr
   8170a:	bf00      	nop

0008170c <supc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void supc_switch_sclk_to_32kxtal(Supc *p_supc, uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   8170c:	2901      	cmp	r1, #1
   8170e:	d105      	bne.n	8171c <supc_switch_sclk_to_32kxtal+0x10>
		p_supc->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY) | SUPC_MR_OSCBYPASS;
   81710:	6883      	ldr	r3, [r0, #8]
   81712:	f043 4125 	orr.w	r1, r3, #2768240640	; 0xa5000000
   81716:	f441 1280 	orr.w	r2, r1, #1048576	; 0x100000
   8171a:	6082      	str	r2, [r0, #8]
	}

	p_supc->SUPC_CR |= SUPC_CR_KEY(SUPC_KEY) | SUPC_CR_XTALSEL;
   8171c:	6803      	ldr	r3, [r0, #0]
   8171e:	f043 4125 	orr.w	r1, r3, #2768240640	; 0xa5000000
   81722:	f041 0208 	orr.w	r2, r1, #8
   81726:	6002      	str	r2, [r0, #0]
   81728:	4770      	bx	lr
   8172a:	bf00      	nop

0008172c <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   8172c:	b410      	push	{r4}
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8172e:	ea4f 1181 	mov.w	r1, r1, lsl #6
   81732:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   81734:	f04f 0402 	mov.w	r4, #2
   81738:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   8173a:	f04f 30ff 	mov.w	r0, #4294967295
   8173e:	6298      	str	r0, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   81740:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   81742:	605a      	str	r2, [r3, #4]
}
   81744:	bc10      	pop	{r4}
   81746:	4770      	bx	lr

00081748 <tc_set_block_mode>:
 * \param ul_blockmode Block mode register value to set.
 *
 */
void tc_set_block_mode(Tc *p_tc, uint32_t ul_blockmode)
{
	p_tc->TC_BMR = ul_blockmode;
   81748:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   8174c:	4770      	bx	lr
   8174e:	bf00      	nop

00081750 <tc_start>:
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   81750:	ea4f 1181 	mov.w	r1, r1, lsl #6
   81754:	f04f 0305 	mov.w	r3, #5
   81758:	5043      	str	r3, [r0, r1]
   8175a:	4770      	bx	lr

0008175c <tc_stop>:
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   8175c:	ea4f 1181 	mov.w	r1, r1, lsl #6
   81760:	f04f 0302 	mov.w	r3, #2
   81764:	5043      	str	r3, [r0, r1]
   81766:	4770      	bx	lr

00081768 <tc_read_cv>:
uint32_t tc_read_cv(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   81768:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   8176c:	6908      	ldr	r0, [r1, #16]
}
   8176e:	4770      	bx	lr

00081770 <tc_write_rb>:
		uint32_t ul_value)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RB = ul_value;
   81770:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   81774:	618a      	str	r2, [r1, #24]
   81776:	4770      	bx	lr

00081778 <tc_write_rc>:
		uint32_t ul_value)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   81778:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   8177c:	61ca      	str	r2, [r1, #28]
   8177e:	4770      	bx	lr

00081780 <tc_enable_interrupt>:
{
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81780:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   81784:	624a      	str	r2, [r1, #36]	; 0x24
   81786:	4770      	bx	lr

00081788 <tc_get_status>:
{
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81788:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   8178c:	6a08      	ldr	r0, [r1, #32]
}
   8178e:	4770      	bx	lr

00081790 <tc_find_mck_divisor>:
 *
 * \return 1 if a proper divisor has been found, otherwise 0.
 */
uint32_t tc_find_mck_divisor(uint32_t ul_freq, uint32_t ul_mck,
		uint32_t *p_uldiv, uint32_t *p_ultcclks, uint32_t ul_boardmck)
{
   81790:	b470      	push	{r4, r5, r6}
   81792:	b087      	sub	sp, #28
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   81794:	f04f 0402 	mov.w	r4, #2
   81798:	9401      	str	r4, [sp, #4]
   8179a:	f04f 0508 	mov.w	r5, #8
   8179e:	9502      	str	r5, [sp, #8]
   817a0:	f04f 0420 	mov.w	r4, #32
   817a4:	9403      	str	r4, [sp, #12]
   817a6:	f04f 0580 	mov.w	r5, #128	; 0x80
   817aa:	9504      	str	r5, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
   817ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   817ae:	ea4f 34d4 	mov.w	r4, r4, lsr #15
 * \return 1 if a proper divisor has been found, otherwise 0.
 */
uint32_t tc_find_mck_divisor(uint32_t ul_freq, uint32_t ul_mck,
		uint32_t *p_uldiv, uint32_t *p_ultcclks, uint32_t ul_boardmck)
{
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   817b2:	9405      	str	r4, [sp, #20]
	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
   817b4:	ea4f 4551 	mov.w	r5, r1, lsr #17
		if (ul_freq > ul_high) {
   817b8:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
   817bc:	d83e      	bhi.n	8183c <tc_find_mck_divisor+0xac>
			return 0;
		} else if (ul_freq >= ul_low) {
   817be:	42a8      	cmp	r0, r5
   817c0:	d251      	bcs.n	81866 <tc_find_mck_divisor+0xd6>

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
   817c2:	f04f 0608 	mov.w	r6, #8
   817c6:	fbb1 f5f6 	udiv	r5, r1, r6
		ul_low  = ul_high / TC_DIV_FACTOR;
   817ca:	ea4f 4615 	mov.w	r6, r5, lsr #16
		if (ul_freq > ul_high) {
   817ce:	42a8      	cmp	r0, r5
   817d0:	d837      	bhi.n	81842 <tc_find_mck_divisor+0xb2>
			return 0;
		} else if (ul_freq >= ul_low) {
   817d2:	42b0      	cmp	r0, r6
   817d4:	d21e      	bcs.n	81814 <tc_find_mck_divisor+0x84>

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
   817d6:	f04f 0520 	mov.w	r5, #32
   817da:	fbb1 f5f5 	udiv	r5, r1, r5
		ul_low  = ul_high / TC_DIV_FACTOR;
   817de:	ea4f 4615 	mov.w	r6, r5, lsr #16
		if (ul_freq > ul_high) {
   817e2:	42a8      	cmp	r0, r5
   817e4:	d830      	bhi.n	81848 <tc_find_mck_divisor+0xb8>
			return 0;
		} else if (ul_freq >= ul_low) {
   817e6:	42b0      	cmp	r0, r6
   817e8:	d217      	bcs.n	8181a <tc_find_mck_divisor+0x8a>

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
   817ea:	f04f 0680 	mov.w	r6, #128	; 0x80
   817ee:	fbb1 f5f6 	udiv	r5, r1, r6
		ul_low  = ul_high / TC_DIV_FACTOR;
   817f2:	ea4f 4615 	mov.w	r6, r5, lsr #16
		if (ul_freq > ul_high) {
   817f6:	42a8      	cmp	r0, r5
   817f8:	d829      	bhi.n	8184e <tc_find_mck_divisor+0xbe>
			return 0;
		} else if (ul_freq >= ul_low) {
   817fa:	42b0      	cmp	r0, r6
   817fc:	d210      	bcs.n	81820 <tc_find_mck_divisor+0x90>

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
   817fe:	fbb1 f1f4 	udiv	r1, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
   81802:	ea4f 4411 	mov.w	r4, r1, lsr #16
		if (ul_freq > ul_high) {
   81806:	4281      	cmp	r1, r0
   81808:	d324      	bcc.n	81854 <tc_find_mck_divisor+0xc4>
			return 0;
		} else if (ul_freq >= ul_low) {
   8180a:	4284      	cmp	r4, r0
   8180c:	bf98      	it	ls
   8180e:	2104      	movls	r1, #4
   81810:	d92b      	bls.n	8186a <tc_find_mck_divisor+0xda>
   81812:	e022      	b.n	8185a <tc_find_mck_divisor+0xca>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
   81814:	f04f 0101 	mov.w	r1, #1
   81818:	e027      	b.n	8186a <tc_find_mck_divisor+0xda>
   8181a:	f04f 0102 	mov.w	r1, #2
   8181e:	e024      	b.n	8186a <tc_find_mck_divisor+0xda>
   81820:	f04f 0103 	mov.w	r1, #3
   81824:	e021      	b.n	8186a <tc_find_mck_divisor+0xda>
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
		*p_uldiv = divisors[ul_index];
   81826:	ac06      	add	r4, sp, #24
   81828:	eb04 0081 	add.w	r0, r4, r1, lsl #2
   8182c:	f850 0c14 	ldr.w	r0, [r0, #-20]
   81830:	6010      	str	r0, [r2, #0]
	}

	if (p_ultcclks) {
   81832:	b1ab      	cbz	r3, 81860 <tc_find_mck_divisor+0xd0>
		*p_ultcclks = ul_index;
   81834:	6019      	str	r1, [r3, #0]
	}

	return 1;
   81836:	f04f 0001 	mov.w	r0, #1
   8183a:	e019      	b.n	81870 <tc_find_mck_divisor+0xe0>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
   8183c:	f04f 0000 	mov.w	r0, #0
   81840:	e016      	b.n	81870 <tc_find_mck_divisor+0xe0>
   81842:	f04f 0000 	mov.w	r0, #0
   81846:	e013      	b.n	81870 <tc_find_mck_divisor+0xe0>
   81848:	f04f 0000 	mov.w	r0, #0
   8184c:	e010      	b.n	81870 <tc_find_mck_divisor+0xe0>
   8184e:	f04f 0000 	mov.w	r0, #0
   81852:	e00d      	b.n	81870 <tc_find_mck_divisor+0xe0>
   81854:	f04f 0000 	mov.w	r0, #0
   81858:	e00a      	b.n	81870 <tc_find_mck_divisor+0xe0>
		} else if (ul_freq >= ul_low) {
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
   8185a:	f04f 0000 	mov.w	r0, #0
   8185e:	e007      	b.n	81870 <tc_find_mck_divisor+0xe0>

	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
   81860:	f04f 0001 	mov.w	r0, #1
   81864:	e004      	b.n	81870 <tc_find_mck_divisor+0xe0>
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
   81866:	f04f 0100 	mov.w	r1, #0
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
   8186a:	2a00      	cmp	r2, #0
   8186c:	d1db      	bne.n	81826 <tc_find_mck_divisor+0x96>
   8186e:	e7e0      	b.n	81832 <tc_find_mck_divisor+0xa2>
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
   81870:	b007      	add	sp, #28
   81872:	bc70      	pop	{r4, r5, r6}
   81874:	4770      	bx	lr
   81876:	bf00      	nop

00081878 <twi_enable_master_mode>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   81878:	f04f 0308 	mov.w	r3, #8
   8187c:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   8187e:	f04f 0120 	mov.w	r1, #32
   81882:	6001      	str	r1, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   81884:	f04f 0204 	mov.w	r2, #4
   81888:	6002      	str	r2, [r0, #0]
   8188a:	4770      	bx	lr

0008188c <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   8188c:	f44f 53d4 	mov.w	r3, #6784	; 0x1a80
   81890:	f2c0 0306 	movt	r3, #6
   81894:	4299      	cmp	r1, r3
   81896:	d845      	bhi.n	81924 <twi_set_speed+0x98>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   81898:	ea4f 0141 	mov.w	r1, r1, lsl #1
   8189c:	fbb2 f2f1 	udiv	r2, r2, r1
   818a0:	f1a2 0204 	sub.w	r2, r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   818a4:	2aff      	cmp	r2, #255	; 0xff
   818a6:	d92e      	bls.n	81906 <twi_set_speed+0x7a>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   818a8:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   818ac:	2aff      	cmp	r2, #255	; 0xff
   818ae:	d918      	bls.n	818e2 <twi_set_speed+0x56>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   818b0:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   818b4:	2aff      	cmp	r2, #255	; 0xff
   818b6:	d917      	bls.n	818e8 <twi_set_speed+0x5c>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   818b8:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   818bc:	2aff      	cmp	r2, #255	; 0xff
   818be:	d916      	bls.n	818ee <twi_set_speed+0x62>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   818c0:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   818c4:	2aff      	cmp	r2, #255	; 0xff
   818c6:	d915      	bls.n	818f4 <twi_set_speed+0x68>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   818c8:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   818cc:	2aff      	cmp	r2, #255	; 0xff
   818ce:	d914      	bls.n	818fa <twi_set_speed+0x6e>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   818d0:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   818d4:	2aff      	cmp	r2, #255	; 0xff
   818d6:	d913      	bls.n	81900 <twi_set_speed+0x74>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   818d8:	ea4f 0252 	mov.w	r2, r2, lsr #1
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
   818dc:	f04f 0307 	mov.w	r3, #7
   818e0:	e013      	b.n	8190a <twi_set_speed+0x7e>
   818e2:	f04f 0301 	mov.w	r3, #1
   818e6:	e010      	b.n	8190a <twi_set_speed+0x7e>
   818e8:	f04f 0302 	mov.w	r3, #2
   818ec:	e00d      	b.n	8190a <twi_set_speed+0x7e>
   818ee:	f04f 0303 	mov.w	r3, #3
   818f2:	e00a      	b.n	8190a <twi_set_speed+0x7e>
   818f4:	f04f 0304 	mov.w	r3, #4
   818f8:	e007      	b.n	8190a <twi_set_speed+0x7e>
   818fa:	f04f 0305 	mov.w	r3, #5
   818fe:	e004      	b.n	8190a <twi_set_speed+0x7e>
   81900:	f04f 0306 	mov.w	r3, #6
   81904:	e001      	b.n	8190a <twi_set_speed+0x7e>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   81906:	f04f 0300 	mov.w	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   8190a:	ea4f 6102 	mov.w	r1, r2, lsl #24
			TWI_CWGR_CKDIV(ckdiv);
   8190e:	ea4f 4303 	mov.w	r3, r3, lsl #16
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   81912:	ea43 4111 	orr.w	r1, r3, r1, lsr #16
   81916:	b2d2      	uxtb	r2, r2
   81918:	ea41 0302 	orr.w	r3, r1, r2
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   8191c:	6103      	str	r3, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   8191e:	f04f 0000 	mov.w	r0, #0
   81922:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   81924:	f04f 0001 	mov.w	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   81928:	4770      	bx	lr
   8192a:	bf00      	nop

0008192c <twi_reset>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   8192c:	f04f 0380 	mov.w	r3, #128	; 0x80
   81930:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   81932:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81934:	4770      	bx	lr
   81936:	bf00      	nop

00081938 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   81938:	b538      	push	{r3, r4, r5, lr}
   8193a:	4604      	mov	r4, r0
   8193c:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   8193e:	f04f 33ff 	mov.w	r3, #4294967295
   81942:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   81944:	6a03      	ldr	r3, [r0, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   81946:	f641 112d 	movw	r1, #6445	; 0x192d
   8194a:	f2c0 0108 	movt	r1, #8
   8194e:	4788      	blx	r1

	twi_enable_master_mode(p_twi);
   81950:	4620      	mov	r0, r4
   81952:	f641 0279 	movw	r2, #6265	; 0x1879
   81956:	f2c0 0208 	movt	r2, #8
   8195a:	4790      	blx	r2

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   8195c:	4620      	mov	r0, r4
   8195e:	6869      	ldr	r1, [r5, #4]
   81960:	682a      	ldr	r2, [r5, #0]
   81962:	f641 038d 	movw	r3, #6285	; 0x188d
   81966:	f2c0 0308 	movt	r3, #8
   8196a:	4798      	blx	r3
   8196c:	2801      	cmp	r0, #1
   8196e:	bf14      	ite	ne
   81970:	2000      	movne	r0, #0
   81972:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   81974:	7a69      	ldrb	r1, [r5, #9]
   81976:	2901      	cmp	r1, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   81978:	bf04      	itt	eq
   8197a:	2140      	moveq	r1, #64	; 0x40
   8197c:	6021      	streq	r1, [r4, #0]
	}

	return status;
}
   8197e:	bd38      	pop	{r3, r4, r5, pc}

00081980 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
   81980:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81984:	6043      	str	r3, [r0, #4]
   81986:	4770      	bx	lr

00081988 <init_board>:
 #include <asf.h>
 #include "init.h"
 
 
 void init_board(void)
 {
   81988:	b570      	push	{r4, r5, r6, lr}
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8198a:	f04f 002b 	mov.w	r0, #43	; 0x2b
   8198e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81992:	f647 3405 	movw	r4, #31493	; 0x7b05
   81996:	f2c0 0408 	movt	r4, #8
   8199a:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8199c:	f04f 002a 	mov.w	r0, #42	; 0x2a
   819a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   819a4:	47a0      	blx	r4
	 
	/* Configure HSMCI pins */
	gpio_configure_pin(PIN_HSMCI_MCCDA_GPIO, PIN_HSMCI_MCCDA_FLAGS);
   819a6:	f04f 0014 	mov.w	r0, #20
   819aa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   819ae:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCCK_GPIO, PIN_HSMCI_MCCK_FLAGS);
   819b0:	f04f 0013 	mov.w	r0, #19
   819b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   819b8:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA0_GPIO, PIN_HSMCI_MCDA0_FLAGS);
   819ba:	f04f 0015 	mov.w	r0, #21
   819be:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   819c2:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA1_GPIO, PIN_HSMCI_MCDA1_FLAGS);
   819c4:	f04f 0016 	mov.w	r0, #22
   819c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   819cc:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA2_GPIO, PIN_HSMCI_MCDA2_FLAGS);
   819ce:	f04f 0017 	mov.w	r0, #23
   819d2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   819d6:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA3_GPIO, PIN_HSMCI_MCDA3_FLAGS);
   819d8:	f04f 0018 	mov.w	r0, #24
   819dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   819e0:	47a0      	blx	r4
	/* Configure SD/MMC card detect pin */
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
   819e2:	f04f 0067 	mov.w	r0, #103	; 0x67
   819e6:	f04f 0108 	mov.w	r1, #8
   819ea:	47a0      	blx	r4
	
	/* Configure EEPROM pins **/	
	pmc_enable_periph_clk(ID_TWI0);
   819ec:	f04f 0016 	mov.w	r0, #22
   819f0:	f647 6629 	movw	r6, #32297	; 0x7e29
   819f4:	f2c0 0608 	movt	r6, #8
   819f8:	47b0      	blx	r6
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   819fa:	f04f 0011 	mov.w	r0, #17
   819fe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a02:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   81a04:	f04f 0012 	mov.w	r0, #18
   81a08:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a0c:	47a0      	blx	r4
	 
	/* Enable power to the SD card slot */
	pmc_enable_periph_clk(VDD_MCI_PIO_ID);
   81a0e:	f04f 000c 	mov.w	r0, #12
   81a12:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81a14:	f44f 5580 	mov.w	r5, #4096	; 0x1000
   81a18:	f2c4 050e 	movt	r5, #16398	; 0x400e
   81a1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   81a20:	612b      	str	r3, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81a22:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81a26:	636b      	str	r3, [r5, #52]	; 0x34
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81a28:	f44f 6460 	mov.w	r4, #3584	; 0xe00
   81a2c:	f2c4 040e 	movt	r4, #16398	; 0x400e
   81a30:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   81a34:	6620      	str	r0, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81a36:	6560      	str	r0, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   81a38:	6260      	str	r0, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   81a3a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   81a3e:	6f22      	ldr	r2, [r4, #112]	; 0x70
   81a40:	4302      	orrs	r2, r0
   81a42:	6722      	str	r2, [r4, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   81a44:	6060      	str	r0, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81a46:	f04f 0101 	mov.w	r1, #1
   81a4a:	6621      	str	r1, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81a4c:	6561      	str	r1, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   81a4e:	6261      	str	r1, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   81a50:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   81a54:	6f23      	ldr	r3, [r4, #112]	; 0x70
   81a56:	430b      	orrs	r3, r1
   81a58:	6723      	str	r3, [r4, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   81a5a:	6061      	str	r1, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81a5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   81a60:	6620      	str	r0, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81a62:	6560      	str	r0, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   81a64:	6260      	str	r0, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   81a66:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   81a6a:	6f22      	ldr	r2, [r4, #112]	; 0x70
   81a6c:	4302      	orrs	r2, r0
   81a6e:	6722      	str	r2, [r4, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   81a70:	6060      	str	r0, [r4, #4]
	ioport_disable_pin(PIN_LED2_GPIO);
	ioport_set_pin_mode(PIN_LED3_GPIO, PIN_LED3_FLAGS);
	ioport_disable_pin(PIN_LED3_GPIO);
	 	 
	/* User button */
	pmc_enable_periph_clk(USR_BUTTON_PIO_ID);
   81a72:	f04f 000c 	mov.w	r0, #12
   81a76:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   81a78:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   81a7c:	6169      	str	r1, [r5, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81a7e:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   81a82:	6669      	str	r1, [r5, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81a84:	6569      	str	r1, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   81a86:	6229      	str	r1, [r5, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   81a88:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81a8c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   81a8e:	f423 0000 	bic.w	r0, r3, #8388608	; 0x800000
   81a92:	6728      	str	r0, [r5, #112]	; 0x70
	ioport_set_pin_dir(GPIO_USR_BUTTON, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_USR_BUTTON, GPIO_USR_BUTTON_FLAGS);
	 
	/* Sync signals */
	pmc_enable_periph_clk(SYNC_PIO_ID);
   81a94:	f04f 000e 	mov.w	r0, #14
   81a98:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   81a9a:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
   81a9e:	f2c4 050e 	movt	r5, #16398	; 0x400e
   81aa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   81aa6:	616a      	str	r2, [r5, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81aa8:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   81aac:	666a      	str	r2, [r5, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81aae:	656a      	str	r2, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   81ab0:	622a      	str	r2, [r5, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   81ab2:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81ab6:	6f29      	ldr	r1, [r5, #112]	; 0x70
   81ab8:	f421 6380 	bic.w	r3, r1, #1024	; 0x400
   81abc:	672b      	str	r3, [r5, #112]	; 0x70
	ioport_set_pin_dir(GPIO_SYNC, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_SYNC, GPIO_SYNC_FLAGS);
	pmc_enable_periph_clk(SYNC_READ_PIO_ID);
   81abe:	f04f 000b 	mov.w	r0, #11
   81ac2:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81ac4:	f04f 0020 	mov.w	r0, #32
   81ac8:	6120      	str	r0, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81aca:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81ace:	6360      	str	r0, [r4, #52]	; 0x34
	ioport_set_pin_dir(SYNC_READ_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(SYNC_READ_GPIO, SYNC_READ_ACTIVE_LEVEL);
	pmc_enable_periph_clk(SYNC_WRITE_PIO_ID);
   81ad0:	f04f 000b 	mov.w	r0, #11
   81ad4:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81ad6:	f04f 0280 	mov.w	r2, #128	; 0x80
   81ada:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81adc:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81ae0:	6322      	str	r2, [r4, #48]	; 0x30
	ioport_set_pin_dir(SYNC_WRITE_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(SYNC_WRITE_GPIO, SYNC_WRITE_INACTIVE_LEVEL);
	
	/* 12v detect */
	pmc_enable_periph_clk(DET_12V_PIO_ID);
   81ae2:	f04f 000b 	mov.w	r0, #11
   81ae6:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   81ae8:	f04f 0102 	mov.w	r1, #2
   81aec:	6161      	str	r1, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81aee:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81af2:	6621      	str	r1, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81af4:	6561      	str	r1, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   81af6:	6221      	str	r1, [r4, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   81af8:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81afc:	6f23      	ldr	r3, [r4, #112]	; 0x70
   81afe:	f023 0002 	bic.w	r0, r3, #2
   81b02:	6720      	str	r0, [r4, #112]	; 0x70
	ioport_set_pin_dir(GPIO_DET_12V, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_DET_12V, GPIO_DET_12V_FLAGS);
	
	/* 12v power ok */
	pmc_enable_periph_clk(OK_12V_PIO_ID);
   81b04:	f04f 000e 	mov.w	r0, #14
   81b08:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   81b0a:	f44f 7280 	mov.w	r2, #256	; 0x100
   81b0e:	616a      	str	r2, [r5, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81b10:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81b14:	662a      	str	r2, [r5, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81b16:	656a      	str	r2, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   81b18:	622a      	str	r2, [r5, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   81b1a:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81b1e:	6f29      	ldr	r1, [r5, #112]	; 0x70
   81b20:	f421 7380 	bic.w	r3, r1, #256	; 0x100
   81b24:	672b      	str	r3, [r5, #112]	; 0x70
	ioport_set_pin_dir(GPIO_OK_12V, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_OK_12V, GPIO_OK_12V_FLAGS);
	
	/* 12v enable */	
	pmc_enable_periph_clk(ENABLE_12V_PIO_ID);
   81b26:	f04f 000e 	mov.w	r0, #14
   81b2a:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81b2c:	f44f 7000 	mov.w	r0, #512	; 0x200
   81b30:	6128      	str	r0, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81b32:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81b36:	6368      	str	r0, [r5, #52]	; 0x34
   81b38:	bd70      	pop	{r4, r5, r6, pc}
   81b3a:	bf00      	nop

00081b3c <switch_on_off_lights>:
uint16_t lights_off = FALSE;


void switch_on_off_lights(uint16_t bool_lights)
{
	lights_off = bool_lights;
   81b3c:	f640 332c 	movw	r3, #2860	; 0xb2c
   81b40:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81b44:	8018      	strh	r0, [r3, #0]
   81b46:	4770      	bx	lr

00081b48 <led_activity_routine>:
}

/* Routine for LED blinking */
void led_activity_routine(void)
{
   81b48:	b508      	push	{r3, lr}
		ioport_set_pin_level(OUT_CH3_LED2_GPIO, IOPORT_PIN_LEVEL_LOW);
		ioport_set_pin_level(OUT_CH3_LED3_GPIO, IOPORT_PIN_LEVEL_LOW);
		return;
	#endif
	
	if(lights_off == TRUE)
   81b4a:	f640 332c 	movw	r3, #2860	; 0xb2c
   81b4e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81b52:	8818      	ldrh	r0, [r3, #0]
   81b54:	2801      	cmp	r0, #1
   81b56:	d12a      	bne.n	81bae <led_activity_routine+0x66>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81b58:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   81b5c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81b60:	f04f 0120 	mov.w	r1, #32
   81b64:	6319      	str	r1, [r3, #48]	; 0x30
   81b66:	f04f 0080 	mov.w	r0, #128	; 0x80
   81b6a:	6318      	str	r0, [r3, #48]	; 0x30
   81b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
   81b70:	631a      	str	r2, [r3, #48]	; 0x30
   81b72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   81b76:	6319      	str	r1, [r3, #48]	; 0x30
   81b78:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   81b7c:	631a      	str	r2, [r3, #48]	; 0x30
   81b7e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   81b82:	6319      	str	r1, [r3, #48]	; 0x30
   81b84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   81b88:	631a      	str	r2, [r3, #48]	; 0x30
   81b8a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   81b8e:	6319      	str	r1, [r3, #48]	; 0x30
   81b90:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   81b94:	631a      	str	r2, [r3, #48]	; 0x30
   81b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81b9a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81b9e:	6318      	str	r0, [r3, #48]	; 0x30
   81ba0:	f04f 0040 	mov.w	r0, #64	; 0x40
   81ba4:	6318      	str	r0, [r3, #48]	; 0x30
   81ba6:	f44f 7180 	mov.w	r1, #256	; 0x100
   81baa:	6319      	str	r1, [r3, #48]	; 0x30
   81bac:	bd08      	pop	{r3, pc}
		ioport_set_pin_level(OUT_CH3_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
		ioport_set_pin_level(OUT_CH3_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);
		return;
	}
	
	if(led_last_counter0_val != tc_read_cv(TC1, 2))
   81bae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   81bb2:	f2c4 0008 	movt	r0, #16392	; 0x4008
   81bb6:	f04f 0102 	mov.w	r1, #2
   81bba:	f241 7269 	movw	r2, #5993	; 0x1769
   81bbe:	f2c0 0208 	movt	r2, #8
   81bc2:	4790      	blx	r2
   81bc4:	f640 3120 	movw	r1, #2848	; 0xb20
   81bc8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81bcc:	680b      	ldr	r3, [r1, #0]
   81bce:	4298      	cmp	r0, r3
   81bd0:	d03a      	beq.n	81c48 <led_activity_routine+0x100>
	{		
		if(ch1_in_out_color == GREEN)
   81bd2:	f240 0032 	movw	r0, #50	; 0x32
   81bd6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81bda:	8802      	ldrh	r2, [r0, #0]
   81bdc:	2a03      	cmp	r2, #3
   81bde:	d110      	bne.n	81c02 <led_activity_routine+0xba>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81be0:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   81be4:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81be8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   81bea:	f013 0f80 	tst.w	r3, #128	; 0x80
		port->PIO_CODR = mask;
   81bee:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81bf2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81bf6:	f04f 0280 	mov.w	r2, #128	; 0x80
   81bfa:	bf14      	ite	ne
   81bfc:	6342      	strne	r2, [r0, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81bfe:	6302      	streq	r2, [r0, #48]	; 0x30
   81c00:	e011      	b.n	81c26 <led_activity_routine+0xde>
		{
			ioport_toggle_pin_level(IN_CH1_LED2_GPIO);
		}
		else if(ch1_in_out_color == BLUE)
   81c02:	2a02      	cmp	r2, #2
   81c04:	d10f      	bne.n	81c26 <led_activity_routine+0xde>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81c06:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   81c0a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81c0e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   81c10:	f413 7f00 	tst.w	r3, #512	; 0x200
		port->PIO_CODR = mask;
   81c14:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81c18:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
   81c20:	bf14      	ite	ne
   81c22:	6342      	strne	r2, [r0, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81c24:	6302      	streq	r2, [r0, #48]	; 0x30
		{
			ioport_toggle_pin_level(IN_CH1_LED3_GPIO);
		}
		led_last_counter0_val = tc_read_cv(TC1, 2);
   81c26:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   81c2a:	f2c4 0008 	movt	r0, #16392	; 0x4008
   81c2e:	f04f 0102 	mov.w	r1, #2
   81c32:	f241 7369 	movw	r3, #5993	; 0x1769
   81c36:	f2c0 0308 	movt	r3, #8
   81c3a:	4798      	blx	r3
   81c3c:	f640 3120 	movw	r1, #2848	; 0xb20
   81c40:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81c44:	6008      	str	r0, [r1, #0]
   81c46:	e00c      	b.n	81c62 <led_activity_routine+0x11a>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81c48:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81c4c:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81c50:	f04f 0220 	mov.w	r2, #32
   81c54:	6302      	str	r2, [r0, #48]	; 0x30
   81c56:	f04f 0180 	mov.w	r1, #128	; 0x80
   81c5a:	6301      	str	r1, [r0, #48]	; 0x30
   81c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
   81c60:	6303      	str	r3, [r0, #48]	; 0x30
	{
		ioport_set_pin_level(IN_CH1_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
		ioport_set_pin_level(IN_CH1_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
		ioport_set_pin_level(IN_CH1_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);
	}	
	if(led_last_counter1_val != tc_read_cv(TC0, 1))
   81c62:	f04f 0000 	mov.w	r0, #0
   81c66:	f2c4 0008 	movt	r0, #16392	; 0x4008
   81c6a:	f04f 0101 	mov.w	r1, #1
   81c6e:	f241 7269 	movw	r2, #5993	; 0x1769
   81c72:	f2c0 0208 	movt	r2, #8
   81c76:	4790      	blx	r2
   81c78:	f640 3324 	movw	r3, #2852	; 0xb24
   81c7c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81c80:	6819      	ldr	r1, [r3, #0]
   81c82:	4288      	cmp	r0, r1
   81c84:	d03a      	beq.n	81cfc <led_activity_routine+0x1b4>
	{
		if(ch2_in_out_color == GREEN)
   81c86:	f240 0034 	movw	r0, #52	; 0x34
   81c8a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81c8e:	8802      	ldrh	r2, [r0, #0]
   81c90:	2a03      	cmp	r2, #3
   81c92:	d110      	bne.n	81cb6 <led_activity_routine+0x16e>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81c94:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   81c98:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81c9c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   81c9e:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
		port->PIO_CODR = mask;
   81ca2:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81ca6:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81caa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   81cae:	bf14      	ite	ne
   81cb0:	6342      	strne	r2, [r0, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81cb2:	6302      	streq	r2, [r0, #48]	; 0x30
   81cb4:	e011      	b.n	81cda <led_activity_routine+0x192>
		{
			ioport_toggle_pin_level(IN_CH2_LED2_GPIO);
		}
		else if(ch2_in_out_color == BLUE)
   81cb6:	2a02      	cmp	r2, #2
   81cb8:	d10f      	bne.n	81cda <led_activity_routine+0x192>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81cba:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   81cbe:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81cc2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   81cc4:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
		port->PIO_CODR = mask;
   81cc8:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81ccc:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81cd0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   81cd4:	bf14      	ite	ne
   81cd6:	6342      	strne	r2, [r0, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81cd8:	6302      	streq	r2, [r0, #48]	; 0x30
		{
			ioport_toggle_pin_level(IN_CH2_LED3_GPIO);
		}
		led_last_counter1_val = tc_read_cv(TC0, 1);
   81cda:	f04f 0000 	mov.w	r0, #0
   81cde:	f2c4 0008 	movt	r0, #16392	; 0x4008
   81ce2:	f04f 0101 	mov.w	r1, #1
   81ce6:	f241 7369 	movw	r3, #5993	; 0x1769
   81cea:	f2c0 0308 	movt	r3, #8
   81cee:	4798      	blx	r3
   81cf0:	f640 3124 	movw	r1, #2852	; 0xb24
   81cf4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81cf8:	6008      	str	r0, [r1, #0]
   81cfa:	e00c      	b.n	81d16 <led_activity_routine+0x1ce>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81cfc:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81d00:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81d04:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   81d08:	6302      	str	r2, [r0, #48]	; 0x30
   81d0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   81d0e:	6303      	str	r3, [r0, #48]	; 0x30
   81d10:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   81d14:	6301      	str	r1, [r0, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81d16:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81d1a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81d1e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
	{
		ioport_set_pin_level(IN_CH2_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
		ioport_set_pin_level(IN_CH2_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
		ioport_set_pin_level(IN_CH2_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);
	}
	if(ioport_get_pin_level(TTL_IN_GPIO))
   81d20:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
   81d24:	d066      	beq.n	81df4 <led_activity_routine+0x2ac>
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81d26:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   81d2a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   81d32:	6342      	str	r2, [r0, #52]	; 0x34
	{
		ioport_set_pin_level(TTL_D_NRESET_GPIO, IOPORT_PIN_LEVEL_LOW);
		asm("NOP");asm("NOP");asm("NOP");
   81d34:	bf00      	nop
   81d36:	bf00      	nop
   81d38:	bf00      	nop
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81d3a:	6302      	str	r2, [r0, #48]	; 0x30
		ioport_set_pin_level(TTL_D_NRESET_GPIO, IOPORT_PIN_LEVEL_HIGH);
		
		if(ch3_in_color == GREEN)
   81d3c:	f240 0338 	movw	r3, #56	; 0x38
   81d40:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81d44:	8819      	ldrh	r1, [r3, #0]
   81d46:	2903      	cmp	r1, #3
   81d48:	d110      	bne.n	81d6c <led_activity_routine+0x224>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81d4a:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81d4e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81d52:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   81d54:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		port->PIO_CODR = mask;
   81d58:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   81d5c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81d60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   81d64:	bf14      	ite	ne
   81d66:	6359      	strne	r1, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81d68:	6319      	streq	r1, [r3, #48]	; 0x30
   81d6a:	e011      	b.n	81d90 <led_activity_routine+0x248>
		{
			ioport_toggle_pin_level(IN_CH3_LED2_GPIO);
		}
		else if(ch3_in_color == BLUE)
   81d6c:	2902      	cmp	r1, #2
   81d6e:	d10f      	bne.n	81d90 <led_activity_routine+0x248>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81d70:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81d74:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81d78:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   81d7a:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
		port->PIO_CODR = mask;
   81d7e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   81d82:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81d86:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   81d8a:	bf14      	ite	ne
   81d8c:	6359      	strne	r1, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81d8e:	6319      	streq	r1, [r3, #48]	; 0x30
		{
			ioport_toggle_pin_level(IN_CH3_LED3_GPIO);
		}
		if(is_qma_set_to_ttlin == TRUE)
   81d90:	f240 003a 	movw	r0, #58	; 0x3a
   81d94:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81d98:	8802      	ldrh	r2, [r0, #0]
   81d9a:	2a01      	cmp	r2, #1
   81d9c:	d14b      	bne.n	81e36 <led_activity_routine+0x2ee>
		{
			if(ch3_out_color == GREEN)
   81d9e:	f240 0330 	movw	r3, #48	; 0x30
   81da2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81da6:	8819      	ldrh	r1, [r3, #0]
   81da8:	2903      	cmp	r1, #3
   81daa:	d110      	bne.n	81dce <led_activity_routine+0x286>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81dac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   81db0:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81db4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   81db6:	f012 0f40 	tst.w	r2, #64	; 0x40
		port->PIO_CODR = mask;
   81dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81dbe:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81dc2:	f04f 0140 	mov.w	r1, #64	; 0x40
   81dc6:	bf14      	ite	ne
   81dc8:	6359      	strne	r1, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81dca:	6319      	streq	r1, [r3, #48]	; 0x30
   81dcc:	e033      	b.n	81e36 <led_activity_routine+0x2ee>
			{
				ioport_toggle_pin_level(OUT_CH3_LED2_GPIO);
			}
			else if(ch3_out_color == BLUE)
   81dce:	2902      	cmp	r1, #2
   81dd0:	d177      	bne.n	81ec2 <led_activity_routine+0x37a>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81dd2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   81dd6:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81dda:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   81ddc:	f412 7f80 	tst.w	r2, #256	; 0x100
		port->PIO_CODR = mask;
   81de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81de4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81de8:	f44f 7180 	mov.w	r1, #256	; 0x100
   81dec:	bf14      	ite	ne
   81dee:	6359      	strne	r1, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81df0:	6319      	streq	r1, [r3, #48]	; 0x30
   81df2:	e020      	b.n	81e36 <led_activity_routine+0x2ee>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81df4:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   81df8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81dfc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   81e00:	6319      	str	r1, [r3, #48]	; 0x30
   81e02:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   81e06:	6318      	str	r0, [r3, #48]	; 0x30
   81e08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   81e0c:	631a      	str	r2, [r3, #48]	; 0x30
	else
	{
		ioport_set_pin_level(IN_CH3_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
		ioport_set_pin_level(IN_CH3_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
		ioport_set_pin_level(IN_CH3_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);
		if(is_qma_set_to_ttlin == TRUE)
   81e0e:	f240 033a 	movw	r3, #58	; 0x3a
   81e12:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81e16:	8819      	ldrh	r1, [r3, #0]
   81e18:	2901      	cmp	r1, #1
   81e1a:	d10c      	bne.n	81e36 <led_activity_routine+0x2ee>
   81e1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   81e20:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81e24:	f04f 0280 	mov.w	r2, #128	; 0x80
   81e28:	6302      	str	r2, [r0, #48]	; 0x30
   81e2a:	f04f 0340 	mov.w	r3, #64	; 0x40
   81e2e:	6303      	str	r3, [r0, #48]	; 0x30
   81e30:	f44f 7180 	mov.w	r1, #256	; 0x100
   81e34:	6301      	str	r1, [r0, #48]	; 0x30
			ioport_set_pin_level(OUT_CH3_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
			ioport_set_pin_level(OUT_CH3_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
			ioport_set_pin_level(OUT_CH3_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);
		}
	}
	if(is_qma_set_to_ttlin == FALSE)
   81e36:	f240 003a 	movw	r0, #58	; 0x3a
   81e3a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81e3e:	8802      	ldrh	r2, [r0, #0]
   81e40:	2a00      	cmp	r2, #0
   81e42:	d13e      	bne.n	81ec2 <led_activity_routine+0x37a>
	{
		if(is_freq_gen_enabled == TRUE)
   81e44:	f240 0336 	movw	r3, #54	; 0x36
   81e48:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81e4c:	8819      	ldrh	r1, [r3, #0]
   81e4e:	2901      	cmp	r1, #1
   81e50:	d12a      	bne.n	81ea8 <led_activity_routine+0x360>
		{
			if(ch3_out_color == GREEN)
   81e52:	f240 0030 	movw	r0, #48	; 0x30
   81e56:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81e5a:	8802      	ldrh	r2, [r0, #0]
   81e5c:	2a03      	cmp	r2, #3
   81e5e:	d110      	bne.n	81e82 <led_activity_routine+0x33a>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81e64:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81e68:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   81e6a:	f011 0f40 	tst.w	r1, #64	; 0x40
		port->PIO_CODR = mask;
   81e6e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   81e72:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81e76:	f04f 0240 	mov.w	r2, #64	; 0x40
   81e7a:	bf14      	ite	ne
   81e7c:	6342      	strne	r2, [r0, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81e7e:	6302      	streq	r2, [r0, #48]	; 0x30
   81e80:	bd08      	pop	{r3, pc}
			{
				ioport_toggle_pin_level(OUT_CH3_LED2_GPIO);
			}
			else if(ch3_out_color == BLUE)
   81e82:	2a02      	cmp	r2, #2
   81e84:	d11d      	bne.n	81ec2 <led_activity_routine+0x37a>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81e8a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81e8e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   81e90:	f411 7f80 	tst.w	r1, #256	; 0x100
		port->PIO_CODR = mask;
   81e94:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   81e98:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81e9c:	f44f 7280 	mov.w	r2, #256	; 0x100
   81ea0:	bf14      	ite	ne
   81ea2:	6342      	strne	r2, [r0, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81ea4:	6302      	streq	r2, [r0, #48]	; 0x30
   81ea6:	bd08      	pop	{r3, pc}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81ea8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   81eac:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81eb0:	f04f 0280 	mov.w	r2, #128	; 0x80
   81eb4:	6302      	str	r2, [r0, #48]	; 0x30
   81eb6:	f04f 0340 	mov.w	r3, #64	; 0x40
   81eba:	6303      	str	r3, [r0, #48]	; 0x30
   81ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
   81ec0:	6301      	str	r1, [r0, #48]	; 0x30
   81ec2:	bd08      	pop	{r3, pc}

00081ec4 <set_out_to_ttl_in>:
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81ec8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81ecc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   81ed0:	635a      	str	r2, [r3, #52]	; 0x34

// Set QMA out to the TTL IN
void set_out_to_ttl_in(void)
{
	ioport_set_pin_level(MUX_SEL_GPIO, IOPORT_PIN_LEVEL_LOW);
	is_qma_set_to_ttlin = TRUE;
   81ed2:	f240 003a 	movw	r0, #58	; 0x3a
   81ed6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81eda:	f04f 0101 	mov.w	r1, #1
   81ede:	8001      	strh	r1, [r0, #0]
   81ee0:	4770      	bx	lr
   81ee2:	bf00      	nop

00081ee4 <set_out_to_uc>:
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81ee8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81eec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   81ef0:	631a      	str	r2, [r3, #48]	; 0x30

// Set QMA out to the microcontroller
void set_out_to_uc(void)
{
	ioport_set_pin_level(MUX_SEL_GPIO, IOPORT_PIN_LEVEL_HIGH);
	is_qma_set_to_ttlin = FALSE;
   81ef2:	f240 003a 	movw	r0, #58	; 0x3a
   81ef6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81efa:	f04f 0100 	mov.w	r1, #0
   81efe:	8001      	strh	r1, [r0, #0]
   81f00:	4770      	bx	lr
   81f02:	bf00      	nop

00081f04 <is_qma_out_set_to_ttl>:

// Is QMA out set to ttlin?
uint16_t is_qma_out_set_to_ttl(void)
{
	return is_qma_set_to_ttlin;
}
   81f04:	f240 033a 	movw	r3, #58	; 0x3a
   81f08:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81f0c:	8818      	ldrh	r0, [r3, #0]
   81f0e:	4770      	bx	lr

00081f10 <RTC_Handler>:

/**
 * \brief Interrupt handler for the RTC, for second interrupt. Here we get the counters values
 */
void RTC_Handler(void)
{
   81f10:	b510      	push	{r4, lr}
	uint32_t ul_status = rtc_get_status(RTC);
   81f12:	f44f 50d3 	mov.w	r0, #6752	; 0x1a60
   81f16:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81f1a:	f245 732d 	movw	r3, #22317	; 0x572d
   81f1e:	f2c0 0308 	movt	r3, #8
   81f22:	4798      	blx	r3

	/* Second increment interrupt */
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) 
   81f24:	f010 0f04 	tst.w	r0, #4
   81f28:	d020      	beq.n	81f6c <RTC_Handler+0x5c>
	{
		/* Disable RTC interrupt */
		rtc_disable_interrupt(RTC, RTC_IDR_SECDIS);
   81f2a:	f44f 54d3 	mov.w	r4, #6752	; 0x1a60
   81f2e:	f2c4 040e 	movt	r4, #16398	; 0x400e
   81f32:	4620      	mov	r0, r4
   81f34:	f04f 0104 	mov.w	r1, #4
   81f38:	f245 7229 	movw	r2, #22313	; 0x5729
   81f3c:	f2c0 0208 	movt	r2, #8
   81f40:	4790      	blx	r2
		set_second_flag();
   81f42:	f24a 20e1 	movw	r0, #41697	; 0xa2e1
   81f46:	f2c0 0008 	movt	r0, #8
   81f4a:	4780      	blx	r0
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
   81f4c:	4620      	mov	r0, r4
   81f4e:	f04f 0104 	mov.w	r1, #4
   81f52:	f245 7331 	movw	r3, #22321	; 0x5731
   81f56:	f2c0 0308 	movt	r3, #8
   81f5a:	4798      	blx	r3
		rtc_enable_interrupt(RTC, RTC_IER_SECEN);
   81f5c:	4620      	mov	r0, r4
   81f5e:	f04f 0104 	mov.w	r1, #4
   81f62:	f245 7225 	movw	r2, #22309	; 0x5725
   81f66:	f2c0 0208 	movt	r2, #8
   81f6a:	4790      	blx	r2
   81f6c:	bd10      	pop	{r4, pc}
   81f6e:	bf00      	nop

00081f70 <TC0_Handler>:

/**
 * \brief TC0,0 compare interrupt
 */
void TC0_Handler(void)
{
   81f70:	b530      	push	{r4, r5, lr}
   81f72:	b083      	sub	sp, #12
	volatile uint32_t temp_uint32t, temp_uint32t2;
	
	tc_get_status(TC0, 0);
   81f74:	f04f 0400 	mov.w	r4, #0
   81f78:	f2c4 0408 	movt	r4, #16392	; 0x4008
   81f7c:	4620      	mov	r0, r4
   81f7e:	f04f 0100 	mov.w	r1, #0
   81f82:	f241 7389 	movw	r3, #6025	; 0x1789
   81f86:	f2c0 0308 	movt	r3, #8
   81f8a:	4798      	blx	r3
	set_integrator_timer_flag();
   81f8c:	f24a 20f1 	movw	r0, #41713	; 0xa2f1
   81f90:	f2c0 0008 	movt	r0, #8
   81f94:	4780      	blx	r0
	
	temp_uint32t = tc_read_cv(TC1, 2);
   81f96:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   81f9a:	f2c4 0008 	movt	r0, #16392	; 0x4008
   81f9e:	f04f 0102 	mov.w	r1, #2
   81fa2:	f241 7569 	movw	r5, #5993	; 0x1769
   81fa6:	f2c0 0508 	movt	r5, #8
   81faa:	47a8      	blx	r5
   81fac:	9001      	str	r0, [sp, #4]
	temp_uint32t2 = tc_read_cv(TC0, 1);
   81fae:	4620      	mov	r0, r4
   81fb0:	f04f 0101 	mov.w	r1, #1
   81fb4:	47a8      	blx	r5
   81fb6:	9000      	str	r0, [sp, #0]
		
	if(tc0_overflow > 0)
   81fb8:	f241 61e0 	movw	r1, #5856	; 0x16e0
   81fbc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81fc0:	680a      	ldr	r2, [r1, #0]
   81fc2:	b1ba      	cbz	r2, 81ff4 <TC0_Handler+0x84>
		tc0_counter_v = tc0_overflow + last_counter0_val + temp_uint32t + 1;
   81fc4:	f241 63e0 	movw	r3, #5856	; 0x16e0
   81fc8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81fcc:	6819      	ldr	r1, [r3, #0]
   81fce:	f640 3218 	movw	r2, #2840	; 0xb18
   81fd2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81fd6:	6810      	ldr	r0, [r2, #0]
   81fd8:	9b01      	ldr	r3, [sp, #4]
   81fda:	1809      	adds	r1, r1, r0
   81fdc:	f101 0101 	add.w	r1, r1, #1
   81fe0:	18ca      	adds	r2, r1, r3
   81fe2:	f04f 0300 	mov.w	r3, #0
   81fe6:	f241 60d8 	movw	r0, #5848	; 0x16d8
   81fea:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81fee:	e9c0 2300 	strd	r2, r3, [r0]
   81ff2:	e00e      	b.n	82012 <TC0_Handler+0xa2>
	else
		tc0_counter_v  = temp_uint32t - last_counter0_val;
   81ff4:	9801      	ldr	r0, [sp, #4]
   81ff6:	f640 3318 	movw	r3, #2840	; 0xb18
   81ffa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81ffe:	6819      	ldr	r1, [r3, #0]
   82000:	1a42      	subs	r2, r0, r1
   82002:	f04f 0300 	mov.w	r3, #0
   82006:	f241 60d8 	movw	r0, #5848	; 0x16d8
   8200a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8200e:	e9c0 2300 	strd	r2, r3, [r0]
		
	if(tc1_overflow > 0)
   82012:	f241 63e4 	movw	r3, #5860	; 0x16e4
   82016:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8201a:	6819      	ldr	r1, [r3, #0]
   8201c:	b1c1      	cbz	r1, 82050 <TC0_Handler+0xe0>
		tc1_counter_v = tc1_overflow + last_counter1_val + temp_uint32t2 + 1;
   8201e:	f241 62e4 	movw	r2, #5860	; 0x16e4
   82022:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82026:	6811      	ldr	r1, [r2, #0]
   82028:	f640 3330 	movw	r3, #2864	; 0xb30
   8202c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82030:	6818      	ldr	r0, [r3, #0]
   82032:	9a00      	ldr	r2, [sp, #0]
   82034:	1809      	adds	r1, r1, r0
   82036:	f101 0101 	add.w	r1, r1, #1
   8203a:	188b      	adds	r3, r1, r2
   8203c:	461a      	mov	r2, r3
   8203e:	f04f 0300 	mov.w	r3, #0
   82042:	f241 60e8 	movw	r0, #5864	; 0x16e8
   82046:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8204a:	e9c0 2300 	strd	r2, r3, [r0]
   8204e:	e00f      	b.n	82070 <TC0_Handler+0x100>
	else
		tc1_counter_v  = temp_uint32t2 - last_counter1_val;
   82050:	9a00      	ldr	r2, [sp, #0]
   82052:	f640 3030 	movw	r0, #2864	; 0xb30
   82056:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8205a:	6803      	ldr	r3, [r0, #0]
   8205c:	1ad1      	subs	r1, r2, r3
   8205e:	460a      	mov	r2, r1
   82060:	f04f 0300 	mov.w	r3, #0
   82064:	f241 60e8 	movw	r0, #5864	; 0x16e8
   82068:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8206c:	e9c0 2300 	strd	r2, r3, [r0]
		
	last_counter0_val = temp_uint32t;
   82070:	9a01      	ldr	r2, [sp, #4]
   82072:	f640 3118 	movw	r1, #2840	; 0xb18
   82076:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8207a:	600a      	str	r2, [r1, #0]
	last_counter1_val = temp_uint32t2;
   8207c:	9800      	ldr	r0, [sp, #0]
   8207e:	f640 3330 	movw	r3, #2864	; 0xb30
   82082:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82086:	6018      	str	r0, [r3, #0]
	tc0_overflow = 0;
   82088:	f04f 0100 	mov.w	r1, #0
   8208c:	f241 62e0 	movw	r2, #5856	; 0x16e0
   82090:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82094:	6011      	str	r1, [r2, #0]
	tc1_overflow = 0;
   82096:	f241 60e4 	movw	r0, #5860	; 0x16e4
   8209a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8209e:	6001      	str	r1, [r0, #0]
}
   820a0:	b003      	add	sp, #12
   820a2:	bd30      	pop	{r4, r5, pc}

000820a4 <TC1_Handler>:

/**
 * \brief TC0,1 timer interrupt
 */
void TC1_Handler(void)
{
   820a4:	b508      	push	{r3, lr}
	tc_get_status(TC0, 1);
   820a6:	f04f 0000 	mov.w	r0, #0
   820aa:	f2c4 0008 	movt	r0, #16392	; 0x4008
   820ae:	f04f 0101 	mov.w	r1, #1
   820b2:	f241 7389 	movw	r3, #6025	; 0x1789
   820b6:	f2c0 0308 	movt	r3, #8
   820ba:	4798      	blx	r3
	tc1_overflow = 0xFFFFFFFF - last_counter1_val;
   820bc:	f640 3030 	movw	r0, #2864	; 0xb30
   820c0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   820c4:	6801      	ldr	r1, [r0, #0]
   820c6:	ea6f 0301 	mvn.w	r3, r1
   820ca:	f241 62e4 	movw	r2, #5860	; 0x16e4
   820ce:	f2c2 0207 	movt	r2, #8199	; 0x2007
   820d2:	6013      	str	r3, [r2, #0]
	last_counter1_val = 0;
   820d4:	f04f 0100 	mov.w	r1, #0
   820d8:	6001      	str	r1, [r0, #0]
   820da:	bd08      	pop	{r3, pc}

000820dc <TC5_Handler>:

/**
 * \brief TC1,2 overflow interrupt
 */
void TC5_Handler(void)
{
   820dc:	b508      	push	{r3, lr}
	tc_get_status(TC1, 2);
   820de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   820e2:	f2c4 0008 	movt	r0, #16392	; 0x4008
   820e6:	f04f 0102 	mov.w	r1, #2
   820ea:	f241 7389 	movw	r3, #6025	; 0x1789
   820ee:	f2c0 0308 	movt	r3, #8
   820f2:	4798      	blx	r3
	tc0_overflow = 0xFFFFFFFF - last_counter0_val;
   820f4:	f640 3018 	movw	r0, #2840	; 0xb18
   820f8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   820fc:	6801      	ldr	r1, [r0, #0]
   820fe:	ea6f 0301 	mvn.w	r3, r1
   82102:	f241 62e0 	movw	r2, #5856	; 0x16e0
   82106:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8210a:	6013      	str	r3, [r2, #0]
	last_counter0_val = 0;
   8210c:	f04f 0100 	mov.w	r1, #0
   82110:	6001      	str	r1, [r0, #0]
   82112:	bd08      	pop	{r3, pc}

00082114 <TC2_Handler>:

/**
 * \brief TC0,2 timer interrupt (for leds)
 */
void TC2_Handler(void)
{
   82114:	b508      	push	{r3, lr}
	tc_get_status(TC0, 2);
   82116:	f04f 0000 	mov.w	r0, #0
   8211a:	f2c4 0008 	movt	r0, #16392	; 0x4008
   8211e:	f04f 0102 	mov.w	r1, #2
   82122:	f241 7389 	movw	r3, #6025	; 0x1789
   82126:	f2c0 0308 	movt	r3, #8
   8212a:	4798      	blx	r3
	led_activity_routine();
   8212c:	f641 3049 	movw	r0, #6985	; 0x1b49
   82130:	f2c0 0008 	movt	r0, #8
   82134:	4780      	blx	r0
   82136:	bd08      	pop	{r3, pc}

00082138 <get_counter0_value>:
/**
 * \brief Get counter0 value, updated every second
 */
uint64_t get_counter0_value(void)
{
	return tc0_counter_v;
   82138:	f241 63d8 	movw	r3, #5848	; 0x16d8
   8213c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82140:	e9d3 2300 	ldrd	r2, r3, [r3]
}
   82144:	4610      	mov	r0, r2
   82146:	4619      	mov	r1, r3
   82148:	4770      	bx	lr
   8214a:	bf00      	nop

0008214c <get_counter1_value>:
/**
 * \brief Get counter1 value, updated every second
 */
uint64_t get_counter1_value(void)
{
	return tc1_counter_v;
   8214c:	f241 63e8 	movw	r3, #5864	; 0x16e8
   82150:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82154:	e9d3 2300 	ldrd	r2, r3, [r3]
}
   82158:	4610      	mov	r0, r2
   8215a:	4619      	mov	r1, r3
   8215c:	4770      	bx	lr
   8215e:	bf00      	nop

00082160 <configure_rtc>:

/**
 * \brief	Setup the RTC for second interrupts
 */
void configure_rtc(void)
{
   82160:	b510      	push	{r4, lr}
	/* Default RTC configuration, 24-hour mode using external XTAL */
	rtc_set_hour_mode(RTC, 0);
   82162:	f44f 54d3 	mov.w	r4, #6752	; 0x1a60
   82166:	f2c4 040e 	movt	r4, #16398	; 0x400e
   8216a:	4620      	mov	r0, r4
   8216c:	f04f 0100 	mov.w	r1, #0
   82170:	f245 730d 	movw	r3, #22285	; 0x570d
   82174:	f2c0 0308 	movt	r3, #8
   82178:	4798      	blx	r3
	supc_switch_sclk_to_32kxtal(SUPC, 0);
   8217a:	f641 2010 	movw	r0, #6672	; 0x1a10
   8217e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   82182:	f04f 0100 	mov.w	r1, #0
   82186:	f241 720d 	movw	r2, #5901	; 0x170d
   8218a:	f2c0 0208 	movt	r2, #8
   8218e:	4790      	blx	r2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   82190:	f44f 4061 	mov.w	r0, #57600	; 0xe100
   82194:	f2ce 0000 	movt	r0, #57344	; 0xe000
   82198:	f04f 0104 	mov.w	r1, #4
   8219c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   821a0:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   821a4:	6001      	str	r1, [r0, #0]
	/* Configure RTC second interrupt */
	NVIC_DisableIRQ(RTC_IRQn);
	NVIC_ClearPendingIRQ(RTC_IRQn);
	//NVIC_SetPriority(RTC_IRQn, 0);
	NVIC_EnableIRQ(RTC_IRQn);
	rtc_enable_interrupt(RTC, RTC_IER_SECEN);
   821a6:	4620      	mov	r0, r4
   821a8:	f245 7325 	movw	r3, #22309	; 0x5725
   821ac:	f2c0 0308 	movt	r3, #8
   821b0:	4798      	blx	r3
   821b2:	bd10      	pop	{r4, pc}

000821b4 <enable_countera>:

/**
 * \brief	Enable counter A
 */
void enable_countera(void)
{
   821b4:	b510      	push	{r4, lr}
	if(is_countera_enabled == FALSE)
   821b6:	f640 3328 	movw	r3, #2856	; 0xb28
   821ba:	f2c2 0307 	movt	r3, #8199	; 0x2007
   821be:	8818      	ldrh	r0, [r3, #0]
   821c0:	2800      	cmp	r0, #0
   821c2:	d13e      	bne.n	82242 <enable_countera+0x8e>
	{
		// INPUT1 TCLK5, TC1 channel 1 > XC2, enable counter overflow interrupt
		pmc_enable_periph_clk(ID_TC5);
   821c4:	f04f 0020 	mov.w	r0, #32
   821c8:	f647 6129 	movw	r1, #32297	; 0x7e29
   821cc:	f2c0 0108 	movt	r1, #8
   821d0:	4788      	blx	r1
		tc_init(TC1, 2, (TC_CMR_TCCLKS_XC2|TC_CMR_WAVE));
   821d2:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   821d6:	f2c4 0408 	movt	r4, #16392	; 0x4008
   821da:	4620      	mov	r0, r4
   821dc:	f04f 0102 	mov.w	r1, #2
   821e0:	f248 0207 	movw	r2, #32775	; 0x8007
   821e4:	f241 732d 	movw	r3, #5933	; 0x172d
   821e8:	f2c0 0308 	movt	r3, #8
   821ec:	4798      	blx	r3
		tc_set_block_mode(TC1, TC_BMR_TC2XC2S_TCLK2);
   821ee:	4620      	mov	r0, r4
   821f0:	f04f 0100 	mov.w	r1, #0
   821f4:	f241 7249 	movw	r2, #5961	; 0x1749
   821f8:	f2c0 0208 	movt	r2, #8
   821fc:	4790      	blx	r2
		tc_enable_interrupt(TC1, 2, TC_IER_COVFS);
   821fe:	4620      	mov	r0, r4
   82200:	f04f 0102 	mov.w	r1, #2
   82204:	f04f 0201 	mov.w	r2, #1
   82208:	f241 7381 	movw	r3, #6017	; 0x1781
   8220c:	f2c0 0308 	movt	r3, #8
   82210:	4798      	blx	r3
		tc_start(TC1, 2);
   82212:	4620      	mov	r0, r4
   82214:	f04f 0102 	mov.w	r1, #2
   82218:	f241 7251 	movw	r2, #5969	; 0x1751
   8221c:	f2c0 0208 	movt	r2, #8
   82220:	4790      	blx	r2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   82222:	f44f 4061 	mov.w	r0, #57600	; 0xe100
   82226:	f2ce 0000 	movt	r0, #57344	; 0xe000
   8222a:	f04f 0101 	mov.w	r1, #1
   8222e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   82232:	f8c0 1184 	str.w	r1, [r0, #388]	; 0x184

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82236:	6041      	str	r1, [r0, #4]
		NVIC_DisableIRQ(TC5_IRQn);
		NVIC_ClearPendingIRQ(TC5_IRQn);
		//NVIC_SetPriority(TC5_IRQn, 0);
		NVIC_EnableIRQ(TC5_IRQn);
		is_countera_enabled = TRUE;		
   82238:	f640 3328 	movw	r3, #2856	; 0xb28
   8223c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82240:	8019      	strh	r1, [r3, #0]
   82242:	bd10      	pop	{r4, pc}

00082244 <enable_counterb>:

/**
 * \brief	Enable counter B
 */
void enable_counterb(void)
{
   82244:	b510      	push	{r4, lr}
	if(is_counterb_enabled == FALSE)
   82246:	f640 332a 	movw	r3, #2858	; 0xb2a
   8224a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8224e:	8818      	ldrh	r0, [r3, #0]
   82250:	2800      	cmp	r0, #0
   82252:	d13f      	bne.n	822d4 <enable_counterb+0x90>
	{
		// INPUT2 TCLK1, TC0 channel 2 > XC1, enable counter overflow interrupt
		pmc_enable_periph_clk(ID_TC1);
   82254:	f04f 001c 	mov.w	r0, #28
   82258:	f647 6129 	movw	r1, #32297	; 0x7e29
   8225c:	f2c0 0108 	movt	r1, #8
   82260:	4788      	blx	r1
		tc_init(TC0, 1, (TC_CMR_TCCLKS_XC1|TC_CMR_WAVE));
   82262:	f04f 0400 	mov.w	r4, #0
   82266:	f2c4 0408 	movt	r4, #16392	; 0x4008
   8226a:	4620      	mov	r0, r4
   8226c:	f04f 0101 	mov.w	r1, #1
   82270:	f248 0206 	movw	r2, #32774	; 0x8006
   82274:	f241 732d 	movw	r3, #5933	; 0x172d
   82278:	f2c0 0308 	movt	r3, #8
   8227c:	4798      	blx	r3
		tc_set_block_mode(TC0, TC_BMR_TC1XC1S_TCLK1);
   8227e:	4620      	mov	r0, r4
   82280:	f04f 0100 	mov.w	r1, #0
   82284:	f241 7249 	movw	r2, #5961	; 0x1749
   82288:	f2c0 0208 	movt	r2, #8
   8228c:	4790      	blx	r2
		tc_enable_interrupt(TC0, 1, TC_IER_COVFS);
   8228e:	4620      	mov	r0, r4
   82290:	f04f 0101 	mov.w	r1, #1
   82294:	460a      	mov	r2, r1
   82296:	f241 7381 	movw	r3, #6017	; 0x1781
   8229a:	f2c0 0308 	movt	r3, #8
   8229e:	4798      	blx	r3
		tc_start(TC0, 1);
   822a0:	4620      	mov	r0, r4
   822a2:	f04f 0101 	mov.w	r1, #1
   822a6:	f241 7251 	movw	r2, #5969	; 0x1751
   822aa:	f2c0 0208 	movt	r2, #8
   822ae:	4790      	blx	r2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   822b0:	f44f 4061 	mov.w	r0, #57600	; 0xe100
   822b4:	f2ce 0000 	movt	r0, #57344	; 0xe000
   822b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   822bc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   822c0:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   822c4:	6001      	str	r1, [r0, #0]
		NVIC_DisableIRQ(TC1_IRQn);
		NVIC_ClearPendingIRQ(TC1_IRQn);
		//NVIC_SetPriority(TC1_IRQn, 0);
		NVIC_EnableIRQ(TC1_IRQn);	
		is_counterb_enabled = TRUE;
   822c6:	f640 332a 	movw	r3, #2858	; 0xb2a
   822ca:	f2c2 0307 	movt	r3, #8199	; 0x2007
   822ce:	f04f 0201 	mov.w	r2, #1
   822d2:	801a      	strh	r2, [r3, #0]
   822d4:	bd10      	pop	{r4, pc}
   822d6:	bf00      	nop

000822d8 <enable_counters>:

/**
 * \brief	Enable counters
 */
void enable_counters(void)
{
   822d8:	b508      	push	{r3, lr}
	enable_countera();
   822da:	f242 13b5 	movw	r3, #8629	; 0x21b5
   822de:	f2c0 0308 	movt	r3, #8
   822e2:	4798      	blx	r3
	enable_counterb();
   822e4:	f242 2045 	movw	r0, #8773	; 0x2245
   822e8:	f2c0 0008 	movt	r0, #8
   822ec:	4780      	blx	r0
   822ee:	bd08      	pop	{r3, pc}

000822f0 <disable_countera>:

/**
 * \brief	Disable counter A
 */
void disable_countera(void)
{
   822f0:	b508      	push	{r3, lr}
	tc_stop(TC1, 2);
   822f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   822f6:	f2c4 0008 	movt	r0, #16392	; 0x4008
   822fa:	f04f 0102 	mov.w	r1, #2
   822fe:	f241 735d 	movw	r3, #5981	; 0x175d
   82302:	f2c0 0308 	movt	r3, #8
   82306:	4798      	blx	r3
	is_countera_enabled = FALSE;
   82308:	f640 3028 	movw	r0, #2856	; 0xb28
   8230c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82310:	f04f 0200 	mov.w	r2, #0
   82314:	8002      	strh	r2, [r0, #0]
   82316:	bd08      	pop	{r3, pc}

00082318 <disable_counterb>:

/**
 * \brief	Disable counter B
 */
void disable_counterb(void)
{
   82318:	b508      	push	{r3, lr}
	tc_stop(TC0, 1);
   8231a:	f04f 0000 	mov.w	r0, #0
   8231e:	f2c4 0008 	movt	r0, #16392	; 0x4008
   82322:	f04f 0101 	mov.w	r1, #1
   82326:	f241 735d 	movw	r3, #5981	; 0x175d
   8232a:	f2c0 0308 	movt	r3, #8
   8232e:	4798      	blx	r3
	is_counterb_enabled = FALSE;
   82330:	f640 302a 	movw	r0, #2858	; 0xb2a
   82334:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82338:	f04f 0200 	mov.w	r2, #0
   8233c:	8002      	strh	r2, [r0, #0]
   8233e:	bd08      	pop	{r3, pc}

00082340 <disable_counters>:

/**
 * \brief	Disable counters
 */
void disable_counters(void)
{
   82340:	b508      	push	{r3, lr}
	disable_countera();
   82342:	f242 23f1 	movw	r3, #8945	; 0x22f1
   82346:	f2c0 0308 	movt	r3, #8
   8234a:	4798      	blx	r3
	disable_counterb();
   8234c:	f242 3019 	movw	r0, #8985	; 0x2319
   82350:	f2c0 0008 	movt	r0, #8
   82354:	4780      	blx	r0
   82356:	bd08      	pop	{r3, pc}

00082358 <get_countera_en_status>:
 * \brief	Is counter a enabled?
 */
uint16_t get_countera_en_status(void)
{
	return is_countera_enabled;
}
   82358:	f640 3328 	movw	r3, #2856	; 0xb28
   8235c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82360:	8818      	ldrh	r0, [r3, #0]
   82362:	4770      	bx	lr

00082364 <get_counterb_en_status>:
 * \brief	Is counter b enabled?
 */
uint16_t get_counterb_en_status(void)
{
	return is_counterb_enabled;
}
   82364:	f640 332a 	movw	r3, #2858	; 0xb2a
   82368:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8236c:	8818      	ldrh	r0, [r3, #0]
   8236e:	4770      	bx	lr

00082370 <get_freqgen_freq>:

// Get current frequency
uint32_t get_freqgen_freq(void)
{
	return current_gen_freq;
}
   82370:	f240 033c 	movw	r3, #60	; 0x3c
   82374:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82378:	6818      	ldr	r0, [r3, #0]
   8237a:	4770      	bx	lr

0008237c <init_module_peripherals_ap>:

// Here should be all the initialization functions for the module after 12v power
void init_module_peripherals_ap(void)
{
   8237c:	4770      	bx	lr
   8237e:	bf00      	nop

00082380 <deinit_module_peripherals>:
	
}

// Here should be all the deinitialization functions for the module before 12v power removal
void deinit_module_peripherals(void)
{
   82380:	4770      	bx	lr
   82382:	bf00      	nop

00082384 <get_freqgen_enable>:
}

uint16_t get_freqgen_enable(void)
{
	return is_freq_gen_enabled;
}
   82384:	f240 0336 	movw	r3, #54	; 0x36
   82388:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8238c:	8818      	ldrh	r0, [r3, #0]
   8238e:	4770      	bx	lr

00082390 <disable_freq_gen>:

void disable_freq_gen(void)
{
	is_freq_gen_enabled = FALSE;
   82390:	f240 0336 	movw	r3, #54	; 0x36
   82394:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82398:	f04f 0200 	mov.w	r2, #0
   8239c:	801a      	strh	r2, [r3, #0]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   8239e:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   823a2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   823a6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   823aa:	6603      	str	r3, [r0, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   823ac:	6543      	str	r3, [r0, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   823ae:	6243      	str	r3, [r0, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   823b0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   823b4:	6f01      	ldr	r1, [r0, #112]	; 0x70
   823b6:	f021 5200 	bic.w	r2, r1, #536870912	; 0x20000000
   823ba:	6702      	str	r2, [r0, #112]	; 0x70
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   823bc:	6103      	str	r3, [r0, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   823be:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   823c2:	6003      	str	r3, [r0, #0]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   823c4:	6343      	str	r3, [r0, #52]	; 0x34
   823c6:	4770      	bx	lr

000823c8 <enable_freq_gen>:
	ioport_enable_pin(MUX_IN_GPIO);
	ioport_set_pin_level(MUX_IN_GPIO, IOPORT_PIN_LEVEL_LOW);
}

void enable_freq_gen(void)
{
   823c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   823ca:	b085      	sub	sp, #20
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   823cc:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   823d0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   823d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   823d8:	661a      	str	r2, [r3, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   823da:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   823dc:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   823de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   823e2:	6f19      	ldr	r1, [r3, #112]	; 0x70
   823e4:	4311      	orrs	r1, r2
   823e6:	6719      	str	r1, [r3, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   823e8:	605a      	str	r2, [r3, #4]
	
	ioport_set_pin_mode(MUX_IN_GPIO, MUX_IN_FLAGS);
	ioport_disable_pin(MUX_IN_GPIO);
	
	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC7);
   823ea:	f04f 0022 	mov.w	r0, #34	; 0x22
   823ee:	f647 6429 	movw	r4, #32297	; 0x7e29
   823f2:	f2c0 0408 	movt	r4, #8
   823f6:	47a0      	blx	r4
	/* Configure TC for a TC_FREQ frequency and trigger on RC compare. */
	tc_stop(TC2, 1);
   823f8:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   823fc:	f2c4 0408 	movt	r4, #16392	; 0x4008
   82400:	4620      	mov	r0, r4
   82402:	f04f 0101 	mov.w	r1, #1
   82406:	f241 755d 	movw	r5, #5981	; 0x175d
   8240a:	f2c0 0508 	movt	r5, #8
   8240e:	47a8      	blx	r5
	tc_find_mck_divisor(current_gen_freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
   82410:	f240 063c 	movw	r6, #60	; 0x3c
   82414:	f2c2 0607 	movt	r6, #8199	; 0x2007
   82418:	6830      	ldr	r0, [r6, #0]
   8241a:	f44f 453d 	mov.w	r5, #48384	; 0xbd00
   8241e:	f2c0 5501 	movt	r5, #1281	; 0x501
   82422:	9500      	str	r5, [sp, #0]
   82424:	4629      	mov	r1, r5
   82426:	aa03      	add	r2, sp, #12
   82428:	ab02      	add	r3, sp, #8
   8242a:	f241 7791 	movw	r7, #6033	; 0x1791
   8242e:	f2c0 0708 	movt	r7, #8
   82432:	47b8      	blx	r7
	tc_init(TC2, 1, ul_tcclks | TC_CMR_WAVSEL_UP_RC | TC_CMR_WAVE | TC_CMR_BCPB_CLEAR | TC_CMR_BCPC_SET | TC_CMR_EEVT_XC0);
   82434:	9802      	ldr	r0, [sp, #8]
   82436:	f040 63c0 	orr.w	r3, r0, #100663296	; 0x6000000
   8243a:	4620      	mov	r0, r4
   8243c:	f04f 0101 	mov.w	r1, #1
   82440:	f443 4244 	orr.w	r2, r3, #50176	; 0xc400
   82444:	f241 732d 	movw	r3, #5933	; 0x172d
   82448:	f2c0 0308 	movt	r3, #8
   8244c:	4798      	blx	r3
	tc_write_rb(TC2, 1, 2);
   8244e:	4620      	mov	r0, r4
   82450:	f04f 0101 	mov.w	r1, #1
   82454:	f04f 0202 	mov.w	r2, #2
   82458:	f241 7371 	movw	r3, #6001	; 0x1771
   8245c:	f2c0 0308 	movt	r3, #8
   82460:	4798      	blx	r3
	tc_write_rc(TC2, 1, (ul_sysclk / ul_div) / current_gen_freq);
   82462:	9a03      	ldr	r2, [sp, #12]
   82464:	fbb5 f2f2 	udiv	r2, r5, r2
   82468:	6833      	ldr	r3, [r6, #0]
   8246a:	4620      	mov	r0, r4
   8246c:	f04f 0101 	mov.w	r1, #1
   82470:	fbb2 f2f3 	udiv	r2, r2, r3
   82474:	f241 7379 	movw	r3, #6009	; 0x1779
   82478:	f2c0 0308 	movt	r3, #8
   8247c:	4798      	blx	r3
	/* Configure and enable interrupt on RC compare. */
	tc_start(TC2, 1);
   8247e:	4620      	mov	r0, r4
   82480:	f04f 0101 	mov.w	r1, #1
   82484:	f241 7251 	movw	r2, #5969	; 0x1751
   82488:	f2c0 0208 	movt	r2, #8
   8248c:	4790      	blx	r2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   8248e:	f44f 4161 	mov.w	r1, #57600	; 0xe100
   82492:	f2ce 0100 	movt	r1, #57344	; 0xe000
   82496:	f04f 0004 	mov.w	r0, #4
   8249a:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8249e:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
	NVIC_DisableIRQ(TC7_IRQn);
	NVIC_ClearPendingIRQ(TC7_IRQn);

	is_freq_gen_enabled = TRUE;
   824a2:	f240 0336 	movw	r3, #54	; 0x36
   824a6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   824aa:	f04f 0201 	mov.w	r2, #1
   824ae:	801a      	strh	r2, [r3, #0]
}
   824b0:	b005      	add	sp, #20
   824b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000824b4 <setup_freqgen_freq>:
	}
}

// Setup frequency
void setup_freqgen_freq(uint32_t frequency)
{
   824b4:	b508      	push	{r3, lr}
	current_gen_freq = frequency;	
   824b6:	f240 033c 	movw	r3, #60	; 0x3c
   824ba:	f2c2 0307 	movt	r3, #8199	; 0x2007
   824be:	6018      	str	r0, [r3, #0]
	enable_freq_gen();
   824c0:	f242 30c9 	movw	r0, #9161	; 0x23c9
   824c4:	f2c0 0008 	movt	r0, #8
   824c8:	4780      	blx	r0
   824ca:	bd08      	pop	{r3, pc}

000824cc <init_module_peripherals_bp>:
	return is_counterb_enabled;
}

// Here should be all the initialization functions for the module before 12v power
void init_module_peripherals_bp(void)
{	
   824cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   824d0:	b085      	sub	sp, #20
	// Initialize RTC
	configure_rtc();
   824d2:	f242 1361 	movw	r3, #8545	; 0x2161
   824d6:	f2c0 0308 	movt	r3, #8
   824da:	4798      	blx	r3
	
	// MUX
	pmc_enable_periph_clk(MUX_IN_PIO_ID);
   824dc:	f04f 000d 	mov.w	r0, #13
   824e0:	f647 6429 	movw	r4, #32297	; 0x7e29
   824e4:	f2c0 0408 	movt	r4, #8
   824e8:	47a0      	blx	r4
   824ea:	f44f 5680 	mov.w	r6, #4096	; 0x1000
   824ee:	f2c4 060e 	movt	r6, #16398	; 0x400e
   824f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   824f6:	6070      	str	r0, [r6, #4]
	ioport_disable_pin(PIO_PB14_IDX);
	pmc_enable_periph_clk(MUX_SEL_PIO_ID);
   824f8:	f04f 000c 	mov.w	r0, #12
   824fc:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   824fe:	f44f 0880 	mov.w	r8, #4194304	; 0x400000
   82502:	f8c6 8010 	str.w	r8, [r6, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82506:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8250a:	f8c6 8034 	str.w	r8, [r6, #52]	; 0x34
	ioport_set_pin_dir(MUX_SEL_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(MUX_SEL_GPIO, IOPORT_PIN_LEVEL_LOW);
	
	// INPUTS RELATED
	pmc_enable_periph_clk(TTL_D_NRESET_PIO_ID);
   8250e:	f04f 000b 	mov.w	r0, #11
   82512:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82514:	f44f 6760 	mov.w	r7, #3584	; 0xe00
   82518:	f2c4 070e 	movt	r7, #16398	; 0x400e
   8251c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   82520:	6139      	str	r1, [r7, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82522:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82526:	6339      	str	r1, [r7, #48]	; 0x30
	ioport_set_pin_dir(TTL_D_NRESET_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(TTL_D_NRESET_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(TTL_IN_PIO_ID);
   82528:	f04f 000d 	mov.w	r0, #13
   8252c:	47a0      	blx	r4
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8252e:	f44f 5590 	mov.w	r5, #4608	; 0x1200
   82532:	f2c4 050e 	movt	r5, #16398	; 0x400e
   82536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8253a:	616a      	str	r2, [r5, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8253c:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
	ioport_set_pin_dir(TTL_IN_GPIO, IOPORT_DIR_INPUT);
	
	// LEDS
	pmc_enable_periph_clk(OUT_CH3_LED1_PIO_ID);
   82540:	f04f 000c 	mov.w	r0, #12
   82544:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82546:	f04f 0980 	mov.w	r9, #128	; 0x80
   8254a:	f8c6 9010 	str.w	r9, [r6, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8254e:	f8c6 90a0 	str.w	r9, [r6, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82552:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
	ioport_set_pin_dir(OUT_CH3_LED1_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(OUT_CH3_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(OUT_CH3_LED2_PIO_ID);
   82556:	f04f 000c 	mov.w	r0, #12
   8255a:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8255c:	f04f 0340 	mov.w	r3, #64	; 0x40
   82560:	6133      	str	r3, [r6, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82562:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82566:	6333      	str	r3, [r6, #48]	; 0x30
	ioport_set_pin_dir(OUT_CH3_LED2_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(OUT_CH3_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(OUT_CH3_LED3_PIO_ID);
   82568:	f04f 000c 	mov.w	r0, #12
   8256c:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8256e:	f44f 7080 	mov.w	r0, #256	; 0x100
   82572:	6130      	str	r0, [r6, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82574:	f8c6 00a0 	str.w	r0, [r6, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82578:	6330      	str	r0, [r6, #48]	; 0x30
	ioport_set_pin_dir(OUT_CH3_LED3_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(OUT_CH3_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);
	
	pmc_enable_periph_clk(IN_CH1_LED1_PIO_ID);
   8257a:	f04f 000d 	mov.w	r0, #13
   8257e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82580:	f04f 0120 	mov.w	r1, #32
   82584:	6129      	str	r1, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82586:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8258a:	6329      	str	r1, [r5, #48]	; 0x30
	ioport_set_pin_dir(IN_CH1_LED1_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH1_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(IN_CH1_LED2_PIO_ID);
   8258c:	f04f 000d 	mov.w	r0, #13
   82590:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82592:	f8c5 9010 	str.w	r9, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82596:	f8c5 90a0 	str.w	r9, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8259a:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
	ioport_set_pin_dir(IN_CH1_LED2_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH1_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(IN_CH1_LED3_PIO_ID);
   8259e:	f04f 000d 	mov.w	r0, #13
   825a2:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   825a4:	f44f 7200 	mov.w	r2, #512	; 0x200
   825a8:	612a      	str	r2, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   825aa:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   825ae:	632a      	str	r2, [r5, #48]	; 0x30
	ioport_set_pin_dir(IN_CH1_LED3_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH1_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);
	
	pmc_enable_periph_clk(IN_CH2_LED1_PIO_ID);
   825b0:	f04f 000d 	mov.w	r0, #13
   825b4:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   825b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   825ba:	612b      	str	r3, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   825bc:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   825c0:	632b      	str	r3, [r5, #48]	; 0x30
	ioport_set_pin_dir(IN_CH2_LED1_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH2_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(IN_CH2_LED2_PIO_ID);
   825c2:	f04f 000d 	mov.w	r0, #13
   825c6:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   825c8:	f8c5 8010 	str.w	r8, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   825cc:	f8c5 80a0 	str.w	r8, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   825d0:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
	ioport_set_pin_dir(IN_CH2_LED2_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH2_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(IN_CH2_LED3_PIO_ID);
   825d4:	f04f 000d 	mov.w	r0, #13
   825d8:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   825da:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   825de:	6128      	str	r0, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   825e0:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   825e4:	6328      	str	r0, [r5, #48]	; 0x30
	ioport_set_pin_dir(IN_CH2_LED3_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH2_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);
	
	pmc_enable_periph_clk(IN_CH3_LED1_PIO_ID);
   825e6:	f04f 000d 	mov.w	r0, #13
   825ea:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   825ec:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   825f0:	6129      	str	r1, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   825f2:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   825f6:	6329      	str	r1, [r5, #48]	; 0x30
	ioport_set_pin_dir(IN_CH3_LED1_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH3_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(IN_CH3_LED2_PIO_ID);
   825f8:	f04f 000d 	mov.w	r0, #13
   825fc:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   825fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   82602:	612a      	str	r2, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82604:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82608:	632a      	str	r2, [r5, #48]	; 0x30
	ioport_set_pin_dir(IN_CH3_LED2_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH3_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(IN_CH3_LED3_PIO_ID);
   8260a:	f04f 000d 	mov.w	r0, #13
   8260e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82610:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   82614:	612b      	str	r3, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82616:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8261a:	632b      	str	r3, [r5, #48]	; 0x30
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   8261c:	f04f 0810 	mov.w	r8, #16
   82620:	f8c7 8060 	str.w	r8, [r7, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   82624:	f8c7 8054 	str.w	r8, [r7, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   82628:	f8c7 8024 	str.w	r8, [r7, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   8262c:	f8c7 8080 	str.w	r8, [r7, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   82630:	6f38      	ldr	r0, [r7, #112]	; 0x70
   82632:	f020 0110 	bic.w	r1, r0, #16
   82636:	6739      	str	r1, [r7, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   82638:	f8c7 8004 	str.w	r8, [r7, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   8263c:	f44f 3780 	mov.w	r7, #65536	; 0x10000
   82640:	6637      	str	r7, [r6, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   82642:	6577      	str	r7, [r6, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   82644:	6277      	str	r7, [r6, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   82646:	f8c6 7080 	str.w	r7, [r6, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   8264a:	6f32      	ldr	r2, [r6, #112]	; 0x70
   8264c:	f422 3380 	bic.w	r3, r2, #65536	; 0x10000
   82650:	6733      	str	r3, [r6, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   82652:	6077      	str	r7, [r6, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   82654:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   82658:	662f      	str	r7, [r5, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   8265a:	656f      	str	r7, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   8265c:	626f      	str	r7, [r5, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   8265e:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   82662:	6f2e      	ldr	r6, [r5, #112]	; 0x70
   82664:	433e      	orrs	r6, r7
   82666:	672e      	str	r6, [r5, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   82668:	606f      	str	r7, [r5, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   8266a:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   8266e:	662e      	str	r6, [r5, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   82670:	656e      	str	r6, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   82672:	626e      	str	r6, [r5, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   82674:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   82678:	6f28      	ldr	r0, [r5, #112]	; 0x70
   8267a:	4330      	orrs	r0, r6
   8267c:	6728      	str	r0, [r5, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   8267e:	606e      	str	r6, [r5, #4]
	ioport_set_pin_mode(MHZ_10_IN_GPIO, MHZ_10_IN_FLAGS);
	ioport_disable_pin(MHZ_10_IN_GPIO);
	
	// Init 250ms interrupt, clocked by the external 10MHz		
	// TCLK0, TC0 channel 0 > XC0, enable compare interrupt
	pmc_enable_periph_clk(ID_TC0);
   82680:	f04f 001b 	mov.w	r0, #27
   82684:	47a0      	blx	r4
	tc_init(TC0, 0, (TC_CMR_TCCLKS_XC0|TC_CMR_WAVE|TC_CMR_CPCTRG));
   82686:	f04f 0500 	mov.w	r5, #0
   8268a:	f2c4 0508 	movt	r5, #16392	; 0x4008
   8268e:	4628      	mov	r0, r5
   82690:	f04f 0100 	mov.w	r1, #0
   82694:	f24c 0205 	movw	r2, #49157	; 0xc005
   82698:	f241 7b2d 	movw	fp, #5933	; 0x172d
   8269c:	f2c0 0b08 	movt	fp, #8
   826a0:	47d8      	blx	fp
	tc_write_rc(TC0, 0, (10000000/4));
   826a2:	4628      	mov	r0, r5
   826a4:	f04f 0100 	mov.w	r1, #0
   826a8:	f242 52a0 	movw	r2, #9632	; 0x25a0
   826ac:	f2c0 0226 	movt	r2, #38	; 0x26
   826b0:	f241 7a79 	movw	sl, #6009	; 0x1779
   826b4:	f2c0 0a08 	movt	sl, #8
   826b8:	47d0      	blx	sl
	tc_set_block_mode(TC0, TC_BMR_TC0XC0S_TCLK0);
   826ba:	4628      	mov	r0, r5
   826bc:	f04f 0100 	mov.w	r1, #0
   826c0:	f241 7249 	movw	r2, #5961	; 0x1749
   826c4:	f2c0 0208 	movt	r2, #8
   826c8:	4790      	blx	r2
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
   826ca:	4628      	mov	r0, r5
   826cc:	f04f 0100 	mov.w	r1, #0
   826d0:	4642      	mov	r2, r8
   826d2:	f241 7381 	movw	r3, #6017	; 0x1781
   826d6:	f2c0 0308 	movt	r3, #8
   826da:	4798      	blx	r3
	tc_start(TC0, 0);
   826dc:	4628      	mov	r0, r5
   826de:	f04f 0100 	mov.w	r1, #0
   826e2:	f241 7251 	movw	r2, #5969	; 0x1751
   826e6:	f2c0 0208 	movt	r2, #8
   826ea:	4790      	blx	r2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   826ec:	f44f 4961 	mov.w	r9, #57600	; 0xe100
   826f0:	f2ce 0900 	movt	r9, #57344	; 0xe000
   826f4:	f8c9 7080 	str.w	r7, [r9, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   826f8:	f8c9 7180 	str.w	r7, [r9, #384]	; 0x180

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   826fc:	f8c9 7000 	str.w	r7, [r9]
	uint32_t ul_div;
	uint32_t ul_tcclks;
	/* Get system clock. */
	uint32_t ul_sysclk = sysclk_get_cpu_hz();
	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC2);
   82700:	f04f 001d 	mov.w	r0, #29
   82704:	47a0      	blx	r4
	/* Configure TC for a TC_FREQ frequency and trigger on RC compare. */
	tc_find_mck_divisor(20, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
   82706:	f44f 443d 	mov.w	r4, #48384	; 0xbd00
   8270a:	f2c0 5401 	movt	r4, #1281	; 0x501
   8270e:	9400      	str	r4, [sp, #0]
   82710:	f04f 0014 	mov.w	r0, #20
   82714:	4621      	mov	r1, r4
   82716:	aa03      	add	r2, sp, #12
   82718:	ab02      	add	r3, sp, #8
   8271a:	f241 7791 	movw	r7, #6033	; 0x1791
   8271e:	f2c0 0708 	movt	r7, #8
   82722:	47b8      	blx	r7
	tc_init(TC0, 2, ul_tcclks | TC_CMR_CPCTRG);
   82724:	4628      	mov	r0, r5
   82726:	f04f 0102 	mov.w	r1, #2
   8272a:	9b02      	ldr	r3, [sp, #8]
   8272c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
   82730:	47d8      	blx	fp
	tc_write_rc(TC0, 2, (ul_sysclk / ul_div) / 20);
   82732:	9903      	ldr	r1, [sp, #12]
   82734:	fbb4 f4f1 	udiv	r4, r4, r1
   82738:	f64c 40cd 	movw	r0, #52429	; 0xcccd
   8273c:	f6cc 40cc 	movt	r0, #52428	; 0xcccc
   82740:	fba0 1204 	umull	r1, r2, r0, r4
   82744:	4628      	mov	r0, r5
   82746:	f04f 0102 	mov.w	r1, #2
   8274a:	ea4f 1212 	mov.w	r2, r2, lsr #4
   8274e:	47d0      	blx	sl
	/* Configure and enable interrupt on RC compare. */
	tc_start(TC0, 2);
   82750:	4628      	mov	r0, r5
   82752:	f04f 0102 	mov.w	r1, #2
   82756:	f241 7351 	movw	r3, #5969	; 0x1751
   8275a:	f2c0 0308 	movt	r3, #8
   8275e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   82760:	f8c9 6080 	str.w	r6, [r9, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   82764:	f8c9 6180 	str.w	r6, [r9, #384]	; 0x180

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82768:	f8c9 6000 	str.w	r6, [r9]
	NVIC_DisableIRQ(TC2_IRQn);
	NVIC_ClearPendingIRQ(TC2_IRQn);
	//NVIC_SetPriority(TC2_IRQn, 0);
	NVIC_EnableIRQ((IRQn_Type)ID_TC2);
	tc_enable_interrupt(TC0, 2, TC_IER_CPCS);	
   8276c:	4628      	mov	r0, r5
   8276e:	f04f 0102 	mov.w	r1, #2
   82772:	4642      	mov	r2, r8
   82774:	f241 7381 	movw	r3, #6017	; 0x1781
   82778:	f2c0 0308 	movt	r3, #8
   8277c:	4798      	blx	r3
	
	if (is_freq_gen_enabled == TRUE)
   8277e:	f240 0136 	movw	r1, #54	; 0x36
   82782:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82786:	8808      	ldrh	r0, [r1, #0]
   82788:	2801      	cmp	r0, #1
   8278a:	d104      	bne.n	82796 <init_module_peripherals_bp+0x2ca>
	{
		enable_freq_gen();
   8278c:	f242 32c9 	movw	r2, #9161	; 0x23c9
   82790:	f2c0 0208 	movt	r2, #8
   82794:	4790      	blx	r2
	}
}
   82796:	b005      	add	sp, #20
   82798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008279c <generate_pulse>:
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8279c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   827a0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   827a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   827a8:	631a      	str	r2, [r3, #48]	; 0x30
}

void generate_pulse(void)
{
	ioport_set_pin_level(MUX_IN_GPIO, IOPORT_PIN_LEVEL_HIGH);
	asm("NOP");asm("NOP");asm("NOP");asm("NOP");asm("NOP");
   827aa:	bf00      	nop
   827ac:	bf00      	nop
   827ae:	bf00      	nop
   827b0:	bf00      	nop
   827b2:	bf00      	nop
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   827b4:	635a      	str	r2, [r3, #52]	; 0x34
   827b6:	4770      	bx	lr

000827b8 <set_qma_out_mode>:
	ioport_set_pin_level(MUX_IN_GPIO, IOPORT_PIN_LEVEL_LOW);	
}

void set_qma_out_mode(uint16_t mode)
{
   827b8:	b508      	push	{r3, lr}
	qma_out_mode = mode;
   827ba:	f640 331c 	movw	r3, #2844	; 0xb1c
   827be:	f2c2 0307 	movt	r3, #8199	; 0x2007
   827c2:	8018      	strh	r0, [r3, #0]
	qma_out_state = 0;
   827c4:	f640 311e 	movw	r1, #2846	; 0xb1e
   827c8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   827cc:	f04f 0200 	mov.w	r2, #0
   827d0:	800a      	strh	r2, [r1, #0]
	
	if (mode == MODE_IN)
   827d2:	b928      	cbnz	r0, 827e0 <set_qma_out_mode+0x28>
	{
		set_out_to_ttl_in();
   827d4:	f641 60c5 	movw	r0, #7877	; 0x1ec5
   827d8:	f2c0 0008 	movt	r0, #8
   827dc:	4780      	blx	r0
   827de:	bd08      	pop	{r3, pc}
	}
	else if (mode == MODE_GEN)
   827e0:	2801      	cmp	r0, #1
   827e2:	d10a      	bne.n	827fa <set_qma_out_mode+0x42>
	{
		set_out_to_uc();
   827e4:	f641 61e5 	movw	r1, #7909	; 0x1ee5
   827e8:	f2c0 0108 	movt	r1, #8
   827ec:	4788      	blx	r1
		enable_freq_gen();
   827ee:	f242 32c9 	movw	r2, #9161	; 0x23c9
   827f2:	f2c0 0208 	movt	r2, #8
   827f6:	4790      	blx	r2
   827f8:	bd08      	pop	{r3, pc}
	}
	else
	{
		set_out_to_uc();
   827fa:	f641 60e5 	movw	r0, #7909	; 0x1ee5
   827fe:	f2c0 0008 	movt	r0, #8
   82802:	4780      	blx	r0
		disable_freq_gen();
   82804:	f242 3391 	movw	r3, #9105	; 0x2391
   82808:	f2c0 0308 	movt	r3, #8
   8280c:	4798      	blx	r3
   8280e:	bd08      	pop	{r3, pc}

00082810 <get_qma_out_mode>:
}

uint16_t get_qma_out_mode(void)
{
	return qma_out_mode;
}
   82810:	f640 331c 	movw	r3, #2844	; 0xb1c
   82814:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82818:	8818      	ldrh	r0, [r3, #0]
   8281a:	4770      	bx	lr

0008281c <set_qma_state>:

void set_qma_state(uint16_t state)
{
	if (qma_out_mode == MODE_STATE)
   8281c:	f640 331c 	movw	r3, #2844	; 0xb1c
   82820:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82824:	8819      	ldrh	r1, [r3, #0]
   82826:	2902      	cmp	r1, #2
   82828:	d114      	bne.n	82854 <set_qma_state+0x38>
	{
		qma_out_state = state;
   8282a:	f640 321e 	movw	r2, #2846	; 0xb1e
   8282e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82832:	8010      	strh	r0, [r2, #0]
		if (state == 0)
   82834:	b938      	cbnz	r0, 82846 <set_qma_state+0x2a>
   82836:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   8283a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8283e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82842:	634a      	str	r2, [r1, #52]	; 0x34
   82844:	4770      	bx	lr
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82846:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   8284a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8284e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   82852:	6303      	str	r3, [r0, #48]	; 0x30
   82854:	4770      	bx	lr
   82856:	bf00      	nop

00082858 <get_qma_state>:
}

uint16_t get_qma_state(void)
{
	return qma_out_state;
   82858:	f640 331e 	movw	r3, #2846	; 0xb1e
   8285c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82860:	8818      	ldrh	r0, [r3, #0]
   82862:	4770      	bx	lr

00082864 <init_i2c>:
twi_options_t i2c_options;
twi_packet_t i2c_packet;


void init_i2c(void)
{	
   82864:	b538      	push	{r3, r4, r5, lr}
	i2c_options.master_clk = sysclk_get_cpu_hz();
   82866:	f241 64f0 	movw	r4, #5872	; 0x16f0
   8286a:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8286e:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
   82872:	f2c0 5301 	movt	r3, #1281	; 0x501
   82876:	6023      	str	r3, [r4, #0]
	i2c_options.speed = 400000;
   82878:	f44f 50d4 	mov.w	r0, #6784	; 0x1a80
   8287c:	f2c0 0006 	movt	r0, #6
   82880:	6060      	str	r0, [r4, #4]
	i2c_options.chip = EEPROM_ADDR;
   82882:	f04f 0150 	mov.w	r1, #80	; 0x50
   82886:	7221      	strb	r1, [r4, #8]
	i2c_options.smbus = 0;
   82888:	f04f 0200 	mov.w	r2, #0
   8288c:	7262      	strb	r2, [r4, #9]
	twi_enable_master_mode(TWI0);
   8288e:	f44f 4540 	mov.w	r5, #49152	; 0xc000
   82892:	f2c4 0508 	movt	r5, #16392	; 0x4008
   82896:	4628      	mov	r0, r5
   82898:	f641 0379 	movw	r3, #6265	; 0x1879
   8289c:	f2c0 0308 	movt	r3, #8
   828a0:	4798      	blx	r3
	twi_master_init(TWI0, &i2c_options);	
   828a2:	4628      	mov	r0, r5
   828a4:	4621      	mov	r1, r4
   828a6:	f641 1239 	movw	r2, #6457	; 0x1939
   828aa:	f2c0 0208 	movt	r2, #8
   828ae:	4790      	blx	r2
   828b0:	bd38      	pop	{r3, r4, r5, pc}
   828b2:	bf00      	nop

000828b4 <init_pwm>:
	while(twi_probe(TWI0, EEPROM_ADDR) != TWI_SUCCESS);
	return (RET_TYPE)twi_master_read(TWI0, &i2c_packet);
}

void init_pwm(void)
{
   828b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   828b8:	b085      	sub	sp, #20
	/* Enable PWM peripheral clock */
	pmc_enable_periph_clk(ID_PWM);
   828ba:	f04f 0024 	mov.w	r0, #36	; 0x24
   828be:	f647 6329 	movw	r3, #32297	; 0x7e29
   828c2:	f2c0 0308 	movt	r3, #8
   828c6:	4798      	blx	r3

	/* Disable PWM channels for LEDs */
	pwm_channel_disable(PWM, PIN_LED1_CHANNEL);
   828c8:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   828cc:	f2c4 0409 	movt	r4, #16393	; 0x4009
   828d0:	4620      	mov	r0, r4
   828d2:	f04f 0101 	mov.w	r1, #1
   828d6:	f241 65e9 	movw	r5, #5865	; 0x16e9
   828da:	f2c0 0508 	movt	r5, #8
   828de:	47a8      	blx	r5
	pwm_channel_disable(PWM, PIN_LED2_CHANNEL);
   828e0:	4620      	mov	r0, r4
   828e2:	f04f 0103 	mov.w	r1, #3
   828e6:	47a8      	blx	r5
	pwm_channel_disable(PWM, PIN_LED3_CHANNEL);
   828e8:	4620      	mov	r0, r4
   828ea:	f04f 0102 	mov.w	r1, #2
   828ee:	47a8      	blx	r5

	/* Set PWM clock A as LED_PWM_FREQUENCY*PERIOD_VALUE */
	pwm_clock_t clock_setting = {
   828f0:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
   828f4:	9001      	str	r0, [sp, #4]
   828f6:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
   828fa:	f2c0 5101 	movt	r1, #1281	; 0x501
   828fe:	9102      	str	r1, [sp, #8]
   82900:	9103      	str	r1, [sp, #12]
		.ul_clka = LED_PWM_FREQUENCY * LED_PWM_PERIOD_VALUE,
		.ul_clkb = sysclk_get_cpu_hz(),
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &clock_setting);
   82902:	4620      	mov	r0, r4
   82904:	a901      	add	r1, sp, #4
   82906:	f241 5241 	movw	r2, #5441	; 0x1541
   8290a:	f2c0 0208 	movt	r2, #8
   8290e:	4790      	blx	r2

	/* Initialize PWM channel for LED1 */
	/* Period is left-aligned */
	g_pwm_channel_led1.alignment = PWM_ALIGN_LEFT;
   82910:	f241 7110 	movw	r1, #5904	; 0x1710
   82914:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82918:	f04f 0500 	mov.w	r5, #0
   8291c:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a low level */
	g_pwm_channel_led1.polarity = PWM_HIGH;
   8291e:	f04f 0601 	mov.w	r6, #1
   82922:	728e      	strb	r6, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led1.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82924:	f04f 0b0b 	mov.w	fp, #11
   82928:	f8c1 b004 	str.w	fp, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led1.ul_period = LED_PWM_PERIOD_VALUE;
   8292c:	f44f 6a80 	mov.w	sl, #1024	; 0x400
   82930:	f8c1 a010 	str.w	sl, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led1.ul_duty = LED_INIT_DUTY_VALUE;
   82934:	60cd      	str	r5, [r1, #12]
	g_pwm_channel_led1.channel = PIN_LED1_CHANNEL;
   82936:	600e      	str	r6, [r1, #0]
	pwm_channel_init(PWM, &g_pwm_channel_led1);
   82938:	4620      	mov	r0, r4
   8293a:	f241 598d 	movw	r9, #5517	; 0x158d
   8293e:	f2c0 0908 	movt	r9, #8
   82942:	47c8      	blx	r9

	/* Enable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_LED1_CHANNEL, 0);
   82944:	4620      	mov	r0, r4
   82946:	4631      	mov	r1, r6
   82948:	462a      	mov	r2, r5
   8294a:	f241 68f5 	movw	r8, #5877	; 0x16f5
   8294e:	f2c0 0808 	movt	r8, #8
   82952:	47c0      	blx	r8
	//pwm_channel_enable_interrupt(PWM, PIN_LED1_CHANNEL, 0);

	/* Initialize PWM channel for LED2 */
	/* Period is center-aligned */
	g_pwm_channel_led2.alignment = PWM_ALIGN_LEFT;
   82954:	f241 7160 	movw	r1, #5984	; 0x1760
   82958:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8295c:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led2.polarity = PWM_HIGH;
   8295e:	728e      	strb	r6, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led2.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82960:	f8c1 b004 	str.w	fp, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led2.ul_period = LED_PWM_PERIOD_VALUE;
   82964:	f8c1 a010 	str.w	sl, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led2.ul_duty = LED_INIT_DUTY_VALUE;
   82968:	60cd      	str	r5, [r1, #12]
	g_pwm_channel_led2.channel = PIN_LED2_CHANNEL;
   8296a:	f04f 0703 	mov.w	r7, #3
   8296e:	600f      	str	r7, [r1, #0]
	pwm_channel_init(PWM, &g_pwm_channel_led2);
   82970:	4620      	mov	r0, r4
   82972:	47c8      	blx	r9

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_LED2_CHANNEL, 0);
   82974:	4620      	mov	r0, r4
   82976:	4639      	mov	r1, r7
   82978:	462a      	mov	r2, r5
   8297a:	47c0      	blx	r8

	/* Initialize PWM channel for LED3 */
	/* Period is center-aligned */
	g_pwm_channel_led3.alignment = PWM_ALIGN_LEFT;
   8297c:	f241 7338 	movw	r3, #5944	; 0x1738
   82980:	4619      	mov	r1, r3
   82982:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82986:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led3.polarity = PWM_LOW;
   82988:	f04f 0000 	mov.w	r0, #0
   8298c:	7288      	strb	r0, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led3.ul_prescaler = PWM_CMR_CPRE_CLKA;
   8298e:	f8c1 b004 	str.w	fp, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led3.ul_period = LED_PWM_PERIOD_VALUE;
   82992:	f8c1 a010 	str.w	sl, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led3.ul_duty = LED_INIT_DUTY_VALUE;
   82996:	60cd      	str	r5, [r1, #12]
	g_pwm_channel_led3.channel = PIN_LED3_CHANNEL;
   82998:	f04f 0a02 	mov.w	sl, #2
   8299c:	f8c1 a000 	str.w	sl, [r1]
	pwm_channel_init(PWM, &g_pwm_channel_led3);
   829a0:	4620      	mov	r0, r4
   829a2:	47c8      	blx	r9

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_LED3_CHANNEL, 0);
   829a4:	4620      	mov	r0, r4
   829a6:	4651      	mov	r1, sl
   829a8:	462a      	mov	r2, r5
   829aa:	47c0      	blx	r8
	
	/* Enable PWM channels for LEDs */
	pwm_channel_enable(PWM, PIN_LED1_CHANNEL);
   829ac:	4620      	mov	r0, r4
   829ae:	4631      	mov	r1, r6
   829b0:	f241 65dd 	movw	r5, #5853	; 0x16dd
   829b4:	f2c0 0508 	movt	r5, #8
   829b8:	47a8      	blx	r5
	pwm_channel_enable(PWM, PIN_LED2_CHANNEL);
   829ba:	4620      	mov	r0, r4
   829bc:	4639      	mov	r1, r7
   829be:	47a8      	blx	r5
	pwm_channel_enable(PWM, PIN_LED3_CHANNEL);
   829c0:	4620      	mov	r0, r4
   829c2:	4651      	mov	r1, sl
   829c4:	47a8      	blx	r5
}
   829c6:	b005      	add	sp, #20
   829c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000829cc <set_user_led_colour>:

// Set user led colour
void set_user_led_colour(uint16_t red_val, uint16_t green_val, uint16_t blue_val)
{
   829cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   829ce:	4603      	mov	r3, r0
   829d0:	460e      	mov	r6, r1
   829d2:	4617      	mov	r7, r2
	pwm_channel_update_duty(PWM, &g_pwm_channel_led1, red_val);
   829d4:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   829d8:	f2c4 0409 	movt	r4, #16393	; 0x4009
   829dc:	4620      	mov	r0, r4
   829de:	f241 7110 	movw	r1, #5904	; 0x1710
   829e2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   829e6:	461a      	mov	r2, r3
   829e8:	f241 65b9 	movw	r5, #5817	; 0x16b9
   829ec:	f2c0 0508 	movt	r5, #8
   829f0:	47a8      	blx	r5
	pwm_channel_update_duty(PWM, &g_pwm_channel_led2, blue_val);
   829f2:	4620      	mov	r0, r4
   829f4:	f241 7160 	movw	r1, #5984	; 0x1760
   829f8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   829fc:	463a      	mov	r2, r7
   829fe:	47a8      	blx	r5
	pwm_channel_update_duty(PWM, &g_pwm_channel_led3, green_val);
   82a00:	4620      	mov	r0, r4
   82a02:	f241 7138 	movw	r1, #5944	; 0x1738
   82a06:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82a0a:	4632      	mov	r2, r6
   82a0c:	47a8      	blx	r5
   82a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00082a10 <get_user_button_status>:
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   82a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82a14:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82a18:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
}

// To see if the user pressed the front panel button
RET_TYPE get_user_button_status(void)
{
	if(ioport_get_pin_level(GPIO_USR_BUTTON))
   82a1a:	f480 0100 	eor.w	r1, r0, #8388608	; 0x800000
		return RETURN_NOK;
	else
		return RETURN_OK;
}
   82a1e:	f3c1 50c0 	ubfx	r0, r1, #23, #1
   82a22:	4770      	bx	lr

00082a24 <get_ok_12v_status>:
   82a24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   82a28:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82a2c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
{
	if(ioport_get_pin_level(GPIO_OK_12V))
		return RETURN_OK;
	else
		return RETURN_NOK;
}
   82a2e:	f3c0 2000 	ubfx	r0, r0, #8, #1
   82a32:	4770      	bx	lr

00082a34 <enable_12v>:
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82a34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   82a38:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
   82a40:	631a      	str	r2, [r3, #48]	; 0x30
   82a42:	4770      	bx	lr

00082a44 <disable_12v>:
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82a44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   82a48:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
   82a50:	635a      	str	r2, [r3, #52]	; 0x34
   82a52:	4770      	bx	lr

00082a54 <SCPI_ErrorInit>:
/* basic FIFO */
static fifo_t local_error_queue;



void SCPI_ErrorInit(scpi_t * context) {
   82a54:	b508      	push	{r3, lr}
     * // FreeRTOS
     * context->error_queue = (scpi_error_queue_t)xQueueCreate(100, sizeof(int16_t));
     */

    /* basic FIFO */
    context->error_queue = (scpi_error_queue_t)&local_error_queue;
   82a56:	f640 4344 	movw	r3, #3140	; 0xc44
   82a5a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82a5e:	62c3      	str	r3, [r0, #44]	; 0x2c
    fifo_init((fifo_t *)context->error_queue);
   82a60:	4618      	mov	r0, r3
   82a62:	f642 4185 	movw	r1, #11397	; 0x2c85
   82a66:	f2c0 0108 	movt	r1, #8
   82a6a:	4788      	blx	r1
   82a6c:	bd08      	pop	{r3, pc}
   82a6e:	bf00      	nop

00082a70 <SCPI_ErrorClear>:

/**
 * Clear error queue
 * @param context - scpi context
 */
void SCPI_ErrorClear(scpi_t * context) {
   82a70:	b508      	push	{r3, lr}
     * // FreeRTOS
     * xQueueReset((xQueueHandle)context->error_queue);
     */

    /* basic FIFO */
    fifo_clear((fifo_t *)context->error_queue);
   82a72:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   82a74:	f642 4395 	movw	r3, #11413	; 0x2c95
   82a78:	f2c0 0308 	movt	r3, #8
   82a7c:	4798      	blx	r3
   82a7e:	bd08      	pop	{r3, pc}

00082a80 <SCPI_ErrorPop>:
/**
 * Pop error from queue
 * @param context - scpi context
 * @return error number
 */
int16_t SCPI_ErrorPop(scpi_t * context) {
   82a80:	b500      	push	{lr}
   82a82:	b083      	sub	sp, #12
    int16_t result = 0;
   82a84:	a902      	add	r1, sp, #8
   82a86:	f04f 0300 	mov.w	r3, #0
   82a8a:	f821 3d02 	strh.w	r3, [r1, #-2]!
     *   result = 0;
     * }
     */

    /* basic FIFO */
    fifo_remove((fifo_t *)context->error_queue, &result);
   82a8e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   82a90:	f642 42a1 	movw	r2, #11425	; 0x2ca1
   82a94:	f2c0 0208 	movt	r2, #8
   82a98:	4790      	blx	r2

    return result;
}
   82a9a:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   82a9e:	b003      	add	sp, #12
   82aa0:	bd00      	pop	{pc}
   82aa2:	bf00      	nop

00082aa4 <SCPI_ErrorCount>:
/**
 * Return number of errors/events in the queue
 * @param context
 * @return 
 */
int32_t SCPI_ErrorCount(scpi_t * context) {
   82aa4:	b500      	push	{lr}
   82aa6:	b083      	sub	sp, #12
    int16_t result = 0;
   82aa8:	a902      	add	r1, sp, #8
   82aaa:	f04f 0300 	mov.w	r3, #0
   82aae:	f821 3d02 	strh.w	r3, [r1, #-2]!
     * // FreeRTOS
     * result = uxQueueMessagesWaiting((xQueueHandle)context->error_queue);
     */

    /* basic FIFO */
    fifo_count((fifo_t *)context->error_queue, &result);
   82ab2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   82ab4:	f642 523d 	movw	r2, #11581	; 0x2d3d
   82ab8:	f2c0 0208 	movt	r2, #8
   82abc:	4790      	blx	r2

    return result;
}
   82abe:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   82ac2:	b003      	add	sp, #12
   82ac4:	bd00      	pop	{pc}
   82ac6:	bf00      	nop

00082ac8 <SCPI_ErrorPush>:
/**
 * Push error to queue
 * @param context - scpi context
 * @param err - error number
 */
void SCPI_ErrorPush(scpi_t * context, int16_t err) {
   82ac8:	b538      	push	{r3, r4, r5, lr}
   82aca:	4605      	mov	r5, r0
   82acc:	460c      	mov	r4, r1
     * // FreeRTOS
     * xQueueSend((xQueueHandle)context->error_queue, &err, 0);
     */

    /* basic FIFO */
    fifo_add((fifo_t *)context->error_queue, err);
   82ace:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   82ad0:	f642 43e1 	movw	r3, #11489	; 0x2ce1
   82ad4:	f2c0 0308 	movt	r3, #8
   82ad8:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82ada:	f114 0f63 	cmn.w	r4, #99	; 0x63
   82ade:	da0c      	bge.n	82afa <SCPI_ErrorPush+0x32>
   82ae0:	f114 0fc7 	cmn.w	r4, #199	; 0xc7
   82ae4:	db09      	blt.n	82afa <SCPI_ErrorPush+0x32>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82ae6:	4628      	mov	r0, r5
   82ae8:	f04f 0102 	mov.w	r1, #2
   82aec:	f04f 0220 	mov.w	r2, #32
   82af0:	f642 63ed 	movw	r3, #12013	; 0x2eed
   82af4:	f2c0 0308 	movt	r3, #8
   82af8:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82afa:	f114 0fc7 	cmn.w	r4, #199	; 0xc7
   82afe:	da0c      	bge.n	82b1a <SCPI_ErrorPush+0x52>
   82b00:	f514 7f96 	cmn.w	r4, #300	; 0x12c
   82b04:	dd09      	ble.n	82b1a <SCPI_ErrorPush+0x52>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82b06:	4628      	mov	r0, r5
   82b08:	f04f 0102 	mov.w	r1, #2
   82b0c:	f04f 0210 	mov.w	r2, #16
   82b10:	f642 63ed 	movw	r3, #12013	; 0x2eed
   82b14:	f2c0 0308 	movt	r3, #8
   82b18:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82b1a:	f514 7f96 	cmn.w	r4, #300	; 0x12c
   82b1e:	dc0c      	bgt.n	82b3a <SCPI_ErrorPush+0x72>
   82b20:	f514 7fc8 	cmn.w	r4, #400	; 0x190
   82b24:	dd09      	ble.n	82b3a <SCPI_ErrorPush+0x72>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82b26:	4628      	mov	r0, r5
   82b28:	f04f 0102 	mov.w	r1, #2
   82b2c:	f04f 0208 	mov.w	r2, #8
   82b30:	f642 63ed 	movw	r3, #12013	; 0x2eed
   82b34:	f2c0 0308 	movt	r3, #8
   82b38:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82b3a:	f514 7fc8 	cmn.w	r4, #400	; 0x190
   82b3e:	dc0c      	bgt.n	82b5a <SCPI_ErrorPush+0x92>
   82b40:	f514 7ffa 	cmn.w	r4, #500	; 0x1f4
   82b44:	dd09      	ble.n	82b5a <SCPI_ErrorPush+0x92>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82b46:	4628      	mov	r0, r5
   82b48:	f04f 0102 	mov.w	r1, #2
   82b4c:	f04f 0204 	mov.w	r2, #4
   82b50:	f642 63ed 	movw	r3, #12013	; 0x2eed
   82b54:	f2c0 0308 	movt	r3, #8
   82b58:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82b5a:	f514 7ffa 	cmn.w	r4, #500	; 0x1f4
   82b5e:	dc0c      	bgt.n	82b7a <SCPI_ErrorPush+0xb2>
   82b60:	f514 7f16 	cmn.w	r4, #600	; 0x258
   82b64:	dd09      	ble.n	82b7a <SCPI_ErrorPush+0xb2>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82b66:	4628      	mov	r0, r5
   82b68:	f04f 0102 	mov.w	r1, #2
   82b6c:	f04f 0280 	mov.w	r2, #128	; 0x80
   82b70:	f642 63ed 	movw	r3, #12013	; 0x2eed
   82b74:	f2c0 0308 	movt	r3, #8
   82b78:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82b7a:	f514 7f16 	cmn.w	r4, #600	; 0x258
   82b7e:	dc0c      	bgt.n	82b9a <SCPI_ErrorPush+0xd2>
   82b80:	f514 7f2f 	cmn.w	r4, #700	; 0x2bc
   82b84:	dd09      	ble.n	82b9a <SCPI_ErrorPush+0xd2>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82b86:	4628      	mov	r0, r5
   82b88:	f04f 0102 	mov.w	r1, #2
   82b8c:	f04f 0240 	mov.w	r2, #64	; 0x40
   82b90:	f642 63ed 	movw	r3, #12013	; 0x2eed
   82b94:	f2c0 0308 	movt	r3, #8
   82b98:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82b9a:	f514 7f2f 	cmn.w	r4, #700	; 0x2bc
   82b9e:	dc0b      	bgt.n	82bb8 <SCPI_ErrorPush+0xf0>
   82ba0:	f514 7f48 	cmn.w	r4, #800	; 0x320
   82ba4:	dd08      	ble.n	82bb8 <SCPI_ErrorPush+0xf0>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82ba6:	4628      	mov	r0, r5
   82ba8:	f04f 0102 	mov.w	r1, #2
   82bac:	460a      	mov	r2, r1
   82bae:	f642 63ed 	movw	r3, #12013	; 0x2eed
   82bb2:	f2c0 0308 	movt	r3, #8
   82bb6:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82bb8:	f514 7f48 	cmn.w	r4, #800	; 0x320
   82bbc:	dc0c      	bgt.n	82bd8 <SCPI_ErrorPush+0x110>
   82bbe:	f514 7f61 	cmn.w	r4, #900	; 0x384
   82bc2:	dd09      	ble.n	82bd8 <SCPI_ErrorPush+0x110>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82bc4:	4628      	mov	r0, r5
   82bc6:	f04f 0102 	mov.w	r1, #2
   82bca:	f04f 0201 	mov.w	r2, #1
   82bce:	f642 63ed 	movw	r3, #12013	; 0x2eed
   82bd2:	f2c0 0308 	movt	r3, #8
   82bd6:	4798      	blx	r3
        }
    }

    if (context) {
   82bd8:	b155      	cbz	r5, 82bf0 <SCPI_ErrorPush+0x128>
        if (context->interface && context->interface->error) {
   82bda:	69e8      	ldr	r0, [r5, #28]
   82bdc:	b120      	cbz	r0, 82be8 <SCPI_ErrorPush+0x120>
   82bde:	6802      	ldr	r2, [r0, #0]
   82be0:	b112      	cbz	r2, 82be8 <SCPI_ErrorPush+0x120>
            context->interface->error(context, err);
   82be2:	4628      	mov	r0, r5
   82be4:	4621      	mov	r1, r4
   82be6:	4790      	blx	r2
        }

        context->cmd_error = TRUE;
   82be8:	f04f 0101 	mov.w	r1, #1
   82bec:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
   82bf0:	bd38      	pop	{r3, r4, r5, pc}
   82bf2:	bf00      	nop

00082bf4 <SCPI_ErrorTranslate>:
 * Translate error number to string
 * @param err - error number
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
    switch (err) {
   82bf4:	f110 0f6d 	cmn.w	r0, #109	; 0x6d
   82bf8:	d02b      	beq.n	82c52 <SCPI_ErrorTranslate+0x5e>
   82bfa:	dc09      	bgt.n	82c10 <SCPI_ErrorTranslate+0x1c>
   82bfc:	f110 0f83 	cmn.w	r0, #131	; 0x83
   82c00:	d02c      	beq.n	82c5c <SCPI_ErrorTranslate+0x68>
   82c02:	f110 0f71 	cmn.w	r0, #113	; 0x71
   82c06:	d01a      	beq.n	82c3e <SCPI_ErrorTranslate+0x4a>
   82c08:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
   82c0c:	d130      	bne.n	82c70 <SCPI_ErrorTranslate+0x7c>
   82c0e:	e02a      	b.n	82c66 <SCPI_ErrorTranslate+0x72>
   82c10:	f110 0f67 	cmn.w	r0, #103	; 0x67
   82c14:	d00e      	beq.n	82c34 <SCPI_ErrorTranslate+0x40>
   82c16:	dc03      	bgt.n	82c20 <SCPI_ErrorTranslate+0x2c>
   82c18:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
   82c1c:	d128      	bne.n	82c70 <SCPI_ErrorTranslate+0x7c>
   82c1e:	e013      	b.n	82c48 <SCPI_ErrorTranslate+0x54>
   82c20:	f110 0f66 	cmn.w	r0, #102	; 0x66
   82c24:	d029      	beq.n	82c7a <SCPI_ErrorTranslate+0x86>
   82c26:	2800      	cmp	r0, #0
   82c28:	d122      	bne.n	82c70 <SCPI_ErrorTranslate+0x7c>
        case 0: return "No error";
   82c2a:	f64d 10a4 	movw	r0, #55716	; 0xd9a4
   82c2e:	f2c0 0008 	movt	r0, #8
   82c32:	4770      	bx	lr
        case SCPI_ERROR_SYNTAX: return "Syntax error";
        case SCPI_ERROR_INVALID_SEPARATOR: return "Invalid separator";
   82c34:	f64d 10c0 	movw	r0, #55744	; 0xd9c0
   82c38:	f2c0 0008 	movt	r0, #8
   82c3c:	4770      	bx	lr
        case SCPI_ERROR_UNDEFINED_HEADER: return "Undefined header";
   82c3e:	f64d 10d4 	movw	r0, #55764	; 0xd9d4
   82c42:	f2c0 0008 	movt	r0, #8
   82c46:	4770      	bx	lr
        case SCPI_ERROR_PARAMETER_NOT_ALLOWED: return "Parameter not allowed";
   82c48:	f64d 10e8 	movw	r0, #55784	; 0xd9e8
   82c4c:	f2c0 0008 	movt	r0, #8
   82c50:	4770      	bx	lr
        case SCPI_ERROR_MISSING_PARAMETER: return "Missing parameter";
   82c52:	f64d 2000 	movw	r0, #55808	; 0xda00
   82c56:	f2c0 0008 	movt	r0, #8
   82c5a:	4770      	bx	lr
        case SCPI_ERROR_INVALID_SUFFIX: return "Invalid suffix";
   82c5c:	f64d 2014 	movw	r0, #55828	; 0xda14
   82c60:	f2c0 0008 	movt	r0, #8
   82c64:	4770      	bx	lr
        case SCPI_ERROR_SUFFIX_NOT_ALLOWED: return "Suffix not allowed";
   82c66:	f64d 2024 	movw	r0, #55844	; 0xda24
   82c6a:	f2c0 0008 	movt	r0, #8
   82c6e:	4770      	bx	lr
        default: return "Unknown error";
   82c70:	f64d 2038 	movw	r0, #55864	; 0xda38
   82c74:	f2c0 0008 	movt	r0, #8
   82c78:	4770      	bx	lr
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
    switch (err) {
        case 0: return "No error";
        case SCPI_ERROR_SYNTAX: return "Syntax error";
   82c7a:	f64d 10b0 	movw	r0, #55728	; 0xd9b0
   82c7e:	f2c0 0008 	movt	r0, #8
        case SCPI_ERROR_MISSING_PARAMETER: return "Missing parameter";
        case SCPI_ERROR_INVALID_SUFFIX: return "Invalid suffix";
        case SCPI_ERROR_SUFFIX_NOT_ALLOWED: return "Suffix not allowed";
        default: return "Unknown error";
    }
}
   82c82:	4770      	bx	lr

00082c84 <fifo_init>:

#include "fifo.h"

void fifo_init(fifo_t * fifo) {
    fifo->wr = 0;
   82c84:	f04f 0300 	mov.w	r3, #0
   82c88:	8003      	strh	r3, [r0, #0]
    fifo->rd = 0;
   82c8a:	8043      	strh	r3, [r0, #2]
    fifo->size = FIFO_SIZE;
   82c8c:	f04f 0110 	mov.w	r1, #16
   82c90:	8081      	strh	r1, [r0, #4]
   82c92:	4770      	bx	lr

00082c94 <fifo_clear>:
}

void fifo_clear(fifo_t * fifo) {
    fifo->wr = 0;
   82c94:	f04f 0300 	mov.w	r3, #0
   82c98:	8003      	strh	r3, [r0, #0]
    fifo->rd = 0;
   82c9a:	8043      	strh	r3, [r0, #2]
   82c9c:	4770      	bx	lr
   82c9e:	bf00      	nop

00082ca0 <fifo_remove>:
    fifo->wr = (fifo->wr + 1) % (fifo->size + 1);

    return TRUE;
}

bool_t fifo_remove(fifo_t * fifo, int16_t * value) {
   82ca0:	b410      	push	{r4}
    /* FIFO empty? */
    if (fifo->wr == fifo->rd) {
   82ca2:	8843      	ldrh	r3, [r0, #2]
   82ca4:	f9b0 4000 	ldrsh.w	r4, [r0]
   82ca8:	b21a      	sxth	r2, r3
   82caa:	4294      	cmp	r4, r2
   82cac:	d014      	beq.n	82cd8 <fifo_remove+0x38>
        return FALSE;
    }

    if(value) {
   82cae:	b119      	cbz	r1, 82cb8 <fifo_remove+0x18>
        *value = fifo->data[fifo->rd];
   82cb0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
   82cb4:	88d3      	ldrh	r3, [r2, #6]
   82cb6:	800b      	strh	r3, [r1, #0]
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size + 1);
   82cb8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   82cbc:	f102 0201 	add.w	r2, r2, #1
   82cc0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   82cc4:	f103 0301 	add.w	r3, r3, #1
   82cc8:	fb92 f1f3 	sdiv	r1, r2, r3
   82ccc:	fb03 2211 	mls	r2, r3, r1, r2
   82cd0:	8042      	strh	r2, [r0, #2]

    return TRUE;
   82cd2:	f04f 0001 	mov.w	r0, #1
   82cd6:	e001      	b.n	82cdc <fifo_remove+0x3c>
}

bool_t fifo_remove(fifo_t * fifo, int16_t * value) {
    /* FIFO empty? */
    if (fifo->wr == fifo->rd) {
        return FALSE;
   82cd8:	f04f 0000 	mov.w	r0, #0
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size + 1);

    return TRUE;
}
   82cdc:	bc10      	pop	{r4}
   82cde:	4770      	bx	lr

00082ce0 <fifo_add>:
void fifo_clear(fifo_t * fifo) {
    fifo->wr = 0;
    fifo->rd = 0;
}

bool_t fifo_add(fifo_t * fifo, int16_t value) {
   82ce0:	b538      	push	{r3, r4, r5, lr}
   82ce2:	4604      	mov	r4, r0
   82ce4:	460d      	mov	r5, r1
    /* FIFO full? */
    if (fifo->wr == ((fifo->rd + fifo->size) % (fifo->size + 1))) {
   82ce6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   82cea:	f9b0 1000 	ldrsh.w	r1, [r0]
   82cee:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   82cf2:	18d2      	adds	r2, r2, r3
   82cf4:	f103 0301 	add.w	r3, r3, #1
   82cf8:	fb92 f0f3 	sdiv	r0, r2, r3
   82cfc:	fb03 2310 	mls	r3, r3, r0, r2
   82d00:	4299      	cmp	r1, r3
   82d02:	d107      	bne.n	82d14 <fifo_add+0x34>
        fifo_remove(fifo, NULL);
   82d04:	4620      	mov	r0, r4
   82d06:	f04f 0100 	mov.w	r1, #0
   82d0a:	f642 42a1 	movw	r2, #11425	; 0x2ca1
   82d0e:	f2c0 0208 	movt	r2, #8
   82d12:	4790      	blx	r2
    }

    fifo->data[fifo->wr] = value;
   82d14:	f9b4 0000 	ldrsh.w	r0, [r4]
   82d18:	eb04 0140 	add.w	r1, r4, r0, lsl #1
   82d1c:	80cd      	strh	r5, [r1, #6]
    fifo->wr = (fifo->wr + 1) % (fifo->size + 1);
   82d1e:	f100 0001 	add.w	r0, r0, #1
   82d22:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   82d26:	f103 0301 	add.w	r3, r3, #1
   82d2a:	fb90 f2f3 	sdiv	r2, r0, r3
   82d2e:	fb03 0012 	mls	r0, r3, r2, r0
   82d32:	8020      	strh	r0, [r4, #0]

    return TRUE;
}
   82d34:	f04f 0001 	mov.w	r0, #1
   82d38:	bd38      	pop	{r3, r4, r5, pc}
   82d3a:	bf00      	nop

00082d3c <fifo_count>:

    return TRUE;
}

bool_t fifo_count(fifo_t * fifo, int16_t * value) {
    *value = fifo->wr - fifo->rd;
   82d3c:	8802      	ldrh	r2, [r0, #0]
   82d3e:	8843      	ldrh	r3, [r0, #2]
   82d40:	1ad2      	subs	r2, r2, r3
   82d42:	b292      	uxth	r2, r2
   82d44:	b293      	uxth	r3, r2
   82d46:	800b      	strh	r3, [r1, #0]
    if (*value < 0) {
   82d48:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   82d4c:	d004      	beq.n	82d58 <fifo_count+0x1c>
        *value += (fifo->size + 1);
   82d4e:	8880      	ldrh	r0, [r0, #4]
   82d50:	f100 0001 	add.w	r0, r0, #1
   82d54:	1812      	adds	r2, r2, r0
   82d56:	800a      	strh	r2, [r1, #0]
    }
    return TRUE;
}
   82d58:	f04f 0001 	mov.w	r0, #1
   82d5c:	4770      	bx	lr
   82d5e:	bf00      	nop

00082d60 <SCPI_RegGet>:
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
    if ((name < SCPI_REG_COUNT) && (context->registers != NULL)) {
   82d60:	2907      	cmp	r1, #7
   82d62:	d804      	bhi.n	82d6e <SCPI_RegGet+0xe>
   82d64:	6b03      	ldr	r3, [r0, #48]	; 0x30
   82d66:	b12b      	cbz	r3, 82d74 <SCPI_RegGet+0x14>
        return context->registers[name];
   82d68:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
   82d6c:	4770      	bx	lr
    } else {
        return 0;
   82d6e:	f04f 0000 	mov.w	r0, #0
   82d72:	4770      	bx	lr
   82d74:	f04f 0000 	mov.w	r0, #0
    }
}
   82d78:	4770      	bx	lr
   82d7a:	bf00      	nop

00082d7c <SCPI_RegClearBits>:
/**
 * Clear register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegClearBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
   82d7c:	b570      	push	{r4, r5, r6, lr}
   82d7e:	4605      	mov	r5, r0
   82d80:	460c      	mov	r4, r1
   82d82:	4616      	mov	r6, r2
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
   82d84:	f642 5361 	movw	r3, #11617	; 0x2d61
   82d88:	f2c0 0308 	movt	r3, #8
   82d8c:	4798      	blx	r3
   82d8e:	ea20 0206 	bic.w	r2, r0, r6
   82d92:	4628      	mov	r0, r5
   82d94:	4621      	mov	r1, r4
   82d96:	b292      	uxth	r2, r2
   82d98:	f642 53d9 	movw	r3, #11737	; 0x2dd9
   82d9c:	f2c0 0308 	movt	r3, #8
   82da0:	4798      	blx	r3
   82da2:	bd70      	pop	{r4, r5, r6, pc}

00082da4 <regUpdateSTB>:
 * @param context
 * @param val value of register
 * @param mask name of mask register (enable register)
 * @param stbBits bits to clear or set in STB
 */
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
   82da4:	b570      	push	{r4, r5, r6, lr}
   82da6:	4605      	mov	r5, r0
   82da8:	460e      	mov	r6, r1
   82daa:	461c      	mov	r4, r3
    if (val & SCPI_RegGet(context, mask)) {
   82dac:	4611      	mov	r1, r2
   82dae:	f642 5361 	movw	r3, #11617	; 0x2d61
   82db2:	f2c0 0308 	movt	r3, #8
   82db6:	4798      	blx	r3
   82db8:	4230      	tst	r0, r6
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
   82dba:	4628      	mov	r0, r5
   82dbc:	f04f 0100 	mov.w	r1, #0
   82dc0:	4622      	mov	r2, r4
   82dc2:	bf19      	ittee	ne
   82dc4:	f642 63ed 	movwne	r3, #12013	; 0x2eed
   82dc8:	f2c0 0308 	movtne	r3, #8
    } else {
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
   82dcc:	f642 537d 	movweq	r3, #11645	; 0x2d7d
   82dd0:	f2c0 0308 	movteq	r3, #8
   82dd4:	4798      	blx	r3
   82dd6:	bd70      	pop	{r4, r5, r6, pc}

00082dd8 <SCPI_RegSet>:
/**
 * Set register value
 * @param name - register name
 * @param val - new value
 */
void SCPI_RegSet(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t val) {
   82dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82dda:	4605      	mov	r5, r0
   82ddc:	460c      	mov	r4, r1
   82dde:	4616      	mov	r6, r2
    bool_t srq = FALSE;
    scpi_reg_val_t mask;
    scpi_reg_val_t old_val;

    if ((name >= SCPI_REG_COUNT) || (context->registers == NULL)) {
   82de0:	2907      	cmp	r1, #7
   82de2:	f200 8081 	bhi.w	82ee8 <SCPI_RegSet+0x110>
   82de6:	6b03      	ldr	r3, [r0, #48]	; 0x30
   82de8:	2b00      	cmp	r3, #0
   82dea:	d07d      	beq.n	82ee8 <SCPI_RegSet+0x110>
        return;
    }
    
    /* store old register value */
    old_val = context->registers[name];
   82dec:	f833 7011 	ldrh.w	r7, [r3, r1, lsl #1]

    /* set register value */
    context->registers[name] = val;
   82df0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

    /** @TODO: remove recutsion */
    switch (name) {
   82df4:	2907      	cmp	r1, #7
   82df6:	d857      	bhi.n	82ea8 <SCPI_RegSet+0xd0>
   82df8:	e8df f001 	tbb	[pc, r1]
   82dfc:	281d1504 	.word	0x281d1504
   82e00:	3b304e43 	.word	0x3b304e43
        case SCPI_REG_STB:
            mask = SCPI_RegGet(context, SCPI_REG_SRE);
   82e04:	f04f 0101 	mov.w	r1, #1
   82e08:	f642 5261 	movw	r2, #11617	; 0x2d61
   82e0c:	f2c0 0208 	movt	r2, #8
   82e10:	4790      	blx	r2
            mask &= ~STB_SRQ;
   82e12:	f64f 71bf 	movw	r1, #65471	; 0xffbf
   82e16:	4031      	ands	r1, r6
            if (val & mask) {
   82e18:	4201      	tst	r1, r0
   82e1a:	d052      	beq.n	82ec2 <SCPI_RegSet+0xea>
                val |= STB_SRQ;
   82e1c:	f046 0640 	orr.w	r6, r6, #64	; 0x40
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
   82e20:	42b7      	cmp	r7, r6
   82e22:	d153      	bne.n	82ecc <SCPI_RegSet+0xf4>
   82e24:	e04e      	b.n	82ec4 <SCPI_RegSet+0xec>
            } else {
                val &= ~STB_SRQ;
            }
            break;
        case SCPI_REG_SRE:
            regUpdate(context, SCPI_REG_STB);
   82e26:	f04f 0100 	mov.w	r1, #0
   82e2a:	f642 7315 	movw	r3, #12053	; 0x2f15
   82e2e:	f2c0 0308 	movt	r3, #8
   82e32:	4798      	blx	r3
            break;
   82e34:	e046      	b.n	82ec4 <SCPI_RegSet+0xec>
        case SCPI_REG_ESR:
            regUpdateSTB(context, val, SCPI_REG_ESE, STB_ESR);
   82e36:	4611      	mov	r1, r2
   82e38:	f04f 0203 	mov.w	r2, #3
   82e3c:	f04f 0320 	mov.w	r3, #32
   82e40:	f642 57a5 	movw	r7, #11685	; 0x2da5
   82e44:	f2c0 0708 	movt	r7, #8
   82e48:	47b8      	blx	r7
            break;
   82e4a:	e03b      	b.n	82ec4 <SCPI_RegSet+0xec>
        case SCPI_REG_ESE:
            regUpdate(context, SCPI_REG_ESR);
   82e4c:	f04f 0102 	mov.w	r1, #2
   82e50:	f642 7215 	movw	r2, #12053	; 0x2f15
   82e54:	f2c0 0208 	movt	r2, #8
   82e58:	4790      	blx	r2
            break;
   82e5a:	e033      	b.n	82ec4 <SCPI_RegSet+0xec>
        case SCPI_REG_QUES:
            regUpdateSTB(context, val, SCPI_REG_QUESE, STB_QES);
   82e5c:	4611      	mov	r1, r2
   82e5e:	f04f 0207 	mov.w	r2, #7
   82e62:	f04f 0308 	mov.w	r3, #8
   82e66:	f642 57a5 	movw	r7, #11685	; 0x2da5
   82e6a:	f2c0 0708 	movt	r7, #8
   82e6e:	47b8      	blx	r7
            break;
   82e70:	e028      	b.n	82ec4 <SCPI_RegSet+0xec>
        case SCPI_REG_QUESE:
            regUpdate(context, SCPI_REG_QUES);
   82e72:	f04f 0106 	mov.w	r1, #6
   82e76:	f642 7215 	movw	r2, #12053	; 0x2f15
   82e7a:	f2c0 0208 	movt	r2, #8
   82e7e:	4790      	blx	r2
            break;
   82e80:	e020      	b.n	82ec4 <SCPI_RegSet+0xec>
        case SCPI_REG_OPER:
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
   82e82:	4611      	mov	r1, r2
   82e84:	f04f 0205 	mov.w	r2, #5
   82e88:	f04f 0380 	mov.w	r3, #128	; 0x80
   82e8c:	f642 57a5 	movw	r7, #11685	; 0x2da5
   82e90:	f2c0 0708 	movt	r7, #8
   82e94:	47b8      	blx	r7
            break;
   82e96:	e015      	b.n	82ec4 <SCPI_RegSet+0xec>
        case SCPI_REG_OPERE:
            regUpdate(context, SCPI_REG_OPER);
   82e98:	f04f 0104 	mov.w	r1, #4
   82e9c:	f642 7315 	movw	r3, #12053	; 0x2f15
   82ea0:	f2c0 0308 	movt	r3, #8
   82ea4:	4798      	blx	r3
            break;
   82ea6:	e00d      	b.n	82ec4 <SCPI_RegSet+0xec>
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
   82ea8:	6b00      	ldr	r0, [r0, #48]	; 0x30
   82eaa:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
   82eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
    if (context && context->interface && context->interface->control) {
   82eb0:	69e9      	ldr	r1, [r5, #28]
   82eb2:	b1c9      	cbz	r1, 82ee8 <SCPI_RegSet+0x110>
   82eb4:	688b      	ldr	r3, [r1, #8]
   82eb6:	b1bb      	cbz	r3, 82ee8 <SCPI_RegSet+0x110>
        return context->interface->control(context, ctrl, val);
   82eb8:	4628      	mov	r0, r5
   82eba:	f04f 0101 	mov.w	r1, #1
   82ebe:	4798      	blx	r3
   82ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
                    srq = TRUE;
                }
            } else {
                val &= ~STB_SRQ;
   82ec2:	460e      	mov	r6, r1
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
   82ec4:	6b28      	ldr	r0, [r5, #48]	; 0x30
   82ec6:	f820 6014 	strh.w	r6, [r0, r4, lsl #1]
   82eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82ecc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82ece:	f823 6014 	strh.w	r6, [r3, r4, lsl #1]

    if (srq) {
        writeControl(context, SCPI_CTRL_SRQ, SCPI_RegGet(context, SCPI_REG_STB));
   82ed2:	4628      	mov	r0, r5
   82ed4:	f04f 0100 	mov.w	r1, #0
   82ed8:	f642 5261 	movw	r2, #11617	; 0x2d61
   82edc:	f2c0 0208 	movt	r2, #8
   82ee0:	4790      	blx	r2
   82ee2:	4602      	mov	r2, r0
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
    if (context && context->interface && context->interface->control) {
   82ee4:	2d00      	cmp	r5, #0
   82ee6:	d1e3      	bne.n	82eb0 <SCPI_RegSet+0xd8>
   82ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82eea:	bf00      	nop

00082eec <SCPI_RegSetBits>:
/**
 * Set register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegSetBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
   82eec:	b570      	push	{r4, r5, r6, lr}
   82eee:	4605      	mov	r5, r0
   82ef0:	460c      	mov	r4, r1
   82ef2:	4616      	mov	r6, r2
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
   82ef4:	f642 5361 	movw	r3, #11617	; 0x2d61
   82ef8:	f2c0 0308 	movt	r3, #8
   82efc:	4798      	blx	r3
   82efe:	ea40 0206 	orr.w	r2, r0, r6
   82f02:	4628      	mov	r0, r5
   82f04:	4621      	mov	r1, r4
   82f06:	b292      	uxth	r2, r2
   82f08:	f642 53d9 	movw	r3, #11737	; 0x2dd9
   82f0c:	f2c0 0308 	movt	r3, #8
   82f10:	4798      	blx	r3
   82f12:	bd70      	pop	{r4, r5, r6, pc}

00082f14 <regUpdate>:
/**
 * Update register value
 * @param context
 * @param name - register name
 */
static void regUpdate(scpi_t * context, scpi_reg_name_t name) {
   82f14:	b538      	push	{r3, r4, r5, lr}
   82f16:	4605      	mov	r5, r0
   82f18:	460c      	mov	r4, r1
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
   82f1a:	f642 5361 	movw	r3, #11617	; 0x2d61
   82f1e:	f2c0 0308 	movt	r3, #8
   82f22:	4798      	blx	r3
   82f24:	4602      	mov	r2, r0
   82f26:	4628      	mov	r0, r5
   82f28:	4621      	mov	r1, r4
   82f2a:	f642 53d9 	movw	r3, #11737	; 0x2dd9
   82f2e:	f2c0 0308 	movt	r3, #8
   82f32:	4798      	blx	r3
   82f34:	bd38      	pop	{r3, r4, r5, pc}
   82f36:	bf00      	nop

00082f38 <SCPI_EventClear>:

/**
 * Clear event register
 * @param context
 */
void SCPI_EventClear(scpi_t * context) {
   82f38:	b508      	push	{r3, lr}
    /* TODO */
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
   82f3a:	f04f 0102 	mov.w	r1, #2
   82f3e:	f04f 0200 	mov.w	r2, #0
   82f42:	f642 53d9 	movw	r3, #11737	; 0x2dd9
   82f46:	f2c0 0308 	movt	r3, #8
   82f4a:	4798      	blx	r3
   82f4c:	bd08      	pop	{r3, pc}
   82f4e:	bf00      	nop

00082f50 <SCPI_CoreCls>:
 * *CLS - This command clears all status data structures in a device. 
 *        For a device which minimally complies with SCPI. (SCPI std 4.1.3.2)
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreCls(scpi_t * context) {
   82f50:	b538      	push	{r3, r4, r5, lr}
   82f52:	4604      	mov	r4, r0
    SCPI_EventClear(context);
   82f54:	f642 7339 	movw	r3, #12089	; 0x2f39
   82f58:	f2c0 0308 	movt	r3, #8
   82f5c:	4798      	blx	r3
    SCPI_ErrorClear(context);
   82f5e:	4620      	mov	r0, r4
   82f60:	f642 2171 	movw	r1, #10865	; 0x2a71
   82f64:	f2c0 0108 	movt	r1, #8
   82f68:	4788      	blx	r1
    SCPI_RegSet(context, SCPI_REG_OPER, 0);
   82f6a:	4620      	mov	r0, r4
   82f6c:	f04f 0104 	mov.w	r1, #4
   82f70:	f04f 0200 	mov.w	r2, #0
   82f74:	f642 55d9 	movw	r5, #11737	; 0x2dd9
   82f78:	f2c0 0508 	movt	r5, #8
   82f7c:	47a8      	blx	r5
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
   82f7e:	4620      	mov	r0, r4
   82f80:	f04f 0106 	mov.w	r1, #6
   82f84:	f04f 0200 	mov.w	r2, #0
   82f88:	47a8      	blx	r5
    return SCPI_RES_OK;
}
   82f8a:	f04f 0001 	mov.w	r0, #1
   82f8e:	bd38      	pop	{r3, r4, r5, pc}

00082f90 <SCPI_CoreEse>:
/**
 * *ESE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEse(scpi_t * context) {
   82f90:	b510      	push	{r4, lr}
   82f92:	b082      	sub	sp, #8
   82f94:	4604      	mov	r4, r0
    int32_t new_ESE;
    if (SCPI_ParamInt(context, &new_ESE, TRUE)) {
   82f96:	a901      	add	r1, sp, #4
   82f98:	f04f 0201 	mov.w	r2, #1
   82f9c:	f243 7375 	movw	r3, #14197	; 0x3775
   82fa0:	f2c0 0308 	movt	r3, #8
   82fa4:	4798      	blx	r3
   82fa6:	b148      	cbz	r0, 82fbc <SCPI_CoreEse+0x2c>
        SCPI_RegSet(context, SCPI_REG_ESE, new_ESE);
   82fa8:	4620      	mov	r0, r4
   82faa:	f04f 0103 	mov.w	r1, #3
   82fae:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   82fb2:	f642 53d9 	movw	r3, #11737	; 0x2dd9
   82fb6:	f2c0 0308 	movt	r3, #8
   82fba:	4798      	blx	r3
    }
    return SCPI_RES_OK;
}
   82fbc:	f04f 0001 	mov.w	r0, #1
   82fc0:	b002      	add	sp, #8
   82fc2:	bd10      	pop	{r4, pc}

00082fc4 <SCPI_CoreEseQ>:
/**
 * *ESE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEseQ(scpi_t * context) {
   82fc4:	b510      	push	{r4, lr}
   82fc6:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_ESE));
   82fc8:	f04f 0103 	mov.w	r1, #3
   82fcc:	f642 5361 	movw	r3, #11617	; 0x2d61
   82fd0:	f2c0 0308 	movt	r3, #8
   82fd4:	4798      	blx	r3
   82fd6:	4601      	mov	r1, r0
   82fd8:	4620      	mov	r0, r4
   82fda:	f243 625d 	movw	r2, #13917	; 0x365d
   82fde:	f2c0 0208 	movt	r2, #8
   82fe2:	4790      	blx	r2
    return SCPI_RES_OK;
}
   82fe4:	f04f 0001 	mov.w	r0, #1
   82fe8:	bd10      	pop	{r4, pc}
   82fea:	bf00      	nop

00082fec <SCPI_CoreEsrQ>:
/**
 * *ESR?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEsrQ(scpi_t * context) {
   82fec:	b510      	push	{r4, lr}
   82fee:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_ESR));
   82ff0:	f04f 0102 	mov.w	r1, #2
   82ff4:	f642 5361 	movw	r3, #11617	; 0x2d61
   82ff8:	f2c0 0308 	movt	r3, #8
   82ffc:	4798      	blx	r3
   82ffe:	4601      	mov	r1, r0
   83000:	4620      	mov	r0, r4
   83002:	f243 625d 	movw	r2, #13917	; 0x365d
   83006:	f2c0 0208 	movt	r2, #8
   8300a:	4790      	blx	r2
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
   8300c:	4620      	mov	r0, r4
   8300e:	f04f 0102 	mov.w	r1, #2
   83012:	f04f 0200 	mov.w	r2, #0
   83016:	f642 53d9 	movw	r3, #11737	; 0x2dd9
   8301a:	f2c0 0308 	movt	r3, #8
   8301e:	4798      	blx	r3
    return SCPI_RES_OK;
}
   83020:	f04f 0001 	mov.w	r0, #1
   83024:	bd10      	pop	{r4, pc}
   83026:	bf00      	nop

00083028 <SCPI_CoreIdnQ>:
/**
 * *IDN?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreIdnQ(scpi_t * context) {
   83028:	b538      	push	{r3, r4, r5, lr}
   8302a:	4605      	mov	r5, r0
    SCPI_ResultString(context, SCPI_MANUFACTURE);
   8302c:	f64d 2148 	movw	r1, #55880	; 0xda48
   83030:	f2c0 0108 	movt	r1, #8
   83034:	f243 641d 	movw	r4, #13853	; 0x361d
   83038:	f2c0 0408 	movt	r4, #8
   8303c:	47a0      	blx	r4
    SCPI_ResultString(context, SCPI_DEV_NAME);
   8303e:	4628      	mov	r0, r5
   83040:	f64d 2150 	movw	r1, #55888	; 0xda50
   83044:	f2c0 0108 	movt	r1, #8
   83048:	47a0      	blx	r4
    SCPI_ResultString(context, SCPI_DEV_VERSION);
   8304a:	4628      	mov	r0, r5
   8304c:	f64d 2170 	movw	r1, #55920	; 0xda70
   83050:	f2c0 0108 	movt	r1, #8
   83054:	47a0      	blx	r4
    return SCPI_RES_OK;
}
   83056:	f04f 0001 	mov.w	r0, #1
   8305a:	bd38      	pop	{r3, r4, r5, pc}

0008305c <SCPI_CoreOpc>:
/**
 * *OPC
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpc(scpi_t * context) {
   8305c:	b508      	push	{r3, lr}
    SCPI_RegSetBits(context, SCPI_REG_ESR, ESR_OPC);
   8305e:	f04f 0102 	mov.w	r1, #2
   83062:	f04f 0201 	mov.w	r2, #1
   83066:	f642 63ed 	movw	r3, #12013	; 0x2eed
   8306a:	f2c0 0308 	movt	r3, #8
   8306e:	4798      	blx	r3
    return SCPI_RES_OK;
}
   83070:	f04f 0001 	mov.w	r0, #1
   83074:	bd08      	pop	{r3, pc}
   83076:	bf00      	nop

00083078 <SCPI_CoreOpcQ>:
/**
 * *OPC?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpcQ(scpi_t * context) {
   83078:	b508      	push	{r3, lr}
    /* Operation is always completed */
    SCPI_ResultInt(context, 1);
   8307a:	f04f 0101 	mov.w	r1, #1
   8307e:	f243 635d 	movw	r3, #13917	; 0x365d
   83082:	f2c0 0308 	movt	r3, #8
   83086:	4798      	blx	r3
    return SCPI_RES_OK;
}
   83088:	f04f 0001 	mov.w	r0, #1
   8308c:	bd08      	pop	{r3, pc}
   8308e:	bf00      	nop

00083090 <SCPI_CoreRst>:
/**
 * *RST
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreRst(scpi_t * context) {
   83090:	b508      	push	{r3, lr}
    if (context && context->interface && context->interface->reset) {
   83092:	b128      	cbz	r0, 830a0 <SCPI_CoreRst+0x10>
   83094:	69c3      	ldr	r3, [r0, #28]
   83096:	b133      	cbz	r3, 830a6 <SCPI_CoreRst+0x16>
   83098:	6919      	ldr	r1, [r3, #16]
   8309a:	b139      	cbz	r1, 830ac <SCPI_CoreRst+0x1c>
        return context->interface->reset(context);
   8309c:	4788      	blx	r1
   8309e:	e007      	b.n	830b0 <SCPI_CoreRst+0x20>
    }
    return SCPI_RES_OK;
   830a0:	f04f 0001 	mov.w	r0, #1
   830a4:	e004      	b.n	830b0 <SCPI_CoreRst+0x20>
   830a6:	f04f 0001 	mov.w	r0, #1
   830aa:	e001      	b.n	830b0 <SCPI_CoreRst+0x20>
   830ac:	f04f 0001 	mov.w	r0, #1
}
   830b0:	b240      	sxtb	r0, r0
   830b2:	bd08      	pop	{r3, pc}

000830b4 <SCPI_CoreSre>:
/**
 * *SRE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSre(scpi_t * context) {
   830b4:	b510      	push	{r4, lr}
   830b6:	b082      	sub	sp, #8
   830b8:	4604      	mov	r4, r0
    int32_t new_SRE;
    if (SCPI_ParamInt(context, &new_SRE, TRUE)) {
   830ba:	a901      	add	r1, sp, #4
   830bc:	f04f 0201 	mov.w	r2, #1
   830c0:	f243 7375 	movw	r3, #14197	; 0x3775
   830c4:	f2c0 0308 	movt	r3, #8
   830c8:	4798      	blx	r3
   830ca:	b148      	cbz	r0, 830e0 <SCPI_CoreSre+0x2c>
        SCPI_RegSet(context, SCPI_REG_SRE, new_SRE);
   830cc:	4620      	mov	r0, r4
   830ce:	f04f 0101 	mov.w	r1, #1
   830d2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   830d6:	f642 53d9 	movw	r3, #11737	; 0x2dd9
   830da:	f2c0 0308 	movt	r3, #8
   830de:	4798      	blx	r3
    }
    return SCPI_RES_OK;
}
   830e0:	f04f 0001 	mov.w	r0, #1
   830e4:	b002      	add	sp, #8
   830e6:	bd10      	pop	{r4, pc}

000830e8 <SCPI_CoreSreQ>:
/**
 * *SRE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSreQ(scpi_t * context) {
   830e8:	b510      	push	{r4, lr}
   830ea:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_SRE));
   830ec:	f04f 0101 	mov.w	r1, #1
   830f0:	f642 5361 	movw	r3, #11617	; 0x2d61
   830f4:	f2c0 0308 	movt	r3, #8
   830f8:	4798      	blx	r3
   830fa:	4601      	mov	r1, r0
   830fc:	4620      	mov	r0, r4
   830fe:	f243 625d 	movw	r2, #13917	; 0x365d
   83102:	f2c0 0208 	movt	r2, #8
   83106:	4790      	blx	r2
    return SCPI_RES_OK;
}
   83108:	f04f 0001 	mov.w	r0, #1
   8310c:	bd10      	pop	{r4, pc}
   8310e:	bf00      	nop

00083110 <SCPI_CoreStbQ>:
/**
 * *STB?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreStbQ(scpi_t * context) {
   83110:	b510      	push	{r4, lr}
   83112:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_STB));
   83114:	f04f 0100 	mov.w	r1, #0
   83118:	f642 5361 	movw	r3, #11617	; 0x2d61
   8311c:	f2c0 0308 	movt	r3, #8
   83120:	4798      	blx	r3
   83122:	4601      	mov	r1, r0
   83124:	4620      	mov	r0, r4
   83126:	f243 625d 	movw	r2, #13917	; 0x365d
   8312a:	f2c0 0208 	movt	r2, #8
   8312e:	4790      	blx	r2
    return SCPI_RES_OK;
}
   83130:	f04f 0001 	mov.w	r0, #1
   83134:	bd10      	pop	{r4, pc}
   83136:	bf00      	nop

00083138 <SCPI_CoreTstQ>:
/**
 * *TST?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreTstQ(scpi_t * context) {
   83138:	b510      	push	{r4, lr}
    int result = 0;
    if (context && context->interface && context->interface->test) {
   8313a:	4604      	mov	r4, r0
   8313c:	b130      	cbz	r0, 8314c <SCPI_CoreTstQ+0x14>
   8313e:	69c3      	ldr	r3, [r0, #28]
   83140:	b13b      	cbz	r3, 83152 <SCPI_CoreTstQ+0x1a>
   83142:	6959      	ldr	r1, [r3, #20]
   83144:	b141      	cbz	r1, 83158 <SCPI_CoreTstQ+0x20>
        result = context->interface->test(context);
   83146:	4788      	blx	r1
   83148:	4601      	mov	r1, r0
   8314a:	e007      	b.n	8315c <SCPI_CoreTstQ+0x24>
 * *TST?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreTstQ(scpi_t * context) {
    int result = 0;
   8314c:	f04f 0100 	mov.w	r1, #0
   83150:	e004      	b.n	8315c <SCPI_CoreTstQ+0x24>
   83152:	f04f 0100 	mov.w	r1, #0
   83156:	e001      	b.n	8315c <SCPI_CoreTstQ+0x24>
   83158:	f04f 0100 	mov.w	r1, #0
    if (context && context->interface && context->interface->test) {
        result = context->interface->test(context);
    }
    SCPI_ResultInt(context, result);
   8315c:	4620      	mov	r0, r4
   8315e:	f243 625d 	movw	r2, #13917	; 0x365d
   83162:	f2c0 0208 	movt	r2, #8
   83166:	4790      	blx	r2
    return SCPI_RES_OK;
}
   83168:	f04f 0001 	mov.w	r0, #1
   8316c:	bd10      	pop	{r4, pc}
   8316e:	bf00      	nop

00083170 <SCPI_CoreWai>:
 */
scpi_result_t SCPI_CoreWai(scpi_t * context) {
    (void) context;
    /* NOP */
    return SCPI_RES_OK;
}
   83170:	f04f 0001 	mov.w	r0, #1
   83174:	4770      	bx	lr
   83176:	bf00      	nop

00083178 <SCPI_StubQ>:
/**
 * Query command stub function
 * @param context
 * @return 
 */
scpi_result_t SCPI_StubQ(scpi_t * context) {
   83178:	b508      	push	{r3, lr}
    SCPI_ResultString(context, "");
   8317a:	f64d 51d8 	movw	r1, #56792	; 0xddd8
   8317e:	f2c0 0108 	movt	r1, #8
   83182:	f243 631d 	movw	r3, #13853	; 0x361d
   83186:	f2c0 0308 	movt	r3, #8
   8318a:	4798      	blx	r3
    return SCPI_RES_OK;
}
   8318c:	f04f 0001 	mov.w	r0, #1
   83190:	bd08      	pop	{r3, pc}
   83192:	bf00      	nop

00083194 <SCPI_SystemVersionQ>:
/**
 * SYSTem:VERSion?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemVersionQ(scpi_t * context) {
   83194:	b508      	push	{r3, lr}
    SCPI_ResultString(context, SCPI_DEV_VERSION);
   83196:	f64d 2170 	movw	r1, #55920	; 0xda70
   8319a:	f2c0 0108 	movt	r1, #8
   8319e:	f243 631d 	movw	r3, #13853	; 0x361d
   831a2:	f2c0 0308 	movt	r3, #8
   831a6:	4798      	blx	r3
    return SCPI_RES_OK;
}
   831a8:	f04f 0001 	mov.w	r0, #1
   831ac:	bd08      	pop	{r3, pc}
   831ae:	bf00      	nop

000831b0 <SCPI_SystemErrorNextQ>:
/**
 * SYSTem:ERRor[:NEXT]?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemErrorNextQ(scpi_t * context) {
   831b0:	b538      	push	{r3, r4, r5, lr}
   831b2:	4604      	mov	r4, r0
    int16_t err = SCPI_ErrorPop(context);
   831b4:	f642 2381 	movw	r3, #10881	; 0x2a81
   831b8:	f2c0 0308 	movt	r3, #8
   831bc:	4798      	blx	r3
   831be:	4605      	mov	r5, r0

    SCPI_ResultInt(context, err);
   831c0:	4620      	mov	r0, r4
   831c2:	4629      	mov	r1, r5
   831c4:	f243 625d 	movw	r2, #13917	; 0x365d
   831c8:	f2c0 0208 	movt	r2, #8
   831cc:	4790      	blx	r2
    SCPI_ResultText(context, SCPI_ErrorTranslate(err));
   831ce:	4628      	mov	r0, r5
   831d0:	f642 31f5 	movw	r1, #11253	; 0x2bf5
   831d4:	f2c0 0108 	movt	r1, #8
   831d8:	4788      	blx	r1
   831da:	4601      	mov	r1, r0
   831dc:	4620      	mov	r0, r4
   831de:	f243 63a5 	movw	r3, #13989	; 0x36a5
   831e2:	f2c0 0308 	movt	r3, #8
   831e6:	4798      	blx	r3

    return SCPI_RES_OK;
}
   831e8:	f04f 0001 	mov.w	r0, #1
   831ec:	bd38      	pop	{r3, r4, r5, pc}
   831ee:	bf00      	nop

000831f0 <SCPI_SystemErrorCountQ>:
/**
 * SYSTem:ERRor:COUNt?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemErrorCountQ(scpi_t * context) {
   831f0:	b510      	push	{r4, lr}
   831f2:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_ErrorCount(context));
   831f4:	f642 23a5 	movw	r3, #10917	; 0x2aa5
   831f8:	f2c0 0308 	movt	r3, #8
   831fc:	4798      	blx	r3
   831fe:	4601      	mov	r1, r0
   83200:	4620      	mov	r0, r4
   83202:	f243 625d 	movw	r2, #13917	; 0x365d
   83206:	f2c0 0208 	movt	r2, #8
   8320a:	4790      	blx	r2

    return SCPI_RES_OK;
}
   8320c:	f04f 0001 	mov.w	r0, #1
   83210:	bd10      	pop	{r4, pc}
   83212:	bf00      	nop

00083214 <SCPI_StatusQuestionableEventQ>:
/**
 * STATus:QUEStionable[:EVENt]?
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusQuestionableEventQ(scpi_t * context) {
   83214:	b510      	push	{r4, lr}
   83216:	4604      	mov	r4, r0
    /* return value */
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_QUES));
   83218:	f04f 0106 	mov.w	r1, #6
   8321c:	f642 5361 	movw	r3, #11617	; 0x2d61
   83220:	f2c0 0308 	movt	r3, #8
   83224:	4798      	blx	r3
   83226:	4601      	mov	r1, r0
   83228:	4620      	mov	r0, r4
   8322a:	f243 625d 	movw	r2, #13917	; 0x365d
   8322e:	f2c0 0208 	movt	r2, #8
   83232:	4790      	blx	r2

    /* clear register */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
   83234:	4620      	mov	r0, r4
   83236:	f04f 0106 	mov.w	r1, #6
   8323a:	f04f 0200 	mov.w	r2, #0
   8323e:	f642 53d9 	movw	r3, #11737	; 0x2dd9
   83242:	f2c0 0308 	movt	r3, #8
   83246:	4798      	blx	r3

    return SCPI_RES_OK;
}
   83248:	f04f 0001 	mov.w	r0, #1
   8324c:	bd10      	pop	{r4, pc}
   8324e:	bf00      	nop

00083250 <SCPI_StatusQuestionableEnableQ>:
/**
 * STATus:QUEStionable:ENABle?
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusQuestionableEnableQ(scpi_t * context) {
   83250:	b510      	push	{r4, lr}
   83252:	4604      	mov	r4, r0
    /* return value */
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_QUESE));
   83254:	f04f 0107 	mov.w	r1, #7
   83258:	f642 5361 	movw	r3, #11617	; 0x2d61
   8325c:	f2c0 0308 	movt	r3, #8
   83260:	4798      	blx	r3
   83262:	4601      	mov	r1, r0
   83264:	4620      	mov	r0, r4
   83266:	f243 625d 	movw	r2, #13917	; 0x365d
   8326a:	f2c0 0208 	movt	r2, #8
   8326e:	4790      	blx	r2

    return SCPI_RES_OK;
}
   83270:	f04f 0001 	mov.w	r0, #1
   83274:	bd10      	pop	{r4, pc}
   83276:	bf00      	nop

00083278 <SCPI_StatusQuestionableEnable>:
/**
 * STATus:QUEStionable:ENABle
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusQuestionableEnable(scpi_t * context) {
   83278:	b510      	push	{r4, lr}
   8327a:	b082      	sub	sp, #8
   8327c:	4604      	mov	r4, r0
    int32_t new_QUESE;
    if (SCPI_ParamInt(context, &new_QUESE, TRUE)) {
   8327e:	a901      	add	r1, sp, #4
   83280:	f04f 0201 	mov.w	r2, #1
   83284:	f243 7375 	movw	r3, #14197	; 0x3775
   83288:	f2c0 0308 	movt	r3, #8
   8328c:	4798      	blx	r3
   8328e:	b148      	cbz	r0, 832a4 <SCPI_StatusQuestionableEnable+0x2c>
        SCPI_RegSet(context, SCPI_REG_QUESE, new_QUESE);
   83290:	4620      	mov	r0, r4
   83292:	f04f 0107 	mov.w	r1, #7
   83296:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   8329a:	f642 53d9 	movw	r3, #11737	; 0x2dd9
   8329e:	f2c0 0308 	movt	r3, #8
   832a2:	4798      	blx	r3
    }
    return SCPI_RES_OK;
}
   832a4:	f04f 0001 	mov.w	r0, #1
   832a8:	b002      	add	sp, #8
   832aa:	bd10      	pop	{r4, pc}

000832ac <SCPI_StatusPreset>:
/**
 * STATus:PRESet
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusPreset(scpi_t * context) {
   832ac:	b508      	push	{r3, lr}
    /* clear STATUS:... */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
   832ae:	f04f 0106 	mov.w	r1, #6
   832b2:	f04f 0200 	mov.w	r2, #0
   832b6:	f642 53d9 	movw	r3, #11737	; 0x2dd9
   832ba:	f2c0 0308 	movt	r3, #8
   832be:	4798      	blx	r3
    return SCPI_RES_OK;
}
   832c0:	f04f 0001 	mov.w	r0, #1
   832c4:	bd08      	pop	{r3, pc}
   832c6:	bf00      	nop

000832c8 <writeData>:
 * @param context
 * @param data
 * @param len - lenght of data to be written
 * @return number of bytes written
 */
static size_t writeData(scpi_t * context, const char * data, size_t len) {
   832c8:	b508      	push	{r3, lr}
    return context->interface->write(context, data, len);
   832ca:	69c3      	ldr	r3, [r0, #28]
   832cc:	685b      	ldr	r3, [r3, #4]
   832ce:	4798      	blx	r3
}
   832d0:	bd08      	pop	{r3, pc}
   832d2:	bf00      	nop

000832d4 <writeDelimiter>:
/**
 * Write result delimiter to output
 * @param context
 * @return number of bytes written
 */
static size_t writeDelimiter(scpi_t * context) {
   832d4:	b508      	push	{r3, lr}
    if (context->output_count > 0) {
   832d6:	6a03      	ldr	r3, [r0, #32]
   832d8:	2b00      	cmp	r3, #0
   832da:	dd0b      	ble.n	832f4 <writeDelimiter+0x20>
        return writeData(context, ", ", 2);
   832dc:	f64d 2178 	movw	r1, #55928	; 0xda78
   832e0:	f2c0 0108 	movt	r1, #8
   832e4:	f04f 0202 	mov.w	r2, #2
   832e8:	f243 23c9 	movw	r3, #13001	; 0x32c9
   832ec:	f2c0 0308 	movt	r3, #8
   832f0:	4798      	blx	r3
   832f2:	bd08      	pop	{r3, pc}
    } else {
        return 0;
   832f4:	f04f 0000 	mov.w	r0, #0
    }
}
   832f8:	bd08      	pop	{r3, pc}
   832fa:	bf00      	nop

000832fc <paramSkipBytes>:
 * Skip num bytes from the begginig of parameters
 * @param context
 * @param num
 */
void paramSkipBytes(scpi_t * context, size_t num) {
    if (context->paramlist.length < num) {
   832fc:	6983      	ldr	r3, [r0, #24]
   832fe:	4299      	cmp	r1, r3
   83300:	bf28      	it	cs
   83302:	4619      	movcs	r1, r3
        num = context->paramlist.length;
    }
    context->paramlist.parameters += num;
   83304:	6942      	ldr	r2, [r0, #20]
   83306:	1852      	adds	r2, r2, r1
   83308:	6142      	str	r2, [r0, #20]
    context->paramlist.length -= num;
   8330a:	1a59      	subs	r1, r3, r1
   8330c:	6181      	str	r1, [r0, #24]
   8330e:	4770      	bx	lr

00083310 <paramSkipWhitespace>:

/**
 * Skip white spaces from the beggining of parameters
 * @param context
 */
void paramSkipWhitespace(scpi_t * context) {
   83310:	b510      	push	{r4, lr}
   83312:	4604      	mov	r4, r0
    size_t ws = skipWhitespace(context->paramlist.parameters, context->paramlist.length);
   83314:	6940      	ldr	r0, [r0, #20]
   83316:	69a1      	ldr	r1, [r4, #24]
   83318:	f643 335d 	movw	r3, #15197	; 0x3b5d
   8331c:	f2c0 0308 	movt	r3, #8
   83320:	4798      	blx	r3
   83322:	4601      	mov	r1, r0
    paramSkipBytes(context, ws);
   83324:	4620      	mov	r0, r4
   83326:	f243 22fd 	movw	r2, #13053	; 0x32fd
   8332a:	f2c0 0208 	movt	r2, #8
   8332e:	4790      	blx	r2
   83330:	bd10      	pop	{r4, pc}
   83332:	bf00      	nop

00083334 <paramNext>:
 * Find next parameter
 * @param context
 * @param mandatory
 * @return 
 */
bool_t paramNext(scpi_t * context, bool_t mandatory) {
   83334:	b538      	push	{r3, r4, r5, lr}
   83336:	4604      	mov	r4, r0
   83338:	460d      	mov	r5, r1
    paramSkipWhitespace(context);
   8333a:	f243 3311 	movw	r3, #13073	; 0x3311
   8333e:	f2c0 0308 	movt	r3, #8
   83342:	4798      	blx	r3
    if (context->paramlist.length == 0) {
   83344:	69a0      	ldr	r0, [r4, #24]
   83346:	b960      	cbnz	r0, 83362 <paramNext+0x2e>
        if (mandatory) {
   83348:	2d00      	cmp	r5, #0
   8334a:	d031      	beq.n	833b0 <paramNext+0x7c>
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
   8334c:	4620      	mov	r0, r4
   8334e:	f06f 016c 	mvn.w	r1, #108	; 0x6c
   83352:	f642 22c9 	movw	r2, #10953	; 0x2ac9
   83356:	f2c0 0208 	movt	r2, #8
   8335a:	4790      	blx	r2
        }
        return FALSE;
   8335c:	f04f 0000 	mov.w	r0, #0
   83360:	bd38      	pop	{r3, r4, r5, pc}
    }
    if (context->input_count != 0) {
   83362:	6a61      	ldr	r1, [r4, #36]	; 0x24
   83364:	b1e9      	cbz	r1, 833a2 <paramNext+0x6e>
        if (context->paramlist.parameters[0] == ',') {
   83366:	6962      	ldr	r2, [r4, #20]
   83368:	7813      	ldrb	r3, [r2, #0]
   8336a:	2b2c      	cmp	r3, #44	; 0x2c
   8336c:	d10e      	bne.n	8338c <paramNext+0x58>
            paramSkipBytes(context, 1);
   8336e:	4620      	mov	r0, r4
   83370:	f04f 0101 	mov.w	r1, #1
   83374:	f243 23fd 	movw	r3, #13053	; 0x32fd
   83378:	f2c0 0308 	movt	r3, #8
   8337c:	4798      	blx	r3
            paramSkipWhitespace(context);
   8337e:	4620      	mov	r0, r4
   83380:	f243 3111 	movw	r1, #13073	; 0x3311
   83384:	f2c0 0108 	movt	r1, #8
   83388:	4788      	blx	r1
   8338a:	e00a      	b.n	833a2 <paramNext+0x6e>
        } else {
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SEPARATOR);
   8338c:	4620      	mov	r0, r4
   8338e:	f06f 0166 	mvn.w	r1, #102	; 0x66
   83392:	f642 22c9 	movw	r2, #10953	; 0x2ac9
   83396:	f2c0 0208 	movt	r2, #8
   8339a:	4790      	blx	r2
            return FALSE;
   8339c:	f04f 0000 	mov.w	r0, #0
   833a0:	bd38      	pop	{r3, r4, r5, pc}
        }
    }
    context->input_count++;
   833a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   833a4:	f100 0001 	add.w	r0, r0, #1
   833a8:	6260      	str	r0, [r4, #36]	; 0x24
    return TRUE;
   833aa:	f04f 0001 	mov.w	r0, #1
   833ae:	bd38      	pop	{r3, r4, r5, pc}
    paramSkipWhitespace(context);
    if (context->paramlist.length == 0) {
        if (mandatory) {
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
        }
        return FALSE;
   833b0:	f04f 0000 	mov.w	r0, #0
            return FALSE;
        }
    }
    context->input_count++;
    return TRUE;
}
   833b4:	bd38      	pop	{r3, r4, r5, pc}
   833b6:	bf00      	nop

000833b8 <cmdlineSeparator>:
 * Find command line separator
 * @param cmd - input command
 * @param len - max search length
 * @return pointer to line separator or NULL
 */
const char * cmdlineSeparator(const char * cmd, size_t len) {
   833b8:	b508      	push	{r3, lr}
    return strnpbrk(cmd, len, ";\r\n");
   833ba:	f64d 227c 	movw	r2, #55932	; 0xda7c
   833be:	f2c0 0208 	movt	r2, #8
   833c2:	f243 73ed 	movw	r3, #14317	; 0x37ed
   833c6:	f2c0 0308 	movt	r3, #8
   833ca:	4798      	blx	r3
}
   833cc:	bd08      	pop	{r3, pc}
   833ce:	bf00      	nop

000833d0 <SCPI_Parse>:
 * @param context
 * @param data - complete command line
 * @param len - command line length
 * @return 1 if the last evaluated command was found
 */
int SCPI_Parse(scpi_t * context, const char * data, size_t len) {
   833d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   833d4:	b083      	sub	sp, #12
    int result = 0;
    const char * cmdline_end = data + len;
   833d6:	eb01 0b02 	add.w	fp, r1, r2
    const char * cmdline_ptr = data;
    size_t cmd_len;
    size_t cmdline_len;

    if (context == NULL) {
   833da:	4607      	mov	r7, r0
   833dc:	2800      	cmp	r0, #0
   833de:	f000 809e 	beq.w	8351e <SCPI_Parse+0x14e>
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
   833e2:	4559      	cmp	r1, fp
   833e4:	f080 809e 	bcs.w	83524 <SCPI_Parse+0x154>
   833e8:	460d      	mov	r5, r1
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
            } else {
                SCPI_ErrorPush(context, SCPI_ERROR_UNDEFINED_HEADER);
   833ea:	f642 23c9 	movw	r3, #10953	; 0x2ac9
   833ee:	f2c0 0308 	movt	r3, #8
   833f2:	9301      	str	r3, [sp, #4]
    }

	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
   833f4:	462c      	mov	r4, r5
   833f6:	ebc5 080b 	rsb	r8, r5, fp
 * @param cmd - input command
 * @param len - max search length
 * @return position of terminator or len
 */
size_t cmdTerminatorPos(const char * cmd, size_t len) {
    const char * terminator = strnpbrk(cmd, len, "; \r\n\t");
   833fa:	4628      	mov	r0, r5
   833fc:	4641      	mov	r1, r8
   833fe:	4a51      	ldr	r2, [pc, #324]	; (83544 <SCPI_Parse+0x174>)
   83400:	f243 76ed 	movw	r6, #14317	; 0x37ed
   83404:	f2c0 0608 	movt	r6, #8
   83408:	47b0      	blx	r6
    if (terminator == NULL) {
   8340a:	b108      	cbz	r0, 83410 <SCPI_Parse+0x40>
        return len;
    } else {
        return terminator - cmd;
   8340c:	1b46      	subs	r6, r0, r5
   8340e:	e000      	b.n	83412 <SCPI_Parse+0x42>
 * @return position of terminator or len
 */
size_t cmdTerminatorPos(const char * cmd, size_t len) {
    const char * terminator = strnpbrk(cmd, len, "; \r\n\t");
    if (terminator == NULL) {
        return len;
   83410:	4646      	mov	r6, r8
 * @param cmd - input command
 * @param len - max search length
 * @return position of line separator or len
 */
size_t cmdlineSeparatorPos(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
   83412:	4628      	mov	r0, r5
   83414:	4641      	mov	r1, r8
   83416:	f243 32b9 	movw	r2, #13241	; 0x33b9
   8341a:	f2c0 0208 	movt	r2, #8
   8341e:	4790      	blx	r2
    if (separator == NULL) {
   83420:	b110      	cbz	r0, 83428 <SCPI_Parse+0x58>
        return len;
    } else {
        return separator - cmd;
   83422:	1b00      	subs	r0, r0, r4
   83424:	9000      	str	r0, [sp, #0]
   83426:	e001      	b.n	8342c <SCPI_Parse+0x5c>
 * @return position of line separator or len
 */
size_t cmdlineSeparatorPos(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
    if (separator == NULL) {
        return len;
   83428:	f8cd 8000 	str.w	r8, [sp]
	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        if (cmd_len > 0) {
   8342c:	2e00      	cmp	r6, #0
   8342e:	d05f      	beq.n	834f0 <SCPI_Parse+0x120>
 */
static bool_t findCommand(scpi_t * context, const char * cmdline_ptr, size_t cmdline_len, size_t cmd_len) {
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
   83430:	f8d7 9000 	ldr.w	r9, [r7]
   83434:	f8d9 0000 	ldr.w	r0, [r9]
   83438:	2800      	cmp	r0, #0
   8343a:	d076      	beq.n	8352a <SCPI_Parse+0x15a>
   8343c:	f04f 0408 	mov.w	r4, #8
        cmd = &context->cmdlist[i];
        if (matchCommand(cmd->pattern, cmdline_ptr, cmd_len)) {
   83440:	f643 4ab1 	movw	sl, #15537	; 0x3cb1
   83444:	f2c0 0a08 	movt	sl, #8
   83448:	4629      	mov	r1, r5
   8344a:	4632      	mov	r2, r6
   8344c:	47d0      	blx	sl
   8344e:	b190      	cbz	r0, 83476 <SCPI_Parse+0xa6>
            context->paramlist.cmd = cmd;
   83450:	f8c7 9010 	str.w	r9, [r7, #16]
            context->paramlist.parameters = cmdline_ptr + cmd_len;
   83454:	19ab      	adds	r3, r5, r6
   83456:	617b      	str	r3, [r7, #20]
            context->paramlist.length = cmdline_len - cmd_len;
   83458:	9800      	ldr	r0, [sp, #0]
   8345a:	1b86      	subs	r6, r0, r6
   8345c:	61be      	str	r6, [r7, #24]
 * @param context
 */
static void processCommand(scpi_t * context) {
    const scpi_command_t * cmd = context->paramlist.cmd;

    context->cmd_error = FALSE;
   8345e:	f04f 0400 	mov.w	r4, #0
   83462:	f887 4028 	strb.w	r4, [r7, #40]	; 0x28
    context->output_count = 0;
   83466:	f04f 0100 	mov.w	r1, #0
   8346a:	6239      	str	r1, [r7, #32]
    context->input_count = 0;
   8346c:	6279      	str	r1, [r7, #36]	; 0x24

    SCPI_DEBUG_COMMAND(context);
    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
   8346e:	f8d9 2004 	ldr.w	r2, [r9, #4]
   83472:	b94a      	cbnz	r2, 83488 <SCPI_Parse+0xb8>
   83474:	e014      	b.n	834a0 <SCPI_Parse+0xd0>
 */
static bool_t findCommand(scpi_t * context, const char * cmdline_ptr, size_t cmdline_len, size_t cmd_len) {
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
   83476:	6839      	ldr	r1, [r7, #0]
   83478:	eb01 0904 	add.w	r9, r1, r4
   8347c:	5908      	ldr	r0, [r1, r4]
   8347e:	f104 0408 	add.w	r4, r4, #8
   83482:	2800      	cmp	r0, #0
   83484:	d1e0      	bne.n	83448 <SCPI_Parse+0x78>
   83486:	e050      	b.n	8352a <SCPI_Parse+0x15a>
    context->input_count = 0;

    SCPI_DEBUG_COMMAND(context);
    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
        if ((cmd->callback(context) != SCPI_RES_OK) && !context->cmd_error) {
   83488:	4638      	mov	r0, r7
   8348a:	4790      	blx	r2
   8348c:	2801      	cmp	r0, #1
   8348e:	d007      	beq.n	834a0 <SCPI_Parse+0xd0>
   83490:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   83494:	b923      	cbnz	r3, 834a0 <SCPI_Parse+0xd0>
            SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
   83496:	4638      	mov	r0, r7
   83498:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
   8349c:	9c01      	ldr	r4, [sp, #4]
   8349e:	47a0      	blx	r4
 * Conditionaly write "New Line"
 * @param context
 * @return number of characters written
 */
static size_t writeNewLine(scpi_t * context) {
    if (context->output_count > 0) {
   834a0:	6a38      	ldr	r0, [r7, #32]
   834a2:	2800      	cmp	r0, #0
   834a4:	dd11      	ble.n	834ca <SCPI_Parse+0xfa>
        size_t len;
        len = writeData(context, "\r\n", 2);
   834a6:	4638      	mov	r0, r7
   834a8:	f64d 51bc 	movw	r1, #56764	; 0xddbc
   834ac:	f2c0 0108 	movt	r1, #8
   834b0:	f04f 0202 	mov.w	r2, #2
   834b4:	f243 23c9 	movw	r3, #13001	; 0x32c9
   834b8:	f2c0 0308 	movt	r3, #8
   834bc:	4798      	blx	r3
 * Flush data to SCPI output
 * @param context
 * @return
 */
static int flushData(scpi_t * context) {
    if (context && context->interface && context->interface->flush) {
   834be:	69f9      	ldr	r1, [r7, #28]
   834c0:	b119      	cbz	r1, 834ca <SCPI_Parse+0xfa>
   834c2:	68ca      	ldr	r2, [r1, #12]
   834c4:	b10a      	cbz	r2, 834ca <SCPI_Parse+0xfa>
        return context->interface->flush(context);
   834c6:	4638      	mov	r0, r7
   834c8:	4790      	blx	r2

    /* conditionaly write new line */
    writeNewLine(context);

    /* skip all whitespaces */
    paramSkipWhitespace(context);
   834ca:	4638      	mov	r0, r7
   834cc:	f243 3411 	movw	r4, #13073	; 0x3311
   834d0:	f2c0 0408 	movt	r4, #8
   834d4:	47a0      	blx	r4

    /* set error if command callback did not read all parameters */
    if (context->paramlist.length != 0 && !context->cmd_error) {
   834d6:	69b8      	ldr	r0, [r7, #24]
   834d8:	b168      	cbz	r0, 834f6 <SCPI_Parse+0x126>
   834da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   834de:	b96b      	cbnz	r3, 834fc <SCPI_Parse+0x12c>
        SCPI_ErrorPush(context, SCPI_ERROR_PARAMETER_NOT_ALLOWED);
   834e0:	4638      	mov	r0, r7
   834e2:	f06f 016b 	mvn.w	r1, #107	; 0x6b
   834e6:	9a01      	ldr	r2, [sp, #4]
   834e8:	4790      	blx	r2
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
   834ea:	f04f 0401 	mov.w	r4, #1
   834ee:	e007      	b.n	83500 <SCPI_Parse+0x130>
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
   834f0:	f04f 0400 	mov.w	r4, #0
   834f4:	e004      	b.n	83500 <SCPI_Parse+0x130>
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
   834f6:	f04f 0401 	mov.w	r4, #1
   834fa:	e001      	b.n	83500 <SCPI_Parse+0x130>
   834fc:	f04f 0401 	mov.w	r4, #1
 * @param cmd - input command
 * @param len - max search length
 * @return Pointer to next part of command
 */
const char * cmdlineNext(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
   83500:	4628      	mov	r0, r5
   83502:	4641      	mov	r1, r8
   83504:	f243 33b9 	movw	r3, #13241	; 0x33b9
   83508:	f2c0 0308 	movt	r3, #8
   8350c:	4798      	blx	r3
    if (separator == NULL) {
        return cmd + len;
   8350e:	4445      	add	r5, r8
 * @param len - max search length
 * @return Pointer to next part of command
 */
const char * cmdlineNext(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
    if (separator == NULL) {
   83510:	b108      	cbz	r0, 83516 <SCPI_Parse+0x146>
        return cmd + len;
    } else {
        return separator + 1;
   83512:	f100 0501 	add.w	r5, r0, #1
    if (context == NULL) {
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
   83516:	45ab      	cmp	fp, r5
   83518:	f63f af6c 	bhi.w	833f4 <SCPI_Parse+0x24>
   8351c:	e00d      	b.n	8353a <SCPI_Parse+0x16a>
    const char * cmdline_ptr = data;
    size_t cmd_len;
    size_t cmdline_len;

    if (context == NULL) {
        return -1;
   8351e:	f04f 34ff 	mov.w	r4, #4294967295
   83522:	e00a      	b.n	8353a <SCPI_Parse+0x16a>
    }

	
    while (cmdline_ptr < cmdline_end) {
   83524:	f04f 0400 	mov.w	r4, #0
   83528:	e007      	b.n	8353a <SCPI_Parse+0x16a>
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
            } else {
                SCPI_ErrorPush(context, SCPI_ERROR_UNDEFINED_HEADER);
   8352a:	4638      	mov	r0, r7
   8352c:	f06f 0170 	mvn.w	r1, #112	; 0x70
   83530:	9a01      	ldr	r2, [sp, #4]
   83532:	4790      	blx	r2
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
   83534:	f04f 0400 	mov.w	r4, #0
   83538:	e7e2      	b.n	83500 <SCPI_Parse+0x130>
            }
        }
        cmdline_ptr = cmdlineNext(cmdline_ptr, cmdline_end - cmdline_ptr);
    }
    return result;
}
   8353a:	4620      	mov	r0, r4
   8353c:	b003      	add	sp, #12
   8353e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83542:	bf00      	nop
   83544:	0008da80 	.word	0x0008da80

00083548 <SCPI_Init>:
 * @param context
 * @param command_list
 * @param buffer
 * @param interface
 */
void SCPI_Init(scpi_t * context) {
   83548:	b508      	push	{r3, lr}
    context->buffer.position = 0;
   8354a:	f04f 0200 	mov.w	r2, #0
   8354e:	6082      	str	r2, [r0, #8]
    SCPI_ErrorInit(context);
   83550:	f642 2155 	movw	r1, #10837	; 0x2a55
   83554:	f2c0 0108 	movt	r1, #8
   83558:	4788      	blx	r1
   8355a:	bd08      	pop	{r3, pc}

0008355c <SCPI_Input>:
 * @param context
 * @param data - data to process
 * @param len - length of data
 * @return 
 */
int SCPI_Input(scpi_t * context, const char * data, size_t len) {
   8355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8355e:	4604      	mov	r4, r0
    int result = 0;
    const char * cmd_term;
	if (len == 0) {
   83560:	4615      	mov	r5, r2
   83562:	b972      	cbnz	r2, 83582 <SCPI_Input+0x26>
        context->buffer.data[context->buffer.position] = 0;
   83564:	68c1      	ldr	r1, [r0, #12]
   83566:	6882      	ldr	r2, [r0, #8]
   83568:	f04f 0600 	mov.w	r6, #0
   8356c:	548e      	strb	r6, [r1, r2]
        result = SCPI_Parse(context, context->buffer.data, context->buffer.position);
   8356e:	68e1      	ldr	r1, [r4, #12]
   83570:	68a2      	ldr	r2, [r4, #8]
   83572:	f243 35d1 	movw	r5, #13265	; 0x33d1
   83576:	f2c0 0508 	movt	r5, #8
   8357a:	47a8      	blx	r5
   8357c:	4605      	mov	r5, r0
        context->buffer.position = 0;
   8357e:	60a6      	str	r6, [r4, #8]
   83580:	e049      	b.n	83616 <SCPI_Input+0xba>
    } else {
        size_t buffer_free;
        int ws;
        buffer_free = context->buffer.length - context->buffer.position;
   83582:	6883      	ldr	r3, [r0, #8]
   83584:	6842      	ldr	r2, [r0, #4]
   83586:	f102 30ff 	add.w	r0, r2, #4294967295
        if (len > (buffer_free - 1)) {
   8358a:	1ac2      	subs	r2, r0, r3
   8358c:	4295      	cmp	r5, r2
   8358e:	d83d      	bhi.n	8360c <SCPI_Input+0xb0>
            return -1;
        }
        memcpy(&context->buffer.data[context->buffer.position], data, len);
   83590:	68e7      	ldr	r7, [r4, #12]
   83592:	18f8      	adds	r0, r7, r3
   83594:	462a      	mov	r2, r5
   83596:	f64a 53b1 	movw	r3, #44465	; 0xadb1
   8359a:	f2c0 0308 	movt	r3, #8
   8359e:	4798      	blx	r3
        context->buffer.position += len;
   835a0:	68a1      	ldr	r1, [r4, #8]
   835a2:	186d      	adds	r5, r5, r1
   835a4:	60a5      	str	r5, [r4, #8]
        context->buffer.data[context->buffer.position] = 0;
   835a6:	68e0      	ldr	r0, [r4, #12]
   835a8:	f04f 0200 	mov.w	r2, #0
   835ac:	5542      	strb	r2, [r0, r5]

        ws = skipWhitespace(context->buffer.data, context->buffer.position);
   835ae:	68e0      	ldr	r0, [r4, #12]
   835b0:	68a1      	ldr	r1, [r4, #8]
   835b2:	f643 375d 	movw	r7, #15197	; 0x3b5d
   835b6:	f2c0 0708 	movt	r7, #8
   835ba:	47b8      	blx	r7
   835bc:	4605      	mov	r5, r0
        cmd_term = cmdlineTerminator(context->buffer.data + ws, context->buffer.position - ws);
   835be:	68e3      	ldr	r3, [r4, #12]
   835c0:	68a1      	ldr	r1, [r4, #8]
 * @param cmd - input command
 * @param len - max search length
 * @return pointer to command line terminator or NULL
 */
const char * cmdlineTerminator(const char * cmd, size_t len) {
    return strnpbrk(cmd, len, "\r\n");
   835c2:	1818      	adds	r0, r3, r0
   835c4:	1b49      	subs	r1, r1, r5
   835c6:	f64d 52bc 	movw	r2, #56764	; 0xddbc
   835ca:	f2c0 0208 	movt	r2, #8
   835ce:	f243 77ed 	movw	r7, #14317	; 0x37ed
   835d2:	f2c0 0708 	movt	r7, #8
   835d6:	47b8      	blx	r7
        context->buffer.position += len;
        context->buffer.data[context->buffer.position] = 0;

        ws = skipWhitespace(context->buffer.data, context->buffer.position);
        cmd_term = cmdlineTerminator(context->buffer.data + ws, context->buffer.position - ws);
        if (cmd_term != NULL) {
   835d8:	4607      	mov	r7, r0
   835da:	b1d0      	cbz	r0, 83612 <SCPI_Input+0xb6>
            int curr_len = cmd_term - context->buffer.data;
   835dc:	68e2      	ldr	r2, [r4, #12]
   835de:	1a86      	subs	r6, r0, r2
            result = SCPI_Parse(context, context->buffer.data + ws, curr_len - ws);
   835e0:	4620      	mov	r0, r4
   835e2:	1951      	adds	r1, r2, r5
   835e4:	1b72      	subs	r2, r6, r5
   835e6:	f243 35d1 	movw	r5, #13265	; 0x33d1
   835ea:	f2c0 0508 	movt	r5, #8
   835ee:	47a8      	blx	r5
   835f0:	4605      	mov	r5, r0
            memmove(context->buffer.data, cmd_term, context->buffer.position - curr_len);
   835f2:	68a3      	ldr	r3, [r4, #8]
   835f4:	68e0      	ldr	r0, [r4, #12]
   835f6:	4639      	mov	r1, r7
   835f8:	1b9a      	subs	r2, r3, r6
   835fa:	f64a 53c3 	movw	r3, #44483	; 0xadc3
   835fe:	f2c0 0308 	movt	r3, #8
   83602:	4798      	blx	r3
            context->buffer.position -= curr_len;
   83604:	68a0      	ldr	r0, [r4, #8]
   83606:	1b86      	subs	r6, r0, r6
   83608:	60a6      	str	r6, [r4, #8]
   8360a:	e004      	b.n	83616 <SCPI_Input+0xba>
    } else {
        size_t buffer_free;
        int ws;
        buffer_free = context->buffer.length - context->buffer.position;
        if (len > (buffer_free - 1)) {
            return -1;
   8360c:	f04f 35ff 	mov.w	r5, #4294967295
   83610:	e001      	b.n	83616 <SCPI_Input+0xba>
 * @param data - data to process
 * @param len - length of data
 * @return 
 */
int SCPI_Input(scpi_t * context, const char * data, size_t len) {
    int result = 0;
   83612:	f04f 0500 	mov.w	r5, #0
            context->buffer.position -= curr_len;
        }
    }

    return result;
}
   83616:	4628      	mov	r0, r5
   83618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8361a:	bf00      	nop

0008361c <SCPI_ResultString>:
 * Write raw string result to the output
 * @param context
 * @param data
 * @return 
 */
size_t SCPI_ResultString(scpi_t * context, const char * data) {
   8361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8361e:	4604      	mov	r4, r0
   83620:	460d      	mov	r5, r1
    size_t len = strlen(data);
   83622:	4608      	mov	r0, r1
   83624:	f64a 63bd 	movw	r3, #44733	; 0xaebd
   83628:	f2c0 0308 	movt	r3, #8
   8362c:	4798      	blx	r3
   8362e:	4607      	mov	r7, r0
    size_t result = 0;
    result += writeDelimiter(context);
   83630:	4620      	mov	r0, r4
   83632:	f243 21d5 	movw	r1, #13013	; 0x32d5
   83636:	f2c0 0108 	movt	r1, #8
   8363a:	4788      	blx	r1
   8363c:	4606      	mov	r6, r0
    result += writeData(context, data, len);
   8363e:	4620      	mov	r0, r4
   83640:	4629      	mov	r1, r5
   83642:	463a      	mov	r2, r7
   83644:	f243 23c9 	movw	r3, #13001	; 0x32c9
   83648:	f2c0 0308 	movt	r3, #8
   8364c:	4798      	blx	r3
    context->output_count++;
   8364e:	6a22      	ldr	r2, [r4, #32]
   83650:	f102 0201 	add.w	r2, r2, #1
   83654:	6222      	str	r2, [r4, #32]
    return result;
}
   83656:	1980      	adds	r0, r0, r6
   83658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8365a:	bf00      	nop

0008365c <SCPI_ResultInt>:
 * Write integer value to the result
 * @param context
 * @param val
 * @return 
 */
size_t SCPI_ResultInt(scpi_t * context, int32_t val) {
   8365c:	b570      	push	{r4, r5, r6, lr}
   8365e:	b084      	sub	sp, #16
   83660:	4604      	mov	r4, r0
    char buffer[12];
    size_t result = 0;
    size_t len = longToStr(val, buffer, sizeof (buffer));
   83662:	4608      	mov	r0, r1
   83664:	a901      	add	r1, sp, #4
   83666:	f04f 020c 	mov.w	r2, #12
   8366a:	f643 0339 	movw	r3, #14393	; 0x3839
   8366e:	f2c0 0308 	movt	r3, #8
   83672:	4798      	blx	r3
   83674:	4606      	mov	r6, r0
    result += writeDelimiter(context);
   83676:	4620      	mov	r0, r4
   83678:	f243 21d5 	movw	r1, #13013	; 0x32d5
   8367c:	f2c0 0108 	movt	r1, #8
   83680:	4788      	blx	r1
   83682:	4605      	mov	r5, r0
    result += writeData(context, buffer, len);
   83684:	4620      	mov	r0, r4
   83686:	a901      	add	r1, sp, #4
   83688:	4632      	mov	r2, r6
   8368a:	f243 23c9 	movw	r3, #13001	; 0x32c9
   8368e:	f2c0 0308 	movt	r3, #8
   83692:	4798      	blx	r3
    context->output_count++;
   83694:	6a22      	ldr	r2, [r4, #32]
   83696:	f102 0201 	add.w	r2, r2, #1
   8369a:	6222      	str	r2, [r4, #32]
    return result;
}
   8369c:	1940      	adds	r0, r0, r5
   8369e:	b004      	add	sp, #16
   836a0:	bd70      	pop	{r4, r5, r6, pc}
   836a2:	bf00      	nop

000836a4 <SCPI_ResultText>:
 * Write string withn " to the result
 * @param context
 * @param data
 * @return 
 */
size_t SCPI_ResultText(scpi_t * context, const char * data) {
   836a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   836a8:	4604      	mov	r4, r0
   836aa:	460f      	mov	r7, r1
    size_t result = 0;
    result += writeDelimiter(context);
   836ac:	f243 23d5 	movw	r3, #13013	; 0x32d5
   836b0:	f2c0 0308 	movt	r3, #8
   836b4:	4798      	blx	r3
   836b6:	4680      	mov	r8, r0
    result += writeData(context, "\"", 1);
   836b8:	f64d 6610 	movw	r6, #56848	; 0xde10
   836bc:	f2c0 0608 	movt	r6, #8
   836c0:	4620      	mov	r0, r4
   836c2:	4631      	mov	r1, r6
   836c4:	f04f 0201 	mov.w	r2, #1
   836c8:	f243 25c9 	movw	r5, #13001	; 0x32c9
   836cc:	f2c0 0508 	movt	r5, #8
   836d0:	47a8      	blx	r5
   836d2:	4480      	add	r8, r0
    result += writeData(context, data, strlen(data));
   836d4:	4638      	mov	r0, r7
   836d6:	f64a 61bd 	movw	r1, #44733	; 0xaebd
   836da:	f2c0 0108 	movt	r1, #8
   836de:	4788      	blx	r1
   836e0:	4602      	mov	r2, r0
   836e2:	4620      	mov	r0, r4
   836e4:	4639      	mov	r1, r7
   836e6:	47a8      	blx	r5
   836e8:	eb08 0700 	add.w	r7, r8, r0
    result += writeData(context, "\"", 1);
   836ec:	4620      	mov	r0, r4
   836ee:	4631      	mov	r1, r6
   836f0:	f04f 0201 	mov.w	r2, #1
   836f4:	47a8      	blx	r5
    context->output_count++;
   836f6:	6a22      	ldr	r2, [r4, #32]
   836f8:	f102 0201 	add.w	r2, r2, #1
   836fc:	6222      	str	r2, [r4, #32]
    return result;
}
   836fe:	1838      	adds	r0, r7, r0
   83700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083704 <SCPI_ParamString>:
 * @param value
 * @param len
 * @param mandatory
 * @return 
 */
bool_t SCPI_ParamString(scpi_t * context, const char ** value, size_t * len, bool_t mandatory) {
   83704:	b570      	push	{r4, r5, r6, lr}
   83706:	b082      	sub	sp, #8
   83708:	4604      	mov	r4, r0
   8370a:	4615      	mov	r5, r2
    size_t length;

    if (!value || !len) {
   8370c:	460e      	mov	r6, r1
   8370e:	b319      	cbz	r1, 83758 <SCPI_ParamString+0x54>
   83710:	b32a      	cbz	r2, 8375e <SCPI_ParamString+0x5a>
        return FALSE;
    }

    if (!paramNext(context, mandatory)) {
   83712:	4619      	mov	r1, r3
   83714:	f243 3335 	movw	r3, #13109	; 0x3335
   83718:	f2c0 0308 	movt	r3, #8
   8371c:	4798      	blx	r3
   8371e:	b308      	cbz	r0, 83764 <SCPI_ParamString+0x60>
        return FALSE;
    }

    if (locateStr(context->paramlist.parameters, context->paramlist.length, value, &length)) {
   83720:	6960      	ldr	r0, [r4, #20]
   83722:	69a1      	ldr	r1, [r4, #24]
   83724:	4632      	mov	r2, r6
   83726:	ab01      	add	r3, sp, #4
   83728:	f643 168d 	movw	r6, #14733	; 0x398d
   8372c:	f2c0 0608 	movt	r6, #8
   83730:	47b0      	blx	r6
   83732:	b1d0      	cbz	r0, 8376a <SCPI_ParamString+0x66>
        paramSkipBytes(context, length);
   83734:	4620      	mov	r0, r4
   83736:	9901      	ldr	r1, [sp, #4]
   83738:	f243 22fd 	movw	r2, #13053	; 0x32fd
   8373c:	f2c0 0208 	movt	r2, #8
   83740:	4790      	blx	r2
        paramSkipWhitespace(context);
   83742:	4620      	mov	r0, r4
   83744:	f243 3111 	movw	r1, #13073	; 0x3311
   83748:	f2c0 0108 	movt	r1, #8
   8374c:	4788      	blx	r1
        if (len) {
            *len = length;
   8374e:	9801      	ldr	r0, [sp, #4]
   83750:	6028      	str	r0, [r5, #0]
        }
        return TRUE;
   83752:	f04f 0001 	mov.w	r0, #1
   83756:	e00a      	b.n	8376e <SCPI_ParamString+0x6a>
 */
bool_t SCPI_ParamString(scpi_t * context, const char ** value, size_t * len, bool_t mandatory) {
    size_t length;

    if (!value || !len) {
        return FALSE;
   83758:	f04f 0000 	mov.w	r0, #0
   8375c:	e007      	b.n	8376e <SCPI_ParamString+0x6a>
   8375e:	f04f 0000 	mov.w	r0, #0
   83762:	e004      	b.n	8376e <SCPI_ParamString+0x6a>
    }

    if (!paramNext(context, mandatory)) {
        return FALSE;
   83764:	f04f 0000 	mov.w	r0, #0
   83768:	e001      	b.n	8376e <SCPI_ParamString+0x6a>
            *len = length;
        }
        return TRUE;
    }

    return FALSE;
   8376a:	f04f 0000 	mov.w	r0, #0
}
   8376e:	b002      	add	sp, #8
   83770:	bd70      	pop	{r4, r5, r6, pc}
   83772:	bf00      	nop

00083774 <SCPI_ParamInt>:
 * @param context
 * @param value
 * @param mandatory
 * @return 
 */
bool_t SCPI_ParamInt(scpi_t * context, int32_t * value, bool_t mandatory) {
   83774:	b570      	push	{r4, r5, r6, lr}
   83776:	b082      	sub	sp, #8
   83778:	4604      	mov	r4, r0
   8377a:	4613      	mov	r3, r2
    const char * param;
    size_t param_len;
    size_t num_len;

    if (!value) {
   8377c:	460e      	mov	r6, r1
   8377e:	b1e1      	cbz	r1, 837ba <SCPI_ParamInt+0x46>
        return FALSE;
    }

    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
   83780:	a901      	add	r1, sp, #4
   83782:	466a      	mov	r2, sp
   83784:	f243 7505 	movw	r5, #14085	; 0x3705
   83788:	f2c0 0508 	movt	r5, #8
   8378c:	47a8      	blx	r5
   8378e:	b1b8      	cbz	r0, 837c0 <SCPI_ParamInt+0x4c>
        return FALSE;
    }

    num_len = strToLong(param, value);
   83790:	9801      	ldr	r0, [sp, #4]
   83792:	4631      	mov	r1, r6
   83794:	f643 1341 	movw	r3, #14657	; 0x3941
   83798:	f2c0 0308 	movt	r3, #8
   8379c:	4798      	blx	r3

    if (num_len != param_len) {
   8379e:	9900      	ldr	r1, [sp, #0]
   837a0:	4288      	cmp	r0, r1
   837a2:	d010      	beq.n	837c6 <SCPI_ParamInt+0x52>
        SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
   837a4:	4620      	mov	r0, r4
   837a6:	f06f 0189 	mvn.w	r1, #137	; 0x89
   837aa:	f642 22c9 	movw	r2, #10953	; 0x2ac9
   837ae:	f2c0 0208 	movt	r2, #8
   837b2:	4790      	blx	r2
        return FALSE;
   837b4:	f04f 0000 	mov.w	r0, #0
   837b8:	e007      	b.n	837ca <SCPI_ParamInt+0x56>
    const char * param;
    size_t param_len;
    size_t num_len;

    if (!value) {
        return FALSE;
   837ba:	f04f 0000 	mov.w	r0, #0
   837be:	e004      	b.n	837ca <SCPI_ParamInt+0x56>
    }

    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
        return FALSE;
   837c0:	f04f 0000 	mov.w	r0, #0
   837c4:	e001      	b.n	837ca <SCPI_ParamInt+0x56>
    if (num_len != param_len) {
        SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
        return FALSE;
    }

    return TRUE;
   837c6:	f04f 0001 	mov.w	r0, #1
}
   837ca:	b002      	add	sp, #8
   837cc:	bd70      	pop	{r4, r5, r6, pc}
   837ce:	bf00      	nop

000837d0 <isFinalState>:
 */
static bool_t isFinalState(locate_text_states state) {
    return (
        ((state) == STATE_COMMA)
        || ((state) == STATE_LAST_WHITESPACE)
        || ((state) == STATE_TEXT) ||
   837d0:	f1a0 0302 	sub.w	r3, r0, #2
   837d4:	b2d9      	uxtb	r1, r3
   837d6:	2902      	cmp	r1, #2
   837d8:	d904      	bls.n	837e4 <isFinalState+0x14>
   837da:	f1d0 0001 	rsbs	r0, r0, #1
   837de:	bf38      	it	cc
   837e0:	2000      	movcc	r0, #0
   837e2:	4770      	bx	lr
   837e4:	f04f 0001 	mov.w	r0, #1
        ((state) == STATE_FIRST_WHITESPACE)
    );
}
   837e8:	4770      	bx	lr
   837ea:	bf00      	nop

000837ec <strnpbrk>:
 * @param str
 * @param size
 * @param set
 * @return 
 */
char * strnpbrk(const char *str, size_t size, const char *set) {
   837ec:	b470      	push	{r4, r5, r6}
    const char *scanp;
    long c, sc;
    const char * strend = str + size;
   837ee:	1841      	adds	r1, r0, r1

    while ((strend != str) && ((c = *str++) != 0)) {
   837f0:	4288      	cmp	r0, r1
   837f2:	d01a      	beq.n	8382a <strnpbrk+0x3e>
   837f4:	4603      	mov	r3, r0
   837f6:	f813 6b01 	ldrb.w	r6, [r3], #1
   837fa:	b936      	cbnz	r6, 8380a <strnpbrk+0x1e>
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
                return ((char *) (str - 1));
    }
    return (NULL);
   837fc:	f04f 0000 	mov.w	r0, #0
   83800:	e018      	b.n	83834 <strnpbrk+0x48>
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
   83802:	42b5      	cmp	r5, r6
   83804:	d102      	bne.n	8380c <strnpbrk+0x20>
   83806:	e015      	b.n	83834 <strnpbrk+0x48>
char * strnpbrk(const char *str, size_t size, const char *set) {
    const char *scanp;
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
   83808:	4623      	mov	r3, r4
   8380a:	4614      	mov	r4, r2
        for (scanp = set; (sc = *scanp++) != '\0';)
   8380c:	f814 5b01 	ldrb.w	r5, [r4], #1
   83810:	2d00      	cmp	r5, #0
   83812:	d1f6      	bne.n	83802 <strnpbrk+0x16>
char * strnpbrk(const char *str, size_t size, const char *set) {
    const char *scanp;
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
   83814:	428b      	cmp	r3, r1
   83816:	d00b      	beq.n	83830 <strnpbrk+0x44>
   83818:	461c      	mov	r4, r3
   8381a:	f814 6b01 	ldrb.w	r6, [r4], #1
   8381e:	4618      	mov	r0, r3
   83820:	2e00      	cmp	r6, #0
   83822:	d1f1      	bne.n	83808 <strnpbrk+0x1c>
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
                return ((char *) (str - 1));
    }
    return (NULL);
   83824:	f04f 0000 	mov.w	r0, #0
   83828:	e004      	b.n	83834 <strnpbrk+0x48>
   8382a:	f04f 0000 	mov.w	r0, #0
   8382e:	e001      	b.n	83834 <strnpbrk+0x48>
   83830:	f04f 0000 	mov.w	r0, #0
}
   83834:	bc70      	pop	{r4, r5, r6}
   83836:	4770      	bx	lr

00083838 <longToStr>:
 * @param val   integer value
 * @param str   converted textual representation
 * @param len   string buffer length
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
   83838:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t x = 1000000000L;
    int_fast8_t digit;
    size_t pos = 0;

    if (val == 0) {
   8383a:	4603      	mov	r3, r0
   8383c:	b938      	cbnz	r0, 8384e <longToStr+0x16>
        if (pos < len) str[pos++] = '0';
   8383e:	2a00      	cmp	r2, #0
   83840:	d055      	beq.n	838ee <longToStr+0xb6>
   83842:	f04f 0030 	mov.w	r0, #48	; 0x30
   83846:	7008      	strb	r0, [r1, #0]
   83848:	f04f 0001 	mov.w	r0, #1
   8384c:	e049      	b.n	838e2 <longToStr+0xaa>
    } else {
        if (val < 0) {
   8384e:	2800      	cmp	r0, #0
   83850:	da08      	bge.n	83864 <longToStr+0x2c>
            val = -val;
   83852:	f1c0 0300 	rsb	r3, r0, #0
            if (pos < len) str[pos++] = '-';
   83856:	b142      	cbz	r2, 8386a <longToStr+0x32>
   83858:	f04f 002d 	mov.w	r0, #45	; 0x2d
   8385c:	7008      	strb	r0, [r1, #0]
   8385e:	f04f 0001 	mov.w	r0, #1
   83862:	e004      	b.n	8386e <longToStr+0x36>
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
    uint32_t x = 1000000000L;
    int_fast8_t digit;
    size_t pos = 0;
   83864:	f04f 0000 	mov.w	r0, #0
   83868:	e001      	b.n	8386e <longToStr+0x36>
   8386a:	f04f 0000 	mov.w	r0, #0
        if (val < 0) {
            val = -val;
            if (pos < len) str[pos++] = '-';
        }

        while ((val / x) == 0) {
   8386e:	461d      	mov	r5, r3
   83870:	f64c 14ff 	movw	r4, #51711	; 0xc9ff
   83874:	f6c3 349a 	movt	r4, #15258	; 0x3b9a
   83878:	42a3      	cmp	r3, r4
   8387a:	d810      	bhi.n	8389e <longToStr+0x66>
   8387c:	f44f 434a 	mov.w	r3, #51712	; 0xca00
   83880:	f6c3 339a 	movt	r3, #15258	; 0x3b9a
            x /= 10;
   83884:	f64c 46cd 	movw	r6, #52429	; 0xcccd
   83888:	f6cc 46cc 	movt	r6, #52428	; 0xcccc
   8388c:	fba6 4303 	umull	r4, r3, r6, r3
   83890:	ea4f 03d3 	mov.w	r3, r3, lsr #3
        if (val < 0) {
            val = -val;
            if (pos < len) str[pos++] = '-';
        }

        while ((val / x) == 0) {
   83894:	fbb5 f4f3 	udiv	r4, r5, r3
   83898:	2c00      	cmp	r4, #0
   8389a:	d0f7      	beq.n	8388c <longToStr+0x54>
   8389c:	e003      	b.n	838a6 <longToStr+0x6e>
   8389e:	f44f 434a 	mov.w	r3, #51712	; 0xca00
   838a2:	f6c3 339a 	movt	r3, #15258	; 0x3b9a
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   838a6:	4282      	cmp	r2, r0
   838a8:	d933      	bls.n	83912 <longToStr+0xda>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   838aa:	fbb5 f6f3 	udiv	r6, r5, r3
            break;
        }
    }
    
    return result;
}
   838ae:	b2f6      	uxtb	r6, r6

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
            val -= digit * x;
            x /= 10;
   838b0:	f64c 47cd 	movw	r7, #52429	; 0xcccd
   838b4:	f6cc 47cc 	movt	r7, #52428	; 0xcccc
   838b8:	ea6f 0400 	mvn.w	r4, r0
   838bc:	18a4      	adds	r4, r4, r2
   838be:	f014 0f01 	tst.w	r4, #1
   838c2:	d128      	bne.n	83916 <longToStr+0xde>
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   838c4:	f106 0430 	add.w	r4, r6, #48	; 0x30
   838c8:	540c      	strb	r4, [r1, r0]
   838ca:	f100 0401 	add.w	r4, r0, #1
   838ce:	4620      	mov	r0, r4
            val -= digit * x;
   838d0:	fb03 5516 	mls	r5, r3, r6, r5
            x /= 10;
   838d4:	fba7 6303 	umull	r6, r3, r7, r3
        } while (x && (pos < len));
   838d8:	08db      	lsrs	r3, r3, #3
   838da:	d002      	beq.n	838e2 <longToStr+0xaa>
   838dc:	42a2      	cmp	r2, r4
   838de:	d809      	bhi.n	838f4 <longToStr+0xbc>
   838e0:	e017      	b.n	83912 <longToStr+0xda>
    }

    if (pos < len) str[pos] = 0;
   838e2:	4290      	cmp	r0, r2
   838e4:	d215      	bcs.n	83912 <longToStr+0xda>
   838e6:	f04f 0200 	mov.w	r2, #0
   838ea:	540a      	strb	r2, [r1, r0]
   838ec:	e011      	b.n	83912 <longToStr+0xda>
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
    uint32_t x = 1000000000L;
    int_fast8_t digit;
    size_t pos = 0;
   838ee:	f04f 0000 	mov.w	r0, #0
   838f2:	e00e      	b.n	83912 <longToStr+0xda>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   838f4:	fbb5 f0f3 	udiv	r0, r5, r3
            break;
        }
    }
    
    return result;
}
   838f8:	b2c6      	uxtb	r6, r0
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   838fa:	f106 0030 	add.w	r0, r6, #48	; 0x30
   838fe:	5508      	strb	r0, [r1, r4]
   83900:	f104 0001 	add.w	r0, r4, #1
            val -= digit * x;
   83904:	fb03 5516 	mls	r5, r3, r6, r5
            x /= 10;
   83908:	fba7 4303 	umull	r4, r3, r7, r3
        } while (x && (pos < len));
   8390c:	08db      	lsrs	r3, r3, #3
   8390e:	d113      	bne.n	83938 <longToStr+0x100>
   83910:	e7e7      	b.n	838e2 <longToStr+0xaa>
    }

    if (pos < len) str[pos] = 0;
    return pos;
}
   83912:	bcf0      	pop	{r4, r5, r6, r7}
   83914:	4770      	bx	lr
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   83916:	f106 0430 	add.w	r4, r6, #48	; 0x30
   8391a:	540c      	strb	r4, [r1, r0]
   8391c:	f100 0001 	add.w	r0, r0, #1
            val -= digit * x;
   83920:	fb03 5516 	mls	r5, r3, r6, r5
            x /= 10;
   83924:	fba7 6303 	umull	r6, r3, r7, r3
        } while (x && (pos < len));
   83928:	08db      	lsrs	r3, r3, #3
   8392a:	d0da      	beq.n	838e2 <longToStr+0xaa>
   8392c:	4282      	cmp	r2, r0
   8392e:	d9f0      	bls.n	83912 <longToStr+0xda>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   83930:	fbb5 f6f3 	udiv	r6, r5, r3
            break;
        }
    }
    
    return result;
}
   83934:	b2f6      	uxtb	r6, r6
   83936:	e7c5      	b.n	838c4 <longToStr+0x8c>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   83938:	fbb5 f6f3 	udiv	r6, r5, r3
            break;
        }
    }
    
    return result;
}
   8393c:	b2f6      	uxtb	r6, r6
   8393e:	e7c1      	b.n	838c4 <longToStr+0x8c>

00083940 <strToLong>:
 * Converts string to signed 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strToLong(const char * str, int32_t * val) {
   83940:	b530      	push	{r4, r5, lr}
   83942:	b083      	sub	sp, #12
   83944:	4604      	mov	r4, r0
   83946:	460d      	mov	r5, r1
    char * endptr;
    *val = strtol(str, &endptr, 0);
   83948:	a901      	add	r1, sp, #4
   8394a:	f04f 0200 	mov.w	r2, #0
   8394e:	f24b 0365 	movw	r3, #45157	; 0xb065
   83952:	f2c0 0308 	movt	r3, #8
   83956:	4798      	blx	r3
   83958:	6028      	str	r0, [r5, #0]
    return endptr - str;
}
   8395a:	9801      	ldr	r0, [sp, #4]
   8395c:	1b00      	subs	r0, r0, r4
   8395e:	b003      	add	sp, #12
   83960:	bd30      	pop	{r4, r5, pc}
   83962:	bf00      	nop

00083964 <compareStr>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
   83964:	b510      	push	{r4, lr}
   83966:	460c      	mov	r4, r1
    if (len1 != len2) {
   83968:	4299      	cmp	r1, r3
   8396a:	d10b      	bne.n	83984 <compareStr+0x20>
        return FALSE;
    }

    if (SCPI_strncasecmp(str1, str2, len2) == 0) {
   8396c:	4611      	mov	r1, r2
   8396e:	4622      	mov	r2, r4
   83970:	f64a 63cd 	movw	r3, #44749	; 0xaecd
   83974:	f2c0 0308 	movt	r3, #8
   83978:	4798      	blx	r3
   8397a:	f1d0 0001 	rsbs	r0, r0, #1
   8397e:	bf38      	it	cc
   83980:	2000      	movcc	r0, #0
   83982:	bd10      	pop	{r4, pc}
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
    if (len1 != len2) {
        return FALSE;
   83984:	f04f 0000 	mov.w	r0, #0
    if (SCPI_strncasecmp(str1, str2, len2) == 0) {
        return TRUE;
    }

    return FALSE;
}
   83988:	bd10      	pop	{r4, pc}
   8398a:	bf00      	nop

0008398c <locateStr>:
 * @param len1 length of string
 * @param str2 result
 * @param len2 length of result
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
   8398c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83990:	b083      	sub	sp, #12
   83992:	4606      	mov	r6, r0
   83994:	9201      	str	r2, [sp, #4]
   83996:	4699      	mov	r9, r3
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   83998:	460b      	mov	r3, r1
   8399a:	2900      	cmp	r1, #0
   8399c:	d03e      	beq.n	83a1c <locateStr+0x90>
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   8399e:	f240 22ac 	movw	r2, #684	; 0x2ac
   839a2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   839a6:	f8d2 e000 	ldr.w	lr, [r2]
   839aa:	f04f 0501 	mov.w	r5, #1
   839ae:	f04f 0400 	mov.w	r4, #0
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;
   839b2:	4627      	mov	r7, r4
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
   839b4:	46a0      	mov	r8, r4
            } else if (c == ',') {
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
                nfa->stopIdx = nfa->i + 1;
                nfa->state = STATE_TEXT;
   839b6:	f04f 0b02 	mov.w	fp, #2
   839ba:	ea6f 0104 	mvn.w	r1, r4
   839be:	18c9      	adds	r1, r1, r3
   839c0:	4029      	ands	r1, r5
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   839c2:	5d00      	ldrb	r0, [r0, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   839c4:	4622      	mov	r2, r4
   839c6:	2c00      	cmp	r4, #0
   839c8:	d04f      	beq.n	83a6a <locateStr+0xde>
   839ca:	e062      	b.n	83a92 <locateStr+0x106>
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   839cc:	5d31      	ldrb	r1, [r6, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   839ce:	b112      	cbz	r2, 839d6 <locateStr+0x4a>
   839d0:	2a02      	cmp	r2, #2
   839d2:	d11b      	bne.n	83a0c <locateStr+0x80>
   839d4:	e00f      	b.n	839f6 <locateStr+0x6a>
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   839d6:	eb0e 0001 	add.w	r0, lr, r1
   839da:	7840      	ldrb	r0, [r0, #1]
   839dc:	f000 0008 	and.w	r0, r0, #8
   839e0:	b2c0      	uxtb	r0, r0
   839e2:	b110      	cbz	r0, 839ea <locateStr+0x5e>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   839e4:	462f      	mov	r7, r5
   839e6:	46a8      	mov	r8, r5
   839e8:	e010      	b.n	83a0c <locateStr+0x80>
            } else if (c == ',') {
   839ea:	292c      	cmp	r1, #44	; 0x2c
   839ec:	d01b      	beq.n	83a26 <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   839ee:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   839f0:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   839f2:	465a      	mov	r2, fp
   839f4:	e00a      	b.n	83a0c <locateStr+0x80>
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   839f6:	292c      	cmp	r1, #44	; 0x2c
   839f8:	d018      	beq.n	83a2c <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   839fa:	eb0e 0001 	add.w	r0, lr, r1
   839fe:	7841      	ldrb	r1, [r0, #1]
   83a00:	f001 0008 	and.w	r0, r1, #8
   83a04:	b2c1      	uxtb	r1, r0
                nfa->stopIdx = nfa->i + 1;
   83a06:	2900      	cmp	r1, #0
   83a08:	bf08      	it	eq
   83a0a:	462f      	moveq	r7, r5
   83a0c:	f104 0401 	add.w	r4, r4, #1
   83a10:	f105 0501 	add.w	r5, r5, #1
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   83a14:	5d31      	ldrb	r1, [r6, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   83a16:	2a00      	cmp	r2, #0
   83a18:	d076      	beq.n	83b08 <locateStr+0x17c>
   83a1a:	e089      	b.n	83b30 <locateStr+0x1a4>
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;
   83a1c:	f04f 0700 	mov.w	r7, #0
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
   83a20:	46b8      	mov	r8, r7
 * @param len2 length of result
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
   83a22:	463a      	mov	r2, r7
   83a24:	e004      	b.n	83a30 <locateStr+0xa4>
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   83a26:	f04f 0204 	mov.w	r2, #4
   83a2a:	e001      	b.n	83a30 <locateStr+0xa4>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   83a2c:	f04f 0204 	mov.w	r2, #4
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
            break;
        }
    }

    if (isFinalState(nfa.state)) {
   83a30:	4610      	mov	r0, r2
   83a32:	f243 73d1 	movw	r3, #14289	; 0x37d1
   83a36:	f2c0 0308 	movt	r3, #8
   83a3a:	4798      	blx	r3
   83a3c:	b168      	cbz	r0, 83a5a <locateStr+0xce>

        if (str2) {
   83a3e:	9a01      	ldr	r2, [sp, #4]
   83a40:	b10a      	cbz	r2, 83a46 <locateStr+0xba>
            *str2 = &str1[nfa.startIdx];
   83a42:	4446      	add	r6, r8
   83a44:	6016      	str	r6, [r2, #0]
        }

        if (len2) {
   83a46:	f1b9 0f00 	cmp.w	r9, #0
   83a4a:	d009      	beq.n	83a60 <locateStr+0xd4>
            *len2 = nfa.stopIdx - nfa.startIdx;
   83a4c:	ebc8 0707 	rsb	r7, r8, r7
   83a50:	f8c9 7000 	str.w	r7, [r9]
        }
        return TRUE;
   83a54:	f04f 0001 	mov.w	r0, #1
   83a58:	e004      	b.n	83a64 <locateStr+0xd8>
    }
    return FALSE;
   83a5a:	f04f 0000 	mov.w	r0, #0
   83a5e:	e001      	b.n	83a64 <locateStr+0xd8>
        }

        if (len2) {
            *len2 = nfa.stopIdx - nfa.startIdx;
        }
        return TRUE;
   83a60:	f04f 0001 	mov.w	r0, #1
    }
    return FALSE;
}
   83a64:	b003      	add	sp, #12
   83a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   83a6a:	eb0e 0c00 	add.w	ip, lr, r0
   83a6e:	f89c c001 	ldrb.w	ip, [ip, #1]
   83a72:	f00c 0c08 	and.w	ip, ip, #8
   83a76:	fa5f fc8c 	uxtb.w	ip, ip
   83a7a:	f1bc 0f00 	cmp.w	ip, #0
   83a7e:	d105      	bne.n	83a8c <locateStr+0x100>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   83a80:	282c      	cmp	r0, #44	; 0x2c
   83a82:	d0d0      	beq.n	83a26 <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   83a84:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   83a86:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   83a88:	465a      	mov	r2, fp
   83a8a:	e00e      	b.n	83aaa <locateStr+0x11e>
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   83a8c:	462f      	mov	r7, r5
   83a8e:	46a8      	mov	r8, r5
   83a90:	e00b      	b.n	83aaa <locateStr+0x11e>
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   83a92:	2c02      	cmp	r4, #2
   83a94:	d109      	bne.n	83aaa <locateStr+0x11e>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   83a96:	282c      	cmp	r0, #44	; 0x2c
   83a98:	d0c8      	beq.n	83a2c <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   83a9a:	4470      	add	r0, lr
   83a9c:	7840      	ldrb	r0, [r0, #1]
   83a9e:	f000 0008 	and.w	r0, r0, #8
   83aa2:	b2c0      	uxtb	r0, r0
                nfa->stopIdx = nfa->i + 1;
   83aa4:	2800      	cmp	r0, #0
   83aa6:	bf08      	it	eq
   83aa8:	462f      	moveq	r7, r5
   83aaa:	f104 0401 	add.w	r4, r4, #1
   83aae:	f105 0501 	add.w	r5, r5, #1
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   83ab2:	429c      	cmp	r4, r3
   83ab4:	d0bc      	beq.n	83a30 <locateStr+0xa4>
   83ab6:	2900      	cmp	r1, #0
   83ab8:	d088      	beq.n	839cc <locateStr+0x40>
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   83aba:	5d31      	ldrb	r1, [r6, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   83abc:	b97a      	cbnz	r2, 83ade <locateStr+0x152>
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   83abe:	eb0e 0001 	add.w	r0, lr, r1
   83ac2:	7840      	ldrb	r0, [r0, #1]
   83ac4:	f000 0008 	and.w	r0, r0, #8
   83ac8:	b2c0      	uxtb	r0, r0
   83aca:	b928      	cbnz	r0, 83ad8 <locateStr+0x14c>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   83acc:	292c      	cmp	r1, #44	; 0x2c
   83ace:	d0aa      	beq.n	83a26 <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   83ad0:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   83ad2:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   83ad4:	465a      	mov	r2, fp
   83ad6:	e00f      	b.n	83af8 <locateStr+0x16c>
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   83ad8:	462f      	mov	r7, r5
   83ada:	46a8      	mov	r8, r5
   83adc:	e00c      	b.n	83af8 <locateStr+0x16c>
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   83ade:	2a02      	cmp	r2, #2
   83ae0:	d10a      	bne.n	83af8 <locateStr+0x16c>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   83ae2:	292c      	cmp	r1, #44	; 0x2c
   83ae4:	d0a2      	beq.n	83a2c <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   83ae6:	eb0e 0001 	add.w	r0, lr, r1
   83aea:	7841      	ldrb	r1, [r0, #1]
   83aec:	f001 0008 	and.w	r0, r1, #8
   83af0:	b2c1      	uxtb	r1, r0
                nfa->stopIdx = nfa->i + 1;
   83af2:	2900      	cmp	r1, #0
   83af4:	bf08      	it	eq
   83af6:	462f      	moveq	r7, r5
   83af8:	f104 0401 	add.w	r4, r4, #1
   83afc:	f105 0501 	add.w	r5, r5, #1
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   83b00:	429c      	cmp	r4, r3
   83b02:	f47f af63 	bne.w	839cc <locateStr+0x40>
   83b06:	e793      	b.n	83a30 <locateStr+0xa4>
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   83b08:	eb0e 0a01 	add.w	sl, lr, r1
   83b0c:	f89a a001 	ldrb.w	sl, [sl, #1]
   83b10:	f00a 0a08 	and.w	sl, sl, #8
   83b14:	fa5f fa8a 	uxtb.w	sl, sl
   83b18:	f1ba 0f00 	cmp.w	sl, #0
   83b1c:	d105      	bne.n	83b2a <locateStr+0x19e>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   83b1e:	292c      	cmp	r1, #44	; 0x2c
   83b20:	d081      	beq.n	83a26 <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   83b22:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   83b24:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   83b26:	465a      	mov	r2, fp
   83b28:	e00f      	b.n	83b4a <locateStr+0x1be>
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   83b2a:	462f      	mov	r7, r5
   83b2c:	46a8      	mov	r8, r5
   83b2e:	e00c      	b.n	83b4a <locateStr+0x1be>
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   83b30:	2a02      	cmp	r2, #2
   83b32:	d10a      	bne.n	83b4a <locateStr+0x1be>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   83b34:	292c      	cmp	r1, #44	; 0x2c
   83b36:	f43f af79 	beq.w	83a2c <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   83b3a:	4471      	add	r1, lr
   83b3c:	7849      	ldrb	r1, [r1, #1]
   83b3e:	f001 0108 	and.w	r1, r1, #8
   83b42:	b2c9      	uxtb	r1, r1
                nfa->stopIdx = nfa->i + 1;
   83b44:	2900      	cmp	r1, #0
   83b46:	bf08      	it	eq
   83b48:	462f      	moveq	r7, r5
   83b4a:	f104 0401 	add.w	r4, r4, #1
   83b4e:	f105 0501 	add.w	r5, r5, #1
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   83b52:	429c      	cmp	r4, r3
   83b54:	f47f af3a 	bne.w	839cc <locateStr+0x40>
   83b58:	e76a      	b.n	83a30 <locateStr+0xa4>
   83b5a:	bf00      	nop

00083b5c <skipWhitespace>:
 * Count white spaces from the beggining
 * @param cmd - command
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
   83b5c:	b470      	push	{r4, r5, r6}
    size_t i;
    for (i = 0; i < len; i++) {
   83b5e:	460e      	mov	r6, r1
   83b60:	b311      	cbz	r1, 83ba8 <skipWhitespace+0x4c>
        if (!isspace((unsigned char)cmd[i])) {
   83b62:	f240 23ac 	movw	r3, #684	; 0x2ac
   83b66:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83b6a:	681c      	ldr	r4, [r3, #0]
   83b6c:	7801      	ldrb	r1, [r0, #0]
   83b6e:	1862      	adds	r2, r4, r1
   83b70:	7853      	ldrb	r3, [r2, #1]
   83b72:	f003 0108 	and.w	r1, r3, #8
   83b76:	b2ca      	uxtb	r2, r1
   83b78:	b1c2      	cbz	r2, 83bac <skipWhitespace+0x50>
   83b7a:	4603      	mov	r3, r0
   83b7c:	f04f 0000 	mov.w	r0, #0
   83b80:	f016 0f01 	tst.w	r6, #1
   83b84:	d109      	bne.n	83b9a <skipWhitespace+0x3e>
   83b86:	e015      	b.n	83bb4 <skipWhitespace+0x58>
   83b88:	f813 5f01 	ldrb.w	r5, [r3, #1]!
   83b8c:	1961      	adds	r1, r4, r5
   83b8e:	784d      	ldrb	r5, [r1, #1]
   83b90:	f005 0108 	and.w	r1, r5, #8
   83b94:	b2cd      	uxtb	r5, r1
   83b96:	b9cd      	cbnz	r5, 83bcc <skipWhitespace+0x70>
   83b98:	e00a      	b.n	83bb0 <skipWhitespace+0x54>
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   83b9a:	f100 0201 	add.w	r2, r0, #1
   83b9e:	4610      	mov	r0, r2
   83ba0:	42b2      	cmp	r2, r6
   83ba2:	d1f1      	bne.n	83b88 <skipWhitespace+0x2c>
        if (!isspace((unsigned char)cmd[i])) {
            return i;
        }
    }
    return len;
   83ba4:	4630      	mov	r0, r6
   83ba6:	e003      	b.n	83bb0 <skipWhitespace+0x54>
   83ba8:	4608      	mov	r0, r1
   83baa:	e001      	b.n	83bb0 <skipWhitespace+0x54>
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   83bac:	f04f 0000 	mov.w	r0, #0
        if (!isspace((unsigned char)cmd[i])) {
            return i;
        }
    }
    return len;
}
   83bb0:	bc70      	pop	{r4, r5, r6}
   83bb2:	4770      	bx	lr
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   83bb4:	f100 0001 	add.w	r0, r0, #1
        if (!isspace((unsigned char)cmd[i])) {
   83bb8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   83bbc:	1862      	adds	r2, r4, r1
   83bbe:	7851      	ldrb	r1, [r2, #1]
   83bc0:	f001 0208 	and.w	r2, r1, #8
   83bc4:	b2d1      	uxtb	r1, r2
   83bc6:	2900      	cmp	r1, #0
   83bc8:	d1e7      	bne.n	83b9a <skipWhitespace+0x3e>
   83bca:	e7f1      	b.n	83bb0 <skipWhitespace+0x54>
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   83bcc:	f102 0001 	add.w	r0, r2, #1
        if (!isspace((unsigned char)cmd[i])) {
   83bd0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   83bd4:	18a1      	adds	r1, r4, r2
   83bd6:	784a      	ldrb	r2, [r1, #1]
   83bd8:	f002 0108 	and.w	r1, r2, #8
   83bdc:	b2ca      	uxtb	r2, r1
   83bde:	2a00      	cmp	r2, #0
   83be0:	d1db      	bne.n	83b9a <skipWhitespace+0x3e>
   83be2:	e7e5      	b.n	83bb0 <skipWhitespace+0x54>

00083be4 <matchPattern>:
 * @param pattern_len
 * @param str
 * @param str_len
 * @return 
 */
bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
   83be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83be8:	4680      	mov	r8, r0
   83bea:	4691      	mov	r9, r2
   83bec:	469a      	mov	sl, r3
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   83bee:	468e      	mov	lr, r1
   83bf0:	b321      	cbz	r1, 83c3c <matchPattern+0x58>
   83bf2:	7803      	ldrb	r3, [r0, #0]
   83bf4:	b32b      	cbz	r3, 83c42 <matchPattern+0x5e>
        if (islower((unsigned char)pattern[i])) {
   83bf6:	f240 22ac 	movw	r2, #684	; 0x2ac
   83bfa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83bfe:	6810      	ldr	r0, [r2, #0]
   83c00:	18c1      	adds	r1, r0, r3
   83c02:	784c      	ldrb	r4, [r1, #1]
   83c04:	f004 0503 	and.w	r5, r4, #3
   83c08:	2d02      	cmp	r5, #2
   83c0a:	d01d      	beq.n	83c48 <matchPattern+0x64>
   83c0c:	4642      	mov	r2, r8
   83c0e:	f04f 0400 	mov.w	r4, #0
   83c12:	f01e 0f01 	tst.w	lr, #1
   83c16:	d107      	bne.n	83c28 <matchPattern+0x44>
   83c18:	e02f      	b.n	83c7a <matchPattern+0x96>
   83c1a:	19c7      	adds	r7, r0, r7
   83c1c:	7879      	ldrb	r1, [r7, #1]
   83c1e:	f001 0503 	and.w	r5, r1, #3
   83c22:	2d02      	cmp	r5, #2
   83c24:	d136      	bne.n	83c94 <matchPattern+0xb0>
   83c26:	e011      	b.n	83c4c <matchPattern+0x68>
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   83c28:	f104 0601 	add.w	r6, r4, #1
   83c2c:	4634      	mov	r4, r6
   83c2e:	4576      	cmp	r6, lr
   83c30:	d00c      	beq.n	83c4c <matchPattern+0x68>
   83c32:	f812 7f01 	ldrb.w	r7, [r2, #1]!
   83c36:	2f00      	cmp	r7, #0
   83c38:	d1ef      	bne.n	83c1a <matchPattern+0x36>
   83c3a:	e007      	b.n	83c4c <matchPattern+0x68>
   83c3c:	f04f 0400 	mov.w	r4, #0
   83c40:	e004      	b.n	83c4c <matchPattern+0x68>
   83c42:	f04f 0400 	mov.w	r4, #0
   83c46:	e001      	b.n	83c4c <matchPattern+0x68>
   83c48:	f04f 0400 	mov.w	r4, #0
 * @param str_len
 * @return 
 */
bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
    int pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
    return compareStr(pattern, pattern_len, str, str_len) ||
   83c4c:	4640      	mov	r0, r8
   83c4e:	4671      	mov	r1, lr
   83c50:	464a      	mov	r2, r9
   83c52:	4653      	mov	r3, sl
   83c54:	f643 1565 	movw	r5, #14693	; 0x3965
   83c58:	f2c0 0508 	movt	r5, #8
   83c5c:	47a8      	blx	r5
   83c5e:	b930      	cbnz	r0, 83c6e <matchPattern+0x8a>
            compareStr(pattern, pattern_sep_pos_short, str, str_len);
   83c60:	4640      	mov	r0, r8
   83c62:	4621      	mov	r1, r4
   83c64:	464a      	mov	r2, r9
   83c66:	4653      	mov	r3, sl
   83c68:	462c      	mov	r4, r5
   83c6a:	47a8      	blx	r5
   83c6c:	e001      	b.n	83c72 <matchPattern+0x8e>
 * @param str_len
 * @return 
 */
bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
    int pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
    return compareStr(pattern, pattern_len, str, str_len) ||
   83c6e:	f04f 0001 	mov.w	r0, #1
            compareStr(pattern, pattern_sep_pos_short, str, str_len);
}
   83c72:	f000 0001 	and.w	r0, r0, #1
   83c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   83c7a:	f104 0401 	add.w	r4, r4, #1
   83c7e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   83c82:	2b00      	cmp	r3, #0
   83c84:	d0e2      	beq.n	83c4c <matchPattern+0x68>
        if (islower((unsigned char)pattern[i])) {
   83c86:	18c1      	adds	r1, r0, r3
   83c88:	784d      	ldrb	r5, [r1, #1]
   83c8a:	f005 0303 	and.w	r3, r5, #3
   83c8e:	2b02      	cmp	r3, #2
   83c90:	d1ca      	bne.n	83c28 <matchPattern+0x44>
   83c92:	e7db      	b.n	83c4c <matchPattern+0x68>
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   83c94:	f106 0401 	add.w	r4, r6, #1
   83c98:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   83c9c:	2b00      	cmp	r3, #0
   83c9e:	d0d5      	beq.n	83c4c <matchPattern+0x68>
        if (islower((unsigned char)pattern[i])) {
   83ca0:	18c1      	adds	r1, r0, r3
   83ca2:	784d      	ldrb	r5, [r1, #1]
   83ca4:	f005 0303 	and.w	r3, r5, #3
   83ca8:	2b02      	cmp	r3, #2
   83caa:	d1bd      	bne.n	83c28 <matchPattern+0x44>
   83cac:	e7ce      	b.n	83c4c <matchPattern+0x68>
   83cae:	bf00      	nop

00083cb0 <matchCommand>:
 * @param pattern
 * @param cmd - command
 * @param len - max search length
 * @return TRUE if pattern matches, FALSE otherwise
 */
bool_t matchCommand(const char * pattern, const char * cmd, size_t len) {
   83cb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83cb4:	4605      	mov	r5, r0
   83cb6:	460c      	mov	r4, r1
   83cb8:	4616      	mov	r6, r2
    int result = FALSE;
    
    const char * pattern_ptr = pattern;
    int pattern_len = strlen(pattern);
   83cba:	f64a 63bd 	movw	r3, #44733	; 0xaebd
   83cbe:	f2c0 0308 	movt	r3, #8
   83cc2:	4798      	blx	r3
    const char * pattern_end = pattern + pattern_len;
   83cc4:	eb05 0900 	add.w	r9, r5, r0
    
    const char * cmd_ptr = cmd;
    size_t cmd_len = SCPI_strnlen(cmd, len);
   83cc8:	4620      	mov	r0, r4
   83cca:	4631      	mov	r1, r6
   83ccc:	f64a 723f 	movw	r2, #44863	; 0xaf3f
   83cd0:	f2c0 0208 	movt	r2, #8
   83cd4:	4790      	blx	r2
    const char * cmd_end = cmd + cmd_len;
   83cd6:	eb04 0a00 	add.w	sl, r4, r0
    
    /* TODO: now it is possible to send command ":*IDN?" which is incorrect */
    if (iscolon(cmd_ptr[0])) {
   83cda:	7820      	ldrb	r0, [r4, #0]
   83cdc:	283a      	cmp	r0, #58	; 0x3a
        cmd_len --;
        cmd_ptr ++;
   83cde:	bf08      	it	eq
   83ce0:	3401      	addeq	r4, #1
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorPos(const char * pattern, size_t len) {
    
    char * separator = strnpbrk(pattern, len, "?:[]");
   83ce2:	f64d 4bf4 	movw	fp, #56564	; 0xdcf4
   83ce6:	f2c0 0b08 	movt	fp, #8
   83cea:	f243 78ed 	movw	r8, #14317	; 0x37ed
   83cee:	f2c0 0808 	movt	r8, #8
        cmd_len --;
        cmd_ptr ++;
    }
    
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
   83cf2:	ebc5 0709 	rsb	r7, r5, r9
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorPos(const char * pattern, size_t len) {
    
    char * separator = strnpbrk(pattern, len, "?:[]");
   83cf6:	4628      	mov	r0, r5
   83cf8:	4639      	mov	r1, r7
   83cfa:	465a      	mov	r2, fp
   83cfc:	47c0      	blx	r8
    if (separator == NULL) {
   83cfe:	b100      	cbz	r0, 83d02 <matchCommand+0x52>
        return len;
    } else {
        return separator - pattern;
   83d00:	1b47      	subs	r7, r0, r5
        cmd_ptr ++;
    }
    
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
        int cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_end - cmd_ptr);
   83d02:	ebc4 060a 	rsb	r6, r4, sl
 * @param cmd - input command
 * @param len - max search length
 * @return position of separator or len
 */
size_t cmdSeparatorPos(const char * cmd, size_t len) {
    char * separator = strnpbrk(cmd, len, ":?");
   83d06:	4620      	mov	r0, r4
   83d08:	4631      	mov	r1, r6
   83d0a:	4a1b      	ldr	r2, [pc, #108]	; (83d78 <matchCommand+0xc8>)
   83d0c:	47c0      	blx	r8
    size_t result;
    if (separator == NULL) {
   83d0e:	b100      	cbz	r0, 83d12 <matchCommand+0x62>
        result = len;
    } else {
        result = separator - cmd;
   83d10:	1b06      	subs	r6, r0, r4
    
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
        int cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_end - cmd_ptr);
        
        if (matchPattern(pattern_ptr, pattern_sep_pos, cmd_ptr, cmd_sep_pos)) {
   83d12:	4628      	mov	r0, r5
   83d14:	4639      	mov	r1, r7
   83d16:	4622      	mov	r2, r4
   83d18:	4633      	mov	r3, r6
   83d1a:	f643 3ce5 	movw	ip, #15333	; 0x3be5
   83d1e:	f2c0 0c08 	movt	ip, #8
   83d22:	47e0      	blx	ip
   83d24:	b1c0      	cbz	r0, 83d58 <matchCommand+0xa8>
            pattern_ptr = pattern_ptr + pattern_sep_pos;
   83d26:	19ed      	adds	r5, r5, r7
            cmd_ptr = cmd_ptr + cmd_sep_pos;
   83d28:	19a4      	adds	r4, r4, r6
            result = TRUE;
            
            /* command is complete */
            if ((pattern_ptr == pattern_end) && (cmd_ptr >= cmd_end)) {
   83d2a:	454d      	cmp	r5, r9
   83d2c:	d105      	bne.n	83d3a <matchCommand+0x8a>
   83d2e:	45a2      	cmp	sl, r4
   83d30:	bf8c      	ite	hi
   83d32:	2000      	movhi	r0, #0
   83d34:	2001      	movls	r0, #1
   83d36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                result = FALSE;
                break;
            }
            
            /* command complete, but pattern not */
            if (cmd_ptr >= cmd_end) {
   83d3a:	45a2      	cmp	sl, r4
   83d3c:	d910      	bls.n	83d60 <matchCommand+0xb0>
                result = FALSE;
                break;
            }
            
            /* both command and patter contains command separator at this position */
            if ((pattern_ptr[0] == cmd_ptr[0]) && ((pattern_ptr[0] == ':') || (pattern_ptr[0] == '?'))) {
   83d3e:	7828      	ldrb	r0, [r5, #0]
   83d40:	7822      	ldrb	r2, [r4, #0]
   83d42:	4282      	cmp	r2, r0
   83d44:	d110      	bne.n	83d68 <matchCommand+0xb8>
   83d46:	283a      	cmp	r0, #58	; 0x3a
   83d48:	d001      	beq.n	83d4e <matchCommand+0x9e>
   83d4a:	283f      	cmp	r0, #63	; 0x3f
   83d4c:	d110      	bne.n	83d70 <matchCommand+0xc0>
                pattern_ptr = pattern_ptr + 1;
   83d4e:	f105 0501 	add.w	r5, r5, #1
                cmd_ptr = cmd_ptr + 1;
   83d52:	f104 0401 	add.w	r4, r4, #1
   83d56:	e7cc      	b.n	83cf2 <matchCommand+0x42>
            } else {
                result = FALSE;
                break;
            }
        } else {
            result = FALSE;
   83d58:	f04f 0000 	mov.w	r0, #0
   83d5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                break;
            }
            
            /* command complete, but pattern not */
            if (cmd_ptr >= cmd_end) {
                result = FALSE;
   83d60:	f04f 0000 	mov.w	r0, #0
   83d64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            /* both command and patter contains command separator at this position */
            if ((pattern_ptr[0] == cmd_ptr[0]) && ((pattern_ptr[0] == ':') || (pattern_ptr[0] == '?'))) {
                pattern_ptr = pattern_ptr + 1;
                cmd_ptr = cmd_ptr + 1;
            } else {
                result = FALSE;
   83d68:	f04f 0000 	mov.w	r0, #0
   83d6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d70:	f04f 0000 	mov.w	r0, #0
            break;
        }
    }
    
    return result;
}
   83d74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d78:	0008dcfc 	.word	0x0008dcfc

00083d7c <SCPI_GetModuleType>:
 #include <string.h>
 #include <math.h>
 #include "asf.h"
 
 scpi_result_t SCPI_GetModuleType(scpi_t * context)
 {
   83d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 printf("Low cost dual 10MHz counters v2\x0D");
   83d7e:	f64d 5700 	movw	r7, #56576	; 0xdd00
   83d82:	f2c0 0708 	movt	r7, #8
   83d86:	f641 3588 	movw	r5, #7048	; 0x1b88
   83d8a:	f2c2 0507 	movt	r5, #8199	; 0x2007
   83d8e:	463c      	mov	r4, r7
   83d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   83d92:	6028      	str	r0, [r5, #0]
   83d94:	6069      	str	r1, [r5, #4]
   83d96:	60aa      	str	r2, [r5, #8]
   83d98:	60eb      	str	r3, [r5, #12]
   83d9a:	f105 0510 	add.w	r5, r5, #16
   83d9e:	462e      	mov	r6, r5
   83da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   83da2:	6028      	str	r0, [r5, #0]
   83da4:	6069      	str	r1, [r5, #4]
   83da6:	60aa      	str	r2, [r5, #8]
   83da8:	60eb      	str	r3, [r5, #12]
   83daa:	4627      	mov	r7, r4
   83dac:	7823      	ldrb	r3, [r4, #0]
   83dae:	742b      	strb	r3, [r5, #16]
   83db0:	f641 3088 	movw	r0, #7048	; 0x1b88
   83db4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83db8:	f245 215d 	movw	r1, #21085	; 0x525d
   83dbc:	f2c0 0108 	movt	r1, #8
   83dc0:	4788      	blx	r1
	 return SCPI_RES_OK;
 }
   83dc2:	f04f 0001 	mov.w	r0, #1
   83dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00083dc8 <SCPI_GetModuleName>:

scpi_result_t SCPI_GetModuleName(scpi_t * context)
{
   83dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("Low cost dual 10MHz counters v2\x0D");
   83dca:	f64d 5700 	movw	r7, #56576	; 0xdd00
   83dce:	f2c0 0708 	movt	r7, #8
   83dd2:	f641 3588 	movw	r5, #7048	; 0x1b88
   83dd6:	f2c2 0507 	movt	r5, #8199	; 0x2007
   83dda:	463c      	mov	r4, r7
   83ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   83dde:	6028      	str	r0, [r5, #0]
   83de0:	6069      	str	r1, [r5, #4]
   83de2:	60aa      	str	r2, [r5, #8]
   83de4:	60eb      	str	r3, [r5, #12]
   83de6:	f105 0510 	add.w	r5, r5, #16
   83dea:	462e      	mov	r6, r5
   83dec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   83dee:	6028      	str	r0, [r5, #0]
   83df0:	6069      	str	r1, [r5, #4]
   83df2:	60aa      	str	r2, [r5, #8]
   83df4:	60eb      	str	r3, [r5, #12]
   83df6:	4627      	mov	r7, r4
   83df8:	7823      	ldrb	r3, [r4, #0]
   83dfa:	742b      	strb	r3, [r5, #16]
   83dfc:	f641 3088 	movw	r0, #7048	; 0x1b88
   83e00:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83e04:	f245 215d 	movw	r1, #21085	; 0x525d
   83e08:	f2c0 0108 	movt	r1, #8
   83e0c:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83e0e:	f04f 0001 	mov.w	r0, #1
   83e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00083e14 <SCPI_GetModuleDescription>:

scpi_result_t SCPI_GetModuleDescription(scpi_t * context)
{
   83e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("Low cost dual 10MHz counters v2\x0D");
   83e16:	f64d 5700 	movw	r7, #56576	; 0xdd00
   83e1a:	f2c0 0708 	movt	r7, #8
   83e1e:	f641 3588 	movw	r5, #7048	; 0x1b88
   83e22:	f2c2 0507 	movt	r5, #8199	; 0x2007
   83e26:	463c      	mov	r4, r7
   83e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   83e2a:	6028      	str	r0, [r5, #0]
   83e2c:	6069      	str	r1, [r5, #4]
   83e2e:	60aa      	str	r2, [r5, #8]
   83e30:	60eb      	str	r3, [r5, #12]
   83e32:	f105 0510 	add.w	r5, r5, #16
   83e36:	462e      	mov	r6, r5
   83e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   83e3a:	6028      	str	r0, [r5, #0]
   83e3c:	6069      	str	r1, [r5, #4]
   83e3e:	60aa      	str	r2, [r5, #8]
   83e40:	60eb      	str	r3, [r5, #12]
   83e42:	4627      	mov	r7, r4
   83e44:	7823      	ldrb	r3, [r4, #0]
   83e46:	742b      	strb	r3, [r5, #16]
   83e48:	f641 3088 	movw	r0, #7048	; 0x1b88
   83e4c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83e50:	f245 215d 	movw	r1, #21085	; 0x525d
   83e54:	f2c0 0108 	movt	r1, #8
   83e58:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83e5a:	f04f 0001 	mov.w	r0, #1
   83e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00083e60 <SCPI_GetModuleSN>:

scpi_result_t SCPI_GetModuleSN(scpi_t * context)
{
   83e60:	b508      	push	{r3, lr}
	printf("0x0000\x0D");
   83e62:	f641 3288 	movw	r2, #7048	; 0x1b88
   83e66:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83e6a:	f64d 5324 	movw	r3, #56612	; 0xdd24
   83e6e:	f2c0 0308 	movt	r3, #8
   83e72:	cb03      	ldmia	r3!, {r0, r1}
   83e74:	6010      	str	r0, [r2, #0]
   83e76:	6051      	str	r1, [r2, #4]
   83e78:	4610      	mov	r0, r2
   83e7a:	f245 215d 	movw	r1, #21085	; 0x525d
   83e7e:	f2c0 0108 	movt	r1, #8
   83e82:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83e84:	f04f 0001 	mov.w	r0, #1
   83e88:	bd08      	pop	{r3, pc}
   83e8a:	bf00      	nop

00083e8c <SCPI_GetDissipatedPower>:

scpi_result_t SCPI_GetDissipatedPower(scpi_t * context)
{
   83e8c:	b508      	push	{r3, lr}
	printf("840mW\x0D");
   83e8e:	f641 3388 	movw	r3, #7048	; 0x1b88
   83e92:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83e96:	f64d 522c 	movw	r2, #56620	; 0xdd2c
   83e9a:	f2c0 0208 	movt	r2, #8
   83e9e:	6810      	ldr	r0, [r2, #0]
   83ea0:	6018      	str	r0, [r3, #0]
   83ea2:	8891      	ldrh	r1, [r2, #4]
   83ea4:	7992      	ldrb	r2, [r2, #6]
   83ea6:	8099      	strh	r1, [r3, #4]
   83ea8:	719a      	strb	r2, [r3, #6]
   83eaa:	4618      	mov	r0, r3
   83eac:	f245 235d 	movw	r3, #21085	; 0x525d
   83eb0:	f2c0 0308 	movt	r3, #8
   83eb4:	4798      	blx	r3
	return SCPI_RES_OK;
}
   83eb6:	f04f 0001 	mov.w	r0, #1
   83eba:	bd08      	pop	{r3, pc}

00083ebc <SCPI_GetMaxCurrent>:

scpi_result_t SCPI_GetMaxCurrent(scpi_t * context)
{
   83ebc:	b508      	push	{r3, lr}
	printf("0mA\x0D");
   83ebe:	f641 3388 	movw	r3, #7048	; 0x1b88
   83ec2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83ec6:	f64d 5234 	movw	r2, #56628	; 0xdd34
   83eca:	f2c0 0208 	movt	r2, #8
   83ece:	6810      	ldr	r0, [r2, #0]
   83ed0:	6018      	str	r0, [r3, #0]
   83ed2:	7911      	ldrb	r1, [r2, #4]
   83ed4:	7119      	strb	r1, [r3, #4]
   83ed6:	4618      	mov	r0, r3
   83ed8:	f245 235d 	movw	r3, #21085	; 0x525d
   83edc:	f2c0 0308 	movt	r3, #8
   83ee0:	4798      	blx	r3
	return SCPI_RES_OK;
}
   83ee2:	f04f 0001 	mov.w	r0, #1
   83ee6:	bd08      	pop	{r3, pc}

00083ee8 <SCPI_GetNomCurrent>:

scpi_result_t SCPI_GetNomCurrent(scpi_t * context)
{
   83ee8:	b508      	push	{r3, lr}
	printf("0mA\x0D");
   83eea:	f641 3388 	movw	r3, #7048	; 0x1b88
   83eee:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83ef2:	f64d 5234 	movw	r2, #56628	; 0xdd34
   83ef6:	f2c0 0208 	movt	r2, #8
   83efa:	6810      	ldr	r0, [r2, #0]
   83efc:	6018      	str	r0, [r3, #0]
   83efe:	7911      	ldrb	r1, [r2, #4]
   83f00:	7119      	strb	r1, [r3, #4]
   83f02:	4618      	mov	r0, r3
   83f04:	f245 235d 	movw	r3, #21085	; 0x525d
   83f08:	f2c0 0308 	movt	r3, #8
   83f0c:	4798      	blx	r3
	return SCPI_RES_OK;
}
   83f0e:	f04f 0001 	mov.w	r0, #1
   83f12:	bd08      	pop	{r3, pc}

00083f14 <SCPI_GetSDCardStatus>:

scpi_result_t SCPI_GetSDCardStatus(scpi_t * context)
{
   83f14:	b508      	push	{r3, lr}
	printf("OK\x0D");
   83f16:	f641 3388 	movw	r3, #7048	; 0x1b88
   83f1a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83f1e:	f64d 523c 	movw	r2, #56636	; 0xdd3c
   83f22:	f2c0 0208 	movt	r2, #8
   83f26:	6810      	ldr	r0, [r2, #0]
   83f28:	6018      	str	r0, [r3, #0]
   83f2a:	4618      	mov	r0, r3
   83f2c:	f245 215d 	movw	r1, #21085	; 0x525d
   83f30:	f2c0 0108 	movt	r1, #8
   83f34:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83f36:	f04f 0001 	mov.w	r0, #1
   83f3a:	bd08      	pop	{r3, pc}

00083f3c <SCPI_LedStatus>:

scpi_result_t SCPI_LedStatus(scpi_t * context)
{
   83f3c:	b508      	push	{r3, lr}
	printf("OK\x0D");
   83f3e:	f641 3388 	movw	r3, #7048	; 0x1b88
   83f42:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83f46:	f64d 523c 	movw	r2, #56636	; 0xdd3c
   83f4a:	f2c0 0208 	movt	r2, #8
   83f4e:	6810      	ldr	r0, [r2, #0]
   83f50:	6018      	str	r0, [r3, #0]
   83f52:	4618      	mov	r0, r3
   83f54:	f245 215d 	movw	r1, #21085	; 0x525d
   83f58:	f2c0 0108 	movt	r1, #8
   83f5c:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83f5e:	f04f 0001 	mov.w	r0, #1
   83f62:	bd08      	pop	{r3, pc}

00083f64 <SCPI_ButtonStatus>:

scpi_result_t SCPI_ButtonStatus(scpi_t * context)
{
   83f64:	b508      	push	{r3, lr}
	if(get_user_button_status() == RETURN_OK)
   83f66:	f642 2311 	movw	r3, #10769	; 0x2a11
   83f6a:	f2c0 0308 	movt	r3, #8
   83f6e:	4798      	blx	r3
   83f70:	2801      	cmp	r0, #1
   83f72:	d111      	bne.n	83f98 <SCPI_ButtonStatus+0x34>
	{
		printf("pushed\x0D");
   83f74:	f641 3288 	movw	r2, #7048	; 0x1b88
   83f78:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83f7c:	f64d 5340 	movw	r3, #56640	; 0xdd40
   83f80:	f2c0 0308 	movt	r3, #8
   83f84:	cb03      	ldmia	r3!, {r0, r1}
   83f86:	6010      	str	r0, [r2, #0]
   83f88:	6051      	str	r1, [r2, #4]
   83f8a:	4610      	mov	r0, r2
   83f8c:	f245 215d 	movw	r1, #21085	; 0x525d
   83f90:	f2c0 0108 	movt	r1, #8
   83f94:	4788      	blx	r1
   83f96:	e012      	b.n	83fbe <SCPI_ButtonStatus+0x5a>
	} 
	else
	{
		printf("released\x0D");
   83f98:	f641 3288 	movw	r2, #7048	; 0x1b88
   83f9c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83fa0:	f64d 5348 	movw	r3, #56648	; 0xdd48
   83fa4:	f2c0 0308 	movt	r3, #8
   83fa8:	cb03      	ldmia	r3!, {r0, r1}
   83faa:	6010      	str	r0, [r2, #0]
   83fac:	6051      	str	r1, [r2, #4]
   83fae:	8818      	ldrh	r0, [r3, #0]
   83fb0:	8110      	strh	r0, [r2, #8]
   83fb2:	4610      	mov	r0, r2
   83fb4:	f245 215d 	movw	r1, #21085	; 0x525d
   83fb8:	f2c0 0108 	movt	r1, #8
   83fbc:	4788      	blx	r1
	}
	return SCPI_RES_OK;
}
   83fbe:	f04f 0001 	mov.w	r0, #1
   83fc2:	bd08      	pop	{r3, pc}

00083fc4 <SCPI_EEPROM_Read>:

scpi_result_t SCPI_EEPROM_Read(scpi_t * context)
{
	// TBD...
	return SCPI_RES_OK;
}
   83fc4:	f04f 0001 	mov.w	r0, #1
   83fc8:	4770      	bx	lr
   83fca:	bf00      	nop

00083fcc <SCPI_EEPROM_Write>:

scpi_result_t SCPI_EEPROM_Write(scpi_t * context)
{
	// TBD...
	return SCPI_RES_OK;
}
   83fcc:	f04f 0001 	mov.w	r0, #1
   83fd0:	4770      	bx	lr
   83fd2:	bf00      	nop

00083fd4 <SCPI_SetPower>:

scpi_result_t SCPI_SetPower(scpi_t * context)
{
   83fd4:	b530      	push	{r4, r5, lr}
   83fd6:	b083      	sub	sp, #12
	const char * param;
	size_t param_len;

	if(!SCPI_ParamString(context, &param, &param_len, true)) 
   83fd8:	a901      	add	r1, sp, #4
   83fda:	466a      	mov	r2, sp
   83fdc:	f04f 0301 	mov.w	r3, #1
   83fe0:	f243 7405 	movw	r4, #14085	; 0x3705
   83fe4:	f2c0 0408 	movt	r4, #8
   83fe8:	47a0      	blx	r4
   83fea:	2800      	cmp	r0, #0
   83fec:	d039      	beq.n	84062 <SCPI_SetPower+0x8e>
		return SCPI_RES_ERR;
		
	if(param_len >= 2)
   83fee:	9c00      	ldr	r4, [sp, #0]
   83ff0:	2c01      	cmp	r4, #1
   83ff2:	d939      	bls.n	84068 <SCPI_SetPower+0x94>
	{
		if(strncmp(param, "ON", 2) == 0)
   83ff4:	9d01      	ldr	r5, [sp, #4]
   83ff6:	4628      	mov	r0, r5
   83ff8:	f64d 5154 	movw	r1, #56660	; 0xdd54
   83ffc:	f2c0 0108 	movt	r1, #8
   84000:	f04f 0202 	mov.w	r2, #2
   84004:	f64a 7311 	movw	r3, #44817	; 0xaf11
   84008:	f2c0 0308 	movt	r3, #8
   8400c:	4798      	blx	r3
   8400e:	b960      	cbnz	r0, 8402a <SCPI_SetPower+0x56>
		{
			enable_12v();
   84010:	f642 2335 	movw	r3, #10805	; 0x2a35
   84014:	f2c0 0308 	movt	r3, #8
   84018:	4798      	blx	r3
			init_module_peripherals_ap();
   8401a:	f242 307d 	movw	r0, #9085	; 0x237d
   8401e:	f2c0 0008 	movt	r0, #8
   84022:	4780      	blx	r0
			return SCPI_RES_OK;
   84024:	f04f 0001 	mov.w	r0, #1
   84028:	e026      	b.n	84078 <SCPI_SetPower+0xa4>
		}
		else if((param_len > 2) && (strncmp(param, "OFF", 3) == 0))
   8402a:	2c02      	cmp	r4, #2
   8402c:	d91f      	bls.n	8406e <SCPI_SetPower+0x9a>
   8402e:	4628      	mov	r0, r5
   84030:	f64d 5158 	movw	r1, #56664	; 0xdd58
   84034:	f2c0 0108 	movt	r1, #8
   84038:	f04f 0203 	mov.w	r2, #3
   8403c:	f64a 7311 	movw	r3, #44817	; 0xaf11
   84040:	f2c0 0308 	movt	r3, #8
   84044:	4798      	blx	r3
   84046:	b9a8      	cbnz	r0, 84074 <SCPI_SetPower+0xa0>
		{
			deinit_module_peripherals();
   84048:	f242 3181 	movw	r1, #9089	; 0x2381
   8404c:	f2c0 0108 	movt	r1, #8
   84050:	4788      	blx	r1
			disable_12v();
   84052:	f642 2245 	movw	r2, #10821	; 0x2a45
   84056:	f2c0 0208 	movt	r2, #8
   8405a:	4790      	blx	r2
			return SCPI_RES_OK;
   8405c:	f04f 0001 	mov.w	r0, #1
   84060:	e00a      	b.n	84078 <SCPI_SetPower+0xa4>
{
	const char * param;
	size_t param_len;

	if(!SCPI_ParamString(context, &param, &param_len, true)) 
		return SCPI_RES_ERR;
   84062:	f04f 00ff 	mov.w	r0, #255	; 0xff
   84066:	e007      	b.n	84078 <SCPI_SetPower+0xa4>
			return SCPI_RES_ERR;
		}
	}
	else
	{
		return SCPI_RES_OK;
   84068:	f04f 0001 	mov.w	r0, #1
   8406c:	e004      	b.n	84078 <SCPI_SetPower+0xa4>
			disable_12v();
			return SCPI_RES_OK;
		}
		else
		{
			return SCPI_RES_ERR;
   8406e:	f04f 00ff 	mov.w	r0, #255	; 0xff
   84072:	e001      	b.n	84078 <SCPI_SetPower+0xa4>
   84074:	f04f 00ff 	mov.w	r0, #255	; 0xff
	{
		return SCPI_RES_OK;
	}
	
	return SCPI_RES_OK;
}
   84078:	b240      	sxtb	r0, r0
   8407a:	b003      	add	sp, #12
   8407c:	bd30      	pop	{r4, r5, pc}
   8407e:	bf00      	nop

00084080 <SCPI_SetUserLed>:

scpi_result_t SCPI_SetUserLed(scpi_t * context)
{
   84080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   84084:	b084      	sub	sp, #16
   84086:	4604      	mov	r4, r0
	uint32_t param1, param2, param3;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
   84088:	a903      	add	r1, sp, #12
   8408a:	f04f 0201 	mov.w	r2, #1
   8408e:	f243 7375 	movw	r3, #14197	; 0x3775
   84092:	f2c0 0308 	movt	r3, #8
   84096:	4798      	blx	r3
   84098:	2800      	cmp	r0, #0
   8409a:	d046      	beq.n	8412a <SCPI_SetUserLed+0xaa>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}

	// read second paraeter if present
	if (!SCPI_ParamInt(context, &param2, true)) {
   8409c:	4620      	mov	r0, r4
   8409e:	a902      	add	r1, sp, #8
   840a0:	f04f 0201 	mov.w	r2, #1
   840a4:	f243 7375 	movw	r3, #14197	; 0x3775
   840a8:	f2c0 0308 	movt	r3, #8
   840ac:	4798      	blx	r3
   840ae:	2800      	cmp	r0, #0
   840b0:	d03e      	beq.n	84130 <SCPI_SetUserLed+0xb0>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}

	// read second paraeter if present
	if (!SCPI_ParamInt(context, &param3, true)) {
   840b2:	4620      	mov	r0, r4
   840b4:	a901      	add	r1, sp, #4
   840b6:	f04f 0201 	mov.w	r2, #1
   840ba:	f243 7375 	movw	r3, #14197	; 0x3775
   840be:	f2c0 0308 	movt	r3, #8
   840c2:	4798      	blx	r3
   840c4:	2800      	cmp	r0, #0
   840c6:	d036      	beq.n	84136 <SCPI_SetUserLed+0xb6>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}

	set_user_led_colour((uint16_t)round(param1), (uint16_t)round(param2), (uint16_t)round(param3));
   840c8:	f64a 3971 	movw	r9, #43889	; 0xab71
   840cc:	f2c0 0908 	movt	r9, #8
   840d0:	9803      	ldr	r0, [sp, #12]
   840d2:	47c8      	blx	r9
   840d4:	f64a 0859 	movw	r8, #43097	; 0xa859
   840d8:	f2c0 0808 	movt	r8, #8
   840dc:	47c0      	blx	r8
   840de:	4606      	mov	r6, r0
   840e0:	460f      	mov	r7, r1
   840e2:	9802      	ldr	r0, [sp, #8]
   840e4:	47c8      	blx	r9
   840e6:	47c0      	blx	r8
   840e8:	4604      	mov	r4, r0
   840ea:	460d      	mov	r5, r1
   840ec:	9801      	ldr	r0, [sp, #4]
   840ee:	47c8      	blx	r9
   840f0:	47c0      	blx	r8
   840f2:	4680      	mov	r8, r0
   840f4:	4689      	mov	r9, r1
   840f6:	f64a 4a5d 	movw	sl, #44125	; 0xac5d
   840fa:	f2c0 0a08 	movt	sl, #8
   840fe:	4630      	mov	r0, r6
   84100:	4639      	mov	r1, r7
   84102:	47d0      	blx	sl
   84104:	b286      	uxth	r6, r0
   84106:	4620      	mov	r0, r4
   84108:	4629      	mov	r1, r5
   8410a:	47d0      	blx	sl
   8410c:	b284      	uxth	r4, r0
   8410e:	4640      	mov	r0, r8
   84110:	4649      	mov	r1, r9
   84112:	47d0      	blx	sl
   84114:	b282      	uxth	r2, r0
   84116:	4630      	mov	r0, r6
   84118:	4621      	mov	r1, r4
   8411a:	f642 13cd 	movw	r3, #10701	; 0x29cd
   8411e:	f2c0 0308 	movt	r3, #8
   84122:	4798      	blx	r3
	return SCPI_RES_OK;
   84124:	f04f 0001 	mov.w	r0, #1
   84128:	e007      	b.n	8413a <SCPI_SetUserLed+0xba>
	uint32_t param1, param2, param3;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   8412a:	f04f 00ff 	mov.w	r0, #255	; 0xff
   8412e:	e004      	b.n	8413a <SCPI_SetUserLed+0xba>
	}

	// read second paraeter if present
	if (!SCPI_ParamInt(context, &param2, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   84130:	f04f 00ff 	mov.w	r0, #255	; 0xff
   84134:	e001      	b.n	8413a <SCPI_SetUserLed+0xba>
	}

	// read second paraeter if present
	if (!SCPI_ParamInt(context, &param3, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   84136:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}

	set_user_led_colour((uint16_t)round(param1), (uint16_t)round(param2), (uint16_t)round(param3));
	return SCPI_RES_OK;
   8413a:	b240      	sxtb	r0, r0
   8413c:	b004      	add	sp, #16
   8413e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84142:	bf00      	nop

00084144 <SCPI_SetLightsOnOff>:
#include <math.h>
#include "main.h"


scpi_result_t SCPI_SetLightsOnOff(scpi_t * context)
{
   84144:	b500      	push	{lr}
   84146:	b083      	sub	sp, #12
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   84148:	a901      	add	r1, sp, #4
   8414a:	f04f 0201 	mov.w	r2, #1
   8414e:	f243 7375 	movw	r3, #14197	; 0x3775
   84152:	f2c0 0308 	movt	r3, #8
   84156:	4798      	blx	r3
   84158:	b1a8      	cbz	r0, 84186 <SCPI_SetLightsOnOff+0x42>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if(param == 0)
   8415a:	9801      	ldr	r0, [sp, #4]
   8415c:	b948      	cbnz	r0, 84172 <SCPI_SetLightsOnOff+0x2e>
		switch_on_off_lights(FALSE);
   8415e:	f04f 0000 	mov.w	r0, #0
   84162:	f641 323d 	movw	r2, #6973	; 0x1b3d
   84166:	f2c0 0208 	movt	r2, #8
   8416a:	4790      	blx	r2
	else
		switch_on_off_lights(TRUE);
	
	return SCPI_RES_OK;	
   8416c:	f04f 0301 	mov.w	r3, #1
   84170:	e00b      	b.n	8418a <SCPI_SetLightsOnOff+0x46>
	}
	
	if(param == 0)
		switch_on_off_lights(FALSE);
	else
		switch_on_off_lights(TRUE);
   84172:	f04f 0001 	mov.w	r0, #1
   84176:	f641 313d 	movw	r1, #6973	; 0x1b3d
   8417a:	f2c0 0108 	movt	r1, #8
   8417e:	4788      	blx	r1
	
	return SCPI_RES_OK;	
   84180:	f04f 0301 	mov.w	r3, #1
   84184:	e001      	b.n	8418a <SCPI_SetLightsOnOff+0x46>
	int32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   84186:	f04f 03ff 	mov.w	r3, #255	; 0xff
		switch_on_off_lights(FALSE);
	else
		switch_on_off_lights(TRUE);
	
	return SCPI_RES_OK;	
}
   8418a:	b258      	sxtb	r0, r3
   8418c:	b003      	add	sp, #12
   8418e:	bd00      	pop	{pc}

00084190 <SCPI_SetIntegrationT>:

scpi_result_t SCPI_SetIntegrationT(scpi_t* context)
{
   84190:	b500      	push	{lr}
   84192:	b083      	sub	sp, #12
	uint32_t param1;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
   84194:	a901      	add	r1, sp, #4
   84196:	f04f 0201 	mov.w	r2, #1
   8419a:	f243 7375 	movw	r3, #14197	; 0x3775
   8419e:	f2c0 0308 	movt	r3, #8
   841a2:	4798      	blx	r3
   841a4:	b1c0      	cbz	r0, 841d8 <SCPI_SetIntegrationT+0x48>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	set_counters_integration_time((uint16_t)round(param1));
   841a6:	9801      	ldr	r0, [sp, #4]
   841a8:	f64a 3171 	movw	r1, #43889	; 0xab71
   841ac:	f2c0 0108 	movt	r1, #8
   841b0:	4788      	blx	r1
   841b2:	f64a 0259 	movw	r2, #43097	; 0xa859
   841b6:	f2c0 0208 	movt	r2, #8
   841ba:	4790      	blx	r2
   841bc:	f64a 435d 	movw	r3, #44125	; 0xac5d
   841c0:	f2c0 0308 	movt	r3, #8
   841c4:	4798      	blx	r3
   841c6:	b280      	uxth	r0, r0
   841c8:	f24a 3171 	movw	r1, #41841	; 0xa371
   841cc:	f2c0 0108 	movt	r1, #8
   841d0:	4788      	blx	r1
	return SCPI_RES_OK;
   841d2:	f04f 0001 	mov.w	r0, #1
   841d6:	e001      	b.n	841dc <SCPI_SetIntegrationT+0x4c>
	uint32_t param1;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   841d8:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	
	set_counters_integration_time((uint16_t)round(param1));
	return SCPI_RES_OK;
}
   841dc:	b240      	sxtb	r0, r0
   841de:	b003      	add	sp, #12
   841e0:	bd00      	pop	{pc}
   841e2:	bf00      	nop

000841e4 <SCPI_EnableCounter>:

scpi_result_t SCPI_EnableCounter(scpi_t* context)
{
   841e4:	b508      	push	{r3, lr}
	enable_counters();
   841e6:	f242 23d9 	movw	r3, #8921	; 0x22d9
   841ea:	f2c0 0308 	movt	r3, #8
   841ee:	4798      	blx	r3
	return SCPI_RES_OK;
}
   841f0:	f04f 0001 	mov.w	r0, #1
   841f4:	bd08      	pop	{r3, pc}
   841f6:	bf00      	nop

000841f8 <SCPI_DisableCounter>:

scpi_result_t SCPI_DisableCounter(scpi_t* context)
{
   841f8:	b508      	push	{r3, lr}
	disable_counters();
   841fa:	f242 3341 	movw	r3, #9025	; 0x2341
   841fe:	f2c0 0308 	movt	r3, #8
   84202:	4798      	blx	r3
	return SCPI_RES_OK;
}
   84204:	f04f 0001 	mov.w	r0, #1
   84208:	bd08      	pop	{r3, pc}
   8420a:	bf00      	nop

0008420c <SCPI_ActivatePush>:

scpi_result_t SCPI_ActivatePush(scpi_t* context)
{
   8420c:	b508      	push	{r3, lr}
	activate_measurement_push();
   8420e:	f24a 3301 	movw	r3, #41729	; 0xa301
   84212:	f2c0 0308 	movt	r3, #8
   84216:	4798      	blx	r3
	return SCPI_RES_OK;
}
   84218:	f04f 0001 	mov.w	r0, #1
   8421c:	bd08      	pop	{r3, pc}
   8421e:	bf00      	nop

00084220 <SCPI_ActivatePull>:

scpi_result_t SCPI_ActivatePull(scpi_t* context)
{
   84220:	b508      	push	{r3, lr}
	deactivate_measurement_push();
   84222:	f24a 3311 	movw	r3, #41745	; 0xa311
   84226:	f2c0 0308 	movt	r3, #8
   8422a:	4798      	blx	r3
	return SCPI_RES_OK;
}
   8422c:	f04f 0001 	mov.w	r0, #1
   84230:	bd08      	pop	{r3, pc}
   84232:	bf00      	nop

00084234 <SCPI_SetTTLInput>:

scpi_result_t SCPI_SetTTLInput(scpi_t* context)
{
   84234:	b508      	push	{r3, lr}
	set_out_to_ttl_in();
   84236:	f641 63c5 	movw	r3, #7877	; 0x1ec5
   8423a:	f2c0 0308 	movt	r3, #8
   8423e:	4798      	blx	r3
	return SCPI_RES_OK;
}
   84240:	f04f 0001 	mov.w	r0, #1
   84244:	bd08      	pop	{r3, pc}
   84246:	bf00      	nop

00084248 <SCPI_CounterA_Enable>:

scpi_result_t SCPI_CounterA_Enable(scpi_t* context)
{
   84248:	b500      	push	{lr}
   8424a:	b083      	sub	sp, #12
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   8424c:	a901      	add	r1, sp, #4
   8424e:	f04f 0201 	mov.w	r2, #1
   84252:	f243 7375 	movw	r3, #14197	; 0x3775
   84256:	f2c0 0308 	movt	r3, #8
   8425a:	4798      	blx	r3
   8425c:	b188      	cbz	r0, 84282 <SCPI_CounterA_Enable+0x3a>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if(param == 0)
   8425e:	9801      	ldr	r0, [sp, #4]
   84260:	b938      	cbnz	r0, 84272 <SCPI_CounterA_Enable+0x2a>
		disable_countera();
   84262:	f242 22f1 	movw	r2, #8945	; 0x22f1
   84266:	f2c0 0208 	movt	r2, #8
   8426a:	4790      	blx	r2
	else	
		enable_countera();
		
	return SCPI_RES_OK;
   8426c:	f04f 0301 	mov.w	r3, #1
   84270:	e009      	b.n	84286 <SCPI_CounterA_Enable+0x3e>
	}
	
	if(param == 0)
		disable_countera();
	else	
		enable_countera();
   84272:	f242 11b5 	movw	r1, #8629	; 0x21b5
   84276:	f2c0 0108 	movt	r1, #8
   8427a:	4788      	blx	r1
		
	return SCPI_RES_OK;
   8427c:	f04f 0301 	mov.w	r3, #1
   84280:	e001      	b.n	84286 <SCPI_CounterA_Enable+0x3e>
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   84282:	f04f 03ff 	mov.w	r3, #255	; 0xff
		disable_countera();
	else	
		enable_countera();
		
	return SCPI_RES_OK;
}
   84286:	b258      	sxtb	r0, r3
   84288:	b003      	add	sp, #12
   8428a:	bd00      	pop	{pc}

0008428c <SCPI_CounterB_Enable>:

scpi_result_t SCPI_CounterB_Enable(scpi_t* context)
{
   8428c:	b500      	push	{lr}
   8428e:	b083      	sub	sp, #12
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   84290:	a901      	add	r1, sp, #4
   84292:	f04f 0201 	mov.w	r2, #1
   84296:	f243 7375 	movw	r3, #14197	; 0x3775
   8429a:	f2c0 0308 	movt	r3, #8
   8429e:	4798      	blx	r3
   842a0:	b188      	cbz	r0, 842c6 <SCPI_CounterB_Enable+0x3a>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if(param == 0)
   842a2:	9801      	ldr	r0, [sp, #4]
   842a4:	b938      	cbnz	r0, 842b6 <SCPI_CounterB_Enable+0x2a>
		disable_counterb();
   842a6:	f242 3219 	movw	r2, #8985	; 0x2319
   842aa:	f2c0 0208 	movt	r2, #8
   842ae:	4790      	blx	r2
	else
		enable_counterb();
	
	return SCPI_RES_OK;
   842b0:	f04f 0301 	mov.w	r3, #1
   842b4:	e009      	b.n	842ca <SCPI_CounterB_Enable+0x3e>
	}
	
	if(param == 0)
		disable_counterb();
	else
		enable_counterb();
   842b6:	f242 2145 	movw	r1, #8773	; 0x2245
   842ba:	f2c0 0108 	movt	r1, #8
   842be:	4788      	blx	r1
	
	return SCPI_RES_OK;
   842c0:	f04f 0301 	mov.w	r3, #1
   842c4:	e001      	b.n	842ca <SCPI_CounterB_Enable+0x3e>
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   842c6:	f04f 03ff 	mov.w	r3, #255	; 0xff
		disable_counterb();
	else
		enable_counterb();
	
	return SCPI_RES_OK;
}
   842ca:	b258      	sxtb	r0, r3
   842cc:	b003      	add	sp, #12
   842ce:	bd00      	pop	{pc}

000842d0 <SCPI_CounterA_Read>:

scpi_result_t SCPI_CounterA_Read(scpi_t* context)
{
   842d0:	b510      	push	{r4, lr}
   842d2:	b084      	sub	sp, #16
	uint64_t counter_val;
	
	if(read_last_contera_val(&counter_val) == RETURN_OK)
   842d4:	a802      	add	r0, sp, #8
   842d6:	f24a 33cd 	movw	r3, #41933	; 0xa3cd
   842da:	f2c0 0308 	movt	r3, #8
   842de:	4798      	blx	r3
   842e0:	2801      	cmp	r0, #1
   842e2:	d11a      	bne.n	8431a <SCPI_CounterA_Read+0x4a>
	{
		printf("%llu\x0D", counter_val);
   842e4:	f641 3488 	movw	r4, #7048	; 0x1b88
   842e8:	f2c2 0407 	movt	r4, #8199	; 0x2007
   842ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   842f0:	e9cd 2300 	strd	r2, r3, [sp]
   842f4:	4620      	mov	r0, r4
   842f6:	f04f 0164 	mov.w	r1, #100	; 0x64
   842fa:	f64d 626c 	movw	r2, #56940	; 0xde6c
   842fe:	f2c0 0208 	movt	r2, #8
   84302:	f64a 6357 	movw	r3, #44631	; 0xae57
   84306:	f2c0 0308 	movt	r3, #8
   8430a:	4798      	blx	r3
   8430c:	4620      	mov	r0, r4
   8430e:	f245 215d 	movw	r1, #21085	; 0x525d
   84312:	f2c0 0108 	movt	r1, #8
   84316:	4788      	blx	r1
   84318:	e011      	b.n	8433e <SCPI_CounterA_Read+0x6e>
	}
	else
	{
		printf("No new val\x0D");
   8431a:	f641 3488 	movw	r4, #7048	; 0x1b88
   8431e:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84322:	f64d 535c 	movw	r3, #56668	; 0xdd5c
   84326:	f2c0 0308 	movt	r3, #8
   8432a:	cb07      	ldmia	r3!, {r0, r1, r2}
   8432c:	6020      	str	r0, [r4, #0]
   8432e:	6061      	str	r1, [r4, #4]
   84330:	60a2      	str	r2, [r4, #8]
   84332:	4620      	mov	r0, r4
   84334:	f245 215d 	movw	r1, #21085	; 0x525d
   84338:	f2c0 0108 	movt	r1, #8
   8433c:	4788      	blx	r1
	}
	return SCPI_RES_OK;
}
   8433e:	f04f 0001 	mov.w	r0, #1
   84342:	b004      	add	sp, #16
   84344:	bd10      	pop	{r4, pc}
   84346:	bf00      	nop

00084348 <SCPI_CounterB_Read>:

scpi_result_t SCPI_CounterB_Read(scpi_t* context)
{
   84348:	b510      	push	{r4, lr}
   8434a:	b084      	sub	sp, #16
	uint64_t counter_val;
	
	if(read_last_conterb_val(&counter_val) == RETURN_OK)
   8434c:	a802      	add	r0, sp, #8
   8434e:	f24a 4311 	movw	r3, #42001	; 0xa411
   84352:	f2c0 0308 	movt	r3, #8
   84356:	4798      	blx	r3
   84358:	2801      	cmp	r0, #1
   8435a:	d11a      	bne.n	84392 <SCPI_CounterB_Read+0x4a>
	{
		printf("%llu\x0D", counter_val);
   8435c:	f641 3488 	movw	r4, #7048	; 0x1b88
   84360:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   84368:	e9cd 2300 	strd	r2, r3, [sp]
   8436c:	4620      	mov	r0, r4
   8436e:	f04f 0164 	mov.w	r1, #100	; 0x64
   84372:	f64d 626c 	movw	r2, #56940	; 0xde6c
   84376:	f2c0 0208 	movt	r2, #8
   8437a:	f64a 6357 	movw	r3, #44631	; 0xae57
   8437e:	f2c0 0308 	movt	r3, #8
   84382:	4798      	blx	r3
   84384:	4620      	mov	r0, r4
   84386:	f245 215d 	movw	r1, #21085	; 0x525d
   8438a:	f2c0 0108 	movt	r1, #8
   8438e:	4788      	blx	r1
   84390:	e011      	b.n	843b6 <SCPI_CounterB_Read+0x6e>
	}
	else
	{
		printf("No new val\x0D");
   84392:	f641 3488 	movw	r4, #7048	; 0x1b88
   84396:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8439a:	f64d 535c 	movw	r3, #56668	; 0xdd5c
   8439e:	f2c0 0308 	movt	r3, #8
   843a2:	cb07      	ldmia	r3!, {r0, r1, r2}
   843a4:	6020      	str	r0, [r4, #0]
   843a6:	6061      	str	r1, [r4, #4]
   843a8:	60a2      	str	r2, [r4, #8]
   843aa:	4620      	mov	r0, r4
   843ac:	f245 215d 	movw	r1, #21085	; 0x525d
   843b0:	f2c0 0108 	movt	r1, #8
   843b4:	4788      	blx	r1
	}
	return SCPI_RES_OK;
}
   843b6:	f04f 0001 	mov.w	r0, #1
   843ba:	b004      	add	sp, #16
   843bc:	bd10      	pop	{r4, pc}
   843be:	bf00      	nop

000843c0 <SCPI_CounterA_IT>:

scpi_result_t SCPI_CounterA_IT(scpi_t* context)
{
   843c0:	b500      	push	{lr}
   843c2:	b083      	sub	sp, #12
	uint32_t param1;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
   843c4:	a901      	add	r1, sp, #4
   843c6:	f04f 0201 	mov.w	r2, #1
   843ca:	f243 7375 	movw	r3, #14197	; 0x3775
   843ce:	f2c0 0308 	movt	r3, #8
   843d2:	4798      	blx	r3
   843d4:	b1c0      	cbz	r0, 84408 <SCPI_CounterA_IT+0x48>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	set_countera_integration_time((uint16_t)round(param1));
   843d6:	9801      	ldr	r0, [sp, #4]
   843d8:	f64a 3171 	movw	r1, #43889	; 0xab71
   843dc:	f2c0 0108 	movt	r1, #8
   843e0:	4788      	blx	r1
   843e2:	f64a 0259 	movw	r2, #43097	; 0xa859
   843e6:	f2c0 0208 	movt	r2, #8
   843ea:	4790      	blx	r2
   843ec:	f64a 435d 	movw	r3, #44125	; 0xac5d
   843f0:	f2c0 0308 	movt	r3, #8
   843f4:	4798      	blx	r3
   843f6:	b280      	uxth	r0, r0
   843f8:	f24a 3121 	movw	r1, #41761	; 0xa321
   843fc:	f2c0 0108 	movt	r1, #8
   84400:	4788      	blx	r1
	return SCPI_RES_OK;
   84402:	f04f 0001 	mov.w	r0, #1
   84406:	e001      	b.n	8440c <SCPI_CounterA_IT+0x4c>
	uint32_t param1;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   84408:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	
	set_countera_integration_time((uint16_t)round(param1));
	return SCPI_RES_OK;
}
   8440c:	b240      	sxtb	r0, r0
   8440e:	b003      	add	sp, #12
   84410:	bd00      	pop	{pc}
   84412:	bf00      	nop

00084414 <SCPI_CounterB_IT>:

scpi_result_t SCPI_CounterB_IT(scpi_t* context)
{
   84414:	b500      	push	{lr}
   84416:	b083      	sub	sp, #12
	uint32_t param1;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
   84418:	a901      	add	r1, sp, #4
   8441a:	f04f 0201 	mov.w	r2, #1
   8441e:	f243 7375 	movw	r3, #14197	; 0x3775
   84422:	f2c0 0308 	movt	r3, #8
   84426:	4798      	blx	r3
   84428:	b1c0      	cbz	r0, 8445c <SCPI_CounterB_IT+0x48>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	set_counterb_integration_time((uint16_t)round(param1));
   8442a:	9801      	ldr	r0, [sp, #4]
   8442c:	f64a 3171 	movw	r1, #43889	; 0xab71
   84430:	f2c0 0108 	movt	r1, #8
   84434:	4788      	blx	r1
   84436:	f64a 0259 	movw	r2, #43097	; 0xa859
   8443a:	f2c0 0208 	movt	r2, #8
   8443e:	4790      	blx	r2
   84440:	f64a 435d 	movw	r3, #44125	; 0xac5d
   84444:	f2c0 0308 	movt	r3, #8
   84448:	4798      	blx	r3
   8444a:	b280      	uxth	r0, r0
   8444c:	f24a 313d 	movw	r1, #41789	; 0xa33d
   84450:	f2c0 0108 	movt	r1, #8
   84454:	4788      	blx	r1
	return SCPI_RES_OK;
   84456:	f04f 0001 	mov.w	r0, #1
   8445a:	e001      	b.n	84460 <SCPI_CounterB_IT+0x4c>
	uint32_t param1;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   8445c:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	
	set_counterb_integration_time((uint16_t)round(param1));
	return SCPI_RES_OK;
}
   84460:	b240      	sxtb	r0, r0
   84462:	b003      	add	sp, #12
   84464:	bd00      	pop	{pc}
   84466:	bf00      	nop

00084468 <SCPI_TTLInput>:

scpi_result_t SCPI_TTLInput(scpi_t* context)
{
   84468:	b500      	push	{lr}
   8446a:	b083      	sub	sp, #12
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   8446c:	a901      	add	r1, sp, #4
   8446e:	f04f 0201 	mov.w	r2, #1
   84472:	f243 7375 	movw	r3, #14197	; 0x3775
   84476:	f2c0 0308 	movt	r3, #8
   8447a:	4798      	blx	r3
   8447c:	b188      	cbz	r0, 844a2 <SCPI_TTLInput+0x3a>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if(param == 0)
   8447e:	9801      	ldr	r0, [sp, #4]
   84480:	b938      	cbnz	r0, 84492 <SCPI_TTLInput+0x2a>
		set_out_to_uc();
   84482:	f641 62e5 	movw	r2, #7909	; 0x1ee5
   84486:	f2c0 0208 	movt	r2, #8
   8448a:	4790      	blx	r2
	else
		set_out_to_ttl_in();
	
	return SCPI_RES_OK;
   8448c:	f04f 0301 	mov.w	r3, #1
   84490:	e009      	b.n	844a6 <SCPI_TTLInput+0x3e>
	}
	
	if(param == 0)
		set_out_to_uc();
	else
		set_out_to_ttl_in();
   84492:	f641 61c5 	movw	r1, #7877	; 0x1ec5
   84496:	f2c0 0108 	movt	r1, #8
   8449a:	4788      	blx	r1
	
	return SCPI_RES_OK;
   8449c:	f04f 0301 	mov.w	r3, #1
   844a0:	e001      	b.n	844a6 <SCPI_TTLInput+0x3e>
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   844a2:	f04f 03ff 	mov.w	r3, #255	; 0xff
		set_out_to_uc();
	else
		set_out_to_ttl_in();
	
	return SCPI_RES_OK;
}
   844a6:	b258      	sxtb	r0, r3
   844a8:	b003      	add	sp, #12
   844aa:	bd00      	pop	{pc}

000844ac <SCPI_SetFreq>:

scpi_result_t SCPI_SetFreq(scpi_t* context)
{
   844ac:	b500      	push	{lr}
   844ae:	b083      	sub	sp, #12
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   844b0:	a901      	add	r1, sp, #4
   844b2:	f04f 0201 	mov.w	r2, #1
   844b6:	f243 7375 	movw	r3, #14197	; 0x3775
   844ba:	f2c0 0308 	movt	r3, #8
   844be:	4798      	blx	r3
   844c0:	b140      	cbz	r0, 844d4 <SCPI_SetFreq+0x28>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	setup_freqgen_freq(param);
   844c2:	9801      	ldr	r0, [sp, #4]
   844c4:	f242 41b5 	movw	r1, #9397	; 0x24b5
   844c8:	f2c0 0108 	movt	r1, #8
   844cc:	4788      	blx	r1
	return SCPI_RES_OK;
   844ce:	f04f 0001 	mov.w	r0, #1
   844d2:	e001      	b.n	844d8 <SCPI_SetFreq+0x2c>
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   844d4:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	
	setup_freqgen_freq(param);
	return SCPI_RES_OK;
}
   844d8:	b240      	sxtb	r0, r0
   844da:	b003      	add	sp, #12
   844dc:	bd00      	pop	{pc}
   844de:	bf00      	nop

000844e0 <SCPI_GetCounterA_Enable>:

scpi_result_t SCPI_GetCounterA_Enable(scpi_t* context)
{
   844e0:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", get_countera_en_status());
   844e2:	f242 3359 	movw	r3, #9049	; 0x2359
   844e6:	f2c0 0308 	movt	r3, #8
   844ea:	4798      	blx	r3
   844ec:	4603      	mov	r3, r0
   844ee:	f641 3488 	movw	r4, #7048	; 0x1b88
   844f2:	f2c2 0407 	movt	r4, #8199	; 0x2007
   844f6:	4620      	mov	r0, r4
   844f8:	f04f 0164 	mov.w	r1, #100	; 0x64
   844fc:	f64d 5268 	movw	r2, #56680	; 0xdd68
   84500:	f2c0 0208 	movt	r2, #8
   84504:	f64a 6557 	movw	r5, #44631	; 0xae57
   84508:	f2c0 0508 	movt	r5, #8
   8450c:	47a8      	blx	r5
   8450e:	4620      	mov	r0, r4
   84510:	f245 215d 	movw	r1, #21085	; 0x525d
   84514:	f2c0 0108 	movt	r1, #8
   84518:	4788      	blx	r1
	return SCPI_RES_OK;
}
   8451a:	f04f 0001 	mov.w	r0, #1
   8451e:	bd38      	pop	{r3, r4, r5, pc}

00084520 <SCPI_GetCounterB_Enable>:

scpi_result_t SCPI_GetCounterB_Enable(scpi_t* context)
{
   84520:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", get_counterb_en_status());
   84522:	f242 3365 	movw	r3, #9061	; 0x2365
   84526:	f2c0 0308 	movt	r3, #8
   8452a:	4798      	blx	r3
   8452c:	4603      	mov	r3, r0
   8452e:	f641 3488 	movw	r4, #7048	; 0x1b88
   84532:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84536:	4620      	mov	r0, r4
   84538:	f04f 0164 	mov.w	r1, #100	; 0x64
   8453c:	f64d 5268 	movw	r2, #56680	; 0xdd68
   84540:	f2c0 0208 	movt	r2, #8
   84544:	f64a 6557 	movw	r5, #44631	; 0xae57
   84548:	f2c0 0508 	movt	r5, #8
   8454c:	47a8      	blx	r5
   8454e:	4620      	mov	r0, r4
   84550:	f245 215d 	movw	r1, #21085	; 0x525d
   84554:	f2c0 0108 	movt	r1, #8
   84558:	4788      	blx	r1
	return SCPI_RES_OK;
}
   8455a:	f04f 0001 	mov.w	r0, #1
   8455e:	bd38      	pop	{r3, r4, r5, pc}

00084560 <SCPI_GetCounterA_IT>:

scpi_result_t SCPI_GetCounterA_IT(scpi_t* context)
{
   84560:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", get_countera_integration_time());
   84562:	f24a 3359 	movw	r3, #41817	; 0xa359
   84566:	f2c0 0308 	movt	r3, #8
   8456a:	4798      	blx	r3
   8456c:	4603      	mov	r3, r0
   8456e:	f641 3488 	movw	r4, #7048	; 0x1b88
   84572:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84576:	4620      	mov	r0, r4
   84578:	f04f 0164 	mov.w	r1, #100	; 0x64
   8457c:	f64d 5268 	movw	r2, #56680	; 0xdd68
   84580:	f2c0 0208 	movt	r2, #8
   84584:	f64a 6557 	movw	r5, #44631	; 0xae57
   84588:	f2c0 0508 	movt	r5, #8
   8458c:	47a8      	blx	r5
   8458e:	4620      	mov	r0, r4
   84590:	f245 215d 	movw	r1, #21085	; 0x525d
   84594:	f2c0 0108 	movt	r1, #8
   84598:	4788      	blx	r1
	return SCPI_RES_OK;
}
   8459a:	f04f 0001 	mov.w	r0, #1
   8459e:	bd38      	pop	{r3, r4, r5, pc}

000845a0 <SCPI_GetCounterB_IT>:

scpi_result_t SCPI_GetCounterB_IT(scpi_t* context)
{
   845a0:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", get_counterb_integration_time());
   845a2:	f24a 3365 	movw	r3, #41829	; 0xa365
   845a6:	f2c0 0308 	movt	r3, #8
   845aa:	4798      	blx	r3
   845ac:	4603      	mov	r3, r0
   845ae:	f641 3488 	movw	r4, #7048	; 0x1b88
   845b2:	f2c2 0407 	movt	r4, #8199	; 0x2007
   845b6:	4620      	mov	r0, r4
   845b8:	f04f 0164 	mov.w	r1, #100	; 0x64
   845bc:	f64d 5268 	movw	r2, #56680	; 0xdd68
   845c0:	f2c0 0208 	movt	r2, #8
   845c4:	f64a 6557 	movw	r5, #44631	; 0xae57
   845c8:	f2c0 0508 	movt	r5, #8
   845cc:	47a8      	blx	r5
   845ce:	4620      	mov	r0, r4
   845d0:	f245 215d 	movw	r1, #21085	; 0x525d
   845d4:	f2c0 0108 	movt	r1, #8
   845d8:	4788      	blx	r1
	return SCPI_RES_OK;
}
   845da:	f04f 0001 	mov.w	r0, #1
   845de:	bd38      	pop	{r3, r4, r5, pc}

000845e0 <SCPI_GetTTLInput>:

scpi_result_t SCPI_GetTTLInput(scpi_t* context)
{
   845e0:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", is_qma_out_set_to_ttl());
   845e2:	f641 7305 	movw	r3, #7941	; 0x1f05
   845e6:	f2c0 0308 	movt	r3, #8
   845ea:	4798      	blx	r3
   845ec:	4603      	mov	r3, r0
   845ee:	f641 3488 	movw	r4, #7048	; 0x1b88
   845f2:	f2c2 0407 	movt	r4, #8199	; 0x2007
   845f6:	4620      	mov	r0, r4
   845f8:	f04f 0164 	mov.w	r1, #100	; 0x64
   845fc:	f64d 5268 	movw	r2, #56680	; 0xdd68
   84600:	f2c0 0208 	movt	r2, #8
   84604:	f64a 6557 	movw	r5, #44631	; 0xae57
   84608:	f2c0 0508 	movt	r5, #8
   8460c:	47a8      	blx	r5
   8460e:	4620      	mov	r0, r4
   84610:	f245 215d 	movw	r1, #21085	; 0x525d
   84614:	f2c0 0108 	movt	r1, #8
   84618:	4788      	blx	r1
	return SCPI_RES_OK;
}
   8461a:	f04f 0001 	mov.w	r0, #1
   8461e:	bd38      	pop	{r3, r4, r5, pc}

00084620 <SCPI_GetFreq>:

scpi_result_t SCPI_GetFreq(scpi_t* context)
{
   84620:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", get_freqgen_freq());
   84622:	f242 3371 	movw	r3, #9073	; 0x2371
   84626:	f2c0 0308 	movt	r3, #8
   8462a:	4798      	blx	r3
   8462c:	4603      	mov	r3, r0
   8462e:	f641 3488 	movw	r4, #7048	; 0x1b88
   84632:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84636:	4620      	mov	r0, r4
   84638:	f04f 0164 	mov.w	r1, #100	; 0x64
   8463c:	f64d 5268 	movw	r2, #56680	; 0xdd68
   84640:	f2c0 0208 	movt	r2, #8
   84644:	f64a 6557 	movw	r5, #44631	; 0xae57
   84648:	f2c0 0508 	movt	r5, #8
   8464c:	47a8      	blx	r5
   8464e:	4620      	mov	r0, r4
   84650:	f245 215d 	movw	r1, #21085	; 0x525d
   84654:	f2c0 0108 	movt	r1, #8
   84658:	4788      	blx	r1
	return SCPI_RES_OK;
}
   8465a:	f04f 0001 	mov.w	r0, #1
   8465e:	bd38      	pop	{r3, r4, r5, pc}

00084660 <SCPI_GetFreqEnable>:

scpi_result_t SCPI_GetFreqEnable(scpi_t* context)
{
   84660:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", get_freqgen_enable());
   84662:	f242 3385 	movw	r3, #9093	; 0x2385
   84666:	f2c0 0308 	movt	r3, #8
   8466a:	4798      	blx	r3
   8466c:	4603      	mov	r3, r0
   8466e:	f641 3488 	movw	r4, #7048	; 0x1b88
   84672:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84676:	4620      	mov	r0, r4
   84678:	f04f 0164 	mov.w	r1, #100	; 0x64
   8467c:	f64d 5268 	movw	r2, #56680	; 0xdd68
   84680:	f2c0 0208 	movt	r2, #8
   84684:	f64a 6557 	movw	r5, #44631	; 0xae57
   84688:	f2c0 0508 	movt	r5, #8
   8468c:	47a8      	blx	r5
   8468e:	4620      	mov	r0, r4
   84690:	f245 215d 	movw	r1, #21085	; 0x525d
   84694:	f2c0 0108 	movt	r1, #8
   84698:	4788      	blx	r1
	return SCPI_RES_OK;
}
   8469a:	f04f 0001 	mov.w	r0, #1
   8469e:	bd38      	pop	{r3, r4, r5, pc}

000846a0 <SCPI_SetFreqEnable>:

scpi_result_t SCPI_SetFreqEnable(scpi_t* context)
{
   846a0:	b500      	push	{lr}
   846a2:	b083      	sub	sp, #12
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   846a4:	a901      	add	r1, sp, #4
   846a6:	f04f 0201 	mov.w	r2, #1
   846aa:	f243 7375 	movw	r3, #14197	; 0x3775
   846ae:	f2c0 0308 	movt	r3, #8
   846b2:	4798      	blx	r3
   846b4:	b188      	cbz	r0, 846da <SCPI_SetFreqEnable+0x3a>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if(param == 0)
   846b6:	9801      	ldr	r0, [sp, #4]
   846b8:	b938      	cbnz	r0, 846ca <SCPI_SetFreqEnable+0x2a>
		disable_freq_gen();
   846ba:	f242 3291 	movw	r2, #9105	; 0x2391
   846be:	f2c0 0208 	movt	r2, #8
   846c2:	4790      	blx	r2
	else
		enable_freq_gen();
	
	return SCPI_RES_OK;
   846c4:	f04f 0301 	mov.w	r3, #1
   846c8:	e009      	b.n	846de <SCPI_SetFreqEnable+0x3e>
	}
	
	if(param == 0)
		disable_freq_gen();
	else
		enable_freq_gen();
   846ca:	f242 31c9 	movw	r1, #9161	; 0x23c9
   846ce:	f2c0 0108 	movt	r1, #8
   846d2:	4788      	blx	r1
	
	return SCPI_RES_OK;
   846d4:	f04f 0301 	mov.w	r3, #1
   846d8:	e001      	b.n	846de <SCPI_SetFreqEnable+0x3e>
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   846da:	f04f 03ff 	mov.w	r3, #255	; 0xff
		disable_freq_gen();
	else
		enable_freq_gen();
	
	return SCPI_RES_OK;
}
   846de:	b258      	sxtb	r0, r3
   846e0:	b003      	add	sp, #12
   846e2:	bd00      	pop	{pc}

000846e4 <SCPI_GenPulse>:

scpi_result_t SCPI_GenPulse(scpi_t* context)
{
   846e4:	b508      	push	{r3, lr}
	generate_pulse();
   846e6:	f242 739d 	movw	r3, #10141	; 0x279d
   846ea:	f2c0 0308 	movt	r3, #8
   846ee:	4798      	blx	r3
	return SCPI_RES_OK;
}
   846f0:	f04f 0001 	mov.w	r0, #1
   846f4:	bd08      	pop	{r3, pc}
   846f6:	bf00      	nop

000846f8 <SCPI_GetQMAOutput>:

scpi_result_t SCPI_GetQMAOutput(scpi_t* context)
{
   846f8:	b508      	push	{r3, lr}
	if (get_qma_out_mode() == MODE_IN)
   846fa:	f642 0311 	movw	r3, #10257	; 0x2811
   846fe:	f2c0 0308 	movt	r3, #8
   84702:	4798      	blx	r3
   84704:	b980      	cbnz	r0, 84728 <SCPI_GetQMAOutput+0x30>
	{
		printf("IN\x0D");
   84706:	f641 3388 	movw	r3, #7048	; 0x1b88
   8470a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8470e:	f64d 526c 	movw	r2, #56684	; 0xdd6c
   84712:	f2c0 0208 	movt	r2, #8
   84716:	6810      	ldr	r0, [r2, #0]
   84718:	6018      	str	r0, [r3, #0]
   8471a:	4618      	mov	r0, r3
   8471c:	f245 215d 	movw	r1, #21085	; 0x525d
   84720:	f2c0 0108 	movt	r1, #8
   84724:	4788      	blx	r1
   84726:	bd08      	pop	{r3, pc}
	}
	else if (get_qma_out_mode() == MODE_GEN)
   84728:	f642 0011 	movw	r0, #10257	; 0x2811
   8472c:	f2c0 0008 	movt	r0, #8
   84730:	4780      	blx	r0
   84732:	2801      	cmp	r0, #1
   84734:	d112      	bne.n	8475c <SCPI_GetQMAOutput+0x64>
	{
		printf("GEN\x0D");
   84736:	f641 3188 	movw	r1, #7048	; 0x1b88
   8473a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8473e:	f64d 5270 	movw	r2, #56688	; 0xdd70
   84742:	f2c0 0208 	movt	r2, #8
   84746:	6810      	ldr	r0, [r2, #0]
   84748:	6008      	str	r0, [r1, #0]
   8474a:	7913      	ldrb	r3, [r2, #4]
   8474c:	710b      	strb	r3, [r1, #4]
   8474e:	4608      	mov	r0, r1
   84750:	f245 215d 	movw	r1, #21085	; 0x525d
   84754:	f2c0 0108 	movt	r1, #8
   84758:	4788      	blx	r1
   8475a:	bd08      	pop	{r3, pc}
	}
	else
	{
		printf("STATE\x0D");
   8475c:	f641 3388 	movw	r3, #7048	; 0x1b88
   84760:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84764:	f64d 5278 	movw	r2, #56696	; 0xdd78
   84768:	f2c0 0208 	movt	r2, #8
   8476c:	6811      	ldr	r1, [r2, #0]
   8476e:	6019      	str	r1, [r3, #0]
   84770:	8890      	ldrh	r0, [r2, #4]
   84772:	7992      	ldrb	r2, [r2, #6]
   84774:	8098      	strh	r0, [r3, #4]
   84776:	719a      	strb	r2, [r3, #6]
   84778:	4618      	mov	r0, r3
   8477a:	f245 235d 	movw	r3, #21085	; 0x525d
   8477e:	f2c0 0308 	movt	r3, #8
   84782:	4798      	blx	r3
	}	
}
   84784:	bd08      	pop	{r3, pc}
   84786:	bf00      	nop

00084788 <SCPI_SetQMAOutput>:

scpi_result_t SCPI_SetQMAOutput(scpi_t* context)
{
   84788:	b510      	push	{r4, lr}
   8478a:	b082      	sub	sp, #8
	const char* param;
	size_t param_len;

	if(!SCPI_ParamString(context, &param, &param_len, true))
   8478c:	a901      	add	r1, sp, #4
   8478e:	466a      	mov	r2, sp
   84790:	f04f 0301 	mov.w	r3, #1
   84794:	f243 7405 	movw	r4, #14085	; 0x3705
   84798:	f2c0 0408 	movt	r4, #8
   8479c:	47a0      	blx	r4
   8479e:	2800      	cmp	r0, #0
   847a0:	d04a      	beq.n	84838 <SCPI_SetQMAOutput+0xb0>
		return SCPI_RES_ERR;
	
	if(param_len == 2)
   847a2:	9b00      	ldr	r3, [sp, #0]
   847a4:	2b02      	cmp	r3, #2
   847a6:	d115      	bne.n	847d4 <SCPI_SetQMAOutput+0x4c>
	{
		if(strncmp(param, "IN", 2) == 0)
   847a8:	9801      	ldr	r0, [sp, #4]
   847aa:	f64d 5180 	movw	r1, #56704	; 0xdd80
   847ae:	f2c0 0108 	movt	r1, #8
   847b2:	f04f 0202 	mov.w	r2, #2
   847b6:	f64a 7311 	movw	r3, #44817	; 0xaf11
   847ba:	f2c0 0308 	movt	r3, #8
   847be:	4798      	blx	r3
   847c0:	2800      	cmp	r0, #0
   847c2:	d13c      	bne.n	8483e <SCPI_SetQMAOutput+0xb6>
		{
			set_qma_out_mode(MODE_IN);
   847c4:	f242 71b9 	movw	r1, #10169	; 0x27b9
   847c8:	f2c0 0108 	movt	r1, #8
   847cc:	4788      	blx	r1
			return SCPI_RES_OK;
   847ce:	f04f 0001 	mov.w	r0, #1
   847d2:	e03f      	b.n	84854 <SCPI_SetQMAOutput+0xcc>
		else
		{
			return SCPI_RES_ERR;
		}
	}
	else if(param_len == 3)
   847d4:	2b03      	cmp	r3, #3
   847d6:	d116      	bne.n	84806 <SCPI_SetQMAOutput+0x7e>
	{
		if(strncmp(param, "GEN", 3) == 0)
   847d8:	9801      	ldr	r0, [sp, #4]
   847da:	f64d 5184 	movw	r1, #56708	; 0xdd84
   847de:	f2c0 0108 	movt	r1, #8
   847e2:	f04f 0203 	mov.w	r2, #3
   847e6:	f64a 7311 	movw	r3, #44817	; 0xaf11
   847ea:	f2c0 0308 	movt	r3, #8
   847ee:	4798      	blx	r3
   847f0:	bb40      	cbnz	r0, 84844 <SCPI_SetQMAOutput+0xbc>
		{
			set_qma_out_mode(MODE_GEN);
   847f2:	f04f 0001 	mov.w	r0, #1
   847f6:	f242 72b9 	movw	r2, #10169	; 0x27b9
   847fa:	f2c0 0208 	movt	r2, #8
   847fe:	4790      	blx	r2
			return SCPI_RES_OK;
   84800:	f04f 0001 	mov.w	r0, #1
   84804:	e026      	b.n	84854 <SCPI_SetQMAOutput+0xcc>
		else
		{
			return SCPI_RES_ERR;
		}
	}
	else if(param_len == 5)
   84806:	2b05      	cmp	r3, #5
   84808:	d11f      	bne.n	8484a <SCPI_SetQMAOutput+0xc2>
	{
		if(strncmp(param, "STATE", 5) == 0)
   8480a:	9801      	ldr	r0, [sp, #4]
   8480c:	f64d 5188 	movw	r1, #56712	; 0xdd88
   84810:	f2c0 0108 	movt	r1, #8
   84814:	f04f 0205 	mov.w	r2, #5
   84818:	f64a 7311 	movw	r3, #44817	; 0xaf11
   8481c:	f2c0 0308 	movt	r3, #8
   84820:	4798      	blx	r3
   84822:	b9a8      	cbnz	r0, 84850 <SCPI_SetQMAOutput+0xc8>
		{
			set_qma_out_mode(MODE_STATE);
   84824:	f04f 0002 	mov.w	r0, #2
   84828:	f242 71b9 	movw	r1, #10169	; 0x27b9
   8482c:	f2c0 0108 	movt	r1, #8
   84830:	4788      	blx	r1
			return SCPI_RES_OK;
   84832:	f04f 0001 	mov.w	r0, #1
   84836:	e00d      	b.n	84854 <SCPI_SetQMAOutput+0xcc>
{
	const char* param;
	size_t param_len;

	if(!SCPI_ParamString(context, &param, &param_len, true))
		return SCPI_RES_ERR;
   84838:	f04f 00ff 	mov.w	r0, #255	; 0xff
   8483c:	e00a      	b.n	84854 <SCPI_SetQMAOutput+0xcc>
			set_qma_out_mode(MODE_IN);
			return SCPI_RES_OK;
		}
		else
		{
			return SCPI_RES_ERR;
   8483e:	f04f 00ff 	mov.w	r0, #255	; 0xff
   84842:	e007      	b.n	84854 <SCPI_SetQMAOutput+0xcc>
			set_qma_out_mode(MODE_GEN);
			return SCPI_RES_OK;
		}
		else
		{
			return SCPI_RES_ERR;
   84844:	f04f 00ff 	mov.w	r0, #255	; 0xff
   84848:	e004      	b.n	84854 <SCPI_SetQMAOutput+0xcc>
			return SCPI_RES_ERR;
		}
	}
	else
	{
		return SCPI_RES_OK;
   8484a:	f04f 0001 	mov.w	r0, #1
   8484e:	e001      	b.n	84854 <SCPI_SetQMAOutput+0xcc>
			set_qma_out_mode(MODE_STATE);
			return SCPI_RES_OK;
		}
		else
		{
			return SCPI_RES_ERR;
   84850:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	else
	{
		return SCPI_RES_OK;
	}	
}
   84854:	b240      	sxtb	r0, r0
   84856:	b002      	add	sp, #8
   84858:	bd10      	pop	{r4, pc}
   8485a:	bf00      	nop

0008485c <SCPI_GetQMState>:

scpi_result_t SCPI_GetQMState(scpi_t* context)
{
   8485c:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", get_qma_state());
   8485e:	f642 0359 	movw	r3, #10329	; 0x2859
   84862:	f2c0 0308 	movt	r3, #8
   84866:	4798      	blx	r3
   84868:	4603      	mov	r3, r0
   8486a:	f641 3488 	movw	r4, #7048	; 0x1b88
   8486e:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84872:	4620      	mov	r0, r4
   84874:	f04f 0164 	mov.w	r1, #100	; 0x64
   84878:	f64d 5268 	movw	r2, #56680	; 0xdd68
   8487c:	f2c0 0208 	movt	r2, #8
   84880:	f64a 6557 	movw	r5, #44631	; 0xae57
   84884:	f2c0 0508 	movt	r5, #8
   84888:	47a8      	blx	r5
   8488a:	4620      	mov	r0, r4
   8488c:	f245 215d 	movw	r1, #21085	; 0x525d
   84890:	f2c0 0108 	movt	r1, #8
   84894:	4788      	blx	r1
	return SCPI_RES_OK;
}
   84896:	f04f 0001 	mov.w	r0, #1
   8489a:	bd38      	pop	{r3, r4, r5, pc}

0008489c <SCPI_SetQMState>:

scpi_result_t SCPI_SetQMState(scpi_t* context)
{
   8489c:	b500      	push	{lr}
   8489e:	b083      	sub	sp, #12
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   848a0:	a901      	add	r1, sp, #4
   848a2:	f04f 0201 	mov.w	r2, #1
   848a6:	f243 7375 	movw	r3, #14197	; 0x3775
   848aa:	f2c0 0308 	movt	r3, #8
   848ae:	4798      	blx	r3
   848b0:	b1a8      	cbz	r0, 848de <SCPI_SetQMState+0x42>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if(param == 0)
   848b2:	9801      	ldr	r0, [sp, #4]
   848b4:	b948      	cbnz	r0, 848ca <SCPI_SetQMState+0x2e>
		set_qma_state(0);
   848b6:	f04f 0000 	mov.w	r0, #0
   848ba:	f642 021d 	movw	r2, #10269	; 0x281d
   848be:	f2c0 0208 	movt	r2, #8
   848c2:	4790      	blx	r2
	else
		set_qma_state(1);
	
	return SCPI_RES_OK;	
   848c4:	f04f 0301 	mov.w	r3, #1
   848c8:	e00b      	b.n	848e2 <SCPI_SetQMState+0x46>
	}
	
	if(param == 0)
		set_qma_state(0);
	else
		set_qma_state(1);
   848ca:	f04f 0001 	mov.w	r0, #1
   848ce:	f642 011d 	movw	r1, #10269	; 0x281d
   848d2:	f2c0 0108 	movt	r1, #8
   848d6:	4788      	blx	r1
	
	return SCPI_RES_OK;	
   848d8:	f04f 0301 	mov.w	r3, #1
   848dc:	e001      	b.n	848e2 <SCPI_SetQMState+0x46>
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   848de:	f04f 03ff 	mov.w	r3, #255	; 0xff
		set_qma_state(0);
	else
		set_qma_state(1);
	
	return SCPI_RES_OK;	
}
   848e2:	b258      	sxtb	r0, r3
   848e4:	b003      	add	sp, #12
   848e6:	bd00      	pop	{pc}

000848e8 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   848e8:	b510      	push	{r4, lr}
   848ea:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
   848ec:	f240 4395 	movw	r3, #1173	; 0x495
   848f0:	f2c0 0308 	movt	r3, #8
   848f4:	4798      	blx	r3
   848f6:	2801      	cmp	r0, #1
   848f8:	d003      	beq.n	84902 <sd_mmc_test_unit_ready+0x1a>
   848fa:	b128      	cbz	r0, 84908 <sd_mmc_test_unit_ready+0x20>
   848fc:	2802      	cmp	r0, #2
   848fe:	d120      	bne.n	84942 <sd_mmc_test_unit_ready+0x5a>
   84900:	e015      	b.n	8492e <sd_mmc_test_unit_ready+0x46>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   84902:	f04f 0003 	mov.w	r0, #3
   84906:	bd10      	pop	{r4, pc}
Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   84908:	f640 416c 	movw	r1, #3180	; 0xc6c
   8490c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84910:	5d0b      	ldrb	r3, [r1, r4]
   84912:	b9cb      	cbnz	r3, 84948 <sd_mmc_test_unit_ready+0x60>
			return CTRL_NO_PRESENT;
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   84914:	4620      	mov	r0, r4
   84916:	f241 022d 	movw	r2, #4141	; 0x102d
   8491a:	f2c0 0208 	movt	r2, #8
   8491e:	4790      	blx	r2
   84920:	f000 0003 	and.w	r0, r0, #3
			return CTRL_GOOD;
   84924:	2800      	cmp	r0, #0
   84926:	bf0c      	ite	eq
   84928:	2002      	moveq	r0, #2
   8492a:	2000      	movne	r0, #0
   8492c:	bd10      	pop	{r4, pc}

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   8492e:	f640 406c 	movw	r0, #3180	; 0xc6c
   84932:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84936:	f04f 0200 	mov.w	r2, #0
   8493a:	5502      	strb	r2, [r0, r4]
		return CTRL_NO_PRESENT;
   8493c:	f04f 0002 	mov.w	r0, #2
   84940:	bd10      	pop	{r4, pc}

	default:
		return CTRL_FAIL;
   84942:	f04f 0001 	mov.w	r0, #1
   84946:	bd10      	pop	{r4, pc}
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
			return CTRL_NO_PRESENT;
   84948:	f04f 0002 	mov.w	r0, #2
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
	}
}
   8494c:	bd10      	pop	{r4, pc}
   8494e:	bf00      	nop

00084950 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   84950:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
   84952:	f04f 0000 	mov.w	r0, #0
   84956:	f644 03e9 	movw	r3, #18665	; 0x48e9
   8495a:	f2c0 0308 	movt	r3, #8
   8495e:	4798      	blx	r3
}
   84960:	bd08      	pop	{r3, pc}
   84962:	bf00      	nop

00084964 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   84964:	b538      	push	{r3, r4, r5, lr}
   84966:	4604      	mov	r4, r0
   84968:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   8496a:	f241 0359 	movw	r3, #4185	; 0x1059
   8496e:	f2c0 0308 	movt	r3, #8
   84972:	4798      	blx	r3
   84974:	ea4f 0040 	mov.w	r0, r0, lsl #1
   84978:	f100 31ff 	add.w	r1, r0, #4294967295
   8497c:	6029      	str	r1, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
   8497e:	4620      	mov	r0, r4
   84980:	f644 02e9 	movw	r2, #18665	; 0x48e9
   84984:	f2c0 0208 	movt	r2, #8
   84988:	4790      	blx	r2
}
   8498a:	bd38      	pop	{r3, r4, r5, pc}

0008498c <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   8498c:	b508      	push	{r3, lr}
   8498e:	4601      	mov	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
   84990:	f04f 0000 	mov.w	r0, #0
   84994:	f644 1365 	movw	r3, #18789	; 0x4965
   84998:	f2c0 0308 	movt	r3, #8
   8499c:	4798      	blx	r3
}
   8499e:	bd08      	pop	{r3, pc}

000849a0 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   849a0:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
   849a2:	f241 0385 	movw	r3, #4229	; 0x1085
   849a6:	f2c0 0308 	movt	r3, #8
   849aa:	4798      	blx	r3
}
   849ac:	bd08      	pop	{r3, pc}
   849ae:	bf00      	nop

000849b0 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   849b0:	b508      	push	{r3, lr}
	return sd_mmc_wr_protect(0);
   849b2:	f04f 0000 	mov.w	r0, #0
   849b6:	f644 13a1 	movw	r3, #18849	; 0x49a1
   849ba:	f2c0 0308 	movt	r3, #8
   849be:	4798      	blx	r3
}
   849c0:	bd08      	pop	{r3, pc}
   849c2:	bf00      	nop

000849c4 <sd_mmc_removal>:

bool sd_mmc_removal(uint8_t slot)
{
	UNUSED(slot);
	return true;
}
   849c4:	f04f 0001 	mov.w	r0, #1
   849c8:	4770      	bx	lr
   849ca:	bf00      	nop

000849cc <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   849cc:	b508      	push	{r3, lr}
	return sd_mmc_removal(0);
   849ce:	f04f 0000 	mov.w	r0, #0
   849d2:	f644 13c5 	movw	r3, #18885	; 0x49c5
   849d6:	f2c0 0308 	movt	r3, #8
   849da:	4798      	blx	r3
}
   849dc:	bd08      	pop	{r3, pc}
   849de:	bf00      	nop

000849e0 <sd_mmc_usb_read_10>:

COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
   849e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   849e4:	4614      	mov	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
   849e6:	f241 038d 	movw	r3, #4237	; 0x108d
   849ea:	f2c0 0308 	movt	r3, #8
   849ee:	4798      	blx	r3
   849f0:	4601      	mov	r1, r0
   849f2:	b370      	cbz	r0, 84a52 <sd_mmc_usb_read_10+0x72>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   849f4:	2802      	cmp	r0, #2
   849f6:	bf0c      	ite	eq
   849f8:	2002      	moveq	r0, #2
   849fa:	2001      	movne	r0, #1
   849fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (nb_step) { // Skip last step
   84a00:	b144      	cbz	r4, 84a14 <sd_mmc_usb_read_10+0x34>
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   84a02:	f014 0f01 	tst.w	r4, #1
   84a06:	bf0c      	ite	eq
   84a08:	4638      	moveq	r0, r7
   84a0a:	4640      	movne	r0, r8
   84a0c:	f04f 0101 	mov.w	r1, #1
   84a10:	47b0      	blx	r6
   84a12:	bba0      	cbnz	r0, 84a7e <sd_mmc_usb_read_10+0x9e>
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
			}
		}
		if (!b_first_step) { // Skip first step
   84a14:	b985      	cbnz	r5, 84a38 <sd_mmc_usb_read_10+0x58>
			// RAM -> USB
			if (!udi_msc_trans_block(true,
   84a16:	f014 0f01 	tst.w	r4, #1
   84a1a:	bf0c      	ite	eq
   84a1c:	4641      	moveq	r1, r8
   84a1e:	4639      	movne	r1, r7
   84a20:	f04f 0001 	mov.w	r0, #1
   84a24:	f44f 7200 	mov.w	r2, #512	; 0x200
   84a28:	f04f 0300 	mov.w	r3, #0
   84a2c:	f646 6571 	movw	r5, #28273	; 0x6e71
   84a30:	f2c0 0508 	movt	r5, #8
   84a34:	47a8      	blx	r5
   84a36:	b330      	cbz	r0, 84a86 <sd_mmc_usb_read_10+0xa6>
				return CTRL_FAIL;
			}
		} else {
			b_first_step = false;
		}
		if (nb_step) { // Skip last step
   84a38:	b12c      	cbz	r4, 84a46 <sd_mmc_usb_read_10+0x66>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks()) {
   84a3a:	f241 2015 	movw	r0, #4629	; 0x1215
   84a3e:	f2c0 0008 	movt	r0, #8
   84a42:	4780      	blx	r0
   84a44:	bb18      	cbnz	r0, 84a8e <sd_mmc_usb_read_10+0xae>
   84a46:	f104 34ff 	add.w	r4, r4, #4294967295
   84a4a:	b2a4      	uxth	r4, r4
   84a4c:	f04f 0500 	mov.w	r5, #0
   84a50:	e00d      	b.n	84a6e <sd_mmc_usb_read_10+0x8e>
COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
	bool b_first_step = true;
   84a52:	f04f 0501 	mov.w	r5, #1
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (nb_step) { // Skip last step
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   84a56:	f241 16dd 	movw	r6, #4573	; 0x11dd
   84a5a:	f2c0 0608 	movt	r6, #8
   84a5e:	f241 7888 	movw	r8, #6024	; 0x1788
   84a62:	f2c2 0807 	movt	r8, #8199	; 0x2007
   84a66:	f641 1788 	movw	r7, #6536	; 0x1988
   84a6a:	f2c2 0707 	movt	r7, #8199	; 0x2007
	default:
		return CTRL_FAIL;
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
   84a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   84a72:	4294      	cmp	r4, r2
   84a74:	d1c4      	bne.n	84a00 <sd_mmc_usb_read_10+0x20>
				return CTRL_FAIL;
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
   84a76:	f04f 0000 	mov.w	r0, #0
   84a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (nb_step--) {
		if (nb_step) { // Skip last step
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
   84a7e:	f04f 0001 	mov.w	r0, #1
   84a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!udi_msc_trans_block(true,
					((nb_step % 2) == 0) ?
					sector_buf_1 : sector_buf_0,
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
   84a86:	f04f 0001 	mov.w	r0, #1
   84a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else {
			b_first_step = false;
		}
		if (nb_step) { // Skip last step
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks()) {
				return CTRL_FAIL;
   84a8e:	f04f 0001 	mov.w	r0, #1
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
}
   84a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84a96:	bf00      	nop

00084a98 <sd_mmc_usb_read_10_0>:

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
   84a98:	b508      	push	{r3, lr}
   84a9a:	4603      	mov	r3, r0
   84a9c:	460a      	mov	r2, r1
	return sd_mmc_usb_read_10(0, addr, nb_sector);
   84a9e:	f04f 0000 	mov.w	r0, #0
   84aa2:	4619      	mov	r1, r3
   84aa4:	f644 13e1 	movw	r3, #18913	; 0x49e1
   84aa8:	f2c0 0308 	movt	r3, #8
   84aac:	4798      	blx	r3
}
   84aae:	bd08      	pop	{r3, pc}

00084ab0 <sd_mmc_usb_write_10>:
{
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
   84ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84ab4:	4614      	mov	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
   84ab6:	f241 2395 	movw	r3, #4757	; 0x1295
   84aba:	f2c0 0308 	movt	r3, #8
   84abe:	4798      	blx	r3
   84ac0:	4601      	mov	r1, r0
   84ac2:	b368      	cbz	r0, 84b20 <sd_mmc_usb_write_10+0x70>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   84ac4:	2802      	cmp	r0, #2
   84ac6:	bf0c      	ite	eq
   84ac8:	2002      	moveq	r0, #2
   84aca:	2001      	movne	r0, #1
   84acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
   84ad0:	b945      	cbnz	r5, 84ae4 <sd_mmc_usb_write_10+0x34>
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   84ad2:	f014 0f01 	tst.w	r4, #1
   84ad6:	bf0c      	ite	eq
   84ad8:	4638      	moveq	r0, r7
   84ada:	4640      	movne	r0, r8
   84adc:	f04f 0101 	mov.w	r1, #1
   84ae0:	47b0      	blx	r6
   84ae2:	bb98      	cbnz	r0, 84b4c <sd_mmc_usb_write_10+0x9c>
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
			}
		}
		if (nb_step) { // Skip last step
   84ae4:	b17c      	cbz	r4, 84b06 <sd_mmc_usb_write_10+0x56>
			// USB -> RAM
			if (!udi_msc_trans_block(false,
   84ae6:	f014 0f01 	tst.w	r4, #1
   84aea:	bf0c      	ite	eq
   84aec:	4641      	moveq	r1, r8
   84aee:	4639      	movne	r1, r7
   84af0:	f04f 0000 	mov.w	r0, #0
   84af4:	f44f 7200 	mov.w	r2, #512	; 0x200
   84af8:	4603      	mov	r3, r0
   84afa:	f646 6c71 	movw	ip, #28273	; 0x6e71
   84afe:	f2c0 0c08 	movt	ip, #8
   84b02:	47e0      	blx	ip
   84b04:	b330      	cbz	r0, 84b54 <sd_mmc_usb_write_10+0xa4>
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
			}
		}
		if (!b_first_step) { // Skip first step
   84b06:	b92d      	cbnz	r5, 84b14 <sd_mmc_usb_write_10+0x64>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks()) {
   84b08:	f241 30a1 	movw	r0, #5025	; 0x13a1
   84b0c:	f2c0 0008 	movt	r0, #8
   84b10:	4780      	blx	r0
   84b12:	bb18      	cbnz	r0, 84b5c <sd_mmc_usb_write_10+0xac>
   84b14:	f104 34ff 	add.w	r4, r4, #4294967295
   84b18:	b2a4      	uxth	r4, r4
   84b1a:	f04f 0500 	mov.w	r5, #0
   84b1e:	e00d      	b.n	84b3c <sd_mmc_usb_write_10+0x8c>
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
	bool b_first_step = true;
   84b20:	f04f 0501 	mov.w	r5, #1
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   84b24:	f241 3669 	movw	r6, #4969	; 0x1369
   84b28:	f2c0 0608 	movt	r6, #8
   84b2c:	f241 7888 	movw	r8, #6024	; 0x1788
   84b30:	f2c2 0807 	movt	r8, #8199	; 0x2007
   84b34:	f641 1788 	movw	r7, #6536	; 0x1988
   84b38:	f2c2 0707 	movt	r7, #8199	; 0x2007
	default:
		return CTRL_FAIL;
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
   84b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   84b40:	4294      	cmp	r4, r2
   84b42:	d1c5      	bne.n	84ad0 <sd_mmc_usb_write_10+0x20>
			}
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
   84b44:	f04f 0000 	mov.w	r0, #0
   84b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
   84b4c:	f04f 0001 	mov.w	r0, #1
   84b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!udi_msc_trans_block(false,
					((nb_step % 2) == 0) ?
					sector_buf_1 : sector_buf_0,
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
   84b54:	f04f 0001 	mov.w	r0, #1
   84b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
		}
		if (!b_first_step) { // Skip first step
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks()) {
				return CTRL_FAIL;
   84b5c:	f04f 0001 	mov.w	r0, #1
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
}
   84b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00084b64 <sd_mmc_usb_write_10_0>:

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
   84b64:	b508      	push	{r3, lr}
   84b66:	4603      	mov	r3, r0
   84b68:	460a      	mov	r2, r1
	return sd_mmc_usb_write_10(0, addr, nb_sector);
   84b6a:	f04f 0000 	mov.w	r0, #0
   84b6e:	4619      	mov	r1, r3
   84b70:	f644 23b1 	movw	r3, #19121	; 0x4ab1
   84b74:	f2c0 0308 	movt	r3, #8
   84b78:	4798      	blx	r3
}
   84b7a:	bd08      	pop	{r3, pc}

00084b7c <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
   84b7c:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
   84b7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84b82:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
   84b84:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
   84b86:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
   84b88:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
   84b8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
   84b8c:	f04f 0680 	mov.w	r6, #128	; 0x80
   84b90:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
   84b92:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
   84b94:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
   84b96:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
   84b98:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
   84b9a:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
   84b9c:	f04f 0000 	mov.w	r0, #0
   84ba0:	6518      	str	r0, [r3, #80]	; 0x50
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
   84ba2:	f04f 0105 	mov.w	r1, #5
   84ba6:	6019      	str	r1, [r3, #0]
}
   84ba8:	bc70      	pop	{r4, r5, r6}
   84baa:	4770      	bx	lr

00084bac <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
   84bac:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
   84bae:	f001 033f 	and.w	r3, r1, #63	; 0x3f
   84bb2:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
   84bb4:	f411 7f80 	tst.w	r1, #256	; 0x100
   84bb8:	d00c      	beq.n	84bd4 <hsmci_send_cmd_execute+0x28>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
   84bba:	f411 6f00 	tst.w	r1, #2048	; 0x800
   84bbe:	d002      	beq.n	84bc6 <hsmci_send_cmd_execute+0x1a>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
   84bc0:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
   84bc4:	e006      	b.n	84bd4 <hsmci_send_cmd_execute+0x28>
		} else if (cmd & SDMMC_RESP_BUSY) {
   84bc6:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
   84bca:	bf14      	ite	ne
   84bcc:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
   84bd0:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
   84bd4:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
   84bd8:	bf18      	it	ne
   84bda:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
   84bde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84be2:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
   84be4:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
   84be6:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
   84be8:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
   84bec:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
   84bee:	b152      	cbz	r2, 84c06 <hsmci_send_cmd_execute+0x5a>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
   84bf0:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
   84bf4:	d012      	beq.n	84c1c <hsmci_send_cmd_execute+0x70>
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
   84bf6:	f644 327d 	movw	r2, #19325	; 0x4b7d
   84bfa:	f2c0 0208 	movt	r2, #8
   84bfe:	4790      	blx	r2
				return false;
   84c00:	f04f 0000 	mov.w	r0, #0
   84c04:	bd08      	pop	{r3, pc}
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
   84c06:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
   84c0a:	d007      	beq.n	84c1c <hsmci_send_cmd_execute+0x70>
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
   84c0c:	f644 317d 	movw	r1, #19325	; 0x4b7d
   84c10:	f2c0 0108 	movt	r1, #8
   84c14:	4788      	blx	r1
				return false;
   84c16:	f04f 0000 	mov.w	r0, #0
   84c1a:	bd08      	pop	{r3, pc}
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
   84c1c:	f013 0f01 	tst.w	r3, #1
   84c20:	d0e4      	beq.n	84bec <hsmci_send_cmd_execute+0x40>

	if (cmd & SDMMC_RESP_BUSY) {
   84c22:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   84c26:	d119      	bne.n	84c5c <hsmci_send_cmd_execute+0xb0>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
   84c28:	f04f 0001 	mov.w	r0, #1
   84c2c:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 1000000;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
   84c2e:	6c08      	ldr	r0, [r1, #64]	; 0x40
   84c30:	f103 33ff 	add.w	r3, r3, #4294967295
		if (busy_wait-- == 0) {
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
			return false;
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
   84c34:	f000 0230 	and.w	r2, r0, #48	; 0x30
   84c38:	2a20      	cmp	r2, #32
   84c3a:	d119      	bne.n	84c70 <hsmci_send_cmd_execute+0xc4>
   84c3c:	e00b      	b.n	84c56 <hsmci_send_cmd_execute+0xaa>

	do {
		sr = HSMCI->HSMCI_SR;
		if (busy_wait-- == 0) {
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
   84c3e:	f644 317d 	movw	r1, #19325	; 0x4b7d
   84c42:	f2c0 0108 	movt	r1, #8
   84c46:	4788      	blx	r1
			return false;
   84c48:	f04f 0000 	mov.w	r0, #0
   84c4c:	bd08      	pop	{r3, pc}
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
   84c4e:	f000 0230 	and.w	r2, r0, #48	; 0x30
   84c52:	2a20      	cmp	r2, #32
   84c54:	d1eb      	bne.n	84c2e <hsmci_send_cmd_execute+0x82>
	return true;
   84c56:	f04f 0001 	mov.w	r0, #1
   84c5a:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 1000000;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
   84c5c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   84c60:	6c00      	ldr	r0, [r0, #64]	; 0x40
   84c62:	f244 2340 	movw	r3, #16960	; 0x4240
   84c66:	f2c0 030f 	movt	r3, #15
   84c6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   84c6e:	e7ee      	b.n	84c4e <hsmci_send_cmd_execute+0xa2>
   84c70:	6c08      	ldr	r0, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
   84c72:	3b01      	subs	r3, #1
   84c74:	d1eb      	bne.n	84c4e <hsmci_send_cmd_execute+0xa2>
   84c76:	e7e2      	b.n	84c3e <hsmci_send_cmd_execute+0x92>

00084c78 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
   84c78:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
   84c7a:	f04f 0015 	mov.w	r0, #21
   84c7e:	f647 6429 	movw	r4, #32297	; 0x7e29
   84c82:	f2c0 0408 	movt	r4, #8
   84c86:	47a0      	blx	r4
#ifdef HSMCI_SR_DMADONE
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_DMAC);
   84c88:	f04f 0027 	mov.w	r0, #39	; 0x27
   84c8c:	47a0      	blx	r4
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
   84c8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84c92:	f04f 0272 	mov.w	r2, #114	; 0x72
   84c96:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
   84c98:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
   84c9a:	f04f 0011 	mov.w	r0, #17
   84c9e:	6558      	str	r0, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
   84ca0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
   84ca4:	6059      	str	r1, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
   84ca6:	f04f 0205 	mov.w	r2, #5
   84caa:	601a      	str	r2, [r3, #0]
   84cac:	bd10      	pop	{r4, pc}
   84cae:	bf00      	nop

00084cb0 <hsmci_get_bus_width>:
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
   84cb0:	2800      	cmp	r0, #0
   84cb2:	bf0c      	ite	eq
   84cb4:	2004      	moveq	r0, #4
   84cb6:	2000      	movne	r0, #0
   84cb8:	4770      	bx	lr
   84cba:	bf00      	nop

00084cbc <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
   84cbc:	f04f 0001 	mov.w	r0, #1
   84cc0:	4770      	bx	lr
   84cc2:	bf00      	nop

00084cc4 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
   84cc4:	b133      	cbz	r3, 84cd4 <hsmci_select_device+0x10>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
   84cc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84cca:	6d58      	ldr	r0, [r3, #84]	; 0x54
   84ccc:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   84cd0:	6558      	str	r0, [r3, #84]	; 0x54
   84cd2:	e005      	b.n	84ce0 <hsmci_select_device+0x1c>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
   84cd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84cd8:	6d58      	ldr	r0, [r3, #84]	; 0x54
   84cda:	f420 7080 	bic.w	r0, r0, #256	; 0x100
   84cde:	6558      	str	r0, [r3, #84]	; 0x54
{
	uint32_t clkdiv;
	uint32_t rest;

	// Speed = MCK clock / (2 * (CLKDIV + 1))
	if (speed > 0) {
   84ce0:	b181      	cbz	r1, 84d04 <hsmci_select_device+0x40>
		clkdiv = mck / (2 * speed);
   84ce2:	ea4f 0141 	mov.w	r1, r1, lsl #1
   84ce6:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
   84cea:	f2c0 5301 	movt	r3, #1281	; 0x501
   84cee:	fbb3 f0f1 	udiv	r0, r3, r1
		rest = mck % (2 * speed);
   84cf2:	fb01 3110 	mls	r1, r1, r0, r3
		if (rest > 0) {
   84cf6:	b109      	cbz	r1, 84cfc <hsmci_select_device+0x38>
			// Ensure that the card speed not be higher than expected.
			clkdiv++;
   84cf8:	f100 0001 	add.w	r0, r0, #1
		}
		if (clkdiv > 0) {
   84cfc:	b120      	cbz	r0, 84d08 <hsmci_select_device+0x44>
			clkdiv -= 1;
   84cfe:	f100 30ff 	add.w	r0, r0, #4294967295
   84d02:	e001      	b.n	84d08 <hsmci_select_device+0x44>
		}
	} else {
		clkdiv = 0;
   84d04:	f04f 0000 	mov.w	r0, #0
	}
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
   84d08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84d0c:	6859      	ldr	r1, [r3, #4]
   84d0e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   84d12:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
   84d14:	6859      	ldr	r1, [r3, #4]
   84d16:	b2c0      	uxtb	r0, r0
   84d18:	4308      	orrs	r0, r1
   84d1a:	6058      	str	r0, [r3, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
   84d1c:	2a04      	cmp	r2, #4
   84d1e:	d004      	beq.n	84d2a <hsmci_select_device+0x66>
}

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
   84d20:	2a08      	cmp	r2, #8
   84d22:	bf0c      	ite	eq
   84d24:	22c0      	moveq	r2, #192	; 0xc0
   84d26:	2200      	movne	r2, #0
   84d28:	e001      	b.n	84d2e <hsmci_select_device+0x6a>
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
		break;

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
   84d2a:	f04f 0280 	mov.w	r2, #128	; 0x80
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
   84d2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84d32:	60da      	str	r2, [r3, #12]
   84d34:	4770      	bx	lr
   84d36:	bf00      	nop

00084d38 <hsmci_deselect_device>:
}

void hsmci_deselect_device(uint8_t slot)
{
   84d38:	4770      	bx	lr
   84d3a:	bf00      	nop

00084d3c <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
   84d3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84d40:	685a      	ldr	r2, [r3, #4]
   84d42:	f422 5060 	bic.w	r0, r2, #14336	; 0x3800
   84d46:	6058      	str	r0, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
   84d48:	f04f 0100 	mov.w	r1, #0
   84d4c:	6119      	str	r1, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
   84d4e:	f44f 6210 	mov.w	r2, #2304	; 0x900
   84d52:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
   84d54:	4618      	mov	r0, r3
   84d56:	6c03      	ldr	r3, [r0, #64]	; 0x40
   84d58:	f013 0f01 	tst.w	r3, #1
   84d5c:	d0fb      	beq.n	84d56 <hsmci_send_clock+0x1a>
}
   84d5e:	4770      	bx	lr

00084d60 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   84d60:	b510      	push	{r4, lr}
   84d62:	4604      	mov	r4, r0
   84d64:	460a      	mov	r2, r1
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
   84d66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84d6a:	6859      	ldr	r1, [r3, #4]
   84d6c:	f421 5060 	bic.w	r0, r1, #14336	; 0x3800
   84d70:	6058      	str	r0, [r3, #4]
#ifdef HSMCI_SR_DMADONE
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
   84d72:	f04f 0000 	mov.w	r0, #0
   84d76:	6518      	str	r0, [r3, #80]	; 0x50
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
	HSMCI->HSMCI_BLKR = 0;
   84d78:	6198      	str	r0, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
   84d7a:	4621      	mov	r1, r4
   84d7c:	f644 33ad 	movw	r3, #19373	; 0x4bad
   84d80:	f2c0 0308 	movt	r3, #8
   84d84:	4798      	blx	r3
}
   84d86:	bd10      	pop	{r4, pc}

00084d88 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
   84d88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84d8c:	6a18      	ldr	r0, [r3, #32]
}
   84d8e:	4770      	bx	lr

00084d90 <hsmci_get_response_128>:
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   84d90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84d94:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   84d96:	ea4f 6112 	mov.w	r1, r2, lsr #24
   84d9a:	7001      	strb	r1, [r0, #0]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   84d9c:	ea4f 4112 	mov.w	r1, r2, lsr #16
   84da0:	7041      	strb	r1, [r0, #1]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   84da2:	ea4f 2112 	mov.w	r1, r2, lsr #8
   84da6:	7081      	strb	r1, [r0, #2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   84da8:	70c2      	strb	r2, [r0, #3]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   84daa:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   84dac:	ea4f 6112 	mov.w	r1, r2, lsr #24
   84db0:	7101      	strb	r1, [r0, #4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   84db2:	ea4f 4112 	mov.w	r1, r2, lsr #16
   84db6:	7141      	strb	r1, [r0, #5]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   84db8:	ea4f 2112 	mov.w	r1, r2, lsr #8
   84dbc:	7181      	strb	r1, [r0, #6]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   84dbe:	71c2      	strb	r2, [r0, #7]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   84dc0:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   84dc2:	ea4f 6112 	mov.w	r1, r2, lsr #24
   84dc6:	7201      	strb	r1, [r0, #8]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   84dc8:	ea4f 4112 	mov.w	r1, r2, lsr #16
   84dcc:	7241      	strb	r1, [r0, #9]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   84dce:	ea4f 2112 	mov.w	r1, r2, lsr #8
   84dd2:	7281      	strb	r1, [r0, #10]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   84dd4:	72c2      	strb	r2, [r0, #11]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   84dd6:	6a1b      	ldr	r3, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   84dd8:	ea4f 6213 	mov.w	r2, r3, lsr #24
   84ddc:	7302      	strb	r2, [r0, #12]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   84dde:	ea4f 4113 	mov.w	r1, r3, lsr #16
   84de2:	7341      	strb	r1, [r0, #13]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   84de4:	ea4f 2213 	mov.w	r2, r3, lsr #8
   84de8:	7382      	strb	r2, [r0, #14]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   84dea:	73c3      	strb	r3, [r0, #15]
   84dec:	4770      	bx	lr
   84dee:	bf00      	nop

00084df0 <hsmci_adtc_start>:
		response++;
	}
}

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
   84df0:	b570      	push	{r4, r5, r6, lr}
   84df2:	4604      	mov	r4, r0
   84df4:	460d      	mov	r5, r1
	uint32_t cmdr;

#ifdef HSMCI_SR_DMADONE
	if (access_block) {
   84df6:	f89d 1010 	ldrb.w	r1, [sp, #16]
   84dfa:	b129      	cbz	r1, 84e08 <hsmci_adtc_start+0x18>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
   84dfc:	f44f 7080 	mov.w	r0, #256	; 0x100
   84e00:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   84e04:	6508      	str	r0, [r1, #80]	; 0x50
   84e06:	e004      	b.n	84e12 <hsmci_adtc_start+0x22>
	} else {
		// Disable DMA for HSMCI
		HSMCI->HSMCI_DMA = 0;
   84e08:	f04f 0000 	mov.w	r0, #0
   84e0c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   84e10:	6530      	str	r0, [r6, #80]	; 0x50
#endif

	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
   84e12:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   84e16:	6870      	ldr	r0, [r6, #4]
   84e18:	f440 51c0 	orr.w	r1, r0, #6144	; 0x1800
   84e1c:	6071      	str	r1, [r6, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
   84e1e:	f012 0f03 	tst.w	r2, #3
   84e22:	d004      	beq.n	84e2e <hsmci_adtc_start+0x3e>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
   84e24:	6870      	ldr	r0, [r6, #4]
   84e26:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   84e2a:	6071      	str	r1, [r6, #4]
   84e2c:	e005      	b.n	84e3a <hsmci_adtc_start+0x4a>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
   84e2e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   84e32:	6870      	ldr	r0, [r6, #4]
   84e34:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
   84e38:	6071      	str	r1, [r6, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
   84e3a:	f404 4600 	and.w	r6, r4, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
   84e3e:	2e00      	cmp	r6, #0
   84e40:	bf0c      	ite	eq
   84e42:	f44f 20a0 	moveq.w	r0, #327680	; 0x50000
   84e46:	f44f 3080 	movne.w	r0, #65536	; 0x10000
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
   84e4a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   84e4e:	d009      	beq.n	84e64 <hsmci_adtc_start+0x74>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
   84e50:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
   84e54:	ea4f 56c2 	mov.w	r6, r2, lsl #23
   84e58:	ea4f 51d6 	mov.w	r1, r6, lsr #23
   84e5c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   84e60:	61b1      	str	r1, [r6, #24]
   84e62:	e018      	b.n	84e96 <hsmci_adtc_start+0xa6>
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
   84e64:	ea43 4602 	orr.w	r6, r3, r2, lsl #16
   84e68:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   84e6c:	618e      	str	r6, [r1, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
   84e6e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   84e72:	d002      	beq.n	84e7a <hsmci_adtc_start+0x8a>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
   84e74:	f440 1020 	orr.w	r0, r0, #2621440	; 0x280000
   84e78:	e00d      	b.n	84e96 <hsmci_adtc_start+0xa6>
		} else if (cmd & SDMMC_CMD_STREAM) {
   84e7a:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   84e7e:	d002      	beq.n	84e86 <hsmci_adtc_start+0x96>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
   84e80:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   84e84:	e007      	b.n	84e96 <hsmci_adtc_start+0xa6>
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
   84e86:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   84e8a:	d104      	bne.n	84e96 <hsmci_adtc_start+0xa6>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
   84e8c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
   84e90:	bf18      	it	ne
   84e92:	f440 2000 	orrne.w	r0, r0, #524288	; 0x80000
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
   84e96:	f640 4174 	movw	r1, #3188	; 0xc74
   84e9a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84e9e:	f04f 0600 	mov.w	r6, #0
   84ea2:	600e      	str	r6, [r1, #0]
	hsmci_block_size = block_size;
   84ea4:	f640 4170 	movw	r1, #3184	; 0xc70
   84ea8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84eac:	800a      	strh	r2, [r1, #0]
	hsmci_nb_block = nb_block;
   84eae:	f640 4272 	movw	r2, #3186	; 0xc72
   84eb2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84eb6:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
   84eb8:	4621      	mov	r1, r4
   84eba:	462a      	mov	r2, r5
   84ebc:	f644 33ad 	movw	r3, #19373	; 0x4bad
   84ec0:	f2c0 0308 	movt	r3, #8
   84ec4:	4798      	blx	r3
}
   84ec6:	bd70      	pop	{r4, r5, r6, pc}

00084ec8 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
   84ec8:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
   84eca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84ece:	f04f 0200 	mov.w	r2, #0
   84ed2:	f2cc 0260 	movt	r2, #49248	; 0xc060

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
   84ed6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84ed8:	4213      	tst	r3, r2
   84eda:	d007      	beq.n	84eec <hsmci_read_word+0x24>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   84edc:	f644 307d 	movw	r0, #19325	; 0x4b7d
   84ee0:	f2c0 0008 	movt	r0, #8
   84ee4:	4780      	blx	r0
			return false;
   84ee6:	f04f 0000 	mov.w	r0, #0
   84eea:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_RXRDY));
   84eec:	f013 0f02 	tst.w	r3, #2
   84ef0:	d0f1      	beq.n	84ed6 <hsmci_read_word+0xe>

	// Read data
	*value = HSMCI->HSMCI_RDR;
   84ef2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   84ef6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   84ef8:	6002      	str	r2, [r0, #0]
	hsmci_transfert_pos += 4;
   84efa:	f640 4074 	movw	r0, #3188	; 0xc74
   84efe:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84f02:	6803      	ldr	r3, [r0, #0]
   84f04:	f103 0304 	add.w	r3, r3, #4
   84f08:	6003      	str	r3, [r0, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   84f0a:	f640 4172 	movw	r1, #3186	; 0xc72
   84f0e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84f12:	880a      	ldrh	r2, [r1, #0]
   84f14:	f640 4070 	movw	r0, #3184	; 0xc70
   84f18:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84f1c:	8801      	ldrh	r1, [r0, #0]
   84f1e:	fb01 f202 	mul.w	r2, r1, r2
   84f22:	4293      	cmp	r3, r2
   84f24:	d316      	bcc.n	84f54 <hsmci_read_word+0x8c>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   84f26:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84f2a:	f04f 0200 	mov.w	r2, #0
   84f2e:	f2cc 0260 	movt	r2, #49248	; 0xc060
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   84f32:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84f34:	4213      	tst	r3, r2
   84f36:	d007      	beq.n	84f48 <hsmci_read_word+0x80>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   84f38:	f644 317d 	movw	r1, #19325	; 0x4b7d
   84f3c:	f2c0 0108 	movt	r1, #8
   84f40:	4788      	blx	r1
			return false;
   84f42:	f04f 0000 	mov.w	r0, #0
   84f46:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
   84f48:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   84f4c:	d0f1      	beq.n	84f32 <hsmci_read_word+0x6a>
	return true;
   84f4e:	f04f 0001 	mov.w	r0, #1
   84f52:	bd08      	pop	{r3, pc}

	// Read data
	*value = HSMCI->HSMCI_RDR;
	hsmci_transfert_pos += 4;
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
		return true;
   84f54:	f04f 0001 	mov.w	r0, #1
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
   84f58:	bd08      	pop	{r3, pc}
   84f5a:	bf00      	nop

00084f5c <hsmci_start_read_blocks>:
	return true;
}

#ifdef HSMCI_SR_DMADONE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
   84f5c:	b570      	push	{r4, r5, r6, lr}
   84f5e:	b086      	sub	sp, #24
   84f60:	4604      	mov	r4, r0
	uint32_t cfg, nb_data;
	dma_transfer_descriptor_t desc;
	bool transfert_byte;

	nb_data = nb_block * hsmci_block_size;
   84f62:	f640 4370 	movw	r3, #3184	; 0xc70
   84f66:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84f6a:	881e      	ldrh	r6, [r3, #0]
   84f6c:	fb06 f601 	mul.w	r6, r6, r1
	transfert_byte = ((HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) || (((uint32_t)dest & 0x3) > 0)) ? 1 : 0;
   84f70:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   84f74:	6841      	ldr	r1, [r0, #4]
   84f76:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   84f7a:	d12f      	bne.n	84fdc <hsmci_start_read_blocks+0x80>
	 * - Hardware Selection for the Source
	 * - Source with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   84f7c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84f80:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84f84:	4628      	mov	r0, r5
   84f86:	f245 6249 	movw	r2, #22089	; 0x5649
   84f8a:	f2c0 0208 	movt	r2, #8
   84f8e:	4790      	blx	r2
	dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84f90:	4628      	mov	r0, r5
   84f92:	f04f 0100 	mov.w	r1, #0
   84f96:	f245 635d 	movw	r3, #22109	; 0x565d
   84f9a:	f2c0 0308 	movt	r3, #8
   84f9e:	4798      	blx	r3
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_SRC_H2SEL |
			DMAC_CFG_SRC_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   84fa0:	4628      	mov	r0, r5
   84fa2:	f04f 0100 	mov.w	r1, #0
   84fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
   84faa:	f2c0 1201 	movt	r2, #257	; 0x101
   84fae:	f245 65a5 	movw	r5, #22181	; 0x56a5
   84fb2:	f2c0 0508 	movt	r5, #8
   84fb6:	47a8      	blx	r5

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
   84fb8:	f04f 0030 	mov.w	r0, #48	; 0x30
   84fbc:	f2c4 0000 	movt	r0, #16384	; 0x4000
   84fc0:	9001      	str	r0, [sp, #4]
	desc.ul_destination_addr = (uint32_t)dest;
   84fc2:	9402      	str	r4, [sp, #8]
	if (transfert_byte) {
   84fc4:	f014 0f03 	tst.w	r4, #3
   84fc8:	d002      	beq.n	84fd0 <hsmci_start_read_blocks+0x74>
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
   84fca:	b2b4      	uxth	r4, r6

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
	desc.ul_destination_addr = (uint32_t)dest;
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
   84fcc:	9403      	str	r4, [sp, #12]
   84fce:	e02a      	b.n	85026 <hsmci_start_read_blocks+0xca>
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   84fd0:	f3c6 048f 	ubfx	r4, r6, #2, #16
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
   84fd4:	f044 5108 	orr.w	r1, r4, #570425344	; 0x22000000
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   84fd8:	9103      	str	r1, [sp, #12]
   84fda:	e024      	b.n	85026 <hsmci_start_read_blocks+0xca>
	 * - Hardware Selection for the Source
	 * - Source with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   84fdc:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84fe0:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84fe4:	4628      	mov	r0, r5
   84fe6:	f245 6249 	movw	r2, #22089	; 0x5649
   84fea:	f2c0 0208 	movt	r2, #8
   84fee:	4790      	blx	r2
	dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84ff0:	4628      	mov	r0, r5
   84ff2:	f04f 0100 	mov.w	r1, #0
   84ff6:	f245 635d 	movw	r3, #22109	; 0x565d
   84ffa:	f2c0 0308 	movt	r3, #8
   84ffe:	4798      	blx	r3
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_SRC_H2SEL |
			DMAC_CFG_SRC_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   85000:	4628      	mov	r0, r5
   85002:	f04f 0100 	mov.w	r1, #0
   85006:	f44f 7200 	mov.w	r2, #512	; 0x200
   8500a:	f2c0 1201 	movt	r2, #257	; 0x101
   8500e:	f245 65a5 	movw	r5, #22181	; 0x56a5
   85012:	f2c0 0508 	movt	r5, #8
   85016:	47a8      	blx	r5

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
   85018:	f04f 0030 	mov.w	r0, #48	; 0x30
   8501c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   85020:	9001      	str	r0, [sp, #4]
	desc.ul_destination_addr = (uint32_t)dest;
   85022:	9402      	str	r4, [sp, #8]
   85024:	e7d1      	b.n	84fca <hsmci_start_read_blocks+0x6e>
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
	}
	desc.ul_ctrlB = DMAC_CTRLB_SRC_DSCR_FETCH_DISABLE
   85026:	f04f 0100 	mov.w	r1, #0
   8502a:	f2c4 2151 	movt	r1, #16977	; 0x4251
   8502e:	9104      	str	r1, [sp, #16]
			| DMAC_CTRLB_DST_DSCR_FETCH_DISABLE
			| DMAC_CTRLB_FC_PER2MEM_DMA_FC
			| DMAC_CTRLB_SRC_INCR_FIXED
			| DMAC_CTRLB_DST_INCR_INCREMENTING
			| DMAC_CTRLB_IEN;
	desc.ul_descriptor_addr = (uint32_t)NULL;
   85030:	f04f 0400 	mov.w	r4, #0
   85034:	9405      	str	r4, [sp, #20]
	dmac_channel_single_buf_transfer_init(DMAC, CONF_HSMCI_DMA_CHANNEL,
   85036:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   8503a:	f2c4 050c 	movt	r5, #16396	; 0x400c
   8503e:	4628      	mov	r0, r5
   85040:	4621      	mov	r1, r4
   85042:	aa01      	add	r2, sp, #4
   85044:	f245 63b1 	movw	r3, #22193	; 0x56b1
   85048:	f2c0 0308 	movt	r3, #8
   8504c:	4798      	blx	r3
			&desc);

	// Start DMA transfer
	dmac_channel_enable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   8504e:	4628      	mov	r0, r5
   85050:	4621      	mov	r1, r4
   85052:	f245 6251 	movw	r2, #22097	; 0x5651
   85056:	f2c0 0208 	movt	r2, #8
   8505a:	4790      	blx	r2
	hsmci_transfert_pos += nb_data;
   8505c:	f640 4074 	movw	r0, #3188	; 0xc74
   85060:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85064:	6801      	ldr	r1, [r0, #0]
   85066:	1876      	adds	r6, r6, r1
   85068:	6006      	str	r6, [r0, #0]
	return true;
}
   8506a:	f04f 0001 	mov.w	r0, #1
   8506e:	b006      	add	sp, #24
   85070:	bd70      	pop	{r4, r5, r6, pc}
   85072:	bf00      	nop

00085074 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
   85074:	b510      	push	{r4, lr}
			hsmci_reset();
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   85076:	f640 4372 	movw	r3, #3186	; 0xc72
   8507a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8507e:	8818      	ldrh	r0, [r3, #0]
   85080:	f640 4270 	movw	r2, #3184	; 0xc70
   85084:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85088:	8814      	ldrh	r4, [r2, #0]
   8508a:	fb04 f400 	mul.w	r4, r4, r0
   8508e:	f640 4174 	movw	r1, #3188	; 0xc74
   85092:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85096:	6808      	ldr	r0, [r1, #0]
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   85098:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   8509c:	f04f 0200 	mov.w	r2, #0
   850a0:	f2cc 0260 	movt	r2, #49248	; 0xc060
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   850a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   850a6:	4213      	tst	r3, r2
   850a8:	d012      	beq.n	850d0 <hsmci_wait_end_of_read_blocks+0x5c>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   850aa:	f644 307d 	movw	r0, #19325	; 0x4b7d
   850ae:	f2c0 0008 	movt	r0, #8
   850b2:	4780      	blx	r0
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   850b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   850b8:	f2c4 000c 	movt	r0, #16396	; 0x400c
   850bc:	f04f 0100 	mov.w	r1, #0
   850c0:	f245 625d 	movw	r2, #22109	; 0x565d
   850c4:	f2c0 0208 	movt	r2, #8
   850c8:	4790      	blx	r2
			return false;
   850ca:	f04f 0000 	mov.w	r0, #0
   850ce:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   850d0:	4284      	cmp	r4, r0
   850d2:	d902      	bls.n	850da <hsmci_wait_end_of_read_blocks+0x66>
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
   850d4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   850d8:	d105      	bne.n	850e6 <hsmci_wait_end_of_read_blocks+0x72>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
   850da:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   850de:	d0e1      	beq.n	850a4 <hsmci_wait_end_of_read_blocks+0x30>
	return true;
   850e0:	f04f 0001 	mov.w	r0, #1
   850e4:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
				return true;
   850e6:	f04f 0001 	mov.w	r0, #1
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
   850ea:	bd10      	pop	{r4, pc}

000850ec <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
   850ec:	b570      	push	{r4, r5, r6, lr}
   850ee:	b086      	sub	sp, #24
   850f0:	4604      	mov	r4, r0
	bool transfert_byte;
	uint32_t cfg, nb_data;
	dma_transfer_descriptor_t desc;

	nb_data = nb_block * hsmci_block_size;
   850f2:	f640 4370 	movw	r3, #3184	; 0xc70
   850f6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   850fa:	881e      	ldrh	r6, [r3, #0]
   850fc:	fb06 f601 	mul.w	r6, r6, r1
	transfert_byte = ((HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) || (((uint32_t)src & 0x3) > 0)) ? 1 : 0;
   85100:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   85104:	6841      	ldr	r1, [r0, #4]
   85106:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   8510a:	d127      	bne.n	8515c <hsmci_start_write_blocks+0x70>
	 * - Hardware Selection for the Destination
	 * - Destination with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   8510c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   85110:	f2c4 050c 	movt	r5, #16396	; 0x400c
   85114:	4628      	mov	r0, r5
   85116:	f245 6249 	movw	r2, #22089	; 0x5649
   8511a:	f2c0 0208 	movt	r2, #8
   8511e:	4790      	blx	r2
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_DST_H2SEL |
			DMAC_CFG_DST_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   85120:	4628      	mov	r0, r5
   85122:	f04f 0100 	mov.w	r1, #0
   85126:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8512a:	f2c0 1201 	movt	r2, #257	; 0x101
   8512e:	f245 63a5 	movw	r3, #22181	; 0x56a5
   85132:	f2c0 0308 	movt	r3, #8
   85136:	4798      	blx	r3

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
   85138:	9401      	str	r4, [sp, #4]
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
   8513a:	f04f 0034 	mov.w	r0, #52	; 0x34
   8513e:	f2c4 0000 	movt	r0, #16384	; 0x4000
   85142:	9002      	str	r0, [sp, #8]
	if (transfert_byte) {
   85144:	f014 0f03 	tst.w	r4, #3
   85148:	d002      	beq.n	85150 <hsmci_start_write_blocks+0x64>
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
   8514a:	b2b4      	uxth	r4, r6

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
   8514c:	9403      	str	r4, [sp, #12]
   8514e:	e022      	b.n	85196 <hsmci_start_write_blocks+0xaa>
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   85150:	f3c6 048f 	ubfx	r4, r6, #2, #16
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
   85154:	f044 5108 	orr.w	r1, r4, #570425344	; 0x22000000
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   85158:	9103      	str	r1, [sp, #12]
   8515a:	e01c      	b.n	85196 <hsmci_start_write_blocks+0xaa>
	 * - Hardware Selection for the Destination
	 * - Destination with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   8515c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   85160:	f2c4 050c 	movt	r5, #16396	; 0x400c
   85164:	4628      	mov	r0, r5
   85166:	f245 6249 	movw	r2, #22089	; 0x5649
   8516a:	f2c0 0208 	movt	r2, #8
   8516e:	4790      	blx	r2
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_DST_H2SEL |
			DMAC_CFG_DST_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   85170:	4628      	mov	r0, r5
   85172:	f04f 0100 	mov.w	r1, #0
   85176:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8517a:	f2c0 1201 	movt	r2, #257	; 0x101
   8517e:	f245 63a5 	movw	r3, #22181	; 0x56a5
   85182:	f2c0 0308 	movt	r3, #8
   85186:	4798      	blx	r3

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
   85188:	9401      	str	r4, [sp, #4]
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
   8518a:	f04f 0034 	mov.w	r0, #52	; 0x34
   8518e:	f2c4 0000 	movt	r0, #16384	; 0x4000
   85192:	9002      	str	r0, [sp, #8]
   85194:	e7d9      	b.n	8514a <hsmci_start_write_blocks+0x5e>
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
	}
	desc.ul_ctrlB = DMAC_CTRLB_SRC_DSCR_FETCH_DISABLE
   85196:	f04f 0100 	mov.w	r1, #0
   8519a:	f2c6 0131 	movt	r1, #24625	; 0x6031
   8519e:	9104      	str	r1, [sp, #16]
			| DMAC_CTRLB_DST_DSCR_FETCH_DISABLE
			| DMAC_CTRLB_FC_MEM2PER_DMA_FC
			| DMAC_CTRLB_SRC_INCR_INCREMENTING
			| DMAC_CTRLB_DST_INCR_FIXED
			| DMAC_CTRLB_IEN;
	desc.ul_descriptor_addr = (uint32_t)NULL;
   851a0:	f04f 0400 	mov.w	r4, #0
   851a4:	9405      	str	r4, [sp, #20]
	dmac_channel_single_buf_transfer_init(DMAC, CONF_HSMCI_DMA_CHANNEL,
   851a6:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   851aa:	f2c4 050c 	movt	r5, #16396	; 0x400c
   851ae:	4628      	mov	r0, r5
   851b0:	4621      	mov	r1, r4
   851b2:	aa01      	add	r2, sp, #4
   851b4:	f245 63b1 	movw	r3, #22193	; 0x56b1
   851b8:	f2c0 0308 	movt	r3, #8
   851bc:	4798      	blx	r3
			&desc);

	// Start DMA transfer
	dmac_channel_enable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   851be:	4628      	mov	r0, r5
   851c0:	4621      	mov	r1, r4
   851c2:	f245 6251 	movw	r2, #22097	; 0x5651
   851c6:	f2c0 0208 	movt	r2, #8
   851ca:	4790      	blx	r2
	hsmci_transfert_pos += nb_data;
   851cc:	f640 4074 	movw	r0, #3188	; 0xc74
   851d0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   851d4:	6801      	ldr	r1, [r0, #0]
   851d6:	1876      	adds	r6, r6, r1
   851d8:	6006      	str	r6, [r0, #0]
	return true;
}
   851da:	f04f 0001 	mov.w	r0, #1
   851de:	b006      	add	sp, #24
   851e0:	bd70      	pop	{r4, r5, r6, pc}
   851e2:	bf00      	nop

000851e4 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
   851e4:	b510      	push	{r4, lr}
			hsmci_reset();
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   851e6:	f640 4372 	movw	r3, #3186	; 0xc72
   851ea:	f2c2 0307 	movt	r3, #8199	; 0x2007
   851ee:	8818      	ldrh	r0, [r3, #0]
   851f0:	f640 4270 	movw	r2, #3184	; 0xc70
   851f4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   851f8:	8814      	ldrh	r4, [r2, #0]
   851fa:	fb04 f400 	mul.w	r4, r4, r0
   851fe:	f640 4174 	movw	r1, #3188	; 0xc74
   85202:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85206:	6808      	ldr	r0, [r1, #0]
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
   85208:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   8520c:	f04f 0200 	mov.w	r2, #0
   85210:	f2cc 0260 	movt	r2, #49248	; 0xc060
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
   85214:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   85216:	4213      	tst	r3, r2
   85218:	d012      	beq.n	85240 <hsmci_wait_end_of_write_blocks+0x5c>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   8521a:	f644 307d 	movw	r0, #19325	; 0x4b7d
   8521e:	f2c0 0008 	movt	r0, #8
   85222:	4780      	blx	r0
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   85224:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   85228:	f2c4 000c 	movt	r0, #16396	; 0x400c
   8522c:	f04f 0100 	mov.w	r1, #0
   85230:	f245 625d 	movw	r2, #22109	; 0x565d
   85234:	f2c0 0208 	movt	r2, #8
   85238:	4790      	blx	r2
			return false;
   8523a:	f04f 0000 	mov.w	r0, #0
   8523e:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   85240:	4284      	cmp	r4, r0
   85242:	d902      	bls.n	8524a <hsmci_wait_end_of_write_blocks+0x66>
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
   85244:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   85248:	d105      	bne.n	85256 <hsmci_wait_end_of_write_blocks+0x72>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
   8524a:	f013 0f20 	tst.w	r3, #32
   8524e:	d0e1      	beq.n	85214 <hsmci_wait_end_of_write_blocks+0x30>
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	return true;
   85250:	f04f 0001 	mov.w	r0, #1
   85254:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
				return true;
   85256:	f04f 0001 	mov.w	r0, #1
	} while (!(sr & HSMCI_SR_NOTBUSY));
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	return true;

}
   8525a:	bd10      	pop	{r4, pc}

0008525c <cdc_send_line>:
volatile Bool is_new_received_cdc_char = false;
volatile Bool is_terminal_open = false;


iram_size_t cdc_send_line(char* line_to_send)
{
   8525c:	b510      	push	{r4, lr}
   8525e:	4604      	mov	r4, r0
	if(is_terminal_open)
   85260:	f640 4378 	movw	r3, #3192	; 0xc78
   85264:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85268:	7818      	ldrb	r0, [r3, #0]
   8526a:	b168      	cbz	r0, 85288 <cdc_send_line+0x2c>
		return udi_cdc_write_buf((const void*) line_to_send, strlen(line_to_send));
   8526c:	4620      	mov	r0, r4
   8526e:	f64a 62bd 	movw	r2, #44733	; 0xaebd
   85272:	f2c0 0208 	movt	r2, #8
   85276:	4790      	blx	r2
   85278:	4601      	mov	r1, r0
   8527a:	4620      	mov	r0, r4
   8527c:	f246 1379 	movw	r3, #24953	; 0x6179
   85280:	f2c0 0308 	movt	r3, #8
   85284:	4798      	blx	r3
   85286:	bd10      	pop	{r4, pc}
	else
		return strlen(line_to_send);
   85288:	4620      	mov	r0, r4
   8528a:	f64a 61bd 	movw	r1, #44733	; 0xaebd
   8528e:	f2c0 0108 	movt	r1, #8
   85292:	4788      	blx	r1
}
   85294:	bd10      	pop	{r4, pc}
   85296:	bf00      	nop

00085298 <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
	if (b_enable) 
   85298:	b139      	cbz	r1, 852aa <main_cdc_set_dtr+0x12>
		is_terminal_open = true;
   8529a:	f640 4078 	movw	r0, #3192	; 0xc78
   8529e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   852a2:	f04f 0101 	mov.w	r1, #1
   852a6:	7001      	strb	r1, [r0, #0]
   852a8:	4770      	bx	lr
	else
		is_terminal_open = false;
   852aa:	f640 4378 	movw	r3, #3192	; 0xc78
   852ae:	f2c2 0307 	movt	r3, #8199	; 0x2007
   852b2:	f04f 0200 	mov.w	r2, #0
   852b6:	701a      	strb	r2, [r3, #0]
   852b8:	4770      	bx	lr
   852ba:	bf00      	nop

000852bc <uart_rx_notify>:
}

void uart_rx_notify(uint8_t port)
{
	UNUSED(port);
	is_new_received_cdc_char = true;
   852bc:	f640 4379 	movw	r3, #3193	; 0xc79
   852c0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   852c4:	f04f 0201 	mov.w	r2, #1
   852c8:	701a      	strb	r2, [r3, #0]
   852ca:	4770      	bx	lr

000852cc <main_suspend_action>:
	cpu_irq_restore(flags);	
	
	return true;
}

void main_suspend_action(void){}
   852cc:	4770      	bx	lr
   852ce:	bf00      	nop

000852d0 <main_resume_action>:
void main_resume_action(void){}
   852d0:	4770      	bx	lr
   852d2:	bf00      	nop

000852d4 <main_sof_action>:
void main_sof_action(void){}
   852d4:	4770      	bx	lr
   852d6:	bf00      	nop

000852d8 <SCPI_Write>:
uint16_t current_input_line_pointer = 0;
char current_input_line[LINE_BUFFER_SIZE];


size_t SCPI_Write(scpi_t * context, const char * data, size_t len) 
{
   852d8:	b530      	push	{r4, r5, lr}
   852da:	b083      	sub	sp, #12
   852dc:	4613      	mov	r3, r2
	(void) context;
	printf("%.*s", len, data);
   852de:	f641 3488 	movw	r4, #7048	; 0x1b88
   852e2:	f2c2 0407 	movt	r4, #8199	; 0x2007
   852e6:	9100      	str	r1, [sp, #0]
   852e8:	4620      	mov	r0, r4
   852ea:	f04f 0164 	mov.w	r1, #100	; 0x64
   852ee:	f64d 5290 	movw	r2, #56720	; 0xdd90
   852f2:	f2c0 0208 	movt	r2, #8
   852f6:	f64a 6557 	movw	r5, #44631	; 0xae57
   852fa:	f2c0 0508 	movt	r5, #8
   852fe:	47a8      	blx	r5
   85300:	4620      	mov	r0, r4
   85302:	f245 235d 	movw	r3, #21085	; 0x525d
   85306:	f2c0 0308 	movt	r3, #8
   8530a:	4798      	blx	r3
	return SCPI_RES_OK;    
}
   8530c:	f04f 0001 	mov.w	r0, #1
   85310:	b003      	add	sp, #12
   85312:	bd30      	pop	{r4, r5, pc}

00085314 <SCPI_Flush>:

scpi_result_t SCPI_Flush(scpi_t * context) 
{
	return SCPI_RES_OK;
}
   85314:	f04f 0001 	mov.w	r0, #1
   85318:	4770      	bx	lr
   8531a:	bf00      	nop

0008531c <SCPI_Error>:

int SCPI_Error(scpi_t * context, int_fast16_t err) 
{
   8531c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85320:	b083      	sub	sp, #12
   85322:	4605      	mov	r5, r0
   85324:	4688      	mov	r8, r1
	uint16_t i = 0;
	
	#define ONLY_OUTPUT_READ_ERRORS
	#ifdef ONLY_OUTPUT_READ_ERRORS
		if (context->cmd_error == 1)
   85326:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   8532a:	2b00      	cmp	r3, #0
   8532c:	d030      	beq.n	85390 <SCPI_Error+0x74>
		{
			// If it's an unknown command 
			while(i < (context->buffer.position))
   8532e:	6880      	ldr	r0, [r0, #8]
   85330:	b370      	cbz	r0, 85390 <SCPI_Error+0x74>
   85332:	f04f 0600 	mov.w	r6, #0
   85336:	4634      	mov	r4, r6
			{
				if (context->buffer.data[i] == '?')
				{
					printf("**ERROR: %d, \"%s\"\r\n", (int32_t) err, SCPI_ErrorTranslate(err));
   85338:	f642 3bf5 	movw	fp, #11253	; 0x2bf5
   8533c:	465f      	mov	r7, fp
   8533e:	f2c0 0708 	movt	r7, #8
   85342:	f641 3988 	movw	r9, #7048	; 0x1b88
   85346:	f2c2 0907 	movt	r9, #8199	; 0x2007
   8534a:	f64d 5a98 	movw	sl, #56728	; 0xdd98
   8534e:	f2c0 0a08 	movt	sl, #8
		if (context->cmd_error == 1)
		{
			// If it's an unknown command 
			while(i < (context->buffer.position))
			{
				if (context->buffer.data[i] == '?')
   85352:	68e9      	ldr	r1, [r5, #12]
   85354:	5d8a      	ldrb	r2, [r1, r6]
   85356:	2a3f      	cmp	r2, #63	; 0x3f
   85358:	d113      	bne.n	85382 <SCPI_Error+0x66>
				{
					printf("**ERROR: %d, \"%s\"\r\n", (int32_t) err, SCPI_ErrorTranslate(err));
   8535a:	fa0f f088 	sxth.w	r0, r8
   8535e:	47b8      	blx	r7
   85360:	9000      	str	r0, [sp, #0]
   85362:	4648      	mov	r0, r9
   85364:	f04f 0164 	mov.w	r1, #100	; 0x64
   85368:	4652      	mov	r2, sl
   8536a:	4643      	mov	r3, r8
   8536c:	f64a 6657 	movw	r6, #44631	; 0xae57
   85370:	f2c0 0608 	movt	r6, #8
   85374:	47b0      	blx	r6
   85376:	4648      	mov	r0, r9
   85378:	f245 235d 	movw	r3, #21085	; 0x525d
   8537c:	f2c0 0308 	movt	r3, #8
   85380:	4798      	blx	r3
				}
				i++;
   85382:	f104 0401 	add.w	r4, r4, #1
   85386:	b2a4      	uxth	r4, r4
	#define ONLY_OUTPUT_READ_ERRORS
	#ifdef ONLY_OUTPUT_READ_ERRORS
		if (context->cmd_error == 1)
		{
			// If it's an unknown command 
			while(i < (context->buffer.position))
   85388:	4626      	mov	r6, r4
   8538a:	68a8      	ldr	r0, [r5, #8]
   8538c:	4284      	cmp	r4, r0
   8538e:	d3e0      	bcc.n	85352 <SCPI_Error+0x36>
		}
	#endif
	//(void) context;
	//printf("**ERROR: %d, \"%s\"\r\n", (int32_t) err, SCPI_ErrorTranslate(err));
	return 0;
}
   85390:	f04f 0000 	mov.w	r0, #0
   85394:	b003      	add	sp, #12
   85396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8539a:	bf00      	nop

0008539c <SCPI_Control>:

scpi_result_t SCPI_Control(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) 
{
   8539c:	b530      	push	{r4, r5, lr}
   8539e:	b083      	sub	sp, #12
   853a0:	460b      	mov	r3, r1
   853a2:	4614      	mov	r4, r2
	if (SCPI_CTRL_SRQ == ctrl) 
   853a4:	2901      	cmp	r1, #1
   853a6:	d118      	bne.n	853da <SCPI_Control+0x3e>
	{
		printf("**SRQ: 0x%X (%d)\r\n", val, val);
   853a8:	f641 3588 	movw	r5, #7048	; 0x1b88
   853ac:	f2c2 0507 	movt	r5, #8199	; 0x2007
   853b0:	9200      	str	r2, [sp, #0]
   853b2:	4628      	mov	r0, r5
   853b4:	f04f 0164 	mov.w	r1, #100	; 0x64
   853b8:	f64d 52ac 	movw	r2, #56748	; 0xddac
   853bc:	f2c0 0208 	movt	r2, #8
   853c0:	4623      	mov	r3, r4
   853c2:	f64a 6457 	movw	r4, #44631	; 0xae57
   853c6:	f2c0 0408 	movt	r4, #8
   853ca:	47a0      	blx	r4
   853cc:	4628      	mov	r0, r5
   853ce:	f245 215d 	movw	r1, #21085	; 0x525d
   853d2:	f2c0 0108 	movt	r1, #8
   853d6:	4788      	blx	r1
   853d8:	e017      	b.n	8540a <SCPI_Control+0x6e>
	}
	else 
	{
		printf("**CTRL %02x: 0x%X (%d)\r\n", ctrl, val, val);
   853da:	f641 3588 	movw	r5, #7048	; 0x1b88
   853de:	f2c2 0507 	movt	r5, #8199	; 0x2007
   853e2:	9200      	str	r2, [sp, #0]
   853e4:	9201      	str	r2, [sp, #4]
   853e6:	4628      	mov	r0, r5
   853e8:	f04f 0164 	mov.w	r1, #100	; 0x64
   853ec:	f64d 52c0 	movw	r2, #56768	; 0xddc0
   853f0:	f2c0 0208 	movt	r2, #8
   853f4:	f64a 6457 	movw	r4, #44631	; 0xae57
   853f8:	f2c0 0408 	movt	r4, #8
   853fc:	47a0      	blx	r4
   853fe:	4628      	mov	r0, r5
   85400:	f245 235d 	movw	r3, #21085	; 0x525d
   85404:	f2c0 0308 	movt	r3, #8
   85408:	4798      	blx	r3
	}
	return SCPI_RES_OK;
}
   8540a:	f04f 0001 	mov.w	r0, #1
   8540e:	b003      	add	sp, #12
   85410:	bd30      	pop	{r4, r5, pc}
   85412:	bf00      	nop

00085414 <SCPI_Test>:

scpi_result_t SCPI_Test(scpi_t * context) 
{
   85414:	b508      	push	{r3, lr}
	printf("**Test\r\n");
   85416:	f641 3288 	movw	r2, #7048	; 0x1b88
   8541a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8541e:	f64d 53dc 	movw	r3, #56796	; 0xdddc
   85422:	f2c0 0308 	movt	r3, #8
   85426:	cb03      	ldmia	r3!, {r0, r1}
   85428:	6010      	str	r0, [r2, #0]
   8542a:	6051      	str	r1, [r2, #4]
   8542c:	7818      	ldrb	r0, [r3, #0]
   8542e:	7210      	strb	r0, [r2, #8]
   85430:	4610      	mov	r0, r2
   85432:	f245 215d 	movw	r1, #21085	; 0x525d
   85436:	f2c0 0108 	movt	r1, #8
   8543a:	4788      	blx	r1
	return SCPI_RES_OK;
}
   8543c:	f04f 0001 	mov.w	r0, #1
   85440:	bd08      	pop	{r3, pc}
   85442:	bf00      	nop

00085444 <SCPI_Reset>:

scpi_result_t SCPI_Reset(scpi_t * context) 
{
   85444:	b508      	push	{r3, lr}
	printf("**Reset\r\n");
   85446:	f641 3288 	movw	r2, #7048	; 0x1b88
   8544a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8544e:	f64d 53e8 	movw	r3, #56808	; 0xdde8
   85452:	f2c0 0308 	movt	r3, #8
   85456:	cb03      	ldmia	r3!, {r0, r1}
   85458:	6010      	str	r0, [r2, #0]
   8545a:	6051      	str	r1, [r2, #4]
   8545c:	8818      	ldrh	r0, [r3, #0]
   8545e:	8110      	strh	r0, [r2, #8]
   85460:	4610      	mov	r0, r2
   85462:	f245 215d 	movw	r1, #21085	; 0x525d
   85466:	f2c0 0108 	movt	r1, #8
   8546a:	4788      	blx	r1
	return SCPI_RES_OK;
}
   8546c:	f04f 0001 	mov.w	r0, #1
   85470:	bd08      	pop	{r3, pc}
   85472:	bf00      	nop

00085474 <console_init>:

void console_init(void)
{
   85474:	b508      	push	{r3, lr}
	SCPI_Init(&scpi_context);
   85476:	f240 0040 	movw	r0, #64	; 0x40
   8547a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8547e:	f243 5349 	movw	r3, #13641	; 0x3549
   85482:	f2c0 0308 	movt	r3, #8
   85486:	4798      	blx	r3
   85488:	bd08      	pop	{r3, pc}
   8548a:	bf00      	nop

0008548c <console_process>:
}

void console_process(void)
{
   8548c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	iram_size_t data_remaining = 0;
	uint8_t temp_buffer[10];
	
	if(udi_cdc_get_nb_received_data() == 0)
   85490:	f645 43dd 	movw	r3, #23773	; 0x5cdd
   85494:	f2c0 0308 	movt	r3, #8
   85498:	4798      	blx	r3
   8549a:	2800      	cmp	r0, #0
   8549c:	d040      	beq.n	85520 <console_process+0x94>
		return;
	
	do 
	{
		data_remaining = udi_cdc_read_buf(current_input_line+current_input_line_pointer, 1);
   8549e:	f640 447a 	movw	r4, #3194	; 0xc7a
   854a2:	f2c2 0407 	movt	r4, #8199	; 0x2007
   854a6:	f641 35ec 	movw	r5, #7148	; 0x1bec
   854aa:	f2c2 0507 	movt	r5, #8199	; 0x2007
   854ae:	f04f 0601 	mov.w	r6, #1
   854b2:	f645 7af1 	movw	sl, #24561	; 0x5ff1
   854b6:	f2c0 0a08 	movt	sl, #8
		//udi_cdc_putc(current_input_line[current_input_line_pointer]);
		SCPI_Input(&scpi_context, current_input_line+current_input_line_pointer, 1);
   854ba:	f240 0940 	movw	r9, #64	; 0x40
   854be:	f2c2 0907 	movt	r9, #8199	; 0x2007
   854c2:	f243 585d 	movw	r8, #13661	; 0x355d
   854c6:	f2c0 0808 	movt	r8, #8
	if(udi_cdc_get_nb_received_data() == 0)
		return;
	
	do 
	{
		data_remaining = udi_cdc_read_buf(current_input_line+current_input_line_pointer, 1);
   854ca:	8820      	ldrh	r0, [r4, #0]
   854cc:	1940      	adds	r0, r0, r5
   854ce:	4631      	mov	r1, r6
   854d0:	47d0      	blx	sl
   854d2:	4607      	mov	r7, r0
		//udi_cdc_putc(current_input_line[current_input_line_pointer]);
		SCPI_Input(&scpi_context, current_input_line+current_input_line_pointer, 1);
   854d4:	8821      	ldrh	r1, [r4, #0]
   854d6:	4648      	mov	r0, r9
   854d8:	1949      	adds	r1, r1, r5
   854da:	4632      	mov	r2, r6
   854dc:	47c0      	blx	r8
		current_input_line_pointer++;
   854de:	8822      	ldrh	r2, [r4, #0]
   854e0:	f102 0201 	add.w	r2, r2, #1
   854e4:	b293      	uxth	r3, r2
   854e6:	8023      	strh	r3, [r4, #0]
		
		if((current_input_line[current_input_line_pointer-1] == 0x0D) || (current_input_line[current_input_line_pointer-1] == 0x0A))
   854e8:	18e8      	adds	r0, r5, r3
   854ea:	f810 1c01 	ldrb.w	r1, [r0, #-1]
   854ee:	290d      	cmp	r1, #13
   854f0:	d001      	beq.n	854f6 <console_process+0x6a>
   854f2:	290a      	cmp	r1, #10
   854f4:	d102      	bne.n	854fc <console_process+0x70>
		{
			current_input_line_pointer = 0;
   854f6:	f04f 0200 	mov.w	r2, #0
   854fa:	8022      	strh	r2, [r4, #0]
			// should we do another parsing rather than scpi?
		}
	} 
	while((data_remaining > 0) && (current_input_line_pointer < LINE_BUFFER_SIZE));
   854fc:	b117      	cbz	r7, 85504 <console_process+0x78>
   854fe:	8823      	ldrh	r3, [r4, #0]
   85500:	2bc7      	cmp	r3, #199	; 0xc7
   85502:	d9e2      	bls.n	854ca <console_process+0x3e>
	
	if(current_input_line_pointer == LINE_BUFFER_SIZE)
   85504:	f640 407a 	movw	r0, #3194	; 0xc7a
   85508:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8550c:	8801      	ldrh	r1, [r0, #0]
   8550e:	29c8      	cmp	r1, #200	; 0xc8
   85510:	d106      	bne.n	85520 <console_process+0x94>
	{
		// We should return a message or smth...
		current_input_line_pointer = 0;
   85512:	f640 437a 	movw	r3, #3194	; 0xc7a
   85516:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8551a:	f04f 0200 	mov.w	r2, #0
   8551e:	801a      	strh	r2, [r3, #0]
   85520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00085524 <main_extra_string>:
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   85524:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   85528:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8552c:	7898      	ldrb	r0, [r3, #2]
   8552e:	2804      	cmp	r0, #4
   85530:	d002      	beq.n	85538 <main_extra_string+0x14>
   85532:	2805      	cmp	r0, #5
   85534:	d13b      	bne.n	855ae <main_extra_string+0x8a>
   85536:	e004      	b.n	85542 <main_extra_string+0x1e>
	case UDI_CDC_IAD_STRING_ID:
		str_lgt = sizeof(udi_cdc_name)-1;
		str = udi_cdc_name;
   85538:	f240 02c4 	movw	r2, #196	; 0xc4
   8553c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85540:	e003      	b.n	8554a <main_extra_string+0x26>
		break;
	case UDI_MSC_STRING_ID:
		str_lgt = sizeof(udi_msc_name)-1;
		str = udi_msc_name;
   85542:	f240 02b4 	movw	r2, #180	; 0xb4
   85546:	f2c2 0207 	movt	r2, #8199	; 0x2007
		return false;
	}

	if (str_lgt!=0) {
		for( i=0; i<str_lgt; i++) {
			extra_strings_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   8554a:	f240 0398 	movw	r3, #152	; 0x98
   8554e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85552:	7811      	ldrb	r1, [r2, #0]
   85554:	8059      	strh	r1, [r3, #2]
   85556:	7850      	ldrb	r0, [r2, #1]
   85558:	8098      	strh	r0, [r3, #4]
   8555a:	7891      	ldrb	r1, [r2, #2]
   8555c:	80d9      	strh	r1, [r3, #6]
   8555e:	78d0      	ldrb	r0, [r2, #3]
   85560:	8118      	strh	r0, [r3, #8]
   85562:	7911      	ldrb	r1, [r2, #4]
   85564:	8159      	strh	r1, [r3, #10]
   85566:	7950      	ldrb	r0, [r2, #5]
   85568:	8198      	strh	r0, [r3, #12]
   8556a:	7991      	ldrb	r1, [r2, #6]
   8556c:	81d9      	strh	r1, [r3, #14]
   8556e:	79d0      	ldrb	r0, [r2, #7]
   85570:	8218      	strh	r0, [r3, #16]
   85572:	7a11      	ldrb	r1, [r2, #8]
   85574:	8259      	strh	r1, [r3, #18]
   85576:	7a50      	ldrb	r0, [r2, #9]
   85578:	8298      	strh	r0, [r3, #20]
   8557a:	7a91      	ldrb	r1, [r2, #10]
   8557c:	82d9      	strh	r1, [r3, #22]
   8557e:	7ad0      	ldrb	r0, [r2, #11]
   85580:	8318      	strh	r0, [r3, #24]
   85582:	7b12      	ldrb	r2, [r2, #12]
   85584:	835a      	strh	r2, [r3, #26]
		}
		extra_strings_desc.header.bLength = 2+ (str_lgt)*2;
   85586:	f04f 011c 	mov.w	r1, #28
   8558a:	7019      	strb	r1, [r3, #0]
		udd_g_ctrlreq.payload_size = extra_strings_desc.header.bLength;
   8558c:	f641 40bc 	movw	r0, #7356	; 0x1cbc
   85590:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85594:	8181      	strh	r1, [r0, #12]
		udd_g_ctrlreq.payload = (uint8_t *) &extra_strings_desc;
   85596:	6083      	str	r3, [r0, #8]
	}

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength) {
   85598:	88c3      	ldrh	r3, [r0, #6]
   8559a:	2b1b      	cmp	r3, #27
   8559c:	d80a      	bhi.n	855b4 <main_extra_string+0x90>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   8559e:	f641 42bc 	movw	r2, #7356	; 0x1cbc
   855a2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   855a6:	8193      	strh	r3, [r2, #12]
	}
	return true;
   855a8:	f04f 0001 	mov.w	r0, #1
   855ac:	4770      	bx	lr
	case UDI_MSC_STRING_ID:
		str_lgt = sizeof(udi_msc_name)-1;
		str = udi_msc_name;
		break;
	default:
		return false;
   855ae:	f04f 0000 	mov.w	r0, #0
   855b2:	4770      	bx	lr

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
   855b4:	f04f 0001 	mov.w	r0, #1
   855b8:	4770      	bx	lr
   855ba:	bf00      	nop

000855bc <HardFault_Handler>:
         * Get the appropriate stack pointer, depending on our mode,
         * and use it as the parameter to the C handler. This function
         * will never return
         */

        __asm(  ".syntax unified\n"
   855bc:	2004      	movs	r0, #4
   855be:	4671      	mov	r1, lr
   855c0:	4208      	tst	r0, r1
   855c2:	f000 8004 	beq.w	855ce <_MSP>
   855c6:	f3ef 8009 	mrs	r0, PSP
   855ca:	f000 b805 	b.w	855d8 <HardFault_HandlerC>

000855ce <_MSP>:
   855ce:	f3ef 8008 	mrs	r0, MSP
   855d2:	f000 b801 	b.w	855d8 <HardFault_HandlerC>
   855d6:	bf00      	nop

000855d8 <HardFault_HandlerC>:
 * into local variables for ease of reading.
 * We then read the various Fault Status and Address Registers to help decode
 * cause of the fault.
 * The function ends with a BKPT instruction to force control back into the debugger
 */
void HardFault_HandlerC(unsigned long *hardfault_args){
   855d8:	b08e      	sub	sp, #56	; 0x38
        volatile unsigned long _DFSR ;
        volatile unsigned long _AFSR ;
        volatile unsigned long _BFAR ;
        volatile unsigned long _MMAR ;

        stacked_r0 = ((unsigned long)hardfault_args[0]) ;
   855da:	6803      	ldr	r3, [r0, #0]
   855dc:	930d      	str	r3, [sp, #52]	; 0x34
        stacked_r1 = ((unsigned long)hardfault_args[1]) ;
   855de:	6841      	ldr	r1, [r0, #4]
   855e0:	910c      	str	r1, [sp, #48]	; 0x30
        stacked_r2 = ((unsigned long)hardfault_args[2]) ;
   855e2:	6882      	ldr	r2, [r0, #8]
   855e4:	920b      	str	r2, [sp, #44]	; 0x2c
        stacked_r3 = ((unsigned long)hardfault_args[3]) ;
   855e6:	68c3      	ldr	r3, [r0, #12]
   855e8:	930a      	str	r3, [sp, #40]	; 0x28
        stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   855ea:	6901      	ldr	r1, [r0, #16]
   855ec:	9109      	str	r1, [sp, #36]	; 0x24
        stacked_lr = ((unsigned long)hardfault_args[5]) ;
   855ee:	6942      	ldr	r2, [r0, #20]
   855f0:	9208      	str	r2, [sp, #32]
        stacked_pc = ((unsigned long)hardfault_args[6]) ;
   855f2:	6983      	ldr	r3, [r0, #24]
   855f4:	9307      	str	r3, [sp, #28]
        stacked_psr = ((unsigned long)hardfault_args[7]) ;
   855f6:	69c0      	ldr	r0, [r0, #28]
   855f8:	9006      	str	r0, [sp, #24]

        // Configurable Fault Status Register
        // Consists of MMSR, BFSR and UFSR
        _CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;   
   855fa:	f64e 5128 	movw	r1, #60712	; 0xed28
   855fe:	f2ce 0100 	movt	r1, #57344	; 0xe000
   85602:	680a      	ldr	r2, [r1, #0]
   85604:	9205      	str	r2, [sp, #20]
                                                                                        
        // Hard Fault Status Register
        _HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   85606:	f64e 532c 	movw	r3, #60716	; 0xed2c
   8560a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8560e:	6818      	ldr	r0, [r3, #0]
   85610:	9004      	str	r0, [sp, #16]

        // Debug Fault Status Register
        _DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   85612:	f64e 5130 	movw	r1, #60720	; 0xed30
   85616:	f2ce 0100 	movt	r1, #57344	; 0xe000
   8561a:	680a      	ldr	r2, [r1, #0]
   8561c:	9203      	str	r2, [sp, #12]

        // Auxiliary Fault Status Register
        _AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   8561e:	f64e 533c 	movw	r3, #60732	; 0xed3c
   85622:	f2ce 0300 	movt	r3, #57344	; 0xe000
   85626:	6818      	ldr	r0, [r3, #0]
   85628:	9002      	str	r0, [sp, #8]

        // Read the Fault Address Registers. These may not contain valid values.
        // Check BFARVALID/MMARVALID to see if they are valid values
        // MemManage Fault Address Register
        _MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   8562a:	f64e 5134 	movw	r1, #60724	; 0xed34
   8562e:	f2ce 0100 	movt	r1, #57344	; 0xe000
   85632:	680a      	ldr	r2, [r1, #0]
   85634:	9200      	str	r2, [sp, #0]
        // Bus Fault Address Register
        _BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   85636:	f64e 5338 	movw	r3, #60728	; 0xed38
   8563a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8563e:	6818      	ldr	r0, [r3, #0]
   85640:	9001      	str	r0, [sp, #4]

        __asm("BKPT #0\n") ; // Break into the debugger
   85642:	be00      	bkpt	0x0000
   85644:	e7fe      	b.n	85644 <HardFault_HandlerC+0x6c>
   85646:	bf00      	nop

00085648 <dmac_enable>:
 *
 * \param p_dmac  Pointer to a DMAC peripheral instance.
 */
void dmac_enable(Dmac *p_dmac)
{
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   85648:	f04f 0301 	mov.w	r3, #1
   8564c:	6043      	str	r3, [r0, #4]
   8564e:	4770      	bx	lr

00085650 <dmac_channel_enable>:
 * \param p_dmac Pointer to a DMAC peripheral instance.
 * \param ul_num Channel number.
 */
void dmac_channel_enable(Dmac *p_dmac, uint32_t ul_num)
{
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   85650:	f04f 0301 	mov.w	r3, #1
   85654:	fa03 f101 	lsl.w	r1, r3, r1
   85658:	6281      	str	r1, [r0, #40]	; 0x28
   8565a:	4770      	bx	lr

0008565c <dmac_channel_disable>:
 * \param p_dmac Pointer to a DMAC peripheral instance.
 * \param ul_num Channel number.
 */
void dmac_channel_disable(Dmac *p_dmac, uint32_t ul_num)
{
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   8565c:	f04f 0301 	mov.w	r3, #1
   85660:	fa03 f101 	lsl.w	r1, r3, r1
   85664:	62c1      	str	r1, [r0, #44]	; 0x2c
   85666:	4770      	bx	lr

00085668 <dmac_channel_set_source_addr>:
 * \note This register must be aligned with the source transfer width.
 */
void dmac_channel_set_source_addr(Dmac *p_dmac,
		uint32_t ul_num, uint32_t ul_addr)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   85668:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8566c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   85670:	63c2      	str	r2, [r0, #60]	; 0x3c
   85672:	4770      	bx	lr

00085674 <dmac_channel_set_destination_addr>:
 * \note This register must be aligned with the source transfer width.
 */
void dmac_channel_set_destination_addr(Dmac *p_dmac, uint32_t ul_num,
		uint32_t ul_addr)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   85674:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   85678:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   8567c:	6402      	str	r2, [r0, #64]	; 0x40
   8567e:	4770      	bx	lr

00085680 <dmac_channel_set_descriptor_addr>:
 * \param ul_desc     Descriptor address.
 */
void dmac_channel_set_descriptor_addr(Dmac *p_dmac,
		uint32_t ul_num, uint32_t ul_desc)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   85680:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   85684:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   85688:	6442      	str	r2, [r0, #68]	; 0x44
   8568a:	4770      	bx	lr

0008568c <dmac_channel_set_ctrlA>:
 * \param ul_num      Channel number.
 * \param ul_ctrlA    Configuration of control A register.
 */
void dmac_channel_set_ctrlA(Dmac *p_dmac, uint32_t ul_num, uint32_t ul_ctrlA)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   8568c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   85690:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   85694:	6482      	str	r2, [r0, #72]	; 0x48
   85696:	4770      	bx	lr

00085698 <dmac_channel_set_ctrlB>:
 * \param ul_num      Channel number.
 * \param ul_ctrlB    Configuration of control B register.
 */
void dmac_channel_set_ctrlB(Dmac *p_dmac, uint32_t ul_num, uint32_t ul_ctrlB)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   85698:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8569c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   856a0:	64c2      	str	r2, [r0, #76]	; 0x4c
   856a2:	4770      	bx	lr

000856a4 <dmac_channel_set_configuration>:
 * \param ul_cfg      Configuration of CFG register.
 */
void dmac_channel_set_configuration(Dmac *p_dmac, uint32_t ul_num,
		uint32_t ul_cfg)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   856a4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   856a8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   856ac:	6502      	str	r2, [r0, #80]	; 0x50
   856ae:	4770      	bx	lr

000856b0 <dmac_channel_single_buf_transfer_init>:
 * \param ul_num      Channel number.
 * \param p_desc      Pointer to a transfer descriptor.
 */
void dmac_channel_single_buf_transfer_init(Dmac *p_dmac,
		uint32_t ul_num, dma_transfer_descriptor_t *p_desc)
{
   856b0:	b570      	push	{r4, r5, r6, lr}
   856b2:	4604      	mov	r4, r0
   856b4:	460e      	mov	r6, r1
   856b6:	4615      	mov	r5, r2
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   856b8:	6a43      	ldr	r3, [r0, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   856ba:	6812      	ldr	r2, [r2, #0]
   856bc:	f245 6369 	movw	r3, #22121	; 0x5669
   856c0:	f2c0 0308 	movt	r3, #8
   856c4:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   856c6:	4620      	mov	r0, r4
   856c8:	4631      	mov	r1, r6
   856ca:	686a      	ldr	r2, [r5, #4]
   856cc:	f245 6375 	movw	r3, #22133	; 0x5675
   856d0:	f2c0 0308 	movt	r3, #8
   856d4:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   856d6:	4620      	mov	r0, r4
   856d8:	4631      	mov	r1, r6
   856da:	f04f 0200 	mov.w	r2, #0
   856de:	f245 6381 	movw	r3, #22145	; 0x5681
   856e2:	f2c0 0308 	movt	r3, #8
   856e6:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   856e8:	4620      	mov	r0, r4
   856ea:	4631      	mov	r1, r6
   856ec:	68aa      	ldr	r2, [r5, #8]
   856ee:	f245 638d 	movw	r3, #22157	; 0x568d
   856f2:	f2c0 0308 	movt	r3, #8
   856f6:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   856f8:	4620      	mov	r0, r4
   856fa:	4631      	mov	r1, r6
   856fc:	68ea      	ldr	r2, [r5, #12]
   856fe:	f245 6399 	movw	r3, #22169	; 0x5699
   85702:	f2c0 0308 	movt	r3, #8
   85706:	4798      	blx	r3
   85708:	bd70      	pop	{r4, r5, r6, pc}
   8570a:	bf00      	nop

0008570c <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode. 
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
   8570c:	b121      	cbz	r1, 85718 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
   8570e:	6842      	ldr	r2, [r0, #4]
   85710:	f042 0301 	orr.w	r3, r2, #1
   85714:	6043      	str	r3, [r0, #4]
   85716:	4770      	bx	lr
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
   85718:	6843      	ldr	r3, [r0, #4]
   8571a:	f023 0101 	bic.w	r1, r3, #1
   8571e:	6041      	str	r1, [r0, #4]
   85720:	4770      	bx	lr
   85722:	bf00      	nop

00085724 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
   85724:	6201      	str	r1, [r0, #32]
   85726:	4770      	bx	lr

00085728 <rtc_disable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be disabled.
 */
void rtc_disable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IDR = ul_sources;
   85728:	6241      	str	r1, [r0, #36]	; 0x24
   8572a:	4770      	bx	lr

0008572c <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
   8572c:	6980      	ldr	r0, [r0, #24]
}
   8572e:	4770      	bx	lr

00085730 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared. 
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
   85730:	61c1      	str	r1, [r0, #28]
   85732:	4770      	bx	lr

00085734 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   85734:	b508      	push	{r3, lr}
	}
#endif

	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_UPLL) {

		pmc_enable_upll_clock();
   85736:	f647 6309 	movw	r3, #32265	; 0x7e09
   8573a:	f2c0 0308 	movt	r3, #8
   8573e:	4798      	blx	r3
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
   85740:	f04f 0000 	mov.w	r0, #0
   85744:	f647 61ad 	movw	r1, #32429	; 0x7ead
   85748:	f2c0 0108 	movt	r1, #8
   8574c:	4788      	blx	r1
		pmc_enable_udpck();
   8574e:	f647 60c5 	movw	r0, #32453	; 0x7ec5
   85752:	f2c0 0008 	movt	r0, #8
   85756:	4780      	blx	r0
   85758:	bd08      	pop	{r3, pc}
   8575a:	bf00      	nop

0008575c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8575c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8575e:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   85762:	f2c0 5001 	movt	r0, #1281	; 0x501
   85766:	f24a 13ad 	movw	r3, #41389	; 0xa1ad
   8576a:	f2c0 0308 	movt	r3, #8
   8576e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   85770:	f04f 0000 	mov.w	r0, #0
   85774:	f04f 013e 	mov.w	r1, #62	; 0x3e
   85778:	f647 5269 	movw	r2, #32105	; 0x7d69
   8577c:	f2c0 0208 	movt	r2, #8
   85780:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   85782:	f647 54d9 	movw	r4, #32217	; 0x7dd9
   85786:	f2c0 0408 	movt	r4, #8
   8578a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8578c:	2800      	cmp	r0, #0
   8578e:	d0fc      	beq.n	8578a <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   85790:	f647 50e9 	movw	r0, #32233	; 0x7de9
   85794:	f2c0 0008 	movt	r0, #8
   85798:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8579a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   8579e:	f2c4 010e 	movt	r1, #16398	; 0x400e
   857a2:	f643 7301 	movw	r3, #16129	; 0x3f01
   857a6:	f2c2 030d 	movt	r3, #8205	; 0x200d
   857aa:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   857ac:	f647 54f9 	movw	r4, #32249	; 0x7df9
   857b0:	f2c0 0408 	movt	r4, #8
   857b4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   857b6:	2800      	cmp	r0, #0
   857b8:	d0fc      	beq.n	857b4 <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   857ba:	f04f 0010 	mov.w	r0, #16
   857be:	f647 42c9 	movw	r2, #31945	; 0x7cc9
   857c2:	f2c0 0208 	movt	r2, #8
   857c6:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   857c8:	f649 70e5 	movw	r0, #40933	; 0x9fe5
   857cc:	f2c0 0008 	movt	r0, #8
   857d0:	4780      	blx	r0
   857d2:	bd10      	pop	{r4, pc}

000857d4 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
   857d4:	f04f 0001 	mov.w	r0, #1
   857d8:	4770      	bx	lr
   857da:	bf00      	nop

000857dc <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   857dc:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
   857de:	b928      	cbnz	r0, 857ec <mem_test_unit_ready+0x10>
   857e0:	f644 1351 	movw	r3, #18769	; 0x4951
   857e4:	f2c0 0308 	movt	r3, #8
   857e8:	4798      	blx	r3
   857ea:	bd08      	pop	{r3, pc}
   857ec:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
   857f0:	bd08      	pop	{r3, pc}
   857f2:	bf00      	nop

000857f4 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   857f4:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
   857f6:	b930      	cbnz	r0, 85806 <mem_read_capacity+0x12>
   857f8:	4608      	mov	r0, r1
   857fa:	f644 138d 	movw	r3, #18829	; 0x498d
   857fe:	f2c0 0308 	movt	r3, #8
   85802:	4798      	blx	r3
   85804:	bd08      	pop	{r3, pc}
   85806:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
   8580a:	bd08      	pop	{r3, pc}

0008580c <mem_unload>:

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
   8580c:	b910      	cbnz	r0, 85814 <mem_unload+0x8>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
   8580e:	f081 0001 	eor.w	r0, r1, #1
   85812:	4770      	bx	lr

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
   85814:	f04f 0000 	mov.w	r0, #0
#endif

  Ctrl_access_unlock();

  return unloaded;
}
   85818:	4770      	bx	lr
   8581a:	bf00      	nop

0008581c <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
   8581c:	b508      	push	{r3, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   8581e:	b928      	cbnz	r0, 8582c <mem_wr_protect+0x10>
   85820:	f644 13b1 	movw	r3, #18865	; 0x49b1
   85824:	f2c0 0308 	movt	r3, #8
   85828:	4798      	blx	r3
   8582a:	bd08      	pop	{r3, pc}
   8582c:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
   85830:	bd08      	pop	{r3, pc}
   85832:	bf00      	nop

00085834 <mem_removal>:


bool mem_removal(U8 lun)
{
   85834:	b508      	push	{r3, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
   85836:	b928      	cbnz	r0, 85844 <mem_removal+0x10>
   85838:	f644 13cd 	movw	r3, #18893	; 0x49cd
   8583c:	f2c0 0308 	movt	r3, #8
   85840:	4798      	blx	r3
   85842:	bd08      	pop	{r3, pc}
   85844:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return removal;
}
   85848:	bd08      	pop	{r3, pc}
   8584a:	bf00      	nop

0008584c <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
   8584c:	b920      	cbnz	r0, 85858 <mem_name+0xc>
   8584e:	f64d 50f4 	movw	r0, #56820	; 0xddf4
   85852:	f2c0 0008 	movt	r0, #8
   85856:	4770      	bx	lr
   85858:	f04f 0000 	mov.w	r0, #0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
   8585c:	4770      	bx	lr
   8585e:	bf00      	nop

00085860 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
   85860:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  status =
   85862:	b938      	cbnz	r0, 85874 <memory_2_usb+0x14>
   85864:	4608      	mov	r0, r1
   85866:	4611      	mov	r1, r2
   85868:	f644 2399 	movw	r3, #19097	; 0x4a99
   8586c:	f2c0 0308 	movt	r3, #8
   85870:	4798      	blx	r3
   85872:	bd08      	pop	{r3, pc}
   85874:	f04f 0001 	mov.w	r0, #1
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
   85878:	bd08      	pop	{r3, pc}
   8587a:	bf00      	nop

0008587c <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
   8587c:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  status =
   8587e:	b938      	cbnz	r0, 85890 <usb_2_memory+0x14>
   85880:	4608      	mov	r0, r1
   85882:	4611      	mov	r1, r2
   85884:	f644 3365 	movw	r3, #19301	; 0x4b65
   85888:	f2c0 0308 	movt	r3, #8
   8588c:	4798      	blx	r3
   8588e:	bd08      	pop	{r3, pc}
   85890:	f04f 0001 	mov.w	r0, #1
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
   85894:	bd08      	pop	{r3, pc}
   85896:	bf00      	nop

00085898 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   85898:	f241 0394 	movw	r3, #4244	; 0x1094
   8589c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   858a0:	781a      	ldrb	r2, [r3, #0]
   858a2:	f102 30ff 	add.w	r0, r2, #4294967295
   858a6:	b2c1      	uxtb	r1, r0
   858a8:	7019      	strb	r1, [r3, #0]
   858aa:	4770      	bx	lr

000858ac <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   858ac:	f04f 0000 	mov.w	r0, #0
   858b0:	4770      	bx	lr
   858b2:	bf00      	nop

000858b4 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   858b4:	f04f 0000 	mov.w	r0, #0
   858b8:	4770      	bx	lr
   858ba:	bf00      	nop

000858bc <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
   858bc:	4770      	bx	lr
   858be:	bf00      	nop

000858c0 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
   858c0:	b530      	push	{r4, r5, lr}
   858c2:	b083      	sub	sp, #12

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   858c4:	f241 03a8 	movw	r3, #4264	; 0x10a8
   858c8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   858cc:	7818      	ldrb	r0, [r3, #0]
   858ce:	2800      	cmp	r0, #0
   858d0:	f040 80df 	bne.w	85a92 <udi_cdc_tx_send+0x1d2>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   858d4:	f249 3145 	movw	r1, #37701	; 0x9345
   858d8:	f2c0 0108 	movt	r1, #8
   858dc:	4788      	blx	r1
   858de:	b160      	cbz	r0, 858fa <udi_cdc_tx_send+0x3a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   858e0:	f241 049c 	movw	r4, #4252	; 0x109c
   858e4:	f2c2 0407 	movt	r4, #8199	; 0x2007
   858e8:	8824      	ldrh	r4, [r4, #0]
   858ea:	f249 30a9 	movw	r0, #37801	; 0x93a9
   858ee:	f2c0 0008 	movt	r0, #8
   858f2:	4780      	blx	r0
   858f4:	4284      	cmp	r4, r0
   858f6:	d10d      	bne.n	85914 <udi_cdc_tx_send+0x54>
   858f8:	e0cb      	b.n	85a92 <udi_cdc_tx_send+0x1d2>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   858fa:	f241 029c 	movw	r2, #4252	; 0x109c
   858fe:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85902:	8814      	ldrh	r4, [r2, #0]
   85904:	f249 3399 	movw	r3, #37785	; 0x9399
   85908:	f2c0 0308 	movt	r3, #8
   8590c:	4798      	blx	r3
   8590e:	4284      	cmp	r4, r0
   85910:	f000 80bf 	beq.w	85a92 <udi_cdc_tx_send+0x1d2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85914:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   85918:	f1d5 0501 	rsbs	r5, r5, #1
   8591c:	bf38      	it	cc
   8591e:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   85920:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   85922:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85926:	f240 21a0 	movw	r1, #672	; 0x2a0
   8592a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8592e:	f04f 0200 	mov.w	r2, #0
   85932:	700a      	strb	r2, [r1, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   85934:	f640 4388 	movw	r3, #3208	; 0xc88
   85938:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8593c:	781c      	ldrb	r4, [r3, #0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   8593e:	f640 408c 	movw	r0, #3212	; 0xc8c
   85942:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85946:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
   8594a:	bb79      	cbnz	r1, 859ac <udi_cdc_tx_send+0xec>
		sof_zlp_counter++;
   8594c:	f241 03ac 	movw	r3, #4268	; 0x10ac
   85950:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85954:	881a      	ldrh	r2, [r3, #0]
   85956:	f102 0201 	add.w	r2, r2, #1
   8595a:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   8595c:	f249 3045 	movw	r0, #37701	; 0x9345
   85960:	f2c0 0008 	movt	r0, #8
   85964:	4780      	blx	r0
   85966:	b930      	cbnz	r0, 85976 <udi_cdc_tx_send+0xb6>
   85968:	f241 01ac 	movw	r1, #4268	; 0x10ac
   8596c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85970:	880b      	ldrh	r3, [r1, #0]
   85972:	2b63      	cmp	r3, #99	; 0x63
   85974:	d90d      	bls.n	85992 <udi_cdc_tx_send+0xd2>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   85976:	f249 3245 	movw	r2, #37701	; 0x9345
   8597a:	f2c0 0208 	movt	r2, #8
   8597e:	4790      	blx	r2
   85980:	b1a0      	cbz	r0, 859ac <udi_cdc_tx_send+0xec>
   85982:	f241 00ac 	movw	r0, #4268	; 0x10ac
   85986:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8598a:	8801      	ldrh	r1, [r0, #0]
   8598c:	f5b1 7f48 	cmp.w	r1, #800	; 0x320
   85990:	d20c      	bcs.n	859ac <udi_cdc_tx_send+0xec>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85992:	2d00      	cmp	r5, #0
   85994:	d07d      	beq.n	85a92 <udi_cdc_tx_send+0x1d2>
		cpu_irq_enable();
   85996:	f240 23a0 	movw	r3, #672	; 0x2a0
   8599a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8599e:	f04f 0201 	mov.w	r2, #1
   859a2:	701a      	strb	r2, [r3, #0]
   859a4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   859a8:	b662      	cpsie	i
   859aa:	e072      	b.n	85a92 <udi_cdc_tx_send+0x1d2>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   859ac:	f241 03ac 	movw	r3, #4268	; 0x10ac
   859b0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   859b4:	f04f 0200 	mov.w	r2, #0
   859b8:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   859ba:	f241 40c0 	movw	r0, #5312	; 0x14c0
   859be:	f2c2 0007 	movt	r0, #8199	; 0x2007
   859c2:	7801      	ldrb	r1, [r0, #0]
   859c4:	b949      	cbnz	r1, 859da <udi_cdc_tx_send+0x11a>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   859c6:	4294      	cmp	r4, r2
   859c8:	bf14      	ite	ne
   859ca:	2200      	movne	r2, #0
   859cc:	2201      	moveq	r2, #1
   859ce:	f640 4388 	movw	r3, #3208	; 0xc88
   859d2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   859d6:	701a      	strb	r2, [r3, #0]
   859d8:	e003      	b.n	859e2 <udi_cdc_tx_send+0x122>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   859da:	f1d4 0401 	rsbs	r4, r4, #1
   859de:	bf38      	it	cc
   859e0:	2400      	movcc	r4, #0
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   859e2:	f241 00a8 	movw	r0, #4264	; 0x10a8
   859e6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   859ea:	f04f 0201 	mov.w	r2, #1
   859ee:	7002      	strb	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   859f0:	b13d      	cbz	r5, 85a02 <udi_cdc_tx_send+0x142>
		cpu_irq_enable();
   859f2:	f240 25a0 	movw	r5, #672	; 0x2a0
   859f6:	f2c2 0507 	movt	r5, #8199	; 0x2007
   859fa:	702a      	strb	r2, [r5, #0]
   859fc:	f3bf 8f5f 	dmb	sy
   85a00:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   85a02:	4625      	mov	r5, r4
   85a04:	f640 418c 	movw	r1, #3212	; 0xc8c
   85a08:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85a0c:	f831 4014 	ldrh.w	r4, [r1, r4, lsl #1]
   85a10:	f5b4 7400 	subs.w	r4, r4, #512	; 0x200
   85a14:	bf18      	it	ne
   85a16:	2401      	movne	r4, #1
	if (b_short_packet) {
   85a18:	b1dc      	cbz	r4, 85a52 <udi_cdc_tx_send+0x192>
		if (udd_is_high_speed()) {
   85a1a:	f249 3245 	movw	r2, #37701	; 0x9345
   85a1e:	f2c0 0208 	movt	r2, #8
   85a22:	4790      	blx	r2
   85a24:	b150      	cbz	r0, 85a3c <udi_cdc_tx_send+0x17c>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   85a26:	f249 30a9 	movw	r0, #37801	; 0x93a9
   85a2a:	f2c0 0008 	movt	r0, #8
   85a2e:	4780      	blx	r0
   85a30:	f241 029c 	movw	r2, #4252	; 0x109c
   85a34:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85a38:	8010      	strh	r0, [r2, #0]
   85a3a:	e011      	b.n	85a60 <udi_cdc_tx_send+0x1a0>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   85a3c:	f249 3199 	movw	r1, #37785	; 0x9399
   85a40:	f2c0 0108 	movt	r1, #8
   85a44:	4788      	blx	r1
   85a46:	f241 039c 	movw	r3, #4252	; 0x109c
   85a4a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85a4e:	8018      	strh	r0, [r3, #0]
   85a50:	e006      	b.n	85a60 <udi_cdc_tx_send+0x1a0>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   85a52:	f241 039c 	movw	r3, #4252	; 0x109c
   85a56:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85a5a:	f04f 0000 	mov.w	r0, #0
   85a5e:	8018      	strh	r0, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   85a60:	f640 418c 	movw	r1, #3212	; 0xc8c
   85a64:	f2c2 0107 	movt	r1, #8199	; 0x2007
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
   85a68:	f831 3015 	ldrh.w	r3, [r1, r5, lsl #1]
   85a6c:	f645 20ad 	movw	r0, #23213	; 0x5aad
   85a70:	f2c0 0008 	movt	r0, #8
   85a74:	9000      	str	r0, [sp, #0]
   85a76:	f04f 0084 	mov.w	r0, #132	; 0x84
   85a7a:	4621      	mov	r1, r4
   85a7c:	f640 4490 	movw	r4, #3216	; 0xc90
   85a80:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85a84:	eb04 2245 	add.w	r2, r4, r5, lsl #9
   85a88:	f249 6465 	movw	r4, #38501	; 0x9665
   85a8c:	f2c0 0408 	movt	r4, #8
   85a90:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   85a92:	b003      	add	sp, #12
   85a94:	bd30      	pop	{r4, r5, pc}
   85a96:	bf00      	nop

00085a98 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
   85a98:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
   85a9a:	f04f 0000 	mov.w	r0, #0
   85a9e:	f645 03c1 	movw	r3, #22721	; 0x58c1
   85aa2:	f2c0 0308 	movt	r3, #8
   85aa6:	4798      	blx	r3
   85aa8:	bd08      	pop	{r3, pc}
   85aaa:	bf00      	nop

00085aac <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   85aac:	b508      	push	{r3, lr}
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   85aae:	b9e8      	cbnz	r0, 85aec <udi_cdc_data_sent+0x40>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   85ab0:	f640 4388 	movw	r3, #3208	; 0xc88
   85ab4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85ab8:	7819      	ldrb	r1, [r3, #0]
   85aba:	f1d1 0101 	rsbs	r1, r1, #1
   85abe:	bf38      	it	cc
   85ac0:	2100      	movcc	r1, #0
   85ac2:	f640 438c 	movw	r3, #3212	; 0xc8c
   85ac6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85aca:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   85ace:	f241 41c0 	movw	r1, #5312	; 0x14c0
   85ad2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85ad6:	7008      	strb	r0, [r1, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   85ad8:	f241 02a8 	movw	r2, #4264	; 0x10a8
   85adc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85ae0:	7010      	strb	r0, [r2, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
   85ae2:	f645 03c1 	movw	r3, #22721	; 0x58c1
   85ae6:	f2c0 0308 	movt	r3, #8
   85aea:	4798      	blx	r3
   85aec:	bd08      	pop	{r3, pc}
   85aee:	bf00      	nop

00085af0 <udi_cdc_comm_setup>:
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
}

bool udi_cdc_comm_setup(void)
{
   85af0:	b508      	push	{r3, lr}
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
   85af2:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   85af6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85afa:	7818      	ldrb	r0, [r3, #0]
   85afc:	f010 0f80 	tst.w	r0, #128	; 0x80
   85b00:	d020      	beq.n	85b44 <udi_cdc_comm_setup+0x54>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   85b02:	f000 0160 	and.w	r1, r0, #96	; 0x60
   85b06:	2920      	cmp	r1, #32
   85b08:	d156      	bne.n	85bb8 <udi_cdc_comm_setup+0xc8>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   85b0a:	f641 42bc 	movw	r2, #7356	; 0x1cbc
   85b0e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85b12:	7853      	ldrb	r3, [r2, #1]
   85b14:	2b21      	cmp	r3, #33	; 0x21
   85b16:	d152      	bne.n	85bbe <udi_cdc_comm_setup+0xce>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   85b18:	f641 40bc 	movw	r0, #7356	; 0x1cbc
   85b1c:	f2c2 0007 	movt	r0, #8199	; 0x2007
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   85b20:	88c1      	ldrh	r1, [r0, #6]
   85b22:	2907      	cmp	r1, #7
   85b24:	d14e      	bne.n	85bc4 <udi_cdc_comm_setup+0xd4>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
   85b26:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   85b2a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85b2e:	f640 427c 	movw	r2, #3196	; 0xc7c
   85b32:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85b36:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   85b38:	f04f 0007 	mov.w	r0, #7
   85b3c:	8198      	strh	r0, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   85b3e:	f04f 0001 	mov.w	r0, #1
   85b42:	bd08      	pop	{r3, pc}
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   85b44:	f000 0160 	and.w	r1, r0, #96	; 0x60
   85b48:	2920      	cmp	r1, #32
   85b4a:	d13e      	bne.n	85bca <udi_cdc_comm_setup+0xda>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   85b4c:	f641 42bc 	movw	r2, #7356	; 0x1cbc
   85b50:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85b54:	7853      	ldrb	r3, [r2, #1]
   85b56:	2b20      	cmp	r3, #32
   85b58:	d002      	beq.n	85b60 <udi_cdc_comm_setup+0x70>
   85b5a:	2b22      	cmp	r3, #34	; 0x22
   85b5c:	d138      	bne.n	85bd0 <udi_cdc_comm_setup+0xe0>
   85b5e:	e01a      	b.n	85b96 <udi_cdc_comm_setup+0xa6>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   85b60:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   85b64:	f2c2 0307 	movt	r3, #8199	; 0x2007
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   85b68:	88d8      	ldrh	r0, [r3, #6]
   85b6a:	2807      	cmp	r0, #7
   85b6c:	d133      	bne.n	85bd6 <udi_cdc_comm_setup+0xe6>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
   85b6e:	f641 41bc 	movw	r1, #7356	; 0x1cbc
   85b72:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85b76:	f645 02bd 	movw	r2, #22717	; 0x58bd
   85b7a:	f2c0 0208 	movt	r2, #8
   85b7e:	610a      	str	r2, [r1, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
   85b80:	f640 437c 	movw	r3, #3196	; 0xc7c
   85b84:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85b88:	608b      	str	r3, [r1, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   85b8a:	f04f 0007 	mov.w	r0, #7
   85b8e:	8188      	strh	r0, [r1, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   85b90:	f04f 0001 	mov.w	r0, #1
   85b94:	bd08      	pop	{r3, pc}
			case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
				// According cdc spec 1.1 chapter 6.2.14
				UDI_CDC_SET_DTR_EXT(port, (0 !=
   85b96:	f641 40bc 	movw	r0, #7356	; 0x1cbc
   85b9a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85b9e:	7881      	ldrb	r1, [r0, #2]
   85ba0:	f04f 0000 	mov.w	r0, #0
   85ba4:	f001 0101 	and.w	r1, r1, #1
   85ba8:	f245 2299 	movw	r2, #21145	; 0x5299
   85bac:	f2c0 0208 	movt	r2, #8
   85bb0:	4790      	blx	r2
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
   85bb2:	f04f 0001 	mov.w	r0, #1
   85bb6:	bd08      	pop	{r3, pc}
			}
		}
	}
	return false;  // request Not supported
   85bb8:	f04f 0000 	mov.w	r0, #0
   85bbc:	bd08      	pop	{r3, pc}
   85bbe:	f04f 0000 	mov.w	r0, #0
   85bc2:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   85bc4:	f04f 0000 	mov.w	r0, #0
   85bc8:	bd08      	pop	{r3, pc}
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
   85bca:	f04f 0000 	mov.w	r0, #0
   85bce:	bd08      	pop	{r3, pc}
   85bd0:	f04f 0000 	mov.w	r0, #0
   85bd4:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   85bd6:	f04f 0000 	mov.w	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
   85bda:	bd08      	pop	{r3, pc}

00085bdc <udi_cdc_data_disable>:
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
}

void udi_cdc_data_disable(void)
{
   85bdc:	b508      	push	{r3, lr}
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
   85bde:	f640 4384 	movw	r3, #3204	; 0xc84
   85be2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85be6:	781a      	ldrb	r2, [r3, #0]
   85be8:	f102 30ff 	add.w	r0, r2, #4294967295
   85bec:	b2c1      	uxtb	r1, r0
   85bee:	7019      	strb	r1, [r3, #0]
	port = udi_cdc_nb_data_enabled;
   85bf0:	7818      	ldrb	r0, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
   85bf2:	f24a 23d1 	movw	r3, #41681	; 0xa2d1
   85bf6:	f2c0 0308 	movt	r3, #8
   85bfa:	4798      	blx	r3
	udi_cdc_data_running = false;
   85bfc:	f241 00a0 	movw	r0, #4256	; 0x10a0
   85c00:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85c04:	f04f 0200 	mov.w	r2, #0
   85c08:	7002      	strb	r2, [r0, #0]
   85c0a:	bd08      	pop	{r3, pc}

00085c0c <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
   85c0c:	b508      	push	{r3, lr}
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
   85c0e:	f04f 0000 	mov.w	r0, #0
   85c12:	f241 0394 	movw	r3, #4244	; 0x1094
   85c16:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85c1a:	7018      	strb	r0, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
   85c1c:	f241 41c4 	movw	r1, #5316	; 0x14c4
   85c20:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85c24:	8008      	strh	r0, [r1, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
   85c26:	f241 03b0 	movw	r3, #4272	; 0x10b0
   85c2a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85c2e:	f04f 01a1 	mov.w	r1, #161	; 0xa1
   85c32:	7019      	strb	r1, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   85c34:	f04f 0120 	mov.w	r1, #32
   85c38:	7059      	strb	r1, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   85c3a:	8058      	strh	r0, [r3, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   85c3c:	8098      	strh	r0, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   85c3e:	f04f 0102 	mov.w	r1, #2
   85c42:	80d9      	strh	r1, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   85c44:	8118      	strh	r0, [r3, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   85c46:	f640 437c 	movw	r3, #3196	; 0xc7c
   85c4a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85c4e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   85c52:	6019      	str	r1, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   85c54:	7118      	strb	r0, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   85c56:	7158      	strb	r0, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   85c58:	f04f 0208 	mov.w	r2, #8
   85c5c:	719a      	strb	r2, [r3, #6]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
   85c5e:	f24a 23c1 	movw	r3, #41665	; 0xa2c1
   85c62:	f2c0 0308 	movt	r3, #8
   85c66:	4798      	blx	r3
   85c68:	b158      	cbz	r0, 85c82 <udi_cdc_comm_enable+0x76>
		return false;
	}
	udi_cdc_nb_comm_enabled++;
   85c6a:	f241 0094 	movw	r0, #4244	; 0x1094
   85c6e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85c72:	7801      	ldrb	r1, [r0, #0]
   85c74:	f101 0101 	add.w	r1, r1, #1
   85c78:	b2ca      	uxtb	r2, r1
   85c7a:	7002      	strb	r2, [r0, #0]
	return true;
   85c7c:	f04f 0001 	mov.w	r0, #1
   85c80:	bd08      	pop	{r3, pc}
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
   85c82:	f04f 0000 	mov.w	r0, #0
	}
	udi_cdc_nb_comm_enabled++;
	return true;
}
   85c86:	bd08      	pop	{r3, pc}

00085c88 <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85c88:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   85c8c:	b672      	cpsid	i
   85c8e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   85c92:	f240 22a0 	movw	r2, #672	; 0x2a0
   85c96:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85c9a:	f04f 0100 	mov.w	r1, #0
   85c9e:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   85ca0:	f241 0098 	movw	r0, #4248	; 0x1098
   85ca4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85ca8:	8802      	ldrh	r2, [r0, #0]
   85caa:	b290      	uxth	r0, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   85cac:	f241 01a4 	movw	r1, #4260	; 0x10a4
   85cb0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85cb4:	7809      	ldrb	r1, [r1, #0]
   85cb6:	f241 0290 	movw	r2, #4240	; 0x1090
   85cba:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85cbe:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   85cc2:	1a08      	subs	r0, r1, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85cc4:	b94b      	cbnz	r3, 85cda <udi_cdc_multi_get_nb_received_data+0x52>
		cpu_irq_enable();
   85cc6:	f240 23a0 	movw	r3, #672	; 0x2a0
   85cca:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85cce:	f04f 0201 	mov.w	r2, #1
   85cd2:	701a      	strb	r2, [r3, #0]
   85cd4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   85cd8:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   85cda:	4770      	bx	lr

00085cdc <udi_cdc_get_nb_received_data>:

iram_size_t udi_cdc_get_nb_received_data(void)
{
   85cdc:	b508      	push	{r3, lr}
	return udi_cdc_multi_get_nb_received_data(0);
   85cde:	f04f 0000 	mov.w	r0, #0
   85ce2:	f645 4389 	movw	r3, #23689	; 0x5c89
   85ce6:	f2c0 0308 	movt	r3, #8
   85cea:	4798      	blx	r3
}
   85cec:	bd08      	pop	{r3, pc}
   85cee:	bf00      	nop

00085cf0 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   85cf0:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   85cf2:	f645 4389 	movw	r3, #23689	; 0x5c89
   85cf6:	f2c0 0308 	movt	r3, #8
   85cfa:	4798      	blx	r3
}
   85cfc:	3000      	adds	r0, #0
   85cfe:	bf18      	it	ne
   85d00:	2001      	movne	r0, #1
   85d02:	bd08      	pop	{r3, pc}

00085d04 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
   85d04:	b510      	push	{r4, lr}
   85d06:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85d08:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   85d0c:	f1d3 0001 	rsbs	r0, r3, #1
   85d10:	bf38      	it	cc
   85d12:	2000      	movcc	r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   85d14:	b672      	cpsid	i
   85d16:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85d1a:	f240 22a0 	movw	r2, #672	; 0x2a0
   85d1e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85d22:	f04f 0100 	mov.w	r1, #0
   85d26:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   85d28:	f241 04a4 	movw	r4, #4260	; 0x10a4
   85d2c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85d30:	7824      	ldrb	r4, [r4, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   85d32:	f241 43bc 	movw	r3, #5308	; 0x14bc
   85d36:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85d3a:	781a      	ldrb	r2, [r3, #0]
   85d3c:	b96a      	cbnz	r2, 85d5a <udi_cdc_rx_start+0x56>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   85d3e:	f241 0198 	movw	r1, #4248	; 0x1098
   85d42:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85d46:	880b      	ldrh	r3, [r1, #0]
   85d48:	b29a      	uxth	r2, r3
   85d4a:	f241 0190 	movw	r1, #4240	; 0x1090
   85d4e:	f2c2 0107 	movt	r1, #8199	; 0x2007
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
   85d52:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
   85d56:	4293      	cmp	r3, r2
   85d58:	d90e      	bls.n	85d78 <udi_cdc_rx_start+0x74>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85d5a:	2800      	cmp	r0, #0
   85d5c:	d052      	beq.n	85e04 <udi_cdc_rx_start+0x100>
		cpu_irq_enable();
   85d5e:	f240 21a0 	movw	r1, #672	; 0x2a0
   85d62:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85d66:	f04f 0201 	mov.w	r2, #1
   85d6a:	700a      	strb	r2, [r1, #0]
   85d6c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   85d70:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   85d72:	f04f 0000 	mov.w	r0, #0
   85d76:	e047      	b.n	85e08 <udi_cdc_rx_start+0x104>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
   85d78:	f241 0298 	movw	r2, #4248	; 0x1098
   85d7c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85d80:	f04f 0100 	mov.w	r1, #0
   85d84:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   85d86:	428c      	cmp	r4, r1
   85d88:	bf14      	ite	ne
   85d8a:	2100      	movne	r1, #0
   85d8c:	2101      	moveq	r1, #1
   85d8e:	f241 03a4 	movw	r3, #4260	; 0x10a4
   85d92:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85d96:	7019      	strb	r1, [r3, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
   85d98:	f241 42bc 	movw	r2, #5308	; 0x14bc
   85d9c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85da0:	f04f 0101 	mov.w	r1, #1
   85da4:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85da6:	b138      	cbz	r0, 85db8 <udi_cdc_rx_start+0xb4>
		cpu_irq_enable();
   85da8:	f240 20a0 	movw	r0, #672	; 0x2a0
   85dac:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85db0:	7001      	strb	r1, [r0, #0]
   85db2:	f3bf 8f5f 	dmb	sy
   85db6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
   85db8:	f04f 0000 	mov.w	r0, #0
   85dbc:	f645 42f1 	movw	r2, #23793	; 0x5cf1
   85dc0:	f2c0 0208 	movt	r2, #8
   85dc4:	4790      	blx	r2
   85dc6:	b130      	cbz	r0, 85dd6 <udi_cdc_rx_start+0xd2>
		UDI_CDC_RX_NOTIFY(port);
   85dc8:	f04f 0000 	mov.w	r0, #0
   85dcc:	f245 21bd 	movw	r1, #21181	; 0x52bd
   85dd0:	f2c0 0108 	movt	r1, #8
   85dd4:	4788      	blx	r1
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
   85dd6:	f645 600d 	movw	r0, #24077	; 0x5e0d
   85dda:	f2c0 0008 	movt	r0, #8
   85dde:	9000      	str	r0, [sp, #0]
   85de0:	f04f 0005 	mov.w	r0, #5
   85de4:	f04f 0101 	mov.w	r1, #1
   85de8:	f241 03bc 	movw	r3, #4284	; 0x10bc
   85dec:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85df0:	eb03 2244 	add.w	r2, r3, r4, lsl #9
   85df4:	f44f 7300 	mov.w	r3, #512	; 0x200
   85df8:	f249 6465 	movw	r4, #38501	; 0x9665
   85dfc:	f2c0 0408 	movt	r4, #8
   85e00:	47a0      	blx	r4
   85e02:	e001      	b.n	85e08 <udi_cdc_rx_start+0x104>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   85e04:	f04f 0000 	mov.w	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
   85e08:	b002      	add	sp, #8
   85e0a:	bd10      	pop	{r4, pc}

00085e0c <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   85e0c:	b510      	push	{r4, lr}
   85e0e:	b082      	sub	sp, #8
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   85e10:	bb88      	cbnz	r0, 85e76 <udi_cdc_data_received+0x6a>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   85e12:	f241 03a4 	movw	r3, #4260	; 0x10a4
   85e16:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85e1a:	7818      	ldrb	r0, [r3, #0]
   85e1c:	f1d0 0301 	rsbs	r3, r0, #1
   85e20:	bf38      	it	cc
   85e22:	2300      	movcc	r3, #0
	if (!n) {
   85e24:	b9a9      	cbnz	r1, 85e52 <udi_cdc_data_received+0x46>
		udd_ep_run( ep,
   85e26:	f645 640d 	movw	r4, #24077	; 0x5e0d
   85e2a:	f2c0 0408 	movt	r4, #8
   85e2e:	9400      	str	r4, [sp, #0]
   85e30:	4610      	mov	r0, r2
   85e32:	f04f 0101 	mov.w	r1, #1
   85e36:	f241 02bc 	movw	r2, #4284	; 0x10bc
   85e3a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85e3e:	eb02 2243 	add.w	r2, r2, r3, lsl #9
   85e42:	f44f 7300 	mov.w	r3, #512	; 0x200
   85e46:	f249 6465 	movw	r4, #38501	; 0x9665
   85e4a:	f2c0 0408 	movt	r4, #8
   85e4e:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
   85e50:	e011      	b.n	85e76 <udi_cdc_data_received+0x6a>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   85e52:	f241 0290 	movw	r2, #4240	; 0x1090
   85e56:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85e5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   85e5e:	f04f 0000 	mov.w	r0, #0
   85e62:	f241 41bc 	movw	r1, #5308	; 0x14bc
   85e66:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85e6a:	7008      	strb	r0, [r1, #0]
	udi_cdc_rx_start(port);
   85e6c:	f645 5305 	movw	r3, #23813	; 0x5d05
   85e70:	f2c0 0308 	movt	r3, #8
   85e74:	4798      	blx	r3
}
   85e76:	b002      	add	sp, #8
   85e78:	bd10      	pop	{r4, pc}
   85e7a:	bf00      	nop

00085e7c <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
   85e7c:	b538      	push	{r3, r4, r5, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
   85e7e:	f04f 0400 	mov.w	r4, #0
   85e82:	f640 4384 	movw	r3, #3204	; 0xc84
   85e86:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85e8a:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
   85e8c:	f241 00a8 	movw	r0, #4264	; 0x10a8
   85e90:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85e94:	7004      	strb	r4, [r0, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   85e96:	f241 41c0 	movw	r1, #5312	; 0x14c0
   85e9a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85e9e:	700c      	strb	r4, [r1, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   85ea0:	f640 4288 	movw	r2, #3208	; 0xc88
   85ea4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85ea8:	7014      	strb	r4, [r2, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   85eaa:	f640 438c 	movw	r3, #3212	; 0xc8c
   85eae:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85eb2:	4625      	mov	r5, r4
   85eb4:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   85eb6:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   85eb8:	f241 009c 	movw	r0, #4252	; 0x109c
   85ebc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85ec0:	8004      	strh	r4, [r0, #0]
	udi_cdc_tx_send(port);
   85ec2:	4620      	mov	r0, r4
   85ec4:	f645 01c1 	movw	r1, #22721	; 0x58c1
   85ec8:	f2c0 0108 	movt	r1, #8
   85ecc:	4788      	blx	r1

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
   85ece:	f241 42bc 	movw	r2, #5308	; 0x14bc
   85ed2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85ed6:	7014      	strb	r4, [r2, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   85ed8:	f241 03a4 	movw	r3, #4260	; 0x10a4
   85edc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85ee0:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   85ee2:	f241 0090 	movw	r0, #4240	; 0x1090
   85ee6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85eea:	8004      	strh	r4, [r0, #0]
	udi_cdc_rx_pos[port] = 0;
   85eec:	f241 0198 	movw	r1, #4248	; 0x1098
   85ef0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85ef4:	800c      	strh	r4, [r1, #0]
	if (!udi_cdc_rx_start(port)) {
   85ef6:	4620      	mov	r0, r4
   85ef8:	f645 5205 	movw	r2, #23813	; 0x5d05
   85efc:	f2c0 0208 	movt	r2, #8
   85f00:	4790      	blx	r2
   85f02:	b198      	cbz	r0, 85f2c <udi_cdc_data_enable+0xb0>
		return false;
	}
	udi_cdc_nb_data_enabled++;
   85f04:	f640 4384 	movw	r3, #3204	; 0xc84
   85f08:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85f0c:	7818      	ldrb	r0, [r3, #0]
   85f0e:	f100 0001 	add.w	r0, r0, #1
   85f12:	b2c1      	uxtb	r1, r0
   85f14:	7019      	strb	r1, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   85f16:	781a      	ldrb	r2, [r3, #0]
   85f18:	2a01      	cmp	r2, #1
   85f1a:	d10a      	bne.n	85f32 <udi_cdc_data_enable+0xb6>
		udi_cdc_data_running = true;
   85f1c:	f04f 0001 	mov.w	r0, #1
   85f20:	f241 03a0 	movw	r3, #4256	; 0x10a0
   85f24:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85f28:	7018      	strb	r0, [r3, #0]
   85f2a:	bd38      	pop	{r3, r4, r5, pc}
	udi_cdc_rx_trans_ongoing[port] = false;
	udi_cdc_rx_buf_sel[port] = 0;
	udi_cdc_rx_buf_nb[port][0] = 0;
	udi_cdc_rx_pos[port] = 0;
	if (!udi_cdc_rx_start(port)) {
		return false;
   85f2c:	f04f 0000 	mov.w	r0, #0
   85f30:	bd38      	pop	{r3, r4, r5, pc}
	}
	udi_cdc_nb_data_enabled++;
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
		udi_cdc_data_running = true;
	}
	return true;
   85f32:	f04f 0001 	mov.w	r0, #1
}
   85f36:	bd38      	pop	{r3, r4, r5, pc}

00085f38 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   85f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85f3c:	b083      	sub	sp, #12
   85f3e:	4615      	mov	r5, r2
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
   85f40:	4688      	mov	r8, r1
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   85f42:	f240 27a0 	movw	r7, #672	; 0x2a0
   85f46:	f2c2 0707 	movt	r7, #8199	; 0x2007
   85f4a:	f04f 0b00 	mov.w	fp, #0
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   85f4e:	f241 0698 	movw	r6, #4248	; 0x1098
   85f52:	f2c2 0607 	movt	r6, #8199	; 0x2007
	buf_sel = udi_cdc_rx_buf_sel[port];
   85f56:	f241 0aa4 	movw	sl, #4260	; 0x10a4
   85f5a:	f2c2 0a07 	movt	sl, #8199	; 0x2007
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
   85f5e:	f241 0990 	movw	r9, #4240	; 0x1090
   85f62:	f2c2 0907 	movt	r9, #8199	; 0x2007
	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   85f66:	f241 03bc 	movw	r3, #4284	; 0x10bc
   85f6a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85f6e:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85f70:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   85f74:	b672      	cpsid	i
   85f76:	f3bf 8f5f 	dmb	sy
   85f7a:	f887 b000 	strb.w	fp, [r7]
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   85f7e:	8830      	ldrh	r0, [r6, #0]
   85f80:	b283      	uxth	r3, r0
	buf_sel = udi_cdc_rx_buf_sel[port];
   85f82:	f89a 1000 	ldrb.w	r1, [sl]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85f86:	b92a      	cbnz	r2, 85f94 <udi_cdc_multi_read_buf+0x5c>
		cpu_irq_enable();
   85f88:	f04f 0401 	mov.w	r4, #1
   85f8c:	703c      	strb	r4, [r7, #0]
   85f8e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   85f92:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
   85f94:	f839 4011 	ldrh.w	r4, [r9, r1, lsl #1]
   85f98:	42a3      	cmp	r3, r4
   85f9a:	d307      	bcc.n	85fac <udi_cdc_multi_read_buf+0x74>
		if (!udi_cdc_data_running) {
   85f9c:	f241 00a0 	movw	r0, #4256	; 0x10a0
   85fa0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85fa4:	7801      	ldrb	r1, [r0, #0]
   85fa6:	2900      	cmp	r1, #0
   85fa8:	d1e2      	bne.n	85f70 <udi_cdc_multi_read_buf+0x38>
   85faa:	e01d      	b.n	85fe8 <udi_cdc_multi_read_buf+0xb0>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   85fac:	1ae4      	subs	r4, r4, r3
   85fae:	42a5      	cmp	r5, r4
   85fb0:	bf38      	it	cc
   85fb2:	462c      	movcc	r4, r5
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   85fb4:	eb03 2241 	add.w	r2, r3, r1, lsl #9
   85fb8:	4640      	mov	r0, r8
   85fba:	9b01      	ldr	r3, [sp, #4]
   85fbc:	1899      	adds	r1, r3, r2
   85fbe:	4622      	mov	r2, r4
   85fc0:	f64a 53b1 	movw	r3, #44465	; 0xadb1
   85fc4:	f2c0 0308 	movt	r3, #8
   85fc8:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   85fca:	8830      	ldrh	r0, [r6, #0]
   85fcc:	1821      	adds	r1, r4, r0
   85fce:	b28a      	uxth	r2, r1
   85fd0:	8032      	strh	r2, [r6, #0]
	ptr_buf += copy_nb;
   85fd2:	44a0      	add	r8, r4
	size -= copy_nb;
   85fd4:	1b2d      	subs	r5, r5, r4
	udi_cdc_rx_start(port);
   85fd6:	f04f 0000 	mov.w	r0, #0
   85fda:	f645 5305 	movw	r3, #23813	; 0x5d05
   85fde:	f2c0 0308 	movt	r3, #8
   85fe2:	4798      	blx	r3

	if (size) {
   85fe4:	2d00      	cmp	r5, #0
   85fe6:	d1c3      	bne.n	85f70 <udi_cdc_multi_read_buf+0x38>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   85fe8:	4628      	mov	r0, r5
   85fea:	b003      	add	sp, #12
   85fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085ff0 <udi_cdc_read_buf>:

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
   85ff0:	b508      	push	{r3, lr}
   85ff2:	4603      	mov	r3, r0
   85ff4:	460a      	mov	r2, r1
	return udi_cdc_multi_read_buf(0, buf, size);
   85ff6:	f04f 0000 	mov.w	r0, #0
   85ffa:	4619      	mov	r1, r3
   85ffc:	f645 7339 	movw	r3, #24377	; 0x5f39
   86000:	f2c0 0308 	movt	r3, #8
   86004:	4798      	blx	r3
}
   86006:	bd08      	pop	{r3, pc}

00086008 <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
   86008:	b410      	push	{r4}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8600a:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8600e:	b672      	cpsid	i
   86010:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   86014:	f240 23a0 	movw	r3, #672	; 0x2a0
   86018:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8601c:	f04f 0200 	mov.w	r2, #0
   86020:	701a      	strb	r2, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   86022:	f640 4088 	movw	r0, #3208	; 0xc88
   86026:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8602a:	7801      	ldrb	r1, [r0, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   8602c:	f640 428c 	movw	r2, #3212	; 0xc8c
   86030:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86034:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
   86038:	f1d1 0101 	rsbs	r1, r1, #1
   8603c:	bf38      	it	cc
   8603e:	2100      	movcc	r1, #0
   86040:	b2c8      	uxtb	r0, r1
   86042:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   86046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8604a:	d11b      	bne.n	86084 <udi_cdc_multi_get_free_tx_buffer+0x7c>
		if ((!udi_cdc_tx_trans_ongoing[port])
   8604c:	f241 02a8 	movw	r2, #4264	; 0x10a8
   86050:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86054:	7812      	ldrb	r2, [r2, #0]
   86056:	b9aa      	cbnz	r2, 86084 <udi_cdc_multi_get_free_tx_buffer+0x7c>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   86058:	f241 42c0 	movw	r2, #5312	; 0x14c0
   8605c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86060:	7812      	ldrb	r2, [r2, #0]
   86062:	b97a      	cbnz	r2, 86084 <udi_cdc_multi_get_free_tx_buffer+0x7c>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
   86064:	f241 43c0 	movw	r3, #5312	; 0x14c0
   86068:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8606c:	f04f 0001 	mov.w	r0, #1
   86070:	7018      	strb	r0, [r3, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   86072:	f640 4288 	movw	r2, #3208	; 0xc88
   86076:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8607a:	7011      	strb	r1, [r2, #0]
			buf_sel_nb = 0;
			buf_nosel_nb = UDI_CDC_TX_BUFFERS;
   8607c:	f44f 7000 	mov.w	r0, #512	; 0x200
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
   86080:	f04f 0300 	mov.w	r3, #0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   86084:	b94c      	cbnz	r4, 8609a <udi_cdc_multi_get_free_tx_buffer+0x92>
		cpu_irq_enable();
   86086:	f240 22a0 	movw	r2, #672	; 0x2a0
   8608a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8608e:	f04f 0101 	mov.w	r1, #1
   86092:	7011      	strb	r1, [r2, #0]
   86094:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   86098:	b662      	cpsie	i
iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
   8609a:	18c0      	adds	r0, r0, r3
		}
	}
	cpu_irq_restore(flags);

	return (UDI_CDC_TX_BUFFERS - buf_sel_nb) + (UDI_CDC_TX_BUFFERS - buf_nosel_nb);
}
   8609c:	f5c0 6080 	rsb	r0, r0, #1024	; 0x400
   860a0:	bc10      	pop	{r4}
   860a2:	4770      	bx	lr

000860a4 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   860a4:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   860a6:	f246 0309 	movw	r3, #24585	; 0x6009
   860aa:	f2c0 0308 	movt	r3, #8
   860ae:	4798      	blx	r3
}
   860b0:	3000      	adds	r0, #0
   860b2:	bf18      	it	ne
   860b4:	2001      	movne	r0, #1
   860b6:	bd08      	pop	{r3, pc}

000860b8 <udi_cdc_multi_write_buf>:
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
   860b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   860bc:	b083      	sub	sp, #12
   860be:	4615      	mov	r5, r2

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
   860c0:	f640 437c 	movw	r3, #3196	; 0xc7c
   860c4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   860c8:	7998      	ldrb	r0, [r3, #6]
   860ca:	2809      	cmp	r0, #9
		size *=2;
   860cc:	bf08      	it	eq
   860ce:	0055      	lsleq	r5, r2, #1
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
   860d0:	4689      	mov	r9, r1
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   860d2:	f04f 0800 	mov.w	r8, #0
		if (!udi_cdc_data_running) {
   860d6:	f241 01a0 	movw	r1, #4256	; 0x10a0
   860da:	f2c2 0107 	movt	r1, #8199	; 0x2007
   860de:	9101      	str	r1, [sp, #4]
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   860e0:	f240 22a0 	movw	r2, #672	; 0x2a0
   860e4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   860e8:	9200      	str	r2, [sp, #0]
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   860ea:	4640      	mov	r0, r8
   860ec:	f246 03a5 	movw	r3, #24741	; 0x60a5
   860f0:	f2c0 0308 	movt	r3, #8
   860f4:	4798      	blx	r3
   860f6:	b920      	cbnz	r0, 86102 <udi_cdc_multi_write_buf+0x4a>
		if (!udi_cdc_data_running) {
   860f8:	9801      	ldr	r0, [sp, #4]
   860fa:	7803      	ldrb	r3, [r0, #0]
   860fc:	2b00      	cmp	r3, #0
   860fe:	d1f4      	bne.n	860ea <udi_cdc_multi_write_buf+0x32>
   86100:	e035      	b.n	8616e <udi_cdc_multi_write_buf+0xb6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86102:	f3ef 8b10 	mrs	fp, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   86106:	b672      	cpsid	i
   86108:	f3bf 8f5f 	dmb	sy
   8610c:	9c00      	ldr	r4, [sp, #0]
   8610e:	f884 8000 	strb.w	r8, [r4]
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   86112:	f640 4688 	movw	r6, #3208	; 0xc88
   86116:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8611a:	7836      	ldrb	r6, [r6, #0]
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   8611c:	f640 4a8c 	movw	sl, #3212	; 0xc8c
   86120:	f2c2 0a07 	movt	sl, #8199	; 0x2007
   86124:	f83a 7016 	ldrh.w	r7, [sl, r6, lsl #1]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
   86128:	f5c7 7400 	rsb	r4, r7, #512	; 0x200
   8612c:	42a5      	cmp	r5, r4
   8612e:	bf38      	it	cc
   86130:	462c      	movcc	r4, r5
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
   86132:	eb07 2146 	add.w	r1, r7, r6, lsl #9
   86136:	f640 4090 	movw	r0, #3216	; 0xc90
   8613a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8613e:	1840      	adds	r0, r0, r1
   86140:	4649      	mov	r1, r9
   86142:	4622      	mov	r2, r4
   86144:	f64a 53b1 	movw	r3, #44465	; 0xadb1
   86148:	f2c0 0308 	movt	r3, #8
   8614c:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
   8614e:	193f      	adds	r7, r7, r4
   86150:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   86154:	f1bb 0f00 	cmp.w	fp, #0
   86158:	d106      	bne.n	86168 <udi_cdc_multi_write_buf+0xb0>
		cpu_irq_enable();
   8615a:	f04f 0101 	mov.w	r1, #1
   8615e:	9a00      	ldr	r2, [sp, #0]
   86160:	7011      	strb	r1, [r2, #0]
   86162:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   86166:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
   86168:	44a1      	add	r9, r4
	size -= copy_nb;

	if (size) {
   8616a:	1b2d      	subs	r5, r5, r4
   8616c:	d1bd      	bne.n	860ea <udi_cdc_multi_write_buf+0x32>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
}
   8616e:	4628      	mov	r0, r5
   86170:	b003      	add	sp, #12
   86172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86176:	bf00      	nop

00086178 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
   86178:	b508      	push	{r3, lr}
   8617a:	4603      	mov	r3, r0
   8617c:	460a      	mov	r2, r1
	return udi_cdc_multi_write_buf(0, buf, size);
   8617e:	f04f 0000 	mov.w	r0, #0
   86182:	4619      	mov	r1, r3
   86184:	f246 03b9 	movw	r3, #24761	; 0x60b9
   86188:	f2c0 0308 	movt	r3, #8
   8618c:	4798      	blx	r3
}
   8618e:	bd08      	pop	{r3, pc}

00086190 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
   86190:	f04f 0000 	mov.w	r0, #0
   86194:	4770      	bx	lr
   86196:	bf00      	nop

00086198 <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
   86198:	3000      	adds	r0, #0
   8619a:	bf18      	it	ne
   8619c:	2001      	movne	r0, #1
   8619e:	f641 43b9 	movw	r3, #7353	; 0x1cb9
   861a2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   861a6:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
   861a8:	f240 2114 	movw	r1, #532	; 0x214
   861ac:	f2c2 0107 	movt	r1, #8199	; 0x2007
   861b0:	f04f 0201 	mov.w	r2, #1
   861b4:	700a      	strb	r2, [r1, #0]
   861b6:	4770      	bx	lr

000861b8 <udi_msc_clear_sense>:
//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
   861b8:	f241 5210 	movw	r2, #5392	; 0x1510
   861bc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   861c0:	f04f 0300 	mov.w	r3, #0
   861c4:	4611      	mov	r1, r2
   861c6:	f841 3b04 	str.w	r3, [r1], #4
   861ca:	6053      	str	r3, [r2, #4]
   861cc:	f101 0104 	add.w	r1, r1, #4
   861d0:	f841 3b04 	str.w	r3, [r1], #4
   861d4:	f841 3b04 	str.w	r3, [r1], #4
   861d8:	800b      	strh	r3, [r1, #0]
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
   861da:	f04f 00f0 	mov.w	r0, #240	; 0xf0
   861de:	7010      	strb	r0, [r2, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
   861e0:	f04f 030a 	mov.w	r3, #10
   861e4:	71d3      	strb	r3, [r2, #7]
   861e6:	4770      	bx	lr

000861e8 <udi_msc_sense_pass>:
	udi_msc_sense.AddSenseCode = add_sense >> 8;
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
}

static void udi_msc_sense_pass(void)
{
   861e8:	b508      	push	{r3, lr}
	udi_msc_clear_sense();
   861ea:	f246 13b9 	movw	r3, #25017	; 0x61b9
   861ee:	f2c0 0308 	movt	r3, #8
   861f2:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
   861f4:	f240 2050 	movw	r0, #592	; 0x250
   861f8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   861fc:	f04f 0200 	mov.w	r2, #0
   86200:	7302      	strb	r2, [r0, #12]
   86202:	bd08      	pop	{r3, pc}

00086204 <udi_msc_sense_fail>:
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
}

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
   86204:	b570      	push	{r4, r5, r6, lr}
   86206:	4606      	mov	r6, r0
   86208:	460d      	mov	r5, r1
   8620a:	4614      	mov	r4, r2
	udi_msc_clear_sense();
   8620c:	f246 13b9 	movw	r3, #25017	; 0x61b9
   86210:	f2c0 0308 	movt	r3, #8
   86214:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
   86216:	f240 2050 	movw	r0, #592	; 0x250
   8621a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8621e:	f04f 0201 	mov.w	r2, #1
   86222:	7302      	strb	r2, [r0, #12]
	udi_msc_sense.sense_flag_key = sense_key;
   86224:	f241 5110 	movw	r1, #5392	; 0x1510
   86228:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8622c:	708e      	strb	r6, [r1, #2]
	udi_msc_sense.information[0] = lba >> 24;
   8622e:	ea4f 6314 	mov.w	r3, r4, lsr #24
   86232:	70cb      	strb	r3, [r1, #3]
	udi_msc_sense.information[1] = lba >> 16;
   86234:	ea4f 4014 	mov.w	r0, r4, lsr #16
   86238:	7108      	strb	r0, [r1, #4]
	udi_msc_sense.information[2] = lba >> 8;
   8623a:	ea4f 2214 	mov.w	r2, r4, lsr #8
   8623e:	714a      	strb	r2, [r1, #5]
	udi_msc_sense.information[3] = lba;
   86240:	718c      	strb	r4, [r1, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
   86242:	ea4f 2315 	mov.w	r3, r5, lsr #8
   86246:	730b      	strb	r3, [r1, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
   86248:	734d      	strb	r5, [r1, #13]
   8624a:	bd70      	pop	{r4, r5, r6, pc}

0008624c <udi_msc_sense_fail_busy_or_change>:
{
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
}

static void udi_msc_sense_fail_busy_or_change(void)
{
   8624c:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
   8624e:	f04f 0006 	mov.w	r0, #6
   86252:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   86256:	f04f 0200 	mov.w	r2, #0
   8625a:	f246 2305 	movw	r3, #25093	; 0x6205
   8625e:	f2c0 0308 	movt	r3, #8
   86262:	4798      	blx	r3
   86264:	bd08      	pop	{r3, pc}
   86266:	bf00      	nop

00086268 <udi_msc_sense_fail_not_present>:
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
}


static void udi_msc_sense_fail_not_present(void)
{
   86268:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
   8626a:	f04f 0002 	mov.w	r0, #2
   8626e:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
   86272:	f04f 0200 	mov.w	r2, #0
   86276:	f246 2305 	movw	r3, #25093	; 0x6205
   8627a:	f2c0 0308 	movt	r3, #8
   8627e:	4798      	blx	r3
   86280:	bd08      	pop	{r3, pc}
   86282:	bf00      	nop

00086284 <udi_msc_sense_fail_hardware>:
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}

static void udi_msc_sense_fail_hardware(void)
{
   86284:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
   86286:	f04f 0004 	mov.w	r0, #4
   8628a:	f04f 0100 	mov.w	r1, #0
   8628e:	460a      	mov	r2, r1
   86290:	f246 2305 	movw	r3, #25093	; 0x6205
   86294:	f2c0 0308 	movt	r3, #8
   86298:	4798      	blx	r3
   8629a:	bd08      	pop	{r3, pc}

0008629c <udi_msc_sense_fail_cdb_invalid>:
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
}

static void udi_msc_sense_fail_cdb_invalid(void)
{
   8629c:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
   8629e:	f04f 0005 	mov.w	r0, #5
   862a2:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   862a6:	f04f 0200 	mov.w	r2, #0
   862aa:	f246 2305 	movw	r3, #25093	; 0x6205
   862ae:	f2c0 0308 	movt	r3, #8
   862b2:	4798      	blx	r3
   862b4:	bd08      	pop	{r3, pc}
   862b6:	bf00      	nop

000862b8 <udi_msc_csw_send>:
	udi_msc_csw_send();
}


void udi_msc_csw_send(void)
{
   862b8:	b510      	push	{r4, lr}
   862ba:	b082      	sub	sp, #8
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
   862bc:	f246 4345 	movw	r3, #25669	; 0x6445
   862c0:	f2c0 0308 	movt	r3, #8
   862c4:	9300      	str	r3, [sp, #0]
   862c6:	f04f 0081 	mov.w	r0, #129	; 0x81
   862ca:	f04f 0100 	mov.w	r1, #0
   862ce:	f240 2250 	movw	r2, #592	; 0x250
   862d2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   862d6:	f04f 030d 	mov.w	r3, #13
   862da:	f249 6465 	movw	r4, #38501	; 0x9665
   862de:	f2c0 0408 	movt	r4, #8
   862e2:	47a0      	blx	r4
   862e4:	b950      	cbnz	r0, 862fc <udi_msc_csw_send+0x44>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
   862e6:	f04f 0081 	mov.w	r0, #129	; 0x81
   862ea:	f246 21b9 	movw	r1, #25273	; 0x62b9
   862ee:	f2c0 0108 	movt	r1, #8
   862f2:	f649 42f1 	movw	r2, #40177	; 0x9cf1
   862f6:	f2c0 0208 	movt	r2, #8
   862fa:	4790      	blx	r2
	}
}
   862fc:	b002      	add	sp, #8
   862fe:	bd10      	pop	{r4, pc}

00086300 <udi_msc_csw_process>:

//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
   86300:	b508      	push	{r3, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
   86302:	f240 2350 	movw	r3, #592	; 0x250
   86306:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8630a:	6899      	ldr	r1, [r3, #8]
   8630c:	b171      	cbz	r1, 8632c <udi_msc_csw_process+0x2c>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
   8630e:	f241 42d0 	movw	r2, #5328	; 0x14d0
   86312:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86316:	f992 300c 	ldrsb.w	r3, [r2, #12]
   8631a:	2b00      	cmp	r3, #0
			udd_ep_set_halt(UDI_MSC_EP_IN);
   8631c:	bfb4      	ite	lt
   8631e:	2081      	movlt	r0, #129	; 0x81
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
   86320:	2002      	movge	r0, #2
   86322:	f249 4149 	movw	r1, #37961	; 0x9449
   86326:	f2c0 0108 	movt	r1, #8
   8632a:	4788      	blx	r1
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
   8632c:	f241 40d0 	movw	r0, #5328	; 0x14d0
   86330:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86334:	6842      	ldr	r2, [r0, #4]
   86336:	f240 2350 	movw	r3, #592	; 0x250
   8633a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8633e:	605a      	str	r2, [r3, #4]
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
	udi_msc_csw_send();
   86340:	f246 21b9 	movw	r1, #25273	; 0x62b9
   86344:	f2c0 0108 	movt	r1, #8
   86348:	4788      	blx	r1
   8634a:	bd08      	pop	{r3, pc}

0008634c <udi_msc_cbw_validate>:
	}
}


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
   8634c:	b508      	push	{r3, lr}
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
   8634e:	f241 43d0 	movw	r3, #5328	; 0x14d0
   86352:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86356:	7b1a      	ldrb	r2, [r3, #12]
   86358:	4051      	eors	r1, r2
   8635a:	f011 0f80 	tst.w	r1, #128	; 0x80
   8635e:	d106      	bne.n	8636e <udi_msc_cbw_validate+0x22>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
   86360:	f240 2150 	movw	r1, #592	; 0x250
   86364:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86368:	688b      	ldr	r3, [r1, #8]
   8636a:	4283      	cmp	r3, r0
   8636c:	d20c      	bcs.n	86388 <udi_msc_cbw_validate+0x3c>
		udi_msc_sense_fail_cdb_invalid();
   8636e:	f246 209d 	movw	r0, #25245	; 0x629d
   86372:	f2c0 0008 	movt	r0, #8
   86376:	4780      	blx	r0
		udi_msc_csw_process();
   86378:	f246 3201 	movw	r2, #25345	; 0x6301
   8637c:	f2c0 0208 	movt	r2, #8
   86380:	4790      	blx	r2
		return false;
   86382:	f04f 0000 	mov.w	r0, #0
   86386:	bd08      	pop	{r3, pc}
	 *  - Case  4: Hi > Dn
	 *  - Case  5: Hi > Di
	 *  - Case  9: Ho > Dn
	 *  - Case 11: Ho > Do
	 */
	return true;
   86388:	f04f 0001 	mov.w	r0, #1
}
   8638c:	bd08      	pop	{r3, pc}
   8638e:	bf00      	nop

00086390 <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
   86390:	b510      	push	{r4, lr}
   86392:	b082      	sub	sp, #8
   86394:	4602      	mov	r2, r0
   86396:	460b      	mov	r3, r1
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
   86398:	f246 31d1 	movw	r1, #25553	; 0x63d1
   8639c:	f2c0 0108 	movt	r1, #8
   863a0:	9100      	str	r1, [sp, #0]
   863a2:	f04f 0081 	mov.w	r0, #129	; 0x81
   863a6:	f04f 0101 	mov.w	r1, #1
   863aa:	f249 6465 	movw	r4, #38501	; 0x9665
   863ae:	f2c0 0408 	movt	r4, #8
   863b2:	47a0      	blx	r4
   863b4:	b948      	cbnz	r0, 863ca <udi_msc_data_send+0x3a>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
   863b6:	f246 2385 	movw	r3, #25221	; 0x6285
   863ba:	f2c0 0308 	movt	r3, #8
   863be:	4798      	blx	r3
		udi_msc_csw_process();
   863c0:	f246 3001 	movw	r0, #25345	; 0x6301
   863c4:	f2c0 0008 	movt	r0, #8
   863c8:	4780      	blx	r0
	}
}
   863ca:	b002      	add	sp, #8
   863cc:	bd10      	pop	{r4, pc}
   863ce:	bf00      	nop

000863d0 <udi_msc_data_sent>:


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
   863d0:	b510      	push	{r4, lr}
   863d2:	460c      	mov	r4, r1
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
   863d4:	b980      	cbnz	r0, 863f8 <udi_msc_data_sent+0x28>
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Update sense data
	udi_msc_sense_pass();
   863d6:	f246 13e9 	movw	r3, #25065	; 0x61e9
   863da:	f2c0 0308 	movt	r3, #8
   863de:	4798      	blx	r3
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
   863e0:	f240 2050 	movw	r0, #592	; 0x250
   863e4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   863e8:	6882      	ldr	r2, [r0, #8]
   863ea:	1b14      	subs	r4, r2, r4
   863ec:	6084      	str	r4, [r0, #8]
	udi_msc_csw_process();
   863ee:	f246 3101 	movw	r1, #25345	; 0x6301
   863f2:	f2c0 0108 	movt	r1, #8
   863f6:	4788      	blx	r1
   863f8:	bd10      	pop	{r4, pc}
   863fa:	bf00      	nop

000863fc <udi_msc_cbw_wait>:
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
}

static void udi_msc_cbw_wait(void)
{
   863fc:	b510      	push	{r4, lr}
   863fe:	b082      	sub	sp, #8
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
   86400:	f246 6359 	movw	r3, #26201	; 0x6659
   86404:	f2c0 0308 	movt	r3, #8
   86408:	9300      	str	r3, [sp, #0]
   8640a:	f04f 0002 	mov.w	r0, #2
   8640e:	f04f 0101 	mov.w	r1, #1
   86412:	f241 42d0 	movw	r2, #5328	; 0x14d0
   86416:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8641a:	f04f 031f 	mov.w	r3, #31
   8641e:	f249 6465 	movw	r4, #38501	; 0x9665
   86422:	f2c0 0408 	movt	r4, #8
   86426:	47a0      	blx	r4
   86428:	b950      	cbnz	r0, 86440 <udi_msc_cbw_wait+0x44>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
   8642a:	f04f 0002 	mov.w	r0, #2
   8642e:	f246 31fd 	movw	r1, #25597	; 0x63fd
   86432:	f2c0 0108 	movt	r1, #8
   86436:	f649 42f1 	movw	r2, #40177	; 0x9cf1
   8643a:	f2c0 0208 	movt	r2, #8
   8643e:	4790      	blx	r2
	}
}
   86440:	b002      	add	sp, #8
   86442:	bd10      	pop	{r4, pc}

00086444 <udi_msc_csw_sent>:
}


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
   86444:	b508      	push	{r3, lr}
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
   86446:	f246 33fd 	movw	r3, #25597	; 0x63fd
   8644a:	f2c0 0308 	movt	r3, #8
   8644e:	4798      	blx	r3
   86450:	bd08      	pop	{r3, pc}
   86452:	bf00      	nop

00086454 <udi_msc_cbw_invalid>:

//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
   86454:	b508      	push	{r3, lr}
	if (!udi_msc_b_cbw_invalid)
   86456:	f241 43f0 	movw	r3, #5360	; 0x14f0
   8645a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8645e:	7818      	ldrb	r0, [r3, #0]
   86460:	b188      	cbz	r0, 86486 <udi_msc_cbw_invalid+0x32>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_OUT);
   86462:	f04f 0002 	mov.w	r0, #2
   86466:	f249 4149 	movw	r1, #37961	; 0x9449
   8646a:	f2c0 0108 	movt	r1, #8
   8646e:	4788      	blx	r1
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
   86470:	f04f 0002 	mov.w	r0, #2
   86474:	f246 4155 	movw	r1, #25685	; 0x6455
   86478:	f2c0 0108 	movt	r1, #8
   8647c:	f649 42f1 	movw	r2, #40177	; 0x9cf1
   86480:	f2c0 0208 	movt	r2, #8
   86484:	4790      	blx	r2
   86486:	bd08      	pop	{r3, pc}

00086488 <udi_msc_csw_invalid>:
}

static void udi_msc_csw_invalid(void)
{
   86488:	b508      	push	{r3, lr}
	if (!udi_msc_b_cbw_invalid)
   8648a:	f241 43f0 	movw	r3, #5360	; 0x14f0
   8648e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86492:	7818      	ldrb	r0, [r3, #0]
   86494:	b188      	cbz	r0, 864ba <udi_msc_csw_invalid+0x32>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_IN);
   86496:	f04f 0081 	mov.w	r0, #129	; 0x81
   8649a:	f249 4149 	movw	r1, #37961	; 0x9449
   8649e:	f2c0 0108 	movt	r1, #8
   864a2:	4788      	blx	r1
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
   864a4:	f04f 0081 	mov.w	r0, #129	; 0x81
   864a8:	f246 4189 	movw	r1, #25737	; 0x6489
   864ac:	f2c0 0108 	movt	r1, #8
   864b0:	f649 42f1 	movw	r2, #40177	; 0x9cf1
   864b4:	f2c0 0208 	movt	r2, #8
   864b8:	4790      	blx	r2
   864ba:	bd08      	pop	{r3, pc}

000864bc <udi_msc_spc_mode_sense>:
	udi_msc_csw_process();
}


static void udi_msc_spc_mode_sense(bool b_sense10)
{
   864bc:	b570      	push	{r4, r5, r6, lr}
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
   864be:	f241 41f4 	movw	r1, #5364	; 0x14f4
   864c2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   864c6:	f04f 0300 	mov.w	r3, #0
   864ca:	460a      	mov	r2, r1
   864cc:	f842 3b04 	str.w	r3, [r2], #4
   864d0:	604b      	str	r3, [r1, #4]
   864d2:	f102 0204 	add.w	r2, r2, #4
   864d6:	f842 3b04 	str.w	r3, [r2], #4
   864da:	f842 3b04 	str.w	r3, [r2], #4
   864de:	6013      	str	r3, [r2, #0]

	// Initialize process
	if (b_sense10) {
   864e0:	4606      	mov	r6, r0
   864e2:	b148      	cbz	r0, 864f8 <udi_msc_spc_mode_sense+0x3c>
		request_lgt = udi_msc_cbw.CDB[8];
   864e4:	f241 44d0 	movw	r4, #5328	; 0x14d0
   864e8:	f2c2 0407 	movt	r4, #8199	; 0x2007
   864ec:	7de5      	ldrb	r5, [r4, #23]
		ptr_mode = &sense.s10.sense_data;
   864ee:	f101 0108 	add.w	r1, r1, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
   864f2:	f04f 0408 	mov.w	r4, #8
   864f6:	e007      	b.n	86508 <udi_msc_spc_mode_sense+0x4c>
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
   864f8:	f241 40d0 	movw	r0, #5328	; 0x14d0
   864fc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86500:	7cc5      	ldrb	r5, [r0, #19]
		ptr_mode = &sense.s6.sense_data;
   86502:	492b      	ldr	r1, [pc, #172]	; (865b0 <udi_msc_spc_mode_sense+0xf4>)
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
   86504:	f04f 0404 	mov.w	r4, #4
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
   86508:	f241 43d0 	movw	r3, #5328	; 0x14d0
   8650c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86510:	7c5a      	ldrb	r2, [r3, #17]
   86512:	f002 003f 	and.w	r0, r2, #63	; 0x3f
	if ((SCSI_MS_MODE_INFEXP == mode)
   86516:	281c      	cmp	r0, #28
   86518:	d001      	beq.n	8651e <udi_msc_spc_mode_sense+0x62>
			|| (SCSI_MS_MODE_ALL == mode)) {
   8651a:	283f      	cmp	r0, #63	; 0x3f
   8651c:	d10b      	bne.n	86536 <udi_msc_spc_mode_sense+0x7a>
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
   8651e:	f04f 031c 	mov.w	r3, #28
   86522:	700b      	strb	r3, [r1, #0]
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
   86524:	f04f 020a 	mov.w	r2, #10
   86528:	704a      	strb	r2, [r1, #1]
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
   8652a:	f04f 0005 	mov.w	r0, #5
   8652e:	70c8      	strb	r0, [r1, #3]
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
   86530:	f104 040c 	add.w	r4, r4, #12
   86534:	b2e4      	uxtb	r4, r4
   86536:	42ac      	cmp	r4, r5
   86538:	bf38      	it	cc
   8653a:	4625      	movcc	r5, r4
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
		request_lgt = data_sense_lgt;
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
   8653c:	4628      	mov	r0, r5
   8653e:	f04f 0180 	mov.w	r1, #128	; 0x80
   86542:	f246 334d 	movw	r3, #25421	; 0x634d
   86546:	f2c0 0308 	movt	r3, #8
   8654a:	4798      	blx	r3
   8654c:	b370      	cbz	r0, 865ac <udi_msc_spc_mode_sense+0xf0>
		return;

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
   8654e:	f241 41d0 	movw	r1, #5328	; 0x14d0
   86552:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86556:	7b48      	ldrb	r0, [r1, #13]
   86558:	f645 021d 	movw	r2, #22557	; 0x581d
   8655c:	f2c0 0208 	movt	r2, #8
   86560:	4790      	blx	r2
   86562:	2800      	cmp	r0, #0
   86564:	bf14      	ite	ne
   86566:	2080      	movne	r0, #128	; 0x80
   86568:	2000      	moveq	r0, #0

	if (b_sense10) {
   8656a:	b16e      	cbz	r6, 86588 <udi_msc_spc_mode_sense+0xcc>
		sense.s10.header.mode_data_length =
				cpu_to_be16((data_sense_lgt - 2));
   8656c:	f1a4 0402 	sub.w	r4, r4, #2
   86570:	b2a4      	uxth	r4, r4

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;

	if (b_sense10) {
		sense.s10.header.mode_data_length =
   86572:	f241 41f4 	movw	r1, #5364	; 0x14f4
   86576:	f2c2 0107 	movt	r1, #8199	; 0x2007
				cpu_to_be16((data_sense_lgt - 2));
   8657a:	ea4f 2214 	mov.w	r2, r4, lsr #8
   8657e:	ea42 2404 	orr.w	r4, r2, r4, lsl #8

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;

	if (b_sense10) {
		sense.s10.header.mode_data_length =
   86582:	800c      	strh	r4, [r1, #0]
				cpu_to_be16((data_sense_lgt - 2));
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
   86584:	70c8      	strb	r0, [r1, #3]
   86586:	e007      	b.n	86598 <udi_msc_spc_mode_sense+0xdc>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
   86588:	f241 43f4 	movw	r3, #5364	; 0x14f4
   8658c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86590:	f104 34ff 	add.w	r4, r4, #4294967295
   86594:	701c      	strb	r4, [r3, #0]
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
   86596:	7098      	strb	r0, [r3, #2]
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
   86598:	f241 40f4 	movw	r0, #5364	; 0x14f4
   8659c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   865a0:	4629      	mov	r1, r5
   865a2:	f246 3391 	movw	r3, #25489	; 0x6391
   865a6:	f2c0 0308 	movt	r3, #8
   865aa:	4798      	blx	r3
   865ac:	bd70      	pop	{r4, r5, r6, pc}
   865ae:	bf00      	nop
   865b0:	200714f8 	.word	0x200714f8

000865b4 <udi_msc_sbc_trans>:
			sizeof(udi_msc_capacity));
}


static void udi_msc_sbc_trans(bool b_read)
{
   865b4:	b510      	push	{r4, lr}
	uint32_t trans_size;

	if (!b_read) {
   865b6:	4604      	mov	r4, r0
   865b8:	b9d8      	cbnz	r0, 865f2 <udi_msc_sbc_trans+0x3e>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
   865ba:	f241 43d0 	movw	r3, #5328	; 0x14d0
   865be:	f2c2 0307 	movt	r3, #8199	; 0x2007
   865c2:	7b58      	ldrb	r0, [r3, #13]
   865c4:	f645 011d 	movw	r1, #22557	; 0x581d
   865c8:	f2c0 0108 	movt	r1, #8
   865cc:	4788      	blx	r1
   865ce:	b180      	cbz	r0, 865f2 <udi_msc_sbc_trans+0x3e>
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}

static void udi_msc_sense_fail_protected(void)
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
   865d0:	f04f 0007 	mov.w	r0, #7
   865d4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
   865d8:	f04f 0200 	mov.w	r2, #0
   865dc:	f246 2305 	movw	r3, #25093	; 0x6205
   865e0:	f2c0 0308 	movt	r3, #8
   865e4:	4798      	blx	r3
	if (!b_read) {
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
			// Write not authorized
			udi_msc_sense_fail_protected();
			udi_msc_csw_process();
   865e6:	f246 3201 	movw	r2, #25345	; 0x6301
   865ea:	f2c0 0208 	movt	r2, #8
   865ee:	4790      	blx	r2
			return;
   865f0:	bd10      	pop	{r4, pc}
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
   865f2:	f241 520c 	movw	r2, #5388	; 0x150c
   865f6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   865fa:	f241 40d0 	movw	r0, #5328	; 0x14d0
   865fe:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86602:	7c43      	ldrb	r3, [r0, #17]
   86604:	70d3      	strb	r3, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
   86606:	7c81      	ldrb	r1, [r0, #18]
   86608:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
   8660a:	7cc3      	ldrb	r3, [r0, #19]
   8660c:	7053      	strb	r3, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
   8660e:	7d01      	ldrb	r1, [r0, #20]
   86610:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
   86612:	f241 5208 	movw	r2, #5384	; 0x1508
   86616:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8661a:	7d83      	ldrb	r3, [r0, #22]
   8661c:	7053      	strb	r3, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
   8661e:	7dc0      	ldrb	r0, [r0, #23]
   86620:	7010      	strb	r0, [r2, #0]

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
   86622:	8811      	ldrh	r1, [r2, #0]
	if (!udi_msc_cbw_validate(trans_size,
   86624:	ea4f 2041 	mov.w	r0, r1, lsl #9
   86628:	2c00      	cmp	r4, #0
   8662a:	bf14      	ite	ne
   8662c:	2180      	movne	r1, #128	; 0x80
   8662e:	2100      	moveq	r1, #0
   86630:	f246 324d 	movw	r2, #25421	; 0x634d
   86634:	f2c0 0208 	movt	r2, #8
   86638:	4790      	blx	r2
   8663a:	b158      	cbz	r0, 86654 <udi_msc_sbc_trans+0xa0>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
   8663c:	f241 5324 	movw	r3, #5412	; 0x1524
   86640:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86644:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
   86646:	f241 40cc 	movw	r0, #5324	; 0x14cc
   8664a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8664e:	f04f 0101 	mov.w	r1, #1
   86652:	7001      	strb	r1, [r0, #0]
   86654:	bd10      	pop	{r4, pc}
   86656:	bf00      	nop

00086658 <udi_msc_cbw_received>:
}


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
   86658:	b570      	push	{r4, r5, r6, lr}
	UNUSED(ep);
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
   8665a:	2800      	cmp	r0, #0
   8665c:	f040 82b8 	bne.w	86bd0 <udi_msc_cbw_received+0x578>
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
   86660:	291f      	cmp	r1, #31
   86662:	d10a      	bne.n	8667a <udi_msc_cbw_received+0x22>
			|| (udi_msc_cbw.dCBWSignature !=
   86664:	f245 3355 	movw	r3, #21333	; 0x5355
   86668:	f2c4 3342 	movt	r3, #17218	; 0x4342
   8666c:	f241 42d0 	movw	r2, #5328	; 0x14d0
   86670:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86674:	6810      	ldr	r0, [r2, #0]
   86676:	4298      	cmp	r0, r3
   86678:	d011      	beq.n	8669e <udi_msc_cbw_received+0x46>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
   8667a:	f241 43f0 	movw	r3, #5360	; 0x14f0
   8667e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86682:	f04f 0201 	mov.w	r2, #1
   86686:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
   86688:	f246 4155 	movw	r1, #25685	; 0x6455
   8668c:	f2c0 0108 	movt	r1, #8
   86690:	4788      	blx	r1
		udi_msc_csw_invalid();
   86692:	f246 4089 	movw	r0, #25737	; 0x6489
   86696:	f2c0 0008 	movt	r0, #8
   8669a:	4780      	blx	r0
		return;
   8669c:	bd70      	pop	{r4, r5, r6, pc}
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
   8669e:	f241 41d0 	movw	r1, #5328	; 0x14d0
   866a2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   866a6:	7b4b      	ldrb	r3, [r1, #13]
   866a8:	f003 000f 	and.w	r0, r3, #15
   866ac:	7348      	strb	r0, [r1, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
   866ae:	f241 42c8 	movw	r2, #5320	; 0x14c8
   866b2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   866b6:	7811      	ldrb	r1, [r2, #0]
   866b8:	4281      	cmp	r1, r0
   866ba:	d20a      	bcs.n	866d2 <udi_msc_cbw_received+0x7a>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
   866bc:	f246 219d 	movw	r1, #25245	; 0x629d
   866c0:	f2c0 0108 	movt	r1, #8
   866c4:	4788      	blx	r1
		udi_msc_csw_process();
   866c6:	f246 3001 	movw	r0, #25345	; 0x6301
   866ca:	f2c0 0008 	movt	r0, #8
   866ce:	4780      	blx	r0
		return;
   866d0:	bd70      	pop	{r4, r5, r6, pc}
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
   866d2:	f241 43d0 	movw	r3, #5328	; 0x14d0
   866d6:	f2c2 0307 	movt	r3, #8199	; 0x2007
		udi_msc_sense_fail_cdb_invalid();
		udi_msc_csw_process();
		return;
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
   866da:	689a      	ldr	r2, [r3, #8]
   866dc:	f240 2150 	movw	r1, #592	; 0x250
   866e0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   866e4:	608a      	str	r2, [r1, #8]
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
   866e6:	7bdb      	ldrb	r3, [r3, #15]
   866e8:	2b5a      	cmp	r3, #90	; 0x5a
   866ea:	f200 825a 	bhi.w	86ba2 <udi_msc_cbw_received+0x54a>
   866ee:	e8df f013 	tbh	[pc, r3, lsl #1]
   866f2:	01a6      	.short	0x01a6
   866f4:	02580258 	.word	0x02580258
   866f8:	0258005b 	.word	0x0258005b
   866fc:	02580258 	.word	0x02580258
   86700:	02580258 	.word	0x02580258
   86704:	02580258 	.word	0x02580258
   86708:	02580258 	.word	0x02580258
   8670c:	02580258 	.word	0x02580258
   86710:	02580258 	.word	0x02580258
   86714:	00790258 	.word	0x00790258
   86718:	02580258 	.word	0x02580258
   8671c:	02580258 	.word	0x02580258
   86720:	02580258 	.word	0x02580258
   86724:	01960258 	.word	0x01960258
   86728:	02580209 	.word	0x02580209
   8672c:	02260258 	.word	0x02260258
   86730:	02580258 	.word	0x02580258
   86734:	02580258 	.word	0x02580258
   86738:	02580258 	.word	0x02580258
   8673c:	025801ce 	.word	0x025801ce
   86740:	02480258 	.word	0x02480258
   86744:	02500258 	.word	0x02500258
   86748:	02580258 	.word	0x02580258
   8674c:	02580258 	.word	0x02580258
   86750:	0258023d 	.word	0x0258023d
   86754:	02580258 	.word	0x02580258
   86758:	02580258 	.word	0x02580258
   8675c:	02580258 	.word	0x02580258
   86760:	02580258 	.word	0x02580258
   86764:	02580258 	.word	0x02580258
   86768:	02580258 	.word	0x02580258
   8676c:	02580258 	.word	0x02580258
   86770:	02580258 	.word	0x02580258
   86774:	02580258 	.word	0x02580258
   86778:	02580258 	.word	0x02580258
   8677c:	02580258 	.word	0x02580258
   86780:	02580258 	.word	0x02580258
   86784:	02580258 	.word	0x02580258
   86788:	02580258 	.word	0x02580258
   8678c:	02580258 	.word	0x02580258
   86790:	02580258 	.word	0x02580258
   86794:	02580258 	.word	0x02580258
   86798:	02580258 	.word	0x02580258
   8679c:	02580258 	.word	0x02580258
   867a0:	02580258 	.word	0x02580258
   867a4:	019e0258 	.word	0x019e0258
//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
	uint8_t length = udi_msc_cbw.CDB[4];
   867a8:	f241 44d0 	movw	r4, #5328	; 0x14d0
   867ac:	f2c2 0407 	movt	r4, #8199	; 0x2007
   867b0:	7ce4      	ldrb	r4, [r4, #19]
   867b2:	2c12      	cmp	r4, #18
   867b4:	bf28      	it	cs
   867b6:	2412      	movcs	r4, #18

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
		length = sizeof(udi_msc_sense);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
   867b8:	4620      	mov	r0, r4
   867ba:	f04f 0180 	mov.w	r1, #128	; 0x80
   867be:	f246 324d 	movw	r2, #25421	; 0x634d
   867c2:	f2c0 0208 	movt	r2, #8
   867c6:	4790      	blx	r2
   867c8:	2800      	cmp	r0, #0
   867ca:	f000 8201 	beq.w	86bd0 <udi_msc_cbw_received+0x578>
		return;
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
   867ce:	f241 5010 	movw	r0, #5392	; 0x1510
   867d2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   867d6:	4621      	mov	r1, r4
   867d8:	f246 3391 	movw	r3, #25489	; 0x6391
   867dc:	f2c0 0308 	movt	r3, #8
   867e0:	4798      	blx	r3
   867e2:	bd70      	pop	{r4, r5, r6, pc}
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
   867e4:	f241 44d0 	movw	r4, #5328	; 0x14d0
   867e8:	f2c2 0407 	movt	r4, #8199	; 0x2007
   867ec:	7ce4      	ldrb	r4, [r4, #19]
   867ee:	2c24      	cmp	r4, #36	; 0x24
   867f0:	bf28      	it	cs
   867f2:	2424      	movcs	r4, #36	; 0x24

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
   867f4:	4620      	mov	r0, r4
   867f6:	f04f 0180 	mov.w	r1, #128	; 0x80
   867fa:	f246 324d 	movw	r2, #25421	; 0x634d
   867fe:	f2c0 0208 	movt	r2, #8
   86802:	4790      	blx	r2
   86804:	2800      	cmp	r0, #0
   86806:	f000 81e3 	beq.w	86bd0 <udi_msc_cbw_received+0x578>
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
   8680a:	f241 40d0 	movw	r0, #5328	; 0x14d0
   8680e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86812:	7c01      	ldrb	r1, [r0, #16]
   86814:	f011 0f03 	tst.w	r1, #3
   86818:	d105      	bne.n	86826 <udi_msc_cbw_received+0x1ce>
			|| (0 != udi_msc_cbw.CDB[2])) {
   8681a:	f241 43d0 	movw	r3, #5328	; 0x14d0
   8681e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86822:	7c5a      	ldrb	r2, [r3, #17]
   86824:	b152      	cbz	r2, 8683c <udi_msc_cbw_received+0x1e4>
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
   86826:	f246 219d 	movw	r1, #25245	; 0x629d
   8682a:	f2c0 0108 	movt	r1, #8
   8682e:	4788      	blx	r1
		udi_msc_csw_process();
   86830:	f246 3301 	movw	r3, #25345	; 0x6301
   86834:	f2c0 0308 	movt	r3, #8
   86838:	4798      	blx	r3
   8683a:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
   8683c:	f241 45d0 	movw	r5, #5328	; 0x14d0
   86840:	f2c2 0507 	movt	r5, #8199	; 0x2007
   86844:	7b68      	ldrb	r0, [r5, #13]
   86846:	f645 0635 	movw	r6, #22581	; 0x5835
   8684a:	f2c0 0608 	movt	r6, #8
   8684e:	47b0      	blx	r6
   86850:	2800      	cmp	r0, #0
   86852:	bf14      	ite	ne
   86854:	2080      	movne	r0, #128	; 0x80
   86856:	2000      	moveq	r0, #0
   86858:	f240 262c 	movw	r6, #556	; 0x22c
   8685c:	f2c2 0607 	movt	r6, #8199	; 0x2007
   86860:	7070      	strb	r0, [r6, #1]
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
   86862:	f241 41d0 	movw	r1, #5328	; 0x14d0
   86866:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8686a:	7b48      	ldrb	r0, [r1, #13]
   8686c:	f645 034d 	movw	r3, #22605	; 0x584d
   86870:	f2c0 0308 	movt	r3, #8
   86874:	4798      	blx	r3
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
   86876:	f106 0510 	add.w	r5, r6, #16
   8687a:	4603      	mov	r3, r0
   8687c:	f853 0f01 	ldr.w	r0, [r3, #1]!
   86880:	6859      	ldr	r1, [r3, #4]
   86882:	689a      	ldr	r2, [r3, #8]
   86884:	68db      	ldr	r3, [r3, #12]
   86886:	c50f      	stmia	r5!, {r0, r1, r2, r3}
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   86888:	7c32      	ldrb	r2, [r6, #16]
   8688a:	2a00      	cmp	r2, #0
   8688c:	f000 819a 	beq.w	86bc4 <udi_msc_cbw_received+0x56c>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86890:	2a22      	cmp	r2, #34	; 0x22
   86892:	f000 819a 	beq.w	86bca <udi_msc_cbw_received+0x572>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   86896:	7c71      	ldrb	r1, [r6, #17]
   86898:	2900      	cmp	r1, #0
   8689a:	d03e      	beq.n	8691a <udi_msc_cbw_received+0x2c2>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   8689c:	2922      	cmp	r1, #34	; 0x22
   8689e:	d06b      	beq.n	86978 <udi_msc_cbw_received+0x320>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   868a0:	7cb2      	ldrb	r2, [r6, #18]
   868a2:	2a00      	cmp	r2, #0
   868a4:	d03c      	beq.n	86920 <udi_msc_cbw_received+0x2c8>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   868a6:	2a22      	cmp	r2, #34	; 0x22
   868a8:	d069      	beq.n	8697e <udi_msc_cbw_received+0x326>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   868aa:	7cf1      	ldrb	r1, [r6, #19]
   868ac:	2900      	cmp	r1, #0
   868ae:	d03a      	beq.n	86926 <udi_msc_cbw_received+0x2ce>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   868b0:	2922      	cmp	r1, #34	; 0x22
   868b2:	d067      	beq.n	86984 <udi_msc_cbw_received+0x32c>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   868b4:	7d32      	ldrb	r2, [r6, #20]
   868b6:	2a00      	cmp	r2, #0
   868b8:	d038      	beq.n	8692c <udi_msc_cbw_received+0x2d4>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   868ba:	2a22      	cmp	r2, #34	; 0x22
   868bc:	d065      	beq.n	8698a <udi_msc_cbw_received+0x332>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   868be:	7d71      	ldrb	r1, [r6, #21]
   868c0:	2900      	cmp	r1, #0
   868c2:	d036      	beq.n	86932 <udi_msc_cbw_received+0x2da>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   868c4:	2922      	cmp	r1, #34	; 0x22
   868c6:	d063      	beq.n	86990 <udi_msc_cbw_received+0x338>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   868c8:	7db2      	ldrb	r2, [r6, #22]
   868ca:	b3aa      	cbz	r2, 86938 <udi_msc_cbw_received+0x2e0>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   868cc:	2a22      	cmp	r2, #34	; 0x22
   868ce:	d062      	beq.n	86996 <udi_msc_cbw_received+0x33e>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   868d0:	7df1      	ldrb	r1, [r6, #23]
   868d2:	b3a1      	cbz	r1, 8693e <udi_msc_cbw_received+0x2e6>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   868d4:	2922      	cmp	r1, #34	; 0x22
   868d6:	d061      	beq.n	8699c <udi_msc_cbw_received+0x344>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   868d8:	7e32      	ldrb	r2, [r6, #24]
   868da:	b39a      	cbz	r2, 86944 <udi_msc_cbw_received+0x2ec>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   868dc:	2a22      	cmp	r2, #34	; 0x22
   868de:	d060      	beq.n	869a2 <udi_msc_cbw_received+0x34a>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   868e0:	7e71      	ldrb	r1, [r6, #25]
   868e2:	b391      	cbz	r1, 8694a <udi_msc_cbw_received+0x2f2>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   868e4:	2922      	cmp	r1, #34	; 0x22
   868e6:	d05f      	beq.n	869a8 <udi_msc_cbw_received+0x350>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   868e8:	7eb2      	ldrb	r2, [r6, #26]
   868ea:	b38a      	cbz	r2, 86950 <udi_msc_cbw_received+0x2f8>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   868ec:	2a22      	cmp	r2, #34	; 0x22
   868ee:	d05e      	beq.n	869ae <udi_msc_cbw_received+0x356>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   868f0:	7ef1      	ldrb	r1, [r6, #27]
   868f2:	b381      	cbz	r1, 86956 <udi_msc_cbw_received+0x2fe>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   868f4:	2922      	cmp	r1, #34	; 0x22
   868f6:	d05d      	beq.n	869b4 <udi_msc_cbw_received+0x35c>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   868f8:	7f32      	ldrb	r2, [r6, #28]
   868fa:	b37a      	cbz	r2, 8695c <udi_msc_cbw_received+0x304>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   868fc:	2a22      	cmp	r2, #34	; 0x22
   868fe:	d05c      	beq.n	869ba <udi_msc_cbw_received+0x362>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   86900:	7f71      	ldrb	r1, [r6, #29]
   86902:	b371      	cbz	r1, 86962 <udi_msc_cbw_received+0x30a>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86904:	2922      	cmp	r1, #34	; 0x22
   86906:	d05b      	beq.n	869c0 <udi_msc_cbw_received+0x368>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   86908:	7fb2      	ldrb	r2, [r6, #30]
   8690a:	b36a      	cbz	r2, 86968 <udi_msc_cbw_received+0x310>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   8690c:	2a22      	cmp	r2, #34	; 0x22
   8690e:	d05a      	beq.n	869c6 <udi_msc_cbw_received+0x36e>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   86910:	7ff3      	ldrb	r3, [r6, #31]
   86912:	bb63      	cbnz	r3, 8696e <udi_msc_cbw_received+0x316>
   86914:	f04f 030f 	mov.w	r3, #15
   86918:	e057      	b.n	869ca <udi_msc_cbw_received+0x372>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
			break;
		}
		i++;
   8691a:	f04f 0301 	mov.w	r3, #1
   8691e:	e054      	b.n	869ca <udi_msc_cbw_received+0x372>
   86920:	f04f 0302 	mov.w	r3, #2
   86924:	e051      	b.n	869ca <udi_msc_cbw_received+0x372>
   86926:	f04f 0303 	mov.w	r3, #3
   8692a:	e04e      	b.n	869ca <udi_msc_cbw_received+0x372>
   8692c:	f04f 0304 	mov.w	r3, #4
   86930:	e04b      	b.n	869ca <udi_msc_cbw_received+0x372>
   86932:	f04f 0305 	mov.w	r3, #5
   86936:	e048      	b.n	869ca <udi_msc_cbw_received+0x372>
   86938:	f04f 0306 	mov.w	r3, #6
   8693c:	e045      	b.n	869ca <udi_msc_cbw_received+0x372>
   8693e:	f04f 0307 	mov.w	r3, #7
   86942:	e042      	b.n	869ca <udi_msc_cbw_received+0x372>
   86944:	f04f 0308 	mov.w	r3, #8
   86948:	e03f      	b.n	869ca <udi_msc_cbw_received+0x372>
   8694a:	f04f 0309 	mov.w	r3, #9
   8694e:	e03c      	b.n	869ca <udi_msc_cbw_received+0x372>
   86950:	f04f 030a 	mov.w	r3, #10
   86954:	e039      	b.n	869ca <udi_msc_cbw_received+0x372>
   86956:	f04f 030b 	mov.w	r3, #11
   8695a:	e036      	b.n	869ca <udi_msc_cbw_received+0x372>
   8695c:	f04f 030c 	mov.w	r3, #12
   86960:	e033      	b.n	869ca <udi_msc_cbw_received+0x372>
   86962:	f04f 030d 	mov.w	r3, #13
   86966:	e030      	b.n	869ca <udi_msc_cbw_received+0x372>
   86968:	f04f 030e 	mov.w	r3, #14
   8696c:	e02d      	b.n	869ca <udi_msc_cbw_received+0x372>

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   8696e:	2b22      	cmp	r3, #34	; 0x22
   86970:	bf08      	it	eq
   86972:	230f      	moveq	r3, #15
   86974:	d029      	beq.n	869ca <udi_msc_cbw_received+0x372>
   86976:	e047      	b.n	86a08 <udi_msc_cbw_received+0x3b0>
			break;
		}
		i++;
   86978:	f04f 0301 	mov.w	r3, #1
   8697c:	e025      	b.n	869ca <udi_msc_cbw_received+0x372>
   8697e:	f04f 0302 	mov.w	r3, #2
   86982:	e022      	b.n	869ca <udi_msc_cbw_received+0x372>
   86984:	f04f 0303 	mov.w	r3, #3
   86988:	e01f      	b.n	869ca <udi_msc_cbw_received+0x372>
   8698a:	f04f 0304 	mov.w	r3, #4
   8698e:	e01c      	b.n	869ca <udi_msc_cbw_received+0x372>
   86990:	f04f 0305 	mov.w	r3, #5
   86994:	e019      	b.n	869ca <udi_msc_cbw_received+0x372>
   86996:	f04f 0306 	mov.w	r3, #6
   8699a:	e016      	b.n	869ca <udi_msc_cbw_received+0x372>
   8699c:	f04f 0307 	mov.w	r3, #7
   869a0:	e013      	b.n	869ca <udi_msc_cbw_received+0x372>
   869a2:	f04f 0308 	mov.w	r3, #8
   869a6:	e010      	b.n	869ca <udi_msc_cbw_received+0x372>
   869a8:	f04f 0309 	mov.w	r3, #9
   869ac:	e00d      	b.n	869ca <udi_msc_cbw_received+0x372>
   869ae:	f04f 030a 	mov.w	r3, #10
   869b2:	e00a      	b.n	869ca <udi_msc_cbw_received+0x372>
   869b4:	f04f 030b 	mov.w	r3, #11
   869b8:	e007      	b.n	869ca <udi_msc_cbw_received+0x372>
   869ba:	f04f 030c 	mov.w	r3, #12
   869be:	e004      	b.n	869ca <udi_msc_cbw_received+0x372>
   869c0:	f04f 030d 	mov.w	r3, #13
   869c4:	e001      	b.n	869ca <udi_msc_cbw_received+0x372>
   869c6:	f04f 030e 	mov.w	r3, #14
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		udi_msc_inquiry_data.product_id[i] = ' ';
   869ca:	f240 212c 	movw	r1, #556	; 0x22c
   869ce:	f2c2 0107 	movt	r1, #8199	; 0x2007
   869d2:	f04f 0220 	mov.w	r2, #32
   869d6:	f1c3 050f 	rsb	r5, r3, #15
   869da:	f005 0001 	and.w	r0, r5, #1
   869de:	18cd      	adds	r5, r1, r3
   869e0:	742a      	strb	r2, [r5, #16]
		i++;
   869e2:	f103 0301 	add.w	r3, r3, #1
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   869e6:	2b10      	cmp	r3, #16
   869e8:	f040 80f3 	bne.w	86bd2 <udi_msc_cbw_received+0x57a>
   869ec:	e00c      	b.n	86a08 <udi_msc_cbw_received+0x3b0>
		udi_msc_inquiry_data.product_id[i] = ' ';
   869ee:	18c8      	adds	r0, r1, r3
   869f0:	7402      	strb	r2, [r0, #16]
		i++;
   869f2:	f103 0301 	add.w	r3, r3, #1
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   869f6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
		udi_msc_inquiry_data.product_id[i] = ' ';
   869fa:	18c8      	adds	r0, r1, r3
   869fc:	7402      	strb	r2, [r0, #16]
		i++;
   869fe:	f103 0301 	add.w	r3, r3, #1
   86a02:	b2db      	uxtb	r3, r3
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   86a04:	2b10      	cmp	r3, #16
   86a06:	d1f2      	bne.n	869ee <udi_msc_cbw_received+0x396>
		udi_msc_inquiry_data.product_id[i] = ' ';
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
   86a08:	f240 202c 	movw	r0, #556	; 0x22c
   86a0c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86a10:	4621      	mov	r1, r4
   86a12:	f246 3291 	movw	r2, #25489	; 0x6391
   86a16:	f2c0 0208 	movt	r2, #8
   86a1a:	4790      	blx	r2
   86a1c:	bd70      	pop	{r4, r5, r6, pc}
	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
		break;

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
   86a1e:	f04f 0000 	mov.w	r0, #0
   86a22:	f246 43bd 	movw	r3, #25789	; 0x64bd
   86a26:	f2c0 0308 	movt	r3, #8
   86a2a:	4798      	blx	r3
		break;
   86a2c:	bd70      	pop	{r4, r5, r6, pc}
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
   86a2e:	f04f 0001 	mov.w	r0, #1
   86a32:	f246 42bd 	movw	r2, #25789	; 0x64bd
   86a36:	f2c0 0208 	movt	r2, #8
   86a3a:	4790      	blx	r2
		break;
   86a3c:	bd70      	pop	{r4, r5, r6, pc}
}


static bool udi_msc_spc_testunitready_global(void)
{
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
   86a3e:	f245 71dd 	movw	r1, #22493	; 0x57dd
   86a42:	f2c0 0108 	movt	r1, #8
   86a46:	4788      	blx	r1
   86a48:	2802      	cmp	r0, #2
   86a4a:	d009      	beq.n	86a60 <udi_msc_cbw_received+0x408>
   86a4c:	2803      	cmp	r0, #3
   86a4e:	d001      	beq.n	86a54 <udi_msc_cbw_received+0x3fc>
   86a50:	b190      	cbz	r0, 86a78 <udi_msc_cbw_received+0x420>
   86a52:	e00b      	b.n	86a6c <udi_msc_cbw_received+0x414>
	case CTRL_GOOD:
		return true;	// Don't change sense data
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   86a54:	f246 234d 	movw	r3, #25165	; 0x624d
   86a58:	f2c0 0308 	movt	r3, #8
   86a5c:	4798      	blx	r3
   86a5e:	e010      	b.n	86a82 <udi_msc_cbw_received+0x42a>
		break;
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   86a60:	f246 2169 	movw	r1, #25193	; 0x6269
   86a64:	f2c0 0108 	movt	r1, #8
   86a68:	4788      	blx	r1
   86a6a:	e00a      	b.n	86a82 <udi_msc_cbw_received+0x42a>
		break;
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
   86a6c:	f246 2085 	movw	r0, #25221	; 0x6285
   86a70:	f2c0 0008 	movt	r0, #8
   86a74:	4780      	blx	r0
   86a76:	e004      	b.n	86a82 <udi_msc_cbw_received+0x42a>

static void udi_msc_spc_testunitready(void)
{
	if (udi_msc_spc_testunitready_global()) {
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
   86a78:	f246 12e9 	movw	r2, #25065	; 0x61e9
   86a7c:	f2c0 0208 	movt	r2, #8
   86a80:	4790      	blx	r2
	}
	// Send status in CSW packet
	udi_msc_csw_process();
   86a82:	f246 3001 	movw	r0, #25345	; 0x6301
   86a86:	f2c0 0008 	movt	r0, #8
   86a8a:	4780      	blx	r0
   86a8c:	bd70      	pop	{r4, r5, r6, pc}

static void udi_msc_sbc_read_capacity(void)
{
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
   86a8e:	f04f 0008 	mov.w	r0, #8
   86a92:	f04f 0180 	mov.w	r1, #128	; 0x80
   86a96:	f246 334d 	movw	r3, #25421	; 0x634d
   86a9a:	f2c0 0308 	movt	r3, #8
   86a9e:	4798      	blx	r3
   86aa0:	2800      	cmp	r0, #0
   86aa2:	f000 8095 	beq.w	86bd0 <udi_msc_cbw_received+0x578>
					USB_CBW_DIRECTION_IN))
		return;

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
   86aa6:	f241 40d0 	movw	r0, #5328	; 0x14d0
   86aaa:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86aae:	7b40      	ldrb	r0, [r0, #13]
   86ab0:	f241 5128 	movw	r1, #5416	; 0x1528
   86ab4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86ab8:	f245 72f5 	movw	r2, #22517	; 0x57f5
   86abc:	f2c0 0208 	movt	r2, #8
   86ac0:	4790      	blx	r2
   86ac2:	2802      	cmp	r0, #2
   86ac4:	d008      	beq.n	86ad8 <udi_msc_cbw_received+0x480>
   86ac6:	2803      	cmp	r0, #3
   86ac8:	d001      	beq.n	86ace <udi_msc_cbw_received+0x476>
   86aca:	b178      	cbz	r0, 86aec <udi_msc_cbw_received+0x494>
   86acc:	e009      	b.n	86ae2 <udi_msc_cbw_received+0x48a>
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   86ace:	4847      	ldr	r0, [pc, #284]	; (86bec <udi_msc_cbw_received+0x594>)
   86ad0:	4780      	blx	r0
		udi_msc_csw_process();
   86ad2:	4947      	ldr	r1, [pc, #284]	; (86bf0 <udi_msc_cbw_received+0x598>)
   86ad4:	4788      	blx	r1
   86ad6:	bd70      	pop	{r4, r5, r6, pc}
		return;
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   86ad8:	4b46      	ldr	r3, [pc, #280]	; (86bf4 <udi_msc_cbw_received+0x59c>)
   86ada:	4798      	blx	r3
		udi_msc_csw_process();
   86adc:	4a44      	ldr	r2, [pc, #272]	; (86bf0 <udi_msc_cbw_received+0x598>)
   86ade:	4790      	blx	r2
   86ae0:	bd70      	pop	{r4, r5, r6, pc}
		return;
	default:
		udi_msc_sense_fail_hardware();
   86ae2:	4945      	ldr	r1, [pc, #276]	; (86bf8 <udi_msc_cbw_received+0x5a0>)
   86ae4:	4788      	blx	r1
		udi_msc_csw_process();
   86ae6:	4b42      	ldr	r3, [pc, #264]	; (86bf0 <udi_msc_cbw_received+0x598>)
   86ae8:	4798      	blx	r3
   86aea:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
   86aec:	4843      	ldr	r0, [pc, #268]	; (86bfc <udi_msc_cbw_received+0x5a4>)
   86aee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   86af2:	6042      	str	r2, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
   86af4:	6801      	ldr	r1, [r0, #0]
   86af6:	ba0b      	rev	r3, r1
   86af8:	6003      	str	r3, [r0, #0]
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
   86afa:	f04f 0108 	mov.w	r1, #8
   86afe:	4a40      	ldr	r2, [pc, #256]	; (86c00 <udi_msc_cbw_received+0x5a8>)
   86b00:	4790      	blx	r2
   86b02:	bd70      	pop	{r4, r5, r6, pc}
}


static void udi_msc_sbc_start_stop(void)
{
	bool start = 0x1 & udi_msc_cbw.CDB[4];
   86b04:	f241 41d0 	movw	r1, #5328	; 0x14d0
   86b08:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86b0c:	7ccb      	ldrb	r3, [r1, #19]
	bool loej = 0x2 & udi_msc_cbw.CDB[4];
	if (loej) {
   86b0e:	f003 0202 	and.w	r2, r3, #2
   86b12:	b2d1      	uxtb	r1, r2
   86b14:	b141      	cbz	r1, 86b28 <udi_msc_cbw_received+0x4d0>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
   86b16:	f083 0301 	eor.w	r3, r3, #1
   86b1a:	f003 0101 	and.w	r1, r3, #1
   86b1e:	f645 020d 	movw	r2, #22541	; 0x580d
   86b22:	f2c0 0208 	movt	r2, #8
   86b26:	4790      	blx	r2
	}
	udi_msc_sense_pass();
   86b28:	f246 10e9 	movw	r0, #25065	; 0x61e9
   86b2c:	f2c0 0008 	movt	r0, #8
   86b30:	4780      	blx	r0
	udi_msc_csw_process();
   86b32:	f246 3101 	movw	r1, #25345	; 0x6301
   86b36:	f2c0 0108 	movt	r1, #8
   86b3a:	4788      	blx	r1
   86b3c:	bd70      	pop	{r4, r5, r6, pc}
}


static void udi_msc_spc_prevent_allow_medium_removal(void)
{
	uint8_t prevent = udi_msc_cbw.CDB[4];
   86b3e:	f241 40d0 	movw	r0, #5328	; 0x14d0
   86b42:	f2c2 0007 	movt	r0, #8199	; 0x2007
	if (0 == prevent) {
   86b46:	7cc1      	ldrb	r1, [r0, #19]
   86b48:	b929      	cbnz	r1, 86b56 <udi_msc_cbw_received+0x4fe>
		udi_msc_sense_pass();
   86b4a:	f246 12e9 	movw	r2, #25065	; 0x61e9
   86b4e:	f2c0 0208 	movt	r2, #8
   86b52:	4790      	blx	r2
   86b54:	e004      	b.n	86b60 <udi_msc_cbw_received+0x508>
	} else {
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
   86b56:	f246 239d 	movw	r3, #25245	; 0x629d
   86b5a:	f2c0 0308 	movt	r3, #8
   86b5e:	4798      	blx	r3
	}
	udi_msc_csw_process();
   86b60:	f246 3001 	movw	r0, #25345	; 0x6301
   86b64:	f2c0 0008 	movt	r0, #8
   86b68:	4780      	blx	r0
   86b6a:	bd70      	pop	{r4, r5, r6, pc}
		udi_msc_spc_prevent_allow_medium_removal();
		break;

		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
   86b6c:	f246 10e9 	movw	r0, #25065	; 0x61e9
   86b70:	f2c0 0008 	movt	r0, #8
   86b74:	4780      	blx	r0
		udi_msc_csw_process();
   86b76:	f246 3101 	movw	r1, #25345	; 0x6301
   86b7a:	f2c0 0108 	movt	r1, #8
   86b7e:	4788      	blx	r1
		break;
   86b80:	bd70      	pop	{r4, r5, r6, pc}

	case SBC_READ10:
		udi_msc_sbc_trans(true);
   86b82:	f04f 0001 	mov.w	r0, #1
   86b86:	f246 52b5 	movw	r2, #26037	; 0x65b5
   86b8a:	f2c0 0208 	movt	r2, #8
   86b8e:	4790      	blx	r2
		break;
   86b90:	bd70      	pop	{r4, r5, r6, pc}

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
   86b92:	f04f 0000 	mov.w	r0, #0
   86b96:	f246 53b5 	movw	r3, #26037	; 0x65b5
   86b9a:	f2c0 0308 	movt	r3, #8
   86b9e:	4798      	blx	r3
		break;
   86ba0:	bd70      	pop	{r4, r5, r6, pc}
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}

static void udi_msc_sense_command_invalid(void)
{
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
   86ba2:	f04f 0005 	mov.w	r0, #5
   86ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   86baa:	f04f 0200 	mov.w	r2, #0
   86bae:	f246 2305 	movw	r3, #25093	; 0x6205
   86bb2:	f2c0 0308 	movt	r3, #8
   86bb6:	4798      	blx	r3
		udi_msc_sbc_trans(false);
		break;

	default:
		udi_msc_sense_command_invalid();
		udi_msc_csw_process();
   86bb8:	f246 3201 	movw	r2, #25345	; 0x6301
   86bbc:	f2c0 0208 	movt	r2, #8
   86bc0:	4790      	blx	r2
		break;
   86bc2:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
   86bc4:	f04f 0300 	mov.w	r3, #0
   86bc8:	e6ff      	b.n	869ca <udi_msc_cbw_received+0x372>
   86bca:	f04f 0300 	mov.w	r3, #0
   86bce:	e6fc      	b.n	869ca <udi_msc_cbw_received+0x372>
   86bd0:	bd70      	pop	{r4, r5, r6, pc}
   86bd2:	b240      	sxtb	r0, r0
   86bd4:	2800      	cmp	r0, #0
   86bd6:	f43f af0a 	beq.w	869ee <udi_msc_cbw_received+0x396>
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		udi_msc_inquiry_data.product_id[i] = ' ';
   86bda:	18c8      	adds	r0, r1, r3
   86bdc:	7402      	strb	r2, [r0, #16]
		i++;
   86bde:	f103 0301 	add.w	r3, r3, #1
   86be2:	b2db      	uxtb	r3, r3
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   86be4:	2b10      	cmp	r3, #16
   86be6:	f47f af02 	bne.w	869ee <udi_msc_cbw_received+0x396>
   86bea:	e70d      	b.n	86a08 <udi_msc_cbw_received+0x3b0>
   86bec:	0008624d 	.word	0x0008624d
   86bf0:	00086301 	.word	0x00086301
   86bf4:	00086269 	.word	0x00086269
   86bf8:	00086285 	.word	0x00086285
   86bfc:	20071528 	.word	0x20071528
   86c00:	00086391 	.word	0x00086391

00086c04 <udi_msc_setup>:
	UDI_MSC_DISABLE_EXT();
}


bool udi_msc_setup(void)
{
   86c04:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
   86c06:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   86c0a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86c0e:	7818      	ldrb	r0, [r3, #0]
   86c10:	f010 0f80 	tst.w	r0, #128	; 0x80
   86c14:	d025      	beq.n	86c62 <udi_msc_setup+0x5e>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   86c16:	f000 0260 	and.w	r2, r0, #96	; 0x60
   86c1a:	2a20      	cmp	r2, #32
   86c1c:	d156      	bne.n	86ccc <udi_msc_setup+0xc8>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   86c1e:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   86c22:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86c26:	7858      	ldrb	r0, [r3, #1]
   86c28:	28fe      	cmp	r0, #254	; 0xfe
   86c2a:	d152      	bne.n	86cd2 <udi_msc_setup+0xce>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
   86c2c:	f641 41bc 	movw	r1, #7356	; 0x1cbc
   86c30:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86c34:	88ca      	ldrh	r2, [r1, #6]
   86c36:	2a01      	cmp	r2, #1
   86c38:	d14e      	bne.n	86cd8 <udi_msc_setup+0xd4>
					return false;	// Error for USB host
				if (0 != udd_g_ctrlreq.req.wValue)
   86c3a:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   86c3e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86c42:	8858      	ldrh	r0, [r3, #2]
   86c44:	2800      	cmp	r0, #0
   86c46:	d14a      	bne.n	86cde <udi_msc_setup+0xda>
					return false;
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
   86c48:	f641 41bc 	movw	r1, #7356	; 0x1cbc
   86c4c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86c50:	f241 42c8 	movw	r2, #5320	; 0x14c8
   86c54:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86c58:	608a      	str	r2, [r1, #8]
				udd_g_ctrlreq.payload_size = 1;
   86c5a:	f04f 0001 	mov.w	r0, #1
   86c5e:	8188      	strh	r0, [r1, #12]
				return true;
   86c60:	bd10      	pop	{r4, pc}
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   86c62:	f000 0160 	and.w	r1, r0, #96	; 0x60
   86c66:	2920      	cmp	r1, #32
   86c68:	d13c      	bne.n	86ce4 <udi_msc_setup+0xe0>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   86c6a:	f641 42bc 	movw	r2, #7356	; 0x1cbc
   86c6e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86c72:	7853      	ldrb	r3, [r2, #1]
   86c74:	2bff      	cmp	r3, #255	; 0xff
   86c76:	d138      	bne.n	86cea <udi_msc_setup+0xe6>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
   86c78:	f641 40bc 	movw	r0, #7356	; 0x1cbc
   86c7c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86c80:	88c1      	ldrh	r1, [r0, #6]
   86c82:	2900      	cmp	r1, #0
   86c84:	d134      	bne.n	86cf0 <udi_msc_setup+0xec>
					return false;
				if (0 != udd_g_ctrlreq.req.wValue)
   86c86:	f641 42bc 	movw	r2, #7356	; 0x1cbc
   86c8a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86c8e:	8853      	ldrh	r3, [r2, #2]
   86c90:	2b00      	cmp	r3, #0
   86c92:	d130      	bne.n	86cf6 <udi_msc_setup+0xf2>
					return false;
				udi_msc_b_cbw_invalid = false;
   86c94:	f241 44f0 	movw	r4, #5360	; 0x14f0
   86c98:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86c9c:	7023      	strb	r3, [r4, #0]
				udi_msc_b_trans_req = false;
   86c9e:	f241 40cc 	movw	r0, #5324	; 0x14cc
   86ca2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86ca6:	7003      	strb	r3, [r0, #0]
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
   86ca8:	f04f 0002 	mov.w	r0, #2
   86cac:	f649 446d 	movw	r4, #40045	; 0x9c6d
   86cb0:	f2c0 0408 	movt	r4, #8
   86cb4:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
   86cb6:	f04f 0081 	mov.w	r0, #129	; 0x81
   86cba:	47a0      	blx	r4
				// Restart by CBW wait
				udi_msc_cbw_wait();
   86cbc:	f246 31fd 	movw	r1, #25597	; 0x63fd
   86cc0:	f2c0 0108 	movt	r1, #8
   86cc4:	4788      	blx	r1
				return true;
   86cc6:	f04f 0001 	mov.w	r0, #1
   86cca:	bd10      	pop	{r4, pc}
			}
		}
	}
	return false;	// Not supported request
   86ccc:	f04f 0000 	mov.w	r0, #0
   86cd0:	bd10      	pop	{r4, pc}
   86cd2:	f04f 0000 	mov.w	r0, #0
   86cd6:	bd10      	pop	{r4, pc}
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
   86cd8:	f04f 0000 	mov.w	r0, #0
   86cdc:	bd10      	pop	{r4, pc}
				if (0 != udd_g_ctrlreq.req.wValue)
					return false;
   86cde:	f04f 0000 	mov.w	r0, #0
   86ce2:	bd10      	pop	{r4, pc}
				udi_msc_cbw_wait();
				return true;
			}
		}
	}
	return false;	// Not supported request
   86ce4:	f04f 0000 	mov.w	r0, #0
   86ce8:	bd10      	pop	{r4, pc}
   86cea:	f04f 0000 	mov.w	r0, #0
   86cee:	bd10      	pop	{r4, pc}
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
   86cf0:	f04f 0000 	mov.w	r0, #0
   86cf4:	bd10      	pop	{r4, pc}
				if (0 != udd_g_ctrlreq.req.wValue)
					return false;
   86cf6:	f04f 0000 	mov.w	r0, #0
				return true;
			}
		}
	}
	return false;	// Not supported request
}
   86cfa:	bd10      	pop	{r4, pc}

00086cfc <udi_msc_disable>:
	return true;
}


void udi_msc_disable(void)
{
   86cfc:	b508      	push	{r3, lr}
	udi_msc_b_trans_req = false;
   86cfe:	f241 43cc 	movw	r3, #5324	; 0x14cc
   86d02:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86d06:	f04f 0200 	mov.w	r2, #0
   86d0a:	701a      	strb	r2, [r3, #0]
	UDI_MSC_DISABLE_EXT();
   86d0c:	f24a 20b1 	movw	r0, #41649	; 0xa2b1
   86d10:	f2c0 0008 	movt	r0, #8
   86d14:	4780      	blx	r0
   86d16:	bd08      	pop	{r3, pc}

00086d18 <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
   86d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t lun;
	udi_msc_b_trans_req = false;
   86d1a:	f04f 0300 	mov.w	r3, #0
   86d1e:	f241 42cc 	movw	r2, #5324	; 0x14cc
   86d22:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86d26:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
   86d28:	f241 40f0 	movw	r0, #5360	; 0x14f0
   86d2c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86d30:	7003      	strb	r3, [r0, #0]
	udi_msc_nb_lun = get_nb_lun();
   86d32:	f245 71d5 	movw	r1, #22485	; 0x57d5
   86d36:	f2c0 0108 	movt	r1, #8
   86d3a:	4788      	blx	r1
	if (0 == udi_msc_nb_lun)
   86d3c:	b928      	cbnz	r0, 86d4a <udi_msc_enable+0x32>
bool udi_msc_enable(void)
{
	uint8_t lun;
	udi_msc_b_trans_req = false;
	udi_msc_b_cbw_invalid = false;
	udi_msc_nb_lun = get_nb_lun();
   86d3e:	f241 42c8 	movw	r2, #5320	; 0x14c8
   86d42:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86d46:	7010      	strb	r0, [r2, #0]
   86d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (0 == udi_msc_nb_lun)
		return false; // No lun available, then not authorize to enable interface
	udi_msc_nb_lun--;
   86d4a:	f100 30ff 	add.w	r0, r0, #4294967295
   86d4e:	f241 42c8 	movw	r2, #5320	; 0x14c8
   86d52:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86d56:	7010      	strb	r0, [r2, #0]
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
   86d58:	f24a 21a1 	movw	r1, #41633	; 0xa2a1
   86d5c:	f2c0 0108 	movt	r1, #8
   86d60:	4788      	blx	r1
   86d62:	b1d8      	cbz	r0, 86d9c <udi_msc_enable+0x84>
   86d64:	f04f 0400 	mov.w	r4, #0
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
		mem_unload(lun, false);
   86d68:	4627      	mov	r7, r4
   86d6a:	f645 060d 	movw	r6, #22541	; 0x580d
   86d6e:	f2c0 0608 	movt	r6, #8
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
   86d72:	f241 45c8 	movw	r5, #5320	; 0x14c8
   86d76:	f2c2 0507 	movt	r5, #8199	; 0x2007
		mem_unload(lun, false);
   86d7a:	4620      	mov	r0, r4
   86d7c:	4639      	mov	r1, r7
   86d7e:	47b0      	blx	r6
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
   86d80:	f104 0401 	add.w	r4, r4, #1
   86d84:	b2e4      	uxtb	r4, r4
   86d86:	782b      	ldrb	r3, [r5, #0]
   86d88:	42a3      	cmp	r3, r4
   86d8a:	d2f6      	bcs.n	86d7a <udi_msc_enable+0x62>
		mem_unload(lun, false);
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
   86d8c:	f246 30fd 	movw	r0, #25597	; 0x63fd
   86d90:	f2c0 0008 	movt	r0, #8
   86d94:	4780      	blx	r0
	return true;
   86d96:	f04f 0001 	mov.w	r0, #1
   86d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // No lun available, then not authorize to enable interface
	udi_msc_nb_lun--;
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
   86d9c:	f04f 0000 	mov.w	r0, #0
		mem_unload(lun, false);
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
	return true;
}
   86da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86da2:	bf00      	nop

00086da4 <udi_msc_process_trans>:
	UDI_MSC_NOTIFY_TRANS_EXT();
}


bool udi_msc_process_trans(void)
{
   86da4:	b508      	push	{r3, lr}
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
   86da6:	f241 43cc 	movw	r3, #5324	; 0x14cc
   86daa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86dae:	7818      	ldrb	r0, [r3, #0]
   86db0:	2800      	cmp	r0, #0
   86db2:	d059      	beq.n	86e68 <udi_msc_process_trans+0xc4>
		return false;	// No Transfer request to do
	udi_msc_b_trans_req = false;
   86db4:	f241 41cc 	movw	r1, #5324	; 0x14cc
   86db8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86dbc:	f04f 0200 	mov.w	r2, #0
   86dc0:	700a      	strb	r2, [r1, #0]

	// Start transfer
	if (udi_msc_b_read) {
   86dc2:	f241 5324 	movw	r3, #5412	; 0x1524
   86dc6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86dca:	7818      	ldrb	r0, [r3, #0]
   86dcc:	b1a0      	cbz	r0, 86df8 <udi_msc_process_trans+0x54>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
   86dce:	f241 40d0 	movw	r0, #5328	; 0x14d0
   86dd2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86dd6:	7b40      	ldrb	r0, [r0, #13]
   86dd8:	f241 510c 	movw	r1, #5388	; 0x150c
   86ddc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86de0:	6809      	ldr	r1, [r1, #0]
   86de2:	f241 5208 	movw	r2, #5384	; 0x1508
   86de6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86dea:	8812      	ldrh	r2, [r2, #0]
   86dec:	f645 0361 	movw	r3, #22625	; 0x5861
   86df0:	f2c0 0308 	movt	r3, #8
   86df4:	4798      	blx	r3
   86df6:	e013      	b.n	86e20 <udi_msc_process_trans+0x7c>
				udi_msc_nb_block);
	} else {
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
   86df8:	f241 41d0 	movw	r1, #5328	; 0x14d0
   86dfc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86e00:	7b48      	ldrb	r0, [r1, #13]
   86e02:	f241 520c 	movw	r2, #5388	; 0x150c
   86e06:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86e0a:	6811      	ldr	r1, [r2, #0]
   86e0c:	f241 5308 	movw	r3, #5384	; 0x1508
   86e10:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86e14:	881a      	ldrh	r2, [r3, #0]
   86e16:	f645 037d 	movw	r3, #22653	; 0x587d
   86e1a:	f2c0 0308 	movt	r3, #8
   86e1e:	4798      	blx	r3
				udi_msc_nb_block);
	}

	// Check status of transfer
	switch (status) {
   86e20:	2802      	cmp	r0, #2
   86e22:	d00e      	beq.n	86e42 <udi_msc_process_trans+0x9e>
   86e24:	2803      	cmp	r0, #3
   86e26:	d006      	beq.n	86e36 <udi_msc_process_trans+0x92>
   86e28:	b988      	cbnz	r0, 86e4e <udi_msc_process_trans+0xaa>
	case CTRL_GOOD:
		udi_msc_sense_pass();
   86e2a:	f246 11e9 	movw	r1, #25065	; 0x61e9
   86e2e:	f2c0 0108 	movt	r1, #8
   86e32:	4788      	blx	r1
		break;
   86e34:	e010      	b.n	86e58 <udi_msc_process_trans+0xb4>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   86e36:	f246 224d 	movw	r2, #25165	; 0x624d
   86e3a:	f2c0 0208 	movt	r2, #8
   86e3e:	4790      	blx	r2
		break;
   86e40:	e00a      	b.n	86e58 <udi_msc_process_trans+0xb4>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   86e42:	f246 2369 	movw	r3, #25193	; 0x6269
   86e46:	f2c0 0308 	movt	r3, #8
   86e4a:	4798      	blx	r3
		break;
   86e4c:	e004      	b.n	86e58 <udi_msc_process_trans+0xb4>
	default:
	case CTRL_FAIL:
		udi_msc_sense_fail_hardware();
   86e4e:	f246 2085 	movw	r0, #25221	; 0x6285
   86e52:	f2c0 0008 	movt	r0, #8
   86e56:	4780      	blx	r0
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
   86e58:	f246 3001 	movw	r0, #25345	; 0x6301
   86e5c:	f2c0 0008 	movt	r0, #8
   86e60:	4780      	blx	r0
	return true;
   86e62:	f04f 0001 	mov.w	r0, #1
   86e66:	bd08      	pop	{r3, pc}
bool udi_msc_process_trans(void)
{
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
		return false;	// No Transfer request to do
   86e68:	f04f 0000 	mov.w	r0, #0
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
	return true;
}
   86e6c:	bd08      	pop	{r3, pc}
   86e6e:	bf00      	nop

00086e70 <udi_msc_trans_block>:
}


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
   86e70:	b5f0      	push	{r4, r5, r6, r7, lr}
   86e72:	b083      	sub	sp, #12
   86e74:	460f      	mov	r7, r1
   86e76:	4615      	mov	r5, r2
	if (!udi_msc_b_ack_trans)
   86e78:	f240 2414 	movw	r4, #532	; 0x214
   86e7c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86e80:	7824      	ldrb	r4, [r4, #0]
   86e82:	2c00      	cmp	r4, #0
   86e84:	d03d      	beq.n	86f02 <udi_msc_trans_block+0x92>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
   86e86:	f240 2114 	movw	r1, #532	; 0x214
   86e8a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86e8e:	f04f 0600 	mov.w	r6, #0
   86e92:	700e      	strb	r6, [r1, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
   86e94:	42b0      	cmp	r0, r6
   86e96:	bf0c      	ite	eq
   86e98:	2002      	moveq	r0, #2
   86e9a:	2081      	movne	r0, #129	; 0x81
   86e9c:	2b00      	cmp	r3, #0
   86e9e:	d141      	bne.n	86f24 <udi_msc_trans_block+0xb4>
   86ea0:	e035      	b.n	86f0e <udi_msc_trans_block+0x9e>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
   86ea2:	f240 2314 	movw	r3, #532	; 0x214
   86ea6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86eaa:	f04f 0001 	mov.w	r0, #1
   86eae:	7018      	strb	r0, [r3, #0]
		return false;
   86eb0:	f04f 0000 	mov.w	r0, #0
   86eb4:	e040      	b.n	86f38 <udi_msc_trans_block+0xc8>
	}
	if (NULL == callback) {
		while (!udi_msc_b_ack_trans);
   86eb6:	f240 2214 	movw	r2, #532	; 0x214
   86eba:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86ebe:	7810      	ldrb	r0, [r2, #0]
   86ec0:	2800      	cmp	r0, #0
   86ec2:	d0fc      	beq.n	86ebe <udi_msc_trans_block+0x4e>
		if (udi_msc_b_abort_trans) {
   86ec4:	f641 41b9 	movw	r1, #7353	; 0x1cb9
   86ec8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86ecc:	780b      	ldrb	r3, [r1, #0]
   86ece:	b9db      	cbnz	r3, 86f08 <udi_msc_trans_block+0x98>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
   86ed0:	f240 2050 	movw	r0, #592	; 0x250
   86ed4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86ed8:	6882      	ldr	r2, [r0, #8]
   86eda:	1b51      	subs	r1, r2, r5
   86edc:	6081      	str	r1, [r0, #8]
		return (!udi_msc_b_abort_trans);
   86ede:	f641 43b9 	movw	r3, #7353	; 0x1cb9
   86ee2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86ee6:	7818      	ldrb	r0, [r3, #0]
   86ee8:	f080 0001 	eor.w	r0, r0, #1
   86eec:	e024      	b.n	86f38 <udi_msc_trans_block+0xc8>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
   86eee:	f240 2150 	movw	r1, #592	; 0x250
   86ef2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86ef6:	688a      	ldr	r2, [r1, #8]
   86ef8:	1b55      	subs	r5, r2, r5
   86efa:	608d      	str	r5, [r1, #8]
	return true;
   86efc:	f04f 0001 	mov.w	r0, #1
   86f00:	e01a      	b.n	86f38 <udi_msc_trans_block+0xc8>

bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
	if (!udi_msc_b_ack_trans)
		return false;	// No possible, transfer on going
   86f02:	f04f 0000 	mov.w	r0, #0
   86f06:	e017      	b.n	86f38 <udi_msc_trans_block+0xc8>
		return false;
	}
	if (NULL == callback) {
		while (!udi_msc_b_ack_trans);
		if (udi_msc_b_abort_trans) {
			return false;
   86f08:	f04f 0000 	mov.w	r0, #0
   86f0c:	e014      	b.n	86f38 <udi_msc_trans_block+0xc8>
	if (!udi_msc_b_ack_trans)
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
   86f0e:	4b0b      	ldr	r3, [pc, #44]	; (86f3c <udi_msc_trans_block+0xcc>)
   86f10:	9300      	str	r3, [sp, #0]
   86f12:	f04f 0100 	mov.w	r1, #0
   86f16:	463a      	mov	r2, r7
   86f18:	462b      	mov	r3, r5
   86f1a:	4c09      	ldr	r4, [pc, #36]	; (86f40 <udi_msc_trans_block+0xd0>)
   86f1c:	47a0      	blx	r4
   86f1e:	2800      	cmp	r0, #0
   86f20:	d1c9      	bne.n	86eb6 <udi_msc_trans_block+0x46>
   86f22:	e7be      	b.n	86ea2 <udi_msc_trans_block+0x32>
   86f24:	9300      	str	r3, [sp, #0]
   86f26:	f04f 0100 	mov.w	r1, #0
   86f2a:	463a      	mov	r2, r7
   86f2c:	462b      	mov	r3, r5
   86f2e:	4c04      	ldr	r4, [pc, #16]	; (86f40 <udi_msc_trans_block+0xd0>)
   86f30:	47a0      	blx	r4
   86f32:	2800      	cmp	r0, #0
   86f34:	d1db      	bne.n	86eee <udi_msc_trans_block+0x7e>
   86f36:	e7b4      	b.n	86ea2 <udi_msc_trans_block+0x32>
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
	return true;
}
   86f38:	b003      	add	sp, #12
   86f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86f3c:	00086199 	.word	0x00086199
   86f40:	00089665 	.word	0x00089665

00086f44 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   86f44:	f241 5334 	movw	r3, #5428	; 0x1534
   86f48:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86f4c:	6818      	ldr	r0, [r3, #0]
   86f4e:	6801      	ldr	r1, [r0, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   86f50:	884a      	ldrh	r2, [r1, #2]
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
   86f52:	1888      	adds	r0, r1, r2
   86f54:	4770      	bx	lr
   86f56:	bf00      	nop

00086f58 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   86f58:	b538      	push	{r3, r4, r5, lr}
   86f5a:	4605      	mov	r5, r0
   86f5c:	460c      	mov	r4, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   86f5e:	f646 7345 	movw	r3, #28485	; 0x6f45
   86f62:	f2c0 0308 	movt	r3, #8
   86f66:	4798      	blx	r3
   86f68:	4602      	mov	r2, r0
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   86f6a:	7828      	ldrb	r0, [r5, #0]
   86f6c:	1828      	adds	r0, r5, r0
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   86f6e:	4282      	cmp	r2, r0
   86f70:	d911      	bls.n	86f96 <udc_next_desc_in_iface+0x3e>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   86f72:	7841      	ldrb	r1, [r0, #1]
   86f74:	2904      	cmp	r1, #4
   86f76:	d011      	beq.n	86f9c <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   86f78:	42a1      	cmp	r1, r4
   86f7a:	d105      	bne.n	86f88 <udc_next_desc_in_iface+0x30>
   86f7c:	bd38      	pop	{r3, r4, r5, pc}
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   86f7e:	7841      	ldrb	r1, [r0, #1]
   86f80:	2904      	cmp	r1, #4
   86f82:	d00e      	beq.n	86fa2 <udc_next_desc_in_iface+0x4a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   86f84:	42a1      	cmp	r1, r4
   86f86:	d00e      	beq.n	86fa6 <udc_next_desc_in_iface+0x4e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   86f88:	7803      	ldrb	r3, [r0, #0]
   86f8a:	18c0      	adds	r0, r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   86f8c:	4282      	cmp	r2, r0
   86f8e:	d8f6      	bhi.n	86f7e <udc_next_desc_in_iface+0x26>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
   86f90:	f04f 0000 	mov.w	r0, #0
   86f94:	bd38      	pop	{r3, r4, r5, pc}
   86f96:	f04f 0000 	mov.w	r0, #0
   86f9a:	bd38      	pop	{r3, r4, r5, pc}
   86f9c:	f04f 0000 	mov.w	r0, #0
   86fa0:	bd38      	pop	{r3, r4, r5, pc}
   86fa2:	f04f 0000 	mov.w	r0, #0
}
   86fa6:	bd38      	pop	{r3, r4, r5, pc}

00086fa8 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   86fa8:	b570      	push	{r4, r5, r6, lr}
   86faa:	4605      	mov	r5, r0
   86fac:	460e      	mov	r6, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   86fae:	f241 533a 	movw	r3, #5434	; 0x153a
   86fb2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86fb6:	7818      	ldrb	r0, [r3, #0]
   86fb8:	2800      	cmp	r0, #0
   86fba:	d031      	beq.n	87020 <udc_update_iface_desc+0x78>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   86fbc:	f241 5134 	movw	r1, #5428	; 0x1534
   86fc0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86fc4:	680a      	ldr	r2, [r1, #0]
   86fc6:	6814      	ldr	r4, [r2, #0]
   86fc8:	7923      	ldrb	r3, [r4, #4]
   86fca:	42ab      	cmp	r3, r5
   86fcc:	d92b      	bls.n	87026 <udc_update_iface_desc+0x7e>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   86fce:	f241 503c 	movw	r0, #5436	; 0x153c
   86fd2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86fd6:	6004      	str	r4, [r0, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   86fd8:	f646 7145 	movw	r1, #28485	; 0x6f45
   86fdc:	f2c0 0108 	movt	r1, #8
   86fe0:	4788      	blx	r1
	while (ptr_end_desc >
   86fe2:	4284      	cmp	r4, r0
   86fe4:	d222      	bcs.n	8702c <udc_update_iface_desc+0x84>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   86fe6:	7862      	ldrb	r2, [r4, #1]
   86fe8:	2a04      	cmp	r2, #4
   86fea:	d10d      	bne.n	87008 <udc_update_iface_desc+0x60>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   86fec:	78a3      	ldrb	r3, [r4, #2]
   86fee:	42ab      	cmp	r3, r5
   86ff0:	d10a      	bne.n	87008 <udc_update_iface_desc+0x60>
   86ff2:	78e1      	ldrb	r1, [r4, #3]
   86ff4:	42b1      	cmp	r1, r6
   86ff6:	d107      	bne.n	87008 <udc_update_iface_desc+0x60>
   86ff8:	f241 533c 	movw	r3, #5436	; 0x153c
   86ffc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87000:	601c      	str	r4, [r3, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
   87002:	f04f 0001 	mov.w	r0, #1
   87006:	bd70      	pop	{r4, r5, r6, pc}
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   87008:	7822      	ldrb	r2, [r4, #0]
   8700a:	18a4      	adds	r4, r4, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
   8700c:	42a0      	cmp	r0, r4
   8700e:	d8ea      	bhi.n	86fe6 <udc_update_iface_desc+0x3e>
   87010:	f241 503c 	movw	r0, #5436	; 0x153c
   87014:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87018:	6004      	str	r4, [r0, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   8701a:	f04f 0000 	mov.w	r0, #0
   8701e:	bd70      	pop	{r4, r5, r6, pc}
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
   87020:	f04f 0000 	mov.w	r0, #0
   87024:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   87026:	f04f 0000 	mov.w	r0, #0
   8702a:	bd70      	pop	{r4, r5, r6, pc}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   8702c:	f04f 0000 	mov.w	r0, #0
}
   87030:	bd70      	pop	{r4, r5, r6, pc}
   87032:	bf00      	nop

00087034 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   87034:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   87036:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   8703a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8703e:	8858      	ldrh	r0, [r3, #2]
   87040:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   87044:	f249 315d 	movw	r1, #37725	; 0x935d
   87048:	f2c0 0108 	movt	r1, #8
   8704c:	4788      	blx	r1
   8704e:	bd08      	pop	{r3, pc}

00087050 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   87050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87054:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   87056:	f646 73a9 	movw	r3, #28585	; 0x6fa9
   8705a:	f2c0 0308 	movt	r3, #8
   8705e:	4798      	blx	r3
   87060:	b338      	cbz	r0, 870b2 <udc_iface_enable+0x62>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   87062:	f241 503c 	movw	r0, #5436	; 0x153c
   87066:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8706a:	6804      	ldr	r4, [r0, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   8706c:	f04f 0605 	mov.w	r6, #5
   87070:	f646 7559 	movw	r5, #28505	; 0x6f59
   87074:	f2c0 0508 	movt	r5, #8
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   87078:	f249 7769 	movw	r7, #38761	; 0x9769
   8707c:	f2c0 0708 	movt	r7, #8

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   87080:	4620      	mov	r0, r4
   87082:	4631      	mov	r1, r6
   87084:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   87086:	4604      	mov	r4, r0
   87088:	b138      	cbz	r0, 8709a <udc_iface_enable+0x4a>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   8708a:	7880      	ldrb	r0, [r0, #2]
   8708c:	78e1      	ldrb	r1, [r4, #3]
   8708e:	88a2      	ldrh	r2, [r4, #4]
   87090:	47b8      	blx	r7
   87092:	2800      	cmp	r0, #0
   87094:	d1f4      	bne.n	87080 <udc_iface_enable+0x30>
   87096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   8709a:	f241 5134 	movw	r1, #5428	; 0x1534
   8709e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   870a2:	680a      	ldr	r2, [r1, #0]
   870a4:	6853      	ldr	r3, [r2, #4]
   870a6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
   870aa:	6801      	ldr	r1, [r0, #0]
   870ac:	4788      	blx	r1
   870ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
		return false;
   870b2:	f04f 0000 	mov.w	r0, #0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
   870b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   870ba:	bf00      	nop

000870bc <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   870bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   870c0:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   870c2:	f04f 0100 	mov.w	r1, #0
   870c6:	f646 73a9 	movw	r3, #28585	; 0x6fa9
   870ca:	f2c0 0308 	movt	r3, #8
   870ce:	4798      	blx	r3
   870d0:	2800      	cmp	r0, #0
   870d2:	d030      	beq.n	87136 <udc_iface_disable+0x7a>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   870d4:	f241 5034 	movw	r0, #5428	; 0x1534
   870d8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   870dc:	6801      	ldr	r1, [r0, #0]
   870de:	684a      	ldr	r2, [r1, #4]
   870e0:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   870e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
   870e8:	4798      	blx	r3
   870ea:	4601      	mov	r1, r0
   870ec:	4620      	mov	r0, r4
   870ee:	f646 72a9 	movw	r2, #28585	; 0x6fa9
   870f2:	f2c0 0208 	movt	r2, #8
   870f6:	4790      	blx	r2
   870f8:	b308      	cbz	r0, 8713e <udc_iface_disable+0x82>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   870fa:	f241 543c 	movw	r4, #5436	; 0x153c
   870fe:	f2c2 0407 	movt	r4, #8199	; 0x2007
   87102:	6824      	ldr	r4, [r4, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   87104:	f04f 0605 	mov.w	r6, #5
   87108:	f646 7559 	movw	r5, #28505	; 0x6f59
   8710c:	f2c0 0508 	movt	r5, #8
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   87110:	f249 37cd 	movw	r7, #37837	; 0x93cd
   87114:	f2c0 0708 	movt	r7, #8
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   87118:	4620      	mov	r0, r4
   8711a:	4631      	mov	r1, r6
   8711c:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   8711e:	4604      	mov	r4, r0
   87120:	b110      	cbz	r0, 87128 <udc_iface_disable+0x6c>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   87122:	7880      	ldrb	r0, [r0, #2]
   87124:	47b8      	blx	r7
		}
   87126:	e7f7      	b.n	87118 <udc_iface_disable+0x5c>
	}
#endif

	// Disable interface
	udi_api->disable();
   87128:	f8d8 0004 	ldr.w	r0, [r8, #4]
   8712c:	4780      	blx	r0
	return true;
   8712e:	f04f 0001 	mov.w	r0, #1
   87132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
   87136:	f04f 0000 	mov.w	r0, #0
   8713a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
		return false;
   8713e:	f04f 0000 	mov.w	r0, #0
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
   87142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87146:	bf00      	nop

00087148 <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   87148:	b508      	push	{r3, lr}
	udd_enable();
   8714a:	f248 5305 	movw	r3, #34053	; 0x8505
   8714e:	f2c0 0308 	movt	r3, #8
   87152:	4798      	blx	r3
   87154:	bd08      	pop	{r3, pc}
   87156:	bf00      	nop

00087158 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   87158:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   8715a:	f241 533a 	movw	r3, #5434	; 0x153a
   8715e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87162:	7818      	ldrb	r0, [r3, #0]
   87164:	b1d8      	cbz	r0, 8719e <udc_reset+0x46>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   87166:	f241 5134 	movw	r1, #5428	; 0x1534
   8716a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8716e:	680a      	ldr	r2, [r1, #0]
   87170:	6813      	ldr	r3, [r2, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   87172:	7918      	ldrb	r0, [r3, #4]
   87174:	b198      	cbz	r0, 8719e <udc_reset+0x46>
   87176:	f04f 0400 	mov.w	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   8717a:	f247 06bd 	movw	r6, #28861	; 0x70bd
   8717e:	f2c0 0608 	movt	r6, #8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   87182:	f241 5534 	movw	r5, #5428	; 0x1534
   87186:	f2c2 0507 	movt	r5, #8199	; 0x2007
				iface_num++) {
			udc_iface_disable(iface_num);
   8718a:	4620      	mov	r0, r4
   8718c:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   8718e:	f104 0401 	add.w	r4, r4, #1
   87192:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   87194:	6829      	ldr	r1, [r5, #0]
   87196:	680a      	ldr	r2, [r1, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   87198:	7913      	ldrb	r3, [r2, #4]
   8719a:	42a3      	cmp	r3, r4
   8719c:	d8f5      	bhi.n	8718a <udc_reset+0x32>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
   8719e:	f241 503a 	movw	r0, #5434	; 0x153a
   871a2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   871a6:	f04f 0100 	mov.w	r1, #0
   871aa:	7001      	strb	r1, [r0, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   871ac:	f241 5338 	movw	r3, #5432	; 0x1538
   871b0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   871b4:	f04f 0201 	mov.w	r2, #1
   871b8:	801a      	strh	r2, [r3, #0]
   871ba:	bd70      	pop	{r4, r5, r6, pc}

000871bc <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
   871bc:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   871be:	f241 533a 	movw	r3, #5434	; 0x153a
   871c2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   871c6:	7818      	ldrb	r0, [r3, #0]
   871c8:	b1d8      	cbz	r0, 87202 <udc_sof_notify+0x46>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   871ca:	f241 5134 	movw	r1, #5428	; 0x1534
   871ce:	f2c2 0107 	movt	r1, #8199	; 0x2007
   871d2:	680b      	ldr	r3, [r1, #0]
   871d4:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   871d6:	7910      	ldrb	r0, [r2, #4]
   871d8:	b198      	cbz	r0, 87202 <udc_sof_notify+0x46>
   871da:	f04f 0400 	mov.w	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   871de:	f241 5534 	movw	r5, #5428	; 0x1534
   871e2:	f2c2 0507 	movt	r5, #8199	; 0x2007
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   871e6:	685b      	ldr	r3, [r3, #4]
   871e8:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   871ec:	690a      	ldr	r2, [r1, #16]
   871ee:	b102      	cbz	r2, 871f2 <udc_sof_notify+0x36>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   871f0:	4790      	blx	r2
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   871f2:	f104 0401 	add.w	r4, r4, #1
   871f6:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   871f8:	682b      	ldr	r3, [r5, #0]
   871fa:	6818      	ldr	r0, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   871fc:	7901      	ldrb	r1, [r0, #4]
   871fe:	42a1      	cmp	r1, r4
   87200:	d8f1      	bhi.n	871e6 <udc_sof_notify+0x2a>
   87202:	bd38      	pop	{r3, r4, r5, pc}

00087204 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   87204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   87206:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   8720a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8720e:	f04f 0200 	mov.w	r2, #0
   87212:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   87214:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   87216:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   87218:	7818      	ldrb	r0, [r3, #0]
   8721a:	f010 0f80 	tst.w	r0, #128	; 0x80
   8721e:	f000 83da 	beq.w	879d6 <udc_process_setup+0x7d2>
		if (udd_g_ctrlreq.req.wLength == 0) {
   87222:	f641 41bc 	movw	r1, #7356	; 0x1cbc
   87226:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8722a:	88ca      	ldrh	r2, [r1, #6]
   8722c:	2a00      	cmp	r2, #0
   8722e:	f040 83d7 	bne.w	879e0 <udc_process_setup+0x7dc>
   87232:	e3c4      	b.n	879be <udc_process_setup+0x7ba>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   87234:	f010 031f 	ands.w	r3, r0, #31
   87238:	f040 8115 	bne.w	87466 <udc_process_setup+0x262>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   8723c:	f641 40bc 	movw	r0, #7356	; 0x1cbc
   87240:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87244:	7841      	ldrb	r1, [r0, #1]
   87246:	2906      	cmp	r1, #6
   87248:	d018      	beq.n	8727c <udc_process_setup+0x78>
   8724a:	2908      	cmp	r1, #8
   8724c:	f000 80f8 	beq.w	87440 <udc_process_setup+0x23c>
   87250:	2900      	cmp	r1, #0
   87252:	f040 8108 	bne.w	87466 <udc_process_setup+0x262>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   87256:	2a02      	cmp	r2, #2
   87258:	d10d      	bne.n	87276 <udc_process_setup+0x72>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   8725a:	f241 5038 	movw	r0, #5432	; 0x1538
   8725e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87262:	f04f 0102 	mov.w	r1, #2
   87266:	f249 33bd 	movw	r3, #37821	; 0x93bd
   8726a:	f2c0 0308 	movt	r3, #8
   8726e:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   87270:	f04f 0001 	mov.w	r0, #1
   87274:	e328      	b.n	878c8 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
   87276:	f04f 0000 	mov.w	r0, #0
   8727a:	e325      	b.n	878c8 <udc_process_setup+0x6c4>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   8727c:	f641 44bc 	movw	r4, #7356	; 0x1cbc
   87280:	f2c2 0407 	movt	r4, #8199	; 0x2007
   87284:	8860      	ldrh	r0, [r4, #2]
   87286:	b2c4      	uxtb	r4, r0

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   87288:	ea4f 2110 	mov.w	r1, r0, lsr #8
   8728c:	f101 33ff 	add.w	r3, r1, #4294967295
   87290:	2b06      	cmp	r3, #6
   87292:	f200 80c3 	bhi.w	8741c <udc_process_setup+0x218>
   87296:	e8df f013 	tbh	[pc, r3, lsl #1]
   8729a:	0007      	.short	0x0007
   8729c:	0078001b 	.word	0x0078001b
   872a0:	00c100c1 	.word	0x00c100c1
   872a4:	00510044 	.word	0x00510044
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   872a8:	f249 3245 	movw	r2, #37701	; 0x9345
   872ac:	f2c0 0208 	movt	r2, #8
   872b0:	4790      	blx	r2
   872b2:	b930      	cbnz	r0, 872c2 <udc_process_setup+0xbe>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
   872b4:	48a3      	ldr	r0, [pc, #652]	; (87544 <udc_process_setup+0x340>)
   872b6:	6883      	ldr	r3, [r0, #8]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
			udd_set_setup_payload(
   872b8:	4618      	mov	r0, r3
   872ba:	7819      	ldrb	r1, [r3, #0]
   872bc:	4aa2      	ldr	r2, [pc, #648]	; (87548 <udc_process_setup+0x344>)
   872be:	4790      	blx	r2
   872c0:	e09c      	b.n	873fc <udc_process_setup+0x1f8>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
   872c2:	4ba0      	ldr	r3, [pc, #640]	; (87544 <udc_process_setup+0x340>)
   872c4:	6819      	ldr	r1, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
   872c6:	4608      	mov	r0, r1
   872c8:	7809      	ldrb	r1, [r1, #0]
   872ca:	4a9f      	ldr	r2, [pc, #636]	; (87548 <udc_process_setup+0x344>)
   872cc:	4790      	blx	r2
   872ce:	e095      	b.n	873fc <udc_process_setup+0x1f8>
		break;

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   872d0:	f249 3145 	movw	r1, #37701	; 0x9345
   872d4:	f2c0 0108 	movt	r1, #8
   872d8:	4788      	blx	r1
   872da:	b170      	cbz	r0, 872fa <udc_process_setup+0xf6>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   872dc:	4899      	ldr	r0, [pc, #612]	; (87544 <udc_process_setup+0x340>)
   872de:	6881      	ldr	r1, [r0, #8]
   872e0:	7c4a      	ldrb	r2, [r1, #17]
   872e2:	42a2      	cmp	r2, r4
   872e4:	f240 809d 	bls.w	87422 <udc_process_setup+0x21e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   872e8:	4b96      	ldr	r3, [pc, #600]	; (87544 <udc_process_setup+0x340>)
   872ea:	6918      	ldr	r0, [r3, #16]
   872ec:	f850 1034 	ldr.w	r1, [r0, r4, lsl #3]
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   872f0:	4608      	mov	r0, r1
   872f2:	8849      	ldrh	r1, [r1, #2]
   872f4:	4a94      	ldr	r2, [pc, #592]	; (87548 <udc_process_setup+0x344>)
   872f6:	4790      	blx	r2
   872f8:	e00d      	b.n	87316 <udc_process_setup+0x112>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   872fa:	4b92      	ldr	r3, [pc, #584]	; (87544 <udc_process_setup+0x340>)
   872fc:	681a      	ldr	r2, [r3, #0]
   872fe:	7c50      	ldrb	r0, [r2, #17]
   87300:	42a0      	cmp	r0, r4
   87302:	f240 8091 	bls.w	87428 <udc_process_setup+0x224>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   87306:	498f      	ldr	r1, [pc, #572]	; (87544 <udc_process_setup+0x340>)
   87308:	684b      	ldr	r3, [r1, #4]
   8730a:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   8730e:	4610      	mov	r0, r2
   87310:	8851      	ldrh	r1, [r2, #2]
   87312:	4b8d      	ldr	r3, [pc, #564]	; (87548 <udc_process_setup+0x344>)
   87314:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   87316:	4b8d      	ldr	r3, [pc, #564]	; (8754c <udc_process_setup+0x348>)
   87318:	6898      	ldr	r0, [r3, #8]
   8731a:	f04f 0102 	mov.w	r1, #2
   8731e:	7041      	strb	r1, [r0, #1]
   87320:	e06c      	b.n	873fc <udc_process_setup+0x1f8>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
				udc_config.qualifier->bLength);
   87322:	f240 1370 	movw	r3, #368	; 0x170
   87326:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8732a:	68d9      	ldr	r1, [r3, #12]
		break;

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   8732c:	4608      	mov	r0, r1
   8732e:	7809      	ldrb	r1, [r1, #0]
   87330:	f249 32bd 	movw	r2, #37821	; 0x93bd
   87334:	f2c0 0208 	movt	r2, #8
   87338:	4790      	blx	r2
   8733a:	e05f      	b.n	873fc <udc_process_setup+0x1f8>
				udc_config.qualifier->bLength);
		break;

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   8733c:	f249 3245 	movw	r2, #37701	; 0x9345
   87340:	f2c0 0208 	movt	r2, #8
   87344:	4790      	blx	r2
   87346:	b968      	cbnz	r0, 87364 <udc_process_setup+0x160>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   87348:	4a7e      	ldr	r2, [pc, #504]	; (87544 <udc_process_setup+0x340>)
   8734a:	6890      	ldr	r0, [r2, #8]
   8734c:	7c41      	ldrb	r1, [r0, #17]
   8734e:	42a1      	cmp	r1, r4
   87350:	d96d      	bls.n	8742e <udc_process_setup+0x22a>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   87352:	4b7c      	ldr	r3, [pc, #496]	; (87544 <udc_process_setup+0x340>)
   87354:	691a      	ldr	r2, [r3, #16]
   87356:	f852 1034 	ldr.w	r1, [r2, r4, lsl #3]
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   8735a:	4608      	mov	r0, r1
   8735c:	8849      	ldrh	r1, [r1, #2]
   8735e:	4b7a      	ldr	r3, [pc, #488]	; (87548 <udc_process_setup+0x344>)
   87360:	4798      	blx	r3
   87362:	e00c      	b.n	8737e <udc_process_setup+0x17a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   87364:	4877      	ldr	r0, [pc, #476]	; (87544 <udc_process_setup+0x340>)
   87366:	6801      	ldr	r1, [r0, #0]
   87368:	7c4b      	ldrb	r3, [r1, #17]
   8736a:	42a3      	cmp	r3, r4
   8736c:	d962      	bls.n	87434 <udc_process_setup+0x230>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   8736e:	4a75      	ldr	r2, [pc, #468]	; (87544 <udc_process_setup+0x340>)
   87370:	6850      	ldr	r0, [r2, #4]
   87372:	f850 1034 	ldr.w	r1, [r0, r4, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   87376:	4608      	mov	r0, r1
   87378:	8849      	ldrh	r1, [r1, #2]
   8737a:	4b73      	ldr	r3, [pc, #460]	; (87548 <udc_process_setup+0x344>)
   8737c:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   8737e:	4873      	ldr	r0, [pc, #460]	; (8754c <udc_process_setup+0x348>)
   87380:	6881      	ldr	r1, [r0, #8]
   87382:	f04f 0207 	mov.w	r2, #7
   87386:	704a      	strb	r2, [r1, #1]
   87388:	e038      	b.n	873fc <udc_process_setup+0x1f8>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   8738a:	b2c0      	uxtb	r0, r0
   8738c:	2803      	cmp	r0, #3
   8738e:	d80b      	bhi.n	873a8 <udc_process_setup+0x1a4>
   87390:	e8df f010 	tbh	[pc, r0, lsl #1]
   87394:	000e0004 	.word	0x000e0004
   87398:	032f032b 	.word	0x032f032b
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   8739c:	486c      	ldr	r0, [pc, #432]	; (87550 <udc_process_setup+0x34c>)
   8739e:	f04f 0104 	mov.w	r1, #4
   873a2:	4a69      	ldr	r2, [pc, #420]	; (87548 <udc_process_setup+0x344>)
   873a4:	4790      	blx	r2
   873a6:	e029      	b.n	873fc <udc_process_setup+0x1f8>
		str = udc_get_string_serial_name();
		break;
#endif
	default:
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
   873a8:	486a      	ldr	r0, [pc, #424]	; (87554 <udc_process_setup+0x350>)
   873aa:	4780      	blx	r0
   873ac:	bb30      	cbnz	r0, 873fc <udc_process_setup+0x1f8>
   873ae:	e28b      	b.n	878c8 <udc_process_setup+0x6c4>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
   873b0:	4969      	ldr	r1, [pc, #420]	; (87558 <udc_process_setup+0x354>)
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   873b2:	f04f 0008 	mov.w	r0, #8
   873b6:	f04f 0300 	mov.w	r3, #0
   873ba:	4a68      	ldr	r2, [pc, #416]	; (8755c <udc_process_setup+0x358>)
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   873bc:	5ccc      	ldrb	r4, [r1, r3]
   873be:	f822 4f02 	strh.w	r4, [r2, #2]!
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   873c2:	f103 0301 	add.w	r3, r3, #1
   873c6:	2801      	cmp	r0, #1
   873c8:	f200 8317 	bhi.w	879fa <udc_process_setup+0x7f6>
   873cc:	e00e      	b.n	873ec <udc_process_setup+0x1e8>
   873ce:	f102 0402 	add.w	r4, r2, #2
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   873d2:	5ccd      	ldrb	r5, [r1, r3]
   873d4:	8055      	strh	r5, [r2, #2]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   873d6:	f103 0301 	add.w	r3, r3, #1
   873da:	f102 0204 	add.w	r2, r2, #4
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   873de:	5ccd      	ldrb	r5, [r1, r3]
   873e0:	8065      	strh	r5, [r4, #2]
   873e2:	f103 0301 	add.w	r3, r3, #1
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   873e6:	b2dc      	uxtb	r4, r3
   873e8:	4284      	cmp	r4, r0
   873ea:	d3f0      	bcc.n	873ce <udc_process_setup+0x1ca>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   873ec:	ea4f 0140 	mov.w	r1, r0, lsl #1
   873f0:	f101 0102 	add.w	r1, r1, #2
   873f4:	4859      	ldr	r0, [pc, #356]	; (8755c <udc_process_setup+0x358>)
   873f6:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   873f8:	4b53      	ldr	r3, [pc, #332]	; (87548 <udc_process_setup+0x344>)
   873fa:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   873fc:	f641 41bc 	movw	r1, #7356	; 0x1cbc
   87400:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87404:	88c8      	ldrh	r0, [r1, #6]
   87406:	898b      	ldrh	r3, [r1, #12]
   87408:	4283      	cmp	r3, r0
   8740a:	d916      	bls.n	8743a <udc_process_setup+0x236>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   8740c:	f641 42bc 	movw	r2, #7356	; 0x1cbc
   87410:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87414:	8190      	strh	r0, [r2, #12]
	}
	return true;
   87416:	f04f 0001 	mov.w	r0, #1
   8741a:	e255      	b.n	878c8 <udc_process_setup+0x6c4>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   8741c:	f04f 0000 	mov.w	r0, #0
   87420:	e252      	b.n	878c8 <udc_process_setup+0x6c4>
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
   87422:	f04f 0000 	mov.w	r0, #0
   87426:	e24f      	b.n	878c8 <udc_process_setup+0x6c4>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
   87428:	f04f 0000 	mov.w	r0, #0
   8742c:	e24c      	b.n	878c8 <udc_process_setup+0x6c4>
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
   8742e:	f04f 0000 	mov.w	r0, #0
   87432:	e249      	b.n	878c8 <udc_process_setup+0x6c4>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
   87434:	f04f 0000 	mov.w	r0, #0
   87438:	e246      	b.n	878c8 <udc_process_setup+0x6c4>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
   8743a:	f04f 0001 	mov.w	r0, #1
   8743e:	e243      	b.n	878c8 <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
   87440:	2a01      	cmp	r2, #1
   87442:	d10d      	bne.n	87460 <udc_process_setup+0x25c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   87444:	f241 503a 	movw	r0, #5434	; 0x153a
   87448:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8744c:	f04f 0101 	mov.w	r1, #1
   87450:	f249 32bd 	movw	r2, #37821	; 0x93bd
   87454:	f2c0 0208 	movt	r2, #8
   87458:	4790      	blx	r2
	return true;
   8745a:	f04f 0001 	mov.w	r0, #1
   8745e:	e233      	b.n	878c8 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
   87460:	f04f 0000 	mov.w	r0, #0
   87464:	e230      	b.n	878c8 <udc_process_setup+0x6c4>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   87466:	2b01      	cmp	r3, #1
   87468:	d134      	bne.n	874d4 <udc_process_setup+0x2d0>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   8746a:	f641 40bc 	movw	r0, #7356	; 0x1cbc
   8746e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87472:	7841      	ldrb	r1, [r0, #1]
   87474:	290a      	cmp	r1, #10
   87476:	d12d      	bne.n	874d4 <udc_process_setup+0x2d0>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   87478:	2a01      	cmp	r2, #1
   8747a:	d11f      	bne.n	874bc <udc_process_setup+0x2b8>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   8747c:	4838      	ldr	r0, [pc, #224]	; (87560 <udc_process_setup+0x35c>)
   8747e:	7801      	ldrb	r1, [r0, #0]
   87480:	b1f9      	cbz	r1, 874c2 <udc_process_setup+0x2be>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   87482:	4c32      	ldr	r4, [pc, #200]	; (8754c <udc_process_setup+0x348>)
   87484:	7924      	ldrb	r4, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   87486:	4d37      	ldr	r5, [pc, #220]	; (87564 <udc_process_setup+0x360>)
   87488:	682d      	ldr	r5, [r5, #0]
   8748a:	682b      	ldr	r3, [r5, #0]
   8748c:	791a      	ldrb	r2, [r3, #4]
   8748e:	42a2      	cmp	r2, r4
   87490:	d91a      	bls.n	874c8 <udc_process_setup+0x2c4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   87492:	4620      	mov	r0, r4
   87494:	f04f 0100 	mov.w	r1, #0
   87498:	4b33      	ldr	r3, [pc, #204]	; (87568 <udc_process_setup+0x364>)
   8749a:	4798      	blx	r3
   8749c:	b1b8      	cbz	r0, 874ce <udc_process_setup+0x2ca>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8749e:	6868      	ldr	r0, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   874a0:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
   874a4:	68ca      	ldr	r2, [r1, #12]
   874a6:	4790      	blx	r2
   874a8:	4b30      	ldr	r3, [pc, #192]	; (8756c <udc_process_setup+0x368>)
   874aa:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   874ac:	4618      	mov	r0, r3
   874ae:	f04f 0101 	mov.w	r1, #1
   874b2:	4a25      	ldr	r2, [pc, #148]	; (87548 <udc_process_setup+0x344>)
   874b4:	4790      	blx	r2
	return true;
   874b6:	f04f 0001 	mov.w	r0, #1
   874ba:	e205      	b.n	878c8 <udc_process_setup+0x6c4>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
   874bc:	f04f 0000 	mov.w	r0, #0
   874c0:	e202      	b.n	878c8 <udc_process_setup+0x6c4>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
   874c2:	f04f 0000 	mov.w	r0, #0
   874c6:	e1ff      	b.n	878c8 <udc_process_setup+0x6c4>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   874c8:	f04f 0000 	mov.w	r0, #0
   874cc:	e1fc      	b.n	878c8 <udc_process_setup+0x6c4>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
   874ce:	f04f 0000 	mov.w	r0, #0
   874d2:	e1f9      	b.n	878c8 <udc_process_setup+0x6c4>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   874d4:	2b02      	cmp	r3, #2
   874d6:	f040 81f9 	bne.w	878cc <udc_process_setup+0x6c8>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   874da:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   874de:	f2c2 0307 	movt	r3, #8199	; 0x2007
   874e2:	7858      	ldrb	r0, [r3, #1]
   874e4:	2800      	cmp	r0, #0
   874e6:	f040 81d5 	bne.w	87894 <udc_process_setup+0x690>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   874ea:	2a02      	cmp	r2, #2
   874ec:	d10d      	bne.n	8750a <udc_process_setup+0x306>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   874ee:	4a17      	ldr	r2, [pc, #92]	; (8754c <udc_process_setup+0x348>)
   874f0:	7910      	ldrb	r0, [r2, #4]
   874f2:	491f      	ldr	r1, [pc, #124]	; (87570 <udc_process_setup+0x36c>)
   874f4:	4788      	blx	r1
   874f6:	4b1f      	ldr	r3, [pc, #124]	; (87574 <udc_process_setup+0x370>)
   874f8:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   874fa:	4618      	mov	r0, r3
   874fc:	f04f 0102 	mov.w	r1, #2
   87500:	4a11      	ldr	r2, [pc, #68]	; (87548 <udc_process_setup+0x344>)
   87502:	4790      	blx	r2
			sizeof(udc_ep_status));
	return true;
   87504:	f04f 0001 	mov.w	r0, #1
   87508:	e1de      	b.n	878c8 <udc_process_setup+0x6c4>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
   8750a:	f04f 0000 	mov.w	r0, #0
   8750e:	e1db      	b.n	878c8 <udc_process_setup+0x6c4>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   87510:	f010 031f 	ands.w	r3, r0, #31
   87514:	f040 8142 	bne.w	8779c <udc_process_setup+0x598>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   87518:	f641 41bc 	movw	r1, #7356	; 0x1cbc
   8751c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87520:	784a      	ldrb	r2, [r1, #1]
   87522:	f102 30ff 	add.w	r0, r2, #4294967295
   87526:	2808      	cmp	r0, #8
   87528:	f200 8138 	bhi.w	8779c <udc_process_setup+0x598>
   8752c:	e8df f010 	tbh	[pc, r0, lsl #1]
   87530:	01360039 	.word	0x01360039
   87534:	01360057 	.word	0x01360057
   87538:	01360024 	.word	0x01360024
   8753c:	01360136 	.word	0x01360136
   87540:	00ae      	.short	0x00ae
   87542:	bf00      	nop
   87544:	20070170 	.word	0x20070170
   87548:	000893bd 	.word	0x000893bd
   8754c:	20071cbc 	.word	0x20071cbc
   87550:	2007029c 	.word	0x2007029c
   87554:	00085525 	.word	0x00085525
   87558:	20070270 	.word	0x20070270
   8755c:	2007027c 	.word	0x2007027c
   87560:	2007153a 	.word	0x2007153a
   87564:	20071534 	.word	0x20071534
   87568:	00086fa9 	.word	0x00086fa9
   8756c:	20071530 	.word	0x20071530
   87570:	00089431 	.word	0x00089431
   87574:	20071532 	.word	0x20071532
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   87578:	f641 40bc 	movw	r0, #7356	; 0x1cbc
   8757c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87580:	88c1      	ldrh	r1, [r0, #6]
   87582:	b959      	cbnz	r1, 8759c <udc_process_setup+0x398>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   87584:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   87588:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8758c:	f247 0235 	movw	r2, #28725	; 0x7035
   87590:	f2c0 0208 	movt	r2, #8
   87594:	611a      	str	r2, [r3, #16]
	return true;
   87596:	f04f 0001 	mov.w	r0, #1
   8759a:	e195      	b.n	878c8 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   8759c:	f04f 0000 	mov.w	r0, #0
   875a0:	e192      	b.n	878c8 <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   875a2:	f641 42bc 	movw	r2, #7356	; 0x1cbc
   875a6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   875aa:	88d1      	ldrh	r1, [r2, #6]
   875ac:	b989      	cbnz	r1, 875d2 <udc_process_setup+0x3ce>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   875ae:	f641 40bc 	movw	r0, #7356	; 0x1cbc
   875b2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   875b6:	8843      	ldrh	r3, [r0, #2]
   875b8:	2b01      	cmp	r3, #1
   875ba:	d10d      	bne.n	875d8 <udc_process_setup+0x3d4>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   875bc:	f241 5138 	movw	r1, #5432	; 0x1538
   875c0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   875c4:	880a      	ldrh	r2, [r1, #0]
   875c6:	f022 0002 	bic.w	r0, r2, #2
   875ca:	8008      	strh	r0, [r1, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   875cc:	f04f 0001 	mov.w	r0, #1
   875d0:	e17a      	b.n	878c8 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   875d2:	f04f 0000 	mov.w	r0, #0
   875d6:	e177      	b.n	878c8 <udc_process_setup+0x6c4>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
   875d8:	f04f 0000 	mov.w	r0, #0
   875dc:	e174      	b.n	878c8 <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   875de:	f641 40bc 	movw	r0, #7356	; 0x1cbc
   875e2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   875e6:	88c1      	ldrh	r1, [r0, #6]
   875e8:	2900      	cmp	r1, #0
   875ea:	d140      	bne.n	8766e <udc_process_setup+0x46a>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
   875ec:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   875f0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   875f4:	885a      	ldrh	r2, [r3, #2]
   875f6:	2a02      	cmp	r2, #2
   875f8:	d13c      	bne.n	87674 <udc_process_setup+0x470>
		return false;
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
   875fa:	f249 3045 	movw	r0, #37701	; 0x9345
   875fe:	f2c0 0008 	movt	r0, #8
   87602:	4780      	blx	r0
   87604:	2800      	cmp	r0, #0
   87606:	d038      	beq.n	8767a <udc_process_setup+0x476>
			break;
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   87608:	f641 41bc 	movw	r1, #7356	; 0x1cbc
   8760c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87610:	790b      	ldrb	r3, [r1, #4]
   87612:	2b00      	cmp	r3, #0
   87614:	d134      	bne.n	87680 <udc_process_setup+0x47c>
			break;
		}
		// Unconfigure the device, terminating all ongoing requests
		udc_reset();
   87616:	f247 1259 	movw	r2, #29017	; 0x7159
   8761a:	f2c0 0208 	movt	r2, #8
   8761e:	4790      	blx	r2
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   87620:	f641 40bc 	movw	r0, #7356	; 0x1cbc
   87624:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87628:	8881      	ldrh	r1, [r0, #4]
   8762a:	ea4f 2311 	mov.w	r3, r1, lsr #8
   8762e:	f103 30ff 	add.w	r0, r3, #4294967295
   87632:	2803      	cmp	r0, #3
   87634:	d827      	bhi.n	87686 <udc_process_setup+0x482>
   87636:	e8df f000 	tbb	[pc, r0]
   8763a:	0802      	.short	0x0802
   8763c:	140e      	.short	0x140e
		case USB_DEV_TEST_MODE_J:
			udd_g_ctrlreq.callback = udd_test_mode_j;
   8763e:	4897      	ldr	r0, [pc, #604]	; (8789c <udc_process_setup+0x698>)
   87640:	4b97      	ldr	r3, [pc, #604]	; (878a0 <udc_process_setup+0x69c>)
   87642:	6118      	str	r0, [r3, #16]
			return true;
   87644:	f04f 0001 	mov.w	r0, #1
   87648:	e13e      	b.n	878c8 <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_K:
			udd_g_ctrlreq.callback = udd_test_mode_k;
   8764a:	4a96      	ldr	r2, [pc, #600]	; (878a4 <udc_process_setup+0x6a0>)
   8764c:	4994      	ldr	r1, [pc, #592]	; (878a0 <udc_process_setup+0x69c>)
   8764e:	610a      	str	r2, [r1, #16]
			return true;
   87650:	f04f 0001 	mov.w	r0, #1
   87654:	e138      	b.n	878c8 <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_SE0_NAK:
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   87656:	4894      	ldr	r0, [pc, #592]	; (878a8 <udc_process_setup+0x6a4>)
   87658:	4b91      	ldr	r3, [pc, #580]	; (878a0 <udc_process_setup+0x69c>)
   8765a:	6118      	str	r0, [r3, #16]
			return true;
   8765c:	f04f 0001 	mov.w	r0, #1
   87660:	e132      	b.n	878c8 <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_PACKET:
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   87662:	4a92      	ldr	r2, [pc, #584]	; (878ac <udc_process_setup+0x6a8>)
   87664:	498e      	ldr	r1, [pc, #568]	; (878a0 <udc_process_setup+0x69c>)
   87666:	610a      	str	r2, [r1, #16]
			return true;
   87668:	f04f 0001 	mov.w	r0, #1
   8766c:	e12c      	b.n	878c8 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   8766e:	f04f 0000 	mov.w	r0, #0
   87672:	e129      	b.n	878c8 <udc_process_setup+0x6c4>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
   87674:	f04f 0000 	mov.w	r0, #0
   87678:	e126      	b.n	878c8 <udc_process_setup+0x6c4>
		break;
#endif
	default:
		break;
	}
	return false;
   8767a:	f04f 0000 	mov.w	r0, #0
   8767e:	e123      	b.n	878c8 <udc_process_setup+0x6c4>
   87680:	f04f 0000 	mov.w	r0, #0
   87684:	e120      	b.n	878c8 <udc_process_setup+0x6c4>
   87686:	f04f 0000 	mov.w	r0, #0
   8768a:	e11d      	b.n	878c8 <udc_process_setup+0x6c4>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   8768c:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   87690:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87694:	88d9      	ldrh	r1, [r3, #6]
   87696:	2900      	cmp	r1, #0
   87698:	d16e      	bne.n	87778 <udc_process_setup+0x574>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   8769a:	f249 3289 	movw	r2, #37769	; 0x9389
   8769e:	f2c0 0208 	movt	r2, #8
   876a2:	4790      	blx	r2
   876a4:	2800      	cmp	r0, #0
   876a6:	d06a      	beq.n	8777e <udc_process_setup+0x57a>
		return false;
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   876a8:	f249 3045 	movw	r0, #37701	; 0x9345
   876ac:	f2c0 0008 	movt	r0, #8
   876b0:	4780      	blx	r0
   876b2:	b168      	cbz	r0, 876d0 <udc_process_setup+0x4cc>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   876b4:	f641 41bc 	movw	r1, #7356	; 0x1cbc
   876b8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   876bc:	788a      	ldrb	r2, [r1, #2]
				udc_config.confdev_hs->bNumConfigurations) {
   876be:	f240 1070 	movw	r0, #368	; 0x170
   876c2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   876c6:	6883      	ldr	r3, [r0, #8]
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   876c8:	7c59      	ldrb	r1, [r3, #17]
   876ca:	428a      	cmp	r2, r1
   876cc:	dd0d      	ble.n	876ea <udc_process_setup+0x4e6>
   876ce:	e059      	b.n	87784 <udc_process_setup+0x580>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   876d0:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   876d4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   876d8:	7899      	ldrb	r1, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   876da:	f240 1270 	movw	r2, #368	; 0x170
   876de:	f2c2 0207 	movt	r2, #8199	; 0x2007
   876e2:	6810      	ldr	r0, [r2, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   876e4:	7c43      	ldrb	r3, [r0, #17]
   876e6:	4299      	cmp	r1, r3
   876e8:	dc4f      	bgt.n	8778a <udc_process_setup+0x586>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
   876ea:	f247 1259 	movw	r2, #29017	; 0x7159
   876ee:	f2c0 0208 	movt	r2, #8
   876f2:	4790      	blx	r2

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   876f4:	f641 40bc 	movw	r0, #7356	; 0x1cbc
   876f8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   876fc:	7883      	ldrb	r3, [r0, #2]
   876fe:	f241 513a 	movw	r1, #5434	; 0x153a
   87702:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87706:	700b      	strb	r3, [r1, #0]
	if (udc_num_configuration == 0) {
   87708:	2b00      	cmp	r3, #0
   8770a:	d041      	beq.n	87790 <udc_process_setup+0x58c>
		return true; // Default empty configuration requested
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   8770c:	4a68      	ldr	r2, [pc, #416]	; (878b0 <udc_process_setup+0x6ac>)
   8770e:	4790      	blx	r2
   87710:	b198      	cbz	r0, 8773a <udc_process_setup+0x536>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   87712:	4a68      	ldr	r2, [pc, #416]	; (878b4 <udc_process_setup+0x6b0>)
   87714:	7810      	ldrb	r0, [r2, #0]
   87716:	f100 31ff 	add.w	r1, r0, #4294967295
   8771a:	4b67      	ldr	r3, [pc, #412]	; (878b8 <udc_process_setup+0x6b4>)
   8771c:	691a      	ldr	r2, [r3, #16]
   8771e:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
   87722:	4966      	ldr	r1, [pc, #408]	; (878bc <udc_process_setup+0x6b8>)
   87724:	6008      	str	r0, [r1, #0]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   87726:	4b65      	ldr	r3, [pc, #404]	; (878bc <udc_process_setup+0x6b8>)
   87728:	681a      	ldr	r2, [r3, #0]
   8772a:	6810      	ldr	r0, [r2, #0]
   8772c:	7901      	ldrb	r1, [r0, #4]
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
   8772e:	f04f 0001 	mov.w	r0, #1
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   87732:	2900      	cmp	r1, #0
   87734:	f000 80c8 	beq.w	878c8 <udc_process_setup+0x6c4>
   87738:	e00a      	b.n	87750 <udc_process_setup+0x54c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   8773a:	485e      	ldr	r0, [pc, #376]	; (878b4 <udc_process_setup+0x6b0>)
   8773c:	7803      	ldrb	r3, [r0, #0]
   8773e:	f103 31ff 	add.w	r1, r3, #4294967295
   87742:	4a5d      	ldr	r2, [pc, #372]	; (878b8 <udc_process_setup+0x6b4>)
   87744:	6850      	ldr	r0, [r2, #4]
   87746:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   8774a:	4b5c      	ldr	r3, [pc, #368]	; (878bc <udc_process_setup+0x6b8>)
   8774c:	6019      	str	r1, [r3, #0]
   8774e:	e7ea      	b.n	87726 <udc_process_setup+0x522>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   87750:	f04f 0400 	mov.w	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   87754:	4626      	mov	r6, r4
   87756:	4d5a      	ldr	r5, [pc, #360]	; (878c0 <udc_process_setup+0x6bc>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   87758:	4f58      	ldr	r7, [pc, #352]	; (878bc <udc_process_setup+0x6b8>)
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   8775a:	4620      	mov	r0, r4
   8775c:	4631      	mov	r1, r6
   8775e:	47a8      	blx	r5
   87760:	b1c8      	cbz	r0, 87796 <udc_process_setup+0x592>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   87762:	f104 0401 	add.w	r4, r4, #1
   87766:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   87768:	683b      	ldr	r3, [r7, #0]
   8776a:	681a      	ldr	r2, [r3, #0]
   8776c:	7910      	ldrb	r0, [r2, #4]
   8776e:	42a0      	cmp	r0, r4
   87770:	d8f3      	bhi.n	8775a <udc_process_setup+0x556>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
   87772:	f04f 0001 	mov.w	r0, #1
   87776:	e0a7      	b.n	878c8 <udc_process_setup+0x6c4>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   87778:	f04f 0000 	mov.w	r0, #0
   8777c:	e0a4      	b.n	878c8 <udc_process_setup+0x6c4>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
   8777e:	f04f 0000 	mov.w	r0, #0
   87782:	e0a1      	b.n	878c8 <udc_process_setup+0x6c4>
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
   87784:	f04f 0000 	mov.w	r0, #0
   87788:	e09e      	b.n	878c8 <udc_process_setup+0x6c4>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
   8778a:	f04f 0000 	mov.w	r0, #0
   8778e:	e09b      	b.n	878c8 <udc_process_setup+0x6c4>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
   87790:	f04f 0001 	mov.w	r0, #1
   87794:	e098      	b.n	878c8 <udc_process_setup+0x6c4>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
   87796:	f04f 0000 	mov.w	r0, #0
   8779a:	e095      	b.n	878c8 <udc_process_setup+0x6c4>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8779c:	2b01      	cmp	r3, #1
   8779e:	d12d      	bne.n	877fc <udc_process_setup+0x5f8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   877a0:	f641 41bc 	movw	r1, #7356	; 0x1cbc
   877a4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   877a8:	784a      	ldrb	r2, [r1, #1]
   877aa:	2a0b      	cmp	r2, #11
   877ac:	d126      	bne.n	877fc <udc_process_setup+0x5f8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   877ae:	f641 40bc 	movw	r0, #7356	; 0x1cbc
   877b2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   877b6:	88c2      	ldrh	r2, [r0, #6]
   877b8:	b9ba      	cbnz	r2, 877ea <udc_process_setup+0x5e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   877ba:	f241 533a 	movw	r3, #5434	; 0x153a
   877be:	f2c2 0307 	movt	r3, #8199	; 0x2007
   877c2:	7819      	ldrb	r1, [r3, #0]
   877c4:	b1a1      	cbz	r1, 877f0 <udc_process_setup+0x5ec>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   877c6:	f641 45bc 	movw	r5, #7356	; 0x1cbc
   877ca:	f2c2 0507 	movt	r5, #8199	; 0x2007
   877ce:	792c      	ldrb	r4, [r5, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   877d0:	886d      	ldrh	r5, [r5, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   877d2:	4620      	mov	r0, r4
   877d4:	f247 02bd 	movw	r2, #28861	; 0x70bd
   877d8:	f2c0 0208 	movt	r2, #8
   877dc:	4790      	blx	r2
   877de:	b150      	cbz	r0, 877f6 <udc_process_setup+0x5f2>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   877e0:	4620      	mov	r0, r4
   877e2:	b2e9      	uxtb	r1, r5
   877e4:	4b36      	ldr	r3, [pc, #216]	; (878c0 <udc_process_setup+0x6bc>)
   877e6:	4798      	blx	r3
   877e8:	e06e      	b.n	878c8 <udc_process_setup+0x6c4>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
   877ea:	f04f 0000 	mov.w	r0, #0
   877ee:	e06b      	b.n	878c8 <udc_process_setup+0x6c4>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
   877f0:	f04f 0000 	mov.w	r0, #0
   877f4:	e068      	b.n	878c8 <udc_process_setup+0x6c4>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
		return false;
   877f6:	f04f 0000 	mov.w	r0, #0
   877fa:	e065      	b.n	878c8 <udc_process_setup+0x6c4>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   877fc:	2b02      	cmp	r3, #2
   877fe:	d165      	bne.n	878cc <udc_process_setup+0x6c8>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   87800:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   87804:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87808:	7858      	ldrb	r0, [r3, #1]
   8780a:	2801      	cmp	r0, #1
   8780c:	d002      	beq.n	87814 <udc_process_setup+0x610>
   8780e:	2803      	cmp	r0, #3
   87810:	d158      	bne.n	878c4 <udc_process_setup+0x6c0>
   87812:	e01c      	b.n	8784e <udc_process_setup+0x64a>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   87814:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   87818:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8781c:	88d8      	ldrh	r0, [r3, #6]
   8781e:	b980      	cbnz	r0, 87842 <udc_process_setup+0x63e>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   87820:	f641 41bc 	movw	r1, #7356	; 0x1cbc
   87824:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87828:	884a      	ldrh	r2, [r1, #2]
   8782a:	b96a      	cbnz	r2, 87848 <udc_process_setup+0x644>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   8782c:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   87830:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87834:	7918      	ldrb	r0, [r3, #4]
   87836:	f249 5171 	movw	r1, #38257	; 0x9571
   8783a:	f2c0 0108 	movt	r1, #8
   8783e:	4788      	blx	r1
   87840:	e042      	b.n	878c8 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   87842:	f04f 0000 	mov.w	r0, #0
   87846:	e03f      	b.n	878c8 <udc_process_setup+0x6c4>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
   87848:	f04f 0000 	mov.w	r0, #0
   8784c:	e03c      	b.n	878c8 <udc_process_setup+0x6c4>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   8784e:	f641 41bc 	movw	r1, #7356	; 0x1cbc
   87852:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87856:	88ca      	ldrh	r2, [r1, #6]
   87858:	b9b2      	cbnz	r2, 87888 <udc_process_setup+0x684>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   8785a:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   8785e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87862:	8858      	ldrh	r0, [r3, #2]
   87864:	b998      	cbnz	r0, 8788e <udc_process_setup+0x68a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   87866:	f641 44bc 	movw	r4, #7356	; 0x1cbc
   8786a:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8786e:	7920      	ldrb	r0, [r4, #4]
   87870:	f649 416d 	movw	r1, #40045	; 0x9c6d
   87874:	f2c0 0108 	movt	r1, #8
   87878:	4788      	blx	r1
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   8787a:	7920      	ldrb	r0, [r4, #4]
   8787c:	f249 4249 	movw	r2, #37961	; 0x9449
   87880:	f2c0 0208 	movt	r2, #8
   87884:	4790      	blx	r2
   87886:	e01f      	b.n	878c8 <udc_process_setup+0x6c4>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   87888:	f04f 0000 	mov.w	r0, #0
   8788c:	e01c      	b.n	878c8 <udc_process_setup+0x6c4>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
   8788e:	f04f 0000 	mov.w	r0, #0
   87892:	e019      	b.n	878c8 <udc_process_setup+0x6c4>
				break;
			}
		}
#endif
	}
	return false;
   87894:	f04f 0000 	mov.w	r0, #0
   87898:	e016      	b.n	878c8 <udc_process_setup+0x6c4>
   8789a:	bf00      	nop
   8789c:	00089d71 	.word	0x00089d71
   878a0:	20071cbc 	.word	0x20071cbc
   878a4:	00089d91 	.word	0x00089d91
   878a8:	00089db1 	.word	0x00089db1
   878ac:	00089dc9 	.word	0x00089dc9
   878b0:	00089345 	.word	0x00089345
   878b4:	2007153a 	.word	0x2007153a
   878b8:	20070170 	.word	0x20070170
   878bc:	20071534 	.word	0x20071534
   878c0:	00087051 	.word	0x00087051
   878c4:	f04f 0000 	mov.w	r0, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
   878c8:	2800      	cmp	r0, #0
   878ca:	d17b      	bne.n	879c4 <udc_process_setup+0x7c0>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   878cc:	f641 41bc 	movw	r1, #7356	; 0x1cbc
   878d0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   878d4:	7808      	ldrb	r0, [r1, #0]
   878d6:	f000 031f 	and.w	r3, r0, #31
   878da:	2b01      	cmp	r3, #1
   878dc:	d12d      	bne.n	8793a <udc_process_setup+0x736>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   878de:	f241 523a 	movw	r2, #5434	; 0x153a
   878e2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   878e6:	7811      	ldrb	r1, [r2, #0]
   878e8:	b339      	cbz	r1, 8793a <udc_process_setup+0x736>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   878ea:	f641 44bc 	movw	r4, #7356	; 0x1cbc
   878ee:	f2c2 0407 	movt	r4, #8199	; 0x2007
   878f2:	7924      	ldrb	r4, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   878f4:	f241 5534 	movw	r5, #5428	; 0x1534
   878f8:	f2c2 0507 	movt	r5, #8199	; 0x2007
   878fc:	682d      	ldr	r5, [r5, #0]
   878fe:	6828      	ldr	r0, [r5, #0]
   87900:	7903      	ldrb	r3, [r0, #4]
   87902:	42a3      	cmp	r3, r4
   87904:	d919      	bls.n	8793a <udc_process_setup+0x736>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   87906:	4620      	mov	r0, r4
   87908:	f04f 0100 	mov.w	r1, #0
   8790c:	f646 72a9 	movw	r2, #28585	; 0x6fa9
   87910:	f2c0 0208 	movt	r2, #8
   87914:	4790      	blx	r2
   87916:	b180      	cbz	r0, 8793a <udc_process_setup+0x736>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   87918:	6869      	ldr	r1, [r5, #4]
   8791a:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8791e:	68e8      	ldr	r0, [r5, #12]
   87920:	4780      	blx	r0
   87922:	4601      	mov	r1, r0
   87924:	4620      	mov	r0, r4
   87926:	f646 73a9 	movw	r3, #28585	; 0x6fa9
   8792a:	f2c0 0308 	movt	r3, #8
   8792e:	4798      	blx	r3
   87930:	b118      	cbz	r0, 8793a <udc_process_setup+0x736>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   87932:	68aa      	ldr	r2, [r5, #8]
   87934:	4790      	blx	r2
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
   87936:	2800      	cmp	r0, #0
   87938:	d147      	bne.n	879ca <udc_process_setup+0x7c6>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   8793a:	f641 41bc 	movw	r1, #7356	; 0x1cbc
   8793e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87942:	7808      	ldrb	r0, [r1, #0]
   87944:	f000 031f 	and.w	r3, r0, #31
   87948:	2b02      	cmp	r3, #2
   8794a:	d141      	bne.n	879d0 <udc_process_setup+0x7cc>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   8794c:	f241 523a 	movw	r2, #5434	; 0x153a
   87950:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87954:	7811      	ldrb	r1, [r2, #0]
   87956:	b331      	cbz	r1, 879a6 <udc_process_setup+0x7a2>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   87958:	f241 5034 	movw	r0, #5428	; 0x1534
   8795c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87960:	6803      	ldr	r3, [r0, #0]
   87962:	681a      	ldr	r2, [r3, #0]
   87964:	7911      	ldrb	r1, [r2, #4]
   87966:	b309      	cbz	r1, 879ac <udc_process_setup+0x7a8>
   87968:	f04f 0400 	mov.w	r4, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8796c:	f646 76a9 	movw	r6, #28585	; 0x6fa9
   87970:	f2c0 0608 	movt	r6, #8
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   87974:	f241 5734 	movw	r7, #5428	; 0x1534
   87978:	f2c2 0707 	movt	r7, #8199	; 0x2007
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   8797c:	685d      	ldr	r5, [r3, #4]
   8797e:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   87982:	68eb      	ldr	r3, [r5, #12]
   87984:	4798      	blx	r3
   87986:	4601      	mov	r1, r0
   87988:	4620      	mov	r0, r4
   8798a:	47b0      	blx	r6
   8798c:	b188      	cbz	r0, 879b2 <udc_process_setup+0x7ae>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   8798e:	68a8      	ldr	r0, [r5, #8]
   87990:	4780      	blx	r0
   87992:	b988      	cbnz	r0, 879b8 <udc_process_setup+0x7b4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   87994:	f104 0401 	add.w	r4, r4, #1
   87998:	b2e4      	uxtb	r4, r4
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8799a:	683b      	ldr	r3, [r7, #0]
   8799c:	681a      	ldr	r2, [r3, #0]
   8799e:	7911      	ldrb	r1, [r2, #4]
   879a0:	42a1      	cmp	r1, r4
   879a2:	d8eb      	bhi.n	8797c <udc_process_setup+0x778>
   879a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
   879a6:	f04f 0000 	mov.w	r0, #0
   879aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
   879ac:	f04f 0000 	mov.w	r0, #0
   879b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
			return false;
   879b2:	f04f 0000 	mov.w	r0, #0
   879b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
   879b8:	f04f 0001 	mov.w	r0, #1
   879bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
   879be:	f04f 0000 	mov.w	r0, #0
   879c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
   879c4:	f04f 0001 	mov.w	r0, #1
   879c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
			return true;
   879ca:	f04f 0001 	mov.w	r0, #1
   879ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   879d0:	f04f 0000 	mov.w	r0, #0
   879d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   879d6:	f010 0f60 	tst.w	r0, #96	; 0x60
   879da:	f47f af77 	bne.w	878cc <udc_process_setup+0x6c8>
   879de:	e597      	b.n	87510 <udc_process_setup+0x30c>
   879e0:	f010 0f60 	tst.w	r0, #96	; 0x60
   879e4:	f47f af72 	bne.w	878cc <udc_process_setup+0x6c8>
   879e8:	e424      	b.n	87234 <udc_process_setup+0x30>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   879ea:	f04f 000e 	mov.w	r0, #14
		str = udc_string_product_name;
   879ee:	490a      	ldr	r1, [pc, #40]	; (87a18 <udc_process_setup+0x814>)
   879f0:	e4e1      	b.n	873b6 <udc_process_setup+0x1b2>
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   879f2:	f04f 000c 	mov.w	r0, #12
		str = udc_get_string_serial_name();
   879f6:	4909      	ldr	r1, [pc, #36]	; (87a1c <udc_process_setup+0x818>)
   879f8:	e4dd      	b.n	873b6 <udc_process_setup+0x1b2>
   879fa:	f04f 0401 	mov.w	r4, #1
   879fe:	2c00      	cmp	r4, #0
   87a00:	f43f ace5 	beq.w	873ce <udc_process_setup+0x1ca>
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   87a04:	5ccc      	ldrb	r4, [r1, r3]
   87a06:	f822 4f02 	strh.w	r4, [r2, #2]!
   87a0a:	f103 0301 	add.w	r3, r3, #1
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   87a0e:	b2dc      	uxtb	r4, r3
   87a10:	4284      	cmp	r4, r0
   87a12:	f4ff acdc 	bcc.w	873ce <udc_process_setup+0x1ca>
   87a16:	e4e9      	b.n	873ec <udc_process_setup+0x1e8>
   87a18:	20070260 	.word	0x20070260
   87a1c:	0008de14 	.word	0x0008de14

00087a20 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   87a20:	b10a      	cbz	r2, 87a26 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   87a22:	6641      	str	r1, [r0, #100]	; 0x64
   87a24:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   87a26:	6601      	str	r1, [r0, #96]	; 0x60
   87a28:	4770      	bx	lr
   87a2a:	bf00      	nop

00087a2c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   87a2c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   87a2e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   87a32:	d016      	beq.n	87a62 <pio_set_peripheral+0x36>
   87a34:	d804      	bhi.n	87a40 <pio_set_peripheral+0x14>
   87a36:	b1c9      	cbz	r1, 87a6c <pio_set_peripheral+0x40>
   87a38:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   87a3c:	d115      	bne.n	87a6a <pio_set_peripheral+0x3e>
   87a3e:	e009      	b.n	87a54 <pio_set_peripheral+0x28>
   87a40:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   87a44:	d012      	beq.n	87a6c <pio_set_peripheral+0x40>
   87a46:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   87a4a:	d00f      	beq.n	87a6c <pio_set_peripheral+0x40>
   87a4c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   87a50:	d10b      	bne.n	87a6a <pio_set_peripheral+0x3e>
   87a52:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   87a54:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   87a56:	6f01      	ldr	r1, [r0, #112]	; 0x70
   87a58:	400b      	ands	r3, r1
   87a5a:	ea23 0302 	bic.w	r3, r3, r2
   87a5e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   87a60:	e003      	b.n	87a6a <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   87a62:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   87a64:	ea42 0103 	orr.w	r1, r2, r3
   87a68:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   87a6a:	6042      	str	r2, [r0, #4]
   87a6c:	4770      	bx	lr
   87a6e:	bf00      	nop

00087a70 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   87a70:	6441      	str	r1, [r0, #68]	; 0x44
   87a72:	4770      	bx	lr

00087a74 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   87a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87a76:	4604      	mov	r4, r0
   87a78:	460d      	mov	r5, r1
   87a7a:	4616      	mov	r6, r2
   87a7c:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   87a7e:	f647 2371 	movw	r3, #31345	; 0x7a71
   87a82:	f2c0 0308 	movt	r3, #8
   87a86:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   87a88:	4620      	mov	r0, r4
   87a8a:	4629      	mov	r1, r5
   87a8c:	9a06      	ldr	r2, [sp, #24]
   87a8e:	f647 2321 	movw	r3, #31265	; 0x7a21
   87a92:	f2c0 0308 	movt	r3, #8
   87a96:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   87a98:	b10f      	cbz	r7, 87a9e <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   87a9a:	6525      	str	r5, [r4, #80]	; 0x50
   87a9c:	e000      	b.n	87aa0 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   87a9e:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   87aa0:	b10e      	cbz	r6, 87aa6 <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   87aa2:	6325      	str	r5, [r4, #48]	; 0x30
   87aa4:	e000      	b.n	87aa8 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   87aa6:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   87aa8:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   87aaa:	6025      	str	r5, [r4, #0]
   87aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87aae:	bf00      	nop

00087ab0 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   87ab0:	b570      	push	{r4, r5, r6, lr}
   87ab2:	4604      	mov	r4, r0
   87ab4:	460d      	mov	r5, r1
   87ab6:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   87ab8:	f647 2371 	movw	r3, #31345	; 0x7a71
   87abc:	f2c0 0308 	movt	r3, #8
   87ac0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   87ac2:	4620      	mov	r0, r4
   87ac4:	4629      	mov	r1, r5
   87ac6:	f006 0201 	and.w	r2, r6, #1
   87aca:	f647 2321 	movw	r3, #31265	; 0x7a21
   87ace:	f2c0 0308 	movt	r3, #8
   87ad2:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   87ad4:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   87ad8:	bf14      	ite	ne
   87ada:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   87adc:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   87ade:	f016 0f02 	tst.w	r6, #2
   87ae2:	d002      	beq.n	87aea <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   87ae4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   87ae8:	e004      	b.n	87af4 <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   87aea:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_SCIFSR = ul_mask;
   87aee:	bf18      	it	ne
   87af0:	f8c4 5080 	strne.w	r5, [r4, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   87af4:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   87af6:	6025      	str	r5, [r4, #0]
   87af8:	bd70      	pop	{r4, r5, r6, pc}
   87afa:	bf00      	nop

00087afc <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   87afc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   87afe:	4770      	bx	lr

00087b00 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   87b00:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   87b02:	4770      	bx	lr

00087b04 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   87b04:	b5f0      	push	{r4, r5, r6, r7, lr}
   87b06:	b083      	sub	sp, #12
   87b08:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   87b0a:	ea4f 1650 	mov.w	r6, r0, lsr #5
   87b0e:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
   87b12:	f201 7207 	addw	r2, r1, #1799	; 0x707
   87b16:	ea4f 2642 	mov.w	r6, r2, lsl #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   87b1a:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   87b1e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   87b22:	d042      	beq.n	87baa <pio_configure_pin+0xa6>
   87b24:	d806      	bhi.n	87b34 <pio_configure_pin+0x30>
   87b26:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   87b2a:	d00a      	beq.n	87b42 <pio_configure_pin+0x3e>
   87b2c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   87b30:	d164      	bne.n	87bfc <pio_configure_pin+0xf8>
   87b32:	e020      	b.n	87b76 <pio_configure_pin+0x72>
   87b34:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   87b38:	d046      	beq.n	87bc8 <pio_configure_pin+0xc4>
   87b3a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   87b3e:	d15d      	bne.n	87bfc <pio_configure_pin+0xf8>
   87b40:	e042      	b.n	87bc8 <pio_configure_pin+0xc4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   87b42:	f000 071f 	and.w	r7, r0, #31
   87b46:	f04f 0401 	mov.w	r4, #1
   87b4a:	fa04 f707 	lsl.w	r7, r4, r7
   87b4e:	4630      	mov	r0, r6
   87b50:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   87b54:	463a      	mov	r2, r7
   87b56:	f647 232d 	movw	r3, #31277	; 0x7a2d
   87b5a:	f2c0 0308 	movt	r3, #8
   87b5e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   87b60:	4630      	mov	r0, r6
   87b62:	4639      	mov	r1, r7
   87b64:	ea05 0204 	and.w	r2, r5, r4
   87b68:	f647 2321 	movw	r3, #31265	; 0x7a21
   87b6c:	f2c0 0308 	movt	r3, #8
   87b70:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   87b72:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   87b74:	e044      	b.n	87c00 <pio_configure_pin+0xfc>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   87b76:	f000 001f 	and.w	r0, r0, #31
   87b7a:	f04f 0401 	mov.w	r4, #1
   87b7e:	fa04 f700 	lsl.w	r7, r4, r0
   87b82:	4630      	mov	r0, r6
   87b84:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   87b88:	463a      	mov	r2, r7
   87b8a:	f647 232d 	movw	r3, #31277	; 0x7a2d
   87b8e:	f2c0 0308 	movt	r3, #8
   87b92:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   87b94:	4630      	mov	r0, r6
   87b96:	4639      	mov	r1, r7
   87b98:	ea05 0204 	and.w	r2, r5, r4
   87b9c:	f647 2321 	movw	r3, #31265	; 0x7a21
   87ba0:	f2c0 0308 	movt	r3, #8
   87ba4:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   87ba6:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   87ba8:	e02a      	b.n	87c00 <pio_configure_pin+0xfc>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   87baa:	f000 021f 	and.w	r2, r0, #31
   87bae:	f04f 0401 	mov.w	r4, #1
   87bb2:	4630      	mov	r0, r6
   87bb4:	fa04 f102 	lsl.w	r1, r4, r2
   87bb8:	462a      	mov	r2, r5
   87bba:	f647 23b1 	movw	r3, #31409	; 0x7ab1
   87bbe:	f2c0 0308 	movt	r3, #8
   87bc2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   87bc4:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   87bc6:	e01b      	b.n	87c00 <pio_configure_pin+0xfc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   87bc8:	f000 021f 	and.w	r2, r0, #31
   87bcc:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   87bd0:	f005 5360 	and.w	r3, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   87bd4:	ea05 0104 	and.w	r1, r5, r4
   87bd8:	9100      	str	r1, [sp, #0]
   87bda:	4630      	mov	r0, r6
   87bdc:	fa04 f102 	lsl.w	r1, r4, r2
   87be0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   87be4:	bf14      	ite	ne
   87be6:	2200      	movne	r2, #0
   87be8:	2201      	moveq	r2, #1
   87bea:	f3c5 0380 	ubfx	r3, r5, #2, #1
   87bee:	f647 2575 	movw	r5, #31349	; 0x7a75
   87bf2:	f2c0 0508 	movt	r5, #8
   87bf6:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   87bf8:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   87bfa:	e001      	b.n	87c00 <pio_configure_pin+0xfc>

	default:
		return 0;
   87bfc:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   87c00:	b003      	add	sp, #12
   87c02:	bdf0      	pop	{r4, r5, r6, r7, pc}

00087c04 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   87c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87c06:	4604      	mov	r4, r0
   87c08:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   87c0a:	f647 23fd 	movw	r3, #31485	; 0x7afd
   87c0e:	f2c0 0308 	movt	r3, #8
   87c12:	4798      	blx	r3
   87c14:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   87c16:	4620      	mov	r0, r4
   87c18:	f647 3101 	movw	r1, #31489	; 0x7b01
   87c1c:	f2c0 0108 	movt	r1, #8
   87c20:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   87c22:	4005      	ands	r5, r0
   87c24:	d014      	beq.n	87c50 <pio_handler_process+0x4c>
   87c26:	4c0b      	ldr	r4, [pc, #44]	; (87c54 <pio_handler_process+0x50>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
   87c28:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   87c2a:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   87c2e:	42b0      	cmp	r0, r6
   87c30:	d10a      	bne.n	87c48 <pio_handler_process+0x44>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   87c32:	f854 1c08 	ldr.w	r1, [r4, #-8]
   87c36:	4229      	tst	r1, r5
   87c38:	d006      	beq.n	87c48 <pio_handler_process+0x44>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   87c3a:	6822      	ldr	r2, [r4, #0]
   87c3c:	4630      	mov	r0, r6
   87c3e:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   87c40:	f854 3c08 	ldr.w	r3, [r4, #-8]
   87c44:	ea25 0503 	bic.w	r5, r5, r3
   87c48:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   87c4c:	2d00      	cmp	r5, #0
   87c4e:	d1eb      	bne.n	87c28 <pio_handler_process+0x24>
   87c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87c52:	bf00      	nop
   87c54:	2007154c 	.word	0x2007154c

00087c58 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   87c58:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   87c5a:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   87c5e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   87c62:	f04f 010b 	mov.w	r1, #11
   87c66:	f647 4305 	movw	r3, #31749	; 0x7c05
   87c6a:	f2c0 0308 	movt	r3, #8
   87c6e:	4798      	blx	r3
   87c70:	bd08      	pop	{r3, pc}
   87c72:	bf00      	nop

00087c74 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   87c74:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   87c76:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   87c7a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   87c7e:	f04f 010c 	mov.w	r1, #12
   87c82:	f647 4305 	movw	r3, #31749	; 0x7c05
   87c86:	f2c0 0308 	movt	r3, #8
   87c8a:	4798      	blx	r3
   87c8c:	bd08      	pop	{r3, pc}
   87c8e:	bf00      	nop

00087c90 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   87c90:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   87c92:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   87c96:	f2c4 000e 	movt	r0, #16398	; 0x400e
   87c9a:	f04f 010d 	mov.w	r1, #13
   87c9e:	f647 4305 	movw	r3, #31749	; 0x7c05
   87ca2:	f2c0 0308 	movt	r3, #8
   87ca6:	4798      	blx	r3
   87ca8:	bd08      	pop	{r3, pc}
   87caa:	bf00      	nop

00087cac <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   87cac:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   87cae:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   87cb2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   87cb6:	f04f 010e 	mov.w	r1, #14
   87cba:	f647 4305 	movw	r3, #31749	; 0x7c05
   87cbe:	f2c0 0308 	movt	r3, #8
   87cc2:	4798      	blx	r3
   87cc4:	bd08      	pop	{r3, pc}
   87cc6:	bf00      	nop

00087cc8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   87cc8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87ccc:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   87cd2:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   87cd6:	4308      	orrs	r0, r1
   87cd8:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   87cda:	6e98      	ldr	r0, [r3, #104]	; 0x68
   87cdc:	f010 0f08 	tst.w	r0, #8
   87ce0:	d007      	beq.n	87cf2 <pmc_switch_mck_to_pllack+0x2a>
   87ce2:	e010      	b.n	87d06 <pmc_switch_mck_to_pllack+0x3e>
   87ce4:	f100 33ff 	add.w	r3, r0, #4294967295
   87ce8:	6e90      	ldr	r0, [r2, #104]	; 0x68
   87cea:	f010 0f08 	tst.w	r0, #8
   87cee:	d038      	beq.n	87d62 <pmc_switch_mck_to_pllack+0x9a>
   87cf0:	e009      	b.n	87d06 <pmc_switch_mck_to_pllack+0x3e>
   87cf2:	f44f 6000 	mov.w	r0, #2048	; 0x800
   87cf6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   87cfa:	f2c4 020e 	movt	r2, #16398	; 0x400e
   87cfe:	6e91      	ldr	r1, [r2, #104]	; 0x68
   87d00:	f011 0f08 	tst.w	r1, #8
   87d04:	d0ee      	beq.n	87ce4 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   87d06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   87d0a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   87d0e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   87d10:	f022 0303 	bic.w	r3, r2, #3
   87d14:	f043 0002 	orr.w	r0, r3, #2
   87d18:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   87d1a:	6e89      	ldr	r1, [r1, #104]	; 0x68
   87d1c:	f011 0f08 	tst.w	r1, #8
   87d20:	d009      	beq.n	87d36 <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   87d22:	f04f 0000 	mov.w	r0, #0
   87d26:	4770      	bx	lr
   87d28:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   87d2c:	6e91      	ldr	r1, [r2, #104]	; 0x68
   87d2e:	f011 0f08 	tst.w	r1, #8
   87d32:	d013      	beq.n	87d5c <pmc_switch_mck_to_pllack+0x94>
   87d34:	e009      	b.n	87d4a <pmc_switch_mck_to_pllack+0x82>
   87d36:	f44f 6300 	mov.w	r3, #2048	; 0x800
   87d3a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   87d3e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   87d42:	6e90      	ldr	r0, [r2, #104]	; 0x68
   87d44:	f010 0f08 	tst.w	r0, #8
   87d48:	d0ee      	beq.n	87d28 <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   87d4a:	f04f 0000 	mov.w	r0, #0
   87d4e:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   87d50:	f04f 0001 	mov.w	r0, #1
   87d54:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   87d56:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   87d5a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   87d5c:	3b01      	subs	r3, #1
   87d5e:	d1f0      	bne.n	87d42 <pmc_switch_mck_to_pllack+0x7a>
   87d60:	e7f9      	b.n	87d56 <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   87d62:	1e58      	subs	r0, r3, #1
   87d64:	d1cb      	bne.n	87cfe <pmc_switch_mck_to_pllack+0x36>
   87d66:	e7f3      	b.n	87d50 <pmc_switch_mck_to_pllack+0x88>

00087d68 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   87d68:	b188      	cbz	r0, 87d8e <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   87d6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   87d6e:	f2c4 010e 	movt	r1, #16398	; 0x400e
   87d72:	6a08      	ldr	r0, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   87d74:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   87d78:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   87d7c:	4002      	ands	r2, r0
   87d7e:	f04f 0302 	mov.w	r3, #2
   87d82:	f2c0 1337 	movt	r3, #311	; 0x137
   87d86:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   87d8a:	6208      	str	r0, [r1, #32]
   87d8c:	4770      	bx	lr
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   87d8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87d92:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87d96:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   87d98:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   87d9c:	f020 0203 	bic.w	r2, r0, #3
   87da0:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   87da4:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   87da8:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   87dac:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   87db0:	6218      	str	r0, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   87db2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   87db6:	f2c4 020e 	movt	r2, #16398	; 0x400e
   87dba:	6e93      	ldr	r3, [r2, #104]	; 0x68
   87dbc:	f013 0f01 	tst.w	r3, #1
   87dc0:	d0fb      	beq.n	87dba <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   87dc2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   87dc6:	f2c4 010e 	movt	r1, #16398	; 0x400e
   87dca:	6a08      	ldr	r0, [r1, #32]
   87dcc:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   87dd0:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   87dd4:	620b      	str	r3, [r1, #32]
   87dd6:	4770      	bx	lr

00087dd8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   87dd8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87ddc:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87de0:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   87de2:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   87de6:	4770      	bx	lr

00087de8 <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   87de8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87dec:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87df0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   87df4:	629a      	str	r2, [r3, #40]	; 0x28
   87df6:	4770      	bx	lr

00087df8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   87df8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87dfc:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87e00:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   87e02:	f000 0002 	and.w	r0, r0, #2
   87e06:	4770      	bx	lr

00087e08 <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
   87e08:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87e0c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87e10:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
   87e14:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   87e16:	f44f 60c0 	mov.w	r0, #1536	; 0x600
   87e1a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   87e1e:	6e81      	ldr	r1, [r0, #104]	; 0x68
   87e20:	f011 0f40 	tst.w	r1, #64	; 0x40
   87e24:	d0fb      	beq.n	87e1e <pmc_enable_upll_clock+0x16>
}
   87e26:	4770      	bx	lr

00087e28 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   87e28:	282c      	cmp	r0, #44	; 0x2c
   87e2a:	d835      	bhi.n	87e98 <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   87e2c:	281f      	cmp	r0, #31
   87e2e:	d817      	bhi.n	87e60 <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   87e30:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   87e34:	f2c4 010e 	movt	r1, #16398	; 0x400e
   87e38:	698a      	ldr	r2, [r1, #24]
   87e3a:	f04f 0301 	mov.w	r3, #1
   87e3e:	fa03 f300 	lsl.w	r3, r3, r0
   87e42:	401a      	ands	r2, r3
   87e44:	4293      	cmp	r3, r2
   87e46:	d02a      	beq.n	87e9e <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   87e48:	f04f 0101 	mov.w	r1, #1
   87e4c:	fa01 f000 	lsl.w	r0, r1, r0
   87e50:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   87e54:	f2c4 020e 	movt	r2, #16398	; 0x400e
   87e58:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   87e5a:	f04f 0000 	mov.w	r0, #0
   87e5e:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   87e60:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87e64:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87e68:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   87e6c:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   87e70:	f04f 0101 	mov.w	r1, #1
   87e74:	fa01 f100 	lsl.w	r1, r1, r0
   87e78:	400a      	ands	r2, r1
   87e7a:	4291      	cmp	r1, r2
   87e7c:	d012      	beq.n	87ea4 <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   87e7e:	f04f 0301 	mov.w	r3, #1
   87e82:	fa03 f000 	lsl.w	r0, r3, r0
   87e86:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   87e8a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   87e8e:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   87e92:	f04f 0000 	mov.w	r0, #0
   87e96:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   87e98:	f04f 0001 	mov.w	r0, #1
   87e9c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   87e9e:	f04f 0000 	mov.w	r0, #0
   87ea2:	4770      	bx	lr
   87ea4:	f04f 0000 	mov.w	r0, #0
}
   87ea8:	4770      	bx	lr
   87eaa:	bf00      	nop

00087eac <pmc_switch_udpck_to_upllck>:
 *
 * \param dw_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
   87eac:	ea4f 2000 	mov.w	r0, r0, lsl #8
   87eb0:	f400 6270 	and.w	r2, r0, #3840	; 0xf00
   87eb4:	f042 0101 	orr.w	r1, r2, #1
   87eb8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87ebc:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87ec0:	6399      	str	r1, [r3, #56]	; 0x38
   87ec2:	4770      	bx	lr

00087ec4 <pmc_enable_udpck>:
void pmc_enable_udpck(void)
{
# if (SAM3S || SAM4S || SAM4E)
	PMC->PMC_SCER = PMC_SCER_UDP;
# else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
   87ec4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87ec8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87ecc:	f04f 0220 	mov.w	r2, #32
   87ed0:	601a      	str	r2, [r3, #0]
   87ed2:	4770      	bx	lr

00087ed4 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   87ed4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87ed8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87edc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   87ede:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   87ee2:	f420 0178 	bic.w	r1, r0, #16252928	; 0xf80000
	PMC->PMC_FSMR |= ul_inputs;
   87ee6:	430a      	orrs	r2, r1
   87ee8:	671a      	str	r2, [r3, #112]	; 0x70
   87eea:	4770      	bx	lr

00087eec <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_fastrc_used;
   87eec:	f241 53b0 	movw	r3, #5552	; 0x15b0
   87ef0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87ef4:	7818      	ldrb	r0, [r3, #0]
}
   87ef6:	f080 0001 	eor.w	r0, r0, #1
   87efa:	4770      	bx	lr

00087efc <udd_sleep_mode>:
 *
 * \param b_enable true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   87efc:	4603      	mov	r3, r0
   87efe:	2800      	cmp	r0, #0
   87f00:	d149      	bne.n	87f96 <udd_sleep_mode+0x9a>
   87f02:	f241 52b4 	movw	r2, #5556	; 0x15b4
   87f06:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87f0a:	7811      	ldrb	r1, [r2, #0]
   87f0c:	2900      	cmp	r1, #0
   87f0e:	d03c      	beq.n	87f8a <udd_sleep_mode+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87f10:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87f14:	b672      	cpsid	i
   87f16:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87f1a:	f240 22a0 	movw	r2, #672	; 0x2a0
   87f1e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87f22:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   87f24:	f641 42b4 	movw	r2, #7348	; 0x1cb4
   87f28:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87f2c:	7890      	ldrb	r0, [r2, #2]
   87f2e:	f100 30ff 	add.w	r0, r0, #4294967295
   87f32:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87f34:	bb49      	cbnz	r1, 87f8a <udd_sleep_mode+0x8e>
		cpu_irq_enable();
   87f36:	f240 22a0 	movw	r2, #672	; 0x2a0
   87f3a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87f3e:	f04f 0101 	mov.w	r1, #1
   87f42:	7011      	strb	r1, [r2, #0]
   87f44:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87f48:	b662      	cpsie	i
   87f4a:	e01e      	b.n	87f8a <udd_sleep_mode+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87f4c:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87f50:	b672      	cpsid	i
   87f52:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87f56:	f240 22a0 	movw	r2, #672	; 0x2a0
   87f5a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87f5e:	f04f 0000 	mov.w	r0, #0
   87f62:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   87f64:	f641 42b4 	movw	r2, #7348	; 0x1cb4
   87f68:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87f6c:	7890      	ldrb	r0, [r2, #2]
   87f6e:	f100 0001 	add.w	r0, r0, #1
   87f72:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87f74:	b949      	cbnz	r1, 87f8a <udd_sleep_mode+0x8e>
		cpu_irq_enable();
   87f76:	f240 22a0 	movw	r2, #672	; 0x2a0
   87f7a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87f7e:	f04f 0101 	mov.w	r1, #1
   87f82:	7011      	strb	r1, [r2, #0]
   87f84:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87f88:	b662      	cpsie	i
	}
	if (b_idle && !udd_b_idle) {
		dbg_print("_W ");
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
   87f8a:	f241 50b4 	movw	r0, #5556	; 0x15b4
   87f8e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87f92:	7003      	strb	r3, [r0, #0]
   87f94:	4770      	bx	lr
{
	if (!b_idle && udd_b_idle) {
		dbg_print("_S ");
		sleepmgr_unlock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   87f96:	f241 52b4 	movw	r2, #5556	; 0x15b4
   87f9a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87f9e:	7810      	ldrb	r0, [r2, #0]
   87fa0:	2800      	cmp	r0, #0
   87fa2:	d0d3      	beq.n	87f4c <udd_sleep_mode+0x50>
   87fa4:	e7f1      	b.n	87f8a <udd_sleep_mode+0x8e>
   87fa6:	bf00      	nop

00087fa8 <udd_ctrl_init>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87fa8:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87fac:	b672      	cpsid	i
   87fae:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87fb2:	f240 23a0 	movw	r3, #672	; 0x2a0
   87fb6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87fba:	f04f 0100 	mov.w	r1, #0
   87fbe:	7019      	strb	r1, [r3, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   87fc0:	f24c 2020 	movw	r0, #49696	; 0xc220
   87fc4:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87fc8:	f04f 0101 	mov.w	r1, #1
   87fcc:	6001      	str	r1, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87fce:	b93a      	cbnz	r2, 87fe0 <udd_ctrl_init+0x38>
		cpu_irq_enable();
   87fd0:	f240 23a0 	movw	r3, #672	; 0x2a0
   87fd4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87fd8:	7019      	strb	r1, [r3, #0]
   87fda:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87fde:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   87fe0:	f24c 1060 	movw	r0, #49504	; 0xc160
   87fe4:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87fe8:	f04f 0102 	mov.w	r1, #2
   87fec:	6001      	str	r1, [r0, #0]

	udd_g_ctrlreq.callback = NULL;
   87fee:	f641 42bc 	movw	r2, #7356	; 0x1cbc
   87ff2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87ff6:	f04f 0300 	mov.w	r3, #0
   87ffa:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   87ffc:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   87ffe:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   88000:	f241 6130 	movw	r1, #5680	; 0x1630
   88004:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88008:	700b      	strb	r3, [r1, #0]
   8800a:	4770      	bx	lr

0008800c <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   8800c:	f241 6330 	movw	r3, #5680	; 0x1630
   88010:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88014:	f04f 0205 	mov.w	r2, #5
   88018:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   8801a:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   8801e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88022:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   88026:	6001      	str	r1, [r0, #0]
   88028:	4770      	bx	lr
   8802a:	bf00      	nop

0008802c <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   8802c:	f241 6330 	movw	r3, #5680	; 0x1630
   88030:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88034:	f04f 0203 	mov.w	r2, #3
   88038:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8803a:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8803e:	b672      	cpsid	i
   88040:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   88044:	f240 21a0 	movw	r1, #672	; 0x2a0
   88048:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8804c:	f04f 0300 	mov.w	r3, #0
   88050:	700b      	strb	r3, [r1, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   88052:	f24c 1260 	movw	r2, #49504	; 0xc160
   88056:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8805a:	f04f 0101 	mov.w	r1, #1
   8805e:	6011      	str	r1, [r2, #0]
	udd_enable_in_send_interrupt(0);
   88060:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   88064:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88068:	6019      	str	r1, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   8806a:	f04f 0108 	mov.w	r1, #8
   8806e:	6011      	str	r1, [r2, #0]
	udd_enable_nak_out_interrupt(0);
   88070:	6019      	str	r1, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88072:	b948      	cbnz	r0, 88088 <udd_ctrl_send_zlp_in+0x5c>
		cpu_irq_enable();
   88074:	f240 20a0 	movw	r0, #672	; 0x2a0
   88078:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8807c:	f04f 0201 	mov.w	r2, #1
   88080:	7002      	strb	r2, [r0, #0]
   88082:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   88086:	b662      	cpsie	i
   88088:	4770      	bx	lr
   8808a:	bf00      	nop

0008808c <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   8808c:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   8808e:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   88092:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88096:	6918      	ldr	r0, [r3, #16]
   88098:	b100      	cbz	r0, 8809c <udd_ctrl_endofrequest+0x10>
		udd_g_ctrlreq.callback();
   8809a:	4780      	blx	r0
   8809c:	bd08      	pop	{r3, pc}
   8809e:	bf00      	nop

000880a0 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
   880a0:	b570      	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   880a2:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   880a6:	b672      	cpsid	i
   880a8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   880ac:	f240 23a0 	movw	r3, #672	; 0x2a0
   880b0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   880b4:	f04f 0100 	mov.w	r1, #0
   880b8:	7019      	strb	r1, [r3, #0]
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
   880ba:	f24c 2020 	movw	r0, #49696	; 0xc220
   880be:	f2c4 000a 	movt	r0, #16394	; 0x400a
   880c2:	f04f 0101 	mov.w	r1, #1
   880c6:	6001      	str	r1, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   880c8:	b93a      	cbnz	r2, 880da <udd_ctrl_in_sent+0x3a>
		cpu_irq_enable();
   880ca:	f240 23a0 	movw	r3, #672	; 0x2a0
   880ce:	f2c2 0307 	movt	r3, #8199	; 0x2007
   880d2:	7019      	strb	r1, [r3, #0]
   880d4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   880d8:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   880da:	f241 6030 	movw	r0, #5680	; 0x1630
   880de:	f2c2 0007 	movt	r0, #8199	; 0x2007
   880e2:	7801      	ldrb	r1, [r0, #0]
   880e4:	2903      	cmp	r1, #3
   880e6:	d10a      	bne.n	880fe <udd_ctrl_in_sent+0x5e>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   880e8:	f248 028d 	movw	r2, #32909	; 0x808d
   880ec:	f2c0 0208 	movt	r2, #8
   880f0:	4790      	blx	r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
   880f2:	f647 70a9 	movw	r0, #32681	; 0x7fa9
   880f6:	f2c0 0008 	movt	r0, #8
   880fa:	4780      	blx	r0
		return;
   880fc:	bd70      	pop	{r4, r5, r6, pc}
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   880fe:	f241 6432 	movw	r4, #5682	; 0x1632
   88102:	f2c2 0407 	movt	r4, #8199	; 0x2007
   88106:	8823      	ldrh	r3, [r4, #0]
   88108:	f641 42bc 	movw	r2, #7356	; 0x1cbc
   8810c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88110:	8990      	ldrh	r0, [r2, #12]
   88112:	1ac1      	subs	r1, r0, r3
   88114:	b28c      	uxth	r4, r1
	if (0 == nb_remain) {
   88116:	2c00      	cmp	r4, #0
   88118:	d155      	bne.n	881c6 <udd_ctrl_in_sent+0x126>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous playlaod buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   8811a:	f241 52b2 	movw	r2, #5554	; 0x15b2
   8811e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88122:	8810      	ldrh	r0, [r2, #0]
   88124:	181b      	adds	r3, r3, r0
   88126:	b299      	uxth	r1, r3
   88128:	8011      	strh	r1, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   8812a:	f641 42bc 	movw	r2, #7356	; 0x1cbc
   8812e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88132:	88d0      	ldrh	r0, [r2, #6]
   88134:	4288      	cmp	r0, r1
   88136:	d005      	beq.n	88144 <udd_ctrl_in_sent+0xa4>
					|| b_shortpacket) {
   88138:	f241 53b5 	movw	r3, #5557	; 0x15b5
   8813c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88140:	7819      	ldrb	r1, [r3, #0]
   88142:	b361      	cbz	r1, 8819e <udd_ctrl_in_sent+0xfe>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   88144:	f241 6030 	movw	r0, #5680	; 0x1630
   88148:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8814c:	f04f 0204 	mov.w	r2, #4
   88150:	7002      	strb	r2, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   88152:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   88156:	b672      	cpsid	i
   88158:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8815c:	f240 23a0 	movw	r3, #672	; 0x2a0
   88160:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88164:	f04f 0000 	mov.w	r0, #0
   88168:	7018      	strb	r0, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
   8816a:	f24c 1360 	movw	r3, #49504	; 0xc160
   8816e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88172:	f04f 0210 	mov.w	r2, #16
   88176:	601a      	str	r2, [r3, #0]
	udd_enable_nak_in_interrupt(0);
   88178:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   8817c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88180:	6002      	str	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88182:	2900      	cmp	r1, #0
   88184:	f040 80a7 	bne.w	882d6 <udd_ctrl_in_sent+0x236>
		cpu_irq_enable();
   88188:	f240 21a0 	movw	r1, #672	; 0x2a0
   8818c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88190:	f04f 0301 	mov.w	r3, #1
   88194:	700b      	strb	r3, [r1, #0]
   88196:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8819a:	b662      	cpsie	i
   8819c:	bd70      	pop	{r4, r5, r6, pc}
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   8819e:	f641 45bc 	movw	r5, #7356	; 0x1cbc
   881a2:	f2c2 0507 	movt	r5, #8199	; 0x2007
   881a6:	696e      	ldr	r6, [r5, #20]
   881a8:	b1ce      	cbz	r6, 881de <udd_ctrl_in_sent+0x13e>
				|| (!udd_g_ctrlreq.over_under_run())) {
   881aa:	47b0      	blx	r6
   881ac:	b1b8      	cbz	r0, 881de <udd_ctrl_in_sent+0x13e>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   881ae:	f241 6432 	movw	r4, #5682	; 0x1632
   881b2:	f2c2 0407 	movt	r4, #8199	; 0x2007
   881b6:	f04f 0200 	mov.w	r2, #0
   881ba:	8022      	strh	r2, [r4, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   881bc:	f641 40bc 	movw	r0, #7356	; 0x1cbc
   881c0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   881c4:	8984      	ldrh	r4, [r0, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   881c6:	2c3f      	cmp	r4, #63	; 0x3f
   881c8:	d909      	bls.n	881de <udd_ctrl_in_sent+0x13e>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
   881ca:	f241 53b5 	movw	r3, #5557	; 0x15b5
   881ce:	f2c2 0307 	movt	r3, #8199	; 0x2007
   881d2:	f04f 0100 	mov.w	r1, #0
   881d6:	7019      	strb	r1, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   881d8:	f04f 0440 	mov.w	r4, #64	; 0x40
   881dc:	e006      	b.n	881ec <udd_ctrl_in_sent+0x14c>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
   881de:	f241 55b5 	movw	r5, #5557	; 0x15b5
   881e2:	f2c2 0507 	movt	r5, #8199	; 0x2007
   881e6:	f04f 0601 	mov.w	r6, #1
   881ea:	702e      	strb	r6, [r5, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   881ec:	f641 42bc 	movw	r2, #7356	; 0x1cbc
   881f0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   881f4:	6890      	ldr	r0, [r2, #8]
   881f6:	f241 6332 	movw	r3, #5682	; 0x1632
   881fa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   881fe:	881e      	ldrh	r6, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   88200:	f3ef 8110 	mrs	r1, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   88204:	f1d1 0501 	rsbs	r5, r1, #1
   88208:	bf38      	it	cc
   8820a:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8820c:	b672      	cpsid	i
   8820e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   88212:	f240 22a0 	movw	r2, #672	; 0x2a0
   88216:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8821a:	f04f 0300 	mov.w	r3, #0
   8821e:	7013      	strb	r3, [r2, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
   88220:	f24c 1130 	movw	r1, #49456	; 0xc130
   88224:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88228:	680a      	ldr	r2, [r1, #0]
   8822a:	f012 0f02 	tst.w	r2, #2
   8822e:	d101      	bne.n	88234 <udd_ctrl_in_sent+0x194>
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   88230:	b99c      	cbnz	r4, 8825a <udd_ctrl_in_sent+0x1ba>
   88232:	e035      	b.n	882a0 <udd_ctrl_in_sent+0x200>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88234:	b14d      	cbz	r5, 8824a <udd_ctrl_in_sent+0x1aa>
		cpu_irq_enable();
   88236:	f240 20a0 	movw	r0, #672	; 0x2a0
   8823a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8823e:	f04f 0201 	mov.w	r2, #1
   88242:	7002      	strb	r2, [r0, #0]
   88244:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   88248:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   8824a:	f241 6130 	movw	r1, #5680	; 0x1630
   8824e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88252:	f04f 0304 	mov.w	r3, #4
   88256:	700b      	strb	r3, [r1, #0]
		return; // Exit of IN DATA phase
   88258:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   8825a:	1982      	adds	r2, r0, r6
		cpu_irq_restore(flags);
	}
}


static void udd_ctrl_in_sent(void)
   8825c:	f04f 0300 	mov.w	r3, #0
   88260:	f2c2 0318 	movt	r3, #8216	; 0x2018
   88264:	ea6f 0003 	mvn.w	r0, r3
   88268:	1901      	adds	r1, r0, r4
   8826a:	f001 0001 	and.w	r0, r1, #1
   8826e:	f102 32ff 	add.w	r2, r2, #4294967295
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
   88272:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   88276:	f803 1b01 	strb.w	r1, [r3], #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   8827a:	b2d9      	uxtb	r1, r3
   8827c:	42a1      	cmp	r1, r4
   8827e:	d32b      	bcc.n	882d8 <udd_ctrl_in_sent+0x238>
   88280:	e00e      	b.n	882a0 <udd_ctrl_in_sent+0x200>
   88282:	f102 0001 	add.w	r0, r2, #1
		*ptr_dest++ = *ptr_src++;
   88286:	7852      	ldrb	r2, [r2, #1]
   88288:	4619      	mov	r1, r3
   8828a:	f801 2b01 	strb.w	r2, [r1], #1
   8828e:	f100 0201 	add.w	r2, r0, #1
   88292:	7840      	ldrb	r0, [r0, #1]
   88294:	7058      	strb	r0, [r3, #1]
   88296:	f101 0301 	add.w	r3, r1, #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   8829a:	b2d9      	uxtb	r1, r3
   8829c:	42a1      	cmp	r1, r4
   8829e:	d3f0      	bcc.n	88282 <udd_ctrl_in_sent+0x1e2>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   882a0:	19a4      	adds	r4, r4, r6
   882a2:	f241 6332 	movw	r3, #5682	; 0x1632
   882a6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   882aa:	801c      	strh	r4, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   882ac:	f24c 1060 	movw	r0, #49504	; 0xc160
   882b0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   882b4:	f04f 0201 	mov.w	r2, #1
   882b8:	6002      	str	r2, [r0, #0]
	udd_enable_in_send_interrupt(0);
   882ba:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   882be:	f2c4 010a 	movt	r1, #16394	; 0x400a
   882c2:	600a      	str	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   882c4:	b13d      	cbz	r5, 882d6 <udd_ctrl_in_sent+0x236>
		cpu_irq_enable();
   882c6:	f240 23a0 	movw	r3, #672	; 0x2a0
   882ca:	f2c2 0307 	movt	r3, #8199	; 0x2007
   882ce:	701a      	strb	r2, [r3, #0]
   882d0:	f3bf 8f5f 	dmb	sy
   882d4:	b662      	cpsie	i
   882d6:	bd70      	pop	{r4, r5, r6, pc}
   882d8:	b240      	sxtb	r0, r0
   882da:	2800      	cmp	r0, #0
   882dc:	d0d1      	beq.n	88282 <udd_ctrl_in_sent+0x1e2>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
   882de:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   882e2:	f803 1b01 	strb.w	r1, [r3], #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   882e6:	b2d8      	uxtb	r0, r3
   882e8:	42a0      	cmp	r0, r4
   882ea:	d3ca      	bcc.n	88282 <udd_ctrl_in_sent+0x1e2>
   882ec:	e7d8      	b.n	882a0 <udd_ctrl_in_sent+0x200>
   882ee:	bf00      	nop

000882f0 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   882f0:	b538      	push	{r3, r4, r5, lr}
   882f2:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
   882f4:	7d04      	ldrb	r4, [r0, #20]
   882f6:	f014 0f01 	tst.w	r4, #1
   882fa:	d013      	beq.n	88324 <udd_ep_finish_job+0x34>
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
   882fc:	7d04      	ldrb	r4, [r0, #20]
   882fe:	f36f 0400 	bfc	r4, #0, #1
   88302:	7504      	strb	r4, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   88304:	6804      	ldr	r4, [r0, #0]
   88306:	b16c      	cbz	r4, 88324 <udd_ep_finish_job+0x34>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   88308:	f44f 4541 	mov.w	r5, #49408	; 0xc100
   8830c:	f2c4 050a 	movt	r5, #16394	; 0x400a
   88310:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
   88314:	f410 7f80 	tst.w	r0, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
   88318:	bf18      	it	ne
   8831a:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   8831e:	4608      	mov	r0, r1
   88320:	6899      	ldr	r1, [r3, #8]
   88322:	47a0      	blx	r4
   88324:	bd38      	pop	{r3, r4, r5, pc}
   88326:	bf00      	nop

00088328 <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   88328:	b508      	push	{r3, lr}
	ep &= USB_EP_ADDR_MASK;
   8832a:	f000 020f 	and.w	r2, r0, #15

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   8832e:	f102 30ff 	add.w	r0, r2, #4294967295
   88332:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   88336:	f241 53b8 	movw	r3, #5560	; 0x15b8
   8833a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8833e:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
   88342:	f04f 0101 	mov.w	r1, #1
   88346:	f248 23f1 	movw	r3, #33521	; 0x82f1
   8834a:	f2c0 0308 	movt	r3, #8
   8834e:	4798      	blx	r3
   88350:	bd08      	pop	{r3, pc}
   88352:	bf00      	nop

00088354 <udd_ep_trans_done>:
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

#ifdef UDD_EP_DMA_SUPPORTED
static void udd_ep_trans_done(udd_ep_id_t ep)
{
   88354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88356:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   88358:	f100 31ff 	add.w	r1, r0, #4294967295
   8835c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   88360:	f241 53b8 	movw	r3, #5560	; 0x15b8
   88364:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88368:	eb03 03c0 	add.w	r3, r3, r0, lsl #3

	if (!ptr_job->busy) {
   8836c:	7d18      	ldrb	r0, [r3, #20]
   8836e:	f010 0f01 	tst.w	r0, #1
   88372:	f000 80c6 	beq.w	88502 <udd_ep_trans_done+0x1ae>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   88376:	68dc      	ldr	r4, [r3, #12]
   88378:	689d      	ldr	r5, [r3, #8]
   8837a:	42ac      	cmp	r4, r5
   8837c:	f000 8082 	beq.w	88484 <udd_ep_trans_done+0x130>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   88380:	1b2d      	subs	r5, r5, r4

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   88382:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   88386:	bf92      	itee	ls
   88388:	042e      	lslls	r6, r5, #16
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   8838a:	f44f 3580 	movhi.w	r5, #65536	; 0x10000

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
   8838e:	2600      	movhi	r6, #0
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
		}
		if (Is_udd_endpoint_in(ep)) {
   88390:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   88394:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88398:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   8839c:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
   883a0:	f417 7f80 	tst.w	r7, #256	; 0x100
   883a4:	d011      	beq.n	883ca <udd_ep_trans_done+0x76>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   883a6:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
   883aa:	f3c7 1002 	ubfx	r0, r7, #4, #3
   883ae:	f04f 0708 	mov.w	r7, #8
   883b2:	fa07 f000 	lsl.w	r0, r7, r0
   883b6:	f100 30ff 	add.w	r0, r0, #4294967295
   883ba:	4205      	tst	r5, r0
   883bc:	d017      	beq.n	883ee <udd_ep_trans_done+0x9a>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
   883be:	433e      	orrs	r6, r7
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   883c0:	7d1f      	ldrb	r7, [r3, #20]
   883c2:	f36f 0741 	bfc	r7, #1, #1
   883c6:	751f      	strb	r7, [r3, #20]
   883c8:	e011      	b.n	883ee <udd_ep_trans_done+0x9a>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   883ca:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
   883ce:	f3c0 27c1 	ubfx	r7, r0, #11, #2
   883d2:	2f01      	cmp	r7, #1
   883d4:	d109      	bne.n	883ea <udd_ep_trans_done+0x96>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   883d6:	f8dc 0000 	ldr.w	r0, [ip]
   883da:	f3c0 1002 	ubfx	r0, r0, #4, #3
   883de:	f04f 0708 	mov.w	r7, #8
   883e2:	fa07 f000 	lsl.w	r0, r7, r0
   883e6:	4285      	cmp	r5, r0
   883e8:	d801      	bhi.n	883ee <udd_ep_trans_done+0x9a>

				// Enable short packet reception
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   883ea:	f046 0614 	orr.w	r6, r6, #20
						| UOTGHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   883ee:	f44f 4043 	mov.w	r0, #49920	; 0xc300
   883f2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   883f6:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   883fa:	685f      	ldr	r7, [r3, #4]
   883fc:	193c      	adds	r4, r7, r4
   883fe:	6044      	str	r4, [r0, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   88400:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   88404:	f1d7 0c01 	rsbs	ip, r7, #1
   88408:	bf38      	it	cc
   8840a:	f04f 0c00 	movcc.w	ip, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8840e:	b672      	cpsid	i
   88410:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   88414:	f240 24a0 	movw	r4, #672	; 0x2a0
   88418:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8841c:	f04f 0700 	mov.w	r7, #0
   88420:	7027      	strb	r7, [r4, #0]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   88422:	68c4      	ldr	r4, [r0, #12]
   88424:	f014 0f10 	tst.w	r4, #16
   88428:	d11d      	bne.n	88466 <udd_ep_trans_done+0x112>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   8842a:	f046 0621 	orr.w	r6, r6, #33	; 0x21
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
				& UOTGHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   8842e:	6086      	str	r6, [r0, #8]
			ptr_job->buf_cnt += next_trans;
   88430:	68da      	ldr	r2, [r3, #12]
   88432:	1950      	adds	r0, r2, r5
   88434:	60d8      	str	r0, [r3, #12]
			ptr_job->buf_load = next_trans;
   88436:	611d      	str	r5, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   88438:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   8843c:	fa03 f101 	lsl.w	r1, r3, r1
   88440:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   88444:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88448:	6191      	str	r1, [r2, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8844a:	f1bc 0f00 	cmp.w	ip, #0
   8844e:	d058      	beq.n	88502 <udd_ep_trans_done+0x1ae>
		cpu_irq_enable();
   88450:	f240 20a0 	movw	r0, #672	; 0x2a0
   88454:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88458:	f04f 0301 	mov.w	r3, #1
   8845c:	7003      	strb	r3, [r0, #0]
   8845e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   88462:	b662      	cpsie	i
   88464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88466:	f1bc 0f00 	cmp.w	ip, #0
   8846a:	d009      	beq.n	88480 <udd_ep_trans_done+0x12c>
		cpu_irq_enable();
   8846c:	f240 21a0 	movw	r1, #672	; 0x2a0
   88470:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88474:	f04f 0001 	mov.w	r0, #1
   88478:	7008      	strb	r0, [r1, #0]
   8847a:	f3bf 8f5f 	dmb	sy
   8847e:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   88480:	68d9      	ldr	r1, [r3, #12]
   88482:	6099      	str	r1, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   88484:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   88488:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8848c:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
   88490:	f411 7f80 	tst.w	r1, #256	; 0x100
   88494:	d02d      	beq.n	884f2 <udd_ep_trans_done+0x19e>
		if (ptr_job->b_shortpacket) {
   88496:	7d18      	ldrb	r0, [r3, #20]
   88498:	f000 0102 	and.w	r1, r0, #2
   8849c:	b2c8      	uxtb	r0, r1
   8849e:	b340      	cbz	r0, 884f2 <udd_ep_trans_done+0x19e>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
   884a0:	f24c 1060 	movw	r0, #49504	; 0xc160
   884a4:	f2c4 000a 	movt	r0, #16394	; 0x400a
   884a8:	f04f 0101 	mov.w	r1, #1
   884ac:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			if (Is_udd_write_enabled(ep)) {
   884b0:	f24c 1330 	movw	r3, #49456	; 0xc130
   884b4:	f2c4 030a 	movt	r3, #16394	; 0x400a
   884b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   884bc:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   884c0:	d005      	beq.n	884ce <udd_ep_trans_done+0x17a>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
   884c2:	f24c 1390 	movw	r3, #49552	; 0xc190
   884c6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   884ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
   884ce:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   884d2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   884d6:	f04f 0101 	mov.w	r1, #1
   884da:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			udd_enable_endpoint_interrupt(ep);
   884de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   884e2:	fa03 f202 	lsl.w	r2, r3, r2
   884e6:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   884ea:	f2c4 000a 	movt	r0, #16394	; 0x400a
   884ee:	6182      	str	r2, [r0, #24]
			return;
   884f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   884f2:	4618      	mov	r0, r3
   884f4:	f04f 0100 	mov.w	r1, #0
   884f8:	f248 23f1 	movw	r3, #33521	; 0x82f1
   884fc:	f2c0 0308 	movt	r3, #8
   88500:	4798      	blx	r3
   88502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00088504 <udd_enable>:
	return true;
}


void udd_enable(void)
{
   88504:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   88506:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8850a:	b672      	cpsid	i
   8850c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   88510:	f240 23a0 	movw	r3, #672	; 0x2a0
   88514:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88518:	f04f 0200 	mov.w	r2, #0
   8851c:	701a      	strb	r2, [r3, #0]
		cpu_irq_restore(flags);
		return;
	}
#else
	// SINGLE DEVICE MODE INITIALIZATION
	pmc_enable_periph_clk(ID_UOTGHS);
   8851e:	f04f 0028 	mov.w	r0, #40	; 0x28
   88522:	f647 6129 	movw	r1, #32297	; 0x7e29
   88526:	f2c0 0108 	movt	r1, #8
   8852a:	4788      	blx	r1
	sysclk_enable_usb();
   8852c:	f245 7035 	movw	r0, #22325	; 0x5735
   88530:	f2c0 0008 	movt	r0, #8
   88534:	4780      	blx	r0
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   88536:	f44f 4361 	mov.w	r3, #57600	; 0xe100
   8853a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8853e:	f04f 0250 	mov.w	r2, #80	; 0x50
   88542:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   88546:	f44f 7180 	mov.w	r1, #256	; 0x100
   8854a:	6059      	str	r1, [r3, #4]
	NVIC_SetPriority((IRQn_Type) ID_UOTGHS, UDD_USB_INT_LEVEL);
	NVIC_EnableIRQ((IRQn_Type) ID_UOTGHS);

	// Always authorize asynchrone USB interrupts to exit of sleep mode
	// For SAM USB wake up device except BACKUP mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   8854c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   88550:	f647 63d5 	movw	r3, #32469	; 0x7ed5
   88554:	f2c0 0308 	movt	r3, #8
   88558:	4798      	blx	r3
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
#else
	// ID pin not used then force device mode
	otg_disable_id_pin();
   8855a:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   8855e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88562:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
   88566:	f022 7180 	bic.w	r1, r2, #16777216	; 0x1000000
   8856a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
	otg_force_device_mode();
   8856e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   88572:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
   88576:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
   8857a:	f8d0 1800 	ldr.w	r1, [r0, #2048]	; 0x800
   8857e:	f021 7380 	bic.w	r3, r1, #16777216	; 0x1000000
   88582:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
#endif
	// Enable USB hardware
	otg_enable_pad();
   88586:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
   8858a:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
   8858e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
	otg_enable();
   88592:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   88596:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
   8859a:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
   8859e:	6801      	ldr	r1, [r0, #0]
   885a0:	f421 5380 	bic.w	r3, r1, #4096	; 0x1000
   885a4:	6003      	str	r3, [r0, #0]
# ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   885a6:	6802      	ldr	r2, [r0, #0]
   885a8:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
   885ac:	6001      	str	r1, [r0, #0]
	udd_high_speed_disable();
# endif
#endif // USB_DEVICE_LOW_SPEED

	// Check USB clock
	otg_unfreeze_clock();
   885ae:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   885b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
   885b6:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   885ba:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   885be:	f2c4 000a 	movt	r0, #16394	; 0x400a
   885c2:	f8d0 1804 	ldr.w	r1, [r0, #2052]	; 0x804
   885c6:	f411 4f80 	tst.w	r1, #16384	; 0x4000
   885ca:	d0fa      	beq.n	885c2 <udd_enable+0xbe>

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   885cc:	f241 53b8 	movw	r3, #5560	; 0x15b8
   885d0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   885d4:	7d1a      	ldrb	r2, [r3, #20]
		udd_ep_job[i].stall_requested = false;
   885d6:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
   885da:	f36f 0082 	bfc	r0, #2, #1
   885de:	7518      	strb	r0, [r3, #20]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   885e0:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
		udd_ep_job[i].stall_requested = false;
   885e4:	f001 02fe 	and.w	r2, r1, #254	; 0xfe
   885e8:	f36f 0282 	bfc	r2, #2, #1
   885ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   885f0:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
		udd_ep_job[i].stall_requested = false;
   885f4:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
   885f8:	f36f 0182 	bfc	r1, #2, #1
   885fc:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   88600:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
		udd_ep_job[i].stall_requested = false;
   88604:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
   88608:	f36f 0082 	bfc	r0, #2, #1
   8860c:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   88610:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
		udd_ep_job[i].stall_requested = false;
   88614:	f001 02fe 	and.w	r2, r1, #254	; 0xfe
   88618:	f36f 0282 	bfc	r2, #2, #1
   8861c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
#endif

	otg_ack_vbus_transition();
   88620:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88624:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88628:	f04f 0002 	mov.w	r0, #2
   8862c:	f8c3 0808 	str.w	r0, [r3, #2056]	; 0x808
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
   88630:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
   88634:	f411 6f00 	tst.w	r1, #2048	; 0x800
   88638:	d005      	beq.n	88646 <udd_enable+0x142>
		otg_raise_vbus_transition();
   8863a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   8863e:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88642:	f8c2 080c 	str.w	r0, [r2, #2060]	; 0x80c
	}
	otg_enable_vbus_interrupt();
   88646:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8864a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8864e:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
   88652:	f040 0102 	orr.w	r1, r0, #2
   88656:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	otg_freeze_clock();
   8865a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8865e:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   88662:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800

#ifndef UDD_NO_SLEEP_MGR
	if (!udd_b_sleep_initialized) {
   88666:	f241 53b1 	movw	r3, #5553	; 0x15b1
   8866a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8866e:	7819      	ldrb	r1, [r3, #0]
   88670:	bb59      	cbnz	r1, 886ca <udd_enable+0x1c6>
		udd_b_sleep_initialized = true;
   88672:	f241 50b1 	movw	r0, #5553	; 0x15b1
   88676:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8867a:	f04f 0301 	mov.w	r3, #1
   8867e:	7003      	strb	r3, [r0, #0]
		// Initialize the sleep mode authorized for the USB suspend mode
		udd_b_idle = false;
   88680:	f04f 0000 	mov.w	r0, #0
   88684:	f241 51b4 	movw	r1, #5556	; 0x15b4
   88688:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8868c:	7008      	strb	r0, [r1, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8868e:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   88692:	b672      	cpsid	i
   88694:	f3bf 8f5f 	dmb	sy
   88698:	f240 23a0 	movw	r3, #672	; 0x2a0
   8869c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   886a0:	7018      	strb	r0, [r3, #0]
   886a2:	f641 40b4 	movw	r0, #7348	; 0x1cb4
   886a6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   886aa:	78c1      	ldrb	r1, [r0, #3]
   886ac:	f101 0101 	add.w	r1, r1, #1
   886b0:	70c1      	strb	r1, [r0, #3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   886b2:	b98a      	cbnz	r2, 886d8 <udd_enable+0x1d4>
		cpu_irq_enable();
   886b4:	f240 23a0 	movw	r3, #672	; 0x2a0
   886b8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   886bc:	f04f 0201 	mov.w	r2, #1
   886c0:	701a      	strb	r2, [r3, #0]
   886c2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   886c6:	b662      	cpsie	i
   886c8:	e006      	b.n	886d8 <udd_enable+0x1d4>
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_SUSPEND);
	} else {
		udd_sleep_mode(false); // Enter idle mode
   886ca:	f04f 0000 	mov.w	r0, #0
   886ce:	f647 62fd 	movw	r2, #32509	; 0x7efd
   886d2:	f2c0 0208 	movt	r2, #8
   886d6:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   886d8:	b94c      	cbnz	r4, 886ee <udd_enable+0x1ea>
		cpu_irq_enable();
   886da:	f240 20a0 	movw	r0, #672	; 0x2a0
   886de:	f2c2 0007 	movt	r0, #8199	; 0x2007
   886e2:	f04f 0101 	mov.w	r1, #1
   886e6:	7001      	strb	r1, [r0, #0]
   886e8:	f3bf 8f5f 	dmb	sy
   886ec:	b662      	cpsie	i
   886ee:	bd10      	pop	{r4, pc}

000886f0 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   886f0:	b570      	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   886f2:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   886f6:	b672      	cpsid	i
   886f8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   886fc:	f240 23a0 	movw	r3, #672	; 0x2a0
   88700:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88704:	f04f 0200 	mov.w	r2, #0
   88708:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   8870a:	f04f 0001 	mov.w	r0, #1
   8870e:	f647 61fd 	movw	r1, #32509	; 0x7efd
   88712:	f2c0 0108 	movt	r1, #8
   88716:	4788      	blx	r1
	otg_unfreeze_clock();
   88718:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   8871c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88720:	f8d0 5800 	ldr.w	r5, [r0, #2048]	; 0x800
   88724:	f425 4680 	bic.w	r6, r5, #16384	; 0x4000
   88728:	f8c0 6800 	str.w	r6, [r0, #2048]	; 0x800

	// This section of clock check can be improved with a chek of
	// USB clock source via sysclk()
	// Check USB clock because the source can be a PLL
	while (!Is_otg_clock_usable());
   8872c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   88730:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88734:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   88738:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   8873c:	d0fa      	beq.n	88734 <udd_attach+0x44>

	// Authorize attach if Vbus is present
	udd_attach_device();
   8873e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88742:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88746:	6819      	ldr	r1, [r3, #0]
   88748:	f421 7080 	bic.w	r0, r1, #256	; 0x100
   8874c:	6018      	str	r0, [r3, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   8874e:	f04f 0608 	mov.w	r6, #8
   88752:	619e      	str	r6, [r3, #24]
	udd_enable_suspend_interrupt();
   88754:	f04f 0101 	mov.w	r1, #1
   88758:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
   8875a:	f04f 0210 	mov.w	r2, #16
   8875e:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   88760:	f04f 0504 	mov.w	r5, #4
   88764:	619d      	str	r5, [r3, #24]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   88766:	f04f 0002 	mov.w	r0, #2
   8876a:	6198      	str	r0, [r3, #24]
#endif
	// Reset following interupts flag
	udd_ack_reset();
   8876c:	609e      	str	r6, [r3, #8]
	udd_ack_sof();
   8876e:	609d      	str	r5, [r3, #8]
	udd_ack_msof();
   88770:	6098      	str	r0, [r3, #8]

	// The first suspend interrupt must be forced
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
   88772:	60d9      	str	r1, [r3, #12]

	udd_ack_wake_up();
   88774:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   88776:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8877a:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   8877e:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88782:	b93c      	cbnz	r4, 88794 <udd_attach+0xa4>
		cpu_irq_enable();
   88784:	f240 23a0 	movw	r3, #672	; 0x2a0
   88788:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8878c:	7019      	strb	r1, [r3, #0]
   8878e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   88792:	b662      	cpsie	i
   88794:	bd70      	pop	{r4, r5, r6, pc}
   88796:	bf00      	nop

00088798 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
   88798:	b508      	push	{r3, lr}
	otg_unfreeze_clock();
   8879a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8879e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   887a2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   887a6:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   887aa:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800

	// Detach device from the bus
	udd_detach_device();
   887ae:	6819      	ldr	r1, [r3, #0]
   887b0:	f441 7280 	orr.w	r2, r1, #256	; 0x100
   887b4:	601a      	str	r2, [r3, #0]
	otg_freeze_clock();
   887b6:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
   887ba:	f440 4180 	orr.w	r1, r0, #16384	; 0x4000
   887be:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	udd_sleep_mode(false);
   887c2:	f04f 0000 	mov.w	r0, #0
   887c6:	f647 63fd 	movw	r3, #32509	; 0x7efd
   887ca:	f2c0 0308 	movt	r3, #8
   887ce:	4798      	blx	r3
   887d0:	bd08      	pop	{r3, pc}
   887d2:	bf00      	nop

000887d4 <UOTGHS_Handler>:
void udd_interrupt(void);
void udd_interrupt(void)
#else
ISR(UDD_USB_INT_FUN)
#endif
{
   887d4:	b570      	push	{r4, r5, r6, lr}
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   887d6:	f647 63ed 	movw	r3, #32493	; 0x7eed
   887da:	f2c0 0308 	movt	r3, #8
   887de:	4798      	blx	r3
   887e0:	b990      	cbnz	r0, 88808 <UOTGHS_Handler+0x34>
   887e2:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   887e6:	f2c4 000a 	movt	r0, #16394	; 0x400a
   887ea:	6841      	ldr	r1, [r0, #4]
   887ec:	f011 0f01 	tst.w	r1, #1
   887f0:	d10a      	bne.n	88808 <UOTGHS_Handler+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   887f2:	b672      	cpsid	i
   887f4:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   887f8:	f240 20a0 	movw	r0, #672	; 0x2a0
   887fc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88800:	f04f 0200 	mov.w	r2, #0
   88804:	7002      	strb	r2, [r0, #0]
		return;
   88806:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_sof()) {
   88808:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   8880c:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88810:	6853      	ldr	r3, [r2, #4]
   88812:	f013 0f04 	tst.w	r3, #4
   88816:	d016      	beq.n	88846 <UOTGHS_Handler+0x72>
		udd_ack_sof();
   88818:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   8881c:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88820:	f04f 0004 	mov.w	r0, #4
   88824:	6088      	str	r0, [r1, #8]
		if (Is_udd_full_speed_mode()) {
   88826:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
   8882a:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   8882e:	d104      	bne.n	8883a <UOTGHS_Handler+0x66>
			udc_sof_notify();
   88830:	f247 13bd 	movw	r3, #29117	; 0x71bd
   88834:	f2c0 0308 	movt	r3, #8
   88838:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   8883a:	f245 21d5 	movw	r1, #21205	; 0x52d5
   8883e:	f2c0 0108 	movt	r1, #8
   88842:	4788      	blx	r1
#endif
		goto udd_interrupt_sof_end;
   88844:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_msof()) {
   88846:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   8884a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8884e:	6841      	ldr	r1, [r0, #4]
   88850:	f011 0f02 	tst.w	r1, #2
   88854:	d00c      	beq.n	88870 <UOTGHS_Handler+0x9c>
		udd_ack_msof();
   88856:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   8885a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8885e:	f04f 0202 	mov.w	r2, #2
   88862:	6082      	str	r2, [r0, #8]
		udc_sof_notify();
   88864:	f247 13bd 	movw	r3, #29117	; 0x71bd
   88868:	f2c0 0308 	movt	r3, #8
   8886c:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   8886e:	bd70      	pop	{r4, r5, r6, pc}


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0)) {
   88870:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   88874:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88878:	6853      	ldr	r3, [r2, #4]
   8887a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   8887e:	f000 8459 	beq.w	89134 <UOTGHS_Handler+0x960>
	}

	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   88882:	f24c 2020 	movw	r0, #49696	; 0xc220
   88886:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8888a:	f04f 0110 	mov.w	r1, #16
   8888e:	6001      	str	r1, [r0, #0]
	udd_disable_nak_out_interrupt(0);
   88890:	f04f 0208 	mov.w	r2, #8
   88894:	6002      	str	r2, [r0, #0]

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
   88896:	f24c 1330 	movw	r3, #49456	; 0xc130
   8889a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8889e:	6818      	ldr	r0, [r3, #0]
   888a0:	f010 0f04 	tst.w	r0, #4
   888a4:	f000 80d9 	beq.w	88a5a <UOTGHS_Handler+0x286>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   888a8:	f241 6130 	movw	r1, #5680	; 0x1630
   888ac:	f2c2 0107 	movt	r1, #8199	; 0x2007
   888b0:	780a      	ldrb	r2, [r1, #0]
   888b2:	b14a      	cbz	r2, 888c8 <UOTGHS_Handler+0xf4>
		// May be a hidden DATA or ZLP phase or protocol abort
		udd_ctrl_endofrequest();
   888b4:	f248 008d 	movw	r0, #32909	; 0x808d
   888b8:	f2c0 0008 	movt	r0, #8
   888bc:	4780      	blx	r0

		// Reinitializes control endpoint management
		udd_ctrl_init();
   888be:	f647 73a9 	movw	r3, #32681	; 0x7fa9
   888c2:	f2c0 0308 	movt	r3, #8
   888c6:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   888c8:	f24c 1130 	movw	r1, #49456	; 0xc130
   888cc:	f2c4 010a 	movt	r1, #16394	; 0x400a
   888d0:	680a      	ldr	r2, [r1, #0]
   888d2:	f3c2 500a 	ubfx	r0, r2, #20, #11
   888d6:	2808      	cmp	r0, #8
   888d8:	d00c      	beq.n	888f4 <UOTGHS_Handler+0x120>
		udd_ctrl_stall_data();
   888da:	f248 010d 	movw	r1, #32781	; 0x800d
   888de:	f2c0 0108 	movt	r1, #8
   888e2:	4788      	blx	r1
		udd_ack_setup_received(0);
   888e4:	f24c 1360 	movw	r3, #49504	; 0xc160
   888e8:	f2c4 030a 	movt	r3, #16394	; 0x400a
   888ec:	f04f 0204 	mov.w	r2, #4
   888f0:	601a      	str	r2, [r3, #0]
   888f2:	bd70      	pop	{r4, r5, r6, pc}
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   888f4:	f04f 0300 	mov.w	r3, #0
   888f8:	f2c2 0318 	movt	r3, #8216	; 0x2018
   888fc:	7819      	ldrb	r1, [r3, #0]
   888fe:	f641 40bc 	movw	r0, #7356	; 0x1cbc
   88902:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88906:	7001      	strb	r1, [r0, #0]
   88908:	f04f 0201 	mov.w	r2, #1
   8890c:	f2c2 0218 	movt	r2, #8216	; 0x2018
   88910:	7813      	ldrb	r3, [r2, #0]
   88912:	7043      	strb	r3, [r0, #1]
   88914:	f04f 0102 	mov.w	r1, #2
   88918:	f2c2 0118 	movt	r1, #8216	; 0x2018
   8891c:	780a      	ldrb	r2, [r1, #0]
   8891e:	7082      	strb	r2, [r0, #2]
   88920:	f04f 0303 	mov.w	r3, #3
   88924:	f2c2 0318 	movt	r3, #8216	; 0x2018
   88928:	7819      	ldrb	r1, [r3, #0]
   8892a:	70c1      	strb	r1, [r0, #3]
   8892c:	f04f 0204 	mov.w	r2, #4
   88930:	f2c2 0218 	movt	r2, #8216	; 0x2018
   88934:	7813      	ldrb	r3, [r2, #0]
   88936:	7103      	strb	r3, [r0, #4]
   88938:	f04f 0105 	mov.w	r1, #5
   8893c:	f2c2 0118 	movt	r1, #8216	; 0x2018
   88940:	780a      	ldrb	r2, [r1, #0]
   88942:	7142      	strb	r2, [r0, #5]
   88944:	f04f 0306 	mov.w	r3, #6
   88948:	f2c2 0318 	movt	r3, #8216	; 0x2018
   8894c:	7819      	ldrb	r1, [r3, #0]
   8894e:	7181      	strb	r1, [r0, #6]
   88950:	f04f 0207 	mov.w	r2, #7
   88954:	f2c2 0218 	movt	r2, #8216	; 0x2018
   88958:	7813      	ldrb	r3, [r2, #0]
   8895a:	71c3      	strb	r3, [r0, #7]
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   8895c:	f247 2005 	movw	r0, #29189	; 0x7205
   88960:	f2c0 0008 	movt	r0, #8
   88964:	4780      	blx	r0
   88966:	b960      	cbnz	r0, 88982 <UOTGHS_Handler+0x1ae>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
   88968:	f248 020d 	movw	r2, #32781	; 0x800d
   8896c:	f2c0 0208 	movt	r2, #8
   88970:	4790      	blx	r2
		udd_ack_setup_received(0);
   88972:	f24c 1360 	movw	r3, #49504	; 0xc160
   88976:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8897a:	f04f 0004 	mov.w	r0, #4
   8897e:	6018      	str	r0, [r3, #0]
   88980:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}
	udd_ack_setup_received(0);
   88982:	f24c 1160 	movw	r1, #49504	; 0xc160
   88986:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8898a:	f04f 0204 	mov.w	r2, #4
   8898e:	600a      	str	r2, [r1, #0]

	if (Udd_setup_is_in()) {
   88990:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   88994:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88998:	f993 0000 	ldrsb.w	r0, [r3]
   8899c:	2800      	cmp	r0, #0
   8899e:	da18      	bge.n	889d2 <UOTGHS_Handler+0x1fe>
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   889a0:	f04f 0000 	mov.w	r0, #0
   889a4:	f241 51b2 	movw	r1, #5554	; 0x15b2
   889a8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   889ac:	8008      	strh	r0, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   889ae:	f241 6232 	movw	r2, #5682	; 0x1632
   889b2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   889b6:	8010      	strh	r0, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   889b8:	f241 6330 	movw	r3, #5680	; 0x1630
   889bc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   889c0:	f04f 0002 	mov.w	r0, #2
   889c4:	7018      	strb	r0, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   889c6:	f248 01a1 	movw	r1, #32929	; 0x80a1
   889ca:	f2c0 0108 	movt	r1, #8
   889ce:	4788      	blx	r1
   889d0:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
   889d2:	f641 41bc 	movw	r1, #7356	; 0x1cbc
   889d6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   889da:	88ca      	ldrh	r2, [r1, #6]
   889dc:	b92a      	cbnz	r2, 889ea <UOTGHS_Handler+0x216>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   889de:	f248 032d 	movw	r3, #32813	; 0x802d
   889e2:	f2c0 0308 	movt	r3, #8
   889e6:	4798      	blx	r3
   889e8:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   889ea:	f04f 0300 	mov.w	r3, #0
   889ee:	4618      	mov	r0, r3
   889f0:	f241 51b2 	movw	r1, #5554	; 0x15b2
   889f4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   889f8:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   889fa:	f241 6232 	movw	r2, #5682	; 0x1632
   889fe:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88a02:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   88a04:	f241 6330 	movw	r3, #5680	; 0x1630
   88a08:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88a0c:	f04f 0101 	mov.w	r1, #1
   88a10:	7019      	strb	r1, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   88a12:	f24c 1360 	movw	r3, #49504	; 0xc160
   88a16:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88a1a:	f04f 0210 	mov.w	r2, #16
   88a1e:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   88a20:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   88a24:	b672      	cpsid	i
   88a26:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   88a2a:	f240 23a0 	movw	r3, #672	; 0x2a0
   88a2e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88a32:	7018      	strb	r0, [r3, #0]
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
   88a34:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   88a38:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88a3c:	6002      	str	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88a3e:	2900      	cmp	r1, #0
   88a40:	f040 8471 	bne.w	89326 <UOTGHS_Handler+0xb52>
		cpu_irq_enable();
   88a44:	f240 21a0 	movw	r1, #672	; 0x2a0
   88a48:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88a4c:	f04f 0201 	mov.w	r2, #1
   88a50:	700a      	strb	r2, [r1, #0]
   88a52:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   88a56:	b662      	cpsie	i
   88a58:	bd70      	pop	{r4, r5, r6, pc}
		dbg_print("stup ");
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   88a5a:	f24c 1130 	movw	r1, #49456	; 0xc130
   88a5e:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88a62:	680a      	ldr	r2, [r1, #0]
   88a64:	f012 0f01 	tst.w	r2, #1
   88a68:	d00d      	beq.n	88a86 <UOTGHS_Handler+0x2b2>
   88a6a:	f24c 13c0 	movw	r3, #49600	; 0xc1c0
   88a6e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88a72:	6818      	ldr	r0, [r3, #0]
   88a74:	f010 0f01 	tst.w	r0, #1
   88a78:	d005      	beq.n	88a86 <UOTGHS_Handler+0x2b2>
		dbg_print("in ");
		// IN packet sent
		udd_ctrl_in_sent();
   88a7a:	f248 03a1 	movw	r3, #32929	; 0x80a1
   88a7e:	f2c0 0308 	movt	r3, #8
   88a82:	4798      	blx	r3
   88a84:	bd70      	pop	{r4, r5, r6, pc}
		return true;
	}
	if (Is_udd_out_received(0)) {
   88a86:	f24c 1130 	movw	r1, #49456	; 0xc130
   88a8a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88a8e:	680a      	ldr	r2, [r1, #0]
   88a90:	f012 0f02 	tst.w	r2, #2
   88a94:	f000 80de 	beq.w	88c54 <UOTGHS_Handler+0x480>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   88a98:	f241 6030 	movw	r0, #5680	; 0x1630
   88a9c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88aa0:	7801      	ldrb	r1, [r0, #0]
   88aa2:	2901      	cmp	r1, #1
   88aa4:	d014      	beq.n	88ad0 <UOTGHS_Handler+0x2fc>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   88aa6:	2902      	cmp	r1, #2
   88aa8:	d001      	beq.n	88aae <UOTGHS_Handler+0x2da>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   88aaa:	2904      	cmp	r1, #4
   88aac:	d105      	bne.n	88aba <UOTGHS_Handler+0x2e6>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
   88aae:	f248 028d 	movw	r2, #32909	; 0x808d
   88ab2:	f2c0 0208 	movt	r2, #8
   88ab6:	4790      	blx	r2
   88ab8:	e004      	b.n	88ac4 <UOTGHS_Handler+0x2f0>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   88aba:	f248 010d 	movw	r1, #32781	; 0x800d
   88abe:	f2c0 0108 	movt	r1, #8
   88ac2:	4788      	blx	r1
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   88ac4:	f647 70a9 	movw	r0, #32681	; 0x7fa9
   88ac8:	f2c0 0008 	movt	r0, #8
   88acc:	4780      	blx	r0
   88ace:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   88ad0:	f24c 1430 	movw	r4, #49456	; 0xc130
   88ad4:	f2c4 040a 	movt	r4, #16394	; 0x400a
   88ad8:	6826      	ldr	r6, [r4, #0]
   88ada:	f3c6 540a 	ubfx	r4, r6, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   88ade:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   88ae2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88ae6:	8998      	ldrh	r0, [r3, #12]
   88ae8:	f241 6232 	movw	r2, #5682	; 0x1632
   88aec:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88af0:	8816      	ldrh	r6, [r2, #0]
   88af2:	1931      	adds	r1, r6, r4
   88af4:	4288      	cmp	r0, r1
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   88af6:	bfae      	itee	ge
   88af8:	b2a4      	uxthge	r4, r4
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   88afa:	ebc6 0000 	rsblt	r0, r6, r0
   88afe:	b284      	uxthlt	r4, r0
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   88b00:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   88b04:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88b08:	6898      	ldr	r0, [r3, #8]
   88b0a:	1982      	adds	r2, r0, r6
	for (i = 0; i < nb_data; i++) {
   88b0c:	b3b4      	cbz	r4, 88b7c <UOTGHS_Handler+0x3a8>
   88b0e:	f04f 0300 	mov.w	r3, #0
   88b12:	f2c2 0318 	movt	r3, #8216	; 0x2018
   88b16:	ea6f 0103 	mvn.w	r1, r3
   88b1a:	1908      	adds	r0, r1, r4
   88b1c:	f000 0101 	and.w	r1, r0, #1
		*ptr_dest++ = *ptr_src++;
   88b20:	f813 0b01 	ldrb.w	r0, [r3], #1
   88b24:	f802 0b01 	strb.w	r0, [r2], #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   88b28:	b2d8      	uxtb	r0, r3
   88b2a:	42a0      	cmp	r0, r4
   88b2c:	f0c0 83fc 	bcc.w	89328 <UOTGHS_Handler+0xb54>
   88b30:	e00e      	b.n	88b50 <UOTGHS_Handler+0x37c>
		*ptr_dest++ = *ptr_src++;
   88b32:	4618      	mov	r0, r3
   88b34:	f810 5b01 	ldrb.w	r5, [r0], #1
   88b38:	4611      	mov	r1, r2
   88b3a:	f801 5b01 	strb.w	r5, [r1], #1
   88b3e:	785d      	ldrb	r5, [r3, #1]
   88b40:	f100 0301 	add.w	r3, r0, #1
   88b44:	7055      	strb	r5, [r2, #1]
   88b46:	f101 0201 	add.w	r2, r1, #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   88b4a:	b2d8      	uxtb	r0, r3
   88b4c:	42a0      	cmp	r0, r4
   88b4e:	d3f0      	bcc.n	88b32 <UOTGHS_Handler+0x35e>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   88b50:	19a6      	adds	r6, r4, r6
   88b52:	b2b6      	uxth	r6, r6
   88b54:	f241 6232 	movw	r2, #5682	; 0x1632
   88b58:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88b5c:	8016      	strh	r6, [r2, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   88b5e:	2c40      	cmp	r4, #64	; 0x40
   88b60:	d10c      	bne.n	88b7c <UOTGHS_Handler+0x3a8>
			|| (udd_g_ctrlreq.req.wLength <=
   88b62:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   88b66:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88b6a:	88d9      	ldrh	r1, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
   88b6c:	f241 50b2 	movw	r0, #5554	; 0x15b2
   88b70:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88b74:	8802      	ldrh	r2, [r0, #0]
   88b76:	1993      	adds	r3, r2, r6
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
   88b78:	4299      	cmp	r1, r3
   88b7a:	dc22      	bgt.n	88bc2 <UOTGHS_Handler+0x3ee>
					(udd_ctrl_prev_payload_buf_cnt +
							udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   88b7c:	f641 41bc 	movw	r1, #7356	; 0x1cbc
   88b80:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88b84:	818e      	strh	r6, [r1, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   88b86:	694a      	ldr	r2, [r1, #20]
   88b88:	b172      	cbz	r2, 88ba8 <UOTGHS_Handler+0x3d4>
			if (!udd_g_ctrlreq.over_under_run()) {
   88b8a:	4790      	blx	r2
   88b8c:	b960      	cbnz	r0, 88ba8 <UOTGHS_Handler+0x3d4>
				// Stall ZLP
				udd_ctrl_stall_data();
   88b8e:	f248 020d 	movw	r2, #32781	; 0x800d
   88b92:	f2c0 0208 	movt	r2, #8
   88b96:	4790      	blx	r2
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   88b98:	f24c 1060 	movw	r0, #49504	; 0xc160
   88b9c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88ba0:	f04f 0302 	mov.w	r3, #2
   88ba4:	6003      	str	r3, [r0, #0]
   88ba6:	bd70      	pop	{r4, r5, r6, pc}
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   88ba8:	f24c 1060 	movw	r0, #49504	; 0xc160
   88bac:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88bb0:	f04f 0302 	mov.w	r3, #2
   88bb4:	6003      	str	r3, [r0, #0]
		udd_ctrl_send_zlp_in();
   88bb6:	f248 012d 	movw	r1, #32813	; 0x802d
   88bba:	f2c0 0108 	movt	r1, #8
   88bbe:	4788      	blx	r1
   88bc0:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   88bc2:	49ae      	ldr	r1, [pc, #696]	; (88e7c <UOTGHS_Handler+0x6a8>)
   88bc4:	8988      	ldrh	r0, [r1, #12]
   88bc6:	42b0      	cmp	r0, r6
   88bc8:	d121      	bne.n	88c0e <UOTGHS_Handler+0x43a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   88bca:	4aac      	ldr	r2, [pc, #688]	; (88e7c <UOTGHS_Handler+0x6a8>)
   88bcc:	6953      	ldr	r3, [r2, #20]
   88bce:	b94b      	cbnz	r3, 88be4 <UOTGHS_Handler+0x410>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
   88bd0:	4aab      	ldr	r2, [pc, #684]	; (88e80 <UOTGHS_Handler+0x6ac>)
   88bd2:	4790      	blx	r2
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   88bd4:	f24c 1060 	movw	r0, #49504	; 0xc160
   88bd8:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88bdc:	f04f 0302 	mov.w	r3, #2
   88be0:	6003      	str	r3, [r0, #0]
   88be2:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   88be4:	4798      	blx	r3
   88be6:	b948      	cbnz	r0, 88bfc <UOTGHS_Handler+0x428>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   88be8:	48a5      	ldr	r0, [pc, #660]	; (88e80 <UOTGHS_Handler+0x6ac>)
   88bea:	4780      	blx	r0
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   88bec:	f24c 1360 	movw	r3, #49504	; 0xc160
   88bf0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88bf4:	f04f 0102 	mov.w	r1, #2
   88bf8:	6019      	str	r1, [r3, #0]
   88bfa:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   88bfc:	4aa1      	ldr	r2, [pc, #644]	; (88e84 <UOTGHS_Handler+0x6b0>)
   88bfe:	4ba2      	ldr	r3, [pc, #648]	; (88e88 <UOTGHS_Handler+0x6b4>)
   88c00:	8818      	ldrh	r0, [r3, #0]
   88c02:	8811      	ldrh	r1, [r2, #0]
   88c04:	1840      	adds	r0, r0, r1
   88c06:	8010      	strh	r0, [r2, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   88c08:	f04f 0200 	mov.w	r2, #0
   88c0c:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   88c0e:	f24c 1360 	movw	r3, #49504	; 0xc160
   88c12:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88c16:	f04f 0102 	mov.w	r1, #2
   88c1a:	6019      	str	r1, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   88c1c:	f04f 0210 	mov.w	r2, #16
   88c20:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   88c22:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   88c26:	b672      	cpsid	i
   88c28:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   88c2c:	4b97      	ldr	r3, [pc, #604]	; (88e8c <UOTGHS_Handler+0x6b8>)
   88c2e:	f04f 0000 	mov.w	r0, #0
   88c32:	7018      	strb	r0, [r3, #0]
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
   88c34:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   88c38:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88c3c:	601a      	str	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88c3e:	2900      	cmp	r1, #0
   88c40:	f040 8371 	bne.w	89326 <UOTGHS_Handler+0xb52>
		cpu_irq_enable();
   88c44:	4991      	ldr	r1, [pc, #580]	; (88e8c <UOTGHS_Handler+0x6b8>)
   88c46:	f04f 0201 	mov.w	r2, #1
   88c4a:	700a      	strb	r2, [r1, #0]
   88c4c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   88c50:	b662      	cpsie	i
   88c52:	bd70      	pop	{r4, r5, r6, pc}
		dbg_print("out ");
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
   88c54:	f24c 1330 	movw	r3, #49456	; 0xc130
   88c58:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88c5c:	6818      	ldr	r0, [r3, #0]
   88c5e:	f010 0f08 	tst.w	r0, #8
   88c62:	d01f      	beq.n	88ca4 <UOTGHS_Handler+0x4d0>
		dbg_print("nako ");
		// Overflow on OUT packet
		udd_ack_nak_out(0);
   88c64:	f24c 1060 	movw	r0, #49504	; 0xc160
   88c68:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88c6c:	f04f 0108 	mov.w	r1, #8
   88c70:	6001      	str	r1, [r0, #0]
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
   88c72:	f24c 1230 	movw	r2, #49456	; 0xc130
   88c76:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88c7a:	6813      	ldr	r3, [r2, #0]
   88c7c:	f013 0f01 	tst.w	r3, #1
   88c80:	f040 8351 	bne.w	89326 <UOTGHS_Handler+0xb52>
		return; // Overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   88c84:	f241 6030 	movw	r0, #5680	; 0x1630
   88c88:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88c8c:	7801      	ldrb	r1, [r0, #0]
   88c8e:	2903      	cmp	r1, #3
   88c90:	f040 8349 	bne.w	89326 <UOTGHS_Handler+0xb52>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   88c94:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   88c98:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88c9c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   88ca0:	601a      	str	r2, [r3, #0]
   88ca2:	bd70      	pop	{r4, r5, r6, pc}
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
   88ca4:	f24c 1130 	movw	r1, #49456	; 0xc130
   88ca8:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88cac:	680a      	ldr	r2, [r1, #0]
   88cae:	f012 0f10 	tst.w	r2, #16
   88cb2:	f000 823f 	beq.w	89134 <UOTGHS_Handler+0x960>
		dbg_print("naki ");
		// Underflow on IN packet
		udd_ack_nak_in(0);
   88cb6:	f24c 1360 	movw	r3, #49504	; 0xc160
   88cba:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88cbe:	f04f 0010 	mov.w	r0, #16
   88cc2:	6018      	str	r0, [r3, #0]
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
   88cc4:	f24c 1130 	movw	r1, #49456	; 0xc130
   88cc8:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88ccc:	680a      	ldr	r2, [r1, #0]
   88cce:	f012 0f02 	tst.w	r2, #2
   88cd2:	f040 8328 	bne.w	89326 <UOTGHS_Handler+0xb52>
		return; // Underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   88cd6:	f241 6330 	movw	r3, #5680	; 0x1630
   88cda:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88cde:	7818      	ldrb	r0, [r3, #0]
   88ce0:	2801      	cmp	r0, #1
   88ce2:	d105      	bne.n	88cf0 <UOTGHS_Handler+0x51c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   88ce4:	f248 032d 	movw	r3, #32813	; 0x802d
   88ce8:	f2c0 0308 	movt	r3, #8
   88cec:	4798      	blx	r3
   88cee:	bd70      	pop	{r4, r5, r6, pc}
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   88cf0:	2804      	cmp	r0, #4
   88cf2:	f040 8318 	bne.w	89326 <UOTGHS_Handler+0xb52>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   88cf6:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   88cfa:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88cfe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   88d02:	600a      	str	r2, [r1, #0]
   88d04:	bd70      	pop	{r4, r5, r6, pc}
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   88d06:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88d0a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88d0e:	685a      	ldr	r2, [r3, #4]
   88d10:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   88d14:	d03c      	beq.n	88d90 <UOTGHS_Handler+0x5bc>
   88d16:	f04f 0005 	mov.w	r0, #5
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88d1a:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88d1e:	495c      	ldr	r1, [pc, #368]	; (88e90 <UOTGHS_Handler+0x6bc>)
   88d20:	e019      	b.n	88d56 <UOTGHS_Handler+0x582>

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   88d22:	f04f 0001 	mov.w	r0, #1
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88d26:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88d2a:	f241 51b8 	movw	r1, #5560	; 0x15b8
   88d2e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88d32:	e010      	b.n	88d56 <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   88d34:	f04f 0002 	mov.w	r0, #2
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88d38:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88d3c:	4955      	ldr	r1, [pc, #340]	; (88e94 <UOTGHS_Handler+0x6c0>)
   88d3e:	e00a      	b.n	88d56 <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   88d40:	f04f 0003 	mov.w	r0, #3
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88d44:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88d48:	4953      	ldr	r1, [pc, #332]	; (88e98 <UOTGHS_Handler+0x6c4>)
   88d4a:	e004      	b.n	88d56 <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   88d4c:	f04f 0004 	mov.w	r0, #4
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88d50:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88d54:	4951      	ldr	r1, [pc, #324]	; (88e9c <UOTGHS_Handler+0x6c8>)
#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   88d56:	f44f 4243 	mov.w	r2, #49920	; 0xc300
   88d5a:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88d5e:	eb02 1300 	add.w	r3, r2, r0, lsl #4
   88d62:	68da      	ldr	r2, [r3, #12]
   88d64:	f012 0f01 	tst.w	r2, #1
   88d68:	f040 82dd 	bne.w	89326 <UOTGHS_Handler+0xb52>
					& UOTGHS_DEVDMASTATUS_CHANN_ENB) {
				return true; // Ignore EOT_STA interrupt
			}
			dbg_print("dma%x: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   88d6c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   88d70:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88d74:	6154      	str	r4, [r2, #20]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   88d76:	68db      	ldr	r3, [r3, #12]
					UOTGHS_DEVDMASTATUS_BUFF_COUNT_Msk)
					>> UOTGHS_DEVDMASTATUS_BUFF_COUNT_Pos;
			if (nb_remaining) {
   88d78:	0c1b      	lsrs	r3, r3, #16
   88d7a:	d003      	beq.n	88d84 <UOTGHS_Handler+0x5b0>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   88d7c:	68ca      	ldr	r2, [r1, #12]
   88d7e:	1ad3      	subs	r3, r2, r3
   88d80:	60cb      	str	r3, [r1, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   88d82:	608b      	str	r3, [r1, #8]
			}
			udd_ep_trans_done(ep);
   88d84:	f248 3155 	movw	r1, #33621	; 0x8355
   88d88:	f2c0 0108 	movt	r1, #8
   88d8c:	4788      	blx	r1
   88d8e:	bd70      	pop	{r4, r5, r6, pc}
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88d90:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88d94:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88d98:	6901      	ldr	r1, [r0, #16]
   88d9a:	f411 3f00 	tst.w	r1, #131072	; 0x20000
   88d9e:	f000 80a9 	beq.w	88ef4 <UOTGHS_Handler+0x720>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88da2:	f24c 13d4 	movw	r3, #49620	; 0xc1d4
   88da6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88daa:	681a      	ldr	r2, [r3, #0]
   88dac:	f012 0f01 	tst.w	r2, #1
   88db0:	d03b      	beq.n	88e2a <UOTGHS_Handler+0x656>
					&& Is_udd_in_send(ep)) {
   88db2:	f24c 1044 	movw	r0, #49476	; 0xc144
   88db6:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88dba:	6801      	ldr	r1, [r0, #0]
   88dbc:	f011 0f01 	tst.w	r1, #1
   88dc0:	d033      	beq.n	88e2a <UOTGHS_Handler+0x656>
   88dc2:	f04f 0205 	mov.w	r2, #5
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88dc6:	f04f 0314 	mov.w	r3, #20
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88dca:	4831      	ldr	r0, [pc, #196]	; (88e90 <UOTGHS_Handler+0x6bc>)
   88dcc:	e016      	b.n	88dfc <UOTGHS_Handler+0x628>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   88dce:	f04f 0201 	mov.w	r2, #1
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88dd2:	f04f 0304 	mov.w	r3, #4
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88dd6:	4832      	ldr	r0, [pc, #200]	; (88ea0 <UOTGHS_Handler+0x6cc>)
   88dd8:	e010      	b.n	88dfc <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   88dda:	f04f 0202 	mov.w	r2, #2
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88dde:	f04f 0308 	mov.w	r3, #8
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88de2:	482c      	ldr	r0, [pc, #176]	; (88e94 <UOTGHS_Handler+0x6c0>)
   88de4:	e00a      	b.n	88dfc <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   88de6:	f04f 0203 	mov.w	r2, #3
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88dea:	f04f 030c 	mov.w	r3, #12
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88dee:	482a      	ldr	r0, [pc, #168]	; (88e98 <UOTGHS_Handler+0x6c4>)
   88df0:	e004      	b.n	88dfc <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   88df2:	f04f 0204 	mov.w	r2, #4
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88df6:	f04f 0310 	mov.w	r3, #16
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88dfa:	4828      	ldr	r0, [pc, #160]	; (88e9c <UOTGHS_Handler+0x6c8>)
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
   88dfc:	f24c 2120 	movw	r1, #49696	; 0xc220
   88e00:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88e04:	f04f 0501 	mov.w	r5, #1
   88e08:	505d      	str	r5, [r3, r1]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
   88e0a:	f24c 1460 	movw	r4, #49504	; 0xc160
   88e0e:	f2c4 040a 	movt	r4, #16394	; 0x400a
   88e12:	511d      	str	r5, [r3, r4]
				udd_ack_fifocon(ep);
   88e14:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   88e18:	505c      	str	r4, [r3, r1]
				udd_ep_finish_job(ptr_job, false, ep);
   88e1a:	f04f 0100 	mov.w	r1, #0
   88e1e:	f248 23f1 	movw	r3, #33521	; 0x82f1
   88e22:	f2c0 0308 	movt	r3, #8
   88e26:	4798      	blx	r3
   88e28:	bd70      	pop	{r4, r5, r6, pc}
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   88e2a:	f24c 13d4 	movw	r3, #49620	; 0xc1d4
   88e2e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88e32:	681a      	ldr	r2, [r3, #0]
   88e34:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   88e38:	d05c      	beq.n	88ef4 <UOTGHS_Handler+0x720>
					&& (0 == udd_nb_busy_bank(ep))) {
   88e3a:	f24c 1044 	movw	r0, #49476	; 0xc144
   88e3e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88e42:	6801      	ldr	r1, [r0, #0]
   88e44:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   88e48:	d154      	bne.n	88ef4 <UOTGHS_Handler+0x720>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88e4a:	f04f 0314 	mov.w	r3, #20
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88e4e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88e52:	4a0f      	ldr	r2, [pc, #60]	; (88e90 <UOTGHS_Handler+0x6bc>)
   88e54:	e02b      	b.n	88eae <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88e56:	f04f 0304 	mov.w	r3, #4
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88e5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88e5e:	4a10      	ldr	r2, [pc, #64]	; (88ea0 <UOTGHS_Handler+0x6cc>)
   88e60:	e025      	b.n	88eae <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88e62:	f04f 0308 	mov.w	r3, #8
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88e66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88e6a:	4a0a      	ldr	r2, [pc, #40]	; (88e94 <UOTGHS_Handler+0x6c0>)
   88e6c:	e01f      	b.n	88eae <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88e6e:	f04f 030c 	mov.w	r3, #12
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88e72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88e76:	4a08      	ldr	r2, [pc, #32]	; (88e98 <UOTGHS_Handler+0x6c4>)
   88e78:	e019      	b.n	88eae <UOTGHS_Handler+0x6da>
   88e7a:	bf00      	nop
   88e7c:	20071cbc 	.word	0x20071cbc
   88e80:	0008800d 	.word	0x0008800d
   88e84:	200715b2 	.word	0x200715b2
   88e88:	20071632 	.word	0x20071632
   88e8c:	200702a0 	.word	0x200702a0
   88e90:	20071618 	.word	0x20071618
   88e94:	200715d0 	.word	0x200715d0
   88e98:	200715e8 	.word	0x200715e8
   88e9c:	20071600 	.word	0x20071600
   88ea0:	200715b8 	.word	0x200715b8
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88ea4:	f04f 0310 	mov.w	r3, #16
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88ea8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88eac:	4abf      	ldr	r2, [pc, #764]	; (891ac <UOTGHS_Handler+0x9d8>)
			}
			if (Is_udd_bank_interrupt_enabled(ep)
					&& (0 == udd_nb_busy_bank(ep))) {
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   88eae:	f24c 2020 	movw	r0, #49696	; 0xc220
   88eb2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88eb6:	f44f 5480 	mov.w	r4, #4096	; 0x1000
   88eba:	501c      	str	r4, [r3, r0]
				udd_disable_endpoint_interrupt(ep);
   88ebc:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88ec0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88ec4:	6141      	str	r1, [r0, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
   88ec6:	7d11      	ldrb	r1, [r2, #20]
   88ec8:	f36f 0182 	bfc	r1, #2, #1
   88ecc:	7511      	strb	r1, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   88ece:	f44f 4241 	mov.w	r2, #49408	; 0xc100
   88ed2:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88ed6:	5898      	ldr	r0, [r3, r2]
   88ed8:	f420 7100 	bic.w	r1, r0, #512	; 0x200
   88edc:	5099      	str	r1, [r3, r2]
				udd_enable_stall_handshake(ep);
   88ede:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   88ee2:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88ee6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   88eea:	5098      	str	r0, [r3, r2]
				udd_reset_data_toggle(ep);
   88eec:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   88ef0:	5099      	str	r1, [r3, r2]
   88ef2:	bd70      	pop	{r4, r5, r6, pc}
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   88ef4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88ef8:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88efc:	685a      	ldr	r2, [r3, #4]
   88efe:	f012 0f08 	tst.w	r2, #8
   88f02:	d07a      	beq.n	88ffa <UOTGHS_Handler+0x826>
		udd_ack_reset();
   88f04:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   88f08:	f2c4 040a 	movt	r4, #16394	; 0x400a
   88f0c:	f04f 0508 	mov.w	r5, #8
   88f10:	60a5      	str	r5, [r4, #8]
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   88f12:	f241 56b8 	movw	r6, #5560	; 0x15b8
   88f16:	f2c2 0607 	movt	r6, #8199	; 0x2007
   88f1a:	4630      	mov	r0, r6
   88f1c:	f04f 0101 	mov.w	r1, #1
   88f20:	460a      	mov	r2, r1
   88f22:	f248 25f1 	movw	r5, #33521	; 0x82f1
   88f26:	f2c0 0508 	movt	r5, #8
   88f2a:	47a8      	blx	r5
   88f2c:	f106 0018 	add.w	r0, r6, #24
   88f30:	f04f 0101 	mov.w	r1, #1
   88f34:	f04f 0202 	mov.w	r2, #2
   88f38:	47a8      	blx	r5
   88f3a:	f106 0030 	add.w	r0, r6, #48	; 0x30
   88f3e:	f04f 0101 	mov.w	r1, #1
   88f42:	f04f 0203 	mov.w	r2, #3
   88f46:	47a8      	blx	r5
   88f48:	f106 0048 	add.w	r0, r6, #72	; 0x48
   88f4c:	f04f 0101 	mov.w	r1, #1
   88f50:	f04f 0204 	mov.w	r2, #4
   88f54:	47a8      	blx	r5
   88f56:	f106 0060 	add.w	r0, r6, #96	; 0x60
   88f5a:	f04f 0101 	mov.w	r1, #1
   88f5e:	f04f 0205 	mov.w	r2, #5
   88f62:	47a8      	blx	r5
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
   88f64:	f247 1359 	movw	r3, #29017	; 0x7159
   88f68:	f2c0 0308 	movt	r3, #8
   88f6c:	4798      	blx	r3
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   88f6e:	6822      	ldr	r2, [r4, #0]
   88f70:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   88f74:	6021      	str	r1, [r4, #0]
	udd_enable_address();
   88f76:	6820      	ldr	r0, [r4, #0]
   88f78:	f040 0380 	orr.w	r3, r0, #128	; 0x80
   88f7c:	6023      	str	r3, [r4, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   88f7e:	f44f 4141 	mov.w	r1, #49408	; 0xc100
   88f82:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88f86:	680a      	ldr	r2, [r1, #0]
   88f88:	f422 50cb 	bic.w	r0, r2, #6496	; 0x1960
   88f8c:	f020 031c 	bic.w	r3, r0, #28
   88f90:	f043 0230 	orr.w	r2, r3, #48	; 0x30
   88f94:	600a      	str	r2, [r1, #0]
		USB_EP_TYPE_CONTROL,
		0,
		USB_DEVICE_EP_CTRL_SIZE,
		UOTGHS_DEVEPTCFG_EPBK_1_BANK);

	udd_allocate_memory(0);
   88f96:	6808      	ldr	r0, [r1, #0]
   88f98:	f040 0302 	orr.w	r3, r0, #2
   88f9c:	600b      	str	r3, [r1, #0]
	udd_enable_endpoint(0);
   88f9e:	69e1      	ldr	r1, [r4, #28]
   88fa0:	f041 0201 	orr.w	r2, r1, #1
   88fa4:	61e2      	str	r2, [r4, #28]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   88fa6:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   88faa:	b672      	cpsid	i
   88fac:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   88fb0:	f240 23a0 	movw	r3, #672	; 0x2a0
   88fb4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88fb8:	f04f 0100 	mov.w	r1, #0
   88fbc:	7019      	strb	r1, [r3, #0]
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
   88fbe:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   88fc2:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88fc6:	f04f 0304 	mov.w	r3, #4
   88fca:	6013      	str	r3, [r2, #0]
	udd_enable_out_received_interrupt(0);
   88fcc:	f04f 0102 	mov.w	r1, #2
   88fd0:	6011      	str	r1, [r2, #0]
	udd_enable_endpoint_interrupt(0);
   88fd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   88fd6:	61a2      	str	r2, [r4, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88fd8:	b948      	cbnz	r0, 88fee <UOTGHS_Handler+0x81a>
		cpu_irq_enable();
   88fda:	f240 20a0 	movw	r0, #672	; 0x2a0
   88fde:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88fe2:	f04f 0301 	mov.w	r3, #1
   88fe6:	7003      	strb	r3, [r0, #0]
   88fe8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   88fec:	b662      	cpsie	i
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
   88fee:	f647 71a9 	movw	r1, #32681	; 0x7fa9
   88ff2:	f2c0 0108 	movt	r1, #8
   88ff6:	4788      	blx	r1
		goto udd_interrupt_end;
   88ff8:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   88ffa:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88ffe:	f2c4 000a 	movt	r0, #16394	; 0x400a
   89002:	6901      	ldr	r1, [r0, #16]
   89004:	f011 0f01 	tst.w	r1, #1
   89008:	d02a      	beq.n	89060 <UOTGHS_Handler+0x88c>
   8900a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8900e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   89012:	685a      	ldr	r2, [r3, #4]
   89014:	f012 0f01 	tst.w	r2, #1
   89018:	d022      	beq.n	89060 <UOTGHS_Handler+0x88c>
		otg_unfreeze_clock();
   8901a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   8901e:	f2c4 010a 	movt	r1, #16394	; 0x400a
   89022:	f8d1 0800 	ldr.w	r0, [r1, #2048]	; 0x800
   89026:	f420 4380 	bic.w	r3, r0, #16384	; 0x4000
   8902a:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   8902e:	f04f 0201 	mov.w	r2, #1
   89032:	614a      	str	r2, [r1, #20]
		udd_enable_wake_up_interrupt();
   89034:	f04f 0010 	mov.w	r0, #16
   89038:	6188      	str	r0, [r1, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   8903a:	f8d1 3800 	ldr.w	r3, [r1, #2048]	; 0x800
   8903e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
   89042:	f8c1 2800 	str.w	r2, [r1, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
   89046:	f04f 0000 	mov.w	r0, #0
   8904a:	f647 61fd 	movw	r1, #32509	; 0x7efd
   8904e:	f2c0 0108 	movt	r1, #8
   89052:	4788      	blx	r1
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   89054:	f245 20cd 	movw	r0, #21197	; 0x52cd
   89058:	f2c0 0008 	movt	r0, #8
   8905c:	4780      	blx	r0
#endif
		goto udd_interrupt_end;
   8905e:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   89060:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   89064:	f2c4 000a 	movt	r0, #16394	; 0x400a
   89068:	6901      	ldr	r1, [r0, #16]
   8906a:	f011 0f10 	tst.w	r1, #16
   8906e:	d034      	beq.n	890da <UOTGHS_Handler+0x906>
   89070:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89074:	f2c4 030a 	movt	r3, #16394	; 0x400a
   89078:	685a      	ldr	r2, [r3, #4]
   8907a:	f012 0f10 	tst.w	r2, #16
   8907e:	d02c      	beq.n	890da <UOTGHS_Handler+0x906>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
   89080:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   89084:	f2c4 010a 	movt	r1, #16394	; 0x400a
   89088:	f8d1 2800 	ldr.w	r2, [r1, #2048]	; 0x800
   8908c:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   89090:	f8c1 0800 	str.w	r0, [r1, #2048]	; 0x800
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   89094:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89098:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8909c:	e003      	b.n	890a6 <UOTGHS_Handler+0x8d2>
			if (Is_udd_suspend()) {
   8909e:	685a      	ldr	r2, [r3, #4]
   890a0:	f012 0f01 	tst.w	r2, #1
   890a4:	d104      	bne.n	890b0 <UOTGHS_Handler+0x8dc>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   890a6:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
   890aa:	f411 4f80 	tst.w	r1, #16384	; 0x4000
   890ae:	d0f6      	beq.n	8909e <UOTGHS_Handler+0x8ca>
			if (Is_udd_suspend()) {
				break; // In case of USB state change in HS
			}
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
   890b0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   890b4:	f2c4 010a 	movt	r1, #16394	; 0x400a
   890b8:	f04f 0010 	mov.w	r0, #16
   890bc:	6148      	str	r0, [r1, #20]
		udd_enable_suspend_interrupt();
   890be:	f04f 0001 	mov.w	r0, #1
   890c2:	6188      	str	r0, [r1, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
   890c4:	f647 63fd 	movw	r3, #32509	; 0x7efd
   890c8:	f2c0 0308 	movt	r3, #8
   890cc:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   890ce:	f245 22d1 	movw	r2, #21201	; 0x52d1
   890d2:	f2c0 0208 	movt	r2, #8
   890d6:	4790      	blx	r2
#endif
		goto udd_interrupt_end;
   890d8:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_otg_vbus_transition()) {
   890da:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   890de:	f2c4 000a 	movt	r0, #16394	; 0x400a
   890e2:	f8d0 1804 	ldr.w	r1, [r0, #2052]	; 0x804
   890e6:	f011 0f02 	tst.w	r1, #2
   890ea:	f000 811c 	beq.w	89326 <UOTGHS_Handler+0xb52>
		dbg_print("VBus ");
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
   890ee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   890f2:	f2c4 030a 	movt	r3, #16394	; 0x400a
   890f6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   890fa:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   890fe:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
		otg_ack_vbus_transition();
   89102:	f04f 0102 	mov.w	r1, #2
   89106:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
		otg_freeze_clock();
   8910a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8910e:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   89112:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
   89116:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   8911a:	f413 6f00 	tst.w	r3, #2048	; 0x800
			udd_attach();
   8911e:	bf19      	ittee	ne
   89120:	f248 63f1 	movwne	r3, #34545	; 0x86f1
   89124:	f2c0 0308 	movtne	r3, #8
		} else {
			udd_detach();
   89128:	f248 7399 	movweq	r3, #34713	; 0x8799
   8912c:	f2c0 0308 	movteq	r3, #8
   89130:	4798      	blx	r3
   89132:	bd70      	pop	{r4, r5, r6, pc}
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   89134:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   89138:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8913c:	6901      	ldr	r1, [r0, #16]
   8913e:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
   89142:	d008      	beq.n	89156 <UOTGHS_Handler+0x982>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   89144:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89148:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8914c:	685a      	ldr	r2, [r3, #4]
   8914e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
   89152:	f47f ade6 	bne.w	88d22 <UOTGHS_Handler+0x54e>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   89156:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   8915a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8915e:	6901      	ldr	r1, [r0, #16]
   89160:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   89164:	d024      	beq.n	891b0 <UOTGHS_Handler+0x9dc>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   89166:	f24c 13c4 	movw	r3, #49604	; 0xc1c4
   8916a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8916e:	681a      	ldr	r2, [r3, #0]
   89170:	f012 0f01 	tst.w	r2, #1
   89174:	d110      	bne.n	89198 <UOTGHS_Handler+0x9c4>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   89176:	f24c 13c4 	movw	r3, #49604	; 0xc1c4
   8917a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8917e:	681a      	ldr	r2, [r3, #0]
   89180:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   89184:	d014      	beq.n	891b0 <UOTGHS_Handler+0x9dc>
					&& (0 == udd_nb_busy_bank(ep))) {
   89186:	f24c 1034 	movw	r0, #49460	; 0xc134
   8918a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8918e:	6801      	ldr	r1, [r0, #0]
   89190:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   89194:	d10c      	bne.n	891b0 <UOTGHS_Handler+0x9dc>
   89196:	e65e      	b.n	88e56 <UOTGHS_Handler+0x682>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   89198:	f24c 1034 	movw	r0, #49460	; 0xc134
   8919c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   891a0:	6801      	ldr	r1, [r0, #0]
   891a2:	f011 0f01 	tst.w	r1, #1
   891a6:	d0e6      	beq.n	89176 <UOTGHS_Handler+0x9a2>
   891a8:	e611      	b.n	88dce <UOTGHS_Handler+0x5fa>
   891aa:	bf00      	nop
   891ac:	20071600 	.word	0x20071600
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   891b0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   891b4:	f2c4 030a 	movt	r3, #16394	; 0x400a
   891b8:	691a      	ldr	r2, [r3, #16]
   891ba:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
   891be:	d008      	beq.n	891d2 <UOTGHS_Handler+0x9fe>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   891c0:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   891c4:	f2c4 000a 	movt	r0, #16394	; 0x400a
   891c8:	6841      	ldr	r1, [r0, #4]
   891ca:	f011 6f80 	tst.w	r1, #67108864	; 0x4000000
   891ce:	f47f adb1 	bne.w	88d34 <UOTGHS_Handler+0x560>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   891d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   891d6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   891da:	691a      	ldr	r2, [r3, #16]
   891dc:	f412 4f80 	tst.w	r2, #16384	; 0x4000
   891e0:	d021      	beq.n	89226 <UOTGHS_Handler+0xa52>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   891e2:	f24c 10c8 	movw	r0, #49608	; 0xc1c8
   891e6:	f2c4 000a 	movt	r0, #16394	; 0x400a
   891ea:	6801      	ldr	r1, [r0, #0]
   891ec:	f011 0f01 	tst.w	r1, #1
   891f0:	d110      	bne.n	89214 <UOTGHS_Handler+0xa40>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   891f2:	f24c 10c8 	movw	r0, #49608	; 0xc1c8
   891f6:	f2c4 000a 	movt	r0, #16394	; 0x400a
   891fa:	6801      	ldr	r1, [r0, #0]
   891fc:	f411 5f80 	tst.w	r1, #4096	; 0x1000
   89200:	d011      	beq.n	89226 <UOTGHS_Handler+0xa52>
					&& (0 == udd_nb_busy_bank(ep))) {
   89202:	f24c 1338 	movw	r3, #49464	; 0xc138
   89206:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8920a:	681a      	ldr	r2, [r3, #0]
   8920c:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   89210:	d109      	bne.n	89226 <UOTGHS_Handler+0xa52>
   89212:	e626      	b.n	88e62 <UOTGHS_Handler+0x68e>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   89214:	f24c 1338 	movw	r3, #49464	; 0xc138
   89218:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8921c:	681a      	ldr	r2, [r3, #0]
   8921e:	f012 0f01 	tst.w	r2, #1
   89222:	d0e6      	beq.n	891f2 <UOTGHS_Handler+0xa1e>
   89224:	e5d9      	b.n	88dda <UOTGHS_Handler+0x606>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   89226:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   8922a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8922e:	6901      	ldr	r1, [r0, #16]
   89230:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
   89234:	d008      	beq.n	89248 <UOTGHS_Handler+0xa74>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   89236:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8923a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8923e:	685a      	ldr	r2, [r3, #4]
   89240:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
   89244:	f47f ad7c 	bne.w	88d40 <UOTGHS_Handler+0x56c>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   89248:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   8924c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   89250:	6901      	ldr	r1, [r0, #16]
   89252:	f411 4f00 	tst.w	r1, #32768	; 0x8000
   89256:	d021      	beq.n	8929c <UOTGHS_Handler+0xac8>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   89258:	f24c 13cc 	movw	r3, #49612	; 0xc1cc
   8925c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   89260:	681a      	ldr	r2, [r3, #0]
   89262:	f012 0f01 	tst.w	r2, #1
   89266:	d110      	bne.n	8928a <UOTGHS_Handler+0xab6>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   89268:	f24c 13cc 	movw	r3, #49612	; 0xc1cc
   8926c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   89270:	681a      	ldr	r2, [r3, #0]
   89272:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   89276:	d011      	beq.n	8929c <UOTGHS_Handler+0xac8>
					&& (0 == udd_nb_busy_bank(ep))) {
   89278:	f24c 103c 	movw	r0, #49468	; 0xc13c
   8927c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   89280:	6801      	ldr	r1, [r0, #0]
   89282:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   89286:	d109      	bne.n	8929c <UOTGHS_Handler+0xac8>
   89288:	e5f1      	b.n	88e6e <UOTGHS_Handler+0x69a>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   8928a:	f24c 103c 	movw	r0, #49468	; 0xc13c
   8928e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   89292:	6801      	ldr	r1, [r0, #0]
   89294:	f011 0f01 	tst.w	r1, #1
   89298:	d0e6      	beq.n	89268 <UOTGHS_Handler+0xa94>
   8929a:	e5a4      	b.n	88de6 <UOTGHS_Handler+0x612>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   8929c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   892a0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   892a4:	691a      	ldr	r2, [r3, #16]
   892a6:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
   892aa:	d008      	beq.n	892be <UOTGHS_Handler+0xaea>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   892ac:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   892b0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   892b4:	6841      	ldr	r1, [r0, #4]
   892b6:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
   892ba:	f47f ad47 	bne.w	88d4c <UOTGHS_Handler+0x578>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   892be:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   892c2:	f2c4 030a 	movt	r3, #16394	; 0x400a
   892c6:	691a      	ldr	r2, [r3, #16]
   892c8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   892cc:	d021      	beq.n	89312 <UOTGHS_Handler+0xb3e>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   892ce:	f24c 10d0 	movw	r0, #49616	; 0xc1d0
   892d2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   892d6:	6801      	ldr	r1, [r0, #0]
   892d8:	f011 0f01 	tst.w	r1, #1
   892dc:	d110      	bne.n	89300 <UOTGHS_Handler+0xb2c>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   892de:	f24c 10d0 	movw	r0, #49616	; 0xc1d0
   892e2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   892e6:	6801      	ldr	r1, [r0, #0]
   892e8:	f411 5f80 	tst.w	r1, #4096	; 0x1000
   892ec:	d011      	beq.n	89312 <UOTGHS_Handler+0xb3e>
					&& (0 == udd_nb_busy_bank(ep))) {
   892ee:	f24c 1340 	movw	r3, #49472	; 0xc140
   892f2:	f2c4 030a 	movt	r3, #16394	; 0x400a
   892f6:	681a      	ldr	r2, [r3, #0]
   892f8:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   892fc:	d109      	bne.n	89312 <UOTGHS_Handler+0xb3e>
   892fe:	e5d1      	b.n	88ea4 <UOTGHS_Handler+0x6d0>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   89300:	f24c 1340 	movw	r3, #49472	; 0xc140
   89304:	f2c4 030a 	movt	r3, #16394	; 0x400a
   89308:	681a      	ldr	r2, [r3, #0]
   8930a:	f012 0f01 	tst.w	r2, #1
   8930e:	d0e6      	beq.n	892de <UOTGHS_Handler+0xb0a>
   89310:	e56f      	b.n	88df2 <UOTGHS_Handler+0x61e>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   89312:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   89316:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8931a:	6901      	ldr	r1, [r0, #16]
   8931c:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
   89320:	f47f acf1 	bne.w	88d06 <UOTGHS_Handler+0x532>
   89324:	e534      	b.n	88d90 <UOTGHS_Handler+0x5bc>
   89326:	bd70      	pop	{r4, r5, r6, pc}
   89328:	b249      	sxtb	r1, r1
   8932a:	2900      	cmp	r1, #0
   8932c:	f43f ac01 	beq.w	88b32 <UOTGHS_Handler+0x35e>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
   89330:	f813 0b01 	ldrb.w	r0, [r3], #1
   89334:	f802 0b01 	strb.w	r0, [r2], #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   89338:	b2d9      	uxtb	r1, r3
   8933a:	42a1      	cmp	r1, r4
   8933c:	f4ff abf9 	bcc.w	88b32 <UOTGHS_Handler+0x35e>
   89340:	e406      	b.n	88b50 <UOTGHS_Handler+0x37c>
   89342:	bf00      	nop

00089344 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   89344:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89348:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8934c:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
#else
	return false;
#endif
}
   89350:	f410 5040 	ands.w	r0, r0, #12288	; 0x3000
   89354:	bf18      	it	ne
   89356:	2001      	movne	r0, #1
   89358:	4770      	bx	lr
   8935a:	bf00      	nop

0008935c <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
   8935c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89360:	f2c4 030a 	movt	r3, #16394	; 0x400a
   89364:	681a      	ldr	r2, [r3, #0]
   89366:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   8936a:	6019      	str	r1, [r3, #0]
	udd_configure_address(address);
   8936c:	681a      	ldr	r2, [r3, #0]
   8936e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   89372:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   89376:	ea40 0201 	orr.w	r2, r0, r1
   8937a:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   8937c:	6818      	ldr	r0, [r3, #0]
   8937e:	f040 0180 	orr.w	r1, r0, #128	; 0x80
   89382:	6019      	str	r1, [r3, #0]
   89384:	4770      	bx	lr
   89386:	bf00      	nop

00089388 <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
   89388:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8938c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   89390:	6818      	ldr	r0, [r3, #0]
}
   89392:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   89396:	4770      	bx	lr

00089398 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
   89398:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8939c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   893a0:	6a18      	ldr	r0, [r3, #32]
}
   893a2:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   893a6:	4770      	bx	lr

000893a8 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
   893a8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   893ac:	f2c4 030a 	movt	r3, #16394	; 0x400a
   893b0:	6a18      	ldr	r0, [r3, #32]
}
   893b2:	ea4f 4180 	mov.w	r1, r0, lsl #18
   893b6:	ea4f 4091 	mov.w	r0, r1, lsr #18
   893ba:	4770      	bx	lr

000893bc <udd_set_setup_payload>:
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
	udd_g_ctrlreq.payload = payload;
   893bc:	f641 43bc 	movw	r3, #7356	; 0x1cbc
   893c0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   893c4:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   893c6:	8199      	strh	r1, [r3, #12]
   893c8:	4770      	bx	lr
   893ca:	bf00      	nop

000893cc <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
   893cc:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   893ce:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   893d2:	2c05      	cmp	r4, #5
   893d4:	d82a      	bhi.n	8942c <udd_ep_free+0x60>
		return;
	}
	udd_disable_endpoint(ep_index);
   893d6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   893da:	f2c4 030a 	movt	r3, #16394	; 0x400a
   893de:	69d9      	ldr	r1, [r3, #28]
   893e0:	f04f 0201 	mov.w	r2, #1
   893e4:	fa02 f204 	lsl.w	r2, r2, r4
   893e8:	ea21 0102 	bic.w	r1, r1, r2
   893ec:	61d9      	str	r1, [r3, #28]
	udd_unallocate_memory(ep_index);
   893ee:	f44f 4341 	mov.w	r3, #49408	; 0xc100
   893f2:	f2c4 030a 	movt	r3, #16394	; 0x400a
   893f6:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   893fa:	f022 0102 	bic.w	r1, r2, #2
   893fe:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	udd_ep_abort_job(ep);
   89402:	f248 3329 	movw	r3, #33577	; 0x8329
   89406:	f2c0 0308 	movt	r3, #8
   8940a:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   8940c:	f104 34ff 	add.w	r4, r4, #4294967295
   89410:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   89414:	f241 52b8 	movw	r2, #5560	; 0x15b8
   89418:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8941c:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
   89420:	7d21      	ldrb	r1, [r4, #20]
   89422:	f36f 0182 	bfc	r1, #2, #1
   89426:	7521      	strb	r1, [r4, #20]
   89428:	f104 0410 	add.w	r4, r4, #16
   8942c:	bd10      	pop	{r4, pc}
   8942e:	bf00      	nop

00089430 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	return Is_udd_endpoint_stall_requested(ep_index);
   89430:	f000 000f 	and.w	r0, r0, #15
   89434:	f24c 13c0 	movw	r3, #49600	; 0xc1c0
   89438:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8943c:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
}
   89440:	f3c1 40c0 	ubfx	r0, r1, #19, #1
   89444:	4770      	bx	lr
   89446:	bf00      	nop

00089448 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   89448:	b430      	push	{r4, r5}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8944a:	f000 030f 	and.w	r3, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
   8944e:	2b05      	cmp	r3, #5
   89450:	d87a      	bhi.n	89548 <udd_ep_set_halt+0x100>
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   89452:	f24c 12c0 	movw	r2, #49600	; 0xc1c0
   89456:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8945a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   8945e:	f411 2f00 	tst.w	r1, #524288	; 0x80000
   89462:	d174      	bne.n	8954e <udd_ep_set_halt+0x106>


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   89464:	f103 34ff 	add.w	r4, r3, #4294967295
   89468:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   8946c:	f241 51b8 	movw	r1, #5560	; 0x15b8
   89470:	f2c2 0107 	movt	r1, #8199	; 0x2007
   89474:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   89478:	7d11      	ldrb	r1, [r2, #20]
   8947a:	f001 0404 	and.w	r4, r1, #4
   8947e:	b2e4      	uxtb	r4, r4
   89480:	2c00      	cmp	r4, #0
   89482:	d167      	bne.n	89554 <udd_ep_set_halt+0x10c>
		return true; // Already STALL
	}

	if (ptr_job->busy == true) {
   89484:	f011 0f01 	tst.w	r1, #1
   89488:	d167      	bne.n	8955a <udd_ep_set_halt+0x112>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8948a:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   8948e:	f1d5 0501 	rsbs	r5, r5, #1
   89492:	bf38      	it	cc
   89494:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   89496:	b672      	cpsid	i
   89498:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8949c:	f240 21a0 	movw	r1, #672	; 0x2a0
   894a0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   894a4:	700c      	strb	r4, [r1, #0]
		return false; // Job on going, stall impossible
	}

	flags = cpu_irq_save();
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   894a6:	f010 0f80 	tst.w	r0, #128	; 0x80
   894aa:	d027      	beq.n	894fc <udd_ep_set_halt+0xb4>
   894ac:	f24c 1030 	movw	r0, #49456	; 0xc130
   894b0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   894b4:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   894b8:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   894bc:	d01e      	beq.n	894fc <udd_ep_set_halt+0xb4>
		// Delay the stall after the end of IN transfer on USB line
		ptr_job->stall_requested = true;
   894be:	7d10      	ldrb	r0, [r2, #20]
   894c0:	f040 0104 	orr.w	r1, r0, #4
   894c4:	7511      	strb	r1, [r2, #20]
#ifdef UDD_EP_FIFO_SUPPORTED
		udd_disable_in_send_interrupt(ep_index);
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
   894c6:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   894ca:	f2c4 000a 	movt	r0, #16394	; 0x400a
   894ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   894d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
   894d6:	fa02 f303 	lsl.w	r3, r2, r3
   894da:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   894de:	f2c4 010a 	movt	r1, #16394	; 0x400a
   894e2:	618b      	str	r3, [r1, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   894e4:	b3e5      	cbz	r5, 89560 <udd_ep_set_halt+0x118>
		cpu_irq_enable();
   894e6:	f04f 0001 	mov.w	r0, #1
   894ea:	f240 22a0 	movw	r2, #672	; 0x2a0
   894ee:	f2c2 0207 	movt	r2, #8199	; 0x2007
   894f2:	7010      	strb	r0, [r2, #0]
   894f4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   894f8:	b662      	cpsie	i
   894fa:	e036      	b.n	8956a <udd_ep_set_halt+0x122>
		cpu_irq_restore(flags);
		return true;
	}
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   894fc:	f44f 4241 	mov.w	r2, #49408	; 0xc100
   89500:	f2c4 020a 	movt	r2, #16394	; 0x400a
   89504:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   89508:	f420 7100 	bic.w	r1, r0, #512	; 0x200
   8950c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_ack_stall(ep_index);
   89510:	f24c 1260 	movw	r2, #49504	; 0xc160
   89514:	f2c4 020a 	movt	r2, #16394	; 0x400a
   89518:	f04f 0040 	mov.w	r0, #64	; 0x40
   8951c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   89520:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   89524:	f2c4 020a 	movt	r2, #16394	; 0x400a
   89528:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   8952c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   89530:	b1cd      	cbz	r5, 89566 <udd_ep_set_halt+0x11e>
		cpu_irq_enable();
   89532:	f04f 0001 	mov.w	r0, #1
   89536:	f240 23a0 	movw	r3, #672	; 0x2a0
   8953a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8953e:	7018      	strb	r0, [r3, #0]
   89540:	f3bf 8f5f 	dmb	sy
   89544:	b662      	cpsie	i
   89546:	e010      	b.n	8956a <udd_ep_set_halt+0x122>
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
   89548:	f04f 0000 	mov.w	r0, #0
   8954c:	e00d      	b.n	8956a <udd_ep_set_halt+0x122>
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
   8954e:	f04f 0001 	mov.w	r0, #1
   89552:	e00a      	b.n	8956a <udd_ep_set_halt+0x122>
   89554:	f04f 0001 	mov.w	r0, #1
   89558:	e007      	b.n	8956a <udd_ep_set_halt+0x122>
	}

	if (ptr_job->busy == true) {
		return false; // Job on going, stall impossible
   8955a:	f04f 0000 	mov.w	r0, #0
   8955e:	e004      	b.n	8956a <udd_ep_set_halt+0x122>
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
   89560:	f04f 0001 	mov.w	r0, #1
   89564:	e001      	b.n	8956a <udd_ep_set_halt+0x122>
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
	udd_ack_stall(ep_index);
	udd_enable_stall_handshake(ep_index);
	cpu_irq_restore(flags);
	return true;
   89566:	f04f 0001 	mov.w	r0, #1
}
   8956a:	bc30      	pop	{r4, r5}
   8956c:	4770      	bx	lr
   8956e:	bf00      	nop

00089570 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   89570:	b508      	push	{r3, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   89572:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
   89576:	2805      	cmp	r0, #5
   89578:	d85f      	bhi.n	8963a <udd_ep_clear_halt+0xca>


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   8957a:	f100 33ff 	add.w	r3, r0, #4294967295
   8957e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   89582:	f241 52b8 	movw	r2, #5560	; 0x15b8
   89586:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8958a:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;

	if (ptr_job->stall_requested) {
   8958e:	7d19      	ldrb	r1, [r3, #20]
   89590:	f001 0204 	and.w	r2, r1, #4
   89594:	b2d1      	uxtb	r1, r2
   89596:	2900      	cmp	r1, #0
   89598:	d055      	beq.n	89646 <udd_ep_clear_halt+0xd6>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
   8959a:	7d1a      	ldrb	r2, [r3, #20]
   8959c:	f36f 0282 	bfc	r2, #2, #1
   895a0:	751a      	strb	r2, [r3, #20]
		udd_disable_bank_interrupt(ep_index);
   895a2:	f24c 2120 	movw	r1, #49696	; 0xc220
   895a6:	f2c4 010a 	movt	r1, #16394	; 0x400a
   895aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   895ae:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
   895b2:	fa02 f100 	lsl.w	r1, r2, r0
   895b6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   895ba:	f2c4 020a 	movt	r2, #16394	; 0x400a
   895be:	6151      	str	r1, [r2, #20]
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   895c0:	ea4f 0280 	mov.w	r2, r0, lsl #2
   895c4:	f24c 11c0 	movw	r1, #49600	; 0xc1c0
   895c8:	f2c4 010a 	movt	r1, #16394	; 0x400a
   895cc:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   895d0:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   895d4:	d024      	beq.n	89620 <udd_ep_clear_halt+0xb0>
		if (Is_udd_stall(ep_index)) {
   895d6:	f24c 1130 	movw	r1, #49456	; 0xc130
   895da:	f2c4 010a 	movt	r1, #16394	; 0x400a
   895de:	5850      	ldr	r0, [r2, r1]
   895e0:	f010 0f40 	tst.w	r0, #64	; 0x40
   895e4:	d00d      	beq.n	89602 <udd_ep_clear_halt+0x92>
			udd_ack_stall(ep_index);
   895e6:	f24c 1160 	movw	r1, #49504	; 0xc160
   895ea:	f2c4 010a 	movt	r1, #16394	; 0x400a
   895ee:	f04f 0040 	mov.w	r0, #64	; 0x40
   895f2:	5050      	str	r0, [r2, r1]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep_index);
   895f4:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   895f8:	f2c4 010a 	movt	r1, #16394	; 0x400a
   895fc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   89600:	5050      	str	r0, [r2, r1]
		}
		// Disable stall
		udd_disable_stall_handshake(ep_index);
   89602:	f24c 2120 	movw	r1, #49696	; 0xc220
   89606:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8960a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   8960e:	5050      	str	r0, [r2, r1]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   89610:	f44f 4141 	mov.w	r1, #49408	; 0xc100
   89614:	f2c4 010a 	movt	r1, #16394	; 0x400a
   89618:	5850      	ldr	r0, [r2, r1]
   8961a:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   8961e:	5050      	str	r0, [r2, r1]
		b_stall_cleared = true;
	}
	if (b_stall_cleared) {
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   89620:	7d1a      	ldrb	r2, [r3, #20]
   89622:	f012 0f01 	tst.w	r2, #1
   89626:	d00b      	beq.n	89640 <udd_ep_clear_halt+0xd0>
			ptr_job->busy = false;
   89628:	7d19      	ldrb	r1, [r3, #20]
   8962a:	f36f 0100 	bfc	r1, #0, #1
   8962e:	7519      	strb	r1, [r3, #20]
			ptr_job->call_nohalt();
   89630:	681b      	ldr	r3, [r3, #0]
   89632:	4798      	blx	r3
		}
	}
	return true;
   89634:	f04f 0001 	mov.w	r0, #1
   89638:	bd08      	pop	{r3, pc}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;
   8963a:	f04f 0000 	mov.w	r0, #0
   8963e:	bd08      	pop	{r3, pc}
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   89640:	f04f 0001 	mov.w	r0, #1
   89644:	bd08      	pop	{r3, pc}
		ptr_job->stall_requested = false;
		udd_disable_bank_interrupt(ep_index);
		udd_disable_endpoint_interrupt(ep_index);
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   89646:	ea4f 0280 	mov.w	r2, r0, lsl #2
   8964a:	f24c 11c0 	movw	r1, #49600	; 0xc1c0
   8964e:	f2c4 010a 	movt	r1, #16394	; 0x400a
   89652:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   89656:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   8965a:	d1bc      	bne.n	895d6 <udd_ep_clear_halt+0x66>
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   8965c:	f04f 0001 	mov.w	r0, #1
}
   89660:	bd08      	pop	{r3, pc}
   89662:	bf00      	nop

00089664 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   89664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
#endif
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   89666:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   8966a:	2805      	cmp	r0, #5
   8966c:	d86c      	bhi.n	89748 <udd_ep_run+0xe4>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
   8966e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   89672:	f2c4 040a 	movt	r4, #16394	; 0x400a
   89676:	69e4      	ldr	r4, [r4, #28]
   89678:	f04f 0501 	mov.w	r5, #1
   8967c:	fa05 f500 	lsl.w	r5, r5, r0
   89680:	4225      	tst	r5, r4
   89682:	d064      	beq.n	8974e <udd_ep_run+0xea>
			|| Is_udd_endpoint_stall_requested(ep)
   89684:	f24c 14c0 	movw	r4, #49600	; 0xc1c0
   89688:	f2c4 040a 	movt	r4, #16394	; 0x400a
   8968c:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   89690:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   89694:	d15e      	bne.n	89754 <udd_ep_run+0xf0>
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   89696:	f100 35ff 	add.w	r5, r0, #4294967295
   8969a:	eb05 0645 	add.w	r6, r5, r5, lsl #1
   8969e:	f241 54b8 	movw	r4, #5560	; 0x15b8
   896a2:	f2c2 0407 	movt	r4, #8199	; 0x2007
   896a6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
   896aa:	7d25      	ldrb	r5, [r4, #20]
   896ac:	f005 0604 	and.w	r6, r5, #4
   896b0:	b2f6      	uxtb	r6, r6
   896b2:	2e00      	cmp	r6, #0
   896b4:	d151      	bne.n	8975a <udd_ep_run+0xf6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   896b6:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   896ba:	f1d7 0601 	rsbs	r6, r7, #1
   896be:	bf38      	it	cc
   896c0:	2600      	movcc	r6, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   896c2:	b672      	cpsid	i
   896c4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   896c8:	f240 27a0 	movw	r7, #672	; 0x2a0
   896cc:	f2c2 0707 	movt	r7, #8199	; 0x2007
   896d0:	f04f 0c00 	mov.w	ip, #0
   896d4:	f887 c000 	strb.w	ip, [r7]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
   896d8:	f015 0f01 	tst.w	r5, #1
   896dc:	d009      	beq.n	896f2 <udd_ep_run+0x8e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   896de:	2e00      	cmp	r6, #0
   896e0:	d03e      	beq.n	89760 <udd_ep_run+0xfc>
		cpu_irq_enable();
   896e2:	f04f 0301 	mov.w	r3, #1
   896e6:	703b      	strb	r3, [r7, #0]
   896e8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   896ec:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
   896ee:	4660      	mov	r0, ip
   896f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	ptr_job->busy = true;
   896f2:	7d25      	ldrb	r5, [r4, #20]
   896f4:	f045 0501 	orr.w	r5, r5, #1
   896f8:	7525      	strb	r5, [r4, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   896fa:	b14e      	cbz	r6, 89710 <udd_ep_run+0xac>
		cpu_irq_enable();
   896fc:	f240 25a0 	movw	r5, #672	; 0x2a0
   89700:	f2c2 0507 	movt	r5, #8199	; 0x2007
   89704:	f04f 0601 	mov.w	r6, #1
   89708:	702e      	strb	r6, [r5, #0]
   8970a:	f3bf 8f5f 	dmb	sy
   8970e:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   89710:	6062      	str	r2, [r4, #4]
	ptr_job->buf_size = buf_size;
   89712:	60a3      	str	r3, [r4, #8]
	ptr_job->buf_cnt = 0;
   89714:	f04f 0200 	mov.w	r2, #0
   89718:	60e2      	str	r2, [r4, #12]
	ptr_job->buf_load = 0;
   8971a:	6122      	str	r2, [r4, #16]
	ptr_job->call_trans = callback;
   8971c:	9a06      	ldr	r2, [sp, #24]
   8971e:	6022      	str	r2, [r4, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   89720:	b921      	cbnz	r1, 8972c <udd_ep_run+0xc8>
   89722:	f1d3 0301 	rsbs	r3, r3, #1
   89726:	bf38      	it	cc
   89728:	2300      	movcc	r3, #0
   8972a:	e001      	b.n	89730 <udd_ep_run+0xcc>
   8972c:	f04f 0301 	mov.w	r3, #1
   89730:	7d21      	ldrb	r1, [r4, #20]
   89732:	f363 0141 	bfi	r1, r3, #1, #1
   89736:	7521      	strb	r1, [r4, #20]
#endif // UDD_EP_FIFO_SUPPORTED

#ifdef UDD_EP_DMA_SUPPORTED
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
   89738:	f248 3255 	movw	r2, #33621	; 0x8355
   8973c:	f2c0 0208 	movt	r2, #8
   89740:	4790      	blx	r2
	return true;
   89742:	f04f 0001 	mov.w	r0, #1
   89746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
   89748:	f04f 0000 	mov.w	r0, #0
   8974c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
   8974e:	f04f 0000 	mov.w	r0, #0
   89752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89754:	f04f 0000 	mov.w	r0, #0
   89758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8975a:	f04f 0000 	mov.w	r0, #0
   8975e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
   89760:	f04f 0000 	mov.w	r0, #0
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
	return true;
#endif
}
   89764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89766:	bf00      	nop

00089768 <udd_ep_alloc>:


#if (0 != USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   89768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8976c:	b085      	sub	sp, #20
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
   8976e:	f000 040f 	and.w	r4, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
   89772:	2c05      	cmp	r4, #5
   89774:	f200 8101 	bhi.w	8997a <udd_ep_alloc+0x212>
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
   89778:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8977c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   89780:	69db      	ldr	r3, [r3, #28]
   89782:	f04f 0501 	mov.w	r5, #1
   89786:	fa05 f504 	lsl.w	r5, r5, r4
   8978a:	421d      	tst	r5, r3
   8978c:	f040 80f8 	bne.w	89980 <udd_ep_alloc+0x218>
		return false;
	}
	dbg_print("alloc(%x, %d) ", ep, MaxEndpointSize);

	// Bank choise
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   89790:	f001 0303 	and.w	r3, r1, #3
   89794:	2b02      	cmp	r3, #2
   89796:	d006      	beq.n	897a6 <udd_ep_alloc+0x3e>
   89798:	2b03      	cmp	r3, #3
   8979a:	f000 80fd 	beq.w	89998 <udd_ep_alloc+0x230>
   8979e:	2b01      	cmp	r3, #1
   897a0:	f040 80f1 	bne.w	89986 <udd_ep_alloc+0x21e>
   897a4:	e007      	b.n	897b6 <udd_ep_alloc+0x4e>
		break;
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
		break;
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   897a6:	f1a4 0604 	sub.w	r6, r4, #4
   897aa:	b2f5      	uxtb	r5, r6
		Assert(false);
		return false;
	}
	switch (nb_bank) {
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   897ac:	2d01      	cmp	r5, #1
   897ae:	bf94      	ite	ls
   897b0:	2500      	movls	r5, #0
   897b2:	2501      	movhi	r5, #1
   897b4:	e001      	b.n	897ba <udd_ep_alloc+0x52>
				UOTGHS_DEVEPTCFG_EPBK_Pos;
		break;
	case 2:
		bank = UOTGHS_DEVEPTCFG_EPBK_2_BANK >>
   897b6:	f04f 0501 	mov.w	r5, #1
	Assert((MaxEndpointSize == 1023)
		|| !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   897ba:	f44f 4741 	mov.w	r7, #49408	; 0xc100
   897be:	f2c4 070a 	movt	r7, #16394	; 0x400a
   897c2:	eb07 0684 	add.w	r6, r7, r4, lsl #2
   897c6:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   897ca:	f423 57cb 	bic.w	r7, r3, #6496	; 0x1960
   897ce:	f027 071c 	bic.w	r7, r7, #28
   897d2:	ea4f 21c1 	mov.w	r1, r1, lsl #11
   897d6:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
   897da:	f000 0080 	and.w	r0, r0, #128	; 0x80
   897de:	2800      	cmp	r0, #0
   897e0:	bf14      	ite	ne
   897e2:	f44f 7080 	movne.w	r0, #256	; 0x100
   897e6:	2000      	moveq	r0, #0
   897e8:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
   897ec:	b29b      	uxth	r3, r3
   897ee:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   897f2:	d306      	bcc.n	89802 <udd_ep_alloc+0x9a>
   897f4:	2a08      	cmp	r2, #8
   897f6:	d907      	bls.n	89808 <udd_ep_alloc+0xa0>
   897f8:	ea4f 0342 	mov.w	r3, r2, lsl #1
   897fc:	f103 32ff 	add.w	r2, r3, #4294967295
   89800:	e004      	b.n	8980c <udd_ep_alloc+0xa4>
   89802:	f240 72ff 	movw	r2, #2047	; 0x7ff
   89806:	e001      	b.n	8980c <udd_ep_alloc+0xa4>
   89808:	f04f 020f 	mov.w	r2, #15
   8980c:	fab2 f282 	clz	r2, r2
   89810:	ea41 0585 	orr.w	r5, r1, r5, lsl #2
   89814:	4305      	orrs	r5, r0
   89816:	f1c2 011c 	rsb	r1, r2, #28
   8981a:	ea45 1001 	orr.w	r0, r5, r1, lsl #4
   8981e:	f641 1374 	movw	r3, #6516	; 0x1974
   89822:	4003      	ands	r3, r0
   89824:	433b      	orrs	r3, r7
   89826:	6033      	str	r3, [r6, #0]
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
   89828:	f04f 0601 	mov.w	r6, #1
   8982c:	fa06 f604 	lsl.w	r6, r6, r4
   89830:	b2b7      	uxth	r7, r6

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   89832:	2c04      	cmp	r4, #4
   89834:	f200 80b3 	bhi.w	8999e <udd_ep_alloc+0x236>
   89838:	f24c 1114 	movw	r1, #49428	; 0xc114
   8983c:	f2c4 010a 	movt	r1, #16394	; 0x400a
   89840:	f04f 0305 	mov.w	r3, #5
		if (Is_udd_endpoint_enabled(i)) {
   89844:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   89848:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8984c:	f04f 0001 	mov.w	r0, #1
   89850:	ea6f 0504 	mvn.w	r5, r4
   89854:	18ee      	adds	r6, r5, r3
   89856:	ea06 0c00 	and.w	ip, r6, r0
   8985a:	69d6      	ldr	r6, [r2, #28]
   8985c:	fa00 f503 	lsl.w	r5, r0, r3
   89860:	4235      	tst	r5, r6
   89862:	f000 81c3 	beq.w	89bec <udd_ep_alloc+0x484>
   89866:	e1b5      	b.n	89bd4 <udd_ep_alloc+0x46c>
   89868:	46a0      	mov	r8, r4
   8986a:	e7ff      	b.n	8986c <udd_ep_alloc+0x104>
   8986c:	69d4      	ldr	r4, [r2, #28]
   8986e:	fa00 f603 	lsl.w	r6, r0, r3
   89872:	4226      	tst	r6, r4
   89874:	d009      	beq.n	8988a <udd_ep_alloc+0x122>
			ep_allocated |= 1 << i;
   89876:	4337      	orrs	r7, r6
   89878:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   8987a:	69d4      	ldr	r4, [r2, #28]
   8987c:	ea24 0606 	bic.w	r6, r4, r6
   89880:	61d6      	str	r6, [r2, #28]
			udd_unallocate_memory(i);
   89882:	680d      	ldr	r5, [r1, #0]
   89884:	f025 0402 	bic.w	r4, r5, #2
   89888:	600c      	str	r4, [r1, #0]
   8988a:	f103 33ff 	add.w	r3, r3, #4294967295
   8988e:	f1a1 0904 	sub.w	r9, r1, #4
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
   89892:	69d4      	ldr	r4, [r2, #28]
   89894:	fa00 f503 	lsl.w	r5, r0, r3
   89898:	4225      	tst	r5, r4
   8989a:	f000 81dc 	beq.w	89c56 <udd_ep_alloc+0x4ee>
   8989e:	e1cc      	b.n	89c3a <udd_ep_alloc+0x4d2>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
   898a0:	fa47 f004 	asr.w	r0, r7, r4
   898a4:	f010 0f01 	tst.w	r0, #1
   898a8:	d05a      	beq.n	89960 <udd_ep_alloc+0x1f8>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   898aa:	f104 33ff 	add.w	r3, r4, #4294967295
   898ae:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   898b2:	eb09 05cc 	add.w	r5, r9, ip, lsl #3
			bool b_restart = ptr_job->busy;
   898b6:	7d29      	ldrb	r1, [r5, #20]
   898b8:	f001 0201 	and.w	r2, r1, #1
   898bc:	9203      	str	r2, [sp, #12]
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   898be:	f36f 0100 	bfc	r1, #0, #1
   898c2:	7529      	strb	r1, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   898c4:	ea4f 0184 	mov.w	r1, r4, lsl #2
   898c8:	198a      	adds	r2, r1, r6
   898ca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   898ce:	f040 0302 	orr.w	r3, r0, #2
   898d2:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			udd_enable_endpoint(i);
   898d6:	f8d8 301c 	ldr.w	r3, [r8, #28]
   898da:	f04f 0001 	mov.w	r0, #1
   898de:	fa00 fb04 	lsl.w	fp, r0, r4
   898e2:	ea4b 0303 	orr.w	r3, fp, r3
   898e6:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   898ea:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
   898ee:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   898f2:	d110      	bne.n	89916 <udd_ep_alloc+0x1ae>
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
   898f4:	682b      	ldr	r3, [r5, #0]
   898f6:	2b00      	cmp	r3, #0
   898f8:	d048      	beq.n	8998c <udd_ep_alloc+0x224>
					return false;
				}
				if (Is_udd_endpoint_in(i)) {
   898fa:	6811      	ldr	r1, [r2, #0]
   898fc:	f411 7f80 	tst.w	r1, #256	; 0x100
					i |= USB_EP_DIR_IN;
   89900:	bf18      	it	ne
   89902:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   89906:	f04f 0001 	mov.w	r0, #1
   8990a:	68e9      	ldr	r1, [r5, #12]
   8990c:	4622      	mov	r2, r4
   8990e:	4798      	blx	r3
						ptr_job->buf_cnt, i);
				return false;
   89910:	f04f 0000 	mov.w	r0, #0
   89914:	e05d      	b.n	899d2 <udd_ep_alloc+0x26a>
			}
			udd_enable_endpoint_bank_autoswitch(i);
   89916:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   8991a:	f442 7300 	orr.w	r3, r2, #512	; 0x200
   8991e:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			if (b_restart) {
   89922:	9a03      	ldr	r2, [sp, #12]
   89924:	b1e2      	cbz	r2, 89960 <udd_ep_alloc+0x1f8>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   89926:	68ea      	ldr	r2, [r5, #12]
   89928:	692b      	ldr	r3, [r5, #16]
   8992a:	1ad3      	subs	r3, r2, r3
   8992c:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8992e:	5989      	ldr	r1, [r1, r6]
   89930:	f411 7f80 	tst.w	r1, #256	; 0x100
   89934:	bf14      	ite	ne
   89936:	f044 0080 	orrne.w	r0, r4, #128	; 0x80
   8993a:	4620      	moveq	r0, r4
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   8993c:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8993e:	f8d5 e004 	ldr.w	lr, [r5, #4]
   89942:	68ad      	ldr	r5, [r5, #8]
   89944:	f859 203c 	ldr.w	r2, [r9, ip, lsl #3]
   89948:	9200      	str	r2, [sp, #0]
   8994a:	f3c1 0140 	ubfx	r1, r1, #1, #1
   8994e:	eb0e 0203 	add.w	r2, lr, r3
   89952:	1aeb      	subs	r3, r5, r3
   89954:	f249 6565 	movw	r5, #38501	; 0x9665
   89958:	f2c0 0508 	movt	r5, #8
   8995c:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   8995e:	b1c0      	cbz	r0, 89992 <udd_ep_alloc+0x22a>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   89960:	f104 0401 	add.w	r4, r4, #1
   89964:	b2e4      	uxtb	r4, r4
		if (ep_allocated & (1 << i)) {
   89966:	fa47 f004 	asr.w	r0, r7, r4
   8996a:	f010 0f01 	tst.w	r0, #1
   8996e:	f000 812a 	beq.w	89bc6 <udd_ep_alloc+0x45e>
   89972:	e0d9      	b.n	89b28 <udd_ep_alloc+0x3c0>
					return false;
				}
			}
		}
	}
	return true;
   89974:	f04f 0001 	mov.w	r0, #1
   89978:	e02b      	b.n	899d2 <udd_ep_alloc+0x26a>

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
   8997a:	f04f 0000 	mov.w	r0, #0
   8997e:	e028      	b.n	899d2 <udd_ep_alloc+0x26a>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
   89980:	f04f 0000 	mov.w	r0, #0
   89984:	e025      	b.n	899d2 <udd_ep_alloc+0x26a>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
		break;
	default:
		Assert(false);
		return false;
   89986:	f04f 0000 	mov.w	r0, #0
   8998a:	e022      	b.n	899d2 <udd_ep_alloc+0x26a>
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i)) {
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
					return false;
   8998c:	f04f 0000 	mov.w	r0, #0
   89990:	e01f      	b.n	899d2 <udd_ep_alloc+0x26a>
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
					dbg_print("ErrReRun%d ", i);
					return false;
   89992:	f04f 0000 	mov.w	r0, #0
   89996:	e01c      	b.n	899d2 <udd_ep_alloc+0x26a>
		Assert(false);
		return false;
	}
	switch (nb_bank) {
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   89998:	f04f 0500 	mov.w	r5, #0
   8999c:	e70d      	b.n	897ba <udd_ep_alloc+0x52>
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   8999e:	f241 59b8 	movw	r9, #5560	; 0x15b8
   899a2:	f2c2 0907 	movt	r9, #8199	; 0x2007
			bool b_restart = ptr_job->busy;
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
			// Re-allocate memory
			udd_allocate_memory(i);
   899a6:	f44f 4641 	mov.w	r6, #49408	; 0xc100
   899aa:	f2c4 060a 	movt	r6, #16394	; 0x400a
			udd_enable_endpoint(i);
   899ae:	f44f 4840 	mov.w	r8, #49152	; 0xc000
   899b2:	f2c4 080a 	movt	r8, #16394	; 0x400a
			if (!Is_udd_endpoint_configured(i)) {
   899b6:	f24c 1a30 	movw	sl, #49456	; 0xc130
   899ba:	f2c4 0a0a 	movt	sl, #16394	; 0x400a
   899be:	f1c4 0b05 	rsb	fp, r4, #5
   899c2:	f00b 0b01 	and.w	fp, fp, #1
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
   899c6:	fa47 f204 	asr.w	r2, r7, r4
   899ca:	f012 0f01 	tst.w	r2, #1
   899ce:	d04c      	beq.n	89a6a <udd_ep_alloc+0x302>
   899d0:	e002      	b.n	899d8 <udd_ep_alloc+0x270>
				}
			}
		}
	}
	return true;
}
   899d2:	b005      	add	sp, #20
   899d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   899d8:	f104 30ff 	add.w	r0, r4, #4294967295
   899dc:	eb00 0540 	add.w	r5, r0, r0, lsl #1
   899e0:	eb09 05c5 	add.w	r5, r9, r5, lsl #3
			bool b_restart = ptr_job->busy;
   899e4:	7d2b      	ldrb	r3, [r5, #20]
   899e6:	f003 0c01 	and.w	ip, r3, #1
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   899ea:	f36f 0300 	bfc	r3, #0, #1
   899ee:	752b      	strb	r3, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   899f0:	ea4f 0384 	mov.w	r3, r4, lsl #2
   899f4:	199a      	adds	r2, r3, r6
   899f6:	6811      	ldr	r1, [r2, #0]
   899f8:	f041 0002 	orr.w	r0, r1, #2
   899fc:	6010      	str	r0, [r2, #0]
			udd_enable_endpoint(i);
   899fe:	f8d8 101c 	ldr.w	r1, [r8, #28]
   89a02:	f04f 0001 	mov.w	r0, #1
   89a06:	fa00 f004 	lsl.w	r0, r0, r4
   89a0a:	4301      	orrs	r1, r0
   89a0c:	f8c8 101c 	str.w	r1, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   89a10:	4453      	add	r3, sl
   89a12:	6818      	ldr	r0, [r3, #0]
   89a14:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   89a18:	f43f af6c 	beq.w	898f4 <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   89a1c:	6811      	ldr	r1, [r2, #0]
   89a1e:	f441 7300 	orr.w	r3, r1, #512	; 0x200
   89a22:	6013      	str	r3, [r2, #0]
			if (b_restart) {
   89a24:	f1bc 0f00 	cmp.w	ip, #0
   89a28:	d01f      	beq.n	89a6a <udd_ep_alloc+0x302>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   89a2a:	68e8      	ldr	r0, [r5, #12]
   89a2c:	6929      	ldr	r1, [r5, #16]
   89a2e:	1a43      	subs	r3, r0, r1
   89a30:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   89a32:	6812      	ldr	r2, [r2, #0]
   89a34:	f412 7f80 	tst.w	r2, #256	; 0x100
   89a38:	d012      	beq.n	89a60 <udd_ep_alloc+0x2f8>
   89a3a:	e013      	b.n	89a64 <udd_ep_alloc+0x2fc>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   89a3c:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   89a3e:	686a      	ldr	r2, [r5, #4]
   89a40:	f8d5 e008 	ldr.w	lr, [r5, #8]
   89a44:	682d      	ldr	r5, [r5, #0]
   89a46:	9500      	str	r5, [sp, #0]
   89a48:	f3c1 0140 	ubfx	r1, r1, #1, #1
   89a4c:	18d2      	adds	r2, r2, r3
   89a4e:	ebc3 030e 	rsb	r3, r3, lr
   89a52:	f249 6565 	movw	r5, #38501	; 0x9665
   89a56:	f2c0 0508 	movt	r5, #8
   89a5a:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   89a5c:	b928      	cbnz	r0, 89a6a <udd_ep_alloc+0x302>
   89a5e:	e798      	b.n	89992 <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   89a60:	4620      	mov	r0, r4
   89a62:	e7eb      	b.n	89a3c <udd_ep_alloc+0x2d4>
   89a64:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   89a68:	e7e8      	b.n	89a3c <udd_ep_alloc+0x2d4>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   89a6a:	f104 0401 	add.w	r4, r4, #1
   89a6e:	b2e4      	uxtb	r4, r4
   89a70:	2c06      	cmp	r4, #6
   89a72:	f43f af7f 	beq.w	89974 <udd_ep_alloc+0x20c>
   89a76:	fa4f f08b 	sxtb.w	r0, fp
   89a7a:	2800      	cmp	r0, #0
   89a7c:	f43f af10 	beq.w	898a0 <udd_ep_alloc+0x138>
		if (ep_allocated & (1 << i)) {
   89a80:	fa47 f304 	asr.w	r3, r7, r4
   89a84:	f013 0f01 	tst.w	r3, #1
   89a88:	d047      	beq.n	89b1a <udd_ep_alloc+0x3b2>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   89a8a:	f104 31ff 	add.w	r1, r4, #4294967295
   89a8e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   89a92:	eb09 05c2 	add.w	r5, r9, r2, lsl #3
			bool b_restart = ptr_job->busy;
   89a96:	7d28      	ldrb	r0, [r5, #20]
   89a98:	f000 0101 	and.w	r1, r0, #1
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   89a9c:	f36f 0000 	bfc	r0, #0, #1
   89aa0:	7528      	strb	r0, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   89aa2:	ea4f 0384 	mov.w	r3, r4, lsl #2
   89aa6:	199a      	adds	r2, r3, r6
   89aa8:	6810      	ldr	r0, [r2, #0]
   89aaa:	f040 0002 	orr.w	r0, r0, #2
   89aae:	6010      	str	r0, [r2, #0]
			udd_enable_endpoint(i);
   89ab0:	f8d8 001c 	ldr.w	r0, [r8, #28]
   89ab4:	f04f 0b01 	mov.w	fp, #1
   89ab8:	fa0b fc04 	lsl.w	ip, fp, r4
   89abc:	ea4c 0000 	orr.w	r0, ip, r0
   89ac0:	f8c8 001c 	str.w	r0, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   89ac4:	4453      	add	r3, sl
   89ac6:	6818      	ldr	r0, [r3, #0]
   89ac8:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   89acc:	f43f af12 	beq.w	898f4 <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   89ad0:	6813      	ldr	r3, [r2, #0]
   89ad2:	f443 7000 	orr.w	r0, r3, #512	; 0x200
   89ad6:	6010      	str	r0, [r2, #0]
			if (b_restart) {
   89ad8:	b1f9      	cbz	r1, 89b1a <udd_ep_alloc+0x3b2>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   89ada:	68e9      	ldr	r1, [r5, #12]
   89adc:	692b      	ldr	r3, [r5, #16]
   89ade:	1acb      	subs	r3, r1, r3
   89ae0:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   89ae2:	6812      	ldr	r2, [r2, #0]
   89ae4:	f412 7f80 	tst.w	r2, #256	; 0x100
   89ae8:	d012      	beq.n	89b10 <udd_ep_alloc+0x3a8>
   89aea:	e013      	b.n	89b14 <udd_ep_alloc+0x3ac>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   89aec:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   89aee:	686a      	ldr	r2, [r5, #4]
   89af0:	f8d5 e008 	ldr.w	lr, [r5, #8]
   89af4:	682d      	ldr	r5, [r5, #0]
   89af6:	9500      	str	r5, [sp, #0]
   89af8:	f3c1 0140 	ubfx	r1, r1, #1, #1
   89afc:	18d2      	adds	r2, r2, r3
   89afe:	ebc3 030e 	rsb	r3, r3, lr
   89b02:	f249 6565 	movw	r5, #38501	; 0x9665
   89b06:	f2c0 0508 	movt	r5, #8
   89b0a:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   89b0c:	b928      	cbnz	r0, 89b1a <udd_ep_alloc+0x3b2>
   89b0e:	e740      	b.n	89992 <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   89b10:	4620      	mov	r0, r4
   89b12:	e7eb      	b.n	89aec <udd_ep_alloc+0x384>
   89b14:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   89b18:	e7e8      	b.n	89aec <udd_ep_alloc+0x384>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   89b1a:	f104 0401 	add.w	r4, r4, #1
   89b1e:	b2e4      	uxtb	r4, r4
   89b20:	2c06      	cmp	r4, #6
   89b22:	f47f aebd 	bne.w	898a0 <udd_ep_alloc+0x138>
   89b26:	e725      	b.n	89974 <udd_ep_alloc+0x20c>
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   89b28:	f104 33ff 	add.w	r3, r4, #4294967295
   89b2c:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   89b30:	eb09 05cc 	add.w	r5, r9, ip, lsl #3
			bool b_restart = ptr_job->busy;
   89b34:	7d29      	ldrb	r1, [r5, #20]
   89b36:	f001 0201 	and.w	r2, r1, #1
   89b3a:	9203      	str	r2, [sp, #12]
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   89b3c:	f36f 0100 	bfc	r1, #0, #1
   89b40:	7529      	strb	r1, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   89b42:	ea4f 0184 	mov.w	r1, r4, lsl #2
   89b46:	198a      	adds	r2, r1, r6
   89b48:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   89b4c:	f040 0302 	orr.w	r3, r0, #2
   89b50:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			udd_enable_endpoint(i);
   89b54:	f8d8 301c 	ldr.w	r3, [r8, #28]
   89b58:	f04f 0001 	mov.w	r0, #1
   89b5c:	fa00 fb04 	lsl.w	fp, r0, r4
   89b60:	ea4b 0303 	orr.w	r3, fp, r3
   89b64:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   89b68:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
   89b6c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   89b70:	f43f aec0 	beq.w	898f4 <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   89b74:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   89b78:	f442 7300 	orr.w	r3, r2, #512	; 0x200
   89b7c:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			if (b_restart) {
   89b80:	9803      	ldr	r0, [sp, #12]
   89b82:	b300      	cbz	r0, 89bc6 <udd_ep_alloc+0x45e>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   89b84:	68ea      	ldr	r2, [r5, #12]
   89b86:	692b      	ldr	r3, [r5, #16]
   89b88:	1ad3      	subs	r3, r2, r3
   89b8a:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   89b8c:	5989      	ldr	r1, [r1, r6]
   89b8e:	f411 7f80 	tst.w	r1, #256	; 0x100
   89b92:	d013      	beq.n	89bbc <udd_ep_alloc+0x454>
   89b94:	e014      	b.n	89bc0 <udd_ep_alloc+0x458>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   89b96:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   89b98:	f8d5 e004 	ldr.w	lr, [r5, #4]
   89b9c:	68ad      	ldr	r5, [r5, #8]
   89b9e:	f859 203c 	ldr.w	r2, [r9, ip, lsl #3]
   89ba2:	9200      	str	r2, [sp, #0]
   89ba4:	f3c1 0140 	ubfx	r1, r1, #1, #1
   89ba8:	eb0e 0203 	add.w	r2, lr, r3
   89bac:	1aeb      	subs	r3, r5, r3
   89bae:	f249 6565 	movw	r5, #38501	; 0x9665
   89bb2:	f2c0 0508 	movt	r5, #8
   89bb6:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   89bb8:	b928      	cbnz	r0, 89bc6 <udd_ep_alloc+0x45e>
   89bba:	e6ea      	b.n	89992 <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   89bbc:	4620      	mov	r0, r4
   89bbe:	e7ea      	b.n	89b96 <udd_ep_alloc+0x42e>
   89bc0:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   89bc4:	e7e7      	b.n	89b96 <udd_ep_alloc+0x42e>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   89bc6:	f104 0401 	add.w	r4, r4, #1
   89bca:	b2e4      	uxtb	r4, r4
   89bcc:	2c06      	cmp	r4, #6
   89bce:	f47f ae67 	bne.w	898a0 <udd_ep_alloc+0x138>
   89bd2:	e6cf      	b.n	89974 <udd_ep_alloc+0x20c>
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
   89bd4:	fa00 f603 	lsl.w	r6, r0, r3
   89bd8:	4337      	orrs	r7, r6
   89bda:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   89bdc:	69d6      	ldr	r6, [r2, #28]
   89bde:	ea26 0505 	bic.w	r5, r6, r5
   89be2:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   89be4:	680e      	ldr	r6, [r1, #0]
   89be6:	f026 0502 	bic.w	r5, r6, #2
   89bea:	600d      	str	r5, [r1, #0]
   89bec:	f103 33ff 	add.w	r3, r3, #4294967295
   89bf0:	f1a1 0104 	sub.w	r1, r1, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   89bf4:	b2dd      	uxtb	r5, r3
   89bf6:	42a5      	cmp	r5, r4
   89bf8:	f67f aed1 	bls.w	8999e <udd_ep_alloc+0x236>
   89bfc:	fa4f f68c 	sxtb.w	r6, ip
   89c00:	2e00      	cmp	r6, #0
   89c02:	f43f ae31 	beq.w	89868 <udd_ep_alloc+0x100>
		if (Is_udd_endpoint_enabled(i)) {
   89c06:	69d6      	ldr	r6, [r2, #28]
   89c08:	fa00 f503 	lsl.w	r5, r0, r3
   89c0c:	4235      	tst	r5, r6
   89c0e:	d009      	beq.n	89c24 <udd_ep_alloc+0x4bc>
			ep_allocated |= 1 << i;
   89c10:	432f      	orrs	r7, r5
   89c12:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   89c14:	69d6      	ldr	r6, [r2, #28]
   89c16:	ea26 0505 	bic.w	r5, r6, r5
   89c1a:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   89c1c:	680e      	ldr	r6, [r1, #0]
   89c1e:	f026 0502 	bic.w	r5, r6, #2
   89c22:	600d      	str	r5, [r1, #0]
   89c24:	f103 33ff 	add.w	r3, r3, #4294967295
   89c28:	f1a1 0104 	sub.w	r1, r1, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   89c2c:	b2dd      	uxtb	r5, r3
   89c2e:	42a5      	cmp	r5, r4
   89c30:	bf88      	it	hi
   89c32:	46a0      	movhi	r8, r4
   89c34:	f63f ae1a 	bhi.w	8986c <udd_ep_alloc+0x104>
   89c38:	e6b1      	b.n	8999e <udd_ep_alloc+0x236>
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
   89c3a:	fa00 f603 	lsl.w	r6, r0, r3
   89c3e:	4337      	orrs	r7, r6
   89c40:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   89c42:	69d4      	ldr	r4, [r2, #28]
   89c44:	ea24 0505 	bic.w	r5, r4, r5
   89c48:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   89c4a:	f851 6c04 	ldr.w	r6, [r1, #-4]
   89c4e:	f026 0402 	bic.w	r4, r6, #2
   89c52:	f841 4c04 	str.w	r4, [r1, #-4]
   89c56:	f103 33ff 	add.w	r3, r3, #4294967295
   89c5a:	f1a9 0104 	sub.w	r1, r9, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   89c5e:	b2dd      	uxtb	r5, r3
   89c60:	4545      	cmp	r5, r8
   89c62:	f63f ae03 	bhi.w	8986c <udd_ep_alloc+0x104>
   89c66:	4644      	mov	r4, r8
   89c68:	e699      	b.n	8999e <udd_ep_alloc+0x236>
   89c6a:	bf00      	nop

00089c6c <udd_ep_abort>:
#endif
}


void udd_ep_abort(udd_ep_id_t ep)
{
   89c6c:	b538      	push	{r3, r4, r5, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   89c6e:	f000 030f 	and.w	r3, r0, #15
		udd_disable_in_send_interrupt(ep_index);
	} else
#endif
	{
		// Stop DMA transfer
		udd_disable_endpoint_dma_interrupt(ep_index);
   89c72:	f103 32ff 	add.w	r2, r3, #4294967295
   89c76:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   89c7a:	fa01 f102 	lsl.w	r1, r1, r2
   89c7e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   89c82:	f2c4 020a 	movt	r2, #16394	; 0x400a
   89c86:	6151      	str	r1, [r2, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   89c88:	f44f 4443 	mov.w	r4, #49920	; 0xc300
   89c8c:	f2c4 040a 	movt	r4, #16394	; 0x400a
   89c90:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   89c94:	f04f 0400 	mov.w	r4, #0
   89c98:	608c      	str	r4, [r1, #8]
	}
	udd_disable_endpoint_interrupt(ep_index);
   89c9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   89c9e:	fa01 f103 	lsl.w	r1, r1, r3
   89ca2:	6151      	str	r1, [r2, #20]
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
   89ca4:	f010 0f80 	tst.w	r0, #128	; 0x80
   89ca8:	d01c      	beq.n	89ce4 <udd_ep_abort+0x78>
		while(udd_nb_busy_bank(ep_index)) {
   89caa:	ea4f 0383 	mov.w	r3, r3, lsl #2
   89cae:	f24c 1530 	movw	r5, #49456	; 0xc130
   89cb2:	f2c4 050a 	movt	r5, #16394	; 0x400a
   89cb6:	1959      	adds	r1, r3, r5
			udd_kill_last_in_bank(ep_index);
   89cb8:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   89cbc:	f2c4 020a 	movt	r2, #16394	; 0x400a
   89cc0:	189c      	adds	r4, r3, r2
   89cc2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
   89cc6:	f24c 12c0 	movw	r2, #49600	; 0xc1c0
   89cca:	f2c4 020a 	movt	r2, #16394	; 0x400a
   89cce:	189a      	adds	r2, r3, r2
   89cd0:	e004      	b.n	89cdc <udd_ep_abort+0x70>
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
			udd_kill_last_in_bank(ep_index);
   89cd2:	6025      	str	r5, [r4, #0]
			while(Is_udd_kill_last(ep_index));
   89cd4:	6813      	ldr	r3, [r2, #0]
   89cd6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   89cda:	d1fb      	bne.n	89cd4 <udd_ep_abort+0x68>
		udd_endpoint_dma_set_control(ep_index, 0);
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
   89cdc:	680b      	ldr	r3, [r1, #0]
   89cde:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   89ce2:	d1f6      	bne.n	89cd2 <udd_ep_abort+0x66>
			udd_kill_last_in_bank(ep_index);
			while(Is_udd_kill_last(ep_index));
		}
	}
	udd_ep_abort_job(ep);
   89ce4:	f248 3129 	movw	r1, #33577	; 0x8329
   89ce8:	f2c0 0108 	movt	r1, #8
   89cec:	4788      	blx	r1
   89cee:	bd38      	pop	{r3, r4, r5, pc}

00089cf0 <udd_ep_wait_stall_clear>:
}


bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
   89cf0:	b510      	push	{r4, lr}
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   89cf2:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   89cf6:	2805      	cmp	r0, #5
   89cf8:	d831      	bhi.n	89d5e <udd_ep_wait_stall_clear+0x6e>
		return false;
	}

	ptr_job = &udd_ep_job[ep - 1];

	if (!Is_udd_endpoint_enabled(ep)) {
   89cfa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89cfe:	f2c4 030a 	movt	r3, #16394	; 0x400a
   89d02:	69db      	ldr	r3, [r3, #28]
   89d04:	f04f 0201 	mov.w	r2, #1
   89d08:	fa02 f200 	lsl.w	r2, r2, r0
   89d0c:	421a      	tst	r2, r3
   89d0e:	d029      	beq.n	89d64 <udd_ep_wait_stall_clear+0x74>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	ptr_job = &udd_ep_job[ep - 1];
   89d10:	f100 33ff 	add.w	r3, r0, #4294967295
   89d14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   89d18:	f241 52b8 	movw	r2, #5560	; 0x15b8
   89d1c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89d20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (!Is_udd_endpoint_enabled(ep)) {
		return false; // Endpoint not enabled
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
   89d24:	7d1a      	ldrb	r2, [r3, #20]
   89d26:	f012 0f01 	tst.w	r2, #1
   89d2a:	d11e      	bne.n	89d6a <udd_ep_wait_stall_clear+0x7a>
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
   89d2c:	f24c 14c0 	movw	r4, #49600	; 0xc1c0
   89d30:	f2c4 040a 	movt	r4, #16394	; 0x400a
   89d34:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   89d38:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   89d3c:	d103      	bne.n	89d46 <udd_ep_wait_stall_clear+0x56>
			|| ptr_job->stall_requested) {
   89d3e:	f002 0204 	and.w	r2, r2, #4
   89d42:	b2d0      	uxtb	r0, r2
   89d44:	b138      	cbz	r0, 89d56 <udd_ep_wait_stall_clear+0x66>
		// Endpoint halted then registes the callback
		ptr_job->busy = true;
   89d46:	7d1a      	ldrb	r2, [r3, #20]
   89d48:	f042 0001 	orr.w	r0, r2, #1
   89d4c:	7518      	strb	r0, [r3, #20]
		ptr_job->call_nohalt = callback;
   89d4e:	6019      	str	r1, [r3, #0]
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
   89d50:	f04f 0001 	mov.w	r0, #1

	if (Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		// Endpoint halted then registes the callback
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
   89d54:	bd10      	pop	{r4, pc}
	} else {
		// endpoint not halted then call directly callback
		callback();
   89d56:	4788      	blx	r1
	}
	return true;
   89d58:	f04f 0001 	mov.w	r0, #1
   89d5c:	bd10      	pop	{r4, pc}
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
   89d5e:	f04f 0000 	mov.w	r0, #0
   89d62:	bd10      	pop	{r4, pc}
	}

	ptr_job = &udd_ep_job[ep - 1];

	if (!Is_udd_endpoint_enabled(ep)) {
		return false; // Endpoint not enabled
   89d64:	f04f 0000 	mov.w	r0, #0
   89d68:	bd10      	pop	{r4, pc}
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
   89d6a:	f04f 0000 	mov.w	r0, #0
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
   89d6e:	bd10      	pop	{r4, pc}

00089d70 <udd_test_mode_j>:

#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
	udd_enable_hs_test_mode();
   89d70:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89d74:	f2c4 030a 	movt	r3, #16394	; 0x400a
   89d78:	681a      	ldr	r2, [r3, #0]
   89d7a:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   89d7e:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   89d82:	6019      	str	r1, [r3, #0]
	udd_enable_hs_test_mode_j();
   89d84:	681a      	ldr	r2, [r3, #0]
   89d86:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
   89d8a:	6018      	str	r0, [r3, #0]
   89d8c:	4770      	bx	lr
   89d8e:	bf00      	nop

00089d90 <udd_test_mode_k>:
}


void udd_test_mode_k(void)
{
	udd_enable_hs_test_mode();
   89d90:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89d94:	f2c4 030a 	movt	r3, #16394	; 0x400a
   89d98:	681a      	ldr	r2, [r3, #0]
   89d9a:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   89d9e:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   89da2:	6019      	str	r1, [r3, #0]
	udd_enable_hs_test_mode_k();
   89da4:	681a      	ldr	r2, [r3, #0]
   89da6:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   89daa:	6018      	str	r0, [r3, #0]
   89dac:	4770      	bx	lr
   89dae:	bf00      	nop

00089db0 <udd_test_mode_se0_nak>:
}


void udd_test_mode_se0_nak(void)
{
	udd_enable_hs_test_mode();
   89db0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89db4:	f2c4 030a 	movt	r3, #16394	; 0x400a
   89db8:	681a      	ldr	r2, [r3, #0]
   89dba:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   89dbe:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   89dc2:	6019      	str	r1, [r3, #0]
   89dc4:	4770      	bx	lr
   89dc6:	bf00      	nop

00089dc8 <udd_test_mode_packet>:
}


void udd_test_mode_packet(void)
{
   89dc8:	b470      	push	{r4, r5, r6}
   89dca:	b08f      	sub	sp, #60	; 0x3c
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   89dcc:	f64d 6524 	movw	r5, #56868	; 0xde24
   89dd0:	f2c0 0508 	movt	r5, #8
   89dd4:	ac00      	add	r4, sp, #0
   89dd6:	6828      	ldr	r0, [r5, #0]
   89dd8:	6869      	ldr	r1, [r5, #4]
   89dda:	68aa      	ldr	r2, [r5, #8]
   89ddc:	68eb      	ldr	r3, [r5, #12]
   89dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   89de0:	f105 0510 	add.w	r5, r5, #16
   89de4:	4626      	mov	r6, r4
   89de6:	6828      	ldr	r0, [r5, #0]
   89de8:	6869      	ldr	r1, [r5, #4]
   89dea:	68aa      	ldr	r2, [r5, #8]
   89dec:	68eb      	ldr	r3, [r5, #12]
   89dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   89df0:	6928      	ldr	r0, [r5, #16]
   89df2:	6969      	ldr	r1, [r5, #20]
   89df4:	69aa      	ldr	r2, [r5, #24]
   89df6:	69eb      	ldr	r3, [r5, #28]
   89df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   89dfa:	6a28      	ldr	r0, [r5, #32]
   89dfc:	f846 0f20 	str.w	r0, [r6, #32]!
   89e00:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   89e04:	f105 0520 	add.w	r5, r5, #32
   89e08:	7131      	strb	r1, [r6, #4]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   89e0a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   89e0e:	f2c4 040a 	movt	r4, #16394	; 0x400a
   89e12:	69e2      	ldr	r2, [r4, #28]
   89e14:	f022 0301 	bic.w	r3, r2, #1
   89e18:	61e3      	str	r3, [r4, #28]
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
   89e1a:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   89e1e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   89e22:	6801      	ldr	r1, [r0, #0]
   89e24:	f421 52cb 	bic.w	r2, r1, #6496	; 0x1960
   89e28:	f022 031c 	bic.w	r3, r2, #28
   89e2c:	f443 5189 	orr.w	r1, r3, #4384	; 0x1120
   89e30:	f041 0210 	orr.w	r2, r1, #16
   89e34:	6002      	str	r2, [r0, #0]
			64, UOTGHS_DEVEPTCFG_EPBK_1_BANK);
	udd_allocate_memory(0);
   89e36:	6803      	ldr	r3, [r0, #0]
   89e38:	f043 0102 	orr.w	r1, r3, #2
   89e3c:	6001      	str	r1, [r0, #0]
	udd_enable_endpoint(0);
   89e3e:	69e0      	ldr	r0, [r4, #28]
   89e40:	f040 0201 	orr.w	r2, r0, #1
   89e44:	61e2      	str	r2, [r4, #28]

	udd_enable_hs_test_mode();
   89e46:	6823      	ldr	r3, [r4, #0]
   89e48:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
   89e4c:	f441 6000 	orr.w	r0, r1, #2048	; 0x800
   89e50:	6020      	str	r0, [r4, #0]
	udd_enable_hs_test_mode_packet();
   89e52:	6822      	ldr	r2, [r4, #0]
   89e54:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
   89e58:	6023      	str	r3, [r4, #0]

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
   89e5a:	f04f 0435 	mov.w	r4, #53	; 0x35
   89e5e:	f2c2 0418 	movt	r4, #8216	; 0x2018
   89e62:	f10d 31ff 	add.w	r1, sp, #4294967295
		*ptr_dest++ = *ptr_src++;
   89e66:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   89e6a:	f04f 0300 	mov.w	r3, #0
   89e6e:	f2c2 0318 	movt	r3, #8216	; 0x2018
   89e72:	f803 0b01 	strb.w	r0, [r3], #1
   89e76:	f101 0001 	add.w	r0, r1, #1
   89e7a:	7849      	ldrb	r1, [r1, #1]
   89e7c:	461a      	mov	r2, r3
   89e7e:	f802 1b01 	strb.w	r1, [r2], #1
   89e82:	f100 0101 	add.w	r1, r0, #1
   89e86:	7840      	ldrb	r0, [r0, #1]
   89e88:	7058      	strb	r0, [r3, #1]
   89e8a:	f102 0301 	add.w	r3, r2, #1

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
   89e8e:	42a3      	cmp	r3, r4
   89e90:	d1f1      	bne.n	89e76 <udd_test_mode_packet+0xae>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ack_fifocon(0);
   89e92:	f24c 2120 	movw	r1, #49696	; 0xc220
   89e96:	f2c4 010a 	movt	r1, #16394	; 0x400a
   89e9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   89e9e:	600a      	str	r2, [r1, #0]
}
   89ea0:	b00f      	add	sp, #60	; 0x3c
   89ea2:	bc70      	pop	{r4, r5, r6}
   89ea4:	4770      	bx	lr
   89ea6:	bf00      	nop

00089ea8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   89ea8:	e7fe      	b.n	89ea8 <Dummy_Handler>
   89eaa:	bf00      	nop

00089eac <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   89eac:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   89eae:	f240 0300 	movw	r3, #0
   89eb2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89eb6:	f24e 0224 	movw	r2, #57380	; 0xe024
   89eba:	f2c0 0208 	movt	r2, #8
   89ebe:	429a      	cmp	r2, r3
   89ec0:	d003      	beq.n	89eca <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   89ec2:	4840      	ldr	r0, [pc, #256]	; (89fc4 <Reset_Handler+0x118>)
   89ec4:	4940      	ldr	r1, [pc, #256]	; (89fc8 <Reset_Handler+0x11c>)
   89ec6:	4281      	cmp	r1, r0
   89ec8:	d304      	bcc.n	89ed4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   89eca:	4b40      	ldr	r3, [pc, #256]	; (89fcc <Reset_Handler+0x120>)
   89ecc:	4a40      	ldr	r2, [pc, #256]	; (89fd0 <Reset_Handler+0x124>)
   89ece:	429a      	cmp	r2, r3
   89ed0:	d325      	bcc.n	89f1e <Reset_Handler+0x72>
   89ed2:	e042      	b.n	89f5a <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   89ed4:	4d3f      	ldr	r5, [pc, #252]	; (89fd4 <Reset_Handler+0x128>)
   89ed6:	4c40      	ldr	r4, [pc, #256]	; (89fd8 <Reset_Handler+0x12c>)
   89ed8:	1b63      	subs	r3, r4, r5
   89eda:	f023 0503 	bic.w	r5, r3, #3
   89ede:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   89ee2:	f240 0200 	movw	r2, #0
   89ee6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89eea:	f24e 0124 	movw	r1, #57380	; 0xe024
   89eee:	f2c0 0108 	movt	r1, #8
   89ef2:	f105 0004 	add.w	r0, r5, #4
   89ef6:	f3c5 0480 	ubfx	r4, r5, #2, #1
   89efa:	585d      	ldr	r5, [r3, r1]
   89efc:	509d      	str	r5, [r3, r2]
   89efe:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   89f02:	4283      	cmp	r3, r0
   89f04:	d155      	bne.n	89fb2 <Reset_Handler+0x106>
   89f06:	e7e0      	b.n	89eca <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   89f08:	585d      	ldr	r5, [r3, r1]
   89f0a:	509d      	str	r5, [r3, r2]
   89f0c:	f103 0304 	add.w	r3, r3, #4
   89f10:	585c      	ldr	r4, [r3, r1]
   89f12:	509c      	str	r4, [r3, r2]
   89f14:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   89f18:	4283      	cmp	r3, r0
   89f1a:	d1f5      	bne.n	89f08 <Reset_Handler+0x5c>
   89f1c:	e7d5      	b.n	89eca <Reset_Handler+0x1e>
   89f1e:	4d2f      	ldr	r5, [pc, #188]	; (89fdc <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   89f20:	492f      	ldr	r1, [pc, #188]	; (89fe0 <Reset_Handler+0x134>)
   89f22:	1b48      	subs	r0, r1, r5
   89f24:	f020 0403 	bic.w	r4, r0, #3
   89f28:	f640 23f0 	movw	r3, #2800	; 0xaf0
   89f2c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89f30:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   89f32:	f04f 0100 	mov.w	r1, #0
   89f36:	1b50      	subs	r0, r2, r5
   89f38:	f1a0 0004 	sub.w	r0, r0, #4
   89f3c:	f3c0 0480 	ubfx	r4, r0, #2, #1
   89f40:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   89f44:	4295      	cmp	r5, r2
   89f46:	d12d      	bne.n	89fa4 <Reset_Handler+0xf8>
   89f48:	e007      	b.n	89f5a <Reset_Handler+0xae>
   89f4a:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   89f4e:	6069      	str	r1, [r5, #4]
   89f50:	f105 0508 	add.w	r5, r5, #8
   89f54:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   89f56:	4295      	cmp	r5, r2
   89f58:	d1f7      	bne.n	89f4a <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   89f5a:	f240 0500 	movw	r5, #0
   89f5e:	f2c0 0508 	movt	r5, #8
   89f62:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   89f66:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   89f6a:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   89f6e:	f2ce 0000 	movt	r0, #57344	; 0xe000
   89f72:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   89f74:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   89f78:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   89f7c:	d207      	bcs.n	89f8e <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   89f7e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   89f82:	f2ce 0300 	movt	r3, #57344	; 0xe000
   89f86:	689d      	ldr	r5, [r3, #8]
   89f88:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   89f8c:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   89f8e:	f64a 5165 	movw	r1, #44389	; 0xad65
   89f92:	f2c0 0108 	movt	r1, #8
   89f96:	4788      	blx	r1

	/* Branch to main function */
	main();
   89f98:	f24a 40f5 	movw	r0, #42229	; 0xa4f5
   89f9c:	f2c0 0008 	movt	r0, #8
   89fa0:	4780      	blx	r0
   89fa2:	e7fe      	b.n	89fa2 <Reset_Handler+0xf6>
   89fa4:	2c00      	cmp	r4, #0
   89fa6:	d0d0      	beq.n	89f4a <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   89fa8:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   89fac:	4295      	cmp	r5, r2
   89fae:	d1cc      	bne.n	89f4a <Reset_Handler+0x9e>
   89fb0:	e7d3      	b.n	89f5a <Reset_Handler+0xae>
   89fb2:	2c00      	cmp	r4, #0
   89fb4:	d0a8      	beq.n	89f08 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   89fb6:	585c      	ldr	r4, [r3, r1]
   89fb8:	509c      	str	r4, [r3, r2]
   89fba:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   89fbe:	4283      	cmp	r3, r0
   89fc0:	d1a2      	bne.n	89f08 <Reset_Handler+0x5c>
   89fc2:	e782      	b.n	89eca <Reset_Handler+0x1e>
   89fc4:	20070af0 	.word	0x20070af0
   89fc8:	20070000 	.word	0x20070000
   89fcc:	20071e3c 	.word	0x20071e3c
   89fd0:	20070af0 	.word	0x20070af0
   89fd4:	20070004 	.word	0x20070004
   89fd8:	20070af3 	.word	0x20070af3
   89fdc:	20070aec 	.word	0x20070aec
   89fe0:	20071e37 	.word	0x20071e37

00089fe4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   89fe4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   89fe8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89fec:	6b18      	ldr	r0, [r3, #48]	; 0x30
   89fee:	f000 0103 	and.w	r1, r0, #3
   89ff2:	2903      	cmp	r1, #3
   89ff4:	f200 80b1 	bhi.w	8a15a <SystemCoreClockUpdate+0x176>
   89ff8:	e8df f001 	tbb	[pc, r1]
   89ffc:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8a000:	f641 2010 	movw	r0, #6672	; 0x1a10
   8a004:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8a008:	6941      	ldr	r1, [r0, #20]
   8a00a:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8a00e:	f240 23a4 	movw	r3, #676	; 0x2a4
   8a012:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a016:	bf14      	ite	ne
   8a018:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8a01c:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8a020:	601a      	str	r2, [r3, #0]
   8a022:	e09a      	b.n	8a15a <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8a024:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8a028:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8a02c:	6a18      	ldr	r0, [r3, #32]
   8a02e:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   8a032:	d009      	beq.n	8a048 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8a034:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   8a038:	f2c0 03b7 	movt	r3, #183	; 0xb7
   8a03c:	f240 22a4 	movw	r2, #676	; 0x2a4
   8a040:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8a044:	6013      	str	r3, [r2, #0]
   8a046:	e088      	b.n	8a15a <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8a048:	f44f 6110 	mov.w	r1, #2304	; 0x900
   8a04c:	f2c0 013d 	movt	r1, #61	; 0x3d
   8a050:	f240 22a4 	movw	r2, #676	; 0x2a4
   8a054:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8a058:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8a05a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8a05e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8a062:	6a18      	ldr	r0, [r3, #32]
   8a064:	f000 0170 	and.w	r1, r0, #112	; 0x70
   8a068:	2910      	cmp	r1, #16
   8a06a:	d002      	beq.n	8a072 <SystemCoreClockUpdate+0x8e>
   8a06c:	2920      	cmp	r1, #32
   8a06e:	d174      	bne.n	8a15a <SystemCoreClockUpdate+0x176>
   8a070:	e009      	b.n	8a086 <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8a072:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   8a076:	f2c0 007a 	movt	r0, #122	; 0x7a
   8a07a:	f240 21a4 	movw	r1, #676	; 0x2a4
   8a07e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8a082:	6008      	str	r0, [r1, #0]
				break;
   8a084:	e069      	b.n	8a15a <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8a086:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   8a08a:	f2c0 03b7 	movt	r3, #183	; 0xb7
   8a08e:	f240 22a4 	movw	r2, #676	; 0x2a4
   8a092:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8a096:	6013      	str	r3, [r2, #0]
				break;
   8a098:	e05f      	b.n	8a15a <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8a09a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8a09e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8a0a2:	6a13      	ldr	r3, [r2, #32]
   8a0a4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8a0a8:	d009      	beq.n	8a0be <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8a0aa:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   8a0ae:	f2c0 01b7 	movt	r1, #183	; 0xb7
   8a0b2:	f240 22a4 	movw	r2, #676	; 0x2a4
   8a0b6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8a0ba:	6011      	str	r1, [r2, #0]
   8a0bc:	e027      	b.n	8a10e <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8a0be:	f44f 6010 	mov.w	r0, #2304	; 0x900
   8a0c2:	f2c0 003d 	movt	r0, #61	; 0x3d
   8a0c6:	f240 21a4 	movw	r1, #676	; 0x2a4
   8a0ca:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8a0ce:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8a0d0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8a0d4:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8a0d8:	6a13      	ldr	r3, [r2, #32]
   8a0da:	f003 0070 	and.w	r0, r3, #112	; 0x70
   8a0de:	2810      	cmp	r0, #16
   8a0e0:	d002      	beq.n	8a0e8 <SystemCoreClockUpdate+0x104>
   8a0e2:	2820      	cmp	r0, #32
   8a0e4:	d113      	bne.n	8a10e <SystemCoreClockUpdate+0x12a>
   8a0e6:	e009      	b.n	8a0fc <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8a0e8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   8a0ec:	f2c0 037a 	movt	r3, #122	; 0x7a
   8a0f0:	f240 20a4 	movw	r0, #676	; 0x2a4
   8a0f4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a0f8:	6003      	str	r3, [r0, #0]
				break;
   8a0fa:	e008      	b.n	8a10e <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8a0fc:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   8a100:	f2c0 01b7 	movt	r1, #183	; 0xb7
   8a104:	f240 22a4 	movw	r2, #676	; 0x2a4
   8a108:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8a10c:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8a10e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8a112:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8a116:	6b18      	ldr	r0, [r3, #48]	; 0x30
   8a118:	f000 0103 	and.w	r1, r0, #3
   8a11c:	2902      	cmp	r1, #2
   8a11e:	d113      	bne.n	8a148 <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8a120:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   8a124:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8a128:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8a12a:	6a89      	ldr	r1, [r1, #40]	; 0x28
   8a12c:	f240 23a4 	movw	r3, #676	; 0x2a4
   8a130:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8a134:	f3c0 400a 	ubfx	r0, r0, #16, #11
   8a138:	681a      	ldr	r2, [r3, #0]
   8a13a:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8a13e:	b2c9      	uxtb	r1, r1
   8a140:	fbb0 f2f1 	udiv	r2, r0, r1
   8a144:	601a      	str	r2, [r3, #0]
   8a146:	e008      	b.n	8a15a <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8a148:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   8a14c:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   8a150:	f240 22a4 	movw	r2, #676	; 0x2a4
   8a154:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8a158:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8a15a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8a15e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8a162:	6b10      	ldr	r0, [r2, #48]	; 0x30
   8a164:	f000 0170 	and.w	r1, r0, #112	; 0x70
   8a168:	2970      	cmp	r1, #112	; 0x70
   8a16a:	d10e      	bne.n	8a18a <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   8a16c:	f240 23a4 	movw	r3, #676	; 0x2a4
   8a170:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a174:	6818      	ldr	r0, [r3, #0]
   8a176:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   8a17a:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   8a17e:	fba2 0100 	umull	r0, r1, r2, r0
   8a182:	ea4f 0051 	mov.w	r0, r1, lsr #1
   8a186:	6018      	str	r0, [r3, #0]
   8a188:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8a18a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8a18e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8a192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8a194:	f240 20a4 	movw	r0, #676	; 0x2a4
   8a198:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a19c:	f3c2 1102 	ubfx	r1, r2, #4, #3
   8a1a0:	6803      	ldr	r3, [r0, #0]
   8a1a2:	fa23 f301 	lsr.w	r3, r3, r1
   8a1a6:	6003      	str	r3, [r0, #0]
   8a1a8:	4770      	bx	lr
   8a1aa:	bf00      	nop

0008a1ac <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   8a1ac:	f64e 23bf 	movw	r3, #60095	; 0xeabf
   8a1b0:	f2c0 1321 	movt	r3, #289	; 0x121
   8a1b4:	4298      	cmp	r0, r3
   8a1b6:	d80c      	bhi.n	8a1d2 <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   8a1b8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   8a1bc:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8a1c0:	f04f 0000 	mov.w	r0, #0
   8a1c4:	6018      	str	r0, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   8a1c6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   8a1ca:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8a1ce:	6008      	str	r0, [r1, #0]
   8a1d0:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   8a1d2:	f24f 017f 	movw	r1, #61567	; 0xf07f
   8a1d6:	f2c0 21fa 	movt	r1, #762	; 0x2fa
   8a1da:	4288      	cmp	r0, r1
   8a1dc:	d80c      	bhi.n	8a1f8 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   8a1de:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   8a1e2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8a1e6:	f44f 7180 	mov.w	r1, #256	; 0x100
   8a1ea:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   8a1ec:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   8a1f0:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8a1f4:	6011      	str	r1, [r2, #0]
   8a1f6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   8a1f8:	f648 73ff 	movw	r3, #36863	; 0x8fff
   8a1fc:	f2c0 33d0 	movt	r3, #976	; 0x3d0
   8a200:	4298      	cmp	r0, r3
   8a202:	d80c      	bhi.n	8a21e <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   8a204:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   8a208:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8a20c:	f44f 7200 	mov.w	r2, #512	; 0x200
   8a210:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   8a212:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   8a216:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8a21a:	601a      	str	r2, [r3, #0]
   8a21c:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   8a21e:	f24b 31ff 	movw	r1, #46079	; 0xb3ff
   8a222:	f2c0 41c4 	movt	r1, #1220	; 0x4c4
   8a226:	4288      	cmp	r0, r1
   8a228:	d80c      	bhi.n	8a244 <system_init_flash+0x98>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   8a22a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   8a22e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8a232:	f44f 7240 	mov.w	r2, #768	; 0x300
   8a236:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   8a238:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   8a23c:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8a240:	6002      	str	r2, [r0, #0]
   8a242:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   8a244:	f644 237f 	movw	r3, #19071	; 0x4a7f
   8a248:	f2c0 535d 	movt	r3, #1373	; 0x55d
   8a24c:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   8a24e:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   8a252:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8a256:	bf94      	ite	ls
   8a258:	f44f 6280 	movls.w	r2, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   8a25c:	f44f 62a0 	movhi.w	r2, #1280	; 0x500
   8a260:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   8a262:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   8a266:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8a26a:	600a      	str	r2, [r1, #0]
   8a26c:	4770      	bx	lr
   8a26e:	bf00      	nop

0008a270 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   8a270:	f241 6334 	movw	r3, #5684	; 0x1634
   8a274:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a278:	6819      	ldr	r1, [r3, #0]
   8a27a:	b941      	cbnz	r1, 8a28e <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
   8a27c:	f241 6334 	movw	r3, #5684	; 0x1634
   8a280:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a284:	f643 6240 	movw	r2, #15936	; 0x3e40
   8a288:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8a28c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8a28e:	f241 6134 	movw	r1, #5684	; 0x1634
   8a292:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8a296:	680b      	ldr	r3, [r1, #0]

	heap += incr;
   8a298:	1818      	adds	r0, r3, r0
   8a29a:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
   8a29c:	4618      	mov	r0, r3
   8a29e:	4770      	bx	lr

0008a2a0 <main_msc_enable>:
uint16_t last_ok_12v_state = FALSE;


bool main_msc_enable(void)
{
	main_b_msc_enable = true;
   8a2a0:	f04f 0001 	mov.w	r0, #1
   8a2a4:	f241 634e 	movw	r3, #5710	; 0x164e
   8a2a8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a2ac:	7018      	strb	r0, [r3, #0]
	return true;
}
   8a2ae:	4770      	bx	lr

0008a2b0 <main_msc_disable>:
void main_msc_disable(void)
{
	main_b_msc_enable = false;
   8a2b0:	f241 634e 	movw	r3, #5710	; 0x164e
   8a2b4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a2b8:	f04f 0200 	mov.w	r2, #0
   8a2bc:	701a      	strb	r2, [r3, #0]
   8a2be:	4770      	bx	lr

0008a2c0 <main_cdc_enable>:
}
bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
   8a2c0:	f04f 0001 	mov.w	r0, #1
   8a2c4:	f241 6364 	movw	r3, #5732	; 0x1664
   8a2c8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a2cc:	7018      	strb	r0, [r3, #0]
	return true;
}
   8a2ce:	4770      	bx	lr

0008a2d0 <main_cdc_disable>:
void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
   8a2d0:	f241 6364 	movw	r3, #5732	; 0x1664
   8a2d4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a2d8:	f04f 0200 	mov.w	r2, #0
   8a2dc:	701a      	strb	r2, [r3, #0]
   8a2de:	4770      	bx	lr

0008a2e0 <set_second_flag>:
}

/* Second interrupt */
void set_second_flag(void)
{
	second_flag = TRUE;
   8a2e0:	f241 6366 	movw	r3, #5734	; 0x1666
   8a2e4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a2e8:	f04f 0201 	mov.w	r2, #1
   8a2ec:	801a      	strh	r2, [r3, #0]
   8a2ee:	4770      	bx	lr

0008a2f0 <set_integrator_timer_flag>:
}

/* Flag indicating an integration timer tick */
void set_integrator_timer_flag(void)
{
	integrator_flag = TRUE;
   8a2f0:	f241 6362 	movw	r3, #5730	; 0x1662
   8a2f4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a2f8:	f04f 0201 	mov.w	r2, #1
   8a2fc:	801a      	strh	r2, [r3, #0]
   8a2fe:	4770      	bx	lr

0008a300 <activate_measurement_push>:
}

/* Activate measurements push to console */
void activate_measurement_push(void)
{
	meas_push_activated = TRUE;
   8a300:	f241 6348 	movw	r3, #5704	; 0x1648
   8a304:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a308:	f04f 0201 	mov.w	r2, #1
   8a30c:	801a      	strh	r2, [r3, #0]
   8a30e:	4770      	bx	lr

0008a310 <deactivate_measurement_push>:
}

/* Disable measurements push to console */
void deactivate_measurement_push(void)
{
	meas_push_activated = FALSE;
   8a310:	f241 6348 	movw	r3, #5704	; 0x1648
   8a314:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a318:	f04f 0200 	mov.w	r2, #0
   8a31c:	801a      	strh	r2, [r3, #0]
   8a31e:	4770      	bx	lr

0008a320 <set_countera_integration_time>:
}

/* Set Counter A integration time */
void set_countera_integration_time(uint16_t integration_time)
{
	ch0_integration_time_goal = integration_time;
   8a320:	f240 23a8 	movw	r3, #680	; 0x2a8
   8a324:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a328:	8018      	strh	r0, [r3, #0]
	ch0_integration_time_counter = 0;
   8a32a:	f241 6050 	movw	r0, #5712	; 0x1650
   8a32e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a332:	f04f 0200 	mov.w	r2, #0
   8a336:	8002      	strh	r2, [r0, #0]
   8a338:	4770      	bx	lr
   8a33a:	bf00      	nop

0008a33c <set_counterb_integration_time>:
}

/* Set Counter B integration time */
void set_counterb_integration_time(uint16_t integration_time)
{
	ch1_integration_time_goal = integration_time;
   8a33c:	f240 23aa 	movw	r3, #682	; 0x2aa
   8a340:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a344:	8018      	strh	r0, [r3, #0]
	ch1_integration_time_counter = 0;
   8a346:	f241 6052 	movw	r0, #5714	; 0x1652
   8a34a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a34e:	f04f 0200 	mov.w	r2, #0
   8a352:	8002      	strh	r2, [r0, #0]
   8a354:	4770      	bx	lr
   8a356:	bf00      	nop

0008a358 <get_countera_integration_time>:

/* Get Counter A integration time */
uint16_t get_countera_integration_time(void)
{
	return ch0_integration_time_goal;
}
   8a358:	f240 23a8 	movw	r3, #680	; 0x2a8
   8a35c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a360:	8818      	ldrh	r0, [r3, #0]
   8a362:	4770      	bx	lr

0008a364 <get_counterb_integration_time>:

/* Get Counter B integration time */
uint16_t get_counterb_integration_time(void)
{
	return ch1_integration_time_goal;
}
   8a364:	f240 23aa 	movw	r3, #682	; 0x2aa
   8a368:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a36c:	8818      	ldrh	r0, [r3, #0]
   8a36e:	4770      	bx	lr

0008a370 <set_counters_integration_time>:

/* Set counters integration time */
void set_counters_integration_time(uint16_t integration_time)
{
   8a370:	b510      	push	{r4, lr}
   8a372:	4604      	mov	r4, r0
	set_countera_integration_time(integration_time);
   8a374:	f24a 3321 	movw	r3, #41761	; 0xa321
   8a378:	f2c0 0308 	movt	r3, #8
   8a37c:	4798      	blx	r3
	set_counterb_integration_time(integration_time);
   8a37e:	4620      	mov	r0, r4
   8a380:	f24a 313d 	movw	r1, #41789	; 0xa33d
   8a384:	f2c0 0108 	movt	r1, #8
   8a388:	4788      	blx	r1
   8a38a:	bd10      	pop	{r4, pc}

0008a38c <shift_counter_buffer_contents>:
}

/* Routine to shift buffer contents to the left */
void shift_counter_buffer_contents(uint64_t* buffer)
{
   8a38c:	b410      	push	{r4}
	uint16_t i;
	
	// shift contents to the left!
	for(i = 0; i < (VALUES_BUF_LENGTH - 1); i++)
   8a38e:	f04f 0400 	mov.w	r4, #0
   8a392:	4601      	mov	r1, r0
	{
		buffer[i] = buffer[i+1];
   8a394:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8a398:	e8e1 2302 	strd	r2, r3, [r1], #8
void shift_counter_buffer_contents(uint64_t* buffer)
{
	uint16_t i;
	
	// shift contents to the left!
	for(i = 0; i < (VALUES_BUF_LENGTH - 1); i++)
   8a39c:	f104 0401 	add.w	r4, r4, #1
   8a3a0:	b2a4      	uxth	r4, r4
	{
		buffer[i] = buffer[i+1];
   8a3a2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   8a3a6:	e9c1 2300 	strd	r2, r3, [r1]
void shift_counter_buffer_contents(uint64_t* buffer)
{
	uint16_t i;
	
	// shift contents to the left!
	for(i = 0; i < (VALUES_BUF_LENGTH - 1); i++)
   8a3aa:	f104 0401 	add.w	r4, r4, #1
   8a3ae:	b2a4      	uxth	r4, r4
   8a3b0:	f101 0010 	add.w	r0, r1, #16
	{
		buffer[i] = buffer[i+1];
   8a3b4:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   8a3b8:	e940 2302 	strd	r2, r3, [r0, #-8]
void shift_counter_buffer_contents(uint64_t* buffer)
{
	uint16_t i;
	
	// shift contents to the left!
	for(i = 0; i < (VALUES_BUF_LENGTH - 1); i++)
   8a3bc:	f104 0401 	add.w	r4, r4, #1
   8a3c0:	b2a4      	uxth	r4, r4
   8a3c2:	2c15      	cmp	r4, #21
   8a3c4:	d1e5      	bne.n	8a392 <shift_counter_buffer_contents+0x6>
	{
		buffer[i] = buffer[i+1];
	}
}
   8a3c6:	bc10      	pop	{r4}
   8a3c8:	4770      	bx	lr
   8a3ca:	bf00      	nop

0008a3cc <read_last_contera_val>:

/* buffer pop() */
RET_TYPE read_last_contera_val(uint64_t* return_data)
{
   8a3cc:	b508      	push	{r3, lr}
	if(ch0_values_buffer_next_pointer > 0)
   8a3ce:	f241 6360 	movw	r3, #5728	; 0x1660
   8a3d2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a3d6:	8819      	ldrh	r1, [r3, #0]
   8a3d8:	b1b9      	cbz	r1, 8a40a <read_last_contera_val+0x3e>
	{
		ch0_values_buffer_next_pointer--;
   8a3da:	f101 33ff 	add.w	r3, r1, #4294967295
   8a3de:	f241 6260 	movw	r2, #5728	; 0x1660
   8a3e2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8a3e6:	8013      	strh	r3, [r2, #0]
		*return_data = ch0_counters_values_buffer[0];
   8a3e8:	f641 5188 	movw	r1, #7560	; 0x1d88
   8a3ec:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8a3f0:	e9d1 2300 	ldrd	r2, r3, [r1]
   8a3f4:	e9c0 2300 	strd	r2, r3, [r0]
		shift_counter_buffer_contents(ch0_counters_values_buffer);
   8a3f8:	4608      	mov	r0, r1
   8a3fa:	f24a 338d 	movw	r3, #41869	; 0xa38d
   8a3fe:	f2c0 0308 	movt	r3, #8
   8a402:	4798      	blx	r3
		return RETURN_OK;
   8a404:	f04f 0001 	mov.w	r0, #1
   8a408:	bd08      	pop	{r3, pc}
	}
	else
	{
		return RETURN_NOK;
   8a40a:	f04f 0000 	mov.w	r0, #0
	}
}
   8a40e:	bd08      	pop	{r3, pc}

0008a410 <read_last_conterb_val>:

/* buffer pop() */
RET_TYPE read_last_conterb_val(uint64_t* return_data)
{
   8a410:	b508      	push	{r3, lr}
	if(ch1_values_buffer_next_pointer > 0)
   8a412:	f241 634a 	movw	r3, #5706	; 0x164a
   8a416:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a41a:	8819      	ldrh	r1, [r3, #0]
   8a41c:	b1b9      	cbz	r1, 8a44e <read_last_conterb_val+0x3e>
	{
		ch1_values_buffer_next_pointer--;
   8a41e:	f101 33ff 	add.w	r3, r1, #4294967295
   8a422:	f241 624a 	movw	r2, #5706	; 0x164a
   8a426:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8a42a:	8013      	strh	r3, [r2, #0]
		*return_data = ch1_counters_values_buffer[0];
   8a42c:	f641 41d8 	movw	r1, #7384	; 0x1cd8
   8a430:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8a434:	e9d1 2300 	ldrd	r2, r3, [r1]
   8a438:	e9c0 2300 	strd	r2, r3, [r0]
		shift_counter_buffer_contents(ch1_counters_values_buffer);
   8a43c:	4608      	mov	r0, r1
   8a43e:	f24a 338d 	movw	r3, #41869	; 0xa38d
   8a442:	f2c0 0308 	movt	r3, #8
   8a446:	4798      	blx	r3
		return RETURN_OK;
   8a448:	f04f 0001 	mov.w	r0, #1
   8a44c:	bd08      	pop	{r3, pc}
	}
	else
	{
		return RETURN_NOK;
   8a44e:	f04f 0000 	mov.w	r0, #0
	}
}
   8a452:	bd08      	pop	{r3, pc}

0008a454 <add_new_countera_measurement_to_queue>:

/* buffer push() */
void add_new_countera_measurement_to_queue(uint64_t measurement)
{
   8a454:	b570      	push	{r4, r5, r6, lr}
   8a456:	4604      	mov	r4, r0
   8a458:	460d      	mov	r5, r1
	// If the buffer is full, remove oldest element
	if(ch0_values_buffer_next_pointer == VALUES_BUF_LENGTH)
   8a45a:	f241 6360 	movw	r3, #5728	; 0x1660
   8a45e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a462:	8818      	ldrh	r0, [r3, #0]
   8a464:	2816      	cmp	r0, #22
   8a466:	d10c      	bne.n	8a482 <add_new_countera_measurement_to_queue+0x2e>
	{
		shift_counter_buffer_contents(ch0_counters_values_buffer);
   8a468:	f641 5688 	movw	r6, #7560	; 0x1d88
   8a46c:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8a470:	4630      	mov	r0, r6
   8a472:	f24a 328d 	movw	r2, #41869	; 0xa38d
   8a476:	f2c0 0208 	movt	r2, #8
   8a47a:	4790      	blx	r2
		ch0_counters_values_buffer[VALUES_BUF_LENGTH-1] = measurement;
   8a47c:	e9c6 452a 	strd	r4, r5, [r6, #168]	; 0xa8
   8a480:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		ch0_counters_values_buffer[ch0_values_buffer_next_pointer++] = measurement;
   8a482:	f641 5288 	movw	r2, #7560	; 0x1d88
   8a486:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8a48a:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
   8a48e:	e9c1 4500 	strd	r4, r5, [r1]
   8a492:	f100 0001 	add.w	r0, r0, #1
   8a496:	f241 6360 	movw	r3, #5728	; 0x1660
   8a49a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a49e:	8018      	strh	r0, [r3, #0]
   8a4a0:	bd70      	pop	{r4, r5, r6, pc}
   8a4a2:	bf00      	nop

0008a4a4 <add_new_counterb_measurement_to_queue>:
	}	
}

/* buffer push() */
void add_new_counterb_measurement_to_queue(uint64_t measurement)
{
   8a4a4:	b570      	push	{r4, r5, r6, lr}
   8a4a6:	4604      	mov	r4, r0
   8a4a8:	460d      	mov	r5, r1
	// If the buffer is full, remove oldest element
	if(ch1_values_buffer_next_pointer == VALUES_BUF_LENGTH)
   8a4aa:	f241 634a 	movw	r3, #5706	; 0x164a
   8a4ae:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a4b2:	8818      	ldrh	r0, [r3, #0]
   8a4b4:	2816      	cmp	r0, #22
   8a4b6:	d10c      	bne.n	8a4d2 <add_new_counterb_measurement_to_queue+0x2e>
	{
		shift_counter_buffer_contents(ch1_counters_values_buffer);
   8a4b8:	f641 46d8 	movw	r6, #7384	; 0x1cd8
   8a4bc:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8a4c0:	4630      	mov	r0, r6
   8a4c2:	f24a 328d 	movw	r2, #41869	; 0xa38d
   8a4c6:	f2c0 0208 	movt	r2, #8
   8a4ca:	4790      	blx	r2
		ch1_counters_values_buffer[VALUES_BUF_LENGTH-1] = measurement;
   8a4cc:	e9c6 452a 	strd	r4, r5, [r6, #168]	; 0xa8
   8a4d0:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		ch1_counters_values_buffer[ch1_values_buffer_next_pointer++] = measurement;
   8a4d2:	f641 42d8 	movw	r2, #7384	; 0x1cd8
   8a4d6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8a4da:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
   8a4de:	e9c1 4500 	strd	r4, r5, [r1]
   8a4e2:	f100 0001 	add.w	r0, r0, #1
   8a4e6:	f241 634a 	movw	r3, #5706	; 0x164a
   8a4ea:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a4ee:	8018      	strh	r0, [r3, #0]
   8a4f0:	bd70      	pop	{r4, r5, r6, pc}
   8a4f2:	bf00      	nop

0008a4f4 <main>:
}

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   8a4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a4f8:	b082      	sub	sp, #8
	irq_initialize_vectors();
	cpu_irq_enable();
   8a4fa:	f04f 0501 	mov.w	r5, #1
   8a4fe:	f240 23a0 	movw	r3, #672	; 0x2a0
   8a502:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a506:	701d      	strb	r5, [r3, #0]
   8a508:	f3bf 8f5f 	dmb	sy
   8a50c:	b662      	cpsie	i
	wdt_disable(WDT);
   8a50e:	f641 2050 	movw	r0, #6736	; 0x1a50
   8a512:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8a516:	f641 1181 	movw	r1, #6529	; 0x1981
   8a51a:	f2c0 0108 	movt	r1, #8
   8a51e:	4788      	blx	r1
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
   8a520:	f641 40b4 	movw	r0, #7348	; 0x1cb4
   8a524:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a528:	f04f 0400 	mov.w	r4, #0
   8a52c:	7004      	strb	r4, [r0, #0]
   8a52e:	7044      	strb	r4, [r0, #1]
   8a530:	7084      	strb	r4, [r0, #2]
   8a532:	70c4      	strb	r4, [r0, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   8a534:	7105      	strb	r5, [r0, #4]

	// Initialize the sleep manager
	sleepmgr_init();

	// Board initialization
	sysclk_init();
   8a536:	f245 725d 	movw	r2, #22365	; 0x575d
   8a53a:	f2c0 0208 	movt	r2, #8
   8a53e:	4790      	blx	r2
	init_board();
   8a540:	f641 1689 	movw	r6, #6537	; 0x1989
   8a544:	f2c0 0608 	movt	r6, #8
   8a548:	47b0      	blx	r6
	init_pwm();
   8a54a:	f642 07b5 	movw	r7, #10421	; 0x28b5
   8a54e:	f2c0 0708 	movt	r7, #8
   8a552:	47b8      	blx	r7
	init_i2c();
   8a554:	f642 0565 	movw	r5, #10341	; 0x2865
   8a558:	f2c0 0508 	movt	r5, #8
   8a55c:	47a8      	blx	r5

	// Module initialization	
	init_module_peripherals_bp();
   8a55e:	f242 43cd 	movw	r3, #9421	; 0x24cd
   8a562:	f2c0 0308 	movt	r3, #8
   8a566:	4798      	blx	r3

	/* Initialize SD MMC stack */
	delay_ms(200);
   8a568:	f44f 409f 	mov.w	r0, #20352	; 0x4f80
   8a56c:	f2c0 0012 	movt	r0, #18
   8a570:	f240 0101 	movw	r1, #1
   8a574:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8a578:	4788      	blx	r1
	sd_mmc_init();
   8a57a:	f240 4069 	movw	r0, #1129	; 0x469
   8a57e:	f2c0 0008 	movt	r0, #8
   8a582:	4780      	blx	r0

	// Start USB stack to authorize VBus monitoring
	udc_start();
   8a584:	f247 1249 	movw	r2, #29001	; 0x7149
   8a588:	f2c0 0208 	movt	r2, #8
   8a58c:	4790      	blx	r2
	
	// Init SCPI parser
    console_init();	
   8a58e:	f245 4675 	movw	r6, #21621	; 0x5475
   8a592:	f2c0 0608 	movt	r6, #8
   8a596:	47b0      	blx	r6
	
	// Enable 12v
	enable_12v();
   8a598:	f642 2735 	movw	r7, #10805	; 0x2a35
   8a59c:	f2c0 0708 	movt	r7, #8
   8a5a0:	47b8      	blx	r7
	
	#ifdef TEST_FW
		set_user_led_colour(100, 100, 100);
	#else
		set_user_led_colour(0, 100, 0);
   8a5a2:	4620      	mov	r0, r4
   8a5a4:	f04f 0164 	mov.w	r1, #100	; 0x64
   8a5a8:	4622      	mov	r2, r4
   8a5aa:	f642 14cd 	movw	r4, #10701	; 0x29cd
   8a5ae:	f2c0 0408 	movt	r4, #8
   8a5b2:	47a0      	blx	r4
	#endif
	
	while (true) 
	{
		console_process();		
   8a5b4:	f245 468d 	movw	r6, #21645	; 0x548d
   8a5b8:	f2c0 0608 	movt	r6, #8
		
		if((get_ok_12v_status() == RETURN_OK) && (last_ok_12v_state == FALSE))
   8a5bc:	f642 2425 	movw	r4, #10789	; 0x2a25
   8a5c0:	f2c0 0408 	movt	r4, #8
   8a5c4:	f241 6538 	movw	r5, #5688	; 0x1638
   8a5c8:	f2c2 0507 	movt	r5, #8199	; 0x2007
		{
			#ifdef TEST_FW
				set_user_led_colour(300, 300, 300);
			#else
				set_user_led_colour(0, 100, 0);
   8a5cc:	f642 18cd 	movw	r8, #10701	; 0x29cd
   8a5d0:	f2c0 0808 	movt	r8, #8
		set_user_led_colour(0, 100, 0);
	#endif
	
	while (true) 
	{
		console_process();		
   8a5d4:	47b0      	blx	r6
		
		if((get_ok_12v_status() == RETURN_OK) && (last_ok_12v_state == FALSE))
   8a5d6:	47a0      	blx	r4
   8a5d8:	2801      	cmp	r0, #1
   8a5da:	d10b      	bne.n	8a5f4 <main+0x100>
   8a5dc:	882b      	ldrh	r3, [r5, #0]
   8a5de:	b94b      	cbnz	r3, 8a5f4 <main+0x100>
		{
			#ifdef TEST_FW
				set_user_led_colour(300, 300, 300);
			#else
				set_user_led_colour(0, 100, 0);
   8a5e0:	f04f 0000 	mov.w	r0, #0
   8a5e4:	f04f 0164 	mov.w	r1, #100	; 0x64
   8a5e8:	4602      	mov	r2, r0
   8a5ea:	47c0      	blx	r8
			#endif
			last_ok_12v_state = TRUE;
   8a5ec:	f04f 0201 	mov.w	r2, #1
   8a5f0:	802a      	strh	r2, [r5, #0]
   8a5f2:	e00b      	b.n	8a60c <main+0x118>
		}
		else if((get_ok_12v_status() == RETURN_NOK) && (last_ok_12v_state == TRUE))
   8a5f4:	47a0      	blx	r4
   8a5f6:	b948      	cbnz	r0, 8a60c <main+0x118>
   8a5f8:	8829      	ldrh	r1, [r5, #0]
   8a5fa:	2901      	cmp	r1, #1
   8a5fc:	d106      	bne.n	8a60c <main+0x118>
		{
			set_user_led_colour(0, 100, 0);
   8a5fe:	f04f 0164 	mov.w	r1, #100	; 0x64
   8a602:	4602      	mov	r2, r0
   8a604:	47c0      	blx	r8
			last_ok_12v_state = FALSE;
   8a606:	f04f 0000 	mov.w	r0, #0
   8a60a:	8028      	strh	r0, [r5, #0]
		}

		if(integrator_flag == TRUE)
   8a60c:	f241 6762 	movw	r7, #5730	; 0x1662
   8a610:	f2c2 0707 	movt	r7, #8199	; 0x2007
   8a614:	883b      	ldrh	r3, [r7, #0]
   8a616:	b299      	uxth	r1, r3
   8a618:	2901      	cmp	r1, #1
   8a61a:	f040 8100 	bne.w	8a81e <main+0x32a>
		{
			integrator_flag = FALSE;
   8a61e:	f241 6062 	movw	r0, #5730	; 0x1662
   8a622:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a626:	f04f 0200 	mov.w	r2, #0
   8a62a:	8002      	strh	r2, [r0, #0]
			
			ch0_integration_time_counter++;
   8a62c:	f241 6750 	movw	r7, #5712	; 0x1650
   8a630:	f2c2 0707 	movt	r7, #8199	; 0x2007
   8a634:	883b      	ldrh	r3, [r7, #0]
   8a636:	f103 0301 	add.w	r3, r3, #1
   8a63a:	803b      	strh	r3, [r7, #0]
			ch1_integration_time_counter++;
   8a63c:	f241 6152 	movw	r1, #5714	; 0x1652
   8a640:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8a644:	8808      	ldrh	r0, [r1, #0]
   8a646:	f100 0001 	add.w	r0, r0, #1
   8a64a:	8008      	strh	r0, [r1, #0]
			ch0_counter_integrated += get_counter0_value();
   8a64c:	f242 1239 	movw	r2, #8505	; 0x2139
   8a650:	f2c0 0208 	movt	r2, #8
   8a654:	4790      	blx	r2
   8a656:	f241 6e58 	movw	lr, #5720	; 0x1658
   8a65a:	f2c2 0e07 	movt	lr, #8199	; 0x2007
   8a65e:	e9de 2300 	ldrd	r2, r3, [lr]
   8a662:	1880      	adds	r0, r0, r2
   8a664:	eb41 0103 	adc.w	r1, r1, r3
   8a668:	e9ce 0100 	strd	r0, r1, [lr]
			ch1_counter_integrated += get_counter1_value();
   8a66c:	f242 134d 	movw	r3, #8525	; 0x214d
   8a670:	f2c0 0308 	movt	r3, #8
   8a674:	4798      	blx	r3
   8a676:	f241 6c40 	movw	ip, #5696	; 0x1640
   8a67a:	f2c2 0c07 	movt	ip, #8199	; 0x2007
   8a67e:	e9dc 2300 	ldrd	r2, r3, [ip]
   8a682:	1880      	adds	r0, r0, r2
   8a684:	eb41 0103 	adc.w	r1, r1, r3
   8a688:	e9cc 0100 	strd	r0, r1, [ip]
			
			if(ch0_integration_time_counter == ch0_integration_time_goal)
   8a68c:	8839      	ldrh	r1, [r7, #0]
   8a68e:	f240 20a8 	movw	r0, #680	; 0x2a8
   8a692:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a696:	8802      	ldrh	r2, [r0, #0]
   8a698:	4291      	cmp	r1, r2
   8a69a:	d158      	bne.n	8a74e <main+0x25a>
			{
				ch0_integration_time_counter = 0;
   8a69c:	f04f 0300 	mov.w	r3, #0
   8a6a0:	803b      	strh	r3, [r7, #0]
				if(meas_push_activated)
   8a6a2:	f241 6148 	movw	r1, #5704	; 0x1648
   8a6a6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8a6aa:	8808      	ldrh	r0, [r1, #0]
   8a6ac:	b1e8      	cbz	r0, 8a6ea <main+0x1f6>
				{
					printf("Counter0 value: %llu\x0D", ch0_counter_integrated);
   8a6ae:	f641 3788 	movw	r7, #7048	; 0x1b88
   8a6b2:	f2c2 0707 	movt	r7, #8199	; 0x2007
   8a6b6:	f241 6258 	movw	r2, #5720	; 0x1658
   8a6ba:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8a6be:	e9d2 0100 	ldrd	r0, r1, [r2]
   8a6c2:	e9cd 0100 	strd	r0, r1, [sp]
   8a6c6:	4638      	mov	r0, r7
   8a6c8:	f04f 0164 	mov.w	r1, #100	; 0x64
   8a6cc:	f64d 625c 	movw	r2, #56924	; 0xde5c
   8a6d0:	f2c0 0208 	movt	r2, #8
   8a6d4:	f64a 6357 	movw	r3, #44631	; 0xae57
   8a6d8:	f2c0 0308 	movt	r3, #8
   8a6dc:	4798      	blx	r3
   8a6de:	4638      	mov	r0, r7
   8a6e0:	f245 215d 	movw	r1, #21085	; 0x525d
   8a6e4:	f2c0 0108 	movt	r1, #8
   8a6e8:	4788      	blx	r1
				}
				if(get_countera_en_status() == TRUE)
   8a6ea:	f242 3759 	movw	r7, #9049	; 0x2359
   8a6ee:	f2c0 0708 	movt	r7, #8
   8a6f2:	47b8      	blx	r7
   8a6f4:	2801      	cmp	r0, #1
   8a6f6:	d119      	bne.n	8a72c <main+0x238>
				{
					if(last_countera_en == FALSE)
   8a6f8:	f241 6354 	movw	r3, #5716	; 0x1654
   8a6fc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a700:	8819      	ldrh	r1, [r3, #0]
   8a702:	b939      	cbnz	r1, 8a714 <main+0x220>
						last_countera_en = TRUE;
   8a704:	f241 6054 	movw	r0, #5716	; 0x1654
   8a708:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a70c:	f04f 0301 	mov.w	r3, #1
   8a710:	8003      	strh	r3, [r0, #0]
   8a712:	e012      	b.n	8a73a <main+0x246>
					else
						add_new_countera_measurement_to_queue(ch0_counter_integrated);
   8a714:	f241 6758 	movw	r7, #5720	; 0x1658
   8a718:	f2c2 0707 	movt	r7, #8199	; 0x2007
   8a71c:	e9d7 0100 	ldrd	r0, r1, [r7]
   8a720:	f24a 4255 	movw	r2, #42069	; 0xa455
   8a724:	f2c0 0208 	movt	r2, #8
   8a728:	4790      	blx	r2
   8a72a:	e006      	b.n	8a73a <main+0x246>
				}
				else
					last_countera_en = FALSE;
   8a72c:	f241 6054 	movw	r0, #5716	; 0x1654
   8a730:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a734:	f04f 0200 	mov.w	r2, #0
   8a738:	8002      	strh	r2, [r0, #0]
				ch0_counter_integrated = 0;
   8a73a:	f241 6158 	movw	r1, #5720	; 0x1658
   8a73e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8a742:	f04f 0200 	mov.w	r2, #0
   8a746:	f04f 0300 	mov.w	r3, #0
   8a74a:	e9c1 2300 	strd	r2, r3, [r1]
			}
			
			if(ch1_integration_time_counter == ch1_integration_time_goal)
   8a74e:	f241 6752 	movw	r7, #5714	; 0x1652
   8a752:	f2c2 0707 	movt	r7, #8199	; 0x2007
   8a756:	883a      	ldrh	r2, [r7, #0]
   8a758:	f240 20aa 	movw	r0, #682	; 0x2aa
   8a75c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a760:	8803      	ldrh	r3, [r0, #0]
   8a762:	429a      	cmp	r2, r3
   8a764:	d15b      	bne.n	8a81e <main+0x32a>
			{
				ch1_integration_time_counter = 0;
   8a766:	f241 6152 	movw	r1, #5714	; 0x1652
   8a76a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8a76e:	f04f 0700 	mov.w	r7, #0
   8a772:	800f      	strh	r7, [r1, #0]
				if(meas_push_activated)
   8a774:	f241 6248 	movw	r2, #5704	; 0x1648
   8a778:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8a77c:	8810      	ldrh	r0, [r2, #0]
   8a77e:	b1e8      	cbz	r0, 8a7bc <main+0x2c8>
				{
					printf("Counter1 value: %llu\x0D", ch1_counter_integrated);
   8a780:	f641 3788 	movw	r7, #7048	; 0x1b88
   8a784:	f2c2 0707 	movt	r7, #8199	; 0x2007
   8a788:	f241 6340 	movw	r3, #5696	; 0x1640
   8a78c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a790:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a794:	e9cd 2300 	strd	r2, r3, [sp]
   8a798:	4638      	mov	r0, r7
   8a79a:	f04f 0164 	mov.w	r1, #100	; 0x64
   8a79e:	f64d 6274 	movw	r2, #56948	; 0xde74
   8a7a2:	f2c0 0208 	movt	r2, #8
   8a7a6:	f64a 6357 	movw	r3, #44631	; 0xae57
   8a7aa:	f2c0 0308 	movt	r3, #8
   8a7ae:	4798      	blx	r3
   8a7b0:	4638      	mov	r0, r7
   8a7b2:	f245 215d 	movw	r1, #21085	; 0x525d
   8a7b6:	f2c0 0108 	movt	r1, #8
   8a7ba:	4788      	blx	r1
				}
				if(get_counterb_en_status() == TRUE)
   8a7bc:	f242 3065 	movw	r0, #9061	; 0x2365
   8a7c0:	f2c0 0008 	movt	r0, #8
   8a7c4:	4780      	blx	r0
   8a7c6:	2801      	cmp	r0, #1
   8a7c8:	d118      	bne.n	8a7fc <main+0x308>
				{
					if(last_counterb_en == FALSE)
   8a7ca:	f241 634c 	movw	r3, #5708	; 0x164c
   8a7ce:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a7d2:	8819      	ldrh	r1, [r3, #0]
   8a7d4:	b939      	cbnz	r1, 8a7e6 <main+0x2f2>
						last_counterb_en = TRUE;
   8a7d6:	f241 634c 	movw	r3, #5708	; 0x164c
   8a7da:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a7de:	f04f 0201 	mov.w	r2, #1
   8a7e2:	801a      	strh	r2, [r3, #0]
   8a7e4:	e011      	b.n	8a80a <main+0x316>
					else
						add_new_counterb_measurement_to_queue(ch1_counter_integrated);
   8a7e6:	f241 6040 	movw	r0, #5696	; 0x1640
   8a7ea:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a7ee:	c803      	ldmia	r0, {r0, r1}
   8a7f0:	f24a 47a5 	movw	r7, #42149	; 0xa4a5
   8a7f4:	f2c0 0708 	movt	r7, #8
   8a7f8:	47b8      	blx	r7
   8a7fa:	e006      	b.n	8a80a <main+0x316>
				}
				else
					last_counterb_en = FALSE;
   8a7fc:	f241 674c 	movw	r7, #5708	; 0x164c
   8a800:	f2c2 0707 	movt	r7, #8199	; 0x2007
   8a804:	f04f 0200 	mov.w	r2, #0
   8a808:	803a      	strh	r2, [r7, #0]
				ch1_counter_integrated = 0;
   8a80a:	f241 6140 	movw	r1, #5696	; 0x1640
   8a80e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8a812:	f04f 0200 	mov.w	r2, #0
   8a816:	f04f 0300 	mov.w	r3, #0
   8a81a:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}
		
		if(second_flag == TRUE)
   8a81e:	f241 6066 	movw	r0, #5734	; 0x1666
   8a822:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a826:	8807      	ldrh	r7, [r0, #0]
   8a828:	b2bb      	uxth	r3, r7
   8a82a:	2b01      	cmp	r3, #1
   8a82c:	d106      	bne.n	8a83c <main+0x348>
		{
			second_flag = FALSE;	
   8a82e:	f241 6166 	movw	r1, #5734	; 0x1666
   8a832:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8a836:	f04f 0200 	mov.w	r2, #0
   8a83a:	800a      	strh	r2, [r1, #0]
		}	

		if (main_b_msc_enable) 
   8a83c:	f241 604e 	movw	r0, #5710	; 0x164e
   8a840:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a844:	7807      	ldrb	r7, [r0, #0]
   8a846:	2f00      	cmp	r7, #0
   8a848:	f43f aec4 	beq.w	8a5d4 <main+0xe0>
		{
			if (!udi_msc_process_trans()) 
   8a84c:	f646 53a5 	movw	r3, #28069	; 0x6da5
   8a850:	f2c0 0308 	movt	r3, #8
   8a854:	4798      	blx	r3
   8a856:	e6bd      	b.n	8a5d4 <main+0xe0>

0008a858 <round>:
   8a858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a85a:	f3c1 570a 	ubfx	r7, r1, #20, #11
   8a85e:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
   8a862:	2e13      	cmp	r6, #19
   8a864:	4602      	mov	r2, r0
   8a866:	460b      	mov	r3, r1
   8a868:	4604      	mov	r4, r0
   8a86a:	460d      	mov	r5, r1
   8a86c:	dc18      	bgt.n	8a8a0 <round+0x48>
   8a86e:	2e00      	cmp	r6, #0
   8a870:	da08      	bge.n	8a884 <round+0x2c>
   8a872:	1c73      	adds	r3, r6, #1
   8a874:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a878:	d130      	bne.n	8a8dc <round+0x84>
   8a87a:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
   8a87e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   8a882:	e02b      	b.n	8a8dc <round+0x84>
   8a884:	4818      	ldr	r0, [pc, #96]	; (8a8e8 <round+0x90>)
   8a886:	fa40 f006 	asr.w	r0, r0, r6
   8a88a:	4208      	tst	r0, r1
   8a88c:	d100      	bne.n	8a890 <round+0x38>
   8a88e:	b342      	cbz	r2, 8a8e2 <round+0x8a>
   8a890:	f44f 2400 	mov.w	r4, #524288	; 0x80000
   8a894:	fa44 f606 	asr.w	r6, r4, r6
   8a898:	19ad      	adds	r5, r5, r6
   8a89a:	ea25 0500 	bic.w	r5, r5, r0
   8a89e:	e01d      	b.n	8a8dc <round+0x84>
   8a8a0:	2e33      	cmp	r6, #51	; 0x33
   8a8a2:	dd07      	ble.n	8a8b4 <round+0x5c>
   8a8a4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   8a8a8:	d11b      	bne.n	8a8e2 <round+0x8a>
   8a8aa:	f000 f825 	bl	8a8f8 <__adddf3>
   8a8ae:	4602      	mov	r2, r0
   8a8b0:	460b      	mov	r3, r1
   8a8b2:	e016      	b.n	8a8e2 <round+0x8a>
   8a8b4:	f2a7 4113 	subw	r1, r7, #1043	; 0x413
   8a8b8:	f04f 30ff 	mov.w	r0, #4294967295
   8a8bc:	fa20 f101 	lsr.w	r1, r0, r1
   8a8c0:	4211      	tst	r1, r2
   8a8c2:	d00e      	beq.n	8a8e2 <round+0x8a>
   8a8c4:	f5c7 6786 	rsb	r7, r7, #1072	; 0x430
   8a8c8:	2301      	movs	r3, #1
   8a8ca:	1cba      	adds	r2, r7, #2
   8a8cc:	fa03 f702 	lsl.w	r7, r3, r2
   8a8d0:	193c      	adds	r4, r7, r4
   8a8d2:	bf28      	it	cs
   8a8d4:	18ed      	addcs	r5, r5, r3
   8a8d6:	ea24 0401 	bic.w	r4, r4, r1
   8a8da:	e000      	b.n	8a8de <round+0x86>
   8a8dc:	2400      	movs	r4, #0
   8a8de:	462b      	mov	r3, r5
   8a8e0:	4622      	mov	r2, r4
   8a8e2:	4610      	mov	r0, r2
   8a8e4:	4619      	mov	r1, r3
   8a8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a8e8:	000fffff 	.word	0x000fffff

0008a8ec <__aeabi_drsub>:
   8a8ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8a8f0:	e002      	b.n	8a8f8 <__adddf3>
   8a8f2:	bf00      	nop

0008a8f4 <__aeabi_dsub>:
   8a8f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008a8f8 <__adddf3>:
   8a8f8:	b530      	push	{r4, r5, lr}
   8a8fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8a8fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8a902:	ea94 0f05 	teq	r4, r5
   8a906:	bf08      	it	eq
   8a908:	ea90 0f02 	teqeq	r0, r2
   8a90c:	bf1f      	itttt	ne
   8a90e:	ea54 0c00 	orrsne.w	ip, r4, r0
   8a912:	ea55 0c02 	orrsne.w	ip, r5, r2
   8a916:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8a91a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8a91e:	f000 80e2 	beq.w	8aae6 <__adddf3+0x1ee>
   8a922:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8a926:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8a92a:	bfb8      	it	lt
   8a92c:	426d      	neglt	r5, r5
   8a92e:	dd0c      	ble.n	8a94a <__adddf3+0x52>
   8a930:	442c      	add	r4, r5
   8a932:	ea80 0202 	eor.w	r2, r0, r2
   8a936:	ea81 0303 	eor.w	r3, r1, r3
   8a93a:	ea82 0000 	eor.w	r0, r2, r0
   8a93e:	ea83 0101 	eor.w	r1, r3, r1
   8a942:	ea80 0202 	eor.w	r2, r0, r2
   8a946:	ea81 0303 	eor.w	r3, r1, r3
   8a94a:	2d36      	cmp	r5, #54	; 0x36
   8a94c:	bf88      	it	hi
   8a94e:	bd30      	pophi	{r4, r5, pc}
   8a950:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8a954:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8a958:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8a95c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8a960:	d002      	beq.n	8a968 <__adddf3+0x70>
   8a962:	4240      	negs	r0, r0
   8a964:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8a968:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8a96c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8a970:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8a974:	d002      	beq.n	8a97c <__adddf3+0x84>
   8a976:	4252      	negs	r2, r2
   8a978:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8a97c:	ea94 0f05 	teq	r4, r5
   8a980:	f000 80a7 	beq.w	8aad2 <__adddf3+0x1da>
   8a984:	f1a4 0401 	sub.w	r4, r4, #1
   8a988:	f1d5 0e20 	rsbs	lr, r5, #32
   8a98c:	db0d      	blt.n	8a9aa <__adddf3+0xb2>
   8a98e:	fa02 fc0e 	lsl.w	ip, r2, lr
   8a992:	fa22 f205 	lsr.w	r2, r2, r5
   8a996:	1880      	adds	r0, r0, r2
   8a998:	f141 0100 	adc.w	r1, r1, #0
   8a99c:	fa03 f20e 	lsl.w	r2, r3, lr
   8a9a0:	1880      	adds	r0, r0, r2
   8a9a2:	fa43 f305 	asr.w	r3, r3, r5
   8a9a6:	4159      	adcs	r1, r3
   8a9a8:	e00e      	b.n	8a9c8 <__adddf3+0xd0>
   8a9aa:	f1a5 0520 	sub.w	r5, r5, #32
   8a9ae:	f10e 0e20 	add.w	lr, lr, #32
   8a9b2:	2a01      	cmp	r2, #1
   8a9b4:	fa03 fc0e 	lsl.w	ip, r3, lr
   8a9b8:	bf28      	it	cs
   8a9ba:	f04c 0c02 	orrcs.w	ip, ip, #2
   8a9be:	fa43 f305 	asr.w	r3, r3, r5
   8a9c2:	18c0      	adds	r0, r0, r3
   8a9c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8a9c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a9cc:	d507      	bpl.n	8a9de <__adddf3+0xe6>
   8a9ce:	f04f 0e00 	mov.w	lr, #0
   8a9d2:	f1dc 0c00 	rsbs	ip, ip, #0
   8a9d6:	eb7e 0000 	sbcs.w	r0, lr, r0
   8a9da:	eb6e 0101 	sbc.w	r1, lr, r1
   8a9de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8a9e2:	d31b      	bcc.n	8aa1c <__adddf3+0x124>
   8a9e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8a9e8:	d30c      	bcc.n	8aa04 <__adddf3+0x10c>
   8a9ea:	0849      	lsrs	r1, r1, #1
   8a9ec:	ea5f 0030 	movs.w	r0, r0, rrx
   8a9f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8a9f4:	f104 0401 	add.w	r4, r4, #1
   8a9f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8a9fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8aa00:	f080 809a 	bcs.w	8ab38 <__adddf3+0x240>
   8aa04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8aa08:	bf08      	it	eq
   8aa0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8aa0e:	f150 0000 	adcs.w	r0, r0, #0
   8aa12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8aa16:	ea41 0105 	orr.w	r1, r1, r5
   8aa1a:	bd30      	pop	{r4, r5, pc}
   8aa1c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8aa20:	4140      	adcs	r0, r0
   8aa22:	eb41 0101 	adc.w	r1, r1, r1
   8aa26:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8aa2a:	f1a4 0401 	sub.w	r4, r4, #1
   8aa2e:	d1e9      	bne.n	8aa04 <__adddf3+0x10c>
   8aa30:	f091 0f00 	teq	r1, #0
   8aa34:	bf04      	itt	eq
   8aa36:	4601      	moveq	r1, r0
   8aa38:	2000      	moveq	r0, #0
   8aa3a:	fab1 f381 	clz	r3, r1
   8aa3e:	bf08      	it	eq
   8aa40:	3320      	addeq	r3, #32
   8aa42:	f1a3 030b 	sub.w	r3, r3, #11
   8aa46:	f1b3 0220 	subs.w	r2, r3, #32
   8aa4a:	da0c      	bge.n	8aa66 <__adddf3+0x16e>
   8aa4c:	320c      	adds	r2, #12
   8aa4e:	dd08      	ble.n	8aa62 <__adddf3+0x16a>
   8aa50:	f102 0c14 	add.w	ip, r2, #20
   8aa54:	f1c2 020c 	rsb	r2, r2, #12
   8aa58:	fa01 f00c 	lsl.w	r0, r1, ip
   8aa5c:	fa21 f102 	lsr.w	r1, r1, r2
   8aa60:	e00c      	b.n	8aa7c <__adddf3+0x184>
   8aa62:	f102 0214 	add.w	r2, r2, #20
   8aa66:	bfd8      	it	le
   8aa68:	f1c2 0c20 	rsble	ip, r2, #32
   8aa6c:	fa01 f102 	lsl.w	r1, r1, r2
   8aa70:	fa20 fc0c 	lsr.w	ip, r0, ip
   8aa74:	bfdc      	itt	le
   8aa76:	ea41 010c 	orrle.w	r1, r1, ip
   8aa7a:	4090      	lslle	r0, r2
   8aa7c:	1ae4      	subs	r4, r4, r3
   8aa7e:	bfa2      	ittt	ge
   8aa80:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8aa84:	4329      	orrge	r1, r5
   8aa86:	bd30      	popge	{r4, r5, pc}
   8aa88:	ea6f 0404 	mvn.w	r4, r4
   8aa8c:	3c1f      	subs	r4, #31
   8aa8e:	da1c      	bge.n	8aaca <__adddf3+0x1d2>
   8aa90:	340c      	adds	r4, #12
   8aa92:	dc0e      	bgt.n	8aab2 <__adddf3+0x1ba>
   8aa94:	f104 0414 	add.w	r4, r4, #20
   8aa98:	f1c4 0220 	rsb	r2, r4, #32
   8aa9c:	fa20 f004 	lsr.w	r0, r0, r4
   8aaa0:	fa01 f302 	lsl.w	r3, r1, r2
   8aaa4:	ea40 0003 	orr.w	r0, r0, r3
   8aaa8:	fa21 f304 	lsr.w	r3, r1, r4
   8aaac:	ea45 0103 	orr.w	r1, r5, r3
   8aab0:	bd30      	pop	{r4, r5, pc}
   8aab2:	f1c4 040c 	rsb	r4, r4, #12
   8aab6:	f1c4 0220 	rsb	r2, r4, #32
   8aaba:	fa20 f002 	lsr.w	r0, r0, r2
   8aabe:	fa01 f304 	lsl.w	r3, r1, r4
   8aac2:	ea40 0003 	orr.w	r0, r0, r3
   8aac6:	4629      	mov	r1, r5
   8aac8:	bd30      	pop	{r4, r5, pc}
   8aaca:	fa21 f004 	lsr.w	r0, r1, r4
   8aace:	4629      	mov	r1, r5
   8aad0:	bd30      	pop	{r4, r5, pc}
   8aad2:	f094 0f00 	teq	r4, #0
   8aad6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8aada:	bf06      	itte	eq
   8aadc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8aae0:	3401      	addeq	r4, #1
   8aae2:	3d01      	subne	r5, #1
   8aae4:	e74e      	b.n	8a984 <__adddf3+0x8c>
   8aae6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8aaea:	bf18      	it	ne
   8aaec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8aaf0:	d029      	beq.n	8ab46 <__adddf3+0x24e>
   8aaf2:	ea94 0f05 	teq	r4, r5
   8aaf6:	bf08      	it	eq
   8aaf8:	ea90 0f02 	teqeq	r0, r2
   8aafc:	d005      	beq.n	8ab0a <__adddf3+0x212>
   8aafe:	ea54 0c00 	orrs.w	ip, r4, r0
   8ab02:	bf04      	itt	eq
   8ab04:	4619      	moveq	r1, r3
   8ab06:	4610      	moveq	r0, r2
   8ab08:	bd30      	pop	{r4, r5, pc}
   8ab0a:	ea91 0f03 	teq	r1, r3
   8ab0e:	bf1e      	ittt	ne
   8ab10:	2100      	movne	r1, #0
   8ab12:	2000      	movne	r0, #0
   8ab14:	bd30      	popne	{r4, r5, pc}
   8ab16:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8ab1a:	d105      	bne.n	8ab28 <__adddf3+0x230>
   8ab1c:	0040      	lsls	r0, r0, #1
   8ab1e:	4149      	adcs	r1, r1
   8ab20:	bf28      	it	cs
   8ab22:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8ab26:	bd30      	pop	{r4, r5, pc}
   8ab28:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8ab2c:	bf3c      	itt	cc
   8ab2e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8ab32:	bd30      	popcc	{r4, r5, pc}
   8ab34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8ab38:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8ab3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8ab40:	f04f 0000 	mov.w	r0, #0
   8ab44:	bd30      	pop	{r4, r5, pc}
   8ab46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8ab4a:	bf1a      	itte	ne
   8ab4c:	4619      	movne	r1, r3
   8ab4e:	4610      	movne	r0, r2
   8ab50:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8ab54:	bf1c      	itt	ne
   8ab56:	460b      	movne	r3, r1
   8ab58:	4602      	movne	r2, r0
   8ab5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8ab5e:	bf06      	itte	eq
   8ab60:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8ab64:	ea91 0f03 	teqeq	r1, r3
   8ab68:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8ab6c:	bd30      	pop	{r4, r5, pc}
   8ab6e:	bf00      	nop

0008ab70 <__aeabi_ui2d>:
   8ab70:	f090 0f00 	teq	r0, #0
   8ab74:	bf04      	itt	eq
   8ab76:	2100      	moveq	r1, #0
   8ab78:	4770      	bxeq	lr
   8ab7a:	b530      	push	{r4, r5, lr}
   8ab7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8ab80:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8ab84:	f04f 0500 	mov.w	r5, #0
   8ab88:	f04f 0100 	mov.w	r1, #0
   8ab8c:	e750      	b.n	8aa30 <__adddf3+0x138>
   8ab8e:	bf00      	nop

0008ab90 <__aeabi_i2d>:
   8ab90:	f090 0f00 	teq	r0, #0
   8ab94:	bf04      	itt	eq
   8ab96:	2100      	moveq	r1, #0
   8ab98:	4770      	bxeq	lr
   8ab9a:	b530      	push	{r4, r5, lr}
   8ab9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8aba0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8aba4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8aba8:	bf48      	it	mi
   8abaa:	4240      	negmi	r0, r0
   8abac:	f04f 0100 	mov.w	r1, #0
   8abb0:	e73e      	b.n	8aa30 <__adddf3+0x138>
   8abb2:	bf00      	nop

0008abb4 <__aeabi_f2d>:
   8abb4:	0042      	lsls	r2, r0, #1
   8abb6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8abba:	ea4f 0131 	mov.w	r1, r1, rrx
   8abbe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8abc2:	bf1f      	itttt	ne
   8abc4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8abc8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8abcc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8abd0:	4770      	bxne	lr
   8abd2:	f092 0f00 	teq	r2, #0
   8abd6:	bf14      	ite	ne
   8abd8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8abdc:	4770      	bxeq	lr
   8abde:	b530      	push	{r4, r5, lr}
   8abe0:	f44f 7460 	mov.w	r4, #896	; 0x380
   8abe4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8abe8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8abec:	e720      	b.n	8aa30 <__adddf3+0x138>
   8abee:	bf00      	nop

0008abf0 <__aeabi_ul2d>:
   8abf0:	ea50 0201 	orrs.w	r2, r0, r1
   8abf4:	bf08      	it	eq
   8abf6:	4770      	bxeq	lr
   8abf8:	b530      	push	{r4, r5, lr}
   8abfa:	f04f 0500 	mov.w	r5, #0
   8abfe:	e00a      	b.n	8ac16 <__aeabi_l2d+0x16>

0008ac00 <__aeabi_l2d>:
   8ac00:	ea50 0201 	orrs.w	r2, r0, r1
   8ac04:	bf08      	it	eq
   8ac06:	4770      	bxeq	lr
   8ac08:	b530      	push	{r4, r5, lr}
   8ac0a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8ac0e:	d502      	bpl.n	8ac16 <__aeabi_l2d+0x16>
   8ac10:	4240      	negs	r0, r0
   8ac12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8ac16:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8ac1a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8ac1e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8ac22:	f43f aedc 	beq.w	8a9de <__adddf3+0xe6>
   8ac26:	f04f 0203 	mov.w	r2, #3
   8ac2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8ac2e:	bf18      	it	ne
   8ac30:	3203      	addne	r2, #3
   8ac32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8ac36:	bf18      	it	ne
   8ac38:	3203      	addne	r2, #3
   8ac3a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8ac3e:	f1c2 0320 	rsb	r3, r2, #32
   8ac42:	fa00 fc03 	lsl.w	ip, r0, r3
   8ac46:	fa20 f002 	lsr.w	r0, r0, r2
   8ac4a:	fa01 fe03 	lsl.w	lr, r1, r3
   8ac4e:	ea40 000e 	orr.w	r0, r0, lr
   8ac52:	fa21 f102 	lsr.w	r1, r1, r2
   8ac56:	4414      	add	r4, r2
   8ac58:	e6c1      	b.n	8a9de <__adddf3+0xe6>
   8ac5a:	bf00      	nop

0008ac5c <__aeabi_d2uiz>:
   8ac5c:	004a      	lsls	r2, r1, #1
   8ac5e:	d211      	bcs.n	8ac84 <__aeabi_d2uiz+0x28>
   8ac60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8ac64:	d211      	bcs.n	8ac8a <__aeabi_d2uiz+0x2e>
   8ac66:	d50d      	bpl.n	8ac84 <__aeabi_d2uiz+0x28>
   8ac68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8ac6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8ac70:	d40e      	bmi.n	8ac90 <__aeabi_d2uiz+0x34>
   8ac72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8ac76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8ac7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8ac7e:	fa23 f002 	lsr.w	r0, r3, r2
   8ac82:	4770      	bx	lr
   8ac84:	f04f 0000 	mov.w	r0, #0
   8ac88:	4770      	bx	lr
   8ac8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8ac8e:	d102      	bne.n	8ac96 <__aeabi_d2uiz+0x3a>
   8ac90:	f04f 30ff 	mov.w	r0, #4294967295
   8ac94:	4770      	bx	lr
   8ac96:	f04f 0000 	mov.w	r0, #0
   8ac9a:	4770      	bx	lr

0008ac9c <__register_exitproc>:
   8ac9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8aca0:	4698      	mov	r8, r3
   8aca2:	4b23      	ldr	r3, [pc, #140]	; (8ad30 <__register_exitproc+0x94>)
   8aca4:	4606      	mov	r6, r0
   8aca6:	681c      	ldr	r4, [r3, #0]
   8aca8:	460f      	mov	r7, r1
   8acaa:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   8acae:	4691      	mov	r9, r2
   8acb0:	b918      	cbnz	r0, 8acba <__register_exitproc+0x1e>
   8acb2:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   8acb6:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   8acba:	6841      	ldr	r1, [r0, #4]
   8acbc:	291f      	cmp	r1, #31
   8acbe:	dd16      	ble.n	8acee <__register_exitproc+0x52>
   8acc0:	481c      	ldr	r0, [pc, #112]	; (8ad34 <__register_exitproc+0x98>)
   8acc2:	b918      	cbnz	r0, 8accc <__register_exitproc+0x30>
   8acc4:	f04f 30ff 	mov.w	r0, #4294967295
   8acc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8accc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8acd0:	f3af 8000 	nop.w
   8acd4:	2800      	cmp	r0, #0
   8acd6:	d0f5      	beq.n	8acc4 <__register_exitproc+0x28>
   8acd8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   8acdc:	2500      	movs	r5, #0
   8acde:	6045      	str	r5, [r0, #4]
   8ace0:	6002      	str	r2, [r0, #0]
   8ace2:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   8ace6:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   8acea:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   8acee:	b1b6      	cbz	r6, 8ad1e <__register_exitproc+0x82>
   8acf0:	6844      	ldr	r4, [r0, #4]
   8acf2:	2201      	movs	r2, #1
   8acf4:	fa02 f204 	lsl.w	r2, r2, r4
   8acf8:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   8acfc:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   8ad00:	4311      	orrs	r1, r2
   8ad02:	2e02      	cmp	r6, #2
   8ad04:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   8ad08:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   8ad0c:	461c      	mov	r4, r3
   8ad0e:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   8ad12:	d104      	bne.n	8ad1e <__register_exitproc+0x82>
   8ad14:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   8ad18:	431a      	orrs	r2, r3
   8ad1a:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   8ad1e:	6841      	ldr	r1, [r0, #4]
   8ad20:	1c8b      	adds	r3, r1, #2
   8ad22:	1c4a      	adds	r2, r1, #1
   8ad24:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   8ad28:	6042      	str	r2, [r0, #4]
   8ad2a:	2000      	movs	r0, #0
   8ad2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8ad30:	0008df90 	.word	0x0008df90
   8ad34:	00000000 	.word	0x00000000

0008ad38 <__libc_fini_array>:
   8ad38:	b570      	push	{r4, r5, r6, lr}
   8ad3a:	4b08      	ldr	r3, [pc, #32]	; (8ad5c <__libc_fini_array+0x24>)
   8ad3c:	4c08      	ldr	r4, [pc, #32]	; (8ad60 <__libc_fini_array+0x28>)
   8ad3e:	2500      	movs	r5, #0
   8ad40:	1ae0      	subs	r0, r4, r3
   8ad42:	1084      	asrs	r4, r0, #2
   8ad44:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   8ad48:	3d04      	subs	r5, #4
   8ad4a:	b11c      	cbz	r4, 8ad54 <__libc_fini_array+0x1c>
   8ad4c:	5972      	ldr	r2, [r6, r5]
   8ad4e:	4790      	blx	r2
   8ad50:	3c01      	subs	r4, #1
   8ad52:	e7f9      	b.n	8ad48 <__libc_fini_array+0x10>
   8ad54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   8ad58:	f003 b958 	b.w	8e00c <_fini>
   8ad5c:	0008e018 	.word	0x0008e018
   8ad60:	0008e01c 	.word	0x0008e01c

0008ad64 <__libc_init_array>:
   8ad64:	b538      	push	{r3, r4, r5, lr}
   8ad66:	4d0e      	ldr	r5, [pc, #56]	; (8ada0 <__libc_init_array+0x3c>)
   8ad68:	4b0e      	ldr	r3, [pc, #56]	; (8ada4 <__libc_init_array+0x40>)
   8ad6a:	2400      	movs	r4, #0
   8ad6c:	1ae8      	subs	r0, r5, r3
   8ad6e:	1085      	asrs	r5, r0, #2
   8ad70:	42ac      	cmp	r4, r5
   8ad72:	d005      	beq.n	8ad80 <__libc_init_array+0x1c>
   8ad74:	490b      	ldr	r1, [pc, #44]	; (8ada4 <__libc_init_array+0x40>)
   8ad76:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   8ad7a:	4790      	blx	r2
   8ad7c:	3401      	adds	r4, #1
   8ad7e:	e7f7      	b.n	8ad70 <__libc_init_array+0xc>
   8ad80:	f003 f93a 	bl	8dff8 <_init>
   8ad84:	4908      	ldr	r1, [pc, #32]	; (8ada8 <__libc_init_array+0x44>)
   8ad86:	4a09      	ldr	r2, [pc, #36]	; (8adac <__libc_init_array+0x48>)
   8ad88:	1a54      	subs	r4, r2, r1
   8ad8a:	10a5      	asrs	r5, r4, #2
   8ad8c:	2400      	movs	r4, #0
   8ad8e:	42ac      	cmp	r4, r5
   8ad90:	d005      	beq.n	8ad9e <__libc_init_array+0x3a>
   8ad92:	4b05      	ldr	r3, [pc, #20]	; (8ada8 <__libc_init_array+0x44>)
   8ad94:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8ad98:	4780      	blx	r0
   8ad9a:	3401      	adds	r4, #1
   8ad9c:	e7f7      	b.n	8ad8e <__libc_init_array+0x2a>
   8ad9e:	bd38      	pop	{r3, r4, r5, pc}
   8ada0:	0008e004 	.word	0x0008e004
   8ada4:	0008e004 	.word	0x0008e004
   8ada8:	0008e004 	.word	0x0008e004
   8adac:	0008e00c 	.word	0x0008e00c

0008adb0 <memcpy>:
   8adb0:	b510      	push	{r4, lr}
   8adb2:	2300      	movs	r3, #0
   8adb4:	4293      	cmp	r3, r2
   8adb6:	d003      	beq.n	8adc0 <memcpy+0x10>
   8adb8:	5ccc      	ldrb	r4, [r1, r3]
   8adba:	54c4      	strb	r4, [r0, r3]
   8adbc:	3301      	adds	r3, #1
   8adbe:	e7f9      	b.n	8adb4 <memcpy+0x4>
   8adc0:	bd10      	pop	{r4, pc}

0008adc2 <memmove>:
   8adc2:	4281      	cmp	r1, r0
   8adc4:	b570      	push	{r4, r5, r6, lr}
   8adc6:	d20e      	bcs.n	8ade6 <memmove+0x24>
   8adc8:	188c      	adds	r4, r1, r2
   8adca:	42a0      	cmp	r0, r4
   8adcc:	d20b      	bcs.n	8ade6 <memmove+0x24>
   8adce:	1885      	adds	r5, r0, r2
   8add0:	4613      	mov	r3, r2
   8add2:	f113 33ff 	adds.w	r3, r3, #4294967295
   8add6:	d305      	bcc.n	8ade4 <memmove+0x22>
   8add8:	4251      	negs	r1, r2
   8adda:	1866      	adds	r6, r4, r1
   8addc:	5cf6      	ldrb	r6, [r6, r3]
   8adde:	1869      	adds	r1, r5, r1
   8ade0:	54ce      	strb	r6, [r1, r3]
   8ade2:	e7f6      	b.n	8add2 <memmove+0x10>
   8ade4:	bd70      	pop	{r4, r5, r6, pc}
   8ade6:	2300      	movs	r3, #0
   8ade8:	4293      	cmp	r3, r2
   8adea:	d003      	beq.n	8adf4 <memmove+0x32>
   8adec:	5ccc      	ldrb	r4, [r1, r3]
   8adee:	54c4      	strb	r4, [r0, r3]
   8adf0:	3301      	adds	r3, #1
   8adf2:	e7f9      	b.n	8ade8 <memmove+0x26>
   8adf4:	bd70      	pop	{r4, r5, r6, pc}
	...

0008adf8 <_snprintf_r>:
   8adf8:	b408      	push	{r3}
   8adfa:	b530      	push	{r4, r5, lr}
   8adfc:	1e14      	subs	r4, r2, #0
   8adfe:	b09c      	sub	sp, #112	; 0x70
   8ae00:	4605      	mov	r5, r0
   8ae02:	da04      	bge.n	8ae0e <_snprintf_r+0x16>
   8ae04:	208b      	movs	r0, #139	; 0x8b
   8ae06:	6028      	str	r0, [r5, #0]
   8ae08:	f04f 30ff 	mov.w	r0, #4294967295
   8ae0c:	e01e      	b.n	8ae4c <_snprintf_r+0x54>
   8ae0e:	f44f 7302 	mov.w	r3, #520	; 0x208
   8ae12:	f8ad 3014 	strh.w	r3, [sp, #20]
   8ae16:	9102      	str	r1, [sp, #8]
   8ae18:	9106      	str	r1, [sp, #24]
   8ae1a:	d001      	beq.n	8ae20 <_snprintf_r+0x28>
   8ae1c:	1e60      	subs	r0, r4, #1
   8ae1e:	e000      	b.n	8ae22 <_snprintf_r+0x2a>
   8ae20:	4620      	mov	r0, r4
   8ae22:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8ae26:	ab20      	add	r3, sp, #128	; 0x80
   8ae28:	9004      	str	r0, [sp, #16]
   8ae2a:	9007      	str	r0, [sp, #28]
   8ae2c:	f8ad 1016 	strh.w	r1, [sp, #22]
   8ae30:	4628      	mov	r0, r5
   8ae32:	a902      	add	r1, sp, #8
   8ae34:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   8ae36:	9301      	str	r3, [sp, #4]
   8ae38:	f000 f922 	bl	8b080 <_svfprintf_r>
   8ae3c:	1c43      	adds	r3, r0, #1
   8ae3e:	da01      	bge.n	8ae44 <_snprintf_r+0x4c>
   8ae40:	228b      	movs	r2, #139	; 0x8b
   8ae42:	602a      	str	r2, [r5, #0]
   8ae44:	b114      	cbz	r4, 8ae4c <_snprintf_r+0x54>
   8ae46:	9b02      	ldr	r3, [sp, #8]
   8ae48:	2100      	movs	r1, #0
   8ae4a:	7019      	strb	r1, [r3, #0]
   8ae4c:	b01c      	add	sp, #112	; 0x70
   8ae4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8ae52:	b001      	add	sp, #4
   8ae54:	4770      	bx	lr

0008ae56 <snprintf>:
   8ae56:	b40c      	push	{r2, r3}
   8ae58:	b530      	push	{r4, r5, lr}
   8ae5a:	4b17      	ldr	r3, [pc, #92]	; (8aeb8 <snprintf+0x62>)
   8ae5c:	1e0c      	subs	r4, r1, #0
   8ae5e:	b09d      	sub	sp, #116	; 0x74
   8ae60:	681d      	ldr	r5, [r3, #0]
   8ae62:	da04      	bge.n	8ae6e <snprintf+0x18>
   8ae64:	208b      	movs	r0, #139	; 0x8b
   8ae66:	6028      	str	r0, [r5, #0]
   8ae68:	f04f 30ff 	mov.w	r0, #4294967295
   8ae6c:	e01e      	b.n	8aeac <snprintf+0x56>
   8ae6e:	f44f 7102 	mov.w	r1, #520	; 0x208
   8ae72:	f8ad 1014 	strh.w	r1, [sp, #20]
   8ae76:	9002      	str	r0, [sp, #8]
   8ae78:	9006      	str	r0, [sp, #24]
   8ae7a:	d001      	beq.n	8ae80 <snprintf+0x2a>
   8ae7c:	1e60      	subs	r0, r4, #1
   8ae7e:	e000      	b.n	8ae82 <snprintf+0x2c>
   8ae80:	4620      	mov	r0, r4
   8ae82:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8ae86:	9004      	str	r0, [sp, #16]
   8ae88:	9007      	str	r0, [sp, #28]
   8ae8a:	f8ad 2016 	strh.w	r2, [sp, #22]
   8ae8e:	ab21      	add	r3, sp, #132	; 0x84
   8ae90:	9a20      	ldr	r2, [sp, #128]	; 0x80
   8ae92:	4628      	mov	r0, r5
   8ae94:	a902      	add	r1, sp, #8
   8ae96:	9301      	str	r3, [sp, #4]
   8ae98:	f000 f8f2 	bl	8b080 <_svfprintf_r>
   8ae9c:	1c42      	adds	r2, r0, #1
   8ae9e:	da01      	bge.n	8aea4 <snprintf+0x4e>
   8aea0:	238b      	movs	r3, #139	; 0x8b
   8aea2:	602b      	str	r3, [r5, #0]
   8aea4:	b114      	cbz	r4, 8aeac <snprintf+0x56>
   8aea6:	9a02      	ldr	r2, [sp, #8]
   8aea8:	2100      	movs	r1, #0
   8aeaa:	7011      	strb	r1, [r2, #0]
   8aeac:	b01d      	add	sp, #116	; 0x74
   8aeae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8aeb2:	b002      	add	sp, #8
   8aeb4:	4770      	bx	lr
   8aeb6:	bf00      	nop
   8aeb8:	200702b0 	.word	0x200702b0

0008aebc <strlen>:
   8aebc:	4603      	mov	r3, r0
   8aebe:	f813 2b01 	ldrb.w	r2, [r3], #1
   8aec2:	2a00      	cmp	r2, #0
   8aec4:	d1fb      	bne.n	8aebe <strlen+0x2>
   8aec6:	1a18      	subs	r0, r3, r0
   8aec8:	3801      	subs	r0, #1
   8aeca:	4770      	bx	lr

0008aecc <strncasecmp>:
   8aecc:	4b0f      	ldr	r3, [pc, #60]	; (8af0c <strncasecmp+0x40>)
   8aece:	b5f0      	push	{r4, r5, r6, r7, lr}
   8aed0:	681e      	ldr	r6, [r3, #0]
   8aed2:	2300      	movs	r3, #0
   8aed4:	4293      	cmp	r3, r2
   8aed6:	d015      	beq.n	8af04 <strncasecmp+0x38>
   8aed8:	5cc5      	ldrb	r5, [r0, r3]
   8aeda:	1974      	adds	r4, r6, r5
   8aedc:	7867      	ldrb	r7, [r4, #1]
   8aede:	f007 0403 	and.w	r4, r7, #3
   8aee2:	2c01      	cmp	r4, #1
   8aee4:	5ccc      	ldrb	r4, [r1, r3]
   8aee6:	bf08      	it	eq
   8aee8:	3520      	addeq	r5, #32
   8aeea:	1937      	adds	r7, r6, r4
   8aeec:	787f      	ldrb	r7, [r7, #1]
   8aeee:	f007 0703 	and.w	r7, r7, #3
   8aef2:	2f01      	cmp	r7, #1
   8aef4:	bf08      	it	eq
   8aef6:	3420      	addeq	r4, #32
   8aef8:	1b2d      	subs	r5, r5, r4
   8aefa:	d104      	bne.n	8af06 <strncasecmp+0x3a>
   8aefc:	3301      	adds	r3, #1
   8aefe:	2c00      	cmp	r4, #0
   8af00:	d1e8      	bne.n	8aed4 <strncasecmp+0x8>
   8af02:	e000      	b.n	8af06 <strncasecmp+0x3a>
   8af04:	2500      	movs	r5, #0
   8af06:	4628      	mov	r0, r5
   8af08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8af0a:	bf00      	nop
   8af0c:	200702ac 	.word	0x200702ac

0008af10 <strncmp>:
   8af10:	b570      	push	{r4, r5, r6, lr}
   8af12:	b192      	cbz	r2, 8af3a <strncmp+0x2a>
   8af14:	460b      	mov	r3, r1
   8af16:	4605      	mov	r5, r0
   8af18:	b91a      	cbnz	r2, 8af22 <strncmp+0x12>
   8af1a:	7828      	ldrb	r0, [r5, #0]
   8af1c:	7819      	ldrb	r1, [r3, #0]
   8af1e:	1a40      	subs	r0, r0, r1
   8af20:	bd70      	pop	{r4, r5, r6, pc}
   8af22:	f810 6b01 	ldrb.w	r6, [r0], #1
   8af26:	781c      	ldrb	r4, [r3, #0]
   8af28:	3101      	adds	r1, #1
   8af2a:	42b4      	cmp	r4, r6
   8af2c:	d1f5      	bne.n	8af1a <strncmp+0xa>
   8af2e:	2a01      	cmp	r2, #1
   8af30:	d0f3      	beq.n	8af1a <strncmp+0xa>
   8af32:	3a01      	subs	r2, #1
   8af34:	2c00      	cmp	r4, #0
   8af36:	d1ed      	bne.n	8af14 <strncmp+0x4>
   8af38:	e7ef      	b.n	8af1a <strncmp+0xa>
   8af3a:	4610      	mov	r0, r2
   8af3c:	bd70      	pop	{r4, r5, r6, pc}

0008af3e <strnlen>:
   8af3e:	b510      	push	{r4, lr}
   8af40:	4603      	mov	r3, r0
   8af42:	1841      	adds	r1, r0, r1
   8af44:	428b      	cmp	r3, r1
   8af46:	461a      	mov	r2, r3
   8af48:	d101      	bne.n	8af4e <strnlen+0x10>
   8af4a:	1a10      	subs	r0, r2, r0
   8af4c:	bd10      	pop	{r4, pc}
   8af4e:	7814      	ldrb	r4, [r2, #0]
   8af50:	3301      	adds	r3, #1
   8af52:	2c00      	cmp	r4, #0
   8af54:	d1f6      	bne.n	8af44 <strnlen+0x6>
   8af56:	e7f8      	b.n	8af4a <strnlen+0xc>

0008af58 <_strtol_r>:
   8af58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8af5c:	9001      	str	r0, [sp, #4]
   8af5e:	4840      	ldr	r0, [pc, #256]	; (8b060 <_strtol_r+0x108>)
   8af60:	f8d0 9000 	ldr.w	r9, [r0]
   8af64:	4608      	mov	r0, r1
   8af66:	4604      	mov	r4, r0
   8af68:	f814 5b01 	ldrb.w	r5, [r4], #1
   8af6c:	eb09 0605 	add.w	r6, r9, r5
   8af70:	7877      	ldrb	r7, [r6, #1]
   8af72:	4620      	mov	r0, r4
   8af74:	f007 0608 	and.w	r6, r7, #8
   8af78:	b2f7      	uxtb	r7, r6
   8af7a:	2f00      	cmp	r7, #0
   8af7c:	d1f3      	bne.n	8af66 <_strtol_r+0xe>
   8af7e:	2d2d      	cmp	r5, #45	; 0x2d
   8af80:	d103      	bne.n	8af8a <_strtol_r+0x32>
   8af82:	f814 5b01 	ldrb.w	r5, [r4], #1
   8af86:	2701      	movs	r7, #1
   8af88:	e004      	b.n	8af94 <_strtol_r+0x3c>
   8af8a:	2d2b      	cmp	r5, #43	; 0x2b
   8af8c:	bf04      	itt	eq
   8af8e:	4624      	moveq	r4, r4
   8af90:	f814 5b01 	ldrbeq.w	r5, [r4], #1
   8af94:	2b00      	cmp	r3, #0
   8af96:	d05c      	beq.n	8b052 <_strtol_r+0xfa>
   8af98:	2b10      	cmp	r3, #16
   8af9a:	d107      	bne.n	8afac <_strtol_r+0x54>
   8af9c:	2d30      	cmp	r5, #48	; 0x30
   8af9e:	d105      	bne.n	8afac <_strtol_r+0x54>
   8afa0:	7825      	ldrb	r5, [r4, #0]
   8afa2:	2d78      	cmp	r5, #120	; 0x78
   8afa4:	d14e      	bne.n	8b044 <_strtol_r+0xec>
   8afa6:	7865      	ldrb	r5, [r4, #1]
   8afa8:	2310      	movs	r3, #16
   8afaa:	3402      	adds	r4, #2
   8afac:	2f00      	cmp	r7, #0
   8afae:	bf0c      	ite	eq
   8afb0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8afb4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   8afb8:	fbb0 faf3 	udiv	sl, r0, r3
   8afbc:	2600      	movs	r6, #0
   8afbe:	fb03 081a 	mls	r8, r3, sl, r0
   8afc2:	4630      	mov	r0, r6
   8afc4:	eb09 0c05 	add.w	ip, r9, r5
   8afc8:	f89c c001 	ldrb.w	ip, [ip, #1]
   8afcc:	f00c 0b04 	and.w	fp, ip, #4
   8afd0:	fa5f fb8b 	uxtb.w	fp, fp
   8afd4:	f1bb 0f00 	cmp.w	fp, #0
   8afd8:	d001      	beq.n	8afde <_strtol_r+0x86>
   8afda:	3d30      	subs	r5, #48	; 0x30
   8afdc:	e00b      	b.n	8aff6 <_strtol_r+0x9e>
   8afde:	f01c 0c03 	ands.w	ip, ip, #3
   8afe2:	d01b      	beq.n	8b01c <_strtol_r+0xc4>
   8afe4:	f1bc 0f01 	cmp.w	ip, #1
   8afe8:	bf14      	ite	ne
   8afea:	f04f 0c57 	movne.w	ip, #87	; 0x57
   8afee:	f04f 0c37 	moveq.w	ip, #55	; 0x37
   8aff2:	ebcc 0505 	rsb	r5, ip, r5
   8aff6:	429d      	cmp	r5, r3
   8aff8:	da10      	bge.n	8b01c <_strtol_r+0xc4>
   8affa:	f1b6 3fff 	cmp.w	r6, #4294967295
   8affe:	d00a      	beq.n	8b016 <_strtol_r+0xbe>
   8b000:	4550      	cmp	r0, sl
   8b002:	d806      	bhi.n	8b012 <_strtol_r+0xba>
   8b004:	d101      	bne.n	8b00a <_strtol_r+0xb2>
   8b006:	4545      	cmp	r5, r8
   8b008:	dc03      	bgt.n	8b012 <_strtol_r+0xba>
   8b00a:	fb03 5000 	mla	r0, r3, r0, r5
   8b00e:	2601      	movs	r6, #1
   8b010:	e001      	b.n	8b016 <_strtol_r+0xbe>
   8b012:	f04f 36ff 	mov.w	r6, #4294967295
   8b016:	f814 5b01 	ldrb.w	r5, [r4], #1
   8b01a:	e7d3      	b.n	8afc4 <_strtol_r+0x6c>
   8b01c:	1c73      	adds	r3, r6, #1
   8b01e:	d10a      	bne.n	8b036 <_strtol_r+0xde>
   8b020:	2f00      	cmp	r7, #0
   8b022:	9901      	ldr	r1, [sp, #4]
   8b024:	bf0c      	ite	eq
   8b026:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8b02a:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   8b02e:	2322      	movs	r3, #34	; 0x22
   8b030:	600b      	str	r3, [r1, #0]
   8b032:	b922      	cbnz	r2, 8b03e <_strtol_r+0xe6>
   8b034:	e011      	b.n	8b05a <_strtol_r+0x102>
   8b036:	b107      	cbz	r7, 8b03a <_strtol_r+0xe2>
   8b038:	4240      	negs	r0, r0
   8b03a:	b172      	cbz	r2, 8b05a <_strtol_r+0x102>
   8b03c:	b106      	cbz	r6, 8b040 <_strtol_r+0xe8>
   8b03e:	1e61      	subs	r1, r4, #1
   8b040:	6011      	str	r1, [r2, #0]
   8b042:	e00a      	b.n	8b05a <_strtol_r+0x102>
   8b044:	2d58      	cmp	r5, #88	; 0x58
   8b046:	d0ae      	beq.n	8afa6 <_strtol_r+0x4e>
   8b048:	2530      	movs	r5, #48	; 0x30
   8b04a:	2b00      	cmp	r3, #0
   8b04c:	d1ae      	bne.n	8afac <_strtol_r+0x54>
   8b04e:	2308      	movs	r3, #8
   8b050:	e7ac      	b.n	8afac <_strtol_r+0x54>
   8b052:	2d30      	cmp	r5, #48	; 0x30
   8b054:	d0a4      	beq.n	8afa0 <_strtol_r+0x48>
   8b056:	230a      	movs	r3, #10
   8b058:	e7a8      	b.n	8afac <_strtol_r+0x54>
   8b05a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b05e:	bf00      	nop
   8b060:	200702ac 	.word	0x200702ac

0008b064 <strtol>:
   8b064:	b530      	push	{r4, r5, lr}
   8b066:	4613      	mov	r3, r2
   8b068:	4a04      	ldr	r2, [pc, #16]	; (8b07c <strtol+0x18>)
   8b06a:	4605      	mov	r5, r0
   8b06c:	460c      	mov	r4, r1
   8b06e:	6810      	ldr	r0, [r2, #0]
   8b070:	4629      	mov	r1, r5
   8b072:	4622      	mov	r2, r4
   8b074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8b078:	f7ff bf6e 	b.w	8af58 <_strtol_r>
   8b07c:	200702b0 	.word	0x200702b0

0008b080 <_svfprintf_r>:
   8b080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b084:	461e      	mov	r6, r3
   8b086:	898b      	ldrh	r3, [r1, #12]
   8b088:	4689      	mov	r9, r1
   8b08a:	f003 0180 	and.w	r1, r3, #128	; 0x80
   8b08e:	4614      	mov	r4, r2
   8b090:	b20a      	sxth	r2, r1
   8b092:	b0a9      	sub	sp, #164	; 0xa4
   8b094:	4683      	mov	fp, r0
   8b096:	b19a      	cbz	r2, 8b0c0 <_svfprintf_r+0x40>
   8b098:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8b09c:	b983      	cbnz	r3, 8b0c0 <_svfprintf_r+0x40>
   8b09e:	2140      	movs	r1, #64	; 0x40
   8b0a0:	f000 fcfe 	bl	8baa0 <_malloc_r>
   8b0a4:	f8c9 0000 	str.w	r0, [r9]
   8b0a8:	f8c9 0010 	str.w	r0, [r9, #16]
   8b0ac:	b928      	cbnz	r0, 8b0ba <_svfprintf_r+0x3a>
   8b0ae:	220c      	movs	r2, #12
   8b0b0:	f8cb 2000 	str.w	r2, [fp]
   8b0b4:	f04f 30ff 	mov.w	r0, #4294967295
   8b0b8:	e3da      	b.n	8b870 <_svfprintf_r+0x7f0>
   8b0ba:	2040      	movs	r0, #64	; 0x40
   8b0bc:	f8c9 0014 	str.w	r0, [r9, #20]
   8b0c0:	2100      	movs	r1, #0
   8b0c2:	ad18      	add	r5, sp, #96	; 0x60
   8b0c4:	950b      	str	r5, [sp, #44]	; 0x2c
   8b0c6:	910d      	str	r1, [sp, #52]	; 0x34
   8b0c8:	910c      	str	r1, [sp, #48]	; 0x30
   8b0ca:	9401      	str	r4, [sp, #4]
   8b0cc:	9105      	str	r1, [sp, #20]
   8b0ce:	9104      	str	r1, [sp, #16]
   8b0d0:	46a8      	mov	r8, r5
   8b0d2:	9b01      	ldr	r3, [sp, #4]
   8b0d4:	461c      	mov	r4, r3
   8b0d6:	f813 2b01 	ldrb.w	r2, [r3], #1
   8b0da:	b91a      	cbnz	r2, 8b0e4 <_svfprintf_r+0x64>
   8b0dc:	9801      	ldr	r0, [sp, #4]
   8b0de:	1a25      	subs	r5, r4, r0
   8b0e0:	d103      	bne.n	8b0ea <_svfprintf_r+0x6a>
   8b0e2:	e01d      	b.n	8b120 <_svfprintf_r+0xa0>
   8b0e4:	2a25      	cmp	r2, #37	; 0x25
   8b0e6:	d1f5      	bne.n	8b0d4 <_svfprintf_r+0x54>
   8b0e8:	e7f8      	b.n	8b0dc <_svfprintf_r+0x5c>
   8b0ea:	9a01      	ldr	r2, [sp, #4]
   8b0ec:	990d      	ldr	r1, [sp, #52]	; 0x34
   8b0ee:	e888 0024 	stmia.w	r8, {r2, r5}
   8b0f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8b0f4:	194b      	adds	r3, r1, r5
   8b0f6:	1c50      	adds	r0, r2, #1
   8b0f8:	2807      	cmp	r0, #7
   8b0fa:	930d      	str	r3, [sp, #52]	; 0x34
   8b0fc:	900c      	str	r0, [sp, #48]	; 0x30
   8b0fe:	dc02      	bgt.n	8b106 <_svfprintf_r+0x86>
   8b100:	f108 0808 	add.w	r8, r8, #8
   8b104:	e009      	b.n	8b11a <_svfprintf_r+0x9a>
   8b106:	4658      	mov	r0, fp
   8b108:	4649      	mov	r1, r9
   8b10a:	aa0b      	add	r2, sp, #44	; 0x2c
   8b10c:	f001 f858 	bl	8c1c0 <__ssprint_r>
   8b110:	2800      	cmp	r0, #0
   8b112:	f040 83a2 	bne.w	8b85a <_svfprintf_r+0x7da>
   8b116:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b11a:	9904      	ldr	r1, [sp, #16]
   8b11c:	194b      	adds	r3, r1, r5
   8b11e:	9304      	str	r3, [sp, #16]
   8b120:	7822      	ldrb	r2, [r4, #0]
   8b122:	2a00      	cmp	r2, #0
   8b124:	f000 8392 	beq.w	8b84c <_svfprintf_r+0x7cc>
   8b128:	2200      	movs	r2, #0
   8b12a:	3401      	adds	r4, #1
   8b12c:	9401      	str	r4, [sp, #4]
   8b12e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b132:	f04f 3cff 	mov.w	ip, #4294967295
   8b136:	9203      	str	r2, [sp, #12]
   8b138:	4617      	mov	r7, r2
   8b13a:	9801      	ldr	r0, [sp, #4]
   8b13c:	f810 3b01 	ldrb.w	r3, [r0], #1
   8b140:	9001      	str	r0, [sp, #4]
   8b142:	2b63      	cmp	r3, #99	; 0x63
   8b144:	f000 80b3 	beq.w	8b2ae <_svfprintf_r+0x22e>
   8b148:	dc33      	bgt.n	8b1b2 <_svfprintf_r+0x132>
   8b14a:	2b39      	cmp	r3, #57	; 0x39
   8b14c:	dc1a      	bgt.n	8b184 <_svfprintf_r+0x104>
   8b14e:	2b31      	cmp	r3, #49	; 0x31
   8b150:	f280 8091 	bge.w	8b276 <_svfprintf_r+0x1f6>
   8b154:	2b2b      	cmp	r3, #43	; 0x2b
   8b156:	d101      	bne.n	8b15c <_svfprintf_r+0xdc>
   8b158:	461a      	mov	r2, r3
   8b15a:	e7ee      	b.n	8b13a <_svfprintf_r+0xba>
   8b15c:	dc0a      	bgt.n	8b174 <_svfprintf_r+0xf4>
   8b15e:	2b23      	cmp	r3, #35	; 0x23
   8b160:	d055      	beq.n	8b20e <_svfprintf_r+0x18e>
   8b162:	2b2a      	cmp	r3, #42	; 0x2a
   8b164:	d056      	beq.n	8b214 <_svfprintf_r+0x194>
   8b166:	2b20      	cmp	r3, #32
   8b168:	f040 81f5 	bne.w	8b556 <_svfprintf_r+0x4d6>
   8b16c:	2a00      	cmp	r2, #0
   8b16e:	bf08      	it	eq
   8b170:	2220      	moveq	r2, #32
   8b172:	e7e2      	b.n	8b13a <_svfprintf_r+0xba>
   8b174:	2b2e      	cmp	r3, #46	; 0x2e
   8b176:	d058      	beq.n	8b22a <_svfprintf_r+0x1aa>
   8b178:	2b30      	cmp	r3, #48	; 0x30
   8b17a:	d079      	beq.n	8b270 <_svfprintf_r+0x1f0>
   8b17c:	2b2d      	cmp	r3, #45	; 0x2d
   8b17e:	f040 81ea 	bne.w	8b556 <_svfprintf_r+0x4d6>
   8b182:	e04f      	b.n	8b224 <_svfprintf_r+0x1a4>
   8b184:	2b4f      	cmp	r3, #79	; 0x4f
   8b186:	f000 80de 	beq.w	8b346 <_svfprintf_r+0x2c6>
   8b18a:	dc07      	bgt.n	8b19c <_svfprintf_r+0x11c>
   8b18c:	2b44      	cmp	r3, #68	; 0x44
   8b18e:	f040 81e2 	bne.w	8b556 <_svfprintf_r+0x4d6>
   8b192:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b196:	f047 0710 	orr.w	r7, r7, #16
   8b19a:	e090      	b.n	8b2be <_svfprintf_r+0x23e>
   8b19c:	2b55      	cmp	r3, #85	; 0x55
   8b19e:	f000 811f 	beq.w	8b3e0 <_svfprintf_r+0x360>
   8b1a2:	2b58      	cmp	r3, #88	; 0x58
   8b1a4:	f040 81d7 	bne.w	8b556 <_svfprintf_r+0x4d6>
   8b1a8:	4dae      	ldr	r5, [pc, #696]	; (8b464 <_svfprintf_r+0x3e4>)
   8b1aa:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b1ae:	9505      	str	r5, [sp, #20]
   8b1b0:	e130      	b.n	8b414 <_svfprintf_r+0x394>
   8b1b2:	2b6f      	cmp	r3, #111	; 0x6f
   8b1b4:	f000 80c9 	beq.w	8b34a <_svfprintf_r+0x2ca>
   8b1b8:	dc10      	bgt.n	8b1dc <_svfprintf_r+0x15c>
   8b1ba:	2b69      	cmp	r3, #105	; 0x69
   8b1bc:	d024      	beq.n	8b208 <_svfprintf_r+0x188>
   8b1be:	dc07      	bgt.n	8b1d0 <_svfprintf_r+0x150>
   8b1c0:	2b64      	cmp	r3, #100	; 0x64
   8b1c2:	d021      	beq.n	8b208 <_svfprintf_r+0x188>
   8b1c4:	2b68      	cmp	r3, #104	; 0x68
   8b1c6:	f040 81c6 	bne.w	8b556 <_svfprintf_r+0x4d6>
   8b1ca:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   8b1ce:	e7b4      	b.n	8b13a <_svfprintf_r+0xba>
   8b1d0:	2b6c      	cmp	r3, #108	; 0x6c
   8b1d2:	d05f      	beq.n	8b294 <_svfprintf_r+0x214>
   8b1d4:	2b6e      	cmp	r3, #110	; 0x6e
   8b1d6:	f040 81be 	bne.w	8b556 <_svfprintf_r+0x4d6>
   8b1da:	e096      	b.n	8b30a <_svfprintf_r+0x28a>
   8b1dc:	2b73      	cmp	r3, #115	; 0x73
   8b1de:	f000 80df 	beq.w	8b3a0 <_svfprintf_r+0x320>
   8b1e2:	dc06      	bgt.n	8b1f2 <_svfprintf_r+0x172>
   8b1e4:	2b70      	cmp	r3, #112	; 0x70
   8b1e6:	f000 80cd 	beq.w	8b384 <_svfprintf_r+0x304>
   8b1ea:	2b71      	cmp	r3, #113	; 0x71
   8b1ec:	f040 81b3 	bne.w	8b556 <_svfprintf_r+0x4d6>
   8b1f0:	e05a      	b.n	8b2a8 <_svfprintf_r+0x228>
   8b1f2:	2b75      	cmp	r3, #117	; 0x75
   8b1f4:	f000 80f6 	beq.w	8b3e4 <_svfprintf_r+0x364>
   8b1f8:	2b78      	cmp	r3, #120	; 0x78
   8b1fa:	f040 81ac 	bne.w	8b556 <_svfprintf_r+0x4d6>
   8b1fe:	4d9a      	ldr	r5, [pc, #616]	; (8b468 <_svfprintf_r+0x3e8>)
   8b200:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b204:	9505      	str	r5, [sp, #20]
   8b206:	e105      	b.n	8b414 <_svfprintf_r+0x394>
   8b208:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b20c:	e057      	b.n	8b2be <_svfprintf_r+0x23e>
   8b20e:	f047 0701 	orr.w	r7, r7, #1
   8b212:	e792      	b.n	8b13a <_svfprintf_r+0xba>
   8b214:	1d33      	adds	r3, r6, #4
   8b216:	6836      	ldr	r6, [r6, #0]
   8b218:	2e00      	cmp	r6, #0
   8b21a:	9603      	str	r6, [sp, #12]
   8b21c:	da15      	bge.n	8b24a <_svfprintf_r+0x1ca>
   8b21e:	4270      	negs	r0, r6
   8b220:	9003      	str	r0, [sp, #12]
   8b222:	461e      	mov	r6, r3
   8b224:	f047 0704 	orr.w	r7, r7, #4
   8b228:	e787      	b.n	8b13a <_svfprintf_r+0xba>
   8b22a:	9901      	ldr	r1, [sp, #4]
   8b22c:	f811 3b01 	ldrb.w	r3, [r1], #1
   8b230:	2b2a      	cmp	r3, #42	; 0x2a
   8b232:	9101      	str	r1, [sp, #4]
   8b234:	d10b      	bne.n	8b24e <_svfprintf_r+0x1ce>
   8b236:	f8d6 c000 	ldr.w	ip, [r6]
   8b23a:	1d33      	adds	r3, r6, #4
   8b23c:	f1bc 0f00 	cmp.w	ip, #0
   8b240:	da03      	bge.n	8b24a <_svfprintf_r+0x1ca>
   8b242:	461e      	mov	r6, r3
   8b244:	f04f 3cff 	mov.w	ip, #4294967295
   8b248:	e777      	b.n	8b13a <_svfprintf_r+0xba>
   8b24a:	461e      	mov	r6, r3
   8b24c:	e775      	b.n	8b13a <_svfprintf_r+0xba>
   8b24e:	f04f 0c00 	mov.w	ip, #0
   8b252:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8b256:	2809      	cmp	r0, #9
   8b258:	d807      	bhi.n	8b26a <_svfprintf_r+0x1ea>
   8b25a:	9901      	ldr	r1, [sp, #4]
   8b25c:	230a      	movs	r3, #10
   8b25e:	fb03 0c0c 	mla	ip, r3, ip, r0
   8b262:	f811 3b01 	ldrb.w	r3, [r1], #1
   8b266:	9101      	str	r1, [sp, #4]
   8b268:	e7f3      	b.n	8b252 <_svfprintf_r+0x1d2>
   8b26a:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   8b26e:	e768      	b.n	8b142 <_svfprintf_r+0xc2>
   8b270:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8b274:	e761      	b.n	8b13a <_svfprintf_r+0xba>
   8b276:	9801      	ldr	r0, [sp, #4]
   8b278:	2100      	movs	r1, #0
   8b27a:	3b30      	subs	r3, #48	; 0x30
   8b27c:	240a      	movs	r4, #10
   8b27e:	fb04 3101 	mla	r1, r4, r1, r3
   8b282:	f810 3b01 	ldrb.w	r3, [r0], #1
   8b286:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   8b28a:	2c09      	cmp	r4, #9
   8b28c:	9001      	str	r0, [sp, #4]
   8b28e:	d9f4      	bls.n	8b27a <_svfprintf_r+0x1fa>
   8b290:	9103      	str	r1, [sp, #12]
   8b292:	e756      	b.n	8b142 <_svfprintf_r+0xc2>
   8b294:	9901      	ldr	r1, [sp, #4]
   8b296:	780b      	ldrb	r3, [r1, #0]
   8b298:	2b6c      	cmp	r3, #108	; 0x6c
   8b29a:	d102      	bne.n	8b2a2 <_svfprintf_r+0x222>
   8b29c:	1c48      	adds	r0, r1, #1
   8b29e:	9001      	str	r0, [sp, #4]
   8b2a0:	e002      	b.n	8b2a8 <_svfprintf_r+0x228>
   8b2a2:	f047 0710 	orr.w	r7, r7, #16
   8b2a6:	e748      	b.n	8b13a <_svfprintf_r+0xba>
   8b2a8:	f047 0720 	orr.w	r7, r7, #32
   8b2ac:	e745      	b.n	8b13a <_svfprintf_r+0xba>
   8b2ae:	6832      	ldr	r2, [r6, #0]
   8b2b0:	2500      	movs	r5, #0
   8b2b2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   8b2b6:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8b2ba:	3604      	adds	r6, #4
   8b2bc:	e155      	b.n	8b56a <_svfprintf_r+0x4ea>
   8b2be:	06ba      	lsls	r2, r7, #26
   8b2c0:	d507      	bpl.n	8b2d2 <_svfprintf_r+0x252>
   8b2c2:	3607      	adds	r6, #7
   8b2c4:	f026 0507 	bic.w	r5, r6, #7
   8b2c8:	f105 0608 	add.w	r6, r5, #8
   8b2cc:	e9d5 4500 	ldrd	r4, r5, [r5]
   8b2d0:	e00f      	b.n	8b2f2 <_svfprintf_r+0x272>
   8b2d2:	f017 0f10 	tst.w	r7, #16
   8b2d6:	f106 0104 	add.w	r1, r6, #4
   8b2da:	d001      	beq.n	8b2e0 <_svfprintf_r+0x260>
   8b2dc:	6832      	ldr	r2, [r6, #0]
   8b2de:	e005      	b.n	8b2ec <_svfprintf_r+0x26c>
   8b2e0:	f017 0f40 	tst.w	r7, #64	; 0x40
   8b2e4:	6832      	ldr	r2, [r6, #0]
   8b2e6:	d001      	beq.n	8b2ec <_svfprintf_r+0x26c>
   8b2e8:	b214      	sxth	r4, r2
   8b2ea:	e000      	b.n	8b2ee <_svfprintf_r+0x26e>
   8b2ec:	4614      	mov	r4, r2
   8b2ee:	17e5      	asrs	r5, r4, #31
   8b2f0:	460e      	mov	r6, r1
   8b2f2:	2c00      	cmp	r4, #0
   8b2f4:	f175 0200 	sbcs.w	r2, r5, #0
   8b2f8:	f280 80b8 	bge.w	8b46c <_svfprintf_r+0x3ec>
   8b2fc:	232d      	movs	r3, #45	; 0x2d
   8b2fe:	4264      	negs	r4, r4
   8b300:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8b304:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   8b308:	e0b0      	b.n	8b46c <_svfprintf_r+0x3ec>
   8b30a:	f017 0f20 	tst.w	r7, #32
   8b30e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b312:	f106 0204 	add.w	r2, r6, #4
   8b316:	d005      	beq.n	8b324 <_svfprintf_r+0x2a4>
   8b318:	9c04      	ldr	r4, [sp, #16]
   8b31a:	6835      	ldr	r5, [r6, #0]
   8b31c:	17e0      	asrs	r0, r4, #31
   8b31e:	602c      	str	r4, [r5, #0]
   8b320:	6068      	str	r0, [r5, #4]
   8b322:	e004      	b.n	8b32e <_svfprintf_r+0x2ae>
   8b324:	06fb      	lsls	r3, r7, #27
   8b326:	d504      	bpl.n	8b332 <_svfprintf_r+0x2b2>
   8b328:	6833      	ldr	r3, [r6, #0]
   8b32a:	9904      	ldr	r1, [sp, #16]
   8b32c:	6019      	str	r1, [r3, #0]
   8b32e:	4616      	mov	r6, r2
   8b330:	e6cf      	b.n	8b0d2 <_svfprintf_r+0x52>
   8b332:	6830      	ldr	r0, [r6, #0]
   8b334:	9c04      	ldr	r4, [sp, #16]
   8b336:	f017 0f40 	tst.w	r7, #64	; 0x40
   8b33a:	f106 0604 	add.w	r6, r6, #4
   8b33e:	bf14      	ite	ne
   8b340:	8004      	strhne	r4, [r0, #0]
   8b342:	6004      	streq	r4, [r0, #0]
   8b344:	e6c5      	b.n	8b0d2 <_svfprintf_r+0x52>
   8b346:	f047 0710 	orr.w	r7, r7, #16
   8b34a:	f017 0020 	ands.w	r0, r7, #32
   8b34e:	d008      	beq.n	8b362 <_svfprintf_r+0x2e2>
   8b350:	1df3      	adds	r3, r6, #7
   8b352:	f023 0507 	bic.w	r5, r3, #7
   8b356:	f105 0608 	add.w	r6, r5, #8
   8b35a:	e9d5 4500 	ldrd	r4, r5, [r5]
   8b35e:	2000      	movs	r0, #0
   8b360:	e07c      	b.n	8b45c <_svfprintf_r+0x3dc>
   8b362:	f017 0110 	ands.w	r1, r7, #16
   8b366:	f106 0204 	add.w	r2, r6, #4
   8b36a:	d106      	bne.n	8b37a <_svfprintf_r+0x2fa>
   8b36c:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   8b370:	d003      	beq.n	8b37a <_svfprintf_r+0x2fa>
   8b372:	8834      	ldrh	r4, [r6, #0]
   8b374:	2500      	movs	r5, #0
   8b376:	4616      	mov	r6, r2
   8b378:	e7f1      	b.n	8b35e <_svfprintf_r+0x2de>
   8b37a:	6836      	ldr	r6, [r6, #0]
   8b37c:	2500      	movs	r5, #0
   8b37e:	4634      	mov	r4, r6
   8b380:	4616      	mov	r6, r2
   8b382:	e06b      	b.n	8b45c <_svfprintf_r+0x3dc>
   8b384:	4b38      	ldr	r3, [pc, #224]	; (8b468 <_svfprintf_r+0x3e8>)
   8b386:	2130      	movs	r1, #48	; 0x30
   8b388:	2278      	movs	r2, #120	; 0x78
   8b38a:	6834      	ldr	r4, [r6, #0]
   8b38c:	2500      	movs	r5, #0
   8b38e:	f047 0702 	orr.w	r7, r7, #2
   8b392:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   8b396:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   8b39a:	3604      	adds	r6, #4
   8b39c:	9305      	str	r3, [sp, #20]
   8b39e:	e05c      	b.n	8b45a <_svfprintf_r+0x3da>
   8b3a0:	4631      	mov	r1, r6
   8b3a2:	2500      	movs	r5, #0
   8b3a4:	f8d1 a000 	ldr.w	sl, [r1]
   8b3a8:	3604      	adds	r6, #4
   8b3aa:	45ac      	cmp	ip, r5
   8b3ac:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8b3b0:	4650      	mov	r0, sl
   8b3b2:	db11      	blt.n	8b3d8 <_svfprintf_r+0x358>
   8b3b4:	4662      	mov	r2, ip
   8b3b6:	4629      	mov	r1, r5
   8b3b8:	f8cd c000 	str.w	ip, [sp]
   8b3bc:	f000 fd72 	bl	8bea4 <memchr>
   8b3c0:	f8dd c000 	ldr.w	ip, [sp]
   8b3c4:	2800      	cmp	r0, #0
   8b3c6:	f000 80d4 	beq.w	8b572 <_svfprintf_r+0x4f2>
   8b3ca:	ebca 0400 	rsb	r4, sl, r0
   8b3ce:	4564      	cmp	r4, ip
   8b3d0:	f340 80d1 	ble.w	8b576 <_svfprintf_r+0x4f6>
   8b3d4:	4664      	mov	r4, ip
   8b3d6:	e0ce      	b.n	8b576 <_svfprintf_r+0x4f6>
   8b3d8:	f7ff fd70 	bl	8aebc <strlen>
   8b3dc:	4604      	mov	r4, r0
   8b3de:	e0ca      	b.n	8b576 <_svfprintf_r+0x4f6>
   8b3e0:	f047 0710 	orr.w	r7, r7, #16
   8b3e4:	06bd      	lsls	r5, r7, #26
   8b3e6:	d506      	bpl.n	8b3f6 <_svfprintf_r+0x376>
   8b3e8:	1df0      	adds	r0, r6, #7
   8b3ea:	f020 0407 	bic.w	r4, r0, #7
   8b3ee:	f104 0608 	add.w	r6, r4, #8
   8b3f2:	cc30      	ldmia	r4, {r4, r5}
   8b3f4:	e00c      	b.n	8b410 <_svfprintf_r+0x390>
   8b3f6:	f017 0f10 	tst.w	r7, #16
   8b3fa:	f106 0304 	add.w	r3, r6, #4
   8b3fe:	d103      	bne.n	8b408 <_svfprintf_r+0x388>
   8b400:	067c      	lsls	r4, r7, #25
   8b402:	d501      	bpl.n	8b408 <_svfprintf_r+0x388>
   8b404:	8834      	ldrh	r4, [r6, #0]
   8b406:	e001      	b.n	8b40c <_svfprintf_r+0x38c>
   8b408:	6835      	ldr	r5, [r6, #0]
   8b40a:	462c      	mov	r4, r5
   8b40c:	2500      	movs	r5, #0
   8b40e:	461e      	mov	r6, r3
   8b410:	2001      	movs	r0, #1
   8b412:	e023      	b.n	8b45c <_svfprintf_r+0x3dc>
   8b414:	06b8      	lsls	r0, r7, #26
   8b416:	d507      	bpl.n	8b428 <_svfprintf_r+0x3a8>
   8b418:	1df4      	adds	r4, r6, #7
   8b41a:	f024 0107 	bic.w	r1, r4, #7
   8b41e:	f101 0608 	add.w	r6, r1, #8
   8b422:	e9d1 4500 	ldrd	r4, r5, [r1]
   8b426:	e00c      	b.n	8b442 <_svfprintf_r+0x3c2>
   8b428:	f017 0f10 	tst.w	r7, #16
   8b42c:	f106 0004 	add.w	r0, r6, #4
   8b430:	d103      	bne.n	8b43a <_svfprintf_r+0x3ba>
   8b432:	0679      	lsls	r1, r7, #25
   8b434:	d501      	bpl.n	8b43a <_svfprintf_r+0x3ba>
   8b436:	8834      	ldrh	r4, [r6, #0]
   8b438:	e001      	b.n	8b43e <_svfprintf_r+0x3be>
   8b43a:	6836      	ldr	r6, [r6, #0]
   8b43c:	4634      	mov	r4, r6
   8b43e:	2500      	movs	r5, #0
   8b440:	4606      	mov	r6, r0
   8b442:	07fa      	lsls	r2, r7, #31
   8b444:	d509      	bpl.n	8b45a <_svfprintf_r+0x3da>
   8b446:	ea54 0205 	orrs.w	r2, r4, r5
   8b44a:	d006      	beq.n	8b45a <_svfprintf_r+0x3da>
   8b44c:	2230      	movs	r2, #48	; 0x30
   8b44e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   8b452:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   8b456:	f047 0702 	orr.w	r7, r7, #2
   8b45a:	2002      	movs	r0, #2
   8b45c:	2100      	movs	r1, #0
   8b45e:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   8b462:	e004      	b.n	8b46e <_svfprintf_r+0x3ee>
   8b464:	0008dfb6 	.word	0x0008dfb6
   8b468:	0008dfc7 	.word	0x0008dfc7
   8b46c:	2001      	movs	r0, #1
   8b46e:	f1bc 0f00 	cmp.w	ip, #0
   8b472:	bfa8      	it	ge
   8b474:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   8b478:	ea54 0105 	orrs.w	r1, r4, r5
   8b47c:	d102      	bne.n	8b484 <_svfprintf_r+0x404>
   8b47e:	f1bc 0f00 	cmp.w	ip, #0
   8b482:	d058      	beq.n	8b536 <_svfprintf_r+0x4b6>
   8b484:	2801      	cmp	r0, #1
   8b486:	d01d      	beq.n	8b4c4 <_svfprintf_r+0x444>
   8b488:	2802      	cmp	r0, #2
   8b48a:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8b48e:	d041      	beq.n	8b514 <_svfprintf_r+0x494>
   8b490:	f004 0207 	and.w	r2, r4, #7
   8b494:	08e4      	lsrs	r4, r4, #3
   8b496:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   8b49a:	08e9      	lsrs	r1, r5, #3
   8b49c:	4604      	mov	r4, r0
   8b49e:	460d      	mov	r5, r1
   8b4a0:	3230      	adds	r2, #48	; 0x30
   8b4a2:	ea54 0105 	orrs.w	r1, r4, r5
   8b4a6:	469a      	mov	sl, r3
   8b4a8:	701a      	strb	r2, [r3, #0]
   8b4aa:	f103 33ff 	add.w	r3, r3, #4294967295
   8b4ae:	d1ef      	bne.n	8b490 <_svfprintf_r+0x410>
   8b4b0:	07f8      	lsls	r0, r7, #31
   8b4b2:	4655      	mov	r5, sl
   8b4b4:	d54a      	bpl.n	8b54c <_svfprintf_r+0x4cc>
   8b4b6:	2a30      	cmp	r2, #48	; 0x30
   8b4b8:	d048      	beq.n	8b54c <_svfprintf_r+0x4cc>
   8b4ba:	2230      	movs	r2, #48	; 0x30
   8b4bc:	469a      	mov	sl, r3
   8b4be:	f805 2c01 	strb.w	r2, [r5, #-1]
   8b4c2:	e043      	b.n	8b54c <_svfprintf_r+0x4cc>
   8b4c4:	2d00      	cmp	r5, #0
   8b4c6:	bf08      	it	eq
   8b4c8:	2c0a      	cmpeq	r4, #10
   8b4ca:	d203      	bcs.n	8b4d4 <_svfprintf_r+0x454>
   8b4cc:	3430      	adds	r4, #48	; 0x30
   8b4ce:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   8b4d2:	e036      	b.n	8b542 <_svfprintf_r+0x4c2>
   8b4d4:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8b4d8:	9302      	str	r3, [sp, #8]
   8b4da:	4620      	mov	r0, r4
   8b4dc:	4629      	mov	r1, r5
   8b4de:	220a      	movs	r2, #10
   8b4e0:	2300      	movs	r3, #0
   8b4e2:	f8cd c000 	str.w	ip, [sp]
   8b4e6:	f001 fae5 	bl	8cab4 <__aeabi_uldivmod>
   8b4ea:	9802      	ldr	r0, [sp, #8]
   8b4ec:	3230      	adds	r2, #48	; 0x30
   8b4ee:	f800 2901 	strb.w	r2, [r0], #-1
   8b4f2:	4629      	mov	r1, r5
   8b4f4:	220a      	movs	r2, #10
   8b4f6:	2300      	movs	r3, #0
   8b4f8:	f8dd a008 	ldr.w	sl, [sp, #8]
   8b4fc:	9002      	str	r0, [sp, #8]
   8b4fe:	4620      	mov	r0, r4
   8b500:	f001 fad8 	bl	8cab4 <__aeabi_uldivmod>
   8b504:	4604      	mov	r4, r0
   8b506:	460d      	mov	r5, r1
   8b508:	ea54 0105 	orrs.w	r1, r4, r5
   8b50c:	f8dd c000 	ldr.w	ip, [sp]
   8b510:	d1e3      	bne.n	8b4da <_svfprintf_r+0x45a>
   8b512:	e01b      	b.n	8b54c <_svfprintf_r+0x4cc>
   8b514:	9905      	ldr	r1, [sp, #20]
   8b516:	f004 000f 	and.w	r0, r4, #15
   8b51a:	0924      	lsrs	r4, r4, #4
   8b51c:	5c0a      	ldrb	r2, [r1, r0]
   8b51e:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   8b522:	0929      	lsrs	r1, r5, #4
   8b524:	4604      	mov	r4, r0
   8b526:	460d      	mov	r5, r1
   8b528:	469a      	mov	sl, r3
   8b52a:	f803 2901 	strb.w	r2, [r3], #-1
   8b52e:	ea54 0205 	orrs.w	r2, r4, r5
   8b532:	d1ef      	bne.n	8b514 <_svfprintf_r+0x494>
   8b534:	e00a      	b.n	8b54c <_svfprintf_r+0x4cc>
   8b536:	b938      	cbnz	r0, 8b548 <_svfprintf_r+0x4c8>
   8b538:	07f9      	lsls	r1, r7, #31
   8b53a:	d505      	bpl.n	8b548 <_svfprintf_r+0x4c8>
   8b53c:	2030      	movs	r0, #48	; 0x30
   8b53e:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   8b542:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   8b546:	e001      	b.n	8b54c <_svfprintf_r+0x4cc>
   8b548:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   8b54c:	ad18      	add	r5, sp, #96	; 0x60
   8b54e:	ebca 0405 	rsb	r4, sl, r5
   8b552:	4665      	mov	r5, ip
   8b554:	e00f      	b.n	8b576 <_svfprintf_r+0x4f6>
   8b556:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b55a:	2b00      	cmp	r3, #0
   8b55c:	f000 8176 	beq.w	8b84c <_svfprintf_r+0x7cc>
   8b560:	2500      	movs	r5, #0
   8b562:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   8b566:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8b56a:	2401      	movs	r4, #1
   8b56c:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   8b570:	e001      	b.n	8b576 <_svfprintf_r+0x4f6>
   8b572:	4664      	mov	r4, ip
   8b574:	4605      	mov	r5, r0
   8b576:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8b57a:	42ac      	cmp	r4, r5
   8b57c:	bfac      	ite	ge
   8b57e:	4621      	movge	r1, r4
   8b580:	4629      	movlt	r1, r5
   8b582:	9102      	str	r1, [sp, #8]
   8b584:	b113      	cbz	r3, 8b58c <_svfprintf_r+0x50c>
   8b586:	9802      	ldr	r0, [sp, #8]
   8b588:	1c42      	adds	r2, r0, #1
   8b58a:	9202      	str	r2, [sp, #8]
   8b58c:	f017 0102 	ands.w	r1, r7, #2
   8b590:	9106      	str	r1, [sp, #24]
   8b592:	d002      	beq.n	8b59a <_svfprintf_r+0x51a>
   8b594:	9b02      	ldr	r3, [sp, #8]
   8b596:	1c98      	adds	r0, r3, #2
   8b598:	9002      	str	r0, [sp, #8]
   8b59a:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   8b59e:	9207      	str	r2, [sp, #28]
   8b5a0:	d13c      	bne.n	8b61c <_svfprintf_r+0x59c>
   8b5a2:	9903      	ldr	r1, [sp, #12]
   8b5a4:	9b02      	ldr	r3, [sp, #8]
   8b5a6:	1acb      	subs	r3, r1, r3
   8b5a8:	2b00      	cmp	r3, #0
   8b5aa:	dd37      	ble.n	8b61c <_svfprintf_r+0x59c>
   8b5ac:	48a5      	ldr	r0, [pc, #660]	; (8b844 <_svfprintf_r+0x7c4>)
   8b5ae:	2b10      	cmp	r3, #16
   8b5b0:	f8c8 0000 	str.w	r0, [r8]
   8b5b4:	dd1b      	ble.n	8b5ee <_svfprintf_r+0x56e>
   8b5b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8b5b8:	2110      	movs	r1, #16
   8b5ba:	980d      	ldr	r0, [sp, #52]	; 0x34
   8b5bc:	f8c8 1004 	str.w	r1, [r8, #4]
   8b5c0:	1c51      	adds	r1, r2, #1
   8b5c2:	3010      	adds	r0, #16
   8b5c4:	2907      	cmp	r1, #7
   8b5c6:	900d      	str	r0, [sp, #52]	; 0x34
   8b5c8:	910c      	str	r1, [sp, #48]	; 0x30
   8b5ca:	dc02      	bgt.n	8b5d2 <_svfprintf_r+0x552>
   8b5cc:	f108 0808 	add.w	r8, r8, #8
   8b5d0:	e00b      	b.n	8b5ea <_svfprintf_r+0x56a>
   8b5d2:	4658      	mov	r0, fp
   8b5d4:	4649      	mov	r1, r9
   8b5d6:	aa0b      	add	r2, sp, #44	; 0x2c
   8b5d8:	9300      	str	r3, [sp, #0]
   8b5da:	f000 fdf1 	bl	8c1c0 <__ssprint_r>
   8b5de:	9b00      	ldr	r3, [sp, #0]
   8b5e0:	2800      	cmp	r0, #0
   8b5e2:	f040 813a 	bne.w	8b85a <_svfprintf_r+0x7da>
   8b5e6:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b5ea:	3b10      	subs	r3, #16
   8b5ec:	e7de      	b.n	8b5ac <_svfprintf_r+0x52c>
   8b5ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8b5f0:	f8c8 3004 	str.w	r3, [r8, #4]
   8b5f4:	18d1      	adds	r1, r2, r3
   8b5f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8b5f8:	910d      	str	r1, [sp, #52]	; 0x34
   8b5fa:	1c58      	adds	r0, r3, #1
   8b5fc:	2807      	cmp	r0, #7
   8b5fe:	900c      	str	r0, [sp, #48]	; 0x30
   8b600:	dc02      	bgt.n	8b608 <_svfprintf_r+0x588>
   8b602:	f108 0808 	add.w	r8, r8, #8
   8b606:	e009      	b.n	8b61c <_svfprintf_r+0x59c>
   8b608:	4658      	mov	r0, fp
   8b60a:	4649      	mov	r1, r9
   8b60c:	aa0b      	add	r2, sp, #44	; 0x2c
   8b60e:	f000 fdd7 	bl	8c1c0 <__ssprint_r>
   8b612:	2800      	cmp	r0, #0
   8b614:	f040 8121 	bne.w	8b85a <_svfprintf_r+0x7da>
   8b618:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b61c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   8b620:	b1da      	cbz	r2, 8b65a <_svfprintf_r+0x5da>
   8b622:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   8b626:	f8c8 1000 	str.w	r1, [r8]
   8b62a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8b62c:	2301      	movs	r3, #1
   8b62e:	980d      	ldr	r0, [sp, #52]	; 0x34
   8b630:	f8c8 3004 	str.w	r3, [r8, #4]
   8b634:	1c4b      	adds	r3, r1, #1
   8b636:	1c42      	adds	r2, r0, #1
   8b638:	2b07      	cmp	r3, #7
   8b63a:	920d      	str	r2, [sp, #52]	; 0x34
   8b63c:	930c      	str	r3, [sp, #48]	; 0x30
   8b63e:	dc02      	bgt.n	8b646 <_svfprintf_r+0x5c6>
   8b640:	f108 0808 	add.w	r8, r8, #8
   8b644:	e009      	b.n	8b65a <_svfprintf_r+0x5da>
   8b646:	4658      	mov	r0, fp
   8b648:	4649      	mov	r1, r9
   8b64a:	aa0b      	add	r2, sp, #44	; 0x2c
   8b64c:	f000 fdb8 	bl	8c1c0 <__ssprint_r>
   8b650:	2800      	cmp	r0, #0
   8b652:	f040 8102 	bne.w	8b85a <_svfprintf_r+0x7da>
   8b656:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b65a:	9806      	ldr	r0, [sp, #24]
   8b65c:	b1d0      	cbz	r0, 8b694 <_svfprintf_r+0x614>
   8b65e:	aa0a      	add	r2, sp, #40	; 0x28
   8b660:	f8c8 2000 	str.w	r2, [r8]
   8b664:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8b666:	2102      	movs	r1, #2
   8b668:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8b66a:	f8c8 1004 	str.w	r1, [r8, #4]
   8b66e:	1c51      	adds	r1, r2, #1
   8b670:	1c98      	adds	r0, r3, #2
   8b672:	2907      	cmp	r1, #7
   8b674:	900d      	str	r0, [sp, #52]	; 0x34
   8b676:	910c      	str	r1, [sp, #48]	; 0x30
   8b678:	dc02      	bgt.n	8b680 <_svfprintf_r+0x600>
   8b67a:	f108 0808 	add.w	r8, r8, #8
   8b67e:	e009      	b.n	8b694 <_svfprintf_r+0x614>
   8b680:	4658      	mov	r0, fp
   8b682:	4649      	mov	r1, r9
   8b684:	aa0b      	add	r2, sp, #44	; 0x2c
   8b686:	f000 fd9b 	bl	8c1c0 <__ssprint_r>
   8b68a:	2800      	cmp	r0, #0
   8b68c:	f040 80e5 	bne.w	8b85a <_svfprintf_r+0x7da>
   8b690:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b694:	9b07      	ldr	r3, [sp, #28]
   8b696:	2b80      	cmp	r3, #128	; 0x80
   8b698:	d13c      	bne.n	8b714 <_svfprintf_r+0x694>
   8b69a:	9803      	ldr	r0, [sp, #12]
   8b69c:	9a02      	ldr	r2, [sp, #8]
   8b69e:	1a83      	subs	r3, r0, r2
   8b6a0:	2b00      	cmp	r3, #0
   8b6a2:	dd37      	ble.n	8b714 <_svfprintf_r+0x694>
   8b6a4:	4968      	ldr	r1, [pc, #416]	; (8b848 <_svfprintf_r+0x7c8>)
   8b6a6:	2b10      	cmp	r3, #16
   8b6a8:	f8c8 1000 	str.w	r1, [r8]
   8b6ac:	dd1b      	ble.n	8b6e6 <_svfprintf_r+0x666>
   8b6ae:	980c      	ldr	r0, [sp, #48]	; 0x30
   8b6b0:	2210      	movs	r2, #16
   8b6b2:	990d      	ldr	r1, [sp, #52]	; 0x34
   8b6b4:	f8c8 2004 	str.w	r2, [r8, #4]
   8b6b8:	1c42      	adds	r2, r0, #1
   8b6ba:	3110      	adds	r1, #16
   8b6bc:	2a07      	cmp	r2, #7
   8b6be:	910d      	str	r1, [sp, #52]	; 0x34
   8b6c0:	920c      	str	r2, [sp, #48]	; 0x30
   8b6c2:	dc02      	bgt.n	8b6ca <_svfprintf_r+0x64a>
   8b6c4:	f108 0808 	add.w	r8, r8, #8
   8b6c8:	e00b      	b.n	8b6e2 <_svfprintf_r+0x662>
   8b6ca:	4658      	mov	r0, fp
   8b6cc:	4649      	mov	r1, r9
   8b6ce:	aa0b      	add	r2, sp, #44	; 0x2c
   8b6d0:	9300      	str	r3, [sp, #0]
   8b6d2:	f000 fd75 	bl	8c1c0 <__ssprint_r>
   8b6d6:	9b00      	ldr	r3, [sp, #0]
   8b6d8:	2800      	cmp	r0, #0
   8b6da:	f040 80be 	bne.w	8b85a <_svfprintf_r+0x7da>
   8b6de:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b6e2:	3b10      	subs	r3, #16
   8b6e4:	e7de      	b.n	8b6a4 <_svfprintf_r+0x624>
   8b6e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8b6e8:	980d      	ldr	r0, [sp, #52]	; 0x34
   8b6ea:	1c51      	adds	r1, r2, #1
   8b6ec:	f8c8 3004 	str.w	r3, [r8, #4]
   8b6f0:	2907      	cmp	r1, #7
   8b6f2:	4403      	add	r3, r0
   8b6f4:	930d      	str	r3, [sp, #52]	; 0x34
   8b6f6:	910c      	str	r1, [sp, #48]	; 0x30
   8b6f8:	dc02      	bgt.n	8b700 <_svfprintf_r+0x680>
   8b6fa:	f108 0808 	add.w	r8, r8, #8
   8b6fe:	e009      	b.n	8b714 <_svfprintf_r+0x694>
   8b700:	4658      	mov	r0, fp
   8b702:	4649      	mov	r1, r9
   8b704:	aa0b      	add	r2, sp, #44	; 0x2c
   8b706:	f000 fd5b 	bl	8c1c0 <__ssprint_r>
   8b70a:	2800      	cmp	r0, #0
   8b70c:	f040 80a5 	bne.w	8b85a <_svfprintf_r+0x7da>
   8b710:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b714:	1b2d      	subs	r5, r5, r4
   8b716:	2d00      	cmp	r5, #0
   8b718:	dd34      	ble.n	8b784 <_svfprintf_r+0x704>
   8b71a:	484b      	ldr	r0, [pc, #300]	; (8b848 <_svfprintf_r+0x7c8>)
   8b71c:	2d10      	cmp	r5, #16
   8b71e:	f8c8 0000 	str.w	r0, [r8]
   8b722:	dd19      	ble.n	8b758 <_svfprintf_r+0x6d8>
   8b724:	980c      	ldr	r0, [sp, #48]	; 0x30
   8b726:	990d      	ldr	r1, [sp, #52]	; 0x34
   8b728:	1c43      	adds	r3, r0, #1
   8b72a:	2210      	movs	r2, #16
   8b72c:	3110      	adds	r1, #16
   8b72e:	2b07      	cmp	r3, #7
   8b730:	f8c8 2004 	str.w	r2, [r8, #4]
   8b734:	910d      	str	r1, [sp, #52]	; 0x34
   8b736:	930c      	str	r3, [sp, #48]	; 0x30
   8b738:	dc02      	bgt.n	8b740 <_svfprintf_r+0x6c0>
   8b73a:	f108 0808 	add.w	r8, r8, #8
   8b73e:	e009      	b.n	8b754 <_svfprintf_r+0x6d4>
   8b740:	4658      	mov	r0, fp
   8b742:	4649      	mov	r1, r9
   8b744:	aa0b      	add	r2, sp, #44	; 0x2c
   8b746:	f000 fd3b 	bl	8c1c0 <__ssprint_r>
   8b74a:	2800      	cmp	r0, #0
   8b74c:	f040 8085 	bne.w	8b85a <_svfprintf_r+0x7da>
   8b750:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b754:	3d10      	subs	r5, #16
   8b756:	e7e0      	b.n	8b71a <_svfprintf_r+0x69a>
   8b758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8b75a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8b75c:	1c51      	adds	r1, r2, #1
   8b75e:	f8c8 5004 	str.w	r5, [r8, #4]
   8b762:	2907      	cmp	r1, #7
   8b764:	441d      	add	r5, r3
   8b766:	950d      	str	r5, [sp, #52]	; 0x34
   8b768:	910c      	str	r1, [sp, #48]	; 0x30
   8b76a:	dc02      	bgt.n	8b772 <_svfprintf_r+0x6f2>
   8b76c:	f108 0808 	add.w	r8, r8, #8
   8b770:	e008      	b.n	8b784 <_svfprintf_r+0x704>
   8b772:	4658      	mov	r0, fp
   8b774:	4649      	mov	r1, r9
   8b776:	aa0b      	add	r2, sp, #44	; 0x2c
   8b778:	f000 fd22 	bl	8c1c0 <__ssprint_r>
   8b77c:	2800      	cmp	r0, #0
   8b77e:	d16c      	bne.n	8b85a <_svfprintf_r+0x7da>
   8b780:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b784:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8b786:	980d      	ldr	r0, [sp, #52]	; 0x34
   8b788:	1c5a      	adds	r2, r3, #1
   8b78a:	f8c8 4004 	str.w	r4, [r8, #4]
   8b78e:	2a07      	cmp	r2, #7
   8b790:	4404      	add	r4, r0
   8b792:	f8c8 a000 	str.w	sl, [r8]
   8b796:	940d      	str	r4, [sp, #52]	; 0x34
   8b798:	920c      	str	r2, [sp, #48]	; 0x30
   8b79a:	dc02      	bgt.n	8b7a2 <_svfprintf_r+0x722>
   8b79c:	f108 0308 	add.w	r3, r8, #8
   8b7a0:	e007      	b.n	8b7b2 <_svfprintf_r+0x732>
   8b7a2:	4658      	mov	r0, fp
   8b7a4:	4649      	mov	r1, r9
   8b7a6:	aa0b      	add	r2, sp, #44	; 0x2c
   8b7a8:	f000 fd0a 	bl	8c1c0 <__ssprint_r>
   8b7ac:	2800      	cmp	r0, #0
   8b7ae:	d154      	bne.n	8b85a <_svfprintf_r+0x7da>
   8b7b0:	ab18      	add	r3, sp, #96	; 0x60
   8b7b2:	077a      	lsls	r2, r7, #29
   8b7b4:	d40b      	bmi.n	8b7ce <_svfprintf_r+0x74e>
   8b7b6:	9804      	ldr	r0, [sp, #16]
   8b7b8:	9b02      	ldr	r3, [sp, #8]
   8b7ba:	9a03      	ldr	r2, [sp, #12]
   8b7bc:	990d      	ldr	r1, [sp, #52]	; 0x34
   8b7be:	4293      	cmp	r3, r2
   8b7c0:	bfac      	ite	ge
   8b7c2:	18c0      	addge	r0, r0, r3
   8b7c4:	1880      	addlt	r0, r0, r2
   8b7c6:	9004      	str	r0, [sp, #16]
   8b7c8:	2900      	cmp	r1, #0
   8b7ca:	d036      	beq.n	8b83a <_svfprintf_r+0x7ba>
   8b7cc:	e02f      	b.n	8b82e <_svfprintf_r+0x7ae>
   8b7ce:	9c03      	ldr	r4, [sp, #12]
   8b7d0:	9902      	ldr	r1, [sp, #8]
   8b7d2:	1a64      	subs	r4, r4, r1
   8b7d4:	2c00      	cmp	r4, #0
   8b7d6:	ddee      	ble.n	8b7b6 <_svfprintf_r+0x736>
   8b7d8:	481a      	ldr	r0, [pc, #104]	; (8b844 <_svfprintf_r+0x7c4>)
   8b7da:	2c10      	cmp	r4, #16
   8b7dc:	6018      	str	r0, [r3, #0]
   8b7de:	dd15      	ble.n	8b80c <_svfprintf_r+0x78c>
   8b7e0:	990c      	ldr	r1, [sp, #48]	; 0x30
   8b7e2:	2010      	movs	r0, #16
   8b7e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8b7e6:	6058      	str	r0, [r3, #4]
   8b7e8:	1c48      	adds	r0, r1, #1
   8b7ea:	3210      	adds	r2, #16
   8b7ec:	2807      	cmp	r0, #7
   8b7ee:	920d      	str	r2, [sp, #52]	; 0x34
   8b7f0:	900c      	str	r0, [sp, #48]	; 0x30
   8b7f2:	dc01      	bgt.n	8b7f8 <_svfprintf_r+0x778>
   8b7f4:	3308      	adds	r3, #8
   8b7f6:	e007      	b.n	8b808 <_svfprintf_r+0x788>
   8b7f8:	4658      	mov	r0, fp
   8b7fa:	4649      	mov	r1, r9
   8b7fc:	aa0b      	add	r2, sp, #44	; 0x2c
   8b7fe:	f000 fcdf 	bl	8c1c0 <__ssprint_r>
   8b802:	2800      	cmp	r0, #0
   8b804:	d129      	bne.n	8b85a <_svfprintf_r+0x7da>
   8b806:	ab18      	add	r3, sp, #96	; 0x60
   8b808:	3c10      	subs	r4, #16
   8b80a:	e7e5      	b.n	8b7d8 <_svfprintf_r+0x758>
   8b80c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8b80e:	605c      	str	r4, [r3, #4]
   8b810:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8b812:	1c51      	adds	r1, r2, #1
   8b814:	191c      	adds	r4, r3, r4
   8b816:	2907      	cmp	r1, #7
   8b818:	940d      	str	r4, [sp, #52]	; 0x34
   8b81a:	910c      	str	r1, [sp, #48]	; 0x30
   8b81c:	ddcb      	ble.n	8b7b6 <_svfprintf_r+0x736>
   8b81e:	4658      	mov	r0, fp
   8b820:	4649      	mov	r1, r9
   8b822:	aa0b      	add	r2, sp, #44	; 0x2c
   8b824:	f000 fccc 	bl	8c1c0 <__ssprint_r>
   8b828:	2800      	cmp	r0, #0
   8b82a:	d0c4      	beq.n	8b7b6 <_svfprintf_r+0x736>
   8b82c:	e015      	b.n	8b85a <_svfprintf_r+0x7da>
   8b82e:	4658      	mov	r0, fp
   8b830:	4649      	mov	r1, r9
   8b832:	aa0b      	add	r2, sp, #44	; 0x2c
   8b834:	f000 fcc4 	bl	8c1c0 <__ssprint_r>
   8b838:	b978      	cbnz	r0, 8b85a <_svfprintf_r+0x7da>
   8b83a:	2500      	movs	r5, #0
   8b83c:	950c      	str	r5, [sp, #48]	; 0x30
   8b83e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b842:	e446      	b.n	8b0d2 <_svfprintf_r+0x52>
   8b844:	0008df96 	.word	0x0008df96
   8b848:	0008dfa6 	.word	0x0008dfa6
   8b84c:	980d      	ldr	r0, [sp, #52]	; 0x34
   8b84e:	b120      	cbz	r0, 8b85a <_svfprintf_r+0x7da>
   8b850:	4658      	mov	r0, fp
   8b852:	4649      	mov	r1, r9
   8b854:	aa0b      	add	r2, sp, #44	; 0x2c
   8b856:	f000 fcb3 	bl	8c1c0 <__ssprint_r>
   8b85a:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   8b85e:	9b04      	ldr	r3, [sp, #16]
   8b860:	f002 0140 	and.w	r1, r2, #64	; 0x40
   8b864:	b208      	sxth	r0, r1
   8b866:	2800      	cmp	r0, #0
   8b868:	bf18      	it	ne
   8b86a:	f04f 33ff 	movne.w	r3, #4294967295
   8b86e:	4618      	mov	r0, r3
   8b870:	b029      	add	sp, #164	; 0xa4
   8b872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b876:	bf00      	nop

0008b878 <register_fini>:
   8b878:	4b02      	ldr	r3, [pc, #8]	; (8b884 <register_fini+0xc>)
   8b87a:	b113      	cbz	r3, 8b882 <register_fini+0xa>
   8b87c:	4802      	ldr	r0, [pc, #8]	; (8b888 <register_fini+0x10>)
   8b87e:	f000 b805 	b.w	8b88c <atexit>
   8b882:	4770      	bx	lr
   8b884:	00000000 	.word	0x00000000
   8b888:	0008ad39 	.word	0x0008ad39

0008b88c <atexit>:
   8b88c:	4601      	mov	r1, r0
   8b88e:	2000      	movs	r0, #0
   8b890:	4602      	mov	r2, r0
   8b892:	4603      	mov	r3, r0
   8b894:	f7ff ba02 	b.w	8ac9c <__register_exitproc>

0008b898 <_malloc_trim_r>:
   8b898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b89a:	4d23      	ldr	r5, [pc, #140]	; (8b928 <_malloc_trim_r+0x90>)
   8b89c:	460e      	mov	r6, r1
   8b89e:	4604      	mov	r4, r0
   8b8a0:	f000 fb0e 	bl	8bec0 <__malloc_lock>
   8b8a4:	68ab      	ldr	r3, [r5, #8]
   8b8a6:	685f      	ldr	r7, [r3, #4]
   8b8a8:	f027 0703 	bic.w	r7, r7, #3
   8b8ac:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
   8b8b0:	1b81      	subs	r1, r0, r6
   8b8b2:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   8b8b6:	f022 060f 	bic.w	r6, r2, #15
   8b8ba:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   8b8be:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   8b8c2:	da04      	bge.n	8b8ce <_malloc_trim_r+0x36>
   8b8c4:	4620      	mov	r0, r4
   8b8c6:	f000 fafc 	bl	8bec2 <__malloc_unlock>
   8b8ca:	2000      	movs	r0, #0
   8b8cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b8ce:	2100      	movs	r1, #0
   8b8d0:	4620      	mov	r0, r4
   8b8d2:	f000 fc65 	bl	8c1a0 <_sbrk_r>
   8b8d6:	68ab      	ldr	r3, [r5, #8]
   8b8d8:	19d9      	adds	r1, r3, r7
   8b8da:	4288      	cmp	r0, r1
   8b8dc:	d1f2      	bne.n	8b8c4 <_malloc_trim_r+0x2c>
   8b8de:	4271      	negs	r1, r6
   8b8e0:	4620      	mov	r0, r4
   8b8e2:	f000 fc5d 	bl	8c1a0 <_sbrk_r>
   8b8e6:	3001      	adds	r0, #1
   8b8e8:	d110      	bne.n	8b90c <_malloc_trim_r+0x74>
   8b8ea:	2100      	movs	r1, #0
   8b8ec:	4620      	mov	r0, r4
   8b8ee:	f000 fc57 	bl	8c1a0 <_sbrk_r>
   8b8f2:	68ab      	ldr	r3, [r5, #8]
   8b8f4:	1ac2      	subs	r2, r0, r3
   8b8f6:	2a0f      	cmp	r2, #15
   8b8f8:	dde4      	ble.n	8b8c4 <_malloc_trim_r+0x2c>
   8b8fa:	490c      	ldr	r1, [pc, #48]	; (8b92c <_malloc_trim_r+0x94>)
   8b8fc:	f042 0201 	orr.w	r2, r2, #1
   8b900:	6809      	ldr	r1, [r1, #0]
   8b902:	605a      	str	r2, [r3, #4]
   8b904:	1a40      	subs	r0, r0, r1
   8b906:	490a      	ldr	r1, [pc, #40]	; (8b930 <_malloc_trim_r+0x98>)
   8b908:	6008      	str	r0, [r1, #0]
   8b90a:	e7db      	b.n	8b8c4 <_malloc_trim_r+0x2c>
   8b90c:	4b08      	ldr	r3, [pc, #32]	; (8b930 <_malloc_trim_r+0x98>)
   8b90e:	68a8      	ldr	r0, [r5, #8]
   8b910:	681a      	ldr	r2, [r3, #0]
   8b912:	1bbf      	subs	r7, r7, r6
   8b914:	f047 0701 	orr.w	r7, r7, #1
   8b918:	6047      	str	r7, [r0, #4]
   8b91a:	1b96      	subs	r6, r2, r6
   8b91c:	4620      	mov	r0, r4
   8b91e:	601e      	str	r6, [r3, #0]
   8b920:	f000 facf 	bl	8bec2 <__malloc_unlock>
   8b924:	2001      	movs	r0, #1
   8b926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b928:	200706e0 	.word	0x200706e0
   8b92c:	20070ae8 	.word	0x20070ae8
   8b930:	2007166c 	.word	0x2007166c

0008b934 <_free_r>:
   8b934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b936:	4606      	mov	r6, r0
   8b938:	460d      	mov	r5, r1
   8b93a:	2900      	cmp	r1, #0
   8b93c:	f000 80a6 	beq.w	8ba8c <_free_r+0x158>
   8b940:	f000 fabe 	bl	8bec0 <__malloc_lock>
   8b944:	f855 cc04 	ldr.w	ip, [r5, #-4]
   8b948:	4f51      	ldr	r7, [pc, #324]	; (8ba90 <_free_r+0x15c>)
   8b94a:	f1a5 0308 	sub.w	r3, r5, #8
   8b94e:	f02c 0201 	bic.w	r2, ip, #1
   8b952:	189c      	adds	r4, r3, r2
   8b954:	68b9      	ldr	r1, [r7, #8]
   8b956:	6860      	ldr	r0, [r4, #4]
   8b958:	428c      	cmp	r4, r1
   8b95a:	f020 0003 	bic.w	r0, r0, #3
   8b95e:	f00c 0101 	and.w	r1, ip, #1
   8b962:	d11c      	bne.n	8b99e <_free_r+0x6a>
   8b964:	1882      	adds	r2, r0, r2
   8b966:	b939      	cbnz	r1, 8b978 <_free_r+0x44>
   8b968:	f855 1c08 	ldr.w	r1, [r5, #-8]
   8b96c:	1a5b      	subs	r3, r3, r1
   8b96e:	6898      	ldr	r0, [r3, #8]
   8b970:	1852      	adds	r2, r2, r1
   8b972:	68d9      	ldr	r1, [r3, #12]
   8b974:	60c1      	str	r1, [r0, #12]
   8b976:	6088      	str	r0, [r1, #8]
   8b978:	4845      	ldr	r0, [pc, #276]	; (8ba90 <_free_r+0x15c>)
   8b97a:	f042 0101 	orr.w	r1, r2, #1
   8b97e:	6059      	str	r1, [r3, #4]
   8b980:	6083      	str	r3, [r0, #8]
   8b982:	4b44      	ldr	r3, [pc, #272]	; (8ba94 <_free_r+0x160>)
   8b984:	6819      	ldr	r1, [r3, #0]
   8b986:	428a      	cmp	r2, r1
   8b988:	d304      	bcc.n	8b994 <_free_r+0x60>
   8b98a:	4a43      	ldr	r2, [pc, #268]	; (8ba98 <_free_r+0x164>)
   8b98c:	4630      	mov	r0, r6
   8b98e:	6811      	ldr	r1, [r2, #0]
   8b990:	f7ff ff82 	bl	8b898 <_malloc_trim_r>
   8b994:	4630      	mov	r0, r6
   8b996:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8b99a:	f000 ba92 	b.w	8bec2 <__malloc_unlock>
   8b99e:	6060      	str	r0, [r4, #4]
   8b9a0:	b959      	cbnz	r1, 8b9ba <_free_r+0x86>
   8b9a2:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8b9a6:	3708      	adds	r7, #8
   8b9a8:	1b5b      	subs	r3, r3, r5
   8b9aa:	1952      	adds	r2, r2, r5
   8b9ac:	689d      	ldr	r5, [r3, #8]
   8b9ae:	42bd      	cmp	r5, r7
   8b9b0:	d005      	beq.n	8b9be <_free_r+0x8a>
   8b9b2:	68df      	ldr	r7, [r3, #12]
   8b9b4:	60ef      	str	r7, [r5, #12]
   8b9b6:	60bd      	str	r5, [r7, #8]
   8b9b8:	e002      	b.n	8b9c0 <_free_r+0x8c>
   8b9ba:	2100      	movs	r1, #0
   8b9bc:	e000      	b.n	8b9c0 <_free_r+0x8c>
   8b9be:	2101      	movs	r1, #1
   8b9c0:	1825      	adds	r5, r4, r0
   8b9c2:	686d      	ldr	r5, [r5, #4]
   8b9c4:	f015 0f01 	tst.w	r5, #1
   8b9c8:	d10f      	bne.n	8b9ea <_free_r+0xb6>
   8b9ca:	1812      	adds	r2, r2, r0
   8b9cc:	b949      	cbnz	r1, 8b9e2 <_free_r+0xae>
   8b9ce:	68a0      	ldr	r0, [r4, #8]
   8b9d0:	4d32      	ldr	r5, [pc, #200]	; (8ba9c <_free_r+0x168>)
   8b9d2:	42a8      	cmp	r0, r5
   8b9d4:	d105      	bne.n	8b9e2 <_free_r+0xae>
   8b9d6:	60eb      	str	r3, [r5, #12]
   8b9d8:	60ab      	str	r3, [r5, #8]
   8b9da:	60d8      	str	r0, [r3, #12]
   8b9dc:	6098      	str	r0, [r3, #8]
   8b9de:	2101      	movs	r1, #1
   8b9e0:	e003      	b.n	8b9ea <_free_r+0xb6>
   8b9e2:	68e0      	ldr	r0, [r4, #12]
   8b9e4:	68a4      	ldr	r4, [r4, #8]
   8b9e6:	60e0      	str	r0, [r4, #12]
   8b9e8:	6084      	str	r4, [r0, #8]
   8b9ea:	f042 0001 	orr.w	r0, r2, #1
   8b9ee:	6058      	str	r0, [r3, #4]
   8b9f0:	509a      	str	r2, [r3, r2]
   8b9f2:	2900      	cmp	r1, #0
   8b9f4:	d1ce      	bne.n	8b994 <_free_r+0x60>
   8b9f6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8b9fa:	d20c      	bcs.n	8ba16 <_free_r+0xe2>
   8b9fc:	08d2      	lsrs	r2, r2, #3
   8b9fe:	1090      	asrs	r0, r2, #2
   8ba00:	2401      	movs	r4, #1
   8ba02:	fa04 f400 	lsl.w	r4, r4, r0
   8ba06:	4922      	ldr	r1, [pc, #136]	; (8ba90 <_free_r+0x15c>)
   8ba08:	6848      	ldr	r0, [r1, #4]
   8ba0a:	4320      	orrs	r0, r4
   8ba0c:	6048      	str	r0, [r1, #4]
   8ba0e:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   8ba12:	6881      	ldr	r1, [r0, #8]
   8ba14:	e035      	b.n	8ba82 <_free_r+0x14e>
   8ba16:	0a54      	lsrs	r4, r2, #9
   8ba18:	2c04      	cmp	r4, #4
   8ba1a:	d802      	bhi.n	8ba22 <_free_r+0xee>
   8ba1c:	0994      	lsrs	r4, r2, #6
   8ba1e:	3438      	adds	r4, #56	; 0x38
   8ba20:	e016      	b.n	8ba50 <_free_r+0x11c>
   8ba22:	2c14      	cmp	r4, #20
   8ba24:	d801      	bhi.n	8ba2a <_free_r+0xf6>
   8ba26:	345b      	adds	r4, #91	; 0x5b
   8ba28:	e012      	b.n	8ba50 <_free_r+0x11c>
   8ba2a:	2c54      	cmp	r4, #84	; 0x54
   8ba2c:	d802      	bhi.n	8ba34 <_free_r+0x100>
   8ba2e:	0b14      	lsrs	r4, r2, #12
   8ba30:	346e      	adds	r4, #110	; 0x6e
   8ba32:	e00d      	b.n	8ba50 <_free_r+0x11c>
   8ba34:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
   8ba38:	d802      	bhi.n	8ba40 <_free_r+0x10c>
   8ba3a:	0bd4      	lsrs	r4, r2, #15
   8ba3c:	3477      	adds	r4, #119	; 0x77
   8ba3e:	e007      	b.n	8ba50 <_free_r+0x11c>
   8ba40:	f240 5554 	movw	r5, #1364	; 0x554
   8ba44:	42ac      	cmp	r4, r5
   8ba46:	d802      	bhi.n	8ba4e <_free_r+0x11a>
   8ba48:	0c94      	lsrs	r4, r2, #18
   8ba4a:	347c      	adds	r4, #124	; 0x7c
   8ba4c:	e000      	b.n	8ba50 <_free_r+0x11c>
   8ba4e:	247e      	movs	r4, #126	; 0x7e
   8ba50:	4d0f      	ldr	r5, [pc, #60]	; (8ba90 <_free_r+0x15c>)
   8ba52:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   8ba56:	6881      	ldr	r1, [r0, #8]
   8ba58:	4281      	cmp	r1, r0
   8ba5a:	d10c      	bne.n	8ba76 <_free_r+0x142>
   8ba5c:	2201      	movs	r2, #1
   8ba5e:	10a4      	asrs	r4, r4, #2
   8ba60:	fa02 f404 	lsl.w	r4, r2, r4
   8ba64:	6868      	ldr	r0, [r5, #4]
   8ba66:	ea44 0200 	orr.w	r2, r4, r0
   8ba6a:	606a      	str	r2, [r5, #4]
   8ba6c:	4608      	mov	r0, r1
   8ba6e:	e008      	b.n	8ba82 <_free_r+0x14e>
   8ba70:	6889      	ldr	r1, [r1, #8]
   8ba72:	4281      	cmp	r1, r0
   8ba74:	d004      	beq.n	8ba80 <_free_r+0x14c>
   8ba76:	684c      	ldr	r4, [r1, #4]
   8ba78:	f024 0403 	bic.w	r4, r4, #3
   8ba7c:	42a2      	cmp	r2, r4
   8ba7e:	d3f7      	bcc.n	8ba70 <_free_r+0x13c>
   8ba80:	68c8      	ldr	r0, [r1, #12]
   8ba82:	60d8      	str	r0, [r3, #12]
   8ba84:	6099      	str	r1, [r3, #8]
   8ba86:	6083      	str	r3, [r0, #8]
   8ba88:	60cb      	str	r3, [r1, #12]
   8ba8a:	e783      	b.n	8b994 <_free_r+0x60>
   8ba8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ba8e:	bf00      	nop
   8ba90:	200706e0 	.word	0x200706e0
   8ba94:	20070aec 	.word	0x20070aec
   8ba98:	20071668 	.word	0x20071668
   8ba9c:	200706e8 	.word	0x200706e8

0008baa0 <_malloc_r>:
   8baa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8baa4:	f101 040b 	add.w	r4, r1, #11
   8baa8:	2c16      	cmp	r4, #22
   8baaa:	4606      	mov	r6, r0
   8baac:	d903      	bls.n	8bab6 <_malloc_r+0x16>
   8baae:	f034 0407 	bics.w	r4, r4, #7
   8bab2:	d501      	bpl.n	8bab8 <_malloc_r+0x18>
   8bab4:	e002      	b.n	8babc <_malloc_r+0x1c>
   8bab6:	2410      	movs	r4, #16
   8bab8:	428c      	cmp	r4, r1
   8baba:	d202      	bcs.n	8bac2 <_malloc_r+0x22>
   8babc:	250c      	movs	r5, #12
   8babe:	6035      	str	r5, [r6, #0]
   8bac0:	e1d9      	b.n	8be76 <_malloc_r+0x3d6>
   8bac2:	4630      	mov	r0, r6
   8bac4:	f000 f9fc 	bl	8bec0 <__malloc_lock>
   8bac8:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   8bacc:	d214      	bcs.n	8baf8 <_malloc_r+0x58>
   8bace:	4da0      	ldr	r5, [pc, #640]	; (8bd50 <_malloc_r+0x2b0>)
   8bad0:	08e1      	lsrs	r1, r4, #3
   8bad2:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   8bad6:	68c5      	ldr	r5, [r0, #12]
   8bad8:	4285      	cmp	r5, r0
   8bada:	d105      	bne.n	8bae8 <_malloc_r+0x48>
   8badc:	f105 0308 	add.w	r3, r5, #8
   8bae0:	696d      	ldr	r5, [r5, #20]
   8bae2:	1c8a      	adds	r2, r1, #2
   8bae4:	429d      	cmp	r5, r3
   8bae6:	d044      	beq.n	8bb72 <_malloc_r+0xd2>
   8bae8:	68e8      	ldr	r0, [r5, #12]
   8baea:	68a9      	ldr	r1, [r5, #8]
   8baec:	686a      	ldr	r2, [r5, #4]
   8baee:	60c8      	str	r0, [r1, #12]
   8baf0:	f022 0303 	bic.w	r3, r2, #3
   8baf4:	6081      	str	r1, [r0, #8]
   8baf6:	e059      	b.n	8bbac <_malloc_r+0x10c>
   8baf8:	0a62      	lsrs	r2, r4, #9
   8bafa:	d101      	bne.n	8bb00 <_malloc_r+0x60>
   8bafc:	08e2      	lsrs	r2, r4, #3
   8bafe:	e01b      	b.n	8bb38 <_malloc_r+0x98>
   8bb00:	2a04      	cmp	r2, #4
   8bb02:	d802      	bhi.n	8bb0a <_malloc_r+0x6a>
   8bb04:	09a2      	lsrs	r2, r4, #6
   8bb06:	3238      	adds	r2, #56	; 0x38
   8bb08:	e016      	b.n	8bb38 <_malloc_r+0x98>
   8bb0a:	2a14      	cmp	r2, #20
   8bb0c:	d801      	bhi.n	8bb12 <_malloc_r+0x72>
   8bb0e:	325b      	adds	r2, #91	; 0x5b
   8bb10:	e012      	b.n	8bb38 <_malloc_r+0x98>
   8bb12:	2a54      	cmp	r2, #84	; 0x54
   8bb14:	d802      	bhi.n	8bb1c <_malloc_r+0x7c>
   8bb16:	0b22      	lsrs	r2, r4, #12
   8bb18:	326e      	adds	r2, #110	; 0x6e
   8bb1a:	e00d      	b.n	8bb38 <_malloc_r+0x98>
   8bb1c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8bb20:	d802      	bhi.n	8bb28 <_malloc_r+0x88>
   8bb22:	0be2      	lsrs	r2, r4, #15
   8bb24:	3277      	adds	r2, #119	; 0x77
   8bb26:	e007      	b.n	8bb38 <_malloc_r+0x98>
   8bb28:	f240 5354 	movw	r3, #1364	; 0x554
   8bb2c:	429a      	cmp	r2, r3
   8bb2e:	d802      	bhi.n	8bb36 <_malloc_r+0x96>
   8bb30:	0ca2      	lsrs	r2, r4, #18
   8bb32:	327c      	adds	r2, #124	; 0x7c
   8bb34:	e000      	b.n	8bb38 <_malloc_r+0x98>
   8bb36:	227e      	movs	r2, #126	; 0x7e
   8bb38:	4885      	ldr	r0, [pc, #532]	; (8bd50 <_malloc_r+0x2b0>)
   8bb3a:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
   8bb3e:	68dd      	ldr	r5, [r3, #12]
   8bb40:	429d      	cmp	r5, r3
   8bb42:	d015      	beq.n	8bb70 <_malloc_r+0xd0>
   8bb44:	6869      	ldr	r1, [r5, #4]
   8bb46:	f021 0103 	bic.w	r1, r1, #3
   8bb4a:	1b08      	subs	r0, r1, r4
   8bb4c:	280f      	cmp	r0, #15
   8bb4e:	dd01      	ble.n	8bb54 <_malloc_r+0xb4>
   8bb50:	3a01      	subs	r2, #1
   8bb52:	e00d      	b.n	8bb70 <_malloc_r+0xd0>
   8bb54:	2800      	cmp	r0, #0
   8bb56:	db09      	blt.n	8bb6c <_malloc_r+0xcc>
   8bb58:	68eb      	ldr	r3, [r5, #12]
   8bb5a:	68aa      	ldr	r2, [r5, #8]
   8bb5c:	60d3      	str	r3, [r2, #12]
   8bb5e:	609a      	str	r2, [r3, #8]
   8bb60:	186b      	adds	r3, r5, r1
   8bb62:	685a      	ldr	r2, [r3, #4]
   8bb64:	f042 0001 	orr.w	r0, r2, #1
   8bb68:	6058      	str	r0, [r3, #4]
   8bb6a:	e190      	b.n	8be8e <_malloc_r+0x3ee>
   8bb6c:	68ed      	ldr	r5, [r5, #12]
   8bb6e:	e7e7      	b.n	8bb40 <_malloc_r+0xa0>
   8bb70:	3201      	adds	r2, #1
   8bb72:	4977      	ldr	r1, [pc, #476]	; (8bd50 <_malloc_r+0x2b0>)
   8bb74:	690d      	ldr	r5, [r1, #16]
   8bb76:	f101 0708 	add.w	r7, r1, #8
   8bb7a:	42bd      	cmp	r5, r7
   8bb7c:	d068      	beq.n	8bc50 <_malloc_r+0x1b0>
   8bb7e:	6868      	ldr	r0, [r5, #4]
   8bb80:	f020 0303 	bic.w	r3, r0, #3
   8bb84:	1b18      	subs	r0, r3, r4
   8bb86:	280f      	cmp	r0, #15
   8bb88:	dd0c      	ble.n	8bba4 <_malloc_r+0x104>
   8bb8a:	192b      	adds	r3, r5, r4
   8bb8c:	614b      	str	r3, [r1, #20]
   8bb8e:	610b      	str	r3, [r1, #16]
   8bb90:	f044 0401 	orr.w	r4, r4, #1
   8bb94:	f040 0101 	orr.w	r1, r0, #1
   8bb98:	606c      	str	r4, [r5, #4]
   8bb9a:	60df      	str	r7, [r3, #12]
   8bb9c:	609f      	str	r7, [r3, #8]
   8bb9e:	6059      	str	r1, [r3, #4]
   8bba0:	5018      	str	r0, [r3, r0]
   8bba2:	e174      	b.n	8be8e <_malloc_r+0x3ee>
   8bba4:	2800      	cmp	r0, #0
   8bba6:	614f      	str	r7, [r1, #20]
   8bba8:	610f      	str	r7, [r1, #16]
   8bbaa:	db01      	blt.n	8bbb0 <_malloc_r+0x110>
   8bbac:	18eb      	adds	r3, r5, r3
   8bbae:	e7d8      	b.n	8bb62 <_malloc_r+0xc2>
   8bbb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8bbb4:	d20f      	bcs.n	8bbd6 <_malloc_r+0x136>
   8bbb6:	08db      	lsrs	r3, r3, #3
   8bbb8:	1098      	asrs	r0, r3, #2
   8bbba:	2701      	movs	r7, #1
   8bbbc:	fa07 f700 	lsl.w	r7, r7, r0
   8bbc0:	6848      	ldr	r0, [r1, #4]
   8bbc2:	4307      	orrs	r7, r0
   8bbc4:	604f      	str	r7, [r1, #4]
   8bbc6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   8bbca:	688b      	ldr	r3, [r1, #8]
   8bbcc:	60e9      	str	r1, [r5, #12]
   8bbce:	60ab      	str	r3, [r5, #8]
   8bbd0:	60dd      	str	r5, [r3, #12]
   8bbd2:	608d      	str	r5, [r1, #8]
   8bbd4:	e03c      	b.n	8bc50 <_malloc_r+0x1b0>
   8bbd6:	0a58      	lsrs	r0, r3, #9
   8bbd8:	2804      	cmp	r0, #4
   8bbda:	d802      	bhi.n	8bbe2 <_malloc_r+0x142>
   8bbdc:	0998      	lsrs	r0, r3, #6
   8bbde:	3038      	adds	r0, #56	; 0x38
   8bbe0:	e016      	b.n	8bc10 <_malloc_r+0x170>
   8bbe2:	2814      	cmp	r0, #20
   8bbe4:	d801      	bhi.n	8bbea <_malloc_r+0x14a>
   8bbe6:	305b      	adds	r0, #91	; 0x5b
   8bbe8:	e012      	b.n	8bc10 <_malloc_r+0x170>
   8bbea:	2854      	cmp	r0, #84	; 0x54
   8bbec:	d802      	bhi.n	8bbf4 <_malloc_r+0x154>
   8bbee:	0b18      	lsrs	r0, r3, #12
   8bbf0:	306e      	adds	r0, #110	; 0x6e
   8bbf2:	e00d      	b.n	8bc10 <_malloc_r+0x170>
   8bbf4:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   8bbf8:	d802      	bhi.n	8bc00 <_malloc_r+0x160>
   8bbfa:	0bd8      	lsrs	r0, r3, #15
   8bbfc:	3077      	adds	r0, #119	; 0x77
   8bbfe:	e007      	b.n	8bc10 <_malloc_r+0x170>
   8bc00:	f240 5754 	movw	r7, #1364	; 0x554
   8bc04:	42b8      	cmp	r0, r7
   8bc06:	d802      	bhi.n	8bc0e <_malloc_r+0x16e>
   8bc08:	0c98      	lsrs	r0, r3, #18
   8bc0a:	307c      	adds	r0, #124	; 0x7c
   8bc0c:	e000      	b.n	8bc10 <_malloc_r+0x170>
   8bc0e:	207e      	movs	r0, #126	; 0x7e
   8bc10:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8bd50 <_malloc_r+0x2b0>
   8bc14:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
   8bc18:	68b9      	ldr	r1, [r7, #8]
   8bc1a:	42b9      	cmp	r1, r7
   8bc1c:	d10e      	bne.n	8bc3c <_malloc_r+0x19c>
   8bc1e:	1087      	asrs	r7, r0, #2
   8bc20:	2301      	movs	r3, #1
   8bc22:	fa03 f007 	lsl.w	r0, r3, r7
   8bc26:	f8de 7004 	ldr.w	r7, [lr, #4]
   8bc2a:	ea40 0307 	orr.w	r3, r0, r7
   8bc2e:	f8ce 3004 	str.w	r3, [lr, #4]
   8bc32:	4608      	mov	r0, r1
   8bc34:	e008      	b.n	8bc48 <_malloc_r+0x1a8>
   8bc36:	6889      	ldr	r1, [r1, #8]
   8bc38:	42b9      	cmp	r1, r7
   8bc3a:	d004      	beq.n	8bc46 <_malloc_r+0x1a6>
   8bc3c:	6848      	ldr	r0, [r1, #4]
   8bc3e:	f020 0003 	bic.w	r0, r0, #3
   8bc42:	4283      	cmp	r3, r0
   8bc44:	d3f7      	bcc.n	8bc36 <_malloc_r+0x196>
   8bc46:	68c8      	ldr	r0, [r1, #12]
   8bc48:	60e8      	str	r0, [r5, #12]
   8bc4a:	60a9      	str	r1, [r5, #8]
   8bc4c:	60cd      	str	r5, [r1, #12]
   8bc4e:	6085      	str	r5, [r0, #8]
   8bc50:	1095      	asrs	r5, r2, #2
   8bc52:	2001      	movs	r0, #1
   8bc54:	fa00 f305 	lsl.w	r3, r0, r5
   8bc58:	4f3d      	ldr	r7, [pc, #244]	; (8bd50 <_malloc_r+0x2b0>)
   8bc5a:	6879      	ldr	r1, [r7, #4]
   8bc5c:	428b      	cmp	r3, r1
   8bc5e:	d85d      	bhi.n	8bd1c <_malloc_r+0x27c>
   8bc60:	420b      	tst	r3, r1
   8bc62:	d105      	bne.n	8bc70 <_malloc_r+0x1d0>
   8bc64:	f022 0203 	bic.w	r2, r2, #3
   8bc68:	005b      	lsls	r3, r3, #1
   8bc6a:	3204      	adds	r2, #4
   8bc6c:	420b      	tst	r3, r1
   8bc6e:	d0fb      	beq.n	8bc68 <_malloc_r+0x1c8>
   8bc70:	4d37      	ldr	r5, [pc, #220]	; (8bd50 <_malloc_r+0x2b0>)
   8bc72:	4610      	mov	r0, r2
   8bc74:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
   8bc78:	4677      	mov	r7, lr
   8bc7a:	68fd      	ldr	r5, [r7, #12]
   8bc7c:	42bd      	cmp	r5, r7
   8bc7e:	d02d      	beq.n	8bcdc <_malloc_r+0x23c>
   8bc80:	6869      	ldr	r1, [r5, #4]
   8bc82:	f021 0c03 	bic.w	ip, r1, #3
   8bc86:	ebc4 010c 	rsb	r1, r4, ip
   8bc8a:	290f      	cmp	r1, #15
   8bc8c:	dd13      	ble.n	8bcb6 <_malloc_r+0x216>
   8bc8e:	192b      	adds	r3, r5, r4
   8bc90:	f044 0401 	orr.w	r4, r4, #1
   8bc94:	68ea      	ldr	r2, [r5, #12]
   8bc96:	606c      	str	r4, [r5, #4]
   8bc98:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8bc9c:	5059      	str	r1, [r3, r1]
   8bc9e:	60c2      	str	r2, [r0, #12]
   8bca0:	6090      	str	r0, [r2, #8]
   8bca2:	4a2b      	ldr	r2, [pc, #172]	; (8bd50 <_malloc_r+0x2b0>)
   8bca4:	f041 0001 	orr.w	r0, r1, #1
   8bca8:	6153      	str	r3, [r2, #20]
   8bcaa:	6113      	str	r3, [r2, #16]
   8bcac:	3208      	adds	r2, #8
   8bcae:	60da      	str	r2, [r3, #12]
   8bcb0:	609a      	str	r2, [r3, #8]
   8bcb2:	6058      	str	r0, [r3, #4]
   8bcb4:	e00c      	b.n	8bcd0 <_malloc_r+0x230>
   8bcb6:	2900      	cmp	r1, #0
   8bcb8:	db0e      	blt.n	8bcd8 <_malloc_r+0x238>
   8bcba:	eb05 000c 	add.w	r0, r5, ip
   8bcbe:	6842      	ldr	r2, [r0, #4]
   8bcc0:	68e9      	ldr	r1, [r5, #12]
   8bcc2:	f042 0301 	orr.w	r3, r2, #1
   8bcc6:	6043      	str	r3, [r0, #4]
   8bcc8:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8bccc:	60c1      	str	r1, [r0, #12]
   8bcce:	6088      	str	r0, [r1, #8]
   8bcd0:	4630      	mov	r0, r6
   8bcd2:	f000 f8f6 	bl	8bec2 <__malloc_unlock>
   8bcd6:	e0de      	b.n	8be96 <_malloc_r+0x3f6>
   8bcd8:	68ed      	ldr	r5, [r5, #12]
   8bcda:	e7cf      	b.n	8bc7c <_malloc_r+0x1dc>
   8bcdc:	3001      	adds	r0, #1
   8bcde:	0781      	lsls	r1, r0, #30
   8bce0:	f105 0708 	add.w	r7, r5, #8
   8bce4:	d1c9      	bne.n	8bc7a <_malloc_r+0x1da>
   8bce6:	4671      	mov	r1, lr
   8bce8:	0795      	lsls	r5, r2, #30
   8bcea:	d105      	bne.n	8bcf8 <_malloc_r+0x258>
   8bcec:	4a18      	ldr	r2, [pc, #96]	; (8bd50 <_malloc_r+0x2b0>)
   8bcee:	6855      	ldr	r5, [r2, #4]
   8bcf0:	ea25 0503 	bic.w	r5, r5, r3
   8bcf4:	6055      	str	r5, [r2, #4]
   8bcf6:	e005      	b.n	8bd04 <_malloc_r+0x264>
   8bcf8:	f1a1 0708 	sub.w	r7, r1, #8
   8bcfc:	6809      	ldr	r1, [r1, #0]
   8bcfe:	3a01      	subs	r2, #1
   8bd00:	42b9      	cmp	r1, r7
   8bd02:	d0f1      	beq.n	8bce8 <_malloc_r+0x248>
   8bd04:	4f12      	ldr	r7, [pc, #72]	; (8bd50 <_malloc_r+0x2b0>)
   8bd06:	005b      	lsls	r3, r3, #1
   8bd08:	687f      	ldr	r7, [r7, #4]
   8bd0a:	42bb      	cmp	r3, r7
   8bd0c:	d806      	bhi.n	8bd1c <_malloc_r+0x27c>
   8bd0e:	b12b      	cbz	r3, 8bd1c <_malloc_r+0x27c>
   8bd10:	4602      	mov	r2, r0
   8bd12:	423b      	tst	r3, r7
   8bd14:	d1ac      	bne.n	8bc70 <_malloc_r+0x1d0>
   8bd16:	3204      	adds	r2, #4
   8bd18:	005b      	lsls	r3, r3, #1
   8bd1a:	e7fa      	b.n	8bd12 <_malloc_r+0x272>
   8bd1c:	4b0c      	ldr	r3, [pc, #48]	; (8bd50 <_malloc_r+0x2b0>)
   8bd1e:	689f      	ldr	r7, [r3, #8]
   8bd20:	4619      	mov	r1, r3
   8bd22:	6878      	ldr	r0, [r7, #4]
   8bd24:	f020 0903 	bic.w	r9, r0, #3
   8bd28:	45a1      	cmp	r9, r4
   8bd2a:	d304      	bcc.n	8bd36 <_malloc_r+0x296>
   8bd2c:	ebc4 0009 	rsb	r0, r4, r9
   8bd30:	280f      	cmp	r0, #15
   8bd32:	f300 80a2 	bgt.w	8be7a <_malloc_r+0x3da>
   8bd36:	4a07      	ldr	r2, [pc, #28]	; (8bd54 <_malloc_r+0x2b4>)
   8bd38:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
   8bd3c:	6815      	ldr	r5, [r2, #0]
   8bd3e:	3301      	adds	r3, #1
   8bd40:	eb07 0a09 	add.w	sl, r7, r9
   8bd44:	eb04 0805 	add.w	r8, r4, r5
   8bd48:	d106      	bne.n	8bd58 <_malloc_r+0x2b8>
   8bd4a:	f108 0810 	add.w	r8, r8, #16
   8bd4e:	e00b      	b.n	8bd68 <_malloc_r+0x2c8>
   8bd50:	200706e0 	.word	0x200706e0
   8bd54:	20071668 	.word	0x20071668
   8bd58:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   8bd5c:	f100 010f 	add.w	r1, r0, #15
   8bd60:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   8bd64:	f022 080f 	bic.w	r8, r2, #15
   8bd68:	4630      	mov	r0, r6
   8bd6a:	4641      	mov	r1, r8
   8bd6c:	f000 fa18 	bl	8c1a0 <_sbrk_r>
   8bd70:	1c42      	adds	r2, r0, #1
   8bd72:	4605      	mov	r5, r0
   8bd74:	d071      	beq.n	8be5a <_malloc_r+0x3ba>
   8bd76:	4550      	cmp	r0, sl
   8bd78:	d202      	bcs.n	8bd80 <_malloc_r+0x2e0>
   8bd7a:	4b48      	ldr	r3, [pc, #288]	; (8be9c <_malloc_r+0x3fc>)
   8bd7c:	429f      	cmp	r7, r3
   8bd7e:	d16c      	bne.n	8be5a <_malloc_r+0x3ba>
   8bd80:	4847      	ldr	r0, [pc, #284]	; (8bea0 <_malloc_r+0x400>)
   8bd82:	4555      	cmp	r5, sl
   8bd84:	6841      	ldr	r1, [r0, #4]
   8bd86:	4a45      	ldr	r2, [pc, #276]	; (8be9c <_malloc_r+0x3fc>)
   8bd88:	eb08 0301 	add.w	r3, r8, r1
   8bd8c:	6043      	str	r3, [r0, #4]
   8bd8e:	d107      	bne.n	8bda0 <_malloc_r+0x300>
   8bd90:	0529      	lsls	r1, r5, #20
   8bd92:	d105      	bne.n	8bda0 <_malloc_r+0x300>
   8bd94:	6895      	ldr	r5, [r2, #8]
   8bd96:	44c8      	add	r8, r9
   8bd98:	f048 0001 	orr.w	r0, r8, #1
   8bd9c:	6068      	str	r0, [r5, #4]
   8bd9e:	e051      	b.n	8be44 <_malloc_r+0x3a4>
   8bda0:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   8bda4:	1c42      	adds	r2, r0, #1
   8bda6:	d103      	bne.n	8bdb0 <_malloc_r+0x310>
   8bda8:	4a3c      	ldr	r2, [pc, #240]	; (8be9c <_malloc_r+0x3fc>)
   8bdaa:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
   8bdae:	e005      	b.n	8bdbc <_malloc_r+0x31c>
   8bdb0:	ebca 0a05 	rsb	sl, sl, r5
   8bdb4:	eb03 010a 	add.w	r1, r3, sl
   8bdb8:	4b39      	ldr	r3, [pc, #228]	; (8bea0 <_malloc_r+0x400>)
   8bdba:	6059      	str	r1, [r3, #4]
   8bdbc:	f015 0007 	ands.w	r0, r5, #7
   8bdc0:	bf1c      	itt	ne
   8bdc2:	f1c0 0008 	rsbne	r0, r0, #8
   8bdc6:	182d      	addne	r5, r5, r0
   8bdc8:	eb05 0c08 	add.w	ip, r5, r8
   8bdcc:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   8bdd0:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
   8bdd4:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
   8bdd8:	4641      	mov	r1, r8
   8bdda:	4630      	mov	r0, r6
   8bddc:	f000 f9e0 	bl	8c1a0 <_sbrk_r>
   8bde0:	4a2f      	ldr	r2, [pc, #188]	; (8bea0 <_malloc_r+0x400>)
   8bde2:	1c43      	adds	r3, r0, #1
   8bde4:	6853      	ldr	r3, [r2, #4]
   8bde6:	bf08      	it	eq
   8bde8:	f04f 0800 	moveq.w	r8, #0
   8bdec:	eb08 0103 	add.w	r1, r8, r3
   8bdf0:	bf08      	it	eq
   8bdf2:	4628      	moveq	r0, r5
   8bdf4:	6051      	str	r1, [r2, #4]
   8bdf6:	1b40      	subs	r0, r0, r5
   8bdf8:	4a28      	ldr	r2, [pc, #160]	; (8be9c <_malloc_r+0x3fc>)
   8bdfa:	eb00 0308 	add.w	r3, r0, r8
   8bdfe:	f043 0101 	orr.w	r1, r3, #1
   8be02:	4297      	cmp	r7, r2
   8be04:	6095      	str	r5, [r2, #8]
   8be06:	6069      	str	r1, [r5, #4]
   8be08:	d01c      	beq.n	8be44 <_malloc_r+0x3a4>
   8be0a:	f1b9 0f0f 	cmp.w	r9, #15
   8be0e:	d802      	bhi.n	8be16 <_malloc_r+0x376>
   8be10:	2201      	movs	r2, #1
   8be12:	606a      	str	r2, [r5, #4]
   8be14:	e021      	b.n	8be5a <_malloc_r+0x3ba>
   8be16:	687d      	ldr	r5, [r7, #4]
   8be18:	f1a9 090c 	sub.w	r9, r9, #12
   8be1c:	f029 0907 	bic.w	r9, r9, #7
   8be20:	f005 0201 	and.w	r2, r5, #1
   8be24:	2105      	movs	r1, #5
   8be26:	eb07 0309 	add.w	r3, r7, r9
   8be2a:	ea49 0002 	orr.w	r0, r9, r2
   8be2e:	f1b9 0f0f 	cmp.w	r9, #15
   8be32:	6078      	str	r0, [r7, #4]
   8be34:	6059      	str	r1, [r3, #4]
   8be36:	6099      	str	r1, [r3, #8]
   8be38:	d904      	bls.n	8be44 <_malloc_r+0x3a4>
   8be3a:	4630      	mov	r0, r6
   8be3c:	f107 0108 	add.w	r1, r7, #8
   8be40:	f7ff fd78 	bl	8b934 <_free_r>
   8be44:	4a16      	ldr	r2, [pc, #88]	; (8bea0 <_malloc_r+0x400>)
   8be46:	6853      	ldr	r3, [r2, #4]
   8be48:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   8be4a:	6b15      	ldr	r5, [r2, #48]	; 0x30
   8be4c:	428b      	cmp	r3, r1
   8be4e:	bf88      	it	hi
   8be50:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   8be52:	42ab      	cmp	r3, r5
   8be54:	bf84      	itt	hi
   8be56:	4d12      	ldrhi	r5, [pc, #72]	; (8bea0 <_malloc_r+0x400>)
   8be58:	632b      	strhi	r3, [r5, #48]	; 0x30
   8be5a:	4810      	ldr	r0, [pc, #64]	; (8be9c <_malloc_r+0x3fc>)
   8be5c:	6882      	ldr	r2, [r0, #8]
   8be5e:	6853      	ldr	r3, [r2, #4]
   8be60:	f023 0103 	bic.w	r1, r3, #3
   8be64:	42a1      	cmp	r1, r4
   8be66:	ebc4 0001 	rsb	r0, r4, r1
   8be6a:	d301      	bcc.n	8be70 <_malloc_r+0x3d0>
   8be6c:	280f      	cmp	r0, #15
   8be6e:	dc04      	bgt.n	8be7a <_malloc_r+0x3da>
   8be70:	4630      	mov	r0, r6
   8be72:	f000 f826 	bl	8bec2 <__malloc_unlock>
   8be76:	2500      	movs	r5, #0
   8be78:	e00d      	b.n	8be96 <_malloc_r+0x3f6>
   8be7a:	4a08      	ldr	r2, [pc, #32]	; (8be9c <_malloc_r+0x3fc>)
   8be7c:	f044 0301 	orr.w	r3, r4, #1
   8be80:	6895      	ldr	r5, [r2, #8]
   8be82:	f040 0101 	orr.w	r1, r0, #1
   8be86:	192c      	adds	r4, r5, r4
   8be88:	606b      	str	r3, [r5, #4]
   8be8a:	6094      	str	r4, [r2, #8]
   8be8c:	6061      	str	r1, [r4, #4]
   8be8e:	4630      	mov	r0, r6
   8be90:	f000 f817 	bl	8bec2 <__malloc_unlock>
   8be94:	3508      	adds	r5, #8
   8be96:	4628      	mov	r0, r5
   8be98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8be9c:	200706e0 	.word	0x200706e0
   8bea0:	20071668 	.word	0x20071668

0008bea4 <memchr>:
   8bea4:	b510      	push	{r4, lr}
   8bea6:	b2c9      	uxtb	r1, r1
   8bea8:	4603      	mov	r3, r0
   8beaa:	1882      	adds	r2, r0, r2
   8beac:	4293      	cmp	r3, r2
   8beae:	4618      	mov	r0, r3
   8beb0:	d004      	beq.n	8bebc <memchr+0x18>
   8beb2:	7804      	ldrb	r4, [r0, #0]
   8beb4:	3301      	adds	r3, #1
   8beb6:	428c      	cmp	r4, r1
   8beb8:	d1f8      	bne.n	8beac <memchr+0x8>
   8beba:	e000      	b.n	8bebe <memchr+0x1a>
   8bebc:	2000      	movs	r0, #0
   8bebe:	bd10      	pop	{r4, pc}

0008bec0 <__malloc_lock>:
   8bec0:	4770      	bx	lr

0008bec2 <__malloc_unlock>:
   8bec2:	4770      	bx	lr

0008bec4 <_realloc_r>:
   8bec4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bec8:	4681      	mov	r9, r0
   8beca:	4616      	mov	r6, r2
   8becc:	460c      	mov	r4, r1
   8bece:	b921      	cbnz	r1, 8beda <_realloc_r+0x16>
   8bed0:	4611      	mov	r1, r2
   8bed2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bed6:	f7ff bde3 	b.w	8baa0 <_malloc_r>
   8beda:	f7ff fff1 	bl	8bec0 <__malloc_lock>
   8bede:	f106 070b 	add.w	r7, r6, #11
   8bee2:	f854 5c04 	ldr.w	r5, [r4, #-4]
   8bee6:	2f16      	cmp	r7, #22
   8bee8:	f1a4 0b08 	sub.w	fp, r4, #8
   8beec:	f025 0803 	bic.w	r8, r5, #3
   8bef0:	d903      	bls.n	8befa <_realloc_r+0x36>
   8bef2:	f037 0707 	bics.w	r7, r7, #7
   8bef6:	d501      	bpl.n	8befc <_realloc_r+0x38>
   8bef8:	e002      	b.n	8bf00 <_realloc_r+0x3c>
   8befa:	2710      	movs	r7, #16
   8befc:	42b7      	cmp	r7, r6
   8befe:	d204      	bcs.n	8bf0a <_realloc_r+0x46>
   8bf00:	200c      	movs	r0, #12
   8bf02:	f8c9 0000 	str.w	r0, [r9]
   8bf06:	2600      	movs	r6, #0
   8bf08:	e145      	b.n	8c196 <_realloc_r+0x2d2>
   8bf0a:	45b8      	cmp	r8, r7
   8bf0c:	f280 811a 	bge.w	8c144 <_realloc_r+0x280>
   8bf10:	4aa2      	ldr	r2, [pc, #648]	; (8c19c <_realloc_r+0x2d8>)
   8bf12:	eb0b 0308 	add.w	r3, fp, r8
   8bf16:	6891      	ldr	r1, [r2, #8]
   8bf18:	428b      	cmp	r3, r1
   8bf1a:	d006      	beq.n	8bf2a <_realloc_r+0x66>
   8bf1c:	6858      	ldr	r0, [r3, #4]
   8bf1e:	f020 0201 	bic.w	r2, r0, #1
   8bf22:	1898      	adds	r0, r3, r2
   8bf24:	6842      	ldr	r2, [r0, #4]
   8bf26:	07d0      	lsls	r0, r2, #31
   8bf28:	d426      	bmi.n	8bf78 <_realloc_r+0xb4>
   8bf2a:	685a      	ldr	r2, [r3, #4]
   8bf2c:	428b      	cmp	r3, r1
   8bf2e:	f022 0003 	bic.w	r0, r2, #3
   8bf32:	eb00 0a08 	add.w	sl, r0, r8
   8bf36:	d118      	bne.n	8bf6a <_realloc_r+0xa6>
   8bf38:	f107 0210 	add.w	r2, r7, #16
   8bf3c:	4592      	cmp	sl, r2
   8bf3e:	db1d      	blt.n	8bf7c <_realloc_r+0xb8>
   8bf40:	ebc7 0a0a 	rsb	sl, r7, sl
   8bf44:	eb0b 0507 	add.w	r5, fp, r7
   8bf48:	f04a 0101 	orr.w	r1, sl, #1
   8bf4c:	6069      	str	r1, [r5, #4]
   8bf4e:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8bf52:	4e92      	ldr	r6, [pc, #584]	; (8c19c <_realloc_r+0x2d8>)
   8bf54:	f002 0301 	and.w	r3, r2, #1
   8bf58:	431f      	orrs	r7, r3
   8bf5a:	60b5      	str	r5, [r6, #8]
   8bf5c:	f844 7c04 	str.w	r7, [r4, #-4]
   8bf60:	4648      	mov	r0, r9
   8bf62:	f7ff ffae 	bl	8bec2 <__malloc_unlock>
   8bf66:	4626      	mov	r6, r4
   8bf68:	e115      	b.n	8c196 <_realloc_r+0x2d2>
   8bf6a:	45ba      	cmp	sl, r7
   8bf6c:	db06      	blt.n	8bf7c <_realloc_r+0xb8>
   8bf6e:	68dd      	ldr	r5, [r3, #12]
   8bf70:	689e      	ldr	r6, [r3, #8]
   8bf72:	60f5      	str	r5, [r6, #12]
   8bf74:	60ae      	str	r6, [r5, #8]
   8bf76:	e0e6      	b.n	8c146 <_realloc_r+0x282>
   8bf78:	2000      	movs	r0, #0
   8bf7a:	4603      	mov	r3, r0
   8bf7c:	07ea      	lsls	r2, r5, #31
   8bf7e:	f100 8091 	bmi.w	8c0a4 <_realloc_r+0x1e0>
   8bf82:	f854 5c08 	ldr.w	r5, [r4, #-8]
   8bf86:	ebc5 050b 	rsb	r5, r5, fp
   8bf8a:	686a      	ldr	r2, [r5, #4]
   8bf8c:	f022 0203 	bic.w	r2, r2, #3
   8bf90:	2b00      	cmp	r3, #0
   8bf92:	d051      	beq.n	8c038 <_realloc_r+0x174>
   8bf94:	eb02 0a08 	add.w	sl, r2, r8
   8bf98:	428b      	cmp	r3, r1
   8bf9a:	4482      	add	sl, r0
   8bf9c:	d145      	bne.n	8c02a <_realloc_r+0x166>
   8bf9e:	f107 0310 	add.w	r3, r7, #16
   8bfa2:	459a      	cmp	sl, r3
   8bfa4:	db48      	blt.n	8c038 <_realloc_r+0x174>
   8bfa6:	462e      	mov	r6, r5
   8bfa8:	68e9      	ldr	r1, [r5, #12]
   8bfaa:	f856 3f08 	ldr.w	r3, [r6, #8]!
   8bfae:	f1a8 0204 	sub.w	r2, r8, #4
   8bfb2:	2a24      	cmp	r2, #36	; 0x24
   8bfb4:	60d9      	str	r1, [r3, #12]
   8bfb6:	608b      	str	r3, [r1, #8]
   8bfb8:	d825      	bhi.n	8c006 <_realloc_r+0x142>
   8bfba:	2a13      	cmp	r2, #19
   8bfbc:	d91b      	bls.n	8bff6 <_realloc_r+0x132>
   8bfbe:	6821      	ldr	r1, [r4, #0]
   8bfc0:	2a1b      	cmp	r2, #27
   8bfc2:	60a9      	str	r1, [r5, #8]
   8bfc4:	6863      	ldr	r3, [r4, #4]
   8bfc6:	60eb      	str	r3, [r5, #12]
   8bfc8:	d803      	bhi.n	8bfd2 <_realloc_r+0x10e>
   8bfca:	f105 0010 	add.w	r0, r5, #16
   8bfce:	3408      	adds	r4, #8
   8bfd0:	e012      	b.n	8bff8 <_realloc_r+0x134>
   8bfd2:	68a0      	ldr	r0, [r4, #8]
   8bfd4:	2a24      	cmp	r2, #36	; 0x24
   8bfd6:	6128      	str	r0, [r5, #16]
   8bfd8:	68e1      	ldr	r1, [r4, #12]
   8bfda:	6169      	str	r1, [r5, #20]
   8bfdc:	d003      	beq.n	8bfe6 <_realloc_r+0x122>
   8bfde:	f105 0018 	add.w	r0, r5, #24
   8bfe2:	3410      	adds	r4, #16
   8bfe4:	e008      	b.n	8bff8 <_realloc_r+0x134>
   8bfe6:	6922      	ldr	r2, [r4, #16]
   8bfe8:	f105 0020 	add.w	r0, r5, #32
   8bfec:	61aa      	str	r2, [r5, #24]
   8bfee:	6963      	ldr	r3, [r4, #20]
   8bff0:	3418      	adds	r4, #24
   8bff2:	61eb      	str	r3, [r5, #28]
   8bff4:	e000      	b.n	8bff8 <_realloc_r+0x134>
   8bff6:	4630      	mov	r0, r6
   8bff8:	6821      	ldr	r1, [r4, #0]
   8bffa:	6001      	str	r1, [r0, #0]
   8bffc:	6862      	ldr	r2, [r4, #4]
   8bffe:	6042      	str	r2, [r0, #4]
   8c000:	68a3      	ldr	r3, [r4, #8]
   8c002:	6083      	str	r3, [r0, #8]
   8c004:	e003      	b.n	8c00e <_realloc_r+0x14a>
   8c006:	4630      	mov	r0, r6
   8c008:	4621      	mov	r1, r4
   8c00a:	f7fe feda 	bl	8adc2 <memmove>
   8c00e:	ebc7 0a0a 	rsb	sl, r7, sl
   8c012:	19e8      	adds	r0, r5, r7
   8c014:	f04a 0201 	orr.w	r2, sl, #1
   8c018:	6042      	str	r2, [r0, #4]
   8c01a:	686b      	ldr	r3, [r5, #4]
   8c01c:	495f      	ldr	r1, [pc, #380]	; (8c19c <_realloc_r+0x2d8>)
   8c01e:	6088      	str	r0, [r1, #8]
   8c020:	f003 0001 	and.w	r0, r3, #1
   8c024:	4307      	orrs	r7, r0
   8c026:	606f      	str	r7, [r5, #4]
   8c028:	e088      	b.n	8c13c <_realloc_r+0x278>
   8c02a:	45ba      	cmp	sl, r7
   8c02c:	db04      	blt.n	8c038 <_realloc_r+0x174>
   8c02e:	68d9      	ldr	r1, [r3, #12]
   8c030:	6898      	ldr	r0, [r3, #8]
   8c032:	60c1      	str	r1, [r0, #12]
   8c034:	6088      	str	r0, [r1, #8]
   8c036:	e003      	b.n	8c040 <_realloc_r+0x17c>
   8c038:	eb02 0a08 	add.w	sl, r2, r8
   8c03c:	45ba      	cmp	sl, r7
   8c03e:	db31      	blt.n	8c0a4 <_realloc_r+0x1e0>
   8c040:	4628      	mov	r0, r5
   8c042:	68eb      	ldr	r3, [r5, #12]
   8c044:	f850 1f08 	ldr.w	r1, [r0, #8]!
   8c048:	f1a8 0204 	sub.w	r2, r8, #4
   8c04c:	2a24      	cmp	r2, #36	; 0x24
   8c04e:	60cb      	str	r3, [r1, #12]
   8c050:	6099      	str	r1, [r3, #8]
   8c052:	d823      	bhi.n	8c09c <_realloc_r+0x1d8>
   8c054:	2a13      	cmp	r2, #19
   8c056:	d91a      	bls.n	8c08e <_realloc_r+0x1ca>
   8c058:	6820      	ldr	r0, [r4, #0]
   8c05a:	2a1b      	cmp	r2, #27
   8c05c:	60a8      	str	r0, [r5, #8]
   8c05e:	6866      	ldr	r6, [r4, #4]
   8c060:	60ee      	str	r6, [r5, #12]
   8c062:	d803      	bhi.n	8c06c <_realloc_r+0x1a8>
   8c064:	f105 0010 	add.w	r0, r5, #16
   8c068:	3408      	adds	r4, #8
   8c06a:	e010      	b.n	8c08e <_realloc_r+0x1ca>
   8c06c:	68a3      	ldr	r3, [r4, #8]
   8c06e:	2a24      	cmp	r2, #36	; 0x24
   8c070:	612b      	str	r3, [r5, #16]
   8c072:	68e1      	ldr	r1, [r4, #12]
   8c074:	6169      	str	r1, [r5, #20]
   8c076:	d003      	beq.n	8c080 <_realloc_r+0x1bc>
   8c078:	f105 0018 	add.w	r0, r5, #24
   8c07c:	3410      	adds	r4, #16
   8c07e:	e006      	b.n	8c08e <_realloc_r+0x1ca>
   8c080:	6922      	ldr	r2, [r4, #16]
   8c082:	61aa      	str	r2, [r5, #24]
   8c084:	6960      	ldr	r0, [r4, #20]
   8c086:	3418      	adds	r4, #24
   8c088:	61e8      	str	r0, [r5, #28]
   8c08a:	f105 0020 	add.w	r0, r5, #32
   8c08e:	6826      	ldr	r6, [r4, #0]
   8c090:	6006      	str	r6, [r0, #0]
   8c092:	6863      	ldr	r3, [r4, #4]
   8c094:	6043      	str	r3, [r0, #4]
   8c096:	68a1      	ldr	r1, [r4, #8]
   8c098:	6081      	str	r1, [r0, #8]
   8c09a:	e055      	b.n	8c148 <_realloc_r+0x284>
   8c09c:	4621      	mov	r1, r4
   8c09e:	f7fe fe90 	bl	8adc2 <memmove>
   8c0a2:	e051      	b.n	8c148 <_realloc_r+0x284>
   8c0a4:	4631      	mov	r1, r6
   8c0a6:	4648      	mov	r0, r9
   8c0a8:	f7ff fcfa 	bl	8baa0 <_malloc_r>
   8c0ac:	4606      	mov	r6, r0
   8c0ae:	2800      	cmp	r0, #0
   8c0b0:	d044      	beq.n	8c13c <_realloc_r+0x278>
   8c0b2:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8c0b6:	f1a0 0208 	sub.w	r2, r0, #8
   8c0ba:	f021 0301 	bic.w	r3, r1, #1
   8c0be:	eb0b 0103 	add.w	r1, fp, r3
   8c0c2:	428a      	cmp	r2, r1
   8c0c4:	d106      	bne.n	8c0d4 <_realloc_r+0x210>
   8c0c6:	f850 6c04 	ldr.w	r6, [r0, #-4]
   8c0ca:	f026 0503 	bic.w	r5, r6, #3
   8c0ce:	eb05 0a08 	add.w	sl, r5, r8
   8c0d2:	e038      	b.n	8c146 <_realloc_r+0x282>
   8c0d4:	f1a8 0204 	sub.w	r2, r8, #4
   8c0d8:	2a24      	cmp	r2, #36	; 0x24
   8c0da:	d828      	bhi.n	8c12e <_realloc_r+0x26a>
   8c0dc:	2a13      	cmp	r2, #19
   8c0de:	d91e      	bls.n	8c11e <_realloc_r+0x25a>
   8c0e0:	6823      	ldr	r3, [r4, #0]
   8c0e2:	2a1b      	cmp	r2, #27
   8c0e4:	6003      	str	r3, [r0, #0]
   8c0e6:	6861      	ldr	r1, [r4, #4]
   8c0e8:	6041      	str	r1, [r0, #4]
   8c0ea:	d804      	bhi.n	8c0f6 <_realloc_r+0x232>
   8c0ec:	f100 0008 	add.w	r0, r0, #8
   8c0f0:	f104 0208 	add.w	r2, r4, #8
   8c0f4:	e014      	b.n	8c120 <_realloc_r+0x25c>
   8c0f6:	68a0      	ldr	r0, [r4, #8]
   8c0f8:	2a24      	cmp	r2, #36	; 0x24
   8c0fa:	60b0      	str	r0, [r6, #8]
   8c0fc:	68e3      	ldr	r3, [r4, #12]
   8c0fe:	60f3      	str	r3, [r6, #12]
   8c100:	d004      	beq.n	8c10c <_realloc_r+0x248>
   8c102:	f106 0010 	add.w	r0, r6, #16
   8c106:	f104 0210 	add.w	r2, r4, #16
   8c10a:	e009      	b.n	8c120 <_realloc_r+0x25c>
   8c10c:	6922      	ldr	r2, [r4, #16]
   8c10e:	f106 0018 	add.w	r0, r6, #24
   8c112:	6132      	str	r2, [r6, #16]
   8c114:	6961      	ldr	r1, [r4, #20]
   8c116:	f104 0218 	add.w	r2, r4, #24
   8c11a:	6171      	str	r1, [r6, #20]
   8c11c:	e000      	b.n	8c120 <_realloc_r+0x25c>
   8c11e:	4622      	mov	r2, r4
   8c120:	6813      	ldr	r3, [r2, #0]
   8c122:	6003      	str	r3, [r0, #0]
   8c124:	6851      	ldr	r1, [r2, #4]
   8c126:	6041      	str	r1, [r0, #4]
   8c128:	6892      	ldr	r2, [r2, #8]
   8c12a:	6082      	str	r2, [r0, #8]
   8c12c:	e002      	b.n	8c134 <_realloc_r+0x270>
   8c12e:	4621      	mov	r1, r4
   8c130:	f7fe fe47 	bl	8adc2 <memmove>
   8c134:	4648      	mov	r0, r9
   8c136:	4621      	mov	r1, r4
   8c138:	f7ff fbfc 	bl	8b934 <_free_r>
   8c13c:	4648      	mov	r0, r9
   8c13e:	f7ff fec0 	bl	8bec2 <__malloc_unlock>
   8c142:	e028      	b.n	8c196 <_realloc_r+0x2d2>
   8c144:	46c2      	mov	sl, r8
   8c146:	465d      	mov	r5, fp
   8c148:	ebc7 000a 	rsb	r0, r7, sl
   8c14c:	280f      	cmp	r0, #15
   8c14e:	686a      	ldr	r2, [r5, #4]
   8c150:	d911      	bls.n	8c176 <_realloc_r+0x2b2>
   8c152:	f002 0601 	and.w	r6, r2, #1
   8c156:	19e9      	adds	r1, r5, r7
   8c158:	f040 0301 	orr.w	r3, r0, #1
   8c15c:	4337      	orrs	r7, r6
   8c15e:	606f      	str	r7, [r5, #4]
   8c160:	1808      	adds	r0, r1, r0
   8c162:	604b      	str	r3, [r1, #4]
   8c164:	6842      	ldr	r2, [r0, #4]
   8c166:	3108      	adds	r1, #8
   8c168:	f042 0601 	orr.w	r6, r2, #1
   8c16c:	6046      	str	r6, [r0, #4]
   8c16e:	4648      	mov	r0, r9
   8c170:	f7ff fbe0 	bl	8b934 <_free_r>
   8c174:	e00a      	b.n	8c18c <_realloc_r+0x2c8>
   8c176:	f002 0601 	and.w	r6, r2, #1
   8c17a:	ea4a 0306 	orr.w	r3, sl, r6
   8c17e:	606b      	str	r3, [r5, #4]
   8c180:	eb05 010a 	add.w	r1, r5, sl
   8c184:	6848      	ldr	r0, [r1, #4]
   8c186:	f040 0201 	orr.w	r2, r0, #1
   8c18a:	604a      	str	r2, [r1, #4]
   8c18c:	4648      	mov	r0, r9
   8c18e:	f7ff fe98 	bl	8bec2 <__malloc_unlock>
   8c192:	f105 0608 	add.w	r6, r5, #8
   8c196:	4630      	mov	r0, r6
   8c198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c19c:	200706e0 	.word	0x200706e0

0008c1a0 <_sbrk_r>:
   8c1a0:	b538      	push	{r3, r4, r5, lr}
   8c1a2:	4c06      	ldr	r4, [pc, #24]	; (8c1bc <_sbrk_r+0x1c>)
   8c1a4:	2300      	movs	r3, #0
   8c1a6:	4605      	mov	r5, r0
   8c1a8:	4608      	mov	r0, r1
   8c1aa:	6023      	str	r3, [r4, #0]
   8c1ac:	f7fe f860 	bl	8a270 <_sbrk>
   8c1b0:	1c43      	adds	r3, r0, #1
   8c1b2:	d102      	bne.n	8c1ba <_sbrk_r+0x1a>
   8c1b4:	6821      	ldr	r1, [r4, #0]
   8c1b6:	b101      	cbz	r1, 8c1ba <_sbrk_r+0x1a>
   8c1b8:	6029      	str	r1, [r5, #0]
   8c1ba:	bd38      	pop	{r3, r4, r5, pc}
   8c1bc:	20071e38 	.word	0x20071e38

0008c1c0 <__ssprint_r>:
   8c1c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c1c4:	4607      	mov	r7, r0
   8c1c6:	6890      	ldr	r0, [r2, #8]
   8c1c8:	460c      	mov	r4, r1
   8c1ca:	4615      	mov	r5, r2
   8c1cc:	f8d2 8000 	ldr.w	r8, [r2]
   8c1d0:	b908      	cbnz	r0, 8c1d6 <__ssprint_r+0x16>
   8c1d2:	6050      	str	r0, [r2, #4]
   8c1d4:	e06f      	b.n	8c2b6 <__ssprint_r+0xf6>
   8c1d6:	f04f 0b00 	mov.w	fp, #0
   8c1da:	465e      	mov	r6, fp
   8c1dc:	b936      	cbnz	r6, 8c1ec <__ssprint_r+0x2c>
   8c1de:	f8d8 b000 	ldr.w	fp, [r8]
   8c1e2:	f8d8 6004 	ldr.w	r6, [r8, #4]
   8c1e6:	f108 0808 	add.w	r8, r8, #8
   8c1ea:	e7f7      	b.n	8c1dc <__ssprint_r+0x1c>
   8c1ec:	68a3      	ldr	r3, [r4, #8]
   8c1ee:	429e      	cmp	r6, r3
   8c1f0:	d34c      	bcc.n	8c28c <__ssprint_r+0xcc>
   8c1f2:	89a2      	ldrh	r2, [r4, #12]
   8c1f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
   8c1f8:	d046      	beq.n	8c288 <__ssprint_r+0xc8>
   8c1fa:	6823      	ldr	r3, [r4, #0]
   8c1fc:	6960      	ldr	r0, [r4, #20]
   8c1fe:	6921      	ldr	r1, [r4, #16]
   8c200:	f04f 0a03 	mov.w	sl, #3
   8c204:	ebc1 0903 	rsb	r9, r1, r3
   8c208:	fb0a f300 	mul.w	r3, sl, r0
   8c20c:	2002      	movs	r0, #2
   8c20e:	fb93 faf0 	sdiv	sl, r3, r0
   8c212:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   8c216:	f109 0301 	add.w	r3, r9, #1
   8c21a:	1998      	adds	r0, r3, r6
   8c21c:	b213      	sxth	r3, r2
   8c21e:	4582      	cmp	sl, r0
   8c220:	bf38      	it	cc
   8c222:	4682      	movcc	sl, r0
   8c224:	4638      	mov	r0, r7
   8c226:	b183      	cbz	r3, 8c24a <__ssprint_r+0x8a>
   8c228:	4651      	mov	r1, sl
   8c22a:	f7ff fc39 	bl	8baa0 <_malloc_r>
   8c22e:	b1a8      	cbz	r0, 8c25c <__ssprint_r+0x9c>
   8c230:	6921      	ldr	r1, [r4, #16]
   8c232:	464a      	mov	r2, r9
   8c234:	9001      	str	r0, [sp, #4]
   8c236:	f7fe fdbb 	bl	8adb0 <memcpy>
   8c23a:	89a0      	ldrh	r0, [r4, #12]
   8c23c:	f420 6290 	bic.w	r2, r0, #1152	; 0x480
   8c240:	f042 0180 	orr.w	r1, r2, #128	; 0x80
   8c244:	81a1      	strh	r1, [r4, #12]
   8c246:	9901      	ldr	r1, [sp, #4]
   8c248:	e014      	b.n	8c274 <__ssprint_r+0xb4>
   8c24a:	4652      	mov	r2, sl
   8c24c:	f7ff fe3a 	bl	8bec4 <_realloc_r>
   8c250:	4601      	mov	r1, r0
   8c252:	b978      	cbnz	r0, 8c274 <__ssprint_r+0xb4>
   8c254:	4638      	mov	r0, r7
   8c256:	6921      	ldr	r1, [r4, #16]
   8c258:	f7ff fb6c 	bl	8b934 <_free_r>
   8c25c:	89a3      	ldrh	r3, [r4, #12]
   8c25e:	200c      	movs	r0, #12
   8c260:	2100      	movs	r1, #0
   8c262:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   8c266:	6038      	str	r0, [r7, #0]
   8c268:	81a2      	strh	r2, [r4, #12]
   8c26a:	f04f 30ff 	mov.w	r0, #4294967295
   8c26e:	60a9      	str	r1, [r5, #8]
   8c270:	6069      	str	r1, [r5, #4]
   8c272:	e020      	b.n	8c2b6 <__ssprint_r+0xf6>
   8c274:	eb01 0309 	add.w	r3, r1, r9
   8c278:	ebc9 000a 	rsb	r0, r9, sl
   8c27c:	6023      	str	r3, [r4, #0]
   8c27e:	6121      	str	r1, [r4, #16]
   8c280:	f8c4 a014 	str.w	sl, [r4, #20]
   8c284:	4633      	mov	r3, r6
   8c286:	60a0      	str	r0, [r4, #8]
   8c288:	429e      	cmp	r6, r3
   8c28a:	d200      	bcs.n	8c28e <__ssprint_r+0xce>
   8c28c:	4633      	mov	r3, r6
   8c28e:	461a      	mov	r2, r3
   8c290:	4659      	mov	r1, fp
   8c292:	6820      	ldr	r0, [r4, #0]
   8c294:	9301      	str	r3, [sp, #4]
   8c296:	f7fe fd94 	bl	8adc2 <memmove>
   8c29a:	68a2      	ldr	r2, [r4, #8]
   8c29c:	9901      	ldr	r1, [sp, #4]
   8c29e:	6823      	ldr	r3, [r4, #0]
   8c2a0:	1a50      	subs	r0, r2, r1
   8c2a2:	185a      	adds	r2, r3, r1
   8c2a4:	68a9      	ldr	r1, [r5, #8]
   8c2a6:	60a0      	str	r0, [r4, #8]
   8c2a8:	1b8e      	subs	r6, r1, r6
   8c2aa:	6022      	str	r2, [r4, #0]
   8c2ac:	60ae      	str	r6, [r5, #8]
   8c2ae:	2e00      	cmp	r6, #0
   8c2b0:	d195      	bne.n	8c1de <__ssprint_r+0x1e>
   8c2b2:	606e      	str	r6, [r5, #4]
   8c2b4:	4630      	mov	r0, r6
   8c2b6:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008c2ba <_svfiprintf_r>:
   8c2ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c2be:	461e      	mov	r6, r3
   8c2c0:	898b      	ldrh	r3, [r1, #12]
   8c2c2:	4689      	mov	r9, r1
   8c2c4:	f003 0180 	and.w	r1, r3, #128	; 0x80
   8c2c8:	4614      	mov	r4, r2
   8c2ca:	b20a      	sxth	r2, r1
   8c2cc:	b0a9      	sub	sp, #164	; 0xa4
   8c2ce:	4683      	mov	fp, r0
   8c2d0:	b19a      	cbz	r2, 8c2fa <_svfiprintf_r+0x40>
   8c2d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8c2d6:	b983      	cbnz	r3, 8c2fa <_svfiprintf_r+0x40>
   8c2d8:	2140      	movs	r1, #64	; 0x40
   8c2da:	f7ff fbe1 	bl	8baa0 <_malloc_r>
   8c2de:	f8c9 0000 	str.w	r0, [r9]
   8c2e2:	f8c9 0010 	str.w	r0, [r9, #16]
   8c2e6:	b928      	cbnz	r0, 8c2f4 <_svfiprintf_r+0x3a>
   8c2e8:	220c      	movs	r2, #12
   8c2ea:	f8cb 2000 	str.w	r2, [fp]
   8c2ee:	f04f 30ff 	mov.w	r0, #4294967295
   8c2f2:	e3db      	b.n	8caac <_svfiprintf_r+0x7f2>
   8c2f4:	2040      	movs	r0, #64	; 0x40
   8c2f6:	f8c9 0014 	str.w	r0, [r9, #20]
   8c2fa:	2100      	movs	r1, #0
   8c2fc:	ad18      	add	r5, sp, #96	; 0x60
   8c2fe:	950b      	str	r5, [sp, #44]	; 0x2c
   8c300:	910d      	str	r1, [sp, #52]	; 0x34
   8c302:	910c      	str	r1, [sp, #48]	; 0x30
   8c304:	9401      	str	r4, [sp, #4]
   8c306:	9105      	str	r1, [sp, #20]
   8c308:	9104      	str	r1, [sp, #16]
   8c30a:	46a8      	mov	r8, r5
   8c30c:	9b01      	ldr	r3, [sp, #4]
   8c30e:	461c      	mov	r4, r3
   8c310:	f813 2b01 	ldrb.w	r2, [r3], #1
   8c314:	b91a      	cbnz	r2, 8c31e <_svfiprintf_r+0x64>
   8c316:	9801      	ldr	r0, [sp, #4]
   8c318:	1a25      	subs	r5, r4, r0
   8c31a:	d103      	bne.n	8c324 <_svfiprintf_r+0x6a>
   8c31c:	e01d      	b.n	8c35a <_svfiprintf_r+0xa0>
   8c31e:	2a25      	cmp	r2, #37	; 0x25
   8c320:	d1f5      	bne.n	8c30e <_svfiprintf_r+0x54>
   8c322:	e7f8      	b.n	8c316 <_svfiprintf_r+0x5c>
   8c324:	9a01      	ldr	r2, [sp, #4]
   8c326:	990d      	ldr	r1, [sp, #52]	; 0x34
   8c328:	e888 0024 	stmia.w	r8, {r2, r5}
   8c32c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c32e:	194b      	adds	r3, r1, r5
   8c330:	1c50      	adds	r0, r2, #1
   8c332:	2807      	cmp	r0, #7
   8c334:	930d      	str	r3, [sp, #52]	; 0x34
   8c336:	900c      	str	r0, [sp, #48]	; 0x30
   8c338:	dc02      	bgt.n	8c340 <_svfiprintf_r+0x86>
   8c33a:	f108 0808 	add.w	r8, r8, #8
   8c33e:	e009      	b.n	8c354 <_svfiprintf_r+0x9a>
   8c340:	4658      	mov	r0, fp
   8c342:	4649      	mov	r1, r9
   8c344:	aa0b      	add	r2, sp, #44	; 0x2c
   8c346:	f7ff ff3b 	bl	8c1c0 <__ssprint_r>
   8c34a:	2800      	cmp	r0, #0
   8c34c:	f040 83a3 	bne.w	8ca96 <_svfiprintf_r+0x7dc>
   8c350:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c354:	9904      	ldr	r1, [sp, #16]
   8c356:	194b      	adds	r3, r1, r5
   8c358:	9304      	str	r3, [sp, #16]
   8c35a:	7822      	ldrb	r2, [r4, #0]
   8c35c:	2a00      	cmp	r2, #0
   8c35e:	f000 8393 	beq.w	8ca88 <_svfiprintf_r+0x7ce>
   8c362:	2200      	movs	r2, #0
   8c364:	3401      	adds	r4, #1
   8c366:	9401      	str	r4, [sp, #4]
   8c368:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c36c:	f04f 3cff 	mov.w	ip, #4294967295
   8c370:	9203      	str	r2, [sp, #12]
   8c372:	4617      	mov	r7, r2
   8c374:	9801      	ldr	r0, [sp, #4]
   8c376:	f810 3b01 	ldrb.w	r3, [r0], #1
   8c37a:	9001      	str	r0, [sp, #4]
   8c37c:	2b63      	cmp	r3, #99	; 0x63
   8c37e:	f000 80b3 	beq.w	8c4e8 <_svfiprintf_r+0x22e>
   8c382:	dc33      	bgt.n	8c3ec <_svfiprintf_r+0x132>
   8c384:	2b39      	cmp	r3, #57	; 0x39
   8c386:	dc1a      	bgt.n	8c3be <_svfiprintf_r+0x104>
   8c388:	2b31      	cmp	r3, #49	; 0x31
   8c38a:	f280 8091 	bge.w	8c4b0 <_svfiprintf_r+0x1f6>
   8c38e:	2b2b      	cmp	r3, #43	; 0x2b
   8c390:	d101      	bne.n	8c396 <_svfiprintf_r+0xdc>
   8c392:	461a      	mov	r2, r3
   8c394:	e7ee      	b.n	8c374 <_svfiprintf_r+0xba>
   8c396:	dc0a      	bgt.n	8c3ae <_svfiprintf_r+0xf4>
   8c398:	2b23      	cmp	r3, #35	; 0x23
   8c39a:	d055      	beq.n	8c448 <_svfiprintf_r+0x18e>
   8c39c:	2b2a      	cmp	r3, #42	; 0x2a
   8c39e:	d056      	beq.n	8c44e <_svfiprintf_r+0x194>
   8c3a0:	2b20      	cmp	r3, #32
   8c3a2:	f040 81f6 	bne.w	8c792 <_svfiprintf_r+0x4d8>
   8c3a6:	2a00      	cmp	r2, #0
   8c3a8:	bf08      	it	eq
   8c3aa:	2220      	moveq	r2, #32
   8c3ac:	e7e2      	b.n	8c374 <_svfiprintf_r+0xba>
   8c3ae:	2b2e      	cmp	r3, #46	; 0x2e
   8c3b0:	d058      	beq.n	8c464 <_svfiprintf_r+0x1aa>
   8c3b2:	2b30      	cmp	r3, #48	; 0x30
   8c3b4:	d079      	beq.n	8c4aa <_svfiprintf_r+0x1f0>
   8c3b6:	2b2d      	cmp	r3, #45	; 0x2d
   8c3b8:	f040 81eb 	bne.w	8c792 <_svfiprintf_r+0x4d8>
   8c3bc:	e04f      	b.n	8c45e <_svfiprintf_r+0x1a4>
   8c3be:	2b4f      	cmp	r3, #79	; 0x4f
   8c3c0:	f000 80de 	beq.w	8c580 <_svfiprintf_r+0x2c6>
   8c3c4:	dc07      	bgt.n	8c3d6 <_svfiprintf_r+0x11c>
   8c3c6:	2b44      	cmp	r3, #68	; 0x44
   8c3c8:	f040 81e3 	bne.w	8c792 <_svfiprintf_r+0x4d8>
   8c3cc:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c3d0:	f047 0710 	orr.w	r7, r7, #16
   8c3d4:	e090      	b.n	8c4f8 <_svfiprintf_r+0x23e>
   8c3d6:	2b55      	cmp	r3, #85	; 0x55
   8c3d8:	f000 811f 	beq.w	8c61a <_svfiprintf_r+0x360>
   8c3dc:	2b58      	cmp	r3, #88	; 0x58
   8c3de:	f040 81d8 	bne.w	8c792 <_svfiprintf_r+0x4d8>
   8c3e2:	4daf      	ldr	r5, [pc, #700]	; (8c6a0 <_svfiprintf_r+0x3e6>)
   8c3e4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c3e8:	9505      	str	r5, [sp, #20]
   8c3ea:	e130      	b.n	8c64e <_svfiprintf_r+0x394>
   8c3ec:	2b6f      	cmp	r3, #111	; 0x6f
   8c3ee:	f000 80c9 	beq.w	8c584 <_svfiprintf_r+0x2ca>
   8c3f2:	dc10      	bgt.n	8c416 <_svfiprintf_r+0x15c>
   8c3f4:	2b69      	cmp	r3, #105	; 0x69
   8c3f6:	d024      	beq.n	8c442 <_svfiprintf_r+0x188>
   8c3f8:	dc07      	bgt.n	8c40a <_svfiprintf_r+0x150>
   8c3fa:	2b64      	cmp	r3, #100	; 0x64
   8c3fc:	d021      	beq.n	8c442 <_svfiprintf_r+0x188>
   8c3fe:	2b68      	cmp	r3, #104	; 0x68
   8c400:	f040 81c7 	bne.w	8c792 <_svfiprintf_r+0x4d8>
   8c404:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   8c408:	e7b4      	b.n	8c374 <_svfiprintf_r+0xba>
   8c40a:	2b6c      	cmp	r3, #108	; 0x6c
   8c40c:	d05f      	beq.n	8c4ce <_svfiprintf_r+0x214>
   8c40e:	2b6e      	cmp	r3, #110	; 0x6e
   8c410:	f040 81bf 	bne.w	8c792 <_svfiprintf_r+0x4d8>
   8c414:	e096      	b.n	8c544 <_svfiprintf_r+0x28a>
   8c416:	2b73      	cmp	r3, #115	; 0x73
   8c418:	f000 80df 	beq.w	8c5da <_svfiprintf_r+0x320>
   8c41c:	dc06      	bgt.n	8c42c <_svfiprintf_r+0x172>
   8c41e:	2b70      	cmp	r3, #112	; 0x70
   8c420:	f000 80cd 	beq.w	8c5be <_svfiprintf_r+0x304>
   8c424:	2b71      	cmp	r3, #113	; 0x71
   8c426:	f040 81b4 	bne.w	8c792 <_svfiprintf_r+0x4d8>
   8c42a:	e05a      	b.n	8c4e2 <_svfiprintf_r+0x228>
   8c42c:	2b75      	cmp	r3, #117	; 0x75
   8c42e:	f000 80f6 	beq.w	8c61e <_svfiprintf_r+0x364>
   8c432:	2b78      	cmp	r3, #120	; 0x78
   8c434:	f040 81ad 	bne.w	8c792 <_svfiprintf_r+0x4d8>
   8c438:	4d9a      	ldr	r5, [pc, #616]	; (8c6a4 <_svfiprintf_r+0x3ea>)
   8c43a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c43e:	9505      	str	r5, [sp, #20]
   8c440:	e105      	b.n	8c64e <_svfiprintf_r+0x394>
   8c442:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c446:	e057      	b.n	8c4f8 <_svfiprintf_r+0x23e>
   8c448:	f047 0701 	orr.w	r7, r7, #1
   8c44c:	e792      	b.n	8c374 <_svfiprintf_r+0xba>
   8c44e:	1d33      	adds	r3, r6, #4
   8c450:	6836      	ldr	r6, [r6, #0]
   8c452:	2e00      	cmp	r6, #0
   8c454:	9603      	str	r6, [sp, #12]
   8c456:	da15      	bge.n	8c484 <_svfiprintf_r+0x1ca>
   8c458:	4270      	negs	r0, r6
   8c45a:	9003      	str	r0, [sp, #12]
   8c45c:	461e      	mov	r6, r3
   8c45e:	f047 0704 	orr.w	r7, r7, #4
   8c462:	e787      	b.n	8c374 <_svfiprintf_r+0xba>
   8c464:	9901      	ldr	r1, [sp, #4]
   8c466:	f811 3b01 	ldrb.w	r3, [r1], #1
   8c46a:	2b2a      	cmp	r3, #42	; 0x2a
   8c46c:	9101      	str	r1, [sp, #4]
   8c46e:	d10b      	bne.n	8c488 <_svfiprintf_r+0x1ce>
   8c470:	f8d6 c000 	ldr.w	ip, [r6]
   8c474:	1d33      	adds	r3, r6, #4
   8c476:	f1bc 0f00 	cmp.w	ip, #0
   8c47a:	da03      	bge.n	8c484 <_svfiprintf_r+0x1ca>
   8c47c:	461e      	mov	r6, r3
   8c47e:	f04f 3cff 	mov.w	ip, #4294967295
   8c482:	e777      	b.n	8c374 <_svfiprintf_r+0xba>
   8c484:	461e      	mov	r6, r3
   8c486:	e775      	b.n	8c374 <_svfiprintf_r+0xba>
   8c488:	f04f 0c00 	mov.w	ip, #0
   8c48c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8c490:	2809      	cmp	r0, #9
   8c492:	d807      	bhi.n	8c4a4 <_svfiprintf_r+0x1ea>
   8c494:	9901      	ldr	r1, [sp, #4]
   8c496:	230a      	movs	r3, #10
   8c498:	fb03 0c0c 	mla	ip, r3, ip, r0
   8c49c:	f811 3b01 	ldrb.w	r3, [r1], #1
   8c4a0:	9101      	str	r1, [sp, #4]
   8c4a2:	e7f3      	b.n	8c48c <_svfiprintf_r+0x1d2>
   8c4a4:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   8c4a8:	e768      	b.n	8c37c <_svfiprintf_r+0xc2>
   8c4aa:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8c4ae:	e761      	b.n	8c374 <_svfiprintf_r+0xba>
   8c4b0:	9801      	ldr	r0, [sp, #4]
   8c4b2:	2100      	movs	r1, #0
   8c4b4:	3b30      	subs	r3, #48	; 0x30
   8c4b6:	240a      	movs	r4, #10
   8c4b8:	fb04 3101 	mla	r1, r4, r1, r3
   8c4bc:	f810 3b01 	ldrb.w	r3, [r0], #1
   8c4c0:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   8c4c4:	2c09      	cmp	r4, #9
   8c4c6:	9001      	str	r0, [sp, #4]
   8c4c8:	d9f4      	bls.n	8c4b4 <_svfiprintf_r+0x1fa>
   8c4ca:	9103      	str	r1, [sp, #12]
   8c4cc:	e756      	b.n	8c37c <_svfiprintf_r+0xc2>
   8c4ce:	9901      	ldr	r1, [sp, #4]
   8c4d0:	780b      	ldrb	r3, [r1, #0]
   8c4d2:	2b6c      	cmp	r3, #108	; 0x6c
   8c4d4:	d102      	bne.n	8c4dc <_svfiprintf_r+0x222>
   8c4d6:	1c48      	adds	r0, r1, #1
   8c4d8:	9001      	str	r0, [sp, #4]
   8c4da:	e002      	b.n	8c4e2 <_svfiprintf_r+0x228>
   8c4dc:	f047 0710 	orr.w	r7, r7, #16
   8c4e0:	e748      	b.n	8c374 <_svfiprintf_r+0xba>
   8c4e2:	f047 0720 	orr.w	r7, r7, #32
   8c4e6:	e745      	b.n	8c374 <_svfiprintf_r+0xba>
   8c4e8:	6832      	ldr	r2, [r6, #0]
   8c4ea:	2500      	movs	r5, #0
   8c4ec:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   8c4f0:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8c4f4:	3604      	adds	r6, #4
   8c4f6:	e156      	b.n	8c7a6 <_svfiprintf_r+0x4ec>
   8c4f8:	06ba      	lsls	r2, r7, #26
   8c4fa:	d507      	bpl.n	8c50c <_svfiprintf_r+0x252>
   8c4fc:	3607      	adds	r6, #7
   8c4fe:	f026 0507 	bic.w	r5, r6, #7
   8c502:	f105 0608 	add.w	r6, r5, #8
   8c506:	e9d5 4500 	ldrd	r4, r5, [r5]
   8c50a:	e00f      	b.n	8c52c <_svfiprintf_r+0x272>
   8c50c:	f017 0f10 	tst.w	r7, #16
   8c510:	f106 0104 	add.w	r1, r6, #4
   8c514:	d001      	beq.n	8c51a <_svfiprintf_r+0x260>
   8c516:	6832      	ldr	r2, [r6, #0]
   8c518:	e005      	b.n	8c526 <_svfiprintf_r+0x26c>
   8c51a:	f017 0f40 	tst.w	r7, #64	; 0x40
   8c51e:	6832      	ldr	r2, [r6, #0]
   8c520:	d001      	beq.n	8c526 <_svfiprintf_r+0x26c>
   8c522:	b214      	sxth	r4, r2
   8c524:	e000      	b.n	8c528 <_svfiprintf_r+0x26e>
   8c526:	4614      	mov	r4, r2
   8c528:	17e5      	asrs	r5, r4, #31
   8c52a:	460e      	mov	r6, r1
   8c52c:	2c00      	cmp	r4, #0
   8c52e:	f175 0200 	sbcs.w	r2, r5, #0
   8c532:	f280 80b9 	bge.w	8c6a8 <_svfiprintf_r+0x3ee>
   8c536:	232d      	movs	r3, #45	; 0x2d
   8c538:	4264      	negs	r4, r4
   8c53a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8c53e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   8c542:	e0b1      	b.n	8c6a8 <_svfiprintf_r+0x3ee>
   8c544:	f017 0f20 	tst.w	r7, #32
   8c548:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c54c:	f106 0204 	add.w	r2, r6, #4
   8c550:	d005      	beq.n	8c55e <_svfiprintf_r+0x2a4>
   8c552:	9c04      	ldr	r4, [sp, #16]
   8c554:	6835      	ldr	r5, [r6, #0]
   8c556:	17e0      	asrs	r0, r4, #31
   8c558:	602c      	str	r4, [r5, #0]
   8c55a:	6068      	str	r0, [r5, #4]
   8c55c:	e004      	b.n	8c568 <_svfiprintf_r+0x2ae>
   8c55e:	06fb      	lsls	r3, r7, #27
   8c560:	d504      	bpl.n	8c56c <_svfiprintf_r+0x2b2>
   8c562:	6833      	ldr	r3, [r6, #0]
   8c564:	9904      	ldr	r1, [sp, #16]
   8c566:	6019      	str	r1, [r3, #0]
   8c568:	4616      	mov	r6, r2
   8c56a:	e6cf      	b.n	8c30c <_svfiprintf_r+0x52>
   8c56c:	6830      	ldr	r0, [r6, #0]
   8c56e:	9c04      	ldr	r4, [sp, #16]
   8c570:	f017 0f40 	tst.w	r7, #64	; 0x40
   8c574:	f106 0604 	add.w	r6, r6, #4
   8c578:	bf14      	ite	ne
   8c57a:	8004      	strhne	r4, [r0, #0]
   8c57c:	6004      	streq	r4, [r0, #0]
   8c57e:	e6c5      	b.n	8c30c <_svfiprintf_r+0x52>
   8c580:	f047 0710 	orr.w	r7, r7, #16
   8c584:	f017 0020 	ands.w	r0, r7, #32
   8c588:	d008      	beq.n	8c59c <_svfiprintf_r+0x2e2>
   8c58a:	1df3      	adds	r3, r6, #7
   8c58c:	f023 0507 	bic.w	r5, r3, #7
   8c590:	f105 0608 	add.w	r6, r5, #8
   8c594:	e9d5 4500 	ldrd	r4, r5, [r5]
   8c598:	2000      	movs	r0, #0
   8c59a:	e07c      	b.n	8c696 <_svfiprintf_r+0x3dc>
   8c59c:	f017 0110 	ands.w	r1, r7, #16
   8c5a0:	f106 0204 	add.w	r2, r6, #4
   8c5a4:	d106      	bne.n	8c5b4 <_svfiprintf_r+0x2fa>
   8c5a6:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   8c5aa:	d003      	beq.n	8c5b4 <_svfiprintf_r+0x2fa>
   8c5ac:	8834      	ldrh	r4, [r6, #0]
   8c5ae:	2500      	movs	r5, #0
   8c5b0:	4616      	mov	r6, r2
   8c5b2:	e7f1      	b.n	8c598 <_svfiprintf_r+0x2de>
   8c5b4:	6836      	ldr	r6, [r6, #0]
   8c5b6:	2500      	movs	r5, #0
   8c5b8:	4634      	mov	r4, r6
   8c5ba:	4616      	mov	r6, r2
   8c5bc:	e06b      	b.n	8c696 <_svfiprintf_r+0x3dc>
   8c5be:	4b39      	ldr	r3, [pc, #228]	; (8c6a4 <_svfiprintf_r+0x3ea>)
   8c5c0:	2130      	movs	r1, #48	; 0x30
   8c5c2:	2278      	movs	r2, #120	; 0x78
   8c5c4:	6834      	ldr	r4, [r6, #0]
   8c5c6:	2500      	movs	r5, #0
   8c5c8:	f047 0702 	orr.w	r7, r7, #2
   8c5cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   8c5d0:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   8c5d4:	3604      	adds	r6, #4
   8c5d6:	9305      	str	r3, [sp, #20]
   8c5d8:	e05c      	b.n	8c694 <_svfiprintf_r+0x3da>
   8c5da:	4631      	mov	r1, r6
   8c5dc:	2500      	movs	r5, #0
   8c5de:	f8d1 a000 	ldr.w	sl, [r1]
   8c5e2:	3604      	adds	r6, #4
   8c5e4:	45ac      	cmp	ip, r5
   8c5e6:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8c5ea:	4650      	mov	r0, sl
   8c5ec:	db11      	blt.n	8c612 <_svfiprintf_r+0x358>
   8c5ee:	4662      	mov	r2, ip
   8c5f0:	4629      	mov	r1, r5
   8c5f2:	f8cd c000 	str.w	ip, [sp]
   8c5f6:	f7ff fc55 	bl	8bea4 <memchr>
   8c5fa:	f8dd c000 	ldr.w	ip, [sp]
   8c5fe:	2800      	cmp	r0, #0
   8c600:	f000 80d5 	beq.w	8c7ae <_svfiprintf_r+0x4f4>
   8c604:	ebca 0400 	rsb	r4, sl, r0
   8c608:	4564      	cmp	r4, ip
   8c60a:	f340 80d2 	ble.w	8c7b2 <_svfiprintf_r+0x4f8>
   8c60e:	4664      	mov	r4, ip
   8c610:	e0cf      	b.n	8c7b2 <_svfiprintf_r+0x4f8>
   8c612:	f7fe fc53 	bl	8aebc <strlen>
   8c616:	4604      	mov	r4, r0
   8c618:	e0cb      	b.n	8c7b2 <_svfiprintf_r+0x4f8>
   8c61a:	f047 0710 	orr.w	r7, r7, #16
   8c61e:	06bd      	lsls	r5, r7, #26
   8c620:	d506      	bpl.n	8c630 <_svfiprintf_r+0x376>
   8c622:	1df0      	adds	r0, r6, #7
   8c624:	f020 0407 	bic.w	r4, r0, #7
   8c628:	f104 0608 	add.w	r6, r4, #8
   8c62c:	cc30      	ldmia	r4, {r4, r5}
   8c62e:	e00c      	b.n	8c64a <_svfiprintf_r+0x390>
   8c630:	f017 0f10 	tst.w	r7, #16
   8c634:	f106 0304 	add.w	r3, r6, #4
   8c638:	d103      	bne.n	8c642 <_svfiprintf_r+0x388>
   8c63a:	067c      	lsls	r4, r7, #25
   8c63c:	d501      	bpl.n	8c642 <_svfiprintf_r+0x388>
   8c63e:	8834      	ldrh	r4, [r6, #0]
   8c640:	e001      	b.n	8c646 <_svfiprintf_r+0x38c>
   8c642:	6835      	ldr	r5, [r6, #0]
   8c644:	462c      	mov	r4, r5
   8c646:	2500      	movs	r5, #0
   8c648:	461e      	mov	r6, r3
   8c64a:	2001      	movs	r0, #1
   8c64c:	e023      	b.n	8c696 <_svfiprintf_r+0x3dc>
   8c64e:	06b8      	lsls	r0, r7, #26
   8c650:	d507      	bpl.n	8c662 <_svfiprintf_r+0x3a8>
   8c652:	1df4      	adds	r4, r6, #7
   8c654:	f024 0107 	bic.w	r1, r4, #7
   8c658:	f101 0608 	add.w	r6, r1, #8
   8c65c:	e9d1 4500 	ldrd	r4, r5, [r1]
   8c660:	e00c      	b.n	8c67c <_svfiprintf_r+0x3c2>
   8c662:	f017 0f10 	tst.w	r7, #16
   8c666:	f106 0004 	add.w	r0, r6, #4
   8c66a:	d103      	bne.n	8c674 <_svfiprintf_r+0x3ba>
   8c66c:	0679      	lsls	r1, r7, #25
   8c66e:	d501      	bpl.n	8c674 <_svfiprintf_r+0x3ba>
   8c670:	8834      	ldrh	r4, [r6, #0]
   8c672:	e001      	b.n	8c678 <_svfiprintf_r+0x3be>
   8c674:	6836      	ldr	r6, [r6, #0]
   8c676:	4634      	mov	r4, r6
   8c678:	2500      	movs	r5, #0
   8c67a:	4606      	mov	r6, r0
   8c67c:	07fa      	lsls	r2, r7, #31
   8c67e:	d509      	bpl.n	8c694 <_svfiprintf_r+0x3da>
   8c680:	ea54 0205 	orrs.w	r2, r4, r5
   8c684:	d006      	beq.n	8c694 <_svfiprintf_r+0x3da>
   8c686:	2230      	movs	r2, #48	; 0x30
   8c688:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   8c68c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   8c690:	f047 0702 	orr.w	r7, r7, #2
   8c694:	2002      	movs	r0, #2
   8c696:	2100      	movs	r1, #0
   8c698:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   8c69c:	e005      	b.n	8c6aa <_svfiprintf_r+0x3f0>
   8c69e:	bf00      	nop
   8c6a0:	0008dfb6 	.word	0x0008dfb6
   8c6a4:	0008dfc7 	.word	0x0008dfc7
   8c6a8:	2001      	movs	r0, #1
   8c6aa:	f1bc 0f00 	cmp.w	ip, #0
   8c6ae:	bfa8      	it	ge
   8c6b0:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   8c6b4:	ea54 0105 	orrs.w	r1, r4, r5
   8c6b8:	d102      	bne.n	8c6c0 <_svfiprintf_r+0x406>
   8c6ba:	f1bc 0f00 	cmp.w	ip, #0
   8c6be:	d058      	beq.n	8c772 <_svfiprintf_r+0x4b8>
   8c6c0:	2801      	cmp	r0, #1
   8c6c2:	d01d      	beq.n	8c700 <_svfiprintf_r+0x446>
   8c6c4:	2802      	cmp	r0, #2
   8c6c6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8c6ca:	d041      	beq.n	8c750 <_svfiprintf_r+0x496>
   8c6cc:	f004 0207 	and.w	r2, r4, #7
   8c6d0:	08e4      	lsrs	r4, r4, #3
   8c6d2:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   8c6d6:	08e9      	lsrs	r1, r5, #3
   8c6d8:	4604      	mov	r4, r0
   8c6da:	460d      	mov	r5, r1
   8c6dc:	3230      	adds	r2, #48	; 0x30
   8c6de:	ea54 0105 	orrs.w	r1, r4, r5
   8c6e2:	469a      	mov	sl, r3
   8c6e4:	701a      	strb	r2, [r3, #0]
   8c6e6:	f103 33ff 	add.w	r3, r3, #4294967295
   8c6ea:	d1ef      	bne.n	8c6cc <_svfiprintf_r+0x412>
   8c6ec:	07f8      	lsls	r0, r7, #31
   8c6ee:	4655      	mov	r5, sl
   8c6f0:	d54a      	bpl.n	8c788 <_svfiprintf_r+0x4ce>
   8c6f2:	2a30      	cmp	r2, #48	; 0x30
   8c6f4:	d048      	beq.n	8c788 <_svfiprintf_r+0x4ce>
   8c6f6:	2230      	movs	r2, #48	; 0x30
   8c6f8:	469a      	mov	sl, r3
   8c6fa:	f805 2c01 	strb.w	r2, [r5, #-1]
   8c6fe:	e043      	b.n	8c788 <_svfiprintf_r+0x4ce>
   8c700:	2d00      	cmp	r5, #0
   8c702:	bf08      	it	eq
   8c704:	2c0a      	cmpeq	r4, #10
   8c706:	d203      	bcs.n	8c710 <_svfiprintf_r+0x456>
   8c708:	3430      	adds	r4, #48	; 0x30
   8c70a:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   8c70e:	e036      	b.n	8c77e <_svfiprintf_r+0x4c4>
   8c710:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8c714:	9302      	str	r3, [sp, #8]
   8c716:	4620      	mov	r0, r4
   8c718:	4629      	mov	r1, r5
   8c71a:	220a      	movs	r2, #10
   8c71c:	2300      	movs	r3, #0
   8c71e:	f8cd c000 	str.w	ip, [sp]
   8c722:	f000 f9c7 	bl	8cab4 <__aeabi_uldivmod>
   8c726:	9802      	ldr	r0, [sp, #8]
   8c728:	3230      	adds	r2, #48	; 0x30
   8c72a:	f800 2901 	strb.w	r2, [r0], #-1
   8c72e:	4629      	mov	r1, r5
   8c730:	220a      	movs	r2, #10
   8c732:	2300      	movs	r3, #0
   8c734:	f8dd a008 	ldr.w	sl, [sp, #8]
   8c738:	9002      	str	r0, [sp, #8]
   8c73a:	4620      	mov	r0, r4
   8c73c:	f000 f9ba 	bl	8cab4 <__aeabi_uldivmod>
   8c740:	4604      	mov	r4, r0
   8c742:	460d      	mov	r5, r1
   8c744:	ea54 0105 	orrs.w	r1, r4, r5
   8c748:	f8dd c000 	ldr.w	ip, [sp]
   8c74c:	d1e3      	bne.n	8c716 <_svfiprintf_r+0x45c>
   8c74e:	e01b      	b.n	8c788 <_svfiprintf_r+0x4ce>
   8c750:	9905      	ldr	r1, [sp, #20]
   8c752:	f004 000f 	and.w	r0, r4, #15
   8c756:	0924      	lsrs	r4, r4, #4
   8c758:	5c0a      	ldrb	r2, [r1, r0]
   8c75a:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   8c75e:	0929      	lsrs	r1, r5, #4
   8c760:	4604      	mov	r4, r0
   8c762:	460d      	mov	r5, r1
   8c764:	469a      	mov	sl, r3
   8c766:	f803 2901 	strb.w	r2, [r3], #-1
   8c76a:	ea54 0205 	orrs.w	r2, r4, r5
   8c76e:	d1ef      	bne.n	8c750 <_svfiprintf_r+0x496>
   8c770:	e00a      	b.n	8c788 <_svfiprintf_r+0x4ce>
   8c772:	b938      	cbnz	r0, 8c784 <_svfiprintf_r+0x4ca>
   8c774:	07f9      	lsls	r1, r7, #31
   8c776:	d505      	bpl.n	8c784 <_svfiprintf_r+0x4ca>
   8c778:	2030      	movs	r0, #48	; 0x30
   8c77a:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   8c77e:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   8c782:	e001      	b.n	8c788 <_svfiprintf_r+0x4ce>
   8c784:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   8c788:	ad18      	add	r5, sp, #96	; 0x60
   8c78a:	ebca 0405 	rsb	r4, sl, r5
   8c78e:	4665      	mov	r5, ip
   8c790:	e00f      	b.n	8c7b2 <_svfiprintf_r+0x4f8>
   8c792:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c796:	2b00      	cmp	r3, #0
   8c798:	f000 8176 	beq.w	8ca88 <_svfiprintf_r+0x7ce>
   8c79c:	2500      	movs	r5, #0
   8c79e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   8c7a2:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8c7a6:	2401      	movs	r4, #1
   8c7a8:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   8c7ac:	e001      	b.n	8c7b2 <_svfiprintf_r+0x4f8>
   8c7ae:	4664      	mov	r4, ip
   8c7b0:	4605      	mov	r5, r0
   8c7b2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8c7b6:	42ac      	cmp	r4, r5
   8c7b8:	bfac      	ite	ge
   8c7ba:	4621      	movge	r1, r4
   8c7bc:	4629      	movlt	r1, r5
   8c7be:	9102      	str	r1, [sp, #8]
   8c7c0:	b113      	cbz	r3, 8c7c8 <_svfiprintf_r+0x50e>
   8c7c2:	9802      	ldr	r0, [sp, #8]
   8c7c4:	1c42      	adds	r2, r0, #1
   8c7c6:	9202      	str	r2, [sp, #8]
   8c7c8:	f017 0102 	ands.w	r1, r7, #2
   8c7cc:	9106      	str	r1, [sp, #24]
   8c7ce:	d002      	beq.n	8c7d6 <_svfiprintf_r+0x51c>
   8c7d0:	9b02      	ldr	r3, [sp, #8]
   8c7d2:	1c98      	adds	r0, r3, #2
   8c7d4:	9002      	str	r0, [sp, #8]
   8c7d6:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   8c7da:	9207      	str	r2, [sp, #28]
   8c7dc:	d13c      	bne.n	8c858 <_svfiprintf_r+0x59e>
   8c7de:	9903      	ldr	r1, [sp, #12]
   8c7e0:	9b02      	ldr	r3, [sp, #8]
   8c7e2:	1acb      	subs	r3, r1, r3
   8c7e4:	2b00      	cmp	r3, #0
   8c7e6:	dd37      	ble.n	8c858 <_svfiprintf_r+0x59e>
   8c7e8:	48a5      	ldr	r0, [pc, #660]	; (8ca80 <_svfiprintf_r+0x7c6>)
   8c7ea:	2b10      	cmp	r3, #16
   8c7ec:	f8c8 0000 	str.w	r0, [r8]
   8c7f0:	dd1b      	ble.n	8c82a <_svfiprintf_r+0x570>
   8c7f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c7f4:	2110      	movs	r1, #16
   8c7f6:	980d      	ldr	r0, [sp, #52]	; 0x34
   8c7f8:	f8c8 1004 	str.w	r1, [r8, #4]
   8c7fc:	1c51      	adds	r1, r2, #1
   8c7fe:	3010      	adds	r0, #16
   8c800:	2907      	cmp	r1, #7
   8c802:	900d      	str	r0, [sp, #52]	; 0x34
   8c804:	910c      	str	r1, [sp, #48]	; 0x30
   8c806:	dc02      	bgt.n	8c80e <_svfiprintf_r+0x554>
   8c808:	f108 0808 	add.w	r8, r8, #8
   8c80c:	e00b      	b.n	8c826 <_svfiprintf_r+0x56c>
   8c80e:	4658      	mov	r0, fp
   8c810:	4649      	mov	r1, r9
   8c812:	aa0b      	add	r2, sp, #44	; 0x2c
   8c814:	9300      	str	r3, [sp, #0]
   8c816:	f7ff fcd3 	bl	8c1c0 <__ssprint_r>
   8c81a:	9b00      	ldr	r3, [sp, #0]
   8c81c:	2800      	cmp	r0, #0
   8c81e:	f040 813a 	bne.w	8ca96 <_svfiprintf_r+0x7dc>
   8c822:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c826:	3b10      	subs	r3, #16
   8c828:	e7de      	b.n	8c7e8 <_svfiprintf_r+0x52e>
   8c82a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8c82c:	f8c8 3004 	str.w	r3, [r8, #4]
   8c830:	18d1      	adds	r1, r2, r3
   8c832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8c834:	910d      	str	r1, [sp, #52]	; 0x34
   8c836:	1c58      	adds	r0, r3, #1
   8c838:	2807      	cmp	r0, #7
   8c83a:	900c      	str	r0, [sp, #48]	; 0x30
   8c83c:	dc02      	bgt.n	8c844 <_svfiprintf_r+0x58a>
   8c83e:	f108 0808 	add.w	r8, r8, #8
   8c842:	e009      	b.n	8c858 <_svfiprintf_r+0x59e>
   8c844:	4658      	mov	r0, fp
   8c846:	4649      	mov	r1, r9
   8c848:	aa0b      	add	r2, sp, #44	; 0x2c
   8c84a:	f7ff fcb9 	bl	8c1c0 <__ssprint_r>
   8c84e:	2800      	cmp	r0, #0
   8c850:	f040 8121 	bne.w	8ca96 <_svfiprintf_r+0x7dc>
   8c854:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c858:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   8c85c:	b1da      	cbz	r2, 8c896 <_svfiprintf_r+0x5dc>
   8c85e:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   8c862:	f8c8 1000 	str.w	r1, [r8]
   8c866:	990c      	ldr	r1, [sp, #48]	; 0x30
   8c868:	2301      	movs	r3, #1
   8c86a:	980d      	ldr	r0, [sp, #52]	; 0x34
   8c86c:	f8c8 3004 	str.w	r3, [r8, #4]
   8c870:	1c4b      	adds	r3, r1, #1
   8c872:	1c42      	adds	r2, r0, #1
   8c874:	2b07      	cmp	r3, #7
   8c876:	920d      	str	r2, [sp, #52]	; 0x34
   8c878:	930c      	str	r3, [sp, #48]	; 0x30
   8c87a:	dc02      	bgt.n	8c882 <_svfiprintf_r+0x5c8>
   8c87c:	f108 0808 	add.w	r8, r8, #8
   8c880:	e009      	b.n	8c896 <_svfiprintf_r+0x5dc>
   8c882:	4658      	mov	r0, fp
   8c884:	4649      	mov	r1, r9
   8c886:	aa0b      	add	r2, sp, #44	; 0x2c
   8c888:	f7ff fc9a 	bl	8c1c0 <__ssprint_r>
   8c88c:	2800      	cmp	r0, #0
   8c88e:	f040 8102 	bne.w	8ca96 <_svfiprintf_r+0x7dc>
   8c892:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c896:	9806      	ldr	r0, [sp, #24]
   8c898:	b1d0      	cbz	r0, 8c8d0 <_svfiprintf_r+0x616>
   8c89a:	aa0a      	add	r2, sp, #40	; 0x28
   8c89c:	f8c8 2000 	str.w	r2, [r8]
   8c8a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c8a2:	2102      	movs	r1, #2
   8c8a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8c8a6:	f8c8 1004 	str.w	r1, [r8, #4]
   8c8aa:	1c51      	adds	r1, r2, #1
   8c8ac:	1c98      	adds	r0, r3, #2
   8c8ae:	2907      	cmp	r1, #7
   8c8b0:	900d      	str	r0, [sp, #52]	; 0x34
   8c8b2:	910c      	str	r1, [sp, #48]	; 0x30
   8c8b4:	dc02      	bgt.n	8c8bc <_svfiprintf_r+0x602>
   8c8b6:	f108 0808 	add.w	r8, r8, #8
   8c8ba:	e009      	b.n	8c8d0 <_svfiprintf_r+0x616>
   8c8bc:	4658      	mov	r0, fp
   8c8be:	4649      	mov	r1, r9
   8c8c0:	aa0b      	add	r2, sp, #44	; 0x2c
   8c8c2:	f7ff fc7d 	bl	8c1c0 <__ssprint_r>
   8c8c6:	2800      	cmp	r0, #0
   8c8c8:	f040 80e5 	bne.w	8ca96 <_svfiprintf_r+0x7dc>
   8c8cc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c8d0:	9b07      	ldr	r3, [sp, #28]
   8c8d2:	2b80      	cmp	r3, #128	; 0x80
   8c8d4:	d13c      	bne.n	8c950 <_svfiprintf_r+0x696>
   8c8d6:	9803      	ldr	r0, [sp, #12]
   8c8d8:	9a02      	ldr	r2, [sp, #8]
   8c8da:	1a83      	subs	r3, r0, r2
   8c8dc:	2b00      	cmp	r3, #0
   8c8de:	dd37      	ble.n	8c950 <_svfiprintf_r+0x696>
   8c8e0:	4968      	ldr	r1, [pc, #416]	; (8ca84 <_svfiprintf_r+0x7ca>)
   8c8e2:	2b10      	cmp	r3, #16
   8c8e4:	f8c8 1000 	str.w	r1, [r8]
   8c8e8:	dd1b      	ble.n	8c922 <_svfiprintf_r+0x668>
   8c8ea:	980c      	ldr	r0, [sp, #48]	; 0x30
   8c8ec:	2210      	movs	r2, #16
   8c8ee:	990d      	ldr	r1, [sp, #52]	; 0x34
   8c8f0:	f8c8 2004 	str.w	r2, [r8, #4]
   8c8f4:	1c42      	adds	r2, r0, #1
   8c8f6:	3110      	adds	r1, #16
   8c8f8:	2a07      	cmp	r2, #7
   8c8fa:	910d      	str	r1, [sp, #52]	; 0x34
   8c8fc:	920c      	str	r2, [sp, #48]	; 0x30
   8c8fe:	dc02      	bgt.n	8c906 <_svfiprintf_r+0x64c>
   8c900:	f108 0808 	add.w	r8, r8, #8
   8c904:	e00b      	b.n	8c91e <_svfiprintf_r+0x664>
   8c906:	4658      	mov	r0, fp
   8c908:	4649      	mov	r1, r9
   8c90a:	aa0b      	add	r2, sp, #44	; 0x2c
   8c90c:	9300      	str	r3, [sp, #0]
   8c90e:	f7ff fc57 	bl	8c1c0 <__ssprint_r>
   8c912:	9b00      	ldr	r3, [sp, #0]
   8c914:	2800      	cmp	r0, #0
   8c916:	f040 80be 	bne.w	8ca96 <_svfiprintf_r+0x7dc>
   8c91a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c91e:	3b10      	subs	r3, #16
   8c920:	e7de      	b.n	8c8e0 <_svfiprintf_r+0x626>
   8c922:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c924:	980d      	ldr	r0, [sp, #52]	; 0x34
   8c926:	1c51      	adds	r1, r2, #1
   8c928:	f8c8 3004 	str.w	r3, [r8, #4]
   8c92c:	2907      	cmp	r1, #7
   8c92e:	4403      	add	r3, r0
   8c930:	930d      	str	r3, [sp, #52]	; 0x34
   8c932:	910c      	str	r1, [sp, #48]	; 0x30
   8c934:	dc02      	bgt.n	8c93c <_svfiprintf_r+0x682>
   8c936:	f108 0808 	add.w	r8, r8, #8
   8c93a:	e009      	b.n	8c950 <_svfiprintf_r+0x696>
   8c93c:	4658      	mov	r0, fp
   8c93e:	4649      	mov	r1, r9
   8c940:	aa0b      	add	r2, sp, #44	; 0x2c
   8c942:	f7ff fc3d 	bl	8c1c0 <__ssprint_r>
   8c946:	2800      	cmp	r0, #0
   8c948:	f040 80a5 	bne.w	8ca96 <_svfiprintf_r+0x7dc>
   8c94c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c950:	1b2d      	subs	r5, r5, r4
   8c952:	2d00      	cmp	r5, #0
   8c954:	dd34      	ble.n	8c9c0 <_svfiprintf_r+0x706>
   8c956:	484b      	ldr	r0, [pc, #300]	; (8ca84 <_svfiprintf_r+0x7ca>)
   8c958:	2d10      	cmp	r5, #16
   8c95a:	f8c8 0000 	str.w	r0, [r8]
   8c95e:	dd19      	ble.n	8c994 <_svfiprintf_r+0x6da>
   8c960:	980c      	ldr	r0, [sp, #48]	; 0x30
   8c962:	990d      	ldr	r1, [sp, #52]	; 0x34
   8c964:	1c43      	adds	r3, r0, #1
   8c966:	2210      	movs	r2, #16
   8c968:	3110      	adds	r1, #16
   8c96a:	2b07      	cmp	r3, #7
   8c96c:	f8c8 2004 	str.w	r2, [r8, #4]
   8c970:	910d      	str	r1, [sp, #52]	; 0x34
   8c972:	930c      	str	r3, [sp, #48]	; 0x30
   8c974:	dc02      	bgt.n	8c97c <_svfiprintf_r+0x6c2>
   8c976:	f108 0808 	add.w	r8, r8, #8
   8c97a:	e009      	b.n	8c990 <_svfiprintf_r+0x6d6>
   8c97c:	4658      	mov	r0, fp
   8c97e:	4649      	mov	r1, r9
   8c980:	aa0b      	add	r2, sp, #44	; 0x2c
   8c982:	f7ff fc1d 	bl	8c1c0 <__ssprint_r>
   8c986:	2800      	cmp	r0, #0
   8c988:	f040 8085 	bne.w	8ca96 <_svfiprintf_r+0x7dc>
   8c98c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c990:	3d10      	subs	r5, #16
   8c992:	e7e0      	b.n	8c956 <_svfiprintf_r+0x69c>
   8c994:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8c998:	1c51      	adds	r1, r2, #1
   8c99a:	f8c8 5004 	str.w	r5, [r8, #4]
   8c99e:	2907      	cmp	r1, #7
   8c9a0:	441d      	add	r5, r3
   8c9a2:	950d      	str	r5, [sp, #52]	; 0x34
   8c9a4:	910c      	str	r1, [sp, #48]	; 0x30
   8c9a6:	dc02      	bgt.n	8c9ae <_svfiprintf_r+0x6f4>
   8c9a8:	f108 0808 	add.w	r8, r8, #8
   8c9ac:	e008      	b.n	8c9c0 <_svfiprintf_r+0x706>
   8c9ae:	4658      	mov	r0, fp
   8c9b0:	4649      	mov	r1, r9
   8c9b2:	aa0b      	add	r2, sp, #44	; 0x2c
   8c9b4:	f7ff fc04 	bl	8c1c0 <__ssprint_r>
   8c9b8:	2800      	cmp	r0, #0
   8c9ba:	d16c      	bne.n	8ca96 <_svfiprintf_r+0x7dc>
   8c9bc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c9c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8c9c2:	980d      	ldr	r0, [sp, #52]	; 0x34
   8c9c4:	1c5a      	adds	r2, r3, #1
   8c9c6:	f8c8 4004 	str.w	r4, [r8, #4]
   8c9ca:	2a07      	cmp	r2, #7
   8c9cc:	4404      	add	r4, r0
   8c9ce:	f8c8 a000 	str.w	sl, [r8]
   8c9d2:	940d      	str	r4, [sp, #52]	; 0x34
   8c9d4:	920c      	str	r2, [sp, #48]	; 0x30
   8c9d6:	dc02      	bgt.n	8c9de <_svfiprintf_r+0x724>
   8c9d8:	f108 0308 	add.w	r3, r8, #8
   8c9dc:	e007      	b.n	8c9ee <_svfiprintf_r+0x734>
   8c9de:	4658      	mov	r0, fp
   8c9e0:	4649      	mov	r1, r9
   8c9e2:	aa0b      	add	r2, sp, #44	; 0x2c
   8c9e4:	f7ff fbec 	bl	8c1c0 <__ssprint_r>
   8c9e8:	2800      	cmp	r0, #0
   8c9ea:	d154      	bne.n	8ca96 <_svfiprintf_r+0x7dc>
   8c9ec:	ab18      	add	r3, sp, #96	; 0x60
   8c9ee:	077a      	lsls	r2, r7, #29
   8c9f0:	d40b      	bmi.n	8ca0a <_svfiprintf_r+0x750>
   8c9f2:	9804      	ldr	r0, [sp, #16]
   8c9f4:	9b02      	ldr	r3, [sp, #8]
   8c9f6:	9a03      	ldr	r2, [sp, #12]
   8c9f8:	990d      	ldr	r1, [sp, #52]	; 0x34
   8c9fa:	4293      	cmp	r3, r2
   8c9fc:	bfac      	ite	ge
   8c9fe:	18c0      	addge	r0, r0, r3
   8ca00:	1880      	addlt	r0, r0, r2
   8ca02:	9004      	str	r0, [sp, #16]
   8ca04:	2900      	cmp	r1, #0
   8ca06:	d036      	beq.n	8ca76 <_svfiprintf_r+0x7bc>
   8ca08:	e02f      	b.n	8ca6a <_svfiprintf_r+0x7b0>
   8ca0a:	9c03      	ldr	r4, [sp, #12]
   8ca0c:	9902      	ldr	r1, [sp, #8]
   8ca0e:	1a64      	subs	r4, r4, r1
   8ca10:	2c00      	cmp	r4, #0
   8ca12:	ddee      	ble.n	8c9f2 <_svfiprintf_r+0x738>
   8ca14:	481a      	ldr	r0, [pc, #104]	; (8ca80 <_svfiprintf_r+0x7c6>)
   8ca16:	2c10      	cmp	r4, #16
   8ca18:	6018      	str	r0, [r3, #0]
   8ca1a:	dd15      	ble.n	8ca48 <_svfiprintf_r+0x78e>
   8ca1c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8ca1e:	2010      	movs	r0, #16
   8ca20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8ca22:	6058      	str	r0, [r3, #4]
   8ca24:	1c48      	adds	r0, r1, #1
   8ca26:	3210      	adds	r2, #16
   8ca28:	2807      	cmp	r0, #7
   8ca2a:	920d      	str	r2, [sp, #52]	; 0x34
   8ca2c:	900c      	str	r0, [sp, #48]	; 0x30
   8ca2e:	dc01      	bgt.n	8ca34 <_svfiprintf_r+0x77a>
   8ca30:	3308      	adds	r3, #8
   8ca32:	e007      	b.n	8ca44 <_svfiprintf_r+0x78a>
   8ca34:	4658      	mov	r0, fp
   8ca36:	4649      	mov	r1, r9
   8ca38:	aa0b      	add	r2, sp, #44	; 0x2c
   8ca3a:	f7ff fbc1 	bl	8c1c0 <__ssprint_r>
   8ca3e:	2800      	cmp	r0, #0
   8ca40:	d129      	bne.n	8ca96 <_svfiprintf_r+0x7dc>
   8ca42:	ab18      	add	r3, sp, #96	; 0x60
   8ca44:	3c10      	subs	r4, #16
   8ca46:	e7e5      	b.n	8ca14 <_svfiprintf_r+0x75a>
   8ca48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8ca4a:	605c      	str	r4, [r3, #4]
   8ca4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8ca4e:	1c51      	adds	r1, r2, #1
   8ca50:	191c      	adds	r4, r3, r4
   8ca52:	2907      	cmp	r1, #7
   8ca54:	940d      	str	r4, [sp, #52]	; 0x34
   8ca56:	910c      	str	r1, [sp, #48]	; 0x30
   8ca58:	ddcb      	ble.n	8c9f2 <_svfiprintf_r+0x738>
   8ca5a:	4658      	mov	r0, fp
   8ca5c:	4649      	mov	r1, r9
   8ca5e:	aa0b      	add	r2, sp, #44	; 0x2c
   8ca60:	f7ff fbae 	bl	8c1c0 <__ssprint_r>
   8ca64:	2800      	cmp	r0, #0
   8ca66:	d0c4      	beq.n	8c9f2 <_svfiprintf_r+0x738>
   8ca68:	e015      	b.n	8ca96 <_svfiprintf_r+0x7dc>
   8ca6a:	4658      	mov	r0, fp
   8ca6c:	4649      	mov	r1, r9
   8ca6e:	aa0b      	add	r2, sp, #44	; 0x2c
   8ca70:	f7ff fba6 	bl	8c1c0 <__ssprint_r>
   8ca74:	b978      	cbnz	r0, 8ca96 <_svfiprintf_r+0x7dc>
   8ca76:	2500      	movs	r5, #0
   8ca78:	950c      	str	r5, [sp, #48]	; 0x30
   8ca7a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8ca7e:	e445      	b.n	8c30c <_svfiprintf_r+0x52>
   8ca80:	0008dfd8 	.word	0x0008dfd8
   8ca84:	0008dfe8 	.word	0x0008dfe8
   8ca88:	980d      	ldr	r0, [sp, #52]	; 0x34
   8ca8a:	b120      	cbz	r0, 8ca96 <_svfiprintf_r+0x7dc>
   8ca8c:	4658      	mov	r0, fp
   8ca8e:	4649      	mov	r1, r9
   8ca90:	aa0b      	add	r2, sp, #44	; 0x2c
   8ca92:	f7ff fb95 	bl	8c1c0 <__ssprint_r>
   8ca96:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   8ca9a:	9b04      	ldr	r3, [sp, #16]
   8ca9c:	f002 0140 	and.w	r1, r2, #64	; 0x40
   8caa0:	b208      	sxth	r0, r1
   8caa2:	2800      	cmp	r0, #0
   8caa4:	bf18      	it	ne
   8caa6:	f04f 33ff 	movne.w	r3, #4294967295
   8caaa:	4618      	mov	r0, r3
   8caac:	b029      	add	sp, #164	; 0xa4
   8caae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8cab2:	bf00      	nop

0008cab4 <__aeabi_uldivmod>:
   8cab4:	b94b      	cbnz	r3, 8caca <__aeabi_uldivmod+0x16>
   8cab6:	b942      	cbnz	r2, 8caca <__aeabi_uldivmod+0x16>
   8cab8:	2900      	cmp	r1, #0
   8caba:	bf08      	it	eq
   8cabc:	2800      	cmpeq	r0, #0
   8cabe:	d002      	beq.n	8cac6 <__aeabi_uldivmod+0x12>
   8cac0:	f04f 31ff 	mov.w	r1, #4294967295
   8cac4:	4608      	mov	r0, r1
   8cac6:	f000 b83b 	b.w	8cb40 <__aeabi_idiv0>
   8caca:	b082      	sub	sp, #8
   8cacc:	46ec      	mov	ip, sp
   8cace:	e92d 5000 	stmdb	sp!, {ip, lr}
   8cad2:	f000 f81d 	bl	8cb10 <__gnu_uldivmod_helper>
   8cad6:	f8dd e004 	ldr.w	lr, [sp, #4]
   8cada:	b002      	add	sp, #8
   8cadc:	bc0c      	pop	{r2, r3}
   8cade:	4770      	bx	lr

0008cae0 <__gnu_ldivmod_helper>:
   8cae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8cae4:	4616      	mov	r6, r2
   8cae6:	4698      	mov	r8, r3
   8cae8:	4604      	mov	r4, r0
   8caea:	460d      	mov	r5, r1
   8caec:	f000 f82a 	bl	8cb44 <__divdi3>
   8caf0:	fb06 fc01 	mul.w	ip, r6, r1
   8caf4:	fba6 2300 	umull	r2, r3, r6, r0
   8caf8:	fb00 c708 	mla	r7, r0, r8, ip
   8cafc:	18fb      	adds	r3, r7, r3
   8cafe:	1aa2      	subs	r2, r4, r2
   8cb00:	eb65 0303 	sbc.w	r3, r5, r3
   8cb04:	9c06      	ldr	r4, [sp, #24]
   8cb06:	e9c4 2300 	strd	r2, r3, [r4]
   8cb0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8cb0e:	bf00      	nop

0008cb10 <__gnu_uldivmod_helper>:
   8cb10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8cb14:	4690      	mov	r8, r2
   8cb16:	4606      	mov	r6, r0
   8cb18:	460f      	mov	r7, r1
   8cb1a:	461d      	mov	r5, r3
   8cb1c:	f000 f970 	bl	8ce00 <__udivdi3>
   8cb20:	fb00 f305 	mul.w	r3, r0, r5
   8cb24:	fba0 4508 	umull	r4, r5, r0, r8
   8cb28:	fb08 3801 	mla	r8, r8, r1, r3
   8cb2c:	9b06      	ldr	r3, [sp, #24]
   8cb2e:	4445      	add	r5, r8
   8cb30:	1b34      	subs	r4, r6, r4
   8cb32:	eb67 0505 	sbc.w	r5, r7, r5
   8cb36:	e9c3 4500 	strd	r4, r5, [r3]
   8cb3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8cb3e:	bf00      	nop

0008cb40 <__aeabi_idiv0>:
   8cb40:	4770      	bx	lr
   8cb42:	bf00      	nop

0008cb44 <__divdi3>:
   8cb44:	2900      	cmp	r1, #0
   8cb46:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8cb4a:	461d      	mov	r5, r3
   8cb4c:	f2c0 809d 	blt.w	8cc8a <__divdi3+0x146>
   8cb50:	2400      	movs	r4, #0
   8cb52:	2d00      	cmp	r5, #0
   8cb54:	f2c0 8094 	blt.w	8cc80 <__divdi3+0x13c>
   8cb58:	4680      	mov	r8, r0
   8cb5a:	460f      	mov	r7, r1
   8cb5c:	4694      	mov	ip, r2
   8cb5e:	461e      	mov	r6, r3
   8cb60:	bbe3      	cbnz	r3, 8cbdc <__divdi3+0x98>
   8cb62:	428a      	cmp	r2, r1
   8cb64:	d955      	bls.n	8cc12 <__divdi3+0xce>
   8cb66:	fab2 f782 	clz	r7, r2
   8cb6a:	b147      	cbz	r7, 8cb7e <__divdi3+0x3a>
   8cb6c:	f1c7 0520 	rsb	r5, r7, #32
   8cb70:	fa20 f605 	lsr.w	r6, r0, r5
   8cb74:	fa01 f107 	lsl.w	r1, r1, r7
   8cb78:	40ba      	lsls	r2, r7
   8cb7a:	40b8      	lsls	r0, r7
   8cb7c:	4331      	orrs	r1, r6
   8cb7e:	0c17      	lsrs	r7, r2, #16
   8cb80:	fbb1 f6f7 	udiv	r6, r1, r7
   8cb84:	fa1f fc82 	uxth.w	ip, r2
   8cb88:	fb07 1116 	mls	r1, r7, r6, r1
   8cb8c:	fb0c f506 	mul.w	r5, ip, r6
   8cb90:	0c03      	lsrs	r3, r0, #16
   8cb92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8cb96:	429d      	cmp	r5, r3
   8cb98:	d908      	bls.n	8cbac <__divdi3+0x68>
   8cb9a:	1e71      	subs	r1, r6, #1
   8cb9c:	189b      	adds	r3, r3, r2
   8cb9e:	f080 8113 	bcs.w	8cdc8 <__divdi3+0x284>
   8cba2:	429d      	cmp	r5, r3
   8cba4:	f240 8110 	bls.w	8cdc8 <__divdi3+0x284>
   8cba8:	3e02      	subs	r6, #2
   8cbaa:	189b      	adds	r3, r3, r2
   8cbac:	1b59      	subs	r1, r3, r5
   8cbae:	fbb1 f5f7 	udiv	r5, r1, r7
   8cbb2:	fb07 1315 	mls	r3, r7, r5, r1
   8cbb6:	fb0c fc05 	mul.w	ip, ip, r5
   8cbba:	b280      	uxth	r0, r0
   8cbbc:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
   8cbc0:	458c      	cmp	ip, r1
   8cbc2:	d907      	bls.n	8cbd4 <__divdi3+0x90>
   8cbc4:	1e6b      	subs	r3, r5, #1
   8cbc6:	188a      	adds	r2, r1, r2
   8cbc8:	f080 8100 	bcs.w	8cdcc <__divdi3+0x288>
   8cbcc:	4594      	cmp	ip, r2
   8cbce:	f240 80fd 	bls.w	8cdcc <__divdi3+0x288>
   8cbd2:	3d02      	subs	r5, #2
   8cbd4:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
   8cbd8:	2500      	movs	r5, #0
   8cbda:	e003      	b.n	8cbe4 <__divdi3+0xa0>
   8cbdc:	428b      	cmp	r3, r1
   8cbde:	d90c      	bls.n	8cbfa <__divdi3+0xb6>
   8cbe0:	2500      	movs	r5, #0
   8cbe2:	4629      	mov	r1, r5
   8cbe4:	460a      	mov	r2, r1
   8cbe6:	462b      	mov	r3, r5
   8cbe8:	b114      	cbz	r4, 8cbf0 <__divdi3+0xac>
   8cbea:	4252      	negs	r2, r2
   8cbec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8cbf0:	4610      	mov	r0, r2
   8cbf2:	4619      	mov	r1, r3
   8cbf4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8cbf8:	4770      	bx	lr
   8cbfa:	fab3 f583 	clz	r5, r3
   8cbfe:	2d00      	cmp	r5, #0
   8cc00:	f040 8087 	bne.w	8cd12 <__divdi3+0x1ce>
   8cc04:	428b      	cmp	r3, r1
   8cc06:	d301      	bcc.n	8cc0c <__divdi3+0xc8>
   8cc08:	4282      	cmp	r2, r0
   8cc0a:	d8ea      	bhi.n	8cbe2 <__divdi3+0x9e>
   8cc0c:	2500      	movs	r5, #0
   8cc0e:	2101      	movs	r1, #1
   8cc10:	e7e8      	b.n	8cbe4 <__divdi3+0xa0>
   8cc12:	b912      	cbnz	r2, 8cc1a <__divdi3+0xd6>
   8cc14:	2601      	movs	r6, #1
   8cc16:	fbb6 f2f2 	udiv	r2, r6, r2
   8cc1a:	fab2 f682 	clz	r6, r2
   8cc1e:	2e00      	cmp	r6, #0
   8cc20:	d139      	bne.n	8cc96 <__divdi3+0x152>
   8cc22:	1a8e      	subs	r6, r1, r2
   8cc24:	0c13      	lsrs	r3, r2, #16
   8cc26:	fa1f fc82 	uxth.w	ip, r2
   8cc2a:	2501      	movs	r5, #1
   8cc2c:	fbb6 f7f3 	udiv	r7, r6, r3
   8cc30:	fb03 6117 	mls	r1, r3, r7, r6
   8cc34:	fb0c f807 	mul.w	r8, ip, r7
   8cc38:	ea4f 4910 	mov.w	r9, r0, lsr #16
   8cc3c:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
   8cc40:	45b0      	cmp	r8, r6
   8cc42:	d906      	bls.n	8cc52 <__divdi3+0x10e>
   8cc44:	1e79      	subs	r1, r7, #1
   8cc46:	18b6      	adds	r6, r6, r2
   8cc48:	d202      	bcs.n	8cc50 <__divdi3+0x10c>
   8cc4a:	45b0      	cmp	r8, r6
   8cc4c:	f200 80d3 	bhi.w	8cdf6 <__divdi3+0x2b2>
   8cc50:	460f      	mov	r7, r1
   8cc52:	ebc8 0606 	rsb	r6, r8, r6
   8cc56:	fbb6 f1f3 	udiv	r1, r6, r3
   8cc5a:	fb03 6311 	mls	r3, r3, r1, r6
   8cc5e:	fb0c fc01 	mul.w	ip, ip, r1
   8cc62:	b280      	uxth	r0, r0
   8cc64:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   8cc68:	459c      	cmp	ip, r3
   8cc6a:	d906      	bls.n	8cc7a <__divdi3+0x136>
   8cc6c:	1e4e      	subs	r6, r1, #1
   8cc6e:	189a      	adds	r2, r3, r2
   8cc70:	d202      	bcs.n	8cc78 <__divdi3+0x134>
   8cc72:	4594      	cmp	ip, r2
   8cc74:	f200 80c2 	bhi.w	8cdfc <__divdi3+0x2b8>
   8cc78:	4631      	mov	r1, r6
   8cc7a:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   8cc7e:	e7b1      	b.n	8cbe4 <__divdi3+0xa0>
   8cc80:	43e4      	mvns	r4, r4
   8cc82:	4252      	negs	r2, r2
   8cc84:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8cc88:	e766      	b.n	8cb58 <__divdi3+0x14>
   8cc8a:	4240      	negs	r0, r0
   8cc8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8cc90:	f04f 34ff 	mov.w	r4, #4294967295
   8cc94:	e75d      	b.n	8cb52 <__divdi3+0xe>
   8cc96:	40b2      	lsls	r2, r6
   8cc98:	f1c6 0920 	rsb	r9, r6, #32
   8cc9c:	fa21 f709 	lsr.w	r7, r1, r9
   8cca0:	fa20 f909 	lsr.w	r9, r0, r9
   8cca4:	fa01 f106 	lsl.w	r1, r1, r6
   8cca8:	0c13      	lsrs	r3, r2, #16
   8ccaa:	fbb7 f8f3 	udiv	r8, r7, r3
   8ccae:	fa1f fc82 	uxth.w	ip, r2
   8ccb2:	fb03 7718 	mls	r7, r3, r8, r7
   8ccb6:	fb0c f508 	mul.w	r5, ip, r8
   8ccba:	ea49 0901 	orr.w	r9, r9, r1
   8ccbe:	ea4f 4119 	mov.w	r1, r9, lsr #16
   8ccc2:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
   8ccc6:	40b0      	lsls	r0, r6
   8ccc8:	42bd      	cmp	r5, r7
   8ccca:	d90a      	bls.n	8cce2 <__divdi3+0x19e>
   8cccc:	18bf      	adds	r7, r7, r2
   8ccce:	f108 36ff 	add.w	r6, r8, #4294967295
   8ccd2:	f080 808e 	bcs.w	8cdf2 <__divdi3+0x2ae>
   8ccd6:	42bd      	cmp	r5, r7
   8ccd8:	f240 808b 	bls.w	8cdf2 <__divdi3+0x2ae>
   8ccdc:	f1a8 0802 	sub.w	r8, r8, #2
   8cce0:	18bf      	adds	r7, r7, r2
   8cce2:	1b79      	subs	r1, r7, r5
   8cce4:	fbb1 f5f3 	udiv	r5, r1, r3
   8cce8:	fb03 1715 	mls	r7, r3, r5, r1
   8ccec:	fb0c f605 	mul.w	r6, ip, r5
   8ccf0:	fa1f f989 	uxth.w	r9, r9
   8ccf4:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
   8ccf8:	428e      	cmp	r6, r1
   8ccfa:	d906      	bls.n	8cd0a <__divdi3+0x1c6>
   8ccfc:	1e6f      	subs	r7, r5, #1
   8ccfe:	1889      	adds	r1, r1, r2
   8cd00:	d271      	bcs.n	8cde6 <__divdi3+0x2a2>
   8cd02:	428e      	cmp	r6, r1
   8cd04:	d96f      	bls.n	8cde6 <__divdi3+0x2a2>
   8cd06:	3d02      	subs	r5, #2
   8cd08:	1889      	adds	r1, r1, r2
   8cd0a:	1b8e      	subs	r6, r1, r6
   8cd0c:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
   8cd10:	e78c      	b.n	8cc2c <__divdi3+0xe8>
   8cd12:	f1c5 0120 	rsb	r1, r5, #32
   8cd16:	fa22 f301 	lsr.w	r3, r2, r1
   8cd1a:	fa06 f605 	lsl.w	r6, r6, r5
   8cd1e:	fa27 f201 	lsr.w	r2, r7, r1
   8cd22:	fa07 f705 	lsl.w	r7, r7, r5
   8cd26:	fa20 f101 	lsr.w	r1, r0, r1
   8cd2a:	431e      	orrs	r6, r3
   8cd2c:	ea4f 4916 	mov.w	r9, r6, lsr #16
   8cd30:	fbb2 f8f9 	udiv	r8, r2, r9
   8cd34:	fa1f fa86 	uxth.w	sl, r6
   8cd38:	fb09 2218 	mls	r2, r9, r8, r2
   8cd3c:	fb0a fb08 	mul.w	fp, sl, r8
   8cd40:	430f      	orrs	r7, r1
   8cd42:	0c3b      	lsrs	r3, r7, #16
   8cd44:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8cd48:	4593      	cmp	fp, r2
   8cd4a:	fa0c fc05 	lsl.w	ip, ip, r5
   8cd4e:	d908      	bls.n	8cd62 <__divdi3+0x21e>
   8cd50:	1992      	adds	r2, r2, r6
   8cd52:	f108 31ff 	add.w	r1, r8, #4294967295
   8cd56:	d24a      	bcs.n	8cdee <__divdi3+0x2aa>
   8cd58:	4593      	cmp	fp, r2
   8cd5a:	d948      	bls.n	8cdee <__divdi3+0x2aa>
   8cd5c:	f1a8 0802 	sub.w	r8, r8, #2
   8cd60:	1992      	adds	r2, r2, r6
   8cd62:	ebcb 0302 	rsb	r3, fp, r2
   8cd66:	fbb3 f1f9 	udiv	r1, r3, r9
   8cd6a:	fb09 3211 	mls	r2, r9, r1, r3
   8cd6e:	fb0a fa01 	mul.w	sl, sl, r1
   8cd72:	b2bf      	uxth	r7, r7
   8cd74:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
   8cd78:	459a      	cmp	sl, r3
   8cd7a:	d906      	bls.n	8cd8a <__divdi3+0x246>
   8cd7c:	1e4a      	subs	r2, r1, #1
   8cd7e:	199b      	adds	r3, r3, r6
   8cd80:	d233      	bcs.n	8cdea <__divdi3+0x2a6>
   8cd82:	459a      	cmp	sl, r3
   8cd84:	d931      	bls.n	8cdea <__divdi3+0x2a6>
   8cd86:	3902      	subs	r1, #2
   8cd88:	199b      	adds	r3, r3, r6
   8cd8a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
   8cd8e:	0c0f      	lsrs	r7, r1, #16
   8cd90:	fa1f f88c 	uxth.w	r8, ip
   8cd94:	fb08 f607 	mul.w	r6, r8, r7
   8cd98:	b28a      	uxth	r2, r1
   8cd9a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   8cd9e:	fb08 f802 	mul.w	r8, r8, r2
   8cda2:	fb0c 6202 	mla	r2, ip, r2, r6
   8cda6:	fb0c fc07 	mul.w	ip, ip, r7
   8cdaa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   8cdae:	4296      	cmp	r6, r2
   8cdb0:	bf88      	it	hi
   8cdb2:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
   8cdb6:	ebca 0303 	rsb	r3, sl, r3
   8cdba:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
   8cdbe:	4563      	cmp	r3, ip
   8cdc0:	d30e      	bcc.n	8cde0 <__divdi3+0x29c>
   8cdc2:	d005      	beq.n	8cdd0 <__divdi3+0x28c>
   8cdc4:	2500      	movs	r5, #0
   8cdc6:	e70d      	b.n	8cbe4 <__divdi3+0xa0>
   8cdc8:	460e      	mov	r6, r1
   8cdca:	e6ef      	b.n	8cbac <__divdi3+0x68>
   8cdcc:	461d      	mov	r5, r3
   8cdce:	e701      	b.n	8cbd4 <__divdi3+0x90>
   8cdd0:	fa00 f005 	lsl.w	r0, r0, r5
   8cdd4:	fa1f f888 	uxth.w	r8, r8
   8cdd8:	eb08 4502 	add.w	r5, r8, r2, lsl #16
   8cddc:	42a8      	cmp	r0, r5
   8cdde:	d2f1      	bcs.n	8cdc4 <__divdi3+0x280>
   8cde0:	3901      	subs	r1, #1
   8cde2:	2500      	movs	r5, #0
   8cde4:	e6fe      	b.n	8cbe4 <__divdi3+0xa0>
   8cde6:	463d      	mov	r5, r7
   8cde8:	e78f      	b.n	8cd0a <__divdi3+0x1c6>
   8cdea:	4611      	mov	r1, r2
   8cdec:	e7cd      	b.n	8cd8a <__divdi3+0x246>
   8cdee:	4688      	mov	r8, r1
   8cdf0:	e7b7      	b.n	8cd62 <__divdi3+0x21e>
   8cdf2:	46b0      	mov	r8, r6
   8cdf4:	e775      	b.n	8cce2 <__divdi3+0x19e>
   8cdf6:	3f02      	subs	r7, #2
   8cdf8:	18b6      	adds	r6, r6, r2
   8cdfa:	e72a      	b.n	8cc52 <__divdi3+0x10e>
   8cdfc:	3902      	subs	r1, #2
   8cdfe:	e73c      	b.n	8cc7a <__divdi3+0x136>

0008ce00 <__udivdi3>:
   8ce00:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8ce04:	4614      	mov	r4, r2
   8ce06:	4605      	mov	r5, r0
   8ce08:	460e      	mov	r6, r1
   8ce0a:	2b00      	cmp	r3, #0
   8ce0c:	d13d      	bne.n	8ce8a <__udivdi3+0x8a>
   8ce0e:	428a      	cmp	r2, r1
   8ce10:	d949      	bls.n	8cea6 <__udivdi3+0xa6>
   8ce12:	fab2 f782 	clz	r7, r2
   8ce16:	b147      	cbz	r7, 8ce2a <__udivdi3+0x2a>
   8ce18:	f1c7 0120 	rsb	r1, r7, #32
   8ce1c:	fa20 f201 	lsr.w	r2, r0, r1
   8ce20:	fa06 f607 	lsl.w	r6, r6, r7
   8ce24:	40bc      	lsls	r4, r7
   8ce26:	40bd      	lsls	r5, r7
   8ce28:	4316      	orrs	r6, r2
   8ce2a:	0c22      	lsrs	r2, r4, #16
   8ce2c:	fbb6 f0f2 	udiv	r0, r6, r2
   8ce30:	b2a1      	uxth	r1, r4
   8ce32:	fb02 6610 	mls	r6, r2, r0, r6
   8ce36:	fb01 f300 	mul.w	r3, r1, r0
   8ce3a:	0c2f      	lsrs	r7, r5, #16
   8ce3c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   8ce40:	42b3      	cmp	r3, r6
   8ce42:	d908      	bls.n	8ce56 <__udivdi3+0x56>
   8ce44:	1e47      	subs	r7, r0, #1
   8ce46:	1936      	adds	r6, r6, r4
   8ce48:	f080 80fa 	bcs.w	8d040 <__udivdi3+0x240>
   8ce4c:	42b3      	cmp	r3, r6
   8ce4e:	f240 80f7 	bls.w	8d040 <__udivdi3+0x240>
   8ce52:	3802      	subs	r0, #2
   8ce54:	1936      	adds	r6, r6, r4
   8ce56:	1af6      	subs	r6, r6, r3
   8ce58:	fbb6 f3f2 	udiv	r3, r6, r2
   8ce5c:	fb02 6213 	mls	r2, r2, r3, r6
   8ce60:	fb01 f103 	mul.w	r1, r1, r3
   8ce64:	b2ad      	uxth	r5, r5
   8ce66:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
   8ce6a:	4291      	cmp	r1, r2
   8ce6c:	d907      	bls.n	8ce7e <__udivdi3+0x7e>
   8ce6e:	1e5e      	subs	r6, r3, #1
   8ce70:	1912      	adds	r2, r2, r4
   8ce72:	f080 80e7 	bcs.w	8d044 <__udivdi3+0x244>
   8ce76:	4291      	cmp	r1, r2
   8ce78:	f240 80e4 	bls.w	8d044 <__udivdi3+0x244>
   8ce7c:	3b02      	subs	r3, #2
   8ce7e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   8ce82:	2100      	movs	r1, #0
   8ce84:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8ce88:	4770      	bx	lr
   8ce8a:	428b      	cmp	r3, r1
   8ce8c:	d843      	bhi.n	8cf16 <__udivdi3+0x116>
   8ce8e:	fab3 f483 	clz	r4, r3
   8ce92:	2c00      	cmp	r4, #0
   8ce94:	d142      	bne.n	8cf1c <__udivdi3+0x11c>
   8ce96:	428b      	cmp	r3, r1
   8ce98:	d302      	bcc.n	8cea0 <__udivdi3+0xa0>
   8ce9a:	4282      	cmp	r2, r0
   8ce9c:	f200 80e1 	bhi.w	8d062 <__udivdi3+0x262>
   8cea0:	2100      	movs	r1, #0
   8cea2:	2001      	movs	r0, #1
   8cea4:	e7ee      	b.n	8ce84 <__udivdi3+0x84>
   8cea6:	b912      	cbnz	r2, 8ceae <__udivdi3+0xae>
   8cea8:	2701      	movs	r7, #1
   8ceaa:	fbb7 f4f2 	udiv	r4, r7, r2
   8ceae:	fab4 f284 	clz	r2, r4
   8ceb2:	2a00      	cmp	r2, #0
   8ceb4:	f040 8089 	bne.w	8cfca <__udivdi3+0x1ca>
   8ceb8:	1b0a      	subs	r2, r1, r4
   8ceba:	0c23      	lsrs	r3, r4, #16
   8cebc:	b2a7      	uxth	r7, r4
   8cebe:	2101      	movs	r1, #1
   8cec0:	fbb2 f6f3 	udiv	r6, r2, r3
   8cec4:	fb03 2216 	mls	r2, r3, r6, r2
   8cec8:	fb07 f006 	mul.w	r0, r7, r6
   8cecc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   8ced0:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   8ced4:	4290      	cmp	r0, r2
   8ced6:	d907      	bls.n	8cee8 <__udivdi3+0xe8>
   8ced8:	1912      	adds	r2, r2, r4
   8ceda:	f106 3cff 	add.w	ip, r6, #4294967295
   8cede:	d202      	bcs.n	8cee6 <__udivdi3+0xe6>
   8cee0:	4290      	cmp	r0, r2
   8cee2:	f200 80d0 	bhi.w	8d086 <__udivdi3+0x286>
   8cee6:	4666      	mov	r6, ip
   8cee8:	1a12      	subs	r2, r2, r0
   8ceea:	fbb2 f0f3 	udiv	r0, r2, r3
   8ceee:	fb03 2310 	mls	r3, r3, r0, r2
   8cef2:	fb07 f700 	mul.w	r7, r7, r0
   8cef6:	b2ad      	uxth	r5, r5
   8cef8:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   8cefc:	429f      	cmp	r7, r3
   8cefe:	d907      	bls.n	8cf10 <__udivdi3+0x110>
   8cf00:	1e42      	subs	r2, r0, #1
   8cf02:	191b      	adds	r3, r3, r4
   8cf04:	f080 80a0 	bcs.w	8d048 <__udivdi3+0x248>
   8cf08:	429f      	cmp	r7, r3
   8cf0a:	f240 809d 	bls.w	8d048 <__udivdi3+0x248>
   8cf0e:	3802      	subs	r0, #2
   8cf10:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   8cf14:	e7b6      	b.n	8ce84 <__udivdi3+0x84>
   8cf16:	2100      	movs	r1, #0
   8cf18:	4608      	mov	r0, r1
   8cf1a:	e7b3      	b.n	8ce84 <__udivdi3+0x84>
   8cf1c:	f1c4 0620 	rsb	r6, r4, #32
   8cf20:	fa22 f706 	lsr.w	r7, r2, r6
   8cf24:	fa03 f304 	lsl.w	r3, r3, r4
   8cf28:	fa21 f506 	lsr.w	r5, r1, r6
   8cf2c:	fa01 f104 	lsl.w	r1, r1, r4
   8cf30:	fa20 f606 	lsr.w	r6, r0, r6
   8cf34:	433b      	orrs	r3, r7
   8cf36:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8cf3a:	fbb5 f7fc 	udiv	r7, r5, ip
   8cf3e:	fa1f f883 	uxth.w	r8, r3
   8cf42:	fb0c 5517 	mls	r5, ip, r7, r5
   8cf46:	fb08 f907 	mul.w	r9, r8, r7
   8cf4a:	ea46 0a01 	orr.w	sl, r6, r1
   8cf4e:	ea4f 411a 	mov.w	r1, sl, lsr #16
   8cf52:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   8cf56:	45a9      	cmp	r9, r5
   8cf58:	fa02 f204 	lsl.w	r2, r2, r4
   8cf5c:	d904      	bls.n	8cf68 <__udivdi3+0x168>
   8cf5e:	1e7e      	subs	r6, r7, #1
   8cf60:	18ed      	adds	r5, r5, r3
   8cf62:	f0c0 8081 	bcc.w	8d068 <__udivdi3+0x268>
   8cf66:	4637      	mov	r7, r6
   8cf68:	ebc9 0105 	rsb	r1, r9, r5
   8cf6c:	fbb1 f6fc 	udiv	r6, r1, ip
   8cf70:	fb0c 1516 	mls	r5, ip, r6, r1
   8cf74:	fb08 f806 	mul.w	r8, r8, r6
   8cf78:	fa1f fa8a 	uxth.w	sl, sl
   8cf7c:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
   8cf80:	4588      	cmp	r8, r1
   8cf82:	d903      	bls.n	8cf8c <__udivdi3+0x18c>
   8cf84:	1e75      	subs	r5, r6, #1
   8cf86:	18c9      	adds	r1, r1, r3
   8cf88:	d374      	bcc.n	8d074 <__udivdi3+0x274>
   8cf8a:	462e      	mov	r6, r5
   8cf8c:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   8cf90:	0c37      	lsrs	r7, r6, #16
   8cf92:	fa1f fc82 	uxth.w	ip, r2
   8cf96:	fb0c f507 	mul.w	r5, ip, r7
   8cf9a:	0c12      	lsrs	r2, r2, #16
   8cf9c:	b2b3      	uxth	r3, r6
   8cf9e:	fb0c fc03 	mul.w	ip, ip, r3
   8cfa2:	fb02 5303 	mla	r3, r2, r3, r5
   8cfa6:	fb02 f207 	mul.w	r2, r2, r7
   8cfaa:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8cfae:	429d      	cmp	r5, r3
   8cfb0:	bf88      	it	hi
   8cfb2:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
   8cfb6:	ebc8 0101 	rsb	r1, r8, r1
   8cfba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8cfbe:	4291      	cmp	r1, r2
   8cfc0:	d34c      	bcc.n	8d05c <__udivdi3+0x25c>
   8cfc2:	d043      	beq.n	8d04c <__udivdi3+0x24c>
   8cfc4:	4630      	mov	r0, r6
   8cfc6:	2100      	movs	r1, #0
   8cfc8:	e75c      	b.n	8ce84 <__udivdi3+0x84>
   8cfca:	4094      	lsls	r4, r2
   8cfcc:	f1c2 0520 	rsb	r5, r2, #32
   8cfd0:	fa21 f605 	lsr.w	r6, r1, r5
   8cfd4:	fa20 f505 	lsr.w	r5, r0, r5
   8cfd8:	fa01 f102 	lsl.w	r1, r1, r2
   8cfdc:	0c23      	lsrs	r3, r4, #16
   8cfde:	fbb6 fcf3 	udiv	ip, r6, r3
   8cfe2:	b2a7      	uxth	r7, r4
   8cfe4:	fb03 661c 	mls	r6, r3, ip, r6
   8cfe8:	fb07 f80c 	mul.w	r8, r7, ip
   8cfec:	4329      	orrs	r1, r5
   8cfee:	0c0d      	lsrs	r5, r1, #16
   8cff0:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   8cff4:	45b0      	cmp	r8, r6
   8cff6:	fa00 f502 	lsl.w	r5, r0, r2
   8cffa:	d908      	bls.n	8d00e <__udivdi3+0x20e>
   8cffc:	1936      	adds	r6, r6, r4
   8cffe:	f10c 30ff 	add.w	r0, ip, #4294967295
   8d002:	d23e      	bcs.n	8d082 <__udivdi3+0x282>
   8d004:	45b0      	cmp	r8, r6
   8d006:	d93c      	bls.n	8d082 <__udivdi3+0x282>
   8d008:	f1ac 0c02 	sub.w	ip, ip, #2
   8d00c:	1936      	adds	r6, r6, r4
   8d00e:	ebc8 0206 	rsb	r2, r8, r6
   8d012:	fbb2 f0f3 	udiv	r0, r2, r3
   8d016:	fb03 2610 	mls	r6, r3, r0, r2
   8d01a:	fb07 f800 	mul.w	r8, r7, r0
   8d01e:	b289      	uxth	r1, r1
   8d020:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   8d024:	4590      	cmp	r8, r2
   8d026:	d906      	bls.n	8d036 <__udivdi3+0x236>
   8d028:	1e46      	subs	r6, r0, #1
   8d02a:	1912      	adds	r2, r2, r4
   8d02c:	d227      	bcs.n	8d07e <__udivdi3+0x27e>
   8d02e:	4590      	cmp	r8, r2
   8d030:	d925      	bls.n	8d07e <__udivdi3+0x27e>
   8d032:	3802      	subs	r0, #2
   8d034:	1912      	adds	r2, r2, r4
   8d036:	ebc8 0202 	rsb	r2, r8, r2
   8d03a:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
   8d03e:	e73f      	b.n	8cec0 <__udivdi3+0xc0>
   8d040:	4638      	mov	r0, r7
   8d042:	e708      	b.n	8ce56 <__udivdi3+0x56>
   8d044:	4633      	mov	r3, r6
   8d046:	e71a      	b.n	8ce7e <__udivdi3+0x7e>
   8d048:	4610      	mov	r0, r2
   8d04a:	e761      	b.n	8cf10 <__udivdi3+0x110>
   8d04c:	fa00 f004 	lsl.w	r0, r0, r4
   8d050:	fa1f fc8c 	uxth.w	ip, ip
   8d054:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
   8d058:	4298      	cmp	r0, r3
   8d05a:	d2b3      	bcs.n	8cfc4 <__udivdi3+0x1c4>
   8d05c:	1e70      	subs	r0, r6, #1
   8d05e:	2100      	movs	r1, #0
   8d060:	e710      	b.n	8ce84 <__udivdi3+0x84>
   8d062:	4621      	mov	r1, r4
   8d064:	4620      	mov	r0, r4
   8d066:	e70d      	b.n	8ce84 <__udivdi3+0x84>
   8d068:	45a9      	cmp	r9, r5
   8d06a:	f67f af7c 	bls.w	8cf66 <__udivdi3+0x166>
   8d06e:	3f02      	subs	r7, #2
   8d070:	18ed      	adds	r5, r5, r3
   8d072:	e779      	b.n	8cf68 <__udivdi3+0x168>
   8d074:	4588      	cmp	r8, r1
   8d076:	d988      	bls.n	8cf8a <__udivdi3+0x18a>
   8d078:	3e02      	subs	r6, #2
   8d07a:	18c9      	adds	r1, r1, r3
   8d07c:	e786      	b.n	8cf8c <__udivdi3+0x18c>
   8d07e:	4630      	mov	r0, r6
   8d080:	e7d9      	b.n	8d036 <__udivdi3+0x236>
   8d082:	4684      	mov	ip, r0
   8d084:	e7c3      	b.n	8d00e <__udivdi3+0x20e>
   8d086:	3e02      	subs	r6, #2
   8d088:	1912      	adds	r2, r2, r4
   8d08a:	e72d      	b.n	8cee8 <__udivdi3+0xe8>

0008d08c <sd_trans_multipliers>:
   8d08c:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   8d09c:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   8d0ac:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   8d0bc:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0008d0cc <sd_mmc_trans_units>:
   8d0cc:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0008d0e8 <mmc_trans_multipliers>:
   8d0e8:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   8d0f8:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   8d108:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   8d118:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   8d128:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   8d138:	0010 0000 0020 0000 0040 0000 0080 0000     .... ...@.......
   8d148:	0100 0000 0200 0000 0400 0000 432a 534c     ............*CLS
   8d158:	0000 0000 452a 4553 0000 0000 452a 4553     ....*ESE....*ESE
   8d168:	003f 0000 452a 5253 003f 0000 492a 4e44     ?...*ESR?...*IDN
   8d178:	003f 0000 4f2a 4350 0000 0000 4f2a 4350     ?...*OPC....*OPC
   8d188:	003f 0000 522a 5453 0000 0000 532a 4552     ?...*RST....*SRE
   8d198:	0000 0000 532a 4552 003f 0000 532a 4254     ....*SRE?...*STB
   8d1a8:	003f 0000 542a 5453 003f 0000 572a 4941     ?...*TST?...*WAI
   8d1b8:	0000 0000 5953 5453 6d65 453a 5252 726f     ....SYSTem:ERRor
   8d1c8:	003f 0000 5953 5453 6d65 453a 5252 726f     ?...SYSTem:ERRor
   8d1d8:	4e3a 5845 3f54 0000 5953 5453 6d65 453a     :NEXT?..SYSTem:E
   8d1e8:	5252 726f 433a 554f 744e 003f 5953 5453     RRor:COUNt?.SYST
   8d1f8:	6d65 563a 5245 6953 6e6f 003f 5953 5453     em:VERSion?.SYST
   8d208:	6d65 543a 5059 3f45 0000 0000 5953 5453     em:TYPE?....SYST
   8d218:	6d65 4e3a 4d41 3f45 0000 0000 5953 5453     em:NAME?....SYST
   8d228:	6d65 443a 5345 3f43 0000 0000 5953 5453     em:DESC?....SYST
   8d238:	6d65 533a 3f4e 0000 5953 5453 6d65 443a     em:SN?..SYSTem:D
   8d248:	4f50 6557 3f72 0000 5953 5453 6d65 4d3a     POWer?..SYSTem:M
   8d258:	5841 7543 7272 6e65 3f74 0000 5953 5453     AXCurrent?..SYST
   8d268:	6d65 4e3a 4d4f 7543 7272 6e65 3f74 0000     em:NOMCurrent?..
   8d278:	5453 5441 7375 533a 4344 7261 7364 6174     STATus:SDCardsta
   8d288:	7574 3f73 0000 0000 5453 5441 7375 4c3a     tus?....STATus:L
   8d298:	4445 7453 7461 7375 003f 0000 5453 5441     EDStatus?...STAT
   8d2a8:	7375 423a 5455 6f74 736e 6174 7574 3f73     us:BUTtonstatus?
   8d2b8:	0000 0000 4f43 464e 6769 7275 3a65 454c     ....CONFigure:LE
   8d2c8:	0044 0000 4f43 464e 6769 7275 3a65 494c     D...CONFigure:LI
   8d2d8:	6847 7374 0000 0000 4f43 464e 6769 7275     Ghts....CONFigur
   8d2e8:	3a65 4f50 6557 0072 4f43 464e 6769 7275     e:POWer.CONFigur
   8d2f8:	3a65 4545 5250 4d4f 0000 0000 454d 5341     e:EEPROM....MEAS
   8d308:	7275 3a65 4545 5250 4d4f 003f 4f43 464e     ure:EEPROM?.CONF
   8d318:	6769 7275 3a65 4f43 6e55 6574 3a72 4e45     igure:COUnter:EN
   8d328:	6241 656c 0000 0000 4f43 464e 6769 7275     Able....CONFigur
   8d338:	3a65 4f43 6e55 6574 3a72 4944 6153 6c62     e:COUnter:DISabl
   8d348:	0065 0000 4f43 464e 6769 7275 3a65 4f43     e...CONFigure:CO
   8d358:	6e55 6574 3a72 5550 6853 0000 4f43 464e     Unter:PUSh..CONF
   8d368:	6769 7275 3a65 4f43 6e55 6574 3a72 5550     igure:COUnter:PU
   8d378:	6c4c 0000 4f43 464e 6769 7275 3a65 4f43     Ll..CONFigure:CO
   8d388:	6e55 6574 3a72 4553 4954 746e 6765 6172     Unter:SETIntegra
   8d398:	6974 6e6f 6954 656d 0000 0000 4f43 464e     tionTime....CONF
   8d3a8:	6769 7275 3a65 4f43 6e55 6574 3a72 4553     igure:COUnter:SE
   8d3b8:	5454 4c54 6e49 7570 0074 0000 4f43 464e     TTTLInput...CONF
   8d3c8:	6769 7275 3a65 4f43 6e55 6574 3a72 3a41     igure:COUnter:A:
   8d3d8:	4e45 6261 656c 003f 4f43 464e 6769 7275     ENable?.CONFigur
   8d3e8:	3a65 4f43 6e55 6574 3a72 3a41 4e45 6261     e:COUnter:A:ENab
   8d3f8:	656c 0000 4f43 464e 6769 7275 3a65 4f43     le..CONFigure:CO
   8d408:	6e55 6574 3a72 3a42 4e45 6261 656c 003f     Unter:B:ENable?.
   8d418:	4f43 464e 6769 7275 3a65 4f43 6e55 6574     CONFigure:COUnte
   8d428:	3a72 3a42 4e45 6261 656c 0000 4f43 464e     r:B:ENable..CONF
   8d438:	6769 7275 3a65 4f43 6e55 6574 3a72 3a41     igure:COUnter:A:
   8d448:	6552 6461 003f 0000 4f43 464e 6769 7275     Read?...CONFigur
   8d458:	3a65 4f43 6e55 6574 3a72 3a42 6552 6461     e:COUnter:B:Read
   8d468:	003f 0000 4f43 464e 6769 7275 3a65 4f43     ?...CONFigure:CO
   8d478:	6e55 6574 3a72 3a41 4e49 6554 7267 7461     Unter:A:INTegrat
   8d488:	6f69 746e 6d69 3f65 0000 0000 4f43 464e     iontime?....CONF
   8d498:	6769 7275 3a65 4f43 6e55 6574 3a72 3a41     igure:COUnter:A:
   8d4a8:	4e49 6554 7267 7461 6f69 746e 6d69 0065     INTegrationtime.
   8d4b8:	4f43 464e 6769 7275 3a65 4f43 6e55 6574     CONFigure:COUnte
   8d4c8:	3a72 3a42 4e49 6554 7267 7461 6f69 746e     r:B:INTegrationt
   8d4d8:	6d69 3f65 0000 0000 4f43 464e 6769 7275     ime?....CONFigur
   8d4e8:	3a65 4f43 6e55 6574 3a72 3a42 4e49 6554     e:COUnter:B:INTe
   8d4f8:	7267 7461 6f69 746e 6d69 0065 4f43 464e     grationtime.CONF
   8d508:	6769 7275 3a65 5454 694c 706e 7475 6e65     igure:TTLinputen
   8d518:	6261 656c 003f 0000 4f43 464e 6769 7275     able?...CONFigur
   8d528:	3a65 5454 694c 706e 7475 6e65 6261 656c     e:TTLinputenable
   8d538:	0000 0000 4f43 464e 6769 7275 3a65 5246     ....CONFigure:FR
   8d548:	5145 6575 636e 3f65 0000 0000 4f43 464e     EQuence?....CONF
   8d558:	6769 7275 3a65 5246 5145 6575 636e 0065     igure:FREQuence.
   8d568:	4f43 464e 6769 7275 3a65 4547 454e 616e     CONFigure:GENEna
   8d578:	6c62 3f65 0000 0000 4f43 464e 6769 7275     ble?....CONFigur
   8d588:	3a65 4547 454e 616e 6c62 0065 4f43 464e     e:GENEnable.CONF
   8d598:	6769 7275 3a65 4547 504e 6c75 6573 0000     igure:GENPulse..
   8d5a8:	4f43 464e 6769 7275 3a65 4d51 6f41 7475     CONFigure:QMAout
   8d5b8:	7570 3f74 0000 0000 4f43 464e 6769 7275     put?....CONFigur
   8d5c8:	3a65 4d51 6f41 7475 7570 0074 4f43 464e     e:QMAoutput.CONF
   8d5d8:	6769 7275 3a65 4d51 5341 6174 6574 003f     igure:QMAState?.
   8d5e8:	4f43 464e 6769 7275 3a65 4d51 5341 6174     CONFigure:QMASta
   8d5f8:	6574 0000 5453 5441 7375 513a 4555 7453     te..STATus:QUESt
   8d608:	6f69 616e 6c62 3f65 0000 0000 5453 5441     ionable?....STAT
   8d618:	7375 513a 4555 7453 6f69 616e 6c62 3a65     us:QUEStionable:
   8d628:	5645 4e45 3f74 0000 5453 5441 7375 513a     EVENt?..STATus:Q
   8d638:	4555 7453 6f69 616e 6c62 3a65 4e45 4241     UEStionable:ENAB
   8d648:	656c 0000 5453 5441 7375 513a 4555 7453     le..STATus:QUESt
   8d658:	6f69 616e 6c62 3a65 4e45 4241 656c 003f     ionable:ENABle?.
   8d668:	5453 5441 7375 503a 4552 6553 0074 0000     STATus:PRESet...
   8d678:	454d 5341 7275 3a65 4f56 544c 6761 3a65     MEASure:VOLTage:
   8d688:	4344 003f 4f43 464e 6769 7275 3a65 4f56     DC?.CONFigure:VO
   8d698:	544c 6761 3a65 4344 0000 0000 454d 5341     LTage:DC....MEAS
   8d6a8:	7275 3a65 4f56 544c 6761 3a65 4344 523a     ure:VOLTage:DC:R
   8d6b8:	5441 6f69 003f 0000 454d 5341 7275 3a65     ATio?...MEASure:
   8d6c8:	4f56 544c 6761 3a65 4341 003f 454d 5341     VOLTage:AC?.MEAS
   8d6d8:	7275 3a65 5543 5252 6e65 3a74 4344 003f     ure:CURRent:DC?.
   8d6e8:	454d 5341 7275 3a65 5543 5252 6e65 3a74     MEASure:CURRent:
   8d6f8:	4341 003f 454d 5341 7275 3a65 4552 6953     AC?.MEASure:RESi
   8d708:	7473 6e61 6563 003f 454d 5341 7275 3a65     stance?.MEASure:
   8d718:	5246 5345 7369 6174 636e 3f65 0000 0000     FRESistance?....
   8d728:	454d 5341 7275 3a65 5246 5145 6575 636e     MEASure:FREQuenc
   8d738:	3f79 0000 454d 5341 7275 3a65 4550 6952     y?..MEASure:PERi
   8d748:	646f 003f                                   od?.

0008d74c <scpi_commands>:
   8d74c:	d154 0008 2f51 0008 d15c 0008 2f91 0008     T...Q/..\..../..
   8d75c:	d164 0008 2fc5 0008 d16c 0008 2fed 0008     d..../..l..../..
   8d76c:	d174 0008 3029 0008 d17c 0008 305d 0008     t...)0..|...]0..
   8d77c:	d184 0008 3079 0008 d18c 0008 3091 0008     ....y0.......0..
   8d78c:	d194 0008 30b5 0008 d19c 0008 30e9 0008     .....0.......0..
   8d79c:	d1a4 0008 3111 0008 d1ac 0008 3139 0008     .....1......91..
   8d7ac:	d1b4 0008 3171 0008 d1bc 0008 31b1 0008     ....q1.......1..
   8d7bc:	d1cc 0008 31b1 0008 d1e0 0008 31f1 0008     .....1.......1..
   8d7cc:	d1f4 0008 3195 0008 d204 0008 3d7d 0008     .....1......}=..
   8d7dc:	d214 0008 3dc9 0008 d224 0008 3e15 0008     .....=..$....>..
   8d7ec:	d234 0008 3e61 0008 d240 0008 3e8d 0008     4...a>..@....>..
   8d7fc:	d250 0008 3ebd 0008 d264 0008 3ee9 0008     P....>..d....>..
   8d80c:	d278 0008 3f15 0008 d290 0008 3f3d 0008     x....?......=?..
   8d81c:	d2a4 0008 3f65 0008 d2bc 0008 4081 0008     ....e?.......@..
   8d82c:	d2cc 0008 4145 0008 d2e0 0008 3fd5 0008     ....EA.......?..
   8d83c:	d2f0 0008 3fcd 0008 d304 0008 3fc5 0008     .....?.......?..
   8d84c:	d314 0008 41e5 0008 d330 0008 41f9 0008     .....A..0....A..
   8d85c:	d34c 0008 420d 0008 d364 0008 4221 0008     L....B..d...!B..
   8d86c:	d37c 0008 4191 0008 d3a4 0008 4235 0008     |....A......5B..
   8d87c:	d3c4 0008 44e1 0008 d3e0 0008 4249 0008     .....D......IB..
   8d88c:	d3fc 0008 4521 0008 d418 0008 428d 0008     ....!E.......B..
   8d89c:	d434 0008 42d1 0008 d450 0008 4349 0008     4....B..P...IC..
   8d8ac:	d46c 0008 4561 0008 d494 0008 43c1 0008     l...aE.......C..
   8d8bc:	d4b8 0008 45a1 0008 d4e0 0008 4415 0008     .....E.......D..
   8d8cc:	d504 0008 45e1 0008 d520 0008 4469 0008     .....E.. ...iD..
   8d8dc:	d53c 0008 4621 0008 d554 0008 44ad 0008     <...!F..T....D..
   8d8ec:	d568 0008 4661 0008 d580 0008 46a1 0008     h...aF.......F..
   8d8fc:	d594 0008 46e5 0008 d5a8 0008 46f9 0008     .....F.......F..
   8d90c:	d5c0 0008 4789 0008 d5d4 0008 485d 0008     .....G......]H..
   8d91c:	d5e8 0008 489d 0008 d5fc 0008 3215 0008     .....H.......2..
   8d92c:	d614 0008 3215 0008 d630 0008 3279 0008     .....2..0...y2..
   8d93c:	d64c 0008 3251 0008 d668 0008 32ad 0008     L...Q2..h....2..
   8d94c:	d678 0008 3179 0008 d68c 0008 3179 0008     x...y1......y1..
   8d95c:	d6a4 0008 3179 0008 d6c0 0008 3179 0008     ....y1......y1..
   8d96c:	d6d4 0008 3179 0008 d6e8 0008 3179 0008     ....y1......y1..
   8d97c:	d6fc 0008 3179 0008 d710 0008 3179 0008     ....y1......y1..
   8d98c:	d728 0008 3179 0008 d73c 0008 3179 0008     (...y1..<...y1..
	...
   8d9a4:	6f4e 6520 7272 726f 0000 0000 7953 746e     No error....Synt
   8d9b4:	7861 6520 7272 726f 0000 0000 6e49 6176     ax error....Inva
   8d9c4:	696c 2064 6573 6170 6172 6f74 0072 0000     lid separator...
   8d9d4:	6e55 6564 6966 656e 2064 6568 6461 7265     Undefined header
   8d9e4:	0000 0000 6150 6172 656d 6574 2072 6f6e     ....Parameter no
   8d9f4:	2074 6c61 6f6c 6577 0064 0000 694d 7373     t allowed...Miss
   8da04:	6e69 2067 6170 6172 656d 6574 0072 0000     ing parameter...
   8da14:	6e49 6176 696c 2064 7573 6666 7869 0000     Invalid suffix..
   8da24:	7553 6666 7869 6e20 746f 6120 6c6c 776f     Suffix not allow
   8da34:	6465 0000 6e55 6e6b 776f 206e 7265 6f72     ed..Unknown erro
   8da44:	0072 0000 5443 2055 4546 0045 4554 5453     r...CTU FEE.TEST
   8da54:	5320 5043 2049 4e49 5453 5552 454d 544e      SCPI INSTRUMENT
   8da64:	5420 4953 3233 3532 0000 0000 3176 302e      TSI3225....v1.0
   8da74:	0000 0000 202c 0000 0d3b 000a 203b 0a0d     ...., ..;...; ..
   8da84:	0009 0000 0020 0000 494d 694e 756d 006d     .... ...MINimum.
   8da94:	414d 6958 756d 006d 4544 6146 6c75 0074     MAXimum.DEFault.
   8daa4:	5055 0000 4f44 4e57 0000 0000 414e 004e     UP..DOWN....NAN.
   8dab4:	4e49 0046 494e 464e 0000 0000 5655 0000     INF.NINF....UV..
   8dac4:	564d 0000 0056 0000 564b 0000 4155 0000     MV..V...KV..UA..
   8dad4:	414d 0000 0041 0000 414b 0000 484f 004d     MA..A...KA..OHM.
   8dae4:	4f4b 4d48 0000 0000 4f4d 4d48 0000 0000     KOHM....MOHM....
   8daf4:	5a48 0000 484b 005a 484d 005a 4847 005a     HZ..KHZ.MHZ.GHZ.
   8db04:	4543 004c 5350 0000 534e 0000 5355 0000     CEL.PS..NS..US..
   8db14:	534d 0000 0053 0000 494d 004e 5248 0000     MS..S...MIN.HR..
   8db24:	0000 0000                                   ....

0008db28 <scpi_units_def>:
   8db28:	dac0 0008 0001 0000 ed8d a0b5 c6f7 3eb0     ...............>
   8db38:	dac4 0008 0001 0000 a9fc d2f1 624d 3f50     ............MbP?
   8db48:	dac8 0008 0001 0000 0000 0000 0000 3ff0     ...............?
   8db58:	dacc 0008 0001 0000 0000 0000 4000 408f     .............@.@
   8db68:	dad0 0008 0002 0000 ed8d a0b5 c6f7 3eb0     ...............>
   8db78:	dad4 0008 0002 0000 a9fc d2f1 624d 3f50     ............MbP?
   8db88:	dad8 0008 0002 0000 0000 0000 0000 3ff0     ...............?
   8db98:	dadc 0008 0002 0000 0000 0000 4000 408f     .............@.@
   8dba8:	dae0 0008 0003 0000 0000 0000 0000 3ff0     ...............?
   8dbb8:	dae4 0008 0003 0000 0000 0000 4000 408f     .............@.@
   8dbc8:	daec 0008 0003 0000 0000 0000 8480 412e     ...............A
   8dbd8:	daf4 0008 0004 0000 0000 0000 0000 3ff0     ...............?
   8dbe8:	daf8 0008 0004 0000 0000 0000 4000 408f     .............@.@
   8dbf8:	dafc 0008 0004 0000 0000 0000 8480 412e     ...............A
   8dc08:	db00 0008 0004 0000 0000 0000 cd65 41cd     ............e..A
   8dc18:	db04 0008 0005 0000 0000 0000 0000 3ff0     ...............?
   8dc28:	db08 0008 0006 0000 ea11 812d 9799 3d71     ..........-...q=
   8dc38:	db0c 0008 0006 0000 d695 e826 2e0b 3e11     ..........&....>
   8dc48:	db10 0008 0006 0000 ed8d a0b5 c6f7 3eb0     ...............>
   8dc58:	db14 0008 0006 0000 a9fc d2f1 624d 3f50     ............MbP?
   8dc68:	db18 0008 0006 0000 0000 0000 0000 3ff0     ...............?
   8dc78:	db1c 0008 0006 0000 0000 0000 0000 404e     ..............N@
   8dc88:	db20 0008 0006 0000 0000 0000 2000 40ac      ............ .@
	...

0008dca8 <scpi_special_numbers_def>:
   8dca8:	da8c 0008 0001 0000 da94 0008 0002 0000     ................
   8dcb8:	da9c 0008 0003 0000 daa4 0008 0004 0000     ................
   8dcc8:	daa8 0008 0005 0000 dab0 0008 0006 0000     ................
   8dcd8:	dab4 0008 0007 0000 dab8 0008 0008 0000     ................
	...
   8dcf0:	6c25 0067 3a3f 5d5b 0000 0000 3f3a 0000     %lg.?:[]....:?..
   8dd00:	6f4c 2077 6f63 7473 6420 6175 206c 3031     Low cost dual 10
   8dd10:	484d 207a 6f63 6e75 6574 7372 7620 0d32     MHz counters v2.
   8dd20:	0000 0000 7830 3030 3030 000d 3438 6d30     ....0x0000..840m
   8dd30:	0d57 0000 6d30 0d41 0000 0000 4b4f 000d     W...0mA.....OK..
   8dd40:	7570 6873 6465 000d 6572 656c 7361 6465     pushed..released
   8dd50:	000d 0000 4e4f 0000 464f 0046 6f4e 6e20     ....ON..OFF.No n
   8dd60:	7765 7620 6c61 000d 7525 000d 4e49 000d     ew val..%u..IN..
   8dd70:	4547 0d4e 0000 0000 5453 5441 0d45 0000     GEN.....STATE...
   8dd80:	4e49 0000 4547 004e 5453 5441 0045 0000     IN..GEN.STATE...
   8dd90:	2e25 732a 0000 0000 2a2a 5245 4f52 3a52     %.*s....**ERROR:
   8dda0:	2520 2c64 2220 7325 0d22 000a 2a2a 5253      %d, "%s"...**SR
   8ddb0:	3a51 3020 2578 2058 2528 2964 0a0d 0000     Q: 0x%X (%d)....
   8ddc0:	2a2a 5443 4c52 2520 3230 3a78 3020 2578     **CTRL %02x: 0x%
   8ddd0:	2058 2528 2964 0a0d 0000 0000 2a2a 6554     X (%d)......**Te
   8dde0:	7473 0a0d 0000 0000 2a2a 6552 6573 0d74     st......**Reset.
   8ddf0:	000a 0000 5322 2f44 4d4d 2043 6143 6472     ...."SD/MMC Card
   8de00:	6f20 6576 2072 434d 2049 6c53 746f 3020      over MCI Slot 0
   8de10:	0022 0000 3231 3133 3332 3231 3133 3332     "...123123123123
	...
   8de2c:	aa00 aaaa aaaa aaaa eeaa eeee eeee eeee     ................
   8de3c:	feee ffff ffff ffff ffff ffff 7fff dfbf     ................
   8de4c:	f7ef fdfb 7efc dfbf f7ef fdfb 007e 0000     .....~......~...
   8de5c:	6f43 6e75 6574 3072 7620 6c61 6575 203a     Counter0 value: 
   8de6c:	6c25 756c 000d 0000 6f43 6e75 6574 3172     %llu....Counter1
   8de7c:	7620 6c61 6575 203a 6c25 756c 000d 0000      value: %llu....

0008de8c <_ctype_>:
   8de8c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   8de9c:	2020 2020 2020 2020 2020 2020 2020 2020                     
   8deac:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   8debc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   8decc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   8dedc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   8deec:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   8defc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   8df0c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0008df90 <_global_impure_ptr>:
   8df90:	02b8 2007 0043                              ... C.

0008df96 <blanks.6650>:
   8df96:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008dfa6 <zeroes.6651>:
   8dfa6:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   8dfb6:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   8dfc6:	3000 3231 3433 3635 3837 6139 6362 6564     .0123456789abcde
   8dfd6:	0066                                        f.

0008dfd8 <blanks.6664>:
   8dfd8:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008dfe8 <zeroes.6665>:
   8dfe8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0008dff8 <_init>:
   8dff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8dffa:	bf00      	nop
   8dffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8dffe:	bc08      	pop	{r3}
   8e000:	469e      	mov	lr, r3
   8e002:	4770      	bx	lr

0008e004 <__init_array_start>:
   8e004:	0008b879 	.word	0x0008b879

0008e008 <__frame_dummy_init_array_entry>:
   8e008:	0008016d                                m...

0008e00c <_fini>:
   8e00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8e00e:	bf00      	nop
   8e010:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8e012:	bc08      	pop	{r3}
   8e014:	469e      	mov	lr, r3
   8e016:	4770      	bx	lr

0008e018 <__fini_array_start>:
   8e018:	00080145 	.word	0x00080145

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <sd_mmc_cards>:
	...
20070014:	0067 0000 0000 0000 0000 0000 0000 0000     g...............
	...

20070030 <ch3_out_color>:
20070030:	0002                                        ..

20070032 <ch1_in_out_color>:
20070032:	0003                                        ..

20070034 <ch2_in_out_color>:
20070034:	0003                                        ..

20070036 <is_freq_gen_enabled>:
20070036:	0001                                        ..

20070038 <ch3_in_color>:
20070038:	0003                                        ..

2007003a <is_qma_set_to_ttlin>:
2007003a:	0001                                        ..

2007003c <current_gen_freq>:
2007003c:	c350 0000                                   P...

20070040 <scpi_context>:
20070040:	d74c 0008 0100 0000 0000 0000 0b44 2007     L...........D.. 
	...
2007005c:	0080 2007 0000 0000 0000 0000 0000 0000     ... ............
2007006c:	0000 0000 0b34 2007 db28 0008 dca8 0008     ....4.. (.......
2007007c:	0000 0000                                   ....

20070080 <scpi_interface>:
20070080:	531d 0008 52d9 0008 539d 0008 5315 0008     .S...R...S...S..
20070090:	5445 0008 5415 0008                         ET...T..

20070098 <extra_strings_desc.9443>:
20070098:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

200700b4 <udi_msc_name.9439>:
200700b4:	534d 2043 6e69 6574 6672 6361 0065 0000     MSC interface...

200700c4 <udi_cdc_name.9438>:
200700c4:	4443 2043 6e69 6574 6672 6361 0065 0000     CDC interface...

200700d4 <udi_api_cdc_data>:
200700d4:	5e7d 0008 5bdd 0008 58ad 0008 58b5 0008     }^...[...X...X..
200700e4:	5a99 0008                                   .Z..

200700e8 <udi_api_cdc_comm>:
200700e8:	5c0d 0008 5899 0008 5af1 0008 58b5 0008     .\...X...Z...X..
200700f8:	0000 0000                                   ....

200700fc <udc_config_hs>:
200700fc:	010c 2007 0190 2007                         ... ... 

20070104 <udc_config_lsfs>:
20070104:	01b0 2007 0190 2007                         ... ... 

2007010c <udc_desc_hs>:
2007010c:	0209 0062 0103 c000 0832 000b 0202 0102     ..b.....2.......
2007011c:	0900 0004 0100 0202 0001 2405 1000 0401     ...........$....
2007012c:	0224 0502 0624 0100 2405 0301 0701 8305     $...$....$......
2007013c:	4003 1000 0409 0001 0a02 0000 0700 8405     .@..............
2007014c:	0002 0002 0507 0205 0200 0900 0204 0200     ................
2007015c:	0608 0550 0507 0281 0200 0700 0205 0002     ..P.............
2007016c:	0002 0000                                   ....

20070170 <udc_config>:
20070170:	019c 2007 0104 2007 019c 2007 0184 2007     ... ... ... ... 
20070180:	00fc 2007                                   ... 

20070184 <udc_device_qual>:
20070184:	060a 0200 0000 4000 0001 0000               .......@....

20070190 <udi_apis>:
20070190:	00e8 2007 00d4 2007 0218 2007               ... ... ... 

2007019c <udc_device_desc>:
2007019c:	0112 0200 0000 4000 03eb 2424 0100 0201     .......@..$$....
200701ac:	0103 0000                                   ....

200701b0 <udc_desc_fs>:
200701b0:	0209 0062 0103 c000 0832 000b 0202 0102     ..b.....2.......
200701c0:	0900 0004 0100 0202 0001 2405 1000 0401     ...........$....
200701d0:	0224 0502 0624 0100 2405 0301 0701 8305     $...$....$......
200701e0:	4003 1000 0409 0001 0a02 0000 0700 8405     .@..............
200701f0:	4002 0000 0507 0205 0040 0900 0204 0200     .@......@.......
20070200:	0608 0550 0507 0281 0040 0700 0205 4002     ..P.....@......@
20070210:	0000 0000                                   ....

20070214 <udi_msc_b_ack_trans>:
20070214:	0001 0000                                   ....

20070218 <udi_api_msc>:
20070218:	6d19 0008 6cfd 0008 6c05 0008 6191 0008     .m...l...l...a..
20070228:	0000 0000                                   ....

2007022c <udi_msc_inquiry_data.9918>:
2007022c:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
2007024c:	2e31 3030                                   1.00

20070250 <udi_msc_csw>:
20070250:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

20070260 <udc_string_product_name>:
20070260:	6554 706d 616c 6574 4220 616f 6472 0000     Template Board..

20070270 <udc_string_manufacturer_name>:
20070270:	6145 7973 702d 6968 0000 0000               Easy-phi....

2007027c <udc_string_desc>:
2007027c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

2007029c <udc_string_desc_languageid>:
2007029c:	0304 0409                                   ....

200702a0 <g_interrupt_enabled>:
200702a0:	0001 0000                                   ....

200702a4 <SystemCoreClock>:
200702a4:	0900 003d                                   ..=.

200702a8 <ch0_integration_time_goal>:
200702a8:	0001                                        ..

200702aa <ch1_integration_time_goal>:
200702aa:	0001                                        ..

200702ac <__ctype_ptr__>:
200702ac:	de8c 0008                                   ....

200702b0 <_impure_ptr>:
200702b0:	02b8 2007 0000 0000                         ... ....

200702b8 <impure_data>:
200702b8:	0000 0000 05a4 2007 060c 2007 0674 2007     ....... ... t.. 
	...
200702ec:	df94 0008 0000 0000 0000 0000 0000 0000     ................
	...
20070360:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20070370:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200706e0 <__malloc_av_>:
	...
200706e8:	06e0 2007 06e0 2007 06e8 2007 06e8 2007     ... ... ... ... 
200706f8:	06f0 2007 06f0 2007 06f8 2007 06f8 2007     ... ... ... ... 
20070708:	0700 2007 0700 2007 0708 2007 0708 2007     ... ... ... ... 
20070718:	0710 2007 0710 2007 0718 2007 0718 2007     ... ... ... ... 
20070728:	0720 2007 0720 2007 0728 2007 0728 2007      ..  .. (.. (.. 
20070738:	0730 2007 0730 2007 0738 2007 0738 2007     0.. 0.. 8.. 8.. 
20070748:	0740 2007 0740 2007 0748 2007 0748 2007     @.. @.. H.. H.. 
20070758:	0750 2007 0750 2007 0758 2007 0758 2007     P.. P.. X.. X.. 
20070768:	0760 2007 0760 2007 0768 2007 0768 2007     `.. `.. h.. h.. 
20070778:	0770 2007 0770 2007 0778 2007 0778 2007     p.. p.. x.. x.. 
20070788:	0780 2007 0780 2007 0788 2007 0788 2007     ... ... ... ... 
20070798:	0790 2007 0790 2007 0798 2007 0798 2007     ... ... ... ... 
200707a8:	07a0 2007 07a0 2007 07a8 2007 07a8 2007     ... ... ... ... 
200707b8:	07b0 2007 07b0 2007 07b8 2007 07b8 2007     ... ... ... ... 
200707c8:	07c0 2007 07c0 2007 07c8 2007 07c8 2007     ... ... ... ... 
200707d8:	07d0 2007 07d0 2007 07d8 2007 07d8 2007     ... ... ... ... 
200707e8:	07e0 2007 07e0 2007 07e8 2007 07e8 2007     ... ... ... ... 
200707f8:	07f0 2007 07f0 2007 07f8 2007 07f8 2007     ... ... ... ... 
20070808:	0800 2007 0800 2007 0808 2007 0808 2007     ... ... ... ... 
20070818:	0810 2007 0810 2007 0818 2007 0818 2007     ... ... ... ... 
20070828:	0820 2007 0820 2007 0828 2007 0828 2007      ..  .. (.. (.. 
20070838:	0830 2007 0830 2007 0838 2007 0838 2007     0.. 0.. 8.. 8.. 
20070848:	0840 2007 0840 2007 0848 2007 0848 2007     @.. @.. H.. H.. 
20070858:	0850 2007 0850 2007 0858 2007 0858 2007     P.. P.. X.. X.. 
20070868:	0860 2007 0860 2007 0868 2007 0868 2007     `.. `.. h.. h.. 
20070878:	0870 2007 0870 2007 0878 2007 0878 2007     p.. p.. x.. x.. 
20070888:	0880 2007 0880 2007 0888 2007 0888 2007     ... ... ... ... 
20070898:	0890 2007 0890 2007 0898 2007 0898 2007     ... ... ... ... 
200708a8:	08a0 2007 08a0 2007 08a8 2007 08a8 2007     ... ... ... ... 
200708b8:	08b0 2007 08b0 2007 08b8 2007 08b8 2007     ... ... ... ... 
200708c8:	08c0 2007 08c0 2007 08c8 2007 08c8 2007     ... ... ... ... 
200708d8:	08d0 2007 08d0 2007 08d8 2007 08d8 2007     ... ... ... ... 
200708e8:	08e0 2007 08e0 2007 08e8 2007 08e8 2007     ... ... ... ... 
200708f8:	08f0 2007 08f0 2007 08f8 2007 08f8 2007     ... ... ... ... 
20070908:	0900 2007 0900 2007 0908 2007 0908 2007     ... ... ... ... 
20070918:	0910 2007 0910 2007 0918 2007 0918 2007     ... ... ... ... 
20070928:	0920 2007 0920 2007 0928 2007 0928 2007      ..  .. (.. (.. 
20070938:	0930 2007 0930 2007 0938 2007 0938 2007     0.. 0.. 8.. 8.. 
20070948:	0940 2007 0940 2007 0948 2007 0948 2007     @.. @.. H.. H.. 
20070958:	0950 2007 0950 2007 0958 2007 0958 2007     P.. P.. X.. X.. 
20070968:	0960 2007 0960 2007 0968 2007 0968 2007     `.. `.. h.. h.. 
20070978:	0970 2007 0970 2007 0978 2007 0978 2007     p.. p.. x.. x.. 
20070988:	0980 2007 0980 2007 0988 2007 0988 2007     ... ... ... ... 
20070998:	0990 2007 0990 2007 0998 2007 0998 2007     ... ... ... ... 
200709a8:	09a0 2007 09a0 2007 09a8 2007 09a8 2007     ... ... ... ... 
200709b8:	09b0 2007 09b0 2007 09b8 2007 09b8 2007     ... ... ... ... 
200709c8:	09c0 2007 09c0 2007 09c8 2007 09c8 2007     ... ... ... ... 
200709d8:	09d0 2007 09d0 2007 09d8 2007 09d8 2007     ... ... ... ... 
200709e8:	09e0 2007 09e0 2007 09e8 2007 09e8 2007     ... ... ... ... 
200709f8:	09f0 2007 09f0 2007 09f8 2007 09f8 2007     ... ... ... ... 
20070a08:	0a00 2007 0a00 2007 0a08 2007 0a08 2007     ... ... ... ... 
20070a18:	0a10 2007 0a10 2007 0a18 2007 0a18 2007     ... ... ... ... 
20070a28:	0a20 2007 0a20 2007 0a28 2007 0a28 2007      ..  .. (.. (.. 
20070a38:	0a30 2007 0a30 2007 0a38 2007 0a38 2007     0.. 0.. 8.. 8.. 
20070a48:	0a40 2007 0a40 2007 0a48 2007 0a48 2007     @.. @.. H.. H.. 
20070a58:	0a50 2007 0a50 2007 0a58 2007 0a58 2007     P.. P.. X.. X.. 
20070a68:	0a60 2007 0a60 2007 0a68 2007 0a68 2007     `.. `.. h.. h.. 
20070a78:	0a70 2007 0a70 2007 0a78 2007 0a78 2007     p.. p.. x.. x.. 
20070a88:	0a80 2007 0a80 2007 0a88 2007 0a88 2007     ... ... ... ... 
20070a98:	0a90 2007 0a90 2007 0a98 2007 0a98 2007     ... ... ... ... 
20070aa8:	0aa0 2007 0aa0 2007 0aa8 2007 0aa8 2007     ... ... ... ... 
20070ab8:	0ab0 2007 0ab0 2007 0ab8 2007 0ab8 2007     ... ... ... ... 
20070ac8:	0ac0 2007 0ac0 2007 0ac8 2007 0ac8 2007     ... ... ... ... 
20070ad8:	0ad0 2007 0ad0 2007 0ad8 2007 0ad8 2007     ... ... ... ... 

20070ae8 <__malloc_sbrk_base>:
20070ae8:	ffff ffff                                   ....

20070aec <__malloc_trim_threshold>:
20070aec:	0000 0002                                   ....
