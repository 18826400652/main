
easy-phi_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d8f8  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008d8f8  0008d8f8  000158f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000af0  20070000  0008d900  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000133c  20070af0  0008e3f0  00018af0  2**3
                  ALLOC
  4 .stack        00002004  20071e2c  0008f72c  00018af0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00018af0  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00018b19  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002ee5d  00000000  00000000  00018b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000084eb  00000000  00000000  000479e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001857e  00000000  00000000  0004fed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001d10  00000000  00000000  00068450  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002108  00000000  00000000  0006a160  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00024ff6  00000000  00000000  0006c268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000304ee  00000000  00000000  0009125e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007aec8  00000000  00000000  000c174c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000040a8  00000000  00000000  0013c614  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20073e30 	.word	0x20073e30
   80004:	00089999 	.word	0x00089999
   80008:	00089995 	.word	0x00089995
   8000c:	000850a9 	.word	0x000850a9
   80010:	00089995 	.word	0x00089995
   80014:	00089995 	.word	0x00089995
   80018:	00089995 	.word	0x00089995
	...
   8002c:	00089995 	.word	0x00089995
   80030:	00089995 	.word	0x00089995
   80034:	00000000 	.word	0x00000000
   80038:	00089995 	.word	0x00089995
   8003c:	00089995 	.word	0x00089995
   80040:	00089995 	.word	0x00089995
   80044:	00089995 	.word	0x00089995
   80048:	00081ebd 	.word	0x00081ebd
   8004c:	00089995 	.word	0x00089995
   80050:	00089995 	.word	0x00089995
   80054:	00089995 	.word	0x00089995
   80058:	00089995 	.word	0x00089995
   8005c:	00089995 	.word	0x00089995
   80060:	00089995 	.word	0x00089995
   80064:	00089995 	.word	0x00089995
   80068:	00000000 	.word	0x00000000
   8006c:	00087745 	.word	0x00087745
   80070:	00087761 	.word	0x00087761
   80074:	0008777d 	.word	0x0008777d
   80078:	00087799 	.word	0x00087799
	...
   80084:	00089995 	.word	0x00089995
   80088:	00089995 	.word	0x00089995
   8008c:	00089995 	.word	0x00089995
   80090:	00089995 	.word	0x00089995
   80094:	00089995 	.word	0x00089995
   80098:	00089995 	.word	0x00089995
   8009c:	00089995 	.word	0x00089995
   800a0:	00089995 	.word	0x00089995
   800a4:	00000000 	.word	0x00000000
   800a8:	00089995 	.word	0x00089995
   800ac:	00081f1d 	.word	0x00081f1d
   800b0:	00082051 	.word	0x00082051
   800b4:	000820c1 	.word	0x000820c1
   800b8:	00089995 	.word	0x00089995
   800bc:	00089995 	.word	0x00089995
   800c0:	00082089 	.word	0x00082089
   800c4:	00089995 	.word	0x00089995
   800c8:	00089995 	.word	0x00089995
   800cc:	00089995 	.word	0x00089995
   800d0:	00089995 	.word	0x00089995
   800d4:	00089995 	.word	0x00089995
   800d8:	00089995 	.word	0x00089995
   800dc:	00089995 	.word	0x00089995
   800e0:	000882c1 	.word	0x000882c1
   800e4:	00089995 	.word	0x00089995
   800e8:	00089995 	.word	0x00089995
   800ec:	00089995 	.word	0x00089995
   800f0:	00089995 	.word	0x00089995

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	0008d900 	.word	0x0008d900
   80110:	0008d903 	.word	0x0008d903
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	0008d900 	.word	0x0008d900
   8013c:	0008d900 	.word	0x0008d900
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070af0 	.word	0x20070af0
   80164:	00000000 	.word	0x00000000
   80168:	0008d900 	.word	0x0008d900

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	0008d900 	.word	0x0008d900
   80198:	20070af4 	.word	0x20070af4
   8019c:	0008d900 	.word	0x0008d900
   801a0:	00000000 	.word	0x00000000

000801a4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   801a4:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   801a6:	f640 3310 	movw	r3, #2832	; 0xb10
   801aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   801ae:	681a      	ldr	r2, [r3, #0]
   801b0:	f892 4022 	ldrb.w	r4, [r2, #34]	; 0x22
   801b4:	f640 3116 	movw	r1, #2838	; 0xb16
   801b8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   801bc:	7808      	ldrb	r0, [r1, #0]
   801be:	6811      	ldr	r1, [r2, #0]
   801c0:	7c52      	ldrb	r2, [r2, #17]
   801c2:	1c23      	adds	r3, r4, #0
   801c4:	bf18      	it	ne
   801c6:	2301      	movne	r3, #1
   801c8:	f244 74e5 	movw	r4, #18405	; 0x47e5
   801cc:	f2c0 0408 	movt	r4, #8
   801d0:	47a0      	blx	r4
   801d2:	bd10      	pop	{r4, pc}

000801d4 <sdio_cmd53>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd53(uint8_t rw_flag, uint8_t func_nb, uint32_t reg_addr,
		uint8_t inc_addr, uint32_t size, bool access_block)
{
   801d4:	b570      	push	{r4, r5, r6, lr}
   801d6:	b082      	sub	sp, #8
   801d8:	9c06      	ldr	r4, [sp, #24]
	Assert(size != 0);
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
   801da:	f249 3635 	movw	r6, #37685	; 0x9335
   801de:	f2c0 0601 	movt	r6, #1
   801e2:	f241 3535 	movw	r5, #4917	; 0x1335
   801e6:	f2c0 0501 	movt	r5, #1
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
   801ea:	ea4f 7101 	mov.w	r1, r1, lsl #28

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
			SDIO_CMD53_IO_R_BYTE_EXTENDED :
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
   801ee:	ea41 2242 	orr.w	r2, r1, r2, lsl #9
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
   801f2:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
			SDIO_CMD53_IO_R_BYTE_EXTENDED :
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
   801f6:	ea4f 51c4 	mov.w	r1, r4, lsl #23
   801fa:	ea4f 51d1 	mov.w	r1, r1, lsr #23
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
   801fe:	4311      	orrs	r1, r2
		uint8_t inc_addr, uint32_t size, bool access_block)
{
	Assert(size != 0);
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
   80200:	f89d 201c 	ldrb.w	r2, [sp, #28]
   80204:	9200      	str	r2, [sp, #0]
   80206:	2800      	cmp	r0, #0
   80208:	bf14      	ite	ne
   8020a:	4630      	movne	r0, r6
   8020c:	4628      	moveq	r0, r5
   8020e:	ea41 6183 	orr.w	r1, r1, r3, lsl #26
   80212:	b2a2      	uxth	r2, r4
   80214:	f04f 0301 	mov.w	r3, #1
   80218:	f644 1411 	movw	r4, #18705	; 0x4911
   8021c:	f2c0 0408 	movt	r4, #8
   80220:	47a0      	blx	r4
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
			| ((uint32_t)rw_flag << SDIO_CMD53_RW_FLAG),
			size, 1, access_block);
}
   80222:	b002      	add	sp, #8
   80224:	bd70      	pop	{r4, r5, r6, pc}
   80226:	bf00      	nop

00080228 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   80228:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   8022a:	f640 3316 	movw	r3, #2838	; 0xb16
   8022e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80232:	7818      	ldrb	r0, [r3, #0]
   80234:	b930      	cbnz	r0, 80244 <sd_mmc_deselect_slot+0x1c>
		driver_deselect_device(sd_mmc_slot_sel);
   80236:	f04f 0000 	mov.w	r0, #0
   8023a:	f644 0159 	movw	r1, #18521	; 0x4859
   8023e:	f2c0 0108 	movt	r1, #8
   80242:	4788      	blx	r1
   80244:	bd08      	pop	{r3, pc}
   80246:	bf00      	nop

00080248 <sdio_cmd52>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
   80248:	b510      	push	{r4, lr}
   8024a:	9c02      	ldr	r4, [sp, #8]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
   8024c:	ea4f 2242 	mov.w	r2, r2, lsl #9
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
   80250:	ea42 7101 	orr.w	r1, r2, r1, lsl #28
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
   80254:	ea41 70c0 	orr.w	r0, r1, r0, lsl #31
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
   80258:	ea40 63c3 	orr.w	r3, r0, r3, lsl #27
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
   8025c:	7822      	ldrb	r2, [r4, #0]
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
   8025e:	f241 3034 	movw	r0, #4916	; 0x1334
   80262:	ea43 0102 	orr.w	r1, r3, r2
   80266:	f644 0381 	movw	r3, #18561	; 0x4881
   8026a:	f2c0 0308 	movt	r3, #8
   8026e:	4798      	blx	r3
   80270:	b140      	cbz	r0, 80284 <sdio_cmd52+0x3c>
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
		return false;
	}
	*io_data = driver_get_response() & 0xFF;
   80272:	f644 01a9 	movw	r1, #18601	; 0x48a9
   80276:	f2c0 0108 	movt	r1, #8
   8027a:	4788      	blx	r1
   8027c:	7020      	strb	r0, [r4, #0]
	return true;
   8027e:	f04f 0001 	mov.w	r0, #1
   80282:	bd10      	pop	{r4, pc}
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
		return false;
   80284:	f04f 0000 	mov.w	r0, #0
	}
	*io_data = driver_get_response() & 0xFF;
	return true;
}
   80288:	bd10      	pop	{r4, pc}
   8028a:	bf00      	nop

0008028c <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
   8028c:	b508      	push	{r3, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
   8028e:	f640 3310 	movw	r3, #2832	; 0xb10
   80292:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80296:	6818      	ldr	r0, [r3, #0]
   80298:	8981      	ldrh	r1, [r0, #12]
   8029a:	f641 3009 	movw	r0, #6921	; 0x1b09
   8029e:	ea4f 4101 	mov.w	r1, r1, lsl #16
   802a2:	f644 0281 	movw	r2, #18561	; 0x4881
   802a6:	f2c0 0208 	movt	r2, #8
   802aa:	4790      	blx	r2
   802ac:	b170      	cbz	r0, 802cc <sd_mmc_cmd9_mci+0x40>
		return false;
	}
	driver_get_response_128(sd_mmc_card->csd);
   802ae:	f640 3310 	movw	r3, #2832	; 0xb10
   802b2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   802b6:	6818      	ldr	r0, [r3, #0]
   802b8:	f100 0012 	add.w	r0, r0, #18
   802bc:	f644 01b1 	movw	r1, #18609	; 0x48b1
   802c0:	f2c0 0108 	movt	r1, #8
   802c4:	4788      	blx	r1
	return true;
   802c6:	f04f 0001 	mov.w	r0, #1
   802ca:	bd08      	pop	{r3, pc}
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   802cc:	f04f 0000 	mov.w	r0, #0
	}
	driver_get_response_128(sd_mmc_card->csd);
	return true;
}
   802d0:	bd08      	pop	{r3, pc}
   802d2:	bf00      	nop

000802d4 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   802d4:	b510      	push	{r4, lr}
	if (slot >= SD_MMC_MEM_CNT) {
   802d6:	2800      	cmp	r0, #0
   802d8:	f040 80a8 	bne.w	8042c <sd_mmc_select_slot+0x158>
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
   802dc:	f240 030c 	movw	r3, #12
   802e0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   802e4:	6898      	ldr	r0, [r3, #8]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   802e6:	ea4f 1250 	mov.w	r2, r0, lsr #5
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   802ea:	f502 1100 	add.w	r1, r2, #2097152	; 0x200000
   802ee:	f201 7307 	addw	r3, r1, #1799	; 0x707
   802f2:	ea4f 2243 	mov.w	r2, r3, lsl #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   802f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   802f8:	f000 001f 	and.w	r0, r0, #31
   802fc:	f04f 0101 	mov.w	r1, #1
   80300:	fa01 f300 	lsl.w	r3, r1, r0
   80304:	4213      	tst	r3, r2
   80306:	d01d      	beq.n	80344 <sd_mmc_select_slot+0x70>
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
   80308:	f240 020c 	movw	r2, #12
   8030c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80310:	7b90      	ldrb	r0, [r2, #14]
   80312:	4288      	cmp	r0, r1
   80314:	d10c      	bne.n	80330 <sd_mmc_select_slot+0x5c>
	return false;
}

static inline void SD_MMC_STOP_TIMEOUT(void)
{
	if (sd_mmc_sam_systick_used) {
   80316:	f640 330e 	movw	r3, #2830	; 0xb0e
   8031a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8031e:	7819      	ldrb	r1, [r3, #0]
   80320:	b131      	cbz	r1, 80330 <sd_mmc_select_slot+0x5c>
		SysTick->CTRL = 0;
   80322:	f24e 0010 	movw	r0, #57360	; 0xe010
   80326:	f2ce 0000 	movt	r0, #57344	; 0xe000
   8032a:	f04f 0200 	mov.w	r2, #0
   8032e:	6002      	str	r2, [r0, #0]
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
			SD_MMC_STOP_TIMEOUT();
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   80330:	f240 030c 	movw	r3, #12
   80334:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80338:	f04f 0104 	mov.w	r1, #4
   8033c:	7399      	strb	r1, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
   8033e:	f04f 0002 	mov.w	r0, #2
   80342:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
   80344:	f240 020c 	movw	r2, #12
   80348:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8034c:	7b90      	ldrb	r0, [r2, #14]
   8034e:	2804      	cmp	r0, #4
   80350:	d131      	bne.n	803b6 <sd_mmc_select_slot+0xe2>
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
   80352:	f240 010c 	movw	r1, #12
   80356:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8035a:	f04f 0201 	mov.w	r2, #1
   8035e:	738a      	strb	r2, [r1, #14]
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
   80360:	f24e 0310 	movw	r3, #57360	; 0xe010
   80364:	f2ce 0300 	movt	r3, #57344	; 0xe000
   80368:	6818      	ldr	r0, [r3, #0]
   8036a:	b988      	cbnz	r0, 80390 <sd_mmc_select_slot+0xbc>
		sd_mmc_sam_systick_used = true;
   8036c:	f640 300e 	movw	r0, #2830	; 0xb0e
   80370:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80374:	7002      	strb	r2, [r0, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
   80376:	f24e 0310 	movw	r3, #57360	; 0xe010
   8037a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8037e:	f243 71a0 	movw	r1, #14240	; 0x37a0
   80382:	f2c0 01a0 	movt	r1, #160	; 0xa0
   80386:	6059      	str	r1, [r3, #4]
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
   80388:	601a      	str	r2, [r3, #0]
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
   8038a:	f04f 0002 	mov.w	r0, #2
   8038e:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = true;
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
	} else {
		sd_mmc_sam_systick_used = false;
   80390:	f640 310e 	movw	r1, #2830	; 0xb0e
   80394:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80398:	f04f 0200 	mov.w	r2, #0
   8039c:	700a      	strb	r2, [r1, #0]
#ifdef FREERTOS_USED
		// Note: the define INCLUDE_vTaskDelay must be set to one
		// in FreeRTOSConfig.h file.
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
   8039e:	f648 5080 	movw	r0, #36224	; 0x8d80
   803a2:	f2c0 005b 	movt	r0, #91	; 0x5b
   803a6:	f240 0301 	movw	r3, #1
   803aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   803ae:	4798      	blx	r3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
   803b0:	f04f 0002 	mov.w	r0, #2
   803b4:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
   803b6:	2801      	cmp	r0, #1
   803b8:	d116      	bne.n	803e8 <sd_mmc_select_slot+0x114>
	}
}

static inline bool SD_MMC_IS_TIMEOUT(void)
{
	if (!sd_mmc_sam_systick_used) {
   803ba:	f640 310e 	movw	r1, #2830	; 0xb0e
   803be:	f2c2 0107 	movt	r1, #8199	; 0x2007
   803c2:	780b      	ldrb	r3, [r1, #0]
   803c4:	2b00      	cmp	r3, #0
   803c6:	d03a      	beq.n	8043e <sd_mmc_select_slot+0x16a>
		return (xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE);
#else
		return true;
#endif
	}
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
   803c8:	f24e 0210 	movw	r2, #57360	; 0xe010
   803cc:	f2ce 0200 	movt	r2, #57344	; 0xe000
   803d0:	6810      	ldr	r0, [r2, #0]
   803d2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   803d6:	d02c      	beq.n	80432 <sd_mmc_select_slot+0x15e>
		SysTick->CTRL = 0;
   803d8:	f24e 0110 	movw	r1, #57360	; 0xe010
   803dc:	f2ce 0100 	movt	r1, #57344	; 0xe000
   803e0:	f04f 0300 	mov.w	r3, #0
   803e4:	600b      	str	r3, [r1, #0]
   803e6:	e02a      	b.n	8043e <sd_mmc_select_slot+0x16a>
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
   803e8:	f240 000c 	movw	r0, #12
   803ec:	f2c2 0007 	movt	r0, #8199	; 0x2007
   803f0:	7b81      	ldrb	r1, [r0, #14]
   803f2:	2903      	cmp	r1, #3
   803f4:	d020      	beq.n	80438 <sd_mmc_select_slot+0x164>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   803f6:	f640 3416 	movw	r4, #2838	; 0xb16
   803fa:	f2c2 0407 	movt	r4, #8199	; 0x2007
   803fe:	f04f 0300 	mov.w	r3, #0
   80402:	7023      	strb	r3, [r4, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   80404:	f240 040c 	movw	r4, #12
   80408:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8040c:	f640 3210 	movw	r2, #2832	; 0xb10
   80410:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80414:	6014      	str	r4, [r2, #0]
	sd_mmc_configure_slot();
   80416:	f240 10a5 	movw	r0, #421	; 0x1a5
   8041a:	f2c0 0008 	movt	r0, #8
   8041e:	4780      	blx	r0
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   80420:	7ba0      	ldrb	r0, [r4, #14]

	// Initialize interface
	sd_mmc_slot_sel = slot;
	sd_mmc_card = &sd_mmc_cards[slot];
	sd_mmc_configure_slot();
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   80422:	2802      	cmp	r0, #2
   80424:	bf14      	ite	ne
   80426:	2000      	movne	r0, #0
   80428:	2001      	moveq	r0, #1
   8042a:	bd10      	pop	{r4, pc}
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
		return SD_MMC_ERR_SLOT;
   8042c:	f04f 0004 	mov.w	r0, #4
   80430:	bd10      	pop	{r4, pc}
		return SD_MMC_ERR_NO_CARD;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
   80432:	f04f 0002 	mov.w	r0, #2
   80436:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
   80438:	f04f 0003 	mov.w	r0, #3
   8043c:	bd10      	pop	{r4, pc}
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   8043e:	f240 000c 	movw	r0, #12
   80442:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80446:	f04f 0202 	mov.w	r2, #2
   8044a:	7382      	strb	r2, [r0, #14]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   8044c:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   80450:	f2c0 0106 	movt	r1, #6
   80454:	6001      	str	r1, [r0, #0]
		sd_mmc_cards[slot].bus_width = 1;
   80456:	f04f 0301 	mov.w	r3, #1
   8045a:	7443      	strb	r3, [r0, #17]
		sd_mmc_cards[slot].high_speed = 0;
   8045c:	f04f 0200 	mov.w	r2, #0
   80460:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
   80464:	e7c0      	b.n	803e8 <sd_mmc_select_slot+0x114>
   80466:	bf00      	nop

00080468 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   80468:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   8046a:	f240 030c 	movw	r3, #12
   8046e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80472:	f04f 0204 	mov.w	r2, #4
   80476:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   80478:	f640 3016 	movw	r0, #2838	; 0xb16
   8047c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80480:	f04f 01ff 	mov.w	r1, #255	; 0xff
   80484:	7001      	strb	r1, [r0, #0]
	driver_init();
   80486:	f244 7399 	movw	r3, #18329	; 0x4799
   8048a:	f2c0 0308 	movt	r3, #8
   8048e:	4798      	blx	r3
   80490:	bd08      	pop	{r3, pc}
   80492:	bf00      	nop

00080494 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   80494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80498:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   8049a:	f240 23d5 	movw	r3, #725	; 0x2d5
   8049e:	f2c0 0308 	movt	r3, #8
   804a2:	4798      	blx	r3
   804a4:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   804a6:	2801      	cmp	r0, #1
   804a8:	d006      	beq.n	804b8 <sd_mmc_check+0x24>
		sd_mmc_deselect_slot();
   804aa:	f240 2129 	movw	r1, #553	; 0x229
   804ae:	f2c0 0108 	movt	r1, #8
   804b2:	4788      	blx	r1
		return sd_mmc_err;
   804b4:	f000 bd5d 	b.w	80f72 <sd_mmc_check+0xade>
static bool sd_mmc_mci_card_init(void)
{
	uint8_t v2 = 0;

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   804b8:	f640 3010 	movw	r0, #2832	; 0xb10
   804bc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   804c0:	6801      	ldr	r1, [r0, #0]
   804c2:	f04f 0201 	mov.w	r2, #1
   804c6:	73ca      	strb	r2, [r1, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   804c8:	f04f 0500 	mov.w	r5, #0
   804cc:	740d      	strb	r5, [r1, #16]
	sd_mmc_card->rca = 0;
   804ce:	818d      	strh	r5, [r1, #12]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   804d0:	f644 035d 	movw	r3, #18525	; 0x485d
   804d4:	f2c0 0308 	movt	r3, #8
   804d8:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
   804da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   804de:	4629      	mov	r1, r5
   804e0:	f644 0281 	movw	r2, #18561	; 0x4881
   804e4:	f2c0 0208 	movt	r2, #8
   804e8:	4790      	blx	r2
   804ea:	2800      	cmp	r0, #0
   804ec:	f000 84c1 	beq.w	80e72 <sd_mmc_check+0x9de>
{
	uint32_t resp;

	*v2 = 0;
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   804f0:	f245 5008 	movw	r0, #21768	; 0x5508
   804f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   804f8:	f644 0381 	movw	r3, #18561	; 0x4881
   804fc:	f2c0 0308 	movt	r3, #8
   80500:	4798      	blx	r3
   80502:	2800      	cmp	r0, #0
   80504:	f000 84c3 	beq.w	80e8e <sd_mmc_check+0x9fa>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
	}
	// Check R7 response
	resp = driver_get_response();
   80508:	f644 00a9 	movw	r0, #18601	; 0x48a9
   8050c:	f2c0 0008 	movt	r0, #8
   80510:	4780      	blx	r0
	if (resp == 0xFFFFFFFF) {
   80512:	f1b0 3fff 	cmp.w	r0, #4294967295
   80516:	f000 84bd 	beq.w	80e94 <sd_mmc_check+0xa00>
		// No compliance R7 value
		return true; // It is not a V2
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   8051a:	ea4f 5100 	mov.w	r1, r0, lsl #20
   8051e:	ea4f 5211 	mov.w	r2, r1, lsr #20
   80522:	f5b2 7fd5 	cmp.w	r2, #426	; 0x1aa
   80526:	f040 84a4 	bne.w	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   8052a:	f04f 0601 	mov.w	r6, #1
   8052e:	f000 bcb3 	b.w	80e98 <sd_mmc_check+0xa04>
	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
		sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
		return true; // No error but card type not updated
	}
	resp = driver_get_response();
   80532:	f644 00a9 	movw	r0, #18601	; 0x48a9
   80536:	f2c0 0008 	movt	r0, #8
   8053a:	4780      	blx	r0
   8053c:	4601      	mov	r1, r0
	if ((resp & OCR_SDIO_NF) == 0) {
   8053e:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
   80542:	f000 84b5 	beq.w	80eb0 <sd_mmc_check+0xa1c>
   80546:	f241 3989 	movw	r9, #5001	; 0x1389
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   8054a:	f244 5705 	movw	r7, #17669	; 0x4505
   8054e:	f644 0581 	movw	r5, #18561	; 0x4881
   80552:	f2c0 0508 	movt	r5, #8
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80556:	f644 08a9 	movw	r8, #18601	; 0x48a9
   8055a:	f2c0 0808 	movt	r8, #8
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   8055e:	4638      	mov	r0, r7
   80560:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   80564:	47a8      	blx	r5
   80566:	2800      	cmp	r0, #0
   80568:	f000 8483 	beq.w	80e72 <sd_mmc_check+0x9de>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   8056c:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   8056e:	1e01      	subs	r1, r0, #0
   80570:	db0a      	blt.n	80588 <sd_mmc_check+0xf4>
   80572:	f109 39ff 	add.w	r9, r9, #4294967295
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   80576:	4638      	mov	r0, r7
   80578:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   8057c:	47a8      	blx	r5
   8057e:	2800      	cmp	r0, #0
   80580:	f040 8539 	bne.w	80ff6 <sd_mmc_check+0xb62>
   80584:	f000 bc75 	b.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD5 Timeout on busy\n\r", __func__);
			return false;
		}
	}
	// Update card type at the end of busy
	if ((resp & OCR_SDIO_MP) > 0) {
   80588:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
   8058c:	f640 3310 	movw	r3, #2832	; 0xb10
   80590:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80594:	6818      	ldr	r0, [r3, #0]
   80596:	bf14      	ite	ne
   80598:	2205      	movne	r2, #5
	} else {
		sd_mmc_card->type = CARD_TYPE_SDIO;
   8059a:	2204      	moveq	r2, #4
   8059c:	73c2      	strb	r2, [r0, #15]
   8059e:	f000 bc87 	b.w	80eb0 <sd_mmc_check+0xa1c>
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   805a2:	f241 1737 	movw	r7, #4407	; 0x1137
   805a6:	f04f 0800 	mov.w	r8, #0
   805aa:	f644 0581 	movw	r5, #18561	; 0x4881
   805ae:	f2c0 0508 	movt	r5, #8
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   805b2:	f44f 4900 	mov.w	r9, #32768	; 0x8000
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   805b6:	f644 0aa9 	movw	sl, #18601	; 0x48a9
   805ba:	f2c0 0a08 	movt	sl, #8
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   805be:	4638      	mov	r0, r7
   805c0:	4641      	mov	r1, r8
   805c2:	47a8      	blx	r5
   805c4:	2800      	cmp	r0, #0
   805c6:	f040 84ea 	bne.w	80f9e <sd_mmc_check+0xb0a>
   805ca:	f000 bc7d 	b.w	80ec8 <sd_mmc_check+0xa34>
   805ce:	4638      	mov	r0, r7
   805d0:	4641      	mov	r1, r8
   805d2:	47a8      	blx	r5
   805d4:	2800      	cmp	r0, #0
   805d6:	f000 8477 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   805da:	4649      	mov	r1, r9
   805dc:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   805e0:	f244 5029 	movw	r0, #17705	; 0x4529
   805e4:	2e00      	cmp	r6, #0
   805e6:	bf08      	it	eq
   805e8:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   805ec:	47a8      	blx	r5
   805ee:	2800      	cmp	r0, #0
   805f0:	f000 846a 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   805f4:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   805f6:	2800      	cmp	r0, #0
   805f8:	da0e      	bge.n	80618 <sd_mmc_check+0x184>
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
   805fa:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   805fe:	f000 848f 	beq.w	80f20 <sd_mmc_check+0xa8c>
				sd_mmc_card->type |= CARD_TYPE_HC;
   80602:	f640 3010 	movw	r0, #2832	; 0xb10
   80606:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8060a:	6801      	ldr	r1, [r0, #0]
   8060c:	7bca      	ldrb	r2, [r1, #15]
   8060e:	f042 0308 	orr.w	r3, r2, #8
   80612:	73cb      	strb	r3, [r1, #15]
   80614:	f000 bc84 	b.w	80f20 <sd_mmc_check+0xa8c>
   80618:	f10b 3bff 	add.w	fp, fp, #4294967295
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   8061c:	4638      	mov	r0, r7
   8061e:	4641      	mov	r1, r8
   80620:	47a8      	blx	r5
   80622:	2800      	cmp	r0, #0
   80624:	f040 84d1 	bne.w	80fca <sd_mmc_check+0xb36>
   80628:	f000 bc4e 	b.w	80ec8 <sd_mmc_check+0xa34>
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   8062c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   80630:	f2c4 051f 	movt	r5, #16415	; 0x401f
   80634:	f244 5701 	movw	r7, #17665	; 0x4501
   80638:	f644 0881 	movw	r8, #18561	; 0x4881
   8063c:	f2c0 0808 	movt	r8, #8
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80640:	f644 09a9 	movw	r9, #18601	; 0x48a9
   80644:	f2c0 0908 	movt	r9, #8
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   80648:	4638      	mov	r0, r7
   8064a:	4629      	mov	r1, r5
   8064c:	47c0      	blx	r8
   8064e:	2800      	cmp	r0, #0
   80650:	f040 8493 	bne.w	80f7a <sd_mmc_check+0xae6>
   80654:	f000 bc79 	b.w	80f4a <sd_mmc_check+0xab6>
   80658:	4638      	mov	r0, r7
   8065a:	4629      	mov	r1, r5
   8065c:	47c0      	blx	r8
   8065e:	2800      	cmp	r0, #0
   80660:	f000 8473 	beq.w	80f4a <sd_mmc_check+0xab6>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80664:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80666:	2800      	cmp	r0, #0
   80668:	da0d      	bge.n	80686 <sd_mmc_check+0x1f2>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
   8066a:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
   8066e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   80672:	f040 8460 	bne.w	80f36 <sd_mmc_check+0xaa2>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
   80676:	49a6      	ldr	r1, [pc, #664]	; (80910 <sd_mmc_check+0x47c>)
   80678:	680b      	ldr	r3, [r1, #0]
   8067a:	7bda      	ldrb	r2, [r3, #15]
   8067c:	f042 0008 	orr.w	r0, r2, #8
   80680:	73d8      	strb	r0, [r3, #15]
   80682:	f000 bc58 	b.w	80f36 <sd_mmc_check+0xaa2>
   80686:	f106 36ff 	add.w	r6, r6, #4294967295
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   8068a:	4638      	mov	r0, r7
   8068c:	4629      	mov	r1, r5
   8068e:	47c0      	blx	r8
   80690:	2800      	cmp	r0, #0
   80692:	f040 847c 	bne.w	80f8e <sd_mmc_check+0xafa>
   80696:	f000 bc58 	b.w	80f4a <sd_mmc_check+0xab6>
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
		return false;
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
   8069a:	499d      	ldr	r1, [pc, #628]	; (80910 <sd_mmc_check+0x47c>)
   8069c:	6808      	ldr	r0, [r1, #0]
   8069e:	f04f 0201 	mov.w	r2, #1
   806a2:	8182      	strh	r2, [r0, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
   806a4:	f241 1003 	movw	r0, #4355	; 0x1103
   806a8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   806ac:	4b99      	ldr	r3, [pc, #612]	; (80914 <sd_mmc_check+0x480>)
   806ae:	4798      	blx	r3
   806b0:	2800      	cmp	r0, #0
   806b2:	f000 8121 	beq.w	808f8 <sd_mmc_check+0x464>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
   806b6:	4998      	ldr	r1, [pc, #608]	; (80918 <sd_mmc_check+0x484>)
   806b8:	4788      	blx	r1
   806ba:	2800      	cmp	r0, #0
   806bc:	f000 811f 	beq.w	808fe <sd_mmc_check+0x46a>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   806c0:	4893      	ldr	r0, [pc, #588]	; (80910 <sd_mmc_check+0x47c>)
   806c2:	6803      	ldr	r3, [r0, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   806c4:	7c9a      	ldrb	r2, [r3, #18]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   806c6:	f3c2 0183 	ubfx	r1, r2, #2, #4
   806ca:	f101 30ff 	add.w	r0, r1, #4294967295
   806ce:	2803      	cmp	r0, #3
   806d0:	d803      	bhi.n	806da <sd_mmc_check+0x246>
   806d2:	e8df f000 	tbb	[pc, r0]
   806d6:	0a06      	.short	0x0a06
   806d8:	120e      	.short	0x120e
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   806da:	f04f 0112 	mov.w	r1, #18
   806de:	7419      	strb	r1, [r3, #16]
   806e0:	e00e      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   806e2:	f04f 0214 	mov.w	r2, #20
   806e6:	741a      	strb	r2, [r3, #16]
   806e8:	e00a      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   806ea:	f04f 0022 	mov.w	r0, #34	; 0x22
   806ee:	7418      	strb	r0, [r3, #16]
   806f0:	e006      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   806f2:	f04f 0130 	mov.w	r1, #48	; 0x30
   806f6:	7419      	strb	r1, [r3, #16]
   806f8:	e002      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   806fa:	f04f 0240 	mov.w	r2, #64	; 0x40
   806fe:	741a      	strb	r2, [r3, #16]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80700:	7d5a      	ldrb	r2, [r3, #21]
		break;
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   80702:	f002 0007 	and.w	r0, r2, #7
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80706:	4985      	ldr	r1, [pc, #532]	; (8091c <sd_mmc_check+0x488>)
   80708:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   8070c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80710:	fb00 f101 	mul.w	r1, r0, r1
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   80714:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   80718:	4881      	ldr	r0, [pc, #516]	; (80920 <sd_mmc_check+0x48c>)
   8071a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   8071e:	fb02 f101 	mul.w	r1, r2, r1
   80722:	6019      	str	r1, [r3, #0]
   80724:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80726:	7e18      	ldrb	r0, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80728:	7e5a      	ldrb	r2, [r3, #25]
   8072a:	ea4f 0282 	mov.w	r2, r2, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   8072e:	ea42 2080 	orr.w	r0, r2, r0, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80732:	ea40 11a1 	orr.w	r1, r0, r1, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
   80736:	ea4f 5201 	mov.w	r2, r1, lsl #20
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   8073a:	ea4f 5112 	mov.w	r1, r2, lsr #20
   8073e:	f512 1f80 	cmn.w	r2, #1048576	; 0x100000
   80742:	d015      	beq.n	80770 <sd_mmc_check+0x2dc>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80744:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80746:	7eda      	ldrb	r2, [r3, #27]
   80748:	ea4f 0242 	mov.w	r2, r2, lsl #1
   8074c:	ea42 10e0 	orr.w	r0, r2, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   80750:	f101 0101 	add.w	r1, r1, #1
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80754:	f000 0207 	and.w	r2, r0, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   80758:	f102 0202 	add.w	r2, r2, #2
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   8075c:	fa01 f102 	lsl.w	r1, r1, r2
   80760:	7dd8      	ldrb	r0, [r3, #23]
   80762:	f000 020f 	and.w	r2, r0, #15
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80766:	fa01 f102 	lsl.w	r1, r1, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   8076a:	ea4f 2091 	mov.w	r0, r1, lsr #10
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   8076e:	6058      	str	r0, [r3, #4]
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
   80770:	899b      	ldrh	r3, [r3, #12]
	if (!sd_mmc_cmd9_mci()) {
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
   80772:	f243 1007 	movw	r0, #12551	; 0x3107
   80776:	ea4f 4103 	mov.w	r1, r3, lsl #16
   8077a:	4a66      	ldr	r2, [pc, #408]	; (80914 <sd_mmc_check+0x480>)
   8077c:	4790      	blx	r2
   8077e:	2800      	cmp	r0, #0
   80780:	f000 80c0 	beq.w	80904 <sd_mmc_check+0x470>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   80784:	4d62      	ldr	r5, [pc, #392]	; (80910 <sd_mmc_check+0x47c>)
   80786:	6829      	ldr	r1, [r5, #0]
   80788:	7c08      	ldrb	r0, [r1, #16]
   8078a:	283f      	cmp	r0, #63	; 0x3f
   8078c:	f240 809c 	bls.w	808c8 <sd_mmc_check+0x434>
{
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   80790:	f04f 0100 	mov.w	r1, #0
   80794:	9100      	str	r1, [sp, #0]
   80796:	f241 1008 	movw	r0, #4360	; 0x1108
   8079a:	f2c0 0008 	movt	r0, #8
   8079e:	f44f 7200 	mov.w	r2, #512	; 0x200
   807a2:	f04f 0301 	mov.w	r3, #1
   807a6:	4d5f      	ldr	r5, [pc, #380]	; (80924 <sd_mmc_check+0x490>)
   807a8:	47a8      	blx	r5
   807aa:	2800      	cmp	r0, #0
   807ac:	f000 83d0 	beq.w	80f50 <sd_mmc_check+0xabc>
   807b0:	f04f 0500 	mov.w	r5, #0
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
		if (!driver_read_word(&ext_csd)) {
   807b4:	4e5c      	ldr	r6, [pc, #368]	; (80928 <sd_mmc_check+0x494>)
   807b6:	a802      	add	r0, sp, #8
   807b8:	47b0      	blx	r6
   807ba:	2800      	cmp	r0, #0
   807bc:	f000 83c8 	beq.w	80f50 <sd_mmc_check+0xabc>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   807c0:	f105 0501 	add.w	r5, r5, #1
   807c4:	b2ad      	uxth	r5, r5
   807c6:	2d32      	cmp	r5, #50	; 0x32
   807c8:	d1f5      	bne.n	807b6 <sd_mmc_check+0x322>
		if (!driver_read_word(&ext_csd)) {
			return false;
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   807ca:	9e02      	ldr	r6, [sp, #8]
   807cc:	f006 0302 	and.w	r3, r6, #2
   807d0:	b2de      	uxtb	r6, r3
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   807d2:	4a4f      	ldr	r2, [pc, #316]	; (80910 <sd_mmc_check+0x47c>)
   807d4:	6810      	ldr	r0, [r2, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   807d6:	7e87      	ldrb	r7, [r0, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807d8:	7e01      	ldrb	r1, [r0, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   807da:	7e43      	ldrb	r3, [r0, #25]
   807dc:	ea4f 0283 	mov.w	r2, r3, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807e0:	ea42 2081 	orr.w	r0, r2, r1, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807e4:	ea40 17a7 	orr.w	r7, r0, r7, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
   807e8:	ea4f 5107 	mov.w	r1, r7, lsl #20
   807ec:	f511 1f80 	cmn.w	r1, #1048576	; 0x100000
   807f0:	d11a      	bne.n	80828 <sd_mmc_check+0x394>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
			if (!driver_read_word(&sec_count)) {
   807f2:	4f4d      	ldr	r7, [pc, #308]	; (80928 <sd_mmc_check+0x494>)
   807f4:	a803      	add	r0, sp, #12
   807f6:	47b8      	blx	r7
   807f8:	2800      	cmp	r0, #0
   807fa:	f000 83a9 	beq.w	80f50 <sd_mmc_check+0xabc>
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   807fe:	f105 0501 	add.w	r5, r5, #1
   80802:	b2ad      	uxth	r5, r5
   80804:	2d35      	cmp	r5, #53	; 0x35
   80806:	d9f5      	bls.n	807f4 <sd_mmc_check+0x360>
			if (!driver_read_word(&sec_count)) {
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   80808:	4b41      	ldr	r3, [pc, #260]	; (80910 <sd_mmc_check+0x47c>)
   8080a:	681a      	ldr	r2, [r3, #0]
   8080c:	9803      	ldr	r0, [sp, #12]
   8080e:	ea4f 0750 	mov.w	r7, r0, lsr #1
   80812:	6057      	str	r7, [r2, #4]
   80814:	e008      	b.n	80828 <sd_mmc_check+0x394>
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
		if (!driver_read_word(&sec_count)) {
   80816:	a803      	add	r0, sp, #12
   80818:	47b8      	blx	r7
   8081a:	2800      	cmp	r0, #0
   8081c:	f000 8398 	beq.w	80f50 <sd_mmc_check+0xabc>
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   80820:	f105 0501 	add.w	r5, r5, #1
   80824:	b2ad      	uxth	r5, r5
   80826:	e000      	b.n	8082a <sd_mmc_check+0x396>
		if (!driver_read_word(&sec_count)) {
   80828:	4f3f      	ldr	r7, [pc, #252]	; (80928 <sd_mmc_check+0x494>)
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   8082a:	2d7f      	cmp	r5, #127	; 0x7f
   8082c:	d9f3      	bls.n	80816 <sd_mmc_check+0x382>
   8082e:	e392      	b.n	80f56 <sd_mmc_check+0xac2>
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
   80830:	4d3e      	ldr	r5, [pc, #248]	; (8092c <sd_mmc_check+0x498>)
   80832:	7828      	ldrb	r0, [r5, #0]
   80834:	4a3e      	ldr	r2, [pc, #248]	; (80930 <sd_mmc_check+0x49c>)
   80836:	4790      	blx	r2
   80838:	4605      	mov	r5, r0
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
	uint32_t arg;

	switch (bus_width) {
   8083a:	2804      	cmp	r0, #4
   8083c:	d00b      	beq.n	80856 <sd_mmc_check+0x3c2>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
   8083e:	f44f 7100 	mov.w	r1, #512	; 0x200
   80842:	f2c0 11b7 	movt	r1, #439	; 0x1b7
   80846:	f04f 0000 	mov.w	r0, #0
   8084a:	f2c0 10b7 	movt	r0, #439	; 0x1b7
   8084e:	2d08      	cmp	r5, #8
   80850:	bf18      	it	ne
   80852:	4601      	movne	r1, r0
   80854:	e003      	b.n	8085e <sd_mmc_check+0x3ca>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
   80856:	f44f 7180 	mov.w	r1, #256	; 0x100
   8085a:	f2c0 11b7 	movt	r1, #439	; 0x1b7
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
   8085e:	f243 1006 	movw	r0, #12550	; 0x3106
   80862:	4b2c      	ldr	r3, [pc, #176]	; (80914 <sd_mmc_check+0x480>)
   80864:	4798      	blx	r3
   80866:	2800      	cmp	r0, #0
   80868:	f000 837d 	beq.w	80f66 <sd_mmc_check+0xad2>
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   8086c:	4931      	ldr	r1, [pc, #196]	; (80934 <sd_mmc_check+0x4a0>)
   8086e:	4788      	blx	r1
   80870:	f010 0f80 	tst.w	r0, #128	; 0x80
   80874:	f040 8377 	bne.w	80f66 <sd_mmc_check+0xad2>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->bus_width = bus_width;
   80878:	4a25      	ldr	r2, [pc, #148]	; (80910 <sd_mmc_check+0x47c>)
   8087a:	6810      	ldr	r0, [r2, #0]
   8087c:	7445      	strb	r5, [r0, #17]
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
   8087e:	4b2e      	ldr	r3, [pc, #184]	; (80938 <sd_mmc_check+0x4a4>)
   80880:	4798      	blx	r3
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
   80882:	492e      	ldr	r1, [pc, #184]	; (8093c <sd_mmc_check+0x4a8>)
   80884:	4788      	blx	r1
   80886:	b338      	cbz	r0, 808d8 <sd_mmc_check+0x444>
   80888:	b336      	cbz	r6, 808d8 <sd_mmc_check+0x444>
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
   8088a:	f243 1006 	movw	r0, #12550	; 0x3106
   8088e:	f44f 7180 	mov.w	r1, #256	; 0x100
   80892:	f2c0 31b9 	movt	r1, #953	; 0x3b9
   80896:	4a1f      	ldr	r2, [pc, #124]	; (80914 <sd_mmc_check+0x480>)
   80898:	4790      	blx	r2
   8089a:	2800      	cmp	r0, #0
   8089c:	f000 8366 	beq.w	80f6c <sd_mmc_check+0xad8>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   808a0:	4824      	ldr	r0, [pc, #144]	; (80934 <sd_mmc_check+0x4a0>)
   808a2:	4780      	blx	r0
   808a4:	f010 0f80 	tst.w	r0, #128	; 0x80
   808a8:	f040 8360 	bne.w	80f6c <sd_mmc_check+0xad8>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->high_speed = 1;
   808ac:	4e18      	ldr	r6, [pc, #96]	; (80910 <sd_mmc_check+0x47c>)
   808ae:	6837      	ldr	r7, [r6, #0]
   808b0:	f04f 0501 	mov.w	r5, #1
   808b4:	f887 5022 	strb.w	r5, [r7, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
   808b8:	f44f 43ea 	mov.w	r3, #29952	; 0x7500
   808bc:	f2c0 3319 	movt	r3, #793	; 0x319
   808c0:	603b      	str	r3, [r7, #0]
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
   808c2:	491d      	ldr	r1, [pc, #116]	; (80938 <sd_mmc_check+0x4a4>)
   808c4:	4788      	blx	r1
   808c6:	e007      	b.n	808d8 <sd_mmc_check+0x444>
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
   808c8:	4f1b      	ldr	r7, [pc, #108]	; (80938 <sd_mmc_check+0x4a4>)
   808ca:	47b8      	blx	r7
   808cc:	e004      	b.n	808d8 <sd_mmc_check+0x444>
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   808ce:	4640      	mov	r0, r8
   808d0:	4639      	mov	r1, r7
   808d2:	47b0      	blx	r6
   808d4:	b140      	cbz	r0, 808e8 <sd_mmc_check+0x454>
   808d6:	e018      	b.n	8090a <sd_mmc_check+0x476>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
   808d8:	f04f 050a 	mov.w	r5, #10
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   808dc:	f241 1810 	movw	r8, #4368	; 0x1110
   808e0:	f44f 7700 	mov.w	r7, #512	; 0x200
   808e4:	4e0b      	ldr	r6, [pc, #44]	; (80914 <sd_mmc_check+0x480>)
   808e6:	e7f2      	b.n	808ce <sd_mmc_check+0x43a>
   808e8:	f105 32ff 	add.w	r2, r5, #4294967295
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
	}

	uint8_t retry = 10;
	while (retry--) {
   808ec:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
   808f0:	d1ed      	bne.n	808ce <sd_mmc_check+0x43a>
		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return true;
		}
	}
	return false;
   808f2:	f04f 0000 	mov.w	r0, #0
   808f6:	e2ad      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   808f8:	f04f 0000 	mov.w	r0, #0
   808fc:	e2aa      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
		return false;
   808fe:	f04f 0000 	mov.w	r0, #0
   80902:	e2a7      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   80904:	f04f 0000 	mov.w	r0, #0
   80908:	e2a4      	b.n	80e54 <sd_mmc_check+0x9c0>
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return true;
   8090a:	f04f 0001 	mov.w	r0, #1
   8090e:	e2a1      	b.n	80e54 <sd_mmc_check+0x9c0>
   80910:	20070b10 	.word	0x20070b10
   80914:	00084881 	.word	0x00084881
   80918:	0008028d 	.word	0x0008028d
   8091c:	0008cab4 	.word	0x0008cab4
   80920:	0008cad0 	.word	0x0008cad0
   80924:	00084911 	.word	0x00084911
   80928:	000849e9 	.word	0x000849e9
   8092c:	20070b16 	.word	0x20070b16
   80930:	000847d1 	.word	0x000847d1
   80934:	000848a9 	.word	0x000848a9
   80938:	000801a5 	.word	0x000801a5
   8093c:	000847dd 	.word	0x000847dd
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
   80940:	f645 3002 	movw	r0, #23298	; 0x5b02
   80944:	f04f 0100 	mov.w	r1, #0
   80948:	f644 0381 	movw	r3, #18561	; 0x4881
   8094c:	f2c0 0308 	movt	r3, #8
   80950:	4798      	blx	r3
   80952:	2800      	cmp	r0, #0
   80954:	f000 828d 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
   80958:	f245 1003 	movw	r0, #20739	; 0x5103
   8095c:	f04f 0100 	mov.w	r1, #0
   80960:	f644 0281 	movw	r2, #18561	; 0x4881
   80964:	f2c0 0208 	movt	r2, #8
   80968:	4790      	blx	r2
   8096a:	2800      	cmp	r0, #0
   8096c:	f000 8281 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
   80970:	f640 3510 	movw	r5, #2832	; 0xb10
   80974:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80978:	682e      	ldr	r6, [r5, #0]
   8097a:	f644 00a9 	movw	r0, #18601	; 0x48a9
   8097e:	f2c0 0008 	movt	r0, #8
   80982:	4780      	blx	r0
   80984:	ea4f 4110 	mov.w	r1, r0, lsr #16
   80988:	81b1      	strh	r1, [r6, #12]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   8098a:	682b      	ldr	r3, [r5, #0]
   8098c:	7bda      	ldrb	r2, [r3, #15]
   8098e:	f012 0f01 	tst.w	r2, #1
   80992:	d056      	beq.n	80a42 <sd_mmc_check+0x5ae>
		if (!sd_mmc_cmd9_mci()) {
   80994:	f240 208d 	movw	r0, #653	; 0x28d
   80998:	f2c0 0008 	movt	r0, #8
   8099c:	4780      	blx	r0
   8099e:	2800      	cmp	r0, #0
   809a0:	f000 8267 	beq.w	80e72 <sd_mmc_check+0x9de>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   809a4:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   809a6:	7d5a      	ldrb	r2, [r3, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   809a8:	f002 0007 	and.w	r0, r2, #7
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   809ac:	f64c 21b4 	movw	r1, #51892	; 0xcab4
   809b0:	f2c0 0108 	movt	r1, #8
   809b4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   809b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   809bc:	fb00 f101 	mul.w	r1, r0, r1
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   809c0:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   809c4:	f64c 2074 	movw	r0, #51828	; 0xca74
   809c8:	f2c0 0008 	movt	r0, #8
   809cc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   809d0:	fb02 f101 	mul.w	r1, r2, r1
   809d4:	6019      	str	r1, [r3, #0]
   809d6:	7c98      	ldrb	r0, [r3, #18]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   809d8:	0982      	lsrs	r2, r0, #6
   809da:	d00f      	beq.n	809fc <sd_mmc_check+0x568>
   809dc:	7eda      	ldrb	r2, [r3, #27]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   809de:	7e98      	ldrb	r0, [r3, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   809e0:	7e59      	ldrb	r1, [r3, #25]
   809e2:	ea4f 4101 	mov.w	r1, r1, lsl #16
   809e6:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   809ea:	4302      	orrs	r2, r0
   809ec:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
   809f0:	f101 0101 	add.w	r1, r1, #1
   809f4:	ea4f 2041 	mov.w	r0, r1, lsl #9
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
   809f8:	6058      	str	r0, [r3, #4]
   809fa:	e022      	b.n	80a42 <sd_mmc_check+0x5ae>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   809fc:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   809fe:	7e18      	ldrb	r0, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80a00:	7e5a      	ldrb	r2, [r3, #25]
   80a02:	ea4f 0282 	mov.w	r2, r2, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80a06:	ea42 2080 	orr.w	r0, r2, r0, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80a0a:	ea40 12a1 	orr.w	r2, r0, r1, asr #6
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80a0e:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80a10:	7ed9      	ldrb	r1, [r3, #27]
   80a12:	ea4f 0141 	mov.w	r1, r1, lsl #1
   80a16:	ea41 10e0 	orr.w	r0, r1, r0, asr #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80a1a:	ea4f 5202 	mov.w	r2, r2, lsl #20
   80a1e:	ea4f 5212 	mov.w	r2, r2, lsr #20
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   80a22:	f102 0201 	add.w	r2, r2, #1
   80a26:	f000 0107 	and.w	r1, r0, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   80a2a:	f101 0102 	add.w	r1, r1, #2
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   80a2e:	fa02 f001 	lsl.w	r0, r2, r1
   80a32:	7dda      	ldrb	r2, [r3, #23]
   80a34:	f002 010f 	and.w	r1, r2, #15
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80a38:	fa00 f001 	lsl.w	r0, r0, r1
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
   80a3c:	ea4f 2290 	mov.w	r2, r0, lsr #10
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80a40:	605a      	str	r2, [r3, #4]
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
   80a42:	f640 3310 	movw	r3, #2832	; 0xb10
   80a46:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80a4a:	681a      	ldr	r2, [r3, #0]
   80a4c:	8991      	ldrh	r1, [r2, #12]
			return false;
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
   80a4e:	f243 1007 	movw	r0, #12551	; 0x3107
   80a52:	ea4f 4101 	mov.w	r1, r1, lsl #16
   80a56:	f644 0381 	movw	r3, #18561	; 0x4881
   80a5a:	f2c0 0308 	movt	r3, #8
   80a5e:	4798      	blx	r3
   80a60:	2800      	cmp	r0, #0
   80a62:	f000 8206 	beq.w	80e72 <sd_mmc_check+0x9de>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80a66:	f640 3010 	movw	r0, #2832	; 0xb10
   80a6a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80a6e:	6801      	ldr	r1, [r0, #0]
   80a70:	7bca      	ldrb	r2, [r1, #15]
   80a72:	f012 0f01 	tst.w	r2, #1
   80a76:	d04e      	beq.n	80b16 <sd_mmc_check+0x682>
{
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   80a78:	898b      	ldrh	r3, [r1, #12]
   80a7a:	f241 1037 	movw	r0, #4407	; 0x1137
   80a7e:	ea4f 4103 	mov.w	r1, r3, lsl #16
   80a82:	f644 0281 	movw	r2, #18561	; 0x4881
   80a86:	f2c0 0208 	movt	r2, #8
   80a8a:	4790      	blx	r2
   80a8c:	2800      	cmp	r0, #0
   80a8e:	f000 81f0 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   80a92:	f04f 0301 	mov.w	r3, #1
   80a96:	9300      	str	r3, [sp, #0]
   80a98:	f241 1033 	movw	r0, #4403	; 0x1133
   80a9c:	f2c0 0008 	movt	r0, #8
   80aa0:	f04f 0100 	mov.w	r1, #0
   80aa4:	f04f 0208 	mov.w	r2, #8
   80aa8:	4d4c      	ldr	r5, [pc, #304]	; (80bdc <sd_mmc_check+0x748>)
   80aaa:	47a8      	blx	r5
   80aac:	2800      	cmp	r0, #0
   80aae:	f000 81e0 	beq.w	80e72 <sd_mmc_check+0x9de>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(scr, 1)) {
   80ab2:	a804      	add	r0, sp, #16
   80ab4:	f04f 0101 	mov.w	r1, #1
   80ab8:	4b49      	ldr	r3, [pc, #292]	; (80be0 <sd_mmc_check+0x74c>)
   80aba:	4798      	blx	r3
   80abc:	2800      	cmp	r0, #0
   80abe:	f000 81d8 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80ac2:	4848      	ldr	r0, [pc, #288]	; (80be4 <sd_mmc_check+0x750>)
   80ac4:	4780      	blx	r0
   80ac6:	2800      	cmp	r0, #0
   80ac8:	f000 81d3 	beq.w	80e72 <sd_mmc_check+0x9de>
   80acc:	f89d 1010 	ldrb.w	r1, [sp, #16]
		return false;
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   80ad0:	f001 030f 	and.w	r3, r1, #15
   80ad4:	2b01      	cmp	r3, #1
   80ad6:	d009      	beq.n	80aec <sd_mmc_check+0x658>
   80ad8:	b113      	cbz	r3, 80ae0 <sd_mmc_check+0x64c>
   80ada:	2b02      	cmp	r3, #2
   80adc:	d116      	bne.n	80b0c <sd_mmc_check+0x678>
   80ade:	e00b      	b.n	80af8 <sd_mmc_check+0x664>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   80ae0:	4a41      	ldr	r2, [pc, #260]	; (80be8 <sd_mmc_check+0x754>)
   80ae2:	6813      	ldr	r3, [r2, #0]
   80ae4:	f04f 0010 	mov.w	r0, #16
   80ae8:	7418      	strb	r0, [r3, #16]
   80aea:	e014      	b.n	80b16 <sd_mmc_check+0x682>
		break;

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   80aec:	493e      	ldr	r1, [pc, #248]	; (80be8 <sd_mmc_check+0x754>)
   80aee:	680b      	ldr	r3, [r1, #0]
   80af0:	f04f 021a 	mov.w	r2, #26
   80af4:	741a      	strb	r2, [r3, #16]
   80af6:	e00e      	b.n	80b16 <sd_mmc_check+0x682>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80af8:	f89d 3012 	ldrb.w	r3, [sp, #18]
		break;

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   80afc:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
   80afe:	483a      	ldr	r0, [pc, #232]	; (80be8 <sd_mmc_check+0x754>)
   80b00:	6801      	ldr	r1, [r0, #0]
   80b02:	bf14      	ite	ne
   80b04:	2230      	movne	r2, #48	; 0x30
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
   80b06:	2220      	moveq	r2, #32
   80b08:	740a      	strb	r2, [r1, #16]
   80b0a:	e004      	b.n	80b16 <sd_mmc_check+0x682>
		}
		break;

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   80b0c:	4a36      	ldr	r2, [pc, #216]	; (80be8 <sd_mmc_check+0x754>)
   80b0e:	6810      	ldr	r0, [r2, #0]
   80b10:	f04f 0110 	mov.w	r1, #16
   80b14:	7401      	strb	r1, [r0, #16]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
		if (!sd_acmd51()) {
			return false;
		}
	}
	if (IS_SDIO()) {
   80b16:	f640 3010 	movw	r0, #2832	; 0xb10
   80b1a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80b1e:	6801      	ldr	r1, [r0, #0]
   80b20:	7bcb      	ldrb	r3, [r1, #15]
   80b22:	f003 0204 	and.w	r2, r3, #4
   80b26:	b2d0      	uxtb	r0, r2
   80b28:	2800      	cmp	r0, #0
   80b2a:	f000 8095 	beq.w	80c58 <sd_mmc_check+0x7c4>
 	uint32_t unit;
	uint32_t mul;
	uint8_t tplfe_max_tran_speed;

	// Read CIS area address in CCCR area
	addr_cis = 0; // Init all bytes, because the next function fill 3 bytes only
   80b2e:	f04f 0100 	mov.w	r1, #0
   80b32:	9103      	str	r1, [sp, #12]
	if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, SDIO_CCCR_CIS_PTR,
   80b34:	f04f 0503 	mov.w	r5, #3
   80b38:	9500      	str	r5, [sp, #0]
   80b3a:	f04f 0301 	mov.w	r3, #1
   80b3e:	9301      	str	r3, [sp, #4]
   80b40:	4608      	mov	r0, r1
   80b42:	f04f 0209 	mov.w	r2, #9
   80b46:	f240 15d5 	movw	r5, #469	; 0x1d5
   80b4a:	f2c0 0508 	movt	r5, #8
   80b4e:	47a8      	blx	r5
   80b50:	2800      	cmp	r0, #0
   80b52:	f000 818e 	beq.w	80e72 <sd_mmc_check+0x9de>
			1, 3, true)) {
		sd_mmc_debug("%s: CMD53 Read CIS Fail\n\r", __func__);
		return false;
	}
	if (!driver_start_read_blocks((uint8_t *)&addr_cis, 1)) {
   80b56:	a803      	add	r0, sp, #12
   80b58:	f04f 0101 	mov.w	r1, #1
   80b5c:	4b20      	ldr	r3, [pc, #128]	; (80be0 <sd_mmc_check+0x74c>)
   80b5e:	4798      	blx	r3
   80b60:	2800      	cmp	r0, #0
   80b62:	f000 8186 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80b66:	491f      	ldr	r1, [pc, #124]	; (80be4 <sd_mmc_check+0x750>)
   80b68:	4788      	blx	r1
   80b6a:	2800      	cmp	r0, #0
   80b6c:	f000 8181 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	addr_cis = le32_to_cpu(addr_cis);
   80b70:	9d03      	ldr	r5, [sp, #12]

	// Search Fun0 tuple in the CIA area
	addr = addr_cis;
	while (1) {
		// Read a sample of CIA area
		if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 3, true)) {
   80b72:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80bec <sd_mmc_check+0x758>
			sd_mmc_debug("%s: CMD53 Read CIA Fail\n\r", __func__);
			return false;
		}
		if (!driver_start_read_blocks(buf, 1)) {
   80b76:	4f1a      	ldr	r7, [pc, #104]	; (80be0 <sd_mmc_check+0x74c>)
			return false;
		}
		if (!driver_wait_end_of_read_blocks()) {
   80b78:	4e1a      	ldr	r6, [pc, #104]	; (80be4 <sd_mmc_check+0x750>)

	// Search Fun0 tuple in the CIA area
	addr = addr_cis;
	while (1) {
		// Read a sample of CIA area
		if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 3, true)) {
   80b7a:	f04f 0203 	mov.w	r2, #3
   80b7e:	9200      	str	r2, [sp, #0]
   80b80:	f04f 0301 	mov.w	r3, #1
   80b84:	9301      	str	r3, [sp, #4]
   80b86:	f04f 0000 	mov.w	r0, #0
   80b8a:	4601      	mov	r1, r0
   80b8c:	462a      	mov	r2, r5
   80b8e:	47c0      	blx	r8
   80b90:	2800      	cmp	r0, #0
   80b92:	f000 816e 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Read CIA Fail\n\r", __func__);
			return false;
		}
		if (!driver_start_read_blocks(buf, 1)) {
   80b96:	a804      	add	r0, sp, #16
   80b98:	f04f 0101 	mov.w	r1, #1
   80b9c:	47b8      	blx	r7
   80b9e:	2800      	cmp	r0, #0
   80ba0:	f000 8167 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
		if (!driver_wait_end_of_read_blocks()) {
   80ba4:	47b0      	blx	r6
   80ba6:	2800      	cmp	r0, #0
   80ba8:	f000 8163 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
		if (buf[0] == SDIO_CISTPL_END) {
   80bac:	f89d 0010 	ldrb.w	r0, [sp, #16]
   80bb0:	28ff      	cmp	r0, #255	; 0xff
   80bb2:	f000 815e 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Tuple error\n\r", __func__);
			return false; // Tuple error
		}
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
   80bb6:	2822      	cmp	r0, #34	; 0x22
   80bb8:	d102      	bne.n	80bc0 <sd_mmc_check+0x72c>
   80bba:	f89d 3012 	ldrb.w	r3, [sp, #18]
   80bbe:	b1bb      	cbz	r3, 80bf0 <sd_mmc_check+0x75c>
			break; // Fun0 tuple found
		}
		if (buf[1] == 0) {
   80bc0:	f89d 1011 	ldrb.w	r1, [sp, #17]
   80bc4:	2900      	cmp	r1, #0
   80bc6:	f000 8154 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Tuple error\n\r", __func__);
			return false; // Tuple error
		}

		// Next address
		addr += (buf[1] + 2);
   80bca:	f101 0102 	add.w	r1, r1, #2
   80bce:	186d      	adds	r5, r5, r1
		if (addr > (addr_cis + 256)) {
   80bd0:	9a03      	ldr	r2, [sp, #12]
   80bd2:	f502 7080 	add.w	r0, r2, #256	; 0x100
   80bd6:	4285      	cmp	r5, r0
   80bd8:	d9cf      	bls.n	80b7a <sd_mmc_check+0x6e6>
   80bda:	e14a      	b.n	80e72 <sd_mmc_check+0x9de>
   80bdc:	00084911 	.word	0x00084911
   80be0:	00084a7d 	.word	0x00084a7d
   80be4:	00084b95 	.word	0x00084b95
   80be8:	20070b10 	.word	0x20070b10
   80bec:	000801d5 	.word	0x000801d5
			return false; // Outoff CIS area
		}
	}

	// Read all Fun0 tuple fields: fn0_blk_siz & max_tran_speed
	if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 6, true)) {
   80bf0:	f04f 0306 	mov.w	r3, #6
   80bf4:	9300      	str	r3, [sp, #0]
   80bf6:	f04f 0301 	mov.w	r3, #1
   80bfa:	9301      	str	r3, [sp, #4]
   80bfc:	f04f 0000 	mov.w	r0, #0
   80c00:	4601      	mov	r1, r0
   80c02:	462a      	mov	r2, r5
   80c04:	4dbb      	ldr	r5, [pc, #748]	; (80ef4 <sd_mmc_check+0xa60>)
   80c06:	47a8      	blx	r5
   80c08:	2800      	cmp	r0, #0
   80c0a:	f000 8132 	beq.w	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD53 Read all Fun0 Fail\n\r", __func__);
		return false;
	}
	if (!driver_start_read_blocks(buf, 1)) {
   80c0e:	a804      	add	r0, sp, #16
   80c10:	f04f 0101 	mov.w	r1, #1
   80c14:	4ab8      	ldr	r2, [pc, #736]	; (80ef8 <sd_mmc_check+0xa64>)
   80c16:	4790      	blx	r2
   80c18:	2800      	cmp	r0, #0
   80c1a:	f000 812a 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80c1e:	49b7      	ldr	r1, [pc, #732]	; (80efc <sd_mmc_check+0xa68>)
   80c20:	4788      	blx	r1
   80c22:	2800      	cmp	r0, #0
   80c24:	f000 8125 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	tplfe_max_tran_speed = buf[5];
   80c28:	f89d 3015 	ldrb.w	r3, [sp, #21]
   80c2c:	2b32      	cmp	r3, #50	; 0x32
   80c2e:	bf28      	it	cs
   80c30:	2332      	movcs	r3, #50	; 0x32
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80c32:	48b3      	ldr	r0, [pc, #716]	; (80f00 <sd_mmc_check+0xa6c>)
   80c34:	6802      	ldr	r2, [r0, #0]
		 */
		tplfe_max_tran_speed = 0x32; // 25Mhz
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
   80c36:	f003 0007 	and.w	r0, r3, #7
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80c3a:	49b2      	ldr	r1, [pc, #712]	; (80f04 <sd_mmc_check+0xa70>)
   80c3c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   80c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80c44:	fb00 f101 	mul.w	r1, r0, r1
		tplfe_max_tran_speed = 0x32; // 25Mhz
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
   80c48:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   80c4c:	48ae      	ldr	r0, [pc, #696]	; (80f08 <sd_mmc_check+0xa74>)
   80c4e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   80c52:	fb03 f101 	mul.w	r1, r3, r1
   80c56:	6011      	str	r1, [r2, #0]
	if (IS_SDIO()) {
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
   80c58:	f640 3216 	movw	r2, #2838	; 0xb16
   80c5c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80c60:	7810      	ldrb	r0, [r2, #0]
   80c62:	f244 73d1 	movw	r3, #18385	; 0x47d1
   80c66:	f2c0 0308 	movt	r3, #8
   80c6a:	4798      	blx	r3
   80c6c:	2803      	cmp	r0, #3
   80c6e:	d959      	bls.n	80d24 <sd_mmc_check+0x890>
		// TRY to enable 4-bit mode
		if (IS_SDIO()) {
   80c70:	f640 3010 	movw	r0, #2832	; 0xb10
   80c74:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80c78:	6801      	ldr	r1, [r0, #0]
   80c7a:	7bca      	ldrb	r2, [r1, #15]
   80c7c:	f002 0304 	and.w	r3, r2, #4
   80c80:	b2d8      	uxtb	r0, r3
   80c82:	b330      	cbz	r0, 80cd2 <sd_mmc_check+0x83e>
	 * A SDIO Low-Speed alone can supports 4bit (Optional)
	 */
	uint8_t u8_value;

	// Check 4bit support in 4BLS of "Card Capability" register
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
   80c84:	ad03      	add	r5, sp, #12
   80c86:	9500      	str	r5, [sp, #0]
   80c88:	f04f 0000 	mov.w	r0, #0
   80c8c:	4601      	mov	r1, r0
   80c8e:	f04f 0208 	mov.w	r2, #8
   80c92:	4603      	mov	r3, r0
   80c94:	4d9d      	ldr	r5, [pc, #628]	; (80f0c <sd_mmc_check+0xa78>)
   80c96:	47a8      	blx	r5
   80c98:	2800      	cmp	r0, #0
   80c9a:	f000 80ea 	beq.w	80e72 <sd_mmc_check+0x9de>
			0, &u8_value)) {
		return false;
	}
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
   80c9e:	f99d 100c 	ldrsb.w	r1, [sp, #12]
   80ca2:	2900      	cmp	r1, #0
   80ca4:	da15      	bge.n	80cd2 <sd_mmc_check+0x83e>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_BUSWIDTH_4B;
   80ca6:	ab14      	add	r3, sp, #80	; 0x50
   80ca8:	f04f 0202 	mov.w	r2, #2
   80cac:	f803 2d44 	strb.w	r2, [r3, #-68]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
   80cb0:	9300      	str	r3, [sp, #0]
   80cb2:	f04f 0001 	mov.w	r0, #1
   80cb6:	f04f 0100 	mov.w	r1, #0
   80cba:	f04f 0207 	mov.w	r2, #7
   80cbe:	4603      	mov	r3, r0
   80cc0:	47a8      	blx	r5
   80cc2:	2800      	cmp	r0, #0
   80cc4:	f000 80d5 	beq.w	80e72 <sd_mmc_check+0x9de>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->bus_width = 4;
   80cc8:	488d      	ldr	r0, [pc, #564]	; (80f00 <sd_mmc_check+0xa6c>)
   80cca:	6801      	ldr	r1, [r0, #0]
   80ccc:	f04f 0304 	mov.w	r3, #4
   80cd0:	744b      	strb	r3, [r1, #17]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_bus_width()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
   80cd2:	f640 3210 	movw	r2, #2832	; 0xb10
   80cd6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80cda:	6810      	ldr	r0, [r2, #0]
   80cdc:	7bc1      	ldrb	r1, [r0, #15]
   80cde:	f011 0f01 	tst.w	r1, #1
   80ce2:	d01a      	beq.n	80d1a <sd_mmc_check+0x886>
 */
static bool sd_acmd6(void)
{
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   80ce4:	8983      	ldrh	r3, [r0, #12]
   80ce6:	f241 1037 	movw	r0, #4407	; 0x1137
   80cea:	ea4f 4103 	mov.w	r1, r3, lsl #16
   80cee:	f644 0281 	movw	r2, #18561	; 0x4881
   80cf2:	f2c0 0208 	movt	r2, #8
   80cf6:	4790      	blx	r2
   80cf8:	2800      	cmp	r0, #0
   80cfa:	f000 80ba 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
   80cfe:	f241 1006 	movw	r0, #4358	; 0x1106
   80d02:	f04f 0102 	mov.w	r1, #2
   80d06:	4b82      	ldr	r3, [pc, #520]	; (80f10 <sd_mmc_check+0xa7c>)
   80d08:	4798      	blx	r3
   80d0a:	2800      	cmp	r0, #0
   80d0c:	f000 80b1 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	sd_mmc_card->bus_width = 4;
   80d10:	487b      	ldr	r0, [pc, #492]	; (80f00 <sd_mmc_check+0xa6c>)
   80d12:	6801      	ldr	r1, [r0, #0]
   80d14:	f04f 0204 	mov.w	r2, #4
   80d18:	744a      	strb	r2, [r1, #17]
			if (!sd_acmd6()) {
				return false;
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
   80d1a:	f240 13a5 	movw	r3, #421	; 0x1a5
   80d1e:	f2c0 0308 	movt	r3, #8
   80d22:	4798      	blx	r3
	}
	if (driver_is_high_speed_capable()) {
   80d24:	f244 70dd 	movw	r0, #18397	; 0x47dd
   80d28:	f2c0 0008 	movt	r0, #8
   80d2c:	4780      	blx	r0
   80d2e:	2800      	cmp	r0, #0
   80d30:	f000 8081 	beq.w	80e36 <sd_mmc_check+0x9a2>
		// TRY to enable High-Speed Mode
		if (IS_SDIO()) {
   80d34:	f640 3110 	movw	r1, #2832	; 0xb10
   80d38:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80d3c:	680a      	ldr	r2, [r1, #0]
   80d3e:	7bd3      	ldrb	r3, [r2, #15]
   80d40:	f003 0004 	and.w	r0, r3, #4
   80d44:	b2c1      	uxtb	r1, r0
   80d46:	b359      	cbz	r1, 80da0 <sd_mmc_check+0x90c>
static bool sdio_cmd52_set_high_speed(void)
{
	uint8_t u8_value;

	// Check CIA.HS
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
   80d48:	ad03      	add	r5, sp, #12
   80d4a:	9500      	str	r5, [sp, #0]
   80d4c:	f04f 0000 	mov.w	r0, #0
   80d50:	4601      	mov	r1, r0
   80d52:	f04f 0213 	mov.w	r2, #19
   80d56:	4603      	mov	r3, r0
   80d58:	4d6c      	ldr	r5, [pc, #432]	; (80f0c <sd_mmc_check+0xa78>)
   80d5a:	47a8      	blx	r5
   80d5c:	2800      	cmp	r0, #0
   80d5e:	f000 8088 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
   80d62:	f89d 200c 	ldrb.w	r2, [sp, #12]
   80d66:	f012 0f01 	tst.w	r2, #1
   80d6a:	d019      	beq.n	80da0 <sd_mmc_check+0x90c>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_EHS;
   80d6c:	ab14      	add	r3, sp, #80	; 0x50
   80d6e:	f04f 0002 	mov.w	r0, #2
   80d72:	f803 0d44 	strb.w	r0, [r3, #-68]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
   80d76:	9300      	str	r3, [sp, #0]
   80d78:	f04f 0001 	mov.w	r0, #1
   80d7c:	f04f 0100 	mov.w	r1, #0
   80d80:	f04f 0213 	mov.w	r2, #19
   80d84:	4603      	mov	r3, r0
   80d86:	47a8      	blx	r5
   80d88:	2800      	cmp	r0, #0
   80d8a:	d072      	beq.n	80e72 <sd_mmc_check+0x9de>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->high_speed = 1;
   80d8c:	495c      	ldr	r1, [pc, #368]	; (80f00 <sd_mmc_check+0xa6c>)
   80d8e:	680b      	ldr	r3, [r1, #0]
   80d90:	f04f 0201 	mov.w	r2, #1
   80d94:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
   80d98:	6818      	ldr	r0, [r3, #0]
   80d9a:	ea4f 0140 	mov.w	r1, r0, lsl #1
   80d9e:	6019      	str	r1, [r3, #0]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_high_speed()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
   80da0:	f640 3310 	movw	r3, #2832	; 0xb10
   80da4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80da8:	6818      	ldr	r0, [r3, #0]
   80daa:	7bc2      	ldrb	r2, [r0, #15]
   80dac:	f012 0f01 	tst.w	r2, #1
   80db0:	d03c      	beq.n	80e2c <sd_mmc_check+0x998>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
   80db2:	7c01      	ldrb	r1, [r0, #16]
   80db4:	2910      	cmp	r1, #16
   80db6:	d939      	bls.n	80e2c <sd_mmc_check+0x998>
 */
static bool sd_cm6_set_high_speed(void)
{
	uint8_t switch_status[SD_SW_STATUS_BSIZE];

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
   80db8:	f04f 0301 	mov.w	r3, #1
   80dbc:	9300      	str	r3, [sp, #0]
   80dbe:	f241 1006 	movw	r0, #4358	; 0x1106
   80dc2:	f2c0 0008 	movt	r0, #8
   80dc6:	f64f 7101 	movw	r1, #65281	; 0xff01
   80dca:	f2c8 01ff 	movt	r1, #33023	; 0x80ff
   80dce:	f04f 0240 	mov.w	r2, #64	; 0x40
   80dd2:	4d50      	ldr	r5, [pc, #320]	; (80f14 <sd_mmc_check+0xa80>)
   80dd4:	47a8      	blx	r5
   80dd6:	2800      	cmp	r0, #0
   80dd8:	d04b      	beq.n	80e72 <sd_mmc_check+0x9de>
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
   80dda:	a804      	add	r0, sp, #16
   80ddc:	f04f 0101 	mov.w	r1, #1
   80de0:	4b45      	ldr	r3, [pc, #276]	; (80ef8 <sd_mmc_check+0xa64>)
   80de2:	4798      	blx	r3
   80de4:	2800      	cmp	r0, #0
   80de6:	d044      	beq.n	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80de8:	4844      	ldr	r0, [pc, #272]	; (80efc <sd_mmc_check+0xa68>)
   80dea:	4780      	blx	r0
   80dec:	2800      	cmp	r0, #0
   80dee:	d040      	beq.n	80e72 <sd_mmc_check+0x9de>
		return false;
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   80df0:	4a49      	ldr	r2, [pc, #292]	; (80f18 <sd_mmc_check+0xa84>)
   80df2:	4790      	blx	r2
   80df4:	f010 0f80 	tst.w	r0, #128	; 0x80
   80df8:	d13b      	bne.n	80e72 <sd_mmc_check+0x9de>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80dfa:	f89d 1020 	ldrb.w	r1, [sp, #32]
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
   80dfe:	f001 030f 	and.w	r3, r1, #15
   80e02:	2b0f      	cmp	r3, #15
   80e04:	d012      	beq.n	80e2c <sd_mmc_check+0x998>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80e06:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80e0a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
   80e0e:	ea50 2202 	orrs.w	r2, r0, r2, lsl #8
   80e12:	d12e      	bne.n	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
   80e14:	4941      	ldr	r1, [pc, #260]	; (80f1c <sd_mmc_check+0xa88>)
   80e16:	4788      	blx	r1
	sd_mmc_card->high_speed = 1;
   80e18:	4b39      	ldr	r3, [pc, #228]	; (80f00 <sd_mmc_check+0xa6c>)
   80e1a:	6818      	ldr	r0, [r3, #0]
   80e1c:	f04f 0201 	mov.w	r2, #1
   80e20:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
	sd_mmc_card->clock *= 2;
   80e24:	6801      	ldr	r1, [r0, #0]
   80e26:	ea4f 0341 	mov.w	r3, r1, lsl #1
   80e2a:	6003      	str	r3, [r0, #0]
					return false;
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
   80e2c:	f240 10a5 	movw	r0, #421	; 0x1a5
   80e30:	f2c0 0008 	movt	r0, #8
   80e34:	4780      	blx	r0
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80e36:	f640 3210 	movw	r2, #2832	; 0xb10
   80e3a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80e3e:	6811      	ldr	r1, [r2, #0]
   80e40:	7bcb      	ldrb	r3, [r1, #15]
   80e42:	f013 0f01 	tst.w	r3, #1
   80e46:	d006      	beq.n	80e56 <sd_mmc_check+0x9c2>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   80e48:	f241 1010 	movw	r0, #4368	; 0x1110
   80e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
   80e50:	4a2f      	ldr	r2, [pc, #188]	; (80f10 <sd_mmc_check+0xa7c>)
   80e52:	4790      	blx	r2
		sd_mmc_deselect_slot();
		return sd_mmc_err;
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   80e54:	b168      	cbz	r0, 80e72 <sd_mmc_check+0x9de>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   80e56:	f640 3010 	movw	r0, #2832	; 0xb10
   80e5a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80e5e:	6803      	ldr	r3, [r0, #0]
   80e60:	f04f 0100 	mov.w	r1, #0
   80e64:	7399      	strb	r1, [r3, #14]
		sd_mmc_deselect_slot();
   80e66:	f240 2229 	movw	r2, #553	; 0x229
   80e6a:	f2c0 0208 	movt	r2, #8
   80e6e:	4790      	blx	r2
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   80e70:	e07f      	b.n	80f72 <sd_mmc_check+0xade>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   80e72:	f640 3410 	movw	r4, #2832	; 0xb10
   80e76:	f2c2 0407 	movt	r4, #8199	; 0x2007
   80e7a:	6820      	ldr	r0, [r4, #0]
   80e7c:	f04f 0403 	mov.w	r4, #3
   80e80:	7384      	strb	r4, [r0, #14]
	sd_mmc_deselect_slot();
   80e82:	f240 2329 	movw	r3, #553	; 0x229
   80e86:	f2c0 0308 	movt	r3, #8
   80e8a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   80e8c:	e071      	b.n	80f72 <sd_mmc_check+0xade>
 */
static bool sd_cmd8(uint8_t * v2)
{
	uint32_t resp;

	*v2 = 0;
   80e8e:	f04f 0600 	mov.w	r6, #0
   80e92:	e001      	b.n	80e98 <sd_mmc_check+0xa04>
   80e94:	f04f 0600 	mov.w	r6, #0
static bool sdio_op_cond(void)
{
	uint32_t resp;

	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
   80e98:	f244 5005 	movw	r0, #17669	; 0x4505
   80e9c:	f04f 0100 	mov.w	r1, #0
   80ea0:	f644 0381 	movw	r3, #18561	; 0x4881
   80ea4:	f2c0 0308 	movt	r3, #8
   80ea8:	4798      	blx	r3
   80eaa:	2800      	cmp	r0, #0
   80eac:	f47f ab41 	bne.w	80532 <sd_mmc_check+0x9e>
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
		return false;
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80eb0:	f640 3210 	movw	r2, #2832	; 0xb10
   80eb4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80eb8:	6811      	ldr	r1, [r2, #0]
   80eba:	7bcb      	ldrb	r3, [r1, #15]
   80ebc:	f013 0f01 	tst.w	r3, #1
   80ec0:	f43f ad4a 	beq.w	80958 <sd_mmc_check+0x4c4>
   80ec4:	f7ff bb6d 	b.w	805a2 <sd_mmc_check+0x10e>
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   80ec8:	f640 3010 	movw	r0, #2832	; 0xb10
   80ecc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80ed0:	6801      	ldr	r1, [r0, #0]
   80ed2:	f04f 0302 	mov.w	r3, #2
   80ed6:	73cb      	strb	r3, [r1, #15]
static bool sd_mmc_mci_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
   80ed8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80edc:	f04f 0100 	mov.w	r1, #0
   80ee0:	f644 0281 	movw	r2, #18561	; 0x4881
   80ee4:	f2c0 0208 	movt	r2, #8
   80ee8:	4790      	blx	r2
   80eea:	2800      	cmp	r0, #0
   80eec:	f47f ab9e 	bne.w	8062c <sd_mmc_check+0x198>
   80ef0:	e7b0      	b.n	80e54 <sd_mmc_check+0x9c0>
   80ef2:	bf00      	nop
   80ef4:	000801d5 	.word	0x000801d5
   80ef8:	00084a7d 	.word	0x00084a7d
   80efc:	00084b95 	.word	0x00084b95
   80f00:	20070b10 	.word	0x20070b10
   80f04:	0008cab4 	.word	0x0008cab4
   80f08:	0008ca74 	.word	0x0008ca74
   80f0c:	00080249 	.word	0x00080249
   80f10:	00084881 	.word	0x00084881
   80f14:	00084911 	.word	0x00084911
   80f18:	000848a9 	.word	0x000848a9
   80f1c:	0008485d 	.word	0x0008485d
			sd_mmc_card->type = CARD_TYPE_MMC;
			return sd_mmc_mci_install_mmc();
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80f20:	f640 3010 	movw	r0, #2832	; 0xb10
   80f24:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80f28:	6801      	ldr	r1, [r0, #0]
   80f2a:	7bca      	ldrb	r2, [r1, #15]
   80f2c:	f012 0f01 	tst.w	r2, #1
   80f30:	f47f ad06 	bne.w	80940 <sd_mmc_check+0x4ac>
   80f34:	e510      	b.n	80958 <sd_mmc_check+0x4c4>
		return false;
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
   80f36:	f645 3002 	movw	r0, #23298	; 0x5b02
   80f3a:	f04f 0100 	mov.w	r1, #0
   80f3e:	4b38      	ldr	r3, [pc, #224]	; (81020 <sd_mmc_check+0xb8c>)
   80f40:	4798      	blx	r3
   80f42:	2800      	cmp	r0, #0
   80f44:	f47f aba9 	bne.w	8069a <sd_mmc_check+0x206>
   80f48:	e784      	b.n	80e54 <sd_mmc_check+0x9c0>
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
		return false;
	}

	if (!mmc_mci_op_cond()) {
		return false;
   80f4a:	f04f 0000 	mov.w	r0, #0
   80f4e:	e781      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
   80f50:	f04f 0000 	mov.w	r0, #0
   80f54:	e77e      	b.n	80e54 <sd_mmc_check+0x9c0>
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
   80f56:	4933      	ldr	r1, [pc, #204]	; (81024 <sd_mmc_check+0xb90>)
   80f58:	7808      	ldrb	r0, [r1, #0]
   80f5a:	4b33      	ldr	r3, [pc, #204]	; (81028 <sd_mmc_check+0xb94>)
   80f5c:	4798      	blx	r3
   80f5e:	2803      	cmp	r0, #3
   80f60:	f63f ac66 	bhi.w	80830 <sd_mmc_check+0x39c>
   80f64:	e48d      	b.n	80882 <sd_mmc_check+0x3ee>
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
   80f66:	f04f 0000 	mov.w	r0, #0
   80f6a:	e773      	b.n	80e54 <sd_mmc_check+0x9c0>
			sd_mmc_configure_slot();
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
   80f6c:	f04f 0000 	mov.w	r0, #0
   80f70:	e770      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
   80f72:	4620      	mov	r0, r4
   80f74:	b015      	add	sp, #84	; 0x54
   80f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80f7a:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80f7c:	2800      	cmp	r0, #0
   80f7e:	f6ff ab74 	blt.w	8066a <sd_mmc_check+0x1d6>
   80f82:	f241 0669 	movw	r6, #4201	; 0x1069
   80f86:	f106 36ff 	add.w	r6, r6, #4294967295
   80f8a:	f7ff bb65 	b.w	80658 <sd_mmc_check+0x1c4>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80f8e:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80f90:	2800      	cmp	r0, #0
   80f92:	f6ff ab6a 	blt.w	8066a <sd_mmc_check+0x1d6>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
			}
			break;
		}
		if (retry-- == 0) {
   80f96:	3e01      	subs	r6, #1
   80f98:	f47f ab5e 	bne.w	80658 <sd_mmc_check+0x1c4>
   80f9c:	e7d5      	b.n	80f4a <sd_mmc_check+0xab6>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   80f9e:	4649      	mov	r1, r9
   80fa0:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   80fa4:	f244 5029 	movw	r0, #17705	; 0x4529
   80fa8:	2e00      	cmp	r6, #0
   80faa:	bf08      	it	eq
   80fac:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   80fb0:	47a8      	blx	r5
   80fb2:	2800      	cmp	r0, #0
   80fb4:	d088      	beq.n	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80fb6:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   80fb8:	2800      	cmp	r0, #0
   80fba:	f6ff ab1e 	blt.w	805fa <sd_mmc_check+0x166>
   80fbe:	f640 0b35 	movw	fp, #2101	; 0x835
   80fc2:	f10b 3bff 	add.w	fp, fp, #4294967295
   80fc6:	f7ff bb02 	b.w	805ce <sd_mmc_check+0x13a>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   80fca:	4649      	mov	r1, r9
   80fcc:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   80fd0:	f244 5029 	movw	r0, #17705	; 0x4529
   80fd4:	2e00      	cmp	r6, #0
   80fd6:	bf08      	it	eq
   80fd8:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   80fdc:	47a8      	blx	r5
   80fde:	2800      	cmp	r0, #0
   80fe0:	f43f af72 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80fe4:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   80fe6:	2800      	cmp	r0, #0
   80fe8:	f6ff ab07 	blt.w	805fa <sd_mmc_check+0x166>
			if ((resp & OCR_CCS) != 0) {
				sd_mmc_card->type |= CARD_TYPE_HC;
			}
			break;
		}
		if (retry-- == 0) {
   80fec:	f1bb 0b01 	subs.w	fp, fp, #1
   80ff0:	f47f aaed 	bne.w	805ce <sd_mmc_check+0x13a>
   80ff4:	e768      	b.n	80ec8 <sd_mmc_check+0xa34>
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80ff6:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   80ff8:	1e01      	subs	r1, r0, #0
   80ffa:	f6ff aac5 	blt.w	80588 <sd_mmc_check+0xf4>
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   80ffe:	4638      	mov	r0, r7
   81000:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   81004:	47a8      	blx	r5
   81006:	2800      	cmp	r0, #0
   81008:	f43f af33 	beq.w	80e72 <sd_mmc_check+0x9de>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   8100c:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   8100e:	1e01      	subs	r1, r0, #0
   81010:	f6ff aaba 	blt.w	80588 <sd_mmc_check+0xf4>
			break;
		}
		if (cmd5_retry-- == 0) {
   81014:	f1b9 0902 	subs.w	r9, r9, #2
   81018:	f47f aaa1 	bne.w	8055e <sd_mmc_check+0xca>
   8101c:	e729      	b.n	80e72 <sd_mmc_check+0x9de>
   8101e:	bf00      	nop
   81020:	00084881 	.word	0x00084881
   81024:	20070b16 	.word	0x20070b16
   81028:	000847d1 	.word	0x000847d1

0008102c <sd_mmc_get_type>:
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
   8102c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   8102e:	f240 23d5 	movw	r3, #725	; 0x2d5
   81032:	f2c0 0308 	movt	r3, #8
   81036:	4798      	blx	r3
   81038:	b958      	cbnz	r0, 81052 <sd_mmc_get_type+0x26>
		return CARD_TYPE_UNKNOWN;
	}
	sd_mmc_deselect_slot();
   8103a:	f240 2029 	movw	r0, #553	; 0x229
   8103e:	f2c0 0008 	movt	r0, #8
   81042:	4780      	blx	r0
	return sd_mmc_card->type;
   81044:	f640 3110 	movw	r1, #2832	; 0xb10
   81048:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8104c:	680a      	ldr	r2, [r1, #0]
   8104e:	7bd0      	ldrb	r0, [r2, #15]
   81050:	bd08      	pop	{r3, pc}
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
   81052:	f04f 0000 	mov.w	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
   81056:	bd08      	pop	{r3, pc}

00081058 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   81058:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   8105a:	f240 23d5 	movw	r3, #725	; 0x2d5
   8105e:	f2c0 0308 	movt	r3, #8
   81062:	4798      	blx	r3
   81064:	b958      	cbnz	r0, 8107e <sd_mmc_get_capacity+0x26>
		return 0;
	}
	sd_mmc_deselect_slot();
   81066:	f240 2029 	movw	r0, #553	; 0x229
   8106a:	f2c0 0008 	movt	r0, #8
   8106e:	4780      	blx	r0
	return sd_mmc_card->capacity;
   81070:	f640 3110 	movw	r1, #2832	; 0xb10
   81074:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81078:	680a      	ldr	r2, [r1, #0]
   8107a:	6850      	ldr	r0, [r2, #4]
   8107c:	bd08      	pop	{r3, pc}
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
   8107e:	f04f 0000 	mov.w	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
   81082:	bd08      	pop	{r3, pc}

00081084 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
   81084:	f04f 0000 	mov.w	r0, #0
   81088:	4770      	bx	lr
   8108a:	bf00      	nop

0008108c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   8108c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81090:	b083      	sub	sp, #12
   81092:	468b      	mov	fp, r1
   81094:	4692      	mov	sl, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   81096:	f240 23d5 	movw	r3, #725	; 0x2d5
   8109a:	f2c0 0308 	movt	r3, #8
   8109e:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
   810a0:	4681      	mov	r9, r0
   810a2:	2800      	cmp	r0, #0
   810a4:	f040 8081 	bne.w	811aa <sd_mmc_init_read_blocks+0x11e>
   810a8:	f640 5841 	movw	r8, #3393	; 0xd41
   810ac:	f2c0 0803 	movt	r8, #3
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810b0:	f640 3610 	movw	r6, #2832	; 0xb10
   810b4:	f2c2 0607 	movt	r6, #8199	; 0x2007
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810b8:	f241 150d 	movw	r5, #4365	; 0x110d
   810bc:	f644 0481 	movw	r4, #18561	; 0x4881
   810c0:	f2c0 0408 	movt	r4, #8
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   810c4:	f644 07a9 	movw	r7, #18601	; 0x48a9
   810c8:	f2c0 0708 	movt	r7, #8
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810cc:	6830      	ldr	r0, [r6, #0]
   810ce:	8981      	ldrh	r1, [r0, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810d0:	4628      	mov	r0, r5
   810d2:	ea4f 4101 	mov.w	r1, r1, lsl #16
   810d6:	47a0      	blx	r4
   810d8:	2800      	cmp	r0, #0
   810da:	d046      	beq.n	8116a <sd_mmc_init_read_blocks+0xde>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   810dc:	47b8      	blx	r7
   810de:	f410 7f80 	tst.w	r0, #256	; 0x100
   810e2:	d14a      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
   810e4:	f108 38ff 	add.w	r8, r8, #4294967295
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810e8:	6832      	ldr	r2, [r6, #0]
   810ea:	8993      	ldrh	r3, [r2, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810ec:	4628      	mov	r0, r5
   810ee:	ea4f 4103 	mov.w	r1, r3, lsl #16
   810f2:	47a0      	blx	r4
   810f4:	2800      	cmp	r0, #0
   810f6:	d15c      	bne.n	811b2 <sd_mmc_init_read_blocks+0x126>
   810f8:	e037      	b.n	8116a <sd_mmc_init_read_blocks+0xde>
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   810fa:	ea4f 214b 	mov.w	r1, fp, lsl #9
   810fe:	e000      	b.n	81102 <sd_mmc_init_read_blocks+0x76>
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
   81100:	4659      	mov	r1, fp
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   81102:	f04f 0301 	mov.w	r3, #1
   81106:	9300      	str	r3, [sp, #0]
   81108:	f44f 7200 	mov.w	r2, #512	; 0x200
   8110c:	4653      	mov	r3, sl
   8110e:	f644 1411 	movw	r4, #18705	; 0x4911
   81112:	f2c0 0408 	movt	r4, #8
   81116:	47a0      	blx	r4
   81118:	b938      	cbnz	r0, 8112a <sd_mmc_init_read_blocks+0x9e>
		sd_mmc_deselect_slot();
   8111a:	f240 2129 	movw	r1, #553	; 0x229
   8111e:	f2c0 0108 	movt	r1, #8
   81122:	4788      	blx	r1
		return SD_MMC_ERR_COMM;
   81124:	f04f 0905 	mov.w	r9, #5
   81128:	e03f      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
   8112a:	f644 00a9 	movw	r0, #18601	; 0x48a9
   8112e:	f2c0 0008 	movt	r0, #8
   81132:	4780      	blx	r0
		if (resp & CARD_STATUS_ERR_RD_WR) {
   81134:	f04f 0100 	mov.w	r1, #0
   81138:	f2ce 4158 	movt	r1, #58456	; 0xe458
   8113c:	4001      	ands	r1, r0
   8113e:	b139      	cbz	r1, 81150 <sd_mmc_init_read_blocks+0xc4>
			sd_mmc_debug("%s: Read blocks %02d resp32 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
   81140:	f240 2029 	movw	r0, #553	; 0x229
   81144:	f2c0 0008 	movt	r0, #8
   81148:	4780      	blx	r0
			return SD_MMC_ERR_COMM;
   8114a:	f04f 0905 	mov.w	r9, #5
   8114e:	e02c      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   81150:	f640 3214 	movw	r2, #2836	; 0xb14
   81154:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81158:	f8a2 a000 	strh.w	sl, [r2]
	sd_mmc_nb_block_to_tranfer = nb_block;
   8115c:	f640 330c 	movw	r3, #2828	; 0xb0c
   81160:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81164:	f8a3 a000 	strh.w	sl, [r3]
	return SD_MMC_OK;
   81168:	e01f      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
		return sd_mmc_err;
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
		sd_mmc_deselect_slot();
   8116a:	f240 2229 	movw	r2, #553	; 0x229
   8116e:	f2c0 0208 	movt	r2, #8
   81172:	4790      	blx	r2
		return SD_MMC_ERR_COMM;
   81174:	f04f 0905 	mov.w	r9, #5
   81178:	e017      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   8117a:	f241 1011 	movw	r0, #4369	; 0x1111
   8117e:	f2c0 0008 	movt	r0, #8
   81182:	f241 1412 	movw	r4, #4370	; 0x1112
   81186:	f2c0 0410 	movt	r4, #16
   8118a:	f1ba 0f01 	cmp.w	sl, #1
   8118e:	bf88      	it	hi
   81190:	4620      	movhi	r0, r4
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   81192:	f640 3210 	movw	r2, #2832	; 0xb10
   81196:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8119a:	6813      	ldr	r3, [r2, #0]
   8119c:	7bd9      	ldrb	r1, [r3, #15]
   8119e:	f001 0408 	and.w	r4, r1, #8
   811a2:	b2e2      	uxtb	r2, r4
   811a4:	2a00      	cmp	r2, #0
   811a6:	d1ab      	bne.n	81100 <sd_mmc_init_read_blocks+0x74>
   811a8:	e7a7      	b.n	810fa <sd_mmc_init_read_blocks+0x6e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
   811aa:	4648      	mov	r0, r9
   811ac:	b003      	add	sp, #12
   811ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   811b2:	47b8      	blx	r7
   811b4:	f410 7f80 	tst.w	r0, #256	; 0x100
   811b8:	d1df      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   811ba:	6830      	ldr	r0, [r6, #0]
   811bc:	8981      	ldrh	r1, [r0, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   811be:	4628      	mov	r0, r5
   811c0:	ea4f 4101 	mov.w	r1, r1, lsl #16
   811c4:	47a0      	blx	r4
   811c6:	2800      	cmp	r0, #0
   811c8:	d0cf      	beq.n	8116a <sd_mmc_init_read_blocks+0xde>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   811ca:	47b8      	blx	r7
   811cc:	f410 7f80 	tst.w	r0, #256	; 0x100
   811d0:	d1d3      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
				break;
			}
		}
		if (nec_timeout-- == 0) {
   811d2:	f1b8 0802 	subs.w	r8, r8, #2
   811d6:	f47f af79 	bne.w	810cc <sd_mmc_init_read_blocks+0x40>
   811da:	e7c6      	b.n	8116a <sd_mmc_init_read_blocks+0xde>

000811dc <sd_mmc_start_read_blocks>:
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   811dc:	b510      	push	{r4, lr}
   811de:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   811e0:	f644 237d 	movw	r3, #19069	; 0x4a7d
   811e4:	f2c0 0308 	movt	r3, #8
   811e8:	4798      	blx	r3
   811ea:	b948      	cbnz	r0, 81200 <sd_mmc_start_read_blocks+0x24>
		sd_mmc_nb_block_remaining = 0;
   811ec:	f640 3114 	movw	r1, #2836	; 0xb14
   811f0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   811f4:	f04f 0300 	mov.w	r3, #0
   811f8:	800b      	strh	r3, [r1, #0]
		return SD_MMC_ERR_COMM;
   811fa:	f04f 0005 	mov.w	r0, #5
   811fe:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
   81200:	f640 3014 	movw	r0, #2836	; 0xb14
   81204:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81208:	8802      	ldrh	r2, [r0, #0]
   8120a:	1b14      	subs	r4, r2, r4
   8120c:	8004      	strh	r4, [r0, #0]
	return SD_MMC_OK;
   8120e:	f04f 0000 	mov.w	r0, #0
}
   81212:	bd10      	pop	{r4, pc}

00081214 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(void)
{
   81214:	b508      	push	{r3, lr}
	if (!driver_wait_end_of_read_blocks()) {
   81216:	f644 3395 	movw	r3, #19349	; 0x4b95
   8121a:	f2c0 0308 	movt	r3, #8
   8121e:	4798      	blx	r3
   81220:	2800      	cmp	r0, #0
   81222:	d030      	beq.n	81286 <sd_mmc_wait_end_of_read_blocks+0x72>
		return SD_MMC_ERR_COMM;
	}
	if (sd_mmc_nb_block_remaining) {
   81224:	f640 3014 	movw	r0, #2836	; 0xb14
   81228:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8122c:	8801      	ldrh	r1, [r0, #0]
   8122e:	2900      	cmp	r1, #0
   81230:	d12c      	bne.n	8128c <sd_mmc_wait_end_of_read_blocks+0x78>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   81232:	f640 320c 	movw	r2, #2828	; 0xb0c
   81236:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8123a:	8813      	ldrh	r3, [r2, #0]
   8123c:	2b01      	cmp	r3, #1
   8123e:	d107      	bne.n	81250 <sd_mmc_wait_end_of_read_blocks+0x3c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   81240:	f240 2129 	movw	r1, #553	; 0x229
   81244:	f2c0 0108 	movt	r1, #8
   81248:	4788      	blx	r1
		return SD_MMC_OK;
   8124a:	f04f 0000 	mov.w	r0, #0
   8124e:	bd08      	pop	{r3, pc}
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   81250:	f243 100c 	movw	r0, #12556	; 0x310c
   81254:	f04f 0100 	mov.w	r1, #0
   81258:	f644 0281 	movw	r2, #18561	; 0x4881
   8125c:	f2c0 0208 	movt	r2, #8
   81260:	4790      	blx	r2
   81262:	b940      	cbnz	r0, 81276 <sd_mmc_wait_end_of_read_blocks+0x62>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   81264:	f243 100c 	movw	r0, #12556	; 0x310c
   81268:	f04f 0100 	mov.w	r1, #0
   8126c:	f644 0381 	movw	r3, #18561	; 0x4881
   81270:	f2c0 0308 	movt	r3, #8
   81274:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   81276:	f240 2029 	movw	r0, #553	; 0x229
   8127a:	f2c0 0008 	movt	r0, #8
   8127e:	4780      	blx	r0
	return SD_MMC_OK;
   81280:	f04f 0000 	mov.w	r0, #0
   81284:	bd08      	pop	{r3, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(void)
{
	if (!driver_wait_end_of_read_blocks()) {
		return SD_MMC_ERR_COMM;
   81286:	f04f 0005 	mov.w	r0, #5
   8128a:	bd08      	pop	{r3, pc}
	}
	if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
   8128c:	f04f 0000 	mov.w	r0, #0
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   81290:	bd08      	pop	{r3, pc}
   81292:	bf00      	nop

00081294 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   81294:	b5f0      	push	{r4, r5, r6, r7, lr}
   81296:	b083      	sub	sp, #12
   81298:	4606      	mov	r6, r0
   8129a:	460f      	mov	r7, r1
   8129c:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   8129e:	f240 24d5 	movw	r4, #725	; 0x2d5
   812a2:	f2c0 0408 	movt	r4, #8
   812a6:	47a0      	blx	r4
	if (sd_mmc_err != SD_MMC_OK) {
   812a8:	4604      	mov	r4, r0
   812aa:	2800      	cmp	r0, #0
   812ac:	d158      	bne.n	81360 <sd_mmc_init_write_blocks+0xcc>
		return sd_mmc_err;
	}
	if (sd_mmc_is_write_protected(slot)) {
   812ae:	4630      	mov	r0, r6
   812b0:	f241 0385 	movw	r3, #4229	; 0x1085
   812b4:	f2c0 0308 	movt	r3, #8
   812b8:	4798      	blx	r3
   812ba:	b138      	cbz	r0, 812cc <sd_mmc_init_write_blocks+0x38>
		sd_mmc_deselect_slot();
   812bc:	f240 2329 	movw	r3, #553	; 0x229
   812c0:	f2c0 0308 	movt	r3, #8
   812c4:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   812c6:	f04f 0407 	mov.w	r4, #7
   812ca:	e049      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   812cc:	f249 1018 	movw	r0, #37144	; 0x9118
   812d0:	f2c0 0008 	movt	r0, #8
   812d4:	f249 1119 	movw	r1, #37145	; 0x9119
   812d8:	f2c0 0110 	movt	r1, #16
   812dc:	2d01      	cmp	r5, #1
   812de:	bf88      	it	hi
   812e0:	4608      	movhi	r0, r1
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   812e2:	f640 3210 	movw	r2, #2832	; 0xb10
   812e6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   812ea:	6816      	ldr	r6, [r2, #0]
   812ec:	7bf3      	ldrb	r3, [r6, #15]
   812ee:	f003 0108 	and.w	r1, r3, #8
   812f2:	b2ca      	uxtb	r2, r1
   812f4:	b912      	cbnz	r2, 812fc <sd_mmc_init_write_blocks+0x68>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   812f6:	ea4f 2147 	mov.w	r1, r7, lsl #9
   812fa:	e000      	b.n	812fe <sd_mmc_init_write_blocks+0x6a>
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
   812fc:	4639      	mov	r1, r7
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   812fe:	f04f 0601 	mov.w	r6, #1
   81302:	9600      	str	r6, [sp, #0]
   81304:	f44f 7200 	mov.w	r2, #512	; 0x200
   81308:	462b      	mov	r3, r5
   8130a:	f644 1611 	movw	r6, #18705	; 0x4911
   8130e:	f2c0 0608 	movt	r6, #8
   81312:	47b0      	blx	r6
   81314:	b938      	cbnz	r0, 81326 <sd_mmc_init_write_blocks+0x92>
		sd_mmc_deselect_slot();
   81316:	f240 2029 	movw	r0, #553	; 0x229
   8131a:	f2c0 0008 	movt	r0, #8
   8131e:	4780      	blx	r0
		return SD_MMC_ERR_COMM;
   81320:	f04f 0405 	mov.w	r4, #5
   81324:	e01c      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
   81326:	f644 00a9 	movw	r0, #18601	; 0x48a9
   8132a:	f2c0 0008 	movt	r0, #8
   8132e:	4780      	blx	r0
		if (resp & CARD_STATUS_ERR_RD_WR) {
   81330:	f04f 0300 	mov.w	r3, #0
   81334:	f2ce 4358 	movt	r3, #58456	; 0xe458
   81338:	4003      	ands	r3, r0
   8133a:	b13b      	cbz	r3, 8134c <sd_mmc_init_write_blocks+0xb8>
			sd_mmc_debug("%s: Write blocks %02d r1 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
   8133c:	f240 2429 	movw	r4, #553	; 0x229
   81340:	f2c0 0408 	movt	r4, #8
   81344:	47a0      	blx	r4
			return SD_MMC_ERR_COMM;
   81346:	f04f 0405 	mov.w	r4, #5
   8134a:	e009      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   8134c:	f640 3114 	movw	r1, #2836	; 0xb14
   81350:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81354:	800d      	strh	r5, [r1, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   81356:	f640 320c 	movw	r2, #2828	; 0xb0c
   8135a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8135e:	8015      	strh	r5, [r2, #0]
	return SD_MMC_OK;
}
   81360:	4620      	mov	r0, r4
   81362:	b003      	add	sp, #12
   81364:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81366:	bf00      	nop

00081368 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   81368:	b510      	push	{r4, lr}
   8136a:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   8136c:	f644 430d 	movw	r3, #19469	; 0x4c0d
   81370:	f2c0 0308 	movt	r3, #8
   81374:	4798      	blx	r3
   81376:	b948      	cbnz	r0, 8138c <sd_mmc_start_write_blocks+0x24>
		sd_mmc_nb_block_remaining = 0;
   81378:	f640 3114 	movw	r1, #2836	; 0xb14
   8137c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81380:	f04f 0300 	mov.w	r3, #0
   81384:	800b      	strh	r3, [r1, #0]
		return SD_MMC_ERR_COMM;
   81386:	f04f 0005 	mov.w	r0, #5
   8138a:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
   8138c:	f640 3014 	movw	r0, #2836	; 0xb14
   81390:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81394:	8802      	ldrh	r2, [r0, #0]
   81396:	1b14      	subs	r4, r2, r4
   81398:	8004      	strh	r4, [r0, #0]
	return SD_MMC_OK;
   8139a:	f04f 0000 	mov.w	r0, #0
}
   8139e:	bd10      	pop	{r4, pc}

000813a0 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(void)
{
   813a0:	b508      	push	{r3, lr}
	if (!driver_wait_end_of_write_blocks()) {
   813a2:	f644 5305 	movw	r3, #19717	; 0x4d05
   813a6:	f2c0 0308 	movt	r3, #8
   813aa:	4798      	blx	r3
   813ac:	2800      	cmp	r0, #0
   813ae:	d02f      	beq.n	81410 <sd_mmc_wait_end_of_write_blocks+0x70>
		return SD_MMC_ERR_COMM;
	}
	if (sd_mmc_nb_block_remaining) {
   813b0:	f640 3014 	movw	r0, #2836	; 0xb14
   813b4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   813b8:	8801      	ldrh	r1, [r0, #0]
   813ba:	2900      	cmp	r1, #0
   813bc:	d12b      	bne.n	81416 <sd_mmc_wait_end_of_write_blocks+0x76>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   813be:	f640 320c 	movw	r2, #2828	; 0xb0c
   813c2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   813c6:	8813      	ldrh	r3, [r2, #0]
   813c8:	2b01      	cmp	r3, #1
   813ca:	d107      	bne.n	813dc <sd_mmc_wait_end_of_write_blocks+0x3c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   813cc:	f240 2329 	movw	r3, #553	; 0x229
   813d0:	f2c0 0308 	movt	r3, #8
   813d4:	4798      	blx	r3
		return SD_MMC_OK;
   813d6:	f04f 0000 	mov.w	r0, #0
   813da:	bd08      	pop	{r3, pc}
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   813dc:	f243 100c 	movw	r0, #12556	; 0x310c
   813e0:	f04f 0100 	mov.w	r1, #0
   813e4:	f644 0281 	movw	r2, #18561	; 0x4881
   813e8:	f2c0 0208 	movt	r2, #8
   813ec:	4790      	blx	r2
   813ee:	b938      	cbnz	r0, 81400 <sd_mmc_wait_end_of_write_blocks+0x60>
			sd_mmc_deselect_slot();
   813f0:	f240 2129 	movw	r1, #553	; 0x229
   813f4:	f2c0 0108 	movt	r1, #8
   813f8:	4788      	blx	r1
			return SD_MMC_ERR_COMM;
   813fa:	f04f 0005 	mov.w	r0, #5
   813fe:	bd08      	pop	{r3, pc}
		}
	}
	sd_mmc_deselect_slot();
   81400:	f240 2029 	movw	r0, #553	; 0x229
   81404:	f2c0 0008 	movt	r0, #8
   81408:	4780      	blx	r0
	return SD_MMC_OK;
   8140a:	f04f 0000 	mov.w	r0, #0
   8140e:	bd08      	pop	{r3, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(void)
{
	if (!driver_wait_end_of_write_blocks()) {
		return SD_MMC_ERR_COMM;
   81410:	f04f 0005 	mov.w	r0, #5
   81414:	bd08      	pop	{r3, pc}
	}
	if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
   81416:	f04f 0000 	mov.w	r0, #0
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   8141a:	bd08      	pop	{r3, pc}

0008141c <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   8141c:	b4f0      	push	{r4, r5, r6, r7}
   8141e:	b08c      	sub	sp, #48	; 0x30
   81420:	4606      	mov	r6, r0
   81422:	460f      	mov	r7, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   81424:	ac01      	add	r4, sp, #4
   81426:	f64c 3510 	movw	r5, #51984	; 0xcb10
   8142a:	f2c0 0508 	movt	r5, #8
   8142e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81436:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   8143a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8143e:	9b01      	ldr	r3, [sp, #4]
   81440:	fbb7 f0f3 	udiv	r0, r7, r3
   81444:	fbb0 f1f6 	udiv	r1, r0, r6
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81448:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8144c:	d952      	bls.n	814f4 <pwm_clocks_generate+0xd8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8144e:	9902      	ldr	r1, [sp, #8]
   81450:	fbb7 f2f1 	udiv	r2, r7, r1
   81454:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81458:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8145c:	d94f      	bls.n	814fe <pwm_clocks_generate+0xe2>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8145e:	9b03      	ldr	r3, [sp, #12]
   81460:	fbb7 f0f3 	udiv	r0, r7, r3
   81464:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81468:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8146c:	d94a      	bls.n	81504 <pwm_clocks_generate+0xe8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8146e:	9904      	ldr	r1, [sp, #16]
   81470:	fbb7 f2f1 	udiv	r2, r7, r1
   81474:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81478:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8147c:	d945      	bls.n	8150a <pwm_clocks_generate+0xee>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8147e:	9b05      	ldr	r3, [sp, #20]
   81480:	fbb7 f0f3 	udiv	r0, r7, r3
   81484:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81488:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8148c:	d940      	bls.n	81510 <pwm_clocks_generate+0xf4>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8148e:	9906      	ldr	r1, [sp, #24]
   81490:	fbb7 f2f1 	udiv	r2, r7, r1
   81494:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81498:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8149c:	d93b      	bls.n	81516 <pwm_clocks_generate+0xfa>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8149e:	9b07      	ldr	r3, [sp, #28]
   814a0:	fbb7 f0f3 	udiv	r0, r7, r3
   814a4:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814a8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814ac:	d936      	bls.n	8151c <pwm_clocks_generate+0x100>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814ae:	9908      	ldr	r1, [sp, #32]
   814b0:	fbb7 f2f1 	udiv	r2, r7, r1
   814b4:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814b8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814bc:	d931      	bls.n	81522 <pwm_clocks_generate+0x106>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   814c0:	fbb7 f0f3 	udiv	r0, r7, r3
   814c4:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814c8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814cc:	d92c      	bls.n	81528 <pwm_clocks_generate+0x10c>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814ce:	990a      	ldr	r1, [sp, #40]	; 0x28
   814d0:	fbb7 f2f1 	udiv	r2, r7, r1
   814d4:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814d8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814dc:	d927      	bls.n	8152e <pwm_clocks_generate+0x112>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   814e0:	fbb7 f0f3 	udiv	r0, r7, r3
   814e4:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814e8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814ec:	d922      	bls.n	81534 <pwm_clocks_generate+0x118>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   814ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
   814f2:	e022      	b.n	8153a <pwm_clocks_generate+0x11e>
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   814f4:	f04f 0200 	mov.w	r2, #0
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	}

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
   814f8:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
   814fc:	e01d      	b.n	8153a <pwm_clocks_generate+0x11e>
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
		ul_pre++;
   814fe:	f04f 0201 	mov.w	r2, #1
   81502:	e7f9      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81504:	f04f 0202 	mov.w	r2, #2
   81508:	e7f6      	b.n	814f8 <pwm_clocks_generate+0xdc>
   8150a:	f04f 0203 	mov.w	r2, #3
   8150e:	e7f3      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81510:	f04f 0204 	mov.w	r2, #4
   81514:	e7f0      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81516:	f04f 0205 	mov.w	r2, #5
   8151a:	e7ed      	b.n	814f8 <pwm_clocks_generate+0xdc>
   8151c:	f04f 0206 	mov.w	r2, #6
   81520:	e7ea      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81522:	f04f 0207 	mov.w	r2, #7
   81526:	e7e7      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81528:	f04f 0208 	mov.w	r2, #8
   8152c:	e7e4      	b.n	814f8 <pwm_clocks_generate+0xdc>
   8152e:	f04f 0209 	mov.w	r2, #9
   81532:	e7e1      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81534:	f04f 020a 	mov.w	r2, #10
   81538:	e7de      	b.n	814f8 <pwm_clocks_generate+0xdc>
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
	}
}
   8153a:	b00c      	add	sp, #48	; 0x30
   8153c:	bcf0      	pop	{r4, r5, r6, r7}
   8153e:	4770      	bx	lr

00081540 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   81540:	b570      	push	{r4, r5, r6, lr}
   81542:	4606      	mov	r6, r0
   81544:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   81546:	6808      	ldr	r0, [r1, #0]
   81548:	b158      	cbz	r0, 81562 <pwm_init+0x22>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   8154a:	6889      	ldr	r1, [r1, #8]
   8154c:	f241 431d 	movw	r3, #5149	; 0x141d
   81550:	f2c0 0308 	movt	r3, #8
   81554:	4798      	blx	r3
		if (result == PWM_INVALID_ARGUMENT) {
   81556:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8155a:	4288      	cmp	r0, r1
   8155c:	d014      	beq.n	81588 <pwm_init+0x48>
			return result;
		}

		clock = result;
   8155e:	4605      	mov	r5, r0
   81560:	e001      	b.n	81566 <pwm_init+0x26>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   81562:	f04f 0500 	mov.w	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   81566:	6860      	ldr	r0, [r4, #4]
   81568:	b158      	cbz	r0, 81582 <pwm_init+0x42>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   8156a:	68a1      	ldr	r1, [r4, #8]
   8156c:	f241 421d 	movw	r2, #5149	; 0x141d
   81570:	f2c0 0208 	movt	r2, #8
   81574:	4790      	blx	r2

		if (result == PWM_INVALID_ARGUMENT) {
   81576:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8157a:	4298      	cmp	r0, r3
   8157c:	d004      	beq.n	81588 <pwm_init+0x48>
			return result;
		}

		clock |= (result << 16);
   8157e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   81582:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   81584:	f04f 0000 	mov.w	r0, #0
}
   81588:	bd70      	pop	{r4, r5, r6, pc}
   8158a:	bf00      	nop

0008158c <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   8158c:	b470      	push	{r4, r5, r6}
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
   8158e:	680b      	ldr	r3, [r1, #0]
	uint32_t channel = (1 << ch_num);
   81590:	f04f 0201 	mov.w	r2, #1
   81594:	fa02 f203 	lsl.w	r2, r2, r3

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81598:	8a8e      	ldrh	r6, [r1, #20]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   8159a:	684c      	ldr	r4, [r1, #4]
   8159c:	f004 050f 	and.w	r5, r4, #15
   815a0:	432e      	orrs	r6, r5
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   815a2:	890c      	ldrh	r4, [r1, #8]
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   815a4:	4326      	orrs	r6, r4
   815a6:	7a8d      	ldrb	r5, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   815a8:	ea46 2645 	orr.w	r6, r6, r5, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   815ac:	7d8c      	ldrb	r4, [r1, #22]
   815ae:	ea46 4504 	orr.w	r5, r6, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   815b2:	7dce      	ldrb	r6, [r1, #23]
   815b4:	ea45 4546 	orr.w	r5, r5, r6, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   815b8:	7e0c      	ldrb	r4, [r1, #24]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   815ba:	ea45 4684 	orr.w	r6, r5, r4, lsl #18
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = ch_mode_reg;
   815be:	f103 0510 	add.w	r5, r3, #16
   815c2:	ea4f 1445 	mov.w	r4, r5, lsl #5
   815c6:	1905      	adds	r5, r0, r4
   815c8:	5106      	str	r6, [r0, r4]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   815ca:	68cc      	ldr	r4, [r1, #12]
   815cc:	606c      	str	r4, [r5, #4]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   815ce:	690c      	ldr	r4, [r1, #16]
   815d0:	eb00 1543 	add.w	r5, r0, r3, lsl #5
   815d4:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   815d8:	7d8c      	ldrb	r4, [r1, #22]
   815da:	b13c      	cbz	r4, 815ec <pwm_channel_init+0x60>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   815dc:	8b8d      	ldrh	r5, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   815de:	8b4c      	ldrh	r4, [r1, #26]
   815e0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   815e4:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   815e8:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
   815ec:	7fcd      	ldrb	r5, [r1, #31]
   815ee:	fa05 f503 	lsl.w	r5, r5, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
   815f2:	7f8c      	ldrb	r4, [r1, #30]
   815f4:	fa04 f403 	lsl.w	r4, r4, r3
   815f8:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
   815fc:	6485      	str	r5, [r0, #72]	; 0x48
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
   815fe:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   81602:	fa05 f503 	lsl.w	r5, r5, r3
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
   81606:	f891 4020 	ldrb.w	r4, [r1, #32]
   8160a:	fa04 f403 	lsl.w	r4, r4, r3
   8160e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
   81612:	6444      	str	r4, [r0, #68]	; 0x44
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
					ch_num) << 16);

	/* Sync Channels Mode Register */
	if (p_channel->b_sync_ch) {
   81614:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   81618:	b11c      	cbz	r4, 81622 <pwm_channel_init+0x96>
		p_pwm->PWM_SCM |= channel;
   8161a:	6a04      	ldr	r4, [r0, #32]
   8161c:	4314      	orrs	r4, r2
   8161e:	6204      	str	r4, [r0, #32]
   81620:	e003      	b.n	8162a <pwm_channel_init+0x9e>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   81622:	6a04      	ldr	r4, [r0, #32]
   81624:	ea24 0402 	bic.w	r4, r4, r2
   81628:	6204      	str	r4, [r0, #32]
		p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
	} else {
		p_pwm->PWM_FPV1 &= (!((0x01 << ch_num) << 16));
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   8162a:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   8162e:	2c01      	cmp	r4, #1
   81630:	d103      	bne.n	8163a <pwm_channel_init+0xae>
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   81632:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81634:	4314      	orrs	r4, r2
   81636:	6684      	str	r4, [r0, #104]	; 0x68
   81638:	e006      	b.n	81648 <pwm_channel_init+0xbc>
	} else {
		p_pwm->PWM_FPV &= (!(0x01 << ch_num));
   8163a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8163c:	2a00      	cmp	r2, #0
   8163e:	bf14      	ite	ne
   81640:	2400      	movne	r4, #0
   81642:	f004 0401 	andeq.w	r4, r4, #1
   81646:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   81648:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   8164c:	2c01      	cmp	r4, #1
   8164e:	d104      	bne.n	8165a <pwm_channel_init+0xce>
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   81650:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81652:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
   81656:	6682      	str	r2, [r0, #104]	; 0x68
   81658:	e006      	b.n	81668 <pwm_channel_init+0xdc>
	} else {
		p_pwm->PWM_FPV &= (!((0x01 << ch_num) << 16));
   8165a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8165c:	0412      	lsls	r2, r2, #16
   8165e:	bf14      	ite	ne
   81660:	2200      	movne	r2, #0
   81662:	f004 0201 	andeq.w	r2, r4, #1
   81666:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   81668:	2b03      	cmp	r3, #3
   8166a:	d80f      	bhi.n	8168c <pwm_channel_init+0x100>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   8166c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   8166e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   81672:	f04f 02ff 	mov.w	r2, #255	; 0xff
   81676:	fa02 f203 	lsl.w	r2, r2, r3
   8167a:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   8167e:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   81682:	fa01 f303 	lsl.w	r3, r1, r3
   81686:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE1 = fault_enable_reg;
   81688:	66c2      	str	r2, [r0, #108]	; 0x6c
   8168a:	e010      	b.n	816ae <pwm_channel_init+0x122>
	} else {
		ch_num -= 4;
   8168c:	f1a3 0304 	sub.w	r3, r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   81690:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   81692:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   81696:	f04f 02ff 	mov.w	r2, #255	; 0xff
   8169a:	fa02 f203 	lsl.w	r2, r2, r3
   8169e:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   816a2:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   816a6:	fa01 f303 	lsl.w	r3, r1, r3
   816aa:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE2 = fault_enable_reg;
   816ac:	6702      	str	r2, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   816ae:	f04f 0000 	mov.w	r0, #0
   816b2:	bc70      	pop	{r4, r5, r6}
   816b4:	4770      	bx	lr
   816b6:	bf00      	nop

000816b8 <pwm_channel_update_period>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_period(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_period)
{
   816b8:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   816ba:	680c      	ldr	r4, [r1, #0]

	/** Check parameter */
	if (p_channel->ul_duty > ul_period) {
   816bc:	68cb      	ldr	r3, [r1, #12]
   816be:	4293      	cmp	r3, r2
   816c0:	d807      	bhi.n	816d2 <pwm_channel_update_period+0x1a>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new period value */
		p_channel->ul_period = ul_period;
   816c2:	610a      	str	r2, [r1, #16]
		/* Set CPD bit to change period value */
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= PWM_CMR_CPD;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_period;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CPRDUPD = ul_period;
   816c4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   816c8:	f8c0 2210 	str.w	r2, [r0, #528]	; 0x210
#endif
	}

	return 0;
   816cc:	f04f 0000 	mov.w	r0, #0
   816d0:	e001      	b.n	816d6 <pwm_channel_update_period+0x1e>
{
	uint32_t ch_num = p_channel->channel;

	/** Check parameter */
	if (p_channel->ul_duty > ul_period) {
		return PWM_INVALID_ARGUMENT;
   816d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CPRDUPD = ul_period;
#endif
	}

	return 0;
}
   816d6:	bc10      	pop	{r4}
   816d8:	4770      	bx	lr
   816da:	bf00      	nop

000816dc <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   816dc:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   816de:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   816e0:	690b      	ldr	r3, [r1, #16]
   816e2:	4293      	cmp	r3, r2
   816e4:	d307      	bcc.n	816f6 <pwm_channel_update_duty+0x1a>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   816e6:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   816e8:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   816ec:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   816f0:	f04f 0000 	mov.w	r0, #0
   816f4:	e001      	b.n	816fa <pwm_channel_update_duty+0x1e>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   816f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   816fa:	bc10      	pop	{r4}
   816fc:	4770      	bx	lr
   816fe:	bf00      	nop

00081700 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   81700:	f04f 0301 	mov.w	r3, #1
   81704:	fa03 f101 	lsl.w	r1, r3, r1
   81708:	6041      	str	r1, [r0, #4]
   8170a:	4770      	bx	lr

0008170c <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   8170c:	f04f 0301 	mov.w	r3, #1
   81710:	fa03 f101 	lsl.w	r1, r3, r1
   81714:	6081      	str	r1, [r0, #8]
   81716:	4770      	bx	lr

00081718 <pwm_channel_disable_interrupt>:
#if (SAM3N || SAM4N)
	p_pwm->PWM_IDR = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IDR1 = (1 << ul_event) | (1 << (ul_fault + 16));
   81718:	f102 0210 	add.w	r2, r2, #16
   8171c:	f04f 0301 	mov.w	r3, #1
   81720:	fa03 f202 	lsl.w	r2, r3, r2
   81724:	fa03 f101 	lsl.w	r1, r3, r1
   81728:	430a      	orrs	r2, r1
   8172a:	6142      	str	r2, [r0, #20]
   8172c:	4770      	bx	lr
   8172e:	bf00      	nop

00081730 <supc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void supc_switch_sclk_to_32kxtal(Supc *p_supc, uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   81730:	2901      	cmp	r1, #1
   81732:	d105      	bne.n	81740 <supc_switch_sclk_to_32kxtal+0x10>
		p_supc->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY) | SUPC_MR_OSCBYPASS;
   81734:	6883      	ldr	r3, [r0, #8]
   81736:	f043 4125 	orr.w	r1, r3, #2768240640	; 0xa5000000
   8173a:	f441 1280 	orr.w	r2, r1, #1048576	; 0x100000
   8173e:	6082      	str	r2, [r0, #8]
	}

	p_supc->SUPC_CR |= SUPC_CR_KEY(SUPC_KEY) | SUPC_CR_XTALSEL;
   81740:	6803      	ldr	r3, [r0, #0]
   81742:	f043 4125 	orr.w	r1, r3, #2768240640	; 0xa5000000
   81746:	f041 0208 	orr.w	r2, r1, #8
   8174a:	6002      	str	r2, [r0, #0]
   8174c:	4770      	bx	lr
   8174e:	bf00      	nop

00081750 <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   81750:	b410      	push	{r4}
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81752:	ea4f 1181 	mov.w	r1, r1, lsl #6
   81756:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   81758:	f04f 0402 	mov.w	r4, #2
   8175c:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   8175e:	f04f 30ff 	mov.w	r0, #4294967295
   81762:	6298      	str	r0, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   81764:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   81766:	605a      	str	r2, [r3, #4]
}
   81768:	bc10      	pop	{r4}
   8176a:	4770      	bx	lr

0008176c <tc_set_block_mode>:
 * \param ul_blockmode Block mode register value to set.
 *
 */
void tc_set_block_mode(Tc *p_tc, uint32_t ul_blockmode)
{
	p_tc->TC_BMR = ul_blockmode;
   8176c:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   81770:	4770      	bx	lr
   81772:	bf00      	nop

00081774 <tc_start>:
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   81774:	ea4f 1181 	mov.w	r1, r1, lsl #6
   81778:	f04f 0305 	mov.w	r3, #5
   8177c:	5043      	str	r3, [r0, r1]
   8177e:	4770      	bx	lr

00081780 <tc_stop>:
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   81780:	ea4f 1181 	mov.w	r1, r1, lsl #6
   81784:	f04f 0302 	mov.w	r3, #2
   81788:	5043      	str	r3, [r0, r1]
   8178a:	4770      	bx	lr

0008178c <tc_read_cv>:
uint32_t tc_read_cv(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   8178c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   81790:	6908      	ldr	r0, [r1, #16]
}
   81792:	4770      	bx	lr

00081794 <tc_write_rc>:
		uint32_t ul_value)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   81794:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   81798:	61ca      	str	r2, [r1, #28]
   8179a:	4770      	bx	lr

0008179c <tc_enable_interrupt>:
{
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8179c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   817a0:	624a      	str	r2, [r1, #36]	; 0x24
   817a2:	4770      	bx	lr

000817a4 <tc_get_status>:
{
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   817a4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   817a8:	6a08      	ldr	r0, [r1, #32]
}
   817aa:	4770      	bx	lr

000817ac <tc_find_mck_divisor>:
 *
 * \return 1 if a proper divisor has been found, otherwise 0.
 */
uint32_t tc_find_mck_divisor(uint32_t ul_freq, uint32_t ul_mck,
		uint32_t *p_uldiv, uint32_t *p_ultcclks, uint32_t ul_boardmck)
{
   817ac:	b470      	push	{r4, r5, r6}
   817ae:	b087      	sub	sp, #28
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   817b0:	f04f 0402 	mov.w	r4, #2
   817b4:	9401      	str	r4, [sp, #4]
   817b6:	f04f 0508 	mov.w	r5, #8
   817ba:	9502      	str	r5, [sp, #8]
   817bc:	f04f 0420 	mov.w	r4, #32
   817c0:	9403      	str	r4, [sp, #12]
   817c2:	f04f 0580 	mov.w	r5, #128	; 0x80
   817c6:	9504      	str	r5, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
   817c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   817ca:	ea4f 34d4 	mov.w	r4, r4, lsr #15
 * \return 1 if a proper divisor has been found, otherwise 0.
 */
uint32_t tc_find_mck_divisor(uint32_t ul_freq, uint32_t ul_mck,
		uint32_t *p_uldiv, uint32_t *p_ultcclks, uint32_t ul_boardmck)
{
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   817ce:	9405      	str	r4, [sp, #20]
	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
   817d0:	ea4f 4551 	mov.w	r5, r1, lsr #17
		if (ul_freq > ul_high) {
   817d4:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
   817d8:	d83e      	bhi.n	81858 <tc_find_mck_divisor+0xac>
			return 0;
		} else if (ul_freq >= ul_low) {
   817da:	42a8      	cmp	r0, r5
   817dc:	d251      	bcs.n	81882 <tc_find_mck_divisor+0xd6>

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
   817de:	f04f 0608 	mov.w	r6, #8
   817e2:	fbb1 f5f6 	udiv	r5, r1, r6
		ul_low  = ul_high / TC_DIV_FACTOR;
   817e6:	ea4f 4615 	mov.w	r6, r5, lsr #16
		if (ul_freq > ul_high) {
   817ea:	42a8      	cmp	r0, r5
   817ec:	d837      	bhi.n	8185e <tc_find_mck_divisor+0xb2>
			return 0;
		} else if (ul_freq >= ul_low) {
   817ee:	42b0      	cmp	r0, r6
   817f0:	d21e      	bcs.n	81830 <tc_find_mck_divisor+0x84>

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
   817f2:	f04f 0520 	mov.w	r5, #32
   817f6:	fbb1 f5f5 	udiv	r5, r1, r5
		ul_low  = ul_high / TC_DIV_FACTOR;
   817fa:	ea4f 4615 	mov.w	r6, r5, lsr #16
		if (ul_freq > ul_high) {
   817fe:	42a8      	cmp	r0, r5
   81800:	d830      	bhi.n	81864 <tc_find_mck_divisor+0xb8>
			return 0;
		} else if (ul_freq >= ul_low) {
   81802:	42b0      	cmp	r0, r6
   81804:	d217      	bcs.n	81836 <tc_find_mck_divisor+0x8a>

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
   81806:	f04f 0680 	mov.w	r6, #128	; 0x80
   8180a:	fbb1 f5f6 	udiv	r5, r1, r6
		ul_low  = ul_high / TC_DIV_FACTOR;
   8180e:	ea4f 4615 	mov.w	r6, r5, lsr #16
		if (ul_freq > ul_high) {
   81812:	42a8      	cmp	r0, r5
   81814:	d829      	bhi.n	8186a <tc_find_mck_divisor+0xbe>
			return 0;
		} else if (ul_freq >= ul_low) {
   81816:	42b0      	cmp	r0, r6
   81818:	d210      	bcs.n	8183c <tc_find_mck_divisor+0x90>

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
   8181a:	fbb1 f1f4 	udiv	r1, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
   8181e:	ea4f 4411 	mov.w	r4, r1, lsr #16
		if (ul_freq > ul_high) {
   81822:	4281      	cmp	r1, r0
   81824:	d324      	bcc.n	81870 <tc_find_mck_divisor+0xc4>
			return 0;
		} else if (ul_freq >= ul_low) {
   81826:	4284      	cmp	r4, r0
   81828:	bf98      	it	ls
   8182a:	2104      	movls	r1, #4
   8182c:	d92b      	bls.n	81886 <tc_find_mck_divisor+0xda>
   8182e:	e022      	b.n	81876 <tc_find_mck_divisor+0xca>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
   81830:	f04f 0101 	mov.w	r1, #1
   81834:	e027      	b.n	81886 <tc_find_mck_divisor+0xda>
   81836:	f04f 0102 	mov.w	r1, #2
   8183a:	e024      	b.n	81886 <tc_find_mck_divisor+0xda>
   8183c:	f04f 0103 	mov.w	r1, #3
   81840:	e021      	b.n	81886 <tc_find_mck_divisor+0xda>
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
		*p_uldiv = divisors[ul_index];
   81842:	ac06      	add	r4, sp, #24
   81844:	eb04 0081 	add.w	r0, r4, r1, lsl #2
   81848:	f850 0c14 	ldr.w	r0, [r0, #-20]
   8184c:	6010      	str	r0, [r2, #0]
	}

	if (p_ultcclks) {
   8184e:	b1ab      	cbz	r3, 8187c <tc_find_mck_divisor+0xd0>
		*p_ultcclks = ul_index;
   81850:	6019      	str	r1, [r3, #0]
	}

	return 1;
   81852:	f04f 0001 	mov.w	r0, #1
   81856:	e019      	b.n	8188c <tc_find_mck_divisor+0xe0>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
   81858:	f04f 0000 	mov.w	r0, #0
   8185c:	e016      	b.n	8188c <tc_find_mck_divisor+0xe0>
   8185e:	f04f 0000 	mov.w	r0, #0
   81862:	e013      	b.n	8188c <tc_find_mck_divisor+0xe0>
   81864:	f04f 0000 	mov.w	r0, #0
   81868:	e010      	b.n	8188c <tc_find_mck_divisor+0xe0>
   8186a:	f04f 0000 	mov.w	r0, #0
   8186e:	e00d      	b.n	8188c <tc_find_mck_divisor+0xe0>
   81870:	f04f 0000 	mov.w	r0, #0
   81874:	e00a      	b.n	8188c <tc_find_mck_divisor+0xe0>
		} else if (ul_freq >= ul_low) {
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
   81876:	f04f 0000 	mov.w	r0, #0
   8187a:	e007      	b.n	8188c <tc_find_mck_divisor+0xe0>

	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
   8187c:	f04f 0001 	mov.w	r0, #1
   81880:	e004      	b.n	8188c <tc_find_mck_divisor+0xe0>
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
   81882:	f04f 0100 	mov.w	r1, #0
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
   81886:	2a00      	cmp	r2, #0
   81888:	d1db      	bne.n	81842 <tc_find_mck_divisor+0x96>
   8188a:	e7e0      	b.n	8184e <tc_find_mck_divisor+0xa2>
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
   8188c:	b007      	add	sp, #28
   8188e:	bc70      	pop	{r4, r5, r6}
   81890:	4770      	bx	lr
   81892:	bf00      	nop

00081894 <twi_enable_master_mode>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   81894:	f04f 0308 	mov.w	r3, #8
   81898:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   8189a:	f04f 0120 	mov.w	r1, #32
   8189e:	6001      	str	r1, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   818a0:	f04f 0204 	mov.w	r2, #4
   818a4:	6002      	str	r2, [r0, #0]
   818a6:	4770      	bx	lr

000818a8 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   818a8:	f44f 53d4 	mov.w	r3, #6784	; 0x1a80
   818ac:	f2c0 0306 	movt	r3, #6
   818b0:	4299      	cmp	r1, r3
   818b2:	d845      	bhi.n	81940 <twi_set_speed+0x98>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   818b4:	ea4f 0141 	mov.w	r1, r1, lsl #1
   818b8:	fbb2 f2f1 	udiv	r2, r2, r1
   818bc:	f1a2 0204 	sub.w	r2, r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   818c0:	2aff      	cmp	r2, #255	; 0xff
   818c2:	d92e      	bls.n	81922 <twi_set_speed+0x7a>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   818c4:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   818c8:	2aff      	cmp	r2, #255	; 0xff
   818ca:	d918      	bls.n	818fe <twi_set_speed+0x56>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   818cc:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   818d0:	2aff      	cmp	r2, #255	; 0xff
   818d2:	d917      	bls.n	81904 <twi_set_speed+0x5c>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   818d4:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   818d8:	2aff      	cmp	r2, #255	; 0xff
   818da:	d916      	bls.n	8190a <twi_set_speed+0x62>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   818dc:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   818e0:	2aff      	cmp	r2, #255	; 0xff
   818e2:	d915      	bls.n	81910 <twi_set_speed+0x68>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   818e4:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   818e8:	2aff      	cmp	r2, #255	; 0xff
   818ea:	d914      	bls.n	81916 <twi_set_speed+0x6e>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   818ec:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   818f0:	2aff      	cmp	r2, #255	; 0xff
   818f2:	d913      	bls.n	8191c <twi_set_speed+0x74>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   818f4:	ea4f 0252 	mov.w	r2, r2, lsr #1
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
   818f8:	f04f 0307 	mov.w	r3, #7
   818fc:	e013      	b.n	81926 <twi_set_speed+0x7e>
   818fe:	f04f 0301 	mov.w	r3, #1
   81902:	e010      	b.n	81926 <twi_set_speed+0x7e>
   81904:	f04f 0302 	mov.w	r3, #2
   81908:	e00d      	b.n	81926 <twi_set_speed+0x7e>
   8190a:	f04f 0303 	mov.w	r3, #3
   8190e:	e00a      	b.n	81926 <twi_set_speed+0x7e>
   81910:	f04f 0304 	mov.w	r3, #4
   81914:	e007      	b.n	81926 <twi_set_speed+0x7e>
   81916:	f04f 0305 	mov.w	r3, #5
   8191a:	e004      	b.n	81926 <twi_set_speed+0x7e>
   8191c:	f04f 0306 	mov.w	r3, #6
   81920:	e001      	b.n	81926 <twi_set_speed+0x7e>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   81922:	f04f 0300 	mov.w	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   81926:	ea4f 6102 	mov.w	r1, r2, lsl #24
			TWI_CWGR_CKDIV(ckdiv);
   8192a:	ea4f 4303 	mov.w	r3, r3, lsl #16
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   8192e:	ea43 4111 	orr.w	r1, r3, r1, lsr #16
   81932:	b2d2      	uxtb	r2, r2
   81934:	ea41 0302 	orr.w	r3, r1, r2
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   81938:	6103      	str	r3, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   8193a:	f04f 0000 	mov.w	r0, #0
   8193e:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   81940:	f04f 0001 	mov.w	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   81944:	4770      	bx	lr
   81946:	bf00      	nop

00081948 <twi_reset>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   81948:	f04f 0380 	mov.w	r3, #128	; 0x80
   8194c:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   8194e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81950:	4770      	bx	lr
   81952:	bf00      	nop

00081954 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   81954:	b538      	push	{r3, r4, r5, lr}
   81956:	4604      	mov	r4, r0
   81958:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   8195a:	f04f 33ff 	mov.w	r3, #4294967295
   8195e:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   81960:	6a03      	ldr	r3, [r0, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   81962:	f641 1149 	movw	r1, #6473	; 0x1949
   81966:	f2c0 0108 	movt	r1, #8
   8196a:	4788      	blx	r1

	twi_enable_master_mode(p_twi);
   8196c:	4620      	mov	r0, r4
   8196e:	f641 0295 	movw	r2, #6293	; 0x1895
   81972:	f2c0 0208 	movt	r2, #8
   81976:	4790      	blx	r2

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   81978:	4620      	mov	r0, r4
   8197a:	6869      	ldr	r1, [r5, #4]
   8197c:	682a      	ldr	r2, [r5, #0]
   8197e:	f641 03a9 	movw	r3, #6313	; 0x18a9
   81982:	f2c0 0308 	movt	r3, #8
   81986:	4798      	blx	r3
   81988:	2801      	cmp	r0, #1
   8198a:	bf14      	ite	ne
   8198c:	2000      	movne	r0, #0
   8198e:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   81990:	7a69      	ldrb	r1, [r5, #9]
   81992:	2901      	cmp	r1, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   81994:	bf04      	itt	eq
   81996:	2140      	moveq	r1, #64	; 0x40
   81998:	6021      	streq	r1, [r4, #0]
	}

	return status;
}
   8199a:	bd38      	pop	{r3, r4, r5, pc}

0008199c <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
   8199c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   819a0:	6043      	str	r3, [r0, #4]
   819a2:	4770      	bx	lr

000819a4 <init_board>:
 #include <asf.h>
 #include "init.h"
 
 
 void init_board(void)
 {
   819a4:	b570      	push	{r4, r5, r6, lr}
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   819a6:	f04f 002b 	mov.w	r0, #43	; 0x2b
   819aa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   819ae:	f247 54f1 	movw	r4, #30193	; 0x75f1
   819b2:	f2c0 0408 	movt	r4, #8
   819b6:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   819b8:	f04f 002a 	mov.w	r0, #42	; 0x2a
   819bc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   819c0:	47a0      	blx	r4
	 
	/* Configure HSMCI pins */
	gpio_configure_pin(PIN_HSMCI_MCCDA_GPIO, PIN_HSMCI_MCCDA_FLAGS);
   819c2:	f04f 0014 	mov.w	r0, #20
   819c6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   819ca:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCCK_GPIO, PIN_HSMCI_MCCK_FLAGS);
   819cc:	f04f 0013 	mov.w	r0, #19
   819d0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   819d4:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA0_GPIO, PIN_HSMCI_MCDA0_FLAGS);
   819d6:	f04f 0015 	mov.w	r0, #21
   819da:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   819de:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA1_GPIO, PIN_HSMCI_MCDA1_FLAGS);
   819e0:	f04f 0016 	mov.w	r0, #22
   819e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   819e8:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA2_GPIO, PIN_HSMCI_MCDA2_FLAGS);
   819ea:	f04f 0017 	mov.w	r0, #23
   819ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   819f2:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA3_GPIO, PIN_HSMCI_MCDA3_FLAGS);
   819f4:	f04f 0018 	mov.w	r0, #24
   819f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   819fc:	47a0      	blx	r4
	/* Configure SD/MMC card detect pin */
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
   819fe:	f04f 0067 	mov.w	r0, #103	; 0x67
   81a02:	f04f 0108 	mov.w	r1, #8
   81a06:	47a0      	blx	r4
	
	/* Configure EEPROM pins **/	
	pmc_enable_periph_clk(ID_TWI0);
   81a08:	f04f 0016 	mov.w	r0, #22
   81a0c:	f647 1615 	movw	r6, #30997	; 0x7915
   81a10:	f2c0 0608 	movt	r6, #8
   81a14:	47b0      	blx	r6
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   81a16:	f04f 0011 	mov.w	r0, #17
   81a1a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a1e:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   81a20:	f04f 0012 	mov.w	r0, #18
   81a24:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a28:	47a0      	blx	r4
	 
	/* Enable power to the SD card slot */
	pmc_enable_periph_clk(VDD_MCI_PIO_ID);
   81a2a:	f04f 000c 	mov.w	r0, #12
   81a2e:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81a30:	f44f 5580 	mov.w	r5, #4096	; 0x1000
   81a34:	f2c4 050e 	movt	r5, #16398	; 0x400e
   81a38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   81a3c:	612b      	str	r3, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81a3e:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81a42:	636b      	str	r3, [r5, #52]	; 0x34
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81a44:	f44f 6460 	mov.w	r4, #3584	; 0xe00
   81a48:	f2c4 040e 	movt	r4, #16398	; 0x400e
   81a4c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   81a50:	6620      	str	r0, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81a52:	6560      	str	r0, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   81a54:	6260      	str	r0, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   81a56:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   81a5a:	6f22      	ldr	r2, [r4, #112]	; 0x70
   81a5c:	4302      	orrs	r2, r0
   81a5e:	6722      	str	r2, [r4, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   81a60:	6060      	str	r0, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81a62:	f04f 0101 	mov.w	r1, #1
   81a66:	6621      	str	r1, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81a68:	6561      	str	r1, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   81a6a:	6261      	str	r1, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   81a6c:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   81a70:	6f23      	ldr	r3, [r4, #112]	; 0x70
   81a72:	430b      	orrs	r3, r1
   81a74:	6723      	str	r3, [r4, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   81a76:	6061      	str	r1, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81a78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   81a7c:	6620      	str	r0, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81a7e:	6560      	str	r0, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   81a80:	6260      	str	r0, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   81a82:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   81a86:	6f22      	ldr	r2, [r4, #112]	; 0x70
   81a88:	4302      	orrs	r2, r0
   81a8a:	6722      	str	r2, [r4, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   81a8c:	6060      	str	r0, [r4, #4]
	ioport_disable_pin(PIN_LED2_GPIO);
	ioport_set_pin_mode(PIN_LED3_GPIO, PIN_LED3_FLAGS);
	ioport_disable_pin(PIN_LED3_GPIO);
	 	 
	/* User button */
	pmc_enable_periph_clk(USR_BUTTON_PIO_ID);
   81a8e:	f04f 000c 	mov.w	r0, #12
   81a92:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   81a94:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   81a98:	6169      	str	r1, [r5, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81a9a:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   81a9e:	6669      	str	r1, [r5, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81aa0:	6569      	str	r1, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   81aa2:	6229      	str	r1, [r5, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   81aa4:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81aa8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   81aaa:	f423 0000 	bic.w	r0, r3, #8388608	; 0x800000
   81aae:	6728      	str	r0, [r5, #112]	; 0x70
	ioport_set_pin_dir(GPIO_USR_BUTTON, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_USR_BUTTON, GPIO_USR_BUTTON_FLAGS);
	 
	/* Sync signals */
	pmc_enable_periph_clk(SYNC_PIO_ID);
   81ab0:	f04f 000e 	mov.w	r0, #14
   81ab4:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   81ab6:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
   81aba:	f2c4 050e 	movt	r5, #16398	; 0x400e
   81abe:	f44f 6280 	mov.w	r2, #1024	; 0x400
   81ac2:	616a      	str	r2, [r5, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81ac4:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   81ac8:	666a      	str	r2, [r5, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81aca:	656a      	str	r2, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   81acc:	622a      	str	r2, [r5, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   81ace:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81ad2:	6f29      	ldr	r1, [r5, #112]	; 0x70
   81ad4:	f421 6380 	bic.w	r3, r1, #1024	; 0x400
   81ad8:	672b      	str	r3, [r5, #112]	; 0x70
	ioport_set_pin_dir(GPIO_SYNC, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_SYNC, GPIO_SYNC_FLAGS);
	pmc_enable_periph_clk(SYNC_READ_PIO_ID);
   81ada:	f04f 000b 	mov.w	r0, #11
   81ade:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81ae0:	f04f 0020 	mov.w	r0, #32
   81ae4:	6120      	str	r0, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81ae6:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81aea:	6360      	str	r0, [r4, #52]	; 0x34
	ioport_set_pin_dir(SYNC_READ_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(SYNC_READ_GPIO, SYNC_READ_ACTIVE_LEVEL);
	pmc_enable_periph_clk(SYNC_WRITE_PIO_ID);
   81aec:	f04f 000b 	mov.w	r0, #11
   81af0:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81af2:	f04f 0280 	mov.w	r2, #128	; 0x80
   81af6:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81af8:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81afc:	6322      	str	r2, [r4, #48]	; 0x30
	ioport_set_pin_dir(SYNC_WRITE_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(SYNC_WRITE_GPIO, SYNC_WRITE_INACTIVE_LEVEL);
	
	/* 12v detect */
	pmc_enable_periph_clk(DET_12V_PIO_ID);
   81afe:	f04f 000b 	mov.w	r0, #11
   81b02:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   81b04:	f04f 0102 	mov.w	r1, #2
   81b08:	6161      	str	r1, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81b0a:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81b0e:	6621      	str	r1, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81b10:	6561      	str	r1, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   81b12:	6221      	str	r1, [r4, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   81b14:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81b18:	6f23      	ldr	r3, [r4, #112]	; 0x70
   81b1a:	f023 0002 	bic.w	r0, r3, #2
   81b1e:	6720      	str	r0, [r4, #112]	; 0x70
	ioport_set_pin_dir(GPIO_DET_12V, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_DET_12V, GPIO_DET_12V_FLAGS);
	
	/* 12v power ok */
	pmc_enable_periph_clk(OK_12V_PIO_ID);
   81b20:	f04f 000e 	mov.w	r0, #14
   81b24:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   81b26:	f44f 7280 	mov.w	r2, #256	; 0x100
   81b2a:	616a      	str	r2, [r5, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81b2c:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81b30:	662a      	str	r2, [r5, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81b32:	656a      	str	r2, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   81b34:	622a      	str	r2, [r5, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   81b36:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81b3a:	6f29      	ldr	r1, [r5, #112]	; 0x70
   81b3c:	f421 7380 	bic.w	r3, r1, #256	; 0x100
   81b40:	672b      	str	r3, [r5, #112]	; 0x70
	ioport_set_pin_dir(GPIO_OK_12V, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_OK_12V, GPIO_OK_12V_FLAGS);
	
	/* 12v enable */	
	pmc_enable_periph_clk(ENABLE_12V_PIO_ID);
   81b42:	f04f 000e 	mov.w	r0, #14
   81b46:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81b48:	f44f 7000 	mov.w	r0, #512	; 0x200
   81b4c:	6128      	str	r0, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81b4e:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81b52:	6368      	str	r0, [r5, #52]	; 0x34
   81b54:	bd70      	pop	{r4, r5, r6, pc}
   81b56:	bf00      	nop

00081b58 <led_activity_routine>:
uint32_t led_last_counter1_val = 0;


/* Routine for LED blinking */
void led_activity_routine(void)
{
   81b58:	b508      	push	{r3, lr}
	if(led_last_counter0_val != tc_read_cv(TC1, 2))
   81b5a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   81b5e:	f2c4 0008 	movt	r0, #16392	; 0x4008
   81b62:	f04f 0102 	mov.w	r1, #2
   81b66:	f241 738d 	movw	r3, #6029	; 0x178d
   81b6a:	f2c0 0308 	movt	r3, #8
   81b6e:	4798      	blx	r3
   81b70:	f640 311c 	movw	r1, #2844	; 0xb1c
   81b74:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81b78:	680a      	ldr	r2, [r1, #0]
   81b7a:	4290      	cmp	r0, r2
   81b7c:	d03a      	beq.n	81bf4 <led_activity_routine+0x9c>
	{		
		if(ch1_in_out_color == GREEN)
   81b7e:	f240 0032 	movw	r0, #50	; 0x32
   81b82:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81b86:	8803      	ldrh	r3, [r0, #0]
   81b88:	2b03      	cmp	r3, #3
   81b8a:	d110      	bne.n	81bae <led_activity_routine+0x56>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81b8c:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   81b90:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81b94:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   81b96:	f012 0f80 	tst.w	r2, #128	; 0x80
		port->PIO_CODR = mask;
   81b9a:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81b9e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81ba2:	f04f 0380 	mov.w	r3, #128	; 0x80
   81ba6:	bf14      	ite	ne
   81ba8:	6343      	strne	r3, [r0, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81baa:	6303      	streq	r3, [r0, #48]	; 0x30
   81bac:	e011      	b.n	81bd2 <led_activity_routine+0x7a>
		{
			ioport_toggle_pin_level(IN_CH1_LED2_GPIO);
		}
		else if(ch1_in_out_color == BLUE)
   81bae:	2b02      	cmp	r3, #2
   81bb0:	d10f      	bne.n	81bd2 <led_activity_routine+0x7a>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81bb2:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   81bb6:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81bba:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   81bbc:	f412 7f00 	tst.w	r2, #512	; 0x200
		port->PIO_CODR = mask;
   81bc0:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81bc4:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
   81bcc:	bf14      	ite	ne
   81bce:	6343      	strne	r3, [r0, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81bd0:	6303      	streq	r3, [r0, #48]	; 0x30
		{
			ioport_toggle_pin_level(IN_CH1_LED3_GPIO);
		}
		led_last_counter0_val = tc_read_cv(TC1, 2);
   81bd2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   81bd6:	f2c4 0008 	movt	r0, #16392	; 0x4008
   81bda:	f04f 0102 	mov.w	r1, #2
   81bde:	f241 728d 	movw	r2, #6029	; 0x178d
   81be2:	f2c0 0208 	movt	r2, #8
   81be6:	4790      	blx	r2
   81be8:	f640 311c 	movw	r1, #2844	; 0xb1c
   81bec:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81bf0:	6008      	str	r0, [r1, #0]
   81bf2:	e00c      	b.n	81c0e <led_activity_routine+0xb6>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81bf4:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81bf8:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81bfc:	f04f 0320 	mov.w	r3, #32
   81c00:	6303      	str	r3, [r0, #48]	; 0x30
   81c02:	f04f 0180 	mov.w	r1, #128	; 0x80
   81c06:	6301      	str	r1, [r0, #48]	; 0x30
   81c08:	f44f 7200 	mov.w	r2, #512	; 0x200
   81c0c:	6302      	str	r2, [r0, #48]	; 0x30
	{
		ioport_set_pin_level(IN_CH1_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
		ioport_set_pin_level(IN_CH1_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
		ioport_set_pin_level(IN_CH1_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);
	}	
	if(led_last_counter1_val != tc_read_cv(TC0, 1))
   81c0e:	f04f 0000 	mov.w	r0, #0
   81c12:	f2c4 0008 	movt	r0, #16392	; 0x4008
   81c16:	f04f 0101 	mov.w	r1, #1
   81c1a:	f241 738d 	movw	r3, #6029	; 0x178d
   81c1e:	f2c0 0308 	movt	r3, #8
   81c22:	4798      	blx	r3
   81c24:	f640 3220 	movw	r2, #2848	; 0xb20
   81c28:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81c2c:	6811      	ldr	r1, [r2, #0]
   81c2e:	4288      	cmp	r0, r1
   81c30:	d03a      	beq.n	81ca8 <led_activity_routine+0x150>
	{
		if(ch2_in_out_color == GREEN)
   81c32:	f240 0034 	movw	r0, #52	; 0x34
   81c36:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81c3a:	8803      	ldrh	r3, [r0, #0]
   81c3c:	2b03      	cmp	r3, #3
   81c3e:	d110      	bne.n	81c62 <led_activity_routine+0x10a>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81c40:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   81c44:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81c48:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
   81c4a:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
		port->PIO_CODR = mask;
   81c4e:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81c52:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81c56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   81c5a:	bf14      	ite	ne
   81c5c:	6343      	strne	r3, [r0, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81c5e:	6303      	streq	r3, [r0, #48]	; 0x30
   81c60:	e011      	b.n	81c86 <led_activity_routine+0x12e>
		{
			ioport_toggle_pin_level(IN_CH2_LED2_GPIO);
		}
		else if(ch2_in_out_color == BLUE)
   81c62:	2b02      	cmp	r3, #2
   81c64:	d10f      	bne.n	81c86 <led_activity_routine+0x12e>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81c66:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   81c6a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   81c6e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
   81c70:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
		port->PIO_CODR = mask;
   81c74:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81c78:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81c7c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   81c80:	bf14      	ite	ne
   81c82:	6343      	strne	r3, [r0, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81c84:	6303      	streq	r3, [r0, #48]	; 0x30
		{
			ioport_toggle_pin_level(IN_CH2_LED3_GPIO);
		}
		led_last_counter1_val = tc_read_cv(TC0, 1);
   81c86:	f04f 0000 	mov.w	r0, #0
   81c8a:	f2c4 0008 	movt	r0, #16392	; 0x4008
   81c8e:	f04f 0101 	mov.w	r1, #1
   81c92:	f241 728d 	movw	r2, #6029	; 0x178d
   81c96:	f2c0 0208 	movt	r2, #8
   81c9a:	4790      	blx	r2
   81c9c:	f640 3120 	movw	r1, #2848	; 0xb20
   81ca0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81ca4:	6008      	str	r0, [r1, #0]
   81ca6:	e00c      	b.n	81cc2 <led_activity_routine+0x16a>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81ca8:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81cac:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81cb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   81cb4:	6303      	str	r3, [r0, #48]	; 0x30
   81cb6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   81cba:	6302      	str	r2, [r0, #48]	; 0x30
   81cbc:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   81cc0:	6301      	str	r1, [r0, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81cc2:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81cc6:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81cca:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	{
		ioport_set_pin_level(IN_CH2_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
		ioport_set_pin_level(IN_CH2_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
		ioport_set_pin_level(IN_CH2_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);
	}
	if(ioport_get_pin_level(TTL_IN_GPIO))
   81ccc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
   81cd0:	d066      	beq.n	81da0 <led_activity_routine+0x248>
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81cd2:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81cd6:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81cda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81cde:	6343      	str	r3, [r0, #52]	; 0x34
	{
		ioport_set_pin_level(TTL_D_NRESET_GPIO, IOPORT_PIN_LEVEL_LOW);
		asm("NOP");asm("NOP");asm("NOP");
   81ce0:	bf00      	nop
   81ce2:	bf00      	nop
   81ce4:	bf00      	nop
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81ce6:	6303      	str	r3, [r0, #48]	; 0x30
		ioport_set_pin_level(TTL_D_NRESET_GPIO, IOPORT_PIN_LEVEL_HIGH);
		
		if(ch3_in_color == GREEN)
   81ce8:	f240 0138 	movw	r1, #56	; 0x38
   81cec:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81cf0:	880a      	ldrh	r2, [r1, #0]
   81cf2:	2a03      	cmp	r2, #3
   81cf4:	d110      	bne.n	81d18 <led_activity_routine+0x1c0>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81cf6:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81cfa:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81cfe:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   81d00:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
		port->PIO_CODR = mask;
   81d04:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   81d08:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81d0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   81d10:	bf14      	ite	ne
   81d12:	634a      	strne	r2, [r1, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81d14:	630a      	streq	r2, [r1, #48]	; 0x30
   81d16:	e011      	b.n	81d3c <led_activity_routine+0x1e4>
		{
			ioport_toggle_pin_level(IN_CH3_LED2_GPIO);
		}
		else if(ch3_in_color == BLUE)
   81d18:	2a02      	cmp	r2, #2
   81d1a:	d10f      	bne.n	81d3c <led_activity_routine+0x1e4>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81d1c:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81d20:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81d24:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   81d26:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
		port->PIO_CODR = mask;
   81d2a:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   81d2e:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81d32:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   81d36:	bf14      	ite	ne
   81d38:	634a      	strne	r2, [r1, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81d3a:	630a      	streq	r2, [r1, #48]	; 0x30
		{
			ioport_toggle_pin_level(IN_CH3_LED3_GPIO);
		}
		if(is_qma_set_to_ttlin == TRUE)
   81d3c:	f240 003a 	movw	r0, #58	; 0x3a
   81d40:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81d44:	8803      	ldrh	r3, [r0, #0]
   81d46:	2b01      	cmp	r3, #1
   81d48:	d14b      	bne.n	81de2 <led_activity_routine+0x28a>
		{
			if(ch3_out_color == GREEN)
   81d4a:	f240 0130 	movw	r1, #48	; 0x30
   81d4e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81d52:	880a      	ldrh	r2, [r1, #0]
   81d54:	2a03      	cmp	r2, #3
   81d56:	d110      	bne.n	81d7a <led_activity_routine+0x222>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81d58:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   81d5c:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81d60:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   81d62:	f013 0f40 	tst.w	r3, #64	; 0x40
		port->PIO_CODR = mask;
   81d66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81d6a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81d6e:	f04f 0240 	mov.w	r2, #64	; 0x40
   81d72:	bf14      	ite	ne
   81d74:	634a      	strne	r2, [r1, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81d76:	630a      	streq	r2, [r1, #48]	; 0x30
   81d78:	e033      	b.n	81de2 <led_activity_routine+0x28a>
			{
				ioport_toggle_pin_level(OUT_CH3_LED2_GPIO);
			}
			else if(ch3_out_color == BLUE)
   81d7a:	2a02      	cmp	r2, #2
   81d7c:	d177      	bne.n	81e6e <led_activity_routine+0x316>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81d7e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   81d82:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81d86:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   81d88:	f413 7f80 	tst.w	r3, #256	; 0x100
		port->PIO_CODR = mask;
   81d8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81d90:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81d94:	f44f 7280 	mov.w	r2, #256	; 0x100
   81d98:	bf14      	ite	ne
   81d9a:	634a      	strne	r2, [r1, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81d9c:	630a      	streq	r2, [r1, #48]	; 0x30
   81d9e:	e020      	b.n	81de2 <led_activity_routine+0x28a>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81da0:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   81da4:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81da8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   81dac:	630a      	str	r2, [r1, #48]	; 0x30
   81dae:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   81db2:	6308      	str	r0, [r1, #48]	; 0x30
   81db4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   81db8:	630b      	str	r3, [r1, #48]	; 0x30
	else
	{
		ioport_set_pin_level(IN_CH3_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
		ioport_set_pin_level(IN_CH3_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
		ioport_set_pin_level(IN_CH3_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);
		if(is_qma_set_to_ttlin == TRUE)
   81dba:	f240 013a 	movw	r1, #58	; 0x3a
   81dbe:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81dc2:	880a      	ldrh	r2, [r1, #0]
   81dc4:	2a01      	cmp	r2, #1
   81dc6:	d10c      	bne.n	81de2 <led_activity_routine+0x28a>
   81dc8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   81dcc:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81dd0:	f04f 0380 	mov.w	r3, #128	; 0x80
   81dd4:	6303      	str	r3, [r0, #48]	; 0x30
   81dd6:	f04f 0140 	mov.w	r1, #64	; 0x40
   81dda:	6301      	str	r1, [r0, #48]	; 0x30
   81ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
   81de0:	6302      	str	r2, [r0, #48]	; 0x30
			ioport_set_pin_level(OUT_CH3_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
			ioport_set_pin_level(OUT_CH3_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
			ioport_set_pin_level(OUT_CH3_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);
		}
	}
	if(is_qma_set_to_ttlin == FALSE)
   81de2:	f240 003a 	movw	r0, #58	; 0x3a
   81de6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81dea:	8803      	ldrh	r3, [r0, #0]
   81dec:	2b00      	cmp	r3, #0
   81dee:	d13e      	bne.n	81e6e <led_activity_routine+0x316>
	{
		if(is_freq_gen_enabled == TRUE)
   81df0:	f240 0136 	movw	r1, #54	; 0x36
   81df4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81df8:	880a      	ldrh	r2, [r1, #0]
   81dfa:	2a01      	cmp	r2, #1
   81dfc:	d12a      	bne.n	81e54 <led_activity_routine+0x2fc>
		{
			if(ch3_out_color == GREEN)
   81dfe:	f240 0030 	movw	r0, #48	; 0x30
   81e02:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81e06:	8803      	ldrh	r3, [r0, #0]
   81e08:	2b03      	cmp	r3, #3
   81e0a:	d110      	bne.n	81e2e <led_activity_routine+0x2d6>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81e0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81e10:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81e14:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   81e16:	f012 0f40 	tst.w	r2, #64	; 0x40
		port->PIO_CODR = mask;
   81e1a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   81e1e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81e22:	f04f 0340 	mov.w	r3, #64	; 0x40
   81e26:	bf14      	ite	ne
   81e28:	6343      	strne	r3, [r0, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81e2a:	6303      	streq	r3, [r0, #48]	; 0x30
   81e2c:	bd08      	pop	{r3, pc}
			{
				ioport_toggle_pin_level(OUT_CH3_LED2_GPIO);
			}
			else if(ch3_out_color == BLUE)
   81e2e:	2b02      	cmp	r3, #2
   81e30:	d11d      	bne.n	81e6e <led_activity_routine+0x316>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81e32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81e36:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81e3a:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   81e3c:	f412 7f80 	tst.w	r2, #256	; 0x100
		port->PIO_CODR = mask;
   81e40:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   81e44:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81e48:	f44f 7380 	mov.w	r3, #256	; 0x100
   81e4c:	bf14      	ite	ne
   81e4e:	6343      	strne	r3, [r0, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81e50:	6303      	streq	r3, [r0, #48]	; 0x30
   81e52:	bd08      	pop	{r3, pc}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81e54:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   81e58:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81e5c:	f04f 0380 	mov.w	r3, #128	; 0x80
   81e60:	6303      	str	r3, [r0, #48]	; 0x30
   81e62:	f04f 0140 	mov.w	r1, #64	; 0x40
   81e66:	6301      	str	r1, [r0, #48]	; 0x30
   81e68:	f44f 7280 	mov.w	r2, #256	; 0x100
   81e6c:	6302      	str	r2, [r0, #48]	; 0x30
   81e6e:	bd08      	pop	{r3, pc}

00081e70 <set_out_to_ttl_in>:
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81e74:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81e78:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   81e7c:	635a      	str	r2, [r3, #52]	; 0x34

// Set QMA out to the TTL IN
void set_out_to_ttl_in(void)
{
	ioport_set_pin_level(MUX_SEL_GPIO, IOPORT_PIN_LEVEL_LOW);
	is_qma_set_to_ttlin = TRUE;
   81e7e:	f240 003a 	movw	r0, #58	; 0x3a
   81e82:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81e86:	f04f 0101 	mov.w	r1, #1
   81e8a:	8001      	strh	r1, [r0, #0]
   81e8c:	4770      	bx	lr
   81e8e:	bf00      	nop

00081e90 <set_out_to_uc>:
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81e94:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81e98:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   81e9c:	631a      	str	r2, [r3, #48]	; 0x30

// Set QMA out to the microcontroller
void set_out_to_uc(void)
{
	ioport_set_pin_level(MUX_SEL_GPIO, IOPORT_PIN_LEVEL_HIGH);
	is_qma_set_to_ttlin = FALSE;
   81e9e:	f240 003a 	movw	r0, #58	; 0x3a
   81ea2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81ea6:	f04f 0100 	mov.w	r1, #0
   81eaa:	8001      	strh	r1, [r0, #0]
   81eac:	4770      	bx	lr
   81eae:	bf00      	nop

00081eb0 <is_qma_out_set_to_ttl>:

// Is QMA out set to ttlin?
uint16_t is_qma_out_set_to_ttl(void)
{
	return is_qma_set_to_ttlin;
}
   81eb0:	f240 033a 	movw	r3, #58	; 0x3a
   81eb4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81eb8:	8818      	ldrh	r0, [r3, #0]
   81eba:	4770      	bx	lr

00081ebc <RTC_Handler>:

/**
 * \brief Interrupt handler for the RTC, for second interrupt. Here we get the counters values
 */
void RTC_Handler(void)
{
   81ebc:	b510      	push	{r4, lr}
	uint32_t ul_status = rtc_get_status(RTC);
   81ebe:	f44f 50d3 	mov.w	r0, #6752	; 0x1a60
   81ec2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81ec6:	f245 2319 	movw	r3, #21017	; 0x5219
   81eca:	f2c0 0308 	movt	r3, #8
   81ece:	4798      	blx	r3

	/* Second increment interrupt */
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) 
   81ed0:	f010 0f04 	tst.w	r0, #4
   81ed4:	d020      	beq.n	81f18 <RTC_Handler+0x5c>
	{
		/* Disable RTC interrupt */
		rtc_disable_interrupt(RTC, RTC_IDR_SECDIS);
   81ed6:	f44f 54d3 	mov.w	r4, #6752	; 0x1a60
   81eda:	f2c4 040e 	movt	r4, #16398	; 0x400e
   81ede:	4620      	mov	r0, r4
   81ee0:	f04f 0104 	mov.w	r1, #4
   81ee4:	f245 2215 	movw	r2, #21013	; 0x5215
   81ee8:	f2c0 0208 	movt	r2, #8
   81eec:	4790      	blx	r2
		set_second_flag();
   81eee:	f649 50cd 	movw	r0, #40397	; 0x9dcd
   81ef2:	f2c0 0008 	movt	r0, #8
   81ef6:	4780      	blx	r0
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
   81ef8:	4620      	mov	r0, r4
   81efa:	f04f 0104 	mov.w	r1, #4
   81efe:	f245 231d 	movw	r3, #21021	; 0x521d
   81f02:	f2c0 0308 	movt	r3, #8
   81f06:	4798      	blx	r3
		rtc_enable_interrupt(RTC, RTC_IER_SECEN);
   81f08:	4620      	mov	r0, r4
   81f0a:	f04f 0104 	mov.w	r1, #4
   81f0e:	f245 2211 	movw	r2, #21009	; 0x5211
   81f12:	f2c0 0208 	movt	r2, #8
   81f16:	4790      	blx	r2
   81f18:	bd10      	pop	{r4, pc}
   81f1a:	bf00      	nop

00081f1c <TC0_Handler>:

/**
 * \brief TC0,0 compare interrupt
 */
void TC0_Handler(void)
{
   81f1c:	b530      	push	{r4, r5, lr}
   81f1e:	b083      	sub	sp, #12
	volatile uint32_t temp_uint32t, temp_uint32t2;
	
	tc_get_status(TC0, 0);
   81f20:	f04f 0400 	mov.w	r4, #0
   81f24:	f2c4 0408 	movt	r4, #16392	; 0x4008
   81f28:	4620      	mov	r0, r4
   81f2a:	f04f 0100 	mov.w	r1, #0
   81f2e:	f241 73a5 	movw	r3, #6053	; 0x17a5
   81f32:	f2c0 0308 	movt	r3, #8
   81f36:	4798      	blx	r3
	set_integrator_timer_flag();
   81f38:	f649 50dd 	movw	r0, #40413	; 0x9ddd
   81f3c:	f2c0 0008 	movt	r0, #8
   81f40:	4780      	blx	r0
	
	temp_uint32t = tc_read_cv(TC1, 2);
   81f42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   81f46:	f2c4 0008 	movt	r0, #16392	; 0x4008
   81f4a:	f04f 0102 	mov.w	r1, #2
   81f4e:	f241 758d 	movw	r5, #6029	; 0x178d
   81f52:	f2c0 0508 	movt	r5, #8
   81f56:	47a8      	blx	r5
   81f58:	9001      	str	r0, [sp, #4]
	temp_uint32t2 = tc_read_cv(TC0, 1);
   81f5a:	4620      	mov	r0, r4
   81f5c:	f04f 0101 	mov.w	r1, #1
   81f60:	47a8      	blx	r5
   81f62:	9000      	str	r0, [sp, #0]
		
	if(tc0_overflow > 0)
   81f64:	f241 61d0 	movw	r1, #5840	; 0x16d0
   81f68:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81f6c:	680a      	ldr	r2, [r1, #0]
   81f6e:	b1ba      	cbz	r2, 81fa0 <TC0_Handler+0x84>
		tc0_counter_v = tc0_overflow + last_counter0_val + temp_uint32t + 1;
   81f70:	f241 63d0 	movw	r3, #5840	; 0x16d0
   81f74:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81f78:	6819      	ldr	r1, [r3, #0]
   81f7a:	f640 3218 	movw	r2, #2840	; 0xb18
   81f7e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81f82:	6810      	ldr	r0, [r2, #0]
   81f84:	9b01      	ldr	r3, [sp, #4]
   81f86:	1809      	adds	r1, r1, r0
   81f88:	f101 0101 	add.w	r1, r1, #1
   81f8c:	18ca      	adds	r2, r1, r3
   81f8e:	f04f 0300 	mov.w	r3, #0
   81f92:	f241 60c8 	movw	r0, #5832	; 0x16c8
   81f96:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81f9a:	e9c0 2300 	strd	r2, r3, [r0]
   81f9e:	e00e      	b.n	81fbe <TC0_Handler+0xa2>
	else
		tc0_counter_v  = temp_uint32t - last_counter0_val;
   81fa0:	9801      	ldr	r0, [sp, #4]
   81fa2:	f640 3318 	movw	r3, #2840	; 0xb18
   81fa6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81faa:	6819      	ldr	r1, [r3, #0]
   81fac:	1a42      	subs	r2, r0, r1
   81fae:	f04f 0300 	mov.w	r3, #0
   81fb2:	f241 60c8 	movw	r0, #5832	; 0x16c8
   81fb6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81fba:	e9c0 2300 	strd	r2, r3, [r0]
		
	if(tc1_overflow > 0)
   81fbe:	f241 63d4 	movw	r3, #5844	; 0x16d4
   81fc2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81fc6:	6819      	ldr	r1, [r3, #0]
   81fc8:	b1c1      	cbz	r1, 81ffc <TC0_Handler+0xe0>
		tc1_counter_v = tc1_overflow + last_counter1_val + temp_uint32t2 + 1;
   81fca:	f241 62d4 	movw	r2, #5844	; 0x16d4
   81fce:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81fd2:	6811      	ldr	r1, [r2, #0]
   81fd4:	f640 3328 	movw	r3, #2856	; 0xb28
   81fd8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81fdc:	6818      	ldr	r0, [r3, #0]
   81fde:	9a00      	ldr	r2, [sp, #0]
   81fe0:	1809      	adds	r1, r1, r0
   81fe2:	f101 0101 	add.w	r1, r1, #1
   81fe6:	188b      	adds	r3, r1, r2
   81fe8:	461a      	mov	r2, r3
   81fea:	f04f 0300 	mov.w	r3, #0
   81fee:	f241 60d8 	movw	r0, #5848	; 0x16d8
   81ff2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81ff6:	e9c0 2300 	strd	r2, r3, [r0]
   81ffa:	e00f      	b.n	8201c <TC0_Handler+0x100>
	else
		tc1_counter_v  = temp_uint32t2 - last_counter1_val;
   81ffc:	9a00      	ldr	r2, [sp, #0]
   81ffe:	f640 3028 	movw	r0, #2856	; 0xb28
   82002:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82006:	6803      	ldr	r3, [r0, #0]
   82008:	1ad1      	subs	r1, r2, r3
   8200a:	460a      	mov	r2, r1
   8200c:	f04f 0300 	mov.w	r3, #0
   82010:	f241 60d8 	movw	r0, #5848	; 0x16d8
   82014:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82018:	e9c0 2300 	strd	r2, r3, [r0]
		
	last_counter0_val = temp_uint32t;
   8201c:	9a01      	ldr	r2, [sp, #4]
   8201e:	f640 3118 	movw	r1, #2840	; 0xb18
   82022:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82026:	600a      	str	r2, [r1, #0]
	last_counter1_val = temp_uint32t2;
   82028:	9800      	ldr	r0, [sp, #0]
   8202a:	f640 3328 	movw	r3, #2856	; 0xb28
   8202e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82032:	6018      	str	r0, [r3, #0]
	tc0_overflow = 0;
   82034:	f04f 0100 	mov.w	r1, #0
   82038:	f241 62d0 	movw	r2, #5840	; 0x16d0
   8203c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82040:	6011      	str	r1, [r2, #0]
	tc1_overflow = 0;
   82042:	f241 60d4 	movw	r0, #5844	; 0x16d4
   82046:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8204a:	6001      	str	r1, [r0, #0]
}
   8204c:	b003      	add	sp, #12
   8204e:	bd30      	pop	{r4, r5, pc}

00082050 <TC1_Handler>:

/**
 * \brief TC0,1 timer interrupt
 */
void TC1_Handler(void)
{
   82050:	b508      	push	{r3, lr}
	tc_get_status(TC0, 1);
   82052:	f04f 0000 	mov.w	r0, #0
   82056:	f2c4 0008 	movt	r0, #16392	; 0x4008
   8205a:	f04f 0101 	mov.w	r1, #1
   8205e:	f241 73a5 	movw	r3, #6053	; 0x17a5
   82062:	f2c0 0308 	movt	r3, #8
   82066:	4798      	blx	r3
	tc1_overflow = 0xFFFFFFFF - last_counter1_val;
   82068:	f640 3028 	movw	r0, #2856	; 0xb28
   8206c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   82070:	6801      	ldr	r1, [r0, #0]
   82072:	ea6f 0301 	mvn.w	r3, r1
   82076:	f241 62d4 	movw	r2, #5844	; 0x16d4
   8207a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8207e:	6013      	str	r3, [r2, #0]
	last_counter1_val = 0;
   82080:	f04f 0100 	mov.w	r1, #0
   82084:	6001      	str	r1, [r0, #0]
   82086:	bd08      	pop	{r3, pc}

00082088 <TC5_Handler>:

/**
 * \brief TC1,2 overflow interrupt
 */
void TC5_Handler(void)
{
   82088:	b508      	push	{r3, lr}
	tc_get_status(TC1, 2);
   8208a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   8208e:	f2c4 0008 	movt	r0, #16392	; 0x4008
   82092:	f04f 0102 	mov.w	r1, #2
   82096:	f241 73a5 	movw	r3, #6053	; 0x17a5
   8209a:	f2c0 0308 	movt	r3, #8
   8209e:	4798      	blx	r3
	tc0_overflow = 0xFFFFFFFF - last_counter0_val;
   820a0:	f640 3018 	movw	r0, #2840	; 0xb18
   820a4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   820a8:	6801      	ldr	r1, [r0, #0]
   820aa:	ea6f 0301 	mvn.w	r3, r1
   820ae:	f241 62d0 	movw	r2, #5840	; 0x16d0
   820b2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   820b6:	6013      	str	r3, [r2, #0]
	last_counter0_val = 0;
   820b8:	f04f 0100 	mov.w	r1, #0
   820bc:	6001      	str	r1, [r0, #0]
   820be:	bd08      	pop	{r3, pc}

000820c0 <TC2_Handler>:

/**
 * \brief TC0,2 timer interrupt (for leds)
 */
void TC2_Handler(void)
{
   820c0:	b508      	push	{r3, lr}
	tc_get_status(TC0, 2);
   820c2:	f04f 0000 	mov.w	r0, #0
   820c6:	f2c4 0008 	movt	r0, #16392	; 0x4008
   820ca:	f04f 0102 	mov.w	r1, #2
   820ce:	f241 73a5 	movw	r3, #6053	; 0x17a5
   820d2:	f2c0 0308 	movt	r3, #8
   820d6:	4798      	blx	r3
	led_activity_routine();
   820d8:	f641 3059 	movw	r0, #7001	; 0x1b59
   820dc:	f2c0 0008 	movt	r0, #8
   820e0:	4780      	blx	r0
   820e2:	bd08      	pop	{r3, pc}

000820e4 <get_counter0_value>:
/**
 * \brief Get counter0 value, updated every second
 */
uint64_t get_counter0_value(void)
{
	return tc0_counter_v;
   820e4:	f241 63c8 	movw	r3, #5832	; 0x16c8
   820e8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   820ec:	e9d3 2300 	ldrd	r2, r3, [r3]
}
   820f0:	4610      	mov	r0, r2
   820f2:	4619      	mov	r1, r3
   820f4:	4770      	bx	lr
   820f6:	bf00      	nop

000820f8 <get_counter1_value>:
/**
 * \brief Get counter1 value, updated every second
 */
uint64_t get_counter1_value(void)
{
	return tc1_counter_v;
   820f8:	f241 63d8 	movw	r3, #5848	; 0x16d8
   820fc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82100:	e9d3 2300 	ldrd	r2, r3, [r3]
}
   82104:	4610      	mov	r0, r2
   82106:	4619      	mov	r1, r3
   82108:	4770      	bx	lr
   8210a:	bf00      	nop

0008210c <configure_rtc>:

/**
 * \brief	Setup the RTC for second interrupts
 */
void configure_rtc(void)
{
   8210c:	b510      	push	{r4, lr}
	/* Default RTC configuration, 24-hour mode using external XTAL */
	rtc_set_hour_mode(RTC, 0);
   8210e:	f44f 54d3 	mov.w	r4, #6752	; 0x1a60
   82112:	f2c4 040e 	movt	r4, #16398	; 0x400e
   82116:	4620      	mov	r0, r4
   82118:	f04f 0100 	mov.w	r1, #0
   8211c:	f245 13f9 	movw	r3, #20985	; 0x51f9
   82120:	f2c0 0308 	movt	r3, #8
   82124:	4798      	blx	r3
	supc_switch_sclk_to_32kxtal(SUPC, 0);
   82126:	f641 2010 	movw	r0, #6672	; 0x1a10
   8212a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8212e:	f04f 0100 	mov.w	r1, #0
   82132:	f241 7231 	movw	r2, #5937	; 0x1731
   82136:	f2c0 0208 	movt	r2, #8
   8213a:	4790      	blx	r2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   8213c:	f44f 4061 	mov.w	r0, #57600	; 0xe100
   82140:	f2ce 0000 	movt	r0, #57344	; 0xe000
   82144:	f04f 0104 	mov.w	r1, #4
   82148:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8214c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82150:	6001      	str	r1, [r0, #0]
	/* Configure RTC second interrupt */
	NVIC_DisableIRQ(RTC_IRQn);
	NVIC_ClearPendingIRQ(RTC_IRQn);
	//NVIC_SetPriority(RTC_IRQn, 0);
	NVIC_EnableIRQ(RTC_IRQn);
	rtc_enable_interrupt(RTC, RTC_IER_SECEN);
   82152:	4620      	mov	r0, r4
   82154:	f245 2311 	movw	r3, #21009	; 0x5211
   82158:	f2c0 0308 	movt	r3, #8
   8215c:	4798      	blx	r3
   8215e:	bd10      	pop	{r4, pc}

00082160 <enable_countera>:

/**
 * \brief	Enable counter A
 */
void enable_countera(void)
{
   82160:	b510      	push	{r4, lr}
	// INPUT1 TCLK5, TC1 channel 1 > XC2, enable counter overflow interrupt
	pmc_enable_periph_clk(ID_TC5);
   82162:	f04f 0020 	mov.w	r0, #32
   82166:	f647 1315 	movw	r3, #30997	; 0x7915
   8216a:	f2c0 0308 	movt	r3, #8
   8216e:	4798      	blx	r3
	tc_init(TC1, 2, (TC_CMR_TCCLKS_XC2|TC_CMR_WAVE));
   82170:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   82174:	f2c4 0408 	movt	r4, #16392	; 0x4008
   82178:	4620      	mov	r0, r4
   8217a:	f04f 0102 	mov.w	r1, #2
   8217e:	f248 0207 	movw	r2, #32775	; 0x8007
   82182:	f241 7351 	movw	r3, #5969	; 0x1751
   82186:	f2c0 0308 	movt	r3, #8
   8218a:	4798      	blx	r3
	tc_set_block_mode(TC1, TC_BMR_TC2XC2S_TCLK2);
   8218c:	4620      	mov	r0, r4
   8218e:	f04f 0100 	mov.w	r1, #0
   82192:	f241 726d 	movw	r2, #5997	; 0x176d
   82196:	f2c0 0208 	movt	r2, #8
   8219a:	4790      	blx	r2
	tc_enable_interrupt(TC1, 2, TC_IER_COVFS);
   8219c:	4620      	mov	r0, r4
   8219e:	f04f 0102 	mov.w	r1, #2
   821a2:	f04f 0201 	mov.w	r2, #1
   821a6:	f241 739d 	movw	r3, #6045	; 0x179d
   821aa:	f2c0 0308 	movt	r3, #8
   821ae:	4798      	blx	r3
	tc_start(TC1, 2);
   821b0:	4620      	mov	r0, r4
   821b2:	f04f 0102 	mov.w	r1, #2
   821b6:	f241 7275 	movw	r2, #6005	; 0x1775
   821ba:	f2c0 0208 	movt	r2, #8
   821be:	4790      	blx	r2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   821c0:	f44f 4061 	mov.w	r0, #57600	; 0xe100
   821c4:	f2ce 0000 	movt	r0, #57344	; 0xe000
   821c8:	f04f 0101 	mov.w	r1, #1
   821cc:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   821d0:	f8c0 1184 	str.w	r1, [r0, #388]	; 0x184

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   821d4:	6041      	str	r1, [r0, #4]
	NVIC_DisableIRQ(TC5_IRQn);
	NVIC_ClearPendingIRQ(TC5_IRQn);
	//NVIC_SetPriority(TC5_IRQn, 0);
	NVIC_EnableIRQ(TC5_IRQn);	
	is_countera_enabled = TRUE;
   821d6:	f640 3324 	movw	r3, #2852	; 0xb24
   821da:	f2c2 0307 	movt	r3, #8199	; 0x2007
   821de:	8019      	strh	r1, [r3, #0]
   821e0:	bd10      	pop	{r4, pc}
   821e2:	bf00      	nop

000821e4 <enable_counterb>:

/**
 * \brief	Enable counter B
 */
void enable_counterb(void)
{
   821e4:	b510      	push	{r4, lr}
	// INPUT2 TCLK1, TC0 channel 2 > XC1, enable counter overflow interrupt
	pmc_enable_periph_clk(ID_TC1);
   821e6:	f04f 001c 	mov.w	r0, #28
   821ea:	f647 1315 	movw	r3, #30997	; 0x7915
   821ee:	f2c0 0308 	movt	r3, #8
   821f2:	4798      	blx	r3
	tc_init(TC0, 1, (TC_CMR_TCCLKS_XC1|TC_CMR_WAVE));
   821f4:	f04f 0400 	mov.w	r4, #0
   821f8:	f2c4 0408 	movt	r4, #16392	; 0x4008
   821fc:	4620      	mov	r0, r4
   821fe:	f04f 0101 	mov.w	r1, #1
   82202:	f248 0206 	movw	r2, #32774	; 0x8006
   82206:	f241 7351 	movw	r3, #5969	; 0x1751
   8220a:	f2c0 0308 	movt	r3, #8
   8220e:	4798      	blx	r3
	tc_set_block_mode(TC0, TC_BMR_TC1XC1S_TCLK1);
   82210:	4620      	mov	r0, r4
   82212:	f04f 0100 	mov.w	r1, #0
   82216:	f241 726d 	movw	r2, #5997	; 0x176d
   8221a:	f2c0 0208 	movt	r2, #8
   8221e:	4790      	blx	r2
	tc_enable_interrupt(TC0, 1, TC_IER_COVFS);
   82220:	4620      	mov	r0, r4
   82222:	f04f 0101 	mov.w	r1, #1
   82226:	460a      	mov	r2, r1
   82228:	f241 739d 	movw	r3, #6045	; 0x179d
   8222c:	f2c0 0308 	movt	r3, #8
   82230:	4798      	blx	r3
	tc_start(TC0, 1);
   82232:	4620      	mov	r0, r4
   82234:	f04f 0101 	mov.w	r1, #1
   82238:	f241 7275 	movw	r2, #6005	; 0x1775
   8223c:	f2c0 0208 	movt	r2, #8
   82240:	4790      	blx	r2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   82242:	f44f 4061 	mov.w	r0, #57600	; 0xe100
   82246:	f2ce 0000 	movt	r0, #57344	; 0xe000
   8224a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8224e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   82252:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82256:	6001      	str	r1, [r0, #0]
	NVIC_DisableIRQ(TC1_IRQn);
	NVIC_ClearPendingIRQ(TC1_IRQn);
	//NVIC_SetPriority(TC1_IRQn, 0);
	NVIC_EnableIRQ(TC1_IRQn);	
	is_counterb_enabled = TRUE;
   82258:	f640 3326 	movw	r3, #2854	; 0xb26
   8225c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82260:	f04f 0201 	mov.w	r2, #1
   82264:	801a      	strh	r2, [r3, #0]
   82266:	bd10      	pop	{r4, pc}

00082268 <enable_counters>:

/**
 * \brief	Enable counters
 */
void enable_counters(void)
{
   82268:	b508      	push	{r3, lr}
	enable_countera();
   8226a:	f242 1361 	movw	r3, #8545	; 0x2161
   8226e:	f2c0 0308 	movt	r3, #8
   82272:	4798      	blx	r3
	enable_counterb();
   82274:	f242 10e5 	movw	r0, #8677	; 0x21e5
   82278:	f2c0 0008 	movt	r0, #8
   8227c:	4780      	blx	r0
   8227e:	bd08      	pop	{r3, pc}

00082280 <disable_countera>:

/**
 * \brief	Disable counter A
 */
void disable_countera(void)
{
   82280:	b508      	push	{r3, lr}
	tc_stop(TC1, 2);
   82282:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   82286:	f2c4 0008 	movt	r0, #16392	; 0x4008
   8228a:	f04f 0102 	mov.w	r1, #2
   8228e:	f241 7381 	movw	r3, #6017	; 0x1781
   82292:	f2c0 0308 	movt	r3, #8
   82296:	4798      	blx	r3
	is_countera_enabled = FALSE;
   82298:	f640 3024 	movw	r0, #2852	; 0xb24
   8229c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   822a0:	f04f 0200 	mov.w	r2, #0
   822a4:	8002      	strh	r2, [r0, #0]
   822a6:	bd08      	pop	{r3, pc}

000822a8 <disable_counterb>:

/**
 * \brief	Disable counter B
 */
void disable_counterb(void)
{
   822a8:	b508      	push	{r3, lr}
	tc_stop(TC0, 1);
   822aa:	f04f 0000 	mov.w	r0, #0
   822ae:	f2c4 0008 	movt	r0, #16392	; 0x4008
   822b2:	f04f 0101 	mov.w	r1, #1
   822b6:	f241 7381 	movw	r3, #6017	; 0x1781
   822ba:	f2c0 0308 	movt	r3, #8
   822be:	4798      	blx	r3
	is_counterb_enabled = FALSE;
   822c0:	f640 3026 	movw	r0, #2854	; 0xb26
   822c4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   822c8:	f04f 0200 	mov.w	r2, #0
   822cc:	8002      	strh	r2, [r0, #0]
   822ce:	bd08      	pop	{r3, pc}

000822d0 <disable_counters>:

/**
 * \brief	Disable counters
 */
void disable_counters(void)
{
   822d0:	b508      	push	{r3, lr}
	disable_countera();
   822d2:	f242 2381 	movw	r3, #8833	; 0x2281
   822d6:	f2c0 0308 	movt	r3, #8
   822da:	4798      	blx	r3
	disable_counterb();
   822dc:	f242 20a9 	movw	r0, #8873	; 0x22a9
   822e0:	f2c0 0008 	movt	r0, #8
   822e4:	4780      	blx	r0
   822e6:	bd08      	pop	{r3, pc}

000822e8 <get_countera_en_status>:
 * \brief	Is counter a enabled?
 */
uint16_t get_countera_en_status(void)
{
	return is_countera_enabled;
}
   822e8:	f640 3324 	movw	r3, #2852	; 0xb24
   822ec:	f2c2 0307 	movt	r3, #8199	; 0x2007
   822f0:	8818      	ldrh	r0, [r3, #0]
   822f2:	4770      	bx	lr

000822f4 <get_counterb_en_status>:
 * \brief	Is counter b enabled?
 */
uint16_t get_counterb_en_status(void)
{
	return is_counterb_enabled;
}
   822f4:	f640 3326 	movw	r3, #2854	; 0xb26
   822f8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   822fc:	8818      	ldrh	r0, [r3, #0]
   822fe:	4770      	bx	lr

00082300 <init_module_peripherals_bp>:

// Here should be all the initialization functions for the module before 12v power
void init_module_peripherals_bp(void)
{	
   82300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82304:	b085      	sub	sp, #20
	// Initialize RTC
	configure_rtc();
   82306:	f242 130d 	movw	r3, #8461	; 0x210d
   8230a:	f2c0 0308 	movt	r3, #8
   8230e:	4798      	blx	r3
	
	// MUX
	pmc_enable_periph_clk(MUX_IN_PIO_ID);
   82310:	f04f 000c 	mov.w	r0, #12
   82314:	f647 1415 	movw	r4, #30997	; 0x7915
   82318:	f2c0 0408 	movt	r4, #8
   8231c:	47a0      	blx	r4
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   8231e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
   82322:	f2c4 050e 	movt	r5, #16398	; 0x400e
   82326:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   8232a:	6628      	str	r0, [r5, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   8232c:	6568      	str	r0, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   8232e:	6268      	str	r0, [r5, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   82330:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   82334:	6f2a      	ldr	r2, [r5, #112]	; 0x70
   82336:	4302      	orrs	r2, r0
   82338:	672a      	str	r2, [r5, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   8233a:	6068      	str	r0, [r5, #4]
	/*ioport_set_pin_dir(MUX_IN_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(MUX_IN_GPIO, IOPORT_PIN_LEVEL_LOW);*/
	ioport_set_pin_mode(MUX_IN_GPIO, MUX_IN_FLAGS);
	ioport_disable_pin(MUX_IN_GPIO);
	pmc_enable_periph_clk(MUX_SEL_PIO_ID);
   8233c:	f04f 000c 	mov.w	r0, #12
   82340:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82342:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
   82346:	612f      	str	r7, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82348:	f8c5 70a0 	str.w	r7, [r5, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8234c:	636f      	str	r7, [r5, #52]	; 0x34
	ioport_set_pin_dir(MUX_SEL_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(MUX_SEL_GPIO, IOPORT_PIN_LEVEL_LOW);
	
	// INPUTS RELATED
	pmc_enable_periph_clk(TTL_D_NRESET_PIO_ID);
   8234e:	f04f 000d 	mov.w	r0, #13
   82352:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82354:	f44f 5690 	mov.w	r6, #4608	; 0x1200
   82358:	f2c4 060e 	movt	r6, #16398	; 0x400e
   8235c:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
   82360:	f8c6 8010 	str.w	r8, [r6, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82364:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82368:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
	ioport_set_pin_dir(TTL_D_NRESET_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(TTL_D_NRESET_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(TTL_IN_PIO_ID);
   8236c:	f04f 000d 	mov.w	r0, #13
   82370:	47a0      	blx	r4
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   82372:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82376:	6171      	str	r1, [r6, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82378:	f8c6 10a0 	str.w	r1, [r6, #160]	; 0xa0
	ioport_set_pin_dir(TTL_IN_GPIO, IOPORT_DIR_INPUT);
	
	// LEDS
	pmc_enable_periph_clk(OUT_CH3_LED1_PIO_ID);
   8237c:	f04f 000c 	mov.w	r0, #12
   82380:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82382:	f04f 0980 	mov.w	r9, #128	; 0x80
   82386:	f8c5 9010 	str.w	r9, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8238a:	f8c5 90a0 	str.w	r9, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8238e:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
	ioport_set_pin_dir(OUT_CH3_LED1_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(OUT_CH3_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(OUT_CH3_LED2_PIO_ID);
   82392:	f04f 000c 	mov.w	r0, #12
   82396:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82398:	f04f 0340 	mov.w	r3, #64	; 0x40
   8239c:	612b      	str	r3, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8239e:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   823a2:	632b      	str	r3, [r5, #48]	; 0x30
	ioport_set_pin_dir(OUT_CH3_LED2_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(OUT_CH3_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(OUT_CH3_LED3_PIO_ID);
   823a4:	f04f 000c 	mov.w	r0, #12
   823a8:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   823aa:	f44f 7080 	mov.w	r0, #256	; 0x100
   823ae:	6128      	str	r0, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   823b0:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   823b4:	6328      	str	r0, [r5, #48]	; 0x30
	ioport_set_pin_dir(OUT_CH3_LED3_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(OUT_CH3_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);
	
	pmc_enable_periph_clk(IN_CH1_LED1_PIO_ID);
   823b6:	f04f 000d 	mov.w	r0, #13
   823ba:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   823bc:	f04f 0220 	mov.w	r2, #32
   823c0:	6132      	str	r2, [r6, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   823c2:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   823c6:	6332      	str	r2, [r6, #48]	; 0x30
	ioport_set_pin_dir(IN_CH1_LED1_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH1_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(IN_CH1_LED2_PIO_ID);
   823c8:	f04f 000d 	mov.w	r0, #13
   823cc:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   823ce:	f8c6 9010 	str.w	r9, [r6, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   823d2:	f8c6 90a0 	str.w	r9, [r6, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   823d6:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
	ioport_set_pin_dir(IN_CH1_LED2_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH1_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(IN_CH1_LED3_PIO_ID);
   823da:	f04f 000d 	mov.w	r0, #13
   823de:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   823e0:	f44f 7100 	mov.w	r1, #512	; 0x200
   823e4:	6131      	str	r1, [r6, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   823e6:	f8c6 10a0 	str.w	r1, [r6, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   823ea:	6331      	str	r1, [r6, #48]	; 0x30
	ioport_set_pin_dir(IN_CH1_LED3_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH1_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);
	
	pmc_enable_periph_clk(IN_CH2_LED1_PIO_ID);
   823ec:	f04f 000d 	mov.w	r0, #13
   823f0:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   823f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   823f6:	6133      	str	r3, [r6, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   823f8:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   823fc:	6333      	str	r3, [r6, #48]	; 0x30
	ioport_set_pin_dir(IN_CH2_LED1_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH2_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(IN_CH2_LED2_PIO_ID);
   823fe:	f04f 000d 	mov.w	r0, #13
   82402:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82404:	6137      	str	r7, [r6, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82406:	f8c6 70a0 	str.w	r7, [r6, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8240a:	6337      	str	r7, [r6, #48]	; 0x30
	ioport_set_pin_dir(IN_CH2_LED2_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH2_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(IN_CH2_LED3_PIO_ID);
   8240c:	f04f 000d 	mov.w	r0, #13
   82410:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82412:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
   82416:	6137      	str	r7, [r6, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82418:	f8c6 70a0 	str.w	r7, [r6, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8241c:	6337      	str	r7, [r6, #48]	; 0x30
	ioport_set_pin_dir(IN_CH2_LED3_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH2_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);
	
	pmc_enable_periph_clk(IN_CH3_LED1_PIO_ID);
   8241e:	f04f 000d 	mov.w	r0, #13
   82422:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82424:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   82428:	6130      	str	r0, [r6, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8242a:	f8c6 00a0 	str.w	r0, [r6, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8242e:	6330      	str	r0, [r6, #48]	; 0x30
	ioport_set_pin_dir(IN_CH3_LED1_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH3_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(IN_CH3_LED2_PIO_ID);
   82430:	f04f 000d 	mov.w	r0, #13
   82434:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82436:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8243a:	6132      	str	r2, [r6, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8243c:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82440:	6332      	str	r2, [r6, #48]	; 0x30
	ioport_set_pin_dir(IN_CH3_LED2_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH3_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(IN_CH3_LED3_PIO_ID);
   82442:	f04f 000d 	mov.w	r0, #13
   82446:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82448:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   8244c:	6133      	str	r3, [r6, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8244e:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82452:	6333      	str	r3, [r6, #48]	; 0x30
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   82454:	f44f 6760 	mov.w	r7, #3584	; 0xe00
   82458:	f2c4 070e 	movt	r7, #16398	; 0x400e
   8245c:	f04f 0610 	mov.w	r6, #16
   82460:	663e      	str	r6, [r7, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   82462:	657e      	str	r6, [r7, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   82464:	627e      	str	r6, [r7, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   82466:	f8c7 6080 	str.w	r6, [r7, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   8246a:	6f39      	ldr	r1, [r7, #112]	; 0x70
   8246c:	f021 0010 	bic.w	r0, r1, #16
   82470:	6738      	str	r0, [r7, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   82472:	607e      	str	r6, [r7, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   82474:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   82478:	662a      	str	r2, [r5, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   8247a:	656a      	str	r2, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   8247c:	626a      	str	r2, [r5, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   8247e:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   82482:	6f2f      	ldr	r7, [r5, #112]	; 0x70
   82484:	f427 3180 	bic.w	r1, r7, #65536	; 0x10000
   82488:	6729      	str	r1, [r5, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   8248a:	606a      	str	r2, [r5, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   8248c:	662b      	str	r3, [r5, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   8248e:	656b      	str	r3, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   82490:	626b      	str	r3, [r5, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   82492:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   82496:	6f28      	ldr	r0, [r5, #112]	; 0x70
   82498:	4318      	orrs	r0, r3
   8249a:	6728      	str	r0, [r5, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   8249c:	606b      	str	r3, [r5, #4]
	ioport_set_pin_mode(MHZ_10_IN_GPIO, MHZ_10_IN_FLAGS);
	ioport_disable_pin(MHZ_10_IN_GPIO);
	
	// Init 250ms interrupt, clocked by the external 10MHz		
	// TCLK0, TC0 channel 0 > XC0, enable compare interrupt
	pmc_enable_periph_clk(ID_TC0);
   8249e:	f04f 001b 	mov.w	r0, #27
   824a2:	47a0      	blx	r4
	tc_init(TC0, 0, (TC_CMR_TCCLKS_XC0|TC_CMR_WAVE|TC_CMR_CPCTRG));
   824a4:	f04f 0500 	mov.w	r5, #0
   824a8:	f2c4 0508 	movt	r5, #16392	; 0x4008
   824ac:	4628      	mov	r0, r5
   824ae:	f04f 0100 	mov.w	r1, #0
   824b2:	f24c 0205 	movw	r2, #49157	; 0xc005
   824b6:	f241 7b51 	movw	fp, #5969	; 0x1751
   824ba:	f2c0 0b08 	movt	fp, #8
   824be:	47d8      	blx	fp
	tc_write_rc(TC0, 0, (10000000/4));
   824c0:	4628      	mov	r0, r5
   824c2:	f04f 0100 	mov.w	r1, #0
   824c6:	f242 52a0 	movw	r2, #9632	; 0x25a0
   824ca:	f2c0 0226 	movt	r2, #38	; 0x26
   824ce:	f241 7a95 	movw	sl, #6037	; 0x1795
   824d2:	f2c0 0a08 	movt	sl, #8
   824d6:	47d0      	blx	sl
	tc_set_block_mode(TC0, TC_BMR_TC0XC0S_TCLK0);
   824d8:	4628      	mov	r0, r5
   824da:	f04f 0100 	mov.w	r1, #0
   824de:	f241 736d 	movw	r3, #5997	; 0x176d
   824e2:	f2c0 0308 	movt	r3, #8
   824e6:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
   824e8:	4628      	mov	r0, r5
   824ea:	f04f 0100 	mov.w	r1, #0
   824ee:	4632      	mov	r2, r6
   824f0:	f241 779d 	movw	r7, #6045	; 0x179d
   824f4:	f2c0 0708 	movt	r7, #8
   824f8:	47b8      	blx	r7
	tc_start(TC0, 0);
   824fa:	4628      	mov	r0, r5
   824fc:	f04f 0100 	mov.w	r1, #0
   82500:	f241 7975 	movw	r9, #6005	; 0x1775
   82504:	f2c0 0908 	movt	r9, #8
   82508:	47c8      	blx	r9

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   8250a:	f44f 4761 	mov.w	r7, #57600	; 0xe100
   8250e:	f2ce 0700 	movt	r7, #57344	; 0xe000
   82512:	f8c7 8080 	str.w	r8, [r7, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   82516:	f8c7 8180 	str.w	r8, [r7, #384]	; 0x180

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8251a:	f8c7 8000 	str.w	r8, [r7]
	uint32_t ul_div;
	uint32_t ul_tcclks;
	/* Get system clock. */
	uint32_t ul_sysclk = sysclk_get_cpu_hz();
	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC2);
   8251e:	f04f 001d 	mov.w	r0, #29
   82522:	47a0      	blx	r4
	/* Configure TC for a TC_FREQ frequency and trigger on RC compare. */
	tc_find_mck_divisor(20, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
   82524:	f44f 483d 	mov.w	r8, #48384	; 0xbd00
   82528:	f2c0 5801 	movt	r8, #1281	; 0x501
   8252c:	f8cd 8000 	str.w	r8, [sp]
   82530:	f04f 0014 	mov.w	r0, #20
   82534:	4641      	mov	r1, r8
   82536:	aa03      	add	r2, sp, #12
   82538:	ab02      	add	r3, sp, #8
   8253a:	f241 7cad 	movw	ip, #6061	; 0x17ad
   8253e:	f2c0 0c08 	movt	ip, #8
   82542:	47e0      	blx	ip
	tc_init(TC0, 2, ul_tcclks | TC_CMR_CPCTRG);
   82544:	4628      	mov	r0, r5
   82546:	f04f 0102 	mov.w	r1, #2
   8254a:	9a02      	ldr	r2, [sp, #8]
   8254c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   82550:	47d8      	blx	fp
	tc_write_rc(TC0, 2, (ul_sysclk / ul_div) / 20);
   82552:	9903      	ldr	r1, [sp, #12]
   82554:	fbb8 f0f1 	udiv	r0, r8, r1
   82558:	f64c 43cd 	movw	r3, #52429	; 0xcccd
   8255c:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
   82560:	fba3 1200 	umull	r1, r2, r3, r0
   82564:	4628      	mov	r0, r5
   82566:	f04f 0102 	mov.w	r1, #2
   8256a:	ea4f 1212 	mov.w	r2, r2, lsr #4
   8256e:	47d0      	blx	sl
	/* Configure and enable interrupt on RC compare. */
	tc_start(TC0, 2);
   82570:	4628      	mov	r0, r5
   82572:	f04f 0102 	mov.w	r1, #2
   82576:	47c8      	blx	r9

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   82578:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   8257c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   82580:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82584:	6039      	str	r1, [r7, #0]
	NVIC_DisableIRQ(TC2_IRQn);
	NVIC_ClearPendingIRQ(TC2_IRQn);
	//NVIC_SetPriority(TC2_IRQn, 0);
	NVIC_EnableIRQ((IRQn_Type)ID_TC2);
	tc_enable_interrupt(TC0, 2, TC_IER_CPCS);
   82586:	4628      	mov	r0, r5
   82588:	f04f 0102 	mov.w	r1, #2
   8258c:	4632      	mov	r2, r6
   8258e:	f241 769d 	movw	r6, #6045	; 0x179d
   82592:	f2c0 0608 	movt	r6, #8
   82596:	47b0      	blx	r6
	
	// Frequency generator	
	/* Enable PWM peripheral clock */
	pmc_enable_periph_clk(ID_PWM);
   82598:	f04f 0024 	mov.w	r0, #36	; 0x24
   8259c:	47a0      	blx	r4

	/* Disable PWM channels for LEDs */
	pwm_channel_disable(PWM, PIN_LED3_CHANNEL);
   8259e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   825a2:	f2c4 0409 	movt	r4, #16393	; 0x4009
   825a6:	4620      	mov	r0, r4
   825a8:	f04f 0102 	mov.w	r1, #2
   825ac:	f241 750d 	movw	r5, #5901	; 0x170d
   825b0:	f2c0 0508 	movt	r5, #8
   825b4:	47a8      	blx	r5
	
	/* Initialize PWM channel for LED3 */
	/* Period is center-aligned */
	g_pwm_freq_gen.alignment = PWM_ALIGN_LEFT;
   825b6:	f241 6090 	movw	r0, #5776	; 0x1690
   825ba:	4601      	mov	r1, r0
   825bc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   825c0:	f04f 0600 	mov.w	r6, #0
   825c4:	810e      	strh	r6, [r1, #8]
	/* Output waveform starts at a high level */
	g_pwm_freq_gen.polarity = PWM_LOW;
   825c6:	728e      	strb	r6, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_freq_gen.ul_prescaler = PWM_CMR_CPRE_CLKB;
   825c8:	f04f 020c 	mov.w	r2, #12
   825cc:	604a      	str	r2, [r1, #4]
	/* Period value of output waveform */
	g_pwm_freq_gen.ul_period = sysclk_get_cpu_hz()/current_gen_freq;
   825ce:	f240 053c 	movw	r5, #60	; 0x3c
   825d2:	f2c2 0507 	movt	r5, #8199	; 0x2007
   825d6:	6828      	ldr	r0, [r5, #0]
   825d8:	fbb8 f3f0 	udiv	r3, r8, r0
   825dc:	610b      	str	r3, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_freq_gen.ul_duty = 1;
   825de:	f04f 0201 	mov.w	r2, #1
   825e2:	60ca      	str	r2, [r1, #12]
	g_pwm_freq_gen.channel = PIN_LED3_CHANNEL;
   825e4:	f04f 0502 	mov.w	r5, #2
   825e8:	600d      	str	r5, [r1, #0]
	pwm_channel_init(PWM, &g_pwm_freq_gen);
   825ea:	4620      	mov	r0, r4
   825ec:	f241 538d 	movw	r3, #5517	; 0x158d
   825f0:	f2c0 0308 	movt	r3, #8
   825f4:	4798      	blx	r3

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_LED3_CHANNEL, 0);
   825f6:	4620      	mov	r0, r4
   825f8:	4629      	mov	r1, r5
   825fa:	4632      	mov	r2, r6
   825fc:	f241 7319 	movw	r3, #5913	; 0x1719
   82600:	f2c0 0308 	movt	r3, #8
   82604:	4798      	blx	r3
	
	/* Enable PWM channel */
	pwm_channel_enable(PWM, PIN_LED3_CHANNEL);
   82606:	4620      	mov	r0, r4
   82608:	4629      	mov	r1, r5
   8260a:	f241 7201 	movw	r2, #5889	; 0x1701
   8260e:	f2c0 0208 	movt	r2, #8
   82612:	4790      	blx	r2
}
   82614:	b005      	add	sp, #20
   82616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8261a:	bf00      	nop

0008261c <setup_freqgen_freq>:

// Setup frequency
void setup_freqgen_freq(uint32_t frequency)
{
   8261c:	b508      	push	{r3, lr}
   8261e:	4603      	mov	r3, r0
	current_gen_freq = frequency;
   82620:	f240 023c 	movw	r2, #60	; 0x3c
   82624:	f2c2 0207 	movt	r2, #8199	; 0x2007
   82628:	6010      	str	r0, [r2, #0]
	pwm_channel_update_period(PWM, &g_pwm_freq_gen, sysclk_get_cpu_hz()/current_gen_freq);
   8262a:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
   8262e:	f2c0 5201 	movt	r2, #1281	; 0x501
   82632:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   82636:	f2c4 0009 	movt	r0, #16393	; 0x4009
   8263a:	f241 6190 	movw	r1, #5776	; 0x1690
   8263e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82642:	fbb2 f2f3 	udiv	r2, r2, r3
   82646:	f241 63b9 	movw	r3, #5817	; 0x16b9
   8264a:	f2c0 0308 	movt	r3, #8
   8264e:	4798      	blx	r3
   82650:	bd08      	pop	{r3, pc}
   82652:	bf00      	nop

00082654 <get_freqgen_freq>:

// Get current frequency
uint32_t get_freqgen_freq(void)
{
	return current_gen_freq;
}
   82654:	f240 033c 	movw	r3, #60	; 0x3c
   82658:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8265c:	6818      	ldr	r0, [r3, #0]
   8265e:	4770      	bx	lr

00082660 <init_module_peripherals_ap>:

// Here should be all the initialization functions for the module after 12v power
void init_module_peripherals_ap(void)
{
   82660:	4770      	bx	lr
   82662:	bf00      	nop

00082664 <deinit_module_peripherals>:
	
}

// Here should be all the deinitialization functions for the module before 12v power removal
void deinit_module_peripherals(void)
{
   82664:	4770      	bx	lr
   82666:	bf00      	nop

00082668 <init_i2c>:
twi_options_t i2c_options;
twi_packet_t i2c_packet;


void init_i2c(void)
{	
   82668:	b538      	push	{r3, r4, r5, lr}
	i2c_options.master_clk = sysclk_get_cpu_hz();
   8266a:	f241 64e0 	movw	r4, #5856	; 0x16e0
   8266e:	f2c2 0407 	movt	r4, #8199	; 0x2007
   82672:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
   82676:	f2c0 5301 	movt	r3, #1281	; 0x501
   8267a:	6023      	str	r3, [r4, #0]
	i2c_options.speed = 400000;
   8267c:	f44f 50d4 	mov.w	r0, #6784	; 0x1a80
   82680:	f2c0 0006 	movt	r0, #6
   82684:	6060      	str	r0, [r4, #4]
	i2c_options.chip = EEPROM_ADDR;
   82686:	f04f 0150 	mov.w	r1, #80	; 0x50
   8268a:	7221      	strb	r1, [r4, #8]
	i2c_options.smbus = 0;
   8268c:	f04f 0200 	mov.w	r2, #0
   82690:	7262      	strb	r2, [r4, #9]
	twi_enable_master_mode(TWI0);
   82692:	f44f 4540 	mov.w	r5, #49152	; 0xc000
   82696:	f2c4 0508 	movt	r5, #16392	; 0x4008
   8269a:	4628      	mov	r0, r5
   8269c:	f641 0395 	movw	r3, #6293	; 0x1895
   826a0:	f2c0 0308 	movt	r3, #8
   826a4:	4798      	blx	r3
	twi_master_init(TWI0, &i2c_options);	
   826a6:	4628      	mov	r0, r5
   826a8:	4621      	mov	r1, r4
   826aa:	f641 1255 	movw	r2, #6485	; 0x1955
   826ae:	f2c0 0208 	movt	r2, #8
   826b2:	4790      	blx	r2
   826b4:	bd38      	pop	{r3, r4, r5, pc}
   826b6:	bf00      	nop

000826b8 <init_pwm>:
	while(twi_probe(TWI0, EEPROM_ADDR) != TWI_SUCCESS);
	return (RET_TYPE)twi_master_read(TWI0, &i2c_packet);
}

void init_pwm(void)
{
   826b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   826bc:	b085      	sub	sp, #20
	/* Enable PWM peripheral clock */
	pmc_enable_periph_clk(ID_PWM);
   826be:	f04f 0024 	mov.w	r0, #36	; 0x24
   826c2:	f647 1315 	movw	r3, #30997	; 0x7915
   826c6:	f2c0 0308 	movt	r3, #8
   826ca:	4798      	blx	r3

	/* Disable PWM channels for LEDs */
	pwm_channel_disable(PWM, PIN_LED1_CHANNEL);
   826cc:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   826d0:	f2c4 0409 	movt	r4, #16393	; 0x4009
   826d4:	4620      	mov	r0, r4
   826d6:	f04f 0101 	mov.w	r1, #1
   826da:	f241 750d 	movw	r5, #5901	; 0x170d
   826de:	f2c0 0508 	movt	r5, #8
   826e2:	47a8      	blx	r5
	pwm_channel_disable(PWM, PIN_LED2_CHANNEL);
   826e4:	4620      	mov	r0, r4
   826e6:	f04f 0103 	mov.w	r1, #3
   826ea:	47a8      	blx	r5
	pwm_channel_disable(PWM, PIN_LED3_CHANNEL);
   826ec:	4620      	mov	r0, r4
   826ee:	f04f 0102 	mov.w	r1, #2
   826f2:	47a8      	blx	r5

	/* Set PWM clock A as LED_PWM_FREQUENCY*PERIOD_VALUE */
	pwm_clock_t clock_setting = {
   826f4:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
   826f8:	9001      	str	r0, [sp, #4]
   826fa:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
   826fe:	f2c0 5101 	movt	r1, #1281	; 0x501
   82702:	9102      	str	r1, [sp, #8]
   82704:	9103      	str	r1, [sp, #12]
		.ul_clka = LED_PWM_FREQUENCY * LED_PWM_PERIOD_VALUE,
		.ul_clkb = sysclk_get_cpu_hz(),
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &clock_setting);
   82706:	4620      	mov	r0, r4
   82708:	a901      	add	r1, sp, #4
   8270a:	f241 5241 	movw	r2, #5441	; 0x1541
   8270e:	f2c0 0208 	movt	r2, #8
   82712:	4790      	blx	r2

	/* Initialize PWM channel for LED1 */
	/* Period is left-aligned */
	g_pwm_channel_led1.alignment = PWM_ALIGN_LEFT;
   82714:	f241 7100 	movw	r1, #5888	; 0x1700
   82718:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8271c:	f04f 0500 	mov.w	r5, #0
   82720:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a low level */
	g_pwm_channel_led1.polarity = PWM_HIGH;
   82722:	f04f 0601 	mov.w	r6, #1
   82726:	728e      	strb	r6, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led1.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82728:	f04f 0b0b 	mov.w	fp, #11
   8272c:	f8c1 b004 	str.w	fp, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led1.ul_period = LED_PWM_PERIOD_VALUE;
   82730:	f44f 6a80 	mov.w	sl, #1024	; 0x400
   82734:	f8c1 a010 	str.w	sl, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led1.ul_duty = LED_INIT_DUTY_VALUE;
   82738:	60cd      	str	r5, [r1, #12]
	g_pwm_channel_led1.channel = PIN_LED1_CHANNEL;
   8273a:	600e      	str	r6, [r1, #0]
	pwm_channel_init(PWM, &g_pwm_channel_led1);
   8273c:	4620      	mov	r0, r4
   8273e:	f241 598d 	movw	r9, #5517	; 0x158d
   82742:	f2c0 0908 	movt	r9, #8
   82746:	47c8      	blx	r9

	/* Enable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_LED1_CHANNEL, 0);
   82748:	4620      	mov	r0, r4
   8274a:	4631      	mov	r1, r6
   8274c:	462a      	mov	r2, r5
   8274e:	f241 7819 	movw	r8, #5913	; 0x1719
   82752:	f2c0 0808 	movt	r8, #8
   82756:	47c0      	blx	r8
	//pwm_channel_enable_interrupt(PWM, PIN_LED1_CHANNEL, 0);

	/* Initialize PWM channel for LED2 */
	/* Period is center-aligned */
	g_pwm_channel_led2.alignment = PWM_ALIGN_LEFT;
   82758:	f241 7150 	movw	r1, #5968	; 0x1750
   8275c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82760:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led2.polarity = PWM_HIGH;
   82762:	728e      	strb	r6, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led2.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82764:	f8c1 b004 	str.w	fp, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led2.ul_period = LED_PWM_PERIOD_VALUE;
   82768:	f8c1 a010 	str.w	sl, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led2.ul_duty = LED_INIT_DUTY_VALUE;
   8276c:	60cd      	str	r5, [r1, #12]
	g_pwm_channel_led2.channel = PIN_LED2_CHANNEL;
   8276e:	f04f 0703 	mov.w	r7, #3
   82772:	600f      	str	r7, [r1, #0]
	pwm_channel_init(PWM, &g_pwm_channel_led2);
   82774:	4620      	mov	r0, r4
   82776:	47c8      	blx	r9

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_LED2_CHANNEL, 0);
   82778:	4620      	mov	r0, r4
   8277a:	4639      	mov	r1, r7
   8277c:	462a      	mov	r2, r5
   8277e:	47c0      	blx	r8

	/* Initialize PWM channel for LED3 */
	/* Period is center-aligned */
	g_pwm_channel_led3.alignment = PWM_ALIGN_LEFT;
   82780:	f241 7328 	movw	r3, #5928	; 0x1728
   82784:	4619      	mov	r1, r3
   82786:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8278a:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led3.polarity = PWM_LOW;
   8278c:	f04f 0000 	mov.w	r0, #0
   82790:	7288      	strb	r0, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led3.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82792:	f8c1 b004 	str.w	fp, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led3.ul_period = LED_PWM_PERIOD_VALUE;
   82796:	f8c1 a010 	str.w	sl, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led3.ul_duty = LED_INIT_DUTY_VALUE;
   8279a:	60cd      	str	r5, [r1, #12]
	g_pwm_channel_led3.channel = PIN_LED3_CHANNEL;
   8279c:	f04f 0a02 	mov.w	sl, #2
   827a0:	f8c1 a000 	str.w	sl, [r1]
	pwm_channel_init(PWM, &g_pwm_channel_led3);
   827a4:	4620      	mov	r0, r4
   827a6:	47c8      	blx	r9

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_LED3_CHANNEL, 0);
   827a8:	4620      	mov	r0, r4
   827aa:	4651      	mov	r1, sl
   827ac:	462a      	mov	r2, r5
   827ae:	47c0      	blx	r8
	
	/* Enable PWM channels for LEDs */
	pwm_channel_enable(PWM, PIN_LED1_CHANNEL);
   827b0:	4620      	mov	r0, r4
   827b2:	4631      	mov	r1, r6
   827b4:	f241 7501 	movw	r5, #5889	; 0x1701
   827b8:	f2c0 0508 	movt	r5, #8
   827bc:	47a8      	blx	r5
	pwm_channel_enable(PWM, PIN_LED2_CHANNEL);
   827be:	4620      	mov	r0, r4
   827c0:	4639      	mov	r1, r7
   827c2:	47a8      	blx	r5
	pwm_channel_enable(PWM, PIN_LED3_CHANNEL);
   827c4:	4620      	mov	r0, r4
   827c6:	4651      	mov	r1, sl
   827c8:	47a8      	blx	r5
}
   827ca:	b005      	add	sp, #20
   827cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000827d0 <set_user_led_colour>:

// Set user led colour
void set_user_led_colour(uint16_t red_val, uint16_t green_val, uint16_t blue_val)
{
   827d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   827d2:	4603      	mov	r3, r0
   827d4:	460e      	mov	r6, r1
   827d6:	4617      	mov	r7, r2
	pwm_channel_update_duty(PWM, &g_pwm_channel_led1, red_val);
   827d8:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   827dc:	f2c4 0409 	movt	r4, #16393	; 0x4009
   827e0:	4620      	mov	r0, r4
   827e2:	f241 7100 	movw	r1, #5888	; 0x1700
   827e6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   827ea:	461a      	mov	r2, r3
   827ec:	f241 65dd 	movw	r5, #5853	; 0x16dd
   827f0:	f2c0 0508 	movt	r5, #8
   827f4:	47a8      	blx	r5
	pwm_channel_update_duty(PWM, &g_pwm_channel_led2, blue_val);
   827f6:	4620      	mov	r0, r4
   827f8:	f241 7150 	movw	r1, #5968	; 0x1750
   827fc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82800:	463a      	mov	r2, r7
   82802:	47a8      	blx	r5
	pwm_channel_update_duty(PWM, &g_pwm_channel_led3, green_val);
   82804:	4620      	mov	r0, r4
   82806:	f241 7128 	movw	r1, #5928	; 0x1728
   8280a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8280e:	4632      	mov	r2, r6
   82810:	47a8      	blx	r5
   82812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00082814 <get_user_button_status>:
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   82814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82818:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8281c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
}

// To see if the user pressed the front panel button
RET_TYPE get_user_button_status(void)
{
	if(ioport_get_pin_level(GPIO_USR_BUTTON))
   8281e:	f480 0100 	eor.w	r1, r0, #8388608	; 0x800000
		return RETURN_NOK;
	else
		return RETURN_OK;
}
   82822:	f3c1 50c0 	ubfx	r0, r1, #23, #1
   82826:	4770      	bx	lr

00082828 <enable_12v>:
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82828:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   8282c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82830:	f44f 7200 	mov.w	r2, #512	; 0x200
   82834:	631a      	str	r2, [r3, #48]	; 0x30
   82836:	4770      	bx	lr

00082838 <disable_12v>:
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82838:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   8283c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82840:	f44f 7200 	mov.w	r2, #512	; 0x200
   82844:	635a      	str	r2, [r3, #52]	; 0x34
   82846:	4770      	bx	lr

00082848 <SCPI_ErrorInit>:
/* basic FIFO */
static fifo_t local_error_queue;



void SCPI_ErrorInit(scpi_t * context) {
   82848:	b508      	push	{r3, lr}
     * // FreeRTOS
     * context->error_queue = (scpi_error_queue_t)xQueueCreate(100, sizeof(int16_t));
     */

    /* basic FIFO */
    context->error_queue = (scpi_error_queue_t)&local_error_queue;
   8284a:	f640 433c 	movw	r3, #3132	; 0xc3c
   8284e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82852:	62c3      	str	r3, [r0, #44]	; 0x2c
    fifo_init((fifo_t *)context->error_queue);
   82854:	4618      	mov	r0, r3
   82856:	f642 2179 	movw	r1, #10873	; 0x2a79
   8285a:	f2c0 0108 	movt	r1, #8
   8285e:	4788      	blx	r1
   82860:	bd08      	pop	{r3, pc}
   82862:	bf00      	nop

00082864 <SCPI_ErrorClear>:

/**
 * Clear error queue
 * @param context - scpi context
 */
void SCPI_ErrorClear(scpi_t * context) {
   82864:	b508      	push	{r3, lr}
     * // FreeRTOS
     * xQueueReset((xQueueHandle)context->error_queue);
     */

    /* basic FIFO */
    fifo_clear((fifo_t *)context->error_queue);
   82866:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   82868:	f642 2389 	movw	r3, #10889	; 0x2a89
   8286c:	f2c0 0308 	movt	r3, #8
   82870:	4798      	blx	r3
   82872:	bd08      	pop	{r3, pc}

00082874 <SCPI_ErrorPop>:
/**
 * Pop error from queue
 * @param context - scpi context
 * @return error number
 */
int16_t SCPI_ErrorPop(scpi_t * context) {
   82874:	b500      	push	{lr}
   82876:	b083      	sub	sp, #12
    int16_t result = 0;
   82878:	a902      	add	r1, sp, #8
   8287a:	f04f 0300 	mov.w	r3, #0
   8287e:	f821 3d02 	strh.w	r3, [r1, #-2]!
     *   result = 0;
     * }
     */

    /* basic FIFO */
    fifo_remove((fifo_t *)context->error_queue, &result);
   82882:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   82884:	f642 2295 	movw	r2, #10901	; 0x2a95
   82888:	f2c0 0208 	movt	r2, #8
   8288c:	4790      	blx	r2

    return result;
}
   8288e:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   82892:	b003      	add	sp, #12
   82894:	bd00      	pop	{pc}
   82896:	bf00      	nop

00082898 <SCPI_ErrorCount>:
/**
 * Return number of errors/events in the queue
 * @param context
 * @return 
 */
int32_t SCPI_ErrorCount(scpi_t * context) {
   82898:	b500      	push	{lr}
   8289a:	b083      	sub	sp, #12
    int16_t result = 0;
   8289c:	a902      	add	r1, sp, #8
   8289e:	f04f 0300 	mov.w	r3, #0
   828a2:	f821 3d02 	strh.w	r3, [r1, #-2]!
     * // FreeRTOS
     * result = uxQueueMessagesWaiting((xQueueHandle)context->error_queue);
     */

    /* basic FIFO */
    fifo_count((fifo_t *)context->error_queue, &result);
   828a6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   828a8:	f642 3231 	movw	r2, #11057	; 0x2b31
   828ac:	f2c0 0208 	movt	r2, #8
   828b0:	4790      	blx	r2

    return result;
}
   828b2:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   828b6:	b003      	add	sp, #12
   828b8:	bd00      	pop	{pc}
   828ba:	bf00      	nop

000828bc <SCPI_ErrorPush>:
/**
 * Push error to queue
 * @param context - scpi context
 * @param err - error number
 */
void SCPI_ErrorPush(scpi_t * context, int16_t err) {
   828bc:	b538      	push	{r3, r4, r5, lr}
   828be:	4605      	mov	r5, r0
   828c0:	460c      	mov	r4, r1
     * // FreeRTOS
     * xQueueSend((xQueueHandle)context->error_queue, &err, 0);
     */

    /* basic FIFO */
    fifo_add((fifo_t *)context->error_queue, err);
   828c2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   828c4:	f642 23d5 	movw	r3, #10965	; 0x2ad5
   828c8:	f2c0 0308 	movt	r3, #8
   828cc:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   828ce:	f114 0f63 	cmn.w	r4, #99	; 0x63
   828d2:	da0c      	bge.n	828ee <SCPI_ErrorPush+0x32>
   828d4:	f114 0fc7 	cmn.w	r4, #199	; 0xc7
   828d8:	db09      	blt.n	828ee <SCPI_ErrorPush+0x32>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   828da:	4628      	mov	r0, r5
   828dc:	f04f 0102 	mov.w	r1, #2
   828e0:	f04f 0220 	mov.w	r2, #32
   828e4:	f642 43e1 	movw	r3, #11489	; 0x2ce1
   828e8:	f2c0 0308 	movt	r3, #8
   828ec:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   828ee:	f114 0fc7 	cmn.w	r4, #199	; 0xc7
   828f2:	da0c      	bge.n	8290e <SCPI_ErrorPush+0x52>
   828f4:	f514 7f96 	cmn.w	r4, #300	; 0x12c
   828f8:	dd09      	ble.n	8290e <SCPI_ErrorPush+0x52>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   828fa:	4628      	mov	r0, r5
   828fc:	f04f 0102 	mov.w	r1, #2
   82900:	f04f 0210 	mov.w	r2, #16
   82904:	f642 43e1 	movw	r3, #11489	; 0x2ce1
   82908:	f2c0 0308 	movt	r3, #8
   8290c:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   8290e:	f514 7f96 	cmn.w	r4, #300	; 0x12c
   82912:	dc0c      	bgt.n	8292e <SCPI_ErrorPush+0x72>
   82914:	f514 7fc8 	cmn.w	r4, #400	; 0x190
   82918:	dd09      	ble.n	8292e <SCPI_ErrorPush+0x72>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   8291a:	4628      	mov	r0, r5
   8291c:	f04f 0102 	mov.w	r1, #2
   82920:	f04f 0208 	mov.w	r2, #8
   82924:	f642 43e1 	movw	r3, #11489	; 0x2ce1
   82928:	f2c0 0308 	movt	r3, #8
   8292c:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   8292e:	f514 7fc8 	cmn.w	r4, #400	; 0x190
   82932:	dc0c      	bgt.n	8294e <SCPI_ErrorPush+0x92>
   82934:	f514 7ffa 	cmn.w	r4, #500	; 0x1f4
   82938:	dd09      	ble.n	8294e <SCPI_ErrorPush+0x92>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   8293a:	4628      	mov	r0, r5
   8293c:	f04f 0102 	mov.w	r1, #2
   82940:	f04f 0204 	mov.w	r2, #4
   82944:	f642 43e1 	movw	r3, #11489	; 0x2ce1
   82948:	f2c0 0308 	movt	r3, #8
   8294c:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   8294e:	f514 7ffa 	cmn.w	r4, #500	; 0x1f4
   82952:	dc0c      	bgt.n	8296e <SCPI_ErrorPush+0xb2>
   82954:	f514 7f16 	cmn.w	r4, #600	; 0x258
   82958:	dd09      	ble.n	8296e <SCPI_ErrorPush+0xb2>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   8295a:	4628      	mov	r0, r5
   8295c:	f04f 0102 	mov.w	r1, #2
   82960:	f04f 0280 	mov.w	r2, #128	; 0x80
   82964:	f642 43e1 	movw	r3, #11489	; 0x2ce1
   82968:	f2c0 0308 	movt	r3, #8
   8296c:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   8296e:	f514 7f16 	cmn.w	r4, #600	; 0x258
   82972:	dc0c      	bgt.n	8298e <SCPI_ErrorPush+0xd2>
   82974:	f514 7f2f 	cmn.w	r4, #700	; 0x2bc
   82978:	dd09      	ble.n	8298e <SCPI_ErrorPush+0xd2>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   8297a:	4628      	mov	r0, r5
   8297c:	f04f 0102 	mov.w	r1, #2
   82980:	f04f 0240 	mov.w	r2, #64	; 0x40
   82984:	f642 43e1 	movw	r3, #11489	; 0x2ce1
   82988:	f2c0 0308 	movt	r3, #8
   8298c:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   8298e:	f514 7f2f 	cmn.w	r4, #700	; 0x2bc
   82992:	dc0b      	bgt.n	829ac <SCPI_ErrorPush+0xf0>
   82994:	f514 7f48 	cmn.w	r4, #800	; 0x320
   82998:	dd08      	ble.n	829ac <SCPI_ErrorPush+0xf0>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   8299a:	4628      	mov	r0, r5
   8299c:	f04f 0102 	mov.w	r1, #2
   829a0:	460a      	mov	r2, r1
   829a2:	f642 43e1 	movw	r3, #11489	; 0x2ce1
   829a6:	f2c0 0308 	movt	r3, #8
   829aa:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   829ac:	f514 7f48 	cmn.w	r4, #800	; 0x320
   829b0:	dc0c      	bgt.n	829cc <SCPI_ErrorPush+0x110>
   829b2:	f514 7f61 	cmn.w	r4, #900	; 0x384
   829b6:	dd09      	ble.n	829cc <SCPI_ErrorPush+0x110>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   829b8:	4628      	mov	r0, r5
   829ba:	f04f 0102 	mov.w	r1, #2
   829be:	f04f 0201 	mov.w	r2, #1
   829c2:	f642 43e1 	movw	r3, #11489	; 0x2ce1
   829c6:	f2c0 0308 	movt	r3, #8
   829ca:	4798      	blx	r3
        }
    }

    if (context) {
   829cc:	b155      	cbz	r5, 829e4 <SCPI_ErrorPush+0x128>
        if (context->interface && context->interface->error) {
   829ce:	69e8      	ldr	r0, [r5, #28]
   829d0:	b120      	cbz	r0, 829dc <SCPI_ErrorPush+0x120>
   829d2:	6802      	ldr	r2, [r0, #0]
   829d4:	b112      	cbz	r2, 829dc <SCPI_ErrorPush+0x120>
            context->interface->error(context, err);
   829d6:	4628      	mov	r0, r5
   829d8:	4621      	mov	r1, r4
   829da:	4790      	blx	r2
        }

        context->cmd_error = TRUE;
   829dc:	f04f 0101 	mov.w	r1, #1
   829e0:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
   829e4:	bd38      	pop	{r3, r4, r5, pc}
   829e6:	bf00      	nop

000829e8 <SCPI_ErrorTranslate>:
 * Translate error number to string
 * @param err - error number
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
    switch (err) {
   829e8:	f110 0f6d 	cmn.w	r0, #109	; 0x6d
   829ec:	d02b      	beq.n	82a46 <SCPI_ErrorTranslate+0x5e>
   829ee:	dc09      	bgt.n	82a04 <SCPI_ErrorTranslate+0x1c>
   829f0:	f110 0f83 	cmn.w	r0, #131	; 0x83
   829f4:	d02c      	beq.n	82a50 <SCPI_ErrorTranslate+0x68>
   829f6:	f110 0f71 	cmn.w	r0, #113	; 0x71
   829fa:	d01a      	beq.n	82a32 <SCPI_ErrorTranslate+0x4a>
   829fc:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
   82a00:	d130      	bne.n	82a64 <SCPI_ErrorTranslate+0x7c>
   82a02:	e02a      	b.n	82a5a <SCPI_ErrorTranslate+0x72>
   82a04:	f110 0f67 	cmn.w	r0, #103	; 0x67
   82a08:	d00e      	beq.n	82a28 <SCPI_ErrorTranslate+0x40>
   82a0a:	dc03      	bgt.n	82a14 <SCPI_ErrorTranslate+0x2c>
   82a0c:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
   82a10:	d128      	bne.n	82a64 <SCPI_ErrorTranslate+0x7c>
   82a12:	e013      	b.n	82a3c <SCPI_ErrorTranslate+0x54>
   82a14:	f110 0f66 	cmn.w	r0, #102	; 0x66
   82a18:	d029      	beq.n	82a6e <SCPI_ErrorTranslate+0x86>
   82a1a:	2800      	cmp	r0, #0
   82a1c:	d122      	bne.n	82a64 <SCPI_ErrorTranslate+0x7c>
        case 0: return "No error";
   82a1e:	f24d 20a4 	movw	r0, #53924	; 0xd2a4
   82a22:	f2c0 0008 	movt	r0, #8
   82a26:	4770      	bx	lr
        case SCPI_ERROR_SYNTAX: return "Syntax error";
        case SCPI_ERROR_INVALID_SEPARATOR: return "Invalid separator";
   82a28:	f24d 20c0 	movw	r0, #53952	; 0xd2c0
   82a2c:	f2c0 0008 	movt	r0, #8
   82a30:	4770      	bx	lr
        case SCPI_ERROR_UNDEFINED_HEADER: return "Undefined header";
   82a32:	f24d 20d4 	movw	r0, #53972	; 0xd2d4
   82a36:	f2c0 0008 	movt	r0, #8
   82a3a:	4770      	bx	lr
        case SCPI_ERROR_PARAMETER_NOT_ALLOWED: return "Parameter not allowed";
   82a3c:	f24d 20e8 	movw	r0, #53992	; 0xd2e8
   82a40:	f2c0 0008 	movt	r0, #8
   82a44:	4770      	bx	lr
        case SCPI_ERROR_MISSING_PARAMETER: return "Missing parameter";
   82a46:	f24d 3000 	movw	r0, #54016	; 0xd300
   82a4a:	f2c0 0008 	movt	r0, #8
   82a4e:	4770      	bx	lr
        case SCPI_ERROR_INVALID_SUFFIX: return "Invalid suffix";
   82a50:	f24d 3014 	movw	r0, #54036	; 0xd314
   82a54:	f2c0 0008 	movt	r0, #8
   82a58:	4770      	bx	lr
        case SCPI_ERROR_SUFFIX_NOT_ALLOWED: return "Suffix not allowed";
   82a5a:	f24d 3024 	movw	r0, #54052	; 0xd324
   82a5e:	f2c0 0008 	movt	r0, #8
   82a62:	4770      	bx	lr
        default: return "Unknown error";
   82a64:	f24d 3038 	movw	r0, #54072	; 0xd338
   82a68:	f2c0 0008 	movt	r0, #8
   82a6c:	4770      	bx	lr
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
    switch (err) {
        case 0: return "No error";
        case SCPI_ERROR_SYNTAX: return "Syntax error";
   82a6e:	f24d 20b0 	movw	r0, #53936	; 0xd2b0
   82a72:	f2c0 0008 	movt	r0, #8
        case SCPI_ERROR_MISSING_PARAMETER: return "Missing parameter";
        case SCPI_ERROR_INVALID_SUFFIX: return "Invalid suffix";
        case SCPI_ERROR_SUFFIX_NOT_ALLOWED: return "Suffix not allowed";
        default: return "Unknown error";
    }
}
   82a76:	4770      	bx	lr

00082a78 <fifo_init>:

#include "fifo.h"

void fifo_init(fifo_t * fifo) {
    fifo->wr = 0;
   82a78:	f04f 0300 	mov.w	r3, #0
   82a7c:	8003      	strh	r3, [r0, #0]
    fifo->rd = 0;
   82a7e:	8043      	strh	r3, [r0, #2]
    fifo->size = FIFO_SIZE;
   82a80:	f04f 0110 	mov.w	r1, #16
   82a84:	8081      	strh	r1, [r0, #4]
   82a86:	4770      	bx	lr

00082a88 <fifo_clear>:
}

void fifo_clear(fifo_t * fifo) {
    fifo->wr = 0;
   82a88:	f04f 0300 	mov.w	r3, #0
   82a8c:	8003      	strh	r3, [r0, #0]
    fifo->rd = 0;
   82a8e:	8043      	strh	r3, [r0, #2]
   82a90:	4770      	bx	lr
   82a92:	bf00      	nop

00082a94 <fifo_remove>:
    fifo->wr = (fifo->wr + 1) % (fifo->size + 1);

    return TRUE;
}

bool_t fifo_remove(fifo_t * fifo, int16_t * value) {
   82a94:	b410      	push	{r4}
    /* FIFO empty? */
    if (fifo->wr == fifo->rd) {
   82a96:	8843      	ldrh	r3, [r0, #2]
   82a98:	f9b0 4000 	ldrsh.w	r4, [r0]
   82a9c:	b21a      	sxth	r2, r3
   82a9e:	4294      	cmp	r4, r2
   82aa0:	d014      	beq.n	82acc <fifo_remove+0x38>
        return FALSE;
    }

    if(value) {
   82aa2:	b119      	cbz	r1, 82aac <fifo_remove+0x18>
        *value = fifo->data[fifo->rd];
   82aa4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
   82aa8:	88d3      	ldrh	r3, [r2, #6]
   82aaa:	800b      	strh	r3, [r1, #0]
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size + 1);
   82aac:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   82ab0:	f102 0201 	add.w	r2, r2, #1
   82ab4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   82ab8:	f103 0301 	add.w	r3, r3, #1
   82abc:	fb92 f1f3 	sdiv	r1, r2, r3
   82ac0:	fb03 2211 	mls	r2, r3, r1, r2
   82ac4:	8042      	strh	r2, [r0, #2]

    return TRUE;
   82ac6:	f04f 0001 	mov.w	r0, #1
   82aca:	e001      	b.n	82ad0 <fifo_remove+0x3c>
}

bool_t fifo_remove(fifo_t * fifo, int16_t * value) {
    /* FIFO empty? */
    if (fifo->wr == fifo->rd) {
        return FALSE;
   82acc:	f04f 0000 	mov.w	r0, #0
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size + 1);

    return TRUE;
}
   82ad0:	bc10      	pop	{r4}
   82ad2:	4770      	bx	lr

00082ad4 <fifo_add>:
void fifo_clear(fifo_t * fifo) {
    fifo->wr = 0;
    fifo->rd = 0;
}

bool_t fifo_add(fifo_t * fifo, int16_t value) {
   82ad4:	b538      	push	{r3, r4, r5, lr}
   82ad6:	4604      	mov	r4, r0
   82ad8:	460d      	mov	r5, r1
    /* FIFO full? */
    if (fifo->wr == ((fifo->rd + fifo->size) % (fifo->size + 1))) {
   82ada:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   82ade:	f9b0 1000 	ldrsh.w	r1, [r0]
   82ae2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   82ae6:	18d2      	adds	r2, r2, r3
   82ae8:	f103 0301 	add.w	r3, r3, #1
   82aec:	fb92 f0f3 	sdiv	r0, r2, r3
   82af0:	fb03 2310 	mls	r3, r3, r0, r2
   82af4:	4299      	cmp	r1, r3
   82af6:	d107      	bne.n	82b08 <fifo_add+0x34>
        fifo_remove(fifo, NULL);
   82af8:	4620      	mov	r0, r4
   82afa:	f04f 0100 	mov.w	r1, #0
   82afe:	f642 2295 	movw	r2, #10901	; 0x2a95
   82b02:	f2c0 0208 	movt	r2, #8
   82b06:	4790      	blx	r2
    }

    fifo->data[fifo->wr] = value;
   82b08:	f9b4 0000 	ldrsh.w	r0, [r4]
   82b0c:	eb04 0140 	add.w	r1, r4, r0, lsl #1
   82b10:	80cd      	strh	r5, [r1, #6]
    fifo->wr = (fifo->wr + 1) % (fifo->size + 1);
   82b12:	f100 0001 	add.w	r0, r0, #1
   82b16:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   82b1a:	f103 0301 	add.w	r3, r3, #1
   82b1e:	fb90 f2f3 	sdiv	r2, r0, r3
   82b22:	fb03 0012 	mls	r0, r3, r2, r0
   82b26:	8020      	strh	r0, [r4, #0]

    return TRUE;
}
   82b28:	f04f 0001 	mov.w	r0, #1
   82b2c:	bd38      	pop	{r3, r4, r5, pc}
   82b2e:	bf00      	nop

00082b30 <fifo_count>:

    return TRUE;
}

bool_t fifo_count(fifo_t * fifo, int16_t * value) {
    *value = fifo->wr - fifo->rd;
   82b30:	8802      	ldrh	r2, [r0, #0]
   82b32:	8843      	ldrh	r3, [r0, #2]
   82b34:	1ad2      	subs	r2, r2, r3
   82b36:	b292      	uxth	r2, r2
   82b38:	b293      	uxth	r3, r2
   82b3a:	800b      	strh	r3, [r1, #0]
    if (*value < 0) {
   82b3c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   82b40:	d004      	beq.n	82b4c <fifo_count+0x1c>
        *value += (fifo->size + 1);
   82b42:	8880      	ldrh	r0, [r0, #4]
   82b44:	f100 0001 	add.w	r0, r0, #1
   82b48:	1812      	adds	r2, r2, r0
   82b4a:	800a      	strh	r2, [r1, #0]
    }
    return TRUE;
}
   82b4c:	f04f 0001 	mov.w	r0, #1
   82b50:	4770      	bx	lr
   82b52:	bf00      	nop

00082b54 <SCPI_RegGet>:
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
    if ((name < SCPI_REG_COUNT) && (context->registers != NULL)) {
   82b54:	2907      	cmp	r1, #7
   82b56:	d804      	bhi.n	82b62 <SCPI_RegGet+0xe>
   82b58:	6b03      	ldr	r3, [r0, #48]	; 0x30
   82b5a:	b12b      	cbz	r3, 82b68 <SCPI_RegGet+0x14>
        return context->registers[name];
   82b5c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
   82b60:	4770      	bx	lr
    } else {
        return 0;
   82b62:	f04f 0000 	mov.w	r0, #0
   82b66:	4770      	bx	lr
   82b68:	f04f 0000 	mov.w	r0, #0
    }
}
   82b6c:	4770      	bx	lr
   82b6e:	bf00      	nop

00082b70 <SCPI_RegClearBits>:
/**
 * Clear register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegClearBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
   82b70:	b570      	push	{r4, r5, r6, lr}
   82b72:	4605      	mov	r5, r0
   82b74:	460c      	mov	r4, r1
   82b76:	4616      	mov	r6, r2
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
   82b78:	f642 3355 	movw	r3, #11093	; 0x2b55
   82b7c:	f2c0 0308 	movt	r3, #8
   82b80:	4798      	blx	r3
   82b82:	ea20 0206 	bic.w	r2, r0, r6
   82b86:	4628      	mov	r0, r5
   82b88:	4621      	mov	r1, r4
   82b8a:	b292      	uxth	r2, r2
   82b8c:	f642 33cd 	movw	r3, #11213	; 0x2bcd
   82b90:	f2c0 0308 	movt	r3, #8
   82b94:	4798      	blx	r3
   82b96:	bd70      	pop	{r4, r5, r6, pc}

00082b98 <regUpdateSTB>:
 * @param context
 * @param val value of register
 * @param mask name of mask register (enable register)
 * @param stbBits bits to clear or set in STB
 */
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
   82b98:	b570      	push	{r4, r5, r6, lr}
   82b9a:	4605      	mov	r5, r0
   82b9c:	460e      	mov	r6, r1
   82b9e:	461c      	mov	r4, r3
    if (val & SCPI_RegGet(context, mask)) {
   82ba0:	4611      	mov	r1, r2
   82ba2:	f642 3355 	movw	r3, #11093	; 0x2b55
   82ba6:	f2c0 0308 	movt	r3, #8
   82baa:	4798      	blx	r3
   82bac:	4230      	tst	r0, r6
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
   82bae:	4628      	mov	r0, r5
   82bb0:	f04f 0100 	mov.w	r1, #0
   82bb4:	4622      	mov	r2, r4
   82bb6:	bf19      	ittee	ne
   82bb8:	f642 43e1 	movwne	r3, #11489	; 0x2ce1
   82bbc:	f2c0 0308 	movtne	r3, #8
    } else {
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
   82bc0:	f642 3371 	movweq	r3, #11121	; 0x2b71
   82bc4:	f2c0 0308 	movteq	r3, #8
   82bc8:	4798      	blx	r3
   82bca:	bd70      	pop	{r4, r5, r6, pc}

00082bcc <SCPI_RegSet>:
/**
 * Set register value
 * @param name - register name
 * @param val - new value
 */
void SCPI_RegSet(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t val) {
   82bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82bce:	4605      	mov	r5, r0
   82bd0:	460c      	mov	r4, r1
   82bd2:	4616      	mov	r6, r2
    bool_t srq = FALSE;
    scpi_reg_val_t mask;
    scpi_reg_val_t old_val;

    if ((name >= SCPI_REG_COUNT) || (context->registers == NULL)) {
   82bd4:	2907      	cmp	r1, #7
   82bd6:	f200 8081 	bhi.w	82cdc <SCPI_RegSet+0x110>
   82bda:	6b03      	ldr	r3, [r0, #48]	; 0x30
   82bdc:	2b00      	cmp	r3, #0
   82bde:	d07d      	beq.n	82cdc <SCPI_RegSet+0x110>
        return;
    }
    
    /* store old register value */
    old_val = context->registers[name];
   82be0:	f833 7011 	ldrh.w	r7, [r3, r1, lsl #1]

    /* set register value */
    context->registers[name] = val;
   82be4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

    /** @TODO: remove recutsion */
    switch (name) {
   82be8:	2907      	cmp	r1, #7
   82bea:	d857      	bhi.n	82c9c <SCPI_RegSet+0xd0>
   82bec:	e8df f001 	tbb	[pc, r1]
   82bf0:	281d1504 	.word	0x281d1504
   82bf4:	3b304e43 	.word	0x3b304e43
        case SCPI_REG_STB:
            mask = SCPI_RegGet(context, SCPI_REG_SRE);
   82bf8:	f04f 0101 	mov.w	r1, #1
   82bfc:	f642 3255 	movw	r2, #11093	; 0x2b55
   82c00:	f2c0 0208 	movt	r2, #8
   82c04:	4790      	blx	r2
            mask &= ~STB_SRQ;
   82c06:	f64f 71bf 	movw	r1, #65471	; 0xffbf
   82c0a:	4031      	ands	r1, r6
            if (val & mask) {
   82c0c:	4201      	tst	r1, r0
   82c0e:	d052      	beq.n	82cb6 <SCPI_RegSet+0xea>
                val |= STB_SRQ;
   82c10:	f046 0640 	orr.w	r6, r6, #64	; 0x40
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
   82c14:	42b7      	cmp	r7, r6
   82c16:	d153      	bne.n	82cc0 <SCPI_RegSet+0xf4>
   82c18:	e04e      	b.n	82cb8 <SCPI_RegSet+0xec>
            } else {
                val &= ~STB_SRQ;
            }
            break;
        case SCPI_REG_SRE:
            regUpdate(context, SCPI_REG_STB);
   82c1a:	f04f 0100 	mov.w	r1, #0
   82c1e:	f642 5309 	movw	r3, #11529	; 0x2d09
   82c22:	f2c0 0308 	movt	r3, #8
   82c26:	4798      	blx	r3
            break;
   82c28:	e046      	b.n	82cb8 <SCPI_RegSet+0xec>
        case SCPI_REG_ESR:
            regUpdateSTB(context, val, SCPI_REG_ESE, STB_ESR);
   82c2a:	4611      	mov	r1, r2
   82c2c:	f04f 0203 	mov.w	r2, #3
   82c30:	f04f 0320 	mov.w	r3, #32
   82c34:	f642 3799 	movw	r7, #11161	; 0x2b99
   82c38:	f2c0 0708 	movt	r7, #8
   82c3c:	47b8      	blx	r7
            break;
   82c3e:	e03b      	b.n	82cb8 <SCPI_RegSet+0xec>
        case SCPI_REG_ESE:
            regUpdate(context, SCPI_REG_ESR);
   82c40:	f04f 0102 	mov.w	r1, #2
   82c44:	f642 5209 	movw	r2, #11529	; 0x2d09
   82c48:	f2c0 0208 	movt	r2, #8
   82c4c:	4790      	blx	r2
            break;
   82c4e:	e033      	b.n	82cb8 <SCPI_RegSet+0xec>
        case SCPI_REG_QUES:
            regUpdateSTB(context, val, SCPI_REG_QUESE, STB_QES);
   82c50:	4611      	mov	r1, r2
   82c52:	f04f 0207 	mov.w	r2, #7
   82c56:	f04f 0308 	mov.w	r3, #8
   82c5a:	f642 3799 	movw	r7, #11161	; 0x2b99
   82c5e:	f2c0 0708 	movt	r7, #8
   82c62:	47b8      	blx	r7
            break;
   82c64:	e028      	b.n	82cb8 <SCPI_RegSet+0xec>
        case SCPI_REG_QUESE:
            regUpdate(context, SCPI_REG_QUES);
   82c66:	f04f 0106 	mov.w	r1, #6
   82c6a:	f642 5209 	movw	r2, #11529	; 0x2d09
   82c6e:	f2c0 0208 	movt	r2, #8
   82c72:	4790      	blx	r2
            break;
   82c74:	e020      	b.n	82cb8 <SCPI_RegSet+0xec>
        case SCPI_REG_OPER:
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
   82c76:	4611      	mov	r1, r2
   82c78:	f04f 0205 	mov.w	r2, #5
   82c7c:	f04f 0380 	mov.w	r3, #128	; 0x80
   82c80:	f642 3799 	movw	r7, #11161	; 0x2b99
   82c84:	f2c0 0708 	movt	r7, #8
   82c88:	47b8      	blx	r7
            break;
   82c8a:	e015      	b.n	82cb8 <SCPI_RegSet+0xec>
        case SCPI_REG_OPERE:
            regUpdate(context, SCPI_REG_OPER);
   82c8c:	f04f 0104 	mov.w	r1, #4
   82c90:	f642 5309 	movw	r3, #11529	; 0x2d09
   82c94:	f2c0 0308 	movt	r3, #8
   82c98:	4798      	blx	r3
            break;
   82c9a:	e00d      	b.n	82cb8 <SCPI_RegSet+0xec>
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
   82c9c:	6b00      	ldr	r0, [r0, #48]	; 0x30
   82c9e:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
   82ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
    if (context && context->interface && context->interface->control) {
   82ca4:	69e9      	ldr	r1, [r5, #28]
   82ca6:	b1c9      	cbz	r1, 82cdc <SCPI_RegSet+0x110>
   82ca8:	688b      	ldr	r3, [r1, #8]
   82caa:	b1bb      	cbz	r3, 82cdc <SCPI_RegSet+0x110>
        return context->interface->control(context, ctrl, val);
   82cac:	4628      	mov	r0, r5
   82cae:	f04f 0101 	mov.w	r1, #1
   82cb2:	4798      	blx	r3
   82cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
                    srq = TRUE;
                }
            } else {
                val &= ~STB_SRQ;
   82cb6:	460e      	mov	r6, r1
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
   82cb8:	6b28      	ldr	r0, [r5, #48]	; 0x30
   82cba:	f820 6014 	strh.w	r6, [r0, r4, lsl #1]
   82cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82cc0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82cc2:	f823 6014 	strh.w	r6, [r3, r4, lsl #1]

    if (srq) {
        writeControl(context, SCPI_CTRL_SRQ, SCPI_RegGet(context, SCPI_REG_STB));
   82cc6:	4628      	mov	r0, r5
   82cc8:	f04f 0100 	mov.w	r1, #0
   82ccc:	f642 3255 	movw	r2, #11093	; 0x2b55
   82cd0:	f2c0 0208 	movt	r2, #8
   82cd4:	4790      	blx	r2
   82cd6:	4602      	mov	r2, r0
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
    if (context && context->interface && context->interface->control) {
   82cd8:	2d00      	cmp	r5, #0
   82cda:	d1e3      	bne.n	82ca4 <SCPI_RegSet+0xd8>
   82cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82cde:	bf00      	nop

00082ce0 <SCPI_RegSetBits>:
/**
 * Set register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegSetBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
   82ce0:	b570      	push	{r4, r5, r6, lr}
   82ce2:	4605      	mov	r5, r0
   82ce4:	460c      	mov	r4, r1
   82ce6:	4616      	mov	r6, r2
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
   82ce8:	f642 3355 	movw	r3, #11093	; 0x2b55
   82cec:	f2c0 0308 	movt	r3, #8
   82cf0:	4798      	blx	r3
   82cf2:	ea40 0206 	orr.w	r2, r0, r6
   82cf6:	4628      	mov	r0, r5
   82cf8:	4621      	mov	r1, r4
   82cfa:	b292      	uxth	r2, r2
   82cfc:	f642 33cd 	movw	r3, #11213	; 0x2bcd
   82d00:	f2c0 0308 	movt	r3, #8
   82d04:	4798      	blx	r3
   82d06:	bd70      	pop	{r4, r5, r6, pc}

00082d08 <regUpdate>:
/**
 * Update register value
 * @param context
 * @param name - register name
 */
static void regUpdate(scpi_t * context, scpi_reg_name_t name) {
   82d08:	b538      	push	{r3, r4, r5, lr}
   82d0a:	4605      	mov	r5, r0
   82d0c:	460c      	mov	r4, r1
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
   82d0e:	f642 3355 	movw	r3, #11093	; 0x2b55
   82d12:	f2c0 0308 	movt	r3, #8
   82d16:	4798      	blx	r3
   82d18:	4602      	mov	r2, r0
   82d1a:	4628      	mov	r0, r5
   82d1c:	4621      	mov	r1, r4
   82d1e:	f642 33cd 	movw	r3, #11213	; 0x2bcd
   82d22:	f2c0 0308 	movt	r3, #8
   82d26:	4798      	blx	r3
   82d28:	bd38      	pop	{r3, r4, r5, pc}
   82d2a:	bf00      	nop

00082d2c <SCPI_EventClear>:

/**
 * Clear event register
 * @param context
 */
void SCPI_EventClear(scpi_t * context) {
   82d2c:	b508      	push	{r3, lr}
    /* TODO */
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
   82d2e:	f04f 0102 	mov.w	r1, #2
   82d32:	f04f 0200 	mov.w	r2, #0
   82d36:	f642 33cd 	movw	r3, #11213	; 0x2bcd
   82d3a:	f2c0 0308 	movt	r3, #8
   82d3e:	4798      	blx	r3
   82d40:	bd08      	pop	{r3, pc}
   82d42:	bf00      	nop

00082d44 <SCPI_CoreCls>:
 * *CLS - This command clears all status data structures in a device. 
 *        For a device which minimally complies with SCPI. (SCPI std 4.1.3.2)
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreCls(scpi_t * context) {
   82d44:	b538      	push	{r3, r4, r5, lr}
   82d46:	4604      	mov	r4, r0
    SCPI_EventClear(context);
   82d48:	f642 532d 	movw	r3, #11565	; 0x2d2d
   82d4c:	f2c0 0308 	movt	r3, #8
   82d50:	4798      	blx	r3
    SCPI_ErrorClear(context);
   82d52:	4620      	mov	r0, r4
   82d54:	f642 0165 	movw	r1, #10341	; 0x2865
   82d58:	f2c0 0108 	movt	r1, #8
   82d5c:	4788      	blx	r1
    SCPI_RegSet(context, SCPI_REG_OPER, 0);
   82d5e:	4620      	mov	r0, r4
   82d60:	f04f 0104 	mov.w	r1, #4
   82d64:	f04f 0200 	mov.w	r2, #0
   82d68:	f642 35cd 	movw	r5, #11213	; 0x2bcd
   82d6c:	f2c0 0508 	movt	r5, #8
   82d70:	47a8      	blx	r5
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
   82d72:	4620      	mov	r0, r4
   82d74:	f04f 0106 	mov.w	r1, #6
   82d78:	f04f 0200 	mov.w	r2, #0
   82d7c:	47a8      	blx	r5
    return SCPI_RES_OK;
}
   82d7e:	f04f 0001 	mov.w	r0, #1
   82d82:	bd38      	pop	{r3, r4, r5, pc}

00082d84 <SCPI_CoreEse>:
/**
 * *ESE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEse(scpi_t * context) {
   82d84:	b510      	push	{r4, lr}
   82d86:	b082      	sub	sp, #8
   82d88:	4604      	mov	r4, r0
    int32_t new_ESE;
    if (SCPI_ParamInt(context, &new_ESE, TRUE)) {
   82d8a:	a901      	add	r1, sp, #4
   82d8c:	f04f 0201 	mov.w	r2, #1
   82d90:	f243 5369 	movw	r3, #13673	; 0x3569
   82d94:	f2c0 0308 	movt	r3, #8
   82d98:	4798      	blx	r3
   82d9a:	b148      	cbz	r0, 82db0 <SCPI_CoreEse+0x2c>
        SCPI_RegSet(context, SCPI_REG_ESE, new_ESE);
   82d9c:	4620      	mov	r0, r4
   82d9e:	f04f 0103 	mov.w	r1, #3
   82da2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   82da6:	f642 33cd 	movw	r3, #11213	; 0x2bcd
   82daa:	f2c0 0308 	movt	r3, #8
   82dae:	4798      	blx	r3
    }
    return SCPI_RES_OK;
}
   82db0:	f04f 0001 	mov.w	r0, #1
   82db4:	b002      	add	sp, #8
   82db6:	bd10      	pop	{r4, pc}

00082db8 <SCPI_CoreEseQ>:
/**
 * *ESE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEseQ(scpi_t * context) {
   82db8:	b510      	push	{r4, lr}
   82dba:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_ESE));
   82dbc:	f04f 0103 	mov.w	r1, #3
   82dc0:	f642 3355 	movw	r3, #11093	; 0x2b55
   82dc4:	f2c0 0308 	movt	r3, #8
   82dc8:	4798      	blx	r3
   82dca:	4601      	mov	r1, r0
   82dcc:	4620      	mov	r0, r4
   82dce:	f243 4251 	movw	r2, #13393	; 0x3451
   82dd2:	f2c0 0208 	movt	r2, #8
   82dd6:	4790      	blx	r2
    return SCPI_RES_OK;
}
   82dd8:	f04f 0001 	mov.w	r0, #1
   82ddc:	bd10      	pop	{r4, pc}
   82dde:	bf00      	nop

00082de0 <SCPI_CoreEsrQ>:
/**
 * *ESR?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEsrQ(scpi_t * context) {
   82de0:	b510      	push	{r4, lr}
   82de2:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_ESR));
   82de4:	f04f 0102 	mov.w	r1, #2
   82de8:	f642 3355 	movw	r3, #11093	; 0x2b55
   82dec:	f2c0 0308 	movt	r3, #8
   82df0:	4798      	blx	r3
   82df2:	4601      	mov	r1, r0
   82df4:	4620      	mov	r0, r4
   82df6:	f243 4251 	movw	r2, #13393	; 0x3451
   82dfa:	f2c0 0208 	movt	r2, #8
   82dfe:	4790      	blx	r2
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
   82e00:	4620      	mov	r0, r4
   82e02:	f04f 0102 	mov.w	r1, #2
   82e06:	f04f 0200 	mov.w	r2, #0
   82e0a:	f642 33cd 	movw	r3, #11213	; 0x2bcd
   82e0e:	f2c0 0308 	movt	r3, #8
   82e12:	4798      	blx	r3
    return SCPI_RES_OK;
}
   82e14:	f04f 0001 	mov.w	r0, #1
   82e18:	bd10      	pop	{r4, pc}
   82e1a:	bf00      	nop

00082e1c <SCPI_CoreIdnQ>:
/**
 * *IDN?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreIdnQ(scpi_t * context) {
   82e1c:	b538      	push	{r3, r4, r5, lr}
   82e1e:	4605      	mov	r5, r0
    SCPI_ResultString(context, SCPI_MANUFACTURE);
   82e20:	f24d 3148 	movw	r1, #54088	; 0xd348
   82e24:	f2c0 0108 	movt	r1, #8
   82e28:	f243 4411 	movw	r4, #13329	; 0x3411
   82e2c:	f2c0 0408 	movt	r4, #8
   82e30:	47a0      	blx	r4
    SCPI_ResultString(context, SCPI_DEV_NAME);
   82e32:	4628      	mov	r0, r5
   82e34:	f24d 3150 	movw	r1, #54096	; 0xd350
   82e38:	f2c0 0108 	movt	r1, #8
   82e3c:	47a0      	blx	r4
    SCPI_ResultString(context, SCPI_DEV_VERSION);
   82e3e:	4628      	mov	r0, r5
   82e40:	f24d 3170 	movw	r1, #54128	; 0xd370
   82e44:	f2c0 0108 	movt	r1, #8
   82e48:	47a0      	blx	r4
    return SCPI_RES_OK;
}
   82e4a:	f04f 0001 	mov.w	r0, #1
   82e4e:	bd38      	pop	{r3, r4, r5, pc}

00082e50 <SCPI_CoreOpc>:
/**
 * *OPC
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpc(scpi_t * context) {
   82e50:	b508      	push	{r3, lr}
    SCPI_RegSetBits(context, SCPI_REG_ESR, ESR_OPC);
   82e52:	f04f 0102 	mov.w	r1, #2
   82e56:	f04f 0201 	mov.w	r2, #1
   82e5a:	f642 43e1 	movw	r3, #11489	; 0x2ce1
   82e5e:	f2c0 0308 	movt	r3, #8
   82e62:	4798      	blx	r3
    return SCPI_RES_OK;
}
   82e64:	f04f 0001 	mov.w	r0, #1
   82e68:	bd08      	pop	{r3, pc}
   82e6a:	bf00      	nop

00082e6c <SCPI_CoreOpcQ>:
/**
 * *OPC?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpcQ(scpi_t * context) {
   82e6c:	b508      	push	{r3, lr}
    /* Operation is always completed */
    SCPI_ResultInt(context, 1);
   82e6e:	f04f 0101 	mov.w	r1, #1
   82e72:	f243 4351 	movw	r3, #13393	; 0x3451
   82e76:	f2c0 0308 	movt	r3, #8
   82e7a:	4798      	blx	r3
    return SCPI_RES_OK;
}
   82e7c:	f04f 0001 	mov.w	r0, #1
   82e80:	bd08      	pop	{r3, pc}
   82e82:	bf00      	nop

00082e84 <SCPI_CoreRst>:
/**
 * *RST
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreRst(scpi_t * context) {
   82e84:	b508      	push	{r3, lr}
    if (context && context->interface && context->interface->reset) {
   82e86:	b128      	cbz	r0, 82e94 <SCPI_CoreRst+0x10>
   82e88:	69c3      	ldr	r3, [r0, #28]
   82e8a:	b133      	cbz	r3, 82e9a <SCPI_CoreRst+0x16>
   82e8c:	6919      	ldr	r1, [r3, #16]
   82e8e:	b139      	cbz	r1, 82ea0 <SCPI_CoreRst+0x1c>
        return context->interface->reset(context);
   82e90:	4788      	blx	r1
   82e92:	e007      	b.n	82ea4 <SCPI_CoreRst+0x20>
    }
    return SCPI_RES_OK;
   82e94:	f04f 0001 	mov.w	r0, #1
   82e98:	e004      	b.n	82ea4 <SCPI_CoreRst+0x20>
   82e9a:	f04f 0001 	mov.w	r0, #1
   82e9e:	e001      	b.n	82ea4 <SCPI_CoreRst+0x20>
   82ea0:	f04f 0001 	mov.w	r0, #1
}
   82ea4:	b240      	sxtb	r0, r0
   82ea6:	bd08      	pop	{r3, pc}

00082ea8 <SCPI_CoreSre>:
/**
 * *SRE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSre(scpi_t * context) {
   82ea8:	b510      	push	{r4, lr}
   82eaa:	b082      	sub	sp, #8
   82eac:	4604      	mov	r4, r0
    int32_t new_SRE;
    if (SCPI_ParamInt(context, &new_SRE, TRUE)) {
   82eae:	a901      	add	r1, sp, #4
   82eb0:	f04f 0201 	mov.w	r2, #1
   82eb4:	f243 5369 	movw	r3, #13673	; 0x3569
   82eb8:	f2c0 0308 	movt	r3, #8
   82ebc:	4798      	blx	r3
   82ebe:	b148      	cbz	r0, 82ed4 <SCPI_CoreSre+0x2c>
        SCPI_RegSet(context, SCPI_REG_SRE, new_SRE);
   82ec0:	4620      	mov	r0, r4
   82ec2:	f04f 0101 	mov.w	r1, #1
   82ec6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   82eca:	f642 33cd 	movw	r3, #11213	; 0x2bcd
   82ece:	f2c0 0308 	movt	r3, #8
   82ed2:	4798      	blx	r3
    }
    return SCPI_RES_OK;
}
   82ed4:	f04f 0001 	mov.w	r0, #1
   82ed8:	b002      	add	sp, #8
   82eda:	bd10      	pop	{r4, pc}

00082edc <SCPI_CoreSreQ>:
/**
 * *SRE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSreQ(scpi_t * context) {
   82edc:	b510      	push	{r4, lr}
   82ede:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_SRE));
   82ee0:	f04f 0101 	mov.w	r1, #1
   82ee4:	f642 3355 	movw	r3, #11093	; 0x2b55
   82ee8:	f2c0 0308 	movt	r3, #8
   82eec:	4798      	blx	r3
   82eee:	4601      	mov	r1, r0
   82ef0:	4620      	mov	r0, r4
   82ef2:	f243 4251 	movw	r2, #13393	; 0x3451
   82ef6:	f2c0 0208 	movt	r2, #8
   82efa:	4790      	blx	r2
    return SCPI_RES_OK;
}
   82efc:	f04f 0001 	mov.w	r0, #1
   82f00:	bd10      	pop	{r4, pc}
   82f02:	bf00      	nop

00082f04 <SCPI_CoreStbQ>:
/**
 * *STB?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreStbQ(scpi_t * context) {
   82f04:	b510      	push	{r4, lr}
   82f06:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_STB));
   82f08:	f04f 0100 	mov.w	r1, #0
   82f0c:	f642 3355 	movw	r3, #11093	; 0x2b55
   82f10:	f2c0 0308 	movt	r3, #8
   82f14:	4798      	blx	r3
   82f16:	4601      	mov	r1, r0
   82f18:	4620      	mov	r0, r4
   82f1a:	f243 4251 	movw	r2, #13393	; 0x3451
   82f1e:	f2c0 0208 	movt	r2, #8
   82f22:	4790      	blx	r2
    return SCPI_RES_OK;
}
   82f24:	f04f 0001 	mov.w	r0, #1
   82f28:	bd10      	pop	{r4, pc}
   82f2a:	bf00      	nop

00082f2c <SCPI_CoreTstQ>:
/**
 * *TST?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreTstQ(scpi_t * context) {
   82f2c:	b510      	push	{r4, lr}
    int result = 0;
    if (context && context->interface && context->interface->test) {
   82f2e:	4604      	mov	r4, r0
   82f30:	b130      	cbz	r0, 82f40 <SCPI_CoreTstQ+0x14>
   82f32:	69c3      	ldr	r3, [r0, #28]
   82f34:	b13b      	cbz	r3, 82f46 <SCPI_CoreTstQ+0x1a>
   82f36:	6959      	ldr	r1, [r3, #20]
   82f38:	b141      	cbz	r1, 82f4c <SCPI_CoreTstQ+0x20>
        result = context->interface->test(context);
   82f3a:	4788      	blx	r1
   82f3c:	4601      	mov	r1, r0
   82f3e:	e007      	b.n	82f50 <SCPI_CoreTstQ+0x24>
 * *TST?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreTstQ(scpi_t * context) {
    int result = 0;
   82f40:	f04f 0100 	mov.w	r1, #0
   82f44:	e004      	b.n	82f50 <SCPI_CoreTstQ+0x24>
   82f46:	f04f 0100 	mov.w	r1, #0
   82f4a:	e001      	b.n	82f50 <SCPI_CoreTstQ+0x24>
   82f4c:	f04f 0100 	mov.w	r1, #0
    if (context && context->interface && context->interface->test) {
        result = context->interface->test(context);
    }
    SCPI_ResultInt(context, result);
   82f50:	4620      	mov	r0, r4
   82f52:	f243 4251 	movw	r2, #13393	; 0x3451
   82f56:	f2c0 0208 	movt	r2, #8
   82f5a:	4790      	blx	r2
    return SCPI_RES_OK;
}
   82f5c:	f04f 0001 	mov.w	r0, #1
   82f60:	bd10      	pop	{r4, pc}
   82f62:	bf00      	nop

00082f64 <SCPI_CoreWai>:
 */
scpi_result_t SCPI_CoreWai(scpi_t * context) {
    (void) context;
    /* NOP */
    return SCPI_RES_OK;
}
   82f64:	f04f 0001 	mov.w	r0, #1
   82f68:	4770      	bx	lr
   82f6a:	bf00      	nop

00082f6c <SCPI_StubQ>:
/**
 * Query command stub function
 * @param context
 * @return 
 */
scpi_result_t SCPI_StubQ(scpi_t * context) {
   82f6c:	b508      	push	{r3, lr}
    SCPI_ResultString(context, "");
   82f6e:	f24d 61b4 	movw	r1, #54964	; 0xd6b4
   82f72:	f2c0 0108 	movt	r1, #8
   82f76:	f243 4311 	movw	r3, #13329	; 0x3411
   82f7a:	f2c0 0308 	movt	r3, #8
   82f7e:	4798      	blx	r3
    return SCPI_RES_OK;
}
   82f80:	f04f 0001 	mov.w	r0, #1
   82f84:	bd08      	pop	{r3, pc}
   82f86:	bf00      	nop

00082f88 <SCPI_SystemVersionQ>:
/**
 * SYSTem:VERSion?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemVersionQ(scpi_t * context) {
   82f88:	b508      	push	{r3, lr}
    SCPI_ResultString(context, SCPI_DEV_VERSION);
   82f8a:	f24d 3170 	movw	r1, #54128	; 0xd370
   82f8e:	f2c0 0108 	movt	r1, #8
   82f92:	f243 4311 	movw	r3, #13329	; 0x3411
   82f96:	f2c0 0308 	movt	r3, #8
   82f9a:	4798      	blx	r3
    return SCPI_RES_OK;
}
   82f9c:	f04f 0001 	mov.w	r0, #1
   82fa0:	bd08      	pop	{r3, pc}
   82fa2:	bf00      	nop

00082fa4 <SCPI_SystemErrorNextQ>:
/**
 * SYSTem:ERRor[:NEXT]?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemErrorNextQ(scpi_t * context) {
   82fa4:	b538      	push	{r3, r4, r5, lr}
   82fa6:	4604      	mov	r4, r0
    int16_t err = SCPI_ErrorPop(context);
   82fa8:	f642 0375 	movw	r3, #10357	; 0x2875
   82fac:	f2c0 0308 	movt	r3, #8
   82fb0:	4798      	blx	r3
   82fb2:	4605      	mov	r5, r0

    SCPI_ResultInt(context, err);
   82fb4:	4620      	mov	r0, r4
   82fb6:	4629      	mov	r1, r5
   82fb8:	f243 4251 	movw	r2, #13393	; 0x3451
   82fbc:	f2c0 0208 	movt	r2, #8
   82fc0:	4790      	blx	r2
    SCPI_ResultText(context, SCPI_ErrorTranslate(err));
   82fc2:	4628      	mov	r0, r5
   82fc4:	f642 11e9 	movw	r1, #10729	; 0x29e9
   82fc8:	f2c0 0108 	movt	r1, #8
   82fcc:	4788      	blx	r1
   82fce:	4601      	mov	r1, r0
   82fd0:	4620      	mov	r0, r4
   82fd2:	f243 4399 	movw	r3, #13465	; 0x3499
   82fd6:	f2c0 0308 	movt	r3, #8
   82fda:	4798      	blx	r3

    return SCPI_RES_OK;
}
   82fdc:	f04f 0001 	mov.w	r0, #1
   82fe0:	bd38      	pop	{r3, r4, r5, pc}
   82fe2:	bf00      	nop

00082fe4 <SCPI_SystemErrorCountQ>:
/**
 * SYSTem:ERRor:COUNt?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemErrorCountQ(scpi_t * context) {
   82fe4:	b510      	push	{r4, lr}
   82fe6:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_ErrorCount(context));
   82fe8:	f642 0399 	movw	r3, #10393	; 0x2899
   82fec:	f2c0 0308 	movt	r3, #8
   82ff0:	4798      	blx	r3
   82ff2:	4601      	mov	r1, r0
   82ff4:	4620      	mov	r0, r4
   82ff6:	f243 4251 	movw	r2, #13393	; 0x3451
   82ffa:	f2c0 0208 	movt	r2, #8
   82ffe:	4790      	blx	r2

    return SCPI_RES_OK;
}
   83000:	f04f 0001 	mov.w	r0, #1
   83004:	bd10      	pop	{r4, pc}
   83006:	bf00      	nop

00083008 <SCPI_StatusQuestionableEventQ>:
/**
 * STATus:QUEStionable[:EVENt]?
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusQuestionableEventQ(scpi_t * context) {
   83008:	b510      	push	{r4, lr}
   8300a:	4604      	mov	r4, r0
    /* return value */
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_QUES));
   8300c:	f04f 0106 	mov.w	r1, #6
   83010:	f642 3355 	movw	r3, #11093	; 0x2b55
   83014:	f2c0 0308 	movt	r3, #8
   83018:	4798      	blx	r3
   8301a:	4601      	mov	r1, r0
   8301c:	4620      	mov	r0, r4
   8301e:	f243 4251 	movw	r2, #13393	; 0x3451
   83022:	f2c0 0208 	movt	r2, #8
   83026:	4790      	blx	r2

    /* clear register */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
   83028:	4620      	mov	r0, r4
   8302a:	f04f 0106 	mov.w	r1, #6
   8302e:	f04f 0200 	mov.w	r2, #0
   83032:	f642 33cd 	movw	r3, #11213	; 0x2bcd
   83036:	f2c0 0308 	movt	r3, #8
   8303a:	4798      	blx	r3

    return SCPI_RES_OK;
}
   8303c:	f04f 0001 	mov.w	r0, #1
   83040:	bd10      	pop	{r4, pc}
   83042:	bf00      	nop

00083044 <SCPI_StatusQuestionableEnableQ>:
/**
 * STATus:QUEStionable:ENABle?
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusQuestionableEnableQ(scpi_t * context) {
   83044:	b510      	push	{r4, lr}
   83046:	4604      	mov	r4, r0
    /* return value */
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_QUESE));
   83048:	f04f 0107 	mov.w	r1, #7
   8304c:	f642 3355 	movw	r3, #11093	; 0x2b55
   83050:	f2c0 0308 	movt	r3, #8
   83054:	4798      	blx	r3
   83056:	4601      	mov	r1, r0
   83058:	4620      	mov	r0, r4
   8305a:	f243 4251 	movw	r2, #13393	; 0x3451
   8305e:	f2c0 0208 	movt	r2, #8
   83062:	4790      	blx	r2

    return SCPI_RES_OK;
}
   83064:	f04f 0001 	mov.w	r0, #1
   83068:	bd10      	pop	{r4, pc}
   8306a:	bf00      	nop

0008306c <SCPI_StatusQuestionableEnable>:
/**
 * STATus:QUEStionable:ENABle
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusQuestionableEnable(scpi_t * context) {
   8306c:	b510      	push	{r4, lr}
   8306e:	b082      	sub	sp, #8
   83070:	4604      	mov	r4, r0
    int32_t new_QUESE;
    if (SCPI_ParamInt(context, &new_QUESE, TRUE)) {
   83072:	a901      	add	r1, sp, #4
   83074:	f04f 0201 	mov.w	r2, #1
   83078:	f243 5369 	movw	r3, #13673	; 0x3569
   8307c:	f2c0 0308 	movt	r3, #8
   83080:	4798      	blx	r3
   83082:	b148      	cbz	r0, 83098 <SCPI_StatusQuestionableEnable+0x2c>
        SCPI_RegSet(context, SCPI_REG_QUESE, new_QUESE);
   83084:	4620      	mov	r0, r4
   83086:	f04f 0107 	mov.w	r1, #7
   8308a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   8308e:	f642 33cd 	movw	r3, #11213	; 0x2bcd
   83092:	f2c0 0308 	movt	r3, #8
   83096:	4798      	blx	r3
    }
    return SCPI_RES_OK;
}
   83098:	f04f 0001 	mov.w	r0, #1
   8309c:	b002      	add	sp, #8
   8309e:	bd10      	pop	{r4, pc}

000830a0 <SCPI_StatusPreset>:
/**
 * STATus:PRESet
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusPreset(scpi_t * context) {
   830a0:	b508      	push	{r3, lr}
    /* clear STATUS:... */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
   830a2:	f04f 0106 	mov.w	r1, #6
   830a6:	f04f 0200 	mov.w	r2, #0
   830aa:	f642 33cd 	movw	r3, #11213	; 0x2bcd
   830ae:	f2c0 0308 	movt	r3, #8
   830b2:	4798      	blx	r3
    return SCPI_RES_OK;
}
   830b4:	f04f 0001 	mov.w	r0, #1
   830b8:	bd08      	pop	{r3, pc}
   830ba:	bf00      	nop

000830bc <writeData>:
 * @param context
 * @param data
 * @param len - lenght of data to be written
 * @return number of bytes written
 */
static size_t writeData(scpi_t * context, const char * data, size_t len) {
   830bc:	b508      	push	{r3, lr}
    return context->interface->write(context, data, len);
   830be:	69c3      	ldr	r3, [r0, #28]
   830c0:	685b      	ldr	r3, [r3, #4]
   830c2:	4798      	blx	r3
}
   830c4:	bd08      	pop	{r3, pc}
   830c6:	bf00      	nop

000830c8 <writeDelimiter>:
/**
 * Write result delimiter to output
 * @param context
 * @return number of bytes written
 */
static size_t writeDelimiter(scpi_t * context) {
   830c8:	b508      	push	{r3, lr}
    if (context->output_count > 0) {
   830ca:	6a03      	ldr	r3, [r0, #32]
   830cc:	2b00      	cmp	r3, #0
   830ce:	dd0b      	ble.n	830e8 <writeDelimiter+0x20>
        return writeData(context, ", ", 2);
   830d0:	f24d 3178 	movw	r1, #54136	; 0xd378
   830d4:	f2c0 0108 	movt	r1, #8
   830d8:	f04f 0202 	mov.w	r2, #2
   830dc:	f243 03bd 	movw	r3, #12477	; 0x30bd
   830e0:	f2c0 0308 	movt	r3, #8
   830e4:	4798      	blx	r3
   830e6:	bd08      	pop	{r3, pc}
    } else {
        return 0;
   830e8:	f04f 0000 	mov.w	r0, #0
    }
}
   830ec:	bd08      	pop	{r3, pc}
   830ee:	bf00      	nop

000830f0 <paramSkipBytes>:
 * Skip num bytes from the begginig of parameters
 * @param context
 * @param num
 */
void paramSkipBytes(scpi_t * context, size_t num) {
    if (context->paramlist.length < num) {
   830f0:	6983      	ldr	r3, [r0, #24]
   830f2:	4299      	cmp	r1, r3
   830f4:	bf28      	it	cs
   830f6:	4619      	movcs	r1, r3
        num = context->paramlist.length;
    }
    context->paramlist.parameters += num;
   830f8:	6942      	ldr	r2, [r0, #20]
   830fa:	1852      	adds	r2, r2, r1
   830fc:	6142      	str	r2, [r0, #20]
    context->paramlist.length -= num;
   830fe:	1a59      	subs	r1, r3, r1
   83100:	6181      	str	r1, [r0, #24]
   83102:	4770      	bx	lr

00083104 <paramSkipWhitespace>:

/**
 * Skip white spaces from the beggining of parameters
 * @param context
 */
void paramSkipWhitespace(scpi_t * context) {
   83104:	b510      	push	{r4, lr}
   83106:	4604      	mov	r4, r0
    size_t ws = skipWhitespace(context->paramlist.parameters, context->paramlist.length);
   83108:	6940      	ldr	r0, [r0, #20]
   8310a:	69a1      	ldr	r1, [r4, #24]
   8310c:	f643 1351 	movw	r3, #14673	; 0x3951
   83110:	f2c0 0308 	movt	r3, #8
   83114:	4798      	blx	r3
   83116:	4601      	mov	r1, r0
    paramSkipBytes(context, ws);
   83118:	4620      	mov	r0, r4
   8311a:	f243 02f1 	movw	r2, #12529	; 0x30f1
   8311e:	f2c0 0208 	movt	r2, #8
   83122:	4790      	blx	r2
   83124:	bd10      	pop	{r4, pc}
   83126:	bf00      	nop

00083128 <paramNext>:
 * Find next parameter
 * @param context
 * @param mandatory
 * @return 
 */
bool_t paramNext(scpi_t * context, bool_t mandatory) {
   83128:	b538      	push	{r3, r4, r5, lr}
   8312a:	4604      	mov	r4, r0
   8312c:	460d      	mov	r5, r1
    paramSkipWhitespace(context);
   8312e:	f243 1305 	movw	r3, #12549	; 0x3105
   83132:	f2c0 0308 	movt	r3, #8
   83136:	4798      	blx	r3
    if (context->paramlist.length == 0) {
   83138:	69a0      	ldr	r0, [r4, #24]
   8313a:	b960      	cbnz	r0, 83156 <paramNext+0x2e>
        if (mandatory) {
   8313c:	2d00      	cmp	r5, #0
   8313e:	d031      	beq.n	831a4 <paramNext+0x7c>
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
   83140:	4620      	mov	r0, r4
   83142:	f06f 016c 	mvn.w	r1, #108	; 0x6c
   83146:	f642 02bd 	movw	r2, #10429	; 0x28bd
   8314a:	f2c0 0208 	movt	r2, #8
   8314e:	4790      	blx	r2
        }
        return FALSE;
   83150:	f04f 0000 	mov.w	r0, #0
   83154:	bd38      	pop	{r3, r4, r5, pc}
    }
    if (context->input_count != 0) {
   83156:	6a61      	ldr	r1, [r4, #36]	; 0x24
   83158:	b1e9      	cbz	r1, 83196 <paramNext+0x6e>
        if (context->paramlist.parameters[0] == ',') {
   8315a:	6962      	ldr	r2, [r4, #20]
   8315c:	7813      	ldrb	r3, [r2, #0]
   8315e:	2b2c      	cmp	r3, #44	; 0x2c
   83160:	d10e      	bne.n	83180 <paramNext+0x58>
            paramSkipBytes(context, 1);
   83162:	4620      	mov	r0, r4
   83164:	f04f 0101 	mov.w	r1, #1
   83168:	f243 03f1 	movw	r3, #12529	; 0x30f1
   8316c:	f2c0 0308 	movt	r3, #8
   83170:	4798      	blx	r3
            paramSkipWhitespace(context);
   83172:	4620      	mov	r0, r4
   83174:	f243 1105 	movw	r1, #12549	; 0x3105
   83178:	f2c0 0108 	movt	r1, #8
   8317c:	4788      	blx	r1
   8317e:	e00a      	b.n	83196 <paramNext+0x6e>
        } else {
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SEPARATOR);
   83180:	4620      	mov	r0, r4
   83182:	f06f 0166 	mvn.w	r1, #102	; 0x66
   83186:	f642 02bd 	movw	r2, #10429	; 0x28bd
   8318a:	f2c0 0208 	movt	r2, #8
   8318e:	4790      	blx	r2
            return FALSE;
   83190:	f04f 0000 	mov.w	r0, #0
   83194:	bd38      	pop	{r3, r4, r5, pc}
        }
    }
    context->input_count++;
   83196:	6a60      	ldr	r0, [r4, #36]	; 0x24
   83198:	f100 0001 	add.w	r0, r0, #1
   8319c:	6260      	str	r0, [r4, #36]	; 0x24
    return TRUE;
   8319e:	f04f 0001 	mov.w	r0, #1
   831a2:	bd38      	pop	{r3, r4, r5, pc}
    paramSkipWhitespace(context);
    if (context->paramlist.length == 0) {
        if (mandatory) {
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
        }
        return FALSE;
   831a4:	f04f 0000 	mov.w	r0, #0
            return FALSE;
        }
    }
    context->input_count++;
    return TRUE;
}
   831a8:	bd38      	pop	{r3, r4, r5, pc}
   831aa:	bf00      	nop

000831ac <cmdlineSeparator>:
 * Find command line separator
 * @param cmd - input command
 * @param len - max search length
 * @return pointer to line separator or NULL
 */
const char * cmdlineSeparator(const char * cmd, size_t len) {
   831ac:	b508      	push	{r3, lr}
    return strnpbrk(cmd, len, ";\r\n");
   831ae:	f24d 327c 	movw	r2, #54140	; 0xd37c
   831b2:	f2c0 0208 	movt	r2, #8
   831b6:	f243 53e1 	movw	r3, #13793	; 0x35e1
   831ba:	f2c0 0308 	movt	r3, #8
   831be:	4798      	blx	r3
}
   831c0:	bd08      	pop	{r3, pc}
   831c2:	bf00      	nop

000831c4 <SCPI_Parse>:
 * @param context
 * @param data - complete command line
 * @param len - command line length
 * @return 1 if the last evaluated command was found
 */
int SCPI_Parse(scpi_t * context, const char * data, size_t len) {
   831c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   831c8:	b083      	sub	sp, #12
    int result = 0;
    const char * cmdline_end = data + len;
   831ca:	eb01 0b02 	add.w	fp, r1, r2
    const char * cmdline_ptr = data;
    size_t cmd_len;
    size_t cmdline_len;

    if (context == NULL) {
   831ce:	4607      	mov	r7, r0
   831d0:	2800      	cmp	r0, #0
   831d2:	f000 809e 	beq.w	83312 <SCPI_Parse+0x14e>
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
   831d6:	4559      	cmp	r1, fp
   831d8:	f080 809e 	bcs.w	83318 <SCPI_Parse+0x154>
   831dc:	460d      	mov	r5, r1
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
            } else {
                SCPI_ErrorPush(context, SCPI_ERROR_UNDEFINED_HEADER);
   831de:	f642 03bd 	movw	r3, #10429	; 0x28bd
   831e2:	f2c0 0308 	movt	r3, #8
   831e6:	9301      	str	r3, [sp, #4]
    }

	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
   831e8:	462c      	mov	r4, r5
   831ea:	ebc5 080b 	rsb	r8, r5, fp
 * @param cmd - input command
 * @param len - max search length
 * @return position of terminator or len
 */
size_t cmdTerminatorPos(const char * cmd, size_t len) {
    const char * terminator = strnpbrk(cmd, len, "; \r\n\t");
   831ee:	4628      	mov	r0, r5
   831f0:	4641      	mov	r1, r8
   831f2:	4a51      	ldr	r2, [pc, #324]	; (83338 <SCPI_Parse+0x174>)
   831f4:	f243 56e1 	movw	r6, #13793	; 0x35e1
   831f8:	f2c0 0608 	movt	r6, #8
   831fc:	47b0      	blx	r6
    if (terminator == NULL) {
   831fe:	b108      	cbz	r0, 83204 <SCPI_Parse+0x40>
        return len;
    } else {
        return terminator - cmd;
   83200:	1b46      	subs	r6, r0, r5
   83202:	e000      	b.n	83206 <SCPI_Parse+0x42>
 * @return position of terminator or len
 */
size_t cmdTerminatorPos(const char * cmd, size_t len) {
    const char * terminator = strnpbrk(cmd, len, "; \r\n\t");
    if (terminator == NULL) {
        return len;
   83204:	4646      	mov	r6, r8
 * @param cmd - input command
 * @param len - max search length
 * @return position of line separator or len
 */
size_t cmdlineSeparatorPos(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
   83206:	4628      	mov	r0, r5
   83208:	4641      	mov	r1, r8
   8320a:	f243 12ad 	movw	r2, #12717	; 0x31ad
   8320e:	f2c0 0208 	movt	r2, #8
   83212:	4790      	blx	r2
    if (separator == NULL) {
   83214:	b110      	cbz	r0, 8321c <SCPI_Parse+0x58>
        return len;
    } else {
        return separator - cmd;
   83216:	1b00      	subs	r0, r0, r4
   83218:	9000      	str	r0, [sp, #0]
   8321a:	e001      	b.n	83220 <SCPI_Parse+0x5c>
 * @return position of line separator or len
 */
size_t cmdlineSeparatorPos(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
    if (separator == NULL) {
        return len;
   8321c:	f8cd 8000 	str.w	r8, [sp]
	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        if (cmd_len > 0) {
   83220:	2e00      	cmp	r6, #0
   83222:	d05f      	beq.n	832e4 <SCPI_Parse+0x120>
 */
static bool_t findCommand(scpi_t * context, const char * cmdline_ptr, size_t cmdline_len, size_t cmd_len) {
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
   83224:	f8d7 9000 	ldr.w	r9, [r7]
   83228:	f8d9 0000 	ldr.w	r0, [r9]
   8322c:	2800      	cmp	r0, #0
   8322e:	d076      	beq.n	8331e <SCPI_Parse+0x15a>
   83230:	f04f 0408 	mov.w	r4, #8
        cmd = &context->cmdlist[i];
        if (matchCommand(cmd->pattern, cmdline_ptr, cmd_len)) {
   83234:	f643 2aa5 	movw	sl, #15013	; 0x3aa5
   83238:	f2c0 0a08 	movt	sl, #8
   8323c:	4629      	mov	r1, r5
   8323e:	4632      	mov	r2, r6
   83240:	47d0      	blx	sl
   83242:	b190      	cbz	r0, 8326a <SCPI_Parse+0xa6>
            context->paramlist.cmd = cmd;
   83244:	f8c7 9010 	str.w	r9, [r7, #16]
            context->paramlist.parameters = cmdline_ptr + cmd_len;
   83248:	19ab      	adds	r3, r5, r6
   8324a:	617b      	str	r3, [r7, #20]
            context->paramlist.length = cmdline_len - cmd_len;
   8324c:	9800      	ldr	r0, [sp, #0]
   8324e:	1b86      	subs	r6, r0, r6
   83250:	61be      	str	r6, [r7, #24]
 * @param context
 */
static void processCommand(scpi_t * context) {
    const scpi_command_t * cmd = context->paramlist.cmd;

    context->cmd_error = FALSE;
   83252:	f04f 0400 	mov.w	r4, #0
   83256:	f887 4028 	strb.w	r4, [r7, #40]	; 0x28
    context->output_count = 0;
   8325a:	f04f 0100 	mov.w	r1, #0
   8325e:	6239      	str	r1, [r7, #32]
    context->input_count = 0;
   83260:	6279      	str	r1, [r7, #36]	; 0x24

    SCPI_DEBUG_COMMAND(context);
    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
   83262:	f8d9 2004 	ldr.w	r2, [r9, #4]
   83266:	b94a      	cbnz	r2, 8327c <SCPI_Parse+0xb8>
   83268:	e014      	b.n	83294 <SCPI_Parse+0xd0>
 */
static bool_t findCommand(scpi_t * context, const char * cmdline_ptr, size_t cmdline_len, size_t cmd_len) {
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
   8326a:	6839      	ldr	r1, [r7, #0]
   8326c:	eb01 0904 	add.w	r9, r1, r4
   83270:	5908      	ldr	r0, [r1, r4]
   83272:	f104 0408 	add.w	r4, r4, #8
   83276:	2800      	cmp	r0, #0
   83278:	d1e0      	bne.n	8323c <SCPI_Parse+0x78>
   8327a:	e050      	b.n	8331e <SCPI_Parse+0x15a>
    context->input_count = 0;

    SCPI_DEBUG_COMMAND(context);
    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
        if ((cmd->callback(context) != SCPI_RES_OK) && !context->cmd_error) {
   8327c:	4638      	mov	r0, r7
   8327e:	4790      	blx	r2
   83280:	2801      	cmp	r0, #1
   83282:	d007      	beq.n	83294 <SCPI_Parse+0xd0>
   83284:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   83288:	b923      	cbnz	r3, 83294 <SCPI_Parse+0xd0>
            SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
   8328a:	4638      	mov	r0, r7
   8328c:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
   83290:	9c01      	ldr	r4, [sp, #4]
   83292:	47a0      	blx	r4
 * Conditionaly write "New Line"
 * @param context
 * @return number of characters written
 */
static size_t writeNewLine(scpi_t * context) {
    if (context->output_count > 0) {
   83294:	6a38      	ldr	r0, [r7, #32]
   83296:	2800      	cmp	r0, #0
   83298:	dd11      	ble.n	832be <SCPI_Parse+0xfa>
        size_t len;
        len = writeData(context, "\r\n", 2);
   8329a:	4638      	mov	r0, r7
   8329c:	f24d 6198 	movw	r1, #54936	; 0xd698
   832a0:	f2c0 0108 	movt	r1, #8
   832a4:	f04f 0202 	mov.w	r2, #2
   832a8:	f243 03bd 	movw	r3, #12477	; 0x30bd
   832ac:	f2c0 0308 	movt	r3, #8
   832b0:	4798      	blx	r3
 * Flush data to SCPI output
 * @param context
 * @return
 */
static int flushData(scpi_t * context) {
    if (context && context->interface && context->interface->flush) {
   832b2:	69f9      	ldr	r1, [r7, #28]
   832b4:	b119      	cbz	r1, 832be <SCPI_Parse+0xfa>
   832b6:	68ca      	ldr	r2, [r1, #12]
   832b8:	b10a      	cbz	r2, 832be <SCPI_Parse+0xfa>
        return context->interface->flush(context);
   832ba:	4638      	mov	r0, r7
   832bc:	4790      	blx	r2

    /* conditionaly write new line */
    writeNewLine(context);

    /* skip all whitespaces */
    paramSkipWhitespace(context);
   832be:	4638      	mov	r0, r7
   832c0:	f243 1405 	movw	r4, #12549	; 0x3105
   832c4:	f2c0 0408 	movt	r4, #8
   832c8:	47a0      	blx	r4

    /* set error if command callback did not read all parameters */
    if (context->paramlist.length != 0 && !context->cmd_error) {
   832ca:	69b8      	ldr	r0, [r7, #24]
   832cc:	b168      	cbz	r0, 832ea <SCPI_Parse+0x126>
   832ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   832d2:	b96b      	cbnz	r3, 832f0 <SCPI_Parse+0x12c>
        SCPI_ErrorPush(context, SCPI_ERROR_PARAMETER_NOT_ALLOWED);
   832d4:	4638      	mov	r0, r7
   832d6:	f06f 016b 	mvn.w	r1, #107	; 0x6b
   832da:	9a01      	ldr	r2, [sp, #4]
   832dc:	4790      	blx	r2
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
   832de:	f04f 0401 	mov.w	r4, #1
   832e2:	e007      	b.n	832f4 <SCPI_Parse+0x130>
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
   832e4:	f04f 0400 	mov.w	r4, #0
   832e8:	e004      	b.n	832f4 <SCPI_Parse+0x130>
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
   832ea:	f04f 0401 	mov.w	r4, #1
   832ee:	e001      	b.n	832f4 <SCPI_Parse+0x130>
   832f0:	f04f 0401 	mov.w	r4, #1
 * @param cmd - input command
 * @param len - max search length
 * @return Pointer to next part of command
 */
const char * cmdlineNext(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
   832f4:	4628      	mov	r0, r5
   832f6:	4641      	mov	r1, r8
   832f8:	f243 13ad 	movw	r3, #12717	; 0x31ad
   832fc:	f2c0 0308 	movt	r3, #8
   83300:	4798      	blx	r3
    if (separator == NULL) {
        return cmd + len;
   83302:	4445      	add	r5, r8
 * @param len - max search length
 * @return Pointer to next part of command
 */
const char * cmdlineNext(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
    if (separator == NULL) {
   83304:	b108      	cbz	r0, 8330a <SCPI_Parse+0x146>
        return cmd + len;
    } else {
        return separator + 1;
   83306:	f100 0501 	add.w	r5, r0, #1
    if (context == NULL) {
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
   8330a:	45ab      	cmp	fp, r5
   8330c:	f63f af6c 	bhi.w	831e8 <SCPI_Parse+0x24>
   83310:	e00d      	b.n	8332e <SCPI_Parse+0x16a>
    const char * cmdline_ptr = data;
    size_t cmd_len;
    size_t cmdline_len;

    if (context == NULL) {
        return -1;
   83312:	f04f 34ff 	mov.w	r4, #4294967295
   83316:	e00a      	b.n	8332e <SCPI_Parse+0x16a>
    }

	
    while (cmdline_ptr < cmdline_end) {
   83318:	f04f 0400 	mov.w	r4, #0
   8331c:	e007      	b.n	8332e <SCPI_Parse+0x16a>
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
            } else {
                SCPI_ErrorPush(context, SCPI_ERROR_UNDEFINED_HEADER);
   8331e:	4638      	mov	r0, r7
   83320:	f06f 0170 	mvn.w	r1, #112	; 0x70
   83324:	9a01      	ldr	r2, [sp, #4]
   83326:	4790      	blx	r2
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
   83328:	f04f 0400 	mov.w	r4, #0
   8332c:	e7e2      	b.n	832f4 <SCPI_Parse+0x130>
            }
        }
        cmdline_ptr = cmdlineNext(cmdline_ptr, cmdline_end - cmdline_ptr);
    }
    return result;
}
   8332e:	4620      	mov	r0, r4
   83330:	b003      	add	sp, #12
   83332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83336:	bf00      	nop
   83338:	0008d380 	.word	0x0008d380

0008333c <SCPI_Init>:
 * @param context
 * @param command_list
 * @param buffer
 * @param interface
 */
void SCPI_Init(scpi_t * context) {
   8333c:	b508      	push	{r3, lr}
    context->buffer.position = 0;
   8333e:	f04f 0200 	mov.w	r2, #0
   83342:	6082      	str	r2, [r0, #8]
    SCPI_ErrorInit(context);
   83344:	f642 0149 	movw	r1, #10313	; 0x2849
   83348:	f2c0 0108 	movt	r1, #8
   8334c:	4788      	blx	r1
   8334e:	bd08      	pop	{r3, pc}

00083350 <SCPI_Input>:
 * @param context
 * @param data - data to process
 * @param len - length of data
 * @return 
 */
int SCPI_Input(scpi_t * context, const char * data, size_t len) {
   83350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83352:	4604      	mov	r4, r0
    int result = 0;
    const char * cmd_term;
	if (len == 0) {
   83354:	4615      	mov	r5, r2
   83356:	b972      	cbnz	r2, 83376 <SCPI_Input+0x26>
        context->buffer.data[context->buffer.position] = 0;
   83358:	68c1      	ldr	r1, [r0, #12]
   8335a:	6882      	ldr	r2, [r0, #8]
   8335c:	f04f 0600 	mov.w	r6, #0
   83360:	548e      	strb	r6, [r1, r2]
        result = SCPI_Parse(context, context->buffer.data, context->buffer.position);
   83362:	68e1      	ldr	r1, [r4, #12]
   83364:	68a2      	ldr	r2, [r4, #8]
   83366:	f243 15c5 	movw	r5, #12741	; 0x31c5
   8336a:	f2c0 0508 	movt	r5, #8
   8336e:	47a8      	blx	r5
   83370:	4605      	mov	r5, r0
        context->buffer.position = 0;
   83372:	60a6      	str	r6, [r4, #8]
   83374:	e049      	b.n	8340a <SCPI_Input+0xba>
    } else {
        size_t buffer_free;
        int ws;
        buffer_free = context->buffer.length - context->buffer.position;
   83376:	6883      	ldr	r3, [r0, #8]
   83378:	6842      	ldr	r2, [r0, #4]
   8337a:	f102 30ff 	add.w	r0, r2, #4294967295
        if (len > (buffer_free - 1)) {
   8337e:	1ac2      	subs	r2, r0, r3
   83380:	4295      	cmp	r5, r2
   83382:	d83d      	bhi.n	83400 <SCPI_Input+0xb0>
            return -1;
        }
        memcpy(&context->buffer.data[context->buffer.position], data, len);
   83384:	68e7      	ldr	r7, [r4, #12]
   83386:	18f8      	adds	r0, r7, r3
   83388:	462a      	mov	r2, r5
   8338a:	f24a 7399 	movw	r3, #42905	; 0xa799
   8338e:	f2c0 0308 	movt	r3, #8
   83392:	4798      	blx	r3
        context->buffer.position += len;
   83394:	68a1      	ldr	r1, [r4, #8]
   83396:	186d      	adds	r5, r5, r1
   83398:	60a5      	str	r5, [r4, #8]
        context->buffer.data[context->buffer.position] = 0;
   8339a:	68e0      	ldr	r0, [r4, #12]
   8339c:	f04f 0200 	mov.w	r2, #0
   833a0:	5542      	strb	r2, [r0, r5]

        ws = skipWhitespace(context->buffer.data, context->buffer.position);
   833a2:	68e0      	ldr	r0, [r4, #12]
   833a4:	68a1      	ldr	r1, [r4, #8]
   833a6:	f643 1751 	movw	r7, #14673	; 0x3951
   833aa:	f2c0 0708 	movt	r7, #8
   833ae:	47b8      	blx	r7
   833b0:	4605      	mov	r5, r0
        cmd_term = cmdlineTerminator(context->buffer.data + ws, context->buffer.position - ws);
   833b2:	68e3      	ldr	r3, [r4, #12]
   833b4:	68a1      	ldr	r1, [r4, #8]
 * @param cmd - input command
 * @param len - max search length
 * @return pointer to command line terminator or NULL
 */
const char * cmdlineTerminator(const char * cmd, size_t len) {
    return strnpbrk(cmd, len, "\r\n");
   833b6:	1818      	adds	r0, r3, r0
   833b8:	1b49      	subs	r1, r1, r5
   833ba:	f24d 6298 	movw	r2, #54936	; 0xd698
   833be:	f2c0 0208 	movt	r2, #8
   833c2:	f243 57e1 	movw	r7, #13793	; 0x35e1
   833c6:	f2c0 0708 	movt	r7, #8
   833ca:	47b8      	blx	r7
        context->buffer.position += len;
        context->buffer.data[context->buffer.position] = 0;

        ws = skipWhitespace(context->buffer.data, context->buffer.position);
        cmd_term = cmdlineTerminator(context->buffer.data + ws, context->buffer.position - ws);
        if (cmd_term != NULL) {
   833cc:	4607      	mov	r7, r0
   833ce:	b1d0      	cbz	r0, 83406 <SCPI_Input+0xb6>
            int curr_len = cmd_term - context->buffer.data;
   833d0:	68e2      	ldr	r2, [r4, #12]
   833d2:	1a86      	subs	r6, r0, r2
            result = SCPI_Parse(context, context->buffer.data + ws, curr_len - ws);
   833d4:	4620      	mov	r0, r4
   833d6:	1951      	adds	r1, r2, r5
   833d8:	1b72      	subs	r2, r6, r5
   833da:	f243 15c5 	movw	r5, #12741	; 0x31c5
   833de:	f2c0 0508 	movt	r5, #8
   833e2:	47a8      	blx	r5
   833e4:	4605      	mov	r5, r0
            memmove(context->buffer.data, cmd_term, context->buffer.position - curr_len);
   833e6:	68a3      	ldr	r3, [r4, #8]
   833e8:	68e0      	ldr	r0, [r4, #12]
   833ea:	4639      	mov	r1, r7
   833ec:	1b9a      	subs	r2, r3, r6
   833ee:	f24a 73ab 	movw	r3, #42923	; 0xa7ab
   833f2:	f2c0 0308 	movt	r3, #8
   833f6:	4798      	blx	r3
            context->buffer.position -= curr_len;
   833f8:	68a0      	ldr	r0, [r4, #8]
   833fa:	1b86      	subs	r6, r0, r6
   833fc:	60a6      	str	r6, [r4, #8]
   833fe:	e004      	b.n	8340a <SCPI_Input+0xba>
    } else {
        size_t buffer_free;
        int ws;
        buffer_free = context->buffer.length - context->buffer.position;
        if (len > (buffer_free - 1)) {
            return -1;
   83400:	f04f 35ff 	mov.w	r5, #4294967295
   83404:	e001      	b.n	8340a <SCPI_Input+0xba>
 * @param data - data to process
 * @param len - length of data
 * @return 
 */
int SCPI_Input(scpi_t * context, const char * data, size_t len) {
    int result = 0;
   83406:	f04f 0500 	mov.w	r5, #0
            context->buffer.position -= curr_len;
        }
    }

    return result;
}
   8340a:	4628      	mov	r0, r5
   8340c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8340e:	bf00      	nop

00083410 <SCPI_ResultString>:
 * Write raw string result to the output
 * @param context
 * @param data
 * @return 
 */
size_t SCPI_ResultString(scpi_t * context, const char * data) {
   83410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83412:	4604      	mov	r4, r0
   83414:	460d      	mov	r5, r1
    size_t len = strlen(data);
   83416:	4608      	mov	r0, r1
   83418:	f64a 03a5 	movw	r3, #43173	; 0xa8a5
   8341c:	f2c0 0308 	movt	r3, #8
   83420:	4798      	blx	r3
   83422:	4607      	mov	r7, r0
    size_t result = 0;
    result += writeDelimiter(context);
   83424:	4620      	mov	r0, r4
   83426:	f243 01c9 	movw	r1, #12489	; 0x30c9
   8342a:	f2c0 0108 	movt	r1, #8
   8342e:	4788      	blx	r1
   83430:	4606      	mov	r6, r0
    result += writeData(context, data, len);
   83432:	4620      	mov	r0, r4
   83434:	4629      	mov	r1, r5
   83436:	463a      	mov	r2, r7
   83438:	f243 03bd 	movw	r3, #12477	; 0x30bd
   8343c:	f2c0 0308 	movt	r3, #8
   83440:	4798      	blx	r3
    context->output_count++;
   83442:	6a22      	ldr	r2, [r4, #32]
   83444:	f102 0201 	add.w	r2, r2, #1
   83448:	6222      	str	r2, [r4, #32]
    return result;
}
   8344a:	1980      	adds	r0, r0, r6
   8344c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8344e:	bf00      	nop

00083450 <SCPI_ResultInt>:
 * Write integer value to the result
 * @param context
 * @param val
 * @return 
 */
size_t SCPI_ResultInt(scpi_t * context, int32_t val) {
   83450:	b570      	push	{r4, r5, r6, lr}
   83452:	b084      	sub	sp, #16
   83454:	4604      	mov	r4, r0
    char buffer[12];
    size_t result = 0;
    size_t len = longToStr(val, buffer, sizeof (buffer));
   83456:	4608      	mov	r0, r1
   83458:	a901      	add	r1, sp, #4
   8345a:	f04f 020c 	mov.w	r2, #12
   8345e:	f243 632d 	movw	r3, #13869	; 0x362d
   83462:	f2c0 0308 	movt	r3, #8
   83466:	4798      	blx	r3
   83468:	4606      	mov	r6, r0
    result += writeDelimiter(context);
   8346a:	4620      	mov	r0, r4
   8346c:	f243 01c9 	movw	r1, #12489	; 0x30c9
   83470:	f2c0 0108 	movt	r1, #8
   83474:	4788      	blx	r1
   83476:	4605      	mov	r5, r0
    result += writeData(context, buffer, len);
   83478:	4620      	mov	r0, r4
   8347a:	a901      	add	r1, sp, #4
   8347c:	4632      	mov	r2, r6
   8347e:	f243 03bd 	movw	r3, #12477	; 0x30bd
   83482:	f2c0 0308 	movt	r3, #8
   83486:	4798      	blx	r3
    context->output_count++;
   83488:	6a22      	ldr	r2, [r4, #32]
   8348a:	f102 0201 	add.w	r2, r2, #1
   8348e:	6222      	str	r2, [r4, #32]
    return result;
}
   83490:	1940      	adds	r0, r0, r5
   83492:	b004      	add	sp, #16
   83494:	bd70      	pop	{r4, r5, r6, pc}
   83496:	bf00      	nop

00083498 <SCPI_ResultText>:
 * Write string withn " to the result
 * @param context
 * @param data
 * @return 
 */
size_t SCPI_ResultText(scpi_t * context, const char * data) {
   83498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8349c:	4604      	mov	r4, r0
   8349e:	460f      	mov	r7, r1
    size_t result = 0;
    result += writeDelimiter(context);
   834a0:	f243 03c9 	movw	r3, #12489	; 0x30c9
   834a4:	f2c0 0308 	movt	r3, #8
   834a8:	4798      	blx	r3
   834aa:	4680      	mov	r8, r0
    result += writeData(context, "\"", 1);
   834ac:	f24d 66ec 	movw	r6, #55020	; 0xd6ec
   834b0:	f2c0 0608 	movt	r6, #8
   834b4:	4620      	mov	r0, r4
   834b6:	4631      	mov	r1, r6
   834b8:	f04f 0201 	mov.w	r2, #1
   834bc:	f243 05bd 	movw	r5, #12477	; 0x30bd
   834c0:	f2c0 0508 	movt	r5, #8
   834c4:	47a8      	blx	r5
   834c6:	4480      	add	r8, r0
    result += writeData(context, data, strlen(data));
   834c8:	4638      	mov	r0, r7
   834ca:	f64a 01a5 	movw	r1, #43173	; 0xa8a5
   834ce:	f2c0 0108 	movt	r1, #8
   834d2:	4788      	blx	r1
   834d4:	4602      	mov	r2, r0
   834d6:	4620      	mov	r0, r4
   834d8:	4639      	mov	r1, r7
   834da:	47a8      	blx	r5
   834dc:	eb08 0700 	add.w	r7, r8, r0
    result += writeData(context, "\"", 1);
   834e0:	4620      	mov	r0, r4
   834e2:	4631      	mov	r1, r6
   834e4:	f04f 0201 	mov.w	r2, #1
   834e8:	47a8      	blx	r5
    context->output_count++;
   834ea:	6a22      	ldr	r2, [r4, #32]
   834ec:	f102 0201 	add.w	r2, r2, #1
   834f0:	6222      	str	r2, [r4, #32]
    return result;
}
   834f2:	1838      	adds	r0, r7, r0
   834f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000834f8 <SCPI_ParamString>:
 * @param value
 * @param len
 * @param mandatory
 * @return 
 */
bool_t SCPI_ParamString(scpi_t * context, const char ** value, size_t * len, bool_t mandatory) {
   834f8:	b570      	push	{r4, r5, r6, lr}
   834fa:	b082      	sub	sp, #8
   834fc:	4604      	mov	r4, r0
   834fe:	4615      	mov	r5, r2
    size_t length;

    if (!value || !len) {
   83500:	460e      	mov	r6, r1
   83502:	b319      	cbz	r1, 8354c <SCPI_ParamString+0x54>
   83504:	b32a      	cbz	r2, 83552 <SCPI_ParamString+0x5a>
        return FALSE;
    }

    if (!paramNext(context, mandatory)) {
   83506:	4619      	mov	r1, r3
   83508:	f243 1329 	movw	r3, #12585	; 0x3129
   8350c:	f2c0 0308 	movt	r3, #8
   83510:	4798      	blx	r3
   83512:	b308      	cbz	r0, 83558 <SCPI_ParamString+0x60>
        return FALSE;
    }

    if (locateStr(context->paramlist.parameters, context->paramlist.length, value, &length)) {
   83514:	6960      	ldr	r0, [r4, #20]
   83516:	69a1      	ldr	r1, [r4, #24]
   83518:	4632      	mov	r2, r6
   8351a:	ab01      	add	r3, sp, #4
   8351c:	f243 7681 	movw	r6, #14209	; 0x3781
   83520:	f2c0 0608 	movt	r6, #8
   83524:	47b0      	blx	r6
   83526:	b1d0      	cbz	r0, 8355e <SCPI_ParamString+0x66>
        paramSkipBytes(context, length);
   83528:	4620      	mov	r0, r4
   8352a:	9901      	ldr	r1, [sp, #4]
   8352c:	f243 02f1 	movw	r2, #12529	; 0x30f1
   83530:	f2c0 0208 	movt	r2, #8
   83534:	4790      	blx	r2
        paramSkipWhitespace(context);
   83536:	4620      	mov	r0, r4
   83538:	f243 1105 	movw	r1, #12549	; 0x3105
   8353c:	f2c0 0108 	movt	r1, #8
   83540:	4788      	blx	r1
        if (len) {
            *len = length;
   83542:	9801      	ldr	r0, [sp, #4]
   83544:	6028      	str	r0, [r5, #0]
        }
        return TRUE;
   83546:	f04f 0001 	mov.w	r0, #1
   8354a:	e00a      	b.n	83562 <SCPI_ParamString+0x6a>
 */
bool_t SCPI_ParamString(scpi_t * context, const char ** value, size_t * len, bool_t mandatory) {
    size_t length;

    if (!value || !len) {
        return FALSE;
   8354c:	f04f 0000 	mov.w	r0, #0
   83550:	e007      	b.n	83562 <SCPI_ParamString+0x6a>
   83552:	f04f 0000 	mov.w	r0, #0
   83556:	e004      	b.n	83562 <SCPI_ParamString+0x6a>
    }

    if (!paramNext(context, mandatory)) {
        return FALSE;
   83558:	f04f 0000 	mov.w	r0, #0
   8355c:	e001      	b.n	83562 <SCPI_ParamString+0x6a>
            *len = length;
        }
        return TRUE;
    }

    return FALSE;
   8355e:	f04f 0000 	mov.w	r0, #0
}
   83562:	b002      	add	sp, #8
   83564:	bd70      	pop	{r4, r5, r6, pc}
   83566:	bf00      	nop

00083568 <SCPI_ParamInt>:
 * @param context
 * @param value
 * @param mandatory
 * @return 
 */
bool_t SCPI_ParamInt(scpi_t * context, int32_t * value, bool_t mandatory) {
   83568:	b570      	push	{r4, r5, r6, lr}
   8356a:	b082      	sub	sp, #8
   8356c:	4604      	mov	r4, r0
   8356e:	4613      	mov	r3, r2
    const char * param;
    size_t param_len;
    size_t num_len;

    if (!value) {
   83570:	460e      	mov	r6, r1
   83572:	b1e1      	cbz	r1, 835ae <SCPI_ParamInt+0x46>
        return FALSE;
    }

    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
   83574:	a901      	add	r1, sp, #4
   83576:	466a      	mov	r2, sp
   83578:	f243 45f9 	movw	r5, #13561	; 0x34f9
   8357c:	f2c0 0508 	movt	r5, #8
   83580:	47a8      	blx	r5
   83582:	b1b8      	cbz	r0, 835b4 <SCPI_ParamInt+0x4c>
        return FALSE;
    }

    num_len = strToLong(param, value);
   83584:	9801      	ldr	r0, [sp, #4]
   83586:	4631      	mov	r1, r6
   83588:	f243 7335 	movw	r3, #14133	; 0x3735
   8358c:	f2c0 0308 	movt	r3, #8
   83590:	4798      	blx	r3

    if (num_len != param_len) {
   83592:	9900      	ldr	r1, [sp, #0]
   83594:	4288      	cmp	r0, r1
   83596:	d010      	beq.n	835ba <SCPI_ParamInt+0x52>
        SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
   83598:	4620      	mov	r0, r4
   8359a:	f06f 0189 	mvn.w	r1, #137	; 0x89
   8359e:	f642 02bd 	movw	r2, #10429	; 0x28bd
   835a2:	f2c0 0208 	movt	r2, #8
   835a6:	4790      	blx	r2
        return FALSE;
   835a8:	f04f 0000 	mov.w	r0, #0
   835ac:	e007      	b.n	835be <SCPI_ParamInt+0x56>
    const char * param;
    size_t param_len;
    size_t num_len;

    if (!value) {
        return FALSE;
   835ae:	f04f 0000 	mov.w	r0, #0
   835b2:	e004      	b.n	835be <SCPI_ParamInt+0x56>
    }

    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
        return FALSE;
   835b4:	f04f 0000 	mov.w	r0, #0
   835b8:	e001      	b.n	835be <SCPI_ParamInt+0x56>
    if (num_len != param_len) {
        SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
        return FALSE;
    }

    return TRUE;
   835ba:	f04f 0001 	mov.w	r0, #1
}
   835be:	b002      	add	sp, #8
   835c0:	bd70      	pop	{r4, r5, r6, pc}
   835c2:	bf00      	nop

000835c4 <isFinalState>:
 */
static bool_t isFinalState(locate_text_states state) {
    return (
        ((state) == STATE_COMMA)
        || ((state) == STATE_LAST_WHITESPACE)
        || ((state) == STATE_TEXT) ||
   835c4:	f1a0 0302 	sub.w	r3, r0, #2
   835c8:	b2d9      	uxtb	r1, r3
   835ca:	2902      	cmp	r1, #2
   835cc:	d904      	bls.n	835d8 <isFinalState+0x14>
   835ce:	f1d0 0001 	rsbs	r0, r0, #1
   835d2:	bf38      	it	cc
   835d4:	2000      	movcc	r0, #0
   835d6:	4770      	bx	lr
   835d8:	f04f 0001 	mov.w	r0, #1
        ((state) == STATE_FIRST_WHITESPACE)
    );
}
   835dc:	4770      	bx	lr
   835de:	bf00      	nop

000835e0 <strnpbrk>:
 * @param str
 * @param size
 * @param set
 * @return 
 */
char * strnpbrk(const char *str, size_t size, const char *set) {
   835e0:	b470      	push	{r4, r5, r6}
    const char *scanp;
    long c, sc;
    const char * strend = str + size;
   835e2:	1841      	adds	r1, r0, r1

    while ((strend != str) && ((c = *str++) != 0)) {
   835e4:	4288      	cmp	r0, r1
   835e6:	d01a      	beq.n	8361e <strnpbrk+0x3e>
   835e8:	4603      	mov	r3, r0
   835ea:	f813 6b01 	ldrb.w	r6, [r3], #1
   835ee:	b936      	cbnz	r6, 835fe <strnpbrk+0x1e>
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
                return ((char *) (str - 1));
    }
    return (NULL);
   835f0:	f04f 0000 	mov.w	r0, #0
   835f4:	e018      	b.n	83628 <strnpbrk+0x48>
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
   835f6:	42b5      	cmp	r5, r6
   835f8:	d102      	bne.n	83600 <strnpbrk+0x20>
   835fa:	e015      	b.n	83628 <strnpbrk+0x48>
char * strnpbrk(const char *str, size_t size, const char *set) {
    const char *scanp;
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
   835fc:	4623      	mov	r3, r4
   835fe:	4614      	mov	r4, r2
        for (scanp = set; (sc = *scanp++) != '\0';)
   83600:	f814 5b01 	ldrb.w	r5, [r4], #1
   83604:	2d00      	cmp	r5, #0
   83606:	d1f6      	bne.n	835f6 <strnpbrk+0x16>
char * strnpbrk(const char *str, size_t size, const char *set) {
    const char *scanp;
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
   83608:	428b      	cmp	r3, r1
   8360a:	d00b      	beq.n	83624 <strnpbrk+0x44>
   8360c:	461c      	mov	r4, r3
   8360e:	f814 6b01 	ldrb.w	r6, [r4], #1
   83612:	4618      	mov	r0, r3
   83614:	2e00      	cmp	r6, #0
   83616:	d1f1      	bne.n	835fc <strnpbrk+0x1c>
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
                return ((char *) (str - 1));
    }
    return (NULL);
   83618:	f04f 0000 	mov.w	r0, #0
   8361c:	e004      	b.n	83628 <strnpbrk+0x48>
   8361e:	f04f 0000 	mov.w	r0, #0
   83622:	e001      	b.n	83628 <strnpbrk+0x48>
   83624:	f04f 0000 	mov.w	r0, #0
}
   83628:	bc70      	pop	{r4, r5, r6}
   8362a:	4770      	bx	lr

0008362c <longToStr>:
 * @param val   integer value
 * @param str   converted textual representation
 * @param len   string buffer length
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
   8362c:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t x = 1000000000L;
    int_fast8_t digit;
    size_t pos = 0;

    if (val == 0) {
   8362e:	4603      	mov	r3, r0
   83630:	b938      	cbnz	r0, 83642 <longToStr+0x16>
        if (pos < len) str[pos++] = '0';
   83632:	2a00      	cmp	r2, #0
   83634:	d055      	beq.n	836e2 <longToStr+0xb6>
   83636:	f04f 0030 	mov.w	r0, #48	; 0x30
   8363a:	7008      	strb	r0, [r1, #0]
   8363c:	f04f 0001 	mov.w	r0, #1
   83640:	e049      	b.n	836d6 <longToStr+0xaa>
    } else {
        if (val < 0) {
   83642:	2800      	cmp	r0, #0
   83644:	da08      	bge.n	83658 <longToStr+0x2c>
            val = -val;
   83646:	f1c0 0300 	rsb	r3, r0, #0
            if (pos < len) str[pos++] = '-';
   8364a:	b142      	cbz	r2, 8365e <longToStr+0x32>
   8364c:	f04f 002d 	mov.w	r0, #45	; 0x2d
   83650:	7008      	strb	r0, [r1, #0]
   83652:	f04f 0001 	mov.w	r0, #1
   83656:	e004      	b.n	83662 <longToStr+0x36>
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
    uint32_t x = 1000000000L;
    int_fast8_t digit;
    size_t pos = 0;
   83658:	f04f 0000 	mov.w	r0, #0
   8365c:	e001      	b.n	83662 <longToStr+0x36>
   8365e:	f04f 0000 	mov.w	r0, #0
        if (val < 0) {
            val = -val;
            if (pos < len) str[pos++] = '-';
        }

        while ((val / x) == 0) {
   83662:	461d      	mov	r5, r3
   83664:	f64c 14ff 	movw	r4, #51711	; 0xc9ff
   83668:	f6c3 349a 	movt	r4, #15258	; 0x3b9a
   8366c:	42a3      	cmp	r3, r4
   8366e:	d810      	bhi.n	83692 <longToStr+0x66>
   83670:	f44f 434a 	mov.w	r3, #51712	; 0xca00
   83674:	f6c3 339a 	movt	r3, #15258	; 0x3b9a
            x /= 10;
   83678:	f64c 46cd 	movw	r6, #52429	; 0xcccd
   8367c:	f6cc 46cc 	movt	r6, #52428	; 0xcccc
   83680:	fba6 4303 	umull	r4, r3, r6, r3
   83684:	ea4f 03d3 	mov.w	r3, r3, lsr #3
        if (val < 0) {
            val = -val;
            if (pos < len) str[pos++] = '-';
        }

        while ((val / x) == 0) {
   83688:	fbb5 f4f3 	udiv	r4, r5, r3
   8368c:	2c00      	cmp	r4, #0
   8368e:	d0f7      	beq.n	83680 <longToStr+0x54>
   83690:	e003      	b.n	8369a <longToStr+0x6e>
   83692:	f44f 434a 	mov.w	r3, #51712	; 0xca00
   83696:	f6c3 339a 	movt	r3, #15258	; 0x3b9a
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   8369a:	4282      	cmp	r2, r0
   8369c:	d933      	bls.n	83706 <longToStr+0xda>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   8369e:	fbb5 f6f3 	udiv	r6, r5, r3
            break;
        }
    }
    
    return result;
}
   836a2:	b2f6      	uxtb	r6, r6

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
            val -= digit * x;
            x /= 10;
   836a4:	f64c 47cd 	movw	r7, #52429	; 0xcccd
   836a8:	f6cc 47cc 	movt	r7, #52428	; 0xcccc
   836ac:	ea6f 0400 	mvn.w	r4, r0
   836b0:	18a4      	adds	r4, r4, r2
   836b2:	f014 0f01 	tst.w	r4, #1
   836b6:	d128      	bne.n	8370a <longToStr+0xde>
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   836b8:	f106 0430 	add.w	r4, r6, #48	; 0x30
   836bc:	540c      	strb	r4, [r1, r0]
   836be:	f100 0401 	add.w	r4, r0, #1
   836c2:	4620      	mov	r0, r4
            val -= digit * x;
   836c4:	fb03 5516 	mls	r5, r3, r6, r5
            x /= 10;
   836c8:	fba7 6303 	umull	r6, r3, r7, r3
        } while (x && (pos < len));
   836cc:	08db      	lsrs	r3, r3, #3
   836ce:	d002      	beq.n	836d6 <longToStr+0xaa>
   836d0:	42a2      	cmp	r2, r4
   836d2:	d809      	bhi.n	836e8 <longToStr+0xbc>
   836d4:	e017      	b.n	83706 <longToStr+0xda>
    }

    if (pos < len) str[pos] = 0;
   836d6:	4290      	cmp	r0, r2
   836d8:	d215      	bcs.n	83706 <longToStr+0xda>
   836da:	f04f 0200 	mov.w	r2, #0
   836de:	540a      	strb	r2, [r1, r0]
   836e0:	e011      	b.n	83706 <longToStr+0xda>
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
    uint32_t x = 1000000000L;
    int_fast8_t digit;
    size_t pos = 0;
   836e2:	f04f 0000 	mov.w	r0, #0
   836e6:	e00e      	b.n	83706 <longToStr+0xda>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   836e8:	fbb5 f0f3 	udiv	r0, r5, r3
            break;
        }
    }
    
    return result;
}
   836ec:	b2c6      	uxtb	r6, r0
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   836ee:	f106 0030 	add.w	r0, r6, #48	; 0x30
   836f2:	5508      	strb	r0, [r1, r4]
   836f4:	f104 0001 	add.w	r0, r4, #1
            val -= digit * x;
   836f8:	fb03 5516 	mls	r5, r3, r6, r5
            x /= 10;
   836fc:	fba7 4303 	umull	r4, r3, r7, r3
        } while (x && (pos < len));
   83700:	08db      	lsrs	r3, r3, #3
   83702:	d113      	bne.n	8372c <longToStr+0x100>
   83704:	e7e7      	b.n	836d6 <longToStr+0xaa>
    }

    if (pos < len) str[pos] = 0;
    return pos;
}
   83706:	bcf0      	pop	{r4, r5, r6, r7}
   83708:	4770      	bx	lr
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   8370a:	f106 0430 	add.w	r4, r6, #48	; 0x30
   8370e:	540c      	strb	r4, [r1, r0]
   83710:	f100 0001 	add.w	r0, r0, #1
            val -= digit * x;
   83714:	fb03 5516 	mls	r5, r3, r6, r5
            x /= 10;
   83718:	fba7 6303 	umull	r6, r3, r7, r3
        } while (x && (pos < len));
   8371c:	08db      	lsrs	r3, r3, #3
   8371e:	d0da      	beq.n	836d6 <longToStr+0xaa>
   83720:	4282      	cmp	r2, r0
   83722:	d9f0      	bls.n	83706 <longToStr+0xda>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   83724:	fbb5 f6f3 	udiv	r6, r5, r3
            break;
        }
    }
    
    return result;
}
   83728:	b2f6      	uxtb	r6, r6
   8372a:	e7c5      	b.n	836b8 <longToStr+0x8c>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   8372c:	fbb5 f6f3 	udiv	r6, r5, r3
            break;
        }
    }
    
    return result;
}
   83730:	b2f6      	uxtb	r6, r6
   83732:	e7c1      	b.n	836b8 <longToStr+0x8c>

00083734 <strToLong>:
 * Converts string to signed 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strToLong(const char * str, int32_t * val) {
   83734:	b530      	push	{r4, r5, lr}
   83736:	b083      	sub	sp, #12
   83738:	4604      	mov	r4, r0
   8373a:	460d      	mov	r5, r1
    char * endptr;
    *val = strtol(str, &endptr, 0);
   8373c:	a901      	add	r1, sp, #4
   8373e:	f04f 0200 	mov.w	r2, #0
   83742:	f64a 234d 	movw	r3, #43597	; 0xaa4d
   83746:	f2c0 0308 	movt	r3, #8
   8374a:	4798      	blx	r3
   8374c:	6028      	str	r0, [r5, #0]
    return endptr - str;
}
   8374e:	9801      	ldr	r0, [sp, #4]
   83750:	1b00      	subs	r0, r0, r4
   83752:	b003      	add	sp, #12
   83754:	bd30      	pop	{r4, r5, pc}
   83756:	bf00      	nop

00083758 <compareStr>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
   83758:	b510      	push	{r4, lr}
   8375a:	460c      	mov	r4, r1
    if (len1 != len2) {
   8375c:	4299      	cmp	r1, r3
   8375e:	d10b      	bne.n	83778 <compareStr+0x20>
        return FALSE;
    }

    if (SCPI_strncasecmp(str1, str2, len2) == 0) {
   83760:	4611      	mov	r1, r2
   83762:	4622      	mov	r2, r4
   83764:	f64a 03b5 	movw	r3, #43189	; 0xa8b5
   83768:	f2c0 0308 	movt	r3, #8
   8376c:	4798      	blx	r3
   8376e:	f1d0 0001 	rsbs	r0, r0, #1
   83772:	bf38      	it	cc
   83774:	2000      	movcc	r0, #0
   83776:	bd10      	pop	{r4, pc}
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
    if (len1 != len2) {
        return FALSE;
   83778:	f04f 0000 	mov.w	r0, #0
    if (SCPI_strncasecmp(str1, str2, len2) == 0) {
        return TRUE;
    }

    return FALSE;
}
   8377c:	bd10      	pop	{r4, pc}
   8377e:	bf00      	nop

00083780 <locateStr>:
 * @param len1 length of string
 * @param str2 result
 * @param len2 length of result
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
   83780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83784:	b083      	sub	sp, #12
   83786:	4606      	mov	r6, r0
   83788:	9201      	str	r2, [sp, #4]
   8378a:	4699      	mov	r9, r3
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   8378c:	460b      	mov	r3, r1
   8378e:	2900      	cmp	r1, #0
   83790:	d03e      	beq.n	83810 <locateStr+0x90>
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   83792:	f240 22ac 	movw	r2, #684	; 0x2ac
   83796:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8379a:	f8d2 e000 	ldr.w	lr, [r2]
   8379e:	f04f 0501 	mov.w	r5, #1
   837a2:	f04f 0400 	mov.w	r4, #0
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;
   837a6:	4627      	mov	r7, r4
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
   837a8:	46a0      	mov	r8, r4
            } else if (c == ',') {
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
                nfa->stopIdx = nfa->i + 1;
                nfa->state = STATE_TEXT;
   837aa:	f04f 0b02 	mov.w	fp, #2
   837ae:	ea6f 0104 	mvn.w	r1, r4
   837b2:	18c9      	adds	r1, r1, r3
   837b4:	4029      	ands	r1, r5
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   837b6:	5d00      	ldrb	r0, [r0, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   837b8:	4622      	mov	r2, r4
   837ba:	2c00      	cmp	r4, #0
   837bc:	d04f      	beq.n	8385e <locateStr+0xde>
   837be:	e062      	b.n	83886 <locateStr+0x106>
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   837c0:	5d31      	ldrb	r1, [r6, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   837c2:	b112      	cbz	r2, 837ca <locateStr+0x4a>
   837c4:	2a02      	cmp	r2, #2
   837c6:	d11b      	bne.n	83800 <locateStr+0x80>
   837c8:	e00f      	b.n	837ea <locateStr+0x6a>
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   837ca:	eb0e 0001 	add.w	r0, lr, r1
   837ce:	7840      	ldrb	r0, [r0, #1]
   837d0:	f000 0008 	and.w	r0, r0, #8
   837d4:	b2c0      	uxtb	r0, r0
   837d6:	b110      	cbz	r0, 837de <locateStr+0x5e>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   837d8:	462f      	mov	r7, r5
   837da:	46a8      	mov	r8, r5
   837dc:	e010      	b.n	83800 <locateStr+0x80>
            } else if (c == ',') {
   837de:	292c      	cmp	r1, #44	; 0x2c
   837e0:	d01b      	beq.n	8381a <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   837e2:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   837e4:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   837e6:	465a      	mov	r2, fp
   837e8:	e00a      	b.n	83800 <locateStr+0x80>
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   837ea:	292c      	cmp	r1, #44	; 0x2c
   837ec:	d018      	beq.n	83820 <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   837ee:	eb0e 0001 	add.w	r0, lr, r1
   837f2:	7841      	ldrb	r1, [r0, #1]
   837f4:	f001 0008 	and.w	r0, r1, #8
   837f8:	b2c1      	uxtb	r1, r0
                nfa->stopIdx = nfa->i + 1;
   837fa:	2900      	cmp	r1, #0
   837fc:	bf08      	it	eq
   837fe:	462f      	moveq	r7, r5
   83800:	f104 0401 	add.w	r4, r4, #1
   83804:	f105 0501 	add.w	r5, r5, #1
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   83808:	5d31      	ldrb	r1, [r6, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   8380a:	2a00      	cmp	r2, #0
   8380c:	d076      	beq.n	838fc <locateStr+0x17c>
   8380e:	e089      	b.n	83924 <locateStr+0x1a4>
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;
   83810:	f04f 0700 	mov.w	r7, #0
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
   83814:	46b8      	mov	r8, r7
 * @param len2 length of result
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
   83816:	463a      	mov	r2, r7
   83818:	e004      	b.n	83824 <locateStr+0xa4>
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   8381a:	f04f 0204 	mov.w	r2, #4
   8381e:	e001      	b.n	83824 <locateStr+0xa4>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   83820:	f04f 0204 	mov.w	r2, #4
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
            break;
        }
    }

    if (isFinalState(nfa.state)) {
   83824:	4610      	mov	r0, r2
   83826:	f243 53c5 	movw	r3, #13765	; 0x35c5
   8382a:	f2c0 0308 	movt	r3, #8
   8382e:	4798      	blx	r3
   83830:	b168      	cbz	r0, 8384e <locateStr+0xce>

        if (str2) {
   83832:	9a01      	ldr	r2, [sp, #4]
   83834:	b10a      	cbz	r2, 8383a <locateStr+0xba>
            *str2 = &str1[nfa.startIdx];
   83836:	4446      	add	r6, r8
   83838:	6016      	str	r6, [r2, #0]
        }

        if (len2) {
   8383a:	f1b9 0f00 	cmp.w	r9, #0
   8383e:	d009      	beq.n	83854 <locateStr+0xd4>
            *len2 = nfa.stopIdx - nfa.startIdx;
   83840:	ebc8 0707 	rsb	r7, r8, r7
   83844:	f8c9 7000 	str.w	r7, [r9]
        }
        return TRUE;
   83848:	f04f 0001 	mov.w	r0, #1
   8384c:	e004      	b.n	83858 <locateStr+0xd8>
    }
    return FALSE;
   8384e:	f04f 0000 	mov.w	r0, #0
   83852:	e001      	b.n	83858 <locateStr+0xd8>
        }

        if (len2) {
            *len2 = nfa.stopIdx - nfa.startIdx;
        }
        return TRUE;
   83854:	f04f 0001 	mov.w	r0, #1
    }
    return FALSE;
}
   83858:	b003      	add	sp, #12
   8385a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   8385e:	eb0e 0c00 	add.w	ip, lr, r0
   83862:	f89c c001 	ldrb.w	ip, [ip, #1]
   83866:	f00c 0c08 	and.w	ip, ip, #8
   8386a:	fa5f fc8c 	uxtb.w	ip, ip
   8386e:	f1bc 0f00 	cmp.w	ip, #0
   83872:	d105      	bne.n	83880 <locateStr+0x100>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   83874:	282c      	cmp	r0, #44	; 0x2c
   83876:	d0d0      	beq.n	8381a <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   83878:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   8387a:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   8387c:	465a      	mov	r2, fp
   8387e:	e00e      	b.n	8389e <locateStr+0x11e>
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   83880:	462f      	mov	r7, r5
   83882:	46a8      	mov	r8, r5
   83884:	e00b      	b.n	8389e <locateStr+0x11e>
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   83886:	2c02      	cmp	r4, #2
   83888:	d109      	bne.n	8389e <locateStr+0x11e>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   8388a:	282c      	cmp	r0, #44	; 0x2c
   8388c:	d0c8      	beq.n	83820 <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   8388e:	4470      	add	r0, lr
   83890:	7840      	ldrb	r0, [r0, #1]
   83892:	f000 0008 	and.w	r0, r0, #8
   83896:	b2c0      	uxtb	r0, r0
                nfa->stopIdx = nfa->i + 1;
   83898:	2800      	cmp	r0, #0
   8389a:	bf08      	it	eq
   8389c:	462f      	moveq	r7, r5
   8389e:	f104 0401 	add.w	r4, r4, #1
   838a2:	f105 0501 	add.w	r5, r5, #1
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   838a6:	429c      	cmp	r4, r3
   838a8:	d0bc      	beq.n	83824 <locateStr+0xa4>
   838aa:	2900      	cmp	r1, #0
   838ac:	d088      	beq.n	837c0 <locateStr+0x40>
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   838ae:	5d31      	ldrb	r1, [r6, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   838b0:	b97a      	cbnz	r2, 838d2 <locateStr+0x152>
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   838b2:	eb0e 0001 	add.w	r0, lr, r1
   838b6:	7840      	ldrb	r0, [r0, #1]
   838b8:	f000 0008 	and.w	r0, r0, #8
   838bc:	b2c0      	uxtb	r0, r0
   838be:	b928      	cbnz	r0, 838cc <locateStr+0x14c>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   838c0:	292c      	cmp	r1, #44	; 0x2c
   838c2:	d0aa      	beq.n	8381a <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   838c4:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   838c6:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   838c8:	465a      	mov	r2, fp
   838ca:	e00f      	b.n	838ec <locateStr+0x16c>
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   838cc:	462f      	mov	r7, r5
   838ce:	46a8      	mov	r8, r5
   838d0:	e00c      	b.n	838ec <locateStr+0x16c>
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   838d2:	2a02      	cmp	r2, #2
   838d4:	d10a      	bne.n	838ec <locateStr+0x16c>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   838d6:	292c      	cmp	r1, #44	; 0x2c
   838d8:	d0a2      	beq.n	83820 <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   838da:	eb0e 0001 	add.w	r0, lr, r1
   838de:	7841      	ldrb	r1, [r0, #1]
   838e0:	f001 0008 	and.w	r0, r1, #8
   838e4:	b2c1      	uxtb	r1, r0
                nfa->stopIdx = nfa->i + 1;
   838e6:	2900      	cmp	r1, #0
   838e8:	bf08      	it	eq
   838ea:	462f      	moveq	r7, r5
   838ec:	f104 0401 	add.w	r4, r4, #1
   838f0:	f105 0501 	add.w	r5, r5, #1
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   838f4:	429c      	cmp	r4, r3
   838f6:	f47f af63 	bne.w	837c0 <locateStr+0x40>
   838fa:	e793      	b.n	83824 <locateStr+0xa4>
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   838fc:	eb0e 0a01 	add.w	sl, lr, r1
   83900:	f89a a001 	ldrb.w	sl, [sl, #1]
   83904:	f00a 0a08 	and.w	sl, sl, #8
   83908:	fa5f fa8a 	uxtb.w	sl, sl
   8390c:	f1ba 0f00 	cmp.w	sl, #0
   83910:	d105      	bne.n	8391e <locateStr+0x19e>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   83912:	292c      	cmp	r1, #44	; 0x2c
   83914:	d081      	beq.n	8381a <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   83916:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   83918:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   8391a:	465a      	mov	r2, fp
   8391c:	e00f      	b.n	8393e <locateStr+0x1be>
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   8391e:	462f      	mov	r7, r5
   83920:	46a8      	mov	r8, r5
   83922:	e00c      	b.n	8393e <locateStr+0x1be>
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   83924:	2a02      	cmp	r2, #2
   83926:	d10a      	bne.n	8393e <locateStr+0x1be>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   83928:	292c      	cmp	r1, #44	; 0x2c
   8392a:	f43f af79 	beq.w	83820 <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   8392e:	4471      	add	r1, lr
   83930:	7849      	ldrb	r1, [r1, #1]
   83932:	f001 0108 	and.w	r1, r1, #8
   83936:	b2c9      	uxtb	r1, r1
                nfa->stopIdx = nfa->i + 1;
   83938:	2900      	cmp	r1, #0
   8393a:	bf08      	it	eq
   8393c:	462f      	moveq	r7, r5
   8393e:	f104 0401 	add.w	r4, r4, #1
   83942:	f105 0501 	add.w	r5, r5, #1
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   83946:	429c      	cmp	r4, r3
   83948:	f47f af3a 	bne.w	837c0 <locateStr+0x40>
   8394c:	e76a      	b.n	83824 <locateStr+0xa4>
   8394e:	bf00      	nop

00083950 <skipWhitespace>:
 * Count white spaces from the beggining
 * @param cmd - command
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
   83950:	b470      	push	{r4, r5, r6}
    size_t i;
    for (i = 0; i < len; i++) {
   83952:	460e      	mov	r6, r1
   83954:	b311      	cbz	r1, 8399c <skipWhitespace+0x4c>
        if (!isspace((unsigned char)cmd[i])) {
   83956:	f240 23ac 	movw	r3, #684	; 0x2ac
   8395a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8395e:	681c      	ldr	r4, [r3, #0]
   83960:	7801      	ldrb	r1, [r0, #0]
   83962:	1862      	adds	r2, r4, r1
   83964:	7853      	ldrb	r3, [r2, #1]
   83966:	f003 0108 	and.w	r1, r3, #8
   8396a:	b2ca      	uxtb	r2, r1
   8396c:	b1c2      	cbz	r2, 839a0 <skipWhitespace+0x50>
   8396e:	4603      	mov	r3, r0
   83970:	f04f 0000 	mov.w	r0, #0
   83974:	f016 0f01 	tst.w	r6, #1
   83978:	d109      	bne.n	8398e <skipWhitespace+0x3e>
   8397a:	e015      	b.n	839a8 <skipWhitespace+0x58>
   8397c:	f813 5f01 	ldrb.w	r5, [r3, #1]!
   83980:	1961      	adds	r1, r4, r5
   83982:	784d      	ldrb	r5, [r1, #1]
   83984:	f005 0108 	and.w	r1, r5, #8
   83988:	b2cd      	uxtb	r5, r1
   8398a:	b9cd      	cbnz	r5, 839c0 <skipWhitespace+0x70>
   8398c:	e00a      	b.n	839a4 <skipWhitespace+0x54>
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   8398e:	f100 0201 	add.w	r2, r0, #1
   83992:	4610      	mov	r0, r2
   83994:	42b2      	cmp	r2, r6
   83996:	d1f1      	bne.n	8397c <skipWhitespace+0x2c>
        if (!isspace((unsigned char)cmd[i])) {
            return i;
        }
    }
    return len;
   83998:	4630      	mov	r0, r6
   8399a:	e003      	b.n	839a4 <skipWhitespace+0x54>
   8399c:	4608      	mov	r0, r1
   8399e:	e001      	b.n	839a4 <skipWhitespace+0x54>
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   839a0:	f04f 0000 	mov.w	r0, #0
        if (!isspace((unsigned char)cmd[i])) {
            return i;
        }
    }
    return len;
}
   839a4:	bc70      	pop	{r4, r5, r6}
   839a6:	4770      	bx	lr
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   839a8:	f100 0001 	add.w	r0, r0, #1
        if (!isspace((unsigned char)cmd[i])) {
   839ac:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   839b0:	1862      	adds	r2, r4, r1
   839b2:	7851      	ldrb	r1, [r2, #1]
   839b4:	f001 0208 	and.w	r2, r1, #8
   839b8:	b2d1      	uxtb	r1, r2
   839ba:	2900      	cmp	r1, #0
   839bc:	d1e7      	bne.n	8398e <skipWhitespace+0x3e>
   839be:	e7f1      	b.n	839a4 <skipWhitespace+0x54>
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   839c0:	f102 0001 	add.w	r0, r2, #1
        if (!isspace((unsigned char)cmd[i])) {
   839c4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   839c8:	18a1      	adds	r1, r4, r2
   839ca:	784a      	ldrb	r2, [r1, #1]
   839cc:	f002 0108 	and.w	r1, r2, #8
   839d0:	b2ca      	uxtb	r2, r1
   839d2:	2a00      	cmp	r2, #0
   839d4:	d1db      	bne.n	8398e <skipWhitespace+0x3e>
   839d6:	e7e5      	b.n	839a4 <skipWhitespace+0x54>

000839d8 <matchPattern>:
 * @param pattern_len
 * @param str
 * @param str_len
 * @return 
 */
bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
   839d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   839dc:	4680      	mov	r8, r0
   839de:	4691      	mov	r9, r2
   839e0:	469a      	mov	sl, r3
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   839e2:	468e      	mov	lr, r1
   839e4:	b321      	cbz	r1, 83a30 <matchPattern+0x58>
   839e6:	7803      	ldrb	r3, [r0, #0]
   839e8:	b32b      	cbz	r3, 83a36 <matchPattern+0x5e>
        if (islower((unsigned char)pattern[i])) {
   839ea:	f240 22ac 	movw	r2, #684	; 0x2ac
   839ee:	f2c2 0207 	movt	r2, #8199	; 0x2007
   839f2:	6810      	ldr	r0, [r2, #0]
   839f4:	18c1      	adds	r1, r0, r3
   839f6:	784c      	ldrb	r4, [r1, #1]
   839f8:	f004 0503 	and.w	r5, r4, #3
   839fc:	2d02      	cmp	r5, #2
   839fe:	d01d      	beq.n	83a3c <matchPattern+0x64>
   83a00:	4642      	mov	r2, r8
   83a02:	f04f 0400 	mov.w	r4, #0
   83a06:	f01e 0f01 	tst.w	lr, #1
   83a0a:	d107      	bne.n	83a1c <matchPattern+0x44>
   83a0c:	e02f      	b.n	83a6e <matchPattern+0x96>
   83a0e:	19c7      	adds	r7, r0, r7
   83a10:	7879      	ldrb	r1, [r7, #1]
   83a12:	f001 0503 	and.w	r5, r1, #3
   83a16:	2d02      	cmp	r5, #2
   83a18:	d136      	bne.n	83a88 <matchPattern+0xb0>
   83a1a:	e011      	b.n	83a40 <matchPattern+0x68>
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   83a1c:	f104 0601 	add.w	r6, r4, #1
   83a20:	4634      	mov	r4, r6
   83a22:	4576      	cmp	r6, lr
   83a24:	d00c      	beq.n	83a40 <matchPattern+0x68>
   83a26:	f812 7f01 	ldrb.w	r7, [r2, #1]!
   83a2a:	2f00      	cmp	r7, #0
   83a2c:	d1ef      	bne.n	83a0e <matchPattern+0x36>
   83a2e:	e007      	b.n	83a40 <matchPattern+0x68>
   83a30:	f04f 0400 	mov.w	r4, #0
   83a34:	e004      	b.n	83a40 <matchPattern+0x68>
   83a36:	f04f 0400 	mov.w	r4, #0
   83a3a:	e001      	b.n	83a40 <matchPattern+0x68>
   83a3c:	f04f 0400 	mov.w	r4, #0
 * @param str_len
 * @return 
 */
bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
    int pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
    return compareStr(pattern, pattern_len, str, str_len) ||
   83a40:	4640      	mov	r0, r8
   83a42:	4671      	mov	r1, lr
   83a44:	464a      	mov	r2, r9
   83a46:	4653      	mov	r3, sl
   83a48:	f243 7559 	movw	r5, #14169	; 0x3759
   83a4c:	f2c0 0508 	movt	r5, #8
   83a50:	47a8      	blx	r5
   83a52:	b930      	cbnz	r0, 83a62 <matchPattern+0x8a>
            compareStr(pattern, pattern_sep_pos_short, str, str_len);
   83a54:	4640      	mov	r0, r8
   83a56:	4621      	mov	r1, r4
   83a58:	464a      	mov	r2, r9
   83a5a:	4653      	mov	r3, sl
   83a5c:	462c      	mov	r4, r5
   83a5e:	47a8      	blx	r5
   83a60:	e001      	b.n	83a66 <matchPattern+0x8e>
 * @param str_len
 * @return 
 */
bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
    int pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
    return compareStr(pattern, pattern_len, str, str_len) ||
   83a62:	f04f 0001 	mov.w	r0, #1
            compareStr(pattern, pattern_sep_pos_short, str, str_len);
}
   83a66:	f000 0001 	and.w	r0, r0, #1
   83a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   83a6e:	f104 0401 	add.w	r4, r4, #1
   83a72:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   83a76:	2b00      	cmp	r3, #0
   83a78:	d0e2      	beq.n	83a40 <matchPattern+0x68>
        if (islower((unsigned char)pattern[i])) {
   83a7a:	18c1      	adds	r1, r0, r3
   83a7c:	784d      	ldrb	r5, [r1, #1]
   83a7e:	f005 0303 	and.w	r3, r5, #3
   83a82:	2b02      	cmp	r3, #2
   83a84:	d1ca      	bne.n	83a1c <matchPattern+0x44>
   83a86:	e7db      	b.n	83a40 <matchPattern+0x68>
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   83a88:	f106 0401 	add.w	r4, r6, #1
   83a8c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   83a90:	2b00      	cmp	r3, #0
   83a92:	d0d5      	beq.n	83a40 <matchPattern+0x68>
        if (islower((unsigned char)pattern[i])) {
   83a94:	18c1      	adds	r1, r0, r3
   83a96:	784d      	ldrb	r5, [r1, #1]
   83a98:	f005 0303 	and.w	r3, r5, #3
   83a9c:	2b02      	cmp	r3, #2
   83a9e:	d1bd      	bne.n	83a1c <matchPattern+0x44>
   83aa0:	e7ce      	b.n	83a40 <matchPattern+0x68>
   83aa2:	bf00      	nop

00083aa4 <matchCommand>:
 * @param pattern
 * @param cmd - command
 * @param len - max search length
 * @return TRUE if pattern matches, FALSE otherwise
 */
bool_t matchCommand(const char * pattern, const char * cmd, size_t len) {
   83aa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83aa8:	4605      	mov	r5, r0
   83aaa:	460c      	mov	r4, r1
   83aac:	4616      	mov	r6, r2
    int result = FALSE;
    
    const char * pattern_ptr = pattern;
    int pattern_len = strlen(pattern);
   83aae:	f64a 03a5 	movw	r3, #43173	; 0xa8a5
   83ab2:	f2c0 0308 	movt	r3, #8
   83ab6:	4798      	blx	r3
    const char * pattern_end = pattern + pattern_len;
   83ab8:	eb05 0900 	add.w	r9, r5, r0
    
    const char * cmd_ptr = cmd;
    size_t cmd_len = SCPI_strnlen(cmd, len);
   83abc:	4620      	mov	r0, r4
   83abe:	4631      	mov	r1, r6
   83ac0:	f64a 1227 	movw	r2, #43303	; 0xa927
   83ac4:	f2c0 0208 	movt	r2, #8
   83ac8:	4790      	blx	r2
    const char * cmd_end = cmd + cmd_len;
   83aca:	eb04 0a00 	add.w	sl, r4, r0
    
    /* TODO: now it is possible to send command ":*IDN?" which is incorrect */
    if (iscolon(cmd_ptr[0])) {
   83ace:	7820      	ldrb	r0, [r4, #0]
   83ad0:	283a      	cmp	r0, #58	; 0x3a
        cmd_len --;
        cmd_ptr ++;
   83ad2:	bf08      	it	eq
   83ad4:	3401      	addeq	r4, #1
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorPos(const char * pattern, size_t len) {
    
    char * separator = strnpbrk(pattern, len, "?:[]");
   83ad6:	f24d 5bf4 	movw	fp, #54772	; 0xd5f4
   83ada:	f2c0 0b08 	movt	fp, #8
   83ade:	f243 58e1 	movw	r8, #13793	; 0x35e1
   83ae2:	f2c0 0808 	movt	r8, #8
        cmd_len --;
        cmd_ptr ++;
    }
    
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
   83ae6:	ebc5 0709 	rsb	r7, r5, r9
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorPos(const char * pattern, size_t len) {
    
    char * separator = strnpbrk(pattern, len, "?:[]");
   83aea:	4628      	mov	r0, r5
   83aec:	4639      	mov	r1, r7
   83aee:	465a      	mov	r2, fp
   83af0:	47c0      	blx	r8
    if (separator == NULL) {
   83af2:	b100      	cbz	r0, 83af6 <matchCommand+0x52>
        return len;
    } else {
        return separator - pattern;
   83af4:	1b47      	subs	r7, r0, r5
        cmd_ptr ++;
    }
    
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
        int cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_end - cmd_ptr);
   83af6:	ebc4 060a 	rsb	r6, r4, sl
 * @param cmd - input command
 * @param len - max search length
 * @return position of separator or len
 */
size_t cmdSeparatorPos(const char * cmd, size_t len) {
    char * separator = strnpbrk(cmd, len, ":?");
   83afa:	4620      	mov	r0, r4
   83afc:	4631      	mov	r1, r6
   83afe:	4a1b      	ldr	r2, [pc, #108]	; (83b6c <matchCommand+0xc8>)
   83b00:	47c0      	blx	r8
    size_t result;
    if (separator == NULL) {
   83b02:	b100      	cbz	r0, 83b06 <matchCommand+0x62>
        result = len;
    } else {
        result = separator - cmd;
   83b04:	1b06      	subs	r6, r0, r4
    
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
        int cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_end - cmd_ptr);
        
        if (matchPattern(pattern_ptr, pattern_sep_pos, cmd_ptr, cmd_sep_pos)) {
   83b06:	4628      	mov	r0, r5
   83b08:	4639      	mov	r1, r7
   83b0a:	4622      	mov	r2, r4
   83b0c:	4633      	mov	r3, r6
   83b0e:	f643 1cd9 	movw	ip, #14809	; 0x39d9
   83b12:	f2c0 0c08 	movt	ip, #8
   83b16:	47e0      	blx	ip
   83b18:	b1c0      	cbz	r0, 83b4c <matchCommand+0xa8>
            pattern_ptr = pattern_ptr + pattern_sep_pos;
   83b1a:	19ed      	adds	r5, r5, r7
            cmd_ptr = cmd_ptr + cmd_sep_pos;
   83b1c:	19a4      	adds	r4, r4, r6
            result = TRUE;
            
            /* command is complete */
            if ((pattern_ptr == pattern_end) && (cmd_ptr >= cmd_end)) {
   83b1e:	454d      	cmp	r5, r9
   83b20:	d105      	bne.n	83b2e <matchCommand+0x8a>
   83b22:	45a2      	cmp	sl, r4
   83b24:	bf8c      	ite	hi
   83b26:	2000      	movhi	r0, #0
   83b28:	2001      	movls	r0, #1
   83b2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                result = FALSE;
                break;
            }
            
            /* command complete, but pattern not */
            if (cmd_ptr >= cmd_end) {
   83b2e:	45a2      	cmp	sl, r4
   83b30:	d910      	bls.n	83b54 <matchCommand+0xb0>
                result = FALSE;
                break;
            }
            
            /* both command and patter contains command separator at this position */
            if ((pattern_ptr[0] == cmd_ptr[0]) && ((pattern_ptr[0] == ':') || (pattern_ptr[0] == '?'))) {
   83b32:	7828      	ldrb	r0, [r5, #0]
   83b34:	7822      	ldrb	r2, [r4, #0]
   83b36:	4282      	cmp	r2, r0
   83b38:	d110      	bne.n	83b5c <matchCommand+0xb8>
   83b3a:	283a      	cmp	r0, #58	; 0x3a
   83b3c:	d001      	beq.n	83b42 <matchCommand+0x9e>
   83b3e:	283f      	cmp	r0, #63	; 0x3f
   83b40:	d110      	bne.n	83b64 <matchCommand+0xc0>
                pattern_ptr = pattern_ptr + 1;
   83b42:	f105 0501 	add.w	r5, r5, #1
                cmd_ptr = cmd_ptr + 1;
   83b46:	f104 0401 	add.w	r4, r4, #1
   83b4a:	e7cc      	b.n	83ae6 <matchCommand+0x42>
            } else {
                result = FALSE;
                break;
            }
        } else {
            result = FALSE;
   83b4c:	f04f 0000 	mov.w	r0, #0
   83b50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                break;
            }
            
            /* command complete, but pattern not */
            if (cmd_ptr >= cmd_end) {
                result = FALSE;
   83b54:	f04f 0000 	mov.w	r0, #0
   83b58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            /* both command and patter contains command separator at this position */
            if ((pattern_ptr[0] == cmd_ptr[0]) && ((pattern_ptr[0] == ':') || (pattern_ptr[0] == '?'))) {
                pattern_ptr = pattern_ptr + 1;
                cmd_ptr = cmd_ptr + 1;
            } else {
                result = FALSE;
   83b5c:	f04f 0000 	mov.w	r0, #0
   83b60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83b64:	f04f 0000 	mov.w	r0, #0
            break;
        }
    }
    
    return result;
}
   83b68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83b6c:	0008d5fc 	.word	0x0008d5fc

00083b70 <SCPI_GetModuleType>:
 #include <string.h>
 #include <math.h>
 #include "asf.h"
 
 scpi_result_t SCPI_GetModuleType(scpi_t * context)
 {
   83b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 printf("Low cost dual 10MHz counters v1\x0D");
   83b72:	f24d 6700 	movw	r7, #54784	; 0xd600
   83b76:	f2c0 0708 	movt	r7, #8
   83b7a:	f641 3578 	movw	r5, #7032	; 0x1b78
   83b7e:	f2c2 0507 	movt	r5, #8199	; 0x2007
   83b82:	463c      	mov	r4, r7
   83b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   83b86:	6028      	str	r0, [r5, #0]
   83b88:	6069      	str	r1, [r5, #4]
   83b8a:	60aa      	str	r2, [r5, #8]
   83b8c:	60eb      	str	r3, [r5, #12]
   83b8e:	f105 0510 	add.w	r5, r5, #16
   83b92:	462e      	mov	r6, r5
   83b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   83b96:	6028      	str	r0, [r5, #0]
   83b98:	6069      	str	r1, [r5, #4]
   83b9a:	60aa      	str	r2, [r5, #8]
   83b9c:	60eb      	str	r3, [r5, #12]
   83b9e:	4627      	mov	r7, r4
   83ba0:	7823      	ldrb	r3, [r4, #0]
   83ba2:	742b      	strb	r3, [r5, #16]
   83ba4:	f641 3078 	movw	r0, #7032	; 0x1b78
   83ba8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83bac:	f644 517d 	movw	r1, #19837	; 0x4d7d
   83bb0:	f2c0 0108 	movt	r1, #8
   83bb4:	4788      	blx	r1
	 return SCPI_RES_OK;
 }
   83bb6:	f04f 0001 	mov.w	r0, #1
   83bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00083bbc <SCPI_GetModuleName>:

scpi_result_t SCPI_GetModuleName(scpi_t * context)
{
   83bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("Low cost dual 10MHz counters v1\x0D");
   83bbe:	f24d 6700 	movw	r7, #54784	; 0xd600
   83bc2:	f2c0 0708 	movt	r7, #8
   83bc6:	f641 3578 	movw	r5, #7032	; 0x1b78
   83bca:	f2c2 0507 	movt	r5, #8199	; 0x2007
   83bce:	463c      	mov	r4, r7
   83bd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   83bd2:	6028      	str	r0, [r5, #0]
   83bd4:	6069      	str	r1, [r5, #4]
   83bd6:	60aa      	str	r2, [r5, #8]
   83bd8:	60eb      	str	r3, [r5, #12]
   83bda:	f105 0510 	add.w	r5, r5, #16
   83bde:	462e      	mov	r6, r5
   83be0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   83be2:	6028      	str	r0, [r5, #0]
   83be4:	6069      	str	r1, [r5, #4]
   83be6:	60aa      	str	r2, [r5, #8]
   83be8:	60eb      	str	r3, [r5, #12]
   83bea:	4627      	mov	r7, r4
   83bec:	7823      	ldrb	r3, [r4, #0]
   83bee:	742b      	strb	r3, [r5, #16]
   83bf0:	f641 3078 	movw	r0, #7032	; 0x1b78
   83bf4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83bf8:	f644 517d 	movw	r1, #19837	; 0x4d7d
   83bfc:	f2c0 0108 	movt	r1, #8
   83c00:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83c02:	f04f 0001 	mov.w	r0, #1
   83c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00083c08 <SCPI_GetModuleDescription>:

scpi_result_t SCPI_GetModuleDescription(scpi_t * context)
{
   83c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("Low cost dual 10MHz counters v1\x0D");
   83c0a:	f24d 6700 	movw	r7, #54784	; 0xd600
   83c0e:	f2c0 0708 	movt	r7, #8
   83c12:	f641 3578 	movw	r5, #7032	; 0x1b78
   83c16:	f2c2 0507 	movt	r5, #8199	; 0x2007
   83c1a:	463c      	mov	r4, r7
   83c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   83c1e:	6028      	str	r0, [r5, #0]
   83c20:	6069      	str	r1, [r5, #4]
   83c22:	60aa      	str	r2, [r5, #8]
   83c24:	60eb      	str	r3, [r5, #12]
   83c26:	f105 0510 	add.w	r5, r5, #16
   83c2a:	462e      	mov	r6, r5
   83c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   83c2e:	6028      	str	r0, [r5, #0]
   83c30:	6069      	str	r1, [r5, #4]
   83c32:	60aa      	str	r2, [r5, #8]
   83c34:	60eb      	str	r3, [r5, #12]
   83c36:	4627      	mov	r7, r4
   83c38:	7823      	ldrb	r3, [r4, #0]
   83c3a:	742b      	strb	r3, [r5, #16]
   83c3c:	f641 3078 	movw	r0, #7032	; 0x1b78
   83c40:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83c44:	f644 517d 	movw	r1, #19837	; 0x4d7d
   83c48:	f2c0 0108 	movt	r1, #8
   83c4c:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83c4e:	f04f 0001 	mov.w	r0, #1
   83c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00083c54 <SCPI_GetModuleSN>:

scpi_result_t SCPI_GetModuleSN(scpi_t * context)
{
   83c54:	b508      	push	{r3, lr}
	printf("0x0000\x0D");
   83c56:	f641 3278 	movw	r2, #7032	; 0x1b78
   83c5a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83c5e:	f24d 6324 	movw	r3, #54820	; 0xd624
   83c62:	f2c0 0308 	movt	r3, #8
   83c66:	cb03      	ldmia	r3!, {r0, r1}
   83c68:	6010      	str	r0, [r2, #0]
   83c6a:	6051      	str	r1, [r2, #4]
   83c6c:	4610      	mov	r0, r2
   83c6e:	f644 517d 	movw	r1, #19837	; 0x4d7d
   83c72:	f2c0 0108 	movt	r1, #8
   83c76:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83c78:	f04f 0001 	mov.w	r0, #1
   83c7c:	bd08      	pop	{r3, pc}
   83c7e:	bf00      	nop

00083c80 <SCPI_GetDissipatedPower>:

scpi_result_t SCPI_GetDissipatedPower(scpi_t * context)
{
   83c80:	b508      	push	{r3, lr}
	printf("840mW\x0D");
   83c82:	f641 3378 	movw	r3, #7032	; 0x1b78
   83c86:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83c8a:	f24d 622c 	movw	r2, #54828	; 0xd62c
   83c8e:	f2c0 0208 	movt	r2, #8
   83c92:	6810      	ldr	r0, [r2, #0]
   83c94:	6018      	str	r0, [r3, #0]
   83c96:	8891      	ldrh	r1, [r2, #4]
   83c98:	7992      	ldrb	r2, [r2, #6]
   83c9a:	8099      	strh	r1, [r3, #4]
   83c9c:	719a      	strb	r2, [r3, #6]
   83c9e:	4618      	mov	r0, r3
   83ca0:	f644 537d 	movw	r3, #19837	; 0x4d7d
   83ca4:	f2c0 0308 	movt	r3, #8
   83ca8:	4798      	blx	r3
	return SCPI_RES_OK;
}
   83caa:	f04f 0001 	mov.w	r0, #1
   83cae:	bd08      	pop	{r3, pc}

00083cb0 <SCPI_GetMaxCurrent>:

scpi_result_t SCPI_GetMaxCurrent(scpi_t * context)
{
   83cb0:	b508      	push	{r3, lr}
	printf("0mA\x0D");
   83cb2:	f641 3378 	movw	r3, #7032	; 0x1b78
   83cb6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83cba:	f24d 6234 	movw	r2, #54836	; 0xd634
   83cbe:	f2c0 0208 	movt	r2, #8
   83cc2:	6810      	ldr	r0, [r2, #0]
   83cc4:	6018      	str	r0, [r3, #0]
   83cc6:	7911      	ldrb	r1, [r2, #4]
   83cc8:	7119      	strb	r1, [r3, #4]
   83cca:	4618      	mov	r0, r3
   83ccc:	f644 537d 	movw	r3, #19837	; 0x4d7d
   83cd0:	f2c0 0308 	movt	r3, #8
   83cd4:	4798      	blx	r3
	return SCPI_RES_OK;
}
   83cd6:	f04f 0001 	mov.w	r0, #1
   83cda:	bd08      	pop	{r3, pc}

00083cdc <SCPI_GetNomCurrent>:

scpi_result_t SCPI_GetNomCurrent(scpi_t * context)
{
   83cdc:	b508      	push	{r3, lr}
	printf("0mA\x0D");
   83cde:	f641 3378 	movw	r3, #7032	; 0x1b78
   83ce2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83ce6:	f24d 6234 	movw	r2, #54836	; 0xd634
   83cea:	f2c0 0208 	movt	r2, #8
   83cee:	6810      	ldr	r0, [r2, #0]
   83cf0:	6018      	str	r0, [r3, #0]
   83cf2:	7911      	ldrb	r1, [r2, #4]
   83cf4:	7119      	strb	r1, [r3, #4]
   83cf6:	4618      	mov	r0, r3
   83cf8:	f644 537d 	movw	r3, #19837	; 0x4d7d
   83cfc:	f2c0 0308 	movt	r3, #8
   83d00:	4798      	blx	r3
	return SCPI_RES_OK;
}
   83d02:	f04f 0001 	mov.w	r0, #1
   83d06:	bd08      	pop	{r3, pc}

00083d08 <SCPI_GetSDCardStatus>:

scpi_result_t SCPI_GetSDCardStatus(scpi_t * context)
{
   83d08:	b508      	push	{r3, lr}
	printf("OK\x0D");
   83d0a:	f641 3378 	movw	r3, #7032	; 0x1b78
   83d0e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83d12:	f24d 623c 	movw	r2, #54844	; 0xd63c
   83d16:	f2c0 0208 	movt	r2, #8
   83d1a:	6810      	ldr	r0, [r2, #0]
   83d1c:	6018      	str	r0, [r3, #0]
   83d1e:	4618      	mov	r0, r3
   83d20:	f644 517d 	movw	r1, #19837	; 0x4d7d
   83d24:	f2c0 0108 	movt	r1, #8
   83d28:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83d2a:	f04f 0001 	mov.w	r0, #1
   83d2e:	bd08      	pop	{r3, pc}

00083d30 <SCPI_LedStatus>:

scpi_result_t SCPI_LedStatus(scpi_t * context)
{
   83d30:	b508      	push	{r3, lr}
	printf("OK\x0D");
   83d32:	f641 3378 	movw	r3, #7032	; 0x1b78
   83d36:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83d3a:	f24d 623c 	movw	r2, #54844	; 0xd63c
   83d3e:	f2c0 0208 	movt	r2, #8
   83d42:	6810      	ldr	r0, [r2, #0]
   83d44:	6018      	str	r0, [r3, #0]
   83d46:	4618      	mov	r0, r3
   83d48:	f644 517d 	movw	r1, #19837	; 0x4d7d
   83d4c:	f2c0 0108 	movt	r1, #8
   83d50:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83d52:	f04f 0001 	mov.w	r0, #1
   83d56:	bd08      	pop	{r3, pc}

00083d58 <SCPI_ButtonStatus>:

scpi_result_t SCPI_ButtonStatus(scpi_t * context)
{
   83d58:	b508      	push	{r3, lr}
	if(get_user_button_status() == RETURN_OK)
   83d5a:	f642 0315 	movw	r3, #10261	; 0x2815
   83d5e:	f2c0 0308 	movt	r3, #8
   83d62:	4798      	blx	r3
   83d64:	2801      	cmp	r0, #1
   83d66:	d111      	bne.n	83d8c <SCPI_ButtonStatus+0x34>
	{
		printf("pushed\x0D");
   83d68:	f641 3278 	movw	r2, #7032	; 0x1b78
   83d6c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83d70:	f24d 6340 	movw	r3, #54848	; 0xd640
   83d74:	f2c0 0308 	movt	r3, #8
   83d78:	cb03      	ldmia	r3!, {r0, r1}
   83d7a:	6010      	str	r0, [r2, #0]
   83d7c:	6051      	str	r1, [r2, #4]
   83d7e:	4610      	mov	r0, r2
   83d80:	f644 517d 	movw	r1, #19837	; 0x4d7d
   83d84:	f2c0 0108 	movt	r1, #8
   83d88:	4788      	blx	r1
   83d8a:	e012      	b.n	83db2 <SCPI_ButtonStatus+0x5a>
	} 
	else
	{
		printf("released\x0D");
   83d8c:	f641 3278 	movw	r2, #7032	; 0x1b78
   83d90:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83d94:	f24d 6348 	movw	r3, #54856	; 0xd648
   83d98:	f2c0 0308 	movt	r3, #8
   83d9c:	cb03      	ldmia	r3!, {r0, r1}
   83d9e:	6010      	str	r0, [r2, #0]
   83da0:	6051      	str	r1, [r2, #4]
   83da2:	8818      	ldrh	r0, [r3, #0]
   83da4:	8110      	strh	r0, [r2, #8]
   83da6:	4610      	mov	r0, r2
   83da8:	f644 517d 	movw	r1, #19837	; 0x4d7d
   83dac:	f2c0 0108 	movt	r1, #8
   83db0:	4788      	blx	r1
	}
	return SCPI_RES_OK;
}
   83db2:	f04f 0001 	mov.w	r0, #1
   83db6:	bd08      	pop	{r3, pc}

00083db8 <SCPI_EEPROM_Read>:

scpi_result_t SCPI_EEPROM_Read(scpi_t * context)
{
	// TBD...
	return SCPI_RES_OK;
}
   83db8:	f04f 0001 	mov.w	r0, #1
   83dbc:	4770      	bx	lr
   83dbe:	bf00      	nop

00083dc0 <SCPI_EEPROM_Write>:

scpi_result_t SCPI_EEPROM_Write(scpi_t * context)
{
	// TBD...
	return SCPI_RES_OK;
}
   83dc0:	f04f 0001 	mov.w	r0, #1
   83dc4:	4770      	bx	lr
   83dc6:	bf00      	nop

00083dc8 <SCPI_SetPower>:

scpi_result_t SCPI_SetPower(scpi_t * context)
{
   83dc8:	b530      	push	{r4, r5, lr}
   83dca:	b083      	sub	sp, #12
	const char * param;
	size_t param_len;

	if(!SCPI_ParamString(context, &param, &param_len, true)) 
   83dcc:	a901      	add	r1, sp, #4
   83dce:	466a      	mov	r2, sp
   83dd0:	f04f 0301 	mov.w	r3, #1
   83dd4:	f243 44f9 	movw	r4, #13561	; 0x34f9
   83dd8:	f2c0 0408 	movt	r4, #8
   83ddc:	47a0      	blx	r4
   83dde:	2800      	cmp	r0, #0
   83de0:	d039      	beq.n	83e56 <SCPI_SetPower+0x8e>
		return SCPI_RES_ERR;
		
	if(param_len >= 2)
   83de2:	9c00      	ldr	r4, [sp, #0]
   83de4:	2c01      	cmp	r4, #1
   83de6:	d939      	bls.n	83e5c <SCPI_SetPower+0x94>
	{
		if(strncmp(param, "ON", 2) == 0)
   83de8:	9d01      	ldr	r5, [sp, #4]
   83dea:	4628      	mov	r0, r5
   83dec:	f24d 6154 	movw	r1, #54868	; 0xd654
   83df0:	f2c0 0108 	movt	r1, #8
   83df4:	f04f 0202 	mov.w	r2, #2
   83df8:	f64a 03f9 	movw	r3, #43257	; 0xa8f9
   83dfc:	f2c0 0308 	movt	r3, #8
   83e00:	4798      	blx	r3
   83e02:	b960      	cbnz	r0, 83e1e <SCPI_SetPower+0x56>
		{
			enable_12v();
   83e04:	f642 0329 	movw	r3, #10281	; 0x2829
   83e08:	f2c0 0308 	movt	r3, #8
   83e0c:	4798      	blx	r3
			init_module_peripherals_ap();
   83e0e:	f242 6061 	movw	r0, #9825	; 0x2661
   83e12:	f2c0 0008 	movt	r0, #8
   83e16:	4780      	blx	r0
			return SCPI_RES_OK;
   83e18:	f04f 0001 	mov.w	r0, #1
   83e1c:	e026      	b.n	83e6c <SCPI_SetPower+0xa4>
		}
		else if((param_len > 2) && (strncmp(param, "OFF", 3) == 0))
   83e1e:	2c02      	cmp	r4, #2
   83e20:	d91f      	bls.n	83e62 <SCPI_SetPower+0x9a>
   83e22:	4628      	mov	r0, r5
   83e24:	f24d 6158 	movw	r1, #54872	; 0xd658
   83e28:	f2c0 0108 	movt	r1, #8
   83e2c:	f04f 0203 	mov.w	r2, #3
   83e30:	f64a 03f9 	movw	r3, #43257	; 0xa8f9
   83e34:	f2c0 0308 	movt	r3, #8
   83e38:	4798      	blx	r3
   83e3a:	b9a8      	cbnz	r0, 83e68 <SCPI_SetPower+0xa0>
		{
			deinit_module_peripherals();
   83e3c:	f242 6165 	movw	r1, #9829	; 0x2665
   83e40:	f2c0 0108 	movt	r1, #8
   83e44:	4788      	blx	r1
			disable_12v();
   83e46:	f642 0239 	movw	r2, #10297	; 0x2839
   83e4a:	f2c0 0208 	movt	r2, #8
   83e4e:	4790      	blx	r2
			return SCPI_RES_OK;
   83e50:	f04f 0001 	mov.w	r0, #1
   83e54:	e00a      	b.n	83e6c <SCPI_SetPower+0xa4>
{
	const char * param;
	size_t param_len;

	if(!SCPI_ParamString(context, &param, &param_len, true)) 
		return SCPI_RES_ERR;
   83e56:	f04f 00ff 	mov.w	r0, #255	; 0xff
   83e5a:	e007      	b.n	83e6c <SCPI_SetPower+0xa4>
			return SCPI_RES_ERR;
		}
	}
	else
	{
		return SCPI_RES_OK;
   83e5c:	f04f 0001 	mov.w	r0, #1
   83e60:	e004      	b.n	83e6c <SCPI_SetPower+0xa4>
			disable_12v();
			return SCPI_RES_OK;
		}
		else
		{
			return SCPI_RES_ERR;
   83e62:	f04f 00ff 	mov.w	r0, #255	; 0xff
   83e66:	e001      	b.n	83e6c <SCPI_SetPower+0xa4>
   83e68:	f04f 00ff 	mov.w	r0, #255	; 0xff
	{
		return SCPI_RES_OK;
	}
	
	return SCPI_RES_OK;
}
   83e6c:	b240      	sxtb	r0, r0
   83e6e:	b003      	add	sp, #12
   83e70:	bd30      	pop	{r4, r5, pc}
   83e72:	bf00      	nop

00083e74 <SCPI_SetUserLed>:

scpi_result_t SCPI_SetUserLed(scpi_t * context)
{
   83e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83e78:	b084      	sub	sp, #16
   83e7a:	4604      	mov	r4, r0
	uint32_t param1, param2, param3;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
   83e7c:	a903      	add	r1, sp, #12
   83e7e:	f04f 0201 	mov.w	r2, #1
   83e82:	f243 5369 	movw	r3, #13673	; 0x3569
   83e86:	f2c0 0308 	movt	r3, #8
   83e8a:	4798      	blx	r3
   83e8c:	2800      	cmp	r0, #0
   83e8e:	d046      	beq.n	83f1e <SCPI_SetUserLed+0xaa>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}

	// read second paraeter if present
	if (!SCPI_ParamInt(context, &param2, true)) {
   83e90:	4620      	mov	r0, r4
   83e92:	a902      	add	r1, sp, #8
   83e94:	f04f 0201 	mov.w	r2, #1
   83e98:	f243 5369 	movw	r3, #13673	; 0x3569
   83e9c:	f2c0 0308 	movt	r3, #8
   83ea0:	4798      	blx	r3
   83ea2:	2800      	cmp	r0, #0
   83ea4:	d03e      	beq.n	83f24 <SCPI_SetUserLed+0xb0>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}

	// read second paraeter if present
	if (!SCPI_ParamInt(context, &param3, true)) {
   83ea6:	4620      	mov	r0, r4
   83ea8:	a901      	add	r1, sp, #4
   83eaa:	f04f 0201 	mov.w	r2, #1
   83eae:	f243 5369 	movw	r3, #13673	; 0x3569
   83eb2:	f2c0 0308 	movt	r3, #8
   83eb6:	4798      	blx	r3
   83eb8:	2800      	cmp	r0, #0
   83eba:	d036      	beq.n	83f2a <SCPI_SetUserLed+0xb6>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}

	set_user_led_colour((uint16_t)round(param1), (uint16_t)round(param2), (uint16_t)round(param3));
   83ebc:	f24a 5959 	movw	r9, #42329	; 0xa559
   83ec0:	f2c0 0908 	movt	r9, #8
   83ec4:	9803      	ldr	r0, [sp, #12]
   83ec6:	47c8      	blx	r9
   83ec8:	f24a 2841 	movw	r8, #41537	; 0xa241
   83ecc:	f2c0 0808 	movt	r8, #8
   83ed0:	47c0      	blx	r8
   83ed2:	4606      	mov	r6, r0
   83ed4:	460f      	mov	r7, r1
   83ed6:	9802      	ldr	r0, [sp, #8]
   83ed8:	47c8      	blx	r9
   83eda:	47c0      	blx	r8
   83edc:	4604      	mov	r4, r0
   83ede:	460d      	mov	r5, r1
   83ee0:	9801      	ldr	r0, [sp, #4]
   83ee2:	47c8      	blx	r9
   83ee4:	47c0      	blx	r8
   83ee6:	4680      	mov	r8, r0
   83ee8:	4689      	mov	r9, r1
   83eea:	f24a 6a45 	movw	sl, #42565	; 0xa645
   83eee:	f2c0 0a08 	movt	sl, #8
   83ef2:	4630      	mov	r0, r6
   83ef4:	4639      	mov	r1, r7
   83ef6:	47d0      	blx	sl
   83ef8:	b286      	uxth	r6, r0
   83efa:	4620      	mov	r0, r4
   83efc:	4629      	mov	r1, r5
   83efe:	47d0      	blx	sl
   83f00:	b284      	uxth	r4, r0
   83f02:	4640      	mov	r0, r8
   83f04:	4649      	mov	r1, r9
   83f06:	47d0      	blx	sl
   83f08:	b282      	uxth	r2, r0
   83f0a:	4630      	mov	r0, r6
   83f0c:	4621      	mov	r1, r4
   83f0e:	f242 73d1 	movw	r3, #10193	; 0x27d1
   83f12:	f2c0 0308 	movt	r3, #8
   83f16:	4798      	blx	r3
	return SCPI_RES_OK;
   83f18:	f04f 0001 	mov.w	r0, #1
   83f1c:	e007      	b.n	83f2e <SCPI_SetUserLed+0xba>
	uint32_t param1, param2, param3;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83f1e:	f04f 00ff 	mov.w	r0, #255	; 0xff
   83f22:	e004      	b.n	83f2e <SCPI_SetUserLed+0xba>
	}

	// read second paraeter if present
	if (!SCPI_ParamInt(context, &param2, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83f24:	f04f 00ff 	mov.w	r0, #255	; 0xff
   83f28:	e001      	b.n	83f2e <SCPI_SetUserLed+0xba>
	}

	// read second paraeter if present
	if (!SCPI_ParamInt(context, &param3, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83f2a:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}

	set_user_led_colour((uint16_t)round(param1), (uint16_t)round(param2), (uint16_t)round(param3));
	return SCPI_RES_OK;
   83f2e:	b240      	sxtb	r0, r0
   83f30:	b004      	add	sp, #16
   83f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83f36:	bf00      	nop

00083f38 <SCPI_SetIntegrationT>:
#include "conf_usb.h"
#include <math.h>
#include "main.h"

scpi_result_t SCPI_SetIntegrationT(scpi_t* context)
{
   83f38:	b500      	push	{lr}
   83f3a:	b083      	sub	sp, #12
	uint32_t param1;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
   83f3c:	a901      	add	r1, sp, #4
   83f3e:	f04f 0201 	mov.w	r2, #1
   83f42:	f243 5369 	movw	r3, #13673	; 0x3569
   83f46:	f2c0 0308 	movt	r3, #8
   83f4a:	4798      	blx	r3
   83f4c:	b1c0      	cbz	r0, 83f80 <SCPI_SetIntegrationT+0x48>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	set_counters_integration_time((uint16_t)round(param1));
   83f4e:	9801      	ldr	r0, [sp, #4]
   83f50:	f24a 5159 	movw	r1, #42329	; 0xa559
   83f54:	f2c0 0108 	movt	r1, #8
   83f58:	4788      	blx	r1
   83f5a:	f24a 2241 	movw	r2, #41537	; 0xa241
   83f5e:	f2c0 0208 	movt	r2, #8
   83f62:	4790      	blx	r2
   83f64:	f24a 6345 	movw	r3, #42565	; 0xa645
   83f68:	f2c0 0308 	movt	r3, #8
   83f6c:	4798      	blx	r3
   83f6e:	b280      	uxth	r0, r0
   83f70:	f649 615d 	movw	r1, #40541	; 0x9e5d
   83f74:	f2c0 0108 	movt	r1, #8
   83f78:	4788      	blx	r1
	return SCPI_RES_OK;
   83f7a:	f04f 0001 	mov.w	r0, #1
   83f7e:	e001      	b.n	83f84 <SCPI_SetIntegrationT+0x4c>
	uint32_t param1;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83f80:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	
	set_counters_integration_time((uint16_t)round(param1));
	return SCPI_RES_OK;
}
   83f84:	b240      	sxtb	r0, r0
   83f86:	b003      	add	sp, #12
   83f88:	bd00      	pop	{pc}
   83f8a:	bf00      	nop

00083f8c <SCPI_EnableCounter>:

scpi_result_t SCPI_EnableCounter(scpi_t* context)
{
   83f8c:	b508      	push	{r3, lr}
	enable_counters();
   83f8e:	f242 2369 	movw	r3, #8809	; 0x2269
   83f92:	f2c0 0308 	movt	r3, #8
   83f96:	4798      	blx	r3
	return SCPI_RES_OK;
}
   83f98:	f04f 0001 	mov.w	r0, #1
   83f9c:	bd08      	pop	{r3, pc}
   83f9e:	bf00      	nop

00083fa0 <SCPI_DisableCounter>:

scpi_result_t SCPI_DisableCounter(scpi_t* context)
{
   83fa0:	b508      	push	{r3, lr}
	disable_counters();
   83fa2:	f242 23d1 	movw	r3, #8913	; 0x22d1
   83fa6:	f2c0 0308 	movt	r3, #8
   83faa:	4798      	blx	r3
	return SCPI_RES_OK;
}
   83fac:	f04f 0001 	mov.w	r0, #1
   83fb0:	bd08      	pop	{r3, pc}
   83fb2:	bf00      	nop

00083fb4 <SCPI_ActivatePush>:

scpi_result_t SCPI_ActivatePush(scpi_t* context)
{
   83fb4:	b508      	push	{r3, lr}
	activate_measurement_push();
   83fb6:	f649 53ed 	movw	r3, #40429	; 0x9ded
   83fba:	f2c0 0308 	movt	r3, #8
   83fbe:	4798      	blx	r3
	return SCPI_RES_OK;
}
   83fc0:	f04f 0001 	mov.w	r0, #1
   83fc4:	bd08      	pop	{r3, pc}
   83fc6:	bf00      	nop

00083fc8 <SCPI_ActivatePull>:

scpi_result_t SCPI_ActivatePull(scpi_t* context)
{
   83fc8:	b508      	push	{r3, lr}
	deactivate_measurement_push();
   83fca:	f649 53fd 	movw	r3, #40445	; 0x9dfd
   83fce:	f2c0 0308 	movt	r3, #8
   83fd2:	4798      	blx	r3
	return SCPI_RES_OK;
}
   83fd4:	f04f 0001 	mov.w	r0, #1
   83fd8:	bd08      	pop	{r3, pc}
   83fda:	bf00      	nop

00083fdc <SCPI_SetTTLInput>:

scpi_result_t SCPI_SetTTLInput(scpi_t* context)
{
   83fdc:	b508      	push	{r3, lr}
	set_out_to_ttl_in();
   83fde:	f641 6371 	movw	r3, #7793	; 0x1e71
   83fe2:	f2c0 0308 	movt	r3, #8
   83fe6:	4798      	blx	r3
	return SCPI_RES_OK;
}
   83fe8:	f04f 0001 	mov.w	r0, #1
   83fec:	bd08      	pop	{r3, pc}
   83fee:	bf00      	nop

00083ff0 <SCPI_CounterA_Enable>:

scpi_result_t SCPI_CounterA_Enable(scpi_t* context)
{
   83ff0:	b500      	push	{lr}
   83ff2:	b083      	sub	sp, #12
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   83ff4:	a901      	add	r1, sp, #4
   83ff6:	f04f 0201 	mov.w	r2, #1
   83ffa:	f243 5369 	movw	r3, #13673	; 0x3569
   83ffe:	f2c0 0308 	movt	r3, #8
   84002:	4798      	blx	r3
   84004:	b188      	cbz	r0, 8402a <SCPI_CounterA_Enable+0x3a>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if(param == 0)
   84006:	9801      	ldr	r0, [sp, #4]
   84008:	b938      	cbnz	r0, 8401a <SCPI_CounterA_Enable+0x2a>
		disable_countera();
   8400a:	f242 2281 	movw	r2, #8833	; 0x2281
   8400e:	f2c0 0208 	movt	r2, #8
   84012:	4790      	blx	r2
	else	
		enable_countera();
		
	return SCPI_RES_OK;
   84014:	f04f 0301 	mov.w	r3, #1
   84018:	e009      	b.n	8402e <SCPI_CounterA_Enable+0x3e>
	}
	
	if(param == 0)
		disable_countera();
	else	
		enable_countera();
   8401a:	f242 1161 	movw	r1, #8545	; 0x2161
   8401e:	f2c0 0108 	movt	r1, #8
   84022:	4788      	blx	r1
		
	return SCPI_RES_OK;
   84024:	f04f 0301 	mov.w	r3, #1
   84028:	e001      	b.n	8402e <SCPI_CounterA_Enable+0x3e>
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   8402a:	f04f 03ff 	mov.w	r3, #255	; 0xff
		disable_countera();
	else	
		enable_countera();
		
	return SCPI_RES_OK;
}
   8402e:	b258      	sxtb	r0, r3
   84030:	b003      	add	sp, #12
   84032:	bd00      	pop	{pc}

00084034 <SCPI_CounterB_Enable>:

scpi_result_t SCPI_CounterB_Enable(scpi_t* context)
{
   84034:	b500      	push	{lr}
   84036:	b083      	sub	sp, #12
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   84038:	a901      	add	r1, sp, #4
   8403a:	f04f 0201 	mov.w	r2, #1
   8403e:	f243 5369 	movw	r3, #13673	; 0x3569
   84042:	f2c0 0308 	movt	r3, #8
   84046:	4798      	blx	r3
   84048:	b188      	cbz	r0, 8406e <SCPI_CounterB_Enable+0x3a>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if(param == 0)
   8404a:	9801      	ldr	r0, [sp, #4]
   8404c:	b938      	cbnz	r0, 8405e <SCPI_CounterB_Enable+0x2a>
		disable_counterb();
   8404e:	f242 22a9 	movw	r2, #8873	; 0x22a9
   84052:	f2c0 0208 	movt	r2, #8
   84056:	4790      	blx	r2
	else
		enable_counterb();
	
	return SCPI_RES_OK;
   84058:	f04f 0301 	mov.w	r3, #1
   8405c:	e009      	b.n	84072 <SCPI_CounterB_Enable+0x3e>
	}
	
	if(param == 0)
		disable_counterb();
	else
		enable_counterb();
   8405e:	f242 11e5 	movw	r1, #8677	; 0x21e5
   84062:	f2c0 0108 	movt	r1, #8
   84066:	4788      	blx	r1
	
	return SCPI_RES_OK;
   84068:	f04f 0301 	mov.w	r3, #1
   8406c:	e001      	b.n	84072 <SCPI_CounterB_Enable+0x3e>
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   8406e:	f04f 03ff 	mov.w	r3, #255	; 0xff
		disable_counterb();
	else
		enable_counterb();
	
	return SCPI_RES_OK;
}
   84072:	b258      	sxtb	r0, r3
   84074:	b003      	add	sp, #12
   84076:	bd00      	pop	{pc}

00084078 <SCPI_CounterA_Read>:

scpi_result_t SCPI_CounterA_Read(scpi_t* context)
{
   84078:	b510      	push	{r4, lr}
   8407a:	b084      	sub	sp, #16
	uint64_t counter_val;
	
	if(read_last_contera_val(&counter_val) == RETURN_OK)
   8407c:	a802      	add	r0, sp, #8
   8407e:	f649 63b9 	movw	r3, #40633	; 0x9eb9
   84082:	f2c0 0308 	movt	r3, #8
   84086:	4798      	blx	r3
   84088:	2801      	cmp	r0, #1
   8408a:	d11a      	bne.n	840c2 <SCPI_CounterA_Read+0x4a>
	{
		printf("%llu\x0D", counter_val);
   8408c:	f641 3478 	movw	r4, #7032	; 0x1b78
   84090:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84094:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   84098:	e9cd 2300 	strd	r2, r3, [sp]
   8409c:	4620      	mov	r0, r4
   8409e:	f04f 0164 	mov.w	r1, #100	; 0x64
   840a2:	f24d 7248 	movw	r2, #55112	; 0xd748
   840a6:	f2c0 0208 	movt	r2, #8
   840aa:	f64a 033f 	movw	r3, #43071	; 0xa83f
   840ae:	f2c0 0308 	movt	r3, #8
   840b2:	4798      	blx	r3
   840b4:	4620      	mov	r0, r4
   840b6:	f644 517d 	movw	r1, #19837	; 0x4d7d
   840ba:	f2c0 0108 	movt	r1, #8
   840be:	4788      	blx	r1
   840c0:	e011      	b.n	840e6 <SCPI_CounterA_Read+0x6e>
	}
	else
	{
		printf("No new val\x0D");
   840c2:	f641 3478 	movw	r4, #7032	; 0x1b78
   840c6:	f2c2 0407 	movt	r4, #8199	; 0x2007
   840ca:	f24d 635c 	movw	r3, #54876	; 0xd65c
   840ce:	f2c0 0308 	movt	r3, #8
   840d2:	cb07      	ldmia	r3!, {r0, r1, r2}
   840d4:	6020      	str	r0, [r4, #0]
   840d6:	6061      	str	r1, [r4, #4]
   840d8:	60a2      	str	r2, [r4, #8]
   840da:	4620      	mov	r0, r4
   840dc:	f644 517d 	movw	r1, #19837	; 0x4d7d
   840e0:	f2c0 0108 	movt	r1, #8
   840e4:	4788      	blx	r1
	}
	return SCPI_RES_OK;
}
   840e6:	f04f 0001 	mov.w	r0, #1
   840ea:	b004      	add	sp, #16
   840ec:	bd10      	pop	{r4, pc}
   840ee:	bf00      	nop

000840f0 <SCPI_CounterB_Read>:

scpi_result_t SCPI_CounterB_Read(scpi_t* context)
{
   840f0:	b510      	push	{r4, lr}
   840f2:	b084      	sub	sp, #16
	uint64_t counter_val;
	
	if(read_last_conterb_val(&counter_val) == RETURN_OK)
   840f4:	a802      	add	r0, sp, #8
   840f6:	f649 63fd 	movw	r3, #40701	; 0x9efd
   840fa:	f2c0 0308 	movt	r3, #8
   840fe:	4798      	blx	r3
   84100:	2801      	cmp	r0, #1
   84102:	d11a      	bne.n	8413a <SCPI_CounterB_Read+0x4a>
	{
		printf("%llu\x0D", counter_val);
   84104:	f641 3478 	movw	r4, #7032	; 0x1b78
   84108:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8410c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   84110:	e9cd 2300 	strd	r2, r3, [sp]
   84114:	4620      	mov	r0, r4
   84116:	f04f 0164 	mov.w	r1, #100	; 0x64
   8411a:	f24d 7248 	movw	r2, #55112	; 0xd748
   8411e:	f2c0 0208 	movt	r2, #8
   84122:	f64a 033f 	movw	r3, #43071	; 0xa83f
   84126:	f2c0 0308 	movt	r3, #8
   8412a:	4798      	blx	r3
   8412c:	4620      	mov	r0, r4
   8412e:	f644 517d 	movw	r1, #19837	; 0x4d7d
   84132:	f2c0 0108 	movt	r1, #8
   84136:	4788      	blx	r1
   84138:	e011      	b.n	8415e <SCPI_CounterB_Read+0x6e>
	}
	else
	{
		printf("No new val\x0D");
   8413a:	f641 3478 	movw	r4, #7032	; 0x1b78
   8413e:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84142:	f24d 635c 	movw	r3, #54876	; 0xd65c
   84146:	f2c0 0308 	movt	r3, #8
   8414a:	cb07      	ldmia	r3!, {r0, r1, r2}
   8414c:	6020      	str	r0, [r4, #0]
   8414e:	6061      	str	r1, [r4, #4]
   84150:	60a2      	str	r2, [r4, #8]
   84152:	4620      	mov	r0, r4
   84154:	f644 517d 	movw	r1, #19837	; 0x4d7d
   84158:	f2c0 0108 	movt	r1, #8
   8415c:	4788      	blx	r1
	}
	return SCPI_RES_OK;
}
   8415e:	f04f 0001 	mov.w	r0, #1
   84162:	b004      	add	sp, #16
   84164:	bd10      	pop	{r4, pc}
   84166:	bf00      	nop

00084168 <SCPI_CounterA_IT>:

scpi_result_t SCPI_CounterA_IT(scpi_t* context)
{
   84168:	b500      	push	{lr}
   8416a:	b083      	sub	sp, #12
	uint32_t param1;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
   8416c:	a901      	add	r1, sp, #4
   8416e:	f04f 0201 	mov.w	r2, #1
   84172:	f243 5369 	movw	r3, #13673	; 0x3569
   84176:	f2c0 0308 	movt	r3, #8
   8417a:	4798      	blx	r3
   8417c:	b1c0      	cbz	r0, 841b0 <SCPI_CounterA_IT+0x48>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	set_countera_integration_time((uint16_t)round(param1));
   8417e:	9801      	ldr	r0, [sp, #4]
   84180:	f24a 5159 	movw	r1, #42329	; 0xa559
   84184:	f2c0 0108 	movt	r1, #8
   84188:	4788      	blx	r1
   8418a:	f24a 2241 	movw	r2, #41537	; 0xa241
   8418e:	f2c0 0208 	movt	r2, #8
   84192:	4790      	blx	r2
   84194:	f24a 6345 	movw	r3, #42565	; 0xa645
   84198:	f2c0 0308 	movt	r3, #8
   8419c:	4798      	blx	r3
   8419e:	b280      	uxth	r0, r0
   841a0:	f649 610d 	movw	r1, #40461	; 0x9e0d
   841a4:	f2c0 0108 	movt	r1, #8
   841a8:	4788      	blx	r1
	return SCPI_RES_OK;
   841aa:	f04f 0001 	mov.w	r0, #1
   841ae:	e001      	b.n	841b4 <SCPI_CounterA_IT+0x4c>
	uint32_t param1;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   841b0:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	
	set_countera_integration_time((uint16_t)round(param1));
	return SCPI_RES_OK;
}
   841b4:	b240      	sxtb	r0, r0
   841b6:	b003      	add	sp, #12
   841b8:	bd00      	pop	{pc}
   841ba:	bf00      	nop

000841bc <SCPI_CounterB_IT>:

scpi_result_t SCPI_CounterB_IT(scpi_t* context)
{
   841bc:	b500      	push	{lr}
   841be:	b083      	sub	sp, #12
	uint32_t param1;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
   841c0:	a901      	add	r1, sp, #4
   841c2:	f04f 0201 	mov.w	r2, #1
   841c6:	f243 5369 	movw	r3, #13673	; 0x3569
   841ca:	f2c0 0308 	movt	r3, #8
   841ce:	4798      	blx	r3
   841d0:	b1c0      	cbz	r0, 84204 <SCPI_CounterB_IT+0x48>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	set_counterb_integration_time((uint16_t)round(param1));
   841d2:	9801      	ldr	r0, [sp, #4]
   841d4:	f24a 5159 	movw	r1, #42329	; 0xa559
   841d8:	f2c0 0108 	movt	r1, #8
   841dc:	4788      	blx	r1
   841de:	f24a 2241 	movw	r2, #41537	; 0xa241
   841e2:	f2c0 0208 	movt	r2, #8
   841e6:	4790      	blx	r2
   841e8:	f24a 6345 	movw	r3, #42565	; 0xa645
   841ec:	f2c0 0308 	movt	r3, #8
   841f0:	4798      	blx	r3
   841f2:	b280      	uxth	r0, r0
   841f4:	f649 6129 	movw	r1, #40489	; 0x9e29
   841f8:	f2c0 0108 	movt	r1, #8
   841fc:	4788      	blx	r1
	return SCPI_RES_OK;
   841fe:	f04f 0001 	mov.w	r0, #1
   84202:	e001      	b.n	84208 <SCPI_CounterB_IT+0x4c>
	uint32_t param1;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   84204:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	
	set_counterb_integration_time((uint16_t)round(param1));
	return SCPI_RES_OK;
}
   84208:	b240      	sxtb	r0, r0
   8420a:	b003      	add	sp, #12
   8420c:	bd00      	pop	{pc}
   8420e:	bf00      	nop

00084210 <SCPI_TTLInput>:

scpi_result_t SCPI_TTLInput(scpi_t* context)
{
   84210:	b500      	push	{lr}
   84212:	b083      	sub	sp, #12
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   84214:	a901      	add	r1, sp, #4
   84216:	f04f 0201 	mov.w	r2, #1
   8421a:	f243 5369 	movw	r3, #13673	; 0x3569
   8421e:	f2c0 0308 	movt	r3, #8
   84222:	4798      	blx	r3
   84224:	b188      	cbz	r0, 8424a <SCPI_TTLInput+0x3a>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if(param == 0)
   84226:	9801      	ldr	r0, [sp, #4]
   84228:	b938      	cbnz	r0, 8423a <SCPI_TTLInput+0x2a>
		set_out_to_uc();
   8422a:	f641 6291 	movw	r2, #7825	; 0x1e91
   8422e:	f2c0 0208 	movt	r2, #8
   84232:	4790      	blx	r2
	else
		set_out_to_ttl_in();
	
	return SCPI_RES_OK;
   84234:	f04f 0301 	mov.w	r3, #1
   84238:	e009      	b.n	8424e <SCPI_TTLInput+0x3e>
	}
	
	if(param == 0)
		set_out_to_uc();
	else
		set_out_to_ttl_in();
   8423a:	f641 6171 	movw	r1, #7793	; 0x1e71
   8423e:	f2c0 0108 	movt	r1, #8
   84242:	4788      	blx	r1
	
	return SCPI_RES_OK;
   84244:	f04f 0301 	mov.w	r3, #1
   84248:	e001      	b.n	8424e <SCPI_TTLInput+0x3e>
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   8424a:	f04f 03ff 	mov.w	r3, #255	; 0xff
		set_out_to_uc();
	else
		set_out_to_ttl_in();
	
	return SCPI_RES_OK;
}
   8424e:	b258      	sxtb	r0, r3
   84250:	b003      	add	sp, #12
   84252:	bd00      	pop	{pc}

00084254 <SCPI_SetFreq>:

scpi_result_t SCPI_SetFreq(scpi_t* context)
{
   84254:	b500      	push	{lr}
   84256:	b083      	sub	sp, #12
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   84258:	a901      	add	r1, sp, #4
   8425a:	f04f 0201 	mov.w	r2, #1
   8425e:	f243 5369 	movw	r3, #13673	; 0x3569
   84262:	f2c0 0308 	movt	r3, #8
   84266:	4798      	blx	r3
   84268:	b140      	cbz	r0, 8427c <SCPI_SetFreq+0x28>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	setup_freqgen_freq(param);
   8426a:	9801      	ldr	r0, [sp, #4]
   8426c:	f242 611d 	movw	r1, #9757	; 0x261d
   84270:	f2c0 0108 	movt	r1, #8
   84274:	4788      	blx	r1
	return SCPI_RES_OK;
   84276:	f04f 0001 	mov.w	r0, #1
   8427a:	e001      	b.n	84280 <SCPI_SetFreq+0x2c>
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   8427c:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	
	setup_freqgen_freq(param);
	return SCPI_RES_OK;
}
   84280:	b240      	sxtb	r0, r0
   84282:	b003      	add	sp, #12
   84284:	bd00      	pop	{pc}
   84286:	bf00      	nop

00084288 <SCPI_GetCounterA_Enable>:

scpi_result_t SCPI_GetCounterA_Enable(scpi_t* context)
{
   84288:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", get_countera_en_status());
   8428a:	f242 23e9 	movw	r3, #8937	; 0x22e9
   8428e:	f2c0 0308 	movt	r3, #8
   84292:	4798      	blx	r3
   84294:	4603      	mov	r3, r0
   84296:	f641 3478 	movw	r4, #7032	; 0x1b78
   8429a:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8429e:	4620      	mov	r0, r4
   842a0:	f04f 0164 	mov.w	r1, #100	; 0x64
   842a4:	f24d 6268 	movw	r2, #54888	; 0xd668
   842a8:	f2c0 0208 	movt	r2, #8
   842ac:	f64a 053f 	movw	r5, #43071	; 0xa83f
   842b0:	f2c0 0508 	movt	r5, #8
   842b4:	47a8      	blx	r5
   842b6:	4620      	mov	r0, r4
   842b8:	f644 517d 	movw	r1, #19837	; 0x4d7d
   842bc:	f2c0 0108 	movt	r1, #8
   842c0:	4788      	blx	r1
	return SCPI_RES_OK;
}
   842c2:	f04f 0001 	mov.w	r0, #1
   842c6:	bd38      	pop	{r3, r4, r5, pc}

000842c8 <SCPI_GetCounterB_Enable>:

scpi_result_t SCPI_GetCounterB_Enable(scpi_t* context)
{
   842c8:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", get_counterb_en_status());
   842ca:	f242 23f5 	movw	r3, #8949	; 0x22f5
   842ce:	f2c0 0308 	movt	r3, #8
   842d2:	4798      	blx	r3
   842d4:	4603      	mov	r3, r0
   842d6:	f641 3478 	movw	r4, #7032	; 0x1b78
   842da:	f2c2 0407 	movt	r4, #8199	; 0x2007
   842de:	4620      	mov	r0, r4
   842e0:	f04f 0164 	mov.w	r1, #100	; 0x64
   842e4:	f24d 6268 	movw	r2, #54888	; 0xd668
   842e8:	f2c0 0208 	movt	r2, #8
   842ec:	f64a 053f 	movw	r5, #43071	; 0xa83f
   842f0:	f2c0 0508 	movt	r5, #8
   842f4:	47a8      	blx	r5
   842f6:	4620      	mov	r0, r4
   842f8:	f644 517d 	movw	r1, #19837	; 0x4d7d
   842fc:	f2c0 0108 	movt	r1, #8
   84300:	4788      	blx	r1
	return SCPI_RES_OK;
}
   84302:	f04f 0001 	mov.w	r0, #1
   84306:	bd38      	pop	{r3, r4, r5, pc}

00084308 <SCPI_GetCounterA_IT>:

scpi_result_t SCPI_GetCounterA_IT(scpi_t* context)
{
   84308:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", get_countera_integration_time());
   8430a:	f649 6345 	movw	r3, #40517	; 0x9e45
   8430e:	f2c0 0308 	movt	r3, #8
   84312:	4798      	blx	r3
   84314:	4603      	mov	r3, r0
   84316:	f641 3478 	movw	r4, #7032	; 0x1b78
   8431a:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8431e:	4620      	mov	r0, r4
   84320:	f04f 0164 	mov.w	r1, #100	; 0x64
   84324:	f24d 6268 	movw	r2, #54888	; 0xd668
   84328:	f2c0 0208 	movt	r2, #8
   8432c:	f64a 053f 	movw	r5, #43071	; 0xa83f
   84330:	f2c0 0508 	movt	r5, #8
   84334:	47a8      	blx	r5
   84336:	4620      	mov	r0, r4
   84338:	f644 517d 	movw	r1, #19837	; 0x4d7d
   8433c:	f2c0 0108 	movt	r1, #8
   84340:	4788      	blx	r1
	return SCPI_RES_OK;
}
   84342:	f04f 0001 	mov.w	r0, #1
   84346:	bd38      	pop	{r3, r4, r5, pc}

00084348 <SCPI_GetCounterB_IT>:

scpi_result_t SCPI_GetCounterB_IT(scpi_t* context)
{
   84348:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", get_counterb_integration_time());
   8434a:	f649 6351 	movw	r3, #40529	; 0x9e51
   8434e:	f2c0 0308 	movt	r3, #8
   84352:	4798      	blx	r3
   84354:	4603      	mov	r3, r0
   84356:	f641 3478 	movw	r4, #7032	; 0x1b78
   8435a:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8435e:	4620      	mov	r0, r4
   84360:	f04f 0164 	mov.w	r1, #100	; 0x64
   84364:	f24d 6268 	movw	r2, #54888	; 0xd668
   84368:	f2c0 0208 	movt	r2, #8
   8436c:	f64a 053f 	movw	r5, #43071	; 0xa83f
   84370:	f2c0 0508 	movt	r5, #8
   84374:	47a8      	blx	r5
   84376:	4620      	mov	r0, r4
   84378:	f644 517d 	movw	r1, #19837	; 0x4d7d
   8437c:	f2c0 0108 	movt	r1, #8
   84380:	4788      	blx	r1
	return SCPI_RES_OK;
}
   84382:	f04f 0001 	mov.w	r0, #1
   84386:	bd38      	pop	{r3, r4, r5, pc}

00084388 <SCPI_GetTTLInput>:

scpi_result_t SCPI_GetTTLInput(scpi_t* context)
{
   84388:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", is_qma_out_set_to_ttl());
   8438a:	f641 63b1 	movw	r3, #7857	; 0x1eb1
   8438e:	f2c0 0308 	movt	r3, #8
   84392:	4798      	blx	r3
   84394:	4603      	mov	r3, r0
   84396:	f641 3478 	movw	r4, #7032	; 0x1b78
   8439a:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8439e:	4620      	mov	r0, r4
   843a0:	f04f 0164 	mov.w	r1, #100	; 0x64
   843a4:	f24d 6268 	movw	r2, #54888	; 0xd668
   843a8:	f2c0 0208 	movt	r2, #8
   843ac:	f64a 053f 	movw	r5, #43071	; 0xa83f
   843b0:	f2c0 0508 	movt	r5, #8
   843b4:	47a8      	blx	r5
   843b6:	4620      	mov	r0, r4
   843b8:	f644 517d 	movw	r1, #19837	; 0x4d7d
   843bc:	f2c0 0108 	movt	r1, #8
   843c0:	4788      	blx	r1
	return SCPI_RES_OK;
}
   843c2:	f04f 0001 	mov.w	r0, #1
   843c6:	bd38      	pop	{r3, r4, r5, pc}

000843c8 <SCPI_GetFreq>:

scpi_result_t SCPI_GetFreq(scpi_t* context)
{
   843c8:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", get_freqgen_freq());
   843ca:	f242 6355 	movw	r3, #9813	; 0x2655
   843ce:	f2c0 0308 	movt	r3, #8
   843d2:	4798      	blx	r3
   843d4:	4603      	mov	r3, r0
   843d6:	f641 3478 	movw	r4, #7032	; 0x1b78
   843da:	f2c2 0407 	movt	r4, #8199	; 0x2007
   843de:	4620      	mov	r0, r4
   843e0:	f04f 0164 	mov.w	r1, #100	; 0x64
   843e4:	f24d 6268 	movw	r2, #54888	; 0xd668
   843e8:	f2c0 0208 	movt	r2, #8
   843ec:	f64a 053f 	movw	r5, #43071	; 0xa83f
   843f0:	f2c0 0508 	movt	r5, #8
   843f4:	47a8      	blx	r5
   843f6:	4620      	mov	r0, r4
   843f8:	f644 517d 	movw	r1, #19837	; 0x4d7d
   843fc:	f2c0 0108 	movt	r1, #8
   84400:	4788      	blx	r1
	return SCPI_RES_OK;
}
   84402:	f04f 0001 	mov.w	r0, #1
   84406:	bd38      	pop	{r3, r4, r5, pc}

00084408 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   84408:	b510      	push	{r4, lr}
   8440a:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
   8440c:	f240 4395 	movw	r3, #1173	; 0x495
   84410:	f2c0 0308 	movt	r3, #8
   84414:	4798      	blx	r3
   84416:	2801      	cmp	r0, #1
   84418:	d003      	beq.n	84422 <sd_mmc_test_unit_ready+0x1a>
   8441a:	b128      	cbz	r0, 84428 <sd_mmc_test_unit_ready+0x20>
   8441c:	2802      	cmp	r0, #2
   8441e:	d120      	bne.n	84462 <sd_mmc_test_unit_ready+0x5a>
   84420:	e015      	b.n	8444e <sd_mmc_test_unit_ready+0x46>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   84422:	f04f 0003 	mov.w	r0, #3
   84426:	bd10      	pop	{r4, pc}
Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   84428:	f640 4164 	movw	r1, #3172	; 0xc64
   8442c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84430:	5d0b      	ldrb	r3, [r1, r4]
   84432:	b9cb      	cbnz	r3, 84468 <sd_mmc_test_unit_ready+0x60>
			return CTRL_NO_PRESENT;
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   84434:	4620      	mov	r0, r4
   84436:	f241 022d 	movw	r2, #4141	; 0x102d
   8443a:	f2c0 0208 	movt	r2, #8
   8443e:	4790      	blx	r2
   84440:	f000 0003 	and.w	r0, r0, #3
			return CTRL_GOOD;
   84444:	2800      	cmp	r0, #0
   84446:	bf0c      	ite	eq
   84448:	2002      	moveq	r0, #2
   8444a:	2000      	movne	r0, #0
   8444c:	bd10      	pop	{r4, pc}

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   8444e:	f640 4064 	movw	r0, #3172	; 0xc64
   84452:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84456:	f04f 0200 	mov.w	r2, #0
   8445a:	5502      	strb	r2, [r0, r4]
		return CTRL_NO_PRESENT;
   8445c:	f04f 0002 	mov.w	r0, #2
   84460:	bd10      	pop	{r4, pc}

	default:
		return CTRL_FAIL;
   84462:	f04f 0001 	mov.w	r0, #1
   84466:	bd10      	pop	{r4, pc}
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
			return CTRL_NO_PRESENT;
   84468:	f04f 0002 	mov.w	r0, #2
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
	}
}
   8446c:	bd10      	pop	{r4, pc}
   8446e:	bf00      	nop

00084470 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   84470:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
   84472:	f04f 0000 	mov.w	r0, #0
   84476:	f244 4309 	movw	r3, #17417	; 0x4409
   8447a:	f2c0 0308 	movt	r3, #8
   8447e:	4798      	blx	r3
}
   84480:	bd08      	pop	{r3, pc}
   84482:	bf00      	nop

00084484 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   84484:	b538      	push	{r3, r4, r5, lr}
   84486:	4604      	mov	r4, r0
   84488:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   8448a:	f241 0359 	movw	r3, #4185	; 0x1059
   8448e:	f2c0 0308 	movt	r3, #8
   84492:	4798      	blx	r3
   84494:	ea4f 0040 	mov.w	r0, r0, lsl #1
   84498:	f100 31ff 	add.w	r1, r0, #4294967295
   8449c:	6029      	str	r1, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
   8449e:	4620      	mov	r0, r4
   844a0:	f244 4209 	movw	r2, #17417	; 0x4409
   844a4:	f2c0 0208 	movt	r2, #8
   844a8:	4790      	blx	r2
}
   844aa:	bd38      	pop	{r3, r4, r5, pc}

000844ac <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   844ac:	b508      	push	{r3, lr}
   844ae:	4601      	mov	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
   844b0:	f04f 0000 	mov.w	r0, #0
   844b4:	f244 4385 	movw	r3, #17541	; 0x4485
   844b8:	f2c0 0308 	movt	r3, #8
   844bc:	4798      	blx	r3
}
   844be:	bd08      	pop	{r3, pc}

000844c0 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   844c0:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
   844c2:	f241 0385 	movw	r3, #4229	; 0x1085
   844c6:	f2c0 0308 	movt	r3, #8
   844ca:	4798      	blx	r3
}
   844cc:	bd08      	pop	{r3, pc}
   844ce:	bf00      	nop

000844d0 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   844d0:	b508      	push	{r3, lr}
	return sd_mmc_wr_protect(0);
   844d2:	f04f 0000 	mov.w	r0, #0
   844d6:	f244 43c1 	movw	r3, #17601	; 0x44c1
   844da:	f2c0 0308 	movt	r3, #8
   844de:	4798      	blx	r3
}
   844e0:	bd08      	pop	{r3, pc}
   844e2:	bf00      	nop

000844e4 <sd_mmc_removal>:

bool sd_mmc_removal(uint8_t slot)
{
	UNUSED(slot);
	return true;
}
   844e4:	f04f 0001 	mov.w	r0, #1
   844e8:	4770      	bx	lr
   844ea:	bf00      	nop

000844ec <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   844ec:	b508      	push	{r3, lr}
	return sd_mmc_removal(0);
   844ee:	f04f 0000 	mov.w	r0, #0
   844f2:	f244 43e5 	movw	r3, #17637	; 0x44e5
   844f6:	f2c0 0308 	movt	r3, #8
   844fa:	4798      	blx	r3
}
   844fc:	bd08      	pop	{r3, pc}
   844fe:	bf00      	nop

00084500 <sd_mmc_usb_read_10>:

COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
   84500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84504:	4614      	mov	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
   84506:	f241 038d 	movw	r3, #4237	; 0x108d
   8450a:	f2c0 0308 	movt	r3, #8
   8450e:	4798      	blx	r3
   84510:	4601      	mov	r1, r0
   84512:	b370      	cbz	r0, 84572 <sd_mmc_usb_read_10+0x72>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   84514:	2802      	cmp	r0, #2
   84516:	bf0c      	ite	eq
   84518:	2002      	moveq	r0, #2
   8451a:	2001      	movne	r0, #1
   8451c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (nb_step) { // Skip last step
   84520:	b144      	cbz	r4, 84534 <sd_mmc_usb_read_10+0x34>
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   84522:	f014 0f01 	tst.w	r4, #1
   84526:	bf0c      	ite	eq
   84528:	4638      	moveq	r0, r7
   8452a:	4640      	movne	r0, r8
   8452c:	f04f 0101 	mov.w	r1, #1
   84530:	47b0      	blx	r6
   84532:	bba0      	cbnz	r0, 8459e <sd_mmc_usb_read_10+0x9e>
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
			}
		}
		if (!b_first_step) { // Skip first step
   84534:	b985      	cbnz	r5, 84558 <sd_mmc_usb_read_10+0x58>
			// RAM -> USB
			if (!udi_msc_trans_block(true,
   84536:	f014 0f01 	tst.w	r4, #1
   8453a:	bf0c      	ite	eq
   8453c:	4641      	moveq	r1, r8
   8453e:	4639      	movne	r1, r7
   84540:	f04f 0001 	mov.w	r0, #1
   84544:	f44f 7200 	mov.w	r2, #512	; 0x200
   84548:	f04f 0300 	mov.w	r3, #0
   8454c:	f646 155d 	movw	r5, #26973	; 0x695d
   84550:	f2c0 0508 	movt	r5, #8
   84554:	47a8      	blx	r5
   84556:	b330      	cbz	r0, 845a6 <sd_mmc_usb_read_10+0xa6>
				return CTRL_FAIL;
			}
		} else {
			b_first_step = false;
		}
		if (nb_step) { // Skip last step
   84558:	b12c      	cbz	r4, 84566 <sd_mmc_usb_read_10+0x66>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks()) {
   8455a:	f241 2015 	movw	r0, #4629	; 0x1215
   8455e:	f2c0 0008 	movt	r0, #8
   84562:	4780      	blx	r0
   84564:	bb18      	cbnz	r0, 845ae <sd_mmc_usb_read_10+0xae>
   84566:	f104 34ff 	add.w	r4, r4, #4294967295
   8456a:	b2a4      	uxth	r4, r4
   8456c:	f04f 0500 	mov.w	r5, #0
   84570:	e00d      	b.n	8458e <sd_mmc_usb_read_10+0x8e>
COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
	bool b_first_step = true;
   84572:	f04f 0501 	mov.w	r5, #1
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (nb_step) { // Skip last step
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   84576:	f241 16dd 	movw	r6, #4573	; 0x11dd
   8457a:	f2c0 0608 	movt	r6, #8
   8457e:	f241 7878 	movw	r8, #6008	; 0x1778
   84582:	f2c2 0807 	movt	r8, #8199	; 0x2007
   84586:	f641 1778 	movw	r7, #6520	; 0x1978
   8458a:	f2c2 0707 	movt	r7, #8199	; 0x2007
	default:
		return CTRL_FAIL;
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
   8458e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   84592:	4294      	cmp	r4, r2
   84594:	d1c4      	bne.n	84520 <sd_mmc_usb_read_10+0x20>
				return CTRL_FAIL;
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
   84596:	f04f 0000 	mov.w	r0, #0
   8459a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (nb_step--) {
		if (nb_step) { // Skip last step
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
   8459e:	f04f 0001 	mov.w	r0, #1
   845a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!udi_msc_trans_block(true,
					((nb_step % 2) == 0) ?
					sector_buf_1 : sector_buf_0,
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
   845a6:	f04f 0001 	mov.w	r0, #1
   845aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else {
			b_first_step = false;
		}
		if (nb_step) { // Skip last step
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks()) {
				return CTRL_FAIL;
   845ae:	f04f 0001 	mov.w	r0, #1
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
}
   845b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   845b6:	bf00      	nop

000845b8 <sd_mmc_usb_read_10_0>:

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
   845b8:	b508      	push	{r3, lr}
   845ba:	4603      	mov	r3, r0
   845bc:	460a      	mov	r2, r1
	return sd_mmc_usb_read_10(0, addr, nb_sector);
   845be:	f04f 0000 	mov.w	r0, #0
   845c2:	4619      	mov	r1, r3
   845c4:	f244 5301 	movw	r3, #17665	; 0x4501
   845c8:	f2c0 0308 	movt	r3, #8
   845cc:	4798      	blx	r3
}
   845ce:	bd08      	pop	{r3, pc}

000845d0 <sd_mmc_usb_write_10>:
{
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
   845d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   845d4:	4614      	mov	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
   845d6:	f241 2395 	movw	r3, #4757	; 0x1295
   845da:	f2c0 0308 	movt	r3, #8
   845de:	4798      	blx	r3
   845e0:	4601      	mov	r1, r0
   845e2:	b368      	cbz	r0, 84640 <sd_mmc_usb_write_10+0x70>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   845e4:	2802      	cmp	r0, #2
   845e6:	bf0c      	ite	eq
   845e8:	2002      	moveq	r0, #2
   845ea:	2001      	movne	r0, #1
   845ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
   845f0:	b945      	cbnz	r5, 84604 <sd_mmc_usb_write_10+0x34>
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   845f2:	f014 0f01 	tst.w	r4, #1
   845f6:	bf0c      	ite	eq
   845f8:	4638      	moveq	r0, r7
   845fa:	4640      	movne	r0, r8
   845fc:	f04f 0101 	mov.w	r1, #1
   84600:	47b0      	blx	r6
   84602:	bb98      	cbnz	r0, 8466c <sd_mmc_usb_write_10+0x9c>
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
			}
		}
		if (nb_step) { // Skip last step
   84604:	b17c      	cbz	r4, 84626 <sd_mmc_usb_write_10+0x56>
			// USB -> RAM
			if (!udi_msc_trans_block(false,
   84606:	f014 0f01 	tst.w	r4, #1
   8460a:	bf0c      	ite	eq
   8460c:	4641      	moveq	r1, r8
   8460e:	4639      	movne	r1, r7
   84610:	f04f 0000 	mov.w	r0, #0
   84614:	f44f 7200 	mov.w	r2, #512	; 0x200
   84618:	4603      	mov	r3, r0
   8461a:	f646 1c5d 	movw	ip, #26973	; 0x695d
   8461e:	f2c0 0c08 	movt	ip, #8
   84622:	47e0      	blx	ip
   84624:	b330      	cbz	r0, 84674 <sd_mmc_usb_write_10+0xa4>
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
			}
		}
		if (!b_first_step) { // Skip first step
   84626:	b92d      	cbnz	r5, 84634 <sd_mmc_usb_write_10+0x64>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks()) {
   84628:	f241 30a1 	movw	r0, #5025	; 0x13a1
   8462c:	f2c0 0008 	movt	r0, #8
   84630:	4780      	blx	r0
   84632:	bb18      	cbnz	r0, 8467c <sd_mmc_usb_write_10+0xac>
   84634:	f104 34ff 	add.w	r4, r4, #4294967295
   84638:	b2a4      	uxth	r4, r4
   8463a:	f04f 0500 	mov.w	r5, #0
   8463e:	e00d      	b.n	8465c <sd_mmc_usb_write_10+0x8c>
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
	bool b_first_step = true;
   84640:	f04f 0501 	mov.w	r5, #1
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   84644:	f241 3669 	movw	r6, #4969	; 0x1369
   84648:	f2c0 0608 	movt	r6, #8
   8464c:	f241 7878 	movw	r8, #6008	; 0x1778
   84650:	f2c2 0807 	movt	r8, #8199	; 0x2007
   84654:	f641 1778 	movw	r7, #6520	; 0x1978
   84658:	f2c2 0707 	movt	r7, #8199	; 0x2007
	default:
		return CTRL_FAIL;
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
   8465c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   84660:	4294      	cmp	r4, r2
   84662:	d1c5      	bne.n	845f0 <sd_mmc_usb_write_10+0x20>
			}
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
   84664:	f04f 0000 	mov.w	r0, #0
   84668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
   8466c:	f04f 0001 	mov.w	r0, #1
   84670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!udi_msc_trans_block(false,
					((nb_step % 2) == 0) ?
					sector_buf_1 : sector_buf_0,
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
   84674:	f04f 0001 	mov.w	r0, #1
   84678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
		}
		if (!b_first_step) { // Skip first step
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks()) {
				return CTRL_FAIL;
   8467c:	f04f 0001 	mov.w	r0, #1
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
}
   84680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00084684 <sd_mmc_usb_write_10_0>:

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
   84684:	b508      	push	{r3, lr}
   84686:	4603      	mov	r3, r0
   84688:	460a      	mov	r2, r1
	return sd_mmc_usb_write_10(0, addr, nb_sector);
   8468a:	f04f 0000 	mov.w	r0, #0
   8468e:	4619      	mov	r1, r3
   84690:	f244 53d1 	movw	r3, #17873	; 0x45d1
   84694:	f2c0 0308 	movt	r3, #8
   84698:	4798      	blx	r3
}
   8469a:	bd08      	pop	{r3, pc}

0008469c <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
   8469c:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
   8469e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   846a2:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
   846a4:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
   846a6:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
   846a8:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
   846aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
   846ac:	f04f 0680 	mov.w	r6, #128	; 0x80
   846b0:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
   846b2:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
   846b4:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
   846b6:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
   846b8:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
   846ba:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
   846bc:	f04f 0000 	mov.w	r0, #0
   846c0:	6518      	str	r0, [r3, #80]	; 0x50
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
   846c2:	f04f 0105 	mov.w	r1, #5
   846c6:	6019      	str	r1, [r3, #0]
}
   846c8:	bc70      	pop	{r4, r5, r6}
   846ca:	4770      	bx	lr

000846cc <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
   846cc:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
   846ce:	f001 033f 	and.w	r3, r1, #63	; 0x3f
   846d2:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
   846d4:	f411 7f80 	tst.w	r1, #256	; 0x100
   846d8:	d00c      	beq.n	846f4 <hsmci_send_cmd_execute+0x28>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
   846da:	f411 6f00 	tst.w	r1, #2048	; 0x800
   846de:	d002      	beq.n	846e6 <hsmci_send_cmd_execute+0x1a>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
   846e0:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
   846e4:	e006      	b.n	846f4 <hsmci_send_cmd_execute+0x28>
		} else if (cmd & SDMMC_RESP_BUSY) {
   846e6:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
   846ea:	bf14      	ite	ne
   846ec:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
   846f0:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
   846f4:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
   846f8:	bf18      	it	ne
   846fa:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
   846fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84702:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
   84704:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
   84706:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
   84708:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
   8470c:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
   8470e:	b152      	cbz	r2, 84726 <hsmci_send_cmd_execute+0x5a>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
   84710:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
   84714:	d012      	beq.n	8473c <hsmci_send_cmd_execute+0x70>
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
   84716:	f244 629d 	movw	r2, #18077	; 0x469d
   8471a:	f2c0 0208 	movt	r2, #8
   8471e:	4790      	blx	r2
				return false;
   84720:	f04f 0000 	mov.w	r0, #0
   84724:	bd08      	pop	{r3, pc}
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
   84726:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
   8472a:	d007      	beq.n	8473c <hsmci_send_cmd_execute+0x70>
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
   8472c:	f244 619d 	movw	r1, #18077	; 0x469d
   84730:	f2c0 0108 	movt	r1, #8
   84734:	4788      	blx	r1
				return false;
   84736:	f04f 0000 	mov.w	r0, #0
   8473a:	bd08      	pop	{r3, pc}
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
   8473c:	f013 0f01 	tst.w	r3, #1
   84740:	d0e4      	beq.n	8470c <hsmci_send_cmd_execute+0x40>

	if (cmd & SDMMC_RESP_BUSY) {
   84742:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   84746:	d119      	bne.n	8477c <hsmci_send_cmd_execute+0xb0>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
   84748:	f04f 0001 	mov.w	r0, #1
   8474c:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 1000000;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
   8474e:	6c08      	ldr	r0, [r1, #64]	; 0x40
   84750:	f103 33ff 	add.w	r3, r3, #4294967295
		if (busy_wait-- == 0) {
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
			return false;
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
   84754:	f000 0230 	and.w	r2, r0, #48	; 0x30
   84758:	2a20      	cmp	r2, #32
   8475a:	d119      	bne.n	84790 <hsmci_send_cmd_execute+0xc4>
   8475c:	e00b      	b.n	84776 <hsmci_send_cmd_execute+0xaa>

	do {
		sr = HSMCI->HSMCI_SR;
		if (busy_wait-- == 0) {
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
   8475e:	f244 619d 	movw	r1, #18077	; 0x469d
   84762:	f2c0 0108 	movt	r1, #8
   84766:	4788      	blx	r1
			return false;
   84768:	f04f 0000 	mov.w	r0, #0
   8476c:	bd08      	pop	{r3, pc}
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
   8476e:	f000 0230 	and.w	r2, r0, #48	; 0x30
   84772:	2a20      	cmp	r2, #32
   84774:	d1eb      	bne.n	8474e <hsmci_send_cmd_execute+0x82>
	return true;
   84776:	f04f 0001 	mov.w	r0, #1
   8477a:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 1000000;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
   8477c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   84780:	6c00      	ldr	r0, [r0, #64]	; 0x40
   84782:	f244 2340 	movw	r3, #16960	; 0x4240
   84786:	f2c0 030f 	movt	r3, #15
   8478a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8478e:	e7ee      	b.n	8476e <hsmci_send_cmd_execute+0xa2>
   84790:	6c08      	ldr	r0, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
   84792:	3b01      	subs	r3, #1
   84794:	d1eb      	bne.n	8476e <hsmci_send_cmd_execute+0xa2>
   84796:	e7e2      	b.n	8475e <hsmci_send_cmd_execute+0x92>

00084798 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
   84798:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
   8479a:	f04f 0015 	mov.w	r0, #21
   8479e:	f647 1415 	movw	r4, #30997	; 0x7915
   847a2:	f2c0 0408 	movt	r4, #8
   847a6:	47a0      	blx	r4
#ifdef HSMCI_SR_DMADONE
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_DMAC);
   847a8:	f04f 0027 	mov.w	r0, #39	; 0x27
   847ac:	47a0      	blx	r4
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
   847ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   847b2:	f04f 0272 	mov.w	r2, #114	; 0x72
   847b6:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
   847b8:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
   847ba:	f04f 0011 	mov.w	r0, #17
   847be:	6558      	str	r0, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
   847c0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
   847c4:	6059      	str	r1, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
   847c6:	f04f 0205 	mov.w	r2, #5
   847ca:	601a      	str	r2, [r3, #0]
   847cc:	bd10      	pop	{r4, pc}
   847ce:	bf00      	nop

000847d0 <hsmci_get_bus_width>:
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
   847d0:	2800      	cmp	r0, #0
   847d2:	bf0c      	ite	eq
   847d4:	2004      	moveq	r0, #4
   847d6:	2000      	movne	r0, #0
   847d8:	4770      	bx	lr
   847da:	bf00      	nop

000847dc <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
   847dc:	f04f 0001 	mov.w	r0, #1
   847e0:	4770      	bx	lr
   847e2:	bf00      	nop

000847e4 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
   847e4:	b133      	cbz	r3, 847f4 <hsmci_select_device+0x10>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
   847e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   847ea:	6d58      	ldr	r0, [r3, #84]	; 0x54
   847ec:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   847f0:	6558      	str	r0, [r3, #84]	; 0x54
   847f2:	e005      	b.n	84800 <hsmci_select_device+0x1c>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
   847f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   847f8:	6d58      	ldr	r0, [r3, #84]	; 0x54
   847fa:	f420 7080 	bic.w	r0, r0, #256	; 0x100
   847fe:	6558      	str	r0, [r3, #84]	; 0x54
{
	uint32_t clkdiv;
	uint32_t rest;

	// Speed = MCK clock / (2 * (CLKDIV + 1))
	if (speed > 0) {
   84800:	b181      	cbz	r1, 84824 <hsmci_select_device+0x40>
		clkdiv = mck / (2 * speed);
   84802:	ea4f 0141 	mov.w	r1, r1, lsl #1
   84806:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
   8480a:	f2c0 5301 	movt	r3, #1281	; 0x501
   8480e:	fbb3 f0f1 	udiv	r0, r3, r1
		rest = mck % (2 * speed);
   84812:	fb01 3110 	mls	r1, r1, r0, r3
		if (rest > 0) {
   84816:	b109      	cbz	r1, 8481c <hsmci_select_device+0x38>
			// Ensure that the card speed not be higher than expected.
			clkdiv++;
   84818:	f100 0001 	add.w	r0, r0, #1
		}
		if (clkdiv > 0) {
   8481c:	b120      	cbz	r0, 84828 <hsmci_select_device+0x44>
			clkdiv -= 1;
   8481e:	f100 30ff 	add.w	r0, r0, #4294967295
   84822:	e001      	b.n	84828 <hsmci_select_device+0x44>
		}
	} else {
		clkdiv = 0;
   84824:	f04f 0000 	mov.w	r0, #0
	}
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
   84828:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8482c:	6859      	ldr	r1, [r3, #4]
   8482e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   84832:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
   84834:	6859      	ldr	r1, [r3, #4]
   84836:	b2c0      	uxtb	r0, r0
   84838:	4308      	orrs	r0, r1
   8483a:	6058      	str	r0, [r3, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
   8483c:	2a04      	cmp	r2, #4
   8483e:	d004      	beq.n	8484a <hsmci_select_device+0x66>
}

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
   84840:	2a08      	cmp	r2, #8
   84842:	bf0c      	ite	eq
   84844:	22c0      	moveq	r2, #192	; 0xc0
   84846:	2200      	movne	r2, #0
   84848:	e001      	b.n	8484e <hsmci_select_device+0x6a>
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
		break;

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
   8484a:	f04f 0280 	mov.w	r2, #128	; 0x80
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
   8484e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84852:	60da      	str	r2, [r3, #12]
   84854:	4770      	bx	lr
   84856:	bf00      	nop

00084858 <hsmci_deselect_device>:
}

void hsmci_deselect_device(uint8_t slot)
{
   84858:	4770      	bx	lr
   8485a:	bf00      	nop

0008485c <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
   8485c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84860:	685a      	ldr	r2, [r3, #4]
   84862:	f422 5060 	bic.w	r0, r2, #14336	; 0x3800
   84866:	6058      	str	r0, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
   84868:	f04f 0100 	mov.w	r1, #0
   8486c:	6119      	str	r1, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
   8486e:	f44f 6210 	mov.w	r2, #2304	; 0x900
   84872:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
   84874:	4618      	mov	r0, r3
   84876:	6c03      	ldr	r3, [r0, #64]	; 0x40
   84878:	f013 0f01 	tst.w	r3, #1
   8487c:	d0fb      	beq.n	84876 <hsmci_send_clock+0x1a>
}
   8487e:	4770      	bx	lr

00084880 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   84880:	b510      	push	{r4, lr}
   84882:	4604      	mov	r4, r0
   84884:	460a      	mov	r2, r1
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
   84886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8488a:	6859      	ldr	r1, [r3, #4]
   8488c:	f421 5060 	bic.w	r0, r1, #14336	; 0x3800
   84890:	6058      	str	r0, [r3, #4]
#ifdef HSMCI_SR_DMADONE
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
   84892:	f04f 0000 	mov.w	r0, #0
   84896:	6518      	str	r0, [r3, #80]	; 0x50
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
	HSMCI->HSMCI_BLKR = 0;
   84898:	6198      	str	r0, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
   8489a:	4621      	mov	r1, r4
   8489c:	f244 63cd 	movw	r3, #18125	; 0x46cd
   848a0:	f2c0 0308 	movt	r3, #8
   848a4:	4798      	blx	r3
}
   848a6:	bd10      	pop	{r4, pc}

000848a8 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
   848a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   848ac:	6a18      	ldr	r0, [r3, #32]
}
   848ae:	4770      	bx	lr

000848b0 <hsmci_get_response_128>:
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   848b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   848b4:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   848b6:	ea4f 6112 	mov.w	r1, r2, lsr #24
   848ba:	7001      	strb	r1, [r0, #0]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   848bc:	ea4f 4112 	mov.w	r1, r2, lsr #16
   848c0:	7041      	strb	r1, [r0, #1]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   848c2:	ea4f 2112 	mov.w	r1, r2, lsr #8
   848c6:	7081      	strb	r1, [r0, #2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   848c8:	70c2      	strb	r2, [r0, #3]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   848ca:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   848cc:	ea4f 6112 	mov.w	r1, r2, lsr #24
   848d0:	7101      	strb	r1, [r0, #4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   848d2:	ea4f 4112 	mov.w	r1, r2, lsr #16
   848d6:	7141      	strb	r1, [r0, #5]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   848d8:	ea4f 2112 	mov.w	r1, r2, lsr #8
   848dc:	7181      	strb	r1, [r0, #6]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   848de:	71c2      	strb	r2, [r0, #7]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   848e0:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   848e2:	ea4f 6112 	mov.w	r1, r2, lsr #24
   848e6:	7201      	strb	r1, [r0, #8]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   848e8:	ea4f 4112 	mov.w	r1, r2, lsr #16
   848ec:	7241      	strb	r1, [r0, #9]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   848ee:	ea4f 2112 	mov.w	r1, r2, lsr #8
   848f2:	7281      	strb	r1, [r0, #10]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   848f4:	72c2      	strb	r2, [r0, #11]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   848f6:	6a1b      	ldr	r3, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   848f8:	ea4f 6213 	mov.w	r2, r3, lsr #24
   848fc:	7302      	strb	r2, [r0, #12]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   848fe:	ea4f 4113 	mov.w	r1, r3, lsr #16
   84902:	7341      	strb	r1, [r0, #13]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   84904:	ea4f 2213 	mov.w	r2, r3, lsr #8
   84908:	7382      	strb	r2, [r0, #14]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   8490a:	73c3      	strb	r3, [r0, #15]
   8490c:	4770      	bx	lr
   8490e:	bf00      	nop

00084910 <hsmci_adtc_start>:
		response++;
	}
}

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
   84910:	b570      	push	{r4, r5, r6, lr}
   84912:	4604      	mov	r4, r0
   84914:	460d      	mov	r5, r1
	uint32_t cmdr;

#ifdef HSMCI_SR_DMADONE
	if (access_block) {
   84916:	f89d 1010 	ldrb.w	r1, [sp, #16]
   8491a:	b129      	cbz	r1, 84928 <hsmci_adtc_start+0x18>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
   8491c:	f44f 7080 	mov.w	r0, #256	; 0x100
   84920:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   84924:	6508      	str	r0, [r1, #80]	; 0x50
   84926:	e004      	b.n	84932 <hsmci_adtc_start+0x22>
	} else {
		// Disable DMA for HSMCI
		HSMCI->HSMCI_DMA = 0;
   84928:	f04f 0000 	mov.w	r0, #0
   8492c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   84930:	6530      	str	r0, [r6, #80]	; 0x50
#endif

	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
   84932:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   84936:	6870      	ldr	r0, [r6, #4]
   84938:	f440 51c0 	orr.w	r1, r0, #6144	; 0x1800
   8493c:	6071      	str	r1, [r6, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
   8493e:	f012 0f03 	tst.w	r2, #3
   84942:	d004      	beq.n	8494e <hsmci_adtc_start+0x3e>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
   84944:	6870      	ldr	r0, [r6, #4]
   84946:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   8494a:	6071      	str	r1, [r6, #4]
   8494c:	e005      	b.n	8495a <hsmci_adtc_start+0x4a>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
   8494e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   84952:	6870      	ldr	r0, [r6, #4]
   84954:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
   84958:	6071      	str	r1, [r6, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
   8495a:	f404 4600 	and.w	r6, r4, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
   8495e:	2e00      	cmp	r6, #0
   84960:	bf0c      	ite	eq
   84962:	f44f 20a0 	moveq.w	r0, #327680	; 0x50000
   84966:	f44f 3080 	movne.w	r0, #65536	; 0x10000
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
   8496a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   8496e:	d009      	beq.n	84984 <hsmci_adtc_start+0x74>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
   84970:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
   84974:	ea4f 56c2 	mov.w	r6, r2, lsl #23
   84978:	ea4f 51d6 	mov.w	r1, r6, lsr #23
   8497c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   84980:	61b1      	str	r1, [r6, #24]
   84982:	e018      	b.n	849b6 <hsmci_adtc_start+0xa6>
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
   84984:	ea43 4602 	orr.w	r6, r3, r2, lsl #16
   84988:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8498c:	618e      	str	r6, [r1, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
   8498e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   84992:	d002      	beq.n	8499a <hsmci_adtc_start+0x8a>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
   84994:	f440 1020 	orr.w	r0, r0, #2621440	; 0x280000
   84998:	e00d      	b.n	849b6 <hsmci_adtc_start+0xa6>
		} else if (cmd & SDMMC_CMD_STREAM) {
   8499a:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   8499e:	d002      	beq.n	849a6 <hsmci_adtc_start+0x96>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
   849a0:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   849a4:	e007      	b.n	849b6 <hsmci_adtc_start+0xa6>
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
   849a6:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   849aa:	d104      	bne.n	849b6 <hsmci_adtc_start+0xa6>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
   849ac:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
   849b0:	bf18      	it	ne
   849b2:	f440 2000 	orrne.w	r0, r0, #524288	; 0x80000
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
   849b6:	f640 416c 	movw	r1, #3180	; 0xc6c
   849ba:	f2c2 0107 	movt	r1, #8199	; 0x2007
   849be:	f04f 0600 	mov.w	r6, #0
   849c2:	600e      	str	r6, [r1, #0]
	hsmci_block_size = block_size;
   849c4:	f640 4168 	movw	r1, #3176	; 0xc68
   849c8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   849cc:	800a      	strh	r2, [r1, #0]
	hsmci_nb_block = nb_block;
   849ce:	f640 426a 	movw	r2, #3178	; 0xc6a
   849d2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   849d6:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
   849d8:	4621      	mov	r1, r4
   849da:	462a      	mov	r2, r5
   849dc:	f244 63cd 	movw	r3, #18125	; 0x46cd
   849e0:	f2c0 0308 	movt	r3, #8
   849e4:	4798      	blx	r3
}
   849e6:	bd70      	pop	{r4, r5, r6, pc}

000849e8 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
   849e8:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
   849ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   849ee:	f04f 0200 	mov.w	r2, #0
   849f2:	f2cc 0260 	movt	r2, #49248	; 0xc060

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
   849f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   849f8:	4213      	tst	r3, r2
   849fa:	d007      	beq.n	84a0c <hsmci_read_word+0x24>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   849fc:	f244 609d 	movw	r0, #18077	; 0x469d
   84a00:	f2c0 0008 	movt	r0, #8
   84a04:	4780      	blx	r0
			return false;
   84a06:	f04f 0000 	mov.w	r0, #0
   84a0a:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_RXRDY));
   84a0c:	f013 0f02 	tst.w	r3, #2
   84a10:	d0f1      	beq.n	849f6 <hsmci_read_word+0xe>

	// Read data
	*value = HSMCI->HSMCI_RDR;
   84a12:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   84a16:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   84a18:	6002      	str	r2, [r0, #0]
	hsmci_transfert_pos += 4;
   84a1a:	f640 406c 	movw	r0, #3180	; 0xc6c
   84a1e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84a22:	6803      	ldr	r3, [r0, #0]
   84a24:	f103 0304 	add.w	r3, r3, #4
   84a28:	6003      	str	r3, [r0, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   84a2a:	f640 416a 	movw	r1, #3178	; 0xc6a
   84a2e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84a32:	880a      	ldrh	r2, [r1, #0]
   84a34:	f640 4068 	movw	r0, #3176	; 0xc68
   84a38:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84a3c:	8801      	ldrh	r1, [r0, #0]
   84a3e:	fb01 f202 	mul.w	r2, r1, r2
   84a42:	4293      	cmp	r3, r2
   84a44:	d316      	bcc.n	84a74 <hsmci_read_word+0x8c>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   84a46:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84a4a:	f04f 0200 	mov.w	r2, #0
   84a4e:	f2cc 0260 	movt	r2, #49248	; 0xc060
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   84a52:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84a54:	4213      	tst	r3, r2
   84a56:	d007      	beq.n	84a68 <hsmci_read_word+0x80>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   84a58:	f244 619d 	movw	r1, #18077	; 0x469d
   84a5c:	f2c0 0108 	movt	r1, #8
   84a60:	4788      	blx	r1
			return false;
   84a62:	f04f 0000 	mov.w	r0, #0
   84a66:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
   84a68:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   84a6c:	d0f1      	beq.n	84a52 <hsmci_read_word+0x6a>
	return true;
   84a6e:	f04f 0001 	mov.w	r0, #1
   84a72:	bd08      	pop	{r3, pc}

	// Read data
	*value = HSMCI->HSMCI_RDR;
	hsmci_transfert_pos += 4;
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
		return true;
   84a74:	f04f 0001 	mov.w	r0, #1
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
   84a78:	bd08      	pop	{r3, pc}
   84a7a:	bf00      	nop

00084a7c <hsmci_start_read_blocks>:
	return true;
}

#ifdef HSMCI_SR_DMADONE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
   84a7c:	b570      	push	{r4, r5, r6, lr}
   84a7e:	b086      	sub	sp, #24
   84a80:	4604      	mov	r4, r0
	uint32_t cfg, nb_data;
	dma_transfer_descriptor_t desc;
	bool transfert_byte;

	nb_data = nb_block * hsmci_block_size;
   84a82:	f640 4368 	movw	r3, #3176	; 0xc68
   84a86:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84a8a:	881e      	ldrh	r6, [r3, #0]
   84a8c:	fb06 f601 	mul.w	r6, r6, r1
	transfert_byte = ((HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) || (((uint32_t)dest & 0x3) > 0)) ? 1 : 0;
   84a90:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   84a94:	6841      	ldr	r1, [r0, #4]
   84a96:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   84a9a:	d12f      	bne.n	84afc <hsmci_start_read_blocks+0x80>
	 * - Hardware Selection for the Source
	 * - Source with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   84a9c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84aa0:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84aa4:	4628      	mov	r0, r5
   84aa6:	f245 1235 	movw	r2, #20789	; 0x5135
   84aaa:	f2c0 0208 	movt	r2, #8
   84aae:	4790      	blx	r2
	dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84ab0:	4628      	mov	r0, r5
   84ab2:	f04f 0100 	mov.w	r1, #0
   84ab6:	f245 1349 	movw	r3, #20809	; 0x5149
   84aba:	f2c0 0308 	movt	r3, #8
   84abe:	4798      	blx	r3
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_SRC_H2SEL |
			DMAC_CFG_SRC_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   84ac0:	4628      	mov	r0, r5
   84ac2:	f04f 0100 	mov.w	r1, #0
   84ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
   84aca:	f2c0 1201 	movt	r2, #257	; 0x101
   84ace:	f245 1591 	movw	r5, #20881	; 0x5191
   84ad2:	f2c0 0508 	movt	r5, #8
   84ad6:	47a8      	blx	r5

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
   84ad8:	f04f 0030 	mov.w	r0, #48	; 0x30
   84adc:	f2c4 0000 	movt	r0, #16384	; 0x4000
   84ae0:	9001      	str	r0, [sp, #4]
	desc.ul_destination_addr = (uint32_t)dest;
   84ae2:	9402      	str	r4, [sp, #8]
	if (transfert_byte) {
   84ae4:	f014 0f03 	tst.w	r4, #3
   84ae8:	d002      	beq.n	84af0 <hsmci_start_read_blocks+0x74>
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
   84aea:	b2b4      	uxth	r4, r6

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
	desc.ul_destination_addr = (uint32_t)dest;
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
   84aec:	9403      	str	r4, [sp, #12]
   84aee:	e02a      	b.n	84b46 <hsmci_start_read_blocks+0xca>
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   84af0:	f3c6 048f 	ubfx	r4, r6, #2, #16
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
   84af4:	f044 5108 	orr.w	r1, r4, #570425344	; 0x22000000
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   84af8:	9103      	str	r1, [sp, #12]
   84afa:	e024      	b.n	84b46 <hsmci_start_read_blocks+0xca>
	 * - Hardware Selection for the Source
	 * - Source with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   84afc:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84b00:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84b04:	4628      	mov	r0, r5
   84b06:	f245 1235 	movw	r2, #20789	; 0x5135
   84b0a:	f2c0 0208 	movt	r2, #8
   84b0e:	4790      	blx	r2
	dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84b10:	4628      	mov	r0, r5
   84b12:	f04f 0100 	mov.w	r1, #0
   84b16:	f245 1349 	movw	r3, #20809	; 0x5149
   84b1a:	f2c0 0308 	movt	r3, #8
   84b1e:	4798      	blx	r3
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_SRC_H2SEL |
			DMAC_CFG_SRC_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   84b20:	4628      	mov	r0, r5
   84b22:	f04f 0100 	mov.w	r1, #0
   84b26:	f44f 7200 	mov.w	r2, #512	; 0x200
   84b2a:	f2c0 1201 	movt	r2, #257	; 0x101
   84b2e:	f245 1591 	movw	r5, #20881	; 0x5191
   84b32:	f2c0 0508 	movt	r5, #8
   84b36:	47a8      	blx	r5

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
   84b38:	f04f 0030 	mov.w	r0, #48	; 0x30
   84b3c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   84b40:	9001      	str	r0, [sp, #4]
	desc.ul_destination_addr = (uint32_t)dest;
   84b42:	9402      	str	r4, [sp, #8]
   84b44:	e7d1      	b.n	84aea <hsmci_start_read_blocks+0x6e>
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
	}
	desc.ul_ctrlB = DMAC_CTRLB_SRC_DSCR_FETCH_DISABLE
   84b46:	f04f 0100 	mov.w	r1, #0
   84b4a:	f2c4 2151 	movt	r1, #16977	; 0x4251
   84b4e:	9104      	str	r1, [sp, #16]
			| DMAC_CTRLB_DST_DSCR_FETCH_DISABLE
			| DMAC_CTRLB_FC_PER2MEM_DMA_FC
			| DMAC_CTRLB_SRC_INCR_FIXED
			| DMAC_CTRLB_DST_INCR_INCREMENTING
			| DMAC_CTRLB_IEN;
	desc.ul_descriptor_addr = (uint32_t)NULL;
   84b50:	f04f 0400 	mov.w	r4, #0
   84b54:	9405      	str	r4, [sp, #20]
	dmac_channel_single_buf_transfer_init(DMAC, CONF_HSMCI_DMA_CHANNEL,
   84b56:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84b5a:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84b5e:	4628      	mov	r0, r5
   84b60:	4621      	mov	r1, r4
   84b62:	aa01      	add	r2, sp, #4
   84b64:	f245 139d 	movw	r3, #20893	; 0x519d
   84b68:	f2c0 0308 	movt	r3, #8
   84b6c:	4798      	blx	r3
			&desc);

	// Start DMA transfer
	dmac_channel_enable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84b6e:	4628      	mov	r0, r5
   84b70:	4621      	mov	r1, r4
   84b72:	f245 123d 	movw	r2, #20797	; 0x513d
   84b76:	f2c0 0208 	movt	r2, #8
   84b7a:	4790      	blx	r2
	hsmci_transfert_pos += nb_data;
   84b7c:	f640 406c 	movw	r0, #3180	; 0xc6c
   84b80:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84b84:	6801      	ldr	r1, [r0, #0]
   84b86:	1876      	adds	r6, r6, r1
   84b88:	6006      	str	r6, [r0, #0]
	return true;
}
   84b8a:	f04f 0001 	mov.w	r0, #1
   84b8e:	b006      	add	sp, #24
   84b90:	bd70      	pop	{r4, r5, r6, pc}
   84b92:	bf00      	nop

00084b94 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
   84b94:	b510      	push	{r4, lr}
			hsmci_reset();
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   84b96:	f640 436a 	movw	r3, #3178	; 0xc6a
   84b9a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84b9e:	8818      	ldrh	r0, [r3, #0]
   84ba0:	f640 4268 	movw	r2, #3176	; 0xc68
   84ba4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84ba8:	8814      	ldrh	r4, [r2, #0]
   84baa:	fb04 f400 	mul.w	r4, r4, r0
   84bae:	f640 416c 	movw	r1, #3180	; 0xc6c
   84bb2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84bb6:	6808      	ldr	r0, [r1, #0]
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   84bb8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84bbc:	f04f 0200 	mov.w	r2, #0
   84bc0:	f2cc 0260 	movt	r2, #49248	; 0xc060
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   84bc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84bc6:	4213      	tst	r3, r2
   84bc8:	d012      	beq.n	84bf0 <hsmci_wait_end_of_read_blocks+0x5c>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   84bca:	f244 609d 	movw	r0, #18077	; 0x469d
   84bce:	f2c0 0008 	movt	r0, #8
   84bd2:	4780      	blx	r0
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84bd4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   84bd8:	f2c4 000c 	movt	r0, #16396	; 0x400c
   84bdc:	f04f 0100 	mov.w	r1, #0
   84be0:	f245 1249 	movw	r2, #20809	; 0x5149
   84be4:	f2c0 0208 	movt	r2, #8
   84be8:	4790      	blx	r2
			return false;
   84bea:	f04f 0000 	mov.w	r0, #0
   84bee:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   84bf0:	4284      	cmp	r4, r0
   84bf2:	d902      	bls.n	84bfa <hsmci_wait_end_of_read_blocks+0x66>
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
   84bf4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   84bf8:	d105      	bne.n	84c06 <hsmci_wait_end_of_read_blocks+0x72>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
   84bfa:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   84bfe:	d0e1      	beq.n	84bc4 <hsmci_wait_end_of_read_blocks+0x30>
	return true;
   84c00:	f04f 0001 	mov.w	r0, #1
   84c04:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
				return true;
   84c06:	f04f 0001 	mov.w	r0, #1
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
   84c0a:	bd10      	pop	{r4, pc}

00084c0c <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
   84c0c:	b570      	push	{r4, r5, r6, lr}
   84c0e:	b086      	sub	sp, #24
   84c10:	4604      	mov	r4, r0
	bool transfert_byte;
	uint32_t cfg, nb_data;
	dma_transfer_descriptor_t desc;

	nb_data = nb_block * hsmci_block_size;
   84c12:	f640 4368 	movw	r3, #3176	; 0xc68
   84c16:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84c1a:	881e      	ldrh	r6, [r3, #0]
   84c1c:	fb06 f601 	mul.w	r6, r6, r1
	transfert_byte = ((HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) || (((uint32_t)src & 0x3) > 0)) ? 1 : 0;
   84c20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   84c24:	6841      	ldr	r1, [r0, #4]
   84c26:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   84c2a:	d127      	bne.n	84c7c <hsmci_start_write_blocks+0x70>
	 * - Hardware Selection for the Destination
	 * - Destination with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   84c2c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84c30:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84c34:	4628      	mov	r0, r5
   84c36:	f245 1235 	movw	r2, #20789	; 0x5135
   84c3a:	f2c0 0208 	movt	r2, #8
   84c3e:	4790      	blx	r2
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_DST_H2SEL |
			DMAC_CFG_DST_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   84c40:	4628      	mov	r0, r5
   84c42:	f04f 0100 	mov.w	r1, #0
   84c46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   84c4a:	f2c0 1201 	movt	r2, #257	; 0x101
   84c4e:	f245 1391 	movw	r3, #20881	; 0x5191
   84c52:	f2c0 0308 	movt	r3, #8
   84c56:	4798      	blx	r3

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
   84c58:	9401      	str	r4, [sp, #4]
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
   84c5a:	f04f 0034 	mov.w	r0, #52	; 0x34
   84c5e:	f2c4 0000 	movt	r0, #16384	; 0x4000
   84c62:	9002      	str	r0, [sp, #8]
	if (transfert_byte) {
   84c64:	f014 0f03 	tst.w	r4, #3
   84c68:	d002      	beq.n	84c70 <hsmci_start_write_blocks+0x64>
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
   84c6a:	b2b4      	uxth	r4, r6

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
   84c6c:	9403      	str	r4, [sp, #12]
   84c6e:	e022      	b.n	84cb6 <hsmci_start_write_blocks+0xaa>
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   84c70:	f3c6 048f 	ubfx	r4, r6, #2, #16
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
   84c74:	f044 5108 	orr.w	r1, r4, #570425344	; 0x22000000
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   84c78:	9103      	str	r1, [sp, #12]
   84c7a:	e01c      	b.n	84cb6 <hsmci_start_write_blocks+0xaa>
	 * - Hardware Selection for the Destination
	 * - Destination with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   84c7c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84c80:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84c84:	4628      	mov	r0, r5
   84c86:	f245 1235 	movw	r2, #20789	; 0x5135
   84c8a:	f2c0 0208 	movt	r2, #8
   84c8e:	4790      	blx	r2
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_DST_H2SEL |
			DMAC_CFG_DST_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   84c90:	4628      	mov	r0, r5
   84c92:	f04f 0100 	mov.w	r1, #0
   84c96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   84c9a:	f2c0 1201 	movt	r2, #257	; 0x101
   84c9e:	f245 1391 	movw	r3, #20881	; 0x5191
   84ca2:	f2c0 0308 	movt	r3, #8
   84ca6:	4798      	blx	r3

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
   84ca8:	9401      	str	r4, [sp, #4]
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
   84caa:	f04f 0034 	mov.w	r0, #52	; 0x34
   84cae:	f2c4 0000 	movt	r0, #16384	; 0x4000
   84cb2:	9002      	str	r0, [sp, #8]
   84cb4:	e7d9      	b.n	84c6a <hsmci_start_write_blocks+0x5e>
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
	}
	desc.ul_ctrlB = DMAC_CTRLB_SRC_DSCR_FETCH_DISABLE
   84cb6:	f04f 0100 	mov.w	r1, #0
   84cba:	f2c6 0131 	movt	r1, #24625	; 0x6031
   84cbe:	9104      	str	r1, [sp, #16]
			| DMAC_CTRLB_DST_DSCR_FETCH_DISABLE
			| DMAC_CTRLB_FC_MEM2PER_DMA_FC
			| DMAC_CTRLB_SRC_INCR_INCREMENTING
			| DMAC_CTRLB_DST_INCR_FIXED
			| DMAC_CTRLB_IEN;
	desc.ul_descriptor_addr = (uint32_t)NULL;
   84cc0:	f04f 0400 	mov.w	r4, #0
   84cc4:	9405      	str	r4, [sp, #20]
	dmac_channel_single_buf_transfer_init(DMAC, CONF_HSMCI_DMA_CHANNEL,
   84cc6:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84cca:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84cce:	4628      	mov	r0, r5
   84cd0:	4621      	mov	r1, r4
   84cd2:	aa01      	add	r2, sp, #4
   84cd4:	f245 139d 	movw	r3, #20893	; 0x519d
   84cd8:	f2c0 0308 	movt	r3, #8
   84cdc:	4798      	blx	r3
			&desc);

	// Start DMA transfer
	dmac_channel_enable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84cde:	4628      	mov	r0, r5
   84ce0:	4621      	mov	r1, r4
   84ce2:	f245 123d 	movw	r2, #20797	; 0x513d
   84ce6:	f2c0 0208 	movt	r2, #8
   84cea:	4790      	blx	r2
	hsmci_transfert_pos += nb_data;
   84cec:	f640 406c 	movw	r0, #3180	; 0xc6c
   84cf0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84cf4:	6801      	ldr	r1, [r0, #0]
   84cf6:	1876      	adds	r6, r6, r1
   84cf8:	6006      	str	r6, [r0, #0]
	return true;
}
   84cfa:	f04f 0001 	mov.w	r0, #1
   84cfe:	b006      	add	sp, #24
   84d00:	bd70      	pop	{r4, r5, r6, pc}
   84d02:	bf00      	nop

00084d04 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
   84d04:	b510      	push	{r4, lr}
			hsmci_reset();
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   84d06:	f640 436a 	movw	r3, #3178	; 0xc6a
   84d0a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84d0e:	8818      	ldrh	r0, [r3, #0]
   84d10:	f640 4268 	movw	r2, #3176	; 0xc68
   84d14:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84d18:	8814      	ldrh	r4, [r2, #0]
   84d1a:	fb04 f400 	mul.w	r4, r4, r0
   84d1e:	f640 416c 	movw	r1, #3180	; 0xc6c
   84d22:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84d26:	6808      	ldr	r0, [r1, #0]
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
   84d28:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84d2c:	f04f 0200 	mov.w	r2, #0
   84d30:	f2cc 0260 	movt	r2, #49248	; 0xc060
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
   84d34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84d36:	4213      	tst	r3, r2
   84d38:	d012      	beq.n	84d60 <hsmci_wait_end_of_write_blocks+0x5c>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   84d3a:	f244 609d 	movw	r0, #18077	; 0x469d
   84d3e:	f2c0 0008 	movt	r0, #8
   84d42:	4780      	blx	r0
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84d44:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   84d48:	f2c4 000c 	movt	r0, #16396	; 0x400c
   84d4c:	f04f 0100 	mov.w	r1, #0
   84d50:	f245 1249 	movw	r2, #20809	; 0x5149
   84d54:	f2c0 0208 	movt	r2, #8
   84d58:	4790      	blx	r2
			return false;
   84d5a:	f04f 0000 	mov.w	r0, #0
   84d5e:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   84d60:	4284      	cmp	r4, r0
   84d62:	d902      	bls.n	84d6a <hsmci_wait_end_of_write_blocks+0x66>
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
   84d64:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   84d68:	d105      	bne.n	84d76 <hsmci_wait_end_of_write_blocks+0x72>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
   84d6a:	f013 0f20 	tst.w	r3, #32
   84d6e:	d0e1      	beq.n	84d34 <hsmci_wait_end_of_write_blocks+0x30>
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	return true;
   84d70:	f04f 0001 	mov.w	r0, #1
   84d74:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
				return true;
   84d76:	f04f 0001 	mov.w	r0, #1
	} while (!(sr & HSMCI_SR_NOTBUSY));
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	return true;

}
   84d7a:	bd10      	pop	{r4, pc}

00084d7c <cdc_send_line>:
volatile Bool is_new_received_cdc_char = false;
volatile Bool is_terminal_open = false;


iram_size_t cdc_send_line(char* line_to_send)
{
   84d7c:	b510      	push	{r4, lr}
   84d7e:	4604      	mov	r4, r0
	if(is_terminal_open)
   84d80:	f640 4370 	movw	r3, #3184	; 0xc70
   84d84:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84d88:	7818      	ldrb	r0, [r3, #0]
   84d8a:	b168      	cbz	r0, 84da8 <cdc_send_line+0x2c>
		return udi_cdc_write_buf((const void*) line_to_send, strlen(line_to_send));
   84d8c:	4620      	mov	r0, r4
   84d8e:	f64a 02a5 	movw	r2, #43173	; 0xa8a5
   84d92:	f2c0 0208 	movt	r2, #8
   84d96:	4790      	blx	r2
   84d98:	4601      	mov	r1, r0
   84d9a:	4620      	mov	r0, r4
   84d9c:	f645 4365 	movw	r3, #23653	; 0x5c65
   84da0:	f2c0 0308 	movt	r3, #8
   84da4:	4798      	blx	r3
   84da6:	bd10      	pop	{r4, pc}
	else
		return strlen(line_to_send);
   84da8:	4620      	mov	r0, r4
   84daa:	f64a 01a5 	movw	r1, #43173	; 0xa8a5
   84dae:	f2c0 0108 	movt	r1, #8
   84db2:	4788      	blx	r1
}
   84db4:	bd10      	pop	{r4, pc}
   84db6:	bf00      	nop

00084db8 <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
	if (b_enable) 
   84db8:	b139      	cbz	r1, 84dca <main_cdc_set_dtr+0x12>
		is_terminal_open = true;
   84dba:	f640 4070 	movw	r0, #3184	; 0xc70
   84dbe:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84dc2:	f04f 0101 	mov.w	r1, #1
   84dc6:	7001      	strb	r1, [r0, #0]
   84dc8:	4770      	bx	lr
	else
		is_terminal_open = false;
   84dca:	f640 4370 	movw	r3, #3184	; 0xc70
   84dce:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84dd2:	f04f 0200 	mov.w	r2, #0
   84dd6:	701a      	strb	r2, [r3, #0]
   84dd8:	4770      	bx	lr
   84dda:	bf00      	nop

00084ddc <uart_rx_notify>:
}

void uart_rx_notify(uint8_t port)
{
	UNUSED(port);
	is_new_received_cdc_char = true;
   84ddc:	f640 4371 	movw	r3, #3185	; 0xc71
   84de0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84de4:	f04f 0201 	mov.w	r2, #1
   84de8:	701a      	strb	r2, [r3, #0]
   84dea:	4770      	bx	lr

00084dec <main_suspend_action>:
	cpu_irq_restore(flags);	
	
	return true;
}

void main_suspend_action(void){}
   84dec:	4770      	bx	lr
   84dee:	bf00      	nop

00084df0 <main_resume_action>:
void main_resume_action(void){}
   84df0:	4770      	bx	lr
   84df2:	bf00      	nop

00084df4 <main_sof_action>:
void main_sof_action(void){}
   84df4:	4770      	bx	lr
   84df6:	bf00      	nop

00084df8 <SCPI_Write>:
uint16_t current_input_line_pointer = 0;
char current_input_line[LINE_BUFFER_SIZE];


size_t SCPI_Write(scpi_t * context, const char * data, size_t len) 
{
   84df8:	b530      	push	{r4, r5, lr}
   84dfa:	b083      	sub	sp, #12
   84dfc:	4613      	mov	r3, r2
	(void) context;
	printf("%.*s", len, data);
   84dfe:	f641 3478 	movw	r4, #7032	; 0x1b78
   84e02:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84e06:	9100      	str	r1, [sp, #0]
   84e08:	4620      	mov	r0, r4
   84e0a:	f04f 0164 	mov.w	r1, #100	; 0x64
   84e0e:	f24d 626c 	movw	r2, #54892	; 0xd66c
   84e12:	f2c0 0208 	movt	r2, #8
   84e16:	f64a 053f 	movw	r5, #43071	; 0xa83f
   84e1a:	f2c0 0508 	movt	r5, #8
   84e1e:	47a8      	blx	r5
   84e20:	4620      	mov	r0, r4
   84e22:	f644 537d 	movw	r3, #19837	; 0x4d7d
   84e26:	f2c0 0308 	movt	r3, #8
   84e2a:	4798      	blx	r3
	return SCPI_RES_OK;    
}
   84e2c:	f04f 0001 	mov.w	r0, #1
   84e30:	b003      	add	sp, #12
   84e32:	bd30      	pop	{r4, r5, pc}

00084e34 <SCPI_Flush>:

scpi_result_t SCPI_Flush(scpi_t * context) 
{
	return SCPI_RES_OK;
}
   84e34:	f04f 0001 	mov.w	r0, #1
   84e38:	4770      	bx	lr
   84e3a:	bf00      	nop

00084e3c <SCPI_Error>:

int SCPI_Error(scpi_t * context, int_fast16_t err) 
{
   84e3c:	b530      	push	{r4, r5, lr}
   84e3e:	b083      	sub	sp, #12
   84e40:	460d      	mov	r5, r1
	(void) context;
	printf("**ERROR: %d, \"%s\"\r\n", (int32_t) err, SCPI_ErrorTranslate(err));
   84e42:	b208      	sxth	r0, r1
   84e44:	f642 13e9 	movw	r3, #10729	; 0x29e9
   84e48:	f2c0 0308 	movt	r3, #8
   84e4c:	4798      	blx	r3
   84e4e:	f641 3478 	movw	r4, #7032	; 0x1b78
   84e52:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84e56:	9000      	str	r0, [sp, #0]
   84e58:	4620      	mov	r0, r4
   84e5a:	f04f 0164 	mov.w	r1, #100	; 0x64
   84e5e:	f24d 6274 	movw	r2, #54900	; 0xd674
   84e62:	f2c0 0208 	movt	r2, #8
   84e66:	462b      	mov	r3, r5
   84e68:	f64a 053f 	movw	r5, #43071	; 0xa83f
   84e6c:	f2c0 0508 	movt	r5, #8
   84e70:	47a8      	blx	r5
   84e72:	4620      	mov	r0, r4
   84e74:	f644 517d 	movw	r1, #19837	; 0x4d7d
   84e78:	f2c0 0108 	movt	r1, #8
   84e7c:	4788      	blx	r1
	return 0;
}
   84e7e:	f04f 0000 	mov.w	r0, #0
   84e82:	b003      	add	sp, #12
   84e84:	bd30      	pop	{r4, r5, pc}
   84e86:	bf00      	nop

00084e88 <SCPI_Control>:

scpi_result_t SCPI_Control(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) 
{
   84e88:	b530      	push	{r4, r5, lr}
   84e8a:	b083      	sub	sp, #12
   84e8c:	460b      	mov	r3, r1
   84e8e:	4614      	mov	r4, r2
	if (SCPI_CTRL_SRQ == ctrl) 
   84e90:	2901      	cmp	r1, #1
   84e92:	d118      	bne.n	84ec6 <SCPI_Control+0x3e>
	{
		printf("**SRQ: 0x%X (%d)\r\n", val, val);
   84e94:	f641 3578 	movw	r5, #7032	; 0x1b78
   84e98:	f2c2 0507 	movt	r5, #8199	; 0x2007
   84e9c:	9200      	str	r2, [sp, #0]
   84e9e:	4628      	mov	r0, r5
   84ea0:	f04f 0164 	mov.w	r1, #100	; 0x64
   84ea4:	f24d 6288 	movw	r2, #54920	; 0xd688
   84ea8:	f2c0 0208 	movt	r2, #8
   84eac:	4623      	mov	r3, r4
   84eae:	f64a 043f 	movw	r4, #43071	; 0xa83f
   84eb2:	f2c0 0408 	movt	r4, #8
   84eb6:	47a0      	blx	r4
   84eb8:	4628      	mov	r0, r5
   84eba:	f644 517d 	movw	r1, #19837	; 0x4d7d
   84ebe:	f2c0 0108 	movt	r1, #8
   84ec2:	4788      	blx	r1
   84ec4:	e017      	b.n	84ef6 <SCPI_Control+0x6e>
	}
	else 
	{
		printf("**CTRL %02x: 0x%X (%d)\r\n", ctrl, val, val);
   84ec6:	f641 3578 	movw	r5, #7032	; 0x1b78
   84eca:	f2c2 0507 	movt	r5, #8199	; 0x2007
   84ece:	9200      	str	r2, [sp, #0]
   84ed0:	9201      	str	r2, [sp, #4]
   84ed2:	4628      	mov	r0, r5
   84ed4:	f04f 0164 	mov.w	r1, #100	; 0x64
   84ed8:	f24d 629c 	movw	r2, #54940	; 0xd69c
   84edc:	f2c0 0208 	movt	r2, #8
   84ee0:	f64a 043f 	movw	r4, #43071	; 0xa83f
   84ee4:	f2c0 0408 	movt	r4, #8
   84ee8:	47a0      	blx	r4
   84eea:	4628      	mov	r0, r5
   84eec:	f644 537d 	movw	r3, #19837	; 0x4d7d
   84ef0:	f2c0 0308 	movt	r3, #8
   84ef4:	4798      	blx	r3
	}
	return SCPI_RES_OK;
}
   84ef6:	f04f 0001 	mov.w	r0, #1
   84efa:	b003      	add	sp, #12
   84efc:	bd30      	pop	{r4, r5, pc}
   84efe:	bf00      	nop

00084f00 <SCPI_Test>:

scpi_result_t SCPI_Test(scpi_t * context) 
{
   84f00:	b508      	push	{r3, lr}
	printf("**Test\r\n");
   84f02:	f641 3278 	movw	r2, #7032	; 0x1b78
   84f06:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84f0a:	f24d 63b8 	movw	r3, #54968	; 0xd6b8
   84f0e:	f2c0 0308 	movt	r3, #8
   84f12:	cb03      	ldmia	r3!, {r0, r1}
   84f14:	6010      	str	r0, [r2, #0]
   84f16:	6051      	str	r1, [r2, #4]
   84f18:	7818      	ldrb	r0, [r3, #0]
   84f1a:	7210      	strb	r0, [r2, #8]
   84f1c:	4610      	mov	r0, r2
   84f1e:	f644 517d 	movw	r1, #19837	; 0x4d7d
   84f22:	f2c0 0108 	movt	r1, #8
   84f26:	4788      	blx	r1
	return SCPI_RES_OK;
}
   84f28:	f04f 0001 	mov.w	r0, #1
   84f2c:	bd08      	pop	{r3, pc}
   84f2e:	bf00      	nop

00084f30 <SCPI_Reset>:

scpi_result_t SCPI_Reset(scpi_t * context) 
{
   84f30:	b508      	push	{r3, lr}
	printf("**Reset\r\n");
   84f32:	f641 3278 	movw	r2, #7032	; 0x1b78
   84f36:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84f3a:	f24d 63c4 	movw	r3, #54980	; 0xd6c4
   84f3e:	f2c0 0308 	movt	r3, #8
   84f42:	cb03      	ldmia	r3!, {r0, r1}
   84f44:	6010      	str	r0, [r2, #0]
   84f46:	6051      	str	r1, [r2, #4]
   84f48:	8818      	ldrh	r0, [r3, #0]
   84f4a:	8110      	strh	r0, [r2, #8]
   84f4c:	4610      	mov	r0, r2
   84f4e:	f644 517d 	movw	r1, #19837	; 0x4d7d
   84f52:	f2c0 0108 	movt	r1, #8
   84f56:	4788      	blx	r1
	return SCPI_RES_OK;
}
   84f58:	f04f 0001 	mov.w	r0, #1
   84f5c:	bd08      	pop	{r3, pc}
   84f5e:	bf00      	nop

00084f60 <console_init>:

void console_init(void)
{
   84f60:	b508      	push	{r3, lr}
	SCPI_Init(&scpi_context);
   84f62:	f240 0040 	movw	r0, #64	; 0x40
   84f66:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84f6a:	f243 333d 	movw	r3, #13117	; 0x333d
   84f6e:	f2c0 0308 	movt	r3, #8
   84f72:	4798      	blx	r3
   84f74:	bd08      	pop	{r3, pc}
   84f76:	bf00      	nop

00084f78 <console_process>:
}

void console_process(void)
{
   84f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	iram_size_t data_remaining = 0;
	uint8_t temp_buffer[10];
	
	if(udi_cdc_get_nb_received_data() == 0)
   84f7c:	f245 73c9 	movw	r3, #22473	; 0x57c9
   84f80:	f2c0 0308 	movt	r3, #8
   84f84:	4798      	blx	r3
   84f86:	2800      	cmp	r0, #0
   84f88:	d040      	beq.n	8500c <console_process+0x94>
		return;
	
	do 
	{
		data_remaining = udi_cdc_read_buf(current_input_line+current_input_line_pointer, 1);
   84f8a:	f640 4472 	movw	r4, #3186	; 0xc72
   84f8e:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84f92:	f641 35dc 	movw	r5, #7132	; 0x1bdc
   84f96:	f2c2 0507 	movt	r5, #8199	; 0x2007
   84f9a:	f04f 0601 	mov.w	r6, #1
   84f9e:	f645 2add 	movw	sl, #23261	; 0x5add
   84fa2:	f2c0 0a08 	movt	sl, #8
		//udi_cdc_putc(current_input_line[current_input_line_pointer]);
		SCPI_Input(&scpi_context, current_input_line+current_input_line_pointer, 1);
   84fa6:	f240 0940 	movw	r9, #64	; 0x40
   84faa:	f2c2 0907 	movt	r9, #8199	; 0x2007
   84fae:	f243 3851 	movw	r8, #13137	; 0x3351
   84fb2:	f2c0 0808 	movt	r8, #8
	if(udi_cdc_get_nb_received_data() == 0)
		return;
	
	do 
	{
		data_remaining = udi_cdc_read_buf(current_input_line+current_input_line_pointer, 1);
   84fb6:	8820      	ldrh	r0, [r4, #0]
   84fb8:	1940      	adds	r0, r0, r5
   84fba:	4631      	mov	r1, r6
   84fbc:	47d0      	blx	sl
   84fbe:	4607      	mov	r7, r0
		//udi_cdc_putc(current_input_line[current_input_line_pointer]);
		SCPI_Input(&scpi_context, current_input_line+current_input_line_pointer, 1);
   84fc0:	8821      	ldrh	r1, [r4, #0]
   84fc2:	4648      	mov	r0, r9
   84fc4:	1949      	adds	r1, r1, r5
   84fc6:	4632      	mov	r2, r6
   84fc8:	47c0      	blx	r8
		current_input_line_pointer++;
   84fca:	8822      	ldrh	r2, [r4, #0]
   84fcc:	f102 0201 	add.w	r2, r2, #1
   84fd0:	b293      	uxth	r3, r2
   84fd2:	8023      	strh	r3, [r4, #0]
		
		if((current_input_line[current_input_line_pointer-1] == 0x0D) || (current_input_line[current_input_line_pointer-1] == 0x0A))
   84fd4:	18e8      	adds	r0, r5, r3
   84fd6:	f810 1c01 	ldrb.w	r1, [r0, #-1]
   84fda:	290d      	cmp	r1, #13
   84fdc:	d001      	beq.n	84fe2 <console_process+0x6a>
   84fde:	290a      	cmp	r1, #10
   84fe0:	d102      	bne.n	84fe8 <console_process+0x70>
		{
			current_input_line_pointer = 0;
   84fe2:	f04f 0200 	mov.w	r2, #0
   84fe6:	8022      	strh	r2, [r4, #0]
			// should we do another parsing rather than scpi?
		}
	} 
	while((data_remaining > 0) && (current_input_line_pointer < LINE_BUFFER_SIZE));
   84fe8:	b117      	cbz	r7, 84ff0 <console_process+0x78>
   84fea:	8823      	ldrh	r3, [r4, #0]
   84fec:	2bc7      	cmp	r3, #199	; 0xc7
   84fee:	d9e2      	bls.n	84fb6 <console_process+0x3e>
	
	if(current_input_line_pointer == LINE_BUFFER_SIZE)
   84ff0:	f640 4072 	movw	r0, #3186	; 0xc72
   84ff4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84ff8:	8801      	ldrh	r1, [r0, #0]
   84ffa:	29c8      	cmp	r1, #200	; 0xc8
   84ffc:	d106      	bne.n	8500c <console_process+0x94>
	{
		// We should return a message or smth...
		current_input_line_pointer = 0;
   84ffe:	f640 4372 	movw	r3, #3186	; 0xc72
   85002:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85006:	f04f 0200 	mov.w	r2, #0
   8500a:	801a      	strh	r2, [r3, #0]
   8500c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00085010 <main_extra_string>:
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   85010:	f641 43ac 	movw	r3, #7340	; 0x1cac
   85014:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85018:	7898      	ldrb	r0, [r3, #2]
   8501a:	2804      	cmp	r0, #4
   8501c:	d002      	beq.n	85024 <main_extra_string+0x14>
   8501e:	2805      	cmp	r0, #5
   85020:	d13b      	bne.n	8509a <main_extra_string+0x8a>
   85022:	e004      	b.n	8502e <main_extra_string+0x1e>
	case UDI_CDC_IAD_STRING_ID:
		str_lgt = sizeof(udi_cdc_name)-1;
		str = udi_cdc_name;
   85024:	f240 02c4 	movw	r2, #196	; 0xc4
   85028:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8502c:	e003      	b.n	85036 <main_extra_string+0x26>
		break;
	case UDI_MSC_STRING_ID:
		str_lgt = sizeof(udi_msc_name)-1;
		str = udi_msc_name;
   8502e:	f240 02b4 	movw	r2, #180	; 0xb4
   85032:	f2c2 0207 	movt	r2, #8199	; 0x2007
		return false;
	}

	if (str_lgt!=0) {
		for( i=0; i<str_lgt; i++) {
			extra_strings_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   85036:	f240 0398 	movw	r3, #152	; 0x98
   8503a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8503e:	7811      	ldrb	r1, [r2, #0]
   85040:	8059      	strh	r1, [r3, #2]
   85042:	7850      	ldrb	r0, [r2, #1]
   85044:	8098      	strh	r0, [r3, #4]
   85046:	7891      	ldrb	r1, [r2, #2]
   85048:	80d9      	strh	r1, [r3, #6]
   8504a:	78d0      	ldrb	r0, [r2, #3]
   8504c:	8118      	strh	r0, [r3, #8]
   8504e:	7911      	ldrb	r1, [r2, #4]
   85050:	8159      	strh	r1, [r3, #10]
   85052:	7950      	ldrb	r0, [r2, #5]
   85054:	8198      	strh	r0, [r3, #12]
   85056:	7991      	ldrb	r1, [r2, #6]
   85058:	81d9      	strh	r1, [r3, #14]
   8505a:	79d0      	ldrb	r0, [r2, #7]
   8505c:	8218      	strh	r0, [r3, #16]
   8505e:	7a11      	ldrb	r1, [r2, #8]
   85060:	8259      	strh	r1, [r3, #18]
   85062:	7a50      	ldrb	r0, [r2, #9]
   85064:	8298      	strh	r0, [r3, #20]
   85066:	7a91      	ldrb	r1, [r2, #10]
   85068:	82d9      	strh	r1, [r3, #22]
   8506a:	7ad0      	ldrb	r0, [r2, #11]
   8506c:	8318      	strh	r0, [r3, #24]
   8506e:	7b12      	ldrb	r2, [r2, #12]
   85070:	835a      	strh	r2, [r3, #26]
		}
		extra_strings_desc.header.bLength = 2+ (str_lgt)*2;
   85072:	f04f 011c 	mov.w	r1, #28
   85076:	7019      	strb	r1, [r3, #0]
		udd_g_ctrlreq.payload_size = extra_strings_desc.header.bLength;
   85078:	f641 40ac 	movw	r0, #7340	; 0x1cac
   8507c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85080:	8181      	strh	r1, [r0, #12]
		udd_g_ctrlreq.payload = (uint8_t *) &extra_strings_desc;
   85082:	6083      	str	r3, [r0, #8]
	}

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength) {
   85084:	88c3      	ldrh	r3, [r0, #6]
   85086:	2b1b      	cmp	r3, #27
   85088:	d80a      	bhi.n	850a0 <main_extra_string+0x90>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   8508a:	f641 42ac 	movw	r2, #7340	; 0x1cac
   8508e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85092:	8193      	strh	r3, [r2, #12]
	}
	return true;
   85094:	f04f 0001 	mov.w	r0, #1
   85098:	4770      	bx	lr
	case UDI_MSC_STRING_ID:
		str_lgt = sizeof(udi_msc_name)-1;
		str = udi_msc_name;
		break;
	default:
		return false;
   8509a:	f04f 0000 	mov.w	r0, #0
   8509e:	4770      	bx	lr

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
   850a0:	f04f 0001 	mov.w	r0, #1
   850a4:	4770      	bx	lr
   850a6:	bf00      	nop

000850a8 <HardFault_Handler>:
         * Get the appropriate stack pointer, depending on our mode,
         * and use it as the parameter to the C handler. This function
         * will never return
         */

        __asm(  ".syntax unified\n"
   850a8:	2004      	movs	r0, #4
   850aa:	4671      	mov	r1, lr
   850ac:	4208      	tst	r0, r1
   850ae:	f000 8004 	beq.w	850ba <_MSP>
   850b2:	f3ef 8009 	mrs	r0, PSP
   850b6:	f000 b805 	b.w	850c4 <HardFault_HandlerC>

000850ba <_MSP>:
   850ba:	f3ef 8008 	mrs	r0, MSP
   850be:	f000 b801 	b.w	850c4 <HardFault_HandlerC>
   850c2:	bf00      	nop

000850c4 <HardFault_HandlerC>:
 * into local variables for ease of reading.
 * We then read the various Fault Status and Address Registers to help decode
 * cause of the fault.
 * The function ends with a BKPT instruction to force control back into the debugger
 */
void HardFault_HandlerC(unsigned long *hardfault_args){
   850c4:	b08e      	sub	sp, #56	; 0x38
        volatile unsigned long _DFSR ;
        volatile unsigned long _AFSR ;
        volatile unsigned long _BFAR ;
        volatile unsigned long _MMAR ;

        stacked_r0 = ((unsigned long)hardfault_args[0]) ;
   850c6:	6803      	ldr	r3, [r0, #0]
   850c8:	930d      	str	r3, [sp, #52]	; 0x34
        stacked_r1 = ((unsigned long)hardfault_args[1]) ;
   850ca:	6841      	ldr	r1, [r0, #4]
   850cc:	910c      	str	r1, [sp, #48]	; 0x30
        stacked_r2 = ((unsigned long)hardfault_args[2]) ;
   850ce:	6882      	ldr	r2, [r0, #8]
   850d0:	920b      	str	r2, [sp, #44]	; 0x2c
        stacked_r3 = ((unsigned long)hardfault_args[3]) ;
   850d2:	68c3      	ldr	r3, [r0, #12]
   850d4:	930a      	str	r3, [sp, #40]	; 0x28
        stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   850d6:	6901      	ldr	r1, [r0, #16]
   850d8:	9109      	str	r1, [sp, #36]	; 0x24
        stacked_lr = ((unsigned long)hardfault_args[5]) ;
   850da:	6942      	ldr	r2, [r0, #20]
   850dc:	9208      	str	r2, [sp, #32]
        stacked_pc = ((unsigned long)hardfault_args[6]) ;
   850de:	6983      	ldr	r3, [r0, #24]
   850e0:	9307      	str	r3, [sp, #28]
        stacked_psr = ((unsigned long)hardfault_args[7]) ;
   850e2:	69c0      	ldr	r0, [r0, #28]
   850e4:	9006      	str	r0, [sp, #24]

        // Configurable Fault Status Register
        // Consists of MMSR, BFSR and UFSR
        _CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;   
   850e6:	f64e 5128 	movw	r1, #60712	; 0xed28
   850ea:	f2ce 0100 	movt	r1, #57344	; 0xe000
   850ee:	680a      	ldr	r2, [r1, #0]
   850f0:	9205      	str	r2, [sp, #20]
                                                                                        
        // Hard Fault Status Register
        _HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   850f2:	f64e 532c 	movw	r3, #60716	; 0xed2c
   850f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
   850fa:	6818      	ldr	r0, [r3, #0]
   850fc:	9004      	str	r0, [sp, #16]

        // Debug Fault Status Register
        _DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   850fe:	f64e 5130 	movw	r1, #60720	; 0xed30
   85102:	f2ce 0100 	movt	r1, #57344	; 0xe000
   85106:	680a      	ldr	r2, [r1, #0]
   85108:	9203      	str	r2, [sp, #12]

        // Auxiliary Fault Status Register
        _AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   8510a:	f64e 533c 	movw	r3, #60732	; 0xed3c
   8510e:	f2ce 0300 	movt	r3, #57344	; 0xe000
   85112:	6818      	ldr	r0, [r3, #0]
   85114:	9002      	str	r0, [sp, #8]

        // Read the Fault Address Registers. These may not contain valid values.
        // Check BFARVALID/MMARVALID to see if they are valid values
        // MemManage Fault Address Register
        _MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   85116:	f64e 5134 	movw	r1, #60724	; 0xed34
   8511a:	f2ce 0100 	movt	r1, #57344	; 0xe000
   8511e:	680a      	ldr	r2, [r1, #0]
   85120:	9200      	str	r2, [sp, #0]
        // Bus Fault Address Register
        _BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   85122:	f64e 5338 	movw	r3, #60728	; 0xed38
   85126:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8512a:	6818      	ldr	r0, [r3, #0]
   8512c:	9001      	str	r0, [sp, #4]

        __asm("BKPT #0\n") ; // Break into the debugger
   8512e:	be00      	bkpt	0x0000
   85130:	e7fe      	b.n	85130 <HardFault_HandlerC+0x6c>
   85132:	bf00      	nop

00085134 <dmac_enable>:
 *
 * \param p_dmac  Pointer to a DMAC peripheral instance.
 */
void dmac_enable(Dmac *p_dmac)
{
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   85134:	f04f 0301 	mov.w	r3, #1
   85138:	6043      	str	r3, [r0, #4]
   8513a:	4770      	bx	lr

0008513c <dmac_channel_enable>:
 * \param p_dmac Pointer to a DMAC peripheral instance.
 * \param ul_num Channel number.
 */
void dmac_channel_enable(Dmac *p_dmac, uint32_t ul_num)
{
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   8513c:	f04f 0301 	mov.w	r3, #1
   85140:	fa03 f101 	lsl.w	r1, r3, r1
   85144:	6281      	str	r1, [r0, #40]	; 0x28
   85146:	4770      	bx	lr

00085148 <dmac_channel_disable>:
 * \param p_dmac Pointer to a DMAC peripheral instance.
 * \param ul_num Channel number.
 */
void dmac_channel_disable(Dmac *p_dmac, uint32_t ul_num)
{
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   85148:	f04f 0301 	mov.w	r3, #1
   8514c:	fa03 f101 	lsl.w	r1, r3, r1
   85150:	62c1      	str	r1, [r0, #44]	; 0x2c
   85152:	4770      	bx	lr

00085154 <dmac_channel_set_source_addr>:
 * \note This register must be aligned with the source transfer width.
 */
void dmac_channel_set_source_addr(Dmac *p_dmac,
		uint32_t ul_num, uint32_t ul_addr)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   85154:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   85158:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   8515c:	63c2      	str	r2, [r0, #60]	; 0x3c
   8515e:	4770      	bx	lr

00085160 <dmac_channel_set_destination_addr>:
 * \note This register must be aligned with the source transfer width.
 */
void dmac_channel_set_destination_addr(Dmac *p_dmac, uint32_t ul_num,
		uint32_t ul_addr)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   85160:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   85164:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   85168:	6402      	str	r2, [r0, #64]	; 0x40
   8516a:	4770      	bx	lr

0008516c <dmac_channel_set_descriptor_addr>:
 * \param ul_desc     Descriptor address.
 */
void dmac_channel_set_descriptor_addr(Dmac *p_dmac,
		uint32_t ul_num, uint32_t ul_desc)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   8516c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   85170:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   85174:	6442      	str	r2, [r0, #68]	; 0x44
   85176:	4770      	bx	lr

00085178 <dmac_channel_set_ctrlA>:
 * \param ul_num      Channel number.
 * \param ul_ctrlA    Configuration of control A register.
 */
void dmac_channel_set_ctrlA(Dmac *p_dmac, uint32_t ul_num, uint32_t ul_ctrlA)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   85178:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8517c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   85180:	6482      	str	r2, [r0, #72]	; 0x48
   85182:	4770      	bx	lr

00085184 <dmac_channel_set_ctrlB>:
 * \param ul_num      Channel number.
 * \param ul_ctrlB    Configuration of control B register.
 */
void dmac_channel_set_ctrlB(Dmac *p_dmac, uint32_t ul_num, uint32_t ul_ctrlB)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   85184:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   85188:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   8518c:	64c2      	str	r2, [r0, #76]	; 0x4c
   8518e:	4770      	bx	lr

00085190 <dmac_channel_set_configuration>:
 * \param ul_cfg      Configuration of CFG register.
 */
void dmac_channel_set_configuration(Dmac *p_dmac, uint32_t ul_num,
		uint32_t ul_cfg)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   85190:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   85194:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   85198:	6502      	str	r2, [r0, #80]	; 0x50
   8519a:	4770      	bx	lr

0008519c <dmac_channel_single_buf_transfer_init>:
 * \param ul_num      Channel number.
 * \param p_desc      Pointer to a transfer descriptor.
 */
void dmac_channel_single_buf_transfer_init(Dmac *p_dmac,
		uint32_t ul_num, dma_transfer_descriptor_t *p_desc)
{
   8519c:	b570      	push	{r4, r5, r6, lr}
   8519e:	4604      	mov	r4, r0
   851a0:	460e      	mov	r6, r1
   851a2:	4615      	mov	r5, r2
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   851a4:	6a43      	ldr	r3, [r0, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   851a6:	6812      	ldr	r2, [r2, #0]
   851a8:	f245 1355 	movw	r3, #20821	; 0x5155
   851ac:	f2c0 0308 	movt	r3, #8
   851b0:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   851b2:	4620      	mov	r0, r4
   851b4:	4631      	mov	r1, r6
   851b6:	686a      	ldr	r2, [r5, #4]
   851b8:	f245 1361 	movw	r3, #20833	; 0x5161
   851bc:	f2c0 0308 	movt	r3, #8
   851c0:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   851c2:	4620      	mov	r0, r4
   851c4:	4631      	mov	r1, r6
   851c6:	f04f 0200 	mov.w	r2, #0
   851ca:	f245 136d 	movw	r3, #20845	; 0x516d
   851ce:	f2c0 0308 	movt	r3, #8
   851d2:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   851d4:	4620      	mov	r0, r4
   851d6:	4631      	mov	r1, r6
   851d8:	68aa      	ldr	r2, [r5, #8]
   851da:	f245 1379 	movw	r3, #20857	; 0x5179
   851de:	f2c0 0308 	movt	r3, #8
   851e2:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   851e4:	4620      	mov	r0, r4
   851e6:	4631      	mov	r1, r6
   851e8:	68ea      	ldr	r2, [r5, #12]
   851ea:	f245 1385 	movw	r3, #20869	; 0x5185
   851ee:	f2c0 0308 	movt	r3, #8
   851f2:	4798      	blx	r3
   851f4:	bd70      	pop	{r4, r5, r6, pc}
   851f6:	bf00      	nop

000851f8 <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode. 
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
   851f8:	b121      	cbz	r1, 85204 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
   851fa:	6842      	ldr	r2, [r0, #4]
   851fc:	f042 0301 	orr.w	r3, r2, #1
   85200:	6043      	str	r3, [r0, #4]
   85202:	4770      	bx	lr
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
   85204:	6843      	ldr	r3, [r0, #4]
   85206:	f023 0101 	bic.w	r1, r3, #1
   8520a:	6041      	str	r1, [r0, #4]
   8520c:	4770      	bx	lr
   8520e:	bf00      	nop

00085210 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
   85210:	6201      	str	r1, [r0, #32]
   85212:	4770      	bx	lr

00085214 <rtc_disable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be disabled.
 */
void rtc_disable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IDR = ul_sources;
   85214:	6241      	str	r1, [r0, #36]	; 0x24
   85216:	4770      	bx	lr

00085218 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
   85218:	6980      	ldr	r0, [r0, #24]
}
   8521a:	4770      	bx	lr

0008521c <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared. 
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
   8521c:	61c1      	str	r1, [r0, #28]
   8521e:	4770      	bx	lr

00085220 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   85220:	b508      	push	{r3, lr}
	}
#endif

	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_UPLL) {

		pmc_enable_upll_clock();
   85222:	f647 03f5 	movw	r3, #30965	; 0x78f5
   85226:	f2c0 0308 	movt	r3, #8
   8522a:	4798      	blx	r3
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
   8522c:	f04f 0000 	mov.w	r0, #0
   85230:	f647 1199 	movw	r1, #31129	; 0x7999
   85234:	f2c0 0108 	movt	r1, #8
   85238:	4788      	blx	r1
		pmc_enable_udpck();
   8523a:	f647 10b1 	movw	r0, #31153	; 0x79b1
   8523e:	f2c0 0008 	movt	r0, #8
   85242:	4780      	blx	r0
   85244:	bd08      	pop	{r3, pc}
   85246:	bf00      	nop

00085248 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   85248:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8524a:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   8524e:	f2c0 5001 	movt	r0, #1281	; 0x501
   85252:	f649 4399 	movw	r3, #40089	; 0x9c99
   85256:	f2c0 0308 	movt	r3, #8
   8525a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8525c:	f04f 0000 	mov.w	r0, #0
   85260:	f04f 013e 	mov.w	r1, #62	; 0x3e
   85264:	f647 0255 	movw	r2, #30805	; 0x7855
   85268:	f2c0 0208 	movt	r2, #8
   8526c:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8526e:	f647 04c5 	movw	r4, #30917	; 0x78c5
   85272:	f2c0 0408 	movt	r4, #8
   85276:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   85278:	2800      	cmp	r0, #0
   8527a:	d0fc      	beq.n	85276 <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8527c:	f647 00d5 	movw	r0, #30933	; 0x78d5
   85280:	f2c0 0008 	movt	r0, #8
   85284:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   85286:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   8528a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8528e:	f643 7301 	movw	r3, #16129	; 0x3f01
   85292:	f2c2 030d 	movt	r3, #8205	; 0x200d
   85296:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   85298:	f647 04e5 	movw	r4, #30949	; 0x78e5
   8529c:	f2c0 0408 	movt	r4, #8
   852a0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   852a2:	2800      	cmp	r0, #0
   852a4:	d0fc      	beq.n	852a0 <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   852a6:	f04f 0010 	mov.w	r0, #16
   852aa:	f247 72b5 	movw	r2, #30645	; 0x77b5
   852ae:	f2c0 0208 	movt	r2, #8
   852b2:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   852b4:	f649 20d1 	movw	r0, #39633	; 0x9ad1
   852b8:	f2c0 0008 	movt	r0, #8
   852bc:	4780      	blx	r0
   852be:	bd10      	pop	{r4, pc}

000852c0 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
   852c0:	f04f 0001 	mov.w	r0, #1
   852c4:	4770      	bx	lr
   852c6:	bf00      	nop

000852c8 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   852c8:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
   852ca:	b928      	cbnz	r0, 852d8 <mem_test_unit_ready+0x10>
   852cc:	f244 4371 	movw	r3, #17521	; 0x4471
   852d0:	f2c0 0308 	movt	r3, #8
   852d4:	4798      	blx	r3
   852d6:	bd08      	pop	{r3, pc}
   852d8:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
   852dc:	bd08      	pop	{r3, pc}
   852de:	bf00      	nop

000852e0 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   852e0:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
   852e2:	b930      	cbnz	r0, 852f2 <mem_read_capacity+0x12>
   852e4:	4608      	mov	r0, r1
   852e6:	f244 43ad 	movw	r3, #17581	; 0x44ad
   852ea:	f2c0 0308 	movt	r3, #8
   852ee:	4798      	blx	r3
   852f0:	bd08      	pop	{r3, pc}
   852f2:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
   852f6:	bd08      	pop	{r3, pc}

000852f8 <mem_unload>:

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
   852f8:	b910      	cbnz	r0, 85300 <mem_unload+0x8>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
   852fa:	f081 0001 	eor.w	r0, r1, #1
   852fe:	4770      	bx	lr

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
   85300:	f04f 0000 	mov.w	r0, #0
#endif

  Ctrl_access_unlock();

  return unloaded;
}
   85304:	4770      	bx	lr
   85306:	bf00      	nop

00085308 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
   85308:	b508      	push	{r3, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   8530a:	b928      	cbnz	r0, 85318 <mem_wr_protect+0x10>
   8530c:	f244 43d1 	movw	r3, #17617	; 0x44d1
   85310:	f2c0 0308 	movt	r3, #8
   85314:	4798      	blx	r3
   85316:	bd08      	pop	{r3, pc}
   85318:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
   8531c:	bd08      	pop	{r3, pc}
   8531e:	bf00      	nop

00085320 <mem_removal>:


bool mem_removal(U8 lun)
{
   85320:	b508      	push	{r3, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
   85322:	b928      	cbnz	r0, 85330 <mem_removal+0x10>
   85324:	f244 43ed 	movw	r3, #17645	; 0x44ed
   85328:	f2c0 0308 	movt	r3, #8
   8532c:	4798      	blx	r3
   8532e:	bd08      	pop	{r3, pc}
   85330:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return removal;
}
   85334:	bd08      	pop	{r3, pc}
   85336:	bf00      	nop

00085338 <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
   85338:	b920      	cbnz	r0, 85344 <mem_name+0xc>
   8533a:	f24d 60d0 	movw	r0, #54992	; 0xd6d0
   8533e:	f2c0 0008 	movt	r0, #8
   85342:	4770      	bx	lr
   85344:	f04f 0000 	mov.w	r0, #0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
   85348:	4770      	bx	lr
   8534a:	bf00      	nop

0008534c <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
   8534c:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  status =
   8534e:	b938      	cbnz	r0, 85360 <memory_2_usb+0x14>
   85350:	4608      	mov	r0, r1
   85352:	4611      	mov	r1, r2
   85354:	f244 53b9 	movw	r3, #17849	; 0x45b9
   85358:	f2c0 0308 	movt	r3, #8
   8535c:	4798      	blx	r3
   8535e:	bd08      	pop	{r3, pc}
   85360:	f04f 0001 	mov.w	r0, #1
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
   85364:	bd08      	pop	{r3, pc}
   85366:	bf00      	nop

00085368 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
   85368:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  status =
   8536a:	b938      	cbnz	r0, 8537c <usb_2_memory+0x14>
   8536c:	4608      	mov	r0, r1
   8536e:	4611      	mov	r1, r2
   85370:	f244 6385 	movw	r3, #18053	; 0x4685
   85374:	f2c0 0308 	movt	r3, #8
   85378:	4798      	blx	r3
   8537a:	bd08      	pop	{r3, pc}
   8537c:	f04f 0001 	mov.w	r0, #1
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
   85380:	bd08      	pop	{r3, pc}
   85382:	bf00      	nop

00085384 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   85384:	f241 038c 	movw	r3, #4236	; 0x108c
   85388:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8538c:	781a      	ldrb	r2, [r3, #0]
   8538e:	f102 30ff 	add.w	r0, r2, #4294967295
   85392:	b2c1      	uxtb	r1, r0
   85394:	7019      	strb	r1, [r3, #0]
   85396:	4770      	bx	lr

00085398 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   85398:	f04f 0000 	mov.w	r0, #0
   8539c:	4770      	bx	lr
   8539e:	bf00      	nop

000853a0 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   853a0:	f04f 0000 	mov.w	r0, #0
   853a4:	4770      	bx	lr
   853a6:	bf00      	nop

000853a8 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
   853a8:	4770      	bx	lr
   853aa:	bf00      	nop

000853ac <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
   853ac:	b530      	push	{r4, r5, lr}
   853ae:	b083      	sub	sp, #12

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   853b0:	f241 03a0 	movw	r3, #4256	; 0x10a0
   853b4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   853b8:	7818      	ldrb	r0, [r3, #0]
   853ba:	2800      	cmp	r0, #0
   853bc:	f040 80df 	bne.w	8557e <udi_cdc_tx_send+0x1d2>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   853c0:	f648 6131 	movw	r1, #36401	; 0x8e31
   853c4:	f2c0 0108 	movt	r1, #8
   853c8:	4788      	blx	r1
   853ca:	b160      	cbz	r0, 853e6 <udi_cdc_tx_send+0x3a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   853cc:	f241 0494 	movw	r4, #4244	; 0x1094
   853d0:	f2c2 0407 	movt	r4, #8199	; 0x2007
   853d4:	8824      	ldrh	r4, [r4, #0]
   853d6:	f648 6095 	movw	r0, #36501	; 0x8e95
   853da:	f2c0 0008 	movt	r0, #8
   853de:	4780      	blx	r0
   853e0:	4284      	cmp	r4, r0
   853e2:	d10d      	bne.n	85400 <udi_cdc_tx_send+0x54>
   853e4:	e0cb      	b.n	8557e <udi_cdc_tx_send+0x1d2>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   853e6:	f241 0294 	movw	r2, #4244	; 0x1094
   853ea:	f2c2 0207 	movt	r2, #8199	; 0x2007
   853ee:	8814      	ldrh	r4, [r2, #0]
   853f0:	f648 6385 	movw	r3, #36485	; 0x8e85
   853f4:	f2c0 0308 	movt	r3, #8
   853f8:	4798      	blx	r3
   853fa:	4284      	cmp	r4, r0
   853fc:	f000 80bf 	beq.w	8557e <udi_cdc_tx_send+0x1d2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85400:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   85404:	f1d5 0501 	rsbs	r5, r5, #1
   85408:	bf38      	it	cc
   8540a:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8540c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8540e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85412:	f240 21a0 	movw	r1, #672	; 0x2a0
   85416:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8541a:	f04f 0200 	mov.w	r2, #0
   8541e:	700a      	strb	r2, [r1, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   85420:	f640 4380 	movw	r3, #3200	; 0xc80
   85424:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85428:	781c      	ldrb	r4, [r3, #0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   8542a:	f640 4084 	movw	r0, #3204	; 0xc84
   8542e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85432:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
   85436:	bb79      	cbnz	r1, 85498 <udi_cdc_tx_send+0xec>
		sof_zlp_counter++;
   85438:	f241 03a4 	movw	r3, #4260	; 0x10a4
   8543c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85440:	881a      	ldrh	r2, [r3, #0]
   85442:	f102 0201 	add.w	r2, r2, #1
   85446:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   85448:	f648 6031 	movw	r0, #36401	; 0x8e31
   8544c:	f2c0 0008 	movt	r0, #8
   85450:	4780      	blx	r0
   85452:	b930      	cbnz	r0, 85462 <udi_cdc_tx_send+0xb6>
   85454:	f241 01a4 	movw	r1, #4260	; 0x10a4
   85458:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8545c:	880b      	ldrh	r3, [r1, #0]
   8545e:	2b63      	cmp	r3, #99	; 0x63
   85460:	d90d      	bls.n	8547e <udi_cdc_tx_send+0xd2>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   85462:	f648 6231 	movw	r2, #36401	; 0x8e31
   85466:	f2c0 0208 	movt	r2, #8
   8546a:	4790      	blx	r2
   8546c:	b1a0      	cbz	r0, 85498 <udi_cdc_tx_send+0xec>
   8546e:	f241 00a4 	movw	r0, #4260	; 0x10a4
   85472:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85476:	8801      	ldrh	r1, [r0, #0]
   85478:	f5b1 7f48 	cmp.w	r1, #800	; 0x320
   8547c:	d20c      	bcs.n	85498 <udi_cdc_tx_send+0xec>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8547e:	2d00      	cmp	r5, #0
   85480:	d07d      	beq.n	8557e <udi_cdc_tx_send+0x1d2>
		cpu_irq_enable();
   85482:	f240 23a0 	movw	r3, #672	; 0x2a0
   85486:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8548a:	f04f 0201 	mov.w	r2, #1
   8548e:	701a      	strb	r2, [r3, #0]
   85490:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   85494:	b662      	cpsie	i
   85496:	e072      	b.n	8557e <udi_cdc_tx_send+0x1d2>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   85498:	f241 03a4 	movw	r3, #4260	; 0x10a4
   8549c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   854a0:	f04f 0200 	mov.w	r2, #0
   854a4:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   854a6:	f241 40b8 	movw	r0, #5304	; 0x14b8
   854aa:	f2c2 0007 	movt	r0, #8199	; 0x2007
   854ae:	7801      	ldrb	r1, [r0, #0]
   854b0:	b949      	cbnz	r1, 854c6 <udi_cdc_tx_send+0x11a>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   854b2:	4294      	cmp	r4, r2
   854b4:	bf14      	ite	ne
   854b6:	2200      	movne	r2, #0
   854b8:	2201      	moveq	r2, #1
   854ba:	f640 4380 	movw	r3, #3200	; 0xc80
   854be:	f2c2 0307 	movt	r3, #8199	; 0x2007
   854c2:	701a      	strb	r2, [r3, #0]
   854c4:	e003      	b.n	854ce <udi_cdc_tx_send+0x122>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   854c6:	f1d4 0401 	rsbs	r4, r4, #1
   854ca:	bf38      	it	cc
   854cc:	2400      	movcc	r4, #0
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   854ce:	f241 00a0 	movw	r0, #4256	; 0x10a0
   854d2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   854d6:	f04f 0201 	mov.w	r2, #1
   854da:	7002      	strb	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   854dc:	b13d      	cbz	r5, 854ee <udi_cdc_tx_send+0x142>
		cpu_irq_enable();
   854de:	f240 25a0 	movw	r5, #672	; 0x2a0
   854e2:	f2c2 0507 	movt	r5, #8199	; 0x2007
   854e6:	702a      	strb	r2, [r5, #0]
   854e8:	f3bf 8f5f 	dmb	sy
   854ec:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   854ee:	4625      	mov	r5, r4
   854f0:	f640 4184 	movw	r1, #3204	; 0xc84
   854f4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   854f8:	f831 4014 	ldrh.w	r4, [r1, r4, lsl #1]
   854fc:	f5b4 7400 	subs.w	r4, r4, #512	; 0x200
   85500:	bf18      	it	ne
   85502:	2401      	movne	r4, #1
	if (b_short_packet) {
   85504:	b1dc      	cbz	r4, 8553e <udi_cdc_tx_send+0x192>
		if (udd_is_high_speed()) {
   85506:	f648 6231 	movw	r2, #36401	; 0x8e31
   8550a:	f2c0 0208 	movt	r2, #8
   8550e:	4790      	blx	r2
   85510:	b150      	cbz	r0, 85528 <udi_cdc_tx_send+0x17c>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   85512:	f648 6095 	movw	r0, #36501	; 0x8e95
   85516:	f2c0 0008 	movt	r0, #8
   8551a:	4780      	blx	r0
   8551c:	f241 0294 	movw	r2, #4244	; 0x1094
   85520:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85524:	8010      	strh	r0, [r2, #0]
   85526:	e011      	b.n	8554c <udi_cdc_tx_send+0x1a0>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   85528:	f648 6185 	movw	r1, #36485	; 0x8e85
   8552c:	f2c0 0108 	movt	r1, #8
   85530:	4788      	blx	r1
   85532:	f241 0394 	movw	r3, #4244	; 0x1094
   85536:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8553a:	8018      	strh	r0, [r3, #0]
   8553c:	e006      	b.n	8554c <udi_cdc_tx_send+0x1a0>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   8553e:	f241 0394 	movw	r3, #4244	; 0x1094
   85542:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85546:	f04f 0000 	mov.w	r0, #0
   8554a:	8018      	strh	r0, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   8554c:	f640 4184 	movw	r1, #3204	; 0xc84
   85550:	f2c2 0107 	movt	r1, #8199	; 0x2007
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
   85554:	f831 3015 	ldrh.w	r3, [r1, r5, lsl #1]
   85558:	f245 5099 	movw	r0, #21913	; 0x5599
   8555c:	f2c0 0008 	movt	r0, #8
   85560:	9000      	str	r0, [sp, #0]
   85562:	f04f 0084 	mov.w	r0, #132	; 0x84
   85566:	4621      	mov	r1, r4
   85568:	f640 4488 	movw	r4, #3208	; 0xc88
   8556c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85570:	eb04 2245 	add.w	r2, r4, r5, lsl #9
   85574:	f249 1451 	movw	r4, #37201	; 0x9151
   85578:	f2c0 0408 	movt	r4, #8
   8557c:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   8557e:	b003      	add	sp, #12
   85580:	bd30      	pop	{r4, r5, pc}
   85582:	bf00      	nop

00085584 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
   85584:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
   85586:	f04f 0000 	mov.w	r0, #0
   8558a:	f245 33ad 	movw	r3, #21421	; 0x53ad
   8558e:	f2c0 0308 	movt	r3, #8
   85592:	4798      	blx	r3
   85594:	bd08      	pop	{r3, pc}
   85596:	bf00      	nop

00085598 <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   85598:	b508      	push	{r3, lr}
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   8559a:	b9e8      	cbnz	r0, 855d8 <udi_cdc_data_sent+0x40>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   8559c:	f640 4380 	movw	r3, #3200	; 0xc80
   855a0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   855a4:	7819      	ldrb	r1, [r3, #0]
   855a6:	f1d1 0101 	rsbs	r1, r1, #1
   855aa:	bf38      	it	cc
   855ac:	2100      	movcc	r1, #0
   855ae:	f640 4384 	movw	r3, #3204	; 0xc84
   855b2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   855b6:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   855ba:	f241 41b8 	movw	r1, #5304	; 0x14b8
   855be:	f2c2 0107 	movt	r1, #8199	; 0x2007
   855c2:	7008      	strb	r0, [r1, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   855c4:	f241 02a0 	movw	r2, #4256	; 0x10a0
   855c8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   855cc:	7010      	strb	r0, [r2, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
   855ce:	f245 33ad 	movw	r3, #21421	; 0x53ad
   855d2:	f2c0 0308 	movt	r3, #8
   855d6:	4798      	blx	r3
   855d8:	bd08      	pop	{r3, pc}
   855da:	bf00      	nop

000855dc <udi_cdc_comm_setup>:
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
}

bool udi_cdc_comm_setup(void)
{
   855dc:	b508      	push	{r3, lr}
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
   855de:	f641 43ac 	movw	r3, #7340	; 0x1cac
   855e2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   855e6:	7818      	ldrb	r0, [r3, #0]
   855e8:	f010 0f80 	tst.w	r0, #128	; 0x80
   855ec:	d020      	beq.n	85630 <udi_cdc_comm_setup+0x54>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   855ee:	f000 0160 	and.w	r1, r0, #96	; 0x60
   855f2:	2920      	cmp	r1, #32
   855f4:	d156      	bne.n	856a4 <udi_cdc_comm_setup+0xc8>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   855f6:	f641 42ac 	movw	r2, #7340	; 0x1cac
   855fa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   855fe:	7853      	ldrb	r3, [r2, #1]
   85600:	2b21      	cmp	r3, #33	; 0x21
   85602:	d152      	bne.n	856aa <udi_cdc_comm_setup+0xce>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   85604:	f641 40ac 	movw	r0, #7340	; 0x1cac
   85608:	f2c2 0007 	movt	r0, #8199	; 0x2007
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   8560c:	88c1      	ldrh	r1, [r0, #6]
   8560e:	2907      	cmp	r1, #7
   85610:	d14e      	bne.n	856b0 <udi_cdc_comm_setup+0xd4>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
   85612:	f641 43ac 	movw	r3, #7340	; 0x1cac
   85616:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8561a:	f640 4274 	movw	r2, #3188	; 0xc74
   8561e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85622:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   85624:	f04f 0007 	mov.w	r0, #7
   85628:	8198      	strh	r0, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   8562a:	f04f 0001 	mov.w	r0, #1
   8562e:	bd08      	pop	{r3, pc}
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   85630:	f000 0160 	and.w	r1, r0, #96	; 0x60
   85634:	2920      	cmp	r1, #32
   85636:	d13e      	bne.n	856b6 <udi_cdc_comm_setup+0xda>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   85638:	f641 42ac 	movw	r2, #7340	; 0x1cac
   8563c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85640:	7853      	ldrb	r3, [r2, #1]
   85642:	2b20      	cmp	r3, #32
   85644:	d002      	beq.n	8564c <udi_cdc_comm_setup+0x70>
   85646:	2b22      	cmp	r3, #34	; 0x22
   85648:	d138      	bne.n	856bc <udi_cdc_comm_setup+0xe0>
   8564a:	e01a      	b.n	85682 <udi_cdc_comm_setup+0xa6>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   8564c:	f641 43ac 	movw	r3, #7340	; 0x1cac
   85650:	f2c2 0307 	movt	r3, #8199	; 0x2007
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   85654:	88d8      	ldrh	r0, [r3, #6]
   85656:	2807      	cmp	r0, #7
   85658:	d133      	bne.n	856c2 <udi_cdc_comm_setup+0xe6>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
   8565a:	f641 41ac 	movw	r1, #7340	; 0x1cac
   8565e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85662:	f245 32a9 	movw	r2, #21417	; 0x53a9
   85666:	f2c0 0208 	movt	r2, #8
   8566a:	610a      	str	r2, [r1, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
   8566c:	f640 4374 	movw	r3, #3188	; 0xc74
   85670:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85674:	608b      	str	r3, [r1, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   85676:	f04f 0007 	mov.w	r0, #7
   8567a:	8188      	strh	r0, [r1, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   8567c:	f04f 0001 	mov.w	r0, #1
   85680:	bd08      	pop	{r3, pc}
			case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
				// According cdc spec 1.1 chapter 6.2.14
				UDI_CDC_SET_DTR_EXT(port, (0 !=
   85682:	f641 40ac 	movw	r0, #7340	; 0x1cac
   85686:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8568a:	7881      	ldrb	r1, [r0, #2]
   8568c:	f04f 0000 	mov.w	r0, #0
   85690:	f001 0101 	and.w	r1, r1, #1
   85694:	f644 52b9 	movw	r2, #19897	; 0x4db9
   85698:	f2c0 0208 	movt	r2, #8
   8569c:	4790      	blx	r2
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
   8569e:	f04f 0001 	mov.w	r0, #1
   856a2:	bd08      	pop	{r3, pc}
			}
		}
	}
	return false;  // request Not supported
   856a4:	f04f 0000 	mov.w	r0, #0
   856a8:	bd08      	pop	{r3, pc}
   856aa:	f04f 0000 	mov.w	r0, #0
   856ae:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   856b0:	f04f 0000 	mov.w	r0, #0
   856b4:	bd08      	pop	{r3, pc}
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
   856b6:	f04f 0000 	mov.w	r0, #0
   856ba:	bd08      	pop	{r3, pc}
   856bc:	f04f 0000 	mov.w	r0, #0
   856c0:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   856c2:	f04f 0000 	mov.w	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
   856c6:	bd08      	pop	{r3, pc}

000856c8 <udi_cdc_data_disable>:
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
}

void udi_cdc_data_disable(void)
{
   856c8:	b508      	push	{r3, lr}
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
   856ca:	f640 437c 	movw	r3, #3196	; 0xc7c
   856ce:	f2c2 0307 	movt	r3, #8199	; 0x2007
   856d2:	781a      	ldrb	r2, [r3, #0]
   856d4:	f102 30ff 	add.w	r0, r2, #4294967295
   856d8:	b2c1      	uxtb	r1, r0
   856da:	7019      	strb	r1, [r3, #0]
	port = udi_cdc_nb_data_enabled;
   856dc:	7818      	ldrb	r0, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
   856de:	f649 53bd 	movw	r3, #40381	; 0x9dbd
   856e2:	f2c0 0308 	movt	r3, #8
   856e6:	4798      	blx	r3
	udi_cdc_data_running = false;
   856e8:	f241 0098 	movw	r0, #4248	; 0x1098
   856ec:	f2c2 0007 	movt	r0, #8199	; 0x2007
   856f0:	f04f 0200 	mov.w	r2, #0
   856f4:	7002      	strb	r2, [r0, #0]
   856f6:	bd08      	pop	{r3, pc}

000856f8 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
   856f8:	b508      	push	{r3, lr}
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
   856fa:	f04f 0000 	mov.w	r0, #0
   856fe:	f241 038c 	movw	r3, #4236	; 0x108c
   85702:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85706:	7018      	strb	r0, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
   85708:	f241 41bc 	movw	r1, #5308	; 0x14bc
   8570c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85710:	8008      	strh	r0, [r1, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
   85712:	f241 03a8 	movw	r3, #4264	; 0x10a8
   85716:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8571a:	f04f 01a1 	mov.w	r1, #161	; 0xa1
   8571e:	7019      	strb	r1, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   85720:	f04f 0120 	mov.w	r1, #32
   85724:	7059      	strb	r1, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   85726:	8058      	strh	r0, [r3, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   85728:	8098      	strh	r0, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   8572a:	f04f 0102 	mov.w	r1, #2
   8572e:	80d9      	strh	r1, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   85730:	8118      	strh	r0, [r3, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   85732:	f640 4374 	movw	r3, #3188	; 0xc74
   85736:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8573a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   8573e:	6019      	str	r1, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   85740:	7118      	strb	r0, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   85742:	7158      	strb	r0, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   85744:	f04f 0208 	mov.w	r2, #8
   85748:	719a      	strb	r2, [r3, #6]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
   8574a:	f649 53ad 	movw	r3, #40365	; 0x9dad
   8574e:	f2c0 0308 	movt	r3, #8
   85752:	4798      	blx	r3
   85754:	b158      	cbz	r0, 8576e <udi_cdc_comm_enable+0x76>
		return false;
	}
	udi_cdc_nb_comm_enabled++;
   85756:	f241 008c 	movw	r0, #4236	; 0x108c
   8575a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8575e:	7801      	ldrb	r1, [r0, #0]
   85760:	f101 0101 	add.w	r1, r1, #1
   85764:	b2ca      	uxtb	r2, r1
   85766:	7002      	strb	r2, [r0, #0]
	return true;
   85768:	f04f 0001 	mov.w	r0, #1
   8576c:	bd08      	pop	{r3, pc}
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
   8576e:	f04f 0000 	mov.w	r0, #0
	}
	udi_cdc_nb_comm_enabled++;
	return true;
}
   85772:	bd08      	pop	{r3, pc}

00085774 <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85774:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   85778:	b672      	cpsid	i
   8577a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8577e:	f240 22a0 	movw	r2, #672	; 0x2a0
   85782:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85786:	f04f 0100 	mov.w	r1, #0
   8578a:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   8578c:	f241 0090 	movw	r0, #4240	; 0x1090
   85790:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85794:	8802      	ldrh	r2, [r0, #0]
   85796:	b290      	uxth	r0, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   85798:	f241 019c 	movw	r1, #4252	; 0x109c
   8579c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   857a0:	7809      	ldrb	r1, [r1, #0]
   857a2:	f241 0288 	movw	r2, #4232	; 0x1088
   857a6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   857aa:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   857ae:	1a08      	subs	r0, r1, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   857b0:	b94b      	cbnz	r3, 857c6 <udi_cdc_multi_get_nb_received_data+0x52>
		cpu_irq_enable();
   857b2:	f240 23a0 	movw	r3, #672	; 0x2a0
   857b6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   857ba:	f04f 0201 	mov.w	r2, #1
   857be:	701a      	strb	r2, [r3, #0]
   857c0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   857c4:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   857c6:	4770      	bx	lr

000857c8 <udi_cdc_get_nb_received_data>:

iram_size_t udi_cdc_get_nb_received_data(void)
{
   857c8:	b508      	push	{r3, lr}
	return udi_cdc_multi_get_nb_received_data(0);
   857ca:	f04f 0000 	mov.w	r0, #0
   857ce:	f245 7375 	movw	r3, #22389	; 0x5775
   857d2:	f2c0 0308 	movt	r3, #8
   857d6:	4798      	blx	r3
}
   857d8:	bd08      	pop	{r3, pc}
   857da:	bf00      	nop

000857dc <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   857dc:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   857de:	f245 7375 	movw	r3, #22389	; 0x5775
   857e2:	f2c0 0308 	movt	r3, #8
   857e6:	4798      	blx	r3
}
   857e8:	3000      	adds	r0, #0
   857ea:	bf18      	it	ne
   857ec:	2001      	movne	r0, #1
   857ee:	bd08      	pop	{r3, pc}

000857f0 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
   857f0:	b510      	push	{r4, lr}
   857f2:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   857f4:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   857f8:	f1d3 0001 	rsbs	r0, r3, #1
   857fc:	bf38      	it	cc
   857fe:	2000      	movcc	r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   85800:	b672      	cpsid	i
   85802:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85806:	f240 22a0 	movw	r2, #672	; 0x2a0
   8580a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8580e:	f04f 0100 	mov.w	r1, #0
   85812:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   85814:	f241 049c 	movw	r4, #4252	; 0x109c
   85818:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8581c:	7824      	ldrb	r4, [r4, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   8581e:	f241 43b4 	movw	r3, #5300	; 0x14b4
   85822:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85826:	781a      	ldrb	r2, [r3, #0]
   85828:	b96a      	cbnz	r2, 85846 <udi_cdc_rx_start+0x56>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   8582a:	f241 0190 	movw	r1, #4240	; 0x1090
   8582e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85832:	880b      	ldrh	r3, [r1, #0]
   85834:	b29a      	uxth	r2, r3
   85836:	f241 0188 	movw	r1, #4232	; 0x1088
   8583a:	f2c2 0107 	movt	r1, #8199	; 0x2007
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
   8583e:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
   85842:	4293      	cmp	r3, r2
   85844:	d90e      	bls.n	85864 <udi_cdc_rx_start+0x74>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85846:	2800      	cmp	r0, #0
   85848:	d052      	beq.n	858f0 <udi_cdc_rx_start+0x100>
		cpu_irq_enable();
   8584a:	f240 21a0 	movw	r1, #672	; 0x2a0
   8584e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85852:	f04f 0201 	mov.w	r2, #1
   85856:	700a      	strb	r2, [r1, #0]
   85858:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8585c:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   8585e:	f04f 0000 	mov.w	r0, #0
   85862:	e047      	b.n	858f4 <udi_cdc_rx_start+0x104>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
   85864:	f241 0290 	movw	r2, #4240	; 0x1090
   85868:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8586c:	f04f 0100 	mov.w	r1, #0
   85870:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   85872:	428c      	cmp	r4, r1
   85874:	bf14      	ite	ne
   85876:	2100      	movne	r1, #0
   85878:	2101      	moveq	r1, #1
   8587a:	f241 039c 	movw	r3, #4252	; 0x109c
   8587e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85882:	7019      	strb	r1, [r3, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
   85884:	f241 42b4 	movw	r2, #5300	; 0x14b4
   85888:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8588c:	f04f 0101 	mov.w	r1, #1
   85890:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85892:	b138      	cbz	r0, 858a4 <udi_cdc_rx_start+0xb4>
		cpu_irq_enable();
   85894:	f240 20a0 	movw	r0, #672	; 0x2a0
   85898:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8589c:	7001      	strb	r1, [r0, #0]
   8589e:	f3bf 8f5f 	dmb	sy
   858a2:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
   858a4:	f04f 0000 	mov.w	r0, #0
   858a8:	f245 72dd 	movw	r2, #22493	; 0x57dd
   858ac:	f2c0 0208 	movt	r2, #8
   858b0:	4790      	blx	r2
   858b2:	b130      	cbz	r0, 858c2 <udi_cdc_rx_start+0xd2>
		UDI_CDC_RX_NOTIFY(port);
   858b4:	f04f 0000 	mov.w	r0, #0
   858b8:	f644 51dd 	movw	r1, #19933	; 0x4ddd
   858bc:	f2c0 0108 	movt	r1, #8
   858c0:	4788      	blx	r1
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
   858c2:	f645 00f9 	movw	r0, #22777	; 0x58f9
   858c6:	f2c0 0008 	movt	r0, #8
   858ca:	9000      	str	r0, [sp, #0]
   858cc:	f04f 0005 	mov.w	r0, #5
   858d0:	f04f 0101 	mov.w	r1, #1
   858d4:	f241 03b4 	movw	r3, #4276	; 0x10b4
   858d8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   858dc:	eb03 2244 	add.w	r2, r3, r4, lsl #9
   858e0:	f44f 7300 	mov.w	r3, #512	; 0x200
   858e4:	f249 1451 	movw	r4, #37201	; 0x9151
   858e8:	f2c0 0408 	movt	r4, #8
   858ec:	47a0      	blx	r4
   858ee:	e001      	b.n	858f4 <udi_cdc_rx_start+0x104>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   858f0:	f04f 0000 	mov.w	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
   858f4:	b002      	add	sp, #8
   858f6:	bd10      	pop	{r4, pc}

000858f8 <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   858f8:	b510      	push	{r4, lr}
   858fa:	b082      	sub	sp, #8
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   858fc:	bb88      	cbnz	r0, 85962 <udi_cdc_data_received+0x6a>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   858fe:	f241 039c 	movw	r3, #4252	; 0x109c
   85902:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85906:	7818      	ldrb	r0, [r3, #0]
   85908:	f1d0 0301 	rsbs	r3, r0, #1
   8590c:	bf38      	it	cc
   8590e:	2300      	movcc	r3, #0
	if (!n) {
   85910:	b9a9      	cbnz	r1, 8593e <udi_cdc_data_received+0x46>
		udd_ep_run( ep,
   85912:	f645 04f9 	movw	r4, #22777	; 0x58f9
   85916:	f2c0 0408 	movt	r4, #8
   8591a:	9400      	str	r4, [sp, #0]
   8591c:	4610      	mov	r0, r2
   8591e:	f04f 0101 	mov.w	r1, #1
   85922:	f241 02b4 	movw	r2, #4276	; 0x10b4
   85926:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8592a:	eb02 2243 	add.w	r2, r2, r3, lsl #9
   8592e:	f44f 7300 	mov.w	r3, #512	; 0x200
   85932:	f249 1451 	movw	r4, #37201	; 0x9151
   85936:	f2c0 0408 	movt	r4, #8
   8593a:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
   8593c:	e011      	b.n	85962 <udi_cdc_data_received+0x6a>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   8593e:	f241 0288 	movw	r2, #4232	; 0x1088
   85942:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85946:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   8594a:	f04f 0000 	mov.w	r0, #0
   8594e:	f241 41b4 	movw	r1, #5300	; 0x14b4
   85952:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85956:	7008      	strb	r0, [r1, #0]
	udi_cdc_rx_start(port);
   85958:	f245 73f1 	movw	r3, #22513	; 0x57f1
   8595c:	f2c0 0308 	movt	r3, #8
   85960:	4798      	blx	r3
}
   85962:	b002      	add	sp, #8
   85964:	bd10      	pop	{r4, pc}
   85966:	bf00      	nop

00085968 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
   85968:	b538      	push	{r3, r4, r5, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
   8596a:	f04f 0400 	mov.w	r4, #0
   8596e:	f640 437c 	movw	r3, #3196	; 0xc7c
   85972:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85976:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
   85978:	f241 00a0 	movw	r0, #4256	; 0x10a0
   8597c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85980:	7004      	strb	r4, [r0, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   85982:	f241 41b8 	movw	r1, #5304	; 0x14b8
   85986:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8598a:	700c      	strb	r4, [r1, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   8598c:	f640 4280 	movw	r2, #3200	; 0xc80
   85990:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85994:	7014      	strb	r4, [r2, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   85996:	f640 4384 	movw	r3, #3204	; 0xc84
   8599a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8599e:	4625      	mov	r5, r4
   859a0:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   859a2:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   859a4:	f241 0094 	movw	r0, #4244	; 0x1094
   859a8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   859ac:	8004      	strh	r4, [r0, #0]
	udi_cdc_tx_send(port);
   859ae:	4620      	mov	r0, r4
   859b0:	f245 31ad 	movw	r1, #21421	; 0x53ad
   859b4:	f2c0 0108 	movt	r1, #8
   859b8:	4788      	blx	r1

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
   859ba:	f241 42b4 	movw	r2, #5300	; 0x14b4
   859be:	f2c2 0207 	movt	r2, #8199	; 0x2007
   859c2:	7014      	strb	r4, [r2, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   859c4:	f241 039c 	movw	r3, #4252	; 0x109c
   859c8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   859cc:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   859ce:	f241 0088 	movw	r0, #4232	; 0x1088
   859d2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   859d6:	8004      	strh	r4, [r0, #0]
	udi_cdc_rx_pos[port] = 0;
   859d8:	f241 0190 	movw	r1, #4240	; 0x1090
   859dc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   859e0:	800c      	strh	r4, [r1, #0]
	if (!udi_cdc_rx_start(port)) {
   859e2:	4620      	mov	r0, r4
   859e4:	f245 72f1 	movw	r2, #22513	; 0x57f1
   859e8:	f2c0 0208 	movt	r2, #8
   859ec:	4790      	blx	r2
   859ee:	b198      	cbz	r0, 85a18 <udi_cdc_data_enable+0xb0>
		return false;
	}
	udi_cdc_nb_data_enabled++;
   859f0:	f640 437c 	movw	r3, #3196	; 0xc7c
   859f4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   859f8:	7818      	ldrb	r0, [r3, #0]
   859fa:	f100 0001 	add.w	r0, r0, #1
   859fe:	b2c1      	uxtb	r1, r0
   85a00:	7019      	strb	r1, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   85a02:	781a      	ldrb	r2, [r3, #0]
   85a04:	2a01      	cmp	r2, #1
   85a06:	d10a      	bne.n	85a1e <udi_cdc_data_enable+0xb6>
		udi_cdc_data_running = true;
   85a08:	f04f 0001 	mov.w	r0, #1
   85a0c:	f241 0398 	movw	r3, #4248	; 0x1098
   85a10:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85a14:	7018      	strb	r0, [r3, #0]
   85a16:	bd38      	pop	{r3, r4, r5, pc}
	udi_cdc_rx_trans_ongoing[port] = false;
	udi_cdc_rx_buf_sel[port] = 0;
	udi_cdc_rx_buf_nb[port][0] = 0;
	udi_cdc_rx_pos[port] = 0;
	if (!udi_cdc_rx_start(port)) {
		return false;
   85a18:	f04f 0000 	mov.w	r0, #0
   85a1c:	bd38      	pop	{r3, r4, r5, pc}
	}
	udi_cdc_nb_data_enabled++;
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
		udi_cdc_data_running = true;
	}
	return true;
   85a1e:	f04f 0001 	mov.w	r0, #1
}
   85a22:	bd38      	pop	{r3, r4, r5, pc}

00085a24 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   85a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85a28:	b083      	sub	sp, #12
   85a2a:	4615      	mov	r5, r2
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
   85a2c:	4688      	mov	r8, r1
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   85a2e:	f240 27a0 	movw	r7, #672	; 0x2a0
   85a32:	f2c2 0707 	movt	r7, #8199	; 0x2007
   85a36:	f04f 0b00 	mov.w	fp, #0
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   85a3a:	f241 0690 	movw	r6, #4240	; 0x1090
   85a3e:	f2c2 0607 	movt	r6, #8199	; 0x2007
	buf_sel = udi_cdc_rx_buf_sel[port];
   85a42:	f241 0a9c 	movw	sl, #4252	; 0x109c
   85a46:	f2c2 0a07 	movt	sl, #8199	; 0x2007
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
   85a4a:	f241 0988 	movw	r9, #4232	; 0x1088
   85a4e:	f2c2 0907 	movt	r9, #8199	; 0x2007
	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   85a52:	f241 03b4 	movw	r3, #4276	; 0x10b4
   85a56:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85a5a:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85a5c:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   85a60:	b672      	cpsid	i
   85a62:	f3bf 8f5f 	dmb	sy
   85a66:	f887 b000 	strb.w	fp, [r7]
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   85a6a:	8830      	ldrh	r0, [r6, #0]
   85a6c:	b283      	uxth	r3, r0
	buf_sel = udi_cdc_rx_buf_sel[port];
   85a6e:	f89a 1000 	ldrb.w	r1, [sl]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85a72:	b92a      	cbnz	r2, 85a80 <udi_cdc_multi_read_buf+0x5c>
		cpu_irq_enable();
   85a74:	f04f 0401 	mov.w	r4, #1
   85a78:	703c      	strb	r4, [r7, #0]
   85a7a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   85a7e:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
   85a80:	f839 4011 	ldrh.w	r4, [r9, r1, lsl #1]
   85a84:	42a3      	cmp	r3, r4
   85a86:	d307      	bcc.n	85a98 <udi_cdc_multi_read_buf+0x74>
		if (!udi_cdc_data_running) {
   85a88:	f241 0098 	movw	r0, #4248	; 0x1098
   85a8c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85a90:	7801      	ldrb	r1, [r0, #0]
   85a92:	2900      	cmp	r1, #0
   85a94:	d1e2      	bne.n	85a5c <udi_cdc_multi_read_buf+0x38>
   85a96:	e01d      	b.n	85ad4 <udi_cdc_multi_read_buf+0xb0>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   85a98:	1ae4      	subs	r4, r4, r3
   85a9a:	42a5      	cmp	r5, r4
   85a9c:	bf38      	it	cc
   85a9e:	462c      	movcc	r4, r5
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   85aa0:	eb03 2241 	add.w	r2, r3, r1, lsl #9
   85aa4:	4640      	mov	r0, r8
   85aa6:	9b01      	ldr	r3, [sp, #4]
   85aa8:	1899      	adds	r1, r3, r2
   85aaa:	4622      	mov	r2, r4
   85aac:	f24a 7399 	movw	r3, #42905	; 0xa799
   85ab0:	f2c0 0308 	movt	r3, #8
   85ab4:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   85ab6:	8830      	ldrh	r0, [r6, #0]
   85ab8:	1821      	adds	r1, r4, r0
   85aba:	b28a      	uxth	r2, r1
   85abc:	8032      	strh	r2, [r6, #0]
	ptr_buf += copy_nb;
   85abe:	44a0      	add	r8, r4
	size -= copy_nb;
   85ac0:	1b2d      	subs	r5, r5, r4
	udi_cdc_rx_start(port);
   85ac2:	f04f 0000 	mov.w	r0, #0
   85ac6:	f245 73f1 	movw	r3, #22513	; 0x57f1
   85aca:	f2c0 0308 	movt	r3, #8
   85ace:	4798      	blx	r3

	if (size) {
   85ad0:	2d00      	cmp	r5, #0
   85ad2:	d1c3      	bne.n	85a5c <udi_cdc_multi_read_buf+0x38>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   85ad4:	4628      	mov	r0, r5
   85ad6:	b003      	add	sp, #12
   85ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085adc <udi_cdc_read_buf>:

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
   85adc:	b508      	push	{r3, lr}
   85ade:	4603      	mov	r3, r0
   85ae0:	460a      	mov	r2, r1
	return udi_cdc_multi_read_buf(0, buf, size);
   85ae2:	f04f 0000 	mov.w	r0, #0
   85ae6:	4619      	mov	r1, r3
   85ae8:	f645 2325 	movw	r3, #23077	; 0x5a25
   85aec:	f2c0 0308 	movt	r3, #8
   85af0:	4798      	blx	r3
}
   85af2:	bd08      	pop	{r3, pc}

00085af4 <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
   85af4:	b410      	push	{r4}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85af6:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   85afa:	b672      	cpsid	i
   85afc:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   85b00:	f240 23a0 	movw	r3, #672	; 0x2a0
   85b04:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85b08:	f04f 0200 	mov.w	r2, #0
   85b0c:	701a      	strb	r2, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   85b0e:	f640 4080 	movw	r0, #3200	; 0xc80
   85b12:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85b16:	7801      	ldrb	r1, [r0, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   85b18:	f640 4284 	movw	r2, #3204	; 0xc84
   85b1c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85b20:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
   85b24:	f1d1 0101 	rsbs	r1, r1, #1
   85b28:	bf38      	it	cc
   85b2a:	2100      	movcc	r1, #0
   85b2c:	b2c8      	uxtb	r0, r1
   85b2e:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   85b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85b36:	d11b      	bne.n	85b70 <udi_cdc_multi_get_free_tx_buffer+0x7c>
		if ((!udi_cdc_tx_trans_ongoing[port])
   85b38:	f241 02a0 	movw	r2, #4256	; 0x10a0
   85b3c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85b40:	7812      	ldrb	r2, [r2, #0]
   85b42:	b9aa      	cbnz	r2, 85b70 <udi_cdc_multi_get_free_tx_buffer+0x7c>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   85b44:	f241 42b8 	movw	r2, #5304	; 0x14b8
   85b48:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85b4c:	7812      	ldrb	r2, [r2, #0]
   85b4e:	b97a      	cbnz	r2, 85b70 <udi_cdc_multi_get_free_tx_buffer+0x7c>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
   85b50:	f241 43b8 	movw	r3, #5304	; 0x14b8
   85b54:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85b58:	f04f 0001 	mov.w	r0, #1
   85b5c:	7018      	strb	r0, [r3, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85b5e:	f640 4280 	movw	r2, #3200	; 0xc80
   85b62:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85b66:	7011      	strb	r1, [r2, #0]
			buf_sel_nb = 0;
			buf_nosel_nb = UDI_CDC_TX_BUFFERS;
   85b68:	f44f 7000 	mov.w	r0, #512	; 0x200
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
   85b6c:	f04f 0300 	mov.w	r3, #0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85b70:	b94c      	cbnz	r4, 85b86 <udi_cdc_multi_get_free_tx_buffer+0x92>
		cpu_irq_enable();
   85b72:	f240 22a0 	movw	r2, #672	; 0x2a0
   85b76:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85b7a:	f04f 0101 	mov.w	r1, #1
   85b7e:	7011      	strb	r1, [r2, #0]
   85b80:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   85b84:	b662      	cpsie	i
iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
   85b86:	18c0      	adds	r0, r0, r3
		}
	}
	cpu_irq_restore(flags);

	return (UDI_CDC_TX_BUFFERS - buf_sel_nb) + (UDI_CDC_TX_BUFFERS - buf_nosel_nb);
}
   85b88:	f5c0 6080 	rsb	r0, r0, #1024	; 0x400
   85b8c:	bc10      	pop	{r4}
   85b8e:	4770      	bx	lr

00085b90 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   85b90:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   85b92:	f645 23f5 	movw	r3, #23285	; 0x5af5
   85b96:	f2c0 0308 	movt	r3, #8
   85b9a:	4798      	blx	r3
}
   85b9c:	3000      	adds	r0, #0
   85b9e:	bf18      	it	ne
   85ba0:	2001      	movne	r0, #1
   85ba2:	bd08      	pop	{r3, pc}

00085ba4 <udi_cdc_multi_write_buf>:
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
   85ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85ba8:	b083      	sub	sp, #12
   85baa:	4615      	mov	r5, r2

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
   85bac:	f640 4374 	movw	r3, #3188	; 0xc74
   85bb0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85bb4:	7998      	ldrb	r0, [r3, #6]
   85bb6:	2809      	cmp	r0, #9
		size *=2;
   85bb8:	bf08      	it	eq
   85bba:	0055      	lsleq	r5, r2, #1
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
   85bbc:	4689      	mov	r9, r1
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   85bbe:	f04f 0800 	mov.w	r8, #0
		if (!udi_cdc_data_running) {
   85bc2:	f241 0198 	movw	r1, #4248	; 0x1098
   85bc6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85bca:	9101      	str	r1, [sp, #4]
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   85bcc:	f240 22a0 	movw	r2, #672	; 0x2a0
   85bd0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85bd4:	9200      	str	r2, [sp, #0]
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   85bd6:	4640      	mov	r0, r8
   85bd8:	f645 3391 	movw	r3, #23441	; 0x5b91
   85bdc:	f2c0 0308 	movt	r3, #8
   85be0:	4798      	blx	r3
   85be2:	b920      	cbnz	r0, 85bee <udi_cdc_multi_write_buf+0x4a>
		if (!udi_cdc_data_running) {
   85be4:	9801      	ldr	r0, [sp, #4]
   85be6:	7803      	ldrb	r3, [r0, #0]
   85be8:	2b00      	cmp	r3, #0
   85bea:	d1f4      	bne.n	85bd6 <udi_cdc_multi_write_buf+0x32>
   85bec:	e035      	b.n	85c5a <udi_cdc_multi_write_buf+0xb6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85bee:	f3ef 8b10 	mrs	fp, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   85bf2:	b672      	cpsid	i
   85bf4:	f3bf 8f5f 	dmb	sy
   85bf8:	9c00      	ldr	r4, [sp, #0]
   85bfa:	f884 8000 	strb.w	r8, [r4]
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   85bfe:	f640 4680 	movw	r6, #3200	; 0xc80
   85c02:	f2c2 0607 	movt	r6, #8199	; 0x2007
   85c06:	7836      	ldrb	r6, [r6, #0]
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   85c08:	f640 4a84 	movw	sl, #3204	; 0xc84
   85c0c:	f2c2 0a07 	movt	sl, #8199	; 0x2007
   85c10:	f83a 7016 	ldrh.w	r7, [sl, r6, lsl #1]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
   85c14:	f5c7 7400 	rsb	r4, r7, #512	; 0x200
   85c18:	42a5      	cmp	r5, r4
   85c1a:	bf38      	it	cc
   85c1c:	462c      	movcc	r4, r5
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
   85c1e:	eb07 2146 	add.w	r1, r7, r6, lsl #9
   85c22:	f640 4088 	movw	r0, #3208	; 0xc88
   85c26:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85c2a:	1840      	adds	r0, r0, r1
   85c2c:	4649      	mov	r1, r9
   85c2e:	4622      	mov	r2, r4
   85c30:	f24a 7399 	movw	r3, #42905	; 0xa799
   85c34:	f2c0 0308 	movt	r3, #8
   85c38:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
   85c3a:	193f      	adds	r7, r7, r4
   85c3c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85c40:	f1bb 0f00 	cmp.w	fp, #0
   85c44:	d106      	bne.n	85c54 <udi_cdc_multi_write_buf+0xb0>
		cpu_irq_enable();
   85c46:	f04f 0101 	mov.w	r1, #1
   85c4a:	9a00      	ldr	r2, [sp, #0]
   85c4c:	7011      	strb	r1, [r2, #0]
   85c4e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   85c52:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
   85c54:	44a1      	add	r9, r4
	size -= copy_nb;

	if (size) {
   85c56:	1b2d      	subs	r5, r5, r4
   85c58:	d1bd      	bne.n	85bd6 <udi_cdc_multi_write_buf+0x32>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
}
   85c5a:	4628      	mov	r0, r5
   85c5c:	b003      	add	sp, #12
   85c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85c62:	bf00      	nop

00085c64 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
   85c64:	b508      	push	{r3, lr}
   85c66:	4603      	mov	r3, r0
   85c68:	460a      	mov	r2, r1
	return udi_cdc_multi_write_buf(0, buf, size);
   85c6a:	f04f 0000 	mov.w	r0, #0
   85c6e:	4619      	mov	r1, r3
   85c70:	f645 33a5 	movw	r3, #23461	; 0x5ba5
   85c74:	f2c0 0308 	movt	r3, #8
   85c78:	4798      	blx	r3
}
   85c7a:	bd08      	pop	{r3, pc}

00085c7c <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
   85c7c:	f04f 0000 	mov.w	r0, #0
   85c80:	4770      	bx	lr
   85c82:	bf00      	nop

00085c84 <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
   85c84:	3000      	adds	r0, #0
   85c86:	bf18      	it	ne
   85c88:	2001      	movne	r0, #1
   85c8a:	f641 43a9 	movw	r3, #7337	; 0x1ca9
   85c8e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85c92:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
   85c94:	f240 2114 	movw	r1, #532	; 0x214
   85c98:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85c9c:	f04f 0201 	mov.w	r2, #1
   85ca0:	700a      	strb	r2, [r1, #0]
   85ca2:	4770      	bx	lr

00085ca4 <udi_msc_clear_sense>:
//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
   85ca4:	f241 5208 	movw	r2, #5384	; 0x1508
   85ca8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85cac:	f04f 0300 	mov.w	r3, #0
   85cb0:	4611      	mov	r1, r2
   85cb2:	f841 3b04 	str.w	r3, [r1], #4
   85cb6:	6053      	str	r3, [r2, #4]
   85cb8:	f101 0104 	add.w	r1, r1, #4
   85cbc:	f841 3b04 	str.w	r3, [r1], #4
   85cc0:	f841 3b04 	str.w	r3, [r1], #4
   85cc4:	800b      	strh	r3, [r1, #0]
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
   85cc6:	f04f 00f0 	mov.w	r0, #240	; 0xf0
   85cca:	7010      	strb	r0, [r2, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
   85ccc:	f04f 030a 	mov.w	r3, #10
   85cd0:	71d3      	strb	r3, [r2, #7]
   85cd2:	4770      	bx	lr

00085cd4 <udi_msc_sense_pass>:
	udi_msc_sense.AddSenseCode = add_sense >> 8;
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
}

static void udi_msc_sense_pass(void)
{
   85cd4:	b508      	push	{r3, lr}
	udi_msc_clear_sense();
   85cd6:	f645 43a5 	movw	r3, #23717	; 0x5ca5
   85cda:	f2c0 0308 	movt	r3, #8
   85cde:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
   85ce0:	f240 2050 	movw	r0, #592	; 0x250
   85ce4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85ce8:	f04f 0200 	mov.w	r2, #0
   85cec:	7302      	strb	r2, [r0, #12]
   85cee:	bd08      	pop	{r3, pc}

00085cf0 <udi_msc_sense_fail>:
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
}

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
   85cf0:	b570      	push	{r4, r5, r6, lr}
   85cf2:	4606      	mov	r6, r0
   85cf4:	460d      	mov	r5, r1
   85cf6:	4614      	mov	r4, r2
	udi_msc_clear_sense();
   85cf8:	f645 43a5 	movw	r3, #23717	; 0x5ca5
   85cfc:	f2c0 0308 	movt	r3, #8
   85d00:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
   85d02:	f240 2050 	movw	r0, #592	; 0x250
   85d06:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85d0a:	f04f 0201 	mov.w	r2, #1
   85d0e:	7302      	strb	r2, [r0, #12]
	udi_msc_sense.sense_flag_key = sense_key;
   85d10:	f241 5108 	movw	r1, #5384	; 0x1508
   85d14:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85d18:	708e      	strb	r6, [r1, #2]
	udi_msc_sense.information[0] = lba >> 24;
   85d1a:	ea4f 6314 	mov.w	r3, r4, lsr #24
   85d1e:	70cb      	strb	r3, [r1, #3]
	udi_msc_sense.information[1] = lba >> 16;
   85d20:	ea4f 4014 	mov.w	r0, r4, lsr #16
   85d24:	7108      	strb	r0, [r1, #4]
	udi_msc_sense.information[2] = lba >> 8;
   85d26:	ea4f 2214 	mov.w	r2, r4, lsr #8
   85d2a:	714a      	strb	r2, [r1, #5]
	udi_msc_sense.information[3] = lba;
   85d2c:	718c      	strb	r4, [r1, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
   85d2e:	ea4f 2315 	mov.w	r3, r5, lsr #8
   85d32:	730b      	strb	r3, [r1, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
   85d34:	734d      	strb	r5, [r1, #13]
   85d36:	bd70      	pop	{r4, r5, r6, pc}

00085d38 <udi_msc_sense_fail_busy_or_change>:
{
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
}

static void udi_msc_sense_fail_busy_or_change(void)
{
   85d38:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
   85d3a:	f04f 0006 	mov.w	r0, #6
   85d3e:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   85d42:	f04f 0200 	mov.w	r2, #0
   85d46:	f645 43f1 	movw	r3, #23793	; 0x5cf1
   85d4a:	f2c0 0308 	movt	r3, #8
   85d4e:	4798      	blx	r3
   85d50:	bd08      	pop	{r3, pc}
   85d52:	bf00      	nop

00085d54 <udi_msc_sense_fail_not_present>:
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
}


static void udi_msc_sense_fail_not_present(void)
{
   85d54:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
   85d56:	f04f 0002 	mov.w	r0, #2
   85d5a:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
   85d5e:	f04f 0200 	mov.w	r2, #0
   85d62:	f645 43f1 	movw	r3, #23793	; 0x5cf1
   85d66:	f2c0 0308 	movt	r3, #8
   85d6a:	4798      	blx	r3
   85d6c:	bd08      	pop	{r3, pc}
   85d6e:	bf00      	nop

00085d70 <udi_msc_sense_fail_hardware>:
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}

static void udi_msc_sense_fail_hardware(void)
{
   85d70:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
   85d72:	f04f 0004 	mov.w	r0, #4
   85d76:	f04f 0100 	mov.w	r1, #0
   85d7a:	460a      	mov	r2, r1
   85d7c:	f645 43f1 	movw	r3, #23793	; 0x5cf1
   85d80:	f2c0 0308 	movt	r3, #8
   85d84:	4798      	blx	r3
   85d86:	bd08      	pop	{r3, pc}

00085d88 <udi_msc_sense_fail_cdb_invalid>:
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
}

static void udi_msc_sense_fail_cdb_invalid(void)
{
   85d88:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
   85d8a:	f04f 0005 	mov.w	r0, #5
   85d8e:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   85d92:	f04f 0200 	mov.w	r2, #0
   85d96:	f645 43f1 	movw	r3, #23793	; 0x5cf1
   85d9a:	f2c0 0308 	movt	r3, #8
   85d9e:	4798      	blx	r3
   85da0:	bd08      	pop	{r3, pc}
   85da2:	bf00      	nop

00085da4 <udi_msc_csw_send>:
	udi_msc_csw_send();
}


void udi_msc_csw_send(void)
{
   85da4:	b510      	push	{r4, lr}
   85da6:	b082      	sub	sp, #8
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
   85da8:	f645 7331 	movw	r3, #24369	; 0x5f31
   85dac:	f2c0 0308 	movt	r3, #8
   85db0:	9300      	str	r3, [sp, #0]
   85db2:	f04f 0081 	mov.w	r0, #129	; 0x81
   85db6:	f04f 0100 	mov.w	r1, #0
   85dba:	f240 2250 	movw	r2, #592	; 0x250
   85dbe:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85dc2:	f04f 030d 	mov.w	r3, #13
   85dc6:	f249 1451 	movw	r4, #37201	; 0x9151
   85dca:	f2c0 0408 	movt	r4, #8
   85dce:	47a0      	blx	r4
   85dd0:	b950      	cbnz	r0, 85de8 <udi_msc_csw_send+0x44>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
   85dd2:	f04f 0081 	mov.w	r0, #129	; 0x81
   85dd6:	f645 51a5 	movw	r1, #23973	; 0x5da5
   85dda:	f2c0 0108 	movt	r1, #8
   85dde:	f249 72dd 	movw	r2, #38877	; 0x97dd
   85de2:	f2c0 0208 	movt	r2, #8
   85de6:	4790      	blx	r2
	}
}
   85de8:	b002      	add	sp, #8
   85dea:	bd10      	pop	{r4, pc}

00085dec <udi_msc_csw_process>:

//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
   85dec:	b508      	push	{r3, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
   85dee:	f240 2350 	movw	r3, #592	; 0x250
   85df2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85df6:	6899      	ldr	r1, [r3, #8]
   85df8:	b171      	cbz	r1, 85e18 <udi_msc_csw_process+0x2c>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
   85dfa:	f241 42c8 	movw	r2, #5320	; 0x14c8
   85dfe:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85e02:	f992 300c 	ldrsb.w	r3, [r2, #12]
   85e06:	2b00      	cmp	r3, #0
			udd_ep_set_halt(UDI_MSC_EP_IN);
   85e08:	bfb4      	ite	lt
   85e0a:	2081      	movlt	r0, #129	; 0x81
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
   85e0c:	2002      	movge	r0, #2
   85e0e:	f648 7135 	movw	r1, #36661	; 0x8f35
   85e12:	f2c0 0108 	movt	r1, #8
   85e16:	4788      	blx	r1
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
   85e18:	f241 40c8 	movw	r0, #5320	; 0x14c8
   85e1c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85e20:	6842      	ldr	r2, [r0, #4]
   85e22:	f240 2350 	movw	r3, #592	; 0x250
   85e26:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85e2a:	605a      	str	r2, [r3, #4]
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
	udi_msc_csw_send();
   85e2c:	f645 51a5 	movw	r1, #23973	; 0x5da5
   85e30:	f2c0 0108 	movt	r1, #8
   85e34:	4788      	blx	r1
   85e36:	bd08      	pop	{r3, pc}

00085e38 <udi_msc_cbw_validate>:
	}
}


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
   85e38:	b508      	push	{r3, lr}
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
   85e3a:	f241 43c8 	movw	r3, #5320	; 0x14c8
   85e3e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85e42:	7b1a      	ldrb	r2, [r3, #12]
   85e44:	4051      	eors	r1, r2
   85e46:	f011 0f80 	tst.w	r1, #128	; 0x80
   85e4a:	d106      	bne.n	85e5a <udi_msc_cbw_validate+0x22>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
   85e4c:	f240 2150 	movw	r1, #592	; 0x250
   85e50:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85e54:	688b      	ldr	r3, [r1, #8]
   85e56:	4283      	cmp	r3, r0
   85e58:	d20c      	bcs.n	85e74 <udi_msc_cbw_validate+0x3c>
		udi_msc_sense_fail_cdb_invalid();
   85e5a:	f645 5089 	movw	r0, #23945	; 0x5d89
   85e5e:	f2c0 0008 	movt	r0, #8
   85e62:	4780      	blx	r0
		udi_msc_csw_process();
   85e64:	f645 52ed 	movw	r2, #24045	; 0x5ded
   85e68:	f2c0 0208 	movt	r2, #8
   85e6c:	4790      	blx	r2
		return false;
   85e6e:	f04f 0000 	mov.w	r0, #0
   85e72:	bd08      	pop	{r3, pc}
	 *  - Case  4: Hi > Dn
	 *  - Case  5: Hi > Di
	 *  - Case  9: Ho > Dn
	 *  - Case 11: Ho > Do
	 */
	return true;
   85e74:	f04f 0001 	mov.w	r0, #1
}
   85e78:	bd08      	pop	{r3, pc}
   85e7a:	bf00      	nop

00085e7c <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
   85e7c:	b510      	push	{r4, lr}
   85e7e:	b082      	sub	sp, #8
   85e80:	4602      	mov	r2, r0
   85e82:	460b      	mov	r3, r1
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
   85e84:	f645 61bd 	movw	r1, #24253	; 0x5ebd
   85e88:	f2c0 0108 	movt	r1, #8
   85e8c:	9100      	str	r1, [sp, #0]
   85e8e:	f04f 0081 	mov.w	r0, #129	; 0x81
   85e92:	f04f 0101 	mov.w	r1, #1
   85e96:	f249 1451 	movw	r4, #37201	; 0x9151
   85e9a:	f2c0 0408 	movt	r4, #8
   85e9e:	47a0      	blx	r4
   85ea0:	b948      	cbnz	r0, 85eb6 <udi_msc_data_send+0x3a>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
   85ea2:	f645 5371 	movw	r3, #23921	; 0x5d71
   85ea6:	f2c0 0308 	movt	r3, #8
   85eaa:	4798      	blx	r3
		udi_msc_csw_process();
   85eac:	f645 50ed 	movw	r0, #24045	; 0x5ded
   85eb0:	f2c0 0008 	movt	r0, #8
   85eb4:	4780      	blx	r0
	}
}
   85eb6:	b002      	add	sp, #8
   85eb8:	bd10      	pop	{r4, pc}
   85eba:	bf00      	nop

00085ebc <udi_msc_data_sent>:


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
   85ebc:	b510      	push	{r4, lr}
   85ebe:	460c      	mov	r4, r1
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
   85ec0:	b980      	cbnz	r0, 85ee4 <udi_msc_data_sent+0x28>
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Update sense data
	udi_msc_sense_pass();
   85ec2:	f645 43d5 	movw	r3, #23765	; 0x5cd5
   85ec6:	f2c0 0308 	movt	r3, #8
   85eca:	4798      	blx	r3
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
   85ecc:	f240 2050 	movw	r0, #592	; 0x250
   85ed0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85ed4:	6882      	ldr	r2, [r0, #8]
   85ed6:	1b14      	subs	r4, r2, r4
   85ed8:	6084      	str	r4, [r0, #8]
	udi_msc_csw_process();
   85eda:	f645 51ed 	movw	r1, #24045	; 0x5ded
   85ede:	f2c0 0108 	movt	r1, #8
   85ee2:	4788      	blx	r1
   85ee4:	bd10      	pop	{r4, pc}
   85ee6:	bf00      	nop

00085ee8 <udi_msc_cbw_wait>:
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
}

static void udi_msc_cbw_wait(void)
{
   85ee8:	b510      	push	{r4, lr}
   85eea:	b082      	sub	sp, #8
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
   85eec:	f246 1345 	movw	r3, #24901	; 0x6145
   85ef0:	f2c0 0308 	movt	r3, #8
   85ef4:	9300      	str	r3, [sp, #0]
   85ef6:	f04f 0002 	mov.w	r0, #2
   85efa:	f04f 0101 	mov.w	r1, #1
   85efe:	f241 42c8 	movw	r2, #5320	; 0x14c8
   85f02:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85f06:	f04f 031f 	mov.w	r3, #31
   85f0a:	f249 1451 	movw	r4, #37201	; 0x9151
   85f0e:	f2c0 0408 	movt	r4, #8
   85f12:	47a0      	blx	r4
   85f14:	b950      	cbnz	r0, 85f2c <udi_msc_cbw_wait+0x44>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
   85f16:	f04f 0002 	mov.w	r0, #2
   85f1a:	f645 61e9 	movw	r1, #24297	; 0x5ee9
   85f1e:	f2c0 0108 	movt	r1, #8
   85f22:	f249 72dd 	movw	r2, #38877	; 0x97dd
   85f26:	f2c0 0208 	movt	r2, #8
   85f2a:	4790      	blx	r2
	}
}
   85f2c:	b002      	add	sp, #8
   85f2e:	bd10      	pop	{r4, pc}

00085f30 <udi_msc_csw_sent>:
}


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
   85f30:	b508      	push	{r3, lr}
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
   85f32:	f645 63e9 	movw	r3, #24297	; 0x5ee9
   85f36:	f2c0 0308 	movt	r3, #8
   85f3a:	4798      	blx	r3
   85f3c:	bd08      	pop	{r3, pc}
   85f3e:	bf00      	nop

00085f40 <udi_msc_cbw_invalid>:

//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
   85f40:	b508      	push	{r3, lr}
	if (!udi_msc_b_cbw_invalid)
   85f42:	f241 43e8 	movw	r3, #5352	; 0x14e8
   85f46:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85f4a:	7818      	ldrb	r0, [r3, #0]
   85f4c:	b188      	cbz	r0, 85f72 <udi_msc_cbw_invalid+0x32>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_OUT);
   85f4e:	f04f 0002 	mov.w	r0, #2
   85f52:	f648 7135 	movw	r1, #36661	; 0x8f35
   85f56:	f2c0 0108 	movt	r1, #8
   85f5a:	4788      	blx	r1
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
   85f5c:	f04f 0002 	mov.w	r0, #2
   85f60:	f645 7141 	movw	r1, #24385	; 0x5f41
   85f64:	f2c0 0108 	movt	r1, #8
   85f68:	f249 72dd 	movw	r2, #38877	; 0x97dd
   85f6c:	f2c0 0208 	movt	r2, #8
   85f70:	4790      	blx	r2
   85f72:	bd08      	pop	{r3, pc}

00085f74 <udi_msc_csw_invalid>:
}

static void udi_msc_csw_invalid(void)
{
   85f74:	b508      	push	{r3, lr}
	if (!udi_msc_b_cbw_invalid)
   85f76:	f241 43e8 	movw	r3, #5352	; 0x14e8
   85f7a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85f7e:	7818      	ldrb	r0, [r3, #0]
   85f80:	b188      	cbz	r0, 85fa6 <udi_msc_csw_invalid+0x32>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_IN);
   85f82:	f04f 0081 	mov.w	r0, #129	; 0x81
   85f86:	f648 7135 	movw	r1, #36661	; 0x8f35
   85f8a:	f2c0 0108 	movt	r1, #8
   85f8e:	4788      	blx	r1
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
   85f90:	f04f 0081 	mov.w	r0, #129	; 0x81
   85f94:	f645 7175 	movw	r1, #24437	; 0x5f75
   85f98:	f2c0 0108 	movt	r1, #8
   85f9c:	f249 72dd 	movw	r2, #38877	; 0x97dd
   85fa0:	f2c0 0208 	movt	r2, #8
   85fa4:	4790      	blx	r2
   85fa6:	bd08      	pop	{r3, pc}

00085fa8 <udi_msc_spc_mode_sense>:
	udi_msc_csw_process();
}


static void udi_msc_spc_mode_sense(bool b_sense10)
{
   85fa8:	b570      	push	{r4, r5, r6, lr}
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
   85faa:	f241 41ec 	movw	r1, #5356	; 0x14ec
   85fae:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85fb2:	f04f 0300 	mov.w	r3, #0
   85fb6:	460a      	mov	r2, r1
   85fb8:	f842 3b04 	str.w	r3, [r2], #4
   85fbc:	604b      	str	r3, [r1, #4]
   85fbe:	f102 0204 	add.w	r2, r2, #4
   85fc2:	f842 3b04 	str.w	r3, [r2], #4
   85fc6:	f842 3b04 	str.w	r3, [r2], #4
   85fca:	6013      	str	r3, [r2, #0]

	// Initialize process
	if (b_sense10) {
   85fcc:	4606      	mov	r6, r0
   85fce:	b148      	cbz	r0, 85fe4 <udi_msc_spc_mode_sense+0x3c>
		request_lgt = udi_msc_cbw.CDB[8];
   85fd0:	f241 44c8 	movw	r4, #5320	; 0x14c8
   85fd4:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85fd8:	7de5      	ldrb	r5, [r4, #23]
		ptr_mode = &sense.s10.sense_data;
   85fda:	f101 0108 	add.w	r1, r1, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
   85fde:	f04f 0408 	mov.w	r4, #8
   85fe2:	e007      	b.n	85ff4 <udi_msc_spc_mode_sense+0x4c>
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
   85fe4:	f241 40c8 	movw	r0, #5320	; 0x14c8
   85fe8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85fec:	7cc5      	ldrb	r5, [r0, #19]
		ptr_mode = &sense.s6.sense_data;
   85fee:	492b      	ldr	r1, [pc, #172]	; (8609c <udi_msc_spc_mode_sense+0xf4>)
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
   85ff0:	f04f 0404 	mov.w	r4, #4
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
   85ff4:	f241 43c8 	movw	r3, #5320	; 0x14c8
   85ff8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85ffc:	7c5a      	ldrb	r2, [r3, #17]
   85ffe:	f002 003f 	and.w	r0, r2, #63	; 0x3f
	if ((SCSI_MS_MODE_INFEXP == mode)
   86002:	281c      	cmp	r0, #28
   86004:	d001      	beq.n	8600a <udi_msc_spc_mode_sense+0x62>
			|| (SCSI_MS_MODE_ALL == mode)) {
   86006:	283f      	cmp	r0, #63	; 0x3f
   86008:	d10b      	bne.n	86022 <udi_msc_spc_mode_sense+0x7a>
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
   8600a:	f04f 031c 	mov.w	r3, #28
   8600e:	700b      	strb	r3, [r1, #0]
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
   86010:	f04f 020a 	mov.w	r2, #10
   86014:	704a      	strb	r2, [r1, #1]
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
   86016:	f04f 0005 	mov.w	r0, #5
   8601a:	70c8      	strb	r0, [r1, #3]
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
   8601c:	f104 040c 	add.w	r4, r4, #12
   86020:	b2e4      	uxtb	r4, r4
   86022:	42ac      	cmp	r4, r5
   86024:	bf38      	it	cc
   86026:	4625      	movcc	r5, r4
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
		request_lgt = data_sense_lgt;
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
   86028:	4628      	mov	r0, r5
   8602a:	f04f 0180 	mov.w	r1, #128	; 0x80
   8602e:	f645 6339 	movw	r3, #24121	; 0x5e39
   86032:	f2c0 0308 	movt	r3, #8
   86036:	4798      	blx	r3
   86038:	b370      	cbz	r0, 86098 <udi_msc_spc_mode_sense+0xf0>
		return;

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
   8603a:	f241 41c8 	movw	r1, #5320	; 0x14c8
   8603e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86042:	7b48      	ldrb	r0, [r1, #13]
   86044:	f245 3209 	movw	r2, #21257	; 0x5309
   86048:	f2c0 0208 	movt	r2, #8
   8604c:	4790      	blx	r2
   8604e:	2800      	cmp	r0, #0
   86050:	bf14      	ite	ne
   86052:	2080      	movne	r0, #128	; 0x80
   86054:	2000      	moveq	r0, #0

	if (b_sense10) {
   86056:	b16e      	cbz	r6, 86074 <udi_msc_spc_mode_sense+0xcc>
		sense.s10.header.mode_data_length =
				cpu_to_be16((data_sense_lgt - 2));
   86058:	f1a4 0402 	sub.w	r4, r4, #2
   8605c:	b2a4      	uxth	r4, r4

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;

	if (b_sense10) {
		sense.s10.header.mode_data_length =
   8605e:	f241 41ec 	movw	r1, #5356	; 0x14ec
   86062:	f2c2 0107 	movt	r1, #8199	; 0x2007
				cpu_to_be16((data_sense_lgt - 2));
   86066:	ea4f 2214 	mov.w	r2, r4, lsr #8
   8606a:	ea42 2404 	orr.w	r4, r2, r4, lsl #8

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;

	if (b_sense10) {
		sense.s10.header.mode_data_length =
   8606e:	800c      	strh	r4, [r1, #0]
				cpu_to_be16((data_sense_lgt - 2));
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
   86070:	70c8      	strb	r0, [r1, #3]
   86072:	e007      	b.n	86084 <udi_msc_spc_mode_sense+0xdc>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
   86074:	f241 43ec 	movw	r3, #5356	; 0x14ec
   86078:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8607c:	f104 34ff 	add.w	r4, r4, #4294967295
   86080:	701c      	strb	r4, [r3, #0]
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
   86082:	7098      	strb	r0, [r3, #2]
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
   86084:	f241 40ec 	movw	r0, #5356	; 0x14ec
   86088:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8608c:	4629      	mov	r1, r5
   8608e:	f645 637d 	movw	r3, #24189	; 0x5e7d
   86092:	f2c0 0308 	movt	r3, #8
   86096:	4798      	blx	r3
   86098:	bd70      	pop	{r4, r5, r6, pc}
   8609a:	bf00      	nop
   8609c:	200714f0 	.word	0x200714f0

000860a0 <udi_msc_sbc_trans>:
			sizeof(udi_msc_capacity));
}


static void udi_msc_sbc_trans(bool b_read)
{
   860a0:	b510      	push	{r4, lr}
	uint32_t trans_size;

	if (!b_read) {
   860a2:	4604      	mov	r4, r0
   860a4:	b9d8      	cbnz	r0, 860de <udi_msc_sbc_trans+0x3e>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
   860a6:	f241 43c8 	movw	r3, #5320	; 0x14c8
   860aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   860ae:	7b58      	ldrb	r0, [r3, #13]
   860b0:	f245 3109 	movw	r1, #21257	; 0x5309
   860b4:	f2c0 0108 	movt	r1, #8
   860b8:	4788      	blx	r1
   860ba:	b180      	cbz	r0, 860de <udi_msc_sbc_trans+0x3e>
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}

static void udi_msc_sense_fail_protected(void)
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
   860bc:	f04f 0007 	mov.w	r0, #7
   860c0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
   860c4:	f04f 0200 	mov.w	r2, #0
   860c8:	f645 43f1 	movw	r3, #23793	; 0x5cf1
   860cc:	f2c0 0308 	movt	r3, #8
   860d0:	4798      	blx	r3
	if (!b_read) {
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
			// Write not authorized
			udi_msc_sense_fail_protected();
			udi_msc_csw_process();
   860d2:	f645 52ed 	movw	r2, #24045	; 0x5ded
   860d6:	f2c0 0208 	movt	r2, #8
   860da:	4790      	blx	r2
			return;
   860dc:	bd10      	pop	{r4, pc}
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
   860de:	f241 5204 	movw	r2, #5380	; 0x1504
   860e2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   860e6:	f241 40c8 	movw	r0, #5320	; 0x14c8
   860ea:	f2c2 0007 	movt	r0, #8199	; 0x2007
   860ee:	7c43      	ldrb	r3, [r0, #17]
   860f0:	70d3      	strb	r3, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
   860f2:	7c81      	ldrb	r1, [r0, #18]
   860f4:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
   860f6:	7cc3      	ldrb	r3, [r0, #19]
   860f8:	7053      	strb	r3, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
   860fa:	7d01      	ldrb	r1, [r0, #20]
   860fc:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
   860fe:	f241 5200 	movw	r2, #5376	; 0x1500
   86102:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86106:	7d83      	ldrb	r3, [r0, #22]
   86108:	7053      	strb	r3, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
   8610a:	7dc0      	ldrb	r0, [r0, #23]
   8610c:	7010      	strb	r0, [r2, #0]

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
   8610e:	8811      	ldrh	r1, [r2, #0]
	if (!udi_msc_cbw_validate(trans_size,
   86110:	ea4f 2041 	mov.w	r0, r1, lsl #9
   86114:	2c00      	cmp	r4, #0
   86116:	bf14      	ite	ne
   86118:	2180      	movne	r1, #128	; 0x80
   8611a:	2100      	moveq	r1, #0
   8611c:	f645 6239 	movw	r2, #24121	; 0x5e39
   86120:	f2c0 0208 	movt	r2, #8
   86124:	4790      	blx	r2
   86126:	b158      	cbz	r0, 86140 <udi_msc_sbc_trans+0xa0>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
   86128:	f241 531c 	movw	r3, #5404	; 0x151c
   8612c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86130:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
   86132:	f241 40c4 	movw	r0, #5316	; 0x14c4
   86136:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8613a:	f04f 0101 	mov.w	r1, #1
   8613e:	7001      	strb	r1, [r0, #0]
   86140:	bd10      	pop	{r4, pc}
   86142:	bf00      	nop

00086144 <udi_msc_cbw_received>:
}


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
   86144:	b570      	push	{r4, r5, r6, lr}
	UNUSED(ep);
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
   86146:	2800      	cmp	r0, #0
   86148:	f040 82b8 	bne.w	866bc <udi_msc_cbw_received+0x578>
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
   8614c:	291f      	cmp	r1, #31
   8614e:	d10a      	bne.n	86166 <udi_msc_cbw_received+0x22>
			|| (udi_msc_cbw.dCBWSignature !=
   86150:	f245 3355 	movw	r3, #21333	; 0x5355
   86154:	f2c4 3342 	movt	r3, #17218	; 0x4342
   86158:	f241 42c8 	movw	r2, #5320	; 0x14c8
   8615c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86160:	6810      	ldr	r0, [r2, #0]
   86162:	4298      	cmp	r0, r3
   86164:	d011      	beq.n	8618a <udi_msc_cbw_received+0x46>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
   86166:	f241 43e8 	movw	r3, #5352	; 0x14e8
   8616a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8616e:	f04f 0201 	mov.w	r2, #1
   86172:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
   86174:	f645 7141 	movw	r1, #24385	; 0x5f41
   86178:	f2c0 0108 	movt	r1, #8
   8617c:	4788      	blx	r1
		udi_msc_csw_invalid();
   8617e:	f645 7075 	movw	r0, #24437	; 0x5f75
   86182:	f2c0 0008 	movt	r0, #8
   86186:	4780      	blx	r0
		return;
   86188:	bd70      	pop	{r4, r5, r6, pc}
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
   8618a:	f241 41c8 	movw	r1, #5320	; 0x14c8
   8618e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86192:	7b4b      	ldrb	r3, [r1, #13]
   86194:	f003 000f 	and.w	r0, r3, #15
   86198:	7348      	strb	r0, [r1, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
   8619a:	f241 42c0 	movw	r2, #5312	; 0x14c0
   8619e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   861a2:	7811      	ldrb	r1, [r2, #0]
   861a4:	4281      	cmp	r1, r0
   861a6:	d20a      	bcs.n	861be <udi_msc_cbw_received+0x7a>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
   861a8:	f645 5189 	movw	r1, #23945	; 0x5d89
   861ac:	f2c0 0108 	movt	r1, #8
   861b0:	4788      	blx	r1
		udi_msc_csw_process();
   861b2:	f645 50ed 	movw	r0, #24045	; 0x5ded
   861b6:	f2c0 0008 	movt	r0, #8
   861ba:	4780      	blx	r0
		return;
   861bc:	bd70      	pop	{r4, r5, r6, pc}
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
   861be:	f241 43c8 	movw	r3, #5320	; 0x14c8
   861c2:	f2c2 0307 	movt	r3, #8199	; 0x2007
		udi_msc_sense_fail_cdb_invalid();
		udi_msc_csw_process();
		return;
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
   861c6:	689a      	ldr	r2, [r3, #8]
   861c8:	f240 2150 	movw	r1, #592	; 0x250
   861cc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   861d0:	608a      	str	r2, [r1, #8]
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
   861d2:	7bdb      	ldrb	r3, [r3, #15]
   861d4:	2b5a      	cmp	r3, #90	; 0x5a
   861d6:	f200 825a 	bhi.w	8668e <udi_msc_cbw_received+0x54a>
   861da:	e8df f013 	tbh	[pc, r3, lsl #1]
   861de:	01a6      	.short	0x01a6
   861e0:	02580258 	.word	0x02580258
   861e4:	0258005b 	.word	0x0258005b
   861e8:	02580258 	.word	0x02580258
   861ec:	02580258 	.word	0x02580258
   861f0:	02580258 	.word	0x02580258
   861f4:	02580258 	.word	0x02580258
   861f8:	02580258 	.word	0x02580258
   861fc:	02580258 	.word	0x02580258
   86200:	00790258 	.word	0x00790258
   86204:	02580258 	.word	0x02580258
   86208:	02580258 	.word	0x02580258
   8620c:	02580258 	.word	0x02580258
   86210:	01960258 	.word	0x01960258
   86214:	02580209 	.word	0x02580209
   86218:	02260258 	.word	0x02260258
   8621c:	02580258 	.word	0x02580258
   86220:	02580258 	.word	0x02580258
   86224:	02580258 	.word	0x02580258
   86228:	025801ce 	.word	0x025801ce
   8622c:	02480258 	.word	0x02480258
   86230:	02500258 	.word	0x02500258
   86234:	02580258 	.word	0x02580258
   86238:	02580258 	.word	0x02580258
   8623c:	0258023d 	.word	0x0258023d
   86240:	02580258 	.word	0x02580258
   86244:	02580258 	.word	0x02580258
   86248:	02580258 	.word	0x02580258
   8624c:	02580258 	.word	0x02580258
   86250:	02580258 	.word	0x02580258
   86254:	02580258 	.word	0x02580258
   86258:	02580258 	.word	0x02580258
   8625c:	02580258 	.word	0x02580258
   86260:	02580258 	.word	0x02580258
   86264:	02580258 	.word	0x02580258
   86268:	02580258 	.word	0x02580258
   8626c:	02580258 	.word	0x02580258
   86270:	02580258 	.word	0x02580258
   86274:	02580258 	.word	0x02580258
   86278:	02580258 	.word	0x02580258
   8627c:	02580258 	.word	0x02580258
   86280:	02580258 	.word	0x02580258
   86284:	02580258 	.word	0x02580258
   86288:	02580258 	.word	0x02580258
   8628c:	02580258 	.word	0x02580258
   86290:	019e0258 	.word	0x019e0258
//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
	uint8_t length = udi_msc_cbw.CDB[4];
   86294:	f241 44c8 	movw	r4, #5320	; 0x14c8
   86298:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8629c:	7ce4      	ldrb	r4, [r4, #19]
   8629e:	2c12      	cmp	r4, #18
   862a0:	bf28      	it	cs
   862a2:	2412      	movcs	r4, #18

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
		length = sizeof(udi_msc_sense);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
   862a4:	4620      	mov	r0, r4
   862a6:	f04f 0180 	mov.w	r1, #128	; 0x80
   862aa:	f645 6239 	movw	r2, #24121	; 0x5e39
   862ae:	f2c0 0208 	movt	r2, #8
   862b2:	4790      	blx	r2
   862b4:	2800      	cmp	r0, #0
   862b6:	f000 8201 	beq.w	866bc <udi_msc_cbw_received+0x578>
		return;
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
   862ba:	f241 5008 	movw	r0, #5384	; 0x1508
   862be:	f2c2 0007 	movt	r0, #8199	; 0x2007
   862c2:	4621      	mov	r1, r4
   862c4:	f645 637d 	movw	r3, #24189	; 0x5e7d
   862c8:	f2c0 0308 	movt	r3, #8
   862cc:	4798      	blx	r3
   862ce:	bd70      	pop	{r4, r5, r6, pc}
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
   862d0:	f241 44c8 	movw	r4, #5320	; 0x14c8
   862d4:	f2c2 0407 	movt	r4, #8199	; 0x2007
   862d8:	7ce4      	ldrb	r4, [r4, #19]
   862da:	2c24      	cmp	r4, #36	; 0x24
   862dc:	bf28      	it	cs
   862de:	2424      	movcs	r4, #36	; 0x24

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
   862e0:	4620      	mov	r0, r4
   862e2:	f04f 0180 	mov.w	r1, #128	; 0x80
   862e6:	f645 6239 	movw	r2, #24121	; 0x5e39
   862ea:	f2c0 0208 	movt	r2, #8
   862ee:	4790      	blx	r2
   862f0:	2800      	cmp	r0, #0
   862f2:	f000 81e3 	beq.w	866bc <udi_msc_cbw_received+0x578>
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
   862f6:	f241 40c8 	movw	r0, #5320	; 0x14c8
   862fa:	f2c2 0007 	movt	r0, #8199	; 0x2007
   862fe:	7c01      	ldrb	r1, [r0, #16]
   86300:	f011 0f03 	tst.w	r1, #3
   86304:	d105      	bne.n	86312 <udi_msc_cbw_received+0x1ce>
			|| (0 != udi_msc_cbw.CDB[2])) {
   86306:	f241 43c8 	movw	r3, #5320	; 0x14c8
   8630a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8630e:	7c5a      	ldrb	r2, [r3, #17]
   86310:	b152      	cbz	r2, 86328 <udi_msc_cbw_received+0x1e4>
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
   86312:	f645 5189 	movw	r1, #23945	; 0x5d89
   86316:	f2c0 0108 	movt	r1, #8
   8631a:	4788      	blx	r1
		udi_msc_csw_process();
   8631c:	f645 53ed 	movw	r3, #24045	; 0x5ded
   86320:	f2c0 0308 	movt	r3, #8
   86324:	4798      	blx	r3
   86326:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
   86328:	f241 45c8 	movw	r5, #5320	; 0x14c8
   8632c:	f2c2 0507 	movt	r5, #8199	; 0x2007
   86330:	7b68      	ldrb	r0, [r5, #13]
   86332:	f245 3621 	movw	r6, #21281	; 0x5321
   86336:	f2c0 0608 	movt	r6, #8
   8633a:	47b0      	blx	r6
   8633c:	2800      	cmp	r0, #0
   8633e:	bf14      	ite	ne
   86340:	2080      	movne	r0, #128	; 0x80
   86342:	2000      	moveq	r0, #0
   86344:	f240 262c 	movw	r6, #556	; 0x22c
   86348:	f2c2 0607 	movt	r6, #8199	; 0x2007
   8634c:	7070      	strb	r0, [r6, #1]
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
   8634e:	f241 41c8 	movw	r1, #5320	; 0x14c8
   86352:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86356:	7b48      	ldrb	r0, [r1, #13]
   86358:	f245 3339 	movw	r3, #21305	; 0x5339
   8635c:	f2c0 0308 	movt	r3, #8
   86360:	4798      	blx	r3
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
   86362:	f106 0510 	add.w	r5, r6, #16
   86366:	4603      	mov	r3, r0
   86368:	f853 0f01 	ldr.w	r0, [r3, #1]!
   8636c:	6859      	ldr	r1, [r3, #4]
   8636e:	689a      	ldr	r2, [r3, #8]
   86370:	68db      	ldr	r3, [r3, #12]
   86372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   86374:	7c32      	ldrb	r2, [r6, #16]
   86376:	2a00      	cmp	r2, #0
   86378:	f000 819a 	beq.w	866b0 <udi_msc_cbw_received+0x56c>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   8637c:	2a22      	cmp	r2, #34	; 0x22
   8637e:	f000 819a 	beq.w	866b6 <udi_msc_cbw_received+0x572>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   86382:	7c71      	ldrb	r1, [r6, #17]
   86384:	2900      	cmp	r1, #0
   86386:	d03e      	beq.n	86406 <udi_msc_cbw_received+0x2c2>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86388:	2922      	cmp	r1, #34	; 0x22
   8638a:	d06b      	beq.n	86464 <udi_msc_cbw_received+0x320>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   8638c:	7cb2      	ldrb	r2, [r6, #18]
   8638e:	2a00      	cmp	r2, #0
   86390:	d03c      	beq.n	8640c <udi_msc_cbw_received+0x2c8>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   86392:	2a22      	cmp	r2, #34	; 0x22
   86394:	d069      	beq.n	8646a <udi_msc_cbw_received+0x326>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   86396:	7cf1      	ldrb	r1, [r6, #19]
   86398:	2900      	cmp	r1, #0
   8639a:	d03a      	beq.n	86412 <udi_msc_cbw_received+0x2ce>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   8639c:	2922      	cmp	r1, #34	; 0x22
   8639e:	d067      	beq.n	86470 <udi_msc_cbw_received+0x32c>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   863a0:	7d32      	ldrb	r2, [r6, #20]
   863a2:	2a00      	cmp	r2, #0
   863a4:	d038      	beq.n	86418 <udi_msc_cbw_received+0x2d4>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   863a6:	2a22      	cmp	r2, #34	; 0x22
   863a8:	d065      	beq.n	86476 <udi_msc_cbw_received+0x332>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   863aa:	7d71      	ldrb	r1, [r6, #21]
   863ac:	2900      	cmp	r1, #0
   863ae:	d036      	beq.n	8641e <udi_msc_cbw_received+0x2da>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   863b0:	2922      	cmp	r1, #34	; 0x22
   863b2:	d063      	beq.n	8647c <udi_msc_cbw_received+0x338>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   863b4:	7db2      	ldrb	r2, [r6, #22]
   863b6:	b3aa      	cbz	r2, 86424 <udi_msc_cbw_received+0x2e0>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   863b8:	2a22      	cmp	r2, #34	; 0x22
   863ba:	d062      	beq.n	86482 <udi_msc_cbw_received+0x33e>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   863bc:	7df1      	ldrb	r1, [r6, #23]
   863be:	b3a1      	cbz	r1, 8642a <udi_msc_cbw_received+0x2e6>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   863c0:	2922      	cmp	r1, #34	; 0x22
   863c2:	d061      	beq.n	86488 <udi_msc_cbw_received+0x344>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   863c4:	7e32      	ldrb	r2, [r6, #24]
   863c6:	b39a      	cbz	r2, 86430 <udi_msc_cbw_received+0x2ec>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   863c8:	2a22      	cmp	r2, #34	; 0x22
   863ca:	d060      	beq.n	8648e <udi_msc_cbw_received+0x34a>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   863cc:	7e71      	ldrb	r1, [r6, #25]
   863ce:	b391      	cbz	r1, 86436 <udi_msc_cbw_received+0x2f2>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   863d0:	2922      	cmp	r1, #34	; 0x22
   863d2:	d05f      	beq.n	86494 <udi_msc_cbw_received+0x350>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   863d4:	7eb2      	ldrb	r2, [r6, #26]
   863d6:	b38a      	cbz	r2, 8643c <udi_msc_cbw_received+0x2f8>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   863d8:	2a22      	cmp	r2, #34	; 0x22
   863da:	d05e      	beq.n	8649a <udi_msc_cbw_received+0x356>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   863dc:	7ef1      	ldrb	r1, [r6, #27]
   863de:	b381      	cbz	r1, 86442 <udi_msc_cbw_received+0x2fe>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   863e0:	2922      	cmp	r1, #34	; 0x22
   863e2:	d05d      	beq.n	864a0 <udi_msc_cbw_received+0x35c>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   863e4:	7f32      	ldrb	r2, [r6, #28]
   863e6:	b37a      	cbz	r2, 86448 <udi_msc_cbw_received+0x304>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   863e8:	2a22      	cmp	r2, #34	; 0x22
   863ea:	d05c      	beq.n	864a6 <udi_msc_cbw_received+0x362>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   863ec:	7f71      	ldrb	r1, [r6, #29]
   863ee:	b371      	cbz	r1, 8644e <udi_msc_cbw_received+0x30a>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   863f0:	2922      	cmp	r1, #34	; 0x22
   863f2:	d05b      	beq.n	864ac <udi_msc_cbw_received+0x368>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   863f4:	7fb2      	ldrb	r2, [r6, #30]
   863f6:	b36a      	cbz	r2, 86454 <udi_msc_cbw_received+0x310>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   863f8:	2a22      	cmp	r2, #34	; 0x22
   863fa:	d05a      	beq.n	864b2 <udi_msc_cbw_received+0x36e>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   863fc:	7ff3      	ldrb	r3, [r6, #31]
   863fe:	bb63      	cbnz	r3, 8645a <udi_msc_cbw_received+0x316>
   86400:	f04f 030f 	mov.w	r3, #15
   86404:	e057      	b.n	864b6 <udi_msc_cbw_received+0x372>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
			break;
		}
		i++;
   86406:	f04f 0301 	mov.w	r3, #1
   8640a:	e054      	b.n	864b6 <udi_msc_cbw_received+0x372>
   8640c:	f04f 0302 	mov.w	r3, #2
   86410:	e051      	b.n	864b6 <udi_msc_cbw_received+0x372>
   86412:	f04f 0303 	mov.w	r3, #3
   86416:	e04e      	b.n	864b6 <udi_msc_cbw_received+0x372>
   86418:	f04f 0304 	mov.w	r3, #4
   8641c:	e04b      	b.n	864b6 <udi_msc_cbw_received+0x372>
   8641e:	f04f 0305 	mov.w	r3, #5
   86422:	e048      	b.n	864b6 <udi_msc_cbw_received+0x372>
   86424:	f04f 0306 	mov.w	r3, #6
   86428:	e045      	b.n	864b6 <udi_msc_cbw_received+0x372>
   8642a:	f04f 0307 	mov.w	r3, #7
   8642e:	e042      	b.n	864b6 <udi_msc_cbw_received+0x372>
   86430:	f04f 0308 	mov.w	r3, #8
   86434:	e03f      	b.n	864b6 <udi_msc_cbw_received+0x372>
   86436:	f04f 0309 	mov.w	r3, #9
   8643a:	e03c      	b.n	864b6 <udi_msc_cbw_received+0x372>
   8643c:	f04f 030a 	mov.w	r3, #10
   86440:	e039      	b.n	864b6 <udi_msc_cbw_received+0x372>
   86442:	f04f 030b 	mov.w	r3, #11
   86446:	e036      	b.n	864b6 <udi_msc_cbw_received+0x372>
   86448:	f04f 030c 	mov.w	r3, #12
   8644c:	e033      	b.n	864b6 <udi_msc_cbw_received+0x372>
   8644e:	f04f 030d 	mov.w	r3, #13
   86452:	e030      	b.n	864b6 <udi_msc_cbw_received+0x372>
   86454:	f04f 030e 	mov.w	r3, #14
   86458:	e02d      	b.n	864b6 <udi_msc_cbw_received+0x372>

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   8645a:	2b22      	cmp	r3, #34	; 0x22
   8645c:	bf08      	it	eq
   8645e:	230f      	moveq	r3, #15
   86460:	d029      	beq.n	864b6 <udi_msc_cbw_received+0x372>
   86462:	e047      	b.n	864f4 <udi_msc_cbw_received+0x3b0>
			break;
		}
		i++;
   86464:	f04f 0301 	mov.w	r3, #1
   86468:	e025      	b.n	864b6 <udi_msc_cbw_received+0x372>
   8646a:	f04f 0302 	mov.w	r3, #2
   8646e:	e022      	b.n	864b6 <udi_msc_cbw_received+0x372>
   86470:	f04f 0303 	mov.w	r3, #3
   86474:	e01f      	b.n	864b6 <udi_msc_cbw_received+0x372>
   86476:	f04f 0304 	mov.w	r3, #4
   8647a:	e01c      	b.n	864b6 <udi_msc_cbw_received+0x372>
   8647c:	f04f 0305 	mov.w	r3, #5
   86480:	e019      	b.n	864b6 <udi_msc_cbw_received+0x372>
   86482:	f04f 0306 	mov.w	r3, #6
   86486:	e016      	b.n	864b6 <udi_msc_cbw_received+0x372>
   86488:	f04f 0307 	mov.w	r3, #7
   8648c:	e013      	b.n	864b6 <udi_msc_cbw_received+0x372>
   8648e:	f04f 0308 	mov.w	r3, #8
   86492:	e010      	b.n	864b6 <udi_msc_cbw_received+0x372>
   86494:	f04f 0309 	mov.w	r3, #9
   86498:	e00d      	b.n	864b6 <udi_msc_cbw_received+0x372>
   8649a:	f04f 030a 	mov.w	r3, #10
   8649e:	e00a      	b.n	864b6 <udi_msc_cbw_received+0x372>
   864a0:	f04f 030b 	mov.w	r3, #11
   864a4:	e007      	b.n	864b6 <udi_msc_cbw_received+0x372>
   864a6:	f04f 030c 	mov.w	r3, #12
   864aa:	e004      	b.n	864b6 <udi_msc_cbw_received+0x372>
   864ac:	f04f 030d 	mov.w	r3, #13
   864b0:	e001      	b.n	864b6 <udi_msc_cbw_received+0x372>
   864b2:	f04f 030e 	mov.w	r3, #14
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		udi_msc_inquiry_data.product_id[i] = ' ';
   864b6:	f240 212c 	movw	r1, #556	; 0x22c
   864ba:	f2c2 0107 	movt	r1, #8199	; 0x2007
   864be:	f04f 0220 	mov.w	r2, #32
   864c2:	f1c3 050f 	rsb	r5, r3, #15
   864c6:	f005 0001 	and.w	r0, r5, #1
   864ca:	18cd      	adds	r5, r1, r3
   864cc:	742a      	strb	r2, [r5, #16]
		i++;
   864ce:	f103 0301 	add.w	r3, r3, #1
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   864d2:	2b10      	cmp	r3, #16
   864d4:	f040 80f3 	bne.w	866be <udi_msc_cbw_received+0x57a>
   864d8:	e00c      	b.n	864f4 <udi_msc_cbw_received+0x3b0>
		udi_msc_inquiry_data.product_id[i] = ' ';
   864da:	18c8      	adds	r0, r1, r3
   864dc:	7402      	strb	r2, [r0, #16]
		i++;
   864de:	f103 0301 	add.w	r3, r3, #1
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   864e2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
		udi_msc_inquiry_data.product_id[i] = ' ';
   864e6:	18c8      	adds	r0, r1, r3
   864e8:	7402      	strb	r2, [r0, #16]
		i++;
   864ea:	f103 0301 	add.w	r3, r3, #1
   864ee:	b2db      	uxtb	r3, r3
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   864f0:	2b10      	cmp	r3, #16
   864f2:	d1f2      	bne.n	864da <udi_msc_cbw_received+0x396>
		udi_msc_inquiry_data.product_id[i] = ' ';
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
   864f4:	f240 202c 	movw	r0, #556	; 0x22c
   864f8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   864fc:	4621      	mov	r1, r4
   864fe:	f645 627d 	movw	r2, #24189	; 0x5e7d
   86502:	f2c0 0208 	movt	r2, #8
   86506:	4790      	blx	r2
   86508:	bd70      	pop	{r4, r5, r6, pc}
	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
		break;

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
   8650a:	f04f 0000 	mov.w	r0, #0
   8650e:	f645 73a9 	movw	r3, #24489	; 0x5fa9
   86512:	f2c0 0308 	movt	r3, #8
   86516:	4798      	blx	r3
		break;
   86518:	bd70      	pop	{r4, r5, r6, pc}
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
   8651a:	f04f 0001 	mov.w	r0, #1
   8651e:	f645 72a9 	movw	r2, #24489	; 0x5fa9
   86522:	f2c0 0208 	movt	r2, #8
   86526:	4790      	blx	r2
		break;
   86528:	bd70      	pop	{r4, r5, r6, pc}
}


static bool udi_msc_spc_testunitready_global(void)
{
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
   8652a:	f245 21c9 	movw	r1, #21193	; 0x52c9
   8652e:	f2c0 0108 	movt	r1, #8
   86532:	4788      	blx	r1
   86534:	2802      	cmp	r0, #2
   86536:	d009      	beq.n	8654c <udi_msc_cbw_received+0x408>
   86538:	2803      	cmp	r0, #3
   8653a:	d001      	beq.n	86540 <udi_msc_cbw_received+0x3fc>
   8653c:	b190      	cbz	r0, 86564 <udi_msc_cbw_received+0x420>
   8653e:	e00b      	b.n	86558 <udi_msc_cbw_received+0x414>
	case CTRL_GOOD:
		return true;	// Don't change sense data
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   86540:	f645 5339 	movw	r3, #23865	; 0x5d39
   86544:	f2c0 0308 	movt	r3, #8
   86548:	4798      	blx	r3
   8654a:	e010      	b.n	8656e <udi_msc_cbw_received+0x42a>
		break;
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   8654c:	f645 5155 	movw	r1, #23893	; 0x5d55
   86550:	f2c0 0108 	movt	r1, #8
   86554:	4788      	blx	r1
   86556:	e00a      	b.n	8656e <udi_msc_cbw_received+0x42a>
		break;
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
   86558:	f645 5071 	movw	r0, #23921	; 0x5d71
   8655c:	f2c0 0008 	movt	r0, #8
   86560:	4780      	blx	r0
   86562:	e004      	b.n	8656e <udi_msc_cbw_received+0x42a>

static void udi_msc_spc_testunitready(void)
{
	if (udi_msc_spc_testunitready_global()) {
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
   86564:	f645 42d5 	movw	r2, #23765	; 0x5cd5
   86568:	f2c0 0208 	movt	r2, #8
   8656c:	4790      	blx	r2
	}
	// Send status in CSW packet
	udi_msc_csw_process();
   8656e:	f645 50ed 	movw	r0, #24045	; 0x5ded
   86572:	f2c0 0008 	movt	r0, #8
   86576:	4780      	blx	r0
   86578:	bd70      	pop	{r4, r5, r6, pc}

static void udi_msc_sbc_read_capacity(void)
{
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
   8657a:	f04f 0008 	mov.w	r0, #8
   8657e:	f04f 0180 	mov.w	r1, #128	; 0x80
   86582:	f645 6339 	movw	r3, #24121	; 0x5e39
   86586:	f2c0 0308 	movt	r3, #8
   8658a:	4798      	blx	r3
   8658c:	2800      	cmp	r0, #0
   8658e:	f000 8095 	beq.w	866bc <udi_msc_cbw_received+0x578>
					USB_CBW_DIRECTION_IN))
		return;

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
   86592:	f241 40c8 	movw	r0, #5320	; 0x14c8
   86596:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8659a:	7b40      	ldrb	r0, [r0, #13]
   8659c:	f241 5120 	movw	r1, #5408	; 0x1520
   865a0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   865a4:	f245 22e1 	movw	r2, #21217	; 0x52e1
   865a8:	f2c0 0208 	movt	r2, #8
   865ac:	4790      	blx	r2
   865ae:	2802      	cmp	r0, #2
   865b0:	d008      	beq.n	865c4 <udi_msc_cbw_received+0x480>
   865b2:	2803      	cmp	r0, #3
   865b4:	d001      	beq.n	865ba <udi_msc_cbw_received+0x476>
   865b6:	b178      	cbz	r0, 865d8 <udi_msc_cbw_received+0x494>
   865b8:	e009      	b.n	865ce <udi_msc_cbw_received+0x48a>
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   865ba:	4847      	ldr	r0, [pc, #284]	; (866d8 <udi_msc_cbw_received+0x594>)
   865bc:	4780      	blx	r0
		udi_msc_csw_process();
   865be:	4947      	ldr	r1, [pc, #284]	; (866dc <udi_msc_cbw_received+0x598>)
   865c0:	4788      	blx	r1
   865c2:	bd70      	pop	{r4, r5, r6, pc}
		return;
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   865c4:	4b46      	ldr	r3, [pc, #280]	; (866e0 <udi_msc_cbw_received+0x59c>)
   865c6:	4798      	blx	r3
		udi_msc_csw_process();
   865c8:	4a44      	ldr	r2, [pc, #272]	; (866dc <udi_msc_cbw_received+0x598>)
   865ca:	4790      	blx	r2
   865cc:	bd70      	pop	{r4, r5, r6, pc}
		return;
	default:
		udi_msc_sense_fail_hardware();
   865ce:	4945      	ldr	r1, [pc, #276]	; (866e4 <udi_msc_cbw_received+0x5a0>)
   865d0:	4788      	blx	r1
		udi_msc_csw_process();
   865d2:	4b42      	ldr	r3, [pc, #264]	; (866dc <udi_msc_cbw_received+0x598>)
   865d4:	4798      	blx	r3
   865d6:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
   865d8:	4843      	ldr	r0, [pc, #268]	; (866e8 <udi_msc_cbw_received+0x5a4>)
   865da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   865de:	6042      	str	r2, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
   865e0:	6801      	ldr	r1, [r0, #0]
   865e2:	ba0b      	rev	r3, r1
   865e4:	6003      	str	r3, [r0, #0]
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
   865e6:	f04f 0108 	mov.w	r1, #8
   865ea:	4a40      	ldr	r2, [pc, #256]	; (866ec <udi_msc_cbw_received+0x5a8>)
   865ec:	4790      	blx	r2
   865ee:	bd70      	pop	{r4, r5, r6, pc}
}


static void udi_msc_sbc_start_stop(void)
{
	bool start = 0x1 & udi_msc_cbw.CDB[4];
   865f0:	f241 41c8 	movw	r1, #5320	; 0x14c8
   865f4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   865f8:	7ccb      	ldrb	r3, [r1, #19]
	bool loej = 0x2 & udi_msc_cbw.CDB[4];
	if (loej) {
   865fa:	f003 0202 	and.w	r2, r3, #2
   865fe:	b2d1      	uxtb	r1, r2
   86600:	b141      	cbz	r1, 86614 <udi_msc_cbw_received+0x4d0>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
   86602:	f083 0301 	eor.w	r3, r3, #1
   86606:	f003 0101 	and.w	r1, r3, #1
   8660a:	f245 22f9 	movw	r2, #21241	; 0x52f9
   8660e:	f2c0 0208 	movt	r2, #8
   86612:	4790      	blx	r2
	}
	udi_msc_sense_pass();
   86614:	f645 40d5 	movw	r0, #23765	; 0x5cd5
   86618:	f2c0 0008 	movt	r0, #8
   8661c:	4780      	blx	r0
	udi_msc_csw_process();
   8661e:	f645 51ed 	movw	r1, #24045	; 0x5ded
   86622:	f2c0 0108 	movt	r1, #8
   86626:	4788      	blx	r1
   86628:	bd70      	pop	{r4, r5, r6, pc}
}


static void udi_msc_spc_prevent_allow_medium_removal(void)
{
	uint8_t prevent = udi_msc_cbw.CDB[4];
   8662a:	f241 40c8 	movw	r0, #5320	; 0x14c8
   8662e:	f2c2 0007 	movt	r0, #8199	; 0x2007
	if (0 == prevent) {
   86632:	7cc1      	ldrb	r1, [r0, #19]
   86634:	b929      	cbnz	r1, 86642 <udi_msc_cbw_received+0x4fe>
		udi_msc_sense_pass();
   86636:	f645 42d5 	movw	r2, #23765	; 0x5cd5
   8663a:	f2c0 0208 	movt	r2, #8
   8663e:	4790      	blx	r2
   86640:	e004      	b.n	8664c <udi_msc_cbw_received+0x508>
	} else {
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
   86642:	f645 5389 	movw	r3, #23945	; 0x5d89
   86646:	f2c0 0308 	movt	r3, #8
   8664a:	4798      	blx	r3
	}
	udi_msc_csw_process();
   8664c:	f645 50ed 	movw	r0, #24045	; 0x5ded
   86650:	f2c0 0008 	movt	r0, #8
   86654:	4780      	blx	r0
   86656:	bd70      	pop	{r4, r5, r6, pc}
		udi_msc_spc_prevent_allow_medium_removal();
		break;

		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
   86658:	f645 40d5 	movw	r0, #23765	; 0x5cd5
   8665c:	f2c0 0008 	movt	r0, #8
   86660:	4780      	blx	r0
		udi_msc_csw_process();
   86662:	f645 51ed 	movw	r1, #24045	; 0x5ded
   86666:	f2c0 0108 	movt	r1, #8
   8666a:	4788      	blx	r1
		break;
   8666c:	bd70      	pop	{r4, r5, r6, pc}

	case SBC_READ10:
		udi_msc_sbc_trans(true);
   8666e:	f04f 0001 	mov.w	r0, #1
   86672:	f246 02a1 	movw	r2, #24737	; 0x60a1
   86676:	f2c0 0208 	movt	r2, #8
   8667a:	4790      	blx	r2
		break;
   8667c:	bd70      	pop	{r4, r5, r6, pc}

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
   8667e:	f04f 0000 	mov.w	r0, #0
   86682:	f246 03a1 	movw	r3, #24737	; 0x60a1
   86686:	f2c0 0308 	movt	r3, #8
   8668a:	4798      	blx	r3
		break;
   8668c:	bd70      	pop	{r4, r5, r6, pc}
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}

static void udi_msc_sense_command_invalid(void)
{
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
   8668e:	f04f 0005 	mov.w	r0, #5
   86692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   86696:	f04f 0200 	mov.w	r2, #0
   8669a:	f645 43f1 	movw	r3, #23793	; 0x5cf1
   8669e:	f2c0 0308 	movt	r3, #8
   866a2:	4798      	blx	r3
		udi_msc_sbc_trans(false);
		break;

	default:
		udi_msc_sense_command_invalid();
		udi_msc_csw_process();
   866a4:	f645 52ed 	movw	r2, #24045	; 0x5ded
   866a8:	f2c0 0208 	movt	r2, #8
   866ac:	4790      	blx	r2
		break;
   866ae:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
   866b0:	f04f 0300 	mov.w	r3, #0
   866b4:	e6ff      	b.n	864b6 <udi_msc_cbw_received+0x372>
   866b6:	f04f 0300 	mov.w	r3, #0
   866ba:	e6fc      	b.n	864b6 <udi_msc_cbw_received+0x372>
   866bc:	bd70      	pop	{r4, r5, r6, pc}
   866be:	b240      	sxtb	r0, r0
   866c0:	2800      	cmp	r0, #0
   866c2:	f43f af0a 	beq.w	864da <udi_msc_cbw_received+0x396>
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		udi_msc_inquiry_data.product_id[i] = ' ';
   866c6:	18c8      	adds	r0, r1, r3
   866c8:	7402      	strb	r2, [r0, #16]
		i++;
   866ca:	f103 0301 	add.w	r3, r3, #1
   866ce:	b2db      	uxtb	r3, r3
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   866d0:	2b10      	cmp	r3, #16
   866d2:	f47f af02 	bne.w	864da <udi_msc_cbw_received+0x396>
   866d6:	e70d      	b.n	864f4 <udi_msc_cbw_received+0x3b0>
   866d8:	00085d39 	.word	0x00085d39
   866dc:	00085ded 	.word	0x00085ded
   866e0:	00085d55 	.word	0x00085d55
   866e4:	00085d71 	.word	0x00085d71
   866e8:	20071520 	.word	0x20071520
   866ec:	00085e7d 	.word	0x00085e7d

000866f0 <udi_msc_setup>:
	UDI_MSC_DISABLE_EXT();
}


bool udi_msc_setup(void)
{
   866f0:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
   866f2:	f641 43ac 	movw	r3, #7340	; 0x1cac
   866f6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   866fa:	7818      	ldrb	r0, [r3, #0]
   866fc:	f010 0f80 	tst.w	r0, #128	; 0x80
   86700:	d025      	beq.n	8674e <udi_msc_setup+0x5e>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   86702:	f000 0260 	and.w	r2, r0, #96	; 0x60
   86706:	2a20      	cmp	r2, #32
   86708:	d156      	bne.n	867b8 <udi_msc_setup+0xc8>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   8670a:	f641 43ac 	movw	r3, #7340	; 0x1cac
   8670e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86712:	7858      	ldrb	r0, [r3, #1]
   86714:	28fe      	cmp	r0, #254	; 0xfe
   86716:	d152      	bne.n	867be <udi_msc_setup+0xce>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
   86718:	f641 41ac 	movw	r1, #7340	; 0x1cac
   8671c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86720:	88ca      	ldrh	r2, [r1, #6]
   86722:	2a01      	cmp	r2, #1
   86724:	d14e      	bne.n	867c4 <udi_msc_setup+0xd4>
					return false;	// Error for USB host
				if (0 != udd_g_ctrlreq.req.wValue)
   86726:	f641 43ac 	movw	r3, #7340	; 0x1cac
   8672a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8672e:	8858      	ldrh	r0, [r3, #2]
   86730:	2800      	cmp	r0, #0
   86732:	d14a      	bne.n	867ca <udi_msc_setup+0xda>
					return false;
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
   86734:	f641 41ac 	movw	r1, #7340	; 0x1cac
   86738:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8673c:	f241 42c0 	movw	r2, #5312	; 0x14c0
   86740:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86744:	608a      	str	r2, [r1, #8]
				udd_g_ctrlreq.payload_size = 1;
   86746:	f04f 0001 	mov.w	r0, #1
   8674a:	8188      	strh	r0, [r1, #12]
				return true;
   8674c:	bd10      	pop	{r4, pc}
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8674e:	f000 0160 	and.w	r1, r0, #96	; 0x60
   86752:	2920      	cmp	r1, #32
   86754:	d13c      	bne.n	867d0 <udi_msc_setup+0xe0>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   86756:	f641 42ac 	movw	r2, #7340	; 0x1cac
   8675a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8675e:	7853      	ldrb	r3, [r2, #1]
   86760:	2bff      	cmp	r3, #255	; 0xff
   86762:	d138      	bne.n	867d6 <udi_msc_setup+0xe6>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
   86764:	f641 40ac 	movw	r0, #7340	; 0x1cac
   86768:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8676c:	88c1      	ldrh	r1, [r0, #6]
   8676e:	2900      	cmp	r1, #0
   86770:	d134      	bne.n	867dc <udi_msc_setup+0xec>
					return false;
				if (0 != udd_g_ctrlreq.req.wValue)
   86772:	f641 42ac 	movw	r2, #7340	; 0x1cac
   86776:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8677a:	8853      	ldrh	r3, [r2, #2]
   8677c:	2b00      	cmp	r3, #0
   8677e:	d130      	bne.n	867e2 <udi_msc_setup+0xf2>
					return false;
				udi_msc_b_cbw_invalid = false;
   86780:	f241 44e8 	movw	r4, #5352	; 0x14e8
   86784:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86788:	7023      	strb	r3, [r4, #0]
				udi_msc_b_trans_req = false;
   8678a:	f241 40c4 	movw	r0, #5316	; 0x14c4
   8678e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86792:	7003      	strb	r3, [r0, #0]
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
   86794:	f04f 0002 	mov.w	r0, #2
   86798:	f249 7459 	movw	r4, #38745	; 0x9759
   8679c:	f2c0 0408 	movt	r4, #8
   867a0:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
   867a2:	f04f 0081 	mov.w	r0, #129	; 0x81
   867a6:	47a0      	blx	r4
				// Restart by CBW wait
				udi_msc_cbw_wait();
   867a8:	f645 61e9 	movw	r1, #24297	; 0x5ee9
   867ac:	f2c0 0108 	movt	r1, #8
   867b0:	4788      	blx	r1
				return true;
   867b2:	f04f 0001 	mov.w	r0, #1
   867b6:	bd10      	pop	{r4, pc}
			}
		}
	}
	return false;	// Not supported request
   867b8:	f04f 0000 	mov.w	r0, #0
   867bc:	bd10      	pop	{r4, pc}
   867be:	f04f 0000 	mov.w	r0, #0
   867c2:	bd10      	pop	{r4, pc}
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
   867c4:	f04f 0000 	mov.w	r0, #0
   867c8:	bd10      	pop	{r4, pc}
				if (0 != udd_g_ctrlreq.req.wValue)
					return false;
   867ca:	f04f 0000 	mov.w	r0, #0
   867ce:	bd10      	pop	{r4, pc}
				udi_msc_cbw_wait();
				return true;
			}
		}
	}
	return false;	// Not supported request
   867d0:	f04f 0000 	mov.w	r0, #0
   867d4:	bd10      	pop	{r4, pc}
   867d6:	f04f 0000 	mov.w	r0, #0
   867da:	bd10      	pop	{r4, pc}
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
   867dc:	f04f 0000 	mov.w	r0, #0
   867e0:	bd10      	pop	{r4, pc}
				if (0 != udd_g_ctrlreq.req.wValue)
					return false;
   867e2:	f04f 0000 	mov.w	r0, #0
				return true;
			}
		}
	}
	return false;	// Not supported request
}
   867e6:	bd10      	pop	{r4, pc}

000867e8 <udi_msc_disable>:
	return true;
}


void udi_msc_disable(void)
{
   867e8:	b508      	push	{r3, lr}
	udi_msc_b_trans_req = false;
   867ea:	f241 43c4 	movw	r3, #5316	; 0x14c4
   867ee:	f2c2 0307 	movt	r3, #8199	; 0x2007
   867f2:	f04f 0200 	mov.w	r2, #0
   867f6:	701a      	strb	r2, [r3, #0]
	UDI_MSC_DISABLE_EXT();
   867f8:	f649 509d 	movw	r0, #40349	; 0x9d9d
   867fc:	f2c0 0008 	movt	r0, #8
   86800:	4780      	blx	r0
   86802:	bd08      	pop	{r3, pc}

00086804 <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
   86804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t lun;
	udi_msc_b_trans_req = false;
   86806:	f04f 0300 	mov.w	r3, #0
   8680a:	f241 42c4 	movw	r2, #5316	; 0x14c4
   8680e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86812:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
   86814:	f241 40e8 	movw	r0, #5352	; 0x14e8
   86818:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8681c:	7003      	strb	r3, [r0, #0]
	udi_msc_nb_lun = get_nb_lun();
   8681e:	f245 21c1 	movw	r1, #21185	; 0x52c1
   86822:	f2c0 0108 	movt	r1, #8
   86826:	4788      	blx	r1
	if (0 == udi_msc_nb_lun)
   86828:	b928      	cbnz	r0, 86836 <udi_msc_enable+0x32>
bool udi_msc_enable(void)
{
	uint8_t lun;
	udi_msc_b_trans_req = false;
	udi_msc_b_cbw_invalid = false;
	udi_msc_nb_lun = get_nb_lun();
   8682a:	f241 42c0 	movw	r2, #5312	; 0x14c0
   8682e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86832:	7010      	strb	r0, [r2, #0]
   86834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (0 == udi_msc_nb_lun)
		return false; // No lun available, then not authorize to enable interface
	udi_msc_nb_lun--;
   86836:	f100 30ff 	add.w	r0, r0, #4294967295
   8683a:	f241 42c0 	movw	r2, #5312	; 0x14c0
   8683e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86842:	7010      	strb	r0, [r2, #0]
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
   86844:	f649 518d 	movw	r1, #40333	; 0x9d8d
   86848:	f2c0 0108 	movt	r1, #8
   8684c:	4788      	blx	r1
   8684e:	b1d8      	cbz	r0, 86888 <udi_msc_enable+0x84>
   86850:	f04f 0400 	mov.w	r4, #0
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
		mem_unload(lun, false);
   86854:	4627      	mov	r7, r4
   86856:	f245 26f9 	movw	r6, #21241	; 0x52f9
   8685a:	f2c0 0608 	movt	r6, #8
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
   8685e:	f241 45c0 	movw	r5, #5312	; 0x14c0
   86862:	f2c2 0507 	movt	r5, #8199	; 0x2007
		mem_unload(lun, false);
   86866:	4620      	mov	r0, r4
   86868:	4639      	mov	r1, r7
   8686a:	47b0      	blx	r6
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
   8686c:	f104 0401 	add.w	r4, r4, #1
   86870:	b2e4      	uxtb	r4, r4
   86872:	782b      	ldrb	r3, [r5, #0]
   86874:	42a3      	cmp	r3, r4
   86876:	d2f6      	bcs.n	86866 <udi_msc_enable+0x62>
		mem_unload(lun, false);
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
   86878:	f645 60e9 	movw	r0, #24297	; 0x5ee9
   8687c:	f2c0 0008 	movt	r0, #8
   86880:	4780      	blx	r0
	return true;
   86882:	f04f 0001 	mov.w	r0, #1
   86886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // No lun available, then not authorize to enable interface
	udi_msc_nb_lun--;
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
   86888:	f04f 0000 	mov.w	r0, #0
		mem_unload(lun, false);
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
	return true;
}
   8688c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8688e:	bf00      	nop

00086890 <udi_msc_process_trans>:
	UDI_MSC_NOTIFY_TRANS_EXT();
}


bool udi_msc_process_trans(void)
{
   86890:	b508      	push	{r3, lr}
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
   86892:	f241 43c4 	movw	r3, #5316	; 0x14c4
   86896:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8689a:	7818      	ldrb	r0, [r3, #0]
   8689c:	2800      	cmp	r0, #0
   8689e:	d059      	beq.n	86954 <udi_msc_process_trans+0xc4>
		return false;	// No Transfer request to do
	udi_msc_b_trans_req = false;
   868a0:	f241 41c4 	movw	r1, #5316	; 0x14c4
   868a4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   868a8:	f04f 0200 	mov.w	r2, #0
   868ac:	700a      	strb	r2, [r1, #0]

	// Start transfer
	if (udi_msc_b_read) {
   868ae:	f241 531c 	movw	r3, #5404	; 0x151c
   868b2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   868b6:	7818      	ldrb	r0, [r3, #0]
   868b8:	b1a0      	cbz	r0, 868e4 <udi_msc_process_trans+0x54>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
   868ba:	f241 40c8 	movw	r0, #5320	; 0x14c8
   868be:	f2c2 0007 	movt	r0, #8199	; 0x2007
   868c2:	7b40      	ldrb	r0, [r0, #13]
   868c4:	f241 5104 	movw	r1, #5380	; 0x1504
   868c8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   868cc:	6809      	ldr	r1, [r1, #0]
   868ce:	f241 5200 	movw	r2, #5376	; 0x1500
   868d2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   868d6:	8812      	ldrh	r2, [r2, #0]
   868d8:	f245 334d 	movw	r3, #21325	; 0x534d
   868dc:	f2c0 0308 	movt	r3, #8
   868e0:	4798      	blx	r3
   868e2:	e013      	b.n	8690c <udi_msc_process_trans+0x7c>
				udi_msc_nb_block);
	} else {
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
   868e4:	f241 41c8 	movw	r1, #5320	; 0x14c8
   868e8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   868ec:	7b48      	ldrb	r0, [r1, #13]
   868ee:	f241 5204 	movw	r2, #5380	; 0x1504
   868f2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   868f6:	6811      	ldr	r1, [r2, #0]
   868f8:	f241 5300 	movw	r3, #5376	; 0x1500
   868fc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86900:	881a      	ldrh	r2, [r3, #0]
   86902:	f245 3369 	movw	r3, #21353	; 0x5369
   86906:	f2c0 0308 	movt	r3, #8
   8690a:	4798      	blx	r3
				udi_msc_nb_block);
	}

	// Check status of transfer
	switch (status) {
   8690c:	2802      	cmp	r0, #2
   8690e:	d00e      	beq.n	8692e <udi_msc_process_trans+0x9e>
   86910:	2803      	cmp	r0, #3
   86912:	d006      	beq.n	86922 <udi_msc_process_trans+0x92>
   86914:	b988      	cbnz	r0, 8693a <udi_msc_process_trans+0xaa>
	case CTRL_GOOD:
		udi_msc_sense_pass();
   86916:	f645 41d5 	movw	r1, #23765	; 0x5cd5
   8691a:	f2c0 0108 	movt	r1, #8
   8691e:	4788      	blx	r1
		break;
   86920:	e010      	b.n	86944 <udi_msc_process_trans+0xb4>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   86922:	f645 5239 	movw	r2, #23865	; 0x5d39
   86926:	f2c0 0208 	movt	r2, #8
   8692a:	4790      	blx	r2
		break;
   8692c:	e00a      	b.n	86944 <udi_msc_process_trans+0xb4>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   8692e:	f645 5355 	movw	r3, #23893	; 0x5d55
   86932:	f2c0 0308 	movt	r3, #8
   86936:	4798      	blx	r3
		break;
   86938:	e004      	b.n	86944 <udi_msc_process_trans+0xb4>
	default:
	case CTRL_FAIL:
		udi_msc_sense_fail_hardware();
   8693a:	f645 5071 	movw	r0, #23921	; 0x5d71
   8693e:	f2c0 0008 	movt	r0, #8
   86942:	4780      	blx	r0
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
   86944:	f645 50ed 	movw	r0, #24045	; 0x5ded
   86948:	f2c0 0008 	movt	r0, #8
   8694c:	4780      	blx	r0
	return true;
   8694e:	f04f 0001 	mov.w	r0, #1
   86952:	bd08      	pop	{r3, pc}
bool udi_msc_process_trans(void)
{
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
		return false;	// No Transfer request to do
   86954:	f04f 0000 	mov.w	r0, #0
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
	return true;
}
   86958:	bd08      	pop	{r3, pc}
   8695a:	bf00      	nop

0008695c <udi_msc_trans_block>:
}


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
   8695c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8695e:	b083      	sub	sp, #12
   86960:	460f      	mov	r7, r1
   86962:	4615      	mov	r5, r2
	if (!udi_msc_b_ack_trans)
   86964:	f240 2414 	movw	r4, #532	; 0x214
   86968:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8696c:	7824      	ldrb	r4, [r4, #0]
   8696e:	2c00      	cmp	r4, #0
   86970:	d03d      	beq.n	869ee <udi_msc_trans_block+0x92>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
   86972:	f240 2114 	movw	r1, #532	; 0x214
   86976:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8697a:	f04f 0600 	mov.w	r6, #0
   8697e:	700e      	strb	r6, [r1, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
   86980:	42b0      	cmp	r0, r6
   86982:	bf0c      	ite	eq
   86984:	2002      	moveq	r0, #2
   86986:	2081      	movne	r0, #129	; 0x81
   86988:	2b00      	cmp	r3, #0
   8698a:	d141      	bne.n	86a10 <udi_msc_trans_block+0xb4>
   8698c:	e035      	b.n	869fa <udi_msc_trans_block+0x9e>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
   8698e:	f240 2314 	movw	r3, #532	; 0x214
   86992:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86996:	f04f 0001 	mov.w	r0, #1
   8699a:	7018      	strb	r0, [r3, #0]
		return false;
   8699c:	f04f 0000 	mov.w	r0, #0
   869a0:	e040      	b.n	86a24 <udi_msc_trans_block+0xc8>
	}
	if (NULL == callback) {
		while (!udi_msc_b_ack_trans);
   869a2:	f240 2214 	movw	r2, #532	; 0x214
   869a6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   869aa:	7810      	ldrb	r0, [r2, #0]
   869ac:	2800      	cmp	r0, #0
   869ae:	d0fc      	beq.n	869aa <udi_msc_trans_block+0x4e>
		if (udi_msc_b_abort_trans) {
   869b0:	f641 41a9 	movw	r1, #7337	; 0x1ca9
   869b4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   869b8:	780b      	ldrb	r3, [r1, #0]
   869ba:	b9db      	cbnz	r3, 869f4 <udi_msc_trans_block+0x98>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
   869bc:	f240 2050 	movw	r0, #592	; 0x250
   869c0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   869c4:	6882      	ldr	r2, [r0, #8]
   869c6:	1b51      	subs	r1, r2, r5
   869c8:	6081      	str	r1, [r0, #8]
		return (!udi_msc_b_abort_trans);
   869ca:	f641 43a9 	movw	r3, #7337	; 0x1ca9
   869ce:	f2c2 0307 	movt	r3, #8199	; 0x2007
   869d2:	7818      	ldrb	r0, [r3, #0]
   869d4:	f080 0001 	eor.w	r0, r0, #1
   869d8:	e024      	b.n	86a24 <udi_msc_trans_block+0xc8>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
   869da:	f240 2150 	movw	r1, #592	; 0x250
   869de:	f2c2 0107 	movt	r1, #8199	; 0x2007
   869e2:	688a      	ldr	r2, [r1, #8]
   869e4:	1b55      	subs	r5, r2, r5
   869e6:	608d      	str	r5, [r1, #8]
	return true;
   869e8:	f04f 0001 	mov.w	r0, #1
   869ec:	e01a      	b.n	86a24 <udi_msc_trans_block+0xc8>

bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
	if (!udi_msc_b_ack_trans)
		return false;	// No possible, transfer on going
   869ee:	f04f 0000 	mov.w	r0, #0
   869f2:	e017      	b.n	86a24 <udi_msc_trans_block+0xc8>
		return false;
	}
	if (NULL == callback) {
		while (!udi_msc_b_ack_trans);
		if (udi_msc_b_abort_trans) {
			return false;
   869f4:	f04f 0000 	mov.w	r0, #0
   869f8:	e014      	b.n	86a24 <udi_msc_trans_block+0xc8>
	if (!udi_msc_b_ack_trans)
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
   869fa:	4b0b      	ldr	r3, [pc, #44]	; (86a28 <udi_msc_trans_block+0xcc>)
   869fc:	9300      	str	r3, [sp, #0]
   869fe:	f04f 0100 	mov.w	r1, #0
   86a02:	463a      	mov	r2, r7
   86a04:	462b      	mov	r3, r5
   86a06:	4c09      	ldr	r4, [pc, #36]	; (86a2c <udi_msc_trans_block+0xd0>)
   86a08:	47a0      	blx	r4
   86a0a:	2800      	cmp	r0, #0
   86a0c:	d1c9      	bne.n	869a2 <udi_msc_trans_block+0x46>
   86a0e:	e7be      	b.n	8698e <udi_msc_trans_block+0x32>
   86a10:	9300      	str	r3, [sp, #0]
   86a12:	f04f 0100 	mov.w	r1, #0
   86a16:	463a      	mov	r2, r7
   86a18:	462b      	mov	r3, r5
   86a1a:	4c04      	ldr	r4, [pc, #16]	; (86a2c <udi_msc_trans_block+0xd0>)
   86a1c:	47a0      	blx	r4
   86a1e:	2800      	cmp	r0, #0
   86a20:	d1db      	bne.n	869da <udi_msc_trans_block+0x7e>
   86a22:	e7b4      	b.n	8698e <udi_msc_trans_block+0x32>
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
	return true;
}
   86a24:	b003      	add	sp, #12
   86a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86a28:	00085c85 	.word	0x00085c85
   86a2c:	00089151 	.word	0x00089151

00086a30 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   86a30:	f241 532c 	movw	r3, #5420	; 0x152c
   86a34:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86a38:	6818      	ldr	r0, [r3, #0]
   86a3a:	6801      	ldr	r1, [r0, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   86a3c:	884a      	ldrh	r2, [r1, #2]
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
   86a3e:	1888      	adds	r0, r1, r2
   86a40:	4770      	bx	lr
   86a42:	bf00      	nop

00086a44 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   86a44:	b538      	push	{r3, r4, r5, lr}
   86a46:	4605      	mov	r5, r0
   86a48:	460c      	mov	r4, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   86a4a:	f646 2331 	movw	r3, #27185	; 0x6a31
   86a4e:	f2c0 0308 	movt	r3, #8
   86a52:	4798      	blx	r3
   86a54:	4602      	mov	r2, r0
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   86a56:	7828      	ldrb	r0, [r5, #0]
   86a58:	1828      	adds	r0, r5, r0
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   86a5a:	4282      	cmp	r2, r0
   86a5c:	d911      	bls.n	86a82 <udc_next_desc_in_iface+0x3e>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   86a5e:	7841      	ldrb	r1, [r0, #1]
   86a60:	2904      	cmp	r1, #4
   86a62:	d011      	beq.n	86a88 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   86a64:	42a1      	cmp	r1, r4
   86a66:	d105      	bne.n	86a74 <udc_next_desc_in_iface+0x30>
   86a68:	bd38      	pop	{r3, r4, r5, pc}
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   86a6a:	7841      	ldrb	r1, [r0, #1]
   86a6c:	2904      	cmp	r1, #4
   86a6e:	d00e      	beq.n	86a8e <udc_next_desc_in_iface+0x4a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   86a70:	42a1      	cmp	r1, r4
   86a72:	d00e      	beq.n	86a92 <udc_next_desc_in_iface+0x4e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   86a74:	7803      	ldrb	r3, [r0, #0]
   86a76:	18c0      	adds	r0, r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   86a78:	4282      	cmp	r2, r0
   86a7a:	d8f6      	bhi.n	86a6a <udc_next_desc_in_iface+0x26>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
   86a7c:	f04f 0000 	mov.w	r0, #0
   86a80:	bd38      	pop	{r3, r4, r5, pc}
   86a82:	f04f 0000 	mov.w	r0, #0
   86a86:	bd38      	pop	{r3, r4, r5, pc}
   86a88:	f04f 0000 	mov.w	r0, #0
   86a8c:	bd38      	pop	{r3, r4, r5, pc}
   86a8e:	f04f 0000 	mov.w	r0, #0
}
   86a92:	bd38      	pop	{r3, r4, r5, pc}

00086a94 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   86a94:	b570      	push	{r4, r5, r6, lr}
   86a96:	4605      	mov	r5, r0
   86a98:	460e      	mov	r6, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   86a9a:	f241 5332 	movw	r3, #5426	; 0x1532
   86a9e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86aa2:	7818      	ldrb	r0, [r3, #0]
   86aa4:	2800      	cmp	r0, #0
   86aa6:	d031      	beq.n	86b0c <udc_update_iface_desc+0x78>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   86aa8:	f241 512c 	movw	r1, #5420	; 0x152c
   86aac:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86ab0:	680a      	ldr	r2, [r1, #0]
   86ab2:	6814      	ldr	r4, [r2, #0]
   86ab4:	7923      	ldrb	r3, [r4, #4]
   86ab6:	42ab      	cmp	r3, r5
   86ab8:	d92b      	bls.n	86b12 <udc_update_iface_desc+0x7e>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   86aba:	f241 5034 	movw	r0, #5428	; 0x1534
   86abe:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86ac2:	6004      	str	r4, [r0, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   86ac4:	f646 2131 	movw	r1, #27185	; 0x6a31
   86ac8:	f2c0 0108 	movt	r1, #8
   86acc:	4788      	blx	r1
	while (ptr_end_desc >
   86ace:	4284      	cmp	r4, r0
   86ad0:	d222      	bcs.n	86b18 <udc_update_iface_desc+0x84>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   86ad2:	7862      	ldrb	r2, [r4, #1]
   86ad4:	2a04      	cmp	r2, #4
   86ad6:	d10d      	bne.n	86af4 <udc_update_iface_desc+0x60>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   86ad8:	78a3      	ldrb	r3, [r4, #2]
   86ada:	42ab      	cmp	r3, r5
   86adc:	d10a      	bne.n	86af4 <udc_update_iface_desc+0x60>
   86ade:	78e1      	ldrb	r1, [r4, #3]
   86ae0:	42b1      	cmp	r1, r6
   86ae2:	d107      	bne.n	86af4 <udc_update_iface_desc+0x60>
   86ae4:	f241 5334 	movw	r3, #5428	; 0x1534
   86ae8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86aec:	601c      	str	r4, [r3, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
   86aee:	f04f 0001 	mov.w	r0, #1
   86af2:	bd70      	pop	{r4, r5, r6, pc}
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   86af4:	7822      	ldrb	r2, [r4, #0]
   86af6:	18a4      	adds	r4, r4, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
   86af8:	42a0      	cmp	r0, r4
   86afa:	d8ea      	bhi.n	86ad2 <udc_update_iface_desc+0x3e>
   86afc:	f241 5034 	movw	r0, #5428	; 0x1534
   86b00:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86b04:	6004      	str	r4, [r0, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   86b06:	f04f 0000 	mov.w	r0, #0
   86b0a:	bd70      	pop	{r4, r5, r6, pc}
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
   86b0c:	f04f 0000 	mov.w	r0, #0
   86b10:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   86b12:	f04f 0000 	mov.w	r0, #0
   86b16:	bd70      	pop	{r4, r5, r6, pc}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   86b18:	f04f 0000 	mov.w	r0, #0
}
   86b1c:	bd70      	pop	{r4, r5, r6, pc}
   86b1e:	bf00      	nop

00086b20 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   86b20:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   86b22:	f641 43ac 	movw	r3, #7340	; 0x1cac
   86b26:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86b2a:	8858      	ldrh	r0, [r3, #2]
   86b2c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   86b30:	f648 6149 	movw	r1, #36425	; 0x8e49
   86b34:	f2c0 0108 	movt	r1, #8
   86b38:	4788      	blx	r1
   86b3a:	bd08      	pop	{r3, pc}

00086b3c <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   86b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86b40:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   86b42:	f646 2395 	movw	r3, #27285	; 0x6a95
   86b46:	f2c0 0308 	movt	r3, #8
   86b4a:	4798      	blx	r3
   86b4c:	b338      	cbz	r0, 86b9e <udc_iface_enable+0x62>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   86b4e:	f241 5034 	movw	r0, #5428	; 0x1534
   86b52:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86b56:	6804      	ldr	r4, [r0, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   86b58:	f04f 0605 	mov.w	r6, #5
   86b5c:	f646 2545 	movw	r5, #27205	; 0x6a45
   86b60:	f2c0 0508 	movt	r5, #8
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   86b64:	f249 2755 	movw	r7, #37461	; 0x9255
   86b68:	f2c0 0708 	movt	r7, #8

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   86b6c:	4620      	mov	r0, r4
   86b6e:	4631      	mov	r1, r6
   86b70:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   86b72:	4604      	mov	r4, r0
   86b74:	b138      	cbz	r0, 86b86 <udc_iface_enable+0x4a>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   86b76:	7880      	ldrb	r0, [r0, #2]
   86b78:	78e1      	ldrb	r1, [r4, #3]
   86b7a:	88a2      	ldrh	r2, [r4, #4]
   86b7c:	47b8      	blx	r7
   86b7e:	2800      	cmp	r0, #0
   86b80:	d1f4      	bne.n	86b6c <udc_iface_enable+0x30>
   86b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   86b86:	f241 512c 	movw	r1, #5420	; 0x152c
   86b8a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86b8e:	680a      	ldr	r2, [r1, #0]
   86b90:	6853      	ldr	r3, [r2, #4]
   86b92:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
   86b96:	6801      	ldr	r1, [r0, #0]
   86b98:	4788      	blx	r1
   86b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
		return false;
   86b9e:	f04f 0000 	mov.w	r0, #0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
   86ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86ba6:	bf00      	nop

00086ba8 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   86ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86bac:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   86bae:	f04f 0100 	mov.w	r1, #0
   86bb2:	f646 2395 	movw	r3, #27285	; 0x6a95
   86bb6:	f2c0 0308 	movt	r3, #8
   86bba:	4798      	blx	r3
   86bbc:	2800      	cmp	r0, #0
   86bbe:	d030      	beq.n	86c22 <udc_iface_disable+0x7a>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   86bc0:	f241 502c 	movw	r0, #5420	; 0x152c
   86bc4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86bc8:	6801      	ldr	r1, [r0, #0]
   86bca:	684a      	ldr	r2, [r1, #4]
   86bcc:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   86bd0:	f8d8 300c 	ldr.w	r3, [r8, #12]
   86bd4:	4798      	blx	r3
   86bd6:	4601      	mov	r1, r0
   86bd8:	4620      	mov	r0, r4
   86bda:	f646 2295 	movw	r2, #27285	; 0x6a95
   86bde:	f2c0 0208 	movt	r2, #8
   86be2:	4790      	blx	r2
   86be4:	b308      	cbz	r0, 86c2a <udc_iface_disable+0x82>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   86be6:	f241 5434 	movw	r4, #5428	; 0x1534
   86bea:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86bee:	6824      	ldr	r4, [r4, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   86bf0:	f04f 0605 	mov.w	r6, #5
   86bf4:	f646 2545 	movw	r5, #27205	; 0x6a45
   86bf8:	f2c0 0508 	movt	r5, #8
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   86bfc:	f648 67b9 	movw	r7, #36537	; 0x8eb9
   86c00:	f2c0 0708 	movt	r7, #8
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   86c04:	4620      	mov	r0, r4
   86c06:	4631      	mov	r1, r6
   86c08:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   86c0a:	4604      	mov	r4, r0
   86c0c:	b110      	cbz	r0, 86c14 <udc_iface_disable+0x6c>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   86c0e:	7880      	ldrb	r0, [r0, #2]
   86c10:	47b8      	blx	r7
		}
   86c12:	e7f7      	b.n	86c04 <udc_iface_disable+0x5c>
	}
#endif

	// Disable interface
	udi_api->disable();
   86c14:	f8d8 0004 	ldr.w	r0, [r8, #4]
   86c18:	4780      	blx	r0
	return true;
   86c1a:	f04f 0001 	mov.w	r0, #1
   86c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
   86c22:	f04f 0000 	mov.w	r0, #0
   86c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
		return false;
   86c2a:	f04f 0000 	mov.w	r0, #0
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
   86c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86c32:	bf00      	nop

00086c34 <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   86c34:	b508      	push	{r3, lr}
	udd_enable();
   86c36:	f647 73f1 	movw	r3, #32753	; 0x7ff1
   86c3a:	f2c0 0308 	movt	r3, #8
   86c3e:	4798      	blx	r3
   86c40:	bd08      	pop	{r3, pc}
   86c42:	bf00      	nop

00086c44 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   86c44:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   86c46:	f241 5332 	movw	r3, #5426	; 0x1532
   86c4a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86c4e:	7818      	ldrb	r0, [r3, #0]
   86c50:	b1d8      	cbz	r0, 86c8a <udc_reset+0x46>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86c52:	f241 512c 	movw	r1, #5420	; 0x152c
   86c56:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86c5a:	680a      	ldr	r2, [r1, #0]
   86c5c:	6813      	ldr	r3, [r2, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   86c5e:	7918      	ldrb	r0, [r3, #4]
   86c60:	b198      	cbz	r0, 86c8a <udc_reset+0x46>
   86c62:	f04f 0400 	mov.w	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   86c66:	f646 36a9 	movw	r6, #27561	; 0x6ba9
   86c6a:	f2c0 0608 	movt	r6, #8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86c6e:	f241 552c 	movw	r5, #5420	; 0x152c
   86c72:	f2c2 0507 	movt	r5, #8199	; 0x2007
				iface_num++) {
			udc_iface_disable(iface_num);
   86c76:	4620      	mov	r0, r4
   86c78:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   86c7a:	f104 0401 	add.w	r4, r4, #1
   86c7e:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86c80:	6829      	ldr	r1, [r5, #0]
   86c82:	680a      	ldr	r2, [r1, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   86c84:	7913      	ldrb	r3, [r2, #4]
   86c86:	42a3      	cmp	r3, r4
   86c88:	d8f5      	bhi.n	86c76 <udc_reset+0x32>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
   86c8a:	f241 5032 	movw	r0, #5426	; 0x1532
   86c8e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86c92:	f04f 0100 	mov.w	r1, #0
   86c96:	7001      	strb	r1, [r0, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   86c98:	f241 5330 	movw	r3, #5424	; 0x1530
   86c9c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86ca0:	f04f 0201 	mov.w	r2, #1
   86ca4:	801a      	strh	r2, [r3, #0]
   86ca6:	bd70      	pop	{r4, r5, r6, pc}

00086ca8 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
   86ca8:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   86caa:	f241 5332 	movw	r3, #5426	; 0x1532
   86cae:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86cb2:	7818      	ldrb	r0, [r3, #0]
   86cb4:	b1d8      	cbz	r0, 86cee <udc_sof_notify+0x46>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86cb6:	f241 512c 	movw	r1, #5420	; 0x152c
   86cba:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86cbe:	680b      	ldr	r3, [r1, #0]
   86cc0:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   86cc2:	7910      	ldrb	r0, [r2, #4]
   86cc4:	b198      	cbz	r0, 86cee <udc_sof_notify+0x46>
   86cc6:	f04f 0400 	mov.w	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86cca:	f241 552c 	movw	r5, #5420	; 0x152c
   86cce:	f2c2 0507 	movt	r5, #8199	; 0x2007
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   86cd2:	685b      	ldr	r3, [r3, #4]
   86cd4:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   86cd8:	690a      	ldr	r2, [r1, #16]
   86cda:	b102      	cbz	r2, 86cde <udc_sof_notify+0x36>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   86cdc:	4790      	blx	r2
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   86cde:	f104 0401 	add.w	r4, r4, #1
   86ce2:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86ce4:	682b      	ldr	r3, [r5, #0]
   86ce6:	6818      	ldr	r0, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   86ce8:	7901      	ldrb	r1, [r0, #4]
   86cea:	42a1      	cmp	r1, r4
   86cec:	d8f1      	bhi.n	86cd2 <udc_sof_notify+0x2a>
   86cee:	bd38      	pop	{r3, r4, r5, pc}

00086cf0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   86cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   86cf2:	f641 43ac 	movw	r3, #7340	; 0x1cac
   86cf6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86cfa:	f04f 0200 	mov.w	r2, #0
   86cfe:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   86d00:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   86d02:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   86d04:	7818      	ldrb	r0, [r3, #0]
   86d06:	f010 0f80 	tst.w	r0, #128	; 0x80
   86d0a:	f000 83da 	beq.w	874c2 <udc_process_setup+0x7d2>
		if (udd_g_ctrlreq.req.wLength == 0) {
   86d0e:	f641 41ac 	movw	r1, #7340	; 0x1cac
   86d12:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86d16:	88ca      	ldrh	r2, [r1, #6]
   86d18:	2a00      	cmp	r2, #0
   86d1a:	f040 83d7 	bne.w	874cc <udc_process_setup+0x7dc>
   86d1e:	e3c4      	b.n	874aa <udc_process_setup+0x7ba>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   86d20:	f010 031f 	ands.w	r3, r0, #31
   86d24:	f040 8115 	bne.w	86f52 <udc_process_setup+0x262>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   86d28:	f641 40ac 	movw	r0, #7340	; 0x1cac
   86d2c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86d30:	7841      	ldrb	r1, [r0, #1]
   86d32:	2906      	cmp	r1, #6
   86d34:	d018      	beq.n	86d68 <udc_process_setup+0x78>
   86d36:	2908      	cmp	r1, #8
   86d38:	f000 80f8 	beq.w	86f2c <udc_process_setup+0x23c>
   86d3c:	2900      	cmp	r1, #0
   86d3e:	f040 8108 	bne.w	86f52 <udc_process_setup+0x262>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   86d42:	2a02      	cmp	r2, #2
   86d44:	d10d      	bne.n	86d62 <udc_process_setup+0x72>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   86d46:	f241 5030 	movw	r0, #5424	; 0x1530
   86d4a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86d4e:	f04f 0102 	mov.w	r1, #2
   86d52:	f648 63a9 	movw	r3, #36521	; 0x8ea9
   86d56:	f2c0 0308 	movt	r3, #8
   86d5a:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   86d5c:	f04f 0001 	mov.w	r0, #1
   86d60:	e328      	b.n	873b4 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
   86d62:	f04f 0000 	mov.w	r0, #0
   86d66:	e325      	b.n	873b4 <udc_process_setup+0x6c4>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   86d68:	f641 44ac 	movw	r4, #7340	; 0x1cac
   86d6c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86d70:	8860      	ldrh	r0, [r4, #2]
   86d72:	b2c4      	uxtb	r4, r0

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   86d74:	ea4f 2110 	mov.w	r1, r0, lsr #8
   86d78:	f101 33ff 	add.w	r3, r1, #4294967295
   86d7c:	2b06      	cmp	r3, #6
   86d7e:	f200 80c3 	bhi.w	86f08 <udc_process_setup+0x218>
   86d82:	e8df f013 	tbh	[pc, r3, lsl #1]
   86d86:	0007      	.short	0x0007
   86d88:	0078001b 	.word	0x0078001b
   86d8c:	00c100c1 	.word	0x00c100c1
   86d90:	00510044 	.word	0x00510044
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   86d94:	f648 6231 	movw	r2, #36401	; 0x8e31
   86d98:	f2c0 0208 	movt	r2, #8
   86d9c:	4790      	blx	r2
   86d9e:	b930      	cbnz	r0, 86dae <udc_process_setup+0xbe>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
   86da0:	48a3      	ldr	r0, [pc, #652]	; (87030 <udc_process_setup+0x340>)
   86da2:	6883      	ldr	r3, [r0, #8]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
			udd_set_setup_payload(
   86da4:	4618      	mov	r0, r3
   86da6:	7819      	ldrb	r1, [r3, #0]
   86da8:	4aa2      	ldr	r2, [pc, #648]	; (87034 <udc_process_setup+0x344>)
   86daa:	4790      	blx	r2
   86dac:	e09c      	b.n	86ee8 <udc_process_setup+0x1f8>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
   86dae:	4ba0      	ldr	r3, [pc, #640]	; (87030 <udc_process_setup+0x340>)
   86db0:	6819      	ldr	r1, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
   86db2:	4608      	mov	r0, r1
   86db4:	7809      	ldrb	r1, [r1, #0]
   86db6:	4a9f      	ldr	r2, [pc, #636]	; (87034 <udc_process_setup+0x344>)
   86db8:	4790      	blx	r2
   86dba:	e095      	b.n	86ee8 <udc_process_setup+0x1f8>
		break;

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   86dbc:	f648 6131 	movw	r1, #36401	; 0x8e31
   86dc0:	f2c0 0108 	movt	r1, #8
   86dc4:	4788      	blx	r1
   86dc6:	b170      	cbz	r0, 86de6 <udc_process_setup+0xf6>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   86dc8:	4899      	ldr	r0, [pc, #612]	; (87030 <udc_process_setup+0x340>)
   86dca:	6881      	ldr	r1, [r0, #8]
   86dcc:	7c4a      	ldrb	r2, [r1, #17]
   86dce:	42a2      	cmp	r2, r4
   86dd0:	f240 809d 	bls.w	86f0e <udc_process_setup+0x21e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   86dd4:	4b96      	ldr	r3, [pc, #600]	; (87030 <udc_process_setup+0x340>)
   86dd6:	6918      	ldr	r0, [r3, #16]
   86dd8:	f850 1034 	ldr.w	r1, [r0, r4, lsl #3]
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   86ddc:	4608      	mov	r0, r1
   86dde:	8849      	ldrh	r1, [r1, #2]
   86de0:	4a94      	ldr	r2, [pc, #592]	; (87034 <udc_process_setup+0x344>)
   86de2:	4790      	blx	r2
   86de4:	e00d      	b.n	86e02 <udc_process_setup+0x112>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   86de6:	4b92      	ldr	r3, [pc, #584]	; (87030 <udc_process_setup+0x340>)
   86de8:	681a      	ldr	r2, [r3, #0]
   86dea:	7c50      	ldrb	r0, [r2, #17]
   86dec:	42a0      	cmp	r0, r4
   86dee:	f240 8091 	bls.w	86f14 <udc_process_setup+0x224>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   86df2:	498f      	ldr	r1, [pc, #572]	; (87030 <udc_process_setup+0x340>)
   86df4:	684b      	ldr	r3, [r1, #4]
   86df6:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   86dfa:	4610      	mov	r0, r2
   86dfc:	8851      	ldrh	r1, [r2, #2]
   86dfe:	4b8d      	ldr	r3, [pc, #564]	; (87034 <udc_process_setup+0x344>)
   86e00:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   86e02:	4b8d      	ldr	r3, [pc, #564]	; (87038 <udc_process_setup+0x348>)
   86e04:	6898      	ldr	r0, [r3, #8]
   86e06:	f04f 0102 	mov.w	r1, #2
   86e0a:	7041      	strb	r1, [r0, #1]
   86e0c:	e06c      	b.n	86ee8 <udc_process_setup+0x1f8>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
				udc_config.qualifier->bLength);
   86e0e:	f240 1370 	movw	r3, #368	; 0x170
   86e12:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86e16:	68d9      	ldr	r1, [r3, #12]
		break;

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   86e18:	4608      	mov	r0, r1
   86e1a:	7809      	ldrb	r1, [r1, #0]
   86e1c:	f648 62a9 	movw	r2, #36521	; 0x8ea9
   86e20:	f2c0 0208 	movt	r2, #8
   86e24:	4790      	blx	r2
   86e26:	e05f      	b.n	86ee8 <udc_process_setup+0x1f8>
				udc_config.qualifier->bLength);
		break;

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   86e28:	f648 6231 	movw	r2, #36401	; 0x8e31
   86e2c:	f2c0 0208 	movt	r2, #8
   86e30:	4790      	blx	r2
   86e32:	b968      	cbnz	r0, 86e50 <udc_process_setup+0x160>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   86e34:	4a7e      	ldr	r2, [pc, #504]	; (87030 <udc_process_setup+0x340>)
   86e36:	6890      	ldr	r0, [r2, #8]
   86e38:	7c41      	ldrb	r1, [r0, #17]
   86e3a:	42a1      	cmp	r1, r4
   86e3c:	d96d      	bls.n	86f1a <udc_process_setup+0x22a>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   86e3e:	4b7c      	ldr	r3, [pc, #496]	; (87030 <udc_process_setup+0x340>)
   86e40:	691a      	ldr	r2, [r3, #16]
   86e42:	f852 1034 	ldr.w	r1, [r2, r4, lsl #3]
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   86e46:	4608      	mov	r0, r1
   86e48:	8849      	ldrh	r1, [r1, #2]
   86e4a:	4b7a      	ldr	r3, [pc, #488]	; (87034 <udc_process_setup+0x344>)
   86e4c:	4798      	blx	r3
   86e4e:	e00c      	b.n	86e6a <udc_process_setup+0x17a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   86e50:	4877      	ldr	r0, [pc, #476]	; (87030 <udc_process_setup+0x340>)
   86e52:	6801      	ldr	r1, [r0, #0]
   86e54:	7c4b      	ldrb	r3, [r1, #17]
   86e56:	42a3      	cmp	r3, r4
   86e58:	d962      	bls.n	86f20 <udc_process_setup+0x230>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   86e5a:	4a75      	ldr	r2, [pc, #468]	; (87030 <udc_process_setup+0x340>)
   86e5c:	6850      	ldr	r0, [r2, #4]
   86e5e:	f850 1034 	ldr.w	r1, [r0, r4, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   86e62:	4608      	mov	r0, r1
   86e64:	8849      	ldrh	r1, [r1, #2]
   86e66:	4b73      	ldr	r3, [pc, #460]	; (87034 <udc_process_setup+0x344>)
   86e68:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   86e6a:	4873      	ldr	r0, [pc, #460]	; (87038 <udc_process_setup+0x348>)
   86e6c:	6881      	ldr	r1, [r0, #8]
   86e6e:	f04f 0207 	mov.w	r2, #7
   86e72:	704a      	strb	r2, [r1, #1]
   86e74:	e038      	b.n	86ee8 <udc_process_setup+0x1f8>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   86e76:	b2c0      	uxtb	r0, r0
   86e78:	2803      	cmp	r0, #3
   86e7a:	d80b      	bhi.n	86e94 <udc_process_setup+0x1a4>
   86e7c:	e8df f010 	tbh	[pc, r0, lsl #1]
   86e80:	000e0004 	.word	0x000e0004
   86e84:	032f032b 	.word	0x032f032b
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   86e88:	486c      	ldr	r0, [pc, #432]	; (8703c <udc_process_setup+0x34c>)
   86e8a:	f04f 0104 	mov.w	r1, #4
   86e8e:	4a69      	ldr	r2, [pc, #420]	; (87034 <udc_process_setup+0x344>)
   86e90:	4790      	blx	r2
   86e92:	e029      	b.n	86ee8 <udc_process_setup+0x1f8>
		str = udc_get_string_serial_name();
		break;
#endif
	default:
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
   86e94:	486a      	ldr	r0, [pc, #424]	; (87040 <udc_process_setup+0x350>)
   86e96:	4780      	blx	r0
   86e98:	bb30      	cbnz	r0, 86ee8 <udc_process_setup+0x1f8>
   86e9a:	e28b      	b.n	873b4 <udc_process_setup+0x6c4>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
   86e9c:	4969      	ldr	r1, [pc, #420]	; (87044 <udc_process_setup+0x354>)
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   86e9e:	f04f 0008 	mov.w	r0, #8
   86ea2:	f04f 0300 	mov.w	r3, #0
   86ea6:	4a68      	ldr	r2, [pc, #416]	; (87048 <udc_process_setup+0x358>)
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   86ea8:	5ccc      	ldrb	r4, [r1, r3]
   86eaa:	f822 4f02 	strh.w	r4, [r2, #2]!
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   86eae:	f103 0301 	add.w	r3, r3, #1
   86eb2:	2801      	cmp	r0, #1
   86eb4:	f200 8317 	bhi.w	874e6 <udc_process_setup+0x7f6>
   86eb8:	e00e      	b.n	86ed8 <udc_process_setup+0x1e8>
   86eba:	f102 0402 	add.w	r4, r2, #2
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   86ebe:	5ccd      	ldrb	r5, [r1, r3]
   86ec0:	8055      	strh	r5, [r2, #2]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   86ec2:	f103 0301 	add.w	r3, r3, #1
   86ec6:	f102 0204 	add.w	r2, r2, #4
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   86eca:	5ccd      	ldrb	r5, [r1, r3]
   86ecc:	8065      	strh	r5, [r4, #2]
   86ece:	f103 0301 	add.w	r3, r3, #1
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   86ed2:	b2dc      	uxtb	r4, r3
   86ed4:	4284      	cmp	r4, r0
   86ed6:	d3f0      	bcc.n	86eba <udc_process_setup+0x1ca>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   86ed8:	ea4f 0140 	mov.w	r1, r0, lsl #1
   86edc:	f101 0102 	add.w	r1, r1, #2
   86ee0:	4859      	ldr	r0, [pc, #356]	; (87048 <udc_process_setup+0x358>)
   86ee2:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   86ee4:	4b53      	ldr	r3, [pc, #332]	; (87034 <udc_process_setup+0x344>)
   86ee6:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   86ee8:	f641 41ac 	movw	r1, #7340	; 0x1cac
   86eec:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86ef0:	88c8      	ldrh	r0, [r1, #6]
   86ef2:	898b      	ldrh	r3, [r1, #12]
   86ef4:	4283      	cmp	r3, r0
   86ef6:	d916      	bls.n	86f26 <udc_process_setup+0x236>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   86ef8:	f641 42ac 	movw	r2, #7340	; 0x1cac
   86efc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86f00:	8190      	strh	r0, [r2, #12]
	}
	return true;
   86f02:	f04f 0001 	mov.w	r0, #1
   86f06:	e255      	b.n	873b4 <udc_process_setup+0x6c4>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   86f08:	f04f 0000 	mov.w	r0, #0
   86f0c:	e252      	b.n	873b4 <udc_process_setup+0x6c4>
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
   86f0e:	f04f 0000 	mov.w	r0, #0
   86f12:	e24f      	b.n	873b4 <udc_process_setup+0x6c4>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
   86f14:	f04f 0000 	mov.w	r0, #0
   86f18:	e24c      	b.n	873b4 <udc_process_setup+0x6c4>
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
   86f1a:	f04f 0000 	mov.w	r0, #0
   86f1e:	e249      	b.n	873b4 <udc_process_setup+0x6c4>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
   86f20:	f04f 0000 	mov.w	r0, #0
   86f24:	e246      	b.n	873b4 <udc_process_setup+0x6c4>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
   86f26:	f04f 0001 	mov.w	r0, #1
   86f2a:	e243      	b.n	873b4 <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
   86f2c:	2a01      	cmp	r2, #1
   86f2e:	d10d      	bne.n	86f4c <udc_process_setup+0x25c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   86f30:	f241 5032 	movw	r0, #5426	; 0x1532
   86f34:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86f38:	f04f 0101 	mov.w	r1, #1
   86f3c:	f648 62a9 	movw	r2, #36521	; 0x8ea9
   86f40:	f2c0 0208 	movt	r2, #8
   86f44:	4790      	blx	r2
	return true;
   86f46:	f04f 0001 	mov.w	r0, #1
   86f4a:	e233      	b.n	873b4 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
   86f4c:	f04f 0000 	mov.w	r0, #0
   86f50:	e230      	b.n	873b4 <udc_process_setup+0x6c4>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   86f52:	2b01      	cmp	r3, #1
   86f54:	d134      	bne.n	86fc0 <udc_process_setup+0x2d0>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   86f56:	f641 40ac 	movw	r0, #7340	; 0x1cac
   86f5a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86f5e:	7841      	ldrb	r1, [r0, #1]
   86f60:	290a      	cmp	r1, #10
   86f62:	d12d      	bne.n	86fc0 <udc_process_setup+0x2d0>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   86f64:	2a01      	cmp	r2, #1
   86f66:	d11f      	bne.n	86fa8 <udc_process_setup+0x2b8>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   86f68:	4838      	ldr	r0, [pc, #224]	; (8704c <udc_process_setup+0x35c>)
   86f6a:	7801      	ldrb	r1, [r0, #0]
   86f6c:	b1f9      	cbz	r1, 86fae <udc_process_setup+0x2be>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   86f6e:	4c32      	ldr	r4, [pc, #200]	; (87038 <udc_process_setup+0x348>)
   86f70:	7924      	ldrb	r4, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   86f72:	4d37      	ldr	r5, [pc, #220]	; (87050 <udc_process_setup+0x360>)
   86f74:	682d      	ldr	r5, [r5, #0]
   86f76:	682b      	ldr	r3, [r5, #0]
   86f78:	791a      	ldrb	r2, [r3, #4]
   86f7a:	42a2      	cmp	r2, r4
   86f7c:	d91a      	bls.n	86fb4 <udc_process_setup+0x2c4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   86f7e:	4620      	mov	r0, r4
   86f80:	f04f 0100 	mov.w	r1, #0
   86f84:	4b33      	ldr	r3, [pc, #204]	; (87054 <udc_process_setup+0x364>)
   86f86:	4798      	blx	r3
   86f88:	b1b8      	cbz	r0, 86fba <udc_process_setup+0x2ca>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   86f8a:	6868      	ldr	r0, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   86f8c:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
   86f90:	68ca      	ldr	r2, [r1, #12]
   86f92:	4790      	blx	r2
   86f94:	4b30      	ldr	r3, [pc, #192]	; (87058 <udc_process_setup+0x368>)
   86f96:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   86f98:	4618      	mov	r0, r3
   86f9a:	f04f 0101 	mov.w	r1, #1
   86f9e:	4a25      	ldr	r2, [pc, #148]	; (87034 <udc_process_setup+0x344>)
   86fa0:	4790      	blx	r2
	return true;
   86fa2:	f04f 0001 	mov.w	r0, #1
   86fa6:	e205      	b.n	873b4 <udc_process_setup+0x6c4>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
   86fa8:	f04f 0000 	mov.w	r0, #0
   86fac:	e202      	b.n	873b4 <udc_process_setup+0x6c4>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
   86fae:	f04f 0000 	mov.w	r0, #0
   86fb2:	e1ff      	b.n	873b4 <udc_process_setup+0x6c4>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   86fb4:	f04f 0000 	mov.w	r0, #0
   86fb8:	e1fc      	b.n	873b4 <udc_process_setup+0x6c4>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
   86fba:	f04f 0000 	mov.w	r0, #0
   86fbe:	e1f9      	b.n	873b4 <udc_process_setup+0x6c4>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   86fc0:	2b02      	cmp	r3, #2
   86fc2:	f040 81f9 	bne.w	873b8 <udc_process_setup+0x6c8>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   86fc6:	f641 43ac 	movw	r3, #7340	; 0x1cac
   86fca:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86fce:	7858      	ldrb	r0, [r3, #1]
   86fd0:	2800      	cmp	r0, #0
   86fd2:	f040 81d5 	bne.w	87380 <udc_process_setup+0x690>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   86fd6:	2a02      	cmp	r2, #2
   86fd8:	d10d      	bne.n	86ff6 <udc_process_setup+0x306>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   86fda:	4a17      	ldr	r2, [pc, #92]	; (87038 <udc_process_setup+0x348>)
   86fdc:	7910      	ldrb	r0, [r2, #4]
   86fde:	491f      	ldr	r1, [pc, #124]	; (8705c <udc_process_setup+0x36c>)
   86fe0:	4788      	blx	r1
   86fe2:	4b1f      	ldr	r3, [pc, #124]	; (87060 <udc_process_setup+0x370>)
   86fe4:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   86fe6:	4618      	mov	r0, r3
   86fe8:	f04f 0102 	mov.w	r1, #2
   86fec:	4a11      	ldr	r2, [pc, #68]	; (87034 <udc_process_setup+0x344>)
   86fee:	4790      	blx	r2
			sizeof(udc_ep_status));
	return true;
   86ff0:	f04f 0001 	mov.w	r0, #1
   86ff4:	e1de      	b.n	873b4 <udc_process_setup+0x6c4>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
   86ff6:	f04f 0000 	mov.w	r0, #0
   86ffa:	e1db      	b.n	873b4 <udc_process_setup+0x6c4>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   86ffc:	f010 031f 	ands.w	r3, r0, #31
   87000:	f040 8142 	bne.w	87288 <udc_process_setup+0x598>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   87004:	f641 41ac 	movw	r1, #7340	; 0x1cac
   87008:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8700c:	784a      	ldrb	r2, [r1, #1]
   8700e:	f102 30ff 	add.w	r0, r2, #4294967295
   87012:	2808      	cmp	r0, #8
   87014:	f200 8138 	bhi.w	87288 <udc_process_setup+0x598>
   87018:	e8df f010 	tbh	[pc, r0, lsl #1]
   8701c:	01360039 	.word	0x01360039
   87020:	01360057 	.word	0x01360057
   87024:	01360024 	.word	0x01360024
   87028:	01360136 	.word	0x01360136
   8702c:	00ae      	.short	0x00ae
   8702e:	bf00      	nop
   87030:	20070170 	.word	0x20070170
   87034:	00088ea9 	.word	0x00088ea9
   87038:	20071cac 	.word	0x20071cac
   8703c:	2007029c 	.word	0x2007029c
   87040:	00085011 	.word	0x00085011
   87044:	20070270 	.word	0x20070270
   87048:	2007027c 	.word	0x2007027c
   8704c:	20071532 	.word	0x20071532
   87050:	2007152c 	.word	0x2007152c
   87054:	00086a95 	.word	0x00086a95
   87058:	20071528 	.word	0x20071528
   8705c:	00088f1d 	.word	0x00088f1d
   87060:	2007152a 	.word	0x2007152a
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   87064:	f641 40ac 	movw	r0, #7340	; 0x1cac
   87068:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8706c:	88c1      	ldrh	r1, [r0, #6]
   8706e:	b959      	cbnz	r1, 87088 <udc_process_setup+0x398>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   87070:	f641 43ac 	movw	r3, #7340	; 0x1cac
   87074:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87078:	f646 3221 	movw	r2, #27425	; 0x6b21
   8707c:	f2c0 0208 	movt	r2, #8
   87080:	611a      	str	r2, [r3, #16]
	return true;
   87082:	f04f 0001 	mov.w	r0, #1
   87086:	e195      	b.n	873b4 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   87088:	f04f 0000 	mov.w	r0, #0
   8708c:	e192      	b.n	873b4 <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   8708e:	f641 42ac 	movw	r2, #7340	; 0x1cac
   87092:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87096:	88d1      	ldrh	r1, [r2, #6]
   87098:	b989      	cbnz	r1, 870be <udc_process_setup+0x3ce>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   8709a:	f641 40ac 	movw	r0, #7340	; 0x1cac
   8709e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   870a2:	8843      	ldrh	r3, [r0, #2]
   870a4:	2b01      	cmp	r3, #1
   870a6:	d10d      	bne.n	870c4 <udc_process_setup+0x3d4>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   870a8:	f241 5130 	movw	r1, #5424	; 0x1530
   870ac:	f2c2 0107 	movt	r1, #8199	; 0x2007
   870b0:	880a      	ldrh	r2, [r1, #0]
   870b2:	f022 0002 	bic.w	r0, r2, #2
   870b6:	8008      	strh	r0, [r1, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   870b8:	f04f 0001 	mov.w	r0, #1
   870bc:	e17a      	b.n	873b4 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   870be:	f04f 0000 	mov.w	r0, #0
   870c2:	e177      	b.n	873b4 <udc_process_setup+0x6c4>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
   870c4:	f04f 0000 	mov.w	r0, #0
   870c8:	e174      	b.n	873b4 <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   870ca:	f641 40ac 	movw	r0, #7340	; 0x1cac
   870ce:	f2c2 0007 	movt	r0, #8199	; 0x2007
   870d2:	88c1      	ldrh	r1, [r0, #6]
   870d4:	2900      	cmp	r1, #0
   870d6:	d140      	bne.n	8715a <udc_process_setup+0x46a>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
   870d8:	f641 43ac 	movw	r3, #7340	; 0x1cac
   870dc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   870e0:	885a      	ldrh	r2, [r3, #2]
   870e2:	2a02      	cmp	r2, #2
   870e4:	d13c      	bne.n	87160 <udc_process_setup+0x470>
		return false;
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
   870e6:	f648 6031 	movw	r0, #36401	; 0x8e31
   870ea:	f2c0 0008 	movt	r0, #8
   870ee:	4780      	blx	r0
   870f0:	2800      	cmp	r0, #0
   870f2:	d038      	beq.n	87166 <udc_process_setup+0x476>
			break;
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   870f4:	f641 41ac 	movw	r1, #7340	; 0x1cac
   870f8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   870fc:	790b      	ldrb	r3, [r1, #4]
   870fe:	2b00      	cmp	r3, #0
   87100:	d134      	bne.n	8716c <udc_process_setup+0x47c>
			break;
		}
		// Unconfigure the device, terminating all ongoing requests
		udc_reset();
   87102:	f646 4245 	movw	r2, #27717	; 0x6c45
   87106:	f2c0 0208 	movt	r2, #8
   8710a:	4790      	blx	r2
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   8710c:	f641 40ac 	movw	r0, #7340	; 0x1cac
   87110:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87114:	8881      	ldrh	r1, [r0, #4]
   87116:	ea4f 2311 	mov.w	r3, r1, lsr #8
   8711a:	f103 30ff 	add.w	r0, r3, #4294967295
   8711e:	2803      	cmp	r0, #3
   87120:	d827      	bhi.n	87172 <udc_process_setup+0x482>
   87122:	e8df f000 	tbb	[pc, r0]
   87126:	0802      	.short	0x0802
   87128:	140e      	.short	0x140e
		case USB_DEV_TEST_MODE_J:
			udd_g_ctrlreq.callback = udd_test_mode_j;
   8712a:	4897      	ldr	r0, [pc, #604]	; (87388 <udc_process_setup+0x698>)
   8712c:	4b97      	ldr	r3, [pc, #604]	; (8738c <udc_process_setup+0x69c>)
   8712e:	6118      	str	r0, [r3, #16]
			return true;
   87130:	f04f 0001 	mov.w	r0, #1
   87134:	e13e      	b.n	873b4 <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_K:
			udd_g_ctrlreq.callback = udd_test_mode_k;
   87136:	4a96      	ldr	r2, [pc, #600]	; (87390 <udc_process_setup+0x6a0>)
   87138:	4994      	ldr	r1, [pc, #592]	; (8738c <udc_process_setup+0x69c>)
   8713a:	610a      	str	r2, [r1, #16]
			return true;
   8713c:	f04f 0001 	mov.w	r0, #1
   87140:	e138      	b.n	873b4 <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_SE0_NAK:
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   87142:	4894      	ldr	r0, [pc, #592]	; (87394 <udc_process_setup+0x6a4>)
   87144:	4b91      	ldr	r3, [pc, #580]	; (8738c <udc_process_setup+0x69c>)
   87146:	6118      	str	r0, [r3, #16]
			return true;
   87148:	f04f 0001 	mov.w	r0, #1
   8714c:	e132      	b.n	873b4 <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_PACKET:
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   8714e:	4a92      	ldr	r2, [pc, #584]	; (87398 <udc_process_setup+0x6a8>)
   87150:	498e      	ldr	r1, [pc, #568]	; (8738c <udc_process_setup+0x69c>)
   87152:	610a      	str	r2, [r1, #16]
			return true;
   87154:	f04f 0001 	mov.w	r0, #1
   87158:	e12c      	b.n	873b4 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   8715a:	f04f 0000 	mov.w	r0, #0
   8715e:	e129      	b.n	873b4 <udc_process_setup+0x6c4>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
   87160:	f04f 0000 	mov.w	r0, #0
   87164:	e126      	b.n	873b4 <udc_process_setup+0x6c4>
		break;
#endif
	default:
		break;
	}
	return false;
   87166:	f04f 0000 	mov.w	r0, #0
   8716a:	e123      	b.n	873b4 <udc_process_setup+0x6c4>
   8716c:	f04f 0000 	mov.w	r0, #0
   87170:	e120      	b.n	873b4 <udc_process_setup+0x6c4>
   87172:	f04f 0000 	mov.w	r0, #0
   87176:	e11d      	b.n	873b4 <udc_process_setup+0x6c4>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   87178:	f641 43ac 	movw	r3, #7340	; 0x1cac
   8717c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87180:	88d9      	ldrh	r1, [r3, #6]
   87182:	2900      	cmp	r1, #0
   87184:	d16e      	bne.n	87264 <udc_process_setup+0x574>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   87186:	f648 6275 	movw	r2, #36469	; 0x8e75
   8718a:	f2c0 0208 	movt	r2, #8
   8718e:	4790      	blx	r2
   87190:	2800      	cmp	r0, #0
   87192:	d06a      	beq.n	8726a <udc_process_setup+0x57a>
		return false;
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   87194:	f648 6031 	movw	r0, #36401	; 0x8e31
   87198:	f2c0 0008 	movt	r0, #8
   8719c:	4780      	blx	r0
   8719e:	b168      	cbz	r0, 871bc <udc_process_setup+0x4cc>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   871a0:	f641 41ac 	movw	r1, #7340	; 0x1cac
   871a4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   871a8:	788a      	ldrb	r2, [r1, #2]
				udc_config.confdev_hs->bNumConfigurations) {
   871aa:	f240 1070 	movw	r0, #368	; 0x170
   871ae:	f2c2 0007 	movt	r0, #8199	; 0x2007
   871b2:	6883      	ldr	r3, [r0, #8]
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   871b4:	7c59      	ldrb	r1, [r3, #17]
   871b6:	428a      	cmp	r2, r1
   871b8:	dd0d      	ble.n	871d6 <udc_process_setup+0x4e6>
   871ba:	e059      	b.n	87270 <udc_process_setup+0x580>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   871bc:	f641 43ac 	movw	r3, #7340	; 0x1cac
   871c0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   871c4:	7899      	ldrb	r1, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   871c6:	f240 1270 	movw	r2, #368	; 0x170
   871ca:	f2c2 0207 	movt	r2, #8199	; 0x2007
   871ce:	6810      	ldr	r0, [r2, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   871d0:	7c43      	ldrb	r3, [r0, #17]
   871d2:	4299      	cmp	r1, r3
   871d4:	dc4f      	bgt.n	87276 <udc_process_setup+0x586>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
   871d6:	f646 4245 	movw	r2, #27717	; 0x6c45
   871da:	f2c0 0208 	movt	r2, #8
   871de:	4790      	blx	r2

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   871e0:	f641 40ac 	movw	r0, #7340	; 0x1cac
   871e4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   871e8:	7883      	ldrb	r3, [r0, #2]
   871ea:	f241 5132 	movw	r1, #5426	; 0x1532
   871ee:	f2c2 0107 	movt	r1, #8199	; 0x2007
   871f2:	700b      	strb	r3, [r1, #0]
	if (udc_num_configuration == 0) {
   871f4:	2b00      	cmp	r3, #0
   871f6:	d041      	beq.n	8727c <udc_process_setup+0x58c>
		return true; // Default empty configuration requested
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   871f8:	4a68      	ldr	r2, [pc, #416]	; (8739c <udc_process_setup+0x6ac>)
   871fa:	4790      	blx	r2
   871fc:	b198      	cbz	r0, 87226 <udc_process_setup+0x536>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   871fe:	4a68      	ldr	r2, [pc, #416]	; (873a0 <udc_process_setup+0x6b0>)
   87200:	7810      	ldrb	r0, [r2, #0]
   87202:	f100 31ff 	add.w	r1, r0, #4294967295
   87206:	4b67      	ldr	r3, [pc, #412]	; (873a4 <udc_process_setup+0x6b4>)
   87208:	691a      	ldr	r2, [r3, #16]
   8720a:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
   8720e:	4966      	ldr	r1, [pc, #408]	; (873a8 <udc_process_setup+0x6b8>)
   87210:	6008      	str	r0, [r1, #0]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   87212:	4b65      	ldr	r3, [pc, #404]	; (873a8 <udc_process_setup+0x6b8>)
   87214:	681a      	ldr	r2, [r3, #0]
   87216:	6810      	ldr	r0, [r2, #0]
   87218:	7901      	ldrb	r1, [r0, #4]
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
   8721a:	f04f 0001 	mov.w	r0, #1
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8721e:	2900      	cmp	r1, #0
   87220:	f000 80c8 	beq.w	873b4 <udc_process_setup+0x6c4>
   87224:	e00a      	b.n	8723c <udc_process_setup+0x54c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   87226:	485e      	ldr	r0, [pc, #376]	; (873a0 <udc_process_setup+0x6b0>)
   87228:	7803      	ldrb	r3, [r0, #0]
   8722a:	f103 31ff 	add.w	r1, r3, #4294967295
   8722e:	4a5d      	ldr	r2, [pc, #372]	; (873a4 <udc_process_setup+0x6b4>)
   87230:	6850      	ldr	r0, [r2, #4]
   87232:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   87236:	4b5c      	ldr	r3, [pc, #368]	; (873a8 <udc_process_setup+0x6b8>)
   87238:	6019      	str	r1, [r3, #0]
   8723a:	e7ea      	b.n	87212 <udc_process_setup+0x522>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8723c:	f04f 0400 	mov.w	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   87240:	4626      	mov	r6, r4
   87242:	4d5a      	ldr	r5, [pc, #360]	; (873ac <udc_process_setup+0x6bc>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   87244:	4f58      	ldr	r7, [pc, #352]	; (873a8 <udc_process_setup+0x6b8>)
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   87246:	4620      	mov	r0, r4
   87248:	4631      	mov	r1, r6
   8724a:	47a8      	blx	r5
   8724c:	b1c8      	cbz	r0, 87282 <udc_process_setup+0x592>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   8724e:	f104 0401 	add.w	r4, r4, #1
   87252:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   87254:	683b      	ldr	r3, [r7, #0]
   87256:	681a      	ldr	r2, [r3, #0]
   87258:	7910      	ldrb	r0, [r2, #4]
   8725a:	42a0      	cmp	r0, r4
   8725c:	d8f3      	bhi.n	87246 <udc_process_setup+0x556>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
   8725e:	f04f 0001 	mov.w	r0, #1
   87262:	e0a7      	b.n	873b4 <udc_process_setup+0x6c4>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   87264:	f04f 0000 	mov.w	r0, #0
   87268:	e0a4      	b.n	873b4 <udc_process_setup+0x6c4>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
   8726a:	f04f 0000 	mov.w	r0, #0
   8726e:	e0a1      	b.n	873b4 <udc_process_setup+0x6c4>
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
   87270:	f04f 0000 	mov.w	r0, #0
   87274:	e09e      	b.n	873b4 <udc_process_setup+0x6c4>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
   87276:	f04f 0000 	mov.w	r0, #0
   8727a:	e09b      	b.n	873b4 <udc_process_setup+0x6c4>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
   8727c:	f04f 0001 	mov.w	r0, #1
   87280:	e098      	b.n	873b4 <udc_process_setup+0x6c4>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
   87282:	f04f 0000 	mov.w	r0, #0
   87286:	e095      	b.n	873b4 <udc_process_setup+0x6c4>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   87288:	2b01      	cmp	r3, #1
   8728a:	d12d      	bne.n	872e8 <udc_process_setup+0x5f8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   8728c:	f641 41ac 	movw	r1, #7340	; 0x1cac
   87290:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87294:	784a      	ldrb	r2, [r1, #1]
   87296:	2a0b      	cmp	r2, #11
   87298:	d126      	bne.n	872e8 <udc_process_setup+0x5f8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   8729a:	f641 40ac 	movw	r0, #7340	; 0x1cac
   8729e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   872a2:	88c2      	ldrh	r2, [r0, #6]
   872a4:	b9ba      	cbnz	r2, 872d6 <udc_process_setup+0x5e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   872a6:	f241 5332 	movw	r3, #5426	; 0x1532
   872aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   872ae:	7819      	ldrb	r1, [r3, #0]
   872b0:	b1a1      	cbz	r1, 872dc <udc_process_setup+0x5ec>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   872b2:	f641 45ac 	movw	r5, #7340	; 0x1cac
   872b6:	f2c2 0507 	movt	r5, #8199	; 0x2007
   872ba:	792c      	ldrb	r4, [r5, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   872bc:	886d      	ldrh	r5, [r5, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   872be:	4620      	mov	r0, r4
   872c0:	f646 32a9 	movw	r2, #27561	; 0x6ba9
   872c4:	f2c0 0208 	movt	r2, #8
   872c8:	4790      	blx	r2
   872ca:	b150      	cbz	r0, 872e2 <udc_process_setup+0x5f2>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   872cc:	4620      	mov	r0, r4
   872ce:	b2e9      	uxtb	r1, r5
   872d0:	4b36      	ldr	r3, [pc, #216]	; (873ac <udc_process_setup+0x6bc>)
   872d2:	4798      	blx	r3
   872d4:	e06e      	b.n	873b4 <udc_process_setup+0x6c4>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
   872d6:	f04f 0000 	mov.w	r0, #0
   872da:	e06b      	b.n	873b4 <udc_process_setup+0x6c4>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
   872dc:	f04f 0000 	mov.w	r0, #0
   872e0:	e068      	b.n	873b4 <udc_process_setup+0x6c4>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
		return false;
   872e2:	f04f 0000 	mov.w	r0, #0
   872e6:	e065      	b.n	873b4 <udc_process_setup+0x6c4>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   872e8:	2b02      	cmp	r3, #2
   872ea:	d165      	bne.n	873b8 <udc_process_setup+0x6c8>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   872ec:	f641 43ac 	movw	r3, #7340	; 0x1cac
   872f0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   872f4:	7858      	ldrb	r0, [r3, #1]
   872f6:	2801      	cmp	r0, #1
   872f8:	d002      	beq.n	87300 <udc_process_setup+0x610>
   872fa:	2803      	cmp	r0, #3
   872fc:	d158      	bne.n	873b0 <udc_process_setup+0x6c0>
   872fe:	e01c      	b.n	8733a <udc_process_setup+0x64a>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   87300:	f641 43ac 	movw	r3, #7340	; 0x1cac
   87304:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87308:	88d8      	ldrh	r0, [r3, #6]
   8730a:	b980      	cbnz	r0, 8732e <udc_process_setup+0x63e>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   8730c:	f641 41ac 	movw	r1, #7340	; 0x1cac
   87310:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87314:	884a      	ldrh	r2, [r1, #2]
   87316:	b96a      	cbnz	r2, 87334 <udc_process_setup+0x644>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   87318:	f641 43ac 	movw	r3, #7340	; 0x1cac
   8731c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87320:	7918      	ldrb	r0, [r3, #4]
   87322:	f249 015d 	movw	r1, #36957	; 0x905d
   87326:	f2c0 0108 	movt	r1, #8
   8732a:	4788      	blx	r1
   8732c:	e042      	b.n	873b4 <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   8732e:	f04f 0000 	mov.w	r0, #0
   87332:	e03f      	b.n	873b4 <udc_process_setup+0x6c4>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
   87334:	f04f 0000 	mov.w	r0, #0
   87338:	e03c      	b.n	873b4 <udc_process_setup+0x6c4>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   8733a:	f641 41ac 	movw	r1, #7340	; 0x1cac
   8733e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87342:	88ca      	ldrh	r2, [r1, #6]
   87344:	b9b2      	cbnz	r2, 87374 <udc_process_setup+0x684>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   87346:	f641 43ac 	movw	r3, #7340	; 0x1cac
   8734a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8734e:	8858      	ldrh	r0, [r3, #2]
   87350:	b998      	cbnz	r0, 8737a <udc_process_setup+0x68a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   87352:	f641 44ac 	movw	r4, #7340	; 0x1cac
   87356:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8735a:	7920      	ldrb	r0, [r4, #4]
   8735c:	f249 7159 	movw	r1, #38745	; 0x9759
   87360:	f2c0 0108 	movt	r1, #8
   87364:	4788      	blx	r1
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   87366:	7920      	ldrb	r0, [r4, #4]
   87368:	f648 7235 	movw	r2, #36661	; 0x8f35
   8736c:	f2c0 0208 	movt	r2, #8
   87370:	4790      	blx	r2
   87372:	e01f      	b.n	873b4 <udc_process_setup+0x6c4>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   87374:	f04f 0000 	mov.w	r0, #0
   87378:	e01c      	b.n	873b4 <udc_process_setup+0x6c4>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
   8737a:	f04f 0000 	mov.w	r0, #0
   8737e:	e019      	b.n	873b4 <udc_process_setup+0x6c4>
				break;
			}
		}
#endif
	}
	return false;
   87380:	f04f 0000 	mov.w	r0, #0
   87384:	e016      	b.n	873b4 <udc_process_setup+0x6c4>
   87386:	bf00      	nop
   87388:	0008985d 	.word	0x0008985d
   8738c:	20071cac 	.word	0x20071cac
   87390:	0008987d 	.word	0x0008987d
   87394:	0008989d 	.word	0x0008989d
   87398:	000898b5 	.word	0x000898b5
   8739c:	00088e31 	.word	0x00088e31
   873a0:	20071532 	.word	0x20071532
   873a4:	20070170 	.word	0x20070170
   873a8:	2007152c 	.word	0x2007152c
   873ac:	00086b3d 	.word	0x00086b3d
   873b0:	f04f 0000 	mov.w	r0, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
   873b4:	2800      	cmp	r0, #0
   873b6:	d17b      	bne.n	874b0 <udc_process_setup+0x7c0>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   873b8:	f641 41ac 	movw	r1, #7340	; 0x1cac
   873bc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   873c0:	7808      	ldrb	r0, [r1, #0]
   873c2:	f000 031f 	and.w	r3, r0, #31
   873c6:	2b01      	cmp	r3, #1
   873c8:	d12d      	bne.n	87426 <udc_process_setup+0x736>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   873ca:	f241 5232 	movw	r2, #5426	; 0x1532
   873ce:	f2c2 0207 	movt	r2, #8199	; 0x2007
   873d2:	7811      	ldrb	r1, [r2, #0]
   873d4:	b339      	cbz	r1, 87426 <udc_process_setup+0x736>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   873d6:	f641 44ac 	movw	r4, #7340	; 0x1cac
   873da:	f2c2 0407 	movt	r4, #8199	; 0x2007
   873de:	7924      	ldrb	r4, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   873e0:	f241 552c 	movw	r5, #5420	; 0x152c
   873e4:	f2c2 0507 	movt	r5, #8199	; 0x2007
   873e8:	682d      	ldr	r5, [r5, #0]
   873ea:	6828      	ldr	r0, [r5, #0]
   873ec:	7903      	ldrb	r3, [r0, #4]
   873ee:	42a3      	cmp	r3, r4
   873f0:	d919      	bls.n	87426 <udc_process_setup+0x736>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   873f2:	4620      	mov	r0, r4
   873f4:	f04f 0100 	mov.w	r1, #0
   873f8:	f646 2295 	movw	r2, #27285	; 0x6a95
   873fc:	f2c0 0208 	movt	r2, #8
   87400:	4790      	blx	r2
   87402:	b180      	cbz	r0, 87426 <udc_process_setup+0x736>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   87404:	6869      	ldr	r1, [r5, #4]
   87406:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8740a:	68e8      	ldr	r0, [r5, #12]
   8740c:	4780      	blx	r0
   8740e:	4601      	mov	r1, r0
   87410:	4620      	mov	r0, r4
   87412:	f646 2395 	movw	r3, #27285	; 0x6a95
   87416:	f2c0 0308 	movt	r3, #8
   8741a:	4798      	blx	r3
   8741c:	b118      	cbz	r0, 87426 <udc_process_setup+0x736>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   8741e:	68aa      	ldr	r2, [r5, #8]
   87420:	4790      	blx	r2
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
   87422:	2800      	cmp	r0, #0
   87424:	d147      	bne.n	874b6 <udc_process_setup+0x7c6>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   87426:	f641 41ac 	movw	r1, #7340	; 0x1cac
   8742a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8742e:	7808      	ldrb	r0, [r1, #0]
   87430:	f000 031f 	and.w	r3, r0, #31
   87434:	2b02      	cmp	r3, #2
   87436:	d141      	bne.n	874bc <udc_process_setup+0x7cc>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   87438:	f241 5232 	movw	r2, #5426	; 0x1532
   8743c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87440:	7811      	ldrb	r1, [r2, #0]
   87442:	b331      	cbz	r1, 87492 <udc_process_setup+0x7a2>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   87444:	f241 502c 	movw	r0, #5420	; 0x152c
   87448:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8744c:	6803      	ldr	r3, [r0, #0]
   8744e:	681a      	ldr	r2, [r3, #0]
   87450:	7911      	ldrb	r1, [r2, #4]
   87452:	b309      	cbz	r1, 87498 <udc_process_setup+0x7a8>
   87454:	f04f 0400 	mov.w	r4, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   87458:	f646 2695 	movw	r6, #27285	; 0x6a95
   8745c:	f2c0 0608 	movt	r6, #8
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   87460:	f241 572c 	movw	r7, #5420	; 0x152c
   87464:	f2c2 0707 	movt	r7, #8199	; 0x2007
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   87468:	685d      	ldr	r5, [r3, #4]
   8746a:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8746e:	68eb      	ldr	r3, [r5, #12]
   87470:	4798      	blx	r3
   87472:	4601      	mov	r1, r0
   87474:	4620      	mov	r0, r4
   87476:	47b0      	blx	r6
   87478:	b188      	cbz	r0, 8749e <udc_process_setup+0x7ae>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   8747a:	68a8      	ldr	r0, [r5, #8]
   8747c:	4780      	blx	r0
   8747e:	b988      	cbnz	r0, 874a4 <udc_process_setup+0x7b4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   87480:	f104 0401 	add.w	r4, r4, #1
   87484:	b2e4      	uxtb	r4, r4
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   87486:	683b      	ldr	r3, [r7, #0]
   87488:	681a      	ldr	r2, [r3, #0]
   8748a:	7911      	ldrb	r1, [r2, #4]
   8748c:	42a1      	cmp	r1, r4
   8748e:	d8eb      	bhi.n	87468 <udc_process_setup+0x778>
   87490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
   87492:	f04f 0000 	mov.w	r0, #0
   87496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
   87498:	f04f 0000 	mov.w	r0, #0
   8749c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
			return false;
   8749e:	f04f 0000 	mov.w	r0, #0
   874a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
   874a4:	f04f 0001 	mov.w	r0, #1
   874a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
   874aa:	f04f 0000 	mov.w	r0, #0
   874ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
   874b0:	f04f 0001 	mov.w	r0, #1
   874b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
			return true;
   874b6:	f04f 0001 	mov.w	r0, #1
   874ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   874bc:	f04f 0000 	mov.w	r0, #0
   874c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   874c2:	f010 0f60 	tst.w	r0, #96	; 0x60
   874c6:	f47f af77 	bne.w	873b8 <udc_process_setup+0x6c8>
   874ca:	e597      	b.n	86ffc <udc_process_setup+0x30c>
   874cc:	f010 0f60 	tst.w	r0, #96	; 0x60
   874d0:	f47f af72 	bne.w	873b8 <udc_process_setup+0x6c8>
   874d4:	e424      	b.n	86d20 <udc_process_setup+0x30>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   874d6:	f04f 000e 	mov.w	r0, #14
		str = udc_string_product_name;
   874da:	490a      	ldr	r1, [pc, #40]	; (87504 <udc_process_setup+0x814>)
   874dc:	e4e1      	b.n	86ea2 <udc_process_setup+0x1b2>
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   874de:	f04f 000c 	mov.w	r0, #12
		str = udc_get_string_serial_name();
   874e2:	4909      	ldr	r1, [pc, #36]	; (87508 <udc_process_setup+0x818>)
   874e4:	e4dd      	b.n	86ea2 <udc_process_setup+0x1b2>
   874e6:	f04f 0401 	mov.w	r4, #1
   874ea:	2c00      	cmp	r4, #0
   874ec:	f43f ace5 	beq.w	86eba <udc_process_setup+0x1ca>
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   874f0:	5ccc      	ldrb	r4, [r1, r3]
   874f2:	f822 4f02 	strh.w	r4, [r2, #2]!
   874f6:	f103 0301 	add.w	r3, r3, #1
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   874fa:	b2dc      	uxtb	r4, r3
   874fc:	4284      	cmp	r4, r0
   874fe:	f4ff acdc 	bcc.w	86eba <udc_process_setup+0x1ca>
   87502:	e4e9      	b.n	86ed8 <udc_process_setup+0x1e8>
   87504:	20070260 	.word	0x20070260
   87508:	0008d6f0 	.word	0x0008d6f0

0008750c <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8750c:	b10a      	cbz	r2, 87512 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   8750e:	6641      	str	r1, [r0, #100]	; 0x64
   87510:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   87512:	6601      	str	r1, [r0, #96]	; 0x60
   87514:	4770      	bx	lr
   87516:	bf00      	nop

00087518 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   87518:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8751a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8751e:	d016      	beq.n	8754e <pio_set_peripheral+0x36>
   87520:	d804      	bhi.n	8752c <pio_set_peripheral+0x14>
   87522:	b1c9      	cbz	r1, 87558 <pio_set_peripheral+0x40>
   87524:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   87528:	d115      	bne.n	87556 <pio_set_peripheral+0x3e>
   8752a:	e009      	b.n	87540 <pio_set_peripheral+0x28>
   8752c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   87530:	d012      	beq.n	87558 <pio_set_peripheral+0x40>
   87532:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   87536:	d00f      	beq.n	87558 <pio_set_peripheral+0x40>
   87538:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8753c:	d10b      	bne.n	87556 <pio_set_peripheral+0x3e>
   8753e:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   87540:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   87542:	6f01      	ldr	r1, [r0, #112]	; 0x70
   87544:	400b      	ands	r3, r1
   87546:	ea23 0302 	bic.w	r3, r3, r2
   8754a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8754c:	e003      	b.n	87556 <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8754e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   87550:	ea42 0103 	orr.w	r1, r2, r3
   87554:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   87556:	6042      	str	r2, [r0, #4]
   87558:	4770      	bx	lr
   8755a:	bf00      	nop

0008755c <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8755c:	6441      	str	r1, [r0, #68]	; 0x44
   8755e:	4770      	bx	lr

00087560 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   87560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87562:	4604      	mov	r4, r0
   87564:	460d      	mov	r5, r1
   87566:	4616      	mov	r6, r2
   87568:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   8756a:	f247 535d 	movw	r3, #30045	; 0x755d
   8756e:	f2c0 0308 	movt	r3, #8
   87572:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   87574:	4620      	mov	r0, r4
   87576:	4629      	mov	r1, r5
   87578:	9a06      	ldr	r2, [sp, #24]
   8757a:	f247 530d 	movw	r3, #29965	; 0x750d
   8757e:	f2c0 0308 	movt	r3, #8
   87582:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   87584:	b10f      	cbz	r7, 8758a <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   87586:	6525      	str	r5, [r4, #80]	; 0x50
   87588:	e000      	b.n	8758c <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8758a:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8758c:	b10e      	cbz	r6, 87592 <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   8758e:	6325      	str	r5, [r4, #48]	; 0x30
   87590:	e000      	b.n	87594 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   87592:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   87594:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   87596:	6025      	str	r5, [r4, #0]
   87598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8759a:	bf00      	nop

0008759c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   8759c:	b570      	push	{r4, r5, r6, lr}
   8759e:	4604      	mov	r4, r0
   875a0:	460d      	mov	r5, r1
   875a2:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   875a4:	f247 535d 	movw	r3, #30045	; 0x755d
   875a8:	f2c0 0308 	movt	r3, #8
   875ac:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   875ae:	4620      	mov	r0, r4
   875b0:	4629      	mov	r1, r5
   875b2:	f006 0201 	and.w	r2, r6, #1
   875b6:	f247 530d 	movw	r3, #29965	; 0x750d
   875ba:	f2c0 0308 	movt	r3, #8
   875be:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   875c0:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   875c4:	bf14      	ite	ne
   875c6:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   875c8:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   875ca:	f016 0f02 	tst.w	r6, #2
   875ce:	d002      	beq.n	875d6 <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   875d0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   875d4:	e004      	b.n	875e0 <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   875d6:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_SCIFSR = ul_mask;
   875da:	bf18      	it	ne
   875dc:	f8c4 5080 	strne.w	r5, [r4, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   875e0:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   875e2:	6025      	str	r5, [r4, #0]
   875e4:	bd70      	pop	{r4, r5, r6, pc}
   875e6:	bf00      	nop

000875e8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   875e8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   875ea:	4770      	bx	lr

000875ec <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   875ec:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   875ee:	4770      	bx	lr

000875f0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   875f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   875f2:	b083      	sub	sp, #12
   875f4:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   875f6:	ea4f 1650 	mov.w	r6, r0, lsr #5
   875fa:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
   875fe:	f201 7207 	addw	r2, r1, #1799	; 0x707
   87602:	ea4f 2642 	mov.w	r6, r2, lsl #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   87606:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   8760a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8760e:	d042      	beq.n	87696 <pio_configure_pin+0xa6>
   87610:	d806      	bhi.n	87620 <pio_configure_pin+0x30>
   87612:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   87616:	d00a      	beq.n	8762e <pio_configure_pin+0x3e>
   87618:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   8761c:	d164      	bne.n	876e8 <pio_configure_pin+0xf8>
   8761e:	e020      	b.n	87662 <pio_configure_pin+0x72>
   87620:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   87624:	d046      	beq.n	876b4 <pio_configure_pin+0xc4>
   87626:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8762a:	d15d      	bne.n	876e8 <pio_configure_pin+0xf8>
   8762c:	e042      	b.n	876b4 <pio_configure_pin+0xc4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8762e:	f000 071f 	and.w	r7, r0, #31
   87632:	f04f 0401 	mov.w	r4, #1
   87636:	fa04 f707 	lsl.w	r7, r4, r7
   8763a:	4630      	mov	r0, r6
   8763c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   87640:	463a      	mov	r2, r7
   87642:	f247 5319 	movw	r3, #29977	; 0x7519
   87646:	f2c0 0308 	movt	r3, #8
   8764a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   8764c:	4630      	mov	r0, r6
   8764e:	4639      	mov	r1, r7
   87650:	ea05 0204 	and.w	r2, r5, r4
   87654:	f247 530d 	movw	r3, #29965	; 0x750d
   87658:	f2c0 0308 	movt	r3, #8
   8765c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8765e:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   87660:	e044      	b.n	876ec <pio_configure_pin+0xfc>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   87662:	f000 001f 	and.w	r0, r0, #31
   87666:	f04f 0401 	mov.w	r4, #1
   8766a:	fa04 f700 	lsl.w	r7, r4, r0
   8766e:	4630      	mov	r0, r6
   87670:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   87674:	463a      	mov	r2, r7
   87676:	f247 5319 	movw	r3, #29977	; 0x7519
   8767a:	f2c0 0308 	movt	r3, #8
   8767e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   87680:	4630      	mov	r0, r6
   87682:	4639      	mov	r1, r7
   87684:	ea05 0204 	and.w	r2, r5, r4
   87688:	f247 530d 	movw	r3, #29965	; 0x750d
   8768c:	f2c0 0308 	movt	r3, #8
   87690:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   87692:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   87694:	e02a      	b.n	876ec <pio_configure_pin+0xfc>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   87696:	f000 021f 	and.w	r2, r0, #31
   8769a:	f04f 0401 	mov.w	r4, #1
   8769e:	4630      	mov	r0, r6
   876a0:	fa04 f102 	lsl.w	r1, r4, r2
   876a4:	462a      	mov	r2, r5
   876a6:	f247 539d 	movw	r3, #30109	; 0x759d
   876aa:	f2c0 0308 	movt	r3, #8
   876ae:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   876b0:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   876b2:	e01b      	b.n	876ec <pio_configure_pin+0xfc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   876b4:	f000 021f 	and.w	r2, r0, #31
   876b8:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   876bc:	f005 5360 	and.w	r3, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   876c0:	ea05 0104 	and.w	r1, r5, r4
   876c4:	9100      	str	r1, [sp, #0]
   876c6:	4630      	mov	r0, r6
   876c8:	fa04 f102 	lsl.w	r1, r4, r2
   876cc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   876d0:	bf14      	ite	ne
   876d2:	2200      	movne	r2, #0
   876d4:	2201      	moveq	r2, #1
   876d6:	f3c5 0380 	ubfx	r3, r5, #2, #1
   876da:	f247 5561 	movw	r5, #30049	; 0x7561
   876de:	f2c0 0508 	movt	r5, #8
   876e2:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   876e4:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   876e6:	e001      	b.n	876ec <pio_configure_pin+0xfc>

	default:
		return 0;
   876e8:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   876ec:	b003      	add	sp, #12
   876ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000876f0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   876f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   876f2:	4604      	mov	r4, r0
   876f4:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   876f6:	f247 53e9 	movw	r3, #30185	; 0x75e9
   876fa:	f2c0 0308 	movt	r3, #8
   876fe:	4798      	blx	r3
   87700:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   87702:	4620      	mov	r0, r4
   87704:	f247 51ed 	movw	r1, #30189	; 0x75ed
   87708:	f2c0 0108 	movt	r1, #8
   8770c:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   8770e:	4005      	ands	r5, r0
   87710:	d014      	beq.n	8773c <pio_handler_process+0x4c>
   87712:	4c0b      	ldr	r4, [pc, #44]	; (87740 <pio_handler_process+0x50>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
   87714:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   87716:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   8771a:	42b0      	cmp	r0, r6
   8771c:	d10a      	bne.n	87734 <pio_handler_process+0x44>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8771e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   87722:	4229      	tst	r1, r5
   87724:	d006      	beq.n	87734 <pio_handler_process+0x44>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   87726:	6822      	ldr	r2, [r4, #0]
   87728:	4630      	mov	r0, r6
   8772a:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8772c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   87730:	ea25 0503 	bic.w	r5, r5, r3
   87734:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   87738:	2d00      	cmp	r5, #0
   8773a:	d1eb      	bne.n	87714 <pio_handler_process+0x24>
   8773c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8773e:	bf00      	nop
   87740:	20071544 	.word	0x20071544

00087744 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   87744:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   87746:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   8774a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8774e:	f04f 010b 	mov.w	r1, #11
   87752:	f247 63f1 	movw	r3, #30449	; 0x76f1
   87756:	f2c0 0308 	movt	r3, #8
   8775a:	4798      	blx	r3
   8775c:	bd08      	pop	{r3, pc}
   8775e:	bf00      	nop

00087760 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   87760:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   87762:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   87766:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8776a:	f04f 010c 	mov.w	r1, #12
   8776e:	f247 63f1 	movw	r3, #30449	; 0x76f1
   87772:	f2c0 0308 	movt	r3, #8
   87776:	4798      	blx	r3
   87778:	bd08      	pop	{r3, pc}
   8777a:	bf00      	nop

0008777c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8777c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8777e:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   87782:	f2c4 000e 	movt	r0, #16398	; 0x400e
   87786:	f04f 010d 	mov.w	r1, #13
   8778a:	f247 63f1 	movw	r3, #30449	; 0x76f1
   8778e:	f2c0 0308 	movt	r3, #8
   87792:	4798      	blx	r3
   87794:	bd08      	pop	{r3, pc}
   87796:	bf00      	nop

00087798 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   87798:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8779a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   8779e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   877a2:	f04f 010e 	mov.w	r1, #14
   877a6:	f247 63f1 	movw	r3, #30449	; 0x76f1
   877aa:	f2c0 0308 	movt	r3, #8
   877ae:	4798      	blx	r3
   877b0:	bd08      	pop	{r3, pc}
   877b2:	bf00      	nop

000877b4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   877b4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   877b8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   877bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   877be:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   877c2:	4308      	orrs	r0, r1
   877c4:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   877c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
   877c8:	f010 0f08 	tst.w	r0, #8
   877cc:	d007      	beq.n	877de <pmc_switch_mck_to_pllack+0x2a>
   877ce:	e010      	b.n	877f2 <pmc_switch_mck_to_pllack+0x3e>
   877d0:	f100 33ff 	add.w	r3, r0, #4294967295
   877d4:	6e90      	ldr	r0, [r2, #104]	; 0x68
   877d6:	f010 0f08 	tst.w	r0, #8
   877da:	d038      	beq.n	8784e <pmc_switch_mck_to_pllack+0x9a>
   877dc:	e009      	b.n	877f2 <pmc_switch_mck_to_pllack+0x3e>
   877de:	f44f 6000 	mov.w	r0, #2048	; 0x800
   877e2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   877e6:	f2c4 020e 	movt	r2, #16398	; 0x400e
   877ea:	6e91      	ldr	r1, [r2, #104]	; 0x68
   877ec:	f011 0f08 	tst.w	r1, #8
   877f0:	d0ee      	beq.n	877d0 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   877f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   877f6:	f2c4 010e 	movt	r1, #16398	; 0x400e
   877fa:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   877fc:	f022 0303 	bic.w	r3, r2, #3
   87800:	f043 0002 	orr.w	r0, r3, #2
   87804:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   87806:	6e89      	ldr	r1, [r1, #104]	; 0x68
   87808:	f011 0f08 	tst.w	r1, #8
   8780c:	d009      	beq.n	87822 <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   8780e:	f04f 0000 	mov.w	r0, #0
   87812:	4770      	bx	lr
   87814:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   87818:	6e91      	ldr	r1, [r2, #104]	; 0x68
   8781a:	f011 0f08 	tst.w	r1, #8
   8781e:	d013      	beq.n	87848 <pmc_switch_mck_to_pllack+0x94>
   87820:	e009      	b.n	87836 <pmc_switch_mck_to_pllack+0x82>
   87822:	f44f 6300 	mov.w	r3, #2048	; 0x800
   87826:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8782a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8782e:	6e90      	ldr	r0, [r2, #104]	; 0x68
   87830:	f010 0f08 	tst.w	r0, #8
   87834:	d0ee      	beq.n	87814 <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   87836:	f04f 0000 	mov.w	r0, #0
   8783a:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8783c:	f04f 0001 	mov.w	r0, #1
   87840:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   87842:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   87846:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   87848:	3b01      	subs	r3, #1
   8784a:	d1f0      	bne.n	8782e <pmc_switch_mck_to_pllack+0x7a>
   8784c:	e7f9      	b.n	87842 <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   8784e:	1e58      	subs	r0, r3, #1
   87850:	d1cb      	bne.n	877ea <pmc_switch_mck_to_pllack+0x36>
   87852:	e7f3      	b.n	8783c <pmc_switch_mck_to_pllack+0x88>

00087854 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   87854:	b188      	cbz	r0, 8787a <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   87856:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   8785a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8785e:	6a08      	ldr	r0, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   87860:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   87864:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   87868:	4002      	ands	r2, r0
   8786a:	f04f 0302 	mov.w	r3, #2
   8786e:	f2c0 1337 	movt	r3, #311	; 0x137
   87872:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   87876:	6208      	str	r0, [r1, #32]
   87878:	4770      	bx	lr
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8787a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8787e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87882:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   87884:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   87888:	f020 0203 	bic.w	r2, r0, #3
   8788c:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   87890:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   87894:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   87898:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8789c:	6218      	str	r0, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8789e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   878a2:	f2c4 020e 	movt	r2, #16398	; 0x400e
   878a6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   878a8:	f013 0f01 	tst.w	r3, #1
   878ac:	d0fb      	beq.n	878a6 <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   878ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   878b2:	f2c4 010e 	movt	r1, #16398	; 0x400e
   878b6:	6a08      	ldr	r0, [r1, #32]
   878b8:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   878bc:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   878c0:	620b      	str	r3, [r1, #32]
   878c2:	4770      	bx	lr

000878c4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   878c4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   878c8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   878cc:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   878ce:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   878d2:	4770      	bx	lr

000878d4 <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   878d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   878d8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   878dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   878e0:	629a      	str	r2, [r3, #40]	; 0x28
   878e2:	4770      	bx	lr

000878e4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   878e4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   878e8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   878ec:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   878ee:	f000 0002 	and.w	r0, r0, #2
   878f2:	4770      	bx	lr

000878f4 <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
   878f4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   878f8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   878fc:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
   87900:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   87902:	f44f 60c0 	mov.w	r0, #1536	; 0x600
   87906:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8790a:	6e81      	ldr	r1, [r0, #104]	; 0x68
   8790c:	f011 0f40 	tst.w	r1, #64	; 0x40
   87910:	d0fb      	beq.n	8790a <pmc_enable_upll_clock+0x16>
}
   87912:	4770      	bx	lr

00087914 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   87914:	282c      	cmp	r0, #44	; 0x2c
   87916:	d835      	bhi.n	87984 <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   87918:	281f      	cmp	r0, #31
   8791a:	d817      	bhi.n	8794c <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8791c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   87920:	f2c4 010e 	movt	r1, #16398	; 0x400e
   87924:	698a      	ldr	r2, [r1, #24]
   87926:	f04f 0301 	mov.w	r3, #1
   8792a:	fa03 f300 	lsl.w	r3, r3, r0
   8792e:	401a      	ands	r2, r3
   87930:	4293      	cmp	r3, r2
   87932:	d02a      	beq.n	8798a <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   87934:	f04f 0101 	mov.w	r1, #1
   87938:	fa01 f000 	lsl.w	r0, r1, r0
   8793c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   87940:	f2c4 020e 	movt	r2, #16398	; 0x400e
   87944:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   87946:	f04f 0000 	mov.w	r0, #0
   8794a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8794c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87950:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87954:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   87958:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8795c:	f04f 0101 	mov.w	r1, #1
   87960:	fa01 f100 	lsl.w	r1, r1, r0
   87964:	400a      	ands	r2, r1
   87966:	4291      	cmp	r1, r2
   87968:	d012      	beq.n	87990 <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   8796a:	f04f 0301 	mov.w	r3, #1
   8796e:	fa03 f000 	lsl.w	r0, r3, r0
   87972:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   87976:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8797a:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   8797e:	f04f 0000 	mov.w	r0, #0
   87982:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   87984:	f04f 0001 	mov.w	r0, #1
   87988:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8798a:	f04f 0000 	mov.w	r0, #0
   8798e:	4770      	bx	lr
   87990:	f04f 0000 	mov.w	r0, #0
}
   87994:	4770      	bx	lr
   87996:	bf00      	nop

00087998 <pmc_switch_udpck_to_upllck>:
 *
 * \param dw_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
   87998:	ea4f 2000 	mov.w	r0, r0, lsl #8
   8799c:	f400 6270 	and.w	r2, r0, #3840	; 0xf00
   879a0:	f042 0101 	orr.w	r1, r2, #1
   879a4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   879a8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   879ac:	6399      	str	r1, [r3, #56]	; 0x38
   879ae:	4770      	bx	lr

000879b0 <pmc_enable_udpck>:
void pmc_enable_udpck(void)
{
# if (SAM3S || SAM4S || SAM4E)
	PMC->PMC_SCER = PMC_SCER_UDP;
# else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
   879b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   879b4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   879b8:	f04f 0220 	mov.w	r2, #32
   879bc:	601a      	str	r2, [r3, #0]
   879be:	4770      	bx	lr

000879c0 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   879c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   879c4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   879c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   879ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   879ce:	f420 0178 	bic.w	r1, r0, #16252928	; 0xf80000
	PMC->PMC_FSMR |= ul_inputs;
   879d2:	430a      	orrs	r2, r1
   879d4:	671a      	str	r2, [r3, #112]	; 0x70
   879d6:	4770      	bx	lr

000879d8 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_fastrc_used;
   879d8:	f241 53a8 	movw	r3, #5544	; 0x15a8
   879dc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   879e0:	7818      	ldrb	r0, [r3, #0]
}
   879e2:	f080 0001 	eor.w	r0, r0, #1
   879e6:	4770      	bx	lr

000879e8 <udd_sleep_mode>:
 *
 * \param b_enable true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   879e8:	4603      	mov	r3, r0
   879ea:	2800      	cmp	r0, #0
   879ec:	d149      	bne.n	87a82 <udd_sleep_mode+0x9a>
   879ee:	f241 52ac 	movw	r2, #5548	; 0x15ac
   879f2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   879f6:	7811      	ldrb	r1, [r2, #0]
   879f8:	2900      	cmp	r1, #0
   879fa:	d03c      	beq.n	87a76 <udd_sleep_mode+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   879fc:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87a00:	b672      	cpsid	i
   87a02:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87a06:	f240 22a0 	movw	r2, #672	; 0x2a0
   87a0a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87a0e:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   87a10:	f641 42a4 	movw	r2, #7332	; 0x1ca4
   87a14:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87a18:	7890      	ldrb	r0, [r2, #2]
   87a1a:	f100 30ff 	add.w	r0, r0, #4294967295
   87a1e:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87a20:	bb49      	cbnz	r1, 87a76 <udd_sleep_mode+0x8e>
		cpu_irq_enable();
   87a22:	f240 22a0 	movw	r2, #672	; 0x2a0
   87a26:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87a2a:	f04f 0101 	mov.w	r1, #1
   87a2e:	7011      	strb	r1, [r2, #0]
   87a30:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87a34:	b662      	cpsie	i
   87a36:	e01e      	b.n	87a76 <udd_sleep_mode+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87a38:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87a3c:	b672      	cpsid	i
   87a3e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87a42:	f240 22a0 	movw	r2, #672	; 0x2a0
   87a46:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87a4a:	f04f 0000 	mov.w	r0, #0
   87a4e:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   87a50:	f641 42a4 	movw	r2, #7332	; 0x1ca4
   87a54:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87a58:	7890      	ldrb	r0, [r2, #2]
   87a5a:	f100 0001 	add.w	r0, r0, #1
   87a5e:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87a60:	b949      	cbnz	r1, 87a76 <udd_sleep_mode+0x8e>
		cpu_irq_enable();
   87a62:	f240 22a0 	movw	r2, #672	; 0x2a0
   87a66:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87a6a:	f04f 0101 	mov.w	r1, #1
   87a6e:	7011      	strb	r1, [r2, #0]
   87a70:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87a74:	b662      	cpsie	i
	}
	if (b_idle && !udd_b_idle) {
		dbg_print("_W ");
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
   87a76:	f241 50ac 	movw	r0, #5548	; 0x15ac
   87a7a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87a7e:	7003      	strb	r3, [r0, #0]
   87a80:	4770      	bx	lr
{
	if (!b_idle && udd_b_idle) {
		dbg_print("_S ");
		sleepmgr_unlock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   87a82:	f241 52ac 	movw	r2, #5548	; 0x15ac
   87a86:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87a8a:	7810      	ldrb	r0, [r2, #0]
   87a8c:	2800      	cmp	r0, #0
   87a8e:	d0d3      	beq.n	87a38 <udd_sleep_mode+0x50>
   87a90:	e7f1      	b.n	87a76 <udd_sleep_mode+0x8e>
   87a92:	bf00      	nop

00087a94 <udd_ctrl_init>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87a94:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87a98:	b672      	cpsid	i
   87a9a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87a9e:	f240 23a0 	movw	r3, #672	; 0x2a0
   87aa2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87aa6:	f04f 0100 	mov.w	r1, #0
   87aaa:	7019      	strb	r1, [r3, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   87aac:	f24c 2020 	movw	r0, #49696	; 0xc220
   87ab0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87ab4:	f04f 0101 	mov.w	r1, #1
   87ab8:	6001      	str	r1, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87aba:	b93a      	cbnz	r2, 87acc <udd_ctrl_init+0x38>
		cpu_irq_enable();
   87abc:	f240 23a0 	movw	r3, #672	; 0x2a0
   87ac0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87ac4:	7019      	strb	r1, [r3, #0]
   87ac6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87aca:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   87acc:	f24c 1060 	movw	r0, #49504	; 0xc160
   87ad0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87ad4:	f04f 0102 	mov.w	r1, #2
   87ad8:	6001      	str	r1, [r0, #0]

	udd_g_ctrlreq.callback = NULL;
   87ada:	f641 42ac 	movw	r2, #7340	; 0x1cac
   87ade:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87ae2:	f04f 0300 	mov.w	r3, #0
   87ae6:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   87ae8:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   87aea:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   87aec:	f241 6128 	movw	r1, #5672	; 0x1628
   87af0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87af4:	700b      	strb	r3, [r1, #0]
   87af6:	4770      	bx	lr

00087af8 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   87af8:	f241 6328 	movw	r3, #5672	; 0x1628
   87afc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87b00:	f04f 0205 	mov.w	r2, #5
   87b04:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   87b06:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   87b0a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87b0e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   87b12:	6001      	str	r1, [r0, #0]
   87b14:	4770      	bx	lr
   87b16:	bf00      	nop

00087b18 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   87b18:	f241 6328 	movw	r3, #5672	; 0x1628
   87b1c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87b20:	f04f 0203 	mov.w	r2, #3
   87b24:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87b26:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87b2a:	b672      	cpsid	i
   87b2c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87b30:	f240 21a0 	movw	r1, #672	; 0x2a0
   87b34:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87b38:	f04f 0300 	mov.w	r3, #0
   87b3c:	700b      	strb	r3, [r1, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   87b3e:	f24c 1260 	movw	r2, #49504	; 0xc160
   87b42:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87b46:	f04f 0101 	mov.w	r1, #1
   87b4a:	6011      	str	r1, [r2, #0]
	udd_enable_in_send_interrupt(0);
   87b4c:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   87b50:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87b54:	6019      	str	r1, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   87b56:	f04f 0108 	mov.w	r1, #8
   87b5a:	6011      	str	r1, [r2, #0]
	udd_enable_nak_out_interrupt(0);
   87b5c:	6019      	str	r1, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87b5e:	b948      	cbnz	r0, 87b74 <udd_ctrl_send_zlp_in+0x5c>
		cpu_irq_enable();
   87b60:	f240 20a0 	movw	r0, #672	; 0x2a0
   87b64:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87b68:	f04f 0201 	mov.w	r2, #1
   87b6c:	7002      	strb	r2, [r0, #0]
   87b6e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87b72:	b662      	cpsie	i
   87b74:	4770      	bx	lr
   87b76:	bf00      	nop

00087b78 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   87b78:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   87b7a:	f641 43ac 	movw	r3, #7340	; 0x1cac
   87b7e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87b82:	6918      	ldr	r0, [r3, #16]
   87b84:	b100      	cbz	r0, 87b88 <udd_ctrl_endofrequest+0x10>
		udd_g_ctrlreq.callback();
   87b86:	4780      	blx	r0
   87b88:	bd08      	pop	{r3, pc}
   87b8a:	bf00      	nop

00087b8c <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
   87b8c:	b570      	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87b8e:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87b92:	b672      	cpsid	i
   87b94:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87b98:	f240 23a0 	movw	r3, #672	; 0x2a0
   87b9c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87ba0:	f04f 0100 	mov.w	r1, #0
   87ba4:	7019      	strb	r1, [r3, #0]
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
   87ba6:	f24c 2020 	movw	r0, #49696	; 0xc220
   87baa:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87bae:	f04f 0101 	mov.w	r1, #1
   87bb2:	6001      	str	r1, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87bb4:	b93a      	cbnz	r2, 87bc6 <udd_ctrl_in_sent+0x3a>
		cpu_irq_enable();
   87bb6:	f240 23a0 	movw	r3, #672	; 0x2a0
   87bba:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87bbe:	7019      	strb	r1, [r3, #0]
   87bc0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87bc4:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   87bc6:	f241 6028 	movw	r0, #5672	; 0x1628
   87bca:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87bce:	7801      	ldrb	r1, [r0, #0]
   87bd0:	2903      	cmp	r1, #3
   87bd2:	d10a      	bne.n	87bea <udd_ctrl_in_sent+0x5e>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   87bd4:	f647 3279 	movw	r2, #31609	; 0x7b79
   87bd8:	f2c0 0208 	movt	r2, #8
   87bdc:	4790      	blx	r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
   87bde:	f647 2095 	movw	r0, #31381	; 0x7a95
   87be2:	f2c0 0008 	movt	r0, #8
   87be6:	4780      	blx	r0
		return;
   87be8:	bd70      	pop	{r4, r5, r6, pc}
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   87bea:	f241 642a 	movw	r4, #5674	; 0x162a
   87bee:	f2c2 0407 	movt	r4, #8199	; 0x2007
   87bf2:	8823      	ldrh	r3, [r4, #0]
   87bf4:	f641 42ac 	movw	r2, #7340	; 0x1cac
   87bf8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87bfc:	8990      	ldrh	r0, [r2, #12]
   87bfe:	1ac1      	subs	r1, r0, r3
   87c00:	b28c      	uxth	r4, r1
	if (0 == nb_remain) {
   87c02:	2c00      	cmp	r4, #0
   87c04:	d155      	bne.n	87cb2 <udd_ctrl_in_sent+0x126>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous playlaod buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   87c06:	f241 52aa 	movw	r2, #5546	; 0x15aa
   87c0a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87c0e:	8810      	ldrh	r0, [r2, #0]
   87c10:	181b      	adds	r3, r3, r0
   87c12:	b299      	uxth	r1, r3
   87c14:	8011      	strh	r1, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   87c16:	f641 42ac 	movw	r2, #7340	; 0x1cac
   87c1a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87c1e:	88d0      	ldrh	r0, [r2, #6]
   87c20:	4288      	cmp	r0, r1
   87c22:	d005      	beq.n	87c30 <udd_ctrl_in_sent+0xa4>
					|| b_shortpacket) {
   87c24:	f241 53ad 	movw	r3, #5549	; 0x15ad
   87c28:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87c2c:	7819      	ldrb	r1, [r3, #0]
   87c2e:	b361      	cbz	r1, 87c8a <udd_ctrl_in_sent+0xfe>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   87c30:	f241 6028 	movw	r0, #5672	; 0x1628
   87c34:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87c38:	f04f 0204 	mov.w	r2, #4
   87c3c:	7002      	strb	r2, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87c3e:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87c42:	b672      	cpsid	i
   87c44:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87c48:	f240 23a0 	movw	r3, #672	; 0x2a0
   87c4c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87c50:	f04f 0000 	mov.w	r0, #0
   87c54:	7018      	strb	r0, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
   87c56:	f24c 1360 	movw	r3, #49504	; 0xc160
   87c5a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87c5e:	f04f 0210 	mov.w	r2, #16
   87c62:	601a      	str	r2, [r3, #0]
	udd_enable_nak_in_interrupt(0);
   87c64:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   87c68:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87c6c:	6002      	str	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87c6e:	2900      	cmp	r1, #0
   87c70:	f040 80a7 	bne.w	87dc2 <udd_ctrl_in_sent+0x236>
		cpu_irq_enable();
   87c74:	f240 21a0 	movw	r1, #672	; 0x2a0
   87c78:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87c7c:	f04f 0301 	mov.w	r3, #1
   87c80:	700b      	strb	r3, [r1, #0]
   87c82:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87c86:	b662      	cpsie	i
   87c88:	bd70      	pop	{r4, r5, r6, pc}
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   87c8a:	f641 45ac 	movw	r5, #7340	; 0x1cac
   87c8e:	f2c2 0507 	movt	r5, #8199	; 0x2007
   87c92:	696e      	ldr	r6, [r5, #20]
   87c94:	b1ce      	cbz	r6, 87cca <udd_ctrl_in_sent+0x13e>
				|| (!udd_g_ctrlreq.over_under_run())) {
   87c96:	47b0      	blx	r6
   87c98:	b1b8      	cbz	r0, 87cca <udd_ctrl_in_sent+0x13e>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   87c9a:	f241 642a 	movw	r4, #5674	; 0x162a
   87c9e:	f2c2 0407 	movt	r4, #8199	; 0x2007
   87ca2:	f04f 0200 	mov.w	r2, #0
   87ca6:	8022      	strh	r2, [r4, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   87ca8:	f641 40ac 	movw	r0, #7340	; 0x1cac
   87cac:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87cb0:	8984      	ldrh	r4, [r0, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   87cb2:	2c3f      	cmp	r4, #63	; 0x3f
   87cb4:	d909      	bls.n	87cca <udd_ctrl_in_sent+0x13e>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
   87cb6:	f241 53ad 	movw	r3, #5549	; 0x15ad
   87cba:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87cbe:	f04f 0100 	mov.w	r1, #0
   87cc2:	7019      	strb	r1, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   87cc4:	f04f 0440 	mov.w	r4, #64	; 0x40
   87cc8:	e006      	b.n	87cd8 <udd_ctrl_in_sent+0x14c>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
   87cca:	f241 55ad 	movw	r5, #5549	; 0x15ad
   87cce:	f2c2 0507 	movt	r5, #8199	; 0x2007
   87cd2:	f04f 0601 	mov.w	r6, #1
   87cd6:	702e      	strb	r6, [r5, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   87cd8:	f641 42ac 	movw	r2, #7340	; 0x1cac
   87cdc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87ce0:	6890      	ldr	r0, [r2, #8]
   87ce2:	f241 632a 	movw	r3, #5674	; 0x162a
   87ce6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87cea:	881e      	ldrh	r6, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87cec:	f3ef 8110 	mrs	r1, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   87cf0:	f1d1 0501 	rsbs	r5, r1, #1
   87cf4:	bf38      	it	cc
   87cf6:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87cf8:	b672      	cpsid	i
   87cfa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   87cfe:	f240 22a0 	movw	r2, #672	; 0x2a0
   87d02:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87d06:	f04f 0300 	mov.w	r3, #0
   87d0a:	7013      	strb	r3, [r2, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
   87d0c:	f24c 1130 	movw	r1, #49456	; 0xc130
   87d10:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87d14:	680a      	ldr	r2, [r1, #0]
   87d16:	f012 0f02 	tst.w	r2, #2
   87d1a:	d101      	bne.n	87d20 <udd_ctrl_in_sent+0x194>
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   87d1c:	b99c      	cbnz	r4, 87d46 <udd_ctrl_in_sent+0x1ba>
   87d1e:	e035      	b.n	87d8c <udd_ctrl_in_sent+0x200>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87d20:	b14d      	cbz	r5, 87d36 <udd_ctrl_in_sent+0x1aa>
		cpu_irq_enable();
   87d22:	f240 20a0 	movw	r0, #672	; 0x2a0
   87d26:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87d2a:	f04f 0201 	mov.w	r2, #1
   87d2e:	7002      	strb	r2, [r0, #0]
   87d30:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87d34:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   87d36:	f241 6128 	movw	r1, #5672	; 0x1628
   87d3a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87d3e:	f04f 0304 	mov.w	r3, #4
   87d42:	700b      	strb	r3, [r1, #0]
		return; // Exit of IN DATA phase
   87d44:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   87d46:	1982      	adds	r2, r0, r6
		cpu_irq_restore(flags);
	}
}


static void udd_ctrl_in_sent(void)
   87d48:	f04f 0300 	mov.w	r3, #0
   87d4c:	f2c2 0318 	movt	r3, #8216	; 0x2018
   87d50:	ea6f 0003 	mvn.w	r0, r3
   87d54:	1901      	adds	r1, r0, r4
   87d56:	f001 0001 	and.w	r0, r1, #1
   87d5a:	f102 32ff 	add.w	r2, r2, #4294967295
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
   87d5e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   87d62:	f803 1b01 	strb.w	r1, [r3], #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   87d66:	b2d9      	uxtb	r1, r3
   87d68:	42a1      	cmp	r1, r4
   87d6a:	d32b      	bcc.n	87dc4 <udd_ctrl_in_sent+0x238>
   87d6c:	e00e      	b.n	87d8c <udd_ctrl_in_sent+0x200>
   87d6e:	f102 0001 	add.w	r0, r2, #1
		*ptr_dest++ = *ptr_src++;
   87d72:	7852      	ldrb	r2, [r2, #1]
   87d74:	4619      	mov	r1, r3
   87d76:	f801 2b01 	strb.w	r2, [r1], #1
   87d7a:	f100 0201 	add.w	r2, r0, #1
   87d7e:	7840      	ldrb	r0, [r0, #1]
   87d80:	7058      	strb	r0, [r3, #1]
   87d82:	f101 0301 	add.w	r3, r1, #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   87d86:	b2d9      	uxtb	r1, r3
   87d88:	42a1      	cmp	r1, r4
   87d8a:	d3f0      	bcc.n	87d6e <udd_ctrl_in_sent+0x1e2>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   87d8c:	19a4      	adds	r4, r4, r6
   87d8e:	f241 632a 	movw	r3, #5674	; 0x162a
   87d92:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87d96:	801c      	strh	r4, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   87d98:	f24c 1060 	movw	r0, #49504	; 0xc160
   87d9c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87da0:	f04f 0201 	mov.w	r2, #1
   87da4:	6002      	str	r2, [r0, #0]
	udd_enable_in_send_interrupt(0);
   87da6:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   87daa:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87dae:	600a      	str	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87db0:	b13d      	cbz	r5, 87dc2 <udd_ctrl_in_sent+0x236>
		cpu_irq_enable();
   87db2:	f240 23a0 	movw	r3, #672	; 0x2a0
   87db6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87dba:	701a      	strb	r2, [r3, #0]
   87dbc:	f3bf 8f5f 	dmb	sy
   87dc0:	b662      	cpsie	i
   87dc2:	bd70      	pop	{r4, r5, r6, pc}
   87dc4:	b240      	sxtb	r0, r0
   87dc6:	2800      	cmp	r0, #0
   87dc8:	d0d1      	beq.n	87d6e <udd_ctrl_in_sent+0x1e2>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
   87dca:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   87dce:	f803 1b01 	strb.w	r1, [r3], #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   87dd2:	b2d8      	uxtb	r0, r3
   87dd4:	42a0      	cmp	r0, r4
   87dd6:	d3ca      	bcc.n	87d6e <udd_ctrl_in_sent+0x1e2>
   87dd8:	e7d8      	b.n	87d8c <udd_ctrl_in_sent+0x200>
   87dda:	bf00      	nop

00087ddc <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   87ddc:	b538      	push	{r3, r4, r5, lr}
   87dde:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
   87de0:	7d04      	ldrb	r4, [r0, #20]
   87de2:	f014 0f01 	tst.w	r4, #1
   87de6:	d013      	beq.n	87e10 <udd_ep_finish_job+0x34>
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
   87de8:	7d04      	ldrb	r4, [r0, #20]
   87dea:	f36f 0400 	bfc	r4, #0, #1
   87dee:	7504      	strb	r4, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   87df0:	6804      	ldr	r4, [r0, #0]
   87df2:	b16c      	cbz	r4, 87e10 <udd_ep_finish_job+0x34>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   87df4:	f44f 4541 	mov.w	r5, #49408	; 0xc100
   87df8:	f2c4 050a 	movt	r5, #16394	; 0x400a
   87dfc:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
   87e00:	f410 7f80 	tst.w	r0, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
   87e04:	bf18      	it	ne
   87e06:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   87e0a:	4608      	mov	r0, r1
   87e0c:	6899      	ldr	r1, [r3, #8]
   87e0e:	47a0      	blx	r4
   87e10:	bd38      	pop	{r3, r4, r5, pc}
   87e12:	bf00      	nop

00087e14 <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   87e14:	b508      	push	{r3, lr}
	ep &= USB_EP_ADDR_MASK;
   87e16:	f000 020f 	and.w	r2, r0, #15

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   87e1a:	f102 30ff 	add.w	r0, r2, #4294967295
   87e1e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   87e22:	f241 53b0 	movw	r3, #5552	; 0x15b0
   87e26:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87e2a:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
   87e2e:	f04f 0101 	mov.w	r1, #1
   87e32:	f647 53dd 	movw	r3, #32221	; 0x7ddd
   87e36:	f2c0 0308 	movt	r3, #8
   87e3a:	4798      	blx	r3
   87e3c:	bd08      	pop	{r3, pc}
   87e3e:	bf00      	nop

00087e40 <udd_ep_trans_done>:
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

#ifdef UDD_EP_DMA_SUPPORTED
static void udd_ep_trans_done(udd_ep_id_t ep)
{
   87e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87e42:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   87e44:	f100 31ff 	add.w	r1, r0, #4294967295
   87e48:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   87e4c:	f241 53b0 	movw	r3, #5552	; 0x15b0
   87e50:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87e54:	eb03 03c0 	add.w	r3, r3, r0, lsl #3

	if (!ptr_job->busy) {
   87e58:	7d18      	ldrb	r0, [r3, #20]
   87e5a:	f010 0f01 	tst.w	r0, #1
   87e5e:	f000 80c6 	beq.w	87fee <udd_ep_trans_done+0x1ae>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   87e62:	68dc      	ldr	r4, [r3, #12]
   87e64:	689d      	ldr	r5, [r3, #8]
   87e66:	42ac      	cmp	r4, r5
   87e68:	f000 8082 	beq.w	87f70 <udd_ep_trans_done+0x130>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   87e6c:	1b2d      	subs	r5, r5, r4

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   87e6e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   87e72:	bf92      	itee	ls
   87e74:	042e      	lslls	r6, r5, #16
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   87e76:	f44f 3580 	movhi.w	r5, #65536	; 0x10000

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
   87e7a:	2600      	movhi	r6, #0
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
		}
		if (Is_udd_endpoint_in(ep)) {
   87e7c:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   87e80:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87e84:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   87e88:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
   87e8c:	f417 7f80 	tst.w	r7, #256	; 0x100
   87e90:	d011      	beq.n	87eb6 <udd_ep_trans_done+0x76>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   87e92:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
   87e96:	f3c7 1002 	ubfx	r0, r7, #4, #3
   87e9a:	f04f 0708 	mov.w	r7, #8
   87e9e:	fa07 f000 	lsl.w	r0, r7, r0
   87ea2:	f100 30ff 	add.w	r0, r0, #4294967295
   87ea6:	4205      	tst	r5, r0
   87ea8:	d017      	beq.n	87eda <udd_ep_trans_done+0x9a>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
   87eaa:	433e      	orrs	r6, r7
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   87eac:	7d1f      	ldrb	r7, [r3, #20]
   87eae:	f36f 0741 	bfc	r7, #1, #1
   87eb2:	751f      	strb	r7, [r3, #20]
   87eb4:	e011      	b.n	87eda <udd_ep_trans_done+0x9a>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   87eb6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
   87eba:	f3c0 27c1 	ubfx	r7, r0, #11, #2
   87ebe:	2f01      	cmp	r7, #1
   87ec0:	d109      	bne.n	87ed6 <udd_ep_trans_done+0x96>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   87ec2:	f8dc 0000 	ldr.w	r0, [ip]
   87ec6:	f3c0 1002 	ubfx	r0, r0, #4, #3
   87eca:	f04f 0708 	mov.w	r7, #8
   87ece:	fa07 f000 	lsl.w	r0, r7, r0
   87ed2:	4285      	cmp	r5, r0
   87ed4:	d801      	bhi.n	87eda <udd_ep_trans_done+0x9a>

				// Enable short packet reception
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   87ed6:	f046 0614 	orr.w	r6, r6, #20
						| UOTGHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   87eda:	f44f 4043 	mov.w	r0, #49920	; 0xc300
   87ede:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87ee2:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   87ee6:	685f      	ldr	r7, [r3, #4]
   87ee8:	193c      	adds	r4, r7, r4
   87eea:	6044      	str	r4, [r0, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87eec:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   87ef0:	f1d7 0c01 	rsbs	ip, r7, #1
   87ef4:	bf38      	it	cc
   87ef6:	f04f 0c00 	movcc.w	ip, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87efa:	b672      	cpsid	i
   87efc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   87f00:	f240 24a0 	movw	r4, #672	; 0x2a0
   87f04:	f2c2 0407 	movt	r4, #8199	; 0x2007
   87f08:	f04f 0700 	mov.w	r7, #0
   87f0c:	7027      	strb	r7, [r4, #0]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   87f0e:	68c4      	ldr	r4, [r0, #12]
   87f10:	f014 0f10 	tst.w	r4, #16
   87f14:	d11d      	bne.n	87f52 <udd_ep_trans_done+0x112>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   87f16:	f046 0621 	orr.w	r6, r6, #33	; 0x21
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
				& UOTGHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   87f1a:	6086      	str	r6, [r0, #8]
			ptr_job->buf_cnt += next_trans;
   87f1c:	68da      	ldr	r2, [r3, #12]
   87f1e:	1950      	adds	r0, r2, r5
   87f20:	60d8      	str	r0, [r3, #12]
			ptr_job->buf_load = next_trans;
   87f22:	611d      	str	r5, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   87f24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   87f28:	fa03 f101 	lsl.w	r1, r3, r1
   87f2c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   87f30:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87f34:	6191      	str	r1, [r2, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87f36:	f1bc 0f00 	cmp.w	ip, #0
   87f3a:	d058      	beq.n	87fee <udd_ep_trans_done+0x1ae>
		cpu_irq_enable();
   87f3c:	f240 20a0 	movw	r0, #672	; 0x2a0
   87f40:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87f44:	f04f 0301 	mov.w	r3, #1
   87f48:	7003      	strb	r3, [r0, #0]
   87f4a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87f4e:	b662      	cpsie	i
   87f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87f52:	f1bc 0f00 	cmp.w	ip, #0
   87f56:	d009      	beq.n	87f6c <udd_ep_trans_done+0x12c>
		cpu_irq_enable();
   87f58:	f240 21a0 	movw	r1, #672	; 0x2a0
   87f5c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87f60:	f04f 0001 	mov.w	r0, #1
   87f64:	7008      	strb	r0, [r1, #0]
   87f66:	f3bf 8f5f 	dmb	sy
   87f6a:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   87f6c:	68d9      	ldr	r1, [r3, #12]
   87f6e:	6099      	str	r1, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   87f70:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   87f74:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87f78:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
   87f7c:	f411 7f80 	tst.w	r1, #256	; 0x100
   87f80:	d02d      	beq.n	87fde <udd_ep_trans_done+0x19e>
		if (ptr_job->b_shortpacket) {
   87f82:	7d18      	ldrb	r0, [r3, #20]
   87f84:	f000 0102 	and.w	r1, r0, #2
   87f88:	b2c8      	uxtb	r0, r1
   87f8a:	b340      	cbz	r0, 87fde <udd_ep_trans_done+0x19e>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
   87f8c:	f24c 1060 	movw	r0, #49504	; 0xc160
   87f90:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87f94:	f04f 0101 	mov.w	r1, #1
   87f98:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			if (Is_udd_write_enabled(ep)) {
   87f9c:	f24c 1330 	movw	r3, #49456	; 0xc130
   87fa0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87fa4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   87fa8:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   87fac:	d005      	beq.n	87fba <udd_ep_trans_done+0x17a>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
   87fae:	f24c 1390 	movw	r3, #49552	; 0xc190
   87fb2:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
   87fba:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   87fbe:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87fc2:	f04f 0101 	mov.w	r1, #1
   87fc6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			udd_enable_endpoint_interrupt(ep);
   87fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   87fce:	fa03 f202 	lsl.w	r2, r3, r2
   87fd2:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87fd6:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87fda:	6182      	str	r2, [r0, #24]
			return;
   87fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   87fde:	4618      	mov	r0, r3
   87fe0:	f04f 0100 	mov.w	r1, #0
   87fe4:	f647 53dd 	movw	r3, #32221	; 0x7ddd
   87fe8:	f2c0 0308 	movt	r3, #8
   87fec:	4798      	blx	r3
   87fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00087ff0 <udd_enable>:
	return true;
}


void udd_enable(void)
{
   87ff0:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87ff2:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87ff6:	b672      	cpsid	i
   87ff8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87ffc:	f240 23a0 	movw	r3, #672	; 0x2a0
   88000:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88004:	f04f 0200 	mov.w	r2, #0
   88008:	701a      	strb	r2, [r3, #0]
		cpu_irq_restore(flags);
		return;
	}
#else
	// SINGLE DEVICE MODE INITIALIZATION
	pmc_enable_periph_clk(ID_UOTGHS);
   8800a:	f04f 0028 	mov.w	r0, #40	; 0x28
   8800e:	f647 1115 	movw	r1, #30997	; 0x7915
   88012:	f2c0 0108 	movt	r1, #8
   88016:	4788      	blx	r1
	sysclk_enable_usb();
   88018:	f245 2021 	movw	r0, #21025	; 0x5221
   8801c:	f2c0 0008 	movt	r0, #8
   88020:	4780      	blx	r0
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   88022:	f44f 4361 	mov.w	r3, #57600	; 0xe100
   88026:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8802a:	f04f 0250 	mov.w	r2, #80	; 0x50
   8802e:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   88032:	f44f 7180 	mov.w	r1, #256	; 0x100
   88036:	6059      	str	r1, [r3, #4]
	NVIC_SetPriority((IRQn_Type) ID_UOTGHS, UDD_USB_INT_LEVEL);
	NVIC_EnableIRQ((IRQn_Type) ID_UOTGHS);

	// Always authorize asynchrone USB interrupts to exit of sleep mode
	// For SAM USB wake up device except BACKUP mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   88038:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   8803c:	f647 13c1 	movw	r3, #31169	; 0x79c1
   88040:	f2c0 0308 	movt	r3, #8
   88044:	4798      	blx	r3
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
#else
	// ID pin not used then force device mode
	otg_disable_id_pin();
   88046:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   8804a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8804e:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
   88052:	f022 7180 	bic.w	r1, r2, #16777216	; 0x1000000
   88056:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
	otg_force_device_mode();
   8805a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   8805e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
   88062:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
   88066:	f8d0 1800 	ldr.w	r1, [r0, #2048]	; 0x800
   8806a:	f021 7380 	bic.w	r3, r1, #16777216	; 0x1000000
   8806e:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
#endif
	// Enable USB hardware
	otg_enable_pad();
   88072:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
   88076:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
   8807a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
	otg_enable();
   8807e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   88082:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
   88086:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
   8808a:	6801      	ldr	r1, [r0, #0]
   8808c:	f421 5380 	bic.w	r3, r1, #4096	; 0x1000
   88090:	6003      	str	r3, [r0, #0]
# ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   88092:	6802      	ldr	r2, [r0, #0]
   88094:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
   88098:	6001      	str	r1, [r0, #0]
	udd_high_speed_disable();
# endif
#endif // USB_DEVICE_LOW_SPEED

	// Check USB clock
	otg_unfreeze_clock();
   8809a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   8809e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
   880a2:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   880a6:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   880aa:	f2c4 000a 	movt	r0, #16394	; 0x400a
   880ae:	f8d0 1804 	ldr.w	r1, [r0, #2052]	; 0x804
   880b2:	f411 4f80 	tst.w	r1, #16384	; 0x4000
   880b6:	d0fa      	beq.n	880ae <udd_enable+0xbe>

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   880b8:	f241 53b0 	movw	r3, #5552	; 0x15b0
   880bc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   880c0:	7d1a      	ldrb	r2, [r3, #20]
		udd_ep_job[i].stall_requested = false;
   880c2:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
   880c6:	f36f 0082 	bfc	r0, #2, #1
   880ca:	7518      	strb	r0, [r3, #20]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   880cc:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
		udd_ep_job[i].stall_requested = false;
   880d0:	f001 02fe 	and.w	r2, r1, #254	; 0xfe
   880d4:	f36f 0282 	bfc	r2, #2, #1
   880d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   880dc:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
		udd_ep_job[i].stall_requested = false;
   880e0:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
   880e4:	f36f 0182 	bfc	r1, #2, #1
   880e8:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   880ec:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
		udd_ep_job[i].stall_requested = false;
   880f0:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
   880f4:	f36f 0082 	bfc	r0, #2, #1
   880f8:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   880fc:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
		udd_ep_job[i].stall_requested = false;
   88100:	f001 02fe 	and.w	r2, r1, #254	; 0xfe
   88104:	f36f 0282 	bfc	r2, #2, #1
   88108:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
#endif

	otg_ack_vbus_transition();
   8810c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88110:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88114:	f04f 0002 	mov.w	r0, #2
   88118:	f8c3 0808 	str.w	r0, [r3, #2056]	; 0x808
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
   8811c:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
   88120:	f411 6f00 	tst.w	r1, #2048	; 0x800
   88124:	d005      	beq.n	88132 <udd_enable+0x142>
		otg_raise_vbus_transition();
   88126:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   8812a:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8812e:	f8c2 080c 	str.w	r0, [r2, #2060]	; 0x80c
	}
	otg_enable_vbus_interrupt();
   88132:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88136:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8813a:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
   8813e:	f040 0102 	orr.w	r1, r0, #2
   88142:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	otg_freeze_clock();
   88146:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8814a:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   8814e:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800

#ifndef UDD_NO_SLEEP_MGR
	if (!udd_b_sleep_initialized) {
   88152:	f241 53a9 	movw	r3, #5545	; 0x15a9
   88156:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8815a:	7819      	ldrb	r1, [r3, #0]
   8815c:	bb59      	cbnz	r1, 881b6 <udd_enable+0x1c6>
		udd_b_sleep_initialized = true;
   8815e:	f241 50a9 	movw	r0, #5545	; 0x15a9
   88162:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88166:	f04f 0301 	mov.w	r3, #1
   8816a:	7003      	strb	r3, [r0, #0]
		// Initialize the sleep mode authorized for the USB suspend mode
		udd_b_idle = false;
   8816c:	f04f 0000 	mov.w	r0, #0
   88170:	f241 51ac 	movw	r1, #5548	; 0x15ac
   88174:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88178:	7008      	strb	r0, [r1, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8817a:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8817e:	b672      	cpsid	i
   88180:	f3bf 8f5f 	dmb	sy
   88184:	f240 23a0 	movw	r3, #672	; 0x2a0
   88188:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8818c:	7018      	strb	r0, [r3, #0]
   8818e:	f641 40a4 	movw	r0, #7332	; 0x1ca4
   88192:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88196:	78c1      	ldrb	r1, [r0, #3]
   88198:	f101 0101 	add.w	r1, r1, #1
   8819c:	70c1      	strb	r1, [r0, #3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8819e:	b98a      	cbnz	r2, 881c4 <udd_enable+0x1d4>
		cpu_irq_enable();
   881a0:	f240 23a0 	movw	r3, #672	; 0x2a0
   881a4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   881a8:	f04f 0201 	mov.w	r2, #1
   881ac:	701a      	strb	r2, [r3, #0]
   881ae:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   881b2:	b662      	cpsie	i
   881b4:	e006      	b.n	881c4 <udd_enable+0x1d4>
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_SUSPEND);
	} else {
		udd_sleep_mode(false); // Enter idle mode
   881b6:	f04f 0000 	mov.w	r0, #0
   881ba:	f647 12e9 	movw	r2, #31209	; 0x79e9
   881be:	f2c0 0208 	movt	r2, #8
   881c2:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   881c4:	b94c      	cbnz	r4, 881da <udd_enable+0x1ea>
		cpu_irq_enable();
   881c6:	f240 20a0 	movw	r0, #672	; 0x2a0
   881ca:	f2c2 0007 	movt	r0, #8199	; 0x2007
   881ce:	f04f 0101 	mov.w	r1, #1
   881d2:	7001      	strb	r1, [r0, #0]
   881d4:	f3bf 8f5f 	dmb	sy
   881d8:	b662      	cpsie	i
   881da:	bd10      	pop	{r4, pc}

000881dc <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   881dc:	b570      	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   881de:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   881e2:	b672      	cpsid	i
   881e4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   881e8:	f240 23a0 	movw	r3, #672	; 0x2a0
   881ec:	f2c2 0307 	movt	r3, #8199	; 0x2007
   881f0:	f04f 0200 	mov.w	r2, #0
   881f4:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   881f6:	f04f 0001 	mov.w	r0, #1
   881fa:	f647 11e9 	movw	r1, #31209	; 0x79e9
   881fe:	f2c0 0108 	movt	r1, #8
   88202:	4788      	blx	r1
	otg_unfreeze_clock();
   88204:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88208:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8820c:	f8d0 5800 	ldr.w	r5, [r0, #2048]	; 0x800
   88210:	f425 4680 	bic.w	r6, r5, #16384	; 0x4000
   88214:	f8c0 6800 	str.w	r6, [r0, #2048]	; 0x800

	// This section of clock check can be improved with a chek of
	// USB clock source via sysclk()
	// Check USB clock because the source can be a PLL
	while (!Is_otg_clock_usable());
   88218:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   8821c:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88220:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   88224:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   88228:	d0fa      	beq.n	88220 <udd_attach+0x44>

	// Authorize attach if Vbus is present
	udd_attach_device();
   8822a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8822e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88232:	6819      	ldr	r1, [r3, #0]
   88234:	f421 7080 	bic.w	r0, r1, #256	; 0x100
   88238:	6018      	str	r0, [r3, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   8823a:	f04f 0608 	mov.w	r6, #8
   8823e:	619e      	str	r6, [r3, #24]
	udd_enable_suspend_interrupt();
   88240:	f04f 0101 	mov.w	r1, #1
   88244:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
   88246:	f04f 0210 	mov.w	r2, #16
   8824a:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   8824c:	f04f 0504 	mov.w	r5, #4
   88250:	619d      	str	r5, [r3, #24]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   88252:	f04f 0002 	mov.w	r0, #2
   88256:	6198      	str	r0, [r3, #24]
#endif
	// Reset following interupts flag
	udd_ack_reset();
   88258:	609e      	str	r6, [r3, #8]
	udd_ack_sof();
   8825a:	609d      	str	r5, [r3, #8]
	udd_ack_msof();
   8825c:	6098      	str	r0, [r3, #8]

	// The first suspend interrupt must be forced
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
   8825e:	60d9      	str	r1, [r3, #12]

	udd_ack_wake_up();
   88260:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   88262:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   88266:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   8826a:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8826e:	b93c      	cbnz	r4, 88280 <udd_attach+0xa4>
		cpu_irq_enable();
   88270:	f240 23a0 	movw	r3, #672	; 0x2a0
   88274:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88278:	7019      	strb	r1, [r3, #0]
   8827a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8827e:	b662      	cpsie	i
   88280:	bd70      	pop	{r4, r5, r6, pc}
   88282:	bf00      	nop

00088284 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
   88284:	b508      	push	{r3, lr}
	otg_unfreeze_clock();
   88286:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8828a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8828e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   88292:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   88296:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800

	// Detach device from the bus
	udd_detach_device();
   8829a:	6819      	ldr	r1, [r3, #0]
   8829c:	f441 7280 	orr.w	r2, r1, #256	; 0x100
   882a0:	601a      	str	r2, [r3, #0]
	otg_freeze_clock();
   882a2:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
   882a6:	f440 4180 	orr.w	r1, r0, #16384	; 0x4000
   882aa:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	udd_sleep_mode(false);
   882ae:	f04f 0000 	mov.w	r0, #0
   882b2:	f647 13e9 	movw	r3, #31209	; 0x79e9
   882b6:	f2c0 0308 	movt	r3, #8
   882ba:	4798      	blx	r3
   882bc:	bd08      	pop	{r3, pc}
   882be:	bf00      	nop

000882c0 <UOTGHS_Handler>:
void udd_interrupt(void);
void udd_interrupt(void)
#else
ISR(UDD_USB_INT_FUN)
#endif
{
   882c0:	b570      	push	{r4, r5, r6, lr}
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   882c2:	f647 13d9 	movw	r3, #31193	; 0x79d9
   882c6:	f2c0 0308 	movt	r3, #8
   882ca:	4798      	blx	r3
   882cc:	b990      	cbnz	r0, 882f4 <UOTGHS_Handler+0x34>
   882ce:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   882d2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   882d6:	6841      	ldr	r1, [r0, #4]
   882d8:	f011 0f01 	tst.w	r1, #1
   882dc:	d10a      	bne.n	882f4 <UOTGHS_Handler+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   882de:	b672      	cpsid	i
   882e0:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   882e4:	f240 20a0 	movw	r0, #672	; 0x2a0
   882e8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   882ec:	f04f 0200 	mov.w	r2, #0
   882f0:	7002      	strb	r2, [r0, #0]
		return;
   882f2:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_sof()) {
   882f4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   882f8:	f2c4 020a 	movt	r2, #16394	; 0x400a
   882fc:	6853      	ldr	r3, [r2, #4]
   882fe:	f013 0f04 	tst.w	r3, #4
   88302:	d016      	beq.n	88332 <UOTGHS_Handler+0x72>
		udd_ack_sof();
   88304:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   88308:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8830c:	f04f 0004 	mov.w	r0, #4
   88310:	6088      	str	r0, [r1, #8]
		if (Is_udd_full_speed_mode()) {
   88312:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
   88316:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   8831a:	d104      	bne.n	88326 <UOTGHS_Handler+0x66>
			udc_sof_notify();
   8831c:	f646 43a9 	movw	r3, #27817	; 0x6ca9
   88320:	f2c0 0308 	movt	r3, #8
   88324:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   88326:	f644 51f5 	movw	r1, #19957	; 0x4df5
   8832a:	f2c0 0108 	movt	r1, #8
   8832e:	4788      	blx	r1
#endif
		goto udd_interrupt_sof_end;
   88330:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_msof()) {
   88332:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88336:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8833a:	6841      	ldr	r1, [r0, #4]
   8833c:	f011 0f02 	tst.w	r1, #2
   88340:	d00c      	beq.n	8835c <UOTGHS_Handler+0x9c>
		udd_ack_msof();
   88342:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88346:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8834a:	f04f 0202 	mov.w	r2, #2
   8834e:	6082      	str	r2, [r0, #8]
		udc_sof_notify();
   88350:	f646 43a9 	movw	r3, #27817	; 0x6ca9
   88354:	f2c0 0308 	movt	r3, #8
   88358:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   8835a:	bd70      	pop	{r4, r5, r6, pc}


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0)) {
   8835c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   88360:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88364:	6853      	ldr	r3, [r2, #4]
   88366:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   8836a:	f000 8459 	beq.w	88c20 <UOTGHS_Handler+0x960>
	}

	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   8836e:	f24c 2020 	movw	r0, #49696	; 0xc220
   88372:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88376:	f04f 0110 	mov.w	r1, #16
   8837a:	6001      	str	r1, [r0, #0]
	udd_disable_nak_out_interrupt(0);
   8837c:	f04f 0208 	mov.w	r2, #8
   88380:	6002      	str	r2, [r0, #0]

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
   88382:	f24c 1330 	movw	r3, #49456	; 0xc130
   88386:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8838a:	6818      	ldr	r0, [r3, #0]
   8838c:	f010 0f04 	tst.w	r0, #4
   88390:	f000 80d9 	beq.w	88546 <UOTGHS_Handler+0x286>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   88394:	f241 6128 	movw	r1, #5672	; 0x1628
   88398:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8839c:	780a      	ldrb	r2, [r1, #0]
   8839e:	b14a      	cbz	r2, 883b4 <UOTGHS_Handler+0xf4>
		// May be a hidden DATA or ZLP phase or protocol abort
		udd_ctrl_endofrequest();
   883a0:	f647 3079 	movw	r0, #31609	; 0x7b79
   883a4:	f2c0 0008 	movt	r0, #8
   883a8:	4780      	blx	r0

		// Reinitializes control endpoint management
		udd_ctrl_init();
   883aa:	f647 2395 	movw	r3, #31381	; 0x7a95
   883ae:	f2c0 0308 	movt	r3, #8
   883b2:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   883b4:	f24c 1130 	movw	r1, #49456	; 0xc130
   883b8:	f2c4 010a 	movt	r1, #16394	; 0x400a
   883bc:	680a      	ldr	r2, [r1, #0]
   883be:	f3c2 500a 	ubfx	r0, r2, #20, #11
   883c2:	2808      	cmp	r0, #8
   883c4:	d00c      	beq.n	883e0 <UOTGHS_Handler+0x120>
		udd_ctrl_stall_data();
   883c6:	f647 21f9 	movw	r1, #31481	; 0x7af9
   883ca:	f2c0 0108 	movt	r1, #8
   883ce:	4788      	blx	r1
		udd_ack_setup_received(0);
   883d0:	f24c 1360 	movw	r3, #49504	; 0xc160
   883d4:	f2c4 030a 	movt	r3, #16394	; 0x400a
   883d8:	f04f 0204 	mov.w	r2, #4
   883dc:	601a      	str	r2, [r3, #0]
   883de:	bd70      	pop	{r4, r5, r6, pc}
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   883e0:	f04f 0300 	mov.w	r3, #0
   883e4:	f2c2 0318 	movt	r3, #8216	; 0x2018
   883e8:	7819      	ldrb	r1, [r3, #0]
   883ea:	f641 40ac 	movw	r0, #7340	; 0x1cac
   883ee:	f2c2 0007 	movt	r0, #8199	; 0x2007
   883f2:	7001      	strb	r1, [r0, #0]
   883f4:	f04f 0201 	mov.w	r2, #1
   883f8:	f2c2 0218 	movt	r2, #8216	; 0x2018
   883fc:	7813      	ldrb	r3, [r2, #0]
   883fe:	7043      	strb	r3, [r0, #1]
   88400:	f04f 0102 	mov.w	r1, #2
   88404:	f2c2 0118 	movt	r1, #8216	; 0x2018
   88408:	780a      	ldrb	r2, [r1, #0]
   8840a:	7082      	strb	r2, [r0, #2]
   8840c:	f04f 0303 	mov.w	r3, #3
   88410:	f2c2 0318 	movt	r3, #8216	; 0x2018
   88414:	7819      	ldrb	r1, [r3, #0]
   88416:	70c1      	strb	r1, [r0, #3]
   88418:	f04f 0204 	mov.w	r2, #4
   8841c:	f2c2 0218 	movt	r2, #8216	; 0x2018
   88420:	7813      	ldrb	r3, [r2, #0]
   88422:	7103      	strb	r3, [r0, #4]
   88424:	f04f 0105 	mov.w	r1, #5
   88428:	f2c2 0118 	movt	r1, #8216	; 0x2018
   8842c:	780a      	ldrb	r2, [r1, #0]
   8842e:	7142      	strb	r2, [r0, #5]
   88430:	f04f 0306 	mov.w	r3, #6
   88434:	f2c2 0318 	movt	r3, #8216	; 0x2018
   88438:	7819      	ldrb	r1, [r3, #0]
   8843a:	7181      	strb	r1, [r0, #6]
   8843c:	f04f 0207 	mov.w	r2, #7
   88440:	f2c2 0218 	movt	r2, #8216	; 0x2018
   88444:	7813      	ldrb	r3, [r2, #0]
   88446:	71c3      	strb	r3, [r0, #7]
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   88448:	f646 40f1 	movw	r0, #27889	; 0x6cf1
   8844c:	f2c0 0008 	movt	r0, #8
   88450:	4780      	blx	r0
   88452:	b960      	cbnz	r0, 8846e <UOTGHS_Handler+0x1ae>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
   88454:	f647 22f9 	movw	r2, #31481	; 0x7af9
   88458:	f2c0 0208 	movt	r2, #8
   8845c:	4790      	blx	r2
		udd_ack_setup_received(0);
   8845e:	f24c 1360 	movw	r3, #49504	; 0xc160
   88462:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88466:	f04f 0004 	mov.w	r0, #4
   8846a:	6018      	str	r0, [r3, #0]
   8846c:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}
	udd_ack_setup_received(0);
   8846e:	f24c 1160 	movw	r1, #49504	; 0xc160
   88472:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88476:	f04f 0204 	mov.w	r2, #4
   8847a:	600a      	str	r2, [r1, #0]

	if (Udd_setup_is_in()) {
   8847c:	f641 43ac 	movw	r3, #7340	; 0x1cac
   88480:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88484:	f993 0000 	ldrsb.w	r0, [r3]
   88488:	2800      	cmp	r0, #0
   8848a:	da18      	bge.n	884be <UOTGHS_Handler+0x1fe>
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   8848c:	f04f 0000 	mov.w	r0, #0
   88490:	f241 51aa 	movw	r1, #5546	; 0x15aa
   88494:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88498:	8008      	strh	r0, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8849a:	f241 622a 	movw	r2, #5674	; 0x162a
   8849e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   884a2:	8010      	strh	r0, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   884a4:	f241 6328 	movw	r3, #5672	; 0x1628
   884a8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   884ac:	f04f 0002 	mov.w	r0, #2
   884b0:	7018      	strb	r0, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   884b2:	f647 318d 	movw	r1, #31629	; 0x7b8d
   884b6:	f2c0 0108 	movt	r1, #8
   884ba:	4788      	blx	r1
   884bc:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
   884be:	f641 41ac 	movw	r1, #7340	; 0x1cac
   884c2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   884c6:	88ca      	ldrh	r2, [r1, #6]
   884c8:	b92a      	cbnz	r2, 884d6 <UOTGHS_Handler+0x216>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   884ca:	f647 3319 	movw	r3, #31513	; 0x7b19
   884ce:	f2c0 0308 	movt	r3, #8
   884d2:	4798      	blx	r3
   884d4:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   884d6:	f04f 0300 	mov.w	r3, #0
   884da:	4618      	mov	r0, r3
   884dc:	f241 51aa 	movw	r1, #5546	; 0x15aa
   884e0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   884e4:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   884e6:	f241 622a 	movw	r2, #5674	; 0x162a
   884ea:	f2c2 0207 	movt	r2, #8199	; 0x2007
   884ee:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   884f0:	f241 6328 	movw	r3, #5672	; 0x1628
   884f4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   884f8:	f04f 0101 	mov.w	r1, #1
   884fc:	7019      	strb	r1, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   884fe:	f24c 1360 	movw	r3, #49504	; 0xc160
   88502:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88506:	f04f 0210 	mov.w	r2, #16
   8850a:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8850c:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   88510:	b672      	cpsid	i
   88512:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   88516:	f240 23a0 	movw	r3, #672	; 0x2a0
   8851a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8851e:	7018      	strb	r0, [r3, #0]
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
   88520:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   88524:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88528:	6002      	str	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8852a:	2900      	cmp	r1, #0
   8852c:	f040 8471 	bne.w	88e12 <UOTGHS_Handler+0xb52>
		cpu_irq_enable();
   88530:	f240 21a0 	movw	r1, #672	; 0x2a0
   88534:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88538:	f04f 0201 	mov.w	r2, #1
   8853c:	700a      	strb	r2, [r1, #0]
   8853e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   88542:	b662      	cpsie	i
   88544:	bd70      	pop	{r4, r5, r6, pc}
		dbg_print("stup ");
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   88546:	f24c 1130 	movw	r1, #49456	; 0xc130
   8854a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8854e:	680a      	ldr	r2, [r1, #0]
   88550:	f012 0f01 	tst.w	r2, #1
   88554:	d00d      	beq.n	88572 <UOTGHS_Handler+0x2b2>
   88556:	f24c 13c0 	movw	r3, #49600	; 0xc1c0
   8855a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8855e:	6818      	ldr	r0, [r3, #0]
   88560:	f010 0f01 	tst.w	r0, #1
   88564:	d005      	beq.n	88572 <UOTGHS_Handler+0x2b2>
		dbg_print("in ");
		// IN packet sent
		udd_ctrl_in_sent();
   88566:	f647 338d 	movw	r3, #31629	; 0x7b8d
   8856a:	f2c0 0308 	movt	r3, #8
   8856e:	4798      	blx	r3
   88570:	bd70      	pop	{r4, r5, r6, pc}
		return true;
	}
	if (Is_udd_out_received(0)) {
   88572:	f24c 1130 	movw	r1, #49456	; 0xc130
   88576:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8857a:	680a      	ldr	r2, [r1, #0]
   8857c:	f012 0f02 	tst.w	r2, #2
   88580:	f000 80de 	beq.w	88740 <UOTGHS_Handler+0x480>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   88584:	f241 6028 	movw	r0, #5672	; 0x1628
   88588:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8858c:	7801      	ldrb	r1, [r0, #0]
   8858e:	2901      	cmp	r1, #1
   88590:	d014      	beq.n	885bc <UOTGHS_Handler+0x2fc>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   88592:	2902      	cmp	r1, #2
   88594:	d001      	beq.n	8859a <UOTGHS_Handler+0x2da>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   88596:	2904      	cmp	r1, #4
   88598:	d105      	bne.n	885a6 <UOTGHS_Handler+0x2e6>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
   8859a:	f647 3279 	movw	r2, #31609	; 0x7b79
   8859e:	f2c0 0208 	movt	r2, #8
   885a2:	4790      	blx	r2
   885a4:	e004      	b.n	885b0 <UOTGHS_Handler+0x2f0>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   885a6:	f647 21f9 	movw	r1, #31481	; 0x7af9
   885aa:	f2c0 0108 	movt	r1, #8
   885ae:	4788      	blx	r1
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   885b0:	f647 2095 	movw	r0, #31381	; 0x7a95
   885b4:	f2c0 0008 	movt	r0, #8
   885b8:	4780      	blx	r0
   885ba:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   885bc:	f24c 1430 	movw	r4, #49456	; 0xc130
   885c0:	f2c4 040a 	movt	r4, #16394	; 0x400a
   885c4:	6826      	ldr	r6, [r4, #0]
   885c6:	f3c6 540a 	ubfx	r4, r6, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   885ca:	f641 43ac 	movw	r3, #7340	; 0x1cac
   885ce:	f2c2 0307 	movt	r3, #8199	; 0x2007
   885d2:	8998      	ldrh	r0, [r3, #12]
   885d4:	f241 622a 	movw	r2, #5674	; 0x162a
   885d8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   885dc:	8816      	ldrh	r6, [r2, #0]
   885de:	1931      	adds	r1, r6, r4
   885e0:	4288      	cmp	r0, r1
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   885e2:	bfae      	itee	ge
   885e4:	b2a4      	uxthge	r4, r4
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   885e6:	ebc6 0000 	rsblt	r0, r6, r0
   885ea:	b284      	uxthlt	r4, r0
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   885ec:	f641 43ac 	movw	r3, #7340	; 0x1cac
   885f0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   885f4:	6898      	ldr	r0, [r3, #8]
   885f6:	1982      	adds	r2, r0, r6
	for (i = 0; i < nb_data; i++) {
   885f8:	b3b4      	cbz	r4, 88668 <UOTGHS_Handler+0x3a8>
   885fa:	f04f 0300 	mov.w	r3, #0
   885fe:	f2c2 0318 	movt	r3, #8216	; 0x2018
   88602:	ea6f 0103 	mvn.w	r1, r3
   88606:	1908      	adds	r0, r1, r4
   88608:	f000 0101 	and.w	r1, r0, #1
		*ptr_dest++ = *ptr_src++;
   8860c:	f813 0b01 	ldrb.w	r0, [r3], #1
   88610:	f802 0b01 	strb.w	r0, [r2], #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   88614:	b2d8      	uxtb	r0, r3
   88616:	42a0      	cmp	r0, r4
   88618:	f0c0 83fc 	bcc.w	88e14 <UOTGHS_Handler+0xb54>
   8861c:	e00e      	b.n	8863c <UOTGHS_Handler+0x37c>
		*ptr_dest++ = *ptr_src++;
   8861e:	4618      	mov	r0, r3
   88620:	f810 5b01 	ldrb.w	r5, [r0], #1
   88624:	4611      	mov	r1, r2
   88626:	f801 5b01 	strb.w	r5, [r1], #1
   8862a:	785d      	ldrb	r5, [r3, #1]
   8862c:	f100 0301 	add.w	r3, r0, #1
   88630:	7055      	strb	r5, [r2, #1]
   88632:	f101 0201 	add.w	r2, r1, #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   88636:	b2d8      	uxtb	r0, r3
   88638:	42a0      	cmp	r0, r4
   8863a:	d3f0      	bcc.n	8861e <UOTGHS_Handler+0x35e>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   8863c:	19a6      	adds	r6, r4, r6
   8863e:	b2b6      	uxth	r6, r6
   88640:	f241 622a 	movw	r2, #5674	; 0x162a
   88644:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88648:	8016      	strh	r6, [r2, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   8864a:	2c40      	cmp	r4, #64	; 0x40
   8864c:	d10c      	bne.n	88668 <UOTGHS_Handler+0x3a8>
			|| (udd_g_ctrlreq.req.wLength <=
   8864e:	f641 43ac 	movw	r3, #7340	; 0x1cac
   88652:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88656:	88d9      	ldrh	r1, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
   88658:	f241 50aa 	movw	r0, #5546	; 0x15aa
   8865c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88660:	8802      	ldrh	r2, [r0, #0]
   88662:	1993      	adds	r3, r2, r6
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
   88664:	4299      	cmp	r1, r3
   88666:	dc22      	bgt.n	886ae <UOTGHS_Handler+0x3ee>
					(udd_ctrl_prev_payload_buf_cnt +
							udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   88668:	f641 41ac 	movw	r1, #7340	; 0x1cac
   8866c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88670:	818e      	strh	r6, [r1, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   88672:	694a      	ldr	r2, [r1, #20]
   88674:	b172      	cbz	r2, 88694 <UOTGHS_Handler+0x3d4>
			if (!udd_g_ctrlreq.over_under_run()) {
   88676:	4790      	blx	r2
   88678:	b960      	cbnz	r0, 88694 <UOTGHS_Handler+0x3d4>
				// Stall ZLP
				udd_ctrl_stall_data();
   8867a:	f647 22f9 	movw	r2, #31481	; 0x7af9
   8867e:	f2c0 0208 	movt	r2, #8
   88682:	4790      	blx	r2
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   88684:	f24c 1060 	movw	r0, #49504	; 0xc160
   88688:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8868c:	f04f 0302 	mov.w	r3, #2
   88690:	6003      	str	r3, [r0, #0]
   88692:	bd70      	pop	{r4, r5, r6, pc}
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   88694:	f24c 1060 	movw	r0, #49504	; 0xc160
   88698:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8869c:	f04f 0302 	mov.w	r3, #2
   886a0:	6003      	str	r3, [r0, #0]
		udd_ctrl_send_zlp_in();
   886a2:	f647 3119 	movw	r1, #31513	; 0x7b19
   886a6:	f2c0 0108 	movt	r1, #8
   886aa:	4788      	blx	r1
   886ac:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   886ae:	49ae      	ldr	r1, [pc, #696]	; (88968 <UOTGHS_Handler+0x6a8>)
   886b0:	8988      	ldrh	r0, [r1, #12]
   886b2:	42b0      	cmp	r0, r6
   886b4:	d121      	bne.n	886fa <UOTGHS_Handler+0x43a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   886b6:	4aac      	ldr	r2, [pc, #688]	; (88968 <UOTGHS_Handler+0x6a8>)
   886b8:	6953      	ldr	r3, [r2, #20]
   886ba:	b94b      	cbnz	r3, 886d0 <UOTGHS_Handler+0x410>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
   886bc:	4aab      	ldr	r2, [pc, #684]	; (8896c <UOTGHS_Handler+0x6ac>)
   886be:	4790      	blx	r2
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   886c0:	f24c 1060 	movw	r0, #49504	; 0xc160
   886c4:	f2c4 000a 	movt	r0, #16394	; 0x400a
   886c8:	f04f 0302 	mov.w	r3, #2
   886cc:	6003      	str	r3, [r0, #0]
   886ce:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   886d0:	4798      	blx	r3
   886d2:	b948      	cbnz	r0, 886e8 <UOTGHS_Handler+0x428>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   886d4:	48a5      	ldr	r0, [pc, #660]	; (8896c <UOTGHS_Handler+0x6ac>)
   886d6:	4780      	blx	r0
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   886d8:	f24c 1360 	movw	r3, #49504	; 0xc160
   886dc:	f2c4 030a 	movt	r3, #16394	; 0x400a
   886e0:	f04f 0102 	mov.w	r1, #2
   886e4:	6019      	str	r1, [r3, #0]
   886e6:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   886e8:	4aa1      	ldr	r2, [pc, #644]	; (88970 <UOTGHS_Handler+0x6b0>)
   886ea:	4ba2      	ldr	r3, [pc, #648]	; (88974 <UOTGHS_Handler+0x6b4>)
   886ec:	8818      	ldrh	r0, [r3, #0]
   886ee:	8811      	ldrh	r1, [r2, #0]
   886f0:	1840      	adds	r0, r0, r1
   886f2:	8010      	strh	r0, [r2, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   886f4:	f04f 0200 	mov.w	r2, #0
   886f8:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   886fa:	f24c 1360 	movw	r3, #49504	; 0xc160
   886fe:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88702:	f04f 0102 	mov.w	r1, #2
   88706:	6019      	str	r1, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   88708:	f04f 0210 	mov.w	r2, #16
   8870c:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8870e:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   88712:	b672      	cpsid	i
   88714:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   88718:	4b97      	ldr	r3, [pc, #604]	; (88978 <UOTGHS_Handler+0x6b8>)
   8871a:	f04f 0000 	mov.w	r0, #0
   8871e:	7018      	strb	r0, [r3, #0]
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
   88720:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   88724:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88728:	601a      	str	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8872a:	2900      	cmp	r1, #0
   8872c:	f040 8371 	bne.w	88e12 <UOTGHS_Handler+0xb52>
		cpu_irq_enable();
   88730:	4991      	ldr	r1, [pc, #580]	; (88978 <UOTGHS_Handler+0x6b8>)
   88732:	f04f 0201 	mov.w	r2, #1
   88736:	700a      	strb	r2, [r1, #0]
   88738:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8873c:	b662      	cpsie	i
   8873e:	bd70      	pop	{r4, r5, r6, pc}
		dbg_print("out ");
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
   88740:	f24c 1330 	movw	r3, #49456	; 0xc130
   88744:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88748:	6818      	ldr	r0, [r3, #0]
   8874a:	f010 0f08 	tst.w	r0, #8
   8874e:	d01f      	beq.n	88790 <UOTGHS_Handler+0x4d0>
		dbg_print("nako ");
		// Overflow on OUT packet
		udd_ack_nak_out(0);
   88750:	f24c 1060 	movw	r0, #49504	; 0xc160
   88754:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88758:	f04f 0108 	mov.w	r1, #8
   8875c:	6001      	str	r1, [r0, #0]
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
   8875e:	f24c 1230 	movw	r2, #49456	; 0xc130
   88762:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88766:	6813      	ldr	r3, [r2, #0]
   88768:	f013 0f01 	tst.w	r3, #1
   8876c:	f040 8351 	bne.w	88e12 <UOTGHS_Handler+0xb52>
		return; // Overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   88770:	f241 6028 	movw	r0, #5672	; 0x1628
   88774:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88778:	7801      	ldrb	r1, [r0, #0]
   8877a:	2903      	cmp	r1, #3
   8877c:	f040 8349 	bne.w	88e12 <UOTGHS_Handler+0xb52>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   88780:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   88784:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88788:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8878c:	601a      	str	r2, [r3, #0]
   8878e:	bd70      	pop	{r4, r5, r6, pc}
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
   88790:	f24c 1130 	movw	r1, #49456	; 0xc130
   88794:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88798:	680a      	ldr	r2, [r1, #0]
   8879a:	f012 0f10 	tst.w	r2, #16
   8879e:	f000 823f 	beq.w	88c20 <UOTGHS_Handler+0x960>
		dbg_print("naki ");
		// Underflow on IN packet
		udd_ack_nak_in(0);
   887a2:	f24c 1360 	movw	r3, #49504	; 0xc160
   887a6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   887aa:	f04f 0010 	mov.w	r0, #16
   887ae:	6018      	str	r0, [r3, #0]
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
   887b0:	f24c 1130 	movw	r1, #49456	; 0xc130
   887b4:	f2c4 010a 	movt	r1, #16394	; 0x400a
   887b8:	680a      	ldr	r2, [r1, #0]
   887ba:	f012 0f02 	tst.w	r2, #2
   887be:	f040 8328 	bne.w	88e12 <UOTGHS_Handler+0xb52>
		return; // Underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   887c2:	f241 6328 	movw	r3, #5672	; 0x1628
   887c6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   887ca:	7818      	ldrb	r0, [r3, #0]
   887cc:	2801      	cmp	r0, #1
   887ce:	d105      	bne.n	887dc <UOTGHS_Handler+0x51c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   887d0:	f647 3319 	movw	r3, #31513	; 0x7b19
   887d4:	f2c0 0308 	movt	r3, #8
   887d8:	4798      	blx	r3
   887da:	bd70      	pop	{r4, r5, r6, pc}
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   887dc:	2804      	cmp	r0, #4
   887de:	f040 8318 	bne.w	88e12 <UOTGHS_Handler+0xb52>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   887e2:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   887e6:	f2c4 010a 	movt	r1, #16394	; 0x400a
   887ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   887ee:	600a      	str	r2, [r1, #0]
   887f0:	bd70      	pop	{r4, r5, r6, pc}
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   887f2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   887f6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   887fa:	685a      	ldr	r2, [r3, #4]
   887fc:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   88800:	d03c      	beq.n	8887c <UOTGHS_Handler+0x5bc>
   88802:	f04f 0005 	mov.w	r0, #5
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88806:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8880a:	495c      	ldr	r1, [pc, #368]	; (8897c <UOTGHS_Handler+0x6bc>)
   8880c:	e019      	b.n	88842 <UOTGHS_Handler+0x582>

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   8880e:	f04f 0001 	mov.w	r0, #1
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88812:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88816:	f241 51b0 	movw	r1, #5552	; 0x15b0
   8881a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8881e:	e010      	b.n	88842 <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   88820:	f04f 0002 	mov.w	r0, #2
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88824:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88828:	4955      	ldr	r1, [pc, #340]	; (88980 <UOTGHS_Handler+0x6c0>)
   8882a:	e00a      	b.n	88842 <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8882c:	f04f 0003 	mov.w	r0, #3
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88830:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88834:	4953      	ldr	r1, [pc, #332]	; (88984 <UOTGHS_Handler+0x6c4>)
   88836:	e004      	b.n	88842 <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   88838:	f04f 0004 	mov.w	r0, #4
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   8883c:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88840:	4951      	ldr	r1, [pc, #324]	; (88988 <UOTGHS_Handler+0x6c8>)
#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   88842:	f44f 4243 	mov.w	r2, #49920	; 0xc300
   88846:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8884a:	eb02 1300 	add.w	r3, r2, r0, lsl #4
   8884e:	68da      	ldr	r2, [r3, #12]
   88850:	f012 0f01 	tst.w	r2, #1
   88854:	f040 82dd 	bne.w	88e12 <UOTGHS_Handler+0xb52>
					& UOTGHS_DEVDMASTATUS_CHANN_ENB) {
				return true; // Ignore EOT_STA interrupt
			}
			dbg_print("dma%x: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   88858:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   8885c:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88860:	6154      	str	r4, [r2, #20]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   88862:	68db      	ldr	r3, [r3, #12]
					UOTGHS_DEVDMASTATUS_BUFF_COUNT_Msk)
					>> UOTGHS_DEVDMASTATUS_BUFF_COUNT_Pos;
			if (nb_remaining) {
   88864:	0c1b      	lsrs	r3, r3, #16
   88866:	d003      	beq.n	88870 <UOTGHS_Handler+0x5b0>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   88868:	68ca      	ldr	r2, [r1, #12]
   8886a:	1ad3      	subs	r3, r2, r3
   8886c:	60cb      	str	r3, [r1, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   8886e:	608b      	str	r3, [r1, #8]
			}
			udd_ep_trans_done(ep);
   88870:	f647 6141 	movw	r1, #32321	; 0x7e41
   88874:	f2c0 0108 	movt	r1, #8
   88878:	4788      	blx	r1
   8887a:	bd70      	pop	{r4, r5, r6, pc}
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8887c:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88880:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88884:	6901      	ldr	r1, [r0, #16]
   88886:	f411 3f00 	tst.w	r1, #131072	; 0x20000
   8888a:	f000 80a9 	beq.w	889e0 <UOTGHS_Handler+0x720>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8888e:	f24c 13d4 	movw	r3, #49620	; 0xc1d4
   88892:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88896:	681a      	ldr	r2, [r3, #0]
   88898:	f012 0f01 	tst.w	r2, #1
   8889c:	d03b      	beq.n	88916 <UOTGHS_Handler+0x656>
					&& Is_udd_in_send(ep)) {
   8889e:	f24c 1044 	movw	r0, #49476	; 0xc144
   888a2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   888a6:	6801      	ldr	r1, [r0, #0]
   888a8:	f011 0f01 	tst.w	r1, #1
   888ac:	d033      	beq.n	88916 <UOTGHS_Handler+0x656>
   888ae:	f04f 0205 	mov.w	r2, #5
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   888b2:	f04f 0314 	mov.w	r3, #20
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   888b6:	4831      	ldr	r0, [pc, #196]	; (8897c <UOTGHS_Handler+0x6bc>)
   888b8:	e016      	b.n	888e8 <UOTGHS_Handler+0x628>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   888ba:	f04f 0201 	mov.w	r2, #1
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   888be:	f04f 0304 	mov.w	r3, #4
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   888c2:	4832      	ldr	r0, [pc, #200]	; (8898c <UOTGHS_Handler+0x6cc>)
   888c4:	e010      	b.n	888e8 <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   888c6:	f04f 0202 	mov.w	r2, #2
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   888ca:	f04f 0308 	mov.w	r3, #8
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   888ce:	482c      	ldr	r0, [pc, #176]	; (88980 <UOTGHS_Handler+0x6c0>)
   888d0:	e00a      	b.n	888e8 <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   888d2:	f04f 0203 	mov.w	r2, #3
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   888d6:	f04f 030c 	mov.w	r3, #12
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   888da:	482a      	ldr	r0, [pc, #168]	; (88984 <UOTGHS_Handler+0x6c4>)
   888dc:	e004      	b.n	888e8 <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   888de:	f04f 0204 	mov.w	r2, #4
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   888e2:	f04f 0310 	mov.w	r3, #16
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   888e6:	4828      	ldr	r0, [pc, #160]	; (88988 <UOTGHS_Handler+0x6c8>)
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
   888e8:	f24c 2120 	movw	r1, #49696	; 0xc220
   888ec:	f2c4 010a 	movt	r1, #16394	; 0x400a
   888f0:	f04f 0501 	mov.w	r5, #1
   888f4:	505d      	str	r5, [r3, r1]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
   888f6:	f24c 1460 	movw	r4, #49504	; 0xc160
   888fa:	f2c4 040a 	movt	r4, #16394	; 0x400a
   888fe:	511d      	str	r5, [r3, r4]
				udd_ack_fifocon(ep);
   88900:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   88904:	505c      	str	r4, [r3, r1]
				udd_ep_finish_job(ptr_job, false, ep);
   88906:	f04f 0100 	mov.w	r1, #0
   8890a:	f647 53dd 	movw	r3, #32221	; 0x7ddd
   8890e:	f2c0 0308 	movt	r3, #8
   88912:	4798      	blx	r3
   88914:	bd70      	pop	{r4, r5, r6, pc}
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   88916:	f24c 13d4 	movw	r3, #49620	; 0xc1d4
   8891a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8891e:	681a      	ldr	r2, [r3, #0]
   88920:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   88924:	d05c      	beq.n	889e0 <UOTGHS_Handler+0x720>
					&& (0 == udd_nb_busy_bank(ep))) {
   88926:	f24c 1044 	movw	r0, #49476	; 0xc144
   8892a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8892e:	6801      	ldr	r1, [r0, #0]
   88930:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   88934:	d154      	bne.n	889e0 <UOTGHS_Handler+0x720>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88936:	f04f 0314 	mov.w	r3, #20
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8893a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8893e:	4a0f      	ldr	r2, [pc, #60]	; (8897c <UOTGHS_Handler+0x6bc>)
   88940:	e02b      	b.n	8899a <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88942:	f04f 0304 	mov.w	r3, #4
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88946:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8894a:	4a10      	ldr	r2, [pc, #64]	; (8898c <UOTGHS_Handler+0x6cc>)
   8894c:	e025      	b.n	8899a <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8894e:	f04f 0308 	mov.w	r3, #8
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88952:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88956:	4a0a      	ldr	r2, [pc, #40]	; (88980 <UOTGHS_Handler+0x6c0>)
   88958:	e01f      	b.n	8899a <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8895a:	f04f 030c 	mov.w	r3, #12
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8895e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88962:	4a08      	ldr	r2, [pc, #32]	; (88984 <UOTGHS_Handler+0x6c4>)
   88964:	e019      	b.n	8899a <UOTGHS_Handler+0x6da>
   88966:	bf00      	nop
   88968:	20071cac 	.word	0x20071cac
   8896c:	00087af9 	.word	0x00087af9
   88970:	200715aa 	.word	0x200715aa
   88974:	2007162a 	.word	0x2007162a
   88978:	200702a0 	.word	0x200702a0
   8897c:	20071610 	.word	0x20071610
   88980:	200715c8 	.word	0x200715c8
   88984:	200715e0 	.word	0x200715e0
   88988:	200715f8 	.word	0x200715f8
   8898c:	200715b0 	.word	0x200715b0
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88990:	f04f 0310 	mov.w	r3, #16
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88994:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88998:	4abf      	ldr	r2, [pc, #764]	; (88c98 <UOTGHS_Handler+0x9d8>)
			}
			if (Is_udd_bank_interrupt_enabled(ep)
					&& (0 == udd_nb_busy_bank(ep))) {
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   8899a:	f24c 2020 	movw	r0, #49696	; 0xc220
   8899e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   889a2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
   889a6:	501c      	str	r4, [r3, r0]
				udd_disable_endpoint_interrupt(ep);
   889a8:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   889ac:	f2c4 000a 	movt	r0, #16394	; 0x400a
   889b0:	6141      	str	r1, [r0, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
   889b2:	7d11      	ldrb	r1, [r2, #20]
   889b4:	f36f 0182 	bfc	r1, #2, #1
   889b8:	7511      	strb	r1, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   889ba:	f44f 4241 	mov.w	r2, #49408	; 0xc100
   889be:	f2c4 020a 	movt	r2, #16394	; 0x400a
   889c2:	5898      	ldr	r0, [r3, r2]
   889c4:	f420 7100 	bic.w	r1, r0, #512	; 0x200
   889c8:	5099      	str	r1, [r3, r2]
				udd_enable_stall_handshake(ep);
   889ca:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   889ce:	f2c4 020a 	movt	r2, #16394	; 0x400a
   889d2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   889d6:	5098      	str	r0, [r3, r2]
				udd_reset_data_toggle(ep);
   889d8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   889dc:	5099      	str	r1, [r3, r2]
   889de:	bd70      	pop	{r4, r5, r6, pc}
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   889e0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   889e4:	f2c4 030a 	movt	r3, #16394	; 0x400a
   889e8:	685a      	ldr	r2, [r3, #4]
   889ea:	f012 0f08 	tst.w	r2, #8
   889ee:	d07a      	beq.n	88ae6 <UOTGHS_Handler+0x826>
		udd_ack_reset();
   889f0:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   889f4:	f2c4 040a 	movt	r4, #16394	; 0x400a
   889f8:	f04f 0508 	mov.w	r5, #8
   889fc:	60a5      	str	r5, [r4, #8]
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   889fe:	f241 56b0 	movw	r6, #5552	; 0x15b0
   88a02:	f2c2 0607 	movt	r6, #8199	; 0x2007
   88a06:	4630      	mov	r0, r6
   88a08:	f04f 0101 	mov.w	r1, #1
   88a0c:	460a      	mov	r2, r1
   88a0e:	f647 55dd 	movw	r5, #32221	; 0x7ddd
   88a12:	f2c0 0508 	movt	r5, #8
   88a16:	47a8      	blx	r5
   88a18:	f106 0018 	add.w	r0, r6, #24
   88a1c:	f04f 0101 	mov.w	r1, #1
   88a20:	f04f 0202 	mov.w	r2, #2
   88a24:	47a8      	blx	r5
   88a26:	f106 0030 	add.w	r0, r6, #48	; 0x30
   88a2a:	f04f 0101 	mov.w	r1, #1
   88a2e:	f04f 0203 	mov.w	r2, #3
   88a32:	47a8      	blx	r5
   88a34:	f106 0048 	add.w	r0, r6, #72	; 0x48
   88a38:	f04f 0101 	mov.w	r1, #1
   88a3c:	f04f 0204 	mov.w	r2, #4
   88a40:	47a8      	blx	r5
   88a42:	f106 0060 	add.w	r0, r6, #96	; 0x60
   88a46:	f04f 0101 	mov.w	r1, #1
   88a4a:	f04f 0205 	mov.w	r2, #5
   88a4e:	47a8      	blx	r5
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
   88a50:	f646 4345 	movw	r3, #27717	; 0x6c45
   88a54:	f2c0 0308 	movt	r3, #8
   88a58:	4798      	blx	r3
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   88a5a:	6822      	ldr	r2, [r4, #0]
   88a5c:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   88a60:	6021      	str	r1, [r4, #0]
	udd_enable_address();
   88a62:	6820      	ldr	r0, [r4, #0]
   88a64:	f040 0380 	orr.w	r3, r0, #128	; 0x80
   88a68:	6023      	str	r3, [r4, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   88a6a:	f44f 4141 	mov.w	r1, #49408	; 0xc100
   88a6e:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88a72:	680a      	ldr	r2, [r1, #0]
   88a74:	f422 50cb 	bic.w	r0, r2, #6496	; 0x1960
   88a78:	f020 031c 	bic.w	r3, r0, #28
   88a7c:	f043 0230 	orr.w	r2, r3, #48	; 0x30
   88a80:	600a      	str	r2, [r1, #0]
		USB_EP_TYPE_CONTROL,
		0,
		USB_DEVICE_EP_CTRL_SIZE,
		UOTGHS_DEVEPTCFG_EPBK_1_BANK);

	udd_allocate_memory(0);
   88a82:	6808      	ldr	r0, [r1, #0]
   88a84:	f040 0302 	orr.w	r3, r0, #2
   88a88:	600b      	str	r3, [r1, #0]
	udd_enable_endpoint(0);
   88a8a:	69e1      	ldr	r1, [r4, #28]
   88a8c:	f041 0201 	orr.w	r2, r1, #1
   88a90:	61e2      	str	r2, [r4, #28]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   88a92:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   88a96:	b672      	cpsid	i
   88a98:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   88a9c:	f240 23a0 	movw	r3, #672	; 0x2a0
   88aa0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88aa4:	f04f 0100 	mov.w	r1, #0
   88aa8:	7019      	strb	r1, [r3, #0]
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
   88aaa:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   88aae:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88ab2:	f04f 0304 	mov.w	r3, #4
   88ab6:	6013      	str	r3, [r2, #0]
	udd_enable_out_received_interrupt(0);
   88ab8:	f04f 0102 	mov.w	r1, #2
   88abc:	6011      	str	r1, [r2, #0]
	udd_enable_endpoint_interrupt(0);
   88abe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   88ac2:	61a2      	str	r2, [r4, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88ac4:	b948      	cbnz	r0, 88ada <UOTGHS_Handler+0x81a>
		cpu_irq_enable();
   88ac6:	f240 20a0 	movw	r0, #672	; 0x2a0
   88aca:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88ace:	f04f 0301 	mov.w	r3, #1
   88ad2:	7003      	strb	r3, [r0, #0]
   88ad4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   88ad8:	b662      	cpsie	i
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
   88ada:	f647 2195 	movw	r1, #31381	; 0x7a95
   88ade:	f2c0 0108 	movt	r1, #8
   88ae2:	4788      	blx	r1
		goto udd_interrupt_end;
   88ae4:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   88ae6:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88aea:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88aee:	6901      	ldr	r1, [r0, #16]
   88af0:	f011 0f01 	tst.w	r1, #1
   88af4:	d02a      	beq.n	88b4c <UOTGHS_Handler+0x88c>
   88af6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88afa:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88afe:	685a      	ldr	r2, [r3, #4]
   88b00:	f012 0f01 	tst.w	r2, #1
   88b04:	d022      	beq.n	88b4c <UOTGHS_Handler+0x88c>
		otg_unfreeze_clock();
   88b06:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   88b0a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88b0e:	f8d1 0800 	ldr.w	r0, [r1, #2048]	; 0x800
   88b12:	f420 4380 	bic.w	r3, r0, #16384	; 0x4000
   88b16:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   88b1a:	f04f 0201 	mov.w	r2, #1
   88b1e:	614a      	str	r2, [r1, #20]
		udd_enable_wake_up_interrupt();
   88b20:	f04f 0010 	mov.w	r0, #16
   88b24:	6188      	str	r0, [r1, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   88b26:	f8d1 3800 	ldr.w	r3, [r1, #2048]	; 0x800
   88b2a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
   88b2e:	f8c1 2800 	str.w	r2, [r1, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
   88b32:	f04f 0000 	mov.w	r0, #0
   88b36:	f647 11e9 	movw	r1, #31209	; 0x79e9
   88b3a:	f2c0 0108 	movt	r1, #8
   88b3e:	4788      	blx	r1
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   88b40:	f644 50ed 	movw	r0, #19949	; 0x4ded
   88b44:	f2c0 0008 	movt	r0, #8
   88b48:	4780      	blx	r0
#endif
		goto udd_interrupt_end;
   88b4a:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   88b4c:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88b50:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88b54:	6901      	ldr	r1, [r0, #16]
   88b56:	f011 0f10 	tst.w	r1, #16
   88b5a:	d034      	beq.n	88bc6 <UOTGHS_Handler+0x906>
   88b5c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88b60:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88b64:	685a      	ldr	r2, [r3, #4]
   88b66:	f012 0f10 	tst.w	r2, #16
   88b6a:	d02c      	beq.n	88bc6 <UOTGHS_Handler+0x906>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
   88b6c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   88b70:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88b74:	f8d1 2800 	ldr.w	r2, [r1, #2048]	; 0x800
   88b78:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   88b7c:	f8c1 0800 	str.w	r0, [r1, #2048]	; 0x800
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   88b80:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88b84:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88b88:	e003      	b.n	88b92 <UOTGHS_Handler+0x8d2>
			if (Is_udd_suspend()) {
   88b8a:	685a      	ldr	r2, [r3, #4]
   88b8c:	f012 0f01 	tst.w	r2, #1
   88b90:	d104      	bne.n	88b9c <UOTGHS_Handler+0x8dc>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   88b92:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
   88b96:	f411 4f80 	tst.w	r1, #16384	; 0x4000
   88b9a:	d0f6      	beq.n	88b8a <UOTGHS_Handler+0x8ca>
			if (Is_udd_suspend()) {
				break; // In case of USB state change in HS
			}
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
   88b9c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   88ba0:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88ba4:	f04f 0010 	mov.w	r0, #16
   88ba8:	6148      	str	r0, [r1, #20]
		udd_enable_suspend_interrupt();
   88baa:	f04f 0001 	mov.w	r0, #1
   88bae:	6188      	str	r0, [r1, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
   88bb0:	f647 13e9 	movw	r3, #31209	; 0x79e9
   88bb4:	f2c0 0308 	movt	r3, #8
   88bb8:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   88bba:	f644 52f1 	movw	r2, #19953	; 0x4df1
   88bbe:	f2c0 0208 	movt	r2, #8
   88bc2:	4790      	blx	r2
#endif
		goto udd_interrupt_end;
   88bc4:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_otg_vbus_transition()) {
   88bc6:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88bca:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88bce:	f8d0 1804 	ldr.w	r1, [r0, #2052]	; 0x804
   88bd2:	f011 0f02 	tst.w	r1, #2
   88bd6:	f000 811c 	beq.w	88e12 <UOTGHS_Handler+0xb52>
		dbg_print("VBus ");
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
   88bda:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88bde:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88be2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   88be6:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   88bea:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
		otg_ack_vbus_transition();
   88bee:	f04f 0102 	mov.w	r1, #2
   88bf2:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
		otg_freeze_clock();
   88bf6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   88bfa:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   88bfe:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
   88c02:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   88c06:	f413 6f00 	tst.w	r3, #2048	; 0x800
			udd_attach();
   88c0a:	bf19      	ittee	ne
   88c0c:	f248 13dd 	movwne	r3, #33245	; 0x81dd
   88c10:	f2c0 0308 	movtne	r3, #8
		} else {
			udd_detach();
   88c14:	f248 2385 	movweq	r3, #33413	; 0x8285
   88c18:	f2c0 0308 	movteq	r3, #8
   88c1c:	4798      	blx	r3
   88c1e:	bd70      	pop	{r4, r5, r6, pc}
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88c20:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88c24:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88c28:	6901      	ldr	r1, [r0, #16]
   88c2a:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
   88c2e:	d008      	beq.n	88c42 <UOTGHS_Handler+0x982>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   88c30:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88c34:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88c38:	685a      	ldr	r2, [r3, #4]
   88c3a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
   88c3e:	f47f ade6 	bne.w	8880e <UOTGHS_Handler+0x54e>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88c42:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88c46:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88c4a:	6901      	ldr	r1, [r0, #16]
   88c4c:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   88c50:	d024      	beq.n	88c9c <UOTGHS_Handler+0x9dc>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88c52:	f24c 13c4 	movw	r3, #49604	; 0xc1c4
   88c56:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88c5a:	681a      	ldr	r2, [r3, #0]
   88c5c:	f012 0f01 	tst.w	r2, #1
   88c60:	d110      	bne.n	88c84 <UOTGHS_Handler+0x9c4>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   88c62:	f24c 13c4 	movw	r3, #49604	; 0xc1c4
   88c66:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88c6a:	681a      	ldr	r2, [r3, #0]
   88c6c:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   88c70:	d014      	beq.n	88c9c <UOTGHS_Handler+0x9dc>
					&& (0 == udd_nb_busy_bank(ep))) {
   88c72:	f24c 1034 	movw	r0, #49460	; 0xc134
   88c76:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88c7a:	6801      	ldr	r1, [r0, #0]
   88c7c:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   88c80:	d10c      	bne.n	88c9c <UOTGHS_Handler+0x9dc>
   88c82:	e65e      	b.n	88942 <UOTGHS_Handler+0x682>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   88c84:	f24c 1034 	movw	r0, #49460	; 0xc134
   88c88:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88c8c:	6801      	ldr	r1, [r0, #0]
   88c8e:	f011 0f01 	tst.w	r1, #1
   88c92:	d0e6      	beq.n	88c62 <UOTGHS_Handler+0x9a2>
   88c94:	e611      	b.n	888ba <UOTGHS_Handler+0x5fa>
   88c96:	bf00      	nop
   88c98:	200715f8 	.word	0x200715f8
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88c9c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88ca0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88ca4:	691a      	ldr	r2, [r3, #16]
   88ca6:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
   88caa:	d008      	beq.n	88cbe <UOTGHS_Handler+0x9fe>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   88cac:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88cb0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88cb4:	6841      	ldr	r1, [r0, #4]
   88cb6:	f011 6f80 	tst.w	r1, #67108864	; 0x4000000
   88cba:	f47f adb1 	bne.w	88820 <UOTGHS_Handler+0x560>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88cbe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88cc2:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88cc6:	691a      	ldr	r2, [r3, #16]
   88cc8:	f412 4f80 	tst.w	r2, #16384	; 0x4000
   88ccc:	d021      	beq.n	88d12 <UOTGHS_Handler+0xa52>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88cce:	f24c 10c8 	movw	r0, #49608	; 0xc1c8
   88cd2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88cd6:	6801      	ldr	r1, [r0, #0]
   88cd8:	f011 0f01 	tst.w	r1, #1
   88cdc:	d110      	bne.n	88d00 <UOTGHS_Handler+0xa40>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   88cde:	f24c 10c8 	movw	r0, #49608	; 0xc1c8
   88ce2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88ce6:	6801      	ldr	r1, [r0, #0]
   88ce8:	f411 5f80 	tst.w	r1, #4096	; 0x1000
   88cec:	d011      	beq.n	88d12 <UOTGHS_Handler+0xa52>
					&& (0 == udd_nb_busy_bank(ep))) {
   88cee:	f24c 1338 	movw	r3, #49464	; 0xc138
   88cf2:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88cf6:	681a      	ldr	r2, [r3, #0]
   88cf8:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   88cfc:	d109      	bne.n	88d12 <UOTGHS_Handler+0xa52>
   88cfe:	e626      	b.n	8894e <UOTGHS_Handler+0x68e>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   88d00:	f24c 1338 	movw	r3, #49464	; 0xc138
   88d04:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88d08:	681a      	ldr	r2, [r3, #0]
   88d0a:	f012 0f01 	tst.w	r2, #1
   88d0e:	d0e6      	beq.n	88cde <UOTGHS_Handler+0xa1e>
   88d10:	e5d9      	b.n	888c6 <UOTGHS_Handler+0x606>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88d12:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88d16:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88d1a:	6901      	ldr	r1, [r0, #16]
   88d1c:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
   88d20:	d008      	beq.n	88d34 <UOTGHS_Handler+0xa74>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   88d22:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88d26:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88d2a:	685a      	ldr	r2, [r3, #4]
   88d2c:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
   88d30:	f47f ad7c 	bne.w	8882c <UOTGHS_Handler+0x56c>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88d34:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88d38:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88d3c:	6901      	ldr	r1, [r0, #16]
   88d3e:	f411 4f00 	tst.w	r1, #32768	; 0x8000
   88d42:	d021      	beq.n	88d88 <UOTGHS_Handler+0xac8>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88d44:	f24c 13cc 	movw	r3, #49612	; 0xc1cc
   88d48:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88d4c:	681a      	ldr	r2, [r3, #0]
   88d4e:	f012 0f01 	tst.w	r2, #1
   88d52:	d110      	bne.n	88d76 <UOTGHS_Handler+0xab6>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   88d54:	f24c 13cc 	movw	r3, #49612	; 0xc1cc
   88d58:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88d5c:	681a      	ldr	r2, [r3, #0]
   88d5e:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   88d62:	d011      	beq.n	88d88 <UOTGHS_Handler+0xac8>
					&& (0 == udd_nb_busy_bank(ep))) {
   88d64:	f24c 103c 	movw	r0, #49468	; 0xc13c
   88d68:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88d6c:	6801      	ldr	r1, [r0, #0]
   88d6e:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   88d72:	d109      	bne.n	88d88 <UOTGHS_Handler+0xac8>
   88d74:	e5f1      	b.n	8895a <UOTGHS_Handler+0x69a>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   88d76:	f24c 103c 	movw	r0, #49468	; 0xc13c
   88d7a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88d7e:	6801      	ldr	r1, [r0, #0]
   88d80:	f011 0f01 	tst.w	r1, #1
   88d84:	d0e6      	beq.n	88d54 <UOTGHS_Handler+0xa94>
   88d86:	e5a4      	b.n	888d2 <UOTGHS_Handler+0x612>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88d88:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88d8c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88d90:	691a      	ldr	r2, [r3, #16]
   88d92:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
   88d96:	d008      	beq.n	88daa <UOTGHS_Handler+0xaea>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   88d98:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88d9c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88da0:	6841      	ldr	r1, [r0, #4]
   88da2:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
   88da6:	f47f ad47 	bne.w	88838 <UOTGHS_Handler+0x578>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88daa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88dae:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88db2:	691a      	ldr	r2, [r3, #16]
   88db4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   88db8:	d021      	beq.n	88dfe <UOTGHS_Handler+0xb3e>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88dba:	f24c 10d0 	movw	r0, #49616	; 0xc1d0
   88dbe:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88dc2:	6801      	ldr	r1, [r0, #0]
   88dc4:	f011 0f01 	tst.w	r1, #1
   88dc8:	d110      	bne.n	88dec <UOTGHS_Handler+0xb2c>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   88dca:	f24c 10d0 	movw	r0, #49616	; 0xc1d0
   88dce:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88dd2:	6801      	ldr	r1, [r0, #0]
   88dd4:	f411 5f80 	tst.w	r1, #4096	; 0x1000
   88dd8:	d011      	beq.n	88dfe <UOTGHS_Handler+0xb3e>
					&& (0 == udd_nb_busy_bank(ep))) {
   88dda:	f24c 1340 	movw	r3, #49472	; 0xc140
   88dde:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88de2:	681a      	ldr	r2, [r3, #0]
   88de4:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   88de8:	d109      	bne.n	88dfe <UOTGHS_Handler+0xb3e>
   88dea:	e5d1      	b.n	88990 <UOTGHS_Handler+0x6d0>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   88dec:	f24c 1340 	movw	r3, #49472	; 0xc140
   88df0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88df4:	681a      	ldr	r2, [r3, #0]
   88df6:	f012 0f01 	tst.w	r2, #1
   88dfa:	d0e6      	beq.n	88dca <UOTGHS_Handler+0xb0a>
   88dfc:	e56f      	b.n	888de <UOTGHS_Handler+0x61e>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88dfe:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88e02:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88e06:	6901      	ldr	r1, [r0, #16]
   88e08:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
   88e0c:	f47f acf1 	bne.w	887f2 <UOTGHS_Handler+0x532>
   88e10:	e534      	b.n	8887c <UOTGHS_Handler+0x5bc>
   88e12:	bd70      	pop	{r4, r5, r6, pc}
   88e14:	b249      	sxtb	r1, r1
   88e16:	2900      	cmp	r1, #0
   88e18:	f43f ac01 	beq.w	8861e <UOTGHS_Handler+0x35e>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
   88e1c:	f813 0b01 	ldrb.w	r0, [r3], #1
   88e20:	f802 0b01 	strb.w	r0, [r2], #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   88e24:	b2d9      	uxtb	r1, r3
   88e26:	42a1      	cmp	r1, r4
   88e28:	f4ff abf9 	bcc.w	8861e <UOTGHS_Handler+0x35e>
   88e2c:	e406      	b.n	8863c <UOTGHS_Handler+0x37c>
   88e2e:	bf00      	nop

00088e30 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   88e30:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88e34:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88e38:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
#else
	return false;
#endif
}
   88e3c:	f410 5040 	ands.w	r0, r0, #12288	; 0x3000
   88e40:	bf18      	it	ne
   88e42:	2001      	movne	r0, #1
   88e44:	4770      	bx	lr
   88e46:	bf00      	nop

00088e48 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
   88e48:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88e4c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88e50:	681a      	ldr	r2, [r3, #0]
   88e52:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   88e56:	6019      	str	r1, [r3, #0]
	udd_configure_address(address);
   88e58:	681a      	ldr	r2, [r3, #0]
   88e5a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   88e5e:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   88e62:	ea40 0201 	orr.w	r2, r0, r1
   88e66:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   88e68:	6818      	ldr	r0, [r3, #0]
   88e6a:	f040 0180 	orr.w	r1, r0, #128	; 0x80
   88e6e:	6019      	str	r1, [r3, #0]
   88e70:	4770      	bx	lr
   88e72:	bf00      	nop

00088e74 <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
   88e74:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88e78:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88e7c:	6818      	ldr	r0, [r3, #0]
}
   88e7e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   88e82:	4770      	bx	lr

00088e84 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
   88e84:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88e88:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88e8c:	6a18      	ldr	r0, [r3, #32]
}
   88e8e:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   88e92:	4770      	bx	lr

00088e94 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
   88e94:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88e98:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88e9c:	6a18      	ldr	r0, [r3, #32]
}
   88e9e:	ea4f 4180 	mov.w	r1, r0, lsl #18
   88ea2:	ea4f 4091 	mov.w	r0, r1, lsr #18
   88ea6:	4770      	bx	lr

00088ea8 <udd_set_setup_payload>:
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
	udd_g_ctrlreq.payload = payload;
   88ea8:	f641 43ac 	movw	r3, #7340	; 0x1cac
   88eac:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88eb0:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   88eb2:	8199      	strh	r1, [r3, #12]
   88eb4:	4770      	bx	lr
   88eb6:	bf00      	nop

00088eb8 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
   88eb8:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   88eba:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   88ebe:	2c05      	cmp	r4, #5
   88ec0:	d82a      	bhi.n	88f18 <udd_ep_free+0x60>
		return;
	}
	udd_disable_endpoint(ep_index);
   88ec2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88ec6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88eca:	69d9      	ldr	r1, [r3, #28]
   88ecc:	f04f 0201 	mov.w	r2, #1
   88ed0:	fa02 f204 	lsl.w	r2, r2, r4
   88ed4:	ea21 0102 	bic.w	r1, r1, r2
   88ed8:	61d9      	str	r1, [r3, #28]
	udd_unallocate_memory(ep_index);
   88eda:	f44f 4341 	mov.w	r3, #49408	; 0xc100
   88ede:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88ee2:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   88ee6:	f022 0102 	bic.w	r1, r2, #2
   88eea:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	udd_ep_abort_job(ep);
   88eee:	f647 6315 	movw	r3, #32277	; 0x7e15
   88ef2:	f2c0 0308 	movt	r3, #8
   88ef6:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   88ef8:	f104 34ff 	add.w	r4, r4, #4294967295
   88efc:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   88f00:	f241 52b0 	movw	r2, #5552	; 0x15b0
   88f04:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88f08:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
   88f0c:	7d21      	ldrb	r1, [r4, #20]
   88f0e:	f36f 0182 	bfc	r1, #2, #1
   88f12:	7521      	strb	r1, [r4, #20]
   88f14:	f104 0410 	add.w	r4, r4, #16
   88f18:	bd10      	pop	{r4, pc}
   88f1a:	bf00      	nop

00088f1c <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	return Is_udd_endpoint_stall_requested(ep_index);
   88f1c:	f000 000f 	and.w	r0, r0, #15
   88f20:	f24c 13c0 	movw	r3, #49600	; 0xc1c0
   88f24:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88f28:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
}
   88f2c:	f3c1 40c0 	ubfx	r0, r1, #19, #1
   88f30:	4770      	bx	lr
   88f32:	bf00      	nop

00088f34 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   88f34:	b430      	push	{r4, r5}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   88f36:	f000 030f 	and.w	r3, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
   88f3a:	2b05      	cmp	r3, #5
   88f3c:	d87a      	bhi.n	89034 <udd_ep_set_halt+0x100>
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   88f3e:	f24c 12c0 	movw	r2, #49600	; 0xc1c0
   88f42:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88f46:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   88f4a:	f411 2f00 	tst.w	r1, #524288	; 0x80000
   88f4e:	d174      	bne.n	8903a <udd_ep_set_halt+0x106>


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   88f50:	f103 34ff 	add.w	r4, r3, #4294967295
   88f54:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   88f58:	f241 51b0 	movw	r1, #5552	; 0x15b0
   88f5c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88f60:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   88f64:	7d11      	ldrb	r1, [r2, #20]
   88f66:	f001 0404 	and.w	r4, r1, #4
   88f6a:	b2e4      	uxtb	r4, r4
   88f6c:	2c00      	cmp	r4, #0
   88f6e:	d167      	bne.n	89040 <udd_ep_set_halt+0x10c>
		return true; // Already STALL
	}

	if (ptr_job->busy == true) {
   88f70:	f011 0f01 	tst.w	r1, #1
   88f74:	d167      	bne.n	89046 <udd_ep_set_halt+0x112>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   88f76:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   88f7a:	f1d5 0501 	rsbs	r5, r5, #1
   88f7e:	bf38      	it	cc
   88f80:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   88f82:	b672      	cpsid	i
   88f84:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   88f88:	f240 21a0 	movw	r1, #672	; 0x2a0
   88f8c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88f90:	700c      	strb	r4, [r1, #0]
		return false; // Job on going, stall impossible
	}

	flags = cpu_irq_save();
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   88f92:	f010 0f80 	tst.w	r0, #128	; 0x80
   88f96:	d027      	beq.n	88fe8 <udd_ep_set_halt+0xb4>
   88f98:	f24c 1030 	movw	r0, #49456	; 0xc130
   88f9c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88fa0:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   88fa4:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   88fa8:	d01e      	beq.n	88fe8 <udd_ep_set_halt+0xb4>
		// Delay the stall after the end of IN transfer on USB line
		ptr_job->stall_requested = true;
   88faa:	7d10      	ldrb	r0, [r2, #20]
   88fac:	f040 0104 	orr.w	r1, r0, #4
   88fb0:	7511      	strb	r1, [r2, #20]
#ifdef UDD_EP_FIFO_SUPPORTED
		udd_disable_in_send_interrupt(ep_index);
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
   88fb2:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   88fb6:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88fba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   88fbe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
   88fc2:	fa02 f303 	lsl.w	r3, r2, r3
   88fc6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   88fca:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88fce:	618b      	str	r3, [r1, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88fd0:	b3e5      	cbz	r5, 8904c <udd_ep_set_halt+0x118>
		cpu_irq_enable();
   88fd2:	f04f 0001 	mov.w	r0, #1
   88fd6:	f240 22a0 	movw	r2, #672	; 0x2a0
   88fda:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88fde:	7010      	strb	r0, [r2, #0]
   88fe0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   88fe4:	b662      	cpsie	i
   88fe6:	e036      	b.n	89056 <udd_ep_set_halt+0x122>
		cpu_irq_restore(flags);
		return true;
	}
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   88fe8:	f44f 4241 	mov.w	r2, #49408	; 0xc100
   88fec:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88ff0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   88ff4:	f420 7100 	bic.w	r1, r0, #512	; 0x200
   88ff8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_ack_stall(ep_index);
   88ffc:	f24c 1260 	movw	r2, #49504	; 0xc160
   89000:	f2c4 020a 	movt	r2, #16394	; 0x400a
   89004:	f04f 0040 	mov.w	r0, #64	; 0x40
   89008:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   8900c:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   89010:	f2c4 020a 	movt	r2, #16394	; 0x400a
   89014:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   89018:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8901c:	b1cd      	cbz	r5, 89052 <udd_ep_set_halt+0x11e>
		cpu_irq_enable();
   8901e:	f04f 0001 	mov.w	r0, #1
   89022:	f240 23a0 	movw	r3, #672	; 0x2a0
   89026:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8902a:	7018      	strb	r0, [r3, #0]
   8902c:	f3bf 8f5f 	dmb	sy
   89030:	b662      	cpsie	i
   89032:	e010      	b.n	89056 <udd_ep_set_halt+0x122>
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
   89034:	f04f 0000 	mov.w	r0, #0
   89038:	e00d      	b.n	89056 <udd_ep_set_halt+0x122>
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
   8903a:	f04f 0001 	mov.w	r0, #1
   8903e:	e00a      	b.n	89056 <udd_ep_set_halt+0x122>
   89040:	f04f 0001 	mov.w	r0, #1
   89044:	e007      	b.n	89056 <udd_ep_set_halt+0x122>
	}

	if (ptr_job->busy == true) {
		return false; // Job on going, stall impossible
   89046:	f04f 0000 	mov.w	r0, #0
   8904a:	e004      	b.n	89056 <udd_ep_set_halt+0x122>
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
   8904c:	f04f 0001 	mov.w	r0, #1
   89050:	e001      	b.n	89056 <udd_ep_set_halt+0x122>
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
	udd_ack_stall(ep_index);
	udd_enable_stall_handshake(ep_index);
	cpu_irq_restore(flags);
	return true;
   89052:	f04f 0001 	mov.w	r0, #1
}
   89056:	bc30      	pop	{r4, r5}
   89058:	4770      	bx	lr
   8905a:	bf00      	nop

0008905c <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   8905c:	b508      	push	{r3, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8905e:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
   89062:	2805      	cmp	r0, #5
   89064:	d85f      	bhi.n	89126 <udd_ep_clear_halt+0xca>


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   89066:	f100 33ff 	add.w	r3, r0, #4294967295
   8906a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   8906e:	f241 52b0 	movw	r2, #5552	; 0x15b0
   89072:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89076:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;

	if (ptr_job->stall_requested) {
   8907a:	7d19      	ldrb	r1, [r3, #20]
   8907c:	f001 0204 	and.w	r2, r1, #4
   89080:	b2d1      	uxtb	r1, r2
   89082:	2900      	cmp	r1, #0
   89084:	d055      	beq.n	89132 <udd_ep_clear_halt+0xd6>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
   89086:	7d1a      	ldrb	r2, [r3, #20]
   89088:	f36f 0282 	bfc	r2, #2, #1
   8908c:	751a      	strb	r2, [r3, #20]
		udd_disable_bank_interrupt(ep_index);
   8908e:	f24c 2120 	movw	r1, #49696	; 0xc220
   89092:	f2c4 010a 	movt	r1, #16394	; 0x400a
   89096:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8909a:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
   8909e:	fa02 f100 	lsl.w	r1, r2, r0
   890a2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   890a6:	f2c4 020a 	movt	r2, #16394	; 0x400a
   890aa:	6151      	str	r1, [r2, #20]
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   890ac:	ea4f 0280 	mov.w	r2, r0, lsl #2
   890b0:	f24c 11c0 	movw	r1, #49600	; 0xc1c0
   890b4:	f2c4 010a 	movt	r1, #16394	; 0x400a
   890b8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   890bc:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   890c0:	d024      	beq.n	8910c <udd_ep_clear_halt+0xb0>
		if (Is_udd_stall(ep_index)) {
   890c2:	f24c 1130 	movw	r1, #49456	; 0xc130
   890c6:	f2c4 010a 	movt	r1, #16394	; 0x400a
   890ca:	5850      	ldr	r0, [r2, r1]
   890cc:	f010 0f40 	tst.w	r0, #64	; 0x40
   890d0:	d00d      	beq.n	890ee <udd_ep_clear_halt+0x92>
			udd_ack_stall(ep_index);
   890d2:	f24c 1160 	movw	r1, #49504	; 0xc160
   890d6:	f2c4 010a 	movt	r1, #16394	; 0x400a
   890da:	f04f 0040 	mov.w	r0, #64	; 0x40
   890de:	5050      	str	r0, [r2, r1]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep_index);
   890e0:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   890e4:	f2c4 010a 	movt	r1, #16394	; 0x400a
   890e8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   890ec:	5050      	str	r0, [r2, r1]
		}
		// Disable stall
		udd_disable_stall_handshake(ep_index);
   890ee:	f24c 2120 	movw	r1, #49696	; 0xc220
   890f2:	f2c4 010a 	movt	r1, #16394	; 0x400a
   890f6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   890fa:	5050      	str	r0, [r2, r1]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   890fc:	f44f 4141 	mov.w	r1, #49408	; 0xc100
   89100:	f2c4 010a 	movt	r1, #16394	; 0x400a
   89104:	5850      	ldr	r0, [r2, r1]
   89106:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   8910a:	5050      	str	r0, [r2, r1]
		b_stall_cleared = true;
	}
	if (b_stall_cleared) {
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   8910c:	7d1a      	ldrb	r2, [r3, #20]
   8910e:	f012 0f01 	tst.w	r2, #1
   89112:	d00b      	beq.n	8912c <udd_ep_clear_halt+0xd0>
			ptr_job->busy = false;
   89114:	7d19      	ldrb	r1, [r3, #20]
   89116:	f36f 0100 	bfc	r1, #0, #1
   8911a:	7519      	strb	r1, [r3, #20]
			ptr_job->call_nohalt();
   8911c:	681b      	ldr	r3, [r3, #0]
   8911e:	4798      	blx	r3
		}
	}
	return true;
   89120:	f04f 0001 	mov.w	r0, #1
   89124:	bd08      	pop	{r3, pc}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;
   89126:	f04f 0000 	mov.w	r0, #0
   8912a:	bd08      	pop	{r3, pc}
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   8912c:	f04f 0001 	mov.w	r0, #1
   89130:	bd08      	pop	{r3, pc}
		ptr_job->stall_requested = false;
		udd_disable_bank_interrupt(ep_index);
		udd_disable_endpoint_interrupt(ep_index);
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   89132:	ea4f 0280 	mov.w	r2, r0, lsl #2
   89136:	f24c 11c0 	movw	r1, #49600	; 0xc1c0
   8913a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8913e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   89142:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   89146:	d1bc      	bne.n	890c2 <udd_ep_clear_halt+0x66>
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   89148:	f04f 0001 	mov.w	r0, #1
}
   8914c:	bd08      	pop	{r3, pc}
   8914e:	bf00      	nop

00089150 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   89150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
#endif
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   89152:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   89156:	2805      	cmp	r0, #5
   89158:	d86c      	bhi.n	89234 <udd_ep_run+0xe4>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
   8915a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   8915e:	f2c4 040a 	movt	r4, #16394	; 0x400a
   89162:	69e4      	ldr	r4, [r4, #28]
   89164:	f04f 0501 	mov.w	r5, #1
   89168:	fa05 f500 	lsl.w	r5, r5, r0
   8916c:	4225      	tst	r5, r4
   8916e:	d064      	beq.n	8923a <udd_ep_run+0xea>
			|| Is_udd_endpoint_stall_requested(ep)
   89170:	f24c 14c0 	movw	r4, #49600	; 0xc1c0
   89174:	f2c4 040a 	movt	r4, #16394	; 0x400a
   89178:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   8917c:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   89180:	d15e      	bne.n	89240 <udd_ep_run+0xf0>
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   89182:	f100 35ff 	add.w	r5, r0, #4294967295
   89186:	eb05 0645 	add.w	r6, r5, r5, lsl #1
   8918a:	f241 54b0 	movw	r4, #5552	; 0x15b0
   8918e:	f2c2 0407 	movt	r4, #8199	; 0x2007
   89192:	eb04 04c6 	add.w	r4, r4, r6, lsl #3

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
   89196:	7d25      	ldrb	r5, [r4, #20]
   89198:	f005 0604 	and.w	r6, r5, #4
   8919c:	b2f6      	uxtb	r6, r6
   8919e:	2e00      	cmp	r6, #0
   891a0:	d151      	bne.n	89246 <udd_ep_run+0xf6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   891a2:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   891a6:	f1d7 0601 	rsbs	r6, r7, #1
   891aa:	bf38      	it	cc
   891ac:	2600      	movcc	r6, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   891ae:	b672      	cpsid	i
   891b0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   891b4:	f240 27a0 	movw	r7, #672	; 0x2a0
   891b8:	f2c2 0707 	movt	r7, #8199	; 0x2007
   891bc:	f04f 0c00 	mov.w	ip, #0
   891c0:	f887 c000 	strb.w	ip, [r7]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
   891c4:	f015 0f01 	tst.w	r5, #1
   891c8:	d009      	beq.n	891de <udd_ep_run+0x8e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   891ca:	2e00      	cmp	r6, #0
   891cc:	d03e      	beq.n	8924c <udd_ep_run+0xfc>
		cpu_irq_enable();
   891ce:	f04f 0301 	mov.w	r3, #1
   891d2:	703b      	strb	r3, [r7, #0]
   891d4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   891d8:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
   891da:	4660      	mov	r0, ip
   891dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	ptr_job->busy = true;
   891de:	7d25      	ldrb	r5, [r4, #20]
   891e0:	f045 0501 	orr.w	r5, r5, #1
   891e4:	7525      	strb	r5, [r4, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   891e6:	b14e      	cbz	r6, 891fc <udd_ep_run+0xac>
		cpu_irq_enable();
   891e8:	f240 25a0 	movw	r5, #672	; 0x2a0
   891ec:	f2c2 0507 	movt	r5, #8199	; 0x2007
   891f0:	f04f 0601 	mov.w	r6, #1
   891f4:	702e      	strb	r6, [r5, #0]
   891f6:	f3bf 8f5f 	dmb	sy
   891fa:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   891fc:	6062      	str	r2, [r4, #4]
	ptr_job->buf_size = buf_size;
   891fe:	60a3      	str	r3, [r4, #8]
	ptr_job->buf_cnt = 0;
   89200:	f04f 0200 	mov.w	r2, #0
   89204:	60e2      	str	r2, [r4, #12]
	ptr_job->buf_load = 0;
   89206:	6122      	str	r2, [r4, #16]
	ptr_job->call_trans = callback;
   89208:	9a06      	ldr	r2, [sp, #24]
   8920a:	6022      	str	r2, [r4, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   8920c:	b921      	cbnz	r1, 89218 <udd_ep_run+0xc8>
   8920e:	f1d3 0301 	rsbs	r3, r3, #1
   89212:	bf38      	it	cc
   89214:	2300      	movcc	r3, #0
   89216:	e001      	b.n	8921c <udd_ep_run+0xcc>
   89218:	f04f 0301 	mov.w	r3, #1
   8921c:	7d21      	ldrb	r1, [r4, #20]
   8921e:	f363 0141 	bfi	r1, r3, #1, #1
   89222:	7521      	strb	r1, [r4, #20]
#endif // UDD_EP_FIFO_SUPPORTED

#ifdef UDD_EP_DMA_SUPPORTED
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
   89224:	f647 6241 	movw	r2, #32321	; 0x7e41
   89228:	f2c0 0208 	movt	r2, #8
   8922c:	4790      	blx	r2
	return true;
   8922e:	f04f 0001 	mov.w	r0, #1
   89232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
   89234:	f04f 0000 	mov.w	r0, #0
   89238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
   8923a:	f04f 0000 	mov.w	r0, #0
   8923e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89240:	f04f 0000 	mov.w	r0, #0
   89244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89246:	f04f 0000 	mov.w	r0, #0
   8924a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
   8924c:	f04f 0000 	mov.w	r0, #0
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
	return true;
#endif
}
   89250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89252:	bf00      	nop

00089254 <udd_ep_alloc>:


#if (0 != USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   89254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89258:	b085      	sub	sp, #20
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
   8925a:	f000 040f 	and.w	r4, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
   8925e:	2c05      	cmp	r4, #5
   89260:	f200 8101 	bhi.w	89466 <udd_ep_alloc+0x212>
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
   89264:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89268:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8926c:	69db      	ldr	r3, [r3, #28]
   8926e:	f04f 0501 	mov.w	r5, #1
   89272:	fa05 f504 	lsl.w	r5, r5, r4
   89276:	421d      	tst	r5, r3
   89278:	f040 80f8 	bne.w	8946c <udd_ep_alloc+0x218>
		return false;
	}
	dbg_print("alloc(%x, %d) ", ep, MaxEndpointSize);

	// Bank choise
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   8927c:	f001 0303 	and.w	r3, r1, #3
   89280:	2b02      	cmp	r3, #2
   89282:	d006      	beq.n	89292 <udd_ep_alloc+0x3e>
   89284:	2b03      	cmp	r3, #3
   89286:	f000 80fd 	beq.w	89484 <udd_ep_alloc+0x230>
   8928a:	2b01      	cmp	r3, #1
   8928c:	f040 80f1 	bne.w	89472 <udd_ep_alloc+0x21e>
   89290:	e007      	b.n	892a2 <udd_ep_alloc+0x4e>
		break;
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
		break;
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   89292:	f1a4 0604 	sub.w	r6, r4, #4
   89296:	b2f5      	uxtb	r5, r6
		Assert(false);
		return false;
	}
	switch (nb_bank) {
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   89298:	2d01      	cmp	r5, #1
   8929a:	bf94      	ite	ls
   8929c:	2500      	movls	r5, #0
   8929e:	2501      	movhi	r5, #1
   892a0:	e001      	b.n	892a6 <udd_ep_alloc+0x52>
				UOTGHS_DEVEPTCFG_EPBK_Pos;
		break;
	case 2:
		bank = UOTGHS_DEVEPTCFG_EPBK_2_BANK >>
   892a2:	f04f 0501 	mov.w	r5, #1
	Assert((MaxEndpointSize == 1023)
		|| !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   892a6:	f44f 4741 	mov.w	r7, #49408	; 0xc100
   892aa:	f2c4 070a 	movt	r7, #16394	; 0x400a
   892ae:	eb07 0684 	add.w	r6, r7, r4, lsl #2
   892b2:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   892b6:	f423 57cb 	bic.w	r7, r3, #6496	; 0x1960
   892ba:	f027 071c 	bic.w	r7, r7, #28
   892be:	ea4f 21c1 	mov.w	r1, r1, lsl #11
   892c2:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
   892c6:	f000 0080 	and.w	r0, r0, #128	; 0x80
   892ca:	2800      	cmp	r0, #0
   892cc:	bf14      	ite	ne
   892ce:	f44f 7080 	movne.w	r0, #256	; 0x100
   892d2:	2000      	moveq	r0, #0
   892d4:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
   892d8:	b29b      	uxth	r3, r3
   892da:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   892de:	d306      	bcc.n	892ee <udd_ep_alloc+0x9a>
   892e0:	2a08      	cmp	r2, #8
   892e2:	d907      	bls.n	892f4 <udd_ep_alloc+0xa0>
   892e4:	ea4f 0342 	mov.w	r3, r2, lsl #1
   892e8:	f103 32ff 	add.w	r2, r3, #4294967295
   892ec:	e004      	b.n	892f8 <udd_ep_alloc+0xa4>
   892ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
   892f2:	e001      	b.n	892f8 <udd_ep_alloc+0xa4>
   892f4:	f04f 020f 	mov.w	r2, #15
   892f8:	fab2 f282 	clz	r2, r2
   892fc:	ea41 0585 	orr.w	r5, r1, r5, lsl #2
   89300:	4305      	orrs	r5, r0
   89302:	f1c2 011c 	rsb	r1, r2, #28
   89306:	ea45 1001 	orr.w	r0, r5, r1, lsl #4
   8930a:	f641 1374 	movw	r3, #6516	; 0x1974
   8930e:	4003      	ands	r3, r0
   89310:	433b      	orrs	r3, r7
   89312:	6033      	str	r3, [r6, #0]
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
   89314:	f04f 0601 	mov.w	r6, #1
   89318:	fa06 f604 	lsl.w	r6, r6, r4
   8931c:	b2b7      	uxth	r7, r6

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   8931e:	2c04      	cmp	r4, #4
   89320:	f200 80b3 	bhi.w	8948a <udd_ep_alloc+0x236>
   89324:	f24c 1114 	movw	r1, #49428	; 0xc114
   89328:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8932c:	f04f 0305 	mov.w	r3, #5
		if (Is_udd_endpoint_enabled(i)) {
   89330:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   89334:	f2c4 020a 	movt	r2, #16394	; 0x400a
   89338:	f04f 0001 	mov.w	r0, #1
   8933c:	ea6f 0504 	mvn.w	r5, r4
   89340:	18ee      	adds	r6, r5, r3
   89342:	ea06 0c00 	and.w	ip, r6, r0
   89346:	69d6      	ldr	r6, [r2, #28]
   89348:	fa00 f503 	lsl.w	r5, r0, r3
   8934c:	4235      	tst	r5, r6
   8934e:	f000 81c3 	beq.w	896d8 <udd_ep_alloc+0x484>
   89352:	e1b5      	b.n	896c0 <udd_ep_alloc+0x46c>
   89354:	46a0      	mov	r8, r4
   89356:	e7ff      	b.n	89358 <udd_ep_alloc+0x104>
   89358:	69d4      	ldr	r4, [r2, #28]
   8935a:	fa00 f603 	lsl.w	r6, r0, r3
   8935e:	4226      	tst	r6, r4
   89360:	d009      	beq.n	89376 <udd_ep_alloc+0x122>
			ep_allocated |= 1 << i;
   89362:	4337      	orrs	r7, r6
   89364:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   89366:	69d4      	ldr	r4, [r2, #28]
   89368:	ea24 0606 	bic.w	r6, r4, r6
   8936c:	61d6      	str	r6, [r2, #28]
			udd_unallocate_memory(i);
   8936e:	680d      	ldr	r5, [r1, #0]
   89370:	f025 0402 	bic.w	r4, r5, #2
   89374:	600c      	str	r4, [r1, #0]
   89376:	f103 33ff 	add.w	r3, r3, #4294967295
   8937a:	f1a1 0904 	sub.w	r9, r1, #4
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
   8937e:	69d4      	ldr	r4, [r2, #28]
   89380:	fa00 f503 	lsl.w	r5, r0, r3
   89384:	4225      	tst	r5, r4
   89386:	f000 81dc 	beq.w	89742 <udd_ep_alloc+0x4ee>
   8938a:	e1cc      	b.n	89726 <udd_ep_alloc+0x4d2>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
   8938c:	fa47 f004 	asr.w	r0, r7, r4
   89390:	f010 0f01 	tst.w	r0, #1
   89394:	d05a      	beq.n	8944c <udd_ep_alloc+0x1f8>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   89396:	f104 33ff 	add.w	r3, r4, #4294967295
   8939a:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   8939e:	eb09 05cc 	add.w	r5, r9, ip, lsl #3
			bool b_restart = ptr_job->busy;
   893a2:	7d29      	ldrb	r1, [r5, #20]
   893a4:	f001 0201 	and.w	r2, r1, #1
   893a8:	9203      	str	r2, [sp, #12]
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   893aa:	f36f 0100 	bfc	r1, #0, #1
   893ae:	7529      	strb	r1, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   893b0:	ea4f 0184 	mov.w	r1, r4, lsl #2
   893b4:	198a      	adds	r2, r1, r6
   893b6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   893ba:	f040 0302 	orr.w	r3, r0, #2
   893be:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			udd_enable_endpoint(i);
   893c2:	f8d8 301c 	ldr.w	r3, [r8, #28]
   893c6:	f04f 0001 	mov.w	r0, #1
   893ca:	fa00 fb04 	lsl.w	fp, r0, r4
   893ce:	ea4b 0303 	orr.w	r3, fp, r3
   893d2:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   893d6:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
   893da:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   893de:	d110      	bne.n	89402 <udd_ep_alloc+0x1ae>
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
   893e0:	682b      	ldr	r3, [r5, #0]
   893e2:	2b00      	cmp	r3, #0
   893e4:	d048      	beq.n	89478 <udd_ep_alloc+0x224>
					return false;
				}
				if (Is_udd_endpoint_in(i)) {
   893e6:	6811      	ldr	r1, [r2, #0]
   893e8:	f411 7f80 	tst.w	r1, #256	; 0x100
					i |= USB_EP_DIR_IN;
   893ec:	bf18      	it	ne
   893ee:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   893f2:	f04f 0001 	mov.w	r0, #1
   893f6:	68e9      	ldr	r1, [r5, #12]
   893f8:	4622      	mov	r2, r4
   893fa:	4798      	blx	r3
						ptr_job->buf_cnt, i);
				return false;
   893fc:	f04f 0000 	mov.w	r0, #0
   89400:	e05d      	b.n	894be <udd_ep_alloc+0x26a>
			}
			udd_enable_endpoint_bank_autoswitch(i);
   89402:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   89406:	f442 7300 	orr.w	r3, r2, #512	; 0x200
   8940a:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			if (b_restart) {
   8940e:	9a03      	ldr	r2, [sp, #12]
   89410:	b1e2      	cbz	r2, 8944c <udd_ep_alloc+0x1f8>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   89412:	68ea      	ldr	r2, [r5, #12]
   89414:	692b      	ldr	r3, [r5, #16]
   89416:	1ad3      	subs	r3, r2, r3
   89418:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8941a:	5989      	ldr	r1, [r1, r6]
   8941c:	f411 7f80 	tst.w	r1, #256	; 0x100
   89420:	bf14      	ite	ne
   89422:	f044 0080 	orrne.w	r0, r4, #128	; 0x80
   89426:	4620      	moveq	r0, r4
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   89428:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8942a:	f8d5 e004 	ldr.w	lr, [r5, #4]
   8942e:	68ad      	ldr	r5, [r5, #8]
   89430:	f859 203c 	ldr.w	r2, [r9, ip, lsl #3]
   89434:	9200      	str	r2, [sp, #0]
   89436:	f3c1 0140 	ubfx	r1, r1, #1, #1
   8943a:	eb0e 0203 	add.w	r2, lr, r3
   8943e:	1aeb      	subs	r3, r5, r3
   89440:	f249 1551 	movw	r5, #37201	; 0x9151
   89444:	f2c0 0508 	movt	r5, #8
   89448:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   8944a:	b1c0      	cbz	r0, 8947e <udd_ep_alloc+0x22a>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   8944c:	f104 0401 	add.w	r4, r4, #1
   89450:	b2e4      	uxtb	r4, r4
		if (ep_allocated & (1 << i)) {
   89452:	fa47 f004 	asr.w	r0, r7, r4
   89456:	f010 0f01 	tst.w	r0, #1
   8945a:	f000 812a 	beq.w	896b2 <udd_ep_alloc+0x45e>
   8945e:	e0d9      	b.n	89614 <udd_ep_alloc+0x3c0>
					return false;
				}
			}
		}
	}
	return true;
   89460:	f04f 0001 	mov.w	r0, #1
   89464:	e02b      	b.n	894be <udd_ep_alloc+0x26a>

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
   89466:	f04f 0000 	mov.w	r0, #0
   8946a:	e028      	b.n	894be <udd_ep_alloc+0x26a>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
   8946c:	f04f 0000 	mov.w	r0, #0
   89470:	e025      	b.n	894be <udd_ep_alloc+0x26a>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
		break;
	default:
		Assert(false);
		return false;
   89472:	f04f 0000 	mov.w	r0, #0
   89476:	e022      	b.n	894be <udd_ep_alloc+0x26a>
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i)) {
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
					return false;
   89478:	f04f 0000 	mov.w	r0, #0
   8947c:	e01f      	b.n	894be <udd_ep_alloc+0x26a>
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
					dbg_print("ErrReRun%d ", i);
					return false;
   8947e:	f04f 0000 	mov.w	r0, #0
   89482:	e01c      	b.n	894be <udd_ep_alloc+0x26a>
		Assert(false);
		return false;
	}
	switch (nb_bank) {
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   89484:	f04f 0500 	mov.w	r5, #0
   89488:	e70d      	b.n	892a6 <udd_ep_alloc+0x52>
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   8948a:	f241 59b0 	movw	r9, #5552	; 0x15b0
   8948e:	f2c2 0907 	movt	r9, #8199	; 0x2007
			bool b_restart = ptr_job->busy;
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
			// Re-allocate memory
			udd_allocate_memory(i);
   89492:	f44f 4641 	mov.w	r6, #49408	; 0xc100
   89496:	f2c4 060a 	movt	r6, #16394	; 0x400a
			udd_enable_endpoint(i);
   8949a:	f44f 4840 	mov.w	r8, #49152	; 0xc000
   8949e:	f2c4 080a 	movt	r8, #16394	; 0x400a
			if (!Is_udd_endpoint_configured(i)) {
   894a2:	f24c 1a30 	movw	sl, #49456	; 0xc130
   894a6:	f2c4 0a0a 	movt	sl, #16394	; 0x400a
   894aa:	f1c4 0b05 	rsb	fp, r4, #5
   894ae:	f00b 0b01 	and.w	fp, fp, #1
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
   894b2:	fa47 f204 	asr.w	r2, r7, r4
   894b6:	f012 0f01 	tst.w	r2, #1
   894ba:	d04c      	beq.n	89556 <udd_ep_alloc+0x302>
   894bc:	e002      	b.n	894c4 <udd_ep_alloc+0x270>
				}
			}
		}
	}
	return true;
}
   894be:	b005      	add	sp, #20
   894c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   894c4:	f104 30ff 	add.w	r0, r4, #4294967295
   894c8:	eb00 0540 	add.w	r5, r0, r0, lsl #1
   894cc:	eb09 05c5 	add.w	r5, r9, r5, lsl #3
			bool b_restart = ptr_job->busy;
   894d0:	7d2b      	ldrb	r3, [r5, #20]
   894d2:	f003 0c01 	and.w	ip, r3, #1
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   894d6:	f36f 0300 	bfc	r3, #0, #1
   894da:	752b      	strb	r3, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   894dc:	ea4f 0384 	mov.w	r3, r4, lsl #2
   894e0:	199a      	adds	r2, r3, r6
   894e2:	6811      	ldr	r1, [r2, #0]
   894e4:	f041 0002 	orr.w	r0, r1, #2
   894e8:	6010      	str	r0, [r2, #0]
			udd_enable_endpoint(i);
   894ea:	f8d8 101c 	ldr.w	r1, [r8, #28]
   894ee:	f04f 0001 	mov.w	r0, #1
   894f2:	fa00 f004 	lsl.w	r0, r0, r4
   894f6:	4301      	orrs	r1, r0
   894f8:	f8c8 101c 	str.w	r1, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   894fc:	4453      	add	r3, sl
   894fe:	6818      	ldr	r0, [r3, #0]
   89500:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   89504:	f43f af6c 	beq.w	893e0 <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   89508:	6811      	ldr	r1, [r2, #0]
   8950a:	f441 7300 	orr.w	r3, r1, #512	; 0x200
   8950e:	6013      	str	r3, [r2, #0]
			if (b_restart) {
   89510:	f1bc 0f00 	cmp.w	ip, #0
   89514:	d01f      	beq.n	89556 <udd_ep_alloc+0x302>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   89516:	68e8      	ldr	r0, [r5, #12]
   89518:	6929      	ldr	r1, [r5, #16]
   8951a:	1a43      	subs	r3, r0, r1
   8951c:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8951e:	6812      	ldr	r2, [r2, #0]
   89520:	f412 7f80 	tst.w	r2, #256	; 0x100
   89524:	d012      	beq.n	8954c <udd_ep_alloc+0x2f8>
   89526:	e013      	b.n	89550 <udd_ep_alloc+0x2fc>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   89528:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8952a:	686a      	ldr	r2, [r5, #4]
   8952c:	f8d5 e008 	ldr.w	lr, [r5, #8]
   89530:	682d      	ldr	r5, [r5, #0]
   89532:	9500      	str	r5, [sp, #0]
   89534:	f3c1 0140 	ubfx	r1, r1, #1, #1
   89538:	18d2      	adds	r2, r2, r3
   8953a:	ebc3 030e 	rsb	r3, r3, lr
   8953e:	f249 1551 	movw	r5, #37201	; 0x9151
   89542:	f2c0 0508 	movt	r5, #8
   89546:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   89548:	b928      	cbnz	r0, 89556 <udd_ep_alloc+0x302>
   8954a:	e798      	b.n	8947e <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8954c:	4620      	mov	r0, r4
   8954e:	e7eb      	b.n	89528 <udd_ep_alloc+0x2d4>
   89550:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   89554:	e7e8      	b.n	89528 <udd_ep_alloc+0x2d4>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   89556:	f104 0401 	add.w	r4, r4, #1
   8955a:	b2e4      	uxtb	r4, r4
   8955c:	2c06      	cmp	r4, #6
   8955e:	f43f af7f 	beq.w	89460 <udd_ep_alloc+0x20c>
   89562:	fa4f f08b 	sxtb.w	r0, fp
   89566:	2800      	cmp	r0, #0
   89568:	f43f af10 	beq.w	8938c <udd_ep_alloc+0x138>
		if (ep_allocated & (1 << i)) {
   8956c:	fa47 f304 	asr.w	r3, r7, r4
   89570:	f013 0f01 	tst.w	r3, #1
   89574:	d047      	beq.n	89606 <udd_ep_alloc+0x3b2>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   89576:	f104 31ff 	add.w	r1, r4, #4294967295
   8957a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   8957e:	eb09 05c2 	add.w	r5, r9, r2, lsl #3
			bool b_restart = ptr_job->busy;
   89582:	7d28      	ldrb	r0, [r5, #20]
   89584:	f000 0101 	and.w	r1, r0, #1
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   89588:	f36f 0000 	bfc	r0, #0, #1
   8958c:	7528      	strb	r0, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   8958e:	ea4f 0384 	mov.w	r3, r4, lsl #2
   89592:	199a      	adds	r2, r3, r6
   89594:	6810      	ldr	r0, [r2, #0]
   89596:	f040 0002 	orr.w	r0, r0, #2
   8959a:	6010      	str	r0, [r2, #0]
			udd_enable_endpoint(i);
   8959c:	f8d8 001c 	ldr.w	r0, [r8, #28]
   895a0:	f04f 0b01 	mov.w	fp, #1
   895a4:	fa0b fc04 	lsl.w	ip, fp, r4
   895a8:	ea4c 0000 	orr.w	r0, ip, r0
   895ac:	f8c8 001c 	str.w	r0, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   895b0:	4453      	add	r3, sl
   895b2:	6818      	ldr	r0, [r3, #0]
   895b4:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   895b8:	f43f af12 	beq.w	893e0 <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   895bc:	6813      	ldr	r3, [r2, #0]
   895be:	f443 7000 	orr.w	r0, r3, #512	; 0x200
   895c2:	6010      	str	r0, [r2, #0]
			if (b_restart) {
   895c4:	b1f9      	cbz	r1, 89606 <udd_ep_alloc+0x3b2>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   895c6:	68e9      	ldr	r1, [r5, #12]
   895c8:	692b      	ldr	r3, [r5, #16]
   895ca:	1acb      	subs	r3, r1, r3
   895cc:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   895ce:	6812      	ldr	r2, [r2, #0]
   895d0:	f412 7f80 	tst.w	r2, #256	; 0x100
   895d4:	d012      	beq.n	895fc <udd_ep_alloc+0x3a8>
   895d6:	e013      	b.n	89600 <udd_ep_alloc+0x3ac>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   895d8:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   895da:	686a      	ldr	r2, [r5, #4]
   895dc:	f8d5 e008 	ldr.w	lr, [r5, #8]
   895e0:	682d      	ldr	r5, [r5, #0]
   895e2:	9500      	str	r5, [sp, #0]
   895e4:	f3c1 0140 	ubfx	r1, r1, #1, #1
   895e8:	18d2      	adds	r2, r2, r3
   895ea:	ebc3 030e 	rsb	r3, r3, lr
   895ee:	f249 1551 	movw	r5, #37201	; 0x9151
   895f2:	f2c0 0508 	movt	r5, #8
   895f6:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   895f8:	b928      	cbnz	r0, 89606 <udd_ep_alloc+0x3b2>
   895fa:	e740      	b.n	8947e <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   895fc:	4620      	mov	r0, r4
   895fe:	e7eb      	b.n	895d8 <udd_ep_alloc+0x384>
   89600:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   89604:	e7e8      	b.n	895d8 <udd_ep_alloc+0x384>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   89606:	f104 0401 	add.w	r4, r4, #1
   8960a:	b2e4      	uxtb	r4, r4
   8960c:	2c06      	cmp	r4, #6
   8960e:	f47f aebd 	bne.w	8938c <udd_ep_alloc+0x138>
   89612:	e725      	b.n	89460 <udd_ep_alloc+0x20c>
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   89614:	f104 33ff 	add.w	r3, r4, #4294967295
   89618:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   8961c:	eb09 05cc 	add.w	r5, r9, ip, lsl #3
			bool b_restart = ptr_job->busy;
   89620:	7d29      	ldrb	r1, [r5, #20]
   89622:	f001 0201 	and.w	r2, r1, #1
   89626:	9203      	str	r2, [sp, #12]
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   89628:	f36f 0100 	bfc	r1, #0, #1
   8962c:	7529      	strb	r1, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   8962e:	ea4f 0184 	mov.w	r1, r4, lsl #2
   89632:	198a      	adds	r2, r1, r6
   89634:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   89638:	f040 0302 	orr.w	r3, r0, #2
   8963c:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			udd_enable_endpoint(i);
   89640:	f8d8 301c 	ldr.w	r3, [r8, #28]
   89644:	f04f 0001 	mov.w	r0, #1
   89648:	fa00 fb04 	lsl.w	fp, r0, r4
   8964c:	ea4b 0303 	orr.w	r3, fp, r3
   89650:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   89654:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
   89658:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   8965c:	f43f aec0 	beq.w	893e0 <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   89660:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   89664:	f442 7300 	orr.w	r3, r2, #512	; 0x200
   89668:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			if (b_restart) {
   8966c:	9803      	ldr	r0, [sp, #12]
   8966e:	b300      	cbz	r0, 896b2 <udd_ep_alloc+0x45e>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   89670:	68ea      	ldr	r2, [r5, #12]
   89672:	692b      	ldr	r3, [r5, #16]
   89674:	1ad3      	subs	r3, r2, r3
   89676:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   89678:	5989      	ldr	r1, [r1, r6]
   8967a:	f411 7f80 	tst.w	r1, #256	; 0x100
   8967e:	d013      	beq.n	896a8 <udd_ep_alloc+0x454>
   89680:	e014      	b.n	896ac <udd_ep_alloc+0x458>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   89682:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   89684:	f8d5 e004 	ldr.w	lr, [r5, #4]
   89688:	68ad      	ldr	r5, [r5, #8]
   8968a:	f859 203c 	ldr.w	r2, [r9, ip, lsl #3]
   8968e:	9200      	str	r2, [sp, #0]
   89690:	f3c1 0140 	ubfx	r1, r1, #1, #1
   89694:	eb0e 0203 	add.w	r2, lr, r3
   89698:	1aeb      	subs	r3, r5, r3
   8969a:	f249 1551 	movw	r5, #37201	; 0x9151
   8969e:	f2c0 0508 	movt	r5, #8
   896a2:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   896a4:	b928      	cbnz	r0, 896b2 <udd_ep_alloc+0x45e>
   896a6:	e6ea      	b.n	8947e <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   896a8:	4620      	mov	r0, r4
   896aa:	e7ea      	b.n	89682 <udd_ep_alloc+0x42e>
   896ac:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   896b0:	e7e7      	b.n	89682 <udd_ep_alloc+0x42e>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   896b2:	f104 0401 	add.w	r4, r4, #1
   896b6:	b2e4      	uxtb	r4, r4
   896b8:	2c06      	cmp	r4, #6
   896ba:	f47f ae67 	bne.w	8938c <udd_ep_alloc+0x138>
   896be:	e6cf      	b.n	89460 <udd_ep_alloc+0x20c>
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
   896c0:	fa00 f603 	lsl.w	r6, r0, r3
   896c4:	4337      	orrs	r7, r6
   896c6:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   896c8:	69d6      	ldr	r6, [r2, #28]
   896ca:	ea26 0505 	bic.w	r5, r6, r5
   896ce:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   896d0:	680e      	ldr	r6, [r1, #0]
   896d2:	f026 0502 	bic.w	r5, r6, #2
   896d6:	600d      	str	r5, [r1, #0]
   896d8:	f103 33ff 	add.w	r3, r3, #4294967295
   896dc:	f1a1 0104 	sub.w	r1, r1, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   896e0:	b2dd      	uxtb	r5, r3
   896e2:	42a5      	cmp	r5, r4
   896e4:	f67f aed1 	bls.w	8948a <udd_ep_alloc+0x236>
   896e8:	fa4f f68c 	sxtb.w	r6, ip
   896ec:	2e00      	cmp	r6, #0
   896ee:	f43f ae31 	beq.w	89354 <udd_ep_alloc+0x100>
		if (Is_udd_endpoint_enabled(i)) {
   896f2:	69d6      	ldr	r6, [r2, #28]
   896f4:	fa00 f503 	lsl.w	r5, r0, r3
   896f8:	4235      	tst	r5, r6
   896fa:	d009      	beq.n	89710 <udd_ep_alloc+0x4bc>
			ep_allocated |= 1 << i;
   896fc:	432f      	orrs	r7, r5
   896fe:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   89700:	69d6      	ldr	r6, [r2, #28]
   89702:	ea26 0505 	bic.w	r5, r6, r5
   89706:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   89708:	680e      	ldr	r6, [r1, #0]
   8970a:	f026 0502 	bic.w	r5, r6, #2
   8970e:	600d      	str	r5, [r1, #0]
   89710:	f103 33ff 	add.w	r3, r3, #4294967295
   89714:	f1a1 0104 	sub.w	r1, r1, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   89718:	b2dd      	uxtb	r5, r3
   8971a:	42a5      	cmp	r5, r4
   8971c:	bf88      	it	hi
   8971e:	46a0      	movhi	r8, r4
   89720:	f63f ae1a 	bhi.w	89358 <udd_ep_alloc+0x104>
   89724:	e6b1      	b.n	8948a <udd_ep_alloc+0x236>
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
   89726:	fa00 f603 	lsl.w	r6, r0, r3
   8972a:	4337      	orrs	r7, r6
   8972c:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   8972e:	69d4      	ldr	r4, [r2, #28]
   89730:	ea24 0505 	bic.w	r5, r4, r5
   89734:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   89736:	f851 6c04 	ldr.w	r6, [r1, #-4]
   8973a:	f026 0402 	bic.w	r4, r6, #2
   8973e:	f841 4c04 	str.w	r4, [r1, #-4]
   89742:	f103 33ff 	add.w	r3, r3, #4294967295
   89746:	f1a9 0104 	sub.w	r1, r9, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   8974a:	b2dd      	uxtb	r5, r3
   8974c:	4545      	cmp	r5, r8
   8974e:	f63f ae03 	bhi.w	89358 <udd_ep_alloc+0x104>
   89752:	4644      	mov	r4, r8
   89754:	e699      	b.n	8948a <udd_ep_alloc+0x236>
   89756:	bf00      	nop

00089758 <udd_ep_abort>:
#endif
}


void udd_ep_abort(udd_ep_id_t ep)
{
   89758:	b538      	push	{r3, r4, r5, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8975a:	f000 030f 	and.w	r3, r0, #15
		udd_disable_in_send_interrupt(ep_index);
	} else
#endif
	{
		// Stop DMA transfer
		udd_disable_endpoint_dma_interrupt(ep_index);
   8975e:	f103 32ff 	add.w	r2, r3, #4294967295
   89762:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   89766:	fa01 f102 	lsl.w	r1, r1, r2
   8976a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   8976e:	f2c4 020a 	movt	r2, #16394	; 0x400a
   89772:	6151      	str	r1, [r2, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   89774:	f44f 4443 	mov.w	r4, #49920	; 0xc300
   89778:	f2c4 040a 	movt	r4, #16394	; 0x400a
   8977c:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   89780:	f04f 0400 	mov.w	r4, #0
   89784:	608c      	str	r4, [r1, #8]
	}
	udd_disable_endpoint_interrupt(ep_index);
   89786:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8978a:	fa01 f103 	lsl.w	r1, r1, r3
   8978e:	6151      	str	r1, [r2, #20]
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
   89790:	f010 0f80 	tst.w	r0, #128	; 0x80
   89794:	d01c      	beq.n	897d0 <udd_ep_abort+0x78>
		while(udd_nb_busy_bank(ep_index)) {
   89796:	ea4f 0383 	mov.w	r3, r3, lsl #2
   8979a:	f24c 1530 	movw	r5, #49456	; 0xc130
   8979e:	f2c4 050a 	movt	r5, #16394	; 0x400a
   897a2:	1959      	adds	r1, r3, r5
			udd_kill_last_in_bank(ep_index);
   897a4:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   897a8:	f2c4 020a 	movt	r2, #16394	; 0x400a
   897ac:	189c      	adds	r4, r3, r2
   897ae:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
   897b2:	f24c 12c0 	movw	r2, #49600	; 0xc1c0
   897b6:	f2c4 020a 	movt	r2, #16394	; 0x400a
   897ba:	189a      	adds	r2, r3, r2
   897bc:	e004      	b.n	897c8 <udd_ep_abort+0x70>
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
			udd_kill_last_in_bank(ep_index);
   897be:	6025      	str	r5, [r4, #0]
			while(Is_udd_kill_last(ep_index));
   897c0:	6813      	ldr	r3, [r2, #0]
   897c2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   897c6:	d1fb      	bne.n	897c0 <udd_ep_abort+0x68>
		udd_endpoint_dma_set_control(ep_index, 0);
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
   897c8:	680b      	ldr	r3, [r1, #0]
   897ca:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   897ce:	d1f6      	bne.n	897be <udd_ep_abort+0x66>
			udd_kill_last_in_bank(ep_index);
			while(Is_udd_kill_last(ep_index));
		}
	}
	udd_ep_abort_job(ep);
   897d0:	f647 6115 	movw	r1, #32277	; 0x7e15
   897d4:	f2c0 0108 	movt	r1, #8
   897d8:	4788      	blx	r1
   897da:	bd38      	pop	{r3, r4, r5, pc}

000897dc <udd_ep_wait_stall_clear>:
}


bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
   897dc:	b510      	push	{r4, lr}
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   897de:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   897e2:	2805      	cmp	r0, #5
   897e4:	d831      	bhi.n	8984a <udd_ep_wait_stall_clear+0x6e>
		return false;
	}

	ptr_job = &udd_ep_job[ep - 1];

	if (!Is_udd_endpoint_enabled(ep)) {
   897e6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   897ea:	f2c4 030a 	movt	r3, #16394	; 0x400a
   897ee:	69db      	ldr	r3, [r3, #28]
   897f0:	f04f 0201 	mov.w	r2, #1
   897f4:	fa02 f200 	lsl.w	r2, r2, r0
   897f8:	421a      	tst	r2, r3
   897fa:	d029      	beq.n	89850 <udd_ep_wait_stall_clear+0x74>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	ptr_job = &udd_ep_job[ep - 1];
   897fc:	f100 33ff 	add.w	r3, r0, #4294967295
   89800:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   89804:	f241 52b0 	movw	r2, #5552	; 0x15b0
   89808:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8980c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (!Is_udd_endpoint_enabled(ep)) {
		return false; // Endpoint not enabled
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
   89810:	7d1a      	ldrb	r2, [r3, #20]
   89812:	f012 0f01 	tst.w	r2, #1
   89816:	d11e      	bne.n	89856 <udd_ep_wait_stall_clear+0x7a>
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
   89818:	f24c 14c0 	movw	r4, #49600	; 0xc1c0
   8981c:	f2c4 040a 	movt	r4, #16394	; 0x400a
   89820:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   89824:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   89828:	d103      	bne.n	89832 <udd_ep_wait_stall_clear+0x56>
			|| ptr_job->stall_requested) {
   8982a:	f002 0204 	and.w	r2, r2, #4
   8982e:	b2d0      	uxtb	r0, r2
   89830:	b138      	cbz	r0, 89842 <udd_ep_wait_stall_clear+0x66>
		// Endpoint halted then registes the callback
		ptr_job->busy = true;
   89832:	7d1a      	ldrb	r2, [r3, #20]
   89834:	f042 0001 	orr.w	r0, r2, #1
   89838:	7518      	strb	r0, [r3, #20]
		ptr_job->call_nohalt = callback;
   8983a:	6019      	str	r1, [r3, #0]
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
   8983c:	f04f 0001 	mov.w	r0, #1

	if (Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		// Endpoint halted then registes the callback
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
   89840:	bd10      	pop	{r4, pc}
	} else {
		// endpoint not halted then call directly callback
		callback();
   89842:	4788      	blx	r1
	}
	return true;
   89844:	f04f 0001 	mov.w	r0, #1
   89848:	bd10      	pop	{r4, pc}
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
   8984a:	f04f 0000 	mov.w	r0, #0
   8984e:	bd10      	pop	{r4, pc}
	}

	ptr_job = &udd_ep_job[ep - 1];

	if (!Is_udd_endpoint_enabled(ep)) {
		return false; // Endpoint not enabled
   89850:	f04f 0000 	mov.w	r0, #0
   89854:	bd10      	pop	{r4, pc}
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
   89856:	f04f 0000 	mov.w	r0, #0
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
   8985a:	bd10      	pop	{r4, pc}

0008985c <udd_test_mode_j>:

#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
	udd_enable_hs_test_mode();
   8985c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89860:	f2c4 030a 	movt	r3, #16394	; 0x400a
   89864:	681a      	ldr	r2, [r3, #0]
   89866:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   8986a:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   8986e:	6019      	str	r1, [r3, #0]
	udd_enable_hs_test_mode_j();
   89870:	681a      	ldr	r2, [r3, #0]
   89872:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
   89876:	6018      	str	r0, [r3, #0]
   89878:	4770      	bx	lr
   8987a:	bf00      	nop

0008987c <udd_test_mode_k>:
}


void udd_test_mode_k(void)
{
	udd_enable_hs_test_mode();
   8987c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89880:	f2c4 030a 	movt	r3, #16394	; 0x400a
   89884:	681a      	ldr	r2, [r3, #0]
   89886:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   8988a:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   8988e:	6019      	str	r1, [r3, #0]
	udd_enable_hs_test_mode_k();
   89890:	681a      	ldr	r2, [r3, #0]
   89892:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   89896:	6018      	str	r0, [r3, #0]
   89898:	4770      	bx	lr
   8989a:	bf00      	nop

0008989c <udd_test_mode_se0_nak>:
}


void udd_test_mode_se0_nak(void)
{
	udd_enable_hs_test_mode();
   8989c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   898a0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   898a4:	681a      	ldr	r2, [r3, #0]
   898a6:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   898aa:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   898ae:	6019      	str	r1, [r3, #0]
   898b0:	4770      	bx	lr
   898b2:	bf00      	nop

000898b4 <udd_test_mode_packet>:
}


void udd_test_mode_packet(void)
{
   898b4:	b470      	push	{r4, r5, r6}
   898b6:	b08f      	sub	sp, #60	; 0x3c
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   898b8:	f24d 7500 	movw	r5, #55040	; 0xd700
   898bc:	f2c0 0508 	movt	r5, #8
   898c0:	ac00      	add	r4, sp, #0
   898c2:	6828      	ldr	r0, [r5, #0]
   898c4:	6869      	ldr	r1, [r5, #4]
   898c6:	68aa      	ldr	r2, [r5, #8]
   898c8:	68eb      	ldr	r3, [r5, #12]
   898ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   898cc:	f105 0510 	add.w	r5, r5, #16
   898d0:	4626      	mov	r6, r4
   898d2:	6828      	ldr	r0, [r5, #0]
   898d4:	6869      	ldr	r1, [r5, #4]
   898d6:	68aa      	ldr	r2, [r5, #8]
   898d8:	68eb      	ldr	r3, [r5, #12]
   898da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   898dc:	6928      	ldr	r0, [r5, #16]
   898de:	6969      	ldr	r1, [r5, #20]
   898e0:	69aa      	ldr	r2, [r5, #24]
   898e2:	69eb      	ldr	r3, [r5, #28]
   898e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   898e6:	6a28      	ldr	r0, [r5, #32]
   898e8:	f846 0f20 	str.w	r0, [r6, #32]!
   898ec:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   898f0:	f105 0520 	add.w	r5, r5, #32
   898f4:	7131      	strb	r1, [r6, #4]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   898f6:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   898fa:	f2c4 040a 	movt	r4, #16394	; 0x400a
   898fe:	69e2      	ldr	r2, [r4, #28]
   89900:	f022 0301 	bic.w	r3, r2, #1
   89904:	61e3      	str	r3, [r4, #28]
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
   89906:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   8990a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8990e:	6801      	ldr	r1, [r0, #0]
   89910:	f421 52cb 	bic.w	r2, r1, #6496	; 0x1960
   89914:	f022 031c 	bic.w	r3, r2, #28
   89918:	f443 5189 	orr.w	r1, r3, #4384	; 0x1120
   8991c:	f041 0210 	orr.w	r2, r1, #16
   89920:	6002      	str	r2, [r0, #0]
			64, UOTGHS_DEVEPTCFG_EPBK_1_BANK);
	udd_allocate_memory(0);
   89922:	6803      	ldr	r3, [r0, #0]
   89924:	f043 0102 	orr.w	r1, r3, #2
   89928:	6001      	str	r1, [r0, #0]
	udd_enable_endpoint(0);
   8992a:	69e0      	ldr	r0, [r4, #28]
   8992c:	f040 0201 	orr.w	r2, r0, #1
   89930:	61e2      	str	r2, [r4, #28]

	udd_enable_hs_test_mode();
   89932:	6823      	ldr	r3, [r4, #0]
   89934:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
   89938:	f441 6000 	orr.w	r0, r1, #2048	; 0x800
   8993c:	6020      	str	r0, [r4, #0]
	udd_enable_hs_test_mode_packet();
   8993e:	6822      	ldr	r2, [r4, #0]
   89940:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
   89944:	6023      	str	r3, [r4, #0]

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
   89946:	f04f 0435 	mov.w	r4, #53	; 0x35
   8994a:	f2c2 0418 	movt	r4, #8216	; 0x2018
   8994e:	f10d 31ff 	add.w	r1, sp, #4294967295
		*ptr_dest++ = *ptr_src++;
   89952:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   89956:	f04f 0300 	mov.w	r3, #0
   8995a:	f2c2 0318 	movt	r3, #8216	; 0x2018
   8995e:	f803 0b01 	strb.w	r0, [r3], #1
   89962:	f101 0001 	add.w	r0, r1, #1
   89966:	7849      	ldrb	r1, [r1, #1]
   89968:	461a      	mov	r2, r3
   8996a:	f802 1b01 	strb.w	r1, [r2], #1
   8996e:	f100 0101 	add.w	r1, r0, #1
   89972:	7840      	ldrb	r0, [r0, #1]
   89974:	7058      	strb	r0, [r3, #1]
   89976:	f102 0301 	add.w	r3, r2, #1

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
   8997a:	42a3      	cmp	r3, r4
   8997c:	d1f1      	bne.n	89962 <udd_test_mode_packet+0xae>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ack_fifocon(0);
   8997e:	f24c 2120 	movw	r1, #49696	; 0xc220
   89982:	f2c4 010a 	movt	r1, #16394	; 0x400a
   89986:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8998a:	600a      	str	r2, [r1, #0]
}
   8998c:	b00f      	add	sp, #60	; 0x3c
   8998e:	bc70      	pop	{r4, r5, r6}
   89990:	4770      	bx	lr
   89992:	bf00      	nop

00089994 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   89994:	e7fe      	b.n	89994 <Dummy_Handler>
   89996:	bf00      	nop

00089998 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   89998:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8999a:	f240 0300 	movw	r3, #0
   8999e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   899a2:	f64d 1200 	movw	r2, #55552	; 0xd900
   899a6:	f2c0 0208 	movt	r2, #8
   899aa:	429a      	cmp	r2, r3
   899ac:	d003      	beq.n	899b6 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   899ae:	4840      	ldr	r0, [pc, #256]	; (89ab0 <Reset_Handler+0x118>)
   899b0:	4940      	ldr	r1, [pc, #256]	; (89ab4 <Reset_Handler+0x11c>)
   899b2:	4281      	cmp	r1, r0
   899b4:	d304      	bcc.n	899c0 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   899b6:	4b40      	ldr	r3, [pc, #256]	; (89ab8 <Reset_Handler+0x120>)
   899b8:	4a40      	ldr	r2, [pc, #256]	; (89abc <Reset_Handler+0x124>)
   899ba:	429a      	cmp	r2, r3
   899bc:	d325      	bcc.n	89a0a <Reset_Handler+0x72>
   899be:	e042      	b.n	89a46 <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   899c0:	4d3f      	ldr	r5, [pc, #252]	; (89ac0 <Reset_Handler+0x128>)
   899c2:	4c40      	ldr	r4, [pc, #256]	; (89ac4 <Reset_Handler+0x12c>)
   899c4:	1b63      	subs	r3, r4, r5
   899c6:	f023 0503 	bic.w	r5, r3, #3
   899ca:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   899ce:	f240 0200 	movw	r2, #0
   899d2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   899d6:	f64d 1100 	movw	r1, #55552	; 0xd900
   899da:	f2c0 0108 	movt	r1, #8
   899de:	f105 0004 	add.w	r0, r5, #4
   899e2:	f3c5 0480 	ubfx	r4, r5, #2, #1
   899e6:	585d      	ldr	r5, [r3, r1]
   899e8:	509d      	str	r5, [r3, r2]
   899ea:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   899ee:	4283      	cmp	r3, r0
   899f0:	d155      	bne.n	89a9e <Reset_Handler+0x106>
   899f2:	e7e0      	b.n	899b6 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   899f4:	585d      	ldr	r5, [r3, r1]
   899f6:	509d      	str	r5, [r3, r2]
   899f8:	f103 0304 	add.w	r3, r3, #4
   899fc:	585c      	ldr	r4, [r3, r1]
   899fe:	509c      	str	r4, [r3, r2]
   89a00:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   89a04:	4283      	cmp	r3, r0
   89a06:	d1f5      	bne.n	899f4 <Reset_Handler+0x5c>
   89a08:	e7d5      	b.n	899b6 <Reset_Handler+0x1e>
   89a0a:	4d2f      	ldr	r5, [pc, #188]	; (89ac8 <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   89a0c:	492f      	ldr	r1, [pc, #188]	; (89acc <Reset_Handler+0x134>)
   89a0e:	1b48      	subs	r0, r1, r5
   89a10:	f020 0403 	bic.w	r4, r0, #3
   89a14:	f640 23f0 	movw	r3, #2800	; 0xaf0
   89a18:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89a1c:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   89a1e:	f04f 0100 	mov.w	r1, #0
   89a22:	1b50      	subs	r0, r2, r5
   89a24:	f1a0 0004 	sub.w	r0, r0, #4
   89a28:	f3c0 0480 	ubfx	r4, r0, #2, #1
   89a2c:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   89a30:	4295      	cmp	r5, r2
   89a32:	d12d      	bne.n	89a90 <Reset_Handler+0xf8>
   89a34:	e007      	b.n	89a46 <Reset_Handler+0xae>
   89a36:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   89a3a:	6069      	str	r1, [r5, #4]
   89a3c:	f105 0508 	add.w	r5, r5, #8
   89a40:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   89a42:	4295      	cmp	r5, r2
   89a44:	d1f7      	bne.n	89a36 <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   89a46:	f240 0500 	movw	r5, #0
   89a4a:	f2c0 0508 	movt	r5, #8
   89a4e:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   89a52:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   89a56:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   89a5a:	f2ce 0000 	movt	r0, #57344	; 0xe000
   89a5e:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   89a60:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   89a64:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   89a68:	d207      	bcs.n	89a7a <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   89a6a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   89a6e:	f2ce 0300 	movt	r3, #57344	; 0xe000
   89a72:	689d      	ldr	r5, [r3, #8]
   89a74:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   89a78:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   89a7a:	f24a 714d 	movw	r1, #42829	; 0xa74d
   89a7e:	f2c0 0108 	movt	r1, #8
   89a82:	4788      	blx	r1

	/* Branch to main function */
	main();
   89a84:	f649 70e1 	movw	r0, #40929	; 0x9fe1
   89a88:	f2c0 0008 	movt	r0, #8
   89a8c:	4780      	blx	r0
   89a8e:	e7fe      	b.n	89a8e <Reset_Handler+0xf6>
   89a90:	2c00      	cmp	r4, #0
   89a92:	d0d0      	beq.n	89a36 <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   89a94:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   89a98:	4295      	cmp	r5, r2
   89a9a:	d1cc      	bne.n	89a36 <Reset_Handler+0x9e>
   89a9c:	e7d3      	b.n	89a46 <Reset_Handler+0xae>
   89a9e:	2c00      	cmp	r4, #0
   89aa0:	d0a8      	beq.n	899f4 <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   89aa2:	585c      	ldr	r4, [r3, r1]
   89aa4:	509c      	str	r4, [r3, r2]
   89aa6:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   89aaa:	4283      	cmp	r3, r0
   89aac:	d1a2      	bne.n	899f4 <Reset_Handler+0x5c>
   89aae:	e782      	b.n	899b6 <Reset_Handler+0x1e>
   89ab0:	20070af0 	.word	0x20070af0
   89ab4:	20070000 	.word	0x20070000
   89ab8:	20071e2c 	.word	0x20071e2c
   89abc:	20070af0 	.word	0x20070af0
   89ac0:	20070004 	.word	0x20070004
   89ac4:	20070af3 	.word	0x20070af3
   89ac8:	20070aec 	.word	0x20070aec
   89acc:	20071e27 	.word	0x20071e27

00089ad0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   89ad0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   89ad4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89ad8:	6b18      	ldr	r0, [r3, #48]	; 0x30
   89ada:	f000 0103 	and.w	r1, r0, #3
   89ade:	2903      	cmp	r1, #3
   89ae0:	f200 80b1 	bhi.w	89c46 <SystemCoreClockUpdate+0x176>
   89ae4:	e8df f001 	tbb	[pc, r1]
   89ae8:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   89aec:	f641 2010 	movw	r0, #6672	; 0x1a10
   89af0:	f2c4 000e 	movt	r0, #16398	; 0x400e
   89af4:	6941      	ldr	r1, [r0, #20]
   89af6:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   89afa:	f240 23a4 	movw	r3, #676	; 0x2a4
   89afe:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89b02:	bf14      	ite	ne
   89b04:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   89b08:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   89b0c:	601a      	str	r2, [r3, #0]
   89b0e:	e09a      	b.n	89c46 <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   89b10:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   89b14:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89b18:	6a18      	ldr	r0, [r3, #32]
   89b1a:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   89b1e:	d009      	beq.n	89b34 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   89b20:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   89b24:	f2c0 03b7 	movt	r3, #183	; 0xb7
   89b28:	f240 22a4 	movw	r2, #676	; 0x2a4
   89b2c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89b30:	6013      	str	r3, [r2, #0]
   89b32:	e088      	b.n	89c46 <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   89b34:	f44f 6110 	mov.w	r1, #2304	; 0x900
   89b38:	f2c0 013d 	movt	r1, #61	; 0x3d
   89b3c:	f240 22a4 	movw	r2, #676	; 0x2a4
   89b40:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89b44:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   89b46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   89b4a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89b4e:	6a18      	ldr	r0, [r3, #32]
   89b50:	f000 0170 	and.w	r1, r0, #112	; 0x70
   89b54:	2910      	cmp	r1, #16
   89b56:	d002      	beq.n	89b5e <SystemCoreClockUpdate+0x8e>
   89b58:	2920      	cmp	r1, #32
   89b5a:	d174      	bne.n	89c46 <SystemCoreClockUpdate+0x176>
   89b5c:	e009      	b.n	89b72 <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   89b5e:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   89b62:	f2c0 007a 	movt	r0, #122	; 0x7a
   89b66:	f240 21a4 	movw	r1, #676	; 0x2a4
   89b6a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   89b6e:	6008      	str	r0, [r1, #0]
				break;
   89b70:	e069      	b.n	89c46 <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   89b72:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   89b76:	f2c0 03b7 	movt	r3, #183	; 0xb7
   89b7a:	f240 22a4 	movw	r2, #676	; 0x2a4
   89b7e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89b82:	6013      	str	r3, [r2, #0]
				break;
   89b84:	e05f      	b.n	89c46 <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   89b86:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   89b8a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   89b8e:	6a13      	ldr	r3, [r2, #32]
   89b90:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   89b94:	d009      	beq.n	89baa <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   89b96:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   89b9a:	f2c0 01b7 	movt	r1, #183	; 0xb7
   89b9e:	f240 22a4 	movw	r2, #676	; 0x2a4
   89ba2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89ba6:	6011      	str	r1, [r2, #0]
   89ba8:	e027      	b.n	89bfa <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   89baa:	f44f 6010 	mov.w	r0, #2304	; 0x900
   89bae:	f2c0 003d 	movt	r0, #61	; 0x3d
   89bb2:	f240 21a4 	movw	r1, #676	; 0x2a4
   89bb6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   89bba:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   89bbc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   89bc0:	f2c4 020e 	movt	r2, #16398	; 0x400e
   89bc4:	6a13      	ldr	r3, [r2, #32]
   89bc6:	f003 0070 	and.w	r0, r3, #112	; 0x70
   89bca:	2810      	cmp	r0, #16
   89bcc:	d002      	beq.n	89bd4 <SystemCoreClockUpdate+0x104>
   89bce:	2820      	cmp	r0, #32
   89bd0:	d113      	bne.n	89bfa <SystemCoreClockUpdate+0x12a>
   89bd2:	e009      	b.n	89be8 <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   89bd4:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   89bd8:	f2c0 037a 	movt	r3, #122	; 0x7a
   89bdc:	f240 20a4 	movw	r0, #676	; 0x2a4
   89be0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   89be4:	6003      	str	r3, [r0, #0]
				break;
   89be6:	e008      	b.n	89bfa <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   89be8:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   89bec:	f2c0 01b7 	movt	r1, #183	; 0xb7
   89bf0:	f240 22a4 	movw	r2, #676	; 0x2a4
   89bf4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89bf8:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   89bfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   89bfe:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89c02:	6b18      	ldr	r0, [r3, #48]	; 0x30
   89c04:	f000 0103 	and.w	r1, r0, #3
   89c08:	2902      	cmp	r1, #2
   89c0a:	d113      	bne.n	89c34 <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   89c0c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   89c10:	f2c4 010e 	movt	r1, #16398	; 0x400e
   89c14:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   89c16:	6a89      	ldr	r1, [r1, #40]	; 0x28
   89c18:	f240 23a4 	movw	r3, #676	; 0x2a4
   89c1c:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   89c20:	f3c0 400a 	ubfx	r0, r0, #16, #11
   89c24:	681a      	ldr	r2, [r3, #0]
   89c26:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   89c2a:	b2c9      	uxtb	r1, r1
   89c2c:	fbb0 f2f1 	udiv	r2, r0, r1
   89c30:	601a      	str	r2, [r3, #0]
   89c32:	e008      	b.n	89c46 <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   89c34:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   89c38:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   89c3c:	f240 22a4 	movw	r2, #676	; 0x2a4
   89c40:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89c44:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   89c46:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   89c4a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   89c4e:	6b10      	ldr	r0, [r2, #48]	; 0x30
   89c50:	f000 0170 	and.w	r1, r0, #112	; 0x70
   89c54:	2970      	cmp	r1, #112	; 0x70
   89c56:	d10e      	bne.n	89c76 <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   89c58:	f240 23a4 	movw	r3, #676	; 0x2a4
   89c5c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89c60:	6818      	ldr	r0, [r3, #0]
   89c62:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   89c66:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   89c6a:	fba2 0100 	umull	r0, r1, r2, r0
   89c6e:	ea4f 0051 	mov.w	r0, r1, lsr #1
   89c72:	6018      	str	r0, [r3, #0]
   89c74:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   89c76:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   89c7a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   89c80:	f240 20a4 	movw	r0, #676	; 0x2a4
   89c84:	f2c2 0007 	movt	r0, #8199	; 0x2007
   89c88:	f3c2 1102 	ubfx	r1, r2, #4, #3
   89c8c:	6803      	ldr	r3, [r0, #0]
   89c8e:	fa23 f301 	lsr.w	r3, r3, r1
   89c92:	6003      	str	r3, [r0, #0]
   89c94:	4770      	bx	lr
   89c96:	bf00      	nop

00089c98 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   89c98:	f64e 23bf 	movw	r3, #60095	; 0xeabf
   89c9c:	f2c0 1321 	movt	r3, #289	; 0x121
   89ca0:	4298      	cmp	r0, r3
   89ca2:	d80c      	bhi.n	89cbe <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   89ca4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   89ca8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89cac:	f04f 0000 	mov.w	r0, #0
   89cb0:	6018      	str	r0, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   89cb2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   89cb6:	f2c4 010e 	movt	r1, #16398	; 0x400e
   89cba:	6008      	str	r0, [r1, #0]
   89cbc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   89cbe:	f24f 017f 	movw	r1, #61567	; 0xf07f
   89cc2:	f2c0 21fa 	movt	r1, #762	; 0x2fa
   89cc6:	4288      	cmp	r0, r1
   89cc8:	d80c      	bhi.n	89ce4 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   89cca:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   89cce:	f2c4 000e 	movt	r0, #16398	; 0x400e
   89cd2:	f44f 7180 	mov.w	r1, #256	; 0x100
   89cd6:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   89cd8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   89cdc:	f2c4 020e 	movt	r2, #16398	; 0x400e
   89ce0:	6011      	str	r1, [r2, #0]
   89ce2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   89ce4:	f648 73ff 	movw	r3, #36863	; 0x8fff
   89ce8:	f2c0 33d0 	movt	r3, #976	; 0x3d0
   89cec:	4298      	cmp	r0, r3
   89cee:	d80c      	bhi.n	89d0a <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   89cf0:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   89cf4:	f2c4 010e 	movt	r1, #16398	; 0x400e
   89cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
   89cfc:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   89cfe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   89d02:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89d06:	601a      	str	r2, [r3, #0]
   89d08:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   89d0a:	f24b 31ff 	movw	r1, #46079	; 0xb3ff
   89d0e:	f2c0 41c4 	movt	r1, #1220	; 0x4c4
   89d12:	4288      	cmp	r0, r1
   89d14:	d80c      	bhi.n	89d30 <system_init_flash+0x98>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   89d16:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   89d1a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89d1e:	f44f 7240 	mov.w	r2, #768	; 0x300
   89d22:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   89d24:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   89d28:	f2c4 000e 	movt	r0, #16398	; 0x400e
   89d2c:	6002      	str	r2, [r0, #0]
   89d2e:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   89d30:	f644 237f 	movw	r3, #19071	; 0x4a7f
   89d34:	f2c0 535d 	movt	r3, #1373	; 0x55d
   89d38:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   89d3a:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   89d3e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   89d42:	bf94      	ite	ls
   89d44:	f44f 6280 	movls.w	r2, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   89d48:	f44f 62a0 	movhi.w	r2, #1280	; 0x500
   89d4c:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   89d4e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   89d52:	f2c4 010e 	movt	r1, #16398	; 0x400e
   89d56:	600a      	str	r2, [r1, #0]
   89d58:	4770      	bx	lr
   89d5a:	bf00      	nop

00089d5c <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   89d5c:	f241 632c 	movw	r3, #5676	; 0x162c
   89d60:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89d64:	6819      	ldr	r1, [r3, #0]
   89d66:	b941      	cbnz	r1, 89d7a <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
   89d68:	f241 632c 	movw	r3, #5676	; 0x162c
   89d6c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89d70:	f643 6230 	movw	r2, #15920	; 0x3e30
   89d74:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89d78:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   89d7a:	f241 612c 	movw	r1, #5676	; 0x162c
   89d7e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   89d82:	680b      	ldr	r3, [r1, #0]

	heap += incr;
   89d84:	1818      	adds	r0, r3, r0
   89d86:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
   89d88:	4618      	mov	r0, r3
   89d8a:	4770      	bx	lr

00089d8c <main_msc_enable>:
volatile uint16_t integrator_flag = FALSE;


bool main_msc_enable(void)
{
	main_b_msc_enable = true;
   89d8c:	f04f 0001 	mov.w	r0, #1
   89d90:	f241 633c 	movw	r3, #5692	; 0x163c
   89d94:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89d98:	7018      	strb	r0, [r3, #0]
	return true;
}
   89d9a:	4770      	bx	lr

00089d9c <main_msc_disable>:
void main_msc_disable(void)
{
	main_b_msc_enable = false;
   89d9c:	f241 633c 	movw	r3, #5692	; 0x163c
   89da0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89da4:	f04f 0200 	mov.w	r2, #0
   89da8:	701a      	strb	r2, [r3, #0]
   89daa:	4770      	bx	lr

00089dac <main_cdc_enable>:
}
bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
   89dac:	f04f 0001 	mov.w	r0, #1
   89db0:	f241 6354 	movw	r3, #5716	; 0x1654
   89db4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89db8:	7018      	strb	r0, [r3, #0]
	return true;
}
   89dba:	4770      	bx	lr

00089dbc <main_cdc_disable>:
void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
   89dbc:	f241 6354 	movw	r3, #5716	; 0x1654
   89dc0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89dc4:	f04f 0200 	mov.w	r2, #0
   89dc8:	701a      	strb	r2, [r3, #0]
   89dca:	4770      	bx	lr

00089dcc <set_second_flag>:
}

/* Second interrupt */
void set_second_flag(void)
{
	second_flag = TRUE;
   89dcc:	f241 6356 	movw	r3, #5718	; 0x1656
   89dd0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89dd4:	f04f 0201 	mov.w	r2, #1
   89dd8:	801a      	strh	r2, [r3, #0]
   89dda:	4770      	bx	lr

00089ddc <set_integrator_timer_flag>:
}

/* Flag indicating an integration timer tick */
void set_integrator_timer_flag(void)
{
	integrator_flag = TRUE;
   89ddc:	f241 6352 	movw	r3, #5714	; 0x1652
   89de0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89de4:	f04f 0201 	mov.w	r2, #1
   89de8:	801a      	strh	r2, [r3, #0]
   89dea:	4770      	bx	lr

00089dec <activate_measurement_push>:
}

/* Activate measurements push to console */
void activate_measurement_push(void)
{
	meas_push_activated = TRUE;
   89dec:	f241 6338 	movw	r3, #5688	; 0x1638
   89df0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89df4:	f04f 0201 	mov.w	r2, #1
   89df8:	801a      	strh	r2, [r3, #0]
   89dfa:	4770      	bx	lr

00089dfc <deactivate_measurement_push>:
}

/* Disable measurements push to console */
void deactivate_measurement_push(void)
{
	meas_push_activated = FALSE;
   89dfc:	f241 6338 	movw	r3, #5688	; 0x1638
   89e00:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89e04:	f04f 0200 	mov.w	r2, #0
   89e08:	801a      	strh	r2, [r3, #0]
   89e0a:	4770      	bx	lr

00089e0c <set_countera_integration_time>:
}

/* Set Counter A integration time */
void set_countera_integration_time(uint16_t integration_time)
{
	ch0_integration_time_goal = integration_time;
   89e0c:	f240 23a8 	movw	r3, #680	; 0x2a8
   89e10:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89e14:	8018      	strh	r0, [r3, #0]
	ch0_integration_time_counter = 0;
   89e16:	f241 603e 	movw	r0, #5694	; 0x163e
   89e1a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   89e1e:	f04f 0200 	mov.w	r2, #0
   89e22:	8002      	strh	r2, [r0, #0]
   89e24:	4770      	bx	lr
   89e26:	bf00      	nop

00089e28 <set_counterb_integration_time>:
}

/* Set Counter B integration time */
void set_counterb_integration_time(uint16_t integration_time)
{
	ch1_integration_time_goal = integration_time;
   89e28:	f240 23aa 	movw	r3, #682	; 0x2aa
   89e2c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89e30:	8018      	strh	r0, [r3, #0]
	ch1_integration_time_counter = 0;
   89e32:	f241 6040 	movw	r0, #5696	; 0x1640
   89e36:	f2c2 0007 	movt	r0, #8199	; 0x2007
   89e3a:	f04f 0200 	mov.w	r2, #0
   89e3e:	8002      	strh	r2, [r0, #0]
   89e40:	4770      	bx	lr
   89e42:	bf00      	nop

00089e44 <get_countera_integration_time>:

/* Get Counter A integration time */
uint16_t get_countera_integration_time(void)
{
	return ch0_integration_time_goal;
}
   89e44:	f240 23a8 	movw	r3, #680	; 0x2a8
   89e48:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89e4c:	8818      	ldrh	r0, [r3, #0]
   89e4e:	4770      	bx	lr

00089e50 <get_counterb_integration_time>:

/* Get Counter B integration time */
uint16_t get_counterb_integration_time(void)
{
	return ch1_integration_time_goal;
}
   89e50:	f240 23aa 	movw	r3, #682	; 0x2aa
   89e54:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89e58:	8818      	ldrh	r0, [r3, #0]
   89e5a:	4770      	bx	lr

00089e5c <set_counters_integration_time>:

/* Set counters integration time */
void set_counters_integration_time(uint16_t integration_time)
{
   89e5c:	b510      	push	{r4, lr}
   89e5e:	4604      	mov	r4, r0
	set_countera_integration_time(integration_time);
   89e60:	f649 630d 	movw	r3, #40461	; 0x9e0d
   89e64:	f2c0 0308 	movt	r3, #8
   89e68:	4798      	blx	r3
	set_counterb_integration_time(integration_time);
   89e6a:	4620      	mov	r0, r4
   89e6c:	f649 6129 	movw	r1, #40489	; 0x9e29
   89e70:	f2c0 0108 	movt	r1, #8
   89e74:	4788      	blx	r1
   89e76:	bd10      	pop	{r4, pc}

00089e78 <shift_counter_buffer_contents>:
}

/* Routine to shift buffer contents to the left */
void shift_counter_buffer_contents(uint64_t* buffer)
{
   89e78:	b410      	push	{r4}
	uint16_t i;
	
	// shift contents to the left!
	for(i = 0; i < (VALUES_BUF_LENGTH - 1); i++)
   89e7a:	f04f 0400 	mov.w	r4, #0
   89e7e:	4601      	mov	r1, r0
	{
		buffer[i] = buffer[i+1];
   89e80:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   89e84:	e8e1 2302 	strd	r2, r3, [r1], #8
void shift_counter_buffer_contents(uint64_t* buffer)
{
	uint16_t i;
	
	// shift contents to the left!
	for(i = 0; i < (VALUES_BUF_LENGTH - 1); i++)
   89e88:	f104 0401 	add.w	r4, r4, #1
   89e8c:	b2a4      	uxth	r4, r4
	{
		buffer[i] = buffer[i+1];
   89e8e:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   89e92:	e9c1 2300 	strd	r2, r3, [r1]
void shift_counter_buffer_contents(uint64_t* buffer)
{
	uint16_t i;
	
	// shift contents to the left!
	for(i = 0; i < (VALUES_BUF_LENGTH - 1); i++)
   89e96:	f104 0401 	add.w	r4, r4, #1
   89e9a:	b2a4      	uxth	r4, r4
   89e9c:	f101 0010 	add.w	r0, r1, #16
	{
		buffer[i] = buffer[i+1];
   89ea0:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   89ea4:	e940 2302 	strd	r2, r3, [r0, #-8]
void shift_counter_buffer_contents(uint64_t* buffer)
{
	uint16_t i;
	
	// shift contents to the left!
	for(i = 0; i < (VALUES_BUF_LENGTH - 1); i++)
   89ea8:	f104 0401 	add.w	r4, r4, #1
   89eac:	b2a4      	uxth	r4, r4
   89eae:	2c15      	cmp	r4, #21
   89eb0:	d1e5      	bne.n	89e7e <shift_counter_buffer_contents+0x6>
	{
		buffer[i] = buffer[i+1];
	}
}
   89eb2:	bc10      	pop	{r4}
   89eb4:	4770      	bx	lr
   89eb6:	bf00      	nop

00089eb8 <read_last_contera_val>:

/* buffer pop() */
RET_TYPE read_last_contera_val(uint64_t* return_data)
{
   89eb8:	b508      	push	{r3, lr}
	if(ch0_values_buffer_next_pointer > 0)
   89eba:	f241 6350 	movw	r3, #5712	; 0x1650
   89ebe:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89ec2:	8819      	ldrh	r1, [r3, #0]
   89ec4:	b1b9      	cbz	r1, 89ef6 <read_last_contera_val+0x3e>
	{
		ch0_values_buffer_next_pointer--;
   89ec6:	f101 33ff 	add.w	r3, r1, #4294967295
   89eca:	f241 6250 	movw	r2, #5712	; 0x1650
   89ece:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89ed2:	8013      	strh	r3, [r2, #0]
		*return_data = ch0_counters_values_buffer[0];
   89ed4:	f641 5178 	movw	r1, #7544	; 0x1d78
   89ed8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   89edc:	e9d1 2300 	ldrd	r2, r3, [r1]
   89ee0:	e9c0 2300 	strd	r2, r3, [r0]
		shift_counter_buffer_contents(ch0_counters_values_buffer);
   89ee4:	4608      	mov	r0, r1
   89ee6:	f649 6379 	movw	r3, #40569	; 0x9e79
   89eea:	f2c0 0308 	movt	r3, #8
   89eee:	4798      	blx	r3
		return RETURN_OK;
   89ef0:	f04f 0001 	mov.w	r0, #1
   89ef4:	bd08      	pop	{r3, pc}
	}
	else
	{
		return RETURN_NOK;
   89ef6:	f04f 0000 	mov.w	r0, #0
	}
}
   89efa:	bd08      	pop	{r3, pc}

00089efc <read_last_conterb_val>:

/* buffer pop() */
RET_TYPE read_last_conterb_val(uint64_t* return_data)
{
   89efc:	b508      	push	{r3, lr}
	if(ch1_values_buffer_next_pointer > 0)
   89efe:	f241 633a 	movw	r3, #5690	; 0x163a
   89f02:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89f06:	8819      	ldrh	r1, [r3, #0]
   89f08:	b1b9      	cbz	r1, 89f3a <read_last_conterb_val+0x3e>
	{
		ch1_values_buffer_next_pointer--;
   89f0a:	f101 33ff 	add.w	r3, r1, #4294967295
   89f0e:	f241 623a 	movw	r2, #5690	; 0x163a
   89f12:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89f16:	8013      	strh	r3, [r2, #0]
		*return_data = ch1_counters_values_buffer[0];
   89f18:	f641 41c8 	movw	r1, #7368	; 0x1cc8
   89f1c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   89f20:	e9d1 2300 	ldrd	r2, r3, [r1]
   89f24:	e9c0 2300 	strd	r2, r3, [r0]
		shift_counter_buffer_contents(ch1_counters_values_buffer);
   89f28:	4608      	mov	r0, r1
   89f2a:	f649 6379 	movw	r3, #40569	; 0x9e79
   89f2e:	f2c0 0308 	movt	r3, #8
   89f32:	4798      	blx	r3
		return RETURN_OK;
   89f34:	f04f 0001 	mov.w	r0, #1
   89f38:	bd08      	pop	{r3, pc}
	}
	else
	{
		return RETURN_NOK;
   89f3a:	f04f 0000 	mov.w	r0, #0
	}
}
   89f3e:	bd08      	pop	{r3, pc}

00089f40 <add_new_countera_measurement_to_queue>:

/* buffer push() */
void add_new_countera_measurement_to_queue(uint64_t measurement)
{
   89f40:	b570      	push	{r4, r5, r6, lr}
   89f42:	4604      	mov	r4, r0
   89f44:	460d      	mov	r5, r1
	// If the buffer is full, remove oldest element
	if(ch0_values_buffer_next_pointer == VALUES_BUF_LENGTH)
   89f46:	f241 6350 	movw	r3, #5712	; 0x1650
   89f4a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89f4e:	8818      	ldrh	r0, [r3, #0]
   89f50:	2816      	cmp	r0, #22
   89f52:	d10c      	bne.n	89f6e <add_new_countera_measurement_to_queue+0x2e>
	{
		shift_counter_buffer_contents(ch0_counters_values_buffer);
   89f54:	f641 5678 	movw	r6, #7544	; 0x1d78
   89f58:	f2c2 0607 	movt	r6, #8199	; 0x2007
   89f5c:	4630      	mov	r0, r6
   89f5e:	f649 6279 	movw	r2, #40569	; 0x9e79
   89f62:	f2c0 0208 	movt	r2, #8
   89f66:	4790      	blx	r2
		ch0_counters_values_buffer[VALUES_BUF_LENGTH-1] = measurement;
   89f68:	e9c6 452a 	strd	r4, r5, [r6, #168]	; 0xa8
   89f6c:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		ch0_counters_values_buffer[ch0_values_buffer_next_pointer++] = measurement;
   89f6e:	f641 5278 	movw	r2, #7544	; 0x1d78
   89f72:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89f76:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
   89f7a:	e9c1 4500 	strd	r4, r5, [r1]
   89f7e:	f100 0001 	add.w	r0, r0, #1
   89f82:	f241 6350 	movw	r3, #5712	; 0x1650
   89f86:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89f8a:	8018      	strh	r0, [r3, #0]
   89f8c:	bd70      	pop	{r4, r5, r6, pc}
   89f8e:	bf00      	nop

00089f90 <add_new_counterb_measurement_to_queue>:
	}	
}

/* buffer push() */
void add_new_counterb_measurement_to_queue(uint64_t measurement)
{
   89f90:	b570      	push	{r4, r5, r6, lr}
   89f92:	4604      	mov	r4, r0
   89f94:	460d      	mov	r5, r1
	// If the buffer is full, remove oldest element
	if(ch1_values_buffer_next_pointer == VALUES_BUF_LENGTH)
   89f96:	f241 633a 	movw	r3, #5690	; 0x163a
   89f9a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89f9e:	8818      	ldrh	r0, [r3, #0]
   89fa0:	2816      	cmp	r0, #22
   89fa2:	d10c      	bne.n	89fbe <add_new_counterb_measurement_to_queue+0x2e>
	{
		shift_counter_buffer_contents(ch1_counters_values_buffer);
   89fa4:	f641 46c8 	movw	r6, #7368	; 0x1cc8
   89fa8:	f2c2 0607 	movt	r6, #8199	; 0x2007
   89fac:	4630      	mov	r0, r6
   89fae:	f649 6279 	movw	r2, #40569	; 0x9e79
   89fb2:	f2c0 0208 	movt	r2, #8
   89fb6:	4790      	blx	r2
		ch1_counters_values_buffer[VALUES_BUF_LENGTH-1] = measurement;
   89fb8:	e9c6 452a 	strd	r4, r5, [r6, #168]	; 0xa8
   89fbc:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		ch1_counters_values_buffer[ch1_values_buffer_next_pointer++] = measurement;
   89fbe:	f641 42c8 	movw	r2, #7368	; 0x1cc8
   89fc2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89fc6:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
   89fca:	e9c1 4500 	strd	r4, r5, [r1]
   89fce:	f100 0001 	add.w	r0, r0, #1
   89fd2:	f241 633a 	movw	r3, #5690	; 0x163a
   89fd6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89fda:	8018      	strh	r0, [r3, #0]
   89fdc:	bd70      	pop	{r4, r5, r6, pc}
   89fde:	bf00      	nop

00089fe0 <main>:
}

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   89fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89fe4:	b082      	sub	sp, #8
	irq_initialize_vectors();
	cpu_irq_enable();
   89fe6:	f04f 0401 	mov.w	r4, #1
   89fea:	f240 23a0 	movw	r3, #672	; 0x2a0
   89fee:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89ff2:	701c      	strb	r4, [r3, #0]
   89ff4:	f3bf 8f5f 	dmb	sy
   89ff8:	b662      	cpsie	i
	wdt_disable(WDT);
   89ffa:	f641 2050 	movw	r0, #6736	; 0x1a50
   89ffe:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8a002:	f641 119d 	movw	r1, #6557	; 0x199d
   8a006:	f2c0 0108 	movt	r1, #8
   8a00a:	4788      	blx	r1
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
   8a00c:	f641 40a4 	movw	r0, #7332	; 0x1ca4
   8a010:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a014:	f04f 0200 	mov.w	r2, #0
   8a018:	7002      	strb	r2, [r0, #0]
   8a01a:	7042      	strb	r2, [r0, #1]
   8a01c:	7082      	strb	r2, [r0, #2]
   8a01e:	70c2      	strb	r2, [r0, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   8a020:	7104      	strb	r4, [r0, #4]

	// Initialize the sleep manager
	sleepmgr_init();

	// Board initialization
	sysclk_init();
   8a022:	f245 2549 	movw	r5, #21065	; 0x5249
   8a026:	f2c0 0508 	movt	r5, #8
   8a02a:	47a8      	blx	r5
	init_board();
   8a02c:	f641 16a5 	movw	r6, #6565	; 0x19a5
   8a030:	f2c0 0608 	movt	r6, #8
   8a034:	47b0      	blx	r6
	init_pwm();
   8a036:	f242 67b9 	movw	r7, #9913	; 0x26b9
   8a03a:	f2c0 0708 	movt	r7, #8
   8a03e:	47b8      	blx	r7
	init_i2c();
   8a040:	f242 6469 	movw	r4, #9833	; 0x2669
   8a044:	f2c0 0408 	movt	r4, #8
   8a048:	47a0      	blx	r4

	// Module initialization	
	init_module_peripherals_bp();
   8a04a:	f242 3301 	movw	r3, #8961	; 0x2301
   8a04e:	f2c0 0308 	movt	r3, #8
   8a052:	4798      	blx	r3

	/* Initialize SD MMC stack */
	delay_ms(200);
   8a054:	f44f 409f 	mov.w	r0, #20352	; 0x4f80
   8a058:	f2c0 0012 	movt	r0, #18
   8a05c:	f240 0101 	movw	r1, #1
   8a060:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8a064:	4788      	blx	r1
	sd_mmc_init();
   8a066:	f240 4069 	movw	r0, #1129	; 0x469
   8a06a:	f2c0 0008 	movt	r0, #8
   8a06e:	4780      	blx	r0

	// Start USB stack to authorize VBus monitoring
	udc_start();
   8a070:	f646 4235 	movw	r2, #27701	; 0x6c35
   8a074:	f2c0 0208 	movt	r2, #8
   8a078:	4790      	blx	r2
	
	// Init SCPI parser
    console_init();	
   8a07a:	f644 7561 	movw	r5, #20321	; 0x4f61
   8a07e:	f2c0 0508 	movt	r5, #8
   8a082:	47a8      	blx	r5
		
	//set_user_led_colour(0, 300, 0);
	while (true) 
	{
		console_process();		
   8a084:	f644 7579 	movw	r5, #20345	; 0x4f79
   8a088:	f2c0 0508 	movt	r5, #8

		if(integrator_flag == TRUE)
   8a08c:	f241 6452 	movw	r4, #5714	; 0x1652
   8a090:	f2c2 0407 	movt	r4, #8199	; 0x2007
		{
			integrator_flag = FALSE;
			
			ch0_integration_time_counter++;
   8a094:	f241 673e 	movw	r7, #5694	; 0x163e
   8a098:	f2c2 0707 	movt	r7, #8199	; 0x2007
			ch1_integration_time_counter++;
   8a09c:	f241 6640 	movw	r6, #5696	; 0x1640
   8a0a0:	f2c2 0607 	movt	r6, #8199	; 0x2007
    console_init();	
		
	//set_user_led_colour(0, 300, 0);
	while (true) 
	{
		console_process();		
   8a0a4:	47a8      	blx	r5

		if(integrator_flag == TRUE)
   8a0a6:	8823      	ldrh	r3, [r4, #0]
   8a0a8:	b299      	uxth	r1, r3
   8a0aa:	2901      	cmp	r1, #1
   8a0ac:	f040 80ab 	bne.w	8a206 <main+0x226>
		{
			integrator_flag = FALSE;
   8a0b0:	f04f 0000 	mov.w	r0, #0
   8a0b4:	8020      	strh	r0, [r4, #0]
			
			ch0_integration_time_counter++;
   8a0b6:	883a      	ldrh	r2, [r7, #0]
   8a0b8:	f102 0201 	add.w	r2, r2, #1
   8a0bc:	803a      	strh	r2, [r7, #0]
			ch1_integration_time_counter++;
   8a0be:	8833      	ldrh	r3, [r6, #0]
   8a0c0:	f103 0301 	add.w	r3, r3, #1
   8a0c4:	8033      	strh	r3, [r6, #0]
			ch0_counter_integrated += get_counter0_value();
   8a0c6:	f242 01e5 	movw	r1, #8421	; 0x20e5
   8a0ca:	f2c0 0108 	movt	r1, #8
   8a0ce:	4788      	blx	r1
   8a0d0:	f241 6e48 	movw	lr, #5704	; 0x1648
   8a0d4:	f2c2 0e07 	movt	lr, #8199	; 0x2007
   8a0d8:	e9de 2300 	ldrd	r2, r3, [lr]
   8a0dc:	1880      	adds	r0, r0, r2
   8a0de:	eb41 0103 	adc.w	r1, r1, r3
   8a0e2:	e9ce 0100 	strd	r0, r1, [lr]
			ch1_counter_integrated += get_counter1_value();
   8a0e6:	f242 00f9 	movw	r0, #8441	; 0x20f9
   8a0ea:	f2c0 0008 	movt	r0, #8
   8a0ee:	4780      	blx	r0
   8a0f0:	f241 6830 	movw	r8, #5680	; 0x1630
   8a0f4:	f2c2 0807 	movt	r8, #8199	; 0x2007
   8a0f8:	e9d8 2300 	ldrd	r2, r3, [r8]
   8a0fc:	1880      	adds	r0, r0, r2
   8a0fe:	eb41 0103 	adc.w	r1, r1, r3
   8a102:	e9c8 0100 	strd	r0, r1, [r8]
			
			if(ch0_integration_time_counter == ch0_integration_time_goal)
   8a106:	883a      	ldrh	r2, [r7, #0]
   8a108:	f240 23a8 	movw	r3, #680	; 0x2a8
   8a10c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a110:	8819      	ldrh	r1, [r3, #0]
   8a112:	428a      	cmp	r2, r1
   8a114:	d137      	bne.n	8a186 <main+0x1a6>
			{
				ch0_integration_time_counter = 0;
   8a116:	f04f 0000 	mov.w	r0, #0
   8a11a:	8038      	strh	r0, [r7, #0]
				if(meas_push_activated)
   8a11c:	f241 6238 	movw	r2, #5688	; 0x1638
   8a120:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8a124:	8813      	ldrh	r3, [r2, #0]
   8a126:	b1eb      	cbz	r3, 8a164 <main+0x184>
				{
					printf("Counter0 value: %llu\x0D", ch0_counter_integrated);
   8a128:	f641 3878 	movw	r8, #7032	; 0x1b78
   8a12c:	f2c2 0807 	movt	r8, #8199	; 0x2007
   8a130:	f241 6148 	movw	r1, #5704	; 0x1648
   8a134:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8a138:	e9d1 0100 	ldrd	r0, r1, [r1]
   8a13c:	e9cd 0100 	strd	r0, r1, [sp]
   8a140:	4640      	mov	r0, r8
   8a142:	f04f 0164 	mov.w	r1, #100	; 0x64
   8a146:	f24d 7238 	movw	r2, #55096	; 0xd738
   8a14a:	f2c0 0208 	movt	r2, #8
   8a14e:	f64a 033f 	movw	r3, #43071	; 0xa83f
   8a152:	f2c0 0308 	movt	r3, #8
   8a156:	4798      	blx	r3
   8a158:	4640      	mov	r0, r8
   8a15a:	f644 527d 	movw	r2, #19837	; 0x4d7d
   8a15e:	f2c0 0208 	movt	r2, #8
   8a162:	4790      	blx	r2
				}
				add_new_countera_measurement_to_queue(ch0_counter_integrated);
   8a164:	f241 6848 	movw	r8, #5704	; 0x1648
   8a168:	f2c2 0807 	movt	r8, #8199	; 0x2007
   8a16c:	e9d8 0100 	ldrd	r0, r1, [r8]
   8a170:	f649 7341 	movw	r3, #40769	; 0x9f41
   8a174:	f2c0 0308 	movt	r3, #8
   8a178:	4798      	blx	r3
				ch0_counter_integrated = 0;
   8a17a:	f04f 0200 	mov.w	r2, #0
   8a17e:	f04f 0300 	mov.w	r3, #0
   8a182:	e9c8 2300 	strd	r2, r3, [r8]
			}
			
			if(ch1_integration_time_counter == ch1_integration_time_goal)
   8a186:	8831      	ldrh	r1, [r6, #0]
   8a188:	f240 20aa 	movw	r0, #682	; 0x2aa
   8a18c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a190:	8802      	ldrh	r2, [r0, #0]
   8a192:	4291      	cmp	r1, r2
   8a194:	d137      	bne.n	8a206 <main+0x226>
			{
				ch1_integration_time_counter = 0;
   8a196:	f04f 0300 	mov.w	r3, #0
   8a19a:	8033      	strh	r3, [r6, #0]
				if(meas_push_activated)
   8a19c:	f241 6138 	movw	r1, #5688	; 0x1638
   8a1a0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8a1a4:	8808      	ldrh	r0, [r1, #0]
   8a1a6:	b1e8      	cbz	r0, 8a1e4 <main+0x204>
				{
					printf("Counter1 value: %llu\x0D", ch1_counter_integrated);
   8a1a8:	f641 3878 	movw	r8, #7032	; 0x1b78
   8a1ac:	f2c2 0807 	movt	r8, #8199	; 0x2007
   8a1b0:	f241 6230 	movw	r2, #5680	; 0x1630
   8a1b4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8a1b8:	e9d2 0100 	ldrd	r0, r1, [r2]
   8a1bc:	e9cd 0100 	strd	r0, r1, [sp]
   8a1c0:	4640      	mov	r0, r8
   8a1c2:	f04f 0164 	mov.w	r1, #100	; 0x64
   8a1c6:	f24d 7250 	movw	r2, #55120	; 0xd750
   8a1ca:	f2c0 0208 	movt	r2, #8
   8a1ce:	f64a 033f 	movw	r3, #43071	; 0xa83f
   8a1d2:	f2c0 0308 	movt	r3, #8
   8a1d6:	4798      	blx	r3
   8a1d8:	4640      	mov	r0, r8
   8a1da:	f644 517d 	movw	r1, #19837	; 0x4d7d
   8a1de:	f2c0 0108 	movt	r1, #8
   8a1e2:	4788      	blx	r1
				}
				add_new_counterb_measurement_to_queue(ch1_counter_integrated);
   8a1e4:	f241 6830 	movw	r8, #5680	; 0x1630
   8a1e8:	f2c2 0807 	movt	r8, #8199	; 0x2007
   8a1ec:	e9d8 0100 	ldrd	r0, r1, [r8]
   8a1f0:	f649 7291 	movw	r2, #40849	; 0x9f91
   8a1f4:	f2c0 0208 	movt	r2, #8
   8a1f8:	4790      	blx	r2
				ch1_counter_integrated = 0;
   8a1fa:	f04f 0200 	mov.w	r2, #0
   8a1fe:	f04f 0300 	mov.w	r3, #0
   8a202:	e9c8 2300 	strd	r2, r3, [r8]
			}
		}
		
		if(second_flag == TRUE)
   8a206:	f241 6056 	movw	r0, #5718	; 0x1656
   8a20a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a20e:	8803      	ldrh	r3, [r0, #0]
   8a210:	b299      	uxth	r1, r3
   8a212:	2901      	cmp	r1, #1
   8a214:	d106      	bne.n	8a224 <main+0x244>
		{
			second_flag = FALSE;	
   8a216:	f241 6056 	movw	r0, #5718	; 0x1656
   8a21a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8a21e:	f04f 0200 	mov.w	r2, #0
   8a222:	8002      	strh	r2, [r0, #0]
		}	

		if (main_b_msc_enable) 
   8a224:	f241 633c 	movw	r3, #5692	; 0x163c
   8a228:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8a22c:	7819      	ldrb	r1, [r3, #0]
   8a22e:	2900      	cmp	r1, #0
   8a230:	f43f af38 	beq.w	8a0a4 <main+0xc4>
		{
			if (!udi_msc_process_trans()) 
   8a234:	f646 0091 	movw	r0, #26769	; 0x6891
   8a238:	f2c0 0008 	movt	r0, #8
   8a23c:	4780      	blx	r0
   8a23e:	e731      	b.n	8a0a4 <main+0xc4>

0008a240 <round>:
   8a240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a242:	f3c1 570a 	ubfx	r7, r1, #20, #11
   8a246:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
   8a24a:	2e13      	cmp	r6, #19
   8a24c:	4602      	mov	r2, r0
   8a24e:	460b      	mov	r3, r1
   8a250:	4604      	mov	r4, r0
   8a252:	460d      	mov	r5, r1
   8a254:	dc18      	bgt.n	8a288 <round+0x48>
   8a256:	2e00      	cmp	r6, #0
   8a258:	da08      	bge.n	8a26c <round+0x2c>
   8a25a:	1c73      	adds	r3, r6, #1
   8a25c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a260:	d130      	bne.n	8a2c4 <round+0x84>
   8a262:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
   8a266:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   8a26a:	e02b      	b.n	8a2c4 <round+0x84>
   8a26c:	4818      	ldr	r0, [pc, #96]	; (8a2d0 <round+0x90>)
   8a26e:	fa40 f006 	asr.w	r0, r0, r6
   8a272:	4208      	tst	r0, r1
   8a274:	d100      	bne.n	8a278 <round+0x38>
   8a276:	b342      	cbz	r2, 8a2ca <round+0x8a>
   8a278:	f44f 2400 	mov.w	r4, #524288	; 0x80000
   8a27c:	fa44 f606 	asr.w	r6, r4, r6
   8a280:	19ad      	adds	r5, r5, r6
   8a282:	ea25 0500 	bic.w	r5, r5, r0
   8a286:	e01d      	b.n	8a2c4 <round+0x84>
   8a288:	2e33      	cmp	r6, #51	; 0x33
   8a28a:	dd07      	ble.n	8a29c <round+0x5c>
   8a28c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   8a290:	d11b      	bne.n	8a2ca <round+0x8a>
   8a292:	f000 f825 	bl	8a2e0 <__adddf3>
   8a296:	4602      	mov	r2, r0
   8a298:	460b      	mov	r3, r1
   8a29a:	e016      	b.n	8a2ca <round+0x8a>
   8a29c:	f2a7 4113 	subw	r1, r7, #1043	; 0x413
   8a2a0:	f04f 30ff 	mov.w	r0, #4294967295
   8a2a4:	fa20 f101 	lsr.w	r1, r0, r1
   8a2a8:	4211      	tst	r1, r2
   8a2aa:	d00e      	beq.n	8a2ca <round+0x8a>
   8a2ac:	f5c7 6786 	rsb	r7, r7, #1072	; 0x430
   8a2b0:	2301      	movs	r3, #1
   8a2b2:	1cba      	adds	r2, r7, #2
   8a2b4:	fa03 f702 	lsl.w	r7, r3, r2
   8a2b8:	193c      	adds	r4, r7, r4
   8a2ba:	bf28      	it	cs
   8a2bc:	18ed      	addcs	r5, r5, r3
   8a2be:	ea24 0401 	bic.w	r4, r4, r1
   8a2c2:	e000      	b.n	8a2c6 <round+0x86>
   8a2c4:	2400      	movs	r4, #0
   8a2c6:	462b      	mov	r3, r5
   8a2c8:	4622      	mov	r2, r4
   8a2ca:	4610      	mov	r0, r2
   8a2cc:	4619      	mov	r1, r3
   8a2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a2d0:	000fffff 	.word	0x000fffff

0008a2d4 <__aeabi_drsub>:
   8a2d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8a2d8:	e002      	b.n	8a2e0 <__adddf3>
   8a2da:	bf00      	nop

0008a2dc <__aeabi_dsub>:
   8a2dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008a2e0 <__adddf3>:
   8a2e0:	b530      	push	{r4, r5, lr}
   8a2e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8a2e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8a2ea:	ea94 0f05 	teq	r4, r5
   8a2ee:	bf08      	it	eq
   8a2f0:	ea90 0f02 	teqeq	r0, r2
   8a2f4:	bf1f      	itttt	ne
   8a2f6:	ea54 0c00 	orrsne.w	ip, r4, r0
   8a2fa:	ea55 0c02 	orrsne.w	ip, r5, r2
   8a2fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8a302:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8a306:	f000 80e2 	beq.w	8a4ce <__adddf3+0x1ee>
   8a30a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8a30e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8a312:	bfb8      	it	lt
   8a314:	426d      	neglt	r5, r5
   8a316:	dd0c      	ble.n	8a332 <__adddf3+0x52>
   8a318:	442c      	add	r4, r5
   8a31a:	ea80 0202 	eor.w	r2, r0, r2
   8a31e:	ea81 0303 	eor.w	r3, r1, r3
   8a322:	ea82 0000 	eor.w	r0, r2, r0
   8a326:	ea83 0101 	eor.w	r1, r3, r1
   8a32a:	ea80 0202 	eor.w	r2, r0, r2
   8a32e:	ea81 0303 	eor.w	r3, r1, r3
   8a332:	2d36      	cmp	r5, #54	; 0x36
   8a334:	bf88      	it	hi
   8a336:	bd30      	pophi	{r4, r5, pc}
   8a338:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8a33c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8a340:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8a344:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8a348:	d002      	beq.n	8a350 <__adddf3+0x70>
   8a34a:	4240      	negs	r0, r0
   8a34c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8a350:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8a354:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8a358:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8a35c:	d002      	beq.n	8a364 <__adddf3+0x84>
   8a35e:	4252      	negs	r2, r2
   8a360:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8a364:	ea94 0f05 	teq	r4, r5
   8a368:	f000 80a7 	beq.w	8a4ba <__adddf3+0x1da>
   8a36c:	f1a4 0401 	sub.w	r4, r4, #1
   8a370:	f1d5 0e20 	rsbs	lr, r5, #32
   8a374:	db0d      	blt.n	8a392 <__adddf3+0xb2>
   8a376:	fa02 fc0e 	lsl.w	ip, r2, lr
   8a37a:	fa22 f205 	lsr.w	r2, r2, r5
   8a37e:	1880      	adds	r0, r0, r2
   8a380:	f141 0100 	adc.w	r1, r1, #0
   8a384:	fa03 f20e 	lsl.w	r2, r3, lr
   8a388:	1880      	adds	r0, r0, r2
   8a38a:	fa43 f305 	asr.w	r3, r3, r5
   8a38e:	4159      	adcs	r1, r3
   8a390:	e00e      	b.n	8a3b0 <__adddf3+0xd0>
   8a392:	f1a5 0520 	sub.w	r5, r5, #32
   8a396:	f10e 0e20 	add.w	lr, lr, #32
   8a39a:	2a01      	cmp	r2, #1
   8a39c:	fa03 fc0e 	lsl.w	ip, r3, lr
   8a3a0:	bf28      	it	cs
   8a3a2:	f04c 0c02 	orrcs.w	ip, ip, #2
   8a3a6:	fa43 f305 	asr.w	r3, r3, r5
   8a3aa:	18c0      	adds	r0, r0, r3
   8a3ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8a3b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a3b4:	d507      	bpl.n	8a3c6 <__adddf3+0xe6>
   8a3b6:	f04f 0e00 	mov.w	lr, #0
   8a3ba:	f1dc 0c00 	rsbs	ip, ip, #0
   8a3be:	eb7e 0000 	sbcs.w	r0, lr, r0
   8a3c2:	eb6e 0101 	sbc.w	r1, lr, r1
   8a3c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8a3ca:	d31b      	bcc.n	8a404 <__adddf3+0x124>
   8a3cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8a3d0:	d30c      	bcc.n	8a3ec <__adddf3+0x10c>
   8a3d2:	0849      	lsrs	r1, r1, #1
   8a3d4:	ea5f 0030 	movs.w	r0, r0, rrx
   8a3d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8a3dc:	f104 0401 	add.w	r4, r4, #1
   8a3e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8a3e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8a3e8:	f080 809a 	bcs.w	8a520 <__adddf3+0x240>
   8a3ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8a3f0:	bf08      	it	eq
   8a3f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8a3f6:	f150 0000 	adcs.w	r0, r0, #0
   8a3fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8a3fe:	ea41 0105 	orr.w	r1, r1, r5
   8a402:	bd30      	pop	{r4, r5, pc}
   8a404:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8a408:	4140      	adcs	r0, r0
   8a40a:	eb41 0101 	adc.w	r1, r1, r1
   8a40e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8a412:	f1a4 0401 	sub.w	r4, r4, #1
   8a416:	d1e9      	bne.n	8a3ec <__adddf3+0x10c>
   8a418:	f091 0f00 	teq	r1, #0
   8a41c:	bf04      	itt	eq
   8a41e:	4601      	moveq	r1, r0
   8a420:	2000      	moveq	r0, #0
   8a422:	fab1 f381 	clz	r3, r1
   8a426:	bf08      	it	eq
   8a428:	3320      	addeq	r3, #32
   8a42a:	f1a3 030b 	sub.w	r3, r3, #11
   8a42e:	f1b3 0220 	subs.w	r2, r3, #32
   8a432:	da0c      	bge.n	8a44e <__adddf3+0x16e>
   8a434:	320c      	adds	r2, #12
   8a436:	dd08      	ble.n	8a44a <__adddf3+0x16a>
   8a438:	f102 0c14 	add.w	ip, r2, #20
   8a43c:	f1c2 020c 	rsb	r2, r2, #12
   8a440:	fa01 f00c 	lsl.w	r0, r1, ip
   8a444:	fa21 f102 	lsr.w	r1, r1, r2
   8a448:	e00c      	b.n	8a464 <__adddf3+0x184>
   8a44a:	f102 0214 	add.w	r2, r2, #20
   8a44e:	bfd8      	it	le
   8a450:	f1c2 0c20 	rsble	ip, r2, #32
   8a454:	fa01 f102 	lsl.w	r1, r1, r2
   8a458:	fa20 fc0c 	lsr.w	ip, r0, ip
   8a45c:	bfdc      	itt	le
   8a45e:	ea41 010c 	orrle.w	r1, r1, ip
   8a462:	4090      	lslle	r0, r2
   8a464:	1ae4      	subs	r4, r4, r3
   8a466:	bfa2      	ittt	ge
   8a468:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8a46c:	4329      	orrge	r1, r5
   8a46e:	bd30      	popge	{r4, r5, pc}
   8a470:	ea6f 0404 	mvn.w	r4, r4
   8a474:	3c1f      	subs	r4, #31
   8a476:	da1c      	bge.n	8a4b2 <__adddf3+0x1d2>
   8a478:	340c      	adds	r4, #12
   8a47a:	dc0e      	bgt.n	8a49a <__adddf3+0x1ba>
   8a47c:	f104 0414 	add.w	r4, r4, #20
   8a480:	f1c4 0220 	rsb	r2, r4, #32
   8a484:	fa20 f004 	lsr.w	r0, r0, r4
   8a488:	fa01 f302 	lsl.w	r3, r1, r2
   8a48c:	ea40 0003 	orr.w	r0, r0, r3
   8a490:	fa21 f304 	lsr.w	r3, r1, r4
   8a494:	ea45 0103 	orr.w	r1, r5, r3
   8a498:	bd30      	pop	{r4, r5, pc}
   8a49a:	f1c4 040c 	rsb	r4, r4, #12
   8a49e:	f1c4 0220 	rsb	r2, r4, #32
   8a4a2:	fa20 f002 	lsr.w	r0, r0, r2
   8a4a6:	fa01 f304 	lsl.w	r3, r1, r4
   8a4aa:	ea40 0003 	orr.w	r0, r0, r3
   8a4ae:	4629      	mov	r1, r5
   8a4b0:	bd30      	pop	{r4, r5, pc}
   8a4b2:	fa21 f004 	lsr.w	r0, r1, r4
   8a4b6:	4629      	mov	r1, r5
   8a4b8:	bd30      	pop	{r4, r5, pc}
   8a4ba:	f094 0f00 	teq	r4, #0
   8a4be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8a4c2:	bf06      	itte	eq
   8a4c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8a4c8:	3401      	addeq	r4, #1
   8a4ca:	3d01      	subne	r5, #1
   8a4cc:	e74e      	b.n	8a36c <__adddf3+0x8c>
   8a4ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8a4d2:	bf18      	it	ne
   8a4d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8a4d8:	d029      	beq.n	8a52e <__adddf3+0x24e>
   8a4da:	ea94 0f05 	teq	r4, r5
   8a4de:	bf08      	it	eq
   8a4e0:	ea90 0f02 	teqeq	r0, r2
   8a4e4:	d005      	beq.n	8a4f2 <__adddf3+0x212>
   8a4e6:	ea54 0c00 	orrs.w	ip, r4, r0
   8a4ea:	bf04      	itt	eq
   8a4ec:	4619      	moveq	r1, r3
   8a4ee:	4610      	moveq	r0, r2
   8a4f0:	bd30      	pop	{r4, r5, pc}
   8a4f2:	ea91 0f03 	teq	r1, r3
   8a4f6:	bf1e      	ittt	ne
   8a4f8:	2100      	movne	r1, #0
   8a4fa:	2000      	movne	r0, #0
   8a4fc:	bd30      	popne	{r4, r5, pc}
   8a4fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8a502:	d105      	bne.n	8a510 <__adddf3+0x230>
   8a504:	0040      	lsls	r0, r0, #1
   8a506:	4149      	adcs	r1, r1
   8a508:	bf28      	it	cs
   8a50a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8a50e:	bd30      	pop	{r4, r5, pc}
   8a510:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8a514:	bf3c      	itt	cc
   8a516:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8a51a:	bd30      	popcc	{r4, r5, pc}
   8a51c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a520:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8a524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8a528:	f04f 0000 	mov.w	r0, #0
   8a52c:	bd30      	pop	{r4, r5, pc}
   8a52e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8a532:	bf1a      	itte	ne
   8a534:	4619      	movne	r1, r3
   8a536:	4610      	movne	r0, r2
   8a538:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8a53c:	bf1c      	itt	ne
   8a53e:	460b      	movne	r3, r1
   8a540:	4602      	movne	r2, r0
   8a542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8a546:	bf06      	itte	eq
   8a548:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8a54c:	ea91 0f03 	teqeq	r1, r3
   8a550:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8a554:	bd30      	pop	{r4, r5, pc}
   8a556:	bf00      	nop

0008a558 <__aeabi_ui2d>:
   8a558:	f090 0f00 	teq	r0, #0
   8a55c:	bf04      	itt	eq
   8a55e:	2100      	moveq	r1, #0
   8a560:	4770      	bxeq	lr
   8a562:	b530      	push	{r4, r5, lr}
   8a564:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8a568:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8a56c:	f04f 0500 	mov.w	r5, #0
   8a570:	f04f 0100 	mov.w	r1, #0
   8a574:	e750      	b.n	8a418 <__adddf3+0x138>
   8a576:	bf00      	nop

0008a578 <__aeabi_i2d>:
   8a578:	f090 0f00 	teq	r0, #0
   8a57c:	bf04      	itt	eq
   8a57e:	2100      	moveq	r1, #0
   8a580:	4770      	bxeq	lr
   8a582:	b530      	push	{r4, r5, lr}
   8a584:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8a588:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8a58c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8a590:	bf48      	it	mi
   8a592:	4240      	negmi	r0, r0
   8a594:	f04f 0100 	mov.w	r1, #0
   8a598:	e73e      	b.n	8a418 <__adddf3+0x138>
   8a59a:	bf00      	nop

0008a59c <__aeabi_f2d>:
   8a59c:	0042      	lsls	r2, r0, #1
   8a59e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8a5a2:	ea4f 0131 	mov.w	r1, r1, rrx
   8a5a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8a5aa:	bf1f      	itttt	ne
   8a5ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8a5b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8a5b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8a5b8:	4770      	bxne	lr
   8a5ba:	f092 0f00 	teq	r2, #0
   8a5be:	bf14      	ite	ne
   8a5c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8a5c4:	4770      	bxeq	lr
   8a5c6:	b530      	push	{r4, r5, lr}
   8a5c8:	f44f 7460 	mov.w	r4, #896	; 0x380
   8a5cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a5d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8a5d4:	e720      	b.n	8a418 <__adddf3+0x138>
   8a5d6:	bf00      	nop

0008a5d8 <__aeabi_ul2d>:
   8a5d8:	ea50 0201 	orrs.w	r2, r0, r1
   8a5dc:	bf08      	it	eq
   8a5de:	4770      	bxeq	lr
   8a5e0:	b530      	push	{r4, r5, lr}
   8a5e2:	f04f 0500 	mov.w	r5, #0
   8a5e6:	e00a      	b.n	8a5fe <__aeabi_l2d+0x16>

0008a5e8 <__aeabi_l2d>:
   8a5e8:	ea50 0201 	orrs.w	r2, r0, r1
   8a5ec:	bf08      	it	eq
   8a5ee:	4770      	bxeq	lr
   8a5f0:	b530      	push	{r4, r5, lr}
   8a5f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8a5f6:	d502      	bpl.n	8a5fe <__aeabi_l2d+0x16>
   8a5f8:	4240      	negs	r0, r0
   8a5fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8a5fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8a602:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8a606:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8a60a:	f43f aedc 	beq.w	8a3c6 <__adddf3+0xe6>
   8a60e:	f04f 0203 	mov.w	r2, #3
   8a612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8a616:	bf18      	it	ne
   8a618:	3203      	addne	r2, #3
   8a61a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8a61e:	bf18      	it	ne
   8a620:	3203      	addne	r2, #3
   8a622:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8a626:	f1c2 0320 	rsb	r3, r2, #32
   8a62a:	fa00 fc03 	lsl.w	ip, r0, r3
   8a62e:	fa20 f002 	lsr.w	r0, r0, r2
   8a632:	fa01 fe03 	lsl.w	lr, r1, r3
   8a636:	ea40 000e 	orr.w	r0, r0, lr
   8a63a:	fa21 f102 	lsr.w	r1, r1, r2
   8a63e:	4414      	add	r4, r2
   8a640:	e6c1      	b.n	8a3c6 <__adddf3+0xe6>
   8a642:	bf00      	nop

0008a644 <__aeabi_d2uiz>:
   8a644:	004a      	lsls	r2, r1, #1
   8a646:	d211      	bcs.n	8a66c <__aeabi_d2uiz+0x28>
   8a648:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8a64c:	d211      	bcs.n	8a672 <__aeabi_d2uiz+0x2e>
   8a64e:	d50d      	bpl.n	8a66c <__aeabi_d2uiz+0x28>
   8a650:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8a654:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8a658:	d40e      	bmi.n	8a678 <__aeabi_d2uiz+0x34>
   8a65a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8a65e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8a662:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8a666:	fa23 f002 	lsr.w	r0, r3, r2
   8a66a:	4770      	bx	lr
   8a66c:	f04f 0000 	mov.w	r0, #0
   8a670:	4770      	bx	lr
   8a672:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8a676:	d102      	bne.n	8a67e <__aeabi_d2uiz+0x3a>
   8a678:	f04f 30ff 	mov.w	r0, #4294967295
   8a67c:	4770      	bx	lr
   8a67e:	f04f 0000 	mov.w	r0, #0
   8a682:	4770      	bx	lr

0008a684 <__register_exitproc>:
   8a684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8a688:	4698      	mov	r8, r3
   8a68a:	4b23      	ldr	r3, [pc, #140]	; (8a718 <__register_exitproc+0x94>)
   8a68c:	4606      	mov	r6, r0
   8a68e:	681c      	ldr	r4, [r3, #0]
   8a690:	460f      	mov	r7, r1
   8a692:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   8a696:	4691      	mov	r9, r2
   8a698:	b918      	cbnz	r0, 8a6a2 <__register_exitproc+0x1e>
   8a69a:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   8a69e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   8a6a2:	6841      	ldr	r1, [r0, #4]
   8a6a4:	291f      	cmp	r1, #31
   8a6a6:	dd16      	ble.n	8a6d6 <__register_exitproc+0x52>
   8a6a8:	481c      	ldr	r0, [pc, #112]	; (8a71c <__register_exitproc+0x98>)
   8a6aa:	b918      	cbnz	r0, 8a6b4 <__register_exitproc+0x30>
   8a6ac:	f04f 30ff 	mov.w	r0, #4294967295
   8a6b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8a6b4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8a6b8:	f3af 8000 	nop.w
   8a6bc:	2800      	cmp	r0, #0
   8a6be:	d0f5      	beq.n	8a6ac <__register_exitproc+0x28>
   8a6c0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   8a6c4:	2500      	movs	r5, #0
   8a6c6:	6045      	str	r5, [r0, #4]
   8a6c8:	6002      	str	r2, [r0, #0]
   8a6ca:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   8a6ce:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   8a6d2:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   8a6d6:	b1b6      	cbz	r6, 8a706 <__register_exitproc+0x82>
   8a6d8:	6844      	ldr	r4, [r0, #4]
   8a6da:	2201      	movs	r2, #1
   8a6dc:	fa02 f204 	lsl.w	r2, r2, r4
   8a6e0:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   8a6e4:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   8a6e8:	4311      	orrs	r1, r2
   8a6ea:	2e02      	cmp	r6, #2
   8a6ec:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   8a6f0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   8a6f4:	461c      	mov	r4, r3
   8a6f6:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   8a6fa:	d104      	bne.n	8a706 <__register_exitproc+0x82>
   8a6fc:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   8a700:	431a      	orrs	r2, r3
   8a702:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   8a706:	6841      	ldr	r1, [r0, #4]
   8a708:	1c8b      	adds	r3, r1, #2
   8a70a:	1c4a      	adds	r2, r1, #1
   8a70c:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   8a710:	6042      	str	r2, [r0, #4]
   8a712:	2000      	movs	r0, #0
   8a714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8a718:	0008d86c 	.word	0x0008d86c
   8a71c:	00000000 	.word	0x00000000

0008a720 <__libc_fini_array>:
   8a720:	b570      	push	{r4, r5, r6, lr}
   8a722:	4b08      	ldr	r3, [pc, #32]	; (8a744 <__libc_fini_array+0x24>)
   8a724:	4c08      	ldr	r4, [pc, #32]	; (8a748 <__libc_fini_array+0x28>)
   8a726:	2500      	movs	r5, #0
   8a728:	1ae0      	subs	r0, r4, r3
   8a72a:	1084      	asrs	r4, r0, #2
   8a72c:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   8a730:	3d04      	subs	r5, #4
   8a732:	b11c      	cbz	r4, 8a73c <__libc_fini_array+0x1c>
   8a734:	5972      	ldr	r2, [r6, r5]
   8a736:	4790      	blx	r2
   8a738:	3c01      	subs	r4, #1
   8a73a:	e7f9      	b.n	8a730 <__libc_fini_array+0x10>
   8a73c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   8a740:	f003 b8d2 	b.w	8d8e8 <_fini>
   8a744:	0008d8f4 	.word	0x0008d8f4
   8a748:	0008d8f8 	.word	0x0008d8f8

0008a74c <__libc_init_array>:
   8a74c:	b538      	push	{r3, r4, r5, lr}
   8a74e:	4d0e      	ldr	r5, [pc, #56]	; (8a788 <__libc_init_array+0x3c>)
   8a750:	4b0e      	ldr	r3, [pc, #56]	; (8a78c <__libc_init_array+0x40>)
   8a752:	2400      	movs	r4, #0
   8a754:	1ae8      	subs	r0, r5, r3
   8a756:	1085      	asrs	r5, r0, #2
   8a758:	42ac      	cmp	r4, r5
   8a75a:	d005      	beq.n	8a768 <__libc_init_array+0x1c>
   8a75c:	490b      	ldr	r1, [pc, #44]	; (8a78c <__libc_init_array+0x40>)
   8a75e:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   8a762:	4790      	blx	r2
   8a764:	3401      	adds	r4, #1
   8a766:	e7f7      	b.n	8a758 <__libc_init_array+0xc>
   8a768:	f003 f8b4 	bl	8d8d4 <_init>
   8a76c:	4908      	ldr	r1, [pc, #32]	; (8a790 <__libc_init_array+0x44>)
   8a76e:	4a09      	ldr	r2, [pc, #36]	; (8a794 <__libc_init_array+0x48>)
   8a770:	1a54      	subs	r4, r2, r1
   8a772:	10a5      	asrs	r5, r4, #2
   8a774:	2400      	movs	r4, #0
   8a776:	42ac      	cmp	r4, r5
   8a778:	d005      	beq.n	8a786 <__libc_init_array+0x3a>
   8a77a:	4b05      	ldr	r3, [pc, #20]	; (8a790 <__libc_init_array+0x44>)
   8a77c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8a780:	4780      	blx	r0
   8a782:	3401      	adds	r4, #1
   8a784:	e7f7      	b.n	8a776 <__libc_init_array+0x2a>
   8a786:	bd38      	pop	{r3, r4, r5, pc}
   8a788:	0008d8e0 	.word	0x0008d8e0
   8a78c:	0008d8e0 	.word	0x0008d8e0
   8a790:	0008d8e0 	.word	0x0008d8e0
   8a794:	0008d8e8 	.word	0x0008d8e8

0008a798 <memcpy>:
   8a798:	b510      	push	{r4, lr}
   8a79a:	2300      	movs	r3, #0
   8a79c:	4293      	cmp	r3, r2
   8a79e:	d003      	beq.n	8a7a8 <memcpy+0x10>
   8a7a0:	5ccc      	ldrb	r4, [r1, r3]
   8a7a2:	54c4      	strb	r4, [r0, r3]
   8a7a4:	3301      	adds	r3, #1
   8a7a6:	e7f9      	b.n	8a79c <memcpy+0x4>
   8a7a8:	bd10      	pop	{r4, pc}

0008a7aa <memmove>:
   8a7aa:	4281      	cmp	r1, r0
   8a7ac:	b570      	push	{r4, r5, r6, lr}
   8a7ae:	d20e      	bcs.n	8a7ce <memmove+0x24>
   8a7b0:	188c      	adds	r4, r1, r2
   8a7b2:	42a0      	cmp	r0, r4
   8a7b4:	d20b      	bcs.n	8a7ce <memmove+0x24>
   8a7b6:	1885      	adds	r5, r0, r2
   8a7b8:	4613      	mov	r3, r2
   8a7ba:	f113 33ff 	adds.w	r3, r3, #4294967295
   8a7be:	d305      	bcc.n	8a7cc <memmove+0x22>
   8a7c0:	4251      	negs	r1, r2
   8a7c2:	1866      	adds	r6, r4, r1
   8a7c4:	5cf6      	ldrb	r6, [r6, r3]
   8a7c6:	1869      	adds	r1, r5, r1
   8a7c8:	54ce      	strb	r6, [r1, r3]
   8a7ca:	e7f6      	b.n	8a7ba <memmove+0x10>
   8a7cc:	bd70      	pop	{r4, r5, r6, pc}
   8a7ce:	2300      	movs	r3, #0
   8a7d0:	4293      	cmp	r3, r2
   8a7d2:	d003      	beq.n	8a7dc <memmove+0x32>
   8a7d4:	5ccc      	ldrb	r4, [r1, r3]
   8a7d6:	54c4      	strb	r4, [r0, r3]
   8a7d8:	3301      	adds	r3, #1
   8a7da:	e7f9      	b.n	8a7d0 <memmove+0x26>
   8a7dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0008a7e0 <_snprintf_r>:
   8a7e0:	b408      	push	{r3}
   8a7e2:	b530      	push	{r4, r5, lr}
   8a7e4:	1e14      	subs	r4, r2, #0
   8a7e6:	b09c      	sub	sp, #112	; 0x70
   8a7e8:	4605      	mov	r5, r0
   8a7ea:	da04      	bge.n	8a7f6 <_snprintf_r+0x16>
   8a7ec:	208b      	movs	r0, #139	; 0x8b
   8a7ee:	6028      	str	r0, [r5, #0]
   8a7f0:	f04f 30ff 	mov.w	r0, #4294967295
   8a7f4:	e01e      	b.n	8a834 <_snprintf_r+0x54>
   8a7f6:	f44f 7302 	mov.w	r3, #520	; 0x208
   8a7fa:	f8ad 3014 	strh.w	r3, [sp, #20]
   8a7fe:	9102      	str	r1, [sp, #8]
   8a800:	9106      	str	r1, [sp, #24]
   8a802:	d001      	beq.n	8a808 <_snprintf_r+0x28>
   8a804:	1e60      	subs	r0, r4, #1
   8a806:	e000      	b.n	8a80a <_snprintf_r+0x2a>
   8a808:	4620      	mov	r0, r4
   8a80a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8a80e:	ab20      	add	r3, sp, #128	; 0x80
   8a810:	9004      	str	r0, [sp, #16]
   8a812:	9007      	str	r0, [sp, #28]
   8a814:	f8ad 1016 	strh.w	r1, [sp, #22]
   8a818:	4628      	mov	r0, r5
   8a81a:	a902      	add	r1, sp, #8
   8a81c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   8a81e:	9301      	str	r3, [sp, #4]
   8a820:	f000 f922 	bl	8aa68 <_svfprintf_r>
   8a824:	1c43      	adds	r3, r0, #1
   8a826:	da01      	bge.n	8a82c <_snprintf_r+0x4c>
   8a828:	228b      	movs	r2, #139	; 0x8b
   8a82a:	602a      	str	r2, [r5, #0]
   8a82c:	b114      	cbz	r4, 8a834 <_snprintf_r+0x54>
   8a82e:	9b02      	ldr	r3, [sp, #8]
   8a830:	2100      	movs	r1, #0
   8a832:	7019      	strb	r1, [r3, #0]
   8a834:	b01c      	add	sp, #112	; 0x70
   8a836:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8a83a:	b001      	add	sp, #4
   8a83c:	4770      	bx	lr

0008a83e <snprintf>:
   8a83e:	b40c      	push	{r2, r3}
   8a840:	b530      	push	{r4, r5, lr}
   8a842:	4b17      	ldr	r3, [pc, #92]	; (8a8a0 <snprintf+0x62>)
   8a844:	1e0c      	subs	r4, r1, #0
   8a846:	b09d      	sub	sp, #116	; 0x74
   8a848:	681d      	ldr	r5, [r3, #0]
   8a84a:	da04      	bge.n	8a856 <snprintf+0x18>
   8a84c:	208b      	movs	r0, #139	; 0x8b
   8a84e:	6028      	str	r0, [r5, #0]
   8a850:	f04f 30ff 	mov.w	r0, #4294967295
   8a854:	e01e      	b.n	8a894 <snprintf+0x56>
   8a856:	f44f 7102 	mov.w	r1, #520	; 0x208
   8a85a:	f8ad 1014 	strh.w	r1, [sp, #20]
   8a85e:	9002      	str	r0, [sp, #8]
   8a860:	9006      	str	r0, [sp, #24]
   8a862:	d001      	beq.n	8a868 <snprintf+0x2a>
   8a864:	1e60      	subs	r0, r4, #1
   8a866:	e000      	b.n	8a86a <snprintf+0x2c>
   8a868:	4620      	mov	r0, r4
   8a86a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8a86e:	9004      	str	r0, [sp, #16]
   8a870:	9007      	str	r0, [sp, #28]
   8a872:	f8ad 2016 	strh.w	r2, [sp, #22]
   8a876:	ab21      	add	r3, sp, #132	; 0x84
   8a878:	9a20      	ldr	r2, [sp, #128]	; 0x80
   8a87a:	4628      	mov	r0, r5
   8a87c:	a902      	add	r1, sp, #8
   8a87e:	9301      	str	r3, [sp, #4]
   8a880:	f000 f8f2 	bl	8aa68 <_svfprintf_r>
   8a884:	1c42      	adds	r2, r0, #1
   8a886:	da01      	bge.n	8a88c <snprintf+0x4e>
   8a888:	238b      	movs	r3, #139	; 0x8b
   8a88a:	602b      	str	r3, [r5, #0]
   8a88c:	b114      	cbz	r4, 8a894 <snprintf+0x56>
   8a88e:	9a02      	ldr	r2, [sp, #8]
   8a890:	2100      	movs	r1, #0
   8a892:	7011      	strb	r1, [r2, #0]
   8a894:	b01d      	add	sp, #116	; 0x74
   8a896:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8a89a:	b002      	add	sp, #8
   8a89c:	4770      	bx	lr
   8a89e:	bf00      	nop
   8a8a0:	200702b0 	.word	0x200702b0

0008a8a4 <strlen>:
   8a8a4:	4603      	mov	r3, r0
   8a8a6:	f813 2b01 	ldrb.w	r2, [r3], #1
   8a8aa:	2a00      	cmp	r2, #0
   8a8ac:	d1fb      	bne.n	8a8a6 <strlen+0x2>
   8a8ae:	1a18      	subs	r0, r3, r0
   8a8b0:	3801      	subs	r0, #1
   8a8b2:	4770      	bx	lr

0008a8b4 <strncasecmp>:
   8a8b4:	4b0f      	ldr	r3, [pc, #60]	; (8a8f4 <strncasecmp+0x40>)
   8a8b6:	b5f0      	push	{r4, r5, r6, r7, lr}
   8a8b8:	681e      	ldr	r6, [r3, #0]
   8a8ba:	2300      	movs	r3, #0
   8a8bc:	4293      	cmp	r3, r2
   8a8be:	d015      	beq.n	8a8ec <strncasecmp+0x38>
   8a8c0:	5cc5      	ldrb	r5, [r0, r3]
   8a8c2:	1974      	adds	r4, r6, r5
   8a8c4:	7867      	ldrb	r7, [r4, #1]
   8a8c6:	f007 0403 	and.w	r4, r7, #3
   8a8ca:	2c01      	cmp	r4, #1
   8a8cc:	5ccc      	ldrb	r4, [r1, r3]
   8a8ce:	bf08      	it	eq
   8a8d0:	3520      	addeq	r5, #32
   8a8d2:	1937      	adds	r7, r6, r4
   8a8d4:	787f      	ldrb	r7, [r7, #1]
   8a8d6:	f007 0703 	and.w	r7, r7, #3
   8a8da:	2f01      	cmp	r7, #1
   8a8dc:	bf08      	it	eq
   8a8de:	3420      	addeq	r4, #32
   8a8e0:	1b2d      	subs	r5, r5, r4
   8a8e2:	d104      	bne.n	8a8ee <strncasecmp+0x3a>
   8a8e4:	3301      	adds	r3, #1
   8a8e6:	2c00      	cmp	r4, #0
   8a8e8:	d1e8      	bne.n	8a8bc <strncasecmp+0x8>
   8a8ea:	e000      	b.n	8a8ee <strncasecmp+0x3a>
   8a8ec:	2500      	movs	r5, #0
   8a8ee:	4628      	mov	r0, r5
   8a8f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8a8f2:	bf00      	nop
   8a8f4:	200702ac 	.word	0x200702ac

0008a8f8 <strncmp>:
   8a8f8:	b570      	push	{r4, r5, r6, lr}
   8a8fa:	b192      	cbz	r2, 8a922 <strncmp+0x2a>
   8a8fc:	460b      	mov	r3, r1
   8a8fe:	4605      	mov	r5, r0
   8a900:	b91a      	cbnz	r2, 8a90a <strncmp+0x12>
   8a902:	7828      	ldrb	r0, [r5, #0]
   8a904:	7819      	ldrb	r1, [r3, #0]
   8a906:	1a40      	subs	r0, r0, r1
   8a908:	bd70      	pop	{r4, r5, r6, pc}
   8a90a:	f810 6b01 	ldrb.w	r6, [r0], #1
   8a90e:	781c      	ldrb	r4, [r3, #0]
   8a910:	3101      	adds	r1, #1
   8a912:	42b4      	cmp	r4, r6
   8a914:	d1f5      	bne.n	8a902 <strncmp+0xa>
   8a916:	2a01      	cmp	r2, #1
   8a918:	d0f3      	beq.n	8a902 <strncmp+0xa>
   8a91a:	3a01      	subs	r2, #1
   8a91c:	2c00      	cmp	r4, #0
   8a91e:	d1ed      	bne.n	8a8fc <strncmp+0x4>
   8a920:	e7ef      	b.n	8a902 <strncmp+0xa>
   8a922:	4610      	mov	r0, r2
   8a924:	bd70      	pop	{r4, r5, r6, pc}

0008a926 <strnlen>:
   8a926:	b510      	push	{r4, lr}
   8a928:	4603      	mov	r3, r0
   8a92a:	1841      	adds	r1, r0, r1
   8a92c:	428b      	cmp	r3, r1
   8a92e:	461a      	mov	r2, r3
   8a930:	d101      	bne.n	8a936 <strnlen+0x10>
   8a932:	1a10      	subs	r0, r2, r0
   8a934:	bd10      	pop	{r4, pc}
   8a936:	7814      	ldrb	r4, [r2, #0]
   8a938:	3301      	adds	r3, #1
   8a93a:	2c00      	cmp	r4, #0
   8a93c:	d1f6      	bne.n	8a92c <strnlen+0x6>
   8a93e:	e7f8      	b.n	8a932 <strnlen+0xc>

0008a940 <_strtol_r>:
   8a940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a944:	9001      	str	r0, [sp, #4]
   8a946:	4840      	ldr	r0, [pc, #256]	; (8aa48 <_strtol_r+0x108>)
   8a948:	f8d0 9000 	ldr.w	r9, [r0]
   8a94c:	4608      	mov	r0, r1
   8a94e:	4604      	mov	r4, r0
   8a950:	f814 5b01 	ldrb.w	r5, [r4], #1
   8a954:	eb09 0605 	add.w	r6, r9, r5
   8a958:	7877      	ldrb	r7, [r6, #1]
   8a95a:	4620      	mov	r0, r4
   8a95c:	f007 0608 	and.w	r6, r7, #8
   8a960:	b2f7      	uxtb	r7, r6
   8a962:	2f00      	cmp	r7, #0
   8a964:	d1f3      	bne.n	8a94e <_strtol_r+0xe>
   8a966:	2d2d      	cmp	r5, #45	; 0x2d
   8a968:	d103      	bne.n	8a972 <_strtol_r+0x32>
   8a96a:	f814 5b01 	ldrb.w	r5, [r4], #1
   8a96e:	2701      	movs	r7, #1
   8a970:	e004      	b.n	8a97c <_strtol_r+0x3c>
   8a972:	2d2b      	cmp	r5, #43	; 0x2b
   8a974:	bf04      	itt	eq
   8a976:	4624      	moveq	r4, r4
   8a978:	f814 5b01 	ldrbeq.w	r5, [r4], #1
   8a97c:	2b00      	cmp	r3, #0
   8a97e:	d05c      	beq.n	8aa3a <_strtol_r+0xfa>
   8a980:	2b10      	cmp	r3, #16
   8a982:	d107      	bne.n	8a994 <_strtol_r+0x54>
   8a984:	2d30      	cmp	r5, #48	; 0x30
   8a986:	d105      	bne.n	8a994 <_strtol_r+0x54>
   8a988:	7825      	ldrb	r5, [r4, #0]
   8a98a:	2d78      	cmp	r5, #120	; 0x78
   8a98c:	d14e      	bne.n	8aa2c <_strtol_r+0xec>
   8a98e:	7865      	ldrb	r5, [r4, #1]
   8a990:	2310      	movs	r3, #16
   8a992:	3402      	adds	r4, #2
   8a994:	2f00      	cmp	r7, #0
   8a996:	bf0c      	ite	eq
   8a998:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8a99c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   8a9a0:	fbb0 faf3 	udiv	sl, r0, r3
   8a9a4:	2600      	movs	r6, #0
   8a9a6:	fb03 081a 	mls	r8, r3, sl, r0
   8a9aa:	4630      	mov	r0, r6
   8a9ac:	eb09 0c05 	add.w	ip, r9, r5
   8a9b0:	f89c c001 	ldrb.w	ip, [ip, #1]
   8a9b4:	f00c 0b04 	and.w	fp, ip, #4
   8a9b8:	fa5f fb8b 	uxtb.w	fp, fp
   8a9bc:	f1bb 0f00 	cmp.w	fp, #0
   8a9c0:	d001      	beq.n	8a9c6 <_strtol_r+0x86>
   8a9c2:	3d30      	subs	r5, #48	; 0x30
   8a9c4:	e00b      	b.n	8a9de <_strtol_r+0x9e>
   8a9c6:	f01c 0c03 	ands.w	ip, ip, #3
   8a9ca:	d01b      	beq.n	8aa04 <_strtol_r+0xc4>
   8a9cc:	f1bc 0f01 	cmp.w	ip, #1
   8a9d0:	bf14      	ite	ne
   8a9d2:	f04f 0c57 	movne.w	ip, #87	; 0x57
   8a9d6:	f04f 0c37 	moveq.w	ip, #55	; 0x37
   8a9da:	ebcc 0505 	rsb	r5, ip, r5
   8a9de:	429d      	cmp	r5, r3
   8a9e0:	da10      	bge.n	8aa04 <_strtol_r+0xc4>
   8a9e2:	f1b6 3fff 	cmp.w	r6, #4294967295
   8a9e6:	d00a      	beq.n	8a9fe <_strtol_r+0xbe>
   8a9e8:	4550      	cmp	r0, sl
   8a9ea:	d806      	bhi.n	8a9fa <_strtol_r+0xba>
   8a9ec:	d101      	bne.n	8a9f2 <_strtol_r+0xb2>
   8a9ee:	4545      	cmp	r5, r8
   8a9f0:	dc03      	bgt.n	8a9fa <_strtol_r+0xba>
   8a9f2:	fb03 5000 	mla	r0, r3, r0, r5
   8a9f6:	2601      	movs	r6, #1
   8a9f8:	e001      	b.n	8a9fe <_strtol_r+0xbe>
   8a9fa:	f04f 36ff 	mov.w	r6, #4294967295
   8a9fe:	f814 5b01 	ldrb.w	r5, [r4], #1
   8aa02:	e7d3      	b.n	8a9ac <_strtol_r+0x6c>
   8aa04:	1c73      	adds	r3, r6, #1
   8aa06:	d10a      	bne.n	8aa1e <_strtol_r+0xde>
   8aa08:	2f00      	cmp	r7, #0
   8aa0a:	9901      	ldr	r1, [sp, #4]
   8aa0c:	bf0c      	ite	eq
   8aa0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8aa12:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   8aa16:	2322      	movs	r3, #34	; 0x22
   8aa18:	600b      	str	r3, [r1, #0]
   8aa1a:	b922      	cbnz	r2, 8aa26 <_strtol_r+0xe6>
   8aa1c:	e011      	b.n	8aa42 <_strtol_r+0x102>
   8aa1e:	b107      	cbz	r7, 8aa22 <_strtol_r+0xe2>
   8aa20:	4240      	negs	r0, r0
   8aa22:	b172      	cbz	r2, 8aa42 <_strtol_r+0x102>
   8aa24:	b106      	cbz	r6, 8aa28 <_strtol_r+0xe8>
   8aa26:	1e61      	subs	r1, r4, #1
   8aa28:	6011      	str	r1, [r2, #0]
   8aa2a:	e00a      	b.n	8aa42 <_strtol_r+0x102>
   8aa2c:	2d58      	cmp	r5, #88	; 0x58
   8aa2e:	d0ae      	beq.n	8a98e <_strtol_r+0x4e>
   8aa30:	2530      	movs	r5, #48	; 0x30
   8aa32:	2b00      	cmp	r3, #0
   8aa34:	d1ae      	bne.n	8a994 <_strtol_r+0x54>
   8aa36:	2308      	movs	r3, #8
   8aa38:	e7ac      	b.n	8a994 <_strtol_r+0x54>
   8aa3a:	2d30      	cmp	r5, #48	; 0x30
   8aa3c:	d0a4      	beq.n	8a988 <_strtol_r+0x48>
   8aa3e:	230a      	movs	r3, #10
   8aa40:	e7a8      	b.n	8a994 <_strtol_r+0x54>
   8aa42:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8aa46:	bf00      	nop
   8aa48:	200702ac 	.word	0x200702ac

0008aa4c <strtol>:
   8aa4c:	b530      	push	{r4, r5, lr}
   8aa4e:	4613      	mov	r3, r2
   8aa50:	4a04      	ldr	r2, [pc, #16]	; (8aa64 <strtol+0x18>)
   8aa52:	4605      	mov	r5, r0
   8aa54:	460c      	mov	r4, r1
   8aa56:	6810      	ldr	r0, [r2, #0]
   8aa58:	4629      	mov	r1, r5
   8aa5a:	4622      	mov	r2, r4
   8aa5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8aa60:	f7ff bf6e 	b.w	8a940 <_strtol_r>
   8aa64:	200702b0 	.word	0x200702b0

0008aa68 <_svfprintf_r>:
   8aa68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8aa6c:	461e      	mov	r6, r3
   8aa6e:	898b      	ldrh	r3, [r1, #12]
   8aa70:	4689      	mov	r9, r1
   8aa72:	f003 0180 	and.w	r1, r3, #128	; 0x80
   8aa76:	4614      	mov	r4, r2
   8aa78:	b20a      	sxth	r2, r1
   8aa7a:	b0a9      	sub	sp, #164	; 0xa4
   8aa7c:	4683      	mov	fp, r0
   8aa7e:	b19a      	cbz	r2, 8aaa8 <_svfprintf_r+0x40>
   8aa80:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8aa84:	b983      	cbnz	r3, 8aaa8 <_svfprintf_r+0x40>
   8aa86:	2140      	movs	r1, #64	; 0x40
   8aa88:	f000 fcfe 	bl	8b488 <_malloc_r>
   8aa8c:	f8c9 0000 	str.w	r0, [r9]
   8aa90:	f8c9 0010 	str.w	r0, [r9, #16]
   8aa94:	b928      	cbnz	r0, 8aaa2 <_svfprintf_r+0x3a>
   8aa96:	220c      	movs	r2, #12
   8aa98:	f8cb 2000 	str.w	r2, [fp]
   8aa9c:	f04f 30ff 	mov.w	r0, #4294967295
   8aaa0:	e3da      	b.n	8b258 <_svfprintf_r+0x7f0>
   8aaa2:	2040      	movs	r0, #64	; 0x40
   8aaa4:	f8c9 0014 	str.w	r0, [r9, #20]
   8aaa8:	2100      	movs	r1, #0
   8aaaa:	ad18      	add	r5, sp, #96	; 0x60
   8aaac:	950b      	str	r5, [sp, #44]	; 0x2c
   8aaae:	910d      	str	r1, [sp, #52]	; 0x34
   8aab0:	910c      	str	r1, [sp, #48]	; 0x30
   8aab2:	9401      	str	r4, [sp, #4]
   8aab4:	9105      	str	r1, [sp, #20]
   8aab6:	9104      	str	r1, [sp, #16]
   8aab8:	46a8      	mov	r8, r5
   8aaba:	9b01      	ldr	r3, [sp, #4]
   8aabc:	461c      	mov	r4, r3
   8aabe:	f813 2b01 	ldrb.w	r2, [r3], #1
   8aac2:	b91a      	cbnz	r2, 8aacc <_svfprintf_r+0x64>
   8aac4:	9801      	ldr	r0, [sp, #4]
   8aac6:	1a25      	subs	r5, r4, r0
   8aac8:	d103      	bne.n	8aad2 <_svfprintf_r+0x6a>
   8aaca:	e01d      	b.n	8ab08 <_svfprintf_r+0xa0>
   8aacc:	2a25      	cmp	r2, #37	; 0x25
   8aace:	d1f5      	bne.n	8aabc <_svfprintf_r+0x54>
   8aad0:	e7f8      	b.n	8aac4 <_svfprintf_r+0x5c>
   8aad2:	9a01      	ldr	r2, [sp, #4]
   8aad4:	990d      	ldr	r1, [sp, #52]	; 0x34
   8aad6:	e888 0024 	stmia.w	r8, {r2, r5}
   8aada:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8aadc:	194b      	adds	r3, r1, r5
   8aade:	1c50      	adds	r0, r2, #1
   8aae0:	2807      	cmp	r0, #7
   8aae2:	930d      	str	r3, [sp, #52]	; 0x34
   8aae4:	900c      	str	r0, [sp, #48]	; 0x30
   8aae6:	dc02      	bgt.n	8aaee <_svfprintf_r+0x86>
   8aae8:	f108 0808 	add.w	r8, r8, #8
   8aaec:	e009      	b.n	8ab02 <_svfprintf_r+0x9a>
   8aaee:	4658      	mov	r0, fp
   8aaf0:	4649      	mov	r1, r9
   8aaf2:	aa0b      	add	r2, sp, #44	; 0x2c
   8aaf4:	f001 f858 	bl	8bba8 <__ssprint_r>
   8aaf8:	2800      	cmp	r0, #0
   8aafa:	f040 83a2 	bne.w	8b242 <_svfprintf_r+0x7da>
   8aafe:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8ab02:	9904      	ldr	r1, [sp, #16]
   8ab04:	194b      	adds	r3, r1, r5
   8ab06:	9304      	str	r3, [sp, #16]
   8ab08:	7822      	ldrb	r2, [r4, #0]
   8ab0a:	2a00      	cmp	r2, #0
   8ab0c:	f000 8392 	beq.w	8b234 <_svfprintf_r+0x7cc>
   8ab10:	2200      	movs	r2, #0
   8ab12:	3401      	adds	r4, #1
   8ab14:	9401      	str	r4, [sp, #4]
   8ab16:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8ab1a:	f04f 3cff 	mov.w	ip, #4294967295
   8ab1e:	9203      	str	r2, [sp, #12]
   8ab20:	4617      	mov	r7, r2
   8ab22:	9801      	ldr	r0, [sp, #4]
   8ab24:	f810 3b01 	ldrb.w	r3, [r0], #1
   8ab28:	9001      	str	r0, [sp, #4]
   8ab2a:	2b63      	cmp	r3, #99	; 0x63
   8ab2c:	f000 80b3 	beq.w	8ac96 <_svfprintf_r+0x22e>
   8ab30:	dc33      	bgt.n	8ab9a <_svfprintf_r+0x132>
   8ab32:	2b39      	cmp	r3, #57	; 0x39
   8ab34:	dc1a      	bgt.n	8ab6c <_svfprintf_r+0x104>
   8ab36:	2b31      	cmp	r3, #49	; 0x31
   8ab38:	f280 8091 	bge.w	8ac5e <_svfprintf_r+0x1f6>
   8ab3c:	2b2b      	cmp	r3, #43	; 0x2b
   8ab3e:	d101      	bne.n	8ab44 <_svfprintf_r+0xdc>
   8ab40:	461a      	mov	r2, r3
   8ab42:	e7ee      	b.n	8ab22 <_svfprintf_r+0xba>
   8ab44:	dc0a      	bgt.n	8ab5c <_svfprintf_r+0xf4>
   8ab46:	2b23      	cmp	r3, #35	; 0x23
   8ab48:	d055      	beq.n	8abf6 <_svfprintf_r+0x18e>
   8ab4a:	2b2a      	cmp	r3, #42	; 0x2a
   8ab4c:	d056      	beq.n	8abfc <_svfprintf_r+0x194>
   8ab4e:	2b20      	cmp	r3, #32
   8ab50:	f040 81f5 	bne.w	8af3e <_svfprintf_r+0x4d6>
   8ab54:	2a00      	cmp	r2, #0
   8ab56:	bf08      	it	eq
   8ab58:	2220      	moveq	r2, #32
   8ab5a:	e7e2      	b.n	8ab22 <_svfprintf_r+0xba>
   8ab5c:	2b2e      	cmp	r3, #46	; 0x2e
   8ab5e:	d058      	beq.n	8ac12 <_svfprintf_r+0x1aa>
   8ab60:	2b30      	cmp	r3, #48	; 0x30
   8ab62:	d079      	beq.n	8ac58 <_svfprintf_r+0x1f0>
   8ab64:	2b2d      	cmp	r3, #45	; 0x2d
   8ab66:	f040 81ea 	bne.w	8af3e <_svfprintf_r+0x4d6>
   8ab6a:	e04f      	b.n	8ac0c <_svfprintf_r+0x1a4>
   8ab6c:	2b4f      	cmp	r3, #79	; 0x4f
   8ab6e:	f000 80de 	beq.w	8ad2e <_svfprintf_r+0x2c6>
   8ab72:	dc07      	bgt.n	8ab84 <_svfprintf_r+0x11c>
   8ab74:	2b44      	cmp	r3, #68	; 0x44
   8ab76:	f040 81e2 	bne.w	8af3e <_svfprintf_r+0x4d6>
   8ab7a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8ab7e:	f047 0710 	orr.w	r7, r7, #16
   8ab82:	e090      	b.n	8aca6 <_svfprintf_r+0x23e>
   8ab84:	2b55      	cmp	r3, #85	; 0x55
   8ab86:	f000 811f 	beq.w	8adc8 <_svfprintf_r+0x360>
   8ab8a:	2b58      	cmp	r3, #88	; 0x58
   8ab8c:	f040 81d7 	bne.w	8af3e <_svfprintf_r+0x4d6>
   8ab90:	4dae      	ldr	r5, [pc, #696]	; (8ae4c <_svfprintf_r+0x3e4>)
   8ab92:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8ab96:	9505      	str	r5, [sp, #20]
   8ab98:	e130      	b.n	8adfc <_svfprintf_r+0x394>
   8ab9a:	2b6f      	cmp	r3, #111	; 0x6f
   8ab9c:	f000 80c9 	beq.w	8ad32 <_svfprintf_r+0x2ca>
   8aba0:	dc10      	bgt.n	8abc4 <_svfprintf_r+0x15c>
   8aba2:	2b69      	cmp	r3, #105	; 0x69
   8aba4:	d024      	beq.n	8abf0 <_svfprintf_r+0x188>
   8aba6:	dc07      	bgt.n	8abb8 <_svfprintf_r+0x150>
   8aba8:	2b64      	cmp	r3, #100	; 0x64
   8abaa:	d021      	beq.n	8abf0 <_svfprintf_r+0x188>
   8abac:	2b68      	cmp	r3, #104	; 0x68
   8abae:	f040 81c6 	bne.w	8af3e <_svfprintf_r+0x4d6>
   8abb2:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   8abb6:	e7b4      	b.n	8ab22 <_svfprintf_r+0xba>
   8abb8:	2b6c      	cmp	r3, #108	; 0x6c
   8abba:	d05f      	beq.n	8ac7c <_svfprintf_r+0x214>
   8abbc:	2b6e      	cmp	r3, #110	; 0x6e
   8abbe:	f040 81be 	bne.w	8af3e <_svfprintf_r+0x4d6>
   8abc2:	e096      	b.n	8acf2 <_svfprintf_r+0x28a>
   8abc4:	2b73      	cmp	r3, #115	; 0x73
   8abc6:	f000 80df 	beq.w	8ad88 <_svfprintf_r+0x320>
   8abca:	dc06      	bgt.n	8abda <_svfprintf_r+0x172>
   8abcc:	2b70      	cmp	r3, #112	; 0x70
   8abce:	f000 80cd 	beq.w	8ad6c <_svfprintf_r+0x304>
   8abd2:	2b71      	cmp	r3, #113	; 0x71
   8abd4:	f040 81b3 	bne.w	8af3e <_svfprintf_r+0x4d6>
   8abd8:	e05a      	b.n	8ac90 <_svfprintf_r+0x228>
   8abda:	2b75      	cmp	r3, #117	; 0x75
   8abdc:	f000 80f6 	beq.w	8adcc <_svfprintf_r+0x364>
   8abe0:	2b78      	cmp	r3, #120	; 0x78
   8abe2:	f040 81ac 	bne.w	8af3e <_svfprintf_r+0x4d6>
   8abe6:	4d9a      	ldr	r5, [pc, #616]	; (8ae50 <_svfprintf_r+0x3e8>)
   8abe8:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8abec:	9505      	str	r5, [sp, #20]
   8abee:	e105      	b.n	8adfc <_svfprintf_r+0x394>
   8abf0:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8abf4:	e057      	b.n	8aca6 <_svfprintf_r+0x23e>
   8abf6:	f047 0701 	orr.w	r7, r7, #1
   8abfa:	e792      	b.n	8ab22 <_svfprintf_r+0xba>
   8abfc:	1d33      	adds	r3, r6, #4
   8abfe:	6836      	ldr	r6, [r6, #0]
   8ac00:	2e00      	cmp	r6, #0
   8ac02:	9603      	str	r6, [sp, #12]
   8ac04:	da15      	bge.n	8ac32 <_svfprintf_r+0x1ca>
   8ac06:	4270      	negs	r0, r6
   8ac08:	9003      	str	r0, [sp, #12]
   8ac0a:	461e      	mov	r6, r3
   8ac0c:	f047 0704 	orr.w	r7, r7, #4
   8ac10:	e787      	b.n	8ab22 <_svfprintf_r+0xba>
   8ac12:	9901      	ldr	r1, [sp, #4]
   8ac14:	f811 3b01 	ldrb.w	r3, [r1], #1
   8ac18:	2b2a      	cmp	r3, #42	; 0x2a
   8ac1a:	9101      	str	r1, [sp, #4]
   8ac1c:	d10b      	bne.n	8ac36 <_svfprintf_r+0x1ce>
   8ac1e:	f8d6 c000 	ldr.w	ip, [r6]
   8ac22:	1d33      	adds	r3, r6, #4
   8ac24:	f1bc 0f00 	cmp.w	ip, #0
   8ac28:	da03      	bge.n	8ac32 <_svfprintf_r+0x1ca>
   8ac2a:	461e      	mov	r6, r3
   8ac2c:	f04f 3cff 	mov.w	ip, #4294967295
   8ac30:	e777      	b.n	8ab22 <_svfprintf_r+0xba>
   8ac32:	461e      	mov	r6, r3
   8ac34:	e775      	b.n	8ab22 <_svfprintf_r+0xba>
   8ac36:	f04f 0c00 	mov.w	ip, #0
   8ac3a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8ac3e:	2809      	cmp	r0, #9
   8ac40:	d807      	bhi.n	8ac52 <_svfprintf_r+0x1ea>
   8ac42:	9901      	ldr	r1, [sp, #4]
   8ac44:	230a      	movs	r3, #10
   8ac46:	fb03 0c0c 	mla	ip, r3, ip, r0
   8ac4a:	f811 3b01 	ldrb.w	r3, [r1], #1
   8ac4e:	9101      	str	r1, [sp, #4]
   8ac50:	e7f3      	b.n	8ac3a <_svfprintf_r+0x1d2>
   8ac52:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   8ac56:	e768      	b.n	8ab2a <_svfprintf_r+0xc2>
   8ac58:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8ac5c:	e761      	b.n	8ab22 <_svfprintf_r+0xba>
   8ac5e:	9801      	ldr	r0, [sp, #4]
   8ac60:	2100      	movs	r1, #0
   8ac62:	3b30      	subs	r3, #48	; 0x30
   8ac64:	240a      	movs	r4, #10
   8ac66:	fb04 3101 	mla	r1, r4, r1, r3
   8ac6a:	f810 3b01 	ldrb.w	r3, [r0], #1
   8ac6e:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   8ac72:	2c09      	cmp	r4, #9
   8ac74:	9001      	str	r0, [sp, #4]
   8ac76:	d9f4      	bls.n	8ac62 <_svfprintf_r+0x1fa>
   8ac78:	9103      	str	r1, [sp, #12]
   8ac7a:	e756      	b.n	8ab2a <_svfprintf_r+0xc2>
   8ac7c:	9901      	ldr	r1, [sp, #4]
   8ac7e:	780b      	ldrb	r3, [r1, #0]
   8ac80:	2b6c      	cmp	r3, #108	; 0x6c
   8ac82:	d102      	bne.n	8ac8a <_svfprintf_r+0x222>
   8ac84:	1c48      	adds	r0, r1, #1
   8ac86:	9001      	str	r0, [sp, #4]
   8ac88:	e002      	b.n	8ac90 <_svfprintf_r+0x228>
   8ac8a:	f047 0710 	orr.w	r7, r7, #16
   8ac8e:	e748      	b.n	8ab22 <_svfprintf_r+0xba>
   8ac90:	f047 0720 	orr.w	r7, r7, #32
   8ac94:	e745      	b.n	8ab22 <_svfprintf_r+0xba>
   8ac96:	6832      	ldr	r2, [r6, #0]
   8ac98:	2500      	movs	r5, #0
   8ac9a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   8ac9e:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8aca2:	3604      	adds	r6, #4
   8aca4:	e155      	b.n	8af52 <_svfprintf_r+0x4ea>
   8aca6:	06ba      	lsls	r2, r7, #26
   8aca8:	d507      	bpl.n	8acba <_svfprintf_r+0x252>
   8acaa:	3607      	adds	r6, #7
   8acac:	f026 0507 	bic.w	r5, r6, #7
   8acb0:	f105 0608 	add.w	r6, r5, #8
   8acb4:	e9d5 4500 	ldrd	r4, r5, [r5]
   8acb8:	e00f      	b.n	8acda <_svfprintf_r+0x272>
   8acba:	f017 0f10 	tst.w	r7, #16
   8acbe:	f106 0104 	add.w	r1, r6, #4
   8acc2:	d001      	beq.n	8acc8 <_svfprintf_r+0x260>
   8acc4:	6832      	ldr	r2, [r6, #0]
   8acc6:	e005      	b.n	8acd4 <_svfprintf_r+0x26c>
   8acc8:	f017 0f40 	tst.w	r7, #64	; 0x40
   8accc:	6832      	ldr	r2, [r6, #0]
   8acce:	d001      	beq.n	8acd4 <_svfprintf_r+0x26c>
   8acd0:	b214      	sxth	r4, r2
   8acd2:	e000      	b.n	8acd6 <_svfprintf_r+0x26e>
   8acd4:	4614      	mov	r4, r2
   8acd6:	17e5      	asrs	r5, r4, #31
   8acd8:	460e      	mov	r6, r1
   8acda:	2c00      	cmp	r4, #0
   8acdc:	f175 0200 	sbcs.w	r2, r5, #0
   8ace0:	f280 80b8 	bge.w	8ae54 <_svfprintf_r+0x3ec>
   8ace4:	232d      	movs	r3, #45	; 0x2d
   8ace6:	4264      	negs	r4, r4
   8ace8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8acec:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   8acf0:	e0b0      	b.n	8ae54 <_svfprintf_r+0x3ec>
   8acf2:	f017 0f20 	tst.w	r7, #32
   8acf6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8acfa:	f106 0204 	add.w	r2, r6, #4
   8acfe:	d005      	beq.n	8ad0c <_svfprintf_r+0x2a4>
   8ad00:	9c04      	ldr	r4, [sp, #16]
   8ad02:	6835      	ldr	r5, [r6, #0]
   8ad04:	17e0      	asrs	r0, r4, #31
   8ad06:	602c      	str	r4, [r5, #0]
   8ad08:	6068      	str	r0, [r5, #4]
   8ad0a:	e004      	b.n	8ad16 <_svfprintf_r+0x2ae>
   8ad0c:	06fb      	lsls	r3, r7, #27
   8ad0e:	d504      	bpl.n	8ad1a <_svfprintf_r+0x2b2>
   8ad10:	6833      	ldr	r3, [r6, #0]
   8ad12:	9904      	ldr	r1, [sp, #16]
   8ad14:	6019      	str	r1, [r3, #0]
   8ad16:	4616      	mov	r6, r2
   8ad18:	e6cf      	b.n	8aaba <_svfprintf_r+0x52>
   8ad1a:	6830      	ldr	r0, [r6, #0]
   8ad1c:	9c04      	ldr	r4, [sp, #16]
   8ad1e:	f017 0f40 	tst.w	r7, #64	; 0x40
   8ad22:	f106 0604 	add.w	r6, r6, #4
   8ad26:	bf14      	ite	ne
   8ad28:	8004      	strhne	r4, [r0, #0]
   8ad2a:	6004      	streq	r4, [r0, #0]
   8ad2c:	e6c5      	b.n	8aaba <_svfprintf_r+0x52>
   8ad2e:	f047 0710 	orr.w	r7, r7, #16
   8ad32:	f017 0020 	ands.w	r0, r7, #32
   8ad36:	d008      	beq.n	8ad4a <_svfprintf_r+0x2e2>
   8ad38:	1df3      	adds	r3, r6, #7
   8ad3a:	f023 0507 	bic.w	r5, r3, #7
   8ad3e:	f105 0608 	add.w	r6, r5, #8
   8ad42:	e9d5 4500 	ldrd	r4, r5, [r5]
   8ad46:	2000      	movs	r0, #0
   8ad48:	e07c      	b.n	8ae44 <_svfprintf_r+0x3dc>
   8ad4a:	f017 0110 	ands.w	r1, r7, #16
   8ad4e:	f106 0204 	add.w	r2, r6, #4
   8ad52:	d106      	bne.n	8ad62 <_svfprintf_r+0x2fa>
   8ad54:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   8ad58:	d003      	beq.n	8ad62 <_svfprintf_r+0x2fa>
   8ad5a:	8834      	ldrh	r4, [r6, #0]
   8ad5c:	2500      	movs	r5, #0
   8ad5e:	4616      	mov	r6, r2
   8ad60:	e7f1      	b.n	8ad46 <_svfprintf_r+0x2de>
   8ad62:	6836      	ldr	r6, [r6, #0]
   8ad64:	2500      	movs	r5, #0
   8ad66:	4634      	mov	r4, r6
   8ad68:	4616      	mov	r6, r2
   8ad6a:	e06b      	b.n	8ae44 <_svfprintf_r+0x3dc>
   8ad6c:	4b38      	ldr	r3, [pc, #224]	; (8ae50 <_svfprintf_r+0x3e8>)
   8ad6e:	2130      	movs	r1, #48	; 0x30
   8ad70:	2278      	movs	r2, #120	; 0x78
   8ad72:	6834      	ldr	r4, [r6, #0]
   8ad74:	2500      	movs	r5, #0
   8ad76:	f047 0702 	orr.w	r7, r7, #2
   8ad7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   8ad7e:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   8ad82:	3604      	adds	r6, #4
   8ad84:	9305      	str	r3, [sp, #20]
   8ad86:	e05c      	b.n	8ae42 <_svfprintf_r+0x3da>
   8ad88:	4631      	mov	r1, r6
   8ad8a:	2500      	movs	r5, #0
   8ad8c:	f8d1 a000 	ldr.w	sl, [r1]
   8ad90:	3604      	adds	r6, #4
   8ad92:	45ac      	cmp	ip, r5
   8ad94:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8ad98:	4650      	mov	r0, sl
   8ad9a:	db11      	blt.n	8adc0 <_svfprintf_r+0x358>
   8ad9c:	4662      	mov	r2, ip
   8ad9e:	4629      	mov	r1, r5
   8ada0:	f8cd c000 	str.w	ip, [sp]
   8ada4:	f000 fd72 	bl	8b88c <memchr>
   8ada8:	f8dd c000 	ldr.w	ip, [sp]
   8adac:	2800      	cmp	r0, #0
   8adae:	f000 80d4 	beq.w	8af5a <_svfprintf_r+0x4f2>
   8adb2:	ebca 0400 	rsb	r4, sl, r0
   8adb6:	4564      	cmp	r4, ip
   8adb8:	f340 80d1 	ble.w	8af5e <_svfprintf_r+0x4f6>
   8adbc:	4664      	mov	r4, ip
   8adbe:	e0ce      	b.n	8af5e <_svfprintf_r+0x4f6>
   8adc0:	f7ff fd70 	bl	8a8a4 <strlen>
   8adc4:	4604      	mov	r4, r0
   8adc6:	e0ca      	b.n	8af5e <_svfprintf_r+0x4f6>
   8adc8:	f047 0710 	orr.w	r7, r7, #16
   8adcc:	06bd      	lsls	r5, r7, #26
   8adce:	d506      	bpl.n	8adde <_svfprintf_r+0x376>
   8add0:	1df0      	adds	r0, r6, #7
   8add2:	f020 0407 	bic.w	r4, r0, #7
   8add6:	f104 0608 	add.w	r6, r4, #8
   8adda:	cc30      	ldmia	r4, {r4, r5}
   8addc:	e00c      	b.n	8adf8 <_svfprintf_r+0x390>
   8adde:	f017 0f10 	tst.w	r7, #16
   8ade2:	f106 0304 	add.w	r3, r6, #4
   8ade6:	d103      	bne.n	8adf0 <_svfprintf_r+0x388>
   8ade8:	067c      	lsls	r4, r7, #25
   8adea:	d501      	bpl.n	8adf0 <_svfprintf_r+0x388>
   8adec:	8834      	ldrh	r4, [r6, #0]
   8adee:	e001      	b.n	8adf4 <_svfprintf_r+0x38c>
   8adf0:	6835      	ldr	r5, [r6, #0]
   8adf2:	462c      	mov	r4, r5
   8adf4:	2500      	movs	r5, #0
   8adf6:	461e      	mov	r6, r3
   8adf8:	2001      	movs	r0, #1
   8adfa:	e023      	b.n	8ae44 <_svfprintf_r+0x3dc>
   8adfc:	06b8      	lsls	r0, r7, #26
   8adfe:	d507      	bpl.n	8ae10 <_svfprintf_r+0x3a8>
   8ae00:	1df4      	adds	r4, r6, #7
   8ae02:	f024 0107 	bic.w	r1, r4, #7
   8ae06:	f101 0608 	add.w	r6, r1, #8
   8ae0a:	e9d1 4500 	ldrd	r4, r5, [r1]
   8ae0e:	e00c      	b.n	8ae2a <_svfprintf_r+0x3c2>
   8ae10:	f017 0f10 	tst.w	r7, #16
   8ae14:	f106 0004 	add.w	r0, r6, #4
   8ae18:	d103      	bne.n	8ae22 <_svfprintf_r+0x3ba>
   8ae1a:	0679      	lsls	r1, r7, #25
   8ae1c:	d501      	bpl.n	8ae22 <_svfprintf_r+0x3ba>
   8ae1e:	8834      	ldrh	r4, [r6, #0]
   8ae20:	e001      	b.n	8ae26 <_svfprintf_r+0x3be>
   8ae22:	6836      	ldr	r6, [r6, #0]
   8ae24:	4634      	mov	r4, r6
   8ae26:	2500      	movs	r5, #0
   8ae28:	4606      	mov	r6, r0
   8ae2a:	07fa      	lsls	r2, r7, #31
   8ae2c:	d509      	bpl.n	8ae42 <_svfprintf_r+0x3da>
   8ae2e:	ea54 0205 	orrs.w	r2, r4, r5
   8ae32:	d006      	beq.n	8ae42 <_svfprintf_r+0x3da>
   8ae34:	2230      	movs	r2, #48	; 0x30
   8ae36:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   8ae3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   8ae3e:	f047 0702 	orr.w	r7, r7, #2
   8ae42:	2002      	movs	r0, #2
   8ae44:	2100      	movs	r1, #0
   8ae46:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   8ae4a:	e004      	b.n	8ae56 <_svfprintf_r+0x3ee>
   8ae4c:	0008d892 	.word	0x0008d892
   8ae50:	0008d8a3 	.word	0x0008d8a3
   8ae54:	2001      	movs	r0, #1
   8ae56:	f1bc 0f00 	cmp.w	ip, #0
   8ae5a:	bfa8      	it	ge
   8ae5c:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   8ae60:	ea54 0105 	orrs.w	r1, r4, r5
   8ae64:	d102      	bne.n	8ae6c <_svfprintf_r+0x404>
   8ae66:	f1bc 0f00 	cmp.w	ip, #0
   8ae6a:	d058      	beq.n	8af1e <_svfprintf_r+0x4b6>
   8ae6c:	2801      	cmp	r0, #1
   8ae6e:	d01d      	beq.n	8aeac <_svfprintf_r+0x444>
   8ae70:	2802      	cmp	r0, #2
   8ae72:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8ae76:	d041      	beq.n	8aefc <_svfprintf_r+0x494>
   8ae78:	f004 0207 	and.w	r2, r4, #7
   8ae7c:	08e4      	lsrs	r4, r4, #3
   8ae7e:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   8ae82:	08e9      	lsrs	r1, r5, #3
   8ae84:	4604      	mov	r4, r0
   8ae86:	460d      	mov	r5, r1
   8ae88:	3230      	adds	r2, #48	; 0x30
   8ae8a:	ea54 0105 	orrs.w	r1, r4, r5
   8ae8e:	469a      	mov	sl, r3
   8ae90:	701a      	strb	r2, [r3, #0]
   8ae92:	f103 33ff 	add.w	r3, r3, #4294967295
   8ae96:	d1ef      	bne.n	8ae78 <_svfprintf_r+0x410>
   8ae98:	07f8      	lsls	r0, r7, #31
   8ae9a:	4655      	mov	r5, sl
   8ae9c:	d54a      	bpl.n	8af34 <_svfprintf_r+0x4cc>
   8ae9e:	2a30      	cmp	r2, #48	; 0x30
   8aea0:	d048      	beq.n	8af34 <_svfprintf_r+0x4cc>
   8aea2:	2230      	movs	r2, #48	; 0x30
   8aea4:	469a      	mov	sl, r3
   8aea6:	f805 2c01 	strb.w	r2, [r5, #-1]
   8aeaa:	e043      	b.n	8af34 <_svfprintf_r+0x4cc>
   8aeac:	2d00      	cmp	r5, #0
   8aeae:	bf08      	it	eq
   8aeb0:	2c0a      	cmpeq	r4, #10
   8aeb2:	d203      	bcs.n	8aebc <_svfprintf_r+0x454>
   8aeb4:	3430      	adds	r4, #48	; 0x30
   8aeb6:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   8aeba:	e036      	b.n	8af2a <_svfprintf_r+0x4c2>
   8aebc:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8aec0:	9302      	str	r3, [sp, #8]
   8aec2:	4620      	mov	r0, r4
   8aec4:	4629      	mov	r1, r5
   8aec6:	220a      	movs	r2, #10
   8aec8:	2300      	movs	r3, #0
   8aeca:	f8cd c000 	str.w	ip, [sp]
   8aece:	f001 fae5 	bl	8c49c <__aeabi_uldivmod>
   8aed2:	9802      	ldr	r0, [sp, #8]
   8aed4:	3230      	adds	r2, #48	; 0x30
   8aed6:	f800 2901 	strb.w	r2, [r0], #-1
   8aeda:	4629      	mov	r1, r5
   8aedc:	220a      	movs	r2, #10
   8aede:	2300      	movs	r3, #0
   8aee0:	f8dd a008 	ldr.w	sl, [sp, #8]
   8aee4:	9002      	str	r0, [sp, #8]
   8aee6:	4620      	mov	r0, r4
   8aee8:	f001 fad8 	bl	8c49c <__aeabi_uldivmod>
   8aeec:	4604      	mov	r4, r0
   8aeee:	460d      	mov	r5, r1
   8aef0:	ea54 0105 	orrs.w	r1, r4, r5
   8aef4:	f8dd c000 	ldr.w	ip, [sp]
   8aef8:	d1e3      	bne.n	8aec2 <_svfprintf_r+0x45a>
   8aefa:	e01b      	b.n	8af34 <_svfprintf_r+0x4cc>
   8aefc:	9905      	ldr	r1, [sp, #20]
   8aefe:	f004 000f 	and.w	r0, r4, #15
   8af02:	0924      	lsrs	r4, r4, #4
   8af04:	5c0a      	ldrb	r2, [r1, r0]
   8af06:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   8af0a:	0929      	lsrs	r1, r5, #4
   8af0c:	4604      	mov	r4, r0
   8af0e:	460d      	mov	r5, r1
   8af10:	469a      	mov	sl, r3
   8af12:	f803 2901 	strb.w	r2, [r3], #-1
   8af16:	ea54 0205 	orrs.w	r2, r4, r5
   8af1a:	d1ef      	bne.n	8aefc <_svfprintf_r+0x494>
   8af1c:	e00a      	b.n	8af34 <_svfprintf_r+0x4cc>
   8af1e:	b938      	cbnz	r0, 8af30 <_svfprintf_r+0x4c8>
   8af20:	07f9      	lsls	r1, r7, #31
   8af22:	d505      	bpl.n	8af30 <_svfprintf_r+0x4c8>
   8af24:	2030      	movs	r0, #48	; 0x30
   8af26:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   8af2a:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   8af2e:	e001      	b.n	8af34 <_svfprintf_r+0x4cc>
   8af30:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   8af34:	ad18      	add	r5, sp, #96	; 0x60
   8af36:	ebca 0405 	rsb	r4, sl, r5
   8af3a:	4665      	mov	r5, ip
   8af3c:	e00f      	b.n	8af5e <_svfprintf_r+0x4f6>
   8af3e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8af42:	2b00      	cmp	r3, #0
   8af44:	f000 8176 	beq.w	8b234 <_svfprintf_r+0x7cc>
   8af48:	2500      	movs	r5, #0
   8af4a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   8af4e:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8af52:	2401      	movs	r4, #1
   8af54:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   8af58:	e001      	b.n	8af5e <_svfprintf_r+0x4f6>
   8af5a:	4664      	mov	r4, ip
   8af5c:	4605      	mov	r5, r0
   8af5e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8af62:	42ac      	cmp	r4, r5
   8af64:	bfac      	ite	ge
   8af66:	4621      	movge	r1, r4
   8af68:	4629      	movlt	r1, r5
   8af6a:	9102      	str	r1, [sp, #8]
   8af6c:	b113      	cbz	r3, 8af74 <_svfprintf_r+0x50c>
   8af6e:	9802      	ldr	r0, [sp, #8]
   8af70:	1c42      	adds	r2, r0, #1
   8af72:	9202      	str	r2, [sp, #8]
   8af74:	f017 0102 	ands.w	r1, r7, #2
   8af78:	9106      	str	r1, [sp, #24]
   8af7a:	d002      	beq.n	8af82 <_svfprintf_r+0x51a>
   8af7c:	9b02      	ldr	r3, [sp, #8]
   8af7e:	1c98      	adds	r0, r3, #2
   8af80:	9002      	str	r0, [sp, #8]
   8af82:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   8af86:	9207      	str	r2, [sp, #28]
   8af88:	d13c      	bne.n	8b004 <_svfprintf_r+0x59c>
   8af8a:	9903      	ldr	r1, [sp, #12]
   8af8c:	9b02      	ldr	r3, [sp, #8]
   8af8e:	1acb      	subs	r3, r1, r3
   8af90:	2b00      	cmp	r3, #0
   8af92:	dd37      	ble.n	8b004 <_svfprintf_r+0x59c>
   8af94:	48a5      	ldr	r0, [pc, #660]	; (8b22c <_svfprintf_r+0x7c4>)
   8af96:	2b10      	cmp	r3, #16
   8af98:	f8c8 0000 	str.w	r0, [r8]
   8af9c:	dd1b      	ble.n	8afd6 <_svfprintf_r+0x56e>
   8af9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8afa0:	2110      	movs	r1, #16
   8afa2:	980d      	ldr	r0, [sp, #52]	; 0x34
   8afa4:	f8c8 1004 	str.w	r1, [r8, #4]
   8afa8:	1c51      	adds	r1, r2, #1
   8afaa:	3010      	adds	r0, #16
   8afac:	2907      	cmp	r1, #7
   8afae:	900d      	str	r0, [sp, #52]	; 0x34
   8afb0:	910c      	str	r1, [sp, #48]	; 0x30
   8afb2:	dc02      	bgt.n	8afba <_svfprintf_r+0x552>
   8afb4:	f108 0808 	add.w	r8, r8, #8
   8afb8:	e00b      	b.n	8afd2 <_svfprintf_r+0x56a>
   8afba:	4658      	mov	r0, fp
   8afbc:	4649      	mov	r1, r9
   8afbe:	aa0b      	add	r2, sp, #44	; 0x2c
   8afc0:	9300      	str	r3, [sp, #0]
   8afc2:	f000 fdf1 	bl	8bba8 <__ssprint_r>
   8afc6:	9b00      	ldr	r3, [sp, #0]
   8afc8:	2800      	cmp	r0, #0
   8afca:	f040 813a 	bne.w	8b242 <_svfprintf_r+0x7da>
   8afce:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8afd2:	3b10      	subs	r3, #16
   8afd4:	e7de      	b.n	8af94 <_svfprintf_r+0x52c>
   8afd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8afd8:	f8c8 3004 	str.w	r3, [r8, #4]
   8afdc:	18d1      	adds	r1, r2, r3
   8afde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8afe0:	910d      	str	r1, [sp, #52]	; 0x34
   8afe2:	1c58      	adds	r0, r3, #1
   8afe4:	2807      	cmp	r0, #7
   8afe6:	900c      	str	r0, [sp, #48]	; 0x30
   8afe8:	dc02      	bgt.n	8aff0 <_svfprintf_r+0x588>
   8afea:	f108 0808 	add.w	r8, r8, #8
   8afee:	e009      	b.n	8b004 <_svfprintf_r+0x59c>
   8aff0:	4658      	mov	r0, fp
   8aff2:	4649      	mov	r1, r9
   8aff4:	aa0b      	add	r2, sp, #44	; 0x2c
   8aff6:	f000 fdd7 	bl	8bba8 <__ssprint_r>
   8affa:	2800      	cmp	r0, #0
   8affc:	f040 8121 	bne.w	8b242 <_svfprintf_r+0x7da>
   8b000:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b004:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   8b008:	b1da      	cbz	r2, 8b042 <_svfprintf_r+0x5da>
   8b00a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   8b00e:	f8c8 1000 	str.w	r1, [r8]
   8b012:	990c      	ldr	r1, [sp, #48]	; 0x30
   8b014:	2301      	movs	r3, #1
   8b016:	980d      	ldr	r0, [sp, #52]	; 0x34
   8b018:	f8c8 3004 	str.w	r3, [r8, #4]
   8b01c:	1c4b      	adds	r3, r1, #1
   8b01e:	1c42      	adds	r2, r0, #1
   8b020:	2b07      	cmp	r3, #7
   8b022:	920d      	str	r2, [sp, #52]	; 0x34
   8b024:	930c      	str	r3, [sp, #48]	; 0x30
   8b026:	dc02      	bgt.n	8b02e <_svfprintf_r+0x5c6>
   8b028:	f108 0808 	add.w	r8, r8, #8
   8b02c:	e009      	b.n	8b042 <_svfprintf_r+0x5da>
   8b02e:	4658      	mov	r0, fp
   8b030:	4649      	mov	r1, r9
   8b032:	aa0b      	add	r2, sp, #44	; 0x2c
   8b034:	f000 fdb8 	bl	8bba8 <__ssprint_r>
   8b038:	2800      	cmp	r0, #0
   8b03a:	f040 8102 	bne.w	8b242 <_svfprintf_r+0x7da>
   8b03e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b042:	9806      	ldr	r0, [sp, #24]
   8b044:	b1d0      	cbz	r0, 8b07c <_svfprintf_r+0x614>
   8b046:	aa0a      	add	r2, sp, #40	; 0x28
   8b048:	f8c8 2000 	str.w	r2, [r8]
   8b04c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8b04e:	2102      	movs	r1, #2
   8b050:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8b052:	f8c8 1004 	str.w	r1, [r8, #4]
   8b056:	1c51      	adds	r1, r2, #1
   8b058:	1c98      	adds	r0, r3, #2
   8b05a:	2907      	cmp	r1, #7
   8b05c:	900d      	str	r0, [sp, #52]	; 0x34
   8b05e:	910c      	str	r1, [sp, #48]	; 0x30
   8b060:	dc02      	bgt.n	8b068 <_svfprintf_r+0x600>
   8b062:	f108 0808 	add.w	r8, r8, #8
   8b066:	e009      	b.n	8b07c <_svfprintf_r+0x614>
   8b068:	4658      	mov	r0, fp
   8b06a:	4649      	mov	r1, r9
   8b06c:	aa0b      	add	r2, sp, #44	; 0x2c
   8b06e:	f000 fd9b 	bl	8bba8 <__ssprint_r>
   8b072:	2800      	cmp	r0, #0
   8b074:	f040 80e5 	bne.w	8b242 <_svfprintf_r+0x7da>
   8b078:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b07c:	9b07      	ldr	r3, [sp, #28]
   8b07e:	2b80      	cmp	r3, #128	; 0x80
   8b080:	d13c      	bne.n	8b0fc <_svfprintf_r+0x694>
   8b082:	9803      	ldr	r0, [sp, #12]
   8b084:	9a02      	ldr	r2, [sp, #8]
   8b086:	1a83      	subs	r3, r0, r2
   8b088:	2b00      	cmp	r3, #0
   8b08a:	dd37      	ble.n	8b0fc <_svfprintf_r+0x694>
   8b08c:	4968      	ldr	r1, [pc, #416]	; (8b230 <_svfprintf_r+0x7c8>)
   8b08e:	2b10      	cmp	r3, #16
   8b090:	f8c8 1000 	str.w	r1, [r8]
   8b094:	dd1b      	ble.n	8b0ce <_svfprintf_r+0x666>
   8b096:	980c      	ldr	r0, [sp, #48]	; 0x30
   8b098:	2210      	movs	r2, #16
   8b09a:	990d      	ldr	r1, [sp, #52]	; 0x34
   8b09c:	f8c8 2004 	str.w	r2, [r8, #4]
   8b0a0:	1c42      	adds	r2, r0, #1
   8b0a2:	3110      	adds	r1, #16
   8b0a4:	2a07      	cmp	r2, #7
   8b0a6:	910d      	str	r1, [sp, #52]	; 0x34
   8b0a8:	920c      	str	r2, [sp, #48]	; 0x30
   8b0aa:	dc02      	bgt.n	8b0b2 <_svfprintf_r+0x64a>
   8b0ac:	f108 0808 	add.w	r8, r8, #8
   8b0b0:	e00b      	b.n	8b0ca <_svfprintf_r+0x662>
   8b0b2:	4658      	mov	r0, fp
   8b0b4:	4649      	mov	r1, r9
   8b0b6:	aa0b      	add	r2, sp, #44	; 0x2c
   8b0b8:	9300      	str	r3, [sp, #0]
   8b0ba:	f000 fd75 	bl	8bba8 <__ssprint_r>
   8b0be:	9b00      	ldr	r3, [sp, #0]
   8b0c0:	2800      	cmp	r0, #0
   8b0c2:	f040 80be 	bne.w	8b242 <_svfprintf_r+0x7da>
   8b0c6:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b0ca:	3b10      	subs	r3, #16
   8b0cc:	e7de      	b.n	8b08c <_svfprintf_r+0x624>
   8b0ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8b0d0:	980d      	ldr	r0, [sp, #52]	; 0x34
   8b0d2:	1c51      	adds	r1, r2, #1
   8b0d4:	f8c8 3004 	str.w	r3, [r8, #4]
   8b0d8:	2907      	cmp	r1, #7
   8b0da:	4403      	add	r3, r0
   8b0dc:	930d      	str	r3, [sp, #52]	; 0x34
   8b0de:	910c      	str	r1, [sp, #48]	; 0x30
   8b0e0:	dc02      	bgt.n	8b0e8 <_svfprintf_r+0x680>
   8b0e2:	f108 0808 	add.w	r8, r8, #8
   8b0e6:	e009      	b.n	8b0fc <_svfprintf_r+0x694>
   8b0e8:	4658      	mov	r0, fp
   8b0ea:	4649      	mov	r1, r9
   8b0ec:	aa0b      	add	r2, sp, #44	; 0x2c
   8b0ee:	f000 fd5b 	bl	8bba8 <__ssprint_r>
   8b0f2:	2800      	cmp	r0, #0
   8b0f4:	f040 80a5 	bne.w	8b242 <_svfprintf_r+0x7da>
   8b0f8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b0fc:	1b2d      	subs	r5, r5, r4
   8b0fe:	2d00      	cmp	r5, #0
   8b100:	dd34      	ble.n	8b16c <_svfprintf_r+0x704>
   8b102:	484b      	ldr	r0, [pc, #300]	; (8b230 <_svfprintf_r+0x7c8>)
   8b104:	2d10      	cmp	r5, #16
   8b106:	f8c8 0000 	str.w	r0, [r8]
   8b10a:	dd19      	ble.n	8b140 <_svfprintf_r+0x6d8>
   8b10c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8b10e:	990d      	ldr	r1, [sp, #52]	; 0x34
   8b110:	1c43      	adds	r3, r0, #1
   8b112:	2210      	movs	r2, #16
   8b114:	3110      	adds	r1, #16
   8b116:	2b07      	cmp	r3, #7
   8b118:	f8c8 2004 	str.w	r2, [r8, #4]
   8b11c:	910d      	str	r1, [sp, #52]	; 0x34
   8b11e:	930c      	str	r3, [sp, #48]	; 0x30
   8b120:	dc02      	bgt.n	8b128 <_svfprintf_r+0x6c0>
   8b122:	f108 0808 	add.w	r8, r8, #8
   8b126:	e009      	b.n	8b13c <_svfprintf_r+0x6d4>
   8b128:	4658      	mov	r0, fp
   8b12a:	4649      	mov	r1, r9
   8b12c:	aa0b      	add	r2, sp, #44	; 0x2c
   8b12e:	f000 fd3b 	bl	8bba8 <__ssprint_r>
   8b132:	2800      	cmp	r0, #0
   8b134:	f040 8085 	bne.w	8b242 <_svfprintf_r+0x7da>
   8b138:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b13c:	3d10      	subs	r5, #16
   8b13e:	e7e0      	b.n	8b102 <_svfprintf_r+0x69a>
   8b140:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8b142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8b144:	1c51      	adds	r1, r2, #1
   8b146:	f8c8 5004 	str.w	r5, [r8, #4]
   8b14a:	2907      	cmp	r1, #7
   8b14c:	441d      	add	r5, r3
   8b14e:	950d      	str	r5, [sp, #52]	; 0x34
   8b150:	910c      	str	r1, [sp, #48]	; 0x30
   8b152:	dc02      	bgt.n	8b15a <_svfprintf_r+0x6f2>
   8b154:	f108 0808 	add.w	r8, r8, #8
   8b158:	e008      	b.n	8b16c <_svfprintf_r+0x704>
   8b15a:	4658      	mov	r0, fp
   8b15c:	4649      	mov	r1, r9
   8b15e:	aa0b      	add	r2, sp, #44	; 0x2c
   8b160:	f000 fd22 	bl	8bba8 <__ssprint_r>
   8b164:	2800      	cmp	r0, #0
   8b166:	d16c      	bne.n	8b242 <_svfprintf_r+0x7da>
   8b168:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b16c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8b16e:	980d      	ldr	r0, [sp, #52]	; 0x34
   8b170:	1c5a      	adds	r2, r3, #1
   8b172:	f8c8 4004 	str.w	r4, [r8, #4]
   8b176:	2a07      	cmp	r2, #7
   8b178:	4404      	add	r4, r0
   8b17a:	f8c8 a000 	str.w	sl, [r8]
   8b17e:	940d      	str	r4, [sp, #52]	; 0x34
   8b180:	920c      	str	r2, [sp, #48]	; 0x30
   8b182:	dc02      	bgt.n	8b18a <_svfprintf_r+0x722>
   8b184:	f108 0308 	add.w	r3, r8, #8
   8b188:	e007      	b.n	8b19a <_svfprintf_r+0x732>
   8b18a:	4658      	mov	r0, fp
   8b18c:	4649      	mov	r1, r9
   8b18e:	aa0b      	add	r2, sp, #44	; 0x2c
   8b190:	f000 fd0a 	bl	8bba8 <__ssprint_r>
   8b194:	2800      	cmp	r0, #0
   8b196:	d154      	bne.n	8b242 <_svfprintf_r+0x7da>
   8b198:	ab18      	add	r3, sp, #96	; 0x60
   8b19a:	077a      	lsls	r2, r7, #29
   8b19c:	d40b      	bmi.n	8b1b6 <_svfprintf_r+0x74e>
   8b19e:	9804      	ldr	r0, [sp, #16]
   8b1a0:	9b02      	ldr	r3, [sp, #8]
   8b1a2:	9a03      	ldr	r2, [sp, #12]
   8b1a4:	990d      	ldr	r1, [sp, #52]	; 0x34
   8b1a6:	4293      	cmp	r3, r2
   8b1a8:	bfac      	ite	ge
   8b1aa:	18c0      	addge	r0, r0, r3
   8b1ac:	1880      	addlt	r0, r0, r2
   8b1ae:	9004      	str	r0, [sp, #16]
   8b1b0:	2900      	cmp	r1, #0
   8b1b2:	d036      	beq.n	8b222 <_svfprintf_r+0x7ba>
   8b1b4:	e02f      	b.n	8b216 <_svfprintf_r+0x7ae>
   8b1b6:	9c03      	ldr	r4, [sp, #12]
   8b1b8:	9902      	ldr	r1, [sp, #8]
   8b1ba:	1a64      	subs	r4, r4, r1
   8b1bc:	2c00      	cmp	r4, #0
   8b1be:	ddee      	ble.n	8b19e <_svfprintf_r+0x736>
   8b1c0:	481a      	ldr	r0, [pc, #104]	; (8b22c <_svfprintf_r+0x7c4>)
   8b1c2:	2c10      	cmp	r4, #16
   8b1c4:	6018      	str	r0, [r3, #0]
   8b1c6:	dd15      	ble.n	8b1f4 <_svfprintf_r+0x78c>
   8b1c8:	990c      	ldr	r1, [sp, #48]	; 0x30
   8b1ca:	2010      	movs	r0, #16
   8b1cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8b1ce:	6058      	str	r0, [r3, #4]
   8b1d0:	1c48      	adds	r0, r1, #1
   8b1d2:	3210      	adds	r2, #16
   8b1d4:	2807      	cmp	r0, #7
   8b1d6:	920d      	str	r2, [sp, #52]	; 0x34
   8b1d8:	900c      	str	r0, [sp, #48]	; 0x30
   8b1da:	dc01      	bgt.n	8b1e0 <_svfprintf_r+0x778>
   8b1dc:	3308      	adds	r3, #8
   8b1de:	e007      	b.n	8b1f0 <_svfprintf_r+0x788>
   8b1e0:	4658      	mov	r0, fp
   8b1e2:	4649      	mov	r1, r9
   8b1e4:	aa0b      	add	r2, sp, #44	; 0x2c
   8b1e6:	f000 fcdf 	bl	8bba8 <__ssprint_r>
   8b1ea:	2800      	cmp	r0, #0
   8b1ec:	d129      	bne.n	8b242 <_svfprintf_r+0x7da>
   8b1ee:	ab18      	add	r3, sp, #96	; 0x60
   8b1f0:	3c10      	subs	r4, #16
   8b1f2:	e7e5      	b.n	8b1c0 <_svfprintf_r+0x758>
   8b1f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8b1f6:	605c      	str	r4, [r3, #4]
   8b1f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8b1fa:	1c51      	adds	r1, r2, #1
   8b1fc:	191c      	adds	r4, r3, r4
   8b1fe:	2907      	cmp	r1, #7
   8b200:	940d      	str	r4, [sp, #52]	; 0x34
   8b202:	910c      	str	r1, [sp, #48]	; 0x30
   8b204:	ddcb      	ble.n	8b19e <_svfprintf_r+0x736>
   8b206:	4658      	mov	r0, fp
   8b208:	4649      	mov	r1, r9
   8b20a:	aa0b      	add	r2, sp, #44	; 0x2c
   8b20c:	f000 fccc 	bl	8bba8 <__ssprint_r>
   8b210:	2800      	cmp	r0, #0
   8b212:	d0c4      	beq.n	8b19e <_svfprintf_r+0x736>
   8b214:	e015      	b.n	8b242 <_svfprintf_r+0x7da>
   8b216:	4658      	mov	r0, fp
   8b218:	4649      	mov	r1, r9
   8b21a:	aa0b      	add	r2, sp, #44	; 0x2c
   8b21c:	f000 fcc4 	bl	8bba8 <__ssprint_r>
   8b220:	b978      	cbnz	r0, 8b242 <_svfprintf_r+0x7da>
   8b222:	2500      	movs	r5, #0
   8b224:	950c      	str	r5, [sp, #48]	; 0x30
   8b226:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b22a:	e446      	b.n	8aaba <_svfprintf_r+0x52>
   8b22c:	0008d872 	.word	0x0008d872
   8b230:	0008d882 	.word	0x0008d882
   8b234:	980d      	ldr	r0, [sp, #52]	; 0x34
   8b236:	b120      	cbz	r0, 8b242 <_svfprintf_r+0x7da>
   8b238:	4658      	mov	r0, fp
   8b23a:	4649      	mov	r1, r9
   8b23c:	aa0b      	add	r2, sp, #44	; 0x2c
   8b23e:	f000 fcb3 	bl	8bba8 <__ssprint_r>
   8b242:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   8b246:	9b04      	ldr	r3, [sp, #16]
   8b248:	f002 0140 	and.w	r1, r2, #64	; 0x40
   8b24c:	b208      	sxth	r0, r1
   8b24e:	2800      	cmp	r0, #0
   8b250:	bf18      	it	ne
   8b252:	f04f 33ff 	movne.w	r3, #4294967295
   8b256:	4618      	mov	r0, r3
   8b258:	b029      	add	sp, #164	; 0xa4
   8b25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b25e:	bf00      	nop

0008b260 <register_fini>:
   8b260:	4b02      	ldr	r3, [pc, #8]	; (8b26c <register_fini+0xc>)
   8b262:	b113      	cbz	r3, 8b26a <register_fini+0xa>
   8b264:	4802      	ldr	r0, [pc, #8]	; (8b270 <register_fini+0x10>)
   8b266:	f000 b805 	b.w	8b274 <atexit>
   8b26a:	4770      	bx	lr
   8b26c:	00000000 	.word	0x00000000
   8b270:	0008a721 	.word	0x0008a721

0008b274 <atexit>:
   8b274:	4601      	mov	r1, r0
   8b276:	2000      	movs	r0, #0
   8b278:	4602      	mov	r2, r0
   8b27a:	4603      	mov	r3, r0
   8b27c:	f7ff ba02 	b.w	8a684 <__register_exitproc>

0008b280 <_malloc_trim_r>:
   8b280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b282:	4d23      	ldr	r5, [pc, #140]	; (8b310 <_malloc_trim_r+0x90>)
   8b284:	460e      	mov	r6, r1
   8b286:	4604      	mov	r4, r0
   8b288:	f000 fb0e 	bl	8b8a8 <__malloc_lock>
   8b28c:	68ab      	ldr	r3, [r5, #8]
   8b28e:	685f      	ldr	r7, [r3, #4]
   8b290:	f027 0703 	bic.w	r7, r7, #3
   8b294:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
   8b298:	1b81      	subs	r1, r0, r6
   8b29a:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   8b29e:	f022 060f 	bic.w	r6, r2, #15
   8b2a2:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   8b2a6:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   8b2aa:	da04      	bge.n	8b2b6 <_malloc_trim_r+0x36>
   8b2ac:	4620      	mov	r0, r4
   8b2ae:	f000 fafc 	bl	8b8aa <__malloc_unlock>
   8b2b2:	2000      	movs	r0, #0
   8b2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b2b6:	2100      	movs	r1, #0
   8b2b8:	4620      	mov	r0, r4
   8b2ba:	f000 fc65 	bl	8bb88 <_sbrk_r>
   8b2be:	68ab      	ldr	r3, [r5, #8]
   8b2c0:	19d9      	adds	r1, r3, r7
   8b2c2:	4288      	cmp	r0, r1
   8b2c4:	d1f2      	bne.n	8b2ac <_malloc_trim_r+0x2c>
   8b2c6:	4271      	negs	r1, r6
   8b2c8:	4620      	mov	r0, r4
   8b2ca:	f000 fc5d 	bl	8bb88 <_sbrk_r>
   8b2ce:	3001      	adds	r0, #1
   8b2d0:	d110      	bne.n	8b2f4 <_malloc_trim_r+0x74>
   8b2d2:	2100      	movs	r1, #0
   8b2d4:	4620      	mov	r0, r4
   8b2d6:	f000 fc57 	bl	8bb88 <_sbrk_r>
   8b2da:	68ab      	ldr	r3, [r5, #8]
   8b2dc:	1ac2      	subs	r2, r0, r3
   8b2de:	2a0f      	cmp	r2, #15
   8b2e0:	dde4      	ble.n	8b2ac <_malloc_trim_r+0x2c>
   8b2e2:	490c      	ldr	r1, [pc, #48]	; (8b314 <_malloc_trim_r+0x94>)
   8b2e4:	f042 0201 	orr.w	r2, r2, #1
   8b2e8:	6809      	ldr	r1, [r1, #0]
   8b2ea:	605a      	str	r2, [r3, #4]
   8b2ec:	1a40      	subs	r0, r0, r1
   8b2ee:	490a      	ldr	r1, [pc, #40]	; (8b318 <_malloc_trim_r+0x98>)
   8b2f0:	6008      	str	r0, [r1, #0]
   8b2f2:	e7db      	b.n	8b2ac <_malloc_trim_r+0x2c>
   8b2f4:	4b08      	ldr	r3, [pc, #32]	; (8b318 <_malloc_trim_r+0x98>)
   8b2f6:	68a8      	ldr	r0, [r5, #8]
   8b2f8:	681a      	ldr	r2, [r3, #0]
   8b2fa:	1bbf      	subs	r7, r7, r6
   8b2fc:	f047 0701 	orr.w	r7, r7, #1
   8b300:	6047      	str	r7, [r0, #4]
   8b302:	1b96      	subs	r6, r2, r6
   8b304:	4620      	mov	r0, r4
   8b306:	601e      	str	r6, [r3, #0]
   8b308:	f000 facf 	bl	8b8aa <__malloc_unlock>
   8b30c:	2001      	movs	r0, #1
   8b30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b310:	200706e0 	.word	0x200706e0
   8b314:	20070ae8 	.word	0x20070ae8
   8b318:	2007165c 	.word	0x2007165c

0008b31c <_free_r>:
   8b31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b31e:	4606      	mov	r6, r0
   8b320:	460d      	mov	r5, r1
   8b322:	2900      	cmp	r1, #0
   8b324:	f000 80a6 	beq.w	8b474 <_free_r+0x158>
   8b328:	f000 fabe 	bl	8b8a8 <__malloc_lock>
   8b32c:	f855 cc04 	ldr.w	ip, [r5, #-4]
   8b330:	4f51      	ldr	r7, [pc, #324]	; (8b478 <_free_r+0x15c>)
   8b332:	f1a5 0308 	sub.w	r3, r5, #8
   8b336:	f02c 0201 	bic.w	r2, ip, #1
   8b33a:	189c      	adds	r4, r3, r2
   8b33c:	68b9      	ldr	r1, [r7, #8]
   8b33e:	6860      	ldr	r0, [r4, #4]
   8b340:	428c      	cmp	r4, r1
   8b342:	f020 0003 	bic.w	r0, r0, #3
   8b346:	f00c 0101 	and.w	r1, ip, #1
   8b34a:	d11c      	bne.n	8b386 <_free_r+0x6a>
   8b34c:	1882      	adds	r2, r0, r2
   8b34e:	b939      	cbnz	r1, 8b360 <_free_r+0x44>
   8b350:	f855 1c08 	ldr.w	r1, [r5, #-8]
   8b354:	1a5b      	subs	r3, r3, r1
   8b356:	6898      	ldr	r0, [r3, #8]
   8b358:	1852      	adds	r2, r2, r1
   8b35a:	68d9      	ldr	r1, [r3, #12]
   8b35c:	60c1      	str	r1, [r0, #12]
   8b35e:	6088      	str	r0, [r1, #8]
   8b360:	4845      	ldr	r0, [pc, #276]	; (8b478 <_free_r+0x15c>)
   8b362:	f042 0101 	orr.w	r1, r2, #1
   8b366:	6059      	str	r1, [r3, #4]
   8b368:	6083      	str	r3, [r0, #8]
   8b36a:	4b44      	ldr	r3, [pc, #272]	; (8b47c <_free_r+0x160>)
   8b36c:	6819      	ldr	r1, [r3, #0]
   8b36e:	428a      	cmp	r2, r1
   8b370:	d304      	bcc.n	8b37c <_free_r+0x60>
   8b372:	4a43      	ldr	r2, [pc, #268]	; (8b480 <_free_r+0x164>)
   8b374:	4630      	mov	r0, r6
   8b376:	6811      	ldr	r1, [r2, #0]
   8b378:	f7ff ff82 	bl	8b280 <_malloc_trim_r>
   8b37c:	4630      	mov	r0, r6
   8b37e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8b382:	f000 ba92 	b.w	8b8aa <__malloc_unlock>
   8b386:	6060      	str	r0, [r4, #4]
   8b388:	b959      	cbnz	r1, 8b3a2 <_free_r+0x86>
   8b38a:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8b38e:	3708      	adds	r7, #8
   8b390:	1b5b      	subs	r3, r3, r5
   8b392:	1952      	adds	r2, r2, r5
   8b394:	689d      	ldr	r5, [r3, #8]
   8b396:	42bd      	cmp	r5, r7
   8b398:	d005      	beq.n	8b3a6 <_free_r+0x8a>
   8b39a:	68df      	ldr	r7, [r3, #12]
   8b39c:	60ef      	str	r7, [r5, #12]
   8b39e:	60bd      	str	r5, [r7, #8]
   8b3a0:	e002      	b.n	8b3a8 <_free_r+0x8c>
   8b3a2:	2100      	movs	r1, #0
   8b3a4:	e000      	b.n	8b3a8 <_free_r+0x8c>
   8b3a6:	2101      	movs	r1, #1
   8b3a8:	1825      	adds	r5, r4, r0
   8b3aa:	686d      	ldr	r5, [r5, #4]
   8b3ac:	f015 0f01 	tst.w	r5, #1
   8b3b0:	d10f      	bne.n	8b3d2 <_free_r+0xb6>
   8b3b2:	1812      	adds	r2, r2, r0
   8b3b4:	b949      	cbnz	r1, 8b3ca <_free_r+0xae>
   8b3b6:	68a0      	ldr	r0, [r4, #8]
   8b3b8:	4d32      	ldr	r5, [pc, #200]	; (8b484 <_free_r+0x168>)
   8b3ba:	42a8      	cmp	r0, r5
   8b3bc:	d105      	bne.n	8b3ca <_free_r+0xae>
   8b3be:	60eb      	str	r3, [r5, #12]
   8b3c0:	60ab      	str	r3, [r5, #8]
   8b3c2:	60d8      	str	r0, [r3, #12]
   8b3c4:	6098      	str	r0, [r3, #8]
   8b3c6:	2101      	movs	r1, #1
   8b3c8:	e003      	b.n	8b3d2 <_free_r+0xb6>
   8b3ca:	68e0      	ldr	r0, [r4, #12]
   8b3cc:	68a4      	ldr	r4, [r4, #8]
   8b3ce:	60e0      	str	r0, [r4, #12]
   8b3d0:	6084      	str	r4, [r0, #8]
   8b3d2:	f042 0001 	orr.w	r0, r2, #1
   8b3d6:	6058      	str	r0, [r3, #4]
   8b3d8:	509a      	str	r2, [r3, r2]
   8b3da:	2900      	cmp	r1, #0
   8b3dc:	d1ce      	bne.n	8b37c <_free_r+0x60>
   8b3de:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8b3e2:	d20c      	bcs.n	8b3fe <_free_r+0xe2>
   8b3e4:	08d2      	lsrs	r2, r2, #3
   8b3e6:	1090      	asrs	r0, r2, #2
   8b3e8:	2401      	movs	r4, #1
   8b3ea:	fa04 f400 	lsl.w	r4, r4, r0
   8b3ee:	4922      	ldr	r1, [pc, #136]	; (8b478 <_free_r+0x15c>)
   8b3f0:	6848      	ldr	r0, [r1, #4]
   8b3f2:	4320      	orrs	r0, r4
   8b3f4:	6048      	str	r0, [r1, #4]
   8b3f6:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   8b3fa:	6881      	ldr	r1, [r0, #8]
   8b3fc:	e035      	b.n	8b46a <_free_r+0x14e>
   8b3fe:	0a54      	lsrs	r4, r2, #9
   8b400:	2c04      	cmp	r4, #4
   8b402:	d802      	bhi.n	8b40a <_free_r+0xee>
   8b404:	0994      	lsrs	r4, r2, #6
   8b406:	3438      	adds	r4, #56	; 0x38
   8b408:	e016      	b.n	8b438 <_free_r+0x11c>
   8b40a:	2c14      	cmp	r4, #20
   8b40c:	d801      	bhi.n	8b412 <_free_r+0xf6>
   8b40e:	345b      	adds	r4, #91	; 0x5b
   8b410:	e012      	b.n	8b438 <_free_r+0x11c>
   8b412:	2c54      	cmp	r4, #84	; 0x54
   8b414:	d802      	bhi.n	8b41c <_free_r+0x100>
   8b416:	0b14      	lsrs	r4, r2, #12
   8b418:	346e      	adds	r4, #110	; 0x6e
   8b41a:	e00d      	b.n	8b438 <_free_r+0x11c>
   8b41c:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
   8b420:	d802      	bhi.n	8b428 <_free_r+0x10c>
   8b422:	0bd4      	lsrs	r4, r2, #15
   8b424:	3477      	adds	r4, #119	; 0x77
   8b426:	e007      	b.n	8b438 <_free_r+0x11c>
   8b428:	f240 5554 	movw	r5, #1364	; 0x554
   8b42c:	42ac      	cmp	r4, r5
   8b42e:	d802      	bhi.n	8b436 <_free_r+0x11a>
   8b430:	0c94      	lsrs	r4, r2, #18
   8b432:	347c      	adds	r4, #124	; 0x7c
   8b434:	e000      	b.n	8b438 <_free_r+0x11c>
   8b436:	247e      	movs	r4, #126	; 0x7e
   8b438:	4d0f      	ldr	r5, [pc, #60]	; (8b478 <_free_r+0x15c>)
   8b43a:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   8b43e:	6881      	ldr	r1, [r0, #8]
   8b440:	4281      	cmp	r1, r0
   8b442:	d10c      	bne.n	8b45e <_free_r+0x142>
   8b444:	2201      	movs	r2, #1
   8b446:	10a4      	asrs	r4, r4, #2
   8b448:	fa02 f404 	lsl.w	r4, r2, r4
   8b44c:	6868      	ldr	r0, [r5, #4]
   8b44e:	ea44 0200 	orr.w	r2, r4, r0
   8b452:	606a      	str	r2, [r5, #4]
   8b454:	4608      	mov	r0, r1
   8b456:	e008      	b.n	8b46a <_free_r+0x14e>
   8b458:	6889      	ldr	r1, [r1, #8]
   8b45a:	4281      	cmp	r1, r0
   8b45c:	d004      	beq.n	8b468 <_free_r+0x14c>
   8b45e:	684c      	ldr	r4, [r1, #4]
   8b460:	f024 0403 	bic.w	r4, r4, #3
   8b464:	42a2      	cmp	r2, r4
   8b466:	d3f7      	bcc.n	8b458 <_free_r+0x13c>
   8b468:	68c8      	ldr	r0, [r1, #12]
   8b46a:	60d8      	str	r0, [r3, #12]
   8b46c:	6099      	str	r1, [r3, #8]
   8b46e:	6083      	str	r3, [r0, #8]
   8b470:	60cb      	str	r3, [r1, #12]
   8b472:	e783      	b.n	8b37c <_free_r+0x60>
   8b474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b476:	bf00      	nop
   8b478:	200706e0 	.word	0x200706e0
   8b47c:	20070aec 	.word	0x20070aec
   8b480:	20071658 	.word	0x20071658
   8b484:	200706e8 	.word	0x200706e8

0008b488 <_malloc_r>:
   8b488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b48c:	f101 040b 	add.w	r4, r1, #11
   8b490:	2c16      	cmp	r4, #22
   8b492:	4606      	mov	r6, r0
   8b494:	d903      	bls.n	8b49e <_malloc_r+0x16>
   8b496:	f034 0407 	bics.w	r4, r4, #7
   8b49a:	d501      	bpl.n	8b4a0 <_malloc_r+0x18>
   8b49c:	e002      	b.n	8b4a4 <_malloc_r+0x1c>
   8b49e:	2410      	movs	r4, #16
   8b4a0:	428c      	cmp	r4, r1
   8b4a2:	d202      	bcs.n	8b4aa <_malloc_r+0x22>
   8b4a4:	250c      	movs	r5, #12
   8b4a6:	6035      	str	r5, [r6, #0]
   8b4a8:	e1d9      	b.n	8b85e <_malloc_r+0x3d6>
   8b4aa:	4630      	mov	r0, r6
   8b4ac:	f000 f9fc 	bl	8b8a8 <__malloc_lock>
   8b4b0:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   8b4b4:	d214      	bcs.n	8b4e0 <_malloc_r+0x58>
   8b4b6:	4da0      	ldr	r5, [pc, #640]	; (8b738 <_malloc_r+0x2b0>)
   8b4b8:	08e1      	lsrs	r1, r4, #3
   8b4ba:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   8b4be:	68c5      	ldr	r5, [r0, #12]
   8b4c0:	4285      	cmp	r5, r0
   8b4c2:	d105      	bne.n	8b4d0 <_malloc_r+0x48>
   8b4c4:	f105 0308 	add.w	r3, r5, #8
   8b4c8:	696d      	ldr	r5, [r5, #20]
   8b4ca:	1c8a      	adds	r2, r1, #2
   8b4cc:	429d      	cmp	r5, r3
   8b4ce:	d044      	beq.n	8b55a <_malloc_r+0xd2>
   8b4d0:	68e8      	ldr	r0, [r5, #12]
   8b4d2:	68a9      	ldr	r1, [r5, #8]
   8b4d4:	686a      	ldr	r2, [r5, #4]
   8b4d6:	60c8      	str	r0, [r1, #12]
   8b4d8:	f022 0303 	bic.w	r3, r2, #3
   8b4dc:	6081      	str	r1, [r0, #8]
   8b4de:	e059      	b.n	8b594 <_malloc_r+0x10c>
   8b4e0:	0a62      	lsrs	r2, r4, #9
   8b4e2:	d101      	bne.n	8b4e8 <_malloc_r+0x60>
   8b4e4:	08e2      	lsrs	r2, r4, #3
   8b4e6:	e01b      	b.n	8b520 <_malloc_r+0x98>
   8b4e8:	2a04      	cmp	r2, #4
   8b4ea:	d802      	bhi.n	8b4f2 <_malloc_r+0x6a>
   8b4ec:	09a2      	lsrs	r2, r4, #6
   8b4ee:	3238      	adds	r2, #56	; 0x38
   8b4f0:	e016      	b.n	8b520 <_malloc_r+0x98>
   8b4f2:	2a14      	cmp	r2, #20
   8b4f4:	d801      	bhi.n	8b4fa <_malloc_r+0x72>
   8b4f6:	325b      	adds	r2, #91	; 0x5b
   8b4f8:	e012      	b.n	8b520 <_malloc_r+0x98>
   8b4fa:	2a54      	cmp	r2, #84	; 0x54
   8b4fc:	d802      	bhi.n	8b504 <_malloc_r+0x7c>
   8b4fe:	0b22      	lsrs	r2, r4, #12
   8b500:	326e      	adds	r2, #110	; 0x6e
   8b502:	e00d      	b.n	8b520 <_malloc_r+0x98>
   8b504:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8b508:	d802      	bhi.n	8b510 <_malloc_r+0x88>
   8b50a:	0be2      	lsrs	r2, r4, #15
   8b50c:	3277      	adds	r2, #119	; 0x77
   8b50e:	e007      	b.n	8b520 <_malloc_r+0x98>
   8b510:	f240 5354 	movw	r3, #1364	; 0x554
   8b514:	429a      	cmp	r2, r3
   8b516:	d802      	bhi.n	8b51e <_malloc_r+0x96>
   8b518:	0ca2      	lsrs	r2, r4, #18
   8b51a:	327c      	adds	r2, #124	; 0x7c
   8b51c:	e000      	b.n	8b520 <_malloc_r+0x98>
   8b51e:	227e      	movs	r2, #126	; 0x7e
   8b520:	4885      	ldr	r0, [pc, #532]	; (8b738 <_malloc_r+0x2b0>)
   8b522:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
   8b526:	68dd      	ldr	r5, [r3, #12]
   8b528:	429d      	cmp	r5, r3
   8b52a:	d015      	beq.n	8b558 <_malloc_r+0xd0>
   8b52c:	6869      	ldr	r1, [r5, #4]
   8b52e:	f021 0103 	bic.w	r1, r1, #3
   8b532:	1b08      	subs	r0, r1, r4
   8b534:	280f      	cmp	r0, #15
   8b536:	dd01      	ble.n	8b53c <_malloc_r+0xb4>
   8b538:	3a01      	subs	r2, #1
   8b53a:	e00d      	b.n	8b558 <_malloc_r+0xd0>
   8b53c:	2800      	cmp	r0, #0
   8b53e:	db09      	blt.n	8b554 <_malloc_r+0xcc>
   8b540:	68eb      	ldr	r3, [r5, #12]
   8b542:	68aa      	ldr	r2, [r5, #8]
   8b544:	60d3      	str	r3, [r2, #12]
   8b546:	609a      	str	r2, [r3, #8]
   8b548:	186b      	adds	r3, r5, r1
   8b54a:	685a      	ldr	r2, [r3, #4]
   8b54c:	f042 0001 	orr.w	r0, r2, #1
   8b550:	6058      	str	r0, [r3, #4]
   8b552:	e190      	b.n	8b876 <_malloc_r+0x3ee>
   8b554:	68ed      	ldr	r5, [r5, #12]
   8b556:	e7e7      	b.n	8b528 <_malloc_r+0xa0>
   8b558:	3201      	adds	r2, #1
   8b55a:	4977      	ldr	r1, [pc, #476]	; (8b738 <_malloc_r+0x2b0>)
   8b55c:	690d      	ldr	r5, [r1, #16]
   8b55e:	f101 0708 	add.w	r7, r1, #8
   8b562:	42bd      	cmp	r5, r7
   8b564:	d068      	beq.n	8b638 <_malloc_r+0x1b0>
   8b566:	6868      	ldr	r0, [r5, #4]
   8b568:	f020 0303 	bic.w	r3, r0, #3
   8b56c:	1b18      	subs	r0, r3, r4
   8b56e:	280f      	cmp	r0, #15
   8b570:	dd0c      	ble.n	8b58c <_malloc_r+0x104>
   8b572:	192b      	adds	r3, r5, r4
   8b574:	614b      	str	r3, [r1, #20]
   8b576:	610b      	str	r3, [r1, #16]
   8b578:	f044 0401 	orr.w	r4, r4, #1
   8b57c:	f040 0101 	orr.w	r1, r0, #1
   8b580:	606c      	str	r4, [r5, #4]
   8b582:	60df      	str	r7, [r3, #12]
   8b584:	609f      	str	r7, [r3, #8]
   8b586:	6059      	str	r1, [r3, #4]
   8b588:	5018      	str	r0, [r3, r0]
   8b58a:	e174      	b.n	8b876 <_malloc_r+0x3ee>
   8b58c:	2800      	cmp	r0, #0
   8b58e:	614f      	str	r7, [r1, #20]
   8b590:	610f      	str	r7, [r1, #16]
   8b592:	db01      	blt.n	8b598 <_malloc_r+0x110>
   8b594:	18eb      	adds	r3, r5, r3
   8b596:	e7d8      	b.n	8b54a <_malloc_r+0xc2>
   8b598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8b59c:	d20f      	bcs.n	8b5be <_malloc_r+0x136>
   8b59e:	08db      	lsrs	r3, r3, #3
   8b5a0:	1098      	asrs	r0, r3, #2
   8b5a2:	2701      	movs	r7, #1
   8b5a4:	fa07 f700 	lsl.w	r7, r7, r0
   8b5a8:	6848      	ldr	r0, [r1, #4]
   8b5aa:	4307      	orrs	r7, r0
   8b5ac:	604f      	str	r7, [r1, #4]
   8b5ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   8b5b2:	688b      	ldr	r3, [r1, #8]
   8b5b4:	60e9      	str	r1, [r5, #12]
   8b5b6:	60ab      	str	r3, [r5, #8]
   8b5b8:	60dd      	str	r5, [r3, #12]
   8b5ba:	608d      	str	r5, [r1, #8]
   8b5bc:	e03c      	b.n	8b638 <_malloc_r+0x1b0>
   8b5be:	0a58      	lsrs	r0, r3, #9
   8b5c0:	2804      	cmp	r0, #4
   8b5c2:	d802      	bhi.n	8b5ca <_malloc_r+0x142>
   8b5c4:	0998      	lsrs	r0, r3, #6
   8b5c6:	3038      	adds	r0, #56	; 0x38
   8b5c8:	e016      	b.n	8b5f8 <_malloc_r+0x170>
   8b5ca:	2814      	cmp	r0, #20
   8b5cc:	d801      	bhi.n	8b5d2 <_malloc_r+0x14a>
   8b5ce:	305b      	adds	r0, #91	; 0x5b
   8b5d0:	e012      	b.n	8b5f8 <_malloc_r+0x170>
   8b5d2:	2854      	cmp	r0, #84	; 0x54
   8b5d4:	d802      	bhi.n	8b5dc <_malloc_r+0x154>
   8b5d6:	0b18      	lsrs	r0, r3, #12
   8b5d8:	306e      	adds	r0, #110	; 0x6e
   8b5da:	e00d      	b.n	8b5f8 <_malloc_r+0x170>
   8b5dc:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   8b5e0:	d802      	bhi.n	8b5e8 <_malloc_r+0x160>
   8b5e2:	0bd8      	lsrs	r0, r3, #15
   8b5e4:	3077      	adds	r0, #119	; 0x77
   8b5e6:	e007      	b.n	8b5f8 <_malloc_r+0x170>
   8b5e8:	f240 5754 	movw	r7, #1364	; 0x554
   8b5ec:	42b8      	cmp	r0, r7
   8b5ee:	d802      	bhi.n	8b5f6 <_malloc_r+0x16e>
   8b5f0:	0c98      	lsrs	r0, r3, #18
   8b5f2:	307c      	adds	r0, #124	; 0x7c
   8b5f4:	e000      	b.n	8b5f8 <_malloc_r+0x170>
   8b5f6:	207e      	movs	r0, #126	; 0x7e
   8b5f8:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8b738 <_malloc_r+0x2b0>
   8b5fc:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
   8b600:	68b9      	ldr	r1, [r7, #8]
   8b602:	42b9      	cmp	r1, r7
   8b604:	d10e      	bne.n	8b624 <_malloc_r+0x19c>
   8b606:	1087      	asrs	r7, r0, #2
   8b608:	2301      	movs	r3, #1
   8b60a:	fa03 f007 	lsl.w	r0, r3, r7
   8b60e:	f8de 7004 	ldr.w	r7, [lr, #4]
   8b612:	ea40 0307 	orr.w	r3, r0, r7
   8b616:	f8ce 3004 	str.w	r3, [lr, #4]
   8b61a:	4608      	mov	r0, r1
   8b61c:	e008      	b.n	8b630 <_malloc_r+0x1a8>
   8b61e:	6889      	ldr	r1, [r1, #8]
   8b620:	42b9      	cmp	r1, r7
   8b622:	d004      	beq.n	8b62e <_malloc_r+0x1a6>
   8b624:	6848      	ldr	r0, [r1, #4]
   8b626:	f020 0003 	bic.w	r0, r0, #3
   8b62a:	4283      	cmp	r3, r0
   8b62c:	d3f7      	bcc.n	8b61e <_malloc_r+0x196>
   8b62e:	68c8      	ldr	r0, [r1, #12]
   8b630:	60e8      	str	r0, [r5, #12]
   8b632:	60a9      	str	r1, [r5, #8]
   8b634:	60cd      	str	r5, [r1, #12]
   8b636:	6085      	str	r5, [r0, #8]
   8b638:	1095      	asrs	r5, r2, #2
   8b63a:	2001      	movs	r0, #1
   8b63c:	fa00 f305 	lsl.w	r3, r0, r5
   8b640:	4f3d      	ldr	r7, [pc, #244]	; (8b738 <_malloc_r+0x2b0>)
   8b642:	6879      	ldr	r1, [r7, #4]
   8b644:	428b      	cmp	r3, r1
   8b646:	d85d      	bhi.n	8b704 <_malloc_r+0x27c>
   8b648:	420b      	tst	r3, r1
   8b64a:	d105      	bne.n	8b658 <_malloc_r+0x1d0>
   8b64c:	f022 0203 	bic.w	r2, r2, #3
   8b650:	005b      	lsls	r3, r3, #1
   8b652:	3204      	adds	r2, #4
   8b654:	420b      	tst	r3, r1
   8b656:	d0fb      	beq.n	8b650 <_malloc_r+0x1c8>
   8b658:	4d37      	ldr	r5, [pc, #220]	; (8b738 <_malloc_r+0x2b0>)
   8b65a:	4610      	mov	r0, r2
   8b65c:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
   8b660:	4677      	mov	r7, lr
   8b662:	68fd      	ldr	r5, [r7, #12]
   8b664:	42bd      	cmp	r5, r7
   8b666:	d02d      	beq.n	8b6c4 <_malloc_r+0x23c>
   8b668:	6869      	ldr	r1, [r5, #4]
   8b66a:	f021 0c03 	bic.w	ip, r1, #3
   8b66e:	ebc4 010c 	rsb	r1, r4, ip
   8b672:	290f      	cmp	r1, #15
   8b674:	dd13      	ble.n	8b69e <_malloc_r+0x216>
   8b676:	192b      	adds	r3, r5, r4
   8b678:	f044 0401 	orr.w	r4, r4, #1
   8b67c:	68ea      	ldr	r2, [r5, #12]
   8b67e:	606c      	str	r4, [r5, #4]
   8b680:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8b684:	5059      	str	r1, [r3, r1]
   8b686:	60c2      	str	r2, [r0, #12]
   8b688:	6090      	str	r0, [r2, #8]
   8b68a:	4a2b      	ldr	r2, [pc, #172]	; (8b738 <_malloc_r+0x2b0>)
   8b68c:	f041 0001 	orr.w	r0, r1, #1
   8b690:	6153      	str	r3, [r2, #20]
   8b692:	6113      	str	r3, [r2, #16]
   8b694:	3208      	adds	r2, #8
   8b696:	60da      	str	r2, [r3, #12]
   8b698:	609a      	str	r2, [r3, #8]
   8b69a:	6058      	str	r0, [r3, #4]
   8b69c:	e00c      	b.n	8b6b8 <_malloc_r+0x230>
   8b69e:	2900      	cmp	r1, #0
   8b6a0:	db0e      	blt.n	8b6c0 <_malloc_r+0x238>
   8b6a2:	eb05 000c 	add.w	r0, r5, ip
   8b6a6:	6842      	ldr	r2, [r0, #4]
   8b6a8:	68e9      	ldr	r1, [r5, #12]
   8b6aa:	f042 0301 	orr.w	r3, r2, #1
   8b6ae:	6043      	str	r3, [r0, #4]
   8b6b0:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8b6b4:	60c1      	str	r1, [r0, #12]
   8b6b6:	6088      	str	r0, [r1, #8]
   8b6b8:	4630      	mov	r0, r6
   8b6ba:	f000 f8f6 	bl	8b8aa <__malloc_unlock>
   8b6be:	e0de      	b.n	8b87e <_malloc_r+0x3f6>
   8b6c0:	68ed      	ldr	r5, [r5, #12]
   8b6c2:	e7cf      	b.n	8b664 <_malloc_r+0x1dc>
   8b6c4:	3001      	adds	r0, #1
   8b6c6:	0781      	lsls	r1, r0, #30
   8b6c8:	f105 0708 	add.w	r7, r5, #8
   8b6cc:	d1c9      	bne.n	8b662 <_malloc_r+0x1da>
   8b6ce:	4671      	mov	r1, lr
   8b6d0:	0795      	lsls	r5, r2, #30
   8b6d2:	d105      	bne.n	8b6e0 <_malloc_r+0x258>
   8b6d4:	4a18      	ldr	r2, [pc, #96]	; (8b738 <_malloc_r+0x2b0>)
   8b6d6:	6855      	ldr	r5, [r2, #4]
   8b6d8:	ea25 0503 	bic.w	r5, r5, r3
   8b6dc:	6055      	str	r5, [r2, #4]
   8b6de:	e005      	b.n	8b6ec <_malloc_r+0x264>
   8b6e0:	f1a1 0708 	sub.w	r7, r1, #8
   8b6e4:	6809      	ldr	r1, [r1, #0]
   8b6e6:	3a01      	subs	r2, #1
   8b6e8:	42b9      	cmp	r1, r7
   8b6ea:	d0f1      	beq.n	8b6d0 <_malloc_r+0x248>
   8b6ec:	4f12      	ldr	r7, [pc, #72]	; (8b738 <_malloc_r+0x2b0>)
   8b6ee:	005b      	lsls	r3, r3, #1
   8b6f0:	687f      	ldr	r7, [r7, #4]
   8b6f2:	42bb      	cmp	r3, r7
   8b6f4:	d806      	bhi.n	8b704 <_malloc_r+0x27c>
   8b6f6:	b12b      	cbz	r3, 8b704 <_malloc_r+0x27c>
   8b6f8:	4602      	mov	r2, r0
   8b6fa:	423b      	tst	r3, r7
   8b6fc:	d1ac      	bne.n	8b658 <_malloc_r+0x1d0>
   8b6fe:	3204      	adds	r2, #4
   8b700:	005b      	lsls	r3, r3, #1
   8b702:	e7fa      	b.n	8b6fa <_malloc_r+0x272>
   8b704:	4b0c      	ldr	r3, [pc, #48]	; (8b738 <_malloc_r+0x2b0>)
   8b706:	689f      	ldr	r7, [r3, #8]
   8b708:	4619      	mov	r1, r3
   8b70a:	6878      	ldr	r0, [r7, #4]
   8b70c:	f020 0903 	bic.w	r9, r0, #3
   8b710:	45a1      	cmp	r9, r4
   8b712:	d304      	bcc.n	8b71e <_malloc_r+0x296>
   8b714:	ebc4 0009 	rsb	r0, r4, r9
   8b718:	280f      	cmp	r0, #15
   8b71a:	f300 80a2 	bgt.w	8b862 <_malloc_r+0x3da>
   8b71e:	4a07      	ldr	r2, [pc, #28]	; (8b73c <_malloc_r+0x2b4>)
   8b720:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
   8b724:	6815      	ldr	r5, [r2, #0]
   8b726:	3301      	adds	r3, #1
   8b728:	eb07 0a09 	add.w	sl, r7, r9
   8b72c:	eb04 0805 	add.w	r8, r4, r5
   8b730:	d106      	bne.n	8b740 <_malloc_r+0x2b8>
   8b732:	f108 0810 	add.w	r8, r8, #16
   8b736:	e00b      	b.n	8b750 <_malloc_r+0x2c8>
   8b738:	200706e0 	.word	0x200706e0
   8b73c:	20071658 	.word	0x20071658
   8b740:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   8b744:	f100 010f 	add.w	r1, r0, #15
   8b748:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   8b74c:	f022 080f 	bic.w	r8, r2, #15
   8b750:	4630      	mov	r0, r6
   8b752:	4641      	mov	r1, r8
   8b754:	f000 fa18 	bl	8bb88 <_sbrk_r>
   8b758:	1c42      	adds	r2, r0, #1
   8b75a:	4605      	mov	r5, r0
   8b75c:	d071      	beq.n	8b842 <_malloc_r+0x3ba>
   8b75e:	4550      	cmp	r0, sl
   8b760:	d202      	bcs.n	8b768 <_malloc_r+0x2e0>
   8b762:	4b48      	ldr	r3, [pc, #288]	; (8b884 <_malloc_r+0x3fc>)
   8b764:	429f      	cmp	r7, r3
   8b766:	d16c      	bne.n	8b842 <_malloc_r+0x3ba>
   8b768:	4847      	ldr	r0, [pc, #284]	; (8b888 <_malloc_r+0x400>)
   8b76a:	4555      	cmp	r5, sl
   8b76c:	6841      	ldr	r1, [r0, #4]
   8b76e:	4a45      	ldr	r2, [pc, #276]	; (8b884 <_malloc_r+0x3fc>)
   8b770:	eb08 0301 	add.w	r3, r8, r1
   8b774:	6043      	str	r3, [r0, #4]
   8b776:	d107      	bne.n	8b788 <_malloc_r+0x300>
   8b778:	0529      	lsls	r1, r5, #20
   8b77a:	d105      	bne.n	8b788 <_malloc_r+0x300>
   8b77c:	6895      	ldr	r5, [r2, #8]
   8b77e:	44c8      	add	r8, r9
   8b780:	f048 0001 	orr.w	r0, r8, #1
   8b784:	6068      	str	r0, [r5, #4]
   8b786:	e051      	b.n	8b82c <_malloc_r+0x3a4>
   8b788:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   8b78c:	1c42      	adds	r2, r0, #1
   8b78e:	d103      	bne.n	8b798 <_malloc_r+0x310>
   8b790:	4a3c      	ldr	r2, [pc, #240]	; (8b884 <_malloc_r+0x3fc>)
   8b792:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
   8b796:	e005      	b.n	8b7a4 <_malloc_r+0x31c>
   8b798:	ebca 0a05 	rsb	sl, sl, r5
   8b79c:	eb03 010a 	add.w	r1, r3, sl
   8b7a0:	4b39      	ldr	r3, [pc, #228]	; (8b888 <_malloc_r+0x400>)
   8b7a2:	6059      	str	r1, [r3, #4]
   8b7a4:	f015 0007 	ands.w	r0, r5, #7
   8b7a8:	bf1c      	itt	ne
   8b7aa:	f1c0 0008 	rsbne	r0, r0, #8
   8b7ae:	182d      	addne	r5, r5, r0
   8b7b0:	eb05 0c08 	add.w	ip, r5, r8
   8b7b4:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   8b7b8:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
   8b7bc:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
   8b7c0:	4641      	mov	r1, r8
   8b7c2:	4630      	mov	r0, r6
   8b7c4:	f000 f9e0 	bl	8bb88 <_sbrk_r>
   8b7c8:	4a2f      	ldr	r2, [pc, #188]	; (8b888 <_malloc_r+0x400>)
   8b7ca:	1c43      	adds	r3, r0, #1
   8b7cc:	6853      	ldr	r3, [r2, #4]
   8b7ce:	bf08      	it	eq
   8b7d0:	f04f 0800 	moveq.w	r8, #0
   8b7d4:	eb08 0103 	add.w	r1, r8, r3
   8b7d8:	bf08      	it	eq
   8b7da:	4628      	moveq	r0, r5
   8b7dc:	6051      	str	r1, [r2, #4]
   8b7de:	1b40      	subs	r0, r0, r5
   8b7e0:	4a28      	ldr	r2, [pc, #160]	; (8b884 <_malloc_r+0x3fc>)
   8b7e2:	eb00 0308 	add.w	r3, r0, r8
   8b7e6:	f043 0101 	orr.w	r1, r3, #1
   8b7ea:	4297      	cmp	r7, r2
   8b7ec:	6095      	str	r5, [r2, #8]
   8b7ee:	6069      	str	r1, [r5, #4]
   8b7f0:	d01c      	beq.n	8b82c <_malloc_r+0x3a4>
   8b7f2:	f1b9 0f0f 	cmp.w	r9, #15
   8b7f6:	d802      	bhi.n	8b7fe <_malloc_r+0x376>
   8b7f8:	2201      	movs	r2, #1
   8b7fa:	606a      	str	r2, [r5, #4]
   8b7fc:	e021      	b.n	8b842 <_malloc_r+0x3ba>
   8b7fe:	687d      	ldr	r5, [r7, #4]
   8b800:	f1a9 090c 	sub.w	r9, r9, #12
   8b804:	f029 0907 	bic.w	r9, r9, #7
   8b808:	f005 0201 	and.w	r2, r5, #1
   8b80c:	2105      	movs	r1, #5
   8b80e:	eb07 0309 	add.w	r3, r7, r9
   8b812:	ea49 0002 	orr.w	r0, r9, r2
   8b816:	f1b9 0f0f 	cmp.w	r9, #15
   8b81a:	6078      	str	r0, [r7, #4]
   8b81c:	6059      	str	r1, [r3, #4]
   8b81e:	6099      	str	r1, [r3, #8]
   8b820:	d904      	bls.n	8b82c <_malloc_r+0x3a4>
   8b822:	4630      	mov	r0, r6
   8b824:	f107 0108 	add.w	r1, r7, #8
   8b828:	f7ff fd78 	bl	8b31c <_free_r>
   8b82c:	4a16      	ldr	r2, [pc, #88]	; (8b888 <_malloc_r+0x400>)
   8b82e:	6853      	ldr	r3, [r2, #4]
   8b830:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   8b832:	6b15      	ldr	r5, [r2, #48]	; 0x30
   8b834:	428b      	cmp	r3, r1
   8b836:	bf88      	it	hi
   8b838:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   8b83a:	42ab      	cmp	r3, r5
   8b83c:	bf84      	itt	hi
   8b83e:	4d12      	ldrhi	r5, [pc, #72]	; (8b888 <_malloc_r+0x400>)
   8b840:	632b      	strhi	r3, [r5, #48]	; 0x30
   8b842:	4810      	ldr	r0, [pc, #64]	; (8b884 <_malloc_r+0x3fc>)
   8b844:	6882      	ldr	r2, [r0, #8]
   8b846:	6853      	ldr	r3, [r2, #4]
   8b848:	f023 0103 	bic.w	r1, r3, #3
   8b84c:	42a1      	cmp	r1, r4
   8b84e:	ebc4 0001 	rsb	r0, r4, r1
   8b852:	d301      	bcc.n	8b858 <_malloc_r+0x3d0>
   8b854:	280f      	cmp	r0, #15
   8b856:	dc04      	bgt.n	8b862 <_malloc_r+0x3da>
   8b858:	4630      	mov	r0, r6
   8b85a:	f000 f826 	bl	8b8aa <__malloc_unlock>
   8b85e:	2500      	movs	r5, #0
   8b860:	e00d      	b.n	8b87e <_malloc_r+0x3f6>
   8b862:	4a08      	ldr	r2, [pc, #32]	; (8b884 <_malloc_r+0x3fc>)
   8b864:	f044 0301 	orr.w	r3, r4, #1
   8b868:	6895      	ldr	r5, [r2, #8]
   8b86a:	f040 0101 	orr.w	r1, r0, #1
   8b86e:	192c      	adds	r4, r5, r4
   8b870:	606b      	str	r3, [r5, #4]
   8b872:	6094      	str	r4, [r2, #8]
   8b874:	6061      	str	r1, [r4, #4]
   8b876:	4630      	mov	r0, r6
   8b878:	f000 f817 	bl	8b8aa <__malloc_unlock>
   8b87c:	3508      	adds	r5, #8
   8b87e:	4628      	mov	r0, r5
   8b880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8b884:	200706e0 	.word	0x200706e0
   8b888:	20071658 	.word	0x20071658

0008b88c <memchr>:
   8b88c:	b510      	push	{r4, lr}
   8b88e:	b2c9      	uxtb	r1, r1
   8b890:	4603      	mov	r3, r0
   8b892:	1882      	adds	r2, r0, r2
   8b894:	4293      	cmp	r3, r2
   8b896:	4618      	mov	r0, r3
   8b898:	d004      	beq.n	8b8a4 <memchr+0x18>
   8b89a:	7804      	ldrb	r4, [r0, #0]
   8b89c:	3301      	adds	r3, #1
   8b89e:	428c      	cmp	r4, r1
   8b8a0:	d1f8      	bne.n	8b894 <memchr+0x8>
   8b8a2:	e000      	b.n	8b8a6 <memchr+0x1a>
   8b8a4:	2000      	movs	r0, #0
   8b8a6:	bd10      	pop	{r4, pc}

0008b8a8 <__malloc_lock>:
   8b8a8:	4770      	bx	lr

0008b8aa <__malloc_unlock>:
   8b8aa:	4770      	bx	lr

0008b8ac <_realloc_r>:
   8b8ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b8b0:	4681      	mov	r9, r0
   8b8b2:	4616      	mov	r6, r2
   8b8b4:	460c      	mov	r4, r1
   8b8b6:	b921      	cbnz	r1, 8b8c2 <_realloc_r+0x16>
   8b8b8:	4611      	mov	r1, r2
   8b8ba:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b8be:	f7ff bde3 	b.w	8b488 <_malloc_r>
   8b8c2:	f7ff fff1 	bl	8b8a8 <__malloc_lock>
   8b8c6:	f106 070b 	add.w	r7, r6, #11
   8b8ca:	f854 5c04 	ldr.w	r5, [r4, #-4]
   8b8ce:	2f16      	cmp	r7, #22
   8b8d0:	f1a4 0b08 	sub.w	fp, r4, #8
   8b8d4:	f025 0803 	bic.w	r8, r5, #3
   8b8d8:	d903      	bls.n	8b8e2 <_realloc_r+0x36>
   8b8da:	f037 0707 	bics.w	r7, r7, #7
   8b8de:	d501      	bpl.n	8b8e4 <_realloc_r+0x38>
   8b8e0:	e002      	b.n	8b8e8 <_realloc_r+0x3c>
   8b8e2:	2710      	movs	r7, #16
   8b8e4:	42b7      	cmp	r7, r6
   8b8e6:	d204      	bcs.n	8b8f2 <_realloc_r+0x46>
   8b8e8:	200c      	movs	r0, #12
   8b8ea:	f8c9 0000 	str.w	r0, [r9]
   8b8ee:	2600      	movs	r6, #0
   8b8f0:	e145      	b.n	8bb7e <_realloc_r+0x2d2>
   8b8f2:	45b8      	cmp	r8, r7
   8b8f4:	f280 811a 	bge.w	8bb2c <_realloc_r+0x280>
   8b8f8:	4aa2      	ldr	r2, [pc, #648]	; (8bb84 <_realloc_r+0x2d8>)
   8b8fa:	eb0b 0308 	add.w	r3, fp, r8
   8b8fe:	6891      	ldr	r1, [r2, #8]
   8b900:	428b      	cmp	r3, r1
   8b902:	d006      	beq.n	8b912 <_realloc_r+0x66>
   8b904:	6858      	ldr	r0, [r3, #4]
   8b906:	f020 0201 	bic.w	r2, r0, #1
   8b90a:	1898      	adds	r0, r3, r2
   8b90c:	6842      	ldr	r2, [r0, #4]
   8b90e:	07d0      	lsls	r0, r2, #31
   8b910:	d426      	bmi.n	8b960 <_realloc_r+0xb4>
   8b912:	685a      	ldr	r2, [r3, #4]
   8b914:	428b      	cmp	r3, r1
   8b916:	f022 0003 	bic.w	r0, r2, #3
   8b91a:	eb00 0a08 	add.w	sl, r0, r8
   8b91e:	d118      	bne.n	8b952 <_realloc_r+0xa6>
   8b920:	f107 0210 	add.w	r2, r7, #16
   8b924:	4592      	cmp	sl, r2
   8b926:	db1d      	blt.n	8b964 <_realloc_r+0xb8>
   8b928:	ebc7 0a0a 	rsb	sl, r7, sl
   8b92c:	eb0b 0507 	add.w	r5, fp, r7
   8b930:	f04a 0101 	orr.w	r1, sl, #1
   8b934:	6069      	str	r1, [r5, #4]
   8b936:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8b93a:	4e92      	ldr	r6, [pc, #584]	; (8bb84 <_realloc_r+0x2d8>)
   8b93c:	f002 0301 	and.w	r3, r2, #1
   8b940:	431f      	orrs	r7, r3
   8b942:	60b5      	str	r5, [r6, #8]
   8b944:	f844 7c04 	str.w	r7, [r4, #-4]
   8b948:	4648      	mov	r0, r9
   8b94a:	f7ff ffae 	bl	8b8aa <__malloc_unlock>
   8b94e:	4626      	mov	r6, r4
   8b950:	e115      	b.n	8bb7e <_realloc_r+0x2d2>
   8b952:	45ba      	cmp	sl, r7
   8b954:	db06      	blt.n	8b964 <_realloc_r+0xb8>
   8b956:	68dd      	ldr	r5, [r3, #12]
   8b958:	689e      	ldr	r6, [r3, #8]
   8b95a:	60f5      	str	r5, [r6, #12]
   8b95c:	60ae      	str	r6, [r5, #8]
   8b95e:	e0e6      	b.n	8bb2e <_realloc_r+0x282>
   8b960:	2000      	movs	r0, #0
   8b962:	4603      	mov	r3, r0
   8b964:	07ea      	lsls	r2, r5, #31
   8b966:	f100 8091 	bmi.w	8ba8c <_realloc_r+0x1e0>
   8b96a:	f854 5c08 	ldr.w	r5, [r4, #-8]
   8b96e:	ebc5 050b 	rsb	r5, r5, fp
   8b972:	686a      	ldr	r2, [r5, #4]
   8b974:	f022 0203 	bic.w	r2, r2, #3
   8b978:	2b00      	cmp	r3, #0
   8b97a:	d051      	beq.n	8ba20 <_realloc_r+0x174>
   8b97c:	eb02 0a08 	add.w	sl, r2, r8
   8b980:	428b      	cmp	r3, r1
   8b982:	4482      	add	sl, r0
   8b984:	d145      	bne.n	8ba12 <_realloc_r+0x166>
   8b986:	f107 0310 	add.w	r3, r7, #16
   8b98a:	459a      	cmp	sl, r3
   8b98c:	db48      	blt.n	8ba20 <_realloc_r+0x174>
   8b98e:	462e      	mov	r6, r5
   8b990:	68e9      	ldr	r1, [r5, #12]
   8b992:	f856 3f08 	ldr.w	r3, [r6, #8]!
   8b996:	f1a8 0204 	sub.w	r2, r8, #4
   8b99a:	2a24      	cmp	r2, #36	; 0x24
   8b99c:	60d9      	str	r1, [r3, #12]
   8b99e:	608b      	str	r3, [r1, #8]
   8b9a0:	d825      	bhi.n	8b9ee <_realloc_r+0x142>
   8b9a2:	2a13      	cmp	r2, #19
   8b9a4:	d91b      	bls.n	8b9de <_realloc_r+0x132>
   8b9a6:	6821      	ldr	r1, [r4, #0]
   8b9a8:	2a1b      	cmp	r2, #27
   8b9aa:	60a9      	str	r1, [r5, #8]
   8b9ac:	6863      	ldr	r3, [r4, #4]
   8b9ae:	60eb      	str	r3, [r5, #12]
   8b9b0:	d803      	bhi.n	8b9ba <_realloc_r+0x10e>
   8b9b2:	f105 0010 	add.w	r0, r5, #16
   8b9b6:	3408      	adds	r4, #8
   8b9b8:	e012      	b.n	8b9e0 <_realloc_r+0x134>
   8b9ba:	68a0      	ldr	r0, [r4, #8]
   8b9bc:	2a24      	cmp	r2, #36	; 0x24
   8b9be:	6128      	str	r0, [r5, #16]
   8b9c0:	68e1      	ldr	r1, [r4, #12]
   8b9c2:	6169      	str	r1, [r5, #20]
   8b9c4:	d003      	beq.n	8b9ce <_realloc_r+0x122>
   8b9c6:	f105 0018 	add.w	r0, r5, #24
   8b9ca:	3410      	adds	r4, #16
   8b9cc:	e008      	b.n	8b9e0 <_realloc_r+0x134>
   8b9ce:	6922      	ldr	r2, [r4, #16]
   8b9d0:	f105 0020 	add.w	r0, r5, #32
   8b9d4:	61aa      	str	r2, [r5, #24]
   8b9d6:	6963      	ldr	r3, [r4, #20]
   8b9d8:	3418      	adds	r4, #24
   8b9da:	61eb      	str	r3, [r5, #28]
   8b9dc:	e000      	b.n	8b9e0 <_realloc_r+0x134>
   8b9de:	4630      	mov	r0, r6
   8b9e0:	6821      	ldr	r1, [r4, #0]
   8b9e2:	6001      	str	r1, [r0, #0]
   8b9e4:	6862      	ldr	r2, [r4, #4]
   8b9e6:	6042      	str	r2, [r0, #4]
   8b9e8:	68a3      	ldr	r3, [r4, #8]
   8b9ea:	6083      	str	r3, [r0, #8]
   8b9ec:	e003      	b.n	8b9f6 <_realloc_r+0x14a>
   8b9ee:	4630      	mov	r0, r6
   8b9f0:	4621      	mov	r1, r4
   8b9f2:	f7fe feda 	bl	8a7aa <memmove>
   8b9f6:	ebc7 0a0a 	rsb	sl, r7, sl
   8b9fa:	19e8      	adds	r0, r5, r7
   8b9fc:	f04a 0201 	orr.w	r2, sl, #1
   8ba00:	6042      	str	r2, [r0, #4]
   8ba02:	686b      	ldr	r3, [r5, #4]
   8ba04:	495f      	ldr	r1, [pc, #380]	; (8bb84 <_realloc_r+0x2d8>)
   8ba06:	6088      	str	r0, [r1, #8]
   8ba08:	f003 0001 	and.w	r0, r3, #1
   8ba0c:	4307      	orrs	r7, r0
   8ba0e:	606f      	str	r7, [r5, #4]
   8ba10:	e088      	b.n	8bb24 <_realloc_r+0x278>
   8ba12:	45ba      	cmp	sl, r7
   8ba14:	db04      	blt.n	8ba20 <_realloc_r+0x174>
   8ba16:	68d9      	ldr	r1, [r3, #12]
   8ba18:	6898      	ldr	r0, [r3, #8]
   8ba1a:	60c1      	str	r1, [r0, #12]
   8ba1c:	6088      	str	r0, [r1, #8]
   8ba1e:	e003      	b.n	8ba28 <_realloc_r+0x17c>
   8ba20:	eb02 0a08 	add.w	sl, r2, r8
   8ba24:	45ba      	cmp	sl, r7
   8ba26:	db31      	blt.n	8ba8c <_realloc_r+0x1e0>
   8ba28:	4628      	mov	r0, r5
   8ba2a:	68eb      	ldr	r3, [r5, #12]
   8ba2c:	f850 1f08 	ldr.w	r1, [r0, #8]!
   8ba30:	f1a8 0204 	sub.w	r2, r8, #4
   8ba34:	2a24      	cmp	r2, #36	; 0x24
   8ba36:	60cb      	str	r3, [r1, #12]
   8ba38:	6099      	str	r1, [r3, #8]
   8ba3a:	d823      	bhi.n	8ba84 <_realloc_r+0x1d8>
   8ba3c:	2a13      	cmp	r2, #19
   8ba3e:	d91a      	bls.n	8ba76 <_realloc_r+0x1ca>
   8ba40:	6820      	ldr	r0, [r4, #0]
   8ba42:	2a1b      	cmp	r2, #27
   8ba44:	60a8      	str	r0, [r5, #8]
   8ba46:	6866      	ldr	r6, [r4, #4]
   8ba48:	60ee      	str	r6, [r5, #12]
   8ba4a:	d803      	bhi.n	8ba54 <_realloc_r+0x1a8>
   8ba4c:	f105 0010 	add.w	r0, r5, #16
   8ba50:	3408      	adds	r4, #8
   8ba52:	e010      	b.n	8ba76 <_realloc_r+0x1ca>
   8ba54:	68a3      	ldr	r3, [r4, #8]
   8ba56:	2a24      	cmp	r2, #36	; 0x24
   8ba58:	612b      	str	r3, [r5, #16]
   8ba5a:	68e1      	ldr	r1, [r4, #12]
   8ba5c:	6169      	str	r1, [r5, #20]
   8ba5e:	d003      	beq.n	8ba68 <_realloc_r+0x1bc>
   8ba60:	f105 0018 	add.w	r0, r5, #24
   8ba64:	3410      	adds	r4, #16
   8ba66:	e006      	b.n	8ba76 <_realloc_r+0x1ca>
   8ba68:	6922      	ldr	r2, [r4, #16]
   8ba6a:	61aa      	str	r2, [r5, #24]
   8ba6c:	6960      	ldr	r0, [r4, #20]
   8ba6e:	3418      	adds	r4, #24
   8ba70:	61e8      	str	r0, [r5, #28]
   8ba72:	f105 0020 	add.w	r0, r5, #32
   8ba76:	6826      	ldr	r6, [r4, #0]
   8ba78:	6006      	str	r6, [r0, #0]
   8ba7a:	6863      	ldr	r3, [r4, #4]
   8ba7c:	6043      	str	r3, [r0, #4]
   8ba7e:	68a1      	ldr	r1, [r4, #8]
   8ba80:	6081      	str	r1, [r0, #8]
   8ba82:	e055      	b.n	8bb30 <_realloc_r+0x284>
   8ba84:	4621      	mov	r1, r4
   8ba86:	f7fe fe90 	bl	8a7aa <memmove>
   8ba8a:	e051      	b.n	8bb30 <_realloc_r+0x284>
   8ba8c:	4631      	mov	r1, r6
   8ba8e:	4648      	mov	r0, r9
   8ba90:	f7ff fcfa 	bl	8b488 <_malloc_r>
   8ba94:	4606      	mov	r6, r0
   8ba96:	2800      	cmp	r0, #0
   8ba98:	d044      	beq.n	8bb24 <_realloc_r+0x278>
   8ba9a:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8ba9e:	f1a0 0208 	sub.w	r2, r0, #8
   8baa2:	f021 0301 	bic.w	r3, r1, #1
   8baa6:	eb0b 0103 	add.w	r1, fp, r3
   8baaa:	428a      	cmp	r2, r1
   8baac:	d106      	bne.n	8babc <_realloc_r+0x210>
   8baae:	f850 6c04 	ldr.w	r6, [r0, #-4]
   8bab2:	f026 0503 	bic.w	r5, r6, #3
   8bab6:	eb05 0a08 	add.w	sl, r5, r8
   8baba:	e038      	b.n	8bb2e <_realloc_r+0x282>
   8babc:	f1a8 0204 	sub.w	r2, r8, #4
   8bac0:	2a24      	cmp	r2, #36	; 0x24
   8bac2:	d828      	bhi.n	8bb16 <_realloc_r+0x26a>
   8bac4:	2a13      	cmp	r2, #19
   8bac6:	d91e      	bls.n	8bb06 <_realloc_r+0x25a>
   8bac8:	6823      	ldr	r3, [r4, #0]
   8baca:	2a1b      	cmp	r2, #27
   8bacc:	6003      	str	r3, [r0, #0]
   8bace:	6861      	ldr	r1, [r4, #4]
   8bad0:	6041      	str	r1, [r0, #4]
   8bad2:	d804      	bhi.n	8bade <_realloc_r+0x232>
   8bad4:	f100 0008 	add.w	r0, r0, #8
   8bad8:	f104 0208 	add.w	r2, r4, #8
   8badc:	e014      	b.n	8bb08 <_realloc_r+0x25c>
   8bade:	68a0      	ldr	r0, [r4, #8]
   8bae0:	2a24      	cmp	r2, #36	; 0x24
   8bae2:	60b0      	str	r0, [r6, #8]
   8bae4:	68e3      	ldr	r3, [r4, #12]
   8bae6:	60f3      	str	r3, [r6, #12]
   8bae8:	d004      	beq.n	8baf4 <_realloc_r+0x248>
   8baea:	f106 0010 	add.w	r0, r6, #16
   8baee:	f104 0210 	add.w	r2, r4, #16
   8baf2:	e009      	b.n	8bb08 <_realloc_r+0x25c>
   8baf4:	6922      	ldr	r2, [r4, #16]
   8baf6:	f106 0018 	add.w	r0, r6, #24
   8bafa:	6132      	str	r2, [r6, #16]
   8bafc:	6961      	ldr	r1, [r4, #20]
   8bafe:	f104 0218 	add.w	r2, r4, #24
   8bb02:	6171      	str	r1, [r6, #20]
   8bb04:	e000      	b.n	8bb08 <_realloc_r+0x25c>
   8bb06:	4622      	mov	r2, r4
   8bb08:	6813      	ldr	r3, [r2, #0]
   8bb0a:	6003      	str	r3, [r0, #0]
   8bb0c:	6851      	ldr	r1, [r2, #4]
   8bb0e:	6041      	str	r1, [r0, #4]
   8bb10:	6892      	ldr	r2, [r2, #8]
   8bb12:	6082      	str	r2, [r0, #8]
   8bb14:	e002      	b.n	8bb1c <_realloc_r+0x270>
   8bb16:	4621      	mov	r1, r4
   8bb18:	f7fe fe47 	bl	8a7aa <memmove>
   8bb1c:	4648      	mov	r0, r9
   8bb1e:	4621      	mov	r1, r4
   8bb20:	f7ff fbfc 	bl	8b31c <_free_r>
   8bb24:	4648      	mov	r0, r9
   8bb26:	f7ff fec0 	bl	8b8aa <__malloc_unlock>
   8bb2a:	e028      	b.n	8bb7e <_realloc_r+0x2d2>
   8bb2c:	46c2      	mov	sl, r8
   8bb2e:	465d      	mov	r5, fp
   8bb30:	ebc7 000a 	rsb	r0, r7, sl
   8bb34:	280f      	cmp	r0, #15
   8bb36:	686a      	ldr	r2, [r5, #4]
   8bb38:	d911      	bls.n	8bb5e <_realloc_r+0x2b2>
   8bb3a:	f002 0601 	and.w	r6, r2, #1
   8bb3e:	19e9      	adds	r1, r5, r7
   8bb40:	f040 0301 	orr.w	r3, r0, #1
   8bb44:	4337      	orrs	r7, r6
   8bb46:	606f      	str	r7, [r5, #4]
   8bb48:	1808      	adds	r0, r1, r0
   8bb4a:	604b      	str	r3, [r1, #4]
   8bb4c:	6842      	ldr	r2, [r0, #4]
   8bb4e:	3108      	adds	r1, #8
   8bb50:	f042 0601 	orr.w	r6, r2, #1
   8bb54:	6046      	str	r6, [r0, #4]
   8bb56:	4648      	mov	r0, r9
   8bb58:	f7ff fbe0 	bl	8b31c <_free_r>
   8bb5c:	e00a      	b.n	8bb74 <_realloc_r+0x2c8>
   8bb5e:	f002 0601 	and.w	r6, r2, #1
   8bb62:	ea4a 0306 	orr.w	r3, sl, r6
   8bb66:	606b      	str	r3, [r5, #4]
   8bb68:	eb05 010a 	add.w	r1, r5, sl
   8bb6c:	6848      	ldr	r0, [r1, #4]
   8bb6e:	f040 0201 	orr.w	r2, r0, #1
   8bb72:	604a      	str	r2, [r1, #4]
   8bb74:	4648      	mov	r0, r9
   8bb76:	f7ff fe98 	bl	8b8aa <__malloc_unlock>
   8bb7a:	f105 0608 	add.w	r6, r5, #8
   8bb7e:	4630      	mov	r0, r6
   8bb80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bb84:	200706e0 	.word	0x200706e0

0008bb88 <_sbrk_r>:
   8bb88:	b538      	push	{r3, r4, r5, lr}
   8bb8a:	4c06      	ldr	r4, [pc, #24]	; (8bba4 <_sbrk_r+0x1c>)
   8bb8c:	2300      	movs	r3, #0
   8bb8e:	4605      	mov	r5, r0
   8bb90:	4608      	mov	r0, r1
   8bb92:	6023      	str	r3, [r4, #0]
   8bb94:	f7fe f8e2 	bl	89d5c <_sbrk>
   8bb98:	1c43      	adds	r3, r0, #1
   8bb9a:	d102      	bne.n	8bba2 <_sbrk_r+0x1a>
   8bb9c:	6821      	ldr	r1, [r4, #0]
   8bb9e:	b101      	cbz	r1, 8bba2 <_sbrk_r+0x1a>
   8bba0:	6029      	str	r1, [r5, #0]
   8bba2:	bd38      	pop	{r3, r4, r5, pc}
   8bba4:	20071e28 	.word	0x20071e28

0008bba8 <__ssprint_r>:
   8bba8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bbac:	4607      	mov	r7, r0
   8bbae:	6890      	ldr	r0, [r2, #8]
   8bbb0:	460c      	mov	r4, r1
   8bbb2:	4615      	mov	r5, r2
   8bbb4:	f8d2 8000 	ldr.w	r8, [r2]
   8bbb8:	b908      	cbnz	r0, 8bbbe <__ssprint_r+0x16>
   8bbba:	6050      	str	r0, [r2, #4]
   8bbbc:	e06f      	b.n	8bc9e <__ssprint_r+0xf6>
   8bbbe:	f04f 0b00 	mov.w	fp, #0
   8bbc2:	465e      	mov	r6, fp
   8bbc4:	b936      	cbnz	r6, 8bbd4 <__ssprint_r+0x2c>
   8bbc6:	f8d8 b000 	ldr.w	fp, [r8]
   8bbca:	f8d8 6004 	ldr.w	r6, [r8, #4]
   8bbce:	f108 0808 	add.w	r8, r8, #8
   8bbd2:	e7f7      	b.n	8bbc4 <__ssprint_r+0x1c>
   8bbd4:	68a3      	ldr	r3, [r4, #8]
   8bbd6:	429e      	cmp	r6, r3
   8bbd8:	d34c      	bcc.n	8bc74 <__ssprint_r+0xcc>
   8bbda:	89a2      	ldrh	r2, [r4, #12]
   8bbdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
   8bbe0:	d046      	beq.n	8bc70 <__ssprint_r+0xc8>
   8bbe2:	6823      	ldr	r3, [r4, #0]
   8bbe4:	6960      	ldr	r0, [r4, #20]
   8bbe6:	6921      	ldr	r1, [r4, #16]
   8bbe8:	f04f 0a03 	mov.w	sl, #3
   8bbec:	ebc1 0903 	rsb	r9, r1, r3
   8bbf0:	fb0a f300 	mul.w	r3, sl, r0
   8bbf4:	2002      	movs	r0, #2
   8bbf6:	fb93 faf0 	sdiv	sl, r3, r0
   8bbfa:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   8bbfe:	f109 0301 	add.w	r3, r9, #1
   8bc02:	1998      	adds	r0, r3, r6
   8bc04:	b213      	sxth	r3, r2
   8bc06:	4582      	cmp	sl, r0
   8bc08:	bf38      	it	cc
   8bc0a:	4682      	movcc	sl, r0
   8bc0c:	4638      	mov	r0, r7
   8bc0e:	b183      	cbz	r3, 8bc32 <__ssprint_r+0x8a>
   8bc10:	4651      	mov	r1, sl
   8bc12:	f7ff fc39 	bl	8b488 <_malloc_r>
   8bc16:	b1a8      	cbz	r0, 8bc44 <__ssprint_r+0x9c>
   8bc18:	6921      	ldr	r1, [r4, #16]
   8bc1a:	464a      	mov	r2, r9
   8bc1c:	9001      	str	r0, [sp, #4]
   8bc1e:	f7fe fdbb 	bl	8a798 <memcpy>
   8bc22:	89a0      	ldrh	r0, [r4, #12]
   8bc24:	f420 6290 	bic.w	r2, r0, #1152	; 0x480
   8bc28:	f042 0180 	orr.w	r1, r2, #128	; 0x80
   8bc2c:	81a1      	strh	r1, [r4, #12]
   8bc2e:	9901      	ldr	r1, [sp, #4]
   8bc30:	e014      	b.n	8bc5c <__ssprint_r+0xb4>
   8bc32:	4652      	mov	r2, sl
   8bc34:	f7ff fe3a 	bl	8b8ac <_realloc_r>
   8bc38:	4601      	mov	r1, r0
   8bc3a:	b978      	cbnz	r0, 8bc5c <__ssprint_r+0xb4>
   8bc3c:	4638      	mov	r0, r7
   8bc3e:	6921      	ldr	r1, [r4, #16]
   8bc40:	f7ff fb6c 	bl	8b31c <_free_r>
   8bc44:	89a3      	ldrh	r3, [r4, #12]
   8bc46:	200c      	movs	r0, #12
   8bc48:	2100      	movs	r1, #0
   8bc4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   8bc4e:	6038      	str	r0, [r7, #0]
   8bc50:	81a2      	strh	r2, [r4, #12]
   8bc52:	f04f 30ff 	mov.w	r0, #4294967295
   8bc56:	60a9      	str	r1, [r5, #8]
   8bc58:	6069      	str	r1, [r5, #4]
   8bc5a:	e020      	b.n	8bc9e <__ssprint_r+0xf6>
   8bc5c:	eb01 0309 	add.w	r3, r1, r9
   8bc60:	ebc9 000a 	rsb	r0, r9, sl
   8bc64:	6023      	str	r3, [r4, #0]
   8bc66:	6121      	str	r1, [r4, #16]
   8bc68:	f8c4 a014 	str.w	sl, [r4, #20]
   8bc6c:	4633      	mov	r3, r6
   8bc6e:	60a0      	str	r0, [r4, #8]
   8bc70:	429e      	cmp	r6, r3
   8bc72:	d200      	bcs.n	8bc76 <__ssprint_r+0xce>
   8bc74:	4633      	mov	r3, r6
   8bc76:	461a      	mov	r2, r3
   8bc78:	4659      	mov	r1, fp
   8bc7a:	6820      	ldr	r0, [r4, #0]
   8bc7c:	9301      	str	r3, [sp, #4]
   8bc7e:	f7fe fd94 	bl	8a7aa <memmove>
   8bc82:	68a2      	ldr	r2, [r4, #8]
   8bc84:	9901      	ldr	r1, [sp, #4]
   8bc86:	6823      	ldr	r3, [r4, #0]
   8bc88:	1a50      	subs	r0, r2, r1
   8bc8a:	185a      	adds	r2, r3, r1
   8bc8c:	68a9      	ldr	r1, [r5, #8]
   8bc8e:	60a0      	str	r0, [r4, #8]
   8bc90:	1b8e      	subs	r6, r1, r6
   8bc92:	6022      	str	r2, [r4, #0]
   8bc94:	60ae      	str	r6, [r5, #8]
   8bc96:	2e00      	cmp	r6, #0
   8bc98:	d195      	bne.n	8bbc6 <__ssprint_r+0x1e>
   8bc9a:	606e      	str	r6, [r5, #4]
   8bc9c:	4630      	mov	r0, r6
   8bc9e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008bca2 <_svfiprintf_r>:
   8bca2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bca6:	461e      	mov	r6, r3
   8bca8:	898b      	ldrh	r3, [r1, #12]
   8bcaa:	4689      	mov	r9, r1
   8bcac:	f003 0180 	and.w	r1, r3, #128	; 0x80
   8bcb0:	4614      	mov	r4, r2
   8bcb2:	b20a      	sxth	r2, r1
   8bcb4:	b0a9      	sub	sp, #164	; 0xa4
   8bcb6:	4683      	mov	fp, r0
   8bcb8:	b19a      	cbz	r2, 8bce2 <_svfiprintf_r+0x40>
   8bcba:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8bcbe:	b983      	cbnz	r3, 8bce2 <_svfiprintf_r+0x40>
   8bcc0:	2140      	movs	r1, #64	; 0x40
   8bcc2:	f7ff fbe1 	bl	8b488 <_malloc_r>
   8bcc6:	f8c9 0000 	str.w	r0, [r9]
   8bcca:	f8c9 0010 	str.w	r0, [r9, #16]
   8bcce:	b928      	cbnz	r0, 8bcdc <_svfiprintf_r+0x3a>
   8bcd0:	220c      	movs	r2, #12
   8bcd2:	f8cb 2000 	str.w	r2, [fp]
   8bcd6:	f04f 30ff 	mov.w	r0, #4294967295
   8bcda:	e3db      	b.n	8c494 <_svfiprintf_r+0x7f2>
   8bcdc:	2040      	movs	r0, #64	; 0x40
   8bcde:	f8c9 0014 	str.w	r0, [r9, #20]
   8bce2:	2100      	movs	r1, #0
   8bce4:	ad18      	add	r5, sp, #96	; 0x60
   8bce6:	950b      	str	r5, [sp, #44]	; 0x2c
   8bce8:	910d      	str	r1, [sp, #52]	; 0x34
   8bcea:	910c      	str	r1, [sp, #48]	; 0x30
   8bcec:	9401      	str	r4, [sp, #4]
   8bcee:	9105      	str	r1, [sp, #20]
   8bcf0:	9104      	str	r1, [sp, #16]
   8bcf2:	46a8      	mov	r8, r5
   8bcf4:	9b01      	ldr	r3, [sp, #4]
   8bcf6:	461c      	mov	r4, r3
   8bcf8:	f813 2b01 	ldrb.w	r2, [r3], #1
   8bcfc:	b91a      	cbnz	r2, 8bd06 <_svfiprintf_r+0x64>
   8bcfe:	9801      	ldr	r0, [sp, #4]
   8bd00:	1a25      	subs	r5, r4, r0
   8bd02:	d103      	bne.n	8bd0c <_svfiprintf_r+0x6a>
   8bd04:	e01d      	b.n	8bd42 <_svfiprintf_r+0xa0>
   8bd06:	2a25      	cmp	r2, #37	; 0x25
   8bd08:	d1f5      	bne.n	8bcf6 <_svfiprintf_r+0x54>
   8bd0a:	e7f8      	b.n	8bcfe <_svfiprintf_r+0x5c>
   8bd0c:	9a01      	ldr	r2, [sp, #4]
   8bd0e:	990d      	ldr	r1, [sp, #52]	; 0x34
   8bd10:	e888 0024 	stmia.w	r8, {r2, r5}
   8bd14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8bd16:	194b      	adds	r3, r1, r5
   8bd18:	1c50      	adds	r0, r2, #1
   8bd1a:	2807      	cmp	r0, #7
   8bd1c:	930d      	str	r3, [sp, #52]	; 0x34
   8bd1e:	900c      	str	r0, [sp, #48]	; 0x30
   8bd20:	dc02      	bgt.n	8bd28 <_svfiprintf_r+0x86>
   8bd22:	f108 0808 	add.w	r8, r8, #8
   8bd26:	e009      	b.n	8bd3c <_svfiprintf_r+0x9a>
   8bd28:	4658      	mov	r0, fp
   8bd2a:	4649      	mov	r1, r9
   8bd2c:	aa0b      	add	r2, sp, #44	; 0x2c
   8bd2e:	f7ff ff3b 	bl	8bba8 <__ssprint_r>
   8bd32:	2800      	cmp	r0, #0
   8bd34:	f040 83a3 	bne.w	8c47e <_svfiprintf_r+0x7dc>
   8bd38:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8bd3c:	9904      	ldr	r1, [sp, #16]
   8bd3e:	194b      	adds	r3, r1, r5
   8bd40:	9304      	str	r3, [sp, #16]
   8bd42:	7822      	ldrb	r2, [r4, #0]
   8bd44:	2a00      	cmp	r2, #0
   8bd46:	f000 8393 	beq.w	8c470 <_svfiprintf_r+0x7ce>
   8bd4a:	2200      	movs	r2, #0
   8bd4c:	3401      	adds	r4, #1
   8bd4e:	9401      	str	r4, [sp, #4]
   8bd50:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8bd54:	f04f 3cff 	mov.w	ip, #4294967295
   8bd58:	9203      	str	r2, [sp, #12]
   8bd5a:	4617      	mov	r7, r2
   8bd5c:	9801      	ldr	r0, [sp, #4]
   8bd5e:	f810 3b01 	ldrb.w	r3, [r0], #1
   8bd62:	9001      	str	r0, [sp, #4]
   8bd64:	2b63      	cmp	r3, #99	; 0x63
   8bd66:	f000 80b3 	beq.w	8bed0 <_svfiprintf_r+0x22e>
   8bd6a:	dc33      	bgt.n	8bdd4 <_svfiprintf_r+0x132>
   8bd6c:	2b39      	cmp	r3, #57	; 0x39
   8bd6e:	dc1a      	bgt.n	8bda6 <_svfiprintf_r+0x104>
   8bd70:	2b31      	cmp	r3, #49	; 0x31
   8bd72:	f280 8091 	bge.w	8be98 <_svfiprintf_r+0x1f6>
   8bd76:	2b2b      	cmp	r3, #43	; 0x2b
   8bd78:	d101      	bne.n	8bd7e <_svfiprintf_r+0xdc>
   8bd7a:	461a      	mov	r2, r3
   8bd7c:	e7ee      	b.n	8bd5c <_svfiprintf_r+0xba>
   8bd7e:	dc0a      	bgt.n	8bd96 <_svfiprintf_r+0xf4>
   8bd80:	2b23      	cmp	r3, #35	; 0x23
   8bd82:	d055      	beq.n	8be30 <_svfiprintf_r+0x18e>
   8bd84:	2b2a      	cmp	r3, #42	; 0x2a
   8bd86:	d056      	beq.n	8be36 <_svfiprintf_r+0x194>
   8bd88:	2b20      	cmp	r3, #32
   8bd8a:	f040 81f6 	bne.w	8c17a <_svfiprintf_r+0x4d8>
   8bd8e:	2a00      	cmp	r2, #0
   8bd90:	bf08      	it	eq
   8bd92:	2220      	moveq	r2, #32
   8bd94:	e7e2      	b.n	8bd5c <_svfiprintf_r+0xba>
   8bd96:	2b2e      	cmp	r3, #46	; 0x2e
   8bd98:	d058      	beq.n	8be4c <_svfiprintf_r+0x1aa>
   8bd9a:	2b30      	cmp	r3, #48	; 0x30
   8bd9c:	d079      	beq.n	8be92 <_svfiprintf_r+0x1f0>
   8bd9e:	2b2d      	cmp	r3, #45	; 0x2d
   8bda0:	f040 81eb 	bne.w	8c17a <_svfiprintf_r+0x4d8>
   8bda4:	e04f      	b.n	8be46 <_svfiprintf_r+0x1a4>
   8bda6:	2b4f      	cmp	r3, #79	; 0x4f
   8bda8:	f000 80de 	beq.w	8bf68 <_svfiprintf_r+0x2c6>
   8bdac:	dc07      	bgt.n	8bdbe <_svfiprintf_r+0x11c>
   8bdae:	2b44      	cmp	r3, #68	; 0x44
   8bdb0:	f040 81e3 	bne.w	8c17a <_svfiprintf_r+0x4d8>
   8bdb4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8bdb8:	f047 0710 	orr.w	r7, r7, #16
   8bdbc:	e090      	b.n	8bee0 <_svfiprintf_r+0x23e>
   8bdbe:	2b55      	cmp	r3, #85	; 0x55
   8bdc0:	f000 811f 	beq.w	8c002 <_svfiprintf_r+0x360>
   8bdc4:	2b58      	cmp	r3, #88	; 0x58
   8bdc6:	f040 81d8 	bne.w	8c17a <_svfiprintf_r+0x4d8>
   8bdca:	4daf      	ldr	r5, [pc, #700]	; (8c088 <_svfiprintf_r+0x3e6>)
   8bdcc:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8bdd0:	9505      	str	r5, [sp, #20]
   8bdd2:	e130      	b.n	8c036 <_svfiprintf_r+0x394>
   8bdd4:	2b6f      	cmp	r3, #111	; 0x6f
   8bdd6:	f000 80c9 	beq.w	8bf6c <_svfiprintf_r+0x2ca>
   8bdda:	dc10      	bgt.n	8bdfe <_svfiprintf_r+0x15c>
   8bddc:	2b69      	cmp	r3, #105	; 0x69
   8bdde:	d024      	beq.n	8be2a <_svfiprintf_r+0x188>
   8bde0:	dc07      	bgt.n	8bdf2 <_svfiprintf_r+0x150>
   8bde2:	2b64      	cmp	r3, #100	; 0x64
   8bde4:	d021      	beq.n	8be2a <_svfiprintf_r+0x188>
   8bde6:	2b68      	cmp	r3, #104	; 0x68
   8bde8:	f040 81c7 	bne.w	8c17a <_svfiprintf_r+0x4d8>
   8bdec:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   8bdf0:	e7b4      	b.n	8bd5c <_svfiprintf_r+0xba>
   8bdf2:	2b6c      	cmp	r3, #108	; 0x6c
   8bdf4:	d05f      	beq.n	8beb6 <_svfiprintf_r+0x214>
   8bdf6:	2b6e      	cmp	r3, #110	; 0x6e
   8bdf8:	f040 81bf 	bne.w	8c17a <_svfiprintf_r+0x4d8>
   8bdfc:	e096      	b.n	8bf2c <_svfiprintf_r+0x28a>
   8bdfe:	2b73      	cmp	r3, #115	; 0x73
   8be00:	f000 80df 	beq.w	8bfc2 <_svfiprintf_r+0x320>
   8be04:	dc06      	bgt.n	8be14 <_svfiprintf_r+0x172>
   8be06:	2b70      	cmp	r3, #112	; 0x70
   8be08:	f000 80cd 	beq.w	8bfa6 <_svfiprintf_r+0x304>
   8be0c:	2b71      	cmp	r3, #113	; 0x71
   8be0e:	f040 81b4 	bne.w	8c17a <_svfiprintf_r+0x4d8>
   8be12:	e05a      	b.n	8beca <_svfiprintf_r+0x228>
   8be14:	2b75      	cmp	r3, #117	; 0x75
   8be16:	f000 80f6 	beq.w	8c006 <_svfiprintf_r+0x364>
   8be1a:	2b78      	cmp	r3, #120	; 0x78
   8be1c:	f040 81ad 	bne.w	8c17a <_svfiprintf_r+0x4d8>
   8be20:	4d9a      	ldr	r5, [pc, #616]	; (8c08c <_svfiprintf_r+0x3ea>)
   8be22:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8be26:	9505      	str	r5, [sp, #20]
   8be28:	e105      	b.n	8c036 <_svfiprintf_r+0x394>
   8be2a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8be2e:	e057      	b.n	8bee0 <_svfiprintf_r+0x23e>
   8be30:	f047 0701 	orr.w	r7, r7, #1
   8be34:	e792      	b.n	8bd5c <_svfiprintf_r+0xba>
   8be36:	1d33      	adds	r3, r6, #4
   8be38:	6836      	ldr	r6, [r6, #0]
   8be3a:	2e00      	cmp	r6, #0
   8be3c:	9603      	str	r6, [sp, #12]
   8be3e:	da15      	bge.n	8be6c <_svfiprintf_r+0x1ca>
   8be40:	4270      	negs	r0, r6
   8be42:	9003      	str	r0, [sp, #12]
   8be44:	461e      	mov	r6, r3
   8be46:	f047 0704 	orr.w	r7, r7, #4
   8be4a:	e787      	b.n	8bd5c <_svfiprintf_r+0xba>
   8be4c:	9901      	ldr	r1, [sp, #4]
   8be4e:	f811 3b01 	ldrb.w	r3, [r1], #1
   8be52:	2b2a      	cmp	r3, #42	; 0x2a
   8be54:	9101      	str	r1, [sp, #4]
   8be56:	d10b      	bne.n	8be70 <_svfiprintf_r+0x1ce>
   8be58:	f8d6 c000 	ldr.w	ip, [r6]
   8be5c:	1d33      	adds	r3, r6, #4
   8be5e:	f1bc 0f00 	cmp.w	ip, #0
   8be62:	da03      	bge.n	8be6c <_svfiprintf_r+0x1ca>
   8be64:	461e      	mov	r6, r3
   8be66:	f04f 3cff 	mov.w	ip, #4294967295
   8be6a:	e777      	b.n	8bd5c <_svfiprintf_r+0xba>
   8be6c:	461e      	mov	r6, r3
   8be6e:	e775      	b.n	8bd5c <_svfiprintf_r+0xba>
   8be70:	f04f 0c00 	mov.w	ip, #0
   8be74:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8be78:	2809      	cmp	r0, #9
   8be7a:	d807      	bhi.n	8be8c <_svfiprintf_r+0x1ea>
   8be7c:	9901      	ldr	r1, [sp, #4]
   8be7e:	230a      	movs	r3, #10
   8be80:	fb03 0c0c 	mla	ip, r3, ip, r0
   8be84:	f811 3b01 	ldrb.w	r3, [r1], #1
   8be88:	9101      	str	r1, [sp, #4]
   8be8a:	e7f3      	b.n	8be74 <_svfiprintf_r+0x1d2>
   8be8c:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   8be90:	e768      	b.n	8bd64 <_svfiprintf_r+0xc2>
   8be92:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8be96:	e761      	b.n	8bd5c <_svfiprintf_r+0xba>
   8be98:	9801      	ldr	r0, [sp, #4]
   8be9a:	2100      	movs	r1, #0
   8be9c:	3b30      	subs	r3, #48	; 0x30
   8be9e:	240a      	movs	r4, #10
   8bea0:	fb04 3101 	mla	r1, r4, r1, r3
   8bea4:	f810 3b01 	ldrb.w	r3, [r0], #1
   8bea8:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   8beac:	2c09      	cmp	r4, #9
   8beae:	9001      	str	r0, [sp, #4]
   8beb0:	d9f4      	bls.n	8be9c <_svfiprintf_r+0x1fa>
   8beb2:	9103      	str	r1, [sp, #12]
   8beb4:	e756      	b.n	8bd64 <_svfiprintf_r+0xc2>
   8beb6:	9901      	ldr	r1, [sp, #4]
   8beb8:	780b      	ldrb	r3, [r1, #0]
   8beba:	2b6c      	cmp	r3, #108	; 0x6c
   8bebc:	d102      	bne.n	8bec4 <_svfiprintf_r+0x222>
   8bebe:	1c48      	adds	r0, r1, #1
   8bec0:	9001      	str	r0, [sp, #4]
   8bec2:	e002      	b.n	8beca <_svfiprintf_r+0x228>
   8bec4:	f047 0710 	orr.w	r7, r7, #16
   8bec8:	e748      	b.n	8bd5c <_svfiprintf_r+0xba>
   8beca:	f047 0720 	orr.w	r7, r7, #32
   8bece:	e745      	b.n	8bd5c <_svfiprintf_r+0xba>
   8bed0:	6832      	ldr	r2, [r6, #0]
   8bed2:	2500      	movs	r5, #0
   8bed4:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   8bed8:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8bedc:	3604      	adds	r6, #4
   8bede:	e156      	b.n	8c18e <_svfiprintf_r+0x4ec>
   8bee0:	06ba      	lsls	r2, r7, #26
   8bee2:	d507      	bpl.n	8bef4 <_svfiprintf_r+0x252>
   8bee4:	3607      	adds	r6, #7
   8bee6:	f026 0507 	bic.w	r5, r6, #7
   8beea:	f105 0608 	add.w	r6, r5, #8
   8beee:	e9d5 4500 	ldrd	r4, r5, [r5]
   8bef2:	e00f      	b.n	8bf14 <_svfiprintf_r+0x272>
   8bef4:	f017 0f10 	tst.w	r7, #16
   8bef8:	f106 0104 	add.w	r1, r6, #4
   8befc:	d001      	beq.n	8bf02 <_svfiprintf_r+0x260>
   8befe:	6832      	ldr	r2, [r6, #0]
   8bf00:	e005      	b.n	8bf0e <_svfiprintf_r+0x26c>
   8bf02:	f017 0f40 	tst.w	r7, #64	; 0x40
   8bf06:	6832      	ldr	r2, [r6, #0]
   8bf08:	d001      	beq.n	8bf0e <_svfiprintf_r+0x26c>
   8bf0a:	b214      	sxth	r4, r2
   8bf0c:	e000      	b.n	8bf10 <_svfiprintf_r+0x26e>
   8bf0e:	4614      	mov	r4, r2
   8bf10:	17e5      	asrs	r5, r4, #31
   8bf12:	460e      	mov	r6, r1
   8bf14:	2c00      	cmp	r4, #0
   8bf16:	f175 0200 	sbcs.w	r2, r5, #0
   8bf1a:	f280 80b9 	bge.w	8c090 <_svfiprintf_r+0x3ee>
   8bf1e:	232d      	movs	r3, #45	; 0x2d
   8bf20:	4264      	negs	r4, r4
   8bf22:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8bf26:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   8bf2a:	e0b1      	b.n	8c090 <_svfiprintf_r+0x3ee>
   8bf2c:	f017 0f20 	tst.w	r7, #32
   8bf30:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8bf34:	f106 0204 	add.w	r2, r6, #4
   8bf38:	d005      	beq.n	8bf46 <_svfiprintf_r+0x2a4>
   8bf3a:	9c04      	ldr	r4, [sp, #16]
   8bf3c:	6835      	ldr	r5, [r6, #0]
   8bf3e:	17e0      	asrs	r0, r4, #31
   8bf40:	602c      	str	r4, [r5, #0]
   8bf42:	6068      	str	r0, [r5, #4]
   8bf44:	e004      	b.n	8bf50 <_svfiprintf_r+0x2ae>
   8bf46:	06fb      	lsls	r3, r7, #27
   8bf48:	d504      	bpl.n	8bf54 <_svfiprintf_r+0x2b2>
   8bf4a:	6833      	ldr	r3, [r6, #0]
   8bf4c:	9904      	ldr	r1, [sp, #16]
   8bf4e:	6019      	str	r1, [r3, #0]
   8bf50:	4616      	mov	r6, r2
   8bf52:	e6cf      	b.n	8bcf4 <_svfiprintf_r+0x52>
   8bf54:	6830      	ldr	r0, [r6, #0]
   8bf56:	9c04      	ldr	r4, [sp, #16]
   8bf58:	f017 0f40 	tst.w	r7, #64	; 0x40
   8bf5c:	f106 0604 	add.w	r6, r6, #4
   8bf60:	bf14      	ite	ne
   8bf62:	8004      	strhne	r4, [r0, #0]
   8bf64:	6004      	streq	r4, [r0, #0]
   8bf66:	e6c5      	b.n	8bcf4 <_svfiprintf_r+0x52>
   8bf68:	f047 0710 	orr.w	r7, r7, #16
   8bf6c:	f017 0020 	ands.w	r0, r7, #32
   8bf70:	d008      	beq.n	8bf84 <_svfiprintf_r+0x2e2>
   8bf72:	1df3      	adds	r3, r6, #7
   8bf74:	f023 0507 	bic.w	r5, r3, #7
   8bf78:	f105 0608 	add.w	r6, r5, #8
   8bf7c:	e9d5 4500 	ldrd	r4, r5, [r5]
   8bf80:	2000      	movs	r0, #0
   8bf82:	e07c      	b.n	8c07e <_svfiprintf_r+0x3dc>
   8bf84:	f017 0110 	ands.w	r1, r7, #16
   8bf88:	f106 0204 	add.w	r2, r6, #4
   8bf8c:	d106      	bne.n	8bf9c <_svfiprintf_r+0x2fa>
   8bf8e:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   8bf92:	d003      	beq.n	8bf9c <_svfiprintf_r+0x2fa>
   8bf94:	8834      	ldrh	r4, [r6, #0]
   8bf96:	2500      	movs	r5, #0
   8bf98:	4616      	mov	r6, r2
   8bf9a:	e7f1      	b.n	8bf80 <_svfiprintf_r+0x2de>
   8bf9c:	6836      	ldr	r6, [r6, #0]
   8bf9e:	2500      	movs	r5, #0
   8bfa0:	4634      	mov	r4, r6
   8bfa2:	4616      	mov	r6, r2
   8bfa4:	e06b      	b.n	8c07e <_svfiprintf_r+0x3dc>
   8bfa6:	4b39      	ldr	r3, [pc, #228]	; (8c08c <_svfiprintf_r+0x3ea>)
   8bfa8:	2130      	movs	r1, #48	; 0x30
   8bfaa:	2278      	movs	r2, #120	; 0x78
   8bfac:	6834      	ldr	r4, [r6, #0]
   8bfae:	2500      	movs	r5, #0
   8bfb0:	f047 0702 	orr.w	r7, r7, #2
   8bfb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   8bfb8:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   8bfbc:	3604      	adds	r6, #4
   8bfbe:	9305      	str	r3, [sp, #20]
   8bfc0:	e05c      	b.n	8c07c <_svfiprintf_r+0x3da>
   8bfc2:	4631      	mov	r1, r6
   8bfc4:	2500      	movs	r5, #0
   8bfc6:	f8d1 a000 	ldr.w	sl, [r1]
   8bfca:	3604      	adds	r6, #4
   8bfcc:	45ac      	cmp	ip, r5
   8bfce:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8bfd2:	4650      	mov	r0, sl
   8bfd4:	db11      	blt.n	8bffa <_svfiprintf_r+0x358>
   8bfd6:	4662      	mov	r2, ip
   8bfd8:	4629      	mov	r1, r5
   8bfda:	f8cd c000 	str.w	ip, [sp]
   8bfde:	f7ff fc55 	bl	8b88c <memchr>
   8bfe2:	f8dd c000 	ldr.w	ip, [sp]
   8bfe6:	2800      	cmp	r0, #0
   8bfe8:	f000 80d5 	beq.w	8c196 <_svfiprintf_r+0x4f4>
   8bfec:	ebca 0400 	rsb	r4, sl, r0
   8bff0:	4564      	cmp	r4, ip
   8bff2:	f340 80d2 	ble.w	8c19a <_svfiprintf_r+0x4f8>
   8bff6:	4664      	mov	r4, ip
   8bff8:	e0cf      	b.n	8c19a <_svfiprintf_r+0x4f8>
   8bffa:	f7fe fc53 	bl	8a8a4 <strlen>
   8bffe:	4604      	mov	r4, r0
   8c000:	e0cb      	b.n	8c19a <_svfiprintf_r+0x4f8>
   8c002:	f047 0710 	orr.w	r7, r7, #16
   8c006:	06bd      	lsls	r5, r7, #26
   8c008:	d506      	bpl.n	8c018 <_svfiprintf_r+0x376>
   8c00a:	1df0      	adds	r0, r6, #7
   8c00c:	f020 0407 	bic.w	r4, r0, #7
   8c010:	f104 0608 	add.w	r6, r4, #8
   8c014:	cc30      	ldmia	r4, {r4, r5}
   8c016:	e00c      	b.n	8c032 <_svfiprintf_r+0x390>
   8c018:	f017 0f10 	tst.w	r7, #16
   8c01c:	f106 0304 	add.w	r3, r6, #4
   8c020:	d103      	bne.n	8c02a <_svfiprintf_r+0x388>
   8c022:	067c      	lsls	r4, r7, #25
   8c024:	d501      	bpl.n	8c02a <_svfiprintf_r+0x388>
   8c026:	8834      	ldrh	r4, [r6, #0]
   8c028:	e001      	b.n	8c02e <_svfiprintf_r+0x38c>
   8c02a:	6835      	ldr	r5, [r6, #0]
   8c02c:	462c      	mov	r4, r5
   8c02e:	2500      	movs	r5, #0
   8c030:	461e      	mov	r6, r3
   8c032:	2001      	movs	r0, #1
   8c034:	e023      	b.n	8c07e <_svfiprintf_r+0x3dc>
   8c036:	06b8      	lsls	r0, r7, #26
   8c038:	d507      	bpl.n	8c04a <_svfiprintf_r+0x3a8>
   8c03a:	1df4      	adds	r4, r6, #7
   8c03c:	f024 0107 	bic.w	r1, r4, #7
   8c040:	f101 0608 	add.w	r6, r1, #8
   8c044:	e9d1 4500 	ldrd	r4, r5, [r1]
   8c048:	e00c      	b.n	8c064 <_svfiprintf_r+0x3c2>
   8c04a:	f017 0f10 	tst.w	r7, #16
   8c04e:	f106 0004 	add.w	r0, r6, #4
   8c052:	d103      	bne.n	8c05c <_svfiprintf_r+0x3ba>
   8c054:	0679      	lsls	r1, r7, #25
   8c056:	d501      	bpl.n	8c05c <_svfiprintf_r+0x3ba>
   8c058:	8834      	ldrh	r4, [r6, #0]
   8c05a:	e001      	b.n	8c060 <_svfiprintf_r+0x3be>
   8c05c:	6836      	ldr	r6, [r6, #0]
   8c05e:	4634      	mov	r4, r6
   8c060:	2500      	movs	r5, #0
   8c062:	4606      	mov	r6, r0
   8c064:	07fa      	lsls	r2, r7, #31
   8c066:	d509      	bpl.n	8c07c <_svfiprintf_r+0x3da>
   8c068:	ea54 0205 	orrs.w	r2, r4, r5
   8c06c:	d006      	beq.n	8c07c <_svfiprintf_r+0x3da>
   8c06e:	2230      	movs	r2, #48	; 0x30
   8c070:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   8c074:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   8c078:	f047 0702 	orr.w	r7, r7, #2
   8c07c:	2002      	movs	r0, #2
   8c07e:	2100      	movs	r1, #0
   8c080:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   8c084:	e005      	b.n	8c092 <_svfiprintf_r+0x3f0>
   8c086:	bf00      	nop
   8c088:	0008d892 	.word	0x0008d892
   8c08c:	0008d8a3 	.word	0x0008d8a3
   8c090:	2001      	movs	r0, #1
   8c092:	f1bc 0f00 	cmp.w	ip, #0
   8c096:	bfa8      	it	ge
   8c098:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   8c09c:	ea54 0105 	orrs.w	r1, r4, r5
   8c0a0:	d102      	bne.n	8c0a8 <_svfiprintf_r+0x406>
   8c0a2:	f1bc 0f00 	cmp.w	ip, #0
   8c0a6:	d058      	beq.n	8c15a <_svfiprintf_r+0x4b8>
   8c0a8:	2801      	cmp	r0, #1
   8c0aa:	d01d      	beq.n	8c0e8 <_svfiprintf_r+0x446>
   8c0ac:	2802      	cmp	r0, #2
   8c0ae:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8c0b2:	d041      	beq.n	8c138 <_svfiprintf_r+0x496>
   8c0b4:	f004 0207 	and.w	r2, r4, #7
   8c0b8:	08e4      	lsrs	r4, r4, #3
   8c0ba:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   8c0be:	08e9      	lsrs	r1, r5, #3
   8c0c0:	4604      	mov	r4, r0
   8c0c2:	460d      	mov	r5, r1
   8c0c4:	3230      	adds	r2, #48	; 0x30
   8c0c6:	ea54 0105 	orrs.w	r1, r4, r5
   8c0ca:	469a      	mov	sl, r3
   8c0cc:	701a      	strb	r2, [r3, #0]
   8c0ce:	f103 33ff 	add.w	r3, r3, #4294967295
   8c0d2:	d1ef      	bne.n	8c0b4 <_svfiprintf_r+0x412>
   8c0d4:	07f8      	lsls	r0, r7, #31
   8c0d6:	4655      	mov	r5, sl
   8c0d8:	d54a      	bpl.n	8c170 <_svfiprintf_r+0x4ce>
   8c0da:	2a30      	cmp	r2, #48	; 0x30
   8c0dc:	d048      	beq.n	8c170 <_svfiprintf_r+0x4ce>
   8c0de:	2230      	movs	r2, #48	; 0x30
   8c0e0:	469a      	mov	sl, r3
   8c0e2:	f805 2c01 	strb.w	r2, [r5, #-1]
   8c0e6:	e043      	b.n	8c170 <_svfiprintf_r+0x4ce>
   8c0e8:	2d00      	cmp	r5, #0
   8c0ea:	bf08      	it	eq
   8c0ec:	2c0a      	cmpeq	r4, #10
   8c0ee:	d203      	bcs.n	8c0f8 <_svfiprintf_r+0x456>
   8c0f0:	3430      	adds	r4, #48	; 0x30
   8c0f2:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   8c0f6:	e036      	b.n	8c166 <_svfiprintf_r+0x4c4>
   8c0f8:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8c0fc:	9302      	str	r3, [sp, #8]
   8c0fe:	4620      	mov	r0, r4
   8c100:	4629      	mov	r1, r5
   8c102:	220a      	movs	r2, #10
   8c104:	2300      	movs	r3, #0
   8c106:	f8cd c000 	str.w	ip, [sp]
   8c10a:	f000 f9c7 	bl	8c49c <__aeabi_uldivmod>
   8c10e:	9802      	ldr	r0, [sp, #8]
   8c110:	3230      	adds	r2, #48	; 0x30
   8c112:	f800 2901 	strb.w	r2, [r0], #-1
   8c116:	4629      	mov	r1, r5
   8c118:	220a      	movs	r2, #10
   8c11a:	2300      	movs	r3, #0
   8c11c:	f8dd a008 	ldr.w	sl, [sp, #8]
   8c120:	9002      	str	r0, [sp, #8]
   8c122:	4620      	mov	r0, r4
   8c124:	f000 f9ba 	bl	8c49c <__aeabi_uldivmod>
   8c128:	4604      	mov	r4, r0
   8c12a:	460d      	mov	r5, r1
   8c12c:	ea54 0105 	orrs.w	r1, r4, r5
   8c130:	f8dd c000 	ldr.w	ip, [sp]
   8c134:	d1e3      	bne.n	8c0fe <_svfiprintf_r+0x45c>
   8c136:	e01b      	b.n	8c170 <_svfiprintf_r+0x4ce>
   8c138:	9905      	ldr	r1, [sp, #20]
   8c13a:	f004 000f 	and.w	r0, r4, #15
   8c13e:	0924      	lsrs	r4, r4, #4
   8c140:	5c0a      	ldrb	r2, [r1, r0]
   8c142:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   8c146:	0929      	lsrs	r1, r5, #4
   8c148:	4604      	mov	r4, r0
   8c14a:	460d      	mov	r5, r1
   8c14c:	469a      	mov	sl, r3
   8c14e:	f803 2901 	strb.w	r2, [r3], #-1
   8c152:	ea54 0205 	orrs.w	r2, r4, r5
   8c156:	d1ef      	bne.n	8c138 <_svfiprintf_r+0x496>
   8c158:	e00a      	b.n	8c170 <_svfiprintf_r+0x4ce>
   8c15a:	b938      	cbnz	r0, 8c16c <_svfiprintf_r+0x4ca>
   8c15c:	07f9      	lsls	r1, r7, #31
   8c15e:	d505      	bpl.n	8c16c <_svfiprintf_r+0x4ca>
   8c160:	2030      	movs	r0, #48	; 0x30
   8c162:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   8c166:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   8c16a:	e001      	b.n	8c170 <_svfiprintf_r+0x4ce>
   8c16c:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   8c170:	ad18      	add	r5, sp, #96	; 0x60
   8c172:	ebca 0405 	rsb	r4, sl, r5
   8c176:	4665      	mov	r5, ip
   8c178:	e00f      	b.n	8c19a <_svfiprintf_r+0x4f8>
   8c17a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8c17e:	2b00      	cmp	r3, #0
   8c180:	f000 8176 	beq.w	8c470 <_svfiprintf_r+0x7ce>
   8c184:	2500      	movs	r5, #0
   8c186:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   8c18a:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8c18e:	2401      	movs	r4, #1
   8c190:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   8c194:	e001      	b.n	8c19a <_svfiprintf_r+0x4f8>
   8c196:	4664      	mov	r4, ip
   8c198:	4605      	mov	r5, r0
   8c19a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8c19e:	42ac      	cmp	r4, r5
   8c1a0:	bfac      	ite	ge
   8c1a2:	4621      	movge	r1, r4
   8c1a4:	4629      	movlt	r1, r5
   8c1a6:	9102      	str	r1, [sp, #8]
   8c1a8:	b113      	cbz	r3, 8c1b0 <_svfiprintf_r+0x50e>
   8c1aa:	9802      	ldr	r0, [sp, #8]
   8c1ac:	1c42      	adds	r2, r0, #1
   8c1ae:	9202      	str	r2, [sp, #8]
   8c1b0:	f017 0102 	ands.w	r1, r7, #2
   8c1b4:	9106      	str	r1, [sp, #24]
   8c1b6:	d002      	beq.n	8c1be <_svfiprintf_r+0x51c>
   8c1b8:	9b02      	ldr	r3, [sp, #8]
   8c1ba:	1c98      	adds	r0, r3, #2
   8c1bc:	9002      	str	r0, [sp, #8]
   8c1be:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   8c1c2:	9207      	str	r2, [sp, #28]
   8c1c4:	d13c      	bne.n	8c240 <_svfiprintf_r+0x59e>
   8c1c6:	9903      	ldr	r1, [sp, #12]
   8c1c8:	9b02      	ldr	r3, [sp, #8]
   8c1ca:	1acb      	subs	r3, r1, r3
   8c1cc:	2b00      	cmp	r3, #0
   8c1ce:	dd37      	ble.n	8c240 <_svfiprintf_r+0x59e>
   8c1d0:	48a5      	ldr	r0, [pc, #660]	; (8c468 <_svfiprintf_r+0x7c6>)
   8c1d2:	2b10      	cmp	r3, #16
   8c1d4:	f8c8 0000 	str.w	r0, [r8]
   8c1d8:	dd1b      	ble.n	8c212 <_svfiprintf_r+0x570>
   8c1da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c1dc:	2110      	movs	r1, #16
   8c1de:	980d      	ldr	r0, [sp, #52]	; 0x34
   8c1e0:	f8c8 1004 	str.w	r1, [r8, #4]
   8c1e4:	1c51      	adds	r1, r2, #1
   8c1e6:	3010      	adds	r0, #16
   8c1e8:	2907      	cmp	r1, #7
   8c1ea:	900d      	str	r0, [sp, #52]	; 0x34
   8c1ec:	910c      	str	r1, [sp, #48]	; 0x30
   8c1ee:	dc02      	bgt.n	8c1f6 <_svfiprintf_r+0x554>
   8c1f0:	f108 0808 	add.w	r8, r8, #8
   8c1f4:	e00b      	b.n	8c20e <_svfiprintf_r+0x56c>
   8c1f6:	4658      	mov	r0, fp
   8c1f8:	4649      	mov	r1, r9
   8c1fa:	aa0b      	add	r2, sp, #44	; 0x2c
   8c1fc:	9300      	str	r3, [sp, #0]
   8c1fe:	f7ff fcd3 	bl	8bba8 <__ssprint_r>
   8c202:	9b00      	ldr	r3, [sp, #0]
   8c204:	2800      	cmp	r0, #0
   8c206:	f040 813a 	bne.w	8c47e <_svfiprintf_r+0x7dc>
   8c20a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c20e:	3b10      	subs	r3, #16
   8c210:	e7de      	b.n	8c1d0 <_svfiprintf_r+0x52e>
   8c212:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8c214:	f8c8 3004 	str.w	r3, [r8, #4]
   8c218:	18d1      	adds	r1, r2, r3
   8c21a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8c21c:	910d      	str	r1, [sp, #52]	; 0x34
   8c21e:	1c58      	adds	r0, r3, #1
   8c220:	2807      	cmp	r0, #7
   8c222:	900c      	str	r0, [sp, #48]	; 0x30
   8c224:	dc02      	bgt.n	8c22c <_svfiprintf_r+0x58a>
   8c226:	f108 0808 	add.w	r8, r8, #8
   8c22a:	e009      	b.n	8c240 <_svfiprintf_r+0x59e>
   8c22c:	4658      	mov	r0, fp
   8c22e:	4649      	mov	r1, r9
   8c230:	aa0b      	add	r2, sp, #44	; 0x2c
   8c232:	f7ff fcb9 	bl	8bba8 <__ssprint_r>
   8c236:	2800      	cmp	r0, #0
   8c238:	f040 8121 	bne.w	8c47e <_svfiprintf_r+0x7dc>
   8c23c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c240:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   8c244:	b1da      	cbz	r2, 8c27e <_svfiprintf_r+0x5dc>
   8c246:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   8c24a:	f8c8 1000 	str.w	r1, [r8]
   8c24e:	990c      	ldr	r1, [sp, #48]	; 0x30
   8c250:	2301      	movs	r3, #1
   8c252:	980d      	ldr	r0, [sp, #52]	; 0x34
   8c254:	f8c8 3004 	str.w	r3, [r8, #4]
   8c258:	1c4b      	adds	r3, r1, #1
   8c25a:	1c42      	adds	r2, r0, #1
   8c25c:	2b07      	cmp	r3, #7
   8c25e:	920d      	str	r2, [sp, #52]	; 0x34
   8c260:	930c      	str	r3, [sp, #48]	; 0x30
   8c262:	dc02      	bgt.n	8c26a <_svfiprintf_r+0x5c8>
   8c264:	f108 0808 	add.w	r8, r8, #8
   8c268:	e009      	b.n	8c27e <_svfiprintf_r+0x5dc>
   8c26a:	4658      	mov	r0, fp
   8c26c:	4649      	mov	r1, r9
   8c26e:	aa0b      	add	r2, sp, #44	; 0x2c
   8c270:	f7ff fc9a 	bl	8bba8 <__ssprint_r>
   8c274:	2800      	cmp	r0, #0
   8c276:	f040 8102 	bne.w	8c47e <_svfiprintf_r+0x7dc>
   8c27a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c27e:	9806      	ldr	r0, [sp, #24]
   8c280:	b1d0      	cbz	r0, 8c2b8 <_svfiprintf_r+0x616>
   8c282:	aa0a      	add	r2, sp, #40	; 0x28
   8c284:	f8c8 2000 	str.w	r2, [r8]
   8c288:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c28a:	2102      	movs	r1, #2
   8c28c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8c28e:	f8c8 1004 	str.w	r1, [r8, #4]
   8c292:	1c51      	adds	r1, r2, #1
   8c294:	1c98      	adds	r0, r3, #2
   8c296:	2907      	cmp	r1, #7
   8c298:	900d      	str	r0, [sp, #52]	; 0x34
   8c29a:	910c      	str	r1, [sp, #48]	; 0x30
   8c29c:	dc02      	bgt.n	8c2a4 <_svfiprintf_r+0x602>
   8c29e:	f108 0808 	add.w	r8, r8, #8
   8c2a2:	e009      	b.n	8c2b8 <_svfiprintf_r+0x616>
   8c2a4:	4658      	mov	r0, fp
   8c2a6:	4649      	mov	r1, r9
   8c2a8:	aa0b      	add	r2, sp, #44	; 0x2c
   8c2aa:	f7ff fc7d 	bl	8bba8 <__ssprint_r>
   8c2ae:	2800      	cmp	r0, #0
   8c2b0:	f040 80e5 	bne.w	8c47e <_svfiprintf_r+0x7dc>
   8c2b4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c2b8:	9b07      	ldr	r3, [sp, #28]
   8c2ba:	2b80      	cmp	r3, #128	; 0x80
   8c2bc:	d13c      	bne.n	8c338 <_svfiprintf_r+0x696>
   8c2be:	9803      	ldr	r0, [sp, #12]
   8c2c0:	9a02      	ldr	r2, [sp, #8]
   8c2c2:	1a83      	subs	r3, r0, r2
   8c2c4:	2b00      	cmp	r3, #0
   8c2c6:	dd37      	ble.n	8c338 <_svfiprintf_r+0x696>
   8c2c8:	4968      	ldr	r1, [pc, #416]	; (8c46c <_svfiprintf_r+0x7ca>)
   8c2ca:	2b10      	cmp	r3, #16
   8c2cc:	f8c8 1000 	str.w	r1, [r8]
   8c2d0:	dd1b      	ble.n	8c30a <_svfiprintf_r+0x668>
   8c2d2:	980c      	ldr	r0, [sp, #48]	; 0x30
   8c2d4:	2210      	movs	r2, #16
   8c2d6:	990d      	ldr	r1, [sp, #52]	; 0x34
   8c2d8:	f8c8 2004 	str.w	r2, [r8, #4]
   8c2dc:	1c42      	adds	r2, r0, #1
   8c2de:	3110      	adds	r1, #16
   8c2e0:	2a07      	cmp	r2, #7
   8c2e2:	910d      	str	r1, [sp, #52]	; 0x34
   8c2e4:	920c      	str	r2, [sp, #48]	; 0x30
   8c2e6:	dc02      	bgt.n	8c2ee <_svfiprintf_r+0x64c>
   8c2e8:	f108 0808 	add.w	r8, r8, #8
   8c2ec:	e00b      	b.n	8c306 <_svfiprintf_r+0x664>
   8c2ee:	4658      	mov	r0, fp
   8c2f0:	4649      	mov	r1, r9
   8c2f2:	aa0b      	add	r2, sp, #44	; 0x2c
   8c2f4:	9300      	str	r3, [sp, #0]
   8c2f6:	f7ff fc57 	bl	8bba8 <__ssprint_r>
   8c2fa:	9b00      	ldr	r3, [sp, #0]
   8c2fc:	2800      	cmp	r0, #0
   8c2fe:	f040 80be 	bne.w	8c47e <_svfiprintf_r+0x7dc>
   8c302:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c306:	3b10      	subs	r3, #16
   8c308:	e7de      	b.n	8c2c8 <_svfiprintf_r+0x626>
   8c30a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c30c:	980d      	ldr	r0, [sp, #52]	; 0x34
   8c30e:	1c51      	adds	r1, r2, #1
   8c310:	f8c8 3004 	str.w	r3, [r8, #4]
   8c314:	2907      	cmp	r1, #7
   8c316:	4403      	add	r3, r0
   8c318:	930d      	str	r3, [sp, #52]	; 0x34
   8c31a:	910c      	str	r1, [sp, #48]	; 0x30
   8c31c:	dc02      	bgt.n	8c324 <_svfiprintf_r+0x682>
   8c31e:	f108 0808 	add.w	r8, r8, #8
   8c322:	e009      	b.n	8c338 <_svfiprintf_r+0x696>
   8c324:	4658      	mov	r0, fp
   8c326:	4649      	mov	r1, r9
   8c328:	aa0b      	add	r2, sp, #44	; 0x2c
   8c32a:	f7ff fc3d 	bl	8bba8 <__ssprint_r>
   8c32e:	2800      	cmp	r0, #0
   8c330:	f040 80a5 	bne.w	8c47e <_svfiprintf_r+0x7dc>
   8c334:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c338:	1b2d      	subs	r5, r5, r4
   8c33a:	2d00      	cmp	r5, #0
   8c33c:	dd34      	ble.n	8c3a8 <_svfiprintf_r+0x706>
   8c33e:	484b      	ldr	r0, [pc, #300]	; (8c46c <_svfiprintf_r+0x7ca>)
   8c340:	2d10      	cmp	r5, #16
   8c342:	f8c8 0000 	str.w	r0, [r8]
   8c346:	dd19      	ble.n	8c37c <_svfiprintf_r+0x6da>
   8c348:	980c      	ldr	r0, [sp, #48]	; 0x30
   8c34a:	990d      	ldr	r1, [sp, #52]	; 0x34
   8c34c:	1c43      	adds	r3, r0, #1
   8c34e:	2210      	movs	r2, #16
   8c350:	3110      	adds	r1, #16
   8c352:	2b07      	cmp	r3, #7
   8c354:	f8c8 2004 	str.w	r2, [r8, #4]
   8c358:	910d      	str	r1, [sp, #52]	; 0x34
   8c35a:	930c      	str	r3, [sp, #48]	; 0x30
   8c35c:	dc02      	bgt.n	8c364 <_svfiprintf_r+0x6c2>
   8c35e:	f108 0808 	add.w	r8, r8, #8
   8c362:	e009      	b.n	8c378 <_svfiprintf_r+0x6d6>
   8c364:	4658      	mov	r0, fp
   8c366:	4649      	mov	r1, r9
   8c368:	aa0b      	add	r2, sp, #44	; 0x2c
   8c36a:	f7ff fc1d 	bl	8bba8 <__ssprint_r>
   8c36e:	2800      	cmp	r0, #0
   8c370:	f040 8085 	bne.w	8c47e <_svfiprintf_r+0x7dc>
   8c374:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c378:	3d10      	subs	r5, #16
   8c37a:	e7e0      	b.n	8c33e <_svfiprintf_r+0x69c>
   8c37c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c37e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8c380:	1c51      	adds	r1, r2, #1
   8c382:	f8c8 5004 	str.w	r5, [r8, #4]
   8c386:	2907      	cmp	r1, #7
   8c388:	441d      	add	r5, r3
   8c38a:	950d      	str	r5, [sp, #52]	; 0x34
   8c38c:	910c      	str	r1, [sp, #48]	; 0x30
   8c38e:	dc02      	bgt.n	8c396 <_svfiprintf_r+0x6f4>
   8c390:	f108 0808 	add.w	r8, r8, #8
   8c394:	e008      	b.n	8c3a8 <_svfiprintf_r+0x706>
   8c396:	4658      	mov	r0, fp
   8c398:	4649      	mov	r1, r9
   8c39a:	aa0b      	add	r2, sp, #44	; 0x2c
   8c39c:	f7ff fc04 	bl	8bba8 <__ssprint_r>
   8c3a0:	2800      	cmp	r0, #0
   8c3a2:	d16c      	bne.n	8c47e <_svfiprintf_r+0x7dc>
   8c3a4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c3a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8c3aa:	980d      	ldr	r0, [sp, #52]	; 0x34
   8c3ac:	1c5a      	adds	r2, r3, #1
   8c3ae:	f8c8 4004 	str.w	r4, [r8, #4]
   8c3b2:	2a07      	cmp	r2, #7
   8c3b4:	4404      	add	r4, r0
   8c3b6:	f8c8 a000 	str.w	sl, [r8]
   8c3ba:	940d      	str	r4, [sp, #52]	; 0x34
   8c3bc:	920c      	str	r2, [sp, #48]	; 0x30
   8c3be:	dc02      	bgt.n	8c3c6 <_svfiprintf_r+0x724>
   8c3c0:	f108 0308 	add.w	r3, r8, #8
   8c3c4:	e007      	b.n	8c3d6 <_svfiprintf_r+0x734>
   8c3c6:	4658      	mov	r0, fp
   8c3c8:	4649      	mov	r1, r9
   8c3ca:	aa0b      	add	r2, sp, #44	; 0x2c
   8c3cc:	f7ff fbec 	bl	8bba8 <__ssprint_r>
   8c3d0:	2800      	cmp	r0, #0
   8c3d2:	d154      	bne.n	8c47e <_svfiprintf_r+0x7dc>
   8c3d4:	ab18      	add	r3, sp, #96	; 0x60
   8c3d6:	077a      	lsls	r2, r7, #29
   8c3d8:	d40b      	bmi.n	8c3f2 <_svfiprintf_r+0x750>
   8c3da:	9804      	ldr	r0, [sp, #16]
   8c3dc:	9b02      	ldr	r3, [sp, #8]
   8c3de:	9a03      	ldr	r2, [sp, #12]
   8c3e0:	990d      	ldr	r1, [sp, #52]	; 0x34
   8c3e2:	4293      	cmp	r3, r2
   8c3e4:	bfac      	ite	ge
   8c3e6:	18c0      	addge	r0, r0, r3
   8c3e8:	1880      	addlt	r0, r0, r2
   8c3ea:	9004      	str	r0, [sp, #16]
   8c3ec:	2900      	cmp	r1, #0
   8c3ee:	d036      	beq.n	8c45e <_svfiprintf_r+0x7bc>
   8c3f0:	e02f      	b.n	8c452 <_svfiprintf_r+0x7b0>
   8c3f2:	9c03      	ldr	r4, [sp, #12]
   8c3f4:	9902      	ldr	r1, [sp, #8]
   8c3f6:	1a64      	subs	r4, r4, r1
   8c3f8:	2c00      	cmp	r4, #0
   8c3fa:	ddee      	ble.n	8c3da <_svfiprintf_r+0x738>
   8c3fc:	481a      	ldr	r0, [pc, #104]	; (8c468 <_svfiprintf_r+0x7c6>)
   8c3fe:	2c10      	cmp	r4, #16
   8c400:	6018      	str	r0, [r3, #0]
   8c402:	dd15      	ble.n	8c430 <_svfiprintf_r+0x78e>
   8c404:	990c      	ldr	r1, [sp, #48]	; 0x30
   8c406:	2010      	movs	r0, #16
   8c408:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8c40a:	6058      	str	r0, [r3, #4]
   8c40c:	1c48      	adds	r0, r1, #1
   8c40e:	3210      	adds	r2, #16
   8c410:	2807      	cmp	r0, #7
   8c412:	920d      	str	r2, [sp, #52]	; 0x34
   8c414:	900c      	str	r0, [sp, #48]	; 0x30
   8c416:	dc01      	bgt.n	8c41c <_svfiprintf_r+0x77a>
   8c418:	3308      	adds	r3, #8
   8c41a:	e007      	b.n	8c42c <_svfiprintf_r+0x78a>
   8c41c:	4658      	mov	r0, fp
   8c41e:	4649      	mov	r1, r9
   8c420:	aa0b      	add	r2, sp, #44	; 0x2c
   8c422:	f7ff fbc1 	bl	8bba8 <__ssprint_r>
   8c426:	2800      	cmp	r0, #0
   8c428:	d129      	bne.n	8c47e <_svfiprintf_r+0x7dc>
   8c42a:	ab18      	add	r3, sp, #96	; 0x60
   8c42c:	3c10      	subs	r4, #16
   8c42e:	e7e5      	b.n	8c3fc <_svfiprintf_r+0x75a>
   8c430:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8c432:	605c      	str	r4, [r3, #4]
   8c434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8c436:	1c51      	adds	r1, r2, #1
   8c438:	191c      	adds	r4, r3, r4
   8c43a:	2907      	cmp	r1, #7
   8c43c:	940d      	str	r4, [sp, #52]	; 0x34
   8c43e:	910c      	str	r1, [sp, #48]	; 0x30
   8c440:	ddcb      	ble.n	8c3da <_svfiprintf_r+0x738>
   8c442:	4658      	mov	r0, fp
   8c444:	4649      	mov	r1, r9
   8c446:	aa0b      	add	r2, sp, #44	; 0x2c
   8c448:	f7ff fbae 	bl	8bba8 <__ssprint_r>
   8c44c:	2800      	cmp	r0, #0
   8c44e:	d0c4      	beq.n	8c3da <_svfiprintf_r+0x738>
   8c450:	e015      	b.n	8c47e <_svfiprintf_r+0x7dc>
   8c452:	4658      	mov	r0, fp
   8c454:	4649      	mov	r1, r9
   8c456:	aa0b      	add	r2, sp, #44	; 0x2c
   8c458:	f7ff fba6 	bl	8bba8 <__ssprint_r>
   8c45c:	b978      	cbnz	r0, 8c47e <_svfiprintf_r+0x7dc>
   8c45e:	2500      	movs	r5, #0
   8c460:	950c      	str	r5, [sp, #48]	; 0x30
   8c462:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8c466:	e445      	b.n	8bcf4 <_svfiprintf_r+0x52>
   8c468:	0008d8b4 	.word	0x0008d8b4
   8c46c:	0008d8c4 	.word	0x0008d8c4
   8c470:	980d      	ldr	r0, [sp, #52]	; 0x34
   8c472:	b120      	cbz	r0, 8c47e <_svfiprintf_r+0x7dc>
   8c474:	4658      	mov	r0, fp
   8c476:	4649      	mov	r1, r9
   8c478:	aa0b      	add	r2, sp, #44	; 0x2c
   8c47a:	f7ff fb95 	bl	8bba8 <__ssprint_r>
   8c47e:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   8c482:	9b04      	ldr	r3, [sp, #16]
   8c484:	f002 0140 	and.w	r1, r2, #64	; 0x40
   8c488:	b208      	sxth	r0, r1
   8c48a:	2800      	cmp	r0, #0
   8c48c:	bf18      	it	ne
   8c48e:	f04f 33ff 	movne.w	r3, #4294967295
   8c492:	4618      	mov	r0, r3
   8c494:	b029      	add	sp, #164	; 0xa4
   8c496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c49a:	bf00      	nop

0008c49c <__aeabi_uldivmod>:
   8c49c:	b94b      	cbnz	r3, 8c4b2 <__aeabi_uldivmod+0x16>
   8c49e:	b942      	cbnz	r2, 8c4b2 <__aeabi_uldivmod+0x16>
   8c4a0:	2900      	cmp	r1, #0
   8c4a2:	bf08      	it	eq
   8c4a4:	2800      	cmpeq	r0, #0
   8c4a6:	d002      	beq.n	8c4ae <__aeabi_uldivmod+0x12>
   8c4a8:	f04f 31ff 	mov.w	r1, #4294967295
   8c4ac:	4608      	mov	r0, r1
   8c4ae:	f000 b83b 	b.w	8c528 <__aeabi_idiv0>
   8c4b2:	b082      	sub	sp, #8
   8c4b4:	46ec      	mov	ip, sp
   8c4b6:	e92d 5000 	stmdb	sp!, {ip, lr}
   8c4ba:	f000 f81d 	bl	8c4f8 <__gnu_uldivmod_helper>
   8c4be:	f8dd e004 	ldr.w	lr, [sp, #4]
   8c4c2:	b002      	add	sp, #8
   8c4c4:	bc0c      	pop	{r2, r3}
   8c4c6:	4770      	bx	lr

0008c4c8 <__gnu_ldivmod_helper>:
   8c4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c4cc:	4616      	mov	r6, r2
   8c4ce:	4698      	mov	r8, r3
   8c4d0:	4604      	mov	r4, r0
   8c4d2:	460d      	mov	r5, r1
   8c4d4:	f000 f82a 	bl	8c52c <__divdi3>
   8c4d8:	fb06 fc01 	mul.w	ip, r6, r1
   8c4dc:	fba6 2300 	umull	r2, r3, r6, r0
   8c4e0:	fb00 c708 	mla	r7, r0, r8, ip
   8c4e4:	18fb      	adds	r3, r7, r3
   8c4e6:	1aa2      	subs	r2, r4, r2
   8c4e8:	eb65 0303 	sbc.w	r3, r5, r3
   8c4ec:	9c06      	ldr	r4, [sp, #24]
   8c4ee:	e9c4 2300 	strd	r2, r3, [r4]
   8c4f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8c4f6:	bf00      	nop

0008c4f8 <__gnu_uldivmod_helper>:
   8c4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c4fc:	4690      	mov	r8, r2
   8c4fe:	4606      	mov	r6, r0
   8c500:	460f      	mov	r7, r1
   8c502:	461d      	mov	r5, r3
   8c504:	f000 f970 	bl	8c7e8 <__udivdi3>
   8c508:	fb00 f305 	mul.w	r3, r0, r5
   8c50c:	fba0 4508 	umull	r4, r5, r0, r8
   8c510:	fb08 3801 	mla	r8, r8, r1, r3
   8c514:	9b06      	ldr	r3, [sp, #24]
   8c516:	4445      	add	r5, r8
   8c518:	1b34      	subs	r4, r6, r4
   8c51a:	eb67 0505 	sbc.w	r5, r7, r5
   8c51e:	e9c3 4500 	strd	r4, r5, [r3]
   8c522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8c526:	bf00      	nop

0008c528 <__aeabi_idiv0>:
   8c528:	4770      	bx	lr
   8c52a:	bf00      	nop

0008c52c <__divdi3>:
   8c52c:	2900      	cmp	r1, #0
   8c52e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8c532:	461d      	mov	r5, r3
   8c534:	f2c0 809d 	blt.w	8c672 <__divdi3+0x146>
   8c538:	2400      	movs	r4, #0
   8c53a:	2d00      	cmp	r5, #0
   8c53c:	f2c0 8094 	blt.w	8c668 <__divdi3+0x13c>
   8c540:	4680      	mov	r8, r0
   8c542:	460f      	mov	r7, r1
   8c544:	4694      	mov	ip, r2
   8c546:	461e      	mov	r6, r3
   8c548:	bbe3      	cbnz	r3, 8c5c4 <__divdi3+0x98>
   8c54a:	428a      	cmp	r2, r1
   8c54c:	d955      	bls.n	8c5fa <__divdi3+0xce>
   8c54e:	fab2 f782 	clz	r7, r2
   8c552:	b147      	cbz	r7, 8c566 <__divdi3+0x3a>
   8c554:	f1c7 0520 	rsb	r5, r7, #32
   8c558:	fa20 f605 	lsr.w	r6, r0, r5
   8c55c:	fa01 f107 	lsl.w	r1, r1, r7
   8c560:	40ba      	lsls	r2, r7
   8c562:	40b8      	lsls	r0, r7
   8c564:	4331      	orrs	r1, r6
   8c566:	0c17      	lsrs	r7, r2, #16
   8c568:	fbb1 f6f7 	udiv	r6, r1, r7
   8c56c:	fa1f fc82 	uxth.w	ip, r2
   8c570:	fb07 1116 	mls	r1, r7, r6, r1
   8c574:	fb0c f506 	mul.w	r5, ip, r6
   8c578:	0c03      	lsrs	r3, r0, #16
   8c57a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8c57e:	429d      	cmp	r5, r3
   8c580:	d908      	bls.n	8c594 <__divdi3+0x68>
   8c582:	1e71      	subs	r1, r6, #1
   8c584:	189b      	adds	r3, r3, r2
   8c586:	f080 8113 	bcs.w	8c7b0 <__divdi3+0x284>
   8c58a:	429d      	cmp	r5, r3
   8c58c:	f240 8110 	bls.w	8c7b0 <__divdi3+0x284>
   8c590:	3e02      	subs	r6, #2
   8c592:	189b      	adds	r3, r3, r2
   8c594:	1b59      	subs	r1, r3, r5
   8c596:	fbb1 f5f7 	udiv	r5, r1, r7
   8c59a:	fb07 1315 	mls	r3, r7, r5, r1
   8c59e:	fb0c fc05 	mul.w	ip, ip, r5
   8c5a2:	b280      	uxth	r0, r0
   8c5a4:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
   8c5a8:	458c      	cmp	ip, r1
   8c5aa:	d907      	bls.n	8c5bc <__divdi3+0x90>
   8c5ac:	1e6b      	subs	r3, r5, #1
   8c5ae:	188a      	adds	r2, r1, r2
   8c5b0:	f080 8100 	bcs.w	8c7b4 <__divdi3+0x288>
   8c5b4:	4594      	cmp	ip, r2
   8c5b6:	f240 80fd 	bls.w	8c7b4 <__divdi3+0x288>
   8c5ba:	3d02      	subs	r5, #2
   8c5bc:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
   8c5c0:	2500      	movs	r5, #0
   8c5c2:	e003      	b.n	8c5cc <__divdi3+0xa0>
   8c5c4:	428b      	cmp	r3, r1
   8c5c6:	d90c      	bls.n	8c5e2 <__divdi3+0xb6>
   8c5c8:	2500      	movs	r5, #0
   8c5ca:	4629      	mov	r1, r5
   8c5cc:	460a      	mov	r2, r1
   8c5ce:	462b      	mov	r3, r5
   8c5d0:	b114      	cbz	r4, 8c5d8 <__divdi3+0xac>
   8c5d2:	4252      	negs	r2, r2
   8c5d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8c5d8:	4610      	mov	r0, r2
   8c5da:	4619      	mov	r1, r3
   8c5dc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8c5e0:	4770      	bx	lr
   8c5e2:	fab3 f583 	clz	r5, r3
   8c5e6:	2d00      	cmp	r5, #0
   8c5e8:	f040 8087 	bne.w	8c6fa <__divdi3+0x1ce>
   8c5ec:	428b      	cmp	r3, r1
   8c5ee:	d301      	bcc.n	8c5f4 <__divdi3+0xc8>
   8c5f0:	4282      	cmp	r2, r0
   8c5f2:	d8ea      	bhi.n	8c5ca <__divdi3+0x9e>
   8c5f4:	2500      	movs	r5, #0
   8c5f6:	2101      	movs	r1, #1
   8c5f8:	e7e8      	b.n	8c5cc <__divdi3+0xa0>
   8c5fa:	b912      	cbnz	r2, 8c602 <__divdi3+0xd6>
   8c5fc:	2601      	movs	r6, #1
   8c5fe:	fbb6 f2f2 	udiv	r2, r6, r2
   8c602:	fab2 f682 	clz	r6, r2
   8c606:	2e00      	cmp	r6, #0
   8c608:	d139      	bne.n	8c67e <__divdi3+0x152>
   8c60a:	1a8e      	subs	r6, r1, r2
   8c60c:	0c13      	lsrs	r3, r2, #16
   8c60e:	fa1f fc82 	uxth.w	ip, r2
   8c612:	2501      	movs	r5, #1
   8c614:	fbb6 f7f3 	udiv	r7, r6, r3
   8c618:	fb03 6117 	mls	r1, r3, r7, r6
   8c61c:	fb0c f807 	mul.w	r8, ip, r7
   8c620:	ea4f 4910 	mov.w	r9, r0, lsr #16
   8c624:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
   8c628:	45b0      	cmp	r8, r6
   8c62a:	d906      	bls.n	8c63a <__divdi3+0x10e>
   8c62c:	1e79      	subs	r1, r7, #1
   8c62e:	18b6      	adds	r6, r6, r2
   8c630:	d202      	bcs.n	8c638 <__divdi3+0x10c>
   8c632:	45b0      	cmp	r8, r6
   8c634:	f200 80d3 	bhi.w	8c7de <__divdi3+0x2b2>
   8c638:	460f      	mov	r7, r1
   8c63a:	ebc8 0606 	rsb	r6, r8, r6
   8c63e:	fbb6 f1f3 	udiv	r1, r6, r3
   8c642:	fb03 6311 	mls	r3, r3, r1, r6
   8c646:	fb0c fc01 	mul.w	ip, ip, r1
   8c64a:	b280      	uxth	r0, r0
   8c64c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   8c650:	459c      	cmp	ip, r3
   8c652:	d906      	bls.n	8c662 <__divdi3+0x136>
   8c654:	1e4e      	subs	r6, r1, #1
   8c656:	189a      	adds	r2, r3, r2
   8c658:	d202      	bcs.n	8c660 <__divdi3+0x134>
   8c65a:	4594      	cmp	ip, r2
   8c65c:	f200 80c2 	bhi.w	8c7e4 <__divdi3+0x2b8>
   8c660:	4631      	mov	r1, r6
   8c662:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   8c666:	e7b1      	b.n	8c5cc <__divdi3+0xa0>
   8c668:	43e4      	mvns	r4, r4
   8c66a:	4252      	negs	r2, r2
   8c66c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8c670:	e766      	b.n	8c540 <__divdi3+0x14>
   8c672:	4240      	negs	r0, r0
   8c674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c678:	f04f 34ff 	mov.w	r4, #4294967295
   8c67c:	e75d      	b.n	8c53a <__divdi3+0xe>
   8c67e:	40b2      	lsls	r2, r6
   8c680:	f1c6 0920 	rsb	r9, r6, #32
   8c684:	fa21 f709 	lsr.w	r7, r1, r9
   8c688:	fa20 f909 	lsr.w	r9, r0, r9
   8c68c:	fa01 f106 	lsl.w	r1, r1, r6
   8c690:	0c13      	lsrs	r3, r2, #16
   8c692:	fbb7 f8f3 	udiv	r8, r7, r3
   8c696:	fa1f fc82 	uxth.w	ip, r2
   8c69a:	fb03 7718 	mls	r7, r3, r8, r7
   8c69e:	fb0c f508 	mul.w	r5, ip, r8
   8c6a2:	ea49 0901 	orr.w	r9, r9, r1
   8c6a6:	ea4f 4119 	mov.w	r1, r9, lsr #16
   8c6aa:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
   8c6ae:	40b0      	lsls	r0, r6
   8c6b0:	42bd      	cmp	r5, r7
   8c6b2:	d90a      	bls.n	8c6ca <__divdi3+0x19e>
   8c6b4:	18bf      	adds	r7, r7, r2
   8c6b6:	f108 36ff 	add.w	r6, r8, #4294967295
   8c6ba:	f080 808e 	bcs.w	8c7da <__divdi3+0x2ae>
   8c6be:	42bd      	cmp	r5, r7
   8c6c0:	f240 808b 	bls.w	8c7da <__divdi3+0x2ae>
   8c6c4:	f1a8 0802 	sub.w	r8, r8, #2
   8c6c8:	18bf      	adds	r7, r7, r2
   8c6ca:	1b79      	subs	r1, r7, r5
   8c6cc:	fbb1 f5f3 	udiv	r5, r1, r3
   8c6d0:	fb03 1715 	mls	r7, r3, r5, r1
   8c6d4:	fb0c f605 	mul.w	r6, ip, r5
   8c6d8:	fa1f f989 	uxth.w	r9, r9
   8c6dc:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
   8c6e0:	428e      	cmp	r6, r1
   8c6e2:	d906      	bls.n	8c6f2 <__divdi3+0x1c6>
   8c6e4:	1e6f      	subs	r7, r5, #1
   8c6e6:	1889      	adds	r1, r1, r2
   8c6e8:	d271      	bcs.n	8c7ce <__divdi3+0x2a2>
   8c6ea:	428e      	cmp	r6, r1
   8c6ec:	d96f      	bls.n	8c7ce <__divdi3+0x2a2>
   8c6ee:	3d02      	subs	r5, #2
   8c6f0:	1889      	adds	r1, r1, r2
   8c6f2:	1b8e      	subs	r6, r1, r6
   8c6f4:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
   8c6f8:	e78c      	b.n	8c614 <__divdi3+0xe8>
   8c6fa:	f1c5 0120 	rsb	r1, r5, #32
   8c6fe:	fa22 f301 	lsr.w	r3, r2, r1
   8c702:	fa06 f605 	lsl.w	r6, r6, r5
   8c706:	fa27 f201 	lsr.w	r2, r7, r1
   8c70a:	fa07 f705 	lsl.w	r7, r7, r5
   8c70e:	fa20 f101 	lsr.w	r1, r0, r1
   8c712:	431e      	orrs	r6, r3
   8c714:	ea4f 4916 	mov.w	r9, r6, lsr #16
   8c718:	fbb2 f8f9 	udiv	r8, r2, r9
   8c71c:	fa1f fa86 	uxth.w	sl, r6
   8c720:	fb09 2218 	mls	r2, r9, r8, r2
   8c724:	fb0a fb08 	mul.w	fp, sl, r8
   8c728:	430f      	orrs	r7, r1
   8c72a:	0c3b      	lsrs	r3, r7, #16
   8c72c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8c730:	4593      	cmp	fp, r2
   8c732:	fa0c fc05 	lsl.w	ip, ip, r5
   8c736:	d908      	bls.n	8c74a <__divdi3+0x21e>
   8c738:	1992      	adds	r2, r2, r6
   8c73a:	f108 31ff 	add.w	r1, r8, #4294967295
   8c73e:	d24a      	bcs.n	8c7d6 <__divdi3+0x2aa>
   8c740:	4593      	cmp	fp, r2
   8c742:	d948      	bls.n	8c7d6 <__divdi3+0x2aa>
   8c744:	f1a8 0802 	sub.w	r8, r8, #2
   8c748:	1992      	adds	r2, r2, r6
   8c74a:	ebcb 0302 	rsb	r3, fp, r2
   8c74e:	fbb3 f1f9 	udiv	r1, r3, r9
   8c752:	fb09 3211 	mls	r2, r9, r1, r3
   8c756:	fb0a fa01 	mul.w	sl, sl, r1
   8c75a:	b2bf      	uxth	r7, r7
   8c75c:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
   8c760:	459a      	cmp	sl, r3
   8c762:	d906      	bls.n	8c772 <__divdi3+0x246>
   8c764:	1e4a      	subs	r2, r1, #1
   8c766:	199b      	adds	r3, r3, r6
   8c768:	d233      	bcs.n	8c7d2 <__divdi3+0x2a6>
   8c76a:	459a      	cmp	sl, r3
   8c76c:	d931      	bls.n	8c7d2 <__divdi3+0x2a6>
   8c76e:	3902      	subs	r1, #2
   8c770:	199b      	adds	r3, r3, r6
   8c772:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
   8c776:	0c0f      	lsrs	r7, r1, #16
   8c778:	fa1f f88c 	uxth.w	r8, ip
   8c77c:	fb08 f607 	mul.w	r6, r8, r7
   8c780:	b28a      	uxth	r2, r1
   8c782:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   8c786:	fb08 f802 	mul.w	r8, r8, r2
   8c78a:	fb0c 6202 	mla	r2, ip, r2, r6
   8c78e:	fb0c fc07 	mul.w	ip, ip, r7
   8c792:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   8c796:	4296      	cmp	r6, r2
   8c798:	bf88      	it	hi
   8c79a:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
   8c79e:	ebca 0303 	rsb	r3, sl, r3
   8c7a2:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
   8c7a6:	4563      	cmp	r3, ip
   8c7a8:	d30e      	bcc.n	8c7c8 <__divdi3+0x29c>
   8c7aa:	d005      	beq.n	8c7b8 <__divdi3+0x28c>
   8c7ac:	2500      	movs	r5, #0
   8c7ae:	e70d      	b.n	8c5cc <__divdi3+0xa0>
   8c7b0:	460e      	mov	r6, r1
   8c7b2:	e6ef      	b.n	8c594 <__divdi3+0x68>
   8c7b4:	461d      	mov	r5, r3
   8c7b6:	e701      	b.n	8c5bc <__divdi3+0x90>
   8c7b8:	fa00 f005 	lsl.w	r0, r0, r5
   8c7bc:	fa1f f888 	uxth.w	r8, r8
   8c7c0:	eb08 4502 	add.w	r5, r8, r2, lsl #16
   8c7c4:	42a8      	cmp	r0, r5
   8c7c6:	d2f1      	bcs.n	8c7ac <__divdi3+0x280>
   8c7c8:	3901      	subs	r1, #1
   8c7ca:	2500      	movs	r5, #0
   8c7cc:	e6fe      	b.n	8c5cc <__divdi3+0xa0>
   8c7ce:	463d      	mov	r5, r7
   8c7d0:	e78f      	b.n	8c6f2 <__divdi3+0x1c6>
   8c7d2:	4611      	mov	r1, r2
   8c7d4:	e7cd      	b.n	8c772 <__divdi3+0x246>
   8c7d6:	4688      	mov	r8, r1
   8c7d8:	e7b7      	b.n	8c74a <__divdi3+0x21e>
   8c7da:	46b0      	mov	r8, r6
   8c7dc:	e775      	b.n	8c6ca <__divdi3+0x19e>
   8c7de:	3f02      	subs	r7, #2
   8c7e0:	18b6      	adds	r6, r6, r2
   8c7e2:	e72a      	b.n	8c63a <__divdi3+0x10e>
   8c7e4:	3902      	subs	r1, #2
   8c7e6:	e73c      	b.n	8c662 <__divdi3+0x136>

0008c7e8 <__udivdi3>:
   8c7e8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8c7ec:	4614      	mov	r4, r2
   8c7ee:	4605      	mov	r5, r0
   8c7f0:	460e      	mov	r6, r1
   8c7f2:	2b00      	cmp	r3, #0
   8c7f4:	d13d      	bne.n	8c872 <__udivdi3+0x8a>
   8c7f6:	428a      	cmp	r2, r1
   8c7f8:	d949      	bls.n	8c88e <__udivdi3+0xa6>
   8c7fa:	fab2 f782 	clz	r7, r2
   8c7fe:	b147      	cbz	r7, 8c812 <__udivdi3+0x2a>
   8c800:	f1c7 0120 	rsb	r1, r7, #32
   8c804:	fa20 f201 	lsr.w	r2, r0, r1
   8c808:	fa06 f607 	lsl.w	r6, r6, r7
   8c80c:	40bc      	lsls	r4, r7
   8c80e:	40bd      	lsls	r5, r7
   8c810:	4316      	orrs	r6, r2
   8c812:	0c22      	lsrs	r2, r4, #16
   8c814:	fbb6 f0f2 	udiv	r0, r6, r2
   8c818:	b2a1      	uxth	r1, r4
   8c81a:	fb02 6610 	mls	r6, r2, r0, r6
   8c81e:	fb01 f300 	mul.w	r3, r1, r0
   8c822:	0c2f      	lsrs	r7, r5, #16
   8c824:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   8c828:	42b3      	cmp	r3, r6
   8c82a:	d908      	bls.n	8c83e <__udivdi3+0x56>
   8c82c:	1e47      	subs	r7, r0, #1
   8c82e:	1936      	adds	r6, r6, r4
   8c830:	f080 80fa 	bcs.w	8ca28 <__udivdi3+0x240>
   8c834:	42b3      	cmp	r3, r6
   8c836:	f240 80f7 	bls.w	8ca28 <__udivdi3+0x240>
   8c83a:	3802      	subs	r0, #2
   8c83c:	1936      	adds	r6, r6, r4
   8c83e:	1af6      	subs	r6, r6, r3
   8c840:	fbb6 f3f2 	udiv	r3, r6, r2
   8c844:	fb02 6213 	mls	r2, r2, r3, r6
   8c848:	fb01 f103 	mul.w	r1, r1, r3
   8c84c:	b2ad      	uxth	r5, r5
   8c84e:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
   8c852:	4291      	cmp	r1, r2
   8c854:	d907      	bls.n	8c866 <__udivdi3+0x7e>
   8c856:	1e5e      	subs	r6, r3, #1
   8c858:	1912      	adds	r2, r2, r4
   8c85a:	f080 80e7 	bcs.w	8ca2c <__udivdi3+0x244>
   8c85e:	4291      	cmp	r1, r2
   8c860:	f240 80e4 	bls.w	8ca2c <__udivdi3+0x244>
   8c864:	3b02      	subs	r3, #2
   8c866:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   8c86a:	2100      	movs	r1, #0
   8c86c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8c870:	4770      	bx	lr
   8c872:	428b      	cmp	r3, r1
   8c874:	d843      	bhi.n	8c8fe <__udivdi3+0x116>
   8c876:	fab3 f483 	clz	r4, r3
   8c87a:	2c00      	cmp	r4, #0
   8c87c:	d142      	bne.n	8c904 <__udivdi3+0x11c>
   8c87e:	428b      	cmp	r3, r1
   8c880:	d302      	bcc.n	8c888 <__udivdi3+0xa0>
   8c882:	4282      	cmp	r2, r0
   8c884:	f200 80e1 	bhi.w	8ca4a <__udivdi3+0x262>
   8c888:	2100      	movs	r1, #0
   8c88a:	2001      	movs	r0, #1
   8c88c:	e7ee      	b.n	8c86c <__udivdi3+0x84>
   8c88e:	b912      	cbnz	r2, 8c896 <__udivdi3+0xae>
   8c890:	2701      	movs	r7, #1
   8c892:	fbb7 f4f2 	udiv	r4, r7, r2
   8c896:	fab4 f284 	clz	r2, r4
   8c89a:	2a00      	cmp	r2, #0
   8c89c:	f040 8089 	bne.w	8c9b2 <__udivdi3+0x1ca>
   8c8a0:	1b0a      	subs	r2, r1, r4
   8c8a2:	0c23      	lsrs	r3, r4, #16
   8c8a4:	b2a7      	uxth	r7, r4
   8c8a6:	2101      	movs	r1, #1
   8c8a8:	fbb2 f6f3 	udiv	r6, r2, r3
   8c8ac:	fb03 2216 	mls	r2, r3, r6, r2
   8c8b0:	fb07 f006 	mul.w	r0, r7, r6
   8c8b4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   8c8b8:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   8c8bc:	4290      	cmp	r0, r2
   8c8be:	d907      	bls.n	8c8d0 <__udivdi3+0xe8>
   8c8c0:	1912      	adds	r2, r2, r4
   8c8c2:	f106 3cff 	add.w	ip, r6, #4294967295
   8c8c6:	d202      	bcs.n	8c8ce <__udivdi3+0xe6>
   8c8c8:	4290      	cmp	r0, r2
   8c8ca:	f200 80d0 	bhi.w	8ca6e <__udivdi3+0x286>
   8c8ce:	4666      	mov	r6, ip
   8c8d0:	1a12      	subs	r2, r2, r0
   8c8d2:	fbb2 f0f3 	udiv	r0, r2, r3
   8c8d6:	fb03 2310 	mls	r3, r3, r0, r2
   8c8da:	fb07 f700 	mul.w	r7, r7, r0
   8c8de:	b2ad      	uxth	r5, r5
   8c8e0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   8c8e4:	429f      	cmp	r7, r3
   8c8e6:	d907      	bls.n	8c8f8 <__udivdi3+0x110>
   8c8e8:	1e42      	subs	r2, r0, #1
   8c8ea:	191b      	adds	r3, r3, r4
   8c8ec:	f080 80a0 	bcs.w	8ca30 <__udivdi3+0x248>
   8c8f0:	429f      	cmp	r7, r3
   8c8f2:	f240 809d 	bls.w	8ca30 <__udivdi3+0x248>
   8c8f6:	3802      	subs	r0, #2
   8c8f8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   8c8fc:	e7b6      	b.n	8c86c <__udivdi3+0x84>
   8c8fe:	2100      	movs	r1, #0
   8c900:	4608      	mov	r0, r1
   8c902:	e7b3      	b.n	8c86c <__udivdi3+0x84>
   8c904:	f1c4 0620 	rsb	r6, r4, #32
   8c908:	fa22 f706 	lsr.w	r7, r2, r6
   8c90c:	fa03 f304 	lsl.w	r3, r3, r4
   8c910:	fa21 f506 	lsr.w	r5, r1, r6
   8c914:	fa01 f104 	lsl.w	r1, r1, r4
   8c918:	fa20 f606 	lsr.w	r6, r0, r6
   8c91c:	433b      	orrs	r3, r7
   8c91e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8c922:	fbb5 f7fc 	udiv	r7, r5, ip
   8c926:	fa1f f883 	uxth.w	r8, r3
   8c92a:	fb0c 5517 	mls	r5, ip, r7, r5
   8c92e:	fb08 f907 	mul.w	r9, r8, r7
   8c932:	ea46 0a01 	orr.w	sl, r6, r1
   8c936:	ea4f 411a 	mov.w	r1, sl, lsr #16
   8c93a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   8c93e:	45a9      	cmp	r9, r5
   8c940:	fa02 f204 	lsl.w	r2, r2, r4
   8c944:	d904      	bls.n	8c950 <__udivdi3+0x168>
   8c946:	1e7e      	subs	r6, r7, #1
   8c948:	18ed      	adds	r5, r5, r3
   8c94a:	f0c0 8081 	bcc.w	8ca50 <__udivdi3+0x268>
   8c94e:	4637      	mov	r7, r6
   8c950:	ebc9 0105 	rsb	r1, r9, r5
   8c954:	fbb1 f6fc 	udiv	r6, r1, ip
   8c958:	fb0c 1516 	mls	r5, ip, r6, r1
   8c95c:	fb08 f806 	mul.w	r8, r8, r6
   8c960:	fa1f fa8a 	uxth.w	sl, sl
   8c964:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
   8c968:	4588      	cmp	r8, r1
   8c96a:	d903      	bls.n	8c974 <__udivdi3+0x18c>
   8c96c:	1e75      	subs	r5, r6, #1
   8c96e:	18c9      	adds	r1, r1, r3
   8c970:	d374      	bcc.n	8ca5c <__udivdi3+0x274>
   8c972:	462e      	mov	r6, r5
   8c974:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   8c978:	0c37      	lsrs	r7, r6, #16
   8c97a:	fa1f fc82 	uxth.w	ip, r2
   8c97e:	fb0c f507 	mul.w	r5, ip, r7
   8c982:	0c12      	lsrs	r2, r2, #16
   8c984:	b2b3      	uxth	r3, r6
   8c986:	fb0c fc03 	mul.w	ip, ip, r3
   8c98a:	fb02 5303 	mla	r3, r2, r3, r5
   8c98e:	fb02 f207 	mul.w	r2, r2, r7
   8c992:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8c996:	429d      	cmp	r5, r3
   8c998:	bf88      	it	hi
   8c99a:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
   8c99e:	ebc8 0101 	rsb	r1, r8, r1
   8c9a2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8c9a6:	4291      	cmp	r1, r2
   8c9a8:	d34c      	bcc.n	8ca44 <__udivdi3+0x25c>
   8c9aa:	d043      	beq.n	8ca34 <__udivdi3+0x24c>
   8c9ac:	4630      	mov	r0, r6
   8c9ae:	2100      	movs	r1, #0
   8c9b0:	e75c      	b.n	8c86c <__udivdi3+0x84>
   8c9b2:	4094      	lsls	r4, r2
   8c9b4:	f1c2 0520 	rsb	r5, r2, #32
   8c9b8:	fa21 f605 	lsr.w	r6, r1, r5
   8c9bc:	fa20 f505 	lsr.w	r5, r0, r5
   8c9c0:	fa01 f102 	lsl.w	r1, r1, r2
   8c9c4:	0c23      	lsrs	r3, r4, #16
   8c9c6:	fbb6 fcf3 	udiv	ip, r6, r3
   8c9ca:	b2a7      	uxth	r7, r4
   8c9cc:	fb03 661c 	mls	r6, r3, ip, r6
   8c9d0:	fb07 f80c 	mul.w	r8, r7, ip
   8c9d4:	4329      	orrs	r1, r5
   8c9d6:	0c0d      	lsrs	r5, r1, #16
   8c9d8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   8c9dc:	45b0      	cmp	r8, r6
   8c9de:	fa00 f502 	lsl.w	r5, r0, r2
   8c9e2:	d908      	bls.n	8c9f6 <__udivdi3+0x20e>
   8c9e4:	1936      	adds	r6, r6, r4
   8c9e6:	f10c 30ff 	add.w	r0, ip, #4294967295
   8c9ea:	d23e      	bcs.n	8ca6a <__udivdi3+0x282>
   8c9ec:	45b0      	cmp	r8, r6
   8c9ee:	d93c      	bls.n	8ca6a <__udivdi3+0x282>
   8c9f0:	f1ac 0c02 	sub.w	ip, ip, #2
   8c9f4:	1936      	adds	r6, r6, r4
   8c9f6:	ebc8 0206 	rsb	r2, r8, r6
   8c9fa:	fbb2 f0f3 	udiv	r0, r2, r3
   8c9fe:	fb03 2610 	mls	r6, r3, r0, r2
   8ca02:	fb07 f800 	mul.w	r8, r7, r0
   8ca06:	b289      	uxth	r1, r1
   8ca08:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   8ca0c:	4590      	cmp	r8, r2
   8ca0e:	d906      	bls.n	8ca1e <__udivdi3+0x236>
   8ca10:	1e46      	subs	r6, r0, #1
   8ca12:	1912      	adds	r2, r2, r4
   8ca14:	d227      	bcs.n	8ca66 <__udivdi3+0x27e>
   8ca16:	4590      	cmp	r8, r2
   8ca18:	d925      	bls.n	8ca66 <__udivdi3+0x27e>
   8ca1a:	3802      	subs	r0, #2
   8ca1c:	1912      	adds	r2, r2, r4
   8ca1e:	ebc8 0202 	rsb	r2, r8, r2
   8ca22:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
   8ca26:	e73f      	b.n	8c8a8 <__udivdi3+0xc0>
   8ca28:	4638      	mov	r0, r7
   8ca2a:	e708      	b.n	8c83e <__udivdi3+0x56>
   8ca2c:	4633      	mov	r3, r6
   8ca2e:	e71a      	b.n	8c866 <__udivdi3+0x7e>
   8ca30:	4610      	mov	r0, r2
   8ca32:	e761      	b.n	8c8f8 <__udivdi3+0x110>
   8ca34:	fa00 f004 	lsl.w	r0, r0, r4
   8ca38:	fa1f fc8c 	uxth.w	ip, ip
   8ca3c:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
   8ca40:	4298      	cmp	r0, r3
   8ca42:	d2b3      	bcs.n	8c9ac <__udivdi3+0x1c4>
   8ca44:	1e70      	subs	r0, r6, #1
   8ca46:	2100      	movs	r1, #0
   8ca48:	e710      	b.n	8c86c <__udivdi3+0x84>
   8ca4a:	4621      	mov	r1, r4
   8ca4c:	4620      	mov	r0, r4
   8ca4e:	e70d      	b.n	8c86c <__udivdi3+0x84>
   8ca50:	45a9      	cmp	r9, r5
   8ca52:	f67f af7c 	bls.w	8c94e <__udivdi3+0x166>
   8ca56:	3f02      	subs	r7, #2
   8ca58:	18ed      	adds	r5, r5, r3
   8ca5a:	e779      	b.n	8c950 <__udivdi3+0x168>
   8ca5c:	4588      	cmp	r8, r1
   8ca5e:	d988      	bls.n	8c972 <__udivdi3+0x18a>
   8ca60:	3e02      	subs	r6, #2
   8ca62:	18c9      	adds	r1, r1, r3
   8ca64:	e786      	b.n	8c974 <__udivdi3+0x18c>
   8ca66:	4630      	mov	r0, r6
   8ca68:	e7d9      	b.n	8ca1e <__udivdi3+0x236>
   8ca6a:	4684      	mov	ip, r0
   8ca6c:	e7c3      	b.n	8c9f6 <__udivdi3+0x20e>
   8ca6e:	3e02      	subs	r6, #2
   8ca70:	1912      	adds	r2, r2, r4
   8ca72:	e72d      	b.n	8c8d0 <__udivdi3+0xe8>

0008ca74 <sd_trans_multipliers>:
   8ca74:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   8ca84:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   8ca94:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   8caa4:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0008cab4 <sd_mmc_trans_units>:
   8cab4:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0008cad0 <mmc_trans_multipliers>:
   8cad0:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   8cae0:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   8caf0:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   8cb00:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   8cb10:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   8cb20:	0010 0000 0020 0000 0040 0000 0080 0000     .... ...@.......
   8cb30:	0100 0000 0200 0000 0400 0000 432a 534c     ............*CLS
   8cb40:	0000 0000 452a 4553 0000 0000 452a 4553     ....*ESE....*ESE
   8cb50:	003f 0000 452a 5253 003f 0000 492a 4e44     ?...*ESR?...*IDN
   8cb60:	003f 0000 4f2a 4350 0000 0000 4f2a 4350     ?...*OPC....*OPC
   8cb70:	003f 0000 522a 5453 0000 0000 532a 4552     ?...*RST....*SRE
   8cb80:	0000 0000 532a 4552 003f 0000 532a 4254     ....*SRE?...*STB
   8cb90:	003f 0000 542a 5453 003f 0000 572a 4941     ?...*TST?...*WAI
   8cba0:	0000 0000 5953 5453 6d65 453a 5252 726f     ....SYSTem:ERRor
   8cbb0:	003f 0000 5953 5453 6d65 453a 5252 726f     ?...SYSTem:ERRor
   8cbc0:	4e3a 5845 3f54 0000 5953 5453 6d65 453a     :NEXT?..SYSTem:E
   8cbd0:	5252 726f 433a 554f 744e 003f 5953 5453     RRor:COUNt?.SYST
   8cbe0:	6d65 563a 5245 6953 6e6f 003f 5953 5453     em:VERSion?.SYST
   8cbf0:	6d65 543a 5059 3f45 0000 0000 5953 5453     em:TYPE?....SYST
   8cc00:	6d65 4e3a 4d41 3f45 0000 0000 5953 5453     em:NAME?....SYST
   8cc10:	6d65 443a 5345 3f43 0000 0000 5953 5453     em:DESC?....SYST
   8cc20:	6d65 533a 3f4e 0000 5953 5453 6d65 443a     em:SN?..SYSTem:D
   8cc30:	4f50 6557 3f72 0000 5953 5453 6d65 4d3a     POWer?..SYSTem:M
   8cc40:	5841 7543 7272 6e65 3f74 0000 5953 5453     AXCurrent?..SYST
   8cc50:	6d65 4e3a 4d4f 7543 7272 6e65 3f74 0000     em:NOMCurrent?..
   8cc60:	5453 5441 7375 533a 4344 7261 7364 6174     STATus:SDCardsta
   8cc70:	7574 3f73 0000 0000 5453 5441 7375 4c3a     tus?....STATus:L
   8cc80:	4445 7453 7461 7375 003f 0000 5453 5441     EDStatus?...STAT
   8cc90:	7375 423a 5455 6f74 736e 6174 7574 3f73     us:BUTtonstatus?
   8cca0:	0000 0000 4f43 464e 6769 7275 3a65 454c     ....CONFigure:LE
   8ccb0:	0044 0000 4f43 464e 6769 7275 3a65 4f50     D...CONFigure:PO
   8ccc0:	6557 0072 4f43 464e 6769 7275 3a65 4545     Wer.CONFigure:EE
   8ccd0:	5250 4d4f 0000 0000 454d 5341 7275 3a65     PROM....MEASure:
   8cce0:	4545 5250 4d4f 003f 4f43 464e 6769 7275     EEPROM?.CONFigur
   8ccf0:	3a65 4f43 6e55 6574 3a72 4e45 6241 656c     e:COUnter:ENAble
   8cd00:	0000 0000 4f43 464e 6769 7275 3a65 4f43     ....CONFigure:CO
   8cd10:	6e55 6574 3a72 4944 6153 6c62 0065 0000     Unter:DISable...
   8cd20:	4f43 464e 6769 7275 3a65 4f43 6e55 6574     CONFigure:COUnte
   8cd30:	3a72 5550 6853 0000 4f43 464e 6769 7275     r:PUSh..CONFigur
   8cd40:	3a65 4f43 6e55 6574 3a72 5550 6c4c 0000     e:COUnter:PULl..
   8cd50:	4f43 464e 6769 7275 3a65 4f43 6e55 6574     CONFigure:COUnte
   8cd60:	3a72 4553 4954 746e 6765 6172 6974 6e6f     r:SETIntegration
   8cd70:	6954 656d 0000 0000 4f43 464e 6769 7275     Time....CONFigur
   8cd80:	3a65 4f43 6e55 6574 3a72 4553 5454 4c54     e:COUnter:SETTTL
   8cd90:	6e49 7570 0074 0000 4f43 464e 6769 7275     Input...CONFigur
   8cda0:	3a65 4f43 6e55 6574 3a72 3a41 4e45 6261     e:COUnter:A:ENab
   8cdb0:	656c 003f 4f43 464e 6769 7275 3a65 4f43     le?.CONFigure:CO
   8cdc0:	6e55 6574 3a72 3a41 4e45 6261 656c 0000     Unter:A:ENable..
   8cdd0:	4f43 464e 6769 7275 3a65 4f43 6e55 6574     CONFigure:COUnte
   8cde0:	3a72 3a42 4e45 6261 656c 003f 4f43 464e     r:B:ENable?.CONF
   8cdf0:	6769 7275 3a65 4f43 6e55 6574 3a72 3a42     igure:COUnter:B:
   8ce00:	4e45 6261 656c 0000 4f43 464e 6769 7275     ENable..CONFigur
   8ce10:	3a65 4f43 6e55 6574 3a72 3a41 6552 6461     e:COUnter:A:Read
   8ce20:	003f 0000 4f43 464e 6769 7275 3a65 4f43     ?...CONFigure:CO
   8ce30:	6e55 6574 3a72 3a42 6552 6461 003f 0000     Unter:B:Read?...
   8ce40:	4f43 464e 6769 7275 3a65 4f43 6e55 6574     CONFigure:COUnte
   8ce50:	3a72 3a41 4e49 6554 7267 7461 6f69 746e     r:A:INTegrationt
   8ce60:	6d69 3f65 0000 0000 4f43 464e 6769 7275     ime?....CONFigur
   8ce70:	3a65 4f43 6e55 6574 3a72 3a41 4e49 6554     e:COUnter:A:INTe
   8ce80:	7267 7461 6f69 746e 6d69 0065 4f43 464e     grationtime.CONF
   8ce90:	6769 7275 3a65 4f43 6e55 6574 3a72 3a42     igure:COUnter:B:
   8cea0:	4e49 6554 7267 7461 6f69 746e 6d69 3f65     INTegrationtime?
   8ceb0:	0000 0000 4f43 464e 6769 7275 3a65 4f43     ....CONFigure:CO
   8cec0:	6e55 6574 3a72 3a42 4e49 6554 7267 7461     Unter:B:INTegrat
   8ced0:	6f69 746e 6d69 0065 4f43 464e 6769 7275     iontime.CONFigur
   8cee0:	3a65 5454 694c 706e 7475 6e65 6261 656c     e:TTLinputenable
   8cef0:	003f 0000 4f43 464e 6769 7275 3a65 5454     ?...CONFigure:TT
   8cf00:	694c 706e 7475 6e65 6261 656c 0000 0000     Linputenable....
   8cf10:	4f43 464e 6769 7275 3a65 5246 5145 6575     CONFigure:FREQue
   8cf20:	636e 3f65 0000 0000 4f43 464e 6769 7275     nce?....CONFigur
   8cf30:	3a65 5246 5145 6575 636e 0065 5453 5441     e:FREQuence.STAT
   8cf40:	7375 513a 4555 7453 6f69 616e 6c62 3f65     us:QUEStionable?
   8cf50:	0000 0000 5453 5441 7375 513a 4555 7453     ....STATus:QUESt
   8cf60:	6f69 616e 6c62 3a65 5645 4e45 3f74 0000     ionable:EVENt?..
   8cf70:	5453 5441 7375 513a 4555 7453 6f69 616e     STATus:QUEStiona
   8cf80:	6c62 3a65 4e45 4241 656c 0000 5453 5441     ble:ENABle..STAT
   8cf90:	7375 513a 4555 7453 6f69 616e 6c62 3a65     us:QUEStionable:
   8cfa0:	4e45 4241 656c 003f 5453 5441 7375 503a     ENABle?.STATus:P
   8cfb0:	4552 6553 0074 0000 454d 5341 7275 3a65     RESet...MEASure:
   8cfc0:	4f56 544c 6761 3a65 4344 003f 4f43 464e     VOLTage:DC?.CONF
   8cfd0:	6769 7275 3a65 4f56 544c 6761 3a65 4344     igure:VOLTage:DC
   8cfe0:	0000 0000 454d 5341 7275 3a65 4f56 544c     ....MEASure:VOLT
   8cff0:	6761 3a65 4344 523a 5441 6f69 003f 0000     age:DC:RATio?...
   8d000:	454d 5341 7275 3a65 4f56 544c 6761 3a65     MEASure:VOLTage:
   8d010:	4341 003f 454d 5341 7275 3a65 5543 5252     AC?.MEASure:CURR
   8d020:	6e65 3a74 4344 003f 454d 5341 7275 3a65     ent:DC?.MEASure:
   8d030:	5543 5252 6e65 3a74 4341 003f 454d 5341     CURRent:AC?.MEAS
   8d040:	7275 3a65 4552 6953 7473 6e61 6563 003f     ure:RESistance?.
   8d050:	454d 5341 7275 3a65 5246 5345 7369 6174     MEASure:FRESista
   8d060:	636e 3f65 0000 0000 454d 5341 7275 3a65     nce?....MEASure:
   8d070:	5246 5145 6575 636e 3f79 0000 454d 5341     FREQuency?..MEAS
   8d080:	7275 3a65 4550 6952 646f 003f               ure:PERiod?.

0008d08c <scpi_commands>:
   8d08c:	cb3c 0008 2d45 0008 cb44 0008 2d85 0008     <...E-..D....-..
   8d09c:	cb4c 0008 2db9 0008 cb54 0008 2de1 0008     L....-..T....-..
   8d0ac:	cb5c 0008 2e1d 0008 cb64 0008 2e51 0008     \.......d...Q...
   8d0bc:	cb6c 0008 2e6d 0008 cb74 0008 2e85 0008     l...m...t.......
   8d0cc:	cb7c 0008 2ea9 0008 cb84 0008 2edd 0008     |...............
   8d0dc:	cb8c 0008 2f05 0008 cb94 0008 2f2d 0008     ...../......-/..
   8d0ec:	cb9c 0008 2f65 0008 cba4 0008 2fa5 0008     ....e/......./..
   8d0fc:	cbb4 0008 2fa5 0008 cbc8 0008 2fe5 0008     ...../......./..
   8d10c:	cbdc 0008 2f89 0008 cbec 0008 3b71 0008     ...../......q;..
   8d11c:	cbfc 0008 3bbd 0008 cc0c 0008 3c09 0008     .....;.......<..
   8d12c:	cc1c 0008 3c55 0008 cc28 0008 3c81 0008     ....U<..(....<..
   8d13c:	cc38 0008 3cb1 0008 cc4c 0008 3cdd 0008     8....<..L....<..
   8d14c:	cc60 0008 3d09 0008 cc78 0008 3d31 0008     `....=..x...1=..
   8d15c:	cc8c 0008 3d59 0008 cca4 0008 3e75 0008     ....Y=......u>..
   8d16c:	ccb4 0008 3dc9 0008 ccc4 0008 3dc1 0008     .....=.......=..
   8d17c:	ccd8 0008 3db9 0008 cce8 0008 3f8d 0008     .....=.......?..
   8d18c:	cd04 0008 3fa1 0008 cd20 0008 3fb5 0008     .....?.. ....?..
   8d19c:	cd38 0008 3fc9 0008 cd50 0008 3f39 0008     8....?..P...9?..
   8d1ac:	cd78 0008 3fdd 0008 cd98 0008 4289 0008     x....?.......B..
   8d1bc:	cdb4 0008 3ff1 0008 cdd0 0008 42c9 0008     .....?.......B..
   8d1cc:	cdec 0008 4035 0008 ce08 0008 4079 0008     ....5@......y@..
   8d1dc:	ce24 0008 40f1 0008 ce40 0008 4309 0008     $....@..@....C..
   8d1ec:	ce68 0008 4169 0008 ce8c 0008 4349 0008     h...iA......IC..
   8d1fc:	ceb4 0008 41bd 0008 ced8 0008 4389 0008     .....A.......C..
   8d20c:	cef4 0008 4211 0008 cf10 0008 43c9 0008     .....B.......C..
   8d21c:	cf28 0008 4255 0008 cf3c 0008 3009 0008     (...UB..<....0..
   8d22c:	cf54 0008 3009 0008 cf70 0008 306d 0008     T....0..p...m0..
   8d23c:	cf8c 0008 3045 0008 cfa8 0008 30a1 0008     ....E0.......0..
   8d24c:	cfb8 0008 2f6d 0008 cfcc 0008 2f6d 0008     ....m/......m/..
   8d25c:	cfe4 0008 2f6d 0008 d000 0008 2f6d 0008     ....m/......m/..
   8d26c:	d014 0008 2f6d 0008 d028 0008 2f6d 0008     ....m/..(...m/..
   8d27c:	d03c 0008 2f6d 0008 d050 0008 2f6d 0008     <...m/..P...m/..
   8d28c:	d068 0008 2f6d 0008 d07c 0008 2f6d 0008     h...m/..|...m/..
	...
   8d2a4:	6f4e 6520 7272 726f 0000 0000 7953 746e     No error....Synt
   8d2b4:	7861 6520 7272 726f 0000 0000 6e49 6176     ax error....Inva
   8d2c4:	696c 2064 6573 6170 6172 6f74 0072 0000     lid separator...
   8d2d4:	6e55 6564 6966 656e 2064 6568 6461 7265     Undefined header
   8d2e4:	0000 0000 6150 6172 656d 6574 2072 6f6e     ....Parameter no
   8d2f4:	2074 6c61 6f6c 6577 0064 0000 694d 7373     t allowed...Miss
   8d304:	6e69 2067 6170 6172 656d 6574 0072 0000     ing parameter...
   8d314:	6e49 6176 696c 2064 7573 6666 7869 0000     Invalid suffix..
   8d324:	7553 6666 7869 6e20 746f 6120 6c6c 776f     Suffix not allow
   8d334:	6465 0000 6e55 6e6b 776f 206e 7265 6f72     ed..Unknown erro
   8d344:	0072 0000 5443 2055 4546 0045 4554 5453     r...CTU FEE.TEST
   8d354:	5320 5043 2049 4e49 5453 5552 454d 544e      SCPI INSTRUMENT
   8d364:	5420 4953 3233 3532 0000 0000 3176 302e      TSI3225....v1.0
   8d374:	0000 0000 202c 0000 0d3b 000a 203b 0a0d     ...., ..;...; ..
   8d384:	0009 0000 0020 0000 494d 694e 756d 006d     .... ...MINimum.
   8d394:	414d 6958 756d 006d 4544 6146 6c75 0074     MAXimum.DEFault.
   8d3a4:	5055 0000 4f44 4e57 0000 0000 414e 004e     UP..DOWN....NAN.
   8d3b4:	4e49 0046 494e 464e 0000 0000 5655 0000     INF.NINF....UV..
   8d3c4:	564d 0000 0056 0000 564b 0000 4155 0000     MV..V...KV..UA..
   8d3d4:	414d 0000 0041 0000 414b 0000 484f 004d     MA..A...KA..OHM.
   8d3e4:	4f4b 4d48 0000 0000 4f4d 4d48 0000 0000     KOHM....MOHM....
   8d3f4:	5a48 0000 484b 005a 484d 005a 4847 005a     HZ..KHZ.MHZ.GHZ.
   8d404:	4543 004c 5350 0000 534e 0000 5355 0000     CEL.PS..NS..US..
   8d414:	534d 0000 0053 0000 494d 004e 5248 0000     MS..S...MIN.HR..
   8d424:	0000 0000                                   ....

0008d428 <scpi_units_def>:
   8d428:	d3c0 0008 0001 0000 ed8d a0b5 c6f7 3eb0     ...............>
   8d438:	d3c4 0008 0001 0000 a9fc d2f1 624d 3f50     ............MbP?
   8d448:	d3c8 0008 0001 0000 0000 0000 0000 3ff0     ...............?
   8d458:	d3cc 0008 0001 0000 0000 0000 4000 408f     .............@.@
   8d468:	d3d0 0008 0002 0000 ed8d a0b5 c6f7 3eb0     ...............>
   8d478:	d3d4 0008 0002 0000 a9fc d2f1 624d 3f50     ............MbP?
   8d488:	d3d8 0008 0002 0000 0000 0000 0000 3ff0     ...............?
   8d498:	d3dc 0008 0002 0000 0000 0000 4000 408f     .............@.@
   8d4a8:	d3e0 0008 0003 0000 0000 0000 0000 3ff0     ...............?
   8d4b8:	d3e4 0008 0003 0000 0000 0000 4000 408f     .............@.@
   8d4c8:	d3ec 0008 0003 0000 0000 0000 8480 412e     ...............A
   8d4d8:	d3f4 0008 0004 0000 0000 0000 0000 3ff0     ...............?
   8d4e8:	d3f8 0008 0004 0000 0000 0000 4000 408f     .............@.@
   8d4f8:	d3fc 0008 0004 0000 0000 0000 8480 412e     ...............A
   8d508:	d400 0008 0004 0000 0000 0000 cd65 41cd     ............e..A
   8d518:	d404 0008 0005 0000 0000 0000 0000 3ff0     ...............?
   8d528:	d408 0008 0006 0000 ea11 812d 9799 3d71     ..........-...q=
   8d538:	d40c 0008 0006 0000 d695 e826 2e0b 3e11     ..........&....>
   8d548:	d410 0008 0006 0000 ed8d a0b5 c6f7 3eb0     ...............>
   8d558:	d414 0008 0006 0000 a9fc d2f1 624d 3f50     ............MbP?
   8d568:	d418 0008 0006 0000 0000 0000 0000 3ff0     ...............?
   8d578:	d41c 0008 0006 0000 0000 0000 0000 404e     ..............N@
   8d588:	d420 0008 0006 0000 0000 0000 2000 40ac      ............ .@
	...

0008d5a8 <scpi_special_numbers_def>:
   8d5a8:	d38c 0008 0001 0000 d394 0008 0002 0000     ................
   8d5b8:	d39c 0008 0003 0000 d3a4 0008 0004 0000     ................
   8d5c8:	d3a8 0008 0005 0000 d3b0 0008 0006 0000     ................
   8d5d8:	d3b4 0008 0007 0000 d3b8 0008 0008 0000     ................
	...
   8d5f0:	6c25 0067 3a3f 5d5b 0000 0000 3f3a 0000     %lg.?:[]....:?..
   8d600:	6f4c 2077 6f63 7473 6420 6175 206c 3031     Low cost dual 10
   8d610:	484d 207a 6f63 6e75 6574 7372 7620 0d31     MHz counters v1.
   8d620:	0000 0000 7830 3030 3030 000d 3438 6d30     ....0x0000..840m
   8d630:	0d57 0000 6d30 0d41 0000 0000 4b4f 000d     W...0mA.....OK..
   8d640:	7570 6873 6465 000d 6572 656c 7361 6465     pushed..released
   8d650:	000d 0000 4e4f 0000 464f 0046 6f4e 6e20     ....ON..OFF.No n
   8d660:	7765 7620 6c61 000d 7525 000d 2e25 732a     ew val..%u..%.*s
   8d670:	0000 0000 2a2a 5245 4f52 3a52 2520 2c64     ....**ERROR: %d,
   8d680:	2220 7325 0d22 000a 2a2a 5253 3a51 3020      "%s"...**SRQ: 0
   8d690:	2578 2058 2528 2964 0a0d 0000 2a2a 5443     x%X (%d)....**CT
   8d6a0:	4c52 2520 3230 3a78 3020 2578 2058 2528     RL %02x: 0x%X (%
   8d6b0:	2964 0a0d 0000 0000 2a2a 6554 7473 0a0d     d)......**Test..
   8d6c0:	0000 0000 2a2a 6552 6573 0d74 000a 0000     ....**Reset.....
   8d6d0:	5322 2f44 4d4d 2043 6143 6472 6f20 6576     "SD/MMC Card ove
   8d6e0:	2072 434d 2049 6c53 746f 3020 0022 0000     r MCI Slot 0"...
   8d6f0:	3231 3133 3332 3231 3133 3332 0000 0000     123123123123....
	...
   8d708:	aa00 aaaa aaaa aaaa eeaa eeee eeee eeee     ................
   8d718:	feee ffff ffff ffff ffff ffff 7fff dfbf     ................
   8d728:	f7ef fdfb 7efc dfbf f7ef fdfb 007e 0000     .....~......~...
   8d738:	6f43 6e75 6574 3072 7620 6c61 6575 203a     Counter0 value: 
   8d748:	6c25 756c 000d 0000 6f43 6e75 6574 3172     %llu....Counter1
   8d758:	7620 6c61 6575 203a 6c25 756c 000d 0000      value: %llu....

0008d768 <_ctype_>:
   8d768:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   8d778:	2020 2020 2020 2020 2020 2020 2020 2020                     
   8d788:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   8d798:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   8d7a8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   8d7b8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   8d7c8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   8d7d8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   8d7e8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0008d86c <_global_impure_ptr>:
   8d86c:	02b8 2007 0043                              ... C.

0008d872 <blanks.6650>:
   8d872:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008d882 <zeroes.6651>:
   8d882:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   8d892:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   8d8a2:	3000 3231 3433 3635 3837 6139 6362 6564     .0123456789abcde
   8d8b2:	0066                                        f.

0008d8b4 <blanks.6664>:
   8d8b4:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008d8c4 <zeroes.6665>:
   8d8c4:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0008d8d4 <_init>:
   8d8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d8d6:	bf00      	nop
   8d8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8d8da:	bc08      	pop	{r3}
   8d8dc:	469e      	mov	lr, r3
   8d8de:	4770      	bx	lr

0008d8e0 <__init_array_start>:
   8d8e0:	0008b261 	.word	0x0008b261

0008d8e4 <__frame_dummy_init_array_entry>:
   8d8e4:	0008016d                                m...

0008d8e8 <_fini>:
   8d8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d8ea:	bf00      	nop
   8d8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8d8ee:	bc08      	pop	{r3}
   8d8f0:	469e      	mov	lr, r3
   8d8f2:	4770      	bx	lr

0008d8f4 <__fini_array_start>:
   8d8f4:	00080145 	.word	0x00080145

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <sd_mmc_cards>:
	...
20070014:	0067 0000 0000 0000 0000 0000 0000 0000     g...............
	...

20070030 <ch3_out_color>:
20070030:	0003                                        ..

20070032 <ch1_in_out_color>:
20070032:	0003                                        ..

20070034 <ch2_in_out_color>:
20070034:	0003                                        ..

20070036 <is_freq_gen_enabled>:
20070036:	0001                                        ..

20070038 <ch3_in_color>:
20070038:	0003                                        ..

2007003a <is_qma_set_to_ttlin>:
2007003a:	0001                                        ..

2007003c <current_gen_freq>:
2007003c:	c350 0000                                   P...

20070040 <scpi_context>:
20070040:	d08c 0008 0100 0000 0000 0000 0b3c 2007     ............<.. 
	...
2007005c:	0080 2007 0000 0000 0000 0000 0000 0000     ... ............
2007006c:	0000 0000 0b2c 2007 d428 0008 d5a8 0008     ....,.. (.......
2007007c:	0000 0000                                   ....

20070080 <scpi_interface>:
20070080:	4e3d 0008 4df9 0008 4e89 0008 4e35 0008     =N...M...N..5N..
20070090:	4f31 0008 4f01 0008                         1O...O..

20070098 <extra_strings_desc.9443>:
20070098:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

200700b4 <udi_msc_name.9439>:
200700b4:	534d 2043 6e69 6574 6672 6361 0065 0000     MSC interface...

200700c4 <udi_cdc_name.9438>:
200700c4:	4443 2043 6e69 6574 6672 6361 0065 0000     CDC interface...

200700d4 <udi_api_cdc_data>:
200700d4:	5969 0008 56c9 0008 5399 0008 53a1 0008     iY...V...S...S..
200700e4:	5585 0008                                   .U..

200700e8 <udi_api_cdc_comm>:
200700e8:	56f9 0008 5385 0008 55dd 0008 53a1 0008     .V...S...U...S..
200700f8:	0000 0000                                   ....

200700fc <udc_config_hs>:
200700fc:	010c 2007 0190 2007                         ... ... 

20070104 <udc_config_lsfs>:
20070104:	01b0 2007 0190 2007                         ... ... 

2007010c <udc_desc_hs>:
2007010c:	0209 0062 0103 c000 0832 000b 0202 0102     ..b.....2.......
2007011c:	0900 0004 0100 0202 0001 2405 1000 0401     ...........$....
2007012c:	0224 0502 0624 0100 2405 0301 0701 8305     $...$....$......
2007013c:	4003 1000 0409 0001 0a02 0000 0700 8405     .@..............
2007014c:	0002 0002 0507 0205 0200 0900 0204 0200     ................
2007015c:	0608 0550 0507 0281 0200 0700 0205 0002     ..P.............
2007016c:	0002 0000                                   ....

20070170 <udc_config>:
20070170:	019c 2007 0104 2007 019c 2007 0184 2007     ... ... ... ... 
20070180:	00fc 2007                                   ... 

20070184 <udc_device_qual>:
20070184:	060a 0200 0000 4000 0001 0000               .......@....

20070190 <udi_apis>:
20070190:	00e8 2007 00d4 2007 0218 2007               ... ... ... 

2007019c <udc_device_desc>:
2007019c:	0112 0200 0000 4000 03eb 2424 0100 0201     .......@..$$....
200701ac:	0103 0000                                   ....

200701b0 <udc_desc_fs>:
200701b0:	0209 0062 0103 c000 0832 000b 0202 0102     ..b.....2.......
200701c0:	0900 0004 0100 0202 0001 2405 1000 0401     ...........$....
200701d0:	0224 0502 0624 0100 2405 0301 0701 8305     $...$....$......
200701e0:	4003 1000 0409 0001 0a02 0000 0700 8405     .@..............
200701f0:	4002 0000 0507 0205 0040 0900 0204 0200     .@......@.......
20070200:	0608 0550 0507 0281 0040 0700 0205 4002     ..P.....@......@
20070210:	0000 0000                                   ....

20070214 <udi_msc_b_ack_trans>:
20070214:	0001 0000                                   ....

20070218 <udi_api_msc>:
20070218:	6805 0008 67e9 0008 66f1 0008 5c7d 0008     .h...g...f..}\..
20070228:	0000 0000                                   ....

2007022c <udi_msc_inquiry_data.9918>:
2007022c:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
2007024c:	2e31 3030                                   1.00

20070250 <udi_msc_csw>:
20070250:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

20070260 <udc_string_product_name>:
20070260:	6554 706d 616c 6574 4220 616f 6472 0000     Template Board..

20070270 <udc_string_manufacturer_name>:
20070270:	6145 7973 702d 6968 0000 0000               Easy-phi....

2007027c <udc_string_desc>:
2007027c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

2007029c <udc_string_desc_languageid>:
2007029c:	0304 0409                                   ....

200702a0 <g_interrupt_enabled>:
200702a0:	0001 0000                                   ....

200702a4 <SystemCoreClock>:
200702a4:	0900 003d                                   ..=.

200702a8 <ch0_integration_time_goal>:
200702a8:	0001                                        ..

200702aa <ch1_integration_time_goal>:
200702aa:	0001                                        ..

200702ac <__ctype_ptr__>:
200702ac:	d768 0008                                   h...

200702b0 <_impure_ptr>:
200702b0:	02b8 2007 0000 0000                         ... ....

200702b8 <impure_data>:
200702b8:	0000 0000 05a4 2007 060c 2007 0674 2007     ....... ... t.. 
	...
200702ec:	d870 0008 0000 0000 0000 0000 0000 0000     p...............
	...
20070360:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20070370:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200706e0 <__malloc_av_>:
	...
200706e8:	06e0 2007 06e0 2007 06e8 2007 06e8 2007     ... ... ... ... 
200706f8:	06f0 2007 06f0 2007 06f8 2007 06f8 2007     ... ... ... ... 
20070708:	0700 2007 0700 2007 0708 2007 0708 2007     ... ... ... ... 
20070718:	0710 2007 0710 2007 0718 2007 0718 2007     ... ... ... ... 
20070728:	0720 2007 0720 2007 0728 2007 0728 2007      ..  .. (.. (.. 
20070738:	0730 2007 0730 2007 0738 2007 0738 2007     0.. 0.. 8.. 8.. 
20070748:	0740 2007 0740 2007 0748 2007 0748 2007     @.. @.. H.. H.. 
20070758:	0750 2007 0750 2007 0758 2007 0758 2007     P.. P.. X.. X.. 
20070768:	0760 2007 0760 2007 0768 2007 0768 2007     `.. `.. h.. h.. 
20070778:	0770 2007 0770 2007 0778 2007 0778 2007     p.. p.. x.. x.. 
20070788:	0780 2007 0780 2007 0788 2007 0788 2007     ... ... ... ... 
20070798:	0790 2007 0790 2007 0798 2007 0798 2007     ... ... ... ... 
200707a8:	07a0 2007 07a0 2007 07a8 2007 07a8 2007     ... ... ... ... 
200707b8:	07b0 2007 07b0 2007 07b8 2007 07b8 2007     ... ... ... ... 
200707c8:	07c0 2007 07c0 2007 07c8 2007 07c8 2007     ... ... ... ... 
200707d8:	07d0 2007 07d0 2007 07d8 2007 07d8 2007     ... ... ... ... 
200707e8:	07e0 2007 07e0 2007 07e8 2007 07e8 2007     ... ... ... ... 
200707f8:	07f0 2007 07f0 2007 07f8 2007 07f8 2007     ... ... ... ... 
20070808:	0800 2007 0800 2007 0808 2007 0808 2007     ... ... ... ... 
20070818:	0810 2007 0810 2007 0818 2007 0818 2007     ... ... ... ... 
20070828:	0820 2007 0820 2007 0828 2007 0828 2007      ..  .. (.. (.. 
20070838:	0830 2007 0830 2007 0838 2007 0838 2007     0.. 0.. 8.. 8.. 
20070848:	0840 2007 0840 2007 0848 2007 0848 2007     @.. @.. H.. H.. 
20070858:	0850 2007 0850 2007 0858 2007 0858 2007     P.. P.. X.. X.. 
20070868:	0860 2007 0860 2007 0868 2007 0868 2007     `.. `.. h.. h.. 
20070878:	0870 2007 0870 2007 0878 2007 0878 2007     p.. p.. x.. x.. 
20070888:	0880 2007 0880 2007 0888 2007 0888 2007     ... ... ... ... 
20070898:	0890 2007 0890 2007 0898 2007 0898 2007     ... ... ... ... 
200708a8:	08a0 2007 08a0 2007 08a8 2007 08a8 2007     ... ... ... ... 
200708b8:	08b0 2007 08b0 2007 08b8 2007 08b8 2007     ... ... ... ... 
200708c8:	08c0 2007 08c0 2007 08c8 2007 08c8 2007     ... ... ... ... 
200708d8:	08d0 2007 08d0 2007 08d8 2007 08d8 2007     ... ... ... ... 
200708e8:	08e0 2007 08e0 2007 08e8 2007 08e8 2007     ... ... ... ... 
200708f8:	08f0 2007 08f0 2007 08f8 2007 08f8 2007     ... ... ... ... 
20070908:	0900 2007 0900 2007 0908 2007 0908 2007     ... ... ... ... 
20070918:	0910 2007 0910 2007 0918 2007 0918 2007     ... ... ... ... 
20070928:	0920 2007 0920 2007 0928 2007 0928 2007      ..  .. (.. (.. 
20070938:	0930 2007 0930 2007 0938 2007 0938 2007     0.. 0.. 8.. 8.. 
20070948:	0940 2007 0940 2007 0948 2007 0948 2007     @.. @.. H.. H.. 
20070958:	0950 2007 0950 2007 0958 2007 0958 2007     P.. P.. X.. X.. 
20070968:	0960 2007 0960 2007 0968 2007 0968 2007     `.. `.. h.. h.. 
20070978:	0970 2007 0970 2007 0978 2007 0978 2007     p.. p.. x.. x.. 
20070988:	0980 2007 0980 2007 0988 2007 0988 2007     ... ... ... ... 
20070998:	0990 2007 0990 2007 0998 2007 0998 2007     ... ... ... ... 
200709a8:	09a0 2007 09a0 2007 09a8 2007 09a8 2007     ... ... ... ... 
200709b8:	09b0 2007 09b0 2007 09b8 2007 09b8 2007     ... ... ... ... 
200709c8:	09c0 2007 09c0 2007 09c8 2007 09c8 2007     ... ... ... ... 
200709d8:	09d0 2007 09d0 2007 09d8 2007 09d8 2007     ... ... ... ... 
200709e8:	09e0 2007 09e0 2007 09e8 2007 09e8 2007     ... ... ... ... 
200709f8:	09f0 2007 09f0 2007 09f8 2007 09f8 2007     ... ... ... ... 
20070a08:	0a00 2007 0a00 2007 0a08 2007 0a08 2007     ... ... ... ... 
20070a18:	0a10 2007 0a10 2007 0a18 2007 0a18 2007     ... ... ... ... 
20070a28:	0a20 2007 0a20 2007 0a28 2007 0a28 2007      ..  .. (.. (.. 
20070a38:	0a30 2007 0a30 2007 0a38 2007 0a38 2007     0.. 0.. 8.. 8.. 
20070a48:	0a40 2007 0a40 2007 0a48 2007 0a48 2007     @.. @.. H.. H.. 
20070a58:	0a50 2007 0a50 2007 0a58 2007 0a58 2007     P.. P.. X.. X.. 
20070a68:	0a60 2007 0a60 2007 0a68 2007 0a68 2007     `.. `.. h.. h.. 
20070a78:	0a70 2007 0a70 2007 0a78 2007 0a78 2007     p.. p.. x.. x.. 
20070a88:	0a80 2007 0a80 2007 0a88 2007 0a88 2007     ... ... ... ... 
20070a98:	0a90 2007 0a90 2007 0a98 2007 0a98 2007     ... ... ... ... 
20070aa8:	0aa0 2007 0aa0 2007 0aa8 2007 0aa8 2007     ... ... ... ... 
20070ab8:	0ab0 2007 0ab0 2007 0ab8 2007 0ab8 2007     ... ... ... ... 
20070ac8:	0ac0 2007 0ac0 2007 0ac8 2007 0ac8 2007     ... ... ... ... 
20070ad8:	0ad0 2007 0ad0 2007 0ad8 2007 0ad8 2007     ... ... ... ... 

20070ae8 <__malloc_sbrk_base>:
20070ae8:	ffff ffff                                   ....

20070aec <__malloc_trim_threshold>:
20070aec:	0000 0002                                   ....
