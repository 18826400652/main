
easy-phi_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cde0  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008cde0  0008cde0  00014de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae8  20070000  0008cde8  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000114c  20070ae8  0008d8d0  00018ae8  2**2
                  ALLOC
  4 .stack        00002004  20071c34  0008ea1c  00018ae8  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00018ae8  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00018b11  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002d67b  00000000  00000000  00018b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000838e  00000000  00000000  000461fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00017c68  00000000  00000000  0004e58b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001b38  00000000  00000000  000661f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001f40  00000000  00000000  00067d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00024b31  00000000  00000000  00069c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002f51b  00000000  00000000  0008e7a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007a690  00000000  00000000  000bdcbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003c00  00000000  00000000  0013834c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20073c38 	.word	0x20073c38
   80004:	00089441 	.word	0x00089441
   80008:	0008943d 	.word	0x0008943d
   8000c:	00084b79 	.word	0x00084b79
   80010:	0008943d 	.word	0x0008943d
   80014:	0008943d 	.word	0x0008943d
   80018:	0008943d 	.word	0x0008943d
	...
   8002c:	0008943d 	.word	0x0008943d
   80030:	0008943d 	.word	0x0008943d
   80034:	00000000 	.word	0x00000000
   80038:	0008943d 	.word	0x0008943d
   8003c:	0008943d 	.word	0x0008943d
   80040:	0008943d 	.word	0x0008943d
   80044:	0008943d 	.word	0x0008943d
   80048:	0008943d 	.word	0x0008943d
   8004c:	0008943d 	.word	0x0008943d
   80050:	0008943d 	.word	0x0008943d
   80054:	0008943d 	.word	0x0008943d
   80058:	0008943d 	.word	0x0008943d
   8005c:	0008943d 	.word	0x0008943d
   80060:	0008943d 	.word	0x0008943d
   80064:	0008943d 	.word	0x0008943d
   80068:	00000000 	.word	0x00000000
   8006c:	000871ed 	.word	0x000871ed
   80070:	00087209 	.word	0x00087209
   80074:	00087225 	.word	0x00087225
   80078:	00087241 	.word	0x00087241
	...
   80084:	0008943d 	.word	0x0008943d
   80088:	0008943d 	.word	0x0008943d
   8008c:	0008943d 	.word	0x0008943d
   80090:	0008943d 	.word	0x0008943d
   80094:	0008943d 	.word	0x0008943d
   80098:	0008943d 	.word	0x0008943d
   8009c:	0008943d 	.word	0x0008943d
   800a0:	0008943d 	.word	0x0008943d
   800a4:	00000000 	.word	0x00000000
   800a8:	0008943d 	.word	0x0008943d
   800ac:	0008943d 	.word	0x0008943d
   800b0:	00081ef1 	.word	0x00081ef1
   800b4:	0008943d 	.word	0x0008943d
   800b8:	0008943d 	.word	0x0008943d
   800bc:	0008943d 	.word	0x0008943d
   800c0:	0008943d 	.word	0x0008943d
   800c4:	0008943d 	.word	0x0008943d
   800c8:	0008943d 	.word	0x0008943d
   800cc:	0008943d 	.word	0x0008943d
   800d0:	0008943d 	.word	0x0008943d
   800d4:	0008943d 	.word	0x0008943d
   800d8:	0008943d 	.word	0x0008943d
   800dc:	0008943d 	.word	0x0008943d
   800e0:	00087d69 	.word	0x00087d69
   800e4:	0008943d 	.word	0x0008943d
   800e8:	0008943d 	.word	0x0008943d
   800ec:	0008943d 	.word	0x0008943d
   800f0:	0008943d 	.word	0x0008943d

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a19      	subs	r1, r3, r0
   800fc:	2906      	cmp	r1, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4a04      	ldr	r2, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2a00      	cmp	r2, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4790      	blx	r2
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	0008cde8 	.word	0x0008cde8
   80110:	0008cdeb 	.word	0x0008cdeb
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a19      	subs	r1, r3, r0
   80120:	108a      	asrs	r2, r1, #2
   80122:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	0008cde8 	.word	0x0008cde8
   8013c:	0008cde8 	.word	0x0008cde8
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4804      	ldr	r0, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b110      	cbz	r0, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2101      	movs	r1, #1
   8015c:	7021      	strb	r1, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070ae8 	.word	0x20070ae8
   80164:	00000000 	.word	0x00000000
   80168:	0008cde8 	.word	0x0008cde8

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6801      	ldr	r1, [r0, #0]
   8017e:	b111      	cbz	r1, 80186 <frame_dummy+0x1a>
   80180:	4a07      	ldr	r2, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b102      	cbz	r2, 80186 <frame_dummy+0x1a>
   80184:	4790      	blx	r2
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	0008cde8 	.word	0x0008cde8
   80198:	20070aec 	.word	0x20070aec
   8019c:	0008cde8 	.word	0x0008cde8
   801a0:	00000000 	.word	0x00000000

000801a4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   801a4:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   801a6:	f640 3308 	movw	r3, #2824	; 0xb08
   801aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   801ae:	681a      	ldr	r2, [r3, #0]
   801b0:	f892 4022 	ldrb.w	r4, [r2, #34]	; 0x22
   801b4:	f640 310e 	movw	r1, #2830	; 0xb0e
   801b8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   801bc:	7808      	ldrb	r0, [r1, #0]
   801be:	6811      	ldr	r1, [r2, #0]
   801c0:	7c52      	ldrb	r2, [r2, #17]
   801c2:	1c23      	adds	r3, r4, #0
   801c4:	bf18      	it	ne
   801c6:	2301      	movne	r3, #1
   801c8:	f244 24b5 	movw	r4, #17077	; 0x42b5
   801cc:	f2c0 0408 	movt	r4, #8
   801d0:	47a0      	blx	r4
   801d2:	bd10      	pop	{r4, pc}

000801d4 <sdio_cmd53>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd53(uint8_t rw_flag, uint8_t func_nb, uint32_t reg_addr,
		uint8_t inc_addr, uint32_t size, bool access_block)
{
   801d4:	b570      	push	{r4, r5, r6, lr}
   801d6:	b082      	sub	sp, #8
   801d8:	9c06      	ldr	r4, [sp, #24]
	Assert(size != 0);
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
   801da:	f249 3635 	movw	r6, #37685	; 0x9335
   801de:	f2c0 0601 	movt	r6, #1
   801e2:	f241 3535 	movw	r5, #4917	; 0x1335
   801e6:	f2c0 0501 	movt	r5, #1
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
   801ea:	ea4f 7101 	mov.w	r1, r1, lsl #28

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
			SDIO_CMD53_IO_R_BYTE_EXTENDED :
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
   801ee:	ea41 2242 	orr.w	r2, r1, r2, lsl #9
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
   801f2:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
			SDIO_CMD53_IO_R_BYTE_EXTENDED :
			SDIO_CMD53_IO_W_BYTE_EXTENDED,
			((size % 512) << SDIO_CMD53_COUNT)
   801f6:	ea4f 51c4 	mov.w	r1, r4, lsl #23
   801fa:	ea4f 51d1 	mov.w	r1, r1, lsr #23
			| ((uint32_t)reg_addr << SDIO_CMD53_REG_ADDR)
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
   801fe:	4311      	orrs	r1, r2
		uint8_t inc_addr, uint32_t size, bool access_block)
{
	Assert(size != 0);
	Assert(size <= 512);

	return driver_adtc_start((rw_flag == SDIO_CMD53_READ_FLAG)?
   80200:	f89d 201c 	ldrb.w	r2, [sp, #28]
   80204:	9200      	str	r2, [sp, #0]
   80206:	2800      	cmp	r0, #0
   80208:	bf14      	ite	ne
   8020a:	4630      	movne	r0, r6
   8020c:	4628      	moveq	r0, r5
   8020e:	ea41 6183 	orr.w	r1, r1, r3, lsl #26
   80212:	b2a2      	uxth	r2, r4
   80214:	f04f 0301 	mov.w	r3, #1
   80218:	f244 34e1 	movw	r4, #17377	; 0x43e1
   8021c:	f2c0 0408 	movt	r4, #8
   80220:	47a0      	blx	r4
			| ((uint32_t)inc_addr << SDIO_CMD53_OP_CODE)
			| ((uint32_t)0 << SDIO_CMD53_BLOCK_MODE)
			| ((uint32_t)func_nb << SDIO_CMD53_FUNCTION_NUM)
			| ((uint32_t)rw_flag << SDIO_CMD53_RW_FLAG),
			size, 1, access_block);
}
   80222:	b002      	add	sp, #8
   80224:	bd70      	pop	{r4, r5, r6, pc}
   80226:	bf00      	nop

00080228 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   80228:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   8022a:	f640 330e 	movw	r3, #2830	; 0xb0e
   8022e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80232:	7818      	ldrb	r0, [r3, #0]
   80234:	b930      	cbnz	r0, 80244 <sd_mmc_deselect_slot+0x1c>
		driver_deselect_device(sd_mmc_slot_sel);
   80236:	f04f 0000 	mov.w	r0, #0
   8023a:	f244 3129 	movw	r1, #17193	; 0x4329
   8023e:	f2c0 0108 	movt	r1, #8
   80242:	4788      	blx	r1
   80244:	bd08      	pop	{r3, pc}
   80246:	bf00      	nop

00080248 <sdio_cmd52>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
   80248:	b510      	push	{r4, lr}
   8024a:	9c02      	ldr	r4, [sp, #8]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
   8024c:	ea4f 2242 	mov.w	r2, r2, lsl #9
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
   80250:	ea42 7101 	orr.w	r1, r2, r1, lsl #28
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
   80254:	ea41 70c0 	orr.w	r0, r1, r0, lsl #31
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
   80258:	ea40 63c3 	orr.w	r3, r0, r3, lsl #27
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
   8025c:	7822      	ldrb	r2, [r4, #0]
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
   8025e:	f241 3034 	movw	r0, #4916	; 0x1334
   80262:	ea43 0102 	orr.w	r1, r3, r2
   80266:	f244 3351 	movw	r3, #17233	; 0x4351
   8026a:	f2c0 0308 	movt	r3, #8
   8026e:	4798      	blx	r3
   80270:	b140      	cbz	r0, 80284 <sdio_cmd52+0x3c>
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
		return false;
	}
	*io_data = driver_get_response() & 0xFF;
   80272:	f244 3179 	movw	r1, #17273	; 0x4379
   80276:	f2c0 0108 	movt	r1, #8
   8027a:	4788      	blx	r1
   8027c:	7020      	strb	r0, [r4, #0]
	return true;
   8027e:	f04f 0001 	mov.w	r0, #1
   80282:	bd10      	pop	{r4, pc}
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
		return false;
   80284:	f04f 0000 	mov.w	r0, #0
	}
	*io_data = driver_get_response() & 0xFF;
	return true;
}
   80288:	bd10      	pop	{r4, pc}
   8028a:	bf00      	nop

0008028c <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
   8028c:	b508      	push	{r3, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
   8028e:	f640 3308 	movw	r3, #2824	; 0xb08
   80292:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80296:	6818      	ldr	r0, [r3, #0]
   80298:	8981      	ldrh	r1, [r0, #12]
   8029a:	f641 3009 	movw	r0, #6921	; 0x1b09
   8029e:	ea4f 4101 	mov.w	r1, r1, lsl #16
   802a2:	f244 3251 	movw	r2, #17233	; 0x4351
   802a6:	f2c0 0208 	movt	r2, #8
   802aa:	4790      	blx	r2
   802ac:	b170      	cbz	r0, 802cc <sd_mmc_cmd9_mci+0x40>
		return false;
	}
	driver_get_response_128(sd_mmc_card->csd);
   802ae:	f640 3308 	movw	r3, #2824	; 0xb08
   802b2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   802b6:	6818      	ldr	r0, [r3, #0]
   802b8:	f100 0012 	add.w	r0, r0, #18
   802bc:	f244 3181 	movw	r1, #17281	; 0x4381
   802c0:	f2c0 0108 	movt	r1, #8
   802c4:	4788      	blx	r1
	return true;
   802c6:	f04f 0001 	mov.w	r0, #1
   802ca:	bd08      	pop	{r3, pc}
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   802cc:	f04f 0000 	mov.w	r0, #0
	}
	driver_get_response_128(sd_mmc_card->csd);
	return true;
}
   802d0:	bd08      	pop	{r3, pc}
   802d2:	bf00      	nop

000802d4 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   802d4:	b510      	push	{r4, lr}
	if (slot >= SD_MMC_MEM_CNT) {
   802d6:	2800      	cmp	r0, #0
   802d8:	f040 80a8 	bne.w	8042c <sd_mmc_select_slot+0x158>
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
   802dc:	f240 030c 	movw	r3, #12
   802e0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   802e4:	6898      	ldr	r0, [r3, #8]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   802e6:	ea4f 1250 	mov.w	r2, r0, lsr #5
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   802ea:	f502 1100 	add.w	r1, r2, #2097152	; 0x200000
   802ee:	f201 7307 	addw	r3, r1, #1799	; 0x707
   802f2:	ea4f 2243 	mov.w	r2, r3, lsl #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   802f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   802f8:	f000 001f 	and.w	r0, r0, #31
   802fc:	f04f 0101 	mov.w	r1, #1
   80300:	fa01 f300 	lsl.w	r3, r1, r0
   80304:	4213      	tst	r3, r2
   80306:	d01d      	beq.n	80344 <sd_mmc_select_slot+0x70>
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
   80308:	f240 020c 	movw	r2, #12
   8030c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80310:	7b90      	ldrb	r0, [r2, #14]
   80312:	4288      	cmp	r0, r1
   80314:	d10c      	bne.n	80330 <sd_mmc_select_slot+0x5c>
	return false;
}

static inline void SD_MMC_STOP_TIMEOUT(void)
{
	if (sd_mmc_sam_systick_used) {
   80316:	f640 3306 	movw	r3, #2822	; 0xb06
   8031a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8031e:	7819      	ldrb	r1, [r3, #0]
   80320:	b131      	cbz	r1, 80330 <sd_mmc_select_slot+0x5c>
		SysTick->CTRL = 0;
   80322:	f24e 0010 	movw	r0, #57360	; 0xe010
   80326:	f2ce 0000 	movt	r0, #57344	; 0xe000
   8032a:	f04f 0200 	mov.w	r2, #0
   8032e:	6002      	str	r2, [r0, #0]
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
			SD_MMC_STOP_TIMEOUT();
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   80330:	f240 030c 	movw	r3, #12
   80334:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80338:	f04f 0104 	mov.w	r1, #4
   8033c:	7399      	strb	r1, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
   8033e:	f04f 0002 	mov.w	r0, #2
   80342:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
   80344:	f240 020c 	movw	r2, #12
   80348:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8034c:	7b90      	ldrb	r0, [r2, #14]
   8034e:	2804      	cmp	r0, #4
   80350:	d131      	bne.n	803b6 <sd_mmc_select_slot+0xe2>
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
   80352:	f240 010c 	movw	r1, #12
   80356:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8035a:	f04f 0201 	mov.w	r2, #1
   8035e:	738a      	strb	r2, [r1, #14]
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
   80360:	f24e 0310 	movw	r3, #57360	; 0xe010
   80364:	f2ce 0300 	movt	r3, #57344	; 0xe000
   80368:	6818      	ldr	r0, [r3, #0]
   8036a:	b988      	cbnz	r0, 80390 <sd_mmc_select_slot+0xbc>
		sd_mmc_sam_systick_used = true;
   8036c:	f640 3006 	movw	r0, #2822	; 0xb06
   80370:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80374:	7002      	strb	r2, [r0, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
   80376:	f24e 0310 	movw	r3, #57360	; 0xe010
   8037a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8037e:	f243 71a0 	movw	r1, #14240	; 0x37a0
   80382:	f2c0 01a0 	movt	r1, #160	; 0xa0
   80386:	6059      	str	r1, [r3, #4]
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
   80388:	601a      	str	r2, [r3, #0]
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
   8038a:	f04f 0002 	mov.w	r0, #2
   8038e:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = true;
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
	} else {
		sd_mmc_sam_systick_used = false;
   80390:	f640 3106 	movw	r1, #2822	; 0xb06
   80394:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80398:	f04f 0200 	mov.w	r2, #0
   8039c:	700a      	strb	r2, [r1, #0]
#ifdef FREERTOS_USED
		// Note: the define INCLUDE_vTaskDelay must be set to one
		// in FreeRTOSConfig.h file.
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
   8039e:	f648 5080 	movw	r0, #36224	; 0x8d80
   803a2:	f2c0 005b 	movt	r0, #91	; 0x5b
   803a6:	f240 0301 	movw	r3, #1
   803aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   803ae:	4798      	blx	r3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
   803b0:	f04f 0002 	mov.w	r0, #2
   803b4:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
   803b6:	2801      	cmp	r0, #1
   803b8:	d116      	bne.n	803e8 <sd_mmc_select_slot+0x114>
	}
}

static inline bool SD_MMC_IS_TIMEOUT(void)
{
	if (!sd_mmc_sam_systick_used) {
   803ba:	f640 3106 	movw	r1, #2822	; 0xb06
   803be:	f2c2 0107 	movt	r1, #8199	; 0x2007
   803c2:	780b      	ldrb	r3, [r1, #0]
   803c4:	2b00      	cmp	r3, #0
   803c6:	d03a      	beq.n	8043e <sd_mmc_select_slot+0x16a>
		return (xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE);
#else
		return true;
#endif
	}
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
   803c8:	f24e 0210 	movw	r2, #57360	; 0xe010
   803cc:	f2ce 0200 	movt	r2, #57344	; 0xe000
   803d0:	6810      	ldr	r0, [r2, #0]
   803d2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   803d6:	d02c      	beq.n	80432 <sd_mmc_select_slot+0x15e>
		SysTick->CTRL = 0;
   803d8:	f24e 0110 	movw	r1, #57360	; 0xe010
   803dc:	f2ce 0100 	movt	r1, #57344	; 0xe000
   803e0:	f04f 0300 	mov.w	r3, #0
   803e4:	600b      	str	r3, [r1, #0]
   803e6:	e02a      	b.n	8043e <sd_mmc_select_slot+0x16a>
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
   803e8:	f240 000c 	movw	r0, #12
   803ec:	f2c2 0007 	movt	r0, #8199	; 0x2007
   803f0:	7b81      	ldrb	r1, [r0, #14]
   803f2:	2903      	cmp	r1, #3
   803f4:	d020      	beq.n	80438 <sd_mmc_select_slot+0x164>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   803f6:	f640 340e 	movw	r4, #2830	; 0xb0e
   803fa:	f2c2 0407 	movt	r4, #8199	; 0x2007
   803fe:	f04f 0300 	mov.w	r3, #0
   80402:	7023      	strb	r3, [r4, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   80404:	f240 040c 	movw	r4, #12
   80408:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8040c:	f640 3208 	movw	r2, #2824	; 0xb08
   80410:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80414:	6014      	str	r4, [r2, #0]
	sd_mmc_configure_slot();
   80416:	f240 10a5 	movw	r0, #421	; 0x1a5
   8041a:	f2c0 0008 	movt	r0, #8
   8041e:	4780      	blx	r0
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   80420:	7ba0      	ldrb	r0, [r4, #14]

	// Initialize interface
	sd_mmc_slot_sel = slot;
	sd_mmc_card = &sd_mmc_cards[slot];
	sd_mmc_configure_slot();
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   80422:	2802      	cmp	r0, #2
   80424:	bf14      	ite	ne
   80426:	2000      	movne	r0, #0
   80428:	2001      	moveq	r0, #1
   8042a:	bd10      	pop	{r4, pc}
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
		return SD_MMC_ERR_SLOT;
   8042c:	f04f 0004 	mov.w	r0, #4
   80430:	bd10      	pop	{r4, pc}
		return SD_MMC_ERR_NO_CARD;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
   80432:	f04f 0002 	mov.w	r0, #2
   80436:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
   80438:	f04f 0003 	mov.w	r0, #3
   8043c:	bd10      	pop	{r4, pc}
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   8043e:	f240 000c 	movw	r0, #12
   80442:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80446:	f04f 0202 	mov.w	r2, #2
   8044a:	7382      	strb	r2, [r0, #14]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   8044c:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
   80450:	f2c0 0106 	movt	r1, #6
   80454:	6001      	str	r1, [r0, #0]
		sd_mmc_cards[slot].bus_width = 1;
   80456:	f04f 0301 	mov.w	r3, #1
   8045a:	7443      	strb	r3, [r0, #17]
		sd_mmc_cards[slot].high_speed = 0;
   8045c:	f04f 0200 	mov.w	r2, #0
   80460:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
   80464:	e7c0      	b.n	803e8 <sd_mmc_select_slot+0x114>
   80466:	bf00      	nop

00080468 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   80468:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   8046a:	f240 030c 	movw	r3, #12
   8046e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80472:	f04f 0204 	mov.w	r2, #4
   80476:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   80478:	f640 300e 	movw	r0, #2830	; 0xb0e
   8047c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80480:	f04f 01ff 	mov.w	r1, #255	; 0xff
   80484:	7001      	strb	r1, [r0, #0]
	driver_init();
   80486:	f244 2369 	movw	r3, #17001	; 0x4269
   8048a:	f2c0 0308 	movt	r3, #8
   8048e:	4798      	blx	r3
   80490:	bd08      	pop	{r3, pc}
   80492:	bf00      	nop

00080494 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   80494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80498:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   8049a:	f240 23d5 	movw	r3, #725	; 0x2d5
   8049e:	f2c0 0308 	movt	r3, #8
   804a2:	4798      	blx	r3
   804a4:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   804a6:	2801      	cmp	r0, #1
   804a8:	d006      	beq.n	804b8 <sd_mmc_check+0x24>
		sd_mmc_deselect_slot();
   804aa:	f240 2129 	movw	r1, #553	; 0x229
   804ae:	f2c0 0108 	movt	r1, #8
   804b2:	4788      	blx	r1
		return sd_mmc_err;
   804b4:	f000 bd5d 	b.w	80f72 <sd_mmc_check+0xade>
static bool sd_mmc_mci_card_init(void)
{
	uint8_t v2 = 0;

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   804b8:	f640 3008 	movw	r0, #2824	; 0xb08
   804bc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   804c0:	6801      	ldr	r1, [r0, #0]
   804c2:	f04f 0201 	mov.w	r2, #1
   804c6:	73ca      	strb	r2, [r1, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   804c8:	f04f 0500 	mov.w	r5, #0
   804cc:	740d      	strb	r5, [r1, #16]
	sd_mmc_card->rca = 0;
   804ce:	818d      	strh	r5, [r1, #12]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   804d0:	f244 332d 	movw	r3, #17197	; 0x432d
   804d4:	f2c0 0308 	movt	r3, #8
   804d8:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
   804da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   804de:	4629      	mov	r1, r5
   804e0:	f244 3251 	movw	r2, #17233	; 0x4351
   804e4:	f2c0 0208 	movt	r2, #8
   804e8:	4790      	blx	r2
   804ea:	2800      	cmp	r0, #0
   804ec:	f000 84c1 	beq.w	80e72 <sd_mmc_check+0x9de>
{
	uint32_t resp;

	*v2 = 0;
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   804f0:	f245 5008 	movw	r0, #21768	; 0x5508
   804f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   804f8:	f244 3351 	movw	r3, #17233	; 0x4351
   804fc:	f2c0 0308 	movt	r3, #8
   80500:	4798      	blx	r3
   80502:	2800      	cmp	r0, #0
   80504:	f000 84c3 	beq.w	80e8e <sd_mmc_check+0x9fa>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
	}
	// Check R7 response
	resp = driver_get_response();
   80508:	f244 3079 	movw	r0, #17273	; 0x4379
   8050c:	f2c0 0008 	movt	r0, #8
   80510:	4780      	blx	r0
	if (resp == 0xFFFFFFFF) {
   80512:	f1b0 3fff 	cmp.w	r0, #4294967295
   80516:	f000 84bd 	beq.w	80e94 <sd_mmc_check+0xa00>
		// No compliance R7 value
		return true; // It is not a V2
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   8051a:	ea4f 5100 	mov.w	r1, r0, lsl #20
   8051e:	ea4f 5211 	mov.w	r2, r1, lsr #20
   80522:	f5b2 7fd5 	cmp.w	r2, #426	; 0x1aa
   80526:	f040 84a4 	bne.w	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   8052a:	f04f 0601 	mov.w	r6, #1
   8052e:	f000 bcb3 	b.w	80e98 <sd_mmc_check+0xa04>
	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
		sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
		return true; // No error but card type not updated
	}
	resp = driver_get_response();
   80532:	f244 3079 	movw	r0, #17273	; 0x4379
   80536:	f2c0 0008 	movt	r0, #8
   8053a:	4780      	blx	r0
   8053c:	4601      	mov	r1, r0
	if ((resp & OCR_SDIO_NF) == 0) {
   8053e:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
   80542:	f000 84b5 	beq.w	80eb0 <sd_mmc_check+0xa1c>
   80546:	f241 3989 	movw	r9, #5001	; 0x1389
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   8054a:	f244 5705 	movw	r7, #17669	; 0x4505
   8054e:	f244 3551 	movw	r5, #17233	; 0x4351
   80552:	f2c0 0508 	movt	r5, #8
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80556:	f244 3879 	movw	r8, #17273	; 0x4379
   8055a:	f2c0 0808 	movt	r8, #8
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   8055e:	4638      	mov	r0, r7
   80560:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   80564:	47a8      	blx	r5
   80566:	2800      	cmp	r0, #0
   80568:	f000 8483 	beq.w	80e72 <sd_mmc_check+0x9de>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   8056c:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   8056e:	1e01      	subs	r1, r0, #0
   80570:	db0a      	blt.n	80588 <sd_mmc_check+0xf4>
   80572:	f109 39ff 	add.w	r9, r9, #4294967295
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   80576:	4638      	mov	r0, r7
   80578:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   8057c:	47a8      	blx	r5
   8057e:	2800      	cmp	r0, #0
   80580:	f040 8539 	bne.w	80ff6 <sd_mmc_check+0xb62>
   80584:	f000 bc75 	b.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD5 Timeout on busy\n\r", __func__);
			return false;
		}
	}
	// Update card type at the end of busy
	if ((resp & OCR_SDIO_MP) > 0) {
   80588:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
   8058c:	f640 3308 	movw	r3, #2824	; 0xb08
   80590:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80594:	6818      	ldr	r0, [r3, #0]
   80596:	bf14      	ite	ne
   80598:	2205      	movne	r2, #5
	} else {
		sd_mmc_card->type = CARD_TYPE_SDIO;
   8059a:	2204      	moveq	r2, #4
   8059c:	73c2      	strb	r2, [r0, #15]
   8059e:	f000 bc87 	b.w	80eb0 <sd_mmc_check+0xa1c>
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   805a2:	f241 1737 	movw	r7, #4407	; 0x1137
   805a6:	f04f 0800 	mov.w	r8, #0
   805aa:	f244 3551 	movw	r5, #17233	; 0x4351
   805ae:	f2c0 0508 	movt	r5, #8
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   805b2:	f44f 4900 	mov.w	r9, #32768	; 0x8000
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   805b6:	f244 3a79 	movw	sl, #17273	; 0x4379
   805ba:	f2c0 0a08 	movt	sl, #8
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   805be:	4638      	mov	r0, r7
   805c0:	4641      	mov	r1, r8
   805c2:	47a8      	blx	r5
   805c4:	2800      	cmp	r0, #0
   805c6:	f040 84ea 	bne.w	80f9e <sd_mmc_check+0xb0a>
   805ca:	f000 bc7d 	b.w	80ec8 <sd_mmc_check+0xa34>
   805ce:	4638      	mov	r0, r7
   805d0:	4641      	mov	r1, r8
   805d2:	47a8      	blx	r5
   805d4:	2800      	cmp	r0, #0
   805d6:	f000 8477 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   805da:	4649      	mov	r1, r9
   805dc:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   805e0:	f244 5029 	movw	r0, #17705	; 0x4529
   805e4:	2e00      	cmp	r6, #0
   805e6:	bf08      	it	eq
   805e8:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   805ec:	47a8      	blx	r5
   805ee:	2800      	cmp	r0, #0
   805f0:	f000 846a 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   805f4:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   805f6:	2800      	cmp	r0, #0
   805f8:	da0e      	bge.n	80618 <sd_mmc_check+0x184>
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
   805fa:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   805fe:	f000 848f 	beq.w	80f20 <sd_mmc_check+0xa8c>
				sd_mmc_card->type |= CARD_TYPE_HC;
   80602:	f640 3008 	movw	r0, #2824	; 0xb08
   80606:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8060a:	6801      	ldr	r1, [r0, #0]
   8060c:	7bca      	ldrb	r2, [r1, #15]
   8060e:	f042 0308 	orr.w	r3, r2, #8
   80612:	73cb      	strb	r3, [r1, #15]
   80614:	f000 bc84 	b.w	80f20 <sd_mmc_check+0xa8c>
   80618:	f10b 3bff 	add.w	fp, fp, #4294967295
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   8061c:	4638      	mov	r0, r7
   8061e:	4641      	mov	r1, r8
   80620:	47a8      	blx	r5
   80622:	2800      	cmp	r0, #0
   80624:	f040 84d1 	bne.w	80fca <sd_mmc_check+0xb36>
   80628:	f000 bc4e 	b.w	80ec8 <sd_mmc_check+0xa34>
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   8062c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   80630:	f2c4 051f 	movt	r5, #16415	; 0x401f
   80634:	f244 5701 	movw	r7, #17665	; 0x4501
   80638:	f244 3851 	movw	r8, #17233	; 0x4351
   8063c:	f2c0 0808 	movt	r8, #8
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80640:	f244 3979 	movw	r9, #17273	; 0x4379
   80644:	f2c0 0908 	movt	r9, #8
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   80648:	4638      	mov	r0, r7
   8064a:	4629      	mov	r1, r5
   8064c:	47c0      	blx	r8
   8064e:	2800      	cmp	r0, #0
   80650:	f040 8493 	bne.w	80f7a <sd_mmc_check+0xae6>
   80654:	f000 bc79 	b.w	80f4a <sd_mmc_check+0xab6>
   80658:	4638      	mov	r0, r7
   8065a:	4629      	mov	r1, r5
   8065c:	47c0      	blx	r8
   8065e:	2800      	cmp	r0, #0
   80660:	f000 8473 	beq.w	80f4a <sd_mmc_check+0xab6>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80664:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80666:	2800      	cmp	r0, #0
   80668:	da0d      	bge.n	80686 <sd_mmc_check+0x1f2>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
   8066a:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
   8066e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   80672:	f040 8460 	bne.w	80f36 <sd_mmc_check+0xaa2>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
   80676:	49a6      	ldr	r1, [pc, #664]	; (80910 <sd_mmc_check+0x47c>)
   80678:	680b      	ldr	r3, [r1, #0]
   8067a:	7bda      	ldrb	r2, [r3, #15]
   8067c:	f042 0008 	orr.w	r0, r2, #8
   80680:	73d8      	strb	r0, [r3, #15]
   80682:	f000 bc58 	b.w	80f36 <sd_mmc_check+0xaa2>
   80686:	f106 36ff 	add.w	r6, r6, #4294967295
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
   8068a:	4638      	mov	r0, r7
   8068c:	4629      	mov	r1, r5
   8068e:	47c0      	blx	r8
   80690:	2800      	cmp	r0, #0
   80692:	f040 847c 	bne.w	80f8e <sd_mmc_check+0xafa>
   80696:	f000 bc58 	b.w	80f4a <sd_mmc_check+0xab6>
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
		return false;
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
   8069a:	499d      	ldr	r1, [pc, #628]	; (80910 <sd_mmc_check+0x47c>)
   8069c:	6808      	ldr	r0, [r1, #0]
   8069e:	f04f 0201 	mov.w	r2, #1
   806a2:	8182      	strh	r2, [r0, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
   806a4:	f241 1003 	movw	r0, #4355	; 0x1103
   806a8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   806ac:	4b99      	ldr	r3, [pc, #612]	; (80914 <sd_mmc_check+0x480>)
   806ae:	4798      	blx	r3
   806b0:	2800      	cmp	r0, #0
   806b2:	f000 8121 	beq.w	808f8 <sd_mmc_check+0x464>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
   806b6:	4998      	ldr	r1, [pc, #608]	; (80918 <sd_mmc_check+0x484>)
   806b8:	4788      	blx	r1
   806ba:	2800      	cmp	r0, #0
   806bc:	f000 811f 	beq.w	808fe <sd_mmc_check+0x46a>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   806c0:	4893      	ldr	r0, [pc, #588]	; (80910 <sd_mmc_check+0x47c>)
   806c2:	6803      	ldr	r3, [r0, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   806c4:	7c9a      	ldrb	r2, [r3, #18]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   806c6:	f3c2 0183 	ubfx	r1, r2, #2, #4
   806ca:	f101 30ff 	add.w	r0, r1, #4294967295
   806ce:	2803      	cmp	r0, #3
   806d0:	d803      	bhi.n	806da <sd_mmc_check+0x246>
   806d2:	e8df f000 	tbb	[pc, r0]
   806d6:	0a06      	.short	0x0a06
   806d8:	120e      	.short	0x120e
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   806da:	f04f 0112 	mov.w	r1, #18
   806de:	7419      	strb	r1, [r3, #16]
   806e0:	e00e      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   806e2:	f04f 0214 	mov.w	r2, #20
   806e6:	741a      	strb	r2, [r3, #16]
   806e8:	e00a      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   806ea:	f04f 0022 	mov.w	r0, #34	; 0x22
   806ee:	7418      	strb	r0, [r3, #16]
   806f0:	e006      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   806f2:	f04f 0130 	mov.w	r1, #48	; 0x30
   806f6:	7419      	strb	r1, [r3, #16]
   806f8:	e002      	b.n	80700 <sd_mmc_check+0x26c>
		break;

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   806fa:	f04f 0240 	mov.w	r2, #64	; 0x40
   806fe:	741a      	strb	r2, [r3, #16]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80700:	7d5a      	ldrb	r2, [r3, #21]
		break;
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   80702:	f002 0007 	and.w	r0, r2, #7
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80706:	4985      	ldr	r1, [pc, #532]	; (8091c <sd_mmc_check+0x488>)
   80708:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   8070c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80710:	fb00 f101 	mul.w	r1, r0, r1
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   80714:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   80718:	4881      	ldr	r0, [pc, #516]	; (80920 <sd_mmc_check+0x48c>)
   8071a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   8071e:	fb02 f101 	mul.w	r1, r2, r1
   80722:	6019      	str	r1, [r3, #0]
   80724:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80726:	7e18      	ldrb	r0, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80728:	7e5a      	ldrb	r2, [r3, #25]
   8072a:	ea4f 0282 	mov.w	r2, r2, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   8072e:	ea42 2080 	orr.w	r0, r2, r0, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80732:	ea40 11a1 	orr.w	r1, r0, r1, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
   80736:	ea4f 5201 	mov.w	r2, r1, lsl #20
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   8073a:	ea4f 5112 	mov.w	r1, r2, lsr #20
   8073e:	f512 1f80 	cmn.w	r2, #1048576	; 0x100000
   80742:	d015      	beq.n	80770 <sd_mmc_check+0x2dc>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80744:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80746:	7eda      	ldrb	r2, [r3, #27]
   80748:	ea4f 0242 	mov.w	r2, r2, lsl #1
   8074c:	ea42 10e0 	orr.w	r0, r2, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   80750:	f101 0101 	add.w	r1, r1, #1
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80754:	f000 0207 	and.w	r2, r0, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   80758:	f102 0202 	add.w	r2, r2, #2
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   8075c:	fa01 f102 	lsl.w	r1, r1, r2
   80760:	7dd8      	ldrb	r0, [r3, #23]
   80762:	f000 020f 	and.w	r2, r0, #15
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80766:	fa01 f102 	lsl.w	r1, r1, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   8076a:	ea4f 2091 	mov.w	r0, r1, lsr #10
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   8076e:	6058      	str	r0, [r3, #4]
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
   80770:	899b      	ldrh	r3, [r3, #12]
	if (!sd_mmc_cmd9_mci()) {
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
   80772:	f243 1007 	movw	r0, #12551	; 0x3107
   80776:	ea4f 4103 	mov.w	r1, r3, lsl #16
   8077a:	4a66      	ldr	r2, [pc, #408]	; (80914 <sd_mmc_check+0x480>)
   8077c:	4790      	blx	r2
   8077e:	2800      	cmp	r0, #0
   80780:	f000 80c0 	beq.w	80904 <sd_mmc_check+0x470>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   80784:	4d62      	ldr	r5, [pc, #392]	; (80910 <sd_mmc_check+0x47c>)
   80786:	6829      	ldr	r1, [r5, #0]
   80788:	7c08      	ldrb	r0, [r1, #16]
   8078a:	283f      	cmp	r0, #63	; 0x3f
   8078c:	f240 809c 	bls.w	808c8 <sd_mmc_check+0x434>
{
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   80790:	f04f 0100 	mov.w	r1, #0
   80794:	9100      	str	r1, [sp, #0]
   80796:	f241 1008 	movw	r0, #4360	; 0x1108
   8079a:	f2c0 0008 	movt	r0, #8
   8079e:	f44f 7200 	mov.w	r2, #512	; 0x200
   807a2:	f04f 0301 	mov.w	r3, #1
   807a6:	4d5f      	ldr	r5, [pc, #380]	; (80924 <sd_mmc_check+0x490>)
   807a8:	47a8      	blx	r5
   807aa:	2800      	cmp	r0, #0
   807ac:	f000 83d0 	beq.w	80f50 <sd_mmc_check+0xabc>
   807b0:	f04f 0500 	mov.w	r5, #0
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
		if (!driver_read_word(&ext_csd)) {
   807b4:	4e5c      	ldr	r6, [pc, #368]	; (80928 <sd_mmc_check+0x494>)
   807b6:	a802      	add	r0, sp, #8
   807b8:	47b0      	blx	r6
   807ba:	2800      	cmp	r0, #0
   807bc:	f000 83c8 	beq.w	80f50 <sd_mmc_check+0xabc>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   807c0:	f105 0501 	add.w	r5, r5, #1
   807c4:	b2ad      	uxth	r5, r5
   807c6:	2d32      	cmp	r5, #50	; 0x32
   807c8:	d1f5      	bne.n	807b6 <sd_mmc_check+0x322>
		if (!driver_read_word(&ext_csd)) {
			return false;
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   807ca:	9e02      	ldr	r6, [sp, #8]
   807cc:	f006 0302 	and.w	r3, r6, #2
   807d0:	b2de      	uxtb	r6, r3
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   807d2:	4a4f      	ldr	r2, [pc, #316]	; (80910 <sd_mmc_check+0x47c>)
   807d4:	6810      	ldr	r0, [r2, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   807d6:	7e87      	ldrb	r7, [r0, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807d8:	7e01      	ldrb	r1, [r0, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   807da:	7e43      	ldrb	r3, [r0, #25]
   807dc:	ea4f 0283 	mov.w	r2, r3, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807e0:	ea42 2081 	orr.w	r0, r2, r1, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   807e4:	ea40 17a7 	orr.w	r7, r0, r7, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
   807e8:	ea4f 5107 	mov.w	r1, r7, lsl #20
   807ec:	f511 1f80 	cmn.w	r1, #1048576	; 0x100000
   807f0:	d11a      	bne.n	80828 <sd_mmc_check+0x394>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
			if (!driver_read_word(&sec_count)) {
   807f2:	4f4d      	ldr	r7, [pc, #308]	; (80928 <sd_mmc_check+0x494>)
   807f4:	a803      	add	r0, sp, #12
   807f6:	47b8      	blx	r7
   807f8:	2800      	cmp	r0, #0
   807fa:	f000 83a9 	beq.w	80f50 <sd_mmc_check+0xabc>
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   807fe:	f105 0501 	add.w	r5, r5, #1
   80802:	b2ad      	uxth	r5, r5
   80804:	2d35      	cmp	r5, #53	; 0x35
   80806:	d9f5      	bls.n	807f4 <sd_mmc_check+0x360>
			if (!driver_read_word(&sec_count)) {
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   80808:	4b41      	ldr	r3, [pc, #260]	; (80910 <sd_mmc_check+0x47c>)
   8080a:	681a      	ldr	r2, [r3, #0]
   8080c:	9803      	ldr	r0, [sp, #12]
   8080e:	ea4f 0750 	mov.w	r7, r0, lsr #1
   80812:	6057      	str	r7, [r2, #4]
   80814:	e008      	b.n	80828 <sd_mmc_check+0x394>
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
		if (!driver_read_word(&sec_count)) {
   80816:	a803      	add	r0, sp, #12
   80818:	47b8      	blx	r7
   8081a:	2800      	cmp	r0, #0
   8081c:	f000 8398 	beq.w	80f50 <sd_mmc_check+0xabc>
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   80820:	f105 0501 	add.w	r5, r5, #1
   80824:	b2ad      	uxth	r5, r5
   80826:	e000      	b.n	8082a <sd_mmc_check+0x396>
		if (!driver_read_word(&sec_count)) {
   80828:	4f3f      	ldr	r7, [pc, #252]	; (80928 <sd_mmc_check+0x494>)
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   8082a:	2d7f      	cmp	r5, #127	; 0x7f
   8082c:	d9f3      	bls.n	80816 <sd_mmc_check+0x382>
   8082e:	e392      	b.n	80f56 <sd_mmc_check+0xac2>
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
   80830:	4d3e      	ldr	r5, [pc, #248]	; (8092c <sd_mmc_check+0x498>)
   80832:	7828      	ldrb	r0, [r5, #0]
   80834:	4a3e      	ldr	r2, [pc, #248]	; (80930 <sd_mmc_check+0x49c>)
   80836:	4790      	blx	r2
   80838:	4605      	mov	r5, r0
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
	uint32_t arg;

	switch (bus_width) {
   8083a:	2804      	cmp	r0, #4
   8083c:	d00b      	beq.n	80856 <sd_mmc_check+0x3c2>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
   8083e:	f44f 7100 	mov.w	r1, #512	; 0x200
   80842:	f2c0 11b7 	movt	r1, #439	; 0x1b7
   80846:	f04f 0000 	mov.w	r0, #0
   8084a:	f2c0 10b7 	movt	r0, #439	; 0x1b7
   8084e:	2d08      	cmp	r5, #8
   80850:	bf18      	it	ne
   80852:	4601      	movne	r1, r0
   80854:	e003      	b.n	8085e <sd_mmc_check+0x3ca>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
   80856:	f44f 7180 	mov.w	r1, #256	; 0x100
   8085a:	f2c0 11b7 	movt	r1, #439	; 0x1b7
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
   8085e:	f243 1006 	movw	r0, #12550	; 0x3106
   80862:	4b2c      	ldr	r3, [pc, #176]	; (80914 <sd_mmc_check+0x480>)
   80864:	4798      	blx	r3
   80866:	2800      	cmp	r0, #0
   80868:	f000 837d 	beq.w	80f66 <sd_mmc_check+0xad2>
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   8086c:	4931      	ldr	r1, [pc, #196]	; (80934 <sd_mmc_check+0x4a0>)
   8086e:	4788      	blx	r1
   80870:	f010 0f80 	tst.w	r0, #128	; 0x80
   80874:	f040 8377 	bne.w	80f66 <sd_mmc_check+0xad2>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->bus_width = bus_width;
   80878:	4a25      	ldr	r2, [pc, #148]	; (80910 <sd_mmc_check+0x47c>)
   8087a:	6810      	ldr	r0, [r2, #0]
   8087c:	7445      	strb	r5, [r0, #17]
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
   8087e:	4b2e      	ldr	r3, [pc, #184]	; (80938 <sd_mmc_check+0x4a4>)
   80880:	4798      	blx	r3
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
   80882:	492e      	ldr	r1, [pc, #184]	; (8093c <sd_mmc_check+0x4a8>)
   80884:	4788      	blx	r1
   80886:	b338      	cbz	r0, 808d8 <sd_mmc_check+0x444>
   80888:	b336      	cbz	r6, 808d8 <sd_mmc_check+0x444>
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
   8088a:	f243 1006 	movw	r0, #12550	; 0x3106
   8088e:	f44f 7180 	mov.w	r1, #256	; 0x100
   80892:	f2c0 31b9 	movt	r1, #953	; 0x3b9
   80896:	4a1f      	ldr	r2, [pc, #124]	; (80914 <sd_mmc_check+0x480>)
   80898:	4790      	blx	r2
   8089a:	2800      	cmp	r0, #0
   8089c:	f000 8366 	beq.w	80f6c <sd_mmc_check+0xad8>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   808a0:	4824      	ldr	r0, [pc, #144]	; (80934 <sd_mmc_check+0x4a0>)
   808a2:	4780      	blx	r0
   808a4:	f010 0f80 	tst.w	r0, #128	; 0x80
   808a8:	f040 8360 	bne.w	80f6c <sd_mmc_check+0xad8>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->high_speed = 1;
   808ac:	4e18      	ldr	r6, [pc, #96]	; (80910 <sd_mmc_check+0x47c>)
   808ae:	6837      	ldr	r7, [r6, #0]
   808b0:	f04f 0501 	mov.w	r5, #1
   808b4:	f887 5022 	strb.w	r5, [r7, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
   808b8:	f44f 43ea 	mov.w	r3, #29952	; 0x7500
   808bc:	f2c0 3319 	movt	r3, #793	; 0x319
   808c0:	603b      	str	r3, [r7, #0]
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
   808c2:	491d      	ldr	r1, [pc, #116]	; (80938 <sd_mmc_check+0x4a4>)
   808c4:	4788      	blx	r1
   808c6:	e007      	b.n	808d8 <sd_mmc_check+0x444>
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
   808c8:	4f1b      	ldr	r7, [pc, #108]	; (80938 <sd_mmc_check+0x4a4>)
   808ca:	47b8      	blx	r7
   808cc:	e004      	b.n	808d8 <sd_mmc_check+0x444>
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   808ce:	4640      	mov	r0, r8
   808d0:	4639      	mov	r1, r7
   808d2:	47b0      	blx	r6
   808d4:	b140      	cbz	r0, 808e8 <sd_mmc_check+0x454>
   808d6:	e018      	b.n	8090a <sd_mmc_check+0x476>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
   808d8:	f04f 050a 	mov.w	r5, #10
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   808dc:	f241 1810 	movw	r8, #4368	; 0x1110
   808e0:	f44f 7700 	mov.w	r7, #512	; 0x200
   808e4:	4e0b      	ldr	r6, [pc, #44]	; (80914 <sd_mmc_check+0x480>)
   808e6:	e7f2      	b.n	808ce <sd_mmc_check+0x43a>
   808e8:	f105 32ff 	add.w	r2, r5, #4294967295
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
	}

	uint8_t retry = 10;
	while (retry--) {
   808ec:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
   808f0:	d1ed      	bne.n	808ce <sd_mmc_check+0x43a>
		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return true;
		}
	}
	return false;
   808f2:	f04f 0000 	mov.w	r0, #0
   808f6:	e2ad      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   808f8:	f04f 0000 	mov.w	r0, #0
   808fc:	e2aa      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
		return false;
   808fe:	f04f 0000 	mov.w	r0, #0
   80902:	e2a7      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
   80904:	f04f 0000 	mov.w	r0, #0
   80908:	e2a4      	b.n	80e54 <sd_mmc_check+0x9c0>
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return true;
   8090a:	f04f 0001 	mov.w	r0, #1
   8090e:	e2a1      	b.n	80e54 <sd_mmc_check+0x9c0>
   80910:	20070b08 	.word	0x20070b08
   80914:	00084351 	.word	0x00084351
   80918:	0008028d 	.word	0x0008028d
   8091c:	0008c1b8 	.word	0x0008c1b8
   80920:	0008c1d4 	.word	0x0008c1d4
   80924:	000843e1 	.word	0x000843e1
   80928:	000844b9 	.word	0x000844b9
   8092c:	20070b0e 	.word	0x20070b0e
   80930:	000842a1 	.word	0x000842a1
   80934:	00084379 	.word	0x00084379
   80938:	000801a5 	.word	0x000801a5
   8093c:	000842ad 	.word	0x000842ad
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
   80940:	f645 3002 	movw	r0, #23298	; 0x5b02
   80944:	f04f 0100 	mov.w	r1, #0
   80948:	f244 3351 	movw	r3, #17233	; 0x4351
   8094c:	f2c0 0308 	movt	r3, #8
   80950:	4798      	blx	r3
   80952:	2800      	cmp	r0, #0
   80954:	f000 828d 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
   80958:	f245 1003 	movw	r0, #20739	; 0x5103
   8095c:	f04f 0100 	mov.w	r1, #0
   80960:	f244 3251 	movw	r2, #17233	; 0x4351
   80964:	f2c0 0208 	movt	r2, #8
   80968:	4790      	blx	r2
   8096a:	2800      	cmp	r0, #0
   8096c:	f000 8281 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
   80970:	f640 3508 	movw	r5, #2824	; 0xb08
   80974:	f2c2 0507 	movt	r5, #8199	; 0x2007
   80978:	682e      	ldr	r6, [r5, #0]
   8097a:	f244 3079 	movw	r0, #17273	; 0x4379
   8097e:	f2c0 0008 	movt	r0, #8
   80982:	4780      	blx	r0
   80984:	ea4f 4110 	mov.w	r1, r0, lsr #16
   80988:	81b1      	strh	r1, [r6, #12]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   8098a:	682b      	ldr	r3, [r5, #0]
   8098c:	7bda      	ldrb	r2, [r3, #15]
   8098e:	f012 0f01 	tst.w	r2, #1
   80992:	d056      	beq.n	80a42 <sd_mmc_check+0x5ae>
		if (!sd_mmc_cmd9_mci()) {
   80994:	f240 208d 	movw	r0, #653	; 0x28d
   80998:	f2c0 0008 	movt	r0, #8
   8099c:	4780      	blx	r0
   8099e:	2800      	cmp	r0, #0
   809a0:	f000 8267 	beq.w	80e72 <sd_mmc_check+0x9de>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   809a4:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   809a6:	7d5a      	ldrb	r2, [r3, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   809a8:	f002 0007 	and.w	r0, r2, #7
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   809ac:	f24c 11b8 	movw	r1, #49592	; 0xc1b8
   809b0:	f2c0 0108 	movt	r1, #8
   809b4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   809b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   809bc:	fb00 f101 	mul.w	r1, r0, r1
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   809c0:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   809c4:	f24c 1078 	movw	r0, #49528	; 0xc178
   809c8:	f2c0 0008 	movt	r0, #8
   809cc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   809d0:	fb02 f101 	mul.w	r1, r2, r1
   809d4:	6019      	str	r1, [r3, #0]
   809d6:	7c98      	ldrb	r0, [r3, #18]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   809d8:	0982      	lsrs	r2, r0, #6
   809da:	d00f      	beq.n	809fc <sd_mmc_check+0x568>
   809dc:	7eda      	ldrb	r2, [r3, #27]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   809de:	7e98      	ldrb	r0, [r3, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   809e0:	7e59      	ldrb	r1, [r3, #25]
   809e2:	ea4f 4101 	mov.w	r1, r1, lsl #16
   809e6:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   809ea:	4302      	orrs	r2, r0
   809ec:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
   809f0:	f101 0101 	add.w	r1, r1, #1
   809f4:	ea4f 2041 	mov.w	r0, r1, lsl #9
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
   809f8:	6058      	str	r0, [r3, #4]
   809fa:	e022      	b.n	80a42 <sd_mmc_check+0x5ae>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   809fc:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   809fe:	7e18      	ldrb	r0, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80a00:	7e5a      	ldrb	r2, [r3, #25]
   80a02:	ea4f 0282 	mov.w	r2, r2, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80a06:	ea42 2080 	orr.w	r0, r2, r0, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   80a0a:	ea40 12a1 	orr.w	r2, r0, r1, asr #6
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80a0e:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80a10:	7ed9      	ldrb	r1, [r3, #27]
   80a12:	ea4f 0141 	mov.w	r1, r1, lsl #1
   80a16:	ea41 10e0 	orr.w	r0, r1, r0, asr #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80a1a:	ea4f 5202 	mov.w	r2, r2, lsl #20
   80a1e:	ea4f 5212 	mov.w	r2, r2, lsr #20
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   80a22:	f102 0201 	add.w	r2, r2, #1
   80a26:	f000 0107 	and.w	r1, r0, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   80a2a:	f101 0102 	add.w	r1, r1, #2
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   80a2e:	fa02 f001 	lsl.w	r0, r2, r1
   80a32:	7dda      	ldrb	r2, [r3, #23]
   80a34:	f002 010f 	and.w	r1, r2, #15
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80a38:	fa00 f001 	lsl.w	r0, r0, r1
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
   80a3c:	ea4f 2290 	mov.w	r2, r0, lsr #10
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
   80a40:	605a      	str	r2, [r3, #4]
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
   80a42:	f640 3308 	movw	r3, #2824	; 0xb08
   80a46:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80a4a:	681a      	ldr	r2, [r3, #0]
   80a4c:	8991      	ldrh	r1, [r2, #12]
			return false;
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
   80a4e:	f243 1007 	movw	r0, #12551	; 0x3107
   80a52:	ea4f 4101 	mov.w	r1, r1, lsl #16
   80a56:	f244 3351 	movw	r3, #17233	; 0x4351
   80a5a:	f2c0 0308 	movt	r3, #8
   80a5e:	4798      	blx	r3
   80a60:	2800      	cmp	r0, #0
   80a62:	f000 8206 	beq.w	80e72 <sd_mmc_check+0x9de>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80a66:	f640 3008 	movw	r0, #2824	; 0xb08
   80a6a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80a6e:	6801      	ldr	r1, [r0, #0]
   80a70:	7bca      	ldrb	r2, [r1, #15]
   80a72:	f012 0f01 	tst.w	r2, #1
   80a76:	d04e      	beq.n	80b16 <sd_mmc_check+0x682>
{
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   80a78:	898b      	ldrh	r3, [r1, #12]
   80a7a:	f241 1037 	movw	r0, #4407	; 0x1137
   80a7e:	ea4f 4103 	mov.w	r1, r3, lsl #16
   80a82:	f244 3251 	movw	r2, #17233	; 0x4351
   80a86:	f2c0 0208 	movt	r2, #8
   80a8a:	4790      	blx	r2
   80a8c:	2800      	cmp	r0, #0
   80a8e:	f000 81f0 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   80a92:	f04f 0301 	mov.w	r3, #1
   80a96:	9300      	str	r3, [sp, #0]
   80a98:	f241 1033 	movw	r0, #4403	; 0x1133
   80a9c:	f2c0 0008 	movt	r0, #8
   80aa0:	f04f 0100 	mov.w	r1, #0
   80aa4:	f04f 0208 	mov.w	r2, #8
   80aa8:	4d4c      	ldr	r5, [pc, #304]	; (80bdc <sd_mmc_check+0x748>)
   80aaa:	47a8      	blx	r5
   80aac:	2800      	cmp	r0, #0
   80aae:	f000 81e0 	beq.w	80e72 <sd_mmc_check+0x9de>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(scr, 1)) {
   80ab2:	a804      	add	r0, sp, #16
   80ab4:	f04f 0101 	mov.w	r1, #1
   80ab8:	4b49      	ldr	r3, [pc, #292]	; (80be0 <sd_mmc_check+0x74c>)
   80aba:	4798      	blx	r3
   80abc:	2800      	cmp	r0, #0
   80abe:	f000 81d8 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80ac2:	4848      	ldr	r0, [pc, #288]	; (80be4 <sd_mmc_check+0x750>)
   80ac4:	4780      	blx	r0
   80ac6:	2800      	cmp	r0, #0
   80ac8:	f000 81d3 	beq.w	80e72 <sd_mmc_check+0x9de>
   80acc:	f89d 1010 	ldrb.w	r1, [sp, #16]
		return false;
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   80ad0:	f001 030f 	and.w	r3, r1, #15
   80ad4:	2b01      	cmp	r3, #1
   80ad6:	d009      	beq.n	80aec <sd_mmc_check+0x658>
   80ad8:	b113      	cbz	r3, 80ae0 <sd_mmc_check+0x64c>
   80ada:	2b02      	cmp	r3, #2
   80adc:	d116      	bne.n	80b0c <sd_mmc_check+0x678>
   80ade:	e00b      	b.n	80af8 <sd_mmc_check+0x664>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   80ae0:	4a41      	ldr	r2, [pc, #260]	; (80be8 <sd_mmc_check+0x754>)
   80ae2:	6813      	ldr	r3, [r2, #0]
   80ae4:	f04f 0010 	mov.w	r0, #16
   80ae8:	7418      	strb	r0, [r3, #16]
   80aea:	e014      	b.n	80b16 <sd_mmc_check+0x682>
		break;

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   80aec:	493e      	ldr	r1, [pc, #248]	; (80be8 <sd_mmc_check+0x754>)
   80aee:	680b      	ldr	r3, [r1, #0]
   80af0:	f04f 021a 	mov.w	r2, #26
   80af4:	741a      	strb	r2, [r3, #16]
   80af6:	e00e      	b.n	80b16 <sd_mmc_check+0x682>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80af8:	f89d 3012 	ldrb.w	r3, [sp, #18]
		break;

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   80afc:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
   80afe:	483a      	ldr	r0, [pc, #232]	; (80be8 <sd_mmc_check+0x754>)
   80b00:	6801      	ldr	r1, [r0, #0]
   80b02:	bf14      	ite	ne
   80b04:	2230      	movne	r2, #48	; 0x30
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
   80b06:	2220      	moveq	r2, #32
   80b08:	740a      	strb	r2, [r1, #16]
   80b0a:	e004      	b.n	80b16 <sd_mmc_check+0x682>
		}
		break;

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   80b0c:	4a36      	ldr	r2, [pc, #216]	; (80be8 <sd_mmc_check+0x754>)
   80b0e:	6810      	ldr	r0, [r2, #0]
   80b10:	f04f 0110 	mov.w	r1, #16
   80b14:	7401      	strb	r1, [r0, #16]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
		if (!sd_acmd51()) {
			return false;
		}
	}
	if (IS_SDIO()) {
   80b16:	f640 3008 	movw	r0, #2824	; 0xb08
   80b1a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80b1e:	6801      	ldr	r1, [r0, #0]
   80b20:	7bcb      	ldrb	r3, [r1, #15]
   80b22:	f003 0204 	and.w	r2, r3, #4
   80b26:	b2d0      	uxtb	r0, r2
   80b28:	2800      	cmp	r0, #0
   80b2a:	f000 8095 	beq.w	80c58 <sd_mmc_check+0x7c4>
 	uint32_t unit;
	uint32_t mul;
	uint8_t tplfe_max_tran_speed;

	// Read CIS area address in CCCR area
	addr_cis = 0; // Init all bytes, because the next function fill 3 bytes only
   80b2e:	f04f 0100 	mov.w	r1, #0
   80b32:	9103      	str	r1, [sp, #12]
	if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, SDIO_CCCR_CIS_PTR,
   80b34:	f04f 0503 	mov.w	r5, #3
   80b38:	9500      	str	r5, [sp, #0]
   80b3a:	f04f 0301 	mov.w	r3, #1
   80b3e:	9301      	str	r3, [sp, #4]
   80b40:	4608      	mov	r0, r1
   80b42:	f04f 0209 	mov.w	r2, #9
   80b46:	f240 15d5 	movw	r5, #469	; 0x1d5
   80b4a:	f2c0 0508 	movt	r5, #8
   80b4e:	47a8      	blx	r5
   80b50:	2800      	cmp	r0, #0
   80b52:	f000 818e 	beq.w	80e72 <sd_mmc_check+0x9de>
			1, 3, true)) {
		sd_mmc_debug("%s: CMD53 Read CIS Fail\n\r", __func__);
		return false;
	}
	if (!driver_start_read_blocks((uint8_t *)&addr_cis, 1)) {
   80b56:	a803      	add	r0, sp, #12
   80b58:	f04f 0101 	mov.w	r1, #1
   80b5c:	4b20      	ldr	r3, [pc, #128]	; (80be0 <sd_mmc_check+0x74c>)
   80b5e:	4798      	blx	r3
   80b60:	2800      	cmp	r0, #0
   80b62:	f000 8186 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80b66:	491f      	ldr	r1, [pc, #124]	; (80be4 <sd_mmc_check+0x750>)
   80b68:	4788      	blx	r1
   80b6a:	2800      	cmp	r0, #0
   80b6c:	f000 8181 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	addr_cis = le32_to_cpu(addr_cis);
   80b70:	9d03      	ldr	r5, [sp, #12]

	// Search Fun0 tuple in the CIA area
	addr = addr_cis;
	while (1) {
		// Read a sample of CIA area
		if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 3, true)) {
   80b72:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80bec <sd_mmc_check+0x758>
			sd_mmc_debug("%s: CMD53 Read CIA Fail\n\r", __func__);
			return false;
		}
		if (!driver_start_read_blocks(buf, 1)) {
   80b76:	4f1a      	ldr	r7, [pc, #104]	; (80be0 <sd_mmc_check+0x74c>)
			return false;
		}
		if (!driver_wait_end_of_read_blocks()) {
   80b78:	4e1a      	ldr	r6, [pc, #104]	; (80be4 <sd_mmc_check+0x750>)

	// Search Fun0 tuple in the CIA area
	addr = addr_cis;
	while (1) {
		// Read a sample of CIA area
		if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 3, true)) {
   80b7a:	f04f 0203 	mov.w	r2, #3
   80b7e:	9200      	str	r2, [sp, #0]
   80b80:	f04f 0301 	mov.w	r3, #1
   80b84:	9301      	str	r3, [sp, #4]
   80b86:	f04f 0000 	mov.w	r0, #0
   80b8a:	4601      	mov	r1, r0
   80b8c:	462a      	mov	r2, r5
   80b8e:	47c0      	blx	r8
   80b90:	2800      	cmp	r0, #0
   80b92:	f000 816e 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Read CIA Fail\n\r", __func__);
			return false;
		}
		if (!driver_start_read_blocks(buf, 1)) {
   80b96:	a804      	add	r0, sp, #16
   80b98:	f04f 0101 	mov.w	r1, #1
   80b9c:	47b8      	blx	r7
   80b9e:	2800      	cmp	r0, #0
   80ba0:	f000 8167 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
		if (!driver_wait_end_of_read_blocks()) {
   80ba4:	47b0      	blx	r6
   80ba6:	2800      	cmp	r0, #0
   80ba8:	f000 8163 	beq.w	80e72 <sd_mmc_check+0x9de>
			return false;
		}
		if (buf[0] == SDIO_CISTPL_END) {
   80bac:	f89d 0010 	ldrb.w	r0, [sp, #16]
   80bb0:	28ff      	cmp	r0, #255	; 0xff
   80bb2:	f000 815e 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Tuple error\n\r", __func__);
			return false; // Tuple error
		}
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
   80bb6:	2822      	cmp	r0, #34	; 0x22
   80bb8:	d102      	bne.n	80bc0 <sd_mmc_check+0x72c>
   80bba:	f89d 3012 	ldrb.w	r3, [sp, #18]
   80bbe:	b1bb      	cbz	r3, 80bf0 <sd_mmc_check+0x75c>
			break; // Fun0 tuple found
		}
		if (buf[1] == 0) {
   80bc0:	f89d 1011 	ldrb.w	r1, [sp, #17]
   80bc4:	2900      	cmp	r1, #0
   80bc6:	f000 8154 	beq.w	80e72 <sd_mmc_check+0x9de>
			sd_mmc_debug("%s: CMD53 Tuple error\n\r", __func__);
			return false; // Tuple error
		}

		// Next address
		addr += (buf[1] + 2);
   80bca:	f101 0102 	add.w	r1, r1, #2
   80bce:	186d      	adds	r5, r5, r1
		if (addr > (addr_cis + 256)) {
   80bd0:	9a03      	ldr	r2, [sp, #12]
   80bd2:	f502 7080 	add.w	r0, r2, #256	; 0x100
   80bd6:	4285      	cmp	r5, r0
   80bd8:	d9cf      	bls.n	80b7a <sd_mmc_check+0x6e6>
   80bda:	e14a      	b.n	80e72 <sd_mmc_check+0x9de>
   80bdc:	000843e1 	.word	0x000843e1
   80be0:	0008454d 	.word	0x0008454d
   80be4:	00084665 	.word	0x00084665
   80be8:	20070b08 	.word	0x20070b08
   80bec:	000801d5 	.word	0x000801d5
			return false; // Outoff CIS area
		}
	}

	// Read all Fun0 tuple fields: fn0_blk_siz & max_tran_speed
	if (!sdio_cmd53(SDIO_CMD53_READ_FLAG, SDIO_CIA, addr, 1, 6, true)) {
   80bf0:	f04f 0306 	mov.w	r3, #6
   80bf4:	9300      	str	r3, [sp, #0]
   80bf6:	f04f 0301 	mov.w	r3, #1
   80bfa:	9301      	str	r3, [sp, #4]
   80bfc:	f04f 0000 	mov.w	r0, #0
   80c00:	4601      	mov	r1, r0
   80c02:	462a      	mov	r2, r5
   80c04:	4dbb      	ldr	r5, [pc, #748]	; (80ef4 <sd_mmc_check+0xa60>)
   80c06:	47a8      	blx	r5
   80c08:	2800      	cmp	r0, #0
   80c0a:	f000 8132 	beq.w	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD53 Read all Fun0 Fail\n\r", __func__);
		return false;
	}
	if (!driver_start_read_blocks(buf, 1)) {
   80c0e:	a804      	add	r0, sp, #16
   80c10:	f04f 0101 	mov.w	r1, #1
   80c14:	4ab8      	ldr	r2, [pc, #736]	; (80ef8 <sd_mmc_check+0xa64>)
   80c16:	4790      	blx	r2
   80c18:	2800      	cmp	r0, #0
   80c1a:	f000 812a 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80c1e:	49b7      	ldr	r1, [pc, #732]	; (80efc <sd_mmc_check+0xa68>)
   80c20:	4788      	blx	r1
   80c22:	2800      	cmp	r0, #0
   80c24:	f000 8125 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	tplfe_max_tran_speed = buf[5];
   80c28:	f89d 3015 	ldrb.w	r3, [sp, #21]
   80c2c:	2b32      	cmp	r3, #50	; 0x32
   80c2e:	bf28      	it	cs
   80c30:	2332      	movcs	r3, #50	; 0x32
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80c32:	48b3      	ldr	r0, [pc, #716]	; (80f00 <sd_mmc_check+0xa6c>)
   80c34:	6802      	ldr	r2, [r0, #0]
		 */
		tplfe_max_tran_speed = 0x32; // 25Mhz
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
   80c36:	f003 0007 	and.w	r0, r3, #7
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
   80c3a:	49b2      	ldr	r1, [pc, #712]	; (80f04 <sd_mmc_check+0xa70>)
   80c3c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   80c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80c44:	fb00 f101 	mul.w	r1, r0, r1
		tplfe_max_tran_speed = 0x32; // 25Mhz
	}

	// Decode transfer speed in Hz.
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
   80c48:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
   80c4c:	48ae      	ldr	r0, [pc, #696]	; (80f08 <sd_mmc_check+0xa74>)
   80c4e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   80c52:	fb03 f101 	mul.w	r1, r3, r1
   80c56:	6011      	str	r1, [r2, #0]
	if (IS_SDIO()) {
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
   80c58:	f640 320e 	movw	r2, #2830	; 0xb0e
   80c5c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80c60:	7810      	ldrb	r0, [r2, #0]
   80c62:	f244 23a1 	movw	r3, #17057	; 0x42a1
   80c66:	f2c0 0308 	movt	r3, #8
   80c6a:	4798      	blx	r3
   80c6c:	2803      	cmp	r0, #3
   80c6e:	d959      	bls.n	80d24 <sd_mmc_check+0x890>
		// TRY to enable 4-bit mode
		if (IS_SDIO()) {
   80c70:	f640 3008 	movw	r0, #2824	; 0xb08
   80c74:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80c78:	6801      	ldr	r1, [r0, #0]
   80c7a:	7bca      	ldrb	r2, [r1, #15]
   80c7c:	f002 0304 	and.w	r3, r2, #4
   80c80:	b2d8      	uxtb	r0, r3
   80c82:	b330      	cbz	r0, 80cd2 <sd_mmc_check+0x83e>
	 * A SDIO Low-Speed alone can supports 4bit (Optional)
	 */
	uint8_t u8_value;

	// Check 4bit support in 4BLS of "Card Capability" register
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
   80c84:	ad03      	add	r5, sp, #12
   80c86:	9500      	str	r5, [sp, #0]
   80c88:	f04f 0000 	mov.w	r0, #0
   80c8c:	4601      	mov	r1, r0
   80c8e:	f04f 0208 	mov.w	r2, #8
   80c92:	4603      	mov	r3, r0
   80c94:	4d9d      	ldr	r5, [pc, #628]	; (80f0c <sd_mmc_check+0xa78>)
   80c96:	47a8      	blx	r5
   80c98:	2800      	cmp	r0, #0
   80c9a:	f000 80ea 	beq.w	80e72 <sd_mmc_check+0x9de>
			0, &u8_value)) {
		return false;
	}
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
   80c9e:	f99d 100c 	ldrsb.w	r1, [sp, #12]
   80ca2:	2900      	cmp	r1, #0
   80ca4:	da15      	bge.n	80cd2 <sd_mmc_check+0x83e>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_BUSWIDTH_4B;
   80ca6:	ab14      	add	r3, sp, #80	; 0x50
   80ca8:	f04f 0202 	mov.w	r2, #2
   80cac:	f803 2d44 	strb.w	r2, [r3, #-68]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
   80cb0:	9300      	str	r3, [sp, #0]
   80cb2:	f04f 0001 	mov.w	r0, #1
   80cb6:	f04f 0100 	mov.w	r1, #0
   80cba:	f04f 0207 	mov.w	r2, #7
   80cbe:	4603      	mov	r3, r0
   80cc0:	47a8      	blx	r5
   80cc2:	2800      	cmp	r0, #0
   80cc4:	f000 80d5 	beq.w	80e72 <sd_mmc_check+0x9de>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->bus_width = 4;
   80cc8:	488d      	ldr	r0, [pc, #564]	; (80f00 <sd_mmc_check+0xa6c>)
   80cca:	6801      	ldr	r1, [r0, #0]
   80ccc:	f04f 0304 	mov.w	r3, #4
   80cd0:	744b      	strb	r3, [r1, #17]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_bus_width()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
   80cd2:	f640 3208 	movw	r2, #2824	; 0xb08
   80cd6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80cda:	6810      	ldr	r0, [r2, #0]
   80cdc:	7bc1      	ldrb	r1, [r0, #15]
   80cde:	f011 0f01 	tst.w	r1, #1
   80ce2:	d01a      	beq.n	80d1a <sd_mmc_check+0x886>
 */
static bool sd_acmd6(void)
{
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   80ce4:	8983      	ldrh	r3, [r0, #12]
   80ce6:	f241 1037 	movw	r0, #4407	; 0x1137
   80cea:	ea4f 4103 	mov.w	r1, r3, lsl #16
   80cee:	f244 3251 	movw	r2, #17233	; 0x4351
   80cf2:	f2c0 0208 	movt	r2, #8
   80cf6:	4790      	blx	r2
   80cf8:	2800      	cmp	r0, #0
   80cfa:	f000 80ba 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
   80cfe:	f241 1006 	movw	r0, #4358	; 0x1106
   80d02:	f04f 0102 	mov.w	r1, #2
   80d06:	4b82      	ldr	r3, [pc, #520]	; (80f10 <sd_mmc_check+0xa7c>)
   80d08:	4798      	blx	r3
   80d0a:	2800      	cmp	r0, #0
   80d0c:	f000 80b1 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	sd_mmc_card->bus_width = 4;
   80d10:	487b      	ldr	r0, [pc, #492]	; (80f00 <sd_mmc_check+0xa6c>)
   80d12:	6801      	ldr	r1, [r0, #0]
   80d14:	f04f 0204 	mov.w	r2, #4
   80d18:	744a      	strb	r2, [r1, #17]
			if (!sd_acmd6()) {
				return false;
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
   80d1a:	f240 13a5 	movw	r3, #421	; 0x1a5
   80d1e:	f2c0 0308 	movt	r3, #8
   80d22:	4798      	blx	r3
	}
	if (driver_is_high_speed_capable()) {
   80d24:	f244 20ad 	movw	r0, #17069	; 0x42ad
   80d28:	f2c0 0008 	movt	r0, #8
   80d2c:	4780      	blx	r0
   80d2e:	2800      	cmp	r0, #0
   80d30:	f000 8081 	beq.w	80e36 <sd_mmc_check+0x9a2>
		// TRY to enable High-Speed Mode
		if (IS_SDIO()) {
   80d34:	f640 3108 	movw	r1, #2824	; 0xb08
   80d38:	f2c2 0107 	movt	r1, #8199	; 0x2007
   80d3c:	680a      	ldr	r2, [r1, #0]
   80d3e:	7bd3      	ldrb	r3, [r2, #15]
   80d40:	f003 0004 	and.w	r0, r3, #4
   80d44:	b2c1      	uxtb	r1, r0
   80d46:	b359      	cbz	r1, 80da0 <sd_mmc_check+0x90c>
static bool sdio_cmd52_set_high_speed(void)
{
	uint8_t u8_value;

	// Check CIA.HS
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
   80d48:	ad03      	add	r5, sp, #12
   80d4a:	9500      	str	r5, [sp, #0]
   80d4c:	f04f 0000 	mov.w	r0, #0
   80d50:	4601      	mov	r1, r0
   80d52:	f04f 0213 	mov.w	r2, #19
   80d56:	4603      	mov	r3, r0
   80d58:	4d6c      	ldr	r5, [pc, #432]	; (80f0c <sd_mmc_check+0xa78>)
   80d5a:	47a8      	blx	r5
   80d5c:	2800      	cmp	r0, #0
   80d5e:	f000 8088 	beq.w	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
   80d62:	f89d 200c 	ldrb.w	r2, [sp, #12]
   80d66:	f012 0f01 	tst.w	r2, #1
   80d6a:	d019      	beq.n	80da0 <sd_mmc_check+0x90c>
		// No supported, it is not a protocol error
		return true;
	}
	// HS mode possible, then enable
	u8_value = SDIO_EHS;
   80d6c:	ab14      	add	r3, sp, #80	; 0x50
   80d6e:	f04f 0002 	mov.w	r0, #2
   80d72:	f803 0d44 	strb.w	r0, [r3, #-68]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
   80d76:	9300      	str	r3, [sp, #0]
   80d78:	f04f 0001 	mov.w	r0, #1
   80d7c:	f04f 0100 	mov.w	r1, #0
   80d80:	f04f 0213 	mov.w	r2, #19
   80d84:	4603      	mov	r3, r0
   80d86:	47a8      	blx	r5
   80d88:	2800      	cmp	r0, #0
   80d8a:	d072      	beq.n	80e72 <sd_mmc_check+0x9de>
			1, &u8_value)) {
		return false;
	}
	sd_mmc_card->high_speed = 1;
   80d8c:	495c      	ldr	r1, [pc, #368]	; (80f00 <sd_mmc_check+0xa6c>)
   80d8e:	680b      	ldr	r3, [r1, #0]
   80d90:	f04f 0201 	mov.w	r2, #1
   80d94:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
   80d98:	6818      	ldr	r0, [r3, #0]
   80d9a:	ea4f 0140 	mov.w	r1, r0, lsl #1
   80d9e:	6019      	str	r1, [r3, #0]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_high_speed()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
   80da0:	f640 3308 	movw	r3, #2824	; 0xb08
   80da4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80da8:	6818      	ldr	r0, [r3, #0]
   80daa:	7bc2      	ldrb	r2, [r0, #15]
   80dac:	f012 0f01 	tst.w	r2, #1
   80db0:	d03c      	beq.n	80e2c <sd_mmc_check+0x998>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
   80db2:	7c01      	ldrb	r1, [r0, #16]
   80db4:	2910      	cmp	r1, #16
   80db6:	d939      	bls.n	80e2c <sd_mmc_check+0x998>
 */
static bool sd_cm6_set_high_speed(void)
{
	uint8_t switch_status[SD_SW_STATUS_BSIZE];

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
   80db8:	f04f 0301 	mov.w	r3, #1
   80dbc:	9300      	str	r3, [sp, #0]
   80dbe:	f241 1006 	movw	r0, #4358	; 0x1106
   80dc2:	f2c0 0008 	movt	r0, #8
   80dc6:	f64f 7101 	movw	r1, #65281	; 0xff01
   80dca:	f2c8 01ff 	movt	r1, #33023	; 0x80ff
   80dce:	f04f 0240 	mov.w	r2, #64	; 0x40
   80dd2:	4d50      	ldr	r5, [pc, #320]	; (80f14 <sd_mmc_check+0xa80>)
   80dd4:	47a8      	blx	r5
   80dd6:	2800      	cmp	r0, #0
   80dd8:	d04b      	beq.n	80e72 <sd_mmc_check+0x9de>
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
   80dda:	a804      	add	r0, sp, #16
   80ddc:	f04f 0101 	mov.w	r1, #1
   80de0:	4b45      	ldr	r3, [pc, #276]	; (80ef8 <sd_mmc_check+0xa64>)
   80de2:	4798      	blx	r3
   80de4:	2800      	cmp	r0, #0
   80de6:	d044      	beq.n	80e72 <sd_mmc_check+0x9de>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
   80de8:	4844      	ldr	r0, [pc, #272]	; (80efc <sd_mmc_check+0xa68>)
   80dea:	4780      	blx	r0
   80dec:	2800      	cmp	r0, #0
   80dee:	d040      	beq.n	80e72 <sd_mmc_check+0x9de>
		return false;
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
   80df0:	4a49      	ldr	r2, [pc, #292]	; (80f18 <sd_mmc_check+0xa84>)
   80df2:	4790      	blx	r2
   80df4:	f010 0f80 	tst.w	r0, #128	; 0x80
   80df8:	d13b      	bne.n	80e72 <sd_mmc_check+0x9de>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
   80dfa:	f89d 1020 	ldrb.w	r1, [sp, #32]
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
   80dfe:	f001 030f 	and.w	r3, r1, #15
   80e02:	2b0f      	cmp	r3, #15
   80e04:	d012      	beq.n	80e2c <sd_mmc_check+0x998>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   80e06:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   80e0a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
   80e0e:	ea50 2202 	orrs.w	r2, r0, r2, lsl #8
   80e12:	d12e      	bne.n	80e72 <sd_mmc_check+0x9de>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
   80e14:	4941      	ldr	r1, [pc, #260]	; (80f1c <sd_mmc_check+0xa88>)
   80e16:	4788      	blx	r1
	sd_mmc_card->high_speed = 1;
   80e18:	4b39      	ldr	r3, [pc, #228]	; (80f00 <sd_mmc_check+0xa6c>)
   80e1a:	6818      	ldr	r0, [r3, #0]
   80e1c:	f04f 0201 	mov.w	r2, #1
   80e20:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
	sd_mmc_card->clock *= 2;
   80e24:	6801      	ldr	r1, [r0, #0]
   80e26:	ea4f 0341 	mov.w	r3, r1, lsl #1
   80e2a:	6003      	str	r3, [r0, #0]
					return false;
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
   80e2c:	f240 10a5 	movw	r0, #421	; 0x1a5
   80e30:	f2c0 0008 	movt	r0, #8
   80e34:	4780      	blx	r0
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80e36:	f640 3208 	movw	r2, #2824	; 0xb08
   80e3a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80e3e:	6811      	ldr	r1, [r2, #0]
   80e40:	7bcb      	ldrb	r3, [r1, #15]
   80e42:	f013 0f01 	tst.w	r3, #1
   80e46:	d006      	beq.n	80e56 <sd_mmc_check+0x9c2>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   80e48:	f241 1010 	movw	r0, #4368	; 0x1110
   80e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
   80e50:	4a2f      	ldr	r2, [pc, #188]	; (80f10 <sd_mmc_check+0xa7c>)
   80e52:	4790      	blx	r2
		sd_mmc_deselect_slot();
		return sd_mmc_err;
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   80e54:	b168      	cbz	r0, 80e72 <sd_mmc_check+0x9de>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   80e56:	f640 3008 	movw	r0, #2824	; 0xb08
   80e5a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80e5e:	6803      	ldr	r3, [r0, #0]
   80e60:	f04f 0100 	mov.w	r1, #0
   80e64:	7399      	strb	r1, [r3, #14]
		sd_mmc_deselect_slot();
   80e66:	f240 2229 	movw	r2, #553	; 0x229
   80e6a:	f2c0 0208 	movt	r2, #8
   80e6e:	4790      	blx	r2
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   80e70:	e07f      	b.n	80f72 <sd_mmc_check+0xade>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   80e72:	f640 3408 	movw	r4, #2824	; 0xb08
   80e76:	f2c2 0407 	movt	r4, #8199	; 0x2007
   80e7a:	6820      	ldr	r0, [r4, #0]
   80e7c:	f04f 0403 	mov.w	r4, #3
   80e80:	7384      	strb	r4, [r0, #14]
	sd_mmc_deselect_slot();
   80e82:	f240 2329 	movw	r3, #553	; 0x229
   80e86:	f2c0 0308 	movt	r3, #8
   80e8a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   80e8c:	e071      	b.n	80f72 <sd_mmc_check+0xade>
 */
static bool sd_cmd8(uint8_t * v2)
{
	uint32_t resp;

	*v2 = 0;
   80e8e:	f04f 0600 	mov.w	r6, #0
   80e92:	e001      	b.n	80e98 <sd_mmc_check+0xa04>
   80e94:	f04f 0600 	mov.w	r6, #0
static bool sdio_op_cond(void)
{
	uint32_t resp;

	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
   80e98:	f244 5005 	movw	r0, #17669	; 0x4505
   80e9c:	f04f 0100 	mov.w	r1, #0
   80ea0:	f244 3351 	movw	r3, #17233	; 0x4351
   80ea4:	f2c0 0308 	movt	r3, #8
   80ea8:	4798      	blx	r3
   80eaa:	2800      	cmp	r0, #0
   80eac:	f47f ab41 	bne.w	80532 <sd_mmc_check+0x9e>
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
		return false;
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80eb0:	f640 3208 	movw	r2, #2824	; 0xb08
   80eb4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80eb8:	6811      	ldr	r1, [r2, #0]
   80eba:	7bcb      	ldrb	r3, [r1, #15]
   80ebc:	f013 0f01 	tst.w	r3, #1
   80ec0:	f43f ad4a 	beq.w	80958 <sd_mmc_check+0x4c4>
   80ec4:	f7ff bb6d 	b.w	805a2 <sd_mmc_check+0x10e>
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   80ec8:	f640 3008 	movw	r0, #2824	; 0xb08
   80ecc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80ed0:	6801      	ldr	r1, [r0, #0]
   80ed2:	f04f 0302 	mov.w	r3, #2
   80ed6:	73cb      	strb	r3, [r1, #15]
static bool sd_mmc_mci_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
   80ed8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   80edc:	f04f 0100 	mov.w	r1, #0
   80ee0:	f244 3251 	movw	r2, #17233	; 0x4351
   80ee4:	f2c0 0208 	movt	r2, #8
   80ee8:	4790      	blx	r2
   80eea:	2800      	cmp	r0, #0
   80eec:	f47f ab9e 	bne.w	8062c <sd_mmc_check+0x198>
   80ef0:	e7b0      	b.n	80e54 <sd_mmc_check+0x9c0>
   80ef2:	bf00      	nop
   80ef4:	000801d5 	.word	0x000801d5
   80ef8:	0008454d 	.word	0x0008454d
   80efc:	00084665 	.word	0x00084665
   80f00:	20070b08 	.word	0x20070b08
   80f04:	0008c1b8 	.word	0x0008c1b8
   80f08:	0008c178 	.word	0x0008c178
   80f0c:	00080249 	.word	0x00080249
   80f10:	00084351 	.word	0x00084351
   80f14:	000843e1 	.word	0x000843e1
   80f18:	00084379 	.word	0x00084379
   80f1c:	0008432d 	.word	0x0008432d
			sd_mmc_card->type = CARD_TYPE_MMC;
			return sd_mmc_mci_install_mmc();
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   80f20:	f640 3008 	movw	r0, #2824	; 0xb08
   80f24:	f2c2 0007 	movt	r0, #8199	; 0x2007
   80f28:	6801      	ldr	r1, [r0, #0]
   80f2a:	7bca      	ldrb	r2, [r1, #15]
   80f2c:	f012 0f01 	tst.w	r2, #1
   80f30:	f47f ad06 	bne.w	80940 <sd_mmc_check+0x4ac>
   80f34:	e510      	b.n	80958 <sd_mmc_check+0x4c4>
		return false;
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
   80f36:	f645 3002 	movw	r0, #23298	; 0x5b02
   80f3a:	f04f 0100 	mov.w	r1, #0
   80f3e:	4b38      	ldr	r3, [pc, #224]	; (81020 <sd_mmc_check+0xb8c>)
   80f40:	4798      	blx	r3
   80f42:	2800      	cmp	r0, #0
   80f44:	f47f aba9 	bne.w	8069a <sd_mmc_check+0x206>
   80f48:	e784      	b.n	80e54 <sd_mmc_check+0x9c0>
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
		return false;
	}

	if (!mmc_mci_op_cond()) {
		return false;
   80f4a:	f04f 0000 	mov.w	r0, #0
   80f4e:	e781      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
   80f50:	f04f 0000 	mov.w	r0, #0
   80f54:	e77e      	b.n	80e54 <sd_mmc_check+0x9c0>
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
   80f56:	4933      	ldr	r1, [pc, #204]	; (81024 <sd_mmc_check+0xb90>)
   80f58:	7808      	ldrb	r0, [r1, #0]
   80f5a:	4b33      	ldr	r3, [pc, #204]	; (81028 <sd_mmc_check+0xb94>)
   80f5c:	4798      	blx	r3
   80f5e:	2803      	cmp	r0, #3
   80f60:	f63f ac66 	bhi.w	80830 <sd_mmc_check+0x39c>
   80f64:	e48d      	b.n	80882 <sd_mmc_check+0x3ee>
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
   80f66:	f04f 0000 	mov.w	r0, #0
   80f6a:	e773      	b.n	80e54 <sd_mmc_check+0x9c0>
			sd_mmc_configure_slot();
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
   80f6c:	f04f 0000 	mov.w	r0, #0
   80f70:	e770      	b.n	80e54 <sd_mmc_check+0x9c0>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
   80f72:	4620      	mov	r0, r4
   80f74:	b015      	add	sp, #84	; 0x54
   80f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80f7a:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80f7c:	2800      	cmp	r0, #0
   80f7e:	f6ff ab74 	blt.w	8066a <sd_mmc_check+0x1d6>
   80f82:	f241 0669 	movw	r6, #4201	; 0x1069
   80f86:	f106 36ff 	add.w	r6, r6, #4294967295
   80f8a:	f7ff bb65 	b.w	80658 <sd_mmc_check+0x1c4>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
   80f8e:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
   80f90:	2800      	cmp	r0, #0
   80f92:	f6ff ab6a 	blt.w	8066a <sd_mmc_check+0x1d6>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
			}
			break;
		}
		if (retry-- == 0) {
   80f96:	3e01      	subs	r6, #1
   80f98:	f47f ab5e 	bne.w	80658 <sd_mmc_check+0x1c4>
   80f9c:	e7d5      	b.n	80f4a <sd_mmc_check+0xab6>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   80f9e:	4649      	mov	r1, r9
   80fa0:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   80fa4:	f244 5029 	movw	r0, #17705	; 0x4529
   80fa8:	2e00      	cmp	r6, #0
   80faa:	bf08      	it	eq
   80fac:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   80fb0:	47a8      	blx	r5
   80fb2:	2800      	cmp	r0, #0
   80fb4:	d088      	beq.n	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80fb6:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   80fb8:	2800      	cmp	r0, #0
   80fba:	f6ff ab1e 	blt.w	805fa <sd_mmc_check+0x166>
   80fbe:	f640 0b35 	movw	fp, #2101	; 0x835
   80fc2:	f10b 3bff 	add.w	fp, fp, #4294967295
   80fc6:	f7ff bb02 	b.w	805ce <sd_mmc_check+0x13a>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
   80fca:	4649      	mov	r1, r9
   80fcc:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
   80fd0:	f244 5029 	movw	r0, #17705	; 0x4529
   80fd4:	2e00      	cmp	r6, #0
   80fd6:	bf08      	it	eq
   80fd8:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
   80fdc:	47a8      	blx	r5
   80fde:	2800      	cmp	r0, #0
   80fe0:	f43f af72 	beq.w	80ec8 <sd_mmc_check+0xa34>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80fe4:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
   80fe6:	2800      	cmp	r0, #0
   80fe8:	f6ff ab07 	blt.w	805fa <sd_mmc_check+0x166>
			if ((resp & OCR_CCS) != 0) {
				sd_mmc_card->type |= CARD_TYPE_HC;
			}
			break;
		}
		if (retry-- == 0) {
   80fec:	f1bb 0b01 	subs.w	fp, fp, #1
   80ff0:	f47f aaed 	bne.w	805ce <sd_mmc_check+0x13a>
   80ff4:	e768      	b.n	80ec8 <sd_mmc_check+0xa34>
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   80ff6:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   80ff8:	1e01      	subs	r1, r0, #0
   80ffa:	f6ff aac5 	blt.w	80588 <sd_mmc_check+0xf4>
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
   80ffe:	4638      	mov	r0, r7
   81000:	f401 11fc 	and.w	r1, r1, #2064384	; 0x1f8000
   81004:	47a8      	blx	r5
   81006:	2800      	cmp	r0, #0
   81008:	f43f af33 	beq.w	80e72 <sd_mmc_check+0x9de>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
   8100c:	47c0      	blx	r8
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
   8100e:	1e01      	subs	r1, r0, #0
   81010:	f6ff aaba 	blt.w	80588 <sd_mmc_check+0xf4>
			break;
		}
		if (cmd5_retry-- == 0) {
   81014:	f1b9 0902 	subs.w	r9, r9, #2
   81018:	f47f aaa1 	bne.w	8055e <sd_mmc_check+0xca>
   8101c:	e729      	b.n	80e72 <sd_mmc_check+0x9de>
   8101e:	bf00      	nop
   81020:	00084351 	.word	0x00084351
   81024:	20070b0e 	.word	0x20070b0e
   81028:	000842a1 	.word	0x000842a1

0008102c <sd_mmc_get_type>:
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
   8102c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   8102e:	f240 23d5 	movw	r3, #725	; 0x2d5
   81032:	f2c0 0308 	movt	r3, #8
   81036:	4798      	blx	r3
   81038:	b958      	cbnz	r0, 81052 <sd_mmc_get_type+0x26>
		return CARD_TYPE_UNKNOWN;
	}
	sd_mmc_deselect_slot();
   8103a:	f240 2029 	movw	r0, #553	; 0x229
   8103e:	f2c0 0008 	movt	r0, #8
   81042:	4780      	blx	r0
	return sd_mmc_card->type;
   81044:	f640 3108 	movw	r1, #2824	; 0xb08
   81048:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8104c:	680a      	ldr	r2, [r1, #0]
   8104e:	7bd0      	ldrb	r0, [r2, #15]
   81050:	bd08      	pop	{r3, pc}
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
   81052:	f04f 0000 	mov.w	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
   81056:	bd08      	pop	{r3, pc}

00081058 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   81058:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   8105a:	f240 23d5 	movw	r3, #725	; 0x2d5
   8105e:	f2c0 0308 	movt	r3, #8
   81062:	4798      	blx	r3
   81064:	b958      	cbnz	r0, 8107e <sd_mmc_get_capacity+0x26>
		return 0;
	}
	sd_mmc_deselect_slot();
   81066:	f240 2029 	movw	r0, #553	; 0x229
   8106a:	f2c0 0008 	movt	r0, #8
   8106e:	4780      	blx	r0
	return sd_mmc_card->capacity;
   81070:	f640 3108 	movw	r1, #2824	; 0xb08
   81074:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81078:	680a      	ldr	r2, [r1, #0]
   8107a:	6850      	ldr	r0, [r2, #4]
   8107c:	bd08      	pop	{r3, pc}
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
   8107e:	f04f 0000 	mov.w	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
   81082:	bd08      	pop	{r3, pc}

00081084 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
   81084:	f04f 0000 	mov.w	r0, #0
   81088:	4770      	bx	lr
   8108a:	bf00      	nop

0008108c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   8108c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81090:	b083      	sub	sp, #12
   81092:	468b      	mov	fp, r1
   81094:	4692      	mov	sl, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   81096:	f240 23d5 	movw	r3, #725	; 0x2d5
   8109a:	f2c0 0308 	movt	r3, #8
   8109e:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
   810a0:	4681      	mov	r9, r0
   810a2:	2800      	cmp	r0, #0
   810a4:	f040 8081 	bne.w	811aa <sd_mmc_init_read_blocks+0x11e>
   810a8:	f640 5841 	movw	r8, #3393	; 0xd41
   810ac:	f2c0 0803 	movt	r8, #3
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810b0:	f640 3608 	movw	r6, #2824	; 0xb08
   810b4:	f2c2 0607 	movt	r6, #8199	; 0x2007
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810b8:	f241 150d 	movw	r5, #4365	; 0x110d
   810bc:	f244 3451 	movw	r4, #17233	; 0x4351
   810c0:	f2c0 0408 	movt	r4, #8
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   810c4:	f244 3779 	movw	r7, #17273	; 0x4379
   810c8:	f2c0 0708 	movt	r7, #8
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810cc:	6830      	ldr	r0, [r6, #0]
   810ce:	8981      	ldrh	r1, [r0, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810d0:	4628      	mov	r0, r5
   810d2:	ea4f 4101 	mov.w	r1, r1, lsl #16
   810d6:	47a0      	blx	r4
   810d8:	2800      	cmp	r0, #0
   810da:	d046      	beq.n	8116a <sd_mmc_init_read_blocks+0xde>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   810dc:	47b8      	blx	r7
   810de:	f410 7f80 	tst.w	r0, #256	; 0x100
   810e2:	d14a      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
   810e4:	f108 38ff 	add.w	r8, r8, #4294967295
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   810e8:	6832      	ldr	r2, [r6, #0]
   810ea:	8993      	ldrh	r3, [r2, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   810ec:	4628      	mov	r0, r5
   810ee:	ea4f 4103 	mov.w	r1, r3, lsl #16
   810f2:	47a0      	blx	r4
   810f4:	2800      	cmp	r0, #0
   810f6:	d15c      	bne.n	811b2 <sd_mmc_init_read_blocks+0x126>
   810f8:	e037      	b.n	8116a <sd_mmc_init_read_blocks+0xde>
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   810fa:	ea4f 214b 	mov.w	r1, fp, lsl #9
   810fe:	e000      	b.n	81102 <sd_mmc_init_read_blocks+0x76>
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
   81100:	4659      	mov	r1, fp
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   81102:	f04f 0301 	mov.w	r3, #1
   81106:	9300      	str	r3, [sp, #0]
   81108:	f44f 7200 	mov.w	r2, #512	; 0x200
   8110c:	4653      	mov	r3, sl
   8110e:	f244 34e1 	movw	r4, #17377	; 0x43e1
   81112:	f2c0 0408 	movt	r4, #8
   81116:	47a0      	blx	r4
   81118:	b938      	cbnz	r0, 8112a <sd_mmc_init_read_blocks+0x9e>
		sd_mmc_deselect_slot();
   8111a:	f240 2129 	movw	r1, #553	; 0x229
   8111e:	f2c0 0108 	movt	r1, #8
   81122:	4788      	blx	r1
		return SD_MMC_ERR_COMM;
   81124:	f04f 0905 	mov.w	r9, #5
   81128:	e03f      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
   8112a:	f244 3079 	movw	r0, #17273	; 0x4379
   8112e:	f2c0 0008 	movt	r0, #8
   81132:	4780      	blx	r0
		if (resp & CARD_STATUS_ERR_RD_WR) {
   81134:	f04f 0100 	mov.w	r1, #0
   81138:	f2ce 4158 	movt	r1, #58456	; 0xe458
   8113c:	4001      	ands	r1, r0
   8113e:	b139      	cbz	r1, 81150 <sd_mmc_init_read_blocks+0xc4>
			sd_mmc_debug("%s: Read blocks %02d resp32 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
   81140:	f240 2029 	movw	r0, #553	; 0x229
   81144:	f2c0 0008 	movt	r0, #8
   81148:	4780      	blx	r0
			return SD_MMC_ERR_COMM;
   8114a:	f04f 0905 	mov.w	r9, #5
   8114e:	e02c      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   81150:	f640 320c 	movw	r2, #2828	; 0xb0c
   81154:	f2c2 0207 	movt	r2, #8199	; 0x2007
   81158:	f8a2 a000 	strh.w	sl, [r2]
	sd_mmc_nb_block_to_tranfer = nb_block;
   8115c:	f640 3304 	movw	r3, #2820	; 0xb04
   81160:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81164:	f8a3 a000 	strh.w	sl, [r3]
	return SD_MMC_OK;
   81168:	e01f      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
		return sd_mmc_err;
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
		sd_mmc_deselect_slot();
   8116a:	f240 2229 	movw	r2, #553	; 0x229
   8116e:	f2c0 0208 	movt	r2, #8
   81172:	4790      	blx	r2
		return SD_MMC_ERR_COMM;
   81174:	f04f 0905 	mov.w	r9, #5
   81178:	e017      	b.n	811aa <sd_mmc_init_read_blocks+0x11e>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   8117a:	f241 1011 	movw	r0, #4369	; 0x1111
   8117e:	f2c0 0008 	movt	r0, #8
   81182:	f241 1412 	movw	r4, #4370	; 0x1112
   81186:	f2c0 0410 	movt	r4, #16
   8118a:	f1ba 0f01 	cmp.w	sl, #1
   8118e:	bf88      	it	hi
   81190:	4620      	movhi	r0, r4
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   81192:	f640 3208 	movw	r2, #2824	; 0xb08
   81196:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8119a:	6813      	ldr	r3, [r2, #0]
   8119c:	7bd9      	ldrb	r1, [r3, #15]
   8119e:	f001 0408 	and.w	r4, r1, #8
   811a2:	b2e2      	uxtb	r2, r4
   811a4:	2a00      	cmp	r2, #0
   811a6:	d1ab      	bne.n	81100 <sd_mmc_init_read_blocks+0x74>
   811a8:	e7a7      	b.n	810fa <sd_mmc_init_read_blocks+0x6e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
   811aa:	4648      	mov	r0, r9
   811ac:	b003      	add	sp, #12
   811ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   811b2:	47b8      	blx	r7
   811b4:	f410 7f80 	tst.w	r0, #256	; 0x100
   811b8:	d1df      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
   811ba:	6830      	ldr	r0, [r6, #0]
   811bc:	8981      	ldrh	r1, [r0, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
   811be:	4628      	mov	r0, r5
   811c0:	ea4f 4101 	mov.w	r1, r1, lsl #16
   811c4:	47a0      	blx	r4
   811c6:	2800      	cmp	r0, #0
   811c8:	d0cf      	beq.n	8116a <sd_mmc_init_read_blocks+0xde>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
   811ca:	47b8      	blx	r7
   811cc:	f410 7f80 	tst.w	r0, #256	; 0x100
   811d0:	d1d3      	bne.n	8117a <sd_mmc_init_read_blocks+0xee>
				break;
			}
		}
		if (nec_timeout-- == 0) {
   811d2:	f1b8 0802 	subs.w	r8, r8, #2
   811d6:	f47f af79 	bne.w	810cc <sd_mmc_init_read_blocks+0x40>
   811da:	e7c6      	b.n	8116a <sd_mmc_init_read_blocks+0xde>

000811dc <sd_mmc_start_read_blocks>:
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   811dc:	b510      	push	{r4, lr}
   811de:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   811e0:	f244 534d 	movw	r3, #17741	; 0x454d
   811e4:	f2c0 0308 	movt	r3, #8
   811e8:	4798      	blx	r3
   811ea:	b948      	cbnz	r0, 81200 <sd_mmc_start_read_blocks+0x24>
		sd_mmc_nb_block_remaining = 0;
   811ec:	f640 310c 	movw	r1, #2828	; 0xb0c
   811f0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   811f4:	f04f 0300 	mov.w	r3, #0
   811f8:	800b      	strh	r3, [r1, #0]
		return SD_MMC_ERR_COMM;
   811fa:	f04f 0005 	mov.w	r0, #5
   811fe:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
   81200:	f640 300c 	movw	r0, #2828	; 0xb0c
   81204:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81208:	8802      	ldrh	r2, [r0, #0]
   8120a:	1b14      	subs	r4, r2, r4
   8120c:	8004      	strh	r4, [r0, #0]
	return SD_MMC_OK;
   8120e:	f04f 0000 	mov.w	r0, #0
}
   81212:	bd10      	pop	{r4, pc}

00081214 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(void)
{
   81214:	b508      	push	{r3, lr}
	if (!driver_wait_end_of_read_blocks()) {
   81216:	f244 6365 	movw	r3, #18021	; 0x4665
   8121a:	f2c0 0308 	movt	r3, #8
   8121e:	4798      	blx	r3
   81220:	2800      	cmp	r0, #0
   81222:	d030      	beq.n	81286 <sd_mmc_wait_end_of_read_blocks+0x72>
		return SD_MMC_ERR_COMM;
	}
	if (sd_mmc_nb_block_remaining) {
   81224:	f640 300c 	movw	r0, #2828	; 0xb0c
   81228:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8122c:	8801      	ldrh	r1, [r0, #0]
   8122e:	2900      	cmp	r1, #0
   81230:	d12c      	bne.n	8128c <sd_mmc_wait_end_of_read_blocks+0x78>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   81232:	f640 3204 	movw	r2, #2820	; 0xb04
   81236:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8123a:	8813      	ldrh	r3, [r2, #0]
   8123c:	2b01      	cmp	r3, #1
   8123e:	d107      	bne.n	81250 <sd_mmc_wait_end_of_read_blocks+0x3c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   81240:	f240 2129 	movw	r1, #553	; 0x229
   81244:	f2c0 0108 	movt	r1, #8
   81248:	4788      	blx	r1
		return SD_MMC_OK;
   8124a:	f04f 0000 	mov.w	r0, #0
   8124e:	bd08      	pop	{r3, pc}
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   81250:	f243 100c 	movw	r0, #12556	; 0x310c
   81254:	f04f 0100 	mov.w	r1, #0
   81258:	f244 3251 	movw	r2, #17233	; 0x4351
   8125c:	f2c0 0208 	movt	r2, #8
   81260:	4790      	blx	r2
   81262:	b940      	cbnz	r0, 81276 <sd_mmc_wait_end_of_read_blocks+0x62>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   81264:	f243 100c 	movw	r0, #12556	; 0x310c
   81268:	f04f 0100 	mov.w	r1, #0
   8126c:	f244 3351 	movw	r3, #17233	; 0x4351
   81270:	f2c0 0308 	movt	r3, #8
   81274:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   81276:	f240 2029 	movw	r0, #553	; 0x229
   8127a:	f2c0 0008 	movt	r0, #8
   8127e:	4780      	blx	r0
	return SD_MMC_OK;
   81280:	f04f 0000 	mov.w	r0, #0
   81284:	bd08      	pop	{r3, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(void)
{
	if (!driver_wait_end_of_read_blocks()) {
		return SD_MMC_ERR_COMM;
   81286:	f04f 0005 	mov.w	r0, #5
   8128a:	bd08      	pop	{r3, pc}
	}
	if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
   8128c:	f04f 0000 	mov.w	r0, #0
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   81290:	bd08      	pop	{r3, pc}
   81292:	bf00      	nop

00081294 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   81294:	b5f0      	push	{r4, r5, r6, r7, lr}
   81296:	b083      	sub	sp, #12
   81298:	4606      	mov	r6, r0
   8129a:	460f      	mov	r7, r1
   8129c:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   8129e:	f240 24d5 	movw	r4, #725	; 0x2d5
   812a2:	f2c0 0408 	movt	r4, #8
   812a6:	47a0      	blx	r4
	if (sd_mmc_err != SD_MMC_OK) {
   812a8:	4604      	mov	r4, r0
   812aa:	2800      	cmp	r0, #0
   812ac:	d158      	bne.n	81360 <sd_mmc_init_write_blocks+0xcc>
		return sd_mmc_err;
	}
	if (sd_mmc_is_write_protected(slot)) {
   812ae:	4630      	mov	r0, r6
   812b0:	f241 0385 	movw	r3, #4229	; 0x1085
   812b4:	f2c0 0308 	movt	r3, #8
   812b8:	4798      	blx	r3
   812ba:	b138      	cbz	r0, 812cc <sd_mmc_init_write_blocks+0x38>
		sd_mmc_deselect_slot();
   812bc:	f240 2329 	movw	r3, #553	; 0x229
   812c0:	f2c0 0308 	movt	r3, #8
   812c4:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   812c6:	f04f 0407 	mov.w	r4, #7
   812ca:	e049      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   812cc:	f249 1018 	movw	r0, #37144	; 0x9118
   812d0:	f2c0 0008 	movt	r0, #8
   812d4:	f249 1119 	movw	r1, #37145	; 0x9119
   812d8:	f2c0 0110 	movt	r1, #16
   812dc:	2d01      	cmp	r5, #1
   812de:	bf88      	it	hi
   812e0:	4608      	movhi	r0, r1
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   812e2:	f640 3208 	movw	r2, #2824	; 0xb08
   812e6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   812ea:	6816      	ldr	r6, [r2, #0]
   812ec:	7bf3      	ldrb	r3, [r6, #15]
   812ee:	f003 0108 	and.w	r1, r3, #8
   812f2:	b2ca      	uxtb	r2, r1
   812f4:	b912      	cbnz	r2, 812fc <sd_mmc_init_write_blocks+0x68>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   812f6:	ea4f 2147 	mov.w	r1, r7, lsl #9
   812fa:	e000      	b.n	812fe <sd_mmc_init_write_blocks+0x6a>
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
   812fc:	4639      	mov	r1, r7
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   812fe:	f04f 0601 	mov.w	r6, #1
   81302:	9600      	str	r6, [sp, #0]
   81304:	f44f 7200 	mov.w	r2, #512	; 0x200
   81308:	462b      	mov	r3, r5
   8130a:	f244 36e1 	movw	r6, #17377	; 0x43e1
   8130e:	f2c0 0608 	movt	r6, #8
   81312:	47b0      	blx	r6
   81314:	b938      	cbnz	r0, 81326 <sd_mmc_init_write_blocks+0x92>
		sd_mmc_deselect_slot();
   81316:	f240 2029 	movw	r0, #553	; 0x229
   8131a:	f2c0 0008 	movt	r0, #8
   8131e:	4780      	blx	r0
		return SD_MMC_ERR_COMM;
   81320:	f04f 0405 	mov.w	r4, #5
   81324:	e01c      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
   81326:	f244 3079 	movw	r0, #17273	; 0x4379
   8132a:	f2c0 0008 	movt	r0, #8
   8132e:	4780      	blx	r0
		if (resp & CARD_STATUS_ERR_RD_WR) {
   81330:	f04f 0300 	mov.w	r3, #0
   81334:	f2ce 4358 	movt	r3, #58456	; 0xe458
   81338:	4003      	ands	r3, r0
   8133a:	b13b      	cbz	r3, 8134c <sd_mmc_init_write_blocks+0xb8>
			sd_mmc_debug("%s: Write blocks %02d r1 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
   8133c:	f240 2429 	movw	r4, #553	; 0x229
   81340:	f2c0 0408 	movt	r4, #8
   81344:	47a0      	blx	r4
			return SD_MMC_ERR_COMM;
   81346:	f04f 0405 	mov.w	r4, #5
   8134a:	e009      	b.n	81360 <sd_mmc_init_write_blocks+0xcc>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   8134c:	f640 310c 	movw	r1, #2828	; 0xb0c
   81350:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81354:	800d      	strh	r5, [r1, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   81356:	f640 3204 	movw	r2, #2820	; 0xb04
   8135a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8135e:	8015      	strh	r5, [r2, #0]
	return SD_MMC_OK;
}
   81360:	4620      	mov	r0, r4
   81362:	b003      	add	sp, #12
   81364:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81366:	bf00      	nop

00081368 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   81368:	b510      	push	{r4, lr}
   8136a:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   8136c:	f244 63dd 	movw	r3, #18141	; 0x46dd
   81370:	f2c0 0308 	movt	r3, #8
   81374:	4798      	blx	r3
   81376:	b948      	cbnz	r0, 8138c <sd_mmc_start_write_blocks+0x24>
		sd_mmc_nb_block_remaining = 0;
   81378:	f640 310c 	movw	r1, #2828	; 0xb0c
   8137c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81380:	f04f 0300 	mov.w	r3, #0
   81384:	800b      	strh	r3, [r1, #0]
		return SD_MMC_ERR_COMM;
   81386:	f04f 0005 	mov.w	r0, #5
   8138a:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
   8138c:	f640 300c 	movw	r0, #2828	; 0xb0c
   81390:	f2c2 0007 	movt	r0, #8199	; 0x2007
   81394:	8802      	ldrh	r2, [r0, #0]
   81396:	1b14      	subs	r4, r2, r4
   81398:	8004      	strh	r4, [r0, #0]
	return SD_MMC_OK;
   8139a:	f04f 0000 	mov.w	r0, #0
}
   8139e:	bd10      	pop	{r4, pc}

000813a0 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(void)
{
   813a0:	b508      	push	{r3, lr}
	if (!driver_wait_end_of_write_blocks()) {
   813a2:	f244 73d5 	movw	r3, #18389	; 0x47d5
   813a6:	f2c0 0308 	movt	r3, #8
   813aa:	4798      	blx	r3
   813ac:	2800      	cmp	r0, #0
   813ae:	d02f      	beq.n	81410 <sd_mmc_wait_end_of_write_blocks+0x70>
		return SD_MMC_ERR_COMM;
	}
	if (sd_mmc_nb_block_remaining) {
   813b0:	f640 300c 	movw	r0, #2828	; 0xb0c
   813b4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   813b8:	8801      	ldrh	r1, [r0, #0]
   813ba:	2900      	cmp	r1, #0
   813bc:	d12b      	bne.n	81416 <sd_mmc_wait_end_of_write_blocks+0x76>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   813be:	f640 3204 	movw	r2, #2820	; 0xb04
   813c2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   813c6:	8813      	ldrh	r3, [r2, #0]
   813c8:	2b01      	cmp	r3, #1
   813ca:	d107      	bne.n	813dc <sd_mmc_wait_end_of_write_blocks+0x3c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   813cc:	f240 2329 	movw	r3, #553	; 0x229
   813d0:	f2c0 0308 	movt	r3, #8
   813d4:	4798      	blx	r3
		return SD_MMC_OK;
   813d6:	f04f 0000 	mov.w	r0, #0
   813da:	bd08      	pop	{r3, pc}
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   813dc:	f243 100c 	movw	r0, #12556	; 0x310c
   813e0:	f04f 0100 	mov.w	r1, #0
   813e4:	f244 3251 	movw	r2, #17233	; 0x4351
   813e8:	f2c0 0208 	movt	r2, #8
   813ec:	4790      	blx	r2
   813ee:	b938      	cbnz	r0, 81400 <sd_mmc_wait_end_of_write_blocks+0x60>
			sd_mmc_deselect_slot();
   813f0:	f240 2129 	movw	r1, #553	; 0x229
   813f4:	f2c0 0108 	movt	r1, #8
   813f8:	4788      	blx	r1
			return SD_MMC_ERR_COMM;
   813fa:	f04f 0005 	mov.w	r0, #5
   813fe:	bd08      	pop	{r3, pc}
		}
	}
	sd_mmc_deselect_slot();
   81400:	f240 2029 	movw	r0, #553	; 0x229
   81404:	f2c0 0008 	movt	r0, #8
   81408:	4780      	blx	r0
	return SD_MMC_OK;
   8140a:	f04f 0000 	mov.w	r0, #0
   8140e:	bd08      	pop	{r3, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(void)
{
	if (!driver_wait_end_of_write_blocks()) {
		return SD_MMC_ERR_COMM;
   81410:	f04f 0005 	mov.w	r0, #5
   81414:	bd08      	pop	{r3, pc}
	}
	if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
   81416:	f04f 0000 	mov.w	r0, #0
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   8141a:	bd08      	pop	{r3, pc}

0008141c <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   8141c:	b4f0      	push	{r4, r5, r6, r7}
   8141e:	b08c      	sub	sp, #48	; 0x30
   81420:	4606      	mov	r6, r0
   81422:	460f      	mov	r7, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   81424:	ac01      	add	r4, sp, #4
   81426:	f24c 2514 	movw	r5, #49684	; 0xc214
   8142a:	f2c0 0508 	movt	r5, #8
   8142e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81436:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   8143a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8143e:	9b01      	ldr	r3, [sp, #4]
   81440:	fbb7 f0f3 	udiv	r0, r7, r3
   81444:	fbb0 f1f6 	udiv	r1, r0, r6
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81448:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8144c:	d952      	bls.n	814f4 <pwm_clocks_generate+0xd8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8144e:	9902      	ldr	r1, [sp, #8]
   81450:	fbb7 f2f1 	udiv	r2, r7, r1
   81454:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81458:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8145c:	d94f      	bls.n	814fe <pwm_clocks_generate+0xe2>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8145e:	9b03      	ldr	r3, [sp, #12]
   81460:	fbb7 f0f3 	udiv	r0, r7, r3
   81464:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81468:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8146c:	d94a      	bls.n	81504 <pwm_clocks_generate+0xe8>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8146e:	9904      	ldr	r1, [sp, #16]
   81470:	fbb7 f2f1 	udiv	r2, r7, r1
   81474:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81478:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8147c:	d945      	bls.n	8150a <pwm_clocks_generate+0xee>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8147e:	9b05      	ldr	r3, [sp, #20]
   81480:	fbb7 f0f3 	udiv	r0, r7, r3
   81484:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81488:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8148c:	d940      	bls.n	81510 <pwm_clocks_generate+0xf4>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8148e:	9906      	ldr	r1, [sp, #24]
   81490:	fbb7 f2f1 	udiv	r2, r7, r1
   81494:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   81498:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8149c:	d93b      	bls.n	81516 <pwm_clocks_generate+0xfa>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   8149e:	9b07      	ldr	r3, [sp, #28]
   814a0:	fbb7 f0f3 	udiv	r0, r7, r3
   814a4:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814a8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814ac:	d936      	bls.n	8151c <pwm_clocks_generate+0x100>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814ae:	9908      	ldr	r1, [sp, #32]
   814b0:	fbb7 f2f1 	udiv	r2, r7, r1
   814b4:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814b8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814bc:	d931      	bls.n	81522 <pwm_clocks_generate+0x106>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   814c0:	fbb7 f0f3 	udiv	r0, r7, r3
   814c4:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814c8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814cc:	d92c      	bls.n	81528 <pwm_clocks_generate+0x10c>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814ce:	990a      	ldr	r1, [sp, #40]	; 0x28
   814d0:	fbb7 f2f1 	udiv	r2, r7, r1
   814d4:	fbb2 f1f6 	udiv	r1, r2, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814d8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814dc:	d927      	bls.n	8152e <pwm_clocks_generate+0x112>
		ul_pre++;
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   814de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   814e0:	fbb7 f0f3 	udiv	r0, r7, r3
   814e4:	fbb0 f1f6 	udiv	r1, r0, r6
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
   814e8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   814ec:	d922      	bls.n	81534 <pwm_clocks_generate+0x118>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   814ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
   814f2:	e022      	b.n	8153a <pwm_clocks_generate+0x11e>
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
			{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   814f4:	f04f 0200 	mov.w	r2, #0
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	}

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
   814f8:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
   814fc:	e01d      	b.n	8153a <pwm_clocks_generate+0x11e>
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
	while ((ul_div > PWM_CLOCK_DIV_MAX) && (ul_pre < PWM_CLOCK_PRE_MAX)) {
		ul_pre++;
   814fe:	f04f 0201 	mov.w	r2, #1
   81502:	e7f9      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81504:	f04f 0202 	mov.w	r2, #2
   81508:	e7f6      	b.n	814f8 <pwm_clocks_generate+0xdc>
   8150a:	f04f 0203 	mov.w	r2, #3
   8150e:	e7f3      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81510:	f04f 0204 	mov.w	r2, #4
   81514:	e7f0      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81516:	f04f 0205 	mov.w	r2, #5
   8151a:	e7ed      	b.n	814f8 <pwm_clocks_generate+0xdc>
   8151c:	f04f 0206 	mov.w	r2, #6
   81520:	e7ea      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81522:	f04f 0207 	mov.w	r2, #7
   81526:	e7e7      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81528:	f04f 0208 	mov.w	r2, #8
   8152c:	e7e4      	b.n	814f8 <pwm_clocks_generate+0xdc>
   8152e:	f04f 0209 	mov.w	r2, #9
   81532:	e7e1      	b.n	814f8 <pwm_clocks_generate+0xdc>
   81534:	f04f 020a 	mov.w	r2, #10
   81538:	e7de      	b.n	814f8 <pwm_clocks_generate+0xdc>
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
	}
}
   8153a:	b00c      	add	sp, #48	; 0x30
   8153c:	bcf0      	pop	{r4, r5, r6, r7}
   8153e:	4770      	bx	lr

00081540 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   81540:	b570      	push	{r4, r5, r6, lr}
   81542:	4606      	mov	r6, r0
   81544:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   81546:	6808      	ldr	r0, [r1, #0]
   81548:	b158      	cbz	r0, 81562 <pwm_init+0x22>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   8154a:	6889      	ldr	r1, [r1, #8]
   8154c:	f241 431d 	movw	r3, #5149	; 0x141d
   81550:	f2c0 0308 	movt	r3, #8
   81554:	4798      	blx	r3
		if (result == PWM_INVALID_ARGUMENT) {
   81556:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8155a:	4288      	cmp	r0, r1
   8155c:	d014      	beq.n	81588 <pwm_init+0x48>
			return result;
		}

		clock = result;
   8155e:	4605      	mov	r5, r0
   81560:	e001      	b.n	81566 <pwm_init+0x26>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   81562:	f04f 0500 	mov.w	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   81566:	6860      	ldr	r0, [r4, #4]
   81568:	b158      	cbz	r0, 81582 <pwm_init+0x42>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   8156a:	68a1      	ldr	r1, [r4, #8]
   8156c:	f241 421d 	movw	r2, #5149	; 0x141d
   81570:	f2c0 0208 	movt	r2, #8
   81574:	4790      	blx	r2

		if (result == PWM_INVALID_ARGUMENT) {
   81576:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8157a:	4298      	cmp	r0, r3
   8157c:	d004      	beq.n	81588 <pwm_init+0x48>
			return result;
		}

		clock |= (result << 16);
   8157e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   81582:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   81584:	f04f 0000 	mov.w	r0, #0
}
   81588:	bd70      	pop	{r4, r5, r6, pc}
   8158a:	bf00      	nop

0008158c <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   8158c:	b470      	push	{r4, r5, r6}
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
   8158e:	680b      	ldr	r3, [r1, #0]
	uint32_t channel = (1 << ch_num);
   81590:	f04f 0201 	mov.w	r2, #1
   81594:	fa02 f203 	lsl.w	r2, r2, r3

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81598:	8a8e      	ldrh	r6, [r1, #20]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   8159a:	684c      	ldr	r4, [r1, #4]
   8159c:	f004 050f 	and.w	r5, r4, #15
   815a0:	432e      	orrs	r6, r5
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   815a2:	890c      	ldrh	r4, [r1, #8]
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   815a4:	4326      	orrs	r6, r4
   815a6:	7a8d      	ldrb	r5, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   815a8:	ea46 2645 	orr.w	r6, r6, r5, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   815ac:	7d8c      	ldrb	r4, [r1, #22]
   815ae:	ea46 4504 	orr.w	r5, r6, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   815b2:	7dce      	ldrb	r6, [r1, #23]
   815b4:	ea45 4546 	orr.w	r5, r5, r6, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   815b8:	7e0c      	ldrb	r4, [r1, #24]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
	uint32_t channel = (1 << ch_num);

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
   815ba:	ea45 4684 	orr.w	r6, r5, r4, lsl #18
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = ch_mode_reg;
   815be:	f103 0510 	add.w	r5, r3, #16
   815c2:	ea4f 1445 	mov.w	r4, r5, lsl #5
   815c6:	1905      	adds	r5, r0, r4
   815c8:	5106      	str	r6, [r0, r4]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   815ca:	68cc      	ldr	r4, [r1, #12]
   815cc:	606c      	str	r4, [r5, #4]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   815ce:	690c      	ldr	r4, [r1, #16]
   815d0:	eb00 1543 	add.w	r5, r0, r3, lsl #5
   815d4:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   815d8:	7d8c      	ldrb	r4, [r1, #22]
   815da:	b13c      	cbz	r4, 815ec <pwm_channel_init+0x60>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   815dc:	8b8d      	ldrh	r5, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   815de:	8b4c      	ldrh	r4, [r1, #26]
   815e0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;

#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   815e4:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   815e8:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
   815ec:	7fcd      	ldrb	r5, [r1, #31]
   815ee:	fa05 f503 	lsl.w	r5, r5, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
   815f2:	7f8c      	ldrb	r4, [r1, #30]
   815f4:	fa04 f403 	lsl.w	r4, r4, r3
   815f8:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
   815fc:	6485      	str	r5, [r0, #72]	; 0x48
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
   815fe:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   81602:	fa05 f503 	lsl.w	r5, r5, r3
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
   81606:	f891 4020 	ldrb.w	r4, [r1, #32]
   8160a:	fa04 f403 	lsl.w	r4, r4, r3
   8160e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
   81612:	6444      	str	r4, [r0, #68]	; 0x44
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
					ch_num) << 16);

	/* Sync Channels Mode Register */
	if (p_channel->b_sync_ch) {
   81614:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   81618:	b11c      	cbz	r4, 81622 <pwm_channel_init+0x96>
		p_pwm->PWM_SCM |= channel;
   8161a:	6a04      	ldr	r4, [r0, #32]
   8161c:	4314      	orrs	r4, r2
   8161e:	6204      	str	r4, [r0, #32]
   81620:	e003      	b.n	8162a <pwm_channel_init+0x9e>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   81622:	6a04      	ldr	r4, [r0, #32]
   81624:	ea24 0402 	bic.w	r4, r4, r2
   81628:	6204      	str	r4, [r0, #32]
		p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
	} else {
		p_pwm->PWM_FPV1 &= (!((0x01 << ch_num) << 16));
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   8162a:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   8162e:	2c01      	cmp	r4, #1
   81630:	d103      	bne.n	8163a <pwm_channel_init+0xae>
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   81632:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81634:	4314      	orrs	r4, r2
   81636:	6684      	str	r4, [r0, #104]	; 0x68
   81638:	e006      	b.n	81648 <pwm_channel_init+0xbc>
	} else {
		p_pwm->PWM_FPV &= (!(0x01 << ch_num));
   8163a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8163c:	2a00      	cmp	r2, #0
   8163e:	bf14      	ite	ne
   81640:	2400      	movne	r4, #0
   81642:	f004 0401 	andeq.w	r4, r4, #1
   81646:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   81648:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   8164c:	2c01      	cmp	r4, #1
   8164e:	d104      	bne.n	8165a <pwm_channel_init+0xce>
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   81650:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81652:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
   81656:	6682      	str	r2, [r0, #104]	; 0x68
   81658:	e006      	b.n	81668 <pwm_channel_init+0xdc>
	} else {
		p_pwm->PWM_FPV &= (!((0x01 << ch_num) << 16));
   8165a:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8165c:	0412      	lsls	r2, r2, #16
   8165e:	bf14      	ite	ne
   81660:	2200      	movne	r2, #0
   81662:	f004 0201 	andeq.w	r2, r4, #1
   81666:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   81668:	2b03      	cmp	r3, #3
   8166a:	d80f      	bhi.n	8168c <pwm_channel_init+0x100>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   8166c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   8166e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   81672:	f04f 02ff 	mov.w	r2, #255	; 0xff
   81676:	fa02 f203 	lsl.w	r2, r2, r3
   8167a:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   8167e:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   81682:	fa01 f303 	lsl.w	r3, r1, r3
   81686:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE1 = fault_enable_reg;
   81688:	66c2      	str	r2, [r0, #108]	; 0x6c
   8168a:	e010      	b.n	816ae <pwm_channel_init+0x122>
	} else {
		ch_num -= 4;
   8168c:	f1a3 0304 	sub.w	r3, r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   81690:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   81692:	ea4f 03c3 	mov.w	r3, r3, lsl #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   81696:	f04f 02ff 	mov.w	r2, #255	; 0xff
   8169a:	fa02 f203 	lsl.w	r2, r2, r3
   8169e:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   816a2:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   816a6:	fa01 f303 	lsl.w	r3, r1, r3
   816aa:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE2 = fault_enable_reg;
   816ac:	6702      	str	r2, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   816ae:	f04f 0000 	mov.w	r0, #0
   816b2:	bc70      	pop	{r4, r5, r6}
   816b4:	4770      	bx	lr
   816b6:	bf00      	nop

000816b8 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   816b8:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   816ba:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   816bc:	690b      	ldr	r3, [r1, #16]
   816be:	4293      	cmp	r3, r2
   816c0:	d307      	bcc.n	816d2 <pwm_channel_update_duty+0x1a>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   816c2:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   816c4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   816c8:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   816cc:	f04f 0000 	mov.w	r0, #0
   816d0:	e001      	b.n	816d6 <pwm_channel_update_duty+0x1e>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   816d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   816d6:	bc10      	pop	{r4}
   816d8:	4770      	bx	lr
   816da:	bf00      	nop

000816dc <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   816dc:	f04f 0301 	mov.w	r3, #1
   816e0:	fa03 f101 	lsl.w	r1, r3, r1
   816e4:	6041      	str	r1, [r0, #4]
   816e6:	4770      	bx	lr

000816e8 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   816e8:	f04f 0301 	mov.w	r3, #1
   816ec:	fa03 f101 	lsl.w	r1, r3, r1
   816f0:	6081      	str	r1, [r0, #8]
   816f2:	4770      	bx	lr

000816f4 <pwm_channel_disable_interrupt>:
#if (SAM3N || SAM4N)
	p_pwm->PWM_IDR = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IDR1 = (1 << ul_event) | (1 << (ul_fault + 16));
   816f4:	f102 0210 	add.w	r2, r2, #16
   816f8:	f04f 0301 	mov.w	r3, #1
   816fc:	fa03 f202 	lsl.w	r2, r3, r2
   81700:	fa03 f101 	lsl.w	r1, r3, r1
   81704:	430a      	orrs	r2, r1
   81706:	6142      	str	r2, [r0, #20]
   81708:	4770      	bx	lr
   8170a:	bf00      	nop

0008170c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   8170c:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA)
	if (p_spi == SPI0) {
   8170e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81712:	f2c4 0300 	movt	r3, #16384	; 0x4000
   81716:	4298      	cmp	r0, r3
   81718:	d106      	bne.n	81728 <spi_enable_clock+0x1c>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8171a:	f04f 0018 	mov.w	r0, #24
   8171e:	f247 31bd 	movw	r1, #29629	; 0x73bd
   81722:	f2c0 0108 	movt	r1, #8
   81726:	4788      	blx	r1
   81728:	bd08      	pop	{r3, pc}
   8172a:	bf00      	nop

0008172c <spi_set_peripheral_chip_select_value>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_value Peripheral Chip Select value.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   8172c:	6843      	ldr	r3, [r0, #4]
   8172e:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
   81732:	6042      	str	r2, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   81734:	6843      	ldr	r3, [r0, #4]
   81736:	ea4f 4101 	mov.w	r1, r1, lsl #16
   8173a:	f401 2270 	and.w	r2, r1, #983040	; 0xf0000
   8173e:	4313      	orrs	r3, r2
   81740:	6043      	str	r3, [r0, #4]
   81742:	4770      	bx	lr

00081744 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   81744:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   81746:	6904      	ldr	r4, [r0, #16]
   81748:	f014 0f02 	tst.w	r4, #2
   8174c:	d01f      	beq.n	8178e <spi_write+0x4a>
   8174e:	e00a      	b.n	81766 <spi_write+0x22>
   81750:	f104 34ff 	add.w	r4, r4, #4294967295
   81754:	6905      	ldr	r5, [r0, #16]
   81756:	f015 0f02 	tst.w	r5, #2
   8175a:	d01d      	beq.n	81798 <spi_write+0x54>
   8175c:	e003      	b.n	81766 <spi_write+0x22>
   8175e:	6905      	ldr	r5, [r0, #16]
   81760:	f015 0f02 	tst.w	r5, #2
   81764:	d0f4      	beq.n	81750 <spi_write+0xc>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
   81766:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   81768:	f014 0f02 	tst.w	r4, #2
   8176c:	d007      	beq.n	8177e <spi_write+0x3a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   8176e:	ea4f 4202 	mov.w	r2, r2, lsl #16
   81772:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   81776:	4311      	orrs	r1, r2
		if (uc_last) {
   81778:	b10b      	cbz	r3, 8177e <spi_write+0x3a>
			value |= SPI_TDR_LASTXFER;
   8177a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   8177e:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   81780:	f04f 0000 	mov.w	r0, #0
   81784:	e001      	b.n	8178a <spi_write+0x46>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
   81786:	f04f 0001 	mov.w	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
   8178a:	bc30      	pop	{r4, r5}
   8178c:	4770      	bx	lr
   8178e:	f643 2599 	movw	r5, #15001	; 0x3a99
   81792:	f105 34ff 	add.w	r4, r5, #4294967295
   81796:	e7e2      	b.n	8175e <spi_write+0x1a>
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
   81798:	3c01      	subs	r4, #1
   8179a:	d1e0      	bne.n	8175e <spi_write+0x1a>
   8179c:	e7f3      	b.n	81786 <spi_write+0x42>
   8179e:	bf00      	nop

000817a0 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   817a0:	b142      	cbz	r2, 817b4 <spi_set_clock_polarity+0x14>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   817a2:	f101 010c 	add.w	r1, r1, #12
   817a6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   817aa:	f043 0201 	orr.w	r2, r3, #1
   817ae:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   817b2:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   817b4:	f101 010c 	add.w	r1, r1, #12
   817b8:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   817bc:	f023 0201 	bic.w	r2, r3, #1
   817c0:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   817c4:	4770      	bx	lr
   817c6:	bf00      	nop

000817c8 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   817c8:	b142      	cbz	r2, 817dc <spi_set_clock_phase+0x14>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   817ca:	f101 010c 	add.w	r1, r1, #12
   817ce:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   817d2:	f043 0202 	orr.w	r2, r3, #2
   817d6:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   817da:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   817dc:	f101 010c 	add.w	r1, r1, #12
   817e0:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   817e4:	f023 0202 	bic.w	r2, r3, #2
   817e8:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   817ec:	4770      	bx	lr
   817ee:	bf00      	nop

000817f0 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
   817f0:	2a04      	cmp	r2, #4
   817f2:	d10e      	bne.n	81812 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   817f4:	f101 010c 	add.w	r1, r1, #12
   817f8:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   817fc:	f023 0208 	bic.w	r2, r3, #8
   81800:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
   81804:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   81808:	f043 0204 	orr.w	r2, r3, #4
   8180c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   81810:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
   81812:	b972      	cbnz	r2, 81832 <spi_configure_cs_behavior+0x42>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   81814:	f101 010c 	add.w	r1, r1, #12
   81818:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   8181c:	f023 0208 	bic.w	r2, r3, #8
   81820:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
   81824:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   81828:	f023 0204 	bic.w	r2, r3, #4
   8182c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   81830:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
   81832:	2a08      	cmp	r2, #8
   81834:	d107      	bne.n	81846 <spi_configure_cs_behavior+0x56>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
   81836:	f101 010c 	add.w	r1, r1, #12
   8183a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   8183e:	f043 0208 	orr.w	r2, r3, #8
   81842:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   81846:	4770      	bx	lr

00081848 <spi_set_bits_per_transfer>:
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   81848:	f101 010c 	add.w	r1, r1, #12
   8184c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   81850:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
   81854:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   81858:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   8185c:	431a      	orrs	r2, r3
   8185e:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   81862:	4770      	bx	lr

00081864 <spi_set_baudrate_div>:
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   81864:	f101 010c 	add.w	r1, r1, #12
   81868:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   8186c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   81870:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   81874:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   81878:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   8187c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   81880:	4770      	bx	lr
   81882:	bf00      	nop

00081884 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   81884:	b410      	push	{r4}
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   81886:	f101 010c 	add.w	r1, r1, #12
   8188a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   8188e:	b2a4      	uxth	r4, r4
   81890:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   81894:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
   81898:	ea4f 6303 	mov.w	r3, r3, lsl #24
   8189c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   818a0:	4314      	orrs	r4, r2
   818a2:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   818a6:	bc10      	pop	{r4}
   818a8:	4770      	bx	lr
   818aa:	bf00      	nop

000818ac <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   818ac:	b410      	push	{r4}
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   818ae:	ea4f 1181 	mov.w	r1, r1, lsl #6
   818b2:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   818b4:	f04f 0402 	mov.w	r4, #2
   818b8:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   818ba:	f04f 30ff 	mov.w	r0, #4294967295
   818be:	6298      	str	r0, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   818c0:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   818c2:	605a      	str	r2, [r3, #4]
}
   818c4:	bc10      	pop	{r4}
   818c6:	4770      	bx	lr

000818c8 <tc_start>:
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   818c8:	ea4f 1181 	mov.w	r1, r1, lsl #6
   818cc:	f04f 0305 	mov.w	r3, #5
   818d0:	5043      	str	r3, [r0, r1]
   818d2:	4770      	bx	lr

000818d4 <tc_write_rc>:
		uint32_t ul_value)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   818d4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   818d8:	61ca      	str	r2, [r1, #28]
   818da:	4770      	bx	lr

000818dc <tc_enable_interrupt>:
{
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   818dc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   818e0:	624a      	str	r2, [r1, #36]	; 0x24
   818e2:	4770      	bx	lr

000818e4 <tc_get_status>:
{
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   818e4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   818e8:	6a08      	ldr	r0, [r1, #32]
}
   818ea:	4770      	bx	lr

000818ec <tc_find_mck_divisor>:
 *
 * \return 1 if a proper divisor has been found, otherwise 0.
 */
uint32_t tc_find_mck_divisor(uint32_t ul_freq, uint32_t ul_mck,
		uint32_t *p_uldiv, uint32_t *p_ultcclks, uint32_t ul_boardmck)
{
   818ec:	b470      	push	{r4, r5, r6}
   818ee:	b087      	sub	sp, #28
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   818f0:	f04f 0402 	mov.w	r4, #2
   818f4:	9401      	str	r4, [sp, #4]
   818f6:	f04f 0508 	mov.w	r5, #8
   818fa:	9502      	str	r5, [sp, #8]
   818fc:	f04f 0420 	mov.w	r4, #32
   81900:	9403      	str	r4, [sp, #12]
   81902:	f04f 0580 	mov.w	r5, #128	; 0x80
   81906:	9504      	str	r5, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
   81908:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8190a:	ea4f 34d4 	mov.w	r4, r4, lsr #15
 * \return 1 if a proper divisor has been found, otherwise 0.
 */
uint32_t tc_find_mck_divisor(uint32_t ul_freq, uint32_t ul_mck,
		uint32_t *p_uldiv, uint32_t *p_ultcclks, uint32_t ul_boardmck)
{
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   8190e:	9405      	str	r4, [sp, #20]
	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
   81910:	ea4f 4551 	mov.w	r5, r1, lsr #17
		if (ul_freq > ul_high) {
   81914:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
   81918:	d83e      	bhi.n	81998 <tc_find_mck_divisor+0xac>
			return 0;
		} else if (ul_freq >= ul_low) {
   8191a:	42a8      	cmp	r0, r5
   8191c:	d251      	bcs.n	819c2 <tc_find_mck_divisor+0xd6>

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
   8191e:	f04f 0608 	mov.w	r6, #8
   81922:	fbb1 f5f6 	udiv	r5, r1, r6
		ul_low  = ul_high / TC_DIV_FACTOR;
   81926:	ea4f 4615 	mov.w	r6, r5, lsr #16
		if (ul_freq > ul_high) {
   8192a:	42a8      	cmp	r0, r5
   8192c:	d837      	bhi.n	8199e <tc_find_mck_divisor+0xb2>
			return 0;
		} else if (ul_freq >= ul_low) {
   8192e:	42b0      	cmp	r0, r6
   81930:	d21e      	bcs.n	81970 <tc_find_mck_divisor+0x84>

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
   81932:	f04f 0520 	mov.w	r5, #32
   81936:	fbb1 f5f5 	udiv	r5, r1, r5
		ul_low  = ul_high / TC_DIV_FACTOR;
   8193a:	ea4f 4615 	mov.w	r6, r5, lsr #16
		if (ul_freq > ul_high) {
   8193e:	42a8      	cmp	r0, r5
   81940:	d830      	bhi.n	819a4 <tc_find_mck_divisor+0xb8>
			return 0;
		} else if (ul_freq >= ul_low) {
   81942:	42b0      	cmp	r0, r6
   81944:	d217      	bcs.n	81976 <tc_find_mck_divisor+0x8a>

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
   81946:	f04f 0680 	mov.w	r6, #128	; 0x80
   8194a:	fbb1 f5f6 	udiv	r5, r1, r6
		ul_low  = ul_high / TC_DIV_FACTOR;
   8194e:	ea4f 4615 	mov.w	r6, r5, lsr #16
		if (ul_freq > ul_high) {
   81952:	42a8      	cmp	r0, r5
   81954:	d829      	bhi.n	819aa <tc_find_mck_divisor+0xbe>
			return 0;
		} else if (ul_freq >= ul_low) {
   81956:	42b0      	cmp	r0, r6
   81958:	d210      	bcs.n	8197c <tc_find_mck_divisor+0x90>

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
   8195a:	fbb1 f1f4 	udiv	r1, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
   8195e:	ea4f 4411 	mov.w	r4, r1, lsr #16
		if (ul_freq > ul_high) {
   81962:	4281      	cmp	r1, r0
   81964:	d324      	bcc.n	819b0 <tc_find_mck_divisor+0xc4>
			return 0;
		} else if (ul_freq >= ul_low) {
   81966:	4284      	cmp	r4, r0
   81968:	bf98      	it	ls
   8196a:	2104      	movls	r1, #4
   8196c:	d92b      	bls.n	819c6 <tc_find_mck_divisor+0xda>
   8196e:	e022      	b.n	819b6 <tc_find_mck_divisor+0xca>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
   81970:	f04f 0101 	mov.w	r1, #1
   81974:	e027      	b.n	819c6 <tc_find_mck_divisor+0xda>
   81976:	f04f 0102 	mov.w	r1, #2
   8197a:	e024      	b.n	819c6 <tc_find_mck_divisor+0xda>
   8197c:	f04f 0103 	mov.w	r1, #3
   81980:	e021      	b.n	819c6 <tc_find_mck_divisor+0xda>
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
		*p_uldiv = divisors[ul_index];
   81982:	ac06      	add	r4, sp, #24
   81984:	eb04 0081 	add.w	r0, r4, r1, lsl #2
   81988:	f850 0c14 	ldr.w	r0, [r0, #-20]
   8198c:	6010      	str	r0, [r2, #0]
	}

	if (p_ultcclks) {
   8198e:	b1ab      	cbz	r3, 819bc <tc_find_mck_divisor+0xd0>
		*p_ultcclks = ul_index;
   81990:	6019      	str	r1, [r3, #0]
	}

	return 1;
   81992:	f04f 0001 	mov.w	r0, #1
   81996:	e019      	b.n	819cc <tc_find_mck_divisor+0xe0>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
   81998:	f04f 0000 	mov.w	r0, #0
   8199c:	e016      	b.n	819cc <tc_find_mck_divisor+0xe0>
   8199e:	f04f 0000 	mov.w	r0, #0
   819a2:	e013      	b.n	819cc <tc_find_mck_divisor+0xe0>
   819a4:	f04f 0000 	mov.w	r0, #0
   819a8:	e010      	b.n	819cc <tc_find_mck_divisor+0xe0>
   819aa:	f04f 0000 	mov.w	r0, #0
   819ae:	e00d      	b.n	819cc <tc_find_mck_divisor+0xe0>
   819b0:	f04f 0000 	mov.w	r0, #0
   819b4:	e00a      	b.n	819cc <tc_find_mck_divisor+0xe0>
		} else if (ul_freq >= ul_low) {
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
   819b6:	f04f 0000 	mov.w	r0, #0
   819ba:	e007      	b.n	819cc <tc_find_mck_divisor+0xe0>

	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
   819bc:	f04f 0001 	mov.w	r0, #1
   819c0:	e004      	b.n	819cc <tc_find_mck_divisor+0xe0>
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
   819c2:	f04f 0100 	mov.w	r1, #0
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
   819c6:	2a00      	cmp	r2, #0
   819c8:	d1db      	bne.n	81982 <tc_find_mck_divisor+0x96>
   819ca:	e7e0      	b.n	8198e <tc_find_mck_divisor+0xa2>
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
   819cc:	b007      	add	sp, #28
   819ce:	bc70      	pop	{r4, r5, r6}
   819d0:	4770      	bx	lr
   819d2:	bf00      	nop

000819d4 <twi_enable_master_mode>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   819d4:	f04f 0308 	mov.w	r3, #8
   819d8:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   819da:	f04f 0120 	mov.w	r1, #32
   819de:	6001      	str	r1, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   819e0:	f04f 0204 	mov.w	r2, #4
   819e4:	6002      	str	r2, [r0, #0]
   819e6:	4770      	bx	lr

000819e8 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   819e8:	f44f 53d4 	mov.w	r3, #6784	; 0x1a80
   819ec:	f2c0 0306 	movt	r3, #6
   819f0:	4299      	cmp	r1, r3
   819f2:	d845      	bhi.n	81a80 <twi_set_speed+0x98>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   819f4:	ea4f 0141 	mov.w	r1, r1, lsl #1
   819f8:	fbb2 f2f1 	udiv	r2, r2, r1
   819fc:	f1a2 0204 	sub.w	r2, r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81a00:	2aff      	cmp	r2, #255	; 0xff
   81a02:	d92e      	bls.n	81a62 <twi_set_speed+0x7a>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   81a04:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81a08:	2aff      	cmp	r2, #255	; 0xff
   81a0a:	d918      	bls.n	81a3e <twi_set_speed+0x56>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   81a0c:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81a10:	2aff      	cmp	r2, #255	; 0xff
   81a12:	d917      	bls.n	81a44 <twi_set_speed+0x5c>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   81a14:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81a18:	2aff      	cmp	r2, #255	; 0xff
   81a1a:	d916      	bls.n	81a4a <twi_set_speed+0x62>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   81a1c:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81a20:	2aff      	cmp	r2, #255	; 0xff
   81a22:	d915      	bls.n	81a50 <twi_set_speed+0x68>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   81a24:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81a28:	2aff      	cmp	r2, #255	; 0xff
   81a2a:	d914      	bls.n	81a56 <twi_set_speed+0x6e>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   81a2c:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81a30:	2aff      	cmp	r2, #255	; 0xff
   81a32:	d913      	bls.n	81a5c <twi_set_speed+0x74>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   81a34:	ea4f 0252 	mov.w	r2, r2, lsr #1
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
   81a38:	f04f 0307 	mov.w	r3, #7
   81a3c:	e013      	b.n	81a66 <twi_set_speed+0x7e>
   81a3e:	f04f 0301 	mov.w	r3, #1
   81a42:	e010      	b.n	81a66 <twi_set_speed+0x7e>
   81a44:	f04f 0302 	mov.w	r3, #2
   81a48:	e00d      	b.n	81a66 <twi_set_speed+0x7e>
   81a4a:	f04f 0303 	mov.w	r3, #3
   81a4e:	e00a      	b.n	81a66 <twi_set_speed+0x7e>
   81a50:	f04f 0304 	mov.w	r3, #4
   81a54:	e007      	b.n	81a66 <twi_set_speed+0x7e>
   81a56:	f04f 0305 	mov.w	r3, #5
   81a5a:	e004      	b.n	81a66 <twi_set_speed+0x7e>
   81a5c:	f04f 0306 	mov.w	r3, #6
   81a60:	e001      	b.n	81a66 <twi_set_speed+0x7e>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
   81a62:	f04f 0300 	mov.w	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   81a66:	ea4f 6102 	mov.w	r1, r2, lsl #24
			TWI_CWGR_CKDIV(ckdiv);
   81a6a:	ea4f 4303 	mov.w	r3, r3, lsl #16
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   81a6e:	ea43 4111 	orr.w	r1, r3, r1, lsr #16
   81a72:	b2d2      	uxtb	r2, r2
   81a74:	ea41 0302 	orr.w	r3, r1, r2
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   81a78:	6103      	str	r3, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   81a7a:	f04f 0000 	mov.w	r0, #0
   81a7e:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
   81a80:	f04f 0001 	mov.w	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
   81a84:	4770      	bx	lr
   81a86:	bf00      	nop

00081a88 <twi_reset>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   81a88:	f04f 0380 	mov.w	r3, #128	; 0x80
   81a8c:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   81a8e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81a90:	4770      	bx	lr
   81a92:	bf00      	nop

00081a94 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   81a94:	b538      	push	{r3, r4, r5, lr}
   81a96:	4604      	mov	r4, r0
   81a98:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   81a9a:	f04f 33ff 	mov.w	r3, #4294967295
   81a9e:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   81aa0:	6a03      	ldr	r3, [r0, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   81aa2:	f641 2189 	movw	r1, #6793	; 0x1a89
   81aa6:	f2c0 0108 	movt	r1, #8
   81aaa:	4788      	blx	r1

	twi_enable_master_mode(p_twi);
   81aac:	4620      	mov	r0, r4
   81aae:	f641 12d5 	movw	r2, #6613	; 0x19d5
   81ab2:	f2c0 0208 	movt	r2, #8
   81ab6:	4790      	blx	r2

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   81ab8:	4620      	mov	r0, r4
   81aba:	6869      	ldr	r1, [r5, #4]
   81abc:	682a      	ldr	r2, [r5, #0]
   81abe:	f641 13e9 	movw	r3, #6633	; 0x19e9
   81ac2:	f2c0 0308 	movt	r3, #8
   81ac6:	4798      	blx	r3
   81ac8:	2801      	cmp	r0, #1
   81aca:	bf14      	ite	ne
   81acc:	2000      	movne	r0, #0
   81ace:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
   81ad0:	7a69      	ldrb	r1, [r5, #9]
   81ad2:	2901      	cmp	r1, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   81ad4:	bf04      	itt	eq
   81ad6:	2140      	moveq	r1, #64	; 0x40
   81ad8:	6021      	streq	r1, [r4, #0]
	}

	return status;
}
   81ada:	bd38      	pop	{r3, r4, r5, pc}

00081adc <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
   81adc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81ae0:	6043      	str	r3, [r0, #4]
   81ae2:	4770      	bx	lr

00081ae4 <init_board>:
 #include <asf.h>
 #include "init.h"
 
 
 void init_board(void)
 {
   81ae4:	b570      	push	{r4, r5, r6, lr}
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81ae6:	f04f 002b 	mov.w	r0, #43	; 0x2b
   81aea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81aee:	f247 0499 	movw	r4, #28825	; 0x7099
   81af2:	f2c0 0408 	movt	r4, #8
   81af6:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81af8:	f04f 002a 	mov.w	r0, #42	; 0x2a
   81afc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b00:	47a0      	blx	r4
	 
	/* Configure HSMCI pins */
	gpio_configure_pin(PIN_HSMCI_MCCDA_GPIO, PIN_HSMCI_MCCDA_FLAGS);
   81b02:	f04f 0014 	mov.w	r0, #20
   81b06:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b0a:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCCK_GPIO, PIN_HSMCI_MCCK_FLAGS);
   81b0c:	f04f 0013 	mov.w	r0, #19
   81b10:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b14:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA0_GPIO, PIN_HSMCI_MCDA0_FLAGS);
   81b16:	f04f 0015 	mov.w	r0, #21
   81b1a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b1e:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA1_GPIO, PIN_HSMCI_MCDA1_FLAGS);
   81b20:	f04f 0016 	mov.w	r0, #22
   81b24:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b28:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA2_GPIO, PIN_HSMCI_MCDA2_FLAGS);
   81b2a:	f04f 0017 	mov.w	r0, #23
   81b2e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b32:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA3_GPIO, PIN_HSMCI_MCDA3_FLAGS);
   81b34:	f04f 0018 	mov.w	r0, #24
   81b38:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b3c:	47a0      	blx	r4
	/* Configure SD/MMC card detect pin */
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
   81b3e:	f04f 0067 	mov.w	r0, #103	; 0x67
   81b42:	f04f 0108 	mov.w	r1, #8
   81b46:	47a0      	blx	r4
	
	/* Configure EEPROM pins **/	
	pmc_enable_periph_clk(ID_TWI0);
   81b48:	f04f 0016 	mov.w	r0, #22
   81b4c:	f247 36bd 	movw	r6, #29629	; 0x73bd
   81b50:	f2c0 0608 	movt	r6, #8
   81b54:	47b0      	blx	r6
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   81b56:	f04f 0011 	mov.w	r0, #17
   81b5a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b5e:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   81b60:	f04f 0012 	mov.w	r0, #18
   81b64:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b68:	47a0      	blx	r4
	 
	/* Enable power to the SD card slot */
	pmc_enable_periph_clk(VDD_MCI_PIO_ID);
   81b6a:	f04f 000c 	mov.w	r0, #12
   81b6e:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81b70:	f44f 5580 	mov.w	r5, #4096	; 0x1000
   81b74:	f2c4 050e 	movt	r5, #16398	; 0x400e
   81b78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   81b7c:	612b      	str	r3, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81b7e:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81b82:	636b      	str	r3, [r5, #52]	; 0x34
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81b84:	f44f 6460 	mov.w	r4, #3584	; 0xe00
   81b88:	f2c4 040e 	movt	r4, #16398	; 0x400e
   81b8c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   81b90:	6620      	str	r0, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81b92:	6560      	str	r0, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   81b94:	6260      	str	r0, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   81b96:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   81b9a:	6f22      	ldr	r2, [r4, #112]	; 0x70
   81b9c:	4302      	orrs	r2, r0
   81b9e:	6722      	str	r2, [r4, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   81ba0:	6060      	str	r0, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81ba2:	f04f 0101 	mov.w	r1, #1
   81ba6:	6621      	str	r1, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81ba8:	6561      	str	r1, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   81baa:	6261      	str	r1, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   81bac:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   81bb0:	6f23      	ldr	r3, [r4, #112]	; 0x70
   81bb2:	430b      	orrs	r3, r1
   81bb4:	6723      	str	r3, [r4, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   81bb6:	6061      	str	r1, [r4, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81bb8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   81bbc:	6620      	str	r0, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81bbe:	6560      	str	r0, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   81bc0:	6260      	str	r0, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   81bc2:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
   81bc6:	6f22      	ldr	r2, [r4, #112]	; 0x70
   81bc8:	4302      	orrs	r2, r0
   81bca:	6722      	str	r2, [r4, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   81bcc:	6060      	str	r0, [r4, #4]
	ioport_disable_pin(PIN_LED2_GPIO);
	ioport_set_pin_mode(PIN_LED3_GPIO, PIN_LED3_FLAGS);
	ioport_disable_pin(PIN_LED3_GPIO);
	 	 
	/* User button */
	pmc_enable_periph_clk(USR_BUTTON_PIO_ID);
   81bce:	f04f 000c 	mov.w	r0, #12
   81bd2:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   81bd4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   81bd8:	6169      	str	r1, [r5, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81bda:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   81bde:	6669      	str	r1, [r5, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81be0:	6569      	str	r1, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   81be2:	6229      	str	r1, [r5, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   81be4:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81be8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   81bea:	f423 0000 	bic.w	r0, r3, #8388608	; 0x800000
   81bee:	6728      	str	r0, [r5, #112]	; 0x70
	ioport_set_pin_dir(GPIO_USR_BUTTON, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_USR_BUTTON, GPIO_USR_BUTTON_FLAGS);
	 
	/* Sync signals */
	pmc_enable_periph_clk(SYNC_PIO_ID);
   81bf0:	f04f 000e 	mov.w	r0, #14
   81bf4:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   81bf6:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
   81bfa:	f2c4 050e 	movt	r5, #16398	; 0x400e
   81bfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
   81c02:	616a      	str	r2, [r5, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81c04:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   81c08:	666a      	str	r2, [r5, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81c0a:	656a      	str	r2, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   81c0c:	622a      	str	r2, [r5, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   81c0e:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81c12:	6f29      	ldr	r1, [r5, #112]	; 0x70
   81c14:	f421 6380 	bic.w	r3, r1, #1024	; 0x400
   81c18:	672b      	str	r3, [r5, #112]	; 0x70
	ioport_set_pin_dir(GPIO_SYNC, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_SYNC, GPIO_SYNC_FLAGS);
	pmc_enable_periph_clk(SYNC_READ_PIO_ID);
   81c1a:	f04f 000b 	mov.w	r0, #11
   81c1e:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81c20:	f04f 0020 	mov.w	r0, #32
   81c24:	6120      	str	r0, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81c26:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81c2a:	6360      	str	r0, [r4, #52]	; 0x34
	ioport_set_pin_dir(SYNC_READ_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(SYNC_READ_GPIO, SYNC_READ_ACTIVE_LEVEL);
	pmc_enable_periph_clk(SYNC_WRITE_PIO_ID);
   81c2c:	f04f 000b 	mov.w	r0, #11
   81c30:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81c32:	f04f 0280 	mov.w	r2, #128	; 0x80
   81c36:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81c38:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81c3c:	6322      	str	r2, [r4, #48]	; 0x30
	ioport_set_pin_dir(SYNC_WRITE_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(SYNC_WRITE_GPIO, SYNC_WRITE_INACTIVE_LEVEL);
	
	/* 12v detect */
	pmc_enable_periph_clk(DET_12V_PIO_ID);
   81c3e:	f04f 000b 	mov.w	r0, #11
   81c42:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   81c44:	f04f 0102 	mov.w	r1, #2
   81c48:	6161      	str	r1, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81c4a:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81c4e:	6621      	str	r1, [r4, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81c50:	6561      	str	r1, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   81c52:	6221      	str	r1, [r4, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   81c54:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81c58:	6f23      	ldr	r3, [r4, #112]	; 0x70
   81c5a:	f023 0002 	bic.w	r0, r3, #2
   81c5e:	6720      	str	r0, [r4, #112]	; 0x70
	ioport_set_pin_dir(GPIO_DET_12V, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_DET_12V, GPIO_DET_12V_FLAGS);
	
	/* 12v power ok */
	pmc_enable_periph_clk(OK_12V_PIO_ID);
   81c60:	f04f 000e 	mov.w	r0, #14
   81c64:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   81c66:	f44f 7280 	mov.w	r2, #256	; 0x100
   81c6a:	616a      	str	r2, [r5, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81c6c:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   81c70:	662a      	str	r2, [r5, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   81c72:	656a      	str	r2, [r5, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
   81c74:	622a      	str	r2, [r5, #32]
		base->PIO_IFDR = mask;
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   81c76:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   81c7a:	6f29      	ldr	r1, [r5, #112]	; 0x70
   81c7c:	f421 7380 	bic.w	r3, r1, #256	; 0x100
   81c80:	672b      	str	r3, [r5, #112]	; 0x70
	ioport_set_pin_dir(GPIO_OK_12V, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(GPIO_OK_12V, GPIO_OK_12V_FLAGS);
	
	/* 12v enable */	
	pmc_enable_periph_clk(ENABLE_12V_PIO_ID);
   81c82:	f04f 000e 	mov.w	r0, #14
   81c86:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81c88:	f44f 7000 	mov.w	r0, #512	; 0x200
   81c8c:	6128      	str	r0, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81c8e:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81c92:	6368      	str	r0, [r5, #52]	; 0x34
   81c94:	bd70      	pop	{r4, r5, r6, pc}
   81c96:	bf00      	nop

00081c98 <led_activity_routine>:
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81c98:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   81c9c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81ca0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
uint16_t ch2_out_color = BLUE;


void led_activity_routine(void)
{
	if(ioport_get_pin_level(CH1_PULSE_GPIO))
   81ca2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   81ca6:	d074      	beq.n	81d92 <led_activity_routine+0xfa>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81ca8:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   81cac:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81cb0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   81cb4:	630a      	str	r2, [r1, #48]	; 0x30
	{
		ioport_set_pin_level(CH1_PULSE_RES_GPIO, IOPORT_PIN_LEVEL_HIGH);
		asm("NOP");asm("NOP");asm("NOP");
   81cb6:	bf00      	nop
   81cb8:	bf00      	nop
   81cba:	bf00      	nop
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81cbc:	634a      	str	r2, [r1, #52]	; 0x34
		ioport_set_pin_level(CH1_PULSE_RES_GPIO, IOPORT_PIN_LEVEL_LOW);
		
		if(ch1_in_color == GREEN)
   81cbe:	f240 0332 	movw	r3, #50	; 0x32
   81cc2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81cc6:	8818      	ldrh	r0, [r3, #0]
   81cc8:	2803      	cmp	r0, #3
   81cca:	d110      	bne.n	81cee <led_activity_routine+0x56>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81ccc:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   81cd0:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81cd4:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   81cd6:	f412 5f80 	tst.w	r2, #4096	; 0x1000
		port->PIO_CODR = mask;
   81cda:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   81cde:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81ce2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   81ce6:	bf14      	ite	ne
   81ce8:	6358      	strne	r0, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81cea:	6318      	streq	r0, [r3, #48]	; 0x30
   81cec:	e011      	b.n	81d12 <led_activity_routine+0x7a>
		{
			ioport_toggle_pin_level(IN_CH1_LED3_GPIO);
		}
		else if(ch1_in_color == BLUE)
   81cee:	2802      	cmp	r0, #2
   81cf0:	d10f      	bne.n	81d12 <led_activity_routine+0x7a>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81cf2:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   81cf6:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81cfa:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   81cfc:	f412 5f00 	tst.w	r2, #8192	; 0x2000
		port->PIO_CODR = mask;
   81d00:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   81d04:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81d08:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   81d0c:	bf14      	ite	ne
   81d0e:	6358      	strne	r0, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81d10:	6318      	streq	r0, [r3, #48]	; 0x30
		{
			ioport_toggle_pin_level(IN_CH1_LED2_GPIO);
		}
		if(is_channel1_delay_en == TRUE)
   81d12:	f640 3110 	movw	r1, #2832	; 0xb10
   81d16:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81d1a:	880a      	ldrh	r2, [r1, #0]
   81d1c:	2a01      	cmp	r2, #1
   81d1e:	d12a      	bne.n	81d76 <led_activity_routine+0xde>
		{
			if(ch1_out_color == GREEN)
   81d20:	f240 0334 	movw	r3, #52	; 0x34
   81d24:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81d28:	8818      	ldrh	r0, [r3, #0]
   81d2a:	2803      	cmp	r0, #3
   81d2c:	d110      	bne.n	81d50 <led_activity_routine+0xb8>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81d2e:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   81d32:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81d36:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   81d38:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		port->PIO_CODR = mask;
   81d3c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   81d40:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81d44:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   81d48:	bf14      	ite	ne
   81d4a:	6358      	strne	r0, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81d4c:	6318      	streq	r0, [r3, #48]	; 0x30
   81d4e:	e036      	b.n	81dbe <led_activity_routine+0x126>
			{
				ioport_toggle_pin_level(OUT_CH1_LED3_GPIO);
			}
			else if(ch1_out_color == BLUE)
   81d50:	2802      	cmp	r0, #2
   81d52:	d134      	bne.n	81dbe <led_activity_routine+0x126>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81d54:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   81d58:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81d5c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   81d5e:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		port->PIO_CODR = mask;
   81d62:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   81d66:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81d6a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   81d6e:	bf14      	ite	ne
   81d70:	6358      	strne	r0, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81d72:	6318      	streq	r0, [r3, #48]	; 0x30
   81d74:	e023      	b.n	81dbe <led_activity_routine+0x126>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81d76:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   81d7a:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81d7e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   81d82:	6318      	str	r0, [r3, #48]	; 0x30
   81d84:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   81d88:	6319      	str	r1, [r3, #48]	; 0x30
   81d8a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   81d8e:	631a      	str	r2, [r3, #48]	; 0x30
   81d90:	e015      	b.n	81dbe <led_activity_routine+0x126>
   81d92:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   81d96:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81d9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   81d9e:	630a      	str	r2, [r1, #48]	; 0x30
   81da0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81da4:	630b      	str	r3, [r1, #48]	; 0x30
   81da6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   81daa:	6308      	str	r0, [r1, #48]	; 0x30
   81dac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   81db0:	630a      	str	r2, [r1, #48]	; 0x30
   81db2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   81db6:	630b      	str	r3, [r1, #48]	; 0x30
   81db8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   81dbc:	6308      	str	r0, [r1, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   81dbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81dc2:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81dc6:	6bca      	ldr	r2, [r1, #60]	; 0x3c
		ioport_set_pin_level(OUT_CH1_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
		ioport_set_pin_level(OUT_CH1_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
		ioport_set_pin_level(OUT_CH1_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);		
	}
	
	if(ioport_get_pin_level(CH2_PULSE_GPIO))
   81dc8:	f012 0f04 	tst.w	r2, #4
   81dcc:	d074      	beq.n	81eb8 <led_activity_routine+0x220>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81dd2:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81dd6:	f04f 0010 	mov.w	r0, #16
   81dda:	6318      	str	r0, [r3, #48]	; 0x30
	{
		ioport_set_pin_level(CH2_PULSE_RES_GPIO, IOPORT_PIN_LEVEL_HIGH);
		asm("NOP");asm("NOP");asm("NOP");
   81ddc:	bf00      	nop
   81dde:	bf00      	nop
   81de0:	bf00      	nop
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81de2:	6358      	str	r0, [r3, #52]	; 0x34
		ioport_set_pin_level(CH2_PULSE_RES_GPIO, IOPORT_PIN_LEVEL_LOW);
		
		if(ch2_in_color == GREEN)
   81de4:	f240 0130 	movw	r1, #48	; 0x30
   81de8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81dec:	880a      	ldrh	r2, [r1, #0]
   81dee:	2a03      	cmp	r2, #3
   81df0:	d110      	bne.n	81e14 <led_activity_routine+0x17c>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81df2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   81df6:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81dfa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   81dfc:	f410 6f80 	tst.w	r0, #1024	; 0x400
		port->PIO_CODR = mask;
   81e00:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   81e04:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81e08:	f44f 6280 	mov.w	r2, #1024	; 0x400
   81e0c:	bf14      	ite	ne
   81e0e:	634a      	strne	r2, [r1, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81e10:	630a      	streq	r2, [r1, #48]	; 0x30
   81e12:	e011      	b.n	81e38 <led_activity_routine+0x1a0>
		{
			ioport_toggle_pin_level(IN_CH2_LED3_GPIO);
		}
		else if(ch2_in_color == BLUE)
   81e14:	2a02      	cmp	r2, #2
   81e16:	d10f      	bne.n	81e38 <led_activity_routine+0x1a0>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81e1c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81e20:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   81e22:	f010 0f08 	tst.w	r0, #8
		port->PIO_CODR = mask;
   81e26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81e2a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81e2e:	f04f 0208 	mov.w	r2, #8
   81e32:	bf14      	ite	ne
   81e34:	634a      	strne	r2, [r1, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81e36:	630a      	streq	r2, [r1, #48]	; 0x30
		{
			ioport_toggle_pin_level(IN_CH2_LED2_GPIO);
		}
		if (is_channel2_delay_en == TRUE)
   81e38:	f640 3314 	movw	r3, #2836	; 0xb14
   81e3c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   81e40:	8818      	ldrh	r0, [r3, #0]
   81e42:	2801      	cmp	r0, #1
   81e44:	d12a      	bne.n	81e9c <led_activity_routine+0x204>
		{
			if(ch2_out_color == GREEN)
   81e46:	f240 0136 	movw	r1, #54	; 0x36
   81e4a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   81e4e:	880a      	ldrh	r2, [r1, #0]
   81e50:	2a03      	cmp	r2, #3
   81e52:	d110      	bne.n	81e76 <led_activity_routine+0x1de>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81e58:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81e5c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   81e5e:	f010 0f40 	tst.w	r0, #64	; 0x40
		port->PIO_CODR = mask;
   81e62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81e66:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81e6a:	f04f 0240 	mov.w	r2, #64	; 0x40
   81e6e:	bf14      	ite	ne
   81e70:	634a      	strne	r2, [r1, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81e72:	630a      	streq	r2, [r1, #48]	; 0x30
   81e74:	4770      	bx	lr
			{
				ioport_toggle_pin_level(OUT_CH2_LED3_GPIO);
			}
			else if(ch2_out_color == BLUE)
   81e76:	2a02      	cmp	r2, #2
   81e78:	d138      	bne.n	81eec <led_activity_routine+0x254>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81e7e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81e82:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   81e84:	f010 0f80 	tst.w	r0, #128	; 0x80
		port->PIO_CODR = mask;
   81e88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81e8c:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81e90:	f04f 0280 	mov.w	r2, #128	; 0x80
   81e94:	bf14      	ite	ne
   81e96:	634a      	strne	r2, [r1, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   81e98:	630a      	streq	r2, [r1, #48]	; 0x30
   81e9a:	4770      	bx	lr
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81e9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81ea0:	f2c4 010e 	movt	r1, #16398	; 0x400e
   81ea4:	f04f 0220 	mov.w	r2, #32
   81ea8:	630a      	str	r2, [r1, #48]	; 0x30
   81eaa:	f04f 0380 	mov.w	r3, #128	; 0x80
   81eae:	630b      	str	r3, [r1, #48]	; 0x30
   81eb0:	f04f 0040 	mov.w	r0, #64	; 0x40
   81eb4:	6308      	str	r0, [r1, #48]	; 0x30
   81eb6:	4770      	bx	lr
   81eb8:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   81ebc:	f2c4 000e 	movt	r0, #16398	; 0x400e
   81ec0:	f04f 0310 	mov.w	r3, #16
   81ec4:	6303      	str	r3, [r0, #48]	; 0x30
   81ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81eca:	f2c4 030e 	movt	r3, #16398	; 0x400e
   81ece:	f04f 0108 	mov.w	r1, #8
   81ed2:	6319      	str	r1, [r3, #48]	; 0x30
   81ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   81ed8:	6302      	str	r2, [r0, #48]	; 0x30
   81eda:	f04f 0020 	mov.w	r0, #32
   81ede:	6318      	str	r0, [r3, #48]	; 0x30
   81ee0:	f04f 0180 	mov.w	r1, #128	; 0x80
   81ee4:	6319      	str	r1, [r3, #48]	; 0x30
   81ee6:	f04f 0240 	mov.w	r2, #64	; 0x40
   81eea:	631a      	str	r2, [r3, #48]	; 0x30
   81eec:	4770      	bx	lr
   81eee:	bf00      	nop

00081ef0 <TC1_Handler>:

/**
 * \brief TC0,1 overflow interrupt
 */
void TC1_Handler(void)
{
   81ef0:	b508      	push	{r3, lr}
	tc_get_status(TC0, 1);
   81ef2:	f04f 0000 	mov.w	r0, #0
   81ef6:	f2c4 0008 	movt	r0, #16392	; 0x4008
   81efa:	f04f 0101 	mov.w	r1, #1
   81efe:	f641 03e5 	movw	r3, #6373	; 0x18e5
   81f02:	f2c0 0308 	movt	r3, #8
   81f06:	4798      	blx	r3
	led_activity_routine();
   81f08:	f641 4099 	movw	r0, #7321	; 0x1c99
   81f0c:	f2c0 0008 	movt	r0, #8
   81f10:	4780      	blx	r0
   81f12:	bd08      	pop	{r3, pc}

00081f14 <init_module_peripherals_bp>:
}

// Here should be all the initialization functions for the module before 12v power
void init_module_peripherals_bp(void)
{
   81f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81f18:	b084      	sub	sp, #16
	/* LEDs IO */
	pmc_enable_periph_clk(IN_CH1_LED1_PIO_ID);
   81f1a:	f04f 000d 	mov.w	r0, #13
   81f1e:	f247 36bd 	movw	r6, #29629	; 0x73bd
   81f22:	f2c0 0608 	movt	r6, #8
   81f26:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81f28:	f44f 5490 	mov.w	r4, #4608	; 0x1200
   81f2c:	f2c4 040e 	movt	r4, #16398	; 0x400e
   81f30:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81f34:	6123      	str	r3, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81f36:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81f3a:	6323      	str	r3, [r4, #48]	; 0x30
	ioport_set_pin_dir(IN_CH1_LED1_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH1_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(IN_CH1_LED2_PIO_ID);
   81f3c:	f04f 000d 	mov.w	r0, #13
   81f40:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81f42:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   81f46:	6120      	str	r0, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81f48:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81f4c:	6320      	str	r0, [r4, #48]	; 0x30
	ioport_set_pin_dir(IN_CH1_LED2_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH1_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(IN_CH1_LED3_PIO_ID);
   81f4e:	f04f 000d 	mov.w	r0, #13
   81f52:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81f54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81f58:	6121      	str	r1, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81f5a:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81f5e:	6321      	str	r1, [r4, #48]	; 0x30
	ioport_set_pin_dir(IN_CH1_LED3_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH1_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);

	pmc_enable_periph_clk(OUT_CH1_LED1_PIO_ID);
   81f60:	f04f 000d 	mov.w	r0, #13
   81f64:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81f66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   81f6a:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81f6c:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81f70:	6322      	str	r2, [r4, #48]	; 0x30
	ioport_set_pin_dir(OUT_CH1_LED1_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(OUT_CH1_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(OUT_CH1_LED2_PIO_ID);
   81f72:	f04f 000d 	mov.w	r0, #13
   81f76:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81f78:	f44f 2500 	mov.w	r5, #524288	; 0x80000
   81f7c:	6125      	str	r5, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81f7e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81f82:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_dir(OUT_CH1_LED2_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(OUT_CH1_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(OUT_CH1_LED3_PIO_ID);
   81f84:	f04f 000d 	mov.w	r0, #13
   81f88:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81f8a:	f44f 2780 	mov.w	r7, #262144	; 0x40000
   81f8e:	6127      	str	r7, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81f90:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81f94:	6327      	str	r7, [r4, #48]	; 0x30
	ioport_set_pin_dir(OUT_CH1_LED3_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(OUT_CH1_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);

	pmc_enable_periph_clk(IN_CH2_LED1_PIO_ID);
   81f96:	f04f 000d 	mov.w	r0, #13
   81f9a:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81f9c:	f04f 0810 	mov.w	r8, #16
   81fa0:	f8c4 8010 	str.w	r8, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81fa4:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81fa8:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	ioport_set_pin_dir(IN_CH2_LED1_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH2_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(IN_CH2_LED2_PIO_ID);
   81fac:	f04f 000c 	mov.w	r0, #12
   81fb0:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81fb2:	f44f 5580 	mov.w	r5, #4096	; 0x1000
   81fb6:	f2c4 050e 	movt	r5, #16398	; 0x400e
   81fba:	f04f 0308 	mov.w	r3, #8
   81fbe:	612b      	str	r3, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81fc0:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81fc4:	632b      	str	r3, [r5, #48]	; 0x30
	ioport_set_pin_dir(IN_CH2_LED2_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH2_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(IN_CH2_LED3_PIO_ID);
   81fc6:	f04f 000d 	mov.w	r0, #13
   81fca:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81fcc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81fd0:	6120      	str	r0, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81fd2:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81fd6:	6320      	str	r0, [r4, #48]	; 0x30
	ioport_set_pin_dir(IN_CH2_LED3_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IN_CH2_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);

	pmc_enable_periph_clk(OUT_CH2_LED1_PIO_ID);
   81fd8:	f04f 000c 	mov.w	r0, #12
   81fdc:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81fde:	f04f 0920 	mov.w	r9, #32
   81fe2:	f8c5 9010 	str.w	r9, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81fe6:	f8c5 90a0 	str.w	r9, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81fea:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
	ioport_set_pin_dir(OUT_CH2_LED1_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(OUT_CH2_LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(OUT_CH2_LED2_PIO_ID);
   81fee:	f04f 000c 	mov.w	r0, #12
   81ff2:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81ff4:	f04f 0a80 	mov.w	sl, #128	; 0x80
   81ff8:	f8c5 a010 	str.w	sl, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81ffc:	f8c5 a0a0 	str.w	sl, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82000:	f8c5 a030 	str.w	sl, [r5, #48]	; 0x30
	ioport_set_pin_dir(OUT_CH2_LED2_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(OUT_CH2_LED2_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(OUT_CH2_LED3_PIO_ID);
   82004:	f04f 000c 	mov.w	r0, #12
   82008:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8200a:	f04f 0140 	mov.w	r1, #64	; 0x40
   8200e:	6129      	str	r1, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82010:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82014:	6329      	str	r1, [r5, #48]	; 0x30
	ioport_set_pin_dir(OUT_CH2_LED3_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(OUT_CH2_LED3_GPIO, IOPORT_PIN_LEVEL_HIGH);
	
	/* Pulse inputs & d reset output */	
	pmc_enable_periph_clk(CH1_PULSE_PIO_ID);
   82016:	f04f 000d 	mov.w	r0, #13
   8201a:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8201c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82020:	6162      	str	r2, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82022:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
	ioport_set_pin_dir(CH1_PULSE_GPIO, IOPORT_DIR_INPUT);
	pmc_enable_periph_clk(CH1_PULSE_RES_PIO_ID);
   82026:	f04f 000d 	mov.w	r0, #13
   8202a:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8202c:	f44f 3780 	mov.w	r7, #65536	; 0x10000
   82030:	6127      	str	r7, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82032:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82036:	6367      	str	r7, [r4, #52]	; 0x34
	ioport_set_pin_dir(CH1_PULSE_RES_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(CH1_PULSE_RES_GPIO, IOPORT_PIN_LEVEL_LOW);
	
	pmc_enable_periph_clk(CH2_PULSE_PIO_ID);
   82038:	f04f 000c 	mov.w	r0, #12
   8203c:	47b0      	blx	r6
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8203e:	f04f 0404 	mov.w	r4, #4
   82042:	616c      	str	r4, [r5, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82044:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
	ioport_set_pin_dir(CH2_PULSE_GPIO, IOPORT_DIR_INPUT);
	pmc_enable_periph_clk(CH2_PULSE_RES_PIO_ID);
   82048:	f04f 000c 	mov.w	r0, #12
   8204c:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8204e:	f8c5 8010 	str.w	r8, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82052:	f8c5 80a0 	str.w	r8, [r5, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82056:	f8c5 8034 	str.w	r8, [r5, #52]	; 0x34
	ioport_set_pin_dir(CH2_PULSE_RES_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(CH2_PULSE_RES_GPIO, IOPORT_PIN_LEVEL_LOW);
	
	/* Delays enable */
	pmc_enable_periph_clk(CH1_DELAY_EN_PIO_ID);
   8205a:	f04f 000c 	mov.w	r0, #12
   8205e:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82060:	f04f 0701 	mov.w	r7, #1
   82064:	612f      	str	r7, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82066:	f8c5 70a0 	str.w	r7, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8206a:	632f      	str	r7, [r5, #48]	; 0x30
	ioport_set_pin_dir(CH1_DELAY_EN_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(CH1_DELAY_EN_GPIO, IOPORT_PIN_LEVEL_HIGH);
	pmc_enable_periph_clk(CH2_DELAY_EN_PIO_ID);
   8206c:	f04f 000b 	mov.w	r0, #11
   82070:	47b0      	blx	r6
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82072:	f44f 6560 	mov.w	r5, #3584	; 0xe00
   82076:	f2c4 050e 	movt	r5, #16398	; 0x400e
   8207a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   8207e:	612b      	str	r3, [r5, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82080:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82084:	632b      	str	r3, [r5, #48]	; 0x30
	uint32_t ul_div;
	uint32_t ul_tcclks;	
	/* Get system clock. */
	uint32_t ul_sysclk = sysclk_get_cpu_hz();
	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC1);
   82086:	f04f 001c 	mov.w	r0, #28
   8208a:	47b0      	blx	r6
	/* Configure TC for a TC_FREQ frequency and trigger on RC compare. */
	tc_find_mck_divisor(20, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
   8208c:	f44f 453d 	mov.w	r5, #48384	; 0xbd00
   82090:	f2c0 5501 	movt	r5, #1281	; 0x501
   82094:	9500      	str	r5, [sp, #0]
   82096:	f04f 0014 	mov.w	r0, #20
   8209a:	4629      	mov	r1, r5
   8209c:	aa03      	add	r2, sp, #12
   8209e:	ab02      	add	r3, sp, #8
   820a0:	f641 04ed 	movw	r4, #6381	; 0x18ed
   820a4:	f2c0 0408 	movt	r4, #8
   820a8:	47a0      	blx	r4
	tc_init(TC0, 1, ul_tcclks | TC_CMR_CPCTRG);
   820aa:	f04f 0400 	mov.w	r4, #0
   820ae:	f2c4 0408 	movt	r4, #16392	; 0x4008
   820b2:	4620      	mov	r0, r4
   820b4:	4639      	mov	r1, r7
   820b6:	9a02      	ldr	r2, [sp, #8]
   820b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   820bc:	f641 03ad 	movw	r3, #6317	; 0x18ad
   820c0:	f2c0 0308 	movt	r3, #8
   820c4:	4798      	blx	r3
	tc_write_rc(TC0, 1, (ul_sysclk / ul_div) / 20);
   820c6:	9803      	ldr	r0, [sp, #12]
   820c8:	fbb5 f1f0 	udiv	r1, r5, r0
   820cc:	f64c 45cd 	movw	r5, #52429	; 0xcccd
   820d0:	f6cc 45cc 	movt	r5, #52428	; 0xcccc
   820d4:	fba5 1201 	umull	r1, r2, r5, r1
   820d8:	4620      	mov	r0, r4
   820da:	4639      	mov	r1, r7
   820dc:	ea4f 1212 	mov.w	r2, r2, lsr #4
   820e0:	f641 03d5 	movw	r3, #6357	; 0x18d5
   820e4:	f2c0 0308 	movt	r3, #8
   820e8:	4798      	blx	r3
	/* Configure and enable interrupt on RC compare. */
	tc_start(TC0, 1);
   820ea:	4620      	mov	r0, r4
   820ec:	4639      	mov	r1, r7
   820ee:	f641 05c9 	movw	r5, #6345	; 0x18c9
   820f2:	f2c0 0508 	movt	r5, #8
   820f6:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   820f8:	f44f 4061 	mov.w	r0, #57600	; 0xe100
   820fc:	f2ce 0000 	movt	r0, #57344	; 0xe000
   82100:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82104:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   82108:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8210c:	6001      	str	r1, [r0, #0]
	NVIC_DisableIRQ(TC1_IRQn);
	NVIC_ClearPendingIRQ(TC1_IRQn);
	//NVIC_SetPriority(TC1_IRQn, 0);
	NVIC_EnableIRQ((IRQn_Type)ID_TC1);
	tc_enable_interrupt(TC0, 1, TC_IER_CPCS);
   8210e:	4620      	mov	r0, r4
   82110:	4639      	mov	r1, r7
   82112:	4642      	mov	r2, r8
   82114:	f641 04dd 	movw	r4, #6365	; 0x18dd
   82118:	f2c0 0408 	movt	r4, #8
   8211c:	47a0      	blx	r4
	
	/* SPI interface */
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
   8211e:	f04f 0019 	mov.w	r0, #25
   82122:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82126:	f247 0599 	movw	r5, #28825	; 0x7099
   8212a:	f2c0 0508 	movt	r5, #8
   8212e:	47a8      	blx	r5
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
   82130:	f04f 001a 	mov.w	r0, #26
   82134:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82138:	47a8      	blx	r5
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
   8213a:	f04f 001b 	mov.w	r0, #27
   8213e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82142:	47a8      	blx	r5
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
   82144:	f04f 001c 	mov.w	r0, #28
   82148:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8214c:	47a8      	blx	r5
	
	/* Configure an SPI peripheral. */
	spi_enable_clock(SPI0);
   8214e:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   82152:	f2c4 0400 	movt	r4, #16384	; 0x4000
   82156:	4620      	mov	r0, r4
   82158:	f241 720d 	movw	r2, #5901	; 0x170d
   8215c:	f2c0 0208 	movt	r2, #8
   82160:	4790      	blx	r2
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   82162:	f04f 0302 	mov.w	r3, #2
   82166:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
   82168:	f8c4 a000 	str.w	sl, [r4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
   8216c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   82170:	6020      	str	r0, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
   82172:	6861      	ldr	r1, [r4, #4]
   82174:	4339      	orrs	r1, r7
   82176:	6061      	str	r1, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   82178:	6865      	ldr	r5, [r4, #4]
   8217a:	ea45 0208 	orr.w	r2, r5, r8
   8217e:	6062      	str	r2, [r4, #4]
	spi_disable(SPI0);
	spi_reset(SPI0);
	spi_set_lastxfer(SPI0);
	spi_set_master_mode(SPI0);
	spi_disable_mode_fault_detect(SPI0);
	spi_set_peripheral_chip_select_value(SPI0, SPI_CHIP_SEL);
   82180:	4620      	mov	r0, r4
   82182:	f04f 0100 	mov.w	r1, #0
   82186:	f241 732d 	movw	r3, #5933	; 0x172d
   8218a:	f2c0 0308 	movt	r3, #8
   8218e:	4798      	blx	r3
	spi_set_clock_polarity(SPI0, SPI_CHIP_SEL, SPI_CLK_POLARITY);
   82190:	4620      	mov	r0, r4
   82192:	f04f 0100 	mov.w	r1, #0
   82196:	460a      	mov	r2, r1
   82198:	f241 75a1 	movw	r5, #6049	; 0x17a1
   8219c:	f2c0 0508 	movt	r5, #8
   821a0:	47a8      	blx	r5
	spi_set_clock_phase(SPI0, SPI_CHIP_SEL, SPI_CLK_PHASE);
   821a2:	4620      	mov	r0, r4
   821a4:	f04f 0100 	mov.w	r1, #0
   821a8:	463a      	mov	r2, r7
   821aa:	f241 73c9 	movw	r3, #6089	; 0x17c9
   821ae:	f2c0 0308 	movt	r3, #8
   821b2:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI0, SPI_CHIP_SEL, SPI_CSR_BITS_10_BIT);
   821b4:	4620      	mov	r0, r4
   821b6:	f04f 0100 	mov.w	r1, #0
   821ba:	464a      	mov	r2, r9
   821bc:	f641 0549 	movw	r5, #6217	; 0x1849
   821c0:	f2c0 0508 	movt	r5, #8
   821c4:	47a8      	blx	r5
	spi_configure_cs_behavior(SPI0, SPI_CHIP_SEL, SPI_CS_RISE_NO_TX);
   821c6:	4620      	mov	r0, r4
   821c8:	f04f 0100 	mov.w	r1, #0
   821cc:	460a      	mov	r2, r1
   821ce:	f241 73f1 	movw	r3, #6129	; 0x17f1
   821d2:	f2c0 0308 	movt	r3, #8
   821d6:	4798      	blx	r3
	spi_set_baudrate_div(SPI0, SPI_CHIP_SEL, (sysclk_get_cpu_hz() / gs_ul_spi_clock));
   821d8:	4620      	mov	r0, r4
   821da:	f04f 0100 	mov.w	r1, #0
   821de:	f04f 0248 	mov.w	r2, #72	; 0x48
   821e2:	f641 0565 	movw	r5, #6245	; 0x1865
   821e6:	f2c0 0508 	movt	r5, #8
   821ea:	47a8      	blx	r5
	spi_set_transfer_delay(SPI0, SPI_CHIP_SEL, SPI_DLYBS, SPI_DLYBCT);
   821ec:	4620      	mov	r0, r4
   821ee:	f04f 0100 	mov.w	r1, #0
   821f2:	460a      	mov	r2, r1
   821f4:	460b      	mov	r3, r1
   821f6:	f641 0585 	movw	r5, #6277	; 0x1885
   821fa:	f2c0 0508 	movt	r5, #8
   821fe:	47a8      	blx	r5
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
   82200:	6027      	str	r7, [r4, #0]
	spi_enable(SPI0);
}
   82202:	b004      	add	sp, #16
   82204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00082208 <is_channel1_delay_enabled>:

uint16_t is_channel1_delay_enabled(void)
{
	return is_channel1_delay_en;
}
   82208:	f640 3310 	movw	r3, #2832	; 0xb10
   8220c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82210:	8818      	ldrh	r0, [r3, #0]
   82212:	4770      	bx	lr

00082214 <enable_disable_ch1_delay>:
	return is_channel2_delay_en;
}

void enable_disable_ch1_delay(uint16_t status)
{
	if(status == TRUE)
   82214:	2801      	cmp	r0, #1
   82216:	d10c      	bne.n	82232 <enable_disable_ch1_delay+0x1e>
	{
		is_channel1_delay_en = TRUE;
   82218:	f04f 0201 	mov.w	r2, #1
   8221c:	f640 3310 	movw	r3, #2832	; 0xb10
   82220:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82224:	801a      	strh	r2, [r3, #0]
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82226:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   8222a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8222e:	6342      	str	r2, [r0, #52]	; 0x34
   82230:	4770      	bx	lr
		ioport_set_pin_level(CH1_DELAY_EN_GPIO, IOPORT_PIN_LEVEL_LOW);
	}
	else
	{
		is_channel1_delay_en = FALSE;
   82232:	f640 3310 	movw	r3, #2832	; 0xb10
   82236:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8223a:	f04f 0200 	mov.w	r2, #0
   8223e:	801a      	strh	r2, [r3, #0]
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82240:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   82244:	f2c4 000e 	movt	r0, #16398	; 0x400e
   82248:	f04f 0101 	mov.w	r1, #1
   8224c:	6301      	str	r1, [r0, #48]	; 0x30
   8224e:	4770      	bx	lr

00082250 <enable_disable_ch2_delay>:
	}
}

void enable_disable_ch2_delay(uint16_t status)
{
	if(status == TRUE)
   82250:	2801      	cmp	r0, #1
   82252:	d10e      	bne.n	82272 <enable_disable_ch2_delay+0x22>
	{
		is_channel2_delay_en = TRUE;
   82254:	f640 3314 	movw	r3, #2836	; 0xb14
   82258:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8225c:	f04f 0201 	mov.w	r2, #1
   82260:	801a      	strh	r2, [r3, #0]
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   82262:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   82266:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8226a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   8226e:	6341      	str	r1, [r0, #52]	; 0x34
   82270:	4770      	bx	lr
		ioport_set_pin_level(CH2_DELAY_EN_GPIO, IOPORT_PIN_LEVEL_LOW);
	}
	else
	{
		is_channel2_delay_en = FALSE;
   82272:	f640 3314 	movw	r3, #2836	; 0xb14
   82276:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8227a:	f04f 0200 	mov.w	r2, #0
   8227e:	801a      	strh	r2, [r3, #0]
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82280:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   82284:	f2c4 000e 	movt	r0, #16398	; 0x400e
   82288:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   8228c:	6301      	str	r1, [r0, #48]	; 0x30
   8228e:	4770      	bx	lr

00082290 <inverse_10_bits_order>:

uint16_t inverse_10_bits_order(uint16_t data)
{
	uint32_t x = (uint32_t)data;
	
	x = (x & 0x55555555) <<  1 | (x & 0xAAAAAAAA) >>  1;
   82290:	f000 3155 	and.w	r1, r0, #1431655765	; 0x55555555
   82294:	f000 30aa 	and.w	r0, r0, #2863311530	; 0xaaaaaaaa
   82298:	ea4f 0250 	mov.w	r2, r0, lsr #1
   8229c:	ea42 0341 	orr.w	r3, r2, r1, lsl #1
	x = (x & 0x33333333) <<  2 | (x & 0xCCCCCCCC) >>  2;
   822a0:	f003 3033 	and.w	r0, r3, #858993459	; 0x33333333
   822a4:	f003 31cc 	and.w	r1, r3, #3435973836	; 0xcccccccc
   822a8:	ea4f 0291 	mov.w	r2, r1, lsr #2
   822ac:	ea42 0080 	orr.w	r0, r2, r0, lsl #2
	x = (x & 0x0F0F0F0F) <<  4 | (x & 0xF0F0F0F0) >>  4;
   822b0:	f000 330f 	and.w	r3, r0, #252645135	; 0xf0f0f0f
   822b4:	f000 31f0 	and.w	r1, r0, #4042322160	; 0xf0f0f0f0
   822b8:	ea4f 1211 	mov.w	r2, r1, lsr #4
   822bc:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
	x = (x & 0x00FF00FF) <<  8 | (x & 0xFF00FF00) >>  8;
   822c0:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
   822c4:	ea4f 2113 	mov.w	r1, r3, lsr #8
   822c8:	ea41 2200 	orr.w	r2, r1, r0, lsl #8
	x = (x & 0x0000FFFF) << 16 | (x & 0xFFFF0000) >> 16;
   822cc:	ea4f 4332 	mov.w	r3, r2, ror #16
	
	x = (x >> 22);
	return (uint16_t)x;
}
   822d0:	ea4f 5093 	mov.w	r0, r3, lsr #22
   822d4:	4770      	bx	lr
   822d6:	bf00      	nop

000822d8 <send_updated_delays>:

void send_updated_delays(void)
{
   822d8:	b510      	push	{r4, lr}
	spi_write(SPI0, current_channel1_delay, 0, 0);
   822da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   822de:	f2c4 0000 	movt	r0, #16384	; 0x4000
   822e2:	f640 3312 	movw	r3, #2834	; 0xb12
   822e6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   822ea:	8819      	ldrh	r1, [r3, #0]
   822ec:	f04f 0200 	mov.w	r2, #0
   822f0:	4613      	mov	r3, r2
   822f2:	f241 7445 	movw	r4, #5957	; 0x1745
   822f6:	f2c0 0408 	movt	r4, #8
   822fa:	47a0      	blx	r4
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
	return p_spi->SPI_SR;
   822fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82300:	f2c4 0200 	movt	r2, #16384	; 0x4000
   82304:	6910      	ldr	r0, [r2, #16]
	/* Wait transfer done. */
	while((spi_read_status(SPI0) & SPI_SR_TDRE) == 0);;
   82306:	f010 0f02 	tst.w	r0, #2
   8230a:	d0fb      	beq.n	82304 <send_updated_delays+0x2c>
	spi_write(SPI0, current_channel2_delay, 0, 0);
   8230c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   82310:	f2c4 0000 	movt	r0, #16384	; 0x4000
   82314:	f640 3116 	movw	r1, #2838	; 0xb16
   82318:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8231c:	8809      	ldrh	r1, [r1, #0]
   8231e:	f04f 0200 	mov.w	r2, #0
   82322:	4613      	mov	r3, r2
   82324:	f241 7445 	movw	r4, #5957	; 0x1745
   82328:	f2c0 0408 	movt	r4, #8
   8232c:	47a0      	blx	r4
   8232e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82332:	f2c4 0200 	movt	r2, #16384	; 0x4000
   82336:	6913      	ldr	r3, [r2, #16]
	/* Wait transfer done. */
	while((spi_read_status(SPI0) & SPI_SR_TDRE) == 0);;	
   82338:	f013 0f02 	tst.w	r3, #2
   8233c:	d0fb      	beq.n	82336 <send_updated_delays+0x5e>
}
   8233e:	bd10      	pop	{r4, pc}

00082340 <setup_channel1_delay>:

void setup_channel1_delay(uint16_t delay)
{
   82340:	b508      	push	{r3, lr}
	delay = inverse_10_bits_order(delay);
   82342:	f242 2391 	movw	r3, #8849	; 0x2291
   82346:	f2c0 0308 	movt	r3, #8
   8234a:	4798      	blx	r3
	current_channel1_delay = delay;
   8234c:	f640 3112 	movw	r1, #2834	; 0xb12
   82350:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82354:	8008      	strh	r0, [r1, #0]
	send_updated_delays();
   82356:	f242 20d9 	movw	r0, #8921	; 0x22d9
   8235a:	f2c0 0008 	movt	r0, #8
   8235e:	4780      	blx	r0
   82360:	bd08      	pop	{r3, pc}
   82362:	bf00      	nop

00082364 <setup_channel2_delay>:
}

void setup_channel2_delay(uint16_t delay)
{
   82364:	b508      	push	{r3, lr}
	delay = inverse_10_bits_order(delay);
   82366:	f242 2391 	movw	r3, #8849	; 0x2291
   8236a:	f2c0 0308 	movt	r3, #8
   8236e:	4798      	blx	r3
	current_channel2_delay = delay;
   82370:	f640 3116 	movw	r1, #2838	; 0xb16
   82374:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82378:	8008      	strh	r0, [r1, #0]
	send_updated_delays();
   8237a:	f242 20d9 	movw	r0, #8921	; 0x22d9
   8237e:	f2c0 0008 	movt	r0, #8
   82382:	4780      	blx	r0
   82384:	bd08      	pop	{r3, pc}
   82386:	bf00      	nop

00082388 <get_channel1_delay>:
}

uint16_t get_channel1_delay(void)
{
   82388:	b508      	push	{r3, lr}
	return (inverse_10_bits_order(current_channel1_delay) & 0x03FF);
   8238a:	f640 3312 	movw	r3, #2834	; 0xb12
   8238e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   82392:	8818      	ldrh	r0, [r3, #0]
   82394:	f242 2191 	movw	r1, #8849	; 0x2291
   82398:	f2c0 0108 	movt	r1, #8
   8239c:	4788      	blx	r1
}
   8239e:	ea4f 5080 	mov.w	r0, r0, lsl #22
   823a2:	ea4f 5090 	mov.w	r0, r0, lsr #22
   823a6:	bd08      	pop	{r3, pc}

000823a8 <get_channel2_delay>:

uint16_t get_channel2_delay(void)
{
   823a8:	b508      	push	{r3, lr}
	return (inverse_10_bits_order(current_channel2_delay) & 0x03FF);
   823aa:	f640 3316 	movw	r3, #2838	; 0xb16
   823ae:	f2c2 0307 	movt	r3, #8199	; 0x2007
   823b2:	8818      	ldrh	r0, [r3, #0]
   823b4:	f242 2191 	movw	r1, #8849	; 0x2291
   823b8:	f2c0 0108 	movt	r1, #8
   823bc:	4788      	blx	r1
}
   823be:	ea4f 5080 	mov.w	r0, r0, lsl #22
   823c2:	ea4f 5090 	mov.w	r0, r0, lsr #22
   823c6:	bd08      	pop	{r3, pc}

000823c8 <init_module_peripherals_ap>:

// Here should be all the initialization functions for the module after 12v power
void init_module_peripherals_ap(void)
{
   823c8:	4770      	bx	lr
   823ca:	bf00      	nop

000823cc <deinit_module_peripherals>:
	
}

// Here should be all the deinitialization functions for the module before 12v power removal
void deinit_module_peripherals(void)
{
   823cc:	4770      	bx	lr
   823ce:	bf00      	nop

000823d0 <init_i2c>:
twi_options_t i2c_options;
twi_packet_t i2c_packet;


void init_i2c(void)
{	
   823d0:	b538      	push	{r3, r4, r5, lr}
	i2c_options.master_clk = sysclk_get_cpu_hz();
   823d2:	f241 644c 	movw	r4, #5708	; 0x164c
   823d6:	f2c2 0407 	movt	r4, #8199	; 0x2007
   823da:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
   823de:	f2c0 5301 	movt	r3, #1281	; 0x501
   823e2:	6023      	str	r3, [r4, #0]
	i2c_options.speed = 400000;
   823e4:	f44f 50d4 	mov.w	r0, #6784	; 0x1a80
   823e8:	f2c0 0006 	movt	r0, #6
   823ec:	6060      	str	r0, [r4, #4]
	i2c_options.chip = EEPROM_ADDR;
   823ee:	f04f 0150 	mov.w	r1, #80	; 0x50
   823f2:	7221      	strb	r1, [r4, #8]
	i2c_options.smbus = 0;
   823f4:	f04f 0200 	mov.w	r2, #0
   823f8:	7262      	strb	r2, [r4, #9]
	twi_enable_master_mode(TWI0);
   823fa:	f44f 4540 	mov.w	r5, #49152	; 0xc000
   823fe:	f2c4 0508 	movt	r5, #16392	; 0x4008
   82402:	4628      	mov	r0, r5
   82404:	f641 13d5 	movw	r3, #6613	; 0x19d5
   82408:	f2c0 0308 	movt	r3, #8
   8240c:	4798      	blx	r3
	twi_master_init(TWI0, &i2c_options);	
   8240e:	4628      	mov	r0, r5
   82410:	4621      	mov	r1, r4
   82412:	f641 2295 	movw	r2, #6805	; 0x1a95
   82416:	f2c0 0208 	movt	r2, #8
   8241a:	4790      	blx	r2
   8241c:	bd38      	pop	{r3, r4, r5, pc}
   8241e:	bf00      	nop

00082420 <init_pwm>:
	while(twi_probe(TWI0, EEPROM_ADDR) != TWI_SUCCESS);
	return (RET_TYPE)twi_master_read(TWI0, &i2c_packet);
}

void init_pwm(void)
{
   82420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82424:	b085      	sub	sp, #20
	/* Enable PWM peripheral clock */
	pmc_enable_periph_clk(ID_PWM);
   82426:	f04f 0024 	mov.w	r0, #36	; 0x24
   8242a:	f247 33bd 	movw	r3, #29629	; 0x73bd
   8242e:	f2c0 0308 	movt	r3, #8
   82432:	4798      	blx	r3

	/* Disable PWM channels for LEDs */
	pwm_channel_disable(PWM, PIN_LED1_CHANNEL);
   82434:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   82438:	f2c4 0409 	movt	r4, #16393	; 0x4009
   8243c:	4620      	mov	r0, r4
   8243e:	f04f 0101 	mov.w	r1, #1
   82442:	f241 65e9 	movw	r5, #5865	; 0x16e9
   82446:	f2c0 0508 	movt	r5, #8
   8244a:	47a8      	blx	r5
	pwm_channel_disable(PWM, PIN_LED2_CHANNEL);
   8244c:	4620      	mov	r0, r4
   8244e:	f04f 0103 	mov.w	r1, #3
   82452:	47a8      	blx	r5
	pwm_channel_disable(PWM, PIN_LED3_CHANNEL);
   82454:	4620      	mov	r0, r4
   82456:	f04f 0102 	mov.w	r1, #2
   8245a:	47a8      	blx	r5

	/* Set PWM clock A as LED_PWM_FREQUENCY*PERIOD_VALUE */
	pwm_clock_t clock_setting = {
   8245c:	f44f 207a 	mov.w	r0, #1024000	; 0xfa000
   82460:	9001      	str	r0, [sp, #4]
   82462:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
   82466:	f2c0 5101 	movt	r1, #1281	; 0x501
   8246a:	9102      	str	r1, [sp, #8]
   8246c:	9103      	str	r1, [sp, #12]
		.ul_clka = LED_PWM_FREQUENCY * LED_PWM_PERIOD_VALUE,
		.ul_clkb = sysclk_get_cpu_hz(),
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &clock_setting);
   8246e:	4620      	mov	r0, r4
   82470:	a901      	add	r1, sp, #4
   82472:	f241 5241 	movw	r2, #5441	; 0x1541
   82476:	f2c0 0208 	movt	r2, #8
   8247a:	4790      	blx	r2

	/* Initialize PWM channel for LED1 */
	/* Period is left-aligned */
	g_pwm_channel_led1.alignment = PWM_ALIGN_LEFT;
   8247c:	f241 616c 	movw	r1, #5740	; 0x166c
   82480:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82484:	f04f 0500 	mov.w	r5, #0
   82488:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a low level */
	g_pwm_channel_led1.polarity = PWM_HIGH;
   8248a:	f04f 0601 	mov.w	r6, #1
   8248e:	728e      	strb	r6, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led1.ul_prescaler = PWM_CMR_CPRE_CLKA;
   82490:	f04f 0b0b 	mov.w	fp, #11
   82494:	f8c1 b004 	str.w	fp, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led1.ul_period = LED_PWM_PERIOD_VALUE;
   82498:	f44f 6a80 	mov.w	sl, #1024	; 0x400
   8249c:	f8c1 a010 	str.w	sl, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led1.ul_duty = LED_INIT_DUTY_VALUE;
   824a0:	60cd      	str	r5, [r1, #12]
	g_pwm_channel_led1.channel = PIN_LED1_CHANNEL;
   824a2:	600e      	str	r6, [r1, #0]
	pwm_channel_init(PWM, &g_pwm_channel_led1);
   824a4:	4620      	mov	r0, r4
   824a6:	f241 598d 	movw	r9, #5517	; 0x158d
   824aa:	f2c0 0908 	movt	r9, #8
   824ae:	47c8      	blx	r9

	/* Enable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_LED1_CHANNEL, 0);
   824b0:	4620      	mov	r0, r4
   824b2:	4631      	mov	r1, r6
   824b4:	462a      	mov	r2, r5
   824b6:	f241 68f5 	movw	r8, #5877	; 0x16f5
   824ba:	f2c0 0808 	movt	r8, #8
   824be:	47c0      	blx	r8
	//pwm_channel_enable_interrupt(PWM, PIN_LED1_CHANNEL, 0);

	/* Initialize PWM channel for LED2 */
	/* Period is center-aligned */
	g_pwm_channel_led2.alignment = PWM_ALIGN_LEFT;
   824c0:	f241 61bc 	movw	r1, #5820	; 0x16bc
   824c4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   824c8:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led2.polarity = PWM_HIGH;
   824ca:	728e      	strb	r6, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led2.ul_prescaler = PWM_CMR_CPRE_CLKA;
   824cc:	f8c1 b004 	str.w	fp, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led2.ul_period = LED_PWM_PERIOD_VALUE;
   824d0:	f8c1 a010 	str.w	sl, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led2.ul_duty = LED_INIT_DUTY_VALUE;
   824d4:	60cd      	str	r5, [r1, #12]
	g_pwm_channel_led2.channel = PIN_LED2_CHANNEL;
   824d6:	f04f 0703 	mov.w	r7, #3
   824da:	600f      	str	r7, [r1, #0]
	pwm_channel_init(PWM, &g_pwm_channel_led2);
   824dc:	4620      	mov	r0, r4
   824de:	47c8      	blx	r9

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_LED2_CHANNEL, 0);
   824e0:	4620      	mov	r0, r4
   824e2:	4639      	mov	r1, r7
   824e4:	462a      	mov	r2, r5
   824e6:	47c0      	blx	r8

	/* Initialize PWM channel for LED3 */
	/* Period is center-aligned */
	g_pwm_channel_led3.alignment = PWM_ALIGN_LEFT;
   824e8:	f241 6394 	movw	r3, #5780	; 0x1694
   824ec:	4619      	mov	r1, r3
   824ee:	f2c2 0107 	movt	r1, #8199	; 0x2007
   824f2:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led3.polarity = PWM_LOW;
   824f4:	f04f 0000 	mov.w	r0, #0
   824f8:	7288      	strb	r0, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led3.ul_prescaler = PWM_CMR_CPRE_CLKA;
   824fa:	f8c1 b004 	str.w	fp, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_led3.ul_period = LED_PWM_PERIOD_VALUE;
   824fe:	f8c1 a010 	str.w	sl, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led3.ul_duty = LED_INIT_DUTY_VALUE;
   82502:	60cd      	str	r5, [r1, #12]
	g_pwm_channel_led3.channel = PIN_LED3_CHANNEL;
   82504:	f04f 0a02 	mov.w	sl, #2
   82508:	f8c1 a000 	str.w	sl, [r1]
	pwm_channel_init(PWM, &g_pwm_channel_led3);
   8250c:	4620      	mov	r0, r4
   8250e:	47c8      	blx	r9

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_LED3_CHANNEL, 0);
   82510:	4620      	mov	r0, r4
   82512:	4651      	mov	r1, sl
   82514:	462a      	mov	r2, r5
   82516:	47c0      	blx	r8
	
	/* Enable PWM channels for LEDs */
	pwm_channel_enable(PWM, PIN_LED1_CHANNEL);
   82518:	4620      	mov	r0, r4
   8251a:	4631      	mov	r1, r6
   8251c:	f241 65dd 	movw	r5, #5853	; 0x16dd
   82520:	f2c0 0508 	movt	r5, #8
   82524:	47a8      	blx	r5
	pwm_channel_enable(PWM, PIN_LED2_CHANNEL);
   82526:	4620      	mov	r0, r4
   82528:	4639      	mov	r1, r7
   8252a:	47a8      	blx	r5
	pwm_channel_enable(PWM, PIN_LED3_CHANNEL);
   8252c:	4620      	mov	r0, r4
   8252e:	4651      	mov	r1, sl
   82530:	47a8      	blx	r5
}
   82532:	b005      	add	sp, #20
   82534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00082538 <set_user_led_colour>:

// Set user led colour
void set_user_led_colour(uint16_t red_val, uint16_t green_val, uint16_t blue_val)
{
   82538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8253a:	4603      	mov	r3, r0
   8253c:	460e      	mov	r6, r1
   8253e:	4617      	mov	r7, r2
	pwm_channel_update_duty(PWM, &g_pwm_channel_led1, red_val);
   82540:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   82544:	f2c4 0409 	movt	r4, #16393	; 0x4009
   82548:	4620      	mov	r0, r4
   8254a:	f241 616c 	movw	r1, #5740	; 0x166c
   8254e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82552:	461a      	mov	r2, r3
   82554:	f241 65b9 	movw	r5, #5817	; 0x16b9
   82558:	f2c0 0508 	movt	r5, #8
   8255c:	47a8      	blx	r5
	pwm_channel_update_duty(PWM, &g_pwm_channel_led2, blue_val);
   8255e:	4620      	mov	r0, r4
   82560:	f241 61bc 	movw	r1, #5820	; 0x16bc
   82564:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82568:	463a      	mov	r2, r7
   8256a:	47a8      	blx	r5
	pwm_channel_update_duty(PWM, &g_pwm_channel_led3, green_val);
   8256c:	4620      	mov	r0, r4
   8256e:	f241 6194 	movw	r1, #5780	; 0x1694
   82572:	f2c2 0107 	movt	r1, #8199	; 0x2007
   82576:	4632      	mov	r2, r6
   82578:	47a8      	blx	r5
   8257a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0008257c <get_user_button_status>:
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   8257c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82580:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82584:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
}

// To see if the user pressed the front panel button
RET_TYPE get_user_button_status(void)
{
	if(ioport_get_pin_level(GPIO_USR_BUTTON))
   82586:	f480 0100 	eor.w	r1, r0, #8388608	; 0x800000
		return RETURN_NOK;
	else
		return RETURN_OK;
}
   8258a:	f3c1 50c0 	ubfx	r0, r1, #23, #1
   8258e:	4770      	bx	lr

00082590 <enable_12v>:
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   82590:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   82594:	f2c4 030e 	movt	r3, #16398	; 0x400e
   82598:	f44f 7200 	mov.w	r2, #512	; 0x200
   8259c:	631a      	str	r2, [r3, #48]	; 0x30
   8259e:	4770      	bx	lr

000825a0 <disable_12v>:
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   825a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
   825a4:	f2c4 030e 	movt	r3, #16398	; 0x400e
   825a8:	f44f 7200 	mov.w	r2, #512	; 0x200
   825ac:	635a      	str	r2, [r3, #52]	; 0x34
   825ae:	4770      	bx	lr

000825b0 <SCPI_ErrorInit>:
/* basic FIFO */
static fifo_t local_error_queue;



void SCPI_ErrorInit(scpi_t * context) {
   825b0:	b508      	push	{r3, lr}
     * // FreeRTOS
     * context->error_queue = (scpi_error_queue_t)xQueueCreate(100, sizeof(int16_t));
     */

    /* basic FIFO */
    context->error_queue = (scpi_error_queue_t)&local_error_queue;
   825b2:	f640 4328 	movw	r3, #3112	; 0xc28
   825b6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   825ba:	62c3      	str	r3, [r0, #44]	; 0x2c
    fifo_init((fifo_t *)context->error_queue);
   825bc:	4618      	mov	r0, r3
   825be:	f242 71e1 	movw	r1, #10209	; 0x27e1
   825c2:	f2c0 0108 	movt	r1, #8
   825c6:	4788      	blx	r1
   825c8:	bd08      	pop	{r3, pc}
   825ca:	bf00      	nop

000825cc <SCPI_ErrorClear>:

/**
 * Clear error queue
 * @param context - scpi context
 */
void SCPI_ErrorClear(scpi_t * context) {
   825cc:	b508      	push	{r3, lr}
     * // FreeRTOS
     * xQueueReset((xQueueHandle)context->error_queue);
     */

    /* basic FIFO */
    fifo_clear((fifo_t *)context->error_queue);
   825ce:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   825d0:	f242 73f1 	movw	r3, #10225	; 0x27f1
   825d4:	f2c0 0308 	movt	r3, #8
   825d8:	4798      	blx	r3
   825da:	bd08      	pop	{r3, pc}

000825dc <SCPI_ErrorPop>:
/**
 * Pop error from queue
 * @param context - scpi context
 * @return error number
 */
int16_t SCPI_ErrorPop(scpi_t * context) {
   825dc:	b500      	push	{lr}
   825de:	b083      	sub	sp, #12
    int16_t result = 0;
   825e0:	a902      	add	r1, sp, #8
   825e2:	f04f 0300 	mov.w	r3, #0
   825e6:	f821 3d02 	strh.w	r3, [r1, #-2]!
     *   result = 0;
     * }
     */

    /* basic FIFO */
    fifo_remove((fifo_t *)context->error_queue, &result);
   825ea:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   825ec:	f242 72fd 	movw	r2, #10237	; 0x27fd
   825f0:	f2c0 0208 	movt	r2, #8
   825f4:	4790      	blx	r2

    return result;
}
   825f6:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   825fa:	b003      	add	sp, #12
   825fc:	bd00      	pop	{pc}
   825fe:	bf00      	nop

00082600 <SCPI_ErrorCount>:
/**
 * Return number of errors/events in the queue
 * @param context
 * @return 
 */
int32_t SCPI_ErrorCount(scpi_t * context) {
   82600:	b500      	push	{lr}
   82602:	b083      	sub	sp, #12
    int16_t result = 0;
   82604:	a902      	add	r1, sp, #8
   82606:	f04f 0300 	mov.w	r3, #0
   8260a:	f821 3d02 	strh.w	r3, [r1, #-2]!
     * // FreeRTOS
     * result = uxQueueMessagesWaiting((xQueueHandle)context->error_queue);
     */

    /* basic FIFO */
    fifo_count((fifo_t *)context->error_queue, &result);
   8260e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   82610:	f642 0299 	movw	r2, #10393	; 0x2899
   82614:	f2c0 0208 	movt	r2, #8
   82618:	4790      	blx	r2

    return result;
}
   8261a:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   8261e:	b003      	add	sp, #12
   82620:	bd00      	pop	{pc}
   82622:	bf00      	nop

00082624 <SCPI_ErrorPush>:
/**
 * Push error to queue
 * @param context - scpi context
 * @param err - error number
 */
void SCPI_ErrorPush(scpi_t * context, int16_t err) {
   82624:	b538      	push	{r3, r4, r5, lr}
   82626:	4605      	mov	r5, r0
   82628:	460c      	mov	r4, r1
     * // FreeRTOS
     * xQueueSend((xQueueHandle)context->error_queue, &err, 0);
     */

    /* basic FIFO */
    fifo_add((fifo_t *)context->error_queue, err);
   8262a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   8262c:	f642 033d 	movw	r3, #10301	; 0x283d
   82630:	f2c0 0308 	movt	r3, #8
   82634:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82636:	f114 0f63 	cmn.w	r4, #99	; 0x63
   8263a:	da0c      	bge.n	82656 <SCPI_ErrorPush+0x32>
   8263c:	f114 0fc7 	cmn.w	r4, #199	; 0xc7
   82640:	db09      	blt.n	82656 <SCPI_ErrorPush+0x32>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82642:	4628      	mov	r0, r5
   82644:	f04f 0102 	mov.w	r1, #2
   82648:	f04f 0220 	mov.w	r2, #32
   8264c:	f642 2349 	movw	r3, #10825	; 0x2a49
   82650:	f2c0 0308 	movt	r3, #8
   82654:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82656:	f114 0fc7 	cmn.w	r4, #199	; 0xc7
   8265a:	da0c      	bge.n	82676 <SCPI_ErrorPush+0x52>
   8265c:	f514 7f96 	cmn.w	r4, #300	; 0x12c
   82660:	dd09      	ble.n	82676 <SCPI_ErrorPush+0x52>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82662:	4628      	mov	r0, r5
   82664:	f04f 0102 	mov.w	r1, #2
   82668:	f04f 0210 	mov.w	r2, #16
   8266c:	f642 2349 	movw	r3, #10825	; 0x2a49
   82670:	f2c0 0308 	movt	r3, #8
   82674:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82676:	f514 7f96 	cmn.w	r4, #300	; 0x12c
   8267a:	dc0c      	bgt.n	82696 <SCPI_ErrorPush+0x72>
   8267c:	f514 7fc8 	cmn.w	r4, #400	; 0x190
   82680:	dd09      	ble.n	82696 <SCPI_ErrorPush+0x72>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82682:	4628      	mov	r0, r5
   82684:	f04f 0102 	mov.w	r1, #2
   82688:	f04f 0208 	mov.w	r2, #8
   8268c:	f642 2349 	movw	r3, #10825	; 0x2a49
   82690:	f2c0 0308 	movt	r3, #8
   82694:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82696:	f514 7fc8 	cmn.w	r4, #400	; 0x190
   8269a:	dc0c      	bgt.n	826b6 <SCPI_ErrorPush+0x92>
   8269c:	f514 7ffa 	cmn.w	r4, #500	; 0x1f4
   826a0:	dd09      	ble.n	826b6 <SCPI_ErrorPush+0x92>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   826a2:	4628      	mov	r0, r5
   826a4:	f04f 0102 	mov.w	r1, #2
   826a8:	f04f 0204 	mov.w	r2, #4
   826ac:	f642 2349 	movw	r3, #10825	; 0x2a49
   826b0:	f2c0 0308 	movt	r3, #8
   826b4:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   826b6:	f514 7ffa 	cmn.w	r4, #500	; 0x1f4
   826ba:	dc0c      	bgt.n	826d6 <SCPI_ErrorPush+0xb2>
   826bc:	f514 7f16 	cmn.w	r4, #600	; 0x258
   826c0:	dd09      	ble.n	826d6 <SCPI_ErrorPush+0xb2>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   826c2:	4628      	mov	r0, r5
   826c4:	f04f 0102 	mov.w	r1, #2
   826c8:	f04f 0280 	mov.w	r2, #128	; 0x80
   826cc:	f642 2349 	movw	r3, #10825	; 0x2a49
   826d0:	f2c0 0308 	movt	r3, #8
   826d4:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   826d6:	f514 7f16 	cmn.w	r4, #600	; 0x258
   826da:	dc0c      	bgt.n	826f6 <SCPI_ErrorPush+0xd2>
   826dc:	f514 7f2f 	cmn.w	r4, #700	; 0x2bc
   826e0:	dd09      	ble.n	826f6 <SCPI_ErrorPush+0xd2>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   826e2:	4628      	mov	r0, r5
   826e4:	f04f 0102 	mov.w	r1, #2
   826e8:	f04f 0240 	mov.w	r2, #64	; 0x40
   826ec:	f642 2349 	movw	r3, #10825	; 0x2a49
   826f0:	f2c0 0308 	movt	r3, #8
   826f4:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   826f6:	f514 7f2f 	cmn.w	r4, #700	; 0x2bc
   826fa:	dc0b      	bgt.n	82714 <SCPI_ErrorPush+0xf0>
   826fc:	f514 7f48 	cmn.w	r4, #800	; 0x320
   82700:	dd08      	ble.n	82714 <SCPI_ErrorPush+0xf0>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82702:	4628      	mov	r0, r5
   82704:	f04f 0102 	mov.w	r1, #2
   82708:	460a      	mov	r2, r1
   8270a:	f642 2349 	movw	r3, #10825	; 0x2a49
   8270e:	f2c0 0308 	movt	r3, #8
   82712:	4798      	blx	r3
    int i;

    SCPI_ErrorAddInternal(context, err);

    for(i = 0; i < ERROR_DEFS_N; i++) {
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
   82714:	f514 7f48 	cmn.w	r4, #800	; 0x320
   82718:	dc0c      	bgt.n	82734 <SCPI_ErrorPush+0x110>
   8271a:	f514 7f61 	cmn.w	r4, #900	; 0x384
   8271e:	dd09      	ble.n	82734 <SCPI_ErrorPush+0x110>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].bit);
   82720:	4628      	mov	r0, r5
   82722:	f04f 0102 	mov.w	r1, #2
   82726:	f04f 0201 	mov.w	r2, #1
   8272a:	f642 2349 	movw	r3, #10825	; 0x2a49
   8272e:	f2c0 0308 	movt	r3, #8
   82732:	4798      	blx	r3
        }
    }

    if (context) {
   82734:	b155      	cbz	r5, 8274c <SCPI_ErrorPush+0x128>
        if (context->interface && context->interface->error) {
   82736:	69e8      	ldr	r0, [r5, #28]
   82738:	b120      	cbz	r0, 82744 <SCPI_ErrorPush+0x120>
   8273a:	6802      	ldr	r2, [r0, #0]
   8273c:	b112      	cbz	r2, 82744 <SCPI_ErrorPush+0x120>
            context->interface->error(context, err);
   8273e:	4628      	mov	r0, r5
   82740:	4621      	mov	r1, r4
   82742:	4790      	blx	r2
        }

        context->cmd_error = TRUE;
   82744:	f04f 0101 	mov.w	r1, #1
   82748:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
   8274c:	bd38      	pop	{r3, r4, r5, pc}
   8274e:	bf00      	nop

00082750 <SCPI_ErrorTranslate>:
 * Translate error number to string
 * @param err - error number
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
    switch (err) {
   82750:	f110 0f6d 	cmn.w	r0, #109	; 0x6d
   82754:	d02b      	beq.n	827ae <SCPI_ErrorTranslate+0x5e>
   82756:	dc09      	bgt.n	8276c <SCPI_ErrorTranslate+0x1c>
   82758:	f110 0f83 	cmn.w	r0, #131	; 0x83
   8275c:	d02c      	beq.n	827b8 <SCPI_ErrorTranslate+0x68>
   8275e:	f110 0f71 	cmn.w	r0, #113	; 0x71
   82762:	d01a      	beq.n	8279a <SCPI_ErrorTranslate+0x4a>
   82764:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
   82768:	d130      	bne.n	827cc <SCPI_ErrorTranslate+0x7c>
   8276a:	e02a      	b.n	827c2 <SCPI_ErrorTranslate+0x72>
   8276c:	f110 0f67 	cmn.w	r0, #103	; 0x67
   82770:	d00e      	beq.n	82790 <SCPI_ErrorTranslate+0x40>
   82772:	dc03      	bgt.n	8277c <SCPI_ErrorTranslate+0x2c>
   82774:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
   82778:	d128      	bne.n	827cc <SCPI_ErrorTranslate+0x7c>
   8277a:	e013      	b.n	827a4 <SCPI_ErrorTranslate+0x54>
   8277c:	f110 0f66 	cmn.w	r0, #102	; 0x66
   82780:	d029      	beq.n	827d6 <SCPI_ErrorTranslate+0x86>
   82782:	2800      	cmp	r0, #0
   82784:	d122      	bne.n	827cc <SCPI_ErrorTranslate+0x7c>
        case 0: return "No error";
   82786:	f24c 70cc 	movw	r0, #51148	; 0xc7cc
   8278a:	f2c0 0008 	movt	r0, #8
   8278e:	4770      	bx	lr
        case SCPI_ERROR_SYNTAX: return "Syntax error";
        case SCPI_ERROR_INVALID_SEPARATOR: return "Invalid separator";
   82790:	f24c 70e8 	movw	r0, #51176	; 0xc7e8
   82794:	f2c0 0008 	movt	r0, #8
   82798:	4770      	bx	lr
        case SCPI_ERROR_UNDEFINED_HEADER: return "Undefined header";
   8279a:	f24c 70fc 	movw	r0, #51196	; 0xc7fc
   8279e:	f2c0 0008 	movt	r0, #8
   827a2:	4770      	bx	lr
        case SCPI_ERROR_PARAMETER_NOT_ALLOWED: return "Parameter not allowed";
   827a4:	f64c 0010 	movw	r0, #51216	; 0xc810
   827a8:	f2c0 0008 	movt	r0, #8
   827ac:	4770      	bx	lr
        case SCPI_ERROR_MISSING_PARAMETER: return "Missing parameter";
   827ae:	f64c 0028 	movw	r0, #51240	; 0xc828
   827b2:	f2c0 0008 	movt	r0, #8
   827b6:	4770      	bx	lr
        case SCPI_ERROR_INVALID_SUFFIX: return "Invalid suffix";
   827b8:	f64c 003c 	movw	r0, #51260	; 0xc83c
   827bc:	f2c0 0008 	movt	r0, #8
   827c0:	4770      	bx	lr
        case SCPI_ERROR_SUFFIX_NOT_ALLOWED: return "Suffix not allowed";
   827c2:	f64c 004c 	movw	r0, #51276	; 0xc84c
   827c6:	f2c0 0008 	movt	r0, #8
   827ca:	4770      	bx	lr
        default: return "Unknown error";
   827cc:	f64c 0060 	movw	r0, #51296	; 0xc860
   827d0:	f2c0 0008 	movt	r0, #8
   827d4:	4770      	bx	lr
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
    switch (err) {
        case 0: return "No error";
        case SCPI_ERROR_SYNTAX: return "Syntax error";
   827d6:	f24c 70d8 	movw	r0, #51160	; 0xc7d8
   827da:	f2c0 0008 	movt	r0, #8
        case SCPI_ERROR_MISSING_PARAMETER: return "Missing parameter";
        case SCPI_ERROR_INVALID_SUFFIX: return "Invalid suffix";
        case SCPI_ERROR_SUFFIX_NOT_ALLOWED: return "Suffix not allowed";
        default: return "Unknown error";
    }
}
   827de:	4770      	bx	lr

000827e0 <fifo_init>:

#include "fifo.h"

void fifo_init(fifo_t * fifo) {
    fifo->wr = 0;
   827e0:	f04f 0300 	mov.w	r3, #0
   827e4:	8003      	strh	r3, [r0, #0]
    fifo->rd = 0;
   827e6:	8043      	strh	r3, [r0, #2]
    fifo->size = FIFO_SIZE;
   827e8:	f04f 0110 	mov.w	r1, #16
   827ec:	8081      	strh	r1, [r0, #4]
   827ee:	4770      	bx	lr

000827f0 <fifo_clear>:
}

void fifo_clear(fifo_t * fifo) {
    fifo->wr = 0;
   827f0:	f04f 0300 	mov.w	r3, #0
   827f4:	8003      	strh	r3, [r0, #0]
    fifo->rd = 0;
   827f6:	8043      	strh	r3, [r0, #2]
   827f8:	4770      	bx	lr
   827fa:	bf00      	nop

000827fc <fifo_remove>:
    fifo->wr = (fifo->wr + 1) % (fifo->size + 1);

    return TRUE;
}

bool_t fifo_remove(fifo_t * fifo, int16_t * value) {
   827fc:	b410      	push	{r4}
    /* FIFO empty? */
    if (fifo->wr == fifo->rd) {
   827fe:	8843      	ldrh	r3, [r0, #2]
   82800:	f9b0 4000 	ldrsh.w	r4, [r0]
   82804:	b21a      	sxth	r2, r3
   82806:	4294      	cmp	r4, r2
   82808:	d014      	beq.n	82834 <fifo_remove+0x38>
        return FALSE;
    }

    if(value) {
   8280a:	b119      	cbz	r1, 82814 <fifo_remove+0x18>
        *value = fifo->data[fifo->rd];
   8280c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
   82810:	88d3      	ldrh	r3, [r2, #6]
   82812:	800b      	strh	r3, [r1, #0]
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size + 1);
   82814:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   82818:	f102 0201 	add.w	r2, r2, #1
   8281c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   82820:	f103 0301 	add.w	r3, r3, #1
   82824:	fb92 f1f3 	sdiv	r1, r2, r3
   82828:	fb03 2211 	mls	r2, r3, r1, r2
   8282c:	8042      	strh	r2, [r0, #2]

    return TRUE;
   8282e:	f04f 0001 	mov.w	r0, #1
   82832:	e001      	b.n	82838 <fifo_remove+0x3c>
}

bool_t fifo_remove(fifo_t * fifo, int16_t * value) {
    /* FIFO empty? */
    if (fifo->wr == fifo->rd) {
        return FALSE;
   82834:	f04f 0000 	mov.w	r0, #0
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size + 1);

    return TRUE;
}
   82838:	bc10      	pop	{r4}
   8283a:	4770      	bx	lr

0008283c <fifo_add>:
void fifo_clear(fifo_t * fifo) {
    fifo->wr = 0;
    fifo->rd = 0;
}

bool_t fifo_add(fifo_t * fifo, int16_t value) {
   8283c:	b538      	push	{r3, r4, r5, lr}
   8283e:	4604      	mov	r4, r0
   82840:	460d      	mov	r5, r1
    /* FIFO full? */
    if (fifo->wr == ((fifo->rd + fifo->size) % (fifo->size + 1))) {
   82842:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   82846:	f9b0 1000 	ldrsh.w	r1, [r0]
   8284a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   8284e:	18d2      	adds	r2, r2, r3
   82850:	f103 0301 	add.w	r3, r3, #1
   82854:	fb92 f0f3 	sdiv	r0, r2, r3
   82858:	fb03 2310 	mls	r3, r3, r0, r2
   8285c:	4299      	cmp	r1, r3
   8285e:	d107      	bne.n	82870 <fifo_add+0x34>
        fifo_remove(fifo, NULL);
   82860:	4620      	mov	r0, r4
   82862:	f04f 0100 	mov.w	r1, #0
   82866:	f242 72fd 	movw	r2, #10237	; 0x27fd
   8286a:	f2c0 0208 	movt	r2, #8
   8286e:	4790      	blx	r2
    }

    fifo->data[fifo->wr] = value;
   82870:	f9b4 0000 	ldrsh.w	r0, [r4]
   82874:	eb04 0140 	add.w	r1, r4, r0, lsl #1
   82878:	80cd      	strh	r5, [r1, #6]
    fifo->wr = (fifo->wr + 1) % (fifo->size + 1);
   8287a:	f100 0001 	add.w	r0, r0, #1
   8287e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   82882:	f103 0301 	add.w	r3, r3, #1
   82886:	fb90 f2f3 	sdiv	r2, r0, r3
   8288a:	fb03 0012 	mls	r0, r3, r2, r0
   8288e:	8020      	strh	r0, [r4, #0]

    return TRUE;
}
   82890:	f04f 0001 	mov.w	r0, #1
   82894:	bd38      	pop	{r3, r4, r5, pc}
   82896:	bf00      	nop

00082898 <fifo_count>:

    return TRUE;
}

bool_t fifo_count(fifo_t * fifo, int16_t * value) {
    *value = fifo->wr - fifo->rd;
   82898:	8802      	ldrh	r2, [r0, #0]
   8289a:	8843      	ldrh	r3, [r0, #2]
   8289c:	1ad2      	subs	r2, r2, r3
   8289e:	b292      	uxth	r2, r2
   828a0:	b293      	uxth	r3, r2
   828a2:	800b      	strh	r3, [r1, #0]
    if (*value < 0) {
   828a4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   828a8:	d004      	beq.n	828b4 <fifo_count+0x1c>
        *value += (fifo->size + 1);
   828aa:	8880      	ldrh	r0, [r0, #4]
   828ac:	f100 0001 	add.w	r0, r0, #1
   828b0:	1812      	adds	r2, r2, r0
   828b2:	800a      	strh	r2, [r1, #0]
    }
    return TRUE;
}
   828b4:	f04f 0001 	mov.w	r0, #1
   828b8:	4770      	bx	lr
   828ba:	bf00      	nop

000828bc <SCPI_RegGet>:
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
    if ((name < SCPI_REG_COUNT) && (context->registers != NULL)) {
   828bc:	2907      	cmp	r1, #7
   828be:	d804      	bhi.n	828ca <SCPI_RegGet+0xe>
   828c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
   828c2:	b12b      	cbz	r3, 828d0 <SCPI_RegGet+0x14>
        return context->registers[name];
   828c4:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
   828c8:	4770      	bx	lr
    } else {
        return 0;
   828ca:	f04f 0000 	mov.w	r0, #0
   828ce:	4770      	bx	lr
   828d0:	f04f 0000 	mov.w	r0, #0
    }
}
   828d4:	4770      	bx	lr
   828d6:	bf00      	nop

000828d8 <SCPI_RegClearBits>:
/**
 * Clear register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegClearBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
   828d8:	b570      	push	{r4, r5, r6, lr}
   828da:	4605      	mov	r5, r0
   828dc:	460c      	mov	r4, r1
   828de:	4616      	mov	r6, r2
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
   828e0:	f642 03bd 	movw	r3, #10429	; 0x28bd
   828e4:	f2c0 0308 	movt	r3, #8
   828e8:	4798      	blx	r3
   828ea:	ea20 0206 	bic.w	r2, r0, r6
   828ee:	4628      	mov	r0, r5
   828f0:	4621      	mov	r1, r4
   828f2:	b292      	uxth	r2, r2
   828f4:	f642 1335 	movw	r3, #10549	; 0x2935
   828f8:	f2c0 0308 	movt	r3, #8
   828fc:	4798      	blx	r3
   828fe:	bd70      	pop	{r4, r5, r6, pc}

00082900 <regUpdateSTB>:
 * @param context
 * @param val value of register
 * @param mask name of mask register (enable register)
 * @param stbBits bits to clear or set in STB
 */
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
   82900:	b570      	push	{r4, r5, r6, lr}
   82902:	4605      	mov	r5, r0
   82904:	460e      	mov	r6, r1
   82906:	461c      	mov	r4, r3
    if (val & SCPI_RegGet(context, mask)) {
   82908:	4611      	mov	r1, r2
   8290a:	f642 03bd 	movw	r3, #10429	; 0x28bd
   8290e:	f2c0 0308 	movt	r3, #8
   82912:	4798      	blx	r3
   82914:	4230      	tst	r0, r6
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
   82916:	4628      	mov	r0, r5
   82918:	f04f 0100 	mov.w	r1, #0
   8291c:	4622      	mov	r2, r4
   8291e:	bf19      	ittee	ne
   82920:	f642 2349 	movwne	r3, #10825	; 0x2a49
   82924:	f2c0 0308 	movtne	r3, #8
    } else {
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
   82928:	f642 03d9 	movweq	r3, #10457	; 0x28d9
   8292c:	f2c0 0308 	movteq	r3, #8
   82930:	4798      	blx	r3
   82932:	bd70      	pop	{r4, r5, r6, pc}

00082934 <SCPI_RegSet>:
/**
 * Set register value
 * @param name - register name
 * @param val - new value
 */
void SCPI_RegSet(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t val) {
   82934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82936:	4605      	mov	r5, r0
   82938:	460c      	mov	r4, r1
   8293a:	4616      	mov	r6, r2
    bool_t srq = FALSE;
    scpi_reg_val_t mask;
    scpi_reg_val_t old_val;

    if ((name >= SCPI_REG_COUNT) || (context->registers == NULL)) {
   8293c:	2907      	cmp	r1, #7
   8293e:	f200 8081 	bhi.w	82a44 <SCPI_RegSet+0x110>
   82942:	6b03      	ldr	r3, [r0, #48]	; 0x30
   82944:	2b00      	cmp	r3, #0
   82946:	d07d      	beq.n	82a44 <SCPI_RegSet+0x110>
        return;
    }
    
    /* store old register value */
    old_val = context->registers[name];
   82948:	f833 7011 	ldrh.w	r7, [r3, r1, lsl #1]

    /* set register value */
    context->registers[name] = val;
   8294c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

    /** @TODO: remove recutsion */
    switch (name) {
   82950:	2907      	cmp	r1, #7
   82952:	d857      	bhi.n	82a04 <SCPI_RegSet+0xd0>
   82954:	e8df f001 	tbb	[pc, r1]
   82958:	281d1504 	.word	0x281d1504
   8295c:	3b304e43 	.word	0x3b304e43
        case SCPI_REG_STB:
            mask = SCPI_RegGet(context, SCPI_REG_SRE);
   82960:	f04f 0101 	mov.w	r1, #1
   82964:	f642 02bd 	movw	r2, #10429	; 0x28bd
   82968:	f2c0 0208 	movt	r2, #8
   8296c:	4790      	blx	r2
            mask &= ~STB_SRQ;
   8296e:	f64f 71bf 	movw	r1, #65471	; 0xffbf
   82972:	4031      	ands	r1, r6
            if (val & mask) {
   82974:	4201      	tst	r1, r0
   82976:	d052      	beq.n	82a1e <SCPI_RegSet+0xea>
                val |= STB_SRQ;
   82978:	f046 0640 	orr.w	r6, r6, #64	; 0x40
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
   8297c:	42b7      	cmp	r7, r6
   8297e:	d153      	bne.n	82a28 <SCPI_RegSet+0xf4>
   82980:	e04e      	b.n	82a20 <SCPI_RegSet+0xec>
            } else {
                val &= ~STB_SRQ;
            }
            break;
        case SCPI_REG_SRE:
            regUpdate(context, SCPI_REG_STB);
   82982:	f04f 0100 	mov.w	r1, #0
   82986:	f642 2371 	movw	r3, #10865	; 0x2a71
   8298a:	f2c0 0308 	movt	r3, #8
   8298e:	4798      	blx	r3
            break;
   82990:	e046      	b.n	82a20 <SCPI_RegSet+0xec>
        case SCPI_REG_ESR:
            regUpdateSTB(context, val, SCPI_REG_ESE, STB_ESR);
   82992:	4611      	mov	r1, r2
   82994:	f04f 0203 	mov.w	r2, #3
   82998:	f04f 0320 	mov.w	r3, #32
   8299c:	f642 1701 	movw	r7, #10497	; 0x2901
   829a0:	f2c0 0708 	movt	r7, #8
   829a4:	47b8      	blx	r7
            break;
   829a6:	e03b      	b.n	82a20 <SCPI_RegSet+0xec>
        case SCPI_REG_ESE:
            regUpdate(context, SCPI_REG_ESR);
   829a8:	f04f 0102 	mov.w	r1, #2
   829ac:	f642 2271 	movw	r2, #10865	; 0x2a71
   829b0:	f2c0 0208 	movt	r2, #8
   829b4:	4790      	blx	r2
            break;
   829b6:	e033      	b.n	82a20 <SCPI_RegSet+0xec>
        case SCPI_REG_QUES:
            regUpdateSTB(context, val, SCPI_REG_QUESE, STB_QES);
   829b8:	4611      	mov	r1, r2
   829ba:	f04f 0207 	mov.w	r2, #7
   829be:	f04f 0308 	mov.w	r3, #8
   829c2:	f642 1701 	movw	r7, #10497	; 0x2901
   829c6:	f2c0 0708 	movt	r7, #8
   829ca:	47b8      	blx	r7
            break;
   829cc:	e028      	b.n	82a20 <SCPI_RegSet+0xec>
        case SCPI_REG_QUESE:
            regUpdate(context, SCPI_REG_QUES);
   829ce:	f04f 0106 	mov.w	r1, #6
   829d2:	f642 2271 	movw	r2, #10865	; 0x2a71
   829d6:	f2c0 0208 	movt	r2, #8
   829da:	4790      	blx	r2
            break;
   829dc:	e020      	b.n	82a20 <SCPI_RegSet+0xec>
        case SCPI_REG_OPER:
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
   829de:	4611      	mov	r1, r2
   829e0:	f04f 0205 	mov.w	r2, #5
   829e4:	f04f 0380 	mov.w	r3, #128	; 0x80
   829e8:	f642 1701 	movw	r7, #10497	; 0x2901
   829ec:	f2c0 0708 	movt	r7, #8
   829f0:	47b8      	blx	r7
            break;
   829f2:	e015      	b.n	82a20 <SCPI_RegSet+0xec>
        case SCPI_REG_OPERE:
            regUpdate(context, SCPI_REG_OPER);
   829f4:	f04f 0104 	mov.w	r1, #4
   829f8:	f642 2371 	movw	r3, #10865	; 0x2a71
   829fc:	f2c0 0308 	movt	r3, #8
   82a00:	4798      	blx	r3
            break;
   82a02:	e00d      	b.n	82a20 <SCPI_RegSet+0xec>
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
   82a04:	6b00      	ldr	r0, [r0, #48]	; 0x30
   82a06:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
   82a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
    if (context && context->interface && context->interface->control) {
   82a0c:	69e9      	ldr	r1, [r5, #28]
   82a0e:	b1c9      	cbz	r1, 82a44 <SCPI_RegSet+0x110>
   82a10:	688b      	ldr	r3, [r1, #8]
   82a12:	b1bb      	cbz	r3, 82a44 <SCPI_RegSet+0x110>
        return context->interface->control(context, ctrl, val);
   82a14:	4628      	mov	r0, r5
   82a16:	f04f 0101 	mov.w	r1, #1
   82a1a:	4798      	blx	r3
   82a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
                    srq = TRUE;
                }
            } else {
                val &= ~STB_SRQ;
   82a1e:	460e      	mov	r6, r1
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
   82a20:	6b28      	ldr	r0, [r5, #48]	; 0x30
   82a22:	f820 6014 	strh.w	r6, [r0, r4, lsl #1]
   82a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82a28:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82a2a:	f823 6014 	strh.w	r6, [r3, r4, lsl #1]

    if (srq) {
        writeControl(context, SCPI_CTRL_SRQ, SCPI_RegGet(context, SCPI_REG_STB));
   82a2e:	4628      	mov	r0, r5
   82a30:	f04f 0100 	mov.w	r1, #0
   82a34:	f642 02bd 	movw	r2, #10429	; 0x28bd
   82a38:	f2c0 0208 	movt	r2, #8
   82a3c:	4790      	blx	r2
   82a3e:	4602      	mov	r2, r0
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
    if (context && context->interface && context->interface->control) {
   82a40:	2d00      	cmp	r5, #0
   82a42:	d1e3      	bne.n	82a0c <SCPI_RegSet+0xd8>
   82a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82a46:	bf00      	nop

00082a48 <SCPI_RegSetBits>:
/**
 * Set register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegSetBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
   82a48:	b570      	push	{r4, r5, r6, lr}
   82a4a:	4605      	mov	r5, r0
   82a4c:	460c      	mov	r4, r1
   82a4e:	4616      	mov	r6, r2
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
   82a50:	f642 03bd 	movw	r3, #10429	; 0x28bd
   82a54:	f2c0 0308 	movt	r3, #8
   82a58:	4798      	blx	r3
   82a5a:	ea40 0206 	orr.w	r2, r0, r6
   82a5e:	4628      	mov	r0, r5
   82a60:	4621      	mov	r1, r4
   82a62:	b292      	uxth	r2, r2
   82a64:	f642 1335 	movw	r3, #10549	; 0x2935
   82a68:	f2c0 0308 	movt	r3, #8
   82a6c:	4798      	blx	r3
   82a6e:	bd70      	pop	{r4, r5, r6, pc}

00082a70 <regUpdate>:
/**
 * Update register value
 * @param context
 * @param name - register name
 */
static void regUpdate(scpi_t * context, scpi_reg_name_t name) {
   82a70:	b538      	push	{r3, r4, r5, lr}
   82a72:	4605      	mov	r5, r0
   82a74:	460c      	mov	r4, r1
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
   82a76:	f642 03bd 	movw	r3, #10429	; 0x28bd
   82a7a:	f2c0 0308 	movt	r3, #8
   82a7e:	4798      	blx	r3
   82a80:	4602      	mov	r2, r0
   82a82:	4628      	mov	r0, r5
   82a84:	4621      	mov	r1, r4
   82a86:	f642 1335 	movw	r3, #10549	; 0x2935
   82a8a:	f2c0 0308 	movt	r3, #8
   82a8e:	4798      	blx	r3
   82a90:	bd38      	pop	{r3, r4, r5, pc}
   82a92:	bf00      	nop

00082a94 <SCPI_EventClear>:

/**
 * Clear event register
 * @param context
 */
void SCPI_EventClear(scpi_t * context) {
   82a94:	b508      	push	{r3, lr}
    /* TODO */
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
   82a96:	f04f 0102 	mov.w	r1, #2
   82a9a:	f04f 0200 	mov.w	r2, #0
   82a9e:	f642 1335 	movw	r3, #10549	; 0x2935
   82aa2:	f2c0 0308 	movt	r3, #8
   82aa6:	4798      	blx	r3
   82aa8:	bd08      	pop	{r3, pc}
   82aaa:	bf00      	nop

00082aac <SCPI_CoreCls>:
 * *CLS - This command clears all status data structures in a device. 
 *        For a device which minimally complies with SCPI. (SCPI std 4.1.3.2)
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreCls(scpi_t * context) {
   82aac:	b538      	push	{r3, r4, r5, lr}
   82aae:	4604      	mov	r4, r0
    SCPI_EventClear(context);
   82ab0:	f642 2395 	movw	r3, #10901	; 0x2a95
   82ab4:	f2c0 0308 	movt	r3, #8
   82ab8:	4798      	blx	r3
    SCPI_ErrorClear(context);
   82aba:	4620      	mov	r0, r4
   82abc:	f242 51cd 	movw	r1, #9677	; 0x25cd
   82ac0:	f2c0 0108 	movt	r1, #8
   82ac4:	4788      	blx	r1
    SCPI_RegSet(context, SCPI_REG_OPER, 0);
   82ac6:	4620      	mov	r0, r4
   82ac8:	f04f 0104 	mov.w	r1, #4
   82acc:	f04f 0200 	mov.w	r2, #0
   82ad0:	f642 1535 	movw	r5, #10549	; 0x2935
   82ad4:	f2c0 0508 	movt	r5, #8
   82ad8:	47a8      	blx	r5
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
   82ada:	4620      	mov	r0, r4
   82adc:	f04f 0106 	mov.w	r1, #6
   82ae0:	f04f 0200 	mov.w	r2, #0
   82ae4:	47a8      	blx	r5
    return SCPI_RES_OK;
}
   82ae6:	f04f 0001 	mov.w	r0, #1
   82aea:	bd38      	pop	{r3, r4, r5, pc}

00082aec <SCPI_CoreEse>:
/**
 * *ESE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEse(scpi_t * context) {
   82aec:	b510      	push	{r4, lr}
   82aee:	b082      	sub	sp, #8
   82af0:	4604      	mov	r4, r0
    int32_t new_ESE;
    if (SCPI_ParamInt(context, &new_ESE, TRUE)) {
   82af2:	a901      	add	r1, sp, #4
   82af4:	f04f 0201 	mov.w	r2, #1
   82af8:	f243 23d1 	movw	r3, #13009	; 0x32d1
   82afc:	f2c0 0308 	movt	r3, #8
   82b00:	4798      	blx	r3
   82b02:	b148      	cbz	r0, 82b18 <SCPI_CoreEse+0x2c>
        SCPI_RegSet(context, SCPI_REG_ESE, new_ESE);
   82b04:	4620      	mov	r0, r4
   82b06:	f04f 0103 	mov.w	r1, #3
   82b0a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   82b0e:	f642 1335 	movw	r3, #10549	; 0x2935
   82b12:	f2c0 0308 	movt	r3, #8
   82b16:	4798      	blx	r3
    }
    return SCPI_RES_OK;
}
   82b18:	f04f 0001 	mov.w	r0, #1
   82b1c:	b002      	add	sp, #8
   82b1e:	bd10      	pop	{r4, pc}

00082b20 <SCPI_CoreEseQ>:
/**
 * *ESE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEseQ(scpi_t * context) {
   82b20:	b510      	push	{r4, lr}
   82b22:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_ESE));
   82b24:	f04f 0103 	mov.w	r1, #3
   82b28:	f642 03bd 	movw	r3, #10429	; 0x28bd
   82b2c:	f2c0 0308 	movt	r3, #8
   82b30:	4798      	blx	r3
   82b32:	4601      	mov	r1, r0
   82b34:	4620      	mov	r0, r4
   82b36:	f243 12b9 	movw	r2, #12729	; 0x31b9
   82b3a:	f2c0 0208 	movt	r2, #8
   82b3e:	4790      	blx	r2
    return SCPI_RES_OK;
}
   82b40:	f04f 0001 	mov.w	r0, #1
   82b44:	bd10      	pop	{r4, pc}
   82b46:	bf00      	nop

00082b48 <SCPI_CoreEsrQ>:
/**
 * *ESR?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEsrQ(scpi_t * context) {
   82b48:	b510      	push	{r4, lr}
   82b4a:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_ESR));
   82b4c:	f04f 0102 	mov.w	r1, #2
   82b50:	f642 03bd 	movw	r3, #10429	; 0x28bd
   82b54:	f2c0 0308 	movt	r3, #8
   82b58:	4798      	blx	r3
   82b5a:	4601      	mov	r1, r0
   82b5c:	4620      	mov	r0, r4
   82b5e:	f243 12b9 	movw	r2, #12729	; 0x31b9
   82b62:	f2c0 0208 	movt	r2, #8
   82b66:	4790      	blx	r2
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
   82b68:	4620      	mov	r0, r4
   82b6a:	f04f 0102 	mov.w	r1, #2
   82b6e:	f04f 0200 	mov.w	r2, #0
   82b72:	f642 1335 	movw	r3, #10549	; 0x2935
   82b76:	f2c0 0308 	movt	r3, #8
   82b7a:	4798      	blx	r3
    return SCPI_RES_OK;
}
   82b7c:	f04f 0001 	mov.w	r0, #1
   82b80:	bd10      	pop	{r4, pc}
   82b82:	bf00      	nop

00082b84 <SCPI_CoreIdnQ>:
/**
 * *IDN?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreIdnQ(scpi_t * context) {
   82b84:	b538      	push	{r3, r4, r5, lr}
   82b86:	4605      	mov	r5, r0
    SCPI_ResultString(context, SCPI_MANUFACTURE);
   82b88:	f64c 0170 	movw	r1, #51312	; 0xc870
   82b8c:	f2c0 0108 	movt	r1, #8
   82b90:	f243 1479 	movw	r4, #12665	; 0x3179
   82b94:	f2c0 0408 	movt	r4, #8
   82b98:	47a0      	blx	r4
    SCPI_ResultString(context, SCPI_DEV_NAME);
   82b9a:	4628      	mov	r0, r5
   82b9c:	f64c 0178 	movw	r1, #51320	; 0xc878
   82ba0:	f2c0 0108 	movt	r1, #8
   82ba4:	47a0      	blx	r4
    SCPI_ResultString(context, SCPI_DEV_VERSION);
   82ba6:	4628      	mov	r0, r5
   82ba8:	f64c 0198 	movw	r1, #51352	; 0xc898
   82bac:	f2c0 0108 	movt	r1, #8
   82bb0:	47a0      	blx	r4
    return SCPI_RES_OK;
}
   82bb2:	f04f 0001 	mov.w	r0, #1
   82bb6:	bd38      	pop	{r3, r4, r5, pc}

00082bb8 <SCPI_CoreOpc>:
/**
 * *OPC
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpc(scpi_t * context) {
   82bb8:	b508      	push	{r3, lr}
    SCPI_RegSetBits(context, SCPI_REG_ESR, ESR_OPC);
   82bba:	f04f 0102 	mov.w	r1, #2
   82bbe:	f04f 0201 	mov.w	r2, #1
   82bc2:	f642 2349 	movw	r3, #10825	; 0x2a49
   82bc6:	f2c0 0308 	movt	r3, #8
   82bca:	4798      	blx	r3
    return SCPI_RES_OK;
}
   82bcc:	f04f 0001 	mov.w	r0, #1
   82bd0:	bd08      	pop	{r3, pc}
   82bd2:	bf00      	nop

00082bd4 <SCPI_CoreOpcQ>:
/**
 * *OPC?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpcQ(scpi_t * context) {
   82bd4:	b508      	push	{r3, lr}
    /* Operation is always completed */
    SCPI_ResultInt(context, 1);
   82bd6:	f04f 0101 	mov.w	r1, #1
   82bda:	f243 13b9 	movw	r3, #12729	; 0x31b9
   82bde:	f2c0 0308 	movt	r3, #8
   82be2:	4798      	blx	r3
    return SCPI_RES_OK;
}
   82be4:	f04f 0001 	mov.w	r0, #1
   82be8:	bd08      	pop	{r3, pc}
   82bea:	bf00      	nop

00082bec <SCPI_CoreRst>:
/**
 * *RST
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreRst(scpi_t * context) {
   82bec:	b508      	push	{r3, lr}
    if (context && context->interface && context->interface->reset) {
   82bee:	b128      	cbz	r0, 82bfc <SCPI_CoreRst+0x10>
   82bf0:	69c3      	ldr	r3, [r0, #28]
   82bf2:	b133      	cbz	r3, 82c02 <SCPI_CoreRst+0x16>
   82bf4:	6919      	ldr	r1, [r3, #16]
   82bf6:	b139      	cbz	r1, 82c08 <SCPI_CoreRst+0x1c>
        return context->interface->reset(context);
   82bf8:	4788      	blx	r1
   82bfa:	e007      	b.n	82c0c <SCPI_CoreRst+0x20>
    }
    return SCPI_RES_OK;
   82bfc:	f04f 0001 	mov.w	r0, #1
   82c00:	e004      	b.n	82c0c <SCPI_CoreRst+0x20>
   82c02:	f04f 0001 	mov.w	r0, #1
   82c06:	e001      	b.n	82c0c <SCPI_CoreRst+0x20>
   82c08:	f04f 0001 	mov.w	r0, #1
}
   82c0c:	b240      	sxtb	r0, r0
   82c0e:	bd08      	pop	{r3, pc}

00082c10 <SCPI_CoreSre>:
/**
 * *SRE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSre(scpi_t * context) {
   82c10:	b510      	push	{r4, lr}
   82c12:	b082      	sub	sp, #8
   82c14:	4604      	mov	r4, r0
    int32_t new_SRE;
    if (SCPI_ParamInt(context, &new_SRE, TRUE)) {
   82c16:	a901      	add	r1, sp, #4
   82c18:	f04f 0201 	mov.w	r2, #1
   82c1c:	f243 23d1 	movw	r3, #13009	; 0x32d1
   82c20:	f2c0 0308 	movt	r3, #8
   82c24:	4798      	blx	r3
   82c26:	b148      	cbz	r0, 82c3c <SCPI_CoreSre+0x2c>
        SCPI_RegSet(context, SCPI_REG_SRE, new_SRE);
   82c28:	4620      	mov	r0, r4
   82c2a:	f04f 0101 	mov.w	r1, #1
   82c2e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   82c32:	f642 1335 	movw	r3, #10549	; 0x2935
   82c36:	f2c0 0308 	movt	r3, #8
   82c3a:	4798      	blx	r3
    }
    return SCPI_RES_OK;
}
   82c3c:	f04f 0001 	mov.w	r0, #1
   82c40:	b002      	add	sp, #8
   82c42:	bd10      	pop	{r4, pc}

00082c44 <SCPI_CoreSreQ>:
/**
 * *SRE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSreQ(scpi_t * context) {
   82c44:	b510      	push	{r4, lr}
   82c46:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_SRE));
   82c48:	f04f 0101 	mov.w	r1, #1
   82c4c:	f642 03bd 	movw	r3, #10429	; 0x28bd
   82c50:	f2c0 0308 	movt	r3, #8
   82c54:	4798      	blx	r3
   82c56:	4601      	mov	r1, r0
   82c58:	4620      	mov	r0, r4
   82c5a:	f243 12b9 	movw	r2, #12729	; 0x31b9
   82c5e:	f2c0 0208 	movt	r2, #8
   82c62:	4790      	blx	r2
    return SCPI_RES_OK;
}
   82c64:	f04f 0001 	mov.w	r0, #1
   82c68:	bd10      	pop	{r4, pc}
   82c6a:	bf00      	nop

00082c6c <SCPI_CoreStbQ>:
/**
 * *STB?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreStbQ(scpi_t * context) {
   82c6c:	b510      	push	{r4, lr}
   82c6e:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_STB));
   82c70:	f04f 0100 	mov.w	r1, #0
   82c74:	f642 03bd 	movw	r3, #10429	; 0x28bd
   82c78:	f2c0 0308 	movt	r3, #8
   82c7c:	4798      	blx	r3
   82c7e:	4601      	mov	r1, r0
   82c80:	4620      	mov	r0, r4
   82c82:	f243 12b9 	movw	r2, #12729	; 0x31b9
   82c86:	f2c0 0208 	movt	r2, #8
   82c8a:	4790      	blx	r2
    return SCPI_RES_OK;
}
   82c8c:	f04f 0001 	mov.w	r0, #1
   82c90:	bd10      	pop	{r4, pc}
   82c92:	bf00      	nop

00082c94 <SCPI_CoreTstQ>:
/**
 * *TST?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreTstQ(scpi_t * context) {
   82c94:	b510      	push	{r4, lr}
    int result = 0;
    if (context && context->interface && context->interface->test) {
   82c96:	4604      	mov	r4, r0
   82c98:	b130      	cbz	r0, 82ca8 <SCPI_CoreTstQ+0x14>
   82c9a:	69c3      	ldr	r3, [r0, #28]
   82c9c:	b13b      	cbz	r3, 82cae <SCPI_CoreTstQ+0x1a>
   82c9e:	6959      	ldr	r1, [r3, #20]
   82ca0:	b141      	cbz	r1, 82cb4 <SCPI_CoreTstQ+0x20>
        result = context->interface->test(context);
   82ca2:	4788      	blx	r1
   82ca4:	4601      	mov	r1, r0
   82ca6:	e007      	b.n	82cb8 <SCPI_CoreTstQ+0x24>
 * *TST?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreTstQ(scpi_t * context) {
    int result = 0;
   82ca8:	f04f 0100 	mov.w	r1, #0
   82cac:	e004      	b.n	82cb8 <SCPI_CoreTstQ+0x24>
   82cae:	f04f 0100 	mov.w	r1, #0
   82cb2:	e001      	b.n	82cb8 <SCPI_CoreTstQ+0x24>
   82cb4:	f04f 0100 	mov.w	r1, #0
    if (context && context->interface && context->interface->test) {
        result = context->interface->test(context);
    }
    SCPI_ResultInt(context, result);
   82cb8:	4620      	mov	r0, r4
   82cba:	f243 12b9 	movw	r2, #12729	; 0x31b9
   82cbe:	f2c0 0208 	movt	r2, #8
   82cc2:	4790      	blx	r2
    return SCPI_RES_OK;
}
   82cc4:	f04f 0001 	mov.w	r0, #1
   82cc8:	bd10      	pop	{r4, pc}
   82cca:	bf00      	nop

00082ccc <SCPI_CoreWai>:
 */
scpi_result_t SCPI_CoreWai(scpi_t * context) {
    (void) context;
    /* NOP */
    return SCPI_RES_OK;
}
   82ccc:	f04f 0001 	mov.w	r0, #1
   82cd0:	4770      	bx	lr
   82cd2:	bf00      	nop

00082cd4 <SCPI_StubQ>:
/**
 * Query command stub function
 * @param context
 * @return 
 */
scpi_result_t SCPI_StubQ(scpi_t * context) {
   82cd4:	b508      	push	{r3, lr}
    SCPI_ResultString(context, "");
   82cd6:	f64c 31cc 	movw	r1, #52172	; 0xcbcc
   82cda:	f2c0 0108 	movt	r1, #8
   82cde:	f243 1379 	movw	r3, #12665	; 0x3179
   82ce2:	f2c0 0308 	movt	r3, #8
   82ce6:	4798      	blx	r3
    return SCPI_RES_OK;
}
   82ce8:	f04f 0001 	mov.w	r0, #1
   82cec:	bd08      	pop	{r3, pc}
   82cee:	bf00      	nop

00082cf0 <SCPI_SystemVersionQ>:
/**
 * SYSTem:VERSion?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemVersionQ(scpi_t * context) {
   82cf0:	b508      	push	{r3, lr}
    SCPI_ResultString(context, SCPI_DEV_VERSION);
   82cf2:	f64c 0198 	movw	r1, #51352	; 0xc898
   82cf6:	f2c0 0108 	movt	r1, #8
   82cfa:	f243 1379 	movw	r3, #12665	; 0x3179
   82cfe:	f2c0 0308 	movt	r3, #8
   82d02:	4798      	blx	r3
    return SCPI_RES_OK;
}
   82d04:	f04f 0001 	mov.w	r0, #1
   82d08:	bd08      	pop	{r3, pc}
   82d0a:	bf00      	nop

00082d0c <SCPI_SystemErrorNextQ>:
/**
 * SYSTem:ERRor[:NEXT]?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemErrorNextQ(scpi_t * context) {
   82d0c:	b538      	push	{r3, r4, r5, lr}
   82d0e:	4604      	mov	r4, r0
    int16_t err = SCPI_ErrorPop(context);
   82d10:	f242 53dd 	movw	r3, #9693	; 0x25dd
   82d14:	f2c0 0308 	movt	r3, #8
   82d18:	4798      	blx	r3
   82d1a:	4605      	mov	r5, r0

    SCPI_ResultInt(context, err);
   82d1c:	4620      	mov	r0, r4
   82d1e:	4629      	mov	r1, r5
   82d20:	f243 12b9 	movw	r2, #12729	; 0x31b9
   82d24:	f2c0 0208 	movt	r2, #8
   82d28:	4790      	blx	r2
    SCPI_ResultText(context, SCPI_ErrorTranslate(err));
   82d2a:	4628      	mov	r0, r5
   82d2c:	f242 7151 	movw	r1, #10065	; 0x2751
   82d30:	f2c0 0108 	movt	r1, #8
   82d34:	4788      	blx	r1
   82d36:	4601      	mov	r1, r0
   82d38:	4620      	mov	r0, r4
   82d3a:	f243 2301 	movw	r3, #12801	; 0x3201
   82d3e:	f2c0 0308 	movt	r3, #8
   82d42:	4798      	blx	r3

    return SCPI_RES_OK;
}
   82d44:	f04f 0001 	mov.w	r0, #1
   82d48:	bd38      	pop	{r3, r4, r5, pc}
   82d4a:	bf00      	nop

00082d4c <SCPI_SystemErrorCountQ>:
/**
 * SYSTem:ERRor:COUNt?
 * @param context
 * @return 
 */
scpi_result_t SCPI_SystemErrorCountQ(scpi_t * context) {
   82d4c:	b510      	push	{r4, lr}
   82d4e:	4604      	mov	r4, r0
    SCPI_ResultInt(context, SCPI_ErrorCount(context));
   82d50:	f242 6301 	movw	r3, #9729	; 0x2601
   82d54:	f2c0 0308 	movt	r3, #8
   82d58:	4798      	blx	r3
   82d5a:	4601      	mov	r1, r0
   82d5c:	4620      	mov	r0, r4
   82d5e:	f243 12b9 	movw	r2, #12729	; 0x31b9
   82d62:	f2c0 0208 	movt	r2, #8
   82d66:	4790      	blx	r2

    return SCPI_RES_OK;
}
   82d68:	f04f 0001 	mov.w	r0, #1
   82d6c:	bd10      	pop	{r4, pc}
   82d6e:	bf00      	nop

00082d70 <SCPI_StatusQuestionableEventQ>:
/**
 * STATus:QUEStionable[:EVENt]?
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusQuestionableEventQ(scpi_t * context) {
   82d70:	b510      	push	{r4, lr}
   82d72:	4604      	mov	r4, r0
    /* return value */
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_QUES));
   82d74:	f04f 0106 	mov.w	r1, #6
   82d78:	f642 03bd 	movw	r3, #10429	; 0x28bd
   82d7c:	f2c0 0308 	movt	r3, #8
   82d80:	4798      	blx	r3
   82d82:	4601      	mov	r1, r0
   82d84:	4620      	mov	r0, r4
   82d86:	f243 12b9 	movw	r2, #12729	; 0x31b9
   82d8a:	f2c0 0208 	movt	r2, #8
   82d8e:	4790      	blx	r2

    /* clear register */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
   82d90:	4620      	mov	r0, r4
   82d92:	f04f 0106 	mov.w	r1, #6
   82d96:	f04f 0200 	mov.w	r2, #0
   82d9a:	f642 1335 	movw	r3, #10549	; 0x2935
   82d9e:	f2c0 0308 	movt	r3, #8
   82da2:	4798      	blx	r3

    return SCPI_RES_OK;
}
   82da4:	f04f 0001 	mov.w	r0, #1
   82da8:	bd10      	pop	{r4, pc}
   82daa:	bf00      	nop

00082dac <SCPI_StatusQuestionableEnableQ>:
/**
 * STATus:QUEStionable:ENABle?
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusQuestionableEnableQ(scpi_t * context) {
   82dac:	b510      	push	{r4, lr}
   82dae:	4604      	mov	r4, r0
    /* return value */
    SCPI_ResultInt(context, SCPI_RegGet(context, SCPI_REG_QUESE));
   82db0:	f04f 0107 	mov.w	r1, #7
   82db4:	f642 03bd 	movw	r3, #10429	; 0x28bd
   82db8:	f2c0 0308 	movt	r3, #8
   82dbc:	4798      	blx	r3
   82dbe:	4601      	mov	r1, r0
   82dc0:	4620      	mov	r0, r4
   82dc2:	f243 12b9 	movw	r2, #12729	; 0x31b9
   82dc6:	f2c0 0208 	movt	r2, #8
   82dca:	4790      	blx	r2

    return SCPI_RES_OK;
}
   82dcc:	f04f 0001 	mov.w	r0, #1
   82dd0:	bd10      	pop	{r4, pc}
   82dd2:	bf00      	nop

00082dd4 <SCPI_StatusQuestionableEnable>:
/**
 * STATus:QUEStionable:ENABle
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusQuestionableEnable(scpi_t * context) {
   82dd4:	b510      	push	{r4, lr}
   82dd6:	b082      	sub	sp, #8
   82dd8:	4604      	mov	r4, r0
    int32_t new_QUESE;
    if (SCPI_ParamInt(context, &new_QUESE, TRUE)) {
   82dda:	a901      	add	r1, sp, #4
   82ddc:	f04f 0201 	mov.w	r2, #1
   82de0:	f243 23d1 	movw	r3, #13009	; 0x32d1
   82de4:	f2c0 0308 	movt	r3, #8
   82de8:	4798      	blx	r3
   82dea:	b148      	cbz	r0, 82e00 <SCPI_StatusQuestionableEnable+0x2c>
        SCPI_RegSet(context, SCPI_REG_QUESE, new_QUESE);
   82dec:	4620      	mov	r0, r4
   82dee:	f04f 0107 	mov.w	r1, #7
   82df2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   82df6:	f642 1335 	movw	r3, #10549	; 0x2935
   82dfa:	f2c0 0308 	movt	r3, #8
   82dfe:	4798      	blx	r3
    }
    return SCPI_RES_OK;
}
   82e00:	f04f 0001 	mov.w	r0, #1
   82e04:	b002      	add	sp, #8
   82e06:	bd10      	pop	{r4, pc}

00082e08 <SCPI_StatusPreset>:
/**
 * STATus:PRESet
 * @param context
 * @return 
 */
scpi_result_t SCPI_StatusPreset(scpi_t * context) {
   82e08:	b508      	push	{r3, lr}
    /* clear STATUS:... */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
   82e0a:	f04f 0106 	mov.w	r1, #6
   82e0e:	f04f 0200 	mov.w	r2, #0
   82e12:	f642 1335 	movw	r3, #10549	; 0x2935
   82e16:	f2c0 0308 	movt	r3, #8
   82e1a:	4798      	blx	r3
    return SCPI_RES_OK;
}
   82e1c:	f04f 0001 	mov.w	r0, #1
   82e20:	bd08      	pop	{r3, pc}
   82e22:	bf00      	nop

00082e24 <writeData>:
 * @param context
 * @param data
 * @param len - lenght of data to be written
 * @return number of bytes written
 */
static size_t writeData(scpi_t * context, const char * data, size_t len) {
   82e24:	b508      	push	{r3, lr}
    return context->interface->write(context, data, len);
   82e26:	69c3      	ldr	r3, [r0, #28]
   82e28:	685b      	ldr	r3, [r3, #4]
   82e2a:	4798      	blx	r3
}
   82e2c:	bd08      	pop	{r3, pc}
   82e2e:	bf00      	nop

00082e30 <writeDelimiter>:
/**
 * Write result delimiter to output
 * @param context
 * @return number of bytes written
 */
static size_t writeDelimiter(scpi_t * context) {
   82e30:	b508      	push	{r3, lr}
    if (context->output_count > 0) {
   82e32:	6a03      	ldr	r3, [r0, #32]
   82e34:	2b00      	cmp	r3, #0
   82e36:	dd0b      	ble.n	82e50 <writeDelimiter+0x20>
        return writeData(context, ", ", 2);
   82e38:	f64c 01a0 	movw	r1, #51360	; 0xc8a0
   82e3c:	f2c0 0108 	movt	r1, #8
   82e40:	f04f 0202 	mov.w	r2, #2
   82e44:	f642 6325 	movw	r3, #11813	; 0x2e25
   82e48:	f2c0 0308 	movt	r3, #8
   82e4c:	4798      	blx	r3
   82e4e:	bd08      	pop	{r3, pc}
    } else {
        return 0;
   82e50:	f04f 0000 	mov.w	r0, #0
    }
}
   82e54:	bd08      	pop	{r3, pc}
   82e56:	bf00      	nop

00082e58 <paramSkipBytes>:
 * Skip num bytes from the begginig of parameters
 * @param context
 * @param num
 */
void paramSkipBytes(scpi_t * context, size_t num) {
    if (context->paramlist.length < num) {
   82e58:	6983      	ldr	r3, [r0, #24]
   82e5a:	4299      	cmp	r1, r3
   82e5c:	bf28      	it	cs
   82e5e:	4619      	movcs	r1, r3
        num = context->paramlist.length;
    }
    context->paramlist.parameters += num;
   82e60:	6942      	ldr	r2, [r0, #20]
   82e62:	1852      	adds	r2, r2, r1
   82e64:	6142      	str	r2, [r0, #20]
    context->paramlist.length -= num;
   82e66:	1a59      	subs	r1, r3, r1
   82e68:	6181      	str	r1, [r0, #24]
   82e6a:	4770      	bx	lr

00082e6c <paramSkipWhitespace>:

/**
 * Skip white spaces from the beggining of parameters
 * @param context
 */
void paramSkipWhitespace(scpi_t * context) {
   82e6c:	b510      	push	{r4, lr}
   82e6e:	4604      	mov	r4, r0
    size_t ws = skipWhitespace(context->paramlist.parameters, context->paramlist.length);
   82e70:	6940      	ldr	r0, [r0, #20]
   82e72:	69a1      	ldr	r1, [r4, #24]
   82e74:	f243 63b9 	movw	r3, #14009	; 0x36b9
   82e78:	f2c0 0308 	movt	r3, #8
   82e7c:	4798      	blx	r3
   82e7e:	4601      	mov	r1, r0
    paramSkipBytes(context, ws);
   82e80:	4620      	mov	r0, r4
   82e82:	f642 6259 	movw	r2, #11865	; 0x2e59
   82e86:	f2c0 0208 	movt	r2, #8
   82e8a:	4790      	blx	r2
   82e8c:	bd10      	pop	{r4, pc}
   82e8e:	bf00      	nop

00082e90 <paramNext>:
 * Find next parameter
 * @param context
 * @param mandatory
 * @return 
 */
bool_t paramNext(scpi_t * context, bool_t mandatory) {
   82e90:	b538      	push	{r3, r4, r5, lr}
   82e92:	4604      	mov	r4, r0
   82e94:	460d      	mov	r5, r1
    paramSkipWhitespace(context);
   82e96:	f642 636d 	movw	r3, #11885	; 0x2e6d
   82e9a:	f2c0 0308 	movt	r3, #8
   82e9e:	4798      	blx	r3
    if (context->paramlist.length == 0) {
   82ea0:	69a0      	ldr	r0, [r4, #24]
   82ea2:	b960      	cbnz	r0, 82ebe <paramNext+0x2e>
        if (mandatory) {
   82ea4:	2d00      	cmp	r5, #0
   82ea6:	d031      	beq.n	82f0c <paramNext+0x7c>
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
   82ea8:	4620      	mov	r0, r4
   82eaa:	f06f 016c 	mvn.w	r1, #108	; 0x6c
   82eae:	f242 6225 	movw	r2, #9765	; 0x2625
   82eb2:	f2c0 0208 	movt	r2, #8
   82eb6:	4790      	blx	r2
        }
        return FALSE;
   82eb8:	f04f 0000 	mov.w	r0, #0
   82ebc:	bd38      	pop	{r3, r4, r5, pc}
    }
    if (context->input_count != 0) {
   82ebe:	6a61      	ldr	r1, [r4, #36]	; 0x24
   82ec0:	b1e9      	cbz	r1, 82efe <paramNext+0x6e>
        if (context->paramlist.parameters[0] == ',') {
   82ec2:	6962      	ldr	r2, [r4, #20]
   82ec4:	7813      	ldrb	r3, [r2, #0]
   82ec6:	2b2c      	cmp	r3, #44	; 0x2c
   82ec8:	d10e      	bne.n	82ee8 <paramNext+0x58>
            paramSkipBytes(context, 1);
   82eca:	4620      	mov	r0, r4
   82ecc:	f04f 0101 	mov.w	r1, #1
   82ed0:	f642 6359 	movw	r3, #11865	; 0x2e59
   82ed4:	f2c0 0308 	movt	r3, #8
   82ed8:	4798      	blx	r3
            paramSkipWhitespace(context);
   82eda:	4620      	mov	r0, r4
   82edc:	f642 616d 	movw	r1, #11885	; 0x2e6d
   82ee0:	f2c0 0108 	movt	r1, #8
   82ee4:	4788      	blx	r1
   82ee6:	e00a      	b.n	82efe <paramNext+0x6e>
        } else {
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SEPARATOR);
   82ee8:	4620      	mov	r0, r4
   82eea:	f06f 0166 	mvn.w	r1, #102	; 0x66
   82eee:	f242 6225 	movw	r2, #9765	; 0x2625
   82ef2:	f2c0 0208 	movt	r2, #8
   82ef6:	4790      	blx	r2
            return FALSE;
   82ef8:	f04f 0000 	mov.w	r0, #0
   82efc:	bd38      	pop	{r3, r4, r5, pc}
        }
    }
    context->input_count++;
   82efe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   82f00:	f100 0001 	add.w	r0, r0, #1
   82f04:	6260      	str	r0, [r4, #36]	; 0x24
    return TRUE;
   82f06:	f04f 0001 	mov.w	r0, #1
   82f0a:	bd38      	pop	{r3, r4, r5, pc}
    paramSkipWhitespace(context);
    if (context->paramlist.length == 0) {
        if (mandatory) {
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
        }
        return FALSE;
   82f0c:	f04f 0000 	mov.w	r0, #0
            return FALSE;
        }
    }
    context->input_count++;
    return TRUE;
}
   82f10:	bd38      	pop	{r3, r4, r5, pc}
   82f12:	bf00      	nop

00082f14 <cmdlineSeparator>:
 * Find command line separator
 * @param cmd - input command
 * @param len - max search length
 * @return pointer to line separator or NULL
 */
const char * cmdlineSeparator(const char * cmd, size_t len) {
   82f14:	b508      	push	{r3, lr}
    return strnpbrk(cmd, len, ";\r\n");
   82f16:	f64c 02a4 	movw	r2, #51364	; 0xc8a4
   82f1a:	f2c0 0208 	movt	r2, #8
   82f1e:	f243 3349 	movw	r3, #13129	; 0x3349
   82f22:	f2c0 0308 	movt	r3, #8
   82f26:	4798      	blx	r3
}
   82f28:	bd08      	pop	{r3, pc}
   82f2a:	bf00      	nop

00082f2c <SCPI_Parse>:
 * @param context
 * @param data - complete command line
 * @param len - command line length
 * @return 1 if the last evaluated command was found
 */
int SCPI_Parse(scpi_t * context, const char * data, size_t len) {
   82f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82f30:	b083      	sub	sp, #12
    int result = 0;
    const char * cmdline_end = data + len;
   82f32:	eb01 0b02 	add.w	fp, r1, r2
    const char * cmdline_ptr = data;
    size_t cmd_len;
    size_t cmdline_len;

    if (context == NULL) {
   82f36:	4607      	mov	r7, r0
   82f38:	2800      	cmp	r0, #0
   82f3a:	f000 809e 	beq.w	8307a <SCPI_Parse+0x14e>
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
   82f3e:	4559      	cmp	r1, fp
   82f40:	f080 809e 	bcs.w	83080 <SCPI_Parse+0x154>
   82f44:	460d      	mov	r5, r1
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
            } else {
                SCPI_ErrorPush(context, SCPI_ERROR_UNDEFINED_HEADER);
   82f46:	f242 6325 	movw	r3, #9765	; 0x2625
   82f4a:	f2c0 0308 	movt	r3, #8
   82f4e:	9301      	str	r3, [sp, #4]
    }

	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
   82f50:	462c      	mov	r4, r5
   82f52:	ebc5 080b 	rsb	r8, r5, fp
 * @param cmd - input command
 * @param len - max search length
 * @return position of terminator or len
 */
size_t cmdTerminatorPos(const char * cmd, size_t len) {
    const char * terminator = strnpbrk(cmd, len, "; \r\n\t");
   82f56:	4628      	mov	r0, r5
   82f58:	4641      	mov	r1, r8
   82f5a:	4a51      	ldr	r2, [pc, #324]	; (830a0 <SCPI_Parse+0x174>)
   82f5c:	f243 3649 	movw	r6, #13129	; 0x3349
   82f60:	f2c0 0608 	movt	r6, #8
   82f64:	47b0      	blx	r6
    if (terminator == NULL) {
   82f66:	b108      	cbz	r0, 82f6c <SCPI_Parse+0x40>
        return len;
    } else {
        return terminator - cmd;
   82f68:	1b46      	subs	r6, r0, r5
   82f6a:	e000      	b.n	82f6e <SCPI_Parse+0x42>
 * @return position of terminator or len
 */
size_t cmdTerminatorPos(const char * cmd, size_t len) {
    const char * terminator = strnpbrk(cmd, len, "; \r\n\t");
    if (terminator == NULL) {
        return len;
   82f6c:	4646      	mov	r6, r8
 * @param cmd - input command
 * @param len - max search length
 * @return position of line separator or len
 */
size_t cmdlineSeparatorPos(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
   82f6e:	4628      	mov	r0, r5
   82f70:	4641      	mov	r1, r8
   82f72:	f642 7215 	movw	r2, #12053	; 0x2f15
   82f76:	f2c0 0208 	movt	r2, #8
   82f7a:	4790      	blx	r2
    if (separator == NULL) {
   82f7c:	b110      	cbz	r0, 82f84 <SCPI_Parse+0x58>
        return len;
    } else {
        return separator - cmd;
   82f7e:	1b00      	subs	r0, r0, r4
   82f80:	9000      	str	r0, [sp, #0]
   82f82:	e001      	b.n	82f88 <SCPI_Parse+0x5c>
 * @return position of line separator or len
 */
size_t cmdlineSeparatorPos(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
    if (separator == NULL) {
        return len;
   82f84:	f8cd 8000 	str.w	r8, [sp]
	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        if (cmd_len > 0) {
   82f88:	2e00      	cmp	r6, #0
   82f8a:	d05f      	beq.n	8304c <SCPI_Parse+0x120>
 */
static bool_t findCommand(scpi_t * context, const char * cmdline_ptr, size_t cmdline_len, size_t cmd_len) {
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
   82f8c:	f8d7 9000 	ldr.w	r9, [r7]
   82f90:	f8d9 0000 	ldr.w	r0, [r9]
   82f94:	2800      	cmp	r0, #0
   82f96:	d076      	beq.n	83086 <SCPI_Parse+0x15a>
   82f98:	f04f 0408 	mov.w	r4, #8
        cmd = &context->cmdlist[i];
        if (matchCommand(cmd->pattern, cmdline_ptr, cmd_len)) {
   82f9c:	f643 0a0d 	movw	sl, #14349	; 0x380d
   82fa0:	f2c0 0a08 	movt	sl, #8
   82fa4:	4629      	mov	r1, r5
   82fa6:	4632      	mov	r2, r6
   82fa8:	47d0      	blx	sl
   82faa:	b190      	cbz	r0, 82fd2 <SCPI_Parse+0xa6>
            context->paramlist.cmd = cmd;
   82fac:	f8c7 9010 	str.w	r9, [r7, #16]
            context->paramlist.parameters = cmdline_ptr + cmd_len;
   82fb0:	19ab      	adds	r3, r5, r6
   82fb2:	617b      	str	r3, [r7, #20]
            context->paramlist.length = cmdline_len - cmd_len;
   82fb4:	9800      	ldr	r0, [sp, #0]
   82fb6:	1b86      	subs	r6, r0, r6
   82fb8:	61be      	str	r6, [r7, #24]
 * @param context
 */
static void processCommand(scpi_t * context) {
    const scpi_command_t * cmd = context->paramlist.cmd;

    context->cmd_error = FALSE;
   82fba:	f04f 0400 	mov.w	r4, #0
   82fbe:	f887 4028 	strb.w	r4, [r7, #40]	; 0x28
    context->output_count = 0;
   82fc2:	f04f 0100 	mov.w	r1, #0
   82fc6:	6239      	str	r1, [r7, #32]
    context->input_count = 0;
   82fc8:	6279      	str	r1, [r7, #36]	; 0x24

    SCPI_DEBUG_COMMAND(context);
    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
   82fca:	f8d9 2004 	ldr.w	r2, [r9, #4]
   82fce:	b94a      	cbnz	r2, 82fe4 <SCPI_Parse+0xb8>
   82fd0:	e014      	b.n	82ffc <SCPI_Parse+0xd0>
 */
static bool_t findCommand(scpi_t * context, const char * cmdline_ptr, size_t cmdline_len, size_t cmd_len) {
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
   82fd2:	6839      	ldr	r1, [r7, #0]
   82fd4:	eb01 0904 	add.w	r9, r1, r4
   82fd8:	5908      	ldr	r0, [r1, r4]
   82fda:	f104 0408 	add.w	r4, r4, #8
   82fde:	2800      	cmp	r0, #0
   82fe0:	d1e0      	bne.n	82fa4 <SCPI_Parse+0x78>
   82fe2:	e050      	b.n	83086 <SCPI_Parse+0x15a>
    context->input_count = 0;

    SCPI_DEBUG_COMMAND(context);
    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
        if ((cmd->callback(context) != SCPI_RES_OK) && !context->cmd_error) {
   82fe4:	4638      	mov	r0, r7
   82fe6:	4790      	blx	r2
   82fe8:	2801      	cmp	r0, #1
   82fea:	d007      	beq.n	82ffc <SCPI_Parse+0xd0>
   82fec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   82ff0:	b923      	cbnz	r3, 82ffc <SCPI_Parse+0xd0>
            SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
   82ff2:	4638      	mov	r0, r7
   82ff4:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
   82ff8:	9c01      	ldr	r4, [sp, #4]
   82ffa:	47a0      	blx	r4
 * Conditionaly write "New Line"
 * @param context
 * @return number of characters written
 */
static size_t writeNewLine(scpi_t * context) {
    if (context->output_count > 0) {
   82ffc:	6a38      	ldr	r0, [r7, #32]
   82ffe:	2800      	cmp	r0, #0
   83000:	dd11      	ble.n	83026 <SCPI_Parse+0xfa>
        size_t len;
        len = writeData(context, "\r\n", 2);
   83002:	4638      	mov	r0, r7
   83004:	f64c 31b0 	movw	r1, #52144	; 0xcbb0
   83008:	f2c0 0108 	movt	r1, #8
   8300c:	f04f 0202 	mov.w	r2, #2
   83010:	f642 6325 	movw	r3, #11813	; 0x2e25
   83014:	f2c0 0308 	movt	r3, #8
   83018:	4798      	blx	r3
 * Flush data to SCPI output
 * @param context
 * @return
 */
static int flushData(scpi_t * context) {
    if (context && context->interface && context->interface->flush) {
   8301a:	69f9      	ldr	r1, [r7, #28]
   8301c:	b119      	cbz	r1, 83026 <SCPI_Parse+0xfa>
   8301e:	68ca      	ldr	r2, [r1, #12]
   83020:	b10a      	cbz	r2, 83026 <SCPI_Parse+0xfa>
        return context->interface->flush(context);
   83022:	4638      	mov	r0, r7
   83024:	4790      	blx	r2

    /* conditionaly write new line */
    writeNewLine(context);

    /* skip all whitespaces */
    paramSkipWhitespace(context);
   83026:	4638      	mov	r0, r7
   83028:	f642 646d 	movw	r4, #11885	; 0x2e6d
   8302c:	f2c0 0408 	movt	r4, #8
   83030:	47a0      	blx	r4

    /* set error if command callback did not read all parameters */
    if (context->paramlist.length != 0 && !context->cmd_error) {
   83032:	69b8      	ldr	r0, [r7, #24]
   83034:	b168      	cbz	r0, 83052 <SCPI_Parse+0x126>
   83036:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   8303a:	b96b      	cbnz	r3, 83058 <SCPI_Parse+0x12c>
        SCPI_ErrorPush(context, SCPI_ERROR_PARAMETER_NOT_ALLOWED);
   8303c:	4638      	mov	r0, r7
   8303e:	f06f 016b 	mvn.w	r1, #107	; 0x6b
   83042:	9a01      	ldr	r2, [sp, #4]
   83044:	4790      	blx	r2
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
   83046:	f04f 0401 	mov.w	r4, #1
   8304a:	e007      	b.n	8305c <SCPI_Parse+0x130>
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
   8304c:	f04f 0400 	mov.w	r4, #0
   83050:	e004      	b.n	8305c <SCPI_Parse+0x130>
        cmd_len = cmdTerminatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        cmdline_len = cmdlineSeparatorPos(cmdline_ptr, cmdline_end - cmdline_ptr);
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
   83052:	f04f 0401 	mov.w	r4, #1
   83056:	e001      	b.n	8305c <SCPI_Parse+0x130>
   83058:	f04f 0401 	mov.w	r4, #1
 * @param cmd - input command
 * @param len - max search length
 * @return Pointer to next part of command
 */
const char * cmdlineNext(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
   8305c:	4628      	mov	r0, r5
   8305e:	4641      	mov	r1, r8
   83060:	f642 7315 	movw	r3, #12053	; 0x2f15
   83064:	f2c0 0308 	movt	r3, #8
   83068:	4798      	blx	r3
    if (separator == NULL) {
        return cmd + len;
   8306a:	4445      	add	r5, r8
 * @param len - max search length
 * @return Pointer to next part of command
 */
const char * cmdlineNext(const char * cmd, size_t len) {
    const char * separator = cmdlineSeparator(cmd, len);
    if (separator == NULL) {
   8306c:	b108      	cbz	r0, 83072 <SCPI_Parse+0x146>
        return cmd + len;
    } else {
        return separator + 1;
   8306e:	f100 0501 	add.w	r5, r0, #1
    if (context == NULL) {
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
   83072:	45ab      	cmp	fp, r5
   83074:	f63f af6c 	bhi.w	82f50 <SCPI_Parse+0x24>
   83078:	e00d      	b.n	83096 <SCPI_Parse+0x16a>
    const char * cmdline_ptr = data;
    size_t cmd_len;
    size_t cmdline_len;

    if (context == NULL) {
        return -1;
   8307a:	f04f 34ff 	mov.w	r4, #4294967295
   8307e:	e00a      	b.n	83096 <SCPI_Parse+0x16a>
    }

	
    while (cmdline_ptr < cmdline_end) {
   83080:	f04f 0400 	mov.w	r4, #0
   83084:	e007      	b.n	83096 <SCPI_Parse+0x16a>
        if (cmd_len > 0) {
            if(findCommand(context, cmdline_ptr, cmdline_len, cmd_len)) {
                processCommand(context);
                result = 1;
            } else {
                SCPI_ErrorPush(context, SCPI_ERROR_UNDEFINED_HEADER);
   83086:	4638      	mov	r0, r7
   83088:	f06f 0170 	mvn.w	r1, #112	; 0x70
   8308c:	9a01      	ldr	r2, [sp, #4]
   8308e:	4790      	blx	r2
        return -1;
    }

	
    while (cmdline_ptr < cmdline_end) {
        result = 0;
   83090:	f04f 0400 	mov.w	r4, #0
   83094:	e7e2      	b.n	8305c <SCPI_Parse+0x130>
            }
        }
        cmdline_ptr = cmdlineNext(cmdline_ptr, cmdline_end - cmdline_ptr);
    }
    return result;
}
   83096:	4620      	mov	r0, r4
   83098:	b003      	add	sp, #12
   8309a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8309e:	bf00      	nop
   830a0:	0008c8a8 	.word	0x0008c8a8

000830a4 <SCPI_Init>:
 * @param context
 * @param command_list
 * @param buffer
 * @param interface
 */
void SCPI_Init(scpi_t * context) {
   830a4:	b508      	push	{r3, lr}
    context->buffer.position = 0;
   830a6:	f04f 0200 	mov.w	r2, #0
   830aa:	6082      	str	r2, [r0, #8]
    SCPI_ErrorInit(context);
   830ac:	f242 51b1 	movw	r1, #9649	; 0x25b1
   830b0:	f2c0 0108 	movt	r1, #8
   830b4:	4788      	blx	r1
   830b6:	bd08      	pop	{r3, pc}

000830b8 <SCPI_Input>:
 * @param context
 * @param data - data to process
 * @param len - length of data
 * @return 
 */
int SCPI_Input(scpi_t * context, const char * data, size_t len) {
   830b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   830ba:	4604      	mov	r4, r0
    int result = 0;
    const char * cmd_term;
	if (len == 0) {
   830bc:	4615      	mov	r5, r2
   830be:	b972      	cbnz	r2, 830de <SCPI_Input+0x26>
        context->buffer.data[context->buffer.position] = 0;
   830c0:	68c1      	ldr	r1, [r0, #12]
   830c2:	6882      	ldr	r2, [r0, #8]
   830c4:	f04f 0600 	mov.w	r6, #0
   830c8:	548e      	strb	r6, [r1, r2]
        result = SCPI_Parse(context, context->buffer.data, context->buffer.position);
   830ca:	68e1      	ldr	r1, [r4, #12]
   830cc:	68a2      	ldr	r2, [r4, #8]
   830ce:	f642 752d 	movw	r5, #12077	; 0x2f2d
   830d2:	f2c0 0508 	movt	r5, #8
   830d6:	47a8      	blx	r5
   830d8:	4605      	mov	r5, r0
        context->buffer.position = 0;
   830da:	60a6      	str	r6, [r4, #8]
   830dc:	e049      	b.n	83172 <SCPI_Input+0xba>
    } else {
        size_t buffer_free;
        int ws;
        buffer_free = context->buffer.length - context->buffer.position;
   830de:	6883      	ldr	r3, [r0, #8]
   830e0:	6842      	ldr	r2, [r0, #4]
   830e2:	f102 30ff 	add.w	r0, r2, #4294967295
        if (len > (buffer_free - 1)) {
   830e6:	1ac2      	subs	r2, r0, r3
   830e8:	4295      	cmp	r5, r2
   830ea:	d83d      	bhi.n	83168 <SCPI_Input+0xb0>
            return -1;
        }
        memcpy(&context->buffer.data[context->buffer.position], data, len);
   830ec:	68e7      	ldr	r7, [r4, #12]
   830ee:	18f8      	adds	r0, r7, r3
   830f0:	462a      	mov	r2, r5
   830f2:	f649 639d 	movw	r3, #40605	; 0x9e9d
   830f6:	f2c0 0308 	movt	r3, #8
   830fa:	4798      	blx	r3
        context->buffer.position += len;
   830fc:	68a1      	ldr	r1, [r4, #8]
   830fe:	186d      	adds	r5, r5, r1
   83100:	60a5      	str	r5, [r4, #8]
        context->buffer.data[context->buffer.position] = 0;
   83102:	68e0      	ldr	r0, [r4, #12]
   83104:	f04f 0200 	mov.w	r2, #0
   83108:	5542      	strb	r2, [r0, r5]

        ws = skipWhitespace(context->buffer.data, context->buffer.position);
   8310a:	68e0      	ldr	r0, [r4, #12]
   8310c:	68a1      	ldr	r1, [r4, #8]
   8310e:	f243 67b9 	movw	r7, #14009	; 0x36b9
   83112:	f2c0 0708 	movt	r7, #8
   83116:	47b8      	blx	r7
   83118:	4605      	mov	r5, r0
        cmd_term = cmdlineTerminator(context->buffer.data + ws, context->buffer.position - ws);
   8311a:	68e3      	ldr	r3, [r4, #12]
   8311c:	68a1      	ldr	r1, [r4, #8]
 * @param cmd - input command
 * @param len - max search length
 * @return pointer to command line terminator or NULL
 */
const char * cmdlineTerminator(const char * cmd, size_t len) {
    return strnpbrk(cmd, len, "\r\n");
   8311e:	1818      	adds	r0, r3, r0
   83120:	1b49      	subs	r1, r1, r5
   83122:	f64c 32b0 	movw	r2, #52144	; 0xcbb0
   83126:	f2c0 0208 	movt	r2, #8
   8312a:	f243 3749 	movw	r7, #13129	; 0x3349
   8312e:	f2c0 0708 	movt	r7, #8
   83132:	47b8      	blx	r7
        context->buffer.position += len;
        context->buffer.data[context->buffer.position] = 0;

        ws = skipWhitespace(context->buffer.data, context->buffer.position);
        cmd_term = cmdlineTerminator(context->buffer.data + ws, context->buffer.position - ws);
        if (cmd_term != NULL) {
   83134:	4607      	mov	r7, r0
   83136:	b1d0      	cbz	r0, 8316e <SCPI_Input+0xb6>
            int curr_len = cmd_term - context->buffer.data;
   83138:	68e2      	ldr	r2, [r4, #12]
   8313a:	1a86      	subs	r6, r0, r2
            result = SCPI_Parse(context, context->buffer.data + ws, curr_len - ws);
   8313c:	4620      	mov	r0, r4
   8313e:	1951      	adds	r1, r2, r5
   83140:	1b72      	subs	r2, r6, r5
   83142:	f642 752d 	movw	r5, #12077	; 0x2f2d
   83146:	f2c0 0508 	movt	r5, #8
   8314a:	47a8      	blx	r5
   8314c:	4605      	mov	r5, r0
            memmove(context->buffer.data, cmd_term, context->buffer.position - curr_len);
   8314e:	68a3      	ldr	r3, [r4, #8]
   83150:	68e0      	ldr	r0, [r4, #12]
   83152:	4639      	mov	r1, r7
   83154:	1b9a      	subs	r2, r3, r6
   83156:	f649 63af 	movw	r3, #40623	; 0x9eaf
   8315a:	f2c0 0308 	movt	r3, #8
   8315e:	4798      	blx	r3
            context->buffer.position -= curr_len;
   83160:	68a0      	ldr	r0, [r4, #8]
   83162:	1b86      	subs	r6, r0, r6
   83164:	60a6      	str	r6, [r4, #8]
   83166:	e004      	b.n	83172 <SCPI_Input+0xba>
    } else {
        size_t buffer_free;
        int ws;
        buffer_free = context->buffer.length - context->buffer.position;
        if (len > (buffer_free - 1)) {
            return -1;
   83168:	f04f 35ff 	mov.w	r5, #4294967295
   8316c:	e001      	b.n	83172 <SCPI_Input+0xba>
 * @param data - data to process
 * @param len - length of data
 * @return 
 */
int SCPI_Input(scpi_t * context, const char * data, size_t len) {
    int result = 0;
   8316e:	f04f 0500 	mov.w	r5, #0
            context->buffer.position -= curr_len;
        }
    }

    return result;
}
   83172:	4628      	mov	r0, r5
   83174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83176:	bf00      	nop

00083178 <SCPI_ResultString>:
 * Write raw string result to the output
 * @param context
 * @param data
 * @return 
 */
size_t SCPI_ResultString(scpi_t * context, const char * data) {
   83178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8317a:	4604      	mov	r4, r0
   8317c:	460d      	mov	r5, r1
    size_t len = strlen(data);
   8317e:	4608      	mov	r0, r1
   83180:	f649 73a9 	movw	r3, #40873	; 0x9fa9
   83184:	f2c0 0308 	movt	r3, #8
   83188:	4798      	blx	r3
   8318a:	4607      	mov	r7, r0
    size_t result = 0;
    result += writeDelimiter(context);
   8318c:	4620      	mov	r0, r4
   8318e:	f642 6131 	movw	r1, #11825	; 0x2e31
   83192:	f2c0 0108 	movt	r1, #8
   83196:	4788      	blx	r1
   83198:	4606      	mov	r6, r0
    result += writeData(context, data, len);
   8319a:	4620      	mov	r0, r4
   8319c:	4629      	mov	r1, r5
   8319e:	463a      	mov	r2, r7
   831a0:	f642 6325 	movw	r3, #11813	; 0x2e25
   831a4:	f2c0 0308 	movt	r3, #8
   831a8:	4798      	blx	r3
    context->output_count++;
   831aa:	6a22      	ldr	r2, [r4, #32]
   831ac:	f102 0201 	add.w	r2, r2, #1
   831b0:	6222      	str	r2, [r4, #32]
    return result;
}
   831b2:	1980      	adds	r0, r0, r6
   831b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   831b6:	bf00      	nop

000831b8 <SCPI_ResultInt>:
 * Write integer value to the result
 * @param context
 * @param val
 * @return 
 */
size_t SCPI_ResultInt(scpi_t * context, int32_t val) {
   831b8:	b570      	push	{r4, r5, r6, lr}
   831ba:	b084      	sub	sp, #16
   831bc:	4604      	mov	r4, r0
    char buffer[12];
    size_t result = 0;
    size_t len = longToStr(val, buffer, sizeof (buffer));
   831be:	4608      	mov	r0, r1
   831c0:	a901      	add	r1, sp, #4
   831c2:	f04f 020c 	mov.w	r2, #12
   831c6:	f243 3395 	movw	r3, #13205	; 0x3395
   831ca:	f2c0 0308 	movt	r3, #8
   831ce:	4798      	blx	r3
   831d0:	4606      	mov	r6, r0
    result += writeDelimiter(context);
   831d2:	4620      	mov	r0, r4
   831d4:	f642 6131 	movw	r1, #11825	; 0x2e31
   831d8:	f2c0 0108 	movt	r1, #8
   831dc:	4788      	blx	r1
   831de:	4605      	mov	r5, r0
    result += writeData(context, buffer, len);
   831e0:	4620      	mov	r0, r4
   831e2:	a901      	add	r1, sp, #4
   831e4:	4632      	mov	r2, r6
   831e6:	f642 6325 	movw	r3, #11813	; 0x2e25
   831ea:	f2c0 0308 	movt	r3, #8
   831ee:	4798      	blx	r3
    context->output_count++;
   831f0:	6a22      	ldr	r2, [r4, #32]
   831f2:	f102 0201 	add.w	r2, r2, #1
   831f6:	6222      	str	r2, [r4, #32]
    return result;
}
   831f8:	1940      	adds	r0, r0, r5
   831fa:	b004      	add	sp, #16
   831fc:	bd70      	pop	{r4, r5, r6, pc}
   831fe:	bf00      	nop

00083200 <SCPI_ResultText>:
 * Write string withn " to the result
 * @param context
 * @param data
 * @return 
 */
size_t SCPI_ResultText(scpi_t * context, const char * data) {
   83200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83204:	4604      	mov	r4, r0
   83206:	460f      	mov	r7, r1
    size_t result = 0;
    result += writeDelimiter(context);
   83208:	f642 6331 	movw	r3, #11825	; 0x2e31
   8320c:	f2c0 0308 	movt	r3, #8
   83210:	4798      	blx	r3
   83212:	4680      	mov	r8, r0
    result += writeData(context, "\"", 1);
   83214:	f64c 4604 	movw	r6, #52228	; 0xcc04
   83218:	f2c0 0608 	movt	r6, #8
   8321c:	4620      	mov	r0, r4
   8321e:	4631      	mov	r1, r6
   83220:	f04f 0201 	mov.w	r2, #1
   83224:	f642 6525 	movw	r5, #11813	; 0x2e25
   83228:	f2c0 0508 	movt	r5, #8
   8322c:	47a8      	blx	r5
   8322e:	4480      	add	r8, r0
    result += writeData(context, data, strlen(data));
   83230:	4638      	mov	r0, r7
   83232:	f649 71a9 	movw	r1, #40873	; 0x9fa9
   83236:	f2c0 0108 	movt	r1, #8
   8323a:	4788      	blx	r1
   8323c:	4602      	mov	r2, r0
   8323e:	4620      	mov	r0, r4
   83240:	4639      	mov	r1, r7
   83242:	47a8      	blx	r5
   83244:	eb08 0700 	add.w	r7, r8, r0
    result += writeData(context, "\"", 1);
   83248:	4620      	mov	r0, r4
   8324a:	4631      	mov	r1, r6
   8324c:	f04f 0201 	mov.w	r2, #1
   83250:	47a8      	blx	r5
    context->output_count++;
   83252:	6a22      	ldr	r2, [r4, #32]
   83254:	f102 0201 	add.w	r2, r2, #1
   83258:	6222      	str	r2, [r4, #32]
    return result;
}
   8325a:	1838      	adds	r0, r7, r0
   8325c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083260 <SCPI_ParamString>:
 * @param value
 * @param len
 * @param mandatory
 * @return 
 */
bool_t SCPI_ParamString(scpi_t * context, const char ** value, size_t * len, bool_t mandatory) {
   83260:	b570      	push	{r4, r5, r6, lr}
   83262:	b082      	sub	sp, #8
   83264:	4604      	mov	r4, r0
   83266:	4615      	mov	r5, r2
    size_t length;

    if (!value || !len) {
   83268:	460e      	mov	r6, r1
   8326a:	b319      	cbz	r1, 832b4 <SCPI_ParamString+0x54>
   8326c:	b32a      	cbz	r2, 832ba <SCPI_ParamString+0x5a>
        return FALSE;
    }

    if (!paramNext(context, mandatory)) {
   8326e:	4619      	mov	r1, r3
   83270:	f642 6391 	movw	r3, #11921	; 0x2e91
   83274:	f2c0 0308 	movt	r3, #8
   83278:	4798      	blx	r3
   8327a:	b308      	cbz	r0, 832c0 <SCPI_ParamString+0x60>
        return FALSE;
    }

    if (locateStr(context->paramlist.parameters, context->paramlist.length, value, &length)) {
   8327c:	6960      	ldr	r0, [r4, #20]
   8327e:	69a1      	ldr	r1, [r4, #24]
   83280:	4632      	mov	r2, r6
   83282:	ab01      	add	r3, sp, #4
   83284:	f243 46e9 	movw	r6, #13545	; 0x34e9
   83288:	f2c0 0608 	movt	r6, #8
   8328c:	47b0      	blx	r6
   8328e:	b1d0      	cbz	r0, 832c6 <SCPI_ParamString+0x66>
        paramSkipBytes(context, length);
   83290:	4620      	mov	r0, r4
   83292:	9901      	ldr	r1, [sp, #4]
   83294:	f642 6259 	movw	r2, #11865	; 0x2e59
   83298:	f2c0 0208 	movt	r2, #8
   8329c:	4790      	blx	r2
        paramSkipWhitespace(context);
   8329e:	4620      	mov	r0, r4
   832a0:	f642 616d 	movw	r1, #11885	; 0x2e6d
   832a4:	f2c0 0108 	movt	r1, #8
   832a8:	4788      	blx	r1
        if (len) {
            *len = length;
   832aa:	9801      	ldr	r0, [sp, #4]
   832ac:	6028      	str	r0, [r5, #0]
        }
        return TRUE;
   832ae:	f04f 0001 	mov.w	r0, #1
   832b2:	e00a      	b.n	832ca <SCPI_ParamString+0x6a>
 */
bool_t SCPI_ParamString(scpi_t * context, const char ** value, size_t * len, bool_t mandatory) {
    size_t length;

    if (!value || !len) {
        return FALSE;
   832b4:	f04f 0000 	mov.w	r0, #0
   832b8:	e007      	b.n	832ca <SCPI_ParamString+0x6a>
   832ba:	f04f 0000 	mov.w	r0, #0
   832be:	e004      	b.n	832ca <SCPI_ParamString+0x6a>
    }

    if (!paramNext(context, mandatory)) {
        return FALSE;
   832c0:	f04f 0000 	mov.w	r0, #0
   832c4:	e001      	b.n	832ca <SCPI_ParamString+0x6a>
            *len = length;
        }
        return TRUE;
    }

    return FALSE;
   832c6:	f04f 0000 	mov.w	r0, #0
}
   832ca:	b002      	add	sp, #8
   832cc:	bd70      	pop	{r4, r5, r6, pc}
   832ce:	bf00      	nop

000832d0 <SCPI_ParamInt>:
 * @param context
 * @param value
 * @param mandatory
 * @return 
 */
bool_t SCPI_ParamInt(scpi_t * context, int32_t * value, bool_t mandatory) {
   832d0:	b570      	push	{r4, r5, r6, lr}
   832d2:	b082      	sub	sp, #8
   832d4:	4604      	mov	r4, r0
   832d6:	4613      	mov	r3, r2
    const char * param;
    size_t param_len;
    size_t num_len;

    if (!value) {
   832d8:	460e      	mov	r6, r1
   832da:	b1e1      	cbz	r1, 83316 <SCPI_ParamInt+0x46>
        return FALSE;
    }

    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
   832dc:	a901      	add	r1, sp, #4
   832de:	466a      	mov	r2, sp
   832e0:	f243 2561 	movw	r5, #12897	; 0x3261
   832e4:	f2c0 0508 	movt	r5, #8
   832e8:	47a8      	blx	r5
   832ea:	b1b8      	cbz	r0, 8331c <SCPI_ParamInt+0x4c>
        return FALSE;
    }

    num_len = strToLong(param, value);
   832ec:	9801      	ldr	r0, [sp, #4]
   832ee:	4631      	mov	r1, r6
   832f0:	f243 439d 	movw	r3, #13469	; 0x349d
   832f4:	f2c0 0308 	movt	r3, #8
   832f8:	4798      	blx	r3

    if (num_len != param_len) {
   832fa:	9900      	ldr	r1, [sp, #0]
   832fc:	4288      	cmp	r0, r1
   832fe:	d010      	beq.n	83322 <SCPI_ParamInt+0x52>
        SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
   83300:	4620      	mov	r0, r4
   83302:	f06f 0189 	mvn.w	r1, #137	; 0x89
   83306:	f242 6225 	movw	r2, #9765	; 0x2625
   8330a:	f2c0 0208 	movt	r2, #8
   8330e:	4790      	blx	r2
        return FALSE;
   83310:	f04f 0000 	mov.w	r0, #0
   83314:	e007      	b.n	83326 <SCPI_ParamInt+0x56>
    const char * param;
    size_t param_len;
    size_t num_len;

    if (!value) {
        return FALSE;
   83316:	f04f 0000 	mov.w	r0, #0
   8331a:	e004      	b.n	83326 <SCPI_ParamInt+0x56>
    }

    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
        return FALSE;
   8331c:	f04f 0000 	mov.w	r0, #0
   83320:	e001      	b.n	83326 <SCPI_ParamInt+0x56>
    if (num_len != param_len) {
        SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
        return FALSE;
    }

    return TRUE;
   83322:	f04f 0001 	mov.w	r0, #1
}
   83326:	b002      	add	sp, #8
   83328:	bd70      	pop	{r4, r5, r6, pc}
   8332a:	bf00      	nop

0008332c <isFinalState>:
 */
static bool_t isFinalState(locate_text_states state) {
    return (
        ((state) == STATE_COMMA)
        || ((state) == STATE_LAST_WHITESPACE)
        || ((state) == STATE_TEXT) ||
   8332c:	f1a0 0302 	sub.w	r3, r0, #2
   83330:	b2d9      	uxtb	r1, r3
   83332:	2902      	cmp	r1, #2
   83334:	d904      	bls.n	83340 <isFinalState+0x14>
   83336:	f1d0 0001 	rsbs	r0, r0, #1
   8333a:	bf38      	it	cc
   8333c:	2000      	movcc	r0, #0
   8333e:	4770      	bx	lr
   83340:	f04f 0001 	mov.w	r0, #1
        ((state) == STATE_FIRST_WHITESPACE)
    );
}
   83344:	4770      	bx	lr
   83346:	bf00      	nop

00083348 <strnpbrk>:
 * @param str
 * @param size
 * @param set
 * @return 
 */
char * strnpbrk(const char *str, size_t size, const char *set) {
   83348:	b470      	push	{r4, r5, r6}
    const char *scanp;
    long c, sc;
    const char * strend = str + size;
   8334a:	1841      	adds	r1, r0, r1

    while ((strend != str) && ((c = *str++) != 0)) {
   8334c:	4288      	cmp	r0, r1
   8334e:	d01a      	beq.n	83386 <strnpbrk+0x3e>
   83350:	4603      	mov	r3, r0
   83352:	f813 6b01 	ldrb.w	r6, [r3], #1
   83356:	b936      	cbnz	r6, 83366 <strnpbrk+0x1e>
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
                return ((char *) (str - 1));
    }
    return (NULL);
   83358:	f04f 0000 	mov.w	r0, #0
   8335c:	e018      	b.n	83390 <strnpbrk+0x48>
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
   8335e:	42b5      	cmp	r5, r6
   83360:	d102      	bne.n	83368 <strnpbrk+0x20>
   83362:	e015      	b.n	83390 <strnpbrk+0x48>
char * strnpbrk(const char *str, size_t size, const char *set) {
    const char *scanp;
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
   83364:	4623      	mov	r3, r4
   83366:	4614      	mov	r4, r2
        for (scanp = set; (sc = *scanp++) != '\0';)
   83368:	f814 5b01 	ldrb.w	r5, [r4], #1
   8336c:	2d00      	cmp	r5, #0
   8336e:	d1f6      	bne.n	8335e <strnpbrk+0x16>
char * strnpbrk(const char *str, size_t size, const char *set) {
    const char *scanp;
    long c, sc;
    const char * strend = str + size;

    while ((strend != str) && ((c = *str++) != 0)) {
   83370:	428b      	cmp	r3, r1
   83372:	d00b      	beq.n	8338c <strnpbrk+0x44>
   83374:	461c      	mov	r4, r3
   83376:	f814 6b01 	ldrb.w	r6, [r4], #1
   8337a:	4618      	mov	r0, r3
   8337c:	2e00      	cmp	r6, #0
   8337e:	d1f1      	bne.n	83364 <strnpbrk+0x1c>
        for (scanp = set; (sc = *scanp++) != '\0';)
            if (sc == c)
                return ((char *) (str - 1));
    }
    return (NULL);
   83380:	f04f 0000 	mov.w	r0, #0
   83384:	e004      	b.n	83390 <strnpbrk+0x48>
   83386:	f04f 0000 	mov.w	r0, #0
   8338a:	e001      	b.n	83390 <strnpbrk+0x48>
   8338c:	f04f 0000 	mov.w	r0, #0
}
   83390:	bc70      	pop	{r4, r5, r6}
   83392:	4770      	bx	lr

00083394 <longToStr>:
 * @param val   integer value
 * @param str   converted textual representation
 * @param len   string buffer length
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
   83394:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t x = 1000000000L;
    int_fast8_t digit;
    size_t pos = 0;

    if (val == 0) {
   83396:	4603      	mov	r3, r0
   83398:	b938      	cbnz	r0, 833aa <longToStr+0x16>
        if (pos < len) str[pos++] = '0';
   8339a:	2a00      	cmp	r2, #0
   8339c:	d055      	beq.n	8344a <longToStr+0xb6>
   8339e:	f04f 0030 	mov.w	r0, #48	; 0x30
   833a2:	7008      	strb	r0, [r1, #0]
   833a4:	f04f 0001 	mov.w	r0, #1
   833a8:	e049      	b.n	8343e <longToStr+0xaa>
    } else {
        if (val < 0) {
   833aa:	2800      	cmp	r0, #0
   833ac:	da08      	bge.n	833c0 <longToStr+0x2c>
            val = -val;
   833ae:	f1c0 0300 	rsb	r3, r0, #0
            if (pos < len) str[pos++] = '-';
   833b2:	b142      	cbz	r2, 833c6 <longToStr+0x32>
   833b4:	f04f 002d 	mov.w	r0, #45	; 0x2d
   833b8:	7008      	strb	r0, [r1, #0]
   833ba:	f04f 0001 	mov.w	r0, #1
   833be:	e004      	b.n	833ca <longToStr+0x36>
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
    uint32_t x = 1000000000L;
    int_fast8_t digit;
    size_t pos = 0;
   833c0:	f04f 0000 	mov.w	r0, #0
   833c4:	e001      	b.n	833ca <longToStr+0x36>
   833c6:	f04f 0000 	mov.w	r0, #0
        if (val < 0) {
            val = -val;
            if (pos < len) str[pos++] = '-';
        }

        while ((val / x) == 0) {
   833ca:	461d      	mov	r5, r3
   833cc:	f64c 14ff 	movw	r4, #51711	; 0xc9ff
   833d0:	f6c3 349a 	movt	r4, #15258	; 0x3b9a
   833d4:	42a3      	cmp	r3, r4
   833d6:	d810      	bhi.n	833fa <longToStr+0x66>
   833d8:	f44f 434a 	mov.w	r3, #51712	; 0xca00
   833dc:	f6c3 339a 	movt	r3, #15258	; 0x3b9a
            x /= 10;
   833e0:	f64c 46cd 	movw	r6, #52429	; 0xcccd
   833e4:	f6cc 46cc 	movt	r6, #52428	; 0xcccc
   833e8:	fba6 4303 	umull	r4, r3, r6, r3
   833ec:	ea4f 03d3 	mov.w	r3, r3, lsr #3
        if (val < 0) {
            val = -val;
            if (pos < len) str[pos++] = '-';
        }

        while ((val / x) == 0) {
   833f0:	fbb5 f4f3 	udiv	r4, r5, r3
   833f4:	2c00      	cmp	r4, #0
   833f6:	d0f7      	beq.n	833e8 <longToStr+0x54>
   833f8:	e003      	b.n	83402 <longToStr+0x6e>
   833fa:	f44f 434a 	mov.w	r3, #51712	; 0xca00
   833fe:	f6c3 339a 	movt	r3, #15258	; 0x3b9a
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   83402:	4282      	cmp	r2, r0
   83404:	d933      	bls.n	8346e <longToStr+0xda>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   83406:	fbb5 f6f3 	udiv	r6, r5, r3
            break;
        }
    }
    
    return result;
}
   8340a:	b2f6      	uxtb	r6, r6

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
            val -= digit * x;
            x /= 10;
   8340c:	f64c 47cd 	movw	r7, #52429	; 0xcccd
   83410:	f6cc 47cc 	movt	r7, #52428	; 0xcccc
   83414:	ea6f 0400 	mvn.w	r4, r0
   83418:	18a4      	adds	r4, r4, r2
   8341a:	f014 0f01 	tst.w	r4, #1
   8341e:	d128      	bne.n	83472 <longToStr+0xde>
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   83420:	f106 0430 	add.w	r4, r6, #48	; 0x30
   83424:	540c      	strb	r4, [r1, r0]
   83426:	f100 0401 	add.w	r4, r0, #1
   8342a:	4620      	mov	r0, r4
            val -= digit * x;
   8342c:	fb03 5516 	mls	r5, r3, r6, r5
            x /= 10;
   83430:	fba7 6303 	umull	r6, r3, r7, r3
        } while (x && (pos < len));
   83434:	08db      	lsrs	r3, r3, #3
   83436:	d002      	beq.n	8343e <longToStr+0xaa>
   83438:	42a2      	cmp	r2, r4
   8343a:	d809      	bhi.n	83450 <longToStr+0xbc>
   8343c:	e017      	b.n	8346e <longToStr+0xda>
    }

    if (pos < len) str[pos] = 0;
   8343e:	4290      	cmp	r0, r2
   83440:	d215      	bcs.n	8346e <longToStr+0xda>
   83442:	f04f 0200 	mov.w	r2, #0
   83446:	540a      	strb	r2, [r1, r0]
   83448:	e011      	b.n	8346e <longToStr+0xda>
 * @return number of bytes written to str (without '\0')
 */
size_t longToStr(int32_t val, char * str, size_t len) {
    uint32_t x = 1000000000L;
    int_fast8_t digit;
    size_t pos = 0;
   8344a:	f04f 0000 	mov.w	r0, #0
   8344e:	e00e      	b.n	8346e <longToStr+0xda>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   83450:	fbb5 f0f3 	udiv	r0, r5, r3
            break;
        }
    }
    
    return result;
}
   83454:	b2c6      	uxtb	r6, r0
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   83456:	f106 0030 	add.w	r0, r6, #48	; 0x30
   8345a:	5508      	strb	r0, [r1, r4]
   8345c:	f104 0001 	add.w	r0, r4, #1
            val -= digit * x;
   83460:	fb03 5516 	mls	r5, r3, r6, r5
            x /= 10;
   83464:	fba7 4303 	umull	r4, r3, r7, r3
        } while (x && (pos < len));
   83468:	08db      	lsrs	r3, r3, #3
   8346a:	d113      	bne.n	83494 <longToStr+0x100>
   8346c:	e7e7      	b.n	8343e <longToStr+0xaa>
    }

    if (pos < len) str[pos] = 0;
    return pos;
}
   8346e:	bcf0      	pop	{r4, r5, r6, r7}
   83470:	4770      	bx	lr
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
            if (pos < len) str[pos++] = digit + '0';
   83472:	f106 0430 	add.w	r4, r6, #48	; 0x30
   83476:	540c      	strb	r4, [r1, r0]
   83478:	f100 0001 	add.w	r0, r0, #1
            val -= digit * x;
   8347c:	fb03 5516 	mls	r5, r3, r6, r5
            x /= 10;
   83480:	fba7 6303 	umull	r6, r3, r7, r3
        } while (x && (pos < len));
   83484:	08db      	lsrs	r3, r3, #3
   83486:	d0da      	beq.n	8343e <longToStr+0xaa>
   83488:	4282      	cmp	r2, r0
   8348a:	d9f0      	bls.n	8346e <longToStr+0xda>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   8348c:	fbb5 f6f3 	udiv	r6, r5, r3
            break;
        }
    }
    
    return result;
}
   83490:	b2f6      	uxtb	r6, r6
   83492:	e7c5      	b.n	83420 <longToStr+0x8c>
        while ((val / x) == 0) {
            x /= 10;
        }

        do {
            digit = (uint8_t) (val / x);
   83494:	fbb5 f6f3 	udiv	r6, r5, r3
            break;
        }
    }
    
    return result;
}
   83498:	b2f6      	uxtb	r6, r6
   8349a:	e7c1      	b.n	83420 <longToStr+0x8c>

0008349c <strToLong>:
 * Converts string to signed 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strToLong(const char * str, int32_t * val) {
   8349c:	b530      	push	{r4, r5, lr}
   8349e:	b083      	sub	sp, #12
   834a0:	4604      	mov	r4, r0
   834a2:	460d      	mov	r5, r1
    char * endptr;
    *val = strtol(str, &endptr, 0);
   834a4:	a901      	add	r1, sp, #4
   834a6:	f04f 0200 	mov.w	r2, #0
   834aa:	f24a 1351 	movw	r3, #41297	; 0xa151
   834ae:	f2c0 0308 	movt	r3, #8
   834b2:	4798      	blx	r3
   834b4:	6028      	str	r0, [r5, #0]
    return endptr - str;
}
   834b6:	9801      	ldr	r0, [sp, #4]
   834b8:	1b00      	subs	r0, r0, r4
   834ba:	b003      	add	sp, #12
   834bc:	bd30      	pop	{r4, r5, pc}
   834be:	bf00      	nop

000834c0 <compareStr>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
   834c0:	b510      	push	{r4, lr}
   834c2:	460c      	mov	r4, r1
    if (len1 != len2) {
   834c4:	4299      	cmp	r1, r3
   834c6:	d10b      	bne.n	834e0 <compareStr+0x20>
        return FALSE;
    }

    if (SCPI_strncasecmp(str1, str2, len2) == 0) {
   834c8:	4611      	mov	r1, r2
   834ca:	4622      	mov	r2, r4
   834cc:	f649 73b9 	movw	r3, #40889	; 0x9fb9
   834d0:	f2c0 0308 	movt	r3, #8
   834d4:	4798      	blx	r3
   834d6:	f1d0 0001 	rsbs	r0, r0, #1
   834da:	bf38      	it	cc
   834dc:	2000      	movcc	r0, #0
   834de:	bd10      	pop	{r4, pc}
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
    if (len1 != len2) {
        return FALSE;
   834e0:	f04f 0000 	mov.w	r0, #0
    if (SCPI_strncasecmp(str1, str2, len2) == 0) {
        return TRUE;
    }

    return FALSE;
}
   834e4:	bd10      	pop	{r4, pc}
   834e6:	bf00      	nop

000834e8 <locateStr>:
 * @param len1 length of string
 * @param str2 result
 * @param len2 length of result
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
   834e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   834ec:	b083      	sub	sp, #12
   834ee:	4606      	mov	r6, r0
   834f0:	9201      	str	r2, [sp, #4]
   834f2:	4699      	mov	r9, r3
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   834f4:	460b      	mov	r3, r1
   834f6:	2900      	cmp	r1, #0
   834f8:	d03e      	beq.n	83578 <locateStr+0x90>
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   834fa:	f240 22a0 	movw	r2, #672	; 0x2a0
   834fe:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83502:	f8d2 e000 	ldr.w	lr, [r2]
   83506:	f04f 0501 	mov.w	r5, #1
   8350a:	f04f 0400 	mov.w	r4, #0
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;
   8350e:	4627      	mov	r7, r4
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
   83510:	46a0      	mov	r8, r4
            } else if (c == ',') {
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
                nfa->stopIdx = nfa->i + 1;
                nfa->state = STATE_TEXT;
   83512:	f04f 0b02 	mov.w	fp, #2
   83516:	ea6f 0104 	mvn.w	r1, r4
   8351a:	18c9      	adds	r1, r1, r3
   8351c:	4029      	ands	r1, r5
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   8351e:	5d00      	ldrb	r0, [r0, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   83520:	4622      	mov	r2, r4
   83522:	2c00      	cmp	r4, #0
   83524:	d04f      	beq.n	835c6 <locateStr+0xde>
   83526:	e062      	b.n	835ee <locateStr+0x106>
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   83528:	5d31      	ldrb	r1, [r6, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   8352a:	b112      	cbz	r2, 83532 <locateStr+0x4a>
   8352c:	2a02      	cmp	r2, #2
   8352e:	d11b      	bne.n	83568 <locateStr+0x80>
   83530:	e00f      	b.n	83552 <locateStr+0x6a>
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   83532:	eb0e 0001 	add.w	r0, lr, r1
   83536:	7840      	ldrb	r0, [r0, #1]
   83538:	f000 0008 	and.w	r0, r0, #8
   8353c:	b2c0      	uxtb	r0, r0
   8353e:	b110      	cbz	r0, 83546 <locateStr+0x5e>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   83540:	462f      	mov	r7, r5
   83542:	46a8      	mov	r8, r5
   83544:	e010      	b.n	83568 <locateStr+0x80>
            } else if (c == ',') {
   83546:	292c      	cmp	r1, #44	; 0x2c
   83548:	d01b      	beq.n	83582 <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   8354a:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   8354c:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   8354e:	465a      	mov	r2, fp
   83550:	e00a      	b.n	83568 <locateStr+0x80>
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   83552:	292c      	cmp	r1, #44	; 0x2c
   83554:	d018      	beq.n	83588 <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   83556:	eb0e 0001 	add.w	r0, lr, r1
   8355a:	7841      	ldrb	r1, [r0, #1]
   8355c:	f001 0008 	and.w	r0, r1, #8
   83560:	b2c1      	uxtb	r1, r0
                nfa->stopIdx = nfa->i + 1;
   83562:	2900      	cmp	r1, #0
   83564:	bf08      	it	eq
   83566:	462f      	moveq	r7, r5
   83568:	f104 0401 	add.w	r4, r4, #1
   8356c:	f105 0501 	add.w	r5, r5, #1
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   83570:	5d31      	ldrb	r1, [r6, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   83572:	2a00      	cmp	r2, #0
   83574:	d076      	beq.n	83664 <locateStr+0x17c>
   83576:	e089      	b.n	8368c <locateStr+0x1a4>
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;
   83578:	f04f 0700 	mov.w	r7, #0
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
   8357c:	46b8      	mov	r8, r7
 * @param len2 length of result
 * @return string str1 contains text and str2 was set
 */
bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) {
    locate_text_nfa nfa;
    nfa.state = STATE_FIRST_WHITESPACE;
   8357e:	463a      	mov	r2, r7
   83580:	e004      	b.n	8358c <locateStr+0xa4>
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   83582:	f04f 0204 	mov.w	r2, #4
   83586:	e001      	b.n	8358c <locateStr+0xa4>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   83588:	f04f 0204 	mov.w	r2, #4
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
            break;
        }
    }

    if (isFinalState(nfa.state)) {
   8358c:	4610      	mov	r0, r2
   8358e:	f243 332d 	movw	r3, #13101	; 0x332d
   83592:	f2c0 0308 	movt	r3, #8
   83596:	4798      	blx	r3
   83598:	b168      	cbz	r0, 835b6 <locateStr+0xce>

        if (str2) {
   8359a:	9a01      	ldr	r2, [sp, #4]
   8359c:	b10a      	cbz	r2, 835a2 <locateStr+0xba>
            *str2 = &str1[nfa.startIdx];
   8359e:	4446      	add	r6, r8
   835a0:	6016      	str	r6, [r2, #0]
        }

        if (len2) {
   835a2:	f1b9 0f00 	cmp.w	r9, #0
   835a6:	d009      	beq.n	835bc <locateStr+0xd4>
            *len2 = nfa.stopIdx - nfa.startIdx;
   835a8:	ebc8 0707 	rsb	r7, r8, r7
   835ac:	f8c9 7000 	str.w	r7, [r9]
        }
        return TRUE;
   835b0:	f04f 0001 	mov.w	r0, #1
   835b4:	e004      	b.n	835c0 <locateStr+0xd8>
    }
    return FALSE;
   835b6:	f04f 0000 	mov.w	r0, #0
   835ba:	e001      	b.n	835c0 <locateStr+0xd8>
        }

        if (len2) {
            *len2 = nfa.stopIdx - nfa.startIdx;
        }
        return TRUE;
   835bc:	f04f 0001 	mov.w	r0, #1
    }
    return FALSE;
}
   835c0:	b003      	add	sp, #12
   835c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   835c6:	eb0e 0c00 	add.w	ip, lr, r0
   835ca:	f89c c001 	ldrb.w	ip, [ip, #1]
   835ce:	f00c 0c08 	and.w	ip, ip, #8
   835d2:	fa5f fc8c 	uxtb.w	ip, ip
   835d6:	f1bc 0f00 	cmp.w	ip, #0
   835da:	d105      	bne.n	835e8 <locateStr+0x100>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   835dc:	282c      	cmp	r0, #44	; 0x2c
   835de:	d0d0      	beq.n	83582 <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   835e0:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   835e2:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   835e4:	465a      	mov	r2, fp
   835e6:	e00e      	b.n	83606 <locateStr+0x11e>
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   835e8:	462f      	mov	r7, r5
   835ea:	46a8      	mov	r8, r5
   835ec:	e00b      	b.n	83606 <locateStr+0x11e>
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   835ee:	2c02      	cmp	r4, #2
   835f0:	d109      	bne.n	83606 <locateStr+0x11e>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   835f2:	282c      	cmp	r0, #44	; 0x2c
   835f4:	d0c8      	beq.n	83588 <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   835f6:	4470      	add	r0, lr
   835f8:	7840      	ldrb	r0, [r0, #1]
   835fa:	f000 0008 	and.w	r0, r0, #8
   835fe:	b2c0      	uxtb	r0, r0
                nfa->stopIdx = nfa->i + 1;
   83600:	2800      	cmp	r0, #0
   83602:	bf08      	it	eq
   83604:	462f      	moveq	r7, r5
   83606:	f104 0401 	add.w	r4, r4, #1
   8360a:	f105 0501 	add.w	r5, r5, #1
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   8360e:	429c      	cmp	r4, r3
   83610:	d0bc      	beq.n	8358c <locateStr+0xa4>
   83612:	2900      	cmp	r1, #0
   83614:	d088      	beq.n	83528 <locateStr+0x40>
        if(FALSE == locateStrAutomaton(&nfa, str1[nfa.i])) {
   83616:	5d31      	ldrb	r1, [r6, r4]
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   83618:	b97a      	cbnz	r2, 8363a <locateStr+0x152>
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   8361a:	eb0e 0001 	add.w	r0, lr, r1
   8361e:	7840      	ldrb	r0, [r0, #1]
   83620:	f000 0008 	and.w	r0, r0, #8
   83624:	b2c0      	uxtb	r0, r0
   83626:	b928      	cbnz	r0, 83634 <locateStr+0x14c>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   83628:	292c      	cmp	r1, #44	; 0x2c
   8362a:	d0aa      	beq.n	83582 <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   8362c:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   8362e:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   83630:	465a      	mov	r2, fp
   83632:	e00f      	b.n	83654 <locateStr+0x16c>
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   83634:	462f      	mov	r7, r5
   83636:	46a8      	mov	r8, r5
   83638:	e00c      	b.n	83654 <locateStr+0x16c>
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   8363a:	2a02      	cmp	r2, #2
   8363c:	d10a      	bne.n	83654 <locateStr+0x16c>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   8363e:	292c      	cmp	r1, #44	; 0x2c
   83640:	d0a2      	beq.n	83588 <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   83642:	eb0e 0001 	add.w	r0, lr, r1
   83646:	7841      	ldrb	r1, [r0, #1]
   83648:	f001 0008 	and.w	r0, r1, #8
   8364c:	b2c1      	uxtb	r1, r0
                nfa->stopIdx = nfa->i + 1;
   8364e:	2900      	cmp	r1, #0
   83650:	bf08      	it	eq
   83652:	462f      	moveq	r7, r5
   83654:	f104 0401 	add.w	r4, r4, #1
   83658:	f105 0501 	add.w	r5, r5, #1
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   8365c:	429c      	cmp	r4, r3
   8365e:	f47f af63 	bne.w	83528 <locateStr+0x40>
   83662:	e793      	b.n	8358c <locateStr+0xa4>
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
   83664:	eb0e 0a01 	add.w	sl, lr, r1
   83668:	f89a a001 	ldrb.w	sl, [sl, #1]
   8366c:	f00a 0a08 	and.w	sl, sl, #8
   83670:	fa5f fa8a 	uxtb.w	sl, sl
   83674:	f1ba 0f00 	cmp.w	sl, #0
   83678:	d105      	bne.n	83686 <locateStr+0x19e>
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
            } else if (c == ',') {
   8367a:	292c      	cmp	r1, #44	; 0x2c
   8367c:	d081      	beq.n	83582 <locateStr+0x9a>
                nfa->state = STATE_COMMA;
            } else {
                nfa->startIdx = nfa->i;
   8367e:	46a0      	mov	r8, r4
                nfa->stopIdx = nfa->i + 1;
   83680:	462f      	mov	r7, r5
                nfa->state = STATE_TEXT;
   83682:	465a      	mov	r2, fp
   83684:	e00f      	b.n	836a6 <locateStr+0x1be>
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
        /* first state locating only white spaces */
        case STATE_FIRST_WHITESPACE:
            if(isspace(c)) {
                nfa->startIdx = nfa->stopIdx = nfa->i + 1;
   83686:	462f      	mov	r7, r5
   83688:	46a8      	mov	r8, r5
   8368a:	e00c      	b.n	836a6 <locateStr+0x1be>
 * Perform locateStr automaton to search string pattern
 * @param nfa stores automaton state
 * @param c current char processed
 */
static bool_t locateStrAutomaton(locate_text_nfa * nfa, unsigned char c) {
    switch(nfa->state) {
   8368c:	2a02      	cmp	r2, #2
   8368e:	d10a      	bne.n	836a6 <locateStr+0x1be>
                nfa->state = STATE_TEXT;
            }
            break;
        /* locate text ignoring quotes */
        case STATE_TEXT:
            if (c == ',') {
   83690:	292c      	cmp	r1, #44	; 0x2c
   83692:	f43f af79 	beq.w	83588 <locateStr+0xa0>
                nfa->state = STATE_COMMA;
            } else if (!isspace(c)) {
   83696:	4471      	add	r1, lr
   83698:	7849      	ldrb	r1, [r1, #1]
   8369a:	f001 0108 	and.w	r1, r1, #8
   8369e:	b2c9      	uxtb	r1, r1
                nfa->stopIdx = nfa->i + 1;
   836a0:	2900      	cmp	r1, #0
   836a2:	bf08      	it	eq
   836a4:	462f      	moveq	r7, r5
   836a6:	f104 0401 	add.w	r4, r4, #1
   836aa:	f105 0501 	add.w	r5, r5, #1
    nfa.state = STATE_FIRST_WHITESPACE;
    nfa.startIdx = 0;
    nfa.stopIdx = 0;


    for (nfa.i = 0; nfa.i < len1; nfa.i++) {
   836ae:	429c      	cmp	r4, r3
   836b0:	f47f af3a 	bne.w	83528 <locateStr+0x40>
   836b4:	e76a      	b.n	8358c <locateStr+0xa4>
   836b6:	bf00      	nop

000836b8 <skipWhitespace>:
 * Count white spaces from the beggining
 * @param cmd - command
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
   836b8:	b470      	push	{r4, r5, r6}
    size_t i;
    for (i = 0; i < len; i++) {
   836ba:	460e      	mov	r6, r1
   836bc:	b311      	cbz	r1, 83704 <skipWhitespace+0x4c>
        if (!isspace((unsigned char)cmd[i])) {
   836be:	f240 23a0 	movw	r3, #672	; 0x2a0
   836c2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   836c6:	681c      	ldr	r4, [r3, #0]
   836c8:	7801      	ldrb	r1, [r0, #0]
   836ca:	1862      	adds	r2, r4, r1
   836cc:	7853      	ldrb	r3, [r2, #1]
   836ce:	f003 0108 	and.w	r1, r3, #8
   836d2:	b2ca      	uxtb	r2, r1
   836d4:	b1c2      	cbz	r2, 83708 <skipWhitespace+0x50>
   836d6:	4603      	mov	r3, r0
   836d8:	f04f 0000 	mov.w	r0, #0
   836dc:	f016 0f01 	tst.w	r6, #1
   836e0:	d109      	bne.n	836f6 <skipWhitespace+0x3e>
   836e2:	e015      	b.n	83710 <skipWhitespace+0x58>
   836e4:	f813 5f01 	ldrb.w	r5, [r3, #1]!
   836e8:	1961      	adds	r1, r4, r5
   836ea:	784d      	ldrb	r5, [r1, #1]
   836ec:	f005 0108 	and.w	r1, r5, #8
   836f0:	b2cd      	uxtb	r5, r1
   836f2:	b9cd      	cbnz	r5, 83728 <skipWhitespace+0x70>
   836f4:	e00a      	b.n	8370c <skipWhitespace+0x54>
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   836f6:	f100 0201 	add.w	r2, r0, #1
   836fa:	4610      	mov	r0, r2
   836fc:	42b2      	cmp	r2, r6
   836fe:	d1f1      	bne.n	836e4 <skipWhitespace+0x2c>
        if (!isspace((unsigned char)cmd[i])) {
            return i;
        }
    }
    return len;
   83700:	4630      	mov	r0, r6
   83702:	e003      	b.n	8370c <skipWhitespace+0x54>
   83704:	4608      	mov	r0, r1
   83706:	e001      	b.n	8370c <skipWhitespace+0x54>
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   83708:	f04f 0000 	mov.w	r0, #0
        if (!isspace((unsigned char)cmd[i])) {
            return i;
        }
    }
    return len;
}
   8370c:	bc70      	pop	{r4, r5, r6}
   8370e:	4770      	bx	lr
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   83710:	f100 0001 	add.w	r0, r0, #1
        if (!isspace((unsigned char)cmd[i])) {
   83714:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   83718:	1862      	adds	r2, r4, r1
   8371a:	7851      	ldrb	r1, [r2, #1]
   8371c:	f001 0208 	and.w	r2, r1, #8
   83720:	b2d1      	uxtb	r1, r2
   83722:	2900      	cmp	r1, #0
   83724:	d1e7      	bne.n	836f6 <skipWhitespace+0x3e>
   83726:	e7f1      	b.n	8370c <skipWhitespace+0x54>
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
    size_t i;
    for (i = 0; i < len; i++) {
   83728:	f102 0001 	add.w	r0, r2, #1
        if (!isspace((unsigned char)cmd[i])) {
   8372c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   83730:	18a1      	adds	r1, r4, r2
   83732:	784a      	ldrb	r2, [r1, #1]
   83734:	f002 0108 	and.w	r1, r2, #8
   83738:	b2ca      	uxtb	r2, r1
   8373a:	2a00      	cmp	r2, #0
   8373c:	d1db      	bne.n	836f6 <skipWhitespace+0x3e>
   8373e:	e7e5      	b.n	8370c <skipWhitespace+0x54>

00083740 <matchPattern>:
 * @param pattern_len
 * @param str
 * @param str_len
 * @return 
 */
bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
   83740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83744:	4680      	mov	r8, r0
   83746:	4691      	mov	r9, r2
   83748:	469a      	mov	sl, r3
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   8374a:	468e      	mov	lr, r1
   8374c:	b321      	cbz	r1, 83798 <matchPattern+0x58>
   8374e:	7803      	ldrb	r3, [r0, #0]
   83750:	b32b      	cbz	r3, 8379e <matchPattern+0x5e>
        if (islower((unsigned char)pattern[i])) {
   83752:	f240 22a0 	movw	r2, #672	; 0x2a0
   83756:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8375a:	6810      	ldr	r0, [r2, #0]
   8375c:	18c1      	adds	r1, r0, r3
   8375e:	784c      	ldrb	r4, [r1, #1]
   83760:	f004 0503 	and.w	r5, r4, #3
   83764:	2d02      	cmp	r5, #2
   83766:	d01d      	beq.n	837a4 <matchPattern+0x64>
   83768:	4642      	mov	r2, r8
   8376a:	f04f 0400 	mov.w	r4, #0
   8376e:	f01e 0f01 	tst.w	lr, #1
   83772:	d107      	bne.n	83784 <matchPattern+0x44>
   83774:	e02f      	b.n	837d6 <matchPattern+0x96>
   83776:	19c7      	adds	r7, r0, r7
   83778:	7879      	ldrb	r1, [r7, #1]
   8377a:	f001 0503 	and.w	r5, r1, #3
   8377e:	2d02      	cmp	r5, #2
   83780:	d136      	bne.n	837f0 <matchPattern+0xb0>
   83782:	e011      	b.n	837a8 <matchPattern+0x68>
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   83784:	f104 0601 	add.w	r6, r4, #1
   83788:	4634      	mov	r4, r6
   8378a:	4576      	cmp	r6, lr
   8378c:	d00c      	beq.n	837a8 <matchPattern+0x68>
   8378e:	f812 7f01 	ldrb.w	r7, [r2, #1]!
   83792:	2f00      	cmp	r7, #0
   83794:	d1ef      	bne.n	83776 <matchPattern+0x36>
   83796:	e007      	b.n	837a8 <matchPattern+0x68>
   83798:	f04f 0400 	mov.w	r4, #0
   8379c:	e004      	b.n	837a8 <matchPattern+0x68>
   8379e:	f04f 0400 	mov.w	r4, #0
   837a2:	e001      	b.n	837a8 <matchPattern+0x68>
   837a4:	f04f 0400 	mov.w	r4, #0
 * @param str_len
 * @return 
 */
bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
    int pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
    return compareStr(pattern, pattern_len, str, str_len) ||
   837a8:	4640      	mov	r0, r8
   837aa:	4671      	mov	r1, lr
   837ac:	464a      	mov	r2, r9
   837ae:	4653      	mov	r3, sl
   837b0:	f243 45c1 	movw	r5, #13505	; 0x34c1
   837b4:	f2c0 0508 	movt	r5, #8
   837b8:	47a8      	blx	r5
   837ba:	b930      	cbnz	r0, 837ca <matchPattern+0x8a>
            compareStr(pattern, pattern_sep_pos_short, str, str_len);
   837bc:	4640      	mov	r0, r8
   837be:	4621      	mov	r1, r4
   837c0:	464a      	mov	r2, r9
   837c2:	4653      	mov	r3, sl
   837c4:	462c      	mov	r4, r5
   837c6:	47a8      	blx	r5
   837c8:	e001      	b.n	837ce <matchPattern+0x8e>
 * @param str_len
 * @return 
 */
bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len) {
    int pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
    return compareStr(pattern, pattern_len, str, str_len) ||
   837ca:	f04f 0001 	mov.w	r0, #1
            compareStr(pattern, pattern_sep_pos_short, str, str_len);
}
   837ce:	f000 0001 	and.w	r0, r0, #1
   837d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   837d6:	f104 0401 	add.w	r4, r4, #1
   837da:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   837de:	2b00      	cmp	r3, #0
   837e0:	d0e2      	beq.n	837a8 <matchPattern+0x68>
        if (islower((unsigned char)pattern[i])) {
   837e2:	18c1      	adds	r1, r0, r3
   837e4:	784d      	ldrb	r5, [r1, #1]
   837e6:	f005 0303 	and.w	r3, r5, #3
   837ea:	2b02      	cmp	r3, #2
   837ec:	d1ca      	bne.n	83784 <matchPattern+0x44>
   837ee:	e7db      	b.n	837a8 <matchPattern+0x68>
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorShortPos(const char * pattern, size_t len) {
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
   837f0:	f106 0401 	add.w	r4, r6, #1
   837f4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   837f8:	2b00      	cmp	r3, #0
   837fa:	d0d5      	beq.n	837a8 <matchPattern+0x68>
        if (islower((unsigned char)pattern[i])) {
   837fc:	18c1      	adds	r1, r0, r3
   837fe:	784d      	ldrb	r5, [r1, #1]
   83800:	f005 0303 	and.w	r3, r5, #3
   83804:	2b02      	cmp	r3, #2
   83806:	d1bd      	bne.n	83784 <matchPattern+0x44>
   83808:	e7ce      	b.n	837a8 <matchPattern+0x68>
   8380a:	bf00      	nop

0008380c <matchCommand>:
 * @param pattern
 * @param cmd - command
 * @param len - max search length
 * @return TRUE if pattern matches, FALSE otherwise
 */
bool_t matchCommand(const char * pattern, const char * cmd, size_t len) {
   8380c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83810:	4605      	mov	r5, r0
   83812:	460c      	mov	r4, r1
   83814:	4616      	mov	r6, r2
    int result = FALSE;
    
    const char * pattern_ptr = pattern;
    int pattern_len = strlen(pattern);
   83816:	f649 73a9 	movw	r3, #40873	; 0x9fa9
   8381a:	f2c0 0308 	movt	r3, #8
   8381e:	4798      	blx	r3
    const char * pattern_end = pattern + pattern_len;
   83820:	eb05 0900 	add.w	r9, r5, r0
    
    const char * cmd_ptr = cmd;
    size_t cmd_len = SCPI_strnlen(cmd, len);
   83824:	4620      	mov	r0, r4
   83826:	4631      	mov	r1, r6
   83828:	f24a 022b 	movw	r2, #41003	; 0xa02b
   8382c:	f2c0 0208 	movt	r2, #8
   83830:	4790      	blx	r2
    const char * cmd_end = cmd + cmd_len;
   83832:	eb04 0a00 	add.w	sl, r4, r0
    
    /* TODO: now it is possible to send command ":*IDN?" which is incorrect */
    if (iscolon(cmd_ptr[0])) {
   83836:	7820      	ldrb	r0, [r4, #0]
   83838:	283a      	cmp	r0, #58	; 0x3a
        cmd_len --;
        cmd_ptr ++;
   8383a:	bf08      	it	eq
   8383c:	3401      	addeq	r4, #1
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorPos(const char * pattern, size_t len) {
    
    char * separator = strnpbrk(pattern, len, "?:[]");
   8383e:	f64c 3b1c 	movw	fp, #51996	; 0xcb1c
   83842:	f2c0 0b08 	movt	fp, #8
   83846:	f243 3849 	movw	r8, #13129	; 0x3349
   8384a:	f2c0 0808 	movt	r8, #8
        cmd_len --;
        cmd_ptr ++;
    }
    
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
   8384e:	ebc5 0709 	rsb	r7, r5, r9
 * @param len - max search length
 * @return position of separator or len
 */
size_t patternSeparatorPos(const char * pattern, size_t len) {
    
    char * separator = strnpbrk(pattern, len, "?:[]");
   83852:	4628      	mov	r0, r5
   83854:	4639      	mov	r1, r7
   83856:	465a      	mov	r2, fp
   83858:	47c0      	blx	r8
    if (separator == NULL) {
   8385a:	b100      	cbz	r0, 8385e <matchCommand+0x52>
        return len;
    } else {
        return separator - pattern;
   8385c:	1b47      	subs	r7, r0, r5
        cmd_ptr ++;
    }
    
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
        int cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_end - cmd_ptr);
   8385e:	ebc4 060a 	rsb	r6, r4, sl
 * @param cmd - input command
 * @param len - max search length
 * @return position of separator or len
 */
size_t cmdSeparatorPos(const char * cmd, size_t len) {
    char * separator = strnpbrk(cmd, len, ":?");
   83862:	4620      	mov	r0, r4
   83864:	4631      	mov	r1, r6
   83866:	4a1b      	ldr	r2, [pc, #108]	; (838d4 <matchCommand+0xc8>)
   83868:	47c0      	blx	r8
    size_t result;
    if (separator == NULL) {
   8386a:	b100      	cbz	r0, 8386e <matchCommand+0x62>
        result = len;
    } else {
        result = separator - cmd;
   8386c:	1b06      	subs	r6, r0, r4
    
    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_end - pattern_ptr);
        int cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_end - cmd_ptr);
        
        if (matchPattern(pattern_ptr, pattern_sep_pos, cmd_ptr, cmd_sep_pos)) {
   8386e:	4628      	mov	r0, r5
   83870:	4639      	mov	r1, r7
   83872:	4622      	mov	r2, r4
   83874:	4633      	mov	r3, r6
   83876:	f243 7c41 	movw	ip, #14145	; 0x3741
   8387a:	f2c0 0c08 	movt	ip, #8
   8387e:	47e0      	blx	ip
   83880:	b1c0      	cbz	r0, 838b4 <matchCommand+0xa8>
            pattern_ptr = pattern_ptr + pattern_sep_pos;
   83882:	19ed      	adds	r5, r5, r7
            cmd_ptr = cmd_ptr + cmd_sep_pos;
   83884:	19a4      	adds	r4, r4, r6
            result = TRUE;
            
            /* command is complete */
            if ((pattern_ptr == pattern_end) && (cmd_ptr >= cmd_end)) {
   83886:	454d      	cmp	r5, r9
   83888:	d105      	bne.n	83896 <matchCommand+0x8a>
   8388a:	45a2      	cmp	sl, r4
   8388c:	bf8c      	ite	hi
   8388e:	2000      	movhi	r0, #0
   83890:	2001      	movls	r0, #1
   83892:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                result = FALSE;
                break;
            }
            
            /* command complete, but pattern not */
            if (cmd_ptr >= cmd_end) {
   83896:	45a2      	cmp	sl, r4
   83898:	d910      	bls.n	838bc <matchCommand+0xb0>
                result = FALSE;
                break;
            }
            
            /* both command and patter contains command separator at this position */
            if ((pattern_ptr[0] == cmd_ptr[0]) && ((pattern_ptr[0] == ':') || (pattern_ptr[0] == '?'))) {
   8389a:	7828      	ldrb	r0, [r5, #0]
   8389c:	7822      	ldrb	r2, [r4, #0]
   8389e:	4282      	cmp	r2, r0
   838a0:	d110      	bne.n	838c4 <matchCommand+0xb8>
   838a2:	283a      	cmp	r0, #58	; 0x3a
   838a4:	d001      	beq.n	838aa <matchCommand+0x9e>
   838a6:	283f      	cmp	r0, #63	; 0x3f
   838a8:	d110      	bne.n	838cc <matchCommand+0xc0>
                pattern_ptr = pattern_ptr + 1;
   838aa:	f105 0501 	add.w	r5, r5, #1
                cmd_ptr = cmd_ptr + 1;
   838ae:	f104 0401 	add.w	r4, r4, #1
   838b2:	e7cc      	b.n	8384e <matchCommand+0x42>
            } else {
                result = FALSE;
                break;
            }
        } else {
            result = FALSE;
   838b4:	f04f 0000 	mov.w	r0, #0
   838b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                break;
            }
            
            /* command complete, but pattern not */
            if (cmd_ptr >= cmd_end) {
                result = FALSE;
   838bc:	f04f 0000 	mov.w	r0, #0
   838c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            /* both command and patter contains command separator at this position */
            if ((pattern_ptr[0] == cmd_ptr[0]) && ((pattern_ptr[0] == ':') || (pattern_ptr[0] == '?'))) {
                pattern_ptr = pattern_ptr + 1;
                cmd_ptr = cmd_ptr + 1;
            } else {
                result = FALSE;
   838c4:	f04f 0000 	mov.w	r0, #0
   838c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   838cc:	f04f 0000 	mov.w	r0, #0
            break;
        }
    }
    
    return result;
}
   838d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   838d4:	0008cb24 	.word	0x0008cb24

000838d8 <SCPI_GetModuleType>:
 #include <string.h>
 #include <math.h>
 #include "asf.h"
 
 scpi_result_t SCPI_GetModuleType(scpi_t * context)
 {
   838d8:	b538      	push	{r3, r4, r5, lr}
	 printf("High speed dual delay lines\x0D");
   838da:	f641 25e4 	movw	r5, #6884	; 0x1ae4
   838de:	f2c2 0507 	movt	r5, #8199	; 0x2007
   838e2:	f64c 3428 	movw	r4, #52008	; 0xcb28
   838e6:	f2c0 0408 	movt	r4, #8
   838ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   838ec:	6028      	str	r0, [r5, #0]
   838ee:	6069      	str	r1, [r5, #4]
   838f0:	60aa      	str	r2, [r5, #8]
   838f2:	60eb      	str	r3, [r5, #12]
   838f4:	cc07      	ldmia	r4!, {r0, r1, r2}
   838f6:	6128      	str	r0, [r5, #16]
   838f8:	6169      	str	r1, [r5, #20]
   838fa:	61aa      	str	r2, [r5, #24]
   838fc:	7823      	ldrb	r3, [r4, #0]
   838fe:	772b      	strb	r3, [r5, #28]
   83900:	4628      	mov	r0, r5
   83902:	f644 014d 	movw	r1, #18509	; 0x484d
   83906:	f2c0 0108 	movt	r1, #8
   8390a:	4788      	blx	r1
	 return SCPI_RES_OK;
 }
   8390c:	f04f 0001 	mov.w	r0, #1
   83910:	bd38      	pop	{r3, r4, r5, pc}
   83912:	bf00      	nop

00083914 <SCPI_GetModuleName>:

scpi_result_t SCPI_GetModuleName(scpi_t * context)
{
   83914:	b538      	push	{r3, r4, r5, lr}
	printf("High speed dual delay lines\x0D");
   83916:	f641 25e4 	movw	r5, #6884	; 0x1ae4
   8391a:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8391e:	f64c 3428 	movw	r4, #52008	; 0xcb28
   83922:	f2c0 0408 	movt	r4, #8
   83926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   83928:	6028      	str	r0, [r5, #0]
   8392a:	6069      	str	r1, [r5, #4]
   8392c:	60aa      	str	r2, [r5, #8]
   8392e:	60eb      	str	r3, [r5, #12]
   83930:	cc07      	ldmia	r4!, {r0, r1, r2}
   83932:	6128      	str	r0, [r5, #16]
   83934:	6169      	str	r1, [r5, #20]
   83936:	61aa      	str	r2, [r5, #24]
   83938:	7823      	ldrb	r3, [r4, #0]
   8393a:	772b      	strb	r3, [r5, #28]
   8393c:	4628      	mov	r0, r5
   8393e:	f644 014d 	movw	r1, #18509	; 0x484d
   83942:	f2c0 0108 	movt	r1, #8
   83946:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83948:	f04f 0001 	mov.w	r0, #1
   8394c:	bd38      	pop	{r3, r4, r5, pc}
   8394e:	bf00      	nop

00083950 <SCPI_GetModuleDescription>:

scpi_result_t SCPI_GetModuleDescription(scpi_t * context)
{
   83950:	b538      	push	{r3, r4, r5, lr}
	printf("High speed dual delay lines\x0D");
   83952:	f641 25e4 	movw	r5, #6884	; 0x1ae4
   83956:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8395a:	f64c 3428 	movw	r4, #52008	; 0xcb28
   8395e:	f2c0 0408 	movt	r4, #8
   83962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   83964:	6028      	str	r0, [r5, #0]
   83966:	6069      	str	r1, [r5, #4]
   83968:	60aa      	str	r2, [r5, #8]
   8396a:	60eb      	str	r3, [r5, #12]
   8396c:	cc07      	ldmia	r4!, {r0, r1, r2}
   8396e:	6128      	str	r0, [r5, #16]
   83970:	6169      	str	r1, [r5, #20]
   83972:	61aa      	str	r2, [r5, #24]
   83974:	7823      	ldrb	r3, [r4, #0]
   83976:	772b      	strb	r3, [r5, #28]
   83978:	4628      	mov	r0, r5
   8397a:	f644 014d 	movw	r1, #18509	; 0x484d
   8397e:	f2c0 0108 	movt	r1, #8
   83982:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83984:	f04f 0001 	mov.w	r0, #1
   83988:	bd38      	pop	{r3, r4, r5, pc}
   8398a:	bf00      	nop

0008398c <SCPI_GetModuleSN>:

scpi_result_t SCPI_GetModuleSN(scpi_t * context)
{
   8398c:	b508      	push	{r3, lr}
	printf("0x0000\x0D");
   8398e:	f641 22e4 	movw	r2, #6884	; 0x1ae4
   83992:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83996:	f64c 3348 	movw	r3, #52040	; 0xcb48
   8399a:	f2c0 0308 	movt	r3, #8
   8399e:	cb03      	ldmia	r3!, {r0, r1}
   839a0:	6010      	str	r0, [r2, #0]
   839a2:	6051      	str	r1, [r2, #4]
   839a4:	4610      	mov	r0, r2
   839a6:	f644 014d 	movw	r1, #18509	; 0x484d
   839aa:	f2c0 0108 	movt	r1, #8
   839ae:	4788      	blx	r1
	return SCPI_RES_OK;
}
   839b0:	f04f 0001 	mov.w	r0, #1
   839b4:	bd08      	pop	{r3, pc}
   839b6:	bf00      	nop

000839b8 <SCPI_GetDissipatedPower>:

scpi_result_t SCPI_GetDissipatedPower(scpi_t * context)
{
   839b8:	b508      	push	{r3, lr}
	printf("840mW\x0D");
   839ba:	f641 23e4 	movw	r3, #6884	; 0x1ae4
   839be:	f2c2 0307 	movt	r3, #8199	; 0x2007
   839c2:	f64c 3250 	movw	r2, #52048	; 0xcb50
   839c6:	f2c0 0208 	movt	r2, #8
   839ca:	6810      	ldr	r0, [r2, #0]
   839cc:	6018      	str	r0, [r3, #0]
   839ce:	8891      	ldrh	r1, [r2, #4]
   839d0:	7992      	ldrb	r2, [r2, #6]
   839d2:	8099      	strh	r1, [r3, #4]
   839d4:	719a      	strb	r2, [r3, #6]
   839d6:	4618      	mov	r0, r3
   839d8:	f644 034d 	movw	r3, #18509	; 0x484d
   839dc:	f2c0 0308 	movt	r3, #8
   839e0:	4798      	blx	r3
	return SCPI_RES_OK;
}
   839e2:	f04f 0001 	mov.w	r0, #1
   839e6:	bd08      	pop	{r3, pc}

000839e8 <SCPI_GetMaxCurrent>:

scpi_result_t SCPI_GetMaxCurrent(scpi_t * context)
{
   839e8:	b508      	push	{r3, lr}
	printf("0mA\x0D");
   839ea:	f641 23e4 	movw	r3, #6884	; 0x1ae4
   839ee:	f2c2 0307 	movt	r3, #8199	; 0x2007
   839f2:	f64c 3258 	movw	r2, #52056	; 0xcb58
   839f6:	f2c0 0208 	movt	r2, #8
   839fa:	6810      	ldr	r0, [r2, #0]
   839fc:	6018      	str	r0, [r3, #0]
   839fe:	7911      	ldrb	r1, [r2, #4]
   83a00:	7119      	strb	r1, [r3, #4]
   83a02:	4618      	mov	r0, r3
   83a04:	f644 034d 	movw	r3, #18509	; 0x484d
   83a08:	f2c0 0308 	movt	r3, #8
   83a0c:	4798      	blx	r3
	return SCPI_RES_OK;
}
   83a0e:	f04f 0001 	mov.w	r0, #1
   83a12:	bd08      	pop	{r3, pc}

00083a14 <SCPI_GetNomCurrent>:

scpi_result_t SCPI_GetNomCurrent(scpi_t * context)
{
   83a14:	b508      	push	{r3, lr}
	printf("0mA\x0D");
   83a16:	f641 23e4 	movw	r3, #6884	; 0x1ae4
   83a1a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83a1e:	f64c 3258 	movw	r2, #52056	; 0xcb58
   83a22:	f2c0 0208 	movt	r2, #8
   83a26:	6810      	ldr	r0, [r2, #0]
   83a28:	6018      	str	r0, [r3, #0]
   83a2a:	7911      	ldrb	r1, [r2, #4]
   83a2c:	7119      	strb	r1, [r3, #4]
   83a2e:	4618      	mov	r0, r3
   83a30:	f644 034d 	movw	r3, #18509	; 0x484d
   83a34:	f2c0 0308 	movt	r3, #8
   83a38:	4798      	blx	r3
	return SCPI_RES_OK;
}
   83a3a:	f04f 0001 	mov.w	r0, #1
   83a3e:	bd08      	pop	{r3, pc}

00083a40 <SCPI_GetSDCardStatus>:

scpi_result_t SCPI_GetSDCardStatus(scpi_t * context)
{
   83a40:	b508      	push	{r3, lr}
	printf("OK\x0D");
   83a42:	f641 23e4 	movw	r3, #6884	; 0x1ae4
   83a46:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83a4a:	f64c 3260 	movw	r2, #52064	; 0xcb60
   83a4e:	f2c0 0208 	movt	r2, #8
   83a52:	6810      	ldr	r0, [r2, #0]
   83a54:	6018      	str	r0, [r3, #0]
   83a56:	4618      	mov	r0, r3
   83a58:	f644 014d 	movw	r1, #18509	; 0x484d
   83a5c:	f2c0 0108 	movt	r1, #8
   83a60:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83a62:	f04f 0001 	mov.w	r0, #1
   83a66:	bd08      	pop	{r3, pc}

00083a68 <SCPI_LedStatus>:

scpi_result_t SCPI_LedStatus(scpi_t * context)
{
   83a68:	b508      	push	{r3, lr}
	printf("OK\x0D");
   83a6a:	f641 23e4 	movw	r3, #6884	; 0x1ae4
   83a6e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   83a72:	f64c 3260 	movw	r2, #52064	; 0xcb60
   83a76:	f2c0 0208 	movt	r2, #8
   83a7a:	6810      	ldr	r0, [r2, #0]
   83a7c:	6018      	str	r0, [r3, #0]
   83a7e:	4618      	mov	r0, r3
   83a80:	f644 014d 	movw	r1, #18509	; 0x484d
   83a84:	f2c0 0108 	movt	r1, #8
   83a88:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83a8a:	f04f 0001 	mov.w	r0, #1
   83a8e:	bd08      	pop	{r3, pc}

00083a90 <SCPI_ButtonStatus>:

scpi_result_t SCPI_ButtonStatus(scpi_t * context)
{
   83a90:	b508      	push	{r3, lr}
	if(get_user_button_status() == RETURN_OK)
   83a92:	f242 537d 	movw	r3, #9597	; 0x257d
   83a96:	f2c0 0308 	movt	r3, #8
   83a9a:	4798      	blx	r3
   83a9c:	2801      	cmp	r0, #1
   83a9e:	d111      	bne.n	83ac4 <SCPI_ButtonStatus+0x34>
	{
		printf("pushed\x0D");
   83aa0:	f641 22e4 	movw	r2, #6884	; 0x1ae4
   83aa4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83aa8:	f64c 3364 	movw	r3, #52068	; 0xcb64
   83aac:	f2c0 0308 	movt	r3, #8
   83ab0:	cb03      	ldmia	r3!, {r0, r1}
   83ab2:	6010      	str	r0, [r2, #0]
   83ab4:	6051      	str	r1, [r2, #4]
   83ab6:	4610      	mov	r0, r2
   83ab8:	f644 014d 	movw	r1, #18509	; 0x484d
   83abc:	f2c0 0108 	movt	r1, #8
   83ac0:	4788      	blx	r1
   83ac2:	e012      	b.n	83aea <SCPI_ButtonStatus+0x5a>
	} 
	else
	{
		printf("released\x0D");
   83ac4:	f641 22e4 	movw	r2, #6884	; 0x1ae4
   83ac8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   83acc:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   83ad0:	f2c0 0308 	movt	r3, #8
   83ad4:	cb03      	ldmia	r3!, {r0, r1}
   83ad6:	6010      	str	r0, [r2, #0]
   83ad8:	6051      	str	r1, [r2, #4]
   83ada:	8818      	ldrh	r0, [r3, #0]
   83adc:	8110      	strh	r0, [r2, #8]
   83ade:	4610      	mov	r0, r2
   83ae0:	f644 014d 	movw	r1, #18509	; 0x484d
   83ae4:	f2c0 0108 	movt	r1, #8
   83ae8:	4788      	blx	r1
	}
	return SCPI_RES_OK;
}
   83aea:	f04f 0001 	mov.w	r0, #1
   83aee:	bd08      	pop	{r3, pc}

00083af0 <SCPI_EEPROM_Read>:

scpi_result_t SCPI_EEPROM_Read(scpi_t * context)
{
	// TBD...
	return SCPI_RES_OK;
}
   83af0:	f04f 0001 	mov.w	r0, #1
   83af4:	4770      	bx	lr
   83af6:	bf00      	nop

00083af8 <SCPI_EEPROM_Write>:

scpi_result_t SCPI_EEPROM_Write(scpi_t * context)
{
	// TBD...
	return SCPI_RES_OK;
}
   83af8:	f04f 0001 	mov.w	r0, #1
   83afc:	4770      	bx	lr
   83afe:	bf00      	nop

00083b00 <SCPI_SetPower>:

scpi_result_t SCPI_SetPower(scpi_t * context)
{
   83b00:	b530      	push	{r4, r5, lr}
   83b02:	b083      	sub	sp, #12
	const char * param;
	size_t param_len;

	if(!SCPI_ParamString(context, &param, &param_len, true)) 
   83b04:	a901      	add	r1, sp, #4
   83b06:	466a      	mov	r2, sp
   83b08:	f04f 0301 	mov.w	r3, #1
   83b0c:	f243 2461 	movw	r4, #12897	; 0x3261
   83b10:	f2c0 0408 	movt	r4, #8
   83b14:	47a0      	blx	r4
   83b16:	2800      	cmp	r0, #0
   83b18:	d039      	beq.n	83b8e <SCPI_SetPower+0x8e>
		return SCPI_RES_ERR;
		
	if(param_len >= 2)
   83b1a:	9c00      	ldr	r4, [sp, #0]
   83b1c:	2c01      	cmp	r4, #1
   83b1e:	d939      	bls.n	83b94 <SCPI_SetPower+0x94>
	{
		if(strncmp(param, "ON", 2) == 0)
   83b20:	9d01      	ldr	r5, [sp, #4]
   83b22:	4628      	mov	r0, r5
   83b24:	f64c 3178 	movw	r1, #52088	; 0xcb78
   83b28:	f2c0 0108 	movt	r1, #8
   83b2c:	f04f 0202 	mov.w	r2, #2
   83b30:	f649 73fd 	movw	r3, #40957	; 0x9ffd
   83b34:	f2c0 0308 	movt	r3, #8
   83b38:	4798      	blx	r3
   83b3a:	b960      	cbnz	r0, 83b56 <SCPI_SetPower+0x56>
		{
			enable_12v();
   83b3c:	f242 5391 	movw	r3, #9617	; 0x2591
   83b40:	f2c0 0308 	movt	r3, #8
   83b44:	4798      	blx	r3
			init_module_peripherals_ap();
   83b46:	f242 30c9 	movw	r0, #9161	; 0x23c9
   83b4a:	f2c0 0008 	movt	r0, #8
   83b4e:	4780      	blx	r0
			return SCPI_RES_OK;
   83b50:	f04f 0001 	mov.w	r0, #1
   83b54:	e026      	b.n	83ba4 <SCPI_SetPower+0xa4>
		}
		else if((param_len > 2) && (strncmp(param, "OFF", 3) == 0))
   83b56:	2c02      	cmp	r4, #2
   83b58:	d91f      	bls.n	83b9a <SCPI_SetPower+0x9a>
   83b5a:	4628      	mov	r0, r5
   83b5c:	f64c 317c 	movw	r1, #52092	; 0xcb7c
   83b60:	f2c0 0108 	movt	r1, #8
   83b64:	f04f 0203 	mov.w	r2, #3
   83b68:	f649 73fd 	movw	r3, #40957	; 0x9ffd
   83b6c:	f2c0 0308 	movt	r3, #8
   83b70:	4798      	blx	r3
   83b72:	b9a8      	cbnz	r0, 83ba0 <SCPI_SetPower+0xa0>
		{
			deinit_module_peripherals();
   83b74:	f242 31cd 	movw	r1, #9165	; 0x23cd
   83b78:	f2c0 0108 	movt	r1, #8
   83b7c:	4788      	blx	r1
			disable_12v();
   83b7e:	f242 52a1 	movw	r2, #9633	; 0x25a1
   83b82:	f2c0 0208 	movt	r2, #8
   83b86:	4790      	blx	r2
			return SCPI_RES_OK;
   83b88:	f04f 0001 	mov.w	r0, #1
   83b8c:	e00a      	b.n	83ba4 <SCPI_SetPower+0xa4>
{
	const char * param;
	size_t param_len;

	if(!SCPI_ParamString(context, &param, &param_len, true)) 
		return SCPI_RES_ERR;
   83b8e:	f04f 00ff 	mov.w	r0, #255	; 0xff
   83b92:	e007      	b.n	83ba4 <SCPI_SetPower+0xa4>
			return SCPI_RES_ERR;
		}
	}
	else
	{
		return SCPI_RES_OK;
   83b94:	f04f 0001 	mov.w	r0, #1
   83b98:	e004      	b.n	83ba4 <SCPI_SetPower+0xa4>
			disable_12v();
			return SCPI_RES_OK;
		}
		else
		{
			return SCPI_RES_ERR;
   83b9a:	f04f 00ff 	mov.w	r0, #255	; 0xff
   83b9e:	e001      	b.n	83ba4 <SCPI_SetPower+0xa4>
   83ba0:	f04f 00ff 	mov.w	r0, #255	; 0xff
	{
		return SCPI_RES_OK;
	}
	
	return SCPI_RES_OK;
}
   83ba4:	b240      	sxtb	r0, r0
   83ba6:	b003      	add	sp, #12
   83ba8:	bd30      	pop	{r4, r5, pc}
   83baa:	bf00      	nop

00083bac <SCPI_SetUserLed>:

scpi_result_t SCPI_SetUserLed(scpi_t * context)
{
   83bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83bb0:	b084      	sub	sp, #16
   83bb2:	4604      	mov	r4, r0
	uint32_t param1, param2, param3;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
   83bb4:	a903      	add	r1, sp, #12
   83bb6:	f04f 0201 	mov.w	r2, #1
   83bba:	f243 23d1 	movw	r3, #13009	; 0x32d1
   83bbe:	f2c0 0308 	movt	r3, #8
   83bc2:	4798      	blx	r3
   83bc4:	2800      	cmp	r0, #0
   83bc6:	d046      	beq.n	83c56 <SCPI_SetUserLed+0xaa>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}

	// read second paraeter if present
	if (!SCPI_ParamInt(context, &param2, true)) {
   83bc8:	4620      	mov	r0, r4
   83bca:	a902      	add	r1, sp, #8
   83bcc:	f04f 0201 	mov.w	r2, #1
   83bd0:	f243 23d1 	movw	r3, #13009	; 0x32d1
   83bd4:	f2c0 0308 	movt	r3, #8
   83bd8:	4798      	blx	r3
   83bda:	2800      	cmp	r0, #0
   83bdc:	d03e      	beq.n	83c5c <SCPI_SetUserLed+0xb0>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}

	// read second paraeter if present
	if (!SCPI_ParamInt(context, &param3, true)) {
   83bde:	4620      	mov	r0, r4
   83be0:	a901      	add	r1, sp, #4
   83be2:	f04f 0201 	mov.w	r2, #1
   83be6:	f243 23d1 	movw	r3, #13009	; 0x32d1
   83bea:	f2c0 0308 	movt	r3, #8
   83bee:	4798      	blx	r3
   83bf0:	2800      	cmp	r0, #0
   83bf2:	d036      	beq.n	83c62 <SCPI_SetUserLed+0xb6>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}

	set_user_led_colour((uint16_t)round(param1), (uint16_t)round(param2), (uint16_t)round(param3));
   83bf4:	f649 495d 	movw	r9, #40029	; 0x9c5d
   83bf8:	f2c0 0908 	movt	r9, #8
   83bfc:	9803      	ldr	r0, [sp, #12]
   83bfe:	47c8      	blx	r9
   83c00:	f649 1845 	movw	r8, #39237	; 0x9945
   83c04:	f2c0 0808 	movt	r8, #8
   83c08:	47c0      	blx	r8
   83c0a:	4606      	mov	r6, r0
   83c0c:	460f      	mov	r7, r1
   83c0e:	9802      	ldr	r0, [sp, #8]
   83c10:	47c8      	blx	r9
   83c12:	47c0      	blx	r8
   83c14:	4604      	mov	r4, r0
   83c16:	460d      	mov	r5, r1
   83c18:	9801      	ldr	r0, [sp, #4]
   83c1a:	47c8      	blx	r9
   83c1c:	47c0      	blx	r8
   83c1e:	4680      	mov	r8, r0
   83c20:	4689      	mov	r9, r1
   83c22:	f649 5a49 	movw	sl, #40265	; 0x9d49
   83c26:	f2c0 0a08 	movt	sl, #8
   83c2a:	4630      	mov	r0, r6
   83c2c:	4639      	mov	r1, r7
   83c2e:	47d0      	blx	sl
   83c30:	b286      	uxth	r6, r0
   83c32:	4620      	mov	r0, r4
   83c34:	4629      	mov	r1, r5
   83c36:	47d0      	blx	sl
   83c38:	b284      	uxth	r4, r0
   83c3a:	4640      	mov	r0, r8
   83c3c:	4649      	mov	r1, r9
   83c3e:	47d0      	blx	sl
   83c40:	b282      	uxth	r2, r0
   83c42:	4630      	mov	r0, r6
   83c44:	4621      	mov	r1, r4
   83c46:	f242 5339 	movw	r3, #9529	; 0x2539
   83c4a:	f2c0 0308 	movt	r3, #8
   83c4e:	4798      	blx	r3
	return SCPI_RES_OK;
   83c50:	f04f 0001 	mov.w	r0, #1
   83c54:	e007      	b.n	83c66 <SCPI_SetUserLed+0xba>
	uint32_t param1, param2, param3;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param1, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83c56:	f04f 00ff 	mov.w	r0, #255	; 0xff
   83c5a:	e004      	b.n	83c66 <SCPI_SetUserLed+0xba>
	}

	// read second paraeter if present
	if (!SCPI_ParamInt(context, &param2, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83c5c:	f04f 00ff 	mov.w	r0, #255	; 0xff
   83c60:	e001      	b.n	83c66 <SCPI_SetUserLed+0xba>
	}

	// read second paraeter if present
	if (!SCPI_ParamInt(context, &param3, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83c62:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}

	set_user_led_colour((uint16_t)round(param1), (uint16_t)round(param2), (uint16_t)round(param3));
	return SCPI_RES_OK;
   83c66:	b240      	sxtb	r0, r0
   83c68:	b004      	add	sp, #16
   83c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83c6e:	bf00      	nop

00083c70 <SCPI_SetDelayChannelA>:
#include "peripherals_module.h"
#include <math.h>


scpi_result_t SCPI_SetDelayChannelA(scpi_t* context)
{
   83c70:	b500      	push	{lr}
   83c72:	b083      	sub	sp, #12
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   83c74:	a901      	add	r1, sp, #4
   83c76:	f04f 0201 	mov.w	r2, #1
   83c7a:	f243 23d1 	movw	r3, #13009	; 0x32d1
   83c7e:	f2c0 0308 	movt	r3, #8
   83c82:	4798      	blx	r3
   83c84:	b300      	cbz	r0, 83cc8 <SCPI_SetDelayChannelA+0x58>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	setup_channel1_delay((uint16_t)round(param/5));
   83c86:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   83c8a:	f6cc 41cc 	movt	r1, #52428	; 0xcccc
   83c8e:	9801      	ldr	r0, [sp, #4]
   83c90:	fba1 2300 	umull	r2, r3, r1, r0
   83c94:	ea4f 0093 	mov.w	r0, r3, lsr #2
   83c98:	f649 425d 	movw	r2, #40029	; 0x9c5d
   83c9c:	f2c0 0208 	movt	r2, #8
   83ca0:	4790      	blx	r2
   83ca2:	f649 1345 	movw	r3, #39237	; 0x9945
   83ca6:	f2c0 0308 	movt	r3, #8
   83caa:	4798      	blx	r3
   83cac:	f649 5249 	movw	r2, #40265	; 0x9d49
   83cb0:	f2c0 0208 	movt	r2, #8
   83cb4:	4790      	blx	r2
   83cb6:	b280      	uxth	r0, r0
   83cb8:	f242 3141 	movw	r1, #9025	; 0x2341
   83cbc:	f2c0 0108 	movt	r1, #8
   83cc0:	4788      	blx	r1
	return SCPI_RES_OK;
   83cc2:	f04f 0001 	mov.w	r0, #1
   83cc6:	e001      	b.n	83ccc <SCPI_SetDelayChannelA+0x5c>
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83cc8:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	
	setup_channel1_delay((uint16_t)round(param/5));
	return SCPI_RES_OK;
}
   83ccc:	b240      	sxtb	r0, r0
   83cce:	b003      	add	sp, #12
   83cd0:	bd00      	pop	{pc}
   83cd2:	bf00      	nop

00083cd4 <SCPI_SetDelayChannelB>:

scpi_result_t SCPI_SetDelayChannelB(scpi_t* context)
{
   83cd4:	b500      	push	{lr}
   83cd6:	b083      	sub	sp, #12
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   83cd8:	a901      	add	r1, sp, #4
   83cda:	f04f 0201 	mov.w	r2, #1
   83cde:	f243 23d1 	movw	r3, #13009	; 0x32d1
   83ce2:	f2c0 0308 	movt	r3, #8
   83ce6:	4798      	blx	r3
   83ce8:	b300      	cbz	r0, 83d2c <SCPI_SetDelayChannelB+0x58>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	setup_channel2_delay((uint16_t)round(param/5));
   83cea:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   83cee:	f6cc 41cc 	movt	r1, #52428	; 0xcccc
   83cf2:	9801      	ldr	r0, [sp, #4]
   83cf4:	fba1 2300 	umull	r2, r3, r1, r0
   83cf8:	ea4f 0093 	mov.w	r0, r3, lsr #2
   83cfc:	f649 425d 	movw	r2, #40029	; 0x9c5d
   83d00:	f2c0 0208 	movt	r2, #8
   83d04:	4790      	blx	r2
   83d06:	f649 1345 	movw	r3, #39237	; 0x9945
   83d0a:	f2c0 0308 	movt	r3, #8
   83d0e:	4798      	blx	r3
   83d10:	f649 5249 	movw	r2, #40265	; 0x9d49
   83d14:	f2c0 0208 	movt	r2, #8
   83d18:	4790      	blx	r2
   83d1a:	b280      	uxth	r0, r0
   83d1c:	f242 3165 	movw	r1, #9061	; 0x2365
   83d20:	f2c0 0108 	movt	r1, #8
   83d24:	4788      	blx	r1
	return SCPI_RES_OK;
   83d26:	f04f 0001 	mov.w	r0, #1
   83d2a:	e001      	b.n	83d30 <SCPI_SetDelayChannelB+0x5c>
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83d2c:	f04f 00ff 	mov.w	r0, #255	; 0xff
	}
	
	setup_channel2_delay((uint16_t)round(param/5));
	return SCPI_RES_OK;
}
   83d30:	b240      	sxtb	r0, r0
   83d32:	b003      	add	sp, #12
   83d34:	bd00      	pop	{pc}
   83d36:	bf00      	nop

00083d38 <SCPI_GetDelayChannelA>:

scpi_result_t SCPI_GetDelayChannelA(scpi_t* context)
{
   83d38:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", get_channel1_delay()*5);
   83d3a:	f242 3389 	movw	r3, #9097	; 0x2389
   83d3e:	f2c0 0308 	movt	r3, #8
   83d42:	4798      	blx	r3
   83d44:	f641 24e4 	movw	r4, #6884	; 0x1ae4
   83d48:	f2c2 0407 	movt	r4, #8199	; 0x2007
   83d4c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   83d50:	4620      	mov	r0, r4
   83d52:	f04f 0164 	mov.w	r1, #100	; 0x64
   83d56:	f64c 3280 	movw	r2, #52096	; 0xcb80
   83d5a:	f2c0 0208 	movt	r2, #8
   83d5e:	f649 7543 	movw	r5, #40771	; 0x9f43
   83d62:	f2c0 0508 	movt	r5, #8
   83d66:	47a8      	blx	r5
   83d68:	4620      	mov	r0, r4
   83d6a:	f644 014d 	movw	r1, #18509	; 0x484d
   83d6e:	f2c0 0108 	movt	r1, #8
   83d72:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83d74:	f04f 0001 	mov.w	r0, #1
   83d78:	bd38      	pop	{r3, r4, r5, pc}
   83d7a:	bf00      	nop

00083d7c <SCPI_GetDelayChannelB>:

scpi_result_t SCPI_GetDelayChannelB(scpi_t* context)
{
   83d7c:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", get_channel2_delay()*5);
   83d7e:	f242 33a9 	movw	r3, #9129	; 0x23a9
   83d82:	f2c0 0308 	movt	r3, #8
   83d86:	4798      	blx	r3
   83d88:	f641 24e4 	movw	r4, #6884	; 0x1ae4
   83d8c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   83d90:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   83d94:	4620      	mov	r0, r4
   83d96:	f04f 0164 	mov.w	r1, #100	; 0x64
   83d9a:	f64c 3280 	movw	r2, #52096	; 0xcb80
   83d9e:	f2c0 0208 	movt	r2, #8
   83da2:	f649 7543 	movw	r5, #40771	; 0x9f43
   83da6:	f2c0 0508 	movt	r5, #8
   83daa:	47a8      	blx	r5
   83dac:	4620      	mov	r0, r4
   83dae:	f644 014d 	movw	r1, #18509	; 0x484d
   83db2:	f2c0 0108 	movt	r1, #8
   83db6:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83db8:	f04f 0001 	mov.w	r0, #1
   83dbc:	bd38      	pop	{r3, r4, r5, pc}
   83dbe:	bf00      	nop

00083dc0 <SCPI_EnableChannelA>:

scpi_result_t SCPI_EnableChannelA(scpi_t* context)
{
   83dc0:	b500      	push	{lr}
   83dc2:	b083      	sub	sp, #12
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   83dc4:	a901      	add	r1, sp, #4
   83dc6:	f04f 0201 	mov.w	r2, #1
   83dca:	f243 23d1 	movw	r3, #13009	; 0x32d1
   83dce:	f2c0 0308 	movt	r3, #8
   83dd2:	4798      	blx	r3
   83dd4:	b1a8      	cbz	r0, 83e02 <SCPI_EnableChannelA+0x42>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if(param == 0)
   83dd6:	9801      	ldr	r0, [sp, #4]
   83dd8:	b948      	cbnz	r0, 83dee <SCPI_EnableChannelA+0x2e>
		enable_disable_ch1_delay(FALSE);
   83dda:	f04f 0000 	mov.w	r0, #0
   83dde:	f242 2215 	movw	r2, #8725	; 0x2215
   83de2:	f2c0 0208 	movt	r2, #8
   83de6:	4790      	blx	r2
	else
		enable_disable_ch1_delay(TRUE);
	
	return SCPI_RES_OK;
   83de8:	f04f 0301 	mov.w	r3, #1
   83dec:	e00b      	b.n	83e06 <SCPI_EnableChannelA+0x46>
	}
	
	if(param == 0)
		enable_disable_ch1_delay(FALSE);
	else
		enable_disable_ch1_delay(TRUE);
   83dee:	f04f 0001 	mov.w	r0, #1
   83df2:	f242 2115 	movw	r1, #8725	; 0x2215
   83df6:	f2c0 0108 	movt	r1, #8
   83dfa:	4788      	blx	r1
	
	return SCPI_RES_OK;
   83dfc:	f04f 0301 	mov.w	r3, #1
   83e00:	e001      	b.n	83e06 <SCPI_EnableChannelA+0x46>
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83e02:	f04f 03ff 	mov.w	r3, #255	; 0xff
		enable_disable_ch1_delay(FALSE);
	else
		enable_disable_ch1_delay(TRUE);
	
	return SCPI_RES_OK;
}
   83e06:	b258      	sxtb	r0, r3
   83e08:	b003      	add	sp, #12
   83e0a:	bd00      	pop	{pc}

00083e0c <SCPI_EnableChannelB>:

scpi_result_t SCPI_EnableChannelB(scpi_t* context)
{
   83e0c:	b500      	push	{lr}
   83e0e:	b083      	sub	sp, #12
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
   83e10:	a901      	add	r1, sp, #4
   83e12:	f04f 0201 	mov.w	r2, #1
   83e16:	f243 23d1 	movw	r3, #13009	; 0x32d1
   83e1a:	f2c0 0308 	movt	r3, #8
   83e1e:	4798      	blx	r3
   83e20:	b1a8      	cbz	r0, 83e4e <SCPI_EnableChannelB+0x42>
		// do something, if parameter not present
		return SCPI_RES_ERR;
	}
	
	if(param == 0)
   83e22:	9801      	ldr	r0, [sp, #4]
   83e24:	b948      	cbnz	r0, 83e3a <SCPI_EnableChannelB+0x2e>
		enable_disable_ch2_delay(FALSE);
   83e26:	f04f 0000 	mov.w	r0, #0
   83e2a:	f242 2251 	movw	r2, #8785	; 0x2251
   83e2e:	f2c0 0208 	movt	r2, #8
   83e32:	4790      	blx	r2
	else
		enable_disable_ch2_delay(TRUE);
	
	return SCPI_RES_OK;
   83e34:	f04f 0301 	mov.w	r3, #1
   83e38:	e00b      	b.n	83e52 <SCPI_EnableChannelB+0x46>
	}
	
	if(param == 0)
		enable_disable_ch2_delay(FALSE);
	else
		enable_disable_ch2_delay(TRUE);
   83e3a:	f04f 0001 	mov.w	r0, #1
   83e3e:	f242 2151 	movw	r1, #8785	; 0x2251
   83e42:	f2c0 0108 	movt	r1, #8
   83e46:	4788      	blx	r1
	
	return SCPI_RES_OK;
   83e48:	f04f 0301 	mov.w	r3, #1
   83e4c:	e001      	b.n	83e52 <SCPI_EnableChannelB+0x46>
	uint32_t param;
	
	// read first parameter if present
	if (!SCPI_ParamInt(context, &param, true)) {
		// do something, if parameter not present
		return SCPI_RES_ERR;
   83e4e:	f04f 03ff 	mov.w	r3, #255	; 0xff
		enable_disable_ch2_delay(FALSE);
	else
		enable_disable_ch2_delay(TRUE);
	
	return SCPI_RES_OK;
}
   83e52:	b258      	sxtb	r0, r3
   83e54:	b003      	add	sp, #12
   83e56:	bd00      	pop	{pc}

00083e58 <SCPI_GetEnableChannelA>:

scpi_result_t SCPI_GetEnableChannelA(scpi_t* context)
{
   83e58:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", is_channel1_delay_enabled());
   83e5a:	f242 2309 	movw	r3, #8713	; 0x2209
   83e5e:	f2c0 0308 	movt	r3, #8
   83e62:	4798      	blx	r3
   83e64:	4603      	mov	r3, r0
   83e66:	f641 24e4 	movw	r4, #6884	; 0x1ae4
   83e6a:	f2c2 0407 	movt	r4, #8199	; 0x2007
   83e6e:	4620      	mov	r0, r4
   83e70:	f04f 0164 	mov.w	r1, #100	; 0x64
   83e74:	f64c 3280 	movw	r2, #52096	; 0xcb80
   83e78:	f2c0 0208 	movt	r2, #8
   83e7c:	f649 7543 	movw	r5, #40771	; 0x9f43
   83e80:	f2c0 0508 	movt	r5, #8
   83e84:	47a8      	blx	r5
   83e86:	4620      	mov	r0, r4
   83e88:	f644 014d 	movw	r1, #18509	; 0x484d
   83e8c:	f2c0 0108 	movt	r1, #8
   83e90:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83e92:	f04f 0001 	mov.w	r0, #1
   83e96:	bd38      	pop	{r3, r4, r5, pc}

00083e98 <SCPI_GetEnableChannelB>:

scpi_result_t SCPI_GetEnableChannelB(scpi_t* context)
{
   83e98:	b538      	push	{r3, r4, r5, lr}
	printf("%u\x0D", is_channel1_delay_enabled());
   83e9a:	f242 2309 	movw	r3, #8713	; 0x2209
   83e9e:	f2c0 0308 	movt	r3, #8
   83ea2:	4798      	blx	r3
   83ea4:	4603      	mov	r3, r0
   83ea6:	f641 24e4 	movw	r4, #6884	; 0x1ae4
   83eaa:	f2c2 0407 	movt	r4, #8199	; 0x2007
   83eae:	4620      	mov	r0, r4
   83eb0:	f04f 0164 	mov.w	r1, #100	; 0x64
   83eb4:	f64c 3280 	movw	r2, #52096	; 0xcb80
   83eb8:	f2c0 0208 	movt	r2, #8
   83ebc:	f649 7543 	movw	r5, #40771	; 0x9f43
   83ec0:	f2c0 0508 	movt	r5, #8
   83ec4:	47a8      	blx	r5
   83ec6:	4620      	mov	r0, r4
   83ec8:	f644 014d 	movw	r1, #18509	; 0x484d
   83ecc:	f2c0 0108 	movt	r1, #8
   83ed0:	4788      	blx	r1
	return SCPI_RES_OK;
}
   83ed2:	f04f 0001 	mov.w	r0, #1
   83ed6:	bd38      	pop	{r3, r4, r5, pc}

00083ed8 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   83ed8:	b510      	push	{r4, lr}
   83eda:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
   83edc:	f240 4395 	movw	r3, #1173	; 0x495
   83ee0:	f2c0 0308 	movt	r3, #8
   83ee4:	4798      	blx	r3
   83ee6:	2801      	cmp	r0, #1
   83ee8:	d003      	beq.n	83ef2 <sd_mmc_test_unit_ready+0x1a>
   83eea:	b128      	cbz	r0, 83ef8 <sd_mmc_test_unit_ready+0x20>
   83eec:	2802      	cmp	r0, #2
   83eee:	d120      	bne.n	83f32 <sd_mmc_test_unit_ready+0x5a>
   83ef0:	e015      	b.n	83f1e <sd_mmc_test_unit_ready+0x46>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   83ef2:	f04f 0003 	mov.w	r0, #3
   83ef6:	bd10      	pop	{r4, pc}
Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   83ef8:	f640 4150 	movw	r1, #3152	; 0xc50
   83efc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   83f00:	5d0b      	ldrb	r3, [r1, r4]
   83f02:	b9cb      	cbnz	r3, 83f38 <sd_mmc_test_unit_ready+0x60>
			return CTRL_NO_PRESENT;
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   83f04:	4620      	mov	r0, r4
   83f06:	f241 022d 	movw	r2, #4141	; 0x102d
   83f0a:	f2c0 0208 	movt	r2, #8
   83f0e:	4790      	blx	r2
   83f10:	f000 0003 	and.w	r0, r0, #3
			return CTRL_GOOD;
   83f14:	2800      	cmp	r0, #0
   83f16:	bf0c      	ite	eq
   83f18:	2002      	moveq	r0, #2
   83f1a:	2000      	movne	r0, #0
   83f1c:	bd10      	pop	{r4, pc}

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   83f1e:	f640 4050 	movw	r0, #3152	; 0xc50
   83f22:	f2c2 0007 	movt	r0, #8199	; 0x2007
   83f26:	f04f 0200 	mov.w	r2, #0
   83f2a:	5502      	strb	r2, [r0, r4]
		return CTRL_NO_PRESENT;
   83f2c:	f04f 0002 	mov.w	r0, #2
   83f30:	bd10      	pop	{r4, pc}

	default:
		return CTRL_FAIL;
   83f32:	f04f 0001 	mov.w	r0, #1
   83f36:	bd10      	pop	{r4, pc}
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
			return CTRL_NO_PRESENT;
   83f38:	f04f 0002 	mov.w	r0, #2
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
	}
}
   83f3c:	bd10      	pop	{r4, pc}
   83f3e:	bf00      	nop

00083f40 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   83f40:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
   83f42:	f04f 0000 	mov.w	r0, #0
   83f46:	f643 63d9 	movw	r3, #16089	; 0x3ed9
   83f4a:	f2c0 0308 	movt	r3, #8
   83f4e:	4798      	blx	r3
}
   83f50:	bd08      	pop	{r3, pc}
   83f52:	bf00      	nop

00083f54 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   83f54:	b538      	push	{r3, r4, r5, lr}
   83f56:	4604      	mov	r4, r0
   83f58:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   83f5a:	f241 0359 	movw	r3, #4185	; 0x1059
   83f5e:	f2c0 0308 	movt	r3, #8
   83f62:	4798      	blx	r3
   83f64:	ea4f 0040 	mov.w	r0, r0, lsl #1
   83f68:	f100 31ff 	add.w	r1, r0, #4294967295
   83f6c:	6029      	str	r1, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
   83f6e:	4620      	mov	r0, r4
   83f70:	f643 62d9 	movw	r2, #16089	; 0x3ed9
   83f74:	f2c0 0208 	movt	r2, #8
   83f78:	4790      	blx	r2
}
   83f7a:	bd38      	pop	{r3, r4, r5, pc}

00083f7c <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   83f7c:	b508      	push	{r3, lr}
   83f7e:	4601      	mov	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
   83f80:	f04f 0000 	mov.w	r0, #0
   83f84:	f643 7355 	movw	r3, #16213	; 0x3f55
   83f88:	f2c0 0308 	movt	r3, #8
   83f8c:	4798      	blx	r3
}
   83f8e:	bd08      	pop	{r3, pc}

00083f90 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   83f90:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
   83f92:	f241 0385 	movw	r3, #4229	; 0x1085
   83f96:	f2c0 0308 	movt	r3, #8
   83f9a:	4798      	blx	r3
}
   83f9c:	bd08      	pop	{r3, pc}
   83f9e:	bf00      	nop

00083fa0 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   83fa0:	b508      	push	{r3, lr}
	return sd_mmc_wr_protect(0);
   83fa2:	f04f 0000 	mov.w	r0, #0
   83fa6:	f643 7391 	movw	r3, #16273	; 0x3f91
   83faa:	f2c0 0308 	movt	r3, #8
   83fae:	4798      	blx	r3
}
   83fb0:	bd08      	pop	{r3, pc}
   83fb2:	bf00      	nop

00083fb4 <sd_mmc_removal>:

bool sd_mmc_removal(uint8_t slot)
{
	UNUSED(slot);
	return true;
}
   83fb4:	f04f 0001 	mov.w	r0, #1
   83fb8:	4770      	bx	lr
   83fba:	bf00      	nop

00083fbc <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   83fbc:	b508      	push	{r3, lr}
	return sd_mmc_removal(0);
   83fbe:	f04f 0000 	mov.w	r0, #0
   83fc2:	f643 73b5 	movw	r3, #16309	; 0x3fb5
   83fc6:	f2c0 0308 	movt	r3, #8
   83fca:	4798      	blx	r3
}
   83fcc:	bd08      	pop	{r3, pc}
   83fce:	bf00      	nop

00083fd0 <sd_mmc_usb_read_10>:

COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
   83fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83fd4:	4614      	mov	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
   83fd6:	f241 038d 	movw	r3, #4237	; 0x108d
   83fda:	f2c0 0308 	movt	r3, #8
   83fde:	4798      	blx	r3
   83fe0:	4601      	mov	r1, r0
   83fe2:	b370      	cbz	r0, 84042 <sd_mmc_usb_read_10+0x72>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   83fe4:	2802      	cmp	r0, #2
   83fe6:	bf0c      	ite	eq
   83fe8:	2002      	moveq	r0, #2
   83fea:	2001      	movne	r0, #1
   83fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (nb_step) { // Skip last step
   83ff0:	b144      	cbz	r4, 84004 <sd_mmc_usb_read_10+0x34>
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   83ff2:	f014 0f01 	tst.w	r4, #1
   83ff6:	bf0c      	ite	eq
   83ff8:	4638      	moveq	r0, r7
   83ffa:	4640      	movne	r0, r8
   83ffc:	f04f 0101 	mov.w	r1, #1
   84000:	47b0      	blx	r6
   84002:	bba0      	cbnz	r0, 8406e <sd_mmc_usb_read_10+0x9e>
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
			}
		}
		if (!b_first_step) { // Skip first step
   84004:	b985      	cbnz	r5, 84028 <sd_mmc_usb_read_10+0x58>
			// RAM -> USB
			if (!udi_msc_trans_block(true,
   84006:	f014 0f01 	tst.w	r4, #1
   8400a:	bf0c      	ite	eq
   8400c:	4641      	moveq	r1, r8
   8400e:	4639      	movne	r1, r7
   84010:	f04f 0001 	mov.w	r0, #1
   84014:	f44f 7200 	mov.w	r2, #512	; 0x200
   84018:	f04f 0300 	mov.w	r3, #0
   8401c:	f246 4505 	movw	r5, #25605	; 0x6405
   84020:	f2c0 0508 	movt	r5, #8
   84024:	47a8      	blx	r5
   84026:	b330      	cbz	r0, 84076 <sd_mmc_usb_read_10+0xa6>
				return CTRL_FAIL;
			}
		} else {
			b_first_step = false;
		}
		if (nb_step) { // Skip last step
   84028:	b12c      	cbz	r4, 84036 <sd_mmc_usb_read_10+0x66>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks()) {
   8402a:	f241 2015 	movw	r0, #4629	; 0x1215
   8402e:	f2c0 0008 	movt	r0, #8
   84032:	4780      	blx	r0
   84034:	bb18      	cbnz	r0, 8407e <sd_mmc_usb_read_10+0xae>
   84036:	f104 34ff 	add.w	r4, r4, #4294967295
   8403a:	b2a4      	uxth	r4, r4
   8403c:	f04f 0500 	mov.w	r5, #0
   84040:	e00d      	b.n	8405e <sd_mmc_usb_read_10+0x8e>
COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
	bool b_first_step = true;
   84042:	f04f 0501 	mov.w	r5, #1
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (nb_step) { // Skip last step
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
   84046:	f241 16dd 	movw	r6, #4573	; 0x11dd
   8404a:	f2c0 0608 	movt	r6, #8
   8404e:	f241 68e4 	movw	r8, #5860	; 0x16e4
   84052:	f2c2 0807 	movt	r8, #8199	; 0x2007
   84056:	f641 07e4 	movw	r7, #6372	; 0x18e4
   8405a:	f2c2 0707 	movt	r7, #8199	; 0x2007
	default:
		return CTRL_FAIL;
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
   8405e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   84062:	4294      	cmp	r4, r2
   84064:	d1c4      	bne.n	83ff0 <sd_mmc_usb_read_10+0x20>
				return CTRL_FAIL;
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
   84066:	f04f 0000 	mov.w	r0, #0
   8406a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (nb_step--) {
		if (nb_step) { // Skip last step
			// MCI -> RAM
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
   8406e:	f04f 0001 	mov.w	r0, #1
   84072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!udi_msc_trans_block(true,
					((nb_step % 2) == 0) ?
					sector_buf_1 : sector_buf_0,
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
   84076:	f04f 0001 	mov.w	r0, #1
   8407a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else {
			b_first_step = false;
		}
		if (nb_step) { // Skip last step
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks()) {
				return CTRL_FAIL;
   8407e:	f04f 0001 	mov.w	r0, #1
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
}
   84082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84086:	bf00      	nop

00084088 <sd_mmc_usb_read_10_0>:

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
   84088:	b508      	push	{r3, lr}
   8408a:	4603      	mov	r3, r0
   8408c:	460a      	mov	r2, r1
	return sd_mmc_usb_read_10(0, addr, nb_sector);
   8408e:	f04f 0000 	mov.w	r0, #0
   84092:	4619      	mov	r1, r3
   84094:	f643 73d1 	movw	r3, #16337	; 0x3fd1
   84098:	f2c0 0308 	movt	r3, #8
   8409c:	4798      	blx	r3
}
   8409e:	bd08      	pop	{r3, pc}

000840a0 <sd_mmc_usb_write_10>:
{
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
   840a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   840a4:	4614      	mov	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
   840a6:	f241 2395 	movw	r3, #4757	; 0x1295
   840aa:	f2c0 0308 	movt	r3, #8
   840ae:	4798      	blx	r3
   840b0:	4601      	mov	r1, r0
   840b2:	b368      	cbz	r0, 84110 <sd_mmc_usb_write_10+0x70>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   840b4:	2802      	cmp	r0, #2
   840b6:	bf0c      	ite	eq
   840b8:	2002      	moveq	r0, #2
   840ba:	2001      	movne	r0, #1
   840bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
   840c0:	b945      	cbnz	r5, 840d4 <sd_mmc_usb_write_10+0x34>
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   840c2:	f014 0f01 	tst.w	r4, #1
   840c6:	bf0c      	ite	eq
   840c8:	4638      	moveq	r0, r7
   840ca:	4640      	movne	r0, r8
   840cc:	f04f 0101 	mov.w	r1, #1
   840d0:	47b0      	blx	r6
   840d2:	bb98      	cbnz	r0, 8413c <sd_mmc_usb_write_10+0x9c>
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
			}
		}
		if (nb_step) { // Skip last step
   840d4:	b17c      	cbz	r4, 840f6 <sd_mmc_usb_write_10+0x56>
			// USB -> RAM
			if (!udi_msc_trans_block(false,
   840d6:	f014 0f01 	tst.w	r4, #1
   840da:	bf0c      	ite	eq
   840dc:	4641      	moveq	r1, r8
   840de:	4639      	movne	r1, r7
   840e0:	f04f 0000 	mov.w	r0, #0
   840e4:	f44f 7200 	mov.w	r2, #512	; 0x200
   840e8:	4603      	mov	r3, r0
   840ea:	f246 4c05 	movw	ip, #25605	; 0x6405
   840ee:	f2c0 0c08 	movt	ip, #8
   840f2:	47e0      	blx	ip
   840f4:	b330      	cbz	r0, 84144 <sd_mmc_usb_write_10+0xa4>
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
			}
		}
		if (!b_first_step) { // Skip first step
   840f6:	b92d      	cbnz	r5, 84104 <sd_mmc_usb_write_10+0x64>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks()) {
   840f8:	f241 30a1 	movw	r0, #5025	; 0x13a1
   840fc:	f2c0 0008 	movt	r0, #8
   84100:	4780      	blx	r0
   84102:	bb18      	cbnz	r0, 8414c <sd_mmc_usb_write_10+0xac>
   84104:	f104 34ff 	add.w	r4, r4, #4294967295
   84108:	b2a4      	uxth	r4, r4
   8410a:	f04f 0500 	mov.w	r5, #0
   8410e:	e00d      	b.n	8412c <sd_mmc_usb_write_10+0x8c>
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
	bool b_first_step = true;
   84110:	f04f 0501 	mov.w	r5, #1
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
   84114:	f241 3669 	movw	r6, #4969	; 0x1369
   84118:	f2c0 0608 	movt	r6, #8
   8411c:	f241 68e4 	movw	r8, #5860	; 0x16e4
   84120:	f2c2 0807 	movt	r8, #8199	; 0x2007
   84124:	f641 07e4 	movw	r7, #6372	; 0x18e4
   84128:	f2c2 0707 	movt	r7, #8199	; 0x2007
	default:
		return CTRL_FAIL;
	}
	// Pipeline the 2 transfer in order to speed-up the performances
	nb_step = nb_sector + 1;
	while (nb_step--) {
   8412c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   84130:	4294      	cmp	r4, r2
   84132:	d1c5      	bne.n	840c0 <sd_mmc_usb_write_10+0x20>
			}
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
   84134:	f04f 0000 	mov.w	r0, #0
   84138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (nb_step--) {
		if (!b_first_step) { // Skip first step
			// RAM -> MCI
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
					sector_buf_0 : sector_buf_1, 1)) {
				return CTRL_FAIL;
   8413c:	f04f 0001 	mov.w	r0, #1
   84140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!udi_msc_trans_block(false,
					((nb_step % 2) == 0) ?
					sector_buf_1 : sector_buf_0,
					SD_MMC_BLOCK_SIZE,
					NULL)) {
				return CTRL_FAIL;
   84144:	f04f 0001 	mov.w	r0, #1
   84148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
		}
		if (!b_first_step) { // Skip first step
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks()) {
				return CTRL_FAIL;
   8414c:	f04f 0001 	mov.w	r0, #1
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
}
   84150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00084154 <sd_mmc_usb_write_10_0>:

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
   84154:	b508      	push	{r3, lr}
   84156:	4603      	mov	r3, r0
   84158:	460a      	mov	r2, r1
	return sd_mmc_usb_write_10(0, addr, nb_sector);
   8415a:	f04f 0000 	mov.w	r0, #0
   8415e:	4619      	mov	r1, r3
   84160:	f244 03a1 	movw	r3, #16545	; 0x40a1
   84164:	f2c0 0308 	movt	r3, #8
   84168:	4798      	blx	r3
}
   8416a:	bd08      	pop	{r3, pc}

0008416c <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
   8416c:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
   8416e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84172:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
   84174:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
   84176:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
   84178:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
   8417a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
   8417c:	f04f 0680 	mov.w	r6, #128	; 0x80
   84180:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
   84182:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
   84184:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
   84186:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
   84188:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
   8418a:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
   8418c:	f04f 0000 	mov.w	r0, #0
   84190:	6518      	str	r0, [r3, #80]	; 0x50
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
   84192:	f04f 0105 	mov.w	r1, #5
   84196:	6019      	str	r1, [r3, #0]
}
   84198:	bc70      	pop	{r4, r5, r6}
   8419a:	4770      	bx	lr

0008419c <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
   8419c:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
   8419e:	f001 033f 	and.w	r3, r1, #63	; 0x3f
   841a2:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
   841a4:	f411 7f80 	tst.w	r1, #256	; 0x100
   841a8:	d00c      	beq.n	841c4 <hsmci_send_cmd_execute+0x28>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
   841aa:	f411 6f00 	tst.w	r1, #2048	; 0x800
   841ae:	d002      	beq.n	841b6 <hsmci_send_cmd_execute+0x1a>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
   841b0:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
   841b4:	e006      	b.n	841c4 <hsmci_send_cmd_execute+0x28>
		} else if (cmd & SDMMC_RESP_BUSY) {
   841b6:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
   841ba:	bf14      	ite	ne
   841bc:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
   841c0:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
   841c4:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
   841c8:	bf18      	it	ne
   841ca:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
   841ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   841d2:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
   841d4:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
   841d6:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
   841d8:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
   841dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
   841de:	b152      	cbz	r2, 841f6 <hsmci_send_cmd_execute+0x5a>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
   841e0:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
   841e4:	d012      	beq.n	8420c <hsmci_send_cmd_execute+0x70>
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
   841e6:	f244 126d 	movw	r2, #16749	; 0x416d
   841ea:	f2c0 0208 	movt	r2, #8
   841ee:	4790      	blx	r2
				return false;
   841f0:	f04f 0000 	mov.w	r0, #0
   841f4:	bd08      	pop	{r3, pc}
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
   841f6:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
   841fa:	d007      	beq.n	8420c <hsmci_send_cmd_execute+0x70>
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
   841fc:	f244 116d 	movw	r1, #16749	; 0x416d
   84200:	f2c0 0108 	movt	r1, #8
   84204:	4788      	blx	r1
				return false;
   84206:	f04f 0000 	mov.w	r0, #0
   8420a:	bd08      	pop	{r3, pc}
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
   8420c:	f013 0f01 	tst.w	r3, #1
   84210:	d0e4      	beq.n	841dc <hsmci_send_cmd_execute+0x40>

	if (cmd & SDMMC_RESP_BUSY) {
   84212:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   84216:	d119      	bne.n	8424c <hsmci_send_cmd_execute+0xb0>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
   84218:	f04f 0001 	mov.w	r0, #1
   8421c:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 1000000;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
   8421e:	6c08      	ldr	r0, [r1, #64]	; 0x40
   84220:	f103 33ff 	add.w	r3, r3, #4294967295
		if (busy_wait-- == 0) {
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
			return false;
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
   84224:	f000 0230 	and.w	r2, r0, #48	; 0x30
   84228:	2a20      	cmp	r2, #32
   8422a:	d119      	bne.n	84260 <hsmci_send_cmd_execute+0xc4>
   8422c:	e00b      	b.n	84246 <hsmci_send_cmd_execute+0xaa>

	do {
		sr = HSMCI->HSMCI_SR;
		if (busy_wait-- == 0) {
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
   8422e:	f244 116d 	movw	r1, #16749	; 0x416d
   84232:	f2c0 0108 	movt	r1, #8
   84236:	4788      	blx	r1
			return false;
   84238:	f04f 0000 	mov.w	r0, #0
   8423c:	bd08      	pop	{r3, pc}
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
   8423e:	f000 0230 	and.w	r2, r0, #48	; 0x30
   84242:	2a20      	cmp	r2, #32
   84244:	d1eb      	bne.n	8421e <hsmci_send_cmd_execute+0x82>
	return true;
   84246:	f04f 0001 	mov.w	r0, #1
   8424a:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 1000000;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
   8424c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   84250:	6c00      	ldr	r0, [r0, #64]	; 0x40
   84252:	f244 2340 	movw	r3, #16960	; 0x4240
   84256:	f2c0 030f 	movt	r3, #15
   8425a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8425e:	e7ee      	b.n	8423e <hsmci_send_cmd_execute+0xa2>
   84260:	6c08      	ldr	r0, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
   84262:	3b01      	subs	r3, #1
   84264:	d1eb      	bne.n	8423e <hsmci_send_cmd_execute+0xa2>
   84266:	e7e2      	b.n	8422e <hsmci_send_cmd_execute+0x92>

00084268 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
   84268:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_HSMCI);
   8426a:	f04f 0015 	mov.w	r0, #21
   8426e:	f247 34bd 	movw	r4, #29629	; 0x73bd
   84272:	f2c0 0408 	movt	r4, #8
   84276:	47a0      	blx	r4
#ifdef HSMCI_SR_DMADONE
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_DMAC);
   84278:	f04f 0027 	mov.w	r0, #39	; 0x27
   8427c:	47a0      	blx	r4
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
   8427e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84282:	f04f 0272 	mov.w	r2, #114	; 0x72
   84286:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
   84288:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
   8428a:	f04f 0011 	mov.w	r0, #17
   8428e:	6558      	str	r0, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
   84290:	f44f 61e0 	mov.w	r1, #1792	; 0x700
   84294:	6059      	str	r1, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
   84296:	f04f 0205 	mov.w	r2, #5
   8429a:	601a      	str	r2, [r3, #0]
   8429c:	bd10      	pop	{r4, pc}
   8429e:	bf00      	nop

000842a0 <hsmci_get_bus_width>:
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
   842a0:	2800      	cmp	r0, #0
   842a2:	bf0c      	ite	eq
   842a4:	2004      	moveq	r0, #4
   842a6:	2000      	movne	r0, #0
   842a8:	4770      	bx	lr
   842aa:	bf00      	nop

000842ac <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
   842ac:	f04f 0001 	mov.w	r0, #1
   842b0:	4770      	bx	lr
   842b2:	bf00      	nop

000842b4 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
   842b4:	b133      	cbz	r3, 842c4 <hsmci_select_device+0x10>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
   842b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   842ba:	6d58      	ldr	r0, [r3, #84]	; 0x54
   842bc:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   842c0:	6558      	str	r0, [r3, #84]	; 0x54
   842c2:	e005      	b.n	842d0 <hsmci_select_device+0x1c>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
   842c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   842c8:	6d58      	ldr	r0, [r3, #84]	; 0x54
   842ca:	f420 7080 	bic.w	r0, r0, #256	; 0x100
   842ce:	6558      	str	r0, [r3, #84]	; 0x54
{
	uint32_t clkdiv;
	uint32_t rest;

	// Speed = MCK clock / (2 * (CLKDIV + 1))
	if (speed > 0) {
   842d0:	b181      	cbz	r1, 842f4 <hsmci_select_device+0x40>
		clkdiv = mck / (2 * speed);
   842d2:	ea4f 0141 	mov.w	r1, r1, lsl #1
   842d6:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
   842da:	f2c0 5301 	movt	r3, #1281	; 0x501
   842de:	fbb3 f0f1 	udiv	r0, r3, r1
		rest = mck % (2 * speed);
   842e2:	fb01 3110 	mls	r1, r1, r0, r3
		if (rest > 0) {
   842e6:	b109      	cbz	r1, 842ec <hsmci_select_device+0x38>
			// Ensure that the card speed not be higher than expected.
			clkdiv++;
   842e8:	f100 0001 	add.w	r0, r0, #1
		}
		if (clkdiv > 0) {
   842ec:	b120      	cbz	r0, 842f8 <hsmci_select_device+0x44>
			clkdiv -= 1;
   842ee:	f100 30ff 	add.w	r0, r0, #4294967295
   842f2:	e001      	b.n	842f8 <hsmci_select_device+0x44>
		}
	} else {
		clkdiv = 0;
   842f4:	f04f 0000 	mov.w	r0, #0
	}
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
   842f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   842fc:	6859      	ldr	r1, [r3, #4]
   842fe:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   84302:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
   84304:	6859      	ldr	r1, [r3, #4]
   84306:	b2c0      	uxtb	r0, r0
   84308:	4308      	orrs	r0, r1
   8430a:	6058      	str	r0, [r3, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
   8430c:	2a04      	cmp	r2, #4
   8430e:	d004      	beq.n	8431a <hsmci_select_device+0x66>
}

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
   84310:	2a08      	cmp	r2, #8
   84312:	bf0c      	ite	eq
   84314:	22c0      	moveq	r2, #192	; 0xc0
   84316:	2200      	movne	r2, #0
   84318:	e001      	b.n	8431e <hsmci_select_device+0x6a>
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
		break;

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
   8431a:	f04f 0280 	mov.w	r2, #128	; 0x80
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
   8431e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84322:	60da      	str	r2, [r3, #12]
   84324:	4770      	bx	lr
   84326:	bf00      	nop

00084328 <hsmci_deselect_device>:
}

void hsmci_deselect_device(uint8_t slot)
{
   84328:	4770      	bx	lr
   8432a:	bf00      	nop

0008432c <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
   8432c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84330:	685a      	ldr	r2, [r3, #4]
   84332:	f422 5060 	bic.w	r0, r2, #14336	; 0x3800
   84336:	6058      	str	r0, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
   84338:	f04f 0100 	mov.w	r1, #0
   8433c:	6119      	str	r1, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
   8433e:	f44f 6210 	mov.w	r2, #2304	; 0x900
   84342:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
   84344:	4618      	mov	r0, r3
   84346:	6c03      	ldr	r3, [r0, #64]	; 0x40
   84348:	f013 0f01 	tst.w	r3, #1
   8434c:	d0fb      	beq.n	84346 <hsmci_send_clock+0x1a>
}
   8434e:	4770      	bx	lr

00084350 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   84350:	b510      	push	{r4, lr}
   84352:	4604      	mov	r4, r0
   84354:	460a      	mov	r2, r1
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
   84356:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8435a:	6859      	ldr	r1, [r3, #4]
   8435c:	f421 5060 	bic.w	r0, r1, #14336	; 0x3800
   84360:	6058      	str	r0, [r3, #4]
#ifdef HSMCI_SR_DMADONE
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
   84362:	f04f 0000 	mov.w	r0, #0
   84366:	6518      	str	r0, [r3, #80]	; 0x50
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
#endif
	HSMCI->HSMCI_BLKR = 0;
   84368:	6198      	str	r0, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
   8436a:	4621      	mov	r1, r4
   8436c:	f244 139d 	movw	r3, #16797	; 0x419d
   84370:	f2c0 0308 	movt	r3, #8
   84374:	4798      	blx	r3
}
   84376:	bd10      	pop	{r4, pc}

00084378 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
   84378:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   8437c:	6a18      	ldr	r0, [r3, #32]
}
   8437e:	4770      	bx	lr

00084380 <hsmci_get_response_128>:
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   84380:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   84384:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   84386:	ea4f 6112 	mov.w	r1, r2, lsr #24
   8438a:	7001      	strb	r1, [r0, #0]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   8438c:	ea4f 4112 	mov.w	r1, r2, lsr #16
   84390:	7041      	strb	r1, [r0, #1]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   84392:	ea4f 2112 	mov.w	r1, r2, lsr #8
   84396:	7081      	strb	r1, [r0, #2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   84398:	70c2      	strb	r2, [r0, #3]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   8439a:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   8439c:	ea4f 6112 	mov.w	r1, r2, lsr #24
   843a0:	7101      	strb	r1, [r0, #4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   843a2:	ea4f 4112 	mov.w	r1, r2, lsr #16
   843a6:	7141      	strb	r1, [r0, #5]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   843a8:	ea4f 2112 	mov.w	r1, r2, lsr #8
   843ac:	7181      	strb	r1, [r0, #6]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   843ae:	71c2      	strb	r2, [r0, #7]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   843b0:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   843b2:	ea4f 6112 	mov.w	r1, r2, lsr #24
   843b6:	7201      	strb	r1, [r0, #8]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   843b8:	ea4f 4112 	mov.w	r1, r2, lsr #16
   843bc:	7241      	strb	r1, [r0, #9]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   843be:	ea4f 2112 	mov.w	r1, r2, lsr #8
   843c2:	7281      	strb	r1, [r0, #10]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   843c4:	72c2      	strb	r2, [r0, #11]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
   843c6:	6a1b      	ldr	r3, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
   843c8:	ea4f 6213 	mov.w	r2, r3, lsr #24
   843cc:	7302      	strb	r2, [r0, #12]
		response++;
		*response = (response_32 >> 16) & 0xFF;
   843ce:	ea4f 4113 	mov.w	r1, r3, lsr #16
   843d2:	7341      	strb	r1, [r0, #13]
		response++;
		*response = (response_32 >>  8) & 0xFF;
   843d4:	ea4f 2213 	mov.w	r2, r3, lsr #8
   843d8:	7382      	strb	r2, [r0, #14]
		response++;
		*response = (response_32 >>  0) & 0xFF;
   843da:	73c3      	strb	r3, [r0, #15]
   843dc:	4770      	bx	lr
   843de:	bf00      	nop

000843e0 <hsmci_adtc_start>:
		response++;
	}
}

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
   843e0:	b570      	push	{r4, r5, r6, lr}
   843e2:	4604      	mov	r4, r0
   843e4:	460d      	mov	r5, r1
	uint32_t cmdr;

#ifdef HSMCI_SR_DMADONE
	if (access_block) {
   843e6:	f89d 1010 	ldrb.w	r1, [sp, #16]
   843ea:	b129      	cbz	r1, 843f8 <hsmci_adtc_start+0x18>
		// Enable DMA for HSMCI
		HSMCI->HSMCI_DMA = HSMCI_DMA_DMAEN;
   843ec:	f44f 7080 	mov.w	r0, #256	; 0x100
   843f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   843f4:	6508      	str	r0, [r1, #80]	; 0x50
   843f6:	e004      	b.n	84402 <hsmci_adtc_start+0x22>
	} else {
		// Disable DMA for HSMCI
		HSMCI->HSMCI_DMA = 0;
   843f8:	f04f 0000 	mov.w	r0, #0
   843fc:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   84400:	6530      	str	r0, [r6, #80]	; 0x50
#endif

	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
   84402:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   84406:	6870      	ldr	r0, [r6, #4]
   84408:	f440 51c0 	orr.w	r1, r0, #6144	; 0x1800
   8440c:	6071      	str	r1, [r6, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
   8440e:	f012 0f03 	tst.w	r2, #3
   84412:	d004      	beq.n	8441e <hsmci_adtc_start+0x3e>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
   84414:	6870      	ldr	r0, [r6, #4]
   84416:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   8441a:	6071      	str	r1, [r6, #4]
   8441c:	e005      	b.n	8442a <hsmci_adtc_start+0x4a>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
   8441e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   84422:	6870      	ldr	r0, [r6, #4]
   84424:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
   84428:	6071      	str	r1, [r6, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
   8442a:	f404 4600 	and.w	r6, r4, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
   8442e:	2e00      	cmp	r6, #0
   84430:	bf0c      	ite	eq
   84432:	f44f 20a0 	moveq.w	r0, #327680	; 0x50000
   84436:	f44f 3080 	movne.w	r0, #65536	; 0x10000
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
   8443a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   8443e:	d009      	beq.n	84454 <hsmci_adtc_start+0x74>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
   84440:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
   84444:	ea4f 56c2 	mov.w	r6, r2, lsl #23
   84448:	ea4f 51d6 	mov.w	r1, r6, lsr #23
   8444c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
   84450:	61b1      	str	r1, [r6, #24]
   84452:	e018      	b.n	84486 <hsmci_adtc_start+0xa6>
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
   84454:	ea43 4602 	orr.w	r6, r3, r2, lsl #16
   84458:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8445c:	618e      	str	r6, [r1, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
   8445e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   84462:	d002      	beq.n	8446a <hsmci_adtc_start+0x8a>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
   84464:	f440 1020 	orr.w	r0, r0, #2621440	; 0x280000
   84468:	e00d      	b.n	84486 <hsmci_adtc_start+0xa6>
		} else if (cmd & SDMMC_CMD_STREAM) {
   8446a:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   8446e:	d002      	beq.n	84476 <hsmci_adtc_start+0x96>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
   84470:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   84474:	e007      	b.n	84486 <hsmci_adtc_start+0xa6>
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
   84476:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   8447a:	d104      	bne.n	84486 <hsmci_adtc_start+0xa6>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
   8447c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
   84480:	bf18      	it	ne
   84482:	f440 2000 	orrne.w	r0, r0, #524288	; 0x80000
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
   84486:	f640 4158 	movw	r1, #3160	; 0xc58
   8448a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8448e:	f04f 0600 	mov.w	r6, #0
   84492:	600e      	str	r6, [r1, #0]
	hsmci_block_size = block_size;
   84494:	f640 4154 	movw	r1, #3156	; 0xc54
   84498:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8449c:	800a      	strh	r2, [r1, #0]
	hsmci_nb_block = nb_block;
   8449e:	f640 4256 	movw	r2, #3158	; 0xc56
   844a2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   844a6:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
   844a8:	4621      	mov	r1, r4
   844aa:	462a      	mov	r2, r5
   844ac:	f244 139d 	movw	r3, #16797	; 0x419d
   844b0:	f2c0 0308 	movt	r3, #8
   844b4:	4798      	blx	r3
}
   844b6:	bd70      	pop	{r4, r5, r6, pc}

000844b8 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
   844b8:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
   844ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   844be:	f04f 0200 	mov.w	r2, #0
   844c2:	f2cc 0260 	movt	r2, #49248	; 0xc060

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
   844c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   844c8:	4213      	tst	r3, r2
   844ca:	d007      	beq.n	844dc <hsmci_read_word+0x24>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   844cc:	f244 106d 	movw	r0, #16749	; 0x416d
   844d0:	f2c0 0008 	movt	r0, #8
   844d4:	4780      	blx	r0
			return false;
   844d6:	f04f 0000 	mov.w	r0, #0
   844da:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_RXRDY));
   844dc:	f013 0f02 	tst.w	r3, #2
   844e0:	d0f1      	beq.n	844c6 <hsmci_read_word+0xe>

	// Read data
	*value = HSMCI->HSMCI_RDR;
   844e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   844e6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   844e8:	6002      	str	r2, [r0, #0]
	hsmci_transfert_pos += 4;
   844ea:	f640 4058 	movw	r0, #3160	; 0xc58
   844ee:	f2c2 0007 	movt	r0, #8199	; 0x2007
   844f2:	6803      	ldr	r3, [r0, #0]
   844f4:	f103 0304 	add.w	r3, r3, #4
   844f8:	6003      	str	r3, [r0, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   844fa:	f640 4156 	movw	r1, #3158	; 0xc56
   844fe:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84502:	880a      	ldrh	r2, [r1, #0]
   84504:	f640 4054 	movw	r0, #3156	; 0xc54
   84508:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8450c:	8801      	ldrh	r1, [r0, #0]
   8450e:	fb01 f202 	mul.w	r2, r1, r2
   84512:	4293      	cmp	r3, r2
   84514:	d316      	bcc.n	84544 <hsmci_read_word+0x8c>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   84516:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   8451a:	f04f 0200 	mov.w	r2, #0
   8451e:	f2cc 0260 	movt	r2, #49248	; 0xc060
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   84522:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84524:	4213      	tst	r3, r2
   84526:	d007      	beq.n	84538 <hsmci_read_word+0x80>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   84528:	f244 116d 	movw	r1, #16749	; 0x416d
   8452c:	f2c0 0108 	movt	r1, #8
   84530:	4788      	blx	r1
			return false;
   84532:	f04f 0000 	mov.w	r0, #0
   84536:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
   84538:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   8453c:	d0f1      	beq.n	84522 <hsmci_read_word+0x6a>
	return true;
   8453e:	f04f 0001 	mov.w	r0, #1
   84542:	bd08      	pop	{r3, pc}

	// Read data
	*value = HSMCI->HSMCI_RDR;
	hsmci_transfert_pos += 4;
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
		return true;
   84544:	f04f 0001 	mov.w	r0, #1
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
   84548:	bd08      	pop	{r3, pc}
   8454a:	bf00      	nop

0008454c <hsmci_start_read_blocks>:
	return true;
}

#ifdef HSMCI_SR_DMADONE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
   8454c:	b570      	push	{r4, r5, r6, lr}
   8454e:	b086      	sub	sp, #24
   84550:	4604      	mov	r4, r0
	uint32_t cfg, nb_data;
	dma_transfer_descriptor_t desc;
	bool transfert_byte;

	nb_data = nb_block * hsmci_block_size;
   84552:	f640 4354 	movw	r3, #3156	; 0xc54
   84556:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8455a:	881e      	ldrh	r6, [r3, #0]
   8455c:	fb06 f601 	mul.w	r6, r6, r1
	transfert_byte = ((HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) || (((uint32_t)dest & 0x3) > 0)) ? 1 : 0;
   84560:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   84564:	6841      	ldr	r1, [r0, #4]
   84566:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   8456a:	d12f      	bne.n	845cc <hsmci_start_read_blocks+0x80>
	 * - Hardware Selection for the Source
	 * - Source with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   8456c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84570:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84574:	4628      	mov	r0, r5
   84576:	f644 4205 	movw	r2, #19461	; 0x4c05
   8457a:	f2c0 0208 	movt	r2, #8
   8457e:	4790      	blx	r2
	dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84580:	4628      	mov	r0, r5
   84582:	f04f 0100 	mov.w	r1, #0
   84586:	f644 4319 	movw	r3, #19481	; 0x4c19
   8458a:	f2c0 0308 	movt	r3, #8
   8458e:	4798      	blx	r3
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_SRC_H2SEL |
			DMAC_CFG_SRC_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   84590:	4628      	mov	r0, r5
   84592:	f04f 0100 	mov.w	r1, #0
   84596:	f44f 7200 	mov.w	r2, #512	; 0x200
   8459a:	f2c0 1201 	movt	r2, #257	; 0x101
   8459e:	f644 4561 	movw	r5, #19553	; 0x4c61
   845a2:	f2c0 0508 	movt	r5, #8
   845a6:	47a8      	blx	r5

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
   845a8:	f04f 0030 	mov.w	r0, #48	; 0x30
   845ac:	f2c4 0000 	movt	r0, #16384	; 0x4000
   845b0:	9001      	str	r0, [sp, #4]
	desc.ul_destination_addr = (uint32_t)dest;
   845b2:	9402      	str	r4, [sp, #8]
	if (transfert_byte) {
   845b4:	f014 0f03 	tst.w	r4, #3
   845b8:	d002      	beq.n	845c0 <hsmci_start_read_blocks+0x74>
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
   845ba:	b2b4      	uxth	r4, r6

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
	desc.ul_destination_addr = (uint32_t)dest;
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
   845bc:	9403      	str	r4, [sp, #12]
   845be:	e02a      	b.n	84616 <hsmci_start_read_blocks+0xca>
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   845c0:	f3c6 048f 	ubfx	r4, r6, #2, #16
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
   845c4:	f044 5108 	orr.w	r1, r4, #570425344	; 0x22000000
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   845c8:	9103      	str	r1, [sp, #12]
   845ca:	e024      	b.n	84616 <hsmci_start_read_blocks+0xca>
	 * - Hardware Selection for the Source
	 * - Source with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   845cc:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   845d0:	f2c4 050c 	movt	r5, #16396	; 0x400c
   845d4:	4628      	mov	r0, r5
   845d6:	f644 4205 	movw	r2, #19461	; 0x4c05
   845da:	f2c0 0208 	movt	r2, #8
   845de:	4790      	blx	r2
	dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   845e0:	4628      	mov	r0, r5
   845e2:	f04f 0100 	mov.w	r1, #0
   845e6:	f644 4319 	movw	r3, #19481	; 0x4c19
   845ea:	f2c0 0308 	movt	r3, #8
   845ee:	4798      	blx	r3
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_SRC_H2SEL |
			DMAC_CFG_SRC_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   845f0:	4628      	mov	r0, r5
   845f2:	f04f 0100 	mov.w	r1, #0
   845f6:	f44f 7200 	mov.w	r2, #512	; 0x200
   845fa:	f2c0 1201 	movt	r2, #257	; 0x101
   845fe:	f644 4561 	movw	r5, #19553	; 0x4c61
   84602:	f2c0 0508 	movt	r5, #8
   84606:	47a8      	blx	r5

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)&(HSMCI->HSMCI_RDR);
   84608:	f04f 0030 	mov.w	r0, #48	; 0x30
   8460c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   84610:	9001      	str	r0, [sp, #4]
	desc.ul_destination_addr = (uint32_t)dest;
   84612:	9402      	str	r4, [sp, #8]
   84614:	e7d1      	b.n	845ba <hsmci_start_read_blocks+0x6e>
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
	}
	desc.ul_ctrlB = DMAC_CTRLB_SRC_DSCR_FETCH_DISABLE
   84616:	f04f 0100 	mov.w	r1, #0
   8461a:	f2c4 2151 	movt	r1, #16977	; 0x4251
   8461e:	9104      	str	r1, [sp, #16]
			| DMAC_CTRLB_DST_DSCR_FETCH_DISABLE
			| DMAC_CTRLB_FC_PER2MEM_DMA_FC
			| DMAC_CTRLB_SRC_INCR_FIXED
			| DMAC_CTRLB_DST_INCR_INCREMENTING
			| DMAC_CTRLB_IEN;
	desc.ul_descriptor_addr = (uint32_t)NULL;
   84620:	f04f 0400 	mov.w	r4, #0
   84624:	9405      	str	r4, [sp, #20]
	dmac_channel_single_buf_transfer_init(DMAC, CONF_HSMCI_DMA_CHANNEL,
   84626:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   8462a:	f2c4 050c 	movt	r5, #16396	; 0x400c
   8462e:	4628      	mov	r0, r5
   84630:	4621      	mov	r1, r4
   84632:	aa01      	add	r2, sp, #4
   84634:	f644 436d 	movw	r3, #19565	; 0x4c6d
   84638:	f2c0 0308 	movt	r3, #8
   8463c:	4798      	blx	r3
			&desc);

	// Start DMA transfer
	dmac_channel_enable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   8463e:	4628      	mov	r0, r5
   84640:	4621      	mov	r1, r4
   84642:	f644 420d 	movw	r2, #19469	; 0x4c0d
   84646:	f2c0 0208 	movt	r2, #8
   8464a:	4790      	blx	r2
	hsmci_transfert_pos += nb_data;
   8464c:	f640 4058 	movw	r0, #3160	; 0xc58
   84650:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84654:	6801      	ldr	r1, [r0, #0]
   84656:	1876      	adds	r6, r6, r1
   84658:	6006      	str	r6, [r0, #0]
	return true;
}
   8465a:	f04f 0001 	mov.w	r0, #1
   8465e:	b006      	add	sp, #24
   84660:	bd70      	pop	{r4, r5, r6, pc}
   84662:	bf00      	nop

00084664 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
   84664:	b510      	push	{r4, lr}
			hsmci_reset();
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   84666:	f640 4356 	movw	r3, #3158	; 0xc56
   8466a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8466e:	8818      	ldrh	r0, [r3, #0]
   84670:	f640 4254 	movw	r2, #3156	; 0xc54
   84674:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84678:	8814      	ldrh	r4, [r2, #0]
   8467a:	fb04 f400 	mul.w	r4, r4, r0
   8467e:	f640 4158 	movw	r1, #3160	; 0xc58
   84682:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84686:	6808      	ldr	r0, [r1, #0]
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   84688:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   8468c:	f04f 0200 	mov.w	r2, #0
   84690:	f2cc 0260 	movt	r2, #49248	; 0xc060
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
   84694:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84696:	4213      	tst	r3, r2
   84698:	d012      	beq.n	846c0 <hsmci_wait_end_of_read_blocks+0x5c>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   8469a:	f244 106d 	movw	r0, #16749	; 0x416d
   8469e:	f2c0 0008 	movt	r0, #8
   846a2:	4780      	blx	r0
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   846a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   846a8:	f2c4 000c 	movt	r0, #16396	; 0x400c
   846ac:	f04f 0100 	mov.w	r1, #0
   846b0:	f644 4219 	movw	r2, #19481	; 0x4c19
   846b4:	f2c0 0208 	movt	r2, #8
   846b8:	4790      	blx	r2
			return false;
   846ba:	f04f 0000 	mov.w	r0, #0
   846be:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   846c0:	4284      	cmp	r4, r0
   846c2:	d902      	bls.n	846ca <hsmci_wait_end_of_read_blocks+0x66>
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
   846c4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   846c8:	d105      	bne.n	846d6 <hsmci_wait_end_of_read_blocks+0x72>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
   846ca:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   846ce:	d0e1      	beq.n	84694 <hsmci_wait_end_of_read_blocks+0x30>
	return true;
   846d0:	f04f 0001 	mov.w	r0, #1
   846d4:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
				return true;
   846d6:	f04f 0001 	mov.w	r0, #1
			}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
   846da:	bd10      	pop	{r4, pc}

000846dc <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
   846dc:	b570      	push	{r4, r5, r6, lr}
   846de:	b086      	sub	sp, #24
   846e0:	4604      	mov	r4, r0
	bool transfert_byte;
	uint32_t cfg, nb_data;
	dma_transfer_descriptor_t desc;

	nb_data = nb_block * hsmci_block_size;
   846e2:	f640 4354 	movw	r3, #3156	; 0xc54
   846e6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   846ea:	881e      	ldrh	r6, [r3, #0]
   846ec:	fb06 f601 	mul.w	r6, r6, r1
	transfert_byte = ((HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) || (((uint32_t)src & 0x3) > 0)) ? 1 : 0;
   846f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   846f4:	6841      	ldr	r1, [r0, #4]
   846f6:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   846fa:	d127      	bne.n	8474c <hsmci_start_write_blocks+0x70>
	 * - Hardware Selection for the Destination
	 * - Destination with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   846fc:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84700:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84704:	4628      	mov	r0, r5
   84706:	f644 4205 	movw	r2, #19461	; 0x4c05
   8470a:	f2c0 0208 	movt	r2, #8
   8470e:	4790      	blx	r2
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_DST_H2SEL |
			DMAC_CFG_DST_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   84710:	4628      	mov	r0, r5
   84712:	f04f 0100 	mov.w	r1, #0
   84716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8471a:	f2c0 1201 	movt	r2, #257	; 0x101
   8471e:	f644 4361 	movw	r3, #19553	; 0x4c61
   84722:	f2c0 0308 	movt	r3, #8
   84726:	4798      	blx	r3

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
   84728:	9401      	str	r4, [sp, #4]
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
   8472a:	f04f 0034 	mov.w	r0, #52	; 0x34
   8472e:	f2c4 0000 	movt	r0, #16384	; 0x4000
   84732:	9002      	str	r0, [sp, #8]
	if (transfert_byte) {
   84734:	f014 0f03 	tst.w	r4, #3
   84738:	d002      	beq.n	84740 <hsmci_start_write_blocks+0x64>
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
   8473a:	b2b4      	uxth	r4, r6

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
   8473c:	9403      	str	r4, [sp, #12]
   8473e:	e022      	b.n	84786 <hsmci_start_write_blocks+0xaa>
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   84740:	f3c6 048f 	ubfx	r4, r6, #2, #16
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
   84744:	f044 5108 	orr.w	r1, r4, #570425344	; 0x22000000
	if (transfert_byte) {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data)
				| DMAC_CTRLA_SRC_WIDTH_BYTE
				| DMAC_CTRLA_DST_WIDTH_BYTE;
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
   84748:	9103      	str	r1, [sp, #12]
   8474a:	e01c      	b.n	84786 <hsmci_start_write_blocks+0xaa>
	 * - Hardware Selection for the Destination
	 * - Destination with Peripheral identifier
	 * - Set AHB Protection
	 * - FIFO Configuration
	 */
	dmac_enable(DMAC);
   8474c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   84750:	f2c4 050c 	movt	r5, #16396	; 0x400c
   84754:	4628      	mov	r0, r5
   84756:	f644 4205 	movw	r2, #19461	; 0x4c05
   8475a:	f2c0 0208 	movt	r2, #8
   8475e:	4790      	blx	r2
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	cfg = DMAC_CFG_SOD_ENABLE | DMAC_CFG_DST_H2SEL |
			DMAC_CFG_DST_PER(DMA_HW_ID_HSMCI) |
			DMAC_CFG_AHB_PROT(1) | DMAC_CFG_FIFOCFG_ALAP_CFG;
	dmac_channel_set_configuration(DMAC, CONF_HSMCI_DMA_CHANNEL, cfg);
   84760:	4628      	mov	r0, r5
   84762:	f04f 0100 	mov.w	r1, #0
   84766:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8476a:	f2c0 1201 	movt	r2, #257	; 0x101
   8476e:	f644 4361 	movw	r3, #19553	; 0x4c61
   84772:	f2c0 0308 	movt	r3, #8
   84776:	4798      	blx	r3

	// Prepare DMA transfer
	desc.ul_source_addr = (uint32_t)src;
   84778:	9401      	str	r4, [sp, #4]
	desc.ul_destination_addr = (uint32_t)&(HSMCI->HSMCI_TDR);
   8477a:	f04f 0034 	mov.w	r0, #52	; 0x34
   8477e:	f2c4 0000 	movt	r0, #16384	; 0x4000
   84782:	9002      	str	r0, [sp, #8]
   84784:	e7d9      	b.n	8473a <hsmci_start_write_blocks+0x5e>
	} else {
		desc.ul_ctrlA = DMAC_CTRLA_BTSIZE(nb_data / 4)
				| DMAC_CTRLA_SRC_WIDTH_WORD
				| DMAC_CTRLA_DST_WIDTH_WORD;
	}
	desc.ul_ctrlB = DMAC_CTRLB_SRC_DSCR_FETCH_DISABLE
   84786:	f04f 0100 	mov.w	r1, #0
   8478a:	f2c6 0131 	movt	r1, #24625	; 0x6031
   8478e:	9104      	str	r1, [sp, #16]
			| DMAC_CTRLB_DST_DSCR_FETCH_DISABLE
			| DMAC_CTRLB_FC_MEM2PER_DMA_FC
			| DMAC_CTRLB_SRC_INCR_INCREMENTING
			| DMAC_CTRLB_DST_INCR_FIXED
			| DMAC_CTRLB_IEN;
	desc.ul_descriptor_addr = (uint32_t)NULL;
   84790:	f04f 0400 	mov.w	r4, #0
   84794:	9405      	str	r4, [sp, #20]
	dmac_channel_single_buf_transfer_init(DMAC, CONF_HSMCI_DMA_CHANNEL,
   84796:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   8479a:	f2c4 050c 	movt	r5, #16396	; 0x400c
   8479e:	4628      	mov	r0, r5
   847a0:	4621      	mov	r1, r4
   847a2:	aa01      	add	r2, sp, #4
   847a4:	f644 436d 	movw	r3, #19565	; 0x4c6d
   847a8:	f2c0 0308 	movt	r3, #8
   847ac:	4798      	blx	r3
			&desc);

	// Start DMA transfer
	dmac_channel_enable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   847ae:	4628      	mov	r0, r5
   847b0:	4621      	mov	r1, r4
   847b2:	f644 420d 	movw	r2, #19469	; 0x4c0d
   847b6:	f2c0 0208 	movt	r2, #8
   847ba:	4790      	blx	r2
	hsmci_transfert_pos += nb_data;
   847bc:	f640 4058 	movw	r0, #3160	; 0xc58
   847c0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   847c4:	6801      	ldr	r1, [r0, #0]
   847c6:	1876      	adds	r6, r6, r1
   847c8:	6006      	str	r6, [r0, #0]
	return true;
}
   847ca:	f04f 0001 	mov.w	r0, #1
   847ce:	b006      	add	sp, #24
   847d0:	bd70      	pop	{r4, r5, r6, pc}
   847d2:	bf00      	nop

000847d4 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
   847d4:	b510      	push	{r4, lr}
			hsmci_reset();
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
			return false;
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   847d6:	f640 4356 	movw	r3, #3158	; 0xc56
   847da:	f2c2 0307 	movt	r3, #8199	; 0x2007
   847de:	8818      	ldrh	r0, [r3, #0]
   847e0:	f640 4254 	movw	r2, #3156	; 0xc54
   847e4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   847e8:	8814      	ldrh	r4, [r2, #0]
   847ea:	fb04 f400 	mul.w	r4, r4, r0
   847ee:	f640 4158 	movw	r1, #3160	; 0xc58
   847f2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   847f6:	6808      	ldr	r0, [r1, #0]
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
   847f8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   847fc:	f04f 0200 	mov.w	r2, #0
   84800:	f2cc 0260 	movt	r2, #49248	; 0xc060
{
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
   84804:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
   84806:	4213      	tst	r3, r2
   84808:	d012      	beq.n	84830 <hsmci_wait_end_of_write_blocks+0x5c>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
   8480a:	f244 106d 	movw	r0, #16749	; 0x416d
   8480e:	f2c0 0008 	movt	r0, #8
   84812:	4780      	blx	r0
			// Disable DMA
			dmac_channel_disable(DMAC, CONF_HSMCI_DMA_CHANNEL);
   84814:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   84818:	f2c4 000c 	movt	r0, #16396	; 0x400c
   8481c:	f04f 0100 	mov.w	r1, #0
   84820:	f644 4219 	movw	r2, #19481	; 0x4c19
   84824:	f2c0 0208 	movt	r2, #8
   84828:	4790      	blx	r2
			return false;
   8482a:	f04f 0000 	mov.w	r0, #0
   8482e:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
   84830:	4284      	cmp	r4, r0
   84832:	d902      	bls.n	8483a <hsmci_wait_end_of_write_blocks+0x66>
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
   84834:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   84838:	d105      	bne.n	84846 <hsmci_wait_end_of_write_blocks+0x72>
				return true;
			}
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
   8483a:	f013 0f20 	tst.w	r3, #32
   8483e:	d0e1      	beq.n	84804 <hsmci_wait_end_of_write_blocks+0x30>
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	return true;
   84840:	f04f 0001 	mov.w	r0, #1
   84844:	bd10      	pop	{r4, pc}
		}
		if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
			// It is not the end of all transfers
			// then just wait end of DMA
			if (sr & HSMCI_SR_DMADONE) {
				return true;
   84846:	f04f 0001 	mov.w	r0, #1
	} while (!(sr & HSMCI_SR_NOTBUSY));
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	Assert(!dmac_channel_is_enable(DMAC, CONF_HSMCI_DMA_CHANNEL));
	return true;

}
   8484a:	bd10      	pop	{r4, pc}

0008484c <cdc_send_line>:
volatile Bool is_new_received_cdc_char = false;
volatile Bool is_terminal_open = false;


iram_size_t cdc_send_line(char* line_to_send)
{
   8484c:	b510      	push	{r4, lr}
   8484e:	4604      	mov	r4, r0
	if(is_terminal_open)
   84850:	f640 435c 	movw	r3, #3164	; 0xc5c
   84854:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84858:	7818      	ldrb	r0, [r3, #0]
   8485a:	b168      	cbz	r0, 84878 <cdc_send_line+0x2c>
		return udi_cdc_write_buf((const void*) line_to_send, strlen(line_to_send));
   8485c:	4620      	mov	r0, r4
   8485e:	f649 72a9 	movw	r2, #40873	; 0x9fa9
   84862:	f2c0 0208 	movt	r2, #8
   84866:	4790      	blx	r2
   84868:	4601      	mov	r1, r0
   8486a:	4620      	mov	r0, r4
   8486c:	f245 730d 	movw	r3, #22285	; 0x570d
   84870:	f2c0 0308 	movt	r3, #8
   84874:	4798      	blx	r3
   84876:	bd10      	pop	{r4, pc}
	else
		return strlen(line_to_send);
   84878:	4620      	mov	r0, r4
   8487a:	f649 71a9 	movw	r1, #40873	; 0x9fa9
   8487e:	f2c0 0108 	movt	r1, #8
   84882:	4788      	blx	r1
}
   84884:	bd10      	pop	{r4, pc}
   84886:	bf00      	nop

00084888 <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
	if (b_enable) 
   84888:	b139      	cbz	r1, 8489a <main_cdc_set_dtr+0x12>
		is_terminal_open = true;
   8488a:	f640 405c 	movw	r0, #3164	; 0xc5c
   8488e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84892:	f04f 0101 	mov.w	r1, #1
   84896:	7001      	strb	r1, [r0, #0]
   84898:	4770      	bx	lr
	else
		is_terminal_open = false;
   8489a:	f640 435c 	movw	r3, #3164	; 0xc5c
   8489e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   848a2:	f04f 0200 	mov.w	r2, #0
   848a6:	701a      	strb	r2, [r3, #0]
   848a8:	4770      	bx	lr
   848aa:	bf00      	nop

000848ac <uart_rx_notify>:
}

void uart_rx_notify(uint8_t port)
{
	UNUSED(port);
	is_new_received_cdc_char = true;
   848ac:	f640 435d 	movw	r3, #3165	; 0xc5d
   848b0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   848b4:	f04f 0201 	mov.w	r2, #1
   848b8:	701a      	strb	r2, [r3, #0]
   848ba:	4770      	bx	lr

000848bc <main_suspend_action>:
	cpu_irq_restore(flags);	
	
	return true;
}

void main_suspend_action(void){}
   848bc:	4770      	bx	lr
   848be:	bf00      	nop

000848c0 <main_resume_action>:
void main_resume_action(void){}
   848c0:	4770      	bx	lr
   848c2:	bf00      	nop

000848c4 <main_sof_action>:
void main_sof_action(void){}
   848c4:	4770      	bx	lr
   848c6:	bf00      	nop

000848c8 <SCPI_Write>:
uint16_t current_input_line_pointer = 0;
char current_input_line[LINE_BUFFER_SIZE];


size_t SCPI_Write(scpi_t * context, const char * data, size_t len) 
{
   848c8:	b530      	push	{r4, r5, lr}
   848ca:	b083      	sub	sp, #12
   848cc:	4613      	mov	r3, r2
	(void) context;
	printf("%.*s", len, data);
   848ce:	f641 24e4 	movw	r4, #6884	; 0x1ae4
   848d2:	f2c2 0407 	movt	r4, #8199	; 0x2007
   848d6:	9100      	str	r1, [sp, #0]
   848d8:	4620      	mov	r0, r4
   848da:	f04f 0164 	mov.w	r1, #100	; 0x64
   848de:	f64c 3284 	movw	r2, #52100	; 0xcb84
   848e2:	f2c0 0208 	movt	r2, #8
   848e6:	f649 7543 	movw	r5, #40771	; 0x9f43
   848ea:	f2c0 0508 	movt	r5, #8
   848ee:	47a8      	blx	r5
   848f0:	4620      	mov	r0, r4
   848f2:	f644 034d 	movw	r3, #18509	; 0x484d
   848f6:	f2c0 0308 	movt	r3, #8
   848fa:	4798      	blx	r3
	return SCPI_RES_OK;    
}
   848fc:	f04f 0001 	mov.w	r0, #1
   84900:	b003      	add	sp, #12
   84902:	bd30      	pop	{r4, r5, pc}

00084904 <SCPI_Flush>:

scpi_result_t SCPI_Flush(scpi_t * context) 
{
	return SCPI_RES_OK;
}
   84904:	f04f 0001 	mov.w	r0, #1
   84908:	4770      	bx	lr
   8490a:	bf00      	nop

0008490c <SCPI_Error>:

int SCPI_Error(scpi_t * context, int_fast16_t err) 
{
   8490c:	b530      	push	{r4, r5, lr}
   8490e:	b083      	sub	sp, #12
   84910:	460d      	mov	r5, r1
	(void) context;
	printf("**ERROR: %d, \"%s\"\r\n", (int32_t) err, SCPI_ErrorTranslate(err));
   84912:	b208      	sxth	r0, r1
   84914:	f242 7351 	movw	r3, #10065	; 0x2751
   84918:	f2c0 0308 	movt	r3, #8
   8491c:	4798      	blx	r3
   8491e:	f641 24e4 	movw	r4, #6884	; 0x1ae4
   84922:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84926:	9000      	str	r0, [sp, #0]
   84928:	4620      	mov	r0, r4
   8492a:	f04f 0164 	mov.w	r1, #100	; 0x64
   8492e:	f64c 328c 	movw	r2, #52108	; 0xcb8c
   84932:	f2c0 0208 	movt	r2, #8
   84936:	462b      	mov	r3, r5
   84938:	f649 7543 	movw	r5, #40771	; 0x9f43
   8493c:	f2c0 0508 	movt	r5, #8
   84940:	47a8      	blx	r5
   84942:	4620      	mov	r0, r4
   84944:	f644 014d 	movw	r1, #18509	; 0x484d
   84948:	f2c0 0108 	movt	r1, #8
   8494c:	4788      	blx	r1
	return 0;
}
   8494e:	f04f 0000 	mov.w	r0, #0
   84952:	b003      	add	sp, #12
   84954:	bd30      	pop	{r4, r5, pc}
   84956:	bf00      	nop

00084958 <SCPI_Control>:

scpi_result_t SCPI_Control(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) 
{
   84958:	b530      	push	{r4, r5, lr}
   8495a:	b083      	sub	sp, #12
   8495c:	460b      	mov	r3, r1
   8495e:	4614      	mov	r4, r2
	if (SCPI_CTRL_SRQ == ctrl) 
   84960:	2901      	cmp	r1, #1
   84962:	d118      	bne.n	84996 <SCPI_Control+0x3e>
	{
		printf("**SRQ: 0x%X (%d)\r\n", val, val);
   84964:	f641 25e4 	movw	r5, #6884	; 0x1ae4
   84968:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8496c:	9200      	str	r2, [sp, #0]
   8496e:	4628      	mov	r0, r5
   84970:	f04f 0164 	mov.w	r1, #100	; 0x64
   84974:	f64c 32a0 	movw	r2, #52128	; 0xcba0
   84978:	f2c0 0208 	movt	r2, #8
   8497c:	4623      	mov	r3, r4
   8497e:	f649 7443 	movw	r4, #40771	; 0x9f43
   84982:	f2c0 0408 	movt	r4, #8
   84986:	47a0      	blx	r4
   84988:	4628      	mov	r0, r5
   8498a:	f644 014d 	movw	r1, #18509	; 0x484d
   8498e:	f2c0 0108 	movt	r1, #8
   84992:	4788      	blx	r1
   84994:	e017      	b.n	849c6 <SCPI_Control+0x6e>
	}
	else 
	{
		printf("**CTRL %02x: 0x%X (%d)\r\n", ctrl, val, val);
   84996:	f641 25e4 	movw	r5, #6884	; 0x1ae4
   8499a:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8499e:	9200      	str	r2, [sp, #0]
   849a0:	9201      	str	r2, [sp, #4]
   849a2:	4628      	mov	r0, r5
   849a4:	f04f 0164 	mov.w	r1, #100	; 0x64
   849a8:	f64c 32b4 	movw	r2, #52148	; 0xcbb4
   849ac:	f2c0 0208 	movt	r2, #8
   849b0:	f649 7443 	movw	r4, #40771	; 0x9f43
   849b4:	f2c0 0408 	movt	r4, #8
   849b8:	47a0      	blx	r4
   849ba:	4628      	mov	r0, r5
   849bc:	f644 034d 	movw	r3, #18509	; 0x484d
   849c0:	f2c0 0308 	movt	r3, #8
   849c4:	4798      	blx	r3
	}
	return SCPI_RES_OK;
}
   849c6:	f04f 0001 	mov.w	r0, #1
   849ca:	b003      	add	sp, #12
   849cc:	bd30      	pop	{r4, r5, pc}
   849ce:	bf00      	nop

000849d0 <SCPI_Test>:

scpi_result_t SCPI_Test(scpi_t * context) 
{
   849d0:	b508      	push	{r3, lr}
	printf("**Test\r\n");
   849d2:	f641 22e4 	movw	r2, #6884	; 0x1ae4
   849d6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   849da:	f64c 33d0 	movw	r3, #52176	; 0xcbd0
   849de:	f2c0 0308 	movt	r3, #8
   849e2:	cb03      	ldmia	r3!, {r0, r1}
   849e4:	6010      	str	r0, [r2, #0]
   849e6:	6051      	str	r1, [r2, #4]
   849e8:	7818      	ldrb	r0, [r3, #0]
   849ea:	7210      	strb	r0, [r2, #8]
   849ec:	4610      	mov	r0, r2
   849ee:	f644 014d 	movw	r1, #18509	; 0x484d
   849f2:	f2c0 0108 	movt	r1, #8
   849f6:	4788      	blx	r1
	return SCPI_RES_OK;
}
   849f8:	f04f 0001 	mov.w	r0, #1
   849fc:	bd08      	pop	{r3, pc}
   849fe:	bf00      	nop

00084a00 <SCPI_Reset>:

scpi_result_t SCPI_Reset(scpi_t * context) 
{
   84a00:	b508      	push	{r3, lr}
	printf("**Reset\r\n");
   84a02:	f641 22e4 	movw	r2, #6884	; 0x1ae4
   84a06:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84a0a:	f64c 33dc 	movw	r3, #52188	; 0xcbdc
   84a0e:	f2c0 0308 	movt	r3, #8
   84a12:	cb03      	ldmia	r3!, {r0, r1}
   84a14:	6010      	str	r0, [r2, #0]
   84a16:	6051      	str	r1, [r2, #4]
   84a18:	8818      	ldrh	r0, [r3, #0]
   84a1a:	8110      	strh	r0, [r2, #8]
   84a1c:	4610      	mov	r0, r2
   84a1e:	f644 014d 	movw	r1, #18509	; 0x484d
   84a22:	f2c0 0108 	movt	r1, #8
   84a26:	4788      	blx	r1
	return SCPI_RES_OK;
}
   84a28:	f04f 0001 	mov.w	r0, #1
   84a2c:	bd08      	pop	{r3, pc}
   84a2e:	bf00      	nop

00084a30 <console_init>:

void console_init(void)
{
   84a30:	b508      	push	{r3, lr}
	SCPI_Init(&scpi_context);
   84a32:	f240 0038 	movw	r0, #56	; 0x38
   84a36:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84a3a:	f243 03a5 	movw	r3, #12453	; 0x30a5
   84a3e:	f2c0 0308 	movt	r3, #8
   84a42:	4798      	blx	r3
   84a44:	bd08      	pop	{r3, pc}
   84a46:	bf00      	nop

00084a48 <console_process>:
}

void console_process(void)
{
   84a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	iram_size_t data_remaining = 0;
	uint8_t temp_buffer[10];
	
	if(udi_cdc_get_nb_received_data() == 0)
   84a4c:	f245 2371 	movw	r3, #21105	; 0x5271
   84a50:	f2c0 0308 	movt	r3, #8
   84a54:	4798      	blx	r3
   84a56:	2800      	cmp	r0, #0
   84a58:	d040      	beq.n	84adc <console_process+0x94>
		return;
	
	do 
	{
		data_remaining = udi_cdc_read_buf(current_input_line+current_input_line_pointer, 1);
   84a5a:	f640 445e 	movw	r4, #3166	; 0xc5e
   84a5e:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84a62:	f641 3548 	movw	r5, #6984	; 0x1b48
   84a66:	f2c2 0507 	movt	r5, #8199	; 0x2007
   84a6a:	f04f 0601 	mov.w	r6, #1
   84a6e:	f245 5a85 	movw	sl, #21893	; 0x5585
   84a72:	f2c0 0a08 	movt	sl, #8
		//udi_cdc_putc(current_input_line[current_input_line_pointer]);
		SCPI_Input(&scpi_context, current_input_line+current_input_line_pointer, 1);
   84a76:	f240 0938 	movw	r9, #56	; 0x38
   84a7a:	f2c2 0907 	movt	r9, #8199	; 0x2007
   84a7e:	f243 08b9 	movw	r8, #12473	; 0x30b9
   84a82:	f2c0 0808 	movt	r8, #8
	if(udi_cdc_get_nb_received_data() == 0)
		return;
	
	do 
	{
		data_remaining = udi_cdc_read_buf(current_input_line+current_input_line_pointer, 1);
   84a86:	8820      	ldrh	r0, [r4, #0]
   84a88:	1940      	adds	r0, r0, r5
   84a8a:	4631      	mov	r1, r6
   84a8c:	47d0      	blx	sl
   84a8e:	4607      	mov	r7, r0
		//udi_cdc_putc(current_input_line[current_input_line_pointer]);
		SCPI_Input(&scpi_context, current_input_line+current_input_line_pointer, 1);
   84a90:	8821      	ldrh	r1, [r4, #0]
   84a92:	4648      	mov	r0, r9
   84a94:	1949      	adds	r1, r1, r5
   84a96:	4632      	mov	r2, r6
   84a98:	47c0      	blx	r8
		current_input_line_pointer++;
   84a9a:	8822      	ldrh	r2, [r4, #0]
   84a9c:	f102 0201 	add.w	r2, r2, #1
   84aa0:	b293      	uxth	r3, r2
   84aa2:	8023      	strh	r3, [r4, #0]
		
		if((current_input_line[current_input_line_pointer-1] == 0x0D) || (current_input_line[current_input_line_pointer-1] == 0x0A))
   84aa4:	18e8      	adds	r0, r5, r3
   84aa6:	f810 1c01 	ldrb.w	r1, [r0, #-1]
   84aaa:	290d      	cmp	r1, #13
   84aac:	d001      	beq.n	84ab2 <console_process+0x6a>
   84aae:	290a      	cmp	r1, #10
   84ab0:	d102      	bne.n	84ab8 <console_process+0x70>
		{
			current_input_line_pointer = 0;
   84ab2:	f04f 0200 	mov.w	r2, #0
   84ab6:	8022      	strh	r2, [r4, #0]
			// should we do another parsing rather than scpi?
		}
	} 
	while((data_remaining > 0) && (current_input_line_pointer < LINE_BUFFER_SIZE));
   84ab8:	b117      	cbz	r7, 84ac0 <console_process+0x78>
   84aba:	8823      	ldrh	r3, [r4, #0]
   84abc:	2bc7      	cmp	r3, #199	; 0xc7
   84abe:	d9e2      	bls.n	84a86 <console_process+0x3e>
	
	if(current_input_line_pointer == LINE_BUFFER_SIZE)
   84ac0:	f640 405e 	movw	r0, #3166	; 0xc5e
   84ac4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84ac8:	8801      	ldrh	r1, [r0, #0]
   84aca:	29c8      	cmp	r1, #200	; 0xc8
   84acc:	d106      	bne.n	84adc <console_process+0x94>
	{
		// We should return a message or smth...
		current_input_line_pointer = 0;
   84ace:	f640 435e 	movw	r3, #3166	; 0xc5e
   84ad2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84ad6:	f04f 0200 	mov.w	r2, #0
   84ada:	801a      	strh	r2, [r3, #0]
   84adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00084ae0 <main_extra_string>:
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   84ae0:	f641 4318 	movw	r3, #7192	; 0x1c18
   84ae4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84ae8:	7898      	ldrb	r0, [r3, #2]
   84aea:	2804      	cmp	r0, #4
   84aec:	d002      	beq.n	84af4 <main_extra_string+0x14>
   84aee:	2805      	cmp	r0, #5
   84af0:	d13b      	bne.n	84b6a <main_extra_string+0x8a>
   84af2:	e004      	b.n	84afe <main_extra_string+0x1e>
	case UDI_CDC_IAD_STRING_ID:
		str_lgt = sizeof(udi_cdc_name)-1;
		str = udi_cdc_name;
   84af4:	f240 02bc 	movw	r2, #188	; 0xbc
   84af8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84afc:	e003      	b.n	84b06 <main_extra_string+0x26>
		break;
	case UDI_MSC_STRING_ID:
		str_lgt = sizeof(udi_msc_name)-1;
		str = udi_msc_name;
   84afe:	f240 0290 	movw	r2, #144	; 0x90
   84b02:	f2c2 0207 	movt	r2, #8199	; 0x2007
		return false;
	}

	if (str_lgt!=0) {
		for( i=0; i<str_lgt; i++) {
			extra_strings_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   84b06:	f240 03a0 	movw	r3, #160	; 0xa0
   84b0a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84b0e:	7811      	ldrb	r1, [r2, #0]
   84b10:	8059      	strh	r1, [r3, #2]
   84b12:	7850      	ldrb	r0, [r2, #1]
   84b14:	8098      	strh	r0, [r3, #4]
   84b16:	7891      	ldrb	r1, [r2, #2]
   84b18:	80d9      	strh	r1, [r3, #6]
   84b1a:	78d0      	ldrb	r0, [r2, #3]
   84b1c:	8118      	strh	r0, [r3, #8]
   84b1e:	7911      	ldrb	r1, [r2, #4]
   84b20:	8159      	strh	r1, [r3, #10]
   84b22:	7950      	ldrb	r0, [r2, #5]
   84b24:	8198      	strh	r0, [r3, #12]
   84b26:	7991      	ldrb	r1, [r2, #6]
   84b28:	81d9      	strh	r1, [r3, #14]
   84b2a:	79d0      	ldrb	r0, [r2, #7]
   84b2c:	8218      	strh	r0, [r3, #16]
   84b2e:	7a11      	ldrb	r1, [r2, #8]
   84b30:	8259      	strh	r1, [r3, #18]
   84b32:	7a50      	ldrb	r0, [r2, #9]
   84b34:	8298      	strh	r0, [r3, #20]
   84b36:	7a91      	ldrb	r1, [r2, #10]
   84b38:	82d9      	strh	r1, [r3, #22]
   84b3a:	7ad0      	ldrb	r0, [r2, #11]
   84b3c:	8318      	strh	r0, [r3, #24]
   84b3e:	7b12      	ldrb	r2, [r2, #12]
   84b40:	835a      	strh	r2, [r3, #26]
		}
		extra_strings_desc.header.bLength = 2+ (str_lgt)*2;
   84b42:	f04f 011c 	mov.w	r1, #28
   84b46:	7019      	strb	r1, [r3, #0]
		udd_g_ctrlreq.payload_size = extra_strings_desc.header.bLength;
   84b48:	f641 4018 	movw	r0, #7192	; 0x1c18
   84b4c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84b50:	8181      	strh	r1, [r0, #12]
		udd_g_ctrlreq.payload = (uint8_t *) &extra_strings_desc;
   84b52:	6083      	str	r3, [r0, #8]
	}

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength) {
   84b54:	88c3      	ldrh	r3, [r0, #6]
   84b56:	2b1b      	cmp	r3, #27
   84b58:	d80a      	bhi.n	84b70 <main_extra_string+0x90>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   84b5a:	f641 4218 	movw	r2, #7192	; 0x1c18
   84b5e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84b62:	8193      	strh	r3, [r2, #12]
	}
	return true;
   84b64:	f04f 0001 	mov.w	r0, #1
   84b68:	4770      	bx	lr
	case UDI_MSC_STRING_ID:
		str_lgt = sizeof(udi_msc_name)-1;
		str = udi_msc_name;
		break;
	default:
		return false;
   84b6a:	f04f 0000 	mov.w	r0, #0
   84b6e:	4770      	bx	lr

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
   84b70:	f04f 0001 	mov.w	r0, #1
   84b74:	4770      	bx	lr
   84b76:	bf00      	nop

00084b78 <HardFault_Handler>:
         * Get the appropriate stack pointer, depending on our mode,
         * and use it as the parameter to the C handler. This function
         * will never return
         */

        __asm(  ".syntax unified\n"
   84b78:	2004      	movs	r0, #4
   84b7a:	4671      	mov	r1, lr
   84b7c:	4208      	tst	r0, r1
   84b7e:	f000 8004 	beq.w	84b8a <_MSP>
   84b82:	f3ef 8009 	mrs	r0, PSP
   84b86:	f000 b805 	b.w	84b94 <HardFault_HandlerC>

00084b8a <_MSP>:
   84b8a:	f3ef 8008 	mrs	r0, MSP
   84b8e:	f000 b801 	b.w	84b94 <HardFault_HandlerC>
   84b92:	bf00      	nop

00084b94 <HardFault_HandlerC>:
 * into local variables for ease of reading.
 * We then read the various Fault Status and Address Registers to help decode
 * cause of the fault.
 * The function ends with a BKPT instruction to force control back into the debugger
 */
void HardFault_HandlerC(unsigned long *hardfault_args){
   84b94:	b08e      	sub	sp, #56	; 0x38
        volatile unsigned long _DFSR ;
        volatile unsigned long _AFSR ;
        volatile unsigned long _BFAR ;
        volatile unsigned long _MMAR ;

        stacked_r0 = ((unsigned long)hardfault_args[0]) ;
   84b96:	6803      	ldr	r3, [r0, #0]
   84b98:	930d      	str	r3, [sp, #52]	; 0x34
        stacked_r1 = ((unsigned long)hardfault_args[1]) ;
   84b9a:	6841      	ldr	r1, [r0, #4]
   84b9c:	910c      	str	r1, [sp, #48]	; 0x30
        stacked_r2 = ((unsigned long)hardfault_args[2]) ;
   84b9e:	6882      	ldr	r2, [r0, #8]
   84ba0:	920b      	str	r2, [sp, #44]	; 0x2c
        stacked_r3 = ((unsigned long)hardfault_args[3]) ;
   84ba2:	68c3      	ldr	r3, [r0, #12]
   84ba4:	930a      	str	r3, [sp, #40]	; 0x28
        stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   84ba6:	6901      	ldr	r1, [r0, #16]
   84ba8:	9109      	str	r1, [sp, #36]	; 0x24
        stacked_lr = ((unsigned long)hardfault_args[5]) ;
   84baa:	6942      	ldr	r2, [r0, #20]
   84bac:	9208      	str	r2, [sp, #32]
        stacked_pc = ((unsigned long)hardfault_args[6]) ;
   84bae:	6983      	ldr	r3, [r0, #24]
   84bb0:	9307      	str	r3, [sp, #28]
        stacked_psr = ((unsigned long)hardfault_args[7]) ;
   84bb2:	69c0      	ldr	r0, [r0, #28]
   84bb4:	9006      	str	r0, [sp, #24]

        // Configurable Fault Status Register
        // Consists of MMSR, BFSR and UFSR
        _CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;   
   84bb6:	f64e 5128 	movw	r1, #60712	; 0xed28
   84bba:	f2ce 0100 	movt	r1, #57344	; 0xe000
   84bbe:	680a      	ldr	r2, [r1, #0]
   84bc0:	9205      	str	r2, [sp, #20]
                                                                                        
        // Hard Fault Status Register
        _HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   84bc2:	f64e 532c 	movw	r3, #60716	; 0xed2c
   84bc6:	f2ce 0300 	movt	r3, #57344	; 0xe000
   84bca:	6818      	ldr	r0, [r3, #0]
   84bcc:	9004      	str	r0, [sp, #16]

        // Debug Fault Status Register
        _DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   84bce:	f64e 5130 	movw	r1, #60720	; 0xed30
   84bd2:	f2ce 0100 	movt	r1, #57344	; 0xe000
   84bd6:	680a      	ldr	r2, [r1, #0]
   84bd8:	9203      	str	r2, [sp, #12]

        // Auxiliary Fault Status Register
        _AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   84bda:	f64e 533c 	movw	r3, #60732	; 0xed3c
   84bde:	f2ce 0300 	movt	r3, #57344	; 0xe000
   84be2:	6818      	ldr	r0, [r3, #0]
   84be4:	9002      	str	r0, [sp, #8]

        // Read the Fault Address Registers. These may not contain valid values.
        // Check BFARVALID/MMARVALID to see if they are valid values
        // MemManage Fault Address Register
        _MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   84be6:	f64e 5134 	movw	r1, #60724	; 0xed34
   84bea:	f2ce 0100 	movt	r1, #57344	; 0xe000
   84bee:	680a      	ldr	r2, [r1, #0]
   84bf0:	9200      	str	r2, [sp, #0]
        // Bus Fault Address Register
        _BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   84bf2:	f64e 5338 	movw	r3, #60728	; 0xed38
   84bf6:	f2ce 0300 	movt	r3, #57344	; 0xe000
   84bfa:	6818      	ldr	r0, [r3, #0]
   84bfc:	9001      	str	r0, [sp, #4]

        __asm("BKPT #0\n") ; // Break into the debugger
   84bfe:	be00      	bkpt	0x0000
   84c00:	e7fe      	b.n	84c00 <HardFault_HandlerC+0x6c>
   84c02:	bf00      	nop

00084c04 <dmac_enable>:
 *
 * \param p_dmac  Pointer to a DMAC peripheral instance.
 */
void dmac_enable(Dmac *p_dmac)
{
	p_dmac->DMAC_EN = DMAC_EN_ENABLE;
   84c04:	f04f 0301 	mov.w	r3, #1
   84c08:	6043      	str	r3, [r0, #4]
   84c0a:	4770      	bx	lr

00084c0c <dmac_channel_enable>:
 * \param p_dmac Pointer to a DMAC peripheral instance.
 * \param ul_num Channel number.
 */
void dmac_channel_enable(Dmac *p_dmac, uint32_t ul_num)
{
	p_dmac->DMAC_CHER = DMAC_CHER_ENA0 << ul_num;
   84c0c:	f04f 0301 	mov.w	r3, #1
   84c10:	fa03 f101 	lsl.w	r1, r3, r1
   84c14:	6281      	str	r1, [r0, #40]	; 0x28
   84c16:	4770      	bx	lr

00084c18 <dmac_channel_disable>:
 * \param p_dmac Pointer to a DMAC peripheral instance.
 * \param ul_num Channel number.
 */
void dmac_channel_disable(Dmac *p_dmac, uint32_t ul_num)
{
	p_dmac->DMAC_CHDR = DMAC_CHDR_DIS0 << ul_num;
   84c18:	f04f 0301 	mov.w	r3, #1
   84c1c:	fa03 f101 	lsl.w	r1, r3, r1
   84c20:	62c1      	str	r1, [r0, #44]	; 0x2c
   84c22:	4770      	bx	lr

00084c24 <dmac_channel_set_source_addr>:
 * \note This register must be aligned with the source transfer width.
 */
void dmac_channel_set_source_addr(Dmac *p_dmac,
		uint32_t ul_num, uint32_t ul_addr)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_SADDR = ul_addr;
   84c24:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84c28:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   84c2c:	63c2      	str	r2, [r0, #60]	; 0x3c
   84c2e:	4770      	bx	lr

00084c30 <dmac_channel_set_destination_addr>:
 * \note This register must be aligned with the source transfer width.
 */
void dmac_channel_set_destination_addr(Dmac *p_dmac, uint32_t ul_num,
		uint32_t ul_addr)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DADDR = ul_addr;
   84c30:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84c34:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   84c38:	6402      	str	r2, [r0, #64]	; 0x40
   84c3a:	4770      	bx	lr

00084c3c <dmac_channel_set_descriptor_addr>:
 * \param ul_desc     Descriptor address.
 */
void dmac_channel_set_descriptor_addr(Dmac *p_dmac,
		uint32_t ul_num, uint32_t ul_desc)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_DSCR = ul_desc;
   84c3c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84c40:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   84c44:	6442      	str	r2, [r0, #68]	; 0x44
   84c46:	4770      	bx	lr

00084c48 <dmac_channel_set_ctrlA>:
 * \param ul_num      Channel number.
 * \param ul_ctrlA    Configuration of control A register.
 */
void dmac_channel_set_ctrlA(Dmac *p_dmac, uint32_t ul_num, uint32_t ul_ctrlA)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLA = ul_ctrlA;
   84c48:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84c4c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   84c50:	6482      	str	r2, [r0, #72]	; 0x48
   84c52:	4770      	bx	lr

00084c54 <dmac_channel_set_ctrlB>:
 * \param ul_num      Channel number.
 * \param ul_ctrlB    Configuration of control B register.
 */
void dmac_channel_set_ctrlB(Dmac *p_dmac, uint32_t ul_num, uint32_t ul_ctrlB)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CTRLB = ul_ctrlB;
   84c54:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84c58:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   84c5c:	64c2      	str	r2, [r0, #76]	; 0x4c
   84c5e:	4770      	bx	lr

00084c60 <dmac_channel_set_configuration>:
 * \param ul_cfg      Configuration of CFG register.
 */
void dmac_channel_set_configuration(Dmac *p_dmac, uint32_t ul_num,
		uint32_t ul_cfg)
{
	p_dmac->DMAC_CH_NUM[ul_num].DMAC_CFG = ul_cfg;
   84c60:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84c64:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   84c68:	6502      	str	r2, [r0, #80]	; 0x50
   84c6a:	4770      	bx	lr

00084c6c <dmac_channel_single_buf_transfer_init>:
 * \param ul_num      Channel number.
 * \param p_desc      Pointer to a transfer descriptor.
 */
void dmac_channel_single_buf_transfer_init(Dmac *p_dmac,
		uint32_t ul_num, dma_transfer_descriptor_t *p_desc)
{
   84c6c:	b570      	push	{r4, r5, r6, lr}
   84c6e:	4604      	mov	r4, r0
   84c70:	460e      	mov	r6, r1
   84c72:	4615      	mov	r5, r2
	/* Clear any pending interrupts */
	p_dmac->DMAC_EBCISR;
   84c74:	6a43      	ldr	r3, [r0, #36]	; 0x24

	dmac_channel_set_source_addr(p_dmac, ul_num, p_desc->ul_source_addr);
   84c76:	6812      	ldr	r2, [r2, #0]
   84c78:	f644 4325 	movw	r3, #19493	; 0x4c25
   84c7c:	f2c0 0308 	movt	r3, #8
   84c80:	4798      	blx	r3
	dmac_channel_set_destination_addr(p_dmac, ul_num,
   84c82:	4620      	mov	r0, r4
   84c84:	4631      	mov	r1, r6
   84c86:	686a      	ldr	r2, [r5, #4]
   84c88:	f644 4331 	movw	r3, #19505	; 0x4c31
   84c8c:	f2c0 0308 	movt	r3, #8
   84c90:	4798      	blx	r3
			p_desc->ul_destination_addr);
	dmac_channel_set_descriptor_addr(p_dmac, ul_num, 0);
   84c92:	4620      	mov	r0, r4
   84c94:	4631      	mov	r1, r6
   84c96:	f04f 0200 	mov.w	r2, #0
   84c9a:	f644 433d 	movw	r3, #19517	; 0x4c3d
   84c9e:	f2c0 0308 	movt	r3, #8
   84ca2:	4798      	blx	r3
	dmac_channel_set_ctrlA(p_dmac, ul_num, p_desc->ul_ctrlA);
   84ca4:	4620      	mov	r0, r4
   84ca6:	4631      	mov	r1, r6
   84ca8:	68aa      	ldr	r2, [r5, #8]
   84caa:	f644 4349 	movw	r3, #19529	; 0x4c49
   84cae:	f2c0 0308 	movt	r3, #8
   84cb2:	4798      	blx	r3
	dmac_channel_set_ctrlB(p_dmac, ul_num, p_desc->ul_ctrlB);
   84cb4:	4620      	mov	r0, r4
   84cb6:	4631      	mov	r1, r6
   84cb8:	68ea      	ldr	r2, [r5, #12]
   84cba:	f644 4355 	movw	r3, #19541	; 0x4c55
   84cbe:	f2c0 0308 	movt	r3, #8
   84cc2:	4798      	blx	r3
   84cc4:	bd70      	pop	{r4, r5, r6, pc}
   84cc6:	bf00      	nop

00084cc8 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   84cc8:	b508      	push	{r3, lr}
	}
#endif

	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_UPLL) {

		pmc_enable_upll_clock();
   84cca:	f247 339d 	movw	r3, #29597	; 0x739d
   84cce:	f2c0 0308 	movt	r3, #8
   84cd2:	4798      	blx	r3
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
   84cd4:	f04f 0000 	mov.w	r0, #0
   84cd8:	f247 4141 	movw	r1, #29761	; 0x7441
   84cdc:	f2c0 0108 	movt	r1, #8
   84ce0:	4788      	blx	r1
		pmc_enable_udpck();
   84ce2:	f247 4059 	movw	r0, #29785	; 0x7459
   84ce6:	f2c0 0008 	movt	r0, #8
   84cea:	4780      	blx	r0
   84cec:	bd08      	pop	{r3, pc}
   84cee:	bf00      	nop

00084cf0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   84cf0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   84cf2:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
   84cf6:	f2c0 5001 	movt	r0, #1281	; 0x501
   84cfa:	f249 7341 	movw	r3, #38721	; 0x9741
   84cfe:	f2c0 0308 	movt	r3, #8
   84d02:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   84d04:	f04f 0000 	mov.w	r0, #0
   84d08:	f04f 013e 	mov.w	r1, #62	; 0x3e
   84d0c:	f247 22fd 	movw	r2, #29437	; 0x72fd
   84d10:	f2c0 0208 	movt	r2, #8
   84d14:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   84d16:	f247 346d 	movw	r4, #29549	; 0x736d
   84d1a:	f2c0 0408 	movt	r4, #8
   84d1e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   84d20:	2800      	cmp	r0, #0
   84d22:	d0fc      	beq.n	84d1e <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   84d24:	f247 307d 	movw	r0, #29565	; 0x737d
   84d28:	f2c0 0008 	movt	r0, #8
   84d2c:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   84d2e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   84d32:	f2c4 010e 	movt	r1, #16398	; 0x400e
   84d36:	f643 7301 	movw	r3, #16129	; 0x3f01
   84d3a:	f2c2 030d 	movt	r3, #8205	; 0x200d
   84d3e:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   84d40:	f247 348d 	movw	r4, #29581	; 0x738d
   84d44:	f2c0 0408 	movt	r4, #8
   84d48:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   84d4a:	2800      	cmp	r0, #0
   84d4c:	d0fc      	beq.n	84d48 <sysclk_init+0x58>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   84d4e:	f04f 0010 	mov.w	r0, #16
   84d52:	f247 225d 	movw	r2, #29277	; 0x725d
   84d56:	f2c0 0208 	movt	r2, #8
   84d5a:	4790      	blx	r2
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   84d5c:	f249 5079 	movw	r0, #38265	; 0x9579
   84d60:	f2c0 0008 	movt	r0, #8
   84d64:	4780      	blx	r0
   84d66:	bd10      	pop	{r4, pc}

00084d68 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
   84d68:	f04f 0001 	mov.w	r0, #1
   84d6c:	4770      	bx	lr
   84d6e:	bf00      	nop

00084d70 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   84d70:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
   84d72:	b928      	cbnz	r0, 84d80 <mem_test_unit_ready+0x10>
   84d74:	f643 7341 	movw	r3, #16193	; 0x3f41
   84d78:	f2c0 0308 	movt	r3, #8
   84d7c:	4798      	blx	r3
   84d7e:	bd08      	pop	{r3, pc}
   84d80:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
   84d84:	bd08      	pop	{r3, pc}
   84d86:	bf00      	nop

00084d88 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   84d88:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
   84d8a:	b930      	cbnz	r0, 84d9a <mem_read_capacity+0x12>
   84d8c:	4608      	mov	r0, r1
   84d8e:	f643 737d 	movw	r3, #16253	; 0x3f7d
   84d92:	f2c0 0308 	movt	r3, #8
   84d96:	4798      	blx	r3
   84d98:	bd08      	pop	{r3, pc}
   84d9a:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
   84d9e:	bd08      	pop	{r3, pc}

00084da0 <mem_unload>:

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
   84da0:	b910      	cbnz	r0, 84da8 <mem_unload+0x8>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
   84da2:	f081 0001 	eor.w	r0, r1, #1
   84da6:	4770      	bx	lr

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
   84da8:	f04f 0000 	mov.w	r0, #0
#endif

  Ctrl_access_unlock();

  return unloaded;
}
   84dac:	4770      	bx	lr
   84dae:	bf00      	nop

00084db0 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
   84db0:	b508      	push	{r3, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   84db2:	b928      	cbnz	r0, 84dc0 <mem_wr_protect+0x10>
   84db4:	f643 73a1 	movw	r3, #16289	; 0x3fa1
   84db8:	f2c0 0308 	movt	r3, #8
   84dbc:	4798      	blx	r3
   84dbe:	bd08      	pop	{r3, pc}
   84dc0:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
   84dc4:	bd08      	pop	{r3, pc}
   84dc6:	bf00      	nop

00084dc8 <mem_removal>:


bool mem_removal(U8 lun)
{
   84dc8:	b508      	push	{r3, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
   84dca:	b928      	cbnz	r0, 84dd8 <mem_removal+0x10>
   84dcc:	f643 73bd 	movw	r3, #16317	; 0x3fbd
   84dd0:	f2c0 0308 	movt	r3, #8
   84dd4:	4798      	blx	r3
   84dd6:	bd08      	pop	{r3, pc}
   84dd8:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return removal;
}
   84ddc:	bd08      	pop	{r3, pc}
   84dde:	bf00      	nop

00084de0 <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
   84de0:	b920      	cbnz	r0, 84dec <mem_name+0xc>
   84de2:	f64c 30e8 	movw	r0, #52200	; 0xcbe8
   84de6:	f2c0 0008 	movt	r0, #8
   84dea:	4770      	bx	lr
   84dec:	f04f 0000 	mov.w	r0, #0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
   84df0:	4770      	bx	lr
   84df2:	bf00      	nop

00084df4 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
   84df4:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  status =
   84df6:	b938      	cbnz	r0, 84e08 <memory_2_usb+0x14>
   84df8:	4608      	mov	r0, r1
   84dfa:	4611      	mov	r1, r2
   84dfc:	f244 0389 	movw	r3, #16521	; 0x4089
   84e00:	f2c0 0308 	movt	r3, #8
   84e04:	4798      	blx	r3
   84e06:	bd08      	pop	{r3, pc}
   84e08:	f04f 0001 	mov.w	r0, #1
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
   84e0c:	bd08      	pop	{r3, pc}
   84e0e:	bf00      	nop

00084e10 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
   84e10:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  status =
   84e12:	b938      	cbnz	r0, 84e24 <usb_2_memory+0x14>
   84e14:	4608      	mov	r0, r1
   84e16:	4611      	mov	r1, r2
   84e18:	f244 1355 	movw	r3, #16725	; 0x4155
   84e1c:	f2c0 0308 	movt	r3, #8
   84e20:	4798      	blx	r3
   84e22:	bd08      	pop	{r3, pc}
   84e24:	f04f 0001 	mov.w	r0, #1
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
   84e28:	bd08      	pop	{r3, pc}
   84e2a:	bf00      	nop

00084e2c <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   84e2c:	f241 0378 	movw	r3, #4216	; 0x1078
   84e30:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84e34:	781a      	ldrb	r2, [r3, #0]
   84e36:	f102 30ff 	add.w	r0, r2, #4294967295
   84e3a:	b2c1      	uxtb	r1, r0
   84e3c:	7019      	strb	r1, [r3, #0]
   84e3e:	4770      	bx	lr

00084e40 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   84e40:	f04f 0000 	mov.w	r0, #0
   84e44:	4770      	bx	lr
   84e46:	bf00      	nop

00084e48 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   84e48:	f04f 0000 	mov.w	r0, #0
   84e4c:	4770      	bx	lr
   84e4e:	bf00      	nop

00084e50 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
   84e50:	4770      	bx	lr
   84e52:	bf00      	nop

00084e54 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
   84e54:	b530      	push	{r4, r5, lr}
   84e56:	b083      	sub	sp, #12

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   84e58:	f241 038c 	movw	r3, #4236	; 0x108c
   84e5c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84e60:	7818      	ldrb	r0, [r3, #0]
   84e62:	2800      	cmp	r0, #0
   84e64:	f040 80df 	bne.w	85026 <udi_cdc_tx_send+0x1d2>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   84e68:	f648 01d9 	movw	r1, #35033	; 0x88d9
   84e6c:	f2c0 0108 	movt	r1, #8
   84e70:	4788      	blx	r1
   84e72:	b160      	cbz	r0, 84e8e <udi_cdc_tx_send+0x3a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   84e74:	f241 0480 	movw	r4, #4224	; 0x1080
   84e78:	f2c2 0407 	movt	r4, #8199	; 0x2007
   84e7c:	8824      	ldrh	r4, [r4, #0]
   84e7e:	f648 103d 	movw	r0, #35133	; 0x893d
   84e82:	f2c0 0008 	movt	r0, #8
   84e86:	4780      	blx	r0
   84e88:	4284      	cmp	r4, r0
   84e8a:	d10d      	bne.n	84ea8 <udi_cdc_tx_send+0x54>
   84e8c:	e0cb      	b.n	85026 <udi_cdc_tx_send+0x1d2>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   84e8e:	f241 0280 	movw	r2, #4224	; 0x1080
   84e92:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84e96:	8814      	ldrh	r4, [r2, #0]
   84e98:	f648 132d 	movw	r3, #35117	; 0x892d
   84e9c:	f2c0 0308 	movt	r3, #8
   84ea0:	4798      	blx	r3
   84ea2:	4284      	cmp	r4, r0
   84ea4:	f000 80bf 	beq.w	85026 <udi_cdc_tx_send+0x1d2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84ea8:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   84eac:	f1d5 0501 	rsbs	r5, r5, #1
   84eb0:	bf38      	it	cc
   84eb2:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   84eb4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   84eb6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84eba:	f240 2198 	movw	r1, #664	; 0x298
   84ebe:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84ec2:	f04f 0200 	mov.w	r2, #0
   84ec6:	700a      	strb	r2, [r1, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   84ec8:	f640 436c 	movw	r3, #3180	; 0xc6c
   84ecc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84ed0:	781c      	ldrb	r4, [r3, #0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   84ed2:	f640 4070 	movw	r0, #3184	; 0xc70
   84ed6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84eda:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
   84ede:	bb79      	cbnz	r1, 84f40 <udi_cdc_tx_send+0xec>
		sof_zlp_counter++;
   84ee0:	f640 4368 	movw	r3, #3176	; 0xc68
   84ee4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84ee8:	881a      	ldrh	r2, [r3, #0]
   84eea:	f102 0201 	add.w	r2, r2, #1
   84eee:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   84ef0:	f648 00d9 	movw	r0, #35033	; 0x88d9
   84ef4:	f2c0 0008 	movt	r0, #8
   84ef8:	4780      	blx	r0
   84efa:	b930      	cbnz	r0, 84f0a <udi_cdc_tx_send+0xb6>
   84efc:	f640 4168 	movw	r1, #3176	; 0xc68
   84f00:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84f04:	880b      	ldrh	r3, [r1, #0]
   84f06:	2b63      	cmp	r3, #99	; 0x63
   84f08:	d90d      	bls.n	84f26 <udi_cdc_tx_send+0xd2>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   84f0a:	f648 02d9 	movw	r2, #35033	; 0x88d9
   84f0e:	f2c0 0208 	movt	r2, #8
   84f12:	4790      	blx	r2
   84f14:	b1a0      	cbz	r0, 84f40 <udi_cdc_tx_send+0xec>
   84f16:	f640 4068 	movw	r0, #3176	; 0xc68
   84f1a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84f1e:	8801      	ldrh	r1, [r0, #0]
   84f20:	f5b1 7f48 	cmp.w	r1, #800	; 0x320
   84f24:	d20c      	bcs.n	84f40 <udi_cdc_tx_send+0xec>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   84f26:	2d00      	cmp	r5, #0
   84f28:	d07d      	beq.n	85026 <udi_cdc_tx_send+0x1d2>
		cpu_irq_enable();
   84f2a:	f240 2398 	movw	r3, #664	; 0x298
   84f2e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84f32:	f04f 0201 	mov.w	r2, #1
   84f36:	701a      	strb	r2, [r3, #0]
   84f38:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   84f3c:	b662      	cpsie	i
   84f3e:	e072      	b.n	85026 <udi_cdc_tx_send+0x1d2>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   84f40:	f640 4368 	movw	r3, #3176	; 0xc68
   84f44:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84f48:	f04f 0200 	mov.w	r2, #0
   84f4c:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   84f4e:	f241 40a0 	movw	r0, #5280	; 0x14a0
   84f52:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84f56:	7801      	ldrb	r1, [r0, #0]
   84f58:	b949      	cbnz	r1, 84f6e <udi_cdc_tx_send+0x11a>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   84f5a:	4294      	cmp	r4, r2
   84f5c:	bf14      	ite	ne
   84f5e:	2200      	movne	r2, #0
   84f60:	2201      	moveq	r2, #1
   84f62:	f640 436c 	movw	r3, #3180	; 0xc6c
   84f66:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84f6a:	701a      	strb	r2, [r3, #0]
   84f6c:	e003      	b.n	84f76 <udi_cdc_tx_send+0x122>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   84f6e:	f1d4 0401 	rsbs	r4, r4, #1
   84f72:	bf38      	it	cc
   84f74:	2400      	movcc	r4, #0
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   84f76:	f241 008c 	movw	r0, #4236	; 0x108c
   84f7a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   84f7e:	f04f 0201 	mov.w	r2, #1
   84f82:	7002      	strb	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   84f84:	b13d      	cbz	r5, 84f96 <udi_cdc_tx_send+0x142>
		cpu_irq_enable();
   84f86:	f240 2598 	movw	r5, #664	; 0x298
   84f8a:	f2c2 0507 	movt	r5, #8199	; 0x2007
   84f8e:	702a      	strb	r2, [r5, #0]
   84f90:	f3bf 8f5f 	dmb	sy
   84f94:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   84f96:	4625      	mov	r5, r4
   84f98:	f640 4170 	movw	r1, #3184	; 0xc70
   84f9c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   84fa0:	f831 4014 	ldrh.w	r4, [r1, r4, lsl #1]
   84fa4:	f5b4 7400 	subs.w	r4, r4, #512	; 0x200
   84fa8:	bf18      	it	ne
   84faa:	2401      	movne	r4, #1
	if (b_short_packet) {
   84fac:	b1dc      	cbz	r4, 84fe6 <udi_cdc_tx_send+0x192>
		if (udd_is_high_speed()) {
   84fae:	f648 02d9 	movw	r2, #35033	; 0x88d9
   84fb2:	f2c0 0208 	movt	r2, #8
   84fb6:	4790      	blx	r2
   84fb8:	b150      	cbz	r0, 84fd0 <udi_cdc_tx_send+0x17c>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   84fba:	f648 103d 	movw	r0, #35133	; 0x893d
   84fbe:	f2c0 0008 	movt	r0, #8
   84fc2:	4780      	blx	r0
   84fc4:	f241 0280 	movw	r2, #4224	; 0x1080
   84fc8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   84fcc:	8010      	strh	r0, [r2, #0]
   84fce:	e011      	b.n	84ff4 <udi_cdc_tx_send+0x1a0>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   84fd0:	f648 112d 	movw	r1, #35117	; 0x892d
   84fd4:	f2c0 0108 	movt	r1, #8
   84fd8:	4788      	blx	r1
   84fda:	f241 0380 	movw	r3, #4224	; 0x1080
   84fde:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84fe2:	8018      	strh	r0, [r3, #0]
   84fe4:	e006      	b.n	84ff4 <udi_cdc_tx_send+0x1a0>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   84fe6:	f241 0380 	movw	r3, #4224	; 0x1080
   84fea:	f2c2 0307 	movt	r3, #8199	; 0x2007
   84fee:	f04f 0000 	mov.w	r0, #0
   84ff2:	8018      	strh	r0, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   84ff4:	f640 4170 	movw	r1, #3184	; 0xc70
   84ff8:	f2c2 0107 	movt	r1, #8199	; 0x2007
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
   84ffc:	f831 3015 	ldrh.w	r3, [r1, r5, lsl #1]
   85000:	f245 0041 	movw	r0, #20545	; 0x5041
   85004:	f2c0 0008 	movt	r0, #8
   85008:	9000      	str	r0, [sp, #0]
   8500a:	f04f 0084 	mov.w	r0, #132	; 0x84
   8500e:	4621      	mov	r1, r4
   85010:	f640 4474 	movw	r4, #3188	; 0xc74
   85014:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85018:	eb04 2245 	add.w	r2, r4, r5, lsl #9
   8501c:	f648 34f9 	movw	r4, #35833	; 0x8bf9
   85020:	f2c0 0408 	movt	r4, #8
   85024:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   85026:	b003      	add	sp, #12
   85028:	bd30      	pop	{r4, r5, pc}
   8502a:	bf00      	nop

0008502c <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
   8502c:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
   8502e:	f04f 0000 	mov.w	r0, #0
   85032:	f644 6355 	movw	r3, #20053	; 0x4e55
   85036:	f2c0 0308 	movt	r3, #8
   8503a:	4798      	blx	r3
   8503c:	bd08      	pop	{r3, pc}
   8503e:	bf00      	nop

00085040 <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   85040:	b508      	push	{r3, lr}
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   85042:	b9e8      	cbnz	r0, 85080 <udi_cdc_data_sent+0x40>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   85044:	f640 436c 	movw	r3, #3180	; 0xc6c
   85048:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8504c:	7819      	ldrb	r1, [r3, #0]
   8504e:	f1d1 0101 	rsbs	r1, r1, #1
   85052:	bf38      	it	cc
   85054:	2100      	movcc	r1, #0
   85056:	f640 4370 	movw	r3, #3184	; 0xc70
   8505a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8505e:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   85062:	f241 41a0 	movw	r1, #5280	; 0x14a0
   85066:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8506a:	7008      	strb	r0, [r1, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   8506c:	f241 028c 	movw	r2, #4236	; 0x108c
   85070:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85074:	7010      	strb	r0, [r2, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
   85076:	f644 6355 	movw	r3, #20053	; 0x4e55
   8507a:	f2c0 0308 	movt	r3, #8
   8507e:	4798      	blx	r3
   85080:	bd08      	pop	{r3, pc}
   85082:	bf00      	nop

00085084 <udi_cdc_comm_setup>:
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
}

bool udi_cdc_comm_setup(void)
{
   85084:	b508      	push	{r3, lr}
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
   85086:	f641 4318 	movw	r3, #7192	; 0x1c18
   8508a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8508e:	7818      	ldrb	r0, [r3, #0]
   85090:	f010 0f80 	tst.w	r0, #128	; 0x80
   85094:	d020      	beq.n	850d8 <udi_cdc_comm_setup+0x54>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   85096:	f000 0160 	and.w	r1, r0, #96	; 0x60
   8509a:	2920      	cmp	r1, #32
   8509c:	d156      	bne.n	8514c <udi_cdc_comm_setup+0xc8>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   8509e:	f641 4218 	movw	r2, #7192	; 0x1c18
   850a2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   850a6:	7853      	ldrb	r3, [r2, #1]
   850a8:	2b21      	cmp	r3, #33	; 0x21
   850aa:	d152      	bne.n	85152 <udi_cdc_comm_setup+0xce>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   850ac:	f641 4018 	movw	r0, #7192	; 0x1c18
   850b0:	f2c2 0007 	movt	r0, #8199	; 0x2007
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   850b4:	88c1      	ldrh	r1, [r0, #6]
   850b6:	2907      	cmp	r1, #7
   850b8:	d14e      	bne.n	85158 <udi_cdc_comm_setup+0xd4>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
   850ba:	f641 4318 	movw	r3, #7192	; 0x1c18
   850be:	f2c2 0307 	movt	r3, #8199	; 0x2007
   850c2:	f640 4260 	movw	r2, #3168	; 0xc60
   850c6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   850ca:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   850cc:	f04f 0007 	mov.w	r0, #7
   850d0:	8198      	strh	r0, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   850d2:	f04f 0001 	mov.w	r0, #1
   850d6:	bd08      	pop	{r3, pc}
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   850d8:	f000 0160 	and.w	r1, r0, #96	; 0x60
   850dc:	2920      	cmp	r1, #32
   850de:	d13e      	bne.n	8515e <udi_cdc_comm_setup+0xda>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   850e0:	f641 4218 	movw	r2, #7192	; 0x1c18
   850e4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   850e8:	7853      	ldrb	r3, [r2, #1]
   850ea:	2b20      	cmp	r3, #32
   850ec:	d002      	beq.n	850f4 <udi_cdc_comm_setup+0x70>
   850ee:	2b22      	cmp	r3, #34	; 0x22
   850f0:	d138      	bne.n	85164 <udi_cdc_comm_setup+0xe0>
   850f2:	e01a      	b.n	8512a <udi_cdc_comm_setup+0xa6>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   850f4:	f641 4318 	movw	r3, #7192	; 0x1c18
   850f8:	f2c2 0307 	movt	r3, #8199	; 0x2007
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   850fc:	88d8      	ldrh	r0, [r3, #6]
   850fe:	2807      	cmp	r0, #7
   85100:	d133      	bne.n	8516a <udi_cdc_comm_setup+0xe6>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
   85102:	f641 4118 	movw	r1, #7192	; 0x1c18
   85106:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8510a:	f644 6251 	movw	r2, #20049	; 0x4e51
   8510e:	f2c0 0208 	movt	r2, #8
   85112:	610a      	str	r2, [r1, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
   85114:	f640 4360 	movw	r3, #3168	; 0xc60
   85118:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8511c:	608b      	str	r3, [r1, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   8511e:	f04f 0007 	mov.w	r0, #7
   85122:	8188      	strh	r0, [r1, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   85124:	f04f 0001 	mov.w	r0, #1
   85128:	bd08      	pop	{r3, pc}
			case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
				// According cdc spec 1.1 chapter 6.2.14
				UDI_CDC_SET_DTR_EXT(port, (0 !=
   8512a:	f641 4018 	movw	r0, #7192	; 0x1c18
   8512e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85132:	7881      	ldrb	r1, [r0, #2]
   85134:	f04f 0000 	mov.w	r0, #0
   85138:	f001 0101 	and.w	r1, r1, #1
   8513c:	f644 0289 	movw	r2, #18569	; 0x4889
   85140:	f2c0 0208 	movt	r2, #8
   85144:	4790      	blx	r2
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
   85146:	f04f 0001 	mov.w	r0, #1
   8514a:	bd08      	pop	{r3, pc}
			}
		}
	}
	return false;  // request Not supported
   8514c:	f04f 0000 	mov.w	r0, #0
   85150:	bd08      	pop	{r3, pc}
   85152:	f04f 0000 	mov.w	r0, #0
   85156:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   85158:	f04f 0000 	mov.w	r0, #0
   8515c:	bd08      	pop	{r3, pc}
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
   8515e:	f04f 0000 	mov.w	r0, #0
   85162:	bd08      	pop	{r3, pc}
   85164:	f04f 0000 	mov.w	r0, #0
   85168:	bd08      	pop	{r3, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   8516a:	f04f 0000 	mov.w	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
   8516e:	bd08      	pop	{r3, pc}

00085170 <udi_cdc_data_disable>:
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
}

void udi_cdc_data_disable(void)
{
   85170:	b508      	push	{r3, lr}
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
   85172:	f640 436a 	movw	r3, #3178	; 0xc6a
   85176:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8517a:	781a      	ldrb	r2, [r3, #0]
   8517c:	f102 30ff 	add.w	r0, r2, #4294967295
   85180:	b2c1      	uxtb	r1, r0
   85182:	7019      	strb	r1, [r3, #0]
	port = udi_cdc_nb_data_enabled;
   85184:	7818      	ldrb	r0, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
   85186:	f649 0365 	movw	r3, #39013	; 0x9865
   8518a:	f2c0 0308 	movt	r3, #8
   8518e:	4798      	blx	r3
	udi_cdc_data_running = false;
   85190:	f241 0084 	movw	r0, #4228	; 0x1084
   85194:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85198:	f04f 0200 	mov.w	r2, #0
   8519c:	7002      	strb	r2, [r0, #0]
   8519e:	bd08      	pop	{r3, pc}

000851a0 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
   851a0:	b508      	push	{r3, lr}
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
   851a2:	f04f 0000 	mov.w	r0, #0
   851a6:	f241 0378 	movw	r3, #4216	; 0x1078
   851aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   851ae:	7018      	strb	r0, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
   851b0:	f241 41a4 	movw	r1, #5284	; 0x14a4
   851b4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   851b8:	8008      	strh	r0, [r1, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
   851ba:	f241 0390 	movw	r3, #4240	; 0x1090
   851be:	f2c2 0307 	movt	r3, #8199	; 0x2007
   851c2:	f04f 01a1 	mov.w	r1, #161	; 0xa1
   851c6:	7019      	strb	r1, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   851c8:	f04f 0120 	mov.w	r1, #32
   851cc:	7059      	strb	r1, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   851ce:	8058      	strh	r0, [r3, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   851d0:	8098      	strh	r0, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   851d2:	f04f 0102 	mov.w	r1, #2
   851d6:	80d9      	strh	r1, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   851d8:	8118      	strh	r0, [r3, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   851da:	f640 4360 	movw	r3, #3168	; 0xc60
   851de:	f2c2 0307 	movt	r3, #8199	; 0x2007
   851e2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   851e6:	6019      	str	r1, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   851e8:	7118      	strb	r0, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   851ea:	7158      	strb	r0, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   851ec:	f04f 0208 	mov.w	r2, #8
   851f0:	719a      	strb	r2, [r3, #6]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
   851f2:	f649 0355 	movw	r3, #38997	; 0x9855
   851f6:	f2c0 0308 	movt	r3, #8
   851fa:	4798      	blx	r3
   851fc:	b158      	cbz	r0, 85216 <udi_cdc_comm_enable+0x76>
		return false;
	}
	udi_cdc_nb_comm_enabled++;
   851fe:	f241 0078 	movw	r0, #4216	; 0x1078
   85202:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85206:	7801      	ldrb	r1, [r0, #0]
   85208:	f101 0101 	add.w	r1, r1, #1
   8520c:	b2ca      	uxtb	r2, r1
   8520e:	7002      	strb	r2, [r0, #0]
	return true;
   85210:	f04f 0001 	mov.w	r0, #1
   85214:	bd08      	pop	{r3, pc}
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
   85216:	f04f 0000 	mov.w	r0, #0
	}
	udi_cdc_nb_comm_enabled++;
	return true;
}
   8521a:	bd08      	pop	{r3, pc}

0008521c <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8521c:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   85220:	b672      	cpsid	i
   85222:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   85226:	f240 2298 	movw	r2, #664	; 0x298
   8522a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8522e:	f04f 0100 	mov.w	r1, #0
   85232:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   85234:	f241 007c 	movw	r0, #4220	; 0x107c
   85238:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8523c:	8802      	ldrh	r2, [r0, #0]
   8523e:	b290      	uxth	r0, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   85240:	f241 0188 	movw	r1, #4232	; 0x1088
   85244:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85248:	7809      	ldrb	r1, [r1, #0]
   8524a:	f241 0274 	movw	r2, #4212	; 0x1074
   8524e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85252:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   85256:	1a08      	subs	r0, r1, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85258:	b94b      	cbnz	r3, 8526e <udi_cdc_multi_get_nb_received_data+0x52>
		cpu_irq_enable();
   8525a:	f240 2398 	movw	r3, #664	; 0x298
   8525e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85262:	f04f 0201 	mov.w	r2, #1
   85266:	701a      	strb	r2, [r3, #0]
   85268:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8526c:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   8526e:	4770      	bx	lr

00085270 <udi_cdc_get_nb_received_data>:

iram_size_t udi_cdc_get_nb_received_data(void)
{
   85270:	b508      	push	{r3, lr}
	return udi_cdc_multi_get_nb_received_data(0);
   85272:	f04f 0000 	mov.w	r0, #0
   85276:	f245 231d 	movw	r3, #21021	; 0x521d
   8527a:	f2c0 0308 	movt	r3, #8
   8527e:	4798      	blx	r3
}
   85280:	bd08      	pop	{r3, pc}
   85282:	bf00      	nop

00085284 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   85284:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   85286:	f245 231d 	movw	r3, #21021	; 0x521d
   8528a:	f2c0 0308 	movt	r3, #8
   8528e:	4798      	blx	r3
}
   85290:	3000      	adds	r0, #0
   85292:	bf18      	it	ne
   85294:	2001      	movne	r0, #1
   85296:	bd08      	pop	{r3, pc}

00085298 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
   85298:	b510      	push	{r4, lr}
   8529a:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8529c:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   852a0:	f1d3 0001 	rsbs	r0, r3, #1
   852a4:	bf38      	it	cc
   852a6:	2000      	movcc	r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   852a8:	b672      	cpsid	i
   852aa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   852ae:	f240 2298 	movw	r2, #664	; 0x298
   852b2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   852b6:	f04f 0100 	mov.w	r1, #0
   852ba:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   852bc:	f241 0488 	movw	r4, #4232	; 0x1088
   852c0:	f2c2 0407 	movt	r4, #8199	; 0x2007
   852c4:	7824      	ldrb	r4, [r4, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   852c6:	f241 439c 	movw	r3, #5276	; 0x149c
   852ca:	f2c2 0307 	movt	r3, #8199	; 0x2007
   852ce:	781a      	ldrb	r2, [r3, #0]
   852d0:	b96a      	cbnz	r2, 852ee <udi_cdc_rx_start+0x56>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   852d2:	f241 017c 	movw	r1, #4220	; 0x107c
   852d6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   852da:	880b      	ldrh	r3, [r1, #0]
   852dc:	b29a      	uxth	r2, r3
   852de:	f241 0174 	movw	r1, #4212	; 0x1074
   852e2:	f2c2 0107 	movt	r1, #8199	; 0x2007
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
   852e6:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
   852ea:	4293      	cmp	r3, r2
   852ec:	d90e      	bls.n	8530c <udi_cdc_rx_start+0x74>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   852ee:	2800      	cmp	r0, #0
   852f0:	d052      	beq.n	85398 <udi_cdc_rx_start+0x100>
		cpu_irq_enable();
   852f2:	f240 2198 	movw	r1, #664	; 0x298
   852f6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   852fa:	f04f 0201 	mov.w	r2, #1
   852fe:	700a      	strb	r2, [r1, #0]
   85300:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   85304:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   85306:	f04f 0000 	mov.w	r0, #0
   8530a:	e047      	b.n	8539c <udi_cdc_rx_start+0x104>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
   8530c:	f241 027c 	movw	r2, #4220	; 0x107c
   85310:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85314:	f04f 0100 	mov.w	r1, #0
   85318:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8531a:	428c      	cmp	r4, r1
   8531c:	bf14      	ite	ne
   8531e:	2100      	movne	r1, #0
   85320:	2101      	moveq	r1, #1
   85322:	f241 0388 	movw	r3, #4232	; 0x1088
   85326:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8532a:	7019      	strb	r1, [r3, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
   8532c:	f241 429c 	movw	r2, #5276	; 0x149c
   85330:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85334:	f04f 0101 	mov.w	r1, #1
   85338:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8533a:	b138      	cbz	r0, 8534c <udi_cdc_rx_start+0xb4>
		cpu_irq_enable();
   8533c:	f240 2098 	movw	r0, #664	; 0x298
   85340:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85344:	7001      	strb	r1, [r0, #0]
   85346:	f3bf 8f5f 	dmb	sy
   8534a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
   8534c:	f04f 0000 	mov.w	r0, #0
   85350:	f245 2285 	movw	r2, #21125	; 0x5285
   85354:	f2c0 0208 	movt	r2, #8
   85358:	4790      	blx	r2
   8535a:	b130      	cbz	r0, 8536a <udi_cdc_rx_start+0xd2>
		UDI_CDC_RX_NOTIFY(port);
   8535c:	f04f 0000 	mov.w	r0, #0
   85360:	f644 01ad 	movw	r1, #18605	; 0x48ad
   85364:	f2c0 0108 	movt	r1, #8
   85368:	4788      	blx	r1
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
   8536a:	f245 30a1 	movw	r0, #21409	; 0x53a1
   8536e:	f2c0 0008 	movt	r0, #8
   85372:	9000      	str	r0, [sp, #0]
   85374:	f04f 0005 	mov.w	r0, #5
   85378:	f04f 0101 	mov.w	r1, #1
   8537c:	f241 039c 	movw	r3, #4252	; 0x109c
   85380:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85384:	eb03 2244 	add.w	r2, r3, r4, lsl #9
   85388:	f44f 7300 	mov.w	r3, #512	; 0x200
   8538c:	f648 34f9 	movw	r4, #35833	; 0x8bf9
   85390:	f2c0 0408 	movt	r4, #8
   85394:	47a0      	blx	r4
   85396:	e001      	b.n	8539c <udi_cdc_rx_start+0x104>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   85398:	f04f 0000 	mov.w	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
   8539c:	b002      	add	sp, #8
   8539e:	bd10      	pop	{r4, pc}

000853a0 <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   853a0:	b510      	push	{r4, lr}
   853a2:	b082      	sub	sp, #8
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   853a4:	bb88      	cbnz	r0, 8540a <udi_cdc_data_received+0x6a>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   853a6:	f241 0388 	movw	r3, #4232	; 0x1088
   853aa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   853ae:	7818      	ldrb	r0, [r3, #0]
   853b0:	f1d0 0301 	rsbs	r3, r0, #1
   853b4:	bf38      	it	cc
   853b6:	2300      	movcc	r3, #0
	if (!n) {
   853b8:	b9a9      	cbnz	r1, 853e6 <udi_cdc_data_received+0x46>
		udd_ep_run( ep,
   853ba:	f245 34a1 	movw	r4, #21409	; 0x53a1
   853be:	f2c0 0408 	movt	r4, #8
   853c2:	9400      	str	r4, [sp, #0]
   853c4:	4610      	mov	r0, r2
   853c6:	f04f 0101 	mov.w	r1, #1
   853ca:	f241 029c 	movw	r2, #4252	; 0x109c
   853ce:	f2c2 0207 	movt	r2, #8199	; 0x2007
   853d2:	eb02 2243 	add.w	r2, r2, r3, lsl #9
   853d6:	f44f 7300 	mov.w	r3, #512	; 0x200
   853da:	f648 34f9 	movw	r4, #35833	; 0x8bf9
   853de:	f2c0 0408 	movt	r4, #8
   853e2:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
   853e4:	e011      	b.n	8540a <udi_cdc_data_received+0x6a>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   853e6:	f241 0274 	movw	r2, #4212	; 0x1074
   853ea:	f2c2 0207 	movt	r2, #8199	; 0x2007
   853ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   853f2:	f04f 0000 	mov.w	r0, #0
   853f6:	f241 419c 	movw	r1, #5276	; 0x149c
   853fa:	f2c2 0107 	movt	r1, #8199	; 0x2007
   853fe:	7008      	strb	r0, [r1, #0]
	udi_cdc_rx_start(port);
   85400:	f245 2399 	movw	r3, #21145	; 0x5299
   85404:	f2c0 0308 	movt	r3, #8
   85408:	4798      	blx	r3
}
   8540a:	b002      	add	sp, #8
   8540c:	bd10      	pop	{r4, pc}
   8540e:	bf00      	nop

00085410 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
   85410:	b538      	push	{r3, r4, r5, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
   85412:	f04f 0400 	mov.w	r4, #0
   85416:	f640 436a 	movw	r3, #3178	; 0xc6a
   8541a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8541e:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
   85420:	f241 008c 	movw	r0, #4236	; 0x108c
   85424:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85428:	7004      	strb	r4, [r0, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   8542a:	f241 41a0 	movw	r1, #5280	; 0x14a0
   8542e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85432:	700c      	strb	r4, [r1, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   85434:	f640 426c 	movw	r2, #3180	; 0xc6c
   85438:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8543c:	7014      	strb	r4, [r2, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   8543e:	f640 4370 	movw	r3, #3184	; 0xc70
   85442:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85446:	4625      	mov	r5, r4
   85448:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   8544a:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   8544c:	f241 0080 	movw	r0, #4224	; 0x1080
   85450:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85454:	8004      	strh	r4, [r0, #0]
	udi_cdc_tx_send(port);
   85456:	4620      	mov	r0, r4
   85458:	f644 6155 	movw	r1, #20053	; 0x4e55
   8545c:	f2c0 0108 	movt	r1, #8
   85460:	4788      	blx	r1

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
   85462:	f241 429c 	movw	r2, #5276	; 0x149c
   85466:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8546a:	7014      	strb	r4, [r2, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   8546c:	f241 0388 	movw	r3, #4232	; 0x1088
   85470:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85474:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   85476:	f241 0074 	movw	r0, #4212	; 0x1074
   8547a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8547e:	8004      	strh	r4, [r0, #0]
	udi_cdc_rx_pos[port] = 0;
   85480:	f241 017c 	movw	r1, #4220	; 0x107c
   85484:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85488:	800c      	strh	r4, [r1, #0]
	if (!udi_cdc_rx_start(port)) {
   8548a:	4620      	mov	r0, r4
   8548c:	f245 2299 	movw	r2, #21145	; 0x5299
   85490:	f2c0 0208 	movt	r2, #8
   85494:	4790      	blx	r2
   85496:	b198      	cbz	r0, 854c0 <udi_cdc_data_enable+0xb0>
		return false;
	}
	udi_cdc_nb_data_enabled++;
   85498:	f640 436a 	movw	r3, #3178	; 0xc6a
   8549c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   854a0:	7818      	ldrb	r0, [r3, #0]
   854a2:	f100 0001 	add.w	r0, r0, #1
   854a6:	b2c1      	uxtb	r1, r0
   854a8:	7019      	strb	r1, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   854aa:	781a      	ldrb	r2, [r3, #0]
   854ac:	2a01      	cmp	r2, #1
   854ae:	d10a      	bne.n	854c6 <udi_cdc_data_enable+0xb6>
		udi_cdc_data_running = true;
   854b0:	f04f 0001 	mov.w	r0, #1
   854b4:	f241 0384 	movw	r3, #4228	; 0x1084
   854b8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   854bc:	7018      	strb	r0, [r3, #0]
   854be:	bd38      	pop	{r3, r4, r5, pc}
	udi_cdc_rx_trans_ongoing[port] = false;
	udi_cdc_rx_buf_sel[port] = 0;
	udi_cdc_rx_buf_nb[port][0] = 0;
	udi_cdc_rx_pos[port] = 0;
	if (!udi_cdc_rx_start(port)) {
		return false;
   854c0:	f04f 0000 	mov.w	r0, #0
   854c4:	bd38      	pop	{r3, r4, r5, pc}
	}
	udi_cdc_nb_data_enabled++;
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
		udi_cdc_data_running = true;
	}
	return true;
   854c6:	f04f 0001 	mov.w	r0, #1
}
   854ca:	bd38      	pop	{r3, r4, r5, pc}

000854cc <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   854cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   854d0:	b083      	sub	sp, #12
   854d2:	4615      	mov	r5, r2
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
   854d4:	4688      	mov	r8, r1
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   854d6:	f240 2798 	movw	r7, #664	; 0x298
   854da:	f2c2 0707 	movt	r7, #8199	; 0x2007
   854de:	f04f 0b00 	mov.w	fp, #0
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   854e2:	f241 067c 	movw	r6, #4220	; 0x107c
   854e6:	f2c2 0607 	movt	r6, #8199	; 0x2007
	buf_sel = udi_cdc_rx_buf_sel[port];
   854ea:	f241 0a88 	movw	sl, #4232	; 0x1088
   854ee:	f2c2 0a07 	movt	sl, #8199	; 0x2007
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
   854f2:	f241 0974 	movw	r9, #4212	; 0x1074
   854f6:	f2c2 0907 	movt	r9, #8199	; 0x2007
	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   854fa:	f241 039c 	movw	r3, #4252	; 0x109c
   854fe:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85502:	9301      	str	r3, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85504:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   85508:	b672      	cpsid	i
   8550a:	f3bf 8f5f 	dmb	sy
   8550e:	f887 b000 	strb.w	fp, [r7]
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   85512:	8830      	ldrh	r0, [r6, #0]
   85514:	b283      	uxth	r3, r0
	buf_sel = udi_cdc_rx_buf_sel[port];
   85516:	f89a 1000 	ldrb.w	r1, [sl]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8551a:	b92a      	cbnz	r2, 85528 <udi_cdc_multi_read_buf+0x5c>
		cpu_irq_enable();
   8551c:	f04f 0401 	mov.w	r4, #1
   85520:	703c      	strb	r4, [r7, #0]
   85522:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   85526:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
   85528:	f839 4011 	ldrh.w	r4, [r9, r1, lsl #1]
   8552c:	42a3      	cmp	r3, r4
   8552e:	d307      	bcc.n	85540 <udi_cdc_multi_read_buf+0x74>
		if (!udi_cdc_data_running) {
   85530:	f241 0084 	movw	r0, #4228	; 0x1084
   85534:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85538:	7801      	ldrb	r1, [r0, #0]
   8553a:	2900      	cmp	r1, #0
   8553c:	d1e2      	bne.n	85504 <udi_cdc_multi_read_buf+0x38>
   8553e:	e01d      	b.n	8557c <udi_cdc_multi_read_buf+0xb0>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   85540:	1ae4      	subs	r4, r4, r3
   85542:	42a5      	cmp	r5, r4
   85544:	bf38      	it	cc
   85546:	462c      	movcc	r4, r5
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   85548:	eb03 2241 	add.w	r2, r3, r1, lsl #9
   8554c:	4640      	mov	r0, r8
   8554e:	9b01      	ldr	r3, [sp, #4]
   85550:	1899      	adds	r1, r3, r2
   85552:	4622      	mov	r2, r4
   85554:	f649 639d 	movw	r3, #40605	; 0x9e9d
   85558:	f2c0 0308 	movt	r3, #8
   8555c:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   8555e:	8830      	ldrh	r0, [r6, #0]
   85560:	1821      	adds	r1, r4, r0
   85562:	b28a      	uxth	r2, r1
   85564:	8032      	strh	r2, [r6, #0]
	ptr_buf += copy_nb;
   85566:	44a0      	add	r8, r4
	size -= copy_nb;
   85568:	1b2d      	subs	r5, r5, r4
	udi_cdc_rx_start(port);
   8556a:	f04f 0000 	mov.w	r0, #0
   8556e:	f245 2399 	movw	r3, #21145	; 0x5299
   85572:	f2c0 0308 	movt	r3, #8
   85576:	4798      	blx	r3

	if (size) {
   85578:	2d00      	cmp	r5, #0
   8557a:	d1c3      	bne.n	85504 <udi_cdc_multi_read_buf+0x38>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   8557c:	4628      	mov	r0, r5
   8557e:	b003      	add	sp, #12
   85580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085584 <udi_cdc_read_buf>:

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
   85584:	b508      	push	{r3, lr}
   85586:	4603      	mov	r3, r0
   85588:	460a      	mov	r2, r1
	return udi_cdc_multi_read_buf(0, buf, size);
   8558a:	f04f 0000 	mov.w	r0, #0
   8558e:	4619      	mov	r1, r3
   85590:	f245 43cd 	movw	r3, #21709	; 0x54cd
   85594:	f2c0 0308 	movt	r3, #8
   85598:	4798      	blx	r3
}
   8559a:	bd08      	pop	{r3, pc}

0008559c <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
   8559c:	b410      	push	{r4}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8559e:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   855a2:	b672      	cpsid	i
   855a4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   855a8:	f240 2398 	movw	r3, #664	; 0x298
   855ac:	f2c2 0307 	movt	r3, #8199	; 0x2007
   855b0:	f04f 0200 	mov.w	r2, #0
   855b4:	701a      	strb	r2, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   855b6:	f640 406c 	movw	r0, #3180	; 0xc6c
   855ba:	f2c2 0007 	movt	r0, #8199	; 0x2007
   855be:	7801      	ldrb	r1, [r0, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   855c0:	f640 4270 	movw	r2, #3184	; 0xc70
   855c4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   855c8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
   855cc:	f1d1 0101 	rsbs	r1, r1, #1
   855d0:	bf38      	it	cc
   855d2:	2100      	movcc	r1, #0
   855d4:	b2c8      	uxtb	r0, r1
   855d6:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   855da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   855de:	d11b      	bne.n	85618 <udi_cdc_multi_get_free_tx_buffer+0x7c>
		if ((!udi_cdc_tx_trans_ongoing[port])
   855e0:	f241 028c 	movw	r2, #4236	; 0x108c
   855e4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   855e8:	7812      	ldrb	r2, [r2, #0]
   855ea:	b9aa      	cbnz	r2, 85618 <udi_cdc_multi_get_free_tx_buffer+0x7c>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   855ec:	f241 42a0 	movw	r2, #5280	; 0x14a0
   855f0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   855f4:	7812      	ldrb	r2, [r2, #0]
   855f6:	b97a      	cbnz	r2, 85618 <udi_cdc_multi_get_free_tx_buffer+0x7c>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
   855f8:	f241 43a0 	movw	r3, #5280	; 0x14a0
   855fc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85600:	f04f 0001 	mov.w	r0, #1
   85604:	7018      	strb	r0, [r3, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85606:	f640 426c 	movw	r2, #3180	; 0xc6c
   8560a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8560e:	7011      	strb	r1, [r2, #0]
			buf_sel_nb = 0;
			buf_nosel_nb = UDI_CDC_TX_BUFFERS;
   85610:	f44f 7000 	mov.w	r0, #512	; 0x200
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
   85614:	f04f 0300 	mov.w	r3, #0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   85618:	b94c      	cbnz	r4, 8562e <udi_cdc_multi_get_free_tx_buffer+0x92>
		cpu_irq_enable();
   8561a:	f240 2298 	movw	r2, #664	; 0x298
   8561e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85622:	f04f 0101 	mov.w	r1, #1
   85626:	7011      	strb	r1, [r2, #0]
   85628:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8562c:	b662      	cpsie	i
iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
   8562e:	18c0      	adds	r0, r0, r3
		}
	}
	cpu_irq_restore(flags);

	return (UDI_CDC_TX_BUFFERS - buf_sel_nb) + (UDI_CDC_TX_BUFFERS - buf_nosel_nb);
}
   85630:	f5c0 6080 	rsb	r0, r0, #1024	; 0x400
   85634:	bc10      	pop	{r4}
   85636:	4770      	bx	lr

00085638 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   85638:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   8563a:	f245 539d 	movw	r3, #21917	; 0x559d
   8563e:	f2c0 0308 	movt	r3, #8
   85642:	4798      	blx	r3
}
   85644:	3000      	adds	r0, #0
   85646:	bf18      	it	ne
   85648:	2001      	movne	r0, #1
   8564a:	bd08      	pop	{r3, pc}

0008564c <udi_cdc_multi_write_buf>:
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
   8564c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85650:	b083      	sub	sp, #12
   85652:	4615      	mov	r5, r2

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
   85654:	f640 4360 	movw	r3, #3168	; 0xc60
   85658:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8565c:	7998      	ldrb	r0, [r3, #6]
   8565e:	2809      	cmp	r0, #9
		size *=2;
   85660:	bf08      	it	eq
   85662:	0055      	lsleq	r5, r2, #1
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
   85664:	4689      	mov	r9, r1
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   85666:	f04f 0800 	mov.w	r8, #0
		if (!udi_cdc_data_running) {
   8566a:	f241 0184 	movw	r1, #4228	; 0x1084
   8566e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85672:	9101      	str	r1, [sp, #4]
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   85674:	f240 2298 	movw	r2, #664	; 0x298
   85678:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8567c:	9200      	str	r2, [sp, #0]
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   8567e:	4640      	mov	r0, r8
   85680:	f245 6339 	movw	r3, #22073	; 0x5639
   85684:	f2c0 0308 	movt	r3, #8
   85688:	4798      	blx	r3
   8568a:	b920      	cbnz	r0, 85696 <udi_cdc_multi_write_buf+0x4a>
		if (!udi_cdc_data_running) {
   8568c:	9801      	ldr	r0, [sp, #4]
   8568e:	7803      	ldrb	r3, [r0, #0]
   85690:	2b00      	cmp	r3, #0
   85692:	d1f4      	bne.n	8567e <udi_cdc_multi_write_buf+0x32>
   85694:	e035      	b.n	85702 <udi_cdc_multi_write_buf+0xb6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85696:	f3ef 8b10 	mrs	fp, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8569a:	b672      	cpsid	i
   8569c:	f3bf 8f5f 	dmb	sy
   856a0:	9c00      	ldr	r4, [sp, #0]
   856a2:	f884 8000 	strb.w	r8, [r4]
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   856a6:	f640 466c 	movw	r6, #3180	; 0xc6c
   856aa:	f2c2 0607 	movt	r6, #8199	; 0x2007
   856ae:	7836      	ldrb	r6, [r6, #0]
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   856b0:	f640 4a70 	movw	sl, #3184	; 0xc70
   856b4:	f2c2 0a07 	movt	sl, #8199	; 0x2007
   856b8:	f83a 7016 	ldrh.w	r7, [sl, r6, lsl #1]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
   856bc:	f5c7 7400 	rsb	r4, r7, #512	; 0x200
   856c0:	42a5      	cmp	r5, r4
   856c2:	bf38      	it	cc
   856c4:	462c      	movcc	r4, r5
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
   856c6:	eb07 2146 	add.w	r1, r7, r6, lsl #9
   856ca:	f640 4074 	movw	r0, #3188	; 0xc74
   856ce:	f2c2 0007 	movt	r0, #8199	; 0x2007
   856d2:	1840      	adds	r0, r0, r1
   856d4:	4649      	mov	r1, r9
   856d6:	4622      	mov	r2, r4
   856d8:	f649 639d 	movw	r3, #40605	; 0x9e9d
   856dc:	f2c0 0308 	movt	r3, #8
   856e0:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
   856e2:	193f      	adds	r7, r7, r4
   856e4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   856e8:	f1bb 0f00 	cmp.w	fp, #0
   856ec:	d106      	bne.n	856fc <udi_cdc_multi_write_buf+0xb0>
		cpu_irq_enable();
   856ee:	f04f 0101 	mov.w	r1, #1
   856f2:	9a00      	ldr	r2, [sp, #0]
   856f4:	7011      	strb	r1, [r2, #0]
   856f6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   856fa:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
   856fc:	44a1      	add	r9, r4
	size -= copy_nb;

	if (size) {
   856fe:	1b2d      	subs	r5, r5, r4
   85700:	d1bd      	bne.n	8567e <udi_cdc_multi_write_buf+0x32>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
}
   85702:	4628      	mov	r0, r5
   85704:	b003      	add	sp, #12
   85706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8570a:	bf00      	nop

0008570c <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
   8570c:	b508      	push	{r3, lr}
   8570e:	4603      	mov	r3, r0
   85710:	460a      	mov	r2, r1
	return udi_cdc_multi_write_buf(0, buf, size);
   85712:	f04f 0000 	mov.w	r0, #0
   85716:	4619      	mov	r1, r3
   85718:	f245 634d 	movw	r3, #22093	; 0x564d
   8571c:	f2c0 0308 	movt	r3, #8
   85720:	4798      	blx	r3
}
   85722:	bd08      	pop	{r3, pc}

00085724 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
   85724:	f04f 0000 	mov.w	r0, #0
   85728:	4770      	bx	lr
   8572a:	bf00      	nop

0008572c <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
   8572c:	3000      	adds	r0, #0
   8572e:	bf18      	it	ne
   85730:	2001      	movne	r0, #1
   85732:	f641 4315 	movw	r3, #7189	; 0x1c15
   85736:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8573a:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
   8573c:	f240 2130 	movw	r1, #560	; 0x230
   85740:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85744:	f04f 0201 	mov.w	r2, #1
   85748:	700a      	strb	r2, [r1, #0]
   8574a:	4770      	bx	lr

0008574c <udi_msc_clear_sense>:
//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
   8574c:	f241 42f4 	movw	r2, #5364	; 0x14f4
   85750:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85754:	f04f 0300 	mov.w	r3, #0
   85758:	4611      	mov	r1, r2
   8575a:	f841 3b04 	str.w	r3, [r1], #4
   8575e:	6053      	str	r3, [r2, #4]
   85760:	f101 0104 	add.w	r1, r1, #4
   85764:	f841 3b04 	str.w	r3, [r1], #4
   85768:	f841 3b04 	str.w	r3, [r1], #4
   8576c:	800b      	strh	r3, [r1, #0]
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
   8576e:	f04f 00f0 	mov.w	r0, #240	; 0xf0
   85772:	7010      	strb	r0, [r2, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
   85774:	f04f 030a 	mov.w	r3, #10
   85778:	71d3      	strb	r3, [r2, #7]
   8577a:	4770      	bx	lr

0008577c <udi_msc_sense_pass>:
	udi_msc_sense.AddSenseCode = add_sense >> 8;
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
}

static void udi_msc_sense_pass(void)
{
   8577c:	b508      	push	{r3, lr}
	udi_msc_clear_sense();
   8577e:	f245 734d 	movw	r3, #22349	; 0x574d
   85782:	f2c0 0308 	movt	r3, #8
   85786:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
   85788:	f240 2048 	movw	r0, #584	; 0x248
   8578c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85790:	f04f 0200 	mov.w	r2, #0
   85794:	7302      	strb	r2, [r0, #12]
   85796:	bd08      	pop	{r3, pc}

00085798 <udi_msc_sense_fail>:
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
}

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
   85798:	b570      	push	{r4, r5, r6, lr}
   8579a:	4606      	mov	r6, r0
   8579c:	460d      	mov	r5, r1
   8579e:	4614      	mov	r4, r2
	udi_msc_clear_sense();
   857a0:	f245 734d 	movw	r3, #22349	; 0x574d
   857a4:	f2c0 0308 	movt	r3, #8
   857a8:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
   857aa:	f240 2048 	movw	r0, #584	; 0x248
   857ae:	f2c2 0007 	movt	r0, #8199	; 0x2007
   857b2:	f04f 0201 	mov.w	r2, #1
   857b6:	7302      	strb	r2, [r0, #12]
	udi_msc_sense.sense_flag_key = sense_key;
   857b8:	f241 41f4 	movw	r1, #5364	; 0x14f4
   857bc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   857c0:	708e      	strb	r6, [r1, #2]
	udi_msc_sense.information[0] = lba >> 24;
   857c2:	ea4f 6314 	mov.w	r3, r4, lsr #24
   857c6:	70cb      	strb	r3, [r1, #3]
	udi_msc_sense.information[1] = lba >> 16;
   857c8:	ea4f 4014 	mov.w	r0, r4, lsr #16
   857cc:	7108      	strb	r0, [r1, #4]
	udi_msc_sense.information[2] = lba >> 8;
   857ce:	ea4f 2214 	mov.w	r2, r4, lsr #8
   857d2:	714a      	strb	r2, [r1, #5]
	udi_msc_sense.information[3] = lba;
   857d4:	718c      	strb	r4, [r1, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
   857d6:	ea4f 2315 	mov.w	r3, r5, lsr #8
   857da:	730b      	strb	r3, [r1, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
   857dc:	734d      	strb	r5, [r1, #13]
   857de:	bd70      	pop	{r4, r5, r6, pc}

000857e0 <udi_msc_sense_fail_busy_or_change>:
{
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
}

static void udi_msc_sense_fail_busy_or_change(void)
{
   857e0:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
   857e2:	f04f 0006 	mov.w	r0, #6
   857e6:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   857ea:	f04f 0200 	mov.w	r2, #0
   857ee:	f245 7399 	movw	r3, #22425	; 0x5799
   857f2:	f2c0 0308 	movt	r3, #8
   857f6:	4798      	blx	r3
   857f8:	bd08      	pop	{r3, pc}
   857fa:	bf00      	nop

000857fc <udi_msc_sense_fail_not_present>:
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
}


static void udi_msc_sense_fail_not_present(void)
{
   857fc:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
   857fe:	f04f 0002 	mov.w	r0, #2
   85802:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
   85806:	f04f 0200 	mov.w	r2, #0
   8580a:	f245 7399 	movw	r3, #22425	; 0x5799
   8580e:	f2c0 0308 	movt	r3, #8
   85812:	4798      	blx	r3
   85814:	bd08      	pop	{r3, pc}
   85816:	bf00      	nop

00085818 <udi_msc_sense_fail_hardware>:
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}

static void udi_msc_sense_fail_hardware(void)
{
   85818:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
   8581a:	f04f 0004 	mov.w	r0, #4
   8581e:	f04f 0100 	mov.w	r1, #0
   85822:	460a      	mov	r2, r1
   85824:	f245 7399 	movw	r3, #22425	; 0x5799
   85828:	f2c0 0308 	movt	r3, #8
   8582c:	4798      	blx	r3
   8582e:	bd08      	pop	{r3, pc}

00085830 <udi_msc_sense_fail_cdb_invalid>:
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
}

static void udi_msc_sense_fail_cdb_invalid(void)
{
   85830:	b508      	push	{r3, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
   85832:	f04f 0005 	mov.w	r0, #5
   85836:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   8583a:	f04f 0200 	mov.w	r2, #0
   8583e:	f245 7399 	movw	r3, #22425	; 0x5799
   85842:	f2c0 0308 	movt	r3, #8
   85846:	4798      	blx	r3
   85848:	bd08      	pop	{r3, pc}
   8584a:	bf00      	nop

0008584c <udi_msc_csw_send>:
	udi_msc_csw_send();
}


void udi_msc_csw_send(void)
{
   8584c:	b510      	push	{r4, lr}
   8584e:	b082      	sub	sp, #8
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
   85850:	f645 13d9 	movw	r3, #23001	; 0x59d9
   85854:	f2c0 0308 	movt	r3, #8
   85858:	9300      	str	r3, [sp, #0]
   8585a:	f04f 0081 	mov.w	r0, #129	; 0x81
   8585e:	f04f 0100 	mov.w	r1, #0
   85862:	f240 2248 	movw	r2, #584	; 0x248
   85866:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8586a:	f04f 030d 	mov.w	r3, #13
   8586e:	f648 34f9 	movw	r4, #35833	; 0x8bf9
   85872:	f2c0 0408 	movt	r4, #8
   85876:	47a0      	blx	r4
   85878:	b950      	cbnz	r0, 85890 <udi_msc_csw_send+0x44>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
   8587a:	f04f 0081 	mov.w	r0, #129	; 0x81
   8587e:	f645 014d 	movw	r1, #22605	; 0x584d
   85882:	f2c0 0108 	movt	r1, #8
   85886:	f249 2285 	movw	r2, #37509	; 0x9285
   8588a:	f2c0 0208 	movt	r2, #8
   8588e:	4790      	blx	r2
	}
}
   85890:	b002      	add	sp, #8
   85892:	bd10      	pop	{r4, pc}

00085894 <udi_msc_csw_process>:

//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
   85894:	b508      	push	{r3, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
   85896:	f240 2348 	movw	r3, #584	; 0x248
   8589a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8589e:	6899      	ldr	r1, [r3, #8]
   858a0:	b171      	cbz	r1, 858c0 <udi_msc_csw_process+0x2c>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
   858a2:	f241 42b0 	movw	r2, #5296	; 0x14b0
   858a6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   858aa:	f992 300c 	ldrsb.w	r3, [r2, #12]
   858ae:	2b00      	cmp	r3, #0
			udd_ep_set_halt(UDI_MSC_EP_IN);
   858b0:	bfb4      	ite	lt
   858b2:	2081      	movlt	r0, #129	; 0x81
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
   858b4:	2002      	movge	r0, #2
   858b6:	f648 11dd 	movw	r1, #35293	; 0x89dd
   858ba:	f2c0 0108 	movt	r1, #8
   858be:	4788      	blx	r1
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
   858c0:	f241 40b0 	movw	r0, #5296	; 0x14b0
   858c4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   858c8:	6842      	ldr	r2, [r0, #4]
   858ca:	f240 2348 	movw	r3, #584	; 0x248
   858ce:	f2c2 0307 	movt	r3, #8199	; 0x2007
   858d2:	605a      	str	r2, [r3, #4]
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
	udi_msc_csw_send();
   858d4:	f645 014d 	movw	r1, #22605	; 0x584d
   858d8:	f2c0 0108 	movt	r1, #8
   858dc:	4788      	blx	r1
   858de:	bd08      	pop	{r3, pc}

000858e0 <udi_msc_cbw_validate>:
	}
}


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
   858e0:	b508      	push	{r3, lr}
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
   858e2:	f241 43b0 	movw	r3, #5296	; 0x14b0
   858e6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   858ea:	7b1a      	ldrb	r2, [r3, #12]
   858ec:	4051      	eors	r1, r2
   858ee:	f011 0f80 	tst.w	r1, #128	; 0x80
   858f2:	d106      	bne.n	85902 <udi_msc_cbw_validate+0x22>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
   858f4:	f240 2148 	movw	r1, #584	; 0x248
   858f8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   858fc:	688b      	ldr	r3, [r1, #8]
   858fe:	4283      	cmp	r3, r0
   85900:	d20c      	bcs.n	8591c <udi_msc_cbw_validate+0x3c>
		udi_msc_sense_fail_cdb_invalid();
   85902:	f645 0031 	movw	r0, #22577	; 0x5831
   85906:	f2c0 0008 	movt	r0, #8
   8590a:	4780      	blx	r0
		udi_msc_csw_process();
   8590c:	f645 0295 	movw	r2, #22677	; 0x5895
   85910:	f2c0 0208 	movt	r2, #8
   85914:	4790      	blx	r2
		return false;
   85916:	f04f 0000 	mov.w	r0, #0
   8591a:	bd08      	pop	{r3, pc}
	 *  - Case  4: Hi > Dn
	 *  - Case  5: Hi > Di
	 *  - Case  9: Ho > Dn
	 *  - Case 11: Ho > Do
	 */
	return true;
   8591c:	f04f 0001 	mov.w	r0, #1
}
   85920:	bd08      	pop	{r3, pc}
   85922:	bf00      	nop

00085924 <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
   85924:	b510      	push	{r4, lr}
   85926:	b082      	sub	sp, #8
   85928:	4602      	mov	r2, r0
   8592a:	460b      	mov	r3, r1
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
   8592c:	f645 1165 	movw	r1, #22885	; 0x5965
   85930:	f2c0 0108 	movt	r1, #8
   85934:	9100      	str	r1, [sp, #0]
   85936:	f04f 0081 	mov.w	r0, #129	; 0x81
   8593a:	f04f 0101 	mov.w	r1, #1
   8593e:	f648 34f9 	movw	r4, #35833	; 0x8bf9
   85942:	f2c0 0408 	movt	r4, #8
   85946:	47a0      	blx	r4
   85948:	b948      	cbnz	r0, 8595e <udi_msc_data_send+0x3a>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
   8594a:	f645 0319 	movw	r3, #22553	; 0x5819
   8594e:	f2c0 0308 	movt	r3, #8
   85952:	4798      	blx	r3
		udi_msc_csw_process();
   85954:	f645 0095 	movw	r0, #22677	; 0x5895
   85958:	f2c0 0008 	movt	r0, #8
   8595c:	4780      	blx	r0
	}
}
   8595e:	b002      	add	sp, #8
   85960:	bd10      	pop	{r4, pc}
   85962:	bf00      	nop

00085964 <udi_msc_data_sent>:


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
   85964:	b510      	push	{r4, lr}
   85966:	460c      	mov	r4, r1
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
   85968:	b980      	cbnz	r0, 8598c <udi_msc_data_sent+0x28>
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Update sense data
	udi_msc_sense_pass();
   8596a:	f245 737d 	movw	r3, #22397	; 0x577d
   8596e:	f2c0 0308 	movt	r3, #8
   85972:	4798      	blx	r3
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
   85974:	f240 2048 	movw	r0, #584	; 0x248
   85978:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8597c:	6882      	ldr	r2, [r0, #8]
   8597e:	1b14      	subs	r4, r2, r4
   85980:	6084      	str	r4, [r0, #8]
	udi_msc_csw_process();
   85982:	f645 0195 	movw	r1, #22677	; 0x5895
   85986:	f2c0 0108 	movt	r1, #8
   8598a:	4788      	blx	r1
   8598c:	bd10      	pop	{r4, pc}
   8598e:	bf00      	nop

00085990 <udi_msc_cbw_wait>:
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
}

static void udi_msc_cbw_wait(void)
{
   85990:	b510      	push	{r4, lr}
   85992:	b082      	sub	sp, #8
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
   85994:	f645 33ed 	movw	r3, #23533	; 0x5bed
   85998:	f2c0 0308 	movt	r3, #8
   8599c:	9300      	str	r3, [sp, #0]
   8599e:	f04f 0002 	mov.w	r0, #2
   859a2:	f04f 0101 	mov.w	r1, #1
   859a6:	f241 42b0 	movw	r2, #5296	; 0x14b0
   859aa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   859ae:	f04f 031f 	mov.w	r3, #31
   859b2:	f648 34f9 	movw	r4, #35833	; 0x8bf9
   859b6:	f2c0 0408 	movt	r4, #8
   859ba:	47a0      	blx	r4
   859bc:	b950      	cbnz	r0, 859d4 <udi_msc_cbw_wait+0x44>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
   859be:	f04f 0002 	mov.w	r0, #2
   859c2:	f645 1191 	movw	r1, #22929	; 0x5991
   859c6:	f2c0 0108 	movt	r1, #8
   859ca:	f249 2285 	movw	r2, #37509	; 0x9285
   859ce:	f2c0 0208 	movt	r2, #8
   859d2:	4790      	blx	r2
	}
}
   859d4:	b002      	add	sp, #8
   859d6:	bd10      	pop	{r4, pc}

000859d8 <udi_msc_csw_sent>:
}


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
   859d8:	b508      	push	{r3, lr}
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
   859da:	f645 1391 	movw	r3, #22929	; 0x5991
   859de:	f2c0 0308 	movt	r3, #8
   859e2:	4798      	blx	r3
   859e4:	bd08      	pop	{r3, pc}
   859e6:	bf00      	nop

000859e8 <udi_msc_cbw_invalid>:

//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
   859e8:	b508      	push	{r3, lr}
	if (!udi_msc_b_cbw_invalid)
   859ea:	f241 43d0 	movw	r3, #5328	; 0x14d0
   859ee:	f2c2 0307 	movt	r3, #8199	; 0x2007
   859f2:	7818      	ldrb	r0, [r3, #0]
   859f4:	b188      	cbz	r0, 85a1a <udi_msc_cbw_invalid+0x32>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_OUT);
   859f6:	f04f 0002 	mov.w	r0, #2
   859fa:	f648 11dd 	movw	r1, #35293	; 0x89dd
   859fe:	f2c0 0108 	movt	r1, #8
   85a02:	4788      	blx	r1
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
   85a04:	f04f 0002 	mov.w	r0, #2
   85a08:	f645 11e9 	movw	r1, #23017	; 0x59e9
   85a0c:	f2c0 0108 	movt	r1, #8
   85a10:	f249 2285 	movw	r2, #37509	; 0x9285
   85a14:	f2c0 0208 	movt	r2, #8
   85a18:	4790      	blx	r2
   85a1a:	bd08      	pop	{r3, pc}

00085a1c <udi_msc_csw_invalid>:
}

static void udi_msc_csw_invalid(void)
{
   85a1c:	b508      	push	{r3, lr}
	if (!udi_msc_b_cbw_invalid)
   85a1e:	f241 43d0 	movw	r3, #5328	; 0x14d0
   85a22:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85a26:	7818      	ldrb	r0, [r3, #0]
   85a28:	b188      	cbz	r0, 85a4e <udi_msc_csw_invalid+0x32>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_IN);
   85a2a:	f04f 0081 	mov.w	r0, #129	; 0x81
   85a2e:	f648 11dd 	movw	r1, #35293	; 0x89dd
   85a32:	f2c0 0108 	movt	r1, #8
   85a36:	4788      	blx	r1
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
   85a38:	f04f 0081 	mov.w	r0, #129	; 0x81
   85a3c:	f645 211d 	movw	r1, #23069	; 0x5a1d
   85a40:	f2c0 0108 	movt	r1, #8
   85a44:	f249 2285 	movw	r2, #37509	; 0x9285
   85a48:	f2c0 0208 	movt	r2, #8
   85a4c:	4790      	blx	r2
   85a4e:	bd08      	pop	{r3, pc}

00085a50 <udi_msc_spc_mode_sense>:
	udi_msc_csw_process();
}


static void udi_msc_spc_mode_sense(bool b_sense10)
{
   85a50:	b570      	push	{r4, r5, r6, lr}
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
   85a52:	f241 41dc 	movw	r1, #5340	; 0x14dc
   85a56:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85a5a:	f04f 0300 	mov.w	r3, #0
   85a5e:	460a      	mov	r2, r1
   85a60:	f842 3b04 	str.w	r3, [r2], #4
   85a64:	604b      	str	r3, [r1, #4]
   85a66:	f102 0204 	add.w	r2, r2, #4
   85a6a:	f842 3b04 	str.w	r3, [r2], #4
   85a6e:	f842 3b04 	str.w	r3, [r2], #4
   85a72:	6013      	str	r3, [r2, #0]

	// Initialize process
	if (b_sense10) {
   85a74:	4606      	mov	r6, r0
   85a76:	b148      	cbz	r0, 85a8c <udi_msc_spc_mode_sense+0x3c>
		request_lgt = udi_msc_cbw.CDB[8];
   85a78:	f241 44b0 	movw	r4, #5296	; 0x14b0
   85a7c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85a80:	7de5      	ldrb	r5, [r4, #23]
		ptr_mode = &sense.s10.sense_data;
   85a82:	f101 0108 	add.w	r1, r1, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
   85a86:	f04f 0408 	mov.w	r4, #8
   85a8a:	e007      	b.n	85a9c <udi_msc_spc_mode_sense+0x4c>
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
   85a8c:	f241 40b0 	movw	r0, #5296	; 0x14b0
   85a90:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85a94:	7cc5      	ldrb	r5, [r0, #19]
		ptr_mode = &sense.s6.sense_data;
   85a96:	492b      	ldr	r1, [pc, #172]	; (85b44 <udi_msc_spc_mode_sense+0xf4>)
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
   85a98:	f04f 0404 	mov.w	r4, #4
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
   85a9c:	f241 43b0 	movw	r3, #5296	; 0x14b0
   85aa0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85aa4:	7c5a      	ldrb	r2, [r3, #17]
   85aa6:	f002 003f 	and.w	r0, r2, #63	; 0x3f
	if ((SCSI_MS_MODE_INFEXP == mode)
   85aaa:	281c      	cmp	r0, #28
   85aac:	d001      	beq.n	85ab2 <udi_msc_spc_mode_sense+0x62>
			|| (SCSI_MS_MODE_ALL == mode)) {
   85aae:	283f      	cmp	r0, #63	; 0x3f
   85ab0:	d10b      	bne.n	85aca <udi_msc_spc_mode_sense+0x7a>
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
   85ab2:	f04f 031c 	mov.w	r3, #28
   85ab6:	700b      	strb	r3, [r1, #0]
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
   85ab8:	f04f 020a 	mov.w	r2, #10
   85abc:	704a      	strb	r2, [r1, #1]
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
   85abe:	f04f 0005 	mov.w	r0, #5
   85ac2:	70c8      	strb	r0, [r1, #3]
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
   85ac4:	f104 040c 	add.w	r4, r4, #12
   85ac8:	b2e4      	uxtb	r4, r4
   85aca:	42ac      	cmp	r4, r5
   85acc:	bf38      	it	cc
   85ace:	4625      	movcc	r5, r4
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
		request_lgt = data_sense_lgt;
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
   85ad0:	4628      	mov	r0, r5
   85ad2:	f04f 0180 	mov.w	r1, #128	; 0x80
   85ad6:	f645 03e1 	movw	r3, #22753	; 0x58e1
   85ada:	f2c0 0308 	movt	r3, #8
   85ade:	4798      	blx	r3
   85ae0:	b370      	cbz	r0, 85b40 <udi_msc_spc_mode_sense+0xf0>
		return;

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
   85ae2:	f241 41b0 	movw	r1, #5296	; 0x14b0
   85ae6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85aea:	7b48      	ldrb	r0, [r1, #13]
   85aec:	f644 52b1 	movw	r2, #19889	; 0x4db1
   85af0:	f2c0 0208 	movt	r2, #8
   85af4:	4790      	blx	r2
   85af6:	2800      	cmp	r0, #0
   85af8:	bf14      	ite	ne
   85afa:	2080      	movne	r0, #128	; 0x80
   85afc:	2000      	moveq	r0, #0

	if (b_sense10) {
   85afe:	b16e      	cbz	r6, 85b1c <udi_msc_spc_mode_sense+0xcc>
		sense.s10.header.mode_data_length =
				cpu_to_be16((data_sense_lgt - 2));
   85b00:	f1a4 0402 	sub.w	r4, r4, #2
   85b04:	b2a4      	uxth	r4, r4

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;

	if (b_sense10) {
		sense.s10.header.mode_data_length =
   85b06:	f241 41dc 	movw	r1, #5340	; 0x14dc
   85b0a:	f2c2 0107 	movt	r1, #8199	; 0x2007
				cpu_to_be16((data_sense_lgt - 2));
   85b0e:	ea4f 2214 	mov.w	r2, r4, lsr #8
   85b12:	ea42 2404 	orr.w	r4, r2, r4, lsl #8

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;

	if (b_sense10) {
		sense.s10.header.mode_data_length =
   85b16:	800c      	strh	r4, [r1, #0]
				cpu_to_be16((data_sense_lgt - 2));
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
   85b18:	70c8      	strb	r0, [r1, #3]
   85b1a:	e007      	b.n	85b2c <udi_msc_spc_mode_sense+0xdc>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
   85b1c:	f241 43dc 	movw	r3, #5340	; 0x14dc
   85b20:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85b24:	f104 34ff 	add.w	r4, r4, #4294967295
   85b28:	701c      	strb	r4, [r3, #0]
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
   85b2a:	7098      	strb	r0, [r3, #2]
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
   85b2c:	f241 40dc 	movw	r0, #5340	; 0x14dc
   85b30:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85b34:	4629      	mov	r1, r5
   85b36:	f645 1325 	movw	r3, #22821	; 0x5925
   85b3a:	f2c0 0308 	movt	r3, #8
   85b3e:	4798      	blx	r3
   85b40:	bd70      	pop	{r4, r5, r6, pc}
   85b42:	bf00      	nop
   85b44:	200714e0 	.word	0x200714e0

00085b48 <udi_msc_sbc_trans>:
			sizeof(udi_msc_capacity));
}


static void udi_msc_sbc_trans(bool b_read)
{
   85b48:	b510      	push	{r4, lr}
	uint32_t trans_size;

	if (!b_read) {
   85b4a:	4604      	mov	r4, r0
   85b4c:	b9d8      	cbnz	r0, 85b86 <udi_msc_sbc_trans+0x3e>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
   85b4e:	f241 43b0 	movw	r3, #5296	; 0x14b0
   85b52:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85b56:	7b58      	ldrb	r0, [r3, #13]
   85b58:	f644 51b1 	movw	r1, #19889	; 0x4db1
   85b5c:	f2c0 0108 	movt	r1, #8
   85b60:	4788      	blx	r1
   85b62:	b180      	cbz	r0, 85b86 <udi_msc_sbc_trans+0x3e>
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}

static void udi_msc_sense_fail_protected(void)
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
   85b64:	f04f 0007 	mov.w	r0, #7
   85b68:	f44f 511c 	mov.w	r1, #9984	; 0x2700
   85b6c:	f04f 0200 	mov.w	r2, #0
   85b70:	f245 7399 	movw	r3, #22425	; 0x5799
   85b74:	f2c0 0308 	movt	r3, #8
   85b78:	4798      	blx	r3
	if (!b_read) {
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
			// Write not authorized
			udi_msc_sense_fail_protected();
			udi_msc_csw_process();
   85b7a:	f645 0295 	movw	r2, #22677	; 0x5895
   85b7e:	f2c0 0208 	movt	r2, #8
   85b82:	4790      	blx	r2
			return;
   85b84:	bd10      	pop	{r4, pc}
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
   85b86:	f241 42f0 	movw	r2, #5360	; 0x14f0
   85b8a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85b8e:	f241 40b0 	movw	r0, #5296	; 0x14b0
   85b92:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85b96:	7c43      	ldrb	r3, [r0, #17]
   85b98:	70d3      	strb	r3, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
   85b9a:	7c81      	ldrb	r1, [r0, #18]
   85b9c:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
   85b9e:	7cc3      	ldrb	r3, [r0, #19]
   85ba0:	7053      	strb	r3, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
   85ba2:	7d01      	ldrb	r1, [r0, #20]
   85ba4:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
   85ba6:	f241 520a 	movw	r2, #5386	; 0x150a
   85baa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85bae:	7d83      	ldrb	r3, [r0, #22]
   85bb0:	7053      	strb	r3, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
   85bb2:	7dc0      	ldrb	r0, [r0, #23]
   85bb4:	7010      	strb	r0, [r2, #0]

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
   85bb6:	8811      	ldrh	r1, [r2, #0]
	if (!udi_msc_cbw_validate(trans_size,
   85bb8:	ea4f 2041 	mov.w	r0, r1, lsl #9
   85bbc:	2c00      	cmp	r4, #0
   85bbe:	bf14      	ite	ne
   85bc0:	2180      	movne	r1, #128	; 0x80
   85bc2:	2100      	moveq	r1, #0
   85bc4:	f645 02e1 	movw	r2, #22753	; 0x58e1
   85bc8:	f2c0 0208 	movt	r2, #8
   85bcc:	4790      	blx	r2
   85bce:	b158      	cbz	r0, 85be8 <udi_msc_sbc_trans+0xa0>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
   85bd0:	f241 5308 	movw	r3, #5384	; 0x1508
   85bd4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85bd8:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
   85bda:	f241 40ac 	movw	r0, #5292	; 0x14ac
   85bde:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85be2:	f04f 0101 	mov.w	r1, #1
   85be6:	7001      	strb	r1, [r0, #0]
   85be8:	bd10      	pop	{r4, pc}
   85bea:	bf00      	nop

00085bec <udi_msc_cbw_received>:
}


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
   85bec:	b570      	push	{r4, r5, r6, lr}
	UNUSED(ep);
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
   85bee:	2800      	cmp	r0, #0
   85bf0:	f040 82b8 	bne.w	86164 <udi_msc_cbw_received+0x578>
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
   85bf4:	291f      	cmp	r1, #31
   85bf6:	d10a      	bne.n	85c0e <udi_msc_cbw_received+0x22>
			|| (udi_msc_cbw.dCBWSignature !=
   85bf8:	f245 3355 	movw	r3, #21333	; 0x5355
   85bfc:	f2c4 3342 	movt	r3, #17218	; 0x4342
   85c00:	f241 42b0 	movw	r2, #5296	; 0x14b0
   85c04:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85c08:	6810      	ldr	r0, [r2, #0]
   85c0a:	4298      	cmp	r0, r3
   85c0c:	d011      	beq.n	85c32 <udi_msc_cbw_received+0x46>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
   85c0e:	f241 43d0 	movw	r3, #5328	; 0x14d0
   85c12:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85c16:	f04f 0201 	mov.w	r2, #1
   85c1a:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
   85c1c:	f645 11e9 	movw	r1, #23017	; 0x59e9
   85c20:	f2c0 0108 	movt	r1, #8
   85c24:	4788      	blx	r1
		udi_msc_csw_invalid();
   85c26:	f645 201d 	movw	r0, #23069	; 0x5a1d
   85c2a:	f2c0 0008 	movt	r0, #8
   85c2e:	4780      	blx	r0
		return;
   85c30:	bd70      	pop	{r4, r5, r6, pc}
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
   85c32:	f241 41b0 	movw	r1, #5296	; 0x14b0
   85c36:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85c3a:	7b4b      	ldrb	r3, [r1, #13]
   85c3c:	f003 000f 	and.w	r0, r3, #15
   85c40:	7348      	strb	r0, [r1, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
   85c42:	f241 42a8 	movw	r2, #5288	; 0x14a8
   85c46:	f2c2 0207 	movt	r2, #8199	; 0x2007
   85c4a:	7811      	ldrb	r1, [r2, #0]
   85c4c:	4281      	cmp	r1, r0
   85c4e:	d20a      	bcs.n	85c66 <udi_msc_cbw_received+0x7a>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
   85c50:	f645 0131 	movw	r1, #22577	; 0x5831
   85c54:	f2c0 0108 	movt	r1, #8
   85c58:	4788      	blx	r1
		udi_msc_csw_process();
   85c5a:	f645 0095 	movw	r0, #22677	; 0x5895
   85c5e:	f2c0 0008 	movt	r0, #8
   85c62:	4780      	blx	r0
		return;
   85c64:	bd70      	pop	{r4, r5, r6, pc}
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
   85c66:	f241 43b0 	movw	r3, #5296	; 0x14b0
   85c6a:	f2c2 0307 	movt	r3, #8199	; 0x2007
		udi_msc_sense_fail_cdb_invalid();
		udi_msc_csw_process();
		return;
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
   85c6e:	689a      	ldr	r2, [r3, #8]
   85c70:	f240 2148 	movw	r1, #584	; 0x248
   85c74:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85c78:	608a      	str	r2, [r1, #8]
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
   85c7a:	7bdb      	ldrb	r3, [r3, #15]
   85c7c:	2b5a      	cmp	r3, #90	; 0x5a
   85c7e:	f200 825a 	bhi.w	86136 <udi_msc_cbw_received+0x54a>
   85c82:	e8df f013 	tbh	[pc, r3, lsl #1]
   85c86:	01a6      	.short	0x01a6
   85c88:	02580258 	.word	0x02580258
   85c8c:	0258005b 	.word	0x0258005b
   85c90:	02580258 	.word	0x02580258
   85c94:	02580258 	.word	0x02580258
   85c98:	02580258 	.word	0x02580258
   85c9c:	02580258 	.word	0x02580258
   85ca0:	02580258 	.word	0x02580258
   85ca4:	02580258 	.word	0x02580258
   85ca8:	00790258 	.word	0x00790258
   85cac:	02580258 	.word	0x02580258
   85cb0:	02580258 	.word	0x02580258
   85cb4:	02580258 	.word	0x02580258
   85cb8:	01960258 	.word	0x01960258
   85cbc:	02580209 	.word	0x02580209
   85cc0:	02260258 	.word	0x02260258
   85cc4:	02580258 	.word	0x02580258
   85cc8:	02580258 	.word	0x02580258
   85ccc:	02580258 	.word	0x02580258
   85cd0:	025801ce 	.word	0x025801ce
   85cd4:	02480258 	.word	0x02480258
   85cd8:	02500258 	.word	0x02500258
   85cdc:	02580258 	.word	0x02580258
   85ce0:	02580258 	.word	0x02580258
   85ce4:	0258023d 	.word	0x0258023d
   85ce8:	02580258 	.word	0x02580258
   85cec:	02580258 	.word	0x02580258
   85cf0:	02580258 	.word	0x02580258
   85cf4:	02580258 	.word	0x02580258
   85cf8:	02580258 	.word	0x02580258
   85cfc:	02580258 	.word	0x02580258
   85d00:	02580258 	.word	0x02580258
   85d04:	02580258 	.word	0x02580258
   85d08:	02580258 	.word	0x02580258
   85d0c:	02580258 	.word	0x02580258
   85d10:	02580258 	.word	0x02580258
   85d14:	02580258 	.word	0x02580258
   85d18:	02580258 	.word	0x02580258
   85d1c:	02580258 	.word	0x02580258
   85d20:	02580258 	.word	0x02580258
   85d24:	02580258 	.word	0x02580258
   85d28:	02580258 	.word	0x02580258
   85d2c:	02580258 	.word	0x02580258
   85d30:	02580258 	.word	0x02580258
   85d34:	02580258 	.word	0x02580258
   85d38:	019e0258 	.word	0x019e0258
//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
	uint8_t length = udi_msc_cbw.CDB[4];
   85d3c:	f241 44b0 	movw	r4, #5296	; 0x14b0
   85d40:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85d44:	7ce4      	ldrb	r4, [r4, #19]
   85d46:	2c12      	cmp	r4, #18
   85d48:	bf28      	it	cs
   85d4a:	2412      	movcs	r4, #18

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
		length = sizeof(udi_msc_sense);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
   85d4c:	4620      	mov	r0, r4
   85d4e:	f04f 0180 	mov.w	r1, #128	; 0x80
   85d52:	f645 02e1 	movw	r2, #22753	; 0x58e1
   85d56:	f2c0 0208 	movt	r2, #8
   85d5a:	4790      	blx	r2
   85d5c:	2800      	cmp	r0, #0
   85d5e:	f000 8201 	beq.w	86164 <udi_msc_cbw_received+0x578>
		return;
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
   85d62:	f241 40f4 	movw	r0, #5364	; 0x14f4
   85d66:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85d6a:	4621      	mov	r1, r4
   85d6c:	f645 1325 	movw	r3, #22821	; 0x5925
   85d70:	f2c0 0308 	movt	r3, #8
   85d74:	4798      	blx	r3
   85d76:	bd70      	pop	{r4, r5, r6, pc}
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
   85d78:	f241 44b0 	movw	r4, #5296	; 0x14b0
   85d7c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   85d80:	7ce4      	ldrb	r4, [r4, #19]
   85d82:	2c24      	cmp	r4, #36	; 0x24
   85d84:	bf28      	it	cs
   85d86:	2424      	movcs	r4, #36	; 0x24

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
   85d88:	4620      	mov	r0, r4
   85d8a:	f04f 0180 	mov.w	r1, #128	; 0x80
   85d8e:	f645 02e1 	movw	r2, #22753	; 0x58e1
   85d92:	f2c0 0208 	movt	r2, #8
   85d96:	4790      	blx	r2
   85d98:	2800      	cmp	r0, #0
   85d9a:	f000 81e3 	beq.w	86164 <udi_msc_cbw_received+0x578>
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
   85d9e:	f241 40b0 	movw	r0, #5296	; 0x14b0
   85da2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85da6:	7c01      	ldrb	r1, [r0, #16]
   85da8:	f011 0f03 	tst.w	r1, #3
   85dac:	d105      	bne.n	85dba <udi_msc_cbw_received+0x1ce>
			|| (0 != udi_msc_cbw.CDB[2])) {
   85dae:	f241 43b0 	movw	r3, #5296	; 0x14b0
   85db2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   85db6:	7c5a      	ldrb	r2, [r3, #17]
   85db8:	b152      	cbz	r2, 85dd0 <udi_msc_cbw_received+0x1e4>
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
   85dba:	f645 0131 	movw	r1, #22577	; 0x5831
   85dbe:	f2c0 0108 	movt	r1, #8
   85dc2:	4788      	blx	r1
		udi_msc_csw_process();
   85dc4:	f645 0395 	movw	r3, #22677	; 0x5895
   85dc8:	f2c0 0308 	movt	r3, #8
   85dcc:	4798      	blx	r3
   85dce:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
   85dd0:	f241 45b0 	movw	r5, #5296	; 0x14b0
   85dd4:	f2c2 0507 	movt	r5, #8199	; 0x2007
   85dd8:	7b68      	ldrb	r0, [r5, #13]
   85dda:	f644 56c9 	movw	r6, #19913	; 0x4dc9
   85dde:	f2c0 0608 	movt	r6, #8
   85de2:	47b0      	blx	r6
   85de4:	2800      	cmp	r0, #0
   85de6:	bf14      	ite	ne
   85de8:	2080      	movne	r0, #128	; 0x80
   85dea:	2000      	moveq	r0, #0
   85dec:	f240 260c 	movw	r6, #524	; 0x20c
   85df0:	f2c2 0607 	movt	r6, #8199	; 0x2007
   85df4:	7070      	strb	r0, [r6, #1]
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
   85df6:	f241 41b0 	movw	r1, #5296	; 0x14b0
   85dfa:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85dfe:	7b48      	ldrb	r0, [r1, #13]
   85e00:	f644 53e1 	movw	r3, #19937	; 0x4de1
   85e04:	f2c0 0308 	movt	r3, #8
   85e08:	4798      	blx	r3
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
   85e0a:	f106 0510 	add.w	r5, r6, #16
   85e0e:	4603      	mov	r3, r0
   85e10:	f853 0f01 	ldr.w	r0, [r3, #1]!
   85e14:	6859      	ldr	r1, [r3, #4]
   85e16:	689a      	ldr	r2, [r3, #8]
   85e18:	68db      	ldr	r3, [r3, #12]
   85e1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85e1c:	7c32      	ldrb	r2, [r6, #16]
   85e1e:	2a00      	cmp	r2, #0
   85e20:	f000 819a 	beq.w	86158 <udi_msc_cbw_received+0x56c>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85e24:	2a22      	cmp	r2, #34	; 0x22
   85e26:	f000 819a 	beq.w	8615e <udi_msc_cbw_received+0x572>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85e2a:	7c71      	ldrb	r1, [r6, #17]
   85e2c:	2900      	cmp	r1, #0
   85e2e:	d03e      	beq.n	85eae <udi_msc_cbw_received+0x2c2>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85e30:	2922      	cmp	r1, #34	; 0x22
   85e32:	d06b      	beq.n	85f0c <udi_msc_cbw_received+0x320>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85e34:	7cb2      	ldrb	r2, [r6, #18]
   85e36:	2a00      	cmp	r2, #0
   85e38:	d03c      	beq.n	85eb4 <udi_msc_cbw_received+0x2c8>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85e3a:	2a22      	cmp	r2, #34	; 0x22
   85e3c:	d069      	beq.n	85f12 <udi_msc_cbw_received+0x326>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85e3e:	7cf1      	ldrb	r1, [r6, #19]
   85e40:	2900      	cmp	r1, #0
   85e42:	d03a      	beq.n	85eba <udi_msc_cbw_received+0x2ce>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85e44:	2922      	cmp	r1, #34	; 0x22
   85e46:	d067      	beq.n	85f18 <udi_msc_cbw_received+0x32c>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85e48:	7d32      	ldrb	r2, [r6, #20]
   85e4a:	2a00      	cmp	r2, #0
   85e4c:	d038      	beq.n	85ec0 <udi_msc_cbw_received+0x2d4>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85e4e:	2a22      	cmp	r2, #34	; 0x22
   85e50:	d065      	beq.n	85f1e <udi_msc_cbw_received+0x332>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85e52:	7d71      	ldrb	r1, [r6, #21]
   85e54:	2900      	cmp	r1, #0
   85e56:	d036      	beq.n	85ec6 <udi_msc_cbw_received+0x2da>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85e58:	2922      	cmp	r1, #34	; 0x22
   85e5a:	d063      	beq.n	85f24 <udi_msc_cbw_received+0x338>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85e5c:	7db2      	ldrb	r2, [r6, #22]
   85e5e:	b3aa      	cbz	r2, 85ecc <udi_msc_cbw_received+0x2e0>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85e60:	2a22      	cmp	r2, #34	; 0x22
   85e62:	d062      	beq.n	85f2a <udi_msc_cbw_received+0x33e>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85e64:	7df1      	ldrb	r1, [r6, #23]
   85e66:	b3a1      	cbz	r1, 85ed2 <udi_msc_cbw_received+0x2e6>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85e68:	2922      	cmp	r1, #34	; 0x22
   85e6a:	d061      	beq.n	85f30 <udi_msc_cbw_received+0x344>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85e6c:	7e32      	ldrb	r2, [r6, #24]
   85e6e:	b39a      	cbz	r2, 85ed8 <udi_msc_cbw_received+0x2ec>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85e70:	2a22      	cmp	r2, #34	; 0x22
   85e72:	d060      	beq.n	85f36 <udi_msc_cbw_received+0x34a>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85e74:	7e71      	ldrb	r1, [r6, #25]
   85e76:	b391      	cbz	r1, 85ede <udi_msc_cbw_received+0x2f2>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85e78:	2922      	cmp	r1, #34	; 0x22
   85e7a:	d05f      	beq.n	85f3c <udi_msc_cbw_received+0x350>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85e7c:	7eb2      	ldrb	r2, [r6, #26]
   85e7e:	b38a      	cbz	r2, 85ee4 <udi_msc_cbw_received+0x2f8>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85e80:	2a22      	cmp	r2, #34	; 0x22
   85e82:	d05e      	beq.n	85f42 <udi_msc_cbw_received+0x356>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85e84:	7ef1      	ldrb	r1, [r6, #27]
   85e86:	b381      	cbz	r1, 85eea <udi_msc_cbw_received+0x2fe>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85e88:	2922      	cmp	r1, #34	; 0x22
   85e8a:	d05d      	beq.n	85f48 <udi_msc_cbw_received+0x35c>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85e8c:	7f32      	ldrb	r2, [r6, #28]
   85e8e:	b37a      	cbz	r2, 85ef0 <udi_msc_cbw_received+0x304>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85e90:	2a22      	cmp	r2, #34	; 0x22
   85e92:	d05c      	beq.n	85f4e <udi_msc_cbw_received+0x362>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85e94:	7f71      	ldrb	r1, [r6, #29]
   85e96:	b371      	cbz	r1, 85ef6 <udi_msc_cbw_received+0x30a>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85e98:	2922      	cmp	r1, #34	; 0x22
   85e9a:	d05b      	beq.n	85f54 <udi_msc_cbw_received+0x368>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85e9c:	7fb2      	ldrb	r2, [r6, #30]
   85e9e:	b36a      	cbz	r2, 85efc <udi_msc_cbw_received+0x310>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85ea0:	2a22      	cmp	r2, #34	; 0x22
   85ea2:	d05a      	beq.n	85f5a <udi_msc_cbw_received+0x36e>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
   85ea4:	7ff3      	ldrb	r3, [r6, #31]
   85ea6:	bb63      	cbnz	r3, 85f02 <udi_msc_cbw_received+0x316>
   85ea8:	f04f 030f 	mov.w	r3, #15
   85eac:	e057      	b.n	85f5e <udi_msc_cbw_received+0x372>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
			break;
		}
		i++;
   85eae:	f04f 0301 	mov.w	r3, #1
   85eb2:	e054      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85eb4:	f04f 0302 	mov.w	r3, #2
   85eb8:	e051      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85eba:	f04f 0303 	mov.w	r3, #3
   85ebe:	e04e      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85ec0:	f04f 0304 	mov.w	r3, #4
   85ec4:	e04b      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85ec6:	f04f 0305 	mov.w	r3, #5
   85eca:	e048      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85ecc:	f04f 0306 	mov.w	r3, #6
   85ed0:	e045      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85ed2:	f04f 0307 	mov.w	r3, #7
   85ed6:	e042      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85ed8:	f04f 0308 	mov.w	r3, #8
   85edc:	e03f      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85ede:	f04f 0309 	mov.w	r3, #9
   85ee2:	e03c      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85ee4:	f04f 030a 	mov.w	r3, #10
   85ee8:	e039      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85eea:	f04f 030b 	mov.w	r3, #11
   85eee:	e036      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85ef0:	f04f 030c 	mov.w	r3, #12
   85ef4:	e033      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85ef6:	f04f 030d 	mov.w	r3, #13
   85efa:	e030      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85efc:	f04f 030e 	mov.w	r3, #14
   85f00:	e02d      	b.n	85f5e <udi_msc_cbw_received+0x372>

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
   85f02:	2b22      	cmp	r3, #34	; 0x22
   85f04:	bf08      	it	eq
   85f06:	230f      	moveq	r3, #15
   85f08:	d029      	beq.n	85f5e <udi_msc_cbw_received+0x372>
   85f0a:	e047      	b.n	85f9c <udi_msc_cbw_received+0x3b0>
			break;
		}
		i++;
   85f0c:	f04f 0301 	mov.w	r3, #1
   85f10:	e025      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85f12:	f04f 0302 	mov.w	r3, #2
   85f16:	e022      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85f18:	f04f 0303 	mov.w	r3, #3
   85f1c:	e01f      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85f1e:	f04f 0304 	mov.w	r3, #4
   85f22:	e01c      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85f24:	f04f 0305 	mov.w	r3, #5
   85f28:	e019      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85f2a:	f04f 0306 	mov.w	r3, #6
   85f2e:	e016      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85f30:	f04f 0307 	mov.w	r3, #7
   85f34:	e013      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85f36:	f04f 0308 	mov.w	r3, #8
   85f3a:	e010      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85f3c:	f04f 0309 	mov.w	r3, #9
   85f40:	e00d      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85f42:	f04f 030a 	mov.w	r3, #10
   85f46:	e00a      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85f48:	f04f 030b 	mov.w	r3, #11
   85f4c:	e007      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85f4e:	f04f 030c 	mov.w	r3, #12
   85f52:	e004      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85f54:	f04f 030d 	mov.w	r3, #13
   85f58:	e001      	b.n	85f5e <udi_msc_cbw_received+0x372>
   85f5a:	f04f 030e 	mov.w	r3, #14
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		udi_msc_inquiry_data.product_id[i] = ' ';
   85f5e:	f240 210c 	movw	r1, #524	; 0x20c
   85f62:	f2c2 0107 	movt	r1, #8199	; 0x2007
   85f66:	f04f 0220 	mov.w	r2, #32
   85f6a:	f1c3 050f 	rsb	r5, r3, #15
   85f6e:	f005 0001 	and.w	r0, r5, #1
   85f72:	18cd      	adds	r5, r1, r3
   85f74:	742a      	strb	r2, [r5, #16]
		i++;
   85f76:	f103 0301 	add.w	r3, r3, #1
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   85f7a:	2b10      	cmp	r3, #16
   85f7c:	f040 80f3 	bne.w	86166 <udi_msc_cbw_received+0x57a>
   85f80:	e00c      	b.n	85f9c <udi_msc_cbw_received+0x3b0>
		udi_msc_inquiry_data.product_id[i] = ' ';
   85f82:	18c8      	adds	r0, r1, r3
   85f84:	7402      	strb	r2, [r0, #16]
		i++;
   85f86:	f103 0301 	add.w	r3, r3, #1
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   85f8a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
		udi_msc_inquiry_data.product_id[i] = ' ';
   85f8e:	18c8      	adds	r0, r1, r3
   85f90:	7402      	strb	r2, [r0, #16]
		i++;
   85f92:	f103 0301 	add.w	r3, r3, #1
   85f96:	b2db      	uxtb	r3, r3
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   85f98:	2b10      	cmp	r3, #16
   85f9a:	d1f2      	bne.n	85f82 <udi_msc_cbw_received+0x396>
		udi_msc_inquiry_data.product_id[i] = ' ';
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
   85f9c:	f240 200c 	movw	r0, #524	; 0x20c
   85fa0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   85fa4:	4621      	mov	r1, r4
   85fa6:	f645 1225 	movw	r2, #22821	; 0x5925
   85faa:	f2c0 0208 	movt	r2, #8
   85fae:	4790      	blx	r2
   85fb0:	bd70      	pop	{r4, r5, r6, pc}
	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
		break;

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
   85fb2:	f04f 0000 	mov.w	r0, #0
   85fb6:	f645 2351 	movw	r3, #23121	; 0x5a51
   85fba:	f2c0 0308 	movt	r3, #8
   85fbe:	4798      	blx	r3
		break;
   85fc0:	bd70      	pop	{r4, r5, r6, pc}
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
   85fc2:	f04f 0001 	mov.w	r0, #1
   85fc6:	f645 2251 	movw	r2, #23121	; 0x5a51
   85fca:	f2c0 0208 	movt	r2, #8
   85fce:	4790      	blx	r2
		break;
   85fd0:	bd70      	pop	{r4, r5, r6, pc}
}


static bool udi_msc_spc_testunitready_global(void)
{
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
   85fd2:	f644 5171 	movw	r1, #19825	; 0x4d71
   85fd6:	f2c0 0108 	movt	r1, #8
   85fda:	4788      	blx	r1
   85fdc:	2802      	cmp	r0, #2
   85fde:	d009      	beq.n	85ff4 <udi_msc_cbw_received+0x408>
   85fe0:	2803      	cmp	r0, #3
   85fe2:	d001      	beq.n	85fe8 <udi_msc_cbw_received+0x3fc>
   85fe4:	b190      	cbz	r0, 8600c <udi_msc_cbw_received+0x420>
   85fe6:	e00b      	b.n	86000 <udi_msc_cbw_received+0x414>
	case CTRL_GOOD:
		return true;	// Don't change sense data
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   85fe8:	f245 73e1 	movw	r3, #22497	; 0x57e1
   85fec:	f2c0 0308 	movt	r3, #8
   85ff0:	4798      	blx	r3
   85ff2:	e010      	b.n	86016 <udi_msc_cbw_received+0x42a>
		break;
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   85ff4:	f245 71fd 	movw	r1, #22525	; 0x57fd
   85ff8:	f2c0 0108 	movt	r1, #8
   85ffc:	4788      	blx	r1
   85ffe:	e00a      	b.n	86016 <udi_msc_cbw_received+0x42a>
		break;
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
   86000:	f645 0019 	movw	r0, #22553	; 0x5819
   86004:	f2c0 0008 	movt	r0, #8
   86008:	4780      	blx	r0
   8600a:	e004      	b.n	86016 <udi_msc_cbw_received+0x42a>

static void udi_msc_spc_testunitready(void)
{
	if (udi_msc_spc_testunitready_global()) {
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
   8600c:	f245 727d 	movw	r2, #22397	; 0x577d
   86010:	f2c0 0208 	movt	r2, #8
   86014:	4790      	blx	r2
	}
	// Send status in CSW packet
	udi_msc_csw_process();
   86016:	f645 0095 	movw	r0, #22677	; 0x5895
   8601a:	f2c0 0008 	movt	r0, #8
   8601e:	4780      	blx	r0
   86020:	bd70      	pop	{r4, r5, r6, pc}

static void udi_msc_sbc_read_capacity(void)
{
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
   86022:	f04f 0008 	mov.w	r0, #8
   86026:	f04f 0180 	mov.w	r1, #128	; 0x80
   8602a:	f645 03e1 	movw	r3, #22753	; 0x58e1
   8602e:	f2c0 0308 	movt	r3, #8
   86032:	4798      	blx	r3
   86034:	2800      	cmp	r0, #0
   86036:	f000 8095 	beq.w	86164 <udi_msc_cbw_received+0x578>
					USB_CBW_DIRECTION_IN))
		return;

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
   8603a:	f241 40b0 	movw	r0, #5296	; 0x14b0
   8603e:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86042:	7b40      	ldrb	r0, [r0, #13]
   86044:	f241 41d4 	movw	r1, #5332	; 0x14d4
   86048:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8604c:	f644 5289 	movw	r2, #19849	; 0x4d89
   86050:	f2c0 0208 	movt	r2, #8
   86054:	4790      	blx	r2
   86056:	2802      	cmp	r0, #2
   86058:	d008      	beq.n	8606c <udi_msc_cbw_received+0x480>
   8605a:	2803      	cmp	r0, #3
   8605c:	d001      	beq.n	86062 <udi_msc_cbw_received+0x476>
   8605e:	b178      	cbz	r0, 86080 <udi_msc_cbw_received+0x494>
   86060:	e009      	b.n	86076 <udi_msc_cbw_received+0x48a>
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   86062:	4847      	ldr	r0, [pc, #284]	; (86180 <udi_msc_cbw_received+0x594>)
   86064:	4780      	blx	r0
		udi_msc_csw_process();
   86066:	4947      	ldr	r1, [pc, #284]	; (86184 <udi_msc_cbw_received+0x598>)
   86068:	4788      	blx	r1
   8606a:	bd70      	pop	{r4, r5, r6, pc}
		return;
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   8606c:	4b46      	ldr	r3, [pc, #280]	; (86188 <udi_msc_cbw_received+0x59c>)
   8606e:	4798      	blx	r3
		udi_msc_csw_process();
   86070:	4a44      	ldr	r2, [pc, #272]	; (86184 <udi_msc_cbw_received+0x598>)
   86072:	4790      	blx	r2
   86074:	bd70      	pop	{r4, r5, r6, pc}
		return;
	default:
		udi_msc_sense_fail_hardware();
   86076:	4945      	ldr	r1, [pc, #276]	; (8618c <udi_msc_cbw_received+0x5a0>)
   86078:	4788      	blx	r1
		udi_msc_csw_process();
   8607a:	4b42      	ldr	r3, [pc, #264]	; (86184 <udi_msc_cbw_received+0x598>)
   8607c:	4798      	blx	r3
   8607e:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
   86080:	4843      	ldr	r0, [pc, #268]	; (86190 <udi_msc_cbw_received+0x5a4>)
   86082:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   86086:	6042      	str	r2, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
   86088:	6801      	ldr	r1, [r0, #0]
   8608a:	ba0b      	rev	r3, r1
   8608c:	6003      	str	r3, [r0, #0]
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
   8608e:	f04f 0108 	mov.w	r1, #8
   86092:	4a40      	ldr	r2, [pc, #256]	; (86194 <udi_msc_cbw_received+0x5a8>)
   86094:	4790      	blx	r2
   86096:	bd70      	pop	{r4, r5, r6, pc}
}


static void udi_msc_sbc_start_stop(void)
{
	bool start = 0x1 & udi_msc_cbw.CDB[4];
   86098:	f241 41b0 	movw	r1, #5296	; 0x14b0
   8609c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   860a0:	7ccb      	ldrb	r3, [r1, #19]
	bool loej = 0x2 & udi_msc_cbw.CDB[4];
	if (loej) {
   860a2:	f003 0202 	and.w	r2, r3, #2
   860a6:	b2d1      	uxtb	r1, r2
   860a8:	b141      	cbz	r1, 860bc <udi_msc_cbw_received+0x4d0>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
   860aa:	f083 0301 	eor.w	r3, r3, #1
   860ae:	f003 0101 	and.w	r1, r3, #1
   860b2:	f644 52a1 	movw	r2, #19873	; 0x4da1
   860b6:	f2c0 0208 	movt	r2, #8
   860ba:	4790      	blx	r2
	}
	udi_msc_sense_pass();
   860bc:	f245 707d 	movw	r0, #22397	; 0x577d
   860c0:	f2c0 0008 	movt	r0, #8
   860c4:	4780      	blx	r0
	udi_msc_csw_process();
   860c6:	f645 0195 	movw	r1, #22677	; 0x5895
   860ca:	f2c0 0108 	movt	r1, #8
   860ce:	4788      	blx	r1
   860d0:	bd70      	pop	{r4, r5, r6, pc}
}


static void udi_msc_spc_prevent_allow_medium_removal(void)
{
	uint8_t prevent = udi_msc_cbw.CDB[4];
   860d2:	f241 40b0 	movw	r0, #5296	; 0x14b0
   860d6:	f2c2 0007 	movt	r0, #8199	; 0x2007
	if (0 == prevent) {
   860da:	7cc1      	ldrb	r1, [r0, #19]
   860dc:	b929      	cbnz	r1, 860ea <udi_msc_cbw_received+0x4fe>
		udi_msc_sense_pass();
   860de:	f245 727d 	movw	r2, #22397	; 0x577d
   860e2:	f2c0 0208 	movt	r2, #8
   860e6:	4790      	blx	r2
   860e8:	e004      	b.n	860f4 <udi_msc_cbw_received+0x508>
	} else {
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
   860ea:	f645 0331 	movw	r3, #22577	; 0x5831
   860ee:	f2c0 0308 	movt	r3, #8
   860f2:	4798      	blx	r3
	}
	udi_msc_csw_process();
   860f4:	f645 0095 	movw	r0, #22677	; 0x5895
   860f8:	f2c0 0008 	movt	r0, #8
   860fc:	4780      	blx	r0
   860fe:	bd70      	pop	{r4, r5, r6, pc}
		udi_msc_spc_prevent_allow_medium_removal();
		break;

		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
   86100:	f245 707d 	movw	r0, #22397	; 0x577d
   86104:	f2c0 0008 	movt	r0, #8
   86108:	4780      	blx	r0
		udi_msc_csw_process();
   8610a:	f645 0195 	movw	r1, #22677	; 0x5895
   8610e:	f2c0 0108 	movt	r1, #8
   86112:	4788      	blx	r1
		break;
   86114:	bd70      	pop	{r4, r5, r6, pc}

	case SBC_READ10:
		udi_msc_sbc_trans(true);
   86116:	f04f 0001 	mov.w	r0, #1
   8611a:	f645 3249 	movw	r2, #23369	; 0x5b49
   8611e:	f2c0 0208 	movt	r2, #8
   86122:	4790      	blx	r2
		break;
   86124:	bd70      	pop	{r4, r5, r6, pc}

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
   86126:	f04f 0000 	mov.w	r0, #0
   8612a:	f645 3349 	movw	r3, #23369	; 0x5b49
   8612e:	f2c0 0308 	movt	r3, #8
   86132:	4798      	blx	r3
		break;
   86134:	bd70      	pop	{r4, r5, r6, pc}
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}

static void udi_msc_sense_command_invalid(void)
{
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
   86136:	f04f 0005 	mov.w	r0, #5
   8613a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   8613e:	f04f 0200 	mov.w	r2, #0
   86142:	f245 7399 	movw	r3, #22425	; 0x5799
   86146:	f2c0 0308 	movt	r3, #8
   8614a:	4798      	blx	r3
		udi_msc_sbc_trans(false);
		break;

	default:
		udi_msc_sense_command_invalid();
		udi_msc_csw_process();
   8614c:	f645 0295 	movw	r2, #22677	; 0x5895
   86150:	f2c0 0208 	movt	r2, #8
   86154:	4790      	blx	r2
		break;
   86156:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
   86158:	f04f 0300 	mov.w	r3, #0
   8615c:	e6ff      	b.n	85f5e <udi_msc_cbw_received+0x372>
   8615e:	f04f 0300 	mov.w	r3, #0
   86162:	e6fc      	b.n	85f5e <udi_msc_cbw_received+0x372>
   86164:	bd70      	pop	{r4, r5, r6, pc}
   86166:	b240      	sxtb	r0, r0
   86168:	2800      	cmp	r0, #0
   8616a:	f43f af0a 	beq.w	85f82 <udi_msc_cbw_received+0x396>
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		udi_msc_inquiry_data.product_id[i] = ' ';
   8616e:	18c8      	adds	r0, r1, r3
   86170:	7402      	strb	r2, [r0, #16]
		i++;
   86172:	f103 0301 	add.w	r3, r3, #1
   86176:	b2db      	uxtb	r3, r3
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
   86178:	2b10      	cmp	r3, #16
   8617a:	f47f af02 	bne.w	85f82 <udi_msc_cbw_received+0x396>
   8617e:	e70d      	b.n	85f9c <udi_msc_cbw_received+0x3b0>
   86180:	000857e1 	.word	0x000857e1
   86184:	00085895 	.word	0x00085895
   86188:	000857fd 	.word	0x000857fd
   8618c:	00085819 	.word	0x00085819
   86190:	200714d4 	.word	0x200714d4
   86194:	00085925 	.word	0x00085925

00086198 <udi_msc_setup>:
	UDI_MSC_DISABLE_EXT();
}


bool udi_msc_setup(void)
{
   86198:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
   8619a:	f641 4318 	movw	r3, #7192	; 0x1c18
   8619e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   861a2:	7818      	ldrb	r0, [r3, #0]
   861a4:	f010 0f80 	tst.w	r0, #128	; 0x80
   861a8:	d025      	beq.n	861f6 <udi_msc_setup+0x5e>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   861aa:	f000 0260 	and.w	r2, r0, #96	; 0x60
   861ae:	2a20      	cmp	r2, #32
   861b0:	d156      	bne.n	86260 <udi_msc_setup+0xc8>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   861b2:	f641 4318 	movw	r3, #7192	; 0x1c18
   861b6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   861ba:	7858      	ldrb	r0, [r3, #1]
   861bc:	28fe      	cmp	r0, #254	; 0xfe
   861be:	d152      	bne.n	86266 <udi_msc_setup+0xce>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
   861c0:	f641 4118 	movw	r1, #7192	; 0x1c18
   861c4:	f2c2 0107 	movt	r1, #8199	; 0x2007
   861c8:	88ca      	ldrh	r2, [r1, #6]
   861ca:	2a01      	cmp	r2, #1
   861cc:	d14e      	bne.n	8626c <udi_msc_setup+0xd4>
					return false;	// Error for USB host
				if (0 != udd_g_ctrlreq.req.wValue)
   861ce:	f641 4318 	movw	r3, #7192	; 0x1c18
   861d2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   861d6:	8858      	ldrh	r0, [r3, #2]
   861d8:	2800      	cmp	r0, #0
   861da:	d14a      	bne.n	86272 <udi_msc_setup+0xda>
					return false;
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
   861dc:	f641 4118 	movw	r1, #7192	; 0x1c18
   861e0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   861e4:	f241 42a8 	movw	r2, #5288	; 0x14a8
   861e8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   861ec:	608a      	str	r2, [r1, #8]
				udd_g_ctrlreq.payload_size = 1;
   861ee:	f04f 0001 	mov.w	r0, #1
   861f2:	8188      	strh	r0, [r1, #12]
				return true;
   861f4:	bd10      	pop	{r4, pc}
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   861f6:	f000 0160 	and.w	r1, r0, #96	; 0x60
   861fa:	2920      	cmp	r1, #32
   861fc:	d13c      	bne.n	86278 <udi_msc_setup+0xe0>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   861fe:	f641 4218 	movw	r2, #7192	; 0x1c18
   86202:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86206:	7853      	ldrb	r3, [r2, #1]
   86208:	2bff      	cmp	r3, #255	; 0xff
   8620a:	d138      	bne.n	8627e <udi_msc_setup+0xe6>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
   8620c:	f641 4018 	movw	r0, #7192	; 0x1c18
   86210:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86214:	88c1      	ldrh	r1, [r0, #6]
   86216:	2900      	cmp	r1, #0
   86218:	d134      	bne.n	86284 <udi_msc_setup+0xec>
					return false;
				if (0 != udd_g_ctrlreq.req.wValue)
   8621a:	f641 4218 	movw	r2, #7192	; 0x1c18
   8621e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86222:	8853      	ldrh	r3, [r2, #2]
   86224:	2b00      	cmp	r3, #0
   86226:	d130      	bne.n	8628a <udi_msc_setup+0xf2>
					return false;
				udi_msc_b_cbw_invalid = false;
   86228:	f241 44d0 	movw	r4, #5328	; 0x14d0
   8622c:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86230:	7023      	strb	r3, [r4, #0]
				udi_msc_b_trans_req = false;
   86232:	f241 40ac 	movw	r0, #5292	; 0x14ac
   86236:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8623a:	7003      	strb	r3, [r0, #0]
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
   8623c:	f04f 0002 	mov.w	r0, #2
   86240:	f249 2401 	movw	r4, #37377	; 0x9201
   86244:	f2c0 0408 	movt	r4, #8
   86248:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
   8624a:	f04f 0081 	mov.w	r0, #129	; 0x81
   8624e:	47a0      	blx	r4
				// Restart by CBW wait
				udi_msc_cbw_wait();
   86250:	f645 1191 	movw	r1, #22929	; 0x5991
   86254:	f2c0 0108 	movt	r1, #8
   86258:	4788      	blx	r1
				return true;
   8625a:	f04f 0001 	mov.w	r0, #1
   8625e:	bd10      	pop	{r4, pc}
			}
		}
	}
	return false;	// Not supported request
   86260:	f04f 0000 	mov.w	r0, #0
   86264:	bd10      	pop	{r4, pc}
   86266:	f04f 0000 	mov.w	r0, #0
   8626a:	bd10      	pop	{r4, pc}
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
   8626c:	f04f 0000 	mov.w	r0, #0
   86270:	bd10      	pop	{r4, pc}
				if (0 != udd_g_ctrlreq.req.wValue)
					return false;
   86272:	f04f 0000 	mov.w	r0, #0
   86276:	bd10      	pop	{r4, pc}
				udi_msc_cbw_wait();
				return true;
			}
		}
	}
	return false;	// Not supported request
   86278:	f04f 0000 	mov.w	r0, #0
   8627c:	bd10      	pop	{r4, pc}
   8627e:	f04f 0000 	mov.w	r0, #0
   86282:	bd10      	pop	{r4, pc}
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
   86284:	f04f 0000 	mov.w	r0, #0
   86288:	bd10      	pop	{r4, pc}
				if (0 != udd_g_ctrlreq.req.wValue)
					return false;
   8628a:	f04f 0000 	mov.w	r0, #0
				return true;
			}
		}
	}
	return false;	// Not supported request
}
   8628e:	bd10      	pop	{r4, pc}

00086290 <udi_msc_disable>:
	return true;
}


void udi_msc_disable(void)
{
   86290:	b508      	push	{r3, lr}
	udi_msc_b_trans_req = false;
   86292:	f241 43ac 	movw	r3, #5292	; 0x14ac
   86296:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8629a:	f04f 0200 	mov.w	r2, #0
   8629e:	701a      	strb	r2, [r3, #0]
	UDI_MSC_DISABLE_EXT();
   862a0:	f649 0045 	movw	r0, #38981	; 0x9845
   862a4:	f2c0 0008 	movt	r0, #8
   862a8:	4780      	blx	r0
   862aa:	bd08      	pop	{r3, pc}

000862ac <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
   862ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t lun;
	udi_msc_b_trans_req = false;
   862ae:	f04f 0300 	mov.w	r3, #0
   862b2:	f241 42ac 	movw	r2, #5292	; 0x14ac
   862b6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   862ba:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
   862bc:	f241 40d0 	movw	r0, #5328	; 0x14d0
   862c0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   862c4:	7003      	strb	r3, [r0, #0]
	udi_msc_nb_lun = get_nb_lun();
   862c6:	f644 5169 	movw	r1, #19817	; 0x4d69
   862ca:	f2c0 0108 	movt	r1, #8
   862ce:	4788      	blx	r1
	if (0 == udi_msc_nb_lun)
   862d0:	b928      	cbnz	r0, 862de <udi_msc_enable+0x32>
bool udi_msc_enable(void)
{
	uint8_t lun;
	udi_msc_b_trans_req = false;
	udi_msc_b_cbw_invalid = false;
	udi_msc_nb_lun = get_nb_lun();
   862d2:	f241 42a8 	movw	r2, #5288	; 0x14a8
   862d6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   862da:	7010      	strb	r0, [r2, #0]
   862dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (0 == udi_msc_nb_lun)
		return false; // No lun available, then not authorize to enable interface
	udi_msc_nb_lun--;
   862de:	f100 30ff 	add.w	r0, r0, #4294967295
   862e2:	f241 42a8 	movw	r2, #5288	; 0x14a8
   862e6:	f2c2 0207 	movt	r2, #8199	; 0x2007
   862ea:	7010      	strb	r0, [r2, #0]
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
   862ec:	f649 0135 	movw	r1, #38965	; 0x9835
   862f0:	f2c0 0108 	movt	r1, #8
   862f4:	4788      	blx	r1
   862f6:	b1d8      	cbz	r0, 86330 <udi_msc_enable+0x84>
   862f8:	f04f 0400 	mov.w	r4, #0
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
		mem_unload(lun, false);
   862fc:	4627      	mov	r7, r4
   862fe:	f644 56a1 	movw	r6, #19873	; 0x4da1
   86302:	f2c0 0608 	movt	r6, #8
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
   86306:	f241 45a8 	movw	r5, #5288	; 0x14a8
   8630a:	f2c2 0507 	movt	r5, #8199	; 0x2007
		mem_unload(lun, false);
   8630e:	4620      	mov	r0, r4
   86310:	4639      	mov	r1, r7
   86312:	47b0      	blx	r6
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
   86314:	f104 0401 	add.w	r4, r4, #1
   86318:	b2e4      	uxtb	r4, r4
   8631a:	782b      	ldrb	r3, [r5, #0]
   8631c:	42a3      	cmp	r3, r4
   8631e:	d2f6      	bcs.n	8630e <udi_msc_enable+0x62>
		mem_unload(lun, false);
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
   86320:	f645 1091 	movw	r0, #22929	; 0x5991
   86324:	f2c0 0008 	movt	r0, #8
   86328:	4780      	blx	r0
	return true;
   8632a:	f04f 0001 	mov.w	r0, #1
   8632e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // No lun available, then not authorize to enable interface
	udi_msc_nb_lun--;
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
   86330:	f04f 0000 	mov.w	r0, #0
		mem_unload(lun, false);
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
	return true;
}
   86334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86336:	bf00      	nop

00086338 <udi_msc_process_trans>:
	UDI_MSC_NOTIFY_TRANS_EXT();
}


bool udi_msc_process_trans(void)
{
   86338:	b508      	push	{r3, lr}
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
   8633a:	f241 43ac 	movw	r3, #5292	; 0x14ac
   8633e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86342:	7818      	ldrb	r0, [r3, #0]
   86344:	2800      	cmp	r0, #0
   86346:	d059      	beq.n	863fc <udi_msc_process_trans+0xc4>
		return false;	// No Transfer request to do
	udi_msc_b_trans_req = false;
   86348:	f241 41ac 	movw	r1, #5292	; 0x14ac
   8634c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86350:	f04f 0200 	mov.w	r2, #0
   86354:	700a      	strb	r2, [r1, #0]

	// Start transfer
	if (udi_msc_b_read) {
   86356:	f241 5308 	movw	r3, #5384	; 0x1508
   8635a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8635e:	7818      	ldrb	r0, [r3, #0]
   86360:	b1a0      	cbz	r0, 8638c <udi_msc_process_trans+0x54>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
   86362:	f241 40b0 	movw	r0, #5296	; 0x14b0
   86366:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8636a:	7b40      	ldrb	r0, [r0, #13]
   8636c:	f241 41f0 	movw	r1, #5360	; 0x14f0
   86370:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86374:	6809      	ldr	r1, [r1, #0]
   86376:	f241 520a 	movw	r2, #5386	; 0x150a
   8637a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8637e:	8812      	ldrh	r2, [r2, #0]
   86380:	f644 53f5 	movw	r3, #19957	; 0x4df5
   86384:	f2c0 0308 	movt	r3, #8
   86388:	4798      	blx	r3
   8638a:	e013      	b.n	863b4 <udi_msc_process_trans+0x7c>
				udi_msc_nb_block);
	} else {
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
   8638c:	f241 41b0 	movw	r1, #5296	; 0x14b0
   86390:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86394:	7b48      	ldrb	r0, [r1, #13]
   86396:	f241 42f0 	movw	r2, #5360	; 0x14f0
   8639a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8639e:	6811      	ldr	r1, [r2, #0]
   863a0:	f241 530a 	movw	r3, #5386	; 0x150a
   863a4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   863a8:	881a      	ldrh	r2, [r3, #0]
   863aa:	f644 6311 	movw	r3, #19985	; 0x4e11
   863ae:	f2c0 0308 	movt	r3, #8
   863b2:	4798      	blx	r3
				udi_msc_nb_block);
	}

	// Check status of transfer
	switch (status) {
   863b4:	2802      	cmp	r0, #2
   863b6:	d00e      	beq.n	863d6 <udi_msc_process_trans+0x9e>
   863b8:	2803      	cmp	r0, #3
   863ba:	d006      	beq.n	863ca <udi_msc_process_trans+0x92>
   863bc:	b988      	cbnz	r0, 863e2 <udi_msc_process_trans+0xaa>
	case CTRL_GOOD:
		udi_msc_sense_pass();
   863be:	f245 717d 	movw	r1, #22397	; 0x577d
   863c2:	f2c0 0108 	movt	r1, #8
   863c6:	4788      	blx	r1
		break;
   863c8:	e010      	b.n	863ec <udi_msc_process_trans+0xb4>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
   863ca:	f245 72e1 	movw	r2, #22497	; 0x57e1
   863ce:	f2c0 0208 	movt	r2, #8
   863d2:	4790      	blx	r2
		break;
   863d4:	e00a      	b.n	863ec <udi_msc_process_trans+0xb4>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
   863d6:	f245 73fd 	movw	r3, #22525	; 0x57fd
   863da:	f2c0 0308 	movt	r3, #8
   863de:	4798      	blx	r3
		break;
   863e0:	e004      	b.n	863ec <udi_msc_process_trans+0xb4>
	default:
	case CTRL_FAIL:
		udi_msc_sense_fail_hardware();
   863e2:	f645 0019 	movw	r0, #22553	; 0x5819
   863e6:	f2c0 0008 	movt	r0, #8
   863ea:	4780      	blx	r0
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
   863ec:	f645 0095 	movw	r0, #22677	; 0x5895
   863f0:	f2c0 0008 	movt	r0, #8
   863f4:	4780      	blx	r0
	return true;
   863f6:	f04f 0001 	mov.w	r0, #1
   863fa:	bd08      	pop	{r3, pc}
bool udi_msc_process_trans(void)
{
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
		return false;	// No Transfer request to do
   863fc:	f04f 0000 	mov.w	r0, #0
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
	return true;
}
   86400:	bd08      	pop	{r3, pc}
   86402:	bf00      	nop

00086404 <udi_msc_trans_block>:
}


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
   86404:	b5f0      	push	{r4, r5, r6, r7, lr}
   86406:	b083      	sub	sp, #12
   86408:	460f      	mov	r7, r1
   8640a:	4615      	mov	r5, r2
	if (!udi_msc_b_ack_trans)
   8640c:	f240 2430 	movw	r4, #560	; 0x230
   86410:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86414:	7824      	ldrb	r4, [r4, #0]
   86416:	2c00      	cmp	r4, #0
   86418:	d03d      	beq.n	86496 <udi_msc_trans_block+0x92>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
   8641a:	f240 2130 	movw	r1, #560	; 0x230
   8641e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86422:	f04f 0600 	mov.w	r6, #0
   86426:	700e      	strb	r6, [r1, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
   86428:	42b0      	cmp	r0, r6
   8642a:	bf0c      	ite	eq
   8642c:	2002      	moveq	r0, #2
   8642e:	2081      	movne	r0, #129	; 0x81
   86430:	2b00      	cmp	r3, #0
   86432:	d141      	bne.n	864b8 <udi_msc_trans_block+0xb4>
   86434:	e035      	b.n	864a2 <udi_msc_trans_block+0x9e>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
   86436:	f240 2330 	movw	r3, #560	; 0x230
   8643a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8643e:	f04f 0001 	mov.w	r0, #1
   86442:	7018      	strb	r0, [r3, #0]
		return false;
   86444:	f04f 0000 	mov.w	r0, #0
   86448:	e040      	b.n	864cc <udi_msc_trans_block+0xc8>
	}
	if (NULL == callback) {
		while (!udi_msc_b_ack_trans);
   8644a:	f240 2230 	movw	r2, #560	; 0x230
   8644e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86452:	7810      	ldrb	r0, [r2, #0]
   86454:	2800      	cmp	r0, #0
   86456:	d0fc      	beq.n	86452 <udi_msc_trans_block+0x4e>
		if (udi_msc_b_abort_trans) {
   86458:	f641 4115 	movw	r1, #7189	; 0x1c15
   8645c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86460:	780b      	ldrb	r3, [r1, #0]
   86462:	b9db      	cbnz	r3, 8649c <udi_msc_trans_block+0x98>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
   86464:	f240 2048 	movw	r0, #584	; 0x248
   86468:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8646c:	6882      	ldr	r2, [r0, #8]
   8646e:	1b51      	subs	r1, r2, r5
   86470:	6081      	str	r1, [r0, #8]
		return (!udi_msc_b_abort_trans);
   86472:	f641 4315 	movw	r3, #7189	; 0x1c15
   86476:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8647a:	7818      	ldrb	r0, [r3, #0]
   8647c:	f080 0001 	eor.w	r0, r0, #1
   86480:	e024      	b.n	864cc <udi_msc_trans_block+0xc8>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
   86482:	f240 2148 	movw	r1, #584	; 0x248
   86486:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8648a:	688a      	ldr	r2, [r1, #8]
   8648c:	1b55      	subs	r5, r2, r5
   8648e:	608d      	str	r5, [r1, #8]
	return true;
   86490:	f04f 0001 	mov.w	r0, #1
   86494:	e01a      	b.n	864cc <udi_msc_trans_block+0xc8>

bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
	if (!udi_msc_b_ack_trans)
		return false;	// No possible, transfer on going
   86496:	f04f 0000 	mov.w	r0, #0
   8649a:	e017      	b.n	864cc <udi_msc_trans_block+0xc8>
		return false;
	}
	if (NULL == callback) {
		while (!udi_msc_b_ack_trans);
		if (udi_msc_b_abort_trans) {
			return false;
   8649c:	f04f 0000 	mov.w	r0, #0
   864a0:	e014      	b.n	864cc <udi_msc_trans_block+0xc8>
	if (!udi_msc_b_ack_trans)
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
   864a2:	4b0b      	ldr	r3, [pc, #44]	; (864d0 <udi_msc_trans_block+0xcc>)
   864a4:	9300      	str	r3, [sp, #0]
   864a6:	f04f 0100 	mov.w	r1, #0
   864aa:	463a      	mov	r2, r7
   864ac:	462b      	mov	r3, r5
   864ae:	4c09      	ldr	r4, [pc, #36]	; (864d4 <udi_msc_trans_block+0xd0>)
   864b0:	47a0      	blx	r4
   864b2:	2800      	cmp	r0, #0
   864b4:	d1c9      	bne.n	8644a <udi_msc_trans_block+0x46>
   864b6:	e7be      	b.n	86436 <udi_msc_trans_block+0x32>
   864b8:	9300      	str	r3, [sp, #0]
   864ba:	f04f 0100 	mov.w	r1, #0
   864be:	463a      	mov	r2, r7
   864c0:	462b      	mov	r3, r5
   864c2:	4c04      	ldr	r4, [pc, #16]	; (864d4 <udi_msc_trans_block+0xd0>)
   864c4:	47a0      	blx	r4
   864c6:	2800      	cmp	r0, #0
   864c8:	d1db      	bne.n	86482 <udi_msc_trans_block+0x7e>
   864ca:	e7b4      	b.n	86436 <udi_msc_trans_block+0x32>
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
	return true;
}
   864cc:	b003      	add	sp, #12
   864ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   864d0:	0008572d 	.word	0x0008572d
   864d4:	00088bf9 	.word	0x00088bf9

000864d8 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   864d8:	f241 530c 	movw	r3, #5388	; 0x150c
   864dc:	f2c2 0307 	movt	r3, #8199	; 0x2007
   864e0:	6818      	ldr	r0, [r3, #0]
   864e2:	6801      	ldr	r1, [r0, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   864e4:	884a      	ldrh	r2, [r1, #2]
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
   864e6:	1888      	adds	r0, r1, r2
   864e8:	4770      	bx	lr
   864ea:	bf00      	nop

000864ec <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   864ec:	b538      	push	{r3, r4, r5, lr}
   864ee:	4605      	mov	r5, r0
   864f0:	460c      	mov	r4, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   864f2:	f246 43d9 	movw	r3, #25817	; 0x64d9
   864f6:	f2c0 0308 	movt	r3, #8
   864fa:	4798      	blx	r3
   864fc:	4602      	mov	r2, r0
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   864fe:	7828      	ldrb	r0, [r5, #0]
   86500:	1828      	adds	r0, r5, r0
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   86502:	4282      	cmp	r2, r0
   86504:	d911      	bls.n	8652a <udc_next_desc_in_iface+0x3e>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   86506:	7841      	ldrb	r1, [r0, #1]
   86508:	2904      	cmp	r1, #4
   8650a:	d011      	beq.n	86530 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   8650c:	42a1      	cmp	r1, r4
   8650e:	d105      	bne.n	8651c <udc_next_desc_in_iface+0x30>
   86510:	bd38      	pop	{r3, r4, r5, pc}
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   86512:	7841      	ldrb	r1, [r0, #1]
   86514:	2904      	cmp	r1, #4
   86516:	d00e      	beq.n	86536 <udc_next_desc_in_iface+0x4a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   86518:	42a1      	cmp	r1, r4
   8651a:	d00e      	beq.n	8653a <udc_next_desc_in_iface+0x4e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   8651c:	7803      	ldrb	r3, [r0, #0]
   8651e:	18c0      	adds	r0, r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   86520:	4282      	cmp	r2, r0
   86522:	d8f6      	bhi.n	86512 <udc_next_desc_in_iface+0x26>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
   86524:	f04f 0000 	mov.w	r0, #0
   86528:	bd38      	pop	{r3, r4, r5, pc}
   8652a:	f04f 0000 	mov.w	r0, #0
   8652e:	bd38      	pop	{r3, r4, r5, pc}
   86530:	f04f 0000 	mov.w	r0, #0
   86534:	bd38      	pop	{r3, r4, r5, pc}
   86536:	f04f 0000 	mov.w	r0, #0
}
   8653a:	bd38      	pop	{r3, r4, r5, pc}

0008653c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   8653c:	b570      	push	{r4, r5, r6, lr}
   8653e:	4605      	mov	r5, r0
   86540:	460e      	mov	r6, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   86542:	f241 5315 	movw	r3, #5397	; 0x1515
   86546:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8654a:	7818      	ldrb	r0, [r3, #0]
   8654c:	2800      	cmp	r0, #0
   8654e:	d031      	beq.n	865b4 <udc_update_iface_desc+0x78>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   86550:	f241 510c 	movw	r1, #5388	; 0x150c
   86554:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86558:	680a      	ldr	r2, [r1, #0]
   8655a:	6814      	ldr	r4, [r2, #0]
   8655c:	7923      	ldrb	r3, [r4, #4]
   8655e:	42ab      	cmp	r3, r5
   86560:	d92b      	bls.n	865ba <udc_update_iface_desc+0x7e>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   86562:	f241 5018 	movw	r0, #5400	; 0x1518
   86566:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8656a:	6004      	str	r4, [r0, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   8656c:	f246 41d9 	movw	r1, #25817	; 0x64d9
   86570:	f2c0 0108 	movt	r1, #8
   86574:	4788      	blx	r1
	while (ptr_end_desc >
   86576:	4284      	cmp	r4, r0
   86578:	d222      	bcs.n	865c0 <udc_update_iface_desc+0x84>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   8657a:	7862      	ldrb	r2, [r4, #1]
   8657c:	2a04      	cmp	r2, #4
   8657e:	d10d      	bne.n	8659c <udc_update_iface_desc+0x60>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   86580:	78a3      	ldrb	r3, [r4, #2]
   86582:	42ab      	cmp	r3, r5
   86584:	d10a      	bne.n	8659c <udc_update_iface_desc+0x60>
   86586:	78e1      	ldrb	r1, [r4, #3]
   86588:	42b1      	cmp	r1, r6
   8658a:	d107      	bne.n	8659c <udc_update_iface_desc+0x60>
   8658c:	f241 5318 	movw	r3, #5400	; 0x1518
   86590:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86594:	601c      	str	r4, [r3, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
   86596:	f04f 0001 	mov.w	r0, #1
   8659a:	bd70      	pop	{r4, r5, r6, pc}
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   8659c:	7822      	ldrb	r2, [r4, #0]
   8659e:	18a4      	adds	r4, r4, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
   865a0:	42a0      	cmp	r0, r4
   865a2:	d8ea      	bhi.n	8657a <udc_update_iface_desc+0x3e>
   865a4:	f241 5018 	movw	r0, #5400	; 0x1518
   865a8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   865ac:	6004      	str	r4, [r0, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   865ae:	f04f 0000 	mov.w	r0, #0
   865b2:	bd70      	pop	{r4, r5, r6, pc}
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
   865b4:	f04f 0000 	mov.w	r0, #0
   865b8:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   865ba:	f04f 0000 	mov.w	r0, #0
   865be:	bd70      	pop	{r4, r5, r6, pc}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   865c0:	f04f 0000 	mov.w	r0, #0
}
   865c4:	bd70      	pop	{r4, r5, r6, pc}
   865c6:	bf00      	nop

000865c8 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   865c8:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   865ca:	f641 4318 	movw	r3, #7192	; 0x1c18
   865ce:	f2c2 0307 	movt	r3, #8199	; 0x2007
   865d2:	8858      	ldrh	r0, [r3, #2]
   865d4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   865d8:	f648 01f1 	movw	r1, #35057	; 0x88f1
   865dc:	f2c0 0108 	movt	r1, #8
   865e0:	4788      	blx	r1
   865e2:	bd08      	pop	{r3, pc}

000865e4 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   865e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   865e8:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   865ea:	f246 533d 	movw	r3, #25917	; 0x653d
   865ee:	f2c0 0308 	movt	r3, #8
   865f2:	4798      	blx	r3
   865f4:	b338      	cbz	r0, 86646 <udc_iface_enable+0x62>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   865f6:	f241 5018 	movw	r0, #5400	; 0x1518
   865fa:	f2c2 0007 	movt	r0, #8199	; 0x2007
   865fe:	6804      	ldr	r4, [r0, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   86600:	f04f 0605 	mov.w	r6, #5
   86604:	f246 45ed 	movw	r5, #25837	; 0x64ed
   86608:	f2c0 0508 	movt	r5, #8
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   8660c:	f648 47fd 	movw	r7, #36093	; 0x8cfd
   86610:	f2c0 0708 	movt	r7, #8

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   86614:	4620      	mov	r0, r4
   86616:	4631      	mov	r1, r6
   86618:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   8661a:	4604      	mov	r4, r0
   8661c:	b138      	cbz	r0, 8662e <udc_iface_enable+0x4a>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   8661e:	7880      	ldrb	r0, [r0, #2]
   86620:	78e1      	ldrb	r1, [r4, #3]
   86622:	88a2      	ldrh	r2, [r4, #4]
   86624:	47b8      	blx	r7
   86626:	2800      	cmp	r0, #0
   86628:	d1f4      	bne.n	86614 <udc_iface_enable+0x30>
   8662a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   8662e:	f241 510c 	movw	r1, #5388	; 0x150c
   86632:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86636:	680a      	ldr	r2, [r1, #0]
   86638:	6853      	ldr	r3, [r2, #4]
   8663a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
   8663e:	6801      	ldr	r1, [r0, #0]
   86640:	4788      	blx	r1
   86642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
		return false;
   86646:	f04f 0000 	mov.w	r0, #0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
   8664a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8664e:	bf00      	nop

00086650 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   86650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86654:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   86656:	f04f 0100 	mov.w	r1, #0
   8665a:	f246 533d 	movw	r3, #25917	; 0x653d
   8665e:	f2c0 0308 	movt	r3, #8
   86662:	4798      	blx	r3
   86664:	2800      	cmp	r0, #0
   86666:	d030      	beq.n	866ca <udc_iface_disable+0x7a>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   86668:	f241 500c 	movw	r0, #5388	; 0x150c
   8666c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86670:	6801      	ldr	r1, [r0, #0]
   86672:	684a      	ldr	r2, [r1, #4]
   86674:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   86678:	f8d8 300c 	ldr.w	r3, [r8, #12]
   8667c:	4798      	blx	r3
   8667e:	4601      	mov	r1, r0
   86680:	4620      	mov	r0, r4
   86682:	f246 523d 	movw	r2, #25917	; 0x653d
   86686:	f2c0 0208 	movt	r2, #8
   8668a:	4790      	blx	r2
   8668c:	b308      	cbz	r0, 866d2 <udc_iface_disable+0x82>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   8668e:	f241 5418 	movw	r4, #5400	; 0x1518
   86692:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86696:	6824      	ldr	r4, [r4, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   86698:	f04f 0605 	mov.w	r6, #5
   8669c:	f246 45ed 	movw	r5, #25837	; 0x64ed
   866a0:	f2c0 0508 	movt	r5, #8
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   866a4:	f648 1761 	movw	r7, #35169	; 0x8961
   866a8:	f2c0 0708 	movt	r7, #8
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   866ac:	4620      	mov	r0, r4
   866ae:	4631      	mov	r1, r6
   866b0:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   866b2:	4604      	mov	r4, r0
   866b4:	b110      	cbz	r0, 866bc <udc_iface_disable+0x6c>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   866b6:	7880      	ldrb	r0, [r0, #2]
   866b8:	47b8      	blx	r7
		}
   866ba:	e7f7      	b.n	866ac <udc_iface_disable+0x5c>
	}
#endif

	// Disable interface
	udi_api->disable();
   866bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   866c0:	4780      	blx	r0
	return true;
   866c2:	f04f 0001 	mov.w	r0, #1
   866c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
   866ca:	f04f 0000 	mov.w	r0, #0
   866ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
		return false;
   866d2:	f04f 0000 	mov.w	r0, #0
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
   866d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   866da:	bf00      	nop

000866dc <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   866dc:	b508      	push	{r3, lr}
	udd_enable();
   866de:	f647 2399 	movw	r3, #31385	; 0x7a99
   866e2:	f2c0 0308 	movt	r3, #8
   866e6:	4798      	blx	r3
   866e8:	bd08      	pop	{r3, pc}
   866ea:	bf00      	nop

000866ec <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   866ec:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   866ee:	f241 5315 	movw	r3, #5397	; 0x1515
   866f2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   866f6:	7818      	ldrb	r0, [r3, #0]
   866f8:	b1d8      	cbz	r0, 86732 <udc_reset+0x46>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   866fa:	f241 510c 	movw	r1, #5388	; 0x150c
   866fe:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86702:	680a      	ldr	r2, [r1, #0]
   86704:	6813      	ldr	r3, [r2, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   86706:	7918      	ldrb	r0, [r3, #4]
   86708:	b198      	cbz	r0, 86732 <udc_reset+0x46>
   8670a:	f04f 0400 	mov.w	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   8670e:	f246 6651 	movw	r6, #26193	; 0x6651
   86712:	f2c0 0608 	movt	r6, #8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86716:	f241 550c 	movw	r5, #5388	; 0x150c
   8671a:	f2c2 0507 	movt	r5, #8199	; 0x2007
				iface_num++) {
			udc_iface_disable(iface_num);
   8671e:	4620      	mov	r0, r4
   86720:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   86722:	f104 0401 	add.w	r4, r4, #1
   86726:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86728:	6829      	ldr	r1, [r5, #0]
   8672a:	680a      	ldr	r2, [r1, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   8672c:	7913      	ldrb	r3, [r2, #4]
   8672e:	42a3      	cmp	r3, r4
   86730:	d8f5      	bhi.n	8671e <udc_reset+0x32>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
   86732:	f241 5015 	movw	r0, #5397	; 0x1515
   86736:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8673a:	f04f 0100 	mov.w	r1, #0
   8673e:	7001      	strb	r1, [r0, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   86740:	f241 5312 	movw	r3, #5394	; 0x1512
   86744:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86748:	f04f 0201 	mov.w	r2, #1
   8674c:	801a      	strh	r2, [r3, #0]
   8674e:	bd70      	pop	{r4, r5, r6, pc}

00086750 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
   86750:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   86752:	f241 5315 	movw	r3, #5397	; 0x1515
   86756:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8675a:	7818      	ldrb	r0, [r3, #0]
   8675c:	b1d8      	cbz	r0, 86796 <udc_sof_notify+0x46>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8675e:	f241 510c 	movw	r1, #5388	; 0x150c
   86762:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86766:	680b      	ldr	r3, [r1, #0]
   86768:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   8676a:	7910      	ldrb	r0, [r2, #4]
   8676c:	b198      	cbz	r0, 86796 <udc_sof_notify+0x46>
   8676e:	f04f 0400 	mov.w	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86772:	f241 550c 	movw	r5, #5388	; 0x150c
   86776:	f2c2 0507 	movt	r5, #8199	; 0x2007
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   8677a:	685b      	ldr	r3, [r3, #4]
   8677c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   86780:	690a      	ldr	r2, [r1, #16]
   86782:	b102      	cbz	r2, 86786 <udc_sof_notify+0x36>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   86784:	4790      	blx	r2
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   86786:	f104 0401 	add.w	r4, r4, #1
   8678a:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8678c:	682b      	ldr	r3, [r5, #0]
   8678e:	6818      	ldr	r0, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   86790:	7901      	ldrb	r1, [r0, #4]
   86792:	42a1      	cmp	r1, r4
   86794:	d8f1      	bhi.n	8677a <udc_sof_notify+0x2a>
   86796:	bd38      	pop	{r3, r4, r5, pc}

00086798 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   86798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   8679a:	f641 4318 	movw	r3, #7192	; 0x1c18
   8679e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   867a2:	f04f 0200 	mov.w	r2, #0
   867a6:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   867a8:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   867aa:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   867ac:	7818      	ldrb	r0, [r3, #0]
   867ae:	f010 0f80 	tst.w	r0, #128	; 0x80
   867b2:	f000 83da 	beq.w	86f6a <udc_process_setup+0x7d2>
		if (udd_g_ctrlreq.req.wLength == 0) {
   867b6:	f641 4118 	movw	r1, #7192	; 0x1c18
   867ba:	f2c2 0107 	movt	r1, #8199	; 0x2007
   867be:	88ca      	ldrh	r2, [r1, #6]
   867c0:	2a00      	cmp	r2, #0
   867c2:	f040 83d7 	bne.w	86f74 <udc_process_setup+0x7dc>
   867c6:	e3c4      	b.n	86f52 <udc_process_setup+0x7ba>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   867c8:	f010 031f 	ands.w	r3, r0, #31
   867cc:	f040 8115 	bne.w	869fa <udc_process_setup+0x262>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   867d0:	f641 4018 	movw	r0, #7192	; 0x1c18
   867d4:	f2c2 0007 	movt	r0, #8199	; 0x2007
   867d8:	7841      	ldrb	r1, [r0, #1]
   867da:	2906      	cmp	r1, #6
   867dc:	d018      	beq.n	86810 <udc_process_setup+0x78>
   867de:	2908      	cmp	r1, #8
   867e0:	f000 80f8 	beq.w	869d4 <udc_process_setup+0x23c>
   867e4:	2900      	cmp	r1, #0
   867e6:	f040 8108 	bne.w	869fa <udc_process_setup+0x262>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   867ea:	2a02      	cmp	r2, #2
   867ec:	d10d      	bne.n	8680a <udc_process_setup+0x72>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   867ee:	f241 5012 	movw	r0, #5394	; 0x1512
   867f2:	f2c2 0007 	movt	r0, #8199	; 0x2007
   867f6:	f04f 0102 	mov.w	r1, #2
   867fa:	f648 1351 	movw	r3, #35153	; 0x8951
   867fe:	f2c0 0308 	movt	r3, #8
   86802:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   86804:	f04f 0001 	mov.w	r0, #1
   86808:	e328      	b.n	86e5c <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
   8680a:	f04f 0000 	mov.w	r0, #0
   8680e:	e325      	b.n	86e5c <udc_process_setup+0x6c4>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   86810:	f641 4418 	movw	r4, #7192	; 0x1c18
   86814:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86818:	8860      	ldrh	r0, [r4, #2]
   8681a:	b2c4      	uxtb	r4, r0

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   8681c:	ea4f 2110 	mov.w	r1, r0, lsr #8
   86820:	f101 33ff 	add.w	r3, r1, #4294967295
   86824:	2b06      	cmp	r3, #6
   86826:	f200 80c3 	bhi.w	869b0 <udc_process_setup+0x218>
   8682a:	e8df f013 	tbh	[pc, r3, lsl #1]
   8682e:	0007      	.short	0x0007
   86830:	0078001b 	.word	0x0078001b
   86834:	00c100c1 	.word	0x00c100c1
   86838:	00510044 	.word	0x00510044
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   8683c:	f648 02d9 	movw	r2, #35033	; 0x88d9
   86840:	f2c0 0208 	movt	r2, #8
   86844:	4790      	blx	r2
   86846:	b930      	cbnz	r0, 86856 <udc_process_setup+0xbe>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
   86848:	48a3      	ldr	r0, [pc, #652]	; (86ad8 <udc_process_setup+0x340>)
   8684a:	6883      	ldr	r3, [r0, #8]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
			udd_set_setup_payload(
   8684c:	4618      	mov	r0, r3
   8684e:	7819      	ldrb	r1, [r3, #0]
   86850:	4aa2      	ldr	r2, [pc, #648]	; (86adc <udc_process_setup+0x344>)
   86852:	4790      	blx	r2
   86854:	e09c      	b.n	86990 <udc_process_setup+0x1f8>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
   86856:	4ba0      	ldr	r3, [pc, #640]	; (86ad8 <udc_process_setup+0x340>)
   86858:	6819      	ldr	r1, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
   8685a:	4608      	mov	r0, r1
   8685c:	7809      	ldrb	r1, [r1, #0]
   8685e:	4a9f      	ldr	r2, [pc, #636]	; (86adc <udc_process_setup+0x344>)
   86860:	4790      	blx	r2
   86862:	e095      	b.n	86990 <udc_process_setup+0x1f8>
		break;

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   86864:	f648 01d9 	movw	r1, #35033	; 0x88d9
   86868:	f2c0 0108 	movt	r1, #8
   8686c:	4788      	blx	r1
   8686e:	b170      	cbz	r0, 8688e <udc_process_setup+0xf6>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   86870:	4899      	ldr	r0, [pc, #612]	; (86ad8 <udc_process_setup+0x340>)
   86872:	6881      	ldr	r1, [r0, #8]
   86874:	7c4a      	ldrb	r2, [r1, #17]
   86876:	42a2      	cmp	r2, r4
   86878:	f240 809d 	bls.w	869b6 <udc_process_setup+0x21e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   8687c:	4b96      	ldr	r3, [pc, #600]	; (86ad8 <udc_process_setup+0x340>)
   8687e:	6918      	ldr	r0, [r3, #16]
   86880:	f850 1034 	ldr.w	r1, [r0, r4, lsl #3]
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   86884:	4608      	mov	r0, r1
   86886:	8849      	ldrh	r1, [r1, #2]
   86888:	4a94      	ldr	r2, [pc, #592]	; (86adc <udc_process_setup+0x344>)
   8688a:	4790      	blx	r2
   8688c:	e00d      	b.n	868aa <udc_process_setup+0x112>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   8688e:	4b92      	ldr	r3, [pc, #584]	; (86ad8 <udc_process_setup+0x340>)
   86890:	681a      	ldr	r2, [r3, #0]
   86892:	7c50      	ldrb	r0, [r2, #17]
   86894:	42a0      	cmp	r0, r4
   86896:	f240 8091 	bls.w	869bc <udc_process_setup+0x224>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   8689a:	498f      	ldr	r1, [pc, #572]	; (86ad8 <udc_process_setup+0x340>)
   8689c:	684b      	ldr	r3, [r1, #4]
   8689e:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   868a2:	4610      	mov	r0, r2
   868a4:	8851      	ldrh	r1, [r2, #2]
   868a6:	4b8d      	ldr	r3, [pc, #564]	; (86adc <udc_process_setup+0x344>)
   868a8:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   868aa:	4b8d      	ldr	r3, [pc, #564]	; (86ae0 <udc_process_setup+0x348>)
   868ac:	6898      	ldr	r0, [r3, #8]
   868ae:	f04f 0102 	mov.w	r1, #2
   868b2:	7041      	strb	r1, [r0, #1]
   868b4:	e06c      	b.n	86990 <udc_process_setup+0x1f8>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
				udc_config.qualifier->bLength);
   868b6:	f240 1368 	movw	r3, #360	; 0x168
   868ba:	f2c2 0307 	movt	r3, #8199	; 0x2007
   868be:	68d9      	ldr	r1, [r3, #12]
		break;

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   868c0:	4608      	mov	r0, r1
   868c2:	7809      	ldrb	r1, [r1, #0]
   868c4:	f648 1251 	movw	r2, #35153	; 0x8951
   868c8:	f2c0 0208 	movt	r2, #8
   868cc:	4790      	blx	r2
   868ce:	e05f      	b.n	86990 <udc_process_setup+0x1f8>
				udc_config.qualifier->bLength);
		break;

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   868d0:	f648 02d9 	movw	r2, #35033	; 0x88d9
   868d4:	f2c0 0208 	movt	r2, #8
   868d8:	4790      	blx	r2
   868da:	b968      	cbnz	r0, 868f8 <udc_process_setup+0x160>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   868dc:	4a7e      	ldr	r2, [pc, #504]	; (86ad8 <udc_process_setup+0x340>)
   868de:	6890      	ldr	r0, [r2, #8]
   868e0:	7c41      	ldrb	r1, [r0, #17]
   868e2:	42a1      	cmp	r1, r4
   868e4:	d96d      	bls.n	869c2 <udc_process_setup+0x22a>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   868e6:	4b7c      	ldr	r3, [pc, #496]	; (86ad8 <udc_process_setup+0x340>)
   868e8:	691a      	ldr	r2, [r3, #16]
   868ea:	f852 1034 	ldr.w	r1, [r2, r4, lsl #3]
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   868ee:	4608      	mov	r0, r1
   868f0:	8849      	ldrh	r1, [r1, #2]
   868f2:	4b7a      	ldr	r3, [pc, #488]	; (86adc <udc_process_setup+0x344>)
   868f4:	4798      	blx	r3
   868f6:	e00c      	b.n	86912 <udc_process_setup+0x17a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   868f8:	4877      	ldr	r0, [pc, #476]	; (86ad8 <udc_process_setup+0x340>)
   868fa:	6801      	ldr	r1, [r0, #0]
   868fc:	7c4b      	ldrb	r3, [r1, #17]
   868fe:	42a3      	cmp	r3, r4
   86900:	d962      	bls.n	869c8 <udc_process_setup+0x230>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   86902:	4a75      	ldr	r2, [pc, #468]	; (86ad8 <udc_process_setup+0x340>)
   86904:	6850      	ldr	r0, [r2, #4]
   86906:	f850 1034 	ldr.w	r1, [r0, r4, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   8690a:	4608      	mov	r0, r1
   8690c:	8849      	ldrh	r1, [r1, #2]
   8690e:	4b73      	ldr	r3, [pc, #460]	; (86adc <udc_process_setup+0x344>)
   86910:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   86912:	4873      	ldr	r0, [pc, #460]	; (86ae0 <udc_process_setup+0x348>)
   86914:	6881      	ldr	r1, [r0, #8]
   86916:	f04f 0207 	mov.w	r2, #7
   8691a:	704a      	strb	r2, [r1, #1]
   8691c:	e038      	b.n	86990 <udc_process_setup+0x1f8>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   8691e:	b2c0      	uxtb	r0, r0
   86920:	2803      	cmp	r0, #3
   86922:	d80b      	bhi.n	8693c <udc_process_setup+0x1a4>
   86924:	e8df f010 	tbh	[pc, r0, lsl #1]
   86928:	000e0004 	.word	0x000e0004
   8692c:	032f032b 	.word	0x032f032b
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   86930:	486c      	ldr	r0, [pc, #432]	; (86ae4 <udc_process_setup+0x34c>)
   86932:	f04f 0104 	mov.w	r1, #4
   86936:	4a69      	ldr	r2, [pc, #420]	; (86adc <udc_process_setup+0x344>)
   86938:	4790      	blx	r2
   8693a:	e029      	b.n	86990 <udc_process_setup+0x1f8>
		str = udc_get_string_serial_name();
		break;
#endif
	default:
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
   8693c:	486a      	ldr	r0, [pc, #424]	; (86ae8 <udc_process_setup+0x350>)
   8693e:	4780      	blx	r0
   86940:	bb30      	cbnz	r0, 86990 <udc_process_setup+0x1f8>
   86942:	e28b      	b.n	86e5c <udc_process_setup+0x6c4>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
   86944:	4969      	ldr	r1, [pc, #420]	; (86aec <udc_process_setup+0x354>)
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   86946:	f04f 0008 	mov.w	r0, #8
   8694a:	f04f 0300 	mov.w	r3, #0
   8694e:	4a68      	ldr	r2, [pc, #416]	; (86af0 <udc_process_setup+0x358>)
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   86950:	5ccc      	ldrb	r4, [r1, r3]
   86952:	f822 4f02 	strh.w	r4, [r2, #2]!
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   86956:	f103 0301 	add.w	r3, r3, #1
   8695a:	2801      	cmp	r0, #1
   8695c:	f200 8317 	bhi.w	86f8e <udc_process_setup+0x7f6>
   86960:	e00e      	b.n	86980 <udc_process_setup+0x1e8>
   86962:	f102 0402 	add.w	r4, r2, #2
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   86966:	5ccd      	ldrb	r5, [r1, r3]
   86968:	8055      	strh	r5, [r2, #2]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   8696a:	f103 0301 	add.w	r3, r3, #1
   8696e:	f102 0204 	add.w	r2, r2, #4
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   86972:	5ccd      	ldrb	r5, [r1, r3]
   86974:	8065      	strh	r5, [r4, #2]
   86976:	f103 0301 	add.w	r3, r3, #1
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   8697a:	b2dc      	uxtb	r4, r3
   8697c:	4284      	cmp	r4, r0
   8697e:	d3f0      	bcc.n	86962 <udc_process_setup+0x1ca>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   86980:	ea4f 0140 	mov.w	r1, r0, lsl #1
   86984:	f101 0102 	add.w	r1, r1, #2
   86988:	4859      	ldr	r0, [pc, #356]	; (86af0 <udc_process_setup+0x358>)
   8698a:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   8698c:	4b53      	ldr	r3, [pc, #332]	; (86adc <udc_process_setup+0x344>)
   8698e:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   86990:	f641 4118 	movw	r1, #7192	; 0x1c18
   86994:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86998:	88c8      	ldrh	r0, [r1, #6]
   8699a:	898b      	ldrh	r3, [r1, #12]
   8699c:	4283      	cmp	r3, r0
   8699e:	d916      	bls.n	869ce <udc_process_setup+0x236>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   869a0:	f641 4218 	movw	r2, #7192	; 0x1c18
   869a4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   869a8:	8190      	strh	r0, [r2, #12]
	}
	return true;
   869aa:	f04f 0001 	mov.w	r0, #1
   869ae:	e255      	b.n	86e5c <udc_process_setup+0x6c4>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   869b0:	f04f 0000 	mov.w	r0, #0
   869b4:	e252      	b.n	86e5c <udc_process_setup+0x6c4>
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
   869b6:	f04f 0000 	mov.w	r0, #0
   869ba:	e24f      	b.n	86e5c <udc_process_setup+0x6c4>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
   869bc:	f04f 0000 	mov.w	r0, #0
   869c0:	e24c      	b.n	86e5c <udc_process_setup+0x6c4>
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
					bNumConfigurations) {
				return false;
   869c2:	f04f 0000 	mov.w	r0, #0
   869c6:	e249      	b.n	86e5c <udc_process_setup+0x6c4>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
   869c8:	f04f 0000 	mov.w	r0, #0
   869cc:	e246      	b.n	86e5c <udc_process_setup+0x6c4>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
   869ce:	f04f 0001 	mov.w	r0, #1
   869d2:	e243      	b.n	86e5c <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
   869d4:	2a01      	cmp	r2, #1
   869d6:	d10d      	bne.n	869f4 <udc_process_setup+0x25c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   869d8:	f241 5015 	movw	r0, #5397	; 0x1515
   869dc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   869e0:	f04f 0101 	mov.w	r1, #1
   869e4:	f648 1251 	movw	r2, #35153	; 0x8951
   869e8:	f2c0 0208 	movt	r2, #8
   869ec:	4790      	blx	r2
	return true;
   869ee:	f04f 0001 	mov.w	r0, #1
   869f2:	e233      	b.n	86e5c <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
   869f4:	f04f 0000 	mov.w	r0, #0
   869f8:	e230      	b.n	86e5c <udc_process_setup+0x6c4>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   869fa:	2b01      	cmp	r3, #1
   869fc:	d134      	bne.n	86a68 <udc_process_setup+0x2d0>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   869fe:	f641 4018 	movw	r0, #7192	; 0x1c18
   86a02:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86a06:	7841      	ldrb	r1, [r0, #1]
   86a08:	290a      	cmp	r1, #10
   86a0a:	d12d      	bne.n	86a68 <udc_process_setup+0x2d0>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   86a0c:	2a01      	cmp	r2, #1
   86a0e:	d11f      	bne.n	86a50 <udc_process_setup+0x2b8>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   86a10:	4838      	ldr	r0, [pc, #224]	; (86af4 <udc_process_setup+0x35c>)
   86a12:	7801      	ldrb	r1, [r0, #0]
   86a14:	b1f9      	cbz	r1, 86a56 <udc_process_setup+0x2be>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   86a16:	4c32      	ldr	r4, [pc, #200]	; (86ae0 <udc_process_setup+0x348>)
   86a18:	7924      	ldrb	r4, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   86a1a:	4d37      	ldr	r5, [pc, #220]	; (86af8 <udc_process_setup+0x360>)
   86a1c:	682d      	ldr	r5, [r5, #0]
   86a1e:	682b      	ldr	r3, [r5, #0]
   86a20:	791a      	ldrb	r2, [r3, #4]
   86a22:	42a2      	cmp	r2, r4
   86a24:	d91a      	bls.n	86a5c <udc_process_setup+0x2c4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   86a26:	4620      	mov	r0, r4
   86a28:	f04f 0100 	mov.w	r1, #0
   86a2c:	4b33      	ldr	r3, [pc, #204]	; (86afc <udc_process_setup+0x364>)
   86a2e:	4798      	blx	r3
   86a30:	b1b8      	cbz	r0, 86a62 <udc_process_setup+0x2ca>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   86a32:	6868      	ldr	r0, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   86a34:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
   86a38:	68ca      	ldr	r2, [r1, #12]
   86a3a:	4790      	blx	r2
   86a3c:	4b30      	ldr	r3, [pc, #192]	; (86b00 <udc_process_setup+0x368>)
   86a3e:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   86a40:	4618      	mov	r0, r3
   86a42:	f04f 0101 	mov.w	r1, #1
   86a46:	4a25      	ldr	r2, [pc, #148]	; (86adc <udc_process_setup+0x344>)
   86a48:	4790      	blx	r2
	return true;
   86a4a:	f04f 0001 	mov.w	r0, #1
   86a4e:	e205      	b.n	86e5c <udc_process_setup+0x6c4>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
   86a50:	f04f 0000 	mov.w	r0, #0
   86a54:	e202      	b.n	86e5c <udc_process_setup+0x6c4>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
   86a56:	f04f 0000 	mov.w	r0, #0
   86a5a:	e1ff      	b.n	86e5c <udc_process_setup+0x6c4>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   86a5c:	f04f 0000 	mov.w	r0, #0
   86a60:	e1fc      	b.n	86e5c <udc_process_setup+0x6c4>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
   86a62:	f04f 0000 	mov.w	r0, #0
   86a66:	e1f9      	b.n	86e5c <udc_process_setup+0x6c4>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   86a68:	2b02      	cmp	r3, #2
   86a6a:	f040 81f9 	bne.w	86e60 <udc_process_setup+0x6c8>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   86a6e:	f641 4318 	movw	r3, #7192	; 0x1c18
   86a72:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86a76:	7858      	ldrb	r0, [r3, #1]
   86a78:	2800      	cmp	r0, #0
   86a7a:	f040 81d5 	bne.w	86e28 <udc_process_setup+0x690>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   86a7e:	2a02      	cmp	r2, #2
   86a80:	d10d      	bne.n	86a9e <udc_process_setup+0x306>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   86a82:	4a17      	ldr	r2, [pc, #92]	; (86ae0 <udc_process_setup+0x348>)
   86a84:	7910      	ldrb	r0, [r2, #4]
   86a86:	491f      	ldr	r1, [pc, #124]	; (86b04 <udc_process_setup+0x36c>)
   86a88:	4788      	blx	r1
   86a8a:	4b1f      	ldr	r3, [pc, #124]	; (86b08 <udc_process_setup+0x370>)
   86a8c:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   86a8e:	4618      	mov	r0, r3
   86a90:	f04f 0102 	mov.w	r1, #2
   86a94:	4a11      	ldr	r2, [pc, #68]	; (86adc <udc_process_setup+0x344>)
   86a96:	4790      	blx	r2
			sizeof(udc_ep_status));
	return true;
   86a98:	f04f 0001 	mov.w	r0, #1
   86a9c:	e1de      	b.n	86e5c <udc_process_setup+0x6c4>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
   86a9e:	f04f 0000 	mov.w	r0, #0
   86aa2:	e1db      	b.n	86e5c <udc_process_setup+0x6c4>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   86aa4:	f010 031f 	ands.w	r3, r0, #31
   86aa8:	f040 8142 	bne.w	86d30 <udc_process_setup+0x598>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   86aac:	f641 4118 	movw	r1, #7192	; 0x1c18
   86ab0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86ab4:	784a      	ldrb	r2, [r1, #1]
   86ab6:	f102 30ff 	add.w	r0, r2, #4294967295
   86aba:	2808      	cmp	r0, #8
   86abc:	f200 8138 	bhi.w	86d30 <udc_process_setup+0x598>
   86ac0:	e8df f010 	tbh	[pc, r0, lsl #1]
   86ac4:	01360039 	.word	0x01360039
   86ac8:	01360057 	.word	0x01360057
   86acc:	01360024 	.word	0x01360024
   86ad0:	01360136 	.word	0x01360136
   86ad4:	00ae      	.short	0x00ae
   86ad6:	bf00      	nop
   86ad8:	20070168 	.word	0x20070168
   86adc:	00088951 	.word	0x00088951
   86ae0:	20071c18 	.word	0x20071c18
   86ae4:	20070294 	.word	0x20070294
   86ae8:	00084ae1 	.word	0x00084ae1
   86aec:	20070268 	.word	0x20070268
   86af0:	20070274 	.word	0x20070274
   86af4:	20071515 	.word	0x20071515
   86af8:	2007150c 	.word	0x2007150c
   86afc:	0008653d 	.word	0x0008653d
   86b00:	20071514 	.word	0x20071514
   86b04:	000889c5 	.word	0x000889c5
   86b08:	20071510 	.word	0x20071510
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   86b0c:	f641 4018 	movw	r0, #7192	; 0x1c18
   86b10:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86b14:	88c1      	ldrh	r1, [r0, #6]
   86b16:	b959      	cbnz	r1, 86b30 <udc_process_setup+0x398>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   86b18:	f641 4318 	movw	r3, #7192	; 0x1c18
   86b1c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86b20:	f246 52c9 	movw	r2, #26057	; 0x65c9
   86b24:	f2c0 0208 	movt	r2, #8
   86b28:	611a      	str	r2, [r3, #16]
	return true;
   86b2a:	f04f 0001 	mov.w	r0, #1
   86b2e:	e195      	b.n	86e5c <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   86b30:	f04f 0000 	mov.w	r0, #0
   86b34:	e192      	b.n	86e5c <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   86b36:	f641 4218 	movw	r2, #7192	; 0x1c18
   86b3a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86b3e:	88d1      	ldrh	r1, [r2, #6]
   86b40:	b989      	cbnz	r1, 86b66 <udc_process_setup+0x3ce>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   86b42:	f641 4018 	movw	r0, #7192	; 0x1c18
   86b46:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86b4a:	8843      	ldrh	r3, [r0, #2]
   86b4c:	2b01      	cmp	r3, #1
   86b4e:	d10d      	bne.n	86b6c <udc_process_setup+0x3d4>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   86b50:	f241 5112 	movw	r1, #5394	; 0x1512
   86b54:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86b58:	880a      	ldrh	r2, [r1, #0]
   86b5a:	f022 0002 	bic.w	r0, r2, #2
   86b5e:	8008      	strh	r0, [r1, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   86b60:	f04f 0001 	mov.w	r0, #1
   86b64:	e17a      	b.n	86e5c <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   86b66:	f04f 0000 	mov.w	r0, #0
   86b6a:	e177      	b.n	86e5c <udc_process_setup+0x6c4>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
   86b6c:	f04f 0000 	mov.w	r0, #0
   86b70:	e174      	b.n	86e5c <udc_process_setup+0x6c4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   86b72:	f641 4018 	movw	r0, #7192	; 0x1c18
   86b76:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86b7a:	88c1      	ldrh	r1, [r0, #6]
   86b7c:	2900      	cmp	r1, #0
   86b7e:	d140      	bne.n	86c02 <udc_process_setup+0x46a>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
   86b80:	f641 4318 	movw	r3, #7192	; 0x1c18
   86b84:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86b88:	885a      	ldrh	r2, [r3, #2]
   86b8a:	2a02      	cmp	r2, #2
   86b8c:	d13c      	bne.n	86c08 <udc_process_setup+0x470>
		return false;
#endif

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DEV_FEATURE_TEST_MODE:
		if (!udd_is_high_speed()) {
   86b8e:	f648 00d9 	movw	r0, #35033	; 0x88d9
   86b92:	f2c0 0008 	movt	r0, #8
   86b96:	4780      	blx	r0
   86b98:	2800      	cmp	r0, #0
   86b9a:	d038      	beq.n	86c0e <udc_process_setup+0x476>
			break;
		}
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   86b9c:	f641 4118 	movw	r1, #7192	; 0x1c18
   86ba0:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86ba4:	790b      	ldrb	r3, [r1, #4]
   86ba6:	2b00      	cmp	r3, #0
   86ba8:	d134      	bne.n	86c14 <udc_process_setup+0x47c>
			break;
		}
		// Unconfigure the device, terminating all ongoing requests
		udc_reset();
   86baa:	f246 62ed 	movw	r2, #26349	; 0x66ed
   86bae:	f2c0 0208 	movt	r2, #8
   86bb2:	4790      	blx	r2
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   86bb4:	f641 4018 	movw	r0, #7192	; 0x1c18
   86bb8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86bbc:	8881      	ldrh	r1, [r0, #4]
   86bbe:	ea4f 2311 	mov.w	r3, r1, lsr #8
   86bc2:	f103 30ff 	add.w	r0, r3, #4294967295
   86bc6:	2803      	cmp	r0, #3
   86bc8:	d827      	bhi.n	86c1a <udc_process_setup+0x482>
   86bca:	e8df f000 	tbb	[pc, r0]
   86bce:	0802      	.short	0x0802
   86bd0:	140e      	.short	0x140e
		case USB_DEV_TEST_MODE_J:
			udd_g_ctrlreq.callback = udd_test_mode_j;
   86bd2:	4897      	ldr	r0, [pc, #604]	; (86e30 <udc_process_setup+0x698>)
   86bd4:	4b97      	ldr	r3, [pc, #604]	; (86e34 <udc_process_setup+0x69c>)
   86bd6:	6118      	str	r0, [r3, #16]
			return true;
   86bd8:	f04f 0001 	mov.w	r0, #1
   86bdc:	e13e      	b.n	86e5c <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_K:
			udd_g_ctrlreq.callback = udd_test_mode_k;
   86bde:	4a96      	ldr	r2, [pc, #600]	; (86e38 <udc_process_setup+0x6a0>)
   86be0:	4994      	ldr	r1, [pc, #592]	; (86e34 <udc_process_setup+0x69c>)
   86be2:	610a      	str	r2, [r1, #16]
			return true;
   86be4:	f04f 0001 	mov.w	r0, #1
   86be8:	e138      	b.n	86e5c <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_SE0_NAK:
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   86bea:	4894      	ldr	r0, [pc, #592]	; (86e3c <udc_process_setup+0x6a4>)
   86bec:	4b91      	ldr	r3, [pc, #580]	; (86e34 <udc_process_setup+0x69c>)
   86bee:	6118      	str	r0, [r3, #16]
			return true;
   86bf0:	f04f 0001 	mov.w	r0, #1
   86bf4:	e132      	b.n	86e5c <udc_process_setup+0x6c4>

		case USB_DEV_TEST_MODE_PACKET:
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   86bf6:	4a92      	ldr	r2, [pc, #584]	; (86e40 <udc_process_setup+0x6a8>)
   86bf8:	498e      	ldr	r1, [pc, #568]	; (86e34 <udc_process_setup+0x69c>)
   86bfa:	610a      	str	r2, [r1, #16]
			return true;
   86bfc:	f04f 0001 	mov.w	r0, #1
   86c00:	e12c      	b.n	86e5c <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   86c02:	f04f 0000 	mov.w	r0, #0
   86c06:	e129      	b.n	86e5c <udc_process_setup+0x6c4>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
   86c08:	f04f 0000 	mov.w	r0, #0
   86c0c:	e126      	b.n	86e5c <udc_process_setup+0x6c4>
		break;
#endif
	default:
		break;
	}
	return false;
   86c0e:	f04f 0000 	mov.w	r0, #0
   86c12:	e123      	b.n	86e5c <udc_process_setup+0x6c4>
   86c14:	f04f 0000 	mov.w	r0, #0
   86c18:	e120      	b.n	86e5c <udc_process_setup+0x6c4>
   86c1a:	f04f 0000 	mov.w	r0, #0
   86c1e:	e11d      	b.n	86e5c <udc_process_setup+0x6c4>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   86c20:	f641 4318 	movw	r3, #7192	; 0x1c18
   86c24:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86c28:	88d9      	ldrh	r1, [r3, #6]
   86c2a:	2900      	cmp	r1, #0
   86c2c:	d16e      	bne.n	86d0c <udc_process_setup+0x574>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   86c2e:	f648 121d 	movw	r2, #35101	; 0x891d
   86c32:	f2c0 0208 	movt	r2, #8
   86c36:	4790      	blx	r2
   86c38:	2800      	cmp	r0, #0
   86c3a:	d06a      	beq.n	86d12 <udc_process_setup+0x57a>
		return false;
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   86c3c:	f648 00d9 	movw	r0, #35033	; 0x88d9
   86c40:	f2c0 0008 	movt	r0, #8
   86c44:	4780      	blx	r0
   86c46:	b168      	cbz	r0, 86c64 <udc_process_setup+0x4cc>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   86c48:	f641 4118 	movw	r1, #7192	; 0x1c18
   86c4c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86c50:	788a      	ldrb	r2, [r1, #2]
				udc_config.confdev_hs->bNumConfigurations) {
   86c52:	f240 1068 	movw	r0, #360	; 0x168
   86c56:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86c5a:	6883      	ldr	r3, [r0, #8]
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   86c5c:	7c59      	ldrb	r1, [r3, #17]
   86c5e:	428a      	cmp	r2, r1
   86c60:	dd0d      	ble.n	86c7e <udc_process_setup+0x4e6>
   86c62:	e059      	b.n	86d18 <udc_process_setup+0x580>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   86c64:	f641 4318 	movw	r3, #7192	; 0x1c18
   86c68:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86c6c:	7899      	ldrb	r1, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   86c6e:	f240 1268 	movw	r2, #360	; 0x168
   86c72:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86c76:	6810      	ldr	r0, [r2, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   86c78:	7c43      	ldrb	r3, [r0, #17]
   86c7a:	4299      	cmp	r1, r3
   86c7c:	dc4f      	bgt.n	86d1e <udc_process_setup+0x586>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
   86c7e:	f246 62ed 	movw	r2, #26349	; 0x66ed
   86c82:	f2c0 0208 	movt	r2, #8
   86c86:	4790      	blx	r2

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   86c88:	f641 4018 	movw	r0, #7192	; 0x1c18
   86c8c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86c90:	7883      	ldrb	r3, [r0, #2]
   86c92:	f241 5115 	movw	r1, #5397	; 0x1515
   86c96:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86c9a:	700b      	strb	r3, [r1, #0]
	if (udc_num_configuration == 0) {
   86c9c:	2b00      	cmp	r3, #0
   86c9e:	d041      	beq.n	86d24 <udc_process_setup+0x58c>
		return true; // Default empty configuration requested
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   86ca0:	4a68      	ldr	r2, [pc, #416]	; (86e44 <udc_process_setup+0x6ac>)
   86ca2:	4790      	blx	r2
   86ca4:	b198      	cbz	r0, 86cce <udc_process_setup+0x536>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   86ca6:	4a68      	ldr	r2, [pc, #416]	; (86e48 <udc_process_setup+0x6b0>)
   86ca8:	7810      	ldrb	r0, [r2, #0]
   86caa:	f100 31ff 	add.w	r1, r0, #4294967295
   86cae:	4b67      	ldr	r3, [pc, #412]	; (86e4c <udc_process_setup+0x6b4>)
   86cb0:	691a      	ldr	r2, [r3, #16]
   86cb2:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
   86cb6:	4966      	ldr	r1, [pc, #408]	; (86e50 <udc_process_setup+0x6b8>)
   86cb8:	6008      	str	r0, [r1, #0]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86cba:	4b65      	ldr	r3, [pc, #404]	; (86e50 <udc_process_setup+0x6b8>)
   86cbc:	681a      	ldr	r2, [r3, #0]
   86cbe:	6810      	ldr	r0, [r2, #0]
   86cc0:	7901      	ldrb	r1, [r0, #4]
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
   86cc2:	f04f 0001 	mov.w	r0, #1
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86cc6:	2900      	cmp	r1, #0
   86cc8:	f000 80c8 	beq.w	86e5c <udc_process_setup+0x6c4>
   86ccc:	e00a      	b.n	86ce4 <udc_process_setup+0x54c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   86cce:	485e      	ldr	r0, [pc, #376]	; (86e48 <udc_process_setup+0x6b0>)
   86cd0:	7803      	ldrb	r3, [r0, #0]
   86cd2:	f103 31ff 	add.w	r1, r3, #4294967295
   86cd6:	4a5d      	ldr	r2, [pc, #372]	; (86e4c <udc_process_setup+0x6b4>)
   86cd8:	6850      	ldr	r0, [r2, #4]
   86cda:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   86cde:	4b5c      	ldr	r3, [pc, #368]	; (86e50 <udc_process_setup+0x6b8>)
   86ce0:	6019      	str	r1, [r3, #0]
   86ce2:	e7ea      	b.n	86cba <udc_process_setup+0x522>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86ce4:	f04f 0400 	mov.w	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   86ce8:	4626      	mov	r6, r4
   86cea:	4d5a      	ldr	r5, [pc, #360]	; (86e54 <udc_process_setup+0x6bc>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86cec:	4f58      	ldr	r7, [pc, #352]	; (86e50 <udc_process_setup+0x6b8>)
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   86cee:	4620      	mov	r0, r4
   86cf0:	4631      	mov	r1, r6
   86cf2:	47a8      	blx	r5
   86cf4:	b1c8      	cbz	r0, 86d2a <udc_process_setup+0x592>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   86cf6:	f104 0401 	add.w	r4, r4, #1
   86cfa:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86cfc:	683b      	ldr	r3, [r7, #0]
   86cfe:	681a      	ldr	r2, [r3, #0]
   86d00:	7910      	ldrb	r0, [r2, #4]
   86d02:	42a0      	cmp	r0, r4
   86d04:	d8f3      	bhi.n	86cee <udc_process_setup+0x556>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
   86d06:	f04f 0001 	mov.w	r0, #1
   86d0a:	e0a7      	b.n	86e5c <udc_process_setup+0x6c4>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   86d0c:	f04f 0000 	mov.w	r0, #0
   86d10:	e0a4      	b.n	86e5c <udc_process_setup+0x6c4>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
   86d12:	f04f 0000 	mov.w	r0, #0
   86d16:	e0a1      	b.n	86e5c <udc_process_setup+0x6c4>
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_hs->bNumConfigurations) {
			return false;
   86d18:	f04f 0000 	mov.w	r0, #0
   86d1c:	e09e      	b.n	86e5c <udc_process_setup+0x6c4>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
   86d1e:	f04f 0000 	mov.w	r0, #0
   86d22:	e09b      	b.n	86e5c <udc_process_setup+0x6c4>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
   86d24:	f04f 0001 	mov.w	r0, #1
   86d28:	e098      	b.n	86e5c <udc_process_setup+0x6c4>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
   86d2a:	f04f 0000 	mov.w	r0, #0
   86d2e:	e095      	b.n	86e5c <udc_process_setup+0x6c4>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   86d30:	2b01      	cmp	r3, #1
   86d32:	d12d      	bne.n	86d90 <udc_process_setup+0x5f8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   86d34:	f641 4118 	movw	r1, #7192	; 0x1c18
   86d38:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86d3c:	784a      	ldrb	r2, [r1, #1]
   86d3e:	2a0b      	cmp	r2, #11
   86d40:	d126      	bne.n	86d90 <udc_process_setup+0x5f8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   86d42:	f641 4018 	movw	r0, #7192	; 0x1c18
   86d46:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86d4a:	88c2      	ldrh	r2, [r0, #6]
   86d4c:	b9ba      	cbnz	r2, 86d7e <udc_process_setup+0x5e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   86d4e:	f241 5315 	movw	r3, #5397	; 0x1515
   86d52:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86d56:	7819      	ldrb	r1, [r3, #0]
   86d58:	b1a1      	cbz	r1, 86d84 <udc_process_setup+0x5ec>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   86d5a:	f641 4518 	movw	r5, #7192	; 0x1c18
   86d5e:	f2c2 0507 	movt	r5, #8199	; 0x2007
   86d62:	792c      	ldrb	r4, [r5, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   86d64:	886d      	ldrh	r5, [r5, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   86d66:	4620      	mov	r0, r4
   86d68:	f246 6251 	movw	r2, #26193	; 0x6651
   86d6c:	f2c0 0208 	movt	r2, #8
   86d70:	4790      	blx	r2
   86d72:	b150      	cbz	r0, 86d8a <udc_process_setup+0x5f2>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   86d74:	4620      	mov	r0, r4
   86d76:	b2e9      	uxtb	r1, r5
   86d78:	4b36      	ldr	r3, [pc, #216]	; (86e54 <udc_process_setup+0x6bc>)
   86d7a:	4798      	blx	r3
   86d7c:	e06e      	b.n	86e5c <udc_process_setup+0x6c4>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
   86d7e:	f04f 0000 	mov.w	r0, #0
   86d82:	e06b      	b.n	86e5c <udc_process_setup+0x6c4>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
   86d84:	f04f 0000 	mov.w	r0, #0
   86d88:	e068      	b.n	86e5c <udc_process_setup+0x6c4>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
		return false;
   86d8a:	f04f 0000 	mov.w	r0, #0
   86d8e:	e065      	b.n	86e5c <udc_process_setup+0x6c4>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   86d90:	2b02      	cmp	r3, #2
   86d92:	d165      	bne.n	86e60 <udc_process_setup+0x6c8>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   86d94:	f641 4318 	movw	r3, #7192	; 0x1c18
   86d98:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86d9c:	7858      	ldrb	r0, [r3, #1]
   86d9e:	2801      	cmp	r0, #1
   86da0:	d002      	beq.n	86da8 <udc_process_setup+0x610>
   86da2:	2803      	cmp	r0, #3
   86da4:	d158      	bne.n	86e58 <udc_process_setup+0x6c0>
   86da6:	e01c      	b.n	86de2 <udc_process_setup+0x64a>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   86da8:	f641 4318 	movw	r3, #7192	; 0x1c18
   86dac:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86db0:	88d8      	ldrh	r0, [r3, #6]
   86db2:	b980      	cbnz	r0, 86dd6 <udc_process_setup+0x63e>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   86db4:	f641 4118 	movw	r1, #7192	; 0x1c18
   86db8:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86dbc:	884a      	ldrh	r2, [r1, #2]
   86dbe:	b96a      	cbnz	r2, 86ddc <udc_process_setup+0x644>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   86dc0:	f641 4318 	movw	r3, #7192	; 0x1c18
   86dc4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86dc8:	7918      	ldrb	r0, [r3, #4]
   86dca:	f648 3105 	movw	r1, #35589	; 0x8b05
   86dce:	f2c0 0108 	movt	r1, #8
   86dd2:	4788      	blx	r1
   86dd4:	e042      	b.n	86e5c <udc_process_setup+0x6c4>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   86dd6:	f04f 0000 	mov.w	r0, #0
   86dda:	e03f      	b.n	86e5c <udc_process_setup+0x6c4>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
   86ddc:	f04f 0000 	mov.w	r0, #0
   86de0:	e03c      	b.n	86e5c <udc_process_setup+0x6c4>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   86de2:	f641 4118 	movw	r1, #7192	; 0x1c18
   86de6:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86dea:	88ca      	ldrh	r2, [r1, #6]
   86dec:	b9b2      	cbnz	r2, 86e1c <udc_process_setup+0x684>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   86dee:	f641 4318 	movw	r3, #7192	; 0x1c18
   86df2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   86df6:	8858      	ldrh	r0, [r3, #2]
   86df8:	b998      	cbnz	r0, 86e22 <udc_process_setup+0x68a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   86dfa:	f641 4418 	movw	r4, #7192	; 0x1c18
   86dfe:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86e02:	7920      	ldrb	r0, [r4, #4]
   86e04:	f249 2101 	movw	r1, #37377	; 0x9201
   86e08:	f2c0 0108 	movt	r1, #8
   86e0c:	4788      	blx	r1
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   86e0e:	7920      	ldrb	r0, [r4, #4]
   86e10:	f648 12dd 	movw	r2, #35293	; 0x89dd
   86e14:	f2c0 0208 	movt	r2, #8
   86e18:	4790      	blx	r2
   86e1a:	e01f      	b.n	86e5c <udc_process_setup+0x6c4>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
   86e1c:	f04f 0000 	mov.w	r0, #0
   86e20:	e01c      	b.n	86e5c <udc_process_setup+0x6c4>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
   86e22:	f04f 0000 	mov.w	r0, #0
   86e26:	e019      	b.n	86e5c <udc_process_setup+0x6c4>
				break;
			}
		}
#endif
	}
	return false;
   86e28:	f04f 0000 	mov.w	r0, #0
   86e2c:	e016      	b.n	86e5c <udc_process_setup+0x6c4>
   86e2e:	bf00      	nop
   86e30:	00089305 	.word	0x00089305
   86e34:	20071c18 	.word	0x20071c18
   86e38:	00089325 	.word	0x00089325
   86e3c:	00089345 	.word	0x00089345
   86e40:	0008935d 	.word	0x0008935d
   86e44:	000888d9 	.word	0x000888d9
   86e48:	20071515 	.word	0x20071515
   86e4c:	20070168 	.word	0x20070168
   86e50:	2007150c 	.word	0x2007150c
   86e54:	000865e5 	.word	0x000865e5
   86e58:	f04f 0000 	mov.w	r0, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
   86e5c:	2800      	cmp	r0, #0
   86e5e:	d17b      	bne.n	86f58 <udc_process_setup+0x7c0>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   86e60:	f641 4118 	movw	r1, #7192	; 0x1c18
   86e64:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86e68:	7808      	ldrb	r0, [r1, #0]
   86e6a:	f000 031f 	and.w	r3, r0, #31
   86e6e:	2b01      	cmp	r3, #1
   86e70:	d12d      	bne.n	86ece <udc_process_setup+0x736>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   86e72:	f241 5215 	movw	r2, #5397	; 0x1515
   86e76:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86e7a:	7811      	ldrb	r1, [r2, #0]
   86e7c:	b339      	cbz	r1, 86ece <udc_process_setup+0x736>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   86e7e:	f641 4418 	movw	r4, #7192	; 0x1c18
   86e82:	f2c2 0407 	movt	r4, #8199	; 0x2007
   86e86:	7924      	ldrb	r4, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   86e88:	f241 550c 	movw	r5, #5388	; 0x150c
   86e8c:	f2c2 0507 	movt	r5, #8199	; 0x2007
   86e90:	682d      	ldr	r5, [r5, #0]
   86e92:	6828      	ldr	r0, [r5, #0]
   86e94:	7903      	ldrb	r3, [r0, #4]
   86e96:	42a3      	cmp	r3, r4
   86e98:	d919      	bls.n	86ece <udc_process_setup+0x736>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   86e9a:	4620      	mov	r0, r4
   86e9c:	f04f 0100 	mov.w	r1, #0
   86ea0:	f246 523d 	movw	r2, #25917	; 0x653d
   86ea4:	f2c0 0208 	movt	r2, #8
   86ea8:	4790      	blx	r2
   86eaa:	b180      	cbz	r0, 86ece <udc_process_setup+0x736>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   86eac:	6869      	ldr	r1, [r5, #4]
   86eae:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   86eb2:	68e8      	ldr	r0, [r5, #12]
   86eb4:	4780      	blx	r0
   86eb6:	4601      	mov	r1, r0
   86eb8:	4620      	mov	r0, r4
   86eba:	f246 533d 	movw	r3, #25917	; 0x653d
   86ebe:	f2c0 0308 	movt	r3, #8
   86ec2:	4798      	blx	r3
   86ec4:	b118      	cbz	r0, 86ece <udc_process_setup+0x736>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   86ec6:	68aa      	ldr	r2, [r5, #8]
   86ec8:	4790      	blx	r2
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
   86eca:	2800      	cmp	r0, #0
   86ecc:	d147      	bne.n	86f5e <udc_process_setup+0x7c6>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   86ece:	f641 4118 	movw	r1, #7192	; 0x1c18
   86ed2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   86ed6:	7808      	ldrb	r0, [r1, #0]
   86ed8:	f000 031f 	and.w	r3, r0, #31
   86edc:	2b02      	cmp	r3, #2
   86ede:	d141      	bne.n	86f64 <udc_process_setup+0x7cc>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   86ee0:	f241 5215 	movw	r2, #5397	; 0x1515
   86ee4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   86ee8:	7811      	ldrb	r1, [r2, #0]
   86eea:	b331      	cbz	r1, 86f3a <udc_process_setup+0x7a2>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86eec:	f241 500c 	movw	r0, #5388	; 0x150c
   86ef0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   86ef4:	6803      	ldr	r3, [r0, #0]
   86ef6:	681a      	ldr	r2, [r3, #0]
   86ef8:	7911      	ldrb	r1, [r2, #4]
   86efa:	b309      	cbz	r1, 86f40 <udc_process_setup+0x7a8>
   86efc:	f04f 0400 	mov.w	r4, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   86f00:	f246 563d 	movw	r6, #25917	; 0x653d
   86f04:	f2c0 0608 	movt	r6, #8
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86f08:	f241 570c 	movw	r7, #5388	; 0x150c
   86f0c:	f2c2 0707 	movt	r7, #8199	; 0x2007
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   86f10:	685d      	ldr	r5, [r3, #4]
   86f12:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   86f16:	68eb      	ldr	r3, [r5, #12]
   86f18:	4798      	blx	r3
   86f1a:	4601      	mov	r1, r0
   86f1c:	4620      	mov	r0, r4
   86f1e:	47b0      	blx	r6
   86f20:	b188      	cbz	r0, 86f46 <udc_process_setup+0x7ae>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   86f22:	68a8      	ldr	r0, [r5, #8]
   86f24:	4780      	blx	r0
   86f26:	b988      	cbnz	r0, 86f4c <udc_process_setup+0x7b4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   86f28:	f104 0401 	add.w	r4, r4, #1
   86f2c:	b2e4      	uxtb	r4, r4
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   86f2e:	683b      	ldr	r3, [r7, #0]
   86f30:	681a      	ldr	r2, [r3, #0]
   86f32:	7911      	ldrb	r1, [r2, #4]
   86f34:	42a1      	cmp	r1, r4
   86f36:	d8eb      	bhi.n	86f10 <udc_process_setup+0x778>
   86f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
   86f3a:	f04f 0000 	mov.w	r0, #0
   86f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
   86f40:	f04f 0000 	mov.w	r0, #0
   86f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
			return false;
   86f46:	f04f 0000 	mov.w	r0, #0
   86f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
   86f4c:	f04f 0001 	mov.w	r0, #1
   86f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
   86f52:	f04f 0000 	mov.w	r0, #0
   86f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
   86f58:	f04f 0001 	mov.w	r0, #1
   86f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
			return true;
   86f5e:	f04f 0001 	mov.w	r0, #1
   86f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   86f64:	f04f 0000 	mov.w	r0, #0
   86f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   86f6a:	f010 0f60 	tst.w	r0, #96	; 0x60
   86f6e:	f47f af77 	bne.w	86e60 <udc_process_setup+0x6c8>
   86f72:	e597      	b.n	86aa4 <udc_process_setup+0x30c>
   86f74:	f010 0f60 	tst.w	r0, #96	; 0x60
   86f78:	f47f af72 	bne.w	86e60 <udc_process_setup+0x6c8>
   86f7c:	e424      	b.n	867c8 <udc_process_setup+0x30>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   86f7e:	f04f 000e 	mov.w	r0, #14
		str = udc_string_product_name;
   86f82:	490a      	ldr	r1, [pc, #40]	; (86fac <udc_process_setup+0x814>)
   86f84:	e4e1      	b.n	8694a <udc_process_setup+0x1b2>
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   86f86:	f04f 000c 	mov.w	r0, #12
		str = udc_get_string_serial_name();
   86f8a:	4909      	ldr	r1, [pc, #36]	; (86fb0 <udc_process_setup+0x818>)
   86f8c:	e4dd      	b.n	8694a <udc_process_setup+0x1b2>
   86f8e:	f04f 0401 	mov.w	r4, #1
   86f92:	2c00      	cmp	r4, #0
   86f94:	f43f ace5 	beq.w	86962 <udc_process_setup+0x1ca>
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   86f98:	5ccc      	ldrb	r4, [r1, r3]
   86f9a:	f822 4f02 	strh.w	r4, [r2, #2]!
   86f9e:	f103 0301 	add.w	r3, r3, #1
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
   86fa2:	b2dc      	uxtb	r4, r3
   86fa4:	4284      	cmp	r4, r0
   86fa6:	f4ff acdc 	bcc.w	86962 <udc_process_setup+0x1ca>
   86faa:	e4e9      	b.n	86980 <udc_process_setup+0x1e8>
   86fac:	20070258 	.word	0x20070258
   86fb0:	0008cc08 	.word	0x0008cc08

00086fb4 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   86fb4:	b10a      	cbz	r2, 86fba <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
   86fb6:	6641      	str	r1, [r0, #100]	; 0x64
   86fb8:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
   86fba:	6601      	str	r1, [r0, #96]	; 0x60
   86fbc:	4770      	bx	lr
   86fbe:	bf00      	nop

00086fc0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   86fc0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   86fc2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   86fc6:	d016      	beq.n	86ff6 <pio_set_peripheral+0x36>
   86fc8:	d804      	bhi.n	86fd4 <pio_set_peripheral+0x14>
   86fca:	b1c9      	cbz	r1, 87000 <pio_set_peripheral+0x40>
   86fcc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   86fd0:	d115      	bne.n	86ffe <pio_set_peripheral+0x3e>
   86fd2:	e009      	b.n	86fe8 <pio_set_peripheral+0x28>
   86fd4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   86fd8:	d012      	beq.n	87000 <pio_set_peripheral+0x40>
   86fda:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   86fde:	d00f      	beq.n	87000 <pio_set_peripheral+0x40>
   86fe0:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   86fe4:	d10b      	bne.n	86ffe <pio_set_peripheral+0x3e>
   86fe6:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   86fe8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   86fea:	6f01      	ldr	r1, [r0, #112]	; 0x70
   86fec:	400b      	ands	r3, r1
   86fee:	ea23 0302 	bic.w	r3, r3, r2
   86ff2:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   86ff4:	e003      	b.n	86ffe <pio_set_peripheral+0x3e>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   86ff6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   86ff8:	ea42 0103 	orr.w	r1, r2, r3
   86ffc:	6701      	str	r1, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   86ffe:	6042      	str	r2, [r0, #4]
   87000:	4770      	bx	lr
   87002:	bf00      	nop

00087004 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   87004:	6441      	str	r1, [r0, #68]	; 0x44
   87006:	4770      	bx	lr

00087008 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   87008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8700a:	4604      	mov	r4, r0
   8700c:	460d      	mov	r5, r1
   8700e:	4616      	mov	r6, r2
   87010:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   87012:	f247 0305 	movw	r3, #28677	; 0x7005
   87016:	f2c0 0308 	movt	r3, #8
   8701a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   8701c:	4620      	mov	r0, r4
   8701e:	4629      	mov	r1, r5
   87020:	9a06      	ldr	r2, [sp, #24]
   87022:	f646 73b5 	movw	r3, #28597	; 0x6fb5
   87026:	f2c0 0308 	movt	r3, #8
   8702a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8702c:	b10f      	cbz	r7, 87032 <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
   8702e:	6525      	str	r5, [r4, #80]	; 0x50
   87030:	e000      	b.n	87034 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   87032:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   87034:	b10e      	cbz	r6, 8703a <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
   87036:	6325      	str	r5, [r4, #48]	; 0x30
   87038:	e000      	b.n	8703c <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8703a:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8703c:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   8703e:	6025      	str	r5, [r4, #0]
   87040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87042:	bf00      	nop

00087044 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   87044:	b570      	push	{r4, r5, r6, lr}
   87046:	4604      	mov	r4, r0
   87048:	460d      	mov	r5, r1
   8704a:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   8704c:	f247 0305 	movw	r3, #28677	; 0x7005
   87050:	f2c0 0308 	movt	r3, #8
   87054:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   87056:	4620      	mov	r0, r4
   87058:	4629      	mov	r1, r5
   8705a:	f006 0201 	and.w	r2, r6, #1
   8705e:	f646 73b5 	movw	r3, #28597	; 0x6fb5
   87062:	f2c0 0308 	movt	r3, #8
   87066:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   87068:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
   8706c:	bf14      	ite	ne
   8706e:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   87070:	6265      	streq	r5, [r4, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   87072:	f016 0f02 	tst.w	r6, #2
   87076:	d002      	beq.n	8707e <pio_set_input+0x3a>
		p_pio->PIO_SCIFSR = ul_mask;
   87078:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   8707c:	e004      	b.n	87088 <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8707e:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_SCIFSR = ul_mask;
   87082:	bf18      	it	ne
   87084:	f8c4 5080 	strne.w	r5, [r4, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   87088:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   8708a:	6025      	str	r5, [r4, #0]
   8708c:	bd70      	pop	{r4, r5, r6, pc}
   8708e:	bf00      	nop

00087090 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   87090:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   87092:	4770      	bx	lr

00087094 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   87094:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   87096:	4770      	bx	lr

00087098 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   87098:	b5f0      	push	{r4, r5, r6, r7, lr}
   8709a:	b083      	sub	sp, #12
   8709c:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8709e:	ea4f 1650 	mov.w	r6, r0, lsr #5
   870a2:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
   870a6:	f201 7207 	addw	r2, r1, #1799	; 0x707
   870aa:	ea4f 2642 	mov.w	r6, r2, lsl #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   870ae:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
   870b2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   870b6:	d042      	beq.n	8713e <pio_configure_pin+0xa6>
   870b8:	d806      	bhi.n	870c8 <pio_configure_pin+0x30>
   870ba:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   870be:	d00a      	beq.n	870d6 <pio_configure_pin+0x3e>
   870c0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   870c4:	d164      	bne.n	87190 <pio_configure_pin+0xf8>
   870c6:	e020      	b.n	8710a <pio_configure_pin+0x72>
   870c8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   870cc:	d046      	beq.n	8715c <pio_configure_pin+0xc4>
   870ce:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   870d2:	d15d      	bne.n	87190 <pio_configure_pin+0xf8>
   870d4:	e042      	b.n	8715c <pio_configure_pin+0xc4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   870d6:	f000 071f 	and.w	r7, r0, #31
   870da:	f04f 0401 	mov.w	r4, #1
   870de:	fa04 f707 	lsl.w	r7, r4, r7
   870e2:	4630      	mov	r0, r6
   870e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   870e8:	463a      	mov	r2, r7
   870ea:	f646 73c1 	movw	r3, #28609	; 0x6fc1
   870ee:	f2c0 0308 	movt	r3, #8
   870f2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   870f4:	4630      	mov	r0, r6
   870f6:	4639      	mov	r1, r7
   870f8:	ea05 0204 	and.w	r2, r5, r4
   870fc:	f646 73b5 	movw	r3, #28597	; 0x6fb5
   87100:	f2c0 0308 	movt	r3, #8
   87104:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   87106:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   87108:	e044      	b.n	87194 <pio_configure_pin+0xfc>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8710a:	f000 001f 	and.w	r0, r0, #31
   8710e:	f04f 0401 	mov.w	r4, #1
   87112:	fa04 f700 	lsl.w	r7, r4, r0
   87116:	4630      	mov	r0, r6
   87118:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8711c:	463a      	mov	r2, r7
   8711e:	f646 73c1 	movw	r3, #28609	; 0x6fc1
   87122:	f2c0 0308 	movt	r3, #8
   87126:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   87128:	4630      	mov	r0, r6
   8712a:	4639      	mov	r1, r7
   8712c:	ea05 0204 	and.w	r2, r5, r4
   87130:	f646 73b5 	movw	r3, #28597	; 0x6fb5
   87134:	f2c0 0308 	movt	r3, #8
   87138:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8713a:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
   8713c:	e02a      	b.n	87194 <pio_configure_pin+0xfc>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8713e:	f000 021f 	and.w	r2, r0, #31
   87142:	f04f 0401 	mov.w	r4, #1
   87146:	4630      	mov	r0, r6
   87148:	fa04 f102 	lsl.w	r1, r4, r2
   8714c:	462a      	mov	r2, r5
   8714e:	f247 0345 	movw	r3, #28741	; 0x7045
   87152:	f2c0 0308 	movt	r3, #8
   87156:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   87158:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8715a:	e01b      	b.n	87194 <pio_configure_pin+0xfc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8715c:	f000 021f 	and.w	r2, r0, #31
   87160:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   87164:	f005 5360 	and.w	r3, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   87168:	ea05 0104 	and.w	r1, r5, r4
   8716c:	9100      	str	r1, [sp, #0]
   8716e:	4630      	mov	r0, r6
   87170:	fa04 f102 	lsl.w	r1, r4, r2
   87174:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   87178:	bf14      	ite	ne
   8717a:	2200      	movne	r2, #0
   8717c:	2201      	moveq	r2, #1
   8717e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   87182:	f247 0509 	movw	r5, #28681	; 0x7009
   87186:	f2c0 0508 	movt	r5, #8
   8718a:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   8718c:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8718e:	e001      	b.n	87194 <pio_configure_pin+0xfc>

	default:
		return 0;
   87190:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
   87194:	b003      	add	sp, #12
   87196:	bdf0      	pop	{r4, r5, r6, r7, pc}

00087198 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   87198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8719a:	4604      	mov	r4, r0
   8719c:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8719e:	f247 0391 	movw	r3, #28817	; 0x7091
   871a2:	f2c0 0308 	movt	r3, #8
   871a6:	4798      	blx	r3
   871a8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   871aa:	4620      	mov	r0, r4
   871ac:	f247 0195 	movw	r1, #28821	; 0x7095
   871b0:	f2c0 0108 	movt	r1, #8
   871b4:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
   871b6:	4005      	ands	r5, r0
   871b8:	d014      	beq.n	871e4 <pio_handler_process+0x4c>
   871ba:	4c0b      	ldr	r4, [pc, #44]	; (871e8 <pio_handler_process+0x50>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
   871bc:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   871be:	f854 0c0c 	ldr.w	r0, [r4, #-12]
   871c2:	42b0      	cmp	r0, r6
   871c4:	d10a      	bne.n	871dc <pio_handler_process+0x44>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   871c6:	f854 1c08 	ldr.w	r1, [r4, #-8]
   871ca:	4229      	tst	r1, r5
   871cc:	d006      	beq.n	871dc <pio_handler_process+0x44>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   871ce:	6822      	ldr	r2, [r4, #0]
   871d0:	4630      	mov	r0, r6
   871d2:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   871d4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   871d8:	ea25 0503 	bic.w	r5, r5, r3
   871dc:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   871e0:	2d00      	cmp	r5, #0
   871e2:	d1eb      	bne.n	871bc <pio_handler_process+0x24>
   871e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   871e6:	bf00      	nop
   871e8:	20071528 	.word	0x20071528

000871ec <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   871ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   871ee:	f44f 6060 	mov.w	r0, #3584	; 0xe00
   871f2:	f2c4 000e 	movt	r0, #16398	; 0x400e
   871f6:	f04f 010b 	mov.w	r1, #11
   871fa:	f247 1399 	movw	r3, #29081	; 0x7199
   871fe:	f2c0 0308 	movt	r3, #8
   87202:	4798      	blx	r3
   87204:	bd08      	pop	{r3, pc}
   87206:	bf00      	nop

00087208 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   87208:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8720a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   8720e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   87212:	f04f 010c 	mov.w	r1, #12
   87216:	f247 1399 	movw	r3, #29081	; 0x7199
   8721a:	f2c0 0308 	movt	r3, #8
   8721e:	4798      	blx	r3
   87220:	bd08      	pop	{r3, pc}
   87222:	bf00      	nop

00087224 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   87224:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   87226:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   8722a:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8722e:	f04f 010d 	mov.w	r1, #13
   87232:	f247 1399 	movw	r3, #29081	; 0x7199
   87236:	f2c0 0308 	movt	r3, #8
   8723a:	4798      	blx	r3
   8723c:	bd08      	pop	{r3, pc}
   8723e:	bf00      	nop

00087240 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   87240:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   87242:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
   87246:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8724a:	f04f 010e 	mov.w	r1, #14
   8724e:	f247 1399 	movw	r3, #29081	; 0x7199
   87252:	f2c0 0308 	movt	r3, #8
   87256:	4798      	blx	r3
   87258:	bd08      	pop	{r3, pc}
   8725a:	bf00      	nop

0008725c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8725c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87260:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   87266:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   8726a:	4308      	orrs	r0, r1
   8726c:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8726e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   87270:	f010 0f08 	tst.w	r0, #8
   87274:	d007      	beq.n	87286 <pmc_switch_mck_to_pllack+0x2a>
   87276:	e010      	b.n	8729a <pmc_switch_mck_to_pllack+0x3e>
   87278:	f100 33ff 	add.w	r3, r0, #4294967295
   8727c:	6e90      	ldr	r0, [r2, #104]	; 0x68
   8727e:	f010 0f08 	tst.w	r0, #8
   87282:	d038      	beq.n	872f6 <pmc_switch_mck_to_pllack+0x9a>
   87284:	e009      	b.n	8729a <pmc_switch_mck_to_pllack+0x3e>
   87286:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8728a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8728e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   87292:	6e91      	ldr	r1, [r2, #104]	; 0x68
   87294:	f011 0f08 	tst.w	r1, #8
   87298:	d0ee      	beq.n	87278 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8729a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   8729e:	f2c4 010e 	movt	r1, #16398	; 0x400e
   872a2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   872a4:	f022 0303 	bic.w	r3, r2, #3
   872a8:	f043 0002 	orr.w	r0, r3, #2
   872ac:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   872ae:	6e89      	ldr	r1, [r1, #104]	; 0x68
   872b0:	f011 0f08 	tst.w	r1, #8
   872b4:	d009      	beq.n	872ca <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   872b6:	f04f 0000 	mov.w	r0, #0
   872ba:	4770      	bx	lr
   872bc:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   872c0:	6e91      	ldr	r1, [r2, #104]	; 0x68
   872c2:	f011 0f08 	tst.w	r1, #8
   872c6:	d013      	beq.n	872f0 <pmc_switch_mck_to_pllack+0x94>
   872c8:	e009      	b.n	872de <pmc_switch_mck_to_pllack+0x82>
   872ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
   872ce:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   872d2:	f2c4 020e 	movt	r2, #16398	; 0x400e
   872d6:	6e90      	ldr	r0, [r2, #104]	; 0x68
   872d8:	f010 0f08 	tst.w	r0, #8
   872dc:	d0ee      	beq.n	872bc <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   872de:	f04f 0000 	mov.w	r0, #0
   872e2:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   872e4:	f04f 0001 	mov.w	r0, #1
   872e8:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   872ea:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
   872ee:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   872f0:	3b01      	subs	r3, #1
   872f2:	d1f0      	bne.n	872d6 <pmc_switch_mck_to_pllack+0x7a>
   872f4:	e7f9      	b.n	872ea <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   872f6:	1e58      	subs	r0, r3, #1
   872f8:	d1cb      	bne.n	87292 <pmc_switch_mck_to_pllack+0x36>
   872fa:	e7f3      	b.n	872e4 <pmc_switch_mck_to_pllack+0x88>

000872fc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   872fc:	b188      	cbz	r0, 87322 <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   872fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   87302:	f2c4 010e 	movt	r1, #16398	; 0x400e
   87306:	6a08      	ldr	r0, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   87308:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   8730c:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
   87310:	4002      	ands	r2, r0
   87312:	f04f 0302 	mov.w	r3, #2
   87316:	f2c0 1337 	movt	r3, #311	; 0x137
   8731a:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8731e:	6208      	str	r0, [r1, #32]
   87320:	4770      	bx	lr
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   87322:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87326:	f2c4 030e 	movt	r3, #16398	; 0x400e
   8732a:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   8732c:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
   87330:	f020 0203 	bic.w	r2, r0, #3
   87334:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
   87338:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8733c:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   87340:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   87344:	6218      	str	r0, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   87346:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8734a:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8734e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   87350:	f013 0f01 	tst.w	r3, #1
   87354:	d0fb      	beq.n	8734e <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   87356:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   8735a:	f2c4 010e 	movt	r1, #16398	; 0x400e
   8735e:	6a08      	ldr	r0, [r1, #32]
   87360:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
   87364:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
   87368:	620b      	str	r3, [r1, #32]
   8736a:	4770      	bx	lr

0008736c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8736c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87370:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87374:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   87376:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8737a:	4770      	bx	lr

0008737c <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8737c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87380:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87384:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   87388:	629a      	str	r2, [r3, #40]	; 0x28
   8738a:	4770      	bx	lr

0008738c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8738c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87390:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87394:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   87396:	f000 0002 	and.w	r0, r0, #2
   8739a:	4770      	bx	lr

0008739c <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
   8739c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   873a0:	f2c4 030e 	movt	r3, #16398	; 0x400e
   873a4:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
   873a8:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   873aa:	f44f 60c0 	mov.w	r0, #1536	; 0x600
   873ae:	f2c4 000e 	movt	r0, #16398	; 0x400e
   873b2:	6e81      	ldr	r1, [r0, #104]	; 0x68
   873b4:	f011 0f40 	tst.w	r1, #64	; 0x40
   873b8:	d0fb      	beq.n	873b2 <pmc_enable_upll_clock+0x16>
}
   873ba:	4770      	bx	lr

000873bc <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   873bc:	282c      	cmp	r0, #44	; 0x2c
   873be:	d835      	bhi.n	8742c <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
   873c0:	281f      	cmp	r0, #31
   873c2:	d817      	bhi.n	873f4 <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   873c4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   873c8:	f2c4 010e 	movt	r1, #16398	; 0x400e
   873cc:	698a      	ldr	r2, [r1, #24]
   873ce:	f04f 0301 	mov.w	r3, #1
   873d2:	fa03 f300 	lsl.w	r3, r3, r0
   873d6:	401a      	ands	r2, r3
   873d8:	4293      	cmp	r3, r2
   873da:	d02a      	beq.n	87432 <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
   873dc:	f04f 0101 	mov.w	r1, #1
   873e0:	fa01 f000 	lsl.w	r0, r1, r0
   873e4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   873e8:	f2c4 020e 	movt	r2, #16398	; 0x400e
   873ec:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   873ee:	f04f 0000 	mov.w	r0, #0
   873f2:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   873f4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   873f8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   873fc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   87400:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   87404:	f04f 0101 	mov.w	r1, #1
   87408:	fa01 f100 	lsl.w	r1, r1, r0
   8740c:	400a      	ands	r2, r1
   8740e:	4291      	cmp	r1, r2
   87410:	d012      	beq.n	87438 <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
   87412:	f04f 0301 	mov.w	r3, #1
   87416:	fa03 f000 	lsl.w	r0, r3, r0
   8741a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8741e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   87422:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   87426:	f04f 0000 	mov.w	r0, #0
   8742a:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8742c:	f04f 0001 	mov.w	r0, #1
   87430:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   87432:	f04f 0000 	mov.w	r0, #0
   87436:	4770      	bx	lr
   87438:	f04f 0000 	mov.w	r0, #0
}
   8743c:	4770      	bx	lr
   8743e:	bf00      	nop

00087440 <pmc_switch_udpck_to_upllck>:
 *
 * \param dw_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
   87440:	ea4f 2000 	mov.w	r0, r0, lsl #8
   87444:	f400 6270 	and.w	r2, r0, #3840	; 0xf00
   87448:	f042 0101 	orr.w	r1, r2, #1
   8744c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   87450:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87454:	6399      	str	r1, [r3, #56]	; 0x38
   87456:	4770      	bx	lr

00087458 <pmc_enable_udpck>:
void pmc_enable_udpck(void)
{
# if (SAM3S || SAM4S || SAM4E)
	PMC->PMC_SCER = PMC_SCER_UDP;
# else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
   87458:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8745c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87460:	f04f 0220 	mov.w	r2, #32
   87464:	601a      	str	r2, [r3, #0]
   87466:	4770      	bx	lr

00087468 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   87468:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8746c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   87470:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   87472:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   87476:	f420 0178 	bic.w	r1, r0, #16252928	; 0xf80000
	PMC->PMC_FSMR |= ul_inputs;
   8747a:	430a      	orrs	r2, r1
   8747c:	671a      	str	r2, [r3, #112]	; 0x70
   8747e:	4770      	bx	lr

00087480 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_fastrc_used;
   87480:	f241 538c 	movw	r3, #5516	; 0x158c
   87484:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87488:	7818      	ldrb	r0, [r3, #0]
}
   8748a:	f080 0001 	eor.w	r0, r0, #1
   8748e:	4770      	bx	lr

00087490 <udd_sleep_mode>:
 *
 * \param b_enable true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   87490:	4603      	mov	r3, r0
   87492:	2800      	cmp	r0, #0
   87494:	d149      	bne.n	8752a <udd_sleep_mode+0x9a>
   87496:	f241 5291 	movw	r2, #5521	; 0x1591
   8749a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8749e:	7811      	ldrb	r1, [r2, #0]
   874a0:	2900      	cmp	r1, #0
   874a2:	d03c      	beq.n	8751e <udd_sleep_mode+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   874a4:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   874a8:	b672      	cpsid	i
   874aa:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   874ae:	f240 2298 	movw	r2, #664	; 0x298
   874b2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   874b6:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   874b8:	f641 4210 	movw	r2, #7184	; 0x1c10
   874bc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   874c0:	7890      	ldrb	r0, [r2, #2]
   874c2:	f100 30ff 	add.w	r0, r0, #4294967295
   874c6:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   874c8:	bb49      	cbnz	r1, 8751e <udd_sleep_mode+0x8e>
		cpu_irq_enable();
   874ca:	f240 2298 	movw	r2, #664	; 0x298
   874ce:	f2c2 0207 	movt	r2, #8199	; 0x2007
   874d2:	f04f 0101 	mov.w	r1, #1
   874d6:	7011      	strb	r1, [r2, #0]
   874d8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   874dc:	b662      	cpsie	i
   874de:	e01e      	b.n	8751e <udd_sleep_mode+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   874e0:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   874e4:	b672      	cpsid	i
   874e6:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   874ea:	f240 2298 	movw	r2, #664	; 0x298
   874ee:	f2c2 0207 	movt	r2, #8199	; 0x2007
   874f2:	f04f 0000 	mov.w	r0, #0
   874f6:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   874f8:	f641 4210 	movw	r2, #7184	; 0x1c10
   874fc:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87500:	7890      	ldrb	r0, [r2, #2]
   87502:	f100 0001 	add.w	r0, r0, #1
   87506:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87508:	b949      	cbnz	r1, 8751e <udd_sleep_mode+0x8e>
		cpu_irq_enable();
   8750a:	f240 2298 	movw	r2, #664	; 0x298
   8750e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87512:	f04f 0101 	mov.w	r1, #1
   87516:	7011      	strb	r1, [r2, #0]
   87518:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8751c:	b662      	cpsie	i
	}
	if (b_idle && !udd_b_idle) {
		dbg_print("_W ");
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
   8751e:	f241 5091 	movw	r0, #5521	; 0x1591
   87522:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87526:	7003      	strb	r3, [r0, #0]
   87528:	4770      	bx	lr
{
	if (!b_idle && udd_b_idle) {
		dbg_print("_S ");
		sleepmgr_unlock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   8752a:	f241 5291 	movw	r2, #5521	; 0x1591
   8752e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87532:	7810      	ldrb	r0, [r2, #0]
   87534:	2800      	cmp	r0, #0
   87536:	d0d3      	beq.n	874e0 <udd_sleep_mode+0x50>
   87538:	e7f1      	b.n	8751e <udd_sleep_mode+0x8e>
   8753a:	bf00      	nop

0008753c <udd_ctrl_init>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8753c:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87540:	b672      	cpsid	i
   87542:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87546:	f240 2398 	movw	r3, #664	; 0x298
   8754a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8754e:	f04f 0100 	mov.w	r1, #0
   87552:	7019      	strb	r1, [r3, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   87554:	f24c 2020 	movw	r0, #49696	; 0xc220
   87558:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8755c:	f04f 0101 	mov.w	r1, #1
   87560:	6001      	str	r1, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87562:	b93a      	cbnz	r2, 87574 <udd_ctrl_init+0x38>
		cpu_irq_enable();
   87564:	f240 2398 	movw	r3, #664	; 0x298
   87568:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8756c:	7019      	strb	r1, [r3, #0]
   8756e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87572:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   87574:	f24c 1060 	movw	r0, #49504	; 0xc160
   87578:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8757c:	f04f 0102 	mov.w	r1, #2
   87580:	6001      	str	r1, [r0, #0]

	udd_g_ctrlreq.callback = NULL;
   87582:	f641 4218 	movw	r2, #7192	; 0x1c18
   87586:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8758a:	f04f 0300 	mov.w	r3, #0
   8758e:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   87590:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   87592:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   87594:	f241 610c 	movw	r1, #5644	; 0x160c
   87598:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8759c:	700b      	strb	r3, [r1, #0]
   8759e:	4770      	bx	lr

000875a0 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   875a0:	f241 630c 	movw	r3, #5644	; 0x160c
   875a4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   875a8:	f04f 0205 	mov.w	r2, #5
   875ac:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   875ae:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   875b2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   875b6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   875ba:	6001      	str	r1, [r0, #0]
   875bc:	4770      	bx	lr
   875be:	bf00      	nop

000875c0 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   875c0:	f241 630c 	movw	r3, #5644	; 0x160c
   875c4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   875c8:	f04f 0203 	mov.w	r2, #3
   875cc:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   875ce:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   875d2:	b672      	cpsid	i
   875d4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   875d8:	f240 2198 	movw	r1, #664	; 0x298
   875dc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   875e0:	f04f 0300 	mov.w	r3, #0
   875e4:	700b      	strb	r3, [r1, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   875e6:	f24c 1260 	movw	r2, #49504	; 0xc160
   875ea:	f2c4 020a 	movt	r2, #16394	; 0x400a
   875ee:	f04f 0101 	mov.w	r1, #1
   875f2:	6011      	str	r1, [r2, #0]
	udd_enable_in_send_interrupt(0);
   875f4:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   875f8:	f2c4 030a 	movt	r3, #16394	; 0x400a
   875fc:	6019      	str	r1, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   875fe:	f04f 0108 	mov.w	r1, #8
   87602:	6011      	str	r1, [r2, #0]
	udd_enable_nak_out_interrupt(0);
   87604:	6019      	str	r1, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87606:	b948      	cbnz	r0, 8761c <udd_ctrl_send_zlp_in+0x5c>
		cpu_irq_enable();
   87608:	f240 2098 	movw	r0, #664	; 0x298
   8760c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87610:	f04f 0201 	mov.w	r2, #1
   87614:	7002      	strb	r2, [r0, #0]
   87616:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8761a:	b662      	cpsie	i
   8761c:	4770      	bx	lr
   8761e:	bf00      	nop

00087620 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   87620:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   87622:	f641 4318 	movw	r3, #7192	; 0x1c18
   87626:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8762a:	6918      	ldr	r0, [r3, #16]
   8762c:	b100      	cbz	r0, 87630 <udd_ctrl_endofrequest+0x10>
		udd_g_ctrlreq.callback();
   8762e:	4780      	blx	r0
   87630:	bd08      	pop	{r3, pc}
   87632:	bf00      	nop

00087634 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
   87634:	b570      	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87636:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8763a:	b672      	cpsid	i
   8763c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87640:	f240 2398 	movw	r3, #664	; 0x298
   87644:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87648:	f04f 0100 	mov.w	r1, #0
   8764c:	7019      	strb	r1, [r3, #0]
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
   8764e:	f24c 2020 	movw	r0, #49696	; 0xc220
   87652:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87656:	f04f 0101 	mov.w	r1, #1
   8765a:	6001      	str	r1, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8765c:	b93a      	cbnz	r2, 8766e <udd_ctrl_in_sent+0x3a>
		cpu_irq_enable();
   8765e:	f240 2398 	movw	r3, #664	; 0x298
   87662:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87666:	7019      	strb	r1, [r3, #0]
   87668:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8766c:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   8766e:	f241 600c 	movw	r0, #5644	; 0x160c
   87672:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87676:	7801      	ldrb	r1, [r0, #0]
   87678:	2903      	cmp	r1, #3
   8767a:	d10a      	bne.n	87692 <udd_ctrl_in_sent+0x5e>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   8767c:	f247 6221 	movw	r2, #30241	; 0x7621
   87680:	f2c0 0208 	movt	r2, #8
   87684:	4790      	blx	r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
   87686:	f247 503d 	movw	r0, #30013	; 0x753d
   8768a:	f2c0 0008 	movt	r0, #8
   8768e:	4780      	blx	r0
		return;
   87690:	bd70      	pop	{r4, r5, r6, pc}
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   87692:	f241 640e 	movw	r4, #5646	; 0x160e
   87696:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8769a:	8823      	ldrh	r3, [r4, #0]
   8769c:	f641 4218 	movw	r2, #7192	; 0x1c18
   876a0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   876a4:	8990      	ldrh	r0, [r2, #12]
   876a6:	1ac1      	subs	r1, r0, r3
   876a8:	b28c      	uxth	r4, r1
	if (0 == nb_remain) {
   876aa:	2c00      	cmp	r4, #0
   876ac:	d155      	bne.n	8775a <udd_ctrl_in_sent+0x126>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous playlaod buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   876ae:	f241 528e 	movw	r2, #5518	; 0x158e
   876b2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   876b6:	8810      	ldrh	r0, [r2, #0]
   876b8:	181b      	adds	r3, r3, r0
   876ba:	b299      	uxth	r1, r3
   876bc:	8011      	strh	r1, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   876be:	f641 4218 	movw	r2, #7192	; 0x1c18
   876c2:	f2c2 0207 	movt	r2, #8199	; 0x2007
   876c6:	88d0      	ldrh	r0, [r2, #6]
   876c8:	4288      	cmp	r0, r1
   876ca:	d005      	beq.n	876d8 <udd_ctrl_in_sent+0xa4>
					|| b_shortpacket) {
   876cc:	f241 5390 	movw	r3, #5520	; 0x1590
   876d0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   876d4:	7819      	ldrb	r1, [r3, #0]
   876d6:	b361      	cbz	r1, 87732 <udd_ctrl_in_sent+0xfe>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   876d8:	f241 600c 	movw	r0, #5644	; 0x160c
   876dc:	f2c2 0007 	movt	r0, #8199	; 0x2007
   876e0:	f04f 0204 	mov.w	r2, #4
   876e4:	7002      	strb	r2, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   876e6:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   876ea:	b672      	cpsid	i
   876ec:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   876f0:	f240 2398 	movw	r3, #664	; 0x298
   876f4:	f2c2 0307 	movt	r3, #8199	; 0x2007
   876f8:	f04f 0000 	mov.w	r0, #0
   876fc:	7018      	strb	r0, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
   876fe:	f24c 1360 	movw	r3, #49504	; 0xc160
   87702:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87706:	f04f 0210 	mov.w	r2, #16
   8770a:	601a      	str	r2, [r3, #0]
	udd_enable_nak_in_interrupt(0);
   8770c:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   87710:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87714:	6002      	str	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87716:	2900      	cmp	r1, #0
   87718:	f040 80a7 	bne.w	8786a <udd_ctrl_in_sent+0x236>
		cpu_irq_enable();
   8771c:	f240 2198 	movw	r1, #664	; 0x298
   87720:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87724:	f04f 0301 	mov.w	r3, #1
   87728:	700b      	strb	r3, [r1, #0]
   8772a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8772e:	b662      	cpsie	i
   87730:	bd70      	pop	{r4, r5, r6, pc}
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   87732:	f641 4518 	movw	r5, #7192	; 0x1c18
   87736:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8773a:	696e      	ldr	r6, [r5, #20]
   8773c:	b1ce      	cbz	r6, 87772 <udd_ctrl_in_sent+0x13e>
				|| (!udd_g_ctrlreq.over_under_run())) {
   8773e:	47b0      	blx	r6
   87740:	b1b8      	cbz	r0, 87772 <udd_ctrl_in_sent+0x13e>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   87742:	f241 640e 	movw	r4, #5646	; 0x160e
   87746:	f2c2 0407 	movt	r4, #8199	; 0x2007
   8774a:	f04f 0200 	mov.w	r2, #0
   8774e:	8022      	strh	r2, [r4, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   87750:	f641 4018 	movw	r0, #7192	; 0x1c18
   87754:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87758:	8984      	ldrh	r4, [r0, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   8775a:	2c3f      	cmp	r4, #63	; 0x3f
   8775c:	d909      	bls.n	87772 <udd_ctrl_in_sent+0x13e>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
   8775e:	f241 5390 	movw	r3, #5520	; 0x1590
   87762:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87766:	f04f 0100 	mov.w	r1, #0
   8776a:	7019      	strb	r1, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   8776c:	f04f 0440 	mov.w	r4, #64	; 0x40
   87770:	e006      	b.n	87780 <udd_ctrl_in_sent+0x14c>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
   87772:	f241 5590 	movw	r5, #5520	; 0x1590
   87776:	f2c2 0507 	movt	r5, #8199	; 0x2007
   8777a:	f04f 0601 	mov.w	r6, #1
   8777e:	702e      	strb	r6, [r5, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   87780:	f641 4218 	movw	r2, #7192	; 0x1c18
   87784:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87788:	6890      	ldr	r0, [r2, #8]
   8778a:	f241 630e 	movw	r3, #5646	; 0x160e
   8778e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87792:	881e      	ldrh	r6, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87794:	f3ef 8110 	mrs	r1, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   87798:	f1d1 0501 	rsbs	r5, r1, #1
   8779c:	bf38      	it	cc
   8779e:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   877a0:	b672      	cpsid	i
   877a2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   877a6:	f240 2298 	movw	r2, #664	; 0x298
   877aa:	f2c2 0207 	movt	r2, #8199	; 0x2007
   877ae:	f04f 0300 	mov.w	r3, #0
   877b2:	7013      	strb	r3, [r2, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
   877b4:	f24c 1130 	movw	r1, #49456	; 0xc130
   877b8:	f2c4 010a 	movt	r1, #16394	; 0x400a
   877bc:	680a      	ldr	r2, [r1, #0]
   877be:	f012 0f02 	tst.w	r2, #2
   877c2:	d101      	bne.n	877c8 <udd_ctrl_in_sent+0x194>
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   877c4:	b99c      	cbnz	r4, 877ee <udd_ctrl_in_sent+0x1ba>
   877c6:	e035      	b.n	87834 <udd_ctrl_in_sent+0x200>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   877c8:	b14d      	cbz	r5, 877de <udd_ctrl_in_sent+0x1aa>
		cpu_irq_enable();
   877ca:	f240 2098 	movw	r0, #664	; 0x298
   877ce:	f2c2 0007 	movt	r0, #8199	; 0x2007
   877d2:	f04f 0201 	mov.w	r2, #1
   877d6:	7002      	strb	r2, [r0, #0]
   877d8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   877dc:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   877de:	f241 610c 	movw	r1, #5644	; 0x160c
   877e2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   877e6:	f04f 0304 	mov.w	r3, #4
   877ea:	700b      	strb	r3, [r1, #0]
		return; // Exit of IN DATA phase
   877ec:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   877ee:	1982      	adds	r2, r0, r6
		cpu_irq_restore(flags);
	}
}


static void udd_ctrl_in_sent(void)
   877f0:	f04f 0300 	mov.w	r3, #0
   877f4:	f2c2 0318 	movt	r3, #8216	; 0x2018
   877f8:	ea6f 0003 	mvn.w	r0, r3
   877fc:	1901      	adds	r1, r0, r4
   877fe:	f001 0001 	and.w	r0, r1, #1
   87802:	f102 32ff 	add.w	r2, r2, #4294967295
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
   87806:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   8780a:	f803 1b01 	strb.w	r1, [r3], #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   8780e:	b2d9      	uxtb	r1, r3
   87810:	42a1      	cmp	r1, r4
   87812:	d32b      	bcc.n	8786c <udd_ctrl_in_sent+0x238>
   87814:	e00e      	b.n	87834 <udd_ctrl_in_sent+0x200>
   87816:	f102 0001 	add.w	r0, r2, #1
		*ptr_dest++ = *ptr_src++;
   8781a:	7852      	ldrb	r2, [r2, #1]
   8781c:	4619      	mov	r1, r3
   8781e:	f801 2b01 	strb.w	r2, [r1], #1
   87822:	f100 0201 	add.w	r2, r0, #1
   87826:	7840      	ldrb	r0, [r0, #1]
   87828:	7058      	strb	r0, [r3, #1]
   8782a:	f101 0301 	add.w	r3, r1, #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   8782e:	b2d9      	uxtb	r1, r3
   87830:	42a1      	cmp	r1, r4
   87832:	d3f0      	bcc.n	87816 <udd_ctrl_in_sent+0x1e2>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   87834:	19a4      	adds	r4, r4, r6
   87836:	f241 630e 	movw	r3, #5646	; 0x160e
   8783a:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8783e:	801c      	strh	r4, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   87840:	f24c 1060 	movw	r0, #49504	; 0xc160
   87844:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87848:	f04f 0201 	mov.w	r2, #1
   8784c:	6002      	str	r2, [r0, #0]
	udd_enable_in_send_interrupt(0);
   8784e:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   87852:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87856:	600a      	str	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87858:	b13d      	cbz	r5, 8786a <udd_ctrl_in_sent+0x236>
		cpu_irq_enable();
   8785a:	f240 2398 	movw	r3, #664	; 0x298
   8785e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87862:	701a      	strb	r2, [r3, #0]
   87864:	f3bf 8f5f 	dmb	sy
   87868:	b662      	cpsie	i
   8786a:	bd70      	pop	{r4, r5, r6, pc}
   8786c:	b240      	sxtb	r0, r0
   8786e:	2800      	cmp	r0, #0
   87870:	d0d1      	beq.n	87816 <udd_ctrl_in_sent+0x1e2>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
   87872:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   87876:	f803 1b01 	strb.w	r1, [r3], #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   8787a:	b2d8      	uxtb	r0, r3
   8787c:	42a0      	cmp	r0, r4
   8787e:	d3ca      	bcc.n	87816 <udd_ctrl_in_sent+0x1e2>
   87880:	e7d8      	b.n	87834 <udd_ctrl_in_sent+0x200>
   87882:	bf00      	nop

00087884 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   87884:	b538      	push	{r3, r4, r5, lr}
   87886:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
   87888:	7d04      	ldrb	r4, [r0, #20]
   8788a:	f014 0f01 	tst.w	r4, #1
   8788e:	d013      	beq.n	878b8 <udd_ep_finish_job+0x34>
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
   87890:	7d04      	ldrb	r4, [r0, #20]
   87892:	f36f 0400 	bfc	r4, #0, #1
   87896:	7504      	strb	r4, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   87898:	6804      	ldr	r4, [r0, #0]
   8789a:	b16c      	cbz	r4, 878b8 <udd_ep_finish_job+0x34>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   8789c:	f44f 4541 	mov.w	r5, #49408	; 0xc100
   878a0:	f2c4 050a 	movt	r5, #16394	; 0x400a
   878a4:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
   878a8:	f410 7f80 	tst.w	r0, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
   878ac:	bf18      	it	ne
   878ae:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   878b2:	4608      	mov	r0, r1
   878b4:	6899      	ldr	r1, [r3, #8]
   878b6:	47a0      	blx	r4
   878b8:	bd38      	pop	{r3, r4, r5, pc}
   878ba:	bf00      	nop

000878bc <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   878bc:	b508      	push	{r3, lr}
	ep &= USB_EP_ADDR_MASK;
   878be:	f000 020f 	and.w	r2, r0, #15

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   878c2:	f102 30ff 	add.w	r0, r2, #4294967295
   878c6:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   878ca:	f241 5394 	movw	r3, #5524	; 0x1594
   878ce:	f2c2 0307 	movt	r3, #8199	; 0x2007
   878d2:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
   878d6:	f04f 0101 	mov.w	r1, #1
   878da:	f647 0385 	movw	r3, #30853	; 0x7885
   878de:	f2c0 0308 	movt	r3, #8
   878e2:	4798      	blx	r3
   878e4:	bd08      	pop	{r3, pc}
   878e6:	bf00      	nop

000878e8 <udd_ep_trans_done>:
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

#ifdef UDD_EP_DMA_SUPPORTED
static void udd_ep_trans_done(udd_ep_id_t ep)
{
   878e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   878ea:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   878ec:	f100 31ff 	add.w	r1, r0, #4294967295
   878f0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   878f4:	f241 5394 	movw	r3, #5524	; 0x1594
   878f8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   878fc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3

	if (!ptr_job->busy) {
   87900:	7d18      	ldrb	r0, [r3, #20]
   87902:	f010 0f01 	tst.w	r0, #1
   87906:	f000 80c6 	beq.w	87a96 <udd_ep_trans_done+0x1ae>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   8790a:	68dc      	ldr	r4, [r3, #12]
   8790c:	689d      	ldr	r5, [r3, #8]
   8790e:	42ac      	cmp	r4, r5
   87910:	f000 8082 	beq.w	87a18 <udd_ep_trans_done+0x130>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   87914:	1b2d      	subs	r5, r5, r4

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   87916:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   8791a:	bf92      	itee	ls
   8791c:	042e      	lslls	r6, r5, #16
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   8791e:	f44f 3580 	movhi.w	r5, #65536	; 0x10000

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
   87922:	2600      	movhi	r6, #0
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
		}
		if (Is_udd_endpoint_in(ep)) {
   87924:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   87928:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8792c:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   87930:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
   87934:	f417 7f80 	tst.w	r7, #256	; 0x100
   87938:	d011      	beq.n	8795e <udd_ep_trans_done+0x76>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   8793a:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
   8793e:	f3c7 1002 	ubfx	r0, r7, #4, #3
   87942:	f04f 0708 	mov.w	r7, #8
   87946:	fa07 f000 	lsl.w	r0, r7, r0
   8794a:	f100 30ff 	add.w	r0, r0, #4294967295
   8794e:	4205      	tst	r5, r0
   87950:	d017      	beq.n	87982 <udd_ep_trans_done+0x9a>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
   87952:	433e      	orrs	r6, r7
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   87954:	7d1f      	ldrb	r7, [r3, #20]
   87956:	f36f 0741 	bfc	r7, #1, #1
   8795a:	751f      	strb	r7, [r3, #20]
   8795c:	e011      	b.n	87982 <udd_ep_trans_done+0x9a>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   8795e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
   87962:	f3c0 27c1 	ubfx	r7, r0, #11, #2
   87966:	2f01      	cmp	r7, #1
   87968:	d109      	bne.n	8797e <udd_ep_trans_done+0x96>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   8796a:	f8dc 0000 	ldr.w	r0, [ip]
   8796e:	f3c0 1002 	ubfx	r0, r0, #4, #3
   87972:	f04f 0708 	mov.w	r7, #8
   87976:	fa07 f000 	lsl.w	r0, r7, r0
   8797a:	4285      	cmp	r5, r0
   8797c:	d801      	bhi.n	87982 <udd_ep_trans_done+0x9a>

				// Enable short packet reception
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   8797e:	f046 0614 	orr.w	r6, r6, #20
						| UOTGHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   87982:	f44f 4043 	mov.w	r0, #49920	; 0xc300
   87986:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8798a:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   8798e:	685f      	ldr	r7, [r3, #4]
   87990:	193c      	adds	r4, r7, r4
   87992:	6044      	str	r4, [r0, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87994:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   87998:	f1d7 0c01 	rsbs	ip, r7, #1
   8799c:	bf38      	it	cc
   8799e:	f04f 0c00 	movcc.w	ip, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   879a2:	b672      	cpsid	i
   879a4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   879a8:	f240 2498 	movw	r4, #664	; 0x298
   879ac:	f2c2 0407 	movt	r4, #8199	; 0x2007
   879b0:	f04f 0700 	mov.w	r7, #0
   879b4:	7027      	strb	r7, [r4, #0]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   879b6:	68c4      	ldr	r4, [r0, #12]
   879b8:	f014 0f10 	tst.w	r4, #16
   879bc:	d11d      	bne.n	879fa <udd_ep_trans_done+0x112>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   879be:	f046 0621 	orr.w	r6, r6, #33	; 0x21
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
				& UOTGHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   879c2:	6086      	str	r6, [r0, #8]
			ptr_job->buf_cnt += next_trans;
   879c4:	68da      	ldr	r2, [r3, #12]
   879c6:	1950      	adds	r0, r2, r5
   879c8:	60d8      	str	r0, [r3, #12]
			ptr_job->buf_load = next_trans;
   879ca:	611d      	str	r5, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   879cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   879d0:	fa03 f101 	lsl.w	r1, r3, r1
   879d4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   879d8:	f2c4 020a 	movt	r2, #16394	; 0x400a
   879dc:	6191      	str	r1, [r2, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   879de:	f1bc 0f00 	cmp.w	ip, #0
   879e2:	d058      	beq.n	87a96 <udd_ep_trans_done+0x1ae>
		cpu_irq_enable();
   879e4:	f240 2098 	movw	r0, #664	; 0x298
   879e8:	f2c2 0007 	movt	r0, #8199	; 0x2007
   879ec:	f04f 0301 	mov.w	r3, #1
   879f0:	7003      	strb	r3, [r0, #0]
   879f2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   879f6:	b662      	cpsie	i
   879f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   879fa:	f1bc 0f00 	cmp.w	ip, #0
   879fe:	d009      	beq.n	87a14 <udd_ep_trans_done+0x12c>
		cpu_irq_enable();
   87a00:	f240 2198 	movw	r1, #664	; 0x298
   87a04:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87a08:	f04f 0001 	mov.w	r0, #1
   87a0c:	7008      	strb	r0, [r1, #0]
   87a0e:	f3bf 8f5f 	dmb	sy
   87a12:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   87a14:	68d9      	ldr	r1, [r3, #12]
   87a16:	6099      	str	r1, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   87a18:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   87a1c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87a20:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
   87a24:	f411 7f80 	tst.w	r1, #256	; 0x100
   87a28:	d02d      	beq.n	87a86 <udd_ep_trans_done+0x19e>
		if (ptr_job->b_shortpacket) {
   87a2a:	7d18      	ldrb	r0, [r3, #20]
   87a2c:	f000 0102 	and.w	r1, r0, #2
   87a30:	b2c8      	uxtb	r0, r1
   87a32:	b340      	cbz	r0, 87a86 <udd_ep_trans_done+0x19e>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
   87a34:	f24c 1060 	movw	r0, #49504	; 0xc160
   87a38:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87a3c:	f04f 0101 	mov.w	r1, #1
   87a40:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			if (Is_udd_write_enabled(ep)) {
   87a44:	f24c 1330 	movw	r3, #49456	; 0xc130
   87a48:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87a4c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   87a50:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   87a54:	d005      	beq.n	87a62 <udd_ep_trans_done+0x17a>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
   87a56:	f24c 1390 	movw	r3, #49552	; 0xc190
   87a5a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
   87a62:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   87a66:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87a6a:	f04f 0101 	mov.w	r1, #1
   87a6e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			udd_enable_endpoint_interrupt(ep);
   87a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   87a76:	fa03 f202 	lsl.w	r2, r3, r2
   87a7a:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87a7e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87a82:	6182      	str	r2, [r0, #24]
			return;
   87a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   87a86:	4618      	mov	r0, r3
   87a88:	f04f 0100 	mov.w	r1, #0
   87a8c:	f647 0385 	movw	r3, #30853	; 0x7885
   87a90:	f2c0 0308 	movt	r3, #8
   87a94:	4798      	blx	r3
   87a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00087a98 <udd_enable>:
	return true;
}


void udd_enable(void)
{
   87a98:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87a9a:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87a9e:	b672      	cpsid	i
   87aa0:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87aa4:	f240 2398 	movw	r3, #664	; 0x298
   87aa8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87aac:	f04f 0200 	mov.w	r2, #0
   87ab0:	701a      	strb	r2, [r3, #0]
		cpu_irq_restore(flags);
		return;
	}
#else
	// SINGLE DEVICE MODE INITIALIZATION
	pmc_enable_periph_clk(ID_UOTGHS);
   87ab2:	f04f 0028 	mov.w	r0, #40	; 0x28
   87ab6:	f247 31bd 	movw	r1, #29629	; 0x73bd
   87aba:	f2c0 0108 	movt	r1, #8
   87abe:	4788      	blx	r1
	sysclk_enable_usb();
   87ac0:	f644 40c9 	movw	r0, #19657	; 0x4cc9
   87ac4:	f2c0 0008 	movt	r0, #8
   87ac8:	4780      	blx	r0
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   87aca:	f44f 4361 	mov.w	r3, #57600	; 0xe100
   87ace:	f2ce 0300 	movt	r3, #57344	; 0xe000
   87ad2:	f04f 0250 	mov.w	r2, #80	; 0x50
   87ad6:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   87ada:	f44f 7180 	mov.w	r1, #256	; 0x100
   87ade:	6059      	str	r1, [r3, #4]
	NVIC_SetPriority((IRQn_Type) ID_UOTGHS, UDD_USB_INT_LEVEL);
	NVIC_EnableIRQ((IRQn_Type) ID_UOTGHS);

	// Always authorize asynchrone USB interrupts to exit of sleep mode
	// For SAM USB wake up device except BACKUP mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   87ae0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   87ae4:	f247 4369 	movw	r3, #29801	; 0x7469
   87ae8:	f2c0 0308 	movt	r3, #8
   87aec:	4798      	blx	r3
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
#else
	// ID pin not used then force device mode
	otg_disable_id_pin();
   87aee:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87af2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87af6:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
   87afa:	f022 7180 	bic.w	r1, r2, #16777216	; 0x1000000
   87afe:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
	otg_force_device_mode();
   87b02:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   87b06:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
   87b0a:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
   87b0e:	f8d0 1800 	ldr.w	r1, [r0, #2048]	; 0x800
   87b12:	f021 7380 	bic.w	r3, r1, #16777216	; 0x1000000
   87b16:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
#endif
	// Enable USB hardware
	otg_enable_pad();
   87b1a:	f8d0 2800 	ldr.w	r2, [r0, #2048]	; 0x800
   87b1e:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
   87b22:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
	otg_enable();
   87b26:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   87b2a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
   87b2e:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
   87b32:	6801      	ldr	r1, [r0, #0]
   87b34:	f421 5380 	bic.w	r3, r1, #4096	; 0x1000
   87b38:	6003      	str	r3, [r0, #0]
# ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   87b3a:	6802      	ldr	r2, [r0, #0]
   87b3c:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
   87b40:	6001      	str	r1, [r0, #0]
	udd_high_speed_disable();
# endif
#endif // USB_DEVICE_LOW_SPEED

	// Check USB clock
	otg_unfreeze_clock();
   87b42:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
   87b46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
   87b4a:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   87b4e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87b52:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87b56:	f8d0 1804 	ldr.w	r1, [r0, #2052]	; 0x804
   87b5a:	f411 4f80 	tst.w	r1, #16384	; 0x4000
   87b5e:	d0fa      	beq.n	87b56 <udd_enable+0xbe>

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   87b60:	f241 5394 	movw	r3, #5524	; 0x1594
   87b64:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87b68:	7d1a      	ldrb	r2, [r3, #20]
		udd_ep_job[i].stall_requested = false;
   87b6a:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
   87b6e:	f36f 0082 	bfc	r0, #2, #1
   87b72:	7518      	strb	r0, [r3, #20]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   87b74:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
		udd_ep_job[i].stall_requested = false;
   87b78:	f001 02fe 	and.w	r2, r1, #254	; 0xfe
   87b7c:	f36f 0282 	bfc	r2, #2, #1
   87b80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   87b84:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
		udd_ep_job[i].stall_requested = false;
   87b88:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
   87b8c:	f36f 0182 	bfc	r1, #2, #1
   87b90:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   87b94:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
		udd_ep_job[i].stall_requested = false;
   87b98:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
   87b9c:	f36f 0082 	bfc	r0, #2, #1
   87ba0:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   87ba4:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
		udd_ep_job[i].stall_requested = false;
   87ba8:	f001 02fe 	and.w	r2, r1, #254	; 0xfe
   87bac:	f36f 0282 	bfc	r2, #2, #1
   87bb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
#endif

	otg_ack_vbus_transition();
   87bb4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87bb8:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87bbc:	f04f 0002 	mov.w	r0, #2
   87bc0:	f8c3 0808 	str.w	r0, [r3, #2056]	; 0x808
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
   87bc4:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
   87bc8:	f411 6f00 	tst.w	r1, #2048	; 0x800
   87bcc:	d005      	beq.n	87bda <udd_enable+0x142>
		otg_raise_vbus_transition();
   87bce:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   87bd2:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87bd6:	f8c2 080c 	str.w	r0, [r2, #2060]	; 0x80c
	}
	otg_enable_vbus_interrupt();
   87bda:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87bde:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87be2:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
   87be6:	f040 0102 	orr.w	r1, r0, #2
   87bea:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	otg_freeze_clock();
   87bee:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   87bf2:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   87bf6:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800

#ifndef UDD_NO_SLEEP_MGR
	if (!udd_b_sleep_initialized) {
   87bfa:	f241 538d 	movw	r3, #5517	; 0x158d
   87bfe:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87c02:	7819      	ldrb	r1, [r3, #0]
   87c04:	bb59      	cbnz	r1, 87c5e <udd_enable+0x1c6>
		udd_b_sleep_initialized = true;
   87c06:	f241 508d 	movw	r0, #5517	; 0x158d
   87c0a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87c0e:	f04f 0301 	mov.w	r3, #1
   87c12:	7003      	strb	r3, [r0, #0]
		// Initialize the sleep mode authorized for the USB suspend mode
		udd_b_idle = false;
   87c14:	f04f 0000 	mov.w	r0, #0
   87c18:	f241 5191 	movw	r1, #5521	; 0x1591
   87c1c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87c20:	7008      	strb	r0, [r1, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87c22:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87c26:	b672      	cpsid	i
   87c28:	f3bf 8f5f 	dmb	sy
   87c2c:	f240 2398 	movw	r3, #664	; 0x298
   87c30:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87c34:	7018      	strb	r0, [r3, #0]
   87c36:	f641 4010 	movw	r0, #7184	; 0x1c10
   87c3a:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87c3e:	78c1      	ldrb	r1, [r0, #3]
   87c40:	f101 0101 	add.w	r1, r1, #1
   87c44:	70c1      	strb	r1, [r0, #3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87c46:	b98a      	cbnz	r2, 87c6c <udd_enable+0x1d4>
		cpu_irq_enable();
   87c48:	f240 2398 	movw	r3, #664	; 0x298
   87c4c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87c50:	f04f 0201 	mov.w	r2, #1
   87c54:	701a      	strb	r2, [r3, #0]
   87c56:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87c5a:	b662      	cpsie	i
   87c5c:	e006      	b.n	87c6c <udd_enable+0x1d4>
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_SUSPEND);
	} else {
		udd_sleep_mode(false); // Enter idle mode
   87c5e:	f04f 0000 	mov.w	r0, #0
   87c62:	f247 4291 	movw	r2, #29841	; 0x7491
   87c66:	f2c0 0208 	movt	r2, #8
   87c6a:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87c6c:	b94c      	cbnz	r4, 87c82 <udd_enable+0x1ea>
		cpu_irq_enable();
   87c6e:	f240 2098 	movw	r0, #664	; 0x298
   87c72:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87c76:	f04f 0101 	mov.w	r1, #1
   87c7a:	7001      	strb	r1, [r0, #0]
   87c7c:	f3bf 8f5f 	dmb	sy
   87c80:	b662      	cpsie	i
   87c82:	bd10      	pop	{r4, pc}

00087c84 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   87c84:	b570      	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87c86:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87c8a:	b672      	cpsid	i
   87c8c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87c90:	f240 2398 	movw	r3, #664	; 0x298
   87c94:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87c98:	f04f 0200 	mov.w	r2, #0
   87c9c:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   87c9e:	f04f 0001 	mov.w	r0, #1
   87ca2:	f247 4191 	movw	r1, #29841	; 0x7491
   87ca6:	f2c0 0108 	movt	r1, #8
   87caa:	4788      	blx	r1
	otg_unfreeze_clock();
   87cac:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87cb0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87cb4:	f8d0 5800 	ldr.w	r5, [r0, #2048]	; 0x800
   87cb8:	f425 4680 	bic.w	r6, r5, #16384	; 0x4000
   87cbc:	f8c0 6800 	str.w	r6, [r0, #2048]	; 0x800

	// This section of clock check can be improved with a chek of
	// USB clock source via sysclk()
	// Check USB clock because the source can be a PLL
	while (!Is_otg_clock_usable());
   87cc0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   87cc4:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87cc8:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   87ccc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   87cd0:	d0fa      	beq.n	87cc8 <udd_attach+0x44>

	// Authorize attach if Vbus is present
	udd_attach_device();
   87cd2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87cd6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87cda:	6819      	ldr	r1, [r3, #0]
   87cdc:	f421 7080 	bic.w	r0, r1, #256	; 0x100
   87ce0:	6018      	str	r0, [r3, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   87ce2:	f04f 0608 	mov.w	r6, #8
   87ce6:	619e      	str	r6, [r3, #24]
	udd_enable_suspend_interrupt();
   87ce8:	f04f 0101 	mov.w	r1, #1
   87cec:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
   87cee:	f04f 0210 	mov.w	r2, #16
   87cf2:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   87cf4:	f04f 0504 	mov.w	r5, #4
   87cf8:	619d      	str	r5, [r3, #24]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   87cfa:	f04f 0002 	mov.w	r0, #2
   87cfe:	6198      	str	r0, [r3, #24]
#endif
	// Reset following interupts flag
	udd_ack_reset();
   87d00:	609e      	str	r6, [r3, #8]
	udd_ack_sof();
   87d02:	609d      	str	r5, [r3, #8]
	udd_ack_msof();
   87d04:	6098      	str	r0, [r3, #8]

	// The first suspend interrupt must be forced
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
   87d06:	60d9      	str	r1, [r3, #12]

	udd_ack_wake_up();
   87d08:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   87d0a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   87d0e:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   87d12:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87d16:	b93c      	cbnz	r4, 87d28 <udd_attach+0xa4>
		cpu_irq_enable();
   87d18:	f240 2398 	movw	r3, #664	; 0x298
   87d1c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87d20:	7019      	strb	r1, [r3, #0]
   87d22:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87d26:	b662      	cpsie	i
   87d28:	bd70      	pop	{r4, r5, r6, pc}
   87d2a:	bf00      	nop

00087d2c <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
   87d2c:	b508      	push	{r3, lr}
	otg_unfreeze_clock();
   87d2e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   87d32:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87d36:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   87d3a:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   87d3e:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800

	// Detach device from the bus
	udd_detach_device();
   87d42:	6819      	ldr	r1, [r3, #0]
   87d44:	f441 7280 	orr.w	r2, r1, #256	; 0x100
   87d48:	601a      	str	r2, [r3, #0]
	otg_freeze_clock();
   87d4a:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
   87d4e:	f440 4180 	orr.w	r1, r0, #16384	; 0x4000
   87d52:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	udd_sleep_mode(false);
   87d56:	f04f 0000 	mov.w	r0, #0
   87d5a:	f247 4391 	movw	r3, #29841	; 0x7491
   87d5e:	f2c0 0308 	movt	r3, #8
   87d62:	4798      	blx	r3
   87d64:	bd08      	pop	{r3, pc}
   87d66:	bf00      	nop

00087d68 <UOTGHS_Handler>:
void udd_interrupt(void);
void udd_interrupt(void)
#else
ISR(UDD_USB_INT_FUN)
#endif
{
   87d68:	b570      	push	{r4, r5, r6, lr}
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   87d6a:	f247 4381 	movw	r3, #29825	; 0x7481
   87d6e:	f2c0 0308 	movt	r3, #8
   87d72:	4798      	blx	r3
   87d74:	b990      	cbnz	r0, 87d9c <UOTGHS_Handler+0x34>
   87d76:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87d7a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87d7e:	6841      	ldr	r1, [r0, #4]
   87d80:	f011 0f01 	tst.w	r1, #1
   87d84:	d10a      	bne.n	87d9c <UOTGHS_Handler+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87d86:	b672      	cpsid	i
   87d88:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   87d8c:	f240 2098 	movw	r0, #664	; 0x298
   87d90:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87d94:	f04f 0200 	mov.w	r2, #0
   87d98:	7002      	strb	r2, [r0, #0]
		return;
   87d9a:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_sof()) {
   87d9c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   87da0:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87da4:	6853      	ldr	r3, [r2, #4]
   87da6:	f013 0f04 	tst.w	r3, #4
   87daa:	d016      	beq.n	87dda <UOTGHS_Handler+0x72>
		udd_ack_sof();
   87dac:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   87db0:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87db4:	f04f 0004 	mov.w	r0, #4
   87db8:	6088      	str	r0, [r1, #8]
		if (Is_udd_full_speed_mode()) {
   87dba:	f8d1 2804 	ldr.w	r2, [r1, #2052]	; 0x804
   87dbe:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   87dc2:	d104      	bne.n	87dce <UOTGHS_Handler+0x66>
			udc_sof_notify();
   87dc4:	f246 7351 	movw	r3, #26449	; 0x6751
   87dc8:	f2c0 0308 	movt	r3, #8
   87dcc:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   87dce:	f644 01c5 	movw	r1, #18629	; 0x48c5
   87dd2:	f2c0 0108 	movt	r1, #8
   87dd6:	4788      	blx	r1
#endif
		goto udd_interrupt_sof_end;
   87dd8:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_msof()) {
   87dda:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87dde:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87de2:	6841      	ldr	r1, [r0, #4]
   87de4:	f011 0f02 	tst.w	r1, #2
   87de8:	d00c      	beq.n	87e04 <UOTGHS_Handler+0x9c>
		udd_ack_msof();
   87dea:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   87dee:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87df2:	f04f 0202 	mov.w	r2, #2
   87df6:	6082      	str	r2, [r0, #8]
		udc_sof_notify();
   87df8:	f246 7351 	movw	r3, #26449	; 0x6751
   87dfc:	f2c0 0308 	movt	r3, #8
   87e00:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   87e02:	bd70      	pop	{r4, r5, r6, pc}


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0)) {
   87e04:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   87e08:	f2c4 020a 	movt	r2, #16394	; 0x400a
   87e0c:	6853      	ldr	r3, [r2, #4]
   87e0e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   87e12:	f000 8459 	beq.w	886c8 <UOTGHS_Handler+0x960>
	}

	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   87e16:	f24c 2020 	movw	r0, #49696	; 0xc220
   87e1a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87e1e:	f04f 0110 	mov.w	r1, #16
   87e22:	6001      	str	r1, [r0, #0]
	udd_disable_nak_out_interrupt(0);
   87e24:	f04f 0208 	mov.w	r2, #8
   87e28:	6002      	str	r2, [r0, #0]

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
   87e2a:	f24c 1330 	movw	r3, #49456	; 0xc130
   87e2e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87e32:	6818      	ldr	r0, [r3, #0]
   87e34:	f010 0f04 	tst.w	r0, #4
   87e38:	f000 80d9 	beq.w	87fee <UOTGHS_Handler+0x286>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   87e3c:	f241 610c 	movw	r1, #5644	; 0x160c
   87e40:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87e44:	780a      	ldrb	r2, [r1, #0]
   87e46:	b14a      	cbz	r2, 87e5c <UOTGHS_Handler+0xf4>
		// May be a hidden DATA or ZLP phase or protocol abort
		udd_ctrl_endofrequest();
   87e48:	f247 6021 	movw	r0, #30241	; 0x7621
   87e4c:	f2c0 0008 	movt	r0, #8
   87e50:	4780      	blx	r0

		// Reinitializes control endpoint management
		udd_ctrl_init();
   87e52:	f247 533d 	movw	r3, #30013	; 0x753d
   87e56:	f2c0 0308 	movt	r3, #8
   87e5a:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   87e5c:	f24c 1130 	movw	r1, #49456	; 0xc130
   87e60:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87e64:	680a      	ldr	r2, [r1, #0]
   87e66:	f3c2 500a 	ubfx	r0, r2, #20, #11
   87e6a:	2808      	cmp	r0, #8
   87e6c:	d00c      	beq.n	87e88 <UOTGHS_Handler+0x120>
		udd_ctrl_stall_data();
   87e6e:	f247 51a1 	movw	r1, #30113	; 0x75a1
   87e72:	f2c0 0108 	movt	r1, #8
   87e76:	4788      	blx	r1
		udd_ack_setup_received(0);
   87e78:	f24c 1360 	movw	r3, #49504	; 0xc160
   87e7c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87e80:	f04f 0204 	mov.w	r2, #4
   87e84:	601a      	str	r2, [r3, #0]
   87e86:	bd70      	pop	{r4, r5, r6, pc}
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   87e88:	f04f 0300 	mov.w	r3, #0
   87e8c:	f2c2 0318 	movt	r3, #8216	; 0x2018
   87e90:	7819      	ldrb	r1, [r3, #0]
   87e92:	f641 4018 	movw	r0, #7192	; 0x1c18
   87e96:	f2c2 0007 	movt	r0, #8199	; 0x2007
   87e9a:	7001      	strb	r1, [r0, #0]
   87e9c:	f04f 0201 	mov.w	r2, #1
   87ea0:	f2c2 0218 	movt	r2, #8216	; 0x2018
   87ea4:	7813      	ldrb	r3, [r2, #0]
   87ea6:	7043      	strb	r3, [r0, #1]
   87ea8:	f04f 0102 	mov.w	r1, #2
   87eac:	f2c2 0118 	movt	r1, #8216	; 0x2018
   87eb0:	780a      	ldrb	r2, [r1, #0]
   87eb2:	7082      	strb	r2, [r0, #2]
   87eb4:	f04f 0303 	mov.w	r3, #3
   87eb8:	f2c2 0318 	movt	r3, #8216	; 0x2018
   87ebc:	7819      	ldrb	r1, [r3, #0]
   87ebe:	70c1      	strb	r1, [r0, #3]
   87ec0:	f04f 0204 	mov.w	r2, #4
   87ec4:	f2c2 0218 	movt	r2, #8216	; 0x2018
   87ec8:	7813      	ldrb	r3, [r2, #0]
   87eca:	7103      	strb	r3, [r0, #4]
   87ecc:	f04f 0105 	mov.w	r1, #5
   87ed0:	f2c2 0118 	movt	r1, #8216	; 0x2018
   87ed4:	780a      	ldrb	r2, [r1, #0]
   87ed6:	7142      	strb	r2, [r0, #5]
   87ed8:	f04f 0306 	mov.w	r3, #6
   87edc:	f2c2 0318 	movt	r3, #8216	; 0x2018
   87ee0:	7819      	ldrb	r1, [r3, #0]
   87ee2:	7181      	strb	r1, [r0, #6]
   87ee4:	f04f 0207 	mov.w	r2, #7
   87ee8:	f2c2 0218 	movt	r2, #8216	; 0x2018
   87eec:	7813      	ldrb	r3, [r2, #0]
   87eee:	71c3      	strb	r3, [r0, #7]
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   87ef0:	f246 7099 	movw	r0, #26521	; 0x6799
   87ef4:	f2c0 0008 	movt	r0, #8
   87ef8:	4780      	blx	r0
   87efa:	b960      	cbnz	r0, 87f16 <UOTGHS_Handler+0x1ae>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
   87efc:	f247 52a1 	movw	r2, #30113	; 0x75a1
   87f00:	f2c0 0208 	movt	r2, #8
   87f04:	4790      	blx	r2
		udd_ack_setup_received(0);
   87f06:	f24c 1360 	movw	r3, #49504	; 0xc160
   87f0a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87f0e:	f04f 0004 	mov.w	r0, #4
   87f12:	6018      	str	r0, [r3, #0]
   87f14:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}
	udd_ack_setup_received(0);
   87f16:	f24c 1160 	movw	r1, #49504	; 0xc160
   87f1a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87f1e:	f04f 0204 	mov.w	r2, #4
   87f22:	600a      	str	r2, [r1, #0]

	if (Udd_setup_is_in()) {
   87f24:	f641 4318 	movw	r3, #7192	; 0x1c18
   87f28:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87f2c:	f993 0000 	ldrsb.w	r0, [r3]
   87f30:	2800      	cmp	r0, #0
   87f32:	da18      	bge.n	87f66 <UOTGHS_Handler+0x1fe>
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   87f34:	f04f 0000 	mov.w	r0, #0
   87f38:	f241 518e 	movw	r1, #5518	; 0x158e
   87f3c:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87f40:	8008      	strh	r0, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   87f42:	f241 620e 	movw	r2, #5646	; 0x160e
   87f46:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87f4a:	8010      	strh	r0, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   87f4c:	f241 630c 	movw	r3, #5644	; 0x160c
   87f50:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87f54:	f04f 0002 	mov.w	r0, #2
   87f58:	7018      	strb	r0, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   87f5a:	f247 6135 	movw	r1, #30261	; 0x7635
   87f5e:	f2c0 0108 	movt	r1, #8
   87f62:	4788      	blx	r1
   87f64:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
   87f66:	f641 4118 	movw	r1, #7192	; 0x1c18
   87f6a:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87f6e:	88ca      	ldrh	r2, [r1, #6]
   87f70:	b92a      	cbnz	r2, 87f7e <UOTGHS_Handler+0x216>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   87f72:	f247 53c1 	movw	r3, #30145	; 0x75c1
   87f76:	f2c0 0308 	movt	r3, #8
   87f7a:	4798      	blx	r3
   87f7c:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   87f7e:	f04f 0300 	mov.w	r3, #0
   87f82:	4618      	mov	r0, r3
   87f84:	f241 518e 	movw	r1, #5518	; 0x158e
   87f88:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87f8c:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   87f8e:	f241 620e 	movw	r2, #5646	; 0x160e
   87f92:	f2c2 0207 	movt	r2, #8199	; 0x2007
   87f96:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   87f98:	f241 630c 	movw	r3, #5644	; 0x160c
   87f9c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87fa0:	f04f 0101 	mov.w	r1, #1
   87fa4:	7019      	strb	r1, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   87fa6:	f24c 1360 	movw	r3, #49504	; 0xc160
   87faa:	f2c4 030a 	movt	r3, #16394	; 0x400a
   87fae:	f04f 0210 	mov.w	r2, #16
   87fb2:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   87fb4:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   87fb8:	b672      	cpsid	i
   87fba:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   87fbe:	f240 2398 	movw	r3, #664	; 0x298
   87fc2:	f2c2 0307 	movt	r3, #8199	; 0x2007
   87fc6:	7018      	strb	r0, [r3, #0]
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
   87fc8:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   87fcc:	f2c4 000a 	movt	r0, #16394	; 0x400a
   87fd0:	6002      	str	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   87fd2:	2900      	cmp	r1, #0
   87fd4:	f040 8471 	bne.w	888ba <UOTGHS_Handler+0xb52>
		cpu_irq_enable();
   87fd8:	f240 2198 	movw	r1, #664	; 0x298
   87fdc:	f2c2 0107 	movt	r1, #8199	; 0x2007
   87fe0:	f04f 0201 	mov.w	r2, #1
   87fe4:	700a      	strb	r2, [r1, #0]
   87fe6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   87fea:	b662      	cpsie	i
   87fec:	bd70      	pop	{r4, r5, r6, pc}
		dbg_print("stup ");
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   87fee:	f24c 1130 	movw	r1, #49456	; 0xc130
   87ff2:	f2c4 010a 	movt	r1, #16394	; 0x400a
   87ff6:	680a      	ldr	r2, [r1, #0]
   87ff8:	f012 0f01 	tst.w	r2, #1
   87ffc:	d00d      	beq.n	8801a <UOTGHS_Handler+0x2b2>
   87ffe:	f24c 13c0 	movw	r3, #49600	; 0xc1c0
   88002:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88006:	6818      	ldr	r0, [r3, #0]
   88008:	f010 0f01 	tst.w	r0, #1
   8800c:	d005      	beq.n	8801a <UOTGHS_Handler+0x2b2>
		dbg_print("in ");
		// IN packet sent
		udd_ctrl_in_sent();
   8800e:	f247 6335 	movw	r3, #30261	; 0x7635
   88012:	f2c0 0308 	movt	r3, #8
   88016:	4798      	blx	r3
   88018:	bd70      	pop	{r4, r5, r6, pc}
		return true;
	}
	if (Is_udd_out_received(0)) {
   8801a:	f24c 1130 	movw	r1, #49456	; 0xc130
   8801e:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88022:	680a      	ldr	r2, [r1, #0]
   88024:	f012 0f02 	tst.w	r2, #2
   88028:	f000 80de 	beq.w	881e8 <UOTGHS_Handler+0x480>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   8802c:	f241 600c 	movw	r0, #5644	; 0x160c
   88030:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88034:	7801      	ldrb	r1, [r0, #0]
   88036:	2901      	cmp	r1, #1
   88038:	d014      	beq.n	88064 <UOTGHS_Handler+0x2fc>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   8803a:	2902      	cmp	r1, #2
   8803c:	d001      	beq.n	88042 <UOTGHS_Handler+0x2da>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   8803e:	2904      	cmp	r1, #4
   88040:	d105      	bne.n	8804e <UOTGHS_Handler+0x2e6>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
   88042:	f247 6221 	movw	r2, #30241	; 0x7621
   88046:	f2c0 0208 	movt	r2, #8
   8804a:	4790      	blx	r2
   8804c:	e004      	b.n	88058 <UOTGHS_Handler+0x2f0>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   8804e:	f247 51a1 	movw	r1, #30113	; 0x75a1
   88052:	f2c0 0108 	movt	r1, #8
   88056:	4788      	blx	r1
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   88058:	f247 503d 	movw	r0, #30013	; 0x753d
   8805c:	f2c0 0008 	movt	r0, #8
   88060:	4780      	blx	r0
   88062:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   88064:	f24c 1430 	movw	r4, #49456	; 0xc130
   88068:	f2c4 040a 	movt	r4, #16394	; 0x400a
   8806c:	6826      	ldr	r6, [r4, #0]
   8806e:	f3c6 540a 	ubfx	r4, r6, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   88072:	f641 4318 	movw	r3, #7192	; 0x1c18
   88076:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8807a:	8998      	ldrh	r0, [r3, #12]
   8807c:	f241 620e 	movw	r2, #5646	; 0x160e
   88080:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88084:	8816      	ldrh	r6, [r2, #0]
   88086:	1931      	adds	r1, r6, r4
   88088:	4288      	cmp	r0, r1
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   8808a:	bfae      	itee	ge
   8808c:	b2a4      	uxthge	r4, r4
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8808e:	ebc6 0000 	rsblt	r0, r6, r0
   88092:	b284      	uxthlt	r4, r0
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   88094:	f641 4318 	movw	r3, #7192	; 0x1c18
   88098:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8809c:	6898      	ldr	r0, [r3, #8]
   8809e:	1982      	adds	r2, r0, r6
	for (i = 0; i < nb_data; i++) {
   880a0:	b3b4      	cbz	r4, 88110 <UOTGHS_Handler+0x3a8>
   880a2:	f04f 0300 	mov.w	r3, #0
   880a6:	f2c2 0318 	movt	r3, #8216	; 0x2018
   880aa:	ea6f 0103 	mvn.w	r1, r3
   880ae:	1908      	adds	r0, r1, r4
   880b0:	f000 0101 	and.w	r1, r0, #1
		*ptr_dest++ = *ptr_src++;
   880b4:	f813 0b01 	ldrb.w	r0, [r3], #1
   880b8:	f802 0b01 	strb.w	r0, [r2], #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   880bc:	b2d8      	uxtb	r0, r3
   880be:	42a0      	cmp	r0, r4
   880c0:	f0c0 83fc 	bcc.w	888bc <UOTGHS_Handler+0xb54>
   880c4:	e00e      	b.n	880e4 <UOTGHS_Handler+0x37c>
		*ptr_dest++ = *ptr_src++;
   880c6:	4618      	mov	r0, r3
   880c8:	f810 5b01 	ldrb.w	r5, [r0], #1
   880cc:	4611      	mov	r1, r2
   880ce:	f801 5b01 	strb.w	r5, [r1], #1
   880d2:	785d      	ldrb	r5, [r3, #1]
   880d4:	f100 0301 	add.w	r3, r0, #1
   880d8:	7055      	strb	r5, [r2, #1]
   880da:	f101 0201 	add.w	r2, r1, #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   880de:	b2d8      	uxtb	r0, r3
   880e0:	42a0      	cmp	r0, r4
   880e2:	d3f0      	bcc.n	880c6 <UOTGHS_Handler+0x35e>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   880e4:	19a6      	adds	r6, r4, r6
   880e6:	b2b6      	uxth	r6, r6
   880e8:	f241 620e 	movw	r2, #5646	; 0x160e
   880ec:	f2c2 0207 	movt	r2, #8199	; 0x2007
   880f0:	8016      	strh	r6, [r2, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   880f2:	2c40      	cmp	r4, #64	; 0x40
   880f4:	d10c      	bne.n	88110 <UOTGHS_Handler+0x3a8>
			|| (udd_g_ctrlreq.req.wLength <=
   880f6:	f641 4318 	movw	r3, #7192	; 0x1c18
   880fa:	f2c2 0307 	movt	r3, #8199	; 0x2007
   880fe:	88d9      	ldrh	r1, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
   88100:	f241 508e 	movw	r0, #5518	; 0x158e
   88104:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88108:	8802      	ldrh	r2, [r0, #0]
   8810a:	1993      	adds	r3, r2, r6
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
   8810c:	4299      	cmp	r1, r3
   8810e:	dc22      	bgt.n	88156 <UOTGHS_Handler+0x3ee>
					(udd_ctrl_prev_payload_buf_cnt +
							udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   88110:	f641 4118 	movw	r1, #7192	; 0x1c18
   88114:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88118:	818e      	strh	r6, [r1, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   8811a:	694a      	ldr	r2, [r1, #20]
   8811c:	b172      	cbz	r2, 8813c <UOTGHS_Handler+0x3d4>
			if (!udd_g_ctrlreq.over_under_run()) {
   8811e:	4790      	blx	r2
   88120:	b960      	cbnz	r0, 8813c <UOTGHS_Handler+0x3d4>
				// Stall ZLP
				udd_ctrl_stall_data();
   88122:	f247 52a1 	movw	r2, #30113	; 0x75a1
   88126:	f2c0 0208 	movt	r2, #8
   8812a:	4790      	blx	r2
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   8812c:	f24c 1060 	movw	r0, #49504	; 0xc160
   88130:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88134:	f04f 0302 	mov.w	r3, #2
   88138:	6003      	str	r3, [r0, #0]
   8813a:	bd70      	pop	{r4, r5, r6, pc}
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   8813c:	f24c 1060 	movw	r0, #49504	; 0xc160
   88140:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88144:	f04f 0302 	mov.w	r3, #2
   88148:	6003      	str	r3, [r0, #0]
		udd_ctrl_send_zlp_in();
   8814a:	f247 51c1 	movw	r1, #30145	; 0x75c1
   8814e:	f2c0 0108 	movt	r1, #8
   88152:	4788      	blx	r1
   88154:	bd70      	pop	{r4, r5, r6, pc}
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   88156:	49ae      	ldr	r1, [pc, #696]	; (88410 <UOTGHS_Handler+0x6a8>)
   88158:	8988      	ldrh	r0, [r1, #12]
   8815a:	42b0      	cmp	r0, r6
   8815c:	d121      	bne.n	881a2 <UOTGHS_Handler+0x43a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   8815e:	4aac      	ldr	r2, [pc, #688]	; (88410 <UOTGHS_Handler+0x6a8>)
   88160:	6953      	ldr	r3, [r2, #20]
   88162:	b94b      	cbnz	r3, 88178 <UOTGHS_Handler+0x410>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
   88164:	4aab      	ldr	r2, [pc, #684]	; (88414 <UOTGHS_Handler+0x6ac>)
   88166:	4790      	blx	r2
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   88168:	f24c 1060 	movw	r0, #49504	; 0xc160
   8816c:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88170:	f04f 0302 	mov.w	r3, #2
   88174:	6003      	str	r3, [r0, #0]
   88176:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   88178:	4798      	blx	r3
   8817a:	b948      	cbnz	r0, 88190 <UOTGHS_Handler+0x428>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   8817c:	48a5      	ldr	r0, [pc, #660]	; (88414 <UOTGHS_Handler+0x6ac>)
   8817e:	4780      	blx	r0
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   88180:	f24c 1360 	movw	r3, #49504	; 0xc160
   88184:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88188:	f04f 0102 	mov.w	r1, #2
   8818c:	6019      	str	r1, [r3, #0]
   8818e:	bd70      	pop	{r4, r5, r6, pc}
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   88190:	4aa1      	ldr	r2, [pc, #644]	; (88418 <UOTGHS_Handler+0x6b0>)
   88192:	4ba2      	ldr	r3, [pc, #648]	; (8841c <UOTGHS_Handler+0x6b4>)
   88194:	8818      	ldrh	r0, [r3, #0]
   88196:	8811      	ldrh	r1, [r2, #0]
   88198:	1840      	adds	r0, r0, r1
   8819a:	8010      	strh	r0, [r2, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   8819c:	f04f 0200 	mov.w	r2, #0
   881a0:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   881a2:	f24c 1360 	movw	r3, #49504	; 0xc160
   881a6:	f2c4 030a 	movt	r3, #16394	; 0x400a
   881aa:	f04f 0102 	mov.w	r1, #2
   881ae:	6019      	str	r1, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   881b0:	f04f 0210 	mov.w	r2, #16
   881b4:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   881b6:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   881ba:	b672      	cpsid	i
   881bc:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   881c0:	4b97      	ldr	r3, [pc, #604]	; (88420 <UOTGHS_Handler+0x6b8>)
   881c2:	f04f 0000 	mov.w	r0, #0
   881c6:	7018      	strb	r0, [r3, #0]
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
   881c8:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   881cc:	f2c4 030a 	movt	r3, #16394	; 0x400a
   881d0:	601a      	str	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   881d2:	2900      	cmp	r1, #0
   881d4:	f040 8371 	bne.w	888ba <UOTGHS_Handler+0xb52>
		cpu_irq_enable();
   881d8:	4991      	ldr	r1, [pc, #580]	; (88420 <UOTGHS_Handler+0x6b8>)
   881da:	f04f 0201 	mov.w	r2, #1
   881de:	700a      	strb	r2, [r1, #0]
   881e0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   881e4:	b662      	cpsie	i
   881e6:	bd70      	pop	{r4, r5, r6, pc}
		dbg_print("out ");
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
   881e8:	f24c 1330 	movw	r3, #49456	; 0xc130
   881ec:	f2c4 030a 	movt	r3, #16394	; 0x400a
   881f0:	6818      	ldr	r0, [r3, #0]
   881f2:	f010 0f08 	tst.w	r0, #8
   881f6:	d01f      	beq.n	88238 <UOTGHS_Handler+0x4d0>
		dbg_print("nako ");
		// Overflow on OUT packet
		udd_ack_nak_out(0);
   881f8:	f24c 1060 	movw	r0, #49504	; 0xc160
   881fc:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88200:	f04f 0108 	mov.w	r1, #8
   88204:	6001      	str	r1, [r0, #0]
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
   88206:	f24c 1230 	movw	r2, #49456	; 0xc130
   8820a:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8820e:	6813      	ldr	r3, [r2, #0]
   88210:	f013 0f01 	tst.w	r3, #1
   88214:	f040 8351 	bne.w	888ba <UOTGHS_Handler+0xb52>
		return; // Overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   88218:	f241 600c 	movw	r0, #5644	; 0x160c
   8821c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88220:	7801      	ldrb	r1, [r0, #0]
   88222:	2903      	cmp	r1, #3
   88224:	f040 8349 	bne.w	888ba <UOTGHS_Handler+0xb52>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   88228:	f24c 13f0 	movw	r3, #49648	; 0xc1f0
   8822c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88230:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   88234:	601a      	str	r2, [r3, #0]
   88236:	bd70      	pop	{r4, r5, r6, pc}
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
   88238:	f24c 1130 	movw	r1, #49456	; 0xc130
   8823c:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88240:	680a      	ldr	r2, [r1, #0]
   88242:	f012 0f10 	tst.w	r2, #16
   88246:	f000 823f 	beq.w	886c8 <UOTGHS_Handler+0x960>
		dbg_print("naki ");
		// Underflow on IN packet
		udd_ack_nak_in(0);
   8824a:	f24c 1360 	movw	r3, #49504	; 0xc160
   8824e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88252:	f04f 0010 	mov.w	r0, #16
   88256:	6018      	str	r0, [r3, #0]
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
   88258:	f24c 1130 	movw	r1, #49456	; 0xc130
   8825c:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88260:	680a      	ldr	r2, [r1, #0]
   88262:	f012 0f02 	tst.w	r2, #2
   88266:	f040 8328 	bne.w	888ba <UOTGHS_Handler+0xb52>
		return; // Underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   8826a:	f241 630c 	movw	r3, #5644	; 0x160c
   8826e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88272:	7818      	ldrb	r0, [r3, #0]
   88274:	2801      	cmp	r0, #1
   88276:	d105      	bne.n	88284 <UOTGHS_Handler+0x51c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   88278:	f247 53c1 	movw	r3, #30145	; 0x75c1
   8827c:	f2c0 0308 	movt	r3, #8
   88280:	4798      	blx	r3
   88282:	bd70      	pop	{r4, r5, r6, pc}
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   88284:	2804      	cmp	r0, #4
   88286:	f040 8318 	bne.w	888ba <UOTGHS_Handler+0xb52>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   8828a:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   8828e:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88292:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   88296:	600a      	str	r2, [r1, #0]
   88298:	bd70      	pop	{r4, r5, r6, pc}
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   8829a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8829e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   882a2:	685a      	ldr	r2, [r3, #4]
   882a4:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   882a8:	d03c      	beq.n	88324 <UOTGHS_Handler+0x5bc>
   882aa:	f04f 0005 	mov.w	r0, #5
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   882ae:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   882b2:	495c      	ldr	r1, [pc, #368]	; (88424 <UOTGHS_Handler+0x6bc>)
   882b4:	e019      	b.n	882ea <UOTGHS_Handler+0x582>

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   882b6:	f04f 0001 	mov.w	r0, #1
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   882ba:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   882be:	f241 5194 	movw	r1, #5524	; 0x1594
   882c2:	f2c2 0107 	movt	r1, #8199	; 0x2007
   882c6:	e010      	b.n	882ea <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   882c8:	f04f 0002 	mov.w	r0, #2
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   882cc:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   882d0:	4955      	ldr	r1, [pc, #340]	; (88428 <UOTGHS_Handler+0x6c0>)
   882d2:	e00a      	b.n	882ea <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   882d4:	f04f 0003 	mov.w	r0, #3
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   882d8:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   882dc:	4953      	ldr	r1, [pc, #332]	; (8842c <UOTGHS_Handler+0x6c4>)
   882de:	e004      	b.n	882ea <UOTGHS_Handler+0x582>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   882e0:	f04f 0004 	mov.w	r0, #4
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   882e4:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   882e8:	4951      	ldr	r1, [pc, #324]	; (88430 <UOTGHS_Handler+0x6c8>)
#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   882ea:	f44f 4243 	mov.w	r2, #49920	; 0xc300
   882ee:	f2c4 020a 	movt	r2, #16394	; 0x400a
   882f2:	eb02 1300 	add.w	r3, r2, r0, lsl #4
   882f6:	68da      	ldr	r2, [r3, #12]
   882f8:	f012 0f01 	tst.w	r2, #1
   882fc:	f040 82dd 	bne.w	888ba <UOTGHS_Handler+0xb52>
					& UOTGHS_DEVDMASTATUS_CHANN_ENB) {
				return true; // Ignore EOT_STA interrupt
			}
			dbg_print("dma%x: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   88300:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   88304:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88308:	6154      	str	r4, [r2, #20]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   8830a:	68db      	ldr	r3, [r3, #12]
					UOTGHS_DEVDMASTATUS_BUFF_COUNT_Msk)
					>> UOTGHS_DEVDMASTATUS_BUFF_COUNT_Pos;
			if (nb_remaining) {
   8830c:	0c1b      	lsrs	r3, r3, #16
   8830e:	d003      	beq.n	88318 <UOTGHS_Handler+0x5b0>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   88310:	68ca      	ldr	r2, [r1, #12]
   88312:	1ad3      	subs	r3, r2, r3
   88314:	60cb      	str	r3, [r1, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   88316:	608b      	str	r3, [r1, #8]
			}
			udd_ep_trans_done(ep);
   88318:	f647 01e9 	movw	r1, #30953	; 0x78e9
   8831c:	f2c0 0108 	movt	r1, #8
   88320:	4788      	blx	r1
   88322:	bd70      	pop	{r4, r5, r6, pc}
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88324:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88328:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8832c:	6901      	ldr	r1, [r0, #16]
   8832e:	f411 3f00 	tst.w	r1, #131072	; 0x20000
   88332:	f000 80a9 	beq.w	88488 <UOTGHS_Handler+0x720>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88336:	f24c 13d4 	movw	r3, #49620	; 0xc1d4
   8833a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8833e:	681a      	ldr	r2, [r3, #0]
   88340:	f012 0f01 	tst.w	r2, #1
   88344:	d03b      	beq.n	883be <UOTGHS_Handler+0x656>
					&& Is_udd_in_send(ep)) {
   88346:	f24c 1044 	movw	r0, #49476	; 0xc144
   8834a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8834e:	6801      	ldr	r1, [r0, #0]
   88350:	f011 0f01 	tst.w	r1, #1
   88354:	d033      	beq.n	883be <UOTGHS_Handler+0x656>
   88356:	f04f 0205 	mov.w	r2, #5
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8835a:	f04f 0314 	mov.w	r3, #20
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8835e:	4831      	ldr	r0, [pc, #196]	; (88424 <UOTGHS_Handler+0x6bc>)
   88360:	e016      	b.n	88390 <UOTGHS_Handler+0x628>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   88362:	f04f 0201 	mov.w	r2, #1
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88366:	f04f 0304 	mov.w	r3, #4
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8836a:	4832      	ldr	r0, [pc, #200]	; (88434 <UOTGHS_Handler+0x6cc>)
   8836c:	e010      	b.n	88390 <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8836e:	f04f 0202 	mov.w	r2, #2
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88372:	f04f 0308 	mov.w	r3, #8
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88376:	482c      	ldr	r0, [pc, #176]	; (88428 <UOTGHS_Handler+0x6c0>)
   88378:	e00a      	b.n	88390 <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8837a:	f04f 0203 	mov.w	r2, #3
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8837e:	f04f 030c 	mov.w	r3, #12
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88382:	482a      	ldr	r0, [pc, #168]	; (8842c <UOTGHS_Handler+0x6c4>)
   88384:	e004      	b.n	88390 <UOTGHS_Handler+0x628>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   88386:	f04f 0204 	mov.w	r2, #4
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8838a:	f04f 0310 	mov.w	r3, #16
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8838e:	4828      	ldr	r0, [pc, #160]	; (88430 <UOTGHS_Handler+0x6c8>)
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
   88390:	f24c 2120 	movw	r1, #49696	; 0xc220
   88394:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88398:	f04f 0501 	mov.w	r5, #1
   8839c:	505d      	str	r5, [r3, r1]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
   8839e:	f24c 1460 	movw	r4, #49504	; 0xc160
   883a2:	f2c4 040a 	movt	r4, #16394	; 0x400a
   883a6:	511d      	str	r5, [r3, r4]
				udd_ack_fifocon(ep);
   883a8:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   883ac:	505c      	str	r4, [r3, r1]
				udd_ep_finish_job(ptr_job, false, ep);
   883ae:	f04f 0100 	mov.w	r1, #0
   883b2:	f647 0385 	movw	r3, #30853	; 0x7885
   883b6:	f2c0 0308 	movt	r3, #8
   883ba:	4798      	blx	r3
   883bc:	bd70      	pop	{r4, r5, r6, pc}
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   883be:	f24c 13d4 	movw	r3, #49620	; 0xc1d4
   883c2:	f2c4 030a 	movt	r3, #16394	; 0x400a
   883c6:	681a      	ldr	r2, [r3, #0]
   883c8:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   883cc:	d05c      	beq.n	88488 <UOTGHS_Handler+0x720>
					&& (0 == udd_nb_busy_bank(ep))) {
   883ce:	f24c 1044 	movw	r0, #49476	; 0xc144
   883d2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   883d6:	6801      	ldr	r1, [r0, #0]
   883d8:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   883dc:	d154      	bne.n	88488 <UOTGHS_Handler+0x720>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   883de:	f04f 0314 	mov.w	r3, #20
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   883e2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   883e6:	4a0f      	ldr	r2, [pc, #60]	; (88424 <UOTGHS_Handler+0x6bc>)
   883e8:	e02b      	b.n	88442 <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   883ea:	f04f 0304 	mov.w	r3, #4
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   883ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   883f2:	4a10      	ldr	r2, [pc, #64]	; (88434 <UOTGHS_Handler+0x6cc>)
   883f4:	e025      	b.n	88442 <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   883f6:	f04f 0308 	mov.w	r3, #8
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   883fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   883fe:	4a0a      	ldr	r2, [pc, #40]	; (88428 <UOTGHS_Handler+0x6c0>)
   88400:	e01f      	b.n	88442 <UOTGHS_Handler+0x6da>
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88402:	f04f 030c 	mov.w	r3, #12
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88406:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8840a:	4a08      	ldr	r2, [pc, #32]	; (8842c <UOTGHS_Handler+0x6c4>)
   8840c:	e019      	b.n	88442 <UOTGHS_Handler+0x6da>
   8840e:	bf00      	nop
   88410:	20071c18 	.word	0x20071c18
   88414:	000875a1 	.word	0x000875a1
   88418:	2007158e 	.word	0x2007158e
   8841c:	2007160e 	.word	0x2007160e
   88420:	20070298 	.word	0x20070298
   88424:	200715f4 	.word	0x200715f4
   88428:	200715ac 	.word	0x200715ac
   8842c:	200715c4 	.word	0x200715c4
   88430:	200715dc 	.word	0x200715dc
   88434:	20071594 	.word	0x20071594
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88438:	f04f 0310 	mov.w	r3, #16
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8843c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   88440:	4abf      	ldr	r2, [pc, #764]	; (88740 <UOTGHS_Handler+0x9d8>)
			}
			if (Is_udd_bank_interrupt_enabled(ep)
					&& (0 == udd_nb_busy_bank(ep))) {
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   88442:	f24c 2020 	movw	r0, #49696	; 0xc220
   88446:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8844a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
   8844e:	501c      	str	r4, [r3, r0]
				udd_disable_endpoint_interrupt(ep);
   88450:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88454:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88458:	6141      	str	r1, [r0, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
   8845a:	7d11      	ldrb	r1, [r2, #20]
   8845c:	f36f 0182 	bfc	r1, #2, #1
   88460:	7511      	strb	r1, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   88462:	f44f 4241 	mov.w	r2, #49408	; 0xc100
   88466:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8846a:	5898      	ldr	r0, [r3, r2]
   8846c:	f420 7100 	bic.w	r1, r0, #512	; 0x200
   88470:	5099      	str	r1, [r3, r2]
				udd_enable_stall_handshake(ep);
   88472:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   88476:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8847a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   8847e:	5098      	str	r0, [r3, r2]
				udd_reset_data_toggle(ep);
   88480:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   88484:	5099      	str	r1, [r3, r2]
   88486:	bd70      	pop	{r4, r5, r6, pc}
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   88488:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8848c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88490:	685a      	ldr	r2, [r3, #4]
   88492:	f012 0f08 	tst.w	r2, #8
   88496:	d07a      	beq.n	8858e <UOTGHS_Handler+0x826>
		udd_ack_reset();
   88498:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   8849c:	f2c4 040a 	movt	r4, #16394	; 0x400a
   884a0:	f04f 0508 	mov.w	r5, #8
   884a4:	60a5      	str	r5, [r4, #8]
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   884a6:	f241 5694 	movw	r6, #5524	; 0x1594
   884aa:	f2c2 0607 	movt	r6, #8199	; 0x2007
   884ae:	4630      	mov	r0, r6
   884b0:	f04f 0101 	mov.w	r1, #1
   884b4:	460a      	mov	r2, r1
   884b6:	f647 0585 	movw	r5, #30853	; 0x7885
   884ba:	f2c0 0508 	movt	r5, #8
   884be:	47a8      	blx	r5
   884c0:	f106 0018 	add.w	r0, r6, #24
   884c4:	f04f 0101 	mov.w	r1, #1
   884c8:	f04f 0202 	mov.w	r2, #2
   884cc:	47a8      	blx	r5
   884ce:	f106 0030 	add.w	r0, r6, #48	; 0x30
   884d2:	f04f 0101 	mov.w	r1, #1
   884d6:	f04f 0203 	mov.w	r2, #3
   884da:	47a8      	blx	r5
   884dc:	f106 0048 	add.w	r0, r6, #72	; 0x48
   884e0:	f04f 0101 	mov.w	r1, #1
   884e4:	f04f 0204 	mov.w	r2, #4
   884e8:	47a8      	blx	r5
   884ea:	f106 0060 	add.w	r0, r6, #96	; 0x60
   884ee:	f04f 0101 	mov.w	r1, #1
   884f2:	f04f 0205 	mov.w	r2, #5
   884f6:	47a8      	blx	r5
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
   884f8:	f246 63ed 	movw	r3, #26349	; 0x66ed
   884fc:	f2c0 0308 	movt	r3, #8
   88500:	4798      	blx	r3
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   88502:	6822      	ldr	r2, [r4, #0]
   88504:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   88508:	6021      	str	r1, [r4, #0]
	udd_enable_address();
   8850a:	6820      	ldr	r0, [r4, #0]
   8850c:	f040 0380 	orr.w	r3, r0, #128	; 0x80
   88510:	6023      	str	r3, [r4, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   88512:	f44f 4141 	mov.w	r1, #49408	; 0xc100
   88516:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8851a:	680a      	ldr	r2, [r1, #0]
   8851c:	f422 50cb 	bic.w	r0, r2, #6496	; 0x1960
   88520:	f020 031c 	bic.w	r3, r0, #28
   88524:	f043 0230 	orr.w	r2, r3, #48	; 0x30
   88528:	600a      	str	r2, [r1, #0]
		USB_EP_TYPE_CONTROL,
		0,
		USB_DEVICE_EP_CTRL_SIZE,
		UOTGHS_DEVEPTCFG_EPBK_1_BANK);

	udd_allocate_memory(0);
   8852a:	6808      	ldr	r0, [r1, #0]
   8852c:	f040 0302 	orr.w	r3, r0, #2
   88530:	600b      	str	r3, [r1, #0]
	udd_enable_endpoint(0);
   88532:	69e1      	ldr	r1, [r4, #28]
   88534:	f041 0201 	orr.w	r2, r1, #1
   88538:	61e2      	str	r2, [r4, #28]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8853a:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8853e:	b672      	cpsid	i
   88540:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   88544:	f240 2398 	movw	r3, #664	; 0x298
   88548:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8854c:	f04f 0100 	mov.w	r1, #0
   88550:	7019      	strb	r1, [r3, #0]
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
   88552:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   88556:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8855a:	f04f 0304 	mov.w	r3, #4
   8855e:	6013      	str	r3, [r2, #0]
	udd_enable_out_received_interrupt(0);
   88560:	f04f 0102 	mov.w	r1, #2
   88564:	6011      	str	r1, [r2, #0]
	udd_enable_endpoint_interrupt(0);
   88566:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8856a:	61a2      	str	r2, [r4, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8856c:	b948      	cbnz	r0, 88582 <UOTGHS_Handler+0x81a>
		cpu_irq_enable();
   8856e:	f240 2098 	movw	r0, #664	; 0x298
   88572:	f2c2 0007 	movt	r0, #8199	; 0x2007
   88576:	f04f 0301 	mov.w	r3, #1
   8857a:	7003      	strb	r3, [r0, #0]
   8857c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   88580:	b662      	cpsie	i
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
   88582:	f247 513d 	movw	r1, #30013	; 0x753d
   88586:	f2c0 0108 	movt	r1, #8
   8858a:	4788      	blx	r1
		goto udd_interrupt_end;
   8858c:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   8858e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88592:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88596:	6901      	ldr	r1, [r0, #16]
   88598:	f011 0f01 	tst.w	r1, #1
   8859c:	d02a      	beq.n	885f4 <UOTGHS_Handler+0x88c>
   8859e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   885a2:	f2c4 030a 	movt	r3, #16394	; 0x400a
   885a6:	685a      	ldr	r2, [r3, #4]
   885a8:	f012 0f01 	tst.w	r2, #1
   885ac:	d022      	beq.n	885f4 <UOTGHS_Handler+0x88c>
		otg_unfreeze_clock();
   885ae:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   885b2:	f2c4 010a 	movt	r1, #16394	; 0x400a
   885b6:	f8d1 0800 	ldr.w	r0, [r1, #2048]	; 0x800
   885ba:	f420 4380 	bic.w	r3, r0, #16384	; 0x4000
   885be:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   885c2:	f04f 0201 	mov.w	r2, #1
   885c6:	614a      	str	r2, [r1, #20]
		udd_enable_wake_up_interrupt();
   885c8:	f04f 0010 	mov.w	r0, #16
   885cc:	6188      	str	r0, [r1, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   885ce:	f8d1 3800 	ldr.w	r3, [r1, #2048]	; 0x800
   885d2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
   885d6:	f8c1 2800 	str.w	r2, [r1, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
   885da:	f04f 0000 	mov.w	r0, #0
   885de:	f247 4191 	movw	r1, #29841	; 0x7491
   885e2:	f2c0 0108 	movt	r1, #8
   885e6:	4788      	blx	r1
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   885e8:	f644 00bd 	movw	r0, #18621	; 0x48bd
   885ec:	f2c0 0008 	movt	r0, #8
   885f0:	4780      	blx	r0
#endif
		goto udd_interrupt_end;
   885f2:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   885f4:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   885f8:	f2c4 000a 	movt	r0, #16394	; 0x400a
   885fc:	6901      	ldr	r1, [r0, #16]
   885fe:	f011 0f10 	tst.w	r1, #16
   88602:	d034      	beq.n	8866e <UOTGHS_Handler+0x906>
   88604:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88608:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8860c:	685a      	ldr	r2, [r3, #4]
   8860e:	f012 0f10 	tst.w	r2, #16
   88612:	d02c      	beq.n	8866e <UOTGHS_Handler+0x906>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
   88614:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   88618:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8861c:	f8d1 2800 	ldr.w	r2, [r1, #2048]	; 0x800
   88620:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   88624:	f8c1 0800 	str.w	r0, [r1, #2048]	; 0x800
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   88628:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8862c:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88630:	e003      	b.n	8863a <UOTGHS_Handler+0x8d2>
			if (Is_udd_suspend()) {
   88632:	685a      	ldr	r2, [r3, #4]
   88634:	f012 0f01 	tst.w	r2, #1
   88638:	d104      	bne.n	88644 <UOTGHS_Handler+0x8dc>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   8863a:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
   8863e:	f411 4f80 	tst.w	r1, #16384	; 0x4000
   88642:	d0f6      	beq.n	88632 <UOTGHS_Handler+0x8ca>
			if (Is_udd_suspend()) {
				break; // In case of USB state change in HS
			}
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
   88644:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   88648:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8864c:	f04f 0010 	mov.w	r0, #16
   88650:	6148      	str	r0, [r1, #20]
		udd_enable_suspend_interrupt();
   88652:	f04f 0001 	mov.w	r0, #1
   88656:	6188      	str	r0, [r1, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
   88658:	f247 4391 	movw	r3, #29841	; 0x7491
   8865c:	f2c0 0308 	movt	r3, #8
   88660:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   88662:	f644 02c1 	movw	r2, #18625	; 0x48c1
   88666:	f2c0 0208 	movt	r2, #8
   8866a:	4790      	blx	r2
#endif
		goto udd_interrupt_end;
   8866c:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (Is_otg_vbus_transition()) {
   8866e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88672:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88676:	f8d0 1804 	ldr.w	r1, [r0, #2052]	; 0x804
   8867a:	f011 0f02 	tst.w	r1, #2
   8867e:	f000 811c 	beq.w	888ba <UOTGHS_Handler+0xb52>
		dbg_print("VBus ");
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
   88682:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88686:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8868a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8868e:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
   88692:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
		otg_ack_vbus_transition();
   88696:	f04f 0102 	mov.w	r1, #2
   8869a:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
		otg_freeze_clock();
   8869e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   886a2:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   886a6:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
   886aa:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   886ae:	f413 6f00 	tst.w	r3, #2048	; 0x800
			udd_attach();
   886b2:	bf19      	ittee	ne
   886b4:	f647 4385 	movwne	r3, #31877	; 0x7c85
   886b8:	f2c0 0308 	movtne	r3, #8
		} else {
			udd_detach();
   886bc:	f647 532d 	movweq	r3, #32045	; 0x7d2d
   886c0:	f2c0 0308 	movteq	r3, #8
   886c4:	4798      	blx	r3
   886c6:	bd70      	pop	{r4, r5, r6, pc}
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   886c8:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   886cc:	f2c4 000a 	movt	r0, #16394	; 0x400a
   886d0:	6901      	ldr	r1, [r0, #16]
   886d2:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
   886d6:	d008      	beq.n	886ea <UOTGHS_Handler+0x982>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   886d8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   886dc:	f2c4 030a 	movt	r3, #16394	; 0x400a
   886e0:	685a      	ldr	r2, [r3, #4]
   886e2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
   886e6:	f47f ade6 	bne.w	882b6 <UOTGHS_Handler+0x54e>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   886ea:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   886ee:	f2c4 000a 	movt	r0, #16394	; 0x400a
   886f2:	6901      	ldr	r1, [r0, #16]
   886f4:	f411 5f00 	tst.w	r1, #8192	; 0x2000
   886f8:	d024      	beq.n	88744 <UOTGHS_Handler+0x9dc>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   886fa:	f24c 13c4 	movw	r3, #49604	; 0xc1c4
   886fe:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88702:	681a      	ldr	r2, [r3, #0]
   88704:	f012 0f01 	tst.w	r2, #1
   88708:	d110      	bne.n	8872c <UOTGHS_Handler+0x9c4>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   8870a:	f24c 13c4 	movw	r3, #49604	; 0xc1c4
   8870e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88712:	681a      	ldr	r2, [r3, #0]
   88714:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   88718:	d014      	beq.n	88744 <UOTGHS_Handler+0x9dc>
					&& (0 == udd_nb_busy_bank(ep))) {
   8871a:	f24c 1034 	movw	r0, #49460	; 0xc134
   8871e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88722:	6801      	ldr	r1, [r0, #0]
   88724:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   88728:	d10c      	bne.n	88744 <UOTGHS_Handler+0x9dc>
   8872a:	e65e      	b.n	883ea <UOTGHS_Handler+0x682>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   8872c:	f24c 1034 	movw	r0, #49460	; 0xc134
   88730:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88734:	6801      	ldr	r1, [r0, #0]
   88736:	f011 0f01 	tst.w	r1, #1
   8873a:	d0e6      	beq.n	8870a <UOTGHS_Handler+0x9a2>
   8873c:	e611      	b.n	88362 <UOTGHS_Handler+0x5fa>
   8873e:	bf00      	nop
   88740:	200715dc 	.word	0x200715dc
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88744:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88748:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8874c:	691a      	ldr	r2, [r3, #16]
   8874e:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
   88752:	d008      	beq.n	88766 <UOTGHS_Handler+0x9fe>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   88754:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88758:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8875c:	6841      	ldr	r1, [r0, #4]
   8875e:	f011 6f80 	tst.w	r1, #67108864	; 0x4000000
   88762:	f47f adb1 	bne.w	882c8 <UOTGHS_Handler+0x560>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88766:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8876a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8876e:	691a      	ldr	r2, [r3, #16]
   88770:	f412 4f80 	tst.w	r2, #16384	; 0x4000
   88774:	d021      	beq.n	887ba <UOTGHS_Handler+0xa52>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88776:	f24c 10c8 	movw	r0, #49608	; 0xc1c8
   8877a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8877e:	6801      	ldr	r1, [r0, #0]
   88780:	f011 0f01 	tst.w	r1, #1
   88784:	d110      	bne.n	887a8 <UOTGHS_Handler+0xa40>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   88786:	f24c 10c8 	movw	r0, #49608	; 0xc1c8
   8878a:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8878e:	6801      	ldr	r1, [r0, #0]
   88790:	f411 5f80 	tst.w	r1, #4096	; 0x1000
   88794:	d011      	beq.n	887ba <UOTGHS_Handler+0xa52>
					&& (0 == udd_nb_busy_bank(ep))) {
   88796:	f24c 1338 	movw	r3, #49464	; 0xc138
   8879a:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8879e:	681a      	ldr	r2, [r3, #0]
   887a0:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   887a4:	d109      	bne.n	887ba <UOTGHS_Handler+0xa52>
   887a6:	e626      	b.n	883f6 <UOTGHS_Handler+0x68e>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   887a8:	f24c 1338 	movw	r3, #49464	; 0xc138
   887ac:	f2c4 030a 	movt	r3, #16394	; 0x400a
   887b0:	681a      	ldr	r2, [r3, #0]
   887b2:	f012 0f01 	tst.w	r2, #1
   887b6:	d0e6      	beq.n	88786 <UOTGHS_Handler+0xa1e>
   887b8:	e5d9      	b.n	8836e <UOTGHS_Handler+0x606>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   887ba:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   887be:	f2c4 000a 	movt	r0, #16394	; 0x400a
   887c2:	6901      	ldr	r1, [r0, #16]
   887c4:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
   887c8:	d008      	beq.n	887dc <UOTGHS_Handler+0xa74>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   887ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   887ce:	f2c4 030a 	movt	r3, #16394	; 0x400a
   887d2:	685a      	ldr	r2, [r3, #4]
   887d4:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
   887d8:	f47f ad7c 	bne.w	882d4 <UOTGHS_Handler+0x56c>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   887dc:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   887e0:	f2c4 000a 	movt	r0, #16394	; 0x400a
   887e4:	6901      	ldr	r1, [r0, #16]
   887e6:	f411 4f00 	tst.w	r1, #32768	; 0x8000
   887ea:	d021      	beq.n	88830 <UOTGHS_Handler+0xac8>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   887ec:	f24c 13cc 	movw	r3, #49612	; 0xc1cc
   887f0:	f2c4 030a 	movt	r3, #16394	; 0x400a
   887f4:	681a      	ldr	r2, [r3, #0]
   887f6:	f012 0f01 	tst.w	r2, #1
   887fa:	d110      	bne.n	8881e <UOTGHS_Handler+0xab6>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   887fc:	f24c 13cc 	movw	r3, #49612	; 0xc1cc
   88800:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88804:	681a      	ldr	r2, [r3, #0]
   88806:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   8880a:	d011      	beq.n	88830 <UOTGHS_Handler+0xac8>
					&& (0 == udd_nb_busy_bank(ep))) {
   8880c:	f24c 103c 	movw	r0, #49468	; 0xc13c
   88810:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88814:	6801      	ldr	r1, [r0, #0]
   88816:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   8881a:	d109      	bne.n	88830 <UOTGHS_Handler+0xac8>
   8881c:	e5f1      	b.n	88402 <UOTGHS_Handler+0x69a>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   8881e:	f24c 103c 	movw	r0, #49468	; 0xc13c
   88822:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88826:	6801      	ldr	r1, [r0, #0]
   88828:	f011 0f01 	tst.w	r1, #1
   8882c:	d0e6      	beq.n	887fc <UOTGHS_Handler+0xa94>
   8882e:	e5a4      	b.n	8837a <UOTGHS_Handler+0x612>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   88830:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88834:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88838:	691a      	ldr	r2, [r3, #16]
   8883a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
   8883e:	d008      	beq.n	88852 <UOTGHS_Handler+0xaea>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   88840:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   88844:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88848:	6841      	ldr	r1, [r0, #4]
   8884a:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
   8884e:	f47f ad47 	bne.w	882e0 <UOTGHS_Handler+0x578>
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   88852:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88856:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8885a:	691a      	ldr	r2, [r3, #16]
   8885c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   88860:	d021      	beq.n	888a6 <UOTGHS_Handler+0xb3e>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   88862:	f24c 10d0 	movw	r0, #49616	; 0xc1d0
   88866:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8886a:	6801      	ldr	r1, [r0, #0]
   8886c:	f011 0f01 	tst.w	r1, #1
   88870:	d110      	bne.n	88894 <UOTGHS_Handler+0xb2c>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   88872:	f24c 10d0 	movw	r0, #49616	; 0xc1d0
   88876:	f2c4 000a 	movt	r0, #16394	; 0x400a
   8887a:	6801      	ldr	r1, [r0, #0]
   8887c:	f411 5f80 	tst.w	r1, #4096	; 0x1000
   88880:	d011      	beq.n	888a6 <UOTGHS_Handler+0xb3e>
					&& (0 == udd_nb_busy_bank(ep))) {
   88882:	f24c 1340 	movw	r3, #49472	; 0xc140
   88886:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8888a:	681a      	ldr	r2, [r3, #0]
   8888c:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   88890:	d109      	bne.n	888a6 <UOTGHS_Handler+0xb3e>
   88892:	e5d1      	b.n	88438 <UOTGHS_Handler+0x6d0>
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
   88894:	f24c 1340 	movw	r3, #49472	; 0xc140
   88898:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8889c:	681a      	ldr	r2, [r3, #0]
   8889e:	f012 0f01 	tst.w	r2, #1
   888a2:	d0e6      	beq.n	88872 <UOTGHS_Handler+0xb0a>
   888a4:	e56f      	b.n	88386 <UOTGHS_Handler+0x61e>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   888a6:	f44f 4040 	mov.w	r0, #49152	; 0xc000
   888aa:	f2c4 000a 	movt	r0, #16394	; 0x400a
   888ae:	6901      	ldr	r1, [r0, #16]
   888b0:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
   888b4:	f47f acf1 	bne.w	8829a <UOTGHS_Handler+0x532>
   888b8:	e534      	b.n	88324 <UOTGHS_Handler+0x5bc>
   888ba:	bd70      	pop	{r4, r5, r6, pc}
   888bc:	b249      	sxtb	r1, r1
   888be:	2900      	cmp	r1, #0
   888c0:	f43f ac01 	beq.w	880c6 <UOTGHS_Handler+0x35e>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
   888c4:	f813 0b01 	ldrb.w	r0, [r3], #1
   888c8:	f802 0b01 	strb.w	r0, [r2], #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   888cc:	b2d9      	uxtb	r1, r3
   888ce:	42a1      	cmp	r1, r4
   888d0:	f4ff abf9 	bcc.w	880c6 <UOTGHS_Handler+0x35e>
   888d4:	e406      	b.n	880e4 <UOTGHS_Handler+0x37c>
   888d6:	bf00      	nop

000888d8 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   888d8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   888dc:	f2c4 030a 	movt	r3, #16394	; 0x400a
   888e0:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
#else
	return false;
#endif
}
   888e4:	f410 5040 	ands.w	r0, r0, #12288	; 0x3000
   888e8:	bf18      	it	ne
   888ea:	2001      	movne	r0, #1
   888ec:	4770      	bx	lr
   888ee:	bf00      	nop

000888f0 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
   888f0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   888f4:	f2c4 030a 	movt	r3, #16394	; 0x400a
   888f8:	681a      	ldr	r2, [r3, #0]
   888fa:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   888fe:	6019      	str	r1, [r3, #0]
	udd_configure_address(address);
   88900:	681a      	ldr	r2, [r3, #0]
   88902:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   88906:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   8890a:	ea40 0201 	orr.w	r2, r0, r1
   8890e:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   88910:	6818      	ldr	r0, [r3, #0]
   88912:	f040 0180 	orr.w	r1, r0, #128	; 0x80
   88916:	6019      	str	r1, [r3, #0]
   88918:	4770      	bx	lr
   8891a:	bf00      	nop

0008891c <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
   8891c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88920:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88924:	6818      	ldr	r0, [r3, #0]
}
   88926:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   8892a:	4770      	bx	lr

0008892c <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
   8892c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88930:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88934:	6a18      	ldr	r0, [r3, #32]
}
   88936:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   8893a:	4770      	bx	lr

0008893c <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
   8893c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88940:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88944:	6a18      	ldr	r0, [r3, #32]
}
   88946:	ea4f 4180 	mov.w	r1, r0, lsl #18
   8894a:	ea4f 4091 	mov.w	r0, r1, lsr #18
   8894e:	4770      	bx	lr

00088950 <udd_set_setup_payload>:
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
	udd_g_ctrlreq.payload = payload;
   88950:	f641 4318 	movw	r3, #7192	; 0x1c18
   88954:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88958:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   8895a:	8199      	strh	r1, [r3, #12]
   8895c:	4770      	bx	lr
   8895e:	bf00      	nop

00088960 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
   88960:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   88962:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   88966:	2c05      	cmp	r4, #5
   88968:	d82a      	bhi.n	889c0 <udd_ep_free+0x60>
		return;
	}
	udd_disable_endpoint(ep_index);
   8896a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   8896e:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88972:	69d9      	ldr	r1, [r3, #28]
   88974:	f04f 0201 	mov.w	r2, #1
   88978:	fa02 f204 	lsl.w	r2, r2, r4
   8897c:	ea21 0102 	bic.w	r1, r1, r2
   88980:	61d9      	str	r1, [r3, #28]
	udd_unallocate_memory(ep_index);
   88982:	f44f 4341 	mov.w	r3, #49408	; 0xc100
   88986:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8898a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   8898e:	f022 0102 	bic.w	r1, r2, #2
   88992:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	udd_ep_abort_job(ep);
   88996:	f647 03bd 	movw	r3, #30909	; 0x78bd
   8899a:	f2c0 0308 	movt	r3, #8
   8899e:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   889a0:	f104 34ff 	add.w	r4, r4, #4294967295
   889a4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   889a8:	f241 5294 	movw	r2, #5524	; 0x1594
   889ac:	f2c2 0207 	movt	r2, #8199	; 0x2007
   889b0:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
   889b4:	7d21      	ldrb	r1, [r4, #20]
   889b6:	f36f 0182 	bfc	r1, #2, #1
   889ba:	7521      	strb	r1, [r4, #20]
   889bc:	f104 0410 	add.w	r4, r4, #16
   889c0:	bd10      	pop	{r4, pc}
   889c2:	bf00      	nop

000889c4 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	return Is_udd_endpoint_stall_requested(ep_index);
   889c4:	f000 000f 	and.w	r0, r0, #15
   889c8:	f24c 13c0 	movw	r3, #49600	; 0xc1c0
   889cc:	f2c4 030a 	movt	r3, #16394	; 0x400a
   889d0:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
}
   889d4:	f3c1 40c0 	ubfx	r0, r1, #19, #1
   889d8:	4770      	bx	lr
   889da:	bf00      	nop

000889dc <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   889dc:	b430      	push	{r4, r5}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   889de:	f000 030f 	and.w	r3, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
   889e2:	2b05      	cmp	r3, #5
   889e4:	d87a      	bhi.n	88adc <udd_ep_set_halt+0x100>
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   889e6:	f24c 12c0 	movw	r2, #49600	; 0xc1c0
   889ea:	f2c4 020a 	movt	r2, #16394	; 0x400a
   889ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   889f2:	f411 2f00 	tst.w	r1, #524288	; 0x80000
   889f6:	d174      	bne.n	88ae2 <udd_ep_set_halt+0x106>


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   889f8:	f103 34ff 	add.w	r4, r3, #4294967295
   889fc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   88a00:	f241 5194 	movw	r1, #5524	; 0x1594
   88a04:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88a08:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   88a0c:	7d11      	ldrb	r1, [r2, #20]
   88a0e:	f001 0404 	and.w	r4, r1, #4
   88a12:	b2e4      	uxtb	r4, r4
   88a14:	2c00      	cmp	r4, #0
   88a16:	d167      	bne.n	88ae8 <udd_ep_set_halt+0x10c>
		return true; // Already STALL
	}

	if (ptr_job->busy == true) {
   88a18:	f011 0f01 	tst.w	r1, #1
   88a1c:	d167      	bne.n	88aee <udd_ep_set_halt+0x112>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   88a1e:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   88a22:	f1d5 0501 	rsbs	r5, r5, #1
   88a26:	bf38      	it	cc
   88a28:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   88a2a:	b672      	cpsid	i
   88a2c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   88a30:	f240 2198 	movw	r1, #664	; 0x298
   88a34:	f2c2 0107 	movt	r1, #8199	; 0x2007
   88a38:	700c      	strb	r4, [r1, #0]
		return false; // Job on going, stall impossible
	}

	flags = cpu_irq_save();
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   88a3a:	f010 0f80 	tst.w	r0, #128	; 0x80
   88a3e:	d027      	beq.n	88a90 <udd_ep_set_halt+0xb4>
   88a40:	f24c 1030 	movw	r0, #49456	; 0xc130
   88a44:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88a48:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   88a4c:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   88a50:	d01e      	beq.n	88a90 <udd_ep_set_halt+0xb4>
		// Delay the stall after the end of IN transfer on USB line
		ptr_job->stall_requested = true;
   88a52:	7d10      	ldrb	r0, [r2, #20]
   88a54:	f040 0104 	orr.w	r1, r0, #4
   88a58:	7511      	strb	r1, [r2, #20]
#ifdef UDD_EP_FIFO_SUPPORTED
		udd_disable_in_send_interrupt(ep_index);
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
   88a5a:	f24c 10f0 	movw	r0, #49648	; 0xc1f0
   88a5e:	f2c4 000a 	movt	r0, #16394	; 0x400a
   88a62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   88a66:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
   88a6a:	fa02 f303 	lsl.w	r3, r2, r3
   88a6e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
   88a72:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88a76:	618b      	str	r3, [r1, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88a78:	b3e5      	cbz	r5, 88af4 <udd_ep_set_halt+0x118>
		cpu_irq_enable();
   88a7a:	f04f 0001 	mov.w	r0, #1
   88a7e:	f240 2298 	movw	r2, #664	; 0x298
   88a82:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88a86:	7010      	strb	r0, [r2, #0]
   88a88:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   88a8c:	b662      	cpsie	i
   88a8e:	e036      	b.n	88afe <udd_ep_set_halt+0x122>
		cpu_irq_restore(flags);
		return true;
	}
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   88a90:	f44f 4241 	mov.w	r2, #49408	; 0xc100
   88a94:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88a98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   88a9c:	f420 7100 	bic.w	r1, r0, #512	; 0x200
   88aa0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_ack_stall(ep_index);
   88aa4:	f24c 1260 	movw	r2, #49504	; 0xc160
   88aa8:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88aac:	f04f 0040 	mov.w	r0, #64	; 0x40
   88ab0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   88ab4:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   88ab8:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88abc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   88ac0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88ac4:	b1cd      	cbz	r5, 88afa <udd_ep_set_halt+0x11e>
		cpu_irq_enable();
   88ac6:	f04f 0001 	mov.w	r0, #1
   88aca:	f240 2398 	movw	r3, #664	; 0x298
   88ace:	f2c2 0307 	movt	r3, #8199	; 0x2007
   88ad2:	7018      	strb	r0, [r3, #0]
   88ad4:	f3bf 8f5f 	dmb	sy
   88ad8:	b662      	cpsie	i
   88ada:	e010      	b.n	88afe <udd_ep_set_halt+0x122>
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
   88adc:	f04f 0000 	mov.w	r0, #0
   88ae0:	e00d      	b.n	88afe <udd_ep_set_halt+0x122>
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
   88ae2:	f04f 0001 	mov.w	r0, #1
   88ae6:	e00a      	b.n	88afe <udd_ep_set_halt+0x122>
   88ae8:	f04f 0001 	mov.w	r0, #1
   88aec:	e007      	b.n	88afe <udd_ep_set_halt+0x122>
	}

	if (ptr_job->busy == true) {
		return false; // Job on going, stall impossible
   88aee:	f04f 0000 	mov.w	r0, #0
   88af2:	e004      	b.n	88afe <udd_ep_set_halt+0x122>
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
   88af4:	f04f 0001 	mov.w	r0, #1
   88af8:	e001      	b.n	88afe <udd_ep_set_halt+0x122>
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
	udd_ack_stall(ep_index);
	udd_enable_stall_handshake(ep_index);
	cpu_irq_restore(flags);
	return true;
   88afa:	f04f 0001 	mov.w	r0, #1
}
   88afe:	bc30      	pop	{r4, r5}
   88b00:	4770      	bx	lr
   88b02:	bf00      	nop

00088b04 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   88b04:	b508      	push	{r3, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   88b06:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
   88b0a:	2805      	cmp	r0, #5
   88b0c:	d85f      	bhi.n	88bce <udd_ep_clear_halt+0xca>


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   88b0e:	f100 33ff 	add.w	r3, r0, #4294967295
   88b12:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   88b16:	f241 5294 	movw	r2, #5524	; 0x1594
   88b1a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   88b1e:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;

	if (ptr_job->stall_requested) {
   88b22:	7d19      	ldrb	r1, [r3, #20]
   88b24:	f001 0204 	and.w	r2, r1, #4
   88b28:	b2d1      	uxtb	r1, r2
   88b2a:	2900      	cmp	r1, #0
   88b2c:	d055      	beq.n	88bda <udd_ep_clear_halt+0xd6>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
   88b2e:	7d1a      	ldrb	r2, [r3, #20]
   88b30:	f36f 0282 	bfc	r2, #2, #1
   88b34:	751a      	strb	r2, [r3, #20]
		udd_disable_bank_interrupt(ep_index);
   88b36:	f24c 2120 	movw	r1, #49696	; 0xc220
   88b3a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88b3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   88b42:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
   88b46:	fa02 f100 	lsl.w	r1, r2, r0
   88b4a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   88b4e:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88b52:	6151      	str	r1, [r2, #20]
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   88b54:	ea4f 0280 	mov.w	r2, r0, lsl #2
   88b58:	f24c 11c0 	movw	r1, #49600	; 0xc1c0
   88b5c:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88b60:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   88b64:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   88b68:	d024      	beq.n	88bb4 <udd_ep_clear_halt+0xb0>
		if (Is_udd_stall(ep_index)) {
   88b6a:	f24c 1130 	movw	r1, #49456	; 0xc130
   88b6e:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88b72:	5850      	ldr	r0, [r2, r1]
   88b74:	f010 0f40 	tst.w	r0, #64	; 0x40
   88b78:	d00d      	beq.n	88b96 <udd_ep_clear_halt+0x92>
			udd_ack_stall(ep_index);
   88b7a:	f24c 1160 	movw	r1, #49504	; 0xc160
   88b7e:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88b82:	f04f 0040 	mov.w	r0, #64	; 0x40
   88b86:	5050      	str	r0, [r2, r1]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep_index);
   88b88:	f24c 11f0 	movw	r1, #49648	; 0xc1f0
   88b8c:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88b90:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   88b94:	5050      	str	r0, [r2, r1]
		}
		// Disable stall
		udd_disable_stall_handshake(ep_index);
   88b96:	f24c 2120 	movw	r1, #49696	; 0xc220
   88b9a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88b9e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   88ba2:	5050      	str	r0, [r2, r1]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   88ba4:	f44f 4141 	mov.w	r1, #49408	; 0xc100
   88ba8:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88bac:	5850      	ldr	r0, [r2, r1]
   88bae:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   88bb2:	5050      	str	r0, [r2, r1]
		b_stall_cleared = true;
	}
	if (b_stall_cleared) {
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   88bb4:	7d1a      	ldrb	r2, [r3, #20]
   88bb6:	f012 0f01 	tst.w	r2, #1
   88bba:	d00b      	beq.n	88bd4 <udd_ep_clear_halt+0xd0>
			ptr_job->busy = false;
   88bbc:	7d19      	ldrb	r1, [r3, #20]
   88bbe:	f36f 0100 	bfc	r1, #0, #1
   88bc2:	7519      	strb	r1, [r3, #20]
			ptr_job->call_nohalt();
   88bc4:	681b      	ldr	r3, [r3, #0]
   88bc6:	4798      	blx	r3
		}
	}
	return true;
   88bc8:	f04f 0001 	mov.w	r0, #1
   88bcc:	bd08      	pop	{r3, pc}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;
   88bce:	f04f 0000 	mov.w	r0, #0
   88bd2:	bd08      	pop	{r3, pc}
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   88bd4:	f04f 0001 	mov.w	r0, #1
   88bd8:	bd08      	pop	{r3, pc}
		ptr_job->stall_requested = false;
		udd_disable_bank_interrupt(ep_index);
		udd_disable_endpoint_interrupt(ep_index);
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   88bda:	ea4f 0280 	mov.w	r2, r0, lsl #2
   88bde:	f24c 11c0 	movw	r1, #49600	; 0xc1c0
   88be2:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88be6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   88bea:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   88bee:	d1bc      	bne.n	88b6a <udd_ep_clear_halt+0x66>
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   88bf0:	f04f 0001 	mov.w	r0, #1
}
   88bf4:	bd08      	pop	{r3, pc}
   88bf6:	bf00      	nop

00088bf8 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   88bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
#endif
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   88bfa:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   88bfe:	2805      	cmp	r0, #5
   88c00:	d86c      	bhi.n	88cdc <udd_ep_run+0xe4>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
   88c02:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   88c06:	f2c4 040a 	movt	r4, #16394	; 0x400a
   88c0a:	69e4      	ldr	r4, [r4, #28]
   88c0c:	f04f 0501 	mov.w	r5, #1
   88c10:	fa05 f500 	lsl.w	r5, r5, r0
   88c14:	4225      	tst	r5, r4
   88c16:	d064      	beq.n	88ce2 <udd_ep_run+0xea>
			|| Is_udd_endpoint_stall_requested(ep)
   88c18:	f24c 14c0 	movw	r4, #49600	; 0xc1c0
   88c1c:	f2c4 040a 	movt	r4, #16394	; 0x400a
   88c20:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   88c24:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   88c28:	d15e      	bne.n	88ce8 <udd_ep_run+0xf0>
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   88c2a:	f100 35ff 	add.w	r5, r0, #4294967295
   88c2e:	eb05 0645 	add.w	r6, r5, r5, lsl #1
   88c32:	f241 5494 	movw	r4, #5524	; 0x1594
   88c36:	f2c2 0407 	movt	r4, #8199	; 0x2007
   88c3a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
   88c3e:	7d25      	ldrb	r5, [r4, #20]
   88c40:	f005 0604 	and.w	r6, r5, #4
   88c44:	b2f6      	uxtb	r6, r6
   88c46:	2e00      	cmp	r6, #0
   88c48:	d151      	bne.n	88cee <udd_ep_run+0xf6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   88c4a:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   88c4e:	f1d7 0601 	rsbs	r6, r7, #1
   88c52:	bf38      	it	cc
   88c54:	2600      	movcc	r6, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   88c56:	b672      	cpsid	i
   88c58:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   88c5c:	f240 2798 	movw	r7, #664	; 0x298
   88c60:	f2c2 0707 	movt	r7, #8199	; 0x2007
   88c64:	f04f 0c00 	mov.w	ip, #0
   88c68:	f887 c000 	strb.w	ip, [r7]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
   88c6c:	f015 0f01 	tst.w	r5, #1
   88c70:	d009      	beq.n	88c86 <udd_ep_run+0x8e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88c72:	2e00      	cmp	r6, #0
   88c74:	d03e      	beq.n	88cf4 <udd_ep_run+0xfc>
		cpu_irq_enable();
   88c76:	f04f 0301 	mov.w	r3, #1
   88c7a:	703b      	strb	r3, [r7, #0]
   88c7c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   88c80:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
   88c82:	4660      	mov	r0, ip
   88c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	ptr_job->busy = true;
   88c86:	7d25      	ldrb	r5, [r4, #20]
   88c88:	f045 0501 	orr.w	r5, r5, #1
   88c8c:	7525      	strb	r5, [r4, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   88c8e:	b14e      	cbz	r6, 88ca4 <udd_ep_run+0xac>
		cpu_irq_enable();
   88c90:	f240 2598 	movw	r5, #664	; 0x298
   88c94:	f2c2 0507 	movt	r5, #8199	; 0x2007
   88c98:	f04f 0601 	mov.w	r6, #1
   88c9c:	702e      	strb	r6, [r5, #0]
   88c9e:	f3bf 8f5f 	dmb	sy
   88ca2:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   88ca4:	6062      	str	r2, [r4, #4]
	ptr_job->buf_size = buf_size;
   88ca6:	60a3      	str	r3, [r4, #8]
	ptr_job->buf_cnt = 0;
   88ca8:	f04f 0200 	mov.w	r2, #0
   88cac:	60e2      	str	r2, [r4, #12]
	ptr_job->buf_load = 0;
   88cae:	6122      	str	r2, [r4, #16]
	ptr_job->call_trans = callback;
   88cb0:	9a06      	ldr	r2, [sp, #24]
   88cb2:	6022      	str	r2, [r4, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   88cb4:	b921      	cbnz	r1, 88cc0 <udd_ep_run+0xc8>
   88cb6:	f1d3 0301 	rsbs	r3, r3, #1
   88cba:	bf38      	it	cc
   88cbc:	2300      	movcc	r3, #0
   88cbe:	e001      	b.n	88cc4 <udd_ep_run+0xcc>
   88cc0:	f04f 0301 	mov.w	r3, #1
   88cc4:	7d21      	ldrb	r1, [r4, #20]
   88cc6:	f363 0141 	bfi	r1, r3, #1, #1
   88cca:	7521      	strb	r1, [r4, #20]
#endif // UDD_EP_FIFO_SUPPORTED

#ifdef UDD_EP_DMA_SUPPORTED
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
   88ccc:	f647 02e9 	movw	r2, #30953	; 0x78e9
   88cd0:	f2c0 0208 	movt	r2, #8
   88cd4:	4790      	blx	r2
	return true;
   88cd6:	f04f 0001 	mov.w	r0, #1
   88cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
   88cdc:	f04f 0000 	mov.w	r0, #0
   88ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
   88ce2:	f04f 0000 	mov.w	r0, #0
   88ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88ce8:	f04f 0000 	mov.w	r0, #0
   88cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88cee:	f04f 0000 	mov.w	r0, #0
   88cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
   88cf4:	f04f 0000 	mov.w	r0, #0
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
	return true;
#endif
}
   88cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88cfa:	bf00      	nop

00088cfc <udd_ep_alloc>:


#if (0 != USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   88cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88d00:	b085      	sub	sp, #20
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
   88d02:	f000 040f 	and.w	r4, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
   88d06:	2c05      	cmp	r4, #5
   88d08:	f200 8101 	bhi.w	88f0e <udd_ep_alloc+0x212>
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
   88d0c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   88d10:	f2c4 030a 	movt	r3, #16394	; 0x400a
   88d14:	69db      	ldr	r3, [r3, #28]
   88d16:	f04f 0501 	mov.w	r5, #1
   88d1a:	fa05 f504 	lsl.w	r5, r5, r4
   88d1e:	421d      	tst	r5, r3
   88d20:	f040 80f8 	bne.w	88f14 <udd_ep_alloc+0x218>
		return false;
	}
	dbg_print("alloc(%x, %d) ", ep, MaxEndpointSize);

	// Bank choise
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   88d24:	f001 0303 	and.w	r3, r1, #3
   88d28:	2b02      	cmp	r3, #2
   88d2a:	d006      	beq.n	88d3a <udd_ep_alloc+0x3e>
   88d2c:	2b03      	cmp	r3, #3
   88d2e:	f000 80fd 	beq.w	88f2c <udd_ep_alloc+0x230>
   88d32:	2b01      	cmp	r3, #1
   88d34:	f040 80f1 	bne.w	88f1a <udd_ep_alloc+0x21e>
   88d38:	e007      	b.n	88d4a <udd_ep_alloc+0x4e>
		break;
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
		break;
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   88d3a:	f1a4 0604 	sub.w	r6, r4, #4
   88d3e:	b2f5      	uxtb	r5, r6
		Assert(false);
		return false;
	}
	switch (nb_bank) {
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   88d40:	2d01      	cmp	r5, #1
   88d42:	bf94      	ite	ls
   88d44:	2500      	movls	r5, #0
   88d46:	2501      	movhi	r5, #1
   88d48:	e001      	b.n	88d4e <udd_ep_alloc+0x52>
				UOTGHS_DEVEPTCFG_EPBK_Pos;
		break;
	case 2:
		bank = UOTGHS_DEVEPTCFG_EPBK_2_BANK >>
   88d4a:	f04f 0501 	mov.w	r5, #1
	Assert((MaxEndpointSize == 1023)
		|| !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   88d4e:	f44f 4741 	mov.w	r7, #49408	; 0xc100
   88d52:	f2c4 070a 	movt	r7, #16394	; 0x400a
   88d56:	eb07 0684 	add.w	r6, r7, r4, lsl #2
   88d5a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   88d5e:	f423 57cb 	bic.w	r7, r3, #6496	; 0x1960
   88d62:	f027 071c 	bic.w	r7, r7, #28
   88d66:	ea4f 21c1 	mov.w	r1, r1, lsl #11
   88d6a:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
   88d6e:	f000 0080 	and.w	r0, r0, #128	; 0x80
   88d72:	2800      	cmp	r0, #0
   88d74:	bf14      	ite	ne
   88d76:	f44f 7080 	movne.w	r0, #256	; 0x100
   88d7a:	2000      	moveq	r0, #0
   88d7c:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
   88d80:	b29b      	uxth	r3, r3
   88d82:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   88d86:	d306      	bcc.n	88d96 <udd_ep_alloc+0x9a>
   88d88:	2a08      	cmp	r2, #8
   88d8a:	d907      	bls.n	88d9c <udd_ep_alloc+0xa0>
   88d8c:	ea4f 0342 	mov.w	r3, r2, lsl #1
   88d90:	f103 32ff 	add.w	r2, r3, #4294967295
   88d94:	e004      	b.n	88da0 <udd_ep_alloc+0xa4>
   88d96:	f240 72ff 	movw	r2, #2047	; 0x7ff
   88d9a:	e001      	b.n	88da0 <udd_ep_alloc+0xa4>
   88d9c:	f04f 020f 	mov.w	r2, #15
   88da0:	fab2 f282 	clz	r2, r2
   88da4:	ea41 0585 	orr.w	r5, r1, r5, lsl #2
   88da8:	4305      	orrs	r5, r0
   88daa:	f1c2 011c 	rsb	r1, r2, #28
   88dae:	ea45 1001 	orr.w	r0, r5, r1, lsl #4
   88db2:	f641 1374 	movw	r3, #6516	; 0x1974
   88db6:	4003      	ands	r3, r0
   88db8:	433b      	orrs	r3, r7
   88dba:	6033      	str	r3, [r6, #0]
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
   88dbc:	f04f 0601 	mov.w	r6, #1
   88dc0:	fa06 f604 	lsl.w	r6, r6, r4
   88dc4:	b2b7      	uxth	r7, r6

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   88dc6:	2c04      	cmp	r4, #4
   88dc8:	f200 80b3 	bhi.w	88f32 <udd_ep_alloc+0x236>
   88dcc:	f24c 1114 	movw	r1, #49428	; 0xc114
   88dd0:	f2c4 010a 	movt	r1, #16394	; 0x400a
   88dd4:	f04f 0305 	mov.w	r3, #5
		if (Is_udd_endpoint_enabled(i)) {
   88dd8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   88ddc:	f2c4 020a 	movt	r2, #16394	; 0x400a
   88de0:	f04f 0001 	mov.w	r0, #1
   88de4:	ea6f 0504 	mvn.w	r5, r4
   88de8:	18ee      	adds	r6, r5, r3
   88dea:	ea06 0c00 	and.w	ip, r6, r0
   88dee:	69d6      	ldr	r6, [r2, #28]
   88df0:	fa00 f503 	lsl.w	r5, r0, r3
   88df4:	4235      	tst	r5, r6
   88df6:	f000 81c3 	beq.w	89180 <udd_ep_alloc+0x484>
   88dfa:	e1b5      	b.n	89168 <udd_ep_alloc+0x46c>
   88dfc:	46a0      	mov	r8, r4
   88dfe:	e7ff      	b.n	88e00 <udd_ep_alloc+0x104>
   88e00:	69d4      	ldr	r4, [r2, #28]
   88e02:	fa00 f603 	lsl.w	r6, r0, r3
   88e06:	4226      	tst	r6, r4
   88e08:	d009      	beq.n	88e1e <udd_ep_alloc+0x122>
			ep_allocated |= 1 << i;
   88e0a:	4337      	orrs	r7, r6
   88e0c:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   88e0e:	69d4      	ldr	r4, [r2, #28]
   88e10:	ea24 0606 	bic.w	r6, r4, r6
   88e14:	61d6      	str	r6, [r2, #28]
			udd_unallocate_memory(i);
   88e16:	680d      	ldr	r5, [r1, #0]
   88e18:	f025 0402 	bic.w	r4, r5, #2
   88e1c:	600c      	str	r4, [r1, #0]
   88e1e:	f103 33ff 	add.w	r3, r3, #4294967295
   88e22:	f1a1 0904 	sub.w	r9, r1, #4
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
   88e26:	69d4      	ldr	r4, [r2, #28]
   88e28:	fa00 f503 	lsl.w	r5, r0, r3
   88e2c:	4225      	tst	r5, r4
   88e2e:	f000 81dc 	beq.w	891ea <udd_ep_alloc+0x4ee>
   88e32:	e1cc      	b.n	891ce <udd_ep_alloc+0x4d2>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
   88e34:	fa47 f004 	asr.w	r0, r7, r4
   88e38:	f010 0f01 	tst.w	r0, #1
   88e3c:	d05a      	beq.n	88ef4 <udd_ep_alloc+0x1f8>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   88e3e:	f104 33ff 	add.w	r3, r4, #4294967295
   88e42:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   88e46:	eb09 05cc 	add.w	r5, r9, ip, lsl #3
			bool b_restart = ptr_job->busy;
   88e4a:	7d29      	ldrb	r1, [r5, #20]
   88e4c:	f001 0201 	and.w	r2, r1, #1
   88e50:	9203      	str	r2, [sp, #12]
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   88e52:	f36f 0100 	bfc	r1, #0, #1
   88e56:	7529      	strb	r1, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   88e58:	ea4f 0184 	mov.w	r1, r4, lsl #2
   88e5c:	198a      	adds	r2, r1, r6
   88e5e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   88e62:	f040 0302 	orr.w	r3, r0, #2
   88e66:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			udd_enable_endpoint(i);
   88e6a:	f8d8 301c 	ldr.w	r3, [r8, #28]
   88e6e:	f04f 0001 	mov.w	r0, #1
   88e72:	fa00 fb04 	lsl.w	fp, r0, r4
   88e76:	ea4b 0303 	orr.w	r3, fp, r3
   88e7a:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   88e7e:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
   88e82:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   88e86:	d110      	bne.n	88eaa <udd_ep_alloc+0x1ae>
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
   88e88:	682b      	ldr	r3, [r5, #0]
   88e8a:	2b00      	cmp	r3, #0
   88e8c:	d048      	beq.n	88f20 <udd_ep_alloc+0x224>
					return false;
				}
				if (Is_udd_endpoint_in(i)) {
   88e8e:	6811      	ldr	r1, [r2, #0]
   88e90:	f411 7f80 	tst.w	r1, #256	; 0x100
					i |= USB_EP_DIR_IN;
   88e94:	bf18      	it	ne
   88e96:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   88e9a:	f04f 0001 	mov.w	r0, #1
   88e9e:	68e9      	ldr	r1, [r5, #12]
   88ea0:	4622      	mov	r2, r4
   88ea2:	4798      	blx	r3
						ptr_job->buf_cnt, i);
				return false;
   88ea4:	f04f 0000 	mov.w	r0, #0
   88ea8:	e05d      	b.n	88f66 <udd_ep_alloc+0x26a>
			}
			udd_enable_endpoint_bank_autoswitch(i);
   88eaa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   88eae:	f442 7300 	orr.w	r3, r2, #512	; 0x200
   88eb2:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			if (b_restart) {
   88eb6:	9a03      	ldr	r2, [sp, #12]
   88eb8:	b1e2      	cbz	r2, 88ef4 <udd_ep_alloc+0x1f8>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   88eba:	68ea      	ldr	r2, [r5, #12]
   88ebc:	692b      	ldr	r3, [r5, #16]
   88ebe:	1ad3      	subs	r3, r2, r3
   88ec0:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88ec2:	5989      	ldr	r1, [r1, r6]
   88ec4:	f411 7f80 	tst.w	r1, #256	; 0x100
   88ec8:	bf14      	ite	ne
   88eca:	f044 0080 	orrne.w	r0, r4, #128	; 0x80
   88ece:	4620      	moveq	r0, r4
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   88ed0:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88ed2:	f8d5 e004 	ldr.w	lr, [r5, #4]
   88ed6:	68ad      	ldr	r5, [r5, #8]
   88ed8:	f859 203c 	ldr.w	r2, [r9, ip, lsl #3]
   88edc:	9200      	str	r2, [sp, #0]
   88ede:	f3c1 0140 	ubfx	r1, r1, #1, #1
   88ee2:	eb0e 0203 	add.w	r2, lr, r3
   88ee6:	1aeb      	subs	r3, r5, r3
   88ee8:	f648 35f9 	movw	r5, #35833	; 0x8bf9
   88eec:	f2c0 0508 	movt	r5, #8
   88ef0:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   88ef2:	b1c0      	cbz	r0, 88f26 <udd_ep_alloc+0x22a>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   88ef4:	f104 0401 	add.w	r4, r4, #1
   88ef8:	b2e4      	uxtb	r4, r4
		if (ep_allocated & (1 << i)) {
   88efa:	fa47 f004 	asr.w	r0, r7, r4
   88efe:	f010 0f01 	tst.w	r0, #1
   88f02:	f000 812a 	beq.w	8915a <udd_ep_alloc+0x45e>
   88f06:	e0d9      	b.n	890bc <udd_ep_alloc+0x3c0>
					return false;
				}
			}
		}
	}
	return true;
   88f08:	f04f 0001 	mov.w	r0, #1
   88f0c:	e02b      	b.n	88f66 <udd_ep_alloc+0x26a>

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
   88f0e:	f04f 0000 	mov.w	r0, #0
   88f12:	e028      	b.n	88f66 <udd_ep_alloc+0x26a>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
   88f14:	f04f 0000 	mov.w	r0, #0
   88f18:	e025      	b.n	88f66 <udd_ep_alloc+0x26a>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
		break;
	default:
		Assert(false);
		return false;
   88f1a:	f04f 0000 	mov.w	r0, #0
   88f1e:	e022      	b.n	88f66 <udd_ep_alloc+0x26a>
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i)) {
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
					return false;
   88f20:	f04f 0000 	mov.w	r0, #0
   88f24:	e01f      	b.n	88f66 <udd_ep_alloc+0x26a>
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
					dbg_print("ErrReRun%d ", i);
					return false;
   88f26:	f04f 0000 	mov.w	r0, #0
   88f2a:	e01c      	b.n	88f66 <udd_ep_alloc+0x26a>
		Assert(false);
		return false;
	}
	switch (nb_bank) {
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   88f2c:	f04f 0500 	mov.w	r5, #0
   88f30:	e70d      	b.n	88d4e <udd_ep_alloc+0x52>
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   88f32:	f241 5994 	movw	r9, #5524	; 0x1594
   88f36:	f2c2 0907 	movt	r9, #8199	; 0x2007
			bool b_restart = ptr_job->busy;
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
			// Re-allocate memory
			udd_allocate_memory(i);
   88f3a:	f44f 4641 	mov.w	r6, #49408	; 0xc100
   88f3e:	f2c4 060a 	movt	r6, #16394	; 0x400a
			udd_enable_endpoint(i);
   88f42:	f44f 4840 	mov.w	r8, #49152	; 0xc000
   88f46:	f2c4 080a 	movt	r8, #16394	; 0x400a
			if (!Is_udd_endpoint_configured(i)) {
   88f4a:	f24c 1a30 	movw	sl, #49456	; 0xc130
   88f4e:	f2c4 0a0a 	movt	sl, #16394	; 0x400a
   88f52:	f1c4 0b05 	rsb	fp, r4, #5
   88f56:	f00b 0b01 	and.w	fp, fp, #1
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
   88f5a:	fa47 f204 	asr.w	r2, r7, r4
   88f5e:	f012 0f01 	tst.w	r2, #1
   88f62:	d04c      	beq.n	88ffe <udd_ep_alloc+0x302>
   88f64:	e002      	b.n	88f6c <udd_ep_alloc+0x270>
				}
			}
		}
	}
	return true;
}
   88f66:	b005      	add	sp, #20
   88f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   88f6c:	f104 30ff 	add.w	r0, r4, #4294967295
   88f70:	eb00 0540 	add.w	r5, r0, r0, lsl #1
   88f74:	eb09 05c5 	add.w	r5, r9, r5, lsl #3
			bool b_restart = ptr_job->busy;
   88f78:	7d2b      	ldrb	r3, [r5, #20]
   88f7a:	f003 0c01 	and.w	ip, r3, #1
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   88f7e:	f36f 0300 	bfc	r3, #0, #1
   88f82:	752b      	strb	r3, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   88f84:	ea4f 0384 	mov.w	r3, r4, lsl #2
   88f88:	199a      	adds	r2, r3, r6
   88f8a:	6811      	ldr	r1, [r2, #0]
   88f8c:	f041 0002 	orr.w	r0, r1, #2
   88f90:	6010      	str	r0, [r2, #0]
			udd_enable_endpoint(i);
   88f92:	f8d8 101c 	ldr.w	r1, [r8, #28]
   88f96:	f04f 0001 	mov.w	r0, #1
   88f9a:	fa00 f004 	lsl.w	r0, r0, r4
   88f9e:	4301      	orrs	r1, r0
   88fa0:	f8c8 101c 	str.w	r1, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   88fa4:	4453      	add	r3, sl
   88fa6:	6818      	ldr	r0, [r3, #0]
   88fa8:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   88fac:	f43f af6c 	beq.w	88e88 <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   88fb0:	6811      	ldr	r1, [r2, #0]
   88fb2:	f441 7300 	orr.w	r3, r1, #512	; 0x200
   88fb6:	6013      	str	r3, [r2, #0]
			if (b_restart) {
   88fb8:	f1bc 0f00 	cmp.w	ip, #0
   88fbc:	d01f      	beq.n	88ffe <udd_ep_alloc+0x302>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   88fbe:	68e8      	ldr	r0, [r5, #12]
   88fc0:	6929      	ldr	r1, [r5, #16]
   88fc2:	1a43      	subs	r3, r0, r1
   88fc4:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88fc6:	6812      	ldr	r2, [r2, #0]
   88fc8:	f412 7f80 	tst.w	r2, #256	; 0x100
   88fcc:	d012      	beq.n	88ff4 <udd_ep_alloc+0x2f8>
   88fce:	e013      	b.n	88ff8 <udd_ep_alloc+0x2fc>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   88fd0:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88fd2:	686a      	ldr	r2, [r5, #4]
   88fd4:	f8d5 e008 	ldr.w	lr, [r5, #8]
   88fd8:	682d      	ldr	r5, [r5, #0]
   88fda:	9500      	str	r5, [sp, #0]
   88fdc:	f3c1 0140 	ubfx	r1, r1, #1, #1
   88fe0:	18d2      	adds	r2, r2, r3
   88fe2:	ebc3 030e 	rsb	r3, r3, lr
   88fe6:	f648 35f9 	movw	r5, #35833	; 0x8bf9
   88fea:	f2c0 0508 	movt	r5, #8
   88fee:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   88ff0:	b928      	cbnz	r0, 88ffe <udd_ep_alloc+0x302>
   88ff2:	e798      	b.n	88f26 <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   88ff4:	4620      	mov	r0, r4
   88ff6:	e7eb      	b.n	88fd0 <udd_ep_alloc+0x2d4>
   88ff8:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   88ffc:	e7e8      	b.n	88fd0 <udd_ep_alloc+0x2d4>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   88ffe:	f104 0401 	add.w	r4, r4, #1
   89002:	b2e4      	uxtb	r4, r4
   89004:	2c06      	cmp	r4, #6
   89006:	f43f af7f 	beq.w	88f08 <udd_ep_alloc+0x20c>
   8900a:	fa4f f08b 	sxtb.w	r0, fp
   8900e:	2800      	cmp	r0, #0
   89010:	f43f af10 	beq.w	88e34 <udd_ep_alloc+0x138>
		if (ep_allocated & (1 << i)) {
   89014:	fa47 f304 	asr.w	r3, r7, r4
   89018:	f013 0f01 	tst.w	r3, #1
   8901c:	d047      	beq.n	890ae <udd_ep_alloc+0x3b2>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   8901e:	f104 31ff 	add.w	r1, r4, #4294967295
   89022:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   89026:	eb09 05c2 	add.w	r5, r9, r2, lsl #3
			bool b_restart = ptr_job->busy;
   8902a:	7d28      	ldrb	r0, [r5, #20]
   8902c:	f000 0101 	and.w	r1, r0, #1
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   89030:	f36f 0000 	bfc	r0, #0, #1
   89034:	7528      	strb	r0, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   89036:	ea4f 0384 	mov.w	r3, r4, lsl #2
   8903a:	199a      	adds	r2, r3, r6
   8903c:	6810      	ldr	r0, [r2, #0]
   8903e:	f040 0002 	orr.w	r0, r0, #2
   89042:	6010      	str	r0, [r2, #0]
			udd_enable_endpoint(i);
   89044:	f8d8 001c 	ldr.w	r0, [r8, #28]
   89048:	f04f 0b01 	mov.w	fp, #1
   8904c:	fa0b fc04 	lsl.w	ip, fp, r4
   89050:	ea4c 0000 	orr.w	r0, ip, r0
   89054:	f8c8 001c 	str.w	r0, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   89058:	4453      	add	r3, sl
   8905a:	6818      	ldr	r0, [r3, #0]
   8905c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   89060:	f43f af12 	beq.w	88e88 <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   89064:	6813      	ldr	r3, [r2, #0]
   89066:	f443 7000 	orr.w	r0, r3, #512	; 0x200
   8906a:	6010      	str	r0, [r2, #0]
			if (b_restart) {
   8906c:	b1f9      	cbz	r1, 890ae <udd_ep_alloc+0x3b2>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   8906e:	68e9      	ldr	r1, [r5, #12]
   89070:	692b      	ldr	r3, [r5, #16]
   89072:	1acb      	subs	r3, r1, r3
   89074:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   89076:	6812      	ldr	r2, [r2, #0]
   89078:	f412 7f80 	tst.w	r2, #256	; 0x100
   8907c:	d012      	beq.n	890a4 <udd_ep_alloc+0x3a8>
   8907e:	e013      	b.n	890a8 <udd_ep_alloc+0x3ac>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   89080:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   89082:	686a      	ldr	r2, [r5, #4]
   89084:	f8d5 e008 	ldr.w	lr, [r5, #8]
   89088:	682d      	ldr	r5, [r5, #0]
   8908a:	9500      	str	r5, [sp, #0]
   8908c:	f3c1 0140 	ubfx	r1, r1, #1, #1
   89090:	18d2      	adds	r2, r2, r3
   89092:	ebc3 030e 	rsb	r3, r3, lr
   89096:	f648 35f9 	movw	r5, #35833	; 0x8bf9
   8909a:	f2c0 0508 	movt	r5, #8
   8909e:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   890a0:	b928      	cbnz	r0, 890ae <udd_ep_alloc+0x3b2>
   890a2:	e740      	b.n	88f26 <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   890a4:	4620      	mov	r0, r4
   890a6:	e7eb      	b.n	89080 <udd_ep_alloc+0x384>
   890a8:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   890ac:	e7e8      	b.n	89080 <udd_ep_alloc+0x384>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   890ae:	f104 0401 	add.w	r4, r4, #1
   890b2:	b2e4      	uxtb	r4, r4
   890b4:	2c06      	cmp	r4, #6
   890b6:	f47f aebd 	bne.w	88e34 <udd_ep_alloc+0x138>
   890ba:	e725      	b.n	88f08 <udd_ep_alloc+0x20c>
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   890bc:	f104 33ff 	add.w	r3, r4, #4294967295
   890c0:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   890c4:	eb09 05cc 	add.w	r5, r9, ip, lsl #3
			bool b_restart = ptr_job->busy;
   890c8:	7d29      	ldrb	r1, [r5, #20]
   890ca:	f001 0201 	and.w	r2, r1, #1
   890ce:	9203      	str	r2, [sp, #12]
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   890d0:	f36f 0100 	bfc	r1, #0, #1
   890d4:	7529      	strb	r1, [r5, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   890d6:	ea4f 0184 	mov.w	r1, r4, lsl #2
   890da:	198a      	adds	r2, r1, r6
   890dc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   890e0:	f040 0302 	orr.w	r3, r0, #2
   890e4:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			udd_enable_endpoint(i);
   890e8:	f8d8 301c 	ldr.w	r3, [r8, #28]
   890ec:	f04f 0001 	mov.w	r0, #1
   890f0:	fa00 fb04 	lsl.w	fp, r0, r4
   890f4:	ea4b 0303 	orr.w	r3, fp, r3
   890f8:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   890fc:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
   89100:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   89104:	f43f aec0 	beq.w	88e88 <udd_ep_alloc+0x18c>
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
						ptr_job->buf_cnt, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
   89108:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   8910c:	f442 7300 	orr.w	r3, r2, #512	; 0x200
   89110:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
			if (b_restart) {
   89114:	9803      	ldr	r0, [sp, #12]
   89116:	b300      	cbz	r0, 8915a <udd_ep_alloc+0x45e>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   89118:	68ea      	ldr	r2, [r5, #12]
   8911a:	692b      	ldr	r3, [r5, #16]
   8911c:	1ad3      	subs	r3, r2, r3
   8911e:	60eb      	str	r3, [r5, #12]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   89120:	5989      	ldr	r1, [r1, r6]
   89122:	f411 7f80 	tst.w	r1, #256	; 0x100
   89126:	d013      	beq.n	89150 <udd_ep_alloc+0x454>
   89128:	e014      	b.n	89154 <udd_ep_alloc+0x458>
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   8912a:	7d29      	ldrb	r1, [r5, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8912c:	f8d5 e004 	ldr.w	lr, [r5, #4]
   89130:	68ad      	ldr	r5, [r5, #8]
   89132:	f859 203c 	ldr.w	r2, [r9, ip, lsl #3]
   89136:	9200      	str	r2, [sp, #0]
   89138:	f3c1 0140 	ubfx	r1, r1, #1, #1
   8913c:	eb0e 0203 	add.w	r2, lr, r3
   89140:	1aeb      	subs	r3, r5, r3
   89142:	f648 35f9 	movw	r5, #35833	; 0x8bf9
   89146:	f2c0 0508 	movt	r5, #8
   8914a:	47a8      	blx	r5
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   8914c:	b928      	cbnz	r0, 8915a <udd_ep_alloc+0x45e>
   8914e:	e6ea      	b.n	88f26 <udd_ep_alloc+0x22a>
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   89150:	4620      	mov	r0, r4
   89152:	e7ea      	b.n	8912a <udd_ep_alloc+0x42e>
   89154:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   89158:	e7e7      	b.n	8912a <udd_ep_alloc+0x42e>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   8915a:	f104 0401 	add.w	r4, r4, #1
   8915e:	b2e4      	uxtb	r4, r4
   89160:	2c06      	cmp	r4, #6
   89162:	f47f ae67 	bne.w	88e34 <udd_ep_alloc+0x138>
   89166:	e6cf      	b.n	88f08 <udd_ep_alloc+0x20c>
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
   89168:	fa00 f603 	lsl.w	r6, r0, r3
   8916c:	4337      	orrs	r7, r6
   8916e:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   89170:	69d6      	ldr	r6, [r2, #28]
   89172:	ea26 0505 	bic.w	r5, r6, r5
   89176:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   89178:	680e      	ldr	r6, [r1, #0]
   8917a:	f026 0502 	bic.w	r5, r6, #2
   8917e:	600d      	str	r5, [r1, #0]
   89180:	f103 33ff 	add.w	r3, r3, #4294967295
   89184:	f1a1 0104 	sub.w	r1, r1, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   89188:	b2dd      	uxtb	r5, r3
   8918a:	42a5      	cmp	r5, r4
   8918c:	f67f aed1 	bls.w	88f32 <udd_ep_alloc+0x236>
   89190:	fa4f f68c 	sxtb.w	r6, ip
   89194:	2e00      	cmp	r6, #0
   89196:	f43f ae31 	beq.w	88dfc <udd_ep_alloc+0x100>
		if (Is_udd_endpoint_enabled(i)) {
   8919a:	69d6      	ldr	r6, [r2, #28]
   8919c:	fa00 f503 	lsl.w	r5, r0, r3
   891a0:	4235      	tst	r5, r6
   891a2:	d009      	beq.n	891b8 <udd_ep_alloc+0x4bc>
			ep_allocated |= 1 << i;
   891a4:	432f      	orrs	r7, r5
   891a6:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   891a8:	69d6      	ldr	r6, [r2, #28]
   891aa:	ea26 0505 	bic.w	r5, r6, r5
   891ae:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   891b0:	680e      	ldr	r6, [r1, #0]
   891b2:	f026 0502 	bic.w	r5, r6, #2
   891b6:	600d      	str	r5, [r1, #0]
   891b8:	f103 33ff 	add.w	r3, r3, #4294967295
   891bc:	f1a1 0104 	sub.w	r1, r1, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   891c0:	b2dd      	uxtb	r5, r3
   891c2:	42a5      	cmp	r5, r4
   891c4:	bf88      	it	hi
   891c6:	46a0      	movhi	r8, r4
   891c8:	f63f ae1a 	bhi.w	88e00 <udd_ep_alloc+0x104>
   891cc:	e6b1      	b.n	88f32 <udd_ep_alloc+0x236>
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
   891ce:	fa00 f603 	lsl.w	r6, r0, r3
   891d2:	4337      	orrs	r7, r6
   891d4:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   891d6:	69d4      	ldr	r4, [r2, #28]
   891d8:	ea24 0505 	bic.w	r5, r4, r5
   891dc:	61d5      	str	r5, [r2, #28]
			udd_unallocate_memory(i);
   891de:	f851 6c04 	ldr.w	r6, [r1, #-4]
   891e2:	f026 0402 	bic.w	r4, r6, #2
   891e6:	f841 4c04 	str.w	r4, [r1, #-4]
   891ea:	f103 33ff 	add.w	r3, r3, #4294967295
   891ee:	f1a9 0104 	sub.w	r1, r9, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   891f2:	b2dd      	uxtb	r5, r3
   891f4:	4545      	cmp	r5, r8
   891f6:	f63f ae03 	bhi.w	88e00 <udd_ep_alloc+0x104>
   891fa:	4644      	mov	r4, r8
   891fc:	e699      	b.n	88f32 <udd_ep_alloc+0x236>
   891fe:	bf00      	nop

00089200 <udd_ep_abort>:
#endif
}


void udd_ep_abort(udd_ep_id_t ep)
{
   89200:	b538      	push	{r3, r4, r5, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   89202:	f000 030f 	and.w	r3, r0, #15
		udd_disable_in_send_interrupt(ep_index);
	} else
#endif
	{
		// Stop DMA transfer
		udd_disable_endpoint_dma_interrupt(ep_index);
   89206:	f103 32ff 	add.w	r2, r3, #4294967295
   8920a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   8920e:	fa01 f102 	lsl.w	r1, r1, r2
   89212:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   89216:	f2c4 020a 	movt	r2, #16394	; 0x400a
   8921a:	6151      	str	r1, [r2, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   8921c:	f44f 4443 	mov.w	r4, #49920	; 0xc300
   89220:	f2c4 040a 	movt	r4, #16394	; 0x400a
   89224:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   89228:	f04f 0400 	mov.w	r4, #0
   8922c:	608c      	str	r4, [r1, #8]
	}
	udd_disable_endpoint_interrupt(ep_index);
   8922e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   89232:	fa01 f103 	lsl.w	r1, r1, r3
   89236:	6151      	str	r1, [r2, #20]
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
   89238:	f010 0f80 	tst.w	r0, #128	; 0x80
   8923c:	d01c      	beq.n	89278 <udd_ep_abort+0x78>
		while(udd_nb_busy_bank(ep_index)) {
   8923e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   89242:	f24c 1530 	movw	r5, #49456	; 0xc130
   89246:	f2c4 050a 	movt	r5, #16394	; 0x400a
   8924a:	1959      	adds	r1, r3, r5
			udd_kill_last_in_bank(ep_index);
   8924c:	f24c 12f0 	movw	r2, #49648	; 0xc1f0
   89250:	f2c4 020a 	movt	r2, #16394	; 0x400a
   89254:	189c      	adds	r4, r3, r2
   89256:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
   8925a:	f24c 12c0 	movw	r2, #49600	; 0xc1c0
   8925e:	f2c4 020a 	movt	r2, #16394	; 0x400a
   89262:	189a      	adds	r2, r3, r2
   89264:	e004      	b.n	89270 <udd_ep_abort+0x70>
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
			udd_kill_last_in_bank(ep_index);
   89266:	6025      	str	r5, [r4, #0]
			while(Is_udd_kill_last(ep_index));
   89268:	6813      	ldr	r3, [r2, #0]
   8926a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   8926e:	d1fb      	bne.n	89268 <udd_ep_abort+0x68>
		udd_endpoint_dma_set_control(ep_index, 0);
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
   89270:	680b      	ldr	r3, [r1, #0]
   89272:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   89276:	d1f6      	bne.n	89266 <udd_ep_abort+0x66>
			udd_kill_last_in_bank(ep_index);
			while(Is_udd_kill_last(ep_index));
		}
	}
	udd_ep_abort_job(ep);
   89278:	f647 01bd 	movw	r1, #30909	; 0x78bd
   8927c:	f2c0 0108 	movt	r1, #8
   89280:	4788      	blx	r1
   89282:	bd38      	pop	{r3, r4, r5, pc}

00089284 <udd_ep_wait_stall_clear>:
}


bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
   89284:	b510      	push	{r4, lr}
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   89286:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   8928a:	2805      	cmp	r0, #5
   8928c:	d831      	bhi.n	892f2 <udd_ep_wait_stall_clear+0x6e>
		return false;
	}

	ptr_job = &udd_ep_job[ep - 1];

	if (!Is_udd_endpoint_enabled(ep)) {
   8928e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89292:	f2c4 030a 	movt	r3, #16394	; 0x400a
   89296:	69db      	ldr	r3, [r3, #28]
   89298:	f04f 0201 	mov.w	r2, #1
   8929c:	fa02 f200 	lsl.w	r2, r2, r0
   892a0:	421a      	tst	r2, r3
   892a2:	d029      	beq.n	892f8 <udd_ep_wait_stall_clear+0x74>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	ptr_job = &udd_ep_job[ep - 1];
   892a4:	f100 33ff 	add.w	r3, r0, #4294967295
   892a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   892ac:	f241 5294 	movw	r2, #5524	; 0x1594
   892b0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   892b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (!Is_udd_endpoint_enabled(ep)) {
		return false; // Endpoint not enabled
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
   892b8:	7d1a      	ldrb	r2, [r3, #20]
   892ba:	f012 0f01 	tst.w	r2, #1
   892be:	d11e      	bne.n	892fe <udd_ep_wait_stall_clear+0x7a>
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
   892c0:	f24c 14c0 	movw	r4, #49600	; 0xc1c0
   892c4:	f2c4 040a 	movt	r4, #16394	; 0x400a
   892c8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   892cc:	f410 2f00 	tst.w	r0, #524288	; 0x80000
   892d0:	d103      	bne.n	892da <udd_ep_wait_stall_clear+0x56>
			|| ptr_job->stall_requested) {
   892d2:	f002 0204 	and.w	r2, r2, #4
   892d6:	b2d0      	uxtb	r0, r2
   892d8:	b138      	cbz	r0, 892ea <udd_ep_wait_stall_clear+0x66>
		// Endpoint halted then registes the callback
		ptr_job->busy = true;
   892da:	7d1a      	ldrb	r2, [r3, #20]
   892dc:	f042 0001 	orr.w	r0, r2, #1
   892e0:	7518      	strb	r0, [r3, #20]
		ptr_job->call_nohalt = callback;
   892e2:	6019      	str	r1, [r3, #0]
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
   892e4:	f04f 0001 	mov.w	r0, #1

	if (Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		// Endpoint halted then registes the callback
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
   892e8:	bd10      	pop	{r4, pc}
	} else {
		// endpoint not halted then call directly callback
		callback();
   892ea:	4788      	blx	r1
	}
	return true;
   892ec:	f04f 0001 	mov.w	r0, #1
   892f0:	bd10      	pop	{r4, pc}
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
   892f2:	f04f 0000 	mov.w	r0, #0
   892f6:	bd10      	pop	{r4, pc}
	}

	ptr_job = &udd_ep_job[ep - 1];

	if (!Is_udd_endpoint_enabled(ep)) {
		return false; // Endpoint not enabled
   892f8:	f04f 0000 	mov.w	r0, #0
   892fc:	bd10      	pop	{r4, pc}
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
   892fe:	f04f 0000 	mov.w	r0, #0
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
   89302:	bd10      	pop	{r4, pc}

00089304 <udd_test_mode_j>:

#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
	udd_enable_hs_test_mode();
   89304:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89308:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8930c:	681a      	ldr	r2, [r3, #0]
   8930e:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   89312:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   89316:	6019      	str	r1, [r3, #0]
	udd_enable_hs_test_mode_j();
   89318:	681a      	ldr	r2, [r3, #0]
   8931a:	f442 5000 	orr.w	r0, r2, #8192	; 0x2000
   8931e:	6018      	str	r0, [r3, #0]
   89320:	4770      	bx	lr
   89322:	bf00      	nop

00089324 <udd_test_mode_k>:
}


void udd_test_mode_k(void)
{
	udd_enable_hs_test_mode();
   89324:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89328:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8932c:	681a      	ldr	r2, [r3, #0]
   8932e:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   89332:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   89336:	6019      	str	r1, [r3, #0]
	udd_enable_hs_test_mode_k();
   89338:	681a      	ldr	r2, [r3, #0]
   8933a:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
   8933e:	6018      	str	r0, [r3, #0]
   89340:	4770      	bx	lr
   89342:	bf00      	nop

00089344 <udd_test_mode_se0_nak>:
}


void udd_test_mode_se0_nak(void)
{
	udd_enable_hs_test_mode();
   89344:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   89348:	f2c4 030a 	movt	r3, #16394	; 0x400a
   8934c:	681a      	ldr	r2, [r3, #0]
   8934e:	f422 6040 	bic.w	r0, r2, #3072	; 0xc00
   89352:	f440 6100 	orr.w	r1, r0, #2048	; 0x800
   89356:	6019      	str	r1, [r3, #0]
   89358:	4770      	bx	lr
   8935a:	bf00      	nop

0008935c <udd_test_mode_packet>:
}


void udd_test_mode_packet(void)
{
   8935c:	b470      	push	{r4, r5, r6}
   8935e:	b08f      	sub	sp, #60	; 0x3c
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   89360:	f64c 4518 	movw	r5, #52248	; 0xcc18
   89364:	f2c0 0508 	movt	r5, #8
   89368:	ac00      	add	r4, sp, #0
   8936a:	6828      	ldr	r0, [r5, #0]
   8936c:	6869      	ldr	r1, [r5, #4]
   8936e:	68aa      	ldr	r2, [r5, #8]
   89370:	68eb      	ldr	r3, [r5, #12]
   89372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   89374:	f105 0510 	add.w	r5, r5, #16
   89378:	4626      	mov	r6, r4
   8937a:	6828      	ldr	r0, [r5, #0]
   8937c:	6869      	ldr	r1, [r5, #4]
   8937e:	68aa      	ldr	r2, [r5, #8]
   89380:	68eb      	ldr	r3, [r5, #12]
   89382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   89384:	6928      	ldr	r0, [r5, #16]
   89386:	6969      	ldr	r1, [r5, #20]
   89388:	69aa      	ldr	r2, [r5, #24]
   8938a:	69eb      	ldr	r3, [r5, #28]
   8938c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8938e:	6a28      	ldr	r0, [r5, #32]
   89390:	f846 0f20 	str.w	r0, [r6, #32]!
   89394:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   89398:	f105 0520 	add.w	r5, r5, #32
   8939c:	7131      	strb	r1, [r6, #4]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   8939e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
   893a2:	f2c4 040a 	movt	r4, #16394	; 0x400a
   893a6:	69e2      	ldr	r2, [r4, #28]
   893a8:	f022 0301 	bic.w	r3, r2, #1
   893ac:	61e3      	str	r3, [r4, #28]
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
   893ae:	f44f 4041 	mov.w	r0, #49408	; 0xc100
   893b2:	f2c4 000a 	movt	r0, #16394	; 0x400a
   893b6:	6801      	ldr	r1, [r0, #0]
   893b8:	f421 52cb 	bic.w	r2, r1, #6496	; 0x1960
   893bc:	f022 031c 	bic.w	r3, r2, #28
   893c0:	f443 5189 	orr.w	r1, r3, #4384	; 0x1120
   893c4:	f041 0210 	orr.w	r2, r1, #16
   893c8:	6002      	str	r2, [r0, #0]
			64, UOTGHS_DEVEPTCFG_EPBK_1_BANK);
	udd_allocate_memory(0);
   893ca:	6803      	ldr	r3, [r0, #0]
   893cc:	f043 0102 	orr.w	r1, r3, #2
   893d0:	6001      	str	r1, [r0, #0]
	udd_enable_endpoint(0);
   893d2:	69e0      	ldr	r0, [r4, #28]
   893d4:	f040 0201 	orr.w	r2, r0, #1
   893d8:	61e2      	str	r2, [r4, #28]

	udd_enable_hs_test_mode();
   893da:	6823      	ldr	r3, [r4, #0]
   893dc:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
   893e0:	f441 6000 	orr.w	r0, r1, #2048	; 0x800
   893e4:	6020      	str	r0, [r4, #0]
	udd_enable_hs_test_mode_packet();
   893e6:	6822      	ldr	r2, [r4, #0]
   893e8:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
   893ec:	6023      	str	r3, [r4, #0]

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
   893ee:	f04f 0435 	mov.w	r4, #53	; 0x35
   893f2:	f2c2 0418 	movt	r4, #8216	; 0x2018
   893f6:	f10d 31ff 	add.w	r1, sp, #4294967295
		*ptr_dest++ = *ptr_src++;
   893fa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   893fe:	f04f 0300 	mov.w	r3, #0
   89402:	f2c2 0318 	movt	r3, #8216	; 0x2018
   89406:	f803 0b01 	strb.w	r0, [r3], #1
   8940a:	f101 0001 	add.w	r0, r1, #1
   8940e:	7849      	ldrb	r1, [r1, #1]
   89410:	461a      	mov	r2, r3
   89412:	f802 1b01 	strb.w	r1, [r2], #1
   89416:	f100 0101 	add.w	r1, r0, #1
   8941a:	7840      	ldrb	r0, [r0, #1]
   8941c:	7058      	strb	r0, [r3, #1]
   8941e:	f102 0301 	add.w	r3, r2, #1

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = test_packet;

	for (i = 0; i < sizeof(test_packet); i++) {
   89422:	42a3      	cmp	r3, r4
   89424:	d1f1      	bne.n	8940a <udd_test_mode_packet+0xae>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ack_fifocon(0);
   89426:	f24c 2120 	movw	r1, #49696	; 0xc220
   8942a:	f2c4 010a 	movt	r1, #16394	; 0x400a
   8942e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   89432:	600a      	str	r2, [r1, #0]
}
   89434:	b00f      	add	sp, #60	; 0x3c
   89436:	bc70      	pop	{r4, r5, r6}
   89438:	4770      	bx	lr
   8943a:	bf00      	nop

0008943c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8943c:	e7fe      	b.n	8943c <Dummy_Handler>
   8943e:	bf00      	nop

00089440 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   89440:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   89442:	f240 0300 	movw	r3, #0
   89446:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8944a:	f64c 52e8 	movw	r2, #52712	; 0xcde8
   8944e:	f2c0 0208 	movt	r2, #8
   89452:	429a      	cmp	r2, r3
   89454:	d003      	beq.n	8945e <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   89456:	4840      	ldr	r0, [pc, #256]	; (89558 <Reset_Handler+0x118>)
   89458:	4940      	ldr	r1, [pc, #256]	; (8955c <Reset_Handler+0x11c>)
   8945a:	4281      	cmp	r1, r0
   8945c:	d304      	bcc.n	89468 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8945e:	4b40      	ldr	r3, [pc, #256]	; (89560 <Reset_Handler+0x120>)
   89460:	4a40      	ldr	r2, [pc, #256]	; (89564 <Reset_Handler+0x124>)
   89462:	429a      	cmp	r2, r3
   89464:	d325      	bcc.n	894b2 <Reset_Handler+0x72>
   89466:	e042      	b.n	894ee <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   89468:	4d3f      	ldr	r5, [pc, #252]	; (89568 <Reset_Handler+0x128>)
   8946a:	4c40      	ldr	r4, [pc, #256]	; (8956c <Reset_Handler+0x12c>)
   8946c:	1b63      	subs	r3, r4, r5
   8946e:	f023 0503 	bic.w	r5, r3, #3
   89472:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   89476:	f240 0200 	movw	r2, #0
   8947a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8947e:	f64c 51e8 	movw	r1, #52712	; 0xcde8
   89482:	f2c0 0108 	movt	r1, #8
   89486:	f105 0004 	add.w	r0, r5, #4
   8948a:	f3c5 0480 	ubfx	r4, r5, #2, #1
   8948e:	585d      	ldr	r5, [r3, r1]
   89490:	509d      	str	r5, [r3, r2]
   89492:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   89496:	4283      	cmp	r3, r0
   89498:	d155      	bne.n	89546 <Reset_Handler+0x106>
   8949a:	e7e0      	b.n	8945e <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   8949c:	585d      	ldr	r5, [r3, r1]
   8949e:	509d      	str	r5, [r3, r2]
   894a0:	f103 0304 	add.w	r3, r3, #4
   894a4:	585c      	ldr	r4, [r3, r1]
   894a6:	509c      	str	r4, [r3, r2]
   894a8:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   894ac:	4283      	cmp	r3, r0
   894ae:	d1f5      	bne.n	8949c <Reset_Handler+0x5c>
   894b0:	e7d5      	b.n	8945e <Reset_Handler+0x1e>
   894b2:	4d2f      	ldr	r5, [pc, #188]	; (89570 <Reset_Handler+0x130>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   894b4:	492f      	ldr	r1, [pc, #188]	; (89574 <Reset_Handler+0x134>)
   894b6:	1b48      	subs	r0, r1, r5
   894b8:	f020 0403 	bic.w	r4, r0, #3
   894bc:	f640 23e8 	movw	r3, #2792	; 0xae8
   894c0:	f2c2 0307 	movt	r3, #8199	; 0x2007
   894c4:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   894c6:	f04f 0100 	mov.w	r1, #0
   894ca:	1b50      	subs	r0, r2, r5
   894cc:	f1a0 0004 	sub.w	r0, r0, #4
   894d0:	f3c0 0480 	ubfx	r4, r0, #2, #1
   894d4:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   894d8:	4295      	cmp	r5, r2
   894da:	d12d      	bne.n	89538 <Reset_Handler+0xf8>
   894dc:	e007      	b.n	894ee <Reset_Handler+0xae>
   894de:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
   894e2:	6069      	str	r1, [r5, #4]
   894e4:	f105 0508 	add.w	r5, r5, #8
   894e8:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   894ea:	4295      	cmp	r5, r2
   894ec:	d1f7      	bne.n	894de <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   894ee:	f240 0500 	movw	r5, #0
   894f2:	f2c0 0508 	movt	r5, #8
   894f6:	f025 4260 	bic.w	r2, r5, #3758096384	; 0xe0000000
   894fa:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
   894fe:	f44f 406d 	mov.w	r0, #60672	; 0xed00
   89502:	f2ce 0000 	movt	r0, #57344	; 0xe000
   89506:	6081      	str	r1, [r0, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   89508:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
   8950c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   89510:	d207      	bcs.n	89522 <Reset_Handler+0xe2>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   89512:	f44f 436d 	mov.w	r3, #60672	; 0xed00
   89516:	f2ce 0300 	movt	r3, #57344	; 0xe000
   8951a:	689d      	ldr	r5, [r3, #8]
   8951c:	f045 5200 	orr.w	r2, r5, #536870912	; 0x20000000
   89520:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   89522:	f649 6151 	movw	r1, #40529	; 0x9e51
   89526:	f2c0 0108 	movt	r1, #8
   8952a:	4788      	blx	r1

	/* Branch to main function */
	main();
   8952c:	f649 0075 	movw	r0, #39029	; 0x9875
   89530:	f2c0 0008 	movt	r0, #8
   89534:	4780      	blx	r0
   89536:	e7fe      	b.n	89536 <Reset_Handler+0xf6>
   89538:	2c00      	cmp	r4, #0
   8953a:	d0d0      	beq.n	894de <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   8953c:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   89540:	4295      	cmp	r5, r2
   89542:	d1cc      	bne.n	894de <Reset_Handler+0x9e>
   89544:	e7d3      	b.n	894ee <Reset_Handler+0xae>
   89546:	2c00      	cmp	r4, #0
   89548:	d0a8      	beq.n	8949c <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   8954a:	585c      	ldr	r4, [r3, r1]
   8954c:	509c      	str	r4, [r3, r2]
   8954e:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   89552:	4283      	cmp	r3, r0
   89554:	d1a2      	bne.n	8949c <Reset_Handler+0x5c>
   89556:	e782      	b.n	8945e <Reset_Handler+0x1e>
   89558:	20070ae8 	.word	0x20070ae8
   8955c:	20070000 	.word	0x20070000
   89560:	20071c34 	.word	0x20071c34
   89564:	20070ae8 	.word	0x20070ae8
   89568:	20070004 	.word	0x20070004
   8956c:	20070aeb 	.word	0x20070aeb
   89570:	20070ae4 	.word	0x20070ae4
   89574:	20071c2f 	.word	0x20071c2f

00089578 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   89578:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8957c:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89580:	6b18      	ldr	r0, [r3, #48]	; 0x30
   89582:	f000 0103 	and.w	r1, r0, #3
   89586:	2903      	cmp	r1, #3
   89588:	f200 80b1 	bhi.w	896ee <SystemCoreClockUpdate+0x176>
   8958c:	e8df f001 	tbb	[pc, r1]
   89590:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   89594:	f641 2010 	movw	r0, #6672	; 0x1a10
   89598:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8959c:	6941      	ldr	r1, [r0, #20]
   8959e:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   895a2:	f240 239c 	movw	r3, #668	; 0x29c
   895a6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   895aa:	bf14      	ite	ne
   895ac:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   895b0:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   895b4:	601a      	str	r2, [r3, #0]
   895b6:	e09a      	b.n	896ee <SystemCoreClockUpdate+0x176>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   895b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   895bc:	f2c4 030e 	movt	r3, #16398	; 0x400e
   895c0:	6a18      	ldr	r0, [r3, #32]
   895c2:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   895c6:	d009      	beq.n	895dc <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   895c8:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   895cc:	f2c0 03b7 	movt	r3, #183	; 0xb7
   895d0:	f240 229c 	movw	r2, #668	; 0x29c
   895d4:	f2c2 0207 	movt	r2, #8199	; 0x2007
   895d8:	6013      	str	r3, [r2, #0]
   895da:	e088      	b.n	896ee <SystemCoreClockUpdate+0x176>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   895dc:	f44f 6110 	mov.w	r1, #2304	; 0x900
   895e0:	f2c0 013d 	movt	r1, #61	; 0x3d
   895e4:	f240 229c 	movw	r2, #668	; 0x29c
   895e8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   895ec:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   895ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   895f2:	f2c4 030e 	movt	r3, #16398	; 0x400e
   895f6:	6a18      	ldr	r0, [r3, #32]
   895f8:	f000 0170 	and.w	r1, r0, #112	; 0x70
   895fc:	2910      	cmp	r1, #16
   895fe:	d002      	beq.n	89606 <SystemCoreClockUpdate+0x8e>
   89600:	2920      	cmp	r1, #32
   89602:	d174      	bne.n	896ee <SystemCoreClockUpdate+0x176>
   89604:	e009      	b.n	8961a <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   89606:	f44f 5090 	mov.w	r0, #4608	; 0x1200
   8960a:	f2c0 007a 	movt	r0, #122	; 0x7a
   8960e:	f240 219c 	movw	r1, #668	; 0x29c
   89612:	f2c2 0107 	movt	r1, #8199	; 0x2007
   89616:	6008      	str	r0, [r1, #0]
				break;
   89618:	e069      	b.n	896ee <SystemCoreClockUpdate+0x176>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8961a:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
   8961e:	f2c0 03b7 	movt	r3, #183	; 0xb7
   89622:	f240 229c 	movw	r2, #668	; 0x29c
   89626:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8962a:	6013      	str	r3, [r2, #0]
				break;
   8962c:	e05f      	b.n	896ee <SystemCoreClockUpdate+0x176>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8962e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   89632:	f2c4 020e 	movt	r2, #16398	; 0x400e
   89636:	6a13      	ldr	r3, [r2, #32]
   89638:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8963c:	d009      	beq.n	89652 <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8963e:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   89642:	f2c0 01b7 	movt	r1, #183	; 0xb7
   89646:	f240 229c 	movw	r2, #668	; 0x29c
   8964a:	f2c2 0207 	movt	r2, #8199	; 0x2007
   8964e:	6011      	str	r1, [r2, #0]
   89650:	e027      	b.n	896a2 <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   89652:	f44f 6010 	mov.w	r0, #2304	; 0x900
   89656:	f2c0 003d 	movt	r0, #61	; 0x3d
   8965a:	f240 219c 	movw	r1, #668	; 0x29c
   8965e:	f2c2 0107 	movt	r1, #8199	; 0x2007
   89662:	6008      	str	r0, [r1, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   89664:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   89668:	f2c4 020e 	movt	r2, #16398	; 0x400e
   8966c:	6a13      	ldr	r3, [r2, #32]
   8966e:	f003 0070 	and.w	r0, r3, #112	; 0x70
   89672:	2810      	cmp	r0, #16
   89674:	d002      	beq.n	8967c <SystemCoreClockUpdate+0x104>
   89676:	2820      	cmp	r0, #32
   89678:	d113      	bne.n	896a2 <SystemCoreClockUpdate+0x12a>
   8967a:	e009      	b.n	89690 <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8967c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   89680:	f2c0 037a 	movt	r3, #122	; 0x7a
   89684:	f240 209c 	movw	r0, #668	; 0x29c
   89688:	f2c2 0007 	movt	r0, #8199	; 0x2007
   8968c:	6003      	str	r3, [r0, #0]
				break;
   8968e:	e008      	b.n	896a2 <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   89690:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
   89694:	f2c0 01b7 	movt	r1, #183	; 0xb7
   89698:	f240 229c 	movw	r2, #668	; 0x29c
   8969c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   896a0:	6011      	str	r1, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   896a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   896a6:	f2c4 030e 	movt	r3, #16398	; 0x400e
   896aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
   896ac:	f000 0103 	and.w	r1, r0, #3
   896b0:	2902      	cmp	r1, #2
   896b2:	d113      	bne.n	896dc <SystemCoreClockUpdate+0x164>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   896b4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
   896b8:	f2c4 010e 	movt	r1, #16398	; 0x400e
   896bc:	6a88      	ldr	r0, [r1, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   896be:	6a89      	ldr	r1, [r1, #40]	; 0x28
   896c0:	f240 239c 	movw	r3, #668	; 0x29c
   896c4:	f2c2 0307 	movt	r3, #8199	; 0x2007
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   896c8:	f3c0 400a 	ubfx	r0, r0, #16, #11
   896cc:	681a      	ldr	r2, [r3, #0]
   896ce:	fb00 2002 	mla	r0, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   896d2:	b2c9      	uxtb	r1, r1
   896d4:	fbb0 f2f1 	udiv	r2, r0, r1
   896d8:	601a      	str	r2, [r3, #0]
   896da:	e008      	b.n	896ee <SystemCoreClockUpdate+0x176>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   896dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
   896e0:	f6c0 634e 	movt	r3, #3662	; 0xe4e
   896e4:	f240 229c 	movw	r2, #668	; 0x29c
   896e8:	f2c2 0207 	movt	r2, #8199	; 0x2007
   896ec:	6013      	str	r3, [r2, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   896ee:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   896f2:	f2c4 020e 	movt	r2, #16398	; 0x400e
   896f6:	6b10      	ldr	r0, [r2, #48]	; 0x30
   896f8:	f000 0170 	and.w	r1, r0, #112	; 0x70
   896fc:	2970      	cmp	r1, #112	; 0x70
   896fe:	d10e      	bne.n	8971e <SystemCoreClockUpdate+0x1a6>
		SystemCoreClock /= 3U;
   89700:	f240 239c 	movw	r3, #668	; 0x29c
   89704:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89708:	6818      	ldr	r0, [r3, #0]
   8970a:	f64a 22ab 	movw	r2, #43691	; 0xaaab
   8970e:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
   89712:	fba2 0100 	umull	r0, r1, r2, r0
   89716:	ea4f 0051 	mov.w	r0, r1, lsr #1
   8971a:	6018      	str	r0, [r3, #0]
   8971c:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8971e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   89722:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   89728:	f240 209c 	movw	r0, #668	; 0x29c
   8972c:	f2c2 0007 	movt	r0, #8199	; 0x2007
   89730:	f3c2 1102 	ubfx	r1, r2, #4, #3
   89734:	6803      	ldr	r3, [r0, #0]
   89736:	fa23 f301 	lsr.w	r3, r3, r1
   8973a:	6003      	str	r3, [r0, #0]
   8973c:	4770      	bx	lr
   8973e:	bf00      	nop

00089740 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   89740:	f64e 23bf 	movw	r3, #60095	; 0xeabf
   89744:	f2c0 1321 	movt	r3, #289	; 0x121
   89748:	4298      	cmp	r0, r3
   8974a:	d80c      	bhi.n	89766 <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   8974c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   89750:	f2c4 030e 	movt	r3, #16398	; 0x400e
   89754:	f04f 0000 	mov.w	r0, #0
   89758:	6018      	str	r0, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   8975a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   8975e:	f2c4 010e 	movt	r1, #16398	; 0x400e
   89762:	6008      	str	r0, [r1, #0]
   89764:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   89766:	f24f 017f 	movw	r1, #61567	; 0xf07f
   8976a:	f2c0 21fa 	movt	r1, #762	; 0x2fa
   8976e:	4288      	cmp	r0, r1
   89770:	d80c      	bhi.n	8978c <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   89772:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   89776:	f2c4 000e 	movt	r0, #16398	; 0x400e
   8977a:	f44f 7180 	mov.w	r1, #256	; 0x100
   8977e:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   89780:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   89784:	f2c4 020e 	movt	r2, #16398	; 0x400e
   89788:	6011      	str	r1, [r2, #0]
   8978a:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   8978c:	f648 73ff 	movw	r3, #36863	; 0x8fff
   89790:	f2c0 33d0 	movt	r3, #976	; 0x3d0
   89794:	4298      	cmp	r0, r3
   89796:	d80c      	bhi.n	897b2 <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   89798:	f44f 6120 	mov.w	r1, #2560	; 0xa00
   8979c:	f2c4 010e 	movt	r1, #16398	; 0x400e
   897a0:	f44f 7200 	mov.w	r2, #512	; 0x200
   897a4:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   897a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   897aa:	f2c4 030e 	movt	r3, #16398	; 0x400e
   897ae:	601a      	str	r2, [r3, #0]
   897b0:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   897b2:	f24b 31ff 	movw	r1, #46079	; 0xb3ff
   897b6:	f2c0 41c4 	movt	r1, #1220	; 0x4c4
   897ba:	4288      	cmp	r0, r1
   897bc:	d80c      	bhi.n	897d8 <system_init_flash+0x98>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   897be:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   897c2:	f2c4 030e 	movt	r3, #16398	; 0x400e
   897c6:	f44f 7240 	mov.w	r2, #768	; 0x300
   897ca:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   897cc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   897d0:	f2c4 000e 	movt	r0, #16398	; 0x400e
   897d4:	6002      	str	r2, [r0, #0]
   897d6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   897d8:	f644 237f 	movw	r3, #19071	; 0x4a7f
   897dc:	f2c0 535d 	movt	r3, #1373	; 0x55d
   897e0:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   897e2:	f44f 6020 	mov.w	r0, #2560	; 0xa00
   897e6:	f2c4 000e 	movt	r0, #16398	; 0x400e
   897ea:	bf94      	ite	ls
   897ec:	f44f 6280 	movls.w	r2, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   897f0:	f44f 62a0 	movhi.w	r2, #1280	; 0x500
   897f4:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   897f6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   897fa:	f2c4 010e 	movt	r1, #16398	; 0x400e
   897fe:	600a      	str	r2, [r1, #0]
   89800:	4770      	bx	lr
   89802:	bf00      	nop

00089804 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   89804:	f241 6310 	movw	r3, #5648	; 0x1610
   89808:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8980c:	6819      	ldr	r1, [r3, #0]
   8980e:	b941      	cbnz	r1, 89822 <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
   89810:	f241 6310 	movw	r3, #5648	; 0x1610
   89814:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89818:	f643 4238 	movw	r2, #15416	; 0x3c38
   8981c:	f2c2 0207 	movt	r2, #8199	; 0x2007
   89820:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   89822:	f241 6110 	movw	r1, #5648	; 0x1610
   89826:	f2c2 0107 	movt	r1, #8199	; 0x2007
   8982a:	680b      	ldr	r3, [r1, #0]

	heap += incr;
   8982c:	1818      	adds	r0, r3, r0
   8982e:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
   89830:	4618      	mov	r0, r3
   89832:	4770      	bx	lr

00089834 <main_msc_enable>:
static bool main_b_cdc_enable = false;


bool main_msc_enable(void)
{
	main_b_msc_enable = true;
   89834:	f04f 0001 	mov.w	r0, #1
   89838:	f241 6314 	movw	r3, #5652	; 0x1614
   8983c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89840:	7018      	strb	r0, [r3, #0]
	return true;
}
   89842:	4770      	bx	lr

00089844 <main_msc_disable>:
void main_msc_disable(void)
{
	main_b_msc_enable = false;
   89844:	f241 6314 	movw	r3, #5652	; 0x1614
   89848:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8984c:	f04f 0200 	mov.w	r2, #0
   89850:	701a      	strb	r2, [r3, #0]
   89852:	4770      	bx	lr

00089854 <main_cdc_enable>:
}
bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
   89854:	f04f 0001 	mov.w	r0, #1
   89858:	f241 6315 	movw	r3, #5653	; 0x1615
   8985c:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89860:	7018      	strb	r0, [r3, #0]
	return true;
}
   89862:	4770      	bx	lr

00089864 <main_cdc_disable>:
void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
   89864:	f241 6315 	movw	r3, #5653	; 0x1615
   89868:	f2c2 0307 	movt	r3, #8199	; 0x2007
   8986c:	f04f 0200 	mov.w	r2, #0
   89870:	701a      	strb	r2, [r3, #0]
   89872:	4770      	bx	lr

00089874 <main>:
}

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   89874:	b570      	push	{r4, r5, r6, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
   89876:	f04f 0401 	mov.w	r4, #1
   8987a:	f240 2398 	movw	r3, #664	; 0x298
   8987e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   89882:	701c      	strb	r4, [r3, #0]
   89884:	f3bf 8f5f 	dmb	sy
   89888:	b662      	cpsie	i
	wdt_disable(WDT);
   8988a:	f641 2050 	movw	r0, #6736	; 0x1a50
   8988e:	f2c4 000e 	movt	r0, #16398	; 0x400e
   89892:	f641 21dd 	movw	r1, #6877	; 0x1add
   89896:	f2c0 0108 	movt	r1, #8
   8989a:	4788      	blx	r1
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
   8989c:	f641 4010 	movw	r0, #7184	; 0x1c10
   898a0:	f2c2 0007 	movt	r0, #8199	; 0x2007
   898a4:	f04f 0200 	mov.w	r2, #0
   898a8:	7002      	strb	r2, [r0, #0]
   898aa:	7042      	strb	r2, [r0, #1]
   898ac:	7082      	strb	r2, [r0, #2]
   898ae:	70c2      	strb	r2, [r0, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   898b0:	7104      	strb	r4, [r0, #4]

	// Initialize the sleep manager
	sleepmgr_init();

	// Board initialization
	sysclk_init();
   898b2:	f644 45f1 	movw	r5, #19697	; 0x4cf1
   898b6:	f2c0 0508 	movt	r5, #8
   898ba:	47a8      	blx	r5
	init_board();
   898bc:	f641 26e5 	movw	r6, #6885	; 0x1ae5
   898c0:	f2c0 0608 	movt	r6, #8
   898c4:	47b0      	blx	r6
	init_pwm();
   898c6:	f242 4421 	movw	r4, #9249	; 0x2421
   898ca:	f2c0 0408 	movt	r4, #8
   898ce:	47a0      	blx	r4
	init_i2c();
   898d0:	f242 33d1 	movw	r3, #9169	; 0x23d1
   898d4:	f2c0 0308 	movt	r3, #8
   898d8:	4798      	blx	r3

	// Module initialization	
	init_module_peripherals_bp();
   898da:	f641 7115 	movw	r1, #7957	; 0x1f15
   898de:	f2c0 0108 	movt	r1, #8
   898e2:	4788      	blx	r1

	/* Initialize SD MMC stack */
	delay_ms(200);
   898e4:	f44f 409f 	mov.w	r0, #20352	; 0x4f80
   898e8:	f2c0 0012 	movt	r0, #18
   898ec:	f240 0201 	movw	r2, #1
   898f0:	f2c2 0207 	movt	r2, #8199	; 0x2007
   898f4:	4790      	blx	r2
	sd_mmc_init();
   898f6:	f240 4069 	movw	r0, #1129	; 0x469
   898fa:	f2c0 0008 	movt	r0, #8
   898fe:	4780      	blx	r0

	// Start USB stack to authorize VBus monitoring
	udc_start();
   89900:	f246 65dd 	movw	r5, #26333	; 0x66dd
   89904:	f2c0 0508 	movt	r5, #8
   89908:	47a8      	blx	r5
	
	// Init SCPI parser
    console_init();	
   8990a:	f644 2631 	movw	r6, #18993	; 0x4a31
   8990e:	f2c0 0608 	movt	r6, #8
   89912:	47b0      	blx	r6
	
	enable_12v();
   89914:	f242 5491 	movw	r4, #9617	; 0x2591
   89918:	f2c0 0408 	movt	r4, #8
   8991c:	47a0      	blx	r4
	while (true) 
	{
		console_process();		
   8991e:	f644 2549 	movw	r5, #19017	; 0x4a49
   89922:	f2c0 0508 	movt	r5, #8

		if (main_b_msc_enable) 
   89926:	f241 6414 	movw	r4, #5652	; 0x1614
   8992a:	f2c2 0407 	movt	r4, #8199	; 0x2007
		{
			if (!udi_msc_process_trans()) 
   8992e:	f246 3639 	movw	r6, #25401	; 0x6339
   89932:	f2c0 0608 	movt	r6, #8
    console_init();	
	
	enable_12v();
	while (true) 
	{
		console_process();		
   89936:	47a8      	blx	r5

		if (main_b_msc_enable) 
   89938:	7823      	ldrb	r3, [r4, #0]
   8993a:	2b00      	cmp	r3, #0
   8993c:	d0fb      	beq.n	89936 <main+0xc2>
		{
			if (!udi_msc_process_trans()) 
   8993e:	47b0      	blx	r6
   89940:	e7f9      	b.n	89936 <main+0xc2>
   89942:	bf00      	nop

00089944 <round>:
   89944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89946:	f3c1 570a 	ubfx	r7, r1, #20, #11
   8994a:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
   8994e:	2e13      	cmp	r6, #19
   89950:	4602      	mov	r2, r0
   89952:	460b      	mov	r3, r1
   89954:	4604      	mov	r4, r0
   89956:	460d      	mov	r5, r1
   89958:	dc18      	bgt.n	8998c <round+0x48>
   8995a:	2e00      	cmp	r6, #0
   8995c:	da08      	bge.n	89970 <round+0x2c>
   8995e:	1c73      	adds	r3, r6, #1
   89960:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   89964:	d130      	bne.n	899c8 <round+0x84>
   89966:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
   8996a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   8996e:	e02b      	b.n	899c8 <round+0x84>
   89970:	4818      	ldr	r0, [pc, #96]	; (899d4 <round+0x90>)
   89972:	fa40 f006 	asr.w	r0, r0, r6
   89976:	4208      	tst	r0, r1
   89978:	d100      	bne.n	8997c <round+0x38>
   8997a:	b342      	cbz	r2, 899ce <round+0x8a>
   8997c:	f44f 2400 	mov.w	r4, #524288	; 0x80000
   89980:	fa44 f606 	asr.w	r6, r4, r6
   89984:	19ad      	adds	r5, r5, r6
   89986:	ea25 0500 	bic.w	r5, r5, r0
   8998a:	e01d      	b.n	899c8 <round+0x84>
   8998c:	2e33      	cmp	r6, #51	; 0x33
   8998e:	dd07      	ble.n	899a0 <round+0x5c>
   89990:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   89994:	d11b      	bne.n	899ce <round+0x8a>
   89996:	f000 f825 	bl	899e4 <__adddf3>
   8999a:	4602      	mov	r2, r0
   8999c:	460b      	mov	r3, r1
   8999e:	e016      	b.n	899ce <round+0x8a>
   899a0:	f2a7 4113 	subw	r1, r7, #1043	; 0x413
   899a4:	f04f 30ff 	mov.w	r0, #4294967295
   899a8:	fa20 f101 	lsr.w	r1, r0, r1
   899ac:	4211      	tst	r1, r2
   899ae:	d00e      	beq.n	899ce <round+0x8a>
   899b0:	f5c7 6786 	rsb	r7, r7, #1072	; 0x430
   899b4:	2301      	movs	r3, #1
   899b6:	1cba      	adds	r2, r7, #2
   899b8:	fa03 f702 	lsl.w	r7, r3, r2
   899bc:	193c      	adds	r4, r7, r4
   899be:	bf28      	it	cs
   899c0:	18ed      	addcs	r5, r5, r3
   899c2:	ea24 0401 	bic.w	r4, r4, r1
   899c6:	e000      	b.n	899ca <round+0x86>
   899c8:	2400      	movs	r4, #0
   899ca:	462b      	mov	r3, r5
   899cc:	4622      	mov	r2, r4
   899ce:	4610      	mov	r0, r2
   899d0:	4619      	mov	r1, r3
   899d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   899d4:	000fffff 	.word	0x000fffff

000899d8 <__aeabi_drsub>:
   899d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   899dc:	e002      	b.n	899e4 <__adddf3>
   899de:	bf00      	nop

000899e0 <__aeabi_dsub>:
   899e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000899e4 <__adddf3>:
   899e4:	b530      	push	{r4, r5, lr}
   899e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   899ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
   899ee:	ea94 0f05 	teq	r4, r5
   899f2:	bf08      	it	eq
   899f4:	ea90 0f02 	teqeq	r0, r2
   899f8:	bf1f      	itttt	ne
   899fa:	ea54 0c00 	orrsne.w	ip, r4, r0
   899fe:	ea55 0c02 	orrsne.w	ip, r5, r2
   89a02:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   89a06:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   89a0a:	f000 80e2 	beq.w	89bd2 <__adddf3+0x1ee>
   89a0e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   89a12:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   89a16:	bfb8      	it	lt
   89a18:	426d      	neglt	r5, r5
   89a1a:	dd0c      	ble.n	89a36 <__adddf3+0x52>
   89a1c:	442c      	add	r4, r5
   89a1e:	ea80 0202 	eor.w	r2, r0, r2
   89a22:	ea81 0303 	eor.w	r3, r1, r3
   89a26:	ea82 0000 	eor.w	r0, r2, r0
   89a2a:	ea83 0101 	eor.w	r1, r3, r1
   89a2e:	ea80 0202 	eor.w	r2, r0, r2
   89a32:	ea81 0303 	eor.w	r3, r1, r3
   89a36:	2d36      	cmp	r5, #54	; 0x36
   89a38:	bf88      	it	hi
   89a3a:	bd30      	pophi	{r4, r5, pc}
   89a3c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   89a40:	ea4f 3101 	mov.w	r1, r1, lsl #12
   89a44:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   89a48:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   89a4c:	d002      	beq.n	89a54 <__adddf3+0x70>
   89a4e:	4240      	negs	r0, r0
   89a50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   89a54:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   89a58:	ea4f 3303 	mov.w	r3, r3, lsl #12
   89a5c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   89a60:	d002      	beq.n	89a68 <__adddf3+0x84>
   89a62:	4252      	negs	r2, r2
   89a64:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   89a68:	ea94 0f05 	teq	r4, r5
   89a6c:	f000 80a7 	beq.w	89bbe <__adddf3+0x1da>
   89a70:	f1a4 0401 	sub.w	r4, r4, #1
   89a74:	f1d5 0e20 	rsbs	lr, r5, #32
   89a78:	db0d      	blt.n	89a96 <__adddf3+0xb2>
   89a7a:	fa02 fc0e 	lsl.w	ip, r2, lr
   89a7e:	fa22 f205 	lsr.w	r2, r2, r5
   89a82:	1880      	adds	r0, r0, r2
   89a84:	f141 0100 	adc.w	r1, r1, #0
   89a88:	fa03 f20e 	lsl.w	r2, r3, lr
   89a8c:	1880      	adds	r0, r0, r2
   89a8e:	fa43 f305 	asr.w	r3, r3, r5
   89a92:	4159      	adcs	r1, r3
   89a94:	e00e      	b.n	89ab4 <__adddf3+0xd0>
   89a96:	f1a5 0520 	sub.w	r5, r5, #32
   89a9a:	f10e 0e20 	add.w	lr, lr, #32
   89a9e:	2a01      	cmp	r2, #1
   89aa0:	fa03 fc0e 	lsl.w	ip, r3, lr
   89aa4:	bf28      	it	cs
   89aa6:	f04c 0c02 	orrcs.w	ip, ip, #2
   89aaa:	fa43 f305 	asr.w	r3, r3, r5
   89aae:	18c0      	adds	r0, r0, r3
   89ab0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   89ab4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   89ab8:	d507      	bpl.n	89aca <__adddf3+0xe6>
   89aba:	f04f 0e00 	mov.w	lr, #0
   89abe:	f1dc 0c00 	rsbs	ip, ip, #0
   89ac2:	eb7e 0000 	sbcs.w	r0, lr, r0
   89ac6:	eb6e 0101 	sbc.w	r1, lr, r1
   89aca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   89ace:	d31b      	bcc.n	89b08 <__adddf3+0x124>
   89ad0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   89ad4:	d30c      	bcc.n	89af0 <__adddf3+0x10c>
   89ad6:	0849      	lsrs	r1, r1, #1
   89ad8:	ea5f 0030 	movs.w	r0, r0, rrx
   89adc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   89ae0:	f104 0401 	add.w	r4, r4, #1
   89ae4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   89ae8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   89aec:	f080 809a 	bcs.w	89c24 <__adddf3+0x240>
   89af0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   89af4:	bf08      	it	eq
   89af6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   89afa:	f150 0000 	adcs.w	r0, r0, #0
   89afe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   89b02:	ea41 0105 	orr.w	r1, r1, r5
   89b06:	bd30      	pop	{r4, r5, pc}
   89b08:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   89b0c:	4140      	adcs	r0, r0
   89b0e:	eb41 0101 	adc.w	r1, r1, r1
   89b12:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   89b16:	f1a4 0401 	sub.w	r4, r4, #1
   89b1a:	d1e9      	bne.n	89af0 <__adddf3+0x10c>
   89b1c:	f091 0f00 	teq	r1, #0
   89b20:	bf04      	itt	eq
   89b22:	4601      	moveq	r1, r0
   89b24:	2000      	moveq	r0, #0
   89b26:	fab1 f381 	clz	r3, r1
   89b2a:	bf08      	it	eq
   89b2c:	3320      	addeq	r3, #32
   89b2e:	f1a3 030b 	sub.w	r3, r3, #11
   89b32:	f1b3 0220 	subs.w	r2, r3, #32
   89b36:	da0c      	bge.n	89b52 <__adddf3+0x16e>
   89b38:	320c      	adds	r2, #12
   89b3a:	dd08      	ble.n	89b4e <__adddf3+0x16a>
   89b3c:	f102 0c14 	add.w	ip, r2, #20
   89b40:	f1c2 020c 	rsb	r2, r2, #12
   89b44:	fa01 f00c 	lsl.w	r0, r1, ip
   89b48:	fa21 f102 	lsr.w	r1, r1, r2
   89b4c:	e00c      	b.n	89b68 <__adddf3+0x184>
   89b4e:	f102 0214 	add.w	r2, r2, #20
   89b52:	bfd8      	it	le
   89b54:	f1c2 0c20 	rsble	ip, r2, #32
   89b58:	fa01 f102 	lsl.w	r1, r1, r2
   89b5c:	fa20 fc0c 	lsr.w	ip, r0, ip
   89b60:	bfdc      	itt	le
   89b62:	ea41 010c 	orrle.w	r1, r1, ip
   89b66:	4090      	lslle	r0, r2
   89b68:	1ae4      	subs	r4, r4, r3
   89b6a:	bfa2      	ittt	ge
   89b6c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   89b70:	4329      	orrge	r1, r5
   89b72:	bd30      	popge	{r4, r5, pc}
   89b74:	ea6f 0404 	mvn.w	r4, r4
   89b78:	3c1f      	subs	r4, #31
   89b7a:	da1c      	bge.n	89bb6 <__adddf3+0x1d2>
   89b7c:	340c      	adds	r4, #12
   89b7e:	dc0e      	bgt.n	89b9e <__adddf3+0x1ba>
   89b80:	f104 0414 	add.w	r4, r4, #20
   89b84:	f1c4 0220 	rsb	r2, r4, #32
   89b88:	fa20 f004 	lsr.w	r0, r0, r4
   89b8c:	fa01 f302 	lsl.w	r3, r1, r2
   89b90:	ea40 0003 	orr.w	r0, r0, r3
   89b94:	fa21 f304 	lsr.w	r3, r1, r4
   89b98:	ea45 0103 	orr.w	r1, r5, r3
   89b9c:	bd30      	pop	{r4, r5, pc}
   89b9e:	f1c4 040c 	rsb	r4, r4, #12
   89ba2:	f1c4 0220 	rsb	r2, r4, #32
   89ba6:	fa20 f002 	lsr.w	r0, r0, r2
   89baa:	fa01 f304 	lsl.w	r3, r1, r4
   89bae:	ea40 0003 	orr.w	r0, r0, r3
   89bb2:	4629      	mov	r1, r5
   89bb4:	bd30      	pop	{r4, r5, pc}
   89bb6:	fa21 f004 	lsr.w	r0, r1, r4
   89bba:	4629      	mov	r1, r5
   89bbc:	bd30      	pop	{r4, r5, pc}
   89bbe:	f094 0f00 	teq	r4, #0
   89bc2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   89bc6:	bf06      	itte	eq
   89bc8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   89bcc:	3401      	addeq	r4, #1
   89bce:	3d01      	subne	r5, #1
   89bd0:	e74e      	b.n	89a70 <__adddf3+0x8c>
   89bd2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   89bd6:	bf18      	it	ne
   89bd8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   89bdc:	d029      	beq.n	89c32 <__adddf3+0x24e>
   89bde:	ea94 0f05 	teq	r4, r5
   89be2:	bf08      	it	eq
   89be4:	ea90 0f02 	teqeq	r0, r2
   89be8:	d005      	beq.n	89bf6 <__adddf3+0x212>
   89bea:	ea54 0c00 	orrs.w	ip, r4, r0
   89bee:	bf04      	itt	eq
   89bf0:	4619      	moveq	r1, r3
   89bf2:	4610      	moveq	r0, r2
   89bf4:	bd30      	pop	{r4, r5, pc}
   89bf6:	ea91 0f03 	teq	r1, r3
   89bfa:	bf1e      	ittt	ne
   89bfc:	2100      	movne	r1, #0
   89bfe:	2000      	movne	r0, #0
   89c00:	bd30      	popne	{r4, r5, pc}
   89c02:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   89c06:	d105      	bne.n	89c14 <__adddf3+0x230>
   89c08:	0040      	lsls	r0, r0, #1
   89c0a:	4149      	adcs	r1, r1
   89c0c:	bf28      	it	cs
   89c0e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   89c12:	bd30      	pop	{r4, r5, pc}
   89c14:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   89c18:	bf3c      	itt	cc
   89c1a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   89c1e:	bd30      	popcc	{r4, r5, pc}
   89c20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   89c24:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   89c28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   89c2c:	f04f 0000 	mov.w	r0, #0
   89c30:	bd30      	pop	{r4, r5, pc}
   89c32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   89c36:	bf1a      	itte	ne
   89c38:	4619      	movne	r1, r3
   89c3a:	4610      	movne	r0, r2
   89c3c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   89c40:	bf1c      	itt	ne
   89c42:	460b      	movne	r3, r1
   89c44:	4602      	movne	r2, r0
   89c46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   89c4a:	bf06      	itte	eq
   89c4c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   89c50:	ea91 0f03 	teqeq	r1, r3
   89c54:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   89c58:	bd30      	pop	{r4, r5, pc}
   89c5a:	bf00      	nop

00089c5c <__aeabi_ui2d>:
   89c5c:	f090 0f00 	teq	r0, #0
   89c60:	bf04      	itt	eq
   89c62:	2100      	moveq	r1, #0
   89c64:	4770      	bxeq	lr
   89c66:	b530      	push	{r4, r5, lr}
   89c68:	f44f 6480 	mov.w	r4, #1024	; 0x400
   89c6c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   89c70:	f04f 0500 	mov.w	r5, #0
   89c74:	f04f 0100 	mov.w	r1, #0
   89c78:	e750      	b.n	89b1c <__adddf3+0x138>
   89c7a:	bf00      	nop

00089c7c <__aeabi_i2d>:
   89c7c:	f090 0f00 	teq	r0, #0
   89c80:	bf04      	itt	eq
   89c82:	2100      	moveq	r1, #0
   89c84:	4770      	bxeq	lr
   89c86:	b530      	push	{r4, r5, lr}
   89c88:	f44f 6480 	mov.w	r4, #1024	; 0x400
   89c8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   89c90:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   89c94:	bf48      	it	mi
   89c96:	4240      	negmi	r0, r0
   89c98:	f04f 0100 	mov.w	r1, #0
   89c9c:	e73e      	b.n	89b1c <__adddf3+0x138>
   89c9e:	bf00      	nop

00089ca0 <__aeabi_f2d>:
   89ca0:	0042      	lsls	r2, r0, #1
   89ca2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   89ca6:	ea4f 0131 	mov.w	r1, r1, rrx
   89caa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   89cae:	bf1f      	itttt	ne
   89cb0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   89cb4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   89cb8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   89cbc:	4770      	bxne	lr
   89cbe:	f092 0f00 	teq	r2, #0
   89cc2:	bf14      	ite	ne
   89cc4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   89cc8:	4770      	bxeq	lr
   89cca:	b530      	push	{r4, r5, lr}
   89ccc:	f44f 7460 	mov.w	r4, #896	; 0x380
   89cd0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   89cd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   89cd8:	e720      	b.n	89b1c <__adddf3+0x138>
   89cda:	bf00      	nop

00089cdc <__aeabi_ul2d>:
   89cdc:	ea50 0201 	orrs.w	r2, r0, r1
   89ce0:	bf08      	it	eq
   89ce2:	4770      	bxeq	lr
   89ce4:	b530      	push	{r4, r5, lr}
   89ce6:	f04f 0500 	mov.w	r5, #0
   89cea:	e00a      	b.n	89d02 <__aeabi_l2d+0x16>

00089cec <__aeabi_l2d>:
   89cec:	ea50 0201 	orrs.w	r2, r0, r1
   89cf0:	bf08      	it	eq
   89cf2:	4770      	bxeq	lr
   89cf4:	b530      	push	{r4, r5, lr}
   89cf6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   89cfa:	d502      	bpl.n	89d02 <__aeabi_l2d+0x16>
   89cfc:	4240      	negs	r0, r0
   89cfe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   89d02:	f44f 6480 	mov.w	r4, #1024	; 0x400
   89d06:	f104 0432 	add.w	r4, r4, #50	; 0x32
   89d0a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   89d0e:	f43f aedc 	beq.w	89aca <__adddf3+0xe6>
   89d12:	f04f 0203 	mov.w	r2, #3
   89d16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   89d1a:	bf18      	it	ne
   89d1c:	3203      	addne	r2, #3
   89d1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   89d22:	bf18      	it	ne
   89d24:	3203      	addne	r2, #3
   89d26:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   89d2a:	f1c2 0320 	rsb	r3, r2, #32
   89d2e:	fa00 fc03 	lsl.w	ip, r0, r3
   89d32:	fa20 f002 	lsr.w	r0, r0, r2
   89d36:	fa01 fe03 	lsl.w	lr, r1, r3
   89d3a:	ea40 000e 	orr.w	r0, r0, lr
   89d3e:	fa21 f102 	lsr.w	r1, r1, r2
   89d42:	4414      	add	r4, r2
   89d44:	e6c1      	b.n	89aca <__adddf3+0xe6>
   89d46:	bf00      	nop

00089d48 <__aeabi_d2uiz>:
   89d48:	004a      	lsls	r2, r1, #1
   89d4a:	d211      	bcs.n	89d70 <__aeabi_d2uiz+0x28>
   89d4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   89d50:	d211      	bcs.n	89d76 <__aeabi_d2uiz+0x2e>
   89d52:	d50d      	bpl.n	89d70 <__aeabi_d2uiz+0x28>
   89d54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   89d58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   89d5c:	d40e      	bmi.n	89d7c <__aeabi_d2uiz+0x34>
   89d5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   89d62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   89d66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   89d6a:	fa23 f002 	lsr.w	r0, r3, r2
   89d6e:	4770      	bx	lr
   89d70:	f04f 0000 	mov.w	r0, #0
   89d74:	4770      	bx	lr
   89d76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   89d7a:	d102      	bne.n	89d82 <__aeabi_d2uiz+0x3a>
   89d7c:	f04f 30ff 	mov.w	r0, #4294967295
   89d80:	4770      	bx	lr
   89d82:	f04f 0000 	mov.w	r0, #0
   89d86:	4770      	bx	lr

00089d88 <__register_exitproc>:
   89d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   89d8c:	4698      	mov	r8, r3
   89d8e:	4b23      	ldr	r3, [pc, #140]	; (89e1c <__register_exitproc+0x94>)
   89d90:	4606      	mov	r6, r0
   89d92:	681c      	ldr	r4, [r3, #0]
   89d94:	460f      	mov	r7, r1
   89d96:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   89d9a:	4691      	mov	r9, r2
   89d9c:	b918      	cbnz	r0, 89da6 <__register_exitproc+0x1e>
   89d9e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   89da2:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   89da6:	6841      	ldr	r1, [r0, #4]
   89da8:	291f      	cmp	r1, #31
   89daa:	dd16      	ble.n	89dda <__register_exitproc+0x52>
   89dac:	481c      	ldr	r0, [pc, #112]	; (89e20 <__register_exitproc+0x98>)
   89dae:	b918      	cbnz	r0, 89db8 <__register_exitproc+0x30>
   89db0:	f04f 30ff 	mov.w	r0, #4294967295
   89db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   89db8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   89dbc:	f3af 8000 	nop.w
   89dc0:	2800      	cmp	r0, #0
   89dc2:	d0f5      	beq.n	89db0 <__register_exitproc+0x28>
   89dc4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   89dc8:	2500      	movs	r5, #0
   89dca:	6045      	str	r5, [r0, #4]
   89dcc:	6002      	str	r2, [r0, #0]
   89dce:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   89dd2:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   89dd6:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   89dda:	b1b6      	cbz	r6, 89e0a <__register_exitproc+0x82>
   89ddc:	6844      	ldr	r4, [r0, #4]
   89dde:	2201      	movs	r2, #1
   89de0:	fa02 f204 	lsl.w	r2, r2, r4
   89de4:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   89de8:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   89dec:	4311      	orrs	r1, r2
   89dee:	2e02      	cmp	r6, #2
   89df0:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   89df4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   89df8:	461c      	mov	r4, r3
   89dfa:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   89dfe:	d104      	bne.n	89e0a <__register_exitproc+0x82>
   89e00:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   89e04:	431a      	orrs	r2, r3
   89e06:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   89e0a:	6841      	ldr	r1, [r0, #4]
   89e0c:	1c8b      	adds	r3, r1, #2
   89e0e:	1c4a      	adds	r2, r1, #1
   89e10:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
   89e14:	6042      	str	r2, [r0, #4]
   89e16:	2000      	movs	r0, #0
   89e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   89e1c:	0008cd54 	.word	0x0008cd54
   89e20:	00000000 	.word	0x00000000

00089e24 <__libc_fini_array>:
   89e24:	b570      	push	{r4, r5, r6, lr}
   89e26:	4b08      	ldr	r3, [pc, #32]	; (89e48 <__libc_fini_array+0x24>)
   89e28:	4c08      	ldr	r4, [pc, #32]	; (89e4c <__libc_fini_array+0x28>)
   89e2a:	2500      	movs	r5, #0
   89e2c:	1ae0      	subs	r0, r4, r3
   89e2e:	1084      	asrs	r4, r0, #2
   89e30:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   89e34:	3d04      	subs	r5, #4
   89e36:	b11c      	cbz	r4, 89e40 <__libc_fini_array+0x1c>
   89e38:	5972      	ldr	r2, [r6, r5]
   89e3a:	4790      	blx	r2
   89e3c:	3c01      	subs	r4, #1
   89e3e:	e7f9      	b.n	89e34 <__libc_fini_array+0x10>
   89e40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   89e44:	f002 bfc4 	b.w	8cdd0 <_fini>
   89e48:	0008cddc 	.word	0x0008cddc
   89e4c:	0008cde0 	.word	0x0008cde0

00089e50 <__libc_init_array>:
   89e50:	b538      	push	{r3, r4, r5, lr}
   89e52:	4d0e      	ldr	r5, [pc, #56]	; (89e8c <__libc_init_array+0x3c>)
   89e54:	4b0e      	ldr	r3, [pc, #56]	; (89e90 <__libc_init_array+0x40>)
   89e56:	2400      	movs	r4, #0
   89e58:	1ae8      	subs	r0, r5, r3
   89e5a:	1085      	asrs	r5, r0, #2
   89e5c:	42ac      	cmp	r4, r5
   89e5e:	d005      	beq.n	89e6c <__libc_init_array+0x1c>
   89e60:	490b      	ldr	r1, [pc, #44]	; (89e90 <__libc_init_array+0x40>)
   89e62:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   89e66:	4790      	blx	r2
   89e68:	3401      	adds	r4, #1
   89e6a:	e7f7      	b.n	89e5c <__libc_init_array+0xc>
   89e6c:	f002 ffa6 	bl	8cdbc <_init>
   89e70:	4908      	ldr	r1, [pc, #32]	; (89e94 <__libc_init_array+0x44>)
   89e72:	4a09      	ldr	r2, [pc, #36]	; (89e98 <__libc_init_array+0x48>)
   89e74:	1a54      	subs	r4, r2, r1
   89e76:	10a5      	asrs	r5, r4, #2
   89e78:	2400      	movs	r4, #0
   89e7a:	42ac      	cmp	r4, r5
   89e7c:	d005      	beq.n	89e8a <__libc_init_array+0x3a>
   89e7e:	4b05      	ldr	r3, [pc, #20]	; (89e94 <__libc_init_array+0x44>)
   89e80:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   89e84:	4780      	blx	r0
   89e86:	3401      	adds	r4, #1
   89e88:	e7f7      	b.n	89e7a <__libc_init_array+0x2a>
   89e8a:	bd38      	pop	{r3, r4, r5, pc}
   89e8c:	0008cdc8 	.word	0x0008cdc8
   89e90:	0008cdc8 	.word	0x0008cdc8
   89e94:	0008cdc8 	.word	0x0008cdc8
   89e98:	0008cdd0 	.word	0x0008cdd0

00089e9c <memcpy>:
   89e9c:	b510      	push	{r4, lr}
   89e9e:	2300      	movs	r3, #0
   89ea0:	4293      	cmp	r3, r2
   89ea2:	d003      	beq.n	89eac <memcpy+0x10>
   89ea4:	5ccc      	ldrb	r4, [r1, r3]
   89ea6:	54c4      	strb	r4, [r0, r3]
   89ea8:	3301      	adds	r3, #1
   89eaa:	e7f9      	b.n	89ea0 <memcpy+0x4>
   89eac:	bd10      	pop	{r4, pc}

00089eae <memmove>:
   89eae:	4281      	cmp	r1, r0
   89eb0:	b570      	push	{r4, r5, r6, lr}
   89eb2:	d20e      	bcs.n	89ed2 <memmove+0x24>
   89eb4:	188c      	adds	r4, r1, r2
   89eb6:	42a0      	cmp	r0, r4
   89eb8:	d20b      	bcs.n	89ed2 <memmove+0x24>
   89eba:	1885      	adds	r5, r0, r2
   89ebc:	4613      	mov	r3, r2
   89ebe:	f113 33ff 	adds.w	r3, r3, #4294967295
   89ec2:	d305      	bcc.n	89ed0 <memmove+0x22>
   89ec4:	4251      	negs	r1, r2
   89ec6:	1866      	adds	r6, r4, r1
   89ec8:	5cf6      	ldrb	r6, [r6, r3]
   89eca:	1869      	adds	r1, r5, r1
   89ecc:	54ce      	strb	r6, [r1, r3]
   89ece:	e7f6      	b.n	89ebe <memmove+0x10>
   89ed0:	bd70      	pop	{r4, r5, r6, pc}
   89ed2:	2300      	movs	r3, #0
   89ed4:	4293      	cmp	r3, r2
   89ed6:	d003      	beq.n	89ee0 <memmove+0x32>
   89ed8:	5ccc      	ldrb	r4, [r1, r3]
   89eda:	54c4      	strb	r4, [r0, r3]
   89edc:	3301      	adds	r3, #1
   89ede:	e7f9      	b.n	89ed4 <memmove+0x26>
   89ee0:	bd70      	pop	{r4, r5, r6, pc}
	...

00089ee4 <_snprintf_r>:
   89ee4:	b408      	push	{r3}
   89ee6:	b530      	push	{r4, r5, lr}
   89ee8:	1e14      	subs	r4, r2, #0
   89eea:	b09c      	sub	sp, #112	; 0x70
   89eec:	4605      	mov	r5, r0
   89eee:	da04      	bge.n	89efa <_snprintf_r+0x16>
   89ef0:	208b      	movs	r0, #139	; 0x8b
   89ef2:	6028      	str	r0, [r5, #0]
   89ef4:	f04f 30ff 	mov.w	r0, #4294967295
   89ef8:	e01e      	b.n	89f38 <_snprintf_r+0x54>
   89efa:	f44f 7302 	mov.w	r3, #520	; 0x208
   89efe:	f8ad 3014 	strh.w	r3, [sp, #20]
   89f02:	9102      	str	r1, [sp, #8]
   89f04:	9106      	str	r1, [sp, #24]
   89f06:	d001      	beq.n	89f0c <_snprintf_r+0x28>
   89f08:	1e60      	subs	r0, r4, #1
   89f0a:	e000      	b.n	89f0e <_snprintf_r+0x2a>
   89f0c:	4620      	mov	r0, r4
   89f0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   89f12:	ab20      	add	r3, sp, #128	; 0x80
   89f14:	9004      	str	r0, [sp, #16]
   89f16:	9007      	str	r0, [sp, #28]
   89f18:	f8ad 1016 	strh.w	r1, [sp, #22]
   89f1c:	4628      	mov	r0, r5
   89f1e:	a902      	add	r1, sp, #8
   89f20:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   89f22:	9301      	str	r3, [sp, #4]
   89f24:	f000 f922 	bl	8a16c <_svfprintf_r>
   89f28:	1c43      	adds	r3, r0, #1
   89f2a:	da01      	bge.n	89f30 <_snprintf_r+0x4c>
   89f2c:	228b      	movs	r2, #139	; 0x8b
   89f2e:	602a      	str	r2, [r5, #0]
   89f30:	b114      	cbz	r4, 89f38 <_snprintf_r+0x54>
   89f32:	9b02      	ldr	r3, [sp, #8]
   89f34:	2100      	movs	r1, #0
   89f36:	7019      	strb	r1, [r3, #0]
   89f38:	b01c      	add	sp, #112	; 0x70
   89f3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   89f3e:	b001      	add	sp, #4
   89f40:	4770      	bx	lr

00089f42 <snprintf>:
   89f42:	b40c      	push	{r2, r3}
   89f44:	b530      	push	{r4, r5, lr}
   89f46:	4b17      	ldr	r3, [pc, #92]	; (89fa4 <snprintf+0x62>)
   89f48:	1e0c      	subs	r4, r1, #0
   89f4a:	b09d      	sub	sp, #116	; 0x74
   89f4c:	681d      	ldr	r5, [r3, #0]
   89f4e:	da04      	bge.n	89f5a <snprintf+0x18>
   89f50:	208b      	movs	r0, #139	; 0x8b
   89f52:	6028      	str	r0, [r5, #0]
   89f54:	f04f 30ff 	mov.w	r0, #4294967295
   89f58:	e01e      	b.n	89f98 <snprintf+0x56>
   89f5a:	f44f 7102 	mov.w	r1, #520	; 0x208
   89f5e:	f8ad 1014 	strh.w	r1, [sp, #20]
   89f62:	9002      	str	r0, [sp, #8]
   89f64:	9006      	str	r0, [sp, #24]
   89f66:	d001      	beq.n	89f6c <snprintf+0x2a>
   89f68:	1e60      	subs	r0, r4, #1
   89f6a:	e000      	b.n	89f6e <snprintf+0x2c>
   89f6c:	4620      	mov	r0, r4
   89f6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   89f72:	9004      	str	r0, [sp, #16]
   89f74:	9007      	str	r0, [sp, #28]
   89f76:	f8ad 2016 	strh.w	r2, [sp, #22]
   89f7a:	ab21      	add	r3, sp, #132	; 0x84
   89f7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   89f7e:	4628      	mov	r0, r5
   89f80:	a902      	add	r1, sp, #8
   89f82:	9301      	str	r3, [sp, #4]
   89f84:	f000 f8f2 	bl	8a16c <_svfprintf_r>
   89f88:	1c42      	adds	r2, r0, #1
   89f8a:	da01      	bge.n	89f90 <snprintf+0x4e>
   89f8c:	238b      	movs	r3, #139	; 0x8b
   89f8e:	602b      	str	r3, [r5, #0]
   89f90:	b114      	cbz	r4, 89f98 <snprintf+0x56>
   89f92:	9a02      	ldr	r2, [sp, #8]
   89f94:	2100      	movs	r1, #0
   89f96:	7011      	strb	r1, [r2, #0]
   89f98:	b01d      	add	sp, #116	; 0x74
   89f9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   89f9e:	b002      	add	sp, #8
   89fa0:	4770      	bx	lr
   89fa2:	bf00      	nop
   89fa4:	200702a8 	.word	0x200702a8

00089fa8 <strlen>:
   89fa8:	4603      	mov	r3, r0
   89faa:	f813 2b01 	ldrb.w	r2, [r3], #1
   89fae:	2a00      	cmp	r2, #0
   89fb0:	d1fb      	bne.n	89faa <strlen+0x2>
   89fb2:	1a18      	subs	r0, r3, r0
   89fb4:	3801      	subs	r0, #1
   89fb6:	4770      	bx	lr

00089fb8 <strncasecmp>:
   89fb8:	4b0f      	ldr	r3, [pc, #60]	; (89ff8 <strncasecmp+0x40>)
   89fba:	b5f0      	push	{r4, r5, r6, r7, lr}
   89fbc:	681e      	ldr	r6, [r3, #0]
   89fbe:	2300      	movs	r3, #0
   89fc0:	4293      	cmp	r3, r2
   89fc2:	d015      	beq.n	89ff0 <strncasecmp+0x38>
   89fc4:	5cc5      	ldrb	r5, [r0, r3]
   89fc6:	1974      	adds	r4, r6, r5
   89fc8:	7867      	ldrb	r7, [r4, #1]
   89fca:	f007 0403 	and.w	r4, r7, #3
   89fce:	2c01      	cmp	r4, #1
   89fd0:	5ccc      	ldrb	r4, [r1, r3]
   89fd2:	bf08      	it	eq
   89fd4:	3520      	addeq	r5, #32
   89fd6:	1937      	adds	r7, r6, r4
   89fd8:	787f      	ldrb	r7, [r7, #1]
   89fda:	f007 0703 	and.w	r7, r7, #3
   89fde:	2f01      	cmp	r7, #1
   89fe0:	bf08      	it	eq
   89fe2:	3420      	addeq	r4, #32
   89fe4:	1b2d      	subs	r5, r5, r4
   89fe6:	d104      	bne.n	89ff2 <strncasecmp+0x3a>
   89fe8:	3301      	adds	r3, #1
   89fea:	2c00      	cmp	r4, #0
   89fec:	d1e8      	bne.n	89fc0 <strncasecmp+0x8>
   89fee:	e000      	b.n	89ff2 <strncasecmp+0x3a>
   89ff0:	2500      	movs	r5, #0
   89ff2:	4628      	mov	r0, r5
   89ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   89ff6:	bf00      	nop
   89ff8:	200702a0 	.word	0x200702a0

00089ffc <strncmp>:
   89ffc:	b570      	push	{r4, r5, r6, lr}
   89ffe:	b192      	cbz	r2, 8a026 <strncmp+0x2a>
   8a000:	460b      	mov	r3, r1
   8a002:	4605      	mov	r5, r0
   8a004:	b91a      	cbnz	r2, 8a00e <strncmp+0x12>
   8a006:	7828      	ldrb	r0, [r5, #0]
   8a008:	7819      	ldrb	r1, [r3, #0]
   8a00a:	1a40      	subs	r0, r0, r1
   8a00c:	bd70      	pop	{r4, r5, r6, pc}
   8a00e:	f810 6b01 	ldrb.w	r6, [r0], #1
   8a012:	781c      	ldrb	r4, [r3, #0]
   8a014:	3101      	adds	r1, #1
   8a016:	42b4      	cmp	r4, r6
   8a018:	d1f5      	bne.n	8a006 <strncmp+0xa>
   8a01a:	2a01      	cmp	r2, #1
   8a01c:	d0f3      	beq.n	8a006 <strncmp+0xa>
   8a01e:	3a01      	subs	r2, #1
   8a020:	2c00      	cmp	r4, #0
   8a022:	d1ed      	bne.n	8a000 <strncmp+0x4>
   8a024:	e7ef      	b.n	8a006 <strncmp+0xa>
   8a026:	4610      	mov	r0, r2
   8a028:	bd70      	pop	{r4, r5, r6, pc}

0008a02a <strnlen>:
   8a02a:	b510      	push	{r4, lr}
   8a02c:	4603      	mov	r3, r0
   8a02e:	1841      	adds	r1, r0, r1
   8a030:	428b      	cmp	r3, r1
   8a032:	461a      	mov	r2, r3
   8a034:	d101      	bne.n	8a03a <strnlen+0x10>
   8a036:	1a10      	subs	r0, r2, r0
   8a038:	bd10      	pop	{r4, pc}
   8a03a:	7814      	ldrb	r4, [r2, #0]
   8a03c:	3301      	adds	r3, #1
   8a03e:	2c00      	cmp	r4, #0
   8a040:	d1f6      	bne.n	8a030 <strnlen+0x6>
   8a042:	e7f8      	b.n	8a036 <strnlen+0xc>

0008a044 <_strtol_r>:
   8a044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a048:	9001      	str	r0, [sp, #4]
   8a04a:	4840      	ldr	r0, [pc, #256]	; (8a14c <_strtol_r+0x108>)
   8a04c:	f8d0 9000 	ldr.w	r9, [r0]
   8a050:	4608      	mov	r0, r1
   8a052:	4604      	mov	r4, r0
   8a054:	f814 5b01 	ldrb.w	r5, [r4], #1
   8a058:	eb09 0605 	add.w	r6, r9, r5
   8a05c:	7877      	ldrb	r7, [r6, #1]
   8a05e:	4620      	mov	r0, r4
   8a060:	f007 0608 	and.w	r6, r7, #8
   8a064:	b2f7      	uxtb	r7, r6
   8a066:	2f00      	cmp	r7, #0
   8a068:	d1f3      	bne.n	8a052 <_strtol_r+0xe>
   8a06a:	2d2d      	cmp	r5, #45	; 0x2d
   8a06c:	d103      	bne.n	8a076 <_strtol_r+0x32>
   8a06e:	f814 5b01 	ldrb.w	r5, [r4], #1
   8a072:	2701      	movs	r7, #1
   8a074:	e004      	b.n	8a080 <_strtol_r+0x3c>
   8a076:	2d2b      	cmp	r5, #43	; 0x2b
   8a078:	bf04      	itt	eq
   8a07a:	4624      	moveq	r4, r4
   8a07c:	f814 5b01 	ldrbeq.w	r5, [r4], #1
   8a080:	2b00      	cmp	r3, #0
   8a082:	d05c      	beq.n	8a13e <_strtol_r+0xfa>
   8a084:	2b10      	cmp	r3, #16
   8a086:	d107      	bne.n	8a098 <_strtol_r+0x54>
   8a088:	2d30      	cmp	r5, #48	; 0x30
   8a08a:	d105      	bne.n	8a098 <_strtol_r+0x54>
   8a08c:	7825      	ldrb	r5, [r4, #0]
   8a08e:	2d78      	cmp	r5, #120	; 0x78
   8a090:	d14e      	bne.n	8a130 <_strtol_r+0xec>
   8a092:	7865      	ldrb	r5, [r4, #1]
   8a094:	2310      	movs	r3, #16
   8a096:	3402      	adds	r4, #2
   8a098:	2f00      	cmp	r7, #0
   8a09a:	bf0c      	ite	eq
   8a09c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8a0a0:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   8a0a4:	fbb0 faf3 	udiv	sl, r0, r3
   8a0a8:	2600      	movs	r6, #0
   8a0aa:	fb03 081a 	mls	r8, r3, sl, r0
   8a0ae:	4630      	mov	r0, r6
   8a0b0:	eb09 0c05 	add.w	ip, r9, r5
   8a0b4:	f89c c001 	ldrb.w	ip, [ip, #1]
   8a0b8:	f00c 0b04 	and.w	fp, ip, #4
   8a0bc:	fa5f fb8b 	uxtb.w	fp, fp
   8a0c0:	f1bb 0f00 	cmp.w	fp, #0
   8a0c4:	d001      	beq.n	8a0ca <_strtol_r+0x86>
   8a0c6:	3d30      	subs	r5, #48	; 0x30
   8a0c8:	e00b      	b.n	8a0e2 <_strtol_r+0x9e>
   8a0ca:	f01c 0c03 	ands.w	ip, ip, #3
   8a0ce:	d01b      	beq.n	8a108 <_strtol_r+0xc4>
   8a0d0:	f1bc 0f01 	cmp.w	ip, #1
   8a0d4:	bf14      	ite	ne
   8a0d6:	f04f 0c57 	movne.w	ip, #87	; 0x57
   8a0da:	f04f 0c37 	moveq.w	ip, #55	; 0x37
   8a0de:	ebcc 0505 	rsb	r5, ip, r5
   8a0e2:	429d      	cmp	r5, r3
   8a0e4:	da10      	bge.n	8a108 <_strtol_r+0xc4>
   8a0e6:	f1b6 3fff 	cmp.w	r6, #4294967295
   8a0ea:	d00a      	beq.n	8a102 <_strtol_r+0xbe>
   8a0ec:	4550      	cmp	r0, sl
   8a0ee:	d806      	bhi.n	8a0fe <_strtol_r+0xba>
   8a0f0:	d101      	bne.n	8a0f6 <_strtol_r+0xb2>
   8a0f2:	4545      	cmp	r5, r8
   8a0f4:	dc03      	bgt.n	8a0fe <_strtol_r+0xba>
   8a0f6:	fb03 5000 	mla	r0, r3, r0, r5
   8a0fa:	2601      	movs	r6, #1
   8a0fc:	e001      	b.n	8a102 <_strtol_r+0xbe>
   8a0fe:	f04f 36ff 	mov.w	r6, #4294967295
   8a102:	f814 5b01 	ldrb.w	r5, [r4], #1
   8a106:	e7d3      	b.n	8a0b0 <_strtol_r+0x6c>
   8a108:	1c73      	adds	r3, r6, #1
   8a10a:	d10a      	bne.n	8a122 <_strtol_r+0xde>
   8a10c:	2f00      	cmp	r7, #0
   8a10e:	9901      	ldr	r1, [sp, #4]
   8a110:	bf0c      	ite	eq
   8a112:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8a116:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   8a11a:	2322      	movs	r3, #34	; 0x22
   8a11c:	600b      	str	r3, [r1, #0]
   8a11e:	b922      	cbnz	r2, 8a12a <_strtol_r+0xe6>
   8a120:	e011      	b.n	8a146 <_strtol_r+0x102>
   8a122:	b107      	cbz	r7, 8a126 <_strtol_r+0xe2>
   8a124:	4240      	negs	r0, r0
   8a126:	b172      	cbz	r2, 8a146 <_strtol_r+0x102>
   8a128:	b106      	cbz	r6, 8a12c <_strtol_r+0xe8>
   8a12a:	1e61      	subs	r1, r4, #1
   8a12c:	6011      	str	r1, [r2, #0]
   8a12e:	e00a      	b.n	8a146 <_strtol_r+0x102>
   8a130:	2d58      	cmp	r5, #88	; 0x58
   8a132:	d0ae      	beq.n	8a092 <_strtol_r+0x4e>
   8a134:	2530      	movs	r5, #48	; 0x30
   8a136:	2b00      	cmp	r3, #0
   8a138:	d1ae      	bne.n	8a098 <_strtol_r+0x54>
   8a13a:	2308      	movs	r3, #8
   8a13c:	e7ac      	b.n	8a098 <_strtol_r+0x54>
   8a13e:	2d30      	cmp	r5, #48	; 0x30
   8a140:	d0a4      	beq.n	8a08c <_strtol_r+0x48>
   8a142:	230a      	movs	r3, #10
   8a144:	e7a8      	b.n	8a098 <_strtol_r+0x54>
   8a146:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a14a:	bf00      	nop
   8a14c:	200702a0 	.word	0x200702a0

0008a150 <strtol>:
   8a150:	b530      	push	{r4, r5, lr}
   8a152:	4613      	mov	r3, r2
   8a154:	4a04      	ldr	r2, [pc, #16]	; (8a168 <strtol+0x18>)
   8a156:	4605      	mov	r5, r0
   8a158:	460c      	mov	r4, r1
   8a15a:	6810      	ldr	r0, [r2, #0]
   8a15c:	4629      	mov	r1, r5
   8a15e:	4622      	mov	r2, r4
   8a160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8a164:	f7ff bf6e 	b.w	8a044 <_strtol_r>
   8a168:	200702a8 	.word	0x200702a8

0008a16c <_svfprintf_r>:
   8a16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a170:	461e      	mov	r6, r3
   8a172:	898b      	ldrh	r3, [r1, #12]
   8a174:	4689      	mov	r9, r1
   8a176:	f003 0180 	and.w	r1, r3, #128	; 0x80
   8a17a:	4614      	mov	r4, r2
   8a17c:	b20a      	sxth	r2, r1
   8a17e:	b0a9      	sub	sp, #164	; 0xa4
   8a180:	4683      	mov	fp, r0
   8a182:	b19a      	cbz	r2, 8a1ac <_svfprintf_r+0x40>
   8a184:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8a188:	b983      	cbnz	r3, 8a1ac <_svfprintf_r+0x40>
   8a18a:	2140      	movs	r1, #64	; 0x40
   8a18c:	f000 fcfe 	bl	8ab8c <_malloc_r>
   8a190:	f8c9 0000 	str.w	r0, [r9]
   8a194:	f8c9 0010 	str.w	r0, [r9, #16]
   8a198:	b928      	cbnz	r0, 8a1a6 <_svfprintf_r+0x3a>
   8a19a:	220c      	movs	r2, #12
   8a19c:	f8cb 2000 	str.w	r2, [fp]
   8a1a0:	f04f 30ff 	mov.w	r0, #4294967295
   8a1a4:	e3da      	b.n	8a95c <_svfprintf_r+0x7f0>
   8a1a6:	2040      	movs	r0, #64	; 0x40
   8a1a8:	f8c9 0014 	str.w	r0, [r9, #20]
   8a1ac:	2100      	movs	r1, #0
   8a1ae:	ad18      	add	r5, sp, #96	; 0x60
   8a1b0:	950b      	str	r5, [sp, #44]	; 0x2c
   8a1b2:	910d      	str	r1, [sp, #52]	; 0x34
   8a1b4:	910c      	str	r1, [sp, #48]	; 0x30
   8a1b6:	9401      	str	r4, [sp, #4]
   8a1b8:	9105      	str	r1, [sp, #20]
   8a1ba:	9104      	str	r1, [sp, #16]
   8a1bc:	46a8      	mov	r8, r5
   8a1be:	9b01      	ldr	r3, [sp, #4]
   8a1c0:	461c      	mov	r4, r3
   8a1c2:	f813 2b01 	ldrb.w	r2, [r3], #1
   8a1c6:	b91a      	cbnz	r2, 8a1d0 <_svfprintf_r+0x64>
   8a1c8:	9801      	ldr	r0, [sp, #4]
   8a1ca:	1a25      	subs	r5, r4, r0
   8a1cc:	d103      	bne.n	8a1d6 <_svfprintf_r+0x6a>
   8a1ce:	e01d      	b.n	8a20c <_svfprintf_r+0xa0>
   8a1d0:	2a25      	cmp	r2, #37	; 0x25
   8a1d2:	d1f5      	bne.n	8a1c0 <_svfprintf_r+0x54>
   8a1d4:	e7f8      	b.n	8a1c8 <_svfprintf_r+0x5c>
   8a1d6:	9a01      	ldr	r2, [sp, #4]
   8a1d8:	990d      	ldr	r1, [sp, #52]	; 0x34
   8a1da:	e888 0024 	stmia.w	r8, {r2, r5}
   8a1de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8a1e0:	194b      	adds	r3, r1, r5
   8a1e2:	1c50      	adds	r0, r2, #1
   8a1e4:	2807      	cmp	r0, #7
   8a1e6:	930d      	str	r3, [sp, #52]	; 0x34
   8a1e8:	900c      	str	r0, [sp, #48]	; 0x30
   8a1ea:	dc02      	bgt.n	8a1f2 <_svfprintf_r+0x86>
   8a1ec:	f108 0808 	add.w	r8, r8, #8
   8a1f0:	e009      	b.n	8a206 <_svfprintf_r+0x9a>
   8a1f2:	4658      	mov	r0, fp
   8a1f4:	4649      	mov	r1, r9
   8a1f6:	aa0b      	add	r2, sp, #44	; 0x2c
   8a1f8:	f001 f858 	bl	8b2ac <__ssprint_r>
   8a1fc:	2800      	cmp	r0, #0
   8a1fe:	f040 83a2 	bne.w	8a946 <_svfprintf_r+0x7da>
   8a202:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8a206:	9904      	ldr	r1, [sp, #16]
   8a208:	194b      	adds	r3, r1, r5
   8a20a:	9304      	str	r3, [sp, #16]
   8a20c:	7822      	ldrb	r2, [r4, #0]
   8a20e:	2a00      	cmp	r2, #0
   8a210:	f000 8392 	beq.w	8a938 <_svfprintf_r+0x7cc>
   8a214:	2200      	movs	r2, #0
   8a216:	3401      	adds	r4, #1
   8a218:	9401      	str	r4, [sp, #4]
   8a21a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8a21e:	f04f 3cff 	mov.w	ip, #4294967295
   8a222:	9203      	str	r2, [sp, #12]
   8a224:	4617      	mov	r7, r2
   8a226:	9801      	ldr	r0, [sp, #4]
   8a228:	f810 3b01 	ldrb.w	r3, [r0], #1
   8a22c:	9001      	str	r0, [sp, #4]
   8a22e:	2b63      	cmp	r3, #99	; 0x63
   8a230:	f000 80b3 	beq.w	8a39a <_svfprintf_r+0x22e>
   8a234:	dc33      	bgt.n	8a29e <_svfprintf_r+0x132>
   8a236:	2b39      	cmp	r3, #57	; 0x39
   8a238:	dc1a      	bgt.n	8a270 <_svfprintf_r+0x104>
   8a23a:	2b31      	cmp	r3, #49	; 0x31
   8a23c:	f280 8091 	bge.w	8a362 <_svfprintf_r+0x1f6>
   8a240:	2b2b      	cmp	r3, #43	; 0x2b
   8a242:	d101      	bne.n	8a248 <_svfprintf_r+0xdc>
   8a244:	461a      	mov	r2, r3
   8a246:	e7ee      	b.n	8a226 <_svfprintf_r+0xba>
   8a248:	dc0a      	bgt.n	8a260 <_svfprintf_r+0xf4>
   8a24a:	2b23      	cmp	r3, #35	; 0x23
   8a24c:	d055      	beq.n	8a2fa <_svfprintf_r+0x18e>
   8a24e:	2b2a      	cmp	r3, #42	; 0x2a
   8a250:	d056      	beq.n	8a300 <_svfprintf_r+0x194>
   8a252:	2b20      	cmp	r3, #32
   8a254:	f040 81f5 	bne.w	8a642 <_svfprintf_r+0x4d6>
   8a258:	2a00      	cmp	r2, #0
   8a25a:	bf08      	it	eq
   8a25c:	2220      	moveq	r2, #32
   8a25e:	e7e2      	b.n	8a226 <_svfprintf_r+0xba>
   8a260:	2b2e      	cmp	r3, #46	; 0x2e
   8a262:	d058      	beq.n	8a316 <_svfprintf_r+0x1aa>
   8a264:	2b30      	cmp	r3, #48	; 0x30
   8a266:	d079      	beq.n	8a35c <_svfprintf_r+0x1f0>
   8a268:	2b2d      	cmp	r3, #45	; 0x2d
   8a26a:	f040 81ea 	bne.w	8a642 <_svfprintf_r+0x4d6>
   8a26e:	e04f      	b.n	8a310 <_svfprintf_r+0x1a4>
   8a270:	2b4f      	cmp	r3, #79	; 0x4f
   8a272:	f000 80de 	beq.w	8a432 <_svfprintf_r+0x2c6>
   8a276:	dc07      	bgt.n	8a288 <_svfprintf_r+0x11c>
   8a278:	2b44      	cmp	r3, #68	; 0x44
   8a27a:	f040 81e2 	bne.w	8a642 <_svfprintf_r+0x4d6>
   8a27e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8a282:	f047 0710 	orr.w	r7, r7, #16
   8a286:	e090      	b.n	8a3aa <_svfprintf_r+0x23e>
   8a288:	2b55      	cmp	r3, #85	; 0x55
   8a28a:	f000 811f 	beq.w	8a4cc <_svfprintf_r+0x360>
   8a28e:	2b58      	cmp	r3, #88	; 0x58
   8a290:	f040 81d7 	bne.w	8a642 <_svfprintf_r+0x4d6>
   8a294:	4dae      	ldr	r5, [pc, #696]	; (8a550 <_svfprintf_r+0x3e4>)
   8a296:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8a29a:	9505      	str	r5, [sp, #20]
   8a29c:	e130      	b.n	8a500 <_svfprintf_r+0x394>
   8a29e:	2b6f      	cmp	r3, #111	; 0x6f
   8a2a0:	f000 80c9 	beq.w	8a436 <_svfprintf_r+0x2ca>
   8a2a4:	dc10      	bgt.n	8a2c8 <_svfprintf_r+0x15c>
   8a2a6:	2b69      	cmp	r3, #105	; 0x69
   8a2a8:	d024      	beq.n	8a2f4 <_svfprintf_r+0x188>
   8a2aa:	dc07      	bgt.n	8a2bc <_svfprintf_r+0x150>
   8a2ac:	2b64      	cmp	r3, #100	; 0x64
   8a2ae:	d021      	beq.n	8a2f4 <_svfprintf_r+0x188>
   8a2b0:	2b68      	cmp	r3, #104	; 0x68
   8a2b2:	f040 81c6 	bne.w	8a642 <_svfprintf_r+0x4d6>
   8a2b6:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   8a2ba:	e7b4      	b.n	8a226 <_svfprintf_r+0xba>
   8a2bc:	2b6c      	cmp	r3, #108	; 0x6c
   8a2be:	d05f      	beq.n	8a380 <_svfprintf_r+0x214>
   8a2c0:	2b6e      	cmp	r3, #110	; 0x6e
   8a2c2:	f040 81be 	bne.w	8a642 <_svfprintf_r+0x4d6>
   8a2c6:	e096      	b.n	8a3f6 <_svfprintf_r+0x28a>
   8a2c8:	2b73      	cmp	r3, #115	; 0x73
   8a2ca:	f000 80df 	beq.w	8a48c <_svfprintf_r+0x320>
   8a2ce:	dc06      	bgt.n	8a2de <_svfprintf_r+0x172>
   8a2d0:	2b70      	cmp	r3, #112	; 0x70
   8a2d2:	f000 80cd 	beq.w	8a470 <_svfprintf_r+0x304>
   8a2d6:	2b71      	cmp	r3, #113	; 0x71
   8a2d8:	f040 81b3 	bne.w	8a642 <_svfprintf_r+0x4d6>
   8a2dc:	e05a      	b.n	8a394 <_svfprintf_r+0x228>
   8a2de:	2b75      	cmp	r3, #117	; 0x75
   8a2e0:	f000 80f6 	beq.w	8a4d0 <_svfprintf_r+0x364>
   8a2e4:	2b78      	cmp	r3, #120	; 0x78
   8a2e6:	f040 81ac 	bne.w	8a642 <_svfprintf_r+0x4d6>
   8a2ea:	4d9a      	ldr	r5, [pc, #616]	; (8a554 <_svfprintf_r+0x3e8>)
   8a2ec:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8a2f0:	9505      	str	r5, [sp, #20]
   8a2f2:	e105      	b.n	8a500 <_svfprintf_r+0x394>
   8a2f4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8a2f8:	e057      	b.n	8a3aa <_svfprintf_r+0x23e>
   8a2fa:	f047 0701 	orr.w	r7, r7, #1
   8a2fe:	e792      	b.n	8a226 <_svfprintf_r+0xba>
   8a300:	1d33      	adds	r3, r6, #4
   8a302:	6836      	ldr	r6, [r6, #0]
   8a304:	2e00      	cmp	r6, #0
   8a306:	9603      	str	r6, [sp, #12]
   8a308:	da15      	bge.n	8a336 <_svfprintf_r+0x1ca>
   8a30a:	4270      	negs	r0, r6
   8a30c:	9003      	str	r0, [sp, #12]
   8a30e:	461e      	mov	r6, r3
   8a310:	f047 0704 	orr.w	r7, r7, #4
   8a314:	e787      	b.n	8a226 <_svfprintf_r+0xba>
   8a316:	9901      	ldr	r1, [sp, #4]
   8a318:	f811 3b01 	ldrb.w	r3, [r1], #1
   8a31c:	2b2a      	cmp	r3, #42	; 0x2a
   8a31e:	9101      	str	r1, [sp, #4]
   8a320:	d10b      	bne.n	8a33a <_svfprintf_r+0x1ce>
   8a322:	f8d6 c000 	ldr.w	ip, [r6]
   8a326:	1d33      	adds	r3, r6, #4
   8a328:	f1bc 0f00 	cmp.w	ip, #0
   8a32c:	da03      	bge.n	8a336 <_svfprintf_r+0x1ca>
   8a32e:	461e      	mov	r6, r3
   8a330:	f04f 3cff 	mov.w	ip, #4294967295
   8a334:	e777      	b.n	8a226 <_svfprintf_r+0xba>
   8a336:	461e      	mov	r6, r3
   8a338:	e775      	b.n	8a226 <_svfprintf_r+0xba>
   8a33a:	f04f 0c00 	mov.w	ip, #0
   8a33e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8a342:	2809      	cmp	r0, #9
   8a344:	d807      	bhi.n	8a356 <_svfprintf_r+0x1ea>
   8a346:	9901      	ldr	r1, [sp, #4]
   8a348:	230a      	movs	r3, #10
   8a34a:	fb03 0c0c 	mla	ip, r3, ip, r0
   8a34e:	f811 3b01 	ldrb.w	r3, [r1], #1
   8a352:	9101      	str	r1, [sp, #4]
   8a354:	e7f3      	b.n	8a33e <_svfprintf_r+0x1d2>
   8a356:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   8a35a:	e768      	b.n	8a22e <_svfprintf_r+0xc2>
   8a35c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8a360:	e761      	b.n	8a226 <_svfprintf_r+0xba>
   8a362:	9801      	ldr	r0, [sp, #4]
   8a364:	2100      	movs	r1, #0
   8a366:	3b30      	subs	r3, #48	; 0x30
   8a368:	240a      	movs	r4, #10
   8a36a:	fb04 3101 	mla	r1, r4, r1, r3
   8a36e:	f810 3b01 	ldrb.w	r3, [r0], #1
   8a372:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   8a376:	2c09      	cmp	r4, #9
   8a378:	9001      	str	r0, [sp, #4]
   8a37a:	d9f4      	bls.n	8a366 <_svfprintf_r+0x1fa>
   8a37c:	9103      	str	r1, [sp, #12]
   8a37e:	e756      	b.n	8a22e <_svfprintf_r+0xc2>
   8a380:	9901      	ldr	r1, [sp, #4]
   8a382:	780b      	ldrb	r3, [r1, #0]
   8a384:	2b6c      	cmp	r3, #108	; 0x6c
   8a386:	d102      	bne.n	8a38e <_svfprintf_r+0x222>
   8a388:	1c48      	adds	r0, r1, #1
   8a38a:	9001      	str	r0, [sp, #4]
   8a38c:	e002      	b.n	8a394 <_svfprintf_r+0x228>
   8a38e:	f047 0710 	orr.w	r7, r7, #16
   8a392:	e748      	b.n	8a226 <_svfprintf_r+0xba>
   8a394:	f047 0720 	orr.w	r7, r7, #32
   8a398:	e745      	b.n	8a226 <_svfprintf_r+0xba>
   8a39a:	6832      	ldr	r2, [r6, #0]
   8a39c:	2500      	movs	r5, #0
   8a39e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   8a3a2:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8a3a6:	3604      	adds	r6, #4
   8a3a8:	e155      	b.n	8a656 <_svfprintf_r+0x4ea>
   8a3aa:	06ba      	lsls	r2, r7, #26
   8a3ac:	d507      	bpl.n	8a3be <_svfprintf_r+0x252>
   8a3ae:	3607      	adds	r6, #7
   8a3b0:	f026 0507 	bic.w	r5, r6, #7
   8a3b4:	f105 0608 	add.w	r6, r5, #8
   8a3b8:	e9d5 4500 	ldrd	r4, r5, [r5]
   8a3bc:	e00f      	b.n	8a3de <_svfprintf_r+0x272>
   8a3be:	f017 0f10 	tst.w	r7, #16
   8a3c2:	f106 0104 	add.w	r1, r6, #4
   8a3c6:	d001      	beq.n	8a3cc <_svfprintf_r+0x260>
   8a3c8:	6832      	ldr	r2, [r6, #0]
   8a3ca:	e005      	b.n	8a3d8 <_svfprintf_r+0x26c>
   8a3cc:	f017 0f40 	tst.w	r7, #64	; 0x40
   8a3d0:	6832      	ldr	r2, [r6, #0]
   8a3d2:	d001      	beq.n	8a3d8 <_svfprintf_r+0x26c>
   8a3d4:	b214      	sxth	r4, r2
   8a3d6:	e000      	b.n	8a3da <_svfprintf_r+0x26e>
   8a3d8:	4614      	mov	r4, r2
   8a3da:	17e5      	asrs	r5, r4, #31
   8a3dc:	460e      	mov	r6, r1
   8a3de:	2c00      	cmp	r4, #0
   8a3e0:	f175 0200 	sbcs.w	r2, r5, #0
   8a3e4:	f280 80b8 	bge.w	8a558 <_svfprintf_r+0x3ec>
   8a3e8:	232d      	movs	r3, #45	; 0x2d
   8a3ea:	4264      	negs	r4, r4
   8a3ec:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8a3f0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   8a3f4:	e0b0      	b.n	8a558 <_svfprintf_r+0x3ec>
   8a3f6:	f017 0f20 	tst.w	r7, #32
   8a3fa:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8a3fe:	f106 0204 	add.w	r2, r6, #4
   8a402:	d005      	beq.n	8a410 <_svfprintf_r+0x2a4>
   8a404:	9c04      	ldr	r4, [sp, #16]
   8a406:	6835      	ldr	r5, [r6, #0]
   8a408:	17e0      	asrs	r0, r4, #31
   8a40a:	602c      	str	r4, [r5, #0]
   8a40c:	6068      	str	r0, [r5, #4]
   8a40e:	e004      	b.n	8a41a <_svfprintf_r+0x2ae>
   8a410:	06fb      	lsls	r3, r7, #27
   8a412:	d504      	bpl.n	8a41e <_svfprintf_r+0x2b2>
   8a414:	6833      	ldr	r3, [r6, #0]
   8a416:	9904      	ldr	r1, [sp, #16]
   8a418:	6019      	str	r1, [r3, #0]
   8a41a:	4616      	mov	r6, r2
   8a41c:	e6cf      	b.n	8a1be <_svfprintf_r+0x52>
   8a41e:	6830      	ldr	r0, [r6, #0]
   8a420:	9c04      	ldr	r4, [sp, #16]
   8a422:	f017 0f40 	tst.w	r7, #64	; 0x40
   8a426:	f106 0604 	add.w	r6, r6, #4
   8a42a:	bf14      	ite	ne
   8a42c:	8004      	strhne	r4, [r0, #0]
   8a42e:	6004      	streq	r4, [r0, #0]
   8a430:	e6c5      	b.n	8a1be <_svfprintf_r+0x52>
   8a432:	f047 0710 	orr.w	r7, r7, #16
   8a436:	f017 0020 	ands.w	r0, r7, #32
   8a43a:	d008      	beq.n	8a44e <_svfprintf_r+0x2e2>
   8a43c:	1df3      	adds	r3, r6, #7
   8a43e:	f023 0507 	bic.w	r5, r3, #7
   8a442:	f105 0608 	add.w	r6, r5, #8
   8a446:	e9d5 4500 	ldrd	r4, r5, [r5]
   8a44a:	2000      	movs	r0, #0
   8a44c:	e07c      	b.n	8a548 <_svfprintf_r+0x3dc>
   8a44e:	f017 0110 	ands.w	r1, r7, #16
   8a452:	f106 0204 	add.w	r2, r6, #4
   8a456:	d106      	bne.n	8a466 <_svfprintf_r+0x2fa>
   8a458:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   8a45c:	d003      	beq.n	8a466 <_svfprintf_r+0x2fa>
   8a45e:	8834      	ldrh	r4, [r6, #0]
   8a460:	2500      	movs	r5, #0
   8a462:	4616      	mov	r6, r2
   8a464:	e7f1      	b.n	8a44a <_svfprintf_r+0x2de>
   8a466:	6836      	ldr	r6, [r6, #0]
   8a468:	2500      	movs	r5, #0
   8a46a:	4634      	mov	r4, r6
   8a46c:	4616      	mov	r6, r2
   8a46e:	e06b      	b.n	8a548 <_svfprintf_r+0x3dc>
   8a470:	4b38      	ldr	r3, [pc, #224]	; (8a554 <_svfprintf_r+0x3e8>)
   8a472:	2130      	movs	r1, #48	; 0x30
   8a474:	2278      	movs	r2, #120	; 0x78
   8a476:	6834      	ldr	r4, [r6, #0]
   8a478:	2500      	movs	r5, #0
   8a47a:	f047 0702 	orr.w	r7, r7, #2
   8a47e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   8a482:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   8a486:	3604      	adds	r6, #4
   8a488:	9305      	str	r3, [sp, #20]
   8a48a:	e05c      	b.n	8a546 <_svfprintf_r+0x3da>
   8a48c:	4631      	mov	r1, r6
   8a48e:	2500      	movs	r5, #0
   8a490:	f8d1 a000 	ldr.w	sl, [r1]
   8a494:	3604      	adds	r6, #4
   8a496:	45ac      	cmp	ip, r5
   8a498:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8a49c:	4650      	mov	r0, sl
   8a49e:	db11      	blt.n	8a4c4 <_svfprintf_r+0x358>
   8a4a0:	4662      	mov	r2, ip
   8a4a2:	4629      	mov	r1, r5
   8a4a4:	f8cd c000 	str.w	ip, [sp]
   8a4a8:	f000 fd72 	bl	8af90 <memchr>
   8a4ac:	f8dd c000 	ldr.w	ip, [sp]
   8a4b0:	2800      	cmp	r0, #0
   8a4b2:	f000 80d4 	beq.w	8a65e <_svfprintf_r+0x4f2>
   8a4b6:	ebca 0400 	rsb	r4, sl, r0
   8a4ba:	4564      	cmp	r4, ip
   8a4bc:	f340 80d1 	ble.w	8a662 <_svfprintf_r+0x4f6>
   8a4c0:	4664      	mov	r4, ip
   8a4c2:	e0ce      	b.n	8a662 <_svfprintf_r+0x4f6>
   8a4c4:	f7ff fd70 	bl	89fa8 <strlen>
   8a4c8:	4604      	mov	r4, r0
   8a4ca:	e0ca      	b.n	8a662 <_svfprintf_r+0x4f6>
   8a4cc:	f047 0710 	orr.w	r7, r7, #16
   8a4d0:	06bd      	lsls	r5, r7, #26
   8a4d2:	d506      	bpl.n	8a4e2 <_svfprintf_r+0x376>
   8a4d4:	1df0      	adds	r0, r6, #7
   8a4d6:	f020 0407 	bic.w	r4, r0, #7
   8a4da:	f104 0608 	add.w	r6, r4, #8
   8a4de:	cc30      	ldmia	r4, {r4, r5}
   8a4e0:	e00c      	b.n	8a4fc <_svfprintf_r+0x390>
   8a4e2:	f017 0f10 	tst.w	r7, #16
   8a4e6:	f106 0304 	add.w	r3, r6, #4
   8a4ea:	d103      	bne.n	8a4f4 <_svfprintf_r+0x388>
   8a4ec:	067c      	lsls	r4, r7, #25
   8a4ee:	d501      	bpl.n	8a4f4 <_svfprintf_r+0x388>
   8a4f0:	8834      	ldrh	r4, [r6, #0]
   8a4f2:	e001      	b.n	8a4f8 <_svfprintf_r+0x38c>
   8a4f4:	6835      	ldr	r5, [r6, #0]
   8a4f6:	462c      	mov	r4, r5
   8a4f8:	2500      	movs	r5, #0
   8a4fa:	461e      	mov	r6, r3
   8a4fc:	2001      	movs	r0, #1
   8a4fe:	e023      	b.n	8a548 <_svfprintf_r+0x3dc>
   8a500:	06b8      	lsls	r0, r7, #26
   8a502:	d507      	bpl.n	8a514 <_svfprintf_r+0x3a8>
   8a504:	1df4      	adds	r4, r6, #7
   8a506:	f024 0107 	bic.w	r1, r4, #7
   8a50a:	f101 0608 	add.w	r6, r1, #8
   8a50e:	e9d1 4500 	ldrd	r4, r5, [r1]
   8a512:	e00c      	b.n	8a52e <_svfprintf_r+0x3c2>
   8a514:	f017 0f10 	tst.w	r7, #16
   8a518:	f106 0004 	add.w	r0, r6, #4
   8a51c:	d103      	bne.n	8a526 <_svfprintf_r+0x3ba>
   8a51e:	0679      	lsls	r1, r7, #25
   8a520:	d501      	bpl.n	8a526 <_svfprintf_r+0x3ba>
   8a522:	8834      	ldrh	r4, [r6, #0]
   8a524:	e001      	b.n	8a52a <_svfprintf_r+0x3be>
   8a526:	6836      	ldr	r6, [r6, #0]
   8a528:	4634      	mov	r4, r6
   8a52a:	2500      	movs	r5, #0
   8a52c:	4606      	mov	r6, r0
   8a52e:	07fa      	lsls	r2, r7, #31
   8a530:	d509      	bpl.n	8a546 <_svfprintf_r+0x3da>
   8a532:	ea54 0205 	orrs.w	r2, r4, r5
   8a536:	d006      	beq.n	8a546 <_svfprintf_r+0x3da>
   8a538:	2230      	movs	r2, #48	; 0x30
   8a53a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   8a53e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   8a542:	f047 0702 	orr.w	r7, r7, #2
   8a546:	2002      	movs	r0, #2
   8a548:	2100      	movs	r1, #0
   8a54a:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   8a54e:	e004      	b.n	8a55a <_svfprintf_r+0x3ee>
   8a550:	0008cd7a 	.word	0x0008cd7a
   8a554:	0008cd8b 	.word	0x0008cd8b
   8a558:	2001      	movs	r0, #1
   8a55a:	f1bc 0f00 	cmp.w	ip, #0
   8a55e:	bfa8      	it	ge
   8a560:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   8a564:	ea54 0105 	orrs.w	r1, r4, r5
   8a568:	d102      	bne.n	8a570 <_svfprintf_r+0x404>
   8a56a:	f1bc 0f00 	cmp.w	ip, #0
   8a56e:	d058      	beq.n	8a622 <_svfprintf_r+0x4b6>
   8a570:	2801      	cmp	r0, #1
   8a572:	d01d      	beq.n	8a5b0 <_svfprintf_r+0x444>
   8a574:	2802      	cmp	r0, #2
   8a576:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8a57a:	d041      	beq.n	8a600 <_svfprintf_r+0x494>
   8a57c:	f004 0207 	and.w	r2, r4, #7
   8a580:	08e4      	lsrs	r4, r4, #3
   8a582:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   8a586:	08e9      	lsrs	r1, r5, #3
   8a588:	4604      	mov	r4, r0
   8a58a:	460d      	mov	r5, r1
   8a58c:	3230      	adds	r2, #48	; 0x30
   8a58e:	ea54 0105 	orrs.w	r1, r4, r5
   8a592:	469a      	mov	sl, r3
   8a594:	701a      	strb	r2, [r3, #0]
   8a596:	f103 33ff 	add.w	r3, r3, #4294967295
   8a59a:	d1ef      	bne.n	8a57c <_svfprintf_r+0x410>
   8a59c:	07f8      	lsls	r0, r7, #31
   8a59e:	4655      	mov	r5, sl
   8a5a0:	d54a      	bpl.n	8a638 <_svfprintf_r+0x4cc>
   8a5a2:	2a30      	cmp	r2, #48	; 0x30
   8a5a4:	d048      	beq.n	8a638 <_svfprintf_r+0x4cc>
   8a5a6:	2230      	movs	r2, #48	; 0x30
   8a5a8:	469a      	mov	sl, r3
   8a5aa:	f805 2c01 	strb.w	r2, [r5, #-1]
   8a5ae:	e043      	b.n	8a638 <_svfprintf_r+0x4cc>
   8a5b0:	2d00      	cmp	r5, #0
   8a5b2:	bf08      	it	eq
   8a5b4:	2c0a      	cmpeq	r4, #10
   8a5b6:	d203      	bcs.n	8a5c0 <_svfprintf_r+0x454>
   8a5b8:	3430      	adds	r4, #48	; 0x30
   8a5ba:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   8a5be:	e036      	b.n	8a62e <_svfprintf_r+0x4c2>
   8a5c0:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8a5c4:	9302      	str	r3, [sp, #8]
   8a5c6:	4620      	mov	r0, r4
   8a5c8:	4629      	mov	r1, r5
   8a5ca:	220a      	movs	r2, #10
   8a5cc:	2300      	movs	r3, #0
   8a5ce:	f8cd c000 	str.w	ip, [sp]
   8a5d2:	f001 fae5 	bl	8bba0 <__aeabi_uldivmod>
   8a5d6:	9802      	ldr	r0, [sp, #8]
   8a5d8:	3230      	adds	r2, #48	; 0x30
   8a5da:	f800 2901 	strb.w	r2, [r0], #-1
   8a5de:	4629      	mov	r1, r5
   8a5e0:	220a      	movs	r2, #10
   8a5e2:	2300      	movs	r3, #0
   8a5e4:	f8dd a008 	ldr.w	sl, [sp, #8]
   8a5e8:	9002      	str	r0, [sp, #8]
   8a5ea:	4620      	mov	r0, r4
   8a5ec:	f001 fad8 	bl	8bba0 <__aeabi_uldivmod>
   8a5f0:	4604      	mov	r4, r0
   8a5f2:	460d      	mov	r5, r1
   8a5f4:	ea54 0105 	orrs.w	r1, r4, r5
   8a5f8:	f8dd c000 	ldr.w	ip, [sp]
   8a5fc:	d1e3      	bne.n	8a5c6 <_svfprintf_r+0x45a>
   8a5fe:	e01b      	b.n	8a638 <_svfprintf_r+0x4cc>
   8a600:	9905      	ldr	r1, [sp, #20]
   8a602:	f004 000f 	and.w	r0, r4, #15
   8a606:	0924      	lsrs	r4, r4, #4
   8a608:	5c0a      	ldrb	r2, [r1, r0]
   8a60a:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   8a60e:	0929      	lsrs	r1, r5, #4
   8a610:	4604      	mov	r4, r0
   8a612:	460d      	mov	r5, r1
   8a614:	469a      	mov	sl, r3
   8a616:	f803 2901 	strb.w	r2, [r3], #-1
   8a61a:	ea54 0205 	orrs.w	r2, r4, r5
   8a61e:	d1ef      	bne.n	8a600 <_svfprintf_r+0x494>
   8a620:	e00a      	b.n	8a638 <_svfprintf_r+0x4cc>
   8a622:	b938      	cbnz	r0, 8a634 <_svfprintf_r+0x4c8>
   8a624:	07f9      	lsls	r1, r7, #31
   8a626:	d505      	bpl.n	8a634 <_svfprintf_r+0x4c8>
   8a628:	2030      	movs	r0, #48	; 0x30
   8a62a:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   8a62e:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   8a632:	e001      	b.n	8a638 <_svfprintf_r+0x4cc>
   8a634:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   8a638:	ad18      	add	r5, sp, #96	; 0x60
   8a63a:	ebca 0405 	rsb	r4, sl, r5
   8a63e:	4665      	mov	r5, ip
   8a640:	e00f      	b.n	8a662 <_svfprintf_r+0x4f6>
   8a642:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8a646:	2b00      	cmp	r3, #0
   8a648:	f000 8176 	beq.w	8a938 <_svfprintf_r+0x7cc>
   8a64c:	2500      	movs	r5, #0
   8a64e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   8a652:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8a656:	2401      	movs	r4, #1
   8a658:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   8a65c:	e001      	b.n	8a662 <_svfprintf_r+0x4f6>
   8a65e:	4664      	mov	r4, ip
   8a660:	4605      	mov	r5, r0
   8a662:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8a666:	42ac      	cmp	r4, r5
   8a668:	bfac      	ite	ge
   8a66a:	4621      	movge	r1, r4
   8a66c:	4629      	movlt	r1, r5
   8a66e:	9102      	str	r1, [sp, #8]
   8a670:	b113      	cbz	r3, 8a678 <_svfprintf_r+0x50c>
   8a672:	9802      	ldr	r0, [sp, #8]
   8a674:	1c42      	adds	r2, r0, #1
   8a676:	9202      	str	r2, [sp, #8]
   8a678:	f017 0102 	ands.w	r1, r7, #2
   8a67c:	9106      	str	r1, [sp, #24]
   8a67e:	d002      	beq.n	8a686 <_svfprintf_r+0x51a>
   8a680:	9b02      	ldr	r3, [sp, #8]
   8a682:	1c98      	adds	r0, r3, #2
   8a684:	9002      	str	r0, [sp, #8]
   8a686:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   8a68a:	9207      	str	r2, [sp, #28]
   8a68c:	d13c      	bne.n	8a708 <_svfprintf_r+0x59c>
   8a68e:	9903      	ldr	r1, [sp, #12]
   8a690:	9b02      	ldr	r3, [sp, #8]
   8a692:	1acb      	subs	r3, r1, r3
   8a694:	2b00      	cmp	r3, #0
   8a696:	dd37      	ble.n	8a708 <_svfprintf_r+0x59c>
   8a698:	48a5      	ldr	r0, [pc, #660]	; (8a930 <_svfprintf_r+0x7c4>)
   8a69a:	2b10      	cmp	r3, #16
   8a69c:	f8c8 0000 	str.w	r0, [r8]
   8a6a0:	dd1b      	ble.n	8a6da <_svfprintf_r+0x56e>
   8a6a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8a6a4:	2110      	movs	r1, #16
   8a6a6:	980d      	ldr	r0, [sp, #52]	; 0x34
   8a6a8:	f8c8 1004 	str.w	r1, [r8, #4]
   8a6ac:	1c51      	adds	r1, r2, #1
   8a6ae:	3010      	adds	r0, #16
   8a6b0:	2907      	cmp	r1, #7
   8a6b2:	900d      	str	r0, [sp, #52]	; 0x34
   8a6b4:	910c      	str	r1, [sp, #48]	; 0x30
   8a6b6:	dc02      	bgt.n	8a6be <_svfprintf_r+0x552>
   8a6b8:	f108 0808 	add.w	r8, r8, #8
   8a6bc:	e00b      	b.n	8a6d6 <_svfprintf_r+0x56a>
   8a6be:	4658      	mov	r0, fp
   8a6c0:	4649      	mov	r1, r9
   8a6c2:	aa0b      	add	r2, sp, #44	; 0x2c
   8a6c4:	9300      	str	r3, [sp, #0]
   8a6c6:	f000 fdf1 	bl	8b2ac <__ssprint_r>
   8a6ca:	9b00      	ldr	r3, [sp, #0]
   8a6cc:	2800      	cmp	r0, #0
   8a6ce:	f040 813a 	bne.w	8a946 <_svfprintf_r+0x7da>
   8a6d2:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8a6d6:	3b10      	subs	r3, #16
   8a6d8:	e7de      	b.n	8a698 <_svfprintf_r+0x52c>
   8a6da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8a6dc:	f8c8 3004 	str.w	r3, [r8, #4]
   8a6e0:	18d1      	adds	r1, r2, r3
   8a6e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a6e4:	910d      	str	r1, [sp, #52]	; 0x34
   8a6e6:	1c58      	adds	r0, r3, #1
   8a6e8:	2807      	cmp	r0, #7
   8a6ea:	900c      	str	r0, [sp, #48]	; 0x30
   8a6ec:	dc02      	bgt.n	8a6f4 <_svfprintf_r+0x588>
   8a6ee:	f108 0808 	add.w	r8, r8, #8
   8a6f2:	e009      	b.n	8a708 <_svfprintf_r+0x59c>
   8a6f4:	4658      	mov	r0, fp
   8a6f6:	4649      	mov	r1, r9
   8a6f8:	aa0b      	add	r2, sp, #44	; 0x2c
   8a6fa:	f000 fdd7 	bl	8b2ac <__ssprint_r>
   8a6fe:	2800      	cmp	r0, #0
   8a700:	f040 8121 	bne.w	8a946 <_svfprintf_r+0x7da>
   8a704:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8a708:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   8a70c:	b1da      	cbz	r2, 8a746 <_svfprintf_r+0x5da>
   8a70e:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   8a712:	f8c8 1000 	str.w	r1, [r8]
   8a716:	990c      	ldr	r1, [sp, #48]	; 0x30
   8a718:	2301      	movs	r3, #1
   8a71a:	980d      	ldr	r0, [sp, #52]	; 0x34
   8a71c:	f8c8 3004 	str.w	r3, [r8, #4]
   8a720:	1c4b      	adds	r3, r1, #1
   8a722:	1c42      	adds	r2, r0, #1
   8a724:	2b07      	cmp	r3, #7
   8a726:	920d      	str	r2, [sp, #52]	; 0x34
   8a728:	930c      	str	r3, [sp, #48]	; 0x30
   8a72a:	dc02      	bgt.n	8a732 <_svfprintf_r+0x5c6>
   8a72c:	f108 0808 	add.w	r8, r8, #8
   8a730:	e009      	b.n	8a746 <_svfprintf_r+0x5da>
   8a732:	4658      	mov	r0, fp
   8a734:	4649      	mov	r1, r9
   8a736:	aa0b      	add	r2, sp, #44	; 0x2c
   8a738:	f000 fdb8 	bl	8b2ac <__ssprint_r>
   8a73c:	2800      	cmp	r0, #0
   8a73e:	f040 8102 	bne.w	8a946 <_svfprintf_r+0x7da>
   8a742:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8a746:	9806      	ldr	r0, [sp, #24]
   8a748:	b1d0      	cbz	r0, 8a780 <_svfprintf_r+0x614>
   8a74a:	aa0a      	add	r2, sp, #40	; 0x28
   8a74c:	f8c8 2000 	str.w	r2, [r8]
   8a750:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8a752:	2102      	movs	r1, #2
   8a754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a756:	f8c8 1004 	str.w	r1, [r8, #4]
   8a75a:	1c51      	adds	r1, r2, #1
   8a75c:	1c98      	adds	r0, r3, #2
   8a75e:	2907      	cmp	r1, #7
   8a760:	900d      	str	r0, [sp, #52]	; 0x34
   8a762:	910c      	str	r1, [sp, #48]	; 0x30
   8a764:	dc02      	bgt.n	8a76c <_svfprintf_r+0x600>
   8a766:	f108 0808 	add.w	r8, r8, #8
   8a76a:	e009      	b.n	8a780 <_svfprintf_r+0x614>
   8a76c:	4658      	mov	r0, fp
   8a76e:	4649      	mov	r1, r9
   8a770:	aa0b      	add	r2, sp, #44	; 0x2c
   8a772:	f000 fd9b 	bl	8b2ac <__ssprint_r>
   8a776:	2800      	cmp	r0, #0
   8a778:	f040 80e5 	bne.w	8a946 <_svfprintf_r+0x7da>
   8a77c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8a780:	9b07      	ldr	r3, [sp, #28]
   8a782:	2b80      	cmp	r3, #128	; 0x80
   8a784:	d13c      	bne.n	8a800 <_svfprintf_r+0x694>
   8a786:	9803      	ldr	r0, [sp, #12]
   8a788:	9a02      	ldr	r2, [sp, #8]
   8a78a:	1a83      	subs	r3, r0, r2
   8a78c:	2b00      	cmp	r3, #0
   8a78e:	dd37      	ble.n	8a800 <_svfprintf_r+0x694>
   8a790:	4968      	ldr	r1, [pc, #416]	; (8a934 <_svfprintf_r+0x7c8>)
   8a792:	2b10      	cmp	r3, #16
   8a794:	f8c8 1000 	str.w	r1, [r8]
   8a798:	dd1b      	ble.n	8a7d2 <_svfprintf_r+0x666>
   8a79a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8a79c:	2210      	movs	r2, #16
   8a79e:	990d      	ldr	r1, [sp, #52]	; 0x34
   8a7a0:	f8c8 2004 	str.w	r2, [r8, #4]
   8a7a4:	1c42      	adds	r2, r0, #1
   8a7a6:	3110      	adds	r1, #16
   8a7a8:	2a07      	cmp	r2, #7
   8a7aa:	910d      	str	r1, [sp, #52]	; 0x34
   8a7ac:	920c      	str	r2, [sp, #48]	; 0x30
   8a7ae:	dc02      	bgt.n	8a7b6 <_svfprintf_r+0x64a>
   8a7b0:	f108 0808 	add.w	r8, r8, #8
   8a7b4:	e00b      	b.n	8a7ce <_svfprintf_r+0x662>
   8a7b6:	4658      	mov	r0, fp
   8a7b8:	4649      	mov	r1, r9
   8a7ba:	aa0b      	add	r2, sp, #44	; 0x2c
   8a7bc:	9300      	str	r3, [sp, #0]
   8a7be:	f000 fd75 	bl	8b2ac <__ssprint_r>
   8a7c2:	9b00      	ldr	r3, [sp, #0]
   8a7c4:	2800      	cmp	r0, #0
   8a7c6:	f040 80be 	bne.w	8a946 <_svfprintf_r+0x7da>
   8a7ca:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8a7ce:	3b10      	subs	r3, #16
   8a7d0:	e7de      	b.n	8a790 <_svfprintf_r+0x624>
   8a7d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8a7d4:	980d      	ldr	r0, [sp, #52]	; 0x34
   8a7d6:	1c51      	adds	r1, r2, #1
   8a7d8:	f8c8 3004 	str.w	r3, [r8, #4]
   8a7dc:	2907      	cmp	r1, #7
   8a7de:	4403      	add	r3, r0
   8a7e0:	930d      	str	r3, [sp, #52]	; 0x34
   8a7e2:	910c      	str	r1, [sp, #48]	; 0x30
   8a7e4:	dc02      	bgt.n	8a7ec <_svfprintf_r+0x680>
   8a7e6:	f108 0808 	add.w	r8, r8, #8
   8a7ea:	e009      	b.n	8a800 <_svfprintf_r+0x694>
   8a7ec:	4658      	mov	r0, fp
   8a7ee:	4649      	mov	r1, r9
   8a7f0:	aa0b      	add	r2, sp, #44	; 0x2c
   8a7f2:	f000 fd5b 	bl	8b2ac <__ssprint_r>
   8a7f6:	2800      	cmp	r0, #0
   8a7f8:	f040 80a5 	bne.w	8a946 <_svfprintf_r+0x7da>
   8a7fc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8a800:	1b2d      	subs	r5, r5, r4
   8a802:	2d00      	cmp	r5, #0
   8a804:	dd34      	ble.n	8a870 <_svfprintf_r+0x704>
   8a806:	484b      	ldr	r0, [pc, #300]	; (8a934 <_svfprintf_r+0x7c8>)
   8a808:	2d10      	cmp	r5, #16
   8a80a:	f8c8 0000 	str.w	r0, [r8]
   8a80e:	dd19      	ble.n	8a844 <_svfprintf_r+0x6d8>
   8a810:	980c      	ldr	r0, [sp, #48]	; 0x30
   8a812:	990d      	ldr	r1, [sp, #52]	; 0x34
   8a814:	1c43      	adds	r3, r0, #1
   8a816:	2210      	movs	r2, #16
   8a818:	3110      	adds	r1, #16
   8a81a:	2b07      	cmp	r3, #7
   8a81c:	f8c8 2004 	str.w	r2, [r8, #4]
   8a820:	910d      	str	r1, [sp, #52]	; 0x34
   8a822:	930c      	str	r3, [sp, #48]	; 0x30
   8a824:	dc02      	bgt.n	8a82c <_svfprintf_r+0x6c0>
   8a826:	f108 0808 	add.w	r8, r8, #8
   8a82a:	e009      	b.n	8a840 <_svfprintf_r+0x6d4>
   8a82c:	4658      	mov	r0, fp
   8a82e:	4649      	mov	r1, r9
   8a830:	aa0b      	add	r2, sp, #44	; 0x2c
   8a832:	f000 fd3b 	bl	8b2ac <__ssprint_r>
   8a836:	2800      	cmp	r0, #0
   8a838:	f040 8085 	bne.w	8a946 <_svfprintf_r+0x7da>
   8a83c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8a840:	3d10      	subs	r5, #16
   8a842:	e7e0      	b.n	8a806 <_svfprintf_r+0x69a>
   8a844:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8a846:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a848:	1c51      	adds	r1, r2, #1
   8a84a:	f8c8 5004 	str.w	r5, [r8, #4]
   8a84e:	2907      	cmp	r1, #7
   8a850:	441d      	add	r5, r3
   8a852:	950d      	str	r5, [sp, #52]	; 0x34
   8a854:	910c      	str	r1, [sp, #48]	; 0x30
   8a856:	dc02      	bgt.n	8a85e <_svfprintf_r+0x6f2>
   8a858:	f108 0808 	add.w	r8, r8, #8
   8a85c:	e008      	b.n	8a870 <_svfprintf_r+0x704>
   8a85e:	4658      	mov	r0, fp
   8a860:	4649      	mov	r1, r9
   8a862:	aa0b      	add	r2, sp, #44	; 0x2c
   8a864:	f000 fd22 	bl	8b2ac <__ssprint_r>
   8a868:	2800      	cmp	r0, #0
   8a86a:	d16c      	bne.n	8a946 <_svfprintf_r+0x7da>
   8a86c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8a870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a872:	980d      	ldr	r0, [sp, #52]	; 0x34
   8a874:	1c5a      	adds	r2, r3, #1
   8a876:	f8c8 4004 	str.w	r4, [r8, #4]
   8a87a:	2a07      	cmp	r2, #7
   8a87c:	4404      	add	r4, r0
   8a87e:	f8c8 a000 	str.w	sl, [r8]
   8a882:	940d      	str	r4, [sp, #52]	; 0x34
   8a884:	920c      	str	r2, [sp, #48]	; 0x30
   8a886:	dc02      	bgt.n	8a88e <_svfprintf_r+0x722>
   8a888:	f108 0308 	add.w	r3, r8, #8
   8a88c:	e007      	b.n	8a89e <_svfprintf_r+0x732>
   8a88e:	4658      	mov	r0, fp
   8a890:	4649      	mov	r1, r9
   8a892:	aa0b      	add	r2, sp, #44	; 0x2c
   8a894:	f000 fd0a 	bl	8b2ac <__ssprint_r>
   8a898:	2800      	cmp	r0, #0
   8a89a:	d154      	bne.n	8a946 <_svfprintf_r+0x7da>
   8a89c:	ab18      	add	r3, sp, #96	; 0x60
   8a89e:	077a      	lsls	r2, r7, #29
   8a8a0:	d40b      	bmi.n	8a8ba <_svfprintf_r+0x74e>
   8a8a2:	9804      	ldr	r0, [sp, #16]
   8a8a4:	9b02      	ldr	r3, [sp, #8]
   8a8a6:	9a03      	ldr	r2, [sp, #12]
   8a8a8:	990d      	ldr	r1, [sp, #52]	; 0x34
   8a8aa:	4293      	cmp	r3, r2
   8a8ac:	bfac      	ite	ge
   8a8ae:	18c0      	addge	r0, r0, r3
   8a8b0:	1880      	addlt	r0, r0, r2
   8a8b2:	9004      	str	r0, [sp, #16]
   8a8b4:	2900      	cmp	r1, #0
   8a8b6:	d036      	beq.n	8a926 <_svfprintf_r+0x7ba>
   8a8b8:	e02f      	b.n	8a91a <_svfprintf_r+0x7ae>
   8a8ba:	9c03      	ldr	r4, [sp, #12]
   8a8bc:	9902      	ldr	r1, [sp, #8]
   8a8be:	1a64      	subs	r4, r4, r1
   8a8c0:	2c00      	cmp	r4, #0
   8a8c2:	ddee      	ble.n	8a8a2 <_svfprintf_r+0x736>
   8a8c4:	481a      	ldr	r0, [pc, #104]	; (8a930 <_svfprintf_r+0x7c4>)
   8a8c6:	2c10      	cmp	r4, #16
   8a8c8:	6018      	str	r0, [r3, #0]
   8a8ca:	dd15      	ble.n	8a8f8 <_svfprintf_r+0x78c>
   8a8cc:	990c      	ldr	r1, [sp, #48]	; 0x30
   8a8ce:	2010      	movs	r0, #16
   8a8d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8a8d2:	6058      	str	r0, [r3, #4]
   8a8d4:	1c48      	adds	r0, r1, #1
   8a8d6:	3210      	adds	r2, #16
   8a8d8:	2807      	cmp	r0, #7
   8a8da:	920d      	str	r2, [sp, #52]	; 0x34
   8a8dc:	900c      	str	r0, [sp, #48]	; 0x30
   8a8de:	dc01      	bgt.n	8a8e4 <_svfprintf_r+0x778>
   8a8e0:	3308      	adds	r3, #8
   8a8e2:	e007      	b.n	8a8f4 <_svfprintf_r+0x788>
   8a8e4:	4658      	mov	r0, fp
   8a8e6:	4649      	mov	r1, r9
   8a8e8:	aa0b      	add	r2, sp, #44	; 0x2c
   8a8ea:	f000 fcdf 	bl	8b2ac <__ssprint_r>
   8a8ee:	2800      	cmp	r0, #0
   8a8f0:	d129      	bne.n	8a946 <_svfprintf_r+0x7da>
   8a8f2:	ab18      	add	r3, sp, #96	; 0x60
   8a8f4:	3c10      	subs	r4, #16
   8a8f6:	e7e5      	b.n	8a8c4 <_svfprintf_r+0x758>
   8a8f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8a8fa:	605c      	str	r4, [r3, #4]
   8a8fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a8fe:	1c51      	adds	r1, r2, #1
   8a900:	191c      	adds	r4, r3, r4
   8a902:	2907      	cmp	r1, #7
   8a904:	940d      	str	r4, [sp, #52]	; 0x34
   8a906:	910c      	str	r1, [sp, #48]	; 0x30
   8a908:	ddcb      	ble.n	8a8a2 <_svfprintf_r+0x736>
   8a90a:	4658      	mov	r0, fp
   8a90c:	4649      	mov	r1, r9
   8a90e:	aa0b      	add	r2, sp, #44	; 0x2c
   8a910:	f000 fccc 	bl	8b2ac <__ssprint_r>
   8a914:	2800      	cmp	r0, #0
   8a916:	d0c4      	beq.n	8a8a2 <_svfprintf_r+0x736>
   8a918:	e015      	b.n	8a946 <_svfprintf_r+0x7da>
   8a91a:	4658      	mov	r0, fp
   8a91c:	4649      	mov	r1, r9
   8a91e:	aa0b      	add	r2, sp, #44	; 0x2c
   8a920:	f000 fcc4 	bl	8b2ac <__ssprint_r>
   8a924:	b978      	cbnz	r0, 8a946 <_svfprintf_r+0x7da>
   8a926:	2500      	movs	r5, #0
   8a928:	950c      	str	r5, [sp, #48]	; 0x30
   8a92a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8a92e:	e446      	b.n	8a1be <_svfprintf_r+0x52>
   8a930:	0008cd5a 	.word	0x0008cd5a
   8a934:	0008cd6a 	.word	0x0008cd6a
   8a938:	980d      	ldr	r0, [sp, #52]	; 0x34
   8a93a:	b120      	cbz	r0, 8a946 <_svfprintf_r+0x7da>
   8a93c:	4658      	mov	r0, fp
   8a93e:	4649      	mov	r1, r9
   8a940:	aa0b      	add	r2, sp, #44	; 0x2c
   8a942:	f000 fcb3 	bl	8b2ac <__ssprint_r>
   8a946:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   8a94a:	9b04      	ldr	r3, [sp, #16]
   8a94c:	f002 0140 	and.w	r1, r2, #64	; 0x40
   8a950:	b208      	sxth	r0, r1
   8a952:	2800      	cmp	r0, #0
   8a954:	bf18      	it	ne
   8a956:	f04f 33ff 	movne.w	r3, #4294967295
   8a95a:	4618      	mov	r0, r3
   8a95c:	b029      	add	sp, #164	; 0xa4
   8a95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a962:	bf00      	nop

0008a964 <register_fini>:
   8a964:	4b02      	ldr	r3, [pc, #8]	; (8a970 <register_fini+0xc>)
   8a966:	b113      	cbz	r3, 8a96e <register_fini+0xa>
   8a968:	4802      	ldr	r0, [pc, #8]	; (8a974 <register_fini+0x10>)
   8a96a:	f000 b805 	b.w	8a978 <atexit>
   8a96e:	4770      	bx	lr
   8a970:	00000000 	.word	0x00000000
   8a974:	00089e25 	.word	0x00089e25

0008a978 <atexit>:
   8a978:	4601      	mov	r1, r0
   8a97a:	2000      	movs	r0, #0
   8a97c:	4602      	mov	r2, r0
   8a97e:	4603      	mov	r3, r0
   8a980:	f7ff ba02 	b.w	89d88 <__register_exitproc>

0008a984 <_malloc_trim_r>:
   8a984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a986:	4d23      	ldr	r5, [pc, #140]	; (8aa14 <_malloc_trim_r+0x90>)
   8a988:	460e      	mov	r6, r1
   8a98a:	4604      	mov	r4, r0
   8a98c:	f000 fb0e 	bl	8afac <__malloc_lock>
   8a990:	68ab      	ldr	r3, [r5, #8]
   8a992:	685f      	ldr	r7, [r3, #4]
   8a994:	f027 0703 	bic.w	r7, r7, #3
   8a998:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
   8a99c:	1b81      	subs	r1, r0, r6
   8a99e:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   8a9a2:	f022 060f 	bic.w	r6, r2, #15
   8a9a6:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   8a9aa:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   8a9ae:	da04      	bge.n	8a9ba <_malloc_trim_r+0x36>
   8a9b0:	4620      	mov	r0, r4
   8a9b2:	f000 fafc 	bl	8afae <__malloc_unlock>
   8a9b6:	2000      	movs	r0, #0
   8a9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a9ba:	2100      	movs	r1, #0
   8a9bc:	4620      	mov	r0, r4
   8a9be:	f000 fc65 	bl	8b28c <_sbrk_r>
   8a9c2:	68ab      	ldr	r3, [r5, #8]
   8a9c4:	19d9      	adds	r1, r3, r7
   8a9c6:	4288      	cmp	r0, r1
   8a9c8:	d1f2      	bne.n	8a9b0 <_malloc_trim_r+0x2c>
   8a9ca:	4271      	negs	r1, r6
   8a9cc:	4620      	mov	r0, r4
   8a9ce:	f000 fc5d 	bl	8b28c <_sbrk_r>
   8a9d2:	3001      	adds	r0, #1
   8a9d4:	d110      	bne.n	8a9f8 <_malloc_trim_r+0x74>
   8a9d6:	2100      	movs	r1, #0
   8a9d8:	4620      	mov	r0, r4
   8a9da:	f000 fc57 	bl	8b28c <_sbrk_r>
   8a9de:	68ab      	ldr	r3, [r5, #8]
   8a9e0:	1ac2      	subs	r2, r0, r3
   8a9e2:	2a0f      	cmp	r2, #15
   8a9e4:	dde4      	ble.n	8a9b0 <_malloc_trim_r+0x2c>
   8a9e6:	490c      	ldr	r1, [pc, #48]	; (8aa18 <_malloc_trim_r+0x94>)
   8a9e8:	f042 0201 	orr.w	r2, r2, #1
   8a9ec:	6809      	ldr	r1, [r1, #0]
   8a9ee:	605a      	str	r2, [r3, #4]
   8a9f0:	1a40      	subs	r0, r0, r1
   8a9f2:	490a      	ldr	r1, [pc, #40]	; (8aa1c <_malloc_trim_r+0x98>)
   8a9f4:	6008      	str	r0, [r1, #0]
   8a9f6:	e7db      	b.n	8a9b0 <_malloc_trim_r+0x2c>
   8a9f8:	4b08      	ldr	r3, [pc, #32]	; (8aa1c <_malloc_trim_r+0x98>)
   8a9fa:	68a8      	ldr	r0, [r5, #8]
   8a9fc:	681a      	ldr	r2, [r3, #0]
   8a9fe:	1bbf      	subs	r7, r7, r6
   8aa00:	f047 0701 	orr.w	r7, r7, #1
   8aa04:	6047      	str	r7, [r0, #4]
   8aa06:	1b96      	subs	r6, r2, r6
   8aa08:	4620      	mov	r0, r4
   8aa0a:	601e      	str	r6, [r3, #0]
   8aa0c:	f000 facf 	bl	8afae <__malloc_unlock>
   8aa10:	2001      	movs	r0, #1
   8aa12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8aa14:	200706d8 	.word	0x200706d8
   8aa18:	20070ae0 	.word	0x20070ae0
   8aa1c:	2007161c 	.word	0x2007161c

0008aa20 <_free_r>:
   8aa20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8aa22:	4606      	mov	r6, r0
   8aa24:	460d      	mov	r5, r1
   8aa26:	2900      	cmp	r1, #0
   8aa28:	f000 80a6 	beq.w	8ab78 <_free_r+0x158>
   8aa2c:	f000 fabe 	bl	8afac <__malloc_lock>
   8aa30:	f855 cc04 	ldr.w	ip, [r5, #-4]
   8aa34:	4f51      	ldr	r7, [pc, #324]	; (8ab7c <_free_r+0x15c>)
   8aa36:	f1a5 0308 	sub.w	r3, r5, #8
   8aa3a:	f02c 0201 	bic.w	r2, ip, #1
   8aa3e:	189c      	adds	r4, r3, r2
   8aa40:	68b9      	ldr	r1, [r7, #8]
   8aa42:	6860      	ldr	r0, [r4, #4]
   8aa44:	428c      	cmp	r4, r1
   8aa46:	f020 0003 	bic.w	r0, r0, #3
   8aa4a:	f00c 0101 	and.w	r1, ip, #1
   8aa4e:	d11c      	bne.n	8aa8a <_free_r+0x6a>
   8aa50:	1882      	adds	r2, r0, r2
   8aa52:	b939      	cbnz	r1, 8aa64 <_free_r+0x44>
   8aa54:	f855 1c08 	ldr.w	r1, [r5, #-8]
   8aa58:	1a5b      	subs	r3, r3, r1
   8aa5a:	6898      	ldr	r0, [r3, #8]
   8aa5c:	1852      	adds	r2, r2, r1
   8aa5e:	68d9      	ldr	r1, [r3, #12]
   8aa60:	60c1      	str	r1, [r0, #12]
   8aa62:	6088      	str	r0, [r1, #8]
   8aa64:	4845      	ldr	r0, [pc, #276]	; (8ab7c <_free_r+0x15c>)
   8aa66:	f042 0101 	orr.w	r1, r2, #1
   8aa6a:	6059      	str	r1, [r3, #4]
   8aa6c:	6083      	str	r3, [r0, #8]
   8aa6e:	4b44      	ldr	r3, [pc, #272]	; (8ab80 <_free_r+0x160>)
   8aa70:	6819      	ldr	r1, [r3, #0]
   8aa72:	428a      	cmp	r2, r1
   8aa74:	d304      	bcc.n	8aa80 <_free_r+0x60>
   8aa76:	4a43      	ldr	r2, [pc, #268]	; (8ab84 <_free_r+0x164>)
   8aa78:	4630      	mov	r0, r6
   8aa7a:	6811      	ldr	r1, [r2, #0]
   8aa7c:	f7ff ff82 	bl	8a984 <_malloc_trim_r>
   8aa80:	4630      	mov	r0, r6
   8aa82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8aa86:	f000 ba92 	b.w	8afae <__malloc_unlock>
   8aa8a:	6060      	str	r0, [r4, #4]
   8aa8c:	b959      	cbnz	r1, 8aaa6 <_free_r+0x86>
   8aa8e:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8aa92:	3708      	adds	r7, #8
   8aa94:	1b5b      	subs	r3, r3, r5
   8aa96:	1952      	adds	r2, r2, r5
   8aa98:	689d      	ldr	r5, [r3, #8]
   8aa9a:	42bd      	cmp	r5, r7
   8aa9c:	d005      	beq.n	8aaaa <_free_r+0x8a>
   8aa9e:	68df      	ldr	r7, [r3, #12]
   8aaa0:	60ef      	str	r7, [r5, #12]
   8aaa2:	60bd      	str	r5, [r7, #8]
   8aaa4:	e002      	b.n	8aaac <_free_r+0x8c>
   8aaa6:	2100      	movs	r1, #0
   8aaa8:	e000      	b.n	8aaac <_free_r+0x8c>
   8aaaa:	2101      	movs	r1, #1
   8aaac:	1825      	adds	r5, r4, r0
   8aaae:	686d      	ldr	r5, [r5, #4]
   8aab0:	f015 0f01 	tst.w	r5, #1
   8aab4:	d10f      	bne.n	8aad6 <_free_r+0xb6>
   8aab6:	1812      	adds	r2, r2, r0
   8aab8:	b949      	cbnz	r1, 8aace <_free_r+0xae>
   8aaba:	68a0      	ldr	r0, [r4, #8]
   8aabc:	4d32      	ldr	r5, [pc, #200]	; (8ab88 <_free_r+0x168>)
   8aabe:	42a8      	cmp	r0, r5
   8aac0:	d105      	bne.n	8aace <_free_r+0xae>
   8aac2:	60eb      	str	r3, [r5, #12]
   8aac4:	60ab      	str	r3, [r5, #8]
   8aac6:	60d8      	str	r0, [r3, #12]
   8aac8:	6098      	str	r0, [r3, #8]
   8aaca:	2101      	movs	r1, #1
   8aacc:	e003      	b.n	8aad6 <_free_r+0xb6>
   8aace:	68e0      	ldr	r0, [r4, #12]
   8aad0:	68a4      	ldr	r4, [r4, #8]
   8aad2:	60e0      	str	r0, [r4, #12]
   8aad4:	6084      	str	r4, [r0, #8]
   8aad6:	f042 0001 	orr.w	r0, r2, #1
   8aada:	6058      	str	r0, [r3, #4]
   8aadc:	509a      	str	r2, [r3, r2]
   8aade:	2900      	cmp	r1, #0
   8aae0:	d1ce      	bne.n	8aa80 <_free_r+0x60>
   8aae2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8aae6:	d20c      	bcs.n	8ab02 <_free_r+0xe2>
   8aae8:	08d2      	lsrs	r2, r2, #3
   8aaea:	1090      	asrs	r0, r2, #2
   8aaec:	2401      	movs	r4, #1
   8aaee:	fa04 f400 	lsl.w	r4, r4, r0
   8aaf2:	4922      	ldr	r1, [pc, #136]	; (8ab7c <_free_r+0x15c>)
   8aaf4:	6848      	ldr	r0, [r1, #4]
   8aaf6:	4320      	orrs	r0, r4
   8aaf8:	6048      	str	r0, [r1, #4]
   8aafa:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   8aafe:	6881      	ldr	r1, [r0, #8]
   8ab00:	e035      	b.n	8ab6e <_free_r+0x14e>
   8ab02:	0a54      	lsrs	r4, r2, #9
   8ab04:	2c04      	cmp	r4, #4
   8ab06:	d802      	bhi.n	8ab0e <_free_r+0xee>
   8ab08:	0994      	lsrs	r4, r2, #6
   8ab0a:	3438      	adds	r4, #56	; 0x38
   8ab0c:	e016      	b.n	8ab3c <_free_r+0x11c>
   8ab0e:	2c14      	cmp	r4, #20
   8ab10:	d801      	bhi.n	8ab16 <_free_r+0xf6>
   8ab12:	345b      	adds	r4, #91	; 0x5b
   8ab14:	e012      	b.n	8ab3c <_free_r+0x11c>
   8ab16:	2c54      	cmp	r4, #84	; 0x54
   8ab18:	d802      	bhi.n	8ab20 <_free_r+0x100>
   8ab1a:	0b14      	lsrs	r4, r2, #12
   8ab1c:	346e      	adds	r4, #110	; 0x6e
   8ab1e:	e00d      	b.n	8ab3c <_free_r+0x11c>
   8ab20:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
   8ab24:	d802      	bhi.n	8ab2c <_free_r+0x10c>
   8ab26:	0bd4      	lsrs	r4, r2, #15
   8ab28:	3477      	adds	r4, #119	; 0x77
   8ab2a:	e007      	b.n	8ab3c <_free_r+0x11c>
   8ab2c:	f240 5554 	movw	r5, #1364	; 0x554
   8ab30:	42ac      	cmp	r4, r5
   8ab32:	d802      	bhi.n	8ab3a <_free_r+0x11a>
   8ab34:	0c94      	lsrs	r4, r2, #18
   8ab36:	347c      	adds	r4, #124	; 0x7c
   8ab38:	e000      	b.n	8ab3c <_free_r+0x11c>
   8ab3a:	247e      	movs	r4, #126	; 0x7e
   8ab3c:	4d0f      	ldr	r5, [pc, #60]	; (8ab7c <_free_r+0x15c>)
   8ab3e:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   8ab42:	6881      	ldr	r1, [r0, #8]
   8ab44:	4281      	cmp	r1, r0
   8ab46:	d10c      	bne.n	8ab62 <_free_r+0x142>
   8ab48:	2201      	movs	r2, #1
   8ab4a:	10a4      	asrs	r4, r4, #2
   8ab4c:	fa02 f404 	lsl.w	r4, r2, r4
   8ab50:	6868      	ldr	r0, [r5, #4]
   8ab52:	ea44 0200 	orr.w	r2, r4, r0
   8ab56:	606a      	str	r2, [r5, #4]
   8ab58:	4608      	mov	r0, r1
   8ab5a:	e008      	b.n	8ab6e <_free_r+0x14e>
   8ab5c:	6889      	ldr	r1, [r1, #8]
   8ab5e:	4281      	cmp	r1, r0
   8ab60:	d004      	beq.n	8ab6c <_free_r+0x14c>
   8ab62:	684c      	ldr	r4, [r1, #4]
   8ab64:	f024 0403 	bic.w	r4, r4, #3
   8ab68:	42a2      	cmp	r2, r4
   8ab6a:	d3f7      	bcc.n	8ab5c <_free_r+0x13c>
   8ab6c:	68c8      	ldr	r0, [r1, #12]
   8ab6e:	60d8      	str	r0, [r3, #12]
   8ab70:	6099      	str	r1, [r3, #8]
   8ab72:	6083      	str	r3, [r0, #8]
   8ab74:	60cb      	str	r3, [r1, #12]
   8ab76:	e783      	b.n	8aa80 <_free_r+0x60>
   8ab78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ab7a:	bf00      	nop
   8ab7c:	200706d8 	.word	0x200706d8
   8ab80:	20070ae4 	.word	0x20070ae4
   8ab84:	20071618 	.word	0x20071618
   8ab88:	200706e0 	.word	0x200706e0

0008ab8c <_malloc_r>:
   8ab8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8ab90:	f101 040b 	add.w	r4, r1, #11
   8ab94:	2c16      	cmp	r4, #22
   8ab96:	4606      	mov	r6, r0
   8ab98:	d903      	bls.n	8aba2 <_malloc_r+0x16>
   8ab9a:	f034 0407 	bics.w	r4, r4, #7
   8ab9e:	d501      	bpl.n	8aba4 <_malloc_r+0x18>
   8aba0:	e002      	b.n	8aba8 <_malloc_r+0x1c>
   8aba2:	2410      	movs	r4, #16
   8aba4:	428c      	cmp	r4, r1
   8aba6:	d202      	bcs.n	8abae <_malloc_r+0x22>
   8aba8:	250c      	movs	r5, #12
   8abaa:	6035      	str	r5, [r6, #0]
   8abac:	e1d9      	b.n	8af62 <_malloc_r+0x3d6>
   8abae:	4630      	mov	r0, r6
   8abb0:	f000 f9fc 	bl	8afac <__malloc_lock>
   8abb4:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   8abb8:	d214      	bcs.n	8abe4 <_malloc_r+0x58>
   8abba:	4da0      	ldr	r5, [pc, #640]	; (8ae3c <_malloc_r+0x2b0>)
   8abbc:	08e1      	lsrs	r1, r4, #3
   8abbe:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   8abc2:	68c5      	ldr	r5, [r0, #12]
   8abc4:	4285      	cmp	r5, r0
   8abc6:	d105      	bne.n	8abd4 <_malloc_r+0x48>
   8abc8:	f105 0308 	add.w	r3, r5, #8
   8abcc:	696d      	ldr	r5, [r5, #20]
   8abce:	1c8a      	adds	r2, r1, #2
   8abd0:	429d      	cmp	r5, r3
   8abd2:	d044      	beq.n	8ac5e <_malloc_r+0xd2>
   8abd4:	68e8      	ldr	r0, [r5, #12]
   8abd6:	68a9      	ldr	r1, [r5, #8]
   8abd8:	686a      	ldr	r2, [r5, #4]
   8abda:	60c8      	str	r0, [r1, #12]
   8abdc:	f022 0303 	bic.w	r3, r2, #3
   8abe0:	6081      	str	r1, [r0, #8]
   8abe2:	e059      	b.n	8ac98 <_malloc_r+0x10c>
   8abe4:	0a62      	lsrs	r2, r4, #9
   8abe6:	d101      	bne.n	8abec <_malloc_r+0x60>
   8abe8:	08e2      	lsrs	r2, r4, #3
   8abea:	e01b      	b.n	8ac24 <_malloc_r+0x98>
   8abec:	2a04      	cmp	r2, #4
   8abee:	d802      	bhi.n	8abf6 <_malloc_r+0x6a>
   8abf0:	09a2      	lsrs	r2, r4, #6
   8abf2:	3238      	adds	r2, #56	; 0x38
   8abf4:	e016      	b.n	8ac24 <_malloc_r+0x98>
   8abf6:	2a14      	cmp	r2, #20
   8abf8:	d801      	bhi.n	8abfe <_malloc_r+0x72>
   8abfa:	325b      	adds	r2, #91	; 0x5b
   8abfc:	e012      	b.n	8ac24 <_malloc_r+0x98>
   8abfe:	2a54      	cmp	r2, #84	; 0x54
   8ac00:	d802      	bhi.n	8ac08 <_malloc_r+0x7c>
   8ac02:	0b22      	lsrs	r2, r4, #12
   8ac04:	326e      	adds	r2, #110	; 0x6e
   8ac06:	e00d      	b.n	8ac24 <_malloc_r+0x98>
   8ac08:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8ac0c:	d802      	bhi.n	8ac14 <_malloc_r+0x88>
   8ac0e:	0be2      	lsrs	r2, r4, #15
   8ac10:	3277      	adds	r2, #119	; 0x77
   8ac12:	e007      	b.n	8ac24 <_malloc_r+0x98>
   8ac14:	f240 5354 	movw	r3, #1364	; 0x554
   8ac18:	429a      	cmp	r2, r3
   8ac1a:	d802      	bhi.n	8ac22 <_malloc_r+0x96>
   8ac1c:	0ca2      	lsrs	r2, r4, #18
   8ac1e:	327c      	adds	r2, #124	; 0x7c
   8ac20:	e000      	b.n	8ac24 <_malloc_r+0x98>
   8ac22:	227e      	movs	r2, #126	; 0x7e
   8ac24:	4885      	ldr	r0, [pc, #532]	; (8ae3c <_malloc_r+0x2b0>)
   8ac26:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
   8ac2a:	68dd      	ldr	r5, [r3, #12]
   8ac2c:	429d      	cmp	r5, r3
   8ac2e:	d015      	beq.n	8ac5c <_malloc_r+0xd0>
   8ac30:	6869      	ldr	r1, [r5, #4]
   8ac32:	f021 0103 	bic.w	r1, r1, #3
   8ac36:	1b08      	subs	r0, r1, r4
   8ac38:	280f      	cmp	r0, #15
   8ac3a:	dd01      	ble.n	8ac40 <_malloc_r+0xb4>
   8ac3c:	3a01      	subs	r2, #1
   8ac3e:	e00d      	b.n	8ac5c <_malloc_r+0xd0>
   8ac40:	2800      	cmp	r0, #0
   8ac42:	db09      	blt.n	8ac58 <_malloc_r+0xcc>
   8ac44:	68eb      	ldr	r3, [r5, #12]
   8ac46:	68aa      	ldr	r2, [r5, #8]
   8ac48:	60d3      	str	r3, [r2, #12]
   8ac4a:	609a      	str	r2, [r3, #8]
   8ac4c:	186b      	adds	r3, r5, r1
   8ac4e:	685a      	ldr	r2, [r3, #4]
   8ac50:	f042 0001 	orr.w	r0, r2, #1
   8ac54:	6058      	str	r0, [r3, #4]
   8ac56:	e190      	b.n	8af7a <_malloc_r+0x3ee>
   8ac58:	68ed      	ldr	r5, [r5, #12]
   8ac5a:	e7e7      	b.n	8ac2c <_malloc_r+0xa0>
   8ac5c:	3201      	adds	r2, #1
   8ac5e:	4977      	ldr	r1, [pc, #476]	; (8ae3c <_malloc_r+0x2b0>)
   8ac60:	690d      	ldr	r5, [r1, #16]
   8ac62:	f101 0708 	add.w	r7, r1, #8
   8ac66:	42bd      	cmp	r5, r7
   8ac68:	d068      	beq.n	8ad3c <_malloc_r+0x1b0>
   8ac6a:	6868      	ldr	r0, [r5, #4]
   8ac6c:	f020 0303 	bic.w	r3, r0, #3
   8ac70:	1b18      	subs	r0, r3, r4
   8ac72:	280f      	cmp	r0, #15
   8ac74:	dd0c      	ble.n	8ac90 <_malloc_r+0x104>
   8ac76:	192b      	adds	r3, r5, r4
   8ac78:	614b      	str	r3, [r1, #20]
   8ac7a:	610b      	str	r3, [r1, #16]
   8ac7c:	f044 0401 	orr.w	r4, r4, #1
   8ac80:	f040 0101 	orr.w	r1, r0, #1
   8ac84:	606c      	str	r4, [r5, #4]
   8ac86:	60df      	str	r7, [r3, #12]
   8ac88:	609f      	str	r7, [r3, #8]
   8ac8a:	6059      	str	r1, [r3, #4]
   8ac8c:	5018      	str	r0, [r3, r0]
   8ac8e:	e174      	b.n	8af7a <_malloc_r+0x3ee>
   8ac90:	2800      	cmp	r0, #0
   8ac92:	614f      	str	r7, [r1, #20]
   8ac94:	610f      	str	r7, [r1, #16]
   8ac96:	db01      	blt.n	8ac9c <_malloc_r+0x110>
   8ac98:	18eb      	adds	r3, r5, r3
   8ac9a:	e7d8      	b.n	8ac4e <_malloc_r+0xc2>
   8ac9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8aca0:	d20f      	bcs.n	8acc2 <_malloc_r+0x136>
   8aca2:	08db      	lsrs	r3, r3, #3
   8aca4:	1098      	asrs	r0, r3, #2
   8aca6:	2701      	movs	r7, #1
   8aca8:	fa07 f700 	lsl.w	r7, r7, r0
   8acac:	6848      	ldr	r0, [r1, #4]
   8acae:	4307      	orrs	r7, r0
   8acb0:	604f      	str	r7, [r1, #4]
   8acb2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   8acb6:	688b      	ldr	r3, [r1, #8]
   8acb8:	60e9      	str	r1, [r5, #12]
   8acba:	60ab      	str	r3, [r5, #8]
   8acbc:	60dd      	str	r5, [r3, #12]
   8acbe:	608d      	str	r5, [r1, #8]
   8acc0:	e03c      	b.n	8ad3c <_malloc_r+0x1b0>
   8acc2:	0a58      	lsrs	r0, r3, #9
   8acc4:	2804      	cmp	r0, #4
   8acc6:	d802      	bhi.n	8acce <_malloc_r+0x142>
   8acc8:	0998      	lsrs	r0, r3, #6
   8acca:	3038      	adds	r0, #56	; 0x38
   8accc:	e016      	b.n	8acfc <_malloc_r+0x170>
   8acce:	2814      	cmp	r0, #20
   8acd0:	d801      	bhi.n	8acd6 <_malloc_r+0x14a>
   8acd2:	305b      	adds	r0, #91	; 0x5b
   8acd4:	e012      	b.n	8acfc <_malloc_r+0x170>
   8acd6:	2854      	cmp	r0, #84	; 0x54
   8acd8:	d802      	bhi.n	8ace0 <_malloc_r+0x154>
   8acda:	0b18      	lsrs	r0, r3, #12
   8acdc:	306e      	adds	r0, #110	; 0x6e
   8acde:	e00d      	b.n	8acfc <_malloc_r+0x170>
   8ace0:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   8ace4:	d802      	bhi.n	8acec <_malloc_r+0x160>
   8ace6:	0bd8      	lsrs	r0, r3, #15
   8ace8:	3077      	adds	r0, #119	; 0x77
   8acea:	e007      	b.n	8acfc <_malloc_r+0x170>
   8acec:	f240 5754 	movw	r7, #1364	; 0x554
   8acf0:	42b8      	cmp	r0, r7
   8acf2:	d802      	bhi.n	8acfa <_malloc_r+0x16e>
   8acf4:	0c98      	lsrs	r0, r3, #18
   8acf6:	307c      	adds	r0, #124	; 0x7c
   8acf8:	e000      	b.n	8acfc <_malloc_r+0x170>
   8acfa:	207e      	movs	r0, #126	; 0x7e
   8acfc:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8ae3c <_malloc_r+0x2b0>
   8ad00:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
   8ad04:	68b9      	ldr	r1, [r7, #8]
   8ad06:	42b9      	cmp	r1, r7
   8ad08:	d10e      	bne.n	8ad28 <_malloc_r+0x19c>
   8ad0a:	1087      	asrs	r7, r0, #2
   8ad0c:	2301      	movs	r3, #1
   8ad0e:	fa03 f007 	lsl.w	r0, r3, r7
   8ad12:	f8de 7004 	ldr.w	r7, [lr, #4]
   8ad16:	ea40 0307 	orr.w	r3, r0, r7
   8ad1a:	f8ce 3004 	str.w	r3, [lr, #4]
   8ad1e:	4608      	mov	r0, r1
   8ad20:	e008      	b.n	8ad34 <_malloc_r+0x1a8>
   8ad22:	6889      	ldr	r1, [r1, #8]
   8ad24:	42b9      	cmp	r1, r7
   8ad26:	d004      	beq.n	8ad32 <_malloc_r+0x1a6>
   8ad28:	6848      	ldr	r0, [r1, #4]
   8ad2a:	f020 0003 	bic.w	r0, r0, #3
   8ad2e:	4283      	cmp	r3, r0
   8ad30:	d3f7      	bcc.n	8ad22 <_malloc_r+0x196>
   8ad32:	68c8      	ldr	r0, [r1, #12]
   8ad34:	60e8      	str	r0, [r5, #12]
   8ad36:	60a9      	str	r1, [r5, #8]
   8ad38:	60cd      	str	r5, [r1, #12]
   8ad3a:	6085      	str	r5, [r0, #8]
   8ad3c:	1095      	asrs	r5, r2, #2
   8ad3e:	2001      	movs	r0, #1
   8ad40:	fa00 f305 	lsl.w	r3, r0, r5
   8ad44:	4f3d      	ldr	r7, [pc, #244]	; (8ae3c <_malloc_r+0x2b0>)
   8ad46:	6879      	ldr	r1, [r7, #4]
   8ad48:	428b      	cmp	r3, r1
   8ad4a:	d85d      	bhi.n	8ae08 <_malloc_r+0x27c>
   8ad4c:	420b      	tst	r3, r1
   8ad4e:	d105      	bne.n	8ad5c <_malloc_r+0x1d0>
   8ad50:	f022 0203 	bic.w	r2, r2, #3
   8ad54:	005b      	lsls	r3, r3, #1
   8ad56:	3204      	adds	r2, #4
   8ad58:	420b      	tst	r3, r1
   8ad5a:	d0fb      	beq.n	8ad54 <_malloc_r+0x1c8>
   8ad5c:	4d37      	ldr	r5, [pc, #220]	; (8ae3c <_malloc_r+0x2b0>)
   8ad5e:	4610      	mov	r0, r2
   8ad60:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
   8ad64:	4677      	mov	r7, lr
   8ad66:	68fd      	ldr	r5, [r7, #12]
   8ad68:	42bd      	cmp	r5, r7
   8ad6a:	d02d      	beq.n	8adc8 <_malloc_r+0x23c>
   8ad6c:	6869      	ldr	r1, [r5, #4]
   8ad6e:	f021 0c03 	bic.w	ip, r1, #3
   8ad72:	ebc4 010c 	rsb	r1, r4, ip
   8ad76:	290f      	cmp	r1, #15
   8ad78:	dd13      	ble.n	8ada2 <_malloc_r+0x216>
   8ad7a:	192b      	adds	r3, r5, r4
   8ad7c:	f044 0401 	orr.w	r4, r4, #1
   8ad80:	68ea      	ldr	r2, [r5, #12]
   8ad82:	606c      	str	r4, [r5, #4]
   8ad84:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8ad88:	5059      	str	r1, [r3, r1]
   8ad8a:	60c2      	str	r2, [r0, #12]
   8ad8c:	6090      	str	r0, [r2, #8]
   8ad8e:	4a2b      	ldr	r2, [pc, #172]	; (8ae3c <_malloc_r+0x2b0>)
   8ad90:	f041 0001 	orr.w	r0, r1, #1
   8ad94:	6153      	str	r3, [r2, #20]
   8ad96:	6113      	str	r3, [r2, #16]
   8ad98:	3208      	adds	r2, #8
   8ad9a:	60da      	str	r2, [r3, #12]
   8ad9c:	609a      	str	r2, [r3, #8]
   8ad9e:	6058      	str	r0, [r3, #4]
   8ada0:	e00c      	b.n	8adbc <_malloc_r+0x230>
   8ada2:	2900      	cmp	r1, #0
   8ada4:	db0e      	blt.n	8adc4 <_malloc_r+0x238>
   8ada6:	eb05 000c 	add.w	r0, r5, ip
   8adaa:	6842      	ldr	r2, [r0, #4]
   8adac:	68e9      	ldr	r1, [r5, #12]
   8adae:	f042 0301 	orr.w	r3, r2, #1
   8adb2:	6043      	str	r3, [r0, #4]
   8adb4:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8adb8:	60c1      	str	r1, [r0, #12]
   8adba:	6088      	str	r0, [r1, #8]
   8adbc:	4630      	mov	r0, r6
   8adbe:	f000 f8f6 	bl	8afae <__malloc_unlock>
   8adc2:	e0de      	b.n	8af82 <_malloc_r+0x3f6>
   8adc4:	68ed      	ldr	r5, [r5, #12]
   8adc6:	e7cf      	b.n	8ad68 <_malloc_r+0x1dc>
   8adc8:	3001      	adds	r0, #1
   8adca:	0781      	lsls	r1, r0, #30
   8adcc:	f105 0708 	add.w	r7, r5, #8
   8add0:	d1c9      	bne.n	8ad66 <_malloc_r+0x1da>
   8add2:	4671      	mov	r1, lr
   8add4:	0795      	lsls	r5, r2, #30
   8add6:	d105      	bne.n	8ade4 <_malloc_r+0x258>
   8add8:	4a18      	ldr	r2, [pc, #96]	; (8ae3c <_malloc_r+0x2b0>)
   8adda:	6855      	ldr	r5, [r2, #4]
   8addc:	ea25 0503 	bic.w	r5, r5, r3
   8ade0:	6055      	str	r5, [r2, #4]
   8ade2:	e005      	b.n	8adf0 <_malloc_r+0x264>
   8ade4:	f1a1 0708 	sub.w	r7, r1, #8
   8ade8:	6809      	ldr	r1, [r1, #0]
   8adea:	3a01      	subs	r2, #1
   8adec:	42b9      	cmp	r1, r7
   8adee:	d0f1      	beq.n	8add4 <_malloc_r+0x248>
   8adf0:	4f12      	ldr	r7, [pc, #72]	; (8ae3c <_malloc_r+0x2b0>)
   8adf2:	005b      	lsls	r3, r3, #1
   8adf4:	687f      	ldr	r7, [r7, #4]
   8adf6:	42bb      	cmp	r3, r7
   8adf8:	d806      	bhi.n	8ae08 <_malloc_r+0x27c>
   8adfa:	b12b      	cbz	r3, 8ae08 <_malloc_r+0x27c>
   8adfc:	4602      	mov	r2, r0
   8adfe:	423b      	tst	r3, r7
   8ae00:	d1ac      	bne.n	8ad5c <_malloc_r+0x1d0>
   8ae02:	3204      	adds	r2, #4
   8ae04:	005b      	lsls	r3, r3, #1
   8ae06:	e7fa      	b.n	8adfe <_malloc_r+0x272>
   8ae08:	4b0c      	ldr	r3, [pc, #48]	; (8ae3c <_malloc_r+0x2b0>)
   8ae0a:	689f      	ldr	r7, [r3, #8]
   8ae0c:	4619      	mov	r1, r3
   8ae0e:	6878      	ldr	r0, [r7, #4]
   8ae10:	f020 0903 	bic.w	r9, r0, #3
   8ae14:	45a1      	cmp	r9, r4
   8ae16:	d304      	bcc.n	8ae22 <_malloc_r+0x296>
   8ae18:	ebc4 0009 	rsb	r0, r4, r9
   8ae1c:	280f      	cmp	r0, #15
   8ae1e:	f300 80a2 	bgt.w	8af66 <_malloc_r+0x3da>
   8ae22:	4a07      	ldr	r2, [pc, #28]	; (8ae40 <_malloc_r+0x2b4>)
   8ae24:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
   8ae28:	6815      	ldr	r5, [r2, #0]
   8ae2a:	3301      	adds	r3, #1
   8ae2c:	eb07 0a09 	add.w	sl, r7, r9
   8ae30:	eb04 0805 	add.w	r8, r4, r5
   8ae34:	d106      	bne.n	8ae44 <_malloc_r+0x2b8>
   8ae36:	f108 0810 	add.w	r8, r8, #16
   8ae3a:	e00b      	b.n	8ae54 <_malloc_r+0x2c8>
   8ae3c:	200706d8 	.word	0x200706d8
   8ae40:	20071618 	.word	0x20071618
   8ae44:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   8ae48:	f100 010f 	add.w	r1, r0, #15
   8ae4c:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
   8ae50:	f022 080f 	bic.w	r8, r2, #15
   8ae54:	4630      	mov	r0, r6
   8ae56:	4641      	mov	r1, r8
   8ae58:	f000 fa18 	bl	8b28c <_sbrk_r>
   8ae5c:	1c42      	adds	r2, r0, #1
   8ae5e:	4605      	mov	r5, r0
   8ae60:	d071      	beq.n	8af46 <_malloc_r+0x3ba>
   8ae62:	4550      	cmp	r0, sl
   8ae64:	d202      	bcs.n	8ae6c <_malloc_r+0x2e0>
   8ae66:	4b48      	ldr	r3, [pc, #288]	; (8af88 <_malloc_r+0x3fc>)
   8ae68:	429f      	cmp	r7, r3
   8ae6a:	d16c      	bne.n	8af46 <_malloc_r+0x3ba>
   8ae6c:	4847      	ldr	r0, [pc, #284]	; (8af8c <_malloc_r+0x400>)
   8ae6e:	4555      	cmp	r5, sl
   8ae70:	6841      	ldr	r1, [r0, #4]
   8ae72:	4a45      	ldr	r2, [pc, #276]	; (8af88 <_malloc_r+0x3fc>)
   8ae74:	eb08 0301 	add.w	r3, r8, r1
   8ae78:	6043      	str	r3, [r0, #4]
   8ae7a:	d107      	bne.n	8ae8c <_malloc_r+0x300>
   8ae7c:	0529      	lsls	r1, r5, #20
   8ae7e:	d105      	bne.n	8ae8c <_malloc_r+0x300>
   8ae80:	6895      	ldr	r5, [r2, #8]
   8ae82:	44c8      	add	r8, r9
   8ae84:	f048 0001 	orr.w	r0, r8, #1
   8ae88:	6068      	str	r0, [r5, #4]
   8ae8a:	e051      	b.n	8af30 <_malloc_r+0x3a4>
   8ae8c:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   8ae90:	1c42      	adds	r2, r0, #1
   8ae92:	d103      	bne.n	8ae9c <_malloc_r+0x310>
   8ae94:	4a3c      	ldr	r2, [pc, #240]	; (8af88 <_malloc_r+0x3fc>)
   8ae96:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
   8ae9a:	e005      	b.n	8aea8 <_malloc_r+0x31c>
   8ae9c:	ebca 0a05 	rsb	sl, sl, r5
   8aea0:	eb03 010a 	add.w	r1, r3, sl
   8aea4:	4b39      	ldr	r3, [pc, #228]	; (8af8c <_malloc_r+0x400>)
   8aea6:	6059      	str	r1, [r3, #4]
   8aea8:	f015 0007 	ands.w	r0, r5, #7
   8aeac:	bf1c      	itt	ne
   8aeae:	f1c0 0008 	rsbne	r0, r0, #8
   8aeb2:	182d      	addne	r5, r5, r0
   8aeb4:	eb05 0c08 	add.w	ip, r5, r8
   8aeb8:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   8aebc:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
   8aec0:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
   8aec4:	4641      	mov	r1, r8
   8aec6:	4630      	mov	r0, r6
   8aec8:	f000 f9e0 	bl	8b28c <_sbrk_r>
   8aecc:	4a2f      	ldr	r2, [pc, #188]	; (8af8c <_malloc_r+0x400>)
   8aece:	1c43      	adds	r3, r0, #1
   8aed0:	6853      	ldr	r3, [r2, #4]
   8aed2:	bf08      	it	eq
   8aed4:	f04f 0800 	moveq.w	r8, #0
   8aed8:	eb08 0103 	add.w	r1, r8, r3
   8aedc:	bf08      	it	eq
   8aede:	4628      	moveq	r0, r5
   8aee0:	6051      	str	r1, [r2, #4]
   8aee2:	1b40      	subs	r0, r0, r5
   8aee4:	4a28      	ldr	r2, [pc, #160]	; (8af88 <_malloc_r+0x3fc>)
   8aee6:	eb00 0308 	add.w	r3, r0, r8
   8aeea:	f043 0101 	orr.w	r1, r3, #1
   8aeee:	4297      	cmp	r7, r2
   8aef0:	6095      	str	r5, [r2, #8]
   8aef2:	6069      	str	r1, [r5, #4]
   8aef4:	d01c      	beq.n	8af30 <_malloc_r+0x3a4>
   8aef6:	f1b9 0f0f 	cmp.w	r9, #15
   8aefa:	d802      	bhi.n	8af02 <_malloc_r+0x376>
   8aefc:	2201      	movs	r2, #1
   8aefe:	606a      	str	r2, [r5, #4]
   8af00:	e021      	b.n	8af46 <_malloc_r+0x3ba>
   8af02:	687d      	ldr	r5, [r7, #4]
   8af04:	f1a9 090c 	sub.w	r9, r9, #12
   8af08:	f029 0907 	bic.w	r9, r9, #7
   8af0c:	f005 0201 	and.w	r2, r5, #1
   8af10:	2105      	movs	r1, #5
   8af12:	eb07 0309 	add.w	r3, r7, r9
   8af16:	ea49 0002 	orr.w	r0, r9, r2
   8af1a:	f1b9 0f0f 	cmp.w	r9, #15
   8af1e:	6078      	str	r0, [r7, #4]
   8af20:	6059      	str	r1, [r3, #4]
   8af22:	6099      	str	r1, [r3, #8]
   8af24:	d904      	bls.n	8af30 <_malloc_r+0x3a4>
   8af26:	4630      	mov	r0, r6
   8af28:	f107 0108 	add.w	r1, r7, #8
   8af2c:	f7ff fd78 	bl	8aa20 <_free_r>
   8af30:	4a16      	ldr	r2, [pc, #88]	; (8af8c <_malloc_r+0x400>)
   8af32:	6853      	ldr	r3, [r2, #4]
   8af34:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   8af36:	6b15      	ldr	r5, [r2, #48]	; 0x30
   8af38:	428b      	cmp	r3, r1
   8af3a:	bf88      	it	hi
   8af3c:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   8af3e:	42ab      	cmp	r3, r5
   8af40:	bf84      	itt	hi
   8af42:	4d12      	ldrhi	r5, [pc, #72]	; (8af8c <_malloc_r+0x400>)
   8af44:	632b      	strhi	r3, [r5, #48]	; 0x30
   8af46:	4810      	ldr	r0, [pc, #64]	; (8af88 <_malloc_r+0x3fc>)
   8af48:	6882      	ldr	r2, [r0, #8]
   8af4a:	6853      	ldr	r3, [r2, #4]
   8af4c:	f023 0103 	bic.w	r1, r3, #3
   8af50:	42a1      	cmp	r1, r4
   8af52:	ebc4 0001 	rsb	r0, r4, r1
   8af56:	d301      	bcc.n	8af5c <_malloc_r+0x3d0>
   8af58:	280f      	cmp	r0, #15
   8af5a:	dc04      	bgt.n	8af66 <_malloc_r+0x3da>
   8af5c:	4630      	mov	r0, r6
   8af5e:	f000 f826 	bl	8afae <__malloc_unlock>
   8af62:	2500      	movs	r5, #0
   8af64:	e00d      	b.n	8af82 <_malloc_r+0x3f6>
   8af66:	4a08      	ldr	r2, [pc, #32]	; (8af88 <_malloc_r+0x3fc>)
   8af68:	f044 0301 	orr.w	r3, r4, #1
   8af6c:	6895      	ldr	r5, [r2, #8]
   8af6e:	f040 0101 	orr.w	r1, r0, #1
   8af72:	192c      	adds	r4, r5, r4
   8af74:	606b      	str	r3, [r5, #4]
   8af76:	6094      	str	r4, [r2, #8]
   8af78:	6061      	str	r1, [r4, #4]
   8af7a:	4630      	mov	r0, r6
   8af7c:	f000 f817 	bl	8afae <__malloc_unlock>
   8af80:	3508      	adds	r5, #8
   8af82:	4628      	mov	r0, r5
   8af84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8af88:	200706d8 	.word	0x200706d8
   8af8c:	20071618 	.word	0x20071618

0008af90 <memchr>:
   8af90:	b510      	push	{r4, lr}
   8af92:	b2c9      	uxtb	r1, r1
   8af94:	4603      	mov	r3, r0
   8af96:	1882      	adds	r2, r0, r2
   8af98:	4293      	cmp	r3, r2
   8af9a:	4618      	mov	r0, r3
   8af9c:	d004      	beq.n	8afa8 <memchr+0x18>
   8af9e:	7804      	ldrb	r4, [r0, #0]
   8afa0:	3301      	adds	r3, #1
   8afa2:	428c      	cmp	r4, r1
   8afa4:	d1f8      	bne.n	8af98 <memchr+0x8>
   8afa6:	e000      	b.n	8afaa <memchr+0x1a>
   8afa8:	2000      	movs	r0, #0
   8afaa:	bd10      	pop	{r4, pc}

0008afac <__malloc_lock>:
   8afac:	4770      	bx	lr

0008afae <__malloc_unlock>:
   8afae:	4770      	bx	lr

0008afb0 <_realloc_r>:
   8afb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8afb4:	4681      	mov	r9, r0
   8afb6:	4616      	mov	r6, r2
   8afb8:	460c      	mov	r4, r1
   8afba:	b921      	cbnz	r1, 8afc6 <_realloc_r+0x16>
   8afbc:	4611      	mov	r1, r2
   8afbe:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8afc2:	f7ff bde3 	b.w	8ab8c <_malloc_r>
   8afc6:	f7ff fff1 	bl	8afac <__malloc_lock>
   8afca:	f106 070b 	add.w	r7, r6, #11
   8afce:	f854 5c04 	ldr.w	r5, [r4, #-4]
   8afd2:	2f16      	cmp	r7, #22
   8afd4:	f1a4 0b08 	sub.w	fp, r4, #8
   8afd8:	f025 0803 	bic.w	r8, r5, #3
   8afdc:	d903      	bls.n	8afe6 <_realloc_r+0x36>
   8afde:	f037 0707 	bics.w	r7, r7, #7
   8afe2:	d501      	bpl.n	8afe8 <_realloc_r+0x38>
   8afe4:	e002      	b.n	8afec <_realloc_r+0x3c>
   8afe6:	2710      	movs	r7, #16
   8afe8:	42b7      	cmp	r7, r6
   8afea:	d204      	bcs.n	8aff6 <_realloc_r+0x46>
   8afec:	200c      	movs	r0, #12
   8afee:	f8c9 0000 	str.w	r0, [r9]
   8aff2:	2600      	movs	r6, #0
   8aff4:	e145      	b.n	8b282 <_realloc_r+0x2d2>
   8aff6:	45b8      	cmp	r8, r7
   8aff8:	f280 811a 	bge.w	8b230 <_realloc_r+0x280>
   8affc:	4aa2      	ldr	r2, [pc, #648]	; (8b288 <_realloc_r+0x2d8>)
   8affe:	eb0b 0308 	add.w	r3, fp, r8
   8b002:	6891      	ldr	r1, [r2, #8]
   8b004:	428b      	cmp	r3, r1
   8b006:	d006      	beq.n	8b016 <_realloc_r+0x66>
   8b008:	6858      	ldr	r0, [r3, #4]
   8b00a:	f020 0201 	bic.w	r2, r0, #1
   8b00e:	1898      	adds	r0, r3, r2
   8b010:	6842      	ldr	r2, [r0, #4]
   8b012:	07d0      	lsls	r0, r2, #31
   8b014:	d426      	bmi.n	8b064 <_realloc_r+0xb4>
   8b016:	685a      	ldr	r2, [r3, #4]
   8b018:	428b      	cmp	r3, r1
   8b01a:	f022 0003 	bic.w	r0, r2, #3
   8b01e:	eb00 0a08 	add.w	sl, r0, r8
   8b022:	d118      	bne.n	8b056 <_realloc_r+0xa6>
   8b024:	f107 0210 	add.w	r2, r7, #16
   8b028:	4592      	cmp	sl, r2
   8b02a:	db1d      	blt.n	8b068 <_realloc_r+0xb8>
   8b02c:	ebc7 0a0a 	rsb	sl, r7, sl
   8b030:	eb0b 0507 	add.w	r5, fp, r7
   8b034:	f04a 0101 	orr.w	r1, sl, #1
   8b038:	6069      	str	r1, [r5, #4]
   8b03a:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8b03e:	4e92      	ldr	r6, [pc, #584]	; (8b288 <_realloc_r+0x2d8>)
   8b040:	f002 0301 	and.w	r3, r2, #1
   8b044:	431f      	orrs	r7, r3
   8b046:	60b5      	str	r5, [r6, #8]
   8b048:	f844 7c04 	str.w	r7, [r4, #-4]
   8b04c:	4648      	mov	r0, r9
   8b04e:	f7ff ffae 	bl	8afae <__malloc_unlock>
   8b052:	4626      	mov	r6, r4
   8b054:	e115      	b.n	8b282 <_realloc_r+0x2d2>
   8b056:	45ba      	cmp	sl, r7
   8b058:	db06      	blt.n	8b068 <_realloc_r+0xb8>
   8b05a:	68dd      	ldr	r5, [r3, #12]
   8b05c:	689e      	ldr	r6, [r3, #8]
   8b05e:	60f5      	str	r5, [r6, #12]
   8b060:	60ae      	str	r6, [r5, #8]
   8b062:	e0e6      	b.n	8b232 <_realloc_r+0x282>
   8b064:	2000      	movs	r0, #0
   8b066:	4603      	mov	r3, r0
   8b068:	07ea      	lsls	r2, r5, #31
   8b06a:	f100 8091 	bmi.w	8b190 <_realloc_r+0x1e0>
   8b06e:	f854 5c08 	ldr.w	r5, [r4, #-8]
   8b072:	ebc5 050b 	rsb	r5, r5, fp
   8b076:	686a      	ldr	r2, [r5, #4]
   8b078:	f022 0203 	bic.w	r2, r2, #3
   8b07c:	2b00      	cmp	r3, #0
   8b07e:	d051      	beq.n	8b124 <_realloc_r+0x174>
   8b080:	eb02 0a08 	add.w	sl, r2, r8
   8b084:	428b      	cmp	r3, r1
   8b086:	4482      	add	sl, r0
   8b088:	d145      	bne.n	8b116 <_realloc_r+0x166>
   8b08a:	f107 0310 	add.w	r3, r7, #16
   8b08e:	459a      	cmp	sl, r3
   8b090:	db48      	blt.n	8b124 <_realloc_r+0x174>
   8b092:	462e      	mov	r6, r5
   8b094:	68e9      	ldr	r1, [r5, #12]
   8b096:	f856 3f08 	ldr.w	r3, [r6, #8]!
   8b09a:	f1a8 0204 	sub.w	r2, r8, #4
   8b09e:	2a24      	cmp	r2, #36	; 0x24
   8b0a0:	60d9      	str	r1, [r3, #12]
   8b0a2:	608b      	str	r3, [r1, #8]
   8b0a4:	d825      	bhi.n	8b0f2 <_realloc_r+0x142>
   8b0a6:	2a13      	cmp	r2, #19
   8b0a8:	d91b      	bls.n	8b0e2 <_realloc_r+0x132>
   8b0aa:	6821      	ldr	r1, [r4, #0]
   8b0ac:	2a1b      	cmp	r2, #27
   8b0ae:	60a9      	str	r1, [r5, #8]
   8b0b0:	6863      	ldr	r3, [r4, #4]
   8b0b2:	60eb      	str	r3, [r5, #12]
   8b0b4:	d803      	bhi.n	8b0be <_realloc_r+0x10e>
   8b0b6:	f105 0010 	add.w	r0, r5, #16
   8b0ba:	3408      	adds	r4, #8
   8b0bc:	e012      	b.n	8b0e4 <_realloc_r+0x134>
   8b0be:	68a0      	ldr	r0, [r4, #8]
   8b0c0:	2a24      	cmp	r2, #36	; 0x24
   8b0c2:	6128      	str	r0, [r5, #16]
   8b0c4:	68e1      	ldr	r1, [r4, #12]
   8b0c6:	6169      	str	r1, [r5, #20]
   8b0c8:	d003      	beq.n	8b0d2 <_realloc_r+0x122>
   8b0ca:	f105 0018 	add.w	r0, r5, #24
   8b0ce:	3410      	adds	r4, #16
   8b0d0:	e008      	b.n	8b0e4 <_realloc_r+0x134>
   8b0d2:	6922      	ldr	r2, [r4, #16]
   8b0d4:	f105 0020 	add.w	r0, r5, #32
   8b0d8:	61aa      	str	r2, [r5, #24]
   8b0da:	6963      	ldr	r3, [r4, #20]
   8b0dc:	3418      	adds	r4, #24
   8b0de:	61eb      	str	r3, [r5, #28]
   8b0e0:	e000      	b.n	8b0e4 <_realloc_r+0x134>
   8b0e2:	4630      	mov	r0, r6
   8b0e4:	6821      	ldr	r1, [r4, #0]
   8b0e6:	6001      	str	r1, [r0, #0]
   8b0e8:	6862      	ldr	r2, [r4, #4]
   8b0ea:	6042      	str	r2, [r0, #4]
   8b0ec:	68a3      	ldr	r3, [r4, #8]
   8b0ee:	6083      	str	r3, [r0, #8]
   8b0f0:	e003      	b.n	8b0fa <_realloc_r+0x14a>
   8b0f2:	4630      	mov	r0, r6
   8b0f4:	4621      	mov	r1, r4
   8b0f6:	f7fe feda 	bl	89eae <memmove>
   8b0fa:	ebc7 0a0a 	rsb	sl, r7, sl
   8b0fe:	19e8      	adds	r0, r5, r7
   8b100:	f04a 0201 	orr.w	r2, sl, #1
   8b104:	6042      	str	r2, [r0, #4]
   8b106:	686b      	ldr	r3, [r5, #4]
   8b108:	495f      	ldr	r1, [pc, #380]	; (8b288 <_realloc_r+0x2d8>)
   8b10a:	6088      	str	r0, [r1, #8]
   8b10c:	f003 0001 	and.w	r0, r3, #1
   8b110:	4307      	orrs	r7, r0
   8b112:	606f      	str	r7, [r5, #4]
   8b114:	e088      	b.n	8b228 <_realloc_r+0x278>
   8b116:	45ba      	cmp	sl, r7
   8b118:	db04      	blt.n	8b124 <_realloc_r+0x174>
   8b11a:	68d9      	ldr	r1, [r3, #12]
   8b11c:	6898      	ldr	r0, [r3, #8]
   8b11e:	60c1      	str	r1, [r0, #12]
   8b120:	6088      	str	r0, [r1, #8]
   8b122:	e003      	b.n	8b12c <_realloc_r+0x17c>
   8b124:	eb02 0a08 	add.w	sl, r2, r8
   8b128:	45ba      	cmp	sl, r7
   8b12a:	db31      	blt.n	8b190 <_realloc_r+0x1e0>
   8b12c:	4628      	mov	r0, r5
   8b12e:	68eb      	ldr	r3, [r5, #12]
   8b130:	f850 1f08 	ldr.w	r1, [r0, #8]!
   8b134:	f1a8 0204 	sub.w	r2, r8, #4
   8b138:	2a24      	cmp	r2, #36	; 0x24
   8b13a:	60cb      	str	r3, [r1, #12]
   8b13c:	6099      	str	r1, [r3, #8]
   8b13e:	d823      	bhi.n	8b188 <_realloc_r+0x1d8>
   8b140:	2a13      	cmp	r2, #19
   8b142:	d91a      	bls.n	8b17a <_realloc_r+0x1ca>
   8b144:	6820      	ldr	r0, [r4, #0]
   8b146:	2a1b      	cmp	r2, #27
   8b148:	60a8      	str	r0, [r5, #8]
   8b14a:	6866      	ldr	r6, [r4, #4]
   8b14c:	60ee      	str	r6, [r5, #12]
   8b14e:	d803      	bhi.n	8b158 <_realloc_r+0x1a8>
   8b150:	f105 0010 	add.w	r0, r5, #16
   8b154:	3408      	adds	r4, #8
   8b156:	e010      	b.n	8b17a <_realloc_r+0x1ca>
   8b158:	68a3      	ldr	r3, [r4, #8]
   8b15a:	2a24      	cmp	r2, #36	; 0x24
   8b15c:	612b      	str	r3, [r5, #16]
   8b15e:	68e1      	ldr	r1, [r4, #12]
   8b160:	6169      	str	r1, [r5, #20]
   8b162:	d003      	beq.n	8b16c <_realloc_r+0x1bc>
   8b164:	f105 0018 	add.w	r0, r5, #24
   8b168:	3410      	adds	r4, #16
   8b16a:	e006      	b.n	8b17a <_realloc_r+0x1ca>
   8b16c:	6922      	ldr	r2, [r4, #16]
   8b16e:	61aa      	str	r2, [r5, #24]
   8b170:	6960      	ldr	r0, [r4, #20]
   8b172:	3418      	adds	r4, #24
   8b174:	61e8      	str	r0, [r5, #28]
   8b176:	f105 0020 	add.w	r0, r5, #32
   8b17a:	6826      	ldr	r6, [r4, #0]
   8b17c:	6006      	str	r6, [r0, #0]
   8b17e:	6863      	ldr	r3, [r4, #4]
   8b180:	6043      	str	r3, [r0, #4]
   8b182:	68a1      	ldr	r1, [r4, #8]
   8b184:	6081      	str	r1, [r0, #8]
   8b186:	e055      	b.n	8b234 <_realloc_r+0x284>
   8b188:	4621      	mov	r1, r4
   8b18a:	f7fe fe90 	bl	89eae <memmove>
   8b18e:	e051      	b.n	8b234 <_realloc_r+0x284>
   8b190:	4631      	mov	r1, r6
   8b192:	4648      	mov	r0, r9
   8b194:	f7ff fcfa 	bl	8ab8c <_malloc_r>
   8b198:	4606      	mov	r6, r0
   8b19a:	2800      	cmp	r0, #0
   8b19c:	d044      	beq.n	8b228 <_realloc_r+0x278>
   8b19e:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8b1a2:	f1a0 0208 	sub.w	r2, r0, #8
   8b1a6:	f021 0301 	bic.w	r3, r1, #1
   8b1aa:	eb0b 0103 	add.w	r1, fp, r3
   8b1ae:	428a      	cmp	r2, r1
   8b1b0:	d106      	bne.n	8b1c0 <_realloc_r+0x210>
   8b1b2:	f850 6c04 	ldr.w	r6, [r0, #-4]
   8b1b6:	f026 0503 	bic.w	r5, r6, #3
   8b1ba:	eb05 0a08 	add.w	sl, r5, r8
   8b1be:	e038      	b.n	8b232 <_realloc_r+0x282>
   8b1c0:	f1a8 0204 	sub.w	r2, r8, #4
   8b1c4:	2a24      	cmp	r2, #36	; 0x24
   8b1c6:	d828      	bhi.n	8b21a <_realloc_r+0x26a>
   8b1c8:	2a13      	cmp	r2, #19
   8b1ca:	d91e      	bls.n	8b20a <_realloc_r+0x25a>
   8b1cc:	6823      	ldr	r3, [r4, #0]
   8b1ce:	2a1b      	cmp	r2, #27
   8b1d0:	6003      	str	r3, [r0, #0]
   8b1d2:	6861      	ldr	r1, [r4, #4]
   8b1d4:	6041      	str	r1, [r0, #4]
   8b1d6:	d804      	bhi.n	8b1e2 <_realloc_r+0x232>
   8b1d8:	f100 0008 	add.w	r0, r0, #8
   8b1dc:	f104 0208 	add.w	r2, r4, #8
   8b1e0:	e014      	b.n	8b20c <_realloc_r+0x25c>
   8b1e2:	68a0      	ldr	r0, [r4, #8]
   8b1e4:	2a24      	cmp	r2, #36	; 0x24
   8b1e6:	60b0      	str	r0, [r6, #8]
   8b1e8:	68e3      	ldr	r3, [r4, #12]
   8b1ea:	60f3      	str	r3, [r6, #12]
   8b1ec:	d004      	beq.n	8b1f8 <_realloc_r+0x248>
   8b1ee:	f106 0010 	add.w	r0, r6, #16
   8b1f2:	f104 0210 	add.w	r2, r4, #16
   8b1f6:	e009      	b.n	8b20c <_realloc_r+0x25c>
   8b1f8:	6922      	ldr	r2, [r4, #16]
   8b1fa:	f106 0018 	add.w	r0, r6, #24
   8b1fe:	6132      	str	r2, [r6, #16]
   8b200:	6961      	ldr	r1, [r4, #20]
   8b202:	f104 0218 	add.w	r2, r4, #24
   8b206:	6171      	str	r1, [r6, #20]
   8b208:	e000      	b.n	8b20c <_realloc_r+0x25c>
   8b20a:	4622      	mov	r2, r4
   8b20c:	6813      	ldr	r3, [r2, #0]
   8b20e:	6003      	str	r3, [r0, #0]
   8b210:	6851      	ldr	r1, [r2, #4]
   8b212:	6041      	str	r1, [r0, #4]
   8b214:	6892      	ldr	r2, [r2, #8]
   8b216:	6082      	str	r2, [r0, #8]
   8b218:	e002      	b.n	8b220 <_realloc_r+0x270>
   8b21a:	4621      	mov	r1, r4
   8b21c:	f7fe fe47 	bl	89eae <memmove>
   8b220:	4648      	mov	r0, r9
   8b222:	4621      	mov	r1, r4
   8b224:	f7ff fbfc 	bl	8aa20 <_free_r>
   8b228:	4648      	mov	r0, r9
   8b22a:	f7ff fec0 	bl	8afae <__malloc_unlock>
   8b22e:	e028      	b.n	8b282 <_realloc_r+0x2d2>
   8b230:	46c2      	mov	sl, r8
   8b232:	465d      	mov	r5, fp
   8b234:	ebc7 000a 	rsb	r0, r7, sl
   8b238:	280f      	cmp	r0, #15
   8b23a:	686a      	ldr	r2, [r5, #4]
   8b23c:	d911      	bls.n	8b262 <_realloc_r+0x2b2>
   8b23e:	f002 0601 	and.w	r6, r2, #1
   8b242:	19e9      	adds	r1, r5, r7
   8b244:	f040 0301 	orr.w	r3, r0, #1
   8b248:	4337      	orrs	r7, r6
   8b24a:	606f      	str	r7, [r5, #4]
   8b24c:	1808      	adds	r0, r1, r0
   8b24e:	604b      	str	r3, [r1, #4]
   8b250:	6842      	ldr	r2, [r0, #4]
   8b252:	3108      	adds	r1, #8
   8b254:	f042 0601 	orr.w	r6, r2, #1
   8b258:	6046      	str	r6, [r0, #4]
   8b25a:	4648      	mov	r0, r9
   8b25c:	f7ff fbe0 	bl	8aa20 <_free_r>
   8b260:	e00a      	b.n	8b278 <_realloc_r+0x2c8>
   8b262:	f002 0601 	and.w	r6, r2, #1
   8b266:	ea4a 0306 	orr.w	r3, sl, r6
   8b26a:	606b      	str	r3, [r5, #4]
   8b26c:	eb05 010a 	add.w	r1, r5, sl
   8b270:	6848      	ldr	r0, [r1, #4]
   8b272:	f040 0201 	orr.w	r2, r0, #1
   8b276:	604a      	str	r2, [r1, #4]
   8b278:	4648      	mov	r0, r9
   8b27a:	f7ff fe98 	bl	8afae <__malloc_unlock>
   8b27e:	f105 0608 	add.w	r6, r5, #8
   8b282:	4630      	mov	r0, r6
   8b284:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b288:	200706d8 	.word	0x200706d8

0008b28c <_sbrk_r>:
   8b28c:	b538      	push	{r3, r4, r5, lr}
   8b28e:	4c06      	ldr	r4, [pc, #24]	; (8b2a8 <_sbrk_r+0x1c>)
   8b290:	2300      	movs	r3, #0
   8b292:	4605      	mov	r5, r0
   8b294:	4608      	mov	r0, r1
   8b296:	6023      	str	r3, [r4, #0]
   8b298:	f7fe fab4 	bl	89804 <_sbrk>
   8b29c:	1c43      	adds	r3, r0, #1
   8b29e:	d102      	bne.n	8b2a6 <_sbrk_r+0x1a>
   8b2a0:	6821      	ldr	r1, [r4, #0]
   8b2a2:	b101      	cbz	r1, 8b2a6 <_sbrk_r+0x1a>
   8b2a4:	6029      	str	r1, [r5, #0]
   8b2a6:	bd38      	pop	{r3, r4, r5, pc}
   8b2a8:	20071c30 	.word	0x20071c30

0008b2ac <__ssprint_r>:
   8b2ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b2b0:	4607      	mov	r7, r0
   8b2b2:	6890      	ldr	r0, [r2, #8]
   8b2b4:	460c      	mov	r4, r1
   8b2b6:	4615      	mov	r5, r2
   8b2b8:	f8d2 8000 	ldr.w	r8, [r2]
   8b2bc:	b908      	cbnz	r0, 8b2c2 <__ssprint_r+0x16>
   8b2be:	6050      	str	r0, [r2, #4]
   8b2c0:	e06f      	b.n	8b3a2 <__ssprint_r+0xf6>
   8b2c2:	f04f 0b00 	mov.w	fp, #0
   8b2c6:	465e      	mov	r6, fp
   8b2c8:	b936      	cbnz	r6, 8b2d8 <__ssprint_r+0x2c>
   8b2ca:	f8d8 b000 	ldr.w	fp, [r8]
   8b2ce:	f8d8 6004 	ldr.w	r6, [r8, #4]
   8b2d2:	f108 0808 	add.w	r8, r8, #8
   8b2d6:	e7f7      	b.n	8b2c8 <__ssprint_r+0x1c>
   8b2d8:	68a3      	ldr	r3, [r4, #8]
   8b2da:	429e      	cmp	r6, r3
   8b2dc:	d34c      	bcc.n	8b378 <__ssprint_r+0xcc>
   8b2de:	89a2      	ldrh	r2, [r4, #12]
   8b2e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
   8b2e4:	d046      	beq.n	8b374 <__ssprint_r+0xc8>
   8b2e6:	6823      	ldr	r3, [r4, #0]
   8b2e8:	6960      	ldr	r0, [r4, #20]
   8b2ea:	6921      	ldr	r1, [r4, #16]
   8b2ec:	f04f 0a03 	mov.w	sl, #3
   8b2f0:	ebc1 0903 	rsb	r9, r1, r3
   8b2f4:	fb0a f300 	mul.w	r3, sl, r0
   8b2f8:	2002      	movs	r0, #2
   8b2fa:	fb93 faf0 	sdiv	sl, r3, r0
   8b2fe:	f402 6280 	and.w	r2, r2, #1024	; 0x400
   8b302:	f109 0301 	add.w	r3, r9, #1
   8b306:	1998      	adds	r0, r3, r6
   8b308:	b213      	sxth	r3, r2
   8b30a:	4582      	cmp	sl, r0
   8b30c:	bf38      	it	cc
   8b30e:	4682      	movcc	sl, r0
   8b310:	4638      	mov	r0, r7
   8b312:	b183      	cbz	r3, 8b336 <__ssprint_r+0x8a>
   8b314:	4651      	mov	r1, sl
   8b316:	f7ff fc39 	bl	8ab8c <_malloc_r>
   8b31a:	b1a8      	cbz	r0, 8b348 <__ssprint_r+0x9c>
   8b31c:	6921      	ldr	r1, [r4, #16]
   8b31e:	464a      	mov	r2, r9
   8b320:	9001      	str	r0, [sp, #4]
   8b322:	f7fe fdbb 	bl	89e9c <memcpy>
   8b326:	89a0      	ldrh	r0, [r4, #12]
   8b328:	f420 6290 	bic.w	r2, r0, #1152	; 0x480
   8b32c:	f042 0180 	orr.w	r1, r2, #128	; 0x80
   8b330:	81a1      	strh	r1, [r4, #12]
   8b332:	9901      	ldr	r1, [sp, #4]
   8b334:	e014      	b.n	8b360 <__ssprint_r+0xb4>
   8b336:	4652      	mov	r2, sl
   8b338:	f7ff fe3a 	bl	8afb0 <_realloc_r>
   8b33c:	4601      	mov	r1, r0
   8b33e:	b978      	cbnz	r0, 8b360 <__ssprint_r+0xb4>
   8b340:	4638      	mov	r0, r7
   8b342:	6921      	ldr	r1, [r4, #16]
   8b344:	f7ff fb6c 	bl	8aa20 <_free_r>
   8b348:	89a3      	ldrh	r3, [r4, #12]
   8b34a:	200c      	movs	r0, #12
   8b34c:	2100      	movs	r1, #0
   8b34e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   8b352:	6038      	str	r0, [r7, #0]
   8b354:	81a2      	strh	r2, [r4, #12]
   8b356:	f04f 30ff 	mov.w	r0, #4294967295
   8b35a:	60a9      	str	r1, [r5, #8]
   8b35c:	6069      	str	r1, [r5, #4]
   8b35e:	e020      	b.n	8b3a2 <__ssprint_r+0xf6>
   8b360:	eb01 0309 	add.w	r3, r1, r9
   8b364:	ebc9 000a 	rsb	r0, r9, sl
   8b368:	6023      	str	r3, [r4, #0]
   8b36a:	6121      	str	r1, [r4, #16]
   8b36c:	f8c4 a014 	str.w	sl, [r4, #20]
   8b370:	4633      	mov	r3, r6
   8b372:	60a0      	str	r0, [r4, #8]
   8b374:	429e      	cmp	r6, r3
   8b376:	d200      	bcs.n	8b37a <__ssprint_r+0xce>
   8b378:	4633      	mov	r3, r6
   8b37a:	461a      	mov	r2, r3
   8b37c:	4659      	mov	r1, fp
   8b37e:	6820      	ldr	r0, [r4, #0]
   8b380:	9301      	str	r3, [sp, #4]
   8b382:	f7fe fd94 	bl	89eae <memmove>
   8b386:	68a2      	ldr	r2, [r4, #8]
   8b388:	9901      	ldr	r1, [sp, #4]
   8b38a:	6823      	ldr	r3, [r4, #0]
   8b38c:	1a50      	subs	r0, r2, r1
   8b38e:	185a      	adds	r2, r3, r1
   8b390:	68a9      	ldr	r1, [r5, #8]
   8b392:	60a0      	str	r0, [r4, #8]
   8b394:	1b8e      	subs	r6, r1, r6
   8b396:	6022      	str	r2, [r4, #0]
   8b398:	60ae      	str	r6, [r5, #8]
   8b39a:	2e00      	cmp	r6, #0
   8b39c:	d195      	bne.n	8b2ca <__ssprint_r+0x1e>
   8b39e:	606e      	str	r6, [r5, #4]
   8b3a0:	4630      	mov	r0, r6
   8b3a2:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008b3a6 <_svfiprintf_r>:
   8b3a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b3aa:	461e      	mov	r6, r3
   8b3ac:	898b      	ldrh	r3, [r1, #12]
   8b3ae:	4689      	mov	r9, r1
   8b3b0:	f003 0180 	and.w	r1, r3, #128	; 0x80
   8b3b4:	4614      	mov	r4, r2
   8b3b6:	b20a      	sxth	r2, r1
   8b3b8:	b0a9      	sub	sp, #164	; 0xa4
   8b3ba:	4683      	mov	fp, r0
   8b3bc:	b19a      	cbz	r2, 8b3e6 <_svfiprintf_r+0x40>
   8b3be:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8b3c2:	b983      	cbnz	r3, 8b3e6 <_svfiprintf_r+0x40>
   8b3c4:	2140      	movs	r1, #64	; 0x40
   8b3c6:	f7ff fbe1 	bl	8ab8c <_malloc_r>
   8b3ca:	f8c9 0000 	str.w	r0, [r9]
   8b3ce:	f8c9 0010 	str.w	r0, [r9, #16]
   8b3d2:	b928      	cbnz	r0, 8b3e0 <_svfiprintf_r+0x3a>
   8b3d4:	220c      	movs	r2, #12
   8b3d6:	f8cb 2000 	str.w	r2, [fp]
   8b3da:	f04f 30ff 	mov.w	r0, #4294967295
   8b3de:	e3db      	b.n	8bb98 <_svfiprintf_r+0x7f2>
   8b3e0:	2040      	movs	r0, #64	; 0x40
   8b3e2:	f8c9 0014 	str.w	r0, [r9, #20]
   8b3e6:	2100      	movs	r1, #0
   8b3e8:	ad18      	add	r5, sp, #96	; 0x60
   8b3ea:	950b      	str	r5, [sp, #44]	; 0x2c
   8b3ec:	910d      	str	r1, [sp, #52]	; 0x34
   8b3ee:	910c      	str	r1, [sp, #48]	; 0x30
   8b3f0:	9401      	str	r4, [sp, #4]
   8b3f2:	9105      	str	r1, [sp, #20]
   8b3f4:	9104      	str	r1, [sp, #16]
   8b3f6:	46a8      	mov	r8, r5
   8b3f8:	9b01      	ldr	r3, [sp, #4]
   8b3fa:	461c      	mov	r4, r3
   8b3fc:	f813 2b01 	ldrb.w	r2, [r3], #1
   8b400:	b91a      	cbnz	r2, 8b40a <_svfiprintf_r+0x64>
   8b402:	9801      	ldr	r0, [sp, #4]
   8b404:	1a25      	subs	r5, r4, r0
   8b406:	d103      	bne.n	8b410 <_svfiprintf_r+0x6a>
   8b408:	e01d      	b.n	8b446 <_svfiprintf_r+0xa0>
   8b40a:	2a25      	cmp	r2, #37	; 0x25
   8b40c:	d1f5      	bne.n	8b3fa <_svfiprintf_r+0x54>
   8b40e:	e7f8      	b.n	8b402 <_svfiprintf_r+0x5c>
   8b410:	9a01      	ldr	r2, [sp, #4]
   8b412:	990d      	ldr	r1, [sp, #52]	; 0x34
   8b414:	e888 0024 	stmia.w	r8, {r2, r5}
   8b418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8b41a:	194b      	adds	r3, r1, r5
   8b41c:	1c50      	adds	r0, r2, #1
   8b41e:	2807      	cmp	r0, #7
   8b420:	930d      	str	r3, [sp, #52]	; 0x34
   8b422:	900c      	str	r0, [sp, #48]	; 0x30
   8b424:	dc02      	bgt.n	8b42c <_svfiprintf_r+0x86>
   8b426:	f108 0808 	add.w	r8, r8, #8
   8b42a:	e009      	b.n	8b440 <_svfiprintf_r+0x9a>
   8b42c:	4658      	mov	r0, fp
   8b42e:	4649      	mov	r1, r9
   8b430:	aa0b      	add	r2, sp, #44	; 0x2c
   8b432:	f7ff ff3b 	bl	8b2ac <__ssprint_r>
   8b436:	2800      	cmp	r0, #0
   8b438:	f040 83a3 	bne.w	8bb82 <_svfiprintf_r+0x7dc>
   8b43c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b440:	9904      	ldr	r1, [sp, #16]
   8b442:	194b      	adds	r3, r1, r5
   8b444:	9304      	str	r3, [sp, #16]
   8b446:	7822      	ldrb	r2, [r4, #0]
   8b448:	2a00      	cmp	r2, #0
   8b44a:	f000 8393 	beq.w	8bb74 <_svfiprintf_r+0x7ce>
   8b44e:	2200      	movs	r2, #0
   8b450:	3401      	adds	r4, #1
   8b452:	9401      	str	r4, [sp, #4]
   8b454:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b458:	f04f 3cff 	mov.w	ip, #4294967295
   8b45c:	9203      	str	r2, [sp, #12]
   8b45e:	4617      	mov	r7, r2
   8b460:	9801      	ldr	r0, [sp, #4]
   8b462:	f810 3b01 	ldrb.w	r3, [r0], #1
   8b466:	9001      	str	r0, [sp, #4]
   8b468:	2b63      	cmp	r3, #99	; 0x63
   8b46a:	f000 80b3 	beq.w	8b5d4 <_svfiprintf_r+0x22e>
   8b46e:	dc33      	bgt.n	8b4d8 <_svfiprintf_r+0x132>
   8b470:	2b39      	cmp	r3, #57	; 0x39
   8b472:	dc1a      	bgt.n	8b4aa <_svfiprintf_r+0x104>
   8b474:	2b31      	cmp	r3, #49	; 0x31
   8b476:	f280 8091 	bge.w	8b59c <_svfiprintf_r+0x1f6>
   8b47a:	2b2b      	cmp	r3, #43	; 0x2b
   8b47c:	d101      	bne.n	8b482 <_svfiprintf_r+0xdc>
   8b47e:	461a      	mov	r2, r3
   8b480:	e7ee      	b.n	8b460 <_svfiprintf_r+0xba>
   8b482:	dc0a      	bgt.n	8b49a <_svfiprintf_r+0xf4>
   8b484:	2b23      	cmp	r3, #35	; 0x23
   8b486:	d055      	beq.n	8b534 <_svfiprintf_r+0x18e>
   8b488:	2b2a      	cmp	r3, #42	; 0x2a
   8b48a:	d056      	beq.n	8b53a <_svfiprintf_r+0x194>
   8b48c:	2b20      	cmp	r3, #32
   8b48e:	f040 81f6 	bne.w	8b87e <_svfiprintf_r+0x4d8>
   8b492:	2a00      	cmp	r2, #0
   8b494:	bf08      	it	eq
   8b496:	2220      	moveq	r2, #32
   8b498:	e7e2      	b.n	8b460 <_svfiprintf_r+0xba>
   8b49a:	2b2e      	cmp	r3, #46	; 0x2e
   8b49c:	d058      	beq.n	8b550 <_svfiprintf_r+0x1aa>
   8b49e:	2b30      	cmp	r3, #48	; 0x30
   8b4a0:	d079      	beq.n	8b596 <_svfiprintf_r+0x1f0>
   8b4a2:	2b2d      	cmp	r3, #45	; 0x2d
   8b4a4:	f040 81eb 	bne.w	8b87e <_svfiprintf_r+0x4d8>
   8b4a8:	e04f      	b.n	8b54a <_svfiprintf_r+0x1a4>
   8b4aa:	2b4f      	cmp	r3, #79	; 0x4f
   8b4ac:	f000 80de 	beq.w	8b66c <_svfiprintf_r+0x2c6>
   8b4b0:	dc07      	bgt.n	8b4c2 <_svfiprintf_r+0x11c>
   8b4b2:	2b44      	cmp	r3, #68	; 0x44
   8b4b4:	f040 81e3 	bne.w	8b87e <_svfiprintf_r+0x4d8>
   8b4b8:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b4bc:	f047 0710 	orr.w	r7, r7, #16
   8b4c0:	e090      	b.n	8b5e4 <_svfiprintf_r+0x23e>
   8b4c2:	2b55      	cmp	r3, #85	; 0x55
   8b4c4:	f000 811f 	beq.w	8b706 <_svfiprintf_r+0x360>
   8b4c8:	2b58      	cmp	r3, #88	; 0x58
   8b4ca:	f040 81d8 	bne.w	8b87e <_svfiprintf_r+0x4d8>
   8b4ce:	4daf      	ldr	r5, [pc, #700]	; (8b78c <_svfiprintf_r+0x3e6>)
   8b4d0:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b4d4:	9505      	str	r5, [sp, #20]
   8b4d6:	e130      	b.n	8b73a <_svfiprintf_r+0x394>
   8b4d8:	2b6f      	cmp	r3, #111	; 0x6f
   8b4da:	f000 80c9 	beq.w	8b670 <_svfiprintf_r+0x2ca>
   8b4de:	dc10      	bgt.n	8b502 <_svfiprintf_r+0x15c>
   8b4e0:	2b69      	cmp	r3, #105	; 0x69
   8b4e2:	d024      	beq.n	8b52e <_svfiprintf_r+0x188>
   8b4e4:	dc07      	bgt.n	8b4f6 <_svfiprintf_r+0x150>
   8b4e6:	2b64      	cmp	r3, #100	; 0x64
   8b4e8:	d021      	beq.n	8b52e <_svfiprintf_r+0x188>
   8b4ea:	2b68      	cmp	r3, #104	; 0x68
   8b4ec:	f040 81c7 	bne.w	8b87e <_svfiprintf_r+0x4d8>
   8b4f0:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   8b4f4:	e7b4      	b.n	8b460 <_svfiprintf_r+0xba>
   8b4f6:	2b6c      	cmp	r3, #108	; 0x6c
   8b4f8:	d05f      	beq.n	8b5ba <_svfiprintf_r+0x214>
   8b4fa:	2b6e      	cmp	r3, #110	; 0x6e
   8b4fc:	f040 81bf 	bne.w	8b87e <_svfiprintf_r+0x4d8>
   8b500:	e096      	b.n	8b630 <_svfiprintf_r+0x28a>
   8b502:	2b73      	cmp	r3, #115	; 0x73
   8b504:	f000 80df 	beq.w	8b6c6 <_svfiprintf_r+0x320>
   8b508:	dc06      	bgt.n	8b518 <_svfiprintf_r+0x172>
   8b50a:	2b70      	cmp	r3, #112	; 0x70
   8b50c:	f000 80cd 	beq.w	8b6aa <_svfiprintf_r+0x304>
   8b510:	2b71      	cmp	r3, #113	; 0x71
   8b512:	f040 81b4 	bne.w	8b87e <_svfiprintf_r+0x4d8>
   8b516:	e05a      	b.n	8b5ce <_svfiprintf_r+0x228>
   8b518:	2b75      	cmp	r3, #117	; 0x75
   8b51a:	f000 80f6 	beq.w	8b70a <_svfiprintf_r+0x364>
   8b51e:	2b78      	cmp	r3, #120	; 0x78
   8b520:	f040 81ad 	bne.w	8b87e <_svfiprintf_r+0x4d8>
   8b524:	4d9a      	ldr	r5, [pc, #616]	; (8b790 <_svfiprintf_r+0x3ea>)
   8b526:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b52a:	9505      	str	r5, [sp, #20]
   8b52c:	e105      	b.n	8b73a <_svfiprintf_r+0x394>
   8b52e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b532:	e057      	b.n	8b5e4 <_svfiprintf_r+0x23e>
   8b534:	f047 0701 	orr.w	r7, r7, #1
   8b538:	e792      	b.n	8b460 <_svfiprintf_r+0xba>
   8b53a:	1d33      	adds	r3, r6, #4
   8b53c:	6836      	ldr	r6, [r6, #0]
   8b53e:	2e00      	cmp	r6, #0
   8b540:	9603      	str	r6, [sp, #12]
   8b542:	da15      	bge.n	8b570 <_svfiprintf_r+0x1ca>
   8b544:	4270      	negs	r0, r6
   8b546:	9003      	str	r0, [sp, #12]
   8b548:	461e      	mov	r6, r3
   8b54a:	f047 0704 	orr.w	r7, r7, #4
   8b54e:	e787      	b.n	8b460 <_svfiprintf_r+0xba>
   8b550:	9901      	ldr	r1, [sp, #4]
   8b552:	f811 3b01 	ldrb.w	r3, [r1], #1
   8b556:	2b2a      	cmp	r3, #42	; 0x2a
   8b558:	9101      	str	r1, [sp, #4]
   8b55a:	d10b      	bne.n	8b574 <_svfiprintf_r+0x1ce>
   8b55c:	f8d6 c000 	ldr.w	ip, [r6]
   8b560:	1d33      	adds	r3, r6, #4
   8b562:	f1bc 0f00 	cmp.w	ip, #0
   8b566:	da03      	bge.n	8b570 <_svfiprintf_r+0x1ca>
   8b568:	461e      	mov	r6, r3
   8b56a:	f04f 3cff 	mov.w	ip, #4294967295
   8b56e:	e777      	b.n	8b460 <_svfiprintf_r+0xba>
   8b570:	461e      	mov	r6, r3
   8b572:	e775      	b.n	8b460 <_svfiprintf_r+0xba>
   8b574:	f04f 0c00 	mov.w	ip, #0
   8b578:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8b57c:	2809      	cmp	r0, #9
   8b57e:	d807      	bhi.n	8b590 <_svfiprintf_r+0x1ea>
   8b580:	9901      	ldr	r1, [sp, #4]
   8b582:	230a      	movs	r3, #10
   8b584:	fb03 0c0c 	mla	ip, r3, ip, r0
   8b588:	f811 3b01 	ldrb.w	r3, [r1], #1
   8b58c:	9101      	str	r1, [sp, #4]
   8b58e:	e7f3      	b.n	8b578 <_svfiprintf_r+0x1d2>
   8b590:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   8b594:	e768      	b.n	8b468 <_svfiprintf_r+0xc2>
   8b596:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8b59a:	e761      	b.n	8b460 <_svfiprintf_r+0xba>
   8b59c:	9801      	ldr	r0, [sp, #4]
   8b59e:	2100      	movs	r1, #0
   8b5a0:	3b30      	subs	r3, #48	; 0x30
   8b5a2:	240a      	movs	r4, #10
   8b5a4:	fb04 3101 	mla	r1, r4, r1, r3
   8b5a8:	f810 3b01 	ldrb.w	r3, [r0], #1
   8b5ac:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   8b5b0:	2c09      	cmp	r4, #9
   8b5b2:	9001      	str	r0, [sp, #4]
   8b5b4:	d9f4      	bls.n	8b5a0 <_svfiprintf_r+0x1fa>
   8b5b6:	9103      	str	r1, [sp, #12]
   8b5b8:	e756      	b.n	8b468 <_svfiprintf_r+0xc2>
   8b5ba:	9901      	ldr	r1, [sp, #4]
   8b5bc:	780b      	ldrb	r3, [r1, #0]
   8b5be:	2b6c      	cmp	r3, #108	; 0x6c
   8b5c0:	d102      	bne.n	8b5c8 <_svfiprintf_r+0x222>
   8b5c2:	1c48      	adds	r0, r1, #1
   8b5c4:	9001      	str	r0, [sp, #4]
   8b5c6:	e002      	b.n	8b5ce <_svfiprintf_r+0x228>
   8b5c8:	f047 0710 	orr.w	r7, r7, #16
   8b5cc:	e748      	b.n	8b460 <_svfiprintf_r+0xba>
   8b5ce:	f047 0720 	orr.w	r7, r7, #32
   8b5d2:	e745      	b.n	8b460 <_svfiprintf_r+0xba>
   8b5d4:	6832      	ldr	r2, [r6, #0]
   8b5d6:	2500      	movs	r5, #0
   8b5d8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   8b5dc:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8b5e0:	3604      	adds	r6, #4
   8b5e2:	e156      	b.n	8b892 <_svfiprintf_r+0x4ec>
   8b5e4:	06ba      	lsls	r2, r7, #26
   8b5e6:	d507      	bpl.n	8b5f8 <_svfiprintf_r+0x252>
   8b5e8:	3607      	adds	r6, #7
   8b5ea:	f026 0507 	bic.w	r5, r6, #7
   8b5ee:	f105 0608 	add.w	r6, r5, #8
   8b5f2:	e9d5 4500 	ldrd	r4, r5, [r5]
   8b5f6:	e00f      	b.n	8b618 <_svfiprintf_r+0x272>
   8b5f8:	f017 0f10 	tst.w	r7, #16
   8b5fc:	f106 0104 	add.w	r1, r6, #4
   8b600:	d001      	beq.n	8b606 <_svfiprintf_r+0x260>
   8b602:	6832      	ldr	r2, [r6, #0]
   8b604:	e005      	b.n	8b612 <_svfiprintf_r+0x26c>
   8b606:	f017 0f40 	tst.w	r7, #64	; 0x40
   8b60a:	6832      	ldr	r2, [r6, #0]
   8b60c:	d001      	beq.n	8b612 <_svfiprintf_r+0x26c>
   8b60e:	b214      	sxth	r4, r2
   8b610:	e000      	b.n	8b614 <_svfiprintf_r+0x26e>
   8b612:	4614      	mov	r4, r2
   8b614:	17e5      	asrs	r5, r4, #31
   8b616:	460e      	mov	r6, r1
   8b618:	2c00      	cmp	r4, #0
   8b61a:	f175 0200 	sbcs.w	r2, r5, #0
   8b61e:	f280 80b9 	bge.w	8b794 <_svfiprintf_r+0x3ee>
   8b622:	232d      	movs	r3, #45	; 0x2d
   8b624:	4264      	negs	r4, r4
   8b626:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8b62a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   8b62e:	e0b1      	b.n	8b794 <_svfiprintf_r+0x3ee>
   8b630:	f017 0f20 	tst.w	r7, #32
   8b634:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b638:	f106 0204 	add.w	r2, r6, #4
   8b63c:	d005      	beq.n	8b64a <_svfiprintf_r+0x2a4>
   8b63e:	9c04      	ldr	r4, [sp, #16]
   8b640:	6835      	ldr	r5, [r6, #0]
   8b642:	17e0      	asrs	r0, r4, #31
   8b644:	602c      	str	r4, [r5, #0]
   8b646:	6068      	str	r0, [r5, #4]
   8b648:	e004      	b.n	8b654 <_svfiprintf_r+0x2ae>
   8b64a:	06fb      	lsls	r3, r7, #27
   8b64c:	d504      	bpl.n	8b658 <_svfiprintf_r+0x2b2>
   8b64e:	6833      	ldr	r3, [r6, #0]
   8b650:	9904      	ldr	r1, [sp, #16]
   8b652:	6019      	str	r1, [r3, #0]
   8b654:	4616      	mov	r6, r2
   8b656:	e6cf      	b.n	8b3f8 <_svfiprintf_r+0x52>
   8b658:	6830      	ldr	r0, [r6, #0]
   8b65a:	9c04      	ldr	r4, [sp, #16]
   8b65c:	f017 0f40 	tst.w	r7, #64	; 0x40
   8b660:	f106 0604 	add.w	r6, r6, #4
   8b664:	bf14      	ite	ne
   8b666:	8004      	strhne	r4, [r0, #0]
   8b668:	6004      	streq	r4, [r0, #0]
   8b66a:	e6c5      	b.n	8b3f8 <_svfiprintf_r+0x52>
   8b66c:	f047 0710 	orr.w	r7, r7, #16
   8b670:	f017 0020 	ands.w	r0, r7, #32
   8b674:	d008      	beq.n	8b688 <_svfiprintf_r+0x2e2>
   8b676:	1df3      	adds	r3, r6, #7
   8b678:	f023 0507 	bic.w	r5, r3, #7
   8b67c:	f105 0608 	add.w	r6, r5, #8
   8b680:	e9d5 4500 	ldrd	r4, r5, [r5]
   8b684:	2000      	movs	r0, #0
   8b686:	e07c      	b.n	8b782 <_svfiprintf_r+0x3dc>
   8b688:	f017 0110 	ands.w	r1, r7, #16
   8b68c:	f106 0204 	add.w	r2, r6, #4
   8b690:	d106      	bne.n	8b6a0 <_svfiprintf_r+0x2fa>
   8b692:	f017 0040 	ands.w	r0, r7, #64	; 0x40
   8b696:	d003      	beq.n	8b6a0 <_svfiprintf_r+0x2fa>
   8b698:	8834      	ldrh	r4, [r6, #0]
   8b69a:	2500      	movs	r5, #0
   8b69c:	4616      	mov	r6, r2
   8b69e:	e7f1      	b.n	8b684 <_svfiprintf_r+0x2de>
   8b6a0:	6836      	ldr	r6, [r6, #0]
   8b6a2:	2500      	movs	r5, #0
   8b6a4:	4634      	mov	r4, r6
   8b6a6:	4616      	mov	r6, r2
   8b6a8:	e06b      	b.n	8b782 <_svfiprintf_r+0x3dc>
   8b6aa:	4b39      	ldr	r3, [pc, #228]	; (8b790 <_svfiprintf_r+0x3ea>)
   8b6ac:	2130      	movs	r1, #48	; 0x30
   8b6ae:	2278      	movs	r2, #120	; 0x78
   8b6b0:	6834      	ldr	r4, [r6, #0]
   8b6b2:	2500      	movs	r5, #0
   8b6b4:	f047 0702 	orr.w	r7, r7, #2
   8b6b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   8b6bc:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
   8b6c0:	3604      	adds	r6, #4
   8b6c2:	9305      	str	r3, [sp, #20]
   8b6c4:	e05c      	b.n	8b780 <_svfiprintf_r+0x3da>
   8b6c6:	4631      	mov	r1, r6
   8b6c8:	2500      	movs	r5, #0
   8b6ca:	f8d1 a000 	ldr.w	sl, [r1]
   8b6ce:	3604      	adds	r6, #4
   8b6d0:	45ac      	cmp	ip, r5
   8b6d2:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8b6d6:	4650      	mov	r0, sl
   8b6d8:	db11      	blt.n	8b6fe <_svfiprintf_r+0x358>
   8b6da:	4662      	mov	r2, ip
   8b6dc:	4629      	mov	r1, r5
   8b6de:	f8cd c000 	str.w	ip, [sp]
   8b6e2:	f7ff fc55 	bl	8af90 <memchr>
   8b6e6:	f8dd c000 	ldr.w	ip, [sp]
   8b6ea:	2800      	cmp	r0, #0
   8b6ec:	f000 80d5 	beq.w	8b89a <_svfiprintf_r+0x4f4>
   8b6f0:	ebca 0400 	rsb	r4, sl, r0
   8b6f4:	4564      	cmp	r4, ip
   8b6f6:	f340 80d2 	ble.w	8b89e <_svfiprintf_r+0x4f8>
   8b6fa:	4664      	mov	r4, ip
   8b6fc:	e0cf      	b.n	8b89e <_svfiprintf_r+0x4f8>
   8b6fe:	f7fe fc53 	bl	89fa8 <strlen>
   8b702:	4604      	mov	r4, r0
   8b704:	e0cb      	b.n	8b89e <_svfiprintf_r+0x4f8>
   8b706:	f047 0710 	orr.w	r7, r7, #16
   8b70a:	06bd      	lsls	r5, r7, #26
   8b70c:	d506      	bpl.n	8b71c <_svfiprintf_r+0x376>
   8b70e:	1df0      	adds	r0, r6, #7
   8b710:	f020 0407 	bic.w	r4, r0, #7
   8b714:	f104 0608 	add.w	r6, r4, #8
   8b718:	cc30      	ldmia	r4, {r4, r5}
   8b71a:	e00c      	b.n	8b736 <_svfiprintf_r+0x390>
   8b71c:	f017 0f10 	tst.w	r7, #16
   8b720:	f106 0304 	add.w	r3, r6, #4
   8b724:	d103      	bne.n	8b72e <_svfiprintf_r+0x388>
   8b726:	067c      	lsls	r4, r7, #25
   8b728:	d501      	bpl.n	8b72e <_svfiprintf_r+0x388>
   8b72a:	8834      	ldrh	r4, [r6, #0]
   8b72c:	e001      	b.n	8b732 <_svfiprintf_r+0x38c>
   8b72e:	6835      	ldr	r5, [r6, #0]
   8b730:	462c      	mov	r4, r5
   8b732:	2500      	movs	r5, #0
   8b734:	461e      	mov	r6, r3
   8b736:	2001      	movs	r0, #1
   8b738:	e023      	b.n	8b782 <_svfiprintf_r+0x3dc>
   8b73a:	06b8      	lsls	r0, r7, #26
   8b73c:	d507      	bpl.n	8b74e <_svfiprintf_r+0x3a8>
   8b73e:	1df4      	adds	r4, r6, #7
   8b740:	f024 0107 	bic.w	r1, r4, #7
   8b744:	f101 0608 	add.w	r6, r1, #8
   8b748:	e9d1 4500 	ldrd	r4, r5, [r1]
   8b74c:	e00c      	b.n	8b768 <_svfiprintf_r+0x3c2>
   8b74e:	f017 0f10 	tst.w	r7, #16
   8b752:	f106 0004 	add.w	r0, r6, #4
   8b756:	d103      	bne.n	8b760 <_svfiprintf_r+0x3ba>
   8b758:	0679      	lsls	r1, r7, #25
   8b75a:	d501      	bpl.n	8b760 <_svfiprintf_r+0x3ba>
   8b75c:	8834      	ldrh	r4, [r6, #0]
   8b75e:	e001      	b.n	8b764 <_svfiprintf_r+0x3be>
   8b760:	6836      	ldr	r6, [r6, #0]
   8b762:	4634      	mov	r4, r6
   8b764:	2500      	movs	r5, #0
   8b766:	4606      	mov	r6, r0
   8b768:	07fa      	lsls	r2, r7, #31
   8b76a:	d509      	bpl.n	8b780 <_svfiprintf_r+0x3da>
   8b76c:	ea54 0205 	orrs.w	r2, r4, r5
   8b770:	d006      	beq.n	8b780 <_svfiprintf_r+0x3da>
   8b772:	2230      	movs	r2, #48	; 0x30
   8b774:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   8b778:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   8b77c:	f047 0702 	orr.w	r7, r7, #2
   8b780:	2002      	movs	r0, #2
   8b782:	2100      	movs	r1, #0
   8b784:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
   8b788:	e005      	b.n	8b796 <_svfiprintf_r+0x3f0>
   8b78a:	bf00      	nop
   8b78c:	0008cd7a 	.word	0x0008cd7a
   8b790:	0008cd8b 	.word	0x0008cd8b
   8b794:	2001      	movs	r0, #1
   8b796:	f1bc 0f00 	cmp.w	ip, #0
   8b79a:	bfa8      	it	ge
   8b79c:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   8b7a0:	ea54 0105 	orrs.w	r1, r4, r5
   8b7a4:	d102      	bne.n	8b7ac <_svfiprintf_r+0x406>
   8b7a6:	f1bc 0f00 	cmp.w	ip, #0
   8b7aa:	d058      	beq.n	8b85e <_svfiprintf_r+0x4b8>
   8b7ac:	2801      	cmp	r0, #1
   8b7ae:	d01d      	beq.n	8b7ec <_svfiprintf_r+0x446>
   8b7b0:	2802      	cmp	r0, #2
   8b7b2:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8b7b6:	d041      	beq.n	8b83c <_svfiprintf_r+0x496>
   8b7b8:	f004 0207 	and.w	r2, r4, #7
   8b7bc:	08e4      	lsrs	r4, r4, #3
   8b7be:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
   8b7c2:	08e9      	lsrs	r1, r5, #3
   8b7c4:	4604      	mov	r4, r0
   8b7c6:	460d      	mov	r5, r1
   8b7c8:	3230      	adds	r2, #48	; 0x30
   8b7ca:	ea54 0105 	orrs.w	r1, r4, r5
   8b7ce:	469a      	mov	sl, r3
   8b7d0:	701a      	strb	r2, [r3, #0]
   8b7d2:	f103 33ff 	add.w	r3, r3, #4294967295
   8b7d6:	d1ef      	bne.n	8b7b8 <_svfiprintf_r+0x412>
   8b7d8:	07f8      	lsls	r0, r7, #31
   8b7da:	4655      	mov	r5, sl
   8b7dc:	d54a      	bpl.n	8b874 <_svfiprintf_r+0x4ce>
   8b7de:	2a30      	cmp	r2, #48	; 0x30
   8b7e0:	d048      	beq.n	8b874 <_svfiprintf_r+0x4ce>
   8b7e2:	2230      	movs	r2, #48	; 0x30
   8b7e4:	469a      	mov	sl, r3
   8b7e6:	f805 2c01 	strb.w	r2, [r5, #-1]
   8b7ea:	e043      	b.n	8b874 <_svfiprintf_r+0x4ce>
   8b7ec:	2d00      	cmp	r5, #0
   8b7ee:	bf08      	it	eq
   8b7f0:	2c0a      	cmpeq	r4, #10
   8b7f2:	d203      	bcs.n	8b7fc <_svfiprintf_r+0x456>
   8b7f4:	3430      	adds	r4, #48	; 0x30
   8b7f6:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
   8b7fa:	e036      	b.n	8b86a <_svfiprintf_r+0x4c4>
   8b7fc:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
   8b800:	9302      	str	r3, [sp, #8]
   8b802:	4620      	mov	r0, r4
   8b804:	4629      	mov	r1, r5
   8b806:	220a      	movs	r2, #10
   8b808:	2300      	movs	r3, #0
   8b80a:	f8cd c000 	str.w	ip, [sp]
   8b80e:	f000 f9c7 	bl	8bba0 <__aeabi_uldivmod>
   8b812:	9802      	ldr	r0, [sp, #8]
   8b814:	3230      	adds	r2, #48	; 0x30
   8b816:	f800 2901 	strb.w	r2, [r0], #-1
   8b81a:	4629      	mov	r1, r5
   8b81c:	220a      	movs	r2, #10
   8b81e:	2300      	movs	r3, #0
   8b820:	f8dd a008 	ldr.w	sl, [sp, #8]
   8b824:	9002      	str	r0, [sp, #8]
   8b826:	4620      	mov	r0, r4
   8b828:	f000 f9ba 	bl	8bba0 <__aeabi_uldivmod>
   8b82c:	4604      	mov	r4, r0
   8b82e:	460d      	mov	r5, r1
   8b830:	ea54 0105 	orrs.w	r1, r4, r5
   8b834:	f8dd c000 	ldr.w	ip, [sp]
   8b838:	d1e3      	bne.n	8b802 <_svfiprintf_r+0x45c>
   8b83a:	e01b      	b.n	8b874 <_svfiprintf_r+0x4ce>
   8b83c:	9905      	ldr	r1, [sp, #20]
   8b83e:	f004 000f 	and.w	r0, r4, #15
   8b842:	0924      	lsrs	r4, r4, #4
   8b844:	5c0a      	ldrb	r2, [r1, r0]
   8b846:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
   8b84a:	0929      	lsrs	r1, r5, #4
   8b84c:	4604      	mov	r4, r0
   8b84e:	460d      	mov	r5, r1
   8b850:	469a      	mov	sl, r3
   8b852:	f803 2901 	strb.w	r2, [r3], #-1
   8b856:	ea54 0205 	orrs.w	r2, r4, r5
   8b85a:	d1ef      	bne.n	8b83c <_svfiprintf_r+0x496>
   8b85c:	e00a      	b.n	8b874 <_svfiprintf_r+0x4ce>
   8b85e:	b938      	cbnz	r0, 8b870 <_svfiprintf_r+0x4ca>
   8b860:	07f9      	lsls	r1, r7, #31
   8b862:	d505      	bpl.n	8b870 <_svfiprintf_r+0x4ca>
   8b864:	2030      	movs	r0, #48	; 0x30
   8b866:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   8b86a:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
   8b86e:	e001      	b.n	8b874 <_svfiprintf_r+0x4ce>
   8b870:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   8b874:	ad18      	add	r5, sp, #96	; 0x60
   8b876:	ebca 0405 	rsb	r4, sl, r5
   8b87a:	4665      	mov	r5, ip
   8b87c:	e00f      	b.n	8b89e <_svfiprintf_r+0x4f8>
   8b87e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   8b882:	2b00      	cmp	r3, #0
   8b884:	f000 8176 	beq.w	8bb74 <_svfiprintf_r+0x7ce>
   8b888:	2500      	movs	r5, #0
   8b88a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   8b88e:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
   8b892:	2401      	movs	r4, #1
   8b894:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   8b898:	e001      	b.n	8b89e <_svfiprintf_r+0x4f8>
   8b89a:	4664      	mov	r4, ip
   8b89c:	4605      	mov	r5, r0
   8b89e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8b8a2:	42ac      	cmp	r4, r5
   8b8a4:	bfac      	ite	ge
   8b8a6:	4621      	movge	r1, r4
   8b8a8:	4629      	movlt	r1, r5
   8b8aa:	9102      	str	r1, [sp, #8]
   8b8ac:	b113      	cbz	r3, 8b8b4 <_svfiprintf_r+0x50e>
   8b8ae:	9802      	ldr	r0, [sp, #8]
   8b8b0:	1c42      	adds	r2, r0, #1
   8b8b2:	9202      	str	r2, [sp, #8]
   8b8b4:	f017 0102 	ands.w	r1, r7, #2
   8b8b8:	9106      	str	r1, [sp, #24]
   8b8ba:	d002      	beq.n	8b8c2 <_svfiprintf_r+0x51c>
   8b8bc:	9b02      	ldr	r3, [sp, #8]
   8b8be:	1c98      	adds	r0, r3, #2
   8b8c0:	9002      	str	r0, [sp, #8]
   8b8c2:	f017 0284 	ands.w	r2, r7, #132	; 0x84
   8b8c6:	9207      	str	r2, [sp, #28]
   8b8c8:	d13c      	bne.n	8b944 <_svfiprintf_r+0x59e>
   8b8ca:	9903      	ldr	r1, [sp, #12]
   8b8cc:	9b02      	ldr	r3, [sp, #8]
   8b8ce:	1acb      	subs	r3, r1, r3
   8b8d0:	2b00      	cmp	r3, #0
   8b8d2:	dd37      	ble.n	8b944 <_svfiprintf_r+0x59e>
   8b8d4:	48a5      	ldr	r0, [pc, #660]	; (8bb6c <_svfiprintf_r+0x7c6>)
   8b8d6:	2b10      	cmp	r3, #16
   8b8d8:	f8c8 0000 	str.w	r0, [r8]
   8b8dc:	dd1b      	ble.n	8b916 <_svfiprintf_r+0x570>
   8b8de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8b8e0:	2110      	movs	r1, #16
   8b8e2:	980d      	ldr	r0, [sp, #52]	; 0x34
   8b8e4:	f8c8 1004 	str.w	r1, [r8, #4]
   8b8e8:	1c51      	adds	r1, r2, #1
   8b8ea:	3010      	adds	r0, #16
   8b8ec:	2907      	cmp	r1, #7
   8b8ee:	900d      	str	r0, [sp, #52]	; 0x34
   8b8f0:	910c      	str	r1, [sp, #48]	; 0x30
   8b8f2:	dc02      	bgt.n	8b8fa <_svfiprintf_r+0x554>
   8b8f4:	f108 0808 	add.w	r8, r8, #8
   8b8f8:	e00b      	b.n	8b912 <_svfiprintf_r+0x56c>
   8b8fa:	4658      	mov	r0, fp
   8b8fc:	4649      	mov	r1, r9
   8b8fe:	aa0b      	add	r2, sp, #44	; 0x2c
   8b900:	9300      	str	r3, [sp, #0]
   8b902:	f7ff fcd3 	bl	8b2ac <__ssprint_r>
   8b906:	9b00      	ldr	r3, [sp, #0]
   8b908:	2800      	cmp	r0, #0
   8b90a:	f040 813a 	bne.w	8bb82 <_svfiprintf_r+0x7dc>
   8b90e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b912:	3b10      	subs	r3, #16
   8b914:	e7de      	b.n	8b8d4 <_svfiprintf_r+0x52e>
   8b916:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8b918:	f8c8 3004 	str.w	r3, [r8, #4]
   8b91c:	18d1      	adds	r1, r2, r3
   8b91e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8b920:	910d      	str	r1, [sp, #52]	; 0x34
   8b922:	1c58      	adds	r0, r3, #1
   8b924:	2807      	cmp	r0, #7
   8b926:	900c      	str	r0, [sp, #48]	; 0x30
   8b928:	dc02      	bgt.n	8b930 <_svfiprintf_r+0x58a>
   8b92a:	f108 0808 	add.w	r8, r8, #8
   8b92e:	e009      	b.n	8b944 <_svfiprintf_r+0x59e>
   8b930:	4658      	mov	r0, fp
   8b932:	4649      	mov	r1, r9
   8b934:	aa0b      	add	r2, sp, #44	; 0x2c
   8b936:	f7ff fcb9 	bl	8b2ac <__ssprint_r>
   8b93a:	2800      	cmp	r0, #0
   8b93c:	f040 8121 	bne.w	8bb82 <_svfiprintf_r+0x7dc>
   8b940:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b944:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   8b948:	b1da      	cbz	r2, 8b982 <_svfiprintf_r+0x5dc>
   8b94a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   8b94e:	f8c8 1000 	str.w	r1, [r8]
   8b952:	990c      	ldr	r1, [sp, #48]	; 0x30
   8b954:	2301      	movs	r3, #1
   8b956:	980d      	ldr	r0, [sp, #52]	; 0x34
   8b958:	f8c8 3004 	str.w	r3, [r8, #4]
   8b95c:	1c4b      	adds	r3, r1, #1
   8b95e:	1c42      	adds	r2, r0, #1
   8b960:	2b07      	cmp	r3, #7
   8b962:	920d      	str	r2, [sp, #52]	; 0x34
   8b964:	930c      	str	r3, [sp, #48]	; 0x30
   8b966:	dc02      	bgt.n	8b96e <_svfiprintf_r+0x5c8>
   8b968:	f108 0808 	add.w	r8, r8, #8
   8b96c:	e009      	b.n	8b982 <_svfiprintf_r+0x5dc>
   8b96e:	4658      	mov	r0, fp
   8b970:	4649      	mov	r1, r9
   8b972:	aa0b      	add	r2, sp, #44	; 0x2c
   8b974:	f7ff fc9a 	bl	8b2ac <__ssprint_r>
   8b978:	2800      	cmp	r0, #0
   8b97a:	f040 8102 	bne.w	8bb82 <_svfiprintf_r+0x7dc>
   8b97e:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b982:	9806      	ldr	r0, [sp, #24]
   8b984:	b1d0      	cbz	r0, 8b9bc <_svfiprintf_r+0x616>
   8b986:	aa0a      	add	r2, sp, #40	; 0x28
   8b988:	f8c8 2000 	str.w	r2, [r8]
   8b98c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8b98e:	2102      	movs	r1, #2
   8b990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8b992:	f8c8 1004 	str.w	r1, [r8, #4]
   8b996:	1c51      	adds	r1, r2, #1
   8b998:	1c98      	adds	r0, r3, #2
   8b99a:	2907      	cmp	r1, #7
   8b99c:	900d      	str	r0, [sp, #52]	; 0x34
   8b99e:	910c      	str	r1, [sp, #48]	; 0x30
   8b9a0:	dc02      	bgt.n	8b9a8 <_svfiprintf_r+0x602>
   8b9a2:	f108 0808 	add.w	r8, r8, #8
   8b9a6:	e009      	b.n	8b9bc <_svfiprintf_r+0x616>
   8b9a8:	4658      	mov	r0, fp
   8b9aa:	4649      	mov	r1, r9
   8b9ac:	aa0b      	add	r2, sp, #44	; 0x2c
   8b9ae:	f7ff fc7d 	bl	8b2ac <__ssprint_r>
   8b9b2:	2800      	cmp	r0, #0
   8b9b4:	f040 80e5 	bne.w	8bb82 <_svfiprintf_r+0x7dc>
   8b9b8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8b9bc:	9b07      	ldr	r3, [sp, #28]
   8b9be:	2b80      	cmp	r3, #128	; 0x80
   8b9c0:	d13c      	bne.n	8ba3c <_svfiprintf_r+0x696>
   8b9c2:	9803      	ldr	r0, [sp, #12]
   8b9c4:	9a02      	ldr	r2, [sp, #8]
   8b9c6:	1a83      	subs	r3, r0, r2
   8b9c8:	2b00      	cmp	r3, #0
   8b9ca:	dd37      	ble.n	8ba3c <_svfiprintf_r+0x696>
   8b9cc:	4968      	ldr	r1, [pc, #416]	; (8bb70 <_svfiprintf_r+0x7ca>)
   8b9ce:	2b10      	cmp	r3, #16
   8b9d0:	f8c8 1000 	str.w	r1, [r8]
   8b9d4:	dd1b      	ble.n	8ba0e <_svfiprintf_r+0x668>
   8b9d6:	980c      	ldr	r0, [sp, #48]	; 0x30
   8b9d8:	2210      	movs	r2, #16
   8b9da:	990d      	ldr	r1, [sp, #52]	; 0x34
   8b9dc:	f8c8 2004 	str.w	r2, [r8, #4]
   8b9e0:	1c42      	adds	r2, r0, #1
   8b9e2:	3110      	adds	r1, #16
   8b9e4:	2a07      	cmp	r2, #7
   8b9e6:	910d      	str	r1, [sp, #52]	; 0x34
   8b9e8:	920c      	str	r2, [sp, #48]	; 0x30
   8b9ea:	dc02      	bgt.n	8b9f2 <_svfiprintf_r+0x64c>
   8b9ec:	f108 0808 	add.w	r8, r8, #8
   8b9f0:	e00b      	b.n	8ba0a <_svfiprintf_r+0x664>
   8b9f2:	4658      	mov	r0, fp
   8b9f4:	4649      	mov	r1, r9
   8b9f6:	aa0b      	add	r2, sp, #44	; 0x2c
   8b9f8:	9300      	str	r3, [sp, #0]
   8b9fa:	f7ff fc57 	bl	8b2ac <__ssprint_r>
   8b9fe:	9b00      	ldr	r3, [sp, #0]
   8ba00:	2800      	cmp	r0, #0
   8ba02:	f040 80be 	bne.w	8bb82 <_svfiprintf_r+0x7dc>
   8ba06:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8ba0a:	3b10      	subs	r3, #16
   8ba0c:	e7de      	b.n	8b9cc <_svfiprintf_r+0x626>
   8ba0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8ba10:	980d      	ldr	r0, [sp, #52]	; 0x34
   8ba12:	1c51      	adds	r1, r2, #1
   8ba14:	f8c8 3004 	str.w	r3, [r8, #4]
   8ba18:	2907      	cmp	r1, #7
   8ba1a:	4403      	add	r3, r0
   8ba1c:	930d      	str	r3, [sp, #52]	; 0x34
   8ba1e:	910c      	str	r1, [sp, #48]	; 0x30
   8ba20:	dc02      	bgt.n	8ba28 <_svfiprintf_r+0x682>
   8ba22:	f108 0808 	add.w	r8, r8, #8
   8ba26:	e009      	b.n	8ba3c <_svfiprintf_r+0x696>
   8ba28:	4658      	mov	r0, fp
   8ba2a:	4649      	mov	r1, r9
   8ba2c:	aa0b      	add	r2, sp, #44	; 0x2c
   8ba2e:	f7ff fc3d 	bl	8b2ac <__ssprint_r>
   8ba32:	2800      	cmp	r0, #0
   8ba34:	f040 80a5 	bne.w	8bb82 <_svfiprintf_r+0x7dc>
   8ba38:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8ba3c:	1b2d      	subs	r5, r5, r4
   8ba3e:	2d00      	cmp	r5, #0
   8ba40:	dd34      	ble.n	8baac <_svfiprintf_r+0x706>
   8ba42:	484b      	ldr	r0, [pc, #300]	; (8bb70 <_svfiprintf_r+0x7ca>)
   8ba44:	2d10      	cmp	r5, #16
   8ba46:	f8c8 0000 	str.w	r0, [r8]
   8ba4a:	dd19      	ble.n	8ba80 <_svfiprintf_r+0x6da>
   8ba4c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8ba4e:	990d      	ldr	r1, [sp, #52]	; 0x34
   8ba50:	1c43      	adds	r3, r0, #1
   8ba52:	2210      	movs	r2, #16
   8ba54:	3110      	adds	r1, #16
   8ba56:	2b07      	cmp	r3, #7
   8ba58:	f8c8 2004 	str.w	r2, [r8, #4]
   8ba5c:	910d      	str	r1, [sp, #52]	; 0x34
   8ba5e:	930c      	str	r3, [sp, #48]	; 0x30
   8ba60:	dc02      	bgt.n	8ba68 <_svfiprintf_r+0x6c2>
   8ba62:	f108 0808 	add.w	r8, r8, #8
   8ba66:	e009      	b.n	8ba7c <_svfiprintf_r+0x6d6>
   8ba68:	4658      	mov	r0, fp
   8ba6a:	4649      	mov	r1, r9
   8ba6c:	aa0b      	add	r2, sp, #44	; 0x2c
   8ba6e:	f7ff fc1d 	bl	8b2ac <__ssprint_r>
   8ba72:	2800      	cmp	r0, #0
   8ba74:	f040 8085 	bne.w	8bb82 <_svfiprintf_r+0x7dc>
   8ba78:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8ba7c:	3d10      	subs	r5, #16
   8ba7e:	e7e0      	b.n	8ba42 <_svfiprintf_r+0x69c>
   8ba80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8ba82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8ba84:	1c51      	adds	r1, r2, #1
   8ba86:	f8c8 5004 	str.w	r5, [r8, #4]
   8ba8a:	2907      	cmp	r1, #7
   8ba8c:	441d      	add	r5, r3
   8ba8e:	950d      	str	r5, [sp, #52]	; 0x34
   8ba90:	910c      	str	r1, [sp, #48]	; 0x30
   8ba92:	dc02      	bgt.n	8ba9a <_svfiprintf_r+0x6f4>
   8ba94:	f108 0808 	add.w	r8, r8, #8
   8ba98:	e008      	b.n	8baac <_svfiprintf_r+0x706>
   8ba9a:	4658      	mov	r0, fp
   8ba9c:	4649      	mov	r1, r9
   8ba9e:	aa0b      	add	r2, sp, #44	; 0x2c
   8baa0:	f7ff fc04 	bl	8b2ac <__ssprint_r>
   8baa4:	2800      	cmp	r0, #0
   8baa6:	d16c      	bne.n	8bb82 <_svfiprintf_r+0x7dc>
   8baa8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8baac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8baae:	980d      	ldr	r0, [sp, #52]	; 0x34
   8bab0:	1c5a      	adds	r2, r3, #1
   8bab2:	f8c8 4004 	str.w	r4, [r8, #4]
   8bab6:	2a07      	cmp	r2, #7
   8bab8:	4404      	add	r4, r0
   8baba:	f8c8 a000 	str.w	sl, [r8]
   8babe:	940d      	str	r4, [sp, #52]	; 0x34
   8bac0:	920c      	str	r2, [sp, #48]	; 0x30
   8bac2:	dc02      	bgt.n	8baca <_svfiprintf_r+0x724>
   8bac4:	f108 0308 	add.w	r3, r8, #8
   8bac8:	e007      	b.n	8bada <_svfiprintf_r+0x734>
   8baca:	4658      	mov	r0, fp
   8bacc:	4649      	mov	r1, r9
   8bace:	aa0b      	add	r2, sp, #44	; 0x2c
   8bad0:	f7ff fbec 	bl	8b2ac <__ssprint_r>
   8bad4:	2800      	cmp	r0, #0
   8bad6:	d154      	bne.n	8bb82 <_svfiprintf_r+0x7dc>
   8bad8:	ab18      	add	r3, sp, #96	; 0x60
   8bada:	077a      	lsls	r2, r7, #29
   8badc:	d40b      	bmi.n	8baf6 <_svfiprintf_r+0x750>
   8bade:	9804      	ldr	r0, [sp, #16]
   8bae0:	9b02      	ldr	r3, [sp, #8]
   8bae2:	9a03      	ldr	r2, [sp, #12]
   8bae4:	990d      	ldr	r1, [sp, #52]	; 0x34
   8bae6:	4293      	cmp	r3, r2
   8bae8:	bfac      	ite	ge
   8baea:	18c0      	addge	r0, r0, r3
   8baec:	1880      	addlt	r0, r0, r2
   8baee:	9004      	str	r0, [sp, #16]
   8baf0:	2900      	cmp	r1, #0
   8baf2:	d036      	beq.n	8bb62 <_svfiprintf_r+0x7bc>
   8baf4:	e02f      	b.n	8bb56 <_svfiprintf_r+0x7b0>
   8baf6:	9c03      	ldr	r4, [sp, #12]
   8baf8:	9902      	ldr	r1, [sp, #8]
   8bafa:	1a64      	subs	r4, r4, r1
   8bafc:	2c00      	cmp	r4, #0
   8bafe:	ddee      	ble.n	8bade <_svfiprintf_r+0x738>
   8bb00:	481a      	ldr	r0, [pc, #104]	; (8bb6c <_svfiprintf_r+0x7c6>)
   8bb02:	2c10      	cmp	r4, #16
   8bb04:	6018      	str	r0, [r3, #0]
   8bb06:	dd15      	ble.n	8bb34 <_svfiprintf_r+0x78e>
   8bb08:	990c      	ldr	r1, [sp, #48]	; 0x30
   8bb0a:	2010      	movs	r0, #16
   8bb0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8bb0e:	6058      	str	r0, [r3, #4]
   8bb10:	1c48      	adds	r0, r1, #1
   8bb12:	3210      	adds	r2, #16
   8bb14:	2807      	cmp	r0, #7
   8bb16:	920d      	str	r2, [sp, #52]	; 0x34
   8bb18:	900c      	str	r0, [sp, #48]	; 0x30
   8bb1a:	dc01      	bgt.n	8bb20 <_svfiprintf_r+0x77a>
   8bb1c:	3308      	adds	r3, #8
   8bb1e:	e007      	b.n	8bb30 <_svfiprintf_r+0x78a>
   8bb20:	4658      	mov	r0, fp
   8bb22:	4649      	mov	r1, r9
   8bb24:	aa0b      	add	r2, sp, #44	; 0x2c
   8bb26:	f7ff fbc1 	bl	8b2ac <__ssprint_r>
   8bb2a:	2800      	cmp	r0, #0
   8bb2c:	d129      	bne.n	8bb82 <_svfiprintf_r+0x7dc>
   8bb2e:	ab18      	add	r3, sp, #96	; 0x60
   8bb30:	3c10      	subs	r4, #16
   8bb32:	e7e5      	b.n	8bb00 <_svfiprintf_r+0x75a>
   8bb34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8bb36:	605c      	str	r4, [r3, #4]
   8bb38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8bb3a:	1c51      	adds	r1, r2, #1
   8bb3c:	191c      	adds	r4, r3, r4
   8bb3e:	2907      	cmp	r1, #7
   8bb40:	940d      	str	r4, [sp, #52]	; 0x34
   8bb42:	910c      	str	r1, [sp, #48]	; 0x30
   8bb44:	ddcb      	ble.n	8bade <_svfiprintf_r+0x738>
   8bb46:	4658      	mov	r0, fp
   8bb48:	4649      	mov	r1, r9
   8bb4a:	aa0b      	add	r2, sp, #44	; 0x2c
   8bb4c:	f7ff fbae 	bl	8b2ac <__ssprint_r>
   8bb50:	2800      	cmp	r0, #0
   8bb52:	d0c4      	beq.n	8bade <_svfiprintf_r+0x738>
   8bb54:	e015      	b.n	8bb82 <_svfiprintf_r+0x7dc>
   8bb56:	4658      	mov	r0, fp
   8bb58:	4649      	mov	r1, r9
   8bb5a:	aa0b      	add	r2, sp, #44	; 0x2c
   8bb5c:	f7ff fba6 	bl	8b2ac <__ssprint_r>
   8bb60:	b978      	cbnz	r0, 8bb82 <_svfiprintf_r+0x7dc>
   8bb62:	2500      	movs	r5, #0
   8bb64:	950c      	str	r5, [sp, #48]	; 0x30
   8bb66:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   8bb6a:	e445      	b.n	8b3f8 <_svfiprintf_r+0x52>
   8bb6c:	0008cd9c 	.word	0x0008cd9c
   8bb70:	0008cdac 	.word	0x0008cdac
   8bb74:	980d      	ldr	r0, [sp, #52]	; 0x34
   8bb76:	b120      	cbz	r0, 8bb82 <_svfiprintf_r+0x7dc>
   8bb78:	4658      	mov	r0, fp
   8bb7a:	4649      	mov	r1, r9
   8bb7c:	aa0b      	add	r2, sp, #44	; 0x2c
   8bb7e:	f7ff fb95 	bl	8b2ac <__ssprint_r>
   8bb82:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   8bb86:	9b04      	ldr	r3, [sp, #16]
   8bb88:	f002 0140 	and.w	r1, r2, #64	; 0x40
   8bb8c:	b208      	sxth	r0, r1
   8bb8e:	2800      	cmp	r0, #0
   8bb90:	bf18      	it	ne
   8bb92:	f04f 33ff 	movne.w	r3, #4294967295
   8bb96:	4618      	mov	r0, r3
   8bb98:	b029      	add	sp, #164	; 0xa4
   8bb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bb9e:	bf00      	nop

0008bba0 <__aeabi_uldivmod>:
   8bba0:	b94b      	cbnz	r3, 8bbb6 <__aeabi_uldivmod+0x16>
   8bba2:	b942      	cbnz	r2, 8bbb6 <__aeabi_uldivmod+0x16>
   8bba4:	2900      	cmp	r1, #0
   8bba6:	bf08      	it	eq
   8bba8:	2800      	cmpeq	r0, #0
   8bbaa:	d002      	beq.n	8bbb2 <__aeabi_uldivmod+0x12>
   8bbac:	f04f 31ff 	mov.w	r1, #4294967295
   8bbb0:	4608      	mov	r0, r1
   8bbb2:	f000 b83b 	b.w	8bc2c <__aeabi_idiv0>
   8bbb6:	b082      	sub	sp, #8
   8bbb8:	46ec      	mov	ip, sp
   8bbba:	e92d 5000 	stmdb	sp!, {ip, lr}
   8bbbe:	f000 f81d 	bl	8bbfc <__gnu_uldivmod_helper>
   8bbc2:	f8dd e004 	ldr.w	lr, [sp, #4]
   8bbc6:	b002      	add	sp, #8
   8bbc8:	bc0c      	pop	{r2, r3}
   8bbca:	4770      	bx	lr

0008bbcc <__gnu_ldivmod_helper>:
   8bbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8bbd0:	4616      	mov	r6, r2
   8bbd2:	4698      	mov	r8, r3
   8bbd4:	4604      	mov	r4, r0
   8bbd6:	460d      	mov	r5, r1
   8bbd8:	f000 f82a 	bl	8bc30 <__divdi3>
   8bbdc:	fb06 fc01 	mul.w	ip, r6, r1
   8bbe0:	fba6 2300 	umull	r2, r3, r6, r0
   8bbe4:	fb00 c708 	mla	r7, r0, r8, ip
   8bbe8:	18fb      	adds	r3, r7, r3
   8bbea:	1aa2      	subs	r2, r4, r2
   8bbec:	eb65 0303 	sbc.w	r3, r5, r3
   8bbf0:	9c06      	ldr	r4, [sp, #24]
   8bbf2:	e9c4 2300 	strd	r2, r3, [r4]
   8bbf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8bbfa:	bf00      	nop

0008bbfc <__gnu_uldivmod_helper>:
   8bbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8bc00:	4690      	mov	r8, r2
   8bc02:	4606      	mov	r6, r0
   8bc04:	460f      	mov	r7, r1
   8bc06:	461d      	mov	r5, r3
   8bc08:	f000 f970 	bl	8beec <__udivdi3>
   8bc0c:	fb00 f305 	mul.w	r3, r0, r5
   8bc10:	fba0 4508 	umull	r4, r5, r0, r8
   8bc14:	fb08 3801 	mla	r8, r8, r1, r3
   8bc18:	9b06      	ldr	r3, [sp, #24]
   8bc1a:	4445      	add	r5, r8
   8bc1c:	1b34      	subs	r4, r6, r4
   8bc1e:	eb67 0505 	sbc.w	r5, r7, r5
   8bc22:	e9c3 4500 	strd	r4, r5, [r3]
   8bc26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8bc2a:	bf00      	nop

0008bc2c <__aeabi_idiv0>:
   8bc2c:	4770      	bx	lr
   8bc2e:	bf00      	nop

0008bc30 <__divdi3>:
   8bc30:	2900      	cmp	r1, #0
   8bc32:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8bc36:	461d      	mov	r5, r3
   8bc38:	f2c0 809d 	blt.w	8bd76 <__divdi3+0x146>
   8bc3c:	2400      	movs	r4, #0
   8bc3e:	2d00      	cmp	r5, #0
   8bc40:	f2c0 8094 	blt.w	8bd6c <__divdi3+0x13c>
   8bc44:	4680      	mov	r8, r0
   8bc46:	460f      	mov	r7, r1
   8bc48:	4694      	mov	ip, r2
   8bc4a:	461e      	mov	r6, r3
   8bc4c:	bbe3      	cbnz	r3, 8bcc8 <__divdi3+0x98>
   8bc4e:	428a      	cmp	r2, r1
   8bc50:	d955      	bls.n	8bcfe <__divdi3+0xce>
   8bc52:	fab2 f782 	clz	r7, r2
   8bc56:	b147      	cbz	r7, 8bc6a <__divdi3+0x3a>
   8bc58:	f1c7 0520 	rsb	r5, r7, #32
   8bc5c:	fa20 f605 	lsr.w	r6, r0, r5
   8bc60:	fa01 f107 	lsl.w	r1, r1, r7
   8bc64:	40ba      	lsls	r2, r7
   8bc66:	40b8      	lsls	r0, r7
   8bc68:	4331      	orrs	r1, r6
   8bc6a:	0c17      	lsrs	r7, r2, #16
   8bc6c:	fbb1 f6f7 	udiv	r6, r1, r7
   8bc70:	fa1f fc82 	uxth.w	ip, r2
   8bc74:	fb07 1116 	mls	r1, r7, r6, r1
   8bc78:	fb0c f506 	mul.w	r5, ip, r6
   8bc7c:	0c03      	lsrs	r3, r0, #16
   8bc7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8bc82:	429d      	cmp	r5, r3
   8bc84:	d908      	bls.n	8bc98 <__divdi3+0x68>
   8bc86:	1e71      	subs	r1, r6, #1
   8bc88:	189b      	adds	r3, r3, r2
   8bc8a:	f080 8113 	bcs.w	8beb4 <__divdi3+0x284>
   8bc8e:	429d      	cmp	r5, r3
   8bc90:	f240 8110 	bls.w	8beb4 <__divdi3+0x284>
   8bc94:	3e02      	subs	r6, #2
   8bc96:	189b      	adds	r3, r3, r2
   8bc98:	1b59      	subs	r1, r3, r5
   8bc9a:	fbb1 f5f7 	udiv	r5, r1, r7
   8bc9e:	fb07 1315 	mls	r3, r7, r5, r1
   8bca2:	fb0c fc05 	mul.w	ip, ip, r5
   8bca6:	b280      	uxth	r0, r0
   8bca8:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
   8bcac:	458c      	cmp	ip, r1
   8bcae:	d907      	bls.n	8bcc0 <__divdi3+0x90>
   8bcb0:	1e6b      	subs	r3, r5, #1
   8bcb2:	188a      	adds	r2, r1, r2
   8bcb4:	f080 8100 	bcs.w	8beb8 <__divdi3+0x288>
   8bcb8:	4594      	cmp	ip, r2
   8bcba:	f240 80fd 	bls.w	8beb8 <__divdi3+0x288>
   8bcbe:	3d02      	subs	r5, #2
   8bcc0:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
   8bcc4:	2500      	movs	r5, #0
   8bcc6:	e003      	b.n	8bcd0 <__divdi3+0xa0>
   8bcc8:	428b      	cmp	r3, r1
   8bcca:	d90c      	bls.n	8bce6 <__divdi3+0xb6>
   8bccc:	2500      	movs	r5, #0
   8bcce:	4629      	mov	r1, r5
   8bcd0:	460a      	mov	r2, r1
   8bcd2:	462b      	mov	r3, r5
   8bcd4:	b114      	cbz	r4, 8bcdc <__divdi3+0xac>
   8bcd6:	4252      	negs	r2, r2
   8bcd8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8bcdc:	4610      	mov	r0, r2
   8bcde:	4619      	mov	r1, r3
   8bce0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8bce4:	4770      	bx	lr
   8bce6:	fab3 f583 	clz	r5, r3
   8bcea:	2d00      	cmp	r5, #0
   8bcec:	f040 8087 	bne.w	8bdfe <__divdi3+0x1ce>
   8bcf0:	428b      	cmp	r3, r1
   8bcf2:	d301      	bcc.n	8bcf8 <__divdi3+0xc8>
   8bcf4:	4282      	cmp	r2, r0
   8bcf6:	d8ea      	bhi.n	8bcce <__divdi3+0x9e>
   8bcf8:	2500      	movs	r5, #0
   8bcfa:	2101      	movs	r1, #1
   8bcfc:	e7e8      	b.n	8bcd0 <__divdi3+0xa0>
   8bcfe:	b912      	cbnz	r2, 8bd06 <__divdi3+0xd6>
   8bd00:	2601      	movs	r6, #1
   8bd02:	fbb6 f2f2 	udiv	r2, r6, r2
   8bd06:	fab2 f682 	clz	r6, r2
   8bd0a:	2e00      	cmp	r6, #0
   8bd0c:	d139      	bne.n	8bd82 <__divdi3+0x152>
   8bd0e:	1a8e      	subs	r6, r1, r2
   8bd10:	0c13      	lsrs	r3, r2, #16
   8bd12:	fa1f fc82 	uxth.w	ip, r2
   8bd16:	2501      	movs	r5, #1
   8bd18:	fbb6 f7f3 	udiv	r7, r6, r3
   8bd1c:	fb03 6117 	mls	r1, r3, r7, r6
   8bd20:	fb0c f807 	mul.w	r8, ip, r7
   8bd24:	ea4f 4910 	mov.w	r9, r0, lsr #16
   8bd28:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
   8bd2c:	45b0      	cmp	r8, r6
   8bd2e:	d906      	bls.n	8bd3e <__divdi3+0x10e>
   8bd30:	1e79      	subs	r1, r7, #1
   8bd32:	18b6      	adds	r6, r6, r2
   8bd34:	d202      	bcs.n	8bd3c <__divdi3+0x10c>
   8bd36:	45b0      	cmp	r8, r6
   8bd38:	f200 80d3 	bhi.w	8bee2 <__divdi3+0x2b2>
   8bd3c:	460f      	mov	r7, r1
   8bd3e:	ebc8 0606 	rsb	r6, r8, r6
   8bd42:	fbb6 f1f3 	udiv	r1, r6, r3
   8bd46:	fb03 6311 	mls	r3, r3, r1, r6
   8bd4a:	fb0c fc01 	mul.w	ip, ip, r1
   8bd4e:	b280      	uxth	r0, r0
   8bd50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   8bd54:	459c      	cmp	ip, r3
   8bd56:	d906      	bls.n	8bd66 <__divdi3+0x136>
   8bd58:	1e4e      	subs	r6, r1, #1
   8bd5a:	189a      	adds	r2, r3, r2
   8bd5c:	d202      	bcs.n	8bd64 <__divdi3+0x134>
   8bd5e:	4594      	cmp	ip, r2
   8bd60:	f200 80c2 	bhi.w	8bee8 <__divdi3+0x2b8>
   8bd64:	4631      	mov	r1, r6
   8bd66:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   8bd6a:	e7b1      	b.n	8bcd0 <__divdi3+0xa0>
   8bd6c:	43e4      	mvns	r4, r4
   8bd6e:	4252      	negs	r2, r2
   8bd70:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8bd74:	e766      	b.n	8bc44 <__divdi3+0x14>
   8bd76:	4240      	negs	r0, r0
   8bd78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8bd7c:	f04f 34ff 	mov.w	r4, #4294967295
   8bd80:	e75d      	b.n	8bc3e <__divdi3+0xe>
   8bd82:	40b2      	lsls	r2, r6
   8bd84:	f1c6 0920 	rsb	r9, r6, #32
   8bd88:	fa21 f709 	lsr.w	r7, r1, r9
   8bd8c:	fa20 f909 	lsr.w	r9, r0, r9
   8bd90:	fa01 f106 	lsl.w	r1, r1, r6
   8bd94:	0c13      	lsrs	r3, r2, #16
   8bd96:	fbb7 f8f3 	udiv	r8, r7, r3
   8bd9a:	fa1f fc82 	uxth.w	ip, r2
   8bd9e:	fb03 7718 	mls	r7, r3, r8, r7
   8bda2:	fb0c f508 	mul.w	r5, ip, r8
   8bda6:	ea49 0901 	orr.w	r9, r9, r1
   8bdaa:	ea4f 4119 	mov.w	r1, r9, lsr #16
   8bdae:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
   8bdb2:	40b0      	lsls	r0, r6
   8bdb4:	42bd      	cmp	r5, r7
   8bdb6:	d90a      	bls.n	8bdce <__divdi3+0x19e>
   8bdb8:	18bf      	adds	r7, r7, r2
   8bdba:	f108 36ff 	add.w	r6, r8, #4294967295
   8bdbe:	f080 808e 	bcs.w	8bede <__divdi3+0x2ae>
   8bdc2:	42bd      	cmp	r5, r7
   8bdc4:	f240 808b 	bls.w	8bede <__divdi3+0x2ae>
   8bdc8:	f1a8 0802 	sub.w	r8, r8, #2
   8bdcc:	18bf      	adds	r7, r7, r2
   8bdce:	1b79      	subs	r1, r7, r5
   8bdd0:	fbb1 f5f3 	udiv	r5, r1, r3
   8bdd4:	fb03 1715 	mls	r7, r3, r5, r1
   8bdd8:	fb0c f605 	mul.w	r6, ip, r5
   8bddc:	fa1f f989 	uxth.w	r9, r9
   8bde0:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
   8bde4:	428e      	cmp	r6, r1
   8bde6:	d906      	bls.n	8bdf6 <__divdi3+0x1c6>
   8bde8:	1e6f      	subs	r7, r5, #1
   8bdea:	1889      	adds	r1, r1, r2
   8bdec:	d271      	bcs.n	8bed2 <__divdi3+0x2a2>
   8bdee:	428e      	cmp	r6, r1
   8bdf0:	d96f      	bls.n	8bed2 <__divdi3+0x2a2>
   8bdf2:	3d02      	subs	r5, #2
   8bdf4:	1889      	adds	r1, r1, r2
   8bdf6:	1b8e      	subs	r6, r1, r6
   8bdf8:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
   8bdfc:	e78c      	b.n	8bd18 <__divdi3+0xe8>
   8bdfe:	f1c5 0120 	rsb	r1, r5, #32
   8be02:	fa22 f301 	lsr.w	r3, r2, r1
   8be06:	fa06 f605 	lsl.w	r6, r6, r5
   8be0a:	fa27 f201 	lsr.w	r2, r7, r1
   8be0e:	fa07 f705 	lsl.w	r7, r7, r5
   8be12:	fa20 f101 	lsr.w	r1, r0, r1
   8be16:	431e      	orrs	r6, r3
   8be18:	ea4f 4916 	mov.w	r9, r6, lsr #16
   8be1c:	fbb2 f8f9 	udiv	r8, r2, r9
   8be20:	fa1f fa86 	uxth.w	sl, r6
   8be24:	fb09 2218 	mls	r2, r9, r8, r2
   8be28:	fb0a fb08 	mul.w	fp, sl, r8
   8be2c:	430f      	orrs	r7, r1
   8be2e:	0c3b      	lsrs	r3, r7, #16
   8be30:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8be34:	4593      	cmp	fp, r2
   8be36:	fa0c fc05 	lsl.w	ip, ip, r5
   8be3a:	d908      	bls.n	8be4e <__divdi3+0x21e>
   8be3c:	1992      	adds	r2, r2, r6
   8be3e:	f108 31ff 	add.w	r1, r8, #4294967295
   8be42:	d24a      	bcs.n	8beda <__divdi3+0x2aa>
   8be44:	4593      	cmp	fp, r2
   8be46:	d948      	bls.n	8beda <__divdi3+0x2aa>
   8be48:	f1a8 0802 	sub.w	r8, r8, #2
   8be4c:	1992      	adds	r2, r2, r6
   8be4e:	ebcb 0302 	rsb	r3, fp, r2
   8be52:	fbb3 f1f9 	udiv	r1, r3, r9
   8be56:	fb09 3211 	mls	r2, r9, r1, r3
   8be5a:	fb0a fa01 	mul.w	sl, sl, r1
   8be5e:	b2bf      	uxth	r7, r7
   8be60:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
   8be64:	459a      	cmp	sl, r3
   8be66:	d906      	bls.n	8be76 <__divdi3+0x246>
   8be68:	1e4a      	subs	r2, r1, #1
   8be6a:	199b      	adds	r3, r3, r6
   8be6c:	d233      	bcs.n	8bed6 <__divdi3+0x2a6>
   8be6e:	459a      	cmp	sl, r3
   8be70:	d931      	bls.n	8bed6 <__divdi3+0x2a6>
   8be72:	3902      	subs	r1, #2
   8be74:	199b      	adds	r3, r3, r6
   8be76:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
   8be7a:	0c0f      	lsrs	r7, r1, #16
   8be7c:	fa1f f88c 	uxth.w	r8, ip
   8be80:	fb08 f607 	mul.w	r6, r8, r7
   8be84:	b28a      	uxth	r2, r1
   8be86:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   8be8a:	fb08 f802 	mul.w	r8, r8, r2
   8be8e:	fb0c 6202 	mla	r2, ip, r2, r6
   8be92:	fb0c fc07 	mul.w	ip, ip, r7
   8be96:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   8be9a:	4296      	cmp	r6, r2
   8be9c:	bf88      	it	hi
   8be9e:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
   8bea2:	ebca 0303 	rsb	r3, sl, r3
   8bea6:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
   8beaa:	4563      	cmp	r3, ip
   8beac:	d30e      	bcc.n	8becc <__divdi3+0x29c>
   8beae:	d005      	beq.n	8bebc <__divdi3+0x28c>
   8beb0:	2500      	movs	r5, #0
   8beb2:	e70d      	b.n	8bcd0 <__divdi3+0xa0>
   8beb4:	460e      	mov	r6, r1
   8beb6:	e6ef      	b.n	8bc98 <__divdi3+0x68>
   8beb8:	461d      	mov	r5, r3
   8beba:	e701      	b.n	8bcc0 <__divdi3+0x90>
   8bebc:	fa00 f005 	lsl.w	r0, r0, r5
   8bec0:	fa1f f888 	uxth.w	r8, r8
   8bec4:	eb08 4502 	add.w	r5, r8, r2, lsl #16
   8bec8:	42a8      	cmp	r0, r5
   8beca:	d2f1      	bcs.n	8beb0 <__divdi3+0x280>
   8becc:	3901      	subs	r1, #1
   8bece:	2500      	movs	r5, #0
   8bed0:	e6fe      	b.n	8bcd0 <__divdi3+0xa0>
   8bed2:	463d      	mov	r5, r7
   8bed4:	e78f      	b.n	8bdf6 <__divdi3+0x1c6>
   8bed6:	4611      	mov	r1, r2
   8bed8:	e7cd      	b.n	8be76 <__divdi3+0x246>
   8beda:	4688      	mov	r8, r1
   8bedc:	e7b7      	b.n	8be4e <__divdi3+0x21e>
   8bede:	46b0      	mov	r8, r6
   8bee0:	e775      	b.n	8bdce <__divdi3+0x19e>
   8bee2:	3f02      	subs	r7, #2
   8bee4:	18b6      	adds	r6, r6, r2
   8bee6:	e72a      	b.n	8bd3e <__divdi3+0x10e>
   8bee8:	3902      	subs	r1, #2
   8beea:	e73c      	b.n	8bd66 <__divdi3+0x136>

0008beec <__udivdi3>:
   8beec:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8bef0:	4614      	mov	r4, r2
   8bef2:	4605      	mov	r5, r0
   8bef4:	460e      	mov	r6, r1
   8bef6:	2b00      	cmp	r3, #0
   8bef8:	d13d      	bne.n	8bf76 <__udivdi3+0x8a>
   8befa:	428a      	cmp	r2, r1
   8befc:	d949      	bls.n	8bf92 <__udivdi3+0xa6>
   8befe:	fab2 f782 	clz	r7, r2
   8bf02:	b147      	cbz	r7, 8bf16 <__udivdi3+0x2a>
   8bf04:	f1c7 0120 	rsb	r1, r7, #32
   8bf08:	fa20 f201 	lsr.w	r2, r0, r1
   8bf0c:	fa06 f607 	lsl.w	r6, r6, r7
   8bf10:	40bc      	lsls	r4, r7
   8bf12:	40bd      	lsls	r5, r7
   8bf14:	4316      	orrs	r6, r2
   8bf16:	0c22      	lsrs	r2, r4, #16
   8bf18:	fbb6 f0f2 	udiv	r0, r6, r2
   8bf1c:	b2a1      	uxth	r1, r4
   8bf1e:	fb02 6610 	mls	r6, r2, r0, r6
   8bf22:	fb01 f300 	mul.w	r3, r1, r0
   8bf26:	0c2f      	lsrs	r7, r5, #16
   8bf28:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   8bf2c:	42b3      	cmp	r3, r6
   8bf2e:	d908      	bls.n	8bf42 <__udivdi3+0x56>
   8bf30:	1e47      	subs	r7, r0, #1
   8bf32:	1936      	adds	r6, r6, r4
   8bf34:	f080 80fa 	bcs.w	8c12c <__udivdi3+0x240>
   8bf38:	42b3      	cmp	r3, r6
   8bf3a:	f240 80f7 	bls.w	8c12c <__udivdi3+0x240>
   8bf3e:	3802      	subs	r0, #2
   8bf40:	1936      	adds	r6, r6, r4
   8bf42:	1af6      	subs	r6, r6, r3
   8bf44:	fbb6 f3f2 	udiv	r3, r6, r2
   8bf48:	fb02 6213 	mls	r2, r2, r3, r6
   8bf4c:	fb01 f103 	mul.w	r1, r1, r3
   8bf50:	b2ad      	uxth	r5, r5
   8bf52:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
   8bf56:	4291      	cmp	r1, r2
   8bf58:	d907      	bls.n	8bf6a <__udivdi3+0x7e>
   8bf5a:	1e5e      	subs	r6, r3, #1
   8bf5c:	1912      	adds	r2, r2, r4
   8bf5e:	f080 80e7 	bcs.w	8c130 <__udivdi3+0x244>
   8bf62:	4291      	cmp	r1, r2
   8bf64:	f240 80e4 	bls.w	8c130 <__udivdi3+0x244>
   8bf68:	3b02      	subs	r3, #2
   8bf6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   8bf6e:	2100      	movs	r1, #0
   8bf70:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   8bf74:	4770      	bx	lr
   8bf76:	428b      	cmp	r3, r1
   8bf78:	d843      	bhi.n	8c002 <__udivdi3+0x116>
   8bf7a:	fab3 f483 	clz	r4, r3
   8bf7e:	2c00      	cmp	r4, #0
   8bf80:	d142      	bne.n	8c008 <__udivdi3+0x11c>
   8bf82:	428b      	cmp	r3, r1
   8bf84:	d302      	bcc.n	8bf8c <__udivdi3+0xa0>
   8bf86:	4282      	cmp	r2, r0
   8bf88:	f200 80e1 	bhi.w	8c14e <__udivdi3+0x262>
   8bf8c:	2100      	movs	r1, #0
   8bf8e:	2001      	movs	r0, #1
   8bf90:	e7ee      	b.n	8bf70 <__udivdi3+0x84>
   8bf92:	b912      	cbnz	r2, 8bf9a <__udivdi3+0xae>
   8bf94:	2701      	movs	r7, #1
   8bf96:	fbb7 f4f2 	udiv	r4, r7, r2
   8bf9a:	fab4 f284 	clz	r2, r4
   8bf9e:	2a00      	cmp	r2, #0
   8bfa0:	f040 8089 	bne.w	8c0b6 <__udivdi3+0x1ca>
   8bfa4:	1b0a      	subs	r2, r1, r4
   8bfa6:	0c23      	lsrs	r3, r4, #16
   8bfa8:	b2a7      	uxth	r7, r4
   8bfaa:	2101      	movs	r1, #1
   8bfac:	fbb2 f6f3 	udiv	r6, r2, r3
   8bfb0:	fb03 2216 	mls	r2, r3, r6, r2
   8bfb4:	fb07 f006 	mul.w	r0, r7, r6
   8bfb8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   8bfbc:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   8bfc0:	4290      	cmp	r0, r2
   8bfc2:	d907      	bls.n	8bfd4 <__udivdi3+0xe8>
   8bfc4:	1912      	adds	r2, r2, r4
   8bfc6:	f106 3cff 	add.w	ip, r6, #4294967295
   8bfca:	d202      	bcs.n	8bfd2 <__udivdi3+0xe6>
   8bfcc:	4290      	cmp	r0, r2
   8bfce:	f200 80d0 	bhi.w	8c172 <__udivdi3+0x286>
   8bfd2:	4666      	mov	r6, ip
   8bfd4:	1a12      	subs	r2, r2, r0
   8bfd6:	fbb2 f0f3 	udiv	r0, r2, r3
   8bfda:	fb03 2310 	mls	r3, r3, r0, r2
   8bfde:	fb07 f700 	mul.w	r7, r7, r0
   8bfe2:	b2ad      	uxth	r5, r5
   8bfe4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   8bfe8:	429f      	cmp	r7, r3
   8bfea:	d907      	bls.n	8bffc <__udivdi3+0x110>
   8bfec:	1e42      	subs	r2, r0, #1
   8bfee:	191b      	adds	r3, r3, r4
   8bff0:	f080 80a0 	bcs.w	8c134 <__udivdi3+0x248>
   8bff4:	429f      	cmp	r7, r3
   8bff6:	f240 809d 	bls.w	8c134 <__udivdi3+0x248>
   8bffa:	3802      	subs	r0, #2
   8bffc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   8c000:	e7b6      	b.n	8bf70 <__udivdi3+0x84>
   8c002:	2100      	movs	r1, #0
   8c004:	4608      	mov	r0, r1
   8c006:	e7b3      	b.n	8bf70 <__udivdi3+0x84>
   8c008:	f1c4 0620 	rsb	r6, r4, #32
   8c00c:	fa22 f706 	lsr.w	r7, r2, r6
   8c010:	fa03 f304 	lsl.w	r3, r3, r4
   8c014:	fa21 f506 	lsr.w	r5, r1, r6
   8c018:	fa01 f104 	lsl.w	r1, r1, r4
   8c01c:	fa20 f606 	lsr.w	r6, r0, r6
   8c020:	433b      	orrs	r3, r7
   8c022:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8c026:	fbb5 f7fc 	udiv	r7, r5, ip
   8c02a:	fa1f f883 	uxth.w	r8, r3
   8c02e:	fb0c 5517 	mls	r5, ip, r7, r5
   8c032:	fb08 f907 	mul.w	r9, r8, r7
   8c036:	ea46 0a01 	orr.w	sl, r6, r1
   8c03a:	ea4f 411a 	mov.w	r1, sl, lsr #16
   8c03e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   8c042:	45a9      	cmp	r9, r5
   8c044:	fa02 f204 	lsl.w	r2, r2, r4
   8c048:	d904      	bls.n	8c054 <__udivdi3+0x168>
   8c04a:	1e7e      	subs	r6, r7, #1
   8c04c:	18ed      	adds	r5, r5, r3
   8c04e:	f0c0 8081 	bcc.w	8c154 <__udivdi3+0x268>
   8c052:	4637      	mov	r7, r6
   8c054:	ebc9 0105 	rsb	r1, r9, r5
   8c058:	fbb1 f6fc 	udiv	r6, r1, ip
   8c05c:	fb0c 1516 	mls	r5, ip, r6, r1
   8c060:	fb08 f806 	mul.w	r8, r8, r6
   8c064:	fa1f fa8a 	uxth.w	sl, sl
   8c068:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
   8c06c:	4588      	cmp	r8, r1
   8c06e:	d903      	bls.n	8c078 <__udivdi3+0x18c>
   8c070:	1e75      	subs	r5, r6, #1
   8c072:	18c9      	adds	r1, r1, r3
   8c074:	d374      	bcc.n	8c160 <__udivdi3+0x274>
   8c076:	462e      	mov	r6, r5
   8c078:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   8c07c:	0c37      	lsrs	r7, r6, #16
   8c07e:	fa1f fc82 	uxth.w	ip, r2
   8c082:	fb0c f507 	mul.w	r5, ip, r7
   8c086:	0c12      	lsrs	r2, r2, #16
   8c088:	b2b3      	uxth	r3, r6
   8c08a:	fb0c fc03 	mul.w	ip, ip, r3
   8c08e:	fb02 5303 	mla	r3, r2, r3, r5
   8c092:	fb02 f207 	mul.w	r2, r2, r7
   8c096:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8c09a:	429d      	cmp	r5, r3
   8c09c:	bf88      	it	hi
   8c09e:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
   8c0a2:	ebc8 0101 	rsb	r1, r8, r1
   8c0a6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8c0aa:	4291      	cmp	r1, r2
   8c0ac:	d34c      	bcc.n	8c148 <__udivdi3+0x25c>
   8c0ae:	d043      	beq.n	8c138 <__udivdi3+0x24c>
   8c0b0:	4630      	mov	r0, r6
   8c0b2:	2100      	movs	r1, #0
   8c0b4:	e75c      	b.n	8bf70 <__udivdi3+0x84>
   8c0b6:	4094      	lsls	r4, r2
   8c0b8:	f1c2 0520 	rsb	r5, r2, #32
   8c0bc:	fa21 f605 	lsr.w	r6, r1, r5
   8c0c0:	fa20 f505 	lsr.w	r5, r0, r5
   8c0c4:	fa01 f102 	lsl.w	r1, r1, r2
   8c0c8:	0c23      	lsrs	r3, r4, #16
   8c0ca:	fbb6 fcf3 	udiv	ip, r6, r3
   8c0ce:	b2a7      	uxth	r7, r4
   8c0d0:	fb03 661c 	mls	r6, r3, ip, r6
   8c0d4:	fb07 f80c 	mul.w	r8, r7, ip
   8c0d8:	4329      	orrs	r1, r5
   8c0da:	0c0d      	lsrs	r5, r1, #16
   8c0dc:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   8c0e0:	45b0      	cmp	r8, r6
   8c0e2:	fa00 f502 	lsl.w	r5, r0, r2
   8c0e6:	d908      	bls.n	8c0fa <__udivdi3+0x20e>
   8c0e8:	1936      	adds	r6, r6, r4
   8c0ea:	f10c 30ff 	add.w	r0, ip, #4294967295
   8c0ee:	d23e      	bcs.n	8c16e <__udivdi3+0x282>
   8c0f0:	45b0      	cmp	r8, r6
   8c0f2:	d93c      	bls.n	8c16e <__udivdi3+0x282>
   8c0f4:	f1ac 0c02 	sub.w	ip, ip, #2
   8c0f8:	1936      	adds	r6, r6, r4
   8c0fa:	ebc8 0206 	rsb	r2, r8, r6
   8c0fe:	fbb2 f0f3 	udiv	r0, r2, r3
   8c102:	fb03 2610 	mls	r6, r3, r0, r2
   8c106:	fb07 f800 	mul.w	r8, r7, r0
   8c10a:	b289      	uxth	r1, r1
   8c10c:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   8c110:	4590      	cmp	r8, r2
   8c112:	d906      	bls.n	8c122 <__udivdi3+0x236>
   8c114:	1e46      	subs	r6, r0, #1
   8c116:	1912      	adds	r2, r2, r4
   8c118:	d227      	bcs.n	8c16a <__udivdi3+0x27e>
   8c11a:	4590      	cmp	r8, r2
   8c11c:	d925      	bls.n	8c16a <__udivdi3+0x27e>
   8c11e:	3802      	subs	r0, #2
   8c120:	1912      	adds	r2, r2, r4
   8c122:	ebc8 0202 	rsb	r2, r8, r2
   8c126:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
   8c12a:	e73f      	b.n	8bfac <__udivdi3+0xc0>
   8c12c:	4638      	mov	r0, r7
   8c12e:	e708      	b.n	8bf42 <__udivdi3+0x56>
   8c130:	4633      	mov	r3, r6
   8c132:	e71a      	b.n	8bf6a <__udivdi3+0x7e>
   8c134:	4610      	mov	r0, r2
   8c136:	e761      	b.n	8bffc <__udivdi3+0x110>
   8c138:	fa00 f004 	lsl.w	r0, r0, r4
   8c13c:	fa1f fc8c 	uxth.w	ip, ip
   8c140:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
   8c144:	4298      	cmp	r0, r3
   8c146:	d2b3      	bcs.n	8c0b0 <__udivdi3+0x1c4>
   8c148:	1e70      	subs	r0, r6, #1
   8c14a:	2100      	movs	r1, #0
   8c14c:	e710      	b.n	8bf70 <__udivdi3+0x84>
   8c14e:	4621      	mov	r1, r4
   8c150:	4620      	mov	r0, r4
   8c152:	e70d      	b.n	8bf70 <__udivdi3+0x84>
   8c154:	45a9      	cmp	r9, r5
   8c156:	f67f af7c 	bls.w	8c052 <__udivdi3+0x166>
   8c15a:	3f02      	subs	r7, #2
   8c15c:	18ed      	adds	r5, r5, r3
   8c15e:	e779      	b.n	8c054 <__udivdi3+0x168>
   8c160:	4588      	cmp	r8, r1
   8c162:	d988      	bls.n	8c076 <__udivdi3+0x18a>
   8c164:	3e02      	subs	r6, #2
   8c166:	18c9      	adds	r1, r1, r3
   8c168:	e786      	b.n	8c078 <__udivdi3+0x18c>
   8c16a:	4630      	mov	r0, r6
   8c16c:	e7d9      	b.n	8c122 <__udivdi3+0x236>
   8c16e:	4684      	mov	ip, r0
   8c170:	e7c3      	b.n	8c0fa <__udivdi3+0x20e>
   8c172:	3e02      	subs	r6, #2
   8c174:	1912      	adds	r2, r2, r4
   8c176:	e72d      	b.n	8bfd4 <__udivdi3+0xe8>

0008c178 <sd_trans_multipliers>:
   8c178:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   8c188:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   8c198:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   8c1a8:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0008c1b8 <sd_mmc_trans_units>:
   8c1b8:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0008c1d4 <mmc_trans_multipliers>:
   8c1d4:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   8c1e4:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   8c1f4:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   8c204:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   8c214:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   8c224:	0010 0000 0020 0000 0040 0000 0080 0000     .... ...@.......
   8c234:	0100 0000 0200 0000 0400 0000 432a 534c     ............*CLS
   8c244:	0000 0000 452a 4553 0000 0000 452a 4553     ....*ESE....*ESE
   8c254:	003f 0000 452a 5253 003f 0000 492a 4e44     ?...*ESR?...*IDN
   8c264:	003f 0000 4f2a 4350 0000 0000 4f2a 4350     ?...*OPC....*OPC
   8c274:	003f 0000 522a 5453 0000 0000 532a 4552     ?...*RST....*SRE
   8c284:	0000 0000 532a 4552 003f 0000 532a 4254     ....*SRE?...*STB
   8c294:	003f 0000 542a 5453 003f 0000 572a 4941     ?...*TST?...*WAI
   8c2a4:	0000 0000 5953 5453 6d65 453a 5252 726f     ....SYSTem:ERRor
   8c2b4:	003f 0000 5953 5453 6d65 453a 5252 726f     ?...SYSTem:ERRor
   8c2c4:	4e3a 5845 3f54 0000 5953 5453 6d65 453a     :NEXT?..SYSTem:E
   8c2d4:	5252 726f 433a 554f 744e 003f 5953 5453     RRor:COUNt?.SYST
   8c2e4:	6d65 563a 5245 6953 6e6f 003f 5953 5453     em:VERSion?.SYST
   8c2f4:	6d65 543a 5059 3f45 0000 0000 5953 5453     em:TYPE?....SYST
   8c304:	6d65 4e3a 4d41 3f45 0000 0000 5953 5453     em:NAME?....SYST
   8c314:	6d65 443a 5345 3f43 0000 0000 5953 5453     em:DESC?....SYST
   8c324:	6d65 533a 3f4e 0000 5953 5453 6d65 443a     em:SN?..SYSTem:D
   8c334:	4f50 6557 3f72 0000 5953 5453 6d65 4d3a     POWer?..SYSTem:M
   8c344:	5841 7543 7272 6e65 3f74 0000 5953 5453     AXCurrent?..SYST
   8c354:	6d65 4e3a 4d4f 7543 7272 6e65 3f74 0000     em:NOMCurrent?..
   8c364:	5453 5441 7375 533a 4344 7261 7364 6174     STATus:SDCardsta
   8c374:	7574 3f73 0000 0000 5453 5441 7375 4c3a     tus?....STATus:L
   8c384:	4445 7453 7461 7375 003f 0000 5453 5441     EDStatus?...STAT
   8c394:	7375 423a 5455 6f74 736e 6174 7574 3f73     us:BUTtonstatus?
   8c3a4:	0000 0000 4f43 464e 6769 7275 3a65 454c     ....CONFigure:LE
   8c3b4:	0044 0000 4f43 464e 6769 7275 3a65 4f50     D...CONFigure:PO
   8c3c4:	6557 0072 4f43 464e 6769 7275 3a65 4545     Wer.CONFigure:EE
   8c3d4:	5250 4d4f 0000 0000 454d 5341 7275 3a65     PROM....MEASure:
   8c3e4:	4545 5250 4d4f 003f 4f43 464e 6769 7275     EEPROM?.CONFigur
   8c3f4:	3a65 4544 614c 3a79 3a41 4156 754c 0065     e:DELay:A:VALue.
   8c404:	4f43 464e 6769 7275 3a65 4544 614c 3a79     CONFigure:DELay:
   8c414:	3a42 4156 754c 0065 4f43 464e 6769 7275     B:VALue.CONFigur
   8c424:	3a65 4544 614c 3a79 3a41 4156 754c 3f65     e:DELay:A:VALue?
   8c434:	0000 0000 4f43 464e 6769 7275 3a65 4544     ....CONFigure:DE
   8c444:	614c 3a79 3a42 4156 754c 3f65 0000 0000     Lay:B:VALue?....
   8c454:	4f43 464e 6769 7275 3a65 4544 614c 3a79     CONFigure:DELay:
   8c464:	3a41 4e45 6261 656c 0000 0000 4f43 464e     A:ENable....CONF
   8c474:	6769 7275 3a65 4544 614c 3a79 3a42 4e45     igure:DELay:B:EN
   8c484:	6261 656c 0000 0000 4f43 464e 6769 7275     able....CONFigur
   8c494:	3a65 4544 614c 3a79 3a41 4e45 6261 656c     e:DELay:A:ENable
   8c4a4:	003f 0000 4f43 464e 6769 7275 3a65 4544     ?...CONFigure:DE
   8c4b4:	614c 3a79 3a42 4e45 6261 656c 003f 0000     Lay:B:ENable?...
   8c4c4:	5453 5441 7375 513a 4555 7453 6f69 616e     STATus:QUEStiona
   8c4d4:	6c62 3f65 0000 0000 5453 5441 7375 513a     ble?....STATus:Q
   8c4e4:	4555 7453 6f69 616e 6c62 3a65 5645 4e45     UEStionable:EVEN
   8c4f4:	3f74 0000 5453 5441 7375 513a 4555 7453     t?..STATus:QUESt
   8c504:	6f69 616e 6c62 3a65 4e45 4241 656c 0000     ionable:ENABle..
   8c514:	5453 5441 7375 513a 4555 7453 6f69 616e     STATus:QUEStiona
   8c524:	6c62 3a65 4e45 4241 656c 003f 5453 5441     ble:ENABle?.STAT
   8c534:	7375 503a 4552 6553 0074 0000 454d 5341     us:PRESet...MEAS
   8c544:	7275 3a65 4f56 544c 6761 3a65 4344 003f     ure:VOLTage:DC?.
   8c554:	4f43 464e 6769 7275 3a65 4f56 544c 6761     CONFigure:VOLTag
   8c564:	3a65 4344 0000 0000 454d 5341 7275 3a65     e:DC....MEASure:
   8c574:	4f56 544c 6761 3a65 4344 523a 5441 6f69     VOLTage:DC:RATio
   8c584:	003f 0000 454d 5341 7275 3a65 4f56 544c     ?...MEASure:VOLT
   8c594:	6761 3a65 4341 003f 454d 5341 7275 3a65     age:AC?.MEASure:
   8c5a4:	5543 5252 6e65 3a74 4344 003f 454d 5341     CURRent:DC?.MEAS
   8c5b4:	7275 3a65 5543 5252 6e65 3a74 4341 003f     ure:CURRent:AC?.
   8c5c4:	454d 5341 7275 3a65 4552 6953 7473 6e61     MEASure:RESistan
   8c5d4:	6563 003f 454d 5341 7275 3a65 5246 5345     ce?.MEASure:FRES
   8c5e4:	7369 6174 636e 3f65 0000 0000 454d 5341     istance?....MEAS
   8c5f4:	7275 3a65 5246 5145 6575 636e 3f79 0000     ure:FREQuency?..
   8c604:	454d 5341 7275 3a65 4550 6952 646f 003f     MEASure:PERiod?.

0008c614 <scpi_commands>:
   8c614:	c240 0008 2aad 0008 c248 0008 2aed 0008     @....*..H....*..
   8c624:	c250 0008 2b21 0008 c258 0008 2b49 0008     P...!+..X...I+..
   8c634:	c260 0008 2b85 0008 c268 0008 2bb9 0008     `....+..h....+..
   8c644:	c270 0008 2bd5 0008 c278 0008 2bed 0008     p....+..x....+..
   8c654:	c280 0008 2c11 0008 c288 0008 2c45 0008     .....,......E,..
   8c664:	c290 0008 2c6d 0008 c298 0008 2c95 0008     ....m,.......,..
   8c674:	c2a0 0008 2ccd 0008 c2a8 0008 2d0d 0008     .....,.......-..
   8c684:	c2b8 0008 2d0d 0008 c2cc 0008 2d4d 0008     .....-......M-..
   8c694:	c2e0 0008 2cf1 0008 c2f0 0008 38d9 0008     .....,.......8..
   8c6a4:	c300 0008 3915 0008 c310 0008 3951 0008     .....9......Q9..
   8c6b4:	c320 0008 398d 0008 c32c 0008 39b9 0008      ....9..,....9..
   8c6c4:	c33c 0008 39e9 0008 c350 0008 3a15 0008     <....9..P....:..
   8c6d4:	c364 0008 3a41 0008 c37c 0008 3a69 0008     d...A:..|...i:..
   8c6e4:	c390 0008 3a91 0008 c3a8 0008 3bad 0008     .....:.......;..
   8c6f4:	c3b8 0008 3b01 0008 c3c8 0008 3af9 0008     .....;.......:..
   8c704:	c3dc 0008 3af1 0008 c3ec 0008 3c71 0008     .....:......q<..
   8c714:	c404 0008 3cd5 0008 c41c 0008 3d39 0008     .....<......9=..
   8c724:	c438 0008 3d7d 0008 c454 0008 3dc1 0008     8...}=..T....=..
   8c734:	c470 0008 3e0d 0008 c48c 0008 3e59 0008     p....>......Y>..
   8c744:	c4a8 0008 3e99 0008 c4c4 0008 2d71 0008     .....>......q-..
   8c754:	c4dc 0008 2d71 0008 c4f8 0008 2dd5 0008     ....q-.......-..
   8c764:	c514 0008 2dad 0008 c530 0008 2e09 0008     .....-..0.......
   8c774:	c540 0008 2cd5 0008 c554 0008 2cd5 0008     @....,..T....,..
   8c784:	c56c 0008 2cd5 0008 c588 0008 2cd5 0008     l....,.......,..
   8c794:	c59c 0008 2cd5 0008 c5b0 0008 2cd5 0008     .....,.......,..
   8c7a4:	c5c4 0008 2cd5 0008 c5d8 0008 2cd5 0008     .....,.......,..
   8c7b4:	c5f0 0008 2cd5 0008 c604 0008 2cd5 0008     .....,.......,..
	...
   8c7cc:	6f4e 6520 7272 726f 0000 0000 7953 746e     No error....Synt
   8c7dc:	7861 6520 7272 726f 0000 0000 6e49 6176     ax error....Inva
   8c7ec:	696c 2064 6573 6170 6172 6f74 0072 0000     lid separator...
   8c7fc:	6e55 6564 6966 656e 2064 6568 6461 7265     Undefined header
   8c80c:	0000 0000 6150 6172 656d 6574 2072 6f6e     ....Parameter no
   8c81c:	2074 6c61 6f6c 6577 0064 0000 694d 7373     t allowed...Miss
   8c82c:	6e69 2067 6170 6172 656d 6574 0072 0000     ing parameter...
   8c83c:	6e49 6176 696c 2064 7573 6666 7869 0000     Invalid suffix..
   8c84c:	7553 6666 7869 6e20 746f 6120 6c6c 776f     Suffix not allow
   8c85c:	6465 0000 6e55 6e6b 776f 206e 7265 6f72     ed..Unknown erro
   8c86c:	0072 0000 5443 2055 4546 0045 4554 5453     r...CTU FEE.TEST
   8c87c:	5320 5043 2049 4e49 5453 5552 454d 544e      SCPI INSTRUMENT
   8c88c:	5420 4953 3233 3532 0000 0000 3176 302e      TSI3225....v1.0
   8c89c:	0000 0000 202c 0000 0d3b 000a 203b 0a0d     ...., ..;...; ..
   8c8ac:	0009 0000 0020 0000 494d 694e 756d 006d     .... ...MINimum.
   8c8bc:	414d 6958 756d 006d 4544 6146 6c75 0074     MAXimum.DEFault.
   8c8cc:	5055 0000 4f44 4e57 0000 0000 414e 004e     UP..DOWN....NAN.
   8c8dc:	4e49 0046 494e 464e 0000 0000 5655 0000     INF.NINF....UV..
   8c8ec:	564d 0000 0056 0000 564b 0000 4155 0000     MV..V...KV..UA..
   8c8fc:	414d 0000 0041 0000 414b 0000 484f 004d     MA..A...KA..OHM.
   8c90c:	4f4b 4d48 0000 0000 4f4d 4d48 0000 0000     KOHM....MOHM....
   8c91c:	5a48 0000 484b 005a 484d 005a 4847 005a     HZ..KHZ.MHZ.GHZ.
   8c92c:	4543 004c 5350 0000 534e 0000 5355 0000     CEL.PS..NS..US..
   8c93c:	534d 0000 0053 0000 494d 004e 5248 0000     MS..S...MIN.HR..
   8c94c:	0000 0000                                   ....

0008c950 <scpi_units_def>:
   8c950:	c8e8 0008 0001 0000 ed8d a0b5 c6f7 3eb0     ...............>
   8c960:	c8ec 0008 0001 0000 a9fc d2f1 624d 3f50     ............MbP?
   8c970:	c8f0 0008 0001 0000 0000 0000 0000 3ff0     ...............?
   8c980:	c8f4 0008 0001 0000 0000 0000 4000 408f     .............@.@
   8c990:	c8f8 0008 0002 0000 ed8d a0b5 c6f7 3eb0     ...............>
   8c9a0:	c8fc 0008 0002 0000 a9fc d2f1 624d 3f50     ............MbP?
   8c9b0:	c900 0008 0002 0000 0000 0000 0000 3ff0     ...............?
   8c9c0:	c904 0008 0002 0000 0000 0000 4000 408f     .............@.@
   8c9d0:	c908 0008 0003 0000 0000 0000 0000 3ff0     ...............?
   8c9e0:	c90c 0008 0003 0000 0000 0000 4000 408f     .............@.@
   8c9f0:	c914 0008 0003 0000 0000 0000 8480 412e     ...............A
   8ca00:	c91c 0008 0004 0000 0000 0000 0000 3ff0     ...............?
   8ca10:	c920 0008 0004 0000 0000 0000 4000 408f      ............@.@
   8ca20:	c924 0008 0004 0000 0000 0000 8480 412e     $..............A
   8ca30:	c928 0008 0004 0000 0000 0000 cd65 41cd     (...........e..A
   8ca40:	c92c 0008 0005 0000 0000 0000 0000 3ff0     ,..............?
   8ca50:	c930 0008 0006 0000 ea11 812d 9799 3d71     0.........-...q=
   8ca60:	c934 0008 0006 0000 d695 e826 2e0b 3e11     4.........&....>
   8ca70:	c938 0008 0006 0000 ed8d a0b5 c6f7 3eb0     8..............>
   8ca80:	c93c 0008 0006 0000 a9fc d2f1 624d 3f50     <...........MbP?
   8ca90:	c940 0008 0006 0000 0000 0000 0000 3ff0     @..............?
   8caa0:	c944 0008 0006 0000 0000 0000 0000 404e     D.............N@
   8cab0:	c948 0008 0006 0000 0000 0000 2000 40ac     H............ .@
	...

0008cad0 <scpi_special_numbers_def>:
   8cad0:	c8b4 0008 0001 0000 c8bc 0008 0002 0000     ................
   8cae0:	c8c4 0008 0003 0000 c8cc 0008 0004 0000     ................
   8caf0:	c8d0 0008 0005 0000 c8d8 0008 0006 0000     ................
   8cb00:	c8dc 0008 0007 0000 c8e0 0008 0008 0000     ................
	...
   8cb18:	6c25 0067 3a3f 5d5b 0000 0000 3f3a 0000     %lg.?:[]....:?..
   8cb28:	6948 6867 7320 6570 6465 6420 6175 206c     High speed dual 
   8cb38:	6564 616c 2079 696c 656e 0d73 0000 0000     delay lines.....
   8cb48:	7830 3030 3030 000d 3438 6d30 0d57 0000     0x0000..840mW...
   8cb58:	6d30 0d41 0000 0000 4b4f 000d 7570 6873     0mA.....OK..push
   8cb68:	6465 000d 6572 656c 7361 6465 000d 0000     ed..released....
   8cb78:	4e4f 0000 464f 0046 7525 000d 2e25 732a     ON..OFF.%u..%.*s
   8cb88:	0000 0000 2a2a 5245 4f52 3a52 2520 2c64     ....**ERROR: %d,
   8cb98:	2220 7325 0d22 000a 2a2a 5253 3a51 3020      "%s"...**SRQ: 0
   8cba8:	2578 2058 2528 2964 0a0d 0000 2a2a 5443     x%X (%d)....**CT
   8cbb8:	4c52 2520 3230 3a78 3020 2578 2058 2528     RL %02x: 0x%X (%
   8cbc8:	2964 0a0d 0000 0000 2a2a 6554 7473 0a0d     d)......**Test..
   8cbd8:	0000 0000 2a2a 6552 6573 0d74 000a 0000     ....**Reset.....
   8cbe8:	5322 2f44 4d4d 2043 6143 6472 6f20 6576     "SD/MMC Card ove
   8cbf8:	2072 434d 2049 6c53 746f 3020 0022 0000     r MCI Slot 0"...
   8cc08:	3231 3133 3332 3231 3133 3332 0000 0000     123123123123....
	...
   8cc20:	aa00 aaaa aaaa aaaa eeaa eeee eeee eeee     ................
   8cc30:	feee ffff ffff ffff ffff ffff 7fff dfbf     ................
   8cc40:	f7ef fdfb 7efc dfbf f7ef fdfb 007e 0000     .....~......~...

0008cc50 <_ctype_>:
   8cc50:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   8cc60:	2020 2020 2020 2020 2020 2020 2020 2020                     
   8cc70:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   8cc80:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   8cc90:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   8cca0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   8ccb0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   8ccc0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   8ccd0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0008cd54 <_global_impure_ptr>:
   8cd54:	02b0 2007 0043                              ... C.

0008cd5a <blanks.6650>:
   8cd5a:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008cd6a <zeroes.6651>:
   8cd6a:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   8cd7a:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   8cd8a:	3000 3231 3433 3635 3837 6139 6362 6564     .0123456789abcde
   8cd9a:	0066                                        f.

0008cd9c <blanks.6664>:
   8cd9c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008cdac <zeroes.6665>:
   8cdac:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0008cdbc <_init>:
   8cdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cdbe:	bf00      	nop
   8cdc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8cdc2:	bc08      	pop	{r3}
   8cdc4:	469e      	mov	lr, r3
   8cdc6:	4770      	bx	lr

0008cdc8 <__init_array_start>:
   8cdc8:	0008a965 	.word	0x0008a965

0008cdcc <__frame_dummy_init_array_entry>:
   8cdcc:	0008016d                                m...

0008cdd0 <_fini>:
   8cdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cdd2:	bf00      	nop
   8cdd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8cdd6:	bc08      	pop	{r3}
   8cdd8:	469e      	mov	lr, r3
   8cdda:	4770      	bx	lr

0008cddc <__fini_array_start>:
   8cddc:	00080145 	.word	0x00080145

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <sd_mmc_cards>:
	...
20070014:	0067 0000 0000 0000 0000 0000 0000 0000     g...............
	...

20070030 <ch2_in_color>:
20070030:	0003                                        ..

20070032 <ch1_in_color>:
20070032:	0003                                        ..

20070034 <ch1_out_color>:
20070034:	0002                                        ..

20070036 <ch2_out_color>:
20070036:	0002                                        ..

20070038 <scpi_context>:
20070038:	c614 0008 0100 0000 0000 0000 0b28 2007     ............(.. 
	...
20070054:	0078 2007 0000 0000 0000 0000 0000 0000     x.. ............
20070064:	0000 0000 0b18 2007 c950 0008 cad0 0008     ....... P.......
20070074:	0000 0000                                   ....

20070078 <scpi_interface>:
20070078:	490d 0008 48c9 0008 4959 0008 4905 0008     .I...H..YI...I..
20070088:	4a01 0008 49d1 0008                         .J...I..

20070090 <udi_msc_name.9525>:
20070090:	534d 2043 6e69 6574 6672 6361 0065 0000     MSC interface...

200700a0 <extra_strings_desc.9529>:
200700a0:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

200700bc <udi_cdc_name.9524>:
200700bc:	4443 2043 6e69 6574 6672 6361 0065 0000     CDC interface...

200700cc <udi_api_cdc_data>:
200700cc:	5411 0008 5171 0008 4e41 0008 4e49 0008     .T..qQ..AN..IN..
200700dc:	502d 0008                                   -P..

200700e0 <udi_api_cdc_comm>:
200700e0:	51a1 0008 4e2d 0008 5085 0008 4e49 0008     .Q..-N...P..IN..
200700f0:	0000 0000                                   ....

200700f4 <udc_config_hs>:
200700f4:	0104 2007 0188 2007                         ... ... 

200700fc <udc_config_lsfs>:
200700fc:	01a8 2007 0188 2007                         ... ... 

20070104 <udc_desc_hs>:
20070104:	0209 0062 0103 c000 0832 000b 0202 0102     ..b.....2.......
20070114:	0900 0004 0100 0202 0001 2405 1000 0401     ...........$....
20070124:	0224 0502 0624 0100 2405 0301 0701 8305     $...$....$......
20070134:	4003 1000 0409 0001 0a02 0000 0700 8405     .@..............
20070144:	0002 0002 0507 0205 0200 0900 0204 0200     ................
20070154:	0608 0550 0507 0281 0200 0700 0205 0002     ..P.............
20070164:	0002 0000                                   ....

20070168 <udc_config>:
20070168:	0194 2007 00fc 2007 0194 2007 017c 2007     ... ... ... |.. 
20070178:	00f4 2007                                   ... 

2007017c <udc_device_qual>:
2007017c:	060a 0200 0000 4000 0001 0000               .......@....

20070188 <udi_apis>:
20070188:	00e0 2007 00cc 2007 0234 2007               ... ... 4.. 

20070194 <udc_device_desc>:
20070194:	0112 0200 0000 4000 03eb 2424 0100 0201     .......@..$$....
200701a4:	0103 0000                                   ....

200701a8 <udc_desc_fs>:
200701a8:	0209 0062 0103 c000 0832 000b 0202 0102     ..b.....2.......
200701b8:	0900 0004 0100 0202 0001 2405 1000 0401     ...........$....
200701c8:	0224 0502 0624 0100 2405 0301 0701 8305     $...$....$......
200701d8:	4003 1000 0409 0001 0a02 0000 0700 8405     .@..............
200701e8:	4002 0000 0507 0205 0040 0900 0204 0200     .@......@.......
200701f8:	0608 0550 0507 0281 0040 0700 0205 4002     ..P.....@......@
20070208:	0000 0000                                   ....

2007020c <udi_msc_inquiry_data.10004>:
2007020c:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
2007022c:	2e31 3030                                   1.00

20070230 <udi_msc_b_ack_trans>:
20070230:	0001 0000                                   ....

20070234 <udi_api_msc>:
20070234:	62ad 0008 6291 0008 6199 0008 5725 0008     .b...b...a..%W..
20070244:	0000 0000                                   ....

20070248 <udi_msc_csw>:
20070248:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

20070258 <udc_string_product_name>:
20070258:	6554 706d 616c 6574 4220 616f 6472 0000     Template Board..

20070268 <udc_string_manufacturer_name>:
20070268:	6145 7973 702d 6968 0000 0000               Easy-phi....

20070274 <udc_string_desc>:
20070274:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20070294 <udc_string_desc_languageid>:
20070294:	0304 0409                                   ....

20070298 <g_interrupt_enabled>:
20070298:	0001 0000                                   ....

2007029c <SystemCoreClock>:
2007029c:	0900 003d                                   ..=.

200702a0 <__ctype_ptr__>:
200702a0:	cc50 0008 0000 0000                         P.......

200702a8 <_impure_ptr>:
200702a8:	02b0 2007 0000 0000                         ... ....

200702b0 <impure_data>:
200702b0:	0000 0000 059c 2007 0604 2007 066c 2007     ....... ... l.. 
	...
200702e4:	cd58 0008 0000 0000 0000 0000 0000 0000     X...............
	...
20070358:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20070368:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200706d8 <__malloc_av_>:
	...
200706e0:	06d8 2007 06d8 2007 06e0 2007 06e0 2007     ... ... ... ... 
200706f0:	06e8 2007 06e8 2007 06f0 2007 06f0 2007     ... ... ... ... 
20070700:	06f8 2007 06f8 2007 0700 2007 0700 2007     ... ... ... ... 
20070710:	0708 2007 0708 2007 0710 2007 0710 2007     ... ... ... ... 
20070720:	0718 2007 0718 2007 0720 2007 0720 2007     ... ...  ..  .. 
20070730:	0728 2007 0728 2007 0730 2007 0730 2007     (.. (.. 0.. 0.. 
20070740:	0738 2007 0738 2007 0740 2007 0740 2007     8.. 8.. @.. @.. 
20070750:	0748 2007 0748 2007 0750 2007 0750 2007     H.. H.. P.. P.. 
20070760:	0758 2007 0758 2007 0760 2007 0760 2007     X.. X.. `.. `.. 
20070770:	0768 2007 0768 2007 0770 2007 0770 2007     h.. h.. p.. p.. 
20070780:	0778 2007 0778 2007 0780 2007 0780 2007     x.. x.. ... ... 
20070790:	0788 2007 0788 2007 0790 2007 0790 2007     ... ... ... ... 
200707a0:	0798 2007 0798 2007 07a0 2007 07a0 2007     ... ... ... ... 
200707b0:	07a8 2007 07a8 2007 07b0 2007 07b0 2007     ... ... ... ... 
200707c0:	07b8 2007 07b8 2007 07c0 2007 07c0 2007     ... ... ... ... 
200707d0:	07c8 2007 07c8 2007 07d0 2007 07d0 2007     ... ... ... ... 
200707e0:	07d8 2007 07d8 2007 07e0 2007 07e0 2007     ... ... ... ... 
200707f0:	07e8 2007 07e8 2007 07f0 2007 07f0 2007     ... ... ... ... 
20070800:	07f8 2007 07f8 2007 0800 2007 0800 2007     ... ... ... ... 
20070810:	0808 2007 0808 2007 0810 2007 0810 2007     ... ... ... ... 
20070820:	0818 2007 0818 2007 0820 2007 0820 2007     ... ...  ..  .. 
20070830:	0828 2007 0828 2007 0830 2007 0830 2007     (.. (.. 0.. 0.. 
20070840:	0838 2007 0838 2007 0840 2007 0840 2007     8.. 8.. @.. @.. 
20070850:	0848 2007 0848 2007 0850 2007 0850 2007     H.. H.. P.. P.. 
20070860:	0858 2007 0858 2007 0860 2007 0860 2007     X.. X.. `.. `.. 
20070870:	0868 2007 0868 2007 0870 2007 0870 2007     h.. h.. p.. p.. 
20070880:	0878 2007 0878 2007 0880 2007 0880 2007     x.. x.. ... ... 
20070890:	0888 2007 0888 2007 0890 2007 0890 2007     ... ... ... ... 
200708a0:	0898 2007 0898 2007 08a0 2007 08a0 2007     ... ... ... ... 
200708b0:	08a8 2007 08a8 2007 08b0 2007 08b0 2007     ... ... ... ... 
200708c0:	08b8 2007 08b8 2007 08c0 2007 08c0 2007     ... ... ... ... 
200708d0:	08c8 2007 08c8 2007 08d0 2007 08d0 2007     ... ... ... ... 
200708e0:	08d8 2007 08d8 2007 08e0 2007 08e0 2007     ... ... ... ... 
200708f0:	08e8 2007 08e8 2007 08f0 2007 08f0 2007     ... ... ... ... 
20070900:	08f8 2007 08f8 2007 0900 2007 0900 2007     ... ... ... ... 
20070910:	0908 2007 0908 2007 0910 2007 0910 2007     ... ... ... ... 
20070920:	0918 2007 0918 2007 0920 2007 0920 2007     ... ...  ..  .. 
20070930:	0928 2007 0928 2007 0930 2007 0930 2007     (.. (.. 0.. 0.. 
20070940:	0938 2007 0938 2007 0940 2007 0940 2007     8.. 8.. @.. @.. 
20070950:	0948 2007 0948 2007 0950 2007 0950 2007     H.. H.. P.. P.. 
20070960:	0958 2007 0958 2007 0960 2007 0960 2007     X.. X.. `.. `.. 
20070970:	0968 2007 0968 2007 0970 2007 0970 2007     h.. h.. p.. p.. 
20070980:	0978 2007 0978 2007 0980 2007 0980 2007     x.. x.. ... ... 
20070990:	0988 2007 0988 2007 0990 2007 0990 2007     ... ... ... ... 
200709a0:	0998 2007 0998 2007 09a0 2007 09a0 2007     ... ... ... ... 
200709b0:	09a8 2007 09a8 2007 09b0 2007 09b0 2007     ... ... ... ... 
200709c0:	09b8 2007 09b8 2007 09c0 2007 09c0 2007     ... ... ... ... 
200709d0:	09c8 2007 09c8 2007 09d0 2007 09d0 2007     ... ... ... ... 
200709e0:	09d8 2007 09d8 2007 09e0 2007 09e0 2007     ... ... ... ... 
200709f0:	09e8 2007 09e8 2007 09f0 2007 09f0 2007     ... ... ... ... 
20070a00:	09f8 2007 09f8 2007 0a00 2007 0a00 2007     ... ... ... ... 
20070a10:	0a08 2007 0a08 2007 0a10 2007 0a10 2007     ... ... ... ... 
20070a20:	0a18 2007 0a18 2007 0a20 2007 0a20 2007     ... ...  ..  .. 
20070a30:	0a28 2007 0a28 2007 0a30 2007 0a30 2007     (.. (.. 0.. 0.. 
20070a40:	0a38 2007 0a38 2007 0a40 2007 0a40 2007     8.. 8.. @.. @.. 
20070a50:	0a48 2007 0a48 2007 0a50 2007 0a50 2007     H.. H.. P.. P.. 
20070a60:	0a58 2007 0a58 2007 0a60 2007 0a60 2007     X.. X.. `.. `.. 
20070a70:	0a68 2007 0a68 2007 0a70 2007 0a70 2007     h.. h.. p.. p.. 
20070a80:	0a78 2007 0a78 2007 0a80 2007 0a80 2007     x.. x.. ... ... 
20070a90:	0a88 2007 0a88 2007 0a90 2007 0a90 2007     ... ... ... ... 
20070aa0:	0a98 2007 0a98 2007 0aa0 2007 0aa0 2007     ... ... ... ... 
20070ab0:	0aa8 2007 0aa8 2007 0ab0 2007 0ab0 2007     ... ... ... ... 
20070ac0:	0ab8 2007 0ab8 2007 0ac0 2007 0ac0 2007     ... ... ... ... 
20070ad0:	0ac8 2007 0ac8 2007 0ad0 2007 0ad0 2007     ... ... ... ... 

20070ae0 <__malloc_sbrk_base>:
20070ae0:	ffff ffff                                   ....

20070ae4 <__malloc_trim_threshold>:
20070ae4:	0000 0002                                   ....
